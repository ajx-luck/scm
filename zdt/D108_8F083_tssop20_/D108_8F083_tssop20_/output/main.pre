
# 1 "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"

# 26 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 5 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc8f083.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char OPTION_REG @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char TRISB @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char WPDB @ 0x07;
volatile unsigned char WPUB @ 0x08;
volatile unsigned char IOCB @ 0x09;
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char ODCONB @ 0x0C;
volatile unsigned char PIR1 @ 0x0D;
volatile unsigned char PIE1 @ 0x0E;
volatile unsigned char CMP1CON0 @ 0x0F;
volatile unsigned char CMP1CON1 @ 0x10;
volatile unsigned char PR2 @ 0x11;
volatile unsigned char TMR2 @ 0x12;
volatile unsigned char T2CON @ 0x13;
volatile unsigned char OSCCON @ 0x14;
volatile unsigned char PWMCON0 @ 0x15;
volatile unsigned char PWMCON1 @ 0x16;
volatile unsigned char PWMTL @ 0x17;
volatile unsigned char PWMTH @ 0x18;
volatile unsigned char PWMD0L @ 0x19;
volatile unsigned char PWMD1L @ 0x1A;
volatile unsigned char PWMD4L @ 0x1B;
volatile unsigned char PWMT4L @ 0x1C;
volatile unsigned char PWMCON2 @ 0x1D;
volatile unsigned char PWMD01H @ 0x1E;
volatile unsigned char PWM01DT @ 0x1F;
volatile unsigned char TMR0 @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char PORTA @ 0x86;
volatile unsigned char WPDA @ 0x87;
volatile unsigned char WPUA @ 0x88;
volatile unsigned char IOCA @ 0x89;
volatile unsigned char ODCONA @ 0x8C;
volatile unsigned char EECON1 @ 0x8D;
volatile unsigned char EECON2 @ 0x8E;
volatile unsigned char EEDAT @ 0x8F;
volatile unsigned char EEDATH @ 0x90;
volatile unsigned char EEADR @ 0x91;
volatile unsigned char EEADRH @ 0x92;
volatile unsigned char ANSEL0 @ 0x93;
volatile unsigned char ANSEL1 @ 0x94;
volatile unsigned char ADCON0 @ 0x95;
volatile unsigned char ADCON1 @ 0x96;
volatile unsigned char ADRESL @ 0x98;
volatile unsigned char ADRESH @ 0x99;
volatile unsigned char CMP2CON0 @ 0x9A;
volatile unsigned char PWMD2L @ 0x9B;
volatile unsigned char PWMD3L @ 0x9C;
volatile unsigned char PWM23DT @ 0x9D;
volatile unsigned char PWMD23H @ 0x9E;
volatile unsigned char CMP2CON1 @ 0x9F;
volatile unsigned char TRISC @ 0x105;
volatile unsigned char PORTC @ 0x106;
volatile unsigned char WPUC @ 0x108;
volatile unsigned char ANSEL2 @ 0x109;
volatile unsigned char TMR1L @ 0x10C;
volatile unsigned char TMR1H @ 0x10D;
volatile unsigned char T1CON @ 0x10E;
volatile unsigned char PIR2 @ 0x10F;
volatile unsigned char PIE2 @ 0x110;
volatile unsigned char KEYCON0 @ 0x111;
volatile unsigned char KEYCON1 @ 0x112;
volatile unsigned char KEYCON2 @ 0x113;
volatile unsigned char KEYDATAL @ 0x116;
volatile unsigned char KEYDATAH @ 0x117;
volatile unsigned char TXSTA @ 0x118;
volatile unsigned char RCSTA @ 0x119;
volatile unsigned char SPBRG @ 0x11A;
volatile unsigned char TXREG @ 0x11B;
volatile unsigned char RCREG @ 0x11C;

volatile bit T0LSE_EN @ ((unsigned)&OPTION_REG*8)+7;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;


volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;


volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;


volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;


volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
volatile bit WPDB2 @ ((unsigned)&WPDB*8)+2;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;


volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;


volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;


volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;


volatile bit ODCONB7 @ ((unsigned)&ODCONB*8)+7;
volatile bit ODCONB6 @ ((unsigned)&ODCONB*8)+6;
volatile bit ODCONB5 @ ((unsigned)&ODCONB*8)+5;
volatile bit ODCONB4 @ ((unsigned)&ODCONB*8)+4;
volatile bit ODCONB3 @ ((unsigned)&ODCONB*8)+3;
volatile bit ODCONB2 @ ((unsigned)&ODCONB*8)+2;
volatile bit ODCONB1 @ ((unsigned)&ODCONB*8)+1;
volatile bit ODCONB0 @ ((unsigned)&ODCONB*8)+0;


volatile bit RCIF @ ((unsigned)&PIR1*8)+7;
volatile bit TXIF @ ((unsigned)&PIR1*8)+6;
volatile bit CMP1IF @ ((unsigned)&PIR1*8)+5;
volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
volatile bit TMR1IF @ ((unsigned)&PIR1*8)+2;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit ADIF @ ((unsigned)&PIR1*8)+0;


volatile bit RCIE @ ((unsigned)&PIE1*8)+7;
volatile bit TXIE @ ((unsigned)&PIE1*8)+6;
volatile bit CMP1IE @ ((unsigned)&PIE1*8)+5;
volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
volatile bit TMR1IE @ ((unsigned)&PIE1*8)+2;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit ADIE @ ((unsigned)&PIE1*8)+0;


volatile bit CMP1EN @ ((unsigned)&CMP1CON0*8)+7;
volatile bit CMP1PS @ ((unsigned)&CMP1CON0*8)+6;
volatile bit CMP1NS2 @ ((unsigned)&CMP1CON0*8)+5;
volatile bit CMP1NS1 @ ((unsigned)&CMP1CON0*8)+4;
volatile bit CMP1NS0 @ ((unsigned)&CMP1CON0*8)+3;
volatile bit CMP1NV @ ((unsigned)&CMP1CON0*8)+2;
volatile bit CMP1OUT @ ((unsigned)&CMP1CON0*8)+1;
volatile bit CMP1OEN @ ((unsigned)&CMP1CON0*8)+0;


volatile bit CMP1IM @ ((unsigned)&CMP1CON1*8)+7;
volatile bit AN1_EN @ ((unsigned)&CMP1CON1*8)+6;
volatile bit RBIAS1_H @ ((unsigned)&CMP1CON1*8)+5;
volatile bit RBIAS1_L @ ((unsigned)&CMP1CON1*8)+4;
volatile bit LVDS13 @ ((unsigned)&CMP1CON1*8)+3;
volatile bit LVDS12 @ ((unsigned)&CMP1CON1*8)+2;
volatile bit LVDS11 @ ((unsigned)&CMP1CON1*8)+1;
volatile bit LVDS10 @ ((unsigned)&CMP1CON1*8)+0;


volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;


volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;


volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;


volatile bit PWMIO_SEL1 @ ((unsigned)&PWMCON1*8)+7;
volatile bit PWMIO_SEL0 @ ((unsigned)&PWMCON1*8)+6;
volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;


volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;


volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;


volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;


volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;


volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;


volatile bit RA7 @ ((unsigned)&PORTA*8)+7;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA0 @ ((unsigned)&PORTA*8)+0;


volatile bit WPDA7 @ ((unsigned)&WPDA*8)+7;
volatile bit WPDA6 @ ((unsigned)&WPDA*8)+6;
volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;


volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;


volatile bit IOCA7 @ ((unsigned)&IOCA*8)+7;
volatile bit IOCA6 @ ((unsigned)&IOCA*8)+6;
volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;


volatile bit ODCONA7 @ ((unsigned)&ODCONA*8)+7;
volatile bit ODCONA6 @ ((unsigned)&ODCONA*8)+6;
volatile bit ODCONA5 @ ((unsigned)&ODCONA*8)+5;
volatile bit ODCONA4 @ ((unsigned)&ODCONA*8)+4;
volatile bit ODCONA3 @ ((unsigned)&ODCONA*8)+3;
volatile bit ODCONA2 @ ((unsigned)&ODCONA*8)+2;
volatile bit ODCONA1 @ ((unsigned)&ODCONA*8)+1;
volatile bit ODCONA0 @ ((unsigned)&ODCONA*8)+0;


volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit RD @ ((unsigned)&EECON1*8)+0;


volatile bit EEDAT7 @ ((unsigned)&EEDAT*8)+7;
volatile bit EEDAT6 @ ((unsigned)&EEDAT*8)+6;
volatile bit EEDAT5 @ ((unsigned)&EEDAT*8)+5;
volatile bit EEDAT4 @ ((unsigned)&EEDAT*8)+4;
volatile bit EEDAT3 @ ((unsigned)&EEDAT*8)+3;
volatile bit EEDAT2 @ ((unsigned)&EEDAT*8)+2;
volatile bit EEDAT1 @ ((unsigned)&EEDAT*8)+1;
volatile bit EEDAT0 @ ((unsigned)&EEDAT*8)+0;


volatile bit EEDATH7 @ ((unsigned)&EEDATH*8)+7;
volatile bit EEDATH6 @ ((unsigned)&EEDATH*8)+6;
volatile bit EEDATH5 @ ((unsigned)&EEDATH*8)+5;
volatile bit EEDATH4 @ ((unsigned)&EEDATH*8)+4;
volatile bit EEDATH3 @ ((unsigned)&EEDATH*8)+3;
volatile bit EEDATH2 @ ((unsigned)&EEDATH*8)+2;
volatile bit EEDATH1 @ ((unsigned)&EEDATH*8)+1;
volatile bit EEDATH0 @ ((unsigned)&EEDATH*8)+0;


volatile bit EEADR7 @ ((unsigned)&EEADR*8)+7;
volatile bit EEADR6 @ ((unsigned)&EEADR*8)+6;
volatile bit EEADR5 @ ((unsigned)&EEADR*8)+5;
volatile bit EEADR4 @ ((unsigned)&EEADR*8)+4;
volatile bit EEADR3 @ ((unsigned)&EEADR*8)+3;
volatile bit EEADR2 @ ((unsigned)&EEADR*8)+2;
volatile bit EEADR1 @ ((unsigned)&EEADR*8)+1;
volatile bit EEADR0 @ ((unsigned)&EEADR*8)+0;


volatile bit EEADRH3 @ ((unsigned)&EEADRH*8)+3;
volatile bit EEADRH2 @ ((unsigned)&EEADRH*8)+2;
volatile bit EEADRH1 @ ((unsigned)&EEADRH*8)+1;
volatile bit EEADRH0 @ ((unsigned)&EEADRH*8)+0;


volatile bit ANS7 @ ((unsigned)&ANSEL0*8)+7;
volatile bit ANS6 @ ((unsigned)&ANSEL0*8)+6;
volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;


volatile bit ANS15 @ ((unsigned)&ANSEL1*8)+7;
volatile bit ANS14 @ ((unsigned)&ANSEL1*8)+6;
volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
volatile bit ANS10 @ ((unsigned)&ANSEL1*8)+2;
volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;


volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit ADON @ ((unsigned)&ADCON0*8)+0;


volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;


volatile bit CMP2EN @ ((unsigned)&CMP2CON0*8)+7;
volatile bit CMP2PS @ ((unsigned)&CMP2CON0*8)+6;
volatile bit CMP2NS2 @ ((unsigned)&CMP2CON0*8)+5;
volatile bit CMP2NS1 @ ((unsigned)&CMP2CON0*8)+4;
volatile bit CMP2NS0 @ ((unsigned)&CMP2CON0*8)+3;
volatile bit CMP2NV @ ((unsigned)&CMP2CON0*8)+2;
volatile bit CMP2OUT @ ((unsigned)&CMP2CON0*8)+1;
volatile bit CMP2OEN @ ((unsigned)&CMP2CON0*8)+0;


volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;


volatile bit CMP2IM @ ((unsigned)&CMP2CON1*8)+7;
volatile bit AN2_EN @ ((unsigned)&CMP2CON1*8)+6;
volatile bit RBIAS2_H @ ((unsigned)&CMP2CON1*8)+5;
volatile bit RBIAS2_L @ ((unsigned)&CMP2CON1*8)+4;
volatile bit LVDS23 @ ((unsigned)&CMP2CON1*8)+3;
volatile bit LVDS22 @ ((unsigned)&CMP2CON1*8)+2;
volatile bit LVDS21 @ ((unsigned)&CMP2CON1*8)+1;
volatile bit LVDS20 @ ((unsigned)&CMP2CON1*8)+0;


volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;


volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC0 @ ((unsigned)&PORTC*8)+0;


volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;


volatile bit ANS17 @ ((unsigned)&ANSEL2*8)+1;
volatile bit ANS16 @ ((unsigned)&ANSEL2*8)+0;


volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;


volatile bit TKIF @ ((unsigned)&PIR2*8)+6;
volatile bit CMP2IF @ ((unsigned)&PIR2*8)+5;


volatile bit TKIE @ ((unsigned)&PIE2*8)+6;
volatile bit CMP2IE @ ((unsigned)&PIE2*8)+5;


volatile bit KDONE @ ((unsigned)&KEYCON0*8)+7;
volatile bit KTOUT @ ((unsigned)&KEYCON0*8)+2;
volatile bit KCAP @ ((unsigned)&KEYCON0*8)+1;
volatile bit KEN @ ((unsigned)&KEYCON0*8)+0;


volatile bit KVREF1 @ ((unsigned)&KEYCON1*8)+7;
volatile bit KVREF0 @ ((unsigned)&KEYCON1*8)+6;
volatile bit KCLK1 @ ((unsigned)&KEYCON1*8)+5;
volatile bit KCLK0 @ ((unsigned)&KEYCON1*8)+4;
volatile bit KCHS3 @ ((unsigned)&KEYCON1*8)+3;
volatile bit KCHS2 @ ((unsigned)&KEYCON1*8)+2;
volatile bit KCHS1 @ ((unsigned)&KEYCON1*8)+1;
volatile bit KCHS0 @ ((unsigned)&KEYCON1*8)+0;


volatile bit CAP_LVBO2 @ ((unsigned)&KEYCON2*8)+7;
volatile bit CAP_LVBO1 @ ((unsigned)&KEYCON2*8)+6;
volatile bit CAP_LVBO0 @ ((unsigned)&KEYCON2*8)+5;
volatile bit TP_EN @ ((unsigned)&KEYCON2*8)+4;
volatile bit TKLDOEN @ ((unsigned)&KEYCON2*8)+3;
volatile bit TKLDO_SEL @ ((unsigned)&KEYCON2*8)+1;
volatile bit TKEN @ ((unsigned)&KEYCON2*8)+0;


volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TX9EN @ ((unsigned)&TXSTA*8)+6;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit SCKP @ ((unsigned)&TXSTA*8)+3;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;


volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RX9EN @ ((unsigned)&RCSTA*8)+6;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit RCIDL @ ((unsigned)&RCSTA*8)+3;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;


# 27 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 12 "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\Touch_Kscan_Library.h"
#pragma warning disable 752,759

# 5 "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\TouchKeyConst.h"
const unsigned char C_OPTION_REG_ = 0x0A;

# 18 "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\Touch_Kscan_Library.h"
extern void CheckTouchKey(void);
extern void SystemEnterSleep();
extern volatile bit b_kerr;

# 26
extern volatile unsigned char KeyFlag[2];

# 63
const unsigned char Table_KeyChannel[] = {
0x40|0x00|0x04,
0x40|0x00|0x03,
0x40|0x00|0x02
};


const unsigned char Table_KeyCap[] = {
0x00 | 0x2,
0x00 | 0x2,
0x00 | 0x2
};


const unsigned char Table_KeyDown[] = {
10,
10,
10
};

# 91
unsigned int KeyResSum[3];
unsigned int KeyOldValue0[3];
unsigned int KeyOldValue1[3];
unsigned int KeyOldValue2[3];
unsigned int KeyReference[3];
unsigned char KeyUpShake[3];

const unsigned int KeyValidTime = 60*(1000/4);
const unsigned char KeyTotalNumber = 3;
const unsigned char KeyShakeCounter = 2;
const unsigned char KeyValidNumber = 1;

const unsigned int KeyWakeUpEn = 0x0007;


const unsigned char WaterModeSel = 1;

# 20 "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
volatile unsigned char MainTime;
volatile bit B_MainLoop,B_OnOff;
unsigned char count1s = 0;
unsigned char workStep = 0;
unsigned char wuhuaFlag = 0;
unsigned int shanshuoTime = 0;
unsigned int shanshuoTime2 = 0;
unsigned int shanshuoTime3 = 0;
unsigned int fanValue = 0;
unsigned int wuhuaValue = 0;
unsigned char fanDuty = 0;
unsigned char count10s = 0;
unsigned char fanOverTime = 0;
unsigned char firstTime = 0;
unsigned int checkTime = 0;
unsigned int lowWaterTime = 0;
unsigned char chrgFlag = 0;
unsigned char chrgFullFlag = 0;
unsigned char chrgFullTime = 0;
unsigned char firstLock = 0;
unsigned char lowBatLock = 0;
unsigned char lowBatTime = 0;
unsigned char lowFanTime = 0;
unsigned char bujinFlag = 0;
unsigned int motorStep = 0;
unsigned int maxMotorStep = 512;
unsigned char powerFlag = 0;
unsigned int keyCount = 0;
unsigned char longKeyFlag = 0;
unsigned char closeTime = 0;
unsigned char motorStopFlag = 0;
unsigned char zeroFlag = 1;
unsigned char bujinStartFlag = 0;

volatile unsigned int adresult;
volatile unsigned int result;
volatile unsigned char test_adc;
volatile unsigned int power_ad;

void chrgCtr();
unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);


void Init_System()
{
asm("nop");
asm("clrwdt");
INTCON = 0;
OSCCON = 0X72;
OPTION_REG = 0;




TRISA = 0x04;
PORTA = 0;
TRISB = 0x20;
PORTB = 0;
WPUB = 0x00;
TRISC = 0;
PORTC = 0;

PIE1 = 2;
PR2 = 250;
T2CON = 4;

INTCON = 0XC0;
ADCON0 = 0X41;
ADON = 1;
ADCON1 = 0x00;
}

# 100
void Refurbish_Sfr()
{

PIE1 = 2;
PR2 = 250;
INTCON = 0XC0;
if (4 != T2CON)
T2CON = 4;
}

# 114
void KeyServer()
{
static unsigned char KeyOldFlag = 0;
if (KeyFlag[0])
{
if (KeyFlag[0] != KeyOldFlag)
{

KeyOldFlag ^= KeyFlag[0];
if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFlag > 0)
{

if(lowBatLock == 1)
{
shanshuoTime2 = 450;
}
else if(++wuhuaFlag > 2)
{
wuhuaFlag = 0;
}
if(wuhuaFlag >= 2)
{
shanshuoTime2 = 450;
count10s = 0;
}
else
{
shanshuoTime2 = 0;
}
}
if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFlag > 0)
{

if(lowBatLock == 1)
{
shanshuoTime = 450;
}
else if(++workStep > 3)
{
workStep = 0;
bujinFlag = 0;
}
if(workStep >= 2)
{
shanshuoTime = 450;
}
else
{
shanshuoTime = 0;
}

}
if ((KeyOldFlag & 0x4) && (KeyFlag[0] & 0x4) && firstLock == 0 && workStep > 0 && powerFlag > 0)
{

if(++bujinFlag > 3)
{
bujinFlag = 0;
}
bujinStartFlag = 1;
if(bujinFlag >= 2)
{
shanshuoTime3 = 450;
}
else
{
shanshuoTime3 = 0;
}
}

KeyOldFlag = KeyFlag[0];
}
if(firstLock == 0 && KeyOldFlag & 0x4)
{
if(++keyCount >= 400)
{
keyCount = 0;
if(longKeyFlag == 0)
{
longKeyFlag = 1;
if(powerFlag > 0)
{
powerFlag = 0;
workStep = 0;
wuhuaFlag = 0;
bujinFlag = 0;
}
else
{
powerFlag = 1;
shanshuoTime3 = 900;
}
}
}
}
}
else
{
KeyOldFlag = 0;
longKeyFlag = 0;
keyCount = 0;
}
}

# 222
void interrupt Isr_Timer()
{
if(TMR2IF)
{
TMR2IF = 0;
if(++MainTime >= 32)
{
MainTime = 0;
B_MainLoop = 1;
if(++count1s >= 250)
{
count1s = 0;
}
}
}
else
{
PIR1 = 0;
}

}

void WorkSleep()
{

static unsigned char time;

if(B_OnOff)time = 0;

if(++time >= 125)
{
time = 0;
INTCON = 0;
PIE1 = 0;
PIE2 = 0;
PIR1 = 0;
PIR2 = 0;
T2CON = 0;
ADCON1 = 0;


ADCON0 = 0;


PORTA = 0x01;
PORTB = 0x00;
TRISC = 0;
PORTC = 0x03;

TRISB5 =1;

RBIF = 0;
RBIE = 1;
IOCB5= 1;
PORTB;

# 288
SystemEnterSleep();
if(RAIF)
{
RAIF = 0;
PORTA;
}

Refurbish_Sfr();
PORTB &= 0xFD;
ADCON0 = 0X41;
ADON = 1;
ADCON1 = 0x00;
}

}

# 323
unsigned char ADC_Sample(unsigned char adch, unsigned char adldo)
{
volatile unsigned long adsum = 0;
volatile unsigned int admin = 0, admax = 0;
volatile unsigned int ad_temp = 0;

if ((!LDO_EN) && (adldo & 0x04) )
{

ADCON1 = adldo;
_delay((unsigned long)((100)*(8000000/4000000.0)));
}
else
ADCON1 = adldo;

if(adch & 0x10)
{
CHS4 = 1;
adch &= 0x0f;
}
unsigned char i = 0;
for (i = 0; i < 10; i++)
{
ADCON0 = (unsigned char)(0X41 | (adch << 2));
asm("nop");
asm("nop");
asm("nop");
asm("nop");
GODONE = 1;

unsigned char j = 0;
while (GODONE)
{
_delay((unsigned long)((2)*(8000000/4000000.0)));

if (0 == (--j))
return 0;
}

ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));

if (0 == admax)
{
admax = ad_temp;
admin = ad_temp;
}
else if (ad_temp > admax)
admax = ad_temp;
else if (ad_temp < admin)
admin = ad_temp;

adsum += ad_temp;
}
adsum -= admax;
if (adsum >= admin)
adsum -= admin;
else
adsum = 0;

adresult = adsum >> 3;

adsum = 0;
admin = 0;
admax = 0;
return 0xA5;

}


void chrgCtr()
{
if(PORTB & 0x20)
{
chrgFlag = 1;
firstLock = 0;
lowBatLock = 0;
if(power_ad > 4140)
{
if(++chrgFullTime > 200)
{
chrgFullTime = 0;
chrgFullFlag = 1;
}
}
else
{
chrgFullTime = 0;
}

}
else
{
chrgFlag = 0;
chrgFullTime = 0;
chrgFullFlag = 0;

}
}

void keyLedCtr()
{
if(shanshuoTime > 0)
{
shanshuoTime--;
if((shanshuoTime % 150) < 75)
{
PORTC |= 0x01;
}
else
{
PORTC &= 0xFE;
}
}
else if(workStep > 0)
{
PORTC &= 0xFE;
}
else
{
PORTC |= 0x01;
}

if(shanshuoTime2 > 0)
{
shanshuoTime2--;
if((shanshuoTime2 % 150) < 75)
{
PORTC |= 0x02;
}
else
{
PORTC &= 0xFD;
}
}
else if(wuhuaFlag > 0)
{
PORTC &= 0xFD;
}
else
{
PORTC |= 0x02;
}
if(shanshuoTime3 > 0)
{
shanshuoTime3--;
if((shanshuoTime3 % 150) < 75)
{
PORTA |= 0x01;
}
else
{
PORTA &= 0xFE;
}
}
else if(bujinFlag)
{
PORTA &= 0xFE;
}
else if(chrgFlag)
{
if(chrgFullFlag || count1s < 50)
{
PORTA &= 0xFE;
}
else
{
PORTA |= 0x01;
}
}
else
{
PORTA |= 0x01;
}

}

void pwmInit()
{

PWMTH = 0x00;
PWMTL = 73;
PWMD23H = 0x00;
PWMD3L = 32;
PWMCON1 = 0xC0;
PWMCON2 = 0x00;
PWMCON0 |= 0x28;
}

void pwmStop()
{
PWMD3L = 0;
PWMCON0 &= 0xF7;
PORTA &= 0xF7;
}

void fanInit()
{

PWMTH = 0x00;
PWMT4L = 73;
PWMD4L = fanDuty;
PWMCON1 = 0xC0;
PWMCON2 = 0x00;
PWMCON0 |= 0x30;
}

void fanStop()
{
PWMD4L = 0;
PWMCON0 &= 0xEF;
PORTA &= 0xEF;
}

void fanCtr()
{
if(workStep > 0)
{
PORTA |= 0x02;
unsigned char maxFanValue = 52;
if(workStep == 1)
{
maxFanValue = 40;
}
else if(workStep == 3)
{
maxFanValue = 10;
}
test_adc = ADC_Sample(2, 0);
if (0xA5 == test_adc)
{
volatile unsigned long fan_temp;
if(power_ad > 0)
{
fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
fanValue = (unsigned int)(fan_temp);
}
}
if(fanValue > 1300)
{
if(++fanOverTime > 50)
{
fanOverTime = 0;
workStep = 0;
shanshuoTime = 450;
}
}
else
{
fanOverTime = 0;
}
if(fanDuty < maxFanValue)
{
fanDuty++;
}
else if(fanDuty > maxFanValue)
{
fanDuty--;
}
fanInit();
}
else
{
fanStop();
fanDuty = 0;
PORTA &= 0xFD;
}
}

void wuhuaCtr()
{
if(count1s == 0)
{
if(++count10s >= 20)
{
count10s = 0;
}
if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
{
if(++closeTime > 200)
{
closeTime = 0;
powerFlag = 0;
}
}
else
{
closeTime = 0;
}
}
if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
{
pwmInit();

# 643
}
else
{
pwmStop();
}
}

void bujinCtr()
{
if(bujinFlag || motorStopFlag)
{

if(bujinStartFlag && zeroFlag)
{
bujinStartFlag = 0;
if(bujinFlag == 1)
{
maxMotorStep = 512;
motorStopFlag = 1;
}
else if(bujinFlag == 2)
{
maxMotorStep = 1024;
motorStopFlag = 1;
}
else if(bujinFlag == 3)
{
maxMotorStep = 1696;
motorStopFlag = 1;
}
motorStep = maxMotorStep/2;
}
if(motorStep == maxMotorStep/2 || motorStep == ((maxMotorStep/2) + maxMotorStep))
{
zeroFlag = 1;
if(bujinFlag == 0)
{
motorStopFlag = 0;
}
}
else
{
zeroFlag = 0;
}


if(++motorStep >= (maxMotorStep*2))
{
motorStep = 0;
}
unsigned char tempStep = motorStep % 8;
if(motorStep < maxMotorStep)
{

switch(tempStep)
{
case 0:
RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
break;
case 1:
RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
break;
case 2:
RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
break;
case 3:
RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
break;
case 4:
RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
break;
case 5:
RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
break;
case 6:
RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
break;
case 7:
RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
break;
}
}
else
{

switch(tempStep)
{
case 7:
RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
break;
case 6:
RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
break;
case 5:
RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
break;
case 4:
RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
break;
case 3:
RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
break;
case 2:
RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
break;
case 1:
RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
break;
case 0:
RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
break;
}
}
}
else
{
PORTA &= 0x1F;
PORTB &= 0x7F;
}
}


void workCtr()
{
test_adc = ADC_Sample(31, 0);
if (0xA5 == test_adc)
{
volatile unsigned long power_temp;

power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
power_ad = (unsigned int)(power_temp);
}
if(workStep == 2 && power_ad < 2900)
{
if(++lowFanTime > 200)
{
lowFanTime = 0;
workStep = 1;
}
}
else
{
lowFanTime = 0;
}
if(power_ad < 2700)
{
if(++lowBatTime > 200)
{
lowBatTime = 0;
lowBatLock = 1;
workStep = 0;
wuhuaFlag = 0;
bujinFlag = 0;
}
}
else
{
lowBatTime = 0;
}
if(firstTime > 0)
{
firstTime--;
PORTB = 0x00;
PORTA = 0x00;
}
else
{
keyLedCtr();
fanCtr();
wuhuaCtr();
bujinCtr();

}

}

# 822
void main()
{
Init_System();
firstLock = 1;
firstTime = 200;
while(1)
{
if(B_MainLoop)
{
B_MainLoop = 0;
asm("clrwdt");

CheckTouchKey();
chrgCtr();
Refurbish_Sfr();
KeyServer();
workCtr();
if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && powerFlag == 0 && keyCount == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 == 0)
{
WorkSleep();
}
}
}
}
