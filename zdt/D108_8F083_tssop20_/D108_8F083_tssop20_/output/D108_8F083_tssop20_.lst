

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 28 13:44:09 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	swtext2,local,class=CONST,delta=2
    23                           	psect	text17,local,class=CODE,merge=1,delta=2
    24                           	psect	text21,local,class=CODE,merge=1,delta=2
    25                           	psect	text22,local,class=CODE,merge=1,delta=2
    26                           	psect	text35,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes0,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataBANK0
    67  0000                     __pidataBANK0:	
    68                           
    69                           	psect	strings
    70  0800                     __pstrings:	
    71  0800                     stringtab:	
    72  0800                     __stringtab:	
    73  0800                     stringcode:	
    74                           ;	String table - string pointers are 1 byte each
    75                           
    76  0800                     stringdir:	
    77  0800  3008               	movlw	high stringdir
    78  0801  008A               	movwf	10
    79  0802  0804               	movf	4,w
    80  0803  0A84               	incf	4,f
    81  0804  0782               	addwf	2,f
    82  0805                     __stringbase:	
    83  0805  3400               	retlw	0
    84  0806                     __end_of__stringtab:	
    85  0806                     _Table_KeyFalg:	
    86  0806  3401               	retlw	1
    87  0807  3402               	retlw	2
    88  0808  3404               	retlw	4
    89  0809  3408               	retlw	8
    90  080A  3410               	retlw	16
    91  080B  3420               	retlw	32
    92  080C  3440               	retlw	64
    93  080D  3480               	retlw	128
    94  080E                     __end_of_Table_KeyFalg:	
    95  080E                     _Table_KeyDown:	
    96  080E  340A               	retlw	10
    97  080F  340A               	retlw	10
    98  0810  340A               	retlw	10
    99  0811                     __end_of_Table_KeyDown:	
   100  0811                     _Table_KeyCap:	
   101  0811  3402               	retlw	2
   102  0812  3402               	retlw	2
   103  0813  3402               	retlw	2
   104  0814                     __end_of_Table_KeyCap:	
   105  0814                     _Table_KeyChannel:	
   106  0814  3444               	retlw	68
   107  0815  3443               	retlw	67
   108  0816  3442               	retlw	66
   109  0817                     __end_of_Table_KeyChannel:	
   110                           
   111                           	psect	nvBANK1
   112  00CF                     __pnvBANK1:	
   113  00CF                     _firstLock:	
   114  00CF                     	ds	1
   115  00D0                     _firstTime:	
   116  00D0                     	ds	1
   117  001D                     _PWMCON2	set	29
   118  001C                     _PWMT4L	set	28
   119  001B                     _PWMD4L	set	27
   120  0018                     _PWMTH	set	24
   121  0017                     _PWMTL	set	23
   122  0016                     _PWMCON1	set	22
   123  0015                     _PWMCON0	set	21
   124  0014                     _OSCCON	set	20
   125  0013                     _T2CON	set	19
   126  0011                     _PR2	set	17
   127  000E                     _PIE1	set	14
   128  000D                     _PIR1	set	13
   129  000B                     _INTCON	set	11
   130  0008                     _WPUB	set	8
   131  0006                     _PORTB	set	6
   132  0005                     _TRISB	set	5
   133  0001                     _OPTION_REG	set	1
   134  0069                     _TMR2IF	set	105
   135  006B                     _RAIF	set	107
   136  0058                     _RBIF	set	88
   137  0059                     _INTF	set	89
   138  005B                     _RBIE	set	91
   139  004D                     _IOCB5	set	77
   140  0036                     _RB6	set	54
   141  0037                     _RB7	set	55
   142  002D                     _TRISB5	set	45
   143  002E                     _TRISB6	set	46
   144  009E                     _PWMD23H	set	158
   145  009C                     _PWMD3L	set	156
   146  0099                     _ADRESH	set	153
   147  0098                     _ADRESL	set	152
   148  0096                     _ADCON1	set	150
   149  0095                     _ADCON0	set	149
   150  0086                     _PORTA	set	134
   151  0085                     _TRISA	set	133
   152  0081                     _TMR0	set	129
   153  04B2                     _LDO_EN	set	1202
   154  04B6                     _CHS4	set	1206
   155  04A8                     _ADON	set	1192
   156  04A9                     _GODONE	set	1193
   157  0435                     _RA5	set	1077
   158  0436                     _RA6	set	1078
   159  0437                     _RA7	set	1079
   160  0117                     _KEYDATAH	set	279
   161  0116                     _KEYDATAL	set	278
   162  0113                     _KEYCON2	set	275
   163  0112                     _KEYCON1	set	274
   164  0111                     _KEYCON0	set	273
   165  0110                     _PIE2	set	272
   166  010F                     _PIR2	set	271
   167  0106                     _PORTC	set	262
   168  0105                     _TRISC	set	261
   169                           
   170                           	psect	cinit
   171  000D                     start_initialization:	
   172                           ; #config settings
   173                           
   174  000D                     __initialization:	
   175                           
   176                           ;initializer for _maxMotorStep
   177  000D  3002               	movlw	2
   178  000E  01EC               	clrf	__pdataBANK0& (0+127)
   179  000F  00ED               	movwf	(__pdataBANK0+1)& (0+127)
   180                           
   181                           ;initializer for _zeroFlag
   182  0010  3001               	movlw	1
   183  0011  00EE               	movwf	(__pdataBANK0+2)& (0+127)
   184  0012  30A0               	movlw	low __pbssBANK1
   185                           
   186                           ; Clear objects allocated to BANK1
   187  0013  1383               	bcf	3,7	;select IRP bank0
   188  0014  0084               	movwf	4
   189  0015  30CB               	movlw	low (__pbssBANK1+43)
   190  0016  158A  25F4  118A   	fcall	clear_ram0
   191                           
   192                           ; Clear objects allocated to BANK0
   193  0019  3020               	movlw	low __pbssBANK0
   194  001A  0084               	movwf	4
   195  001B  304A               	movlw	low (__pbssBANK0+42)
   196  001C  158A  25F4         	fcall	clear_ram0
   197                           
   198                           ; Clear objects allocated to COMMON
   199  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   200  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   201  0020  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   202                           
   203                           ; Clear objects allocated to BITCOMMON
   204  0021  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   205  0022                     end_of_initialization:	
   206                           ;End of C runtime variable initialization code
   207                           
   208  0022                     __end_of__initialization:	
   209  0022  0183               	clrf	3
   210  0023  158A  2E59         	ljmp	_main	;jump to C main() function
   211                           
   212                           	psect	bitbssCOMMON
   213  03C0                     __pbitbssCOMMON:	
   214  03C0                     _b_ksleep:	
   215  03C0                     	ds	1
   216  03C1                     _b_kerr:	
   217  03C1                     	ds	1
   218  03C2                     _b_kclr:	
   219  03C2                     	ds	1
   220  03C3                     _b_kover1:	
   221  03C3                     	ds	1
   222  03C4                     _b_kover:	
   223  03C4                     	ds	1
   224  03C5                     _B_OnOff:	
   225  03C5                     	ds	1
   226  03C6                     _B_MainLoop:	
   227  03C6                     	ds	1
   228                           
   229                           	psect	bssCOMMON
   230  0079                     __pbssCOMMON:	
   231  0079                     _KeyFlag:	
   232  0079                     	ds	2
   233  007B                     _workStep:	
   234  007B                     	ds	1
   235                           
   236                           	psect	bssBANK0
   237  0020                     __pbssBANK0:	
   238  0020                     _KeyData:	
   239  0020                     	ds	2
   240  0022                     _KeyOldData:	
   241  0022                     	ds	2
   242  0024                     _power_ad:	
   243  0024                     	ds	2
   244  0026                     _keyCount:	
   245  0026                     	ds	2
   246  0028                     _motorStep:	
   247  0028                     	ds	2
   248  002A                     _shanshuoTime3:	
   249  002A                     	ds	2
   250  002C                     _shanshuoTime2:	
   251  002C                     	ds	2
   252  002E                     _shanshuoTime:	
   253  002E                     	ds	2
   254  0030                     TurnKeyFlags@F84:	
   255  0030                     	ds	1
   256  0031                     TurnKeyFlags@F83:	
   257  0031                     	ds	1
   258  0032                     CheckKeyOldValue@F77:	
   259  0032                     	ds	1
   260  0033                     _KeyMaxSub:	
   261  0033                     	ds	1
   262  0034                     _KeyCounter:	
   263  0034                     	ds	1
   264  0035                     WorkSleep@time:	
   265  0035                     	ds	1
   266  0036                     KeyServer@KeyOldFlag:	
   267  0036                     	ds	1
   268  0037                     _test_adc:	
   269  0037                     	ds	1
   270  0038                     _bujinStartFlag:	
   271  0038                     	ds	1
   272  0039                     _motorStopFlag:	
   273  0039                     	ds	1
   274  003A                     _closeTime:	
   275  003A                     	ds	1
   276  003B                     _longKeyFlag:	
   277  003B                     	ds	1
   278  003C                     _powerFlag:	
   279  003C                     	ds	1
   280  003D                     _bujinFlag:	
   281  003D                     	ds	1
   282  003E                     _lowBatLock:	
   283  003E                     	ds	1
   284  003F                     _chrgFullTime:	
   285  003F                     	ds	1
   286  0040                     _chrgFullFlag:	
   287  0040                     	ds	1
   288  0041                     _chrgFlag:	
   289  0041                     	ds	1
   290  0042                     _fanOverTime:	
   291  0042                     	ds	1
   292  0043                     _count10s:	
   293  0043                     	ds	1
   294  0044                     _fanDuty:	
   295  0044                     	ds	1
   296  0045                     _wuhuaFlag:	
   297  0045                     	ds	1
   298  0046                     _count1s:	
   299  0046                     	ds	1
   300  0047                     _MainTime:	
   301  0047                     	ds	1
   302  0048                     _adresult:	
   303  0048                     	ds	2
   304                           
   305                           	psect	dataBANK0
   306  006C                     __pdataBANK0:	
   307  006C                     _maxMotorStep:	
   308  006C                     	ds	2
   309  006E                     _zeroFlag:	
   310  006E                     	ds	1
   311                           
   312                           	psect	bssBANK1
   313  00A0                     __pbssBANK1:	
   314  00A0                     _KeyReference:	
   315  00A0                     	ds	6
   316  00A6                     _KeyOldValue2:	
   317  00A6                     	ds	6
   318  00AC                     _KeyOldValue1:	
   319  00AC                     	ds	6
   320  00B2                     _KeyOldValue0:	
   321  00B2                     	ds	6
   322  00B8                     _KeyResSum:	
   323  00B8                     	ds	6
   324  00BE                     _KeyUpShake:	
   325  00BE                     	ds	3
   326  00C1                     CheckValidTime@F87:	
   327  00C1                     	ds	2
   328  00C3                     _result:	
   329  00C3                     	ds	2
   330  00C5                     _lowFanTime:	
   331  00C5                     	ds	2
   332  00C7                     _lowBatTime:	
   333  00C7                     	ds	2
   334  00C9                     _fanValue:	
   335  00C9                     	ds	2
   336                           
   337                           	psect	clrtext
   338  0DF4                     clear_ram0:	
   339                           ;	Called with FSR containing the base address, and
   340                           ;	W with the last address+1
   341                           
   342  0DF4  0064               	clrwdt	;clear the watchdog before getting into this loop
   343  0DF5                     clrloop0:	
   344  0DF5  0180               	clrf	0	;clear RAM location pointed to by FSR
   345  0DF6  0A84               	incf	4,f	;increment pointer
   346  0DF7  0604               	xorwf	4,w	;XOR with final address
   347  0DF8  1903               	btfsc	3,2	;have we reached the end yet?
   348  0DF9  3400               	retlw	0	;all done for this memory range, return
   349  0DFA  0604               	xorwf	4,w	;XOR again to restore value
   350  0DFB  2DF5               	goto	clrloop0	;do the next byte
   351                           
   352                           	psect	cstackBANK1
   353  00CB                     __pcstackBANK1:	
   354  00CB                     workCtr@power_temp:	
   355                           
   356                           ; 4 bytes @ 0x0
   357  00CB                     	ds	4
   358                           
   359                           	psect	cstackCOMMON
   360  0070                     __pcstackCOMMON:	
   361  0070                     ?_SystemEnterSleep:	
   362  0070                     ?_CheckTouchKey:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_Init_System:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_Refurbish_Sfr:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_KeyServer:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Isr_Timer:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ??_Isr_Timer:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_WorkSleep:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_chrgCtr:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_keyLedCtr:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_pwmInit:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_pwmStop:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_fanInit:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_fanStop:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_fanCtr:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_wuhuaCtr:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_bujinCtr:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_workCtr:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_KeyIsIn:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_KeyClearOne:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_KeyClearIn:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_KeyStopClear:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_ClearResSum:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_GetTouchKeyValue:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_CheckOnceResult:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_CheckKeyOldValue:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_TurnKeyFlags:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_CheckValidTime:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 1 bytes @ 0x0
   448  0070                     	ds	2
   449  0072                     ??_Init_System:	
   450  0072                     ??_Refurbish_Sfr:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     ??_KeyServer:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ?_ADC_Sample:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     ??_chrgCtr:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     ??_pwmInit:	
   463                           ; 1 bytes @ 0x2
   464                           
   465  0072                     ??_pwmStop:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ??_fanInit:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ??_fanStop:	
   472                           ; 1 bytes @ 0x2
   473                           
   474  0072                     ??_wuhuaCtr:	
   475                           ; 1 bytes @ 0x2
   476                           
   477  0072                     ??_bujinCtr:	
   478                           ; 1 bytes @ 0x2
   479                           
   480  0072                     ??_KeyIsIn:	
   481                           ; 1 bytes @ 0x2
   482                           
   483  0072                     ??_KeyClearOne:	
   484                           ; 1 bytes @ 0x2
   485                           
   486  0072                     ??_ClearResSum:	
   487                           ; 1 bytes @ 0x2
   488                           
   489  0072                     ?_KeyHave:	
   490                           ; 1 bytes @ 0x2
   491                           
   492  0072                     ??_CheckValidTime:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0072                     ??___lmul:	
   496                           ; 1 bytes @ 0x2
   497                           
   498  0072                     ?___lwmod:	
   499                           ; 1 bytes @ 0x2
   500                           
   501  0072                     ?___ftpack:	
   502                           ; 2 bytes @ 0x2
   503                           
   504  0072                     ADC_Sample@adldo:	
   505                           ; 3 bytes @ 0x2
   506                           
   507  0072                     KeyIsIn@46:	
   508                           ; 1 bytes @ 0x2
   509                           
   510  0072                     KeyClearOne@49:	
   511                           ; 1 bytes @ 0x2
   512                           
   513  0072                     ClearResSum@56:	
   514                           ; 1 bytes @ 0x2
   515                           
   516  0072                     KeyHave@59:	
   517                           ; 1 bytes @ 0x2
   518                           
   519  0072                     ___lwmod@divisor:	
   520                           ; 2 bytes @ 0x2
   521                           
   522  0072                     ___ftpack@arg:	
   523                           ; 2 bytes @ 0x2
   524                           
   525  0072                     ___lmul@product:	
   526                           ; 3 bytes @ 0x2
   527                           
   528                           
   529                           ; 4 bytes @ 0x2
   530  0072                     	ds	1
   531  0073                     ??_ADC_Sample:	
   532  0073                     ??_KeyStopClear:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0073                     ??_GetTouchKeyValue:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0073                     KeyIsIn@45:	
   539                           ; 1 bytes @ 0x3
   540                           
   541  0073                     KeyStopClear@53:	
   542                           ; 1 bytes @ 0x3
   543                           
   544  0073                     GetTouchKeyValue@64:	
   545                           ; 1 bytes @ 0x3
   546                           
   547                           
   548                           ; 2 bytes @ 0x3
   549  0073                     	ds	1
   550  0074                     ??_KeyClearIn:	
   551  0074                     ??_KeyHave:	
   552                           ; 1 bytes @ 0x4
   553                           
   554  0074                     ??_CheckKeyOldValue:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0074                     KeyClearIn@51:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     KeyHave@58:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     ___lwmod@dividend:	
   564                           ; 1 bytes @ 0x4
   565                           
   566                           
   567                           ; 2 bytes @ 0x4
   568  0074                     	ds	1
   569  0075                     ??_TurnKeyFlags:	
   570  0075                     ___ftpack@exp:	
   571                           ; 1 bytes @ 0x5
   572                           
   573  0075                     GetTouchKeyValue@63:	
   574                           ; 1 bytes @ 0x5
   575                           
   576                           
   577                           ; 2 bytes @ 0x5
   578  0075                     	ds	1
   579  0076                     ??___lwmod:	
   580  0076                     bujinCtr@tempStep:	
   581                           ; 1 bytes @ 0x6
   582                           
   583  0076                     ___ftpack@sign:	
   584                           ; 1 bytes @ 0x6
   585                           
   586  0076                     ___lwmod@counter:	
   587                           ; 1 bytes @ 0x6
   588                           
   589                           
   590                           ; 1 bytes @ 0x6
   591  0076                     	ds	1
   592  0077                     ??_keyLedCtr:	
   593  0077                     ??_fanCtr:	
   594                           ; 1 bytes @ 0x7
   595                           
   596  0077                     ??_workCtr:	
   597                           ; 1 bytes @ 0x7
   598                           
   599  0077                     ??___lwtoft:	
   600                           ; 1 bytes @ 0x7
   601                           
   602  0077                     GetTouchKeyValue@62:	
   603                           ; 1 bytes @ 0x7
   604                           
   605                           
   606                           ; 1 bytes @ 0x7
   607  0077                     	ds	1
   608  0078                     ??_CheckTouchKey:	
   609  0078                     ??_WorkSleep:	
   610                           ; 1 bytes @ 0x8
   611                           
   612  0078                     ??_main:	
   613                           ; 1 bytes @ 0x8
   614                           
   615                           
   616                           	psect	cstackBANK0
   617  004A                     __pcstackBANK0:	
   618                           ; 1 bytes @ 0x8
   619                           
   620  004A                     ??_SystemEnterSleep:	
   621  004A                     ??___ftpack:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  004A                     ??_CheckOnceResult:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  004A                     ?___lmul:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  004A                     ADC_Sample@j:	
   631                           ; 4 bytes @ 0x0
   632                           
   633  004A                     CheckKeyOldValue@79:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  004A                     ___lmul@multiplier:	
   637                           ; 2 bytes @ 0x0
   638                           
   639                           
   640                           ; 4 bytes @ 0x0
   641  004A                     	ds	1
   642  004B                     ADC_Sample@adch:	
   643                           
   644                           ; 1 bytes @ 0x1
   645  004B                     	ds	1
   646  004C                     ADC_Sample@i:	
   647  004C                     CheckKeyOldValue@80:	
   648                           ; 1 bytes @ 0x2
   649                           
   650  004C                     SystemEnterSleep@94:	
   651                           ; 2 bytes @ 0x2
   652                           
   653                           
   654                           ; 2 bytes @ 0x2
   655  004C                     	ds	1
   656  004D                     ?___lwtoft:	
   657  004D                     ___lwtoft@c:	
   658                           ; 3 bytes @ 0x3
   659                           
   660  004D                     ADC_Sample@adsum:	
   661                           ; 2 bytes @ 0x3
   662                           
   663                           
   664                           ; 4 bytes @ 0x3
   665  004D                     	ds	1
   666  004E                     CheckKeyOldValue@78:	
   667  004E                     CheckOnceResult@73:	
   668                           ; 1 bytes @ 0x4
   669                           
   670  004E                     SystemEnterSleep@93:	
   671                           ; 2 bytes @ 0x4
   672                           
   673  004E                     ___lmul@multiplicand:	
   674                           ; 2 bytes @ 0x4
   675                           
   676                           
   677                           ; 4 bytes @ 0x4
   678  004E                     	ds	2
   679  0050                     ?___ftdiv:	
   680  0050                     CheckOnceResult@70:	
   681                           ; 3 bytes @ 0x6
   682                           
   683  0050                     SystemEnterSleep@92:	
   684                           ; 1 bytes @ 0x6
   685                           
   686  0050                     ___ftdiv@f2:	
   687                           ; 2 bytes @ 0x6
   688                           
   689                           
   690                           ; 3 bytes @ 0x6
   691  0050                     	ds	1
   692  0051                     ADC_Sample@admin:	
   693  0051                     CheckOnceResult@72:	
   694                           ; 2 bytes @ 0x7
   695                           
   696                           
   697                           ; 2 bytes @ 0x7
   698  0051                     	ds	1
   699  0052                     SystemEnterSleep@91:	
   700                           
   701                           ; 1 bytes @ 0x8
   702  0052                     	ds	1
   703  0053                     CheckOnceResult@69:	
   704  0053                     ADC_Sample@admax:	
   705                           ; 1 bytes @ 0x9
   706                           
   707  0053                     ___ftdiv@f1:	
   708                           ; 2 bytes @ 0x9
   709                           
   710                           
   711                           ; 3 bytes @ 0x9
   712  0053                     	ds	1
   713  0054                     CheckOnceResult@71:	
   714                           
   715                           ; 2 bytes @ 0xA
   716  0054                     	ds	1
   717  0055                     ADC_Sample@ad_temp:	
   718                           
   719                           ; 2 bytes @ 0xB
   720  0055                     	ds	1
   721  0056                     ??___ftdiv:	
   722  0056                     CheckOnceResult@68:	
   723                           ; 1 bytes @ 0xC
   724                           
   725                           
   726                           ; 1 bytes @ 0xC
   727  0056                     	ds	1
   728  0057                     fanCtr@maxFanValue:	
   729                           
   730                           ; 1 bytes @ 0xD
   731  0057                     	ds	1
   732  0058                     fanCtr@fan_temp:	
   733                           
   734                           ; 4 bytes @ 0xE
   735  0058                     	ds	1
   736  0059                     ___ftdiv@cntr:	
   737                           
   738                           ; 1 bytes @ 0xF
   739  0059                     	ds	1
   740  005A                     ___ftdiv@f3:	
   741                           
   742                           ; 3 bytes @ 0x10
   743  005A                     	ds	3
   744  005D                     ___ftdiv@exp:	
   745                           
   746                           ; 1 bytes @ 0x13
   747  005D                     	ds	1
   748  005E                     ___ftdiv@sign:	
   749                           
   750                           ; 1 bytes @ 0x14
   751  005E                     	ds	1
   752  005F                     ?___fttol:	
   753  005F                     ___fttol@f1:	
   754                           ; 4 bytes @ 0x15
   755                           
   756                           
   757                           ; 3 bytes @ 0x15
   758  005F                     	ds	4
   759  0063                     ??___fttol:	
   760                           
   761                           ; 1 bytes @ 0x19
   762  0063                     	ds	3
   763  0066                     ___fttol@sign1:	
   764                           
   765                           ; 1 bytes @ 0x1C
   766  0066                     	ds	1
   767  0067                     ___fttol@lval:	
   768                           
   769                           ; 4 bytes @ 0x1D
   770  0067                     	ds	4
   771  006B                     ___fttol@exp1:	
   772                           
   773                           ; 1 bytes @ 0x21
   774  006B                     	ds	1
   775                           
   776                           	psect	maintext
   777  0E59                     __pmaintext:	
   778 ;;
   779 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   780 ;;
   781 ;; *************** function _main *****************
   782 ;; Defined at:
   783 ;;		line 828 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : B00/0
   794 ;;		On exit  : 200/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   797 ;;      Params:         0       0       0       0
   798 ;;      Locals:         0       0       0       0
   799 ;;      Temps:          0       0       0       0
   800 ;;      Totals:         0       0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels required when called:    6
   803 ;; This function calls:
   804 ;;		_CheckTouchKey
   805 ;;		_Init_System
   806 ;;		_KeyServer
   807 ;;		_Refurbish_Sfr
   808 ;;		_WorkSleep
   809 ;;		_chrgCtr
   810 ;;		_workCtr
   811 ;; This function is called by:
   812 ;;		Startup code after reset
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _main
   818  0E59                     _main:	
   819                           
   820                           ;main.c: 830: Init_System();
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   824  0E59  118A  2407  158A   	fcall	_Init_System
   825  0E5C  30C8               	movlw	200
   826                           
   827                           ;main.c: 831: firstLock = 1;
   828  0E5D  01CF               	clrf	_firstLock^(0+128)
   829  0E5E  0ACF               	incf	_firstLock^(0+128),f
   830                           
   831                           ;main.c: 832: firstTime = 200;
   832  0E5F  00D0               	movwf	_firstTime^(0+128)
   833  0E60                     l4817:	
   834                           
   835                           ;main.c: 834: {
   836                           ;main.c: 835: if(B_MainLoop)
   837  0E60  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   838  0E61  2E60               	goto	l4817
   839                           
   840                           ;main.c: 836: {
   841                           ;main.c: 837: B_MainLoop = 0;
   842  0E62  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   843  0E63  0064               	clrwdt	;# 
   844                           
   845                           ;main.c: 840: CheckTouchKey();
   846  0E64  118A  2453  158A   	fcall	_CheckTouchKey
   847                           
   848                           ;main.c: 841: chrgCtr();
   849  0E67  158A  25FC  158A   	fcall	_chrgCtr
   850                           
   851                           ;main.c: 842: Refurbish_Sfr();
   852  0E6A  118A  276B  158A   	fcall	_Refurbish_Sfr
   853                           
   854                           ;main.c: 843: KeyServer();
   855  0E6D  158A  2697  158A   	fcall	_KeyServer
   856                           
   857                           ;main.c: 844: workCtr();
   858  0E70  118A  2025  158A   	fcall	_workCtr
   859                           
   860                           ;main.c: 845: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && p
      +                          owerFlag == 0 && keyCount == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   861  0E73  1683               	bsf	3,5	;RP0=1, select bank1
   862  0E74  0850               	movf	_firstTime^(0+128),w
   863  0E75  1D03               	btfss	3,2
   864  0E76  2E60               	goto	l4817
   865  0E77  1283               	bcf	3,5	;RP0=0, select bank0
   866  0E78  0841               	movf	_chrgFlag,w
   867  0E79  1D03               	btfss	3,2
   868  0E7A  2E60               	goto	l4817
   869  0E7B  087B               	movf	_workStep,w
   870  0E7C  1D03               	btfss	3,2
   871  0E7D  2E60               	goto	l4817
   872  0E7E  0845               	movf	_wuhuaFlag,w
   873  0E7F  1D03               	btfss	3,2
   874  0E80  2E60               	goto	l4817
   875  0E81  083C               	movf	_powerFlag,w
   876  0E82  1D03               	btfss	3,2
   877  0E83  2E60               	goto	l4817
   878  0E84  0826               	movf	_keyCount,w
   879  0E85  0427               	iorwf	_keyCount+1,w
   880  0E86  1D03               	btfss	3,2
   881  0E87  2E60               	goto	l4817
   882  0E88  083D               	movf	_bujinFlag,w
   883  0E89  1D03               	btfss	3,2
   884  0E8A  2E60               	goto	l4817
   885  0E8B  082E               	movf	_shanshuoTime,w
   886  0E8C  042F               	iorwf	_shanshuoTime+1,w
   887  0E8D  1D03               	btfss	3,2
   888  0E8E  2E60               	goto	l4817
   889  0E8F  082C               	movf	_shanshuoTime2,w
   890  0E90  042D               	iorwf	_shanshuoTime2+1,w
   891  0E91  1D03               	btfss	3,2
   892  0E92  2E60               	goto	l4817
   893                           
   894                           ;main.c: 846: {
   895                           ;main.c: 847: WorkSleep();
   896  0E93  118A  2425  158A   	fcall	_WorkSleep
   897  0E96  2E60               	goto	l4817
   898  0E97                     __end_of_main:	
   899                           
   900                           	psect	text1
   901  0025                     __ptext1:	
   902 ;; *************** function _workCtr *****************
   903 ;; Defined at:
   904 ;;		line 771 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 200/0
   915 ;;		On exit  : 200/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   918 ;;      Params:         0       0       0       0
   919 ;;      Locals:         0       0       4       0
   920 ;;      Temps:          0       0       0       0
   921 ;;      Totals:         0       0       4       0
   922 ;;Total ram usage:        4 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    3
   925 ;; This function calls:
   926 ;;		_ADC_Sample
   927 ;;		___ftdiv
   928 ;;		___fttol
   929 ;;		___lwtoft
   930 ;;		_bujinCtr
   931 ;;		_fanCtr
   932 ;;		_keyLedCtr
   933 ;;		_wuhuaCtr
   934 ;; This function is called by:
   935 ;;		_main
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _workCtr
   941  0025                     _workCtr:	
   942                           
   943                           ;incstack = 0
   944                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   945  0025  301F               	movlw	31
   946                           
   947                           ;main.c: 773: test_adc = ADC_Sample(31, 0);
   948  0026  01F2               	clrf	ADC_Sample@adldo
   949  0027  21B7  118A         	fcall	_ADC_Sample
   950  0029  00B7               	movwf	_test_adc	;volatile
   951                           
   952                           ;main.c: 774: if (0xA5 == test_adc)
   953  002A  30A5               	movlw	165
   954  002B  0637               	xorwf	_test_adc,w	;volatile
   955  002C  1D03               	btfss	3,2
   956  002D  285F               	goto	l4741
   957                           
   958                           ;main.c: 775: {
   959                           ;main.c: 776: volatile unsigned long power_temp;
   960                           ;main.c: 778: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   961  002E  3096               	movlw	150
   962  002F  01D3               	clrf	___ftdiv@f1
   963  0030  00D4               	movwf	___ftdiv@f1+1
   964  0031  304A               	movlw	74
   965  0032  00D5               	movwf	___ftdiv@f1+2
   966  0033  0849               	movf	_adresult+1,w	;volatile
   967  0034  00CE               	movwf	___lwtoft@c+1
   968  0035  0848               	movf	_adresult,w	;volatile
   969  0036  00CD               	movwf	___lwtoft@c
   970  0037  2169  118A         	fcall	___lwtoft
   971  0039  084D               	movf	?___lwtoft,w
   972  003A  00D0               	movwf	___ftdiv@f2
   973  003B  084E               	movf	?___lwtoft+1,w
   974  003C  00D1               	movwf	___ftdiv@f2+1
   975  003D  084F               	movf	?___lwtoft+2,w
   976  003E  00D2               	movwf	___ftdiv@f2+2
   977  003F  20AE  118A         	fcall	___ftdiv
   978  0041  0850               	movf	?___ftdiv,w
   979  0042  00DF               	movwf	___fttol@f1
   980  0043  0851               	movf	?___ftdiv+1,w
   981  0044  00E0               	movwf	___fttol@f1+1
   982  0045  0852               	movf	?___ftdiv+2,w
   983  0046  00E1               	movwf	___fttol@f1+2
   984  0047  2110  118A         	fcall	___fttol
   985  0049  0862               	movf	?___fttol+3,w
   986  004A  1683               	bsf	3,5	;RP0=1, select bank1
   987  004B  00CE               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   988  004C  1283               	bcf	3,5	;RP0=0, select bank0
   989  004D  0861               	movf	?___fttol+2,w
   990  004E  1683               	bsf	3,5	;RP0=1, select bank1
   991  004F  00CD               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   992  0050  1283               	bcf	3,5	;RP0=0, select bank0
   993  0051  0860               	movf	?___fttol+1,w
   994  0052  1683               	bsf	3,5	;RP0=1, select bank1
   995  0053  00CC               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   996  0054  1283               	bcf	3,5	;RP0=0, select bank0
   997  0055  085F               	movf	?___fttol,w
   998  0056  1683               	bsf	3,5	;RP0=1, select bank1
   999  0057  00CB               	movwf	workCtr@power_temp^(0+128)	;volatile
  1000                           
  1001                           ;main.c: 779: power_ad = (unsigned int)(power_temp);
  1002  0058  084C               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1003  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1004  005A  00A5               	movwf	_power_ad+1	;volatile
  1005  005B  1683               	bsf	3,5	;RP0=1, select bank1
  1006  005C  084B               	movf	workCtr@power_temp^(0+128),w	;volatile
  1007  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1008  005E  00A4               	movwf	_power_ad	;volatile
  1009  005F                     l4741:	
  1010                           
  1011                           ;main.c: 780: }
  1012                           ;main.c: 781: if(workStep == 2 && power_ad < 3300)
  1013  005F  3002               	movlw	2
  1014  0060  067B               	xorwf	_workStep,w
  1015  0061  1D03               	btfss	3,2
  1016  0062  287A               	goto	l4751
  1017  0063  300C               	movlw	12
  1018  0064  0225               	subwf	_power_ad+1,w	;volatile
  1019  0065  30E4               	movlw	228
  1020  0066  1903               	skipnz
  1021  0067  0224               	subwf	_power_ad,w	;volatile
  1022  0068  1803               	skipnc
  1023  0069  287A               	goto	l4751
  1024                           
  1025                           ;main.c: 782: {
  1026                           ;main.c: 783: if(++lowFanTime > 2000)
  1027  006A  1683               	bsf	3,5	;RP0=1, select bank1
  1028  006B  0AC5               	incf	_lowFanTime^(0+128),f
  1029  006C  1903               	skipnz
  1030  006D  0AC6               	incf	(_lowFanTime+1)^(0+128),f
  1031  006E  3007               	movlw	7
  1032  006F  0246               	subwf	(_lowFanTime+1)^(0+128),w
  1033  0070  30D1               	movlw	209
  1034  0071  1903               	skipnz
  1035  0072  0245               	subwf	_lowFanTime^(0+128),w
  1036  0073  1C03               	skipc
  1037  0074  287D               	goto	l4753
  1038                           
  1039                           ;main.c: 784: {
  1040                           ;main.c: 785: lowFanTime = 0;
  1041  0075  01C5               	clrf	_lowFanTime^(0+128)
  1042  0076  01C6               	clrf	(_lowFanTime+1)^(0+128)
  1043                           
  1044                           ;main.c: 786: workStep = 1;
  1045  0077  01FB               	clrf	_workStep
  1046  0078  0AFB               	incf	_workStep,f
  1047  0079  287D               	goto	l4753
  1048  007A                     l4751:	
  1049                           
  1050                           ;main.c: 789: else
  1051                           ;main.c: 790: {
  1052                           ;main.c: 791: lowFanTime = 0;
  1053  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1054  007B  01C5               	clrf	_lowFanTime^(0+128)
  1055  007C  01C6               	clrf	(_lowFanTime+1)^(0+128)
  1056  007D                     l4753:	
  1057                           
  1058                           ;main.c: 792: }
  1059                           ;main.c: 793: if(power_ad < 2900)
  1060  007D  300B               	movlw	11
  1061  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1062  007F  0225               	subwf	_power_ad+1,w	;volatile
  1063  0080  3054               	movlw	84
  1064  0081  1903               	skipnz
  1065  0082  0224               	subwf	_power_ad,w	;volatile
  1066  0083  1803               	skipnc
  1067  0084  2899               	goto	l4761
  1068                           
  1069                           ;main.c: 794: {
  1070                           ;main.c: 795: if(++lowBatTime > 1000)
  1071  0085  1683               	bsf	3,5	;RP0=1, select bank1
  1072  0086  0AC7               	incf	_lowBatTime^(0+128),f
  1073  0087  1903               	skipnz
  1074  0088  0AC8               	incf	(_lowBatTime+1)^(0+128),f
  1075  0089  3003               	movlw	3
  1076  008A  0248               	subwf	(_lowBatTime+1)^(0+128),w
  1077  008B  30E9               	movlw	233
  1078  008C  1903               	skipnz
  1079  008D  0247               	subwf	_lowBatTime^(0+128),w
  1080  008E  1C03               	skipc
  1081  008F  289C               	goto	l4763
  1082                           
  1083                           ;main.c: 796: {
  1084                           ;main.c: 797: lowBatTime = 0;
  1085  0090  01C7               	clrf	_lowBatTime^(0+128)
  1086  0091  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1087                           
  1088                           ;main.c: 798: lowBatLock = 1;
  1089  0092  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0093  01BE               	clrf	_lowBatLock
  1091  0094  0ABE               	incf	_lowBatLock,f
  1092                           
  1093                           ;main.c: 799: workStep = 0;
  1094  0095  01FB               	clrf	_workStep
  1095                           
  1096                           ;main.c: 800: wuhuaFlag = 0;
  1097  0096  01C5               	clrf	_wuhuaFlag
  1098                           
  1099                           ;main.c: 801: bujinFlag = 0;
  1100  0097  01BD               	clrf	_bujinFlag
  1101  0098  289C               	goto	l4763
  1102  0099                     l4761:	
  1103                           
  1104                           ;main.c: 804: else
  1105                           ;main.c: 805: {
  1106                           ;main.c: 806: lowBatTime = 0;
  1107  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1108  009A  01C7               	clrf	_lowBatTime^(0+128)
  1109  009B  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1110  009C                     l4763:	
  1111                           
  1112                           ;main.c: 807: }
  1113                           ;main.c: 808: if(firstTime > 0)
  1114  009C  1683               	bsf	3,5	;RP0=1, select bank1
  1115  009D  0850               	movf	_firstTime^(0+128),w
  1116  009E  1903               	btfsc	3,2
  1117  009F  28A6               	goto	l4771
  1118                           
  1119                           ;main.c: 809: {
  1120                           ;main.c: 810: firstTime--;
  1121  00A0  03D0               	decf	_firstTime^(0+128),f
  1122                           
  1123                           ;main.c: 811: PORTB = 0x00;
  1124  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1125  00A2  0186               	clrf	6	;volatile
  1126                           
  1127                           ;main.c: 812: PORTA = 0x00;
  1128  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1129  00A4  0186               	clrf	6	;volatile
  1130                           
  1131                           ;main.c: 813: }
  1132  00A5  0008               	return
  1133  00A6                     l4771:	
  1134                           
  1135                           ;main.c: 814: else
  1136                           ;main.c: 815: {
  1137                           ;main.c: 816: keyLedCtr();
  1138  00A6  2330  118A         	fcall	_keyLedCtr
  1139                           
  1140                           ;main.c: 817: fanCtr();
  1141  00A8  2288               	fcall	_fanCtr
  1142                           
  1143                           ;main.c: 818: wuhuaCtr();
  1144  00A9  158A  261C  118A   	fcall	_wuhuaCtr
  1145                           
  1146                           ;main.c: 819: bujinCtr();
  1147  00AC  158A  2F3D         	ljmp	l4465
  1148  00AE                     __end_of_workCtr:	
  1149  00AE                     __ptext15:	
  1150 ;; *************** function ___ftdiv *****************
  1151 ;; Defined at:
  1152 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  f2              3    6[BANK0 ] float 
  1155 ;;  f1              3    9[BANK0 ] float 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  f3              3   16[BANK0 ] float 
  1158 ;;  sign            1   20[BANK0 ] unsigned char 
  1159 ;;  exp             1   19[BANK0 ] unsigned char 
  1160 ;;  cntr            1   15[BANK0 ] unsigned char 
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  3    6[BANK0 ] float 
  1163 ;; Registers used:
  1164 ;;		wreg, status,2, status,0, pclath, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 300/0
  1167 ;;		On exit  : 300/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1170 ;;      Params:         0       6       0       0
  1171 ;;      Locals:         0       6       0       0
  1172 ;;      Temps:          0       3       0       0
  1173 ;;      Totals:         0      15       0       0
  1174 ;;Total ram usage:       15 bytes
  1175 ;; Hardware stack levels used:    1
  1176 ;; Hardware stack levels required when called:    2
  1177 ;; This function calls:
  1178 ;;		___ftpack
  1179 ;; This function is called by:
  1180 ;;		_workCtr
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function ___ftdiv
  1186  00AE                     ___ftdiv:	
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1190  00AE  0853               	movf	___ftdiv@f1,w
  1191  00AF  00D6               	movwf	??___ftdiv
  1192  00B0  0854               	movf	___ftdiv@f1+1,w
  1193  00B1  00D7               	movwf	??___ftdiv+1
  1194  00B2  0855               	movf	___ftdiv@f1+2,w
  1195  00B3  00D8               	movwf	??___ftdiv+2
  1196  00B4  1003               	clrc
  1197  00B5  0D57               	rlf	??___ftdiv+1,w
  1198  00B6  0D58               	rlf	??___ftdiv+2,w
  1199  00B7  00DD               	movwf	___ftdiv@exp
  1200  00B8  085D               	movf	___ftdiv@exp,w
  1201  00B9  1D03               	btfss	3,2
  1202  00BA  28BC               	goto	l4609
  1203  00BB  2C03               	ljmp	PL46	;call to abstracted procedure
  1204  00BC                     l4609:	
  1205  00BC  0850               	movf	___ftdiv@f2,w
  1206  00BD  00D6               	movwf	??___ftdiv
  1207  00BE  0851               	movf	___ftdiv@f2+1,w
  1208  00BF  00D7               	movwf	??___ftdiv+1
  1209  00C0  0852               	movf	___ftdiv@f2+2,w
  1210  00C1  00D8               	movwf	??___ftdiv+2
  1211  00C2  1003               	clrc
  1212  00C3  0D57               	rlf	??___ftdiv+1,w
  1213  00C4  0D58               	rlf	??___ftdiv+2,w
  1214  00C5  00DE               	movwf	___ftdiv@sign
  1215  00C6  085E               	movf	___ftdiv@sign,w
  1216  00C7  1D03               	btfss	3,2
  1217  00C8  28CA               	goto	l1587
  1218  00C9  2C03               	ljmp	PL46	;call to abstracted procedure
  1219  00CA                     l1587:	
  1220  00CA  3089               	movlw	137
  1221  00CB  01DA               	clrf	___ftdiv@f3
  1222  00CC  01DB               	clrf	___ftdiv@f3+1
  1223  00CD  01DC               	clrf	___ftdiv@f3+2
  1224  00CE  075E               	addwf	___ftdiv@sign,w
  1225  00CF  00D6               	movwf	??___ftdiv
  1226  00D0  02DD               	subwf	___ftdiv@exp,f
  1227  00D1  0855               	movf	___ftdiv@f1+2,w
  1228  00D2  00DE               	movwf	___ftdiv@sign
  1229  00D3  0852               	movf	___ftdiv@f2+2,w
  1230  00D4  06DE               	xorwf	___ftdiv@sign,f
  1231  00D5  3080               	movlw	128
  1232  00D6  05DE               	andwf	___ftdiv@sign,f
  1233  00D7  3018               	movlw	24
  1234  00D8  17D4               	bsf	___ftdiv@f1+1,7
  1235  00D9  01D5               	clrf	___ftdiv@f1+2
  1236  00DA  17D1               	bsf	___ftdiv@f2+1,7
  1237  00DB  01D2               	clrf	___ftdiv@f2+2
  1238  00DC  00D9               	movwf	___ftdiv@cntr
  1239  00DD                     l4631:	
  1240  00DD  1003               	clrc
  1241  00DE  0DDA               	rlf	___ftdiv@f3,f
  1242  00DF  0DDB               	rlf	___ftdiv@f3+1,f
  1243  00E0  0DDC               	rlf	___ftdiv@f3+2,f
  1244  00E1  0852               	movf	___ftdiv@f2+2,w
  1245  00E2  0255               	subwf	___ftdiv@f1+2,w
  1246  00E3  1D03               	skipz
  1247  00E4  28EB               	goto	u4855
  1248  00E5  0851               	movf	___ftdiv@f2+1,w
  1249  00E6  0254               	subwf	___ftdiv@f1+1,w
  1250  00E7  1D03               	skipz
  1251  00E8  28EB               	goto	u4855
  1252  00E9  0850               	movf	___ftdiv@f2,w
  1253  00EA  0253               	subwf	___ftdiv@f1,w
  1254  00EB                     u4855:	
  1255  00EB  1C03               	skipc
  1256  00EC  28F9               	goto	L6
  1257  00ED  0850               	movf	___ftdiv@f2,w
  1258  00EE  02D3               	subwf	___ftdiv@f1,f
  1259  00EF  0851               	movf	___ftdiv@f2+1,w
  1260  00F0  1C03               	skipc
  1261  00F1  0F51               	incfsz	___ftdiv@f2+1,w
  1262  00F2  02D4               	subwf	___ftdiv@f1+1,f
  1263  00F3  0852               	movf	___ftdiv@f2+2,w
  1264  00F4  1C03               	skipc
  1265  00F5  0A52               	incf	___ftdiv@f2+2,w
  1266  00F6  02D5               	subwf	___ftdiv@f1+2,f
  1267  00F7  145A               	bsf	___ftdiv@f3,0
  1268  00F8  1003               	clrc
  1269  00F9                     L6:	
  1270  00F9  0DD3               	rlf	___ftdiv@f1,f
  1271  00FA  0DD4               	rlf	___ftdiv@f1+1,f
  1272  00FB  0DD5               	rlf	___ftdiv@f1+2,f
  1273  00FC  0BD9               	decfsz	___ftdiv@cntr,f
  1274  00FD  28DD               	goto	l4631
  1275  00FE  085A               	movf	___ftdiv@f3,w
  1276  00FF  00F2               	movwf	___ftpack@arg
  1277  0100  085B               	movf	___ftdiv@f3+1,w
  1278  0101  00F3               	movwf	___ftpack@arg+1
  1279  0102  085C               	movf	___ftdiv@f3+2,w
  1280  0103  00F4               	movwf	___ftpack@arg+2
  1281  0104  085D               	movf	___ftdiv@exp,w
  1282  0105  00F5               	movwf	___ftpack@exp
  1283  0106  085E               	movf	___ftdiv@sign,w
  1284  0107  00F6               	movwf	___ftpack@sign
  1285  0108  2179               	fcall	___ftpack
  1286  0109  0872               	movf	?___ftpack,w
  1287  010A  00D0               	movwf	?___ftdiv
  1288  010B  0873               	movf	?___ftpack+1,w
  1289  010C  00D1               	movwf	?___ftdiv+1
  1290  010D  0874               	movf	?___ftpack+2,w
  1291  010E  00D2               	movwf	?___ftdiv+2
  1292  010F  0008               	return
  1293  0110                     __end_of___ftdiv:	
  1294  0110                     __ptext14:	
  1295 ;; *************** function ___fttol *****************
  1296 ;; Defined at:
  1297 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  f1              3   21[BANK0 ] float 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  lval            4   29[BANK0 ] unsigned long 
  1302 ;;  exp1            1   33[BANK0 ] unsigned char 
  1303 ;;  sign1           1   28[BANK0 ] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  4   21[BANK0 ] long 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 300/0
  1310 ;;		On exit  : 300/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1313 ;;      Params:         0       4       0       0
  1314 ;;      Locals:         0       6       0       0
  1315 ;;      Temps:          0       3       0       0
  1316 ;;      Totals:         0      13       0       0
  1317 ;;Total ram usage:       13 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    1
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_workCtr
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function ___fttol
  1329  0110                     ___fttol:	
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1333  0110  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1334  0112  1003               	clrc
  1335  0113  0D64               	rlf	??___fttol+1,w
  1336  0114  0D65               	rlf	??___fttol+2,w
  1337  0115  00EB               	movwf	___fttol@exp1
  1338  0116  086B               	movf	___fttol@exp1,w
  1339  0117  1D03               	btfss	3,2
  1340  0118  291E               	goto	l4649
  1341  0119                     l4647:	
  1342  0119  01DF               	clrf	?___fttol
  1343  011A  01E0               	clrf	?___fttol+1
  1344  011B  01E1               	clrf	?___fttol+2
  1345  011C  01E2               	clrf	?___fttol+3
  1346  011D  0008               	return
  1347  011E                     l4649:	
  1348  011E  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1349  0120  3017               	movlw	23
  1350  0121                     u4885:	
  1351  0121  1003               	clrc
  1352  0122  0CE5               	rrf	??___fttol+2,f
  1353  0123  0CE4               	rrf	??___fttol+1,f
  1354  0124  0CE3               	rrf	??___fttol,f
  1355  0125  3EFF               	addlw	-1
  1356  0126  1D03               	skipz
  1357  0127  2921               	goto	u4885
  1358  0128  0863               	movf	??___fttol,w
  1359  0129  00E6               	movwf	___fttol@sign1
  1360  012A  17E0               	bsf	___fttol@f1+1,7
  1361  012B  01E1               	clrf	___fttol@f1+2
  1362  012C  085F               	movf	___fttol@f1,w
  1363  012D  00E7               	movwf	___fttol@lval
  1364  012E  0860               	movf	___fttol@f1+1,w
  1365  012F  00E8               	movwf	___fttol@lval+1
  1366  0130  0861               	movf	___fttol@f1+2,w
  1367  0131  00E9               	movwf	___fttol@lval+2
  1368  0132  308E               	movlw	142
  1369  0133  01EA               	clrf	___fttol@lval+3
  1370  0134  02EB               	subwf	___fttol@exp1,f
  1371  0135  1FEB               	btfss	___fttol@exp1,7
  1372  0136  2944               	goto	l4669
  1373  0137  086B               	movf	___fttol@exp1,w
  1374  0138  3A80               	xorlw	128
  1375  0139  3E8F               	addlw	143
  1376  013A  1C03               	btfss	3,0
  1377  013B  2919               	goto	l4647
  1378  013C                     l4665:	
  1379  013C  1003               	clrc
  1380  013D  0CEA               	rrf	___fttol@lval+3,f
  1381  013E  0CE9               	rrf	___fttol@lval+2,f
  1382  013F  0CE8               	rrf	___fttol@lval+1,f
  1383  0140  0CE7               	rrf	___fttol@lval,f
  1384  0141  0FEB               	incfsz	___fttol@exp1,f
  1385  0142  293C               	goto	l4665
  1386  0143  2952               	goto	l4677
  1387  0144                     l4669:	
  1388  0144  3018               	movlw	24
  1389  0145  026B               	subwf	___fttol@exp1,w
  1390  0146  1803               	btfsc	3,0
  1391  0147  2919               	goto	l4647
  1392  0148                     l4675:	
  1393  0148  086B               	movf	___fttol@exp1,w
  1394  0149  1903               	btfsc	3,2
  1395  014A  2952               	goto	l4677
  1396  014B  1003               	clrc
  1397  014C  0DE7               	rlf	___fttol@lval,f
  1398  014D  0DE8               	rlf	___fttol@lval+1,f
  1399  014E  0DE9               	rlf	___fttol@lval+2,f
  1400  014F  0DEA               	rlf	___fttol@lval+3,f
  1401  0150  03EB               	decf	___fttol@exp1,f
  1402  0151  2948               	goto	l4675
  1403  0152                     l4677:	
  1404  0152  0866               	movf	___fttol@sign1,w
  1405  0153  1903               	btfsc	3,2
  1406  0154  2960               	goto	l4681
  1407  0155  09E7               	comf	___fttol@lval,f
  1408  0156  09E8               	comf	___fttol@lval+1,f
  1409  0157  09E9               	comf	___fttol@lval+2,f
  1410  0158  09EA               	comf	___fttol@lval+3,f
  1411  0159  0AE7               	incf	___fttol@lval,f
  1412  015A  1903               	skipnz
  1413  015B  0AE8               	incf	___fttol@lval+1,f
  1414  015C  1903               	skipnz
  1415  015D  0AE9               	incf	___fttol@lval+2,f
  1416  015E  1903               	skipnz
  1417  015F  0AEA               	incf	___fttol@lval+3,f
  1418  0160                     l4681:	
  1419  0160  086A               	movf	___fttol@lval+3,w
  1420  0161  00E2               	movwf	?___fttol+3
  1421  0162  0869               	movf	___fttol@lval+2,w
  1422  0163  00E1               	movwf	?___fttol+2
  1423  0164  0868               	movf	___fttol@lval+1,w
  1424  0165  00E0               	movwf	?___fttol+1
  1425  0166  0867               	movf	___fttol@lval,w
  1426  0167  00DF               	movwf	?___fttol
  1427  0168  0008               	return
  1428  0169                     __end_of___fttol:	
  1429  0169                     __ptext13:	
  1430 ;; *************** function ___lwtoft *****************
  1431 ;; Defined at:
  1432 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  c               2    3[BANK0 ] unsigned int 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  3    3[BANK0 ] float 
  1439 ;; Registers used:
  1440 ;;		wreg, status,2, status,0, pclath, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 300/0
  1443 ;;		On exit  : 300/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1446 ;;      Params:         0       3       0       0
  1447 ;;      Locals:         0       0       0       0
  1448 ;;      Temps:          0       0       0       0
  1449 ;;      Totals:         0       3       0       0
  1450 ;;Total ram usage:        3 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    2
  1453 ;; This function calls:
  1454 ;;		___ftpack
  1455 ;; This function is called by:
  1456 ;;		_workCtr
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           
  1461                           ;psect for function ___lwtoft
  1462  0169                     ___lwtoft:	
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1466  0169  084D               	movf	___lwtoft@c,w
  1467  016A  00F2               	movwf	___ftpack@arg
  1468  016B  084E               	movf	___lwtoft@c+1,w
  1469  016C  00F3               	movwf	___ftpack@arg+1
  1470  016D  308E               	movlw	142
  1471  016E  01F4               	clrf	___ftpack@arg+2
  1472  016F  00F5               	movwf	___ftpack@exp
  1473  0170  01F6               	clrf	___ftpack@sign
  1474  0171  2179               	fcall	___ftpack
  1475  0172  0872               	movf	?___ftpack,w
  1476  0173  00CD               	movwf	?___lwtoft
  1477  0174  0873               	movf	?___ftpack+1,w
  1478  0175  00CE               	movwf	?___lwtoft+1
  1479  0176  0874               	movf	?___ftpack+2,w
  1480  0177  00CF               	movwf	?___lwtoft+2
  1481  0178  0008               	return
  1482  0179                     __end_of___lwtoft:	
  1483  0179                     __ptext16:	
  1484 ;; *************** function ___ftpack *****************
  1485 ;; Defined at:
  1486 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  arg             3    2[COMMON] unsigned um
  1489 ;;  exp             1    5[COMMON] unsigned char 
  1490 ;;  sign            1    6[COMMON] unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;		None
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  3    2[COMMON] float 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0
  1497 ;; Tracked objects:
  1498 ;;		On entry : 300/0
  1499 ;;		On exit  : 300/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1502 ;;      Params:         5       0       0       0
  1503 ;;      Locals:         0       0       0       0
  1504 ;;      Temps:          0       3       0       0
  1505 ;;      Totals:         5       3       0       0
  1506 ;;Total ram usage:        8 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		___ftdiv
  1513 ;;		___lwtoft
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function ___ftpack
  1519  0179                     ___ftpack:	
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1523  0179  0875               	movf	___ftpack@exp,w
  1524  017A  1903               	btfsc	3,2
  1525  017B  2981               	goto	l1533
  1526  017C  0874               	movf	___ftpack@arg+2,w
  1527  017D  0473               	iorwf	___ftpack@arg+1,w
  1528  017E  0472               	iorwf	___ftpack@arg,w
  1529  017F  1D03               	skipz
  1530  0180  2988               	goto	l4217
  1531  0181                     l1533:	
  1532  0181  01F2               	clrf	?___ftpack
  1533  0182  01F3               	clrf	?___ftpack+1
  1534  0183  01F4               	clrf	?___ftpack+2
  1535  0184  0008               	return
  1536  0185                     l4215:	
  1537  0185  0AF5               	incf	___ftpack@exp,f
  1538  0186  23F9  118A         	fcall	PL40	;call to abstracted procedure
  1539  0188                     l4217:	
  1540  0188  30FE               	movlw	254
  1541  0189  0574               	andwf	___ftpack@arg+2,w
  1542  018A  1903               	btfsc	3,2
  1543  018B  2995               	goto	l4221
  1544  018C  2985               	goto	l4215
  1545  018D                     l4219:	
  1546  018D  0AF5               	incf	___ftpack@exp,f
  1547  018E  0AF2               	incf	___ftpack@arg,f
  1548  018F  1903               	skipnz
  1549  0190  0AF3               	incf	___ftpack@arg+1,f
  1550  0191  1903               	skipnz
  1551  0192  0AF4               	incf	___ftpack@arg+2,f
  1552  0193  23F9  118A         	fcall	PL40	;call to abstracted procedure
  1553  0195                     l4221:	
  1554  0195  30FF               	movlw	255
  1555  0196  0574               	andwf	___ftpack@arg+2,w
  1556  0197  1903               	btfsc	3,2
  1557  0198  29A3               	goto	l4225
  1558  0199  298D               	goto	l4219
  1559  019A                     l4227:	
  1560  019A  3002               	movlw	2
  1561  019B  0275               	subwf	___ftpack@exp,w
  1562  019C  1C03               	btfss	3,0
  1563  019D  29A5               	goto	l1545
  1564  019E  03F5               	decf	___ftpack@exp,f
  1565  019F  1003               	clrc
  1566  01A0  0DF2               	rlf	___ftpack@arg,f
  1567  01A1  0DF3               	rlf	___ftpack@arg+1,f
  1568  01A2  0DF4               	rlf	___ftpack@arg+2,f
  1569  01A3                     l4225:	
  1570  01A3  1FF3               	btfss	___ftpack@arg+1,7
  1571  01A4  299A               	goto	l4227
  1572  01A5                     l1545:	
  1573  01A5  1C75               	btfss	___ftpack@exp,0
  1574  01A6  13F3               	bcf	___ftpack@arg+1,7
  1575  01A7  1003               	clrc
  1576  01A8  0CF5               	rrf	___ftpack@exp,f
  1577  01A9  0875               	movf	___ftpack@exp,w
  1578  01AA  00CC               	movwf	??___ftpack+2
  1579  01AB  01CB               	clrf	??___ftpack+1
  1580  01AC  01CA               	clrf	??___ftpack
  1581  01AD  084A               	movf	??___ftpack,w
  1582  01AE  04F2               	iorwf	___ftpack@arg,f
  1583  01AF  084B               	movf	??___ftpack+1,w
  1584  01B0  04F3               	iorwf	___ftpack@arg+1,f
  1585  01B1  084C               	movf	??___ftpack+2,w
  1586  01B2  04F4               	iorwf	___ftpack@arg+2,f
  1587  01B3  0876               	movf	___ftpack@sign,w
  1588  01B4  1D03               	btfss	3,2
  1589  01B5  17F4               	bsf	___ftpack@arg+2,7
  1590  01B6  0008               	return
  1591  01B7                     __end_of___ftpack:	
  1592  01B7                     __ptext11:	
  1593 ;; *************** function _ADC_Sample *****************
  1594 ;; Defined at:
  1595 ;;		line 325 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  adch            1    wreg     unsigned char 
  1598 ;;  adldo           1    2[COMMON] unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  adch            1    1[BANK0 ] unsigned char 
  1601 ;;  j               1    0[BANK0 ] unsigned char 
  1602 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1603 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1604 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1605 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1606 ;;  i               1    2[BANK0 ] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      unsigned char 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 200/0
  1613 ;;		On exit  : 300/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1616 ;;      Params:         1       0       0       0
  1617 ;;      Locals:         0      13       0       0
  1618 ;;      Temps:          4       0       0       0
  1619 ;;      Totals:         5      13       0       0
  1620 ;;Total ram usage:       18 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_fanCtr
  1627 ;;		_workCtr
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           
  1632                           ;psect for function _ADC_Sample
  1633  01B7                     _ADC_Sample:	
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1637                           ;ADC_Sample@adch stored from wreg
  1638  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1639  01B8  00CB               	movwf	ADC_Sample@adch
  1640                           
  1641                           ;main.c: 327: volatile unsigned long adsum = 0;
  1642                           
  1643                           ;main.c: 328: volatile unsigned int admin = 0, admax = 0;
  1644  01B9  23E9  118A         	fcall	PL16	;call to abstracted procedure
  1645                           
  1646                           ;main.c: 329: volatile unsigned int ad_temp = 0;
  1647  01BB  01D5               	clrf	ADC_Sample@ad_temp	;volatile
  1648  01BC  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1649                           
  1650                           ;main.c: 331: if ((!LDO_EN) && (adldo & 0x04) )
  1651  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1652  01BE  1D16               	btfss	22,2	;volatile
  1653  01BF  1D72               	btfss	ADC_Sample@adldo,2
  1654  01C0  29C9               	goto	l4103
  1655                           
  1656                           ;main.c: 332: {
  1657                           ;main.c: 334: ADCON1 = adldo;
  1658  01C1  0872               	movf	ADC_Sample@adldo,w
  1659  01C2  0096               	movwf	22	;volatile
  1660                           
  1661                           ;main.c: 335: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1662  01C3  3042               	movlw	66
  1663  01C4  00F3               	movwf	??_ADC_Sample
  1664  01C5                     u5207:	
  1665  01C5  0BF3               	decfsz	??_ADC_Sample,f
  1666  01C6  29C5               	goto	u5207
  1667  01C7  0000               	nop
  1668                           
  1669                           ;main.c: 336: }
  1670  01C8  29CB               	goto	l4105
  1671  01C9                     l4103:	
  1672                           
  1673                           ;main.c: 337: else
  1674                           ;main.c: 338: ADCON1 = adldo;
  1675  01C9  0872               	movf	ADC_Sample@adldo,w
  1676  01CA  0096               	movwf	22	;volatile
  1677  01CB                     l4105:	
  1678                           
  1679                           ;main.c: 340: if(adch & 0x10)
  1680  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1681  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1682  01CD  1E4B               	btfss	ADC_Sample@adch,4
  1683  01CE  29D4               	goto	l4113
  1684                           
  1685                           ;main.c: 341: {
  1686                           ;main.c: 342: CHS4 = 1;
  1687  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  1688  01D0  1716               	bsf	22,6	;volatile
  1689                           
  1690                           ;main.c: 343: adch &= 0x0f;
  1691  01D1  300F               	movlw	15
  1692  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1693  01D3  05CB               	andwf	ADC_Sample@adch,f
  1694  01D4                     l4113:	
  1695                           
  1696                           ;main.c: 346: for (i = 0; i < 10; i++)
  1697  01D4  01CC               	clrf	ADC_Sample@i
  1698  01D5                     l4119:	
  1699                           
  1700                           ;main.c: 347: {
  1701                           ;main.c: 348: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1702  01D5  084B               	movf	ADC_Sample@adch,w
  1703  01D6  00F3               	movwf	??_ADC_Sample
  1704  01D7  3001               	movlw	1
  1705  01D8  1003               	clrc
  1706  01D9                     L3:	
  1707  01D9  0DF3               	rlf	??_ADC_Sample,f
  1708  01DA  3EFF               	addlw	-1
  1709  01DB  1003               	clrc
  1710  01DC  1D03               	skipz
  1711  01DD  29D9               	goto	L3
  1712  01DE  0D73               	rlf	??_ADC_Sample,w
  1713  01DF  3841               	iorlw	65
  1714  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1715  01E1  0095               	movwf	21	;volatile
  1716  01E2  0000               	nop	;# 
  1717  01E3  0000               	nop	;# 
  1718  01E4  0000               	nop	;# 
  1719  01E5  0000               	nop	;# 
  1720                           
  1721                           ;main.c: 353: GODONE = 1;
  1722  01E6  1683               	bsf	3,5	;RP0=1, select bank1
  1723  01E7  1303               	bcf	3,6	;RP1=0, select bank1
  1724  01E8  1495               	bsf	21,1	;volatile
  1725                           
  1726                           ;main.c: 355: unsigned char j = 0;
  1727  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1728  01EA  01CA               	clrf	ADC_Sample@j
  1729  01EB                     l999:	
  1730                           ;main.c: 356: while (GODONE)
  1731                           
  1732  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1733  01EC  1C95               	btfss	21,1	;volatile
  1734  01ED  29F5               	goto	l4129
  1735                           
  1736                           ;main.c: 357: {
  1737                           ;main.c: 358: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1738  01EE  29EF               	nop2	;2 cycle nop
  1739  01EF  29F0               	nop2	;2 cycle nop
  1740                           
  1741                           ;main.c: 360: if (0 == (--j))
  1742  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1743  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1744  01F2  0BCA               	decfsz	ADC_Sample@j,f
  1745  01F3  29EB               	goto	l999
  1746                           
  1747                           ;main.c: 361: return 0;
  1748  01F4  3400               	retlw	0
  1749  01F5                     l4129:	
  1750                           
  1751                           ;main.c: 362: }
  1752                           ;main.c: 364: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1753  01F5  0819               	movf	25,w	;volatile
  1754  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1755  01F7  00D5               	movwf	ADC_Sample@ad_temp	;volatile
  1756  01F8  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1757  01F9  0ED5               	swapf	ADC_Sample@ad_temp,f	;volatile
  1758  01FA  0ED6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1759  01FB  30F0               	movlw	240
  1760  01FC  05D6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1761  01FD  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1762  01FE  390F               	andlw	15
  1763  01FF  04D6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1764  0200  30F0               	movlw	240
  1765  0201  05D5               	andwf	ADC_Sample@ad_temp,f	;volatile
  1766  0202  1683               	bsf	3,5	;RP0=1, select bank1
  1767  0203  0E18               	swapf	24,w	;volatile
  1768  0204  390F               	andlw	15
  1769  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1770  0206  07D5               	addwf	ADC_Sample@ad_temp,f	;volatile
  1771  0207  1803               	skipnc
  1772  0208  0AD6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1773                           
  1774                           ;main.c: 366: if (0 == admax)
  1775  0209  0853               	movf	ADC_Sample@admax,w	;volatile
  1776  020A  0454               	iorwf	ADC_Sample@admax+1,w	;volatile
  1777  020B  1D03               	btfss	3,2
  1778  020C  2A10               	goto	l4137
  1779                           
  1780                           ;main.c: 367: {
  1781                           ;main.c: 368: admax = ad_temp;
  1782  020D  23FE  118A         	fcall	PL44	;call to abstracted procedure
  1783  020F  2A23               	goto	l4143
  1784  0210                     l4137:	
  1785                           ;main.c: 370: }
  1786                           
  1787                           ;main.c: 369: admin = ad_temp;
  1788                           
  1789                           
  1790                           ;main.c: 371: else if (ad_temp > admax)
  1791  0210  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1792  0211  0254               	subwf	ADC_Sample@admax+1,w	;volatile
  1793  0212  1D03               	skipz
  1794  0213  2A16               	goto	u3945
  1795  0214  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1796  0215  0253               	subwf	ADC_Sample@admax,w	;volatile
  1797  0216                     u3945:	
  1798  0216  1803               	skipnc
  1799  0217  2A1B               	goto	l4141
  1800                           
  1801                           ;main.c: 372: admax = ad_temp;
  1802  0218  23FE  118A         	fcall	PL44	;call to abstracted procedure
  1803  021A  2A27               	goto	l1005
  1804  021B                     l4141:	
  1805                           
  1806                           ;main.c: 373: else if (ad_temp < admin)
  1807  021B  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1808  021C  0256               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1809  021D  1D03               	skipz
  1810  021E  2A21               	goto	u3955
  1811  021F  0851               	movf	ADC_Sample@admin,w	;volatile
  1812  0220  0255               	subwf	ADC_Sample@ad_temp,w	;volatile
  1813  0221                     u3955:	
  1814  0221  1803               	skipnc
  1815  0222  2A27               	goto	l1005
  1816  0223                     l4143:	
  1817                           
  1818                           ;main.c: 374: admin = ad_temp;
  1819  0223  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1820  0224  00D2               	movwf	ADC_Sample@admin+1	;volatile
  1821  0225  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1822  0226  00D1               	movwf	ADC_Sample@admin	;volatile
  1823  0227                     l1005:	
  1824                           
  1825                           ;main.c: 376: adsum += ad_temp;
  1826  0227  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1827  0228  00F3               	movwf	??_ADC_Sample
  1828  0229  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1829  022A  00F4               	movwf	??_ADC_Sample+1
  1830  022B  01F5               	clrf	??_ADC_Sample+2
  1831  022C  01F6               	clrf	??_ADC_Sample+3
  1832  022D  0873               	movf	??_ADC_Sample,w
  1833  022E  07CD               	addwf	ADC_Sample@adsum,f	;volatile
  1834  022F  0874               	movf	??_ADC_Sample+1,w
  1835  0230  1103               	clrz
  1836  0231  1803               	skipnc
  1837  0232  3E01               	addlw	1
  1838  0233  1D03               	btfss	3,2
  1839  0234  07CE               	addwf	ADC_Sample@adsum+1,f	;volatile
  1840  0235  0875               	movf	??_ADC_Sample+2,w
  1841  0236  1103               	clrz
  1842  0237  1803               	skipnc
  1843  0238  3E01               	addlw	1
  1844  0239  1D03               	btfss	3,2
  1845  023A  07CF               	addwf	ADC_Sample@adsum+2,f	;volatile
  1846  023B  0876               	movf	??_ADC_Sample+3,w
  1847  023C  1103               	clrz
  1848  023D  1803               	skipnc
  1849  023E  3E01               	addlw	1
  1850  023F  1D03               	btfss	3,2
  1851  0240  07D0               	addwf	ADC_Sample@adsum+3,f	;volatile
  1852  0241  300A               	movlw	10
  1853  0242  0ACC               	incf	ADC_Sample@i,f
  1854  0243  024C               	subwf	ADC_Sample@i,w
  1855  0244  1C03               	skipc
  1856  0245  29D5               	goto	l4119
  1857                           
  1858                           ;main.c: 377: }
  1859                           ;main.c: 378: adsum -= admax;
  1860  0246  0853               	movf	ADC_Sample@admax,w	;volatile
  1861  0247  00F3               	movwf	??_ADC_Sample
  1862  0248  0854               	movf	ADC_Sample@admax+1,w	;volatile
  1863  0249  23DA  118A         	fcall	PL6	;call to abstracted procedure
  1864  024B  1C03               	skipc
  1865  024C  0F76               	incfsz	??_ADC_Sample+3,w
  1866  024D  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1867                           
  1868                           ;main.c: 379: if (adsum >= admin)
  1869  024E  0851               	movf	ADC_Sample@admin,w	;volatile
  1870  024F  00F3               	movwf	??_ADC_Sample
  1871  0250  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1872  0251  00F4               	movwf	??_ADC_Sample+1
  1873  0252  01F5               	clrf	??_ADC_Sample+2
  1874  0253  01F6               	clrf	??_ADC_Sample+3
  1875  0254  0876               	movf	??_ADC_Sample+3,w
  1876  0255  0250               	subwf	ADC_Sample@adsum+3,w	;volatile
  1877  0256  1D03               	skipz
  1878  0257  2A62               	goto	u3995
  1879  0258  0875               	movf	??_ADC_Sample+2,w
  1880  0259  024F               	subwf	ADC_Sample@adsum+2,w	;volatile
  1881  025A  1D03               	skipz
  1882  025B  2A62               	goto	u3995
  1883  025C  0874               	movf	??_ADC_Sample+1,w
  1884  025D  024E               	subwf	ADC_Sample@adsum+1,w	;volatile
  1885  025E  1D03               	skipz
  1886  025F  2A62               	goto	u3995
  1887  0260  0873               	movf	??_ADC_Sample,w
  1888  0261  024D               	subwf	ADC_Sample@adsum,w	;volatile
  1889  0262                     u3995:	
  1890  0262  1C03               	skipc
  1891  0263  2A6D               	goto	l1009
  1892                           
  1893                           ;main.c: 380: adsum -= admin;
  1894  0264  0851               	movf	ADC_Sample@admin,w	;volatile
  1895  0265  00F3               	movwf	??_ADC_Sample
  1896  0266  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1897  0267  23DA  118A         	fcall	PL6	;call to abstracted procedure
  1898  0269  1C03               	skipc
  1899  026A  0F76               	incfsz	??_ADC_Sample+3,w
  1900  026B  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1901  026C  2A71               	goto	l4153
  1902  026D                     l1009:	
  1903                           
  1904                           ;main.c: 381: else
  1905                           ;main.c: 382: adsum = 0;
  1906  026D  01CD               	clrf	ADC_Sample@adsum	;volatile
  1907  026E  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  1908  026F  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  1909  0270  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  1910  0271                     l4153:	
  1911                           
  1912                           ;main.c: 384: adresult = adsum >> 3;
  1913  0271  084D               	movf	ADC_Sample@adsum,w	;volatile
  1914  0272  00F3               	movwf	??_ADC_Sample
  1915  0273  084E               	movf	ADC_Sample@adsum+1,w	;volatile
  1916  0274  00F4               	movwf	??_ADC_Sample+1
  1917  0275  084F               	movf	ADC_Sample@adsum+2,w	;volatile
  1918  0276  00F5               	movwf	??_ADC_Sample+2
  1919  0277  0850               	movf	ADC_Sample@adsum+3,w	;volatile
  1920  0278  00F6               	movwf	??_ADC_Sample+3
  1921  0279  3003               	movlw	3
  1922  027A                     u4015:	
  1923  027A  1003               	clrc
  1924  027B  0CF6               	rrf	??_ADC_Sample+3,f
  1925  027C  0CF5               	rrf	??_ADC_Sample+2,f
  1926  027D  0CF4               	rrf	??_ADC_Sample+1,f
  1927  027E  0CF3               	rrf	??_ADC_Sample,f
  1928  027F  3EFF               	addlw	-1
  1929  0280  1D03               	skipz
  1930  0281  2A7A               	goto	u4015
  1931  0282  0874               	movf	??_ADC_Sample+1,w
  1932  0283  00C9               	movwf	_adresult+1	;volatile
  1933  0284  0873               	movf	??_ADC_Sample,w
  1934  0285  00C8               	movwf	_adresult	;volatile
  1935                           
  1936                           ;main.c: 386: adsum = 0;
  1937                           
  1938                           ;main.c: 387: admin = 0;
  1939                           
  1940                           ;main.c: 388: admax = 0;
  1941  0286  23E9               	fcall	PL16	;call to abstracted procedure
  1942                           
  1943                           ;main.c: 389: return 0xA5;
  1944  0287  34A5               	retlw	165
  1945  0288                     __end_of_ADC_Sample:	
  1946  0288                     __ptext7:	
  1947 ;; *************** function _fanCtr *****************
  1948 ;; Defined at:
  1949 ;;		line 538 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1954 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0, pclath, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 300/100
  1961 ;;		On exit  : 200/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1964 ;;      Params:         0       0       0       0
  1965 ;;      Locals:         0       5       0       0
  1966 ;;      Temps:          0       0       0       0
  1967 ;;      Totals:         0       5       0       0
  1968 ;;Total ram usage:        5 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    2
  1971 ;; This function calls:
  1972 ;;		_ADC_Sample
  1973 ;;		___lmul
  1974 ;;		_fanInit
  1975 ;;		_fanStop
  1976 ;; This function is called by:
  1977 ;;		_workCtr
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _fanCtr
  1983  0288                     _fanCtr:	
  1984                           
  1985                           ;main.c: 540: if(workStep > 0)
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1989  0288  087B               	movf	_workStep,w
  1990  0289  1903               	btfsc	3,2
  1991  028A  2AF7               	goto	l4431
  1992                           
  1993                           ;main.c: 541: {
  1994                           ;main.c: 542: PORTA |= 0x02;
  1995  028B  1486               	bsf	6,1	;volatile
  1996                           
  1997                           ;main.c: 543: unsigned char maxFanValue = 52;
  1998  028C  3034               	movlw	52
  1999  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2000  028E  00D7               	movwf	fanCtr@maxFanValue
  2001                           
  2002                           ;main.c: 544: if(workStep == 1)
  2003  028F  0B7B               	decfsz	_workStep,w
  2004  0290  2A93               	goto	l1061
  2005                           
  2006                           ;main.c: 545: {
  2007                           ;main.c: 546: maxFanValue = 40;
  2008  0291  3028               	movlw	40
  2009  0292  00D7               	movwf	fanCtr@maxFanValue
  2010  0293                     l1061:	
  2011                           
  2012                           ;main.c: 547: }
  2013                           ;main.c: 548: if(power_ad < 3150)
  2014  0293  300C               	movlw	12
  2015  0294  0225               	subwf	_power_ad+1,w	;volatile
  2016  0295  304E               	movlw	78
  2017  0296  1903               	skipnz
  2018  0297  0224               	subwf	_power_ad,w	;volatile
  2019  0298  1803               	skipnc
  2020  0299  2A9C               	goto	l4395
  2021                           
  2022                           ;main.c: 549: {
  2023                           ;main.c: 550: maxFanValue = 32;
  2024  029A  3020               	movlw	32
  2025  029B  00D7               	movwf	fanCtr@maxFanValue
  2026  029C                     l4395:	
  2027                           
  2028                           ;main.c: 551: }
  2029                           ;main.c: 552: if(workStep == 3)
  2030  029C  3003               	movlw	3
  2031  029D  067B               	xorwf	_workStep,w
  2032  029E  1D03               	btfss	3,2
  2033  029F  2AA2               	goto	l4399
  2034                           
  2035                           ;main.c: 553: {
  2036                           ;main.c: 554: maxFanValue = 10;
  2037  02A0  300A               	movlw	10
  2038  02A1  00D7               	movwf	fanCtr@maxFanValue
  2039  02A2                     l4399:	
  2040  02A2  3002               	movlw	2
  2041                           
  2042                           ;main.c: 555: }
  2043                           ;main.c: 556: test_adc = ADC_Sample(2, 0);
  2044  02A3  01F2               	clrf	ADC_Sample@adldo
  2045  02A4  21B7  118A         	fcall	_ADC_Sample
  2046  02A6  00B7               	movwf	_test_adc	;volatile
  2047                           
  2048                           ;main.c: 557: if (0xA5 == test_adc)
  2049  02A7  30A5               	movlw	165
  2050  02A8  0637               	xorwf	_test_adc,w	;volatile
  2051  02A9  1D03               	btfss	3,2
  2052  02AA  2AD5               	goto	l4411
  2053                           
  2054                           ;main.c: 558: {
  2055                           ;main.c: 559: volatile unsigned long fan_temp;
  2056                           ;main.c: 560: if(power_ad > 0)
  2057  02AB  0824               	movf	_power_ad,w	;volatile
  2058  02AC  0425               	iorwf	_power_ad+1,w	;volatile
  2059  02AD  1903               	btfsc	3,2
  2060  02AE  2AD5               	goto	l4411
  2061                           
  2062                           ;main.c: 561: {
  2063                           ;main.c: 562: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2064  02AF  0848               	movf	_adresult,w	;volatile
  2065  02B0  00CA               	movwf	___lmul@multiplier
  2066  02B1  0849               	movf	_adresult+1,w	;volatile
  2067  02B2  00CB               	movwf	___lmul@multiplier+1
  2068  02B3  01CC               	clrf	___lmul@multiplier+2
  2069  02B4  01CD               	clrf	___lmul@multiplier+3
  2070  02B5  0824               	movf	_power_ad,w	;volatile
  2071  02B6  00CE               	movwf	___lmul@multiplicand
  2072  02B7  0825               	movf	_power_ad+1,w	;volatile
  2073  02B8  00CF               	movwf	___lmul@multiplicand+1
  2074  02B9  01D0               	clrf	___lmul@multiplicand+2
  2075  02BA  01D1               	clrf	___lmul@multiplicand+3
  2076  02BB  22FD  118A         	fcall	___lmul
  2077  02BD  084D               	movf	?___lmul+3,w
  2078  02BE  00DB               	movwf	fanCtr@fan_temp+3	;volatile
  2079  02BF  084C               	movf	?___lmul+2,w
  2080  02C0  00DA               	movwf	fanCtr@fan_temp+2	;volatile
  2081  02C1  084B               	movf	?___lmul+1,w
  2082  02C2  00D9               	movwf	fanCtr@fan_temp+1	;volatile
  2083  02C3  084A               	movf	?___lmul,w
  2084  02C4  00D8               	movwf	fanCtr@fan_temp	;volatile
  2085  02C5  300C               	movlw	12
  2086  02C6                     u4445:	
  2087  02C6  1003               	clrc
  2088  02C7  0CDB               	rrf	fanCtr@fan_temp+3,f	;volatile
  2089  02C8  0CDA               	rrf	fanCtr@fan_temp+2,f	;volatile
  2090  02C9  0CD9               	rrf	fanCtr@fan_temp+1,f	;volatile
  2091  02CA  0CD8               	rrf	fanCtr@fan_temp,f	;volatile
  2092  02CB  3EFF               	addlw	-1
  2093  02CC  1D03               	skipz
  2094  02CD  2AC6               	goto	u4445
  2095                           
  2096                           ;main.c: 563: fanValue = (unsigned int)(fan_temp);
  2097  02CE  0859               	movf	fanCtr@fan_temp+1,w	;volatile
  2098  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2099  02D0  00CA               	movwf	(_fanValue+1)^(0+128)
  2100  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2101  02D2  0858               	movf	fanCtr@fan_temp,w	;volatile
  2102  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  2103  02D4  00C9               	movwf	_fanValue^(0+128)
  2104  02D5                     l4411:	
  2105                           
  2106                           ;main.c: 564: }
  2107                           ;main.c: 565: }
  2108                           ;main.c: 566: if(fanValue > 1300)
  2109  02D5  3005               	movlw	5
  2110  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2111  02D7  024A               	subwf	(_fanValue+1)^(0+128),w
  2112  02D8  3015               	movlw	21
  2113  02D9  1903               	skipnz
  2114  02DA  0249               	subwf	_fanValue^(0+128),w
  2115  02DB  1C03               	skipc
  2116  02DC  2AEA               	goto	l4419
  2117                           
  2118                           ;main.c: 567: {
  2119                           ;main.c: 568: if(++fanOverTime > 50)
  2120  02DD  3033               	movlw	51
  2121  02DE  1283               	bcf	3,5	;RP0=0, select bank0
  2122  02DF  0AC2               	incf	_fanOverTime,f
  2123  02E0  0242               	subwf	_fanOverTime,w
  2124  02E1  1C03               	skipc
  2125  02E2  2AEC               	goto	l4421
  2126  02E3  30C2               	movlw	194
  2127                           
  2128                           ;main.c: 569: {
  2129                           ;main.c: 570: fanOverTime = 0;
  2130  02E4  01C2               	clrf	_fanOverTime
  2131                           
  2132                           ;main.c: 571: workStep = 0;
  2133  02E5  01FB               	clrf	_workStep
  2134                           
  2135                           ;main.c: 572: shanshuoTime = 450;
  2136  02E6  00AE               	movwf	_shanshuoTime
  2137  02E7  3001               	movlw	1
  2138  02E8  00AF               	movwf	_shanshuoTime+1
  2139  02E9  2AEC               	goto	l4421
  2140  02EA                     l4419:	
  2141                           
  2142                           ;main.c: 575: else
  2143                           ;main.c: 576: {
  2144                           ;main.c: 577: fanOverTime = 0;
  2145  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2146  02EB  01C2               	clrf	_fanOverTime
  2147  02EC                     l4421:	
  2148                           
  2149                           ;main.c: 578: }
  2150                           ;main.c: 579: if(fanDuty < maxFanValue)
  2151  02EC  0857               	movf	fanCtr@maxFanValue,w
  2152  02ED  0244               	subwf	_fanDuty,w
  2153  02EE  1803               	skipnc
  2154  02EF  2AF2               	goto	l4425
  2155                           
  2156                           ;main.c: 580: {
  2157                           ;main.c: 581: fanDuty++;
  2158  02F0  0AC4               	incf	_fanDuty,f
  2159                           
  2160                           ;main.c: 582: }
  2161  02F1  2AF6               	goto	l4429
  2162  02F2                     l4425:	
  2163                           
  2164                           ;main.c: 583: else if(fanDuty > maxFanValue)
  2165  02F2  0844               	movf	_fanDuty,w
  2166  02F3  0257               	subwf	fanCtr@maxFanValue,w
  2167  02F4  1C03               	btfss	3,0
  2168                           
  2169                           ;main.c: 584: {
  2170                           ;main.c: 585: fanDuty--;
  2171  02F5  03C4               	decf	_fanDuty,f
  2172  02F6                     l4429:	
  2173                           
  2174                           ;main.c: 586: }
  2175                           ;main.c: 587: fanInit();
  2176  02F6  2BC9               	ljmp	l4181
  2177  02F7                     l4431:	
  2178                           ;main.c: 588: }
  2179                           
  2180                           
  2181                           ;main.c: 589: else
  2182                           ;main.c: 590: {
  2183                           ;main.c: 591: fanStop();
  2184  02F7  23D4               	fcall	_fanStop
  2185                           
  2186                           ;main.c: 592: fanDuty = 0;
  2187  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2188  02F9  01C4               	clrf	_fanDuty
  2189                           
  2190                           ;main.c: 593: PORTA &= 0xFD;
  2191  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  2192  02FB  1086               	bcf	6,1	;volatile
  2193  02FC  0008               	return
  2194  02FD                     __end_of_fanCtr:	
  2195  02FD                     __ptext10:	
  2196 ;; *************** function ___lmul *****************
  2197 ;; Defined at:
  2198 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2201 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  product         4    2[COMMON] unsigned long 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  4    0[BANK0 ] unsigned long 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 300/0
  2210 ;;		On exit  : 300/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2213 ;;      Params:         0       8       0       0
  2214 ;;      Locals:         4       0       0       0
  2215 ;;      Temps:          0       0       0       0
  2216 ;;      Totals:         4       8       0       0
  2217 ;;Total ram usage:       12 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    1
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_fanCtr
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function ___lmul
  2229  02FD                     ___lmul:	
  2230                           
  2231                           ;incstack = 0
  2232                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2233  02FD  01F2               	clrf	___lmul@product
  2234  02FE  01F3               	clrf	___lmul@product+1
  2235  02FF  01F4               	clrf	___lmul@product+2
  2236  0300  01F5               	clrf	___lmul@product+3
  2237  0301                     l1388:	
  2238  0301  1C4A               	btfss	___lmul@multiplier,0
  2239  0302  2B17               	goto	l4203
  2240  0303  084E               	movf	___lmul@multiplicand,w
  2241  0304  07F2               	addwf	___lmul@product,f
  2242  0305  084F               	movf	___lmul@multiplicand+1,w
  2243  0306  1103               	clrz
  2244  0307  1803               	skipnc
  2245  0308  3E01               	addlw	1
  2246  0309  1D03               	btfss	3,2
  2247  030A  07F3               	addwf	___lmul@product+1,f
  2248  030B  0850               	movf	___lmul@multiplicand+2,w
  2249  030C  1103               	clrz
  2250  030D  1803               	skipnc
  2251  030E  3E01               	addlw	1
  2252  030F  1D03               	btfss	3,2
  2253  0310  07F4               	addwf	___lmul@product+2,f
  2254  0311  0851               	movf	___lmul@multiplicand+3,w
  2255  0312  1103               	clrz
  2256  0313  1803               	skipnc
  2257  0314  3E01               	addlw	1
  2258  0315  1D03               	btfss	3,2
  2259  0316  07F5               	addwf	___lmul@product+3,f
  2260  0317                     l4203:	
  2261  0317  1003               	clrc
  2262  0318  0DCE               	rlf	___lmul@multiplicand,f
  2263  0319  0DCF               	rlf	___lmul@multiplicand+1,f
  2264  031A  0DD0               	rlf	___lmul@multiplicand+2,f
  2265  031B  0DD1               	rlf	___lmul@multiplicand+3,f
  2266  031C  1003               	clrc
  2267  031D  0CCD               	rrf	___lmul@multiplier+3,f
  2268  031E  0CCC               	rrf	___lmul@multiplier+2,f
  2269  031F  0CCB               	rrf	___lmul@multiplier+1,f
  2270  0320  0CCA               	rrf	___lmul@multiplier,f
  2271  0321  084D               	movf	___lmul@multiplier+3,w
  2272  0322  044C               	iorwf	___lmul@multiplier+2,w
  2273  0323  044B               	iorwf	___lmul@multiplier+1,w
  2274  0324  044A               	iorwf	___lmul@multiplier,w
  2275  0325  1D03               	skipz
  2276  0326  2B01               	goto	l1388
  2277  0327  0875               	movf	___lmul@product+3,w
  2278  0328  00CD               	movwf	?___lmul+3
  2279  0329  0874               	movf	___lmul@product+2,w
  2280  032A  00CC               	movwf	?___lmul+2
  2281  032B  0873               	movf	___lmul@product+1,w
  2282  032C  00CB               	movwf	?___lmul+1
  2283  032D  0872               	movf	___lmul@product,w
  2284  032E  00CA               	movwf	?___lmul
  2285  032F  0008               	return
  2286  0330                     __end_of___lmul:	
  2287  0330                     __ptext5:	
  2288 ;; *************** function _keyLedCtr *****************
  2289 ;; Defined at:
  2290 ;;		line 424 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, pclath, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 300/100
  2301 ;;		On exit  : 300/100
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2304 ;;      Params:         0       0       0       0
  2305 ;;      Locals:         0       0       0       0
  2306 ;;      Temps:          0       0       0       0
  2307 ;;      Totals:         0       0       0       0
  2308 ;;Total ram usage:        0 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    2
  2311 ;; This function calls:
  2312 ;;		___lwmod
  2313 ;; This function is called by:
  2314 ;;		_workCtr
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           
  2319                           ;psect for function _keyLedCtr
  2320  0330                     _keyLedCtr:	
  2321                           
  2322                           ;main.c: 426: if(shanshuoTime > 0)
  2323                           
  2324                           ;incstack = 0
  2325                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2326  0330  1283               	bcf	3,5	;RP0=0, select bank0
  2327  0331  082E               	movf	_shanshuoTime,w
  2328  0332  042F               	iorwf	_shanshuoTime+1,w
  2329  0333  1903               	btfsc	3,2
  2330  0334  2B4E               	goto	l4349
  2331                           
  2332                           ;main.c: 427: {
  2333                           ;main.c: 428: shanshuoTime--;
  2334  0335  3001               	movlw	1
  2335  0336  02AE               	subwf	_shanshuoTime,f
  2336  0337  3000               	movlw	0
  2337  0338  1C03               	skipc
  2338  0339  03AF               	decf	_shanshuoTime+1,f
  2339  033A  02AF               	subwf	_shanshuoTime+1,f
  2340                           
  2341                           ;main.c: 429: if((shanshuoTime % 150) < 75)
  2342  033B  3096               	movlw	150
  2343  033C  00F2               	movwf	___lwmod@divisor
  2344  033D  01F3               	clrf	___lwmod@divisor+1
  2345  033E  082F               	movf	_shanshuoTime+1,w
  2346  033F  00F5               	movwf	___lwmod@dividend+1
  2347  0340  082E               	movf	_shanshuoTime,w
  2348  0341  00F4               	movwf	___lwmod@dividend
  2349  0342  23A5  118A         	fcall	___lwmod
  2350  0344  3000               	movlw	0
  2351  0345  0273               	subwf	?___lwmod+1,w
  2352  0346  304B               	movlw	75
  2353  0347  1903               	skipnz
  2354  0348  0272               	subwf	?___lwmod,w
  2355  0349  1803               	skipnc
  2356  034A  2B51               	goto	l1022
  2357  034B                     l4347:	
  2358                           
  2359                           ;main.c: 430: {
  2360                           ;main.c: 431: PORTC |= 0x01;
  2361  034B  1703               	bsf	3,6	;RP1=1, select bank2
  2362  034C  1406               	bsf	6,0	;volatile
  2363                           
  2364                           ;main.c: 432: }
  2365  034D  2B53               	goto	l4353
  2366  034E                     l4349:	
  2367                           
  2368                           ;main.c: 438: else if(workStep > 0)
  2369  034E  087B               	movf	_workStep,w
  2370  034F  1903               	btfsc	3,2
  2371  0350  2B4B               	goto	l4347
  2372  0351                     l1022:	
  2373                           
  2374                           ;main.c: 433: else
  2375                           ;main.c: 434: {
  2376                           ;main.c: 435: PORTC &= 0xFE;
  2377  0351  1703               	bsf	3,6	;RP1=1, select bank2
  2378  0352  1006               	bcf	6,0	;volatile
  2379  0353                     l4353:	
  2380                           
  2381                           ;main.c: 445: }
  2382                           ;main.c: 447: if(shanshuoTime2 > 0)
  2383  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2384  0354  082C               	movf	_shanshuoTime2,w
  2385  0355  042D               	iorwf	_shanshuoTime2+1,w
  2386  0356  1903               	btfsc	3,2
  2387  0357  2B71               	goto	l4361
  2388                           
  2389                           ;main.c: 448: {
  2390                           ;main.c: 449: shanshuoTime2--;
  2391  0358  3001               	movlw	1
  2392  0359  02AC               	subwf	_shanshuoTime2,f
  2393  035A  3000               	movlw	0
  2394  035B  1C03               	skipc
  2395  035C  03AD               	decf	_shanshuoTime2+1,f
  2396  035D  02AD               	subwf	_shanshuoTime2+1,f
  2397                           
  2398                           ;main.c: 450: if((shanshuoTime2 % 150) < 75)
  2399  035E  3096               	movlw	150
  2400  035F  00F2               	movwf	___lwmod@divisor
  2401  0360  01F3               	clrf	___lwmod@divisor+1
  2402  0361  082D               	movf	_shanshuoTime2+1,w
  2403  0362  00F5               	movwf	___lwmod@dividend+1
  2404  0363  082C               	movf	_shanshuoTime2,w
  2405  0364  00F4               	movwf	___lwmod@dividend
  2406  0365  23A5  118A         	fcall	___lwmod
  2407  0367  3000               	movlw	0
  2408  0368  0273               	subwf	?___lwmod+1,w
  2409  0369  304B               	movlw	75
  2410  036A  1903               	skipnz
  2411  036B  0272               	subwf	?___lwmod,w
  2412  036C  1803               	skipnc
  2413  036D  2B74               	goto	l1028
  2414  036E                     l4359:	
  2415                           
  2416                           ;main.c: 451: {
  2417                           ;main.c: 452: PORTC |= 0x02;
  2418  036E  1703               	bsf	3,6	;RP1=1, select bank2
  2419  036F  1486               	bsf	6,1	;volatile
  2420                           
  2421                           ;main.c: 453: }
  2422  0370  2B76               	goto	l4365
  2423  0371                     l4361:	
  2424                           
  2425                           ;main.c: 459: else if(wuhuaFlag > 0)
  2426  0371  0845               	movf	_wuhuaFlag,w
  2427  0372  1903               	btfsc	3,2
  2428  0373  2B6E               	goto	l4359
  2429  0374                     l1028:	
  2430                           
  2431                           ;main.c: 454: else
  2432                           ;main.c: 455: {
  2433                           ;main.c: 456: PORTC &= 0xFD;
  2434  0374  1703               	bsf	3,6	;RP1=1, select bank2
  2435  0375  1086               	bcf	6,1	;volatile
  2436  0376                     l4365:	
  2437                           
  2438                           ;main.c: 466: }
  2439                           ;main.c: 467: if(shanshuoTime3 > 0)
  2440  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0377  082A               	movf	_shanshuoTime3,w
  2442  0378  042B               	iorwf	_shanshuoTime3+1,w
  2443  0379  1903               	btfsc	3,2
  2444  037A  2B97               	goto	l4373
  2445                           
  2446                           ;main.c: 468: {
  2447                           ;main.c: 469: shanshuoTime3--;
  2448  037B  3001               	movlw	1
  2449  037C  02AA               	subwf	_shanshuoTime3,f
  2450  037D  3000               	movlw	0
  2451  037E  1C03               	skipc
  2452  037F  03AB               	decf	_shanshuoTime3+1,f
  2453  0380  02AB               	subwf	_shanshuoTime3+1,f
  2454                           
  2455                           ;main.c: 470: if((shanshuoTime3 % 150) < 75)
  2456  0381  3096               	movlw	150
  2457  0382  00F2               	movwf	___lwmod@divisor
  2458  0383  01F3               	clrf	___lwmod@divisor+1
  2459  0384  082B               	movf	_shanshuoTime3+1,w
  2460  0385  00F5               	movwf	___lwmod@dividend+1
  2461  0386  082A               	movf	_shanshuoTime3,w
  2462  0387  00F4               	movwf	___lwmod@dividend
  2463  0388  23A5  118A         	fcall	___lwmod
  2464  038A  3000               	movlw	0
  2465  038B  0273               	subwf	?___lwmod+1,w
  2466  038C  304B               	movlw	75
  2467  038D  1903               	skipnz
  2468  038E  0272               	subwf	?___lwmod,w
  2469  038F  1803               	skipnc
  2470  0390  2B94               	goto	l1034
  2471  0391                     l4371:	
  2472                           
  2473                           ;main.c: 471: {
  2474                           ;main.c: 472: PORTA |= 0x01;
  2475  0391  1683               	bsf	3,5	;RP0=1, select bank1
  2476  0392  1406               	bsf	6,0	;volatile
  2477                           
  2478                           ;main.c: 473: }
  2479  0393  0008               	return
  2480  0394                     l1034:	
  2481                           
  2482                           ;main.c: 474: else
  2483                           ;main.c: 475: {
  2484                           ;main.c: 476: PORTA &= 0xFE;
  2485  0394  1683               	bsf	3,5	;RP0=1, select bank1
  2486  0395  1006               	bcf	6,0	;volatile
  2487  0396  0008               	return
  2488  0397                     l4373:	
  2489                           
  2490                           ;main.c: 479: else if(bujinFlag)
  2491  0397  083D               	movf	_bujinFlag,w
  2492  0398  1D03               	btfss	3,2
  2493  0399  2B94               	goto	l1034
  2494                           
  2495                           ;main.c: 483: else if(chrgFlag)
  2496  039A  0841               	movf	_chrgFlag,w
  2497  039B  1903               	btfsc	3,2
  2498  039C  2B91               	goto	l4371
  2499                           
  2500                           ;main.c: 484: {
  2501                           ;main.c: 485: if(chrgFullFlag || count1s < 50)
  2502  039D  0840               	movf	_chrgFullFlag,w
  2503  039E  1D03               	btfss	3,2
  2504  039F  2B94               	goto	l1034
  2505  03A0  3032               	movlw	50
  2506  03A1  0246               	subwf	_count1s,w
  2507  03A2  1C03               	btfss	3,0
  2508  03A3  2B94               	goto	l1034
  2509  03A4  2B91               	goto	l4371
  2510  03A5                     __end_of_keyLedCtr:	
  2511  03A5                     __ptext6:	
  2512 ;; *************** function ___lwmod *****************
  2513 ;; Defined at:
  2514 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  divisor         2    2[COMMON] unsigned int 
  2517 ;;  dividend        2    4[COMMON] unsigned int 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  counter         1    6[COMMON] unsigned char 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  2    2[COMMON] unsigned int 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0
  2524 ;; Tracked objects:
  2525 ;;		On entry : 300/0
  2526 ;;		On exit  : 300/0
  2527 ;;		Unchanged: 300/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2529 ;;      Params:         4       0       0       0
  2530 ;;      Locals:         1       0       0       0
  2531 ;;      Temps:          0       0       0       0
  2532 ;;      Totals:         5       0       0       0
  2533 ;;Total ram usage:        5 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    1
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_keyLedCtr
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function ___lwmod
  2545  03A5                     ___lwmod:	
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2549  03A5  0872               	movf	___lwmod@divisor,w
  2550  03A6  0473               	iorwf	___lwmod@divisor+1,w
  2551  03A7  1903               	btfsc	3,2
  2552  03A8  2BC4               	goto	l4251
  2553  03A9  01F6               	clrf	___lwmod@counter
  2554  03AA                     L1:	
  2555  03AA  0AF6               	incf	___lwmod@counter,f
  2556  03AB  1BF3               	btfsc	___lwmod@divisor+1,7
  2557  03AC  2BB1               	goto	l4243
  2558  03AD  1003               	clrc
  2559  03AE  0DF2               	rlf	___lwmod@divisor,f
  2560  03AF  0DF3               	rlf	___lwmod@divisor+1,f
  2561  03B0  2BAA               	goto	L1
  2562  03B1                     l4243:	
  2563  03B1  0873               	movf	___lwmod@divisor+1,w
  2564  03B2  0275               	subwf	___lwmod@dividend+1,w
  2565  03B3  1D03               	skipz
  2566  03B4  2BB7               	goto	u4155
  2567  03B5  0872               	movf	___lwmod@divisor,w
  2568  03B6  0274               	subwf	___lwmod@dividend,w
  2569  03B7                     u4155:	
  2570  03B7  1C03               	skipc
  2571  03B8  2BC0               	goto	L2
  2572  03B9  0872               	movf	___lwmod@divisor,w
  2573  03BA  02F4               	subwf	___lwmod@dividend,f
  2574  03BB  0873               	movf	___lwmod@divisor+1,w
  2575  03BC  1C03               	skipc
  2576  03BD  03F5               	decf	___lwmod@dividend+1,f
  2577  03BE  02F5               	subwf	___lwmod@dividend+1,f
  2578  03BF  1003               	clrc
  2579  03C0                     L2:	
  2580  03C0  0CF3               	rrf	___lwmod@divisor+1,f
  2581  03C1  0CF2               	rrf	___lwmod@divisor,f
  2582  03C2  0BF6               	decfsz	___lwmod@counter,f
  2583  03C3  2BB1               	goto	l4243
  2584  03C4                     l4251:	
  2585  03C4  0875               	movf	___lwmod@dividend+1,w
  2586  03C5  00F3               	movwf	?___lwmod+1
  2587  03C6  0874               	movf	___lwmod@dividend,w
  2588  03C7  00F2               	movwf	?___lwmod
  2589  03C8  0008               	return
  2590  03C9                     __end_of___lwmod:	
  2591  03C9                     __ptext9:	
  2592 ;; *************** function _fanInit *****************
  2593 ;; Defined at:
  2594 ;;		line 520 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, status,2, status,0
  2603 ;; Tracked objects:
  2604 ;;		On entry : 300/0
  2605 ;;		On exit  : 300/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2608 ;;      Params:         0       0       0       0
  2609 ;;      Locals:         0       0       0       0
  2610 ;;      Temps:          0       0       0       0
  2611 ;;      Totals:         0       0       0       0
  2612 ;;Total ram usage:        0 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    1
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_fanCtr
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           
  2623                           ;psect for function _fanInit
  2624  03C9                     _fanInit:	
  2625  03C9                     l4181:	
  2626                           ;incstack = 0
  2627                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2628                           
  2629                           
  2630                           ;main.c: 523: PWMTH = 0x00;
  2631  03C9  0198               	clrf	24	;volatile
  2632                           
  2633                           ;main.c: 524: PWMT4L = 73;
  2634  03CA  3049               	movlw	73
  2635  03CB  009C               	movwf	28	;volatile
  2636                           
  2637                           ;main.c: 525: PWMD4L = fanDuty;
  2638  03CC  0844               	movf	_fanDuty,w
  2639  03CD  009B               	movwf	27	;volatile
  2640                           
  2641                           ;main.c: 526: PWMCON1 = 0xC0;
  2642  03CE  30C0               	movlw	192
  2643  03CF  0096               	movwf	22	;volatile
  2644                           
  2645                           ;main.c: 527: PWMCON2 = 0x00;
  2646  03D0  019D               	clrf	29	;volatile
  2647                           
  2648                           ;main.c: 528: PWMCON0 |= 0x30;
  2649  03D1  3030               	movlw	48
  2650  03D2  0495               	iorwf	21,f	;volatile
  2651  03D3  0008               	return
  2652  03D4                     __end_of_fanInit:	
  2653  03D4                     __ptext8:	
  2654 ;; *************** function _fanStop *****************
  2655 ;; Defined at:
  2656 ;;		line 531 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		status,2
  2665 ;; Tracked objects:
  2666 ;;		On entry : 300/100
  2667 ;;		On exit  : 300/100
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2670 ;;      Params:         0       0       0       0
  2671 ;;      Locals:         0       0       0       0
  2672 ;;      Temps:          0       0       0       0
  2673 ;;      Totals:         0       0       0       0
  2674 ;;Total ram usage:        0 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    1
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_fanCtr
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function _fanStop
  2686  03D4                     _fanStop:	
  2687                           
  2688                           ;main.c: 533: PWMD4L = 0;
  2689                           
  2690                           ;incstack = 0
  2691                           ; Regs used in _fanStop: [status,2]
  2692  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2693  03D5  019B               	clrf	27	;volatile
  2694                           
  2695                           ;main.c: 534: PWMCON0 &= 0xEF;
  2696  03D6  1215               	bcf	21,4	;volatile
  2697                           
  2698                           ;main.c: 535: PORTA &= 0xEF;
  2699  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  2700  03D8  1206               	bcf	6,4	;volatile
  2701  03D9  0008               	return
  2702  03DA                     __end_of_fanStop:	
  2703  03DA                     PL6:	
  2704  03DA  00F4               	movwf	??_ADC_Sample+1
  2705  03DB  01F5               	clrf	??_ADC_Sample+2
  2706  03DC  01F6               	clrf	??_ADC_Sample+3
  2707  03DD  0873               	movf	??_ADC_Sample,w
  2708  03DE  02CD               	subwf	ADC_Sample@adsum,f	;volatile
  2709  03DF  0874               	movf	??_ADC_Sample+1,w
  2710  03E0  1C03               	skipc
  2711  03E1  0F74               	incfsz	??_ADC_Sample+1,w
  2712  03E2  02CE               	subwf	ADC_Sample@adsum+1,f	;volatile
  2713  03E3  0875               	movf	??_ADC_Sample+2,w
  2714  03E4  1C03               	skipc
  2715  03E5  0F75               	incfsz	??_ADC_Sample+2,w
  2716  03E6  02CF               	subwf	ADC_Sample@adsum+2,f	;volatile
  2717  03E7  0876               	movf	??_ADC_Sample+3,w
  2718  03E8  0008               	return
  2719  03E9                     __end_ofPL6:	
  2720  03E9                     PL16:	
  2721  03E9  01CD               	clrf	ADC_Sample@adsum	;volatile
  2722  03EA  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2723  03EB  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2724  03EC  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2725  03ED  01D1               	clrf	ADC_Sample@admin	;volatile
  2726  03EE  01D2               	clrf	ADC_Sample@admin+1	;volatile
  2727  03EF  01D3               	clrf	ADC_Sample@admax	;volatile
  2728  03F0  01D4               	clrf	ADC_Sample@admax+1	;volatile
  2729  03F1  0008               	return
  2730  03F2                     __end_ofPL16:	
  2731  03F2                     PL24:	
  2732  03F2  085F               	movf	___fttol@f1,w
  2733  03F3  00E3               	movwf	??___fttol
  2734  03F4  0860               	movf	___fttol@f1+1,w
  2735  03F5  00E4               	movwf	??___fttol+1
  2736  03F6  0861               	movf	___fttol@f1+2,w
  2737  03F7  00E5               	movwf	??___fttol+2
  2738  03F8  0008               	return
  2739  03F9                     __end_ofPL24:	
  2740  03F9                     PL40:	
  2741  03F9  1003               	clrc
  2742  03FA  0CF4               	rrf	___ftpack@arg+2,f
  2743  03FB  0CF3               	rrf	___ftpack@arg+1,f
  2744  03FC  0CF2               	rrf	___ftpack@arg,f
  2745  03FD  0008               	return
  2746  03FE                     __end_ofPL40:	
  2747  03FE                     PL44:	
  2748  03FE  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2749  03FF  00D4               	movwf	ADC_Sample@admax+1	;volatile
  2750  0400  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2751  0401  00D3               	movwf	ADC_Sample@admax	;volatile
  2752  0402  0008               	return
  2753  0403                     __end_ofPL44:	
  2754  0403                     PL46:	
  2755  0403  01D0               	clrf	?___ftdiv
  2756  0404  01D1               	clrf	?___ftdiv+1
  2757  0405  01D2               	clrf	?___ftdiv+2
  2758  0406  0008               	return
  2759  0407                     __end_ofPL46:	
  2760                           
  2761                           	psect	text2
  2762  0E1C                     __ptext2:	
  2763 ;; *************** function _wuhuaCtr *****************
  2764 ;; Defined at:
  2765 ;;		line 597 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0, pclath, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 200/100
  2776 ;;		On exit  : 200/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2779 ;;      Params:         0       0       0       0
  2780 ;;      Locals:         0       0       0       0
  2781 ;;      Temps:          0       0       0       0
  2782 ;;      Totals:         0       0       0       0
  2783 ;;Total ram usage:        0 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    2
  2786 ;; This function calls:
  2787 ;;		_pwmInit
  2788 ;;		_pwmStop
  2789 ;; This function is called by:
  2790 ;;		_workCtr
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _wuhuaCtr
  2796  0E1C                     _wuhuaCtr:	
  2797                           
  2798                           ;main.c: 599: if(count1s == 0)
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2802  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  2803  0E1D  0846               	movf	_count1s,w
  2804  0E1E  1D03               	btfss	3,2
  2805  0E1F  2E37               	goto	l4455
  2806                           
  2807                           ;main.c: 600: {
  2808                           ;main.c: 601: if(++count10s >= 20)
  2809  0E20  3014               	movlw	20
  2810  0E21  0AC3               	incf	_count10s,f
  2811  0E22  0243               	subwf	_count10s,w
  2812  0E23  1803               	btfsc	3,0
  2813                           
  2814                           ;main.c: 602: {
  2815                           ;main.c: 603: count10s = 0;
  2816  0E24  01C3               	clrf	_count10s
  2817                           
  2818                           ;main.c: 604: }
  2819                           ;main.c: 605: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2820  0E25  087B               	movf	_workStep,w
  2821  0E26  1D03               	btfss	3,2
  2822  0E27  2E36               	goto	l4453
  2823  0E28  0845               	movf	_wuhuaFlag,w
  2824  0E29  1D03               	btfss	3,2
  2825  0E2A  2E36               	goto	l4453
  2826  0E2B  083C               	movf	_powerFlag,w
  2827  0E2C  1903               	btfsc	3,2
  2828  0E2D  2E36               	goto	l4453
  2829                           
  2830                           ;main.c: 606: {
  2831                           ;main.c: 607: if(++closeTime > 200)
  2832  0E2E  30C9               	movlw	201
  2833  0E2F  0ABA               	incf	_closeTime,f
  2834  0E30  023A               	subwf	_closeTime,w
  2835  0E31  1C03               	skipc
  2836  0E32  2E37               	goto	l4455
  2837                           
  2838                           ;main.c: 608: {
  2839                           ;main.c: 609: closeTime = 0;
  2840  0E33  01BA               	clrf	_closeTime
  2841                           
  2842                           ;main.c: 610: powerFlag = 0;
  2843  0E34  01BC               	clrf	_powerFlag
  2844  0E35  2E37               	goto	l4455
  2845  0E36                     l4453:	
  2846                           
  2847                           ;main.c: 613: else
  2848                           ;main.c: 614: {
  2849                           ;main.c: 615: closeTime = 0;
  2850  0E36  01BA               	clrf	_closeTime
  2851  0E37                     l4455:	
  2852                           
  2853                           ;main.c: 616: }
  2854                           ;main.c: 617: }
  2855                           ;main.c: 618: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2856  0E37  0345               	decf	_wuhuaFlag,w
  2857  0E38  1903               	btfsc	3,2
  2858  0E39  2E42               	goto	l4461
  2859  0E3A  3002               	movlw	2
  2860  0E3B  0645               	xorwf	_wuhuaFlag,w
  2861  0E3C  1D03               	btfss	3,2
  2862  0E3D  2E43               	goto	l4463
  2863  0E3E  300A               	movlw	10
  2864  0E3F  0243               	subwf	_count10s,w
  2865  0E40  1803               	skipnc
  2866  0E41  2E43               	goto	l4463
  2867  0E42                     l4461:	
  2868                           
  2869                           ;main.c: 619: {
  2870                           ;main.c: 620: pwmInit();
  2871  0E42  2E44               	ljmp	l4165
  2872  0E43                     l4463:	
  2873                           ;main.c: 649: }
  2874                           
  2875                           
  2876                           ;main.c: 650: else
  2877                           ;main.c: 651: {
  2878                           ;main.c: 652: pwmStop();
  2879  0E43  2E52               	ljmp	l4175
  2880  0E44                     __end_of_wuhuaCtr:	
  2881  0E44                     __ptext4:	
  2882 ;; *************** function _pwmInit *****************
  2883 ;; Defined at:
  2884 ;;		line 501 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		wreg, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 300/0
  2895 ;;		On exit  : 300/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2898 ;;      Params:         0       0       0       0
  2899 ;;      Locals:         0       0       0       0
  2900 ;;      Temps:          0       0       0       0
  2901 ;;      Totals:         0       0       0       0
  2902 ;;Total ram usage:        0 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    1
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_wuhuaCtr
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _pwmInit
  2914  0E44                     _pwmInit:	
  2915  0E44                     l4165:	
  2916                           ;incstack = 0
  2917                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2918                           
  2919                           
  2920                           ;main.c: 504: PWMTH = 0x00;
  2921  0E44  0198               	clrf	24	;volatile
  2922                           
  2923                           ;main.c: 505: PWMTL = 73;
  2924  0E45  3049               	movlw	73
  2925  0E46  0097               	movwf	23	;volatile
  2926                           
  2927                           ;main.c: 506: PWMD23H = 0x00;
  2928  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0E48  019E               	clrf	30	;volatile
  2930                           
  2931                           ;main.c: 507: PWMD3L = 32;
  2932  0E49  3020               	movlw	32
  2933  0E4A  009C               	movwf	28	;volatile
  2934                           
  2935                           ;main.c: 508: PWMCON1 = 0xC0;
  2936  0E4B  30C0               	movlw	192
  2937  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0E4D  0096               	movwf	22	;volatile
  2939                           
  2940                           ;main.c: 509: PWMCON2 = 0x00;
  2941  0E4E  019D               	clrf	29	;volatile
  2942                           
  2943                           ;main.c: 510: PWMCON0 |= 0x28;
  2944  0E4F  3028               	movlw	40
  2945  0E50  0495               	iorwf	21,f	;volatile
  2946  0E51  0008               	return
  2947  0E52                     __end_of_pwmInit:	
  2948  0E52                     __ptext3:	
  2949 ;; *************** function _pwmStop *****************
  2950 ;; Defined at:
  2951 ;;		line 513 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;		None
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;		None
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		status,2
  2960 ;; Tracked objects:
  2961 ;;		On entry : 300/0
  2962 ;;		On exit  : 300/100
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2965 ;;      Params:         0       0       0       0
  2966 ;;      Locals:         0       0       0       0
  2967 ;;      Temps:          0       0       0       0
  2968 ;;      Totals:         0       0       0       0
  2969 ;;Total ram usage:        0 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    1
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_wuhuaCtr
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           
  2980                           ;psect for function _pwmStop
  2981  0E52                     _pwmStop:	
  2982  0E52                     l4175:	
  2983                           ;incstack = 0
  2984                           ; Regs used in _pwmStop: [status,2]
  2985                           
  2986                           
  2987                           ;main.c: 515: PWMD3L = 0;
  2988  0E52  1683               	bsf	3,5	;RP0=1, select bank1
  2989  0E53  019C               	clrf	28	;volatile
  2990                           
  2991                           ;main.c: 516: PWMCON0 &= 0xF7;
  2992  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0E55  1195               	bcf	21,3	;volatile
  2994                           
  2995                           ;main.c: 517: PORTA &= 0xF7;
  2996  0E56  1683               	bsf	3,5	;RP0=1, select bank1
  2997  0E57  1186               	bcf	6,3	;volatile
  2998  0E58  0008               	return
  2999  0E59                     __end_of_pwmStop:	
  3000                           
  3001                           	psect	text12
  3002  0F3D                     __ptext12:	
  3003 ;; *************** function _bujinCtr *****************
  3004 ;; Defined at:
  3005 ;;		line 656 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  tempStep        1    6[COMMON] unsigned char 
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3014 ;; Tracked objects:
  3015 ;;		On entry : 200/100
  3016 ;;		On exit  : 300/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3019 ;;      Params:         0       0       0       0
  3020 ;;      Locals:         1       0       0       0
  3021 ;;      Temps:          4       0       0       0
  3022 ;;      Totals:         5       0       0       0
  3023 ;;Total ram usage:        5 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_workCtr
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _bujinCtr
  3035  0F3D                     _bujinCtr:	
  3036  0F3D                     l4465:	
  3037                           ;incstack = 0
  3038                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  3039                           
  3040                           
  3041                           ;main.c: 658: if(bujinFlag || motorStopFlag)
  3042  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  3043  0F3E  083D               	movf	_bujinFlag,w
  3044  0F3F  1903               	btfsc	3,2
  3045  0F40  0839               	movf	_motorStopFlag,w
  3046  0F41  1903               	btfsc	3,2
  3047  0F42  2FE3               	goto	l4523
  3048                           
  3049                           ;main.c: 659: {
  3050                           ;main.c: 661: if(bujinStartFlag && zeroFlag)
  3051  0F43  0838               	movf	_bujinStartFlag,w
  3052  0F44  1903               	btfsc	3,2
  3053  0F45  2F66               	goto	l1091
  3054  0F46  086E               	movf	_zeroFlag,w
  3055  0F47  1903               	btfsc	3,2
  3056  0F48  2F66               	goto	l1091
  3057                           
  3058                           ;main.c: 662: {
  3059                           ;main.c: 663: bujinStartFlag = 0;
  3060  0F49  01B8               	clrf	_bujinStartFlag
  3061                           
  3062                           ;main.c: 664: if(bujinFlag == 1)
  3063  0F4A  0B3D               	decfsz	_bujinFlag,w
  3064  0F4B  2F4F               	goto	l4481
  3065                           
  3066                           ;main.c: 665: {
  3067                           ;main.c: 666: maxMotorStep = 512;
  3068  0F4C  3002               	movlw	2
  3069  0F4D                     L4:	
  3070  0F4D  01EC               	clrf	_maxMotorStep
  3071  0F4E  2F5C               	goto	L5
  3072  0F4F                     l4481:	
  3073                           ;main.c: 668: }
  3074                           
  3075                           
  3076                           ;main.c: 669: else if(bujinFlag == 2)
  3077  0F4F  3002               	movlw	2
  3078  0F50  063D               	xorwf	_bujinFlag,w
  3079  0F51  1D03               	btfss	3,2
  3080  0F52  2F55               	goto	l4487
  3081                           
  3082                           ;main.c: 670: {
  3083                           ;main.c: 671: maxMotorStep = 1024;
  3084  0F53  3004               	movlw	4
  3085  0F54  2F4D               	goto	L4
  3086  0F55                     l4487:	
  3087                           
  3088                           ;main.c: 674: else if(bujinFlag == 3)
  3089  0F55  3003               	movlw	3
  3090  0F56  063D               	xorwf	_bujinFlag,w
  3091  0F57  1D03               	btfss	3,2
  3092  0F58  2F5F               	goto	l1093
  3093                           
  3094                           ;main.c: 675: {
  3095                           ;main.c: 676: maxMotorStep = 1696;
  3096  0F59  30A0               	movlw	160
  3097  0F5A  00EC               	movwf	_maxMotorStep
  3098  0F5B  3006               	movlw	6
  3099  0F5C                     L5:	
  3100  0F5C  00ED               	movwf	_maxMotorStep+1
  3101                           
  3102                           ;main.c: 667: motorStopFlag = 1;
  3103  0F5D  01B9               	clrf	_motorStopFlag
  3104  0F5E  0AB9               	incf	_motorStopFlag,f
  3105  0F5F                     l1093:	
  3106                           
  3107                           ;main.c: 678: }
  3108                           ;main.c: 679: motorStep = maxMotorStep/2;
  3109  0F5F  086D               	movf	_maxMotorStep+1,w
  3110  0F60  00A9               	movwf	_motorStep+1
  3111  0F61  086C               	movf	_maxMotorStep,w
  3112  0F62  00A8               	movwf	_motorStep
  3113  0F63  1003               	clrc
  3114  0F64  0CA9               	rrf	_motorStep+1,f
  3115  0F65  0CA8               	rrf	_motorStep,f
  3116  0F66                     l1091:	
  3117                           
  3118                           ;main.c: 680: }
  3119                           ;main.c: 681: if(motorStep == maxMotorStep/2 || motorStep == ((maxMotorStep/2) + maxMoto
      +                          rStep))
  3120  0F66  27E9  158A         	fcall	PL22	;call to abstracted procedure
  3121  0F68  0CF3               	rrf	??_bujinCtr+1,f
  3122  0F69  0CF2               	rrf	??_bujinCtr,f
  3123  0F6A  0829               	movf	_motorStep+1,w
  3124  0F6B  0673               	xorwf	??_bujinCtr+1,w
  3125  0F6C  1D03               	skipz
  3126  0F6D  2F70               	goto	u4655
  3127  0F6E  0828               	movf	_motorStep,w
  3128  0F6F  0672               	xorwf	??_bujinCtr,w
  3129  0F70                     u4655:	
  3130  0F70  1903               	skipnz
  3131  0F71  2F85               	goto	l1099
  3132  0F72  27E9  158A         	fcall	PL22	;call to abstracted procedure
  3133  0F74  0CF3               	rrf	??_bujinCtr+1,f
  3134  0F75  0CF2               	rrf	??_bujinCtr,f
  3135  0F76  086C               	movf	_maxMotorStep,w
  3136  0F77  0772               	addwf	??_bujinCtr,w
  3137  0F78  00F4               	movwf	??_bujinCtr+2
  3138  0F79  086D               	movf	_maxMotorStep+1,w
  3139  0F7A  1803               	skipnc
  3140  0F7B  0A6D               	incf	_maxMotorStep+1,w
  3141  0F7C  0773               	addwf	??_bujinCtr+1,w
  3142  0F7D  00F5               	movwf	??_bujinCtr+3
  3143  0F7E  0629               	xorwf	_motorStep+1,w
  3144  0F7F  1D03               	skipz
  3145  0F80  2F83               	goto	u4665
  3146  0F81  0828               	movf	_motorStep,w
  3147  0F82  0674               	xorwf	??_bujinCtr+2,w
  3148  0F83                     u4665:	
  3149  0F83  1D03               	skipz
  3150  0F84  2F8C               	goto	l4501
  3151  0F85                     l1099:	
  3152                           
  3153                           ;main.c: 682: {
  3154                           ;main.c: 683: zeroFlag = 1;
  3155  0F85  01EE               	clrf	_zeroFlag
  3156  0F86  0AEE               	incf	_zeroFlag,f
  3157                           
  3158                           ;main.c: 684: if(bujinFlag == 0)
  3159  0F87  083D               	movf	_bujinFlag,w
  3160  0F88  1D03               	btfss	3,2
  3161  0F89  2F8D               	goto	l4503
  3162                           
  3163                           ;main.c: 685: {
  3164                           ;main.c: 686: motorStopFlag = 0;
  3165  0F8A  01B9               	clrf	_motorStopFlag
  3166  0F8B  2F8D               	goto	l4503
  3167  0F8C                     l4501:	
  3168                           
  3169                           ;main.c: 689: else
  3170                           ;main.c: 690: {
  3171                           ;main.c: 691: zeroFlag = 0;
  3172  0F8C  01EE               	clrf	_zeroFlag
  3173  0F8D                     l4503:	
  3174                           
  3175                           ;main.c: 692: }
  3176                           ;main.c: 695: if(++motorStep >= (maxMotorStep*2))
  3177  0F8D  27E9  158A         	fcall	PL22	;call to abstracted procedure
  3178  0F8F  0DF2               	rlf	??_bujinCtr,f
  3179  0F90  0DF3               	rlf	??_bujinCtr+1,f
  3180  0F91  0AA8               	incf	_motorStep,f
  3181  0F92  1903               	skipnz
  3182  0F93  0AA9               	incf	_motorStep+1,f
  3183  0F94  0873               	movf	??_bujinCtr+1,w
  3184  0F95  0229               	subwf	_motorStep+1,w
  3185  0F96  1D03               	skipz
  3186  0F97  2F9A               	goto	u4685
  3187  0F98  0872               	movf	??_bujinCtr,w
  3188  0F99  0228               	subwf	_motorStep,w
  3189  0F9A                     u4685:	
  3190  0F9A  1C03               	skipc
  3191  0F9B  2F9E               	goto	l4507
  3192                           
  3193                           ;main.c: 696: {
  3194                           ;main.c: 697: motorStep = 0;
  3195  0F9C  01A8               	clrf	_motorStep
  3196  0F9D  01A9               	clrf	_motorStep+1
  3197  0F9E                     l4507:	
  3198                           
  3199                           ;main.c: 698: }
  3200                           ;main.c: 699: unsigned char tempStep = motorStep % 8;
  3201  0F9E  0828               	movf	_motorStep,w
  3202  0F9F  00F6               	movwf	bujinCtr@tempStep
  3203  0FA0  3007               	movlw	7
  3204  0FA1  05F6               	andwf	bujinCtr@tempStep,f
  3205                           
  3206                           ;main.c: 700: if(motorStep < maxMotorStep)
  3207  0FA2  086D               	movf	_maxMotorStep+1,w
  3208  0FA3  0229               	subwf	_motorStep+1,w
  3209  0FA4  1D03               	skipz
  3210  0FA5  2FA8               	goto	u4695
  3211  0FA6  086C               	movf	_maxMotorStep,w
  3212  0FA7  0228               	subwf	_motorStep,w
  3213  0FA8                     u4695:	
  3214  0FA8  1C03               	btfss	3,0
  3215  0FA9  2FCB               	goto	l4517
  3216  0FAA  2FD7               	goto	l4521
  3217  0FAB                     l1105:	
  3218                           ;main.c: 704: {
  3219                           ;main.c: 705: case 0:
  3220                           
  3221                           
  3222                           ;main.c: 706: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3223  0FAB  27F5               	fcall	PL30	;call to abstracted procedure
  3224  0FAC  1386               	bcf	6,7	;volatile
  3225                           
  3226                           ;main.c: 707: break;
  3227  0FAD  0008               	return
  3228  0FAE                     l1107:	
  3229                           ;main.c: 708: case 1:
  3230                           
  3231                           
  3232                           ;main.c: 709: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3233  0FAE  1683               	bsf	3,5	;RP0=1, select bank1
  3234  0FAF  1686               	bsf	6,5	;volatile
  3235                           
  3236                           ;main.c: 710: break;
  3237  0FB0  2FFB               	ljmp	PL32	;call to abstracted procedure
  3238  0FB1                     l1108:	
  3239                           ;main.c: 711: case 2:
  3240                           
  3241                           
  3242                           ;main.c: 712: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3243  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  3244  0FB2  1286               	bcf	6,5	;volatile
  3245                           
  3246                           ;main.c: 713: break;
  3247  0FB3  2FFB               	ljmp	PL32	;call to abstracted procedure
  3248  0FB4                     l1109:	
  3249                           ;main.c: 714: case 3:
  3250                           
  3251                           
  3252                           ;main.c: 715: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3253  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  3254  0FB5  1286               	bcf	6,5	;volatile
  3255  0FB6  1706               	bsf	6,6	;volatile
  3256  0FB7  1786               	bsf	6,7	;volatile
  3257  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0FB9  1386               	bcf	6,7	;volatile
  3259                           
  3260                           ;main.c: 716: break;
  3261  0FBA  0008               	return
  3262  0FBB                     l1110:	
  3263                           ;main.c: 717: case 4:
  3264                           
  3265                           
  3266                           ;main.c: 718: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3267  0FBB  27EF               	fcall	PL28	;call to abstracted procedure
  3268  0FBC  1386               	bcf	6,7	;volatile
  3269                           
  3270                           ;main.c: 719: break;
  3271  0FBD  0008               	return
  3272  0FBE                     l1111:	
  3273                           ;main.c: 720: case 5:
  3274                           
  3275                           
  3276                           ;main.c: 721: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3277  0FBE  27EF               	fcall	PL28	;call to abstracted procedure
  3278  0FBF  1786               	bsf	6,7	;volatile
  3279                           
  3280                           ;main.c: 722: break;
  3281  0FC0  0008               	return
  3282  0FC1                     l1112:	
  3283                           ;main.c: 723: case 6:
  3284                           
  3285                           
  3286                           ;main.c: 724: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3287  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  3288  0FC2  1286               	bcf	6,5	;volatile
  3289  0FC3  1306               	bcf	6,6	;volatile
  3290  0FC4  1386               	bcf	6,7	;volatile
  3291  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  3292  0FC6  1786               	bsf	6,7	;volatile
  3293                           
  3294                           ;main.c: 725: break;
  3295  0FC7  0008               	return
  3296  0FC8                     l1113:	
  3297                           ;main.c: 726: case 7:
  3298                           
  3299                           
  3300                           ;main.c: 727: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3301  0FC8  27F5               	fcall	PL30	;call to abstracted procedure
  3302  0FC9  1786               	bsf	6,7	;volatile
  3303                           
  3304                           ;main.c: 728: break;
  3305  0FCA  0008               	return
  3306  0FCB                     l4517:	
  3307  0FCB  0876               	movf	bujinCtr@tempStep,w
  3308                           
  3309                           ; Switch size 1, requested type "space"
  3310                           ; Number of cases is 8, Range of values is 0 to 7
  3311                           ; switch strategies available:
  3312                           ; Name         Instructions Cycles
  3313                           ; direct_byte           23     7 (fixed)
  3314                           ; simple_byte           25    13 (average)
  3315                           ; jumptable            260     6 (fixed)
  3316                           ;	Chosen strategy is direct_byte
  3317  0FCC  0084               	movwf	4
  3318  0FCD  3008               	movlw	8
  3319  0FCE  0204               	subwf	4,w
  3320  0FCF  1803               	skipnc
  3321  0FD0  0008               	return
  3322  0FD1  3008               	movlw	high S4891
  3323  0FD2  008A               	movwf	10
  3324  0FD3  1003               	clrc
  3325  0FD4  0D04               	rlf	4,w
  3326  0FD5  3E17               	addlw	low S4891
  3327  0FD6  0082               	movwf	2
  3328  0FD7                     l4521:	
  3329  0FD7  0876               	movf	bujinCtr@tempStep,w
  3330                           
  3331                           ; Switch size 1, requested type "space"
  3332                           ; Number of cases is 8, Range of values is 0 to 7
  3333                           ; switch strategies available:
  3334                           ; Name         Instructions Cycles
  3335                           ; direct_byte           23     7 (fixed)
  3336                           ; simple_byte           25    13 (average)
  3337                           ; jumptable            260     6 (fixed)
  3338                           ;	Chosen strategy is direct_byte
  3339  0FD8  0084               	movwf	4
  3340  0FD9  3008               	movlw	8
  3341  0FDA  0204               	subwf	4,w
  3342  0FDB  1803               	skipnc
  3343  0FDC  0008               	return
  3344  0FDD  3008               	movlw	high S4893
  3345  0FDE  008A               	movwf	10
  3346  0FDF  1003               	clrc
  3347  0FE0  0D04               	rlf	4,w
  3348  0FE1  3E27               	addlw	low S4893
  3349  0FE2  0082               	movwf	2
  3350  0FE3                     l4523:	
  3351                           
  3352                           ;main.c: 763: else
  3353                           ;main.c: 764: {
  3354                           ;main.c: 765: PORTA &= 0x1F;
  3355  0FE3  301F               	movlw	31
  3356  0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  3357  0FE5  0586               	andwf	6,f	;volatile
  3358                           
  3359                           ;main.c: 766: PORTB &= 0x7F;
  3360  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  3361  0FE7  1386               	bcf	6,7	;volatile
  3362  0FE8  0008               	return
  3363  0FE9                     __end_of_bujinCtr:	
  3364  0FE9                     PL22:	
  3365  0FE9  086D               	movf	_maxMotorStep+1,w
  3366  0FEA  00F3               	movwf	??_bujinCtr+1
  3367  0FEB  086C               	movf	_maxMotorStep,w
  3368  0FEC  00F2               	movwf	??_bujinCtr
  3369  0FED  1003               	clrc
  3370  0FEE  0008               	return
  3371  0FEF                     __end_ofPL22:	
  3372  0FEF                     PL28:	
  3373  0FEF  1683               	bsf	3,5	;RP0=1, select bank1
  3374  0FF0  1286               	bcf	6,5	;volatile
  3375  0FF1  1306               	bcf	6,6	;volatile
  3376  0FF2  1786               	bsf	6,7	;volatile
  3377  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0FF4  0008               	return
  3379  0FF5                     __end_ofPL28:	
  3380  0FF5                     PL30:	
  3381  0FF5  1683               	bsf	3,5	;RP0=1, select bank1
  3382  0FF6  1686               	bsf	6,5	;volatile
  3383  0FF7  1306               	bcf	6,6	;volatile
  3384  0FF8  1386               	bcf	6,7	;volatile
  3385  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0FFA  0008               	return
  3387  0FFB                     __end_ofPL30:	
  3388  0FFB                     PL32:	
  3389  0FFB  1706               	bsf	6,6	;volatile
  3390  0FFC  1386               	bcf	6,7	;volatile
  3391  0FFD  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0FFE  1386               	bcf	6,7	;volatile
  3393  0FFF  0008               	return
  3394  1000                     __end_ofPL32:	
  3395                           
  3396                           	psect	swtext1
  3397  0817                     __pswtext1:	
  3398  0817                     S4891:	
  3399  0817  158A  2FAB         	ljmp	l1105
  3400  0819  158A  2FAE         	ljmp	l1107
  3401  081B  158A  2FB1         	ljmp	l1108
  3402  081D  158A  2FB4         	ljmp	l1109
  3403  081F  158A  2FBB         	ljmp	l1110
  3404  0821  158A  2FBE         	ljmp	l1111
  3405  0823  158A  2FC1         	ljmp	l1112
  3406  0825  158A  2FC8         	ljmp	l1113
  3407                           
  3408                           	psect	swtext2
  3409  0827                     __pswtext2:	
  3410  0827                     S4893:	
  3411  0827  158A  2FC8         	ljmp	l1113
  3412  0829  158A  2FC1         	ljmp	l1112
  3413  082B  158A  2FBE         	ljmp	l1111
  3414  082D  158A  2FBB         	ljmp	l1110
  3415  082F  158A  2FB4         	ljmp	l1109
  3416  0831  158A  2FB1         	ljmp	l1108
  3417  0833  158A  2FAE         	ljmp	l1107
  3418  0835  158A  2FAB         	ljmp	l1105
  3419                           
  3420                           	psect	text17
  3421  0DFC                     __ptext17:	
  3422 ;; *************** function _chrgCtr *****************
  3423 ;; Defined at:
  3424 ;;		line 394 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, status,2, status,0
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/100
  3435 ;;		On exit  : 300/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3438 ;;      Params:         0       0       0       0
  3439 ;;      Locals:         0       0       0       0
  3440 ;;      Temps:          0       0       0       0
  3441 ;;      Totals:         0       0       0       0
  3442 ;;Total ram usage:        0 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    1
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           
  3453                           ;psect for function _chrgCtr
  3454  0DFC                     _chrgCtr:	
  3455                           
  3456                           ;main.c: 396: if(PORTB & 0x20)
  3457                           
  3458                           ;incstack = 0
  3459                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3460  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0DFE  1E86               	btfss	6,5	;volatile
  3463  0DFF  2E18               	goto	l3917
  3464                           
  3465                           ;main.c: 397: {
  3466                           ;main.c: 398: chrgFlag = 1;
  3467  0E00  01C1               	clrf	_chrgFlag
  3468  0E01  0AC1               	incf	_chrgFlag,f
  3469                           
  3470                           ;main.c: 399: firstLock = 0;
  3471  0E02  1683               	bsf	3,5	;RP0=1, select bank1
  3472  0E03  01CF               	clrf	_firstLock^(0+128)
  3473                           
  3474                           ;main.c: 400: lowBatLock = 0;
  3475  0E04  1283               	bcf	3,5	;RP0=0, select bank0
  3476  0E05  3010               	movlw	16
  3477  0E06  01BE               	clrf	_lowBatLock
  3478                           
  3479                           ;main.c: 401: if(power_ad > 4140)
  3480  0E07  0225               	subwf	_power_ad+1,w	;volatile
  3481  0E08  302D               	movlw	45
  3482  0E09  1903               	skipnz
  3483  0E0A  0224               	subwf	_power_ad,w	;volatile
  3484  0E0B  1C03               	skipc
  3485  0E0C  2E16               	goto	l3915
  3486                           
  3487                           ;main.c: 402: {
  3488                           ;main.c: 403: if(++chrgFullTime > 200)
  3489  0E0D  30C9               	movlw	201
  3490  0E0E  0ABF               	incf	_chrgFullTime,f
  3491  0E0F  023F               	subwf	_chrgFullTime,w
  3492  0E10  1C03               	skipc
  3493  0E11  0008               	return
  3494                           
  3495                           ;main.c: 404: {
  3496                           ;main.c: 405: chrgFullTime = 0;
  3497  0E12  01BF               	clrf	_chrgFullTime
  3498                           
  3499                           ;main.c: 406: chrgFullFlag = 1;
  3500  0E13  01C0               	clrf	_chrgFullFlag
  3501  0E14  0AC0               	incf	_chrgFullFlag,f
  3502  0E15  0008               	return
  3503  0E16                     l3915:	
  3504                           
  3505                           ;main.c: 409: else
  3506                           ;main.c: 410: {
  3507                           ;main.c: 411: chrgFullTime = 0;
  3508  0E16  01BF               	clrf	_chrgFullTime
  3509  0E17  0008               	return
  3510  0E18                     l3917:	
  3511                           
  3512                           ;main.c: 415: else
  3513                           ;main.c: 416: {
  3514                           ;main.c: 417: chrgFlag = 0;
  3515  0E18  01C1               	clrf	_chrgFlag
  3516                           
  3517                           ;main.c: 418: chrgFullTime = 0;
  3518  0E19  01BF               	clrf	_chrgFullTime
  3519                           
  3520                           ;main.c: 419: chrgFullFlag = 0;
  3521  0E1A  01C0               	clrf	_chrgFullFlag
  3522  0E1B  0008               	return
  3523  0E1C                     __end_of_chrgCtr:	
  3524                           
  3525                           	psect	text21
  3526  0E97                     __ptext21:	
  3527 ;; *************** function _KeyServer *****************
  3528 ;; Defined at:
  3529 ;;		line 114 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0
  3538 ;; Tracked objects:
  3539 ;;		On entry : 300/0
  3540 ;;		On exit  : 200/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3543 ;;      Params:         0       0       0       0
  3544 ;;      Locals:         0       0       0       0
  3545 ;;      Temps:          0       0       0       0
  3546 ;;      Totals:         0       0       0       0
  3547 ;;Total ram usage:        0 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    1
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_main
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           
  3558                           ;psect for function _KeyServer
  3559  0E97                     _KeyServer:	
  3560                           
  3561                           ;main.c: 116: static unsigned char KeyOldFlag = 0;
  3562                           ;main.c: 117: if (KeyFlag[0])
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3566  0E97  0879               	movf	_KeyFlag,w	;volatile
  3567  0E98  1903               	btfsc	3,2
  3568  0E99  2F33               	goto	l3855
  3569                           
  3570                           ;main.c: 118: {
  3571                           ;main.c: 119: if (KeyFlag[0] != KeyOldFlag)
  3572  0E9A  0879               	movf	_KeyFlag,w	;volatile
  3573  0E9B  0636               	xorwf	KeyServer@KeyOldFlag,w
  3574  0E9C  1903               	skipnz
  3575  0E9D  2F08               	goto	l3837
  3576                           
  3577                           ;main.c: 120: {
  3578                           ;main.c: 122: KeyOldFlag ^= KeyFlag[0];
  3579  0E9E  0879               	movf	_KeyFlag,w	;volatile
  3580  0E9F  06B6               	xorwf	KeyServer@KeyOldFlag,f
  3581                           
  3582                           ;main.c: 123: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3583  0EA0  1836               	btfsc	KeyServer@KeyOldFlag,0
  3584  0EA1  1C79               	btfss	_KeyFlag,0	;volatile
  3585  0EA2  2EC3               	goto	l3791
  3586  0EA3  1683               	bsf	3,5	;RP0=1, select bank1
  3587  0EA4  084F               	movf	_firstLock^(0+128),w
  3588  0EA5  1D03               	btfss	3,2
  3589  0EA6  2EC3               	goto	l3791
  3590  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0EA8  083C               	movf	_powerFlag,w
  3592  0EA9  1903               	btfsc	3,2
  3593  0EAA  2EC3               	goto	l3791
  3594                           
  3595                           ;main.c: 124: {
  3596                           ;main.c: 126: if(lowBatLock == 1)
  3597  0EAB  0B3E               	decfsz	_lowBatLock,w
  3598  0EAC  2EB2               	goto	l3779
  3599                           
  3600                           ;main.c: 127: {
  3601                           ;main.c: 128: shanshuoTime2 = 450;
  3602  0EAD  30C2               	movlw	194
  3603  0EAE  00AC               	movwf	_shanshuoTime2
  3604  0EAF  3001               	movlw	1
  3605  0EB0  00AD               	movwf	_shanshuoTime2+1
  3606                           
  3607                           ;main.c: 129: }
  3608  0EB1  2EB7               	goto	l3783
  3609  0EB2                     l3779:	
  3610                           
  3611                           ;main.c: 130: else if(++wuhuaFlag > 2)
  3612  0EB2  3003               	movlw	3
  3613  0EB3  0AC5               	incf	_wuhuaFlag,f
  3614  0EB4  0245               	subwf	_wuhuaFlag,w
  3615  0EB5  1803               	btfsc	3,0
  3616                           
  3617                           ;main.c: 131: {
  3618                           ;main.c: 132: wuhuaFlag = 0;
  3619  0EB6  01C5               	clrf	_wuhuaFlag
  3620  0EB7                     l3783:	
  3621                           
  3622                           ;main.c: 133: }
  3623                           ;main.c: 134: if(wuhuaFlag >= 2)
  3624  0EB7  3002               	movlw	2
  3625  0EB8  0245               	subwf	_wuhuaFlag,w
  3626  0EB9  1C03               	skipc
  3627  0EBA  2EC1               	goto	l3789
  3628                           
  3629                           ;main.c: 135: {
  3630                           ;main.c: 136: shanshuoTime2 = 450;
  3631  0EBB  30C2               	movlw	194
  3632  0EBC  00AC               	movwf	_shanshuoTime2
  3633  0EBD  3001               	movlw	1
  3634  0EBE  00AD               	movwf	_shanshuoTime2+1
  3635                           
  3636                           ;main.c: 137: count10s = 0;
  3637  0EBF  01C3               	clrf	_count10s
  3638                           
  3639                           ;main.c: 138: }
  3640  0EC0  2EC3               	goto	l3791
  3641  0EC1                     l3789:	
  3642                           
  3643                           ;main.c: 139: else
  3644                           ;main.c: 140: {
  3645                           ;main.c: 141: shanshuoTime2 = 0;
  3646  0EC1  01AC               	clrf	_shanshuoTime2
  3647  0EC2  01AD               	clrf	_shanshuoTime2+1
  3648  0EC3                     l3791:	
  3649                           
  3650                           ;main.c: 142: }
  3651                           ;main.c: 143: }
  3652                           ;main.c: 144: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3653  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0EC4  18B6               	btfsc	KeyServer@KeyOldFlag,1
  3655  0EC5  1CF9               	btfss	_KeyFlag,1	;volatile
  3656  0EC6  2EE4               	goto	l3813
  3657  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  3658  0EC8  084F               	movf	_firstLock^(0+128),w
  3659  0EC9  1D03               	btfss	3,2
  3660  0ECA  2EE4               	goto	l3813
  3661  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  3662  0ECC  083C               	movf	_powerFlag,w
  3663  0ECD  1903               	btfsc	3,2
  3664  0ECE  2EE4               	goto	l3813
  3665                           
  3666                           ;main.c: 145: {
  3667                           ;main.c: 147: if(lowBatLock == 1)
  3668  0ECF  0B3E               	decfsz	_lowBatLock,w
  3669  0ED0  2ED4               	goto	l3803
  3670                           
  3671                           ;main.c: 148: {
  3672                           ;main.c: 149: shanshuoTime = 450;
  3673  0ED1  2738  158A         	fcall	PL42	;call to abstracted procedure
  3674                           
  3675                           ;main.c: 150: }
  3676  0ED3  2EDB               	goto	l3807
  3677  0ED4                     l3803:	
  3678                           
  3679                           ;main.c: 151: else if(++workStep > 3)
  3680  0ED4  3004               	movlw	4
  3681  0ED5  0AFB               	incf	_workStep,f
  3682  0ED6  027B               	subwf	_workStep,w
  3683  0ED7  1C03               	skipc
  3684  0ED8  2EDB               	goto	l3807
  3685                           
  3686                           ;main.c: 152: {
  3687                           ;main.c: 153: workStep = 0;
  3688  0ED9  01FB               	clrf	_workStep
  3689                           
  3690                           ;main.c: 154: bujinFlag = 0;
  3691  0EDA  01BD               	clrf	_bujinFlag
  3692  0EDB                     l3807:	
  3693                           
  3694                           ;main.c: 155: }
  3695                           ;main.c: 156: if(workStep >= 2)
  3696  0EDB  3002               	movlw	2
  3697  0EDC  027B               	subwf	_workStep,w
  3698  0EDD  1C03               	skipc
  3699  0EDE  2EE2               	goto	l3811
  3700                           
  3701                           ;main.c: 157: {
  3702                           ;main.c: 158: shanshuoTime = 450;
  3703  0EDF  2738  158A         	fcall	PL42	;call to abstracted procedure
  3704                           
  3705                           ;main.c: 159: }
  3706  0EE1  2EE4               	goto	l3813
  3707  0EE2                     l3811:	
  3708                           
  3709                           ;main.c: 160: else
  3710                           ;main.c: 161: {
  3711                           ;main.c: 162: shanshuoTime = 0;
  3712  0EE2  01AE               	clrf	_shanshuoTime
  3713  0EE3  01AF               	clrf	_shanshuoTime+1
  3714  0EE4                     l3813:	
  3715                           
  3716                           ;main.c: 163: }
  3717                           ;main.c: 165: }
  3718                           ;main.c: 166: if ((KeyOldFlag & 0x4) && (KeyFlag[0] & 0x4) && firstLock == 0 && workStep
      +                           > 0 && powerFlag > 0)
  3719  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  3720  0EE5  1936               	btfsc	KeyServer@KeyOldFlag,2
  3721  0EE6  1D79               	btfss	_KeyFlag,2	;volatile
  3722  0EE7  2F05               	goto	l3835
  3723  0EE8  1683               	bsf	3,5	;RP0=1, select bank1
  3724  0EE9  084F               	movf	_firstLock^(0+128),w
  3725  0EEA  1D03               	btfss	3,2
  3726  0EEB  2F05               	goto	l3835
  3727  0EEC  087B               	movf	_workStep,w
  3728  0EED  1903               	btfsc	3,2
  3729  0EEE  2F05               	goto	l3835
  3730  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  3731  0EF0  083C               	movf	_powerFlag,w
  3732  0EF1  1903               	btfsc	3,2
  3733  0EF2  2F05               	goto	l3835
  3734                           
  3735                           ;main.c: 167: {
  3736                           ;main.c: 169: if(++bujinFlag > 3)
  3737  0EF3  3004               	movlw	4
  3738  0EF4  0ABD               	incf	_bujinFlag,f
  3739  0EF5  023D               	subwf	_bujinFlag,w
  3740  0EF6  1803               	btfsc	3,0
  3741                           
  3742                           ;main.c: 170: {
  3743                           ;main.c: 171: bujinFlag = 0;
  3744  0EF7  01BD               	clrf	_bujinFlag
  3745  0EF8  3002               	movlw	2
  3746                           
  3747                           ;main.c: 172: }
  3748                           ;main.c: 173: bujinStartFlag = 1;
  3749  0EF9  01B8               	clrf	_bujinStartFlag
  3750  0EFA  0AB8               	incf	_bujinStartFlag,f
  3751                           
  3752                           ;main.c: 174: if(bujinFlag >= 2)
  3753  0EFB  023D               	subwf	_bujinFlag,w
  3754  0EFC  1C03               	skipc
  3755  0EFD  2F03               	goto	l3833
  3756                           
  3757                           ;main.c: 175: {
  3758                           ;main.c: 176: shanshuoTime3 = 450;
  3759  0EFE  30C2               	movlw	194
  3760  0EFF  00AA               	movwf	_shanshuoTime3
  3761  0F00  3001               	movlw	1
  3762  0F01  00AB               	movwf	_shanshuoTime3+1
  3763                           
  3764                           ;main.c: 177: }
  3765  0F02  2F05               	goto	l3835
  3766  0F03                     l3833:	
  3767                           
  3768                           ;main.c: 178: else
  3769                           ;main.c: 179: {
  3770                           ;main.c: 180: shanshuoTime3 = 0;
  3771  0F03  01AA               	clrf	_shanshuoTime3
  3772  0F04  01AB               	clrf	_shanshuoTime3+1
  3773  0F05                     l3835:	
  3774                           
  3775                           ;main.c: 181: }
  3776                           ;main.c: 182: }
  3777                           ;main.c: 184: KeyOldFlag = KeyFlag[0];
  3778  0F05  0879               	movf	_KeyFlag,w	;volatile
  3779  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  3780  0F07  00B6               	movwf	KeyServer@KeyOldFlag
  3781  0F08                     l3837:	
  3782                           
  3783                           ;main.c: 185: }
  3784                           ;main.c: 186: if(firstLock == 0 && KeyOldFlag & 0x4)
  3785  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  3786  0F09  084F               	movf	_firstLock^(0+128),w
  3787  0F0A  1D03               	btfss	3,2
  3788  0F0B  0008               	return
  3789  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0F0D  1D36               	btfss	KeyServer@KeyOldFlag,2
  3791  0F0E  0008               	return
  3792                           
  3793                           ;main.c: 187: {
  3794                           ;main.c: 188: if(++keyCount >= 400)
  3795  0F0F  0AA6               	incf	_keyCount,f
  3796  0F10  1903               	skipnz
  3797  0F11  0AA7               	incf	_keyCount+1,f
  3798  0F12  3001               	movlw	1
  3799  0F13  0227               	subwf	_keyCount+1,w
  3800  0F14  3090               	movlw	144
  3801  0F15  1903               	skipnz
  3802  0F16  0226               	subwf	_keyCount,w
  3803  0F17  1C03               	skipc
  3804  0F18  0008               	return
  3805                           
  3806                           ;main.c: 189: {
  3807                           ;main.c: 190: keyCount = 0;
  3808  0F19  01A6               	clrf	_keyCount
  3809  0F1A  01A7               	clrf	_keyCount+1
  3810                           
  3811                           ;main.c: 191: if(longKeyFlag == 0)
  3812  0F1B  083B               	movf	_longKeyFlag,w
  3813  0F1C  1D03               	btfss	3,2
  3814  0F1D  0008               	return
  3815                           
  3816                           ;main.c: 192: {
  3817                           ;main.c: 193: longKeyFlag = 1;
  3818  0F1E  01BB               	clrf	_longKeyFlag
  3819  0F1F  0ABB               	incf	_longKeyFlag,f
  3820                           
  3821                           ;main.c: 194: if(powerFlag > 0)
  3822  0F20  083C               	movf	_powerFlag,w
  3823  0F21  1903               	btfsc	3,2
  3824  0F22  2F2A               	goto	l971
  3825                           
  3826                           ;main.c: 195: {
  3827                           ;main.c: 196: powerFlag = 0;
  3828  0F23  01BC               	clrf	_powerFlag
  3829                           
  3830                           ;main.c: 197: workStep = 0;
  3831  0F24  01FB               	clrf	_workStep
  3832                           
  3833                           ;main.c: 198: wuhuaFlag = 0;
  3834  0F25  01C5               	clrf	_wuhuaFlag
  3835                           
  3836                           ;main.c: 199: bujinFlag = 0;
  3837  0F26  01BD               	clrf	_bujinFlag
  3838                           
  3839                           ;main.c: 200: shanshuoTime3 = 0;
  3840  0F27  01AA               	clrf	_shanshuoTime3
  3841  0F28  01AB               	clrf	_shanshuoTime3+1
  3842                           
  3843                           ;main.c: 201: }
  3844  0F29  0008               	return
  3845  0F2A                     l971:	
  3846  0F2A  30D0               	movlw	208
  3847                           
  3848                           ;main.c: 202: else
  3849                           ;main.c: 203: {
  3850                           ;main.c: 204: powerFlag = 1;
  3851  0F2B  01BC               	clrf	_powerFlag
  3852  0F2C  0ABC               	incf	_powerFlag,f
  3853                           
  3854                           ;main.c: 205: workStep = 1;
  3855  0F2D  01FB               	clrf	_workStep
  3856  0F2E  0AFB               	incf	_workStep,f
  3857                           
  3858                           ;main.c: 206: shanshuoTime3 = 2000;
  3859  0F2F  00AA               	movwf	_shanshuoTime3
  3860  0F30  3007               	movlw	7
  3861  0F31  00AB               	movwf	_shanshuoTime3+1
  3862  0F32  0008               	return
  3863  0F33                     l3855:	
  3864                           
  3865                           ;main.c: 212: else
  3866                           ;main.c: 213: {
  3867                           ;main.c: 214: KeyOldFlag = 0;
  3868  0F33  01B6               	clrf	KeyServer@KeyOldFlag
  3869                           
  3870                           ;main.c: 215: longKeyFlag = 0;
  3871  0F34  01BB               	clrf	_longKeyFlag
  3872                           
  3873                           ;main.c: 216: keyCount = 0;
  3874  0F35  01A6               	clrf	_keyCount
  3875  0F36  01A7               	clrf	_keyCount+1
  3876  0F37  0008               	return
  3877  0F38                     __end_of_KeyServer:	
  3878  0F38                     PL42:	
  3879  0F38  30C2               	movlw	194
  3880  0F39  00AE               	movwf	_shanshuoTime
  3881  0F3A  3001               	movlw	1
  3882  0F3B  00AF               	movwf	_shanshuoTime+1
  3883  0F3C  0008               	return
  3884  0F3D                     __end_ofPL42:	
  3885                           
  3886                           	psect	text22
  3887  0407                     __ptext22:	
  3888 ;; *************** function _Init_System *****************
  3889 ;; Defined at:
  3890 ;;		line 63 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2
  3899 ;; Tracked objects:
  3900 ;;		On entry : B00/0
  3901 ;;		On exit  : 300/100
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3904 ;;      Params:         0       0       0       0
  3905 ;;      Locals:         0       0       0       0
  3906 ;;      Temps:          0       0       0       0
  3907 ;;      Totals:         0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    1
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _Init_System
  3920  0407                     _Init_System:	
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _Init_System: [wreg+status,2]
  3924  0407  0000               	nop	;# 
  3925  0408  0064               	clrwdt	;# 
  3926                           
  3927                           ;main.c: 67: INTCON = 0;
  3928  0409  018B               	clrf	11	;volatile
  3929                           
  3930                           ;main.c: 68: OSCCON = 0X72;
  3931  040A  3072               	movlw	114
  3932  040B  1283               	bcf	3,5	;RP0=0, select bank0
  3933  040C  1303               	bcf	3,6	;RP1=0, select bank0
  3934  040D  0094               	movwf	20	;volatile
  3935                           
  3936                           ;main.c: 69: OPTION_REG = 0;
  3937  040E  0181               	clrf	1	;volatile
  3938                           
  3939                           ;main.c: 74: TRISA = 0x04;
  3940  040F  3004               	movlw	4
  3941  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3942  0411  0085               	movwf	5	;volatile
  3943                           
  3944                           ;main.c: 75: PORTA = 0;
  3945  0412  0186               	clrf	6	;volatile
  3946                           
  3947                           ;main.c: 76: TRISB = 0x20;
  3948  0413  3020               	movlw	32
  3949  0414  1283               	bcf	3,5	;RP0=0, select bank0
  3950  0415  0085               	movwf	5	;volatile
  3951                           
  3952                           ;main.c: 77: PORTB = 0;
  3953  0416  0186               	clrf	6	;volatile
  3954                           
  3955                           ;main.c: 78: WPUB = 0x00;
  3956  0417  0188               	clrf	8	;volatile
  3957                           
  3958                           ;main.c: 79: TRISC = 0;
  3959  0418  1703               	bsf	3,6	;RP1=1, select bank2
  3960  0419  0185               	clrf	5	;volatile
  3961                           
  3962                           ;main.c: 80: PORTC = 0;
  3963  041A  0186               	clrf	6	;volatile
  3964                           
  3965                           ;main.c: 82: PIE1 = 2;
  3966  041B  3002               	movlw	2
  3967  041C  1303               	bcf	3,6	;RP1=0, select bank0
  3968  041D  008E               	movwf	14	;volatile
  3969                           
  3970                           ;main.c: 83: PR2 = 250;
  3971  041E  30FA               	movlw	250
  3972  041F  0091               	movwf	17	;volatile
  3973                           
  3974                           ;main.c: 84: T2CON = 4;
  3975  0420  3004               	movlw	4
  3976  0421  0093               	movwf	19	;volatile
  3977                           
  3978                           ;main.c: 86: INTCON = 0XC0;
  3979  0422  30C0               	movlw	192
  3980  0423  008B               	movwf	11	;volatile
  3981                           
  3982                           ;main.c: 87: ADCON0 = 0X41;
  3983                           
  3984                           ;main.c: 88: ADON = 1;
  3985                           
  3986                           ;main.c: 89: ADCON1 = 0x00;
  3987  0424  2FCB               	ljmp	PL26	;call to abstracted procedure
  3988  0425                     __end_of_Init_System:	
  3989  0425                     __ptext18:	
  3990 ;; *************** function _WorkSleep *****************
  3991 ;; Defined at:
  3992 ;;		line 246 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 300/0
  4003 ;;		On exit  : 200/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4006 ;;      Params:         0       0       0       0
  4007 ;;      Locals:         0       0       0       0
  4008 ;;      Temps:          0       0       0       0
  4009 ;;      Totals:         0       0       0       0
  4010 ;;Total ram usage:        0 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    4
  4013 ;; This function calls:
  4014 ;;		_Refurbish_Sfr
  4015 ;;		_SystemEnterSleep
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _WorkSleep
  4023  0425                     _WorkSleep:	
  4024                           
  4025                           ;main.c: 249: static unsigned char time;
  4026                           ;main.c: 251: if(B_OnOff)time = 0;
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4030  0425  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4031  0426  01B5               	clrf	WorkSleep@time
  4032                           
  4033                           ;main.c: 253: if(++time >= 125)
  4034  0427  307D               	movlw	125
  4035  0428  0AB5               	incf	WorkSleep@time,f
  4036  0429  0235               	subwf	WorkSleep@time,w
  4037  042A  1C03               	skipc
  4038  042B  0008               	return
  4039                           
  4040                           ;main.c: 254: {
  4041                           ;main.c: 255: time = 0;
  4042  042C  01B5               	clrf	WorkSleep@time
  4043                           
  4044                           ;main.c: 256: INTCON = 0;
  4045  042D  018B               	clrf	11	;volatile
  4046                           
  4047                           ;main.c: 257: PIE1 = 0;
  4048  042E  018E               	clrf	14	;volatile
  4049                           
  4050                           ;main.c: 258: PIE2 = 0;
  4051  042F  1703               	bsf	3,6	;RP1=1, select bank2
  4052  0430  0190               	clrf	16	;volatile
  4053                           
  4054                           ;main.c: 259: PIR1 = 0;
  4055  0431  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0432  018D               	clrf	13	;volatile
  4057                           
  4058                           ;main.c: 260: PIR2 = 0;
  4059  0433  1703               	bsf	3,6	;RP1=1, select bank2
  4060  0434  018F               	clrf	15	;volatile
  4061                           
  4062                           ;main.c: 261: T2CON = 0;
  4063  0435  1303               	bcf	3,6	;RP1=0, select bank0
  4064  0436  0193               	clrf	19	;volatile
  4065                           
  4066                           ;main.c: 262: ADCON1 = 0;
  4067  0437  1683               	bsf	3,5	;RP0=1, select bank1
  4068  0438  0196               	clrf	22	;volatile
  4069                           
  4070                           ;main.c: 265: ADCON0 = 0;
  4071  0439  0195               	clrf	21	;volatile
  4072                           
  4073                           ;main.c: 268: PORTA = 0x01;
  4074  043A  3001               	movlw	1
  4075  043B  0086               	movwf	6	;volatile
  4076                           
  4077                           ;main.c: 269: PORTB = 0x00;
  4078  043C  1283               	bcf	3,5	;RP0=0, select bank0
  4079  043D  0186               	clrf	6	;volatile
  4080                           
  4081                           ;main.c: 270: TRISC = 0;
  4082  043E  1703               	bsf	3,6	;RP1=1, select bank2
  4083  043F  0185               	clrf	5	;volatile
  4084                           
  4085                           ;main.c: 271: PORTC = 0x03;
  4086  0440  3003               	movlw	3
  4087  0441  0086               	movwf	6	;volatile
  4088                           
  4089                           ;main.c: 273: TRISB5 =1;
  4090  0442  1303               	bcf	3,6	;RP1=0, select bank0
  4091  0443  1685               	bsf	5,5	;volatile
  4092                           
  4093                           ;main.c: 275: RBIF = 0;
  4094  0444  100B               	bcf	11,0	;volatile
  4095                           
  4096                           ;main.c: 276: RBIE = 1;
  4097  0445  158B               	bsf	11,3	;volatile
  4098                           
  4099                           ;main.c: 277: IOCB5= 1;
  4100  0446  1689               	bsf	9,5	;volatile
  4101                           
  4102                           ;main.c: 278: PORTB;
  4103  0447  0806               	movf	6,w	;volatile
  4104                           
  4105                           ;main.c: 290: SystemEnterSleep();
  4106  0448  2480  118A         	fcall	_SystemEnterSleep
  4107                           
  4108                           ;main.c: 291: if(RAIF)
  4109  044A  1D8D               	btfss	13,3	;volatile
  4110  044B  2C4F               	goto	l4723
  4111                           
  4112                           ;main.c: 292: {
  4113                           ;main.c: 293: RAIF = 0;
  4114  044C  118D               	bcf	13,3	;volatile
  4115                           
  4116                           ;main.c: 294: PORTA;
  4117  044D  1683               	bsf	3,5	;RP0=1, select bank1
  4118  044E  0806               	movf	6,w	;volatile
  4119  044F                     l4723:	
  4120                           
  4121                           ;main.c: 295: }
  4122                           ;main.c: 297: Refurbish_Sfr();
  4123  044F  276B  118A         	fcall	_Refurbish_Sfr
  4124                           
  4125                           ;main.c: 298: PORTB &= 0xFD;
  4126  0451  1086               	bcf	6,1	;volatile
  4127                           
  4128                           ;main.c: 299: ADCON0 = 0X41;
  4129                           
  4130                           ;main.c: 300: ADON = 1;
  4131                           
  4132                           ;main.c: 301: ADCON1 = 0x00;
  4133  0452  2FCB               	ljmp	PL26	;call to abstracted procedure
  4134  0453                     __end_of_WorkSleep:	
  4135  0453                     __ptext23:	
  4136 ;; *************** function _CheckTouchKey *****************
  4137 ;; Defined at:
  4138 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/100
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4152 ;;      Params:         0       0       0       0
  4153 ;;      Locals:         0       0       0       0
  4154 ;;      Temps:          0       0       0       0
  4155 ;;      Totals:         0       0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    5
  4159 ;; This function calls:
  4160 ;;		_CheckKeyOldValue
  4161 ;;		_CheckOnceResult
  4162 ;;		_CheckValidTime
  4163 ;;		_ClearResSum
  4164 ;;		_GetTouchKeyValue
  4165 ;;		_KeyStopClear
  4166 ;;		_TurnKeyFlags
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _CheckTouchKey
  4174  0453                     _CheckTouchKey:	
  4175                           
  4176                           ;incstack = 0
  4177                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4178  0453  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4179  0454  2C61               	goto	l1346
  4180  0455  2510  118A         	fcall	_GetTouchKeyValue
  4181  0457  3008               	movlw	8
  4182  0458  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0459  1303               	bcf	3,6	;RP1=0, select bank0
  4184  045A  0AB4               	incf	_KeyCounter,f
  4185  045B  0234               	subwf	_KeyCounter,w
  4186  045C  1C03               	skipc
  4187  045D  2C7F               	goto	l4809
  4188  045E  01B4               	clrf	_KeyCounter
  4189  045F  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4190  0460  2C7F               	goto	l4809
  4191  0461                     l1346:	
  4192  0461  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4193  0462  2C79               	goto	l4803
  4194  0463  257F  118A         	fcall	_CheckOnceResult
  4195  0465  2714  118A         	fcall	_TurnKeyFlags
  4196  0467  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4197  0468  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4198  0469  2C70               	goto	l4793
  4199  046A  3002               	movlw	2
  4200  046B  1283               	bcf	3,5	;RP0=0, select bank0
  4201  046C  1303               	bcf	3,6	;RP1=0, select bank0
  4202  046D  0234               	subwf	_KeyCounter,w
  4203  046E  1C03               	skipc
  4204  046F  2C75               	goto	l4801
  4205  0470                     l4793:	
  4206  0470  2700  118A         	fcall	_KeyStopClear
  4207  0472  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4208  0473  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4209  0474  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4210  0475                     l4801:	
  4211  0475  1283               	bcf	3,5	;RP0=0, select bank0
  4212  0476  1303               	bcf	3,6	;RP1=0, select bank0
  4213  0477  01B4               	clrf	_KeyCounter
  4214  0478  2C7F               	goto	l4809
  4215  0479                     l4803:	
  4216  0479  2698  118A         	fcall	_CheckKeyOldValue
  4217  047B  2570  118A         	fcall	_ClearResSum
  4218  047D  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4219  047E  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4220  047F                     l4809:	
  4221  047F  2F45               	ljmp	l3641	;# 
  4222  0480                     __end_of_CheckTouchKey:	
  4223  0480                     __ptext19:	
  4224 ;; *************** function _SystemEnterSleep *****************
  4225 ;; Defined at:
  4226 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  92              2    6[BANK0 ] unsigned int 
  4231 ;;  93              2    4[BANK0 ] unsigned int 
  4232 ;;  94              2    2[BANK0 ] unsigned int 
  4233 ;;  91              1    8[BANK0 ] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 300/0
  4240 ;;		On exit  : 300/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4243 ;;      Params:         0       0       0       0
  4244 ;;      Locals:         0       7       0       0
  4245 ;;      Temps:          0       2       0       0
  4246 ;;      Totals:         0       9       0       0
  4247 ;;Total ram usage:        9 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_ClearResSum
  4252 ;;		_GetTouchKeyValue
  4253 ;;		_KeyClearOne
  4254 ;; This function is called by:
  4255 ;;		_WorkSleep
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _SystemEnterSleep
  4261  0480                     _SystemEnterSleep:	
  4262  0480                     l1358:	
  4263                           ;incstack = 0
  4264                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4265                           
  4266  0480  0064               	clrwdt	;# 
  4267  0481  1683               	bsf	3,5	;RP0=1, select bank1
  4268  0482  1303               	bcf	3,6	;RP1=0, select bank1
  4269  0483  0181               	clrf	1	;volatile
  4270  0484  3007               	movlw	7
  4271  0485  1283               	bcf	3,5	;RP0=0, select bank0
  4272  0486  0481               	iorwf	1,f	;volatile
  4273  0487  1581               	bsf	1,3	;volatile
  4274  0488  0064               	clrwdt	;# 
  4275  0489  300A               	movlw	10
  4276  048A  1283               	bcf	3,5	;RP0=0, select bank0
  4277  048B  1303               	bcf	3,6	;RP1=0, select bank0
  4278  048C  0081               	movwf	1	;volatile
  4279  048D  0064               	clrwdt	;# 
  4280  048E  1283               	bcf	3,5	;RP0=0, select bank2
  4281  048F  1703               	bsf	3,6	;RP1=1, select bank2
  4282  0490  0191               	clrf	17	;volatile
  4283  0491  0193               	clrf	19	;volatile
  4284  0492  3002               	movlw	2
  4285  0493  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0494  0094               	movwf	20	;volatile
  4287  0495  0063               	sleep	;# 
  4288  0496  0000               	nop	;# 
  4289  0497  0064               	clrwdt	;# 
  4290  0498  3072               	movlw	114
  4291  0499  1283               	bcf	3,5	;RP0=0, select bank0
  4292  049A  1303               	bcf	3,6	;RP1=0, select bank0
  4293  049B  0094               	movwf	20	;volatile
  4294  049C  3079               	movlw	121
  4295  049D  1703               	bsf	3,6	;RP1=1, select bank2
  4296  049E  0093               	movwf	19	;volatile
  4297  049F  2570  118A         	fcall	_ClearResSum
  4298  04A1  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4299  04A2  2510  118A         	fcall	_GetTouchKeyValue
  4300  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  4301  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  4302  04A6  27D7  118A         	fcall	PL36	;call to abstracted procedure
  4303  04A8  1C0B               	btfss	11,0	;volatile
  4304  04A9  188B               	btfsc	11,1	;volatile
  4305  04AA  2CAD               	goto	l4291
  4306  04AB  1D8D               	btfss	13,3	;volatile
  4307  04AC  2CB4               	goto	l4303
  4308  04AD                     l4291:	
  4309  04AD  2570               	fcall	_ClearResSum
  4310  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  4311  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  4312  04B0  01B4               	clrf	_KeyCounter
  4313  04B1  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4314  04B2  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4315  04B3  0008               	return
  4316  04B4                     l4303:	
  4317  04B4  0850               	movf	SystemEnterSleep@92,w
  4318  04B5  3907               	andlw	7
  4319  04B6  1003               	clrc
  4320  04B7  1903               	btfsc	3,2
  4321  04B8  2D0A               	goto	L8
  4322  04B9  0D52               	rlf	SystemEnterSleep@91,w
  4323  04BA  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4324  04BB  0084               	movwf	4
  4325  04BC  1383               	bcf	3,7	;select IRP bank1
  4326  04BD  0800               	movf	0,w
  4327  04BE  00CE               	movwf	SystemEnterSleep@93
  4328  04BF  0A84               	incf	4,f
  4329  04C0  0800               	movf	0,w
  4330  04C1  00CF               	movwf	SystemEnterSleep@93+1
  4331  04C2  00CD               	movwf	SystemEnterSleep@94+1
  4332  04C3  084E               	movf	SystemEnterSleep@93,w
  4333  04C4  00CC               	movwf	SystemEnterSleep@94
  4334  04C5  084E               	movf	SystemEnterSleep@93,w
  4335  04C6  044F               	iorwf	SystemEnterSleep@93+1,w
  4336  04C7  1903               	btfsc	3,2
  4337  04C8  2D09               	goto	l4337
  4338  04C9  0852               	movf	SystemEnterSleep@91,w
  4339  04CA  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4340  04CB  0084               	movwf	4
  4341  04CC  158A  2000  118A   	fcall	stringdir
  4342  04CF  07CC               	addwf	SystemEnterSleep@94,f
  4343  04D0  1803               	skipnc
  4344  04D1  0ACD               	incf	SystemEnterSleep@94+1,f
  4345  04D2  1003               	clrc
  4346  04D3  0D52               	rlf	SystemEnterSleep@91,w
  4347  04D4  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4348  04D5  27B6  118A         	fcall	PL14	;call to abstracted procedure
  4349  04D7  084D               	movf	SystemEnterSleep@94+1,w
  4350  04D8  024B               	subwf	??_SystemEnterSleep+1,w
  4351  04D9  1D03               	skipz
  4352  04DA  2CDD               	goto	u4225
  4353  04DB  084C               	movf	SystemEnterSleep@94,w
  4354  04DC  024A               	subwf	??_SystemEnterSleep,w
  4355  04DD                     u4225:	
  4356  04DD  1C03               	skipc
  4357  04DE  2CF1               	goto	L7
  4358  04DF  27D7  118A         	fcall	PL36	;call to abstracted procedure
  4359  04E1                     l4317:	
  4360  04E1  0850               	movf	SystemEnterSleep@92,w
  4361  04E2  3907               	andlw	7
  4362  04E3  1D03               	btfss	3,2
  4363  04E4  2CE8               	goto	l4321
  4364  04E5  0852               	movf	SystemEnterSleep@91,w
  4365  04E6  2675  118A         	fcall	_KeyClearOne
  4366  04E8                     l4321:	
  4367  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  4368  04E9  3003               	movlw	3
  4369  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  4370  04EB  1003               	clrc
  4371  04EC  27DC  118A         	fcall	PL38	;call to abstracted procedure
  4372  04EE  1803               	btfsc	3,0
  4373  04EF  2CAD               	goto	l4291
  4374  04F0  2CE1               	goto	l4317
  4375  04F1                     L7:	
  4376  04F1  0D52               	rlf	SystemEnterSleep@91,w
  4377  04F2  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4378  04F3  27B6  118A         	fcall	PL14	;call to abstracted procedure
  4379  04F5  1003               	clrc
  4380  04F6  0D52               	rlf	SystemEnterSleep@91,w
  4381  04F7  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4382  04F8  27A0  118A         	fcall	PL10	;call to abstracted procedure
  4383  04FA  0800               	movf	0,w
  4384  04FB  00CA               	movwf	??_SystemEnterSleep
  4385  04FC  0A84               	incf	4,f
  4386  04FD  0800               	movf	0,w
  4387  04FE  00CB               	movwf	??_SystemEnterSleep+1
  4388  04FF  1003               	clrc
  4389  0500  0D52               	rlf	SystemEnterSleep@91,w
  4390  0501  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4391  0502  27A0  118A         	fcall	PL10	;call to abstracted procedure
  4392  0504  084E               	movf	SystemEnterSleep@93,w
  4393  0505  0080               	movwf	0
  4394  0506  0A84               	incf	4,f
  4395  0507  084F               	movf	SystemEnterSleep@93+1,w
  4396  0508  0080               	movwf	0
  4397  0509                     l4337:	
  4398  0509  1003               	clrc
  4399  050A                     L8:	
  4400  050A  3003               	movlw	3
  4401  050B  27DC  118A         	fcall	PL38	;call to abstracted procedure
  4402  050D  1803               	btfsc	3,0
  4403  050E  2C80               	goto	l1358
  4404  050F  2CB4               	goto	l4303
  4405  0510                     __end_of_SystemEnterSleep:	
  4406  0510                     __ptext27:	
  4407 ;; *************** function _GetTouchKeyValue *****************
  4408 ;; Defined at:
  4409 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;		None
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  63              2    5[COMMON] unsigned int 
  4414 ;;  64              2    3[COMMON] unsigned int 
  4415 ;;  62              1    7[COMMON] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/200
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4425 ;;      Params:         0       0       0       0
  4426 ;;      Locals:         5       0       0       0
  4427 ;;      Temps:          0       0       0       0
  4428 ;;      Totals:         5       0       0       0
  4429 ;;Total ram usage:        5 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    2
  4432 ;; This function calls:
  4433 ;;		_ClearResSum
  4434 ;; This function is called by:
  4435 ;;		_CheckTouchKey
  4436 ;;		_SystemEnterSleep
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _GetTouchKeyValue
  4442  0510                     _GetTouchKeyValue:	
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4446  0510  01F7               	clrf	GetTouchKeyValue@62
  4447  0511  01F5               	clrf	GetTouchKeyValue@63
  4448  0512  0AF5               	incf	GetTouchKeyValue@63,f
  4449  0513  01F6               	clrf	GetTouchKeyValue@63+1
  4450  0514                     l3097:	
  4451  0514  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4452  0515  2D1A               	goto	l3101
  4453  0516  0875               	movf	GetTouchKeyValue@63,w
  4454  0517  3907               	andlw	7
  4455  0518  1903               	btfsc	3,2
  4456  0519  2D66               	goto	l3129
  4457  051A                     l3101:	
  4458  051A  1283               	bcf	3,5	;RP0=0, select bank2
  4459  051B  1703               	bsf	3,6	;RP1=1, select bank2
  4460  051C  0191               	clrf	17	;volatile
  4461  051D  0192               	clrf	18	;volatile
  4462  051E  3079               	movlw	121
  4463  051F  0093               	movwf	19	;volatile
  4464  0520  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0521  1305               	bcf	5,6	;volatile
  4466  0522  1306               	bcf	6,6	;volatile
  4467  0523  0000               	nop	;# 
  4468  0524  0000               	nop	;# 
  4469  0525  0000               	nop	;# 
  4470  0526  0000               	nop	;# 
  4471  0527  0000               	nop	;# 
  4472  0528  0000               	nop	;# 
  4473  0529  0000               	nop	;# 
  4474  052A  0000               	nop	;# 
  4475  052B  1283               	bcf	3,5	;RP0=0, select bank0
  4476  052C  1303               	bcf	3,6	;RP1=0, select bank0
  4477  052D  1705               	bsf	5,6	;volatile
  4478  052E  0877               	movf	GetTouchKeyValue@62,w
  4479  052F  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4480  0530  0084               	movwf	4
  4481  0531  158A  2000  118A   	fcall	stringdir
  4482  0534  1703               	bsf	3,6	;RP1=1, select bank2
  4483  0535  0091               	movwf	17	;volatile
  4484  0536  0877               	movf	GetTouchKeyValue@62,w
  4485  0537  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4486  0538  0084               	movwf	4
  4487  0539  158A  2000  118A   	fcall	stringdir
  4488  053C  0092               	movwf	18	;volatile
  4489  053D  0000               	nop	;# 
  4490  053E  0000               	nop	;# 
  4491  053F  0000               	nop	;# 
  4492  0540  0000               	nop	;# 
  4493  0541  1283               	bcf	3,5	;RP0=0, select bank2
  4494  0542  1703               	bsf	3,6	;RP1=1, select bank2
  4495  0543  1411               	bsf	17,0	;volatile
  4496  0544  30D0               	movlw	208
  4497  0545  00F3               	movwf	GetTouchKeyValue@64
  4498  0546  3007               	movlw	7
  4499  0547  00F4               	movwf	GetTouchKeyValue@64+1
  4500  0548                     l1268:	
  4501  0548  1B91               	btfsc	17,7	;volatile
  4502  0549  2D56               	goto	l3127
  4503  054A  3001               	movlw	1
  4504  054B  02F3               	subwf	GetTouchKeyValue@64,f
  4505  054C  1C03               	skipc
  4506  054D  03F4               	decf	GetTouchKeyValue@64+1,f
  4507  054E  0873               	movf	GetTouchKeyValue@64,w
  4508  054F  0474               	iorwf	GetTouchKeyValue@64+1,w
  4509  0550  1D03               	btfss	3,2
  4510  0551  2D48               	goto	l1268
  4511  0552  30FF               	movlw	255
  4512  0553  1303               	bcf	3,6	;RP1=0, select bank0
  4513  0554  00B4               	movwf	_KeyCounter
  4514  0555  2D70               	ljmp	l2945
  4515  0556                     l3127:	
  4516  0556  1003               	clrc
  4517  0557  0D77               	rlf	GetTouchKeyValue@62,w
  4518  0558  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4519  0559  0084               	movwf	4
  4520  055A  0816               	movf	22,w	;volatile
  4521  055B  1383               	bcf	3,7	;select IRP bank1
  4522  055C  0780               	addwf	0,f
  4523  055D  0F84               	incfsz	4,f
  4524  055E  0800               	movf	0,w
  4525  055F  1803               	skipnc
  4526  0560  0A00               	incf	0,w
  4527  0561  00FF               	movwf	127
  4528  0562  0817               	movf	23,w	;volatile
  4529  0563  077F               	addwf	127,w
  4530  0564  0080               	movwf	0
  4531  0565  0384               	decf	4,f
  4532  0566                     l3129:	
  4533  0566  3003               	movlw	3
  4534  0567  1003               	clrc
  4535  0568  0DF5               	rlf	GetTouchKeyValue@63,f
  4536  0569  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4537  056A  0AF7               	incf	GetTouchKeyValue@62,f
  4538  056B  0277               	subwf	GetTouchKeyValue@62,w
  4539  056C  1C03               	skipc
  4540  056D  2D14               	goto	l3097
  4541  056E  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4542  056F  0008               	return
  4543  0570                     __end_of_GetTouchKeyValue:	
  4544  0570                     __ptext28:	
  4545 ;; *************** function _ClearResSum *****************
  4546 ;; Defined at:
  4547 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;		None
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  56              1    2[COMMON] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      void 
  4554 ;; Registers used:
  4555 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/200
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4561 ;;      Params:         0       0       0       0
  4562 ;;      Locals:         1       0       0       0
  4563 ;;      Temps:          0       0       0       0
  4564 ;;      Totals:         1       0       0       0
  4565 ;;Total ram usage:        1 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    1
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_GetTouchKeyValue
  4572 ;;		_CheckTouchKey
  4573 ;;		_SystemEnterSleep
  4574 ;; This function uses a non-reentrant model
  4575 ;;
  4576                           
  4577                           
  4578                           ;psect for function _ClearResSum
  4579  0570                     _ClearResSum:	
  4580  0570                     l2945:	
  4581                           ;incstack = 0
  4582                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4583                           
  4584  0570  01F2               	clrf	ClearResSum@56
  4585  0571                     l2947:	
  4586  0571  1003               	clrc
  4587  0572  0D72               	rlf	ClearResSum@56,w
  4588  0573  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4589  0574  0084               	movwf	4
  4590  0575  3003               	movlw	3
  4591  0576  1383               	bcf	3,7	;select IRP bank1
  4592  0577  0180               	clrf	0
  4593  0578  0A84               	incf	4,f
  4594  0579  0180               	clrf	0
  4595  057A  0AF2               	incf	ClearResSum@56,f
  4596  057B  0272               	subwf	ClearResSum@56,w
  4597  057C  1803               	btfsc	3,0
  4598  057D  0008               	return
  4599  057E  2D71               	goto	l2947
  4600  057F                     __end_of_ClearResSum:	
  4601  057F                     __ptext30:	
  4602 ;; *************** function _CheckOnceResult *****************
  4603 ;; Defined at:
  4604 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;		None
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  71              2   10[BANK0 ] unsigned int 
  4609 ;;  72              2    7[BANK0 ] unsigned int 
  4610 ;;  73              2    4[BANK0 ] unsigned int 
  4611 ;;  68              1   12[BANK0 ] unsigned char 
  4612 ;;  69              1    9[BANK0 ] unsigned char 
  4613 ;;  70              1    6[BANK0 ] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/100
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4623 ;;      Params:         0       0       0       0
  4624 ;;      Locals:         0       9       0       0
  4625 ;;      Temps:          0       4       0       0
  4626 ;;      Totals:         0      13       0       0
  4627 ;;Total ram usage:       13 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    3
  4630 ;; This function calls:
  4631 ;;		_KeyClearOne
  4632 ;;		_KeyHave
  4633 ;;		_KeyIsIn
  4634 ;; This function is called by:
  4635 ;;		_CheckTouchKey
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _CheckOnceResult
  4641  057F                     _CheckOnceResult:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4645  057F  1283               	bcf	3,5	;RP0=0, select bank0
  4646  0580  1303               	bcf	3,6	;RP1=0, select bank0
  4647  0581  01D6               	clrf	CheckOnceResult@68
  4648  0582  01A0               	clrf	_KeyData	;volatile
  4649  0583  01A1               	clrf	_KeyData+1	;volatile
  4650  0584  01B3               	clrf	_KeyMaxSub
  4651  0585                     l4539:	
  4652  0585  0856               	movf	CheckOnceResult@68,w
  4653  0586  3907               	andlw	7
  4654  0587  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4655  0588  0084               	movwf	4
  4656  0589  158A  2000  118A   	fcall	stringdir
  4657  058C  00D0               	movwf	CheckOnceResult@70
  4658  058D  1003               	clrc
  4659  058E  0D56               	rlf	CheckOnceResult@68,w
  4660  058F  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4661  0590  0084               	movwf	4
  4662  0591  3003               	movlw	3
  4663  0592                     u4705:	
  4664  0592  0A84               	incf	4,f
  4665  0593  1003               	clrc
  4666  0594  1383               	bcf	3,7	;select IRP bank1
  4667  0595  0C80               	rrf	0,f
  4668  0596  0384               	decf	4,f
  4669  0597  0C80               	rrf	0,f
  4670  0598  3EFF               	addlw	-1
  4671  0599  1D03               	skipz
  4672  059A  2D92               	goto	u4705
  4673  059B  1003               	clrc
  4674  059C  0D56               	rlf	CheckOnceResult@68,w
  4675  059D  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4676  059E  0084               	movwf	4
  4677  059F  0800               	movf	0,w
  4678  05A0  00D4               	movwf	CheckOnceResult@71
  4679  05A1  0A84               	incf	4,f
  4680  05A2  0800               	movf	0,w
  4681  05A3  00D5               	movwf	CheckOnceResult@71+1
  4682  05A4  0856               	movf	CheckOnceResult@68,w
  4683  05A5  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4684  05A6  0084               	movwf	4
  4685  05A7  158A  2000  118A   	fcall	stringdir
  4686  05AA  00D3               	movwf	CheckOnceResult@69
  4687  05AB  00D1               	movwf	CheckOnceResult@72
  4688  05AC  01D2               	clrf	CheckOnceResult@72+1
  4689  05AD  0854               	movf	CheckOnceResult@71,w
  4690  05AE  07D1               	addwf	CheckOnceResult@72,f
  4691  05AF  1803               	skipnc
  4692  05B0  0AD2               	incf	CheckOnceResult@72+1,f
  4693  05B1  0855               	movf	CheckOnceResult@71+1,w
  4694  05B2  07D2               	addwf	CheckOnceResult@72+1,f
  4695  05B3  0856               	movf	CheckOnceResult@68,w
  4696  05B4  2665  118A         	fcall	_KeyIsIn
  4697  05B6  3A00               	xorlw	0
  4698  05B7  1D03               	skipz
  4699  05B8  2E16               	goto	l4581
  4700  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  4701  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  4702  05BB  1003               	clrc
  4703  05BC  0D56               	rlf	CheckOnceResult@68,w
  4704  05BD  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4705  05BE  0084               	movwf	4
  4706  05BF  1383               	bcf	3,7	;select IRP bank1
  4707  05C0  0800               	movf	0,w
  4708  05C1  00CE               	movwf	CheckOnceResult@73
  4709  05C2  0A84               	incf	4,f
  4710  05C3  0800               	movf	0,w
  4711  05C4  00CF               	movwf	CheckOnceResult@73+1
  4712  05C5  1003               	clrc
  4713  05C6  0D56               	rlf	CheckOnceResult@68,w
  4714  05C7  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4715  05C8  2799  118A         	fcall	PL8	;call to abstracted procedure
  4716  05CA  0252               	subwf	CheckOnceResult@72+1,w
  4717  05CB  1D03               	skipz
  4718  05CC  2DCF               	goto	u4725
  4719  05CD  084A               	movf	??_CheckOnceResult,w
  4720  05CE  0251               	subwf	CheckOnceResult@72,w
  4721  05CF                     u4725:	
  4722  05CF  1803               	skipnc
  4723  05D0  2DDE               	goto	l4557
  4724  05D1  1003               	clrc
  4725  05D2  0D56               	rlf	CheckOnceResult@68,w
  4726  05D3  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4727  05D4  2799  118A         	fcall	PL8	;call to abstracted procedure
  4728  05D6  0854               	movf	CheckOnceResult@71,w
  4729  05D7  024A               	subwf	??_CheckOnceResult,w
  4730  05D8  00D4               	movwf	CheckOnceResult@71
  4731  05D9  0855               	movf	CheckOnceResult@71+1,w
  4732  05DA  1C03               	skipc
  4733  05DB  0A55               	incf	CheckOnceResult@71+1,w
  4734  05DC  024B               	subwf	??_CheckOnceResult+1,w
  4735  05DD  2E02               	goto	L9
  4736  05DE                     l4557:	
  4737  05DE  084F               	movf	CheckOnceResult@73+1,w
  4738  05DF  0252               	subwf	CheckOnceResult@72+1,w
  4739  05E0  1D03               	skipz
  4740  05E1  2DE4               	goto	u4735
  4741  05E2  084E               	movf	CheckOnceResult@73,w
  4742  05E3  0251               	subwf	CheckOnceResult@72,w
  4743  05E4                     u4735:	
  4744  05E4  1803               	skipnc
  4745  05E5  2E5D               	goto	l4603
  4746  05E6  1003               	clrc
  4747  05E7  0D56               	rlf	CheckOnceResult@68,w
  4748  05E8  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4749  05E9  2799  118A         	fcall	PL8	;call to abstracted procedure
  4750  05EB  0252               	subwf	CheckOnceResult@72+1,w
  4751  05EC  1D03               	skipz
  4752  05ED  2DF0               	goto	u4745
  4753  05EE  084A               	movf	??_CheckOnceResult,w
  4754  05EF  0251               	subwf	CheckOnceResult@72,w
  4755  05F0                     u4745:	
  4756  05F0  1803               	skipnc
  4757  05F1  2E5D               	goto	l4603
  4758  05F2  1003               	clrc
  4759  05F3  0D56               	rlf	CheckOnceResult@68,w
  4760  05F4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4761  05F5  0084               	movwf	4
  4762  05F6  084E               	movf	CheckOnceResult@73,w
  4763  05F7  0080               	movwf	0
  4764  05F8  0A84               	incf	4,f
  4765  05F9  084F               	movf	CheckOnceResult@73+1,w
  4766  05FA  0080               	movwf	0
  4767  05FB  0854               	movf	CheckOnceResult@71,w
  4768  05FC  024E               	subwf	CheckOnceResult@73,w
  4769  05FD  00D4               	movwf	CheckOnceResult@71
  4770  05FE  0855               	movf	CheckOnceResult@71+1,w
  4771  05FF  1C03               	skipc
  4772  0600  0A55               	incf	CheckOnceResult@71+1,w
  4773  0601  024F               	subwf	CheckOnceResult@73+1,w
  4774  0602                     L9:	
  4775  0602  00D5               	movwf	CheckOnceResult@71+1
  4776  0603  0856               	movf	CheckOnceResult@68,w
  4777  0604  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4778  0605  0084               	movwf	4
  4779  0606  0180               	clrf	0
  4780  0607  0855               	movf	CheckOnceResult@71+1,w
  4781  0608  1903               	btfsc	3,2
  4782  0609  2E0C               	goto	l4571
  4783  060A  30FF               	movlw	255
  4784  060B  2E0D               	goto	L10
  4785  060C                     l4571:	
  4786  060C  0854               	movf	CheckOnceResult@71,w
  4787  060D                     L10:	
  4788  060D  00D3               	movwf	CheckOnceResult@69
  4789  060E  0233               	subwf	_KeyMaxSub,w
  4790  060F  1803               	skipnc
  4791  0610  2E14               	goto	l4577
  4792  0611  0853               	movf	CheckOnceResult@69,w
  4793  0612  00B3               	movwf	_KeyMaxSub
  4794  0613  2E57               	goto	l4601
  4795  0614                     l4577:	
  4796  0614  0AB4               	incf	_KeyCounter,f
  4797  0615  2E5D               	goto	l4603
  4798  0616                     l4581:	
  4799  0616  1283               	bcf	3,5	;RP0=0, select bank0
  4800  0617  1303               	bcf	3,6	;RP1=0, select bank0
  4801  0618  1003               	clrc
  4802  0619  0D56               	rlf	CheckOnceResult@68,w
  4803  061A  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4804  061B  0084               	movwf	4
  4805  061C  1383               	bcf	3,7	;select IRP bank1
  4806  061D  0800               	movf	0,w
  4807  061E  00CA               	movwf	??_CheckOnceResult
  4808  061F  0A84               	incf	4,f
  4809  0620  0800               	movf	0,w
  4810  0621  00CB               	movwf	??_CheckOnceResult+1
  4811  0622  084A               	movf	??_CheckOnceResult,w
  4812  0623  3E01               	addlw	1
  4813  0624  00CC               	movwf	??_CheckOnceResult+2
  4814  0625  084B               	movf	??_CheckOnceResult+1,w
  4815  0626  1803               	skipnc
  4816  0627  3E01               	addlw	1
  4817  0628  00CD               	movwf	??_CheckOnceResult+3
  4818  0629  0852               	movf	CheckOnceResult@72+1,w
  4819  062A  024D               	subwf	??_CheckOnceResult+3,w
  4820  062B  1D03               	skipz
  4821  062C  2E2F               	goto	u4775
  4822  062D  0851               	movf	CheckOnceResult@72,w
  4823  062E  024C               	subwf	??_CheckOnceResult+2,w
  4824  062F                     u4775:	
  4825  062F  1C03               	btfss	3,0
  4826  0630  2E5D               	goto	l4603
  4827  0631  1003               	clrc
  4828  0632  0D56               	rlf	CheckOnceResult@68,w
  4829  0633  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4830  0634  0084               	movwf	4
  4831  0635  0800               	movf	0,w
  4832  0636  2787  118A         	fcall	PL4	;call to abstracted procedure
  4833  0638  1C03               	skipc
  4834  0639  2E43               	goto	l4591
  4835  063A  1003               	clrc
  4836  063B  0D56               	rlf	CheckOnceResult@68,w
  4837  063C  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4838  063D  0084               	movwf	4
  4839  063E  0800               	movf	0,w
  4840  063F  2787  118A         	fcall	PL4	;call to abstracted procedure
  4841  0641  1803               	skipnc
  4842  0642  2E4F               	goto	l4595
  4843  0643                     l4591:	
  4844  0643  0856               	movf	CheckOnceResult@68,w
  4845  0644  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4846  0645  0084               	movwf	4
  4847  0646  3009               	movlw	9
  4848  0647  0A80               	incf	0,f
  4849  0648  0200               	subwf	0,w
  4850  0649  1C03               	skipc
  4851  064A  2E53               	goto	l4599
  4852  064B  0856               	movf	CheckOnceResult@68,w
  4853  064C  2675  118A         	fcall	_KeyClearOne
  4854  064E  2E5D               	goto	l4603
  4855  064F                     l4595:	
  4856  064F  0856               	movf	CheckOnceResult@68,w
  4857  0650  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4858  0651  0084               	movwf	4
  4859  0652  0180               	clrf	0
  4860  0653                     l4599:	
  4861  0653  0821               	movf	_KeyData+1,w	;volatile
  4862  0654  0420               	iorwf	_KeyData,w	;volatile
  4863  0655  1D03               	btfss	3,2
  4864  0656  2E5D               	goto	l4603
  4865  0657                     l4601:	
  4866  0657  0850               	movf	CheckOnceResult@70,w
  4867  0658  00F2               	movwf	KeyHave@59
  4868  0659  01F3               	clrf	KeyHave@59+1
  4869  065A  0856               	movf	CheckOnceResult@68,w
  4870  065B  268A  118A         	fcall	_KeyHave
  4871  065D                     l4603:	
  4872  065D  3003               	movlw	3
  4873  065E  1283               	bcf	3,5	;RP0=0, select bank0
  4874  065F  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0660  0AD6               	incf	CheckOnceResult@68,f
  4876  0661  0256               	subwf	CheckOnceResult@68,w
  4877  0662  1803               	btfsc	3,0
  4878  0663  0008               	return
  4879  0664  2D85               	goto	l4539
  4880  0665                     __end_of_CheckOnceResult:	
  4881  0665                     __ptext34:	
  4882 ;; *************** function _KeyIsIn *****************
  4883 ;; Defined at:
  4884 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  45              1    wreg     unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  45              1    3[COMMON] unsigned char 
  4889 ;;  46              1    2[COMMON] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      unsigned char 
  4892 ;; Registers used:
  4893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4899 ;;      Params:         0       0       0       0
  4900 ;;      Locals:         2       0       0       0
  4901 ;;      Temps:          0       0       0       0
  4902 ;;      Totals:         2       0       0       0
  4903 ;;Total ram usage:        2 bytes
  4904 ;; Hardware stack levels used:    2
  4905 ;; Hardware stack levels required when called:    1
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_KeyClearIn
  4910 ;;		_CheckOnceResult
  4911 ;;		_CheckKeyOldValue
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           
  4916                           ;psect for function _KeyIsIn
  4917  0665                     _KeyIsIn:	
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4921                           ;KeyIsIn@45 stored from wreg
  4922  0665  00F3               	movwf	KeyIsIn@45
  4923  0666  3907               	andlw	7
  4924  0667  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4925  0668  0084               	movwf	4
  4926  0669  158A  2000  118A   	fcall	stringdir
  4927  066C  00F2               	movwf	KeyIsIn@46
  4928  066D  1DF3               	btfss	KeyIsIn@45,3
  4929  066E  2E71               	goto	l2931
  4930  066F  087A               	movf	_KeyFlag+1,w	;volatile
  4931  0670  2E72               	goto	L14
  4932  0671                     l2931:	
  4933  0671  0879               	movf	_KeyFlag,w	;volatile
  4934  0672                     L14:	
  4935  0672  05F2               	andwf	KeyIsIn@46,f
  4936  0673  0872               	movf	KeyIsIn@46,w
  4937  0674  0008               	return
  4938  0675                     __end_of_KeyIsIn:	
  4939  0675                     __ptext32:	
  4940 ;; *************** function _KeyClearOne *****************
  4941 ;; Defined at:
  4942 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  49              1    wreg     unsigned char 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  49              1    2[COMMON] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  1    wreg      void 
  4949 ;; Registers used:
  4950 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4956 ;;      Params:         0       0       0       0
  4957 ;;      Locals:         1       0       0       0
  4958 ;;      Temps:          0       0       0       0
  4959 ;;      Totals:         1       0       0       0
  4960 ;;Total ram usage:        1 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    1
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_KeyClearIn
  4967 ;;		_KeyStopClear
  4968 ;;		_CheckOnceResult
  4969 ;;		_SystemEnterSleep
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _KeyClearOne
  4975  0675                     _KeyClearOne:	
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4979                           ;KeyClearOne@49 stored from wreg
  4980  0675  00F2               	movwf	KeyClearOne@49
  4981  0676  1003               	clrc
  4982  0677  0D72               	rlf	KeyClearOne@49,w
  4983  0678  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4984  0679  0084               	movwf	4
  4985  067A  1383               	bcf	3,7	;select IRP bank1
  4986  067B  27C5  118A         	fcall	PL20	;call to abstracted procedure
  4987  067D  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4988  067E  0084               	movwf	4
  4989  067F  27C5  118A         	fcall	PL20	;call to abstracted procedure
  4990  0681  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4991  0682  0084               	movwf	4
  4992  0683  27C5               	fcall	PL20	;call to abstracted procedure
  4993  0684  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4994  0685  0084               	movwf	4
  4995  0686  0180               	clrf	0
  4996  0687  0A84               	incf	4,f
  4997  0688  0180               	clrf	0	;# 
  4998  0689  0008               	return
  4999  068A                     __end_of_KeyClearOne:	
  5000  068A                     __ptext31:	
  5001 ;; *************** function _KeyHave *****************
  5002 ;; Defined at:
  5003 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  58              1    wreg     unsigned char 
  5006 ;;  59              2    2[COMMON] unsigned int 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  58              1    4[COMMON] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0
  5013 ;; Tracked objects:
  5014 ;;		On entry : B00/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5018 ;;      Params:         2       0       0       0
  5019 ;;      Locals:         1       0       0       0
  5020 ;;      Temps:          0       0       0       0
  5021 ;;      Totals:         3       0       0       0
  5022 ;;Total ram usage:        3 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    1
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		_CheckOnceResult
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _KeyHave
  5034  068A                     _KeyHave:	
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5038                           ;KeyHave@58 stored from wreg
  5039  068A  00F4               	movwf	KeyHave@58
  5040  068B  1283               	bcf	3,5	;RP0=0, select bank0
  5041  068C  1303               	bcf	3,6	;RP1=0, select bank0
  5042  068D  0AB4               	incf	_KeyCounter,f
  5043  068E  01A0               	clrf	_KeyData	;volatile
  5044  068F  01A1               	clrf	_KeyData+1	;volatile
  5045  0690  1DF4               	btfss	KeyHave@58,3
  5046  0691  2E95               	goto	l3085
  5047  0692  0872               	movf	KeyHave@59,w
  5048  0693  00A1               	movwf	_KeyData+1	;volatile
  5049  0694  0008               	return
  5050  0695                     l3085:	
  5051  0695  0872               	movf	KeyHave@59,w
  5052  0696  00A0               	movwf	_KeyData	;volatile
  5053  0697  0008               	return
  5054  0698                     __end_of_KeyHave:	
  5055  0698                     __ptext33:	
  5056 ;; *************** function _CheckKeyOldValue *****************
  5057 ;; Defined at:
  5058 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  80              2    2[BANK0 ] unsigned int 
  5063 ;;  79              2    0[BANK0 ] unsigned int 
  5064 ;;  78              1    4[BANK0 ] unsigned char 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/100
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5074 ;;      Params:         0       0       0       0
  5075 ;;      Locals:         0       5       0       0
  5076 ;;      Temps:          2       0       0       0
  5077 ;;      Totals:         2       5       0       0
  5078 ;;Total ram usage:        7 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    3
  5081 ;; This function calls:
  5082 ;;		_KeyIsIn
  5083 ;; This function is called by:
  5084 ;;		_CheckTouchKey
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _CheckKeyOldValue
  5090  0698                     _CheckKeyOldValue:	
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5094  0698  1283               	bcf	3,5	;RP0=0, select bank0
  5095  0699  3004               	movlw	4
  5096  069A  1303               	bcf	3,6	;RP1=0, select bank0
  5097  069B  01CE               	clrf	CheckKeyOldValue@78
  5098  069C  0AB2               	incf	CheckKeyOldValue@F77,f
  5099  069D  0232               	subwf	CheckKeyOldValue@F77,w
  5100  069E  1C03               	btfss	3,0
  5101  069F  0008               	return
  5102  06A0  01B2               	clrf	CheckKeyOldValue@F77
  5103  06A1                     l3571:	
  5104  06A1  1003               	clrc
  5105  06A2  0D4E               	rlf	CheckKeyOldValue@78,w
  5106  06A3  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5107  06A4  0084               	movwf	4
  5108  06A5  1383               	bcf	3,7	;select IRP bank1
  5109  06A6  0800               	movf	0,w
  5110  06A7  00CA               	movwf	CheckKeyOldValue@79
  5111  06A8  0A84               	incf	4,f
  5112  06A9  0800               	movf	0,w
  5113  06AA  00CB               	movwf	CheckKeyOldValue@79+1
  5114  06AB  084E               	movf	CheckKeyOldValue@78,w
  5115  06AC  2665  118A         	fcall	_KeyIsIn
  5116  06AE  3A00               	xorlw	0
  5117  06AF  1D03               	skipz
  5118  06B0  2EE7               	goto	l1309
  5119  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  5120  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  5121  06B3  1003               	clrc
  5122  06B4  0D4E               	rlf	CheckKeyOldValue@78,w
  5123  06B5  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5124  06B6  0084               	movwf	4
  5125  06B7  1383               	bcf	3,7	;select IRP bank1
  5126  06B8  2779  118A         	fcall	PL2	;call to abstracted procedure
  5127  06BA  1903               	skipnz
  5128  06BB  024C               	subwf	CheckKeyOldValue@80,w
  5129  06BC  1C03               	skipc
  5130  06BD  2EC4               	goto	L11
  5131  06BE  0F4C               	incfsz	CheckKeyOldValue@80,w
  5132  06BF  2EE7               	goto	l1309
  5133  06C0  0A4D               	incf	CheckKeyOldValue@80+1,w
  5134  06C1  1D03               	btfss	3,2
  5135  06C2  2EE7               	goto	l1309
  5136  06C3  1003               	clrc
  5137  06C4                     L11:	
  5138  06C4  0D4E               	rlf	CheckKeyOldValue@78,w
  5139  06C5  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5140  06C6  0084               	movwf	4
  5141  06C7  2779  118A         	fcall	PL2	;call to abstracted procedure
  5142  06C9  1903               	skipnz
  5143  06CA  024C               	subwf	CheckKeyOldValue@80,w
  5144  06CB  1C03               	skipc
  5145  06CC  2ED3               	goto	L12
  5146  06CD  0F4C               	incfsz	CheckKeyOldValue@80,w
  5147  06CE  2EE7               	goto	l1309
  5148  06CF  0A4D               	incf	CheckKeyOldValue@80+1,w
  5149  06D0  1D03               	btfss	3,2
  5150  06D1  2EE7               	goto	l1309
  5151  06D2  1003               	clrc
  5152  06D3                     L12:	
  5153  06D3  0D4E               	rlf	CheckKeyOldValue@78,w
  5154  06D4  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5155  06D5  0084               	movwf	4
  5156  06D6  2779  118A         	fcall	PL2	;call to abstracted procedure
  5157  06D8  1903               	skipnz
  5158  06D9  024C               	subwf	CheckKeyOldValue@80,w
  5159  06DA  1C03               	skipc
  5160  06DB  2EE2               	goto	L13
  5161  06DC  0F4C               	incfsz	CheckKeyOldValue@80,w
  5162  06DD  2EE7               	goto	l1309
  5163  06DE  0A4D               	incf	CheckKeyOldValue@80+1,w
  5164  06DF  1D03               	btfss	3,2
  5165  06E0  2EE7               	goto	l1309
  5166  06E1  1003               	clrc
  5167  06E2                     L13:	
  5168  06E2  0D4E               	rlf	CheckKeyOldValue@78,w
  5169  06E3  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5170  06E4  0084               	movwf	4
  5171  06E5  27D1  118A         	fcall	PL34	;call to abstracted procedure
  5172  06E7                     l1309:	
  5173  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  5174  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  5175  06E9  1003               	clrc
  5176  06EA  0D4E               	rlf	CheckKeyOldValue@78,w
  5177  06EB  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5178  06EC  0084               	movwf	4
  5179  06ED  1383               	bcf	3,7	;select IRP bank1
  5180  06EE  27BD  118A         	fcall	PL18	;call to abstracted procedure
  5181  06F0  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5182  06F1  27AB  118A         	fcall	PL12	;call to abstracted procedure
  5183  06F3  27BD  118A         	fcall	PL18	;call to abstracted procedure
  5184  06F5  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5185  06F6  27AB  118A         	fcall	PL12	;call to abstracted procedure
  5186  06F8  27D1  118A         	fcall	PL34	;call to abstracted procedure
  5187  06FA  3003               	movlw	3
  5188  06FB  0ACE               	incf	CheckKeyOldValue@78,f
  5189  06FC  024E               	subwf	CheckKeyOldValue@78,w
  5190  06FD  1803               	btfsc	3,0
  5191  06FE  0008               	return
  5192  06FF  2EA1               	goto	l3571
  5193  0700                     __end_of_CheckKeyOldValue:	
  5194  0700                     __ptext26:	
  5195 ;; *************** function _KeyStopClear *****************
  5196 ;; Defined at:
  5197 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  53              1    3[COMMON] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/100
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5211 ;;      Params:         0       0       0       0
  5212 ;;      Locals:         1       0       0       0
  5213 ;;      Temps:          0       0       0       0
  5214 ;;      Totals:         1       0       0       0
  5215 ;;Total ram usage:        1 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    2
  5218 ;; This function calls:
  5219 ;;		_KeyClearOne
  5220 ;; This function is called by:
  5221 ;;		_CheckTouchKey
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _KeyStopClear
  5227  0700                     _KeyStopClear:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5231  0700  01F9               	clrf	_KeyFlag	;volatile
  5232  0701  01FA               	clrf	_KeyFlag+1	;volatile
  5233  0702  01F3               	clrf	KeyStopClear@53
  5234  0703                     l3483:	
  5235  0703  1003               	clrc
  5236  0704  0D73               	rlf	KeyStopClear@53,w
  5237  0705  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5238  0706  0084               	movwf	4
  5239  0707  1383               	bcf	3,7	;select IRP bank1
  5240  0708  0180               	clrf	0
  5241  0709  0A84               	incf	4,f
  5242  070A  0180               	clrf	0
  5243  070B  0873               	movf	KeyStopClear@53,w
  5244  070C  2675  118A         	fcall	_KeyClearOne
  5245  070E  3003               	movlw	3
  5246  070F  0AF3               	incf	KeyStopClear@53,f
  5247  0710  0273               	subwf	KeyStopClear@53,w
  5248  0711  1803               	btfsc	3,0
  5249  0712  0008               	return
  5250  0713  2F03               	goto	l3483
  5251  0714                     __end_of_KeyStopClear:	
  5252  0714                     __ptext24:	
  5253 ;; *************** function _TurnKeyFlags *****************
  5254 ;; Defined at:
  5255 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      void 
  5262 ;; Registers used:
  5263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/100
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5269 ;;      Params:         0       0       0       0
  5270 ;;      Locals:         0       0       0       0
  5271 ;;      Temps:          0       0       0       0
  5272 ;;      Totals:         0       0       0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    4
  5276 ;; This function calls:
  5277 ;;		_KeyClearIn
  5278 ;; This function is called by:
  5279 ;;		_CheckTouchKey
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _TurnKeyFlags
  5285  0714                     _TurnKeyFlags:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5289  0714  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0715  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0716  0821               	movf	_KeyData+1,w	;volatile
  5292  0717  0420               	iorwf	_KeyData,w	;volatile
  5293  0718  1903               	btfsc	3,2
  5294  0719  2F38               	goto	l3631
  5295  071A  01B0               	clrf	TurnKeyFlags@F84
  5296  071B  0820               	movf	_KeyData,w	;volatile
  5297  071C  0622               	xorwf	_KeyOldData,w	;volatile
  5298  071D  1D03               	skipz
  5299  071E  2F31               	goto	l1327
  5300  071F  0821               	movf	_KeyData+1,w	;volatile
  5301  0720  0623               	xorwf	_KeyOldData+1,w	;volatile
  5302  0721  1D03               	skipz
  5303  0722  2F31               	goto	l1327
  5304  0723  3002               	movlw	2
  5305  0724  0AB1               	incf	TurnKeyFlags@F83,f
  5306  0725  0231               	subwf	TurnKeyFlags@F83,w
  5307  0726  1C03               	skipc
  5308  0727  0008               	return
  5309  0728  01B1               	clrf	TurnKeyFlags@F83
  5310  0729  0820               	movf	_KeyData,w	;volatile
  5311  072A  00F9               	movwf	_KeyFlag	;volatile
  5312  072B  0821               	movf	_KeyData+1,w	;volatile
  5313  072C  00FA               	movwf	_KeyFlag+1	;volatile
  5314  072D  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5315  072E  0008               	return
  5316  072F  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5317  0730  2F5B               	ljmp	l3059
  5318  0731                     l1327:	
  5319  0731  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5320  0732  0820               	movf	_KeyData,w	;volatile
  5321  0733  00A2               	movwf	_KeyOldData	;volatile
  5322  0734  0821               	movf	_KeyData+1,w	;volatile
  5323  0735  00A3               	movwf	_KeyOldData+1	;volatile
  5324  0736  01B1               	clrf	TurnKeyFlags@F83
  5325  0737  0008               	return
  5326  0738                     l3631:	
  5327  0738  01B1               	clrf	TurnKeyFlags@F83
  5328  0739  01A2               	clrf	_KeyOldData	;volatile
  5329  073A  01A3               	clrf	_KeyOldData+1	;volatile
  5330  073B  3002               	movlw	2
  5331  073C  0AB0               	incf	TurnKeyFlags@F84,f
  5332  073D  0230               	subwf	TurnKeyFlags@F84,w
  5333  073E  1C03               	skipc
  5334  073F  0008               	return
  5335  0740  01B0               	clrf	TurnKeyFlags@F84
  5336  0741  01F9               	clrf	_KeyFlag	;volatile
  5337  0742  01FA               	clrf	_KeyFlag+1	;volatile
  5338  0743  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5339  0744  0008               	return
  5340  0745                     __end_of_TurnKeyFlags:	
  5341  0745                     __ptext29:	
  5342 ;; *************** function _CheckValidTime *****************
  5343 ;; Defined at:
  5344 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		wreg, status,2, status,0
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5358 ;;      Params:         0       0       0       0
  5359 ;;      Locals:         0       0       0       0
  5360 ;;      Temps:          0       0       0       0
  5361 ;;      Totals:         0       0       0       0
  5362 ;;Total ram usage:        0 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    1
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_CheckTouchKey
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _CheckValidTime
  5374  0745                     _CheckValidTime:	
  5375  0745                     l3641:	
  5376                           ;incstack = 0
  5377                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5378                           
  5379  0745  087A               	movf	_KeyFlag+1,w	;volatile
  5380  0746  0479               	iorwf	_KeyFlag,w	;volatile
  5381  0747  1903               	btfsc	3,2
  5382  0748  2F56               	goto	l3647
  5383  0749  1683               	bsf	3,5	;RP0=1, select bank1
  5384  074A  1303               	bcf	3,6	;RP1=0, select bank1
  5385  074B  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5386  074C  1903               	skipnz
  5387  074D  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5388  074E  303A               	movlw	58
  5389  074F  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5390  0750  3098               	movlw	152
  5391  0751  1903               	skipnz
  5392  0752  0241               	subwf	CheckValidTime@F87^(0+128),w
  5393  0753  1C03               	skipc
  5394  0754  0008               	return
  5395  0755  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5396  0756                     l3647:	
  5397  0756  1683               	bsf	3,5	;RP0=1, select bank1
  5398  0757  1303               	bcf	3,6	;RP1=0, select bank1
  5399  0758  01C1               	clrf	CheckValidTime@F87^(0+128)
  5400  0759  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5401  075A  0008               	return
  5402  075B                     __end_of_CheckValidTime:	
  5403  075B                     __ptext25:	
  5404 ;; *************** function _KeyClearIn *****************
  5405 ;; Defined at:
  5406 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  51              1    4[COMMON] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 300/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5420 ;;      Params:         0       0       0       0
  5421 ;;      Locals:         1       0       0       0
  5422 ;;      Temps:          0       0       0       0
  5423 ;;      Totals:         1       0       0       0
  5424 ;;Total ram usage:        1 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    3
  5427 ;; This function calls:
  5428 ;;		_KeyClearOne
  5429 ;;		_KeyIsIn
  5430 ;; This function is called by:
  5431 ;;		_TurnKeyFlags
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _KeyClearIn
  5437  075B                     _KeyClearIn:	
  5438  075B                     l3059:	
  5439                           ;incstack = 0
  5440                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5441                           
  5442  075B  01F4               	clrf	KeyClearIn@51
  5443  075C                     l3065:	
  5444  075C  0874               	movf	KeyClearIn@51,w
  5445  075D  2665  118A         	fcall	_KeyIsIn
  5446  075F  3A00               	xorlw	0
  5447  0760  1D03               	skipz
  5448  0761  2F65               	goto	l3069
  5449  0762  0874               	movf	KeyClearIn@51,w
  5450  0763  2675  118A         	fcall	_KeyClearOne
  5451  0765                     l3069:	
  5452  0765  3003               	movlw	3
  5453  0766  0AF4               	incf	KeyClearIn@51,f
  5454  0767  0274               	subwf	KeyClearIn@51,w
  5455  0768  1803               	btfsc	3,0
  5456  0769  0008               	return
  5457  076A  2F5C               	goto	l3065
  5458  076B                     __end_of_KeyClearIn:	
  5459  076B                     __ptext20:	
  5460 ;; *************** function _Refurbish_Sfr *****************
  5461 ;; Defined at:
  5462 ;;		line 100 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0
  5471 ;; Tracked objects:
  5472 ;;		On entry : 200/0
  5473 ;;		On exit  : 300/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5476 ;;      Params:         0       0       0       0
  5477 ;;      Locals:         0       0       0       0
  5478 ;;      Temps:          0       0       0       0
  5479 ;;      Totals:         0       0       0       0
  5480 ;;Total ram usage:        0 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    1
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_WorkSleep
  5487 ;;		_main
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           
  5492                           ;psect for function _Refurbish_Sfr
  5493  076B                     _Refurbish_Sfr:	
  5494                           
  5495                           ;main.c: 103: PIE1 = 2;
  5496                           
  5497                           ;incstack = 0
  5498                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5499  076B  3002               	movlw	2
  5500  076C  1283               	bcf	3,5	;RP0=0, select bank0
  5501  076D  008E               	movwf	14	;volatile
  5502                           
  5503                           ;main.c: 104: PR2 = 250;
  5504  076E  30FA               	movlw	250
  5505  076F  0091               	movwf	17	;volatile
  5506                           
  5507                           ;main.c: 105: INTCON = 0XC0;
  5508  0770  30C0               	movlw	192
  5509  0771  008B               	movwf	11	;volatile
  5510                           
  5511                           ;main.c: 106: if (4 != T2CON)
  5512  0772  3004               	movlw	4
  5513  0773  0613               	xorwf	19,w	;volatile
  5514  0774  1903               	btfsc	3,2
  5515  0775  0008               	return
  5516                           
  5517                           ;main.c: 107: T2CON = 4;
  5518  0776  3004               	movlw	4
  5519  0777  0093               	movwf	19	;volatile
  5520  0778  0008               	return
  5521  0779                     __end_of_Refurbish_Sfr:	
  5522  0779                     PL2:	
  5523  0779  0800               	movf	0,w
  5524  077A  00CC               	movwf	CheckKeyOldValue@80
  5525  077B  0A84               	incf	4,f
  5526  077C  0800               	movf	0,w
  5527  077D  00CD               	movwf	CheckKeyOldValue@80+1
  5528  077E  084A               	movf	CheckKeyOldValue@79,w
  5529  077F  02CC               	subwf	CheckKeyOldValue@80,f
  5530  0780  084B               	movf	CheckKeyOldValue@79+1,w
  5531  0781  1C03               	skipc
  5532  0782  03CD               	decf	CheckKeyOldValue@80+1,f
  5533  0783  02CD               	subwf	CheckKeyOldValue@80+1,f
  5534  0784  3000               	movlw	0
  5535  0785  024D               	subwf	CheckKeyOldValue@80+1,w
  5536  0786  3402               	retlw	2
  5537  0787                     __end_ofPL2:	
  5538  0787                     PL4:	
  5539  0787  00CA               	movwf	??_CheckOnceResult
  5540  0788  0A84               	incf	4,f
  5541  0789  0800               	movf	0,w
  5542  078A  00CB               	movwf	??_CheckOnceResult+1
  5543  078B  0853               	movf	CheckOnceResult@69,w
  5544  078C  074A               	addwf	??_CheckOnceResult,w
  5545  078D  00CC               	movwf	??_CheckOnceResult+2
  5546  078E  084B               	movf	??_CheckOnceResult+1,w
  5547  078F  1803               	skipnc
  5548  0790  0A4B               	incf	??_CheckOnceResult+1,w
  5549  0791  00CD               	movwf	??_CheckOnceResult+3
  5550  0792  0855               	movf	CheckOnceResult@71+1,w
  5551  0793  024D               	subwf	??_CheckOnceResult+3,w
  5552  0794  1D03               	skipz
  5553  0795  0008               	return
  5554  0796  0854               	movf	CheckOnceResult@71,w
  5555  0797  024C               	subwf	??_CheckOnceResult+2,w
  5556  0798  0008               	return
  5557  0799                     __end_ofPL4:	
  5558  0799                     PL8:	
  5559  0799  0084               	movwf	4
  5560  079A  0800               	movf	0,w
  5561  079B  00CA               	movwf	??_CheckOnceResult
  5562  079C  0A84               	incf	4,f
  5563  079D  0800               	movf	0,w
  5564  079E  00CB               	movwf	??_CheckOnceResult+1
  5565  079F  0008               	return
  5566  07A0                     __end_ofPL8:	
  5567  07A0                     PL10:	
  5568  07A0  0084               	movwf	4
  5569  07A1  084A               	movf	??_SystemEnterSleep,w
  5570  07A2  0080               	movwf	0
  5571  07A3  0A84               	incf	4,f
  5572  07A4  084B               	movf	??_SystemEnterSleep+1,w
  5573  07A5  0080               	movwf	0
  5574  07A6  1003               	clrc
  5575  07A7  0D52               	rlf	SystemEnterSleep@91,w
  5576  07A8  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5577  07A9  0084               	movwf	4
  5578  07AA  0008               	return
  5579  07AB                     __end_ofPL10:	
  5580  07AB                     PL12:	
  5581  07AB  0084               	movwf	4
  5582  07AC  0874               	movf	??_CheckKeyOldValue,w
  5583  07AD  0080               	movwf	0
  5584  07AE  0A84               	incf	4,f
  5585  07AF  0875               	movf	??_CheckKeyOldValue+1,w
  5586  07B0  0080               	movwf	0
  5587  07B1  1003               	clrc
  5588  07B2  0D4E               	rlf	CheckKeyOldValue@78,w
  5589  07B3  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5590  07B4  0084               	movwf	4
  5591  07B5  0008               	return
  5592  07B6                     __end_ofPL12:	
  5593  07B6                     PL14:	
  5594  07B6  0084               	movwf	4
  5595  07B7  0800               	movf	0,w
  5596  07B8  00CA               	movwf	??_SystemEnterSleep
  5597  07B9  0A84               	incf	4,f
  5598  07BA  0800               	movf	0,w
  5599  07BB  00CB               	movwf	??_SystemEnterSleep+1
  5600  07BC  0008               	return
  5601  07BD                     __end_ofPL14:	
  5602  07BD                     PL18:	
  5603  07BD  0800               	movf	0,w
  5604  07BE  00F4               	movwf	??_CheckKeyOldValue
  5605  07BF  0A84               	incf	4,f
  5606  07C0  0800               	movf	0,w
  5607  07C1  00F5               	movwf	??_CheckKeyOldValue+1
  5608  07C2  1003               	clrc
  5609  07C3  0D4E               	rlf	CheckKeyOldValue@78,w
  5610  07C4  0008               	return
  5611  07C5                     __end_ofPL18:	
  5612  07C5                     PL20:	
  5613  07C5  0180               	clrf	0
  5614  07C6  0A84               	incf	4,f
  5615  07C7  0180               	clrf	0
  5616  07C8  1003               	clrc
  5617  07C9  0D72               	rlf	KeyClearOne@49,w
  5618  07CA  0008               	return
  5619  07CB                     __end_ofPL20:	
  5620  07CB                     PL26:	
  5621  07CB  3041               	movlw	65
  5622  07CC  1683               	bsf	3,5	;RP0=1, select bank1
  5623  07CD  0095               	movwf	21	;volatile
  5624  07CE  1415               	bsf	21,0	;volatile
  5625  07CF  0196               	clrf	22	;volatile
  5626  07D0  0008               	return
  5627  07D1                     __end_ofPL26:	
  5628  07D1                     PL34:	
  5629  07D1  084A               	movf	CheckKeyOldValue@79,w
  5630  07D2  0080               	movwf	0
  5631  07D3  0A84               	incf	4,f
  5632  07D4  084B               	movf	CheckKeyOldValue@79+1,w
  5633  07D5  0080               	movwf	0
  5634  07D6  0008               	return
  5635  07D7                     __end_ofPL34:	
  5636  07D7                     PL36:	
  5637  07D7  01D2               	clrf	SystemEnterSleep@91
  5638  07D8  01D0               	clrf	SystemEnterSleep@92
  5639  07D9  0AD0               	incf	SystemEnterSleep@92,f
  5640  07DA  01D1               	clrf	SystemEnterSleep@92+1
  5641  07DB  0008               	return
  5642  07DC                     __end_ofPL36:	
  5643  07DC                     PL38:	
  5644  07DC  0DD0               	rlf	SystemEnterSleep@92,f
  5645  07DD  0DD1               	rlf	SystemEnterSleep@92+1,f
  5646  07DE  0AD2               	incf	SystemEnterSleep@91,f
  5647  07DF  0252               	subwf	SystemEnterSleep@91,w
  5648  07E0  0008               	return
  5649  07E1                     __end_ofPL38:	
  5650                           
  5651                           	psect	text35
  5652  07E1                     __ptext35:	
  5653 ;; *************** function _Isr_Timer *****************
  5654 ;; Defined at:
  5655 ;;		line 224 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;		None
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 300/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5669 ;;      Params:         0       0       0       0
  5670 ;;      Locals:         0       0       0       0
  5671 ;;      Temps:          2       0       0       0
  5672 ;;      Totals:         2       0       0       0
  5673 ;;Total ram usage:        2 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		Interrupt level 1
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           
  5683                           ;psect for function _Isr_Timer
  5684  07E1                     _Isr_Timer:	
  5685                           
  5686                           ;main.c: 226: if(TMR2IF)
  5687  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  5688  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  5689  07E3  1C8D               	btfss	13,1	;volatile
  5690  07E4  2FF4               	goto	i1l4011
  5691                           
  5692                           ;main.c: 227: {
  5693                           ;main.c: 228: TMR2IF = 0;
  5694  07E5  108D               	bcf	13,1	;volatile
  5695                           
  5696                           ;main.c: 229: if(++MainTime >= 32)
  5697  07E6  3020               	movlw	32
  5698  07E7  0AC7               	incf	_MainTime,f	;volatile
  5699  07E8  0247               	subwf	_MainTime,w	;volatile
  5700  07E9  1C03               	skipc
  5701  07EA  2FF5               	goto	i1l983
  5702                           
  5703                           ;main.c: 230: {
  5704                           ;main.c: 231: MainTime = 0;
  5705  07EB  01C7               	clrf	_MainTime	;volatile
  5706                           
  5707                           ;main.c: 232: B_MainLoop = 1;
  5708  07EC  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5709                           
  5710                           ;main.c: 233: if(++count1s >= 250)
  5711  07ED  30FA               	movlw	250
  5712  07EE  0AC6               	incf	_count1s,f
  5713  07EF  0246               	subwf	_count1s,w
  5714  07F0  1C03               	skipc
  5715  07F1  2FF5               	goto	i1l983
  5716                           
  5717                           ;main.c: 234: {
  5718                           ;main.c: 235: count1s = 0;
  5719  07F2  01C6               	clrf	_count1s
  5720  07F3  2FF5               	goto	i1l983
  5721  07F4                     i1l4011:	
  5722                           
  5723                           ;main.c: 239: else
  5724                           ;main.c: 240: {
  5725                           ;main.c: 241: PIR1 = 0;
  5726  07F4  018D               	clrf	13	;volatile
  5727  07F5                     i1l983:	
  5728  07F5  0871               	movf	??_Isr_Timer+1,w
  5729  07F6  008A               	movwf	10
  5730  07F7  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5731  07F8  0083               	movwf	3
  5732  07F9  0EFE               	swapf	126,f
  5733  07FA  0E7E               	swapf	126,w
  5734  07FB  0009               	retfie
  5735  07FC                     __end_of_Isr_Timer:	
  5736  007E                     btemp	set	126	;btemp
  5737  007E                     wtemp0	set	126
  5738                           
  5739                           	psect	intentry
  5740  0004                     __pintentry:	
  5741                           ;incstack = 0
  5742                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5743                           
  5744  0004                     interrupt_function:	
  5745  007E                     saved_w	set	btemp
  5746  0004  00FE               	movwf	btemp
  5747  0005  0E03               	swapf	3,w
  5748  0006  00F0               	movwf	??_Isr_Timer
  5749  0007  080A               	movf	10,w
  5750  0008  00F1               	movwf	??_Isr_Timer+1
  5751  0009  118A  2FE1         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        3
    BSS         88
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      49
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _workCtr->_bujinCtr
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11912
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7909
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1289
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             5     5      0      68
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      31       6       61.3%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8C       9        0.0%
ABS                  0      0      8C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 28 13:44:09 2025

                        pc 0002                         PL2 0779                         PL4 0787  
                       PL6 03DA                         PL8 0799              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 07A0                        PL20 07C5                        PL12 07AB  
                      PL30 0FF5                        PL22 0FE9                        PL14 07B6  
                      PL40 03F9                        PL32 0FFB                        PL24 03F2  
                      PL16 03E9                        PL42 0F38                        PL34 07D1  
                      PL26 07CB                        PL18 07BD                        PL44 03FE  
                      PL36 07D7                        PL28 0FEF                        PL46 0403  
                      PL38 07DC                        l971 0F2A                        l999 01EB  
                      _RA5 0435                        _RA6 0436                        _RA7 0437  
                      _RB6 0036                        _RB7 0037                        _PR2 0011  
      __size_of_ADC_Sample 00D1                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070             _bujinStartFlag 0038   __end_of_Table_KeyChannel 0817  
                     S4891 0817                       S4893 0827         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 0059               ___ftdiv@sign 005E                       l1005 0227  
                     l1110 0FBB                       l1022 0351                       l1111 0FBE  
                     l1112 0FC1                       l1113 0FC8                       l1105 0FAB  
                     l1009 026D                       l1034 0394                       l1107 0FAE  
                     l1108 0FB1                       l1028 0374                       l1109 0FB4  
                     l1061 0293                       l1091 0F66                       l1309 06E7  
                     l3101 051A                       l1093 0F5F                       l1327 0731  
                     l1346 0461                       l1099 0F85                       l1268 0548  
                     l1533 0181                       l1358 0480                       l3127 0556  
                     l4103 01C9                       l3129 0566                       l3065 075C  
                     l1545 01A5                       l4113 01D4                       l4105 01CB  
                     l3059 075B                       l4203 0317                       l1388 0301  
                     l3085 0695                       l3069 0765                       l4221 0195  
                     l4141 021B                       l4303 04B4                       l4215 0185  
                     l4143 0223                       l4119 01D5                       l3097 0514  
                     l4321 04E8                       l4225 01A3                       l4217 0188  
                     l4153 0271                       l4137 0210                       l4129 01F5  
                     l4227 019A                       l4219 018D                       l1587 00CA  
                     l4411 02D5                       l4243 03B1                       l4251 03C4  
                     l4317 04E1                       l4501 0F8C                       l4181 03C9  
                     l4421 02EC                       l4165 0E44                       l3631 0738  
                     l4503 0F8D                       l4431 02F7                       l4175 0E52  
                     l4601 0657                       l3641 0745                       l4337 0509  
                     l4521 0FD7                       l4425 02F2                       l4361 0371  
                     l4353 0353                       l2931 0671                       l3571 06A1  
                     l4603 065D                       l3483 0703                       l3811 0EE2  
                     l3803 0ED4                       l4291 04AD                       l4507 0F9E  
                     l4523 0FE3                       l4419 02EA                       l4371 0391  
                     l4347 034B                       l3813 0EE4                       l4517 0FCB  
                     l4429 02F6                       l4373 0397                       l4365 0376  
                     l4349 034E                       l4461 0E42                       l4453 0E36  
                     l3647 0756                       l3807 0EDB                       l4631 00DD  
                     l4359 036E                       l4463 0E43                       l4455 0E37  
                     l2945 0570                       l4801 0475                       l3833 0F03  
                     l4609 00BC                       l4481 0F4F                       l4465 0F3D  
                     l4571 060C                       l4539 0585                       l2947 0571  
                     l4803 0479                       l3835 0F05                       l4723 044F  
                     l3915 0E16                       l4395 029C                       l4557 05DE  
                     l4581 0616                       l3837 0F08                       l3917 0E18  
                     l4741 005F                       l4591 0643                       l3783 0EB7  
                     l3791 0EC3                       l3855 0F33                       l4647 0119  
                     l4487 0F55                       l4399 02A2                       l4751 007A  
                     l4577 0614                       l4809 047F                       l4681 0160  
                     l4665 013C                       l4649 011E                       l4761 0099  
                     l4753 007D                       l4817 0E60                       l4595 064F  
                     l3779 0EB2                       l4675 0148                       l4771 00A6  
                     l4763 009C                       l3789 0EC1                       l4677 0152  
                     l4669 0144                       l4599 0653                       l4793 0470  
                     _ADON 04A8                       _CHS4 04B6                       u4015 027A  
                     _PIE1 000E                       _PIE2 0110                       u4225 04DD  
                     u4155 03B7                       u5207 01C5                       _RAIF 006B  
                     u4445 02C6                       _INTF 0059                       _RBIE 005B  
                     _RBIF 0058                       u4705 0592                       u4725 05CF  
                     u4735 05E4                       u4655 0F70                       u4745 05F0  
                     u4665 0F83                       u3945 0216                       _PIR1 000D  
                     _PIR2 010F                       u3955 0221                       u4685 0F9A  
                     u4775 062F                       u4855 00EB                       u4695 0FA8  
                     u3995 0262                       u4885 0121                       _TMR0 0081  
                     _WPUB 0008                       _main 0E59               ___ftpack@arg 0072  
             ___ftpack@exp 0075                       btemp 007E              ?_KeyStopClear 0070  
                     start 000B               _TurnKeyFlags 0714            __end_of_KeyIsIn 0675  
          __end_of_KeyHave 0698               ___fttol@exp1 006B              ??_Init_System 0072  
             ___fttol@lval 0067            TurnKeyFlags@F83 0031            TurnKeyFlags@F84 0030  
                    ?_main 0070            __end_of___ftdiv 0110            __end_of___fttol 0169  
                    _T2CON 0013                      _IOCB5 004D   __end_of_SystemEnterSleep 0510  
          __end_of___lwmod 03C9                      i1l983 07F5                      _PORTA 0086  
                    _PORTB 0006                      _PORTC 0106            __end_of_fanInit 03D4  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _TRISC 0105                      _PWMTL 0017            __end_of_fanStop 03DA  
          __end_of_chrgCtr 0E1C        ___lmul@multiplicand 004E        __end_of_KeyClearOne 068A  
               _KeyClearIn 075B             fanCtr@fan_temp 0058              ___ftpack@sign 0076  
           __pbitbssCOMMON 03C0                      pclath 000A            __end_of_pwmInit 0E52  
              _ClearResSum 0570                 _KeyCounter 0034                 _KeyOldData 0022  
          __end_of_pwmStop 0E59             ??_KeyStopClear 0073                      status 0003  
                    wtemp0 007E            __end_of_workCtr 00AE                 _KeyUpShake 00BE  
          __initialization 000D               __end_of_main 0E97                     ??_main 0078  
            ___fttol@sign1 0066        __end_of_Init_System 0425                     _ADCON0 0095  
                   _ADCON1 0096                     _ADRESH 0099                     _ADRESL 0098  
         __end_of___ftpack 01B7                     _GODONE 04A9                     i1l4011 07F4  
                   _LDO_EN 04B2                     _INTCON 000B           __end_of___lwtoft 0179  
       __size_of_KeyServer 00A1                     _OSCCON 0014                     _TMR2IF 0069  
                   _PWMD3L 009C                     _PWMD4L 001B               ??_ADC_Sample 0073  
                   _PWMT4L 001C                     _TRISB5 002D                     _TRISB6 002E  
                ??_KeyIsIn 0072                  ??_KeyHave 0074              ClearResSum@56 0072  
       __size_of_Isr_Timer 001B           __end_of_bujinCtr 0FE9  __size_of_CheckKeyOldValue 0068  
                   ___lmul 02FD                     _b_kclr 03C2                     _b_kerr 03C1  
                   _fanCtr 0288                  ??___ftdiv 0056                  ??___fttol 0063  
                ??___lwmod 0076                  ??_fanInit 0072                  ??_fanStop 0072  
              _KeyClearOne 0675                  ??_chrgCtr 0072                     _result 00C3  
            _Table_KeyFalg 0806              _Table_KeyDown 080E         __end_of_ADC_Sample 0288  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0072  
                ??_pwmStop 0072                ?_KeyClearIn 0070                  ??_workCtr 0077  
          _CheckOnceResult 057F           __end_of_wuhuaCtr 0E44    __end_of__initialization 0022  
       __size_of_WorkSleep 002E          CheckOnceResult@70 0050          CheckOnceResult@71 0054  
        CheckOnceResult@72 0051          CheckOnceResult@73 004E          CheckOnceResult@68 0056  
        CheckOnceResult@69 0053                 ___ftdiv@f1 0053                 ___ftdiv@f2 0050  
               ___ftdiv@f3 005A                 ___fttol@f1 005F             __pcstackCOMMON 0070  
             __pidataBANK0 0000                _Init_System 0407                 __end_ofPL2 0787  
               __end_ofPL4 0799                 __end_ofPL6 03E9                 __end_ofPL8 07A0  
        __end_of_KeyServer 0F38                 ___lwtoft@c 004D       __end_of_KeyStopClear 0714  
        __end_of_Isr_Timer 07FC         __size_of_keyLedCtr 0075                 __pbssBANK0 0020  
               __pbssBANK1 00A0               _chrgFullFlag 0040  __size_of_GetTouchKeyValue 0060  
             _chrgFullTime 003F              _CheckTouchKey 0453                 __pmaintext 0E59  
                  ?___lmul 004A                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0453                  ?___lwtoft 004D          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0665                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 004A                    _B_OnOff 03C5  
                  _PWMD23H 009E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D                  ?_bujinCtr 0070  
     __end_of_Table_KeyCap 0814                 __stringtab 0800               ?_ClearResSum 0070  
                  _KeyData 0020                    _KeyFlag 0079                    _KeyIsIn 0665  
                  _KeyHave 068A             ?_CheckTouchKey 0070            ADC_Sample@adldo 0072  
          ADC_Sample@admax 0053            ADC_Sample@admin 0051            ADC_Sample@adsum 004D  
         _CheckKeyOldValue 0698            __size_of___lmul 0033                    ___ftdiv 00AE  
          __size_of_fanCtr 0075                    ___fttol 0110                    ___lwmod 03A5  
        __end_of_keyLedCtr 03A5                    _b_kover 03C4                    _fanInit 03C9  
                  _fanDuty 0044                    _fanStop 03D4                 ??___ftpack 004A  
                  _chrgCtr 0DFC                    __ptext1 0025                    __ptext2 0E1C  
                  __ptext3 0E52                    __ptext4 0E44                    __ptext5 0330  
                  __ptext6 03A5                    __ptext7 0288                    __ptext8 03D4  
                  __ptext9 03C9                 _lowBatLock 003E                 _lowBatTime 00C7  
                ?_wuhuaCtr 0070                 ??___lwtoft 0077                    _count1s 0046  
               _lowFanTime 00C5                    _pwmInit 0E44                    _pwmStop 0E52  
  __size_of_CheckValidTime 0016                    clrloop0 0DF5                    _workCtr 0025  
               ??_bujinCtr 0072       end_of_initialization 0022              _Refurbish_Sfr 076B  
             _KeyOldValue0 00B2               _KeyOldValue1 00AC               _KeyOldValue2 00A6  
    __size_of_KeyStopClear 0014         SystemEnterSleep@91 0052         SystemEnterSleep@92 0050  
       SystemEnterSleep@93 004E         SystemEnterSleep@94 004C               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0072          CheckValidTime@F87 00C1  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 005D            ??_CheckTouchKey 0078               _KeyStopClear 0700  
         _GetTouchKeyValue 0510             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 0330             __end_of_fanCtr 02FD         __end_of_KeyClearIn 076B  
            WorkSleep@time 0035                  _KeyMaxSub 0033                  _KeyResSum 00B8  
              __end_ofPL10 07AB                __end_ofPL20 07CB                __end_ofPL12 07B6  
              __end_ofPL30 0FFB                __end_ofPL22 0FEF                __end_ofPL14 07BD  
              __end_ofPL40 03FE                __end_ofPL32 1000                __end_ofPL24 03F9  
              __end_ofPL16 03F2                __end_ofPL42 0F3D                __end_ofPL34 07D7  
              __end_ofPL26 07D1                __end_ofPL18 07C5                __end_ofPL44 0403  
              __end_ofPL36 07DC                __end_ofPL28 0FF5                __end_ofPL46 0407  
              __end_ofPL38 07E1        start_initialization 000D                  _KeyServer 0E97  
                _Isr_Timer 07E1               _maxMotorStep 006C          workCtr@power_temp 00CB  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0055                __pdataBANK0 006C  
             _Table_KeyCap 0811          __size_of___ftpack 003E                __pbssCOMMON 0079  
              _fanOverTime 0042                 ?_KeyServer 0070                  ___latbits 0001  
        __size_of___lwtoft 0010              __pcstackBANK0 004A              __pcstackBANK1 00CB  
                _WorkSleep 0425             _CheckValidTime 0745   __end_of_CheckKeyOldValue 0700  
               ?_Isr_Timer 0070        KeyServer@KeyOldFlag 0036          __size_of_bujinCtr 00AC  
                 ?_KeyIsIn 0070                   ?_KeyHave 0072  __size_of_SystemEnterSleep 0090  
          ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075                  __pnvBANK1 00CF  
                 ?___ftdiv 0050                   ?___fttol 005F                   ?___lwmod 0072  
                 ?_fanInit 0070                  _closeTime 003A                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 002C              _shanshuoTime3 002A  
                __pstrings 0800                  __pswtext1 0817                  __pswtext2 0827  
                _bujinFlag 003D       __size_of_KeyClearOne 0015                  _keyLedCtr 0330  
                _firstLock 00CF     __end_of_CheckValidTime 075B                  _firstTime 00D0  
        __size_of_wuhuaCtr 0028                 ?_WorkSleep 0070             ADC_Sample@adch 004B  
                 ?_pwmInit 0070                   ?_pwmStop 0070                   ?_workCtr 0070  
              ADC_Sample@i 004C                ADC_Sample@j 004A                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 0DF4  
           KeyStopClear@53 0073                  _motorStep 0028        CheckKeyOldValue@F77 0032  
                _powerFlag 003C                __stringbase 0805       __size_of_Init_System 001E  
    __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070  
 __end_of_GetTouchKeyValue 0570            ?_CheckValidTime 0070                ??_KeyServer 0072  
        ___lmul@multiplier 004A                  _wuhuaFlag 0045                ??_Isr_Timer 0070  
                 _MainTime 0047                 _ADC_Sample 01B7           __size_of_KeyIsIn 0010  
         __size_of_KeyHave 000E              _motorStopFlag 0039           _Table_KeyChannel 0814  
         __size_of___ftdiv 0062           __size_of___fttol 0059           __size_of___lwmod 0024  
                 ___ftpack 0179           __size_of_fanInit 000B         __end_of__stringtab 0806  
         __size_of_fanStop 0006           __size_of_chrgCtr 0020                   ___lwtoft 0169  
                 _b_kover1 03C3                   _b_ksleep 03C0       __end_of_TurnKeyFlags 0745  
                 _fanValue 00C9                   _adresult 0048                   _chrgFlag 0041  
              ??_WorkSleep 0078                   __ptext10 02FD                   __ptext11 01B7  
                 __ptext20 076B                   __ptext12 0F3D                   __ptext21 0E97  
                 __ptext13 0169                   __ptext30 057F                   __ptext22 0407  
                 __ptext14 0110                   __ptext31 068A                   __ptext23 0453  
                 __ptext15 00AE                   __ptext32 0675                   __ptext24 0714  
                 __ptext16 0179                   __ptext33 0698                   __ptext25 075B  
                 __ptext17 0DFC                   __ptext34 0665                   __ptext26 0700  
                 __ptext18 0425                   __ptext35 07E1                   __ptext27 0510  
                 __ptext19 0480                   __ptext28 0570                   __ptext29 0745  
         __size_of_pwmInit 000E           __size_of_pwmStop 0007               _shanshuoTime 002E  
                 _bujinCtr 0F3D                   _count10s 0043           __size_of_workCtr 0089  
                 _keyCount 0026   __size_of_CheckOnceResult 00E6         GetTouchKeyValue@62 0077  
       GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073              __size_of_main 003E  
              _longKeyFlag 003B           _SystemEnterSleep 0480           bujinCtr@tempStep 0076  
    __end_of_CheckTouchKey 0480         CheckKeyOldValue@80 004C         CheckKeyOldValue@78 004E  
       CheckKeyOldValue@79 004A                   _test_adc 0037                   _power_ad 0024  
                 _zeroFlag 006E                   _workStep 007B                   _wuhuaCtr 0E1C  
              ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0072                  stringcode 0800                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0057                 _OPTION_REG 0001            ___lwmod@divisor 0072  
          ___lwmod@counter 0076                   stringdir 0800                   stringtab 0800  
            KeyClearOne@49 0072               KeyClearIn@51 0074      __end_of_Refurbish_Sfr 0779  
      __end_of_ClearResSum 057F          ??_CheckOnceResult 004A  
