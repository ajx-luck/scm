

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 09 14:32:28 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	swtext2,local,class=CONST,delta=2
    24                           	psect	text17,local,class=CODE,merge=1,delta=2
    25                           	psect	text21,local,class=CODE,merge=1,delta=2
    26                           	psect	text22,local,class=CODE,merge=1,delta=2
    27                           	psect	text35,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataBANK0
    68  0000                     __pidataBANK0:	
    69                           
    70                           	psect	strings
    71  0800                     __pstrings:	
    72  0800                     stringtab:	
    73  0800                     __stringtab:	
    74  0800                     stringcode:	
    75                           ;	String table - string pointers are 1 byte each
    76                           
    77  0800                     stringdir:	
    78  0800  3008               	movlw	high stringdir
    79  0801  008A               	movwf	10
    80  0802  0804               	movf	4,w
    81  0803  0A84               	incf	4,f
    82  0804  0782               	addwf	2,f
    83  0805                     __stringbase:	
    84  0805  3400               	retlw	0
    85  0806                     __end_of__stringtab:	
    86  0806                     _Table_KeyFalg:	
    87  0806  3401               	retlw	1
    88  0807  3402               	retlw	2
    89  0808  3404               	retlw	4
    90  0809  3408               	retlw	8
    91  080A  3410               	retlw	16
    92  080B  3420               	retlw	32
    93  080C  3440               	retlw	64
    94  080D  3480               	retlw	128
    95  080E                     __end_of_Table_KeyFalg:	
    96  080E                     _Table_KeyDown:	
    97  080E  340A               	retlw	10
    98  080F  340A               	retlw	10
    99  0810  340A               	retlw	10
   100  0811                     __end_of_Table_KeyDown:	
   101  0811                     _Table_KeyCap:	
   102  0811  3402               	retlw	2
   103  0812  3402               	retlw	2
   104  0813  3402               	retlw	2
   105  0814                     __end_of_Table_KeyCap:	
   106  0814                     _Table_KeyChannel:	
   107  0814  3444               	retlw	68
   108  0815  3443               	retlw	67
   109  0816  3442               	retlw	66
   110  0817                     __end_of_Table_KeyChannel:	
   111                           
   112                           	psect	nvBANK0
   113  006E                     __pnvBANK0:	
   114  006E                     _firstLock:	
   115  006E                     	ds	1
   116                           
   117                           	psect	nvBANK1
   118  00CF                     __pnvBANK1:	
   119  00CF                     _firstTime:	
   120  00CF                     	ds	1
   121  001D                     _PWMCON2	set	29
   122  001C                     _PWMT4L	set	28
   123  001B                     _PWMD4L	set	27
   124  0018                     _PWMTH	set	24
   125  0017                     _PWMTL	set	23
   126  0016                     _PWMCON1	set	22
   127  0015                     _PWMCON0	set	21
   128  0014                     _OSCCON	set	20
   129  0013                     _T2CON	set	19
   130  0011                     _PR2	set	17
   131  000E                     _PIE1	set	14
   132  000D                     _PIR1	set	13
   133  000B                     _INTCON	set	11
   134  0008                     _WPUB	set	8
   135  0006                     _PORTB	set	6
   136  0005                     _TRISB	set	5
   137  0001                     _OPTION_REG	set	1
   138  0069                     _TMR2IF	set	105
   139  006B                     _RAIF	set	107
   140  0058                     _RBIF	set	88
   141  0059                     _INTF	set	89
   142  005B                     _RBIE	set	91
   143  004D                     _IOCB5	set	77
   144  0036                     _RB6	set	54
   145  0037                     _RB7	set	55
   146  002D                     _TRISB5	set	45
   147  002E                     _TRISB6	set	46
   148  009E                     _PWMD23H	set	158
   149  009C                     _PWMD3L	set	156
   150  0099                     _ADRESH	set	153
   151  0098                     _ADRESL	set	152
   152  0096                     _ADCON1	set	150
   153  0095                     _ADCON0	set	149
   154  0086                     _PORTA	set	134
   155  0085                     _TRISA	set	133
   156  0081                     _TMR0	set	129
   157  04B2                     _LDO_EN	set	1202
   158  04B6                     _CHS4	set	1206
   159  04A8                     _ADON	set	1192
   160  04A9                     _GODONE	set	1193
   161  0435                     _RA5	set	1077
   162  0436                     _RA6	set	1078
   163  0437                     _RA7	set	1079
   164  0117                     _KEYDATAH	set	279
   165  0116                     _KEYDATAL	set	278
   166  0113                     _KEYCON2	set	275
   167  0112                     _KEYCON1	set	274
   168  0111                     _KEYCON0	set	273
   169  0110                     _PIE2	set	272
   170  010F                     _PIR2	set	271
   171  0106                     _PORTC	set	262
   172  0105                     _TRISC	set	261
   173                           
   174                           	psect	cinit
   175  000D                     start_initialization:	
   176                           ; #config settings
   177                           
   178  000D                     __initialization:	
   179                           
   180                           ;initializer for _maxMotorStep
   181  000D  3002               	movlw	2
   182  000E  01EB               	clrf	__pdataBANK0& (0+127)
   183  000F  00EC               	movwf	(__pdataBANK0+1)& (0+127)
   184                           
   185                           ;initializer for _zeroFlag
   186  0010  3001               	movlw	1
   187  0011  00ED               	movwf	(__pdataBANK0+2)& (0+127)
   188  0012  30A0               	movlw	low __pbssBANK1
   189                           
   190                           ; Clear objects allocated to BANK1
   191  0013  1383               	bcf	3,7	;select IRP bank0
   192  0014  0084               	movwf	4
   193  0015  30CB               	movlw	low (__pbssBANK1+43)
   194  0016  118A  27F5  118A   	fcall	clear_ram0
   195                           
   196                           ; Clear objects allocated to BANK0
   197  0019  3020               	movlw	low __pbssBANK0
   198  001A  0084               	movwf	4
   199  001B  3049               	movlw	low (__pbssBANK0+41)
   200  001C  118A  27F5         	fcall	clear_ram0
   201                           
   202                           ; Clear objects allocated to COMMON
   203  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   204  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   205  0020  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   206                           
   207                           ; Clear objects allocated to BITCOMMON
   208  0021  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   209  0022                     end_of_initialization:	
   210                           ;End of C runtime variable initialization code
   211                           
   212  0022                     __end_of__initialization:	
   213  0022  0183               	clrf	3
   214  0023  158A  2E5F         	ljmp	_main	;jump to C main() function
   215                           
   216                           	psect	bitbssCOMMON
   217  03C0                     __pbitbssCOMMON:	
   218  03C0                     _b_ksleep:	
   219  03C0                     	ds	1
   220  03C1                     _b_kerr:	
   221  03C1                     	ds	1
   222  03C2                     _b_kclr:	
   223  03C2                     	ds	1
   224  03C3                     _b_kover1:	
   225  03C3                     	ds	1
   226  03C4                     _b_kover:	
   227  03C4                     	ds	1
   228  03C5                     _B_OnOff:	
   229  03C5                     	ds	1
   230  03C6                     _B_MainLoop:	
   231  03C6                     	ds	1
   232                           
   233                           	psect	bssCOMMON
   234  0079                     __pbssCOMMON:	
   235  0079                     _KeyFlag:	
   236  0079                     	ds	2
   237  007B                     _workStep:	
   238  007B                     	ds	1
   239                           
   240                           	psect	bssBANK0
   241  0020                     __pbssBANK0:	
   242  0020                     _KeyData:	
   243  0020                     	ds	2
   244  0022                     _KeyOldData:	
   245  0022                     	ds	2
   246  0024                     _power_ad:	
   247  0024                     	ds	2
   248  0026                     _motorStep:	
   249  0026                     	ds	2
   250  0028                     _shanshuoTime3:	
   251  0028                     	ds	2
   252  002A                     _shanshuoTime2:	
   253  002A                     	ds	2
   254  002C                     _shanshuoTime:	
   255  002C                     	ds	2
   256  002E                     TurnKeyFlags@F84:	
   257  002E                     	ds	1
   258  002F                     TurnKeyFlags@F83:	
   259  002F                     	ds	1
   260  0030                     CheckKeyOldValue@F77:	
   261  0030                     	ds	1
   262  0031                     _KeyMaxSub:	
   263  0031                     	ds	1
   264  0032                     _KeyCounter:	
   265  0032                     	ds	1
   266  0033                     WorkSleep@time:	
   267  0033                     	ds	1
   268  0034                     KeyServer@KeyOldFlag:	
   269  0034                     	ds	1
   270  0035                     _test_adc:	
   271  0035                     	ds	1
   272  0036                     _bujinStartFlag:	
   273  0036                     	ds	1
   274  0037                     _motorStopFlag:	
   275  0037                     	ds	1
   276  0038                     _closeTime:	
   277  0038                     	ds	1
   278  0039                     _longKeyFlag:	
   279  0039                     	ds	1
   280  003A                     _powerFlag:	
   281  003A                     	ds	1
   282  003B                     _bujinFlag:	
   283  003B                     	ds	1
   284  003C                     _lowFanTime:	
   285  003C                     	ds	1
   286  003D                     _lowBatLock:	
   287  003D                     	ds	1
   288  003E                     _chrgFullTime:	
   289  003E                     	ds	1
   290  003F                     _chrgFullFlag:	
   291  003F                     	ds	1
   292  0040                     _chrgFlag:	
   293  0040                     	ds	1
   294  0041                     _fanOverTime:	
   295  0041                     	ds	1
   296  0042                     _count10s:	
   297  0042                     	ds	1
   298  0043                     _fanDuty:	
   299  0043                     	ds	1
   300  0044                     _wuhuaFlag:	
   301  0044                     	ds	1
   302  0045                     _count1s:	
   303  0045                     	ds	1
   304  0046                     _MainTime:	
   305  0046                     	ds	1
   306  0047                     _adresult:	
   307  0047                     	ds	2
   308                           
   309                           	psect	dataBANK0
   310  006B                     __pdataBANK0:	
   311  006B                     _maxMotorStep:	
   312  006B                     	ds	2
   313  006D                     _zeroFlag:	
   314  006D                     	ds	1
   315                           
   316                           	psect	bssBANK1
   317  00A0                     __pbssBANK1:	
   318  00A0                     _KeyReference:	
   319  00A0                     	ds	6
   320  00A6                     _KeyOldValue2:	
   321  00A6                     	ds	6
   322  00AC                     _KeyOldValue1:	
   323  00AC                     	ds	6
   324  00B2                     _KeyOldValue0:	
   325  00B2                     	ds	6
   326  00B8                     _KeyResSum:	
   327  00B8                     	ds	6
   328  00BE                     _KeyUpShake:	
   329  00BE                     	ds	3
   330  00C1                     CheckValidTime@F87:	
   331  00C1                     	ds	2
   332  00C3                     _result:	
   333  00C3                     	ds	2
   334  00C5                     _keyCount:	
   335  00C5                     	ds	2
   336  00C7                     _lowBatTime:	
   337  00C7                     	ds	2
   338  00C9                     _fanValue:	
   339  00C9                     	ds	2
   340                           
   341                           	psect	clrtext
   342  07F5                     clear_ram0:	
   343                           ;	Called with FSR containing the base address, and
   344                           ;	W with the last address+1
   345                           
   346  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   347  07F6                     clrloop0:	
   348  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   349  07F7  0A84               	incf	4,f	;increment pointer
   350  07F8  0604               	xorwf	4,w	;XOR with final address
   351  07F9  1903               	btfsc	3,2	;have we reached the end yet?
   352  07FA  3400               	retlw	0	;all done for this memory range, return
   353  07FB  0604               	xorwf	4,w	;XOR again to restore value
   354  07FC  2FF6               	goto	clrloop0	;do the next byte
   355                           
   356                           	psect	cstackBANK1
   357  00CB                     __pcstackBANK1:	
   358  00CB                     workCtr@power_temp:	
   359                           
   360                           ; 4 bytes @ 0x0
   361  00CB                     	ds	4
   362                           
   363                           	psect	cstackCOMMON
   364  0070                     __pcstackCOMMON:	
   365  0070                     ?_SystemEnterSleep:	
   366  0070                     ?_CheckTouchKey:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_Init_System:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_Refurbish_Sfr:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_KeyServer:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_Isr_Timer:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ??_Isr_Timer:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_WorkSleep:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_chrgCtr:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_keyLedCtr:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_pwmInit:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_pwmStop:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_fanInit:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_fanStop:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_fanCtr:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_wuhuaCtr:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_bujinCtr:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_workCtr:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_main:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_KeyIsIn:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_KeyClearOne:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_KeyClearIn:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_KeyStopClear:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_ClearResSum:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_GetTouchKeyValue:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_CheckOnceResult:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_CheckKeyOldValue:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_TurnKeyFlags:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_CheckValidTime:	
   448                           ; 1 bytes @ 0x0
   449                           
   450                           
   451                           ; 1 bytes @ 0x0
   452  0070                     	ds	2
   453  0072                     ??_Init_System:	
   454  0072                     ??_Refurbish_Sfr:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     ??_KeyServer:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ?_ADC_Sample:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     ??_chrgCtr:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ??_pwmInit:	
   467                           ; 1 bytes @ 0x2
   468                           
   469  0072                     ??_pwmStop:	
   470                           ; 1 bytes @ 0x2
   471                           
   472  0072                     ??_fanInit:	
   473                           ; 1 bytes @ 0x2
   474                           
   475  0072                     ??_fanStop:	
   476                           ; 1 bytes @ 0x2
   477                           
   478  0072                     ??_wuhuaCtr:	
   479                           ; 1 bytes @ 0x2
   480                           
   481  0072                     ??_bujinCtr:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0072                     ??_KeyIsIn:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0072                     ??_KeyClearOne:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  0072                     ??_ClearResSum:	
   491                           ; 1 bytes @ 0x2
   492                           
   493  0072                     ?_KeyHave:	
   494                           ; 1 bytes @ 0x2
   495                           
   496  0072                     ??_CheckValidTime:	
   497                           ; 1 bytes @ 0x2
   498                           
   499  0072                     ??___lmul:	
   500                           ; 1 bytes @ 0x2
   501                           
   502  0072                     ?___lwmod:	
   503                           ; 1 bytes @ 0x2
   504                           
   505  0072                     ?___ftpack:	
   506                           ; 2 bytes @ 0x2
   507                           
   508  0072                     ADC_Sample@adldo:	
   509                           ; 3 bytes @ 0x2
   510                           
   511  0072                     KeyIsIn@46:	
   512                           ; 1 bytes @ 0x2
   513                           
   514  0072                     KeyClearOne@49:	
   515                           ; 1 bytes @ 0x2
   516                           
   517  0072                     ClearResSum@56:	
   518                           ; 1 bytes @ 0x2
   519                           
   520  0072                     KeyHave@59:	
   521                           ; 1 bytes @ 0x2
   522                           
   523  0072                     ___lwmod@divisor:	
   524                           ; 2 bytes @ 0x2
   525                           
   526  0072                     ___ftpack@arg:	
   527                           ; 2 bytes @ 0x2
   528                           
   529  0072                     ___lmul@product:	
   530                           ; 3 bytes @ 0x2
   531                           
   532                           
   533                           ; 4 bytes @ 0x2
   534  0072                     	ds	1
   535  0073                     ??_ADC_Sample:	
   536  0073                     ??_KeyStopClear:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0073                     ??_GetTouchKeyValue:	
   540                           ; 1 bytes @ 0x3
   541                           
   542  0073                     KeyIsIn@45:	
   543                           ; 1 bytes @ 0x3
   544                           
   545  0073                     KeyStopClear@53:	
   546                           ; 1 bytes @ 0x3
   547                           
   548  0073                     GetTouchKeyValue@64:	
   549                           ; 1 bytes @ 0x3
   550                           
   551                           
   552                           ; 2 bytes @ 0x3
   553  0073                     	ds	1
   554  0074                     ??_KeyClearIn:	
   555  0074                     ??_KeyHave:	
   556                           ; 1 bytes @ 0x4
   557                           
   558  0074                     ??_CheckKeyOldValue:	
   559                           ; 1 bytes @ 0x4
   560                           
   561  0074                     KeyClearIn@51:	
   562                           ; 1 bytes @ 0x4
   563                           
   564  0074                     KeyHave@58:	
   565                           ; 1 bytes @ 0x4
   566                           
   567  0074                     ___lwmod@dividend:	
   568                           ; 1 bytes @ 0x4
   569                           
   570                           
   571                           ; 2 bytes @ 0x4
   572  0074                     	ds	1
   573  0075                     ??_TurnKeyFlags:	
   574  0075                     ___ftpack@exp:	
   575                           ; 1 bytes @ 0x5
   576                           
   577  0075                     GetTouchKeyValue@63:	
   578                           ; 1 bytes @ 0x5
   579                           
   580                           
   581                           ; 2 bytes @ 0x5
   582  0075                     	ds	1
   583  0076                     ??___lwmod:	
   584  0076                     bujinCtr@tempStep:	
   585                           ; 1 bytes @ 0x6
   586                           
   587  0076                     ___ftpack@sign:	
   588                           ; 1 bytes @ 0x6
   589                           
   590  0076                     ___lwmod@counter:	
   591                           ; 1 bytes @ 0x6
   592                           
   593                           
   594                           ; 1 bytes @ 0x6
   595  0076                     	ds	1
   596  0077                     ??_keyLedCtr:	
   597  0077                     ??_fanCtr:	
   598                           ; 1 bytes @ 0x7
   599                           
   600  0077                     ??_workCtr:	
   601                           ; 1 bytes @ 0x7
   602                           
   603  0077                     ??___lwtoft:	
   604                           ; 1 bytes @ 0x7
   605                           
   606  0077                     GetTouchKeyValue@62:	
   607                           ; 1 bytes @ 0x7
   608                           
   609                           
   610                           ; 1 bytes @ 0x7
   611  0077                     	ds	1
   612  0078                     ??_CheckTouchKey:	
   613  0078                     ??_WorkSleep:	
   614                           ; 1 bytes @ 0x8
   615                           
   616  0078                     ??_main:	
   617                           ; 1 bytes @ 0x8
   618                           
   619                           
   620                           	psect	cstackBANK0
   621  0049                     __pcstackBANK0:	
   622                           ; 1 bytes @ 0x8
   623                           
   624  0049                     ??_SystemEnterSleep:	
   625  0049                     ??___ftpack:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0049                     ??_CheckOnceResult:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0049                     ?___lmul:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0049                     ADC_Sample@j:	
   635                           ; 4 bytes @ 0x0
   636                           
   637  0049                     CheckKeyOldValue@79:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0049                     ___lmul@multiplier:	
   641                           ; 2 bytes @ 0x0
   642                           
   643                           
   644                           ; 4 bytes @ 0x0
   645  0049                     	ds	1
   646  004A                     ADC_Sample@adch:	
   647                           
   648                           ; 1 bytes @ 0x1
   649  004A                     	ds	1
   650  004B                     ADC_Sample@i:	
   651  004B                     CheckKeyOldValue@80:	
   652                           ; 1 bytes @ 0x2
   653                           
   654  004B                     SystemEnterSleep@94:	
   655                           ; 2 bytes @ 0x2
   656                           
   657                           
   658                           ; 2 bytes @ 0x2
   659  004B                     	ds	1
   660  004C                     ?___lwtoft:	
   661  004C                     ___lwtoft@c:	
   662                           ; 3 bytes @ 0x3
   663                           
   664  004C                     ADC_Sample@adsum:	
   665                           ; 2 bytes @ 0x3
   666                           
   667                           
   668                           ; 4 bytes @ 0x3
   669  004C                     	ds	1
   670  004D                     CheckKeyOldValue@78:	
   671  004D                     CheckOnceResult@73:	
   672                           ; 1 bytes @ 0x4
   673                           
   674  004D                     SystemEnterSleep@93:	
   675                           ; 2 bytes @ 0x4
   676                           
   677  004D                     ___lmul@multiplicand:	
   678                           ; 2 bytes @ 0x4
   679                           
   680                           
   681                           ; 4 bytes @ 0x4
   682  004D                     	ds	2
   683  004F                     ?___ftdiv:	
   684  004F                     CheckOnceResult@70:	
   685                           ; 3 bytes @ 0x6
   686                           
   687  004F                     SystemEnterSleep@92:	
   688                           ; 1 bytes @ 0x6
   689                           
   690  004F                     ___ftdiv@f2:	
   691                           ; 2 bytes @ 0x6
   692                           
   693                           
   694                           ; 3 bytes @ 0x6
   695  004F                     	ds	1
   696  0050                     ADC_Sample@admin:	
   697  0050                     CheckOnceResult@72:	
   698                           ; 2 bytes @ 0x7
   699                           
   700                           
   701                           ; 2 bytes @ 0x7
   702  0050                     	ds	1
   703  0051                     SystemEnterSleep@91:	
   704                           
   705                           ; 1 bytes @ 0x8
   706  0051                     	ds	1
   707  0052                     CheckOnceResult@69:	
   708  0052                     ADC_Sample@admax:	
   709                           ; 1 bytes @ 0x9
   710                           
   711  0052                     ___ftdiv@f1:	
   712                           ; 2 bytes @ 0x9
   713                           
   714                           
   715                           ; 3 bytes @ 0x9
   716  0052                     	ds	1
   717  0053                     CheckOnceResult@71:	
   718                           
   719                           ; 2 bytes @ 0xA
   720  0053                     	ds	1
   721  0054                     ADC_Sample@ad_temp:	
   722                           
   723                           ; 2 bytes @ 0xB
   724  0054                     	ds	1
   725  0055                     ??___ftdiv:	
   726  0055                     CheckOnceResult@68:	
   727                           ; 1 bytes @ 0xC
   728                           
   729                           
   730                           ; 1 bytes @ 0xC
   731  0055                     	ds	1
   732  0056                     fanCtr@maxFanValue:	
   733                           
   734                           ; 1 bytes @ 0xD
   735  0056                     	ds	1
   736  0057                     fanCtr@fan_temp:	
   737                           
   738                           ; 4 bytes @ 0xE
   739  0057                     	ds	1
   740  0058                     ___ftdiv@cntr:	
   741                           
   742                           ; 1 bytes @ 0xF
   743  0058                     	ds	1
   744  0059                     ___ftdiv@f3:	
   745                           
   746                           ; 3 bytes @ 0x10
   747  0059                     	ds	3
   748  005C                     ___ftdiv@exp:	
   749                           
   750                           ; 1 bytes @ 0x13
   751  005C                     	ds	1
   752  005D                     ___ftdiv@sign:	
   753                           
   754                           ; 1 bytes @ 0x14
   755  005D                     	ds	1
   756  005E                     ?___fttol:	
   757  005E                     ___fttol@f1:	
   758                           ; 4 bytes @ 0x15
   759                           
   760                           
   761                           ; 3 bytes @ 0x15
   762  005E                     	ds	4
   763  0062                     ??___fttol:	
   764                           
   765                           ; 1 bytes @ 0x19
   766  0062                     	ds	3
   767  0065                     ___fttol@sign1:	
   768                           
   769                           ; 1 bytes @ 0x1C
   770  0065                     	ds	1
   771  0066                     ___fttol@lval:	
   772                           
   773                           ; 4 bytes @ 0x1D
   774  0066                     	ds	4
   775  006A                     ___fttol@exp1:	
   776                           
   777                           ; 1 bytes @ 0x21
   778  006A                     	ds	1
   779                           
   780                           	psect	maintext
   781  0E5F                     __pmaintext:	
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 828 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : B00/0
   798 ;;		On exit  : 200/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   801 ;;      Params:         0       0       0       0
   802 ;;      Locals:         0       0       0       0
   803 ;;      Temps:          0       0       0       0
   804 ;;      Totals:         0       0       0       0
   805 ;;Total ram usage:        0 bytes
   806 ;; Hardware stack levels required when called:    6
   807 ;; This function calls:
   808 ;;		_CheckTouchKey
   809 ;;		_Init_System
   810 ;;		_KeyServer
   811 ;;		_Refurbish_Sfr
   812 ;;		_WorkSleep
   813 ;;		_chrgCtr
   814 ;;		_workCtr
   815 ;; This function is called by:
   816 ;;		Startup code after reset
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           
   821                           ;psect for function _main
   822  0E5F                     _main:	
   823                           
   824                           ;main.c: 830: Init_System();
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   828  0E5F  118A  2025  158A   	fcall	_Init_System
   829                           
   830                           ;main.c: 831: firstLock = 1;
   831  0E62  1283               	bcf	3,5	;RP0=0, select bank0
   832  0E63  30C8               	movlw	200
   833  0E64  01EE               	clrf	_firstLock
   834  0E65  0AEE               	incf	_firstLock,f
   835                           
   836                           ;main.c: 832: firstTime = 200;
   837  0E66  1683               	bsf	3,5	;RP0=1, select bank1
   838  0E67  00CF               	movwf	_firstTime^(0+128)
   839  0E68                     l4817:	
   840                           
   841                           ;main.c: 834: {
   842                           ;main.c: 835: if(B_MainLoop)
   843  0E68  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   844  0E69  2E68               	goto	l4817
   845                           
   846                           ;main.c: 836: {
   847                           ;main.c: 837: B_MainLoop = 0;
   848  0E6A  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   849  0E6B  0064               	clrwdt	;# 
   850                           
   851                           ;main.c: 840: CheckTouchKey();
   852  0E6C  118A  2071  158A   	fcall	_CheckTouchKey
   853                           
   854                           ;main.c: 841: chrgCtr();
   855  0E6F  118A  27D7  158A   	fcall	_chrgCtr
   856                           
   857                           ;main.c: 842: Refurbish_Sfr();
   858  0E72  118A  2389  158A   	fcall	_Refurbish_Sfr
   859                           
   860                           ;main.c: 843: KeyServer();
   861  0E75  158A  26A1  158A   	fcall	_KeyServer
   862                           
   863                           ;main.c: 844: workCtr();
   864  0E78  118A  23FF  158A   	fcall	_workCtr
   865                           
   866                           ;main.c: 845: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && p
      +                          owerFlag == 0 && keyCount == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   867  0E7B  1683               	bsf	3,5	;RP0=1, select bank1
   868  0E7C  084F               	movf	_firstTime^(0+128),w
   869  0E7D  1D03               	btfss	3,2
   870  0E7E  2E68               	goto	l4817
   871  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
   872  0E80  0840               	movf	_chrgFlag,w
   873  0E81  1D03               	btfss	3,2
   874  0E82  2E68               	goto	l4817
   875  0E83  087B               	movf	_workStep,w
   876  0E84  1D03               	btfss	3,2
   877  0E85  2E68               	goto	l4817
   878  0E86  0844               	movf	_wuhuaFlag,w
   879  0E87  1D03               	btfss	3,2
   880  0E88  2E68               	goto	l4817
   881  0E89  083A               	movf	_powerFlag,w
   882  0E8A  1D03               	btfss	3,2
   883  0E8B  2E68               	goto	l4817
   884  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
   885  0E8D  0845               	movf	_keyCount^(0+128),w
   886  0E8E  0446               	iorwf	(_keyCount+1)^(0+128),w
   887  0E8F  1D03               	btfss	3,2
   888  0E90  2E68               	goto	l4817
   889  0E91  1283               	bcf	3,5	;RP0=0, select bank0
   890  0E92  083B               	movf	_bujinFlag,w
   891  0E93  1D03               	btfss	3,2
   892  0E94  2E68               	goto	l4817
   893  0E95  082C               	movf	_shanshuoTime,w
   894  0E96  042D               	iorwf	_shanshuoTime+1,w
   895  0E97  1D03               	btfss	3,2
   896  0E98  2E68               	goto	l4817
   897  0E99  082A               	movf	_shanshuoTime2,w
   898  0E9A  042B               	iorwf	_shanshuoTime2+1,w
   899  0E9B  1D03               	btfss	3,2
   900  0E9C  2E68               	goto	l4817
   901                           
   902                           ;main.c: 846: {
   903                           ;main.c: 847: WorkSleep();
   904  0E9D  118A  2043  158A   	fcall	_WorkSleep
   905  0EA0  2E68               	goto	l4817
   906  0EA1                     __end_of_main:	
   907                           
   908                           	psect	text1
   909  03FF                     __ptext1:	
   910 ;; *************** function _workCtr *****************
   911 ;; Defined at:
   912 ;;		line 771 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   921 ;; Tracked objects:
   922 ;;		On entry : 200/0
   923 ;;		On exit  : 200/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   926 ;;      Params:         0       0       0       0
   927 ;;      Locals:         0       0       4       0
   928 ;;      Temps:          0       0       0       0
   929 ;;      Totals:         0       0       4       0
   930 ;;Total ram usage:        4 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    3
   933 ;; This function calls:
   934 ;;		_ADC_Sample
   935 ;;		___ftdiv
   936 ;;		___fttol
   937 ;;		___lwtoft
   938 ;;		_bujinCtr
   939 ;;		_fanCtr
   940 ;;		_keyLedCtr
   941 ;;		_wuhuaCtr
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _workCtr
   949  03FF                     _workCtr:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   953  03FF  301F               	movlw	31
   954                           
   955                           ;main.c: 773: test_adc = ADC_Sample(31, 0);
   956  0400  01F2               	clrf	ADC_Sample@adldo
   957  0401  2587  118A         	fcall	_ADC_Sample
   958  0403  00B5               	movwf	_test_adc	;volatile
   959                           
   960                           ;main.c: 774: if (0xA5 == test_adc)
   961  0404  30A5               	movlw	165
   962  0405  0635               	xorwf	_test_adc,w	;volatile
   963  0406  1D03               	btfss	3,2
   964  0407  2C39               	goto	l4741
   965                           
   966                           ;main.c: 775: {
   967                           ;main.c: 776: volatile unsigned long power_temp;
   968                           ;main.c: 778: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   969  0408  3096               	movlw	150
   970  0409  01D2               	clrf	___ftdiv@f1
   971  040A  00D3               	movwf	___ftdiv@f1+1
   972  040B  304A               	movlw	74
   973  040C  00D4               	movwf	___ftdiv@f1+2
   974  040D  0848               	movf	_adresult+1,w	;volatile
   975  040E  00CD               	movwf	___lwtoft@c+1
   976  040F  0847               	movf	_adresult,w	;volatile
   977  0410  00CC               	movwf	___lwtoft@c
   978  0411  2539  118A         	fcall	___lwtoft
   979  0413  084C               	movf	?___lwtoft,w
   980  0414  00CF               	movwf	___ftdiv@f2
   981  0415  084D               	movf	?___lwtoft+1,w
   982  0416  00D0               	movwf	___ftdiv@f2+1
   983  0417  084E               	movf	?___lwtoft+2,w
   984  0418  00D1               	movwf	___ftdiv@f2+2
   985  0419  247E  118A         	fcall	___ftdiv
   986  041B  084F               	movf	?___ftdiv,w
   987  041C  00DE               	movwf	___fttol@f1
   988  041D  0850               	movf	?___ftdiv+1,w
   989  041E  00DF               	movwf	___fttol@f1+1
   990  041F  0851               	movf	?___ftdiv+2,w
   991  0420  00E0               	movwf	___fttol@f1+2
   992  0421  24E0  118A         	fcall	___fttol
   993  0423  0861               	movf	?___fttol+3,w
   994  0424  1683               	bsf	3,5	;RP0=1, select bank1
   995  0425  00CE               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   996  0426  1283               	bcf	3,5	;RP0=0, select bank0
   997  0427  0860               	movf	?___fttol+2,w
   998  0428  1683               	bsf	3,5	;RP0=1, select bank1
   999  0429  00CD               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1000  042A  1283               	bcf	3,5	;RP0=0, select bank0
  1001  042B  085F               	movf	?___fttol+1,w
  1002  042C  1683               	bsf	3,5	;RP0=1, select bank1
  1003  042D  00CC               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1004  042E  1283               	bcf	3,5	;RP0=0, select bank0
  1005  042F  085E               	movf	?___fttol,w
  1006  0430  1683               	bsf	3,5	;RP0=1, select bank1
  1007  0431  00CB               	movwf	workCtr@power_temp^(0+128)	;volatile
  1008                           
  1009                           ;main.c: 779: power_ad = (unsigned int)(power_temp);
  1010  0432  084C               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1011  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0434  00A5               	movwf	_power_ad+1	;volatile
  1013  0435  1683               	bsf	3,5	;RP0=1, select bank1
  1014  0436  084B               	movf	workCtr@power_temp^(0+128),w	;volatile
  1015  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0438  00A4               	movwf	_power_ad	;volatile
  1017  0439                     l4741:	
  1018                           
  1019                           ;main.c: 780: }
  1020                           ;main.c: 781: if(workStep == 2 && power_ad < 3300)
  1021  0439  3002               	movlw	2
  1022  043A  067B               	xorwf	_workStep,w
  1023  043B  1D03               	btfss	3,2
  1024  043C  2C4D               	goto	l4751
  1025  043D  300C               	movlw	12
  1026  043E  0225               	subwf	_power_ad+1,w	;volatile
  1027  043F  30E4               	movlw	228
  1028  0440  1903               	skipnz
  1029  0441  0224               	subwf	_power_ad,w	;volatile
  1030  0442  1803               	skipnc
  1031  0443  2C4D               	goto	l4751
  1032                           
  1033                           ;main.c: 782: {
  1034                           ;main.c: 783: if(++lowFanTime > 200)
  1035  0444  30C9               	movlw	201
  1036  0445  0ABC               	incf	_lowFanTime,f
  1037  0446  023C               	subwf	_lowFanTime,w
  1038  0447  1C03               	skipc
  1039  0448  2C4E               	goto	l4753
  1040                           
  1041                           ;main.c: 784: {
  1042                           ;main.c: 785: lowFanTime = 0;
  1043  0449  01BC               	clrf	_lowFanTime
  1044                           
  1045                           ;main.c: 786: workStep = 1;
  1046  044A  01FB               	clrf	_workStep
  1047  044B  0AFB               	incf	_workStep,f
  1048  044C  2C4E               	goto	l4753
  1049  044D                     l4751:	
  1050                           
  1051                           ;main.c: 789: else
  1052                           ;main.c: 790: {
  1053                           ;main.c: 791: lowFanTime = 0;
  1054  044D  01BC               	clrf	_lowFanTime
  1055  044E                     l4753:	
  1056                           
  1057                           ;main.c: 792: }
  1058                           ;main.c: 793: if(power_ad < 2900)
  1059  044E  300B               	movlw	11
  1060  044F  0225               	subwf	_power_ad+1,w	;volatile
  1061  0450  3054               	movlw	84
  1062  0451  1903               	skipnz
  1063  0452  0224               	subwf	_power_ad,w	;volatile
  1064  0453  1803               	skipnc
  1065  0454  2C69               	goto	l4761
  1066                           
  1067                           ;main.c: 794: {
  1068                           ;main.c: 795: if(++lowBatTime > 1000)
  1069  0455  1683               	bsf	3,5	;RP0=1, select bank1
  1070  0456  0AC7               	incf	_lowBatTime^(0+128),f
  1071  0457  1903               	skipnz
  1072  0458  0AC8               	incf	(_lowBatTime+1)^(0+128),f
  1073  0459  3003               	movlw	3
  1074  045A  0248               	subwf	(_lowBatTime+1)^(0+128),w
  1075  045B  30E9               	movlw	233
  1076  045C  1903               	skipnz
  1077  045D  0247               	subwf	_lowBatTime^(0+128),w
  1078  045E  1C03               	skipc
  1079  045F  2C6C               	goto	l4763
  1080                           
  1081                           ;main.c: 796: {
  1082                           ;main.c: 797: lowBatTime = 0;
  1083  0460  01C7               	clrf	_lowBatTime^(0+128)
  1084  0461  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1085                           
  1086                           ;main.c: 798: lowBatLock = 1;
  1087  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0463  01BD               	clrf	_lowBatLock
  1089  0464  0ABD               	incf	_lowBatLock,f
  1090                           
  1091                           ;main.c: 799: workStep = 0;
  1092  0465  01FB               	clrf	_workStep
  1093                           
  1094                           ;main.c: 800: wuhuaFlag = 0;
  1095  0466  01C4               	clrf	_wuhuaFlag
  1096                           
  1097                           ;main.c: 801: bujinFlag = 0;
  1098  0467  01BB               	clrf	_bujinFlag
  1099  0468  2C6C               	goto	l4763
  1100  0469                     l4761:	
  1101                           
  1102                           ;main.c: 804: else
  1103                           ;main.c: 805: {
  1104                           ;main.c: 806: lowBatTime = 0;
  1105  0469  1683               	bsf	3,5	;RP0=1, select bank1
  1106  046A  01C7               	clrf	_lowBatTime^(0+128)
  1107  046B  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1108  046C                     l4763:	
  1109                           
  1110                           ;main.c: 807: }
  1111                           ;main.c: 808: if(firstTime > 0)
  1112  046C  1683               	bsf	3,5	;RP0=1, select bank1
  1113  046D  084F               	movf	_firstTime^(0+128),w
  1114  046E  1903               	btfsc	3,2
  1115  046F  2C76               	goto	l4771
  1116                           
  1117                           ;main.c: 809: {
  1118                           ;main.c: 810: firstTime--;
  1119  0470  03CF               	decf	_firstTime^(0+128),f
  1120                           
  1121                           ;main.c: 811: PORTB = 0x00;
  1122  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0472  0186               	clrf	6	;volatile
  1124                           
  1125                           ;main.c: 812: PORTA = 0x00;
  1126  0473  1683               	bsf	3,5	;RP0=1, select bank1
  1127  0474  0186               	clrf	6	;volatile
  1128                           
  1129                           ;main.c: 813: }
  1130  0475  0008               	return
  1131  0476                     l4771:	
  1132                           
  1133                           ;main.c: 814: else
  1134                           ;main.c: 815: {
  1135                           ;main.c: 816: keyLedCtr();
  1136  0476  2700  118A         	fcall	_keyLedCtr
  1137                           
  1138                           ;main.c: 817: fanCtr();
  1139  0478  2658               	fcall	_fanCtr
  1140                           
  1141                           ;main.c: 818: wuhuaCtr();
  1142  0479  158A  2622  118A   	fcall	_wuhuaCtr
  1143                           
  1144                           ;main.c: 819: bujinCtr();
  1145  047C  158A  2F3E         	ljmp	l4465
  1146  047E                     __end_of_workCtr:	
  1147  047E                     __ptext15:	
  1148 ;; *************** function ___ftdiv *****************
  1149 ;; Defined at:
  1150 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  f2              3    6[BANK0 ] float 
  1153 ;;  f1              3    9[BANK0 ] float 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  f3              3   16[BANK0 ] float 
  1156 ;;  sign            1   20[BANK0 ] unsigned char 
  1157 ;;  exp             1   19[BANK0 ] unsigned char 
  1158 ;;  cntr            1   15[BANK0 ] unsigned char 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  3    6[BANK0 ] float 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 300/0
  1165 ;;		On exit  : 300/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1168 ;;      Params:         0       6       0       0
  1169 ;;      Locals:         0       6       0       0
  1170 ;;      Temps:          0       3       0       0
  1171 ;;      Totals:         0      15       0       0
  1172 ;;Total ram usage:       15 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    2
  1175 ;; This function calls:
  1176 ;;		___ftpack
  1177 ;; This function is called by:
  1178 ;;		_workCtr
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function ___ftdiv
  1184  047E                     ___ftdiv:	
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1188  047E  0852               	movf	___ftdiv@f1,w
  1189  047F  00D5               	movwf	??___ftdiv
  1190  0480  0853               	movf	___ftdiv@f1+1,w
  1191  0481  00D6               	movwf	??___ftdiv+1
  1192  0482  0854               	movf	___ftdiv@f1+2,w
  1193  0483  00D7               	movwf	??___ftdiv+2
  1194  0484  1003               	clrc
  1195  0485  0D56               	rlf	??___ftdiv+1,w
  1196  0486  0D57               	rlf	??___ftdiv+2,w
  1197  0487  00DC               	movwf	___ftdiv@exp
  1198  0488  085C               	movf	___ftdiv@exp,w
  1199  0489  1D03               	btfss	3,2
  1200  048A  2C8C               	goto	l4609
  1201  048B  2FD3               	ljmp	PL42	;call to abstracted procedure
  1202  048C                     l4609:	
  1203  048C  084F               	movf	___ftdiv@f2,w
  1204  048D  00D5               	movwf	??___ftdiv
  1205  048E  0850               	movf	___ftdiv@f2+1,w
  1206  048F  00D6               	movwf	??___ftdiv+1
  1207  0490  0851               	movf	___ftdiv@f2+2,w
  1208  0491  00D7               	movwf	??___ftdiv+2
  1209  0492  1003               	clrc
  1210  0493  0D56               	rlf	??___ftdiv+1,w
  1211  0494  0D57               	rlf	??___ftdiv+2,w
  1212  0495  00DD               	movwf	___ftdiv@sign
  1213  0496  085D               	movf	___ftdiv@sign,w
  1214  0497  1D03               	btfss	3,2
  1215  0498  2C9A               	goto	l1587
  1216  0499  2FD3               	ljmp	PL42	;call to abstracted procedure
  1217  049A                     l1587:	
  1218  049A  3089               	movlw	137
  1219  049B  01D9               	clrf	___ftdiv@f3
  1220  049C  01DA               	clrf	___ftdiv@f3+1
  1221  049D  01DB               	clrf	___ftdiv@f3+2
  1222  049E  075D               	addwf	___ftdiv@sign,w
  1223  049F  00D5               	movwf	??___ftdiv
  1224  04A0  02DC               	subwf	___ftdiv@exp,f
  1225  04A1  0854               	movf	___ftdiv@f1+2,w
  1226  04A2  00DD               	movwf	___ftdiv@sign
  1227  04A3  0851               	movf	___ftdiv@f2+2,w
  1228  04A4  06DD               	xorwf	___ftdiv@sign,f
  1229  04A5  3080               	movlw	128
  1230  04A6  05DD               	andwf	___ftdiv@sign,f
  1231  04A7  3018               	movlw	24
  1232  04A8  17D3               	bsf	___ftdiv@f1+1,7
  1233  04A9  01D4               	clrf	___ftdiv@f1+2
  1234  04AA  17D0               	bsf	___ftdiv@f2+1,7
  1235  04AB  01D1               	clrf	___ftdiv@f2+2
  1236  04AC  00D8               	movwf	___ftdiv@cntr
  1237  04AD                     l4631:	
  1238  04AD  1003               	clrc
  1239  04AE  0DD9               	rlf	___ftdiv@f3,f
  1240  04AF  0DDA               	rlf	___ftdiv@f3+1,f
  1241  04B0  0DDB               	rlf	___ftdiv@f3+2,f
  1242  04B1  0851               	movf	___ftdiv@f2+2,w
  1243  04B2  0254               	subwf	___ftdiv@f1+2,w
  1244  04B3  1D03               	skipz
  1245  04B4  2CBB               	goto	u4855
  1246  04B5  0850               	movf	___ftdiv@f2+1,w
  1247  04B6  0253               	subwf	___ftdiv@f1+1,w
  1248  04B7  1D03               	skipz
  1249  04B8  2CBB               	goto	u4855
  1250  04B9  084F               	movf	___ftdiv@f2,w
  1251  04BA  0252               	subwf	___ftdiv@f1,w
  1252  04BB                     u4855:	
  1253  04BB  1C03               	skipc
  1254  04BC  2CC9               	goto	L6
  1255  04BD  084F               	movf	___ftdiv@f2,w
  1256  04BE  02D2               	subwf	___ftdiv@f1,f
  1257  04BF  0850               	movf	___ftdiv@f2+1,w
  1258  04C0  1C03               	skipc
  1259  04C1  0F50               	incfsz	___ftdiv@f2+1,w
  1260  04C2  02D3               	subwf	___ftdiv@f1+1,f
  1261  04C3  0851               	movf	___ftdiv@f2+2,w
  1262  04C4  1C03               	skipc
  1263  04C5  0A51               	incf	___ftdiv@f2+2,w
  1264  04C6  02D4               	subwf	___ftdiv@f1+2,f
  1265  04C7  1459               	bsf	___ftdiv@f3,0
  1266  04C8  1003               	clrc
  1267  04C9                     L6:	
  1268  04C9  0DD2               	rlf	___ftdiv@f1,f
  1269  04CA  0DD3               	rlf	___ftdiv@f1+1,f
  1270  04CB  0DD4               	rlf	___ftdiv@f1+2,f
  1271  04CC  0BD8               	decfsz	___ftdiv@cntr,f
  1272  04CD  2CAD               	goto	l4631
  1273  04CE  0859               	movf	___ftdiv@f3,w
  1274  04CF  00F2               	movwf	___ftpack@arg
  1275  04D0  085A               	movf	___ftdiv@f3+1,w
  1276  04D1  00F3               	movwf	___ftpack@arg+1
  1277  04D2  085B               	movf	___ftdiv@f3+2,w
  1278  04D3  00F4               	movwf	___ftpack@arg+2
  1279  04D4  085C               	movf	___ftdiv@exp,w
  1280  04D5  00F5               	movwf	___ftpack@exp
  1281  04D6  085D               	movf	___ftdiv@sign,w
  1282  04D7  00F6               	movwf	___ftpack@sign
  1283  04D8  2549               	fcall	___ftpack
  1284  04D9  0872               	movf	?___ftpack,w
  1285  04DA  00CF               	movwf	?___ftdiv
  1286  04DB  0873               	movf	?___ftpack+1,w
  1287  04DC  00D0               	movwf	?___ftdiv+1
  1288  04DD  0874               	movf	?___ftpack+2,w
  1289  04DE  00D1               	movwf	?___ftdiv+2
  1290  04DF  0008               	return
  1291  04E0                     __end_of___ftdiv:	
  1292  04E0                     __ptext14:	
  1293 ;; *************** function ___fttol *****************
  1294 ;; Defined at:
  1295 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  f1              3   21[BANK0 ] float 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  lval            4   29[BANK0 ] unsigned long 
  1300 ;;  exp1            1   33[BANK0 ] unsigned char 
  1301 ;;  sign1           1   28[BANK0 ] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  4   21[BANK0 ] long 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0
  1306 ;; Tracked objects:
  1307 ;;		On entry : 300/0
  1308 ;;		On exit  : 300/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1311 ;;      Params:         0       4       0       0
  1312 ;;      Locals:         0       6       0       0
  1313 ;;      Temps:          0       3       0       0
  1314 ;;      Totals:         0      13       0       0
  1315 ;;Total ram usage:       13 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_workCtr
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           
  1326                           ;psect for function ___fttol
  1327  04E0                     ___fttol:	
  1328                           
  1329                           ;incstack = 0
  1330                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1331  04E0  27C2  118A         	fcall	PL26	;call to abstracted procedure
  1332  04E2  1003               	clrc
  1333  04E3  0D63               	rlf	??___fttol+1,w
  1334  04E4  0D64               	rlf	??___fttol+2,w
  1335  04E5  00EA               	movwf	___fttol@exp1
  1336  04E6  086A               	movf	___fttol@exp1,w
  1337  04E7  1D03               	btfss	3,2
  1338  04E8  2CEE               	goto	l4649
  1339  04E9                     l4647:	
  1340  04E9  01DE               	clrf	?___fttol
  1341  04EA  01DF               	clrf	?___fttol+1
  1342  04EB  01E0               	clrf	?___fttol+2
  1343  04EC  01E1               	clrf	?___fttol+3
  1344  04ED  0008               	return
  1345  04EE                     l4649:	
  1346  04EE  27C2  118A         	fcall	PL26	;call to abstracted procedure
  1347  04F0  3017               	movlw	23
  1348  04F1                     u4885:	
  1349  04F1  1003               	clrc
  1350  04F2  0CE4               	rrf	??___fttol+2,f
  1351  04F3  0CE3               	rrf	??___fttol+1,f
  1352  04F4  0CE2               	rrf	??___fttol,f
  1353  04F5  3EFF               	addlw	-1
  1354  04F6  1D03               	skipz
  1355  04F7  2CF1               	goto	u4885
  1356  04F8  0862               	movf	??___fttol,w
  1357  04F9  00E5               	movwf	___fttol@sign1
  1358  04FA  17DF               	bsf	___fttol@f1+1,7
  1359  04FB  01E0               	clrf	___fttol@f1+2
  1360  04FC  085E               	movf	___fttol@f1,w
  1361  04FD  00E6               	movwf	___fttol@lval
  1362  04FE  085F               	movf	___fttol@f1+1,w
  1363  04FF  00E7               	movwf	___fttol@lval+1
  1364  0500  0860               	movf	___fttol@f1+2,w
  1365  0501  00E8               	movwf	___fttol@lval+2
  1366  0502  308E               	movlw	142
  1367  0503  01E9               	clrf	___fttol@lval+3
  1368  0504  02EA               	subwf	___fttol@exp1,f
  1369  0505  1FEA               	btfss	___fttol@exp1,7
  1370  0506  2D14               	goto	l4669
  1371  0507  086A               	movf	___fttol@exp1,w
  1372  0508  3A80               	xorlw	128
  1373  0509  3E8F               	addlw	143
  1374  050A  1C03               	btfss	3,0
  1375  050B  2CE9               	goto	l4647
  1376  050C                     l4665:	
  1377  050C  1003               	clrc
  1378  050D  0CE9               	rrf	___fttol@lval+3,f
  1379  050E  0CE8               	rrf	___fttol@lval+2,f
  1380  050F  0CE7               	rrf	___fttol@lval+1,f
  1381  0510  0CE6               	rrf	___fttol@lval,f
  1382  0511  0FEA               	incfsz	___fttol@exp1,f
  1383  0512  2D0C               	goto	l4665
  1384  0513  2D22               	goto	l4677
  1385  0514                     l4669:	
  1386  0514  3018               	movlw	24
  1387  0515  026A               	subwf	___fttol@exp1,w
  1388  0516  1803               	btfsc	3,0
  1389  0517  2CE9               	goto	l4647
  1390  0518                     l4675:	
  1391  0518  086A               	movf	___fttol@exp1,w
  1392  0519  1903               	btfsc	3,2
  1393  051A  2D22               	goto	l4677
  1394  051B  1003               	clrc
  1395  051C  0DE6               	rlf	___fttol@lval,f
  1396  051D  0DE7               	rlf	___fttol@lval+1,f
  1397  051E  0DE8               	rlf	___fttol@lval+2,f
  1398  051F  0DE9               	rlf	___fttol@lval+3,f
  1399  0520  03EA               	decf	___fttol@exp1,f
  1400  0521  2D18               	goto	l4675
  1401  0522                     l4677:	
  1402  0522  0865               	movf	___fttol@sign1,w
  1403  0523  1903               	btfsc	3,2
  1404  0524  2D30               	goto	l4681
  1405  0525  09E6               	comf	___fttol@lval,f
  1406  0526  09E7               	comf	___fttol@lval+1,f
  1407  0527  09E8               	comf	___fttol@lval+2,f
  1408  0528  09E9               	comf	___fttol@lval+3,f
  1409  0529  0AE6               	incf	___fttol@lval,f
  1410  052A  1903               	skipnz
  1411  052B  0AE7               	incf	___fttol@lval+1,f
  1412  052C  1903               	skipnz
  1413  052D  0AE8               	incf	___fttol@lval+2,f
  1414  052E  1903               	skipnz
  1415  052F  0AE9               	incf	___fttol@lval+3,f
  1416  0530                     l4681:	
  1417  0530  0869               	movf	___fttol@lval+3,w
  1418  0531  00E1               	movwf	?___fttol+3
  1419  0532  0868               	movf	___fttol@lval+2,w
  1420  0533  00E0               	movwf	?___fttol+2
  1421  0534  0867               	movf	___fttol@lval+1,w
  1422  0535  00DF               	movwf	?___fttol+1
  1423  0536  0866               	movf	___fttol@lval,w
  1424  0537  00DE               	movwf	?___fttol
  1425  0538  0008               	return
  1426  0539                     __end_of___fttol:	
  1427  0539                     __ptext13:	
  1428 ;; *************** function ___lwtoft *****************
  1429 ;; Defined at:
  1430 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;  c               2    3[BANK0 ] unsigned int 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  3    3[BANK0 ] float 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 300/0
  1441 ;;		On exit  : 300/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1444 ;;      Params:         0       3       0       0
  1445 ;;      Locals:         0       0       0       0
  1446 ;;      Temps:          0       0       0       0
  1447 ;;      Totals:         0       3       0       0
  1448 ;;Total ram usage:        3 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    2
  1451 ;; This function calls:
  1452 ;;		___ftpack
  1453 ;; This function is called by:
  1454 ;;		_workCtr
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           
  1459                           ;psect for function ___lwtoft
  1460  0539                     ___lwtoft:	
  1461                           
  1462                           ;incstack = 0
  1463                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1464  0539  084C               	movf	___lwtoft@c,w
  1465  053A  00F2               	movwf	___ftpack@arg
  1466  053B  084D               	movf	___lwtoft@c+1,w
  1467  053C  00F3               	movwf	___ftpack@arg+1
  1468  053D  308E               	movlw	142
  1469  053E  01F4               	clrf	___ftpack@arg+2
  1470  053F  00F5               	movwf	___ftpack@exp
  1471  0540  01F6               	clrf	___ftpack@sign
  1472  0541  2549               	fcall	___ftpack
  1473  0542  0872               	movf	?___ftpack,w
  1474  0543  00CC               	movwf	?___lwtoft
  1475  0544  0873               	movf	?___ftpack+1,w
  1476  0545  00CD               	movwf	?___lwtoft+1
  1477  0546  0874               	movf	?___ftpack+2,w
  1478  0547  00CE               	movwf	?___lwtoft+2
  1479  0548  0008               	return
  1480  0549                     __end_of___lwtoft:	
  1481  0549                     __ptext16:	
  1482 ;; *************** function ___ftpack *****************
  1483 ;; Defined at:
  1484 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  arg             3    2[COMMON] unsigned um
  1487 ;;  exp             1    5[COMMON] unsigned char 
  1488 ;;  sign            1    6[COMMON] unsigned char 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  3    2[COMMON] float 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0
  1495 ;; Tracked objects:
  1496 ;;		On entry : 300/0
  1497 ;;		On exit  : 300/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1500 ;;      Params:         5       0       0       0
  1501 ;;      Locals:         0       0       0       0
  1502 ;;      Temps:          0       3       0       0
  1503 ;;      Totals:         5       3       0       0
  1504 ;;Total ram usage:        8 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    1
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		___ftdiv
  1511 ;;		___lwtoft
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           
  1516                           ;psect for function ___ftpack
  1517  0549                     ___ftpack:	
  1518                           
  1519                           ;incstack = 0
  1520                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1521  0549  0875               	movf	___ftpack@exp,w
  1522  054A  1903               	btfsc	3,2
  1523  054B  2D51               	goto	l1533
  1524  054C  0874               	movf	___ftpack@arg+2,w
  1525  054D  0473               	iorwf	___ftpack@arg+1,w
  1526  054E  0472               	iorwf	___ftpack@arg,w
  1527  054F  1D03               	skipz
  1528  0550  2D58               	goto	l4217
  1529  0551                     l1533:	
  1530  0551  01F2               	clrf	?___ftpack
  1531  0552  01F3               	clrf	?___ftpack+1
  1532  0553  01F4               	clrf	?___ftpack+2
  1533  0554  0008               	return
  1534  0555                     l4215:	
  1535  0555  0AF5               	incf	___ftpack@exp,f
  1536  0556  27C9  118A         	fcall	PL36	;call to abstracted procedure
  1537  0558                     l4217:	
  1538  0558  30FE               	movlw	254
  1539  0559  0574               	andwf	___ftpack@arg+2,w
  1540  055A  1903               	btfsc	3,2
  1541  055B  2D65               	goto	l4221
  1542  055C  2D55               	goto	l4215
  1543  055D                     l4219:	
  1544  055D  0AF5               	incf	___ftpack@exp,f
  1545  055E  0AF2               	incf	___ftpack@arg,f
  1546  055F  1903               	skipnz
  1547  0560  0AF3               	incf	___ftpack@arg+1,f
  1548  0561  1903               	skipnz
  1549  0562  0AF4               	incf	___ftpack@arg+2,f
  1550  0563  27C9  118A         	fcall	PL36	;call to abstracted procedure
  1551  0565                     l4221:	
  1552  0565  30FF               	movlw	255
  1553  0566  0574               	andwf	___ftpack@arg+2,w
  1554  0567  1903               	btfsc	3,2
  1555  0568  2D73               	goto	l4225
  1556  0569  2D5D               	goto	l4219
  1557  056A                     l4227:	
  1558  056A  3002               	movlw	2
  1559  056B  0275               	subwf	___ftpack@exp,w
  1560  056C  1C03               	btfss	3,0
  1561  056D  2D75               	goto	l1545
  1562  056E  03F5               	decf	___ftpack@exp,f
  1563  056F  1003               	clrc
  1564  0570  0DF2               	rlf	___ftpack@arg,f
  1565  0571  0DF3               	rlf	___ftpack@arg+1,f
  1566  0572  0DF4               	rlf	___ftpack@arg+2,f
  1567  0573                     l4225:	
  1568  0573  1FF3               	btfss	___ftpack@arg+1,7
  1569  0574  2D6A               	goto	l4227
  1570  0575                     l1545:	
  1571  0575  1C75               	btfss	___ftpack@exp,0
  1572  0576  13F3               	bcf	___ftpack@arg+1,7
  1573  0577  1003               	clrc
  1574  0578  0CF5               	rrf	___ftpack@exp,f
  1575  0579  0875               	movf	___ftpack@exp,w
  1576  057A  00CB               	movwf	??___ftpack+2
  1577  057B  01CA               	clrf	??___ftpack+1
  1578  057C  01C9               	clrf	??___ftpack
  1579  057D  0849               	movf	??___ftpack,w
  1580  057E  04F2               	iorwf	___ftpack@arg,f
  1581  057F  084A               	movf	??___ftpack+1,w
  1582  0580  04F3               	iorwf	___ftpack@arg+1,f
  1583  0581  084B               	movf	??___ftpack+2,w
  1584  0582  04F4               	iorwf	___ftpack@arg+2,f
  1585  0583  0876               	movf	___ftpack@sign,w
  1586  0584  1D03               	btfss	3,2
  1587  0585  17F4               	bsf	___ftpack@arg+2,7
  1588  0586  0008               	return
  1589  0587                     __end_of___ftpack:	
  1590  0587                     __ptext11:	
  1591 ;; *************** function _ADC_Sample *****************
  1592 ;; Defined at:
  1593 ;;		line 325 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  adch            1    wreg     unsigned char 
  1596 ;;  adldo           1    2[COMMON] unsigned char 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  adch            1    1[BANK0 ] unsigned char 
  1599 ;;  j               1    0[BANK0 ] unsigned char 
  1600 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1601 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1602 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1603 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1604 ;;  i               1    2[BANK0 ] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      unsigned char 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0
  1609 ;; Tracked objects:
  1610 ;;		On entry : 200/0
  1611 ;;		On exit  : 300/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1614 ;;      Params:         1       0       0       0
  1615 ;;      Locals:         0      13       0       0
  1616 ;;      Temps:          4       0       0       0
  1617 ;;      Totals:         5      13       0       0
  1618 ;;Total ram usage:       18 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_fanCtr
  1625 ;;		_workCtr
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _ADC_Sample
  1631  0587                     _ADC_Sample:	
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1635                           ;ADC_Sample@adch stored from wreg
  1636  0587  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0588  00CA               	movwf	ADC_Sample@adch
  1638                           
  1639                           ;main.c: 327: volatile unsigned long adsum = 0;
  1640                           
  1641                           ;main.c: 328: volatile unsigned int admin = 0, admax = 0;
  1642  0589  27B9  118A         	fcall	PL16	;call to abstracted procedure
  1643                           
  1644                           ;main.c: 329: volatile unsigned int ad_temp = 0;
  1645  058B  01D4               	clrf	ADC_Sample@ad_temp	;volatile
  1646  058C  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1647                           
  1648                           ;main.c: 331: if ((!LDO_EN) && (adldo & 0x04) )
  1649  058D  1683               	bsf	3,5	;RP0=1, select bank1
  1650  058E  1D16               	btfss	22,2	;volatile
  1651  058F  1D72               	btfss	ADC_Sample@adldo,2
  1652  0590  2D99               	goto	l4103
  1653                           
  1654                           ;main.c: 332: {
  1655                           ;main.c: 334: ADCON1 = adldo;
  1656  0591  0872               	movf	ADC_Sample@adldo,w
  1657  0592  0096               	movwf	22	;volatile
  1658                           
  1659                           ;main.c: 335: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1660  0593  3042               	movlw	66
  1661  0594  00F3               	movwf	??_ADC_Sample
  1662  0595                     u5207:	
  1663  0595  0BF3               	decfsz	??_ADC_Sample,f
  1664  0596  2D95               	goto	u5207
  1665  0597  0000               	nop
  1666                           
  1667                           ;main.c: 336: }
  1668  0598  2D9B               	goto	l4105
  1669  0599                     l4103:	
  1670                           
  1671                           ;main.c: 337: else
  1672                           ;main.c: 338: ADCON1 = adldo;
  1673  0599  0872               	movf	ADC_Sample@adldo,w
  1674  059A  0096               	movwf	22	;volatile
  1675  059B                     l4105:	
  1676                           
  1677                           ;main.c: 340: if(adch & 0x10)
  1678  059B  1283               	bcf	3,5	;RP0=0, select bank0
  1679  059C  1303               	bcf	3,6	;RP1=0, select bank0
  1680  059D  1E4A               	btfss	ADC_Sample@adch,4
  1681  059E  2DA4               	goto	l4113
  1682                           
  1683                           ;main.c: 341: {
  1684                           ;main.c: 342: CHS4 = 1;
  1685  059F  1683               	bsf	3,5	;RP0=1, select bank1
  1686  05A0  1716               	bsf	22,6	;volatile
  1687                           
  1688                           ;main.c: 343: adch &= 0x0f;
  1689  05A1  300F               	movlw	15
  1690  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1691  05A3  05CA               	andwf	ADC_Sample@adch,f
  1692  05A4                     l4113:	
  1693                           
  1694                           ;main.c: 346: for (i = 0; i < 10; i++)
  1695  05A4  01CB               	clrf	ADC_Sample@i
  1696  05A5                     l4119:	
  1697                           
  1698                           ;main.c: 347: {
  1699                           ;main.c: 348: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1700  05A5  084A               	movf	ADC_Sample@adch,w
  1701  05A6  00F3               	movwf	??_ADC_Sample
  1702  05A7  3001               	movlw	1
  1703  05A8  1003               	clrc
  1704  05A9                     L3:	
  1705  05A9  0DF3               	rlf	??_ADC_Sample,f
  1706  05AA  3EFF               	addlw	-1
  1707  05AB  1003               	clrc
  1708  05AC  1D03               	skipz
  1709  05AD  2DA9               	goto	L3
  1710  05AE  0D73               	rlf	??_ADC_Sample,w
  1711  05AF  3841               	iorlw	65
  1712  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  1713  05B1  0095               	movwf	21	;volatile
  1714  05B2  0000               	nop	;# 
  1715  05B3  0000               	nop	;# 
  1716  05B4  0000               	nop	;# 
  1717  05B5  0000               	nop	;# 
  1718                           
  1719                           ;main.c: 353: GODONE = 1;
  1720  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  1721  05B7  1303               	bcf	3,6	;RP1=0, select bank1
  1722  05B8  1495               	bsf	21,1	;volatile
  1723                           
  1724                           ;main.c: 355: unsigned char j = 0;
  1725  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1726  05BA  01C9               	clrf	ADC_Sample@j
  1727  05BB                     l999:	
  1728                           ;main.c: 356: while (GODONE)
  1729                           
  1730  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  1731  05BC  1C95               	btfss	21,1	;volatile
  1732  05BD  2DC5               	goto	l4129
  1733                           
  1734                           ;main.c: 357: {
  1735                           ;main.c: 358: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1736  05BE  2DBF               	nop2	;2 cycle nop
  1737  05BF  2DC0               	nop2	;2 cycle nop
  1738                           
  1739                           ;main.c: 360: if (0 == (--j))
  1740  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1741  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1742  05C2  0BC9               	decfsz	ADC_Sample@j,f
  1743  05C3  2DBB               	goto	l999
  1744                           
  1745                           ;main.c: 361: return 0;
  1746  05C4  3400               	retlw	0
  1747  05C5                     l4129:	
  1748                           
  1749                           ;main.c: 362: }
  1750                           ;main.c: 364: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1751  05C5  0819               	movf	25,w	;volatile
  1752  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  1753  05C7  00D4               	movwf	ADC_Sample@ad_temp	;volatile
  1754  05C8  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1755  05C9  0ED4               	swapf	ADC_Sample@ad_temp,f	;volatile
  1756  05CA  0ED5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1757  05CB  30F0               	movlw	240
  1758  05CC  05D5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1759  05CD  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1760  05CE  390F               	andlw	15
  1761  05CF  04D5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1762  05D0  30F0               	movlw	240
  1763  05D1  05D4               	andwf	ADC_Sample@ad_temp,f	;volatile
  1764  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  1765  05D3  0E18               	swapf	24,w	;volatile
  1766  05D4  390F               	andlw	15
  1767  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1768  05D6  07D4               	addwf	ADC_Sample@ad_temp,f	;volatile
  1769  05D7  1803               	skipnc
  1770  05D8  0AD5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1771                           
  1772                           ;main.c: 366: if (0 == admax)
  1773  05D9  0852               	movf	ADC_Sample@admax,w	;volatile
  1774  05DA  0453               	iorwf	ADC_Sample@admax+1,w	;volatile
  1775  05DB  1D03               	btfss	3,2
  1776  05DC  2DE0               	goto	l4137
  1777                           
  1778                           ;main.c: 367: {
  1779                           ;main.c: 368: admax = ad_temp;
  1780  05DD  27CE  118A         	fcall	PL40	;call to abstracted procedure
  1781  05DF  2DF3               	goto	l4143
  1782  05E0                     l4137:	
  1783                           ;main.c: 370: }
  1784                           
  1785                           ;main.c: 369: admin = ad_temp;
  1786                           
  1787                           
  1788                           ;main.c: 371: else if (ad_temp > admax)
  1789  05E0  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1790  05E1  0253               	subwf	ADC_Sample@admax+1,w	;volatile
  1791  05E2  1D03               	skipz
  1792  05E3  2DE6               	goto	u3945
  1793  05E4  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1794  05E5  0252               	subwf	ADC_Sample@admax,w	;volatile
  1795  05E6                     u3945:	
  1796  05E6  1803               	skipnc
  1797  05E7  2DEB               	goto	l4141
  1798                           
  1799                           ;main.c: 372: admax = ad_temp;
  1800  05E8  27CE  118A         	fcall	PL40	;call to abstracted procedure
  1801  05EA  2DF7               	goto	l1005
  1802  05EB                     l4141:	
  1803                           
  1804                           ;main.c: 373: else if (ad_temp < admin)
  1805  05EB  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1806  05EC  0255               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1807  05ED  1D03               	skipz
  1808  05EE  2DF1               	goto	u3955
  1809  05EF  0850               	movf	ADC_Sample@admin,w	;volatile
  1810  05F0  0254               	subwf	ADC_Sample@ad_temp,w	;volatile
  1811  05F1                     u3955:	
  1812  05F1  1803               	skipnc
  1813  05F2  2DF7               	goto	l1005
  1814  05F3                     l4143:	
  1815                           
  1816                           ;main.c: 374: admin = ad_temp;
  1817  05F3  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1818  05F4  00D1               	movwf	ADC_Sample@admin+1	;volatile
  1819  05F5  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1820  05F6  00D0               	movwf	ADC_Sample@admin	;volatile
  1821  05F7                     l1005:	
  1822                           
  1823                           ;main.c: 376: adsum += ad_temp;
  1824  05F7  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1825  05F8  00F3               	movwf	??_ADC_Sample
  1826  05F9  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1827  05FA  00F4               	movwf	??_ADC_Sample+1
  1828  05FB  01F5               	clrf	??_ADC_Sample+2
  1829  05FC  01F6               	clrf	??_ADC_Sample+3
  1830  05FD  0873               	movf	??_ADC_Sample,w
  1831  05FE  07CC               	addwf	ADC_Sample@adsum,f	;volatile
  1832  05FF  0874               	movf	??_ADC_Sample+1,w
  1833  0600  1103               	clrz
  1834  0601  1803               	skipnc
  1835  0602  3E01               	addlw	1
  1836  0603  1D03               	btfss	3,2
  1837  0604  07CD               	addwf	ADC_Sample@adsum+1,f	;volatile
  1838  0605  0875               	movf	??_ADC_Sample+2,w
  1839  0606  1103               	clrz
  1840  0607  1803               	skipnc
  1841  0608  3E01               	addlw	1
  1842  0609  1D03               	btfss	3,2
  1843  060A  07CE               	addwf	ADC_Sample@adsum+2,f	;volatile
  1844  060B  0876               	movf	??_ADC_Sample+3,w
  1845  060C  1103               	clrz
  1846  060D  1803               	skipnc
  1847  060E  3E01               	addlw	1
  1848  060F  1D03               	btfss	3,2
  1849  0610  07CF               	addwf	ADC_Sample@adsum+3,f	;volatile
  1850  0611  300A               	movlw	10
  1851  0612  0ACB               	incf	ADC_Sample@i,f
  1852  0613  024B               	subwf	ADC_Sample@i,w
  1853  0614  1C03               	skipc
  1854  0615  2DA5               	goto	l4119
  1855                           
  1856                           ;main.c: 377: }
  1857                           ;main.c: 378: adsum -= admax;
  1858  0616  0852               	movf	ADC_Sample@admax,w	;volatile
  1859  0617  00F3               	movwf	??_ADC_Sample
  1860  0618  0853               	movf	ADC_Sample@admax+1,w	;volatile
  1861  0619  27AA  118A         	fcall	PL6	;call to abstracted procedure
  1862  061B  1C03               	skipc
  1863  061C  0F76               	incfsz	??_ADC_Sample+3,w
  1864  061D  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1865                           
  1866                           ;main.c: 379: if (adsum >= admin)
  1867  061E  0850               	movf	ADC_Sample@admin,w	;volatile
  1868  061F  00F3               	movwf	??_ADC_Sample
  1869  0620  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1870  0621  00F4               	movwf	??_ADC_Sample+1
  1871  0622  01F5               	clrf	??_ADC_Sample+2
  1872  0623  01F6               	clrf	??_ADC_Sample+3
  1873  0624  0876               	movf	??_ADC_Sample+3,w
  1874  0625  024F               	subwf	ADC_Sample@adsum+3,w	;volatile
  1875  0626  1D03               	skipz
  1876  0627  2E32               	goto	u3995
  1877  0628  0875               	movf	??_ADC_Sample+2,w
  1878  0629  024E               	subwf	ADC_Sample@adsum+2,w	;volatile
  1879  062A  1D03               	skipz
  1880  062B  2E32               	goto	u3995
  1881  062C  0874               	movf	??_ADC_Sample+1,w
  1882  062D  024D               	subwf	ADC_Sample@adsum+1,w	;volatile
  1883  062E  1D03               	skipz
  1884  062F  2E32               	goto	u3995
  1885  0630  0873               	movf	??_ADC_Sample,w
  1886  0631  024C               	subwf	ADC_Sample@adsum,w	;volatile
  1887  0632                     u3995:	
  1888  0632  1C03               	skipc
  1889  0633  2E3D               	goto	l1009
  1890                           
  1891                           ;main.c: 380: adsum -= admin;
  1892  0634  0850               	movf	ADC_Sample@admin,w	;volatile
  1893  0635  00F3               	movwf	??_ADC_Sample
  1894  0636  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1895  0637  27AA  118A         	fcall	PL6	;call to abstracted procedure
  1896  0639  1C03               	skipc
  1897  063A  0F76               	incfsz	??_ADC_Sample+3,w
  1898  063B  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1899  063C  2E41               	goto	l4153
  1900  063D                     l1009:	
  1901                           
  1902                           ;main.c: 381: else
  1903                           ;main.c: 382: adsum = 0;
  1904  063D  01CC               	clrf	ADC_Sample@adsum	;volatile
  1905  063E  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  1906  063F  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  1907  0640  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  1908  0641                     l4153:	
  1909                           
  1910                           ;main.c: 384: adresult = adsum >> 3;
  1911  0641  084C               	movf	ADC_Sample@adsum,w	;volatile
  1912  0642  00F3               	movwf	??_ADC_Sample
  1913  0643  084D               	movf	ADC_Sample@adsum+1,w	;volatile
  1914  0644  00F4               	movwf	??_ADC_Sample+1
  1915  0645  084E               	movf	ADC_Sample@adsum+2,w	;volatile
  1916  0646  00F5               	movwf	??_ADC_Sample+2
  1917  0647  084F               	movf	ADC_Sample@adsum+3,w	;volatile
  1918  0648  00F6               	movwf	??_ADC_Sample+3
  1919  0649  3003               	movlw	3
  1920  064A                     u4015:	
  1921  064A  1003               	clrc
  1922  064B  0CF6               	rrf	??_ADC_Sample+3,f
  1923  064C  0CF5               	rrf	??_ADC_Sample+2,f
  1924  064D  0CF4               	rrf	??_ADC_Sample+1,f
  1925  064E  0CF3               	rrf	??_ADC_Sample,f
  1926  064F  3EFF               	addlw	-1
  1927  0650  1D03               	skipz
  1928  0651  2E4A               	goto	u4015
  1929  0652  0874               	movf	??_ADC_Sample+1,w
  1930  0653  00C8               	movwf	_adresult+1	;volatile
  1931  0654  0873               	movf	??_ADC_Sample,w
  1932  0655  00C7               	movwf	_adresult	;volatile
  1933                           
  1934                           ;main.c: 386: adsum = 0;
  1935                           
  1936                           ;main.c: 387: admin = 0;
  1937                           
  1938                           ;main.c: 388: admax = 0;
  1939  0656  27B9               	fcall	PL16	;call to abstracted procedure
  1940                           
  1941                           ;main.c: 389: return 0xA5;
  1942  0657  34A5               	retlw	165
  1943  0658                     __end_of_ADC_Sample:	
  1944  0658                     __ptext7:	
  1945 ;; *************** function _fanCtr *****************
  1946 ;; Defined at:
  1947 ;;		line 538 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1952 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0, pclath, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 300/100
  1959 ;;		On exit  : 200/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1962 ;;      Params:         0       0       0       0
  1963 ;;      Locals:         0       5       0       0
  1964 ;;      Temps:          0       0       0       0
  1965 ;;      Totals:         0       5       0       0
  1966 ;;Total ram usage:        5 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    2
  1969 ;; This function calls:
  1970 ;;		_ADC_Sample
  1971 ;;		___lmul
  1972 ;;		_fanInit
  1973 ;;		_fanStop
  1974 ;; This function is called by:
  1975 ;;		_workCtr
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           
  1980                           ;psect for function _fanCtr
  1981  0658                     _fanCtr:	
  1982                           
  1983                           ;main.c: 540: if(workStep > 0)
  1984                           
  1985                           ;incstack = 0
  1986                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1987  0658  087B               	movf	_workStep,w
  1988  0659  1903               	btfsc	3,2
  1989  065A  2EC7               	goto	l4431
  1990                           
  1991                           ;main.c: 541: {
  1992                           ;main.c: 542: PORTA |= 0x02;
  1993  065B  1486               	bsf	6,1	;volatile
  1994                           
  1995                           ;main.c: 543: unsigned char maxFanValue = 52;
  1996  065C  3034               	movlw	52
  1997  065D  1283               	bcf	3,5	;RP0=0, select bank0
  1998  065E  00D6               	movwf	fanCtr@maxFanValue
  1999                           
  2000                           ;main.c: 544: if(workStep == 1)
  2001  065F  0B7B               	decfsz	_workStep,w
  2002  0660  2E63               	goto	l1061
  2003                           
  2004                           ;main.c: 545: {
  2005                           ;main.c: 546: maxFanValue = 40;
  2006  0661  3028               	movlw	40
  2007  0662  00D6               	movwf	fanCtr@maxFanValue
  2008  0663                     l1061:	
  2009                           
  2010                           ;main.c: 547: }
  2011                           ;main.c: 548: if(power_ad < 3150)
  2012  0663  300C               	movlw	12
  2013  0664  0225               	subwf	_power_ad+1,w	;volatile
  2014  0665  304E               	movlw	78
  2015  0666  1903               	skipnz
  2016  0667  0224               	subwf	_power_ad,w	;volatile
  2017  0668  1803               	skipnc
  2018  0669  2E6C               	goto	l4395
  2019                           
  2020                           ;main.c: 549: {
  2021                           ;main.c: 550: maxFanValue = 32;
  2022  066A  3020               	movlw	32
  2023  066B  00D6               	movwf	fanCtr@maxFanValue
  2024  066C                     l4395:	
  2025                           
  2026                           ;main.c: 551: }
  2027                           ;main.c: 552: if(workStep == 3)
  2028  066C  3003               	movlw	3
  2029  066D  067B               	xorwf	_workStep,w
  2030  066E  1D03               	btfss	3,2
  2031  066F  2E72               	goto	l4399
  2032                           
  2033                           ;main.c: 553: {
  2034                           ;main.c: 554: maxFanValue = 10;
  2035  0670  300A               	movlw	10
  2036  0671  00D6               	movwf	fanCtr@maxFanValue
  2037  0672                     l4399:	
  2038  0672  3002               	movlw	2
  2039                           
  2040                           ;main.c: 555: }
  2041                           ;main.c: 556: test_adc = ADC_Sample(2, 0);
  2042  0673  01F2               	clrf	ADC_Sample@adldo
  2043  0674  2587  118A         	fcall	_ADC_Sample
  2044  0676  00B5               	movwf	_test_adc	;volatile
  2045                           
  2046                           ;main.c: 557: if (0xA5 == test_adc)
  2047  0677  30A5               	movlw	165
  2048  0678  0635               	xorwf	_test_adc,w	;volatile
  2049  0679  1D03               	btfss	3,2
  2050  067A  2EA5               	goto	l4411
  2051                           
  2052                           ;main.c: 558: {
  2053                           ;main.c: 559: volatile unsigned long fan_temp;
  2054                           ;main.c: 560: if(power_ad > 0)
  2055  067B  0824               	movf	_power_ad,w	;volatile
  2056  067C  0425               	iorwf	_power_ad+1,w	;volatile
  2057  067D  1903               	btfsc	3,2
  2058  067E  2EA5               	goto	l4411
  2059                           
  2060                           ;main.c: 561: {
  2061                           ;main.c: 562: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2062  067F  0847               	movf	_adresult,w	;volatile
  2063  0680  00C9               	movwf	___lmul@multiplier
  2064  0681  0848               	movf	_adresult+1,w	;volatile
  2065  0682  00CA               	movwf	___lmul@multiplier+1
  2066  0683  01CB               	clrf	___lmul@multiplier+2
  2067  0684  01CC               	clrf	___lmul@multiplier+3
  2068  0685  0824               	movf	_power_ad,w	;volatile
  2069  0686  00CD               	movwf	___lmul@multiplicand
  2070  0687  0825               	movf	_power_ad+1,w	;volatile
  2071  0688  00CE               	movwf	___lmul@multiplicand+1
  2072  0689  01CF               	clrf	___lmul@multiplicand+2
  2073  068A  01D0               	clrf	___lmul@multiplicand+3
  2074  068B  26CD  118A         	fcall	___lmul
  2075  068D  084C               	movf	?___lmul+3,w
  2076  068E  00DA               	movwf	fanCtr@fan_temp+3	;volatile
  2077  068F  084B               	movf	?___lmul+2,w
  2078  0690  00D9               	movwf	fanCtr@fan_temp+2	;volatile
  2079  0691  084A               	movf	?___lmul+1,w
  2080  0692  00D8               	movwf	fanCtr@fan_temp+1	;volatile
  2081  0693  0849               	movf	?___lmul,w
  2082  0694  00D7               	movwf	fanCtr@fan_temp	;volatile
  2083  0695  300C               	movlw	12
  2084  0696                     u4445:	
  2085  0696  1003               	clrc
  2086  0697  0CDA               	rrf	fanCtr@fan_temp+3,f	;volatile
  2087  0698  0CD9               	rrf	fanCtr@fan_temp+2,f	;volatile
  2088  0699  0CD8               	rrf	fanCtr@fan_temp+1,f	;volatile
  2089  069A  0CD7               	rrf	fanCtr@fan_temp,f	;volatile
  2090  069B  3EFF               	addlw	-1
  2091  069C  1D03               	skipz
  2092  069D  2E96               	goto	u4445
  2093                           
  2094                           ;main.c: 563: fanValue = (unsigned int)(fan_temp);
  2095  069E  0858               	movf	fanCtr@fan_temp+1,w	;volatile
  2096  069F  1683               	bsf	3,5	;RP0=1, select bank1
  2097  06A0  00CA               	movwf	(_fanValue+1)^(0+128)
  2098  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  2099  06A2  0857               	movf	fanCtr@fan_temp,w	;volatile
  2100  06A3  1683               	bsf	3,5	;RP0=1, select bank1
  2101  06A4  00C9               	movwf	_fanValue^(0+128)
  2102  06A5                     l4411:	
  2103                           
  2104                           ;main.c: 564: }
  2105                           ;main.c: 565: }
  2106                           ;main.c: 566: if(fanValue > 1300)
  2107  06A5  3005               	movlw	5
  2108  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  2109  06A7  024A               	subwf	(_fanValue+1)^(0+128),w
  2110  06A8  3015               	movlw	21
  2111  06A9  1903               	skipnz
  2112  06AA  0249               	subwf	_fanValue^(0+128),w
  2113  06AB  1C03               	skipc
  2114  06AC  2EBA               	goto	l4419
  2115                           
  2116                           ;main.c: 567: {
  2117                           ;main.c: 568: if(++fanOverTime > 50)
  2118  06AD  3033               	movlw	51
  2119  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2120  06AF  0AC1               	incf	_fanOverTime,f
  2121  06B0  0241               	subwf	_fanOverTime,w
  2122  06B1  1C03               	skipc
  2123  06B2  2EBC               	goto	l4421
  2124  06B3  30C2               	movlw	194
  2125                           
  2126                           ;main.c: 569: {
  2127                           ;main.c: 570: fanOverTime = 0;
  2128  06B4  01C1               	clrf	_fanOverTime
  2129                           
  2130                           ;main.c: 571: workStep = 0;
  2131  06B5  01FB               	clrf	_workStep
  2132                           
  2133                           ;main.c: 572: shanshuoTime = 450;
  2134  06B6  00AC               	movwf	_shanshuoTime
  2135  06B7  3001               	movlw	1
  2136  06B8  00AD               	movwf	_shanshuoTime+1
  2137  06B9  2EBC               	goto	l4421
  2138  06BA                     l4419:	
  2139                           
  2140                           ;main.c: 575: else
  2141                           ;main.c: 576: {
  2142                           ;main.c: 577: fanOverTime = 0;
  2143  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  2144  06BB  01C1               	clrf	_fanOverTime
  2145  06BC                     l4421:	
  2146                           
  2147                           ;main.c: 578: }
  2148                           ;main.c: 579: if(fanDuty < maxFanValue)
  2149  06BC  0856               	movf	fanCtr@maxFanValue,w
  2150  06BD  0243               	subwf	_fanDuty,w
  2151  06BE  1803               	skipnc
  2152  06BF  2EC2               	goto	l4425
  2153                           
  2154                           ;main.c: 580: {
  2155                           ;main.c: 581: fanDuty++;
  2156  06C0  0AC3               	incf	_fanDuty,f
  2157                           
  2158                           ;main.c: 582: }
  2159  06C1  2EC6               	goto	l4429
  2160  06C2                     l4425:	
  2161                           
  2162                           ;main.c: 583: else if(fanDuty > maxFanValue)
  2163  06C2  0843               	movf	_fanDuty,w
  2164  06C3  0256               	subwf	fanCtr@maxFanValue,w
  2165  06C4  1C03               	btfss	3,0
  2166                           
  2167                           ;main.c: 584: {
  2168                           ;main.c: 585: fanDuty--;
  2169  06C5  03C3               	decf	_fanDuty,f
  2170  06C6                     l4429:	
  2171                           
  2172                           ;main.c: 586: }
  2173                           ;main.c: 587: fanInit();
  2174  06C6  2F99               	ljmp	l4181
  2175  06C7                     l4431:	
  2176                           ;main.c: 588: }
  2177                           
  2178                           
  2179                           ;main.c: 589: else
  2180                           ;main.c: 590: {
  2181                           ;main.c: 591: fanStop();
  2182  06C7  27A4               	fcall	_fanStop
  2183                           
  2184                           ;main.c: 592: fanDuty = 0;
  2185  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2186  06C9  01C3               	clrf	_fanDuty
  2187                           
  2188                           ;main.c: 593: PORTA &= 0xFD;
  2189  06CA  1683               	bsf	3,5	;RP0=1, select bank1
  2190  06CB  1086               	bcf	6,1	;volatile
  2191  06CC  0008               	return
  2192  06CD                     __end_of_fanCtr:	
  2193  06CD                     __ptext10:	
  2194 ;; *************** function ___lmul *****************
  2195 ;; Defined at:
  2196 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2199 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  product         4    2[COMMON] unsigned long 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  4    0[BANK0 ] unsigned long 
  2204 ;; Registers used:
  2205 ;;		wreg, status,2, status,0
  2206 ;; Tracked objects:
  2207 ;;		On entry : 300/0
  2208 ;;		On exit  : 300/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2211 ;;      Params:         0       8       0       0
  2212 ;;      Locals:         4       0       0       0
  2213 ;;      Temps:          0       0       0       0
  2214 ;;      Totals:         4       8       0       0
  2215 ;;Total ram usage:       12 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_fanCtr
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           
  2226                           ;psect for function ___lmul
  2227  06CD                     ___lmul:	
  2228                           
  2229                           ;incstack = 0
  2230                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2231  06CD  01F2               	clrf	___lmul@product
  2232  06CE  01F3               	clrf	___lmul@product+1
  2233  06CF  01F4               	clrf	___lmul@product+2
  2234  06D0  01F5               	clrf	___lmul@product+3
  2235  06D1                     l1388:	
  2236  06D1  1C49               	btfss	___lmul@multiplier,0
  2237  06D2  2EE7               	goto	l4203
  2238  06D3  084D               	movf	___lmul@multiplicand,w
  2239  06D4  07F2               	addwf	___lmul@product,f
  2240  06D5  084E               	movf	___lmul@multiplicand+1,w
  2241  06D6  1103               	clrz
  2242  06D7  1803               	skipnc
  2243  06D8  3E01               	addlw	1
  2244  06D9  1D03               	btfss	3,2
  2245  06DA  07F3               	addwf	___lmul@product+1,f
  2246  06DB  084F               	movf	___lmul@multiplicand+2,w
  2247  06DC  1103               	clrz
  2248  06DD  1803               	skipnc
  2249  06DE  3E01               	addlw	1
  2250  06DF  1D03               	btfss	3,2
  2251  06E0  07F4               	addwf	___lmul@product+2,f
  2252  06E1  0850               	movf	___lmul@multiplicand+3,w
  2253  06E2  1103               	clrz
  2254  06E3  1803               	skipnc
  2255  06E4  3E01               	addlw	1
  2256  06E5  1D03               	btfss	3,2
  2257  06E6  07F5               	addwf	___lmul@product+3,f
  2258  06E7                     l4203:	
  2259  06E7  1003               	clrc
  2260  06E8  0DCD               	rlf	___lmul@multiplicand,f
  2261  06E9  0DCE               	rlf	___lmul@multiplicand+1,f
  2262  06EA  0DCF               	rlf	___lmul@multiplicand+2,f
  2263  06EB  0DD0               	rlf	___lmul@multiplicand+3,f
  2264  06EC  1003               	clrc
  2265  06ED  0CCC               	rrf	___lmul@multiplier+3,f
  2266  06EE  0CCB               	rrf	___lmul@multiplier+2,f
  2267  06EF  0CCA               	rrf	___lmul@multiplier+1,f
  2268  06F0  0CC9               	rrf	___lmul@multiplier,f
  2269  06F1  084C               	movf	___lmul@multiplier+3,w
  2270  06F2  044B               	iorwf	___lmul@multiplier+2,w
  2271  06F3  044A               	iorwf	___lmul@multiplier+1,w
  2272  06F4  0449               	iorwf	___lmul@multiplier,w
  2273  06F5  1D03               	skipz
  2274  06F6  2ED1               	goto	l1388
  2275  06F7  0875               	movf	___lmul@product+3,w
  2276  06F8  00CC               	movwf	?___lmul+3
  2277  06F9  0874               	movf	___lmul@product+2,w
  2278  06FA  00CB               	movwf	?___lmul+2
  2279  06FB  0873               	movf	___lmul@product+1,w
  2280  06FC  00CA               	movwf	?___lmul+1
  2281  06FD  0872               	movf	___lmul@product,w
  2282  06FE  00C9               	movwf	?___lmul
  2283  06FF  0008               	return
  2284  0700                     __end_of___lmul:	
  2285  0700                     __ptext5:	
  2286 ;; *************** function _keyLedCtr *****************
  2287 ;; Defined at:
  2288 ;;		line 424 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 300/100
  2299 ;;		On exit  : 300/100
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2302 ;;      Params:         0       0       0       0
  2303 ;;      Locals:         0       0       0       0
  2304 ;;      Temps:          0       0       0       0
  2305 ;;      Totals:         0       0       0       0
  2306 ;;Total ram usage:        0 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    2
  2309 ;; This function calls:
  2310 ;;		___lwmod
  2311 ;; This function is called by:
  2312 ;;		_workCtr
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _keyLedCtr
  2318  0700                     _keyLedCtr:	
  2319                           
  2320                           ;main.c: 426: if(shanshuoTime > 0)
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2324  0700  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0701  082C               	movf	_shanshuoTime,w
  2326  0702  042D               	iorwf	_shanshuoTime+1,w
  2327  0703  1903               	btfsc	3,2
  2328  0704  2F1E               	goto	l4349
  2329                           
  2330                           ;main.c: 427: {
  2331                           ;main.c: 428: shanshuoTime--;
  2332  0705  3001               	movlw	1
  2333  0706  02AC               	subwf	_shanshuoTime,f
  2334  0707  3000               	movlw	0
  2335  0708  1C03               	skipc
  2336  0709  03AD               	decf	_shanshuoTime+1,f
  2337  070A  02AD               	subwf	_shanshuoTime+1,f
  2338                           
  2339                           ;main.c: 429: if((shanshuoTime % 150) < 75)
  2340  070B  3096               	movlw	150
  2341  070C  00F2               	movwf	___lwmod@divisor
  2342  070D  01F3               	clrf	___lwmod@divisor+1
  2343  070E  082D               	movf	_shanshuoTime+1,w
  2344  070F  00F5               	movwf	___lwmod@dividend+1
  2345  0710  082C               	movf	_shanshuoTime,w
  2346  0711  00F4               	movwf	___lwmod@dividend
  2347  0712  2775  118A         	fcall	___lwmod
  2348  0714  3000               	movlw	0
  2349  0715  0273               	subwf	?___lwmod+1,w
  2350  0716  304B               	movlw	75
  2351  0717  1903               	skipnz
  2352  0718  0272               	subwf	?___lwmod,w
  2353  0719  1803               	skipnc
  2354  071A  2F21               	goto	l1022
  2355  071B                     l4347:	
  2356                           
  2357                           ;main.c: 430: {
  2358                           ;main.c: 431: PORTC |= 0x01;
  2359  071B  1703               	bsf	3,6	;RP1=1, select bank2
  2360  071C  1406               	bsf	6,0	;volatile
  2361                           
  2362                           ;main.c: 432: }
  2363  071D  2F23               	goto	l4353
  2364  071E                     l4349:	
  2365                           
  2366                           ;main.c: 438: else if(workStep > 0)
  2367  071E  087B               	movf	_workStep,w
  2368  071F  1903               	btfsc	3,2
  2369  0720  2F1B               	goto	l4347
  2370  0721                     l1022:	
  2371                           
  2372                           ;main.c: 433: else
  2373                           ;main.c: 434: {
  2374                           ;main.c: 435: PORTC &= 0xFE;
  2375  0721  1703               	bsf	3,6	;RP1=1, select bank2
  2376  0722  1006               	bcf	6,0	;volatile
  2377  0723                     l4353:	
  2378                           
  2379                           ;main.c: 445: }
  2380                           ;main.c: 447: if(shanshuoTime2 > 0)
  2381  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0724  082A               	movf	_shanshuoTime2,w
  2383  0725  042B               	iorwf	_shanshuoTime2+1,w
  2384  0726  1903               	btfsc	3,2
  2385  0727  2F41               	goto	l4361
  2386                           
  2387                           ;main.c: 448: {
  2388                           ;main.c: 449: shanshuoTime2--;
  2389  0728  3001               	movlw	1
  2390  0729  02AA               	subwf	_shanshuoTime2,f
  2391  072A  3000               	movlw	0
  2392  072B  1C03               	skipc
  2393  072C  03AB               	decf	_shanshuoTime2+1,f
  2394  072D  02AB               	subwf	_shanshuoTime2+1,f
  2395                           
  2396                           ;main.c: 450: if((shanshuoTime2 % 150) < 75)
  2397  072E  3096               	movlw	150
  2398  072F  00F2               	movwf	___lwmod@divisor
  2399  0730  01F3               	clrf	___lwmod@divisor+1
  2400  0731  082B               	movf	_shanshuoTime2+1,w
  2401  0732  00F5               	movwf	___lwmod@dividend+1
  2402  0733  082A               	movf	_shanshuoTime2,w
  2403  0734  00F4               	movwf	___lwmod@dividend
  2404  0735  2775  118A         	fcall	___lwmod
  2405  0737  3000               	movlw	0
  2406  0738  0273               	subwf	?___lwmod+1,w
  2407  0739  304B               	movlw	75
  2408  073A  1903               	skipnz
  2409  073B  0272               	subwf	?___lwmod,w
  2410  073C  1803               	skipnc
  2411  073D  2F44               	goto	l1028
  2412  073E                     l4359:	
  2413                           
  2414                           ;main.c: 451: {
  2415                           ;main.c: 452: PORTC |= 0x02;
  2416  073E  1703               	bsf	3,6	;RP1=1, select bank2
  2417  073F  1486               	bsf	6,1	;volatile
  2418                           
  2419                           ;main.c: 453: }
  2420  0740  2F46               	goto	l4365
  2421  0741                     l4361:	
  2422                           
  2423                           ;main.c: 459: else if(wuhuaFlag > 0)
  2424  0741  0844               	movf	_wuhuaFlag,w
  2425  0742  1903               	btfsc	3,2
  2426  0743  2F3E               	goto	l4359
  2427  0744                     l1028:	
  2428                           
  2429                           ;main.c: 454: else
  2430                           ;main.c: 455: {
  2431                           ;main.c: 456: PORTC &= 0xFD;
  2432  0744  1703               	bsf	3,6	;RP1=1, select bank2
  2433  0745  1086               	bcf	6,1	;volatile
  2434  0746                     l4365:	
  2435                           
  2436                           ;main.c: 466: }
  2437                           ;main.c: 467: if(shanshuoTime3 > 0)
  2438  0746  1303               	bcf	3,6	;RP1=0, select bank0
  2439  0747  0828               	movf	_shanshuoTime3,w
  2440  0748  0429               	iorwf	_shanshuoTime3+1,w
  2441  0749  1903               	btfsc	3,2
  2442  074A  2F67               	goto	l4373
  2443                           
  2444                           ;main.c: 468: {
  2445                           ;main.c: 469: shanshuoTime3--;
  2446  074B  3001               	movlw	1
  2447  074C  02A8               	subwf	_shanshuoTime3,f
  2448  074D  3000               	movlw	0
  2449  074E  1C03               	skipc
  2450  074F  03A9               	decf	_shanshuoTime3+1,f
  2451  0750  02A9               	subwf	_shanshuoTime3+1,f
  2452                           
  2453                           ;main.c: 470: if((shanshuoTime3 % 150) < 75)
  2454  0751  3096               	movlw	150
  2455  0752  00F2               	movwf	___lwmod@divisor
  2456  0753  01F3               	clrf	___lwmod@divisor+1
  2457  0754  0829               	movf	_shanshuoTime3+1,w
  2458  0755  00F5               	movwf	___lwmod@dividend+1
  2459  0756  0828               	movf	_shanshuoTime3,w
  2460  0757  00F4               	movwf	___lwmod@dividend
  2461  0758  2775  118A         	fcall	___lwmod
  2462  075A  3000               	movlw	0
  2463  075B  0273               	subwf	?___lwmod+1,w
  2464  075C  304B               	movlw	75
  2465  075D  1903               	skipnz
  2466  075E  0272               	subwf	?___lwmod,w
  2467  075F  1803               	skipnc
  2468  0760  2F64               	goto	l1034
  2469  0761                     l4371:	
  2470                           
  2471                           ;main.c: 471: {
  2472                           ;main.c: 472: PORTA |= 0x01;
  2473  0761  1683               	bsf	3,5	;RP0=1, select bank1
  2474  0762  1406               	bsf	6,0	;volatile
  2475                           
  2476                           ;main.c: 473: }
  2477  0763  0008               	return
  2478  0764                     l1034:	
  2479                           
  2480                           ;main.c: 474: else
  2481                           ;main.c: 475: {
  2482                           ;main.c: 476: PORTA &= 0xFE;
  2483  0764  1683               	bsf	3,5	;RP0=1, select bank1
  2484  0765  1006               	bcf	6,0	;volatile
  2485  0766  0008               	return
  2486  0767                     l4373:	
  2487                           
  2488                           ;main.c: 479: else if(bujinFlag)
  2489  0767  083B               	movf	_bujinFlag,w
  2490  0768  1D03               	btfss	3,2
  2491  0769  2F64               	goto	l1034
  2492                           
  2493                           ;main.c: 483: else if(chrgFlag)
  2494  076A  0840               	movf	_chrgFlag,w
  2495  076B  1903               	btfsc	3,2
  2496  076C  2F61               	goto	l4371
  2497                           
  2498                           ;main.c: 484: {
  2499                           ;main.c: 485: if(chrgFullFlag || count1s < 50)
  2500  076D  083F               	movf	_chrgFullFlag,w
  2501  076E  1D03               	btfss	3,2
  2502  076F  2F64               	goto	l1034
  2503  0770  3032               	movlw	50
  2504  0771  0245               	subwf	_count1s,w
  2505  0772  1C03               	btfss	3,0
  2506  0773  2F64               	goto	l1034
  2507  0774  2F61               	goto	l4371
  2508  0775                     __end_of_keyLedCtr:	
  2509  0775                     __ptext6:	
  2510 ;; *************** function ___lwmod *****************
  2511 ;; Defined at:
  2512 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  divisor         2    2[COMMON] unsigned int 
  2515 ;;  dividend        2    4[COMMON] unsigned int 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  counter         1    6[COMMON] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  2    2[COMMON] unsigned int 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 300/0
  2524 ;;		On exit  : 300/0
  2525 ;;		Unchanged: 300/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2527 ;;      Params:         4       0       0       0
  2528 ;;      Locals:         1       0       0       0
  2529 ;;      Temps:          0       0       0       0
  2530 ;;      Totals:         5       0       0       0
  2531 ;;Total ram usage:        5 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    1
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_keyLedCtr
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           
  2542                           ;psect for function ___lwmod
  2543  0775                     ___lwmod:	
  2544                           
  2545                           ;incstack = 0
  2546                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2547  0775  0872               	movf	___lwmod@divisor,w
  2548  0776  0473               	iorwf	___lwmod@divisor+1,w
  2549  0777  1903               	btfsc	3,2
  2550  0778  2F94               	goto	l4251
  2551  0779  01F6               	clrf	___lwmod@counter
  2552  077A                     L1:	
  2553  077A  0AF6               	incf	___lwmod@counter,f
  2554  077B  1BF3               	btfsc	___lwmod@divisor+1,7
  2555  077C  2F81               	goto	l4243
  2556  077D  1003               	clrc
  2557  077E  0DF2               	rlf	___lwmod@divisor,f
  2558  077F  0DF3               	rlf	___lwmod@divisor+1,f
  2559  0780  2F7A               	goto	L1
  2560  0781                     l4243:	
  2561  0781  0873               	movf	___lwmod@divisor+1,w
  2562  0782  0275               	subwf	___lwmod@dividend+1,w
  2563  0783  1D03               	skipz
  2564  0784  2F87               	goto	u4155
  2565  0785  0872               	movf	___lwmod@divisor,w
  2566  0786  0274               	subwf	___lwmod@dividend,w
  2567  0787                     u4155:	
  2568  0787  1C03               	skipc
  2569  0788  2F90               	goto	L2
  2570  0789  0872               	movf	___lwmod@divisor,w
  2571  078A  02F4               	subwf	___lwmod@dividend,f
  2572  078B  0873               	movf	___lwmod@divisor+1,w
  2573  078C  1C03               	skipc
  2574  078D  03F5               	decf	___lwmod@dividend+1,f
  2575  078E  02F5               	subwf	___lwmod@dividend+1,f
  2576  078F  1003               	clrc
  2577  0790                     L2:	
  2578  0790  0CF3               	rrf	___lwmod@divisor+1,f
  2579  0791  0CF2               	rrf	___lwmod@divisor,f
  2580  0792  0BF6               	decfsz	___lwmod@counter,f
  2581  0793  2F81               	goto	l4243
  2582  0794                     l4251:	
  2583  0794  0875               	movf	___lwmod@dividend+1,w
  2584  0795  00F3               	movwf	?___lwmod+1
  2585  0796  0874               	movf	___lwmod@dividend,w
  2586  0797  00F2               	movwf	?___lwmod
  2587  0798  0008               	return
  2588  0799                     __end_of___lwmod:	
  2589  0799                     __ptext9:	
  2590 ;; *************** function _fanInit *****************
  2591 ;; Defined at:
  2592 ;;		line 520 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0
  2601 ;; Tracked objects:
  2602 ;;		On entry : 300/0
  2603 ;;		On exit  : 300/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2606 ;;      Params:         0       0       0       0
  2607 ;;      Locals:         0       0       0       0
  2608 ;;      Temps:          0       0       0       0
  2609 ;;      Totals:         0       0       0       0
  2610 ;;Total ram usage:        0 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    1
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_fanCtr
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function _fanInit
  2622  0799                     _fanInit:	
  2623  0799                     l4181:	
  2624                           ;incstack = 0
  2625                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2626                           
  2627                           
  2628                           ;main.c: 523: PWMTH = 0x00;
  2629  0799  0198               	clrf	24	;volatile
  2630                           
  2631                           ;main.c: 524: PWMT4L = 73;
  2632  079A  3049               	movlw	73
  2633  079B  009C               	movwf	28	;volatile
  2634                           
  2635                           ;main.c: 525: PWMD4L = fanDuty;
  2636  079C  0843               	movf	_fanDuty,w
  2637  079D  009B               	movwf	27	;volatile
  2638                           
  2639                           ;main.c: 526: PWMCON1 = 0xC0;
  2640  079E  30C0               	movlw	192
  2641  079F  0096               	movwf	22	;volatile
  2642                           
  2643                           ;main.c: 527: PWMCON2 = 0x00;
  2644  07A0  019D               	clrf	29	;volatile
  2645                           
  2646                           ;main.c: 528: PWMCON0 |= 0x30;
  2647  07A1  3030               	movlw	48
  2648  07A2  0495               	iorwf	21,f	;volatile
  2649  07A3  0008               	return
  2650  07A4                     __end_of_fanInit:	
  2651  07A4                     __ptext8:	
  2652 ;; *************** function _fanStop *****************
  2653 ;; Defined at:
  2654 ;;		line 531 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		status,2
  2663 ;; Tracked objects:
  2664 ;;		On entry : 300/100
  2665 ;;		On exit  : 300/100
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       0       0       0
  2670 ;;      Temps:          0       0       0       0
  2671 ;;      Totals:         0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_fanCtr
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function _fanStop
  2684  07A4                     _fanStop:	
  2685                           
  2686                           ;main.c: 533: PWMD4L = 0;
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in _fanStop: [status,2]
  2690  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  2691  07A5  019B               	clrf	27	;volatile
  2692                           
  2693                           ;main.c: 534: PWMCON0 &= 0xEF;
  2694  07A6  1215               	bcf	21,4	;volatile
  2695                           
  2696                           ;main.c: 535: PORTA &= 0xEF;
  2697  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  2698  07A8  1206               	bcf	6,4	;volatile
  2699  07A9  0008               	return
  2700  07AA                     __end_of_fanStop:	
  2701  07AA                     PL6:	
  2702  07AA  00F4               	movwf	??_ADC_Sample+1
  2703  07AB  01F5               	clrf	??_ADC_Sample+2
  2704  07AC  01F6               	clrf	??_ADC_Sample+3
  2705  07AD  0873               	movf	??_ADC_Sample,w
  2706  07AE  02CC               	subwf	ADC_Sample@adsum,f	;volatile
  2707  07AF  0874               	movf	??_ADC_Sample+1,w
  2708  07B0  1C03               	skipc
  2709  07B1  0F74               	incfsz	??_ADC_Sample+1,w
  2710  07B2  02CD               	subwf	ADC_Sample@adsum+1,f	;volatile
  2711  07B3  0875               	movf	??_ADC_Sample+2,w
  2712  07B4  1C03               	skipc
  2713  07B5  0F75               	incfsz	??_ADC_Sample+2,w
  2714  07B6  02CE               	subwf	ADC_Sample@adsum+2,f	;volatile
  2715  07B7  0876               	movf	??_ADC_Sample+3,w
  2716  07B8  0008               	return
  2717  07B9                     __end_ofPL6:	
  2718  07B9                     PL16:	
  2719  07B9  01CC               	clrf	ADC_Sample@adsum	;volatile
  2720  07BA  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2721  07BB  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2722  07BC  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2723  07BD  01D0               	clrf	ADC_Sample@admin	;volatile
  2724  07BE  01D1               	clrf	ADC_Sample@admin+1	;volatile
  2725  07BF  01D2               	clrf	ADC_Sample@admax	;volatile
  2726  07C0  01D3               	clrf	ADC_Sample@admax+1	;volatile
  2727  07C1  0008               	return
  2728  07C2                     __end_ofPL16:	
  2729  07C2                     PL26:	
  2730  07C2  085E               	movf	___fttol@f1,w
  2731  07C3  00E2               	movwf	??___fttol
  2732  07C4  085F               	movf	___fttol@f1+1,w
  2733  07C5  00E3               	movwf	??___fttol+1
  2734  07C6  0860               	movf	___fttol@f1+2,w
  2735  07C7  00E4               	movwf	??___fttol+2
  2736  07C8  0008               	return
  2737  07C9                     __end_ofPL26:	
  2738  07C9                     PL36:	
  2739  07C9  1003               	clrc
  2740  07CA  0CF4               	rrf	___ftpack@arg+2,f
  2741  07CB  0CF3               	rrf	___ftpack@arg+1,f
  2742  07CC  0CF2               	rrf	___ftpack@arg,f
  2743  07CD  0008               	return
  2744  07CE                     __end_ofPL36:	
  2745  07CE                     PL40:	
  2746  07CE  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2747  07CF  00D3               	movwf	ADC_Sample@admax+1	;volatile
  2748  07D0  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2749  07D1  00D2               	movwf	ADC_Sample@admax	;volatile
  2750  07D2  0008               	return
  2751  07D3                     __end_ofPL40:	
  2752  07D3                     PL42:	
  2753  07D3  01CF               	clrf	?___ftdiv
  2754  07D4  01D0               	clrf	?___ftdiv+1
  2755  07D5  01D1               	clrf	?___ftdiv+2
  2756  07D6  0008               	return
  2757  07D7                     __end_ofPL42:	
  2758                           
  2759                           	psect	text2
  2760  0E22                     __ptext2:	
  2761 ;; *************** function _wuhuaCtr *****************
  2762 ;; Defined at:
  2763 ;;		line 597 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 200/100
  2774 ;;		On exit  : 200/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2777 ;;      Params:         0       0       0       0
  2778 ;;      Locals:         0       0       0       0
  2779 ;;      Temps:          0       0       0       0
  2780 ;;      Totals:         0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    2
  2784 ;; This function calls:
  2785 ;;		_pwmInit
  2786 ;;		_pwmStop
  2787 ;; This function is called by:
  2788 ;;		_workCtr
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           
  2793                           ;psect for function _wuhuaCtr
  2794  0E22                     _wuhuaCtr:	
  2795                           
  2796                           ;main.c: 599: if(count1s == 0)
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2800  0E22  1283               	bcf	3,5	;RP0=0, select bank0
  2801  0E23  0845               	movf	_count1s,w
  2802  0E24  1D03               	btfss	3,2
  2803  0E25  2E3D               	goto	l4455
  2804                           
  2805                           ;main.c: 600: {
  2806                           ;main.c: 601: if(++count10s >= 20)
  2807  0E26  3014               	movlw	20
  2808  0E27  0AC2               	incf	_count10s,f
  2809  0E28  0242               	subwf	_count10s,w
  2810  0E29  1803               	btfsc	3,0
  2811                           
  2812                           ;main.c: 602: {
  2813                           ;main.c: 603: count10s = 0;
  2814  0E2A  01C2               	clrf	_count10s
  2815                           
  2816                           ;main.c: 604: }
  2817                           ;main.c: 605: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2818  0E2B  087B               	movf	_workStep,w
  2819  0E2C  1D03               	btfss	3,2
  2820  0E2D  2E3C               	goto	l4453
  2821  0E2E  0844               	movf	_wuhuaFlag,w
  2822  0E2F  1D03               	btfss	3,2
  2823  0E30  2E3C               	goto	l4453
  2824  0E31  083A               	movf	_powerFlag,w
  2825  0E32  1903               	btfsc	3,2
  2826  0E33  2E3C               	goto	l4453
  2827                           
  2828                           ;main.c: 606: {
  2829                           ;main.c: 607: if(++closeTime > 200)
  2830  0E34  30C9               	movlw	201
  2831  0E35  0AB8               	incf	_closeTime,f
  2832  0E36  0238               	subwf	_closeTime,w
  2833  0E37  1C03               	skipc
  2834  0E38  2E3D               	goto	l4455
  2835                           
  2836                           ;main.c: 608: {
  2837                           ;main.c: 609: closeTime = 0;
  2838  0E39  01B8               	clrf	_closeTime
  2839                           
  2840                           ;main.c: 610: powerFlag = 0;
  2841  0E3A  01BA               	clrf	_powerFlag
  2842  0E3B  2E3D               	goto	l4455
  2843  0E3C                     l4453:	
  2844                           
  2845                           ;main.c: 613: else
  2846                           ;main.c: 614: {
  2847                           ;main.c: 615: closeTime = 0;
  2848  0E3C  01B8               	clrf	_closeTime
  2849  0E3D                     l4455:	
  2850                           
  2851                           ;main.c: 616: }
  2852                           ;main.c: 617: }
  2853                           ;main.c: 618: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2854  0E3D  0344               	decf	_wuhuaFlag,w
  2855  0E3E  1903               	btfsc	3,2
  2856  0E3F  2E48               	goto	l4461
  2857  0E40  3002               	movlw	2
  2858  0E41  0644               	xorwf	_wuhuaFlag,w
  2859  0E42  1D03               	btfss	3,2
  2860  0E43  2E49               	goto	l4463
  2861  0E44  300A               	movlw	10
  2862  0E45  0242               	subwf	_count10s,w
  2863  0E46  1803               	skipnc
  2864  0E47  2E49               	goto	l4463
  2865  0E48                     l4461:	
  2866                           
  2867                           ;main.c: 619: {
  2868                           ;main.c: 620: pwmInit();
  2869  0E48  2E4A               	ljmp	l4165
  2870  0E49                     l4463:	
  2871                           ;main.c: 649: }
  2872                           
  2873                           
  2874                           ;main.c: 650: else
  2875                           ;main.c: 651: {
  2876                           ;main.c: 652: pwmStop();
  2877  0E49  2E58               	ljmp	l4175
  2878  0E4A                     __end_of_wuhuaCtr:	
  2879  0E4A                     __ptext4:	
  2880 ;; *************** function _pwmInit *****************
  2881 ;; Defined at:
  2882 ;;		line 501 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;		None
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;		None
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : 300/0
  2893 ;;		On exit  : 300/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2896 ;;      Params:         0       0       0       0
  2897 ;;      Locals:         0       0       0       0
  2898 ;;      Temps:          0       0       0       0
  2899 ;;      Totals:         0       0       0       0
  2900 ;;Total ram usage:        0 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_wuhuaCtr
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           
  2911                           ;psect for function _pwmInit
  2912  0E4A                     _pwmInit:	
  2913  0E4A                     l4165:	
  2914                           ;incstack = 0
  2915                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2916                           
  2917                           
  2918                           ;main.c: 504: PWMTH = 0x00;
  2919  0E4A  0198               	clrf	24	;volatile
  2920                           
  2921                           ;main.c: 505: PWMTL = 73;
  2922  0E4B  3049               	movlw	73
  2923  0E4C  0097               	movwf	23	;volatile
  2924                           
  2925                           ;main.c: 506: PWMD23H = 0x00;
  2926  0E4D  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0E4E  019E               	clrf	30	;volatile
  2928                           
  2929                           ;main.c: 507: PWMD3L = 32;
  2930  0E4F  3020               	movlw	32
  2931  0E50  009C               	movwf	28	;volatile
  2932                           
  2933                           ;main.c: 508: PWMCON1 = 0xC0;
  2934  0E51  30C0               	movlw	192
  2935  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0E53  0096               	movwf	22	;volatile
  2937                           
  2938                           ;main.c: 509: PWMCON2 = 0x00;
  2939  0E54  019D               	clrf	29	;volatile
  2940                           
  2941                           ;main.c: 510: PWMCON0 |= 0x28;
  2942  0E55  3028               	movlw	40
  2943  0E56  0495               	iorwf	21,f	;volatile
  2944  0E57  0008               	return
  2945  0E58                     __end_of_pwmInit:	
  2946  0E58                     __ptext3:	
  2947 ;; *************** function _pwmStop *****************
  2948 ;; Defined at:
  2949 ;;		line 513 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		status,2
  2958 ;; Tracked objects:
  2959 ;;		On entry : 300/0
  2960 ;;		On exit  : 300/100
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2963 ;;      Params:         0       0       0       0
  2964 ;;      Locals:         0       0       0       0
  2965 ;;      Temps:          0       0       0       0
  2966 ;;      Totals:         0       0       0       0
  2967 ;;Total ram usage:        0 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    1
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_wuhuaCtr
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           
  2978                           ;psect for function _pwmStop
  2979  0E58                     _pwmStop:	
  2980  0E58                     l4175:	
  2981                           ;incstack = 0
  2982                           ; Regs used in _pwmStop: [status,2]
  2983                           
  2984                           
  2985                           ;main.c: 515: PWMD3L = 0;
  2986  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  2987  0E59  019C               	clrf	28	;volatile
  2988                           
  2989                           ;main.c: 516: PWMCON0 &= 0xF7;
  2990  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0E5B  1195               	bcf	21,3	;volatile
  2992                           
  2993                           ;main.c: 517: PORTA &= 0xF7;
  2994  0E5C  1683               	bsf	3,5	;RP0=1, select bank1
  2995  0E5D  1186               	bcf	6,3	;volatile
  2996  0E5E  0008               	return
  2997  0E5F                     __end_of_pwmStop:	
  2998                           
  2999                           	psect	text12
  3000  0F3E                     __ptext12:	
  3001 ;; *************** function _bujinCtr *****************
  3002 ;; Defined at:
  3003 ;;		line 656 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  tempStep        1    6[COMMON] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 200/100
  3014 ;;		On exit  : 300/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3017 ;;      Params:         0       0       0       0
  3018 ;;      Locals:         1       0       0       0
  3019 ;;      Temps:          4       0       0       0
  3020 ;;      Totals:         5       0       0       0
  3021 ;;Total ram usage:        5 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    1
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_workCtr
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _bujinCtr
  3033  0F3E                     _bujinCtr:	
  3034  0F3E                     l4465:	
  3035                           ;incstack = 0
  3036                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  3037                           
  3038                           
  3039                           ;main.c: 658: if(bujinFlag || motorStopFlag)
  3040  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0F3F  083B               	movf	_bujinFlag,w
  3042  0F40  1903               	btfsc	3,2
  3043  0F41  0837               	movf	_motorStopFlag,w
  3044  0F42  1903               	btfsc	3,2
  3045  0F43  2FE4               	goto	l4523
  3046                           
  3047                           ;main.c: 659: {
  3048                           ;main.c: 661: if(bujinStartFlag && zeroFlag)
  3049  0F44  0836               	movf	_bujinStartFlag,w
  3050  0F45  1903               	btfsc	3,2
  3051  0F46  2F67               	goto	l1091
  3052  0F47  086D               	movf	_zeroFlag,w
  3053  0F48  1903               	btfsc	3,2
  3054  0F49  2F67               	goto	l1091
  3055                           
  3056                           ;main.c: 662: {
  3057                           ;main.c: 663: bujinStartFlag = 0;
  3058  0F4A  01B6               	clrf	_bujinStartFlag
  3059                           
  3060                           ;main.c: 664: if(bujinFlag == 1)
  3061  0F4B  0B3B               	decfsz	_bujinFlag,w
  3062  0F4C  2F50               	goto	l4481
  3063                           
  3064                           ;main.c: 665: {
  3065                           ;main.c: 666: maxMotorStep = 512;
  3066  0F4D  3002               	movlw	2
  3067  0F4E                     L4:	
  3068  0F4E  01EB               	clrf	_maxMotorStep
  3069  0F4F  2F5D               	goto	L5
  3070  0F50                     l4481:	
  3071                           ;main.c: 668: }
  3072                           
  3073                           
  3074                           ;main.c: 669: else if(bujinFlag == 2)
  3075  0F50  3002               	movlw	2
  3076  0F51  063B               	xorwf	_bujinFlag,w
  3077  0F52  1D03               	btfss	3,2
  3078  0F53  2F56               	goto	l4487
  3079                           
  3080                           ;main.c: 670: {
  3081                           ;main.c: 671: maxMotorStep = 1024;
  3082  0F54  3004               	movlw	4
  3083  0F55  2F4E               	goto	L4
  3084  0F56                     l4487:	
  3085                           
  3086                           ;main.c: 674: else if(bujinFlag == 3)
  3087  0F56  3003               	movlw	3
  3088  0F57  063B               	xorwf	_bujinFlag,w
  3089  0F58  1D03               	btfss	3,2
  3090  0F59  2F60               	goto	l1093
  3091                           
  3092                           ;main.c: 675: {
  3093                           ;main.c: 676: maxMotorStep = 1696;
  3094  0F5A  30A0               	movlw	160
  3095  0F5B  00EB               	movwf	_maxMotorStep
  3096  0F5C  3006               	movlw	6
  3097  0F5D                     L5:	
  3098  0F5D  00EC               	movwf	_maxMotorStep+1
  3099                           
  3100                           ;main.c: 667: motorStopFlag = 1;
  3101  0F5E  01B7               	clrf	_motorStopFlag
  3102  0F5F  0AB7               	incf	_motorStopFlag,f
  3103  0F60                     l1093:	
  3104                           
  3105                           ;main.c: 678: }
  3106                           ;main.c: 679: motorStep = maxMotorStep/2;
  3107  0F60  086C               	movf	_maxMotorStep+1,w
  3108  0F61  00A7               	movwf	_motorStep+1
  3109  0F62  086B               	movf	_maxMotorStep,w
  3110  0F63  00A6               	movwf	_motorStep
  3111  0F64  1003               	clrc
  3112  0F65  0CA7               	rrf	_motorStep+1,f
  3113  0F66  0CA6               	rrf	_motorStep,f
  3114  0F67                     l1091:	
  3115                           
  3116                           ;main.c: 680: }
  3117                           ;main.c: 681: if(motorStep == maxMotorStep/2 || motorStep == ((maxMotorStep/2) + maxMoto
      +                          rStep))
  3118  0F67  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3119  0F69  0CF3               	rrf	??_bujinCtr+1,f
  3120  0F6A  0CF2               	rrf	??_bujinCtr,f
  3121  0F6B  0827               	movf	_motorStep+1,w
  3122  0F6C  0673               	xorwf	??_bujinCtr+1,w
  3123  0F6D  1D03               	skipz
  3124  0F6E  2F71               	goto	u4655
  3125  0F6F  0826               	movf	_motorStep,w
  3126  0F70  0672               	xorwf	??_bujinCtr,w
  3127  0F71                     u4655:	
  3128  0F71  1903               	skipnz
  3129  0F72  2F86               	goto	l1099
  3130  0F73  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3131  0F75  0CF3               	rrf	??_bujinCtr+1,f
  3132  0F76  0CF2               	rrf	??_bujinCtr,f
  3133  0F77  086B               	movf	_maxMotorStep,w
  3134  0F78  0772               	addwf	??_bujinCtr,w
  3135  0F79  00F4               	movwf	??_bujinCtr+2
  3136  0F7A  086C               	movf	_maxMotorStep+1,w
  3137  0F7B  1803               	skipnc
  3138  0F7C  0A6C               	incf	_maxMotorStep+1,w
  3139  0F7D  0773               	addwf	??_bujinCtr+1,w
  3140  0F7E  00F5               	movwf	??_bujinCtr+3
  3141  0F7F  0627               	xorwf	_motorStep+1,w
  3142  0F80  1D03               	skipz
  3143  0F81  2F84               	goto	u4665
  3144  0F82  0826               	movf	_motorStep,w
  3145  0F83  0674               	xorwf	??_bujinCtr+2,w
  3146  0F84                     u4665:	
  3147  0F84  1D03               	skipz
  3148  0F85  2F8D               	goto	l4501
  3149  0F86                     l1099:	
  3150                           
  3151                           ;main.c: 682: {
  3152                           ;main.c: 683: zeroFlag = 1;
  3153  0F86  01ED               	clrf	_zeroFlag
  3154  0F87  0AED               	incf	_zeroFlag,f
  3155                           
  3156                           ;main.c: 684: if(bujinFlag == 0)
  3157  0F88  083B               	movf	_bujinFlag,w
  3158  0F89  1D03               	btfss	3,2
  3159  0F8A  2F8E               	goto	l4503
  3160                           
  3161                           ;main.c: 685: {
  3162                           ;main.c: 686: motorStopFlag = 0;
  3163  0F8B  01B7               	clrf	_motorStopFlag
  3164  0F8C  2F8E               	goto	l4503
  3165  0F8D                     l4501:	
  3166                           
  3167                           ;main.c: 689: else
  3168                           ;main.c: 690: {
  3169                           ;main.c: 691: zeroFlag = 0;
  3170  0F8D  01ED               	clrf	_zeroFlag
  3171  0F8E                     l4503:	
  3172                           
  3173                           ;main.c: 692: }
  3174                           ;main.c: 695: if(++motorStep >= (maxMotorStep*2))
  3175  0F8E  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3176  0F90  0DF2               	rlf	??_bujinCtr,f
  3177  0F91  0DF3               	rlf	??_bujinCtr+1,f
  3178  0F92  0AA6               	incf	_motorStep,f
  3179  0F93  1903               	skipnz
  3180  0F94  0AA7               	incf	_motorStep+1,f
  3181  0F95  0873               	movf	??_bujinCtr+1,w
  3182  0F96  0227               	subwf	_motorStep+1,w
  3183  0F97  1D03               	skipz
  3184  0F98  2F9B               	goto	u4685
  3185  0F99  0872               	movf	??_bujinCtr,w
  3186  0F9A  0226               	subwf	_motorStep,w
  3187  0F9B                     u4685:	
  3188  0F9B  1C03               	skipc
  3189  0F9C  2F9F               	goto	l4507
  3190                           
  3191                           ;main.c: 696: {
  3192                           ;main.c: 697: motorStep = 0;
  3193  0F9D  01A6               	clrf	_motorStep
  3194  0F9E  01A7               	clrf	_motorStep+1
  3195  0F9F                     l4507:	
  3196                           
  3197                           ;main.c: 698: }
  3198                           ;main.c: 699: unsigned char tempStep = motorStep % 8;
  3199  0F9F  0826               	movf	_motorStep,w
  3200  0FA0  00F6               	movwf	bujinCtr@tempStep
  3201  0FA1  3007               	movlw	7
  3202  0FA2  05F6               	andwf	bujinCtr@tempStep,f
  3203                           
  3204                           ;main.c: 700: if(motorStep < maxMotorStep)
  3205  0FA3  086C               	movf	_maxMotorStep+1,w
  3206  0FA4  0227               	subwf	_motorStep+1,w
  3207  0FA5  1D03               	skipz
  3208  0FA6  2FA9               	goto	u4695
  3209  0FA7  086B               	movf	_maxMotorStep,w
  3210  0FA8  0226               	subwf	_motorStep,w
  3211  0FA9                     u4695:	
  3212  0FA9  1C03               	btfss	3,0
  3213  0FAA  2FCC               	goto	l4517
  3214  0FAB  2FD8               	goto	l4521
  3215  0FAC                     l1105:	
  3216                           ;main.c: 704: {
  3217                           ;main.c: 705: case 0:
  3218                           
  3219                           
  3220                           ;main.c: 706: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3221  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  3222  0FAD  1686               	bsf	6,5	;volatile
  3223  0FAE  1306               	bcf	6,6	;volatile
  3224  0FAF  1386               	bcf	6,7	;volatile
  3225  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3226  0FB1  1386               	bcf	6,7	;volatile
  3227                           
  3228                           ;main.c: 707: break;
  3229  0FB2  0008               	return
  3230  0FB3                     l1107:	
  3231                           ;main.c: 708: case 1:
  3232                           
  3233                           
  3234                           ;main.c: 709: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3235  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  3236  0FB4  1686               	bsf	6,5	;volatile
  3237                           
  3238                           ;main.c: 710: break;
  3239  0FB5  2FF5               	ljmp	PL30	;call to abstracted procedure
  3240  0FB6                     l1108:	
  3241                           ;main.c: 711: case 2:
  3242                           
  3243                           
  3244                           ;main.c: 712: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3245  0FB6  1683               	bsf	3,5	;RP0=1, select bank1
  3246  0FB7  1286               	bcf	6,5	;volatile
  3247                           
  3248                           ;main.c: 713: break;
  3249  0FB8  2FF5               	ljmp	PL30	;call to abstracted procedure
  3250  0FB9                     l1109:	
  3251                           ;main.c: 714: case 3:
  3252                           
  3253                           
  3254                           ;main.c: 715: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3255  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3256  0FBA  1286               	bcf	6,5	;volatile
  3257  0FBB  1706               	bsf	6,6	;volatile
  3258  0FBC  1786               	bsf	6,7	;volatile
  3259  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0FBE  1386               	bcf	6,7	;volatile
  3261                           
  3262                           ;main.c: 716: break;
  3263  0FBF  0008               	return
  3264  0FC0                     l1110:	
  3265                           ;main.c: 717: case 4:
  3266                           
  3267                           
  3268                           ;main.c: 718: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3269  0FC0  27FA               	fcall	PL34	;call to abstracted procedure
  3270  0FC1  1386               	bcf	6,7	;volatile
  3271                           
  3272                           ;main.c: 719: break;
  3273  0FC2  0008               	return
  3274  0FC3                     l1111:	
  3275                           ;main.c: 720: case 5:
  3276                           
  3277                           
  3278                           ;main.c: 721: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3279  0FC3  27FA               	fcall	PL34	;call to abstracted procedure
  3280  0FC4  1786               	bsf	6,7	;volatile
  3281                           
  3282                           ;main.c: 722: break;
  3283  0FC5  0008               	return
  3284  0FC6                     l1112:	
  3285                           ;main.c: 723: case 6:
  3286                           
  3287                           
  3288                           ;main.c: 724: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3289  0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  3290  0FC7  1286               	bcf	6,5	;volatile
  3291                           
  3292                           ;main.c: 725: break;
  3293  0FC8  2FF0               	ljmp	PL28	;call to abstracted procedure
  3294  0FC9                     l1113:	
  3295                           ;main.c: 726: case 7:
  3296                           
  3297                           
  3298                           ;main.c: 727: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3299  0FC9  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0FCA  1686               	bsf	6,5	;volatile
  3301                           
  3302                           ;main.c: 728: break;
  3303  0FCB  2FF0               	ljmp	PL28	;call to abstracted procedure
  3304  0FCC                     l4517:	
  3305  0FCC  0876               	movf	bujinCtr@tempStep,w
  3306                           
  3307                           ; Switch size 1, requested type "space"
  3308                           ; Number of cases is 8, Range of values is 0 to 7
  3309                           ; switch strategies available:
  3310                           ; Name         Instructions Cycles
  3311                           ; direct_byte           23     7 (fixed)
  3312                           ; simple_byte           25    13 (average)
  3313                           ; jumptable            260     6 (fixed)
  3314                           ;	Chosen strategy is direct_byte
  3315  0FCD  0084               	movwf	4
  3316  0FCE  3008               	movlw	8
  3317  0FCF  0204               	subwf	4,w
  3318  0FD0  1803               	skipnc
  3319  0FD1  0008               	return
  3320  0FD2  3008               	movlw	high S4891
  3321  0FD3  008A               	movwf	10
  3322  0FD4  1003               	clrc
  3323  0FD5  0D04               	rlf	4,w
  3324  0FD6  3E17               	addlw	low S4891
  3325  0FD7  0082               	movwf	2
  3326  0FD8                     l4521:	
  3327  0FD8  0876               	movf	bujinCtr@tempStep,w
  3328                           
  3329                           ; Switch size 1, requested type "space"
  3330                           ; Number of cases is 8, Range of values is 0 to 7
  3331                           ; switch strategies available:
  3332                           ; Name         Instructions Cycles
  3333                           ; direct_byte           23     7 (fixed)
  3334                           ; simple_byte           25    13 (average)
  3335                           ; jumptable            260     6 (fixed)
  3336                           ;	Chosen strategy is direct_byte
  3337  0FD9  0084               	movwf	4
  3338  0FDA  3008               	movlw	8
  3339  0FDB  0204               	subwf	4,w
  3340  0FDC  1803               	skipnc
  3341  0FDD  0008               	return
  3342  0FDE  3008               	movlw	high S4893
  3343  0FDF  008A               	movwf	10
  3344  0FE0  1003               	clrc
  3345  0FE1  0D04               	rlf	4,w
  3346  0FE2  3E27               	addlw	low S4893
  3347  0FE3  0082               	movwf	2
  3348  0FE4                     l4523:	
  3349                           
  3350                           ;main.c: 763: else
  3351                           ;main.c: 764: {
  3352                           ;main.c: 765: PORTA &= 0x1F;
  3353  0FE4  301F               	movlw	31
  3354  0FE5  1683               	bsf	3,5	;RP0=1, select bank1
  3355  0FE6  0586               	andwf	6,f	;volatile
  3356                           
  3357                           ;main.c: 766: PORTB &= 0x7F;
  3358  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0FE8  1386               	bcf	6,7	;volatile
  3360  0FE9  0008               	return
  3361  0FEA                     __end_of_bujinCtr:	
  3362  0FEA                     PL20:	
  3363  0FEA  086C               	movf	_maxMotorStep+1,w
  3364  0FEB  00F3               	movwf	??_bujinCtr+1
  3365  0FEC  086B               	movf	_maxMotorStep,w
  3366  0FED  00F2               	movwf	??_bujinCtr
  3367  0FEE  1003               	clrc
  3368  0FEF  0008               	return
  3369  0FF0                     __end_ofPL20:	
  3370  0FF0                     PL28:	
  3371  0FF0  1306               	bcf	6,6	;volatile
  3372  0FF1  1386               	bcf	6,7	;volatile
  3373  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0FF3  1786               	bsf	6,7	;volatile
  3375  0FF4  0008               	return
  3376  0FF5                     __end_ofPL28:	
  3377  0FF5                     PL30:	
  3378  0FF5  1706               	bsf	6,6	;volatile
  3379  0FF6  1386               	bcf	6,7	;volatile
  3380  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3381  0FF8  1386               	bcf	6,7	;volatile
  3382  0FF9  0008               	return
  3383  0FFA                     __end_ofPL30:	
  3384  0FFA                     PL34:	
  3385  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  3386  0FFB  1286               	bcf	6,5	;volatile
  3387  0FFC  1306               	bcf	6,6	;volatile
  3388  0FFD  1786               	bsf	6,7	;volatile
  3389  0FFE  1283               	bcf	3,5	;RP0=0, select bank0
  3390  0FFF  0008               	return
  3391  1000                     __end_ofPL34:	
  3392                           
  3393                           	psect	swtext1
  3394  0817                     __pswtext1:	
  3395  0817                     S4891:	
  3396  0817  158A  2FAC         	ljmp	l1105
  3397  0819  158A  2FB3         	ljmp	l1107
  3398  081B  158A  2FB6         	ljmp	l1108
  3399  081D  158A  2FB9         	ljmp	l1109
  3400  081F  158A  2FC0         	ljmp	l1110
  3401  0821  158A  2FC3         	ljmp	l1111
  3402  0823  158A  2FC6         	ljmp	l1112
  3403  0825  158A  2FC9         	ljmp	l1113
  3404                           
  3405                           	psect	swtext2
  3406  0827                     __pswtext2:	
  3407  0827                     S4893:	
  3408  0827  158A  2FC9         	ljmp	l1113
  3409  0829  158A  2FC6         	ljmp	l1112
  3410  082B  158A  2FC3         	ljmp	l1111
  3411  082D  158A  2FC0         	ljmp	l1110
  3412  082F  158A  2FB9         	ljmp	l1109
  3413  0831  158A  2FB6         	ljmp	l1108
  3414  0833  158A  2FB3         	ljmp	l1107
  3415  0835  158A  2FAC         	ljmp	l1105
  3416                           
  3417                           	psect	text17
  3418  07D7                     __ptext17:	
  3419 ;; *************** function _chrgCtr *****************
  3420 ;; Defined at:
  3421 ;;		line 394 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/100
  3432 ;;		On exit  : 300/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3435 ;;      Params:         0       0       0       0
  3436 ;;      Locals:         0       0       0       0
  3437 ;;      Temps:          0       0       0       0
  3438 ;;      Totals:         0       0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    1
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_main
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _chrgCtr
  3451  07D7                     _chrgCtr:	
  3452                           
  3453                           ;main.c: 396: if(PORTB & 0x20)
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3457  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  3458  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  3459  07D9  1E86               	btfss	6,5	;volatile
  3460  07DA  2FF1               	goto	l3917
  3461  07DB  3010               	movlw	16
  3462                           
  3463                           ;main.c: 397: {
  3464                           ;main.c: 398: chrgFlag = 1;
  3465  07DC  01C0               	clrf	_chrgFlag
  3466  07DD  0AC0               	incf	_chrgFlag,f
  3467                           
  3468                           ;main.c: 399: firstLock = 0;
  3469  07DE  01EE               	clrf	_firstLock
  3470                           
  3471                           ;main.c: 400: lowBatLock = 0;
  3472  07DF  01BD               	clrf	_lowBatLock
  3473                           
  3474                           ;main.c: 401: if(power_ad > 4140)
  3475  07E0  0225               	subwf	_power_ad+1,w	;volatile
  3476  07E1  302D               	movlw	45
  3477  07E2  1903               	skipnz
  3478  07E3  0224               	subwf	_power_ad,w	;volatile
  3479  07E4  1C03               	skipc
  3480  07E5  2FEF               	goto	l3915
  3481                           
  3482                           ;main.c: 402: {
  3483                           ;main.c: 403: if(++chrgFullTime > 200)
  3484  07E6  30C9               	movlw	201
  3485  07E7  0ABE               	incf	_chrgFullTime,f
  3486  07E8  023E               	subwf	_chrgFullTime,w
  3487  07E9  1C03               	skipc
  3488  07EA  0008               	return
  3489                           
  3490                           ;main.c: 404: {
  3491                           ;main.c: 405: chrgFullTime = 0;
  3492  07EB  01BE               	clrf	_chrgFullTime
  3493                           
  3494                           ;main.c: 406: chrgFullFlag = 1;
  3495  07EC  01BF               	clrf	_chrgFullFlag
  3496  07ED  0ABF               	incf	_chrgFullFlag,f
  3497  07EE  0008               	return
  3498  07EF                     l3915:	
  3499                           
  3500                           ;main.c: 409: else
  3501                           ;main.c: 410: {
  3502                           ;main.c: 411: chrgFullTime = 0;
  3503  07EF  01BE               	clrf	_chrgFullTime
  3504  07F0  0008               	return
  3505  07F1                     l3917:	
  3506                           
  3507                           ;main.c: 415: else
  3508                           ;main.c: 416: {
  3509                           ;main.c: 417: chrgFlag = 0;
  3510  07F1  01C0               	clrf	_chrgFlag
  3511                           
  3512                           ;main.c: 418: chrgFullTime = 0;
  3513  07F2  01BE               	clrf	_chrgFullTime
  3514                           
  3515                           ;main.c: 419: chrgFullFlag = 0;
  3516  07F3  01BF               	clrf	_chrgFullFlag
  3517  07F4  0008               	return
  3518  07F5                     __end_of_chrgCtr:	
  3519                           
  3520                           	psect	text21
  3521  0EA1                     __ptext21:	
  3522 ;; *************** function _KeyServer *****************
  3523 ;; Defined at:
  3524 ;;		line 114 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0
  3533 ;; Tracked objects:
  3534 ;;		On entry : 300/0
  3535 ;;		On exit  : 200/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3538 ;;      Params:         0       0       0       0
  3539 ;;      Locals:         0       0       0       0
  3540 ;;      Temps:          0       0       0       0
  3541 ;;      Totals:         0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    1
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_main
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _KeyServer
  3554  0EA1                     _KeyServer:	
  3555                           
  3556                           ;main.c: 116: static unsigned char KeyOldFlag = 0;
  3557                           ;main.c: 117: if (KeyFlag[0])
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3561  0EA1  0879               	movf	_KeyFlag,w	;volatile
  3562  0EA2  1903               	btfsc	3,2
  3563  0EA3  2F33               	goto	l3855
  3564                           
  3565                           ;main.c: 118: {
  3566                           ;main.c: 119: if (KeyFlag[0] != KeyOldFlag)
  3567  0EA4  0879               	movf	_KeyFlag,w	;volatile
  3568  0EA5  0634               	xorwf	KeyServer@KeyOldFlag,w
  3569  0EA6  1903               	skipnz
  3570  0EA7  2F09               	goto	l3837
  3571                           
  3572                           ;main.c: 120: {
  3573                           ;main.c: 122: KeyOldFlag ^= KeyFlag[0];
  3574  0EA8  0879               	movf	_KeyFlag,w	;volatile
  3575  0EA9  06B4               	xorwf	KeyServer@KeyOldFlag,f
  3576                           
  3577                           ;main.c: 123: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3578  0EAA  1834               	btfsc	KeyServer@KeyOldFlag,0
  3579  0EAB  1C79               	btfss	_KeyFlag,0	;volatile
  3580  0EAC  2ECB               	goto	l3791
  3581  0EAD  086E               	movf	_firstLock,w
  3582  0EAE  1D03               	btfss	3,2
  3583  0EAF  2ECB               	goto	l3791
  3584  0EB0  083A               	movf	_powerFlag,w
  3585  0EB1  1903               	btfsc	3,2
  3586  0EB2  2ECB               	goto	l3791
  3587                           
  3588                           ;main.c: 124: {
  3589                           ;main.c: 126: if(lowBatLock == 1)
  3590  0EB3  0B3D               	decfsz	_lowBatLock,w
  3591  0EB4  2EBA               	goto	l3779
  3592                           
  3593                           ;main.c: 127: {
  3594                           ;main.c: 128: shanshuoTime2 = 450;
  3595  0EB5  30C2               	movlw	194
  3596  0EB6  00AA               	movwf	_shanshuoTime2
  3597  0EB7  3001               	movlw	1
  3598  0EB8  00AB               	movwf	_shanshuoTime2+1
  3599                           
  3600                           ;main.c: 129: }
  3601  0EB9  2EBF               	goto	l3783
  3602  0EBA                     l3779:	
  3603                           
  3604                           ;main.c: 130: else if(++wuhuaFlag > 2)
  3605  0EBA  3003               	movlw	3
  3606  0EBB  0AC4               	incf	_wuhuaFlag,f
  3607  0EBC  0244               	subwf	_wuhuaFlag,w
  3608  0EBD  1803               	btfsc	3,0
  3609                           
  3610                           ;main.c: 131: {
  3611                           ;main.c: 132: wuhuaFlag = 0;
  3612  0EBE  01C4               	clrf	_wuhuaFlag
  3613  0EBF                     l3783:	
  3614                           
  3615                           ;main.c: 133: }
  3616                           ;main.c: 134: if(wuhuaFlag >= 2)
  3617  0EBF  3002               	movlw	2
  3618  0EC0  0244               	subwf	_wuhuaFlag,w
  3619  0EC1  1C03               	skipc
  3620  0EC2  2EC9               	goto	l3789
  3621                           
  3622                           ;main.c: 135: {
  3623                           ;main.c: 136: shanshuoTime2 = 450;
  3624  0EC3  30C2               	movlw	194
  3625  0EC4  00AA               	movwf	_shanshuoTime2
  3626  0EC5  3001               	movlw	1
  3627  0EC6  00AB               	movwf	_shanshuoTime2+1
  3628                           
  3629                           ;main.c: 137: count10s = 0;
  3630  0EC7  01C2               	clrf	_count10s
  3631                           
  3632                           ;main.c: 138: }
  3633  0EC8  2ECB               	goto	l3791
  3634  0EC9                     l3789:	
  3635                           
  3636                           ;main.c: 139: else
  3637                           ;main.c: 140: {
  3638                           ;main.c: 141: shanshuoTime2 = 0;
  3639  0EC9  01AA               	clrf	_shanshuoTime2
  3640  0ECA  01AB               	clrf	_shanshuoTime2+1
  3641  0ECB                     l3791:	
  3642                           
  3643                           ;main.c: 142: }
  3644                           ;main.c: 143: }
  3645                           ;main.c: 144: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3646  0ECB  18B4               	btfsc	KeyServer@KeyOldFlag,1
  3647  0ECC  1CF9               	btfss	_KeyFlag,1	;volatile
  3648  0ECD  2EE9               	goto	l3813
  3649  0ECE  086E               	movf	_firstLock,w
  3650  0ECF  1D03               	btfss	3,2
  3651  0ED0  2EE9               	goto	l3813
  3652  0ED1  083A               	movf	_powerFlag,w
  3653  0ED2  1903               	btfsc	3,2
  3654  0ED3  2EE9               	goto	l3813
  3655                           
  3656                           ;main.c: 145: {
  3657                           ;main.c: 147: if(lowBatLock == 1)
  3658  0ED4  0B3D               	decfsz	_lowBatLock,w
  3659  0ED5  2ED9               	goto	l3803
  3660                           
  3661                           ;main.c: 148: {
  3662                           ;main.c: 149: shanshuoTime = 450;
  3663  0ED6  2739  158A         	fcall	PL38	;call to abstracted procedure
  3664                           
  3665                           ;main.c: 150: }
  3666  0ED8  2EE0               	goto	l3807
  3667  0ED9                     l3803:	
  3668                           
  3669                           ;main.c: 151: else if(++workStep > 3)
  3670  0ED9  3004               	movlw	4
  3671  0EDA  0AFB               	incf	_workStep,f
  3672  0EDB  027B               	subwf	_workStep,w
  3673  0EDC  1C03               	skipc
  3674  0EDD  2EE0               	goto	l3807
  3675                           
  3676                           ;main.c: 152: {
  3677                           ;main.c: 153: workStep = 0;
  3678  0EDE  01FB               	clrf	_workStep
  3679                           
  3680                           ;main.c: 154: bujinFlag = 0;
  3681  0EDF  01BB               	clrf	_bujinFlag
  3682  0EE0                     l3807:	
  3683                           
  3684                           ;main.c: 155: }
  3685                           ;main.c: 156: if(workStep >= 2)
  3686  0EE0  3002               	movlw	2
  3687  0EE1  027B               	subwf	_workStep,w
  3688  0EE2  1C03               	skipc
  3689  0EE3  2EE7               	goto	l3811
  3690                           
  3691                           ;main.c: 157: {
  3692                           ;main.c: 158: shanshuoTime = 450;
  3693  0EE4  2739  158A         	fcall	PL38	;call to abstracted procedure
  3694                           
  3695                           ;main.c: 159: }
  3696  0EE6  2EE9               	goto	l3813
  3697  0EE7                     l3811:	
  3698                           
  3699                           ;main.c: 160: else
  3700                           ;main.c: 161: {
  3701                           ;main.c: 162: shanshuoTime = 0;
  3702  0EE7  01AC               	clrf	_shanshuoTime
  3703  0EE8  01AD               	clrf	_shanshuoTime+1
  3704  0EE9                     l3813:	
  3705                           
  3706                           ;main.c: 163: }
  3707                           ;main.c: 165: }
  3708                           ;main.c: 166: if ((KeyOldFlag & 0x4) && (KeyFlag[0] & 0x4) && firstLock == 0 && workStep
      +                           > 0 && powerFlag > 0)
  3709  0EE9  1934               	btfsc	KeyServer@KeyOldFlag,2
  3710  0EEA  1D79               	btfss	_KeyFlag,2	;volatile
  3711  0EEB  2F07               	goto	l3835
  3712  0EEC  086E               	movf	_firstLock,w
  3713  0EED  1D03               	btfss	3,2
  3714  0EEE  2F07               	goto	l3835
  3715  0EEF  087B               	movf	_workStep,w
  3716  0EF0  1903               	btfsc	3,2
  3717  0EF1  2F07               	goto	l3835
  3718  0EF2  083A               	movf	_powerFlag,w
  3719  0EF3  1903               	btfsc	3,2
  3720  0EF4  2F07               	goto	l3835
  3721                           
  3722                           ;main.c: 167: {
  3723                           ;main.c: 169: if(++bujinFlag > 3)
  3724  0EF5  3004               	movlw	4
  3725  0EF6  0ABB               	incf	_bujinFlag,f
  3726  0EF7  023B               	subwf	_bujinFlag,w
  3727  0EF8  1803               	btfsc	3,0
  3728                           
  3729                           ;main.c: 170: {
  3730                           ;main.c: 171: bujinFlag = 0;
  3731  0EF9  01BB               	clrf	_bujinFlag
  3732  0EFA  3002               	movlw	2
  3733                           
  3734                           ;main.c: 172: }
  3735                           ;main.c: 173: bujinStartFlag = 1;
  3736  0EFB  01B6               	clrf	_bujinStartFlag
  3737  0EFC  0AB6               	incf	_bujinStartFlag,f
  3738                           
  3739                           ;main.c: 174: if(bujinFlag >= 2)
  3740  0EFD  023B               	subwf	_bujinFlag,w
  3741  0EFE  1C03               	skipc
  3742  0EFF  2F05               	goto	l3833
  3743                           
  3744                           ;main.c: 175: {
  3745                           ;main.c: 176: shanshuoTime3 = 450;
  3746  0F00  30C2               	movlw	194
  3747  0F01  00A8               	movwf	_shanshuoTime3
  3748  0F02  3001               	movlw	1
  3749  0F03  00A9               	movwf	_shanshuoTime3+1
  3750                           
  3751                           ;main.c: 177: }
  3752  0F04  2F07               	goto	l3835
  3753  0F05                     l3833:	
  3754                           
  3755                           ;main.c: 178: else
  3756                           ;main.c: 179: {
  3757                           ;main.c: 180: shanshuoTime3 = 0;
  3758  0F05  01A8               	clrf	_shanshuoTime3
  3759  0F06  01A9               	clrf	_shanshuoTime3+1
  3760  0F07                     l3835:	
  3761                           
  3762                           ;main.c: 181: }
  3763                           ;main.c: 182: }
  3764                           ;main.c: 184: KeyOldFlag = KeyFlag[0];
  3765  0F07  0879               	movf	_KeyFlag,w	;volatile
  3766  0F08  00B4               	movwf	KeyServer@KeyOldFlag
  3767  0F09                     l3837:	
  3768                           
  3769                           ;main.c: 185: }
  3770                           ;main.c: 186: if(firstLock == 0 && KeyOldFlag & 0x4)
  3771  0F09  086E               	movf	_firstLock,w
  3772  0F0A  1903               	btfsc	3,2
  3773  0F0B  1D34               	btfss	KeyServer@KeyOldFlag,2
  3774  0F0C  0008               	return
  3775                           
  3776                           ;main.c: 187: {
  3777                           ;main.c: 188: if(++keyCount >= 400)
  3778  0F0D  1683               	bsf	3,5	;RP0=1, select bank1
  3779  0F0E  0AC5               	incf	_keyCount^(0+128),f
  3780  0F0F  1903               	skipnz
  3781  0F10  0AC6               	incf	(_keyCount+1)^(0+128),f
  3782  0F11  3001               	movlw	1
  3783  0F12  0246               	subwf	(_keyCount+1)^(0+128),w
  3784  0F13  3090               	movlw	144
  3785  0F14  1903               	skipnz
  3786  0F15  0245               	subwf	_keyCount^(0+128),w
  3787  0F16  1C03               	skipc
  3788  0F17  0008               	return
  3789                           
  3790                           ;main.c: 189: {
  3791                           ;main.c: 190: keyCount = 0;
  3792  0F18  01C5               	clrf	_keyCount^(0+128)
  3793  0F19  01C6               	clrf	(_keyCount+1)^(0+128)
  3794                           
  3795                           ;main.c: 191: if(longKeyFlag == 0)
  3796  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0F1B  0839               	movf	_longKeyFlag,w
  3798  0F1C  1D03               	btfss	3,2
  3799  0F1D  0008               	return
  3800                           
  3801                           ;main.c: 192: {
  3802                           ;main.c: 193: longKeyFlag = 1;
  3803  0F1E  01B9               	clrf	_longKeyFlag
  3804  0F1F  0AB9               	incf	_longKeyFlag,f
  3805                           
  3806                           ;main.c: 194: if(powerFlag > 0)
  3807  0F20  083A               	movf	_powerFlag,w
  3808  0F21  1903               	btfsc	3,2
  3809  0F22  2F2A               	goto	l971
  3810                           
  3811                           ;main.c: 195: {
  3812                           ;main.c: 196: powerFlag = 0;
  3813  0F23  01BA               	clrf	_powerFlag
  3814                           
  3815                           ;main.c: 197: workStep = 0;
  3816  0F24  01FB               	clrf	_workStep
  3817                           
  3818                           ;main.c: 198: wuhuaFlag = 0;
  3819  0F25  01C4               	clrf	_wuhuaFlag
  3820                           
  3821                           ;main.c: 199: bujinFlag = 0;
  3822  0F26  01BB               	clrf	_bujinFlag
  3823                           
  3824                           ;main.c: 200: shanshuoTime3 = 0;
  3825  0F27  01A8               	clrf	_shanshuoTime3
  3826  0F28  01A9               	clrf	_shanshuoTime3+1
  3827                           
  3828                           ;main.c: 201: }
  3829  0F29  0008               	return
  3830  0F2A                     l971:	
  3831  0F2A  30D0               	movlw	208
  3832                           
  3833                           ;main.c: 202: else
  3834                           ;main.c: 203: {
  3835                           ;main.c: 204: powerFlag = 1;
  3836  0F2B  01BA               	clrf	_powerFlag
  3837  0F2C  0ABA               	incf	_powerFlag,f
  3838                           
  3839                           ;main.c: 205: workStep = 1;
  3840  0F2D  01FB               	clrf	_workStep
  3841  0F2E  0AFB               	incf	_workStep,f
  3842                           
  3843                           ;main.c: 206: shanshuoTime3 = 2000;
  3844  0F2F  00A8               	movwf	_shanshuoTime3
  3845  0F30  3007               	movlw	7
  3846  0F31  00A9               	movwf	_shanshuoTime3+1
  3847  0F32  0008               	return
  3848  0F33                     l3855:	
  3849                           
  3850                           ;main.c: 212: else
  3851                           ;main.c: 213: {
  3852                           ;main.c: 214: KeyOldFlag = 0;
  3853  0F33  01B4               	clrf	KeyServer@KeyOldFlag
  3854                           
  3855                           ;main.c: 215: longKeyFlag = 0;
  3856  0F34  01B9               	clrf	_longKeyFlag
  3857                           
  3858                           ;main.c: 216: keyCount = 0;
  3859  0F35  1683               	bsf	3,5	;RP0=1, select bank1
  3860  0F36  01C5               	clrf	_keyCount^(0+128)
  3861  0F37  01C6               	clrf	(_keyCount+1)^(0+128)
  3862  0F38  0008               	return
  3863  0F39                     __end_of_KeyServer:	
  3864  0F39                     PL38:	
  3865  0F39  30C2               	movlw	194
  3866  0F3A  00AC               	movwf	_shanshuoTime
  3867  0F3B  3001               	movlw	1
  3868  0F3C  00AD               	movwf	_shanshuoTime+1
  3869  0F3D  0008               	return
  3870  0F3E                     __end_ofPL38:	
  3871                           
  3872                           	psect	text22
  3873  0025                     __ptext22:	
  3874 ;; *************** function _Init_System *****************
  3875 ;; Defined at:
  3876 ;;		line 63 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, status,2
  3885 ;; Tracked objects:
  3886 ;;		On entry : B00/0
  3887 ;;		On exit  : 300/100
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       0       0       0
  3891 ;;      Locals:         0       0       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         0       0       0       0
  3894 ;;Total ram usage:        0 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    1
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_main
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function _Init_System
  3906  0025                     _Init_System:	
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in _Init_System: [wreg+status,2]
  3910  0025  0000               	nop	;# 
  3911  0026  0064               	clrwdt	;# 
  3912                           
  3913                           ;main.c: 67: INTCON = 0;
  3914  0027  018B               	clrf	11	;volatile
  3915                           
  3916                           ;main.c: 68: OSCCON = 0X72;
  3917  0028  3072               	movlw	114
  3918  0029  1283               	bcf	3,5	;RP0=0, select bank0
  3919  002A  1303               	bcf	3,6	;RP1=0, select bank0
  3920  002B  0094               	movwf	20	;volatile
  3921                           
  3922                           ;main.c: 69: OPTION_REG = 0;
  3923  002C  0181               	clrf	1	;volatile
  3924                           
  3925                           ;main.c: 74: TRISA = 0x04;
  3926  002D  3004               	movlw	4
  3927  002E  1683               	bsf	3,5	;RP0=1, select bank1
  3928  002F  0085               	movwf	5	;volatile
  3929                           
  3930                           ;main.c: 75: PORTA = 0;
  3931  0030  0186               	clrf	6	;volatile
  3932                           
  3933                           ;main.c: 76: TRISB = 0x20;
  3934  0031  3020               	movlw	32
  3935  0032  1283               	bcf	3,5	;RP0=0, select bank0
  3936  0033  0085               	movwf	5	;volatile
  3937                           
  3938                           ;main.c: 77: PORTB = 0;
  3939  0034  0186               	clrf	6	;volatile
  3940                           
  3941                           ;main.c: 78: WPUB = 0x00;
  3942  0035  0188               	clrf	8	;volatile
  3943                           
  3944                           ;main.c: 79: TRISC = 0;
  3945  0036  1703               	bsf	3,6	;RP1=1, select bank2
  3946  0037  0185               	clrf	5	;volatile
  3947                           
  3948                           ;main.c: 80: PORTC = 0;
  3949  0038  0186               	clrf	6	;volatile
  3950                           
  3951                           ;main.c: 82: PIE1 = 2;
  3952  0039  3002               	movlw	2
  3953  003A  1303               	bcf	3,6	;RP1=0, select bank0
  3954  003B  008E               	movwf	14	;volatile
  3955                           
  3956                           ;main.c: 83: PR2 = 250;
  3957  003C  30FA               	movlw	250
  3958  003D  0091               	movwf	17	;volatile
  3959                           
  3960                           ;main.c: 84: T2CON = 4;
  3961  003E  3004               	movlw	4
  3962  003F  0093               	movwf	19	;volatile
  3963                           
  3964                           ;main.c: 86: INTCON = 0XC0;
  3965  0040  30C0               	movlw	192
  3966  0041  008B               	movwf	11	;volatile
  3967                           
  3968                           ;main.c: 87: ADCON0 = 0X41;
  3969                           
  3970                           ;main.c: 88: ADON = 1;
  3971                           
  3972                           ;main.c: 89: ADCON1 = 0x00;
  3973  0042  2BE9               	ljmp	PL24	;call to abstracted procedure
  3974  0043                     __end_of_Init_System:	
  3975  0043                     __ptext18:	
  3976 ;; *************** function _WorkSleep *****************
  3977 ;; Defined at:
  3978 ;;		line 246 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 300/0
  3989 ;;		On exit  : 200/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3992 ;;      Params:         0       0       0       0
  3993 ;;      Locals:         0       0       0       0
  3994 ;;      Temps:          0       0       0       0
  3995 ;;      Totals:         0       0       0       0
  3996 ;;Total ram usage:        0 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    4
  3999 ;; This function calls:
  4000 ;;		_Refurbish_Sfr
  4001 ;;		_SystemEnterSleep
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _WorkSleep
  4009  0043                     _WorkSleep:	
  4010                           
  4011                           ;main.c: 249: static unsigned char time;
  4012                           ;main.c: 251: if(B_OnOff)time = 0;
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4016  0043  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4017  0044  01B3               	clrf	WorkSleep@time
  4018                           
  4019                           ;main.c: 253: if(++time >= 125)
  4020  0045  307D               	movlw	125
  4021  0046  0AB3               	incf	WorkSleep@time,f
  4022  0047  0233               	subwf	WorkSleep@time,w
  4023  0048  1C03               	skipc
  4024  0049  0008               	return
  4025                           
  4026                           ;main.c: 254: {
  4027                           ;main.c: 255: time = 0;
  4028  004A  01B3               	clrf	WorkSleep@time
  4029                           
  4030                           ;main.c: 256: INTCON = 0;
  4031  004B  018B               	clrf	11	;volatile
  4032                           
  4033                           ;main.c: 257: PIE1 = 0;
  4034  004C  018E               	clrf	14	;volatile
  4035                           
  4036                           ;main.c: 258: PIE2 = 0;
  4037  004D  1703               	bsf	3,6	;RP1=1, select bank2
  4038  004E  0190               	clrf	16	;volatile
  4039                           
  4040                           ;main.c: 259: PIR1 = 0;
  4041  004F  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0050  018D               	clrf	13	;volatile
  4043                           
  4044                           ;main.c: 260: PIR2 = 0;
  4045  0051  1703               	bsf	3,6	;RP1=1, select bank2
  4046  0052  018F               	clrf	15	;volatile
  4047                           
  4048                           ;main.c: 261: T2CON = 0;
  4049  0053  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0054  0193               	clrf	19	;volatile
  4051                           
  4052                           ;main.c: 262: ADCON1 = 0;
  4053  0055  1683               	bsf	3,5	;RP0=1, select bank1
  4054  0056  0196               	clrf	22	;volatile
  4055                           
  4056                           ;main.c: 265: ADCON0 = 0;
  4057  0057  0195               	clrf	21	;volatile
  4058                           
  4059                           ;main.c: 268: PORTA = 0x01;
  4060  0058  3001               	movlw	1
  4061  0059  0086               	movwf	6	;volatile
  4062                           
  4063                           ;main.c: 269: PORTB = 0x00;
  4064  005A  1283               	bcf	3,5	;RP0=0, select bank0
  4065  005B  0186               	clrf	6	;volatile
  4066                           
  4067                           ;main.c: 270: TRISC = 0;
  4068  005C  1703               	bsf	3,6	;RP1=1, select bank2
  4069  005D  0185               	clrf	5	;volatile
  4070                           
  4071                           ;main.c: 271: PORTC = 0x03;
  4072  005E  3003               	movlw	3
  4073  005F  0086               	movwf	6	;volatile
  4074                           
  4075                           ;main.c: 273: TRISB5 =1;
  4076  0060  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0061  1685               	bsf	5,5	;volatile
  4078                           
  4079                           ;main.c: 275: RBIF = 0;
  4080  0062  100B               	bcf	11,0	;volatile
  4081                           
  4082                           ;main.c: 276: RBIE = 1;
  4083  0063  158B               	bsf	11,3	;volatile
  4084                           
  4085                           ;main.c: 277: IOCB5= 1;
  4086  0064  1689               	bsf	9,5	;volatile
  4087                           
  4088                           ;main.c: 278: PORTB;
  4089  0065  0806               	movf	6,w	;volatile
  4090                           
  4091                           ;main.c: 290: SystemEnterSleep();
  4092  0066  209E  118A         	fcall	_SystemEnterSleep
  4093                           
  4094                           ;main.c: 291: if(RAIF)
  4095  0068  1D8D               	btfss	13,3	;volatile
  4096  0069  286D               	goto	l4723
  4097                           
  4098                           ;main.c: 292: {
  4099                           ;main.c: 293: RAIF = 0;
  4100  006A  118D               	bcf	13,3	;volatile
  4101                           
  4102                           ;main.c: 294: PORTA;
  4103  006B  1683               	bsf	3,5	;RP0=1, select bank1
  4104  006C  0806               	movf	6,w	;volatile
  4105  006D                     l4723:	
  4106                           
  4107                           ;main.c: 295: }
  4108                           ;main.c: 297: Refurbish_Sfr();
  4109  006D  2389  118A         	fcall	_Refurbish_Sfr
  4110                           
  4111                           ;main.c: 298: PORTB &= 0xFD;
  4112  006F  1086               	bcf	6,1	;volatile
  4113                           
  4114                           ;main.c: 299: ADCON0 = 0X41;
  4115                           
  4116                           ;main.c: 300: ADON = 1;
  4117                           
  4118                           ;main.c: 301: ADCON1 = 0x00;
  4119  0070  2BE9               	ljmp	PL24	;call to abstracted procedure
  4120  0071                     __end_of_WorkSleep:	
  4121  0071                     __ptext23:	
  4122 ;; *************** function _CheckTouchKey *****************
  4123 ;; Defined at:
  4124 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;		None
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;		None
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      void 
  4131 ;; Registers used:
  4132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/100
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4138 ;;      Params:         0       0       0       0
  4139 ;;      Locals:         0       0       0       0
  4140 ;;      Temps:          0       0       0       0
  4141 ;;      Totals:         0       0       0       0
  4142 ;;Total ram usage:        0 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    5
  4145 ;; This function calls:
  4146 ;;		_CheckKeyOldValue
  4147 ;;		_CheckOnceResult
  4148 ;;		_CheckValidTime
  4149 ;;		_ClearResSum
  4150 ;;		_GetTouchKeyValue
  4151 ;;		_KeyStopClear
  4152 ;;		_TurnKeyFlags
  4153 ;; This function is called by:
  4154 ;;		_main
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function _CheckTouchKey
  4160  0071                     _CheckTouchKey:	
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4164  0071  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4165  0072  287F               	goto	l1346
  4166  0073  212E  118A         	fcall	_GetTouchKeyValue
  4167  0075  3008               	movlw	8
  4168  0076  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0077  1303               	bcf	3,6	;RP1=0, select bank0
  4170  0078  0AB2               	incf	_KeyCounter,f
  4171  0079  0232               	subwf	_KeyCounter,w
  4172  007A  1C03               	skipc
  4173  007B  289D               	goto	l4809
  4174  007C  01B2               	clrf	_KeyCounter
  4175  007D  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4176  007E  289D               	goto	l4809
  4177  007F                     l1346:	
  4178  007F  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4179  0080  2897               	goto	l4803
  4180  0081  219D  118A         	fcall	_CheckOnceResult
  4181  0083  2332  118A         	fcall	_TurnKeyFlags
  4182  0085  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4183  0086  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4184  0087  288E               	goto	l4793
  4185  0088  3002               	movlw	2
  4186  0089  1283               	bcf	3,5	;RP0=0, select bank0
  4187  008A  1303               	bcf	3,6	;RP1=0, select bank0
  4188  008B  0232               	subwf	_KeyCounter,w
  4189  008C  1C03               	skipc
  4190  008D  2893               	goto	l4801
  4191  008E                     l4793:	
  4192  008E  231E  118A         	fcall	_KeyStopClear
  4193  0090  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4194  0091  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4195  0092  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4196  0093                     l4801:	
  4197  0093  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0094  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0095  01B2               	clrf	_KeyCounter
  4200  0096  289D               	goto	l4809
  4201  0097                     l4803:	
  4202  0097  22B6  118A         	fcall	_CheckKeyOldValue
  4203  0099  218E  118A         	fcall	_ClearResSum
  4204  009B  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4205  009C  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4206  009D                     l4809:	
  4207  009D  2B63               	ljmp	l3641	;# 
  4208  009E                     __end_of_CheckTouchKey:	
  4209  009E                     __ptext19:	
  4210 ;; *************** function _SystemEnterSleep *****************
  4211 ;; Defined at:
  4212 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  92              2    6[BANK0 ] unsigned int 
  4217 ;;  93              2    4[BANK0 ] unsigned int 
  4218 ;;  94              2    2[BANK0 ] unsigned int 
  4219 ;;  91              1    8[BANK0 ] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 300/0
  4226 ;;		On exit  : 300/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4229 ;;      Params:         0       0       0       0
  4230 ;;      Locals:         0       7       0       0
  4231 ;;      Temps:          0       2       0       0
  4232 ;;      Totals:         0       9       0       0
  4233 ;;Total ram usage:        9 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    3
  4236 ;; This function calls:
  4237 ;;		_ClearResSum
  4238 ;;		_GetTouchKeyValue
  4239 ;;		_KeyClearOne
  4240 ;; This function is called by:
  4241 ;;		_WorkSleep
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           
  4246                           ;psect for function _SystemEnterSleep
  4247  009E                     _SystemEnterSleep:	
  4248  009E                     l1358:	
  4249                           ;incstack = 0
  4250                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4251                           
  4252  009E  0064               	clrwdt	;# 
  4253  009F  1683               	bsf	3,5	;RP0=1, select bank1
  4254  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  4255  00A1  0181               	clrf	1	;volatile
  4256  00A2  3007               	movlw	7
  4257  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  4258  00A4  0481               	iorwf	1,f	;volatile
  4259  00A5  1581               	bsf	1,3	;volatile
  4260  00A6  0064               	clrwdt	;# 
  4261  00A7  300A               	movlw	10
  4262  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  4263  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  4264  00AA  0081               	movwf	1	;volatile
  4265  00AB  0064               	clrwdt	;# 
  4266  00AC  1283               	bcf	3,5	;RP0=0, select bank2
  4267  00AD  1703               	bsf	3,6	;RP1=1, select bank2
  4268  00AE  0191               	clrf	17	;volatile
  4269  00AF  0193               	clrf	19	;volatile
  4270  00B0  3002               	movlw	2
  4271  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4272  00B2  0094               	movwf	20	;volatile
  4273  00B3  0063               	sleep	;# 
  4274  00B4  0000               	nop	;# 
  4275  00B5  0064               	clrwdt	;# 
  4276  00B6  3072               	movlw	114
  4277  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  4278  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  4279  00B9  0094               	movwf	20	;volatile
  4280  00BA  3079               	movlw	121
  4281  00BB  1703               	bsf	3,6	;RP1=1, select bank2
  4282  00BC  0093               	movwf	19	;volatile
  4283  00BD  218E  118A         	fcall	_ClearResSum
  4284  00BF  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4285  00C0  212E  118A         	fcall	_GetTouchKeyValue
  4286  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4287  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4288  00C4  23F5  118A         	fcall	PL44	;call to abstracted procedure
  4289  00C6  1C0B               	btfss	11,0	;volatile
  4290  00C7  188B               	btfsc	11,1	;volatile
  4291  00C8  28CB               	goto	l4291
  4292  00C9  1D8D               	btfss	13,3	;volatile
  4293  00CA  28D2               	goto	l4303
  4294  00CB                     l4291:	
  4295  00CB  218E               	fcall	_ClearResSum
  4296  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  4297  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  4298  00CE  01B2               	clrf	_KeyCounter
  4299  00CF  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4300  00D0  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4301  00D1  0008               	return
  4302  00D2                     l4303:	
  4303  00D2  084F               	movf	SystemEnterSleep@92,w
  4304  00D3  3907               	andlw	7
  4305  00D4  1003               	clrc
  4306  00D5  1903               	btfsc	3,2
  4307  00D6  2928               	goto	L8
  4308  00D7  0D51               	rlf	SystemEnterSleep@91,w
  4309  00D8  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4310  00D9  0084               	movwf	4
  4311  00DA  1383               	bcf	3,7	;select IRP bank1
  4312  00DB  0800               	movf	0,w
  4313  00DC  00CD               	movwf	SystemEnterSleep@93
  4314  00DD  0A84               	incf	4,f
  4315  00DE  0800               	movf	0,w
  4316  00DF  00CE               	movwf	SystemEnterSleep@93+1
  4317  00E0  00CC               	movwf	SystemEnterSleep@94+1
  4318  00E1  084D               	movf	SystemEnterSleep@93,w
  4319  00E2  00CB               	movwf	SystemEnterSleep@94
  4320  00E3  084D               	movf	SystemEnterSleep@93,w
  4321  00E4  044E               	iorwf	SystemEnterSleep@93+1,w
  4322  00E5  1903               	btfsc	3,2
  4323  00E6  2927               	goto	l4337
  4324  00E7  0851               	movf	SystemEnterSleep@91,w
  4325  00E8  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4326  00E9  0084               	movwf	4
  4327  00EA  158A  2000  118A   	fcall	stringdir
  4328  00ED  07CB               	addwf	SystemEnterSleep@94,f
  4329  00EE  1803               	skipnc
  4330  00EF  0ACC               	incf	SystemEnterSleep@94+1,f
  4331  00F0  1003               	clrc
  4332  00F1  0D51               	rlf	SystemEnterSleep@91,w
  4333  00F2  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4334  00F3  23D4  118A         	fcall	PL14	;call to abstracted procedure
  4335  00F5  084C               	movf	SystemEnterSleep@94+1,w
  4336  00F6  024A               	subwf	??_SystemEnterSleep+1,w
  4337  00F7  1D03               	skipz
  4338  00F8  28FB               	goto	u4225
  4339  00F9  084B               	movf	SystemEnterSleep@94,w
  4340  00FA  0249               	subwf	??_SystemEnterSleep,w
  4341  00FB                     u4225:	
  4342  00FB  1C03               	skipc
  4343  00FC  290F               	goto	L7
  4344  00FD  23F5  118A         	fcall	PL44	;call to abstracted procedure
  4345  00FF                     l4317:	
  4346  00FF  084F               	movf	SystemEnterSleep@92,w
  4347  0100  3907               	andlw	7
  4348  0101  1D03               	btfss	3,2
  4349  0102  2906               	goto	l4321
  4350  0103  0851               	movf	SystemEnterSleep@91,w
  4351  0104  2293  118A         	fcall	_KeyClearOne
  4352  0106                     l4321:	
  4353  0106  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0107  3003               	movlw	3
  4355  0108  1303               	bcf	3,6	;RP1=0, select bank0
  4356  0109  1003               	clrc
  4357  010A  23FA  118A         	fcall	PL46	;call to abstracted procedure
  4358  010C  1803               	btfsc	3,0
  4359  010D  28CB               	goto	l4291
  4360  010E  28FF               	goto	l4317
  4361  010F                     L7:	
  4362  010F  0D51               	rlf	SystemEnterSleep@91,w
  4363  0110  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4364  0111  23D4  118A         	fcall	PL14	;call to abstracted procedure
  4365  0113  1003               	clrc
  4366  0114  0D51               	rlf	SystemEnterSleep@91,w
  4367  0115  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4368  0116  23BE  118A         	fcall	PL10	;call to abstracted procedure
  4369  0118  0800               	movf	0,w
  4370  0119  00C9               	movwf	??_SystemEnterSleep
  4371  011A  0A84               	incf	4,f
  4372  011B  0800               	movf	0,w
  4373  011C  00CA               	movwf	??_SystemEnterSleep+1
  4374  011D  1003               	clrc
  4375  011E  0D51               	rlf	SystemEnterSleep@91,w
  4376  011F  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4377  0120  23BE  118A         	fcall	PL10	;call to abstracted procedure
  4378  0122  084D               	movf	SystemEnterSleep@93,w
  4379  0123  0080               	movwf	0
  4380  0124  0A84               	incf	4,f
  4381  0125  084E               	movf	SystemEnterSleep@93+1,w
  4382  0126  0080               	movwf	0
  4383  0127                     l4337:	
  4384  0127  1003               	clrc
  4385  0128                     L8:	
  4386  0128  3003               	movlw	3
  4387  0129  23FA  118A         	fcall	PL46	;call to abstracted procedure
  4388  012B  1803               	btfsc	3,0
  4389  012C  289E               	goto	l1358
  4390  012D  28D2               	goto	l4303
  4391  012E                     __end_of_SystemEnterSleep:	
  4392  012E                     __ptext27:	
  4393 ;; *************** function _GetTouchKeyValue *****************
  4394 ;; Defined at:
  4395 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  63              2    5[COMMON] unsigned int 
  4400 ;;  64              2    3[COMMON] unsigned int 
  4401 ;;  62              1    7[COMMON] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/200
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4411 ;;      Params:         0       0       0       0
  4412 ;;      Locals:         5       0       0       0
  4413 ;;      Temps:          0       0       0       0
  4414 ;;      Totals:         5       0       0       0
  4415 ;;Total ram usage:        5 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    2
  4418 ;; This function calls:
  4419 ;;		_ClearResSum
  4420 ;; This function is called by:
  4421 ;;		_CheckTouchKey
  4422 ;;		_SystemEnterSleep
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _GetTouchKeyValue
  4428  012E                     _GetTouchKeyValue:	
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4432  012E  01F7               	clrf	GetTouchKeyValue@62
  4433  012F  01F5               	clrf	GetTouchKeyValue@63
  4434  0130  0AF5               	incf	GetTouchKeyValue@63,f
  4435  0131  01F6               	clrf	GetTouchKeyValue@63+1
  4436  0132                     l3097:	
  4437  0132  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4438  0133  2938               	goto	l3101
  4439  0134  0875               	movf	GetTouchKeyValue@63,w
  4440  0135  3907               	andlw	7
  4441  0136  1903               	btfsc	3,2
  4442  0137  2984               	goto	l3129
  4443  0138                     l3101:	
  4444  0138  1283               	bcf	3,5	;RP0=0, select bank2
  4445  0139  1703               	bsf	3,6	;RP1=1, select bank2
  4446  013A  0191               	clrf	17	;volatile
  4447  013B  0192               	clrf	18	;volatile
  4448  013C  3079               	movlw	121
  4449  013D  0093               	movwf	19	;volatile
  4450  013E  1303               	bcf	3,6	;RP1=0, select bank0
  4451  013F  1305               	bcf	5,6	;volatile
  4452  0140  1306               	bcf	6,6	;volatile
  4453  0141  0000               	nop	;# 
  4454  0142  0000               	nop	;# 
  4455  0143  0000               	nop	;# 
  4456  0144  0000               	nop	;# 
  4457  0145  0000               	nop	;# 
  4458  0146  0000               	nop	;# 
  4459  0147  0000               	nop	;# 
  4460  0148  0000               	nop	;# 
  4461  0149  1283               	bcf	3,5	;RP0=0, select bank0
  4462  014A  1303               	bcf	3,6	;RP1=0, select bank0
  4463  014B  1705               	bsf	5,6	;volatile
  4464  014C  0877               	movf	GetTouchKeyValue@62,w
  4465  014D  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4466  014E  0084               	movwf	4
  4467  014F  158A  2000  118A   	fcall	stringdir
  4468  0152  1703               	bsf	3,6	;RP1=1, select bank2
  4469  0153  0091               	movwf	17	;volatile
  4470  0154  0877               	movf	GetTouchKeyValue@62,w
  4471  0155  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4472  0156  0084               	movwf	4
  4473  0157  158A  2000  118A   	fcall	stringdir
  4474  015A  0092               	movwf	18	;volatile
  4475  015B  0000               	nop	;# 
  4476  015C  0000               	nop	;# 
  4477  015D  0000               	nop	;# 
  4478  015E  0000               	nop	;# 
  4479  015F  1283               	bcf	3,5	;RP0=0, select bank2
  4480  0160  1703               	bsf	3,6	;RP1=1, select bank2
  4481  0161  1411               	bsf	17,0	;volatile
  4482  0162  30D0               	movlw	208
  4483  0163  00F3               	movwf	GetTouchKeyValue@64
  4484  0164  3007               	movlw	7
  4485  0165  00F4               	movwf	GetTouchKeyValue@64+1
  4486  0166                     l1268:	
  4487  0166  1B91               	btfsc	17,7	;volatile
  4488  0167  2974               	goto	l3127
  4489  0168  3001               	movlw	1
  4490  0169  02F3               	subwf	GetTouchKeyValue@64,f
  4491  016A  1C03               	skipc
  4492  016B  03F4               	decf	GetTouchKeyValue@64+1,f
  4493  016C  0873               	movf	GetTouchKeyValue@64,w
  4494  016D  0474               	iorwf	GetTouchKeyValue@64+1,w
  4495  016E  1D03               	btfss	3,2
  4496  016F  2966               	goto	l1268
  4497  0170  30FF               	movlw	255
  4498  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0172  00B2               	movwf	_KeyCounter
  4500  0173  298E               	ljmp	l2945
  4501  0174                     l3127:	
  4502  0174  1003               	clrc
  4503  0175  0D77               	rlf	GetTouchKeyValue@62,w
  4504  0176  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4505  0177  0084               	movwf	4
  4506  0178  0816               	movf	22,w	;volatile
  4507  0179  1383               	bcf	3,7	;select IRP bank1
  4508  017A  0780               	addwf	0,f
  4509  017B  0F84               	incfsz	4,f
  4510  017C  0800               	movf	0,w
  4511  017D  1803               	skipnc
  4512  017E  0A00               	incf	0,w
  4513  017F  00FF               	movwf	127
  4514  0180  0817               	movf	23,w	;volatile
  4515  0181  077F               	addwf	127,w
  4516  0182  0080               	movwf	0
  4517  0183  0384               	decf	4,f
  4518  0184                     l3129:	
  4519  0184  3003               	movlw	3
  4520  0185  1003               	clrc
  4521  0186  0DF5               	rlf	GetTouchKeyValue@63,f
  4522  0187  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4523  0188  0AF7               	incf	GetTouchKeyValue@62,f
  4524  0189  0277               	subwf	GetTouchKeyValue@62,w
  4525  018A  1C03               	skipc
  4526  018B  2932               	goto	l3097
  4527  018C  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4528  018D  0008               	return
  4529  018E                     __end_of_GetTouchKeyValue:	
  4530  018E                     __ptext28:	
  4531 ;; *************** function _ClearResSum *****************
  4532 ;; Defined at:
  4533 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  56              1    2[COMMON] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/200
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4547 ;;      Params:         0       0       0       0
  4548 ;;      Locals:         1       0       0       0
  4549 ;;      Temps:          0       0       0       0
  4550 ;;      Totals:         1       0       0       0
  4551 ;;Total ram usage:        1 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    1
  4554 ;; This function calls:
  4555 ;;		Nothing
  4556 ;; This function is called by:
  4557 ;;		_GetTouchKeyValue
  4558 ;;		_CheckTouchKey
  4559 ;;		_SystemEnterSleep
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _ClearResSum
  4565  018E                     _ClearResSum:	
  4566  018E                     l2945:	
  4567                           ;incstack = 0
  4568                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4569                           
  4570  018E  01F2               	clrf	ClearResSum@56
  4571  018F                     l2947:	
  4572  018F  1003               	clrc
  4573  0190  0D72               	rlf	ClearResSum@56,w
  4574  0191  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4575  0192  0084               	movwf	4
  4576  0193  3003               	movlw	3
  4577  0194  1383               	bcf	3,7	;select IRP bank1
  4578  0195  0180               	clrf	0
  4579  0196  0A84               	incf	4,f
  4580  0197  0180               	clrf	0
  4581  0198  0AF2               	incf	ClearResSum@56,f
  4582  0199  0272               	subwf	ClearResSum@56,w
  4583  019A  1803               	btfsc	3,0
  4584  019B  0008               	return
  4585  019C  298F               	goto	l2947
  4586  019D                     __end_of_ClearResSum:	
  4587  019D                     __ptext30:	
  4588 ;; *************** function _CheckOnceResult *****************
  4589 ;; Defined at:
  4590 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;		None
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  71              2   10[BANK0 ] unsigned int 
  4595 ;;  72              2    7[BANK0 ] unsigned int 
  4596 ;;  73              2    4[BANK0 ] unsigned int 
  4597 ;;  68              1   12[BANK0 ] unsigned char 
  4598 ;;  69              1    9[BANK0 ] unsigned char 
  4599 ;;  70              1    6[BANK0 ] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/100
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4609 ;;      Params:         0       0       0       0
  4610 ;;      Locals:         0       9       0       0
  4611 ;;      Temps:          0       4       0       0
  4612 ;;      Totals:         0      13       0       0
  4613 ;;Total ram usage:       13 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    3
  4616 ;; This function calls:
  4617 ;;		_KeyClearOne
  4618 ;;		_KeyHave
  4619 ;;		_KeyIsIn
  4620 ;; This function is called by:
  4621 ;;		_CheckTouchKey
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _CheckOnceResult
  4627  019D                     _CheckOnceResult:	
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4631  019D  1283               	bcf	3,5	;RP0=0, select bank0
  4632  019E  1303               	bcf	3,6	;RP1=0, select bank0
  4633  019F  01D5               	clrf	CheckOnceResult@68
  4634  01A0  01A0               	clrf	_KeyData	;volatile
  4635  01A1  01A1               	clrf	_KeyData+1	;volatile
  4636  01A2  01B1               	clrf	_KeyMaxSub
  4637  01A3                     l4539:	
  4638  01A3  0855               	movf	CheckOnceResult@68,w
  4639  01A4  3907               	andlw	7
  4640  01A5  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4641  01A6  0084               	movwf	4
  4642  01A7  158A  2000  118A   	fcall	stringdir
  4643  01AA  00CF               	movwf	CheckOnceResult@70
  4644  01AB  1003               	clrc
  4645  01AC  0D55               	rlf	CheckOnceResult@68,w
  4646  01AD  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4647  01AE  0084               	movwf	4
  4648  01AF  3003               	movlw	3
  4649  01B0                     u4705:	
  4650  01B0  0A84               	incf	4,f
  4651  01B1  1003               	clrc
  4652  01B2  1383               	bcf	3,7	;select IRP bank1
  4653  01B3  0C80               	rrf	0,f
  4654  01B4  0384               	decf	4,f
  4655  01B5  0C80               	rrf	0,f
  4656  01B6  3EFF               	addlw	-1
  4657  01B7  1D03               	skipz
  4658  01B8  29B0               	goto	u4705
  4659  01B9  1003               	clrc
  4660  01BA  0D55               	rlf	CheckOnceResult@68,w
  4661  01BB  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4662  01BC  0084               	movwf	4
  4663  01BD  0800               	movf	0,w
  4664  01BE  00D3               	movwf	CheckOnceResult@71
  4665  01BF  0A84               	incf	4,f
  4666  01C0  0800               	movf	0,w
  4667  01C1  00D4               	movwf	CheckOnceResult@71+1
  4668  01C2  0855               	movf	CheckOnceResult@68,w
  4669  01C3  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4670  01C4  0084               	movwf	4
  4671  01C5  158A  2000  118A   	fcall	stringdir
  4672  01C8  00D2               	movwf	CheckOnceResult@69
  4673  01C9  00D0               	movwf	CheckOnceResult@72
  4674  01CA  01D1               	clrf	CheckOnceResult@72+1
  4675  01CB  0853               	movf	CheckOnceResult@71,w
  4676  01CC  07D0               	addwf	CheckOnceResult@72,f
  4677  01CD  1803               	skipnc
  4678  01CE  0AD1               	incf	CheckOnceResult@72+1,f
  4679  01CF  0854               	movf	CheckOnceResult@71+1,w
  4680  01D0  07D1               	addwf	CheckOnceResult@72+1,f
  4681  01D1  0855               	movf	CheckOnceResult@68,w
  4682  01D2  2283  118A         	fcall	_KeyIsIn
  4683  01D4  3A00               	xorlw	0
  4684  01D5  1D03               	skipz
  4685  01D6  2A34               	goto	l4581
  4686  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  4687  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  4688  01D9  1003               	clrc
  4689  01DA  0D55               	rlf	CheckOnceResult@68,w
  4690  01DB  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4691  01DC  0084               	movwf	4
  4692  01DD  1383               	bcf	3,7	;select IRP bank1
  4693  01DE  0800               	movf	0,w
  4694  01DF  00CD               	movwf	CheckOnceResult@73
  4695  01E0  0A84               	incf	4,f
  4696  01E1  0800               	movf	0,w
  4697  01E2  00CE               	movwf	CheckOnceResult@73+1
  4698  01E3  1003               	clrc
  4699  01E4  0D55               	rlf	CheckOnceResult@68,w
  4700  01E5  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4701  01E6  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4702  01E8  0251               	subwf	CheckOnceResult@72+1,w
  4703  01E9  1D03               	skipz
  4704  01EA  29ED               	goto	u4725
  4705  01EB  0849               	movf	??_CheckOnceResult,w
  4706  01EC  0250               	subwf	CheckOnceResult@72,w
  4707  01ED                     u4725:	
  4708  01ED  1803               	skipnc
  4709  01EE  29FC               	goto	l4557
  4710  01EF  1003               	clrc
  4711  01F0  0D55               	rlf	CheckOnceResult@68,w
  4712  01F1  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4713  01F2  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4714  01F4  0853               	movf	CheckOnceResult@71,w
  4715  01F5  0249               	subwf	??_CheckOnceResult,w
  4716  01F6  00D3               	movwf	CheckOnceResult@71
  4717  01F7  0854               	movf	CheckOnceResult@71+1,w
  4718  01F8  1C03               	skipc
  4719  01F9  0A54               	incf	CheckOnceResult@71+1,w
  4720  01FA  024A               	subwf	??_CheckOnceResult+1,w
  4721  01FB  2A20               	goto	L9
  4722  01FC                     l4557:	
  4723  01FC  084E               	movf	CheckOnceResult@73+1,w
  4724  01FD  0251               	subwf	CheckOnceResult@72+1,w
  4725  01FE  1D03               	skipz
  4726  01FF  2A02               	goto	u4735
  4727  0200  084D               	movf	CheckOnceResult@73,w
  4728  0201  0250               	subwf	CheckOnceResult@72,w
  4729  0202                     u4735:	
  4730  0202  1803               	skipnc
  4731  0203  2A7B               	goto	l4603
  4732  0204  1003               	clrc
  4733  0205  0D55               	rlf	CheckOnceResult@68,w
  4734  0206  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4735  0207  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4736  0209  0251               	subwf	CheckOnceResult@72+1,w
  4737  020A  1D03               	skipz
  4738  020B  2A0E               	goto	u4745
  4739  020C  0849               	movf	??_CheckOnceResult,w
  4740  020D  0250               	subwf	CheckOnceResult@72,w
  4741  020E                     u4745:	
  4742  020E  1803               	skipnc
  4743  020F  2A7B               	goto	l4603
  4744  0210  1003               	clrc
  4745  0211  0D55               	rlf	CheckOnceResult@68,w
  4746  0212  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4747  0213  0084               	movwf	4
  4748  0214  084D               	movf	CheckOnceResult@73,w
  4749  0215  0080               	movwf	0
  4750  0216  0A84               	incf	4,f
  4751  0217  084E               	movf	CheckOnceResult@73+1,w
  4752  0218  0080               	movwf	0
  4753  0219  0853               	movf	CheckOnceResult@71,w
  4754  021A  024D               	subwf	CheckOnceResult@73,w
  4755  021B  00D3               	movwf	CheckOnceResult@71
  4756  021C  0854               	movf	CheckOnceResult@71+1,w
  4757  021D  1C03               	skipc
  4758  021E  0A54               	incf	CheckOnceResult@71+1,w
  4759  021F  024E               	subwf	CheckOnceResult@73+1,w
  4760  0220                     L9:	
  4761  0220  00D4               	movwf	CheckOnceResult@71+1
  4762  0221  0855               	movf	CheckOnceResult@68,w
  4763  0222  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4764  0223  0084               	movwf	4
  4765  0224  0180               	clrf	0
  4766  0225  0854               	movf	CheckOnceResult@71+1,w
  4767  0226  1903               	btfsc	3,2
  4768  0227  2A2A               	goto	l4571
  4769  0228  30FF               	movlw	255
  4770  0229  2A2B               	goto	L10
  4771  022A                     l4571:	
  4772  022A  0853               	movf	CheckOnceResult@71,w
  4773  022B                     L10:	
  4774  022B  00D2               	movwf	CheckOnceResult@69
  4775  022C  0231               	subwf	_KeyMaxSub,w
  4776  022D  1803               	skipnc
  4777  022E  2A32               	goto	l4577
  4778  022F  0852               	movf	CheckOnceResult@69,w
  4779  0230  00B1               	movwf	_KeyMaxSub
  4780  0231  2A75               	goto	l4601
  4781  0232                     l4577:	
  4782  0232  0AB2               	incf	_KeyCounter,f
  4783  0233  2A7B               	goto	l4603
  4784  0234                     l4581:	
  4785  0234  1283               	bcf	3,5	;RP0=0, select bank0
  4786  0235  1303               	bcf	3,6	;RP1=0, select bank0
  4787  0236  1003               	clrc
  4788  0237  0D55               	rlf	CheckOnceResult@68,w
  4789  0238  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4790  0239  0084               	movwf	4
  4791  023A  1383               	bcf	3,7	;select IRP bank1
  4792  023B  0800               	movf	0,w
  4793  023C  00C9               	movwf	??_CheckOnceResult
  4794  023D  0A84               	incf	4,f
  4795  023E  0800               	movf	0,w
  4796  023F  00CA               	movwf	??_CheckOnceResult+1
  4797  0240  0849               	movf	??_CheckOnceResult,w
  4798  0241  3E01               	addlw	1
  4799  0242  00CB               	movwf	??_CheckOnceResult+2
  4800  0243  084A               	movf	??_CheckOnceResult+1,w
  4801  0244  1803               	skipnc
  4802  0245  3E01               	addlw	1
  4803  0246  00CC               	movwf	??_CheckOnceResult+3
  4804  0247  0851               	movf	CheckOnceResult@72+1,w
  4805  0248  024C               	subwf	??_CheckOnceResult+3,w
  4806  0249  1D03               	skipz
  4807  024A  2A4D               	goto	u4775
  4808  024B  0850               	movf	CheckOnceResult@72,w
  4809  024C  024B               	subwf	??_CheckOnceResult+2,w
  4810  024D                     u4775:	
  4811  024D  1C03               	btfss	3,0
  4812  024E  2A7B               	goto	l4603
  4813  024F  1003               	clrc
  4814  0250  0D55               	rlf	CheckOnceResult@68,w
  4815  0251  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4816  0252  0084               	movwf	4
  4817  0253  0800               	movf	0,w
  4818  0254  23A5  118A         	fcall	PL4	;call to abstracted procedure
  4819  0256  1C03               	skipc
  4820  0257  2A61               	goto	l4591
  4821  0258  1003               	clrc
  4822  0259  0D55               	rlf	CheckOnceResult@68,w
  4823  025A  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4824  025B  0084               	movwf	4
  4825  025C  0800               	movf	0,w
  4826  025D  23A5  118A         	fcall	PL4	;call to abstracted procedure
  4827  025F  1803               	skipnc
  4828  0260  2A6D               	goto	l4595
  4829  0261                     l4591:	
  4830  0261  0855               	movf	CheckOnceResult@68,w
  4831  0262  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4832  0263  0084               	movwf	4
  4833  0264  3009               	movlw	9
  4834  0265  0A80               	incf	0,f
  4835  0266  0200               	subwf	0,w
  4836  0267  1C03               	skipc
  4837  0268  2A71               	goto	l4599
  4838  0269  0855               	movf	CheckOnceResult@68,w
  4839  026A  2293  118A         	fcall	_KeyClearOne
  4840  026C  2A7B               	goto	l4603
  4841  026D                     l4595:	
  4842  026D  0855               	movf	CheckOnceResult@68,w
  4843  026E  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4844  026F  0084               	movwf	4
  4845  0270  0180               	clrf	0
  4846  0271                     l4599:	
  4847  0271  0821               	movf	_KeyData+1,w	;volatile
  4848  0272  0420               	iorwf	_KeyData,w	;volatile
  4849  0273  1D03               	btfss	3,2
  4850  0274  2A7B               	goto	l4603
  4851  0275                     l4601:	
  4852  0275  084F               	movf	CheckOnceResult@70,w
  4853  0276  00F2               	movwf	KeyHave@59
  4854  0277  01F3               	clrf	KeyHave@59+1
  4855  0278  0855               	movf	CheckOnceResult@68,w
  4856  0279  22A8  118A         	fcall	_KeyHave
  4857  027B                     l4603:	
  4858  027B  3003               	movlw	3
  4859  027C  1283               	bcf	3,5	;RP0=0, select bank0
  4860  027D  1303               	bcf	3,6	;RP1=0, select bank0
  4861  027E  0AD5               	incf	CheckOnceResult@68,f
  4862  027F  0255               	subwf	CheckOnceResult@68,w
  4863  0280  1803               	btfsc	3,0
  4864  0281  0008               	return
  4865  0282  29A3               	goto	l4539
  4866  0283                     __end_of_CheckOnceResult:	
  4867  0283                     __ptext34:	
  4868 ;; *************** function _KeyIsIn *****************
  4869 ;; Defined at:
  4870 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  45              1    wreg     unsigned char 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  45              1    3[COMMON] unsigned char 
  4875 ;;  46              1    2[COMMON] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      unsigned char 
  4878 ;; Registers used:
  4879 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4885 ;;      Params:         0       0       0       0
  4886 ;;      Locals:         2       0       0       0
  4887 ;;      Temps:          0       0       0       0
  4888 ;;      Totals:         2       0       0       0
  4889 ;;Total ram usage:        2 bytes
  4890 ;; Hardware stack levels used:    2
  4891 ;; Hardware stack levels required when called:    1
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_KeyClearIn
  4896 ;;		_CheckOnceResult
  4897 ;;		_CheckKeyOldValue
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _KeyIsIn
  4903  0283                     _KeyIsIn:	
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4907                           ;KeyIsIn@45 stored from wreg
  4908  0283  00F3               	movwf	KeyIsIn@45
  4909  0284  3907               	andlw	7
  4910  0285  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4911  0286  0084               	movwf	4
  4912  0287  158A  2000  118A   	fcall	stringdir
  4913  028A  00F2               	movwf	KeyIsIn@46
  4914  028B  1DF3               	btfss	KeyIsIn@45,3
  4915  028C  2A8F               	goto	l2931
  4916  028D  087A               	movf	_KeyFlag+1,w	;volatile
  4917  028E  2A90               	goto	L14
  4918  028F                     l2931:	
  4919  028F  0879               	movf	_KeyFlag,w	;volatile
  4920  0290                     L14:	
  4921  0290  05F2               	andwf	KeyIsIn@46,f
  4922  0291  0872               	movf	KeyIsIn@46,w
  4923  0292  0008               	return
  4924  0293                     __end_of_KeyIsIn:	
  4925  0293                     __ptext32:	
  4926 ;; *************** function _KeyClearOne *****************
  4927 ;; Defined at:
  4928 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  49              1    wreg     unsigned char 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  49              1    2[COMMON] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4942 ;;      Params:         0       0       0       0
  4943 ;;      Locals:         1       0       0       0
  4944 ;;      Temps:          0       0       0       0
  4945 ;;      Totals:         1       0       0       0
  4946 ;;Total ram usage:        1 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    1
  4949 ;; This function calls:
  4950 ;;		Nothing
  4951 ;; This function is called by:
  4952 ;;		_KeyClearIn
  4953 ;;		_KeyStopClear
  4954 ;;		_CheckOnceResult
  4955 ;;		_SystemEnterSleep
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           
  4960                           ;psect for function _KeyClearOne
  4961  0293                     _KeyClearOne:	
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4965                           ;KeyClearOne@49 stored from wreg
  4966  0293  00F2               	movwf	KeyClearOne@49
  4967  0294  1003               	clrc
  4968  0295  0D72               	rlf	KeyClearOne@49,w
  4969  0296  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4970  0297  0084               	movwf	4
  4971  0298  1383               	bcf	3,7	;select IRP bank1
  4972  0299  23E3  118A         	fcall	PL22	;call to abstracted procedure
  4973  029B  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4974  029C  0084               	movwf	4
  4975  029D  23E3  118A         	fcall	PL22	;call to abstracted procedure
  4976  029F  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4977  02A0  0084               	movwf	4
  4978  02A1  23E3               	fcall	PL22	;call to abstracted procedure
  4979  02A2  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4980  02A3  0084               	movwf	4
  4981  02A4  0180               	clrf	0
  4982  02A5  0A84               	incf	4,f
  4983  02A6  0180               	clrf	0	;# 
  4984  02A7  0008               	return
  4985  02A8                     __end_of_KeyClearOne:	
  4986  02A8                     __ptext31:	
  4987 ;; *************** function _KeyHave *****************
  4988 ;; Defined at:
  4989 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  58              1    wreg     unsigned char 
  4992 ;;  59              2    2[COMMON] unsigned int 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  58              1    4[COMMON] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  1    wreg      void 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0
  4999 ;; Tracked objects:
  5000 ;;		On entry : B00/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5004 ;;      Params:         2       0       0       0
  5005 ;;      Locals:         1       0       0       0
  5006 ;;      Temps:          0       0       0       0
  5007 ;;      Totals:         3       0       0       0
  5008 ;;Total ram usage:        3 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    1
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_CheckOnceResult
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _KeyHave
  5020  02A8                     _KeyHave:	
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5024                           ;KeyHave@58 stored from wreg
  5025  02A8  00F4               	movwf	KeyHave@58
  5026  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  5027  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  5028  02AB  0AB2               	incf	_KeyCounter,f
  5029  02AC  01A0               	clrf	_KeyData	;volatile
  5030  02AD  01A1               	clrf	_KeyData+1	;volatile
  5031  02AE  1DF4               	btfss	KeyHave@58,3
  5032  02AF  2AB3               	goto	l3085
  5033  02B0  0872               	movf	KeyHave@59,w
  5034  02B1  00A1               	movwf	_KeyData+1	;volatile
  5035  02B2  0008               	return
  5036  02B3                     l3085:	
  5037  02B3  0872               	movf	KeyHave@59,w
  5038  02B4  00A0               	movwf	_KeyData	;volatile
  5039  02B5  0008               	return
  5040  02B6                     __end_of_KeyHave:	
  5041  02B6                     __ptext33:	
  5042 ;; *************** function _CheckKeyOldValue *****************
  5043 ;; Defined at:
  5044 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  80              2    2[BANK0 ] unsigned int 
  5049 ;;  79              2    0[BANK0 ] unsigned int 
  5050 ;;  78              1    4[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/100
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       0       0       0
  5061 ;;      Locals:         0       5       0       0
  5062 ;;      Temps:          2       0       0       0
  5063 ;;      Totals:         2       5       0       0
  5064 ;;Total ram usage:        7 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    3
  5067 ;; This function calls:
  5068 ;;		_KeyIsIn
  5069 ;; This function is called by:
  5070 ;;		_CheckTouchKey
  5071 ;; This function uses a non-reentrant model
  5072 ;;
  5073                           
  5074                           
  5075                           ;psect for function _CheckKeyOldValue
  5076  02B6                     _CheckKeyOldValue:	
  5077                           
  5078                           ;incstack = 0
  5079                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5080  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  5081  02B7  3004               	movlw	4
  5082  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  5083  02B9  01CD               	clrf	CheckKeyOldValue@78
  5084  02BA  0AB0               	incf	CheckKeyOldValue@F77,f
  5085  02BB  0230               	subwf	CheckKeyOldValue@F77,w
  5086  02BC  1C03               	btfss	3,0
  5087  02BD  0008               	return
  5088  02BE  01B0               	clrf	CheckKeyOldValue@F77
  5089  02BF                     l3571:	
  5090  02BF  1003               	clrc
  5091  02C0  0D4D               	rlf	CheckKeyOldValue@78,w
  5092  02C1  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5093  02C2  0084               	movwf	4
  5094  02C3  1383               	bcf	3,7	;select IRP bank1
  5095  02C4  0800               	movf	0,w
  5096  02C5  00C9               	movwf	CheckKeyOldValue@79
  5097  02C6  0A84               	incf	4,f
  5098  02C7  0800               	movf	0,w
  5099  02C8  00CA               	movwf	CheckKeyOldValue@79+1
  5100  02C9  084D               	movf	CheckKeyOldValue@78,w
  5101  02CA  2283  118A         	fcall	_KeyIsIn
  5102  02CC  3A00               	xorlw	0
  5103  02CD  1D03               	skipz
  5104  02CE  2B05               	goto	l1309
  5105  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  5106  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  5107  02D1  1003               	clrc
  5108  02D2  0D4D               	rlf	CheckKeyOldValue@78,w
  5109  02D3  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5110  02D4  0084               	movwf	4
  5111  02D5  1383               	bcf	3,7	;select IRP bank1
  5112  02D6  2397  118A         	fcall	PL2	;call to abstracted procedure
  5113  02D8  1903               	skipnz
  5114  02D9  024B               	subwf	CheckKeyOldValue@80,w
  5115  02DA  1C03               	skipc
  5116  02DB  2AE2               	goto	L11
  5117  02DC  0F4B               	incfsz	CheckKeyOldValue@80,w
  5118  02DD  2B05               	goto	l1309
  5119  02DE  0A4C               	incf	CheckKeyOldValue@80+1,w
  5120  02DF  1D03               	btfss	3,2
  5121  02E0  2B05               	goto	l1309
  5122  02E1  1003               	clrc
  5123  02E2                     L11:	
  5124  02E2  0D4D               	rlf	CheckKeyOldValue@78,w
  5125  02E3  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5126  02E4  0084               	movwf	4
  5127  02E5  2397  118A         	fcall	PL2	;call to abstracted procedure
  5128  02E7  1903               	skipnz
  5129  02E8  024B               	subwf	CheckKeyOldValue@80,w
  5130  02E9  1C03               	skipc
  5131  02EA  2AF1               	goto	L12
  5132  02EB  0F4B               	incfsz	CheckKeyOldValue@80,w
  5133  02EC  2B05               	goto	l1309
  5134  02ED  0A4C               	incf	CheckKeyOldValue@80+1,w
  5135  02EE  1D03               	btfss	3,2
  5136  02EF  2B05               	goto	l1309
  5137  02F0  1003               	clrc
  5138  02F1                     L12:	
  5139  02F1  0D4D               	rlf	CheckKeyOldValue@78,w
  5140  02F2  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5141  02F3  0084               	movwf	4
  5142  02F4  2397  118A         	fcall	PL2	;call to abstracted procedure
  5143  02F6  1903               	skipnz
  5144  02F7  024B               	subwf	CheckKeyOldValue@80,w
  5145  02F8  1C03               	skipc
  5146  02F9  2B00               	goto	L13
  5147  02FA  0F4B               	incfsz	CheckKeyOldValue@80,w
  5148  02FB  2B05               	goto	l1309
  5149  02FC  0A4C               	incf	CheckKeyOldValue@80+1,w
  5150  02FD  1D03               	btfss	3,2
  5151  02FE  2B05               	goto	l1309
  5152  02FF  1003               	clrc
  5153  0300                     L13:	
  5154  0300  0D4D               	rlf	CheckKeyOldValue@78,w
  5155  0301  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5156  0302  0084               	movwf	4
  5157  0303  23EF  118A         	fcall	PL32	;call to abstracted procedure
  5158  0305                     l1309:	
  5159  0305  1283               	bcf	3,5	;RP0=0, select bank0
  5160  0306  1303               	bcf	3,6	;RP1=0, select bank0
  5161  0307  1003               	clrc
  5162  0308  0D4D               	rlf	CheckKeyOldValue@78,w
  5163  0309  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5164  030A  0084               	movwf	4
  5165  030B  1383               	bcf	3,7	;select IRP bank1
  5166  030C  23DB  118A         	fcall	PL18	;call to abstracted procedure
  5167  030E  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5168  030F  23C9  118A         	fcall	PL12	;call to abstracted procedure
  5169  0311  23DB  118A         	fcall	PL18	;call to abstracted procedure
  5170  0313  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5171  0314  23C9  118A         	fcall	PL12	;call to abstracted procedure
  5172  0316  23EF  118A         	fcall	PL32	;call to abstracted procedure
  5173  0318  3003               	movlw	3
  5174  0319  0ACD               	incf	CheckKeyOldValue@78,f
  5175  031A  024D               	subwf	CheckKeyOldValue@78,w
  5176  031B  1803               	btfsc	3,0
  5177  031C  0008               	return
  5178  031D  2ABF               	goto	l3571
  5179  031E                     __end_of_CheckKeyOldValue:	
  5180  031E                     __ptext26:	
  5181 ;; *************** function _KeyStopClear *****************
  5182 ;; Defined at:
  5183 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  53              1    3[COMMON] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/100
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5197 ;;      Params:         0       0       0       0
  5198 ;;      Locals:         1       0       0       0
  5199 ;;      Temps:          0       0       0       0
  5200 ;;      Totals:         1       0       0       0
  5201 ;;Total ram usage:        1 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    2
  5204 ;; This function calls:
  5205 ;;		_KeyClearOne
  5206 ;; This function is called by:
  5207 ;;		_CheckTouchKey
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           
  5212                           ;psect for function _KeyStopClear
  5213  031E                     _KeyStopClear:	
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5217  031E  01F9               	clrf	_KeyFlag	;volatile
  5218  031F  01FA               	clrf	_KeyFlag+1	;volatile
  5219  0320  01F3               	clrf	KeyStopClear@53
  5220  0321                     l3483:	
  5221  0321  1003               	clrc
  5222  0322  0D73               	rlf	KeyStopClear@53,w
  5223  0323  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5224  0324  0084               	movwf	4
  5225  0325  1383               	bcf	3,7	;select IRP bank1
  5226  0326  0180               	clrf	0
  5227  0327  0A84               	incf	4,f
  5228  0328  0180               	clrf	0
  5229  0329  0873               	movf	KeyStopClear@53,w
  5230  032A  2293  118A         	fcall	_KeyClearOne
  5231  032C  3003               	movlw	3
  5232  032D  0AF3               	incf	KeyStopClear@53,f
  5233  032E  0273               	subwf	KeyStopClear@53,w
  5234  032F  1803               	btfsc	3,0
  5235  0330  0008               	return
  5236  0331  2B21               	goto	l3483
  5237  0332                     __end_of_KeyStopClear:	
  5238  0332                     __ptext24:	
  5239 ;; *************** function _TurnKeyFlags *****************
  5240 ;; Defined at:
  5241 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/100
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5255 ;;      Params:         0       0       0       0
  5256 ;;      Locals:         0       0       0       0
  5257 ;;      Temps:          0       0       0       0
  5258 ;;      Totals:         0       0       0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:    4
  5262 ;; This function calls:
  5263 ;;		_KeyClearIn
  5264 ;; This function is called by:
  5265 ;;		_CheckTouchKey
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _TurnKeyFlags
  5271  0332                     _TurnKeyFlags:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5275  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5276  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5277  0334  0821               	movf	_KeyData+1,w	;volatile
  5278  0335  0420               	iorwf	_KeyData,w	;volatile
  5279  0336  1903               	btfsc	3,2
  5280  0337  2B56               	goto	l3631
  5281  0338  01AE               	clrf	TurnKeyFlags@F84
  5282  0339  0820               	movf	_KeyData,w	;volatile
  5283  033A  0622               	xorwf	_KeyOldData,w	;volatile
  5284  033B  1D03               	skipz
  5285  033C  2B4F               	goto	l1327
  5286  033D  0821               	movf	_KeyData+1,w	;volatile
  5287  033E  0623               	xorwf	_KeyOldData+1,w	;volatile
  5288  033F  1D03               	skipz
  5289  0340  2B4F               	goto	l1327
  5290  0341  3002               	movlw	2
  5291  0342  0AAF               	incf	TurnKeyFlags@F83,f
  5292  0343  022F               	subwf	TurnKeyFlags@F83,w
  5293  0344  1C03               	skipc
  5294  0345  0008               	return
  5295  0346  01AF               	clrf	TurnKeyFlags@F83
  5296  0347  0820               	movf	_KeyData,w	;volatile
  5297  0348  00F9               	movwf	_KeyFlag	;volatile
  5298  0349  0821               	movf	_KeyData+1,w	;volatile
  5299  034A  00FA               	movwf	_KeyFlag+1	;volatile
  5300  034B  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5301  034C  0008               	return
  5302  034D  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5303  034E  2B79               	ljmp	l3059
  5304  034F                     l1327:	
  5305  034F  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5306  0350  0820               	movf	_KeyData,w	;volatile
  5307  0351  00A2               	movwf	_KeyOldData	;volatile
  5308  0352  0821               	movf	_KeyData+1,w	;volatile
  5309  0353  00A3               	movwf	_KeyOldData+1	;volatile
  5310  0354  01AF               	clrf	TurnKeyFlags@F83
  5311  0355  0008               	return
  5312  0356                     l3631:	
  5313  0356  01AF               	clrf	TurnKeyFlags@F83
  5314  0357  01A2               	clrf	_KeyOldData	;volatile
  5315  0358  01A3               	clrf	_KeyOldData+1	;volatile
  5316  0359  3002               	movlw	2
  5317  035A  0AAE               	incf	TurnKeyFlags@F84,f
  5318  035B  022E               	subwf	TurnKeyFlags@F84,w
  5319  035C  1C03               	skipc
  5320  035D  0008               	return
  5321  035E  01AE               	clrf	TurnKeyFlags@F84
  5322  035F  01F9               	clrf	_KeyFlag	;volatile
  5323  0360  01FA               	clrf	_KeyFlag+1	;volatile
  5324  0361  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5325  0362  0008               	return
  5326  0363                     __end_of_TurnKeyFlags:	
  5327  0363                     __ptext29:	
  5328 ;; *************** function _CheckValidTime *****************
  5329 ;; Defined at:
  5330 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5344 ;;      Params:         0       0       0       0
  5345 ;;      Locals:         0       0       0       0
  5346 ;;      Temps:          0       0       0       0
  5347 ;;      Totals:         0       0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    1
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_CheckTouchKey
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _CheckValidTime
  5360  0363                     _CheckValidTime:	
  5361  0363                     l3641:	
  5362                           ;incstack = 0
  5363                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5364                           
  5365  0363  087A               	movf	_KeyFlag+1,w	;volatile
  5366  0364  0479               	iorwf	_KeyFlag,w	;volatile
  5367  0365  1903               	btfsc	3,2
  5368  0366  2B74               	goto	l3647
  5369  0367  1683               	bsf	3,5	;RP0=1, select bank1
  5370  0368  1303               	bcf	3,6	;RP1=0, select bank1
  5371  0369  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5372  036A  1903               	skipnz
  5373  036B  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5374  036C  303A               	movlw	58
  5375  036D  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5376  036E  3098               	movlw	152
  5377  036F  1903               	skipnz
  5378  0370  0241               	subwf	CheckValidTime@F87^(0+128),w
  5379  0371  1C03               	skipc
  5380  0372  0008               	return
  5381  0373  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5382  0374                     l3647:	
  5383  0374  1683               	bsf	3,5	;RP0=1, select bank1
  5384  0375  1303               	bcf	3,6	;RP1=0, select bank1
  5385  0376  01C1               	clrf	CheckValidTime@F87^(0+128)
  5386  0377  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5387  0378  0008               	return
  5388  0379                     __end_of_CheckValidTime:	
  5389  0379                     __ptext25:	
  5390 ;; *************** function _KeyClearIn *****************
  5391 ;; Defined at:
  5392 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  51              1    4[COMMON] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      void 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 300/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5406 ;;      Params:         0       0       0       0
  5407 ;;      Locals:         1       0       0       0
  5408 ;;      Temps:          0       0       0       0
  5409 ;;      Totals:         1       0       0       0
  5410 ;;Total ram usage:        1 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    3
  5413 ;; This function calls:
  5414 ;;		_KeyClearOne
  5415 ;;		_KeyIsIn
  5416 ;; This function is called by:
  5417 ;;		_TurnKeyFlags
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _KeyClearIn
  5423  0379                     _KeyClearIn:	
  5424  0379                     l3059:	
  5425                           ;incstack = 0
  5426                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5427                           
  5428  0379  01F4               	clrf	KeyClearIn@51
  5429  037A                     l3065:	
  5430  037A  0874               	movf	KeyClearIn@51,w
  5431  037B  2283  118A         	fcall	_KeyIsIn
  5432  037D  3A00               	xorlw	0
  5433  037E  1D03               	skipz
  5434  037F  2B83               	goto	l3069
  5435  0380  0874               	movf	KeyClearIn@51,w
  5436  0381  2293  118A         	fcall	_KeyClearOne
  5437  0383                     l3069:	
  5438  0383  3003               	movlw	3
  5439  0384  0AF4               	incf	KeyClearIn@51,f
  5440  0385  0274               	subwf	KeyClearIn@51,w
  5441  0386  1803               	btfsc	3,0
  5442  0387  0008               	return
  5443  0388  2B7A               	goto	l3065
  5444  0389                     __end_of_KeyClearIn:	
  5445  0389                     __ptext20:	
  5446 ;; *************** function _Refurbish_Sfr *****************
  5447 ;; Defined at:
  5448 ;;		line 100 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, status,2, status,0
  5457 ;; Tracked objects:
  5458 ;;		On entry : 200/0
  5459 ;;		On exit  : 300/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5462 ;;      Params:         0       0       0       0
  5463 ;;      Locals:         0       0       0       0
  5464 ;;      Temps:          0       0       0       0
  5465 ;;      Totals:         0       0       0       0
  5466 ;;Total ram usage:        0 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    1
  5469 ;; This function calls:
  5470 ;;		Nothing
  5471 ;; This function is called by:
  5472 ;;		_WorkSleep
  5473 ;;		_main
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _Refurbish_Sfr
  5479  0389                     _Refurbish_Sfr:	
  5480                           
  5481                           ;main.c: 103: PIE1 = 2;
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5485  0389  3002               	movlw	2
  5486  038A  1283               	bcf	3,5	;RP0=0, select bank0
  5487  038B  008E               	movwf	14	;volatile
  5488                           
  5489                           ;main.c: 104: PR2 = 250;
  5490  038C  30FA               	movlw	250
  5491  038D  0091               	movwf	17	;volatile
  5492                           
  5493                           ;main.c: 105: INTCON = 0XC0;
  5494  038E  30C0               	movlw	192
  5495  038F  008B               	movwf	11	;volatile
  5496                           
  5497                           ;main.c: 106: if (4 != T2CON)
  5498  0390  3004               	movlw	4
  5499  0391  0613               	xorwf	19,w	;volatile
  5500  0392  1903               	btfsc	3,2
  5501  0393  0008               	return
  5502                           
  5503                           ;main.c: 107: T2CON = 4;
  5504  0394  3004               	movlw	4
  5505  0395  0093               	movwf	19	;volatile
  5506  0396  0008               	return
  5507  0397                     __end_of_Refurbish_Sfr:	
  5508  0397                     PL2:	
  5509  0397  0800               	movf	0,w
  5510  0398  00CB               	movwf	CheckKeyOldValue@80
  5511  0399  0A84               	incf	4,f
  5512  039A  0800               	movf	0,w
  5513  039B  00CC               	movwf	CheckKeyOldValue@80+1
  5514  039C  0849               	movf	CheckKeyOldValue@79,w
  5515  039D  02CB               	subwf	CheckKeyOldValue@80,f
  5516  039E  084A               	movf	CheckKeyOldValue@79+1,w
  5517  039F  1C03               	skipc
  5518  03A0  03CC               	decf	CheckKeyOldValue@80+1,f
  5519  03A1  02CC               	subwf	CheckKeyOldValue@80+1,f
  5520  03A2  3000               	movlw	0
  5521  03A3  024C               	subwf	CheckKeyOldValue@80+1,w
  5522  03A4  3402               	retlw	2
  5523  03A5                     __end_ofPL2:	
  5524  03A5                     PL4:	
  5525  03A5  00C9               	movwf	??_CheckOnceResult
  5526  03A6  0A84               	incf	4,f
  5527  03A7  0800               	movf	0,w
  5528  03A8  00CA               	movwf	??_CheckOnceResult+1
  5529  03A9  0852               	movf	CheckOnceResult@69,w
  5530  03AA  0749               	addwf	??_CheckOnceResult,w
  5531  03AB  00CB               	movwf	??_CheckOnceResult+2
  5532  03AC  084A               	movf	??_CheckOnceResult+1,w
  5533  03AD  1803               	skipnc
  5534  03AE  0A4A               	incf	??_CheckOnceResult+1,w
  5535  03AF  00CC               	movwf	??_CheckOnceResult+3
  5536  03B0  0854               	movf	CheckOnceResult@71+1,w
  5537  03B1  024C               	subwf	??_CheckOnceResult+3,w
  5538  03B2  1D03               	skipz
  5539  03B3  0008               	return
  5540  03B4  0853               	movf	CheckOnceResult@71,w
  5541  03B5  024B               	subwf	??_CheckOnceResult+2,w
  5542  03B6  0008               	return
  5543  03B7                     __end_ofPL4:	
  5544  03B7                     PL8:	
  5545  03B7  0084               	movwf	4
  5546  03B8  0800               	movf	0,w
  5547  03B9  00C9               	movwf	??_CheckOnceResult
  5548  03BA  0A84               	incf	4,f
  5549  03BB  0800               	movf	0,w
  5550  03BC  00CA               	movwf	??_CheckOnceResult+1
  5551  03BD  0008               	return
  5552  03BE                     __end_ofPL8:	
  5553  03BE                     PL10:	
  5554  03BE  0084               	movwf	4
  5555  03BF  0849               	movf	??_SystemEnterSleep,w
  5556  03C0  0080               	movwf	0
  5557  03C1  0A84               	incf	4,f
  5558  03C2  084A               	movf	??_SystemEnterSleep+1,w
  5559  03C3  0080               	movwf	0
  5560  03C4  1003               	clrc
  5561  03C5  0D51               	rlf	SystemEnterSleep@91,w
  5562  03C6  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5563  03C7  0084               	movwf	4
  5564  03C8  0008               	return
  5565  03C9                     __end_ofPL10:	
  5566  03C9                     PL12:	
  5567  03C9  0084               	movwf	4
  5568  03CA  0874               	movf	??_CheckKeyOldValue,w
  5569  03CB  0080               	movwf	0
  5570  03CC  0A84               	incf	4,f
  5571  03CD  0875               	movf	??_CheckKeyOldValue+1,w
  5572  03CE  0080               	movwf	0
  5573  03CF  1003               	clrc
  5574  03D0  0D4D               	rlf	CheckKeyOldValue@78,w
  5575  03D1  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5576  03D2  0084               	movwf	4
  5577  03D3  0008               	return
  5578  03D4                     __end_ofPL12:	
  5579  03D4                     PL14:	
  5580  03D4  0084               	movwf	4
  5581  03D5  0800               	movf	0,w
  5582  03D6  00C9               	movwf	??_SystemEnterSleep
  5583  03D7  0A84               	incf	4,f
  5584  03D8  0800               	movf	0,w
  5585  03D9  00CA               	movwf	??_SystemEnterSleep+1
  5586  03DA  0008               	return
  5587  03DB                     __end_ofPL14:	
  5588  03DB                     PL18:	
  5589  03DB  0800               	movf	0,w
  5590  03DC  00F4               	movwf	??_CheckKeyOldValue
  5591  03DD  0A84               	incf	4,f
  5592  03DE  0800               	movf	0,w
  5593  03DF  00F5               	movwf	??_CheckKeyOldValue+1
  5594  03E0  1003               	clrc
  5595  03E1  0D4D               	rlf	CheckKeyOldValue@78,w
  5596  03E2  0008               	return
  5597  03E3                     __end_ofPL18:	
  5598  03E3                     PL22:	
  5599  03E3  0180               	clrf	0
  5600  03E4  0A84               	incf	4,f
  5601  03E5  0180               	clrf	0
  5602  03E6  1003               	clrc
  5603  03E7  0D72               	rlf	KeyClearOne@49,w
  5604  03E8  0008               	return
  5605  03E9                     __end_ofPL22:	
  5606  03E9                     PL24:	
  5607  03E9  3041               	movlw	65
  5608  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  5609  03EB  0095               	movwf	21	;volatile
  5610  03EC  1415               	bsf	21,0	;volatile
  5611  03ED  0196               	clrf	22	;volatile
  5612  03EE  0008               	return
  5613  03EF                     __end_ofPL24:	
  5614  03EF                     PL32:	
  5615  03EF  0849               	movf	CheckKeyOldValue@79,w
  5616  03F0  0080               	movwf	0
  5617  03F1  0A84               	incf	4,f
  5618  03F2  084A               	movf	CheckKeyOldValue@79+1,w
  5619  03F3  0080               	movwf	0
  5620  03F4  0008               	return
  5621  03F5                     __end_ofPL32:	
  5622  03F5                     PL44:	
  5623  03F5  01D1               	clrf	SystemEnterSleep@91
  5624  03F6  01CF               	clrf	SystemEnterSleep@92
  5625  03F7  0ACF               	incf	SystemEnterSleep@92,f
  5626  03F8  01D0               	clrf	SystemEnterSleep@92+1
  5627  03F9  0008               	return
  5628  03FA                     __end_ofPL44:	
  5629  03FA                     PL46:	
  5630  03FA  0DCF               	rlf	SystemEnterSleep@92,f
  5631  03FB  0DD0               	rlf	SystemEnterSleep@92+1,f
  5632  03FC  0AD1               	incf	SystemEnterSleep@91,f
  5633  03FD  0251               	subwf	SystemEnterSleep@91,w
  5634  03FE  0008               	return
  5635  03FF                     __end_ofPL46:	
  5636                           
  5637                           	psect	text35
  5638  0E07                     __ptext35:	
  5639 ;; *************** function _Isr_Timer *****************
  5640 ;; Defined at:
  5641 ;;		line 224 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		wreg, status,2, status,0
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 300/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5655 ;;      Params:         0       0       0       0
  5656 ;;      Locals:         0       0       0       0
  5657 ;;      Temps:          2       0       0       0
  5658 ;;      Totals:         2       0       0       0
  5659 ;;Total ram usage:        2 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		Interrupt level 1
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _Isr_Timer
  5670  0E07                     _Isr_Timer:	
  5671                           
  5672                           ;main.c: 226: if(TMR2IF)
  5673  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  5674  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  5675  0E09  1C8D               	btfss	13,1	;volatile
  5676  0E0A  2E1A               	goto	i1l4011
  5677                           
  5678                           ;main.c: 227: {
  5679                           ;main.c: 228: TMR2IF = 0;
  5680  0E0B  108D               	bcf	13,1	;volatile
  5681                           
  5682                           ;main.c: 229: if(++MainTime >= 32)
  5683  0E0C  3020               	movlw	32
  5684  0E0D  0AC6               	incf	_MainTime,f	;volatile
  5685  0E0E  0246               	subwf	_MainTime,w	;volatile
  5686  0E0F  1C03               	skipc
  5687  0E10  2E1B               	goto	i1l983
  5688                           
  5689                           ;main.c: 230: {
  5690                           ;main.c: 231: MainTime = 0;
  5691  0E11  01C6               	clrf	_MainTime	;volatile
  5692                           
  5693                           ;main.c: 232: B_MainLoop = 1;
  5694  0E12  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5695                           
  5696                           ;main.c: 233: if(++count1s >= 250)
  5697  0E13  30FA               	movlw	250
  5698  0E14  0AC5               	incf	_count1s,f
  5699  0E15  0245               	subwf	_count1s,w
  5700  0E16  1C03               	skipc
  5701  0E17  2E1B               	goto	i1l983
  5702                           
  5703                           ;main.c: 234: {
  5704                           ;main.c: 235: count1s = 0;
  5705  0E18  01C5               	clrf	_count1s
  5706  0E19  2E1B               	goto	i1l983
  5707  0E1A                     i1l4011:	
  5708                           
  5709                           ;main.c: 239: else
  5710                           ;main.c: 240: {
  5711                           ;main.c: 241: PIR1 = 0;
  5712  0E1A  018D               	clrf	13	;volatile
  5713  0E1B                     i1l983:	
  5714  0E1B  0871               	movf	??_Isr_Timer+1,w
  5715  0E1C  008A               	movwf	10
  5716  0E1D  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5717  0E1E  0083               	movwf	3
  5718  0E1F  0EFE               	swapf	126,f
  5719  0E20  0E7E               	swapf	126,w
  5720  0E21  0009               	retfie
  5721  0E22                     __end_of_Isr_Timer:	
  5722  007E                     btemp	set	126	;btemp
  5723  007E                     wtemp0	set	126
  5724                           
  5725                           	psect	intentry
  5726  0004                     __pintentry:	
  5727                           ;incstack = 0
  5728                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5729                           
  5730  0004                     interrupt_function:	
  5731  007E                     saved_w	set	btemp
  5732  0004  00FE               	movwf	btemp
  5733  0005  0E03               	swapf	3,w
  5734  0006  00F0               	movwf	??_Isr_Timer
  5735  0007  080A               	movf	10,w
  5736  0008  00F1               	movwf	??_Isr_Timer+1
  5737  0009  158A  2E07         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        3
    BSS         87
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      48
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _workCtr->_bujinCtr
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11912
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7909
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1289
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             5     5      0      68
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      30       6       60.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8B       9        0.0%
ABS                  0      0      8B       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 09 14:32:28 2025

                        pc 0002                         PL2 0397                         PL4 03A5  
                       PL6 07AA                         PL8 03B7              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03BE                        PL20 0FEA                        PL12 03C9  
                      PL30 0FF5                        PL22 03E3                        PL14 03D4  
                      PL40 07CE                        PL32 03EF                        PL24 03E9  
                      PL16 07B9                        PL42 07D3                        PL34 0FFA  
                      PL26 07C2                        PL18 03DB                        PL44 03F5  
                      PL36 07C9                        PL28 0FF0                        PL46 03FA  
                      PL38 0F39                        l971 0F2A                        l999 05BB  
                      _RA5 0435                        _RA6 0436                        _RA7 0437  
                      _RB6 0036                        _RB7 0037                        _PR2 0011  
      __size_of_ADC_Sample 00D1                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070             _bujinStartFlag 0036   __end_of_Table_KeyChannel 0817  
                     S4891 0817                       S4893 0827         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 0058               ___ftdiv@sign 005D                       l1005 05F7  
                     l1110 0FC0                       l1022 0721                       l1111 0FC3  
                     l1112 0FC6                       l1113 0FC9                       l1105 0FAC  
                     l1009 063D                       l1034 0764                       l1107 0FB3  
                     l1108 0FB6                       l1028 0744                       l1109 0FB9  
                     l1061 0663                       l1091 0F67                       l1309 0305  
                     l3101 0138                       l1093 0F60                       l1327 034F  
                     l1346 007F                       l1099 0F86                       l1268 0166  
                     l1533 0551                       l1358 009E                       l3127 0174  
                     l4103 0599                       l3129 0184                       l3065 037A  
                     l1545 0575                       l4113 05A4                       l4105 059B  
                     l3059 0379                       l4203 06E7                       l1388 06D1  
                     l3085 02B3                       l3069 0383                       l4221 0565  
                     l4141 05EB                       l4303 00D2                       l4215 0555  
                     l4143 05F3                       l4119 05A5                       l3097 0132  
                     l4321 0106                       l4225 0573                       l4217 0558  
                     l4153 0641                       l4137 05E0                       l4129 05C5  
                     l4227 056A                       l4219 055D                       l1587 049A  
                     l4411 06A5                       l4243 0781                       l4251 0794  
                     l4317 00FF                       l4501 0F8D                       l4181 0799  
                     l4421 06BC                       l4165 0E4A                       l3631 0356  
                     l4503 0F8E                       l4431 06C7                       l4175 0E58  
                     l4601 0275                       l3641 0363                       l4337 0127  
                     l4521 0FD8                       l4425 06C2                       l4361 0741  
                     l4353 0723                       l2931 028F                       l3571 02BF  
                     l4603 027B                       l3483 0321                       l3811 0EE7  
                     l3803 0ED9                       l4291 00CB                       l4507 0F9F  
                     l4523 0FE4                       l4419 06BA                       l4371 0761  
                     l4347 071B                       l3813 0EE9                       l4517 0FCC  
                     l4429 06C6                       l4373 0767                       l4365 0746  
                     l4349 071E                       l4461 0E48                       l4453 0E3C  
                     l3647 0374                       l3807 0EE0                       l4631 04AD  
                     l4359 073E                       l4463 0E49                       l4455 0E3D  
                     l2945 018E                       l4801 0093                       l3833 0F05  
                     l4609 048C                       l4481 0F50                       l4465 0F3E  
                     l4571 022A                       l4539 01A3                       l2947 018F  
                     l4803 0097                       l3835 0F07                       l4723 006D  
                     l3915 07EF                       l4395 066C                       l4557 01FC  
                     l4581 0234                       l3837 0F09                       l3917 07F1  
                     l4741 0439                       l4591 0261                       l3783 0EBF  
                     l3791 0ECB                       l3855 0F33                       l4647 04E9  
                     l4487 0F56                       l4399 0672                       l4751 044D  
                     l4577 0232                       l4809 009D                       l4681 0530  
                     l4665 050C                       l4649 04EE                       l4761 0469  
                     l4753 044E                       l4817 0E68                       l4595 026D  
                     l3779 0EBA                       l4675 0518                       l4771 0476  
                     l4763 046C                       l3789 0EC9                       l4677 0522  
                     l4669 0514                       l4599 0271                       l4793 008E  
                     _ADON 04A8                       _CHS4 04B6                       u4015 064A  
                     _PIE1 000E                       _PIE2 0110                       u4225 00FB  
                     u4155 0787                       u5207 0595                       _RAIF 006B  
                     u4445 0696                       _INTF 0059                       _RBIE 005B  
                     _RBIF 0058                       u4705 01B0                       u4725 01ED  
                     u4735 0202                       u4655 0F71                       u4745 020E  
                     u4665 0F84                       u3945 05E6                       _PIR1 000D  
                     _PIR2 010F                       u3955 05F1                       u4685 0F9B  
                     u4775 024D                       u4855 04BB                       u4695 0FA9  
                     u3995 0632                       u4885 04F1                       _TMR0 0081  
                     _WPUB 0008                       _main 0E5F               ___ftpack@arg 0072  
             ___ftpack@exp 0075                       btemp 007E              ?_KeyStopClear 0070  
                     start 000B               _TurnKeyFlags 0332            __end_of_KeyIsIn 0293  
          __end_of_KeyHave 02B6               ___fttol@exp1 006A              ??_Init_System 0072  
             ___fttol@lval 0066            TurnKeyFlags@F83 002F            TurnKeyFlags@F84 002E  
                    ?_main 0070            __end_of___ftdiv 04E0            __end_of___fttol 0539  
                    _T2CON 0013                      _IOCB5 004D   __end_of_SystemEnterSleep 012E  
          __end_of___lwmod 0799                      i1l983 0E1B                      _PORTA 0086  
                    _PORTB 0006                      _PORTC 0106            __end_of_fanInit 07A4  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _TRISC 0105                      _PWMTL 0017            __end_of_fanStop 07AA  
          __end_of_chrgCtr 07F5        ___lmul@multiplicand 004D        __end_of_KeyClearOne 02A8  
               _KeyClearIn 0379             fanCtr@fan_temp 0057              ___ftpack@sign 0076  
           __pbitbssCOMMON 03C0                      pclath 000A            __end_of_pwmInit 0E58  
              _ClearResSum 018E                 _KeyCounter 0032                 _KeyOldData 0022  
          __end_of_pwmStop 0E5F             ??_KeyStopClear 0073                      status 0003  
                    wtemp0 007E            __end_of_workCtr 047E                 _KeyUpShake 00BE  
          __initialization 000D               __end_of_main 0EA1                     ??_main 0078  
            ___fttol@sign1 0065        __end_of_Init_System 0043                     _ADCON0 0095  
                   _ADCON1 0096                     _ADRESH 0099                     _ADRESL 0098  
         __end_of___ftpack 0587                     _GODONE 04A9                     i1l4011 0E1A  
                   _LDO_EN 04B2                     _INTCON 000B           __end_of___lwtoft 0549  
       __size_of_KeyServer 0098                     _OSCCON 0014                     _TMR2IF 0069  
                   _PWMD3L 009C                     _PWMD4L 001B               ??_ADC_Sample 0073  
                   _PWMT4L 001C                     _TRISB5 002D                     _TRISB6 002E  
                ??_KeyIsIn 0072                  ??_KeyHave 0074              ClearResSum@56 0072  
       __size_of_Isr_Timer 001B           __end_of_bujinCtr 0FEA  __size_of_CheckKeyOldValue 0068  
                   ___lmul 06CD                     _b_kclr 03C2                     _b_kerr 03C1  
                   _fanCtr 0658                  ??___ftdiv 0055                  ??___fttol 0062  
                ??___lwmod 0076                  ??_fanInit 0072                  ??_fanStop 0072  
              _KeyClearOne 0293                  ??_chrgCtr 0072                     _result 00C3  
            _Table_KeyFalg 0806              _Table_KeyDown 080E         __end_of_ADC_Sample 0658  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0072  
                ??_pwmStop 0072                ?_KeyClearIn 0070                  ??_workCtr 0077  
          _CheckOnceResult 019D           __end_of_wuhuaCtr 0E4A    __end_of__initialization 0022  
       __size_of_WorkSleep 002E          CheckOnceResult@70 004F          CheckOnceResult@71 0053  
        CheckOnceResult@72 0050          CheckOnceResult@73 004D          CheckOnceResult@68 0055  
        CheckOnceResult@69 0052                 ___ftdiv@f1 0052                 ___ftdiv@f2 004F  
               ___ftdiv@f3 0059                 ___fttol@f1 005E             __pcstackCOMMON 0070  
             __pidataBANK0 0000                _Init_System 0025                 __end_ofPL2 03A5  
               __end_ofPL4 03B7                 __end_ofPL6 07B9                 __end_ofPL8 03BE  
        __end_of_KeyServer 0F39                 ___lwtoft@c 004C       __end_of_KeyStopClear 0332  
        __end_of_Isr_Timer 0E22         __size_of_keyLedCtr 0075                 __pbssBANK0 0020  
               __pbssBANK1 00A0               _chrgFullFlag 003F  __size_of_GetTouchKeyValue 0060  
             _chrgFullTime 003E              _CheckTouchKey 0071                 __pmaintext 0E5F  
                  ?___lmul 0049                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0071                  ?___lwtoft 004C          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0283                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 0049                    _B_OnOff 03C5  
                  _PWMD23H 009E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D                  ?_bujinCtr 0070  
     __end_of_Table_KeyCap 0814                 __stringtab 0800               ?_ClearResSum 0070  
                  _KeyData 0020                    _KeyFlag 0079                    _KeyIsIn 0283  
                  _KeyHave 02A8             ?_CheckTouchKey 0070            ADC_Sample@adldo 0072  
          ADC_Sample@admax 0052            ADC_Sample@admin 0050            ADC_Sample@adsum 004C  
         _CheckKeyOldValue 02B6            __size_of___lmul 0033                    ___ftdiv 047E  
          __size_of_fanCtr 0075                    ___fttol 04E0                    ___lwmod 0775  
        __end_of_keyLedCtr 0775                    _b_kover 03C4                    _fanInit 0799  
                  _fanDuty 0043                    _fanStop 07A4                 ??___ftpack 0049  
                  _chrgCtr 07D7                    __ptext1 03FF                    __ptext2 0E22  
                  __ptext3 0E58                    __ptext4 0E4A                    __ptext5 0700  
                  __ptext6 0775                    __ptext7 0658                    __ptext8 07A4  
                  __ptext9 0799                 _lowBatLock 003D                 _lowBatTime 00C7  
                ?_wuhuaCtr 0070                 ??___lwtoft 0077                    _count1s 0045  
               _lowFanTime 003C                    _pwmInit 0E4A                    _pwmStop 0E58  
  __size_of_CheckValidTime 0016                    clrloop0 07F6                    _workCtr 03FF  
               ??_bujinCtr 0072       end_of_initialization 0022              _Refurbish_Sfr 0389  
             _KeyOldValue0 00B2               _KeyOldValue1 00AC               _KeyOldValue2 00A6  
    __size_of_KeyStopClear 0014         SystemEnterSleep@91 0051         SystemEnterSleep@92 004F  
       SystemEnterSleep@93 004D         SystemEnterSleep@94 004B               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0072          CheckValidTime@F87 00C1  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 005C            ??_CheckTouchKey 0078               _KeyStopClear 031E  
         _GetTouchKeyValue 012E             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 0700             __end_of_fanCtr 06CD         __end_of_KeyClearIn 0389  
            WorkSleep@time 0033                  _KeyMaxSub 0031                  _KeyResSum 00B8  
              __end_ofPL10 03C9                __end_ofPL20 0FF0                __end_ofPL12 03D4  
              __end_ofPL30 0FFA                __end_ofPL22 03E9                __end_ofPL14 03DB  
              __end_ofPL40 07D3                __end_ofPL32 03F5                __end_ofPL24 03EF  
              __end_ofPL16 07C2                __end_ofPL42 07D7                __end_ofPL34 1000  
              __end_ofPL26 07C9                __end_ofPL18 03E3                __end_ofPL44 03FA  
              __end_ofPL36 07CE                __end_ofPL28 0FF5                __end_ofPL46 03FF  
              __end_ofPL38 0F3E        start_initialization 000D                  _KeyServer 0EA1  
                _Isr_Timer 0E07               _maxMotorStep 006B          workCtr@power_temp 00CB  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0054                __pdataBANK0 006B  
             _Table_KeyCap 0811          __size_of___ftpack 003E                __pbssCOMMON 0079  
              _fanOverTime 0041                 ?_KeyServer 0070                  ___latbits 0001  
        __size_of___lwtoft 0010              __pcstackBANK0 0049              __pcstackBANK1 00CB  
                _WorkSleep 0043             _CheckValidTime 0363   __end_of_CheckKeyOldValue 031E  
               ?_Isr_Timer 0070        KeyServer@KeyOldFlag 0034          __size_of_bujinCtr 00AC  
                 ?_KeyIsIn 0070                   ?_KeyHave 0072  __size_of_SystemEnterSleep 0090  
          ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075                  __pnvBANK0 006E  
                __pnvBANK1 00CF                   ?___ftdiv 004F                   ?___fttol 005E  
                 ?___lwmod 0072                   ?_fanInit 0070                  _closeTime 0038  
                 ?_fanStop 0070                   ?_chrgCtr 0070              _shanshuoTime2 002A  
            _shanshuoTime3 0028                  __pstrings 0800                  __pswtext1 0817  
                __pswtext2 0827                  _bujinFlag 003B       __size_of_KeyClearOne 0015  
                _keyLedCtr 0700                  _firstLock 006E     __end_of_CheckValidTime 0379  
                _firstTime 00CF          __size_of_wuhuaCtr 0028                 ?_WorkSleep 0070  
           ADC_Sample@adch 004A                   ?_pwmInit 0070                   ?_pwmStop 0070  
                 ?_workCtr 0070                ADC_Sample@i 004B                ADC_Sample@j 0049  
                 _KEYDATAH 0117                   _KEYDATAL 0116          interrupt_function 0004  
                clear_ram0 07F5             KeyStopClear@53 0073                  _motorStep 0026  
      CheckKeyOldValue@F77 0030                  _powerFlag 003A                __stringbase 0805  
     __size_of_Init_System 001E      __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0811  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 018E            ?_CheckValidTime 0070  
              ??_KeyServer 0072          ___lmul@multiplier 0049                  _wuhuaFlag 0044  
              ??_Isr_Timer 0070                   _MainTime 0046                 _ADC_Sample 0587  
         __size_of_KeyIsIn 0010           __size_of_KeyHave 000E              _motorStopFlag 0037  
         _Table_KeyChannel 0814           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwmod 0024                   ___ftpack 0549           __size_of_fanInit 000B  
       __end_of__stringtab 0806           __size_of_fanStop 0006           __size_of_chrgCtr 001E  
                 ___lwtoft 0539                   _b_kover1 03C3                   _b_ksleep 03C0  
     __end_of_TurnKeyFlags 0363                   _fanValue 00C9                   _adresult 0047  
                 _chrgFlag 0040                ??_WorkSleep 0078                   __ptext10 06CD  
                 __ptext11 0587                   __ptext20 0389                   __ptext12 0F3E  
                 __ptext21 0EA1                   __ptext13 0539                   __ptext30 019D  
                 __ptext22 0025                   __ptext14 04E0                   __ptext31 02A8  
                 __ptext23 0071                   __ptext15 047E                   __ptext32 0293  
                 __ptext24 0332                   __ptext16 0549                   __ptext33 02B6  
                 __ptext25 0379                   __ptext17 07D7                   __ptext34 0283  
                 __ptext26 031E                   __ptext18 0043                   __ptext35 0E07  
                 __ptext27 012E                   __ptext19 009E                   __ptext28 018E  
                 __ptext29 0363           __size_of_pwmInit 000E           __size_of_pwmStop 0007  
             _shanshuoTime 002C                   _bujinCtr 0F3E                   _count10s 0042  
         __size_of_workCtr 007F                   _keyCount 00C5   __size_of_CheckOnceResult 00E6  
       GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073  
            __size_of_main 0042                _longKeyFlag 0039           _SystemEnterSleep 009E  
         bujinCtr@tempStep 0076      __end_of_CheckTouchKey 009E         CheckKeyOldValue@80 004B  
       CheckKeyOldValue@78 004D         CheckKeyOldValue@79 0049                   _test_adc 0035  
                 _power_ad 0024                   _zeroFlag 006D                   _workStep 007B  
                 _wuhuaCtr 0E22                ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070  
                 intlevel1 0000              ??_ClearResSum 0072         ??_CheckKeyOldValue 0074  
         ___lwmod@dividend 0074                ?_ADC_Sample 0072                  stringcode 0800  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0056                 _OPTION_REG 0001  
          ___lwmod@divisor 0072            ___lwmod@counter 0076                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0072               KeyClearIn@51 0074  
    __end_of_Refurbish_Sfr 0397        __end_of_ClearResSum 019D          ??_CheckOnceResult 0049  
