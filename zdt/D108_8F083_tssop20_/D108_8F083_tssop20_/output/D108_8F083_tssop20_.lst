

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 04 14:33:02 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	swtext2,local,class=CONST,delta=2
    23                           	psect	text17,local,class=CODE,merge=1,delta=2
    24                           	psect	text21,local,class=CODE,merge=1,delta=2
    25                           	psect	text22,local,class=CODE,merge=1,delta=2
    26                           	psect	text35,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes0,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataBANK0
    67  0000                     __pidataBANK0:	
    68                           
    69                           	psect	strings
    70  0800                     __pstrings:	
    71  0800                     stringtab:	
    72  0800                     __stringtab:	
    73  0800                     stringcode:	
    74                           ;	String table - string pointers are 1 byte each
    75                           
    76  0800                     stringdir:	
    77  0800  3008               	movlw	high stringdir
    78  0801  008A               	movwf	10
    79  0802  0804               	movf	4,w
    80  0803  0A84               	incf	4,f
    81  0804  0782               	addwf	2,f
    82  0805                     __stringbase:	
    83  0805  3400               	retlw	0
    84  0806                     __end_of__stringtab:	
    85  0806                     _Table_KeyFalg:	
    86  0806  3401               	retlw	1
    87  0807  3402               	retlw	2
    88  0808  3404               	retlw	4
    89  0809  3408               	retlw	8
    90  080A  3410               	retlw	16
    91  080B  3420               	retlw	32
    92  080C  3440               	retlw	64
    93  080D  3480               	retlw	128
    94  080E                     __end_of_Table_KeyFalg:	
    95  080E                     _Table_KeyDown:	
    96  080E  340A               	retlw	10
    97  080F  340A               	retlw	10
    98  0810  340A               	retlw	10
    99  0811                     __end_of_Table_KeyDown:	
   100  0811                     _Table_KeyCap:	
   101  0811  3402               	retlw	2
   102  0812  3402               	retlw	2
   103  0813  3402               	retlw	2
   104  0814                     __end_of_Table_KeyCap:	
   105  0814                     _Table_KeyChannel:	
   106  0814  3444               	retlw	68
   107  0815  3443               	retlw	67
   108  0816  3442               	retlw	66
   109  0817                     __end_of_Table_KeyChannel:	
   110                           
   111                           	psect	nvBANK1
   112  00CD                     __pnvBANK1:	
   113  00CD                     _firstLock:	
   114  00CD                     	ds	1
   115  00CE                     _firstTime:	
   116  00CE                     	ds	1
   117  001D                     _PWMCON2	set	29
   118  001C                     _PWMT4L	set	28
   119  001B                     _PWMD4L	set	27
   120  0018                     _PWMTH	set	24
   121  0017                     _PWMTL	set	23
   122  0016                     _PWMCON1	set	22
   123  0015                     _PWMCON0	set	21
   124  0014                     _OSCCON	set	20
   125  0013                     _T2CON	set	19
   126  0011                     _PR2	set	17
   127  000E                     _PIE1	set	14
   128  000D                     _PIR1	set	13
   129  000B                     _INTCON	set	11
   130  0008                     _WPUB	set	8
   131  0006                     _PORTB	set	6
   132  0005                     _TRISB	set	5
   133  0001                     _OPTION_REG	set	1
   134  0069                     _TMR2IF	set	105
   135  006B                     _RAIF	set	107
   136  0058                     _RBIF	set	88
   137  0059                     _INTF	set	89
   138  005B                     _RBIE	set	91
   139  004D                     _IOCB5	set	77
   140  0036                     _RB6	set	54
   141  0037                     _RB7	set	55
   142  002D                     _TRISB5	set	45
   143  002E                     _TRISB6	set	46
   144  009E                     _PWMD23H	set	158
   145  009C                     _PWMD3L	set	156
   146  0099                     _ADRESH	set	153
   147  0098                     _ADRESL	set	152
   148  0096                     _ADCON1	set	150
   149  0095                     _ADCON0	set	149
   150  0086                     _PORTA	set	134
   151  0085                     _TRISA	set	133
   152  0081                     _TMR0	set	129
   153  04B2                     _LDO_EN	set	1202
   154  04B6                     _CHS4	set	1206
   155  04A8                     _ADON	set	1192
   156  04A9                     _GODONE	set	1193
   157  0435                     _RA5	set	1077
   158  0436                     _RA6	set	1078
   159  0437                     _RA7	set	1079
   160  0117                     _KEYDATAH	set	279
   161  0116                     _KEYDATAL	set	278
   162  0113                     _KEYCON2	set	275
   163  0112                     _KEYCON1	set	274
   164  0111                     _KEYCON0	set	273
   165  0110                     _PIE2	set	272
   166  010F                     _PIR2	set	271
   167  0106                     _PORTC	set	262
   168  0105                     _TRISC	set	261
   169                           
   170                           	psect	cinit
   171  000D                     start_initialization:	
   172                           ; #config settings
   173                           
   174  000D                     __initialization:	
   175                           
   176                           ;initializer for _maxMotorStep
   177  000D  3002               	movlw	2
   178  000E  01EC               	clrf	__pdataBANK0& (0+127)
   179  000F  00ED               	movwf	(__pdataBANK0+1)& (0+127)
   180                           
   181                           ;initializer for _zeroFlag
   182  0010  3001               	movlw	1
   183  0011  00EE               	movwf	(__pdataBANK0+2)& (0+127)
   184  0012  30A0               	movlw	low __pbssBANK1
   185                           
   186                           ; Clear objects allocated to BANK1
   187  0013  1383               	bcf	3,7	;select IRP bank0
   188  0014  0084               	movwf	4
   189  0015  30C9               	movlw	low (__pbssBANK1+41)
   190  0016  158A  2616  118A   	fcall	clear_ram0
   191                           
   192                           ; Clear objects allocated to BANK0
   193  0019  3020               	movlw	low __pbssBANK0
   194  001A  0084               	movwf	4
   195  001B  304A               	movlw	low (__pbssBANK0+42)
   196  001C  158A  2616         	fcall	clear_ram0
   197                           
   198                           ; Clear objects allocated to COMMON
   199  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   200  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   201  0020  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   202                           
   203                           ; Clear objects allocated to BITCOMMON
   204  0021  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   205  0022                     end_of_initialization:	
   206                           ;End of C runtime variable initialization code
   207                           
   208  0022                     __end_of__initialization:	
   209  0022  0183               	clrf	3
   210  0023  158A  2E59         	ljmp	_main	;jump to C main() function
   211                           
   212                           	psect	bitbssCOMMON
   213  03C0                     __pbitbssCOMMON:	
   214  03C0                     _b_ksleep:	
   215  03C0                     	ds	1
   216  03C1                     _b_kerr:	
   217  03C1                     	ds	1
   218  03C2                     _b_kclr:	
   219  03C2                     	ds	1
   220  03C3                     _b_kover1:	
   221  03C3                     	ds	1
   222  03C4                     _b_kover:	
   223  03C4                     	ds	1
   224  03C5                     _B_OnOff:	
   225  03C5                     	ds	1
   226  03C6                     _B_MainLoop:	
   227  03C6                     	ds	1
   228                           
   229                           	psect	bssCOMMON
   230  0079                     __pbssCOMMON:	
   231  0079                     _KeyFlag:	
   232  0079                     	ds	2
   233  007B                     _workStep:	
   234  007B                     	ds	1
   235                           
   236                           	psect	bssBANK0
   237  0020                     __pbssBANK0:	
   238  0020                     _KeyData:	
   239  0020                     	ds	2
   240  0022                     _KeyOldData:	
   241  0022                     	ds	2
   242  0024                     _power_ad:	
   243  0024                     	ds	2
   244  0026                     _motorStep:	
   245  0026                     	ds	2
   246  0028                     _shanshuoTime3:	
   247  0028                     	ds	2
   248  002A                     _shanshuoTime2:	
   249  002A                     	ds	2
   250  002C                     _shanshuoTime:	
   251  002C                     	ds	2
   252  002E                     TurnKeyFlags@F84:	
   253  002E                     	ds	1
   254  002F                     TurnKeyFlags@F83:	
   255  002F                     	ds	1
   256  0030                     CheckKeyOldValue@F77:	
   257  0030                     	ds	1
   258  0031                     _KeyMaxSub:	
   259  0031                     	ds	1
   260  0032                     _KeyCounter:	
   261  0032                     	ds	1
   262  0033                     WorkSleep@time:	
   263  0033                     	ds	1
   264  0034                     KeyServer@KeyOldFlag:	
   265  0034                     	ds	1
   266  0035                     _test_adc:	
   267  0035                     	ds	1
   268  0036                     _bujinStartFlag:	
   269  0036                     	ds	1
   270  0037                     _motorStopFlag:	
   271  0037                     	ds	1
   272  0038                     _closeTime:	
   273  0038                     	ds	1
   274  0039                     _longKeyFlag:	
   275  0039                     	ds	1
   276  003A                     _powerFlag:	
   277  003A                     	ds	1
   278  003B                     _bujinFlag:	
   279  003B                     	ds	1
   280  003C                     _lowFanTime:	
   281  003C                     	ds	1
   282  003D                     _lowBatTime:	
   283  003D                     	ds	1
   284  003E                     _lowBatLock:	
   285  003E                     	ds	1
   286  003F                     _chrgFullTime:	
   287  003F                     	ds	1
   288  0040                     _chrgFullFlag:	
   289  0040                     	ds	1
   290  0041                     _chrgFlag:	
   291  0041                     	ds	1
   292  0042                     _fanOverTime:	
   293  0042                     	ds	1
   294  0043                     _count10s:	
   295  0043                     	ds	1
   296  0044                     _fanDuty:	
   297  0044                     	ds	1
   298  0045                     _wuhuaFlag:	
   299  0045                     	ds	1
   300  0046                     _count1s:	
   301  0046                     	ds	1
   302  0047                     _MainTime:	
   303  0047                     	ds	1
   304  0048                     _adresult:	
   305  0048                     	ds	2
   306                           
   307                           	psect	dataBANK0
   308  006C                     __pdataBANK0:	
   309  006C                     _maxMotorStep:	
   310  006C                     	ds	2
   311  006E                     _zeroFlag:	
   312  006E                     	ds	1
   313                           
   314                           	psect	bssBANK1
   315  00A0                     __pbssBANK1:	
   316  00A0                     _KeyReference:	
   317  00A0                     	ds	6
   318  00A6                     _KeyOldValue2:	
   319  00A6                     	ds	6
   320  00AC                     _KeyOldValue1:	
   321  00AC                     	ds	6
   322  00B2                     _KeyOldValue0:	
   323  00B2                     	ds	6
   324  00B8                     _KeyResSum:	
   325  00B8                     	ds	6
   326  00BE                     _KeyUpShake:	
   327  00BE                     	ds	3
   328  00C1                     CheckValidTime@F87:	
   329  00C1                     	ds	2
   330  00C3                     _result:	
   331  00C3                     	ds	2
   332  00C5                     _keyCount:	
   333  00C5                     	ds	2
   334  00C7                     _fanValue:	
   335  00C7                     	ds	2
   336                           
   337                           	psect	clrtext
   338  0E16                     clear_ram0:	
   339                           ;	Called with FSR containing the base address, and
   340                           ;	W with the last address+1
   341                           
   342  0E16  0064               	clrwdt	;clear the watchdog before getting into this loop
   343  0E17                     clrloop0:	
   344  0E17  0180               	clrf	0	;clear RAM location pointed to by FSR
   345  0E18  0A84               	incf	4,f	;increment pointer
   346  0E19  0604               	xorwf	4,w	;XOR with final address
   347  0E1A  1903               	btfsc	3,2	;have we reached the end yet?
   348  0E1B  3400               	retlw	0	;all done for this memory range, return
   349  0E1C  0604               	xorwf	4,w	;XOR again to restore value
   350  0E1D  2E17               	goto	clrloop0	;do the next byte
   351                           
   352                           	psect	cstackBANK1
   353  00C9                     __pcstackBANK1:	
   354  00C9                     workCtr@power_temp:	
   355                           
   356                           ; 4 bytes @ 0x0
   357  00C9                     	ds	4
   358                           
   359                           	psect	cstackCOMMON
   360  0070                     __pcstackCOMMON:	
   361  0070                     ?_SystemEnterSleep:	
   362  0070                     ?_CheckTouchKey:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_Init_System:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_Refurbish_Sfr:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_KeyServer:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Isr_Timer:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ??_Isr_Timer:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_WorkSleep:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_chrgCtr:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_keyLedCtr:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_pwmInit:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_pwmStop:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_fanInit:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_fanStop:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_fanCtr:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_wuhuaCtr:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_bujinCtr:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_workCtr:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_KeyIsIn:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_KeyClearOne:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_KeyClearIn:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_KeyStopClear:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_ClearResSum:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_GetTouchKeyValue:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_CheckOnceResult:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_CheckKeyOldValue:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_TurnKeyFlags:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_CheckValidTime:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 1 bytes @ 0x0
   448  0070                     	ds	2
   449  0072                     ??_Init_System:	
   450  0072                     ??_Refurbish_Sfr:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     ??_KeyServer:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ?_ADC_Sample:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     ??_chrgCtr:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     ??_pwmInit:	
   463                           ; 1 bytes @ 0x2
   464                           
   465  0072                     ??_pwmStop:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ??_fanInit:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ??_fanStop:	
   472                           ; 1 bytes @ 0x2
   473                           
   474  0072                     ??_wuhuaCtr:	
   475                           ; 1 bytes @ 0x2
   476                           
   477  0072                     ??_bujinCtr:	
   478                           ; 1 bytes @ 0x2
   479                           
   480  0072                     ??_KeyIsIn:	
   481                           ; 1 bytes @ 0x2
   482                           
   483  0072                     ??_KeyClearOne:	
   484                           ; 1 bytes @ 0x2
   485                           
   486  0072                     ??_ClearResSum:	
   487                           ; 1 bytes @ 0x2
   488                           
   489  0072                     ?_KeyHave:	
   490                           ; 1 bytes @ 0x2
   491                           
   492  0072                     ??_CheckValidTime:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0072                     ??___lmul:	
   496                           ; 1 bytes @ 0x2
   497                           
   498  0072                     ?___lwmod:	
   499                           ; 1 bytes @ 0x2
   500                           
   501  0072                     ?___ftpack:	
   502                           ; 2 bytes @ 0x2
   503                           
   504  0072                     ADC_Sample@adldo:	
   505                           ; 3 bytes @ 0x2
   506                           
   507  0072                     KeyIsIn@46:	
   508                           ; 1 bytes @ 0x2
   509                           
   510  0072                     KeyClearOne@49:	
   511                           ; 1 bytes @ 0x2
   512                           
   513  0072                     ClearResSum@56:	
   514                           ; 1 bytes @ 0x2
   515                           
   516  0072                     KeyHave@59:	
   517                           ; 1 bytes @ 0x2
   518                           
   519  0072                     ___lwmod@divisor:	
   520                           ; 2 bytes @ 0x2
   521                           
   522  0072                     ___ftpack@arg:	
   523                           ; 2 bytes @ 0x2
   524                           
   525  0072                     ___lmul@product:	
   526                           ; 3 bytes @ 0x2
   527                           
   528                           
   529                           ; 4 bytes @ 0x2
   530  0072                     	ds	1
   531  0073                     ??_ADC_Sample:	
   532  0073                     ??_KeyStopClear:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0073                     ??_GetTouchKeyValue:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0073                     KeyIsIn@45:	
   539                           ; 1 bytes @ 0x3
   540                           
   541  0073                     KeyStopClear@53:	
   542                           ; 1 bytes @ 0x3
   543                           
   544  0073                     GetTouchKeyValue@64:	
   545                           ; 1 bytes @ 0x3
   546                           
   547                           
   548                           ; 2 bytes @ 0x3
   549  0073                     	ds	1
   550  0074                     ??_KeyClearIn:	
   551  0074                     ??_KeyHave:	
   552                           ; 1 bytes @ 0x4
   553                           
   554  0074                     ??_CheckKeyOldValue:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0074                     KeyClearIn@51:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     KeyHave@58:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     ___lwmod@dividend:	
   564                           ; 1 bytes @ 0x4
   565                           
   566                           
   567                           ; 2 bytes @ 0x4
   568  0074                     	ds	1
   569  0075                     ??_TurnKeyFlags:	
   570  0075                     ___ftpack@exp:	
   571                           ; 1 bytes @ 0x5
   572                           
   573  0075                     GetTouchKeyValue@63:	
   574                           ; 1 bytes @ 0x5
   575                           
   576                           
   577                           ; 2 bytes @ 0x5
   578  0075                     	ds	1
   579  0076                     ??___lwmod:	
   580  0076                     bujinCtr@tempStep:	
   581                           ; 1 bytes @ 0x6
   582                           
   583  0076                     ___ftpack@sign:	
   584                           ; 1 bytes @ 0x6
   585                           
   586  0076                     ___lwmod@counter:	
   587                           ; 1 bytes @ 0x6
   588                           
   589                           
   590                           ; 1 bytes @ 0x6
   591  0076                     	ds	1
   592  0077                     ??_keyLedCtr:	
   593  0077                     ??_fanCtr:	
   594                           ; 1 bytes @ 0x7
   595                           
   596  0077                     ??_workCtr:	
   597                           ; 1 bytes @ 0x7
   598                           
   599  0077                     ??___lwtoft:	
   600                           ; 1 bytes @ 0x7
   601                           
   602  0077                     GetTouchKeyValue@62:	
   603                           ; 1 bytes @ 0x7
   604                           
   605                           
   606                           ; 1 bytes @ 0x7
   607  0077                     	ds	1
   608  0078                     ??_CheckTouchKey:	
   609  0078                     ??_WorkSleep:	
   610                           ; 1 bytes @ 0x8
   611                           
   612  0078                     ??_main:	
   613                           ; 1 bytes @ 0x8
   614                           
   615                           
   616                           	psect	cstackBANK0
   617  004A                     __pcstackBANK0:	
   618                           ; 1 bytes @ 0x8
   619                           
   620  004A                     ??_SystemEnterSleep:	
   621  004A                     ??___ftpack:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  004A                     ??_CheckOnceResult:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  004A                     ?___lmul:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  004A                     ADC_Sample@j:	
   631                           ; 4 bytes @ 0x0
   632                           
   633  004A                     CheckKeyOldValue@79:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  004A                     ___lmul@multiplier:	
   637                           ; 2 bytes @ 0x0
   638                           
   639                           
   640                           ; 4 bytes @ 0x0
   641  004A                     	ds	1
   642  004B                     ADC_Sample@adch:	
   643                           
   644                           ; 1 bytes @ 0x1
   645  004B                     	ds	1
   646  004C                     ADC_Sample@i:	
   647  004C                     CheckKeyOldValue@80:	
   648                           ; 1 bytes @ 0x2
   649                           
   650  004C                     SystemEnterSleep@94:	
   651                           ; 2 bytes @ 0x2
   652                           
   653                           
   654                           ; 2 bytes @ 0x2
   655  004C                     	ds	1
   656  004D                     ?___lwtoft:	
   657  004D                     ___lwtoft@c:	
   658                           ; 3 bytes @ 0x3
   659                           
   660  004D                     ADC_Sample@adsum:	
   661                           ; 2 bytes @ 0x3
   662                           
   663                           
   664                           ; 4 bytes @ 0x3
   665  004D                     	ds	1
   666  004E                     CheckKeyOldValue@78:	
   667  004E                     CheckOnceResult@73:	
   668                           ; 1 bytes @ 0x4
   669                           
   670  004E                     SystemEnterSleep@93:	
   671                           ; 2 bytes @ 0x4
   672                           
   673  004E                     ___lmul@multiplicand:	
   674                           ; 2 bytes @ 0x4
   675                           
   676                           
   677                           ; 4 bytes @ 0x4
   678  004E                     	ds	2
   679  0050                     ?___ftdiv:	
   680  0050                     CheckOnceResult@70:	
   681                           ; 3 bytes @ 0x6
   682                           
   683  0050                     SystemEnterSleep@92:	
   684                           ; 1 bytes @ 0x6
   685                           
   686  0050                     ___ftdiv@f2:	
   687                           ; 2 bytes @ 0x6
   688                           
   689                           
   690                           ; 3 bytes @ 0x6
   691  0050                     	ds	1
   692  0051                     ADC_Sample@admin:	
   693  0051                     CheckOnceResult@72:	
   694                           ; 2 bytes @ 0x7
   695                           
   696                           
   697                           ; 2 bytes @ 0x7
   698  0051                     	ds	1
   699  0052                     SystemEnterSleep@91:	
   700                           
   701                           ; 1 bytes @ 0x8
   702  0052                     	ds	1
   703  0053                     CheckOnceResult@69:	
   704  0053                     ADC_Sample@admax:	
   705                           ; 1 bytes @ 0x9
   706                           
   707  0053                     ___ftdiv@f1:	
   708                           ; 2 bytes @ 0x9
   709                           
   710                           
   711                           ; 3 bytes @ 0x9
   712  0053                     	ds	1
   713  0054                     CheckOnceResult@71:	
   714                           
   715                           ; 2 bytes @ 0xA
   716  0054                     	ds	1
   717  0055                     ADC_Sample@ad_temp:	
   718                           
   719                           ; 2 bytes @ 0xB
   720  0055                     	ds	1
   721  0056                     ??___ftdiv:	
   722  0056                     CheckOnceResult@68:	
   723                           ; 1 bytes @ 0xC
   724                           
   725                           
   726                           ; 1 bytes @ 0xC
   727  0056                     	ds	1
   728  0057                     fanCtr@maxFanValue:	
   729                           
   730                           ; 1 bytes @ 0xD
   731  0057                     	ds	1
   732  0058                     fanCtr@fan_temp:	
   733                           
   734                           ; 4 bytes @ 0xE
   735  0058                     	ds	1
   736  0059                     ___ftdiv@cntr:	
   737                           
   738                           ; 1 bytes @ 0xF
   739  0059                     	ds	1
   740  005A                     ___ftdiv@f3:	
   741                           
   742                           ; 3 bytes @ 0x10
   743  005A                     	ds	3
   744  005D                     ___ftdiv@exp:	
   745                           
   746                           ; 1 bytes @ 0x13
   747  005D                     	ds	1
   748  005E                     ___ftdiv@sign:	
   749                           
   750                           ; 1 bytes @ 0x14
   751  005E                     	ds	1
   752  005F                     ?___fttol:	
   753  005F                     ___fttol@f1:	
   754                           ; 4 bytes @ 0x15
   755                           
   756                           
   757                           ; 3 bytes @ 0x15
   758  005F                     	ds	4
   759  0063                     ??___fttol:	
   760                           
   761                           ; 1 bytes @ 0x19
   762  0063                     	ds	3
   763  0066                     ___fttol@sign1:	
   764                           
   765                           ; 1 bytes @ 0x1C
   766  0066                     	ds	1
   767  0067                     ___fttol@lval:	
   768                           
   769                           ; 4 bytes @ 0x1D
   770  0067                     	ds	4
   771  006B                     ___fttol@exp1:	
   772                           
   773                           ; 1 bytes @ 0x21
   774  006B                     	ds	1
   775                           
   776                           	psect	maintext
   777  0E59                     __pmaintext:	
   778 ;;
   779 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   780 ;;
   781 ;; *************** function _main *****************
   782 ;; Defined at:
   783 ;;		line 822 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : B00/0
   794 ;;		On exit  : 200/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   797 ;;      Params:         0       0       0       0
   798 ;;      Locals:         0       0       0       0
   799 ;;      Temps:          0       0       0       0
   800 ;;      Totals:         0       0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels required when called:    6
   803 ;; This function calls:
   804 ;;		_CheckTouchKey
   805 ;;		_Init_System
   806 ;;		_KeyServer
   807 ;;		_Refurbish_Sfr
   808 ;;		_WorkSleep
   809 ;;		_chrgCtr
   810 ;;		_workCtr
   811 ;; This function is called by:
   812 ;;		Startup code after reset
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _main
   818  0E59                     _main:	
   819                           
   820                           ;main.c: 824: Init_System();
   821                           
   822                           ;incstack = 0
   823                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   824  0E59  118A  2420  158A   	fcall	_Init_System
   825  0E5C  30C8               	movlw	200
   826                           
   827                           ;main.c: 825: firstLock = 1;
   828  0E5D  01CD               	clrf	_firstLock^(0+128)
   829  0E5E  0ACD               	incf	_firstLock^(0+128),f
   830                           
   831                           ;main.c: 826: firstTime = 200;
   832  0E5F  00CE               	movwf	_firstTime^(0+128)
   833  0E60                     l4811:	
   834                           
   835                           ;main.c: 828: {
   836                           ;main.c: 829: if(B_MainLoop)
   837  0E60  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   838  0E61  2E60               	goto	l4811
   839                           
   840                           ;main.c: 830: {
   841                           ;main.c: 831: B_MainLoop = 0;
   842  0E62  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   843  0E63  0064               	clrwdt	;# 
   844                           
   845                           ;main.c: 834: CheckTouchKey();
   846  0E64  118A  246C  158A   	fcall	_CheckTouchKey
   847                           
   848                           ;main.c: 835: chrgCtr();
   849  0E67  158A  2639  158A   	fcall	_chrgCtr
   850                           
   851                           ;main.c: 836: Refurbish_Sfr();
   852  0E6A  118A  2784  158A   	fcall	_Refurbish_Sfr
   853                           
   854                           ;main.c: 837: KeyServer();
   855  0E6D  158A  2699  158A   	fcall	_KeyServer
   856                           
   857                           ;main.c: 838: workCtr();
   858  0E70  118A  2025  158A   	fcall	_workCtr
   859                           
   860                           ;main.c: 839: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && p
      +                          owerFlag == 0 && keyCount == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   861  0E73  1683               	bsf	3,5	;RP0=1, select bank1
   862  0E74  084E               	movf	_firstTime^(0+128),w
   863  0E75  1D03               	btfss	3,2
   864  0E76  2E60               	goto	l4811
   865  0E77  1283               	bcf	3,5	;RP0=0, select bank0
   866  0E78  0841               	movf	_chrgFlag,w
   867  0E79  1D03               	btfss	3,2
   868  0E7A  2E60               	goto	l4811
   869  0E7B  087B               	movf	_workStep,w
   870  0E7C  1D03               	btfss	3,2
   871  0E7D  2E60               	goto	l4811
   872  0E7E  0845               	movf	_wuhuaFlag,w
   873  0E7F  1D03               	btfss	3,2
   874  0E80  2E60               	goto	l4811
   875  0E81  083A               	movf	_powerFlag,w
   876  0E82  1D03               	btfss	3,2
   877  0E83  2E60               	goto	l4811
   878  0E84  1683               	bsf	3,5	;RP0=1, select bank1
   879  0E85  0845               	movf	_keyCount^(0+128),w
   880  0E86  0446               	iorwf	(_keyCount+1)^(0+128),w
   881  0E87  1D03               	btfss	3,2
   882  0E88  2E60               	goto	l4811
   883  0E89  1283               	bcf	3,5	;RP0=0, select bank0
   884  0E8A  083B               	movf	_bujinFlag,w
   885  0E8B  1D03               	btfss	3,2
   886  0E8C  2E60               	goto	l4811
   887  0E8D  082C               	movf	_shanshuoTime,w
   888  0E8E  042D               	iorwf	_shanshuoTime+1,w
   889  0E8F  1D03               	btfss	3,2
   890  0E90  2E60               	goto	l4811
   891  0E91  082A               	movf	_shanshuoTime2,w
   892  0E92  042B               	iorwf	_shanshuoTime2+1,w
   893  0E93  1D03               	btfss	3,2
   894  0E94  2E60               	goto	l4811
   895                           
   896                           ;main.c: 840: {
   897                           ;main.c: 841: WorkSleep();
   898  0E95  118A  243E  158A   	fcall	_WorkSleep
   899  0E98  2E60               	goto	l4811
   900  0E99                     __end_of_main:	
   901                           
   902                           	psect	text1
   903  0025                     __ptext1:	
   904 ;; *************** function _workCtr *****************
   905 ;; Defined at:
   906 ;;		line 765 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 200/0
   917 ;;		On exit  : 200/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   920 ;;      Params:         0       0       0       0
   921 ;;      Locals:         0       0       4       0
   922 ;;      Temps:          0       0       0       0
   923 ;;      Totals:         0       0       4       0
   924 ;;Total ram usage:        4 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; Hardware stack levels required when called:    3
   927 ;; This function calls:
   928 ;;		_ADC_Sample
   929 ;;		___ftdiv
   930 ;;		___fttol
   931 ;;		___lwtoft
   932 ;;		_bujinCtr
   933 ;;		_fanCtr
   934 ;;		_keyLedCtr
   935 ;;		_wuhuaCtr
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           
   942                           ;psect for function _workCtr
   943  0025                     _workCtr:	
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   947  0025  301F               	movlw	31
   948                           
   949                           ;main.c: 767: test_adc = ADC_Sample(31, 0);
   950  0026  01F2               	clrf	ADC_Sample@adldo
   951  0027  21A2  118A         	fcall	_ADC_Sample
   952  0029  00B5               	movwf	_test_adc	;volatile
   953                           
   954                           ;main.c: 768: if (0xA5 == test_adc)
   955  002A  30A5               	movlw	165
   956  002B  0635               	xorwf	_test_adc,w	;volatile
   957  002C  1D03               	btfss	3,2
   958  002D  285F               	goto	l4735
   959                           
   960                           ;main.c: 769: {
   961                           ;main.c: 770: volatile unsigned long power_temp;
   962                           ;main.c: 772: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   963  002E  3096               	movlw	150
   964  002F  01D3               	clrf	___ftdiv@f1
   965  0030  00D4               	movwf	___ftdiv@f1+1
   966  0031  304A               	movlw	74
   967  0032  00D5               	movwf	___ftdiv@f1+2
   968  0033  0849               	movf	_adresult+1,w	;volatile
   969  0034  00CE               	movwf	___lwtoft@c+1
   970  0035  0848               	movf	_adresult,w	;volatile
   971  0036  00CD               	movwf	___lwtoft@c
   972  0037  2154  118A         	fcall	___lwtoft
   973  0039  084D               	movf	?___lwtoft,w
   974  003A  00D0               	movwf	___ftdiv@f2
   975  003B  084E               	movf	?___lwtoft+1,w
   976  003C  00D1               	movwf	___ftdiv@f2+1
   977  003D  084F               	movf	?___lwtoft+2,w
   978  003E  00D2               	movwf	___ftdiv@f2+2
   979  003F  2099  118A         	fcall	___ftdiv
   980  0041  0850               	movf	?___ftdiv,w
   981  0042  00DF               	movwf	___fttol@f1
   982  0043  0851               	movf	?___ftdiv+1,w
   983  0044  00E0               	movwf	___fttol@f1+1
   984  0045  0852               	movf	?___ftdiv+2,w
   985  0046  00E1               	movwf	___fttol@f1+2
   986  0047  20FB  118A         	fcall	___fttol
   987  0049  0862               	movf	?___fttol+3,w
   988  004A  1683               	bsf	3,5	;RP0=1, select bank1
   989  004B  00CC               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   990  004C  1283               	bcf	3,5	;RP0=0, select bank0
   991  004D  0861               	movf	?___fttol+2,w
   992  004E  1683               	bsf	3,5	;RP0=1, select bank1
   993  004F  00CB               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   994  0050  1283               	bcf	3,5	;RP0=0, select bank0
   995  0051  0860               	movf	?___fttol+1,w
   996  0052  1683               	bsf	3,5	;RP0=1, select bank1
   997  0053  00CA               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   998  0054  1283               	bcf	3,5	;RP0=0, select bank0
   999  0055  085F               	movf	?___fttol,w
  1000  0056  1683               	bsf	3,5	;RP0=1, select bank1
  1001  0057  00C9               	movwf	workCtr@power_temp^(0+128)	;volatile
  1002                           
  1003                           ;main.c: 773: power_ad = (unsigned int)(power_temp);
  1004  0058  084A               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1005  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1006  005A  00A5               	movwf	_power_ad+1	;volatile
  1007  005B  1683               	bsf	3,5	;RP0=1, select bank1
  1008  005C  0849               	movf	workCtr@power_temp^(0+128),w	;volatile
  1009  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1010  005E  00A4               	movwf	_power_ad	;volatile
  1011  005F                     l4735:	
  1012                           
  1013                           ;main.c: 774: }
  1014                           ;main.c: 775: if(workStep == 2 && power_ad < 2900)
  1015  005F  3002               	movlw	2
  1016  0060  067B               	xorwf	_workStep,w
  1017  0061  1D03               	btfss	3,2
  1018  0062  2873               	goto	l4745
  1019  0063  300B               	movlw	11
  1020  0064  0225               	subwf	_power_ad+1,w	;volatile
  1021  0065  3054               	movlw	84
  1022  0066  1903               	skipnz
  1023  0067  0224               	subwf	_power_ad,w	;volatile
  1024  0068  1803               	skipnc
  1025  0069  2873               	goto	l4745
  1026                           
  1027                           ;main.c: 776: {
  1028                           ;main.c: 777: if(++lowFanTime > 200)
  1029  006A  30C9               	movlw	201
  1030  006B  0ABC               	incf	_lowFanTime,f
  1031  006C  023C               	subwf	_lowFanTime,w
  1032  006D  1C03               	skipc
  1033  006E  2874               	goto	l4747
  1034                           
  1035                           ;main.c: 778: {
  1036                           ;main.c: 779: lowFanTime = 0;
  1037  006F  01BC               	clrf	_lowFanTime
  1038                           
  1039                           ;main.c: 780: workStep = 1;
  1040  0070  01FB               	clrf	_workStep
  1041  0071  0AFB               	incf	_workStep,f
  1042  0072  2874               	goto	l4747
  1043  0073                     l4745:	
  1044                           
  1045                           ;main.c: 783: else
  1046                           ;main.c: 784: {
  1047                           ;main.c: 785: lowFanTime = 0;
  1048  0073  01BC               	clrf	_lowFanTime
  1049  0074                     l4747:	
  1050                           
  1051                           ;main.c: 786: }
  1052                           ;main.c: 787: if(power_ad < 2700)
  1053  0074  300A               	movlw	10
  1054  0075  0225               	subwf	_power_ad+1,w	;volatile
  1055  0076  308C               	movlw	140
  1056  0077  1903               	skipnz
  1057  0078  0224               	subwf	_power_ad,w	;volatile
  1058  0079  1803               	skipnc
  1059  007A  2887               	goto	l4755
  1060                           
  1061                           ;main.c: 788: {
  1062                           ;main.c: 789: if(++lowBatTime > 200)
  1063  007B  30C9               	movlw	201
  1064  007C  0ABD               	incf	_lowBatTime,f
  1065  007D  023D               	subwf	_lowBatTime,w
  1066  007E  1C03               	skipc
  1067  007F  2888               	goto	l4757
  1068                           
  1069                           ;main.c: 790: {
  1070                           ;main.c: 791: lowBatTime = 0;
  1071  0080  01BD               	clrf	_lowBatTime
  1072                           
  1073                           ;main.c: 792: lowBatLock = 1;
  1074  0081  01BE               	clrf	_lowBatLock
  1075  0082  0ABE               	incf	_lowBatLock,f
  1076                           
  1077                           ;main.c: 793: workStep = 0;
  1078  0083  01FB               	clrf	_workStep
  1079                           
  1080                           ;main.c: 794: wuhuaFlag = 0;
  1081  0084  01C5               	clrf	_wuhuaFlag
  1082                           
  1083                           ;main.c: 795: bujinFlag = 0;
  1084  0085  01BB               	clrf	_bujinFlag
  1085  0086  2888               	goto	l4757
  1086  0087                     l4755:	
  1087                           
  1088                           ;main.c: 798: else
  1089                           ;main.c: 799: {
  1090                           ;main.c: 800: lowBatTime = 0;
  1091  0087  01BD               	clrf	_lowBatTime
  1092  0088                     l4757:	
  1093                           
  1094                           ;main.c: 801: }
  1095                           ;main.c: 802: if(firstTime > 0)
  1096  0088  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0089  084E               	movf	_firstTime^(0+128),w
  1098  008A  1903               	btfsc	3,2
  1099  008B  2892               	goto	l4765
  1100                           
  1101                           ;main.c: 803: {
  1102                           ;main.c: 804: firstTime--;
  1103  008C  03CE               	decf	_firstTime^(0+128),f
  1104                           
  1105                           ;main.c: 805: PORTB = 0x00;
  1106  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1107  008E  0186               	clrf	6	;volatile
  1108                           
  1109                           ;main.c: 806: PORTA = 0x00;
  1110  008F  1683               	bsf	3,5	;RP0=1, select bank1
  1111  0090  0186               	clrf	6	;volatile
  1112                           
  1113                           ;main.c: 807: }
  1114  0091  0008               	return
  1115  0092                     l4765:	
  1116                           
  1117                           ;main.c: 808: else
  1118                           ;main.c: 809: {
  1119                           ;main.c: 810: keyLedCtr();
  1120  0092  2312  118A         	fcall	_keyLedCtr
  1121                           
  1122                           ;main.c: 811: fanCtr();
  1123  0094  2273  118A         	fcall	_fanCtr
  1124                           
  1125                           ;main.c: 812: wuhuaCtr();
  1126  0096  23BC               	fcall	_wuhuaCtr
  1127                           
  1128                           ;main.c: 813: bujinCtr();
  1129  0097  158A  2F3E         	ljmp	l4459
  1130  0099                     __end_of_workCtr:	
  1131  0099                     __ptext15:	
  1132 ;; *************** function ___ftdiv *****************
  1133 ;; Defined at:
  1134 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  f2              3    6[BANK0 ] float 
  1137 ;;  f1              3    9[BANK0 ] float 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  f3              3   16[BANK0 ] float 
  1140 ;;  sign            1   20[BANK0 ] unsigned char 
  1141 ;;  exp             1   19[BANK0 ] unsigned char 
  1142 ;;  cntr            1   15[BANK0 ] unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  3    6[BANK0 ] float 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, pclath, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 300/0
  1149 ;;		On exit  : 300/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1152 ;;      Params:         0       6       0       0
  1153 ;;      Locals:         0       6       0       0
  1154 ;;      Temps:          0       3       0       0
  1155 ;;      Totals:         0      15       0       0
  1156 ;;Total ram usage:       15 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    2
  1159 ;; This function calls:
  1160 ;;		___ftpack
  1161 ;; This function is called by:
  1162 ;;		_workCtr
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function ___ftdiv
  1168  0099                     ___ftdiv:	
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1172  0099  0853               	movf	___ftdiv@f1,w
  1173  009A  00D6               	movwf	??___ftdiv
  1174  009B  0854               	movf	___ftdiv@f1+1,w
  1175  009C  00D7               	movwf	??___ftdiv+1
  1176  009D  0855               	movf	___ftdiv@f1+2,w
  1177  009E  00D8               	movwf	??___ftdiv+2
  1178  009F  1003               	clrc
  1179  00A0  0D57               	rlf	??___ftdiv+1,w
  1180  00A1  0D58               	rlf	??___ftdiv+2,w
  1181  00A2  00DD               	movwf	___ftdiv@exp
  1182  00A3  085D               	movf	___ftdiv@exp,w
  1183  00A4  1D03               	btfss	3,2
  1184  00A5  28A7               	goto	l4603
  1185  00A6  2C0E               	ljmp	PL46	;call to abstracted procedure
  1186  00A7                     l4603:	
  1187  00A7  0850               	movf	___ftdiv@f2,w
  1188  00A8  00D6               	movwf	??___ftdiv
  1189  00A9  0851               	movf	___ftdiv@f2+1,w
  1190  00AA  00D7               	movwf	??___ftdiv+1
  1191  00AB  0852               	movf	___ftdiv@f2+2,w
  1192  00AC  00D8               	movwf	??___ftdiv+2
  1193  00AD  1003               	clrc
  1194  00AE  0D57               	rlf	??___ftdiv+1,w
  1195  00AF  0D58               	rlf	??___ftdiv+2,w
  1196  00B0  00DE               	movwf	___ftdiv@sign
  1197  00B1  085E               	movf	___ftdiv@sign,w
  1198  00B2  1D03               	btfss	3,2
  1199  00B3  28B5               	goto	l1587
  1200  00B4  2C0E               	ljmp	PL46	;call to abstracted procedure
  1201  00B5                     l1587:	
  1202  00B5  3089               	movlw	137
  1203  00B6  01DA               	clrf	___ftdiv@f3
  1204  00B7  01DB               	clrf	___ftdiv@f3+1
  1205  00B8  01DC               	clrf	___ftdiv@f3+2
  1206  00B9  075E               	addwf	___ftdiv@sign,w
  1207  00BA  00D6               	movwf	??___ftdiv
  1208  00BB  02DD               	subwf	___ftdiv@exp,f
  1209  00BC  0855               	movf	___ftdiv@f1+2,w
  1210  00BD  00DE               	movwf	___ftdiv@sign
  1211  00BE  0852               	movf	___ftdiv@f2+2,w
  1212  00BF  06DE               	xorwf	___ftdiv@sign,f
  1213  00C0  3080               	movlw	128
  1214  00C1  05DE               	andwf	___ftdiv@sign,f
  1215  00C2  3018               	movlw	24
  1216  00C3  17D4               	bsf	___ftdiv@f1+1,7
  1217  00C4  01D5               	clrf	___ftdiv@f1+2
  1218  00C5  17D1               	bsf	___ftdiv@f2+1,7
  1219  00C6  01D2               	clrf	___ftdiv@f2+2
  1220  00C7  00D9               	movwf	___ftdiv@cntr
  1221  00C8                     l4625:	
  1222  00C8  1003               	clrc
  1223  00C9  0DDA               	rlf	___ftdiv@f3,f
  1224  00CA  0DDB               	rlf	___ftdiv@f3+1,f
  1225  00CB  0DDC               	rlf	___ftdiv@f3+2,f
  1226  00CC  0852               	movf	___ftdiv@f2+2,w
  1227  00CD  0255               	subwf	___ftdiv@f1+2,w
  1228  00CE  1D03               	skipz
  1229  00CF  28D6               	goto	u4825
  1230  00D0  0851               	movf	___ftdiv@f2+1,w
  1231  00D1  0254               	subwf	___ftdiv@f1+1,w
  1232  00D2  1D03               	skipz
  1233  00D3  28D6               	goto	u4825
  1234  00D4  0850               	movf	___ftdiv@f2,w
  1235  00D5  0253               	subwf	___ftdiv@f1,w
  1236  00D6                     u4825:	
  1237  00D6  1C03               	skipc
  1238  00D7  28E4               	goto	L7
  1239  00D8  0850               	movf	___ftdiv@f2,w
  1240  00D9  02D3               	subwf	___ftdiv@f1,f
  1241  00DA  0851               	movf	___ftdiv@f2+1,w
  1242  00DB  1C03               	skipc
  1243  00DC  0F51               	incfsz	___ftdiv@f2+1,w
  1244  00DD  02D4               	subwf	___ftdiv@f1+1,f
  1245  00DE  0852               	movf	___ftdiv@f2+2,w
  1246  00DF  1C03               	skipc
  1247  00E0  0A52               	incf	___ftdiv@f2+2,w
  1248  00E1  02D5               	subwf	___ftdiv@f1+2,f
  1249  00E2  145A               	bsf	___ftdiv@f3,0
  1250  00E3  1003               	clrc
  1251  00E4                     L7:	
  1252  00E4  0DD3               	rlf	___ftdiv@f1,f
  1253  00E5  0DD4               	rlf	___ftdiv@f1+1,f
  1254  00E6  0DD5               	rlf	___ftdiv@f1+2,f
  1255  00E7  0BD9               	decfsz	___ftdiv@cntr,f
  1256  00E8  28C8               	goto	l4625
  1257  00E9  085A               	movf	___ftdiv@f3,w
  1258  00EA  00F2               	movwf	___ftpack@arg
  1259  00EB  085B               	movf	___ftdiv@f3+1,w
  1260  00EC  00F3               	movwf	___ftpack@arg+1
  1261  00ED  085C               	movf	___ftdiv@f3+2,w
  1262  00EE  00F4               	movwf	___ftpack@arg+2
  1263  00EF  085D               	movf	___ftdiv@exp,w
  1264  00F0  00F5               	movwf	___ftpack@exp
  1265  00F1  085E               	movf	___ftdiv@sign,w
  1266  00F2  00F6               	movwf	___ftpack@sign
  1267  00F3  2164               	fcall	___ftpack
  1268  00F4  0872               	movf	?___ftpack,w
  1269  00F5  00D0               	movwf	?___ftdiv
  1270  00F6  0873               	movf	?___ftpack+1,w
  1271  00F7  00D1               	movwf	?___ftdiv+1
  1272  00F8  0874               	movf	?___ftpack+2,w
  1273  00F9  00D2               	movwf	?___ftdiv+2
  1274  00FA  0008               	return
  1275  00FB                     __end_of___ftdiv:	
  1276  00FB                     __ptext14:	
  1277 ;; *************** function ___fttol *****************
  1278 ;; Defined at:
  1279 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  f1              3   21[BANK0 ] float 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  lval            4   29[BANK0 ] unsigned long 
  1284 ;;  exp1            1   33[BANK0 ] unsigned char 
  1285 ;;  sign1           1   28[BANK0 ] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  4   21[BANK0 ] long 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 300/0
  1292 ;;		On exit  : 300/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1295 ;;      Params:         0       4       0       0
  1296 ;;      Locals:         0       6       0       0
  1297 ;;      Temps:          0       3       0       0
  1298 ;;      Totals:         0      13       0       0
  1299 ;;Total ram usage:       13 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_workCtr
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function ___fttol
  1311  00FB                     ___fttol:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1315  00FB  23FD  118A         	fcall	PL24	;call to abstracted procedure
  1316  00FD  1003               	clrc
  1317  00FE  0D64               	rlf	??___fttol+1,w
  1318  00FF  0D65               	rlf	??___fttol+2,w
  1319  0100  00EB               	movwf	___fttol@exp1
  1320  0101  086B               	movf	___fttol@exp1,w
  1321  0102  1D03               	btfss	3,2
  1322  0103  2909               	goto	l4643
  1323  0104                     l4641:	
  1324  0104  01DF               	clrf	?___fttol
  1325  0105  01E0               	clrf	?___fttol+1
  1326  0106  01E1               	clrf	?___fttol+2
  1327  0107  01E2               	clrf	?___fttol+3
  1328  0108  0008               	return
  1329  0109                     l4643:	
  1330  0109  23FD  118A         	fcall	PL24	;call to abstracted procedure
  1331  010B  3017               	movlw	23
  1332  010C                     u4855:	
  1333  010C  1003               	clrc
  1334  010D  0CE5               	rrf	??___fttol+2,f
  1335  010E  0CE4               	rrf	??___fttol+1,f
  1336  010F  0CE3               	rrf	??___fttol,f
  1337  0110  3EFF               	addlw	-1
  1338  0111  1D03               	skipz
  1339  0112  290C               	goto	u4855
  1340  0113  0863               	movf	??___fttol,w
  1341  0114  00E6               	movwf	___fttol@sign1
  1342  0115  17E0               	bsf	___fttol@f1+1,7
  1343  0116  01E1               	clrf	___fttol@f1+2
  1344  0117  085F               	movf	___fttol@f1,w
  1345  0118  00E7               	movwf	___fttol@lval
  1346  0119  0860               	movf	___fttol@f1+1,w
  1347  011A  00E8               	movwf	___fttol@lval+1
  1348  011B  0861               	movf	___fttol@f1+2,w
  1349  011C  00E9               	movwf	___fttol@lval+2
  1350  011D  308E               	movlw	142
  1351  011E  01EA               	clrf	___fttol@lval+3
  1352  011F  02EB               	subwf	___fttol@exp1,f
  1353  0120  1FEB               	btfss	___fttol@exp1,7
  1354  0121  292F               	goto	l4663
  1355  0122  086B               	movf	___fttol@exp1,w
  1356  0123  3A80               	xorlw	128
  1357  0124  3E8F               	addlw	143
  1358  0125  1C03               	btfss	3,0
  1359  0126  2904               	goto	l4641
  1360  0127                     l4659:	
  1361  0127  1003               	clrc
  1362  0128  0CEA               	rrf	___fttol@lval+3,f
  1363  0129  0CE9               	rrf	___fttol@lval+2,f
  1364  012A  0CE8               	rrf	___fttol@lval+1,f
  1365  012B  0CE7               	rrf	___fttol@lval,f
  1366  012C  0FEB               	incfsz	___fttol@exp1,f
  1367  012D  2927               	goto	l4659
  1368  012E  293D               	goto	l4671
  1369  012F                     l4663:	
  1370  012F  3018               	movlw	24
  1371  0130  026B               	subwf	___fttol@exp1,w
  1372  0131  1803               	btfsc	3,0
  1373  0132  2904               	goto	l4641
  1374  0133                     l4669:	
  1375  0133  086B               	movf	___fttol@exp1,w
  1376  0134  1903               	btfsc	3,2
  1377  0135  293D               	goto	l4671
  1378  0136  1003               	clrc
  1379  0137  0DE7               	rlf	___fttol@lval,f
  1380  0138  0DE8               	rlf	___fttol@lval+1,f
  1381  0139  0DE9               	rlf	___fttol@lval+2,f
  1382  013A  0DEA               	rlf	___fttol@lval+3,f
  1383  013B  03EB               	decf	___fttol@exp1,f
  1384  013C  2933               	goto	l4669
  1385  013D                     l4671:	
  1386  013D  0866               	movf	___fttol@sign1,w
  1387  013E  1903               	btfsc	3,2
  1388  013F  294B               	goto	l4675
  1389  0140  09E7               	comf	___fttol@lval,f
  1390  0141  09E8               	comf	___fttol@lval+1,f
  1391  0142  09E9               	comf	___fttol@lval+2,f
  1392  0143  09EA               	comf	___fttol@lval+3,f
  1393  0144  0AE7               	incf	___fttol@lval,f
  1394  0145  1903               	skipnz
  1395  0146  0AE8               	incf	___fttol@lval+1,f
  1396  0147  1903               	skipnz
  1397  0148  0AE9               	incf	___fttol@lval+2,f
  1398  0149  1903               	skipnz
  1399  014A  0AEA               	incf	___fttol@lval+3,f
  1400  014B                     l4675:	
  1401  014B  086A               	movf	___fttol@lval+3,w
  1402  014C  00E2               	movwf	?___fttol+3
  1403  014D  0869               	movf	___fttol@lval+2,w
  1404  014E  00E1               	movwf	?___fttol+2
  1405  014F  0868               	movf	___fttol@lval+1,w
  1406  0150  00E0               	movwf	?___fttol+1
  1407  0151  0867               	movf	___fttol@lval,w
  1408  0152  00DF               	movwf	?___fttol
  1409  0153  0008               	return
  1410  0154                     __end_of___fttol:	
  1411  0154                     __ptext13:	
  1412 ;; *************** function ___lwtoft *****************
  1413 ;; Defined at:
  1414 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  c               2    3[BANK0 ] unsigned int 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;		None
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  3    3[BANK0 ] float 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 300/0
  1425 ;;		On exit  : 300/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1428 ;;      Params:         0       3       0       0
  1429 ;;      Locals:         0       0       0       0
  1430 ;;      Temps:          0       0       0       0
  1431 ;;      Totals:         0       3       0       0
  1432 ;;Total ram usage:        3 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    2
  1435 ;; This function calls:
  1436 ;;		___ftpack
  1437 ;; This function is called by:
  1438 ;;		_workCtr
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           
  1443                           ;psect for function ___lwtoft
  1444  0154                     ___lwtoft:	
  1445                           
  1446                           ;incstack = 0
  1447                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1448  0154  084D               	movf	___lwtoft@c,w
  1449  0155  00F2               	movwf	___ftpack@arg
  1450  0156  084E               	movf	___lwtoft@c+1,w
  1451  0157  00F3               	movwf	___ftpack@arg+1
  1452  0158  308E               	movlw	142
  1453  0159  01F4               	clrf	___ftpack@arg+2
  1454  015A  00F5               	movwf	___ftpack@exp
  1455  015B  01F6               	clrf	___ftpack@sign
  1456  015C  2164               	fcall	___ftpack
  1457  015D  0872               	movf	?___ftpack,w
  1458  015E  00CD               	movwf	?___lwtoft
  1459  015F  0873               	movf	?___ftpack+1,w
  1460  0160  00CE               	movwf	?___lwtoft+1
  1461  0161  0874               	movf	?___ftpack+2,w
  1462  0162  00CF               	movwf	?___lwtoft+2
  1463  0163  0008               	return
  1464  0164                     __end_of___lwtoft:	
  1465  0164                     __ptext16:	
  1466 ;; *************** function ___ftpack *****************
  1467 ;; Defined at:
  1468 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  arg             3    2[COMMON] unsigned um
  1471 ;;  exp             1    5[COMMON] unsigned char 
  1472 ;;  sign            1    6[COMMON] unsigned char 
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  3    2[COMMON] float 
  1477 ;; Registers used:
  1478 ;;		wreg, status,2, status,0
  1479 ;; Tracked objects:
  1480 ;;		On entry : 300/0
  1481 ;;		On exit  : 300/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1484 ;;      Params:         5       0       0       0
  1485 ;;      Locals:         0       0       0       0
  1486 ;;      Temps:          0       3       0       0
  1487 ;;      Totals:         5       3       0       0
  1488 ;;Total ram usage:        8 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    1
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		___ftdiv
  1495 ;;		___lwtoft
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           
  1500                           ;psect for function ___ftpack
  1501  0164                     ___ftpack:	
  1502                           
  1503                           ;incstack = 0
  1504                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1505  0164  0875               	movf	___ftpack@exp,w
  1506  0165  1903               	btfsc	3,2
  1507  0166  296C               	goto	l1533
  1508  0167  0874               	movf	___ftpack@arg+2,w
  1509  0168  0473               	iorwf	___ftpack@arg+1,w
  1510  0169  0472               	iorwf	___ftpack@arg,w
  1511  016A  1D03               	skipz
  1512  016B  2973               	goto	l4213
  1513  016C                     l1533:	
  1514  016C  01F2               	clrf	?___ftpack
  1515  016D  01F3               	clrf	?___ftpack+1
  1516  016E  01F4               	clrf	?___ftpack+2
  1517  016F  0008               	return
  1518  0170                     l4211:	
  1519  0170  0AF5               	incf	___ftpack@exp,f
  1520  0171  2404  118A         	fcall	PL40	;call to abstracted procedure
  1521  0173                     l4213:	
  1522  0173  30FE               	movlw	254
  1523  0174  0574               	andwf	___ftpack@arg+2,w
  1524  0175  1903               	btfsc	3,2
  1525  0176  2980               	goto	l4217
  1526  0177  2970               	goto	l4211
  1527  0178                     l4215:	
  1528  0178  0AF5               	incf	___ftpack@exp,f
  1529  0179  0AF2               	incf	___ftpack@arg,f
  1530  017A  1903               	skipnz
  1531  017B  0AF3               	incf	___ftpack@arg+1,f
  1532  017C  1903               	skipnz
  1533  017D  0AF4               	incf	___ftpack@arg+2,f
  1534  017E  2404  118A         	fcall	PL40	;call to abstracted procedure
  1535  0180                     l4217:	
  1536  0180  30FF               	movlw	255
  1537  0181  0574               	andwf	___ftpack@arg+2,w
  1538  0182  1903               	btfsc	3,2
  1539  0183  298E               	goto	l4221
  1540  0184  2978               	goto	l4215
  1541  0185                     l4223:	
  1542  0185  3002               	movlw	2
  1543  0186  0275               	subwf	___ftpack@exp,w
  1544  0187  1C03               	btfss	3,0
  1545  0188  2990               	goto	l1545
  1546  0189  03F5               	decf	___ftpack@exp,f
  1547  018A  1003               	clrc
  1548  018B  0DF2               	rlf	___ftpack@arg,f
  1549  018C  0DF3               	rlf	___ftpack@arg+1,f
  1550  018D  0DF4               	rlf	___ftpack@arg+2,f
  1551  018E                     l4221:	
  1552  018E  1FF3               	btfss	___ftpack@arg+1,7
  1553  018F  2985               	goto	l4223
  1554  0190                     l1545:	
  1555  0190  1C75               	btfss	___ftpack@exp,0
  1556  0191  13F3               	bcf	___ftpack@arg+1,7
  1557  0192  1003               	clrc
  1558  0193  0CF5               	rrf	___ftpack@exp,f
  1559  0194  0875               	movf	___ftpack@exp,w
  1560  0195  00CC               	movwf	??___ftpack+2
  1561  0196  01CB               	clrf	??___ftpack+1
  1562  0197  01CA               	clrf	??___ftpack
  1563  0198  084A               	movf	??___ftpack,w
  1564  0199  04F2               	iorwf	___ftpack@arg,f
  1565  019A  084B               	movf	??___ftpack+1,w
  1566  019B  04F3               	iorwf	___ftpack@arg+1,f
  1567  019C  084C               	movf	??___ftpack+2,w
  1568  019D  04F4               	iorwf	___ftpack@arg+2,f
  1569  019E  0876               	movf	___ftpack@sign,w
  1570  019F  1D03               	btfss	3,2
  1571  01A0  17F4               	bsf	___ftpack@arg+2,7
  1572  01A1  0008               	return
  1573  01A2                     __end_of___ftpack:	
  1574  01A2                     __ptext11:	
  1575 ;; *************** function _ADC_Sample *****************
  1576 ;; Defined at:
  1577 ;;		line 323 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  adch            1    wreg     unsigned char 
  1580 ;;  adldo           1    2[COMMON] unsigned char 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  adch            1    1[BANK0 ] unsigned char 
  1583 ;;  j               1    0[BANK0 ] unsigned char 
  1584 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1585 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1586 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1587 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1588 ;;  i               1    2[BANK0 ] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      unsigned char 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, status,0
  1593 ;; Tracked objects:
  1594 ;;		On entry : 200/0
  1595 ;;		On exit  : 300/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1598 ;;      Params:         1       0       0       0
  1599 ;;      Locals:         0      13       0       0
  1600 ;;      Temps:          4       0       0       0
  1601 ;;      Totals:         5      13       0       0
  1602 ;;Total ram usage:       18 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_fanCtr
  1609 ;;		_workCtr
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _ADC_Sample
  1615  01A2                     _ADC_Sample:	
  1616                           
  1617                           ;incstack = 0
  1618                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1619                           ;ADC_Sample@adch stored from wreg
  1620  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1621  01A3  00CB               	movwf	ADC_Sample@adch
  1622                           
  1623                           ;main.c: 325: volatile unsigned long adsum = 0;
  1624                           
  1625                           ;main.c: 326: volatile unsigned int admin = 0, admax = 0;
  1626  01A4  23F4  118A         	fcall	PL16	;call to abstracted procedure
  1627                           
  1628                           ;main.c: 327: volatile unsigned int ad_temp = 0;
  1629  01A6  01D5               	clrf	ADC_Sample@ad_temp	;volatile
  1630  01A7  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1631                           
  1632                           ;main.c: 329: if ((!LDO_EN) && (adldo & 0x04) )
  1633  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  1634  01A9  1D16               	btfss	22,2	;volatile
  1635  01AA  1D72               	btfss	ADC_Sample@adldo,2
  1636  01AB  29B4               	goto	l4099
  1637                           
  1638                           ;main.c: 330: {
  1639                           ;main.c: 332: ADCON1 = adldo;
  1640  01AC  0872               	movf	ADC_Sample@adldo,w
  1641  01AD  0096               	movwf	22	;volatile
  1642                           
  1643                           ;main.c: 333: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1644  01AE  3042               	movlw	66
  1645  01AF  00F3               	movwf	??_ADC_Sample
  1646  01B0                     u5177:	
  1647  01B0  0BF3               	decfsz	??_ADC_Sample,f
  1648  01B1  29B0               	goto	u5177
  1649  01B2  0000               	nop
  1650                           
  1651                           ;main.c: 334: }
  1652  01B3  29B6               	goto	l4101
  1653  01B4                     l4099:	
  1654                           
  1655                           ;main.c: 335: else
  1656                           ;main.c: 336: ADCON1 = adldo;
  1657  01B4  0872               	movf	ADC_Sample@adldo,w
  1658  01B5  0096               	movwf	22	;volatile
  1659  01B6                     l4101:	
  1660                           
  1661                           ;main.c: 338: if(adch & 0x10)
  1662  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1663  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1664  01B8  1E4B               	btfss	ADC_Sample@adch,4
  1665  01B9  29BF               	goto	l4109
  1666                           
  1667                           ;main.c: 339: {
  1668                           ;main.c: 340: CHS4 = 1;
  1669  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  1670  01BB  1716               	bsf	22,6	;volatile
  1671                           
  1672                           ;main.c: 341: adch &= 0x0f;
  1673  01BC  300F               	movlw	15
  1674  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1675  01BE  05CB               	andwf	ADC_Sample@adch,f
  1676  01BF                     l4109:	
  1677                           
  1678                           ;main.c: 344: for (i = 0; i < 10; i++)
  1679  01BF  01CC               	clrf	ADC_Sample@i
  1680  01C0                     l4115:	
  1681                           
  1682                           ;main.c: 345: {
  1683                           ;main.c: 346: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1684  01C0  084B               	movf	ADC_Sample@adch,w
  1685  01C1  00F3               	movwf	??_ADC_Sample
  1686  01C2  3001               	movlw	1
  1687  01C3  1003               	clrc
  1688  01C4                     L4:	
  1689  01C4  0DF3               	rlf	??_ADC_Sample,f
  1690  01C5  3EFF               	addlw	-1
  1691  01C6  1003               	clrc
  1692  01C7  1D03               	skipz
  1693  01C8  29C4               	goto	L4
  1694  01C9  0D73               	rlf	??_ADC_Sample,w
  1695  01CA  3841               	iorlw	65
  1696  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1697  01CC  0095               	movwf	21	;volatile
  1698  01CD  0000               	nop	;# 
  1699  01CE  0000               	nop	;# 
  1700  01CF  0000               	nop	;# 
  1701  01D0  0000               	nop	;# 
  1702                           
  1703                           ;main.c: 351: GODONE = 1;
  1704  01D1  1683               	bsf	3,5	;RP0=1, select bank1
  1705  01D2  1303               	bcf	3,6	;RP1=0, select bank1
  1706  01D3  1495               	bsf	21,1	;volatile
  1707                           
  1708                           ;main.c: 353: unsigned char j = 0;
  1709  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1710  01D5  01CA               	clrf	ADC_Sample@j
  1711  01D6                     l999:	
  1712                           ;main.c: 354: while (GODONE)
  1713                           
  1714  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  1715  01D7  1C95               	btfss	21,1	;volatile
  1716  01D8  29E0               	goto	l4125
  1717                           
  1718                           ;main.c: 355: {
  1719                           ;main.c: 356: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1720  01D9  29DA               	nop2	;2 cycle nop
  1721  01DA  29DB               	nop2	;2 cycle nop
  1722                           
  1723                           ;main.c: 358: if (0 == (--j))
  1724  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1725  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1726  01DD  0BCA               	decfsz	ADC_Sample@j,f
  1727  01DE  29D6               	goto	l999
  1728                           
  1729                           ;main.c: 359: return 0;
  1730  01DF  3400               	retlw	0
  1731  01E0                     l4125:	
  1732                           
  1733                           ;main.c: 360: }
  1734                           ;main.c: 362: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1735  01E0  0819               	movf	25,w	;volatile
  1736  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1737  01E2  00D5               	movwf	ADC_Sample@ad_temp	;volatile
  1738  01E3  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1739  01E4  0ED5               	swapf	ADC_Sample@ad_temp,f	;volatile
  1740  01E5  0ED6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1741  01E6  30F0               	movlw	240
  1742  01E7  05D6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1743  01E8  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1744  01E9  390F               	andlw	15
  1745  01EA  04D6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1746  01EB  30F0               	movlw	240
  1747  01EC  05D5               	andwf	ADC_Sample@ad_temp,f	;volatile
  1748  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  1749  01EE  0E18               	swapf	24,w	;volatile
  1750  01EF  390F               	andlw	15
  1751  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1752  01F1  07D5               	addwf	ADC_Sample@ad_temp,f	;volatile
  1753  01F2  1803               	skipnc
  1754  01F3  0AD6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1755                           
  1756                           ;main.c: 364: if (0 == admax)
  1757  01F4  0853               	movf	ADC_Sample@admax,w	;volatile
  1758  01F5  0454               	iorwf	ADC_Sample@admax+1,w	;volatile
  1759  01F6  1D03               	btfss	3,2
  1760  01F7  29FB               	goto	l4133
  1761                           
  1762                           ;main.c: 365: {
  1763                           ;main.c: 366: admax = ad_temp;
  1764  01F8  2409  118A         	fcall	PL44	;call to abstracted procedure
  1765  01FA  2A0E               	goto	l4139
  1766  01FB                     l4133:	
  1767                           ;main.c: 368: }
  1768                           
  1769                           ;main.c: 367: admin = ad_temp;
  1770                           
  1771                           
  1772                           ;main.c: 369: else if (ad_temp > admax)
  1773  01FB  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1774  01FC  0254               	subwf	ADC_Sample@admax+1,w	;volatile
  1775  01FD  1D03               	skipz
  1776  01FE  2A01               	goto	u3925
  1777  01FF  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1778  0200  0253               	subwf	ADC_Sample@admax,w	;volatile
  1779  0201                     u3925:	
  1780  0201  1803               	skipnc
  1781  0202  2A06               	goto	l4137
  1782                           
  1783                           ;main.c: 370: admax = ad_temp;
  1784  0203  2409  118A         	fcall	PL44	;call to abstracted procedure
  1785  0205  2A12               	goto	l1005
  1786  0206                     l4137:	
  1787                           
  1788                           ;main.c: 371: else if (ad_temp < admin)
  1789  0206  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1790  0207  0256               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1791  0208  1D03               	skipz
  1792  0209  2A0C               	goto	u3935
  1793  020A  0851               	movf	ADC_Sample@admin,w	;volatile
  1794  020B  0255               	subwf	ADC_Sample@ad_temp,w	;volatile
  1795  020C                     u3935:	
  1796  020C  1803               	skipnc
  1797  020D  2A12               	goto	l1005
  1798  020E                     l4139:	
  1799                           
  1800                           ;main.c: 372: admin = ad_temp;
  1801  020E  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1802  020F  00D2               	movwf	ADC_Sample@admin+1	;volatile
  1803  0210  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1804  0211  00D1               	movwf	ADC_Sample@admin	;volatile
  1805  0212                     l1005:	
  1806                           
  1807                           ;main.c: 374: adsum += ad_temp;
  1808  0212  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1809  0213  00F3               	movwf	??_ADC_Sample
  1810  0214  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1811  0215  00F4               	movwf	??_ADC_Sample+1
  1812  0216  01F5               	clrf	??_ADC_Sample+2
  1813  0217  01F6               	clrf	??_ADC_Sample+3
  1814  0218  0873               	movf	??_ADC_Sample,w
  1815  0219  07CD               	addwf	ADC_Sample@adsum,f	;volatile
  1816  021A  0874               	movf	??_ADC_Sample+1,w
  1817  021B  1103               	clrz
  1818  021C  1803               	skipnc
  1819  021D  3E01               	addlw	1
  1820  021E  1D03               	btfss	3,2
  1821  021F  07CE               	addwf	ADC_Sample@adsum+1,f	;volatile
  1822  0220  0875               	movf	??_ADC_Sample+2,w
  1823  0221  1103               	clrz
  1824  0222  1803               	skipnc
  1825  0223  3E01               	addlw	1
  1826  0224  1D03               	btfss	3,2
  1827  0225  07CF               	addwf	ADC_Sample@adsum+2,f	;volatile
  1828  0226  0876               	movf	??_ADC_Sample+3,w
  1829  0227  1103               	clrz
  1830  0228  1803               	skipnc
  1831  0229  3E01               	addlw	1
  1832  022A  1D03               	btfss	3,2
  1833  022B  07D0               	addwf	ADC_Sample@adsum+3,f	;volatile
  1834  022C  300A               	movlw	10
  1835  022D  0ACC               	incf	ADC_Sample@i,f
  1836  022E  024C               	subwf	ADC_Sample@i,w
  1837  022F  1C03               	skipc
  1838  0230  29C0               	goto	l4115
  1839                           
  1840                           ;main.c: 375: }
  1841                           ;main.c: 376: adsum -= admax;
  1842  0231  0853               	movf	ADC_Sample@admax,w	;volatile
  1843  0232  00F3               	movwf	??_ADC_Sample
  1844  0233  0854               	movf	ADC_Sample@admax+1,w	;volatile
  1845  0234  23E5  118A         	fcall	PL6	;call to abstracted procedure
  1846  0236  1C03               	skipc
  1847  0237  0F76               	incfsz	??_ADC_Sample+3,w
  1848  0238  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1849                           
  1850                           ;main.c: 377: if (adsum >= admin)
  1851  0239  0851               	movf	ADC_Sample@admin,w	;volatile
  1852  023A  00F3               	movwf	??_ADC_Sample
  1853  023B  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1854  023C  00F4               	movwf	??_ADC_Sample+1
  1855  023D  01F5               	clrf	??_ADC_Sample+2
  1856  023E  01F6               	clrf	??_ADC_Sample+3
  1857  023F  0876               	movf	??_ADC_Sample+3,w
  1858  0240  0250               	subwf	ADC_Sample@adsum+3,w	;volatile
  1859  0241  1D03               	skipz
  1860  0242  2A4D               	goto	u3975
  1861  0243  0875               	movf	??_ADC_Sample+2,w
  1862  0244  024F               	subwf	ADC_Sample@adsum+2,w	;volatile
  1863  0245  1D03               	skipz
  1864  0246  2A4D               	goto	u3975
  1865  0247  0874               	movf	??_ADC_Sample+1,w
  1866  0248  024E               	subwf	ADC_Sample@adsum+1,w	;volatile
  1867  0249  1D03               	skipz
  1868  024A  2A4D               	goto	u3975
  1869  024B  0873               	movf	??_ADC_Sample,w
  1870  024C  024D               	subwf	ADC_Sample@adsum,w	;volatile
  1871  024D                     u3975:	
  1872  024D  1C03               	skipc
  1873  024E  2A58               	goto	l1009
  1874                           
  1875                           ;main.c: 378: adsum -= admin;
  1876  024F  0851               	movf	ADC_Sample@admin,w	;volatile
  1877  0250  00F3               	movwf	??_ADC_Sample
  1878  0251  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1879  0252  23E5  118A         	fcall	PL6	;call to abstracted procedure
  1880  0254  1C03               	skipc
  1881  0255  0F76               	incfsz	??_ADC_Sample+3,w
  1882  0256  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1883  0257  2A5C               	goto	l4149
  1884  0258                     l1009:	
  1885                           
  1886                           ;main.c: 379: else
  1887                           ;main.c: 380: adsum = 0;
  1888  0258  01CD               	clrf	ADC_Sample@adsum	;volatile
  1889  0259  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  1890  025A  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  1891  025B  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  1892  025C                     l4149:	
  1893                           
  1894                           ;main.c: 382: adresult = adsum >> 3;
  1895  025C  084D               	movf	ADC_Sample@adsum,w	;volatile
  1896  025D  00F3               	movwf	??_ADC_Sample
  1897  025E  084E               	movf	ADC_Sample@adsum+1,w	;volatile
  1898  025F  00F4               	movwf	??_ADC_Sample+1
  1899  0260  084F               	movf	ADC_Sample@adsum+2,w	;volatile
  1900  0261  00F5               	movwf	??_ADC_Sample+2
  1901  0262  0850               	movf	ADC_Sample@adsum+3,w	;volatile
  1902  0263  00F6               	movwf	??_ADC_Sample+3
  1903  0264  3003               	movlw	3
  1904  0265                     u3995:	
  1905  0265  1003               	clrc
  1906  0266  0CF6               	rrf	??_ADC_Sample+3,f
  1907  0267  0CF5               	rrf	??_ADC_Sample+2,f
  1908  0268  0CF4               	rrf	??_ADC_Sample+1,f
  1909  0269  0CF3               	rrf	??_ADC_Sample,f
  1910  026A  3EFF               	addlw	-1
  1911  026B  1D03               	skipz
  1912  026C  2A65               	goto	u3995
  1913  026D  0874               	movf	??_ADC_Sample+1,w
  1914  026E  00C9               	movwf	_adresult+1	;volatile
  1915  026F  0873               	movf	??_ADC_Sample,w
  1916  0270  00C8               	movwf	_adresult	;volatile
  1917                           
  1918                           ;main.c: 384: adsum = 0;
  1919                           
  1920                           ;main.c: 385: admin = 0;
  1921                           
  1922                           ;main.c: 386: admax = 0;
  1923  0271  23F4               	fcall	PL16	;call to abstracted procedure
  1924                           
  1925                           ;main.c: 387: return 0xA5;
  1926  0272  34A5               	retlw	165
  1927  0273                     __end_of_ADC_Sample:	
  1928  0273                     __ptext7:	
  1929 ;; *************** function _fanCtr *****************
  1930 ;; Defined at:
  1931 ;;		line 536 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1936 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 300/100
  1943 ;;		On exit  : 200/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       0       0       0
  1947 ;;      Locals:         0       5       0       0
  1948 ;;      Temps:          0       0       0       0
  1949 ;;      Totals:         0       5       0       0
  1950 ;;Total ram usage:        5 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    2
  1953 ;; This function calls:
  1954 ;;		_ADC_Sample
  1955 ;;		___lmul
  1956 ;;		_fanInit
  1957 ;;		_fanStop
  1958 ;; This function is called by:
  1959 ;;		_workCtr
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _fanCtr
  1965  0273                     _fanCtr:	
  1966                           
  1967                           ;main.c: 538: if(workStep > 0)
  1968                           
  1969                           ;incstack = 0
  1970                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1971  0273  087B               	movf	_workStep,w
  1972  0274  1903               	btfsc	3,2
  1973  0275  2AD9               	goto	l4425
  1974                           
  1975                           ;main.c: 539: {
  1976                           ;main.c: 540: PORTA |= 0x02;
  1977  0276  1486               	bsf	6,1	;volatile
  1978                           
  1979                           ;main.c: 541: unsigned char maxFanValue = 52;
  1980  0277  3034               	movlw	52
  1981  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0279  00D7               	movwf	fanCtr@maxFanValue
  1983                           
  1984                           ;main.c: 542: if(workStep == 1)
  1985  027A  0B7B               	decfsz	_workStep,w
  1986  027B  2A7E               	goto	l4389
  1987                           
  1988                           ;main.c: 543: {
  1989                           ;main.c: 544: maxFanValue = 40;
  1990  027C  3028               	movlw	40
  1991  027D  2A83               	goto	L3
  1992  027E                     l4389:	
  1993                           ;main.c: 545: }
  1994                           
  1995                           
  1996                           ;main.c: 546: else if(workStep == 3)
  1997  027E  3003               	movlw	3
  1998  027F  067B               	xorwf	_workStep,w
  1999  0280  1D03               	btfss	3,2
  2000  0281  2A84               	goto	l4393
  2001                           
  2002                           ;main.c: 547: {
  2003                           ;main.c: 548: maxFanValue = 10;
  2004  0282  300A               	movlw	10
  2005  0283                     L3:	
  2006  0283  00D7               	movwf	fanCtr@maxFanValue
  2007  0284                     l4393:	
  2008  0284  3002               	movlw	2
  2009                           
  2010                           ;main.c: 549: }
  2011                           ;main.c: 550: test_adc = ADC_Sample(2, 0);
  2012  0285  01F2               	clrf	ADC_Sample@adldo
  2013  0286  21A2  118A         	fcall	_ADC_Sample
  2014  0288  00B5               	movwf	_test_adc	;volatile
  2015                           
  2016                           ;main.c: 551: if (0xA5 == test_adc)
  2017  0289  30A5               	movlw	165
  2018  028A  0635               	xorwf	_test_adc,w	;volatile
  2019  028B  1D03               	btfss	3,2
  2020  028C  2AB7               	goto	l4405
  2021                           
  2022                           ;main.c: 552: {
  2023                           ;main.c: 553: volatile unsigned long fan_temp;
  2024                           ;main.c: 554: if(power_ad > 0)
  2025  028D  0824               	movf	_power_ad,w	;volatile
  2026  028E  0425               	iorwf	_power_ad+1,w	;volatile
  2027  028F  1903               	btfsc	3,2
  2028  0290  2AB7               	goto	l4405
  2029                           
  2030                           ;main.c: 555: {
  2031                           ;main.c: 556: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2032  0291  0848               	movf	_adresult,w	;volatile
  2033  0292  00CA               	movwf	___lmul@multiplier
  2034  0293  0849               	movf	_adresult+1,w	;volatile
  2035  0294  00CB               	movwf	___lmul@multiplier+1
  2036  0295  01CC               	clrf	___lmul@multiplier+2
  2037  0296  01CD               	clrf	___lmul@multiplier+3
  2038  0297  0824               	movf	_power_ad,w	;volatile
  2039  0298  00CE               	movwf	___lmul@multiplicand
  2040  0299  0825               	movf	_power_ad+1,w	;volatile
  2041  029A  00CF               	movwf	___lmul@multiplicand+1
  2042  029B  01D0               	clrf	___lmul@multiplicand+2
  2043  029C  01D1               	clrf	___lmul@multiplicand+3
  2044  029D  22DF  118A         	fcall	___lmul
  2045  029F  084D               	movf	?___lmul+3,w
  2046  02A0  00DB               	movwf	fanCtr@fan_temp+3	;volatile
  2047  02A1  084C               	movf	?___lmul+2,w
  2048  02A2  00DA               	movwf	fanCtr@fan_temp+2	;volatile
  2049  02A3  084B               	movf	?___lmul+1,w
  2050  02A4  00D9               	movwf	fanCtr@fan_temp+1	;volatile
  2051  02A5  084A               	movf	?___lmul,w
  2052  02A6  00D8               	movwf	fanCtr@fan_temp	;volatile
  2053  02A7  300C               	movlw	12
  2054  02A8                     u4415:	
  2055  02A8  1003               	clrc
  2056  02A9  0CDB               	rrf	fanCtr@fan_temp+3,f	;volatile
  2057  02AA  0CDA               	rrf	fanCtr@fan_temp+2,f	;volatile
  2058  02AB  0CD9               	rrf	fanCtr@fan_temp+1,f	;volatile
  2059  02AC  0CD8               	rrf	fanCtr@fan_temp,f	;volatile
  2060  02AD  3EFF               	addlw	-1
  2061  02AE  1D03               	skipz
  2062  02AF  2AA8               	goto	u4415
  2063                           
  2064                           ;main.c: 557: fanValue = (unsigned int)(fan_temp);
  2065  02B0  0859               	movf	fanCtr@fan_temp+1,w	;volatile
  2066  02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2067  02B2  00C8               	movwf	(_fanValue+1)^(0+128)
  2068  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2069  02B4  0858               	movf	fanCtr@fan_temp,w	;volatile
  2070  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2071  02B6  00C7               	movwf	_fanValue^(0+128)
  2072  02B7                     l4405:	
  2073                           
  2074                           ;main.c: 558: }
  2075                           ;main.c: 559: }
  2076                           ;main.c: 560: if(fanValue > 1300)
  2077  02B7  3005               	movlw	5
  2078  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2079  02B9  0248               	subwf	(_fanValue+1)^(0+128),w
  2080  02BA  3015               	movlw	21
  2081  02BB  1903               	skipnz
  2082  02BC  0247               	subwf	_fanValue^(0+128),w
  2083  02BD  1C03               	skipc
  2084  02BE  2ACC               	goto	l4413
  2085                           
  2086                           ;main.c: 561: {
  2087                           ;main.c: 562: if(++fanOverTime > 50)
  2088  02BF  3033               	movlw	51
  2089  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  2090  02C1  0AC2               	incf	_fanOverTime,f
  2091  02C2  0242               	subwf	_fanOverTime,w
  2092  02C3  1C03               	skipc
  2093  02C4  2ACE               	goto	l4415
  2094  02C5  30C2               	movlw	194
  2095                           
  2096                           ;main.c: 563: {
  2097                           ;main.c: 564: fanOverTime = 0;
  2098  02C6  01C2               	clrf	_fanOverTime
  2099                           
  2100                           ;main.c: 565: workStep = 0;
  2101  02C7  01FB               	clrf	_workStep
  2102                           
  2103                           ;main.c: 566: shanshuoTime = 450;
  2104  02C8  00AC               	movwf	_shanshuoTime
  2105  02C9  3001               	movlw	1
  2106  02CA  00AD               	movwf	_shanshuoTime+1
  2107  02CB  2ACE               	goto	l4415
  2108  02CC                     l4413:	
  2109                           
  2110                           ;main.c: 569: else
  2111                           ;main.c: 570: {
  2112                           ;main.c: 571: fanOverTime = 0;
  2113  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2114  02CD  01C2               	clrf	_fanOverTime
  2115  02CE                     l4415:	
  2116                           
  2117                           ;main.c: 572: }
  2118                           ;main.c: 573: if(fanDuty < maxFanValue)
  2119  02CE  0857               	movf	fanCtr@maxFanValue,w
  2120  02CF  0244               	subwf	_fanDuty,w
  2121  02D0  1803               	skipnc
  2122  02D1  2AD4               	goto	l4419
  2123                           
  2124                           ;main.c: 574: {
  2125                           ;main.c: 575: fanDuty++;
  2126  02D2  0AC4               	incf	_fanDuty,f
  2127                           
  2128                           ;main.c: 576: }
  2129  02D3  2AD8               	goto	l4423
  2130  02D4                     l4419:	
  2131                           
  2132                           ;main.c: 577: else if(fanDuty > maxFanValue)
  2133  02D4  0844               	movf	_fanDuty,w
  2134  02D5  0257               	subwf	fanCtr@maxFanValue,w
  2135  02D6  1C03               	btfss	3,0
  2136                           
  2137                           ;main.c: 578: {
  2138                           ;main.c: 579: fanDuty--;
  2139  02D7  03C4               	decf	_fanDuty,f
  2140  02D8                     l4423:	
  2141                           
  2142                           ;main.c: 580: }
  2143                           ;main.c: 581: fanInit();
  2144  02D8  2BAB               	ljmp	l4177
  2145  02D9                     l4425:	
  2146                           ;main.c: 582: }
  2147                           
  2148                           
  2149                           ;main.c: 583: else
  2150                           ;main.c: 584: {
  2151                           ;main.c: 585: fanStop();
  2152  02D9  23B6               	fcall	_fanStop
  2153                           
  2154                           ;main.c: 586: fanDuty = 0;
  2155  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  2156  02DB  01C4               	clrf	_fanDuty
  2157                           
  2158                           ;main.c: 587: PORTA &= 0xFD;
  2159  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  2160  02DD  1086               	bcf	6,1	;volatile
  2161  02DE  0008               	return
  2162  02DF                     __end_of_fanCtr:	
  2163  02DF                     __ptext10:	
  2164 ;; *************** function ___lmul *****************
  2165 ;; Defined at:
  2166 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2169 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  product         4    2[COMMON] unsigned long 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  4    0[BANK0 ] unsigned long 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2, status,0
  2176 ;; Tracked objects:
  2177 ;;		On entry : 300/0
  2178 ;;		On exit  : 300/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2181 ;;      Params:         0       8       0       0
  2182 ;;      Locals:         4       0       0       0
  2183 ;;      Temps:          0       0       0       0
  2184 ;;      Totals:         4       8       0       0
  2185 ;;Total ram usage:       12 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    1
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_fanCtr
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           
  2196                           ;psect for function ___lmul
  2197  02DF                     ___lmul:	
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2201  02DF  01F2               	clrf	___lmul@product
  2202  02E0  01F3               	clrf	___lmul@product+1
  2203  02E1  01F4               	clrf	___lmul@product+2
  2204  02E2  01F5               	clrf	___lmul@product+3
  2205  02E3                     l1388:	
  2206  02E3  1C4A               	btfss	___lmul@multiplier,0
  2207  02E4  2AF9               	goto	l4199
  2208  02E5  084E               	movf	___lmul@multiplicand,w
  2209  02E6  07F2               	addwf	___lmul@product,f
  2210  02E7  084F               	movf	___lmul@multiplicand+1,w
  2211  02E8  1103               	clrz
  2212  02E9  1803               	skipnc
  2213  02EA  3E01               	addlw	1
  2214  02EB  1D03               	btfss	3,2
  2215  02EC  07F3               	addwf	___lmul@product+1,f
  2216  02ED  0850               	movf	___lmul@multiplicand+2,w
  2217  02EE  1103               	clrz
  2218  02EF  1803               	skipnc
  2219  02F0  3E01               	addlw	1
  2220  02F1  1D03               	btfss	3,2
  2221  02F2  07F4               	addwf	___lmul@product+2,f
  2222  02F3  0851               	movf	___lmul@multiplicand+3,w
  2223  02F4  1103               	clrz
  2224  02F5  1803               	skipnc
  2225  02F6  3E01               	addlw	1
  2226  02F7  1D03               	btfss	3,2
  2227  02F8  07F5               	addwf	___lmul@product+3,f
  2228  02F9                     l4199:	
  2229  02F9  1003               	clrc
  2230  02FA  0DCE               	rlf	___lmul@multiplicand,f
  2231  02FB  0DCF               	rlf	___lmul@multiplicand+1,f
  2232  02FC  0DD0               	rlf	___lmul@multiplicand+2,f
  2233  02FD  0DD1               	rlf	___lmul@multiplicand+3,f
  2234  02FE  1003               	clrc
  2235  02FF  0CCD               	rrf	___lmul@multiplier+3,f
  2236  0300  0CCC               	rrf	___lmul@multiplier+2,f
  2237  0301  0CCB               	rrf	___lmul@multiplier+1,f
  2238  0302  0CCA               	rrf	___lmul@multiplier,f
  2239  0303  084D               	movf	___lmul@multiplier+3,w
  2240  0304  044C               	iorwf	___lmul@multiplier+2,w
  2241  0305  044B               	iorwf	___lmul@multiplier+1,w
  2242  0306  044A               	iorwf	___lmul@multiplier,w
  2243  0307  1D03               	skipz
  2244  0308  2AE3               	goto	l1388
  2245  0309  0875               	movf	___lmul@product+3,w
  2246  030A  00CD               	movwf	?___lmul+3
  2247  030B  0874               	movf	___lmul@product+2,w
  2248  030C  00CC               	movwf	?___lmul+2
  2249  030D  0873               	movf	___lmul@product+1,w
  2250  030E  00CB               	movwf	?___lmul+1
  2251  030F  0872               	movf	___lmul@product,w
  2252  0310  00CA               	movwf	?___lmul
  2253  0311  0008               	return
  2254  0312                     __end_of___lmul:	
  2255  0312                     __ptext5:	
  2256 ;; *************** function _keyLedCtr *****************
  2257 ;; Defined at:
  2258 ;;		line 422 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, status,0, pclath, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 300/100
  2269 ;;		On exit  : 300/100
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2272 ;;      Params:         0       0       0       0
  2273 ;;      Locals:         0       0       0       0
  2274 ;;      Temps:          0       0       0       0
  2275 ;;      Totals:         0       0       0       0
  2276 ;;Total ram usage:        0 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    2
  2279 ;; This function calls:
  2280 ;;		___lwmod
  2281 ;; This function is called by:
  2282 ;;		_workCtr
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           
  2287                           ;psect for function _keyLedCtr
  2288  0312                     _keyLedCtr:	
  2289                           
  2290                           ;main.c: 424: if(shanshuoTime > 0)
  2291                           
  2292                           ;incstack = 0
  2293                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2294  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0313  082C               	movf	_shanshuoTime,w
  2296  0314  042D               	iorwf	_shanshuoTime+1,w
  2297  0315  1903               	btfsc	3,2
  2298  0316  2B30               	goto	l4345
  2299                           
  2300                           ;main.c: 425: {
  2301                           ;main.c: 426: shanshuoTime--;
  2302  0317  3001               	movlw	1
  2303  0318  02AC               	subwf	_shanshuoTime,f
  2304  0319  3000               	movlw	0
  2305  031A  1C03               	skipc
  2306  031B  03AD               	decf	_shanshuoTime+1,f
  2307  031C  02AD               	subwf	_shanshuoTime+1,f
  2308                           
  2309                           ;main.c: 427: if((shanshuoTime % 150) < 75)
  2310  031D  3096               	movlw	150
  2311  031E  00F2               	movwf	___lwmod@divisor
  2312  031F  01F3               	clrf	___lwmod@divisor+1
  2313  0320  082D               	movf	_shanshuoTime+1,w
  2314  0321  00F5               	movwf	___lwmod@dividend+1
  2315  0322  082C               	movf	_shanshuoTime,w
  2316  0323  00F4               	movwf	___lwmod@dividend
  2317  0324  2387  118A         	fcall	___lwmod
  2318  0326  3000               	movlw	0
  2319  0327  0273               	subwf	?___lwmod+1,w
  2320  0328  304B               	movlw	75
  2321  0329  1903               	skipnz
  2322  032A  0272               	subwf	?___lwmod,w
  2323  032B  1803               	skipnc
  2324  032C  2B33               	goto	l1022
  2325  032D                     l4343:	
  2326                           
  2327                           ;main.c: 428: {
  2328                           ;main.c: 429: PORTC |= 0x01;
  2329  032D  1703               	bsf	3,6	;RP1=1, select bank2
  2330  032E  1406               	bsf	6,0	;volatile
  2331                           
  2332                           ;main.c: 430: }
  2333  032F  2B35               	goto	l4349
  2334  0330                     l4345:	
  2335                           
  2336                           ;main.c: 436: else if(workStep > 0)
  2337  0330  087B               	movf	_workStep,w
  2338  0331  1903               	btfsc	3,2
  2339  0332  2B2D               	goto	l4343
  2340  0333                     l1022:	
  2341                           
  2342                           ;main.c: 431: else
  2343                           ;main.c: 432: {
  2344                           ;main.c: 433: PORTC &= 0xFE;
  2345  0333  1703               	bsf	3,6	;RP1=1, select bank2
  2346  0334  1006               	bcf	6,0	;volatile
  2347  0335                     l4349:	
  2348                           
  2349                           ;main.c: 443: }
  2350                           ;main.c: 445: if(shanshuoTime2 > 0)
  2351  0335  1303               	bcf	3,6	;RP1=0, select bank0
  2352  0336  082A               	movf	_shanshuoTime2,w
  2353  0337  042B               	iorwf	_shanshuoTime2+1,w
  2354  0338  1903               	btfsc	3,2
  2355  0339  2B53               	goto	l4357
  2356                           
  2357                           ;main.c: 446: {
  2358                           ;main.c: 447: shanshuoTime2--;
  2359  033A  3001               	movlw	1
  2360  033B  02AA               	subwf	_shanshuoTime2,f
  2361  033C  3000               	movlw	0
  2362  033D  1C03               	skipc
  2363  033E  03AB               	decf	_shanshuoTime2+1,f
  2364  033F  02AB               	subwf	_shanshuoTime2+1,f
  2365                           
  2366                           ;main.c: 448: if((shanshuoTime2 % 150) < 75)
  2367  0340  3096               	movlw	150
  2368  0341  00F2               	movwf	___lwmod@divisor
  2369  0342  01F3               	clrf	___lwmod@divisor+1
  2370  0343  082B               	movf	_shanshuoTime2+1,w
  2371  0344  00F5               	movwf	___lwmod@dividend+1
  2372  0345  082A               	movf	_shanshuoTime2,w
  2373  0346  00F4               	movwf	___lwmod@dividend
  2374  0347  2387  118A         	fcall	___lwmod
  2375  0349  3000               	movlw	0
  2376  034A  0273               	subwf	?___lwmod+1,w
  2377  034B  304B               	movlw	75
  2378  034C  1903               	skipnz
  2379  034D  0272               	subwf	?___lwmod,w
  2380  034E  1803               	skipnc
  2381  034F  2B56               	goto	l1028
  2382  0350                     l4355:	
  2383                           
  2384                           ;main.c: 449: {
  2385                           ;main.c: 450: PORTC |= 0x02;
  2386  0350  1703               	bsf	3,6	;RP1=1, select bank2
  2387  0351  1486               	bsf	6,1	;volatile
  2388                           
  2389                           ;main.c: 451: }
  2390  0352  2B58               	goto	l4361
  2391  0353                     l4357:	
  2392                           
  2393                           ;main.c: 457: else if(wuhuaFlag > 0)
  2394  0353  0845               	movf	_wuhuaFlag,w
  2395  0354  1903               	btfsc	3,2
  2396  0355  2B50               	goto	l4355
  2397  0356                     l1028:	
  2398                           
  2399                           ;main.c: 452: else
  2400                           ;main.c: 453: {
  2401                           ;main.c: 454: PORTC &= 0xFD;
  2402  0356  1703               	bsf	3,6	;RP1=1, select bank2
  2403  0357  1086               	bcf	6,1	;volatile
  2404  0358                     l4361:	
  2405                           
  2406                           ;main.c: 464: }
  2407                           ;main.c: 465: if(shanshuoTime3 > 0)
  2408  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0359  0828               	movf	_shanshuoTime3,w
  2410  035A  0429               	iorwf	_shanshuoTime3+1,w
  2411  035B  1903               	btfsc	3,2
  2412  035C  2B79               	goto	l4369
  2413                           
  2414                           ;main.c: 466: {
  2415                           ;main.c: 467: shanshuoTime3--;
  2416  035D  3001               	movlw	1
  2417  035E  02A8               	subwf	_shanshuoTime3,f
  2418  035F  3000               	movlw	0
  2419  0360  1C03               	skipc
  2420  0361  03A9               	decf	_shanshuoTime3+1,f
  2421  0362  02A9               	subwf	_shanshuoTime3+1,f
  2422                           
  2423                           ;main.c: 468: if((shanshuoTime3 % 150) < 75)
  2424  0363  3096               	movlw	150
  2425  0364  00F2               	movwf	___lwmod@divisor
  2426  0365  01F3               	clrf	___lwmod@divisor+1
  2427  0366  0829               	movf	_shanshuoTime3+1,w
  2428  0367  00F5               	movwf	___lwmod@dividend+1
  2429  0368  0828               	movf	_shanshuoTime3,w
  2430  0369  00F4               	movwf	___lwmod@dividend
  2431  036A  2387  118A         	fcall	___lwmod
  2432  036C  3000               	movlw	0
  2433  036D  0273               	subwf	?___lwmod+1,w
  2434  036E  304B               	movlw	75
  2435  036F  1903               	skipnz
  2436  0370  0272               	subwf	?___lwmod,w
  2437  0371  1803               	skipnc
  2438  0372  2B76               	goto	l1034
  2439  0373                     l4367:	
  2440                           
  2441                           ;main.c: 469: {
  2442                           ;main.c: 470: PORTA |= 0x01;
  2443  0373  1683               	bsf	3,5	;RP0=1, select bank1
  2444  0374  1406               	bsf	6,0	;volatile
  2445                           
  2446                           ;main.c: 471: }
  2447  0375  0008               	return
  2448  0376                     l1034:	
  2449                           
  2450                           ;main.c: 472: else
  2451                           ;main.c: 473: {
  2452                           ;main.c: 474: PORTA &= 0xFE;
  2453  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2454  0377  1006               	bcf	6,0	;volatile
  2455  0378  0008               	return
  2456  0379                     l4369:	
  2457                           
  2458                           ;main.c: 477: else if(bujinFlag)
  2459  0379  083B               	movf	_bujinFlag,w
  2460  037A  1D03               	btfss	3,2
  2461  037B  2B76               	goto	l1034
  2462                           
  2463                           ;main.c: 481: else if(chrgFlag)
  2464  037C  0841               	movf	_chrgFlag,w
  2465  037D  1903               	btfsc	3,2
  2466  037E  2B73               	goto	l4367
  2467                           
  2468                           ;main.c: 482: {
  2469                           ;main.c: 483: if(chrgFullFlag || count1s < 50)
  2470  037F  0840               	movf	_chrgFullFlag,w
  2471  0380  1D03               	btfss	3,2
  2472  0381  2B76               	goto	l1034
  2473  0382  3032               	movlw	50
  2474  0383  0246               	subwf	_count1s,w
  2475  0384  1C03               	btfss	3,0
  2476  0385  2B76               	goto	l1034
  2477  0386  2B73               	goto	l4367
  2478  0387                     __end_of_keyLedCtr:	
  2479  0387                     __ptext6:	
  2480 ;; *************** function ___lwmod *****************
  2481 ;; Defined at:
  2482 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  divisor         2    2[COMMON] unsigned int 
  2485 ;;  dividend        2    4[COMMON] unsigned int 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  counter         1    6[COMMON] unsigned char 
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  2    2[COMMON] unsigned int 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, status,0
  2492 ;; Tracked objects:
  2493 ;;		On entry : 300/0
  2494 ;;		On exit  : 300/0
  2495 ;;		Unchanged: 300/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2497 ;;      Params:         4       0       0       0
  2498 ;;      Locals:         1       0       0       0
  2499 ;;      Temps:          0       0       0       0
  2500 ;;      Totals:         5       0       0       0
  2501 ;;Total ram usage:        5 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_keyLedCtr
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           
  2512                           ;psect for function ___lwmod
  2513  0387                     ___lwmod:	
  2514                           
  2515                           ;incstack = 0
  2516                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2517  0387  0872               	movf	___lwmod@divisor,w
  2518  0388  0473               	iorwf	___lwmod@divisor+1,w
  2519  0389  1903               	btfsc	3,2
  2520  038A  2BA6               	goto	l4247
  2521  038B  01F6               	clrf	___lwmod@counter
  2522  038C                     L1:	
  2523  038C  0AF6               	incf	___lwmod@counter,f
  2524  038D  1BF3               	btfsc	___lwmod@divisor+1,7
  2525  038E  2B93               	goto	l4239
  2526  038F  1003               	clrc
  2527  0390  0DF2               	rlf	___lwmod@divisor,f
  2528  0391  0DF3               	rlf	___lwmod@divisor+1,f
  2529  0392  2B8C               	goto	L1
  2530  0393                     l4239:	
  2531  0393  0873               	movf	___lwmod@divisor+1,w
  2532  0394  0275               	subwf	___lwmod@dividend+1,w
  2533  0395  1D03               	skipz
  2534  0396  2B99               	goto	u4135
  2535  0397  0872               	movf	___lwmod@divisor,w
  2536  0398  0274               	subwf	___lwmod@dividend,w
  2537  0399                     u4135:	
  2538  0399  1C03               	skipc
  2539  039A  2BA2               	goto	L2
  2540  039B  0872               	movf	___lwmod@divisor,w
  2541  039C  02F4               	subwf	___lwmod@dividend,f
  2542  039D  0873               	movf	___lwmod@divisor+1,w
  2543  039E  1C03               	skipc
  2544  039F  03F5               	decf	___lwmod@dividend+1,f
  2545  03A0  02F5               	subwf	___lwmod@dividend+1,f
  2546  03A1  1003               	clrc
  2547  03A2                     L2:	
  2548  03A2  0CF3               	rrf	___lwmod@divisor+1,f
  2549  03A3  0CF2               	rrf	___lwmod@divisor,f
  2550  03A4  0BF6               	decfsz	___lwmod@counter,f
  2551  03A5  2B93               	goto	l4239
  2552  03A6                     l4247:	
  2553  03A6  0875               	movf	___lwmod@dividend+1,w
  2554  03A7  00F3               	movwf	?___lwmod+1
  2555  03A8  0874               	movf	___lwmod@dividend,w
  2556  03A9  00F2               	movwf	?___lwmod
  2557  03AA  0008               	return
  2558  03AB                     __end_of___lwmod:	
  2559  03AB                     __ptext9:	
  2560 ;; *************** function _fanInit *****************
  2561 ;; Defined at:
  2562 ;;		line 518 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, status,2, status,0
  2571 ;; Tracked objects:
  2572 ;;		On entry : 300/0
  2573 ;;		On exit  : 300/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2576 ;;      Params:         0       0       0       0
  2577 ;;      Locals:         0       0       0       0
  2578 ;;      Temps:          0       0       0       0
  2579 ;;      Totals:         0       0       0       0
  2580 ;;Total ram usage:        0 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    1
  2583 ;; This function calls:
  2584 ;;		Nothing
  2585 ;; This function is called by:
  2586 ;;		_fanCtr
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _fanInit
  2592  03AB                     _fanInit:	
  2593  03AB                     l4177:	
  2594                           ;incstack = 0
  2595                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2596                           
  2597                           
  2598                           ;main.c: 521: PWMTH = 0x00;
  2599  03AB  0198               	clrf	24	;volatile
  2600                           
  2601                           ;main.c: 522: PWMT4L = 73;
  2602  03AC  3049               	movlw	73
  2603  03AD  009C               	movwf	28	;volatile
  2604                           
  2605                           ;main.c: 523: PWMD4L = fanDuty;
  2606  03AE  0844               	movf	_fanDuty,w
  2607  03AF  009B               	movwf	27	;volatile
  2608                           
  2609                           ;main.c: 524: PWMCON1 = 0xC0;
  2610  03B0  30C0               	movlw	192
  2611  03B1  0096               	movwf	22	;volatile
  2612                           
  2613                           ;main.c: 525: PWMCON2 = 0x00;
  2614  03B2  019D               	clrf	29	;volatile
  2615                           
  2616                           ;main.c: 526: PWMCON0 |= 0x30;
  2617  03B3  3030               	movlw	48
  2618  03B4  0495               	iorwf	21,f	;volatile
  2619  03B5  0008               	return
  2620  03B6                     __end_of_fanInit:	
  2621  03B6                     __ptext8:	
  2622 ;; *************** function _fanStop *****************
  2623 ;; Defined at:
  2624 ;;		line 529 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;		None
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;		None
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		status,2
  2633 ;; Tracked objects:
  2634 ;;		On entry : 300/100
  2635 ;;		On exit  : 300/100
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2638 ;;      Params:         0       0       0       0
  2639 ;;      Locals:         0       0       0       0
  2640 ;;      Temps:          0       0       0       0
  2641 ;;      Totals:         0       0       0       0
  2642 ;;Total ram usage:        0 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    1
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_fanCtr
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _fanStop
  2654  03B6                     _fanStop:	
  2655                           
  2656                           ;main.c: 531: PWMD4L = 0;
  2657                           
  2658                           ;incstack = 0
  2659                           ; Regs used in _fanStop: [status,2]
  2660  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2661  03B7  019B               	clrf	27	;volatile
  2662                           
  2663                           ;main.c: 532: PWMCON0 &= 0xEF;
  2664  03B8  1215               	bcf	21,4	;volatile
  2665                           
  2666                           ;main.c: 533: PORTA &= 0xEF;
  2667  03B9  1683               	bsf	3,5	;RP0=1, select bank1
  2668  03BA  1206               	bcf	6,4	;volatile
  2669  03BB  0008               	return
  2670  03BC                     __end_of_fanStop:	
  2671  03BC                     __ptext2:	
  2672 ;; *************** function _wuhuaCtr *****************
  2673 ;; Defined at:
  2674 ;;		line 591 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 200/100
  2685 ;;		On exit  : 200/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2688 ;;      Params:         0       0       0       0
  2689 ;;      Locals:         0       0       0       0
  2690 ;;      Temps:          0       0       0       0
  2691 ;;      Totals:         0       0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    2
  2695 ;; This function calls:
  2696 ;;		_pwmInit
  2697 ;;		_pwmStop
  2698 ;; This function is called by:
  2699 ;;		_workCtr
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _wuhuaCtr
  2705  03BC                     _wuhuaCtr:	
  2706                           
  2707                           ;main.c: 593: if(count1s == 0)
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2711  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  2712  03BD  0846               	movf	_count1s,w
  2713  03BE  1D03               	btfss	3,2
  2714  03BF  2BD7               	goto	l4449
  2715                           
  2716                           ;main.c: 594: {
  2717                           ;main.c: 595: if(++count10s >= 20)
  2718  03C0  3014               	movlw	20
  2719  03C1  0AC3               	incf	_count10s,f
  2720  03C2  0243               	subwf	_count10s,w
  2721  03C3  1803               	btfsc	3,0
  2722                           
  2723                           ;main.c: 596: {
  2724                           ;main.c: 597: count10s = 0;
  2725  03C4  01C3               	clrf	_count10s
  2726                           
  2727                           ;main.c: 598: }
  2728                           ;main.c: 599: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2729  03C5  087B               	movf	_workStep,w
  2730  03C6  1D03               	btfss	3,2
  2731  03C7  2BD6               	goto	l4447
  2732  03C8  0845               	movf	_wuhuaFlag,w
  2733  03C9  1D03               	btfss	3,2
  2734  03CA  2BD6               	goto	l4447
  2735  03CB  083A               	movf	_powerFlag,w
  2736  03CC  1903               	btfsc	3,2
  2737  03CD  2BD6               	goto	l4447
  2738                           
  2739                           ;main.c: 600: {
  2740                           ;main.c: 601: if(++closeTime > 200)
  2741  03CE  30C9               	movlw	201
  2742  03CF  0AB8               	incf	_closeTime,f
  2743  03D0  0238               	subwf	_closeTime,w
  2744  03D1  1C03               	skipc
  2745  03D2  2BD7               	goto	l4449
  2746                           
  2747                           ;main.c: 602: {
  2748                           ;main.c: 603: closeTime = 0;
  2749  03D3  01B8               	clrf	_closeTime
  2750                           
  2751                           ;main.c: 604: powerFlag = 0;
  2752  03D4  01BA               	clrf	_powerFlag
  2753  03D5  2BD7               	goto	l4449
  2754  03D6                     l4447:	
  2755                           
  2756                           ;main.c: 607: else
  2757                           ;main.c: 608: {
  2758                           ;main.c: 609: closeTime = 0;
  2759  03D6  01B8               	clrf	_closeTime
  2760  03D7                     l4449:	
  2761                           
  2762                           ;main.c: 610: }
  2763                           ;main.c: 611: }
  2764                           ;main.c: 612: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2765  03D7  0345               	decf	_wuhuaFlag,w
  2766  03D8  1903               	btfsc	3,2
  2767  03D9  2BE2               	goto	l4455
  2768  03DA  3002               	movlw	2
  2769  03DB  0645               	xorwf	_wuhuaFlag,w
  2770  03DC  1D03               	btfss	3,2
  2771  03DD  2BE3               	goto	l4457
  2772  03DE  300A               	movlw	10
  2773  03DF  0243               	subwf	_count10s,w
  2774  03E0  1803               	skipnc
  2775  03E1  2BE3               	goto	l4457
  2776  03E2                     l4455:	
  2777                           
  2778                           ;main.c: 613: {
  2779                           ;main.c: 614: pwmInit();
  2780  03E2  2C12               	ljmp	l4161
  2781  03E3                     l4457:	
  2782                           ;main.c: 643: }
  2783                           
  2784                           
  2785                           ;main.c: 644: else
  2786                           ;main.c: 645: {
  2787                           ;main.c: 646: pwmStop();
  2788  03E3  158A  2E0F         	ljmp	l4171
  2789  03E5                     __end_of_wuhuaCtr:	
  2790  03E5                     PL6:	
  2791  03E5  00F4               	movwf	??_ADC_Sample+1
  2792  03E6  01F5               	clrf	??_ADC_Sample+2
  2793  03E7  01F6               	clrf	??_ADC_Sample+3
  2794  03E8  0873               	movf	??_ADC_Sample,w
  2795  03E9  02CD               	subwf	ADC_Sample@adsum,f	;volatile
  2796  03EA  0874               	movf	??_ADC_Sample+1,w
  2797  03EB  1C03               	skipc
  2798  03EC  0F74               	incfsz	??_ADC_Sample+1,w
  2799  03ED  02CE               	subwf	ADC_Sample@adsum+1,f	;volatile
  2800  03EE  0875               	movf	??_ADC_Sample+2,w
  2801  03EF  1C03               	skipc
  2802  03F0  0F75               	incfsz	??_ADC_Sample+2,w
  2803  03F1  02CF               	subwf	ADC_Sample@adsum+2,f	;volatile
  2804  03F2  0876               	movf	??_ADC_Sample+3,w
  2805  03F3  0008               	return
  2806  03F4                     __end_ofPL6:	
  2807  03F4                     PL16:	
  2808  03F4  01CD               	clrf	ADC_Sample@adsum	;volatile
  2809  03F5  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2810  03F6  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2811  03F7  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2812  03F8  01D1               	clrf	ADC_Sample@admin	;volatile
  2813  03F9  01D2               	clrf	ADC_Sample@admin+1	;volatile
  2814  03FA  01D3               	clrf	ADC_Sample@admax	;volatile
  2815  03FB  01D4               	clrf	ADC_Sample@admax+1	;volatile
  2816  03FC  0008               	return
  2817  03FD                     __end_ofPL16:	
  2818  03FD                     PL24:	
  2819  03FD  085F               	movf	___fttol@f1,w
  2820  03FE  00E3               	movwf	??___fttol
  2821  03FF  0860               	movf	___fttol@f1+1,w
  2822  0400  00E4               	movwf	??___fttol+1
  2823  0401  0861               	movf	___fttol@f1+2,w
  2824  0402  00E5               	movwf	??___fttol+2
  2825  0403  0008               	return
  2826  0404                     __end_ofPL24:	
  2827  0404                     PL40:	
  2828  0404  1003               	clrc
  2829  0405  0CF4               	rrf	___ftpack@arg+2,f
  2830  0406  0CF3               	rrf	___ftpack@arg+1,f
  2831  0407  0CF2               	rrf	___ftpack@arg,f
  2832  0408  0008               	return
  2833  0409                     __end_ofPL40:	
  2834  0409                     PL44:	
  2835  0409  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2836  040A  00D4               	movwf	ADC_Sample@admax+1	;volatile
  2837  040B  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2838  040C  00D3               	movwf	ADC_Sample@admax	;volatile
  2839  040D  0008               	return
  2840  040E                     __end_ofPL44:	
  2841  040E                     PL46:	
  2842  040E  01D0               	clrf	?___ftdiv
  2843  040F  01D1               	clrf	?___ftdiv+1
  2844  0410  01D2               	clrf	?___ftdiv+2
  2845  0411  0008               	return
  2846  0412                     __end_ofPL46:	
  2847  0412                     __ptext4:	
  2848 ;; *************** function _pwmInit *****************
  2849 ;; Defined at:
  2850 ;;		line 499 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;		None
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 300/0
  2861 ;;		On exit  : 300/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2864 ;;      Params:         0       0       0       0
  2865 ;;      Locals:         0       0       0       0
  2866 ;;      Temps:          0       0       0       0
  2867 ;;      Totals:         0       0       0       0
  2868 ;;Total ram usage:        0 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    1
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_wuhuaCtr
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           
  2879                           ;psect for function _pwmInit
  2880  0412                     _pwmInit:	
  2881  0412                     l4161:	
  2882                           ;incstack = 0
  2883                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2884                           
  2885                           
  2886                           ;main.c: 502: PWMTH = 0x00;
  2887  0412  0198               	clrf	24	;volatile
  2888                           
  2889                           ;main.c: 503: PWMTL = 73;
  2890  0413  3049               	movlw	73
  2891  0414  0097               	movwf	23	;volatile
  2892                           
  2893                           ;main.c: 504: PWMD23H = 0x00;
  2894  0415  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0416  019E               	clrf	30	;volatile
  2896                           
  2897                           ;main.c: 505: PWMD3L = 32;
  2898  0417  3020               	movlw	32
  2899  0418  009C               	movwf	28	;volatile
  2900                           
  2901                           ;main.c: 506: PWMCON1 = 0xC0;
  2902  0419  30C0               	movlw	192
  2903  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2904  041B  0096               	movwf	22	;volatile
  2905                           
  2906                           ;main.c: 507: PWMCON2 = 0x00;
  2907  041C  019D               	clrf	29	;volatile
  2908                           
  2909                           ;main.c: 508: PWMCON0 |= 0x28;
  2910  041D  3028               	movlw	40
  2911  041E  0495               	iorwf	21,f	;volatile
  2912  041F  0008               	return
  2913  0420                     __end_of_pwmInit:	
  2914                           
  2915                           	psect	text3
  2916  0E0F                     __ptext3:	
  2917 ;; *************** function _pwmStop *****************
  2918 ;; Defined at:
  2919 ;;		line 511 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		status,2
  2928 ;; Tracked objects:
  2929 ;;		On entry : 300/0
  2930 ;;		On exit  : 300/100
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         0       0       0       0
  2934 ;;      Locals:         0       0       0       0
  2935 ;;      Temps:          0       0       0       0
  2936 ;;      Totals:         0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    1
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_wuhuaCtr
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _pwmStop
  2949  0E0F                     _pwmStop:	
  2950  0E0F                     l4171:	
  2951                           ;incstack = 0
  2952                           ; Regs used in _pwmStop: [status,2]
  2953                           
  2954                           
  2955                           ;main.c: 513: PWMD3L = 0;
  2956  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  2957  0E10  019C               	clrf	28	;volatile
  2958                           
  2959                           ;main.c: 514: PWMCON0 &= 0xF7;
  2960  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0E12  1195               	bcf	21,3	;volatile
  2962                           
  2963                           ;main.c: 515: PORTA &= 0xF7;
  2964  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  2965  0E14  1186               	bcf	6,3	;volatile
  2966  0E15  0008               	return
  2967  0E16                     __end_of_pwmStop:	
  2968                           
  2969                           	psect	text12
  2970  0F3E                     __ptext12:	
  2971 ;; *************** function _bujinCtr *****************
  2972 ;; Defined at:
  2973 ;;		line 650 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  tempStep        1    6[COMMON] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 200/100
  2984 ;;		On exit  : 300/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2987 ;;      Params:         0       0       0       0
  2988 ;;      Locals:         1       0       0       0
  2989 ;;      Temps:          4       0       0       0
  2990 ;;      Totals:         5       0       0       0
  2991 ;;Total ram usage:        5 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    1
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_workCtr
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           
  3002                           ;psect for function _bujinCtr
  3003  0F3E                     _bujinCtr:	
  3004  0F3E                     l4459:	
  3005                           ;incstack = 0
  3006                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  3007                           
  3008                           
  3009                           ;main.c: 652: if(bujinFlag || motorStopFlag)
  3010  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  3011  0F3F  083B               	movf	_bujinFlag,w
  3012  0F40  1903               	btfsc	3,2
  3013  0F41  0837               	movf	_motorStopFlag,w
  3014  0F42  1903               	btfsc	3,2
  3015  0F43  2FE4               	goto	l4517
  3016                           
  3017                           ;main.c: 653: {
  3018                           ;main.c: 655: if(bujinStartFlag && zeroFlag)
  3019  0F44  0836               	movf	_bujinStartFlag,w
  3020  0F45  1903               	btfsc	3,2
  3021  0F46  2F67               	goto	l1091
  3022  0F47  086E               	movf	_zeroFlag,w
  3023  0F48  1903               	btfsc	3,2
  3024  0F49  2F67               	goto	l1091
  3025                           
  3026                           ;main.c: 656: {
  3027                           ;main.c: 657: bujinStartFlag = 0;
  3028  0F4A  01B6               	clrf	_bujinStartFlag
  3029                           
  3030                           ;main.c: 658: if(bujinFlag == 1)
  3031  0F4B  0B3B               	decfsz	_bujinFlag,w
  3032  0F4C  2F50               	goto	l4475
  3033                           
  3034                           ;main.c: 659: {
  3035                           ;main.c: 660: maxMotorStep = 512;
  3036  0F4D  3002               	movlw	2
  3037  0F4E                     L5:	
  3038  0F4E  01EC               	clrf	_maxMotorStep
  3039  0F4F  2F5D               	goto	L6
  3040  0F50                     l4475:	
  3041                           ;main.c: 662: }
  3042                           
  3043                           
  3044                           ;main.c: 663: else if(bujinFlag == 2)
  3045  0F50  3002               	movlw	2
  3046  0F51  063B               	xorwf	_bujinFlag,w
  3047  0F52  1D03               	btfss	3,2
  3048  0F53  2F56               	goto	l4481
  3049                           
  3050                           ;main.c: 664: {
  3051                           ;main.c: 665: maxMotorStep = 1024;
  3052  0F54  3004               	movlw	4
  3053  0F55  2F4E               	goto	L5
  3054  0F56                     l4481:	
  3055                           
  3056                           ;main.c: 668: else if(bujinFlag == 3)
  3057  0F56  3003               	movlw	3
  3058  0F57  063B               	xorwf	_bujinFlag,w
  3059  0F58  1D03               	btfss	3,2
  3060  0F59  2F60               	goto	l1093
  3061                           
  3062                           ;main.c: 669: {
  3063                           ;main.c: 670: maxMotorStep = 1696;
  3064  0F5A  30A0               	movlw	160
  3065  0F5B  00EC               	movwf	_maxMotorStep
  3066  0F5C  3006               	movlw	6
  3067  0F5D                     L6:	
  3068  0F5D  00ED               	movwf	_maxMotorStep+1
  3069                           
  3070                           ;main.c: 661: motorStopFlag = 1;
  3071  0F5E  01B7               	clrf	_motorStopFlag
  3072  0F5F  0AB7               	incf	_motorStopFlag,f
  3073  0F60                     l1093:	
  3074                           
  3075                           ;main.c: 672: }
  3076                           ;main.c: 673: motorStep = maxMotorStep/2;
  3077  0F60  086D               	movf	_maxMotorStep+1,w
  3078  0F61  00A7               	movwf	_motorStep+1
  3079  0F62  086C               	movf	_maxMotorStep,w
  3080  0F63  00A6               	movwf	_motorStep
  3081  0F64  1003               	clrc
  3082  0F65  0CA7               	rrf	_motorStep+1,f
  3083  0F66  0CA6               	rrf	_motorStep,f
  3084  0F67                     l1091:	
  3085                           
  3086                           ;main.c: 674: }
  3087                           ;main.c: 675: if(motorStep == maxMotorStep/2 || motorStep == ((maxMotorStep/2) + maxMoto
      +                          rStep))
  3088  0F67  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3089  0F69  0CF3               	rrf	??_bujinCtr+1,f
  3090  0F6A  0CF2               	rrf	??_bujinCtr,f
  3091  0F6B  0827               	movf	_motorStep+1,w
  3092  0F6C  0673               	xorwf	??_bujinCtr+1,w
  3093  0F6D  1D03               	skipz
  3094  0F6E  2F71               	goto	u4625
  3095  0F6F  0826               	movf	_motorStep,w
  3096  0F70  0672               	xorwf	??_bujinCtr,w
  3097  0F71                     u4625:	
  3098  0F71  1903               	skipnz
  3099  0F72  2F86               	goto	l1099
  3100  0F73  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3101  0F75  0CF3               	rrf	??_bujinCtr+1,f
  3102  0F76  0CF2               	rrf	??_bujinCtr,f
  3103  0F77  086C               	movf	_maxMotorStep,w
  3104  0F78  0772               	addwf	??_bujinCtr,w
  3105  0F79  00F4               	movwf	??_bujinCtr+2
  3106  0F7A  086D               	movf	_maxMotorStep+1,w
  3107  0F7B  1803               	skipnc
  3108  0F7C  0A6D               	incf	_maxMotorStep+1,w
  3109  0F7D  0773               	addwf	??_bujinCtr+1,w
  3110  0F7E  00F5               	movwf	??_bujinCtr+3
  3111  0F7F  0627               	xorwf	_motorStep+1,w
  3112  0F80  1D03               	skipz
  3113  0F81  2F84               	goto	u4635
  3114  0F82  0826               	movf	_motorStep,w
  3115  0F83  0674               	xorwf	??_bujinCtr+2,w
  3116  0F84                     u4635:	
  3117  0F84  1D03               	skipz
  3118  0F85  2F8D               	goto	l4495
  3119  0F86                     l1099:	
  3120                           
  3121                           ;main.c: 676: {
  3122                           ;main.c: 677: zeroFlag = 1;
  3123  0F86  01EE               	clrf	_zeroFlag
  3124  0F87  0AEE               	incf	_zeroFlag,f
  3125                           
  3126                           ;main.c: 678: if(bujinFlag == 0)
  3127  0F88  083B               	movf	_bujinFlag,w
  3128  0F89  1D03               	btfss	3,2
  3129  0F8A  2F8E               	goto	l4497
  3130                           
  3131                           ;main.c: 679: {
  3132                           ;main.c: 680: motorStopFlag = 0;
  3133  0F8B  01B7               	clrf	_motorStopFlag
  3134  0F8C  2F8E               	goto	l4497
  3135  0F8D                     l4495:	
  3136                           
  3137                           ;main.c: 683: else
  3138                           ;main.c: 684: {
  3139                           ;main.c: 685: zeroFlag = 0;
  3140  0F8D  01EE               	clrf	_zeroFlag
  3141  0F8E                     l4497:	
  3142                           
  3143                           ;main.c: 686: }
  3144                           ;main.c: 689: if(++motorStep >= (maxMotorStep*2))
  3145  0F8E  27EA  158A         	fcall	PL20	;call to abstracted procedure
  3146  0F90  0DF2               	rlf	??_bujinCtr,f
  3147  0F91  0DF3               	rlf	??_bujinCtr+1,f
  3148  0F92  0AA6               	incf	_motorStep,f
  3149  0F93  1903               	skipnz
  3150  0F94  0AA7               	incf	_motorStep+1,f
  3151  0F95  0873               	movf	??_bujinCtr+1,w
  3152  0F96  0227               	subwf	_motorStep+1,w
  3153  0F97  1D03               	skipz
  3154  0F98  2F9B               	goto	u4655
  3155  0F99  0872               	movf	??_bujinCtr,w
  3156  0F9A  0226               	subwf	_motorStep,w
  3157  0F9B                     u4655:	
  3158  0F9B  1C03               	skipc
  3159  0F9C  2F9F               	goto	l4501
  3160                           
  3161                           ;main.c: 690: {
  3162                           ;main.c: 691: motorStep = 0;
  3163  0F9D  01A6               	clrf	_motorStep
  3164  0F9E  01A7               	clrf	_motorStep+1
  3165  0F9F                     l4501:	
  3166                           
  3167                           ;main.c: 692: }
  3168                           ;main.c: 693: unsigned char tempStep = motorStep % 8;
  3169  0F9F  0826               	movf	_motorStep,w
  3170  0FA0  00F6               	movwf	bujinCtr@tempStep
  3171  0FA1  3007               	movlw	7
  3172  0FA2  05F6               	andwf	bujinCtr@tempStep,f
  3173                           
  3174                           ;main.c: 694: if(motorStep < maxMotorStep)
  3175  0FA3  086D               	movf	_maxMotorStep+1,w
  3176  0FA4  0227               	subwf	_motorStep+1,w
  3177  0FA5  1D03               	skipz
  3178  0FA6  2FA9               	goto	u4665
  3179  0FA7  086C               	movf	_maxMotorStep,w
  3180  0FA8  0226               	subwf	_motorStep,w
  3181  0FA9                     u4665:	
  3182  0FA9  1C03               	btfss	3,0
  3183  0FAA  2FCC               	goto	l4511
  3184  0FAB  2FD8               	goto	l4515
  3185  0FAC                     l1105:	
  3186                           ;main.c: 698: {
  3187                           ;main.c: 699: case 0:
  3188                           
  3189                           
  3190                           ;main.c: 700: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3191  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  3192  0FAD  1686               	bsf	6,5	;volatile
  3193  0FAE  1306               	bcf	6,6	;volatile
  3194  0FAF  1386               	bcf	6,7	;volatile
  3195  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0FB1  1386               	bcf	6,7	;volatile
  3197                           
  3198                           ;main.c: 701: break;
  3199  0FB2  0008               	return
  3200  0FB3                     l1107:	
  3201                           ;main.c: 702: case 1:
  3202                           
  3203                           
  3204                           ;main.c: 703: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3205  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  3206  0FB4  1686               	bsf	6,5	;volatile
  3207                           
  3208                           ;main.c: 704: break;
  3209  0FB5  2FF5               	ljmp	PL30	;call to abstracted procedure
  3210  0FB6                     l1108:	
  3211                           ;main.c: 705: case 2:
  3212                           
  3213                           
  3214                           ;main.c: 706: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3215  0FB6  1683               	bsf	3,5	;RP0=1, select bank1
  3216  0FB7  1286               	bcf	6,5	;volatile
  3217                           
  3218                           ;main.c: 707: break;
  3219  0FB8  2FF5               	ljmp	PL30	;call to abstracted procedure
  3220  0FB9                     l1109:	
  3221                           ;main.c: 708: case 3:
  3222                           
  3223                           
  3224                           ;main.c: 709: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3225  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3226  0FBA  1286               	bcf	6,5	;volatile
  3227  0FBB  1706               	bsf	6,6	;volatile
  3228  0FBC  1786               	bsf	6,7	;volatile
  3229  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0FBE  1386               	bcf	6,7	;volatile
  3231                           
  3232                           ;main.c: 710: break;
  3233  0FBF  0008               	return
  3234  0FC0                     l1110:	
  3235                           ;main.c: 711: case 4:
  3236                           
  3237                           
  3238                           ;main.c: 712: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3239  0FC0  27FA               	fcall	PL34	;call to abstracted procedure
  3240  0FC1  1386               	bcf	6,7	;volatile
  3241                           
  3242                           ;main.c: 713: break;
  3243  0FC2  0008               	return
  3244  0FC3                     l1111:	
  3245                           ;main.c: 714: case 5:
  3246                           
  3247                           
  3248                           ;main.c: 715: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3249  0FC3  27FA               	fcall	PL34	;call to abstracted procedure
  3250  0FC4  1786               	bsf	6,7	;volatile
  3251                           
  3252                           ;main.c: 716: break;
  3253  0FC5  0008               	return
  3254  0FC6                     l1112:	
  3255                           ;main.c: 717: case 6:
  3256                           
  3257                           
  3258                           ;main.c: 718: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3259  0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  3260  0FC7  1286               	bcf	6,5	;volatile
  3261                           
  3262                           ;main.c: 719: break;
  3263  0FC8  2FF0               	ljmp	PL28	;call to abstracted procedure
  3264  0FC9                     l1113:	
  3265                           ;main.c: 720: case 7:
  3266                           
  3267                           
  3268                           ;main.c: 721: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3269  0FC9  1683               	bsf	3,5	;RP0=1, select bank1
  3270  0FCA  1686               	bsf	6,5	;volatile
  3271                           
  3272                           ;main.c: 722: break;
  3273  0FCB  2FF0               	ljmp	PL28	;call to abstracted procedure
  3274  0FCC                     l4511:	
  3275  0FCC  0876               	movf	bujinCtr@tempStep,w
  3276                           
  3277                           ; Switch size 1, requested type "space"
  3278                           ; Number of cases is 8, Range of values is 0 to 7
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; direct_byte           23     7 (fixed)
  3282                           ; simple_byte           25    13 (average)
  3283                           ; jumptable            260     6 (fixed)
  3284                           ;	Chosen strategy is direct_byte
  3285  0FCD  0084               	movwf	4
  3286  0FCE  3008               	movlw	8
  3287  0FCF  0204               	subwf	4,w
  3288  0FD0  1803               	skipnc
  3289  0FD1  0008               	return
  3290  0FD2  3008               	movlw	high S4885
  3291  0FD3  008A               	movwf	10
  3292  0FD4  1003               	clrc
  3293  0FD5  0D04               	rlf	4,w
  3294  0FD6  3E17               	addlw	low S4885
  3295  0FD7  0082               	movwf	2
  3296  0FD8                     l4515:	
  3297  0FD8  0876               	movf	bujinCtr@tempStep,w
  3298                           
  3299                           ; Switch size 1, requested type "space"
  3300                           ; Number of cases is 8, Range of values is 0 to 7
  3301                           ; switch strategies available:
  3302                           ; Name         Instructions Cycles
  3303                           ; direct_byte           23     7 (fixed)
  3304                           ; simple_byte           25    13 (average)
  3305                           ; jumptable            260     6 (fixed)
  3306                           ;	Chosen strategy is direct_byte
  3307  0FD9  0084               	movwf	4
  3308  0FDA  3008               	movlw	8
  3309  0FDB  0204               	subwf	4,w
  3310  0FDC  1803               	skipnc
  3311  0FDD  0008               	return
  3312  0FDE  3008               	movlw	high S4887
  3313  0FDF  008A               	movwf	10
  3314  0FE0  1003               	clrc
  3315  0FE1  0D04               	rlf	4,w
  3316  0FE2  3E27               	addlw	low S4887
  3317  0FE3  0082               	movwf	2
  3318  0FE4                     l4517:	
  3319                           
  3320                           ;main.c: 757: else
  3321                           ;main.c: 758: {
  3322                           ;main.c: 759: PORTA &= 0x1F;
  3323  0FE4  301F               	movlw	31
  3324  0FE5  1683               	bsf	3,5	;RP0=1, select bank1
  3325  0FE6  0586               	andwf	6,f	;volatile
  3326                           
  3327                           ;main.c: 760: PORTB &= 0x7F;
  3328  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  3329  0FE8  1386               	bcf	6,7	;volatile
  3330  0FE9  0008               	return
  3331  0FEA                     __end_of_bujinCtr:	
  3332  0FEA                     PL20:	
  3333  0FEA  086D               	movf	_maxMotorStep+1,w
  3334  0FEB  00F3               	movwf	??_bujinCtr+1
  3335  0FEC  086C               	movf	_maxMotorStep,w
  3336  0FED  00F2               	movwf	??_bujinCtr
  3337  0FEE  1003               	clrc
  3338  0FEF  0008               	return
  3339  0FF0                     __end_ofPL20:	
  3340  0FF0                     PL28:	
  3341  0FF0  1306               	bcf	6,6	;volatile
  3342  0FF1  1386               	bcf	6,7	;volatile
  3343  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0FF3  1786               	bsf	6,7	;volatile
  3345  0FF4  0008               	return
  3346  0FF5                     __end_ofPL28:	
  3347  0FF5                     PL30:	
  3348  0FF5  1706               	bsf	6,6	;volatile
  3349  0FF6  1386               	bcf	6,7	;volatile
  3350  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3351  0FF8  1386               	bcf	6,7	;volatile
  3352  0FF9  0008               	return
  3353  0FFA                     __end_ofPL30:	
  3354  0FFA                     PL34:	
  3355  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  3356  0FFB  1286               	bcf	6,5	;volatile
  3357  0FFC  1306               	bcf	6,6	;volatile
  3358  0FFD  1786               	bsf	6,7	;volatile
  3359  0FFE  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0FFF  0008               	return
  3361  1000                     __end_ofPL34:	
  3362                           
  3363                           	psect	swtext1
  3364  0817                     __pswtext1:	
  3365  0817                     S4885:	
  3366  0817  158A  2FAC         	ljmp	l1105
  3367  0819  158A  2FB3         	ljmp	l1107
  3368  081B  158A  2FB6         	ljmp	l1108
  3369  081D  158A  2FB9         	ljmp	l1109
  3370  081F  158A  2FC0         	ljmp	l1110
  3371  0821  158A  2FC3         	ljmp	l1111
  3372  0823  158A  2FC6         	ljmp	l1112
  3373  0825  158A  2FC9         	ljmp	l1113
  3374                           
  3375                           	psect	swtext2
  3376  0827                     __pswtext2:	
  3377  0827                     S4887:	
  3378  0827  158A  2FC9         	ljmp	l1113
  3379  0829  158A  2FC6         	ljmp	l1112
  3380  082B  158A  2FC3         	ljmp	l1111
  3381  082D  158A  2FC0         	ljmp	l1110
  3382  082F  158A  2FB9         	ljmp	l1109
  3383  0831  158A  2FB6         	ljmp	l1108
  3384  0833  158A  2FB3         	ljmp	l1107
  3385  0835  158A  2FAC         	ljmp	l1105
  3386                           
  3387                           	psect	text17
  3388  0E39                     __ptext17:	
  3389 ;; *************** function _chrgCtr *****************
  3390 ;; Defined at:
  3391 ;;		line 392 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/100
  3402 ;;		On exit  : 300/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3405 ;;      Params:         0       0       0       0
  3406 ;;      Locals:         0       0       0       0
  3407 ;;      Temps:          0       0       0       0
  3408 ;;      Totals:         0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    1
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _chrgCtr
  3421  0E39                     _chrgCtr:	
  3422                           
  3423                           ;main.c: 394: if(PORTB & 0x20)
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3427  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  3429  0E3B  1E86               	btfss	6,5	;volatile
  3430  0E3C  2E55               	goto	l3913
  3431                           
  3432                           ;main.c: 395: {
  3433                           ;main.c: 396: chrgFlag = 1;
  3434  0E3D  01C1               	clrf	_chrgFlag
  3435  0E3E  0AC1               	incf	_chrgFlag,f
  3436                           
  3437                           ;main.c: 397: firstLock = 0;
  3438  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  3439  0E40  01CD               	clrf	_firstLock^(0+128)
  3440                           
  3441                           ;main.c: 398: lowBatLock = 0;
  3442  0E41  1283               	bcf	3,5	;RP0=0, select bank0
  3443  0E42  3010               	movlw	16
  3444  0E43  01BE               	clrf	_lowBatLock
  3445                           
  3446                           ;main.c: 399: if(power_ad > 4140)
  3447  0E44  0225               	subwf	_power_ad+1,w	;volatile
  3448  0E45  302D               	movlw	45
  3449  0E46  1903               	skipnz
  3450  0E47  0224               	subwf	_power_ad,w	;volatile
  3451  0E48  1C03               	skipc
  3452  0E49  2E53               	goto	l3911
  3453                           
  3454                           ;main.c: 400: {
  3455                           ;main.c: 401: if(++chrgFullTime > 200)
  3456  0E4A  30C9               	movlw	201
  3457  0E4B  0ABF               	incf	_chrgFullTime,f
  3458  0E4C  023F               	subwf	_chrgFullTime,w
  3459  0E4D  1C03               	skipc
  3460  0E4E  0008               	return
  3461                           
  3462                           ;main.c: 402: {
  3463                           ;main.c: 403: chrgFullTime = 0;
  3464  0E4F  01BF               	clrf	_chrgFullTime
  3465                           
  3466                           ;main.c: 404: chrgFullFlag = 1;
  3467  0E50  01C0               	clrf	_chrgFullFlag
  3468  0E51  0AC0               	incf	_chrgFullFlag,f
  3469  0E52  0008               	return
  3470  0E53                     l3911:	
  3471                           
  3472                           ;main.c: 407: else
  3473                           ;main.c: 408: {
  3474                           ;main.c: 409: chrgFullTime = 0;
  3475  0E53  01BF               	clrf	_chrgFullTime
  3476  0E54  0008               	return
  3477  0E55                     l3913:	
  3478                           
  3479                           ;main.c: 413: else
  3480                           ;main.c: 414: {
  3481                           ;main.c: 415: chrgFlag = 0;
  3482  0E55  01C1               	clrf	_chrgFlag
  3483                           
  3484                           ;main.c: 416: chrgFullTime = 0;
  3485  0E56  01BF               	clrf	_chrgFullTime
  3486                           
  3487                           ;main.c: 417: chrgFullFlag = 0;
  3488  0E57  01C0               	clrf	_chrgFullFlag
  3489  0E58  0008               	return
  3490  0E59                     __end_of_chrgCtr:	
  3491                           
  3492                           	psect	text21
  3493  0E99                     __ptext21:	
  3494 ;; *************** function _KeyServer *****************
  3495 ;; Defined at:
  3496 ;;		line 114 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      void 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0
  3505 ;; Tracked objects:
  3506 ;;		On entry : 300/0
  3507 ;;		On exit  : 200/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3510 ;;      Params:         0       0       0       0
  3511 ;;      Locals:         0       0       0       0
  3512 ;;      Temps:          0       0       0       0
  3513 ;;      Totals:         0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    1
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		_main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           
  3525                           ;psect for function _KeyServer
  3526  0E99                     _KeyServer:	
  3527                           
  3528                           ;main.c: 116: static unsigned char KeyOldFlag = 0;
  3529                           ;main.c: 117: if (KeyFlag[0])
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3533  0E99  0879               	movf	_KeyFlag,w	;volatile
  3534  0E9A  1903               	btfsc	3,2
  3535  0E9B  2F33               	goto	l3851
  3536                           
  3537                           ;main.c: 118: {
  3538                           ;main.c: 119: if (KeyFlag[0] != KeyOldFlag)
  3539  0E9C  0879               	movf	_KeyFlag,w	;volatile
  3540  0E9D  0634               	xorwf	KeyServer@KeyOldFlag,w
  3541  0E9E  1903               	skipnz
  3542  0E9F  2F0A               	goto	l3833
  3543                           
  3544                           ;main.c: 120: {
  3545                           ;main.c: 122: KeyOldFlag ^= KeyFlag[0];
  3546  0EA0  0879               	movf	_KeyFlag,w	;volatile
  3547  0EA1  06B4               	xorwf	KeyServer@KeyOldFlag,f
  3548                           
  3549                           ;main.c: 123: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3550  0EA2  1834               	btfsc	KeyServer@KeyOldFlag,0
  3551  0EA3  1C79               	btfss	_KeyFlag,0	;volatile
  3552  0EA4  2EC5               	goto	l3787
  3553  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  3554  0EA6  084D               	movf	_firstLock^(0+128),w
  3555  0EA7  1D03               	btfss	3,2
  3556  0EA8  2EC5               	goto	l3787
  3557  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0EAA  083A               	movf	_powerFlag,w
  3559  0EAB  1903               	btfsc	3,2
  3560  0EAC  2EC5               	goto	l3787
  3561                           
  3562                           ;main.c: 124: {
  3563                           ;main.c: 126: if(lowBatLock == 1)
  3564  0EAD  0B3E               	decfsz	_lowBatLock,w
  3565  0EAE  2EB4               	goto	l3775
  3566                           
  3567                           ;main.c: 127: {
  3568                           ;main.c: 128: shanshuoTime2 = 450;
  3569  0EAF  30C2               	movlw	194
  3570  0EB0  00AA               	movwf	_shanshuoTime2
  3571  0EB1  3001               	movlw	1
  3572  0EB2  00AB               	movwf	_shanshuoTime2+1
  3573                           
  3574                           ;main.c: 129: }
  3575  0EB3  2EB9               	goto	l3779
  3576  0EB4                     l3775:	
  3577                           
  3578                           ;main.c: 130: else if(++wuhuaFlag > 2)
  3579  0EB4  3003               	movlw	3
  3580  0EB5  0AC5               	incf	_wuhuaFlag,f
  3581  0EB6  0245               	subwf	_wuhuaFlag,w
  3582  0EB7  1803               	btfsc	3,0
  3583                           
  3584                           ;main.c: 131: {
  3585                           ;main.c: 132: wuhuaFlag = 0;
  3586  0EB8  01C5               	clrf	_wuhuaFlag
  3587  0EB9                     l3779:	
  3588                           
  3589                           ;main.c: 133: }
  3590                           ;main.c: 134: if(wuhuaFlag >= 2)
  3591  0EB9  3002               	movlw	2
  3592  0EBA  0245               	subwf	_wuhuaFlag,w
  3593  0EBB  1C03               	skipc
  3594  0EBC  2EC3               	goto	l3785
  3595                           
  3596                           ;main.c: 135: {
  3597                           ;main.c: 136: shanshuoTime2 = 450;
  3598  0EBD  30C2               	movlw	194
  3599  0EBE  00AA               	movwf	_shanshuoTime2
  3600  0EBF  3001               	movlw	1
  3601  0EC0  00AB               	movwf	_shanshuoTime2+1
  3602                           
  3603                           ;main.c: 137: count10s = 0;
  3604  0EC1  01C3               	clrf	_count10s
  3605                           
  3606                           ;main.c: 138: }
  3607  0EC2  2EC5               	goto	l3787
  3608  0EC3                     l3785:	
  3609                           
  3610                           ;main.c: 139: else
  3611                           ;main.c: 140: {
  3612                           ;main.c: 141: shanshuoTime2 = 0;
  3613  0EC3  01AA               	clrf	_shanshuoTime2
  3614  0EC4  01AB               	clrf	_shanshuoTime2+1
  3615  0EC5                     l3787:	
  3616                           
  3617                           ;main.c: 142: }
  3618                           ;main.c: 143: }
  3619                           ;main.c: 144: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3620  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0EC6  18B4               	btfsc	KeyServer@KeyOldFlag,1
  3622  0EC7  1CF9               	btfss	_KeyFlag,1	;volatile
  3623  0EC8  2EE6               	goto	l3809
  3624  0EC9  1683               	bsf	3,5	;RP0=1, select bank1
  3625  0ECA  084D               	movf	_firstLock^(0+128),w
  3626  0ECB  1D03               	btfss	3,2
  3627  0ECC  2EE6               	goto	l3809
  3628  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0ECE  083A               	movf	_powerFlag,w
  3630  0ECF  1903               	btfsc	3,2
  3631  0ED0  2EE6               	goto	l3809
  3632                           
  3633                           ;main.c: 145: {
  3634                           ;main.c: 147: if(lowBatLock == 1)
  3635  0ED1  0B3E               	decfsz	_lowBatLock,w
  3636  0ED2  2ED6               	goto	l3799
  3637                           
  3638                           ;main.c: 148: {
  3639                           ;main.c: 149: shanshuoTime = 450;
  3640  0ED3  2739  158A         	fcall	PL42	;call to abstracted procedure
  3641                           
  3642                           ;main.c: 150: }
  3643  0ED5  2EDD               	goto	l3803
  3644  0ED6                     l3799:	
  3645                           
  3646                           ;main.c: 151: else if(++workStep > 3)
  3647  0ED6  3004               	movlw	4
  3648  0ED7  0AFB               	incf	_workStep,f
  3649  0ED8  027B               	subwf	_workStep,w
  3650  0ED9  1C03               	skipc
  3651  0EDA  2EDD               	goto	l3803
  3652                           
  3653                           ;main.c: 152: {
  3654                           ;main.c: 153: workStep = 0;
  3655  0EDB  01FB               	clrf	_workStep
  3656                           
  3657                           ;main.c: 154: bujinFlag = 0;
  3658  0EDC  01BB               	clrf	_bujinFlag
  3659  0EDD                     l3803:	
  3660                           
  3661                           ;main.c: 155: }
  3662                           ;main.c: 156: if(workStep >= 2)
  3663  0EDD  3002               	movlw	2
  3664  0EDE  027B               	subwf	_workStep,w
  3665  0EDF  1C03               	skipc
  3666  0EE0  2EE4               	goto	l3807
  3667                           
  3668                           ;main.c: 157: {
  3669                           ;main.c: 158: shanshuoTime = 450;
  3670  0EE1  2739  158A         	fcall	PL42	;call to abstracted procedure
  3671                           
  3672                           ;main.c: 159: }
  3673  0EE3  2EE6               	goto	l3809
  3674  0EE4                     l3807:	
  3675                           
  3676                           ;main.c: 160: else
  3677                           ;main.c: 161: {
  3678                           ;main.c: 162: shanshuoTime = 0;
  3679  0EE4  01AC               	clrf	_shanshuoTime
  3680  0EE5  01AD               	clrf	_shanshuoTime+1
  3681  0EE6                     l3809:	
  3682                           
  3683                           ;main.c: 163: }
  3684                           ;main.c: 165: }
  3685                           ;main.c: 166: if ((KeyOldFlag & 0x4) && (KeyFlag[0] & 0x4) && firstLock == 0 && workStep
      +                           > 0 && powerFlag > 0)
  3686  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3687  0EE7  1934               	btfsc	KeyServer@KeyOldFlag,2
  3688  0EE8  1D79               	btfss	_KeyFlag,2	;volatile
  3689  0EE9  2F07               	goto	l3831
  3690  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  3691  0EEB  084D               	movf	_firstLock^(0+128),w
  3692  0EEC  1D03               	btfss	3,2
  3693  0EED  2F07               	goto	l3831
  3694  0EEE  087B               	movf	_workStep,w
  3695  0EEF  1903               	btfsc	3,2
  3696  0EF0  2F07               	goto	l3831
  3697  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  3698  0EF2  083A               	movf	_powerFlag,w
  3699  0EF3  1903               	btfsc	3,2
  3700  0EF4  2F07               	goto	l3831
  3701                           
  3702                           ;main.c: 167: {
  3703                           ;main.c: 169: if(++bujinFlag > 3)
  3704  0EF5  3004               	movlw	4
  3705  0EF6  0ABB               	incf	_bujinFlag,f
  3706  0EF7  023B               	subwf	_bujinFlag,w
  3707  0EF8  1803               	btfsc	3,0
  3708                           
  3709                           ;main.c: 170: {
  3710                           ;main.c: 171: bujinFlag = 0;
  3711  0EF9  01BB               	clrf	_bujinFlag
  3712  0EFA  3002               	movlw	2
  3713                           
  3714                           ;main.c: 172: }
  3715                           ;main.c: 173: bujinStartFlag = 1;
  3716  0EFB  01B6               	clrf	_bujinStartFlag
  3717  0EFC  0AB6               	incf	_bujinStartFlag,f
  3718                           
  3719                           ;main.c: 174: if(bujinFlag >= 2)
  3720  0EFD  023B               	subwf	_bujinFlag,w
  3721  0EFE  1C03               	skipc
  3722  0EFF  2F05               	goto	l3829
  3723                           
  3724                           ;main.c: 175: {
  3725                           ;main.c: 176: shanshuoTime3 = 450;
  3726  0F00  30C2               	movlw	194
  3727  0F01  00A8               	movwf	_shanshuoTime3
  3728  0F02  3001               	movlw	1
  3729  0F03  00A9               	movwf	_shanshuoTime3+1
  3730                           
  3731                           ;main.c: 177: }
  3732  0F04  2F07               	goto	l3831
  3733  0F05                     l3829:	
  3734                           
  3735                           ;main.c: 178: else
  3736                           ;main.c: 179: {
  3737                           ;main.c: 180: shanshuoTime3 = 0;
  3738  0F05  01A8               	clrf	_shanshuoTime3
  3739  0F06  01A9               	clrf	_shanshuoTime3+1
  3740  0F07                     l3831:	
  3741                           
  3742                           ;main.c: 181: }
  3743                           ;main.c: 182: }
  3744                           ;main.c: 184: KeyOldFlag = KeyFlag[0];
  3745  0F07  0879               	movf	_KeyFlag,w	;volatile
  3746  0F08  1283               	bcf	3,5	;RP0=0, select bank0
  3747  0F09  00B4               	movwf	KeyServer@KeyOldFlag
  3748  0F0A                     l3833:	
  3749                           
  3750                           ;main.c: 185: }
  3751                           ;main.c: 186: if(firstLock == 0 && KeyOldFlag & 0x4)
  3752  0F0A  1683               	bsf	3,5	;RP0=1, select bank1
  3753  0F0B  084D               	movf	_firstLock^(0+128),w
  3754  0F0C  1D03               	btfss	3,2
  3755  0F0D  0008               	return
  3756  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0F0F  1D34               	btfss	KeyServer@KeyOldFlag,2
  3758  0F10  0008               	return
  3759                           
  3760                           ;main.c: 187: {
  3761                           ;main.c: 188: if(++keyCount >= 400)
  3762  0F11  1683               	bsf	3,5	;RP0=1, select bank1
  3763  0F12  0AC5               	incf	_keyCount^(0+128),f
  3764  0F13  1903               	skipnz
  3765  0F14  0AC6               	incf	(_keyCount+1)^(0+128),f
  3766  0F15  3001               	movlw	1
  3767  0F16  0246               	subwf	(_keyCount+1)^(0+128),w
  3768  0F17  3090               	movlw	144
  3769  0F18  1903               	skipnz
  3770  0F19  0245               	subwf	_keyCount^(0+128),w
  3771  0F1A  1C03               	skipc
  3772  0F1B  0008               	return
  3773                           
  3774                           ;main.c: 189: {
  3775                           ;main.c: 190: keyCount = 0;
  3776  0F1C  01C5               	clrf	_keyCount^(0+128)
  3777  0F1D  01C6               	clrf	(_keyCount+1)^(0+128)
  3778                           
  3779                           ;main.c: 191: if(longKeyFlag == 0)
  3780  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  3781  0F1F  0839               	movf	_longKeyFlag,w
  3782  0F20  1D03               	btfss	3,2
  3783  0F21  0008               	return
  3784                           
  3785                           ;main.c: 192: {
  3786                           ;main.c: 193: longKeyFlag = 1;
  3787  0F22  01B9               	clrf	_longKeyFlag
  3788  0F23  0AB9               	incf	_longKeyFlag,f
  3789                           
  3790                           ;main.c: 194: if(powerFlag > 0)
  3791  0F24  083A               	movf	_powerFlag,w
  3792  0F25  1903               	btfsc	3,2
  3793  0F26  2F2C               	goto	l971
  3794                           
  3795                           ;main.c: 195: {
  3796                           ;main.c: 196: powerFlag = 0;
  3797  0F27  01BA               	clrf	_powerFlag
  3798                           
  3799                           ;main.c: 197: workStep = 0;
  3800  0F28  01FB               	clrf	_workStep
  3801                           
  3802                           ;main.c: 198: wuhuaFlag = 0;
  3803  0F29  01C5               	clrf	_wuhuaFlag
  3804                           
  3805                           ;main.c: 199: bujinFlag = 0;
  3806  0F2A  01BB               	clrf	_bujinFlag
  3807                           
  3808                           ;main.c: 200: }
  3809  0F2B  0008               	return
  3810  0F2C                     l971:	
  3811  0F2C  3084               	movlw	132
  3812                           
  3813                           ;main.c: 201: else
  3814                           ;main.c: 202: {
  3815                           ;main.c: 203: powerFlag = 1;
  3816  0F2D  01BA               	clrf	_powerFlag
  3817  0F2E  0ABA               	incf	_powerFlag,f
  3818                           
  3819                           ;main.c: 204: shanshuoTime3 = 900;
  3820  0F2F  00A8               	movwf	_shanshuoTime3
  3821  0F30  3003               	movlw	3
  3822  0F31  00A9               	movwf	_shanshuoTime3+1
  3823  0F32  0008               	return
  3824  0F33                     l3851:	
  3825                           
  3826                           ;main.c: 210: else
  3827                           ;main.c: 211: {
  3828                           ;main.c: 212: KeyOldFlag = 0;
  3829  0F33  01B4               	clrf	KeyServer@KeyOldFlag
  3830                           
  3831                           ;main.c: 213: longKeyFlag = 0;
  3832  0F34  01B9               	clrf	_longKeyFlag
  3833                           
  3834                           ;main.c: 214: keyCount = 0;
  3835  0F35  1683               	bsf	3,5	;RP0=1, select bank1
  3836  0F36  01C5               	clrf	_keyCount^(0+128)
  3837  0F37  01C6               	clrf	(_keyCount+1)^(0+128)
  3838  0F38  0008               	return
  3839  0F39                     __end_of_KeyServer:	
  3840  0F39                     PL42:	
  3841  0F39  30C2               	movlw	194
  3842  0F3A  00AC               	movwf	_shanshuoTime
  3843  0F3B  3001               	movlw	1
  3844  0F3C  00AD               	movwf	_shanshuoTime+1
  3845  0F3D  0008               	return
  3846  0F3E                     __end_ofPL42:	
  3847                           
  3848                           	psect	text22
  3849  0420                     __ptext22:	
  3850 ;; *************** function _Init_System *****************
  3851 ;; Defined at:
  3852 ;;		line 63 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2
  3861 ;; Tracked objects:
  3862 ;;		On entry : B00/0
  3863 ;;		On exit  : 300/100
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3866 ;;      Params:         0       0       0       0
  3867 ;;      Locals:         0       0       0       0
  3868 ;;      Temps:          0       0       0       0
  3869 ;;      Totals:         0       0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_main
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           
  3881                           ;psect for function _Init_System
  3882  0420                     _Init_System:	
  3883                           
  3884                           ;incstack = 0
  3885                           ; Regs used in _Init_System: [wreg+status,2]
  3886  0420  0000               	nop	;# 
  3887  0421  0064               	clrwdt	;# 
  3888                           
  3889                           ;main.c: 67: INTCON = 0;
  3890  0422  018B               	clrf	11	;volatile
  3891                           
  3892                           ;main.c: 68: OSCCON = 0X72;
  3893  0423  3072               	movlw	114
  3894  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0425  1303               	bcf	3,6	;RP1=0, select bank0
  3896  0426  0094               	movwf	20	;volatile
  3897                           
  3898                           ;main.c: 69: OPTION_REG = 0;
  3899  0427  0181               	clrf	1	;volatile
  3900                           
  3901                           ;main.c: 74: TRISA = 0x04;
  3902  0428  3004               	movlw	4
  3903  0429  1683               	bsf	3,5	;RP0=1, select bank1
  3904  042A  0085               	movwf	5	;volatile
  3905                           
  3906                           ;main.c: 75: PORTA = 0;
  3907  042B  0186               	clrf	6	;volatile
  3908                           
  3909                           ;main.c: 76: TRISB = 0x20;
  3910  042C  3020               	movlw	32
  3911  042D  1283               	bcf	3,5	;RP0=0, select bank0
  3912  042E  0085               	movwf	5	;volatile
  3913                           
  3914                           ;main.c: 77: PORTB = 0;
  3915  042F  0186               	clrf	6	;volatile
  3916                           
  3917                           ;main.c: 78: WPUB = 0x00;
  3918  0430  0188               	clrf	8	;volatile
  3919                           
  3920                           ;main.c: 79: TRISC = 0;
  3921  0431  1703               	bsf	3,6	;RP1=1, select bank2
  3922  0432  0185               	clrf	5	;volatile
  3923                           
  3924                           ;main.c: 80: PORTC = 0;
  3925  0433  0186               	clrf	6	;volatile
  3926                           
  3927                           ;main.c: 82: PIE1 = 2;
  3928  0434  3002               	movlw	2
  3929  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3930  0436  008E               	movwf	14	;volatile
  3931                           
  3932                           ;main.c: 83: PR2 = 250;
  3933  0437  30FA               	movlw	250
  3934  0438  0091               	movwf	17	;volatile
  3935                           
  3936                           ;main.c: 84: T2CON = 4;
  3937  0439  3004               	movlw	4
  3938  043A  0093               	movwf	19	;volatile
  3939                           
  3940                           ;main.c: 86: INTCON = 0XC0;
  3941  043B  30C0               	movlw	192
  3942  043C  008B               	movwf	11	;volatile
  3943                           
  3944                           ;main.c: 87: ADCON0 = 0X41;
  3945                           
  3946                           ;main.c: 88: ADON = 1;
  3947                           
  3948                           ;main.c: 89: ADCON1 = 0x00;
  3949  043D  2FE4               	ljmp	PL26	;call to abstracted procedure
  3950  043E                     __end_of_Init_System:	
  3951  043E                     __ptext18:	
  3952 ;; *************** function _WorkSleep *****************
  3953 ;; Defined at:
  3954 ;;		line 244 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 300/0
  3965 ;;		On exit  : 200/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3968 ;;      Params:         0       0       0       0
  3969 ;;      Locals:         0       0       0       0
  3970 ;;      Temps:          0       0       0       0
  3971 ;;      Totals:         0       0       0       0
  3972 ;;Total ram usage:        0 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    4
  3975 ;; This function calls:
  3976 ;;		_Refurbish_Sfr
  3977 ;;		_SystemEnterSleep
  3978 ;; This function is called by:
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function _WorkSleep
  3985  043E                     _WorkSleep:	
  3986                           
  3987                           ;main.c: 247: static unsigned char time;
  3988                           ;main.c: 249: if(B_OnOff)time = 0;
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3992  043E  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3993  043F  01B3               	clrf	WorkSleep@time
  3994                           
  3995                           ;main.c: 251: if(++time >= 125)
  3996  0440  307D               	movlw	125
  3997  0441  0AB3               	incf	WorkSleep@time,f
  3998  0442  0233               	subwf	WorkSleep@time,w
  3999  0443  1C03               	skipc
  4000  0444  0008               	return
  4001                           
  4002                           ;main.c: 252: {
  4003                           ;main.c: 253: time = 0;
  4004  0445  01B3               	clrf	WorkSleep@time
  4005                           
  4006                           ;main.c: 254: INTCON = 0;
  4007  0446  018B               	clrf	11	;volatile
  4008                           
  4009                           ;main.c: 255: PIE1 = 0;
  4010  0447  018E               	clrf	14	;volatile
  4011                           
  4012                           ;main.c: 256: PIE2 = 0;
  4013  0448  1703               	bsf	3,6	;RP1=1, select bank2
  4014  0449  0190               	clrf	16	;volatile
  4015                           
  4016                           ;main.c: 257: PIR1 = 0;
  4017  044A  1303               	bcf	3,6	;RP1=0, select bank0
  4018  044B  018D               	clrf	13	;volatile
  4019                           
  4020                           ;main.c: 258: PIR2 = 0;
  4021  044C  1703               	bsf	3,6	;RP1=1, select bank2
  4022  044D  018F               	clrf	15	;volatile
  4023                           
  4024                           ;main.c: 259: T2CON = 0;
  4025  044E  1303               	bcf	3,6	;RP1=0, select bank0
  4026  044F  0193               	clrf	19	;volatile
  4027                           
  4028                           ;main.c: 260: ADCON1 = 0;
  4029  0450  1683               	bsf	3,5	;RP0=1, select bank1
  4030  0451  0196               	clrf	22	;volatile
  4031                           
  4032                           ;main.c: 263: ADCON0 = 0;
  4033  0452  0195               	clrf	21	;volatile
  4034                           
  4035                           ;main.c: 266: PORTA = 0x01;
  4036  0453  3001               	movlw	1
  4037  0454  0086               	movwf	6	;volatile
  4038                           
  4039                           ;main.c: 267: PORTB = 0x00;
  4040  0455  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0456  0186               	clrf	6	;volatile
  4042                           
  4043                           ;main.c: 268: TRISC = 0;
  4044  0457  1703               	bsf	3,6	;RP1=1, select bank2
  4045  0458  0185               	clrf	5	;volatile
  4046                           
  4047                           ;main.c: 269: PORTC = 0x03;
  4048  0459  3003               	movlw	3
  4049  045A  0086               	movwf	6	;volatile
  4050                           
  4051                           ;main.c: 271: TRISB5 =1;
  4052  045B  1303               	bcf	3,6	;RP1=0, select bank0
  4053  045C  1685               	bsf	5,5	;volatile
  4054                           
  4055                           ;main.c: 273: RBIF = 0;
  4056  045D  100B               	bcf	11,0	;volatile
  4057                           
  4058                           ;main.c: 274: RBIE = 1;
  4059  045E  158B               	bsf	11,3	;volatile
  4060                           
  4061                           ;main.c: 275: IOCB5= 1;
  4062  045F  1689               	bsf	9,5	;volatile
  4063                           
  4064                           ;main.c: 276: PORTB;
  4065  0460  0806               	movf	6,w	;volatile
  4066                           
  4067                           ;main.c: 288: SystemEnterSleep();
  4068  0461  2499  118A         	fcall	_SystemEnterSleep
  4069                           
  4070                           ;main.c: 289: if(RAIF)
  4071  0463  1D8D               	btfss	13,3	;volatile
  4072  0464  2C68               	goto	l4717
  4073                           
  4074                           ;main.c: 290: {
  4075                           ;main.c: 291: RAIF = 0;
  4076  0465  118D               	bcf	13,3	;volatile
  4077                           
  4078                           ;main.c: 292: PORTA;
  4079  0466  1683               	bsf	3,5	;RP0=1, select bank1
  4080  0467  0806               	movf	6,w	;volatile
  4081  0468                     l4717:	
  4082                           
  4083                           ;main.c: 293: }
  4084                           ;main.c: 295: Refurbish_Sfr();
  4085  0468  2784  118A         	fcall	_Refurbish_Sfr
  4086                           
  4087                           ;main.c: 296: PORTB &= 0xFD;
  4088  046A  1086               	bcf	6,1	;volatile
  4089                           
  4090                           ;main.c: 297: ADCON0 = 0X41;
  4091                           
  4092                           ;main.c: 298: ADON = 1;
  4093                           
  4094                           ;main.c: 299: ADCON1 = 0x00;
  4095  046B  2FE4               	ljmp	PL26	;call to abstracted procedure
  4096  046C                     __end_of_WorkSleep:	
  4097  046C                     __ptext23:	
  4098 ;; *************** function _CheckTouchKey *****************
  4099 ;; Defined at:
  4100 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/100
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4114 ;;      Params:         0       0       0       0
  4115 ;;      Locals:         0       0       0       0
  4116 ;;      Temps:          0       0       0       0
  4117 ;;      Totals:         0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    5
  4121 ;; This function calls:
  4122 ;;		_CheckKeyOldValue
  4123 ;;		_CheckOnceResult
  4124 ;;		_CheckValidTime
  4125 ;;		_ClearResSum
  4126 ;;		_GetTouchKeyValue
  4127 ;;		_KeyStopClear
  4128 ;;		_TurnKeyFlags
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function _CheckTouchKey
  4136  046C                     _CheckTouchKey:	
  4137                           
  4138                           ;incstack = 0
  4139                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4140  046C  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4141  046D  2C7A               	goto	l1346
  4142  046E  2529  118A         	fcall	_GetTouchKeyValue
  4143  0470  3008               	movlw	8
  4144  0471  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0472  1303               	bcf	3,6	;RP1=0, select bank0
  4146  0473  0AB2               	incf	_KeyCounter,f
  4147  0474  0232               	subwf	_KeyCounter,w
  4148  0475  1C03               	skipc
  4149  0476  2C98               	goto	l4803
  4150  0477  01B2               	clrf	_KeyCounter
  4151  0478  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4152  0479  2C98               	goto	l4803
  4153  047A                     l1346:	
  4154  047A  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4155  047B  2C92               	goto	l4797
  4156  047C  2598  118A         	fcall	_CheckOnceResult
  4157  047E  272D  118A         	fcall	_TurnKeyFlags
  4158  0480  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4159  0481  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4160  0482  2C89               	goto	l4787
  4161  0483  3002               	movlw	2
  4162  0484  1283               	bcf	3,5	;RP0=0, select bank0
  4163  0485  1303               	bcf	3,6	;RP1=0, select bank0
  4164  0486  0232               	subwf	_KeyCounter,w
  4165  0487  1C03               	skipc
  4166  0488  2C8E               	goto	l4795
  4167  0489                     l4787:	
  4168  0489  2719  118A         	fcall	_KeyStopClear
  4169  048B  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4170  048C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4171  048D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4172  048E                     l4795:	
  4173  048E  1283               	bcf	3,5	;RP0=0, select bank0
  4174  048F  1303               	bcf	3,6	;RP1=0, select bank0
  4175  0490  01B2               	clrf	_KeyCounter
  4176  0491  2C98               	goto	l4803
  4177  0492                     l4797:	
  4178  0492  26B1  118A         	fcall	_CheckKeyOldValue
  4179  0494  2589  118A         	fcall	_ClearResSum
  4180  0496  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4181  0497  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4182  0498                     l4803:	
  4183  0498  2F5E               	ljmp	l3637	;# 
  4184  0499                     __end_of_CheckTouchKey:	
  4185  0499                     __ptext19:	
  4186 ;; *************** function _SystemEnterSleep *****************
  4187 ;; Defined at:
  4188 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  92              2    6[BANK0 ] unsigned int 
  4193 ;;  93              2    4[BANK0 ] unsigned int 
  4194 ;;  94              2    2[BANK0 ] unsigned int 
  4195 ;;  91              1    8[BANK0 ] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 300/0
  4202 ;;		On exit  : 300/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4205 ;;      Params:         0       0       0       0
  4206 ;;      Locals:         0       7       0       0
  4207 ;;      Temps:          0       2       0       0
  4208 ;;      Totals:         0       9       0       0
  4209 ;;Total ram usage:        9 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    3
  4212 ;; This function calls:
  4213 ;;		_ClearResSum
  4214 ;;		_GetTouchKeyValue
  4215 ;;		_KeyClearOne
  4216 ;; This function is called by:
  4217 ;;		_WorkSleep
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _SystemEnterSleep
  4223  0499                     _SystemEnterSleep:	
  4224  0499                     l1358:	
  4225                           ;incstack = 0
  4226                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4227                           
  4228  0499  0064               	clrwdt	;# 
  4229  049A  1683               	bsf	3,5	;RP0=1, select bank1
  4230  049B  1303               	bcf	3,6	;RP1=0, select bank1
  4231  049C  0181               	clrf	1	;volatile
  4232  049D  3007               	movlw	7
  4233  049E  1283               	bcf	3,5	;RP0=0, select bank0
  4234  049F  0481               	iorwf	1,f	;volatile
  4235  04A0  1581               	bsf	1,3	;volatile
  4236  04A1  0064               	clrwdt	;# 
  4237  04A2  300A               	movlw	10
  4238  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  4239  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  4240  04A5  0081               	movwf	1	;volatile
  4241  04A6  0064               	clrwdt	;# 
  4242  04A7  1283               	bcf	3,5	;RP0=0, select bank2
  4243  04A8  1703               	bsf	3,6	;RP1=1, select bank2
  4244  04A9  0191               	clrf	17	;volatile
  4245  04AA  0193               	clrf	19	;volatile
  4246  04AB  3002               	movlw	2
  4247  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  4248  04AD  0094               	movwf	20	;volatile
  4249  04AE  0063               	sleep	;# 
  4250  04AF  0000               	nop	;# 
  4251  04B0  0064               	clrwdt	;# 
  4252  04B1  3072               	movlw	114
  4253  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  4254  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  4255  04B4  0094               	movwf	20	;volatile
  4256  04B5  3079               	movlw	121
  4257  04B6  1703               	bsf	3,6	;RP1=1, select bank2
  4258  04B7  0093               	movwf	19	;volatile
  4259  04B8  2589  118A         	fcall	_ClearResSum
  4260  04BA  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4261  04BB  2529  118A         	fcall	_GetTouchKeyValue
  4262  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  4263  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  4264  04BF  27F0  118A         	fcall	PL36	;call to abstracted procedure
  4265  04C1  1C0B               	btfss	11,0	;volatile
  4266  04C2  188B               	btfsc	11,1	;volatile
  4267  04C3  2CC6               	goto	l4287
  4268  04C4  1D8D               	btfss	13,3	;volatile
  4269  04C5  2CCD               	goto	l4299
  4270  04C6                     l4287:	
  4271  04C6  2589               	fcall	_ClearResSum
  4272  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  4273  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  4274  04C9  01B2               	clrf	_KeyCounter
  4275  04CA  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4276  04CB  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4277  04CC  0008               	return
  4278  04CD                     l4299:	
  4279  04CD  0850               	movf	SystemEnterSleep@92,w
  4280  04CE  3907               	andlw	7
  4281  04CF  1003               	clrc
  4282  04D0  1903               	btfsc	3,2
  4283  04D1  2D23               	goto	L9
  4284  04D2  0D52               	rlf	SystemEnterSleep@91,w
  4285  04D3  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4286  04D4  0084               	movwf	4
  4287  04D5  1383               	bcf	3,7	;select IRP bank1
  4288  04D6  0800               	movf	0,w
  4289  04D7  00CE               	movwf	SystemEnterSleep@93
  4290  04D8  0A84               	incf	4,f
  4291  04D9  0800               	movf	0,w
  4292  04DA  00CF               	movwf	SystemEnterSleep@93+1
  4293  04DB  00CD               	movwf	SystemEnterSleep@94+1
  4294  04DC  084E               	movf	SystemEnterSleep@93,w
  4295  04DD  00CC               	movwf	SystemEnterSleep@94
  4296  04DE  084E               	movf	SystemEnterSleep@93,w
  4297  04DF  044F               	iorwf	SystemEnterSleep@93+1,w
  4298  04E0  1903               	btfsc	3,2
  4299  04E1  2D22               	goto	l4333
  4300  04E2  0852               	movf	SystemEnterSleep@91,w
  4301  04E3  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4302  04E4  0084               	movwf	4
  4303  04E5  158A  2000  118A   	fcall	stringdir
  4304  04E8  07CC               	addwf	SystemEnterSleep@94,f
  4305  04E9  1803               	skipnc
  4306  04EA  0ACD               	incf	SystemEnterSleep@94+1,f
  4307  04EB  1003               	clrc
  4308  04EC  0D52               	rlf	SystemEnterSleep@91,w
  4309  04ED  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4310  04EE  27CF  118A         	fcall	PL14	;call to abstracted procedure
  4311  04F0  084D               	movf	SystemEnterSleep@94+1,w
  4312  04F1  024B               	subwf	??_SystemEnterSleep+1,w
  4313  04F2  1D03               	skipz
  4314  04F3  2CF6               	goto	u4205
  4315  04F4  084C               	movf	SystemEnterSleep@94,w
  4316  04F5  024A               	subwf	??_SystemEnterSleep,w
  4317  04F6                     u4205:	
  4318  04F6  1C03               	skipc
  4319  04F7  2D0A               	goto	L8
  4320  04F8  27F0  118A         	fcall	PL36	;call to abstracted procedure
  4321  04FA                     l4313:	
  4322  04FA  0850               	movf	SystemEnterSleep@92,w
  4323  04FB  3907               	andlw	7
  4324  04FC  1D03               	btfss	3,2
  4325  04FD  2D01               	goto	l4317
  4326  04FE  0852               	movf	SystemEnterSleep@91,w
  4327  04FF  268E  118A         	fcall	_KeyClearOne
  4328  0501                     l4317:	
  4329  0501  1283               	bcf	3,5	;RP0=0, select bank0
  4330  0502  3003               	movlw	3
  4331  0503  1303               	bcf	3,6	;RP1=0, select bank0
  4332  0504  1003               	clrc
  4333  0505  27F5  118A         	fcall	PL38	;call to abstracted procedure
  4334  0507  1803               	btfsc	3,0
  4335  0508  2CC6               	goto	l4287
  4336  0509  2CFA               	goto	l4313
  4337  050A                     L8:	
  4338  050A  0D52               	rlf	SystemEnterSleep@91,w
  4339  050B  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4340  050C  27CF  118A         	fcall	PL14	;call to abstracted procedure
  4341  050E  1003               	clrc
  4342  050F  0D52               	rlf	SystemEnterSleep@91,w
  4343  0510  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4344  0511  27B9  118A         	fcall	PL10	;call to abstracted procedure
  4345  0513  0800               	movf	0,w
  4346  0514  00CA               	movwf	??_SystemEnterSleep
  4347  0515  0A84               	incf	4,f
  4348  0516  0800               	movf	0,w
  4349  0517  00CB               	movwf	??_SystemEnterSleep+1
  4350  0518  1003               	clrc
  4351  0519  0D52               	rlf	SystemEnterSleep@91,w
  4352  051A  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4353  051B  27B9  118A         	fcall	PL10	;call to abstracted procedure
  4354  051D  084E               	movf	SystemEnterSleep@93,w
  4355  051E  0080               	movwf	0
  4356  051F  0A84               	incf	4,f
  4357  0520  084F               	movf	SystemEnterSleep@93+1,w
  4358  0521  0080               	movwf	0
  4359  0522                     l4333:	
  4360  0522  1003               	clrc
  4361  0523                     L9:	
  4362  0523  3003               	movlw	3
  4363  0524  27F5  118A         	fcall	PL38	;call to abstracted procedure
  4364  0526  1803               	btfsc	3,0
  4365  0527  2C99               	goto	l1358
  4366  0528  2CCD               	goto	l4299
  4367  0529                     __end_of_SystemEnterSleep:	
  4368  0529                     __ptext27:	
  4369 ;; *************** function _GetTouchKeyValue *****************
  4370 ;; Defined at:
  4371 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  63              2    5[COMMON] unsigned int 
  4376 ;;  64              2    3[COMMON] unsigned int 
  4377 ;;  62              1    7[COMMON] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  1    wreg      void 
  4380 ;; Registers used:
  4381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/200
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4387 ;;      Params:         0       0       0       0
  4388 ;;      Locals:         5       0       0       0
  4389 ;;      Temps:          0       0       0       0
  4390 ;;      Totals:         5       0       0       0
  4391 ;;Total ram usage:        5 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    2
  4394 ;; This function calls:
  4395 ;;		_ClearResSum
  4396 ;; This function is called by:
  4397 ;;		_CheckTouchKey
  4398 ;;		_SystemEnterSleep
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _GetTouchKeyValue
  4404  0529                     _GetTouchKeyValue:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4408  0529  01F7               	clrf	GetTouchKeyValue@62
  4409  052A  01F5               	clrf	GetTouchKeyValue@63
  4410  052B  0AF5               	incf	GetTouchKeyValue@63,f
  4411  052C  01F6               	clrf	GetTouchKeyValue@63+1
  4412  052D                     l3095:	
  4413  052D  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4414  052E  2D33               	goto	l3099
  4415  052F  0875               	movf	GetTouchKeyValue@63,w
  4416  0530  3907               	andlw	7
  4417  0531  1903               	btfsc	3,2
  4418  0532  2D7F               	goto	l3127
  4419  0533                     l3099:	
  4420  0533  1283               	bcf	3,5	;RP0=0, select bank2
  4421  0534  1703               	bsf	3,6	;RP1=1, select bank2
  4422  0535  0191               	clrf	17	;volatile
  4423  0536  0192               	clrf	18	;volatile
  4424  0537  3079               	movlw	121
  4425  0538  0093               	movwf	19	;volatile
  4426  0539  1303               	bcf	3,6	;RP1=0, select bank0
  4427  053A  1305               	bcf	5,6	;volatile
  4428  053B  1306               	bcf	6,6	;volatile
  4429  053C  0000               	nop	;# 
  4430  053D  0000               	nop	;# 
  4431  053E  0000               	nop	;# 
  4432  053F  0000               	nop	;# 
  4433  0540  0000               	nop	;# 
  4434  0541  0000               	nop	;# 
  4435  0542  0000               	nop	;# 
  4436  0543  0000               	nop	;# 
  4437  0544  1283               	bcf	3,5	;RP0=0, select bank0
  4438  0545  1303               	bcf	3,6	;RP1=0, select bank0
  4439  0546  1705               	bsf	5,6	;volatile
  4440  0547  0877               	movf	GetTouchKeyValue@62,w
  4441  0548  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4442  0549  0084               	movwf	4
  4443  054A  158A  2000  118A   	fcall	stringdir
  4444  054D  1703               	bsf	3,6	;RP1=1, select bank2
  4445  054E  0091               	movwf	17	;volatile
  4446  054F  0877               	movf	GetTouchKeyValue@62,w
  4447  0550  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4448  0551  0084               	movwf	4
  4449  0552  158A  2000  118A   	fcall	stringdir
  4450  0555  0092               	movwf	18	;volatile
  4451  0556  0000               	nop	;# 
  4452  0557  0000               	nop	;# 
  4453  0558  0000               	nop	;# 
  4454  0559  0000               	nop	;# 
  4455  055A  1283               	bcf	3,5	;RP0=0, select bank2
  4456  055B  1703               	bsf	3,6	;RP1=1, select bank2
  4457  055C  1411               	bsf	17,0	;volatile
  4458  055D  30D0               	movlw	208
  4459  055E  00F3               	movwf	GetTouchKeyValue@64
  4460  055F  3007               	movlw	7
  4461  0560  00F4               	movwf	GetTouchKeyValue@64+1
  4462  0561                     l1268:	
  4463  0561  1B91               	btfsc	17,7	;volatile
  4464  0562  2D6F               	goto	l3125
  4465  0563  3001               	movlw	1
  4466  0564  02F3               	subwf	GetTouchKeyValue@64,f
  4467  0565  1C03               	skipc
  4468  0566  03F4               	decf	GetTouchKeyValue@64+1,f
  4469  0567  0873               	movf	GetTouchKeyValue@64,w
  4470  0568  0474               	iorwf	GetTouchKeyValue@64+1,w
  4471  0569  1D03               	btfss	3,2
  4472  056A  2D61               	goto	l1268
  4473  056B  30FF               	movlw	255
  4474  056C  1303               	bcf	3,6	;RP1=0, select bank0
  4475  056D  00B2               	movwf	_KeyCounter
  4476  056E  2D89               	ljmp	l2943
  4477  056F                     l3125:	
  4478  056F  1003               	clrc
  4479  0570  0D77               	rlf	GetTouchKeyValue@62,w
  4480  0571  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4481  0572  0084               	movwf	4
  4482  0573  0816               	movf	22,w	;volatile
  4483  0574  1383               	bcf	3,7	;select IRP bank1
  4484  0575  0780               	addwf	0,f
  4485  0576  0F84               	incfsz	4,f
  4486  0577  0800               	movf	0,w
  4487  0578  1803               	skipnc
  4488  0579  0A00               	incf	0,w
  4489  057A  00FF               	movwf	127
  4490  057B  0817               	movf	23,w	;volatile
  4491  057C  077F               	addwf	127,w
  4492  057D  0080               	movwf	0
  4493  057E  0384               	decf	4,f
  4494  057F                     l3127:	
  4495  057F  3003               	movlw	3
  4496  0580  1003               	clrc
  4497  0581  0DF5               	rlf	GetTouchKeyValue@63,f
  4498  0582  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4499  0583  0AF7               	incf	GetTouchKeyValue@62,f
  4500  0584  0277               	subwf	GetTouchKeyValue@62,w
  4501  0585  1C03               	skipc
  4502  0586  2D2D               	goto	l3095
  4503  0587  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4504  0588  0008               	return
  4505  0589                     __end_of_GetTouchKeyValue:	
  4506  0589                     __ptext28:	
  4507 ;; *************** function _ClearResSum *****************
  4508 ;; Defined at:
  4509 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  56              1    2[COMMON] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/200
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4523 ;;      Params:         0       0       0       0
  4524 ;;      Locals:         1       0       0       0
  4525 ;;      Temps:          0       0       0       0
  4526 ;;      Totals:         1       0       0       0
  4527 ;;Total ram usage:        1 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_GetTouchKeyValue
  4534 ;;		_CheckTouchKey
  4535 ;;		_SystemEnterSleep
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _ClearResSum
  4541  0589                     _ClearResSum:	
  4542  0589                     l2943:	
  4543                           ;incstack = 0
  4544                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4545                           
  4546  0589  01F2               	clrf	ClearResSum@56
  4547  058A                     l2945:	
  4548  058A  1003               	clrc
  4549  058B  0D72               	rlf	ClearResSum@56,w
  4550  058C  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4551  058D  0084               	movwf	4
  4552  058E  3003               	movlw	3
  4553  058F  1383               	bcf	3,7	;select IRP bank1
  4554  0590  0180               	clrf	0
  4555  0591  0A84               	incf	4,f
  4556  0592  0180               	clrf	0
  4557  0593  0AF2               	incf	ClearResSum@56,f
  4558  0594  0272               	subwf	ClearResSum@56,w
  4559  0595  1803               	btfsc	3,0
  4560  0596  0008               	return
  4561  0597  2D8A               	goto	l2945
  4562  0598                     __end_of_ClearResSum:	
  4563  0598                     __ptext30:	
  4564 ;; *************** function _CheckOnceResult *****************
  4565 ;; Defined at:
  4566 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  71              2   10[BANK0 ] unsigned int 
  4571 ;;  72              2    7[BANK0 ] unsigned int 
  4572 ;;  73              2    4[BANK0 ] unsigned int 
  4573 ;;  68              1   12[BANK0 ] unsigned char 
  4574 ;;  69              1    9[BANK0 ] unsigned char 
  4575 ;;  70              1    6[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/100
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4585 ;;      Params:         0       0       0       0
  4586 ;;      Locals:         0       9       0       0
  4587 ;;      Temps:          0       4       0       0
  4588 ;;      Totals:         0      13       0       0
  4589 ;;Total ram usage:       13 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    3
  4592 ;; This function calls:
  4593 ;;		_KeyClearOne
  4594 ;;		_KeyHave
  4595 ;;		_KeyIsIn
  4596 ;; This function is called by:
  4597 ;;		_CheckTouchKey
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _CheckOnceResult
  4603  0598                     _CheckOnceResult:	
  4604                           
  4605                           ;incstack = 0
  4606                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4607  0598  1283               	bcf	3,5	;RP0=0, select bank0
  4608  0599  1303               	bcf	3,6	;RP1=0, select bank0
  4609  059A  01D6               	clrf	CheckOnceResult@68
  4610  059B  01A0               	clrf	_KeyData	;volatile
  4611  059C  01A1               	clrf	_KeyData+1	;volatile
  4612  059D  01B1               	clrf	_KeyMaxSub
  4613  059E                     l4533:	
  4614  059E  0856               	movf	CheckOnceResult@68,w
  4615  059F  3907               	andlw	7
  4616  05A0  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4617  05A1  0084               	movwf	4
  4618  05A2  158A  2000  118A   	fcall	stringdir
  4619  05A5  00D0               	movwf	CheckOnceResult@70
  4620  05A6  1003               	clrc
  4621  05A7  0D56               	rlf	CheckOnceResult@68,w
  4622  05A8  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4623  05A9  0084               	movwf	4
  4624  05AA  3003               	movlw	3
  4625  05AB                     u4675:	
  4626  05AB  0A84               	incf	4,f
  4627  05AC  1003               	clrc
  4628  05AD  1383               	bcf	3,7	;select IRP bank1
  4629  05AE  0C80               	rrf	0,f
  4630  05AF  0384               	decf	4,f
  4631  05B0  0C80               	rrf	0,f
  4632  05B1  3EFF               	addlw	-1
  4633  05B2  1D03               	skipz
  4634  05B3  2DAB               	goto	u4675
  4635  05B4  1003               	clrc
  4636  05B5  0D56               	rlf	CheckOnceResult@68,w
  4637  05B6  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4638  05B7  0084               	movwf	4
  4639  05B8  0800               	movf	0,w
  4640  05B9  00D4               	movwf	CheckOnceResult@71
  4641  05BA  0A84               	incf	4,f
  4642  05BB  0800               	movf	0,w
  4643  05BC  00D5               	movwf	CheckOnceResult@71+1
  4644  05BD  0856               	movf	CheckOnceResult@68,w
  4645  05BE  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4646  05BF  0084               	movwf	4
  4647  05C0  158A  2000  118A   	fcall	stringdir
  4648  05C3  00D3               	movwf	CheckOnceResult@69
  4649  05C4  00D1               	movwf	CheckOnceResult@72
  4650  05C5  01D2               	clrf	CheckOnceResult@72+1
  4651  05C6  0854               	movf	CheckOnceResult@71,w
  4652  05C7  07D1               	addwf	CheckOnceResult@72,f
  4653  05C8  1803               	skipnc
  4654  05C9  0AD2               	incf	CheckOnceResult@72+1,f
  4655  05CA  0855               	movf	CheckOnceResult@71+1,w
  4656  05CB  07D2               	addwf	CheckOnceResult@72+1,f
  4657  05CC  0856               	movf	CheckOnceResult@68,w
  4658  05CD  267E  118A         	fcall	_KeyIsIn
  4659  05CF  3A00               	xorlw	0
  4660  05D0  1D03               	skipz
  4661  05D1  2E2F               	goto	l4575
  4662  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4663  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4664  05D4  1003               	clrc
  4665  05D5  0D56               	rlf	CheckOnceResult@68,w
  4666  05D6  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4667  05D7  0084               	movwf	4
  4668  05D8  1383               	bcf	3,7	;select IRP bank1
  4669  05D9  0800               	movf	0,w
  4670  05DA  00CE               	movwf	CheckOnceResult@73
  4671  05DB  0A84               	incf	4,f
  4672  05DC  0800               	movf	0,w
  4673  05DD  00CF               	movwf	CheckOnceResult@73+1
  4674  05DE  1003               	clrc
  4675  05DF  0D56               	rlf	CheckOnceResult@68,w
  4676  05E0  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4677  05E1  27B2  118A         	fcall	PL8	;call to abstracted procedure
  4678  05E3  0252               	subwf	CheckOnceResult@72+1,w
  4679  05E4  1D03               	skipz
  4680  05E5  2DE8               	goto	u4695
  4681  05E6  084A               	movf	??_CheckOnceResult,w
  4682  05E7  0251               	subwf	CheckOnceResult@72,w
  4683  05E8                     u4695:	
  4684  05E8  1803               	skipnc
  4685  05E9  2DF7               	goto	l4551
  4686  05EA  1003               	clrc
  4687  05EB  0D56               	rlf	CheckOnceResult@68,w
  4688  05EC  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4689  05ED  27B2  118A         	fcall	PL8	;call to abstracted procedure
  4690  05EF  0854               	movf	CheckOnceResult@71,w
  4691  05F0  024A               	subwf	??_CheckOnceResult,w
  4692  05F1  00D4               	movwf	CheckOnceResult@71
  4693  05F2  0855               	movf	CheckOnceResult@71+1,w
  4694  05F3  1C03               	skipc
  4695  05F4  0A55               	incf	CheckOnceResult@71+1,w
  4696  05F5  024B               	subwf	??_CheckOnceResult+1,w
  4697  05F6  2E1B               	goto	L10
  4698  05F7                     l4551:	
  4699  05F7  084F               	movf	CheckOnceResult@73+1,w
  4700  05F8  0252               	subwf	CheckOnceResult@72+1,w
  4701  05F9  1D03               	skipz
  4702  05FA  2DFD               	goto	u4705
  4703  05FB  084E               	movf	CheckOnceResult@73,w
  4704  05FC  0251               	subwf	CheckOnceResult@72,w
  4705  05FD                     u4705:	
  4706  05FD  1803               	skipnc
  4707  05FE  2E76               	goto	l4597
  4708  05FF  1003               	clrc
  4709  0600  0D56               	rlf	CheckOnceResult@68,w
  4710  0601  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4711  0602  27B2  118A         	fcall	PL8	;call to abstracted procedure
  4712  0604  0252               	subwf	CheckOnceResult@72+1,w
  4713  0605  1D03               	skipz
  4714  0606  2E09               	goto	u4715
  4715  0607  084A               	movf	??_CheckOnceResult,w
  4716  0608  0251               	subwf	CheckOnceResult@72,w
  4717  0609                     u4715:	
  4718  0609  1803               	skipnc
  4719  060A  2E76               	goto	l4597
  4720  060B  1003               	clrc
  4721  060C  0D56               	rlf	CheckOnceResult@68,w
  4722  060D  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4723  060E  0084               	movwf	4
  4724  060F  084E               	movf	CheckOnceResult@73,w
  4725  0610  0080               	movwf	0
  4726  0611  0A84               	incf	4,f
  4727  0612  084F               	movf	CheckOnceResult@73+1,w
  4728  0613  0080               	movwf	0
  4729  0614  0854               	movf	CheckOnceResult@71,w
  4730  0615  024E               	subwf	CheckOnceResult@73,w
  4731  0616  00D4               	movwf	CheckOnceResult@71
  4732  0617  0855               	movf	CheckOnceResult@71+1,w
  4733  0618  1C03               	skipc
  4734  0619  0A55               	incf	CheckOnceResult@71+1,w
  4735  061A  024F               	subwf	CheckOnceResult@73+1,w
  4736  061B                     L10:	
  4737  061B  00D5               	movwf	CheckOnceResult@71+1
  4738  061C  0856               	movf	CheckOnceResult@68,w
  4739  061D  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4740  061E  0084               	movwf	4
  4741  061F  0180               	clrf	0
  4742  0620  0855               	movf	CheckOnceResult@71+1,w
  4743  0621  1903               	btfsc	3,2
  4744  0622  2E25               	goto	l4565
  4745  0623  30FF               	movlw	255
  4746  0624  2E26               	goto	L11
  4747  0625                     l4565:	
  4748  0625  0854               	movf	CheckOnceResult@71,w
  4749  0626                     L11:	
  4750  0626  00D3               	movwf	CheckOnceResult@69
  4751  0627  0231               	subwf	_KeyMaxSub,w
  4752  0628  1803               	skipnc
  4753  0629  2E2D               	goto	l4571
  4754  062A  0853               	movf	CheckOnceResult@69,w
  4755  062B  00B1               	movwf	_KeyMaxSub
  4756  062C  2E70               	goto	l4595
  4757  062D                     l4571:	
  4758  062D  0AB2               	incf	_KeyCounter,f
  4759  062E  2E76               	goto	l4597
  4760  062F                     l4575:	
  4761  062F  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0630  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0631  1003               	clrc
  4764  0632  0D56               	rlf	CheckOnceResult@68,w
  4765  0633  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4766  0634  0084               	movwf	4
  4767  0635  1383               	bcf	3,7	;select IRP bank1
  4768  0636  0800               	movf	0,w
  4769  0637  00CA               	movwf	??_CheckOnceResult
  4770  0638  0A84               	incf	4,f
  4771  0639  0800               	movf	0,w
  4772  063A  00CB               	movwf	??_CheckOnceResult+1
  4773  063B  084A               	movf	??_CheckOnceResult,w
  4774  063C  3E01               	addlw	1
  4775  063D  00CC               	movwf	??_CheckOnceResult+2
  4776  063E  084B               	movf	??_CheckOnceResult+1,w
  4777  063F  1803               	skipnc
  4778  0640  3E01               	addlw	1
  4779  0641  00CD               	movwf	??_CheckOnceResult+3
  4780  0642  0852               	movf	CheckOnceResult@72+1,w
  4781  0643  024D               	subwf	??_CheckOnceResult+3,w
  4782  0644  1D03               	skipz
  4783  0645  2E48               	goto	u4745
  4784  0646  0851               	movf	CheckOnceResult@72,w
  4785  0647  024C               	subwf	??_CheckOnceResult+2,w
  4786  0648                     u4745:	
  4787  0648  1C03               	btfss	3,0
  4788  0649  2E76               	goto	l4597
  4789  064A  1003               	clrc
  4790  064B  0D56               	rlf	CheckOnceResult@68,w
  4791  064C  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4792  064D  0084               	movwf	4
  4793  064E  0800               	movf	0,w
  4794  064F  27A0  118A         	fcall	PL4	;call to abstracted procedure
  4795  0651  1C03               	skipc
  4796  0652  2E5C               	goto	l4585
  4797  0653  1003               	clrc
  4798  0654  0D56               	rlf	CheckOnceResult@68,w
  4799  0655  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4800  0656  0084               	movwf	4
  4801  0657  0800               	movf	0,w
  4802  0658  27A0  118A         	fcall	PL4	;call to abstracted procedure
  4803  065A  1803               	skipnc
  4804  065B  2E68               	goto	l4589
  4805  065C                     l4585:	
  4806  065C  0856               	movf	CheckOnceResult@68,w
  4807  065D  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4808  065E  0084               	movwf	4
  4809  065F  3009               	movlw	9
  4810  0660  0A80               	incf	0,f
  4811  0661  0200               	subwf	0,w
  4812  0662  1C03               	skipc
  4813  0663  2E6C               	goto	l4593
  4814  0664  0856               	movf	CheckOnceResult@68,w
  4815  0665  268E  118A         	fcall	_KeyClearOne
  4816  0667  2E76               	goto	l4597
  4817  0668                     l4589:	
  4818  0668  0856               	movf	CheckOnceResult@68,w
  4819  0669  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4820  066A  0084               	movwf	4
  4821  066B  0180               	clrf	0
  4822  066C                     l4593:	
  4823  066C  0821               	movf	_KeyData+1,w	;volatile
  4824  066D  0420               	iorwf	_KeyData,w	;volatile
  4825  066E  1D03               	btfss	3,2
  4826  066F  2E76               	goto	l4597
  4827  0670                     l4595:	
  4828  0670  0850               	movf	CheckOnceResult@70,w
  4829  0671  00F2               	movwf	KeyHave@59
  4830  0672  01F3               	clrf	KeyHave@59+1
  4831  0673  0856               	movf	CheckOnceResult@68,w
  4832  0674  26A3  118A         	fcall	_KeyHave
  4833  0676                     l4597:	
  4834  0676  3003               	movlw	3
  4835  0677  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0678  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0679  0AD6               	incf	CheckOnceResult@68,f
  4838  067A  0256               	subwf	CheckOnceResult@68,w
  4839  067B  1803               	btfsc	3,0
  4840  067C  0008               	return
  4841  067D  2D9E               	goto	l4533
  4842  067E                     __end_of_CheckOnceResult:	
  4843  067E                     __ptext34:	
  4844 ;; *************** function _KeyIsIn *****************
  4845 ;; Defined at:
  4846 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;  45              1    wreg     unsigned char 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  45              1    3[COMMON] unsigned char 
  4851 ;;  46              1    2[COMMON] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      unsigned char 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4861 ;;      Params:         0       0       0       0
  4862 ;;      Locals:         2       0       0       0
  4863 ;;      Temps:          0       0       0       0
  4864 ;;      Totals:         2       0       0       0
  4865 ;;Total ram usage:        2 bytes
  4866 ;; Hardware stack levels used:    2
  4867 ;; Hardware stack levels required when called:    1
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_KeyClearIn
  4872 ;;		_CheckOnceResult
  4873 ;;		_CheckKeyOldValue
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _KeyIsIn
  4879  067E                     _KeyIsIn:	
  4880                           
  4881                           ;incstack = 0
  4882                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4883                           ;KeyIsIn@45 stored from wreg
  4884  067E  00F3               	movwf	KeyIsIn@45
  4885  067F  3907               	andlw	7
  4886  0680  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4887  0681  0084               	movwf	4
  4888  0682  158A  2000  118A   	fcall	stringdir
  4889  0685  00F2               	movwf	KeyIsIn@46
  4890  0686  1DF3               	btfss	KeyIsIn@45,3
  4891  0687  2E8A               	goto	l2929
  4892  0688  087A               	movf	_KeyFlag+1,w	;volatile
  4893  0689  2E8B               	goto	L15
  4894  068A                     l2929:	
  4895  068A  0879               	movf	_KeyFlag,w	;volatile
  4896  068B                     L15:	
  4897  068B  05F2               	andwf	KeyIsIn@46,f
  4898  068C  0872               	movf	KeyIsIn@46,w
  4899  068D  0008               	return
  4900  068E                     __end_of_KeyIsIn:	
  4901  068E                     __ptext32:	
  4902 ;; *************** function _KeyClearOne *****************
  4903 ;; Defined at:
  4904 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  49              1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  49              1    2[COMMON] unsigned char 
  4909 ;; Return value:  Size  Location     Type
  4910 ;;                  1    wreg      void 
  4911 ;; Registers used:
  4912 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4913 ;; Tracked objects:
  4914 ;;		On entry : 0/0
  4915 ;;		On exit  : 0/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4918 ;;      Params:         0       0       0       0
  4919 ;;      Locals:         1       0       0       0
  4920 ;;      Temps:          0       0       0       0
  4921 ;;      Totals:         1       0       0       0
  4922 ;;Total ram usage:        1 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:    1
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_KeyClearIn
  4929 ;;		_KeyStopClear
  4930 ;;		_CheckOnceResult
  4931 ;;		_SystemEnterSleep
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           
  4936                           ;psect for function _KeyClearOne
  4937  068E                     _KeyClearOne:	
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4941                           ;KeyClearOne@49 stored from wreg
  4942  068E  00F2               	movwf	KeyClearOne@49
  4943  068F  1003               	clrc
  4944  0690  0D72               	rlf	KeyClearOne@49,w
  4945  0691  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4946  0692  0084               	movwf	4
  4947  0693  1383               	bcf	3,7	;select IRP bank1
  4948  0694  27DE  118A         	fcall	PL22	;call to abstracted procedure
  4949  0696  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4950  0697  0084               	movwf	4
  4951  0698  27DE  118A         	fcall	PL22	;call to abstracted procedure
  4952  069A  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4953  069B  0084               	movwf	4
  4954  069C  27DE               	fcall	PL22	;call to abstracted procedure
  4955  069D  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4956  069E  0084               	movwf	4
  4957  069F  0180               	clrf	0
  4958  06A0  0A84               	incf	4,f
  4959  06A1  0180               	clrf	0	;# 
  4960  06A2  0008               	return
  4961  06A3                     __end_of_KeyClearOne:	
  4962  06A3                     __ptext31:	
  4963 ;; *************** function _KeyHave *****************
  4964 ;; Defined at:
  4965 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;  58              1    wreg     unsigned char 
  4968 ;;  59              2    2[COMMON] unsigned int 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  58              1    4[COMMON] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;                  1    wreg      void 
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, status,0
  4975 ;; Tracked objects:
  4976 ;;		On entry : B00/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4980 ;;      Params:         2       0       0       0
  4981 ;;      Locals:         1       0       0       0
  4982 ;;      Temps:          0       0       0       0
  4983 ;;      Totals:         3       0       0       0
  4984 ;;Total ram usage:        3 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    1
  4987 ;; This function calls:
  4988 ;;		Nothing
  4989 ;; This function is called by:
  4990 ;;		_CheckOnceResult
  4991 ;; This function uses a non-reentrant model
  4992 ;;
  4993                           
  4994                           
  4995                           ;psect for function _KeyHave
  4996  06A3                     _KeyHave:	
  4997                           
  4998                           ;incstack = 0
  4999                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5000                           ;KeyHave@58 stored from wreg
  5001  06A3  00F4               	movwf	KeyHave@58
  5002  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  5003  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  5004  06A6  0AB2               	incf	_KeyCounter,f
  5005  06A7  01A0               	clrf	_KeyData	;volatile
  5006  06A8  01A1               	clrf	_KeyData+1	;volatile
  5007  06A9  1DF4               	btfss	KeyHave@58,3
  5008  06AA  2EAE               	goto	l3083
  5009  06AB  0872               	movf	KeyHave@59,w
  5010  06AC  00A1               	movwf	_KeyData+1	;volatile
  5011  06AD  0008               	return
  5012  06AE                     l3083:	
  5013  06AE  0872               	movf	KeyHave@59,w
  5014  06AF  00A0               	movwf	_KeyData	;volatile
  5015  06B0  0008               	return
  5016  06B1                     __end_of_KeyHave:	
  5017  06B1                     __ptext33:	
  5018 ;; *************** function _CheckKeyOldValue *****************
  5019 ;; Defined at:
  5020 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;		None
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  80              2    2[BANK0 ] unsigned int 
  5025 ;;  79              2    0[BANK0 ] unsigned int 
  5026 ;;  78              1    4[BANK0 ] unsigned char 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/100
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5036 ;;      Params:         0       0       0       0
  5037 ;;      Locals:         0       5       0       0
  5038 ;;      Temps:          2       0       0       0
  5039 ;;      Totals:         2       5       0       0
  5040 ;;Total ram usage:        7 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    3
  5043 ;; This function calls:
  5044 ;;		_KeyIsIn
  5045 ;; This function is called by:
  5046 ;;		_CheckTouchKey
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function _CheckKeyOldValue
  5052  06B1                     _CheckKeyOldValue:	
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5056  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  5057  06B2  3004               	movlw	4
  5058  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  5059  06B4  01CE               	clrf	CheckKeyOldValue@78
  5060  06B5  0AB0               	incf	CheckKeyOldValue@F77,f
  5061  06B6  0230               	subwf	CheckKeyOldValue@F77,w
  5062  06B7  1C03               	btfss	3,0
  5063  06B8  0008               	return
  5064  06B9  01B0               	clrf	CheckKeyOldValue@F77
  5065  06BA                     l3567:	
  5066  06BA  1003               	clrc
  5067  06BB  0D4E               	rlf	CheckKeyOldValue@78,w
  5068  06BC  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5069  06BD  0084               	movwf	4
  5070  06BE  1383               	bcf	3,7	;select IRP bank1
  5071  06BF  0800               	movf	0,w
  5072  06C0  00CA               	movwf	CheckKeyOldValue@79
  5073  06C1  0A84               	incf	4,f
  5074  06C2  0800               	movf	0,w
  5075  06C3  00CB               	movwf	CheckKeyOldValue@79+1
  5076  06C4  084E               	movf	CheckKeyOldValue@78,w
  5077  06C5  267E  118A         	fcall	_KeyIsIn
  5078  06C7  3A00               	xorlw	0
  5079  06C8  1D03               	skipz
  5080  06C9  2F00               	goto	l1309
  5081  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  5082  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  5083  06CC  1003               	clrc
  5084  06CD  0D4E               	rlf	CheckKeyOldValue@78,w
  5085  06CE  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5086  06CF  0084               	movwf	4
  5087  06D0  1383               	bcf	3,7	;select IRP bank1
  5088  06D1  2792  118A         	fcall	PL2	;call to abstracted procedure
  5089  06D3  1903               	skipnz
  5090  06D4  024C               	subwf	CheckKeyOldValue@80,w
  5091  06D5  1C03               	skipc
  5092  06D6  2EDD               	goto	L12
  5093  06D7  0F4C               	incfsz	CheckKeyOldValue@80,w
  5094  06D8  2F00               	goto	l1309
  5095  06D9  0A4D               	incf	CheckKeyOldValue@80+1,w
  5096  06DA  1D03               	btfss	3,2
  5097  06DB  2F00               	goto	l1309
  5098  06DC  1003               	clrc
  5099  06DD                     L12:	
  5100  06DD  0D4E               	rlf	CheckKeyOldValue@78,w
  5101  06DE  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5102  06DF  0084               	movwf	4
  5103  06E0  2792  118A         	fcall	PL2	;call to abstracted procedure
  5104  06E2  1903               	skipnz
  5105  06E3  024C               	subwf	CheckKeyOldValue@80,w
  5106  06E4  1C03               	skipc
  5107  06E5  2EEC               	goto	L13
  5108  06E6  0F4C               	incfsz	CheckKeyOldValue@80,w
  5109  06E7  2F00               	goto	l1309
  5110  06E8  0A4D               	incf	CheckKeyOldValue@80+1,w
  5111  06E9  1D03               	btfss	3,2
  5112  06EA  2F00               	goto	l1309
  5113  06EB  1003               	clrc
  5114  06EC                     L13:	
  5115  06EC  0D4E               	rlf	CheckKeyOldValue@78,w
  5116  06ED  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5117  06EE  0084               	movwf	4
  5118  06EF  2792  118A         	fcall	PL2	;call to abstracted procedure
  5119  06F1  1903               	skipnz
  5120  06F2  024C               	subwf	CheckKeyOldValue@80,w
  5121  06F3  1C03               	skipc
  5122  06F4  2EFB               	goto	L14
  5123  06F5  0F4C               	incfsz	CheckKeyOldValue@80,w
  5124  06F6  2F00               	goto	l1309
  5125  06F7  0A4D               	incf	CheckKeyOldValue@80+1,w
  5126  06F8  1D03               	btfss	3,2
  5127  06F9  2F00               	goto	l1309
  5128  06FA  1003               	clrc
  5129  06FB                     L14:	
  5130  06FB  0D4E               	rlf	CheckKeyOldValue@78,w
  5131  06FC  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5132  06FD  0084               	movwf	4
  5133  06FE  27EA  118A         	fcall	PL32	;call to abstracted procedure
  5134  0700                     l1309:	
  5135  0700  1283               	bcf	3,5	;RP0=0, select bank0
  5136  0701  1303               	bcf	3,6	;RP1=0, select bank0
  5137  0702  1003               	clrc
  5138  0703  0D4E               	rlf	CheckKeyOldValue@78,w
  5139  0704  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5140  0705  0084               	movwf	4
  5141  0706  1383               	bcf	3,7	;select IRP bank1
  5142  0707  27D6  118A         	fcall	PL18	;call to abstracted procedure
  5143  0709  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5144  070A  27C4  118A         	fcall	PL12	;call to abstracted procedure
  5145  070C  27D6  118A         	fcall	PL18	;call to abstracted procedure
  5146  070E  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5147  070F  27C4  118A         	fcall	PL12	;call to abstracted procedure
  5148  0711  27EA  118A         	fcall	PL32	;call to abstracted procedure
  5149  0713  3003               	movlw	3
  5150  0714  0ACE               	incf	CheckKeyOldValue@78,f
  5151  0715  024E               	subwf	CheckKeyOldValue@78,w
  5152  0716  1803               	btfsc	3,0
  5153  0717  0008               	return
  5154  0718  2EBA               	goto	l3567
  5155  0719                     __end_of_CheckKeyOldValue:	
  5156  0719                     __ptext26:	
  5157 ;; *************** function _KeyStopClear *****************
  5158 ;; Defined at:
  5159 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  53              1    3[COMMON] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/100
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5173 ;;      Params:         0       0       0       0
  5174 ;;      Locals:         1       0       0       0
  5175 ;;      Temps:          0       0       0       0
  5176 ;;      Totals:         1       0       0       0
  5177 ;;Total ram usage:        1 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    2
  5180 ;; This function calls:
  5181 ;;		_KeyClearOne
  5182 ;; This function is called by:
  5183 ;;		_CheckTouchKey
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function _KeyStopClear
  5189  0719                     _KeyStopClear:	
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5193  0719  01F9               	clrf	_KeyFlag	;volatile
  5194  071A  01FA               	clrf	_KeyFlag+1	;volatile
  5195  071B  01F3               	clrf	KeyStopClear@53
  5196  071C                     l3479:	
  5197  071C  1003               	clrc
  5198  071D  0D73               	rlf	KeyStopClear@53,w
  5199  071E  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5200  071F  0084               	movwf	4
  5201  0720  1383               	bcf	3,7	;select IRP bank1
  5202  0721  0180               	clrf	0
  5203  0722  0A84               	incf	4,f
  5204  0723  0180               	clrf	0
  5205  0724  0873               	movf	KeyStopClear@53,w
  5206  0725  268E  118A         	fcall	_KeyClearOne
  5207  0727  3003               	movlw	3
  5208  0728  0AF3               	incf	KeyStopClear@53,f
  5209  0729  0273               	subwf	KeyStopClear@53,w
  5210  072A  1803               	btfsc	3,0
  5211  072B  0008               	return
  5212  072C  2F1C               	goto	l3479
  5213  072D                     __end_of_KeyStopClear:	
  5214  072D                     __ptext24:	
  5215 ;; *************** function _TurnKeyFlags *****************
  5216 ;; Defined at:
  5217 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;		None
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/100
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5231 ;;      Params:         0       0       0       0
  5232 ;;      Locals:         0       0       0       0
  5233 ;;      Temps:          0       0       0       0
  5234 ;;      Totals:         0       0       0       0
  5235 ;;Total ram usage:        0 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    4
  5238 ;; This function calls:
  5239 ;;		_KeyClearIn
  5240 ;; This function is called by:
  5241 ;;		_CheckTouchKey
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _TurnKeyFlags
  5247  072D                     _TurnKeyFlags:	
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5251  072D  1283               	bcf	3,5	;RP0=0, select bank0
  5252  072E  1303               	bcf	3,6	;RP1=0, select bank0
  5253  072F  0821               	movf	_KeyData+1,w	;volatile
  5254  0730  0420               	iorwf	_KeyData,w	;volatile
  5255  0731  1903               	btfsc	3,2
  5256  0732  2F51               	goto	l3627
  5257  0733  01AE               	clrf	TurnKeyFlags@F84
  5258  0734  0820               	movf	_KeyData,w	;volatile
  5259  0735  0622               	xorwf	_KeyOldData,w	;volatile
  5260  0736  1D03               	skipz
  5261  0737  2F4A               	goto	l1327
  5262  0738  0821               	movf	_KeyData+1,w	;volatile
  5263  0739  0623               	xorwf	_KeyOldData+1,w	;volatile
  5264  073A  1D03               	skipz
  5265  073B  2F4A               	goto	l1327
  5266  073C  3002               	movlw	2
  5267  073D  0AAF               	incf	TurnKeyFlags@F83,f
  5268  073E  022F               	subwf	TurnKeyFlags@F83,w
  5269  073F  1C03               	skipc
  5270  0740  0008               	return
  5271  0741  01AF               	clrf	TurnKeyFlags@F83
  5272  0742  0820               	movf	_KeyData,w	;volatile
  5273  0743  00F9               	movwf	_KeyFlag	;volatile
  5274  0744  0821               	movf	_KeyData+1,w	;volatile
  5275  0745  00FA               	movwf	_KeyFlag+1	;volatile
  5276  0746  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5277  0747  0008               	return
  5278  0748  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5279  0749  2F74               	ljmp	l3057
  5280  074A                     l1327:	
  5281  074A  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5282  074B  0820               	movf	_KeyData,w	;volatile
  5283  074C  00A2               	movwf	_KeyOldData	;volatile
  5284  074D  0821               	movf	_KeyData+1,w	;volatile
  5285  074E  00A3               	movwf	_KeyOldData+1	;volatile
  5286  074F  01AF               	clrf	TurnKeyFlags@F83
  5287  0750  0008               	return
  5288  0751                     l3627:	
  5289  0751  01AF               	clrf	TurnKeyFlags@F83
  5290  0752  01A2               	clrf	_KeyOldData	;volatile
  5291  0753  01A3               	clrf	_KeyOldData+1	;volatile
  5292  0754  3002               	movlw	2
  5293  0755  0AAE               	incf	TurnKeyFlags@F84,f
  5294  0756  022E               	subwf	TurnKeyFlags@F84,w
  5295  0757  1C03               	skipc
  5296  0758  0008               	return
  5297  0759  01AE               	clrf	TurnKeyFlags@F84
  5298  075A  01F9               	clrf	_KeyFlag	;volatile
  5299  075B  01FA               	clrf	_KeyFlag+1	;volatile
  5300  075C  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5301  075D  0008               	return
  5302  075E                     __end_of_TurnKeyFlags:	
  5303  075E                     __ptext29:	
  5304 ;; *************** function _CheckValidTime *****************
  5305 ;; Defined at:
  5306 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;		None
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;		None
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, status,2, status,0
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5320 ;;      Params:         0       0       0       0
  5321 ;;      Locals:         0       0       0       0
  5322 ;;      Temps:          0       0       0       0
  5323 ;;      Totals:         0       0       0       0
  5324 ;;Total ram usage:        0 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    1
  5327 ;; This function calls:
  5328 ;;		Nothing
  5329 ;; This function is called by:
  5330 ;;		_CheckTouchKey
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _CheckValidTime
  5336  075E                     _CheckValidTime:	
  5337  075E                     l3637:	
  5338                           ;incstack = 0
  5339                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5340                           
  5341  075E  087A               	movf	_KeyFlag+1,w	;volatile
  5342  075F  0479               	iorwf	_KeyFlag,w	;volatile
  5343  0760  1903               	btfsc	3,2
  5344  0761  2F6F               	goto	l3643
  5345  0762  1683               	bsf	3,5	;RP0=1, select bank1
  5346  0763  1303               	bcf	3,6	;RP1=0, select bank1
  5347  0764  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5348  0765  1903               	skipnz
  5349  0766  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5350  0767  303A               	movlw	58
  5351  0768  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5352  0769  3098               	movlw	152
  5353  076A  1903               	skipnz
  5354  076B  0241               	subwf	CheckValidTime@F87^(0+128),w
  5355  076C  1C03               	skipc
  5356  076D  0008               	return
  5357  076E  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5358  076F                     l3643:	
  5359  076F  1683               	bsf	3,5	;RP0=1, select bank1
  5360  0770  1303               	bcf	3,6	;RP1=0, select bank1
  5361  0771  01C1               	clrf	CheckValidTime@F87^(0+128)
  5362  0772  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5363  0773  0008               	return
  5364  0774                     __end_of_CheckValidTime:	
  5365  0774                     __ptext25:	
  5366 ;; *************** function _KeyClearIn *****************
  5367 ;; Defined at:
  5368 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  51              1    4[COMMON] unsigned char 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 300/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5382 ;;      Params:         0       0       0       0
  5383 ;;      Locals:         1       0       0       0
  5384 ;;      Temps:          0       0       0       0
  5385 ;;      Totals:         1       0       0       0
  5386 ;;Total ram usage:        1 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    3
  5389 ;; This function calls:
  5390 ;;		_KeyClearOne
  5391 ;;		_KeyIsIn
  5392 ;; This function is called by:
  5393 ;;		_TurnKeyFlags
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           
  5398                           ;psect for function _KeyClearIn
  5399  0774                     _KeyClearIn:	
  5400  0774                     l3057:	
  5401                           ;incstack = 0
  5402                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5403                           
  5404  0774  01F4               	clrf	KeyClearIn@51
  5405  0775                     l3063:	
  5406  0775  0874               	movf	KeyClearIn@51,w
  5407  0776  267E  118A         	fcall	_KeyIsIn
  5408  0778  3A00               	xorlw	0
  5409  0779  1D03               	skipz
  5410  077A  2F7E               	goto	l3067
  5411  077B  0874               	movf	KeyClearIn@51,w
  5412  077C  268E  118A         	fcall	_KeyClearOne
  5413  077E                     l3067:	
  5414  077E  3003               	movlw	3
  5415  077F  0AF4               	incf	KeyClearIn@51,f
  5416  0780  0274               	subwf	KeyClearIn@51,w
  5417  0781  1803               	btfsc	3,0
  5418  0782  0008               	return
  5419  0783  2F75               	goto	l3063
  5420  0784                     __end_of_KeyClearIn:	
  5421  0784                     __ptext20:	
  5422 ;; *************** function _Refurbish_Sfr *****************
  5423 ;; Defined at:
  5424 ;;		line 100 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 200/0
  5435 ;;		On exit  : 300/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5438 ;;      Params:         0       0       0       0
  5439 ;;      Locals:         0       0       0       0
  5440 ;;      Temps:          0       0       0       0
  5441 ;;      Totals:         0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    1
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_WorkSleep
  5449 ;;		_main
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _Refurbish_Sfr
  5455  0784                     _Refurbish_Sfr:	
  5456                           
  5457                           ;main.c: 103: PIE1 = 2;
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5461  0784  3002               	movlw	2
  5462  0785  1283               	bcf	3,5	;RP0=0, select bank0
  5463  0786  008E               	movwf	14	;volatile
  5464                           
  5465                           ;main.c: 104: PR2 = 250;
  5466  0787  30FA               	movlw	250
  5467  0788  0091               	movwf	17	;volatile
  5468                           
  5469                           ;main.c: 105: INTCON = 0XC0;
  5470  0789  30C0               	movlw	192
  5471  078A  008B               	movwf	11	;volatile
  5472                           
  5473                           ;main.c: 106: if (4 != T2CON)
  5474  078B  3004               	movlw	4
  5475  078C  0613               	xorwf	19,w	;volatile
  5476  078D  1903               	btfsc	3,2
  5477  078E  0008               	return
  5478                           
  5479                           ;main.c: 107: T2CON = 4;
  5480  078F  3004               	movlw	4
  5481  0790  0093               	movwf	19	;volatile
  5482  0791  0008               	return
  5483  0792                     __end_of_Refurbish_Sfr:	
  5484  0792                     PL2:	
  5485  0792  0800               	movf	0,w
  5486  0793  00CC               	movwf	CheckKeyOldValue@80
  5487  0794  0A84               	incf	4,f
  5488  0795  0800               	movf	0,w
  5489  0796  00CD               	movwf	CheckKeyOldValue@80+1
  5490  0797  084A               	movf	CheckKeyOldValue@79,w
  5491  0798  02CC               	subwf	CheckKeyOldValue@80,f
  5492  0799  084B               	movf	CheckKeyOldValue@79+1,w
  5493  079A  1C03               	skipc
  5494  079B  03CD               	decf	CheckKeyOldValue@80+1,f
  5495  079C  02CD               	subwf	CheckKeyOldValue@80+1,f
  5496  079D  3000               	movlw	0
  5497  079E  024D               	subwf	CheckKeyOldValue@80+1,w
  5498  079F  3402               	retlw	2
  5499  07A0                     __end_ofPL2:	
  5500  07A0                     PL4:	
  5501  07A0  00CA               	movwf	??_CheckOnceResult
  5502  07A1  0A84               	incf	4,f
  5503  07A2  0800               	movf	0,w
  5504  07A3  00CB               	movwf	??_CheckOnceResult+1
  5505  07A4  0853               	movf	CheckOnceResult@69,w
  5506  07A5  074A               	addwf	??_CheckOnceResult,w
  5507  07A6  00CC               	movwf	??_CheckOnceResult+2
  5508  07A7  084B               	movf	??_CheckOnceResult+1,w
  5509  07A8  1803               	skipnc
  5510  07A9  0A4B               	incf	??_CheckOnceResult+1,w
  5511  07AA  00CD               	movwf	??_CheckOnceResult+3
  5512  07AB  0855               	movf	CheckOnceResult@71+1,w
  5513  07AC  024D               	subwf	??_CheckOnceResult+3,w
  5514  07AD  1D03               	skipz
  5515  07AE  0008               	return
  5516  07AF  0854               	movf	CheckOnceResult@71,w
  5517  07B0  024C               	subwf	??_CheckOnceResult+2,w
  5518  07B1  0008               	return
  5519  07B2                     __end_ofPL4:	
  5520  07B2                     PL8:	
  5521  07B2  0084               	movwf	4
  5522  07B3  0800               	movf	0,w
  5523  07B4  00CA               	movwf	??_CheckOnceResult
  5524  07B5  0A84               	incf	4,f
  5525  07B6  0800               	movf	0,w
  5526  07B7  00CB               	movwf	??_CheckOnceResult+1
  5527  07B8  0008               	return
  5528  07B9                     __end_ofPL8:	
  5529  07B9                     PL10:	
  5530  07B9  0084               	movwf	4
  5531  07BA  084A               	movf	??_SystemEnterSleep,w
  5532  07BB  0080               	movwf	0
  5533  07BC  0A84               	incf	4,f
  5534  07BD  084B               	movf	??_SystemEnterSleep+1,w
  5535  07BE  0080               	movwf	0
  5536  07BF  1003               	clrc
  5537  07C0  0D52               	rlf	SystemEnterSleep@91,w
  5538  07C1  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5539  07C2  0084               	movwf	4
  5540  07C3  0008               	return
  5541  07C4                     __end_ofPL10:	
  5542  07C4                     PL12:	
  5543  07C4  0084               	movwf	4
  5544  07C5  0874               	movf	??_CheckKeyOldValue,w
  5545  07C6  0080               	movwf	0
  5546  07C7  0A84               	incf	4,f
  5547  07C8  0875               	movf	??_CheckKeyOldValue+1,w
  5548  07C9  0080               	movwf	0
  5549  07CA  1003               	clrc
  5550  07CB  0D4E               	rlf	CheckKeyOldValue@78,w
  5551  07CC  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5552  07CD  0084               	movwf	4
  5553  07CE  0008               	return
  5554  07CF                     __end_ofPL12:	
  5555  07CF                     PL14:	
  5556  07CF  0084               	movwf	4
  5557  07D0  0800               	movf	0,w
  5558  07D1  00CA               	movwf	??_SystemEnterSleep
  5559  07D2  0A84               	incf	4,f
  5560  07D3  0800               	movf	0,w
  5561  07D4  00CB               	movwf	??_SystemEnterSleep+1
  5562  07D5  0008               	return
  5563  07D6                     __end_ofPL14:	
  5564  07D6                     PL18:	
  5565  07D6  0800               	movf	0,w
  5566  07D7  00F4               	movwf	??_CheckKeyOldValue
  5567  07D8  0A84               	incf	4,f
  5568  07D9  0800               	movf	0,w
  5569  07DA  00F5               	movwf	??_CheckKeyOldValue+1
  5570  07DB  1003               	clrc
  5571  07DC  0D4E               	rlf	CheckKeyOldValue@78,w
  5572  07DD  0008               	return
  5573  07DE                     __end_ofPL18:	
  5574  07DE                     PL22:	
  5575  07DE  0180               	clrf	0
  5576  07DF  0A84               	incf	4,f
  5577  07E0  0180               	clrf	0
  5578  07E1  1003               	clrc
  5579  07E2  0D72               	rlf	KeyClearOne@49,w
  5580  07E3  0008               	return
  5581  07E4                     __end_ofPL22:	
  5582  07E4                     PL26:	
  5583  07E4  3041               	movlw	65
  5584  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  5585  07E6  0095               	movwf	21	;volatile
  5586  07E7  1415               	bsf	21,0	;volatile
  5587  07E8  0196               	clrf	22	;volatile
  5588  07E9  0008               	return
  5589  07EA                     __end_ofPL26:	
  5590  07EA                     PL32:	
  5591  07EA  084A               	movf	CheckKeyOldValue@79,w
  5592  07EB  0080               	movwf	0
  5593  07EC  0A84               	incf	4,f
  5594  07ED  084B               	movf	CheckKeyOldValue@79+1,w
  5595  07EE  0080               	movwf	0
  5596  07EF  0008               	return
  5597  07F0                     __end_ofPL32:	
  5598  07F0                     PL36:	
  5599  07F0  01D2               	clrf	SystemEnterSleep@91
  5600  07F1  01D0               	clrf	SystemEnterSleep@92
  5601  07F2  0AD0               	incf	SystemEnterSleep@92,f
  5602  07F3  01D1               	clrf	SystemEnterSleep@92+1
  5603  07F4  0008               	return
  5604  07F5                     __end_ofPL36:	
  5605  07F5                     PL38:	
  5606  07F5  0DD0               	rlf	SystemEnterSleep@92,f
  5607  07F6  0DD1               	rlf	SystemEnterSleep@92+1,f
  5608  07F7  0AD2               	incf	SystemEnterSleep@91,f
  5609  07F8  0252               	subwf	SystemEnterSleep@91,w
  5610  07F9  0008               	return
  5611  07FA                     __end_ofPL38:	
  5612                           
  5613                           	psect	text35
  5614  0E1E                     __ptext35:	
  5615 ;; *************** function _Isr_Timer *****************
  5616 ;; Defined at:
  5617 ;;		line 222 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 300/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5631 ;;      Params:         0       0       0       0
  5632 ;;      Locals:         0       0       0       0
  5633 ;;      Temps:          2       0       0       0
  5634 ;;      Totals:         2       0       0       0
  5635 ;;Total ram usage:        2 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		Interrupt level 1
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function _Isr_Timer
  5646  0E1E                     _Isr_Timer:	
  5647                           
  5648                           ;main.c: 224: if(TMR2IF)
  5649  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  5650  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  5651  0E20  1C8D               	btfss	13,1	;volatile
  5652  0E21  2E31               	goto	i1l4007
  5653                           
  5654                           ;main.c: 225: {
  5655                           ;main.c: 226: TMR2IF = 0;
  5656  0E22  108D               	bcf	13,1	;volatile
  5657                           
  5658                           ;main.c: 227: if(++MainTime >= 32)
  5659  0E23  3020               	movlw	32
  5660  0E24  0AC7               	incf	_MainTime,f	;volatile
  5661  0E25  0247               	subwf	_MainTime,w	;volatile
  5662  0E26  1C03               	skipc
  5663  0E27  2E32               	goto	i1l983
  5664                           
  5665                           ;main.c: 228: {
  5666                           ;main.c: 229: MainTime = 0;
  5667  0E28  01C7               	clrf	_MainTime	;volatile
  5668                           
  5669                           ;main.c: 230: B_MainLoop = 1;
  5670  0E29  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5671                           
  5672                           ;main.c: 231: if(++count1s >= 250)
  5673  0E2A  30FA               	movlw	250
  5674  0E2B  0AC6               	incf	_count1s,f
  5675  0E2C  0246               	subwf	_count1s,w
  5676  0E2D  1C03               	skipc
  5677  0E2E  2E32               	goto	i1l983
  5678                           
  5679                           ;main.c: 232: {
  5680                           ;main.c: 233: count1s = 0;
  5681  0E2F  01C6               	clrf	_count1s
  5682  0E30  2E32               	goto	i1l983
  5683  0E31                     i1l4007:	
  5684                           
  5685                           ;main.c: 237: else
  5686                           ;main.c: 238: {
  5687                           ;main.c: 239: PIR1 = 0;
  5688  0E31  018D               	clrf	13	;volatile
  5689  0E32                     i1l983:	
  5690  0E32  0871               	movf	??_Isr_Timer+1,w
  5691  0E33  008A               	movwf	10
  5692  0E34  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5693  0E35  0083               	movwf	3
  5694  0E36  0EFE               	swapf	126,f
  5695  0E37  0E7E               	swapf	126,w
  5696  0E38  0009               	retfie
  5697  0E39                     __end_of_Isr_Timer:	
  5698  007E                     btemp	set	126	;btemp
  5699  007E                     wtemp0	set	126
  5700                           
  5701                           	psect	intentry
  5702  0004                     __pintentry:	
  5703                           ;incstack = 0
  5704                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5705                           
  5706  0004                     interrupt_function:	
  5707  007E                     saved_w	set	btemp
  5708  0004  00FE               	movwf	btemp
  5709  0005  0E03               	swapf	3,w
  5710  0006  00F0               	movwf	??_Isr_Timer
  5711  0007  080A               	movf	10,w
  5712  0008  00F1               	movwf	??_Isr_Timer+1
  5713  0009  158A  2E1E         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        3
    BSS         86
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      47
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _workCtr->_bujinCtr
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11909
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7906
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1286
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             5     5      0      68
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      2F       6       58.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      8A       9        0.0%
ABS                  0      0      8A       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 04 14:33:02 2025

                        pc 0002                         PL2 0792                         PL4 07A0  
                       PL6 03E5                         PL8 07B2              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 07B9                        PL20 0FEA                        PL12 07C4  
                      PL30 0FF5                        PL22 07DE                        PL14 07CF  
                      PL40 0404                        PL32 07EA                        PL24 03FD  
                      PL16 03F4                        PL42 0F39                        PL34 0FFA  
                      PL26 07E4                        PL18 07D6                        PL44 0409  
                      PL36 07F0                        PL28 0FF0                        PL46 040E  
                      PL38 07F5                        l971 0F2C                        l999 01D6  
                      _RA5 0435                        _RA6 0436                        _RA7 0437  
                      _RB6 0036                        _RB7 0037                        _PR2 0011  
      __size_of_ADC_Sample 00D1                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070             _bujinStartFlag 0036   __end_of_Table_KeyChannel 0817  
                     S4885 0817                       S4887 0827         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 0059               ___ftdiv@sign 005E                       l1005 0212  
                     l1110 0FC0                       l1022 0333                       l1111 0FC3  
                     l1112 0FC6                       l1113 0FC9                       l1105 0FAC  
                     l1009 0258                       l1034 0376                       l1107 0FB3  
                     l1108 0FB6                       l1028 0356                       l1109 0FB9  
                     l1091 0F67                       l1309 0700                       l1093 0F60  
                     l1327 074A                       l1346 047A                       l1099 0F86  
                     l1268 0561                       l3125 056F                       l1533 016C  
                     l4101 01B6                       l1358 0499                       l3127 057F  
                     l3063 0775                       l3057 0774                       l1545 0190  
                     l3083 06AE                       l3067 077E                       l4211 0170  
                     l4115 01C0                       l1388 02E3                       l4221 018E  
                     l4213 0173                       l4133 01FB                       l4125 01E0  
                     l4109 01BF                       l3095 052D                       l4223 0185  
                     l4215 0178                       l4313 04FA                       l4217 0180  
                     l4137 0206                       l4161 0412                       l3099 0533  
                     l1587 00B5                       l4139 020E                       l4171 0E0F  
                     l4317 0501                       l4333 0522                       l4501 0F9F  
                     l4149 025C                       l4413 02CC                       l4405 02B7  
                     l4511 0FCC                       l4423 02D8                       l4415 02CE  
                     l4239 0393                       l4247 03A6                       l4343 032D  
                     l4177 03AB                       l4425 02D9                       l4361 0358  
                     l4345 0330                       l3643 076F                       l3627 0751  
                     l3803 0EDD                       l4603 00A7                       l4515 0FD8  
                     l4099 01B4                       l4419 02D4                       l4355 0350  
                     l4533 059E                       l3637 075E                       l4517 0FE4  
                     l4357 0353                       l4349 0335                       l3567 06BA  
                     l4551 05F7                       l2943 0589                       l3479 071C  
                     l3831 0F07                       l3807 0EE4                       l4287 04C6  
                     l3911 0E53                       l4199 02F9                       l4367 0373  
                     l4455 03E2                       l4447 03D6                       l2929 068A  
                     l2945 058A                       l3809 0EE6                       l3833 0F0A  
                     l3913 0E55                       l4625 00C8                       l4641 0104  
                     l4481 0F56                       l4393 0284                       l4369 0379  
                     l4457 03E3                       l4449 03D7                       l4571 062D  
                     l4803 0498                       l3851 0F33                       l4299 04CD  
                     l4643 0109                       l4475 0F50                       l4459 0F3E  
                     l4811 0E60                       l4565 0625                       l3829 0F05  
                     l4717 0468                       l4389 027E                       l4575 062F  
                     l3775 0EB4                       l4671 013D                       l4663 012F  
                     l4495 0F8D                       l4735 005F                       l4593 066C  
                     l4585 065C                       l3785 0EC3                       l4497 0F8E  
                     l4745 0073                       l4595 0670                       l3779 0EB9  
                     l3787 0EC5                       l4675 014B                       l4659 0127  
                     l4755 0087                       l4747 0074                       l4589 0668  
                     l4597 0676                       l4669 0133                       l4765 0092  
                     l4757 0088                       l3799 0ED6                       l4795 048E  
                     l4787 0489                       l4797 0492                       _ADON 04A8  
                     _CHS4 04B6                       u4205 04F6                       u4135 0399  
                     _PIE1 000E                       _PIE2 0110                       u4415 02A8  
                     _RAIF 006B                       _INTF 0059                       _RBIE 005B  
                     _RBIF 0058                       u4705 05FD                       u4625 0F71  
                     u5177 01B0                       u4715 0609                       u4635 0F84  
                     u3925 0201                       u4655 0F9B                       u3935 020C  
                     u4745 0648                       u4825 00D6                       u4665 0FA9  
                     _PIR1 000D                       _PIR2 010F                       u4675 05AB  
                     u4695 05E8                       u4855 010C                       u3975 024D  
                     u3995 0265                       _TMR0 0081                       _WPUB 0008  
                     _main 0E59               ___ftpack@arg 0072               ___ftpack@exp 0075  
                     btemp 007E              ?_KeyStopClear 0070                       start 000B  
             _TurnKeyFlags 072D            __end_of_KeyIsIn 068E            __end_of_KeyHave 06B1  
             ___fttol@exp1 006B              ??_Init_System 0072               ___fttol@lval 0067  
          TurnKeyFlags@F83 002F            TurnKeyFlags@F84 002E                      ?_main 0070  
          __end_of___ftdiv 00FB            __end_of___fttol 0154                      _T2CON 0013  
                    _IOCB5 004D   __end_of_SystemEnterSleep 0529            __end_of___lwmod 03AB  
                    i1l983 0E32                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 03B6                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 03BC            __end_of_chrgCtr 0E59  
      ___lmul@multiplicand 004E        __end_of_KeyClearOne 06A3                 _KeyClearIn 0774  
           fanCtr@fan_temp 0058              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 0420                _ClearResSum 0589  
               _KeyCounter 0032                 _KeyOldData 0022            __end_of_pwmStop 0E16  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 0099                 _KeyUpShake 00BE            __initialization 000D  
             __end_of_main 0E99                     ??_main 0078              ___fttol@sign1 0066  
      __end_of_Init_System 043E                     _ADCON0 0095                     _ADCON1 0096  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 01A2  
                   _GODONE 04A9                     i1l4007 0E31                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 0164         __size_of_KeyServer 00A0  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD3L 009C  
                   _PWMD4L 001B               ??_ADC_Sample 0073                     _PWMT4L 001C  
                   _TRISB5 002D                     _TRISB6 002E                  ??_KeyIsIn 0072  
                ??_KeyHave 0074              ClearResSum@56 0072         __size_of_Isr_Timer 001B  
         __end_of_bujinCtr 0FEA  __size_of_CheckKeyOldValue 0068                     ___lmul 02DF  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0273  
                ??___ftdiv 0056                  ??___fttol 0063                  ??___lwmod 0076  
                ??_fanInit 0072                  ??_fanStop 0072                _KeyClearOne 068E  
                ??_chrgCtr 0072                     _result 00C3              _Table_KeyFalg 0806  
            _Table_KeyDown 080E         __end_of_ADC_Sample 0273                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0072                  ??_pwmStop 0072  
              ?_KeyClearIn 0070                  ??_workCtr 0077            _CheckOnceResult 0598  
         __end_of_wuhuaCtr 03E5    __end_of__initialization 0022         __size_of_WorkSleep 002E  
        CheckOnceResult@70 0050          CheckOnceResult@71 0054          CheckOnceResult@72 0051  
        CheckOnceResult@73 004E          CheckOnceResult@68 0056          CheckOnceResult@69 0053  
               ___ftdiv@f1 0053                 ___ftdiv@f2 0050                 ___ftdiv@f3 005A  
               ___fttol@f1 005F             __pcstackCOMMON 0070               __pidataBANK0 0000  
              _Init_System 0420                 __end_ofPL2 07A0                 __end_ofPL4 07B2  
               __end_ofPL6 03F4                 __end_ofPL8 07B9          __end_of_KeyServer 0F39  
               ___lwtoft@c 004D       __end_of_KeyStopClear 072D          __end_of_Isr_Timer 0E39  
       __size_of_keyLedCtr 0075                 __pbssBANK0 0020                 __pbssBANK1 00A0  
             _chrgFullFlag 0040  __size_of_GetTouchKeyValue 0060               _chrgFullTime 003F  
            _CheckTouchKey 046C                 __pmaintext 0E59                    ?___lmul 004A  
                  ?_fanCtr 0070                 __pintentry 0004        __size_of_KeyClearIn 0010  
           ___lmul@product 0072                  ?___ftpack 0072          __end_of_WorkSleep 046C  
                ?___lwtoft 004D          ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 067E  
                  _KEYCON0 0111                    _KEYCON1 0112                    _KEYCON2 0113  
       ??_SystemEnterSleep 004A                    _B_OnOff 03C5                    _PWMD23H 009E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D                  ?_bujinCtr 0070       __end_of_Table_KeyCap 0814  
               __stringtab 0800               ?_ClearResSum 0070                    _KeyData 0020  
                  _KeyFlag 0079                    _KeyIsIn 067E                    _KeyHave 06A3  
           ?_CheckTouchKey 0070            ADC_Sample@adldo 0072            ADC_Sample@admax 0053  
          ADC_Sample@admin 0051            ADC_Sample@adsum 004D           _CheckKeyOldValue 06B1  
          __size_of___lmul 0033                    ___ftdiv 0099            __size_of_fanCtr 006C  
                  ___fttol 00FB                    ___lwmod 0387          __end_of_keyLedCtr 0387  
                  _b_kover 03C4                    _fanInit 03AB                    _fanDuty 0044  
                  _fanStop 03B6                 ??___ftpack 004A                    _chrgCtr 0E39  
                  __ptext1 0025                    __ptext2 03BC                    __ptext3 0E0F  
                  __ptext4 0412                    __ptext5 0312                    __ptext6 0387  
                  __ptext7 0273                    __ptext8 03B6                    __ptext9 03AB  
               _lowBatLock 003E                 _lowBatTime 003D                  ?_wuhuaCtr 0070  
               ??___lwtoft 0077                    _count1s 0046                 _lowFanTime 003C  
                  _pwmInit 0412                    _pwmStop 0E0F    __size_of_CheckValidTime 0016  
                  clrloop0 0E17                    _workCtr 0025                 ??_bujinCtr 0072  
     end_of_initialization 0022              _Refurbish_Sfr 0784               _KeyOldValue0 00B2  
             _KeyOldValue1 00AC               _KeyOldValue2 00A6      __size_of_KeyStopClear 0014  
       SystemEnterSleep@91 0052         SystemEnterSleep@92 0050         SystemEnterSleep@93 004E  
       SystemEnterSleep@94 004C               ?_KeyClearOne 0070               _KeyReference 00A0  
               ??_wuhuaCtr 0072          CheckValidTime@F87 00C1           ?_CheckOnceResult 0070  
                KeyIsIn@45 0073                  KeyIsIn@46 0072                  KeyHave@58 0074  
                KeyHave@59 0072               ??_KeyClearIn 0074                ___ftdiv@exp 005D  
          ??_CheckTouchKey 0078               _KeyStopClear 0719           _GetTouchKeyValue 0529  
           ?_Refurbish_Sfr 0070               ?_Init_System 0070             __end_of___lmul 0312  
           __end_of_fanCtr 02DF         __end_of_KeyClearIn 0784              WorkSleep@time 0033  
                _KeyMaxSub 0031                  _KeyResSum 00B8                __end_ofPL10 07C4  
              __end_ofPL20 0FF0                __end_ofPL12 07CF                __end_ofPL30 0FFA  
              __end_ofPL22 07E4                __end_ofPL14 07D6                __end_ofPL40 0409  
              __end_ofPL32 07F0                __end_ofPL24 0404                __end_ofPL16 03FD  
              __end_ofPL42 0F3E                __end_ofPL34 1000                __end_ofPL26 07EA  
              __end_ofPL18 07DE                __end_ofPL44 040E                __end_ofPL36 07F5  
              __end_ofPL28 0FF5                __end_ofPL46 0412                __end_ofPL38 07FA  
      start_initialization 000D                  _KeyServer 0E99                  _Isr_Timer 0E1E  
             _maxMotorStep 006C          workCtr@power_temp 00C9       __size_of_ClearResSum 000F  
            ?_TurnKeyFlags 0070                   ??___lmul 0072                   ??_fanCtr 0077  
        ADC_Sample@ad_temp 0055                __pdataBANK0 006C               _Table_KeyCap 0811  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0042  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004A              __pcstackBANK1 00C9                  _WorkSleep 043E  
           _CheckValidTime 075E   __end_of_CheckKeyOldValue 0719                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 0034          __size_of_bujinCtr 00AC                   ?_KeyIsIn 0070  
                 ?_KeyHave 0072  __size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072  
           ??_TurnKeyFlags 0075                  __pnvBANK1 00CD                   ?___ftdiv 0050  
                 ?___fttol 005F                   ?___lwmod 0072                   ?_fanInit 0070  
                _closeTime 0038                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 002A              _shanshuoTime3 0028                  __pstrings 0800  
                __pswtext1 0817                  __pswtext2 0827                  _bujinFlag 003B  
     __size_of_KeyClearOne 0015                  _keyLedCtr 0312                  _firstLock 00CD  
   __end_of_CheckValidTime 0774                  _firstTime 00CE          __size_of_wuhuaCtr 0029  
               ?_WorkSleep 0070             ADC_Sample@adch 004B                   ?_pwmInit 0070  
                 ?_pwmStop 0070                   ?_workCtr 0070                ADC_Sample@i 004C  
              ADC_Sample@j 004A                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 0E16             KeyStopClear@53 0073  
                _motorStep 0026        CheckKeyOldValue@F77 0030                  _powerFlag 003A  
              __stringbase 0805       __size_of_Init_System 001E      __end_of_Table_KeyFalg 080E  
    __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0589  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004A  
                _wuhuaFlag 0045                ??_Isr_Timer 0070                   _MainTime 0047  
               _ADC_Sample 01A2           __size_of_KeyIsIn 0010           __size_of_KeyHave 000E  
            _motorStopFlag 0037           _Table_KeyChannel 0814           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwmod 0024                   ___ftpack 0164  
         __size_of_fanInit 000B         __end_of__stringtab 0806           __size_of_fanStop 0006  
         __size_of_chrgCtr 0020                   ___lwtoft 0154                   _b_kover1 03C3  
                 _b_ksleep 03C0       __end_of_TurnKeyFlags 075E                   _fanValue 00C7  
                 _adresult 0048                   _chrgFlag 0041                ??_WorkSleep 0078  
                 __ptext10 02DF                   __ptext11 01A2                   __ptext20 0784  
                 __ptext12 0F3E                   __ptext21 0E99                   __ptext13 0154  
                 __ptext30 0598                   __ptext22 0420                   __ptext14 00FB  
                 __ptext31 06A3                   __ptext23 046C                   __ptext15 0099  
                 __ptext32 068E                   __ptext24 072D                   __ptext16 0164  
                 __ptext33 06B1                   __ptext25 0774                   __ptext17 0E39  
                 __ptext34 067E                   __ptext26 0719                   __ptext18 043E  
                 __ptext35 0E1E                   __ptext27 0529                   __ptext19 0499  
                 __ptext28 0589                   __ptext29 075E           __size_of_pwmInit 000E  
         __size_of_pwmStop 0007               _shanshuoTime 002C                   _bujinCtr 0F3E  
                 _count10s 0043           __size_of_workCtr 0074                   _keyCount 00C5  
 __size_of_CheckOnceResult 00E6         GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075  
       GetTouchKeyValue@64 0073              __size_of_main 0040                _longKeyFlag 0039  
         _SystemEnterSleep 0499           bujinCtr@tempStep 0076      __end_of_CheckTouchKey 0499  
       CheckKeyOldValue@80 004C         CheckKeyOldValue@78 004E         CheckKeyOldValue@79 004A  
                 _test_adc 0035                   _power_ad 0024                   _zeroFlag 006E  
                 _workStep 007B                   _wuhuaCtr 03BC                ??_keyLedCtr 0077  
        ?_CheckKeyOldValue 0070                   intlevel1 0000              ??_ClearResSum 0072  
       ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074                ?_ADC_Sample 0072  
                stringcode 0800                 _B_MainLoop 03C6          fanCtr@maxFanValue 0057  
               _OPTION_REG 0001            ___lwmod@divisor 0072            ___lwmod@counter 0076  
                 stringdir 0800                   stringtab 0800              KeyClearOne@49 0072  
             KeyClearIn@51 0074      __end_of_Refurbish_Sfr 0792        __end_of_ClearResSum 0598  
        ??_CheckOnceResult 004A  
