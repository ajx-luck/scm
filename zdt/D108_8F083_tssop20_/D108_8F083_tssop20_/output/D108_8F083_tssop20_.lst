

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jan 14 15:41:43 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text12,local,class=CODE,merge=1,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	swtext2,local,class=CONST,delta=2
    20                           	psect	text17,local,class=CODE,merge=1,delta=2
    21                           	psect	text21,local,class=CODE,merge=1,delta=2
    22                           	psect	text22,local,class=CODE,merge=1,delta=2
    23                           	psect	text35,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	pa_nodes0,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	strings
    64  0800                     __pstrings:	
    65  0800                     stringtab:	
    66  0800                     __stringtab:	
    67  0800                     stringcode:	
    68                           ;	String table - string pointers are 1 byte each
    69                           
    70  0800                     stringdir:	
    71  0800  3008               	movlw	high stringdir
    72  0801  008A               	movwf	10
    73  0802  0804               	movf	4,w
    74  0803  0A84               	incf	4,f
    75  0804  0782               	addwf	2,f
    76  0805                     __stringbase:	
    77  0805  3400               	retlw	0
    78  0806                     __end_of__stringtab:	
    79  0806                     _Table_KeyFalg:	
    80  0806  3401               	retlw	1
    81  0807  3402               	retlw	2
    82  0808  3404               	retlw	4
    83  0809  3408               	retlw	8
    84  080A  3410               	retlw	16
    85  080B  3420               	retlw	32
    86  080C  3440               	retlw	64
    87  080D  3480               	retlw	128
    88  080E                     __end_of_Table_KeyFalg:	
    89  080E                     _Table_KeyDown:	
    90  080E  340A               	retlw	10
    91  080F  340A               	retlw	10
    92  0810  340A               	retlw	10
    93  0811                     __end_of_Table_KeyDown:	
    94  0811                     _Table_KeyCap:	
    95  0811  3402               	retlw	2
    96  0812  3402               	retlw	2
    97  0813  3402               	retlw	2
    98  0814                     __end_of_Table_KeyCap:	
    99  0814                     _Table_KeyChannel:	
   100  0814  3444               	retlw	68
   101  0815  3443               	retlw	67
   102  0816  3442               	retlw	66
   103  0817                     __end_of_Table_KeyChannel:	
   104                           
   105                           	psect	nvBANK0
   106  006E                     __pnvBANK0:	
   107  006E                     _firstTime:	
   108  006E                     	ds	1
   109  001D                     _PWMCON2	set	29
   110  001C                     _PWMT4L	set	28
   111  001B                     _PWMD4L	set	27
   112  0018                     _PWMTH	set	24
   113  0017                     _PWMTL	set	23
   114  0016                     _PWMCON1	set	22
   115  0015                     _PWMCON0	set	21
   116  0014                     _OSCCON	set	20
   117  0013                     _T2CON	set	19
   118  0011                     _PR2	set	17
   119  000E                     _PIE1	set	14
   120  000D                     _PIR1	set	13
   121  000B                     _INTCON	set	11
   122  0008                     _WPUB	set	8
   123  0006                     _PORTB	set	6
   124  0005                     _TRISB	set	5
   125  0001                     _OPTION_REG	set	1
   126  0069                     _TMR2IF	set	105
   127  006B                     _RAIF	set	107
   128  0058                     _RBIF	set	88
   129  0059                     _INTF	set	89
   130  005B                     _RBIE	set	91
   131  004D                     _IOCB5	set	77
   132  0036                     _RB6	set	54
   133  0037                     _RB7	set	55
   134  002D                     _TRISB5	set	45
   135  002E                     _TRISB6	set	46
   136  009E                     _PWMD23H	set	158
   137  009C                     _PWMD3L	set	156
   138  0099                     _ADRESH	set	153
   139  0098                     _ADRESL	set	152
   140  0096                     _ADCON1	set	150
   141  0095                     _ADCON0	set	149
   142  0086                     _PORTA	set	134
   143  0085                     _TRISA	set	133
   144  0081                     _TMR0	set	129
   145  04B2                     _LDO_EN	set	1202
   146  04B6                     _CHS4	set	1206
   147  04A8                     _ADON	set	1192
   148  04A9                     _GODONE	set	1193
   149  0435                     _RA5	set	1077
   150  0436                     _RA6	set	1078
   151  0437                     _RA7	set	1079
   152  0117                     _KEYDATAH	set	279
   153  0116                     _KEYDATAL	set	278
   154  0113                     _KEYCON2	set	275
   155  0112                     _KEYCON1	set	274
   156  0111                     _KEYCON0	set	273
   157  0110                     _PIE2	set	272
   158  010F                     _PIR2	set	271
   159  0106                     _PORTC	set	262
   160  0105                     _TRISC	set	261
   161                           
   162                           	psect	cinit
   163  000D                     start_initialization:	
   164                           ; #config settings
   165                           
   166  000D                     __initialization:	
   167  000D  3020               	movlw	low __pbssBANK0
   168                           
   169                           ; Clear objects allocated to BITCOMMON
   170  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   171                           
   172                           ; Clear objects allocated to COMMON
   173  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   174  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   175  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   176                           
   177                           ; Clear objects allocated to BANK0
   178  0012  1383               	bcf	3,7	;select IRP bank0
   179  0013  0084               	movwf	4
   180  0014  304C               	movlw	low (__pbssBANK0+44)
   181  0015  158A  26B7  118A   	fcall	clear_ram0
   182                           
   183                           ; Clear objects allocated to BANK1
   184  0018  30A0               	movlw	low __pbssBANK1
   185  0019  0084               	movwf	4
   186  001A  30C3               	movlw	low (__pbssBANK1+35)
   187  001B  158A  26B7         	fcall	clear_ram0
   188  001D                     end_of_initialization:	
   189                           ;End of C runtime variable initialization code
   190                           
   191  001D                     __end_of__initialization:	
   192  001D  0183               	clrf	3
   193  001E  158A  2EDA         	ljmp	_main	;jump to C main() function
   194                           
   195                           	psect	bitbssCOMMON
   196  03C0                     __pbitbssCOMMON:	
   197  03C0                     _b_ksleep:	
   198  03C0                     	ds	1
   199  03C1                     _b_kerr:	
   200  03C1                     	ds	1
   201  03C2                     _b_kclr:	
   202  03C2                     	ds	1
   203  03C3                     _b_kover1:	
   204  03C3                     	ds	1
   205  03C4                     _b_kover:	
   206  03C4                     	ds	1
   207  03C5                     _B_OnOff:	
   208  03C5                     	ds	1
   209  03C6                     _B_MainLoop:	
   210  03C6                     	ds	1
   211                           
   212                           	psect	bssCOMMON
   213  0079                     __pbssCOMMON:	
   214  0079                     _KeyFlag:	
   215  0079                     	ds	2
   216  007B                     _workStep:	
   217  007B                     	ds	1
   218                           
   219                           	psect	bssBANK0
   220  0020                     __pbssBANK0:	
   221  0020                     CheckValidTime@F87:	
   222  0020                     	ds	2
   223  0022                     _KeyData:	
   224  0022                     	ds	2
   225  0024                     _KeyOldData:	
   226  0024                     	ds	2
   227  0026                     _power_ad:	
   228  0026                     	ds	2
   229  0028                     _maxMotorStep:	
   230  0028                     	ds	2
   231  002A                     _motorStep:	
   232  002A                     	ds	2
   233  002C                     _fanValue:	
   234  002C                     	ds	2
   235  002E                     _shanshuoTime3:	
   236  002E                     	ds	2
   237  0030                     _shanshuoTime2:	
   238  0030                     	ds	2
   239  0032                     _shanshuoTime:	
   240  0032                     	ds	2
   241  0034                     TurnKeyFlags@F84:	
   242  0034                     	ds	1
   243  0035                     TurnKeyFlags@F83:	
   244  0035                     	ds	1
   245  0036                     CheckKeyOldValue@F77:	
   246  0036                     	ds	1
   247  0037                     _KeyMaxSub:	
   248  0037                     	ds	1
   249  0038                     _KeyCounter:	
   250  0038                     	ds	1
   251  0039                     WorkSleep@time:	
   252  0039                     	ds	1
   253  003A                     KeyServer@KeyOldFlag:	
   254  003A                     	ds	1
   255  003B                     _test_adc:	
   256  003B                     	ds	1
   257  003C                     _bujinFlag:	
   258  003C                     	ds	1
   259  003D                     _lowFanTime:	
   260  003D                     	ds	1
   261  003E                     _lowBatTime:	
   262  003E                     	ds	1
   263  003F                     _lowBatLock:	
   264  003F                     	ds	1
   265  0040                     _firstLock:	
   266  0040                     	ds	1
   267  0041                     _chrgFullTime:	
   268  0041                     	ds	1
   269  0042                     _chrgFullFlag:	
   270  0042                     	ds	1
   271  0043                     _chrgFlag:	
   272  0043                     	ds	1
   273  0044                     _fanOverTime:	
   274  0044                     	ds	1
   275  0045                     _count10s:	
   276  0045                     	ds	1
   277  0046                     _fanDuty:	
   278  0046                     	ds	1
   279  0047                     _wuhuaFlag:	
   280  0047                     	ds	1
   281  0048                     _count1s:	
   282  0048                     	ds	1
   283  0049                     _MainTime:	
   284  0049                     	ds	1
   285  004A                     _adresult:	
   286  004A                     	ds	2
   287                           
   288                           	psect	bssBANK1
   289  00A0                     __pbssBANK1:	
   290  00A0                     _KeyReference:	
   291  00A0                     	ds	6
   292  00A6                     _KeyOldValue2:	
   293  00A6                     	ds	6
   294  00AC                     _KeyOldValue1:	
   295  00AC                     	ds	6
   296  00B2                     _KeyOldValue0:	
   297  00B2                     	ds	6
   298  00B8                     _KeyResSum:	
   299  00B8                     	ds	6
   300  00BE                     _KeyUpShake:	
   301  00BE                     	ds	3
   302  00C1                     _result:	
   303  00C1                     	ds	2
   304                           
   305                           	psect	clrtext
   306  0EB7                     clear_ram0:	
   307                           ;	Called with FSR containing the base address, and
   308                           ;	W with the last address+1
   309                           
   310  0EB7  0064               	clrwdt	;clear the watchdog before getting into this loop
   311  0EB8                     clrloop0:	
   312  0EB8  0180               	clrf	0	;clear RAM location pointed to by FSR
   313  0EB9  0A84               	incf	4,f	;increment pointer
   314  0EBA  0604               	xorwf	4,w	;XOR with final address
   315  0EBB  1903               	btfsc	3,2	;have we reached the end yet?
   316  0EBC  3400               	retlw	0	;all done for this memory range, return
   317  0EBD  0604               	xorwf	4,w	;XOR again to restore value
   318  0EBE  2EB8               	goto	clrloop0	;do the next byte
   319                           
   320                           	psect	cstackBANK1
   321  00C3                     __pcstackBANK1:	
   322  00C3                     workCtr@power_temp:	
   323                           
   324                           ; 4 bytes @ 0x0
   325  00C3                     	ds	4
   326                           
   327                           	psect	cstackCOMMON
   328  0070                     __pcstackCOMMON:	
   329  0070                     ?_SystemEnterSleep:	
   330  0070                     ?_CheckTouchKey:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_Init_System:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_Refurbish_Sfr:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_KeyServer:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_Isr_Timer:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ??_Isr_Timer:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_WorkSleep:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_chrgCtr:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_keyLedCtr:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_pwmInit:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_pwmStop:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_fanInit:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_fanStop:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_fanCtr:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_wuhuaCtr:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_bujinCtr:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_workCtr:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_main:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_KeyIsIn:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_KeyClearOne:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_KeyClearIn:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_KeyStopClear:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_ClearResSum:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_GetTouchKeyValue:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_CheckOnceResult:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_CheckKeyOldValue:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_TurnKeyFlags:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_CheckValidTime:	
   412                           ; 1 bytes @ 0x0
   413                           
   414                           
   415                           ; 1 bytes @ 0x0
   416  0070                     	ds	2
   417  0072                     ??_Init_System:	
   418  0072                     ??_Refurbish_Sfr:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ??_KeyServer:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0072                     ?_ADC_Sample:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0072                     ??_chrgCtr:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0072                     ??_pwmInit:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0072                     ??_pwmStop:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0072                     ??_fanInit:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0072                     ??_fanStop:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0072                     ??_wuhuaCtr:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0072                     ??_bujinCtr:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0072                     ??_KeyIsIn:	
   449                           ; 1 bytes @ 0x2
   450                           
   451  0072                     ??_KeyClearOne:	
   452                           ; 1 bytes @ 0x2
   453                           
   454  0072                     ??_ClearResSum:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     ?_KeyHave:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ??_CheckValidTime:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     ??___lmul:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ?___lwmod:	
   467                           ; 1 bytes @ 0x2
   468                           
   469  0072                     ?___ftpack:	
   470                           ; 2 bytes @ 0x2
   471                           
   472  0072                     ADC_Sample@adldo:	
   473                           ; 3 bytes @ 0x2
   474                           
   475  0072                     KeyIsIn@46:	
   476                           ; 1 bytes @ 0x2
   477                           
   478  0072                     KeyClearOne@49:	
   479                           ; 1 bytes @ 0x2
   480                           
   481  0072                     ClearResSum@56:	
   482                           ; 1 bytes @ 0x2
   483                           
   484  0072                     KeyHave@59:	
   485                           ; 1 bytes @ 0x2
   486                           
   487  0072                     ___lwmod@divisor:	
   488                           ; 2 bytes @ 0x2
   489                           
   490  0072                     ___ftpack@arg:	
   491                           ; 2 bytes @ 0x2
   492                           
   493  0072                     ___lmul@product:	
   494                           ; 3 bytes @ 0x2
   495                           
   496                           
   497                           ; 4 bytes @ 0x2
   498  0072                     	ds	1
   499  0073                     ??_ADC_Sample:	
   500  0073                     ??_KeyStopClear:	
   501                           ; 1 bytes @ 0x3
   502                           
   503  0073                     ??_GetTouchKeyValue:	
   504                           ; 1 bytes @ 0x3
   505                           
   506  0073                     KeyIsIn@45:	
   507                           ; 1 bytes @ 0x3
   508                           
   509  0073                     KeyStopClear@53:	
   510                           ; 1 bytes @ 0x3
   511                           
   512  0073                     GetTouchKeyValue@64:	
   513                           ; 1 bytes @ 0x3
   514                           
   515                           
   516                           ; 2 bytes @ 0x3
   517  0073                     	ds	1
   518  0074                     ??_KeyClearIn:	
   519  0074                     ??_KeyHave:	
   520                           ; 1 bytes @ 0x4
   521                           
   522  0074                     ??_CheckKeyOldValue:	
   523                           ; 1 bytes @ 0x4
   524                           
   525  0074                     bujinCtr@tempStep:	
   526                           ; 1 bytes @ 0x4
   527                           
   528  0074                     KeyClearIn@51:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  0074                     KeyHave@58:	
   532                           ; 1 bytes @ 0x4
   533                           
   534  0074                     ___lwmod@dividend:	
   535                           ; 1 bytes @ 0x4
   536                           
   537                           
   538                           ; 2 bytes @ 0x4
   539  0074                     	ds	1
   540  0075                     ??_TurnKeyFlags:	
   541  0075                     ___ftpack@exp:	
   542                           ; 1 bytes @ 0x5
   543                           
   544  0075                     GetTouchKeyValue@63:	
   545                           ; 1 bytes @ 0x5
   546                           
   547                           
   548                           ; 2 bytes @ 0x5
   549  0075                     	ds	1
   550  0076                     ??___lwmod:	
   551  0076                     ___ftpack@sign:	
   552                           ; 1 bytes @ 0x6
   553                           
   554  0076                     ___lwmod@counter:	
   555                           ; 1 bytes @ 0x6
   556                           
   557                           
   558                           ; 1 bytes @ 0x6
   559  0076                     	ds	1
   560  0077                     ??_keyLedCtr:	
   561  0077                     ??_fanCtr:	
   562                           ; 1 bytes @ 0x7
   563                           
   564  0077                     ??_workCtr:	
   565                           ; 1 bytes @ 0x7
   566                           
   567  0077                     ??___lwtoft:	
   568                           ; 1 bytes @ 0x7
   569                           
   570  0077                     GetTouchKeyValue@62:	
   571                           ; 1 bytes @ 0x7
   572                           
   573                           
   574                           ; 1 bytes @ 0x7
   575  0077                     	ds	1
   576  0078                     ??_CheckTouchKey:	
   577  0078                     ??_WorkSleep:	
   578                           ; 1 bytes @ 0x8
   579                           
   580  0078                     ??_main:	
   581                           ; 1 bytes @ 0x8
   582                           
   583                           
   584                           	psect	cstackBANK0
   585  004C                     __pcstackBANK0:	
   586                           ; 1 bytes @ 0x8
   587                           
   588  004C                     ??_SystemEnterSleep:	
   589  004C                     ??___ftpack:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  004C                     ??_CheckOnceResult:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  004C                     ?___lmul:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  004C                     ADC_Sample@j:	
   599                           ; 4 bytes @ 0x0
   600                           
   601  004C                     CheckKeyOldValue@79:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  004C                     ___lmul@multiplier:	
   605                           ; 2 bytes @ 0x0
   606                           
   607                           
   608                           ; 4 bytes @ 0x0
   609  004C                     	ds	1
   610  004D                     ADC_Sample@adch:	
   611                           
   612                           ; 1 bytes @ 0x1
   613  004D                     	ds	1
   614  004E                     ADC_Sample@i:	
   615  004E                     CheckKeyOldValue@80:	
   616                           ; 1 bytes @ 0x2
   617                           
   618  004E                     SystemEnterSleep@94:	
   619                           ; 2 bytes @ 0x2
   620                           
   621                           
   622                           ; 2 bytes @ 0x2
   623  004E                     	ds	1
   624  004F                     ?___lwtoft:	
   625  004F                     ___lwtoft@c:	
   626                           ; 3 bytes @ 0x3
   627                           
   628  004F                     ADC_Sample@adsum:	
   629                           ; 2 bytes @ 0x3
   630                           
   631                           
   632                           ; 4 bytes @ 0x3
   633  004F                     	ds	1
   634  0050                     CheckKeyOldValue@78:	
   635  0050                     CheckOnceResult@73:	
   636                           ; 1 bytes @ 0x4
   637                           
   638  0050                     SystemEnterSleep@93:	
   639                           ; 2 bytes @ 0x4
   640                           
   641  0050                     ___lmul@multiplicand:	
   642                           ; 2 bytes @ 0x4
   643                           
   644                           
   645                           ; 4 bytes @ 0x4
   646  0050                     	ds	2
   647  0052                     ?___ftdiv:	
   648  0052                     CheckOnceResult@70:	
   649                           ; 3 bytes @ 0x6
   650                           
   651  0052                     SystemEnterSleep@92:	
   652                           ; 1 bytes @ 0x6
   653                           
   654  0052                     ___ftdiv@f2:	
   655                           ; 2 bytes @ 0x6
   656                           
   657                           
   658                           ; 3 bytes @ 0x6
   659  0052                     	ds	1
   660  0053                     ADC_Sample@admin:	
   661  0053                     CheckOnceResult@72:	
   662                           ; 2 bytes @ 0x7
   663                           
   664                           
   665                           ; 2 bytes @ 0x7
   666  0053                     	ds	1
   667  0054                     SystemEnterSleep@91:	
   668                           
   669                           ; 1 bytes @ 0x8
   670  0054                     	ds	1
   671  0055                     CheckOnceResult@69:	
   672  0055                     ADC_Sample@admax:	
   673                           ; 1 bytes @ 0x9
   674                           
   675  0055                     ___ftdiv@f1:	
   676                           ; 2 bytes @ 0x9
   677                           
   678                           
   679                           ; 3 bytes @ 0x9
   680  0055                     	ds	1
   681  0056                     CheckOnceResult@71:	
   682                           
   683                           ; 2 bytes @ 0xA
   684  0056                     	ds	1
   685  0057                     ADC_Sample@ad_temp:	
   686                           
   687                           ; 2 bytes @ 0xB
   688  0057                     	ds	1
   689  0058                     ??___ftdiv:	
   690  0058                     CheckOnceResult@68:	
   691                           ; 1 bytes @ 0xC
   692                           
   693                           
   694                           ; 1 bytes @ 0xC
   695  0058                     	ds	1
   696  0059                     fanCtr@maxFanValue:	
   697                           
   698                           ; 1 bytes @ 0xD
   699  0059                     	ds	1
   700  005A                     fanCtr@fan_temp:	
   701                           
   702                           ; 4 bytes @ 0xE
   703  005A                     	ds	1
   704  005B                     ___ftdiv@cntr:	
   705                           
   706                           ; 1 bytes @ 0xF
   707  005B                     	ds	1
   708  005C                     ___ftdiv@f3:	
   709                           
   710                           ; 3 bytes @ 0x10
   711  005C                     	ds	3
   712  005F                     ___ftdiv@exp:	
   713                           
   714                           ; 1 bytes @ 0x13
   715  005F                     	ds	1
   716  0060                     ___ftdiv@sign:	
   717                           
   718                           ; 1 bytes @ 0x14
   719  0060                     	ds	1
   720  0061                     ?___fttol:	
   721  0061                     ___fttol@f1:	
   722                           ; 4 bytes @ 0x15
   723                           
   724                           
   725                           ; 3 bytes @ 0x15
   726  0061                     	ds	4
   727  0065                     ??___fttol:	
   728                           
   729                           ; 1 bytes @ 0x19
   730  0065                     	ds	3
   731  0068                     ___fttol@sign1:	
   732                           
   733                           ; 1 bytes @ 0x1C
   734  0068                     	ds	1
   735  0069                     ___fttol@lval:	
   736                           
   737                           ; 4 bytes @ 0x1D
   738  0069                     	ds	4
   739  006D                     ___fttol@exp1:	
   740                           
   741                           ; 1 bytes @ 0x21
   742  006D                     	ds	1
   743                           
   744                           	psect	maintext
   745  0EDA                     __pmaintext:	
   746 ;;
   747 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   748 ;;
   749 ;; *************** function _main *****************
   750 ;; Defined at:
   751 ;;		line 753 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : B00/0
   762 ;;		On exit  : 200/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   765 ;;      Params:         0       0       0       0
   766 ;;      Locals:         0       0       0       0
   767 ;;      Temps:          0       0       0       0
   768 ;;      Totals:         0       0       0       0
   769 ;;Total ram usage:        0 bytes
   770 ;; Hardware stack levels required when called:    6
   771 ;; This function calls:
   772 ;;		_CheckTouchKey
   773 ;;		_Init_System
   774 ;;		_KeyServer
   775 ;;		_Refurbish_Sfr
   776 ;;		_WorkSleep
   777 ;;		_chrgCtr
   778 ;;		_workCtr
   779 ;; This function is called by:
   780 ;;		Startup code after reset
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           
   785                           ;psect for function _main
   786  0EDA                     _main:	
   787                           
   788                           ;main.c: 755: Init_System();
   789                           
   790                           ;incstack = 0
   791                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   792  0EDA  118A  2405  158A   	fcall	_Init_System
   793                           
   794                           ;main.c: 756: firstLock = 0;
   795  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
   796  0EDE  30C8               	movlw	200
   797  0EDF  01C0               	clrf	_firstLock
   798                           
   799                           ;main.c: 757: firstTime = 200;
   800  0EE0  00EE               	movwf	_firstTime
   801  0EE1                     l4615:	
   802                           
   803                           ;main.c: 759: {
   804                           ;main.c: 760: if(B_MainLoop)
   805  0EE1  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   806  0EE2  2EE1               	goto	l4615
   807                           
   808                           ;main.c: 761: {
   809                           ;main.c: 762: B_MainLoop = 0;
   810  0EE3  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   811  0EE4  0064               	clrwdt	;# 
   812                           
   813                           ;main.c: 765: CheckTouchKey();
   814  0EE5  118A  2452  158A   	fcall	_CheckTouchKey
   815                           
   816                           ;main.c: 766: chrgCtr();
   817  0EE8  118A  27E0  158A   	fcall	_chrgCtr
   818                           
   819                           ;main.c: 767: Refurbish_Sfr();
   820  0EEB  118A  276A  158A   	fcall	_Refurbish_Sfr
   821                           
   822                           ;main.c: 768: KeyServer();
   823  0EEE  158A  2710  158A   	fcall	_KeyServer
   824                           
   825                           ;main.c: 769: workCtr();
   826  0EF1  118A  2020  158A   	fcall	_workCtr
   827                           
   828                           ;main.c: 770: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && b
      +                          ujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 == 0)
   829  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
   830  0EF5  086E               	movf	_firstTime,w
   831  0EF6  1D03               	btfss	3,2
   832  0EF7  2EE1               	goto	l4615
   833  0EF8  0843               	movf	_chrgFlag,w
   834  0EF9  1D03               	btfss	3,2
   835  0EFA  2EE1               	goto	l4615
   836  0EFB  087B               	movf	_workStep,w
   837  0EFC  1D03               	btfss	3,2
   838  0EFD  2EE1               	goto	l4615
   839  0EFE  0847               	movf	_wuhuaFlag,w
   840  0EFF  1D03               	btfss	3,2
   841  0F00  2EE1               	goto	l4615
   842  0F01  083C               	movf	_bujinFlag,w
   843  0F02  1D03               	btfss	3,2
   844  0F03  2EE1               	goto	l4615
   845  0F04  0832               	movf	_shanshuoTime,w
   846  0F05  0433               	iorwf	_shanshuoTime+1,w
   847  0F06  1D03               	btfss	3,2
   848  0F07  2EE1               	goto	l4615
   849  0F08  0830               	movf	_shanshuoTime2,w
   850  0F09  0431               	iorwf	_shanshuoTime2+1,w
   851  0F0A  1D03               	btfss	3,2
   852  0F0B  2EE1               	goto	l4615
   853                           
   854                           ;main.c: 771: {
   855                           ;main.c: 772: WorkSleep();
   856  0F0C  118A  2423  158A   	fcall	_WorkSleep
   857  0F0F  2EE1               	goto	l4615
   858  0F10                     __end_of_main:	
   859                           
   860                           	psect	text1
   861  0020                     __ptext1:	
   862 ;; *************** function _workCtr *****************
   863 ;; Defined at:
   864 ;;		line 697 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 300/0
   875 ;;		On exit  : 200/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   878 ;;      Params:         0       0       0       0
   879 ;;      Locals:         0       0       4       0
   880 ;;      Temps:          0       0       0       0
   881 ;;      Totals:         0       0       4       0
   882 ;;Total ram usage:        4 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    3
   885 ;; This function calls:
   886 ;;		_ADC_Sample
   887 ;;		___ftdiv
   888 ;;		___fttol
   889 ;;		___lwtoft
   890 ;;		_bujinCtr
   891 ;;		_fanCtr
   892 ;;		_keyLedCtr
   893 ;;		_wuhuaCtr
   894 ;; This function is called by:
   895 ;;		_main
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           
   900                           ;psect for function _workCtr
   901  0020                     _workCtr:	
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   905  0020  301F               	movlw	31
   906                           
   907                           ;main.c: 699: test_adc = ADC_Sample(31, 0);
   908  0021  01F2               	clrf	ADC_Sample@adldo
   909  0022  219B  118A         	fcall	_ADC_Sample
   910  0024  00BB               	movwf	_test_adc	;volatile
   911                           
   912                           ;main.c: 700: if (0xA5 == test_adc)
   913  0025  30A5               	movlw	165
   914  0026  063B               	xorwf	_test_adc,w	;volatile
   915  0027  1D03               	btfss	3,2
   916  0028  285A               	goto	l4539
   917                           
   918                           ;main.c: 701: {
   919                           ;main.c: 702: volatile unsigned long power_temp;
   920                           ;main.c: 704: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   921  0029  3096               	movlw	150
   922  002A  01D5               	clrf	___ftdiv@f1
   923  002B  00D6               	movwf	___ftdiv@f1+1
   924  002C  304A               	movlw	74
   925  002D  00D7               	movwf	___ftdiv@f1+2
   926  002E  084B               	movf	_adresult+1,w	;volatile
   927  002F  00D0               	movwf	___lwtoft@c+1
   928  0030  084A               	movf	_adresult,w	;volatile
   929  0031  00CF               	movwf	___lwtoft@c
   930  0032  214D  118A         	fcall	___lwtoft
   931  0034  084F               	movf	?___lwtoft,w
   932  0035  00D2               	movwf	___ftdiv@f2
   933  0036  0850               	movf	?___lwtoft+1,w
   934  0037  00D3               	movwf	___ftdiv@f2+1
   935  0038  0851               	movf	?___lwtoft+2,w
   936  0039  00D4               	movwf	___ftdiv@f2+2
   937  003A  2092  118A         	fcall	___ftdiv
   938  003C  0852               	movf	?___ftdiv,w
   939  003D  00E1               	movwf	___fttol@f1
   940  003E  0853               	movf	?___ftdiv+1,w
   941  003F  00E2               	movwf	___fttol@f1+1
   942  0040  0854               	movf	?___ftdiv+2,w
   943  0041  00E3               	movwf	___fttol@f1+2
   944  0042  20F4  118A         	fcall	___fttol
   945  0044  0864               	movf	?___fttol+3,w
   946  0045  1683               	bsf	3,5	;RP0=1, select bank1
   947  0046  00C6               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   948  0047  1283               	bcf	3,5	;RP0=0, select bank0
   949  0048  0863               	movf	?___fttol+2,w
   950  0049  1683               	bsf	3,5	;RP0=1, select bank1
   951  004A  00C5               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   952  004B  1283               	bcf	3,5	;RP0=0, select bank0
   953  004C  0862               	movf	?___fttol+1,w
   954  004D  1683               	bsf	3,5	;RP0=1, select bank1
   955  004E  00C4               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   956  004F  1283               	bcf	3,5	;RP0=0, select bank0
   957  0050  0861               	movf	?___fttol,w
   958  0051  1683               	bsf	3,5	;RP0=1, select bank1
   959  0052  00C3               	movwf	workCtr@power_temp^(0+128)	;volatile
   960                           
   961                           ;main.c: 705: power_ad = (unsigned int)(power_temp);
   962  0053  0844               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
   963  0054  1283               	bcf	3,5	;RP0=0, select bank0
   964  0055  00A7               	movwf	_power_ad+1	;volatile
   965  0056  1683               	bsf	3,5	;RP0=1, select bank1
   966  0057  0843               	movf	workCtr@power_temp^(0+128),w	;volatile
   967  0058  1283               	bcf	3,5	;RP0=0, select bank0
   968  0059  00A6               	movwf	_power_ad	;volatile
   969  005A                     l4539:	
   970                           
   971                           ;main.c: 706: }
   972                           ;main.c: 707: if(workStep == 2 && power_ad < 2900)
   973  005A  3002               	movlw	2
   974  005B  067B               	xorwf	_workStep,w
   975  005C  1D03               	btfss	3,2
   976  005D  286E               	goto	l4549
   977  005E  300B               	movlw	11
   978  005F  0227               	subwf	_power_ad+1,w	;volatile
   979  0060  3054               	movlw	84
   980  0061  1903               	skipnz
   981  0062  0226               	subwf	_power_ad,w	;volatile
   982  0063  1803               	skipnc
   983  0064  286E               	goto	l4549
   984                           
   985                           ;main.c: 708: {
   986                           ;main.c: 709: if(++lowFanTime > 200)
   987  0065  30C9               	movlw	201
   988  0066  0ABD               	incf	_lowFanTime,f
   989  0067  023D               	subwf	_lowFanTime,w
   990  0068  1C03               	skipc
   991  0069  286F               	goto	l4551
   992                           
   993                           ;main.c: 710: {
   994                           ;main.c: 711: lowFanTime = 0;
   995  006A  01BD               	clrf	_lowFanTime
   996                           
   997                           ;main.c: 712: workStep = 1;
   998  006B  01FB               	clrf	_workStep
   999  006C  0AFB               	incf	_workStep,f
  1000  006D  286F               	goto	l4551
  1001  006E                     l4549:	
  1002                           
  1003                           ;main.c: 715: else
  1004                           ;main.c: 716: {
  1005                           ;main.c: 717: lowFanTime = 0;
  1006  006E  01BD               	clrf	_lowFanTime
  1007  006F                     l4551:	
  1008                           
  1009                           ;main.c: 718: }
  1010                           ;main.c: 719: if(power_ad < 2700)
  1011  006F  300A               	movlw	10
  1012  0070  0227               	subwf	_power_ad+1,w	;volatile
  1013  0071  308C               	movlw	140
  1014  0072  1903               	skipnz
  1015  0073  0226               	subwf	_power_ad,w	;volatile
  1016  0074  1803               	skipnc
  1017  0075  2882               	goto	l4559
  1018                           
  1019                           ;main.c: 720: {
  1020                           ;main.c: 721: if(++lowBatTime > 200)
  1021  0076  30C9               	movlw	201
  1022  0077  0ABE               	incf	_lowBatTime,f
  1023  0078  023E               	subwf	_lowBatTime,w
  1024  0079  1C03               	skipc
  1025  007A  2883               	goto	l4561
  1026                           
  1027                           ;main.c: 722: {
  1028                           ;main.c: 723: lowBatTime = 0;
  1029  007B  01BE               	clrf	_lowBatTime
  1030                           
  1031                           ;main.c: 724: lowBatLock = 1;
  1032  007C  01BF               	clrf	_lowBatLock
  1033  007D  0ABF               	incf	_lowBatLock,f
  1034                           
  1035                           ;main.c: 725: workStep = 0;
  1036  007E  01FB               	clrf	_workStep
  1037                           
  1038                           ;main.c: 726: wuhuaFlag = 0;
  1039  007F  01C7               	clrf	_wuhuaFlag
  1040                           
  1041                           ;main.c: 727: bujinFlag = 0;
  1042  0080  01BC               	clrf	_bujinFlag
  1043  0081  2883               	goto	l4561
  1044  0082                     l4559:	
  1045                           
  1046                           ;main.c: 730: else
  1047                           ;main.c: 731: {
  1048                           ;main.c: 732: lowBatTime = 0;
  1049  0082  01BE               	clrf	_lowBatTime
  1050  0083                     l4561:	
  1051                           
  1052                           ;main.c: 733: }
  1053                           ;main.c: 734: if(firstTime > 0)
  1054  0083  086E               	movf	_firstTime,w
  1055  0084  1903               	btfsc	3,2
  1056  0085  288B               	goto	l4569
  1057                           
  1058                           ;main.c: 735: {
  1059                           ;main.c: 736: firstTime--;
  1060  0086  03EE               	decf	_firstTime,f
  1061                           
  1062                           ;main.c: 737: PORTB = 0x00;
  1063  0087  0186               	clrf	6	;volatile
  1064                           
  1065                           ;main.c: 738: PORTA = 0x00;
  1066  0088  1683               	bsf	3,5	;RP0=1, select bank1
  1067  0089  0186               	clrf	6	;volatile
  1068                           
  1069                           ;main.c: 739: }
  1070  008A  0008               	return
  1071  008B                     l4569:	
  1072                           
  1073                           ;main.c: 740: else
  1074                           ;main.c: 741: {
  1075                           ;main.c: 742: keyLedCtr();
  1076  008B  2304  118A         	fcall	_keyLedCtr
  1077                           
  1078                           ;main.c: 743: fanCtr();
  1079  008D  226B  118A         	fcall	_fanCtr
  1080                           
  1081                           ;main.c: 744: wuhuaCtr();
  1082  008F  23AD               	fcall	_wuhuaCtr
  1083                           
  1084                           ;main.c: 745: bujinCtr();
  1085  0090  158A  2F75         	ljmp	l4287
  1086  0092                     __end_of_workCtr:	
  1087  0092                     __ptext15:	
  1088 ;; *************** function ___ftdiv *****************
  1089 ;; Defined at:
  1090 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  f2              3    6[BANK0 ] float 
  1093 ;;  f1              3    9[BANK0 ] float 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  f3              3   16[BANK0 ] float 
  1096 ;;  sign            1   20[BANK0 ] unsigned char 
  1097 ;;  exp             1   19[BANK0 ] unsigned char 
  1098 ;;  cntr            1   15[BANK0 ] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  3    6[BANK0 ] float 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0, pclath, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 300/0
  1105 ;;		On exit  : 300/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1108 ;;      Params:         0       6       0       0
  1109 ;;      Locals:         0       6       0       0
  1110 ;;      Temps:          0       3       0       0
  1111 ;;      Totals:         0      15       0       0
  1112 ;;Total ram usage:       15 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    2
  1115 ;; This function calls:
  1116 ;;		___ftpack
  1117 ;; This function is called by:
  1118 ;;		_workCtr
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function ___ftdiv
  1124  0092                     ___ftdiv:	
  1125                           
  1126                           ;incstack = 0
  1127                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1128  0092  0855               	movf	___ftdiv@f1,w
  1129  0093  00D8               	movwf	??___ftdiv
  1130  0094  0856               	movf	___ftdiv@f1+1,w
  1131  0095  00D9               	movwf	??___ftdiv+1
  1132  0096  0857               	movf	___ftdiv@f1+2,w
  1133  0097  00DA               	movwf	??___ftdiv+2
  1134  0098  1003               	clrc
  1135  0099  0D59               	rlf	??___ftdiv+1,w
  1136  009A  0D5A               	rlf	??___ftdiv+2,w
  1137  009B  00DF               	movwf	___ftdiv@exp
  1138  009C  085F               	movf	___ftdiv@exp,w
  1139  009D  1D03               	btfss	3,2
  1140  009E  28A0               	goto	l4409
  1141  009F  2C01               	ljmp	PL44	;call to abstracted procedure
  1142  00A0                     l4409:	
  1143  00A0  0852               	movf	___ftdiv@f2,w
  1144  00A1  00D8               	movwf	??___ftdiv
  1145  00A2  0853               	movf	___ftdiv@f2+1,w
  1146  00A3  00D9               	movwf	??___ftdiv+1
  1147  00A4  0854               	movf	___ftdiv@f2+2,w
  1148  00A5  00DA               	movwf	??___ftdiv+2
  1149  00A6  1003               	clrc
  1150  00A7  0D59               	rlf	??___ftdiv+1,w
  1151  00A8  0D5A               	rlf	??___ftdiv+2,w
  1152  00A9  00E0               	movwf	___ftdiv@sign
  1153  00AA  0860               	movf	___ftdiv@sign,w
  1154  00AB  1D03               	btfss	3,2
  1155  00AC  28AE               	goto	l1559
  1156  00AD  2C01               	ljmp	PL44	;call to abstracted procedure
  1157  00AE                     l1559:	
  1158  00AE  3089               	movlw	137
  1159  00AF  01DC               	clrf	___ftdiv@f3
  1160  00B0  01DD               	clrf	___ftdiv@f3+1
  1161  00B1  01DE               	clrf	___ftdiv@f3+2
  1162  00B2  0760               	addwf	___ftdiv@sign,w
  1163  00B3  00D8               	movwf	??___ftdiv
  1164  00B4  02DF               	subwf	___ftdiv@exp,f
  1165  00B5  0857               	movf	___ftdiv@f1+2,w
  1166  00B6  00E0               	movwf	___ftdiv@sign
  1167  00B7  0854               	movf	___ftdiv@f2+2,w
  1168  00B8  06E0               	xorwf	___ftdiv@sign,f
  1169  00B9  3080               	movlw	128
  1170  00BA  05E0               	andwf	___ftdiv@sign,f
  1171  00BB  3018               	movlw	24
  1172  00BC  17D6               	bsf	___ftdiv@f1+1,7
  1173  00BD  01D7               	clrf	___ftdiv@f1+2
  1174  00BE  17D3               	bsf	___ftdiv@f2+1,7
  1175  00BF  01D4               	clrf	___ftdiv@f2+2
  1176  00C0  00DB               	movwf	___ftdiv@cntr
  1177  00C1                     l4431:	
  1178  00C1  1003               	clrc
  1179  00C2  0DDC               	rlf	___ftdiv@f3,f
  1180  00C3  0DDD               	rlf	___ftdiv@f3+1,f
  1181  00C4  0DDE               	rlf	___ftdiv@f3+2,f
  1182  00C5  0854               	movf	___ftdiv@f2+2,w
  1183  00C6  0257               	subwf	___ftdiv@f1+2,w
  1184  00C7  1D03               	skipz
  1185  00C8  28CF               	goto	u4355
  1186  00C9  0853               	movf	___ftdiv@f2+1,w
  1187  00CA  0256               	subwf	___ftdiv@f1+1,w
  1188  00CB  1D03               	skipz
  1189  00CC  28CF               	goto	u4355
  1190  00CD  0852               	movf	___ftdiv@f2,w
  1191  00CE  0255               	subwf	___ftdiv@f1,w
  1192  00CF                     u4355:	
  1193  00CF  1C03               	skipc
  1194  00D0  28DD               	goto	L7
  1195  00D1  0852               	movf	___ftdiv@f2,w
  1196  00D2  02D5               	subwf	___ftdiv@f1,f
  1197  00D3  0853               	movf	___ftdiv@f2+1,w
  1198  00D4  1C03               	skipc
  1199  00D5  0F53               	incfsz	___ftdiv@f2+1,w
  1200  00D6  02D6               	subwf	___ftdiv@f1+1,f
  1201  00D7  0854               	movf	___ftdiv@f2+2,w
  1202  00D8  1C03               	skipc
  1203  00D9  0A54               	incf	___ftdiv@f2+2,w
  1204  00DA  02D7               	subwf	___ftdiv@f1+2,f
  1205  00DB  145C               	bsf	___ftdiv@f3,0
  1206  00DC  1003               	clrc
  1207  00DD                     L7:	
  1208  00DD  0DD5               	rlf	___ftdiv@f1,f
  1209  00DE  0DD6               	rlf	___ftdiv@f1+1,f
  1210  00DF  0DD7               	rlf	___ftdiv@f1+2,f
  1211  00E0  0BDB               	decfsz	___ftdiv@cntr,f
  1212  00E1  28C1               	goto	l4431
  1213  00E2  085C               	movf	___ftdiv@f3,w
  1214  00E3  00F2               	movwf	___ftpack@arg
  1215  00E4  085D               	movf	___ftdiv@f3+1,w
  1216  00E5  00F3               	movwf	___ftpack@arg+1
  1217  00E6  085E               	movf	___ftdiv@f3+2,w
  1218  00E7  00F4               	movwf	___ftpack@arg+2
  1219  00E8  085F               	movf	___ftdiv@exp,w
  1220  00E9  00F5               	movwf	___ftpack@exp
  1221  00EA  0860               	movf	___ftdiv@sign,w
  1222  00EB  00F6               	movwf	___ftpack@sign
  1223  00EC  215D               	fcall	___ftpack
  1224  00ED  0872               	movf	?___ftpack,w
  1225  00EE  00D2               	movwf	?___ftdiv
  1226  00EF  0873               	movf	?___ftpack+1,w
  1227  00F0  00D3               	movwf	?___ftdiv+1
  1228  00F1  0874               	movf	?___ftpack+2,w
  1229  00F2  00D4               	movwf	?___ftdiv+2
  1230  00F3  0008               	return
  1231  00F4                     __end_of___ftdiv:	
  1232  00F4                     __ptext14:	
  1233 ;; *************** function ___fttol *****************
  1234 ;; Defined at:
  1235 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  f1              3   21[BANK0 ] float 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  lval            4   29[BANK0 ] unsigned long 
  1240 ;;  exp1            1   33[BANK0 ] unsigned char 
  1241 ;;  sign1           1   28[BANK0 ] unsigned char 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  4   21[BANK0 ] long 
  1244 ;; Registers used:
  1245 ;;		wreg, status,2, status,0
  1246 ;; Tracked objects:
  1247 ;;		On entry : 300/0
  1248 ;;		On exit  : 300/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1251 ;;      Params:         0       4       0       0
  1252 ;;      Locals:         0       6       0       0
  1253 ;;      Temps:          0       3       0       0
  1254 ;;      Totals:         0      13       0       0
  1255 ;;Total ram usage:       13 bytes
  1256 ;; Hardware stack levels used:    1
  1257 ;; Hardware stack levels required when called:    1
  1258 ;; This function calls:
  1259 ;;		Nothing
  1260 ;; This function is called by:
  1261 ;;		_workCtr
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           
  1266                           ;psect for function ___fttol
  1267  00F4                     ___fttol:	
  1268                           
  1269                           ;incstack = 0
  1270                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1271  00F4  23F0  118A         	fcall	PL24	;call to abstracted procedure
  1272  00F6  1003               	clrc
  1273  00F7  0D66               	rlf	??___fttol+1,w
  1274  00F8  0D67               	rlf	??___fttol+2,w
  1275  00F9  00ED               	movwf	___fttol@exp1
  1276  00FA  086D               	movf	___fttol@exp1,w
  1277  00FB  1D03               	btfss	3,2
  1278  00FC  2902               	goto	l4449
  1279  00FD                     l4447:	
  1280  00FD  01E1               	clrf	?___fttol
  1281  00FE  01E2               	clrf	?___fttol+1
  1282  00FF  01E3               	clrf	?___fttol+2
  1283  0100  01E4               	clrf	?___fttol+3
  1284  0101  0008               	return
  1285  0102                     l4449:	
  1286  0102  23F0  118A         	fcall	PL24	;call to abstracted procedure
  1287  0104  3017               	movlw	23
  1288  0105                     u4385:	
  1289  0105  1003               	clrc
  1290  0106  0CE7               	rrf	??___fttol+2,f
  1291  0107  0CE6               	rrf	??___fttol+1,f
  1292  0108  0CE5               	rrf	??___fttol,f
  1293  0109  3EFF               	addlw	-1
  1294  010A  1D03               	skipz
  1295  010B  2905               	goto	u4385
  1296  010C  0865               	movf	??___fttol,w
  1297  010D  00E8               	movwf	___fttol@sign1
  1298  010E  17E2               	bsf	___fttol@f1+1,7
  1299  010F  01E3               	clrf	___fttol@f1+2
  1300  0110  0861               	movf	___fttol@f1,w
  1301  0111  00E9               	movwf	___fttol@lval
  1302  0112  0862               	movf	___fttol@f1+1,w
  1303  0113  00EA               	movwf	___fttol@lval+1
  1304  0114  0863               	movf	___fttol@f1+2,w
  1305  0115  00EB               	movwf	___fttol@lval+2
  1306  0116  308E               	movlw	142
  1307  0117  01EC               	clrf	___fttol@lval+3
  1308  0118  02ED               	subwf	___fttol@exp1,f
  1309  0119  1FED               	btfss	___fttol@exp1,7
  1310  011A  2928               	goto	l4469
  1311  011B  086D               	movf	___fttol@exp1,w
  1312  011C  3A80               	xorlw	128
  1313  011D  3E8F               	addlw	143
  1314  011E  1C03               	btfss	3,0
  1315  011F  28FD               	goto	l4447
  1316  0120                     l4465:	
  1317  0120  1003               	clrc
  1318  0121  0CEC               	rrf	___fttol@lval+3,f
  1319  0122  0CEB               	rrf	___fttol@lval+2,f
  1320  0123  0CEA               	rrf	___fttol@lval+1,f
  1321  0124  0CE9               	rrf	___fttol@lval,f
  1322  0125  0FED               	incfsz	___fttol@exp1,f
  1323  0126  2920               	goto	l4465
  1324  0127  2936               	goto	l4477
  1325  0128                     l4469:	
  1326  0128  3018               	movlw	24
  1327  0129  026D               	subwf	___fttol@exp1,w
  1328  012A  1803               	btfsc	3,0
  1329  012B  28FD               	goto	l4447
  1330  012C                     l4475:	
  1331  012C  086D               	movf	___fttol@exp1,w
  1332  012D  1903               	btfsc	3,2
  1333  012E  2936               	goto	l4477
  1334  012F  1003               	clrc
  1335  0130  0DE9               	rlf	___fttol@lval,f
  1336  0131  0DEA               	rlf	___fttol@lval+1,f
  1337  0132  0DEB               	rlf	___fttol@lval+2,f
  1338  0133  0DEC               	rlf	___fttol@lval+3,f
  1339  0134  03ED               	decf	___fttol@exp1,f
  1340  0135  292C               	goto	l4475
  1341  0136                     l4477:	
  1342  0136  0868               	movf	___fttol@sign1,w
  1343  0137  1903               	btfsc	3,2
  1344  0138  2944               	goto	l4481
  1345  0139  09E9               	comf	___fttol@lval,f
  1346  013A  09EA               	comf	___fttol@lval+1,f
  1347  013B  09EB               	comf	___fttol@lval+2,f
  1348  013C  09EC               	comf	___fttol@lval+3,f
  1349  013D  0AE9               	incf	___fttol@lval,f
  1350  013E  1903               	skipnz
  1351  013F  0AEA               	incf	___fttol@lval+1,f
  1352  0140  1903               	skipnz
  1353  0141  0AEB               	incf	___fttol@lval+2,f
  1354  0142  1903               	skipnz
  1355  0143  0AEC               	incf	___fttol@lval+3,f
  1356  0144                     l4481:	
  1357  0144  086C               	movf	___fttol@lval+3,w
  1358  0145  00E4               	movwf	?___fttol+3
  1359  0146  086B               	movf	___fttol@lval+2,w
  1360  0147  00E3               	movwf	?___fttol+2
  1361  0148  086A               	movf	___fttol@lval+1,w
  1362  0149  00E2               	movwf	?___fttol+1
  1363  014A  0869               	movf	___fttol@lval,w
  1364  014B  00E1               	movwf	?___fttol
  1365  014C  0008               	return
  1366  014D                     __end_of___fttol:	
  1367  014D                     __ptext13:	
  1368 ;; *************** function ___lwtoft *****************
  1369 ;; Defined at:
  1370 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  c               2    3[BANK0 ] unsigned int 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  3    3[BANK0 ] float 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0, pclath, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 300/0
  1381 ;;		On exit  : 300/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1384 ;;      Params:         0       3       0       0
  1385 ;;      Locals:         0       0       0       0
  1386 ;;      Temps:          0       0       0       0
  1387 ;;      Totals:         0       3       0       0
  1388 ;;Total ram usage:        3 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    2
  1391 ;; This function calls:
  1392 ;;		___ftpack
  1393 ;; This function is called by:
  1394 ;;		_workCtr
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function ___lwtoft
  1400  014D                     ___lwtoft:	
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1404  014D  084F               	movf	___lwtoft@c,w
  1405  014E  00F2               	movwf	___ftpack@arg
  1406  014F  0850               	movf	___lwtoft@c+1,w
  1407  0150  00F3               	movwf	___ftpack@arg+1
  1408  0151  308E               	movlw	142
  1409  0152  01F4               	clrf	___ftpack@arg+2
  1410  0153  00F5               	movwf	___ftpack@exp
  1411  0154  01F6               	clrf	___ftpack@sign
  1412  0155  215D               	fcall	___ftpack
  1413  0156  0872               	movf	?___ftpack,w
  1414  0157  00CF               	movwf	?___lwtoft
  1415  0158  0873               	movf	?___ftpack+1,w
  1416  0159  00D0               	movwf	?___lwtoft+1
  1417  015A  0874               	movf	?___ftpack+2,w
  1418  015B  00D1               	movwf	?___lwtoft+2
  1419  015C  0008               	return
  1420  015D                     __end_of___lwtoft:	
  1421  015D                     __ptext16:	
  1422 ;; *************** function ___ftpack *****************
  1423 ;; Defined at:
  1424 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  arg             3    2[COMMON] unsigned um
  1427 ;;  exp             1    5[COMMON] unsigned char 
  1428 ;;  sign            1    6[COMMON] unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  3    2[COMMON] float 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 300/0
  1437 ;;		On exit  : 300/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1440 ;;      Params:         5       0       0       0
  1441 ;;      Locals:         0       0       0       0
  1442 ;;      Temps:          0       3       0       0
  1443 ;;      Totals:         5       3       0       0
  1444 ;;Total ram usage:        8 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    1
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		___ftdiv
  1451 ;;		___lwtoft
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           
  1456                           ;psect for function ___ftpack
  1457  015D                     ___ftpack:	
  1458                           
  1459                           ;incstack = 0
  1460                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1461  015D  0875               	movf	___ftpack@exp,w
  1462  015E  1903               	btfsc	3,2
  1463  015F  2965               	goto	l1505
  1464  0160  0874               	movf	___ftpack@arg+2,w
  1465  0161  0473               	iorwf	___ftpack@arg+1,w
  1466  0162  0472               	iorwf	___ftpack@arg,w
  1467  0163  1D03               	skipz
  1468  0164  296C               	goto	l4053
  1469  0165                     l1505:	
  1470  0165  01F2               	clrf	?___ftpack
  1471  0166  01F3               	clrf	?___ftpack+1
  1472  0167  01F4               	clrf	?___ftpack+2
  1473  0168  0008               	return
  1474  0169                     l4051:	
  1475  0169  0AF5               	incf	___ftpack@exp,f
  1476  016A  23F7  118A         	fcall	PL38	;call to abstracted procedure
  1477  016C                     l4053:	
  1478  016C  30FE               	movlw	254
  1479  016D  0574               	andwf	___ftpack@arg+2,w
  1480  016E  1903               	btfsc	3,2
  1481  016F  2979               	goto	l4057
  1482  0170  2969               	goto	l4051
  1483  0171                     l4055:	
  1484  0171  0AF5               	incf	___ftpack@exp,f
  1485  0172  0AF2               	incf	___ftpack@arg,f
  1486  0173  1903               	skipnz
  1487  0174  0AF3               	incf	___ftpack@arg+1,f
  1488  0175  1903               	skipnz
  1489  0176  0AF4               	incf	___ftpack@arg+2,f
  1490  0177  23F7  118A         	fcall	PL38	;call to abstracted procedure
  1491  0179                     l4057:	
  1492  0179  30FF               	movlw	255
  1493  017A  0574               	andwf	___ftpack@arg+2,w
  1494  017B  1903               	btfsc	3,2
  1495  017C  2987               	goto	l4061
  1496  017D  2971               	goto	l4055
  1497  017E                     l4063:	
  1498  017E  3002               	movlw	2
  1499  017F  0275               	subwf	___ftpack@exp,w
  1500  0180  1C03               	btfss	3,0
  1501  0181  2989               	goto	l1517
  1502  0182  03F5               	decf	___ftpack@exp,f
  1503  0183  1003               	clrc
  1504  0184  0DF2               	rlf	___ftpack@arg,f
  1505  0185  0DF3               	rlf	___ftpack@arg+1,f
  1506  0186  0DF4               	rlf	___ftpack@arg+2,f
  1507  0187                     l4061:	
  1508  0187  1FF3               	btfss	___ftpack@arg+1,7
  1509  0188  297E               	goto	l4063
  1510  0189                     l1517:	
  1511  0189  1C75               	btfss	___ftpack@exp,0
  1512  018A  13F3               	bcf	___ftpack@arg+1,7
  1513  018B  1003               	clrc
  1514  018C  0CF5               	rrf	___ftpack@exp,f
  1515  018D  0875               	movf	___ftpack@exp,w
  1516  018E  00CE               	movwf	??___ftpack+2
  1517  018F  01CD               	clrf	??___ftpack+1
  1518  0190  01CC               	clrf	??___ftpack
  1519  0191  084C               	movf	??___ftpack,w
  1520  0192  04F2               	iorwf	___ftpack@arg,f
  1521  0193  084D               	movf	??___ftpack+1,w
  1522  0194  04F3               	iorwf	___ftpack@arg+1,f
  1523  0195  084E               	movf	??___ftpack+2,w
  1524  0196  04F4               	iorwf	___ftpack@arg+2,f
  1525  0197  0876               	movf	___ftpack@sign,w
  1526  0198  1D03               	btfss	3,2
  1527  0199  17F4               	bsf	___ftpack@arg+2,7
  1528  019A  0008               	return
  1529  019B                     __end_of___ftpack:	
  1530  019B                     __ptext11:	
  1531 ;; *************** function _ADC_Sample *****************
  1532 ;; Defined at:
  1533 ;;		line 290 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  adch            1    wreg     unsigned char 
  1536 ;;  adldo           1    2[COMMON] unsigned char 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  adch            1    1[BANK0 ] unsigned char 
  1539 ;;  j               1    0[BANK0 ] unsigned char 
  1540 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1541 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1542 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1543 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1544 ;;  i               1    2[BANK0 ] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      unsigned char 
  1547 ;; Registers used:
  1548 ;;		wreg, status,2, status,0
  1549 ;; Tracked objects:
  1550 ;;		On entry : 300/0
  1551 ;;		On exit  : 300/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1554 ;;      Params:         1       0       0       0
  1555 ;;      Locals:         0      13       0       0
  1556 ;;      Temps:          4       0       0       0
  1557 ;;      Totals:         5      13       0       0
  1558 ;;Total ram usage:       18 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_fanCtr
  1565 ;;		_workCtr
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           
  1570                           ;psect for function _ADC_Sample
  1571  019B                     _ADC_Sample:	
  1572                           
  1573                           ;incstack = 0
  1574                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1575                           ;ADC_Sample@adch stored from wreg
  1576  019B  00CD               	movwf	ADC_Sample@adch
  1577                           
  1578                           ;main.c: 292: volatile unsigned long adsum = 0;
  1579                           
  1580                           ;main.c: 293: volatile unsigned int admin = 0, admax = 0;
  1581  019C  23E7  118A         	fcall	PL16	;call to abstracted procedure
  1582                           
  1583                           ;main.c: 294: volatile unsigned int ad_temp = 0;
  1584  019E  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  1585  019F  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1586                           
  1587                           ;main.c: 296: if ((!LDO_EN) && (adldo & 0x04) )
  1588  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1589  01A1  1D16               	btfss	22,2	;volatile
  1590  01A2  1D72               	btfss	ADC_Sample@adldo,2
  1591  01A3  29AC               	goto	l3939
  1592                           
  1593                           ;main.c: 297: {
  1594                           ;main.c: 299: ADCON1 = adldo;
  1595  01A4  0872               	movf	ADC_Sample@adldo,w
  1596  01A5  0096               	movwf	22	;volatile
  1597                           
  1598                           ;main.c: 300: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1599  01A6  3042               	movlw	66
  1600  01A7  00F3               	movwf	??_ADC_Sample
  1601  01A8                     u4687:	
  1602  01A8  0BF3               	decfsz	??_ADC_Sample,f
  1603  01A9  29A8               	goto	u4687
  1604  01AA  0000               	nop
  1605                           
  1606                           ;main.c: 301: }
  1607  01AB  29AE               	goto	l3941
  1608  01AC                     l3939:	
  1609                           
  1610                           ;main.c: 302: else
  1611                           ;main.c: 303: ADCON1 = adldo;
  1612  01AC  0872               	movf	ADC_Sample@adldo,w
  1613  01AD  0096               	movwf	22	;volatile
  1614  01AE                     l3941:	
  1615                           
  1616                           ;main.c: 305: if(adch & 0x10)
  1617  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1618  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1619  01B0  1E4D               	btfss	ADC_Sample@adch,4
  1620  01B1  29B7               	goto	l3949
  1621                           
  1622                           ;main.c: 306: {
  1623                           ;main.c: 307: CHS4 = 1;
  1624  01B2  1683               	bsf	3,5	;RP0=1, select bank1
  1625  01B3  1716               	bsf	22,6	;volatile
  1626                           
  1627                           ;main.c: 308: adch &= 0x0f;
  1628  01B4  300F               	movlw	15
  1629  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1630  01B6  05CD               	andwf	ADC_Sample@adch,f
  1631  01B7                     l3949:	
  1632                           
  1633                           ;main.c: 311: for (i = 0; i < 10; i++)
  1634  01B7  01CE               	clrf	ADC_Sample@i
  1635  01B8                     l3955:	
  1636                           
  1637                           ;main.c: 312: {
  1638                           ;main.c: 313: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1639  01B8  084D               	movf	ADC_Sample@adch,w
  1640  01B9  00F3               	movwf	??_ADC_Sample
  1641  01BA  3001               	movlw	1
  1642  01BB  1003               	clrc
  1643  01BC                     L4:	
  1644  01BC  0DF3               	rlf	??_ADC_Sample,f
  1645  01BD  3EFF               	addlw	-1
  1646  01BE  1003               	clrc
  1647  01BF  1D03               	skipz
  1648  01C0  29BC               	goto	L4
  1649  01C1  0D73               	rlf	??_ADC_Sample,w
  1650  01C2  3841               	iorlw	65
  1651  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  1652  01C4  0095               	movwf	21	;volatile
  1653  01C5  0000               	nop	;# 
  1654  01C6  0000               	nop	;# 
  1655  01C7  0000               	nop	;# 
  1656  01C8  0000               	nop	;# 
  1657                           
  1658                           ;main.c: 318: GODONE = 1;
  1659  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1660  01CA  1303               	bcf	3,6	;RP1=0, select bank1
  1661  01CB  1495               	bsf	21,1	;volatile
  1662                           
  1663                           ;main.c: 320: unsigned char j = 0;
  1664  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1665  01CD  01CC               	clrf	ADC_Sample@j
  1666  01CE                     l980:	
  1667                           ;main.c: 321: while (GODONE)
  1668                           
  1669  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  1670  01CF  1C95               	btfss	21,1	;volatile
  1671  01D0  29D8               	goto	l3965
  1672                           
  1673                           ;main.c: 322: {
  1674                           ;main.c: 323: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1675  01D1  29D2               	nop2	;2 cycle nop
  1676  01D2  29D3               	nop2	;2 cycle nop
  1677                           
  1678                           ;main.c: 325: if (0 == (--j))
  1679  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1680  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1681  01D5  0BCC               	decfsz	ADC_Sample@j,f
  1682  01D6  29CE               	goto	l980
  1683                           
  1684                           ;main.c: 326: return 0;
  1685  01D7  3400               	retlw	0
  1686  01D8                     l3965:	
  1687                           
  1688                           ;main.c: 327: }
  1689                           ;main.c: 329: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1690  01D8  0819               	movf	25,w	;volatile
  1691  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1692  01DA  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  1693  01DB  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1694  01DC  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  1695  01DD  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1696  01DE  30F0               	movlw	240
  1697  01DF  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1698  01E0  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1699  01E1  390F               	andlw	15
  1700  01E2  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1701  01E3  30F0               	movlw	240
  1702  01E4  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  1703  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  1704  01E6  0E18               	swapf	24,w	;volatile
  1705  01E7  390F               	andlw	15
  1706  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1707  01E9  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  1708  01EA  1803               	skipnc
  1709  01EB  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1710                           
  1711                           ;main.c: 331: if (0 == admax)
  1712  01EC  0855               	movf	ADC_Sample@admax,w	;volatile
  1713  01ED  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  1714  01EE  1D03               	btfss	3,2
  1715  01EF  29F3               	goto	l3973
  1716                           
  1717                           ;main.c: 332: {
  1718                           ;main.c: 333: admax = ad_temp;
  1719  01F0  23FC  118A         	fcall	PL42	;call to abstracted procedure
  1720  01F2  2A06               	goto	l3979
  1721  01F3                     l3973:	
  1722                           ;main.c: 335: }
  1723                           
  1724                           ;main.c: 334: admin = ad_temp;
  1725                           
  1726                           
  1727                           ;main.c: 336: else if (ad_temp > admax)
  1728  01F3  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1729  01F4  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  1730  01F5  1D03               	skipz
  1731  01F6  29F9               	goto	u3545
  1732  01F7  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1733  01F8  0255               	subwf	ADC_Sample@admax,w	;volatile
  1734  01F9                     u3545:	
  1735  01F9  1803               	skipnc
  1736  01FA  29FE               	goto	l3977
  1737                           
  1738                           ;main.c: 337: admax = ad_temp;
  1739  01FB  23FC  118A         	fcall	PL42	;call to abstracted procedure
  1740  01FD  2A0A               	goto	l986
  1741  01FE                     l3977:	
  1742                           
  1743                           ;main.c: 338: else if (ad_temp < admin)
  1744  01FE  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1745  01FF  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1746  0200  1D03               	skipz
  1747  0201  2A04               	goto	u3555
  1748  0202  0853               	movf	ADC_Sample@admin,w	;volatile
  1749  0203  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  1750  0204                     u3555:	
  1751  0204  1803               	skipnc
  1752  0205  2A0A               	goto	l986
  1753  0206                     l3979:	
  1754                           
  1755                           ;main.c: 339: admin = ad_temp;
  1756  0206  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1757  0207  00D4               	movwf	ADC_Sample@admin+1	;volatile
  1758  0208  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1759  0209  00D3               	movwf	ADC_Sample@admin	;volatile
  1760  020A                     l986:	
  1761                           
  1762                           ;main.c: 341: adsum += ad_temp;
  1763  020A  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1764  020B  00F3               	movwf	??_ADC_Sample
  1765  020C  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1766  020D  00F4               	movwf	??_ADC_Sample+1
  1767  020E  01F5               	clrf	??_ADC_Sample+2
  1768  020F  01F6               	clrf	??_ADC_Sample+3
  1769  0210  0873               	movf	??_ADC_Sample,w
  1770  0211  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  1771  0212  0874               	movf	??_ADC_Sample+1,w
  1772  0213  1103               	clrz
  1773  0214  1803               	skipnc
  1774  0215  3E01               	addlw	1
  1775  0216  1D03               	btfss	3,2
  1776  0217  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  1777  0218  0875               	movf	??_ADC_Sample+2,w
  1778  0219  1103               	clrz
  1779  021A  1803               	skipnc
  1780  021B  3E01               	addlw	1
  1781  021C  1D03               	btfss	3,2
  1782  021D  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  1783  021E  0876               	movf	??_ADC_Sample+3,w
  1784  021F  1103               	clrz
  1785  0220  1803               	skipnc
  1786  0221  3E01               	addlw	1
  1787  0222  1D03               	btfss	3,2
  1788  0223  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  1789  0224  300A               	movlw	10
  1790  0225  0ACE               	incf	ADC_Sample@i,f
  1791  0226  024E               	subwf	ADC_Sample@i,w
  1792  0227  1C03               	skipc
  1793  0228  29B8               	goto	l3955
  1794                           
  1795                           ;main.c: 342: }
  1796                           ;main.c: 343: adsum -= admax;
  1797  0229  0855               	movf	ADC_Sample@admax,w	;volatile
  1798  022A  00F3               	movwf	??_ADC_Sample
  1799  022B  0856               	movf	ADC_Sample@admax+1,w	;volatile
  1800  022C  23D8  118A         	fcall	PL6	;call to abstracted procedure
  1801  022E  1C03               	skipc
  1802  022F  0F76               	incfsz	??_ADC_Sample+3,w
  1803  0230  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1804                           
  1805                           ;main.c: 344: if (adsum >= admin)
  1806  0231  0853               	movf	ADC_Sample@admin,w	;volatile
  1807  0232  00F3               	movwf	??_ADC_Sample
  1808  0233  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1809  0234  00F4               	movwf	??_ADC_Sample+1
  1810  0235  01F5               	clrf	??_ADC_Sample+2
  1811  0236  01F6               	clrf	??_ADC_Sample+3
  1812  0237  0876               	movf	??_ADC_Sample+3,w
  1813  0238  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  1814  0239  1D03               	skipz
  1815  023A  2A45               	goto	u3595
  1816  023B  0875               	movf	??_ADC_Sample+2,w
  1817  023C  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  1818  023D  1D03               	skipz
  1819  023E  2A45               	goto	u3595
  1820  023F  0874               	movf	??_ADC_Sample+1,w
  1821  0240  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  1822  0241  1D03               	skipz
  1823  0242  2A45               	goto	u3595
  1824  0243  0873               	movf	??_ADC_Sample,w
  1825  0244  024F               	subwf	ADC_Sample@adsum,w	;volatile
  1826  0245                     u3595:	
  1827  0245  1C03               	skipc
  1828  0246  2A50               	goto	l990
  1829                           
  1830                           ;main.c: 345: adsum -= admin;
  1831  0247  0853               	movf	ADC_Sample@admin,w	;volatile
  1832  0248  00F3               	movwf	??_ADC_Sample
  1833  0249  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1834  024A  23D8  118A         	fcall	PL6	;call to abstracted procedure
  1835  024C  1C03               	skipc
  1836  024D  0F76               	incfsz	??_ADC_Sample+3,w
  1837  024E  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1838  024F  2A54               	goto	l3989
  1839  0250                     l990:	
  1840                           
  1841                           ;main.c: 346: else
  1842                           ;main.c: 347: adsum = 0;
  1843  0250  01CF               	clrf	ADC_Sample@adsum	;volatile
  1844  0251  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  1845  0252  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  1846  0253  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  1847  0254                     l3989:	
  1848                           
  1849                           ;main.c: 349: adresult = adsum >> 3;
  1850  0254  084F               	movf	ADC_Sample@adsum,w	;volatile
  1851  0255  00F3               	movwf	??_ADC_Sample
  1852  0256  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  1853  0257  00F4               	movwf	??_ADC_Sample+1
  1854  0258  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  1855  0259  00F5               	movwf	??_ADC_Sample+2
  1856  025A  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  1857  025B  00F6               	movwf	??_ADC_Sample+3
  1858  025C  3003               	movlw	3
  1859  025D                     u3615:	
  1860  025D  1003               	clrc
  1861  025E  0CF6               	rrf	??_ADC_Sample+3,f
  1862  025F  0CF5               	rrf	??_ADC_Sample+2,f
  1863  0260  0CF4               	rrf	??_ADC_Sample+1,f
  1864  0261  0CF3               	rrf	??_ADC_Sample,f
  1865  0262  3EFF               	addlw	-1
  1866  0263  1D03               	skipz
  1867  0264  2A5D               	goto	u3615
  1868  0265  0874               	movf	??_ADC_Sample+1,w
  1869  0266  00CB               	movwf	_adresult+1	;volatile
  1870  0267  0873               	movf	??_ADC_Sample,w
  1871  0268  00CA               	movwf	_adresult	;volatile
  1872                           
  1873                           ;main.c: 351: adsum = 0;
  1874                           
  1875                           ;main.c: 352: admin = 0;
  1876                           
  1877                           ;main.c: 353: admax = 0;
  1878  0269  23E7               	fcall	PL16	;call to abstracted procedure
  1879                           
  1880                           ;main.c: 354: return 0xA5;
  1881  026A  34A5               	retlw	165
  1882  026B                     __end_of_ADC_Sample:	
  1883  026B                     __ptext7:	
  1884 ;; *************** function _fanCtr *****************
  1885 ;; Defined at:
  1886 ;;		line 503 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1891 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 300/100
  1898 ;;		On exit  : 200/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1901 ;;      Params:         0       0       0       0
  1902 ;;      Locals:         0       5       0       0
  1903 ;;      Temps:          0       0       0       0
  1904 ;;      Totals:         0       5       0       0
  1905 ;;Total ram usage:        5 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    2
  1908 ;; This function calls:
  1909 ;;		_ADC_Sample
  1910 ;;		___lmul
  1911 ;;		_fanInit
  1912 ;;		_fanStop
  1913 ;; This function is called by:
  1914 ;;		_workCtr
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _fanCtr
  1920  026B                     _fanCtr:	
  1921                           
  1922                           ;main.c: 505: if(workStep > 0)
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1926  026B  087B               	movf	_workStep,w
  1927  026C  1903               	btfsc	3,2
  1928  026D  2ACB               	goto	l4265
  1929                           
  1930                           ;main.c: 506: {
  1931                           ;main.c: 507: PORTA |= 0x02;
  1932  026E  1486               	bsf	6,1	;volatile
  1933                           
  1934                           ;main.c: 508: unsigned char maxFanValue = 52;
  1935  026F  3034               	movlw	52
  1936  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1937  0271  00D9               	movwf	fanCtr@maxFanValue
  1938                           
  1939                           ;main.c: 509: if(workStep == 1)
  1940  0272  0B7B               	decfsz	_workStep,w
  1941  0273  2A76               	goto	l4229
  1942                           
  1943                           ;main.c: 510: {
  1944                           ;main.c: 511: maxFanValue = 40;
  1945  0274  3028               	movlw	40
  1946  0275  2A7B               	goto	L3
  1947  0276                     l4229:	
  1948                           ;main.c: 512: }
  1949                           
  1950                           
  1951                           ;main.c: 513: else if(workStep == 3)
  1952  0276  3003               	movlw	3
  1953  0277  067B               	xorwf	_workStep,w
  1954  0278  1D03               	btfss	3,2
  1955  0279  2A7C               	goto	l4233
  1956                           
  1957                           ;main.c: 514: {
  1958                           ;main.c: 515: maxFanValue = 10;
  1959  027A  300A               	movlw	10
  1960  027B                     L3:	
  1961  027B  00D9               	movwf	fanCtr@maxFanValue
  1962  027C                     l4233:	
  1963  027C  3002               	movlw	2
  1964                           
  1965                           ;main.c: 516: }
  1966                           ;main.c: 517: test_adc = ADC_Sample(2, 0);
  1967  027D  01F2               	clrf	ADC_Sample@adldo
  1968  027E  219B  118A         	fcall	_ADC_Sample
  1969  0280  00BB               	movwf	_test_adc	;volatile
  1970                           
  1971                           ;main.c: 518: if (0xA5 == test_adc)
  1972  0281  30A5               	movlw	165
  1973  0282  063B               	xorwf	_test_adc,w	;volatile
  1974  0283  1D03               	btfss	3,2
  1975  0284  2AAC               	goto	l4245
  1976                           
  1977                           ;main.c: 519: {
  1978                           ;main.c: 520: volatile unsigned long fan_temp;
  1979                           ;main.c: 521: if(power_ad > 0)
  1980  0285  0826               	movf	_power_ad,w	;volatile
  1981  0286  0427               	iorwf	_power_ad+1,w	;volatile
  1982  0287  1903               	btfsc	3,2
  1983  0288  2AAC               	goto	l4245
  1984                           
  1985                           ;main.c: 522: {
  1986                           ;main.c: 523: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1987  0289  084A               	movf	_adresult,w	;volatile
  1988  028A  00CC               	movwf	___lmul@multiplier
  1989  028B  084B               	movf	_adresult+1,w	;volatile
  1990  028C  00CD               	movwf	___lmul@multiplier+1
  1991  028D  01CE               	clrf	___lmul@multiplier+2
  1992  028E  01CF               	clrf	___lmul@multiplier+3
  1993  028F  0826               	movf	_power_ad,w	;volatile
  1994  0290  00D0               	movwf	___lmul@multiplicand
  1995  0291  0827               	movf	_power_ad+1,w	;volatile
  1996  0292  00D1               	movwf	___lmul@multiplicand+1
  1997  0293  01D2               	clrf	___lmul@multiplicand+2
  1998  0294  01D3               	clrf	___lmul@multiplicand+3
  1999  0295  22D1  118A         	fcall	___lmul
  2000  0297  084F               	movf	?___lmul+3,w
  2001  0298  00DD               	movwf	fanCtr@fan_temp+3	;volatile
  2002  0299  084E               	movf	?___lmul+2,w
  2003  029A  00DC               	movwf	fanCtr@fan_temp+2	;volatile
  2004  029B  084D               	movf	?___lmul+1,w
  2005  029C  00DB               	movwf	fanCtr@fan_temp+1	;volatile
  2006  029D  084C               	movf	?___lmul,w
  2007  029E  00DA               	movwf	fanCtr@fan_temp	;volatile
  2008  029F  300C               	movlw	12
  2009  02A0                     u4035:	
  2010  02A0  1003               	clrc
  2011  02A1  0CDD               	rrf	fanCtr@fan_temp+3,f	;volatile
  2012  02A2  0CDC               	rrf	fanCtr@fan_temp+2,f	;volatile
  2013  02A3  0CDB               	rrf	fanCtr@fan_temp+1,f	;volatile
  2014  02A4  0CDA               	rrf	fanCtr@fan_temp,f	;volatile
  2015  02A5  3EFF               	addlw	-1
  2016  02A6  1D03               	skipz
  2017  02A7  2AA0               	goto	u4035
  2018                           
  2019                           ;main.c: 524: fanValue = (unsigned int)(fan_temp);
  2020  02A8  085B               	movf	fanCtr@fan_temp+1,w	;volatile
  2021  02A9  00AD               	movwf	_fanValue+1
  2022  02AA  085A               	movf	fanCtr@fan_temp,w	;volatile
  2023  02AB  00AC               	movwf	_fanValue
  2024  02AC                     l4245:	
  2025                           
  2026                           ;main.c: 525: }
  2027                           ;main.c: 526: }
  2028                           ;main.c: 527: if(fanValue > 1300)
  2029  02AC  3005               	movlw	5
  2030  02AD  022D               	subwf	_fanValue+1,w
  2031  02AE  3015               	movlw	21
  2032  02AF  1903               	skipnz
  2033  02B0  022C               	subwf	_fanValue,w
  2034  02B1  1C03               	skipc
  2035  02B2  2ABF               	goto	l4253
  2036                           
  2037                           ;main.c: 528: {
  2038                           ;main.c: 529: if(++fanOverTime > 50)
  2039  02B3  3033               	movlw	51
  2040  02B4  0AC4               	incf	_fanOverTime,f
  2041  02B5  0244               	subwf	_fanOverTime,w
  2042  02B6  1C03               	skipc
  2043  02B7  2AC0               	goto	l4255
  2044  02B8  30C2               	movlw	194
  2045                           
  2046                           ;main.c: 530: {
  2047                           ;main.c: 531: fanOverTime = 0;
  2048  02B9  01C4               	clrf	_fanOverTime
  2049                           
  2050                           ;main.c: 532: workStep = 0;
  2051  02BA  01FB               	clrf	_workStep
  2052                           
  2053                           ;main.c: 533: shanshuoTime = 450;
  2054  02BB  00B2               	movwf	_shanshuoTime
  2055  02BC  3001               	movlw	1
  2056  02BD  00B3               	movwf	_shanshuoTime+1
  2057  02BE  2AC0               	goto	l4255
  2058  02BF                     l4253:	
  2059                           
  2060                           ;main.c: 536: else
  2061                           ;main.c: 537: {
  2062                           ;main.c: 538: fanOverTime = 0;
  2063  02BF  01C4               	clrf	_fanOverTime
  2064  02C0                     l4255:	
  2065                           
  2066                           ;main.c: 539: }
  2067                           ;main.c: 540: if(fanDuty < maxFanValue)
  2068  02C0  0859               	movf	fanCtr@maxFanValue,w
  2069  02C1  0246               	subwf	_fanDuty,w
  2070  02C2  1803               	skipnc
  2071  02C3  2AC6               	goto	l4259
  2072                           
  2073                           ;main.c: 541: {
  2074                           ;main.c: 542: fanDuty++;
  2075  02C4  0AC6               	incf	_fanDuty,f
  2076                           
  2077                           ;main.c: 543: }
  2078  02C5  2ACA               	goto	l4263
  2079  02C6                     l4259:	
  2080                           
  2081                           ;main.c: 544: else if(fanDuty > maxFanValue)
  2082  02C6  0846               	movf	_fanDuty,w
  2083  02C7  0259               	subwf	fanCtr@maxFanValue,w
  2084  02C8  1C03               	btfss	3,0
  2085                           
  2086                           ;main.c: 545: {
  2087                           ;main.c: 546: fanDuty--;
  2088  02C9  03C6               	decf	_fanDuty,f
  2089  02CA                     l4263:	
  2090                           
  2091                           ;main.c: 547: }
  2092                           ;main.c: 548: fanInit();
  2093  02CA  2B9C               	ljmp	l4017
  2094  02CB                     l4265:	
  2095                           ;main.c: 549: }
  2096                           
  2097                           
  2098                           ;main.c: 550: else
  2099                           ;main.c: 551: {
  2100                           ;main.c: 552: fanStop();
  2101  02CB  23A7               	fcall	_fanStop
  2102                           
  2103                           ;main.c: 553: fanDuty = 0;
  2104  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2105  02CD  01C6               	clrf	_fanDuty
  2106                           
  2107                           ;main.c: 554: PORTA &= 0xFD;
  2108  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2109  02CF  1086               	bcf	6,1	;volatile
  2110  02D0  0008               	return
  2111  02D1                     __end_of_fanCtr:	
  2112  02D1                     __ptext10:	
  2113 ;; *************** function ___lmul *****************
  2114 ;; Defined at:
  2115 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2118 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;  product         4    2[COMMON] unsigned long 
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  4    0[BANK0 ] unsigned long 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 300/0
  2127 ;;		On exit  : 300/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2130 ;;      Params:         0       8       0       0
  2131 ;;      Locals:         4       0       0       0
  2132 ;;      Temps:          0       0       0       0
  2133 ;;      Totals:         4       8       0       0
  2134 ;;Total ram usage:       12 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_fanCtr
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function ___lmul
  2146  02D1                     ___lmul:	
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2150  02D1  01F2               	clrf	___lmul@product
  2151  02D2  01F3               	clrf	___lmul@product+1
  2152  02D3  01F4               	clrf	___lmul@product+2
  2153  02D4  01F5               	clrf	___lmul@product+3
  2154  02D5                     l1360:	
  2155  02D5  1C4C               	btfss	___lmul@multiplier,0
  2156  02D6  2AEB               	goto	l4039
  2157  02D7  0850               	movf	___lmul@multiplicand,w
  2158  02D8  07F2               	addwf	___lmul@product,f
  2159  02D9  0851               	movf	___lmul@multiplicand+1,w
  2160  02DA  1103               	clrz
  2161  02DB  1803               	skipnc
  2162  02DC  3E01               	addlw	1
  2163  02DD  1D03               	btfss	3,2
  2164  02DE  07F3               	addwf	___lmul@product+1,f
  2165  02DF  0852               	movf	___lmul@multiplicand+2,w
  2166  02E0  1103               	clrz
  2167  02E1  1803               	skipnc
  2168  02E2  3E01               	addlw	1
  2169  02E3  1D03               	btfss	3,2
  2170  02E4  07F4               	addwf	___lmul@product+2,f
  2171  02E5  0853               	movf	___lmul@multiplicand+3,w
  2172  02E6  1103               	clrz
  2173  02E7  1803               	skipnc
  2174  02E8  3E01               	addlw	1
  2175  02E9  1D03               	btfss	3,2
  2176  02EA  07F5               	addwf	___lmul@product+3,f
  2177  02EB                     l4039:	
  2178  02EB  1003               	clrc
  2179  02EC  0DD0               	rlf	___lmul@multiplicand,f
  2180  02ED  0DD1               	rlf	___lmul@multiplicand+1,f
  2181  02EE  0DD2               	rlf	___lmul@multiplicand+2,f
  2182  02EF  0DD3               	rlf	___lmul@multiplicand+3,f
  2183  02F0  1003               	clrc
  2184  02F1  0CCF               	rrf	___lmul@multiplier+3,f
  2185  02F2  0CCE               	rrf	___lmul@multiplier+2,f
  2186  02F3  0CCD               	rrf	___lmul@multiplier+1,f
  2187  02F4  0CCC               	rrf	___lmul@multiplier,f
  2188  02F5  084F               	movf	___lmul@multiplier+3,w
  2189  02F6  044E               	iorwf	___lmul@multiplier+2,w
  2190  02F7  044D               	iorwf	___lmul@multiplier+1,w
  2191  02F8  044C               	iorwf	___lmul@multiplier,w
  2192  02F9  1D03               	skipz
  2193  02FA  2AD5               	goto	l1360
  2194  02FB  0875               	movf	___lmul@product+3,w
  2195  02FC  00CF               	movwf	?___lmul+3
  2196  02FD  0874               	movf	___lmul@product+2,w
  2197  02FE  00CE               	movwf	?___lmul+2
  2198  02FF  0873               	movf	___lmul@product+1,w
  2199  0300  00CD               	movwf	?___lmul+1
  2200  0301  0872               	movf	___lmul@product,w
  2201  0302  00CC               	movwf	?___lmul
  2202  0303  0008               	return
  2203  0304                     __end_of___lmul:	
  2204  0304                     __ptext5:	
  2205 ;; *************** function _keyLedCtr *****************
  2206 ;; Defined at:
  2207 ;;		line 389 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;		None
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;		None
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  1    wreg      void 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0, pclath, cstack
  2216 ;; Tracked objects:
  2217 ;;		On entry : 300/0
  2218 ;;		On exit  : 300/100
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2221 ;;      Params:         0       0       0       0
  2222 ;;      Locals:         0       0       0       0
  2223 ;;      Temps:          0       0       0       0
  2224 ;;      Totals:         0       0       0       0
  2225 ;;Total ram usage:        0 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    2
  2228 ;; This function calls:
  2229 ;;		___lwmod
  2230 ;; This function is called by:
  2231 ;;		_workCtr
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           
  2236                           ;psect for function _keyLedCtr
  2237  0304                     _keyLedCtr:	
  2238                           
  2239                           ;main.c: 391: if(shanshuoTime > 0)
  2240                           
  2241                           ;incstack = 0
  2242                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2243  0304  0832               	movf	_shanshuoTime,w
  2244  0305  0433               	iorwf	_shanshuoTime+1,w
  2245  0306  1903               	btfsc	3,2
  2246  0307  2B21               	goto	l4185
  2247                           
  2248                           ;main.c: 392: {
  2249                           ;main.c: 393: shanshuoTime--;
  2250  0308  3001               	movlw	1
  2251  0309  02B2               	subwf	_shanshuoTime,f
  2252  030A  3000               	movlw	0
  2253  030B  1C03               	skipc
  2254  030C  03B3               	decf	_shanshuoTime+1,f
  2255  030D  02B3               	subwf	_shanshuoTime+1,f
  2256                           
  2257                           ;main.c: 394: if((shanshuoTime % 150) < 75)
  2258  030E  3096               	movlw	150
  2259  030F  00F2               	movwf	___lwmod@divisor
  2260  0310  01F3               	clrf	___lwmod@divisor+1
  2261  0311  0833               	movf	_shanshuoTime+1,w
  2262  0312  00F5               	movwf	___lwmod@dividend+1
  2263  0313  0832               	movf	_shanshuoTime,w
  2264  0314  00F4               	movwf	___lwmod@dividend
  2265  0315  2378  118A         	fcall	___lwmod
  2266  0317  3000               	movlw	0
  2267  0318  0273               	subwf	?___lwmod+1,w
  2268  0319  304B               	movlw	75
  2269  031A  1903               	skipnz
  2270  031B  0272               	subwf	?___lwmod,w
  2271  031C  1803               	skipnc
  2272  031D  2B24               	goto	l1003
  2273  031E                     l4183:	
  2274                           
  2275                           ;main.c: 395: {
  2276                           ;main.c: 396: PORTC |= 0x01;
  2277  031E  1703               	bsf	3,6	;RP1=1, select bank2
  2278  031F  1406               	bsf	6,0	;volatile
  2279                           
  2280                           ;main.c: 397: }
  2281  0320  2B26               	goto	l4189
  2282  0321                     l4185:	
  2283                           
  2284                           ;main.c: 403: else if(workStep > 0)
  2285  0321  087B               	movf	_workStep,w
  2286  0322  1903               	btfsc	3,2
  2287  0323  2B1E               	goto	l4183
  2288  0324                     l1003:	
  2289                           
  2290                           ;main.c: 398: else
  2291                           ;main.c: 399: {
  2292                           ;main.c: 400: PORTC &= 0xFE;
  2293  0324  1703               	bsf	3,6	;RP1=1, select bank2
  2294  0325  1006               	bcf	6,0	;volatile
  2295  0326                     l4189:	
  2296                           
  2297                           ;main.c: 410: }
  2298                           ;main.c: 412: if(shanshuoTime2 > 0)
  2299  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0327  0830               	movf	_shanshuoTime2,w
  2301  0328  0431               	iorwf	_shanshuoTime2+1,w
  2302  0329  1903               	btfsc	3,2
  2303  032A  2B44               	goto	l4197
  2304                           
  2305                           ;main.c: 413: {
  2306                           ;main.c: 414: shanshuoTime2--;
  2307  032B  3001               	movlw	1
  2308  032C  02B0               	subwf	_shanshuoTime2,f
  2309  032D  3000               	movlw	0
  2310  032E  1C03               	skipc
  2311  032F  03B1               	decf	_shanshuoTime2+1,f
  2312  0330  02B1               	subwf	_shanshuoTime2+1,f
  2313                           
  2314                           ;main.c: 415: if((shanshuoTime2 % 150) < 75)
  2315  0331  3096               	movlw	150
  2316  0332  00F2               	movwf	___lwmod@divisor
  2317  0333  01F3               	clrf	___lwmod@divisor+1
  2318  0334  0831               	movf	_shanshuoTime2+1,w
  2319  0335  00F5               	movwf	___lwmod@dividend+1
  2320  0336  0830               	movf	_shanshuoTime2,w
  2321  0337  00F4               	movwf	___lwmod@dividend
  2322  0338  2378  118A         	fcall	___lwmod
  2323  033A  3000               	movlw	0
  2324  033B  0273               	subwf	?___lwmod+1,w
  2325  033C  304B               	movlw	75
  2326  033D  1903               	skipnz
  2327  033E  0272               	subwf	?___lwmod,w
  2328  033F  1803               	skipnc
  2329  0340  2B47               	goto	l1009
  2330  0341                     l4195:	
  2331                           
  2332                           ;main.c: 416: {
  2333                           ;main.c: 417: PORTC |= 0x02;
  2334  0341  1703               	bsf	3,6	;RP1=1, select bank2
  2335  0342  1486               	bsf	6,1	;volatile
  2336                           
  2337                           ;main.c: 418: }
  2338  0343  2B49               	goto	l4201
  2339  0344                     l4197:	
  2340                           
  2341                           ;main.c: 424: else if(wuhuaFlag > 0)
  2342  0344  0847               	movf	_wuhuaFlag,w
  2343  0345  1903               	btfsc	3,2
  2344  0346  2B41               	goto	l4195
  2345  0347                     l1009:	
  2346                           
  2347                           ;main.c: 419: else
  2348                           ;main.c: 420: {
  2349                           ;main.c: 421: PORTC &= 0xFD;
  2350  0347  1703               	bsf	3,6	;RP1=1, select bank2
  2351  0348  1086               	bcf	6,1	;volatile
  2352  0349                     l4201:	
  2353                           
  2354                           ;main.c: 431: }
  2355                           ;main.c: 432: if(shanshuoTime3 > 0)
  2356  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2357  034A  082E               	movf	_shanshuoTime3,w
  2358  034B  042F               	iorwf	_shanshuoTime3+1,w
  2359  034C  1903               	btfsc	3,2
  2360  034D  2B6A               	goto	l4209
  2361                           
  2362                           ;main.c: 433: {
  2363                           ;main.c: 434: shanshuoTime3--;
  2364  034E  3001               	movlw	1
  2365  034F  02AE               	subwf	_shanshuoTime3,f
  2366  0350  3000               	movlw	0
  2367  0351  1C03               	skipc
  2368  0352  03AF               	decf	_shanshuoTime3+1,f
  2369  0353  02AF               	subwf	_shanshuoTime3+1,f
  2370                           
  2371                           ;main.c: 435: if((shanshuoTime3 % 150) < 75)
  2372  0354  3096               	movlw	150
  2373  0355  00F2               	movwf	___lwmod@divisor
  2374  0356  01F3               	clrf	___lwmod@divisor+1
  2375  0357  082F               	movf	_shanshuoTime3+1,w
  2376  0358  00F5               	movwf	___lwmod@dividend+1
  2377  0359  082E               	movf	_shanshuoTime3,w
  2378  035A  00F4               	movwf	___lwmod@dividend
  2379  035B  2378  118A         	fcall	___lwmod
  2380  035D  3000               	movlw	0
  2381  035E  0273               	subwf	?___lwmod+1,w
  2382  035F  304B               	movlw	75
  2383  0360  1903               	skipnz
  2384  0361  0272               	subwf	?___lwmod,w
  2385  0362  1803               	skipnc
  2386  0363  2B67               	goto	l1015
  2387  0364                     l4207:	
  2388                           
  2389                           ;main.c: 436: {
  2390                           ;main.c: 437: PORTA |= 0x01;
  2391  0364  1683               	bsf	3,5	;RP0=1, select bank1
  2392  0365  1406               	bsf	6,0	;volatile
  2393                           
  2394                           ;main.c: 438: }
  2395  0366  0008               	return
  2396  0367                     l1015:	
  2397                           
  2398                           ;main.c: 439: else
  2399                           ;main.c: 440: {
  2400                           ;main.c: 441: PORTA &= 0xFE;
  2401  0367  1683               	bsf	3,5	;RP0=1, select bank1
  2402  0368  1006               	bcf	6,0	;volatile
  2403  0369  0008               	return
  2404  036A                     l4209:	
  2405                           
  2406                           ;main.c: 444: else if(bujinFlag)
  2407  036A  083C               	movf	_bujinFlag,w
  2408  036B  1D03               	btfss	3,2
  2409  036C  2B67               	goto	l1015
  2410                           
  2411                           ;main.c: 448: else if(chrgFlag)
  2412  036D  0843               	movf	_chrgFlag,w
  2413  036E  1903               	btfsc	3,2
  2414  036F  2B64               	goto	l4207
  2415                           
  2416                           ;main.c: 449: {
  2417                           ;main.c: 450: if(chrgFullFlag || count1s < 50)
  2418  0370  0842               	movf	_chrgFullFlag,w
  2419  0371  1D03               	btfss	3,2
  2420  0372  2B67               	goto	l1015
  2421  0373  3032               	movlw	50
  2422  0374  0248               	subwf	_count1s,w
  2423  0375  1C03               	btfss	3,0
  2424  0376  2B67               	goto	l1015
  2425  0377  2B64               	goto	l4207
  2426  0378                     __end_of_keyLedCtr:	
  2427  0378                     __ptext6:	
  2428 ;; *************** function ___lwmod *****************
  2429 ;; Defined at:
  2430 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  divisor         2    2[COMMON] unsigned int 
  2433 ;;  dividend        2    4[COMMON] unsigned int 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  counter         1    6[COMMON] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  2    2[COMMON] unsigned int 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0
  2440 ;; Tracked objects:
  2441 ;;		On entry : 300/0
  2442 ;;		On exit  : 300/0
  2443 ;;		Unchanged: 300/0
  2444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2445 ;;      Params:         4       0       0       0
  2446 ;;      Locals:         1       0       0       0
  2447 ;;      Temps:          0       0       0       0
  2448 ;;      Totals:         5       0       0       0
  2449 ;;Total ram usage:        5 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    1
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_keyLedCtr
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           
  2460                           ;psect for function ___lwmod
  2461  0378                     ___lwmod:	
  2462                           
  2463                           ;incstack = 0
  2464                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2465  0378  0872               	movf	___lwmod@divisor,w
  2466  0379  0473               	iorwf	___lwmod@divisor+1,w
  2467  037A  1903               	btfsc	3,2
  2468  037B  2B97               	goto	l4087
  2469  037C  01F6               	clrf	___lwmod@counter
  2470  037D                     L1:	
  2471  037D  0AF6               	incf	___lwmod@counter,f
  2472  037E  1BF3               	btfsc	___lwmod@divisor+1,7
  2473  037F  2B84               	goto	l4079
  2474  0380  1003               	clrc
  2475  0381  0DF2               	rlf	___lwmod@divisor,f
  2476  0382  0DF3               	rlf	___lwmod@divisor+1,f
  2477  0383  2B7D               	goto	L1
  2478  0384                     l4079:	
  2479  0384  0873               	movf	___lwmod@divisor+1,w
  2480  0385  0275               	subwf	___lwmod@dividend+1,w
  2481  0386  1D03               	skipz
  2482  0387  2B8A               	goto	u3755
  2483  0388  0872               	movf	___lwmod@divisor,w
  2484  0389  0274               	subwf	___lwmod@dividend,w
  2485  038A                     u3755:	
  2486  038A  1C03               	skipc
  2487  038B  2B93               	goto	L2
  2488  038C  0872               	movf	___lwmod@divisor,w
  2489  038D  02F4               	subwf	___lwmod@dividend,f
  2490  038E  0873               	movf	___lwmod@divisor+1,w
  2491  038F  1C03               	skipc
  2492  0390  03F5               	decf	___lwmod@dividend+1,f
  2493  0391  02F5               	subwf	___lwmod@dividend+1,f
  2494  0392  1003               	clrc
  2495  0393                     L2:	
  2496  0393  0CF3               	rrf	___lwmod@divisor+1,f
  2497  0394  0CF2               	rrf	___lwmod@divisor,f
  2498  0395  0BF6               	decfsz	___lwmod@counter,f
  2499  0396  2B84               	goto	l4079
  2500  0397                     l4087:	
  2501  0397  0875               	movf	___lwmod@dividend+1,w
  2502  0398  00F3               	movwf	?___lwmod+1
  2503  0399  0874               	movf	___lwmod@dividend,w
  2504  039A  00F2               	movwf	?___lwmod
  2505  039B  0008               	return
  2506  039C                     __end_of___lwmod:	
  2507  039C                     __ptext9:	
  2508 ;; *************** function _fanInit *****************
  2509 ;; Defined at:
  2510 ;;		line 485 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0
  2519 ;; Tracked objects:
  2520 ;;		On entry : 300/0
  2521 ;;		On exit  : 300/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2524 ;;      Params:         0       0       0       0
  2525 ;;      Locals:         0       0       0       0
  2526 ;;      Temps:          0       0       0       0
  2527 ;;      Totals:         0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    1
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_fanCtr
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _fanInit
  2540  039C                     _fanInit:	
  2541  039C                     l4017:	
  2542                           ;incstack = 0
  2543                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2544                           
  2545                           
  2546                           ;main.c: 488: PWMTH = 0x00;
  2547  039C  0198               	clrf	24	;volatile
  2548                           
  2549                           ;main.c: 489: PWMT4L = 73;
  2550  039D  3049               	movlw	73
  2551  039E  009C               	movwf	28	;volatile
  2552                           
  2553                           ;main.c: 490: PWMD4L = fanDuty;
  2554  039F  0846               	movf	_fanDuty,w
  2555  03A0  009B               	movwf	27	;volatile
  2556                           
  2557                           ;main.c: 491: PWMCON1 = 0xC0;
  2558  03A1  30C0               	movlw	192
  2559  03A2  0096               	movwf	22	;volatile
  2560                           
  2561                           ;main.c: 492: PWMCON2 = 0x00;
  2562  03A3  019D               	clrf	29	;volatile
  2563                           
  2564                           ;main.c: 493: PWMCON0 |= 0x30;
  2565  03A4  3030               	movlw	48
  2566  03A5  0495               	iorwf	21,f	;volatile
  2567  03A6  0008               	return
  2568  03A7                     __end_of_fanInit:	
  2569  03A7                     __ptext8:	
  2570 ;; *************** function _fanStop *****************
  2571 ;; Defined at:
  2572 ;;		line 496 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		status,2
  2581 ;; Tracked objects:
  2582 ;;		On entry : 300/100
  2583 ;;		On exit  : 300/100
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2586 ;;      Params:         0       0       0       0
  2587 ;;      Locals:         0       0       0       0
  2588 ;;      Temps:          0       0       0       0
  2589 ;;      Totals:         0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    1
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_fanCtr
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           
  2601                           ;psect for function _fanStop
  2602  03A7                     _fanStop:	
  2603                           
  2604                           ;main.c: 498: PWMD4L = 0;
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in _fanStop: [status,2]
  2608  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2609  03A8  019B               	clrf	27	;volatile
  2610                           
  2611                           ;main.c: 499: PWMCON0 &= 0xEF;
  2612  03A9  1215               	bcf	21,4	;volatile
  2613                           
  2614                           ;main.c: 500: PORTA &= 0xEF;
  2615  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  2616  03AB  1206               	bcf	6,4	;volatile
  2617  03AC  0008               	return
  2618  03AD                     __end_of_fanStop:	
  2619  03AD                     __ptext2:	
  2620 ;; *************** function _wuhuaCtr *****************
  2621 ;; Defined at:
  2622 ;;		line 558 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 200/100
  2633 ;;		On exit  : 200/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2636 ;;      Params:         0       0       0       0
  2637 ;;      Locals:         0       0       0       0
  2638 ;;      Temps:          0       0       0       0
  2639 ;;      Totals:         0       0       0       0
  2640 ;;Total ram usage:        0 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    2
  2643 ;; This function calls:
  2644 ;;		_pwmInit
  2645 ;;		_pwmStop
  2646 ;; This function is called by:
  2647 ;;		_workCtr
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _wuhuaCtr
  2653  03AD                     _wuhuaCtr:	
  2654                           
  2655                           ;main.c: 560: if(count1s == 0)
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2659  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2660  03AE  0848               	movf	_count1s,w
  2661  03AF  1D03               	btfss	3,2
  2662  03B0  2BB6               	goto	l4277
  2663                           
  2664                           ;main.c: 561: {
  2665                           ;main.c: 562: if(++count10s >= 10)
  2666  03B1  300A               	movlw	10
  2667  03B2  0AC5               	incf	_count10s,f
  2668  03B3  0245               	subwf	_count10s,w
  2669  03B4  1803               	btfsc	3,0
  2670                           
  2671                           ;main.c: 563: {
  2672                           ;main.c: 564: count10s = 0;
  2673  03B5  01C5               	clrf	_count10s
  2674  03B6                     l4277:	
  2675                           
  2676                           ;main.c: 565: }
  2677                           ;main.c: 566: }
  2678                           ;main.c: 567: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2679  03B6  0347               	decf	_wuhuaFlag,w
  2680  03B7  1903               	btfsc	3,2
  2681  03B8  2BC1               	goto	l4283
  2682  03B9  3002               	movlw	2
  2683  03BA  0647               	xorwf	_wuhuaFlag,w
  2684  03BB  1D03               	btfss	3,2
  2685  03BC  2BC2               	goto	l4285
  2686  03BD  3005               	movlw	5
  2687  03BE  0245               	subwf	_count10s,w
  2688  03BF  1803               	skipnc
  2689  03C0  2BC2               	goto	l4285
  2690  03C1                     l4283:	
  2691                           
  2692                           ;main.c: 568: {
  2693                           ;main.c: 569: pwmInit();
  2694  03C1  2BC3               	ljmp	l4001
  2695  03C2                     l4285:	
  2696                           ;main.c: 598: }
  2697                           
  2698                           
  2699                           ;main.c: 599: else
  2700                           ;main.c: 600: {
  2701                           ;main.c: 601: pwmStop();
  2702  03C2  2BD1               	ljmp	l4011
  2703  03C3                     __end_of_wuhuaCtr:	
  2704  03C3                     __ptext4:	
  2705 ;; *************** function _pwmInit *****************
  2706 ;; Defined at:
  2707 ;;		line 466 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 300/0
  2718 ;;		On exit  : 300/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2721 ;;      Params:         0       0       0       0
  2722 ;;      Locals:         0       0       0       0
  2723 ;;      Temps:          0       0       0       0
  2724 ;;      Totals:         0       0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_wuhuaCtr
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _pwmInit
  2737  03C3                     _pwmInit:	
  2738  03C3                     l4001:	
  2739                           ;incstack = 0
  2740                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2741                           
  2742                           
  2743                           ;main.c: 469: PWMTH = 0x00;
  2744  03C3  0198               	clrf	24	;volatile
  2745                           
  2746                           ;main.c: 470: PWMTL = 73;
  2747  03C4  3049               	movlw	73
  2748  03C5  0097               	movwf	23	;volatile
  2749                           
  2750                           ;main.c: 471: PWMD23H = 0x00;
  2751  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  2752  03C7  019E               	clrf	30	;volatile
  2753                           
  2754                           ;main.c: 472: PWMD3L = 32;
  2755  03C8  3020               	movlw	32
  2756  03C9  009C               	movwf	28	;volatile
  2757                           
  2758                           ;main.c: 473: PWMCON1 = 0xC0;
  2759  03CA  30C0               	movlw	192
  2760  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2761  03CC  0096               	movwf	22	;volatile
  2762                           
  2763                           ;main.c: 474: PWMCON2 = 0x00;
  2764  03CD  019D               	clrf	29	;volatile
  2765                           
  2766                           ;main.c: 475: PWMCON0 |= 0x28;
  2767  03CE  3028               	movlw	40
  2768  03CF  0495               	iorwf	21,f	;volatile
  2769  03D0  0008               	return
  2770  03D1                     __end_of_pwmInit:	
  2771  03D1                     __ptext3:	
  2772 ;; *************** function _pwmStop *****************
  2773 ;; Defined at:
  2774 ;;		line 478 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		status,2
  2783 ;; Tracked objects:
  2784 ;;		On entry : 300/0
  2785 ;;		On exit  : 300/100
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2788 ;;      Params:         0       0       0       0
  2789 ;;      Locals:         0       0       0       0
  2790 ;;      Temps:          0       0       0       0
  2791 ;;      Totals:         0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    1
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_wuhuaCtr
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           
  2803                           ;psect for function _pwmStop
  2804  03D1                     _pwmStop:	
  2805  03D1                     l4011:	
  2806                           ;incstack = 0
  2807                           ; Regs used in _pwmStop: [status,2]
  2808                           
  2809                           
  2810                           ;main.c: 480: PWMD3L = 0;
  2811  03D1  1683               	bsf	3,5	;RP0=1, select bank1
  2812  03D2  019C               	clrf	28	;volatile
  2813                           
  2814                           ;main.c: 481: PWMCON0 &= 0xF7;
  2815  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2816  03D4  1195               	bcf	21,3	;volatile
  2817                           
  2818                           ;main.c: 482: PORTA &= 0xF7;
  2819  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2820  03D6  1186               	bcf	6,3	;volatile
  2821  03D7  0008               	return
  2822  03D8                     __end_of_pwmStop:	
  2823  03D8                     PL6:	
  2824  03D8  00F4               	movwf	??_ADC_Sample+1
  2825  03D9  01F5               	clrf	??_ADC_Sample+2
  2826  03DA  01F6               	clrf	??_ADC_Sample+3
  2827  03DB  0873               	movf	??_ADC_Sample,w
  2828  03DC  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2829  03DD  0874               	movf	??_ADC_Sample+1,w
  2830  03DE  1C03               	skipc
  2831  03DF  0F74               	incfsz	??_ADC_Sample+1,w
  2832  03E0  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2833  03E1  0875               	movf	??_ADC_Sample+2,w
  2834  03E2  1C03               	skipc
  2835  03E3  0F75               	incfsz	??_ADC_Sample+2,w
  2836  03E4  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2837  03E5  0876               	movf	??_ADC_Sample+3,w
  2838  03E6  0008               	return
  2839  03E7                     __end_ofPL6:	
  2840  03E7                     PL16:	
  2841  03E7  01CF               	clrf	ADC_Sample@adsum	;volatile
  2842  03E8  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2843  03E9  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2844  03EA  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2845  03EB  01D3               	clrf	ADC_Sample@admin	;volatile
  2846  03EC  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2847  03ED  01D5               	clrf	ADC_Sample@admax	;volatile
  2848  03EE  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2849  03EF  0008               	return
  2850  03F0                     __end_ofPL16:	
  2851  03F0                     PL24:	
  2852  03F0  0861               	movf	___fttol@f1,w
  2853  03F1  00E5               	movwf	??___fttol
  2854  03F2  0862               	movf	___fttol@f1+1,w
  2855  03F3  00E6               	movwf	??___fttol+1
  2856  03F4  0863               	movf	___fttol@f1+2,w
  2857  03F5  00E7               	movwf	??___fttol+2
  2858  03F6  0008               	return
  2859  03F7                     __end_ofPL24:	
  2860  03F7                     PL38:	
  2861  03F7  1003               	clrc
  2862  03F8  0CF4               	rrf	___ftpack@arg+2,f
  2863  03F9  0CF3               	rrf	___ftpack@arg+1,f
  2864  03FA  0CF2               	rrf	___ftpack@arg,f
  2865  03FB  0008               	return
  2866  03FC                     __end_ofPL38:	
  2867  03FC                     PL42:	
  2868  03FC  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2869  03FD  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2870  03FE  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2871  03FF  00D5               	movwf	ADC_Sample@admax	;volatile
  2872  0400  0008               	return
  2873  0401                     __end_ofPL42:	
  2874  0401                     PL44:	
  2875  0401  01D2               	clrf	?___ftdiv
  2876  0402  01D3               	clrf	?___ftdiv+1
  2877  0403  01D4               	clrf	?___ftdiv+2
  2878  0404  0008               	return
  2879  0405                     __end_ofPL44:	
  2880                           
  2881                           	psect	text12
  2882  0F75                     __ptext12:	
  2883 ;; *************** function _bujinCtr *****************
  2884 ;; Defined at:
  2885 ;;		line 605 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  tempStep        1    4[COMMON] unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2894 ;; Tracked objects:
  2895 ;;		On entry : 200/0
  2896 ;;		On exit  : 300/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2899 ;;      Params:         0       0       0       0
  2900 ;;      Locals:         1       0       0       0
  2901 ;;      Temps:          2       0       0       0
  2902 ;;      Totals:         3       0       0       0
  2903 ;;Total ram usage:        3 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_workCtr
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           
  2914                           ;psect for function _bujinCtr
  2915  0F75                     _bujinCtr:	
  2916  0F75                     l4287:	
  2917                           ;incstack = 0
  2918                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  2919                           
  2920                           
  2921                           ;main.c: 607: if(bujinFlag || motorStep > 0)
  2922  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0F76  083C               	movf	_bujinFlag,w
  2924  0F77  1D03               	btfss	3,2
  2925  0F78  2F7D               	goto	l4291
  2926  0F79  082A               	movf	_motorStep,w
  2927  0F7A  042B               	iorwf	_motorStep+1,w
  2928  0F7B  1903               	btfsc	3,2
  2929  0F7C  2FE9               	goto	l4323
  2930  0F7D                     l4291:	
  2931                           
  2932                           ;main.c: 608: {
  2933                           ;main.c: 609: if(bujinFlag == 1)
  2934  0F7D  0B3C               	decfsz	_bujinFlag,w
  2935  0F7E  2F81               	goto	l4295
  2936                           
  2937                           ;main.c: 610: {
  2938                           ;main.c: 611: maxMotorStep = 512;
  2939  0F7F  3002               	movlw	2
  2940  0F80  2F86               	goto	L6
  2941  0F81                     l4295:	
  2942                           ;main.c: 612: }
  2943                           
  2944                           
  2945                           ;main.c: 613: else if(bujinFlag == 2)
  2946  0F81  3002               	movlw	2
  2947  0F82  063C               	xorwf	_bujinFlag,w
  2948  0F83  1D03               	btfss	3,2
  2949  0F84  2F88               	goto	l4299
  2950                           
  2951                           ;main.c: 614: {
  2952                           ;main.c: 615: maxMotorStep = 1024;
  2953  0F85  3004               	movlw	4
  2954  0F86                     L6:	
  2955  0F86  01A8               	clrf	_maxMotorStep
  2956  0F87  2F8F               	goto	L5
  2957  0F88                     l4299:	
  2958                           ;main.c: 616: }
  2959                           
  2960                           
  2961                           ;main.c: 617: else if(bujinFlag == 3)
  2962  0F88  3003               	movlw	3
  2963  0F89  063C               	xorwf	_bujinFlag,w
  2964  0F8A  1D03               	btfss	3,2
  2965  0F8B  2F90               	goto	l4303
  2966                           
  2967                           ;main.c: 618: {
  2968                           ;main.c: 619: maxMotorStep = 1360;
  2969  0F8C  3050               	movlw	80
  2970  0F8D  00A8               	movwf	_maxMotorStep
  2971  0F8E  3005               	movlw	5
  2972  0F8F                     L5:	
  2973  0F8F  00A9               	movwf	_maxMotorStep+1
  2974  0F90                     l4303:	
  2975                           
  2976                           ;main.c: 620: }
  2977                           ;main.c: 621: if(++motorStep >= (maxMotorStep*2))
  2978  0F90  0829               	movf	_maxMotorStep+1,w
  2979  0F91  00F3               	movwf	??_bujinCtr+1
  2980  0F92  0828               	movf	_maxMotorStep,w
  2981  0F93  00F2               	movwf	??_bujinCtr
  2982  0F94  1003               	clrc
  2983  0F95  0DF2               	rlf	??_bujinCtr,f
  2984  0F96  0DF3               	rlf	??_bujinCtr+1,f
  2985  0F97  0AAA               	incf	_motorStep,f
  2986  0F98  1903               	skipnz
  2987  0F99  0AAB               	incf	_motorStep+1,f
  2988  0F9A  0873               	movf	??_bujinCtr+1,w
  2989  0F9B  022B               	subwf	_motorStep+1,w
  2990  0F9C  1D03               	skipz
  2991  0F9D  2FA0               	goto	u4185
  2992  0F9E  0872               	movf	??_bujinCtr,w
  2993  0F9F  022A               	subwf	_motorStep,w
  2994  0FA0                     u4185:	
  2995  0FA0  1C03               	skipc
  2996  0FA1  2FA4               	goto	l4307
  2997                           
  2998                           ;main.c: 622: {
  2999                           ;main.c: 623: motorStep = 0;
  3000  0FA2  01AA               	clrf	_motorStep
  3001  0FA3  01AB               	clrf	_motorStep+1
  3002  0FA4                     l4307:	
  3003                           
  3004                           ;main.c: 624: }
  3005                           ;main.c: 625: unsigned char tempStep = motorStep % 8;
  3006  0FA4  082A               	movf	_motorStep,w
  3007  0FA5  00F4               	movwf	bujinCtr@tempStep
  3008  0FA6  3007               	movlw	7
  3009  0FA7  05F4               	andwf	bujinCtr@tempStep,f
  3010                           
  3011                           ;main.c: 626: if(motorStep < maxMotorStep)
  3012  0FA8  0829               	movf	_maxMotorStep+1,w
  3013  0FA9  022B               	subwf	_motorStep+1,w
  3014  0FAA  1D03               	skipz
  3015  0FAB  2FAE               	goto	u4195
  3016  0FAC  0828               	movf	_maxMotorStep,w
  3017  0FAD  022A               	subwf	_motorStep,w
  3018  0FAE                     u4195:	
  3019  0FAE  1C03               	btfss	3,0
  3020  0FAF  2FD1               	goto	l4317
  3021  0FB0  2FDD               	goto	l4321
  3022  0FB1                     l1077:	
  3023                           ;main.c: 630: {
  3024                           ;main.c: 631: case 0:
  3025                           
  3026                           
  3027                           ;main.c: 632: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3028  0FB1  27F5               	fcall	PL28	;call to abstracted procedure
  3029  0FB2  1386               	bcf	6,7	;volatile
  3030                           
  3031                           ;main.c: 633: break;
  3032  0FB3  0008               	return
  3033  0FB4                     l1079:	
  3034                           ;main.c: 634: case 1:
  3035                           
  3036                           
  3037                           ;main.c: 635: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3038  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  3039  0FB5  1686               	bsf	6,5	;volatile
  3040                           
  3041                           ;main.c: 636: break;
  3042  0FB6  2FFB               	ljmp	PL30	;call to abstracted procedure
  3043  0FB7                     l1080:	
  3044                           ;main.c: 637: case 2:
  3045                           
  3046                           
  3047                           ;main.c: 638: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3048  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  3049  0FB8  1286               	bcf	6,5	;volatile
  3050                           
  3051                           ;main.c: 639: break;
  3052  0FB9  2FFB               	ljmp	PL30	;call to abstracted procedure
  3053  0FBA                     l1081:	
  3054                           ;main.c: 640: case 3:
  3055                           
  3056                           
  3057                           ;main.c: 641: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3058  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  3059  0FBB  1286               	bcf	6,5	;volatile
  3060  0FBC  1706               	bsf	6,6	;volatile
  3061  0FBD  1786               	bsf	6,7	;volatile
  3062  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0FBF  1386               	bcf	6,7	;volatile
  3064                           
  3065                           ;main.c: 642: break;
  3066  0FC0  0008               	return
  3067  0FC1                     l1082:	
  3068                           ;main.c: 643: case 4:
  3069                           
  3070                           
  3071                           ;main.c: 644: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3072  0FC1  27EF               	fcall	PL26	;call to abstracted procedure
  3073  0FC2  1386               	bcf	6,7	;volatile
  3074                           
  3075                           ;main.c: 645: break;
  3076  0FC3  0008               	return
  3077  0FC4                     l1083:	
  3078                           ;main.c: 646: case 5:
  3079                           
  3080                           
  3081                           ;main.c: 647: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3082  0FC4  27EF               	fcall	PL26	;call to abstracted procedure
  3083  0FC5  1786               	bsf	6,7	;volatile
  3084                           
  3085                           ;main.c: 648: break;
  3086  0FC6  0008               	return
  3087  0FC7                     l1084:	
  3088                           ;main.c: 649: case 6:
  3089                           
  3090                           
  3091                           ;main.c: 650: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3092  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  3093  0FC8  1286               	bcf	6,5	;volatile
  3094  0FC9  1306               	bcf	6,6	;volatile
  3095  0FCA  1386               	bcf	6,7	;volatile
  3096  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0FCC  1786               	bsf	6,7	;volatile
  3098                           
  3099                           ;main.c: 651: break;
  3100  0FCD  0008               	return
  3101  0FCE                     l1085:	
  3102                           ;main.c: 652: case 7:
  3103                           
  3104                           
  3105                           ;main.c: 653: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3106  0FCE  27F5               	fcall	PL28	;call to abstracted procedure
  3107  0FCF  1786               	bsf	6,7	;volatile
  3108                           
  3109                           ;main.c: 654: break;
  3110  0FD0  0008               	return
  3111  0FD1                     l4317:	
  3112  0FD1  0874               	movf	bujinCtr@tempStep,w
  3113                           
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 8, Range of values is 0 to 7
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; direct_byte           23     7 (fixed)
  3119                           ; simple_byte           25    13 (average)
  3120                           ; jumptable            260     6 (fixed)
  3121                           ;	Chosen strategy is direct_byte
  3122  0FD2  0084               	movwf	4
  3123  0FD3  3008               	movlw	8
  3124  0FD4  0204               	subwf	4,w
  3125  0FD5  1803               	skipnc
  3126  0FD6  0008               	return
  3127  0FD7  3008               	movlw	high S4685
  3128  0FD8  008A               	movwf	10
  3129  0FD9  1003               	clrc
  3130  0FDA  0D04               	rlf	4,w
  3131  0FDB  3E17               	addlw	low S4685
  3132  0FDC  0082               	movwf	2
  3133  0FDD                     l4321:	
  3134  0FDD  0874               	movf	bujinCtr@tempStep,w
  3135                           
  3136                           ; Switch size 1, requested type "space"
  3137                           ; Number of cases is 8, Range of values is 0 to 7
  3138                           ; switch strategies available:
  3139                           ; Name         Instructions Cycles
  3140                           ; direct_byte           23     7 (fixed)
  3141                           ; simple_byte           25    13 (average)
  3142                           ; jumptable            260     6 (fixed)
  3143                           ;	Chosen strategy is direct_byte
  3144  0FDE  0084               	movwf	4
  3145  0FDF  3008               	movlw	8
  3146  0FE0  0204               	subwf	4,w
  3147  0FE1  1803               	skipnc
  3148  0FE2  0008               	return
  3149  0FE3  3008               	movlw	high S4687
  3150  0FE4  008A               	movwf	10
  3151  0FE5  1003               	clrc
  3152  0FE6  0D04               	rlf	4,w
  3153  0FE7  3E27               	addlw	low S4687
  3154  0FE8  0082               	movwf	2
  3155  0FE9                     l4323:	
  3156                           
  3157                           ;main.c: 689: else
  3158                           ;main.c: 690: {
  3159                           ;main.c: 691: PORTA &= 0x1F;
  3160  0FE9  301F               	movlw	31
  3161  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  3162  0FEB  0586               	andwf	6,f	;volatile
  3163                           
  3164                           ;main.c: 692: PORTB &= 0x7F;
  3165  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0FED  1386               	bcf	6,7	;volatile
  3167  0FEE  0008               	return
  3168  0FEF                     __end_of_bujinCtr:	
  3169  0FEF                     PL26:	
  3170  0FEF  1683               	bsf	3,5	;RP0=1, select bank1
  3171  0FF0  1286               	bcf	6,5	;volatile
  3172  0FF1  1306               	bcf	6,6	;volatile
  3173  0FF2  1786               	bsf	6,7	;volatile
  3174  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  3175  0FF4  0008               	return
  3176  0FF5                     __end_ofPL26:	
  3177  0FF5                     PL28:	
  3178  0FF5  1683               	bsf	3,5	;RP0=1, select bank1
  3179  0FF6  1686               	bsf	6,5	;volatile
  3180  0FF7  1306               	bcf	6,6	;volatile
  3181  0FF8  1386               	bcf	6,7	;volatile
  3182  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  3183  0FFA  0008               	return
  3184  0FFB                     __end_ofPL28:	
  3185  0FFB                     PL30:	
  3186  0FFB  1706               	bsf	6,6	;volatile
  3187  0FFC  1386               	bcf	6,7	;volatile
  3188  0FFD  1283               	bcf	3,5	;RP0=0, select bank0
  3189  0FFE  1386               	bcf	6,7	;volatile
  3190  0FFF  0008               	return
  3191  1000                     __end_ofPL30:	
  3192                           
  3193                           	psect	swtext1
  3194  0817                     __pswtext1:	
  3195  0817                     S4685:	
  3196  0817  158A  2FB1         	ljmp	l1077
  3197  0819  158A  2FB4         	ljmp	l1079
  3198  081B  158A  2FB7         	ljmp	l1080
  3199  081D  158A  2FBA         	ljmp	l1081
  3200  081F  158A  2FC1         	ljmp	l1082
  3201  0821  158A  2FC4         	ljmp	l1083
  3202  0823  158A  2FC7         	ljmp	l1084
  3203  0825  158A  2FCE         	ljmp	l1085
  3204                           
  3205                           	psect	swtext2
  3206  0827                     __pswtext2:	
  3207  0827                     S4687:	
  3208  0827  158A  2FCE         	ljmp	l1085
  3209  0829  158A  2FC7         	ljmp	l1084
  3210  082B  158A  2FC4         	ljmp	l1083
  3211  082D  158A  2FC1         	ljmp	l1082
  3212  082F  158A  2FBA         	ljmp	l1081
  3213  0831  158A  2FB7         	ljmp	l1080
  3214  0833  158A  2FB4         	ljmp	l1079
  3215  0835  158A  2FB1         	ljmp	l1077
  3216                           
  3217                           	psect	text17
  3218  07E0                     __ptext17:	
  3219 ;; *************** function _chrgCtr *****************
  3220 ;; Defined at:
  3221 ;;		line 359 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 300/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3235 ;;      Params:         0       0       0       0
  3236 ;;      Locals:         0       0       0       0
  3237 ;;      Temps:          0       0       0       0
  3238 ;;      Totals:         0       0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    1
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_main
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           
  3250                           ;psect for function _chrgCtr
  3251  07E0                     _chrgCtr:	
  3252                           
  3253                           ;main.c: 361: if(PORTB & 0x20)
  3254                           
  3255                           ;incstack = 0
  3256                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3257  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  3258  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  3259  07E2  1E86               	btfss	6,5	;volatile
  3260  07E3  2FFA               	goto	l3757
  3261  07E4  3010               	movlw	16
  3262                           
  3263                           ;main.c: 362: {
  3264                           ;main.c: 363: chrgFlag = 1;
  3265  07E5  01C3               	clrf	_chrgFlag
  3266  07E6  0AC3               	incf	_chrgFlag,f
  3267                           
  3268                           ;main.c: 364: firstLock = 0;
  3269  07E7  01C0               	clrf	_firstLock
  3270                           
  3271                           ;main.c: 365: lowBatLock = 0;
  3272  07E8  01BF               	clrf	_lowBatLock
  3273                           
  3274                           ;main.c: 366: if(power_ad > 4140)
  3275  07E9  0227               	subwf	_power_ad+1,w	;volatile
  3276  07EA  302D               	movlw	45
  3277  07EB  1903               	skipnz
  3278  07EC  0226               	subwf	_power_ad,w	;volatile
  3279  07ED  1C03               	skipc
  3280  07EE  2FF8               	goto	l3755
  3281                           
  3282                           ;main.c: 367: {
  3283                           ;main.c: 368: if(++chrgFullTime > 200)
  3284  07EF  30C9               	movlw	201
  3285  07F0  0AC1               	incf	_chrgFullTime,f
  3286  07F1  0241               	subwf	_chrgFullTime,w
  3287  07F2  1C03               	skipc
  3288  07F3  0008               	return
  3289                           
  3290                           ;main.c: 369: {
  3291                           ;main.c: 370: chrgFullTime = 0;
  3292  07F4  01C1               	clrf	_chrgFullTime
  3293                           
  3294                           ;main.c: 371: chrgFullFlag = 1;
  3295  07F5  01C2               	clrf	_chrgFullFlag
  3296  07F6  0AC2               	incf	_chrgFullFlag,f
  3297  07F7  0008               	return
  3298  07F8                     l3755:	
  3299                           
  3300                           ;main.c: 374: else
  3301                           ;main.c: 375: {
  3302                           ;main.c: 376: chrgFullTime = 0;
  3303  07F8  01C1               	clrf	_chrgFullTime
  3304  07F9  0008               	return
  3305  07FA                     l3757:	
  3306                           
  3307                           ;main.c: 380: else
  3308                           ;main.c: 381: {
  3309                           ;main.c: 382: chrgFlag = 0;
  3310  07FA  01C3               	clrf	_chrgFlag
  3311                           
  3312                           ;main.c: 383: chrgFullTime = 0;
  3313  07FB  01C1               	clrf	_chrgFullTime
  3314                           
  3315                           ;main.c: 384: chrgFullFlag = 0;
  3316  07FC  01C2               	clrf	_chrgFullFlag
  3317  07FD  0008               	return
  3318  07FE                     __end_of_chrgCtr:	
  3319                           
  3320                           	psect	text21
  3321  0F10                     __ptext21:	
  3322 ;; *************** function _KeyServer *****************
  3323 ;; Defined at:
  3324 ;;		line 107 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;		None
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;		None
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      void 
  3331 ;; Registers used:
  3332 ;;		wreg, status,2, status,0
  3333 ;; Tracked objects:
  3334 ;;		On entry : 300/0
  3335 ;;		On exit  : 300/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3338 ;;      Params:         0       0       0       0
  3339 ;;      Locals:         0       0       0       0
  3340 ;;      Temps:          0       0       0       0
  3341 ;;      Totals:         0       0       0       0
  3342 ;;Total ram usage:        0 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:    1
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           
  3353                           ;psect for function _KeyServer
  3354  0F10                     _KeyServer:	
  3355                           
  3356                           ;main.c: 109: static unsigned char KeyOldFlag = 0;
  3357                           ;main.c: 110: if (KeyFlag[0])
  3358                           
  3359                           ;incstack = 0
  3360                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3361  0F10  0879               	movf	_KeyFlag,w	;volatile
  3362  0F11  1903               	btfsc	3,2
  3363  0F12  2F6E               	goto	l3697
  3364                           
  3365                           ;main.c: 111: {
  3366                           ;main.c: 112: if (KeyFlag[0] != KeyOldFlag)
  3367  0F13  0879               	movf	_KeyFlag,w	;volatile
  3368  0F14  063A               	xorwf	KeyServer@KeyOldFlag,w
  3369  0F15  1903               	skipnz
  3370  0F16  0008               	return
  3371                           
  3372                           ;main.c: 113: {
  3373                           ;main.c: 115: KeyOldFlag ^= KeyFlag[0];
  3374  0F17  0879               	movf	_KeyFlag,w	;volatile
  3375  0F18  06BA               	xorwf	KeyServer@KeyOldFlag,f
  3376                           
  3377                           ;main.c: 116: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3378  0F19  183A               	btfsc	KeyServer@KeyOldFlag,0
  3379  0F1A  1C79               	btfss	_KeyFlag,0	;volatile
  3380  0F1B  2F37               	goto	l3657
  3381  0F1C  0840               	movf	_firstLock,w
  3382  0F1D  1D03               	btfss	3,2
  3383  0F1E  2F37               	goto	l3657
  3384                           
  3385                           ;main.c: 117: {
  3386                           ;main.c: 119: if(lowBatLock == 1)
  3387  0F1F  0B3F               	decfsz	_lowBatLock,w
  3388  0F20  2F26               	goto	l3645
  3389                           
  3390                           ;main.c: 120: {
  3391                           ;main.c: 121: shanshuoTime2 = 450;
  3392  0F21  30C2               	movlw	194
  3393  0F22  00B0               	movwf	_shanshuoTime2
  3394  0F23  3001               	movlw	1
  3395  0F24  00B1               	movwf	_shanshuoTime2+1
  3396                           
  3397                           ;main.c: 122: }
  3398  0F25  2F2B               	goto	l3649
  3399  0F26                     l3645:	
  3400                           
  3401                           ;main.c: 123: else if(++wuhuaFlag > 2)
  3402  0F26  3003               	movlw	3
  3403  0F27  0AC7               	incf	_wuhuaFlag,f
  3404  0F28  0247               	subwf	_wuhuaFlag,w
  3405  0F29  1803               	btfsc	3,0
  3406                           
  3407                           ;main.c: 124: {
  3408                           ;main.c: 125: wuhuaFlag = 0;
  3409  0F2A  01C7               	clrf	_wuhuaFlag
  3410  0F2B                     l3649:	
  3411                           
  3412                           ;main.c: 126: }
  3413                           ;main.c: 127: if(wuhuaFlag >= 2)
  3414  0F2B  3002               	movlw	2
  3415  0F2C  0247               	subwf	_wuhuaFlag,w
  3416  0F2D  1C03               	skipc
  3417  0F2E  2F35               	goto	l3655
  3418                           
  3419                           ;main.c: 128: {
  3420                           ;main.c: 129: shanshuoTime2 = 450;
  3421  0F2F  30C2               	movlw	194
  3422  0F30  00B0               	movwf	_shanshuoTime2
  3423  0F31  3001               	movlw	1
  3424  0F32  00B1               	movwf	_shanshuoTime2+1
  3425                           
  3426                           ;main.c: 130: count10s = 0;
  3427  0F33  01C5               	clrf	_count10s
  3428                           
  3429                           ;main.c: 131: }
  3430  0F34  2F37               	goto	l3657
  3431  0F35                     l3655:	
  3432                           
  3433                           ;main.c: 132: else
  3434                           ;main.c: 133: {
  3435                           ;main.c: 134: shanshuoTime2 = 0;
  3436  0F35  01B0               	clrf	_shanshuoTime2
  3437  0F36  01B1               	clrf	_shanshuoTime2+1
  3438  0F37                     l3657:	
  3439                           
  3440                           ;main.c: 135: }
  3441                           ;main.c: 136: }
  3442                           ;main.c: 137: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3443  0F37  18BA               	btfsc	KeyServer@KeyOldFlag,1
  3444  0F38  1CF9               	btfss	_KeyFlag,1	;volatile
  3445  0F39  2F52               	goto	l3677
  3446  0F3A  0840               	movf	_firstLock,w
  3447  0F3B  1D03               	btfss	3,2
  3448  0F3C  2F52               	goto	l3677
  3449                           
  3450                           ;main.c: 138: {
  3451                           ;main.c: 140: if(lowBatLock == 1)
  3452  0F3D  0B3F               	decfsz	_lowBatLock,w
  3453  0F3E  2F42               	goto	l3667
  3454                           
  3455                           ;main.c: 141: {
  3456                           ;main.c: 142: shanshuoTime = 450;
  3457  0F3F  2770  158A         	fcall	PL40	;call to abstracted procedure
  3458                           
  3459                           ;main.c: 143: }
  3460  0F41  2F49               	goto	l3671
  3461  0F42                     l3667:	
  3462                           
  3463                           ;main.c: 144: else if(++workStep > 3)
  3464  0F42  3004               	movlw	4
  3465  0F43  0AFB               	incf	_workStep,f
  3466  0F44  027B               	subwf	_workStep,w
  3467  0F45  1C03               	skipc
  3468  0F46  2F49               	goto	l3671
  3469                           
  3470                           ;main.c: 145: {
  3471                           ;main.c: 146: workStep = 0;
  3472  0F47  01FB               	clrf	_workStep
  3473                           
  3474                           ;main.c: 147: bujinFlag = 0;
  3475  0F48  01BC               	clrf	_bujinFlag
  3476  0F49                     l3671:	
  3477                           
  3478                           ;main.c: 148: }
  3479                           ;main.c: 149: if(workStep >= 2)
  3480  0F49  3002               	movlw	2
  3481  0F4A  027B               	subwf	_workStep,w
  3482  0F4B  1C03               	skipc
  3483  0F4C  2F50               	goto	l3675
  3484                           
  3485                           ;main.c: 150: {
  3486                           ;main.c: 151: shanshuoTime = 450;
  3487  0F4D  2770  158A         	fcall	PL40	;call to abstracted procedure
  3488                           
  3489                           ;main.c: 152: }
  3490  0F4F  2F52               	goto	l3677
  3491  0F50                     l3675:	
  3492                           
  3493                           ;main.c: 153: else
  3494                           ;main.c: 154: {
  3495                           ;main.c: 155: shanshuoTime = 0;
  3496  0F50  01B2               	clrf	_shanshuoTime
  3497  0F51  01B3               	clrf	_shanshuoTime+1
  3498  0F52                     l3677:	
  3499                           
  3500                           ;main.c: 156: }
  3501                           ;main.c: 158: }
  3502                           ;main.c: 159: if ((KeyOldFlag & 0x4) && (KeyFlag[0] & 0x4) && firstLock == 0 && workStep
      +                           > 0)
  3503  0F52  193A               	btfsc	KeyServer@KeyOldFlag,2
  3504  0F53  1D79               	btfss	_KeyFlag,2	;volatile
  3505  0F54  2F6B               	goto	l3695
  3506  0F55  0840               	movf	_firstLock,w
  3507  0F56  1D03               	btfss	3,2
  3508  0F57  2F6B               	goto	l3695
  3509  0F58  087B               	movf	_workStep,w
  3510  0F59  1903               	btfsc	3,2
  3511  0F5A  2F6B               	goto	l3695
  3512                           
  3513                           ;main.c: 160: {
  3514                           ;main.c: 162: if(++bujinFlag > 3)
  3515  0F5B  3004               	movlw	4
  3516  0F5C  0ABC               	incf	_bujinFlag,f
  3517  0F5D  023C               	subwf	_bujinFlag,w
  3518  0F5E  1803               	btfsc	3,0
  3519                           
  3520                           ;main.c: 163: {
  3521                           ;main.c: 164: bujinFlag = 0;
  3522  0F5F  01BC               	clrf	_bujinFlag
  3523                           
  3524                           ;main.c: 165: }
  3525                           ;main.c: 166: if(bujinFlag >= 2)
  3526  0F60  3002               	movlw	2
  3527  0F61  023C               	subwf	_bujinFlag,w
  3528  0F62  1C03               	skipc
  3529  0F63  2F69               	goto	l3693
  3530                           
  3531                           ;main.c: 167: {
  3532                           ;main.c: 168: shanshuoTime3 = 450;
  3533  0F64  30C2               	movlw	194
  3534  0F65  00AE               	movwf	_shanshuoTime3
  3535  0F66  3001               	movlw	1
  3536  0F67  00AF               	movwf	_shanshuoTime3+1
  3537                           
  3538                           ;main.c: 169: }
  3539  0F68  2F6B               	goto	l3695
  3540  0F69                     l3693:	
  3541                           
  3542                           ;main.c: 170: else
  3543                           ;main.c: 171: {
  3544                           ;main.c: 172: shanshuoTime3 = 0;
  3545  0F69  01AE               	clrf	_shanshuoTime3
  3546  0F6A  01AF               	clrf	_shanshuoTime3+1
  3547  0F6B                     l3695:	
  3548                           
  3549                           ;main.c: 173: }
  3550                           ;main.c: 174: }
  3551                           ;main.c: 176: KeyOldFlag = KeyFlag[0];
  3552  0F6B  0879               	movf	_KeyFlag,w	;volatile
  3553  0F6C  00BA               	movwf	KeyServer@KeyOldFlag
  3554  0F6D  0008               	return
  3555  0F6E                     l3697:	
  3556                           
  3557                           ;main.c: 179: else
  3558                           ;main.c: 180: {
  3559                           ;main.c: 181: KeyOldFlag = 0;
  3560  0F6E  01BA               	clrf	KeyServer@KeyOldFlag
  3561  0F6F  0008               	return
  3562  0F70                     __end_of_KeyServer:	
  3563  0F70                     PL40:	
  3564  0F70  30C2               	movlw	194
  3565  0F71  00B2               	movwf	_shanshuoTime
  3566  0F72  3001               	movlw	1
  3567  0F73  00B3               	movwf	_shanshuoTime+1
  3568  0F74  0008               	return
  3569  0F75                     __end_ofPL40:	
  3570                           
  3571                           	psect	text22
  3572  0405                     __ptext22:	
  3573 ;; *************** function _Init_System *****************
  3574 ;; Defined at:
  3575 ;;		line 56 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, status,2
  3584 ;; Tracked objects:
  3585 ;;		On entry : B00/0
  3586 ;;		On exit  : 300/100
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3589 ;;      Params:         0       0       0       0
  3590 ;;      Locals:         0       0       0       0
  3591 ;;      Temps:          0       0       0       0
  3592 ;;      Totals:         0       0       0       0
  3593 ;;Total ram usage:        0 bytes
  3594 ;; Hardware stack levels used:    1
  3595 ;; Hardware stack levels required when called:    1
  3596 ;; This function calls:
  3597 ;;		Nothing
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           
  3604                           ;psect for function _Init_System
  3605  0405                     _Init_System:	
  3606                           
  3607                           ;incstack = 0
  3608                           ; Regs used in _Init_System: [wreg+status,2]
  3609  0405  0000               	nop	;# 
  3610  0406  0064               	clrwdt	;# 
  3611                           
  3612                           ;main.c: 60: INTCON = 0;
  3613  0407  018B               	clrf	11	;volatile
  3614                           
  3615                           ;main.c: 61: OSCCON = 0X72;
  3616  0408  3072               	movlw	114
  3617  0409  1283               	bcf	3,5	;RP0=0, select bank0
  3618  040A  1303               	bcf	3,6	;RP1=0, select bank0
  3619  040B  0094               	movwf	20	;volatile
  3620                           
  3621                           ;main.c: 62: OPTION_REG = 0;
  3622  040C  0181               	clrf	1	;volatile
  3623                           
  3624                           ;main.c: 67: TRISA = 0x04;
  3625  040D  3004               	movlw	4
  3626  040E  1683               	bsf	3,5	;RP0=1, select bank1
  3627  040F  0085               	movwf	5	;volatile
  3628                           
  3629                           ;main.c: 68: PORTA = 0;
  3630  0410  0186               	clrf	6	;volatile
  3631                           
  3632                           ;main.c: 69: TRISB = 0x20;
  3633  0411  3020               	movlw	32
  3634  0412  1283               	bcf	3,5	;RP0=0, select bank0
  3635  0413  0085               	movwf	5	;volatile
  3636                           
  3637                           ;main.c: 70: PORTB = 0;
  3638  0414  0186               	clrf	6	;volatile
  3639                           
  3640                           ;main.c: 71: WPUB = 0x00;
  3641  0415  0188               	clrf	8	;volatile
  3642                           
  3643                           ;main.c: 72: TRISC = 0;
  3644  0416  1703               	bsf	3,6	;RP1=1, select bank2
  3645  0417  0185               	clrf	5	;volatile
  3646                           
  3647                           ;main.c: 73: PORTC = 0;
  3648  0418  0186               	clrf	6	;volatile
  3649                           
  3650                           ;main.c: 75: PIE1 = 2;
  3651  0419  3002               	movlw	2
  3652  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3653  041B  008E               	movwf	14	;volatile
  3654                           
  3655                           ;main.c: 76: PR2 = 250;
  3656  041C  30FA               	movlw	250
  3657  041D  0091               	movwf	17	;volatile
  3658                           
  3659                           ;main.c: 77: T2CON = 4;
  3660  041E  3004               	movlw	4
  3661  041F  0093               	movwf	19	;volatile
  3662                           
  3663                           ;main.c: 79: INTCON = 0XC0;
  3664  0420  30C0               	movlw	192
  3665  0421  008B               	movwf	11	;volatile
  3666                           
  3667                           ;main.c: 80: ADCON0 = 0X41;
  3668                           
  3669                           ;main.c: 81: ADON = 1;
  3670                           
  3671                           ;main.c: 82: ADCON1 = 0x00;
  3672  0422  2FCA               	ljmp	PL22	;call to abstracted procedure
  3673  0423                     __end_of_Init_System:	
  3674  0423                     __ptext18:	
  3675 ;; *************** function _WorkSleep *****************
  3676 ;; Defined at:
  3677 ;;		line 211 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 300/0
  3688 ;;		On exit  : 200/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3691 ;;      Params:         0       0       0       0
  3692 ;;      Locals:         0       0       0       0
  3693 ;;      Temps:          0       0       0       0
  3694 ;;      Totals:         0       0       0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    4
  3698 ;; This function calls:
  3699 ;;		_Refurbish_Sfr
  3700 ;;		_SystemEnterSleep
  3701 ;; This function is called by:
  3702 ;;		_main
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           
  3707                           ;psect for function _WorkSleep
  3708  0423                     _WorkSleep:	
  3709                           
  3710                           ;main.c: 214: static unsigned char time;
  3711                           ;main.c: 216: if(B_OnOff)time = 0;
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3715  0423  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3716  0424  01B9               	clrf	WorkSleep@time
  3717                           
  3718                           ;main.c: 218: if(++time >= 125)
  3719  0425  307D               	movlw	125
  3720  0426  0AB9               	incf	WorkSleep@time,f
  3721  0427  0239               	subwf	WorkSleep@time,w
  3722  0428  1C03               	skipc
  3723  0429  0008               	return
  3724                           
  3725                           ;main.c: 219: {
  3726                           ;main.c: 220: time = 0;
  3727  042A  01B9               	clrf	WorkSleep@time
  3728                           
  3729                           ;main.c: 221: INTCON = 0;
  3730  042B  018B               	clrf	11	;volatile
  3731                           
  3732                           ;main.c: 222: PIE1 = 0;
  3733  042C  018E               	clrf	14	;volatile
  3734                           
  3735                           ;main.c: 223: PIE2 = 0;
  3736  042D  1703               	bsf	3,6	;RP1=1, select bank2
  3737  042E  0190               	clrf	16	;volatile
  3738                           
  3739                           ;main.c: 224: PIR1 = 0;
  3740  042F  1303               	bcf	3,6	;RP1=0, select bank0
  3741  0430  018D               	clrf	13	;volatile
  3742                           
  3743                           ;main.c: 225: PIR2 = 0;
  3744  0431  1703               	bsf	3,6	;RP1=1, select bank2
  3745  0432  018F               	clrf	15	;volatile
  3746                           
  3747                           ;main.c: 226: T2CON = 0;
  3748  0433  1303               	bcf	3,6	;RP1=0, select bank0
  3749  0434  0193               	clrf	19	;volatile
  3750                           
  3751                           ;main.c: 227: ADCON1 = 0;
  3752  0435  1683               	bsf	3,5	;RP0=1, select bank1
  3753  0436  0196               	clrf	22	;volatile
  3754                           
  3755                           ;main.c: 230: ADCON0 = 0;
  3756  0437  0195               	clrf	21	;volatile
  3757                           
  3758                           ;main.c: 233: PORTA = 0x01;
  3759  0438  3001               	movlw	1
  3760  0439  0086               	movwf	6	;volatile
  3761                           
  3762                           ;main.c: 234: PORTB = 0x02;
  3763  043A  3002               	movlw	2
  3764  043B  1283               	bcf	3,5	;RP0=0, select bank0
  3765  043C  0086               	movwf	6	;volatile
  3766                           
  3767                           ;main.c: 235: TRISC = 0;
  3768  043D  1703               	bsf	3,6	;RP1=1, select bank2
  3769  043E  0185               	clrf	5	;volatile
  3770                           
  3771                           ;main.c: 236: PORTC = 0x03;
  3772  043F  3003               	movlw	3
  3773  0440  0086               	movwf	6	;volatile
  3774                           
  3775                           ;main.c: 238: TRISB5 =1;
  3776  0441  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0442  1685               	bsf	5,5	;volatile
  3778                           
  3779                           ;main.c: 240: RBIF = 0;
  3780  0443  100B               	bcf	11,0	;volatile
  3781                           
  3782                           ;main.c: 241: RBIE = 1;
  3783  0444  158B               	bsf	11,3	;volatile
  3784                           
  3785                           ;main.c: 242: IOCB5= 1;
  3786  0445  1689               	bsf	9,5	;volatile
  3787                           
  3788                           ;main.c: 243: PORTB;
  3789  0446  0806               	movf	6,w	;volatile
  3790                           
  3791                           ;main.c: 244: PORTB &= 0xFD;
  3792  0447  1086               	bcf	6,1	;volatile
  3793                           
  3794                           ;main.c: 256: SystemEnterSleep();
  3795  0448  247F  118A         	fcall	_SystemEnterSleep
  3796                           
  3797                           ;main.c: 257: if(RAIF)
  3798  044A  1D8D               	btfss	13,3	;volatile
  3799  044B  2C4F               	goto	l4523
  3800                           
  3801                           ;main.c: 258: {
  3802                           ;main.c: 259: RAIF = 0;
  3803  044C  118D               	bcf	13,3	;volatile
  3804                           
  3805                           ;main.c: 260: PORTA;
  3806  044D  1683               	bsf	3,5	;RP0=1, select bank1
  3807  044E  0806               	movf	6,w	;volatile
  3808  044F                     l4523:	
  3809                           
  3810                           ;main.c: 261: }
  3811                           ;main.c: 263: Refurbish_Sfr();
  3812  044F  276A  118A         	fcall	_Refurbish_Sfr
  3813                           
  3814                           ;main.c: 264: ADCON0 = 0X41;
  3815                           
  3816                           ;main.c: 265: ADON = 1;
  3817                           
  3818                           ;main.c: 266: ADCON1 = 0x00;
  3819  0451  2FCA               	ljmp	PL22	;call to abstracted procedure
  3820  0452                     __end_of_WorkSleep:	
  3821  0452                     __ptext23:	
  3822 ;; *************** function _CheckTouchKey *****************
  3823 ;; Defined at:
  3824 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;		None
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3838 ;;      Params:         0       0       0       0
  3839 ;;      Locals:         0       0       0       0
  3840 ;;      Temps:          0       0       0       0
  3841 ;;      Totals:         0       0       0       0
  3842 ;;Total ram usage:        0 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    5
  3845 ;; This function calls:
  3846 ;;		_CheckKeyOldValue
  3847 ;;		_CheckOnceResult
  3848 ;;		_CheckValidTime
  3849 ;;		_ClearResSum
  3850 ;;		_GetTouchKeyValue
  3851 ;;		_KeyStopClear
  3852 ;;		_TurnKeyFlags
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           
  3859                           ;psect for function _CheckTouchKey
  3860  0452                     _CheckTouchKey:	
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3864  0452  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3865  0453  2C60               	goto	l1318
  3866  0454  250F  118A         	fcall	_GetTouchKeyValue
  3867  0456  3008               	movlw	8
  3868  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3869  0458  1303               	bcf	3,6	;RP1=0, select bank0
  3870  0459  0AB8               	incf	_KeyCounter,f
  3871  045A  0238               	subwf	_KeyCounter,w
  3872  045B  1C03               	skipc
  3873  045C  2C7E               	goto	l4607
  3874  045D  01B8               	clrf	_KeyCounter
  3875  045E  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3876  045F  2C7E               	goto	l4607
  3877  0460                     l1318:	
  3878  0460  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3879  0461  2C78               	goto	l4601
  3880  0462  257E  118A         	fcall	_CheckOnceResult
  3881  0464  2713  118A         	fcall	_TurnKeyFlags
  3882  0466  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3883  0467  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3884  0468  2C6F               	goto	l4591
  3885  0469  3002               	movlw	2
  3886  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3887  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3888  046C  0238               	subwf	_KeyCounter,w
  3889  046D  1C03               	skipc
  3890  046E  2C74               	goto	l4599
  3891  046F                     l4591:	
  3892  046F  26FF  118A         	fcall	_KeyStopClear
  3893  0471  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3894  0472  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3895  0473  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3896  0474                     l4599:	
  3897  0474  1283               	bcf	3,5	;RP0=0, select bank0
  3898  0475  1303               	bcf	3,6	;RP1=0, select bank0
  3899  0476  01B8               	clrf	_KeyCounter
  3900  0477  2C7E               	goto	l4607
  3901  0478                     l4601:	
  3902  0478  2697  118A         	fcall	_CheckKeyOldValue
  3903  047A  256F  118A         	fcall	_ClearResSum
  3904  047C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3905  047D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3906  047E                     l4607:	
  3907  047E  2F44               	ljmp	l3509	;# 
  3908  047F                     __end_of_CheckTouchKey:	
  3909  047F                     __ptext19:	
  3910 ;; *************** function _SystemEnterSleep *****************
  3911 ;; Defined at:
  3912 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  92              2    6[BANK0 ] unsigned int 
  3917 ;;  93              2    4[BANK0 ] unsigned int 
  3918 ;;  94              2    2[BANK0 ] unsigned int 
  3919 ;;  91              1    8[BANK0 ] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  1    wreg      void 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 300/0
  3926 ;;		On exit  : 300/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3929 ;;      Params:         0       0       0       0
  3930 ;;      Locals:         0       7       0       0
  3931 ;;      Temps:          0       2       0       0
  3932 ;;      Totals:         0       9       0       0
  3933 ;;Total ram usage:        9 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    3
  3936 ;; This function calls:
  3937 ;;		_ClearResSum
  3938 ;;		_GetTouchKeyValue
  3939 ;;		_KeyClearOne
  3940 ;; This function is called by:
  3941 ;;		_WorkSleep
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _SystemEnterSleep
  3947  047F                     _SystemEnterSleep:	
  3948  047F                     l1330:	
  3949                           ;incstack = 0
  3950                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3951                           
  3952  047F  0064               	clrwdt	;# 
  3953  0480  1683               	bsf	3,5	;RP0=1, select bank1
  3954  0481  1303               	bcf	3,6	;RP1=0, select bank1
  3955  0482  0181               	clrf	1	;volatile
  3956  0483  3007               	movlw	7
  3957  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3958  0485  0481               	iorwf	1,f	;volatile
  3959  0486  1581               	bsf	1,3	;volatile
  3960  0487  0064               	clrwdt	;# 
  3961  0488  300A               	movlw	10
  3962  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3963  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3964  048B  0081               	movwf	1	;volatile
  3965  048C  0064               	clrwdt	;# 
  3966  048D  1283               	bcf	3,5	;RP0=0, select bank2
  3967  048E  1703               	bsf	3,6	;RP1=1, select bank2
  3968  048F  0191               	clrf	17	;volatile
  3969  0490  0193               	clrf	19	;volatile
  3970  0491  3002               	movlw	2
  3971  0492  1303               	bcf	3,6	;RP1=0, select bank0
  3972  0493  0094               	movwf	20	;volatile
  3973  0494  0063               	sleep	;# 
  3974  0495  0000               	nop	;# 
  3975  0496  0064               	clrwdt	;# 
  3976  0497  3072               	movlw	114
  3977  0498  1283               	bcf	3,5	;RP0=0, select bank0
  3978  0499  1303               	bcf	3,6	;RP1=0, select bank0
  3979  049A  0094               	movwf	20	;volatile
  3980  049B  3079               	movlw	121
  3981  049C  1703               	bsf	3,6	;RP1=1, select bank2
  3982  049D  0093               	movwf	19	;volatile
  3983  049E  256F  118A         	fcall	_ClearResSum
  3984  04A0  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3985  04A1  250F  118A         	fcall	_GetTouchKeyValue
  3986  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  3987  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  3988  04A5  27D6  118A         	fcall	PL34	;call to abstracted procedure
  3989  04A7  1C0B               	btfss	11,0	;volatile
  3990  04A8  188B               	btfsc	11,1	;volatile
  3991  04A9  2CAC               	goto	l4127
  3992  04AA  1D8D               	btfss	13,3	;volatile
  3993  04AB  2CB3               	goto	l4139
  3994  04AC                     l4127:	
  3995  04AC  256F               	fcall	_ClearResSum
  3996  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3997  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3998  04AF  01B8               	clrf	_KeyCounter
  3999  04B0  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4000  04B1  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4001  04B2  0008               	return
  4002  04B3                     l4139:	
  4003  04B3  0852               	movf	SystemEnterSleep@92,w
  4004  04B4  3907               	andlw	7
  4005  04B5  1003               	clrc
  4006  04B6  1903               	btfsc	3,2
  4007  04B7  2D09               	goto	L9
  4008  04B8  0D54               	rlf	SystemEnterSleep@91,w
  4009  04B9  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4010  04BA  0084               	movwf	4
  4011  04BB  1383               	bcf	3,7	;select IRP bank1
  4012  04BC  0800               	movf	0,w
  4013  04BD  00D0               	movwf	SystemEnterSleep@93
  4014  04BE  0A84               	incf	4,f
  4015  04BF  0800               	movf	0,w
  4016  04C0  00D1               	movwf	SystemEnterSleep@93+1
  4017  04C1  00CF               	movwf	SystemEnterSleep@94+1
  4018  04C2  0850               	movf	SystemEnterSleep@93,w
  4019  04C3  00CE               	movwf	SystemEnterSleep@94
  4020  04C4  0850               	movf	SystemEnterSleep@93,w
  4021  04C5  0451               	iorwf	SystemEnterSleep@93+1,w
  4022  04C6  1903               	btfsc	3,2
  4023  04C7  2D08               	goto	l4173
  4024  04C8  0854               	movf	SystemEnterSleep@91,w
  4025  04C9  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4026  04CA  0084               	movwf	4
  4027  04CB  158A  2000  118A   	fcall	stringdir
  4028  04CE  07CE               	addwf	SystemEnterSleep@94,f
  4029  04CF  1803               	skipnc
  4030  04D0  0ACF               	incf	SystemEnterSleep@94+1,f
  4031  04D1  1003               	clrc
  4032  04D2  0D54               	rlf	SystemEnterSleep@91,w
  4033  04D3  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4034  04D4  27B5  118A         	fcall	PL14	;call to abstracted procedure
  4035  04D6  084F               	movf	SystemEnterSleep@94+1,w
  4036  04D7  024D               	subwf	??_SystemEnterSleep+1,w
  4037  04D8  1D03               	skipz
  4038  04D9  2CDC               	goto	u3825
  4039  04DA  084E               	movf	SystemEnterSleep@94,w
  4040  04DB  024C               	subwf	??_SystemEnterSleep,w
  4041  04DC                     u3825:	
  4042  04DC  1C03               	skipc
  4043  04DD  2CF0               	goto	L8
  4044  04DE  27D6  118A         	fcall	PL34	;call to abstracted procedure
  4045  04E0                     l4153:	
  4046  04E0  0852               	movf	SystemEnterSleep@92,w
  4047  04E1  3907               	andlw	7
  4048  04E2  1D03               	btfss	3,2
  4049  04E3  2CE7               	goto	l4157
  4050  04E4  0854               	movf	SystemEnterSleep@91,w
  4051  04E5  2674  118A         	fcall	_KeyClearOne
  4052  04E7                     l4157:	
  4053  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  4054  04E8  3003               	movlw	3
  4055  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  4056  04EA  1003               	clrc
  4057  04EB  27DB  118A         	fcall	PL36	;call to abstracted procedure
  4058  04ED  1803               	btfsc	3,0
  4059  04EE  2CAC               	goto	l4127
  4060  04EF  2CE0               	goto	l4153
  4061  04F0                     L8:	
  4062  04F0  0D54               	rlf	SystemEnterSleep@91,w
  4063  04F1  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4064  04F2  27B5  118A         	fcall	PL14	;call to abstracted procedure
  4065  04F4  1003               	clrc
  4066  04F5  0D54               	rlf	SystemEnterSleep@91,w
  4067  04F6  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4068  04F7  279F  118A         	fcall	PL10	;call to abstracted procedure
  4069  04F9  0800               	movf	0,w
  4070  04FA  00CC               	movwf	??_SystemEnterSleep
  4071  04FB  0A84               	incf	4,f
  4072  04FC  0800               	movf	0,w
  4073  04FD  00CD               	movwf	??_SystemEnterSleep+1
  4074  04FE  1003               	clrc
  4075  04FF  0D54               	rlf	SystemEnterSleep@91,w
  4076  0500  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4077  0501  279F  118A         	fcall	PL10	;call to abstracted procedure
  4078  0503  0850               	movf	SystemEnterSleep@93,w
  4079  0504  0080               	movwf	0
  4080  0505  0A84               	incf	4,f
  4081  0506  0851               	movf	SystemEnterSleep@93+1,w
  4082  0507  0080               	movwf	0
  4083  0508                     l4173:	
  4084  0508  1003               	clrc
  4085  0509                     L9:	
  4086  0509  3003               	movlw	3
  4087  050A  27DB  118A         	fcall	PL36	;call to abstracted procedure
  4088  050C  1803               	btfsc	3,0
  4089  050D  2C7F               	goto	l1330
  4090  050E  2CB3               	goto	l4139
  4091  050F                     __end_of_SystemEnterSleep:	
  4092  050F                     __ptext27:	
  4093 ;; *************** function _GetTouchKeyValue *****************
  4094 ;; Defined at:
  4095 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;		None
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  63              2    5[COMMON] unsigned int 
  4100 ;;  64              2    3[COMMON] unsigned int 
  4101 ;;  62              1    7[COMMON] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/200
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4111 ;;      Params:         0       0       0       0
  4112 ;;      Locals:         5       0       0       0
  4113 ;;      Temps:          0       0       0       0
  4114 ;;      Totals:         5       0       0       0
  4115 ;;Total ram usage:        5 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    2
  4118 ;; This function calls:
  4119 ;;		_ClearResSum
  4120 ;; This function is called by:
  4121 ;;		_CheckTouchKey
  4122 ;;		_SystemEnterSleep
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _GetTouchKeyValue
  4128  050F                     _GetTouchKeyValue:	
  4129                           
  4130                           ;incstack = 0
  4131                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4132  050F  01F7               	clrf	GetTouchKeyValue@62
  4133  0510  01F5               	clrf	GetTouchKeyValue@63
  4134  0511  0AF5               	incf	GetTouchKeyValue@63,f
  4135  0512  01F6               	clrf	GetTouchKeyValue@63+1
  4136  0513                     l3001:	
  4137  0513  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4138  0514  2D19               	goto	l3005
  4139  0515  0875               	movf	GetTouchKeyValue@63,w
  4140  0516  3907               	andlw	7
  4141  0517  1903               	btfsc	3,2
  4142  0518  2D65               	goto	l3033
  4143  0519                     l3005:	
  4144  0519  1283               	bcf	3,5	;RP0=0, select bank2
  4145  051A  1703               	bsf	3,6	;RP1=1, select bank2
  4146  051B  0191               	clrf	17	;volatile
  4147  051C  0192               	clrf	18	;volatile
  4148  051D  3079               	movlw	121
  4149  051E  0093               	movwf	19	;volatile
  4150  051F  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0520  1305               	bcf	5,6	;volatile
  4152  0521  1306               	bcf	6,6	;volatile
  4153  0522  0000               	nop	;# 
  4154  0523  0000               	nop	;# 
  4155  0524  0000               	nop	;# 
  4156  0525  0000               	nop	;# 
  4157  0526  0000               	nop	;# 
  4158  0527  0000               	nop	;# 
  4159  0528  0000               	nop	;# 
  4160  0529  0000               	nop	;# 
  4161  052A  1283               	bcf	3,5	;RP0=0, select bank0
  4162  052B  1303               	bcf	3,6	;RP1=0, select bank0
  4163  052C  1705               	bsf	5,6	;volatile
  4164  052D  0877               	movf	GetTouchKeyValue@62,w
  4165  052E  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4166  052F  0084               	movwf	4
  4167  0530  158A  2000  118A   	fcall	stringdir
  4168  0533  1703               	bsf	3,6	;RP1=1, select bank2
  4169  0534  0091               	movwf	17	;volatile
  4170  0535  0877               	movf	GetTouchKeyValue@62,w
  4171  0536  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4172  0537  0084               	movwf	4
  4173  0538  158A  2000  118A   	fcall	stringdir
  4174  053B  0092               	movwf	18	;volatile
  4175  053C  0000               	nop	;# 
  4176  053D  0000               	nop	;# 
  4177  053E  0000               	nop	;# 
  4178  053F  0000               	nop	;# 
  4179  0540  1283               	bcf	3,5	;RP0=0, select bank2
  4180  0541  1703               	bsf	3,6	;RP1=1, select bank2
  4181  0542  1411               	bsf	17,0	;volatile
  4182  0543  30D0               	movlw	208
  4183  0544  00F3               	movwf	GetTouchKeyValue@64
  4184  0545  3007               	movlw	7
  4185  0546  00F4               	movwf	GetTouchKeyValue@64+1
  4186  0547                     l1240:	
  4187  0547  1B91               	btfsc	17,7	;volatile
  4188  0548  2D55               	goto	l3031
  4189  0549  3001               	movlw	1
  4190  054A  02F3               	subwf	GetTouchKeyValue@64,f
  4191  054B  1C03               	skipc
  4192  054C  03F4               	decf	GetTouchKeyValue@64+1,f
  4193  054D  0873               	movf	GetTouchKeyValue@64,w
  4194  054E  0474               	iorwf	GetTouchKeyValue@64+1,w
  4195  054F  1D03               	btfss	3,2
  4196  0550  2D47               	goto	l1240
  4197  0551  30FF               	movlw	255
  4198  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0553  00B8               	movwf	_KeyCounter
  4200  0554  2D6F               	ljmp	l2849
  4201  0555                     l3031:	
  4202  0555  1003               	clrc
  4203  0556  0D77               	rlf	GetTouchKeyValue@62,w
  4204  0557  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4205  0558  0084               	movwf	4
  4206  0559  0816               	movf	22,w	;volatile
  4207  055A  1383               	bcf	3,7	;select IRP bank1
  4208  055B  0780               	addwf	0,f
  4209  055C  0F84               	incfsz	4,f
  4210  055D  0800               	movf	0,w
  4211  055E  1803               	skipnc
  4212  055F  0A00               	incf	0,w
  4213  0560  00FF               	movwf	127
  4214  0561  0817               	movf	23,w	;volatile
  4215  0562  077F               	addwf	127,w
  4216  0563  0080               	movwf	0
  4217  0564  0384               	decf	4,f
  4218  0565                     l3033:	
  4219  0565  3003               	movlw	3
  4220  0566  1003               	clrc
  4221  0567  0DF5               	rlf	GetTouchKeyValue@63,f
  4222  0568  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4223  0569  0AF7               	incf	GetTouchKeyValue@62,f
  4224  056A  0277               	subwf	GetTouchKeyValue@62,w
  4225  056B  1C03               	skipc
  4226  056C  2D13               	goto	l3001
  4227  056D  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4228  056E  0008               	return
  4229  056F                     __end_of_GetTouchKeyValue:	
  4230  056F                     __ptext28:	
  4231 ;; *************** function _ClearResSum *****************
  4232 ;; Defined at:
  4233 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  56              1    2[COMMON] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/200
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4247 ;;      Params:         0       0       0       0
  4248 ;;      Locals:         1       0       0       0
  4249 ;;      Temps:          0       0       0       0
  4250 ;;      Totals:         1       0       0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    1
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_GetTouchKeyValue
  4258 ;;		_CheckTouchKey
  4259 ;;		_SystemEnterSleep
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _ClearResSum
  4265  056F                     _ClearResSum:	
  4266  056F                     l2849:	
  4267                           ;incstack = 0
  4268                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4269                           
  4270  056F  01F2               	clrf	ClearResSum@56
  4271  0570                     l2851:	
  4272  0570  1003               	clrc
  4273  0571  0D72               	rlf	ClearResSum@56,w
  4274  0572  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4275  0573  0084               	movwf	4
  4276  0574  3003               	movlw	3
  4277  0575  1383               	bcf	3,7	;select IRP bank1
  4278  0576  0180               	clrf	0
  4279  0577  0A84               	incf	4,f
  4280  0578  0180               	clrf	0
  4281  0579  0AF2               	incf	ClearResSum@56,f
  4282  057A  0272               	subwf	ClearResSum@56,w
  4283  057B  1803               	btfsc	3,0
  4284  057C  0008               	return
  4285  057D  2D70               	goto	l2851
  4286  057E                     __end_of_ClearResSum:	
  4287  057E                     __ptext30:	
  4288 ;; *************** function _CheckOnceResult *****************
  4289 ;; Defined at:
  4290 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;		None
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  71              2   10[BANK0 ] unsigned int 
  4295 ;;  72              2    7[BANK0 ] unsigned int 
  4296 ;;  73              2    4[BANK0 ] unsigned int 
  4297 ;;  68              1   12[BANK0 ] unsigned char 
  4298 ;;  69              1    9[BANK0 ] unsigned char 
  4299 ;;  70              1    6[BANK0 ] unsigned char 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  1    wreg      void 
  4302 ;; Registers used:
  4303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4309 ;;      Params:         0       0       0       0
  4310 ;;      Locals:         0       9       0       0
  4311 ;;      Temps:          0       4       0       0
  4312 ;;      Totals:         0      13       0       0
  4313 ;;Total ram usage:       13 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    3
  4316 ;; This function calls:
  4317 ;;		_KeyClearOne
  4318 ;;		_KeyHave
  4319 ;;		_KeyIsIn
  4320 ;; This function is called by:
  4321 ;;		_CheckTouchKey
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           
  4326                           ;psect for function _CheckOnceResult
  4327  057E                     _CheckOnceResult:	
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4331  057E  1283               	bcf	3,5	;RP0=0, select bank0
  4332  057F  1303               	bcf	3,6	;RP1=0, select bank0
  4333  0580  01D8               	clrf	CheckOnceResult@68
  4334  0581  01A2               	clrf	_KeyData	;volatile
  4335  0582  01A3               	clrf	_KeyData+1	;volatile
  4336  0583  01B7               	clrf	_KeyMaxSub
  4337  0584                     l4339:	
  4338  0584  0858               	movf	CheckOnceResult@68,w
  4339  0585  3907               	andlw	7
  4340  0586  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4341  0587  0084               	movwf	4
  4342  0588  158A  2000  118A   	fcall	stringdir
  4343  058B  00D2               	movwf	CheckOnceResult@70
  4344  058C  1003               	clrc
  4345  058D  0D58               	rlf	CheckOnceResult@68,w
  4346  058E  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4347  058F  0084               	movwf	4
  4348  0590  3003               	movlw	3
  4349  0591                     u4205:	
  4350  0591  0A84               	incf	4,f
  4351  0592  1003               	clrc
  4352  0593  1383               	bcf	3,7	;select IRP bank1
  4353  0594  0C80               	rrf	0,f
  4354  0595  0384               	decf	4,f
  4355  0596  0C80               	rrf	0,f
  4356  0597  3EFF               	addlw	-1
  4357  0598  1D03               	skipz
  4358  0599  2D91               	goto	u4205
  4359  059A  1003               	clrc
  4360  059B  0D58               	rlf	CheckOnceResult@68,w
  4361  059C  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4362  059D  0084               	movwf	4
  4363  059E  0800               	movf	0,w
  4364  059F  00D6               	movwf	CheckOnceResult@71
  4365  05A0  0A84               	incf	4,f
  4366  05A1  0800               	movf	0,w
  4367  05A2  00D7               	movwf	CheckOnceResult@71+1
  4368  05A3  0858               	movf	CheckOnceResult@68,w
  4369  05A4  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4370  05A5  0084               	movwf	4
  4371  05A6  158A  2000  118A   	fcall	stringdir
  4372  05A9  00D5               	movwf	CheckOnceResult@69
  4373  05AA  00D3               	movwf	CheckOnceResult@72
  4374  05AB  01D4               	clrf	CheckOnceResult@72+1
  4375  05AC  0856               	movf	CheckOnceResult@71,w
  4376  05AD  07D3               	addwf	CheckOnceResult@72,f
  4377  05AE  1803               	skipnc
  4378  05AF  0AD4               	incf	CheckOnceResult@72+1,f
  4379  05B0  0857               	movf	CheckOnceResult@71+1,w
  4380  05B1  07D4               	addwf	CheckOnceResult@72+1,f
  4381  05B2  0858               	movf	CheckOnceResult@68,w
  4382  05B3  2664  118A         	fcall	_KeyIsIn
  4383  05B5  3A00               	xorlw	0
  4384  05B6  1D03               	skipz
  4385  05B7  2E15               	goto	l4381
  4386  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  4387  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  4388  05BA  1003               	clrc
  4389  05BB  0D58               	rlf	CheckOnceResult@68,w
  4390  05BC  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4391  05BD  0084               	movwf	4
  4392  05BE  1383               	bcf	3,7	;select IRP bank1
  4393  05BF  0800               	movf	0,w
  4394  05C0  00D0               	movwf	CheckOnceResult@73
  4395  05C1  0A84               	incf	4,f
  4396  05C2  0800               	movf	0,w
  4397  05C3  00D1               	movwf	CheckOnceResult@73+1
  4398  05C4  1003               	clrc
  4399  05C5  0D58               	rlf	CheckOnceResult@68,w
  4400  05C6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4401  05C7  2798  118A         	fcall	PL8	;call to abstracted procedure
  4402  05C9  0254               	subwf	CheckOnceResult@72+1,w
  4403  05CA  1D03               	skipz
  4404  05CB  2DCE               	goto	u4225
  4405  05CC  084C               	movf	??_CheckOnceResult,w
  4406  05CD  0253               	subwf	CheckOnceResult@72,w
  4407  05CE                     u4225:	
  4408  05CE  1803               	skipnc
  4409  05CF  2DDD               	goto	l4357
  4410  05D0  1003               	clrc
  4411  05D1  0D58               	rlf	CheckOnceResult@68,w
  4412  05D2  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4413  05D3  2798  118A         	fcall	PL8	;call to abstracted procedure
  4414  05D5  0856               	movf	CheckOnceResult@71,w
  4415  05D6  024C               	subwf	??_CheckOnceResult,w
  4416  05D7  00D6               	movwf	CheckOnceResult@71
  4417  05D8  0857               	movf	CheckOnceResult@71+1,w
  4418  05D9  1C03               	skipc
  4419  05DA  0A57               	incf	CheckOnceResult@71+1,w
  4420  05DB  024D               	subwf	??_CheckOnceResult+1,w
  4421  05DC  2E01               	goto	L10
  4422  05DD                     l4357:	
  4423  05DD  0851               	movf	CheckOnceResult@73+1,w
  4424  05DE  0254               	subwf	CheckOnceResult@72+1,w
  4425  05DF  1D03               	skipz
  4426  05E0  2DE3               	goto	u4235
  4427  05E1  0850               	movf	CheckOnceResult@73,w
  4428  05E2  0253               	subwf	CheckOnceResult@72,w
  4429  05E3                     u4235:	
  4430  05E3  1803               	skipnc
  4431  05E4  2E5C               	goto	l4403
  4432  05E5  1003               	clrc
  4433  05E6  0D58               	rlf	CheckOnceResult@68,w
  4434  05E7  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4435  05E8  2798  118A         	fcall	PL8	;call to abstracted procedure
  4436  05EA  0254               	subwf	CheckOnceResult@72+1,w
  4437  05EB  1D03               	skipz
  4438  05EC  2DEF               	goto	u4245
  4439  05ED  084C               	movf	??_CheckOnceResult,w
  4440  05EE  0253               	subwf	CheckOnceResult@72,w
  4441  05EF                     u4245:	
  4442  05EF  1803               	skipnc
  4443  05F0  2E5C               	goto	l4403
  4444  05F1  1003               	clrc
  4445  05F2  0D58               	rlf	CheckOnceResult@68,w
  4446  05F3  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4447  05F4  0084               	movwf	4
  4448  05F5  0850               	movf	CheckOnceResult@73,w
  4449  05F6  0080               	movwf	0
  4450  05F7  0A84               	incf	4,f
  4451  05F8  0851               	movf	CheckOnceResult@73+1,w
  4452  05F9  0080               	movwf	0
  4453  05FA  0856               	movf	CheckOnceResult@71,w
  4454  05FB  0250               	subwf	CheckOnceResult@73,w
  4455  05FC  00D6               	movwf	CheckOnceResult@71
  4456  05FD  0857               	movf	CheckOnceResult@71+1,w
  4457  05FE  1C03               	skipc
  4458  05FF  0A57               	incf	CheckOnceResult@71+1,w
  4459  0600  0251               	subwf	CheckOnceResult@73+1,w
  4460  0601                     L10:	
  4461  0601  00D7               	movwf	CheckOnceResult@71+1
  4462  0602  0858               	movf	CheckOnceResult@68,w
  4463  0603  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4464  0604  0084               	movwf	4
  4465  0605  0180               	clrf	0
  4466  0606  0857               	movf	CheckOnceResult@71+1,w
  4467  0607  1903               	btfsc	3,2
  4468  0608  2E0B               	goto	l4371
  4469  0609  30FF               	movlw	255
  4470  060A  2E0C               	goto	L11
  4471  060B                     l4371:	
  4472  060B  0856               	movf	CheckOnceResult@71,w
  4473  060C                     L11:	
  4474  060C  00D5               	movwf	CheckOnceResult@69
  4475  060D  0237               	subwf	_KeyMaxSub,w
  4476  060E  1803               	skipnc
  4477  060F  2E13               	goto	l4377
  4478  0610  0855               	movf	CheckOnceResult@69,w
  4479  0611  00B7               	movwf	_KeyMaxSub
  4480  0612  2E56               	goto	l4401
  4481  0613                     l4377:	
  4482  0613  0AB8               	incf	_KeyCounter,f
  4483  0614  2E5C               	goto	l4403
  4484  0615                     l4381:	
  4485  0615  1283               	bcf	3,5	;RP0=0, select bank0
  4486  0616  1303               	bcf	3,6	;RP1=0, select bank0
  4487  0617  1003               	clrc
  4488  0618  0D58               	rlf	CheckOnceResult@68,w
  4489  0619  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4490  061A  0084               	movwf	4
  4491  061B  1383               	bcf	3,7	;select IRP bank1
  4492  061C  0800               	movf	0,w
  4493  061D  00CC               	movwf	??_CheckOnceResult
  4494  061E  0A84               	incf	4,f
  4495  061F  0800               	movf	0,w
  4496  0620  00CD               	movwf	??_CheckOnceResult+1
  4497  0621  084C               	movf	??_CheckOnceResult,w
  4498  0622  3E01               	addlw	1
  4499  0623  00CE               	movwf	??_CheckOnceResult+2
  4500  0624  084D               	movf	??_CheckOnceResult+1,w
  4501  0625  1803               	skipnc
  4502  0626  3E01               	addlw	1
  4503  0627  00CF               	movwf	??_CheckOnceResult+3
  4504  0628  0854               	movf	CheckOnceResult@72+1,w
  4505  0629  024F               	subwf	??_CheckOnceResult+3,w
  4506  062A  1D03               	skipz
  4507  062B  2E2E               	goto	u4275
  4508  062C  0853               	movf	CheckOnceResult@72,w
  4509  062D  024E               	subwf	??_CheckOnceResult+2,w
  4510  062E                     u4275:	
  4511  062E  1C03               	btfss	3,0
  4512  062F  2E5C               	goto	l4403
  4513  0630  1003               	clrc
  4514  0631  0D58               	rlf	CheckOnceResult@68,w
  4515  0632  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4516  0633  0084               	movwf	4
  4517  0634  0800               	movf	0,w
  4518  0635  2786  118A         	fcall	PL4	;call to abstracted procedure
  4519  0637  1C03               	skipc
  4520  0638  2E42               	goto	l4391
  4521  0639  1003               	clrc
  4522  063A  0D58               	rlf	CheckOnceResult@68,w
  4523  063B  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4524  063C  0084               	movwf	4
  4525  063D  0800               	movf	0,w
  4526  063E  2786  118A         	fcall	PL4	;call to abstracted procedure
  4527  0640  1803               	skipnc
  4528  0641  2E4E               	goto	l4395
  4529  0642                     l4391:	
  4530  0642  0858               	movf	CheckOnceResult@68,w
  4531  0643  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4532  0644  0084               	movwf	4
  4533  0645  3009               	movlw	9
  4534  0646  0A80               	incf	0,f
  4535  0647  0200               	subwf	0,w
  4536  0648  1C03               	skipc
  4537  0649  2E52               	goto	l4399
  4538  064A  0858               	movf	CheckOnceResult@68,w
  4539  064B  2674  118A         	fcall	_KeyClearOne
  4540  064D  2E5C               	goto	l4403
  4541  064E                     l4395:	
  4542  064E  0858               	movf	CheckOnceResult@68,w
  4543  064F  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4544  0650  0084               	movwf	4
  4545  0651  0180               	clrf	0
  4546  0652                     l4399:	
  4547  0652  0823               	movf	_KeyData+1,w	;volatile
  4548  0653  0422               	iorwf	_KeyData,w	;volatile
  4549  0654  1D03               	btfss	3,2
  4550  0655  2E5C               	goto	l4403
  4551  0656                     l4401:	
  4552  0656  0852               	movf	CheckOnceResult@70,w
  4553  0657  00F2               	movwf	KeyHave@59
  4554  0658  01F3               	clrf	KeyHave@59+1
  4555  0659  0858               	movf	CheckOnceResult@68,w
  4556  065A  2689  118A         	fcall	_KeyHave
  4557  065C                     l4403:	
  4558  065C  3003               	movlw	3
  4559  065D  1283               	bcf	3,5	;RP0=0, select bank0
  4560  065E  1303               	bcf	3,6	;RP1=0, select bank0
  4561  065F  0AD8               	incf	CheckOnceResult@68,f
  4562  0660  0258               	subwf	CheckOnceResult@68,w
  4563  0661  1803               	btfsc	3,0
  4564  0662  0008               	return
  4565  0663  2D84               	goto	l4339
  4566  0664                     __end_of_CheckOnceResult:	
  4567  0664                     __ptext34:	
  4568 ;; *************** function _KeyIsIn *****************
  4569 ;; Defined at:
  4570 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  45              1    wreg     unsigned char 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  45              1    3[COMMON] unsigned char 
  4575 ;;  46              1    2[COMMON] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      unsigned char 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4585 ;;      Params:         0       0       0       0
  4586 ;;      Locals:         2       0       0       0
  4587 ;;      Temps:          0       0       0       0
  4588 ;;      Totals:         2       0       0       0
  4589 ;;Total ram usage:        2 bytes
  4590 ;; Hardware stack levels used:    2
  4591 ;; Hardware stack levels required when called:    1
  4592 ;; This function calls:
  4593 ;;		Nothing
  4594 ;; This function is called by:
  4595 ;;		_KeyClearIn
  4596 ;;		_CheckOnceResult
  4597 ;;		_CheckKeyOldValue
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _KeyIsIn
  4603  0664                     _KeyIsIn:	
  4604                           
  4605                           ;incstack = 0
  4606                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4607                           ;KeyIsIn@45 stored from wreg
  4608  0664  00F3               	movwf	KeyIsIn@45
  4609  0665  3907               	andlw	7
  4610  0666  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4611  0667  0084               	movwf	4
  4612  0668  158A  2000  118A   	fcall	stringdir
  4613  066B  00F2               	movwf	KeyIsIn@46
  4614  066C  1DF3               	btfss	KeyIsIn@45,3
  4615  066D  2E70               	goto	l2835
  4616  066E  087A               	movf	_KeyFlag+1,w	;volatile
  4617  066F  2E71               	goto	L15
  4618  0670                     l2835:	
  4619  0670  0879               	movf	_KeyFlag,w	;volatile
  4620  0671                     L15:	
  4621  0671  05F2               	andwf	KeyIsIn@46,f
  4622  0672  0872               	movf	KeyIsIn@46,w
  4623  0673  0008               	return
  4624  0674                     __end_of_KeyIsIn:	
  4625  0674                     __ptext32:	
  4626 ;; *************** function _KeyClearOne *****************
  4627 ;; Defined at:
  4628 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  49              1    wreg     unsigned char 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  49              1    2[COMMON] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4642 ;;      Params:         0       0       0       0
  4643 ;;      Locals:         1       0       0       0
  4644 ;;      Temps:          0       0       0       0
  4645 ;;      Totals:         1       0       0       0
  4646 ;;Total ram usage:        1 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    1
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_KeyClearIn
  4653 ;;		_KeyStopClear
  4654 ;;		_CheckOnceResult
  4655 ;;		_SystemEnterSleep
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _KeyClearOne
  4661  0674                     _KeyClearOne:	
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4665                           ;KeyClearOne@49 stored from wreg
  4666  0674  00F2               	movwf	KeyClearOne@49
  4667  0675  1003               	clrc
  4668  0676  0D72               	rlf	KeyClearOne@49,w
  4669  0677  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4670  0678  0084               	movwf	4
  4671  0679  1383               	bcf	3,7	;select IRP bank1
  4672  067A  27C4  118A         	fcall	PL20	;call to abstracted procedure
  4673  067C  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4674  067D  0084               	movwf	4
  4675  067E  27C4  118A         	fcall	PL20	;call to abstracted procedure
  4676  0680  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4677  0681  0084               	movwf	4
  4678  0682  27C4               	fcall	PL20	;call to abstracted procedure
  4679  0683  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4680  0684  0084               	movwf	4
  4681  0685  0180               	clrf	0
  4682  0686  0A84               	incf	4,f
  4683  0687  0180               	clrf	0	;# 
  4684  0688  0008               	return
  4685  0689                     __end_of_KeyClearOne:	
  4686  0689                     __ptext31:	
  4687 ;; *************** function _KeyHave *****************
  4688 ;; Defined at:
  4689 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  58              1    wreg     unsigned char 
  4692 ;;  59              2    2[COMMON] unsigned int 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  58              1    4[COMMON] unsigned char 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;                  1    wreg      void 
  4697 ;; Registers used:
  4698 ;;		wreg, status,2, status,0
  4699 ;; Tracked objects:
  4700 ;;		On entry : B00/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4704 ;;      Params:         2       0       0       0
  4705 ;;      Locals:         1       0       0       0
  4706 ;;      Temps:          0       0       0       0
  4707 ;;      Totals:         3       0       0       0
  4708 ;;Total ram usage:        3 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    1
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_CheckOnceResult
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function _KeyHave
  4720  0689                     _KeyHave:	
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4724                           ;KeyHave@58 stored from wreg
  4725  0689  00F4               	movwf	KeyHave@58
  4726  068A  1283               	bcf	3,5	;RP0=0, select bank0
  4727  068B  1303               	bcf	3,6	;RP1=0, select bank0
  4728  068C  0AB8               	incf	_KeyCounter,f
  4729  068D  01A2               	clrf	_KeyData	;volatile
  4730  068E  01A3               	clrf	_KeyData+1	;volatile
  4731  068F  1DF4               	btfss	KeyHave@58,3
  4732  0690  2E94               	goto	l2989
  4733  0691  0872               	movf	KeyHave@59,w
  4734  0692  00A3               	movwf	_KeyData+1	;volatile
  4735  0693  0008               	return
  4736  0694                     l2989:	
  4737  0694  0872               	movf	KeyHave@59,w
  4738  0695  00A2               	movwf	_KeyData	;volatile
  4739  0696  0008               	return
  4740  0697                     __end_of_KeyHave:	
  4741  0697                     __ptext33:	
  4742 ;; *************** function _CheckKeyOldValue *****************
  4743 ;; Defined at:
  4744 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;		None
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  80              2    2[BANK0 ] unsigned int 
  4749 ;;  79              2    0[BANK0 ] unsigned int 
  4750 ;;  78              1    4[BANK0 ] unsigned char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4760 ;;      Params:         0       0       0       0
  4761 ;;      Locals:         0       5       0       0
  4762 ;;      Temps:          2       0       0       0
  4763 ;;      Totals:         2       5       0       0
  4764 ;;Total ram usage:        7 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    3
  4767 ;; This function calls:
  4768 ;;		_KeyIsIn
  4769 ;; This function is called by:
  4770 ;;		_CheckTouchKey
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           
  4775                           ;psect for function _CheckKeyOldValue
  4776  0697                     _CheckKeyOldValue:	
  4777                           
  4778                           ;incstack = 0
  4779                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4780  0697  1283               	bcf	3,5	;RP0=0, select bank0
  4781  0698  3004               	movlw	4
  4782  0699  1303               	bcf	3,6	;RP1=0, select bank0
  4783  069A  01D0               	clrf	CheckKeyOldValue@78
  4784  069B  0AB6               	incf	CheckKeyOldValue@F77,f
  4785  069C  0236               	subwf	CheckKeyOldValue@F77,w
  4786  069D  1C03               	btfss	3,0
  4787  069E  0008               	return
  4788  069F  01B6               	clrf	CheckKeyOldValue@F77
  4789  06A0                     l3439:	
  4790  06A0  1003               	clrc
  4791  06A1  0D50               	rlf	CheckKeyOldValue@78,w
  4792  06A2  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4793  06A3  0084               	movwf	4
  4794  06A4  1383               	bcf	3,7	;select IRP bank1
  4795  06A5  0800               	movf	0,w
  4796  06A6  00CC               	movwf	CheckKeyOldValue@79
  4797  06A7  0A84               	incf	4,f
  4798  06A8  0800               	movf	0,w
  4799  06A9  00CD               	movwf	CheckKeyOldValue@79+1
  4800  06AA  0850               	movf	CheckKeyOldValue@78,w
  4801  06AB  2664  118A         	fcall	_KeyIsIn
  4802  06AD  3A00               	xorlw	0
  4803  06AE  1D03               	skipz
  4804  06AF  2EE6               	goto	l1281
  4805  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  4806  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  4807  06B2  1003               	clrc
  4808  06B3  0D50               	rlf	CheckKeyOldValue@78,w
  4809  06B4  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4810  06B5  0084               	movwf	4
  4811  06B6  1383               	bcf	3,7	;select IRP bank1
  4812  06B7  2778  118A         	fcall	PL2	;call to abstracted procedure
  4813  06B9  1903               	skipnz
  4814  06BA  024E               	subwf	CheckKeyOldValue@80,w
  4815  06BB  1C03               	skipc
  4816  06BC  2EC3               	goto	L12
  4817  06BD  0F4E               	incfsz	CheckKeyOldValue@80,w
  4818  06BE  2EE6               	goto	l1281
  4819  06BF  0A4F               	incf	CheckKeyOldValue@80+1,w
  4820  06C0  1D03               	btfss	3,2
  4821  06C1  2EE6               	goto	l1281
  4822  06C2  1003               	clrc
  4823  06C3                     L12:	
  4824  06C3  0D50               	rlf	CheckKeyOldValue@78,w
  4825  06C4  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4826  06C5  0084               	movwf	4
  4827  06C6  2778  118A         	fcall	PL2	;call to abstracted procedure
  4828  06C8  1903               	skipnz
  4829  06C9  024E               	subwf	CheckKeyOldValue@80,w
  4830  06CA  1C03               	skipc
  4831  06CB  2ED2               	goto	L13
  4832  06CC  0F4E               	incfsz	CheckKeyOldValue@80,w
  4833  06CD  2EE6               	goto	l1281
  4834  06CE  0A4F               	incf	CheckKeyOldValue@80+1,w
  4835  06CF  1D03               	btfss	3,2
  4836  06D0  2EE6               	goto	l1281
  4837  06D1  1003               	clrc
  4838  06D2                     L13:	
  4839  06D2  0D50               	rlf	CheckKeyOldValue@78,w
  4840  06D3  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4841  06D4  0084               	movwf	4
  4842  06D5  2778  118A         	fcall	PL2	;call to abstracted procedure
  4843  06D7  1903               	skipnz
  4844  06D8  024E               	subwf	CheckKeyOldValue@80,w
  4845  06D9  1C03               	skipc
  4846  06DA  2EE1               	goto	L14
  4847  06DB  0F4E               	incfsz	CheckKeyOldValue@80,w
  4848  06DC  2EE6               	goto	l1281
  4849  06DD  0A4F               	incf	CheckKeyOldValue@80+1,w
  4850  06DE  1D03               	btfss	3,2
  4851  06DF  2EE6               	goto	l1281
  4852  06E0  1003               	clrc
  4853  06E1                     L14:	
  4854  06E1  0D50               	rlf	CheckKeyOldValue@78,w
  4855  06E2  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4856  06E3  0084               	movwf	4
  4857  06E4  27D0  118A         	fcall	PL32	;call to abstracted procedure
  4858  06E6                     l1281:	
  4859  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  4860  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  4861  06E8  1003               	clrc
  4862  06E9  0D50               	rlf	CheckKeyOldValue@78,w
  4863  06EA  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4864  06EB  0084               	movwf	4
  4865  06EC  1383               	bcf	3,7	;select IRP bank1
  4866  06ED  27BC  118A         	fcall	PL18	;call to abstracted procedure
  4867  06EF  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4868  06F0  27AA  118A         	fcall	PL12	;call to abstracted procedure
  4869  06F2  27BC  118A         	fcall	PL18	;call to abstracted procedure
  4870  06F4  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4871  06F5  27AA  118A         	fcall	PL12	;call to abstracted procedure
  4872  06F7  27D0  118A         	fcall	PL32	;call to abstracted procedure
  4873  06F9  3003               	movlw	3
  4874  06FA  0AD0               	incf	CheckKeyOldValue@78,f
  4875  06FB  0250               	subwf	CheckKeyOldValue@78,w
  4876  06FC  1803               	btfsc	3,0
  4877  06FD  0008               	return
  4878  06FE  2EA0               	goto	l3439
  4879  06FF                     __end_of_CheckKeyOldValue:	
  4880  06FF                     __ptext26:	
  4881 ;; *************** function _KeyStopClear *****************
  4882 ;; Defined at:
  4883 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;		None
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  53              1    3[COMMON] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4897 ;;      Params:         0       0       0       0
  4898 ;;      Locals:         1       0       0       0
  4899 ;;      Temps:          0       0       0       0
  4900 ;;      Totals:         1       0       0       0
  4901 ;;Total ram usage:        1 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    2
  4904 ;; This function calls:
  4905 ;;		_KeyClearOne
  4906 ;; This function is called by:
  4907 ;;		_CheckTouchKey
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           
  4912                           ;psect for function _KeyStopClear
  4913  06FF                     _KeyStopClear:	
  4914                           
  4915                           ;incstack = 0
  4916                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4917  06FF  01F9               	clrf	_KeyFlag	;volatile
  4918  0700  01FA               	clrf	_KeyFlag+1	;volatile
  4919  0701  01F3               	clrf	KeyStopClear@53
  4920  0702                     l3351:	
  4921  0702  1003               	clrc
  4922  0703  0D73               	rlf	KeyStopClear@53,w
  4923  0704  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4924  0705  0084               	movwf	4
  4925  0706  1383               	bcf	3,7	;select IRP bank1
  4926  0707  0180               	clrf	0
  4927  0708  0A84               	incf	4,f
  4928  0709  0180               	clrf	0
  4929  070A  0873               	movf	KeyStopClear@53,w
  4930  070B  2674  118A         	fcall	_KeyClearOne
  4931  070D  3003               	movlw	3
  4932  070E  0AF3               	incf	KeyStopClear@53,f
  4933  070F  0273               	subwf	KeyStopClear@53,w
  4934  0710  1803               	btfsc	3,0
  4935  0711  0008               	return
  4936  0712  2F02               	goto	l3351
  4937  0713                     __end_of_KeyStopClear:	
  4938  0713                     __ptext24:	
  4939 ;; *************** function _TurnKeyFlags *****************
  4940 ;; Defined at:
  4941 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;		None
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;		None
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      void 
  4948 ;; Registers used:
  4949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4955 ;;      Params:         0       0       0       0
  4956 ;;      Locals:         0       0       0       0
  4957 ;;      Temps:          0       0       0       0
  4958 ;;      Totals:         0       0       0       0
  4959 ;;Total ram usage:        0 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    4
  4962 ;; This function calls:
  4963 ;;		_KeyClearIn
  4964 ;; This function is called by:
  4965 ;;		_CheckTouchKey
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _TurnKeyFlags
  4971  0713                     _TurnKeyFlags:	
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4975  0713  1283               	bcf	3,5	;RP0=0, select bank0
  4976  0714  1303               	bcf	3,6	;RP1=0, select bank0
  4977  0715  0823               	movf	_KeyData+1,w	;volatile
  4978  0716  0422               	iorwf	_KeyData,w	;volatile
  4979  0717  1903               	btfsc	3,2
  4980  0718  2F37               	goto	l3499
  4981  0719  01B4               	clrf	TurnKeyFlags@F84
  4982  071A  0822               	movf	_KeyData,w	;volatile
  4983  071B  0624               	xorwf	_KeyOldData,w	;volatile
  4984  071C  1D03               	skipz
  4985  071D  2F30               	goto	l1299
  4986  071E  0823               	movf	_KeyData+1,w	;volatile
  4987  071F  0625               	xorwf	_KeyOldData+1,w	;volatile
  4988  0720  1D03               	skipz
  4989  0721  2F30               	goto	l1299
  4990  0722  3002               	movlw	2
  4991  0723  0AB5               	incf	TurnKeyFlags@F83,f
  4992  0724  0235               	subwf	TurnKeyFlags@F83,w
  4993  0725  1C03               	skipc
  4994  0726  0008               	return
  4995  0727  01B5               	clrf	TurnKeyFlags@F83
  4996  0728  0822               	movf	_KeyData,w	;volatile
  4997  0729  00F9               	movwf	_KeyFlag	;volatile
  4998  072A  0823               	movf	_KeyData+1,w	;volatile
  4999  072B  00FA               	movwf	_KeyFlag+1	;volatile
  5000  072C  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5001  072D  0008               	return
  5002  072E  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5003  072F  2F5A               	ljmp	l2963
  5004  0730                     l1299:	
  5005  0730  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5006  0731  0822               	movf	_KeyData,w	;volatile
  5007  0732  00A4               	movwf	_KeyOldData	;volatile
  5008  0733  0823               	movf	_KeyData+1,w	;volatile
  5009  0734  00A5               	movwf	_KeyOldData+1	;volatile
  5010  0735  01B5               	clrf	TurnKeyFlags@F83
  5011  0736  0008               	return
  5012  0737                     l3499:	
  5013  0737  01B5               	clrf	TurnKeyFlags@F83
  5014  0738  01A4               	clrf	_KeyOldData	;volatile
  5015  0739  01A5               	clrf	_KeyOldData+1	;volatile
  5016  073A  3002               	movlw	2
  5017  073B  0AB4               	incf	TurnKeyFlags@F84,f
  5018  073C  0234               	subwf	TurnKeyFlags@F84,w
  5019  073D  1C03               	skipc
  5020  073E  0008               	return
  5021  073F  01B4               	clrf	TurnKeyFlags@F84
  5022  0740  01F9               	clrf	_KeyFlag	;volatile
  5023  0741  01FA               	clrf	_KeyFlag+1	;volatile
  5024  0742  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5025  0743  0008               	return
  5026  0744                     __end_of_TurnKeyFlags:	
  5027  0744                     __ptext29:	
  5028 ;; *************** function _CheckValidTime *****************
  5029 ;; Defined at:
  5030 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5044 ;;      Params:         0       0       0       0
  5045 ;;      Locals:         0       0       0       0
  5046 ;;      Temps:          0       0       0       0
  5047 ;;      Totals:         0       0       0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    1
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_CheckTouchKey
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _CheckValidTime
  5060  0744                     _CheckValidTime:	
  5061  0744                     l3509:	
  5062                           ;incstack = 0
  5063                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5064                           
  5065  0744  087A               	movf	_KeyFlag+1,w	;volatile
  5066  0745  0479               	iorwf	_KeyFlag,w	;volatile
  5067  0746  1903               	btfsc	3,2
  5068  0747  2F55               	goto	l3515
  5069  0748  1283               	bcf	3,5	;RP0=0, select bank0
  5070  0749  1303               	bcf	3,6	;RP1=0, select bank0
  5071  074A  0AA0               	incf	CheckValidTime@F87,f
  5072  074B  1903               	skipnz
  5073  074C  0AA1               	incf	CheckValidTime@F87+1,f
  5074  074D  303A               	movlw	58
  5075  074E  0221               	subwf	CheckValidTime@F87+1,w
  5076  074F  3098               	movlw	152
  5077  0750  1903               	skipnz
  5078  0751  0220               	subwf	CheckValidTime@F87,w
  5079  0752  1C03               	skipc
  5080  0753  0008               	return
  5081  0754  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5082  0755                     l3515:	
  5083  0755  1283               	bcf	3,5	;RP0=0, select bank0
  5084  0756  1303               	bcf	3,6	;RP1=0, select bank0
  5085  0757  01A0               	clrf	CheckValidTime@F87
  5086  0758  01A1               	clrf	CheckValidTime@F87+1
  5087  0759  0008               	return
  5088  075A                     __end_of_CheckValidTime:	
  5089  075A                     __ptext25:	
  5090 ;; *************** function _KeyClearIn *****************
  5091 ;; Defined at:
  5092 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  51              1    4[COMMON] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 300/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5106 ;;      Params:         0       0       0       0
  5107 ;;      Locals:         1       0       0       0
  5108 ;;      Temps:          0       0       0       0
  5109 ;;      Totals:         1       0       0       0
  5110 ;;Total ram usage:        1 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    3
  5113 ;; This function calls:
  5114 ;;		_KeyClearOne
  5115 ;;		_KeyIsIn
  5116 ;; This function is called by:
  5117 ;;		_TurnKeyFlags
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _KeyClearIn
  5123  075A                     _KeyClearIn:	
  5124  075A                     l2963:	
  5125                           ;incstack = 0
  5126                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5127                           
  5128  075A  01F4               	clrf	KeyClearIn@51
  5129  075B                     l2969:	
  5130  075B  0874               	movf	KeyClearIn@51,w
  5131  075C  2664  118A         	fcall	_KeyIsIn
  5132  075E  3A00               	xorlw	0
  5133  075F  1D03               	skipz
  5134  0760  2F64               	goto	l2973
  5135  0761  0874               	movf	KeyClearIn@51,w
  5136  0762  2674  118A         	fcall	_KeyClearOne
  5137  0764                     l2973:	
  5138  0764  3003               	movlw	3
  5139  0765  0AF4               	incf	KeyClearIn@51,f
  5140  0766  0274               	subwf	KeyClearIn@51,w
  5141  0767  1803               	btfsc	3,0
  5142  0768  0008               	return
  5143  0769  2F5B               	goto	l2969
  5144  076A                     __end_of_KeyClearIn:	
  5145  076A                     __ptext20:	
  5146 ;; *************** function _Refurbish_Sfr *****************
  5147 ;; Defined at:
  5148 ;;		line 93 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;		None
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  1    wreg      void 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 200/0
  5159 ;;		On exit  : 300/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5162 ;;      Params:         0       0       0       0
  5163 ;;      Locals:         0       0       0       0
  5164 ;;      Temps:          0       0       0       0
  5165 ;;      Totals:         0       0       0       0
  5166 ;;Total ram usage:        0 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    1
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		_WorkSleep
  5173 ;;		_main
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function _Refurbish_Sfr
  5179  076A                     _Refurbish_Sfr:	
  5180                           
  5181                           ;main.c: 96: PIE1 = 2;
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5185  076A  3002               	movlw	2
  5186  076B  1283               	bcf	3,5	;RP0=0, select bank0
  5187  076C  008E               	movwf	14	;volatile
  5188                           
  5189                           ;main.c: 97: PR2 = 250;
  5190  076D  30FA               	movlw	250
  5191  076E  0091               	movwf	17	;volatile
  5192                           
  5193                           ;main.c: 98: INTCON = 0XC0;
  5194  076F  30C0               	movlw	192
  5195  0770  008B               	movwf	11	;volatile
  5196                           
  5197                           ;main.c: 99: if (4 != T2CON)
  5198  0771  3004               	movlw	4
  5199  0772  0613               	xorwf	19,w	;volatile
  5200  0773  1903               	btfsc	3,2
  5201  0774  0008               	return
  5202                           
  5203                           ;main.c: 100: T2CON = 4;
  5204  0775  3004               	movlw	4
  5205  0776  0093               	movwf	19	;volatile
  5206  0777  0008               	return
  5207  0778                     __end_of_Refurbish_Sfr:	
  5208  0778                     PL2:	
  5209  0778  0800               	movf	0,w
  5210  0779  00CE               	movwf	CheckKeyOldValue@80
  5211  077A  0A84               	incf	4,f
  5212  077B  0800               	movf	0,w
  5213  077C  00CF               	movwf	CheckKeyOldValue@80+1
  5214  077D  084C               	movf	CheckKeyOldValue@79,w
  5215  077E  02CE               	subwf	CheckKeyOldValue@80,f
  5216  077F  084D               	movf	CheckKeyOldValue@79+1,w
  5217  0780  1C03               	skipc
  5218  0781  03CF               	decf	CheckKeyOldValue@80+1,f
  5219  0782  02CF               	subwf	CheckKeyOldValue@80+1,f
  5220  0783  3000               	movlw	0
  5221  0784  024F               	subwf	CheckKeyOldValue@80+1,w
  5222  0785  3402               	retlw	2
  5223  0786                     __end_ofPL2:	
  5224  0786                     PL4:	
  5225  0786  00CC               	movwf	??_CheckOnceResult
  5226  0787  0A84               	incf	4,f
  5227  0788  0800               	movf	0,w
  5228  0789  00CD               	movwf	??_CheckOnceResult+1
  5229  078A  0855               	movf	CheckOnceResult@69,w
  5230  078B  074C               	addwf	??_CheckOnceResult,w
  5231  078C  00CE               	movwf	??_CheckOnceResult+2
  5232  078D  084D               	movf	??_CheckOnceResult+1,w
  5233  078E  1803               	skipnc
  5234  078F  0A4D               	incf	??_CheckOnceResult+1,w
  5235  0790  00CF               	movwf	??_CheckOnceResult+3
  5236  0791  0857               	movf	CheckOnceResult@71+1,w
  5237  0792  024F               	subwf	??_CheckOnceResult+3,w
  5238  0793  1D03               	skipz
  5239  0794  0008               	return
  5240  0795  0856               	movf	CheckOnceResult@71,w
  5241  0796  024E               	subwf	??_CheckOnceResult+2,w
  5242  0797  0008               	return
  5243  0798                     __end_ofPL4:	
  5244  0798                     PL8:	
  5245  0798  0084               	movwf	4
  5246  0799  0800               	movf	0,w
  5247  079A  00CC               	movwf	??_CheckOnceResult
  5248  079B  0A84               	incf	4,f
  5249  079C  0800               	movf	0,w
  5250  079D  00CD               	movwf	??_CheckOnceResult+1
  5251  079E  0008               	return
  5252  079F                     __end_ofPL8:	
  5253  079F                     PL10:	
  5254  079F  0084               	movwf	4
  5255  07A0  084C               	movf	??_SystemEnterSleep,w
  5256  07A1  0080               	movwf	0
  5257  07A2  0A84               	incf	4,f
  5258  07A3  084D               	movf	??_SystemEnterSleep+1,w
  5259  07A4  0080               	movwf	0
  5260  07A5  1003               	clrc
  5261  07A6  0D54               	rlf	SystemEnterSleep@91,w
  5262  07A7  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5263  07A8  0084               	movwf	4
  5264  07A9  0008               	return
  5265  07AA                     __end_ofPL10:	
  5266  07AA                     PL12:	
  5267  07AA  0084               	movwf	4
  5268  07AB  0874               	movf	??_CheckKeyOldValue,w
  5269  07AC  0080               	movwf	0
  5270  07AD  0A84               	incf	4,f
  5271  07AE  0875               	movf	??_CheckKeyOldValue+1,w
  5272  07AF  0080               	movwf	0
  5273  07B0  1003               	clrc
  5274  07B1  0D50               	rlf	CheckKeyOldValue@78,w
  5275  07B2  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5276  07B3  0084               	movwf	4
  5277  07B4  0008               	return
  5278  07B5                     __end_ofPL12:	
  5279  07B5                     PL14:	
  5280  07B5  0084               	movwf	4
  5281  07B6  0800               	movf	0,w
  5282  07B7  00CC               	movwf	??_SystemEnterSleep
  5283  07B8  0A84               	incf	4,f
  5284  07B9  0800               	movf	0,w
  5285  07BA  00CD               	movwf	??_SystemEnterSleep+1
  5286  07BB  0008               	return
  5287  07BC                     __end_ofPL14:	
  5288  07BC                     PL18:	
  5289  07BC  0800               	movf	0,w
  5290  07BD  00F4               	movwf	??_CheckKeyOldValue
  5291  07BE  0A84               	incf	4,f
  5292  07BF  0800               	movf	0,w
  5293  07C0  00F5               	movwf	??_CheckKeyOldValue+1
  5294  07C1  1003               	clrc
  5295  07C2  0D50               	rlf	CheckKeyOldValue@78,w
  5296  07C3  0008               	return
  5297  07C4                     __end_ofPL18:	
  5298  07C4                     PL20:	
  5299  07C4  0180               	clrf	0
  5300  07C5  0A84               	incf	4,f
  5301  07C6  0180               	clrf	0
  5302  07C7  1003               	clrc
  5303  07C8  0D72               	rlf	KeyClearOne@49,w
  5304  07C9  0008               	return
  5305  07CA                     __end_ofPL20:	
  5306  07CA                     PL22:	
  5307  07CA  3041               	movlw	65
  5308  07CB  1683               	bsf	3,5	;RP0=1, select bank1
  5309  07CC  0095               	movwf	21	;volatile
  5310  07CD  1415               	bsf	21,0	;volatile
  5311  07CE  0196               	clrf	22	;volatile
  5312  07CF  0008               	return
  5313  07D0                     __end_ofPL22:	
  5314  07D0                     PL32:	
  5315  07D0  084C               	movf	CheckKeyOldValue@79,w
  5316  07D1  0080               	movwf	0
  5317  07D2  0A84               	incf	4,f
  5318  07D3  084D               	movf	CheckKeyOldValue@79+1,w
  5319  07D4  0080               	movwf	0
  5320  07D5  0008               	return
  5321  07D6                     __end_ofPL32:	
  5322  07D6                     PL34:	
  5323  07D6  01D4               	clrf	SystemEnterSleep@91
  5324  07D7  01D2               	clrf	SystemEnterSleep@92
  5325  07D8  0AD2               	incf	SystemEnterSleep@92,f
  5326  07D9  01D3               	clrf	SystemEnterSleep@92+1
  5327  07DA  0008               	return
  5328  07DB                     __end_ofPL34:	
  5329  07DB                     PL36:	
  5330  07DB  0DD2               	rlf	SystemEnterSleep@92,f
  5331  07DC  0DD3               	rlf	SystemEnterSleep@92+1,f
  5332  07DD  0AD4               	incf	SystemEnterSleep@91,f
  5333  07DE  0254               	subwf	SystemEnterSleep@91,w
  5334  07DF  0008               	return
  5335  07E0                     __end_ofPL36:	
  5336                           
  5337                           	psect	text35
  5338  0EBF                     __ptext35:	
  5339 ;; *************** function _Isr_Timer *****************
  5340 ;; Defined at:
  5341 ;;		line 189 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_\D108_8F083_tssop20_\main.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 300/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5355 ;;      Params:         0       0       0       0
  5356 ;;      Locals:         0       0       0       0
  5357 ;;      Temps:          2       0       0       0
  5358 ;;      Totals:         2       0       0       0
  5359 ;;Total ram usage:        2 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		Interrupt level 1
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function _Isr_Timer
  5370  0EBF                     _Isr_Timer:	
  5371                           
  5372                           ;main.c: 191: if(TMR2IF)
  5373  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  5374  0EC0  1303               	bcf	3,6	;RP1=0, select bank0
  5375  0EC1  1C8D               	btfss	13,1	;volatile
  5376  0EC2  2ED2               	goto	i1l3851
  5377                           
  5378                           ;main.c: 192: {
  5379                           ;main.c: 193: TMR2IF = 0;
  5380  0EC3  108D               	bcf	13,1	;volatile
  5381                           
  5382                           ;main.c: 194: if(++MainTime >= 32)
  5383  0EC4  3020               	movlw	32
  5384  0EC5  0AC9               	incf	_MainTime,f	;volatile
  5385  0EC6  0249               	subwf	_MainTime,w	;volatile
  5386  0EC7  1C03               	skipc
  5387  0EC8  2ED3               	goto	i1l964
  5388                           
  5389                           ;main.c: 195: {
  5390                           ;main.c: 196: MainTime = 0;
  5391  0EC9  01C9               	clrf	_MainTime	;volatile
  5392                           
  5393                           ;main.c: 197: B_MainLoop = 1;
  5394  0ECA  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5395                           
  5396                           ;main.c: 198: if(++count1s >= 250)
  5397  0ECB  30FA               	movlw	250
  5398  0ECC  0AC8               	incf	_count1s,f
  5399  0ECD  0248               	subwf	_count1s,w
  5400  0ECE  1C03               	skipc
  5401  0ECF  2ED3               	goto	i1l964
  5402                           
  5403                           ;main.c: 199: {
  5404                           ;main.c: 200: count1s = 0;
  5405  0ED0  01C8               	clrf	_count1s
  5406  0ED1  2ED3               	goto	i1l964
  5407  0ED2                     i1l3851:	
  5408                           
  5409                           ;main.c: 204: else
  5410                           ;main.c: 205: {
  5411                           ;main.c: 206: PIR1 = 0;
  5412  0ED2  018D               	clrf	13	;volatile
  5413  0ED3                     i1l964:	
  5414  0ED3  0871               	movf	??_Isr_Timer+1,w
  5415  0ED4  008A               	movwf	10
  5416  0ED5  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5417  0ED6  0083               	movwf	3
  5418  0ED7  0EFE               	swapf	126,f
  5419  0ED8  0E7E               	swapf	126,w
  5420  0ED9  0009               	retfie
  5421  0EDA                     __end_of_Isr_Timer:	
  5422  007E                     btemp	set	126	;btemp
  5423  007E                     wtemp0	set	126
  5424                           
  5425                           	psect	intentry
  5426  0004                     __pintentry:	
  5427                           ;incstack = 0
  5428                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5429                           
  5430  0004                     interrupt_function:	
  5431  007E                     saved_w	set	btemp
  5432  0004  00FE               	movwf	btemp
  5433  0005  0E03               	swapf	3,w
  5434  0006  00F0               	movwf	??_Isr_Timer
  5435  0007  080A               	movf	10,w
  5436  0008  00F1               	movwf	??_Isr_Timer+1
  5437  0009  158A  2EBF         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         82
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      39
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11909
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7906
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1286
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      27       6       48.8%
BANK2               50      0       0       7        0.0%
ABS                  0      0      82       8        0.0%
DATA                 0      0      82       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jan 14 15:41:43 2025

                        pc 0002                         PL2 0778                         PL4 0786  
                       PL6 03D8                         PL8 0798              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 079F                        PL20 07C4                        PL12 07AA  
                      PL30 0FFB                        PL22 07CA                        PL14 07B5  
                      PL40 0F70                        PL32 07D0                        PL24 03F0  
                      PL16 03E7                        PL42 03FC                        PL34 07D6  
                      PL26 0FEF                        PL18 07BC                        PL44 0401  
                      PL36 07DB                        PL28 0FF5                        PL38 03F7  
                      l980 01CE                        l990 0250                        l986 020A  
                      _RA5 0435                        _RA6 0436                        _RA7 0437  
                      _RB6 0036                        _RB7 0037                        _PR2 0011  
      __size_of_ADC_Sample 00D0                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0817                       S4685 0817  
                     S4687 0827         ??_GetTouchKeyValue 0073               ___ftdiv@cntr 005B  
             ___ftdiv@sign 0060                       l1003 0324                       l1015 0367  
                     l1009 0347                       l1240 0547                       l1080 0FB7  
                     l3001 0513                       l1081 0FBA                       l1330 047F  
                     l1082 0FC1                       l1083 0FC4                       l1084 0FC7  
                     l3005 0519                       l1085 0FCE                       l1077 0FB1  
                     l1318 0460                       l3031 0555                       l1079 0FB4  
                     l1360 02D5                       l1281 06E6                       l3033 0565  
                     l1505 0165                       l4001 03C3                       l4011 03D1  
                     l1517 0189                       l4017 039C                       l4201 0349  
                     l1299 0730                       l4051 0169                       l4061 0187  
                     l4053 016C                       l3351 0702                       l4127 04AC  
                     l4063 017E                       l4055 0171                       l1559 00AE  
                     l4303 0F90                       l4039 02EB                       l4207 0364  
                     l4401 0656                       l4153 04E0                       l4057 0179  
                     l4321 0FDD                       l4233 027C                       l4209 036A  
                     l4403 065C                       l3515 0755                       l4139 04B3  
                     l4307 0FA4                       l4323 0FE9                       l3509 0744  
                     l4157 04E7                       l4173 0508                       l4317 0FD1  
                     l4253 02BF                       l4245 02AC                       l4229 0276  
                     l3439 06A0                       l4431 00C1                       l4263 02CA  
                     l4255 02C0                       l4079 0384                       l4087 0397  
                     l4183 031E                       l4601 0478                       l4409 00A0  
                     l4265 02CB                       l4185 0321                       l2835 0670  
                     l4371 060B                       l4339 0584                       l2851 0570  
                     l4523 044F                       l4291 0F7D                       l4259 02C6  
                     l4195 0341                       l4283 03C1                       l4357 05DD  
                     l4381 0615                       l3645 0F26                       l4197 0344  
                     l4189 0326                       l4285 03C2                       l4277 03B6  
                     l4391 0642                       l4607 047E                       l3671 0F49  
                     l3655 0F35                       l4447 00FD                       l4295 0F81  
                     l4287 0F75                       l4551 006F                       l4615 0EE1  
                     l4377 0613                       l2849 056F                       l3649 0F2B  
                     l3657 0F37                       l4481 0144                       l4465 0120  
                     l4449 0102                       l4561 0083                       l4395 064E  
                     l2963 075A                       l3499 0737                       l3675 0F50  
                     l3667 0F42                       l3755 07F8                       l4475 012C  
                     l4299 0F88                       l4539 005A                       l2973 0764  
                     l3693 0F69                       l3677 0F52                       l3757 07FA  
                     l4477 0136                       l4469 0128                       l3941 01AE  
                     l4549 006E                       l4399 0652                       l4591 046F  
                     l3695 0F6B                       l4559 0082                       l2969 075B  
                     l3697 0F6E                       l4569 008B                       l3955 01B8  
                     l3939 01AC                       l2989 0694                       l3973 01F3  
                     l3965 01D8                       l3949 01B7                       l4599 0474  
                     l3977 01FE                       l3979 0206                       l3989 0254  
                     _ADON 04A8                       _CHS4 04B6                       u4035 02A0  
                     u4205 0591                       _PIE1 000E                       _PIE2 0110  
                     u4225 05CE                       u4235 05E3                       u4245 05EF  
                     u3615 025D                       u4185 0FA0                       u3545 01F9  
                     u4275 062E                       u4355 00CF                       u4195 0FAE  
                     u3555 0204                       _RAIF 006B                       _INTF 0059  
                     _RBIE 005B                       _RBIF 0058                       u3825 04DC  
                     u4385 0105                       u3595 0245                       u3755 038A  
                     _PIR1 000D                       _PIR2 010F                       u4687 01A8  
                     _TMR0 0081                       _WPUB 0008                       _main 0EDA  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       btemp 007E  
            ?_KeyStopClear 0070                       start 000B               _TurnKeyFlags 0713  
          __end_of_KeyIsIn 0674            __end_of_KeyHave 0697               ___fttol@exp1 006D  
            ??_Init_System 0072               ___fttol@lval 0069            TurnKeyFlags@F83 0035  
          TurnKeyFlags@F84 0034                      ?_main 0070            __end_of___ftdiv 00F4  
          __end_of___fttol 014D                      _T2CON 0013                      _IOCB5 004D  
 __end_of_SystemEnterSleep 050F            __end_of___lwmod 039C                      i1l964 0ED3  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 03A7                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 03AD            __end_of_chrgCtr 07FE        ___lmul@multiplicand 0050  
      __end_of_KeyClearOne 0689                 _KeyClearIn 075A             fanCtr@fan_temp 005A  
            ___ftpack@sign 0076             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 03D1                _ClearResSum 056F                 _KeyCounter 0038  
               _KeyOldData 0024            __end_of_pwmStop 03D8             ??_KeyStopClear 0073  
                    status 0003                      wtemp0 007E            __end_of_workCtr 0092  
               _KeyUpShake 00BE            __initialization 000D               __end_of_main 0F10  
                   ??_main 0078              ___fttol@sign1 0068        __end_of_Init_System 0423  
                   _ADCON0 0095                     _ADCON1 0096                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 019B                     _GODONE 04A9  
                   i1l3851 0ED2                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 015D         __size_of_KeyServer 0060                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD3L 009C                     _PWMD4L 001B  
             ??_ADC_Sample 0073                     _PWMT4L 001C                     _TRISB5 002D  
                   _TRISB6 002E                  ??_KeyIsIn 0072                  ??_KeyHave 0074  
            ClearResSum@56 0072         __size_of_Isr_Timer 001B           __end_of_bujinCtr 0FEF  
__size_of_CheckKeyOldValue 0068                     ___lmul 02D1                     _b_kclr 03C2  
                   _b_kerr 03C1                     _fanCtr 026B                  ??___ftdiv 0058  
                ??___fttol 0065                  ??___lwmod 0076                  ??_fanInit 0072  
                ??_fanStop 0072                _KeyClearOne 0674                  ??_chrgCtr 0072  
                   _result 00C1              _Table_KeyFalg 0806              _Table_KeyDown 080E  
       __end_of_ADC_Sample 026B                     saved_w 007E     __size_of_CheckTouchKey 002D  
                ??_pwmInit 0072                  ??_pwmStop 0072                ?_KeyClearIn 0070  
                ??_workCtr 0077            _CheckOnceResult 057E           __end_of_wuhuaCtr 03C3  
  __end_of__initialization 001D         __size_of_WorkSleep 002F          CheckOnceResult@70 0052  
        CheckOnceResult@71 0056          CheckOnceResult@72 0053          CheckOnceResult@73 0050  
        CheckOnceResult@68 0058          CheckOnceResult@69 0055                 ___ftdiv@f1 0055  
               ___ftdiv@f2 0052                 ___ftdiv@f3 005C                 ___fttol@f1 0061  
           __pcstackCOMMON 0070                _Init_System 0405                 __end_ofPL2 0786  
               __end_ofPL4 0798                 __end_ofPL6 03E7                 __end_ofPL8 079F  
        __end_of_KeyServer 0F70                 ___lwtoft@c 004F       __end_of_KeyStopClear 0713  
        __end_of_Isr_Timer 0EDA         __size_of_keyLedCtr 0074                 __pbssBANK0 0020  
               __pbssBANK1 00A0               _chrgFullFlag 0042  __size_of_GetTouchKeyValue 0060  
             _chrgFullTime 0041              _CheckTouchKey 0452                 __pmaintext 0EDA  
                  ?___lmul 004C                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0452                  ?___lwtoft 004F          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0664                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 004C                    _B_OnOff 03C5  
                  _PWMD23H 009E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D                  ?_bujinCtr 0070  
     __end_of_Table_KeyCap 0814                 __stringtab 0800               ?_ClearResSum 0070  
                  _KeyData 0022                    _KeyFlag 0079                    _KeyIsIn 0664  
                  _KeyHave 0689             ?_CheckTouchKey 0070            ADC_Sample@adldo 0072  
          ADC_Sample@admax 0055            ADC_Sample@admin 0053            ADC_Sample@adsum 004F  
         _CheckKeyOldValue 0697            __size_of___lmul 0033                    ___ftdiv 0092  
          __size_of_fanCtr 0066                    ___fttol 00F4                    ___lwmod 0378  
        __end_of_keyLedCtr 0378                    _b_kover 03C4                    _fanInit 039C  
                  _fanDuty 0046                    _fanStop 03A7                 ??___ftpack 004C  
                  _chrgCtr 07E0                    __ptext1 0020                    __ptext2 03AD  
                  __ptext3 03D1                    __ptext4 03C3                    __ptext5 0304  
                  __ptext6 0378                    __ptext7 026B                    __ptext8 03A7  
                  __ptext9 039C                 _lowBatLock 003F                 _lowBatTime 003E  
                ?_wuhuaCtr 0070                 ??___lwtoft 0077                    _count1s 0048  
               _lowFanTime 003D                    _pwmInit 03C3                    _pwmStop 03D1  
  __size_of_CheckValidTime 0016                    clrloop0 0EB8                    _workCtr 0020  
               ??_bujinCtr 0072       end_of_initialization 001D              _Refurbish_Sfr 076A  
             _KeyOldValue0 00B2               _KeyOldValue1 00AC               _KeyOldValue2 00A6  
    __size_of_KeyStopClear 0014         SystemEnterSleep@91 0054         SystemEnterSleep@92 0052  
       SystemEnterSleep@93 0050         SystemEnterSleep@94 004E               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0072          CheckValidTime@F87 0020  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 005F            ??_CheckTouchKey 0078               _KeyStopClear 06FF  
         _GetTouchKeyValue 050F             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 0304             __end_of_fanCtr 02D1         __end_of_KeyClearIn 076A  
            WorkSleep@time 0039                  _KeyMaxSub 0037                  _KeyResSum 00B8  
              __end_ofPL10 07AA                __end_ofPL20 07CA                __end_ofPL12 07B5  
              __end_ofPL30 1000                __end_ofPL22 07D0                __end_ofPL14 07BC  
              __end_ofPL40 0F75                __end_ofPL32 07D6                __end_ofPL24 03F7  
              __end_ofPL16 03F0                __end_ofPL42 0401                __end_ofPL34 07DB  
              __end_ofPL26 0FF5                __end_ofPL18 07C4                __end_ofPL44 0405  
              __end_ofPL36 07E0                __end_ofPL28 0FFB                __end_ofPL38 03FC  
      start_initialization 000D                  _KeyServer 0F10                  _Isr_Timer 0EBF  
             _maxMotorStep 0028          workCtr@power_temp 00C3       __size_of_ClearResSum 000F  
            ?_TurnKeyFlags 0070                   ??___lmul 0072                   ??_fanCtr 0077  
        ADC_Sample@ad_temp 0057               _Table_KeyCap 0811          __size_of___ftpack 003E  
              __pbssCOMMON 0079                _fanOverTime 0044                 ?_KeyServer 0070  
                ___latbits 0001          __size_of___lwtoft 0010              __pcstackBANK0 004C  
            __pcstackBANK1 00C3                  _WorkSleep 0423             _CheckValidTime 0744  
 __end_of_CheckKeyOldValue 06FF                 ?_Isr_Timer 0070        KeyServer@KeyOldFlag 003A  
        __size_of_bujinCtr 007A                   ?_KeyIsIn 0070                   ?_KeyHave 0072  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075  
                __pnvBANK0 006E                   ?___ftdiv 0052                   ?___fttol 0061  
                 ?___lwmod 0072                   ?_fanInit 0070                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 0030              _shanshuoTime3 002E  
                __pstrings 0800                  __pswtext1 0817                  __pswtext2 0827  
                _bujinFlag 003C       __size_of_KeyClearOne 0015                  _keyLedCtr 0304  
                _firstLock 0040     __end_of_CheckValidTime 075A                  _firstTime 006E  
        __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070             ADC_Sample@adch 004D  
                 ?_pwmInit 0070                   ?_pwmStop 0070                   ?_workCtr 0070  
              ADC_Sample@i 004E                ADC_Sample@j 004C                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 0EB7  
           KeyStopClear@53 0073                  _motorStep 002A        CheckKeyOldValue@F77 0036  
              __stringbase 0805       __size_of_Init_System 001E      __end_of_Table_KeyFalg 080E  
    __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 056F  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004C  
                _wuhuaFlag 0047                ??_Isr_Timer 0070                   _MainTime 0049  
               _ADC_Sample 019B           __size_of_KeyIsIn 0010           __size_of_KeyHave 000E  
         _Table_KeyChannel 0814           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwmod 0024                   ___ftpack 015D           __size_of_fanInit 000B  
       __end_of__stringtab 0806           __size_of_fanStop 0006           __size_of_chrgCtr 001E  
                 ___lwtoft 014D                   _b_kover1 03C3                   _b_ksleep 03C0  
     __end_of_TurnKeyFlags 0744                   _fanValue 002C                   _adresult 004A  
                 _chrgFlag 0043                ??_WorkSleep 0078                   __ptext10 02D1  
                 __ptext11 019B                   __ptext20 076A                   __ptext12 0F75  
                 __ptext21 0F10                   __ptext13 014D                   __ptext30 057E  
                 __ptext22 0405                   __ptext14 00F4                   __ptext31 0689  
                 __ptext23 0452                   __ptext15 0092                   __ptext32 0674  
                 __ptext24 0713                   __ptext16 015D                   __ptext33 0697  
                 __ptext25 075A                   __ptext17 07E0                   __ptext34 0664  
                 __ptext26 06FF                   __ptext18 0423                   __ptext35 0EBF  
                 __ptext27 050F                   __ptext19 047F                   __ptext28 056F  
                 __ptext29 0744           __size_of_pwmInit 000E           __size_of_pwmStop 0007  
             _shanshuoTime 0032                   _bujinCtr 0F75                   _count10s 0045  
         __size_of_workCtr 0072   __size_of_CheckOnceResult 00E6         GetTouchKeyValue@62 0077  
       GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073              __size_of_main 0036  
         _SystemEnterSleep 047F           bujinCtr@tempStep 0074      __end_of_CheckTouchKey 047F  
       CheckKeyOldValue@80 004E         CheckKeyOldValue@78 0050         CheckKeyOldValue@79 004C  
                 _test_adc 003B                   _power_ad 0026                   _workStep 007B  
                 _wuhuaCtr 03AD                ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070  
                 intlevel1 0000              ??_ClearResSum 0072         ??_CheckKeyOldValue 0074  
         ___lwmod@dividend 0074                ?_ADC_Sample 0072                  stringcode 0800  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0059                 _OPTION_REG 0001  
          ___lwmod@divisor 0072            ___lwmod@counter 0076                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0072               KeyClearIn@51 0074  
    __end_of_Refurbish_Sfr 0778        __end_of_ClearResSum 057E          ??_CheckOnceResult 004C  
