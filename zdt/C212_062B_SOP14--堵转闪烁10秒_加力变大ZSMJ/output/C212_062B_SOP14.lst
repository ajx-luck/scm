

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 08 15:11:58 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvBANK0
    73  006A                     __pnvBANK0:	
    74  006A                     _firstTime:	
    75  006A                     	ds	1
    76  001F                     _PWM01DT	set	31
    77  001E                     _PWMD01H	set	30
    78  001D                     _PWMCON2	set	29
    79  001A                     _PWMD1L	set	26
    80  0019                     _PWMD0L	set	25
    81  0018                     _PWMTH	set	24
    82  0017                     _PWMTL	set	23
    83  0016                     _PWMCON1	set	22
    84  0015                     _PWMCON0	set	21
    85  0014                     _OSCCON	set	20
    86  0013                     _T2CON	set	19
    87  0011                     _PR2	set	17
    88  000E                     _PIE1	set	14
    89  000D                     _PIR1	set	13
    90  000B                     _INTCON	set	11
    91  0009                     _IOCB	set	9
    92  0008                     _WPUB	set	8
    93  0006                     _PORTB	set	6
    94  0005                     _TRISB	set	5
    95  0001                     _OPTION_REG	set	1
    96  0071                     _TMR2IE	set	113
    97  0073                     _RAIE	set	115
    98  0069                     _TMR2IF	set	105
    99  006B                     _RAIF	set	107
   100  0058                     _RBIF	set	88
   101  005B                     _RBIE	set	91
   102  005E                     _PEIE	set	94
   103  005F                     _GIE	set	95
   104  0030                     _RB0	set	48
   105  0031                     _RB1	set	49
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0093                     _ANSEL0	set	147
   111  0089                     _IOCA	set	137
   112  0088                     _WPUA	set	136
   113  0087                     _WPDA	set	135
   114  0086                     _PORTA	set	134
   115  0085                     _TRISA	set	133
   116  04B2                     _LDO_EN	set	1202
   117  04B6                     _CHS4	set	1206
   118  04A9                     _GODONE	set	1193
   119                           
   120                           	psect	cinit
   121  000D                     start_initialization:	
   122                           ; #config settings
   123                           
   124  000D                     __initialization:	
   125                           
   126                           ; Clear objects allocated to COMMON
   127  000D  3077               	movlw	low __pbssCOMMON
   128  000E  0084               	movwf	4
   129  000F  307B               	movlw	low (__pbssCOMMON+4)
   130  0010  25B2               	fcall	clear_ram0
   131  0011  3020               	movlw	low __pbssBANK0
   132                           
   133                           ; Clear objects allocated to BANK0
   134  0012  1383               	bcf	3,7	;select IRP bank0
   135  0013  0084               	movwf	4
   136  0014  3057               	movlw	low (__pbssBANK0+55)
   137  0015  25B2               	fcall	clear_ram0
   138  0016                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0016                     __end_of__initialization:	
   142  0016  0183               	clrf	3
   143  0017  2C47               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0077                     __pbssCOMMON:	
   147  0077                     _prePwStep:	
   148  0077                     	ds	1
   149  0078                     _ledStep:	
   150  0078                     	ds	1
   151  0079                     _workStep:	
   152  0079                     	ds	1
   153  007A                     _chrgFlag:	
   154  007A                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     _count900s:	
   159  0020                     	ds	2
   160  0022                     _count8s:	
   161  0022                     	ds	2
   162  0024                     _overWorkTime:	
   163  0024                     	ds	2
   164  0026                     _count5s:	
   165  0026                     	ds	2
   166  0028                     _fullCount:	
   167  0028                     	ds	2
   168  002A                     _count50s:	
   169  002A                     	ds	2
   170  002C                     _batADValue:	
   171  002C                     	ds	2
   172  002E                     _outADValue:	
   173  002E                     	ds	2
   174  0030                     _power_ad:	
   175  0030                     	ds	2
   176  0032                     _result:	
   177  0032                     	ds	2
   178  0034                     _adresult:	
   179  0034                     	ds	2
   180  0036                     _sleepTime:	
   181  0036                     	ds	1
   182  0037                     _lowBatFlag:	
   183  0037                     	ds	1
   184  0038                     _preLedStep:	
   185  0038                     	ds	1
   186  0039                     _ledCntTime:	
   187  0039                     	ds	1
   188  003A                     _chrgMaxDuty:	
   189  003A                     	ds	1
   190  003B                     _chrgWaitTime:	
   191  003B                     	ds	1
   192  003C                     _subTime:	
   193  003C                     	ds	1
   194  003D                     _addTime:	
   195  003D                     	ds	1
   196  003E                     _lockCount:	
   197  003E                     	ds	1
   198  003F                     _chrgMaxAD:	
   199  003F                     	ds	1
   200  0040                     _chrgMode:	
   201  0040                     	ds	1
   202  0041                     _showBatTime:	
   203  0041                     	ds	1
   204  0042                     _lockLedStep:	
   205  0042                     	ds	1
   206  0043                     _reChrgCount:	
   207  0043                     	ds	1
   208  0044                     _pwStep:	
   209  0044                     	ds	1
   210  0045                     _overChrgTime:	
   211  0045                     	ds	1
   212  0046                     _startTime:	
   213  0046                     	ds	1
   214  0047                     _tempDuty:	
   215  0047                     	ds	1
   216  0048                     _addPowerCount:	
   217  0048                     	ds	1
   218  0049                     _overCount:	
   219  0049                     	ds	1
   220  004A                     _maxDuty:	
   221  004A                     	ds	1
   222  004B                     _longPressFlag:	
   223  004B                     	ds	1
   224  004C                     _keyCount:	
   225  004C                     	ds	1
   226  004D                     _ledCnt:	
   227  004D                     	ds	1
   228  004E                     _workOverOutTime:	
   229  004E                     	ds	1
   230  004F                     _protectFlag:	
   231  004F                     	ds	1
   232  0050                     _countHalfFull:	
   233  0050                     	ds	1
   234  0051                     _intCount10:	
   235  0051                     	ds	1
   236  0052                     _chrgFullFlag:	
   237  0052                     	ds	1
   238  0053                     _IntFlag:	
   239  0053                     	ds	1
   240  0054                     _count1s:	
   241  0054                     	ds	1
   242  0055                     _intCount:	
   243  0055                     	ds	1
   244  0056                     _test_adc:	
   245  0056                     	ds	1
   246                           
   247                           	psect	clrtext
   248  05B2                     clear_ram0:	
   249                           ;	Called with FSR containing the base address, and
   250                           ;	W with the last address+1
   251                           
   252  05B2  0064               	clrwdt	;clear the watchdog before getting into this loop
   253  05B3                     clrloop0:	
   254  05B3  0180               	clrf	0	;clear RAM location pointed to by FSR
   255  05B4  0A84               	incf	4,f	;increment pointer
   256  05B5  0604               	xorwf	4,w	;XOR with final address
   257  05B6  1903               	btfsc	3,2	;have we reached the end yet?
   258  05B7  3400               	retlw	0	;all done for this memory range, return
   259  05B8  0604               	xorwf	4,w	;XOR again to restore value
   260  05B9  2DB3               	goto	clrloop0	;do the next byte
   261                           
   262                           	psect	cstackCOMMON
   263  0070                     __pcstackCOMMON:	
   264  0070                     ?_ledShow:	
   265  0070                     ??_ledShow:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Init_System:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_AD_Init:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_checkOutA:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_chrgCtr:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_checkBatAD:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_keyCtr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_workCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_ledCtr:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_Sleep_Mode:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_chrgPwmStop:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_chrgPwmInit:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_pwmInit:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_pwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Isr_Timer:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_Isr_Timer:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_keyRead:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	3
   322  0073                     ??_Init_System:	
   323  0073                     ??_AD_Init:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ??_workCtr:	
   327                           ; 1 bytes @ 0x3
   328                           
   329  0073                     ??_Sleep_Mode:	
   330                           ; 1 bytes @ 0x3
   331                           
   332  0073                     ??_chrgPwmStop:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_chrgPwmInit:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_pwmInit:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_pwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ?_ADC_Sample:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_keyRead:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ?___lbdiv:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?___lbmod:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ?___lwmod:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     keyRead@keyStatus:	
   360                           ; 2 bytes @ 0x3
   361                           
   362  0073                     ADC_Sample@adldo:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ___lbdiv@divisor:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ___lbmod@divisor:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ___lwmod@divisor:	
   372                           ; 1 bytes @ 0x3
   373                           
   374                           
   375                           ; 2 bytes @ 0x3
   376  0073                     	ds	1
   377  0074                     ??_checkOutA:	
   378  0074                     ??_checkBatAD:	
   379                           ; 1 bytes @ 0x4
   380                           
   381  0074                     ??_keyCtr:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ??___lbdiv:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0074                     ??___lbmod:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     keyCtr@kclick:	
   391                           ; 1 bytes @ 0x4
   392                           
   393  0074                     ___lbdiv@dividend:	
   394                           ; 1 bytes @ 0x4
   395                           
   396                           
   397                           ; 1 bytes @ 0x4
   398  0074                     	ds	1
   399  0075                     ___lbdiv@counter:	
   400  0075                     ___lwmod@dividend:	
   401                           ; 1 bytes @ 0x5
   402                           
   403                           
   404                           ; 2 bytes @ 0x5
   405  0075                     	ds	1
   406  0076                     ___lbdiv@quotient:	
   407                           
   408                           ; 1 bytes @ 0x6
   409  0076                     	ds	1
   410  0077                     ??_ledCtr:	
   411  0077                     ??_main:	
   412                           ; 1 bytes @ 0x7
   413                           
   414  0077                     ??___lwmod:	
   415                           ; 1 bytes @ 0x7
   416                           
   417                           
   418                           	psect	cstackBANK0
   419  0057                     __pcstackBANK0:	
   420                           ; 1 bytes @ 0x7
   421                           
   422  0057                     ??_chrgCtr:	
   423  0057                     ??_ADC_Sample:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0057                     ___lbmod@dividend:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0057                     ___lwmod@counter:	
   430                           ; 1 bytes @ 0x0
   431                           
   432                           
   433                           ; 1 bytes @ 0x0
   434  0057                     	ds	1
   435  0058                     ___lbmod@counter:	
   436                           
   437                           ; 1 bytes @ 0x1
   438  0058                     	ds	1
   439  0059                     ___lbmod@rem:	
   440                           
   441                           ; 1 bytes @ 0x2
   442  0059                     	ds	2
   443  005B                     ADC_Sample@j:	
   444                           
   445                           ; 1 bytes @ 0x4
   446  005B                     	ds	1
   447  005C                     ADC_Sample@adch:	
   448                           
   449                           ; 1 bytes @ 0x5
   450  005C                     	ds	1
   451  005D                     ADC_Sample@i:	
   452                           
   453                           ; 1 bytes @ 0x6
   454  005D                     	ds	1
   455  005E                     ADC_Sample@adsum:	
   456                           
   457                           ; 4 bytes @ 0x7
   458  005E                     	ds	4
   459  0062                     ADC_Sample@admin:	
   460                           
   461                           ; 2 bytes @ 0xB
   462  0062                     	ds	2
   463  0064                     ADC_Sample@admax:	
   464                           
   465                           ; 2 bytes @ 0xD
   466  0064                     	ds	2
   467  0066                     ADC_Sample@ad_temp:	
   468                           
   469                           ; 2 bytes @ 0xF
   470  0066                     	ds	3
   471  0069                     checkOutA@maxAout:	
   472                           
   473                           ; 1 bytes @ 0x12
   474  0069                     	ds	1
   475                           
   476                           	psect	maintext
   477  0447                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 100/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1
   497 ;;      Params:         0       0       0
   498 ;;      Locals:         0       0       0
   499 ;;      Temps:          0       0       0
   500 ;;      Totals:         0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels required when called:    4
   503 ;; This function calls:
   504 ;;		_AD_Init
   505 ;;		_Init_System
   506 ;;		_Sleep_Mode
   507 ;;		_checkBatAD
   508 ;;		_checkOutA
   509 ;;		_chrgCtr
   510 ;;		_keyCtr
   511 ;;		_ledCtr
   512 ;;		_workCtr
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           
   519                           ;psect for function _main
   520  0447                     _main:	
   521                           
   522                           ;main.c: 126: Init_System();
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   526  0447  2511               	fcall	_Init_System
   527                           
   528                           ;main.c: 127: AD_Init();
   529  0448  25C2               	fcall	_AD_Init
   530                           
   531                           ;main.c: 128: firstTime = 100;
   532  0449  3064               	movlw	100
   533  044A  1283               	bcf	3,5	;RP0=0, select bank0
   534  044B  00EA               	movwf	_firstTime
   535  044C                     l661:	
   536                           ;main.c: 129: while (1)
   537                           
   538  044C  0064               	clrwdt	;# 
   539                           
   540                           ;main.c: 132: if(intCount10 > 10)
   541  044D  300B               	movlw	11
   542  044E  1283               	bcf	3,5	;RP0=0, select bank0
   543  044F  0251               	subwf	_intCount10,w
   544  0450  1C03               	skipc
   545  0451  2C54               	goto	l3487
   546                           
   547                           ;main.c: 133: {
   548                           ;main.c: 134: intCount10 = 0;
   549  0452  01D1               	clrf	_intCount10
   550                           
   551                           ;main.c: 135: checkOutA();
   552  0453  22B0               	fcall	_checkOutA
   553  0454                     l3487:	
   554                           
   555                           ;main.c: 136: }
   556                           ;main.c: 137: if(!IntFlag)
   557  0454  1283               	bcf	3,5	;RP0=0, select bank0
   558  0455  0853               	movf	_IntFlag,w
   559  0456  1903               	btfsc	3,2
   560  0457  2C4C               	goto	l661
   561                           
   562                           ;main.c: 139: IntFlag = 0;
   563  0458  01D3               	clrf	_IntFlag
   564                           
   565                           ;main.c: 140: chrgCtr();
   566  0459  2018               	fcall	_chrgCtr
   567                           
   568                           ;main.c: 141: checkBatAD();
   569  045A  2205               	fcall	_checkBatAD
   570                           
   571                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   572  045B  087A               	movf	_chrgFlag,w
   573  045C  1D03               	btfss	3,2
   574  045D  2C63               	goto	l665
   575  045E  1283               	bcf	3,5	;RP0=0, select bank0
   576  045F  0837               	movf	_lowBatFlag,w
   577  0460  1D03               	btfss	3,2
   578  0461  2C63               	goto	l665
   579                           
   580                           ;main.c: 143: {
   581                           ;main.c: 144: keyCtr();
   582  0462  24BC               	fcall	_keyCtr
   583  0463                     l665:	
   584                           
   585                           ;main.c: 145: }
   586                           ;main.c: 146: workCtr();
   587  0463  2482               	fcall	_workCtr
   588                           
   589                           ;main.c: 147: ledCtr();
   590  0464  2358               	fcall	_ledCtr
   591                           
   592                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   593  0465  087A               	movf	_chrgFlag,w
   594  0466  1D03               	btfss	3,2
   595  0467  2C80               	goto	l3521
   596  0468  0879               	movf	_workStep,w
   597  0469  1D03               	btfss	3,2
   598  046A  2C80               	goto	l3521
   599  046B  084C               	movf	_keyCount,w
   600  046C  1D03               	btfss	3,2
   601  046D  2C80               	goto	l3521
   602  046E  086A               	movf	_firstTime,w
   603  046F  1D03               	btfss	3,2
   604  0470  2C80               	goto	l3521
   605  0471  0841               	movf	_showBatTime,w
   606  0472  1D03               	btfss	3,2
   607  0473  2C80               	goto	l3521
   608  0474  0824               	movf	_overWorkTime,w
   609  0475  0425               	iorwf	_overWorkTime+1,w
   610  0476  1D03               	btfss	3,2
   611  0477  2C80               	goto	l3521
   612                           
   613                           ;main.c: 149: {
   614                           ;main.c: 150: if(++sleepTime >= 200)
   615  0478  30C8               	movlw	200
   616  0479  0AB6               	incf	_sleepTime,f
   617  047A  0236               	subwf	_sleepTime,w
   618  047B  1C03               	skipc
   619  047C  2C4C               	goto	l661
   620                           
   621                           ;main.c: 151: {
   622                           ;main.c: 152: sleepTime = 0;
   623  047D  01B6               	clrf	_sleepTime
   624                           
   625                           ;main.c: 153: Sleep_Mode();
   626  047E  2409               	fcall	_Sleep_Mode
   627  047F  2C4C               	goto	l661
   628  0480                     l3521:	
   629                           
   630                           ;main.c: 156: else
   631                           ;main.c: 157: {
   632                           ;main.c: 158: sleepTime = 0;
   633  0480  01B6               	clrf	_sleepTime
   634  0481  2C4C               	goto	l661
   635  0482                     __end_of_main:	
   636                           
   637                           	psect	text1
   638  0482                     __ptext1:	
   639 ;; *************** function _workCtr *****************
   640 ;; Defined at:
   641 ;;		line 539 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 100/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1
   655 ;;      Params:         0       0       0
   656 ;;      Locals:         0       0       0
   657 ;;      Temps:          0       0       0
   658 ;;      Totals:         0       0       0
   659 ;;Total ram usage:        0 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    3
   662 ;; This function calls:
   663 ;;		_pwmInit
   664 ;;		_pwmStop
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _workCtr
   672  0482                     _workCtr:	
   673                           
   674                           ;main.c: 542: if(startTime > 0)
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   678  0482  1283               	bcf	3,5	;RP0=0, select bank0
   679  0483  0846               	movf	_startTime,w
   680  0484  1D03               	btfss	3,2
   681                           
   682                           ;main.c: 543: {
   683                           ;main.c: 544: startTime--;
   684  0485  03C6               	decf	_startTime,f
   685                           
   686                           ;main.c: 545: }
   687                           ;main.c: 546: if(workStep > 0)
   688  0486  0879               	movf	_workStep,w
   689  0487  1903               	btfsc	3,2
   690  0488  2CB8               	goto	l2797
   691                           
   692                           ;main.c: 547: {
   693                           ;main.c: 548: if((PWMCON0 & 0x02) == 0)
   694  0489  1895               	btfsc	21,1	;volatile
   695  048A  2C8C               	goto	l2777
   696                           
   697                           ;main.c: 549: {
   698                           ;main.c: 550: pwmInit();
   699  048B  25BA               	fcall	_pwmInit
   700  048C                     l2777:	
   701                           
   702                           ;main.c: 551: }
   703                           ;main.c: 552: maxDuty = 43 + (workStep*2);
   704  048C  1003               	clrc
   705  048D  0D79               	rlf	_workStep,w
   706  048E  3E2B               	addlw	43
   707  048F  00CA               	movwf	_maxDuty
   708                           
   709                           ;main.c: 553: if(overCount >= 5)
   710  0490  3005               	movlw	5
   711  0491  0249               	subwf	_overCount,w
   712  0492  1C03               	skipc
   713  0493  2CA8               	goto	l2789
   714                           
   715                           ;main.c: 554: {
   716                           ;main.c: 555: if(++count5s > 500)
   717  0494  0AA6               	incf	_count5s,f
   718  0495  1903               	skipnz
   719  0496  0AA7               	incf	_count5s+1,f
   720  0497  3001               	movlw	1
   721  0498  0227               	subwf	_count5s+1,w
   722  0499  30F5               	movlw	245
   723  049A  1903               	skipnz
   724  049B  0226               	subwf	_count5s,w
   725  049C  1C03               	skipc
   726  049D  2CAA               	goto	l2791
   727  049E  30E8               	movlw	232
   728                           
   729                           ;main.c: 556: {
   730                           ;main.c: 557: count5s = 0;
   731  049F  01A6               	clrf	_count5s
   732  04A0  01A7               	clrf	_count5s+1
   733                           
   734                           ;main.c: 558: overWorkTime = 1000;
   735  04A1  00A4               	movwf	_overWorkTime
   736  04A2  3003               	movlw	3
   737  04A3  00A5               	movwf	_overWorkTime+1
   738                           
   739                           ;main.c: 559: preLedStep = workStep;
   740  04A4  0879               	movf	_workStep,w
   741  04A5  00B8               	movwf	_preLedStep
   742                           
   743                           ;main.c: 560: workStep = 0;
   744  04A6  01F9               	clrf	_workStep
   745  04A7  2CAA               	goto	l2791
   746  04A8                     l2789:	
   747                           
   748                           ;main.c: 564: else
   749                           ;main.c: 565: {
   750                           ;main.c: 566: count5s = 0;
   751  04A8  01A6               	clrf	_count5s
   752  04A9  01A7               	clrf	_count5s+1
   753  04AA                     l2791:	
   754                           
   755                           ;main.c: 567: }
   756                           ;main.c: 568: if(count1s == 0 && ++count900s >= 900)
   757  04AA  0854               	movf	_count1s,w
   758  04AB  1D03               	btfss	3,2
   759  04AC  0008               	return
   760  04AD  0AA0               	incf	_count900s,f
   761  04AE  1903               	skipnz
   762  04AF  0AA1               	incf	_count900s+1,f
   763  04B0  3003               	movlw	3
   764  04B1  0221               	subwf	_count900s+1,w
   765  04B2  3084               	movlw	132
   766  04B3  1903               	skipnz
   767  04B4  0220               	subwf	_count900s,w
   768  04B5  1803               	btfsc	3,0
   769                           
   770                           ;main.c: 569: {
   771                           ;main.c: 570: workStep = 0;
   772  04B6  01F9               	clrf	_workStep
   773  04B7  0008               	return
   774  04B8                     l2797:	
   775                           
   776                           ;main.c: 573: else
   777                           ;main.c: 574: {
   778                           ;main.c: 575: pwmStop();
   779  04B8  25CF               	fcall	_pwmStop
   780                           
   781                           ;main.c: 576: count900s = 0;
   782  04B9  01A0               	clrf	_count900s
   783  04BA  01A1               	clrf	_count900s+1
   784  04BB  0008               	return
   785  04BC                     __end_of_workCtr:	
   786                           
   787                           	psect	text2
   788  05CF                     __ptext2:	
   789 ;; *************** function _pwmStop *****************
   790 ;; Defined at:
   791 ;;		line 925 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		None
   800 ;; Tracked objects:
   801 ;;		On entry : 100/0
   802 ;;		On exit  : 100/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1
   805 ;;      Params:         0       0       0
   806 ;;      Locals:         0       0       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    2
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_workCtr
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _pwmStop
   821  05CF                     _pwmStop:	
   822                           
   823                           ;main.c: 927: PWMCON0 &= 0XFD;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _pwmStop: []
   827  05CF  1095               	bcf	21,1	;volatile
   828                           
   829                           ;main.c: 928: RB1 = 0;
   830  05D0  1086               	bcf	6,1	;volatile
   831  05D1  0008               	return
   832  05D2                     __end_of_pwmStop:	
   833                           
   834                           	psect	text3
   835  05BA                     __ptext3:	
   836 ;; *************** function _pwmInit *****************
   837 ;; Defined at:
   838 ;;		line 910 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2
   847 ;; Tracked objects:
   848 ;;		On entry : 100/0
   849 ;;		On exit  : 100/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1
   852 ;;      Params:         0       0       0
   853 ;;      Locals:         0       0       0
   854 ;;      Temps:          0       0       0
   855 ;;      Totals:         0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    2
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_workCtr
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _pwmInit
   868  05BA                     _pwmInit:	
   869                           
   870                           ;main.c: 912: PWMCON1 = 0B00000000;
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _pwmInit: [wreg+status,2]
   874                           
   875                           ;main.c: 913: PWMTH = 0X00;
   876                           
   877                           ;main.c: 914: PWMTL = 100;
   878                           
   879                           ;main.c: 917: PWMD01H = 0;
   880  05BA  25AC               	fcall	PL8	;call to abstracted procedure
   881                           
   882                           ;main.c: 918: PWMD1L = 50;
   883  05BB  3032               	movlw	50
   884  05BC  009A               	movwf	26	;volatile
   885                           
   886                           ;main.c: 919: PWM01DT = 0X00;
   887  05BD  019F               	clrf	31	;volatile
   888                           
   889                           ;main.c: 921: PWMCON0 = 0X62;
   890  05BE  3062               	movlw	98
   891  05BF  0095               	movwf	21	;volatile
   892                           
   893                           ;main.c: 922: PWMCON2 =0X00;
   894  05C0  019D               	clrf	29	;volatile
   895  05C1  0008               	return
   896  05C2                     __end_of_pwmInit:	
   897                           
   898                           	psect	text4
   899  0358                     __ptext4:	
   900 ;; *************** function _ledCtr *****************
   901 ;; Defined at:
   902 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0, pclath, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 100/0
   913 ;;		On exit  : 100/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         0       0       0
   917 ;;      Locals:         0       0       0
   918 ;;      Temps:          0       0       0
   919 ;;      Totals:         0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    3
   923 ;; This function calls:
   924 ;;		___lbdiv
   925 ;;		___lbmod
   926 ;;		___lwmod
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _ledCtr
   934  0358                     _ledCtr:	
   935                           
   936                           ;main.c: 233: if(firstTime > 0)
   937                           
   938                           ;incstack = 0
   939                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   940  0358  086A               	movf	_firstTime,w
   941  0359  1903               	btfsc	3,2
   942  035A  2B65               	goto	l3435
   943  035B  3006               	movlw	6
   944                           
   945                           ;main.c: 234: {
   946                           ;main.c: 235: firstTime--;
   947  035C  03EA               	decf	_firstTime,f
   948                           
   949                           ;main.c: 236: ledStep = 6;
   950  035D  00F8               	movwf	_ledStep
   951                           
   952                           ;main.c: 237: if(prePwStep < pwStep)
   953  035E  0844               	movf	_pwStep,w
   954  035F  0277               	subwf	_prePwStep,w
   955  0360  1803               	skipnc
   956  0361  0008               	return
   957                           
   958                           ;main.c: 238: {
   959                           ;main.c: 239: prePwStep = pwStep;
   960  0362  0844               	movf	_pwStep,w
   961  0363  00F7               	movwf	_prePwStep
   962  0364  0008               	return
   963  0365                     l3435:	
   964                           
   965                           ;main.c: 242: else if(overWorkTime > 0)
   966  0365  0824               	movf	_overWorkTime,w
   967  0366  0425               	iorwf	_overWorkTime+1,w
   968  0367  1903               	btfsc	3,2
   969  0368  2B83               	goto	l3445
   970                           
   971                           ;main.c: 243: {
   972                           ;main.c: 244: overWorkTime--;
   973  0369  3001               	movlw	1
   974  036A  02A4               	subwf	_overWorkTime,f
   975  036B  3000               	movlw	0
   976  036C  1C03               	skipc
   977  036D  03A5               	decf	_overWorkTime+1,f
   978  036E  02A5               	subwf	_overWorkTime+1,f
   979                           
   980                           ;main.c: 245: if(overWorkTime % 40 < 20)
   981  036F  3028               	movlw	40
   982  0370  00F3               	movwf	___lwmod@divisor
   983  0371  01F4               	clrf	___lwmod@divisor+1
   984  0372  0825               	movf	_overWorkTime+1,w
   985  0373  00F6               	movwf	___lwmod@dividend+1
   986  0374  0824               	movf	_overWorkTime,w
   987  0375  00F5               	movwf	___lwmod@dividend
   988  0376  24ED               	fcall	___lwmod
   989  0377  3000               	movlw	0
   990  0378  0274               	subwf	?___lwmod+1,w
   991  0379  3014               	movlw	20
   992  037A  1903               	skipnz
   993  037B  0273               	subwf	?___lwmod,w
   994  037C  1803               	skipnc
   995  037D  2B81               	goto	l3443
   996                           
   997                           ;main.c: 246: {
   998                           ;main.c: 247: ledStep = preLedStep;
   999  037E  0838               	movf	_preLedStep,w
  1000  037F  00F8               	movwf	_ledStep
  1001                           
  1002                           ;main.c: 248: }
  1003  0380  0008               	return
  1004  0381                     l3443:	
  1005                           
  1006                           ;main.c: 249: else
  1007                           ;main.c: 250: {
  1008                           ;main.c: 251: ledStep = 0;
  1009  0381  01F8               	clrf	_ledStep
  1010  0382  0008               	return
  1011  0383                     l3445:	
  1012                           
  1013                           ;main.c: 254: else if(showBatTime > 0)
  1014  0383  0841               	movf	_showBatTime,w
  1015  0384  1903               	btfsc	3,2
  1016  0385  2B9D               	goto	l3463
  1017  0386  300E               	movlw	14
  1018                           
  1019                           ;main.c: 255: {
  1020                           ;main.c: 256: showBatTime--;
  1021  0387  03C1               	decf	_showBatTime,f
  1022                           
  1023                           ;main.c: 257: if(prePwStep >= 14)
  1024  0388  0277               	subwf	_prePwStep,w
  1025  0389  1C03               	skipc
  1026  038A  2B91               	goto	l3453
  1027                           
  1028                           ;main.c: 258: {
  1029                           ;main.c: 259: ledStep = prePwStep/14;
  1030  038B  300E               	movlw	14
  1031  038C  00F3               	movwf	___lbdiv@divisor
  1032  038D  0877               	movf	_prePwStep,w
  1033  038E  258A               	fcall	___lbdiv
  1034  038F  00F8               	movwf	_ledStep
  1035                           
  1036                           ;main.c: 260: }
  1037  0390  0008               	return
  1038  0391                     l3453:	
  1039                           
  1040                           ;main.c: 261: else if(prePwStep > 5)
  1041  0391  3006               	movlw	6
  1042  0392  0277               	subwf	_prePwStep,w
  1043  0393  1C03               	skipc
  1044  0394  2B98               	goto	l3457
  1045  0395                     l3455:	
  1046                           
  1047                           ;main.c: 262: {
  1048                           ;main.c: 263: ledStep = 1;
  1049  0395  01F8               	clrf	_ledStep
  1050  0396  0AF8               	incf	_ledStep,f
  1051                           
  1052                           ;main.c: 264: }
  1053  0397  0008               	return
  1054  0398                     l3457:	
  1055                           
  1056                           ;main.c: 265: else
  1057                           ;main.c: 266: {
  1058                           ;main.c: 267: if(count1s < 50)
  1059  0398  3032               	movlw	50
  1060  0399  0254               	subwf	_count1s,w
  1061  039A  1C03               	btfss	3,0
  1062  039B  2B95               	goto	l3455
  1063  039C  2B81               	goto	l3443
  1064  039D                     l3463:	
  1065                           ;main.c: 274: }
  1066                           ;main.c: 275: }
  1067                           ;main.c: 276: }
  1068                           
  1069                           
  1070                           ;main.c: 277: else if(workStep > 0)
  1071  039D  0879               	movf	_workStep,w
  1072  039E  1903               	btfsc	3,2
  1073  039F  2BA3               	goto	l3467
  1074                           
  1075                           ;main.c: 278: {
  1076                           ;main.c: 279: ledStep = workStep;
  1077  03A0  0879               	movf	_workStep,w
  1078  03A1  00F8               	movwf	_ledStep
  1079                           
  1080                           ;main.c: 280: }
  1081  03A2  0008               	return
  1082  03A3                     l3467:	
  1083                           
  1084                           ;main.c: 281: else if(chrgFlag)
  1085  03A3  087A               	movf	_chrgFlag,w
  1086  03A4  1903               	btfsc	3,2
  1087  03A5  2B81               	goto	l3443
  1088                           
  1089                           ;main.c: 282: {
  1090                           ;main.c: 283: if(count1s % 50 == 0)
  1091  03A6  3032               	movlw	50
  1092  03A7  00F3               	movwf	___lbmod@divisor
  1093  03A8  0854               	movf	_count1s,w
  1094  03A9  256E               	fcall	___lbmod
  1095  03AA  3A00               	xorlw	0
  1096  03AB  1D03               	skipz
  1097  03AC  0008               	return
  1098                           
  1099                           ;main.c: 284: {
  1100                           ;main.c: 285: if(++ledStep > 6)
  1101  03AD  3007               	movlw	7
  1102  03AE  0AF8               	incf	_ledStep,f
  1103  03AF  0278               	subwf	_ledStep,w
  1104  03B0  1C03               	skipc
  1105  03B1  0008               	return
  1106                           
  1107                           ;main.c: 286: {
  1108                           ;main.c: 287: ledStep = lockLedStep;
  1109  03B2  0842               	movf	_lockLedStep,w
  1110  03B3  00F8               	movwf	_ledStep
  1111  03B4  0008               	return
  1112  03B5                     __end_of_ledCtr:	
  1113                           
  1114                           	psect	text5
  1115  04ED                     __ptext5:	
  1116 ;; *************** function ___lwmod *****************
  1117 ;; Defined at:
  1118 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  divisor         2    3[COMMON] unsigned int 
  1121 ;;  dividend        2    5[COMMON] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  counter         1    0[BANK0 ] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2    3[COMMON] unsigned int 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 100/0
  1130 ;;		On exit  : 100/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1
  1133 ;;      Params:         4       0       0
  1134 ;;      Locals:         0       1       0
  1135 ;;      Temps:          0       0       0
  1136 ;;      Totals:         4       1       0
  1137 ;;Total ram usage:        5 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_ledCtr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function ___lwmod
  1149  04ED                     ___lwmod:	
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1153  04ED  0873               	movf	___lwmod@divisor,w
  1154  04EE  0474               	iorwf	___lwmod@divisor+1,w
  1155  04EF  1903               	btfsc	3,2
  1156  04F0  2D0C               	goto	l3097
  1157  04F1  01D7               	clrf	___lwmod@counter
  1158  04F2                     L1:	
  1159  04F2  0AD7               	incf	___lwmod@counter,f
  1160  04F3  1BF4               	btfsc	___lwmod@divisor+1,7
  1161  04F4  2CF9               	goto	l3089
  1162  04F5  1003               	clrc
  1163  04F6  0DF3               	rlf	___lwmod@divisor,f
  1164  04F7  0DF4               	rlf	___lwmod@divisor+1,f
  1165  04F8  2CF2               	goto	L1
  1166  04F9                     l3089:	
  1167  04F9  0874               	movf	___lwmod@divisor+1,w
  1168  04FA  0276               	subwf	___lwmod@dividend+1,w
  1169  04FB  1D03               	skipz
  1170  04FC  2CFF               	goto	u3235
  1171  04FD  0873               	movf	___lwmod@divisor,w
  1172  04FE  0275               	subwf	___lwmod@dividend,w
  1173  04FF                     u3235:	
  1174  04FF  1C03               	skipc
  1175  0500  2D08               	goto	L2
  1176  0501  0873               	movf	___lwmod@divisor,w
  1177  0502  02F5               	subwf	___lwmod@dividend,f
  1178  0503  0874               	movf	___lwmod@divisor+1,w
  1179  0504  1C03               	skipc
  1180  0505  03F6               	decf	___lwmod@dividend+1,f
  1181  0506  02F6               	subwf	___lwmod@dividend+1,f
  1182  0507  1003               	clrc
  1183  0508                     L2:	
  1184  0508  0CF4               	rrf	___lwmod@divisor+1,f
  1185  0509  0CF3               	rrf	___lwmod@divisor,f
  1186  050A  0BD7               	decfsz	___lwmod@counter,f
  1187  050B  2CF9               	goto	l3089
  1188  050C                     l3097:	
  1189  050C  0876               	movf	___lwmod@dividend+1,w
  1190  050D  00F4               	movwf	?___lwmod+1
  1191  050E  0875               	movf	___lwmod@dividend,w
  1192  050F  00F3               	movwf	?___lwmod
  1193  0510  0008               	return
  1194  0511                     __end_of___lwmod:	
  1195                           
  1196                           	psect	text6
  1197  056E                     __ptext6:	
  1198 ;; *************** function ___lbmod *****************
  1199 ;; Defined at:
  1200 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        1    wreg     unsigned char 
  1203 ;;  divisor         1    3[COMMON] unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  dividend        1    0[BANK0 ] unsigned char 
  1206 ;;  rem             1    2[BANK0 ] unsigned char 
  1207 ;;  counter         1    1[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      unsigned char 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 100/0
  1214 ;;		On exit  : 100/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1
  1217 ;;      Params:         1       0       0
  1218 ;;      Locals:         0       3       0
  1219 ;;      Temps:          1       0       0
  1220 ;;      Totals:         2       3       0
  1221 ;;Total ram usage:        5 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_ledCtr
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function ___lbmod
  1233  056E                     ___lbmod:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1237                           ;___lbmod@dividend stored from wreg
  1238  056E  00D7               	movwf	___lbmod@dividend
  1239  056F  3008               	movlw	8
  1240  0570  00D8               	movwf	___lbmod@counter
  1241  0571  01D9               	clrf	___lbmod@rem
  1242  0572                     l3067:	
  1243  0572  0857               	movf	___lbmod@dividend,w
  1244  0573  00F4               	movwf	??___lbmod
  1245  0574  3007               	movlw	7
  1246  0575  1003               	clrc
  1247  0576                     L3:	
  1248  0576  0CF4               	rrf	??___lbmod,f
  1249  0577  3EFF               	addlw	-1
  1250  0578  1003               	clrc
  1251  0579  1D03               	skipz
  1252  057A  2D76               	goto	L3
  1253  057B  0D59               	rlf	___lbmod@rem,w
  1254  057C  0474               	iorwf	??___lbmod,w
  1255  057D  00D9               	movwf	___lbmod@rem
  1256  057E  1003               	clrc
  1257  057F  0DD7               	rlf	___lbmod@dividend,f
  1258  0580  0873               	movf	___lbmod@divisor,w
  1259  0581  0259               	subwf	___lbmod@rem,w
  1260  0582  1C03               	skipc
  1261  0583  2D86               	goto	l3075
  1262  0584  0873               	movf	___lbmod@divisor,w
  1263  0585  02D9               	subwf	___lbmod@rem,f
  1264  0586                     l3075:	
  1265  0586  0BD8               	decfsz	___lbmod@counter,f
  1266  0587  2D72               	goto	l3067
  1267  0588  0859               	movf	___lbmod@rem,w
  1268  0589  0008               	return
  1269  058A                     __end_of___lbmod:	
  1270                           
  1271                           	psect	text7
  1272  04BC                     __ptext7:	
  1273 ;; *************** function _keyCtr *****************
  1274 ;; Defined at:
  1275 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  kclick          1    4[COMMON] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 100/0
  1286 ;;		On exit  : 100/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1
  1289 ;;      Params:         0       0       0
  1290 ;;      Locals:         1       0       0
  1291 ;;      Temps:          0       0       0
  1292 ;;      Totals:         1       0       0
  1293 ;;Total ram usage:        1 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    3
  1296 ;; This function calls:
  1297 ;;		_keyRead
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _keyCtr
  1305  04BC                     _keyCtr:	
  1306                           
  1307                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1311  04BC  0906               	comf	6,w	;volatile
  1312  04BD  3904               	andlw	4
  1313  04BE  2533               	fcall	_keyRead
  1314  04BF  00F4               	movwf	keyCtr@kclick
  1315                           
  1316                           ;main.c: 500: if(kclick == 1)
  1317  04C0  0B74               	decfsz	keyCtr@kclick,w
  1318  04C1  2CDF               	goto	l2757
  1319                           
  1320                           ;main.c: 501: {
  1321                           ;main.c: 502: if(workStep > 0)
  1322  04C2  0879               	movf	_workStep,w
  1323  04C3  1903               	btfsc	3,2
  1324  04C4  2CCD               	goto	l2743
  1325                           
  1326                           ;main.c: 503: {
  1327                           ;main.c: 504: if(++workStep > 6)
  1328  04C5  3007               	movlw	7
  1329  04C6  0AF9               	incf	_workStep,f
  1330  04C7  0279               	subwf	_workStep,w
  1331  04C8  1C03               	skipc
  1332  04C9  0008               	return
  1333                           
  1334                           ;main.c: 505: {
  1335                           ;main.c: 506: workStep = 1;
  1336  04CA  01F9               	clrf	_workStep
  1337  04CB  0AF9               	incf	_workStep,f
  1338  04CC  0008               	return
  1339  04CD                     l2743:	
  1340                           
  1341                           ;main.c: 509: else if(overWorkTime > 0)
  1342  04CD  0824               	movf	_overWorkTime,w
  1343  04CE  0425               	iorwf	_overWorkTime+1,w
  1344  04CF  1903               	btfsc	3,2
  1345  04D0  2CD6               	goto	l2749
  1346                           
  1347                           ;main.c: 510: {
  1348                           ;main.c: 511: overWorkTime = 0;
  1349  04D1  01A4               	clrf	_overWorkTime
  1350  04D2  01A5               	clrf	_overWorkTime+1
  1351                           
  1352                           ;main.c: 512: workStep = preLedStep;
  1353  04D3  0838               	movf	_preLedStep,w
  1354  04D4  00F9               	movwf	_workStep
  1355                           
  1356                           ;main.c: 513: }
  1357  04D5  0008               	return
  1358  04D6                     l2749:	
  1359                           
  1360                           ;main.c: 514: else if(showBatTime > 0)
  1361  04D6  0841               	movf	_showBatTime,w
  1362  04D7  1903               	btfsc	3,2
  1363  04D8  2CDB               	goto	l2753
  1364  04D9                     l2751:	
  1365                           
  1366                           ;main.c: 515: {
  1367                           ;main.c: 516: showBatTime = 0;
  1368  04D9  01C1               	clrf	_showBatTime
  1369                           
  1370                           ;main.c: 517: }
  1371  04DA  0008               	return
  1372  04DB                     l2753:	
  1373                           
  1374                           ;main.c: 518: else
  1375                           ;main.c: 519: {
  1376                           ;main.c: 520: showBatTime = 200;
  1377  04DB  30C8               	movlw	200
  1378  04DC  00C1               	movwf	_showBatTime
  1379                           
  1380                           ;main.c: 521: count1s = 0;
  1381  04DD  01D4               	clrf	_count1s
  1382  04DE  0008               	return
  1383  04DF                     l2757:	
  1384                           
  1385                           ;main.c: 524: else if(kclick == 2)
  1386  04DF  3002               	movlw	2
  1387  04E0  0674               	xorwf	keyCtr@kclick,w
  1388  04E1  1D03               	btfss	3,2
  1389  04E2  0008               	return
  1390                           
  1391                           ;main.c: 525: {
  1392                           ;main.c: 526: if(workStep > 0)
  1393  04E3  0879               	movf	_workStep,w
  1394  04E4  1903               	btfsc	3,2
  1395  04E5  2CE8               	goto	l778
  1396                           
  1397                           ;main.c: 527: {
  1398                           ;main.c: 528: workStep = 0;
  1399  04E6  01F9               	clrf	_workStep
  1400                           
  1401                           ;main.c: 529: }
  1402  04E7  0008               	return
  1403  04E8                     l778:	
  1404  04E8  301E               	movlw	30
  1405                           
  1406                           ;main.c: 530: else
  1407                           ;main.c: 531: {
  1408                           ;main.c: 532: workStep = 1;
  1409  04E9  01F9               	clrf	_workStep
  1410  04EA  0AF9               	incf	_workStep,f
  1411                           
  1412                           ;main.c: 533: startTime = 30;
  1413  04EB  00C6               	movwf	_startTime
  1414  04EC  2CD9               	goto	l2751
  1415  04ED                     __end_of_keyCtr:	
  1416                           
  1417                           	psect	text8
  1418  0533                     __ptext8:	
  1419 ;; *************** function _keyRead *****************
  1420 ;; Defined at:
  1421 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  keyStatus       1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  keyStatus       1    3[COMMON] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      unsigned char 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 100/0
  1432 ;;		On exit  : 100/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1
  1435 ;;      Params:         0       0       0
  1436 ;;      Locals:         1       0       0
  1437 ;;      Temps:          0       0       0
  1438 ;;      Totals:         1       0       0
  1439 ;;Total ram usage:        1 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    2
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_keyCtr
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function _keyRead
  1451  0533                     _keyRead:	
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1455                           ;keyRead@keyStatus stored from wreg
  1456  0533  00F3               	movwf	keyRead@keyStatus
  1457                           
  1458                           ;main.c: 466: if(keyStatus)
  1459  0534  0873               	movf	keyRead@keyStatus,w
  1460  0535  3064               	movlw	100
  1461  0536  1903               	btfsc	3,2
  1462  0537  2D45               	goto	L5
  1463                           
  1464                           ;main.c: 467: {
  1465                           ;main.c: 468: keyCount++;
  1466  0538  0ACC               	incf	_keyCount,f
  1467                           
  1468                           ;main.c: 469: if(keyCount >= 100)
  1469  0539  024C               	subwf	_keyCount,w
  1470  053A  1C03               	skipc
  1471  053B  3400               	retlw	0
  1472                           
  1473                           ;main.c: 470: {
  1474                           ;main.c: 471: keyCount = 100;
  1475  053C  3064               	movlw	100
  1476  053D  00CC               	movwf	_keyCount
  1477                           
  1478                           ;main.c: 472: if(!longPressFlag)
  1479  053E  084B               	movf	_longPressFlag,w
  1480  053F  1D03               	btfss	3,2
  1481  0540  3400               	retlw	0
  1482  0541  3002               	movlw	2
  1483                           
  1484                           ;main.c: 473: {
  1485                           ;main.c: 474: longPressFlag = 1;
  1486  0542  01CB               	clrf	_longPressFlag
  1487  0543  0ACB               	incf	_longPressFlag,f
  1488                           
  1489                           ;main.c: 475: return 2;
  1490  0544  0008               	return
  1491  0545                     L5:	
  1492                           ;main.c: 479: else
  1493                           ;main.c: 480: {
  1494                           ;main.c: 481: if(keyCount >= 100)
  1495                           
  1496  0545  024C               	subwf	_keyCount,w
  1497  0546  1C03               	skipc
  1498  0547  2D4B               	goto	l2193
  1499                           
  1500                           ;main.c: 482: {
  1501                           ;main.c: 483: keyCount = 0;
  1502  0548  01CC               	clrf	_keyCount
  1503                           
  1504                           ;main.c: 484: longPressFlag = 0;
  1505  0549  01CB               	clrf	_longPressFlag
  1506                           
  1507                           ;main.c: 485: return 0;
  1508  054A  3400               	retlw	0
  1509  054B                     l2193:	
  1510                           
  1511                           ;main.c: 487: else if(keyCount >= 6)
  1512  054B  3006               	movlw	6
  1513  054C  024C               	subwf	_keyCount,w
  1514                           
  1515                           ;main.c: 488: {
  1516                           ;main.c: 489: keyCount = 0;
  1517  054D  01CC               	clrf	_keyCount
  1518  054E  1803               	btfsc	3,0
  1519                           
  1520                           ;main.c: 490: return 1;
  1521  054F  3401               	retlw	1
  1522  0550  3400               	retlw	0
  1523  0551                     __end_of_keyRead:	
  1524                           ;main.c: 491: }
  1525                           ;main.c: 492: keyCount = 0;
  1526                           
  1527                           
  1528                           	psect	text9
  1529  0018                     __ptext9:	
  1530 ;; *************** function _chrgCtr *****************
  1531 ;; Defined at:
  1532 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 100/0
  1543 ;;		On exit  : 100/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1
  1546 ;;      Params:         0       0       0
  1547 ;;      Locals:         0       0       0
  1548 ;;      Temps:          0       2       0
  1549 ;;      Totals:         0       2       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		___lbdiv
  1555 ;;		_chrgPwmInit
  1556 ;;		_chrgPwmStop
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _chrgCtr
  1564  0018                     _chrgCtr:	
  1565                           
  1566                           ;main.c: 301: if(PORTA & 0x02)
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1570  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0019  1C86               	btfss	6,1	;volatile
  1572  001A  28F7               	goto	l3339
  1573                           
  1574                           ;main.c: 302: {
  1575                           ;main.c: 303: if(chrgFlag == 0)
  1576  001B  087A               	movf	_chrgFlag,w
  1577  001C  1D03               	btfss	3,2
  1578  001D  2824               	goto	l3215
  1579                           
  1580                           ;main.c: 304: {
  1581                           ;main.c: 305: chrgFlag = 1;
  1582  001E  01FA               	clrf	_chrgFlag
  1583  001F  0AFA               	incf	_chrgFlag,f
  1584                           
  1585                           ;main.c: 306: ledStep = 0;
  1586  0020  01F8               	clrf	_ledStep
  1587                           
  1588                           ;main.c: 307: chrgMaxDuty = 0;
  1589  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0022  01BA               	clrf	_chrgMaxDuty
  1591                           
  1592                           ;main.c: 308: chrgPwmStop();
  1593  0023  25D2               	fcall	_chrgPwmStop
  1594  0024                     l3215:	
  1595                           
  1596                           ;main.c: 309: }
  1597                           ;main.c: 310: workStep = 0;
  1598  0024  01F9               	clrf	_workStep
  1599                           
  1600                           ;main.c: 311: lowBatFlag = 0;
  1601  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0026  01B7               	clrf	_lowBatFlag
  1603                           
  1604                           ;main.c: 312: if(prePwStep < pwStep)
  1605  0027  0844               	movf	_pwStep,w
  1606  0028  0277               	subwf	_prePwStep,w
  1607  0029  1803               	skipnc
  1608  002A  2834               	goto	l3227
  1609                           
  1610                           ;main.c: 313: {
  1611                           ;main.c: 314: if(++count50s > 2000)
  1612  002B  2116               	fcall	PL6	;call to abstracted procedure
  1613  002C  1903               	skipnz
  1614  002D  022A               	subwf	_count50s,w
  1615  002E  1C03               	skipc
  1616  002F  2836               	goto	l3229
  1617                           
  1618                           ;main.c: 315: {
  1619                           ;main.c: 316: count50s = 0;
  1620  0030  01AA               	clrf	_count50s
  1621  0031  01AB               	clrf	_count50s+1
  1622                           
  1623                           ;main.c: 317: prePwStep++;
  1624  0032  0AF7               	incf	_prePwStep,f
  1625  0033  2836               	goto	l3229
  1626  0034                     l3227:	
  1627                           
  1628                           ;main.c: 320: else
  1629                           ;main.c: 321: {
  1630                           ;main.c: 322: count50s = 0;
  1631  0034  01AA               	clrf	_count50s
  1632  0035  01AB               	clrf	_count50s+1
  1633  0036                     l3229:	
  1634                           
  1635                           ;main.c: 323: }
  1636                           ;main.c: 324: if(protectFlag)
  1637  0036  084F               	movf	_protectFlag,w
  1638  0037  1903               	btfsc	3,2
  1639  0038  2859               	goto	l3253
  1640                           
  1641                           ;main.c: 325: {
  1642                           ;main.c: 326: chrgPwmStop();
  1643  0039  25D2               	fcall	_chrgPwmStop
  1644                           
  1645                           ;main.c: 327: ledStep = 6;
  1646  003A  3006               	movlw	6
  1647  003B  00F8               	movwf	_ledStep
  1648                           
  1649                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1650  003C  3063               	movlw	99
  1651  003D  0277               	subwf	_prePwStep,w
  1652  003E  1803               	skipnc
  1653  003F  2857               	goto	l3249
  1654  0040  0B4F               	decfsz	_protectFlag,w
  1655  0041  2857               	goto	l3249
  1656                           
  1657                           ;main.c: 329: {
  1658                           ;main.c: 330: if(++reChrgCount > 250)
  1659  0042  30FB               	movlw	251
  1660  0043  0AC3               	incf	_reChrgCount,f
  1661  0044  0243               	subwf	_reChrgCount,w
  1662  0045  1C03               	skipc
  1663  0046  0008               	return
  1664  0047  300F               	movlw	15
  1665                           
  1666                           ;main.c: 331: {
  1667                           ;main.c: 332: reChrgCount = 0;
  1668  0048  01C3               	clrf	_reChrgCount
  1669                           
  1670                           ;main.c: 333: chrgFullFlag = 0;
  1671  0049  01D2               	clrf	_chrgFullFlag
  1672                           
  1673                           ;main.c: 334: protectFlag = 0;
  1674  004A  01CF               	clrf	_protectFlag
  1675                           
  1676                           ;main.c: 335: if(prePwStep > 14)
  1677  004B  0277               	subwf	_prePwStep,w
  1678  004C  1C03               	skipc
  1679  004D  2855               	goto	l3247
  1680                           
  1681                           ;main.c: 336: {
  1682                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1683  004E  300E               	movlw	14
  1684  004F  00F3               	movwf	___lbdiv@divisor
  1685  0050  0877               	movf	_prePwStep,w
  1686  0051  258A               	fcall	___lbdiv
  1687  0052  3EFF               	addlw	255
  1688  0053  00C2               	movwf	_lockLedStep
  1689                           
  1690                           ;main.c: 338: }
  1691  0054  0008               	return
  1692  0055                     l3247:	
  1693                           
  1694                           ;main.c: 339: else
  1695                           ;main.c: 340: {
  1696                           ;main.c: 341: lockLedStep = 0;
  1697  0055  01C2               	clrf	_lockLedStep
  1698  0056  0008               	return
  1699  0057                     l3249:	
  1700                           
  1701                           ;main.c: 345: else
  1702                           ;main.c: 346: {
  1703                           ;main.c: 347: reChrgCount = 0;
  1704  0057  01C3               	clrf	_reChrgCount
  1705  0058  0008               	return
  1706  0059                     l3253:	
  1707                           
  1708                           ;main.c: 350: }
  1709                           ;main.c: 351: if(batADValue < 1118)
  1710  0059  3004               	movlw	4
  1711  005A  022D               	subwf	_batADValue+1,w
  1712  005B  305E               	movlw	94
  1713  005C  1903               	skipnz
  1714  005D  022C               	subwf	_batADValue,w
  1715  005E  1803               	skipnc
  1716  005F  2863               	goto	l3259
  1717  0060  300F               	movlw	15
  1718                           
  1719                           ;main.c: 352: {
  1720                           ;main.c: 353: chrgMode = 0;
  1721  0061  01C0               	clrf	_chrgMode
  1722                           
  1723                           ;main.c: 354: chrgMaxAD = 15;
  1724  0062  287C               	goto	L6
  1725  0063                     l3259:	
  1726                           ;main.c: 355: }
  1727                           
  1728                           
  1729                           ;main.c: 356: else if(batADValue < 1530)
  1730  0063  3005               	movlw	5
  1731  0064  022D               	subwf	_batADValue+1,w
  1732  0065  30FA               	movlw	250
  1733  0066  1903               	skipnz
  1734  0067  022C               	subwf	_batADValue,w
  1735  0068  1803               	skipnc
  1736  0069  2870               	goto	l3267
  1737  006A  3028               	movlw	40
  1738                           
  1739                           ;main.c: 357: {
  1740                           ;main.c: 358: chrgMode = 1;
  1741  006B  01C0               	clrf	_chrgMode
  1742  006C  0AC0               	incf	_chrgMode,f
  1743                           
  1744                           ;main.c: 359: chrgMaxAD = 40;
  1745  006D  00BF               	movwf	_chrgMaxAD
  1746                           
  1747                           ;main.c: 360: lockCount = 0;
  1748  006E  01BE               	clrf	_lockCount
  1749                           
  1750                           ;main.c: 361: }
  1751  006F  287D               	goto	l3277
  1752  0070                     l3267:	
  1753                           
  1754                           ;main.c: 362: else if(count1s == 0)
  1755  0070  0854               	movf	_count1s,w
  1756  0071  1D03               	btfss	3,2
  1757  0072  287D               	goto	l3277
  1758                           
  1759                           ;main.c: 363: {
  1760                           ;main.c: 364: if(++lockCount > 200)
  1761  0073  30C9               	movlw	201
  1762  0074  0ABE               	incf	_lockCount,f
  1763  0075  023E               	subwf	_lockCount,w
  1764  0076  1C03               	skipc
  1765  0077  287B               	goto	l3275
  1766  0078  3002               	movlw	2
  1767                           
  1768                           ;main.c: 365: {
  1769                           ;main.c: 366: lockCount = 0;
  1770  0079  01BE               	clrf	_lockCount
  1771                           
  1772                           ;main.c: 367: chrgMode = 2;
  1773  007A  00C0               	movwf	_chrgMode
  1774  007B                     l3275:	
  1775                           
  1776                           ;main.c: 368: }
  1777                           ;main.c: 370: chrgMaxAD = 40;
  1778  007B  3028               	movlw	40
  1779  007C                     L6:	
  1780  007C  00BF               	movwf	_chrgMaxAD
  1781  007D                     l3277:	
  1782                           
  1783                           ;main.c: 371: }
  1784                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1785  007D  3002               	movlw	2
  1786  007E  0640               	xorwf	_chrgMode,w
  1787  007F  1D03               	btfss	3,2
  1788  0080  2897               	goto	l3287
  1789  0081  3000               	movlw	0
  1790  0082  022F               	subwf	_outADValue+1,w
  1791  0083  3005               	movlw	5
  1792  0084  1903               	skipnz
  1793  0085  022E               	subwf	_outADValue,w
  1794  0086  1803               	skipnc
  1795  0087  2897               	goto	l3287
  1796                           
  1797                           ;main.c: 373: {
  1798                           ;main.c: 374: if(++fullCount >= 200)
  1799  0088  0AA8               	incf	_fullCount,f
  1800  0089  1903               	skipnz
  1801  008A  0AA9               	incf	_fullCount+1,f
  1802  008B  3000               	movlw	0
  1803  008C  0229               	subwf	_fullCount+1,w
  1804  008D  30C8               	movlw	200
  1805  008E  1903               	skipnz
  1806  008F  0228               	subwf	_fullCount,w
  1807  0090  1C03               	skipc
  1808  0091  2899               	goto	l3289
  1809                           
  1810                           ;main.c: 375: {
  1811                           ;main.c: 376: fullCount = 0;
  1812  0092  01A8               	clrf	_fullCount
  1813  0093  01A9               	clrf	_fullCount+1
  1814                           
  1815                           ;main.c: 377: chrgFullFlag = 1;
  1816  0094  01D2               	clrf	_chrgFullFlag
  1817  0095  0AD2               	incf	_chrgFullFlag,f
  1818  0096  2899               	goto	l3289
  1819  0097                     l3287:	
  1820                           
  1821                           ;main.c: 380: else
  1822                           ;main.c: 381: {
  1823                           ;main.c: 382: fullCount = 0;
  1824  0097  01A8               	clrf	_fullCount
  1825  0098  01A9               	clrf	_fullCount+1
  1826  0099                     l3289:	
  1827                           
  1828                           ;main.c: 383: }
  1829                           ;main.c: 384: if(chrgFullFlag)
  1830  0099  0852               	movf	_chrgFullFlag,w
  1831  009A  1903               	btfsc	3,2
  1832  009B  289F               	goto	l3295
  1833                           
  1834                           ;main.c: 385: {
  1835                           ;main.c: 386: lockLedStep = 6;
  1836  009C  3006               	movlw	6
  1837  009D  00C2               	movwf	_lockLedStep
  1838                           
  1839                           ;main.c: 387: chrgPwmStop();
  1840  009E  2DD2               	ljmp	l2155
  1841  009F                     l3295:	
  1842                           ;main.c: 388: }
  1843                           
  1844                           
  1845                           ;main.c: 389: else
  1846                           ;main.c: 390: {
  1847                           ;main.c: 391: if(prePwStep < 15)
  1848  009F  300F               	movlw	15
  1849  00A0  0277               	subwf	_prePwStep,w
  1850  00A1  1803               	skipnc
  1851  00A2  28A5               	goto	l3299
  1852                           
  1853                           ;main.c: 392: {
  1854                           ;main.c: 393: lockLedStep = 0;
  1855  00A3  01C2               	clrf	_lockLedStep
  1856                           
  1857                           ;main.c: 394: }
  1858  00A4  28AB               	goto	l3301
  1859  00A5                     l3299:	
  1860                           
  1861                           ;main.c: 395: else
  1862                           ;main.c: 396: {
  1863                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1864  00A5  300E               	movlw	14
  1865  00A6  00F3               	movwf	___lbdiv@divisor
  1866  00A7  0877               	movf	_prePwStep,w
  1867  00A8  258A               	fcall	___lbdiv
  1868  00A9  3EFF               	addlw	255
  1869  00AA  00C2               	movwf	_lockLedStep
  1870  00AB                     l3301:	
  1871                           
  1872                           ;main.c: 398: }
  1873                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1874  00AB  3006               	movlw	6
  1875  00AC  022D               	subwf	_batADValue+1,w
  1876  00AD  300A               	movlw	10
  1877  00AE  1903               	skipnz
  1878  00AF  022C               	subwf	_batADValue,w
  1879  00B0  1803               	skipnc
  1880  00B1  28C1               	goto	l3305
  1881  00B2  083F               	movf	_chrgMaxAD,w
  1882  00B3  3E02               	addlw	2
  1883  00B4  00D7               	movwf	??_chrgCtr
  1884  00B5  3000               	movlw	0
  1885  00B6  1803               	skipnc
  1886  00B7  3001               	movlw	1
  1887  00B8  00D8               	movwf	??_chrgCtr+1
  1888  00B9  082F               	movf	_outADValue+1,w
  1889  00BA  0258               	subwf	??_chrgCtr+1,w
  1890  00BB  1D03               	skipz
  1891  00BC  28BF               	goto	u3685
  1892  00BD  082E               	movf	_outADValue,w
  1893  00BE  0257               	subwf	??_chrgCtr,w
  1894  00BF                     u3685:	
  1895  00BF  1803               	skipnc
  1896  00C0  28D0               	goto	l3317
  1897  00C1                     l3305:	
  1898                           
  1899                           ;main.c: 400: {
  1900                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1901  00C1  0ABC               	incf	_subTime,f
  1902  00C2  083C               	movf	_subTime,w
  1903  00C3  023B               	subwf	_chrgWaitTime,w
  1904  00C4  1803               	skipnc
  1905  00C5  28CE               	goto	l3315
  1906                           
  1907                           ;main.c: 402: {
  1908                           ;main.c: 403: if(chrgMaxDuty > 1)
  1909  00C6  3002               	movlw	2
  1910  00C7  023A               	subwf	_chrgMaxDuty,w
  1911  00C8  1C03               	skipc
  1912  00C9  28CB               	goto	l3311
  1913                           
  1914                           ;main.c: 404: {
  1915                           ;main.c: 405: chrgMaxDuty--;
  1916  00CA  03BA               	decf	_chrgMaxDuty,f
  1917  00CB                     l3311:	
  1918  00CB  3032               	movlw	50
  1919                           
  1920                           ;main.c: 406: }
  1921                           ;main.c: 407: subTime = 0;
  1922  00CC  01BC               	clrf	_subTime
  1923                           
  1924                           ;main.c: 408: chrgWaitTime = 50;
  1925  00CD  00BB               	movwf	_chrgWaitTime
  1926  00CE                     l3315:	
  1927                           
  1928                           ;main.c: 409: }
  1929                           ;main.c: 410: addTime = 0;
  1930  00CE  01BD               	clrf	_addTime
  1931                           
  1932                           ;main.c: 411: }
  1933  00CF  28F0               	goto	l3331
  1934  00D0                     l3317:	
  1935                           
  1936                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1937  00D0  3006               	movlw	6
  1938  00D1  022D               	subwf	_batADValue+1,w
  1939  00D2  3009               	movlw	9
  1940  00D3  1903               	skipnz
  1941  00D4  022C               	subwf	_batADValue,w
  1942  00D5  1803               	skipnc
  1943  00D6  28F0               	goto	l3331
  1944  00D7  083F               	movf	_chrgMaxAD,w
  1945  00D8  3EFC               	addlw	252
  1946  00D9  00D7               	movwf	??_chrgCtr
  1947  00DA  30FF               	movlw	255
  1948  00DB  1803               	skipnc
  1949  00DC  3000               	movlw	0
  1950  00DD  00D8               	movwf	??_chrgCtr+1
  1951  00DE  022F               	subwf	_outADValue+1,w
  1952  00DF  1D03               	skipz
  1953  00E0  28E3               	goto	u3725
  1954  00E1  0857               	movf	??_chrgCtr,w
  1955  00E2  022E               	subwf	_outADValue,w
  1956  00E3                     u3725:	
  1957  00E3  1803               	skipnc
  1958  00E4  28F0               	goto	l3331
  1959                           
  1960                           ;main.c: 413: {
  1961                           ;main.c: 414: if(++addTime > chrgWaitTime)
  1962  00E5  0ABD               	incf	_addTime,f
  1963  00E6  083D               	movf	_addTime,w
  1964  00E7  023B               	subwf	_chrgWaitTime,w
  1965  00E8  1803               	skipnc
  1966  00E9  28EF               	goto	l3329
  1967  00EA  304B               	movlw	75
  1968                           
  1969                           ;main.c: 415: {
  1970                           ;main.c: 416: addTime = 0;
  1971  00EB  01BD               	clrf	_addTime
  1972                           
  1973                           ;main.c: 417: if(chrgMaxDuty < 75)
  1974  00EC  023A               	subwf	_chrgMaxDuty,w
  1975  00ED  1C03               	btfss	3,0
  1976                           
  1977                           ;main.c: 418: {
  1978                           ;main.c: 419: chrgMaxDuty++;
  1979  00EE  0ABA               	incf	_chrgMaxDuty,f
  1980  00EF                     l3329:	
  1981                           
  1982                           ;main.c: 420: }
  1983                           ;main.c: 421: }
  1984                           ;main.c: 422: subTime = 0;
  1985  00EF  01BC               	clrf	_subTime
  1986  00F0                     l3331:	
  1987                           
  1988                           ;main.c: 423: }
  1989                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  1990  00F0  1815               	btfsc	21,0	;volatile
  1991  00F1  28F3               	goto	l3335
  1992                           
  1993                           ;main.c: 427: {
  1994                           ;main.c: 428: chrgPwmInit();
  1995  00F2  25A5               	fcall	_chrgPwmInit
  1996  00F3                     l3335:	
  1997                           
  1998                           ;main.c: 429: }
  1999                           ;main.c: 430: PWMD01H = 0X00;
  2000  00F3  019E               	clrf	30	;volatile
  2001                           
  2002                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  2003  00F4  083A               	movf	_chrgMaxDuty,w
  2004  00F5  0099               	movwf	25	;volatile
  2005  00F6  0008               	return
  2006  00F7                     l3339:	
  2007  00F7  3014               	movlw	20
  2008                           
  2009                           ;main.c: 437: chrgFlag = 0;
  2010  00F8  01FA               	clrf	_chrgFlag
  2011                           
  2012                           ;main.c: 438: chrgFullFlag = 0;
  2013  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  2014  00FA  01D2               	clrf	_chrgFullFlag
  2015                           
  2016                           ;main.c: 439: protectFlag = 0;
  2017  00FB  01CF               	clrf	_protectFlag
  2018                           
  2019                           ;main.c: 440: chrgMode = 0;
  2020  00FC  01C0               	clrf	_chrgMode
  2021                           
  2022                           ;main.c: 441: chrgMaxAD = 0;
  2023  00FD  01BF               	clrf	_chrgMaxAD
  2024                           
  2025                           ;main.c: 442: chrgMaxDuty = 0;
  2026  00FE  01BA               	clrf	_chrgMaxDuty
  2027                           
  2028                           ;main.c: 443: lockCount = 0;
  2029  00FF  01BE               	clrf	_lockCount
  2030                           
  2031                           ;main.c: 444: lockLedStep = 0;
  2032  0100  01C2               	clrf	_lockLedStep
  2033                           
  2034                           ;main.c: 445: chrgWaitTime = 20;
  2035  0101  00BB               	movwf	_chrgWaitTime
  2036                           
  2037                           ;main.c: 446: chrgPwmStop();
  2038  0102  25D2               	fcall	_chrgPwmStop
  2039                           
  2040                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  2041  0103  0877               	movf	_prePwStep,w
  2042  0104  1903               	btfsc	3,2
  2043  0105  2913               	goto	l3355
  2044  0106  0877               	movf	_prePwStep,w
  2045  0107  0244               	subwf	_pwStep,w
  2046  0108  1803               	skipnc
  2047  0109  2913               	goto	l3355
  2048                           
  2049                           ;main.c: 448: {
  2050                           ;main.c: 449: if(++count50s > 2000)
  2051  010A  2116               	fcall	PL6	;call to abstracted procedure
  2052  010B  1903               	skipnz
  2053  010C  022A               	subwf	_count50s,w
  2054  010D  1C03               	skipc
  2055  010E  0008               	return
  2056                           
  2057                           ;main.c: 450: {
  2058                           ;main.c: 451: count50s = 0;
  2059  010F  01AA               	clrf	_count50s
  2060  0110  01AB               	clrf	_count50s+1
  2061                           
  2062                           ;main.c: 452: prePwStep--;
  2063  0111  03F7               	decf	_prePwStep,f
  2064  0112  0008               	return
  2065  0113                     l3355:	
  2066                           
  2067                           ;main.c: 455: else
  2068                           ;main.c: 456: {
  2069                           ;main.c: 457: count50s = 0;
  2070  0113  01AA               	clrf	_count50s
  2071  0114  01AB               	clrf	_count50s+1
  2072  0115  0008               	return
  2073  0116                     __end_of_chrgCtr:	
  2074  0116                     PL6:	
  2075  0116  0AAA               	incf	_count50s,f
  2076  0117  1903               	skipnz
  2077  0118  0AAB               	incf	_count50s+1,f
  2078  0119  3007               	movlw	7
  2079  011A  022B               	subwf	_count50s+1,w
  2080  011B  34D1               	retlw	209
  2081  011C                     __end_ofPL6:	
  2082                           
  2083                           	psect	text10
  2084  05D2                     __ptext10:	
  2085 ;; *************** function _chrgPwmStop *****************
  2086 ;; Defined at:
  2087 ;;		line 904 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		None
  2096 ;; Tracked objects:
  2097 ;;		On entry : 100/0
  2098 ;;		On exit  : 100/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1
  2101 ;;      Params:         0       0       0
  2102 ;;      Locals:         0       0       0
  2103 ;;      Temps:          0       0       0
  2104 ;;      Totals:         0       0       0
  2105 ;;Total ram usage:        0 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    2
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_chrgCtr
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _chrgPwmStop
  2117  05D2                     _chrgPwmStop:	
  2118  05D2                     l2155:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _chrgPwmStop: []
  2121                           
  2122                           
  2123                           ;main.c: 906: PWMCON0 &= 0xFE;
  2124  05D2  1015               	bcf	21,0	;volatile
  2125                           
  2126                           ;main.c: 907: RB0 = 0;
  2127  05D3  1006               	bcf	6,0	;volatile
  2128  05D4  0008               	return
  2129  05D5                     __end_of_chrgPwmStop:	
  2130                           
  2131                           	psect	text11
  2132  05A5                     __ptext11:	
  2133 ;; *************** function _chrgPwmInit *****************
  2134 ;; Defined at:
  2135 ;;		line 887 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2
  2144 ;; Tracked objects:
  2145 ;;		On entry : 100/0
  2146 ;;		On exit  : 100/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1
  2149 ;;      Params:         0       0       0
  2150 ;;      Locals:         0       0       0
  2151 ;;      Temps:          0       0       0
  2152 ;;      Totals:         0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    2
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_chrgCtr
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _chrgPwmInit
  2165  05A5                     _chrgPwmInit:	
  2166                           
  2167                           ;main.c: 889: PWMCON1 = 0B00000000;
  2168                           
  2169                           ;incstack = 0
  2170                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2171                           
  2172                           ;main.c: 891: PWMTH = 0X00;
  2173                           
  2174                           ;main.c: 892: PWMTL = 100;
  2175                           
  2176                           ;main.c: 896: PWMD01H = 0;
  2177  05A5  25AC               	fcall	PL8	;call to abstracted procedure
  2178                           
  2179                           ;main.c: 897: PWMD0L = 1;
  2180  05A6  3001               	movlw	1
  2181  05A7  0099               	movwf	25	;volatile
  2182                           
  2183                           ;main.c: 898: PWM01DT = 0X00;
  2184  05A8  019F               	clrf	31	;volatile
  2185                           
  2186                           ;main.c: 900: PWMCON0 = 0X01;
  2187  05A9  0095               	movwf	21	;volatile
  2188                           
  2189                           ;main.c: 901: PWMCON2 =0X00;
  2190  05AA  019D               	clrf	29	;volatile
  2191  05AB  0008               	return
  2192  05AC                     __end_of_chrgPwmInit:	
  2193  05AC                     PL8:	
  2194  05AC  0196               	clrf	22	;volatile
  2195  05AD  0198               	clrf	24	;volatile
  2196  05AE  3064               	movlw	100
  2197  05AF  0097               	movwf	23	;volatile
  2198  05B0  019E               	clrf	30	;volatile
  2199  05B1  0008               	return
  2200  05B2                     __end_ofPL8:	
  2201                           
  2202                           	psect	text12
  2203  058A                     __ptext12:	
  2204 ;; *************** function ___lbdiv *****************
  2205 ;; Defined at:
  2206 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  dividend        1    wreg     unsigned char 
  2209 ;;  divisor         1    3[COMMON] unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  dividend        1    4[COMMON] unsigned char 
  2212 ;;  quotient        1    6[COMMON] unsigned char 
  2213 ;;  counter         1    5[COMMON] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      unsigned char 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 100/0
  2220 ;;		On exit  : 100/0
  2221 ;;		Unchanged: 100/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1
  2223 ;;      Params:         1       0       0
  2224 ;;      Locals:         3       0       0
  2225 ;;      Temps:          0       0       0
  2226 ;;      Totals:         4       0       0
  2227 ;;Total ram usage:        4 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    2
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_ledCtr
  2234 ;;		_chrgCtr
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           
  2239                           ;psect for function ___lbdiv
  2240  058A                     ___lbdiv:	
  2241                           
  2242                           ;incstack = 0
  2243                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2244                           ;___lbdiv@dividend stored from wreg
  2245  058A  00F4               	movwf	___lbdiv@dividend
  2246  058B  01F6               	clrf	___lbdiv@quotient
  2247  058C  0873               	movf	___lbdiv@divisor,w
  2248  058D  1903               	btfsc	3,2
  2249  058E  2DA3               	goto	l2311
  2250  058F  01F5               	clrf	___lbdiv@counter
  2251  0590                     l2297:	
  2252  0590  0AF5               	incf	___lbdiv@counter,f
  2253  0591  1BF3               	btfsc	___lbdiv@divisor,7
  2254  0592  2D96               	goto	l1159
  2255  0593  1003               	clrc
  2256  0594  0DF3               	rlf	___lbdiv@divisor,f
  2257  0595  2D90               	goto	l2297
  2258  0596                     l1159:	
  2259  0596  1003               	clrc
  2260  0597  0DF6               	rlf	___lbdiv@quotient,f
  2261  0598  0873               	movf	___lbdiv@divisor,w
  2262  0599  0274               	subwf	___lbdiv@dividend,w
  2263  059A  1C03               	skipc
  2264  059B  2DA0               	goto	L7
  2265  059C  0873               	movf	___lbdiv@divisor,w
  2266  059D  02F4               	subwf	___lbdiv@dividend,f
  2267  059E  1476               	bsf	___lbdiv@quotient,0
  2268  059F  1003               	clrc
  2269  05A0                     L7:	
  2270  05A0  0CF3               	rrf	___lbdiv@divisor,f
  2271  05A1  0BF5               	decfsz	___lbdiv@counter,f
  2272  05A2  2D96               	goto	l1159
  2273  05A3                     l2311:	
  2274  05A3  0876               	movf	___lbdiv@quotient,w
  2275  05A4  0008               	return
  2276  05A5                     __end_of___lbdiv:	
  2277                           
  2278                           	psect	text13
  2279  02B0                     __ptext13:	
  2280 ;; *************** function _checkOutA *****************
  2281 ;; Defined at:
  2282 ;;		line 580 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2287 ;;  maxtempV        1    0        unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0, pclath, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 100/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1
  2297 ;;      Params:         0       0       0
  2298 ;;      Locals:         0       2       0
  2299 ;;      Temps:          2       0       0
  2300 ;;      Totals:         2       2       0
  2301 ;;Total ram usage:        4 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    3
  2304 ;; This function calls:
  2305 ;;		_ADC_Sample
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           
  2312                           ;psect for function _checkOutA
  2313  02B0                     _checkOutA:	
  2314                           
  2315                           ;main.c: 582: if(chrgFlag)
  2316                           
  2317                           ;incstack = 0
  2318                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2319  02B0  087A               	movf	_chrgFlag,w
  2320                           
  2321                           ;main.c: 583: {
  2322                           ;main.c: 584: test_adc = ADC_Sample(4, 5);
  2323  02B1  3005               	movlw	5
  2324  02B2  00F3               	movwf	ADC_Sample@adldo
  2325  02B3  1903               	btfsc	3,2
  2326  02B4  2AB7               	goto	L15
  2327  02B5  3004               	movlw	4
  2328  02B6  2AB8               	goto	L8
  2329  02B7                     L15:	
  2330                           ;main.c: 586: else
  2331                           ;main.c: 587: {
  2332                           ;main.c: 588: test_adc = ADC_Sample(0, 5);
  2333                           
  2334                           ;main.c: 585: }
  2335                           
  2336  02B7  3000               	movlw	0
  2337  02B8                     L8:	
  2338  02B8  211C               	fcall	_ADC_Sample
  2339  02B9  00D6               	movwf	_test_adc	;volatile
  2340                           
  2341                           ;main.c: 589: }
  2342                           ;main.c: 590: if (0xA5 == test_adc)
  2343  02BA  30A5               	movlw	165
  2344  02BB  0656               	xorwf	_test_adc,w	;volatile
  2345  02BC  1D03               	btfss	3,2
  2346  02BD  2B50               	goto	l3201
  2347                           
  2348                           ;main.c: 591: {
  2349                           ;main.c: 592: if(chrgFlag && adresult > 210)
  2350  02BE  087A               	movf	_chrgFlag,w
  2351  02BF  1903               	btfsc	3,2
  2352  02C0  2AD1               	goto	l3119
  2353  02C1  3000               	movlw	0
  2354  02C2  0235               	subwf	_adresult+1,w	;volatile
  2355  02C3  30D3               	movlw	211
  2356  02C4  1903               	skipnz
  2357  02C5  0234               	subwf	_adresult,w	;volatile
  2358  02C6  1C03               	skipc
  2359  02C7  2AD1               	goto	l3119
  2360                           
  2361                           ;main.c: 593: {
  2362                           ;main.c: 594: if(++overChrgTime > 10)
  2363  02C8  300B               	movlw	11
  2364  02C9  0AC5               	incf	_overChrgTime,f
  2365  02CA  0245               	subwf	_overChrgTime,w
  2366  02CB  1C03               	skipc
  2367  02CC  2AD2               	goto	l3121
  2368  02CD  3002               	movlw	2
  2369                           
  2370                           ;main.c: 595: {
  2371                           ;main.c: 596: overChrgTime = 0;
  2372  02CE  01C5               	clrf	_overChrgTime
  2373                           
  2374                           ;main.c: 597: protectFlag = 2;
  2375  02CF  00CF               	movwf	_protectFlag
  2376  02D0  2AD2               	goto	l3121
  2377  02D1                     l3119:	
  2378                           
  2379                           ;main.c: 601: else
  2380                           ;main.c: 602: {
  2381                           ;main.c: 603: overChrgTime = 0;
  2382  02D1  01C5               	clrf	_overChrgTime
  2383  02D2                     l3121:	
  2384                           
  2385                           ;main.c: 604: }
  2386                           ;main.c: 605: outADValue = adresult;
  2387  02D2  0835               	movf	_adresult+1,w	;volatile
  2388  02D3  00AF               	movwf	_outADValue+1
  2389  02D4  0834               	movf	_adresult,w	;volatile
  2390  02D5  00AE               	movwf	_outADValue
  2391                           
  2392                           ;main.c: 607: if(workStep && (outADValue > 220))
  2393  02D6  0879               	movf	_workStep,w
  2394  02D7  1903               	btfsc	3,2
  2395  02D8  2AE8               	goto	l3131
  2396  02D9  3000               	movlw	0
  2397  02DA  022F               	subwf	_outADValue+1,w
  2398  02DB  30DD               	movlw	221
  2399  02DC  1903               	skipnz
  2400  02DD  022E               	subwf	_outADValue,w
  2401  02DE  1C03               	skipc
  2402  02DF  2AE8               	goto	l3131
  2403                           
  2404                           ;main.c: 608: {
  2405                           ;main.c: 609: if(++workOverOutTime > 50)
  2406  02E0  3033               	movlw	51
  2407  02E1  0ACE               	incf	_workOverOutTime,f
  2408  02E2  024E               	subwf	_workOverOutTime,w
  2409  02E3  1C03               	skipc
  2410  02E4  2AE9               	goto	l3135
  2411                           
  2412                           ;main.c: 610: {
  2413                           ;main.c: 611: workOverOutTime = 0;
  2414  02E5  01CE               	clrf	_workOverOutTime
  2415                           
  2416                           ;main.c: 612: workStep = 0;
  2417  02E6  01F9               	clrf	_workStep
  2418  02E7  2AE9               	goto	l3135
  2419  02E8                     l3131:	
  2420                           
  2421                           ;main.c: 615: else
  2422                           ;main.c: 616: {
  2423                           ;main.c: 617: workOverOutTime = 0;
  2424  02E8  01CE               	clrf	_workOverOutTime
  2425  02E9                     l3135:	
  2426                           
  2427                           ;main.c: 620: if(workStep < 6 && outADValue > maxtempV)
  2428  02E9  3006               	movlw	6
  2429  02EA  0279               	subwf	_workStep,w
  2430  02EB  3000               	movlw	0
  2431  02EC  1803               	skipnc
  2432  02ED  2AFD               	goto	L16
  2433  02EE  022F               	subwf	_outADValue+1,w
  2434  02EF  3029               	movlw	41
  2435  02F0  1903               	skipnz
  2436  02F1  022E               	subwf	_outADValue,w
  2437  02F2  1C03               	skipc
  2438  02F3  2AFC               	goto	l3143
  2439  02F4                     l3139:	
  2440                           
  2441                           ;main.c: 621: {
  2442                           ;main.c: 622: if(++overCount > 5)
  2443  02F4  3006               	movlw	6
  2444  02F5  0AC9               	incf	_overCount,f
  2445  02F6  0249               	subwf	_overCount,w
  2446  02F7  1C03               	skipc
  2447  02F8  2B4C               	goto	l3197
  2448                           
  2449                           ;main.c: 623: {
  2450                           ;main.c: 624: overCount = 5;
  2451  02F9  3005               	movlw	5
  2452  02FA  00C9               	movwf	_overCount
  2453  02FB  2B4C               	goto	l3197
  2454  02FC                     l3143:	
  2455                           
  2456                           ;main.c: 627: else if(outADValue > (maxtempV+3))
  2457  02FC  3000               	movlw	0
  2458  02FD                     L16:	
  2459  02FD  022F               	subwf	_outADValue+1,w
  2460  02FE  302C               	movlw	44
  2461  02FF  1903               	skipnz
  2462  0300  022E               	subwf	_outADValue,w
  2463  0301  1803               	btfsc	3,0
  2464  0302  2AF4               	goto	l3139
  2465                           
  2466                           ;main.c: 634: else
  2467                           ;main.c: 635: {
  2468                           ;main.c: 636: unsigned char maxAout = 11;
  2469                           
  2470                           ;main.c: 628: {
  2471                           ;main.c: 629: if(++overCount > 5)
  2472  0303  300B               	movlw	11
  2473  0304  00E9               	movwf	checkOutA@maxAout
  2474                           
  2475                           ;main.c: 637: if(workStep == 1)
  2476  0305  0B79               	decfsz	_workStep,w
  2477  0306  2B09               	goto	l3155
  2478                           
  2479                           ;main.c: 638: {
  2480                           ;main.c: 639: maxAout = maxAout + 5;
  2481  0307  3005               	movlw	5
  2482  0308  2B26               	goto	L13
  2483  0309                     l3155:	
  2484                           ;main.c: 640: }
  2485                           
  2486                           
  2487                           ;main.c: 641: else if(workStep == 2)
  2488  0309  3002               	movlw	2
  2489  030A  0679               	xorwf	_workStep,w
  2490  030B  1D03               	btfss	3,2
  2491  030C  2B0F               	goto	l3159
  2492                           
  2493                           ;main.c: 642: {
  2494                           ;main.c: 643: maxAout = maxAout + 6;
  2495  030D  3006               	movlw	6
  2496  030E  2B26               	goto	L13
  2497  030F                     l3159:	
  2498                           ;main.c: 644: }
  2499                           
  2500                           
  2501                           ;main.c: 645: else if(workStep == 3)
  2502  030F  3003               	movlw	3
  2503  0310  0679               	xorwf	_workStep,w
  2504  0311  1D03               	btfss	3,2
  2505  0312  2B15               	goto	l3163
  2506                           
  2507                           ;main.c: 646: {
  2508                           ;main.c: 647: maxAout = maxAout + 7;
  2509  0313  3007               	movlw	7
  2510  0314  2B26               	goto	L13
  2511  0315                     l3163:	
  2512                           ;main.c: 648: }
  2513                           
  2514                           
  2515                           ;main.c: 649: else if(workStep == 4)
  2516  0315  3004               	movlw	4
  2517  0316  0679               	xorwf	_workStep,w
  2518  0317  1D03               	btfss	3,2
  2519  0318  2B1B               	goto	l3167
  2520                           
  2521                           ;main.c: 650: {
  2522                           ;main.c: 651: maxAout = maxAout + 8;
  2523  0319  3008               	movlw	8
  2524  031A  2B26               	goto	L13
  2525  031B                     l3167:	
  2526                           ;main.c: 652: }
  2527                           
  2528                           
  2529                           ;main.c: 653: else if(workStep == 5)
  2530  031B  3005               	movlw	5
  2531  031C  0679               	xorwf	_workStep,w
  2532  031D  1D03               	btfss	3,2
  2533  031E  2B21               	goto	l3171
  2534                           
  2535                           ;main.c: 654: {
  2536                           ;main.c: 655: maxAout = maxAout + 9;
  2537  031F  3009               	movlw	9
  2538  0320  2B26               	goto	L13
  2539  0321                     l3171:	
  2540                           ;main.c: 656: }
  2541                           
  2542                           
  2543                           ;main.c: 657: else if(workStep == 6)
  2544  0321  3006               	movlw	6
  2545  0322  0679               	xorwf	_workStep,w
  2546  0323  1D03               	btfss	3,2
  2547  0324  2B27               	goto	l810
  2548                           
  2549                           ;main.c: 658: {
  2550                           ;main.c: 659: maxAout = maxAout + 10;
  2551  0325  300A               	movlw	10
  2552  0326                     L13:	
  2553  0326  07E9               	addwf	checkOutA@maxAout,f
  2554  0327                     l810:	
  2555                           
  2556                           ;main.c: 660: }
  2557                           ;main.c: 661: if(overCount > 0)
  2558  0327  0849               	movf	_overCount,w
  2559  0328  1D03               	btfss	3,2
  2560                           
  2561                           ;main.c: 662: {
  2562                           ;main.c: 663: overCount--;
  2563  0329  03C9               	decf	_overCount,f
  2564                           
  2565                           ;main.c: 664: }
  2566                           ;main.c: 665: if(outADValue > maxAout)
  2567  032A  0869               	movf	checkOutA@maxAout,w
  2568  032B  00F4               	movwf	??_checkOutA
  2569  032C  01F5               	clrf	??_checkOutA+1
  2570  032D  082F               	movf	_outADValue+1,w
  2571  032E  0275               	subwf	??_checkOutA+1,w
  2572  032F  1D03               	skipz
  2573  0330  2B33               	goto	u3455
  2574  0331  082E               	movf	_outADValue,w
  2575  0332  0274               	subwf	??_checkOutA,w
  2576  0333                     u3455:	
  2577  0333  1803               	skipnc
  2578  0334  2B46               	goto	l3189
  2579                           
  2580                           ;main.c: 666: {
  2581                           ;main.c: 667: if(++addPowerCount > 3)
  2582  0335  3004               	movlw	4
  2583  0336  0AC8               	incf	_addPowerCount,f
  2584  0337  0248               	subwf	_addPowerCount,w
  2585  0338  1C03               	skipc
  2586  0339  2B4C               	goto	l3197
  2587                           
  2588                           ;main.c: 668: {
  2589                           ;main.c: 669: addPowerCount = 3;
  2590  033A  3003               	movlw	3
  2591  033B  00C8               	movwf	_addPowerCount
  2592                           
  2593                           ;main.c: 670: if(startTime == 0)
  2594  033C  0846               	movf	_startTime,w
  2595  033D  1D03               	btfss	3,2
  2596  033E  2B43               	goto	l3187
  2597                           
  2598                           ;main.c: 671: {
  2599                           ;main.c: 672: tempDuty = 87 + (workStep*2);
  2600  033F  1003               	clrc
  2601  0340  0D79               	rlf	_workStep,w
  2602  0341  3E57               	addlw	87
  2603  0342  2B44               	goto	L14
  2604  0343                     l3187:	
  2605                           ;main.c: 674: }
  2606                           
  2607                           
  2608                           ;main.c: 675: else
  2609                           ;main.c: 676: {
  2610                           ;main.c: 677: tempDuty = maxDuty;
  2611  0343  084A               	movf	_maxDuty,w
  2612  0344                     L14:	
  2613  0344  00C7               	movwf	_tempDuty
  2614  0345  2B4C               	goto	l3197
  2615  0346                     l3189:	
  2616                           
  2617                           ;main.c: 682: else
  2618                           ;main.c: 683: {
  2619                           ;main.c: 684: addPowerCount = 0;
  2620  0346  01C8               	clrf	_addPowerCount
  2621                           
  2622                           ;main.c: 685: if(tempDuty > maxDuty)
  2623  0347  0847               	movf	_tempDuty,w
  2624  0348  024A               	subwf	_maxDuty,w
  2625  0349  1803               	skipnc
  2626  034A  2B43               	goto	l3187
  2627                           
  2628                           ;main.c: 686: {
  2629                           ;main.c: 687: tempDuty--;
  2630  034B  03C7               	decf	_tempDuty,f
  2631  034C                     l3197:	
  2632                           ;main.c: 688: }
  2633                           
  2634                           
  2635                           ;main.c: 692: }
  2636                           ;main.c: 694: }
  2637                           ;main.c: 696: }
  2638                           ;main.c: 697: PWMD01H = 0X00;
  2639  034C  019E               	clrf	30	;volatile
  2640                           
  2641                           ;main.c: 698: PWMD1L = tempDuty;
  2642  034D  0847               	movf	_tempDuty,w
  2643  034E  009A               	movwf	26	;volatile
  2644                           
  2645                           ;main.c: 699: }
  2646  034F  0008               	return
  2647  0350                     l3201:	
  2648                           
  2649                           ;main.c: 700: else
  2650                           ;main.c: 701: {
  2651                           ;main.c: 702: ADCON0 = 0;
  2652  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0351  0195               	clrf	21	;volatile
  2654                           
  2655                           ;main.c: 703: ADCON1 = 0;
  2656  0352  0196               	clrf	22	;volatile
  2657                           
  2658                           ;main.c: 704: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2659  0353  3085               	movlw	133
  2660  0354  00F4               	movwf	??_checkOutA
  2661  0355                     u4177:	
  2662  0355  0BF4               	decfsz	??_checkOutA,f
  2663  0356  2B55               	goto	u4177
  2664  0357  0008               	return
  2665  0358                     __end_of_checkOutA:	
  2666                           
  2667                           	psect	text14
  2668  0205                     __ptext14:	
  2669 ;; *************** function _checkBatAD *****************
  2670 ;; Defined at:
  2671 ;;		line 708 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;		None
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;		None
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 100/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1
  2685 ;;      Params:         0       0       0
  2686 ;;      Locals:         0       0       0
  2687 ;;      Temps:          2       0       0
  2688 ;;      Totals:         2       0       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    3
  2692 ;; This function calls:
  2693 ;;		_ADC_Sample
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function _checkBatAD
  2701  0205                     _checkBatAD:	
  2702                           
  2703                           ;main.c: 710: test_adc = ADC_Sample(2, 5);
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2707  0205  3005               	movlw	5
  2708  0206  00F3               	movwf	ADC_Sample@adldo
  2709  0207  3002               	movlw	2
  2710  0208  211C               	fcall	_ADC_Sample
  2711  0209  00D6               	movwf	_test_adc	;volatile
  2712                           
  2713                           ;main.c: 711: if (0xA5 == test_adc)
  2714  020A  30A5               	movlw	165
  2715  020B  0656               	xorwf	_test_adc,w	;volatile
  2716  020C  1D03               	btfss	3,2
  2717  020D  2A6D               	goto	l3397
  2718                           
  2719                           ;main.c: 712: {
  2720                           ;main.c: 713: batADValue = adresult;
  2721  020E  0835               	movf	_adresult+1,w	;volatile
  2722  020F  00AD               	movwf	_batADValue+1
  2723  0210  0834               	movf	_adresult,w	;volatile
  2724  0211  00AC               	movwf	_batADValue
  2725                           
  2726                           ;main.c: 714: if(batADValue < 1117)
  2727  0212  3004               	movlw	4
  2728  0213  022D               	subwf	_batADValue+1,w
  2729  0214  305D               	movlw	93
  2730  0215  1903               	skipnz
  2731  0216  022C               	subwf	_batADValue,w
  2732  0217  1803               	skipnc
  2733  0218  2A33               	goto	l3379
  2734                           
  2735                           ;main.c: 715: {
  2736                           ;main.c: 716: pwStep = 0;
  2737  0219  01C4               	clrf	_pwStep
  2738                           
  2739                           ;main.c: 717: if(++count8s > 800)
  2740  021A  0AA2               	incf	_count8s,f
  2741  021B  1903               	skipnz
  2742  021C  0AA3               	incf	_count8s+1,f
  2743  021D  3003               	movlw	3
  2744  021E  0223               	subwf	_count8s+1,w
  2745  021F  3021               	movlw	33
  2746  0220  1903               	skipnz
  2747  0221  0222               	subwf	_count8s,w
  2748  0222  1C03               	skipc
  2749  0223  2A60               	goto	l3391
  2750                           
  2751                           ;main.c: 718: {
  2752                           ;main.c: 719: count8s = 0;
  2753  0224  01A2               	clrf	_count8s
  2754  0225  01A3               	clrf	_count8s+1
  2755                           
  2756                           ;main.c: 720: lowBatFlag = 1;
  2757  0226  01B7               	clrf	_lowBatFlag
  2758  0227  0AB7               	incf	_lowBatFlag,f
  2759                           
  2760                           ;main.c: 721: if(workStep > 0)
  2761  0228  0879               	movf	_workStep,w
  2762  0229  1903               	btfsc	3,2
  2763  022A  2A30               	goto	l3375
  2764                           
  2765                           ;main.c: 722: {
  2766                           ;main.c: 723: overWorkTime = 120;
  2767  022B  3078               	movlw	120
  2768  022C  00A4               	movwf	_overWorkTime
  2769  022D  01A5               	clrf	_overWorkTime+1
  2770                           
  2771                           ;main.c: 724: preLedStep = workStep;
  2772  022E  0879               	movf	_workStep,w
  2773  022F  00B8               	movwf	_preLedStep
  2774  0230                     l3375:	
  2775                           
  2776                           ;main.c: 725: }
  2777                           ;main.c: 726: prePwStep = 0;
  2778  0230  01F7               	clrf	_prePwStep
  2779                           
  2780                           ;main.c: 727: workStep = 0;
  2781  0231  01F9               	clrf	_workStep
  2782  0232  2A60               	goto	l3391
  2783  0233                     l3379:	
  2784  0233  3005               	movlw	5
  2785                           
  2786                           ;main.c: 730: else
  2787                           ;main.c: 731: {
  2788                           ;main.c: 732: count8s = 0;
  2789  0234  01A2               	clrf	_count8s
  2790  0235  01A3               	clrf	_count8s+1
  2791                           
  2792                           ;main.c: 733: if(batADValue >= 1340)
  2793  0236  022D               	subwf	_batADValue+1,w
  2794  0237  303C               	movlw	60
  2795  0238  1903               	skipnz
  2796  0239  022C               	subwf	_batADValue,w
  2797                           
  2798                           ;main.c: 734: {
  2799                           ;main.c: 735: pwStep = ((batADValue - 1340) /2) + 13;
  2800  023A  082C               	movf	_batADValue,w
  2801  023B  1C03               	skipc
  2802  023C  2A4A               	goto	L18
  2803  023D  3EC4               	addlw	196
  2804  023E  00F4               	movwf	??_checkBatAD
  2805  023F  082D               	movf	_batADValue+1,w
  2806  0240  1803               	skipnc
  2807  0241  3E01               	addlw	1
  2808  0242  3EFA               	addlw	250
  2809  0243  00F5               	movwf	??_checkBatAD+1
  2810  0244  1003               	clrc
  2811  0245  0CF5               	rrf	??_checkBatAD+1,f
  2812  0246  0CF4               	rrf	??_checkBatAD,f
  2813  0247  0874               	movf	??_checkBatAD,w
  2814  0248  3E0D               	addlw	13
  2815  0249  2A59               	goto	L17
  2816  024A                     L18:	
  2817                           ;main.c: 737: else
  2818                           ;main.c: 738: {
  2819                           ;main.c: 739: pwStep = (batADValue - 1117) / 16;
  2820                           
  2821                           ;main.c: 736: }
  2822                           
  2823  024A  3EA3               	addlw	163
  2824  024B  00F4               	movwf	??_checkBatAD
  2825  024C  082D               	movf	_batADValue+1,w
  2826  024D  1803               	skipnc
  2827  024E  3E01               	addlw	1
  2828  024F  3EFB               	addlw	251
  2829  0250  00F5               	movwf	??_checkBatAD+1
  2830  0251  3004               	movlw	4
  2831  0252                     u3845:	
  2832  0252  1003               	clrc
  2833  0253  0CF5               	rrf	??_checkBatAD+1,f
  2834  0254  0CF4               	rrf	??_checkBatAD,f
  2835  0255  3EFF               	addlw	-1
  2836  0256  1D03               	skipz
  2837  0257  2A52               	goto	u3845
  2838  0258  0874               	movf	??_checkBatAD,w
  2839  0259                     L17:	
  2840  0259  00C4               	movwf	_pwStep
  2841                           
  2842                           ;main.c: 740: }
  2843                           ;main.c: 741: if(pwStep > 99)
  2844  025A  3064               	movlw	100
  2845  025B  0244               	subwf	_pwStep,w
  2846  025C  1C03               	skipc
  2847  025D  2A60               	goto	l3391
  2848                           
  2849                           ;main.c: 742: {
  2850                           ;main.c: 743: pwStep = 99;
  2851  025E  3063               	movlw	99
  2852  025F  00C4               	movwf	_pwStep
  2853  0260                     l3391:	
  2854                           
  2855                           ;main.c: 744: }
  2856                           ;main.c: 745: }
  2857                           ;main.c: 746: if(chrgFlag && batADValue > 1861)
  2858  0260  087A               	movf	_chrgFlag,w
  2859  0261  1903               	btfsc	3,2
  2860  0262  2A74               	goto	l3401
  2861  0263  3007               	movlw	7
  2862  0264  022D               	subwf	_batADValue+1,w
  2863  0265  3046               	movlw	70
  2864  0266  1903               	skipnz
  2865  0267  022C               	subwf	_batADValue,w
  2866  0268  1C03               	skipc
  2867  0269  2A74               	goto	l3401
  2868                           
  2869                           ;main.c: 747: {
  2870                           ;main.c: 748: protectFlag = 1;
  2871  026A  01CF               	clrf	_protectFlag
  2872  026B  0ACF               	incf	_protectFlag,f
  2873  026C  2A74               	goto	l3401
  2874  026D                     l3397:	
  2875                           
  2876                           ;main.c: 751: else
  2877                           ;main.c: 752: {
  2878                           ;main.c: 753: ADCON0 = 0;
  2879  026D  1683               	bsf	3,5	;RP0=1, select bank1
  2880  026E  0195               	clrf	21	;volatile
  2881                           
  2882                           ;main.c: 754: ADCON1 = 0;
  2883  026F  0196               	clrf	22	;volatile
  2884                           
  2885                           ;main.c: 755: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2886  0270  3085               	movlw	133
  2887  0271  00F4               	movwf	??_checkBatAD
  2888  0272                     u4187:	
  2889  0272  0BF4               	decfsz	??_checkBatAD,f
  2890  0273  2A72               	goto	u4187
  2891  0274                     l3401:	
  2892                           
  2893                           ;main.c: 756: }
  2894                           ;main.c: 757: test_adc = ADC_Sample(3, 5);
  2895  0274  3005               	movlw	5
  2896  0275  00F3               	movwf	ADC_Sample@adldo
  2897  0276  3003               	movlw	3
  2898  0277  211C               	fcall	_ADC_Sample
  2899  0278  00D6               	movwf	_test_adc	;volatile
  2900                           
  2901                           ;main.c: 758: if (0xA5 == test_adc)
  2902  0279  30A5               	movlw	165
  2903  027A  0656               	xorwf	_test_adc,w	;volatile
  2904  027B  1D03               	btfss	3,2
  2905  027C  2AA8               	goto	l3421
  2906                           
  2907                           ;main.c: 759: {
  2908                           ;main.c: 760: if(chrgFlag && adresult > 100)
  2909  027D  087A               	movf	_chrgFlag,w
  2910  027E  1903               	btfsc	3,2
  2911  027F  0008               	return
  2912  0280  3000               	movlw	0
  2913  0281  0235               	subwf	_adresult+1,w	;volatile
  2914  0282  3065               	movlw	101
  2915  0283  1903               	skipnz
  2916  0284  0234               	subwf	_adresult,w	;volatile
  2917  0285  1C03               	skipc
  2918  0286  0008               	return
  2919                           
  2920                           ;main.c: 761: {
  2921                           ;main.c: 763: if(adresult > 810 || (batADValue - adresult) > 810)
  2922  0287  3003               	movlw	3
  2923  0288  0235               	subwf	_adresult+1,w	;volatile
  2924  0289  302B               	movlw	43
  2925  028A  1903               	skipnz
  2926  028B  0234               	subwf	_adresult,w	;volatile
  2927  028C  1803               	skipnc
  2928  028D  2A9D               	goto	l3413
  2929  028E  0834               	movf	_adresult,w	;volatile
  2930  028F  022C               	subwf	_batADValue,w
  2931  0290  00F4               	movwf	??_checkBatAD
  2932  0291  0835               	movf	_adresult+1,w	;volatile
  2933  0292  1C03               	skipc
  2934  0293  0A35               	incf	_adresult+1,w	;volatile
  2935  0294  022D               	subwf	_batADValue+1,w
  2936  0295  00F5               	movwf	??_checkBatAD+1
  2937  0296  3003               	movlw	3
  2938  0297  0275               	subwf	??_checkBatAD+1,w
  2939  0298  302B               	movlw	43
  2940  0299  1903               	skipnz
  2941  029A  0274               	subwf	??_checkBatAD,w
  2942  029B  1C03               	skipc
  2943  029C  2AA6               	goto	l3419
  2944  029D                     l3413:	
  2945                           
  2946                           ;main.c: 764: {
  2947                           ;main.c: 766: if(++countHalfFull > 250)
  2948  029D  30FB               	movlw	251
  2949  029E  0AD0               	incf	_countHalfFull,f
  2950  029F  0250               	subwf	_countHalfFull,w
  2951  02A0  1C03               	skipc
  2952  02A1  0008               	return
  2953  02A2  3002               	movlw	2
  2954                           
  2955                           ;main.c: 767: {
  2956                           ;main.c: 768: countHalfFull = 0;
  2957  02A3  01D0               	clrf	_countHalfFull
  2958                           
  2959                           ;main.c: 769: protectFlag = 2;
  2960  02A4  00CF               	movwf	_protectFlag
  2961  02A5  0008               	return
  2962  02A6                     l3419:	
  2963                           
  2964                           ;main.c: 772: else
  2965                           ;main.c: 773: {
  2966                           ;main.c: 774: countHalfFull = 0;
  2967  02A6  01D0               	clrf	_countHalfFull
  2968                           
  2969                           ;main.c: 775: }
  2970                           ;main.c: 776: }
  2971                           ;main.c: 777: }
  2972  02A7  0008               	return
  2973  02A8                     l3421:	
  2974                           
  2975                           ;main.c: 778: else
  2976                           ;main.c: 779: {
  2977                           ;main.c: 780: ADCON0 = 0;
  2978  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2979  02A9  0195               	clrf	21	;volatile
  2980                           
  2981                           ;main.c: 781: ADCON1 = 0;
  2982  02AA  0196               	clrf	22	;volatile
  2983                           
  2984                           ;main.c: 782: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2985  02AB  3085               	movlw	133
  2986  02AC  00F4               	movwf	??_checkBatAD
  2987  02AD                     u4197:	
  2988  02AD  0BF4               	decfsz	??_checkBatAD,f
  2989  02AE  2AAD               	goto	u4197
  2990  02AF  0008               	return
  2991  02B0                     __end_of_checkBatAD:	
  2992                           
  2993                           	psect	text15
  2994  011C                     __ptext15:	
  2995 ;; *************** function _ADC_Sample *****************
  2996 ;; Defined at:
  2997 ;;		line 1015 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  adch            1    wreg     unsigned char 
  3000 ;;  adldo           1    3[COMMON] unsigned char 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  adch            1    5[BANK0 ] unsigned char 
  3003 ;;  j               1    4[BANK0 ] unsigned char 
  3004 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3005 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3006 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3007 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3008 ;;  i               1    6[BANK0 ] unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      unsigned char 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 100/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMMON   BANK0   BANK1
  3018 ;;      Params:         1       0       0
  3019 ;;      Locals:         0      13       0
  3020 ;;      Temps:          0       4       0
  3021 ;;      Totals:         1      17       0
  3022 ;;Total ram usage:       18 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    2
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_checkOutA
  3029 ;;		_checkBatAD
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _ADC_Sample
  3035  011C                     _ADC_Sample:	
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3039                           ;ADC_Sample@adch stored from wreg
  3040  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3041  011D  00DC               	movwf	ADC_Sample@adch
  3042                           
  3043                           ;main.c: 1017: volatile unsigned long adsum = 0;
  3044                           
  3045                           ;main.c: 1018: volatile unsigned int admin = 0, admax = 0;
  3046  011E  21F7               	fcall	PL4	;call to abstracted procedure
  3047                           
  3048                           ;main.c: 1019: volatile unsigned int ad_temp = 0;
  3049  011F  01E6               	clrf	ADC_Sample@ad_temp	;volatile
  3050  0120  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3051                           
  3052                           ;main.c: 1021: if ((!LDO_EN) && (adldo & 0x04) )
  3053  0121  1683               	bsf	3,5	;RP0=1, select bank1
  3054  0122  1D16               	btfss	22,2	;volatile
  3055  0123  1D73               	btfss	ADC_Sample@adldo,2
  3056  0124  292E               	goto	l3001
  3057                           
  3058                           ;main.c: 1022: {
  3059                           ;main.c: 1024: ADCON1 = adldo;
  3060  0125  0873               	movf	ADC_Sample@adldo,w
  3061  0126  0096               	movwf	22	;volatile
  3062                           
  3063                           ;main.c: 1025: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3064  0127  3084               	movlw	132
  3065  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0129  00D7               	movwf	??_ADC_Sample
  3067  012A                     u4207:	
  3068  012A  0BD7               	decfsz	??_ADC_Sample,f
  3069  012B  292A               	goto	u4207
  3070  012C  292D               	nop2
  3071                           
  3072                           ;main.c: 1026: }
  3073  012D  2930               	goto	l3003
  3074  012E                     l3001:	
  3075                           
  3076                           ;main.c: 1027: else
  3077                           ;main.c: 1028: ADCON1 = adldo;
  3078  012E  0873               	movf	ADC_Sample@adldo,w
  3079  012F  0096               	movwf	22	;volatile
  3080  0130                     l3003:	
  3081                           
  3082                           ;main.c: 1030: if(adch & 0x10)
  3083  0130  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0131  1E5C               	btfss	ADC_Sample@adch,4
  3085  0132  2938               	goto	l3011
  3086                           
  3087                           ;main.c: 1031: {
  3088                           ;main.c: 1032: CHS4 = 1;
  3089  0133  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0134  1716               	bsf	22,6	;volatile
  3091                           
  3092                           ;main.c: 1033: adch &= 0x0f;
  3093  0135  300F               	movlw	15
  3094  0136  1283               	bcf	3,5	;RP0=0, select bank0
  3095  0137  05DC               	andwf	ADC_Sample@adch,f
  3096  0138                     l3011:	
  3097                           
  3098                           ;main.c: 1036: for (i = 0; i < 10; i++)
  3099  0138  01DD               	clrf	ADC_Sample@i
  3100  0139                     l3017:	
  3101                           
  3102                           ;main.c: 1037: {
  3103                           ;main.c: 1038: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3104  0139  085C               	movf	ADC_Sample@adch,w
  3105  013A  00D7               	movwf	??_ADC_Sample
  3106  013B  3001               	movlw	1
  3107  013C  1003               	clrc
  3108  013D                     L19:	
  3109  013D  0DD7               	rlf	??_ADC_Sample,f
  3110  013E  3EFF               	addlw	-1
  3111  013F  1003               	clrc
  3112  0140  1D03               	skipz
  3113  0141  293D               	goto	L19
  3114  0142  0D57               	rlf	??_ADC_Sample,w
  3115  0143  3841               	iorlw	65
  3116  0144  1683               	bsf	3,5	;RP0=1, select bank1
  3117  0145  0095               	movwf	21	;volatile
  3118  0146  0000               	nop	;# 
  3119  0147  0000               	nop	;# 
  3120  0148  0000               	nop	;# 
  3121  0149  0000               	nop	;# 
  3122                           
  3123                           ;main.c: 1043: GODONE = 1;
  3124  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3125  014B  1495               	bsf	21,1	;volatile
  3126                           
  3127                           ;main.c: 1045: unsigned char j = 0;
  3128  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3129  014D  01DB               	clrf	ADC_Sample@j
  3130  014E                     l882:	
  3131                           ;main.c: 1046: while (GODONE)
  3132                           
  3133  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3134  014F  1C95               	btfss	21,1	;volatile
  3135  0150  2959               	goto	l3027
  3136                           
  3137                           ;main.c: 1047: {
  3138                           ;main.c: 1048: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3139  0151  2952               	nop2	;2 cycle nop
  3140  0152  2953               	nop2	;2 cycle nop
  3141  0153  2954               	nop2	;2 cycle nop
  3142  0154  2955               	nop2	;2 cycle nop
  3143                           
  3144                           ;main.c: 1050: if (0 == (--j))
  3145  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0156  0BDB               	decfsz	ADC_Sample@j,f
  3147  0157  294E               	goto	l882
  3148                           
  3149                           ;main.c: 1051: return 0;
  3150  0158  3400               	retlw	0
  3151  0159                     l3027:	
  3152                           
  3153                           ;main.c: 1052: }
  3154                           ;main.c: 1054: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3155  0159  0819               	movf	25,w	;volatile
  3156  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3157  015B  00E6               	movwf	ADC_Sample@ad_temp	;volatile
  3158  015C  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3159  015D  0EE6               	swapf	ADC_Sample@ad_temp,f	;volatile
  3160  015E  0EE7               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3161  015F  30F0               	movlw	240
  3162  0160  05E7               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3163  0161  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3164  0162  390F               	andlw	15
  3165  0163  04E7               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3166  0164  30F0               	movlw	240
  3167  0165  05E6               	andwf	ADC_Sample@ad_temp,f	;volatile
  3168  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3169  0167  0E18               	swapf	24,w	;volatile
  3170  0168  390F               	andlw	15
  3171  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3172  016A  07E6               	addwf	ADC_Sample@ad_temp,f	;volatile
  3173  016B  1803               	skipnc
  3174  016C  0AE7               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3175                           
  3176                           ;main.c: 1056: if (0 == admax)
  3177  016D  0864               	movf	ADC_Sample@admax,w	;volatile
  3178  016E  0465               	iorwf	ADC_Sample@admax+1,w	;volatile
  3179  016F  1D03               	btfss	3,2
  3180  0170  2973               	goto	l3035
  3181                           
  3182                           ;main.c: 1057: {
  3183                           ;main.c: 1058: admax = ad_temp;
  3184  0171  2200               	fcall	PL10	;call to abstracted procedure
  3185  0172  2985               	goto	l3041
  3186  0173                     l3035:	
  3187                           ;main.c: 1060: }
  3188                           
  3189                           ;main.c: 1059: admin = ad_temp;
  3190                           
  3191                           
  3192                           ;main.c: 1061: else if (ad_temp > admax)
  3193  0173  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3194  0174  0265               	subwf	ADC_Sample@admax+1,w	;volatile
  3195  0175  1D03               	skipz
  3196  0176  2979               	goto	u3105
  3197  0177  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3198  0178  0264               	subwf	ADC_Sample@admax,w	;volatile
  3199  0179                     u3105:	
  3200  0179  1803               	skipnc
  3201  017A  297D               	goto	l3039
  3202                           
  3203                           ;main.c: 1062: admax = ad_temp;
  3204  017B  2200               	fcall	PL10	;call to abstracted procedure
  3205  017C  2989               	goto	l888
  3206  017D                     l3039:	
  3207                           
  3208                           ;main.c: 1063: else if (ad_temp < admin)
  3209  017D  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3210  017E  0267               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3211  017F  1D03               	skipz
  3212  0180  2983               	goto	u3115
  3213  0181  0862               	movf	ADC_Sample@admin,w	;volatile
  3214  0182  0266               	subwf	ADC_Sample@ad_temp,w	;volatile
  3215  0183                     u3115:	
  3216  0183  1803               	skipnc
  3217  0184  2989               	goto	l888
  3218  0185                     l3041:	
  3219                           
  3220                           ;main.c: 1064: admin = ad_temp;
  3221  0185  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3222  0186  00E3               	movwf	ADC_Sample@admin+1	;volatile
  3223  0187  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3224  0188  00E2               	movwf	ADC_Sample@admin	;volatile
  3225  0189                     l888:	
  3226                           
  3227                           ;main.c: 1066: adsum += ad_temp;
  3228  0189  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3229  018A  00D7               	movwf	??_ADC_Sample
  3230  018B  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3231  018C  00D8               	movwf	??_ADC_Sample+1
  3232  018D  01D9               	clrf	??_ADC_Sample+2
  3233  018E  01DA               	clrf	??_ADC_Sample+3
  3234  018F  0857               	movf	??_ADC_Sample,w
  3235  0190  07DE               	addwf	ADC_Sample@adsum,f	;volatile
  3236  0191  0858               	movf	??_ADC_Sample+1,w
  3237  0192  1103               	clrz
  3238  0193  1803               	skipnc
  3239  0194  3E01               	addlw	1
  3240  0195  1D03               	btfss	3,2
  3241  0196  07DF               	addwf	ADC_Sample@adsum+1,f	;volatile
  3242  0197  0859               	movf	??_ADC_Sample+2,w
  3243  0198  1103               	clrz
  3244  0199  1803               	skipnc
  3245  019A  3E01               	addlw	1
  3246  019B  1D03               	btfss	3,2
  3247  019C  07E0               	addwf	ADC_Sample@adsum+2,f	;volatile
  3248  019D  085A               	movf	??_ADC_Sample+3,w
  3249  019E  1103               	clrz
  3250  019F  1803               	skipnc
  3251  01A0  3E01               	addlw	1
  3252  01A1  1D03               	btfss	3,2
  3253  01A2  07E1               	addwf	ADC_Sample@adsum+3,f	;volatile
  3254  01A3  300A               	movlw	10
  3255  01A4  0ADD               	incf	ADC_Sample@i,f
  3256  01A5  025D               	subwf	ADC_Sample@i,w
  3257  01A6  1C03               	skipc
  3258  01A7  2939               	goto	l3017
  3259                           
  3260                           ;main.c: 1067: }
  3261                           ;main.c: 1068: adsum -= admax;
  3262  01A8  0864               	movf	ADC_Sample@admax,w	;volatile
  3263  01A9  00D7               	movwf	??_ADC_Sample
  3264  01AA  0865               	movf	ADC_Sample@admax+1,w	;volatile
  3265  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3266  01AC  1C03               	skipc
  3267  01AD  0F5A               	incfsz	??_ADC_Sample+3,w
  3268  01AE  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3269                           
  3270                           ;main.c: 1069: if (adsum >= admin)
  3271  01AF  0862               	movf	ADC_Sample@admin,w	;volatile
  3272  01B0  00D7               	movwf	??_ADC_Sample
  3273  01B1  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3274  01B2  00D8               	movwf	??_ADC_Sample+1
  3275  01B3  01D9               	clrf	??_ADC_Sample+2
  3276  01B4  01DA               	clrf	??_ADC_Sample+3
  3277  01B5  085A               	movf	??_ADC_Sample+3,w
  3278  01B6  0261               	subwf	ADC_Sample@adsum+3,w	;volatile
  3279  01B7  1D03               	skipz
  3280  01B8  29C3               	goto	u3155
  3281  01B9  0859               	movf	??_ADC_Sample+2,w
  3282  01BA  0260               	subwf	ADC_Sample@adsum+2,w	;volatile
  3283  01BB  1D03               	skipz
  3284  01BC  29C3               	goto	u3155
  3285  01BD  0858               	movf	??_ADC_Sample+1,w
  3286  01BE  025F               	subwf	ADC_Sample@adsum+1,w	;volatile
  3287  01BF  1D03               	skipz
  3288  01C0  29C3               	goto	u3155
  3289  01C1  0857               	movf	??_ADC_Sample,w
  3290  01C2  025E               	subwf	ADC_Sample@adsum,w	;volatile
  3291  01C3                     u3155:	
  3292  01C3  1C03               	skipc
  3293  01C4  29CD               	goto	l892
  3294                           
  3295                           ;main.c: 1070: adsum -= admin;
  3296  01C5  0862               	movf	ADC_Sample@admin,w	;volatile
  3297  01C6  00D7               	movwf	??_ADC_Sample
  3298  01C7  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3299  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3300  01C9  1C03               	skipc
  3301  01CA  0F5A               	incfsz	??_ADC_Sample+3,w
  3302  01CB  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3303  01CC  29D1               	goto	l3051
  3304  01CD                     l892:	
  3305                           
  3306                           ;main.c: 1071: else
  3307                           ;main.c: 1072: adsum = 0;
  3308  01CD  01DE               	clrf	ADC_Sample@adsum	;volatile
  3309  01CE  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3310  01CF  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3311  01D0  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3312  01D1                     l3051:	
  3313                           
  3314                           ;main.c: 1074: adresult = adsum >> 3;
  3315  01D1  085E               	movf	ADC_Sample@adsum,w	;volatile
  3316  01D2  00D7               	movwf	??_ADC_Sample
  3317  01D3  085F               	movf	ADC_Sample@adsum+1,w	;volatile
  3318  01D4  00D8               	movwf	??_ADC_Sample+1
  3319  01D5  0860               	movf	ADC_Sample@adsum+2,w	;volatile
  3320  01D6  00D9               	movwf	??_ADC_Sample+2
  3321  01D7  0861               	movf	ADC_Sample@adsum+3,w	;volatile
  3322  01D8  00DA               	movwf	??_ADC_Sample+3
  3323  01D9  3003               	movlw	3
  3324  01DA                     u3175:	
  3325  01DA  1003               	clrc
  3326  01DB  0CDA               	rrf	??_ADC_Sample+3,f
  3327  01DC  0CD9               	rrf	??_ADC_Sample+2,f
  3328  01DD  0CD8               	rrf	??_ADC_Sample+1,f
  3329  01DE  0CD7               	rrf	??_ADC_Sample,f
  3330  01DF  3EFF               	addlw	-1
  3331  01E0  1D03               	skipz
  3332  01E1  29DA               	goto	u3175
  3333  01E2  0858               	movf	??_ADC_Sample+1,w
  3334  01E3  00B5               	movwf	_adresult+1	;volatile
  3335  01E4  0857               	movf	??_ADC_Sample,w
  3336  01E5  00B4               	movwf	_adresult	;volatile
  3337                           
  3338                           ;main.c: 1076: adsum = 0;
  3339                           
  3340                           ;main.c: 1077: admin = 0;
  3341                           
  3342                           ;main.c: 1078: admax = 0;
  3343  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3344                           
  3345                           ;main.c: 1079: return 0xA5;
  3346  01E7  34A5               	retlw	165
  3347  01E8                     __end_of_ADC_Sample:	
  3348  01E8                     PL2:	
  3349  01E8  00D8               	movwf	??_ADC_Sample+1
  3350  01E9  01D9               	clrf	??_ADC_Sample+2
  3351  01EA  01DA               	clrf	??_ADC_Sample+3
  3352  01EB  0857               	movf	??_ADC_Sample,w
  3353  01EC  02DE               	subwf	ADC_Sample@adsum,f	;volatile
  3354  01ED  0858               	movf	??_ADC_Sample+1,w
  3355  01EE  1C03               	skipc
  3356  01EF  0F58               	incfsz	??_ADC_Sample+1,w
  3357  01F0  02DF               	subwf	ADC_Sample@adsum+1,f	;volatile
  3358  01F1  0859               	movf	??_ADC_Sample+2,w
  3359  01F2  1C03               	skipc
  3360  01F3  0F59               	incfsz	??_ADC_Sample+2,w
  3361  01F4  02E0               	subwf	ADC_Sample@adsum+2,f	;volatile
  3362  01F5  085A               	movf	??_ADC_Sample+3,w
  3363  01F6  0008               	return
  3364  01F7                     __end_ofPL2:	
  3365  01F7                     PL4:	
  3366  01F7  01DE               	clrf	ADC_Sample@adsum	;volatile
  3367  01F8  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3368  01F9  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3369  01FA  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3370  01FB  01E2               	clrf	ADC_Sample@admin	;volatile
  3371  01FC  01E3               	clrf	ADC_Sample@admin+1	;volatile
  3372  01FD  01E4               	clrf	ADC_Sample@admax	;volatile
  3373  01FE  01E5               	clrf	ADC_Sample@admax+1	;volatile
  3374  01FF  0008               	return
  3375  0200                     __end_ofPL4:	
  3376  0200                     PL10:	
  3377  0200  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3378  0201  00E5               	movwf	ADC_Sample@admax+1	;volatile
  3379  0202  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3380  0203  00E4               	movwf	ADC_Sample@admax	;volatile
  3381  0204  0008               	return
  3382  0205                     __end_ofPL10:	
  3383                           
  3384                           	psect	text16
  3385  0409                     __ptext16:	
  3386 ;; *************** function _Sleep_Mode *****************
  3387 ;; Defined at:
  3388 ;;		line 939 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;		None
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, pclath, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 100/0
  3399 ;;		On exit  : 100/100
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMMON   BANK0   BANK1
  3402 ;;      Params:         0       0       0
  3403 ;;      Locals:         0       0       0
  3404 ;;      Temps:          0       0       0
  3405 ;;      Totals:         0       0       0
  3406 ;;Total ram usage:        0 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    3
  3409 ;; This function calls:
  3410 ;;		_AD_Init
  3411 ;;		_Init_System
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _Sleep_Mode
  3419  0409                     _Sleep_Mode:	
  3420                           
  3421                           ;main.c: 941: INTCON = 0;
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3425  0409  018B               	clrf	11	;volatile
  3426                           
  3427                           ;main.c: 943: OPTION_REG = 0;
  3428  040A  0181               	clrf	1	;volatile
  3429                           
  3430                           ;main.c: 945: TRISA = 0x1F;
  3431  040B  301F               	movlw	31
  3432  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3433  040D  0085               	movwf	5	;volatile
  3434                           
  3435                           ;main.c: 946: WPUA = 0B00000000;
  3436  040E  0188               	clrf	8	;volatile
  3437                           
  3438                           ;main.c: 947: PORTA = 0x00;
  3439  040F  0186               	clrf	6	;volatile
  3440                           
  3441                           ;main.c: 948: TRISB = 0B00000100;
  3442  0410  3004               	movlw	4
  3443  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0412  0085               	movwf	5	;volatile
  3445                           
  3446                           ;main.c: 949: PORTB = 0B00000000;
  3447  0413  0186               	clrf	6	;volatile
  3448                           
  3449                           ;main.c: 950: WPUB = 0B00000100;
  3450  0414  0088               	movwf	8	;volatile
  3451                           
  3452                           ;main.c: 952: ADCON0 = 0;
  3453  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3454  0416  0195               	clrf	21	;volatile
  3455                           
  3456                           ;main.c: 953: ADCON1 = 0;
  3457  0417  0196               	clrf	22	;volatile
  3458                           
  3459                           ;main.c: 955: PWMCON0 = 0;
  3460  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0419  0195               	clrf	21	;volatile
  3462                           
  3463                           ;main.c: 957: OSCCON = 0X70;
  3464  041A  3070               	movlw	112
  3465  041B  0094               	movwf	20	;volatile
  3466                           
  3467                           ;main.c: 959: IOCA = 0B00000010;
  3468  041C  3002               	movlw	2
  3469  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3470  041E  0089               	movwf	9	;volatile
  3471                           
  3472                           ;main.c: 960: IOCB = 0B00000100;
  3473  041F  3004               	movlw	4
  3474  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0421  0089               	movwf	9	;volatile
  3476                           
  3477                           ;main.c: 962: RAIE = 1;
  3478  0422  158E               	bsf	14,3	;volatile
  3479                           
  3480                           ;main.c: 963: PEIE = 1;
  3481  0423  170B               	bsf	11,6	;volatile
  3482                           
  3483                           ;main.c: 964: RBIE = 1;
  3484  0424  158B               	bsf	11,3	;volatile
  3485                           
  3486                           ;main.c: 965: GIE = 0;
  3487  0425  138B               	bcf	11,7	;volatile
  3488                           
  3489                           ;main.c: 967: PIE1 &= 0X08;
  3490  0426  3008               	movlw	8
  3491  0427  058E               	andwf	14,f	;volatile
  3492                           
  3493                           ;main.c: 968: PIR1 = 0;
  3494  0428  018D               	clrf	13	;volatile
  3495                           
  3496                           ;main.c: 969: INTCON &= 0XC8;
  3497  0429  30C8               	movlw	200
  3498  042A  058B               	andwf	11,f	;volatile
  3499                           
  3500                           ;main.c: 971: PORTA;
  3501  042B  1683               	bsf	3,5	;RP0=1, select bank1
  3502  042C  0806               	movf	6,w	;volatile
  3503                           
  3504                           ;main.c: 972: RAIF = 0;
  3505  042D  1283               	bcf	3,5	;RP0=0, select bank0
  3506  042E  118D               	bcf	13,3	;volatile
  3507                           
  3508                           ;main.c: 973: PORTB;
  3509  042F  0806               	movf	6,w	;volatile
  3510                           
  3511                           ;main.c: 974: RBIF = 0;
  3512  0430  100B               	bcf	11,0	;volatile
  3513  0431  0064               	clrwdt	;# 
  3514  0432  0063               	sleep	;# 
  3515  0433  0000               	nop	;# 
  3516  0434  0064               	clrwdt	;# 
  3517  0435  0000               	nop	;# 
  3518  0436  0000               	nop	;# 
  3519  0437  0000               	nop	;# 
  3520  0438  0000               	nop	;# 
  3521  0439  0000               	nop	;# 
  3522                           
  3523                           ;main.c: 986: if(RAIF) RAIF = 0;
  3524  043A  1283               	bcf	3,5	;RP0=0, select bank0
  3525  043B  198D               	btfsc	13,3	;volatile
  3526  043C  118D               	bcf	13,3	;volatile
  3527                           
  3528                           ;main.c: 987: if(RBIF) RBIF = 0;
  3529  043D  180B               	btfsc	11,0	;volatile
  3530  043E  100B               	bcf	11,0	;volatile
  3531                           
  3532                           ;main.c: 988: if(TMR2IF) TMR2IF = 0;
  3533  043F  188D               	btfsc	13,1	;volatile
  3534  0440  108D               	bcf	13,1	;volatile
  3535                           
  3536                           ;main.c: 989: IOCA = 0B00000000;
  3537  0441  1683               	bsf	3,5	;RP0=1, select bank1
  3538  0442  0189               	clrf	9	;volatile
  3539                           
  3540                           ;main.c: 990: IOCB = 0B00000000;
  3541  0443  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0444  0189               	clrf	9	;volatile
  3543                           
  3544                           ;main.c: 991: Init_System();
  3545  0445  2511               	fcall	_Init_System
  3546                           
  3547                           ;main.c: 992: AD_Init();
  3548  0446  2DC2               	ljmp	l2149
  3549  0447                     __end_of_Sleep_Mode:	
  3550                           
  3551                           	psect	text17
  3552  0511                     __ptext17:	
  3553 ;; *************** function _Init_System *****************
  3554 ;; Defined at:
  3555 ;;		line 795 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2
  3564 ;; Tracked objects:
  3565 ;;		On entry : 100/0
  3566 ;;		On exit  : 100/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1
  3569 ;;      Params:         0       0       0
  3570 ;;      Locals:         0       0       0
  3571 ;;      Temps:          0       0       0
  3572 ;;      Totals:         0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    2
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_main
  3580 ;;		_Sleep_Mode
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           
  3585                           ;psect for function _Init_System
  3586  0511                     _Init_System:	
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _Init_System: [wreg+status,2]
  3590  0511  0000               	nop	;# 
  3591  0512  0064               	clrwdt	;# 
  3592                           
  3593                           ;main.c: 799: OPTION_REG = 0;
  3594  0513  1283               	bcf	3,5	;RP0=0, select bank0
  3595  0514  0181               	clrf	1	;volatile
  3596  0515  0064               	clrwdt	;# 
  3597                           
  3598                           ;main.c: 801: OSCCON = 0X72;
  3599  0516  3072               	movlw	114
  3600  0517  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0518  0094               	movwf	20	;volatile
  3602                           
  3603                           ;main.c: 803: WPUA = 0B00000000;
  3604  0519  1683               	bsf	3,5	;RP0=1, select bank1
  3605  051A  0188               	clrf	8	;volatile
  3606                           
  3607                           ;main.c: 804: WPDA = 0x02;
  3608  051B  3002               	movlw	2
  3609  051C  0087               	movwf	7	;volatile
  3610                           
  3611                           ;main.c: 805: WPUB = 0B00000100;
  3612  051D  3004               	movlw	4
  3613  051E  1283               	bcf	3,5	;RP0=0, select bank0
  3614  051F  0088               	movwf	8	;volatile
  3615                           
  3616                           ;main.c: 807: TRISA = 0x1F;
  3617  0520  301F               	movlw	31
  3618  0521  1683               	bsf	3,5	;RP0=1, select bank1
  3619  0522  0085               	movwf	5	;volatile
  3620                           
  3621                           ;main.c: 808: TRISB = 0B00000100;
  3622  0523  3004               	movlw	4
  3623  0524  1283               	bcf	3,5	;RP0=0, select bank0
  3624  0525  0085               	movwf	5	;volatile
  3625                           
  3626                           ;main.c: 810: PORTA = 0X00;
  3627  0526  1683               	bsf	3,5	;RP0=1, select bank1
  3628  0527  0186               	clrf	6	;volatile
  3629                           
  3630                           ;main.c: 811: PORTB = 0X00;
  3631  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3632  0529  0186               	clrf	6	;volatile
  3633                           
  3634                           ;main.c: 815: PR2 = 249;
  3635  052A  30F9               	movlw	249
  3636  052B  0091               	movwf	17	;volatile
  3637                           
  3638                           ;main.c: 816: TMR2IF = 0;
  3639  052C  108D               	bcf	13,1	;volatile
  3640                           
  3641                           ;main.c: 817: TMR2IE = 1;
  3642  052D  148E               	bsf	14,1	;volatile
  3643                           
  3644                           ;main.c: 819: T2CON = 0B00000100;
  3645  052E  3004               	movlw	4
  3646  052F  0093               	movwf	19	;volatile
  3647                           
  3648                           ;main.c: 820: INTCON = 0XC0;
  3649  0530  30C0               	movlw	192
  3650  0531  008B               	movwf	11	;volatile
  3651  0532  0008               	return
  3652  0533                     __end_of_Init_System:	
  3653                           
  3654                           	psect	text18
  3655  05C2                     __ptext18:	
  3656 ;; *************** function _AD_Init *****************
  3657 ;; Defined at:
  3658 ;;		line 832 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		wreg, status,2
  3667 ;; Tracked objects:
  3668 ;;		On entry : 100/0
  3669 ;;		On exit  : 100/100
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1
  3672 ;;      Params:         0       0       0
  3673 ;;      Locals:         0       0       0
  3674 ;;      Temps:          0       0       0
  3675 ;;      Totals:         0       0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    2
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;;		_Sleep_Mode
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _AD_Init
  3689  05C2                     _AD_Init:	
  3690  05C2                     l2149:	
  3691                           ;incstack = 0
  3692                           ; Regs used in _AD_Init: [wreg+status,2]
  3693                           
  3694                           
  3695                           ;main.c: 865: ADCON0 = 0X41;
  3696  05C2  3041               	movlw	65
  3697  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  3698  05C4  0095               	movwf	21	;volatile
  3699                           
  3700                           ;main.c: 882: ADCON1 = 0;
  3701  05C5  0196               	clrf	22	;volatile
  3702                           
  3703                           ;main.c: 883: ANSEL0 = 0X1D;
  3704  05C6  301D               	movlw	29
  3705  05C7  0093               	movwf	19	;volatile
  3706  05C8  0008               	return
  3707  05C9                     __end_of_AD_Init:	
  3708                           
  3709                           	psect	text19
  3710  0551                     __ptext19:	
  3711 ;; *************** function _Isr_Timer *****************
  3712 ;; Defined at:
  3713 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 100/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMMON   BANK0   BANK1
  3727 ;;      Params:         0       0       0
  3728 ;;      Locals:         0       0       0
  3729 ;;      Temps:          3       0       0
  3730 ;;      Totals:         3       0       0
  3731 ;;Total ram usage:        3 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    1
  3734 ;; This function calls:
  3735 ;;		_ledShow
  3736 ;; This function is called by:
  3737 ;;		Interrupt level 1
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           
  3742                           ;psect for function _Isr_Timer
  3743  0551                     _Isr_Timer:	
  3744                           
  3745                           ;main.c: 102: if(TMR2IF)
  3746  0551  1283               	bcf	3,5	;RP0=0, select bank0
  3747  0552  1C8D               	btfss	13,1	;volatile
  3748  0553  2D65               	goto	i1l656
  3749                           
  3750                           ;main.c: 103: {
  3751                           ;main.c: 104: TMR2IF = 0;
  3752  0554  108D               	bcf	13,1	;volatile
  3753                           
  3754                           ;main.c: 105: if(++intCount >= 160)
  3755  0555  30A0               	movlw	160
  3756  0556  0AD5               	incf	_intCount,f
  3757  0557  0255               	subwf	_intCount,w
  3758  0558  1C03               	skipc
  3759  0559  2D62               	goto	i1l2921
  3760  055A  3064               	movlw	100
  3761                           
  3762                           ;main.c: 106: {
  3763                           ;main.c: 107: intCount = 0;
  3764  055B  01D5               	clrf	_intCount
  3765                           
  3766                           ;main.c: 108: IntFlag = 1;
  3767  055C  01D3               	clrf	_IntFlag
  3768  055D  0AD3               	incf	_IntFlag,f
  3769                           
  3770                           ;main.c: 109: if(++count1s >= 100)
  3771  055E  0AD4               	incf	_count1s,f
  3772  055F  0254               	subwf	_count1s,w
  3773  0560  1803               	btfsc	3,0
  3774                           
  3775                           ;main.c: 110: {
  3776                           ;main.c: 111: count1s = 0;
  3777  0561  01D4               	clrf	_count1s
  3778  0562                     i1l2921:	
  3779                           
  3780                           ;main.c: 112: }
  3781                           ;main.c: 113: }
  3782                           ;main.c: 114: ledShow();
  3783  0562  23B5               	fcall	_ledShow
  3784                           
  3785                           ;main.c: 115: intCount10++;
  3786  0563  1283               	bcf	3,5	;RP0=0, select bank0
  3787  0564  0AD1               	incf	_intCount10,f
  3788  0565                     i1l656:	
  3789  0565  0872               	movf	??_Isr_Timer+2,w
  3790  0566  008A               	movwf	10
  3791  0567  0871               	movf	??_Isr_Timer+1,w
  3792  0568  0084               	movwf	4
  3793  0569  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3794  056A  0083               	movwf	3
  3795  056B  0EFE               	swapf	126,f
  3796  056C  0E7E               	swapf	126,w
  3797  056D  0009               	retfie
  3798  056E                     __end_of_Isr_Timer:	
  3799                           
  3800                           	psect	intentry
  3801  0004                     __pintentry:	
  3802                           ;incstack = 0
  3803                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3804                           
  3805  0004                     interrupt_function:	
  3806  007E                     saved_w	set	btemp
  3807  0004  00FE               	movwf	btemp
  3808  0005  0E03               	swapf	3,w
  3809  0006  00F0               	movwf	??_Isr_Timer
  3810  0007  0804               	movf	4,w
  3811  0008  00F1               	movwf	??_Isr_Timer+1
  3812  0009  080A               	movf	10,w
  3813  000A  00F2               	movwf	??_Isr_Timer+2
  3814  000B  2D51               	ljmp	_Isr_Timer
  3815                           
  3816                           	psect	text20
  3817  03B5                     __ptext20:	
  3818 ;; *************** function _ledShow *****************
  3819 ;; Defined at:
  3820 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_¼ÓÁ¦±ä´ó\main.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 100/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1
  3834 ;;      Params:         0       0       0
  3835 ;;      Locals:         0       0       0
  3836 ;;      Temps:          0       0       0
  3837 ;;      Totals:         0       0       0
  3838 ;;Total ram usage:        0 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_Isr_Timer
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _ledShow
  3849  03B5                     _ledShow:	
  3850                           
  3851                           ;main.c: 165: if(++ledCntTime > 30)
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3855  03B5  301F               	movlw	31
  3856  03B6  0AB9               	incf	_ledCntTime,f
  3857  03B7  0239               	subwf	_ledCntTime,w
  3858  03B8  1C03               	skipc
  3859  03B9  0008               	return
  3860  03BA  3006               	movlw	6
  3861                           
  3862                           ;main.c: 166: {
  3863                           ;main.c: 167: ledCntTime = 0;
  3864  03BB  01B9               	clrf	_ledCntTime
  3865                           
  3866                           ;main.c: 168: if(++ledCnt > 5)
  3867  03BC  0ACD               	incf	_ledCnt,f
  3868  03BD  024D               	subwf	_ledCnt,w
  3869  03BE  1803               	btfsc	3,0
  3870                           
  3871                           ;main.c: 169: {
  3872                           ;main.c: 170: ledCnt = 0;
  3873  03BF  01CD               	clrf	_ledCnt
  3874                           
  3875                           ;main.c: 171: }
  3876                           ;main.c: 172: PORTA &= 0xDF;
  3877  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  3878  03C1  1286               	bcf	6,5	;volatile
  3879                           
  3880                           ;main.c: 173: PORTB &= 0xC7;
  3881  03C2  30C7               	movlw	199
  3882  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  3883  03C4  0586               	andwf	6,f	;volatile
  3884                           
  3885                           ;main.c: 174: TRISA |= 0x20;
  3886  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  3887  03C6  1685               	bsf	5,5	;volatile
  3888                           
  3889                           ;main.c: 175: TRISB |= 0x38;
  3890  03C7  3038               	movlw	56
  3891  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  3892  03C9  0485               	iorwf	5,f	;volatile
  3893                           
  3894                           ;main.c: 176: switch(ledCnt)
  3895  03CA  2BFD               	goto	i1l2403
  3896  03CB                     i1l2369:	
  3897                           
  3898                           ;main.c: 179: if(ledStep > 0)
  3899  03CB  0878               	movf	_ledStep,w
  3900  03CC  1903               	btfsc	3,2
  3901  03CD  0008               	return
  3902                           
  3903                           ;main.c: 180: {
  3904                           ;main.c: 181: TRISB &= 0xE7;
  3905  03CE  30E7               	movlw	231
  3906  03CF                     L20:	
  3907  03CF  0585               	andwf	5,f	;volatile
  3908                           
  3909                           ;main.c: 182: PORTB |= 0x10;
  3910  03D0  1606               	bsf	6,4	;volatile
  3911  03D1  0008               	return
  3912  03D2                     i1l2375:	
  3913                           
  3914                           ;main.c: 186: if(ledStep > 1)
  3915  03D2  3002               	movlw	2
  3916  03D3  0278               	subwf	_ledStep,w
  3917  03D4  1C03               	skipc
  3918  03D5  0008               	return
  3919                           
  3920                           ;main.c: 187: {
  3921                           ;main.c: 188: TRISB &= 0xCF;
  3922  03D6  30CF               	movlw	207
  3923  03D7  0585               	andwf	5,f	;volatile
  3924                           
  3925                           ;main.c: 189: PORTB |= 0x20;
  3926  03D8  1686               	bsf	6,5	;volatile
  3927  03D9  0008               	return
  3928  03DA                     i1l2381:	
  3929                           
  3930                           ;main.c: 193: if(ledStep > 2)
  3931  03DA  3003               	movlw	3
  3932  03DB  0278               	subwf	_ledStep,w
  3933  03DC  1C03               	skipc
  3934  03DD  0008               	return
  3935                           
  3936                           ;main.c: 194: {
  3937                           ;main.c: 195: TRISB &= 0xE7;
  3938  03DE  30E7               	movlw	231
  3939  03DF  0585               	andwf	5,f	;volatile
  3940                           
  3941                           ;main.c: 196: PORTB |= 0x08;
  3942  03E0  1586               	bsf	6,3	;volatile
  3943  03E1  0008               	return
  3944  03E2                     i1l2387:	
  3945                           
  3946                           ;main.c: 200: if(ledStep > 3)
  3947  03E2  3004               	movlw	4
  3948  03E3  0278               	subwf	_ledStep,w
  3949  03E4  1C03               	skipc
  3950  03E5  0008               	return
  3951                           
  3952                           ;main.c: 201: {
  3953                           ;main.c: 202: TRISB &= 0xCF;
  3954  03E6  30CF               	movlw	207
  3955  03E7  2BCF               	goto	L20
  3956  03E8                     i1l2393:	
  3957                           
  3958                           ;main.c: 207: if(ledStep > 4)
  3959  03E8  3005               	movlw	5
  3960  03E9  0278               	subwf	_ledStep,w
  3961  03EA  1C03               	skipc
  3962  03EB  0008               	return
  3963                           
  3964                           ;main.c: 208: {
  3965                           ;main.c: 209: TRISA &= 0xDF;
  3966  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  3967  03ED  1285               	bcf	5,5	;volatile
  3968                           
  3969                           ;main.c: 210: TRISB &= 0xDF;
  3970  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  3971  03EF  1285               	bcf	5,5	;volatile
  3972                           
  3973                           ;main.c: 211: PORTB |= 0x20;
  3974  03F0  1686               	bsf	6,5	;volatile
  3975  03F1  0008               	return
  3976  03F2                     i1l2397:	
  3977                           
  3978                           ;main.c: 215: if(ledStep > 5)
  3979  03F2  3006               	movlw	6
  3980  03F3  0278               	subwf	_ledStep,w
  3981  03F4  1C03               	skipc
  3982  03F5  0008               	return
  3983                           
  3984                           ;main.c: 216: {
  3985                           ;main.c: 217: TRISA &= 0xDF;
  3986  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  3987  03F7  1285               	bcf	5,5	;volatile
  3988                           
  3989                           ;main.c: 218: TRISB &= 0xDF;
  3990  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3991  03F9  1285               	bcf	5,5	;volatile
  3992                           
  3993                           ;main.c: 219: PORTA |= 0x20;
  3994  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  3995  03FB  1686               	bsf	6,5	;volatile
  3996  03FC  0008               	return
  3997  03FD                     i1l2403:	
  3998  03FD  084D               	movf	_ledCnt,w
  3999                           
  4000                           ; Switch size 1, requested type "space"
  4001                           ; Number of cases is 6, Range of values is 0 to 5
  4002                           ; switch strategies available:
  4003                           ; Name         Instructions Cycles
  4004                           ; direct_byte           12     6 (fixed)
  4005                           ; simple_byte           19    10 (average)
  4006                           ; jumptable            260     6 (fixed)
  4007                           ;	Chosen strategy is direct_byte
  4008  03FE  0084               	movwf	4
  4009  03FF  3006               	movlw	6
  4010  0400  0204               	subwf	4,w
  4011  0401  1803               	skipnc
  4012  0402  0008               	return
  4013  0403  3005               	movlw	high i1S3543
  4014  0404  008A               	movwf	10
  4015  0405  30C9               	movlw	low i1S3543
  4016  0406  0704               	addwf	4,w
  4017  0407  0082               	movwf	2
  4018  0408  0008               	return
  4019  0409                     __end_of_ledShow:	
  4020  007E                     btemp	set	126	;btemp
  4021  007E                     wtemp0	set	126
  4022                           
  4023                           	psect	swtext1
  4024  05C9                     __pswtext1:	
  4025  05C9                     i1S3543:	
  4026  05C9  2BF2               	ljmp	i1l2397
  4027  05CA  2BCB               	ljmp	i1l2369
  4028  05CB  2BD2               	ljmp	i1l2375
  4029  05CC  2BDA               	ljmp	i1l2381
  4030  05CD  2BE2               	ljmp	i1l2387
  4031  05CE  2BE8               	ljmp	i1l2393


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         59
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      75
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3569
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4B       4       93.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      56       7        0.0%
DATA                 0      0      56       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 08 15:11:58 2025

            _protectFlag 004F                        pc 0002                       PL2 01E8  
                     PL4 01F7                       PL6 0116                       PL8 05AC  
                     fsr 0004                      PL10 0200                      l810 0327  
                    l661 044C                      l665 0463                      l882 014E  
                    l778 04E8                      l892 01CD                      l888 0189  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05C9                     l3001 012E  
                   l3011 0138                     l3003 0130                     l1159 0596  
                   l2311 05A3                     l3041 0185                     l3017 0139  
                   l3121 02D2                     l3201 0350                     l3051 01D1  
                   l3035 0173                     l3027 0159                     l3131 02E8  
                   l2155 05D2                     l2149 05C2                     l3301 00AB  
                   l3039 017D                     l3143 02FC                     l3135 02E9  
                   l3119 02D1                     l3311 00CB                     l3215 0024  
                   l3401 0274                     l3305 00C1                     l2193 054B  
                   l3171 0321                     l3163 0315                     l3155 0309  
                   l3139 02F4                     l3331 00F0                     l3315 00CE  
                   l3227 0034                     l3075 0586                     l3067 0572  
                   l3413 029D                     l3421 02A8                     l3317 00D0  
                   l3253 0059                     l3229 0036                     l3167 031B  
                   l3159 030F                     l3335 00F3                     l3247 0055  
                   l2297 0590                     l3329 00EF                     l3249 0057  
                   l3089 04F9                     l3097 050C                     l3521 0480  
                   l3419 02A6                     l3187 0343                     l3355 0113  
                   l3275 007B                     l3267 0070                     l3259 0063  
                   l3339 00F7                     l3443 0381                     l3435 0365  
                   l3189 0346                     l3197 034C                     l3277 007D  
                   l3453 0391                     l3445 0383                     l3375 0230  
                   l3391 0260                     l3295 009F                     l3287 0097  
                   l2751 04D9                     l2743 04CD                     l3455 0395  
                   l3463 039D                     l3289 0099                     l2753 04DB  
                   l3457 0398                     l3379 0233                     l3299 00A5  
                   l3467 03A3                     l3397 026D                     l2749 04D6  
                   l2757 04DF                     l2791 04AA                     l3487 0454  
                   l2777 048C                     l2789 04A8                     l2797 04B8  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3105 0179                     u3115 0183                     u3155 01C3  
                   u3235 04FF                     u3175 01DA                     u4207 012A  
                   _PIE1 000E                     u3455 0333                     u4177 0355  
                   u4187 0272                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u4197 02AD                     u3725 00E3  
                   _RBIE 005B                     _RBIF 0058                     u3845 0252  
                   u3685 00BF                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 0447  
                   btemp 007E                     start 000C            ??_Init_System 0073  
                  ?_main 0070          __end_of___lbdiv 05A5          __end_of___lbmod 058A  
                  _T2CON 0013          __end_of___lwmod 0511                    i1l656 0565  
          _countHalfFull 0050                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0116          __end_of_ledShow 0409  
        __end_of_keyRead 0551                    pclath 000A          __end_of_pwmInit 05C2  
        __end_of_pwmStop 05D2                    status 0003                    wtemp0 007E  
        __end_of_workCtr 04BC          ___lbdiv@divisor 0073            _addPowerCount 0048  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 0482  
   __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 0533                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3543 05C9                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _GODONE 04A9  
                 i1l2403 03FD                   i1l2381 03DA                   i1l2375 03D2  
                 i1l2393 03E8                   i1l2369 03CB                   i1l2387 03E2  
                 i1l2397 03F2                   i1l2921 0562                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD0L 0019                   _PWMD1L 001A  
           ??_ADC_Sample 0057             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 0409                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004D                   _ledCtr 0358                ??___lwmod 0077  
                 _keyCtr 04BC                ??_chrgCtr 0057                   _pwStep 0044  
                 _result 0032                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01E8                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002C          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0058          _workOverOutTime 004E           __pcstackCOMMON 0070  
     __size_of_checkOutA 00A8              _Init_System 0511               __end_ofPL2 01F7  
             __end_ofPL4 0200               __end_ofPL6 011C               __end_ofPL8 05B2  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 056E               _checkBatAD 0205  
             __pbssBANK0 0020             _chrgFullFlag 0052              ?_Sleep_Mode 0070  
             __pmaintext 0447               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003B                  ?_keyCtr 0070               _ledCntTime 0039  
                _AD_Init 05C2                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 0358                  _IntFlag 0053               _intCount10 0051  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0064          ADC_Sample@admin 0062  
        ADC_Sample@adsum 005E                  ___lbdiv 058A                  ___lbmod 056E  
                _addTime 003D                  ___lwmod 04ED          __size_of_ledCtr 005D  
        __size_of_keyCtr 0031                  _chrgCtr 0018               _lowBatFlag 0037  
                __ptext1 0482                  __ptext2 05CF                  __ptext3 05BA  
                __ptext4 0358                  __ptext5 04ED                  __ptext6 056E  
                __ptext7 04BC                  __ptext8 0533                  __ptext9 0018  
                _ledShow 03B5                  _ledStep 0078                  _count1s 0054  
                _count5s 0026                  _count8s 0022                  _maxDuty 004A  
                _keyRead 0533      __size_of_Sleep_Mode 003E                  _pwmInit 05BA  
                _subTime 003C              ?_checkBatAD 0070                  _pwmStop 05CF  
             _preLedStep 0038                  clrloop0 05B3                  _workCtr 0482  
             _outADValue 002E     end_of_initialization 0016            _longPressFlag 004B  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0057  
            ___lbmod@rem 0059      __size_of_checkBatAD 00AB             ?_Init_System 0070  
         __end_of_ledCtr 03B5           __end_of_keyCtr 04ED      __end_of_chrgPwmInit 05AC  
    __end_of_chrgPwmStop 05D5              __end_ofPL10 0205      start_initialization 000D  
              _Isr_Timer 0551             ??_Sleep_Mode 0073                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0066                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0057  
     __end_of_Sleep_Mode 0447               ?_Isr_Timer 0070                _checkOutA 02B0  
              __pnvBANK0 006A              _chrgMaxDuty 003A                _chrgMaxAD 003F  
            _chrgPwmInit 05A5                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05D2                 ?___lwmod 0073                 ?_chrgCtr 0070  
              __pswtext1 05C9                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 006A           ADC_Sample@adch 005C  
               ?_pwmInit 0070                _fullCount 0028             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003E                 ?_workCtr 0070  
            ADC_Sample@i 005D              ADC_Sample@j 005B        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 05B2                _prePwStep 0077  
            _reChrgCount 0043                _sleepTime 0036                _overCount 0049  
     __end_of_checkBatAD 02B0     __size_of_Init_System 0022                _startTime 0046  
       __size_of_AD_Init 0007         keyRead@keyStatus 0073              ??_Isr_Timer 0070  
             _ADC_Sample 011C         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwmod 0024              _lockLedStep 0042         __size_of_chrgCtr 00FE  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0034  
               _chrgFlag 007A                 _chrgMode 0040                 __ptext10 05D2  
               __ptext11 05A5                 __ptext20 03B5                 __ptext12 058A  
               __ptext13 02B0                 __ptext14 0205                 __ptext15 011C  
               __ptext16 0409                 __ptext17 0511                 __ptext18 05C2  
               __ptext19 0551         __size_of_pwmInit 0008         __size_of_pwmStop 0003  
               _count50s 002A         __size_of_workCtr 003A                 _keyCount 004C  
               _intCount 0055            __size_of_main 003B              ??_checkOutA 0074  
       checkOutA@maxAout 0069                 _tempDuty 0047                 _test_adc 0056  
               _power_ad 0030                 _workStep 0079             _overChrgTime 0045  
               intlevel1 0000         ___lwmod@dividend 0075              ?_ADC_Sample 0073  
           ?_chrgPwmInit 0070             _overWorkTime 0024             ?_chrgPwmStop 0070  
            _showBatTime 0041               _OPTION_REG 0001          ___lwmod@divisor 0073  
        ___lwmod@counter 0057  
