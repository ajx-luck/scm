

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Sep 17 13:15:11 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	strings
    74  05BE                     __pstrings:	
    75  05BE                     stringtab:	
    76  05BE                     __stringtab:	
    77  05BE                     stringcode:	
    78                           ;	String table - string pointers are 1 byte each
    79                           
    80  05BE                     stringdir:	
    81  05BE  3005               	movlw	high stringdir
    82  05BF  008A               	movwf	10
    83  05C0  0804               	movf	4,w
    84  05C1  0A84               	incf	4,f
    85  05C2  0782               	addwf	2,f
    86  05C3                     __stringbase:	
    87  05C3  3400               	retlw	0
    88  05C4                     __end_of__stringtab:	
    89  05C4                     _numArray:	
    90  05C4  343F               	retlw	63
    91  05C5  3406               	retlw	6
    92  05C6  345B               	retlw	91
    93  05C7  344F               	retlw	79
    94  05C8  3466               	retlw	102
    95  05C9  346D               	retlw	109
    96  05CA  347D               	retlw	125
    97  05CB  3407               	retlw	7
    98  05CC  347F               	retlw	127
    99  05CD  346F               	retlw	111
   100  05CE  3471               	retlw	113
   101  05CF  3479               	retlw	121
   102  05D0  3450               	retlw	80
   103  05D1  3476               	retlw	118
   104  05D2                     __end_of_numArray:	
   105                           
   106                           	psect	nvBANK0
   107  0064                     __pnvBANK0:	
   108  0064                     _geweiNum:	
   109  0064                     	ds	1
   110  0065                     _shiweiNum:	
   111  0065                     	ds	1
   112  0066                     _firstTime:	
   113  0066                     	ds	1
   114  001D                     _PWMCON2	set	29
   115  0018                     _PWMTH	set	24
   116  0017                     _PWMTL	set	23
   117  0016                     _PWMCON1	set	22
   118  0015                     _PWMCON0	set	21
   119  0014                     _OSCCON	set	20
   120  0013                     _T2CON	set	19
   121  0011                     _PR2	set	17
   122  000E                     _PIE1	set	14
   123  000D                     _PIR1	set	13
   124  000B                     _INTCON	set	11
   125  0009                     _IOCB	set	9
   126  0008                     _WPUB	set	8
   127  0006                     _PORTB	set	6
   128  0005                     _TRISB	set	5
   129  0001                     _OPTION_REG	set	1
   130  0071                     _TMR2IE	set	113
   131  0073                     _RAIE	set	115
   132  0069                     _TMR2IF	set	105
   133  006B                     _RAIF	set	107
   134  0058                     _RBIF	set	88
   135  005B                     _RBIE	set	91
   136  005E                     _PEIE	set	94
   137  005F                     _GIE	set	95
   138  0030                     _RB0	set	48
   139  0031                     _RB1	set	49
   140  0032                     _RB2	set	50
   141  0033                     _RB3	set	51
   142  0034                     _RB4	set	52
   143  0035                     _RB5	set	53
   144  009E                     _PWMD23H	set	158
   145  009D                     _PWM23DT	set	157
   146  009C                     _PWMD3L	set	156
   147  009B                     _PWMD2L	set	155
   148  0099                     _ADRESH	set	153
   149  0098                     _ADRESL	set	152
   150  0096                     _ADCON1	set	150
   151  0095                     _ADCON0	set	149
   152  0094                     _ANSEL1	set	148
   153  0093                     _ANSEL0	set	147
   154  0089                     _IOCA	set	137
   155  0088                     _WPUA	set	136
   156  0087                     _WPDA	set	135
   157  0086                     _PORTA	set	134
   158  0085                     _TRISA	set	133
   159  04B2                     _LDO_EN	set	1202
   160  04B6                     _CHS4	set	1206
   161  04A9                     _GODONE	set	1193
   162  0433                     _RA3	set	1075
   163  0434                     _RA4	set	1076
   164                           
   165                           	psect	cinit
   166  000D                     start_initialization:	
   167                           ; #config settings
   168                           
   169  000D                     __initialization:	
   170                           
   171                           ; Clear objects allocated to COMMON
   172  000D  3077               	movlw	low __pbssCOMMON
   173  000E  0084               	movwf	4
   174  000F  307B               	movlw	low (__pbssCOMMON+4)
   175  0010  2604               	fcall	clear_ram0
   176  0011  3020               	movlw	low __pbssBANK0
   177                           
   178                           ; Clear objects allocated to BANK0
   179  0012  1383               	bcf	3,7	;select IRP bank0
   180  0013  0084               	movwf	4
   181  0014  3053               	movlw	low (__pbssBANK0+51)
   182  0015  2604               	fcall	clear_ram0
   183  0016                     end_of_initialization:	
   184                           ;End of C runtime variable initialization code
   185                           
   186  0016                     __end_of__initialization:	
   187  0016  0183               	clrf	3
   188  0017  2C08               	ljmp	_main	;jump to C main() function
   189                           
   190                           	psect	bssCOMMON
   191  0077                     __pbssCOMMON:	
   192  0077                     _adresult:	
   193  0077                     	ds	2
   194  0079                     _workStep:	
   195  0079                     	ds	1
   196  007A                     _chrgFlag:	
   197  007A                     	ds	1
   198                           
   199                           	psect	bssBANK0
   200  0020                     __pbssBANK0:	
   201  0020                     _sumBatValue:	
   202  0020                     	ds	2
   203  0022                     _count900s:	
   204  0022                     	ds	2
   205  0024                     _count8s:	
   206  0024                     	ds	2
   207  0026                     _fullCount:	
   208  0026                     	ds	2
   209  0028                     _count50s:	
   210  0028                     	ds	2
   211  002A                     _batADValue:	
   212  002A                     	ds	2
   213  002C                     _outADValue:	
   214  002C                     	ds	2
   215  002E                     _power_ad:	
   216  002E                     	ds	2
   217  0030                     _result:	
   218  0030                     	ds	2
   219  0032                     _firstCheckTime:	
   220  0032                     	ds	1
   221  0033                     _motorPwmFlag:	
   222  0033                     	ds	1
   223  0034                     _chrgPwmFlag:	
   224  0034                     	ds	1
   225  0035                     _sleepTime:	
   226  0035                     	ds	1
   227  0036                     _lowBatFlag:	
   228  0036                     	ds	1
   229  0037                     _overWorkTime:	
   230  0037                     	ds	1
   231  0038                     _ledCntTime:	
   232  0038                     	ds	1
   233  0039                     _chrgMaxDuty:	
   234  0039                     	ds	1
   235  003A                     _chrgWaitTime:	
   236  003A                     	ds	1
   237  003B                     _subTime:	
   238  003B                     	ds	1
   239  003C                     _addTime:	
   240  003C                     	ds	1
   241  003D                     _lockCount:	
   242  003D                     	ds	1
   243  003E                     _chrgMaxAD:	
   244  003E                     	ds	1
   245  003F                     _chrgMode:	
   246  003F                     	ds	1
   247  0040                     _showBatTime:	
   248  0040                     	ds	1
   249  0041                     _reChrgCount:	
   250  0041                     	ds	1
   251  0042                     _prePwStep:	
   252  0042                     	ds	1
   253  0043                     _pwStep:	
   254  0043                     	ds	1
   255  0044                     _overChrgTime:	
   256  0044                     	ds	1
   257  0045                     _startTime:	
   258  0045                     	ds	1
   259  0046                     _maxDuty:	
   260  0046                     	ds	1
   261  0047                     _longPressFlag:	
   262  0047                     	ds	1
   263  0048                     _keyCount:	
   264  0048                     	ds	1
   265  0049                     _ledCnt:	
   266  0049                     	ds	1
   267  004A                     _workOverOutTime:	
   268  004A                     	ds	1
   269  004B                     _protectFlag:	
   270  004B                     	ds	1
   271  004C                     _countHalfFull:	
   272  004C                     	ds	1
   273  004D                     _intCount10:	
   274  004D                     	ds	1
   275  004E                     _chrgFullFlag:	
   276  004E                     	ds	1
   277  004F                     _IntFlag:	
   278  004F                     	ds	1
   279  0050                     _count1s:	
   280  0050                     	ds	1
   281  0051                     _intCount:	
   282  0051                     	ds	1
   283  0052                     _test_adc:	
   284  0052                     	ds	1
   285                           
   286                           	psect	clrtext
   287  0604                     clear_ram0:	
   288                           ;	Called with FSR containing the base address, and
   289                           ;	W with the last address+1
   290                           
   291  0604  0064               	clrwdt	;clear the watchdog before getting into this loop
   292  0605                     clrloop0:	
   293  0605  0180               	clrf	0	;clear RAM location pointed to by FSR
   294  0606  0A84               	incf	4,f	;increment pointer
   295  0607  0604               	xorwf	4,w	;XOR with final address
   296  0608  1903               	btfsc	3,2	;have we reached the end yet?
   297  0609  3400               	retlw	0	;all done for this memory range, return
   298  060A  0604               	xorwf	4,w	;XOR again to restore value
   299  060B  2E05               	goto	clrloop0	;do the next byte
   300                           
   301                           	psect	cstackCOMMON
   302  0070                     __pcstackCOMMON:	
   303  0070                     ?_ledShow:	
   304  0070                     ??_ledShow:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Init_System:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_AD_Init:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_checkOutA:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_chrgCtr:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_checkBatAD:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_keyCtr:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_workCtr:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_ledCtr:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_Sleep_Mode:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_chrgPwmStop:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_pwmStop:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_chrgPwmInit:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_pwmInit:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Isr_Timer:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_Isr_Timer:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_keyRead:	
   356                           ; 1 bytes @ 0x0
   357                           
   358                           
   359                           ; 1 bytes @ 0x0
   360  0070                     	ds	3
   361  0073                     ??_Init_System:	
   362  0073                     ??_AD_Init:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ??_chrgCtr:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ??_workCtr:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ??_Sleep_Mode:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     ??_chrgPwmStop:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ??_pwmStop:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ??_chrgPwmInit:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ??_pwmInit:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ?_ADC_Sample:	
   387                           ; 1 bytes @ 0x3
   388                           
   389  0073                     ??_keyRead:	
   390                           ; 1 bytes @ 0x3
   391                           
   392  0073                     ?___lbdiv:	
   393                           ; 1 bytes @ 0x3
   394                           
   395  0073                     ?___lbmod:	
   396                           ; 1 bytes @ 0x3
   397                           
   398  0073                     ?___lwdiv:	
   399                           ; 1 bytes @ 0x3
   400                           
   401  0073                     keyRead@keyStatus:	
   402                           ; 2 bytes @ 0x3
   403                           
   404  0073                     ADC_Sample@adldo:	
   405                           ; 1 bytes @ 0x3
   406                           
   407  0073                     ___lbdiv@divisor:	
   408                           ; 1 bytes @ 0x3
   409                           
   410  0073                     ___lbmod@divisor:	
   411                           ; 1 bytes @ 0x3
   412                           
   413  0073                     ___lwdiv@divisor:	
   414                           ; 1 bytes @ 0x3
   415                           
   416                           
   417                           ; 2 bytes @ 0x3
   418  0073                     	ds	1
   419  0074                     ??_checkOutA:	
   420  0074                     ??_checkBatAD:	
   421                           ; 1 bytes @ 0x4
   422                           
   423  0074                     ??_keyCtr:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0074                     ??___lbdiv:	
   427                           ; 1 bytes @ 0x4
   428                           
   429  0074                     ??___lbmod:	
   430                           ; 1 bytes @ 0x4
   431                           
   432  0074                     keyCtr@kclick:	
   433                           ; 1 bytes @ 0x4
   434                           
   435  0074                     ___lbdiv@dividend:	
   436                           ; 1 bytes @ 0x4
   437                           
   438                           
   439                           ; 1 bytes @ 0x4
   440  0074                     	ds	1
   441  0075                     ___lbdiv@counter:	
   442  0075                     ___lwdiv@dividend:	
   443                           ; 1 bytes @ 0x5
   444                           
   445                           
   446                           ; 2 bytes @ 0x5
   447  0075                     	ds	1
   448  0076                     ___lbdiv@quotient:	
   449                           
   450                           ; 1 bytes @ 0x6
   451  0076                     	ds	1
   452  0077                     ??_ledCtr:	
   453  0077                     ??_main:	
   454                           ; 1 bytes @ 0x7
   455                           
   456  0077                     ??___lwdiv:	
   457                           ; 1 bytes @ 0x7
   458                           
   459                           
   460                           	psect	cstackBANK0
   461  0053                     __pcstackBANK0:	
   462                           ; 1 bytes @ 0x7
   463                           
   464  0053                     ??_ADC_Sample:	
   465  0053                     ___lbmod@dividend:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0053                     ___lwdiv@counter:	
   469                           ; 1 bytes @ 0x0
   470                           
   471                           
   472                           ; 1 bytes @ 0x0
   473  0053                     	ds	1
   474  0054                     ___lbmod@counter:	
   475  0054                     ___lwdiv@quotient:	
   476                           ; 1 bytes @ 0x1
   477                           
   478                           
   479                           ; 2 bytes @ 0x1
   480  0054                     	ds	1
   481  0055                     ___lbmod@rem:	
   482                           
   483                           ; 1 bytes @ 0x2
   484  0055                     	ds	2
   485  0057                     ADC_Sample@j:	
   486                           
   487                           ; 1 bytes @ 0x4
   488  0057                     	ds	1
   489  0058                     ADC_Sample@adch:	
   490                           
   491                           ; 1 bytes @ 0x5
   492  0058                     	ds	1
   493  0059                     ADC_Sample@i:	
   494                           
   495                           ; 1 bytes @ 0x6
   496  0059                     	ds	1
   497  005A                     ADC_Sample@adsum:	
   498                           
   499                           ; 4 bytes @ 0x7
   500  005A                     	ds	4
   501  005E                     ADC_Sample@admin:	
   502                           
   503                           ; 2 bytes @ 0xB
   504  005E                     	ds	2
   505  0060                     ADC_Sample@admax:	
   506                           
   507                           ; 2 bytes @ 0xD
   508  0060                     	ds	2
   509  0062                     ADC_Sample@ad_temp:	
   510                           
   511                           ; 2 bytes @ 0xF
   512  0062                     	ds	2
   513                           
   514                           	psect	maintext
   515  0408                     __pmaintext:	
   516 ;;
   517 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   518 ;;
   519 ;; *************** function _main *****************
   520 ;; Defined at:
   521 ;;		line 156 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : B00/0
   532 ;;		On exit  : 100/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1
   535 ;;      Params:         0       0       0
   536 ;;      Locals:         0       0       0
   537 ;;      Temps:          0       0       0
   538 ;;      Totals:         0       0       0
   539 ;;Total ram usage:        0 bytes
   540 ;; Hardware stack levels required when called:    4
   541 ;; This function calls:
   542 ;;		_AD_Init
   543 ;;		_Init_System
   544 ;;		_Sleep_Mode
   545 ;;		_checkBatAD
   546 ;;		_checkOutA
   547 ;;		_chrgCtr
   548 ;;		_keyCtr
   549 ;;		_ledCtr
   550 ;;		_workCtr
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _main
   558  0408                     _main:	
   559                           
   560                           ;main.c: 158: Init_System();
   561                           
   562                           ;incstack = 0
   563                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   564  0408  25A4               	fcall	_Init_System
   565                           
   566                           ;main.c: 159: AD_Init();
   567  0409  2614               	fcall	_AD_Init
   568                           
   569                           ;main.c: 160: shiweiNum = geweiNum = numArray[8];
   570  040A  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   571  040B  0084               	movwf	4
   572  040C  25BE               	fcall	stringdir
   573  040D  1283               	bcf	3,5	;RP0=0, select bank0
   574  040E  00E4               	movwf	_geweiNum
   575  040F  00E5               	movwf	_shiweiNum
   576                           
   577                           ;main.c: 161: firstTime = 200;
   578  0410  30C8               	movlw	200
   579  0411  00E6               	movwf	_firstTime
   580  0412                     l693:	
   581                           ;main.c: 162: while (1)
   582                           
   583  0412  0064               	clrwdt	;# 
   584                           
   585                           ;main.c: 165: if(intCount10 > 10)
   586  0413  300B               	movlw	11
   587  0414  1283               	bcf	3,5	;RP0=0, select bank0
   588  0415  024D               	subwf	_intCount10,w
   589  0416  1C03               	skipc
   590  0417  2C1A               	goto	l3294
   591                           
   592                           ;main.c: 166: {
   593                           ;main.c: 167: intCount10 = 0;
   594  0418  01CD               	clrf	_intCount10
   595                           
   596                           ;main.c: 168: checkOutA();
   597  0419  249C               	fcall	_checkOutA
   598  041A                     l3294:	
   599                           
   600                           ;main.c: 169: }
   601                           ;main.c: 170: if(!IntFlag)
   602  041A  1283               	bcf	3,5	;RP0=0, select bank0
   603  041B  084F               	movf	_IntFlag,w
   604  041C  1903               	btfsc	3,2
   605  041D  2C12               	goto	l693
   606                           
   607                           ;main.c: 172: IntFlag = 0;
   608  041E  01CF               	clrf	_IntFlag
   609                           
   610                           ;main.c: 173: chrgCtr();
   611  041F  2018               	fcall	_chrgCtr
   612                           
   613                           ;main.c: 174: checkBatAD();
   614  0420  2292               	fcall	_checkBatAD
   615                           
   616                           ;main.c: 175: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   617  0421  087A               	movf	_chrgFlag,w
   618  0422  1D03               	btfss	3,2
   619  0423  2C2C               	goto	l697
   620  0424  1283               	bcf	3,5	;RP0=0, select bank0
   621  0425  0836               	movf	_lowBatFlag,w
   622  0426  1D03               	btfss	3,2
   623  0427  2C2C               	goto	l697
   624  0428  0866               	movf	_firstTime,w
   625  0429  1D03               	btfss	3,2
   626  042A  2C2C               	goto	l697
   627                           
   628                           ;main.c: 176: {
   629                           ;main.c: 177: keyCtr();
   630  042B  252D               	fcall	_keyCtr
   631  042C                     l697:	
   632                           
   633                           ;main.c: 178: }
   634                           ;main.c: 179: workCtr();
   635  042C  23B0               	fcall	_workCtr
   636                           
   637                           ;main.c: 180: if(count1s == 0 && ++count900s >= 900)
   638  042D  1283               	bcf	3,5	;RP0=0, select bank0
   639  042E  0850               	movf	_count1s,w
   640  042F  1D03               	btfss	3,2
   641  0430  2C3B               	goto	l3318
   642  0431  0AA2               	incf	_count900s,f
   643  0432  1903               	skipnz
   644  0433  0AA3               	incf	_count900s+1,f
   645  0434  3003               	movlw	3
   646  0435  0223               	subwf	_count900s+1,w
   647  0436  3084               	movlw	132
   648  0437  1903               	skipnz
   649  0438  0222               	subwf	_count900s,w
   650  0439  1803               	btfsc	3,0
   651                           
   652                           ;main.c: 181: {
   653                           ;main.c: 182: workStep = 0;
   654  043A  01F9               	clrf	_workStep
   655  043B                     l3318:	
   656                           
   657                           ;main.c: 183: }
   658                           ;main.c: 184: ledCtr();
   659  043B  2335               	fcall	_ledCtr
   660                           
   661                           ;main.c: 185: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   662  043C  087A               	movf	_chrgFlag,w
   663  043D  1D03               	btfss	3,2
   664  043E  2C58               	goto	l3340
   665  043F  0879               	movf	_workStep,w
   666  0440  1D03               	btfss	3,2
   667  0441  2C58               	goto	l3340
   668  0442  0848               	movf	_keyCount,w
   669  0443  1D03               	btfss	3,2
   670  0444  2C58               	goto	l3340
   671  0445  0866               	movf	_firstTime,w
   672  0446  1D03               	btfss	3,2
   673  0447  2C58               	goto	l3340
   674  0448  0840               	movf	_showBatTime,w
   675  0449  1D03               	btfss	3,2
   676  044A  2C58               	goto	l3340
   677  044B  0837               	movf	_overWorkTime,w
   678  044C  1D03               	btfss	3,2
   679  044D  2C58               	goto	l3340
   680  044E  30C8               	movlw	200
   681                           
   682                           ;main.c: 186: {
   683                           ;main.c: 187: shiweiNum = geweiNum = 0;
   684  044F  01E4               	clrf	_geweiNum
   685  0450  01E5               	clrf	_shiweiNum
   686                           
   687                           ;main.c: 188: if(++sleepTime >= 200)
   688  0451  0AB5               	incf	_sleepTime,f
   689  0452  0235               	subwf	_sleepTime,w
   690  0453  1C03               	skipc
   691  0454  2C12               	goto	l693
   692                           
   693                           ;main.c: 189: {
   694                           ;main.c: 190: sleepTime = 0;
   695  0455  01B5               	clrf	_sleepTime
   696                           
   697                           ;main.c: 191: Sleep_Mode();
   698  0456  245A               	fcall	_Sleep_Mode
   699  0457  2C12               	goto	l693
   700  0458                     l3340:	
   701                           
   702                           ;main.c: 194: else
   703                           ;main.c: 195: {
   704                           ;main.c: 196: sleepTime = 0;
   705  0458  01B5               	clrf	_sleepTime
   706  0459  2C12               	goto	l693
   707  045A                     __end_of_main:	
   708                           
   709                           	psect	text1
   710  03B0                     __ptext1:	
   711 ;; *************** function _workCtr *****************
   712 ;; Defined at:
   713 ;;		line 661 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   714 ;; Parameters:    Size  Location     Type
   715 ;;		None
   716 ;; Auto vars:     Size  Location     Type
   717 ;;		None
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, status,2, status,0, pclath, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1
   727 ;;      Params:         0       0       0
   728 ;;      Locals:         0       0       0
   729 ;;      Temps:          0       0       0
   730 ;;      Totals:         0       0       0
   731 ;;Total ram usage:        0 bytes
   732 ;; Hardware stack levels used:    1
   733 ;; Hardware stack levels required when called:    3
   734 ;; This function calls:
   735 ;;		_pwmInit
   736 ;;		_pwmStop
   737 ;; This function is called by:
   738 ;;		_main
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742                           
   743                           ;psect for function _workCtr
   744  03B0                     _workCtr:	
   745                           
   746                           ;main.c: 664: if(startTime > 0)
   747                           
   748                           ;incstack = 0
   749                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   750  03B0  1283               	bcf	3,5	;RP0=0, select bank0
   751  03B1  0845               	movf	_startTime,w
   752  03B2  1D03               	btfss	3,2
   753                           
   754                           ;main.c: 665: {
   755                           ;main.c: 666: startTime--;
   756  03B3  03C5               	decf	_startTime,f
   757                           
   758                           ;main.c: 667: }
   759                           ;main.c: 668: if(workStep > 0)
   760  03B4  0879               	movf	_workStep,w
   761  03B5  1903               	btfsc	3,2
   762  03B6  2C04               	goto	l2806
   763                           
   764                           ;main.c: 669: {
   765                           ;main.c: 670: if(motorPwmFlag == 0)
   766  03B7  0833               	movf	_motorPwmFlag,w
   767  03B8  1D03               	btfss	3,2
   768  03B9  2BBB               	goto	l2756
   769                           
   770                           ;main.c: 671: {
   771                           ;main.c: 672: pwmInit();
   772  03BA  25F4               	fcall	_pwmInit
   773  03BB                     l2756:	
   774                           
   775                           ;main.c: 674: }
   776                           ;main.c: 675: if(workStep == 1)
   777  03BB  0B79               	decfsz	_workStep,w
   778  03BC  2BBF               	goto	l2760
   779                           
   780                           ;main.c: 676: {
   781                           ;main.c: 677: maxDuty = 158;
   782  03BD  309E               	movlw	158
   783  03BE  2BFC               	goto	L1
   784  03BF                     l2760:	
   785                           ;main.c: 678: }
   786                           
   787                           
   788                           ;main.c: 679: else if(workStep == 2)
   789  03BF  3002               	movlw	2
   790  03C0  0679               	xorwf	_workStep,w
   791  03C1  1D03               	btfss	3,2
   792  03C2  2BC5               	goto	l2764
   793                           
   794                           ;main.c: 680: maxDuty = 163;
   795  03C3  30A3               	movlw	163
   796  03C4  2BFC               	goto	L1
   797  03C5                     l2764:	
   798                           
   799                           ;main.c: 681: else if(workStep == 3)
   800  03C5  3003               	movlw	3
   801  03C6  0679               	xorwf	_workStep,w
   802  03C7  1D03               	btfss	3,2
   803  03C8  2BCB               	goto	l2768
   804                           
   805                           ;main.c: 682: maxDuty = 167;
   806  03C9  30A7               	movlw	167
   807  03CA  2BFC               	goto	L1
   808  03CB                     l2768:	
   809                           
   810                           ;main.c: 683: else if(workStep == 4)
   811  03CB  3004               	movlw	4
   812  03CC  0679               	xorwf	_workStep,w
   813  03CD  1D03               	btfss	3,2
   814  03CE  2BD1               	goto	l2772
   815                           
   816                           ;main.c: 684: maxDuty = 170;
   817  03CF  30AA               	movlw	170
   818  03D0  2BFC               	goto	L1
   819  03D1                     l2772:	
   820                           
   821                           ;main.c: 685: else if(workStep == 5)
   822  03D1  3005               	movlw	5
   823  03D2  0679               	xorwf	_workStep,w
   824  03D3  1D03               	btfss	3,2
   825  03D4  2BD7               	goto	l2776
   826                           
   827                           ;main.c: 686: maxDuty = 173;
   828  03D5  30AD               	movlw	173
   829  03D6  2BFC               	goto	L1
   830  03D7                     l2776:	
   831                           
   832                           ;main.c: 687: else if(workStep == 6)
   833  03D7  3006               	movlw	6
   834  03D8  0679               	xorwf	_workStep,w
   835  03D9  1D03               	btfss	3,2
   836  03DA  2BDD               	goto	l2780
   837                           
   838                           ;main.c: 688: maxDuty = 177;
   839  03DB  30B1               	movlw	177
   840  03DC  2BFC               	goto	L1
   841  03DD                     l2780:	
   842                           
   843                           ;main.c: 689: else if(workStep == 7)
   844  03DD  3007               	movlw	7
   845  03DE  0679               	xorwf	_workStep,w
   846  03DF  1D03               	btfss	3,2
   847  03E0  2BE3               	goto	l2784
   848                           
   849                           ;main.c: 690: maxDuty = 180;
   850  03E1  30B4               	movlw	180
   851  03E2  2BFC               	goto	L1
   852  03E3                     l2784:	
   853                           
   854                           ;main.c: 691: else if(workStep == 8)
   855  03E3  3008               	movlw	8
   856  03E4  0679               	xorwf	_workStep,w
   857  03E5  1D03               	btfss	3,2
   858  03E6  2BE9               	goto	l2788
   859                           
   860                           ;main.c: 692: maxDuty = 184;
   861  03E7  30B8               	movlw	184
   862  03E8  2BFC               	goto	L1
   863  03E9                     l2788:	
   864                           
   865                           ;main.c: 693: else if(workStep == 9)
   866  03E9  3009               	movlw	9
   867  03EA  0679               	xorwf	_workStep,w
   868  03EB  1D03               	btfss	3,2
   869  03EC  2BEF               	goto	l2792
   870                           
   871                           ;main.c: 694: maxDuty = 188;
   872  03ED  30BC               	movlw	188
   873  03EE  2BFC               	goto	L1
   874  03EF                     l2792:	
   875                           
   876                           ;main.c: 695: else if(workStep == 10)
   877  03EF  300A               	movlw	10
   878  03F0  0679               	xorwf	_workStep,w
   879  03F1  1D03               	btfss	3,2
   880  03F2  2BF5               	goto	l2796
   881                           
   882                           ;main.c: 696: maxDuty = 192;
   883  03F3  30C0               	movlw	192
   884  03F4  2BFC               	goto	L1
   885  03F5                     l2796:	
   886                           
   887                           ;main.c: 697: else if(workStep == 11)
   888  03F5  300B               	movlw	11
   889  03F6  0679               	xorwf	_workStep,w
   890  03F7  1D03               	btfss	3,2
   891  03F8  2BFB               	goto	l2800
   892                           
   893                           ;main.c: 698: maxDuty = 196;
   894  03F9  30C4               	movlw	196
   895  03FA  2BFC               	goto	L1
   896  03FB                     l2800:	
   897                           
   898                           ;main.c: 699: else
   899                           ;main.c: 700: {
   900                           ;main.c: 701: maxDuty = 200;
   901  03FB  30C8               	movlw	200
   902  03FC                     L1:	
   903  03FC  00C6               	movwf	_maxDuty
   904                           
   905                           ;main.c: 702: }
   906                           ;main.c: 703: PWMD23H = 0;
   907  03FD  1683               	bsf	3,5	;RP0=1, select bank1
   908  03FE  019E               	clrf	30	;volatile
   909                           
   910                           ;main.c: 704: PWMD3L = maxDuty;
   911  03FF  1283               	bcf	3,5	;RP0=0, select bank0
   912  0400  0846               	movf	_maxDuty,w
   913  0401  1683               	bsf	3,5	;RP0=1, select bank1
   914  0402  009C               	movwf	28	;volatile
   915                           
   916                           ;main.c: 707: }
   917  0403  0008               	return
   918  0404                     l2806:	
   919                           
   920                           ;main.c: 708: else
   921                           ;main.c: 709: {
   922                           ;main.c: 710: pwmStop();
   923  0404  260C               	fcall	_pwmStop
   924                           
   925                           ;main.c: 711: count900s = 0;
   926  0405  01A2               	clrf	_count900s
   927  0406  01A3               	clrf	_count900s+1
   928  0407  0008               	return
   929  0408                     __end_of_workCtr:	
   930                           
   931                           	psect	text2
   932  05F4                     __ptext2:	
   933 ;; *************** function _pwmInit *****************
   934 ;; Defined at:
   935 ;;		line 965 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, status,2, status,0
   944 ;; Tracked objects:
   945 ;;		On entry : 100/0
   946 ;;		On exit  : 100/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1
   949 ;;      Params:         0       0       0
   950 ;;      Locals:         0       0       0
   951 ;;      Temps:          0       0       0
   952 ;;      Totals:         0       0       0
   953 ;;Total ram usage:        0 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    2
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_workCtr
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _pwmInit
   965  05F4                     _pwmInit:	
   966                           
   967                           ;main.c: 967: if(motorPwmFlag > 0)
   968                           
   969                           ;incstack = 0
   970                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
   971  05F4  0833               	movf	_motorPwmFlag,w
   972  05F5  1D03               	btfss	3,2
   973  05F6  0008               	return
   974                           
   975                           ;main.c: 969: motorPwmFlag = 1;
   976  05F7  01B3               	clrf	_motorPwmFlag
   977  05F8  0AB3               	incf	_motorPwmFlag,f
   978                           
   979                           ;main.c: 970: PWMCON1 = 0B00000000;
   980  05F9  0196               	clrf	22	;volatile
   981                           
   982                           ;main.c: 971: PWMTH = 0X00;
   983  05FA  0198               	clrf	24	;volatile
   984                           
   985                           ;main.c: 972: PWMTL = 200;
   986  05FB  30C8               	movlw	200
   987  05FC  0097               	movwf	23	;volatile
   988                           
   989                           ;main.c: 975: PWMD23H = 0;
   990  05FD  1683               	bsf	3,5	;RP0=1, select bank1
   991  05FE  019E               	clrf	30	;volatile
   992                           
   993                           ;main.c: 976: PWMD3L = 80;
   994  05FF  3050               	movlw	80
   995  0600  009C               	movwf	28	;volatile
   996                           
   997                           ;main.c: 977: PWM23DT = 0X00;
   998  0601  019D               	clrf	29	;volatile
   999                           
  1000                           ;main.c: 979: PWMCON0 = 0X48;
  1001  0602  3048               	movlw	72
  1002                           
  1003                           ;main.c: 980: PWMCON2 =0X00;
  1004  0603  2DDF               	ljmp	PL10	;call to abstracted procedure
  1005  0604                     __end_of_pwmInit:	
  1006                           
  1007                           	psect	text3
  1008  0335                     __ptext3:	
  1009 ;; *************** function _ledCtr *****************
  1010 ;; Defined at:
  1011 ;;		line 378 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;		None
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 100/0
  1022 ;;		On exit  : 100/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMMON   BANK0   BANK1
  1025 ;;      Params:         0       0       0
  1026 ;;      Locals:         0       0       0
  1027 ;;      Temps:          0       0       0
  1028 ;;      Totals:         0       0       0
  1029 ;;Total ram usage:        0 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    3
  1032 ;; This function calls:
  1033 ;;		___lbdiv
  1034 ;;		___lbmod
  1035 ;;		___lwdiv
  1036 ;; This function is called by:
  1037 ;;		_main
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           
  1042                           ;psect for function _ledCtr
  1043  0335                     _ledCtr:	
  1044                           
  1045                           ;main.c: 380: if(firstTime > 0 && firstTime < 150)
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1049  0335  0866               	movf	_firstTime,w
  1050  0336  1903               	btfsc	3,2
  1051  0337  2B42               	goto	l3232
  1052  0338  3096               	movlw	150
  1053  0339  0266               	subwf	_firstTime,w
  1054  033A  1803               	skipnc
  1055  033B  2B42               	goto	l3232
  1056                           
  1057                           ;main.c: 381: {
  1058                           ;main.c: 382: sumBatValue += pwStep;
  1059  033C  0843               	movf	_pwStep,w
  1060  033D  07A0               	addwf	_sumBatValue,f
  1061  033E  1803               	skipnc
  1062  033F  0AA1               	incf	_sumBatValue+1,f
  1063                           
  1064                           ;main.c: 383: firstCheckTime++;
  1065  0340  0AB2               	incf	_firstCheckTime,f
  1066                           
  1067                           ;main.c: 384: }
  1068  0341  2B53               	goto	l3240
  1069  0342                     l3232:	
  1070                           
  1071                           ;main.c: 385: else
  1072                           ;main.c: 386: {
  1073                           ;main.c: 387: if(sumBatValue > 0)
  1074  0342  0820               	movf	_sumBatValue,w
  1075  0343  0421               	iorwf	_sumBatValue+1,w
  1076  0344  1903               	btfsc	3,2
  1077  0345  2B50               	goto	l3236
  1078                           
  1079                           ;main.c: 388: {
  1080                           ;main.c: 389: prePwStep = sumBatValue/firstCheckTime;
  1081  0346  0832               	movf	_firstCheckTime,w
  1082  0347  00F3               	movwf	___lwdiv@divisor
  1083  0348  01F4               	clrf	___lwdiv@divisor+1
  1084  0349  0821               	movf	_sumBatValue+1,w
  1085  034A  00F6               	movwf	___lwdiv@dividend+1
  1086  034B  0820               	movf	_sumBatValue,w
  1087  034C  00F5               	movwf	___lwdiv@dividend
  1088  034D  24D9               	fcall	___lwdiv
  1089  034E  0873               	movf	?___lwdiv,w
  1090  034F  00C2               	movwf	_prePwStep
  1091  0350                     l3236:	
  1092                           
  1093                           ;main.c: 390: }
  1094                           ;main.c: 391: firstCheckTime = 0;
  1095  0350  01B2               	clrf	_firstCheckTime
  1096                           
  1097                           ;main.c: 392: sumBatValue = 0;
  1098  0351  01A0               	clrf	_sumBatValue
  1099  0352  01A1               	clrf	_sumBatValue+1
  1100  0353                     l3240:	
  1101                           
  1102                           ;main.c: 393: }
  1103                           ;main.c: 394: if(firstTime > 0)
  1104  0353  0866               	movf	_firstTime,w
  1105  0354  1903               	btfsc	3,2
  1106  0355  2B58               	goto	l3244
  1107                           
  1108                           ;main.c: 395: {
  1109                           ;main.c: 396: firstTime--;
  1110  0356  03E6               	decf	_firstTime,f
  1111                           
  1112                           ;main.c: 397: }
  1113  0357  0008               	return
  1114  0358                     l3244:	
  1115                           
  1116                           ;main.c: 398: else if(overWorkTime > 0)
  1117  0358  0837               	movf	_overWorkTime,w
  1118  0359  1903               	btfsc	3,2
  1119  035A  2B63               	goto	l3252
  1120  035B  3001               	movlw	low (_numArray-__stringbase)
  1121                           
  1122                           ;main.c: 399: {
  1123                           ;main.c: 400: overWorkTime--;
  1124  035C  03B7               	decf	_overWorkTime,f
  1125                           
  1126                           ;main.c: 401: shiweiNum = numArray[0];
  1127  035D  0084               	movwf	4
  1128  035E  25BE               	fcall	stringdir
  1129  035F  00E5               	movwf	_shiweiNum
  1130                           
  1131                           ;main.c: 402: geweiNum = 0x71;
  1132  0360  3071               	movlw	113
  1133  0361  00E4               	movwf	_geweiNum
  1134                           
  1135                           ;main.c: 403: }
  1136  0362  0008               	return
  1137  0363                     l3252:	
  1138                           
  1139                           ;main.c: 404: else if(showBatTime > 0)
  1140  0363  0840               	movf	_showBatTime,w
  1141  0364  1903               	btfsc	3,2
  1142  0365  2B75               	goto	l3260
  1143  0366  300A               	movlw	10
  1144                           
  1145                           ;main.c: 405: {
  1146                           ;main.c: 406: showBatTime--;
  1147  0367  03C0               	decf	_showBatTime,f
  1148                           
  1149                           ;main.c: 407: shiweiNum = numArray[prePwStep/10];
  1150  0368  00F3               	movwf	___lbdiv@divisor
  1151  0369  0842               	movf	_prePwStep,w
  1152  036A  2589               	fcall	___lbdiv
  1153  036B  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1154  036C  0084               	movwf	4
  1155  036D  25BE               	fcall	stringdir
  1156                           
  1157                           ;main.c: 408: geweiNum = numArray[prePwStep%10];
  1158  036E  23AB               	fcall	PL14	;call to abstracted procedure
  1159  036F  256D               	fcall	___lbmod
  1160  0370  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1161  0371  0084               	movwf	4
  1162  0372  25BE               	fcall	stringdir
  1163  0373  00E4               	movwf	_geweiNum
  1164                           
  1165                           ;main.c: 409: }
  1166  0374  0008               	return
  1167  0375                     l3260:	
  1168                           
  1169                           ;main.c: 410: else if(workStep > 0)
  1170  0375  0879               	movf	_workStep,w
  1171  0376  1903               	btfsc	3,2
  1172  0377  2B90               	goto	l3272
  1173                           
  1174                           ;main.c: 411: {
  1175                           ;main.c: 413: if(workStep < 10)
  1176  0378  300A               	movlw	10
  1177  0379  0279               	subwf	_workStep,w
  1178  037A  1803               	skipnc
  1179  037B  2B86               	goto	l3268
  1180                           
  1181                           ;main.c: 414: {
  1182                           ;main.c: 415: shiweiNum = numArray[0];
  1183  037C  3001               	movlw	low (_numArray-__stringbase)
  1184  037D  0084               	movwf	4
  1185  037E  25BE               	fcall	stringdir
  1186  037F  00E5               	movwf	_shiweiNum
  1187                           
  1188                           ;main.c: 416: geweiNum = numArray[workStep];
  1189  0380  0879               	movf	_workStep,w
  1190  0381  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1191  0382  0084               	movwf	4
  1192  0383  25BE               	fcall	stringdir
  1193  0384  00E4               	movwf	_geweiNum
  1194                           
  1195                           ;main.c: 417: }
  1196  0385  0008               	return
  1197  0386                     l3268:	
  1198                           
  1199                           ;main.c: 418: else
  1200                           ;main.c: 419: {
  1201                           ;main.c: 420: shiweiNum = numArray[1];
  1202  0386  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
  1203  0387  0084               	movwf	4
  1204  0388  25BE               	fcall	stringdir
  1205  0389  00E5               	movwf	_shiweiNum
  1206                           
  1207                           ;main.c: 421: geweiNum = numArray[workStep - 10];
  1208  038A  0879               	movf	_workStep,w
  1209  038B  3EF7               	addlw	low (((_numArray-__stringbase)| (0+32768)+246))
  1210  038C  0084               	movwf	4
  1211  038D  25BE               	fcall	stringdir
  1212  038E  00E4               	movwf	_geweiNum
  1213  038F  0008               	return
  1214  0390                     l3272:	
  1215                           
  1216                           ;main.c: 425: else if(chrgFullFlag || (chrgFlag && count1s < 50))
  1217  0390  084E               	movf	_chrgFullFlag,w
  1218  0391  1D03               	btfss	3,2
  1219  0392  2B9A               	goto	l3278
  1220  0393  087A               	movf	_chrgFlag,w
  1221  0394  1903               	btfsc	3,2
  1222  0395  2BA8               	goto	l3280
  1223  0396  3032               	movlw	50
  1224  0397  0250               	subwf	_count1s,w
  1225  0398  1803               	skipnc
  1226  0399  2BA8               	goto	l3280
  1227  039A                     l3278:	
  1228                           
  1229                           ;main.c: 426: {
  1230                           ;main.c: 427: shiweiNum = numArray[prePwStep/10];
  1231  039A  300A               	movlw	10
  1232  039B  00F3               	movwf	___lbdiv@divisor
  1233  039C  0842               	movf	_prePwStep,w
  1234  039D  2589               	fcall	___lbdiv
  1235  039E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1236  039F  0084               	movwf	4
  1237  03A0  25BE               	fcall	stringdir
  1238                           
  1239                           ;main.c: 428: geweiNum = numArray[prePwStep%10];
  1240  03A1  23AB               	fcall	PL14	;call to abstracted procedure
  1241  03A2  256D               	fcall	___lbmod
  1242  03A3  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1243  03A4  0084               	movwf	4
  1244  03A5  25BE               	fcall	stringdir
  1245  03A6  00E4               	movwf	_geweiNum
  1246                           
  1247                           ;main.c: 429: }
  1248  03A7  0008               	return
  1249  03A8                     l3280:	
  1250                           
  1251                           ;main.c: 430: else
  1252                           ;main.c: 431: {
  1253                           ;main.c: 432: shiweiNum = 0;
  1254  03A8  01E5               	clrf	_shiweiNum
  1255                           
  1256                           ;main.c: 433: geweiNum = 0;
  1257  03A9  01E4               	clrf	_geweiNum
  1258  03AA  0008               	return
  1259  03AB                     __end_of_ledCtr:	
  1260  03AB                     PL14:	
  1261  03AB  00E5               	movwf	_shiweiNum
  1262  03AC  300A               	movlw	10
  1263  03AD  00F3               	movwf	___lbmod@divisor
  1264  03AE  0842               	movf	_prePwStep,w
  1265  03AF  0008               	return
  1266  03B0                     __end_ofPL14:	
  1267                           
  1268                           	psect	text4
  1269  04D9                     __ptext4:	
  1270 ;; *************** function ___lwdiv *****************
  1271 ;; Defined at:
  1272 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;  divisor         2    3[COMMON] unsigned int 
  1275 ;;  dividend        2    5[COMMON] unsigned int 
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  quotient        2    1[BANK0 ] unsigned int 
  1278 ;;  counter         1    0[BANK0 ] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  2    3[COMMON] unsigned int 
  1281 ;; Registers used:
  1282 ;;		wreg, status,2, status,0
  1283 ;; Tracked objects:
  1284 ;;		On entry : 100/0
  1285 ;;		On exit  : 100/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1
  1288 ;;      Params:         4       0       0
  1289 ;;      Locals:         0       3       0
  1290 ;;      Temps:          0       0       0
  1291 ;;      Totals:         4       3       0
  1292 ;;Total ram usage:        7 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    2
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_ledCtr
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           
  1303                           ;psect for function ___lwdiv
  1304  04D9                     ___lwdiv:	
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1308  04D9  01D4               	clrf	___lwdiv@quotient
  1309  04DA  01D5               	clrf	___lwdiv@quotient+1
  1310  04DB  0873               	movf	___lwdiv@divisor,w
  1311  04DC  0474               	iorwf	___lwdiv@divisor+1,w
  1312  04DD  1903               	btfsc	3,2
  1313  04DE  2CFE               	goto	l3128
  1314  04DF  01D3               	clrf	___lwdiv@counter
  1315  04E0                     L2:	
  1316  04E0  0AD3               	incf	___lwdiv@counter,f
  1317  04E1  1BF4               	btfsc	___lwdiv@divisor+1,7
  1318  04E2  2CE7               	goto	l3116
  1319  04E3  1003               	clrc
  1320  04E4  0DF3               	rlf	___lwdiv@divisor,f
  1321  04E5  0DF4               	rlf	___lwdiv@divisor+1,f
  1322  04E6  2CE0               	goto	L2
  1323  04E7                     l3116:	
  1324  04E7  1003               	clrc
  1325  04E8  0DD4               	rlf	___lwdiv@quotient,f
  1326  04E9  0DD5               	rlf	___lwdiv@quotient+1,f
  1327  04EA  0874               	movf	___lwdiv@divisor+1,w
  1328  04EB  0276               	subwf	___lwdiv@dividend+1,w
  1329  04EC  1D03               	skipz
  1330  04ED  2CF0               	goto	u3355
  1331  04EE  0873               	movf	___lwdiv@divisor,w
  1332  04EF  0275               	subwf	___lwdiv@dividend,w
  1333  04F0                     u3355:	
  1334  04F0  1C03               	skipc
  1335  04F1  2CFA               	goto	L3
  1336  04F2  0873               	movf	___lwdiv@divisor,w
  1337  04F3  02F5               	subwf	___lwdiv@dividend,f
  1338  04F4  0874               	movf	___lwdiv@divisor+1,w
  1339  04F5  1C03               	skipc
  1340  04F6  03F6               	decf	___lwdiv@dividend+1,f
  1341  04F7  02F6               	subwf	___lwdiv@dividend+1,f
  1342  04F8  1454               	bsf	___lwdiv@quotient,0
  1343  04F9  1003               	clrc
  1344  04FA                     L3:	
  1345  04FA  0CF4               	rrf	___lwdiv@divisor+1,f
  1346  04FB  0CF3               	rrf	___lwdiv@divisor,f
  1347  04FC  0BD3               	decfsz	___lwdiv@counter,f
  1348  04FD  2CE7               	goto	l3116
  1349  04FE                     l3128:	
  1350  04FE  0855               	movf	___lwdiv@quotient+1,w
  1351  04FF  00F4               	movwf	?___lwdiv+1
  1352  0500  0854               	movf	___lwdiv@quotient,w
  1353  0501  00F3               	movwf	?___lwdiv
  1354  0502  0008               	return
  1355  0503                     __end_of___lwdiv:	
  1356                           
  1357                           	psect	text5
  1358  056D                     __ptext5:	
  1359 ;; *************** function ___lbmod *****************
  1360 ;; Defined at:
  1361 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  dividend        1    wreg     unsigned char 
  1364 ;;  divisor         1    3[COMMON] unsigned char 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  dividend        1    0[BANK0 ] unsigned char 
  1367 ;;  rem             1    2[BANK0 ] unsigned char 
  1368 ;;  counter         1    1[BANK0 ] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      unsigned char 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0
  1373 ;; Tracked objects:
  1374 ;;		On entry : 100/0
  1375 ;;		On exit  : 100/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1
  1378 ;;      Params:         1       0       0
  1379 ;;      Locals:         0       3       0
  1380 ;;      Temps:          1       0       0
  1381 ;;      Totals:         2       3       0
  1382 ;;Total ram usage:        5 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    2
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_ledCtr
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           
  1393                           ;psect for function ___lbmod
  1394  056D                     ___lbmod:	
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1398                           ;___lbmod@dividend stored from wreg
  1399  056D  00D3               	movwf	___lbmod@dividend
  1400  056E  3008               	movlw	8
  1401  056F  00D4               	movwf	___lbmod@counter
  1402  0570  01D5               	clrf	___lbmod@rem
  1403  0571                     l3092:	
  1404  0571  0853               	movf	___lbmod@dividend,w
  1405  0572  00F4               	movwf	??___lbmod
  1406  0573  3007               	movlw	7
  1407  0574  1003               	clrc
  1408  0575                     L4:	
  1409  0575  0CF4               	rrf	??___lbmod,f
  1410  0576  3EFF               	addlw	-1
  1411  0577  1003               	clrc
  1412  0578  1D03               	skipz
  1413  0579  2D75               	goto	L4
  1414  057A  0D55               	rlf	___lbmod@rem,w
  1415  057B  0474               	iorwf	??___lbmod,w
  1416  057C  00D5               	movwf	___lbmod@rem
  1417  057D  1003               	clrc
  1418  057E  0DD3               	rlf	___lbmod@dividend,f
  1419  057F  0873               	movf	___lbmod@divisor,w
  1420  0580  0255               	subwf	___lbmod@rem,w
  1421  0581  1C03               	skipc
  1422  0582  2D85               	goto	l3100
  1423  0583  0873               	movf	___lbmod@divisor,w
  1424  0584  02D5               	subwf	___lbmod@rem,f
  1425  0585                     l3100:	
  1426  0585  0BD4               	decfsz	___lbmod@counter,f
  1427  0586  2D71               	goto	l3092
  1428  0587  0855               	movf	___lbmod@rem,w
  1429  0588  0008               	return
  1430  0589                     __end_of___lbmod:	
  1431                           
  1432                           	psect	text6
  1433  0589                     __ptext6:	
  1434 ;; *************** function ___lbdiv *****************
  1435 ;; Defined at:
  1436 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  dividend        1    wreg     unsigned char 
  1439 ;;  divisor         1    3[COMMON] unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  dividend        1    4[COMMON] unsigned char 
  1442 ;;  quotient        1    6[COMMON] unsigned char 
  1443 ;;  counter         1    5[COMMON] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      unsigned char 
  1446 ;; Registers used:
  1447 ;;		wreg, status,2, status,0
  1448 ;; Tracked objects:
  1449 ;;		On entry : 100/0
  1450 ;;		On exit  : 100/0
  1451 ;;		Unchanged: 100/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1
  1453 ;;      Params:         1       0       0
  1454 ;;      Locals:         3       0       0
  1455 ;;      Temps:          0       0       0
  1456 ;;      Totals:         4       0       0
  1457 ;;Total ram usage:        4 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    2
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_ledCtr
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           
  1468                           ;psect for function ___lbdiv
  1469  0589                     ___lbdiv:	
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1473                           ;___lbdiv@dividend stored from wreg
  1474  0589  00F4               	movwf	___lbdiv@dividend
  1475  058A  01F6               	clrf	___lbdiv@quotient
  1476  058B  0873               	movf	___lbdiv@divisor,w
  1477  058C  1903               	btfsc	3,2
  1478  058D  2DA2               	goto	l2376
  1479  058E  01F5               	clrf	___lbdiv@counter
  1480  058F                     l2362:	
  1481  058F  0AF5               	incf	___lbdiv@counter,f
  1482  0590  1BF3               	btfsc	___lbdiv@divisor,7
  1483  0591  2D95               	goto	l1196
  1484  0592  1003               	clrc
  1485  0593  0DF3               	rlf	___lbdiv@divisor,f
  1486  0594  2D8F               	goto	l2362
  1487  0595                     l1196:	
  1488  0595  1003               	clrc
  1489  0596  0DF6               	rlf	___lbdiv@quotient,f
  1490  0597  0873               	movf	___lbdiv@divisor,w
  1491  0598  0274               	subwf	___lbdiv@dividend,w
  1492  0599  1C03               	skipc
  1493  059A  2D9F               	goto	L5
  1494  059B  0873               	movf	___lbdiv@divisor,w
  1495  059C  02F4               	subwf	___lbdiv@dividend,f
  1496  059D  1476               	bsf	___lbdiv@quotient,0
  1497  059E  1003               	clrc
  1498  059F                     L5:	
  1499  059F  0CF3               	rrf	___lbdiv@divisor,f
  1500  05A0  0BF5               	decfsz	___lbdiv@counter,f
  1501  05A1  2D95               	goto	l1196
  1502  05A2                     l2376:	
  1503  05A2  0876               	movf	___lbdiv@quotient,w
  1504  05A3  0008               	return
  1505  05A4                     __end_of___lbdiv:	
  1506                           
  1507                           	psect	text7
  1508  052D                     __ptext7:	
  1509 ;; *************** function _keyCtr *****************
  1510 ;; Defined at:
  1511 ;;		line 628 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  kclick          1    4[COMMON] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 100/0
  1522 ;;		On exit  : 100/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1
  1525 ;;      Params:         0       0       0
  1526 ;;      Locals:         1       0       0
  1527 ;;      Temps:          0       0       0
  1528 ;;      Totals:         1       0       0
  1529 ;;Total ram usage:        1 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    3
  1532 ;; This function calls:
  1533 ;;		_keyRead
  1534 ;; This function is called by:
  1535 ;;		_main
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           
  1540                           ;psect for function _keyCtr
  1541  052D                     _keyCtr:	
  1542                           
  1543                           ;main.c: 630: char kclick = keyRead(0x04 & (~PORTB));
  1544                           
  1545                           ;incstack = 0
  1546                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1547  052D  0906               	comf	6,w	;volatile
  1548  052E  3904               	andlw	4
  1549  052F  2503               	fcall	_keyRead
  1550  0530  00F4               	movwf	keyCtr@kclick
  1551                           
  1552                           ;main.c: 631: if(kclick == 1 && workStep > 0)
  1553  0531  0B74               	decfsz	keyCtr@kclick,w
  1554  0532  2D3E               	goto	l2732
  1555  0533  0879               	movf	_workStep,w
  1556  0534  1903               	btfsc	3,2
  1557  0535  2D3E               	goto	l2732
  1558                           
  1559                           ;main.c: 632: {
  1560                           ;main.c: 634: if(++workStep > 12)
  1561  0536  300D               	movlw	13
  1562  0537  0AF9               	incf	_workStep,f
  1563  0538  0279               	subwf	_workStep,w
  1564  0539  1C03               	skipc
  1565  053A  0008               	return
  1566                           
  1567                           ;main.c: 635: {
  1568                           ;main.c: 636: workStep = 1;
  1569  053B  01F9               	clrf	_workStep
  1570  053C  0AF9               	incf	_workStep,f
  1571  053D  0008               	return
  1572  053E                     l2732:	
  1573                           
  1574                           ;main.c: 641: else if(kclick == 2)
  1575  053E  3002               	movlw	2
  1576  053F  0674               	xorwf	keyCtr@kclick,w
  1577  0540  1D03               	btfss	3,2
  1578  0541  0008               	return
  1579                           
  1580                           ;main.c: 642: {
  1581                           ;main.c: 643: if(workStep > 0)
  1582  0542  0879               	movf	_workStep,w
  1583  0543  1903               	btfsc	3,2
  1584  0544  2D49               	goto	l822
  1585  0545  30C8               	movlw	200
  1586                           
  1587                           ;main.c: 644: {
  1588                           ;main.c: 645: workStep = 0;
  1589  0546  01F9               	clrf	_workStep
  1590                           
  1591                           ;main.c: 646: overWorkTime = 200;
  1592  0547  00B7               	movwf	_overWorkTime
  1593                           
  1594                           ;main.c: 647: }
  1595  0548  0008               	return
  1596  0549                     l822:	
  1597  0549  301E               	movlw	30
  1598                           
  1599                           ;main.c: 648: else
  1600                           ;main.c: 649: {
  1601                           ;main.c: 650: workStep = 1;
  1602  054A  01F9               	clrf	_workStep
  1603  054B  0AF9               	incf	_workStep,f
  1604                           
  1605                           ;main.c: 651: startTime = 30;
  1606  054C  00C5               	movwf	_startTime
  1607                           
  1608                           ;main.c: 652: showBatTime = 0;
  1609  054D  01C0               	clrf	_showBatTime
  1610                           
  1611                           ;main.c: 653: overWorkTime = 0;
  1612  054E  01B7               	clrf	_overWorkTime
  1613  054F  0008               	return
  1614  0550                     __end_of_keyCtr:	
  1615                           
  1616                           	psect	text8
  1617  0503                     __ptext8:	
  1618 ;; *************** function _keyRead *****************
  1619 ;; Defined at:
  1620 ;;		line 586 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  keyStatus       1    wreg     unsigned char 
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  keyStatus       1    3[COMMON] unsigned char 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      unsigned char 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0
  1629 ;; Tracked objects:
  1630 ;;		On entry : 100/0
  1631 ;;		On exit  : 100/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1
  1634 ;;      Params:         0       0       0
  1635 ;;      Locals:         1       0       0
  1636 ;;      Temps:          0       0       0
  1637 ;;      Totals:         1       0       0
  1638 ;;Total ram usage:        1 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    2
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_keyCtr
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           
  1649                           ;psect for function _keyRead
  1650  0503                     _keyRead:	
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1654                           ;keyRead@keyStatus stored from wreg
  1655  0503  00F3               	movwf	keyRead@keyStatus
  1656                           
  1657                           ;main.c: 588: if(keyStatus)
  1658  0504  0873               	movf	keyRead@keyStatus,w
  1659  0505  1903               	btfsc	3,2
  1660  0506  2D20               	goto	l2246
  1661                           
  1662                           ;main.c: 589: {
  1663                           ;main.c: 590: keyCount++;
  1664  0507  0AC8               	incf	_keyCount,f
  1665                           
  1666                           ;main.c: 591: if(overWorkTime > 0)
  1667  0508  0837               	movf	_overWorkTime,w
  1668  0509  1903               	btfsc	3,2
  1669  050A  2D0E               	goto	l2232
  1670                           
  1671                           ;main.c: 592: {
  1672                           ;main.c: 593: overWorkTime = 200;
  1673  050B  30C8               	movlw	200
  1674  050C  00B7               	movwf	_overWorkTime
  1675                           
  1676                           ;main.c: 594: }
  1677  050D  2D13               	goto	l807
  1678  050E                     l2232:	
  1679                           
  1680                           ;main.c: 595: else if(workStep == 0)
  1681  050E  0879               	movf	_workStep,w
  1682  050F  1D03               	btfss	3,2
  1683  0510  2D13               	goto	l807
  1684                           
  1685                           ;main.c: 596: {
  1686                           ;main.c: 597: showBatTime = 200;
  1687  0511  30C8               	movlw	200
  1688  0512  00C0               	movwf	_showBatTime
  1689  0513                     l807:	
  1690                           
  1691                           ;main.c: 598: }
  1692                           ;main.c: 599: if(keyCount >= 100)
  1693  0513  3064               	movlw	100
  1694  0514  0248               	subwf	_keyCount,w
  1695  0515  1C03               	skipc
  1696  0516  3400               	retlw	0
  1697                           
  1698                           ;main.c: 600: {
  1699                           ;main.c: 601: keyCount = 100;
  1700  0517  3064               	movlw	100
  1701  0518  00C8               	movwf	_keyCount
  1702                           
  1703                           ;main.c: 602: if(!longPressFlag)
  1704  0519  0847               	movf	_longPressFlag,w
  1705  051A  1D03               	btfss	3,2
  1706  051B  3400               	retlw	0
  1707  051C  3002               	movlw	2
  1708                           
  1709                           ;main.c: 603: {
  1710                           ;main.c: 604: longPressFlag = 1;
  1711  051D  01C7               	clrf	_longPressFlag
  1712  051E  0AC7               	incf	_longPressFlag,f
  1713                           
  1714                           ;main.c: 605: return 2;
  1715  051F  0008               	return
  1716  0520                     l2246:	
  1717                           
  1718                           ;main.c: 609: else
  1719                           ;main.c: 610: {
  1720                           ;main.c: 611: if(keyCount >= 100)
  1721  0520  3064               	movlw	100
  1722  0521  0248               	subwf	_keyCount,w
  1723  0522  1C03               	skipc
  1724  0523  2D27               	goto	l2256
  1725                           
  1726                           ;main.c: 612: {
  1727                           ;main.c: 613: keyCount = 0;
  1728  0524  01C8               	clrf	_keyCount
  1729                           
  1730                           ;main.c: 614: longPressFlag = 0;
  1731  0525  01C7               	clrf	_longPressFlag
  1732                           
  1733                           ;main.c: 615: return 0;
  1734  0526  3400               	retlw	0
  1735  0527                     l2256:	
  1736                           
  1737                           ;main.c: 617: else if(keyCount >= 6)
  1738  0527  3006               	movlw	6
  1739  0528  0248               	subwf	_keyCount,w
  1740                           
  1741                           ;main.c: 618: {
  1742                           ;main.c: 619: keyCount = 0;
  1743  0529  01C8               	clrf	_keyCount
  1744  052A  1803               	btfsc	3,0
  1745                           
  1746                           ;main.c: 620: return 1;
  1747  052B  3401               	retlw	1
  1748  052C  3400               	retlw	0
  1749  052D                     __end_of_keyRead:	
  1750                           ;main.c: 621: }
  1751                           ;main.c: 622: keyCount = 0;
  1752                           
  1753                           
  1754                           	psect	text9
  1755  0018                     __ptext9:	
  1756 ;; *************** function _chrgCtr *****************
  1757 ;; Defined at:
  1758 ;;		line 439 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      void 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, status,0, pclath, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 100/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMMON   BANK0   BANK1
  1772 ;;      Params:         0       0       0
  1773 ;;      Locals:         0       0       0
  1774 ;;      Temps:          2       0       0
  1775 ;;      Totals:         2       0       0
  1776 ;;Total ram usage:        2 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    3
  1779 ;; This function calls:
  1780 ;;		_chrgPwmInit
  1781 ;;		_chrgPwmStop
  1782 ;;		_pwmStop
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _chrgCtr
  1790  0018                     _chrgCtr:	
  1791                           
  1792                           ;main.c: 441: if(PORTA & 0x20)
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1796  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1797  0019  1E86               	btfss	6,5	;volatile
  1798  001A  28DE               	goto	l2644
  1799                           
  1800                           ;main.c: 442: {
  1801                           ;main.c: 443: if(chrgFlag == 0)
  1802  001B  087A               	movf	_chrgFlag,w
  1803  001C  1D03               	btfss	3,2
  1804  001D  2823               	goto	l2536
  1805                           
  1806                           ;main.c: 444: {
  1807                           ;main.c: 445: chrgFlag = 1;
  1808  001E  01FA               	clrf	_chrgFlag
  1809  001F  0AFA               	incf	_chrgFlag,f
  1810                           
  1811                           ;main.c: 446: chrgMaxDuty = 0;
  1812  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0021  01B9               	clrf	_chrgMaxDuty
  1814                           
  1815                           ;main.c: 447: chrgPwmStop();
  1816  0022  261C               	fcall	_chrgPwmStop
  1817  0023                     l2536:	
  1818                           
  1819                           ;main.c: 448: }
  1820                           ;main.c: 449: workStep = 0;
  1821  0023  01F9               	clrf	_workStep
  1822                           
  1823                           ;main.c: 450: pwmStop();
  1824  0024  260C               	fcall	_pwmStop
  1825                           
  1826                           ;main.c: 451: lowBatFlag = 0;
  1827  0025  01B6               	clrf	_lowBatFlag
  1828                           
  1829                           ;main.c: 452: if(prePwStep < pwStep)
  1830  0026  0843               	movf	_pwStep,w
  1831  0027  0242               	subwf	_prePwStep,w
  1832  0028  1803               	skipnc
  1833  0029  2833               	goto	l2548
  1834                           
  1835                           ;main.c: 453: {
  1836                           ;main.c: 454: if(++count50s > 3000)
  1837  002A  20FC               	fcall	PL8	;call to abstracted procedure
  1838  002B  1903               	skipnz
  1839  002C  0228               	subwf	_count50s,w
  1840  002D  1C03               	skipc
  1841  002E  2835               	goto	l2550
  1842                           
  1843                           ;main.c: 455: {
  1844                           ;main.c: 456: count50s = 0;
  1845  002F  01A8               	clrf	_count50s
  1846  0030  01A9               	clrf	_count50s+1
  1847                           
  1848                           ;main.c: 457: prePwStep++;
  1849  0031  0AC2               	incf	_prePwStep,f
  1850  0032  2835               	goto	l2550
  1851  0033                     l2548:	
  1852                           
  1853                           ;main.c: 460: else
  1854                           ;main.c: 461: {
  1855                           ;main.c: 462: count50s = 0;
  1856  0033  01A8               	clrf	_count50s
  1857  0034  01A9               	clrf	_count50s+1
  1858  0035                     l2550:	
  1859                           
  1860                           ;main.c: 463: }
  1861                           ;main.c: 464: if(protectFlag)
  1862  0035  084B               	movf	_protectFlag,w
  1863  0036  1903               	btfsc	3,2
  1864  0037  284A               	goto	l2566
  1865                           
  1866                           ;main.c: 465: {
  1867                           ;main.c: 466: chrgPwmStop();
  1868  0038  261C               	fcall	_chrgPwmStop
  1869                           
  1870                           ;main.c: 467: if(prePwStep < 99 && protectFlag == 1)
  1871  0039  3063               	movlw	99
  1872  003A  0242               	subwf	_prePwStep,w
  1873  003B  1803               	skipnc
  1874  003C  2848               	goto	l2562
  1875  003D  0B4B               	decfsz	_protectFlag,w
  1876  003E  2848               	goto	l2562
  1877                           
  1878                           ;main.c: 468: {
  1879                           ;main.c: 469: if(++reChrgCount > 250)
  1880  003F  30FB               	movlw	251
  1881  0040  0AC1               	incf	_reChrgCount,f
  1882  0041  0241               	subwf	_reChrgCount,w
  1883  0042  1C03               	skipc
  1884  0043  0008               	return
  1885                           
  1886                           ;main.c: 470: {
  1887                           ;main.c: 471: reChrgCount = 0;
  1888  0044  01C1               	clrf	_reChrgCount
  1889                           
  1890                           ;main.c: 472: chrgFullFlag = 0;
  1891  0045  01CE               	clrf	_chrgFullFlag
  1892                           
  1893                           ;main.c: 473: protectFlag = 0;
  1894  0046  01CB               	clrf	_protectFlag
  1895  0047  0008               	return
  1896  0048                     l2562:	
  1897                           
  1898                           ;main.c: 476: else
  1899                           ;main.c: 477: {
  1900                           ;main.c: 478: reChrgCount = 0;
  1901  0048  01C1               	clrf	_reChrgCount
  1902  0049  0008               	return
  1903  004A                     l2566:	
  1904                           
  1905                           ;main.c: 481: }
  1906                           ;main.c: 482: if(batADValue < 1118)
  1907  004A  3004               	movlw	4
  1908  004B  022B               	subwf	_batADValue+1,w
  1909  004C  305E               	movlw	94
  1910  004D  1903               	skipnz
  1911  004E  022A               	subwf	_batADValue,w
  1912  004F  1803               	skipnc
  1913  0050  2854               	goto	l2572
  1914  0051  300F               	movlw	15
  1915                           
  1916                           ;main.c: 483: {
  1917                           ;main.c: 484: chrgMode = 0;
  1918  0052  01BF               	clrf	_chrgMode
  1919                           
  1920                           ;main.c: 485: chrgMaxAD = 15;
  1921  0053  286D               	goto	L7
  1922  0054                     l2572:	
  1923                           ;main.c: 486: }
  1924                           
  1925                           
  1926                           ;main.c: 487: else if(batADValue < 1530)
  1927  0054  3005               	movlw	5
  1928  0055  022B               	subwf	_batADValue+1,w
  1929  0056  30FA               	movlw	250
  1930  0057  1903               	skipnz
  1931  0058  022A               	subwf	_batADValue,w
  1932  0059  1803               	skipnc
  1933  005A  2861               	goto	l2580
  1934  005B  304D               	movlw	77
  1935                           
  1936                           ;main.c: 488: {
  1937                           ;main.c: 489: chrgMode = 1;
  1938  005C  01BF               	clrf	_chrgMode
  1939  005D  0ABF               	incf	_chrgMode,f
  1940                           
  1941                           ;main.c: 490: chrgMaxAD = 77;
  1942  005E  00BE               	movwf	_chrgMaxAD
  1943                           
  1944                           ;main.c: 491: lockCount = 0;
  1945  005F  01BD               	clrf	_lockCount
  1946                           
  1947                           ;main.c: 492: }
  1948  0060  286E               	goto	l2590
  1949  0061                     l2580:	
  1950                           
  1951                           ;main.c: 493: else if(count1s == 0)
  1952  0061  0850               	movf	_count1s,w
  1953  0062  1D03               	btfss	3,2
  1954  0063  286E               	goto	l2590
  1955                           
  1956                           ;main.c: 494: {
  1957                           ;main.c: 495: if(++lockCount > 200)
  1958  0064  30C9               	movlw	201
  1959  0065  0ABD               	incf	_lockCount,f
  1960  0066  023D               	subwf	_lockCount,w
  1961  0067  1C03               	skipc
  1962  0068  286C               	goto	l2588
  1963  0069  3002               	movlw	2
  1964                           
  1965                           ;main.c: 496: {
  1966                           ;main.c: 497: lockCount = 0;
  1967  006A  01BD               	clrf	_lockCount
  1968                           
  1969                           ;main.c: 498: chrgMode = 2;
  1970  006B  00BF               	movwf	_chrgMode
  1971  006C                     l2588:	
  1972                           
  1973                           ;main.c: 499: }
  1974                           ;main.c: 501: chrgMaxAD = 77;
  1975  006C  304D               	movlw	77
  1976  006D                     L7:	
  1977  006D  00BE               	movwf	_chrgMaxAD
  1978  006E                     l2590:	
  1979                           
  1980                           ;main.c: 502: }
  1981                           ;main.c: 503: if(chrgMode == 2 && outADValue < 8)
  1982  006E  3002               	movlw	2
  1983  006F  063F               	xorwf	_chrgMode,w
  1984  0070  1D03               	btfss	3,2
  1985  0071  2888               	goto	l2600
  1986  0072  3000               	movlw	0
  1987  0073  022D               	subwf	_outADValue+1,w
  1988  0074  3008               	movlw	8
  1989  0075  1903               	skipnz
  1990  0076  022C               	subwf	_outADValue,w
  1991  0077  1803               	skipnc
  1992  0078  2888               	goto	l2600
  1993                           
  1994                           ;main.c: 504: {
  1995                           ;main.c: 505: if(++fullCount >= 200)
  1996  0079  0AA6               	incf	_fullCount,f
  1997  007A  1903               	skipnz
  1998  007B  0AA7               	incf	_fullCount+1,f
  1999  007C  3000               	movlw	0
  2000  007D  0227               	subwf	_fullCount+1,w
  2001  007E  30C8               	movlw	200
  2002  007F  1903               	skipnz
  2003  0080  0226               	subwf	_fullCount,w
  2004  0081  1C03               	skipc
  2005  0082  288A               	goto	l2602
  2006                           
  2007                           ;main.c: 506: {
  2008                           ;main.c: 507: fullCount = 0;
  2009  0083  01A6               	clrf	_fullCount
  2010  0084  01A7               	clrf	_fullCount+1
  2011                           
  2012                           ;main.c: 508: chrgFullFlag = 1;
  2013  0085  01CE               	clrf	_chrgFullFlag
  2014  0086  0ACE               	incf	_chrgFullFlag,f
  2015  0087  288A               	goto	l2602
  2016  0088                     l2600:	
  2017                           
  2018                           ;main.c: 511: else
  2019                           ;main.c: 512: {
  2020                           ;main.c: 513: fullCount = 0;
  2021  0088  01A6               	clrf	_fullCount
  2022  0089  01A7               	clrf	_fullCount+1
  2023  008A                     l2602:	
  2024                           
  2025                           ;main.c: 514: }
  2026                           ;main.c: 515: if(chrgFullFlag)
  2027  008A  084E               	movf	_chrgFullFlag,w
  2028  008B  1903               	btfsc	3,2
  2029  008C  288E               	goto	l2606
  2030                           
  2031                           ;main.c: 516: {
  2032                           ;main.c: 517: chrgPwmStop();
  2033  008D  2E1C               	ljmp	l2196
  2034  008E                     l2606:	
  2035                           ;main.c: 518: }
  2036                           
  2037                           
  2038                           ;main.c: 519: else
  2039                           ;main.c: 520: {
  2040                           ;main.c: 521: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  2041  008E  3006               	movlw	6
  2042  008F  022B               	subwf	_batADValue+1,w
  2043  0090  300F               	movlw	15
  2044  0091  1903               	skipnz
  2045  0092  022A               	subwf	_batADValue,w
  2046  0093  1803               	skipnc
  2047  0094  28A4               	goto	l2610
  2048  0095  083E               	movf	_chrgMaxAD,w
  2049  0096  3E02               	addlw	2
  2050  0097  00F3               	movwf	??_chrgCtr
  2051  0098  3000               	movlw	0
  2052  0099  1803               	skipnc
  2053  009A  3001               	movlw	1
  2054  009B  00F4               	movwf	??_chrgCtr+1
  2055  009C  082D               	movf	_outADValue+1,w
  2056  009D  0274               	subwf	??_chrgCtr+1,w
  2057  009E  1D03               	skipz
  2058  009F  28A2               	goto	u2405
  2059  00A0  082C               	movf	_outADValue,w
  2060  00A1  0273               	subwf	??_chrgCtr,w
  2061  00A2                     u2405:	
  2062  00A2  1803               	skipnc
  2063  00A3  28B3               	goto	l2622
  2064  00A4                     l2610:	
  2065                           
  2066                           ;main.c: 522: {
  2067                           ;main.c: 523: if(++subTime > chrgWaitTime)
  2068  00A4  0ABB               	incf	_subTime,f
  2069  00A5  083B               	movf	_subTime,w
  2070  00A6  023A               	subwf	_chrgWaitTime,w
  2071  00A7  1803               	skipnc
  2072  00A8  28B1               	goto	l2620
  2073                           
  2074                           ;main.c: 524: {
  2075                           ;main.c: 525: if(chrgMaxDuty > 1)
  2076  00A9  3002               	movlw	2
  2077  00AA  0239               	subwf	_chrgMaxDuty,w
  2078  00AB  1C03               	skipc
  2079  00AC  28AE               	goto	l2616
  2080                           
  2081                           ;main.c: 526: {
  2082                           ;main.c: 527: chrgMaxDuty--;
  2083  00AD  03B9               	decf	_chrgMaxDuty,f
  2084  00AE                     l2616:	
  2085  00AE  30FA               	movlw	250
  2086                           
  2087                           ;main.c: 528: }
  2088                           ;main.c: 529: subTime = 0;
  2089  00AF  01BB               	clrf	_subTime
  2090                           
  2091                           ;main.c: 530: chrgWaitTime = 250;
  2092  00B0  00BA               	movwf	_chrgWaitTime
  2093  00B1                     l2620:	
  2094                           
  2095                           ;main.c: 531: }
  2096                           ;main.c: 532: addTime = 0;
  2097  00B1  01BC               	clrf	_addTime
  2098                           
  2099                           ;main.c: 533: }
  2100  00B2  28D3               	goto	l2636
  2101  00B3                     l2622:	
  2102                           
  2103                           ;main.c: 534: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  2104  00B3  3006               	movlw	6
  2105  00B4  022B               	subwf	_batADValue+1,w
  2106  00B5  300E               	movlw	14
  2107  00B6  1903               	skipnz
  2108  00B7  022A               	subwf	_batADValue,w
  2109  00B8  1803               	skipnc
  2110  00B9  28D3               	goto	l2636
  2111  00BA  083E               	movf	_chrgMaxAD,w
  2112  00BB  3EFC               	addlw	252
  2113  00BC  00F3               	movwf	??_chrgCtr
  2114  00BD  30FF               	movlw	255
  2115  00BE  1803               	skipnc
  2116  00BF  3000               	movlw	0
  2117  00C0  00F4               	movwf	??_chrgCtr+1
  2118  00C1  022D               	subwf	_outADValue+1,w
  2119  00C2  1D03               	skipz
  2120  00C3  28C6               	goto	u2445
  2121  00C4  0873               	movf	??_chrgCtr,w
  2122  00C5  022C               	subwf	_outADValue,w
  2123  00C6                     u2445:	
  2124  00C6  1803               	skipnc
  2125  00C7  28D3               	goto	l2636
  2126                           
  2127                           ;main.c: 535: {
  2128                           ;main.c: 536: if(++addTime > chrgWaitTime)
  2129  00C8  0ABC               	incf	_addTime,f
  2130  00C9  083C               	movf	_addTime,w
  2131  00CA  023A               	subwf	_chrgWaitTime,w
  2132  00CB  1803               	skipnc
  2133  00CC  28D2               	goto	l2634
  2134  00CD  304B               	movlw	75
  2135                           
  2136                           ;main.c: 537: {
  2137                           ;main.c: 538: addTime = 0;
  2138  00CE  01BC               	clrf	_addTime
  2139                           
  2140                           ;main.c: 539: if(chrgMaxDuty < 75)
  2141  00CF  0239               	subwf	_chrgMaxDuty,w
  2142  00D0  1C03               	btfss	3,0
  2143                           
  2144                           ;main.c: 540: {
  2145                           ;main.c: 541: chrgMaxDuty++;
  2146  00D1  0AB9               	incf	_chrgMaxDuty,f
  2147  00D2                     l2634:	
  2148                           
  2149                           ;main.c: 542: }
  2150                           ;main.c: 543: }
  2151                           ;main.c: 544: subTime = 0;
  2152  00D2  01BB               	clrf	_subTime
  2153  00D3                     l2636:	
  2154                           
  2155                           ;main.c: 545: }
  2156                           ;main.c: 548: if(chrgPwmFlag == 0)
  2157  00D3  0834               	movf	_chrgPwmFlag,w
  2158  00D4  1D03               	btfss	3,2
  2159  00D5  28D7               	goto	l2640
  2160                           
  2161                           ;main.c: 549: {
  2162                           ;main.c: 550: chrgPwmInit();
  2163  00D6  25D2               	fcall	_chrgPwmInit
  2164  00D7                     l2640:	
  2165                           
  2166                           ;main.c: 551: }
  2167                           ;main.c: 552: PWMD23H = 0X00;
  2168  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2169  00D8  019E               	clrf	30	;volatile
  2170                           
  2171                           ;main.c: 553: PWMD2L = chrgMaxDuty;
  2172  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2173  00DA  0839               	movf	_chrgMaxDuty,w
  2174  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  2175  00DC  009B               	movwf	27	;volatile
  2176  00DD  0008               	return
  2177  00DE                     l2644:	
  2178  00DE  3014               	movlw	20
  2179                           
  2180                           ;main.c: 559: chrgFlag = 0;
  2181  00DF  01FA               	clrf	_chrgFlag
  2182                           
  2183                           ;main.c: 560: chrgFullFlag = 0;
  2184  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  2185  00E1  01CE               	clrf	_chrgFullFlag
  2186                           
  2187                           ;main.c: 561: protectFlag = 0;
  2188  00E2  01CB               	clrf	_protectFlag
  2189                           
  2190                           ;main.c: 562: chrgMode = 0;
  2191  00E3  01BF               	clrf	_chrgMode
  2192                           
  2193                           ;main.c: 563: chrgMaxAD = 0;
  2194  00E4  01BE               	clrf	_chrgMaxAD
  2195                           
  2196                           ;main.c: 564: chrgMaxDuty = 0;
  2197  00E5  01B9               	clrf	_chrgMaxDuty
  2198                           
  2199                           ;main.c: 566: lockLedStep = 0;
  2200  00E6  01BD               	clrf	_lockCount
  2201                           
  2202                           ;main.c: 567: chrgWaitTime = 20;
  2203  00E7  00BA               	movwf	_chrgWaitTime
  2204                           
  2205                           ;main.c: 568: chrgPwmStop();
  2206  00E8  261C               	fcall	_chrgPwmStop
  2207                           
  2208                           ;main.c: 569: if(prePwStep > 0 && prePwStep > pwStep)
  2209  00E9  0842               	movf	_prePwStep,w
  2210  00EA  1903               	btfsc	3,2
  2211  00EB  28F9               	goto	l2660
  2212  00EC  0842               	movf	_prePwStep,w
  2213  00ED  0243               	subwf	_pwStep,w
  2214  00EE  1803               	skipnc
  2215  00EF  28F9               	goto	l2660
  2216                           
  2217                           ;main.c: 570: {
  2218                           ;main.c: 571: if(++count50s > 3000)
  2219  00F0  20FC               	fcall	PL8	;call to abstracted procedure
  2220  00F1  1903               	skipnz
  2221  00F2  0228               	subwf	_count50s,w
  2222  00F3  1C03               	skipc
  2223  00F4  0008               	return
  2224                           
  2225                           ;main.c: 572: {
  2226                           ;main.c: 573: count50s = 0;
  2227  00F5  01A8               	clrf	_count50s
  2228  00F6  01A9               	clrf	_count50s+1
  2229                           
  2230                           ;main.c: 574: prePwStep--;
  2231  00F7  03C2               	decf	_prePwStep,f
  2232  00F8  0008               	return
  2233  00F9                     l2660:	
  2234                           
  2235                           ;main.c: 577: else
  2236                           ;main.c: 578: {
  2237                           ;main.c: 579: count50s = 0;
  2238  00F9  01A8               	clrf	_count50s
  2239  00FA  01A9               	clrf	_count50s+1
  2240  00FB  0008               	return
  2241  00FC                     __end_of_chrgCtr:	
  2242  00FC                     PL8:	
  2243  00FC  0AA8               	incf	_count50s,f
  2244  00FD  1903               	skipnz
  2245  00FE  0AA9               	incf	_count50s+1,f
  2246  00FF  300B               	movlw	11
  2247  0100  0229               	subwf	_count50s+1,w
  2248  0101  34B9               	retlw	185
  2249  0102                     __end_ofPL8:	
  2250                           
  2251                           	psect	text10
  2252  060C                     __ptext10:	
  2253 ;; *************** function _pwmStop *****************
  2254 ;; Defined at:
  2255 ;;		line 983 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 100/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1
  2269 ;;      Params:         0       0       0
  2270 ;;      Locals:         0       0       0
  2271 ;;      Temps:          0       0       0
  2272 ;;      Totals:         0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    2
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_chrgCtr
  2280 ;;		_workCtr
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _pwmStop
  2286  060C                     _pwmStop:	
  2287                           
  2288                           ;main.c: 985: if(motorPwmFlag)
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2292  060C  1283               	bcf	3,5	;RP0=0, select bank0
  2293  060D  0833               	movf	_motorPwmFlag,w
  2294  060E  1903               	btfsc	3,2
  2295  060F  0008               	return
  2296                           
  2297                           ;main.c: 986: {
  2298                           ;main.c: 987: motorPwmFlag = 0;
  2299  0610  01B3               	clrf	_motorPwmFlag
  2300                           
  2301                           ;main.c: 988: PWMCON0 &= 0XF7;
  2302  0611  1195               	bcf	21,3	;volatile
  2303                           
  2304                           ;main.c: 989: RB4 = 0;
  2305  0612  1206               	bcf	6,4	;volatile
  2306  0613  0008               	return
  2307  0614                     __end_of_pwmStop:	
  2308                           
  2309                           	psect	text11
  2310  061C                     __ptext11:	
  2311 ;; *************** function _chrgPwmStop *****************
  2312 ;; Defined at:
  2313 ;;		line 955 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;		None
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;		None
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, status,2, status,0
  2322 ;; Tracked objects:
  2323 ;;		On entry : 100/0
  2324 ;;		On exit  : 100/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMMON   BANK0   BANK1
  2327 ;;      Params:         0       0       0
  2328 ;;      Locals:         0       0       0
  2329 ;;      Temps:          0       0       0
  2330 ;;      Totals:         0       0       0
  2331 ;;Total ram usage:        0 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    2
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_chrgCtr
  2338 ;; This function uses a non-reentrant model
  2339 ;;
  2340                           
  2341                           
  2342                           ;psect for function _chrgPwmStop
  2343  061C                     _chrgPwmStop:	
  2344  061C                     l2196:	
  2345                           ;incstack = 0
  2346                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2347                           
  2348                           
  2349                           ;main.c: 957: if(chrgPwmFlag)
  2350  061C  0834               	movf	_chrgPwmFlag,w
  2351  061D  1903               	btfsc	3,2
  2352  061E  0008               	return
  2353                           
  2354                           ;main.c: 958: {
  2355                           ;main.c: 959: chrgPwmFlag = 0;
  2356  061F  01B4               	clrf	_chrgPwmFlag
  2357                           
  2358                           ;main.c: 960: PWMCON0 &= 0xFB;
  2359  0620  1115               	bcf	21,2	;volatile
  2360                           
  2361                           ;main.c: 961: RB3 = 0;
  2362  0621  1186               	bcf	6,3	;volatile
  2363  0622  0008               	return
  2364  0623                     __end_of_chrgPwmStop:	
  2365                           
  2366                           	psect	text12
  2367  05D2                     __ptext12:	
  2368 ;; *************** function _chrgPwmInit *****************
  2369 ;; Defined at:
  2370 ;;		line 936 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2
  2379 ;; Tracked objects:
  2380 ;;		On entry : 100/0
  2381 ;;		On exit  : 100/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1
  2384 ;;      Params:         0       0       0
  2385 ;;      Locals:         0       0       0
  2386 ;;      Temps:          0       0       0
  2387 ;;      Totals:         0       0       0
  2388 ;;Total ram usage:        0 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    2
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_chrgCtr
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           
  2399                           ;psect for function _chrgPwmInit
  2400  05D2                     _chrgPwmInit:	
  2401                           
  2402                           ;main.c: 938: chrgPwmFlag = 1;
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2406  05D2  01B4               	clrf	_chrgPwmFlag
  2407  05D3  0AB4               	incf	_chrgPwmFlag,f
  2408                           
  2409                           ;main.c: 939: PWMCON1 = 0B00000000;
  2410  05D4  0196               	clrf	22	;volatile
  2411                           
  2412                           ;main.c: 941: PWMTH = 0X00;
  2413  05D5  0198               	clrf	24	;volatile
  2414                           
  2415                           ;main.c: 942: PWMTL = 100;
  2416  05D6  3064               	movlw	100
  2417  05D7  0097               	movwf	23	;volatile
  2418                           
  2419                           ;main.c: 946: PWMD23H = 0;
  2420  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  2421  05D9  019E               	clrf	30	;volatile
  2422                           
  2423                           ;main.c: 947: PWMD2L = 10;
  2424  05DA  300A               	movlw	10
  2425  05DB  009B               	movwf	27	;volatile
  2426                           
  2427                           ;main.c: 948: PWM23DT = 0X00;
  2428  05DC  019D               	clrf	29	;volatile
  2429                           
  2430                           ;main.c: 950: PWMCON0 = 0X04;
  2431  05DD  3004               	movlw	4
  2432                           
  2433                           ;main.c: 951: PWMCON2 =0X00;
  2434  05DE  2DDF               	ljmp	PL10	;call to abstracted procedure
  2435  05DF                     __end_of_chrgPwmInit:	
  2436  05DF                     PL10:	
  2437  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2438  05E0  0095               	movwf	21	;volatile
  2439  05E1  019D               	clrf	29	;volatile
  2440  05E2  0008               	return
  2441  05E3                     __end_ofPL10:	
  2442                           
  2443                           	psect	text13
  2444  049C                     __ptext13:	
  2445 ;; *************** function _checkOutA *****************
  2446 ;; Defined at:
  2447 ;;		line 716 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;		None
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;		None
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      void 
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0, pclath, cstack
  2456 ;; Tracked objects:
  2457 ;;		On entry : 100/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMMON   BANK0   BANK1
  2461 ;;      Params:         0       0       0
  2462 ;;      Locals:         0       0       0
  2463 ;;      Temps:          1       0       0
  2464 ;;      Totals:         1       0       0
  2465 ;;Total ram usage:        1 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    3
  2468 ;; This function calls:
  2469 ;;		_ADC_Sample
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function _checkOutA
  2477  049C                     _checkOutA:	
  2478                           
  2479                           ;main.c: 718: test_adc = ADC_Sample(0, 5);
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2483  049C  3005               	movlw	5
  2484  049D  00F3               	movwf	ADC_Sample@adldo
  2485  049E  3000               	movlw	0
  2486  049F  2102               	fcall	_ADC_Sample
  2487  04A0  00D2               	movwf	_test_adc	;volatile
  2488                           
  2489                           ;main.c: 719: if (0xA5 == test_adc)
  2490  04A1  30A5               	movlw	165
  2491  04A2  0652               	xorwf	_test_adc,w	;volatile
  2492  04A3  1D03               	btfss	3,2
  2493  04A4  2CD1               	goto	l3160
  2494                           
  2495                           ;main.c: 720: {
  2496                           ;main.c: 721: if(chrgFlag && adresult > 210)
  2497  04A5  087A               	movf	_chrgFlag,w
  2498  04A6  1903               	btfsc	3,2
  2499  04A7  2CB8               	goto	l3146
  2500  04A8  3000               	movlw	0
  2501  04A9  0278               	subwf	_adresult+1,w	;volatile
  2502  04AA  30D3               	movlw	211
  2503  04AB  1903               	skipnz
  2504  04AC  0277               	subwf	_adresult,w	;volatile
  2505  04AD  1C03               	skipc
  2506  04AE  2CB8               	goto	l3146
  2507                           
  2508                           ;main.c: 722: {
  2509                           ;main.c: 723: if(++overChrgTime > 10)
  2510  04AF  300B               	movlw	11
  2511  04B0  0AC4               	incf	_overChrgTime,f
  2512  04B1  0244               	subwf	_overChrgTime,w
  2513  04B2  1C03               	skipc
  2514  04B3  2CB9               	goto	l3148
  2515  04B4  3002               	movlw	2
  2516                           
  2517                           ;main.c: 724: {
  2518                           ;main.c: 725: overChrgTime = 0;
  2519  04B5  01C4               	clrf	_overChrgTime
  2520                           
  2521                           ;main.c: 726: protectFlag = 2;
  2522  04B6  00CB               	movwf	_protectFlag
  2523  04B7  2CB9               	goto	l3148
  2524  04B8                     l3146:	
  2525                           
  2526                           ;main.c: 730: else
  2527                           ;main.c: 731: {
  2528                           ;main.c: 732: overChrgTime = 0;
  2529  04B8  01C4               	clrf	_overChrgTime
  2530  04B9                     l3148:	
  2531                           
  2532                           ;main.c: 733: }
  2533                           ;main.c: 734: outADValue = adresult;
  2534  04B9  0878               	movf	_adresult+1,w	;volatile
  2535  04BA  00AD               	movwf	_outADValue+1
  2536  04BB  0877               	movf	_adresult,w	;volatile
  2537  04BC  00AC               	movwf	_outADValue
  2538                           
  2539                           ;main.c: 736: if(workStep && (outADValue > 600))
  2540  04BD  0879               	movf	_workStep,w
  2541  04BE  1903               	btfsc	3,2
  2542  04BF  2CCF               	goto	l3158
  2543  04C0  3002               	movlw	2
  2544  04C1  022D               	subwf	_outADValue+1,w
  2545  04C2  3059               	movlw	89
  2546  04C3  1903               	skipnz
  2547  04C4  022C               	subwf	_outADValue,w
  2548  04C5  1C03               	skipc
  2549  04C6  2CCF               	goto	l3158
  2550                           
  2551                           ;main.c: 737: {
  2552                           ;main.c: 738: if(++workOverOutTime > 50)
  2553  04C7  3033               	movlw	51
  2554  04C8  0ACA               	incf	_workOverOutTime,f
  2555  04C9  024A               	subwf	_workOverOutTime,w
  2556  04CA  1C03               	skipc
  2557  04CB  0008               	return
  2558                           
  2559                           ;main.c: 739: {
  2560                           ;main.c: 740: workOverOutTime = 0;
  2561  04CC  01CA               	clrf	_workOverOutTime
  2562                           
  2563                           ;main.c: 741: workStep = 0;
  2564  04CD  01F9               	clrf	_workStep
  2565  04CE  0008               	return
  2566  04CF                     l3158:	
  2567                           
  2568                           ;main.c: 744: else
  2569                           ;main.c: 745: {
  2570                           ;main.c: 746: workOverOutTime = 0;
  2571  04CF  01CA               	clrf	_workOverOutTime
  2572  04D0  0008               	return
  2573  04D1                     l3160:	
  2574                           
  2575                           ;main.c: 751: else
  2576                           ;main.c: 752: {
  2577                           ;main.c: 753: ADCON0 = 0;
  2578  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2579  04D2  0195               	clrf	21	;volatile
  2580                           
  2581                           ;main.c: 754: ADCON1 = 0;
  2582  04D3  0196               	clrf	22	;volatile
  2583                           
  2584                           ;main.c: 755: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2585  04D4  3085               	movlw	133
  2586  04D5  00F4               	movwf	??_checkOutA
  2587  04D6                     u3837:	
  2588  04D6  0BF4               	decfsz	??_checkOutA,f
  2589  04D7  2CD6               	goto	u3837
  2590  04D8  0008               	return
  2591  04D9                     __end_of_checkOutA:	
  2592                           
  2593                           	psect	text14
  2594  0292                     __ptext14:	
  2595 ;; *************** function _checkBatAD *****************
  2596 ;; Defined at:
  2597 ;;		line 759 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         0       0       0
  2613 ;;      Temps:          2       0       0
  2614 ;;      Totals:         2       0       0
  2615 ;;Total ram usage:        2 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    3
  2618 ;; This function calls:
  2619 ;;		_ADC_Sample
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function _checkBatAD
  2627  0292                     _checkBatAD:	
  2628                           
  2629                           ;main.c: 761: test_adc = ADC_Sample(2, 5);
  2630                           
  2631                           ;incstack = 0
  2632                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2633  0292  3005               	movlw	5
  2634  0293  00F3               	movwf	ADC_Sample@adldo
  2635  0294  3002               	movlw	2
  2636  0295  2102               	fcall	_ADC_Sample
  2637  0296  00D2               	movwf	_test_adc	;volatile
  2638                           
  2639                           ;main.c: 762: if (0xA5 == test_adc)
  2640  0297  30A5               	movlw	165
  2641  0298  0652               	xorwf	_test_adc,w	;volatile
  2642  0299  1D03               	btfss	3,2
  2643  029A  2AF2               	goto	l3196
  2644                           
  2645                           ;main.c: 763: {
  2646                           ;main.c: 764: batADValue = adresult;
  2647  029B  0878               	movf	_adresult+1,w	;volatile
  2648  029C  00AB               	movwf	_batADValue+1
  2649  029D  0877               	movf	_adresult,w	;volatile
  2650  029E  00AA               	movwf	_batADValue
  2651                           
  2652                           ;main.c: 765: if(batADValue < 1117)
  2653  029F  3004               	movlw	4
  2654  02A0  022B               	subwf	_batADValue+1,w
  2655  02A1  305D               	movlw	93
  2656  02A2  1903               	skipnz
  2657  02A3  022A               	subwf	_batADValue,w
  2658  02A4  1803               	skipnc
  2659  02A5  2AB8               	goto	l3178
  2660                           
  2661                           ;main.c: 766: {
  2662                           ;main.c: 767: pwStep = 0;
  2663  02A6  01C3               	clrf	_pwStep
  2664                           
  2665                           ;main.c: 768: if(++count8s > 800)
  2666  02A7  0AA4               	incf	_count8s,f
  2667  02A8  1903               	skipnz
  2668  02A9  0AA5               	incf	_count8s+1,f
  2669  02AA  3003               	movlw	3
  2670  02AB  0225               	subwf	_count8s+1,w
  2671  02AC  3021               	movlw	33
  2672  02AD  1903               	skipnz
  2673  02AE  0224               	subwf	_count8s,w
  2674  02AF  1C03               	skipc
  2675  02B0  2AE5               	goto	l3190
  2676                           
  2677                           ;main.c: 769: {
  2678                           ;main.c: 770: count8s = 0;
  2679  02B1  01A4               	clrf	_count8s
  2680  02B2  01A5               	clrf	_count8s+1
  2681                           
  2682                           ;main.c: 771: lowBatFlag = 1;
  2683  02B3  01B6               	clrf	_lowBatFlag
  2684  02B4  0AB6               	incf	_lowBatFlag,f
  2685                           
  2686                           ;main.c: 772: prePwStep = 0;
  2687  02B5  01C2               	clrf	_prePwStep
  2688                           
  2689                           ;main.c: 773: workStep = 0;
  2690  02B6  01F9               	clrf	_workStep
  2691  02B7  2AE5               	goto	l3190
  2692  02B8                     l3178:	
  2693  02B8  3005               	movlw	5
  2694                           
  2695                           ;main.c: 776: else
  2696                           ;main.c: 777: {
  2697                           ;main.c: 778: count8s = 0;
  2698  02B9  01A4               	clrf	_count8s
  2699  02BA  01A5               	clrf	_count8s+1
  2700                           
  2701                           ;main.c: 779: if(batADValue >= 1340)
  2702  02BB  022B               	subwf	_batADValue+1,w
  2703  02BC  303C               	movlw	60
  2704  02BD  1903               	skipnz
  2705  02BE  022A               	subwf	_batADValue,w
  2706                           
  2707                           ;main.c: 780: {
  2708                           ;main.c: 781: pwStep = ((batADValue - 1340) /2) + 13;
  2709  02BF  082A               	movf	_batADValue,w
  2710  02C0  1C03               	skipc
  2711  02C1  2ACF               	goto	L9
  2712  02C2  3EC4               	addlw	196
  2713  02C3  00F4               	movwf	??_checkBatAD
  2714  02C4  082B               	movf	_batADValue+1,w
  2715  02C5  1803               	skipnc
  2716  02C6  3E01               	addlw	1
  2717  02C7  3EFA               	addlw	250
  2718  02C8  00F5               	movwf	??_checkBatAD+1
  2719  02C9  1003               	clrc
  2720  02CA  0CF5               	rrf	??_checkBatAD+1,f
  2721  02CB  0CF4               	rrf	??_checkBatAD,f
  2722  02CC  0874               	movf	??_checkBatAD,w
  2723  02CD  3E0D               	addlw	13
  2724  02CE  2ADE               	goto	L8
  2725  02CF                     L9:	
  2726                           ;main.c: 783: else
  2727                           ;main.c: 784: {
  2728                           ;main.c: 785: pwStep = (batADValue - 1117) / 16;
  2729                           
  2730                           ;main.c: 782: }
  2731                           
  2732  02CF  3EA3               	addlw	163
  2733  02D0  00F4               	movwf	??_checkBatAD
  2734  02D1  082B               	movf	_batADValue+1,w
  2735  02D2  1803               	skipnc
  2736  02D3  3E01               	addlw	1
  2737  02D4  3EFB               	addlw	251
  2738  02D5  00F5               	movwf	??_checkBatAD+1
  2739  02D6  3004               	movlw	4
  2740  02D7                     u3485:	
  2741  02D7  1003               	clrc
  2742  02D8  0CF5               	rrf	??_checkBatAD+1,f
  2743  02D9  0CF4               	rrf	??_checkBatAD,f
  2744  02DA  3EFF               	addlw	-1
  2745  02DB  1D03               	skipz
  2746  02DC  2AD7               	goto	u3485
  2747  02DD  0874               	movf	??_checkBatAD,w
  2748  02DE                     L8:	
  2749  02DE  00C3               	movwf	_pwStep
  2750                           
  2751                           ;main.c: 786: }
  2752                           ;main.c: 787: if(pwStep > 99)
  2753  02DF  3064               	movlw	100
  2754  02E0  0243               	subwf	_pwStep,w
  2755  02E1  1C03               	skipc
  2756  02E2  2AE5               	goto	l3190
  2757                           
  2758                           ;main.c: 788: {
  2759                           ;main.c: 789: pwStep = 99;
  2760  02E3  3063               	movlw	99
  2761  02E4  00C3               	movwf	_pwStep
  2762  02E5                     l3190:	
  2763                           
  2764                           ;main.c: 790: }
  2765                           ;main.c: 791: }
  2766                           ;main.c: 792: if(chrgFlag && batADValue > 1861)
  2767  02E5  087A               	movf	_chrgFlag,w
  2768  02E6  1903               	btfsc	3,2
  2769  02E7  2AF9               	goto	l3200
  2770  02E8  3007               	movlw	7
  2771  02E9  022B               	subwf	_batADValue+1,w
  2772  02EA  3046               	movlw	70
  2773  02EB  1903               	skipnz
  2774  02EC  022A               	subwf	_batADValue,w
  2775  02ED  1C03               	skipc
  2776  02EE  2AF9               	goto	l3200
  2777                           
  2778                           ;main.c: 793: {
  2779                           ;main.c: 794: protectFlag = 1;
  2780  02EF  01CB               	clrf	_protectFlag
  2781  02F0  0ACB               	incf	_protectFlag,f
  2782  02F1  2AF9               	goto	l3200
  2783  02F2                     l3196:	
  2784                           
  2785                           ;main.c: 797: else
  2786                           ;main.c: 798: {
  2787                           ;main.c: 799: ADCON0 = 0;
  2788  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  2789  02F3  0195               	clrf	21	;volatile
  2790                           
  2791                           ;main.c: 800: ADCON1 = 0;
  2792  02F4  0196               	clrf	22	;volatile
  2793                           
  2794                           ;main.c: 801: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2795  02F5  3085               	movlw	133
  2796  02F6  00F4               	movwf	??_checkBatAD
  2797  02F7                     u3847:	
  2798  02F7  0BF4               	decfsz	??_checkBatAD,f
  2799  02F8  2AF7               	goto	u3847
  2800  02F9                     l3200:	
  2801                           
  2802                           ;main.c: 802: }
  2803                           ;main.c: 804: test_adc = ADC_Sample(1, 5);
  2804  02F9  3005               	movlw	5
  2805  02FA  00F3               	movwf	ADC_Sample@adldo
  2806  02FB  3001               	movlw	1
  2807  02FC  2102               	fcall	_ADC_Sample
  2808  02FD  00D2               	movwf	_test_adc	;volatile
  2809                           
  2810                           ;main.c: 805: if (0xA5 == test_adc)
  2811  02FE  30A5               	movlw	165
  2812  02FF  0652               	xorwf	_test_adc,w	;volatile
  2813  0300  1D03               	btfss	3,2
  2814  0301  2B2D               	goto	l3220
  2815                           
  2816                           ;main.c: 806: {
  2817                           ;main.c: 807: if(chrgFlag && adresult > 100)
  2818  0302  087A               	movf	_chrgFlag,w
  2819  0303  1903               	btfsc	3,2
  2820  0304  0008               	return
  2821  0305  3000               	movlw	0
  2822  0306  0278               	subwf	_adresult+1,w	;volatile
  2823  0307  3065               	movlw	101
  2824  0308  1903               	skipnz
  2825  0309  0277               	subwf	_adresult,w	;volatile
  2826  030A  1C03               	skipc
  2827  030B  0008               	return
  2828                           
  2829                           ;main.c: 808: {
  2830                           ;main.c: 810: if(adresult > 810 || (batADValue - adresult) > 810)
  2831  030C  3003               	movlw	3
  2832  030D  0278               	subwf	_adresult+1,w	;volatile
  2833  030E  302B               	movlw	43
  2834  030F  1903               	skipnz
  2835  0310  0277               	subwf	_adresult,w	;volatile
  2836  0311  1803               	skipnc
  2837  0312  2B22               	goto	l3212
  2838  0313  0877               	movf	_adresult,w	;volatile
  2839  0314  022A               	subwf	_batADValue,w
  2840  0315  00F4               	movwf	??_checkBatAD
  2841  0316  0878               	movf	_adresult+1,w	;volatile
  2842  0317  1C03               	skipc
  2843  0318  0A78               	incf	_adresult+1,w	;volatile
  2844  0319  022B               	subwf	_batADValue+1,w
  2845  031A  00F5               	movwf	??_checkBatAD+1
  2846  031B  3003               	movlw	3
  2847  031C  0275               	subwf	??_checkBatAD+1,w
  2848  031D  302B               	movlw	43
  2849  031E  1903               	skipnz
  2850  031F  0274               	subwf	??_checkBatAD,w
  2851  0320  1C03               	skipc
  2852  0321  2B2B               	goto	l3218
  2853  0322                     l3212:	
  2854                           
  2855                           ;main.c: 811: {
  2856                           ;main.c: 813: if(++countHalfFull > 250)
  2857  0322  30FB               	movlw	251
  2858  0323  0ACC               	incf	_countHalfFull,f
  2859  0324  024C               	subwf	_countHalfFull,w
  2860  0325  1C03               	skipc
  2861  0326  0008               	return
  2862  0327  3002               	movlw	2
  2863                           
  2864                           ;main.c: 814: {
  2865                           ;main.c: 815: countHalfFull = 0;
  2866  0328  01CC               	clrf	_countHalfFull
  2867                           
  2868                           ;main.c: 816: protectFlag = 2;
  2869  0329  00CB               	movwf	_protectFlag
  2870  032A  0008               	return
  2871  032B                     l3218:	
  2872                           
  2873                           ;main.c: 819: else
  2874                           ;main.c: 820: {
  2875                           ;main.c: 821: countHalfFull = 0;
  2876  032B  01CC               	clrf	_countHalfFull
  2877                           
  2878                           ;main.c: 822: }
  2879                           ;main.c: 823: }
  2880                           ;main.c: 824: }
  2881  032C  0008               	return
  2882  032D                     l3220:	
  2883                           
  2884                           ;main.c: 825: else
  2885                           ;main.c: 826: {
  2886                           ;main.c: 827: ADCON0 = 0;
  2887  032D  1683               	bsf	3,5	;RP0=1, select bank1
  2888  032E  0195               	clrf	21	;volatile
  2889                           
  2890                           ;main.c: 828: ADCON1 = 0;
  2891  032F  0196               	clrf	22	;volatile
  2892                           
  2893                           ;main.c: 829: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2894  0330  3085               	movlw	133
  2895  0331  00F4               	movwf	??_checkBatAD
  2896  0332                     u3857:	
  2897  0332  0BF4               	decfsz	??_checkBatAD,f
  2898  0333  2B32               	goto	u3857
  2899  0334  0008               	return
  2900  0335                     __end_of_checkBatAD:	
  2901                           
  2902                           	psect	text15
  2903  0102                     __ptext15:	
  2904 ;; *************** function _ADC_Sample *****************
  2905 ;; Defined at:
  2906 ;;		line 1078 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  adch            1    wreg     unsigned char 
  2909 ;;  adldo           1    3[COMMON] unsigned char 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  adch            1    5[BANK0 ] unsigned char 
  2912 ;;  j               1    4[BANK0 ] unsigned char 
  2913 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2914 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2915 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2916 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2917 ;;  i               1    6[BANK0 ] unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      unsigned char 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, status,0
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 100/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMMON   BANK0   BANK1
  2927 ;;      Params:         1       0       0
  2928 ;;      Locals:         0      13       0
  2929 ;;      Temps:          0       4       0
  2930 ;;      Totals:         1      17       0
  2931 ;;Total ram usage:       18 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    2
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_checkOutA
  2938 ;;		_checkBatAD
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function _ADC_Sample
  2944  0102                     _ADC_Sample:	
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2948                           ;ADC_Sample@adch stored from wreg
  2949  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0103  00D8               	movwf	ADC_Sample@adch
  2951                           
  2952                           ;main.c: 1080: volatile unsigned long adsum = 0;
  2953                           
  2954                           ;main.c: 1081: volatile unsigned int admin = 0, admax = 0;
  2955  0104  21DD               	fcall	PL4	;call to abstracted procedure
  2956                           
  2957                           ;main.c: 1082: volatile unsigned int ad_temp = 0;
  2958  0105  01E2               	clrf	ADC_Sample@ad_temp	;volatile
  2959  0106  01E3               	clrf	ADC_Sample@ad_temp+1	;volatile
  2960                           
  2961                           ;main.c: 1084: if ((!LDO_EN) && (adldo & 0x04) )
  2962  0107  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0108  1D16               	btfss	22,2	;volatile
  2964  0109  1D73               	btfss	ADC_Sample@adldo,2
  2965  010A  2914               	goto	l3026
  2966                           
  2967                           ;main.c: 1085: {
  2968                           ;main.c: 1087: ADCON1 = adldo;
  2969  010B  0873               	movf	ADC_Sample@adldo,w
  2970  010C  0096               	movwf	22	;volatile
  2971                           
  2972                           ;main.c: 1088: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2973  010D  3084               	movlw	132
  2974  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2975  010F  00D3               	movwf	??_ADC_Sample
  2976  0110                     u3867:	
  2977  0110  0BD3               	decfsz	??_ADC_Sample,f
  2978  0111  2910               	goto	u3867
  2979  0112  2913               	nop2
  2980                           
  2981                           ;main.c: 1089: }
  2982  0113  2916               	goto	l3028
  2983  0114                     l3026:	
  2984                           
  2985                           ;main.c: 1090: else
  2986                           ;main.c: 1091: ADCON1 = adldo;
  2987  0114  0873               	movf	ADC_Sample@adldo,w
  2988  0115  0096               	movwf	22	;volatile
  2989  0116                     l3028:	
  2990                           
  2991                           ;main.c: 1093: if(adch & 0x10)
  2992  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0117  1E58               	btfss	ADC_Sample@adch,4
  2994  0118  291E               	goto	l3036
  2995                           
  2996                           ;main.c: 1094: {
  2997                           ;main.c: 1095: CHS4 = 1;
  2998  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2999  011A  1716               	bsf	22,6	;volatile
  3000                           
  3001                           ;main.c: 1096: adch &= 0x0f;
  3002  011B  300F               	movlw	15
  3003  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3004  011D  05D8               	andwf	ADC_Sample@adch,f
  3005  011E                     l3036:	
  3006                           
  3007                           ;main.c: 1099: for (i = 0; i < 10; i++)
  3008  011E  01D9               	clrf	ADC_Sample@i
  3009  011F                     l3042:	
  3010                           
  3011                           ;main.c: 1100: {
  3012                           ;main.c: 1101: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3013  011F  0858               	movf	ADC_Sample@adch,w
  3014  0120  00D3               	movwf	??_ADC_Sample
  3015  0121  3001               	movlw	1
  3016  0122  1003               	clrc
  3017  0123                     L10:	
  3018  0123  0DD3               	rlf	??_ADC_Sample,f
  3019  0124  3EFF               	addlw	-1
  3020  0125  1003               	clrc
  3021  0126  1D03               	skipz
  3022  0127  2923               	goto	L10
  3023  0128  0D53               	rlf	??_ADC_Sample,w
  3024  0129  3841               	iorlw	65
  3025  012A  1683               	bsf	3,5	;RP0=1, select bank1
  3026  012B  0095               	movwf	21	;volatile
  3027  012C  0000               	nop	;# 
  3028  012D  0000               	nop	;# 
  3029  012E  0000               	nop	;# 
  3030  012F  0000               	nop	;# 
  3031                           
  3032                           ;main.c: 1106: GODONE = 1;
  3033  0130  1683               	bsf	3,5	;RP0=1, select bank1
  3034  0131  1495               	bsf	21,1	;volatile
  3035                           
  3036                           ;main.c: 1108: unsigned char j = 0;
  3037  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0133  01D7               	clrf	ADC_Sample@j
  3039  0134                     l919:	
  3040                           ;main.c: 1109: while (GODONE)
  3041                           
  3042  0134  1683               	bsf	3,5	;RP0=1, select bank1
  3043  0135  1C95               	btfss	21,1	;volatile
  3044  0136  293F               	goto	l3052
  3045                           
  3046                           ;main.c: 1110: {
  3047                           ;main.c: 1111: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3048  0137  2938               	nop2	;2 cycle nop
  3049  0138  2939               	nop2	;2 cycle nop
  3050  0139  293A               	nop2	;2 cycle nop
  3051  013A  293B               	nop2	;2 cycle nop
  3052                           
  3053                           ;main.c: 1113: if (0 == (--j))
  3054  013B  1283               	bcf	3,5	;RP0=0, select bank0
  3055  013C  0BD7               	decfsz	ADC_Sample@j,f
  3056  013D  2934               	goto	l919
  3057                           
  3058                           ;main.c: 1114: return 0;
  3059  013E  3400               	retlw	0
  3060  013F                     l3052:	
  3061                           
  3062                           ;main.c: 1115: }
  3063                           ;main.c: 1117: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3064  013F  0819               	movf	25,w	;volatile
  3065  0140  1283               	bcf	3,5	;RP0=0, select bank0
  3066  0141  00E2               	movwf	ADC_Sample@ad_temp	;volatile
  3067  0142  01E3               	clrf	ADC_Sample@ad_temp+1	;volatile
  3068  0143  0EE2               	swapf	ADC_Sample@ad_temp,f	;volatile
  3069  0144  0EE3               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3070  0145  30F0               	movlw	240
  3071  0146  05E3               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3072  0147  0862               	movf	ADC_Sample@ad_temp,w	;volatile
  3073  0148  390F               	andlw	15
  3074  0149  04E3               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3075  014A  30F0               	movlw	240
  3076  014B  05E2               	andwf	ADC_Sample@ad_temp,f	;volatile
  3077  014C  1683               	bsf	3,5	;RP0=1, select bank1
  3078  014D  0E18               	swapf	24,w	;volatile
  3079  014E  390F               	andlw	15
  3080  014F  1283               	bcf	3,5	;RP0=0, select bank0
  3081  0150  07E2               	addwf	ADC_Sample@ad_temp,f	;volatile
  3082  0151  1803               	skipnc
  3083  0152  0AE3               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3084                           
  3085                           ;main.c: 1119: if (0 == admax)
  3086  0153  0860               	movf	ADC_Sample@admax,w	;volatile
  3087  0154  0461               	iorwf	ADC_Sample@admax+1,w	;volatile
  3088  0155  1D03               	btfss	3,2
  3089  0156  2959               	goto	l3060
  3090                           
  3091                           ;main.c: 1120: {
  3092                           ;main.c: 1121: admax = ad_temp;
  3093  0157  21E6               	fcall	PL12	;call to abstracted procedure
  3094  0158  296B               	goto	l3066
  3095  0159                     l3060:	
  3096                           ;main.c: 1123: }
  3097                           
  3098                           ;main.c: 1122: admin = ad_temp;
  3099                           
  3100                           
  3101                           ;main.c: 1124: else if (ad_temp > admax)
  3102  0159  0863               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3103  015A  0261               	subwf	ADC_Sample@admax+1,w	;volatile
  3104  015B  1D03               	skipz
  3105  015C  295F               	goto	u3225
  3106  015D  0862               	movf	ADC_Sample@ad_temp,w	;volatile
  3107  015E  0260               	subwf	ADC_Sample@admax,w	;volatile
  3108  015F                     u3225:	
  3109  015F  1803               	skipnc
  3110  0160  2963               	goto	l3064
  3111                           
  3112                           ;main.c: 1125: admax = ad_temp;
  3113  0161  21E6               	fcall	PL12	;call to abstracted procedure
  3114  0162  296F               	goto	l925
  3115  0163                     l3064:	
  3116                           
  3117                           ;main.c: 1126: else if (ad_temp < admin)
  3118  0163  085F               	movf	ADC_Sample@admin+1,w	;volatile
  3119  0164  0263               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3120  0165  1D03               	skipz
  3121  0166  2969               	goto	u3235
  3122  0167  085E               	movf	ADC_Sample@admin,w	;volatile
  3123  0168  0262               	subwf	ADC_Sample@ad_temp,w	;volatile
  3124  0169                     u3235:	
  3125  0169  1803               	skipnc
  3126  016A  296F               	goto	l925
  3127  016B                     l3066:	
  3128                           
  3129                           ;main.c: 1127: admin = ad_temp;
  3130  016B  0863               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3131  016C  00DF               	movwf	ADC_Sample@admin+1	;volatile
  3132  016D  0862               	movf	ADC_Sample@ad_temp,w	;volatile
  3133  016E  00DE               	movwf	ADC_Sample@admin	;volatile
  3134  016F                     l925:	
  3135                           
  3136                           ;main.c: 1129: adsum += ad_temp;
  3137  016F  0862               	movf	ADC_Sample@ad_temp,w	;volatile
  3138  0170  00D3               	movwf	??_ADC_Sample
  3139  0171  0863               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3140  0172  00D4               	movwf	??_ADC_Sample+1
  3141  0173  01D5               	clrf	??_ADC_Sample+2
  3142  0174  01D6               	clrf	??_ADC_Sample+3
  3143  0175  0853               	movf	??_ADC_Sample,w
  3144  0176  07DA               	addwf	ADC_Sample@adsum,f	;volatile
  3145  0177  0854               	movf	??_ADC_Sample+1,w
  3146  0178  1103               	clrz
  3147  0179  1803               	skipnc
  3148  017A  3E01               	addlw	1
  3149  017B  1D03               	btfss	3,2
  3150  017C  07DB               	addwf	ADC_Sample@adsum+1,f	;volatile
  3151  017D  0855               	movf	??_ADC_Sample+2,w
  3152  017E  1103               	clrz
  3153  017F  1803               	skipnc
  3154  0180  3E01               	addlw	1
  3155  0181  1D03               	btfss	3,2
  3156  0182  07DC               	addwf	ADC_Sample@adsum+2,f	;volatile
  3157  0183  0856               	movf	??_ADC_Sample+3,w
  3158  0184  1103               	clrz
  3159  0185  1803               	skipnc
  3160  0186  3E01               	addlw	1
  3161  0187  1D03               	btfss	3,2
  3162  0188  07DD               	addwf	ADC_Sample@adsum+3,f	;volatile
  3163  0189  300A               	movlw	10
  3164  018A  0AD9               	incf	ADC_Sample@i,f
  3165  018B  0259               	subwf	ADC_Sample@i,w
  3166  018C  1C03               	skipc
  3167  018D  291F               	goto	l3042
  3168                           
  3169                           ;main.c: 1130: }
  3170                           ;main.c: 1131: adsum -= admax;
  3171  018E  0860               	movf	ADC_Sample@admax,w	;volatile
  3172  018F  00D3               	movwf	??_ADC_Sample
  3173  0190  0861               	movf	ADC_Sample@admax+1,w	;volatile
  3174  0191  21CE               	fcall	PL2	;call to abstracted procedure
  3175  0192  1C03               	skipc
  3176  0193  0F56               	incfsz	??_ADC_Sample+3,w
  3177  0194  02DD               	subwf	ADC_Sample@adsum+3,f	;volatile
  3178                           
  3179                           ;main.c: 1132: if (adsum >= admin)
  3180  0195  085E               	movf	ADC_Sample@admin,w	;volatile
  3181  0196  00D3               	movwf	??_ADC_Sample
  3182  0197  085F               	movf	ADC_Sample@admin+1,w	;volatile
  3183  0198  00D4               	movwf	??_ADC_Sample+1
  3184  0199  01D5               	clrf	??_ADC_Sample+2
  3185  019A  01D6               	clrf	??_ADC_Sample+3
  3186  019B  0856               	movf	??_ADC_Sample+3,w
  3187  019C  025D               	subwf	ADC_Sample@adsum+3,w	;volatile
  3188  019D  1D03               	skipz
  3189  019E  29A9               	goto	u3275
  3190  019F  0855               	movf	??_ADC_Sample+2,w
  3191  01A0  025C               	subwf	ADC_Sample@adsum+2,w	;volatile
  3192  01A1  1D03               	skipz
  3193  01A2  29A9               	goto	u3275
  3194  01A3  0854               	movf	??_ADC_Sample+1,w
  3195  01A4  025B               	subwf	ADC_Sample@adsum+1,w	;volatile
  3196  01A5  1D03               	skipz
  3197  01A6  29A9               	goto	u3275
  3198  01A7  0853               	movf	??_ADC_Sample,w
  3199  01A8  025A               	subwf	ADC_Sample@adsum,w	;volatile
  3200  01A9                     u3275:	
  3201  01A9  1C03               	skipc
  3202  01AA  29B3               	goto	l929
  3203                           
  3204                           ;main.c: 1133: adsum -= admin;
  3205  01AB  085E               	movf	ADC_Sample@admin,w	;volatile
  3206  01AC  00D3               	movwf	??_ADC_Sample
  3207  01AD  085F               	movf	ADC_Sample@admin+1,w	;volatile
  3208  01AE  21CE               	fcall	PL2	;call to abstracted procedure
  3209  01AF  1C03               	skipc
  3210  01B0  0F56               	incfsz	??_ADC_Sample+3,w
  3211  01B1  02DD               	subwf	ADC_Sample@adsum+3,f	;volatile
  3212  01B2  29B7               	goto	l3076
  3213  01B3                     l929:	
  3214                           
  3215                           ;main.c: 1134: else
  3216                           ;main.c: 1135: adsum = 0;
  3217  01B3  01DA               	clrf	ADC_Sample@adsum	;volatile
  3218  01B4  01DB               	clrf	ADC_Sample@adsum+1	;volatile
  3219  01B5  01DC               	clrf	ADC_Sample@adsum+2	;volatile
  3220  01B6  01DD               	clrf	ADC_Sample@adsum+3	;volatile
  3221  01B7                     l3076:	
  3222                           
  3223                           ;main.c: 1137: adresult = adsum >> 3;
  3224  01B7  085A               	movf	ADC_Sample@adsum,w	;volatile
  3225  01B8  00D3               	movwf	??_ADC_Sample
  3226  01B9  085B               	movf	ADC_Sample@adsum+1,w	;volatile
  3227  01BA  00D4               	movwf	??_ADC_Sample+1
  3228  01BB  085C               	movf	ADC_Sample@adsum+2,w	;volatile
  3229  01BC  00D5               	movwf	??_ADC_Sample+2
  3230  01BD  085D               	movf	ADC_Sample@adsum+3,w	;volatile
  3231  01BE  00D6               	movwf	??_ADC_Sample+3
  3232  01BF  3003               	movlw	3
  3233  01C0                     u3295:	
  3234  01C0  1003               	clrc
  3235  01C1  0CD6               	rrf	??_ADC_Sample+3,f
  3236  01C2  0CD5               	rrf	??_ADC_Sample+2,f
  3237  01C3  0CD4               	rrf	??_ADC_Sample+1,f
  3238  01C4  0CD3               	rrf	??_ADC_Sample,f
  3239  01C5  3EFF               	addlw	-1
  3240  01C6  1D03               	skipz
  3241  01C7  29C0               	goto	u3295
  3242  01C8  0854               	movf	??_ADC_Sample+1,w
  3243  01C9  00F8               	movwf	_adresult+1	;volatile
  3244  01CA  0853               	movf	??_ADC_Sample,w
  3245  01CB  00F7               	movwf	_adresult	;volatile
  3246                           
  3247                           ;main.c: 1139: adsum = 0;
  3248                           
  3249                           ;main.c: 1140: admin = 0;
  3250                           
  3251                           ;main.c: 1141: admax = 0;
  3252  01CC  21DD               	fcall	PL4	;call to abstracted procedure
  3253                           
  3254                           ;main.c: 1142: return 0xA5;
  3255  01CD  34A5               	retlw	165
  3256  01CE                     __end_of_ADC_Sample:	
  3257  01CE                     PL2:	
  3258  01CE  00D4               	movwf	??_ADC_Sample+1
  3259  01CF  01D5               	clrf	??_ADC_Sample+2
  3260  01D0  01D6               	clrf	??_ADC_Sample+3
  3261  01D1  0853               	movf	??_ADC_Sample,w
  3262  01D2  02DA               	subwf	ADC_Sample@adsum,f	;volatile
  3263  01D3  0854               	movf	??_ADC_Sample+1,w
  3264  01D4  1C03               	skipc
  3265  01D5  0F54               	incfsz	??_ADC_Sample+1,w
  3266  01D6  02DB               	subwf	ADC_Sample@adsum+1,f	;volatile
  3267  01D7  0855               	movf	??_ADC_Sample+2,w
  3268  01D8  1C03               	skipc
  3269  01D9  0F55               	incfsz	??_ADC_Sample+2,w
  3270  01DA  02DC               	subwf	ADC_Sample@adsum+2,f	;volatile
  3271  01DB  0856               	movf	??_ADC_Sample+3,w
  3272  01DC  0008               	return
  3273  01DD                     __end_ofPL2:	
  3274  01DD                     PL4:	
  3275  01DD  01DA               	clrf	ADC_Sample@adsum	;volatile
  3276  01DE  01DB               	clrf	ADC_Sample@adsum+1	;volatile
  3277  01DF  01DC               	clrf	ADC_Sample@adsum+2	;volatile
  3278  01E0  01DD               	clrf	ADC_Sample@adsum+3	;volatile
  3279  01E1  01DE               	clrf	ADC_Sample@admin	;volatile
  3280  01E2  01DF               	clrf	ADC_Sample@admin+1	;volatile
  3281  01E3  01E0               	clrf	ADC_Sample@admax	;volatile
  3282  01E4  01E1               	clrf	ADC_Sample@admax+1	;volatile
  3283  01E5  0008               	return
  3284  01E6                     __end_ofPL4:	
  3285  01E6                     PL12:	
  3286  01E6  0863               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3287  01E7  00E1               	movwf	ADC_Sample@admax+1	;volatile
  3288  01E8  0862               	movf	ADC_Sample@ad_temp,w	;volatile
  3289  01E9  00E0               	movwf	ADC_Sample@admax	;volatile
  3290  01EA  0008               	return
  3291  01EB                     __end_ofPL12:	
  3292                           
  3293                           	psect	text16
  3294  045A                     __ptext16:	
  3295 ;; *************** function _Sleep_Mode *****************
  3296 ;; Defined at:
  3297 ;;		line 1001 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2, status,0, pclath, cstack
  3306 ;; Tracked objects:
  3307 ;;		On entry : 100/0
  3308 ;;		On exit  : 100/100
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMMON   BANK0   BANK1
  3311 ;;      Params:         0       0       0
  3312 ;;      Locals:         0       0       0
  3313 ;;      Temps:          0       0       0
  3314 ;;      Totals:         0       0       0
  3315 ;;Total ram usage:        0 bytes
  3316 ;; Hardware stack levels used:    1
  3317 ;; Hardware stack levels required when called:    3
  3318 ;; This function calls:
  3319 ;;		_AD_Init
  3320 ;;		_Init_System
  3321 ;; This function is called by:
  3322 ;;		_main
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           
  3327                           ;psect for function _Sleep_Mode
  3328  045A                     _Sleep_Mode:	
  3329                           
  3330                           ;main.c: 1003: INTCON = 0;
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3334  045A  018B               	clrf	11	;volatile
  3335                           
  3336                           ;main.c: 1005: OPTION_REG = 0;
  3337  045B  0181               	clrf	1	;volatile
  3338                           
  3339                           ;main.c: 1007: WPUA = 0B00000000;
  3340  045C  1683               	bsf	3,5	;RP0=1, select bank1
  3341  045D  0188               	clrf	8	;volatile
  3342                           
  3343                           ;main.c: 1008: TRISA = 0x27;
  3344  045E  3027               	movlw	39
  3345                           
  3346                           ;main.c: 1009: TRISB = 0x04;
  3347                           
  3348                           ;main.c: 1011: PORTA = 0X00;
  3349                           
  3350                           ;main.c: 1012: PORTB = 0X00;
  3351  045F  2493               	fcall	PL6	;call to abstracted procedure
  3352                           
  3353                           ;main.c: 1013: WPUB = 0x04;
  3354  0460  0088               	movwf	8	;volatile
  3355                           
  3356                           ;main.c: 1015: ADCON0 = 0;
  3357  0461  1683               	bsf	3,5	;RP0=1, select bank1
  3358  0462  0195               	clrf	21	;volatile
  3359                           
  3360                           ;main.c: 1016: ADCON1 = 0;
  3361  0463  0196               	clrf	22	;volatile
  3362                           
  3363                           ;main.c: 1018: PWMCON0 = 0;
  3364  0464  1283               	bcf	3,5	;RP0=0, select bank0
  3365  0465  0195               	clrf	21	;volatile
  3366                           
  3367                           ;main.c: 1020: OSCCON = 0X70;
  3368  0466  3070               	movlw	112
  3369  0467  0094               	movwf	20	;volatile
  3370                           
  3371                           ;main.c: 1022: IOCA = 0x20;
  3372  0468  3020               	movlw	32
  3373  0469  1683               	bsf	3,5	;RP0=1, select bank1
  3374  046A  0089               	movwf	9	;volatile
  3375                           
  3376                           ;main.c: 1023: IOCB = 0x04;
  3377  046B  3004               	movlw	4
  3378  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3379  046D  0089               	movwf	9	;volatile
  3380                           
  3381                           ;main.c: 1025: RAIE = 1;
  3382  046E  158E               	bsf	14,3	;volatile
  3383                           
  3384                           ;main.c: 1026: PEIE = 1;
  3385  046F  170B               	bsf	11,6	;volatile
  3386                           
  3387                           ;main.c: 1027: RBIE = 1;
  3388  0470  158B               	bsf	11,3	;volatile
  3389                           
  3390                           ;main.c: 1028: GIE = 0;
  3391  0471  138B               	bcf	11,7	;volatile
  3392                           
  3393                           ;main.c: 1030: PIE1 &= 0X08;
  3394  0472  3008               	movlw	8
  3395  0473  058E               	andwf	14,f	;volatile
  3396                           
  3397                           ;main.c: 1031: PIR1 = 0;
  3398  0474  018D               	clrf	13	;volatile
  3399                           
  3400                           ;main.c: 1032: INTCON &= 0XC8;
  3401  0475  30C8               	movlw	200
  3402  0476  058B               	andwf	11,f	;volatile
  3403                           
  3404                           ;main.c: 1034: PORTA;
  3405  0477  1683               	bsf	3,5	;RP0=1, select bank1
  3406  0478  0806               	movf	6,w	;volatile
  3407                           
  3408                           ;main.c: 1035: RAIF = 0;
  3409  0479  1283               	bcf	3,5	;RP0=0, select bank0
  3410  047A  118D               	bcf	13,3	;volatile
  3411                           
  3412                           ;main.c: 1036: PORTB;
  3413  047B  0806               	movf	6,w	;volatile
  3414                           
  3415                           ;main.c: 1037: RBIF = 0;
  3416  047C  100B               	bcf	11,0	;volatile
  3417  047D  0064               	clrwdt	;# 
  3418  047E  0063               	sleep	;# 
  3419  047F  0000               	nop	;# 
  3420  0480  0064               	clrwdt	;# 
  3421  0481  0000               	nop	;# 
  3422  0482  0000               	nop	;# 
  3423  0483  0000               	nop	;# 
  3424  0484  0000               	nop	;# 
  3425  0485  0000               	nop	;# 
  3426                           
  3427                           ;main.c: 1049: if(RAIF) RAIF = 0;
  3428  0486  1283               	bcf	3,5	;RP0=0, select bank0
  3429  0487  198D               	btfsc	13,3	;volatile
  3430  0488  118D               	bcf	13,3	;volatile
  3431                           
  3432                           ;main.c: 1050: if(RBIF) RBIF = 0;
  3433  0489  180B               	btfsc	11,0	;volatile
  3434  048A  100B               	bcf	11,0	;volatile
  3435                           
  3436                           ;main.c: 1051: if(TMR2IF) TMR2IF = 0;
  3437  048B  188D               	btfsc	13,1	;volatile
  3438  048C  108D               	bcf	13,1	;volatile
  3439                           
  3440                           ;main.c: 1052: IOCA = 0B00000000;
  3441  048D  1683               	bsf	3,5	;RP0=1, select bank1
  3442  048E  0189               	clrf	9	;volatile
  3443                           
  3444                           ;main.c: 1053: IOCB = 0B00000000;
  3445  048F  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0490  0189               	clrf	9	;volatile
  3447                           
  3448                           ;main.c: 1054: Init_System();
  3449  0491  25A4               	fcall	_Init_System
  3450                           
  3451                           ;main.c: 1055: AD_Init();
  3452  0492  2E14               	ljmp	l2190
  3453  0493                     __end_of_Sleep_Mode:	
  3454  0493                     PL6:	
  3455  0493  0085               	movwf	5	;volatile
  3456  0494  3004               	movlw	4
  3457  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0496  0085               	movwf	5	;volatile
  3459  0497  1683               	bsf	3,5	;RP0=1, select bank1
  3460  0498  0186               	clrf	6	;volatile
  3461  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3462  049A  0186               	clrf	6	;volatile
  3463  049B  0008               	return
  3464  049C                     __end_ofPL6:	
  3465                           
  3466                           	psect	text17
  3467  05A4                     __ptext17:	
  3468 ;; *************** function _Init_System *****************
  3469 ;; Defined at:
  3470 ;;		line 843 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2
  3479 ;; Tracked objects:
  3480 ;;		On entry : 100/0
  3481 ;;		On exit  : 100/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMMON   BANK0   BANK1
  3484 ;;      Params:         0       0       0
  3485 ;;      Locals:         0       0       0
  3486 ;;      Temps:          0       0       0
  3487 ;;      Totals:         0       0       0
  3488 ;;Total ram usage:        0 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    2
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_main
  3495 ;;		_Sleep_Mode
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _Init_System
  3501  05A4                     _Init_System:	
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _Init_System: [wreg+status,2]
  3505  05A4  0000               	nop	;# 
  3506  05A5  0064               	clrwdt	;# 
  3507                           
  3508                           ;main.c: 847: OPTION_REG = 0;
  3509  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  3510  05A7  0181               	clrf	1	;volatile
  3511  05A8  0064               	clrwdt	;# 
  3512                           
  3513                           ;main.c: 849: OSCCON = 0X72;
  3514  05A9  3072               	movlw	114
  3515  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  3516  05AB  0094               	movwf	20	;volatile
  3517                           
  3518                           ;main.c: 851: WPUA = 0B00000000;
  3519  05AC  1683               	bsf	3,5	;RP0=1, select bank1
  3520  05AD  0188               	clrf	8	;volatile
  3521                           
  3522                           ;main.c: 852: WPDA = 0x00;
  3523  05AE  0187               	clrf	7	;volatile
  3524                           
  3525                           ;main.c: 853: WPUB = 0x04;
  3526  05AF  3004               	movlw	4
  3527  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3528  05B1  0088               	movwf	8	;volatile
  3529                           
  3530                           ;main.c: 855: TRISA = 0x27;
  3531  05B2  3027               	movlw	39
  3532  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  3533                           
  3534                           ;main.c: 856: TRISB = 0x04;
  3535                           
  3536                           ;main.c: 858: PORTA = 0X00;
  3537                           
  3538                           ;main.c: 859: PORTB = 0X00;
  3539  05B4  2493               	fcall	PL6	;call to abstracted procedure
  3540                           
  3541                           ;main.c: 863: PR2 = 249;
  3542  05B5  30F9               	movlw	249
  3543  05B6  0091               	movwf	17	;volatile
  3544                           
  3545                           ;main.c: 864: TMR2IF = 0;
  3546  05B7  108D               	bcf	13,1	;volatile
  3547                           
  3548                           ;main.c: 865: TMR2IE = 1;
  3549  05B8  148E               	bsf	14,1	;volatile
  3550                           
  3551                           ;main.c: 867: T2CON = 0B00000100;
  3552  05B9  3004               	movlw	4
  3553  05BA  0093               	movwf	19	;volatile
  3554                           
  3555                           ;main.c: 868: INTCON = 0XC0;
  3556  05BB  30C0               	movlw	192
  3557  05BC  008B               	movwf	11	;volatile
  3558  05BD  0008               	return
  3559  05BE                     __end_of_Init_System:	
  3560                           
  3561                           	psect	text18
  3562  0614                     __ptext18:	
  3563 ;; *************** function _AD_Init *****************
  3564 ;; Defined at:
  3565 ;;		line 880 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2
  3574 ;; Tracked objects:
  3575 ;;		On entry : 100/0
  3576 ;;		On exit  : 100/100
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1
  3579 ;;      Params:         0       0       0
  3580 ;;      Locals:         0       0       0
  3581 ;;      Temps:          0       0       0
  3582 ;;      Totals:         0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    2
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_main
  3590 ;;		_Sleep_Mode
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           
  3595                           ;psect for function _AD_Init
  3596  0614                     _AD_Init:	
  3597  0614                     l2190:	
  3598                           ;incstack = 0
  3599                           ; Regs used in _AD_Init: [wreg+status,2]
  3600                           
  3601                           
  3602                           ;main.c: 913: ADCON0 = 0X41;
  3603  0614  3041               	movlw	65
  3604  0615  1683               	bsf	3,5	;RP0=1, select bank1
  3605  0616  0095               	movwf	21	;volatile
  3606                           
  3607                           ;main.c: 930: ADCON1 = 0;
  3608  0617  0196               	clrf	22	;volatile
  3609                           
  3610                           ;main.c: 931: ANSEL0 = 0X07;
  3611  0618  3007               	movlw	7
  3612  0619  0093               	movwf	19	;volatile
  3613                           
  3614                           ;main.c: 932: ANSEL1 = 0x00;
  3615  061A  0194               	clrf	20	;volatile
  3616  061B  0008               	return
  3617  061C                     __end_of_AD_Init:	
  3618                           
  3619                           	psect	text19
  3620  0550                     __ptext19:	
  3621 ;; *************** function _Isr_Timer *****************
  3622 ;; Defined at:
  3623 ;;		line 132 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;		None
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;		None
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 100/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1
  3637 ;;      Params:         0       0       0
  3638 ;;      Locals:         0       0       0
  3639 ;;      Temps:          3       0       0
  3640 ;;      Totals:         3       0       0
  3641 ;;Total ram usage:        3 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    1
  3644 ;; This function calls:
  3645 ;;		_ledShow
  3646 ;; This function is called by:
  3647 ;;		Interrupt level 1
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function _Isr_Timer
  3653  0550                     _Isr_Timer:	
  3654                           
  3655                           ;main.c: 134: if(TMR2IF)
  3656  0550  1283               	bcf	3,5	;RP0=0, select bank0
  3657  0551  1C8D               	btfss	13,1	;volatile
  3658  0552  2D64               	goto	i1l688
  3659                           
  3660                           ;main.c: 135: {
  3661                           ;main.c: 136: TMR2IF = 0;
  3662  0553  108D               	bcf	13,1	;volatile
  3663                           
  3664                           ;main.c: 137: if(++intCount >= 160)
  3665  0554  30A0               	movlw	160
  3666  0555  0AD1               	incf	_intCount,f
  3667  0556  0251               	subwf	_intCount,w
  3668  0557  1C03               	skipc
  3669  0558  2D61               	goto	i1l2932
  3670  0559  3064               	movlw	100
  3671                           
  3672                           ;main.c: 138: {
  3673                           ;main.c: 139: intCount = 0;
  3674  055A  01D1               	clrf	_intCount
  3675                           
  3676                           ;main.c: 140: IntFlag = 1;
  3677  055B  01CF               	clrf	_IntFlag
  3678  055C  0ACF               	incf	_IntFlag,f
  3679                           
  3680                           ;main.c: 141: if(++count1s >= 100)
  3681  055D  0AD0               	incf	_count1s,f
  3682  055E  0250               	subwf	_count1s,w
  3683  055F  1803               	btfsc	3,0
  3684                           
  3685                           ;main.c: 142: {
  3686                           ;main.c: 143: count1s = 0;
  3687  0560  01D0               	clrf	_count1s
  3688  0561                     i1l2932:	
  3689                           
  3690                           ;main.c: 144: }
  3691                           ;main.c: 145: }
  3692                           ;main.c: 146: ledShow();
  3693  0561  21EB               	fcall	_ledShow
  3694                           
  3695                           ;main.c: 147: intCount10++;
  3696  0562  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0563  0ACD               	incf	_intCount10,f
  3698  0564                     i1l688:	
  3699  0564  0872               	movf	??_Isr_Timer+2,w
  3700  0565  008A               	movwf	10
  3701  0566  0871               	movf	??_Isr_Timer+1,w
  3702  0567  0084               	movwf	4
  3703  0568  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3704  0569  0083               	movwf	3
  3705  056A  0EFE               	swapf	126,f
  3706  056B  0E7E               	swapf	126,w
  3707  056C  0009               	retfie
  3708  056D                     __end_of_Isr_Timer:	
  3709                           
  3710                           	psect	intentry
  3711  0004                     __pintentry:	
  3712                           ;incstack = 0
  3713                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3714                           
  3715  0004                     interrupt_function:	
  3716  007E                     saved_w	set	btemp
  3717  0004  00FE               	movwf	btemp
  3718  0005  0E03               	swapf	3,w
  3719  0006  00F0               	movwf	??_Isr_Timer
  3720  0007  0804               	movf	4,w
  3721  0008  00F1               	movwf	??_Isr_Timer+1
  3722  0009  080A               	movf	10,w
  3723  000A  00F2               	movwf	??_Isr_Timer+2
  3724  000B  2D50               	ljmp	_Isr_Timer
  3725                           
  3726                           	psect	text20
  3727  01EB                     __ptext20:	
  3728 ;; *************** function _ledShow *****************
  3729 ;; Defined at:
  3730 ;;		line 201 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3739 ;; Tracked objects:
  3740 ;;		On entry : 100/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1
  3744 ;;      Params:         0       0       0
  3745 ;;      Locals:         0       0       0
  3746 ;;      Temps:          0       0       0
  3747 ;;      Totals:         0       0       0
  3748 ;;Total ram usage:        0 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; This function calls:
  3751 ;;		Nothing
  3752 ;; This function is called by:
  3753 ;;		_Isr_Timer
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           
  3758                           ;psect for function _ledShow
  3759  01EB                     _ledShow:	
  3760                           
  3761                           ;main.c: 203: if(++ledCntTime > 5)
  3762                           
  3763                           ;incstack = 0
  3764                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3765  01EB  3006               	movlw	6
  3766  01EC  0AB8               	incf	_ledCntTime,f
  3767  01ED  0238               	subwf	_ledCntTime,w
  3768  01EE  1C03               	skipc
  3769  01EF  0008               	return
  3770  01F0  3011               	movlw	17
  3771                           
  3772                           ;main.c: 204: {
  3773                           ;main.c: 205: ledCntTime = 0;
  3774  01F1  01B8               	clrf	_ledCntTime
  3775                           
  3776                           ;main.c: 206: if(++ledCnt > 16)
  3777  01F2  0AC9               	incf	_ledCnt,f
  3778  01F3  0249               	subwf	_ledCnt,w
  3779  01F4  1803               	btfsc	3,0
  3780                           
  3781                           ;main.c: 207: {
  3782                           ;main.c: 208: ledCnt = 0;
  3783  01F5  01C9               	clrf	_ledCnt
  3784                           
  3785                           ;main.c: 209: }
  3786                           ;main.c: 210: PORTA &= 0xE7;
  3787  01F6  30E7               	movlw	231
  3788  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  3789  01F8  0586               	andwf	6,f	;volatile
  3790                           
  3791                           ;main.c: 211: PORTB &= 0xDC;
  3792  01F9  30DC               	movlw	220
  3793  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3794  01FB  0586               	andwf	6,f	;volatile
  3795                           
  3796                           ;main.c: 212: TRISA |= 0x18;
  3797  01FC  3018               	movlw	24
  3798  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  3799  01FE  0485               	iorwf	5,f	;volatile
  3800                           
  3801                           ;main.c: 213: TRISB |= 0x23;
  3802  01FF  3023               	movlw	35
  3803  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3804  0201  0485               	iorwf	5,f	;volatile
  3805                           
  3806                           ;main.c: 214: switch(ledCnt)
  3807  0202  2A86               	goto	i1l2488
  3808  0203                     i1l709:	
  3809                           ;main.c: 215: {
  3810                           ;main.c: 216: case 1:
  3811                           
  3812                           
  3813                           ;main.c: 217: if(shiweiNum & 0x01)
  3814  0203  1C65               	btfss	_shiweiNum,0
  3815  0204  0008               	return
  3816                           
  3817                           ;main.c: 218: {
  3818                           ;main.c: 219: TRISB &= 0xDF;
  3819  0205  1285               	bcf	5,5	;volatile
  3820                           
  3821                           ;main.c: 220: TRISB &= 0xFE;
  3822  0206  1005               	bcf	5,0	;volatile
  3823                           
  3824                           ;main.c: 221: RB5 = 1;
  3825  0207  1686               	bsf	6,5	;volatile
  3826                           
  3827                           ;main.c: 222: RB0 = 0;
  3828  0208  1006               	bcf	6,0	;volatile
  3829  0209  0008               	return
  3830  020A                     i1l712:	
  3831                           ;main.c: 225: case 2:
  3832                           
  3833                           
  3834                           ;main.c: 226: if(shiweiNum & 0x02)
  3835  020A  1CE5               	btfss	_shiweiNum,1
  3836  020B  0008               	return
  3837                           
  3838                           ;main.c: 227: {
  3839                           ;main.c: 228: TRISB &= 0xDF;
  3840  020C  1285               	bcf	5,5	;volatile
  3841                           
  3842                           ;main.c: 229: TRISB &= 0xFE;
  3843  020D  1005               	bcf	5,0	;volatile
  3844                           
  3845                           ;main.c: 230: RB0 = 1;
  3846  020E  1406               	bsf	6,0	;volatile
  3847                           
  3848                           ;main.c: 231: RB5 = 0;
  3849  020F  1286               	bcf	6,5	;volatile
  3850  0210  0008               	return
  3851  0211                     i1l714:	
  3852                           ;main.c: 234: case 3:
  3853                           
  3854                           
  3855                           ;main.c: 235: if(shiweiNum & 0x04)
  3856  0211  1D65               	btfss	_shiweiNum,2
  3857  0212  0008               	return
  3858                           
  3859                           ;main.c: 236: {
  3860                           ;main.c: 237: TRISB &= 0xDF;
  3861  0213  1285               	bcf	5,5	;volatile
  3862                           
  3863                           ;main.c: 238: TRISA &= 0xF7;
  3864  0214  1683               	bsf	3,5	;RP0=1, select bank1
  3865  0215  1185               	bcf	5,3	;volatile
  3866                           
  3867                           ;main.c: 239: RB5 = 1;
  3868  0216  1283               	bcf	3,5	;RP0=0, select bank0
  3869  0217  1686               	bsf	6,5	;volatile
  3870                           
  3871                           ;main.c: 240: RA3 = 0;
  3872  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3873  0219  1186               	bcf	6,3	;volatile
  3874  021A  0008               	return
  3875  021B                     i1l716:	
  3876                           ;main.c: 243: case 4:
  3877                           
  3878                           
  3879                           ;main.c: 244: if(shiweiNum & 0x08)
  3880  021B  1DE5               	btfss	_shiweiNum,3
  3881  021C  0008               	return
  3882                           
  3883                           ;main.c: 245: {
  3884                           ;main.c: 246: TRISB &= 0xFE;
  3885  021D  1005               	bcf	5,0	;volatile
  3886                           
  3887                           ;main.c: 247: TRISA &= 0xF7;
  3888  021E  1683               	bsf	3,5	;RP0=1, select bank1
  3889  021F  1185               	bcf	5,3	;volatile
  3890                           
  3891                           ;main.c: 248: RB0 = 1;
  3892  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3893  0221  1406               	bsf	6,0	;volatile
  3894                           
  3895                           ;main.c: 249: RA3 = 0;
  3896  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3897  0223  1186               	bcf	6,3	;volatile
  3898  0224  0008               	return
  3899  0225                     i1l718:	
  3900                           ;main.c: 252: case 5:
  3901                           
  3902                           
  3903                           ;main.c: 253: if(shiweiNum & 0x10)
  3904  0225  1E65               	btfss	_shiweiNum,4
  3905  0226  0008               	return
  3906                           
  3907                           ;main.c: 254: {
  3908                           ;main.c: 255: TRISB &= 0xFE;
  3909  0227  1005               	bcf	5,0	;volatile
  3910                           
  3911                           ;main.c: 256: TRISA &= 0xEF;
  3912  0228  1683               	bsf	3,5	;RP0=1, select bank1
  3913  0229  1205               	bcf	5,4	;volatile
  3914                           
  3915                           ;main.c: 257: RB0 = 1;
  3916  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3917  022B  1406               	bsf	6,0	;volatile
  3918                           
  3919                           ;main.c: 258: RA4 = 0;
  3920  022C  1683               	bsf	3,5	;RP0=1, select bank1
  3921  022D  1206               	bcf	6,4	;volatile
  3922  022E  0008               	return
  3923  022F                     i1l720:	
  3924                           ;main.c: 261: case 6:
  3925                           
  3926                           
  3927                           ;main.c: 262: if(shiweiNum & 0x20)
  3928  022F  1EE5               	btfss	_shiweiNum,5
  3929  0230  0008               	return
  3930                           
  3931                           ;main.c: 263: {
  3932                           ;main.c: 264: TRISB &= 0xDF;
  3933  0231  1285               	bcf	5,5	;volatile
  3934                           
  3935                           ;main.c: 265: TRISA &= 0xEF;
  3936  0232  1683               	bsf	3,5	;RP0=1, select bank1
  3937  0233  1205               	bcf	5,4	;volatile
  3938                           
  3939                           ;main.c: 266: RB5 = 1;
  3940  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3941  0235  1686               	bsf	6,5	;volatile
  3942                           
  3943                           ;main.c: 267: RA4 = 0;
  3944  0236  1683               	bsf	3,5	;RP0=1, select bank1
  3945  0237  1206               	bcf	6,4	;volatile
  3946  0238  0008               	return
  3947  0239                     i1l722:	
  3948                           ;main.c: 270: case 7:
  3949                           
  3950                           
  3951                           ;main.c: 271: if(shiweiNum & 0x40)
  3952  0239  1F65               	btfss	_shiweiNum,6
  3953  023A  0008               	return
  3954                           
  3955                           ;main.c: 272: {
  3956                           ;main.c: 273: TRISA &= 0xF7;
  3957  023B  1683               	bsf	3,5	;RP0=1, select bank1
  3958  023C  1185               	bcf	5,3	;volatile
  3959                           
  3960                           ;main.c: 274: TRISA &= 0xEF;
  3961  023D  1205               	bcf	5,4	;volatile
  3962                           
  3963                           ;main.c: 275: RA3 = 1;
  3964  023E  1586               	bsf	6,3	;volatile
  3965                           
  3966                           ;main.c: 276: RA4 = 0;
  3967  023F  1206               	bcf	6,4	;volatile
  3968  0240  0008               	return
  3969  0241                     i1l724:	
  3970                           ;main.c: 279: case 8:
  3971                           
  3972                           
  3973                           ;main.c: 280: if(geweiNum & 0x01)
  3974  0241  1C64               	btfss	_geweiNum,0
  3975  0242  0008               	return
  3976                           
  3977                           ;main.c: 281: {
  3978                           ;main.c: 282: TRISB &= 0xFD;
  3979  0243  1085               	bcf	5,1	;volatile
  3980                           
  3981                           ;main.c: 283: TRISB &= 0xFE;
  3982  0244  1005               	bcf	5,0	;volatile
  3983                           
  3984                           ;main.c: 284: RB0 = 1;
  3985  0245  1406               	bsf	6,0	;volatile
  3986                           
  3987                           ;main.c: 285: RB1 = 0;
  3988  0246  1086               	bcf	6,1	;volatile
  3989  0247  0008               	return
  3990  0248                     i1l726:	
  3991                           ;main.c: 288: case 9:
  3992                           
  3993                           
  3994                           ;main.c: 289: if(geweiNum & 0x02)
  3995  0248  1CE4               	btfss	_geweiNum,1
  3996  0249  0008               	return
  3997                           
  3998                           ;main.c: 290: {
  3999                           ;main.c: 291: TRISB &= 0xFD;
  4000  024A  1085               	bcf	5,1	;volatile
  4001                           
  4002                           ;main.c: 292: TRISB &= 0xFE;
  4003  024B  1005               	bcf	5,0	;volatile
  4004                           
  4005                           ;main.c: 293: RB1 = 1;
  4006  024C  1486               	bsf	6,1	;volatile
  4007                           
  4008                           ;main.c: 294: RB0 = 0;
  4009  024D  1006               	bcf	6,0	;volatile
  4010  024E  0008               	return
  4011  024F                     i1l728:	
  4012                           ;main.c: 297: case 10:
  4013                           
  4014                           
  4015                           ;main.c: 298: if(geweiNum & 0x04)
  4016  024F  1D64               	btfss	_geweiNum,2
  4017  0250  0008               	return
  4018                           
  4019                           ;main.c: 299: {
  4020                           ;main.c: 300: TRISB &= 0xFD;
  4021  0251  1085               	bcf	5,1	;volatile
  4022                           
  4023                           ;main.c: 301: TRISB &= 0xDF;
  4024  0252  1285               	bcf	5,5	;volatile
  4025                           
  4026                           ;main.c: 302: RB5 = 1;
  4027  0253  1686               	bsf	6,5	;volatile
  4028                           
  4029                           ;main.c: 303: RB1 = 0;
  4030  0254  1086               	bcf	6,1	;volatile
  4031  0255  0008               	return
  4032  0256                     i1l730:	
  4033                           ;main.c: 306: case 11:
  4034                           
  4035                           
  4036                           ;main.c: 307: if(geweiNum & 0x08)
  4037  0256  1DE4               	btfss	_geweiNum,3
  4038  0257  0008               	return
  4039                           
  4040                           ;main.c: 308: {
  4041                           ;main.c: 309: TRISB &= 0xFD;
  4042  0258  1085               	bcf	5,1	;volatile
  4043                           
  4044                           ;main.c: 310: TRISB &= 0xDF;
  4045  0259  1285               	bcf	5,5	;volatile
  4046                           
  4047                           ;main.c: 311: RB1 = 1;
  4048  025A  1486               	bsf	6,1	;volatile
  4049                           
  4050                           ;main.c: 312: RB5 = 0;
  4051  025B  1286               	bcf	6,5	;volatile
  4052  025C  0008               	return
  4053  025D                     i1l732:	
  4054                           ;main.c: 315: case 12:
  4055                           
  4056                           
  4057                           ;main.c: 316: if(geweiNum & 0x10)
  4058  025D  1E64               	btfss	_geweiNum,4
  4059  025E  0008               	return
  4060                           
  4061                           ;main.c: 317: {
  4062                           ;main.c: 318: TRISB &= 0xFD;
  4063  025F  1085               	bcf	5,1	;volatile
  4064                           
  4065                           ;main.c: 319: TRISA &= 0xF7;
  4066  0260  1683               	bsf	3,5	;RP0=1, select bank1
  4067  0261  1185               	bcf	5,3	;volatile
  4068                           
  4069                           ;main.c: 320: RA3 = 1;
  4070  0262  1586               	bsf	6,3	;volatile
  4071                           
  4072                           ;main.c: 321: RB1 = 0;
  4073  0263  1283               	bcf	3,5	;RP0=0, select bank0
  4074  0264  1086               	bcf	6,1	;volatile
  4075  0265  0008               	return
  4076  0266                     i1l734:	
  4077                           ;main.c: 324: case 13:
  4078                           
  4079                           
  4080                           ;main.c: 325: if(geweiNum & 0x20)
  4081  0266  1EE4               	btfss	_geweiNum,5
  4082  0267  0008               	return
  4083                           
  4084                           ;main.c: 326: {
  4085                           ;main.c: 327: TRISB &= 0xFD;
  4086  0268  1085               	bcf	5,1	;volatile
  4087                           
  4088                           ;main.c: 328: TRISA &= 0xF7;
  4089  0269  1683               	bsf	3,5	;RP0=1, select bank1
  4090  026A  1185               	bcf	5,3	;volatile
  4091                           
  4092                           ;main.c: 329: RB1 = 1;
  4093  026B  1283               	bcf	3,5	;RP0=0, select bank0
  4094  026C  1486               	bsf	6,1	;volatile
  4095                           
  4096                           ;main.c: 330: RA3 = 0;
  4097  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4098  026E  1186               	bcf	6,3	;volatile
  4099  026F  0008               	return
  4100  0270                     i1l736:	
  4101                           ;main.c: 333: case 0:
  4102                           
  4103                           
  4104                           ;main.c: 334: if(geweiNum & 0x40)
  4105  0270  1F64               	btfss	_geweiNum,6
  4106  0271  0008               	return
  4107                           
  4108                           ;main.c: 335: {
  4109                           ;main.c: 336: TRISB &= 0xFD;
  4110  0272  1085               	bcf	5,1	;volatile
  4111                           
  4112                           ;main.c: 337: TRISA &= 0xEF;
  4113  0273  1683               	bsf	3,5	;RP0=1, select bank1
  4114  0274  1205               	bcf	5,4	;volatile
  4115                           
  4116                           ;main.c: 338: RB1 = 1;
  4117  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0276  1486               	bsf	6,1	;volatile
  4119                           
  4120                           ;main.c: 339: RA4 = 0;
  4121  0277  1683               	bsf	3,5	;RP0=1, select bank1
  4122  0278  1206               	bcf	6,4	;volatile
  4123  0279  0008               	return
  4124  027A                     i1l2468:	
  4125                           
  4126                           ;main.c: 343: if(chrgFlag == 0 && RB2 == 0)
  4127  027A  087A               	movf	_chrgFlag,w
  4128  027B  1903               	btfsc	3,2
  4129  027C  1906               	btfsc	6,2	;volatile
  4130  027D  0008               	return
  4131                           
  4132                           ;main.c: 344: {
  4133                           ;main.c: 345: TRISB &= 0xFE;
  4134  027E  1005               	bcf	5,0	;volatile
  4135                           
  4136                           ;main.c: 346: TRISA &= 0xF7;
  4137  027F  1683               	bsf	3,5	;RP0=1, select bank1
  4138  0280  1185               	bcf	5,3	;volatile
  4139                           
  4140                           ;main.c: 347: RA3 = 1;
  4141  0281  1586               	bsf	6,3	;volatile
  4142                           
  4143                           ;main.c: 348: RB0 = 0;
  4144  0282  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0283  1006               	bcf	6,0	;volatile
  4146  0284  0008               	return
  4147  0285                     i1l2474:	
  4148  0285                     i1l2480:	
  4149                           ;main.c: 352: if(chrgFlag == 0 && RB2 == 0)
  4150                           
  4151  0285  2A7A               	goto	i1l2468
  4152  0286                     i1l2488:	
  4153                           ;main.c: 361: if(chrgFlag == 0 && RB2 == 0)
  4154                           
  4155  0286  0849               	movf	_ledCnt,w
  4156                           
  4157                           ; Switch size 1, requested type "space"
  4158                           ; Number of cases is 17, Range of values is 0 to 16
  4159                           ; switch strategies available:
  4160                           ; Name         Instructions Cycles
  4161                           ; direct_byte           23     6 (fixed)
  4162                           ; simple_byte           52    27 (average)
  4163                           ; jumptable            260     6 (fixed)
  4164                           ;	Chosen strategy is direct_byte
  4165  0287  0084               	movwf	4
  4166  0288  3011               	movlw	17
  4167  0289  0204               	subwf	4,w
  4168  028A  1803               	skipnc
  4169  028B  0008               	return
  4170  028C  3005               	movlw	high i1S3362
  4171  028D  008A               	movwf	10
  4172  028E  30E3               	movlw	low i1S3362
  4173  028F  0704               	addwf	4,w
  4174  0290  0082               	movwf	2
  4175  0291  0008               	return
  4176  0292                     __end_of_ledShow:	
  4177  007E                     btemp	set	126	;btemp
  4178  007E                     wtemp0	set	126
  4179                           
  4180                           	psect	swtext1
  4181  05E3                     __pswtext1:	
  4182  05E3                     i1S3362:	
  4183  05E3  2A70               	ljmp	i1l736
  4184  05E4  2A03               	ljmp	i1l709
  4185  05E5  2A0A               	ljmp	i1l712
  4186  05E6  2A11               	ljmp	i1l714
  4187  05E7  2A1B               	ljmp	i1l716
  4188  05E8  2A25               	ljmp	i1l718
  4189  05E9  2A2F               	ljmp	i1l720
  4190  05EA  2A39               	ljmp	i1l722
  4191  05EB  2A41               	ljmp	i1l724
  4192  05EC  2A48               	ljmp	i1l726
  4193  05ED  2A4F               	ljmp	i1l728
  4194  05EE  2A56               	ljmp	i1l730
  4195  05EF  2A5D               	ljmp	i1l732
  4196  05F0  2A66               	ljmp	i1l734
  4197  05F1  2A7A               	ljmp	i1l2468
  4198  05F2  2A85               	ljmp	i1l2474
  4199  05F3  2A85               	ljmp	i1l2480


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         55
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      71
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwdiv
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _ledCtr->___lbmod
    _ledCtr->___lwdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3022
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0    1001
                            ___lbdiv
                            ___lbmod
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            1     1      0     977
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwdiv
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      47       4       88.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      52       7        0.0%
DATA                 0      0      52       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Sep 17 13:15:11 2025

            _protectFlag 004B                        pc 0002                       PL2 01CE  
                     PL4 01DD                       PL6 0493                       PL8 00FC  
                     fsr 0004                      PL10 05DF                      PL12 01E6  
                    PL14 03AB                      l822 0549                      l807 0513  
                    l925 016F                      l693 0412                      l919 0134  
                    l929 01B3                      l697 042C                      _GIE 005F  
                    _RB0 0030                      _RA3 0433                      _RB1 0031  
                    _RA4 0434                      _RB2 0032                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 061C                     l3100 0585                     l3200 02F9  
                   l2232 050E                     l3042 011F                     l3026 0114  
                   l3060 0159                     l3052 013F                     l3036 011E  
                   l3028 0116                     l3212 0322                     l3220 032D  
                   l1196 0595                     l3116 04E7                     l2190 0614  
                   l2246 0520                     l3064 0163                     l3160 04D1  
                   l2600 0088                     l2256 0527                     l3128 04FE  
                   l3240 0353                     l3232 0342                     l3066 016B  
                   l3218 032B                     l3146 04B8                     l2610 00A4  
                   l2602 008A                     l2362 058F                     l3076 01B7  
                   l3148 04B9                     l2196 061C                     l2620 00B1  
                   l3092 0571                     l3260 0375                     l3252 0363  
                   l3244 0358                     l3236 0350                     l3340 0458  
                   l3190 02E5                     l3158 04CF                     l2622 00B3  
                   l2606 008E                     l2550 0035                     l3318 043B  
                   l2640 00D7                     l2616 00AE                     l2536 0023  
                   l2376 05A2                     l3280 03A8                     l3272 0390  
                   l2800 03FB                     l3178 02B8                     l2634 00D2  
                   l2562 0048                     l3196 02F2                     l2660 00F9  
                   l2636 00D3                     l2580 0061                     l2572 0054  
                   l2548 0033                     l2644 00DE                     l2732 053E  
                   l3268 0386                     l2590 006E                     l2566 004A  
                   l3278 039A                     l2806 0404                     l3294 041A  
                   l2760 03BF                     l2588 006C                     l2780 03DD  
                   l2772 03D1                     l2764 03C5                     l2756 03BB  
                   l2792 03EF                     l2784 03E3                     l2776 03D7  
                   l2768 03CB                     l2796 03F5                     l2788 03E9  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u2405 00A2                     u3225 015F                     u3235 0169  
                   u2445 00C6                     _PIE1 000E                     u3275 01A9  
                   u3355 04F0                     u3295 01C0                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     u3485 02D7  
                   _RBIE 005B                     _RBIF 0058                     u3837 04D6  
                   u3847 02F7                     u3857 0332                     _PIR1 000D  
                   u3867 0110                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 0408                     btemp 007E  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 05A4          __end_of___lbmod 0589                    _T2CON 0013  
        __end_of___lwdiv 0503                    i1l720 022F                    i1l712 020A  
                  i1l730 0256                    i1l722 0239                    i1l714 0211  
                  i1l732 025D                    i1l724 0241                    i1l716 021B  
                  i1l709 0203                    i1l734 0266                    i1l726 0248  
                  i1l718 0225                    i1l736 0270                    i1l728 024F  
                  i1l688 0564            _countHalfFull 004C                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 00FC  
        __end_of_ledShow 0292          __end_of_keyRead 052D                    pclath 000A  
        __end_of_pwmInit 0604          __end_of_pwmStop 0614                    status 0003  
                  wtemp0 007E          __end_of_workCtr 0408          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 045A  
   __size_of_chrgPwmInit 000D     __size_of_chrgPwmStop 0007                   ??_main 0077  
              ??_AD_Init 0073           _firstCheckTime 0032      __end_of_Init_System 05BE  
                 _ADCON0 0095                   _ADCON1 0096                   i1S3362 05E3  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l2480 0285  
                 i1l2474 0285                   i1l2468 027A                   i1l2488 0286  
                 i1l2932 0561                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD2L 009B                   _PWMD3L 009C             ??_ADC_Sample 0053  
           keyCtr@kclick 0074       __size_of_Isr_Timer 001D               _Sleep_Mode 045A  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 0049  
                 _ledCtr 0335                ??___lwdiv 0077                   _keyCtr 052D  
              ??_chrgCtr 0073                   _pwStep 0043                   _result 0030  
              ??_ledShow 0070         __end_of_numArray 05D2                ??_keyRead 0073  
     __end_of_ADC_Sample 01CE                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002A          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0054          _workOverOutTime 004A           __pcstackCOMMON 0070  
     __size_of_checkOutA 003D              _Init_System 05A4               __end_ofPL2 01DD  
             __end_ofPL4 01E6               __end_ofPL6 049C               __end_ofPL8 0102  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 056D               _checkBatAD 0292  
             __pbssBANK0 0020             _chrgFullFlag 004E              ?_Sleep_Mode 0070  
             __pmaintext 0408               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003A                  ?_keyCtr 0070               _ledCntTime 0038  
                _AD_Init 0614                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 04D9               __stringtab 05BE                  _IntFlag 004F  
             _intCount10 004D          ADC_Sample@adldo 0073          ADC_Sample@admax 0060  
        ADC_Sample@admin 005E          ADC_Sample@adsum 005A                  ___lbdiv 0589  
                ___lbmod 056D                  _addTime 003C                  ___lwdiv 04D9  
        __size_of_ledCtr 0076          __size_of_keyCtr 0023                  _chrgCtr 0018  
             _lowBatFlag 0036                  __ptext1 03B0                  __ptext2 05F4  
                __ptext3 0335                  __ptext4 04D9                  __ptext5 056D  
                __ptext6 0589                  __ptext7 052D                  __ptext8 0503  
                __ptext9 0018                  _ledShow 01EB                  _count1s 0050  
                _count8s 0024                  _maxDuty 0046                  _keyRead 0503  
    __size_of_Sleep_Mode 0039                  _pwmInit 05F4                  _subTime 003B  
            ?_checkBatAD 0070                  _pwmStop 060C                  clrloop0 0605  
                _workCtr 03B0               _outADValue 002C     end_of_initialization 0016  
          _longPressFlag 0047            ??_chrgPwmInit 0073            ??_chrgPwmStop 0073  
       ___lbmod@dividend 0053              ___lbmod@rem 0055      __size_of_checkBatAD 00A3  
           ?_Init_System 0070           __end_of_ledCtr 03AB           __end_of_keyCtr 0550  
    __end_of_chrgPwmInit 05DF      __end_of_chrgPwmStop 0623              __end_ofPL10 05E3  
            __end_ofPL12 01EB              __end_ofPL14 03B0      start_initialization 000D  
              _Isr_Timer 0550             ??_Sleep_Mode 0073                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0062                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0053  
     __end_of_Sleep_Mode 0493               ?_Isr_Timer 0070                _checkOutA 049C  
              __pnvBANK0 0064              _chrgMaxDuty 0039                _chrgMaxAD 003E  
       ___lwdiv@dividend 0075              _chrgPwmFlag 0034              _chrgPwmInit 05D2  
               ?___lbdiv 0073                 ?___lbmod 0073              _chrgPwmStop 061C  
               ?___lwdiv 0073                 ?_chrgCtr 0070                __pstrings 05BE  
              __pswtext1 05E3                _count900s 0022                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 0066           ADC_Sample@adch 0058  
               ?_pwmInit 0070                _fullCount 0026             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003D         ___lwdiv@quotient 0054  
               ?_workCtr 0070              ADC_Sample@i 0059              ADC_Sample@j 0057  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 0604  
              _prePwStep 0042              _reChrgCount 0041                _sleepTime 0035  
              _shiweiNum 0065       __end_of_checkBatAD 0335              __stringbase 05C3  
   __size_of_Init_System 001A                _startTime 0045         __size_of_AD_Init 0008  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0102  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lwdiv 002A  
     __end_of__stringtab 05C4         __size_of_chrgCtr 00E4         __size_of_ledShow 00A7  
       __size_of_keyRead 002A                 _adresult 0077                 _chrgFlag 007A  
               _chrgMode 003F          ___lwdiv@divisor 0073          ___lwdiv@counter 0053  
               __ptext10 060C                 __ptext11 061C                 __ptext20 01EB  
               __ptext12 05D2                 __ptext13 049C                 __ptext14 0292  
               __ptext15 0102                 __ptext16 045A                 __ptext17 05A4  
               __ptext18 0614                 __ptext19 0550         __size_of_pwmInit 0010  
       __size_of_pwmStop 0008                 _geweiNum 0064                 _count50s 0028  
       __size_of_workCtr 0058                 _keyCount 0048                 _intCount 0051  
          __size_of_main 0052              ??_checkOutA 0074                 _numArray 05C4  
               _test_adc 0052                 _power_ad 002E                 _workStep 0079  
           _overChrgTime 0044             _motorPwmFlag 0033                 intlevel1 0000  
            ?_ADC_Sample 0073                stringcode 05BE             ?_chrgPwmInit 0070  
           _overWorkTime 0037             ?_chrgPwmStop 0070              _showBatTime 0040  
             _OPTION_REG 0001                 stringdir 05BE                 stringtab 05BE  
            _sumBatValue 0020  
