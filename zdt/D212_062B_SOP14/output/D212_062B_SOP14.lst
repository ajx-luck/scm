

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 30 10:48:10 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	strings
    73  057C                     __pstrings:	
    74  057C                     stringtab:	
    75  057C                     __stringtab:	
    76  057C                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  057C                     stringdir:	
    80  057C  3005               	movlw	high stringdir
    81  057D  008A               	movwf	10
    82  057E  0804               	movf	4,w
    83  057F  0A84               	incf	4,f
    84  0580  0782               	addwf	2,f
    85  0581                     __stringbase:	
    86  0581  3400               	retlw	0
    87  0582                     __end_of__stringtab:	
    88  0582                     _numArray:	
    89  0582  343F               	retlw	63
    90  0583  3406               	retlw	6
    91  0584  345B               	retlw	91
    92  0585  344F               	retlw	79
    93  0586  3466               	retlw	102
    94  0587  346D               	retlw	109
    95  0588  347D               	retlw	125
    96  0589  3407               	retlw	7
    97  058A  347F               	retlw	127
    98  058B  346F               	retlw	111
    99  058C  3471               	retlw	113
   100  058D  3479               	retlw	121
   101  058E  3450               	retlw	80
   102  058F  3476               	retlw	118
   103  0590                     __end_of_numArray:	
   104                           
   105                           	psect	nvBANK0
   106  0061                     __pnvBANK0:	
   107  0061                     _geweiNum:	
   108  0061                     	ds	1
   109  0062                     _shiweiNum:	
   110  0062                     	ds	1
   111  0063                     _firstTime:	
   112  0063                     	ds	1
   113  001D                     _PWMCON2	set	29
   114  0018                     _PWMTH	set	24
   115  0017                     _PWMTL	set	23
   116  0016                     _PWMCON1	set	22
   117  0015                     _PWMCON0	set	21
   118  0014                     _OSCCON	set	20
   119  0013                     _T2CON	set	19
   120  0011                     _PR2	set	17
   121  000E                     _PIE1	set	14
   122  000D                     _PIR1	set	13
   123  000B                     _INTCON	set	11
   124  0009                     _IOCB	set	9
   125  0008                     _WPUB	set	8
   126  0006                     _PORTB	set	6
   127  0005                     _TRISB	set	5
   128  0001                     _OPTION_REG	set	1
   129  0071                     _TMR2IE	set	113
   130  0073                     _RAIE	set	115
   131  0069                     _TMR2IF	set	105
   132  006B                     _RAIF	set	107
   133  0058                     _RBIF	set	88
   134  005B                     _RBIE	set	91
   135  005E                     _PEIE	set	94
   136  005F                     _GIE	set	95
   137  0030                     _RB0	set	48
   138  0031                     _RB1	set	49
   139  0032                     _RB2	set	50
   140  0033                     _RB3	set	51
   141  0034                     _RB4	set	52
   142  0035                     _RB5	set	53
   143  009E                     _PWMD23H	set	158
   144  009D                     _PWM23DT	set	157
   145  009C                     _PWMD3L	set	156
   146  009B                     _PWMD2L	set	155
   147  0099                     _ADRESH	set	153
   148  0098                     _ADRESL	set	152
   149  0096                     _ADCON1	set	150
   150  0095                     _ADCON0	set	149
   151  0094                     _ANSEL1	set	148
   152  0093                     _ANSEL0	set	147
   153  0089                     _IOCA	set	137
   154  0088                     _WPUA	set	136
   155  0087                     _WPDA	set	135
   156  0086                     _PORTA	set	134
   157  0085                     _TRISA	set	133
   158  04B2                     _LDO_EN	set	1202
   159  04B6                     _CHS4	set	1206
   160  04A9                     _GODONE	set	1193
   161  0433                     _RA3	set	1075
   162  0434                     _RA4	set	1076
   163                           
   164                           	psect	cinit
   165  000D                     start_initialization:	
   166                           ; #config settings
   167                           
   168  000D                     __initialization:	
   169                           
   170                           ; Clear objects allocated to COMMON
   171  000D  3077               	movlw	low __pbssCOMMON
   172  000E  0084               	movwf	4
   173  000F  307B               	movlw	low (__pbssCOMMON+4)
   174  0010  25C2               	fcall	clear_ram0
   175  0011  3020               	movlw	low __pbssBANK0
   176                           
   177                           ; Clear objects allocated to BANK0
   178  0012  1383               	bcf	3,7	;select IRP bank0
   179  0013  0084               	movwf	4
   180  0014  3050               	movlw	low (__pbssBANK0+48)
   181  0015  25C2               	fcall	clear_ram0
   182  0016                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185  0016                     __end_of__initialization:	
   186  0016  0183               	clrf	3
   187  0017  2BF0               	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	bssCOMMON
   190  0077                     __pbssCOMMON:	
   191  0077                     _adresult:	
   192  0077                     	ds	2
   193  0079                     _workStep:	
   194  0079                     	ds	1
   195  007A                     _chrgFlag:	
   196  007A                     	ds	1
   197                           
   198                           	psect	bssBANK0
   199  0020                     __pbssBANK0:	
   200  0020                     _count900s:	
   201  0020                     	ds	2
   202  0022                     _count8s:	
   203  0022                     	ds	2
   204  0024                     _fullCount:	
   205  0024                     	ds	2
   206  0026                     _count50s:	
   207  0026                     	ds	2
   208  0028                     _batADValue:	
   209  0028                     	ds	2
   210  002A                     _outADValue:	
   211  002A                     	ds	2
   212  002C                     _power_ad:	
   213  002C                     	ds	2
   214  002E                     _result:	
   215  002E                     	ds	2
   216  0030                     _motorPwmFlag:	
   217  0030                     	ds	1
   218  0031                     _chrgPwmFlag:	
   219  0031                     	ds	1
   220  0032                     _sleepTime:	
   221  0032                     	ds	1
   222  0033                     _lowBatFlag:	
   223  0033                     	ds	1
   224  0034                     _overWorkTime:	
   225  0034                     	ds	1
   226  0035                     _ledCntTime:	
   227  0035                     	ds	1
   228  0036                     _chrgMaxDuty:	
   229  0036                     	ds	1
   230  0037                     _chrgWaitTime:	
   231  0037                     	ds	1
   232  0038                     _subTime:	
   233  0038                     	ds	1
   234  0039                     _addTime:	
   235  0039                     	ds	1
   236  003A                     _lockCount:	
   237  003A                     	ds	1
   238  003B                     _chrgMaxAD:	
   239  003B                     	ds	1
   240  003C                     _chrgMode:	
   241  003C                     	ds	1
   242  003D                     _showBatTime:	
   243  003D                     	ds	1
   244  003E                     _reChrgCount:	
   245  003E                     	ds	1
   246  003F                     _prePwStep:	
   247  003F                     	ds	1
   248  0040                     _pwStep:	
   249  0040                     	ds	1
   250  0041                     _overChrgTime:	
   251  0041                     	ds	1
   252  0042                     _startTime:	
   253  0042                     	ds	1
   254  0043                     _maxDuty:	
   255  0043                     	ds	1
   256  0044                     _longPressFlag:	
   257  0044                     	ds	1
   258  0045                     _keyCount:	
   259  0045                     	ds	1
   260  0046                     _ledCnt:	
   261  0046                     	ds	1
   262  0047                     _workOverOutTime:	
   263  0047                     	ds	1
   264  0048                     _protectFlag:	
   265  0048                     	ds	1
   266  0049                     _countHalfFull:	
   267  0049                     	ds	1
   268  004A                     _intCount10:	
   269  004A                     	ds	1
   270  004B                     _chrgFullFlag:	
   271  004B                     	ds	1
   272  004C                     _IntFlag:	
   273  004C                     	ds	1
   274  004D                     _count1s:	
   275  004D                     	ds	1
   276  004E                     _intCount:	
   277  004E                     	ds	1
   278  004F                     _test_adc:	
   279  004F                     	ds	1
   280                           
   281                           	psect	clrtext
   282  05C2                     clear_ram0:	
   283                           ;	Called with FSR containing the base address, and
   284                           ;	W with the last address+1
   285                           
   286  05C2  0064               	clrwdt	;clear the watchdog before getting into this loop
   287  05C3                     clrloop0:	
   288  05C3  0180               	clrf	0	;clear RAM location pointed to by FSR
   289  05C4  0A84               	incf	4,f	;increment pointer
   290  05C5  0604               	xorwf	4,w	;XOR with final address
   291  05C6  1903               	btfsc	3,2	;have we reached the end yet?
   292  05C7  3400               	retlw	0	;all done for this memory range, return
   293  05C8  0604               	xorwf	4,w	;XOR again to restore value
   294  05C9  2DC3               	goto	clrloop0	;do the next byte
   295                           
   296                           	psect	cstackCOMMON
   297  0070                     __pcstackCOMMON:	
   298  0070                     ?_ledShow:	
   299  0070                     ??_ledShow:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_Init_System:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_AD_Init:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_checkOutA:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_chrgCtr:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_checkBatAD:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_keyCtr:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_workCtr:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_ledCtr:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_Sleep_Mode:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_chrgPwmStop:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_pwmStop:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_chrgPwmInit:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_pwmInit:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_Isr_Timer:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ??_Isr_Timer:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_main:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_keyRead:	
   351                           ; 1 bytes @ 0x0
   352                           
   353                           
   354                           ; 1 bytes @ 0x0
   355  0070                     	ds	3
   356  0073                     ??_Init_System:	
   357  0073                     ??_AD_Init:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     ??_chrgCtr:	
   361                           ; 1 bytes @ 0x3
   362                           
   363  0073                     ??_workCtr:	
   364                           ; 1 bytes @ 0x3
   365                           
   366  0073                     ??_Sleep_Mode:	
   367                           ; 1 bytes @ 0x3
   368                           
   369  0073                     ??_chrgPwmStop:	
   370                           ; 1 bytes @ 0x3
   371                           
   372  0073                     ??_pwmStop:	
   373                           ; 1 bytes @ 0x3
   374                           
   375  0073                     ??_chrgPwmInit:	
   376                           ; 1 bytes @ 0x3
   377                           
   378  0073                     ??_pwmInit:	
   379                           ; 1 bytes @ 0x3
   380                           
   381  0073                     ?_ADC_Sample:	
   382                           ; 1 bytes @ 0x3
   383                           
   384  0073                     ??_keyRead:	
   385                           ; 1 bytes @ 0x3
   386                           
   387  0073                     ?___lbdiv:	
   388                           ; 1 bytes @ 0x3
   389                           
   390  0073                     ?___lbmod:	
   391                           ; 1 bytes @ 0x3
   392                           
   393  0073                     keyRead@keyStatus:	
   394                           ; 1 bytes @ 0x3
   395                           
   396  0073                     ADC_Sample@adldo:	
   397                           ; 1 bytes @ 0x3
   398                           
   399  0073                     ___lbdiv@divisor:	
   400                           ; 1 bytes @ 0x3
   401                           
   402  0073                     ___lbmod@divisor:	
   403                           ; 1 bytes @ 0x3
   404                           
   405                           
   406                           ; 1 bytes @ 0x3
   407  0073                     	ds	1
   408  0074                     ??_checkOutA:	
   409  0074                     ??_checkBatAD:	
   410                           ; 1 bytes @ 0x4
   411                           
   412  0074                     ??_keyCtr:	
   413                           ; 1 bytes @ 0x4
   414                           
   415  0074                     ??___lbdiv:	
   416                           ; 1 bytes @ 0x4
   417                           
   418  0074                     ??___lbmod:	
   419                           ; 1 bytes @ 0x4
   420                           
   421  0074                     keyCtr@kclick:	
   422                           ; 1 bytes @ 0x4
   423                           
   424  0074                     ___lbdiv@dividend:	
   425                           ; 1 bytes @ 0x4
   426                           
   427                           
   428                           ; 1 bytes @ 0x4
   429  0074                     	ds	1
   430  0075                     ___lbdiv@counter:	
   431                           
   432                           ; 1 bytes @ 0x5
   433  0075                     	ds	1
   434  0076                     ___lbdiv@quotient:	
   435                           
   436                           ; 1 bytes @ 0x6
   437  0076                     	ds	1
   438  0077                     ??_ledCtr:	
   439  0077                     ??_main:	
   440                           ; 1 bytes @ 0x7
   441                           
   442                           
   443                           	psect	cstackBANK0
   444  0050                     __pcstackBANK0:	
   445                           ; 1 bytes @ 0x7
   446                           
   447  0050                     ??_ADC_Sample:	
   448  0050                     ___lbmod@dividend:	
   449                           ; 1 bytes @ 0x0
   450                           
   451                           
   452                           ; 1 bytes @ 0x0
   453  0050                     	ds	1
   454  0051                     ___lbmod@counter:	
   455                           
   456                           ; 1 bytes @ 0x1
   457  0051                     	ds	1
   458  0052                     ___lbmod@rem:	
   459                           
   460                           ; 1 bytes @ 0x2
   461  0052                     	ds	2
   462  0054                     ADC_Sample@j:	
   463                           
   464                           ; 1 bytes @ 0x4
   465  0054                     	ds	1
   466  0055                     ADC_Sample@adch:	
   467                           
   468                           ; 1 bytes @ 0x5
   469  0055                     	ds	1
   470  0056                     ADC_Sample@i:	
   471                           
   472                           ; 1 bytes @ 0x6
   473  0056                     	ds	1
   474  0057                     ADC_Sample@adsum:	
   475                           
   476                           ; 4 bytes @ 0x7
   477  0057                     	ds	4
   478  005B                     ADC_Sample@admin:	
   479                           
   480                           ; 2 bytes @ 0xB
   481  005B                     	ds	2
   482  005D                     ADC_Sample@admax:	
   483                           
   484                           ; 2 bytes @ 0xD
   485  005D                     	ds	2
   486  005F                     ADC_Sample@ad_temp:	
   487                           
   488                           ; 2 bytes @ 0xF
   489  005F                     	ds	2
   490                           
   491                           	psect	maintext
   492  03F0                     __pmaintext:	
   493 ;;
   494 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   495 ;;
   496 ;; *************** function _main *****************
   497 ;; Defined at:
   498 ;;		line 154 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;		None
   501 ;; Auto vars:     Size  Location     Type
   502 ;;		None
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : B00/0
   509 ;;		On exit  : 100/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1
   512 ;;      Params:         0       0       0
   513 ;;      Locals:         0       0       0
   514 ;;      Temps:          0       0       0
   515 ;;      Totals:         0       0       0
   516 ;;Total ram usage:        0 bytes
   517 ;; Hardware stack levels required when called:    4
   518 ;; This function calls:
   519 ;;		_AD_Init
   520 ;;		_Init_System
   521 ;;		_Sleep_Mode
   522 ;;		_checkBatAD
   523 ;;		_checkOutA
   524 ;;		_chrgCtr
   525 ;;		_keyCtr
   526 ;;		_ledCtr
   527 ;;		_workCtr
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           
   534                           ;psect for function _main
   535  03F0                     _main:	
   536                           
   537                           ;main.c: 156: Init_System();
   538                           
   539                           ;incstack = 0
   540                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   541  03F0  2562               	fcall	_Init_System
   542                           
   543                           ;main.c: 157: AD_Init();
   544  03F1  25D2               	fcall	_AD_Init
   545                           
   546                           ;main.c: 158: shiweiNum = geweiNum = numArray[8];
   547  03F2  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   548  03F3  0084               	movwf	4
   549  03F4  257C               	fcall	stringdir
   550  03F5  1283               	bcf	3,5	;RP0=0, select bank0
   551  03F6  00E1               	movwf	_geweiNum
   552  03F7  00E2               	movwf	_shiweiNum
   553                           
   554                           ;main.c: 159: firstTime = 200;
   555  03F8  30C8               	movlw	200
   556  03F9  00E3               	movwf	_firstTime
   557  03FA                     l689:	
   558                           ;main.c: 160: while (1)
   559                           
   560  03FA  0064               	clrwdt	;# 
   561                           
   562                           ;main.c: 163: if(intCount10 > 10)
   563  03FB  300B               	movlw	11
   564  03FC  1283               	bcf	3,5	;RP0=0, select bank0
   565  03FD  024A               	subwf	_intCount10,w
   566  03FE  1C03               	skipc
   567  03FF  2C02               	goto	l3174
   568                           
   569                           ;main.c: 164: {
   570                           ;main.c: 165: intCount10 = 0;
   571  0400  01CA               	clrf	_intCount10
   572                           
   573                           ;main.c: 166: checkOutA();
   574  0401  2484               	fcall	_checkOutA
   575  0402                     l3174:	
   576                           
   577                           ;main.c: 167: }
   578                           ;main.c: 168: if(!IntFlag)
   579  0402  1283               	bcf	3,5	;RP0=0, select bank0
   580  0403  084C               	movf	_IntFlag,w
   581  0404  1903               	btfsc	3,2
   582  0405  2BFA               	goto	l689
   583                           
   584                           ;main.c: 170: IntFlag = 0;
   585  0406  01CC               	clrf	_IntFlag
   586                           
   587                           ;main.c: 171: chrgCtr();
   588  0407  2018               	fcall	_chrgCtr
   589                           
   590                           ;main.c: 172: checkBatAD();
   591  0408  2292               	fcall	_checkBatAD
   592                           
   593                           ;main.c: 173: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   594  0409  087A               	movf	_chrgFlag,w
   595  040A  1D03               	btfss	3,2
   596  040B  2C14               	goto	l693
   597  040C  1283               	bcf	3,5	;RP0=0, select bank0
   598  040D  0833               	movf	_lowBatFlag,w
   599  040E  1D03               	btfss	3,2
   600  040F  2C14               	goto	l693
   601  0410  0863               	movf	_firstTime,w
   602  0411  1D03               	btfss	3,2
   603  0412  2C14               	goto	l693
   604                           
   605                           ;main.c: 174: {
   606                           ;main.c: 175: keyCtr();
   607  0413  24EB               	fcall	_keyCtr
   608  0414                     l693:	
   609                           
   610                           ;main.c: 176: }
   611                           ;main.c: 177: workCtr();
   612  0414  2398               	fcall	_workCtr
   613                           
   614                           ;main.c: 178: if(count1s == 0 && ++count900s >= 900)
   615  0415  1283               	bcf	3,5	;RP0=0, select bank0
   616  0416  084D               	movf	_count1s,w
   617  0417  1D03               	btfss	3,2
   618  0418  2C23               	goto	l3198
   619  0419  0AA0               	incf	_count900s,f
   620  041A  1903               	skipnz
   621  041B  0AA1               	incf	_count900s+1,f
   622  041C  3003               	movlw	3
   623  041D  0221               	subwf	_count900s+1,w
   624  041E  3084               	movlw	132
   625  041F  1903               	skipnz
   626  0420  0220               	subwf	_count900s,w
   627  0421  1803               	btfsc	3,0
   628                           
   629                           ;main.c: 179: {
   630                           ;main.c: 180: workStep = 0;
   631  0422  01F9               	clrf	_workStep
   632  0423                     l3198:	
   633                           
   634                           ;main.c: 181: }
   635                           ;main.c: 182: ledCtr();
   636  0423  2335               	fcall	_ledCtr
   637                           
   638                           ;main.c: 183: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   639  0424  087A               	movf	_chrgFlag,w
   640  0425  1D03               	btfss	3,2
   641  0426  2C40               	goto	l3220
   642  0427  0879               	movf	_workStep,w
   643  0428  1D03               	btfss	3,2
   644  0429  2C40               	goto	l3220
   645  042A  0845               	movf	_keyCount,w
   646  042B  1D03               	btfss	3,2
   647  042C  2C40               	goto	l3220
   648  042D  0863               	movf	_firstTime,w
   649  042E  1D03               	btfss	3,2
   650  042F  2C40               	goto	l3220
   651  0430  083D               	movf	_showBatTime,w
   652  0431  1D03               	btfss	3,2
   653  0432  2C40               	goto	l3220
   654  0433  0834               	movf	_overWorkTime,w
   655  0434  1D03               	btfss	3,2
   656  0435  2C40               	goto	l3220
   657  0436  30C8               	movlw	200
   658                           
   659                           ;main.c: 184: {
   660                           ;main.c: 185: shiweiNum = geweiNum = 0;
   661  0437  01E1               	clrf	_geweiNum
   662  0438  01E2               	clrf	_shiweiNum
   663                           
   664                           ;main.c: 186: if(++sleepTime >= 200)
   665  0439  0AB2               	incf	_sleepTime,f
   666  043A  0232               	subwf	_sleepTime,w
   667  043B  1C03               	skipc
   668  043C  2BFA               	goto	l689
   669                           
   670                           ;main.c: 187: {
   671                           ;main.c: 188: sleepTime = 0;
   672  043D  01B2               	clrf	_sleepTime
   673                           
   674                           ;main.c: 189: Sleep_Mode();
   675  043E  2442               	fcall	_Sleep_Mode
   676  043F  2BFA               	goto	l689
   677  0440                     l3220:	
   678                           
   679                           ;main.c: 192: else
   680                           ;main.c: 193: {
   681                           ;main.c: 194: sleepTime = 0;
   682  0440  01B2               	clrf	_sleepTime
   683  0441  2BFA               	goto	l689
   684  0442                     __end_of_main:	
   685                           
   686                           	psect	text1
   687  0398                     __ptext1:	
   688 ;; *************** function _workCtr *****************
   689 ;; Defined at:
   690 ;;		line 649 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, pclath, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1
   704 ;;      Params:         0       0       0
   705 ;;      Locals:         0       0       0
   706 ;;      Temps:          0       0       0
   707 ;;      Totals:         0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    3
   711 ;; This function calls:
   712 ;;		_pwmInit
   713 ;;		_pwmStop
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           
   720                           ;psect for function _workCtr
   721  0398                     _workCtr:	
   722                           
   723                           ;main.c: 652: if(startTime > 0)
   724                           
   725                           ;incstack = 0
   726                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   727  0398  1283               	bcf	3,5	;RP0=0, select bank0
   728  0399  0842               	movf	_startTime,w
   729  039A  1D03               	btfss	3,2
   730                           
   731                           ;main.c: 653: {
   732                           ;main.c: 654: startTime--;
   733  039B  03C2               	decf	_startTime,f
   734                           
   735                           ;main.c: 655: }
   736                           ;main.c: 656: if(workStep > 0)
   737  039C  0879               	movf	_workStep,w
   738  039D  1903               	btfsc	3,2
   739  039E  2BEC               	goto	l2736
   740                           
   741                           ;main.c: 657: {
   742                           ;main.c: 658: if(motorPwmFlag == 0)
   743  039F  0830               	movf	_motorPwmFlag,w
   744  03A0  1D03               	btfss	3,2
   745  03A1  2BA3               	goto	l2686
   746                           
   747                           ;main.c: 659: {
   748                           ;main.c: 660: pwmInit();
   749  03A2  25B2               	fcall	_pwmInit
   750  03A3                     l2686:	
   751                           
   752                           ;main.c: 662: }
   753                           ;main.c: 663: if(workStep == 1)
   754  03A3  0B79               	decfsz	_workStep,w
   755  03A4  2BA7               	goto	l2690
   756                           
   757                           ;main.c: 664: {
   758                           ;main.c: 665: maxDuty = 158;
   759  03A5  309E               	movlw	158
   760  03A6  2BE4               	goto	L1
   761  03A7                     l2690:	
   762                           ;main.c: 666: }
   763                           
   764                           
   765                           ;main.c: 667: else if(workStep == 2)
   766  03A7  3002               	movlw	2
   767  03A8  0679               	xorwf	_workStep,w
   768  03A9  1D03               	btfss	3,2
   769  03AA  2BAD               	goto	l2694
   770                           
   771                           ;main.c: 668: maxDuty = 163;
   772  03AB  30A3               	movlw	163
   773  03AC  2BE4               	goto	L1
   774  03AD                     l2694:	
   775                           
   776                           ;main.c: 669: else if(workStep == 3)
   777  03AD  3003               	movlw	3
   778  03AE  0679               	xorwf	_workStep,w
   779  03AF  1D03               	btfss	3,2
   780  03B0  2BB3               	goto	l2698
   781                           
   782                           ;main.c: 670: maxDuty = 167;
   783  03B1  30A7               	movlw	167
   784  03B2  2BE4               	goto	L1
   785  03B3                     l2698:	
   786                           
   787                           ;main.c: 671: else if(workStep == 4)
   788  03B3  3004               	movlw	4
   789  03B4  0679               	xorwf	_workStep,w
   790  03B5  1D03               	btfss	3,2
   791  03B6  2BB9               	goto	l2702
   792                           
   793                           ;main.c: 672: maxDuty = 170;
   794  03B7  30AA               	movlw	170
   795  03B8  2BE4               	goto	L1
   796  03B9                     l2702:	
   797                           
   798                           ;main.c: 673: else if(workStep == 5)
   799  03B9  3005               	movlw	5
   800  03BA  0679               	xorwf	_workStep,w
   801  03BB  1D03               	btfss	3,2
   802  03BC  2BBF               	goto	l2706
   803                           
   804                           ;main.c: 674: maxDuty = 173;
   805  03BD  30AD               	movlw	173
   806  03BE  2BE4               	goto	L1
   807  03BF                     l2706:	
   808                           
   809                           ;main.c: 675: else if(workStep == 6)
   810  03BF  3006               	movlw	6
   811  03C0  0679               	xorwf	_workStep,w
   812  03C1  1D03               	btfss	3,2
   813  03C2  2BC5               	goto	l2710
   814                           
   815                           ;main.c: 676: maxDuty = 177;
   816  03C3  30B1               	movlw	177
   817  03C4  2BE4               	goto	L1
   818  03C5                     l2710:	
   819                           
   820                           ;main.c: 677: else if(workStep == 7)
   821  03C5  3007               	movlw	7
   822  03C6  0679               	xorwf	_workStep,w
   823  03C7  1D03               	btfss	3,2
   824  03C8  2BCB               	goto	l2714
   825                           
   826                           ;main.c: 678: maxDuty = 180;
   827  03C9  30B4               	movlw	180
   828  03CA  2BE4               	goto	L1
   829  03CB                     l2714:	
   830                           
   831                           ;main.c: 679: else if(workStep == 8)
   832  03CB  3008               	movlw	8
   833  03CC  0679               	xorwf	_workStep,w
   834  03CD  1D03               	btfss	3,2
   835  03CE  2BD1               	goto	l2718
   836                           
   837                           ;main.c: 680: maxDuty = 184;
   838  03CF  30B8               	movlw	184
   839  03D0  2BE4               	goto	L1
   840  03D1                     l2718:	
   841                           
   842                           ;main.c: 681: else if(workStep == 9)
   843  03D1  3009               	movlw	9
   844  03D2  0679               	xorwf	_workStep,w
   845  03D3  1D03               	btfss	3,2
   846  03D4  2BD7               	goto	l2722
   847                           
   848                           ;main.c: 682: maxDuty = 188;
   849  03D5  30BC               	movlw	188
   850  03D6  2BE4               	goto	L1
   851  03D7                     l2722:	
   852                           
   853                           ;main.c: 683: else if(workStep == 10)
   854  03D7  300A               	movlw	10
   855  03D8  0679               	xorwf	_workStep,w
   856  03D9  1D03               	btfss	3,2
   857  03DA  2BDD               	goto	l2726
   858                           
   859                           ;main.c: 684: maxDuty = 192;
   860  03DB  30C0               	movlw	192
   861  03DC  2BE4               	goto	L1
   862  03DD                     l2726:	
   863                           
   864                           ;main.c: 685: else if(workStep == 11)
   865  03DD  300B               	movlw	11
   866  03DE  0679               	xorwf	_workStep,w
   867  03DF  1D03               	btfss	3,2
   868  03E0  2BE3               	goto	l2730
   869                           
   870                           ;main.c: 686: maxDuty = 196;
   871  03E1  30C4               	movlw	196
   872  03E2  2BE4               	goto	L1
   873  03E3                     l2730:	
   874                           
   875                           ;main.c: 687: else
   876                           ;main.c: 688: {
   877                           ;main.c: 689: maxDuty = 200;
   878  03E3  30C8               	movlw	200
   879  03E4                     L1:	
   880  03E4  00C3               	movwf	_maxDuty
   881                           
   882                           ;main.c: 690: }
   883                           ;main.c: 691: PWMD23H = 0;
   884  03E5  1683               	bsf	3,5	;RP0=1, select bank1
   885  03E6  019E               	clrf	30	;volatile
   886                           
   887                           ;main.c: 692: PWMD3L = maxDuty;
   888  03E7  1283               	bcf	3,5	;RP0=0, select bank0
   889  03E8  0843               	movf	_maxDuty,w
   890  03E9  1683               	bsf	3,5	;RP0=1, select bank1
   891  03EA  009C               	movwf	28	;volatile
   892                           
   893                           ;main.c: 695: }
   894  03EB  0008               	return
   895  03EC                     l2736:	
   896                           
   897                           ;main.c: 696: else
   898                           ;main.c: 697: {
   899                           ;main.c: 698: pwmStop();
   900  03EC  25CA               	fcall	_pwmStop
   901                           
   902                           ;main.c: 699: count900s = 0;
   903  03ED  01A0               	clrf	_count900s
   904  03EE  01A1               	clrf	_count900s+1
   905  03EF  0008               	return
   906  03F0                     __end_of_workCtr:	
   907                           
   908                           	psect	text2
   909  05B2                     __ptext2:	
   910 ;; *************** function _pwmInit *****************
   911 ;; Defined at:
   912 ;;		line 953 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0
   921 ;; Tracked objects:
   922 ;;		On entry : 100/0
   923 ;;		On exit  : 100/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1
   926 ;;      Params:         0       0       0
   927 ;;      Locals:         0       0       0
   928 ;;      Temps:          0       0       0
   929 ;;      Totals:         0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_workCtr
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function _pwmInit
   942  05B2                     _pwmInit:	
   943                           
   944                           ;main.c: 955: if(motorPwmFlag > 0)
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
   948  05B2  0830               	movf	_motorPwmFlag,w
   949  05B3  1D03               	btfss	3,2
   950  05B4  0008               	return
   951                           
   952                           ;main.c: 957: motorPwmFlag = 1;
   953  05B5  01B0               	clrf	_motorPwmFlag
   954  05B6  0AB0               	incf	_motorPwmFlag,f
   955                           
   956                           ;main.c: 958: PWMCON1 = 0B00000000;
   957  05B7  0196               	clrf	22	;volatile
   958                           
   959                           ;main.c: 959: PWMTH = 0X00;
   960  05B8  0198               	clrf	24	;volatile
   961                           
   962                           ;main.c: 960: PWMTL = 200;
   963  05B9  30C8               	movlw	200
   964  05BA  0097               	movwf	23	;volatile
   965                           
   966                           ;main.c: 963: PWMD23H = 0;
   967  05BB  1683               	bsf	3,5	;RP0=1, select bank1
   968  05BC  019E               	clrf	30	;volatile
   969                           
   970                           ;main.c: 964: PWMD3L = 80;
   971  05BD  3050               	movlw	80
   972  05BE  009C               	movwf	28	;volatile
   973                           
   974                           ;main.c: 965: PWM23DT = 0X00;
   975  05BF  019D               	clrf	29	;volatile
   976                           
   977                           ;main.c: 967: PWMCON0 = 0X48;
   978  05C0  3048               	movlw	72
   979                           
   980                           ;main.c: 968: PWMCON2 =0X00;
   981  05C1  2D9D               	ljmp	PL10	;call to abstracted procedure
   982  05C2                     __end_of_pwmInit:	
   983                           
   984                           	psect	text3
   985  0335                     __ptext3:	
   986 ;; *************** function _ledCtr *****************
   987 ;; Defined at:
   988 ;;		line 376 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 100/0
   999 ;;		On exit  : 100/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1
  1002 ;;      Params:         0       0       0
  1003 ;;      Locals:         0       0       0
  1004 ;;      Temps:          0       0       0
  1005 ;;      Totals:         0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    3
  1009 ;; This function calls:
  1010 ;;		___lbdiv
  1011 ;;		___lbmod
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           
  1018                           ;psect for function _ledCtr
  1019  0335                     _ledCtr:	
  1020                           
  1021                           ;main.c: 378: if(firstTime > 0)
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1025  0335  0863               	movf	_firstTime,w
  1026  0336  1903               	btfsc	3,2
  1027  0337  2B40               	goto	l3124
  1028                           
  1029                           ;main.c: 379: {
  1030                           ;main.c: 380: firstTime--;
  1031  0338  03E3               	decf	_firstTime,f
  1032                           
  1033                           ;main.c: 381: if(prePwStep < pwStep)
  1034  0339  0840               	movf	_pwStep,w
  1035  033A  023F               	subwf	_prePwStep,w
  1036  033B  1803               	skipnc
  1037  033C  0008               	return
  1038                           
  1039                           ;main.c: 382: {
  1040                           ;main.c: 383: prePwStep = pwStep;
  1041  033D  0840               	movf	_pwStep,w
  1042  033E  00BF               	movwf	_prePwStep
  1043  033F  0008               	return
  1044  0340                     l3124:	
  1045                           
  1046                           ;main.c: 386: else if(overWorkTime > 0)
  1047  0340  0834               	movf	_overWorkTime,w
  1048  0341  1903               	btfsc	3,2
  1049  0342  2B4B               	goto	l3132
  1050  0343  3001               	movlw	low (_numArray-__stringbase)
  1051                           
  1052                           ;main.c: 387: {
  1053                           ;main.c: 388: overWorkTime--;
  1054  0344  03B4               	decf	_overWorkTime,f
  1055                           
  1056                           ;main.c: 389: shiweiNum = numArray[0];
  1057  0345  0084               	movwf	4
  1058  0346  257C               	fcall	stringdir
  1059  0347  00E2               	movwf	_shiweiNum
  1060                           
  1061                           ;main.c: 390: geweiNum = 0x71;
  1062  0348  3071               	movlw	113
  1063  0349  00E1               	movwf	_geweiNum
  1064                           
  1065                           ;main.c: 391: }
  1066  034A  0008               	return
  1067  034B                     l3132:	
  1068                           
  1069                           ;main.c: 392: else if(showBatTime > 0)
  1070  034B  083D               	movf	_showBatTime,w
  1071  034C  1903               	btfsc	3,2
  1072  034D  2B5D               	goto	l3140
  1073  034E  300A               	movlw	10
  1074                           
  1075                           ;main.c: 393: {
  1076                           ;main.c: 394: showBatTime--;
  1077  034F  03BD               	decf	_showBatTime,f
  1078                           
  1079                           ;main.c: 395: shiweiNum = numArray[prePwStep/10];
  1080  0350  00F3               	movwf	___lbdiv@divisor
  1081  0351  083F               	movf	_prePwStep,w
  1082  0352  2547               	fcall	___lbdiv
  1083  0353  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1084  0354  0084               	movwf	4
  1085  0355  257C               	fcall	stringdir
  1086                           
  1087                           ;main.c: 396: geweiNum = numArray[prePwStep%10];
  1088  0356  2393               	fcall	PL14	;call to abstracted procedure
  1089  0357  252B               	fcall	___lbmod
  1090  0358  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1091  0359  0084               	movwf	4
  1092  035A  257C               	fcall	stringdir
  1093  035B  00E1               	movwf	_geweiNum
  1094                           
  1095                           ;main.c: 397: }
  1096  035C  0008               	return
  1097  035D                     l3140:	
  1098                           
  1099                           ;main.c: 398: else if(workStep > 0)
  1100  035D  0879               	movf	_workStep,w
  1101  035E  1903               	btfsc	3,2
  1102  035F  2B78               	goto	l3152
  1103                           
  1104                           ;main.c: 399: {
  1105                           ;main.c: 401: if(workStep < 10)
  1106  0360  300A               	movlw	10
  1107  0361  0279               	subwf	_workStep,w
  1108  0362  1803               	skipnc
  1109  0363  2B6E               	goto	l3148
  1110                           
  1111                           ;main.c: 402: {
  1112                           ;main.c: 403: shiweiNum = numArray[0];
  1113  0364  3001               	movlw	low (_numArray-__stringbase)
  1114  0365  0084               	movwf	4
  1115  0366  257C               	fcall	stringdir
  1116  0367  00E2               	movwf	_shiweiNum
  1117                           
  1118                           ;main.c: 404: geweiNum = numArray[workStep];
  1119  0368  0879               	movf	_workStep,w
  1120  0369  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1121  036A  0084               	movwf	4
  1122  036B  257C               	fcall	stringdir
  1123  036C  00E1               	movwf	_geweiNum
  1124                           
  1125                           ;main.c: 405: }
  1126  036D  0008               	return
  1127  036E                     l3148:	
  1128                           
  1129                           ;main.c: 406: else
  1130                           ;main.c: 407: {
  1131                           ;main.c: 408: shiweiNum = numArray[1];
  1132  036E  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
  1133  036F  0084               	movwf	4
  1134  0370  257C               	fcall	stringdir
  1135  0371  00E2               	movwf	_shiweiNum
  1136                           
  1137                           ;main.c: 409: geweiNum = numArray[workStep - 10];
  1138  0372  0879               	movf	_workStep,w
  1139  0373  3EF7               	addlw	low (((_numArray-__stringbase)| (0+32768)+246))
  1140  0374  0084               	movwf	4
  1141  0375  257C               	fcall	stringdir
  1142  0376  00E1               	movwf	_geweiNum
  1143  0377  0008               	return
  1144  0378                     l3152:	
  1145                           
  1146                           ;main.c: 413: else if(chrgFullFlag || (chrgFlag && count1s < 50))
  1147  0378  084B               	movf	_chrgFullFlag,w
  1148  0379  1D03               	btfss	3,2
  1149  037A  2B82               	goto	l3158
  1150  037B  087A               	movf	_chrgFlag,w
  1151  037C  1903               	btfsc	3,2
  1152  037D  2B90               	goto	l3160
  1153  037E  3032               	movlw	50
  1154  037F  024D               	subwf	_count1s,w
  1155  0380  1803               	skipnc
  1156  0381  2B90               	goto	l3160
  1157  0382                     l3158:	
  1158                           
  1159                           ;main.c: 414: {
  1160                           ;main.c: 415: shiweiNum = numArray[prePwStep/10];
  1161  0382  300A               	movlw	10
  1162  0383  00F3               	movwf	___lbdiv@divisor
  1163  0384  083F               	movf	_prePwStep,w
  1164  0385  2547               	fcall	___lbdiv
  1165  0386  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1166  0387  0084               	movwf	4
  1167  0388  257C               	fcall	stringdir
  1168                           
  1169                           ;main.c: 416: geweiNum = numArray[prePwStep%10];
  1170  0389  2393               	fcall	PL14	;call to abstracted procedure
  1171  038A  252B               	fcall	___lbmod
  1172  038B  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1173  038C  0084               	movwf	4
  1174  038D  257C               	fcall	stringdir
  1175  038E  00E1               	movwf	_geweiNum
  1176                           
  1177                           ;main.c: 417: }
  1178  038F  0008               	return
  1179  0390                     l3160:	
  1180                           
  1181                           ;main.c: 418: else
  1182                           ;main.c: 419: {
  1183                           ;main.c: 420: shiweiNum = 0;
  1184  0390  01E2               	clrf	_shiweiNum
  1185                           
  1186                           ;main.c: 421: geweiNum = 0;
  1187  0391  01E1               	clrf	_geweiNum
  1188  0392  0008               	return
  1189  0393                     __end_of_ledCtr:	
  1190  0393                     PL14:	
  1191  0393  00E2               	movwf	_shiweiNum
  1192  0394  300A               	movlw	10
  1193  0395  00F3               	movwf	___lbmod@divisor
  1194  0396  083F               	movf	_prePwStep,w
  1195  0397  0008               	return
  1196  0398                     __end_ofPL14:	
  1197                           
  1198                           	psect	text4
  1199  052B                     __ptext4:	
  1200 ;; *************** function ___lbmod *****************
  1201 ;; Defined at:
  1202 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  dividend        1    wreg     unsigned char 
  1205 ;;  divisor         1    3[COMMON] unsigned char 
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  dividend        1    0[BANK0 ] unsigned char 
  1208 ;;  rem             1    2[BANK0 ] unsigned char 
  1209 ;;  counter         1    1[BANK0 ] unsigned char 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      unsigned char 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2, status,0
  1214 ;; Tracked objects:
  1215 ;;		On entry : 100/0
  1216 ;;		On exit  : 100/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMMON   BANK0   BANK1
  1219 ;;      Params:         1       0       0
  1220 ;;      Locals:         0       3       0
  1221 ;;      Temps:          1       0       0
  1222 ;;      Totals:         2       3       0
  1223 ;;Total ram usage:        5 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    2
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_ledCtr
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           
  1234                           ;psect for function ___lbmod
  1235  052B                     ___lbmod:	
  1236                           
  1237                           ;incstack = 0
  1238                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1239                           ;___lbmod@dividend stored from wreg
  1240  052B  00D0               	movwf	___lbmod@dividend
  1241  052C  3008               	movlw	8
  1242  052D  00D1               	movwf	___lbmod@counter
  1243  052E  01D2               	clrf	___lbmod@rem
  1244  052F                     l3010:	
  1245  052F  0850               	movf	___lbmod@dividend,w
  1246  0530  00F4               	movwf	??___lbmod
  1247  0531  3007               	movlw	7
  1248  0532  1003               	clrc
  1249  0533                     L2:	
  1250  0533  0CF4               	rrf	??___lbmod,f
  1251  0534  3EFF               	addlw	-1
  1252  0535  1003               	clrc
  1253  0536  1D03               	skipz
  1254  0537  2D33               	goto	L2
  1255  0538  0D52               	rlf	___lbmod@rem,w
  1256  0539  0474               	iorwf	??___lbmod,w
  1257  053A  00D2               	movwf	___lbmod@rem
  1258  053B  1003               	clrc
  1259  053C  0DD0               	rlf	___lbmod@dividend,f
  1260  053D  0873               	movf	___lbmod@divisor,w
  1261  053E  0252               	subwf	___lbmod@rem,w
  1262  053F  1C03               	skipc
  1263  0540  2D43               	goto	l3018
  1264  0541  0873               	movf	___lbmod@divisor,w
  1265  0542  02D2               	subwf	___lbmod@rem,f
  1266  0543                     l3018:	
  1267  0543  0BD1               	decfsz	___lbmod@counter,f
  1268  0544  2D2F               	goto	l3010
  1269  0545  0852               	movf	___lbmod@rem,w
  1270  0546  0008               	return
  1271  0547                     __end_of___lbmod:	
  1272                           
  1273                           	psect	text5
  1274  0547                     __ptext5:	
  1275 ;; *************** function ___lbdiv *****************
  1276 ;; Defined at:
  1277 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  dividend        1    wreg     unsigned char 
  1280 ;;  divisor         1    3[COMMON] unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  dividend        1    4[COMMON] unsigned char 
  1283 ;;  quotient        1    6[COMMON] unsigned char 
  1284 ;;  counter         1    5[COMMON] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      unsigned char 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0
  1289 ;; Tracked objects:
  1290 ;;		On entry : 100/0
  1291 ;;		On exit  : 100/0
  1292 ;;		Unchanged: 100/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1
  1294 ;;      Params:         1       0       0
  1295 ;;      Locals:         3       0       0
  1296 ;;      Temps:          0       0       0
  1297 ;;      Totals:         4       0       0
  1298 ;;Total ram usage:        4 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_ledCtr
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           
  1309                           ;psect for function ___lbdiv
  1310  0547                     ___lbdiv:	
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1314                           ;___lbdiv@dividend stored from wreg
  1315  0547  00F4               	movwf	___lbdiv@dividend
  1316  0548  01F6               	clrf	___lbdiv@quotient
  1317  0549  0873               	movf	___lbdiv@divisor,w
  1318  054A  1903               	btfsc	3,2
  1319  054B  2D60               	goto	l2332
  1320  054C  01F5               	clrf	___lbdiv@counter
  1321  054D                     l2318:	
  1322  054D  0AF5               	incf	___lbdiv@counter,f
  1323  054E  1BF3               	btfsc	___lbdiv@divisor,7
  1324  054F  2D53               	goto	l1190
  1325  0550  1003               	clrc
  1326  0551  0DF3               	rlf	___lbdiv@divisor,f
  1327  0552  2D4D               	goto	l2318
  1328  0553                     l1190:	
  1329  0553  1003               	clrc
  1330  0554  0DF6               	rlf	___lbdiv@quotient,f
  1331  0555  0873               	movf	___lbdiv@divisor,w
  1332  0556  0274               	subwf	___lbdiv@dividend,w
  1333  0557  1C03               	skipc
  1334  0558  2D5D               	goto	L3
  1335  0559  0873               	movf	___lbdiv@divisor,w
  1336  055A  02F4               	subwf	___lbdiv@dividend,f
  1337  055B  1476               	bsf	___lbdiv@quotient,0
  1338  055C  1003               	clrc
  1339  055D                     L3:	
  1340  055D  0CF3               	rrf	___lbdiv@divisor,f
  1341  055E  0BF5               	decfsz	___lbdiv@counter,f
  1342  055F  2D53               	goto	l1190
  1343  0560                     l2332:	
  1344  0560  0876               	movf	___lbdiv@quotient,w
  1345  0561  0008               	return
  1346  0562                     __end_of___lbdiv:	
  1347                           
  1348                           	psect	text6
  1349  04EB                     __ptext6:	
  1350 ;; *************** function _keyCtr *****************
  1351 ;; Defined at:
  1352 ;;		line 616 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  kclick          1    4[COMMON] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0, pclath, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 100/0
  1363 ;;		On exit  : 100/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1
  1366 ;;      Params:         0       0       0
  1367 ;;      Locals:         1       0       0
  1368 ;;      Temps:          0       0       0
  1369 ;;      Totals:         1       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    3
  1373 ;; This function calls:
  1374 ;;		_keyRead
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           
  1381                           ;psect for function _keyCtr
  1382  04EB                     _keyCtr:	
  1383                           
  1384                           ;main.c: 618: char kclick = keyRead(0x04 & (~PORTB));
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1388  04EB  0906               	comf	6,w	;volatile
  1389  04EC  3904               	andlw	4
  1390  04ED  24C1               	fcall	_keyRead
  1391  04EE  00F4               	movwf	keyCtr@kclick
  1392                           
  1393                           ;main.c: 619: if(kclick == 1 && workStep > 0)
  1394  04EF  0B74               	decfsz	keyCtr@kclick,w
  1395  04F0  2CFC               	goto	l2662
  1396  04F1  0879               	movf	_workStep,w
  1397  04F2  1903               	btfsc	3,2
  1398  04F3  2CFC               	goto	l2662
  1399                           
  1400                           ;main.c: 620: {
  1401                           ;main.c: 622: if(++workStep > 12)
  1402  04F4  300D               	movlw	13
  1403  04F5  0AF9               	incf	_workStep,f
  1404  04F6  0279               	subwf	_workStep,w
  1405  04F7  1C03               	skipc
  1406  04F8  0008               	return
  1407                           
  1408                           ;main.c: 623: {
  1409                           ;main.c: 624: workStep = 1;
  1410  04F9  01F9               	clrf	_workStep
  1411  04FA  0AF9               	incf	_workStep,f
  1412  04FB  0008               	return
  1413  04FC                     l2662:	
  1414                           
  1415                           ;main.c: 629: else if(kclick == 2)
  1416  04FC  3002               	movlw	2
  1417  04FD  0674               	xorwf	keyCtr@kclick,w
  1418  04FE  1D03               	btfss	3,2
  1419  04FF  0008               	return
  1420                           
  1421                           ;main.c: 630: {
  1422                           ;main.c: 631: if(workStep > 0)
  1423  0500  0879               	movf	_workStep,w
  1424  0501  1903               	btfsc	3,2
  1425  0502  2D07               	goto	l816
  1426  0503  30C8               	movlw	200
  1427                           
  1428                           ;main.c: 632: {
  1429                           ;main.c: 633: workStep = 0;
  1430  0504  01F9               	clrf	_workStep
  1431                           
  1432                           ;main.c: 634: overWorkTime = 200;
  1433  0505  00B4               	movwf	_overWorkTime
  1434                           
  1435                           ;main.c: 635: }
  1436  0506  0008               	return
  1437  0507                     l816:	
  1438  0507  301E               	movlw	30
  1439                           
  1440                           ;main.c: 636: else
  1441                           ;main.c: 637: {
  1442                           ;main.c: 638: workStep = 1;
  1443  0508  01F9               	clrf	_workStep
  1444  0509  0AF9               	incf	_workStep,f
  1445                           
  1446                           ;main.c: 639: startTime = 30;
  1447  050A  00C2               	movwf	_startTime
  1448                           
  1449                           ;main.c: 640: showBatTime = 0;
  1450  050B  01BD               	clrf	_showBatTime
  1451                           
  1452                           ;main.c: 641: overWorkTime = 0;
  1453  050C  01B4               	clrf	_overWorkTime
  1454  050D  0008               	return
  1455  050E                     __end_of_keyCtr:	
  1456                           
  1457                           	psect	text7
  1458  04C1                     __ptext7:	
  1459 ;; *************** function _keyRead *****************
  1460 ;; Defined at:
  1461 ;;		line 574 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  keyStatus       1    wreg     unsigned char 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  keyStatus       1    3[COMMON] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      unsigned char 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 100/0
  1472 ;;		On exit  : 100/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1
  1475 ;;      Params:         0       0       0
  1476 ;;      Locals:         1       0       0
  1477 ;;      Temps:          0       0       0
  1478 ;;      Totals:         1       0       0
  1479 ;;Total ram usage:        1 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    2
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_keyCtr
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _keyRead
  1491  04C1                     _keyRead:	
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1495                           ;keyRead@keyStatus stored from wreg
  1496  04C1  00F3               	movwf	keyRead@keyStatus
  1497                           
  1498                           ;main.c: 576: if(keyStatus)
  1499  04C2  0873               	movf	keyRead@keyStatus,w
  1500  04C3  1903               	btfsc	3,2
  1501  04C4  2CDE               	goto	l2202
  1502                           
  1503                           ;main.c: 577: {
  1504                           ;main.c: 578: keyCount++;
  1505  04C5  0AC5               	incf	_keyCount,f
  1506                           
  1507                           ;main.c: 579: if(overWorkTime > 0)
  1508  04C6  0834               	movf	_overWorkTime,w
  1509  04C7  1903               	btfsc	3,2
  1510  04C8  2CCC               	goto	l2188
  1511                           
  1512                           ;main.c: 580: {
  1513                           ;main.c: 581: overWorkTime = 200;
  1514  04C9  30C8               	movlw	200
  1515  04CA  00B4               	movwf	_overWorkTime
  1516                           
  1517                           ;main.c: 582: }
  1518  04CB  2CD1               	goto	l801
  1519  04CC                     l2188:	
  1520                           
  1521                           ;main.c: 583: else if(workStep == 0)
  1522  04CC  0879               	movf	_workStep,w
  1523  04CD  1D03               	btfss	3,2
  1524  04CE  2CD1               	goto	l801
  1525                           
  1526                           ;main.c: 584: {
  1527                           ;main.c: 585: showBatTime = 200;
  1528  04CF  30C8               	movlw	200
  1529  04D0  00BD               	movwf	_showBatTime
  1530  04D1                     l801:	
  1531                           
  1532                           ;main.c: 586: }
  1533                           ;main.c: 587: if(keyCount >= 100)
  1534  04D1  3064               	movlw	100
  1535  04D2  0245               	subwf	_keyCount,w
  1536  04D3  1C03               	skipc
  1537  04D4  3400               	retlw	0
  1538                           
  1539                           ;main.c: 588: {
  1540                           ;main.c: 589: keyCount = 100;
  1541  04D5  3064               	movlw	100
  1542  04D6  00C5               	movwf	_keyCount
  1543                           
  1544                           ;main.c: 590: if(!longPressFlag)
  1545  04D7  0844               	movf	_longPressFlag,w
  1546  04D8  1D03               	btfss	3,2
  1547  04D9  3400               	retlw	0
  1548  04DA  3002               	movlw	2
  1549                           
  1550                           ;main.c: 591: {
  1551                           ;main.c: 592: longPressFlag = 1;
  1552  04DB  01C4               	clrf	_longPressFlag
  1553  04DC  0AC4               	incf	_longPressFlag,f
  1554                           
  1555                           ;main.c: 593: return 2;
  1556  04DD  0008               	return
  1557  04DE                     l2202:	
  1558                           
  1559                           ;main.c: 597: else
  1560                           ;main.c: 598: {
  1561                           ;main.c: 599: if(keyCount >= 100)
  1562  04DE  3064               	movlw	100
  1563  04DF  0245               	subwf	_keyCount,w
  1564  04E0  1C03               	skipc
  1565  04E1  2CE5               	goto	l2212
  1566                           
  1567                           ;main.c: 600: {
  1568                           ;main.c: 601: keyCount = 0;
  1569  04E2  01C5               	clrf	_keyCount
  1570                           
  1571                           ;main.c: 602: longPressFlag = 0;
  1572  04E3  01C4               	clrf	_longPressFlag
  1573                           
  1574                           ;main.c: 603: return 0;
  1575  04E4  3400               	retlw	0
  1576  04E5                     l2212:	
  1577                           
  1578                           ;main.c: 605: else if(keyCount >= 6)
  1579  04E5  3006               	movlw	6
  1580  04E6  0245               	subwf	_keyCount,w
  1581                           
  1582                           ;main.c: 606: {
  1583                           ;main.c: 607: keyCount = 0;
  1584  04E7  01C5               	clrf	_keyCount
  1585  04E8  1803               	btfsc	3,0
  1586                           
  1587                           ;main.c: 608: return 1;
  1588  04E9  3401               	retlw	1
  1589  04EA  3400               	retlw	0
  1590  04EB                     __end_of_keyRead:	
  1591                           ;main.c: 609: }
  1592                           ;main.c: 610: keyCount = 0;
  1593                           
  1594                           
  1595                           	psect	text8
  1596  0018                     __ptext8:	
  1597 ;; *************** function _chrgCtr *****************
  1598 ;; Defined at:
  1599 ;;		line 427 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 100/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1
  1613 ;;      Params:         0       0       0
  1614 ;;      Locals:         0       0       0
  1615 ;;      Temps:          2       0       0
  1616 ;;      Totals:         2       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_chrgPwmInit
  1622 ;;		_chrgPwmStop
  1623 ;;		_pwmStop
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _chrgCtr
  1631  0018                     _chrgCtr:	
  1632                           
  1633                           ;main.c: 429: if(PORTA & 0x20)
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1637  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1638  0019  1E86               	btfss	6,5	;volatile
  1639  001A  28DE               	goto	l2574
  1640                           
  1641                           ;main.c: 430: {
  1642                           ;main.c: 431: if(chrgFlag == 0)
  1643  001B  087A               	movf	_chrgFlag,w
  1644  001C  1D03               	btfss	3,2
  1645  001D  2823               	goto	l2466
  1646                           
  1647                           ;main.c: 432: {
  1648                           ;main.c: 433: chrgFlag = 1;
  1649  001E  01FA               	clrf	_chrgFlag
  1650  001F  0AFA               	incf	_chrgFlag,f
  1651                           
  1652                           ;main.c: 434: chrgMaxDuty = 0;
  1653  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0021  01B6               	clrf	_chrgMaxDuty
  1655                           
  1656                           ;main.c: 435: chrgPwmStop();
  1657  0022  25DA               	fcall	_chrgPwmStop
  1658  0023                     l2466:	
  1659                           
  1660                           ;main.c: 436: }
  1661                           ;main.c: 437: workStep = 0;
  1662  0023  01F9               	clrf	_workStep
  1663                           
  1664                           ;main.c: 438: pwmStop();
  1665  0024  25CA               	fcall	_pwmStop
  1666                           
  1667                           ;main.c: 439: lowBatFlag = 0;
  1668  0025  01B3               	clrf	_lowBatFlag
  1669                           
  1670                           ;main.c: 440: if(prePwStep < pwStep)
  1671  0026  0840               	movf	_pwStep,w
  1672  0027  023F               	subwf	_prePwStep,w
  1673  0028  1803               	skipnc
  1674  0029  2833               	goto	l2478
  1675                           
  1676                           ;main.c: 441: {
  1677                           ;main.c: 442: if(++count50s > 3000)
  1678  002A  20FC               	fcall	PL8	;call to abstracted procedure
  1679  002B  1903               	skipnz
  1680  002C  0226               	subwf	_count50s,w
  1681  002D  1C03               	skipc
  1682  002E  2835               	goto	l2480
  1683                           
  1684                           ;main.c: 443: {
  1685                           ;main.c: 444: count50s = 0;
  1686  002F  01A6               	clrf	_count50s
  1687  0030  01A7               	clrf	_count50s+1
  1688                           
  1689                           ;main.c: 445: prePwStep++;
  1690  0031  0ABF               	incf	_prePwStep,f
  1691  0032  2835               	goto	l2480
  1692  0033                     l2478:	
  1693                           
  1694                           ;main.c: 448: else
  1695                           ;main.c: 449: {
  1696                           ;main.c: 450: count50s = 0;
  1697  0033  01A6               	clrf	_count50s
  1698  0034  01A7               	clrf	_count50s+1
  1699  0035                     l2480:	
  1700                           
  1701                           ;main.c: 451: }
  1702                           ;main.c: 452: if(protectFlag)
  1703  0035  0848               	movf	_protectFlag,w
  1704  0036  1903               	btfsc	3,2
  1705  0037  284A               	goto	l2496
  1706                           
  1707                           ;main.c: 453: {
  1708                           ;main.c: 454: chrgPwmStop();
  1709  0038  25DA               	fcall	_chrgPwmStop
  1710                           
  1711                           ;main.c: 455: if(prePwStep < 99 && protectFlag == 1)
  1712  0039  3063               	movlw	99
  1713  003A  023F               	subwf	_prePwStep,w
  1714  003B  1803               	skipnc
  1715  003C  2848               	goto	l2492
  1716  003D  0B48               	decfsz	_protectFlag,w
  1717  003E  2848               	goto	l2492
  1718                           
  1719                           ;main.c: 456: {
  1720                           ;main.c: 457: if(++reChrgCount > 250)
  1721  003F  30FB               	movlw	251
  1722  0040  0ABE               	incf	_reChrgCount,f
  1723  0041  023E               	subwf	_reChrgCount,w
  1724  0042  1C03               	skipc
  1725  0043  0008               	return
  1726                           
  1727                           ;main.c: 458: {
  1728                           ;main.c: 459: reChrgCount = 0;
  1729  0044  01BE               	clrf	_reChrgCount
  1730                           
  1731                           ;main.c: 460: chrgFullFlag = 0;
  1732  0045  01CB               	clrf	_chrgFullFlag
  1733                           
  1734                           ;main.c: 461: protectFlag = 0;
  1735  0046  01C8               	clrf	_protectFlag
  1736  0047  0008               	return
  1737  0048                     l2492:	
  1738                           
  1739                           ;main.c: 464: else
  1740                           ;main.c: 465: {
  1741                           ;main.c: 466: reChrgCount = 0;
  1742  0048  01BE               	clrf	_reChrgCount
  1743  0049  0008               	return
  1744  004A                     l2496:	
  1745                           
  1746                           ;main.c: 469: }
  1747                           ;main.c: 470: if(batADValue < 1118)
  1748  004A  3004               	movlw	4
  1749  004B  0229               	subwf	_batADValue+1,w
  1750  004C  305E               	movlw	94
  1751  004D  1903               	skipnz
  1752  004E  0228               	subwf	_batADValue,w
  1753  004F  1803               	skipnc
  1754  0050  2854               	goto	l2502
  1755  0051  300F               	movlw	15
  1756                           
  1757                           ;main.c: 471: {
  1758                           ;main.c: 472: chrgMode = 0;
  1759  0052  01BC               	clrf	_chrgMode
  1760                           
  1761                           ;main.c: 473: chrgMaxAD = 15;
  1762  0053  286D               	goto	L5
  1763  0054                     l2502:	
  1764                           ;main.c: 474: }
  1765                           
  1766                           
  1767                           ;main.c: 475: else if(batADValue < 1530)
  1768  0054  3005               	movlw	5
  1769  0055  0229               	subwf	_batADValue+1,w
  1770  0056  30FA               	movlw	250
  1771  0057  1903               	skipnz
  1772  0058  0228               	subwf	_batADValue,w
  1773  0059  1803               	skipnc
  1774  005A  2861               	goto	l2510
  1775  005B  304D               	movlw	77
  1776                           
  1777                           ;main.c: 476: {
  1778                           ;main.c: 477: chrgMode = 1;
  1779  005C  01BC               	clrf	_chrgMode
  1780  005D  0ABC               	incf	_chrgMode,f
  1781                           
  1782                           ;main.c: 478: chrgMaxAD = 77;
  1783  005E  00BB               	movwf	_chrgMaxAD
  1784                           
  1785                           ;main.c: 479: lockCount = 0;
  1786  005F  01BA               	clrf	_lockCount
  1787                           
  1788                           ;main.c: 480: }
  1789  0060  286E               	goto	l2520
  1790  0061                     l2510:	
  1791                           
  1792                           ;main.c: 481: else if(count1s == 0)
  1793  0061  084D               	movf	_count1s,w
  1794  0062  1D03               	btfss	3,2
  1795  0063  286E               	goto	l2520
  1796                           
  1797                           ;main.c: 482: {
  1798                           ;main.c: 483: if(++lockCount > 200)
  1799  0064  30C9               	movlw	201
  1800  0065  0ABA               	incf	_lockCount,f
  1801  0066  023A               	subwf	_lockCount,w
  1802  0067  1C03               	skipc
  1803  0068  286C               	goto	l2518
  1804  0069  3002               	movlw	2
  1805                           
  1806                           ;main.c: 484: {
  1807                           ;main.c: 485: lockCount = 0;
  1808  006A  01BA               	clrf	_lockCount
  1809                           
  1810                           ;main.c: 486: chrgMode = 2;
  1811  006B  00BC               	movwf	_chrgMode
  1812  006C                     l2518:	
  1813                           
  1814                           ;main.c: 487: }
  1815                           ;main.c: 489: chrgMaxAD = 77;
  1816  006C  304D               	movlw	77
  1817  006D                     L5:	
  1818  006D  00BB               	movwf	_chrgMaxAD
  1819  006E                     l2520:	
  1820                           
  1821                           ;main.c: 490: }
  1822                           ;main.c: 491: if(chrgMode == 2 && outADValue < 8)
  1823  006E  3002               	movlw	2
  1824  006F  063C               	xorwf	_chrgMode,w
  1825  0070  1D03               	btfss	3,2
  1826  0071  2888               	goto	l2530
  1827  0072  3000               	movlw	0
  1828  0073  022B               	subwf	_outADValue+1,w
  1829  0074  3008               	movlw	8
  1830  0075  1903               	skipnz
  1831  0076  022A               	subwf	_outADValue,w
  1832  0077  1803               	skipnc
  1833  0078  2888               	goto	l2530
  1834                           
  1835                           ;main.c: 492: {
  1836                           ;main.c: 493: if(++fullCount >= 200)
  1837  0079  0AA4               	incf	_fullCount,f
  1838  007A  1903               	skipnz
  1839  007B  0AA5               	incf	_fullCount+1,f
  1840  007C  3000               	movlw	0
  1841  007D  0225               	subwf	_fullCount+1,w
  1842  007E  30C8               	movlw	200
  1843  007F  1903               	skipnz
  1844  0080  0224               	subwf	_fullCount,w
  1845  0081  1C03               	skipc
  1846  0082  288A               	goto	l2532
  1847                           
  1848                           ;main.c: 494: {
  1849                           ;main.c: 495: fullCount = 0;
  1850  0083  01A4               	clrf	_fullCount
  1851  0084  01A5               	clrf	_fullCount+1
  1852                           
  1853                           ;main.c: 496: chrgFullFlag = 1;
  1854  0085  01CB               	clrf	_chrgFullFlag
  1855  0086  0ACB               	incf	_chrgFullFlag,f
  1856  0087  288A               	goto	l2532
  1857  0088                     l2530:	
  1858                           
  1859                           ;main.c: 499: else
  1860                           ;main.c: 500: {
  1861                           ;main.c: 501: fullCount = 0;
  1862  0088  01A4               	clrf	_fullCount
  1863  0089  01A5               	clrf	_fullCount+1
  1864  008A                     l2532:	
  1865                           
  1866                           ;main.c: 502: }
  1867                           ;main.c: 503: if(chrgFullFlag)
  1868  008A  084B               	movf	_chrgFullFlag,w
  1869  008B  1903               	btfsc	3,2
  1870  008C  288E               	goto	l2536
  1871                           
  1872                           ;main.c: 504: {
  1873                           ;main.c: 505: chrgPwmStop();
  1874  008D  2DDA               	ljmp	l2152
  1875  008E                     l2536:	
  1876                           ;main.c: 506: }
  1877                           
  1878                           
  1879                           ;main.c: 507: else
  1880                           ;main.c: 508: {
  1881                           ;main.c: 509: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  1882  008E  3006               	movlw	6
  1883  008F  0229               	subwf	_batADValue+1,w
  1884  0090  300F               	movlw	15
  1885  0091  1903               	skipnz
  1886  0092  0228               	subwf	_batADValue,w
  1887  0093  1803               	skipnc
  1888  0094  28A4               	goto	l2540
  1889  0095  083B               	movf	_chrgMaxAD,w
  1890  0096  3E02               	addlw	2
  1891  0097  00F3               	movwf	??_chrgCtr
  1892  0098  3000               	movlw	0
  1893  0099  1803               	skipnc
  1894  009A  3001               	movlw	1
  1895  009B  00F4               	movwf	??_chrgCtr+1
  1896  009C  082B               	movf	_outADValue+1,w
  1897  009D  0274               	subwf	??_chrgCtr+1,w
  1898  009E  1D03               	skipz
  1899  009F  28A2               	goto	u2305
  1900  00A0  082A               	movf	_outADValue,w
  1901  00A1  0273               	subwf	??_chrgCtr,w
  1902  00A2                     u2305:	
  1903  00A2  1803               	skipnc
  1904  00A3  28B3               	goto	l2552
  1905  00A4                     l2540:	
  1906                           
  1907                           ;main.c: 510: {
  1908                           ;main.c: 511: if(++subTime > chrgWaitTime)
  1909  00A4  0AB8               	incf	_subTime,f
  1910  00A5  0838               	movf	_subTime,w
  1911  00A6  0237               	subwf	_chrgWaitTime,w
  1912  00A7  1803               	skipnc
  1913  00A8  28B1               	goto	l2550
  1914                           
  1915                           ;main.c: 512: {
  1916                           ;main.c: 513: if(chrgMaxDuty > 1)
  1917  00A9  3002               	movlw	2
  1918  00AA  0236               	subwf	_chrgMaxDuty,w
  1919  00AB  1C03               	skipc
  1920  00AC  28AE               	goto	l2546
  1921                           
  1922                           ;main.c: 514: {
  1923                           ;main.c: 515: chrgMaxDuty--;
  1924  00AD  03B6               	decf	_chrgMaxDuty,f
  1925  00AE                     l2546:	
  1926  00AE  30FA               	movlw	250
  1927                           
  1928                           ;main.c: 516: }
  1929                           ;main.c: 517: subTime = 0;
  1930  00AF  01B8               	clrf	_subTime
  1931                           
  1932                           ;main.c: 518: chrgWaitTime = 250;
  1933  00B0  00B7               	movwf	_chrgWaitTime
  1934  00B1                     l2550:	
  1935                           
  1936                           ;main.c: 519: }
  1937                           ;main.c: 520: addTime = 0;
  1938  00B1  01B9               	clrf	_addTime
  1939                           
  1940                           ;main.c: 521: }
  1941  00B2  28D3               	goto	l2566
  1942  00B3                     l2552:	
  1943                           
  1944                           ;main.c: 522: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1945  00B3  3006               	movlw	6
  1946  00B4  0229               	subwf	_batADValue+1,w
  1947  00B5  300E               	movlw	14
  1948  00B6  1903               	skipnz
  1949  00B7  0228               	subwf	_batADValue,w
  1950  00B8  1803               	skipnc
  1951  00B9  28D3               	goto	l2566
  1952  00BA  083B               	movf	_chrgMaxAD,w
  1953  00BB  3EFC               	addlw	252
  1954  00BC  00F3               	movwf	??_chrgCtr
  1955  00BD  30FF               	movlw	255
  1956  00BE  1803               	skipnc
  1957  00BF  3000               	movlw	0
  1958  00C0  00F4               	movwf	??_chrgCtr+1
  1959  00C1  022B               	subwf	_outADValue+1,w
  1960  00C2  1D03               	skipz
  1961  00C3  28C6               	goto	u2345
  1962  00C4  0873               	movf	??_chrgCtr,w
  1963  00C5  022A               	subwf	_outADValue,w
  1964  00C6                     u2345:	
  1965  00C6  1803               	skipnc
  1966  00C7  28D3               	goto	l2566
  1967                           
  1968                           ;main.c: 523: {
  1969                           ;main.c: 524: if(++addTime > chrgWaitTime)
  1970  00C8  0AB9               	incf	_addTime,f
  1971  00C9  0839               	movf	_addTime,w
  1972  00CA  0237               	subwf	_chrgWaitTime,w
  1973  00CB  1803               	skipnc
  1974  00CC  28D2               	goto	l2564
  1975  00CD  304B               	movlw	75
  1976                           
  1977                           ;main.c: 525: {
  1978                           ;main.c: 526: addTime = 0;
  1979  00CE  01B9               	clrf	_addTime
  1980                           
  1981                           ;main.c: 527: if(chrgMaxDuty < 75)
  1982  00CF  0236               	subwf	_chrgMaxDuty,w
  1983  00D0  1C03               	btfss	3,0
  1984                           
  1985                           ;main.c: 528: {
  1986                           ;main.c: 529: chrgMaxDuty++;
  1987  00D1  0AB6               	incf	_chrgMaxDuty,f
  1988  00D2                     l2564:	
  1989                           
  1990                           ;main.c: 530: }
  1991                           ;main.c: 531: }
  1992                           ;main.c: 532: subTime = 0;
  1993  00D2  01B8               	clrf	_subTime
  1994  00D3                     l2566:	
  1995                           
  1996                           ;main.c: 533: }
  1997                           ;main.c: 536: if(chrgPwmFlag == 0)
  1998  00D3  0831               	movf	_chrgPwmFlag,w
  1999  00D4  1D03               	btfss	3,2
  2000  00D5  28D7               	goto	l2570
  2001                           
  2002                           ;main.c: 537: {
  2003                           ;main.c: 538: chrgPwmInit();
  2004  00D6  2590               	fcall	_chrgPwmInit
  2005  00D7                     l2570:	
  2006                           
  2007                           ;main.c: 539: }
  2008                           ;main.c: 540: PWMD23H = 0X00;
  2009  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2010  00D8  019E               	clrf	30	;volatile
  2011                           
  2012                           ;main.c: 541: PWMD2L = chrgMaxDuty;
  2013  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2014  00DA  0836               	movf	_chrgMaxDuty,w
  2015  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  2016  00DC  009B               	movwf	27	;volatile
  2017  00DD  0008               	return
  2018  00DE                     l2574:	
  2019  00DE  3014               	movlw	20
  2020                           
  2021                           ;main.c: 547: chrgFlag = 0;
  2022  00DF  01FA               	clrf	_chrgFlag
  2023                           
  2024                           ;main.c: 548: chrgFullFlag = 0;
  2025  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  2026  00E1  01CB               	clrf	_chrgFullFlag
  2027                           
  2028                           ;main.c: 549: protectFlag = 0;
  2029  00E2  01C8               	clrf	_protectFlag
  2030                           
  2031                           ;main.c: 550: chrgMode = 0;
  2032  00E3  01BC               	clrf	_chrgMode
  2033                           
  2034                           ;main.c: 551: chrgMaxAD = 0;
  2035  00E4  01BB               	clrf	_chrgMaxAD
  2036                           
  2037                           ;main.c: 552: chrgMaxDuty = 0;
  2038  00E5  01B6               	clrf	_chrgMaxDuty
  2039                           
  2040                           ;main.c: 554: lockLedStep = 0;
  2041  00E6  01BA               	clrf	_lockCount
  2042                           
  2043                           ;main.c: 555: chrgWaitTime = 20;
  2044  00E7  00B7               	movwf	_chrgWaitTime
  2045                           
  2046                           ;main.c: 556: chrgPwmStop();
  2047  00E8  25DA               	fcall	_chrgPwmStop
  2048                           
  2049                           ;main.c: 557: if(prePwStep > 0 && prePwStep > pwStep)
  2050  00E9  083F               	movf	_prePwStep,w
  2051  00EA  1903               	btfsc	3,2
  2052  00EB  28F9               	goto	l2590
  2053  00EC  083F               	movf	_prePwStep,w
  2054  00ED  0240               	subwf	_pwStep,w
  2055  00EE  1803               	skipnc
  2056  00EF  28F9               	goto	l2590
  2057                           
  2058                           ;main.c: 558: {
  2059                           ;main.c: 559: if(++count50s > 3000)
  2060  00F0  20FC               	fcall	PL8	;call to abstracted procedure
  2061  00F1  1903               	skipnz
  2062  00F2  0226               	subwf	_count50s,w
  2063  00F3  1C03               	skipc
  2064  00F4  0008               	return
  2065                           
  2066                           ;main.c: 560: {
  2067                           ;main.c: 561: count50s = 0;
  2068  00F5  01A6               	clrf	_count50s
  2069  00F6  01A7               	clrf	_count50s+1
  2070                           
  2071                           ;main.c: 562: prePwStep--;
  2072  00F7  03BF               	decf	_prePwStep,f
  2073  00F8  0008               	return
  2074  00F9                     l2590:	
  2075                           
  2076                           ;main.c: 565: else
  2077                           ;main.c: 566: {
  2078                           ;main.c: 567: count50s = 0;
  2079  00F9  01A6               	clrf	_count50s
  2080  00FA  01A7               	clrf	_count50s+1
  2081  00FB  0008               	return
  2082  00FC                     __end_of_chrgCtr:	
  2083  00FC                     PL8:	
  2084  00FC  0AA6               	incf	_count50s,f
  2085  00FD  1903               	skipnz
  2086  00FE  0AA7               	incf	_count50s+1,f
  2087  00FF  300B               	movlw	11
  2088  0100  0227               	subwf	_count50s+1,w
  2089  0101  34B9               	retlw	185
  2090  0102                     __end_ofPL8:	
  2091                           
  2092                           	psect	text9
  2093  05CA                     __ptext9:	
  2094 ;; *************** function _pwmStop *****************
  2095 ;; Defined at:
  2096 ;;		line 971 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2, status,0
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 100/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1
  2110 ;;      Params:         0       0       0
  2111 ;;      Locals:         0       0       0
  2112 ;;      Temps:          0       0       0
  2113 ;;      Totals:         0       0       0
  2114 ;;Total ram usage:        0 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    2
  2117 ;; This function calls:
  2118 ;;		Nothing
  2119 ;; This function is called by:
  2120 ;;		_chrgCtr
  2121 ;;		_workCtr
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _pwmStop
  2127  05CA                     _pwmStop:	
  2128                           
  2129                           ;main.c: 973: if(motorPwmFlag)
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2133  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  2134  05CB  0830               	movf	_motorPwmFlag,w
  2135  05CC  1903               	btfsc	3,2
  2136  05CD  0008               	return
  2137                           
  2138                           ;main.c: 974: {
  2139                           ;main.c: 975: motorPwmFlag = 0;
  2140  05CE  01B0               	clrf	_motorPwmFlag
  2141                           
  2142                           ;main.c: 976: PWMCON0 &= 0XF7;
  2143  05CF  1195               	bcf	21,3	;volatile
  2144                           
  2145                           ;main.c: 977: RB4 = 0;
  2146  05D0  1206               	bcf	6,4	;volatile
  2147  05D1  0008               	return
  2148  05D2                     __end_of_pwmStop:	
  2149                           
  2150                           	psect	text10
  2151  05DA                     __ptext10:	
  2152 ;; *************** function _chrgPwmStop *****************
  2153 ;; Defined at:
  2154 ;;		line 943 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;		None
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 100/0
  2165 ;;		On exit  : 100/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMMON   BANK0   BANK1
  2168 ;;      Params:         0       0       0
  2169 ;;      Locals:         0       0       0
  2170 ;;      Temps:          0       0       0
  2171 ;;      Totals:         0       0       0
  2172 ;;Total ram usage:        0 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    2
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_chrgCtr
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function _chrgPwmStop
  2184  05DA                     _chrgPwmStop:	
  2185  05DA                     l2152:	
  2186                           ;incstack = 0
  2187                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2188                           
  2189                           
  2190                           ;main.c: 945: if(chrgPwmFlag)
  2191  05DA  0831               	movf	_chrgPwmFlag,w
  2192  05DB  1903               	btfsc	3,2
  2193  05DC  0008               	return
  2194                           
  2195                           ;main.c: 946: {
  2196                           ;main.c: 947: chrgPwmFlag = 0;
  2197  05DD  01B1               	clrf	_chrgPwmFlag
  2198                           
  2199                           ;main.c: 948: PWMCON0 &= 0xFB;
  2200  05DE  1115               	bcf	21,2	;volatile
  2201                           
  2202                           ;main.c: 949: RB3 = 0;
  2203  05DF  1186               	bcf	6,3	;volatile
  2204  05E0  0008               	return
  2205  05E1                     __end_of_chrgPwmStop:	
  2206                           
  2207                           	psect	text11
  2208  0590                     __ptext11:	
  2209 ;; *************** function _chrgPwmInit *****************
  2210 ;; Defined at:
  2211 ;;		line 924 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, status,2
  2220 ;; Tracked objects:
  2221 ;;		On entry : 100/0
  2222 ;;		On exit  : 100/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMMON   BANK0   BANK1
  2225 ;;      Params:         0       0       0
  2226 ;;      Locals:         0       0       0
  2227 ;;      Temps:          0       0       0
  2228 ;;      Totals:         0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    2
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_chrgCtr
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           
  2240                           ;psect for function _chrgPwmInit
  2241  0590                     _chrgPwmInit:	
  2242                           
  2243                           ;main.c: 926: chrgPwmFlag = 1;
  2244                           
  2245                           ;incstack = 0
  2246                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2247  0590  01B1               	clrf	_chrgPwmFlag
  2248  0591  0AB1               	incf	_chrgPwmFlag,f
  2249                           
  2250                           ;main.c: 927: PWMCON1 = 0B00000000;
  2251  0592  0196               	clrf	22	;volatile
  2252                           
  2253                           ;main.c: 929: PWMTH = 0X00;
  2254  0593  0198               	clrf	24	;volatile
  2255                           
  2256                           ;main.c: 930: PWMTL = 100;
  2257  0594  3064               	movlw	100
  2258  0595  0097               	movwf	23	;volatile
  2259                           
  2260                           ;main.c: 934: PWMD23H = 0;
  2261  0596  1683               	bsf	3,5	;RP0=1, select bank1
  2262  0597  019E               	clrf	30	;volatile
  2263                           
  2264                           ;main.c: 935: PWMD2L = 10;
  2265  0598  300A               	movlw	10
  2266  0599  009B               	movwf	27	;volatile
  2267                           
  2268                           ;main.c: 936: PWM23DT = 0X00;
  2269  059A  019D               	clrf	29	;volatile
  2270                           
  2271                           ;main.c: 938: PWMCON0 = 0X04;
  2272  059B  3004               	movlw	4
  2273                           
  2274                           ;main.c: 939: PWMCON2 =0X00;
  2275  059C  2D9D               	ljmp	PL10	;call to abstracted procedure
  2276  059D                     __end_of_chrgPwmInit:	
  2277  059D                     PL10:	
  2278  059D  1283               	bcf	3,5	;RP0=0, select bank0
  2279  059E  0095               	movwf	21	;volatile
  2280  059F  019D               	clrf	29	;volatile
  2281  05A0  0008               	return
  2282  05A1                     __end_ofPL10:	
  2283                           
  2284                           	psect	text12
  2285  0484                     __ptext12:	
  2286 ;; *************** function _checkOutA *****************
  2287 ;; Defined at:
  2288 ;;		line 704 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 100/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1
  2302 ;;      Params:         0       0       0
  2303 ;;      Locals:         0       0       0
  2304 ;;      Temps:          1       0       0
  2305 ;;      Totals:         1       0       0
  2306 ;;Total ram usage:        1 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		_ADC_Sample
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           
  2317                           ;psect for function _checkOutA
  2318  0484                     _checkOutA:	
  2319                           
  2320                           ;main.c: 706: test_adc = ADC_Sample(0, 5);
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2324  0484  3005               	movlw	5
  2325  0485  00F3               	movwf	ADC_Sample@adldo
  2326  0486  3000               	movlw	0
  2327  0487  2102               	fcall	_ADC_Sample
  2328  0488  00CF               	movwf	_test_adc	;volatile
  2329                           
  2330                           ;main.c: 707: if (0xA5 == test_adc)
  2331  0489  30A5               	movlw	165
  2332  048A  064F               	xorwf	_test_adc,w	;volatile
  2333  048B  1D03               	btfss	3,2
  2334  048C  2CB9               	goto	l3052
  2335                           
  2336                           ;main.c: 708: {
  2337                           ;main.c: 709: if(chrgFlag && adresult > 210)
  2338  048D  087A               	movf	_chrgFlag,w
  2339  048E  1903               	btfsc	3,2
  2340  048F  2CA0               	goto	l3038
  2341  0490  3000               	movlw	0
  2342  0491  0278               	subwf	_adresult+1,w	;volatile
  2343  0492  30D3               	movlw	211
  2344  0493  1903               	skipnz
  2345  0494  0277               	subwf	_adresult,w	;volatile
  2346  0495  1C03               	skipc
  2347  0496  2CA0               	goto	l3038
  2348                           
  2349                           ;main.c: 710: {
  2350                           ;main.c: 711: if(++overChrgTime > 10)
  2351  0497  300B               	movlw	11
  2352  0498  0AC1               	incf	_overChrgTime,f
  2353  0499  0241               	subwf	_overChrgTime,w
  2354  049A  1C03               	skipc
  2355  049B  2CA1               	goto	l3040
  2356  049C  3002               	movlw	2
  2357                           
  2358                           ;main.c: 712: {
  2359                           ;main.c: 713: overChrgTime = 0;
  2360  049D  01C1               	clrf	_overChrgTime
  2361                           
  2362                           ;main.c: 714: protectFlag = 2;
  2363  049E  00C8               	movwf	_protectFlag
  2364  049F  2CA1               	goto	l3040
  2365  04A0                     l3038:	
  2366                           
  2367                           ;main.c: 718: else
  2368                           ;main.c: 719: {
  2369                           ;main.c: 720: overChrgTime = 0;
  2370  04A0  01C1               	clrf	_overChrgTime
  2371  04A1                     l3040:	
  2372                           
  2373                           ;main.c: 721: }
  2374                           ;main.c: 722: outADValue = adresult;
  2375  04A1  0878               	movf	_adresult+1,w	;volatile
  2376  04A2  00AB               	movwf	_outADValue+1
  2377  04A3  0877               	movf	_adresult,w	;volatile
  2378  04A4  00AA               	movwf	_outADValue
  2379                           
  2380                           ;main.c: 724: if(workStep && (outADValue > 600))
  2381  04A5  0879               	movf	_workStep,w
  2382  04A6  1903               	btfsc	3,2
  2383  04A7  2CB7               	goto	l3050
  2384  04A8  3002               	movlw	2
  2385  04A9  022B               	subwf	_outADValue+1,w
  2386  04AA  3059               	movlw	89
  2387  04AB  1903               	skipnz
  2388  04AC  022A               	subwf	_outADValue,w
  2389  04AD  1C03               	skipc
  2390  04AE  2CB7               	goto	l3050
  2391                           
  2392                           ;main.c: 725: {
  2393                           ;main.c: 726: if(++workOverOutTime > 50)
  2394  04AF  3033               	movlw	51
  2395  04B0  0AC7               	incf	_workOverOutTime,f
  2396  04B1  0247               	subwf	_workOverOutTime,w
  2397  04B2  1C03               	skipc
  2398  04B3  0008               	return
  2399                           
  2400                           ;main.c: 727: {
  2401                           ;main.c: 728: workOverOutTime = 0;
  2402  04B4  01C7               	clrf	_workOverOutTime
  2403                           
  2404                           ;main.c: 729: workStep = 0;
  2405  04B5  01F9               	clrf	_workStep
  2406  04B6  0008               	return
  2407  04B7                     l3050:	
  2408                           
  2409                           ;main.c: 732: else
  2410                           ;main.c: 733: {
  2411                           ;main.c: 734: workOverOutTime = 0;
  2412  04B7  01C7               	clrf	_workOverOutTime
  2413  04B8  0008               	return
  2414  04B9                     l3052:	
  2415                           
  2416                           ;main.c: 739: else
  2417                           ;main.c: 740: {
  2418                           ;main.c: 741: ADCON0 = 0;
  2419  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  2420  04BA  0195               	clrf	21	;volatile
  2421                           
  2422                           ;main.c: 742: ADCON1 = 0;
  2423  04BB  0196               	clrf	22	;volatile
  2424                           
  2425                           ;main.c: 743: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2426  04BC  3085               	movlw	133
  2427  04BD  00F4               	movwf	??_checkOutA
  2428  04BE                     u3657:	
  2429  04BE  0BF4               	decfsz	??_checkOutA,f
  2430  04BF  2CBE               	goto	u3657
  2431  04C0  0008               	return
  2432  04C1                     __end_of_checkOutA:	
  2433                           
  2434                           	psect	text13
  2435  0292                     __ptext13:	
  2436 ;; *************** function _checkBatAD *****************
  2437 ;; Defined at:
  2438 ;;		line 747 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, pclath, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1
  2452 ;;      Params:         0       0       0
  2453 ;;      Locals:         0       0       0
  2454 ;;      Temps:          2       0       0
  2455 ;;      Totals:         2       0       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    3
  2459 ;; This function calls:
  2460 ;;		_ADC_Sample
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function _checkBatAD
  2468  0292                     _checkBatAD:	
  2469                           
  2470                           ;main.c: 749: test_adc = ADC_Sample(2, 5);
  2471                           
  2472                           ;incstack = 0
  2473                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2474  0292  3005               	movlw	5
  2475  0293  00F3               	movwf	ADC_Sample@adldo
  2476  0294  3002               	movlw	2
  2477  0295  2102               	fcall	_ADC_Sample
  2478  0296  00CF               	movwf	_test_adc	;volatile
  2479                           
  2480                           ;main.c: 750: if (0xA5 == test_adc)
  2481  0297  30A5               	movlw	165
  2482  0298  064F               	xorwf	_test_adc,w	;volatile
  2483  0299  1D03               	btfss	3,2
  2484  029A  2AF2               	goto	l3088
  2485                           
  2486                           ;main.c: 751: {
  2487                           ;main.c: 752: batADValue = adresult;
  2488  029B  0878               	movf	_adresult+1,w	;volatile
  2489  029C  00A9               	movwf	_batADValue+1
  2490  029D  0877               	movf	_adresult,w	;volatile
  2491  029E  00A8               	movwf	_batADValue
  2492                           
  2493                           ;main.c: 753: if(batADValue < 1117)
  2494  029F  3004               	movlw	4
  2495  02A0  0229               	subwf	_batADValue+1,w
  2496  02A1  305D               	movlw	93
  2497  02A2  1903               	skipnz
  2498  02A3  0228               	subwf	_batADValue,w
  2499  02A4  1803               	skipnc
  2500  02A5  2AB8               	goto	l3070
  2501                           
  2502                           ;main.c: 754: {
  2503                           ;main.c: 755: pwStep = 0;
  2504  02A6  01C0               	clrf	_pwStep
  2505                           
  2506                           ;main.c: 756: if(++count8s > 800)
  2507  02A7  0AA2               	incf	_count8s,f
  2508  02A8  1903               	skipnz
  2509  02A9  0AA3               	incf	_count8s+1,f
  2510  02AA  3003               	movlw	3
  2511  02AB  0223               	subwf	_count8s+1,w
  2512  02AC  3021               	movlw	33
  2513  02AD  1903               	skipnz
  2514  02AE  0222               	subwf	_count8s,w
  2515  02AF  1C03               	skipc
  2516  02B0  2AE5               	goto	l3082
  2517                           
  2518                           ;main.c: 757: {
  2519                           ;main.c: 758: count8s = 0;
  2520  02B1  01A2               	clrf	_count8s
  2521  02B2  01A3               	clrf	_count8s+1
  2522                           
  2523                           ;main.c: 759: lowBatFlag = 1;
  2524  02B3  01B3               	clrf	_lowBatFlag
  2525  02B4  0AB3               	incf	_lowBatFlag,f
  2526                           
  2527                           ;main.c: 760: prePwStep = 0;
  2528  02B5  01BF               	clrf	_prePwStep
  2529                           
  2530                           ;main.c: 761: workStep = 0;
  2531  02B6  01F9               	clrf	_workStep
  2532  02B7  2AE5               	goto	l3082
  2533  02B8                     l3070:	
  2534  02B8  3005               	movlw	5
  2535                           
  2536                           ;main.c: 764: else
  2537                           ;main.c: 765: {
  2538                           ;main.c: 766: count8s = 0;
  2539  02B9  01A2               	clrf	_count8s
  2540  02BA  01A3               	clrf	_count8s+1
  2541                           
  2542                           ;main.c: 767: if(batADValue >= 1340)
  2543  02BB  0229               	subwf	_batADValue+1,w
  2544  02BC  303C               	movlw	60
  2545  02BD  1903               	skipnz
  2546  02BE  0228               	subwf	_batADValue,w
  2547                           
  2548                           ;main.c: 768: {
  2549                           ;main.c: 769: pwStep = ((batADValue - 1340) /2) + 13;
  2550  02BF  0828               	movf	_batADValue,w
  2551  02C0  1C03               	skipc
  2552  02C1  2ACF               	goto	L7
  2553  02C2  3EC4               	addlw	196
  2554  02C3  00F4               	movwf	??_checkBatAD
  2555  02C4  0829               	movf	_batADValue+1,w
  2556  02C5  1803               	skipnc
  2557  02C6  3E01               	addlw	1
  2558  02C7  3EFA               	addlw	250
  2559  02C8  00F5               	movwf	??_checkBatAD+1
  2560  02C9  1003               	clrc
  2561  02CA  0CF5               	rrf	??_checkBatAD+1,f
  2562  02CB  0CF4               	rrf	??_checkBatAD,f
  2563  02CC  0874               	movf	??_checkBatAD,w
  2564  02CD  3E0D               	addlw	13
  2565  02CE  2ADE               	goto	L6
  2566  02CF                     L7:	
  2567                           ;main.c: 771: else
  2568                           ;main.c: 772: {
  2569                           ;main.c: 773: pwStep = (batADValue - 1117) / 16;
  2570                           
  2571                           ;main.c: 770: }
  2572                           
  2573  02CF  3EA3               	addlw	163
  2574  02D0  00F4               	movwf	??_checkBatAD
  2575  02D1  0829               	movf	_batADValue+1,w
  2576  02D2  1803               	skipnc
  2577  02D3  3E01               	addlw	1
  2578  02D4  3EFB               	addlw	251
  2579  02D5  00F5               	movwf	??_checkBatAD+1
  2580  02D6  3004               	movlw	4
  2581  02D7                     u3325:	
  2582  02D7  1003               	clrc
  2583  02D8  0CF5               	rrf	??_checkBatAD+1,f
  2584  02D9  0CF4               	rrf	??_checkBatAD,f
  2585  02DA  3EFF               	addlw	-1
  2586  02DB  1D03               	skipz
  2587  02DC  2AD7               	goto	u3325
  2588  02DD  0874               	movf	??_checkBatAD,w
  2589  02DE                     L6:	
  2590  02DE  00C0               	movwf	_pwStep
  2591                           
  2592                           ;main.c: 774: }
  2593                           ;main.c: 775: if(pwStep > 99)
  2594  02DF  3064               	movlw	100
  2595  02E0  0240               	subwf	_pwStep,w
  2596  02E1  1C03               	skipc
  2597  02E2  2AE5               	goto	l3082
  2598                           
  2599                           ;main.c: 776: {
  2600                           ;main.c: 777: pwStep = 99;
  2601  02E3  3063               	movlw	99
  2602  02E4  00C0               	movwf	_pwStep
  2603  02E5                     l3082:	
  2604                           
  2605                           ;main.c: 778: }
  2606                           ;main.c: 779: }
  2607                           ;main.c: 780: if(chrgFlag && batADValue > 1861)
  2608  02E5  087A               	movf	_chrgFlag,w
  2609  02E6  1903               	btfsc	3,2
  2610  02E7  2AF9               	goto	l3092
  2611  02E8  3007               	movlw	7
  2612  02E9  0229               	subwf	_batADValue+1,w
  2613  02EA  3046               	movlw	70
  2614  02EB  1903               	skipnz
  2615  02EC  0228               	subwf	_batADValue,w
  2616  02ED  1C03               	skipc
  2617  02EE  2AF9               	goto	l3092
  2618                           
  2619                           ;main.c: 781: {
  2620                           ;main.c: 782: protectFlag = 1;
  2621  02EF  01C8               	clrf	_protectFlag
  2622  02F0  0AC8               	incf	_protectFlag,f
  2623  02F1  2AF9               	goto	l3092
  2624  02F2                     l3088:	
  2625                           
  2626                           ;main.c: 785: else
  2627                           ;main.c: 786: {
  2628                           ;main.c: 787: ADCON0 = 0;
  2629  02F2  1683               	bsf	3,5	;RP0=1, select bank1
  2630  02F3  0195               	clrf	21	;volatile
  2631                           
  2632                           ;main.c: 788: ADCON1 = 0;
  2633  02F4  0196               	clrf	22	;volatile
  2634                           
  2635                           ;main.c: 789: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2636  02F5  3085               	movlw	133
  2637  02F6  00F4               	movwf	??_checkBatAD
  2638  02F7                     u3667:	
  2639  02F7  0BF4               	decfsz	??_checkBatAD,f
  2640  02F8  2AF7               	goto	u3667
  2641  02F9                     l3092:	
  2642                           
  2643                           ;main.c: 790: }
  2644                           ;main.c: 792: test_adc = ADC_Sample(1, 5);
  2645  02F9  3005               	movlw	5
  2646  02FA  00F3               	movwf	ADC_Sample@adldo
  2647  02FB  3001               	movlw	1
  2648  02FC  2102               	fcall	_ADC_Sample
  2649  02FD  00CF               	movwf	_test_adc	;volatile
  2650                           
  2651                           ;main.c: 793: if (0xA5 == test_adc)
  2652  02FE  30A5               	movlw	165
  2653  02FF  064F               	xorwf	_test_adc,w	;volatile
  2654  0300  1D03               	btfss	3,2
  2655  0301  2B2D               	goto	l3112
  2656                           
  2657                           ;main.c: 794: {
  2658                           ;main.c: 795: if(chrgFlag && adresult > 100)
  2659  0302  087A               	movf	_chrgFlag,w
  2660  0303  1903               	btfsc	3,2
  2661  0304  0008               	return
  2662  0305  3000               	movlw	0
  2663  0306  0278               	subwf	_adresult+1,w	;volatile
  2664  0307  3065               	movlw	101
  2665  0308  1903               	skipnz
  2666  0309  0277               	subwf	_adresult,w	;volatile
  2667  030A  1C03               	skipc
  2668  030B  0008               	return
  2669                           
  2670                           ;main.c: 796: {
  2671                           ;main.c: 798: if(adresult > 810 || (batADValue - adresult) > 810)
  2672  030C  3003               	movlw	3
  2673  030D  0278               	subwf	_adresult+1,w	;volatile
  2674  030E  302B               	movlw	43
  2675  030F  1903               	skipnz
  2676  0310  0277               	subwf	_adresult,w	;volatile
  2677  0311  1803               	skipnc
  2678  0312  2B22               	goto	l3104
  2679  0313  0877               	movf	_adresult,w	;volatile
  2680  0314  0228               	subwf	_batADValue,w
  2681  0315  00F4               	movwf	??_checkBatAD
  2682  0316  0878               	movf	_adresult+1,w	;volatile
  2683  0317  1C03               	skipc
  2684  0318  0A78               	incf	_adresult+1,w	;volatile
  2685  0319  0229               	subwf	_batADValue+1,w
  2686  031A  00F5               	movwf	??_checkBatAD+1
  2687  031B  3003               	movlw	3
  2688  031C  0275               	subwf	??_checkBatAD+1,w
  2689  031D  302B               	movlw	43
  2690  031E  1903               	skipnz
  2691  031F  0274               	subwf	??_checkBatAD,w
  2692  0320  1C03               	skipc
  2693  0321  2B2B               	goto	l3110
  2694  0322                     l3104:	
  2695                           
  2696                           ;main.c: 799: {
  2697                           ;main.c: 801: if(++countHalfFull > 250)
  2698  0322  30FB               	movlw	251
  2699  0323  0AC9               	incf	_countHalfFull,f
  2700  0324  0249               	subwf	_countHalfFull,w
  2701  0325  1C03               	skipc
  2702  0326  0008               	return
  2703  0327  3002               	movlw	2
  2704                           
  2705                           ;main.c: 802: {
  2706                           ;main.c: 803: countHalfFull = 0;
  2707  0328  01C9               	clrf	_countHalfFull
  2708                           
  2709                           ;main.c: 804: protectFlag = 2;
  2710  0329  00C8               	movwf	_protectFlag
  2711  032A  0008               	return
  2712  032B                     l3110:	
  2713                           
  2714                           ;main.c: 807: else
  2715                           ;main.c: 808: {
  2716                           ;main.c: 809: countHalfFull = 0;
  2717  032B  01C9               	clrf	_countHalfFull
  2718                           
  2719                           ;main.c: 810: }
  2720                           ;main.c: 811: }
  2721                           ;main.c: 812: }
  2722  032C  0008               	return
  2723  032D                     l3112:	
  2724                           
  2725                           ;main.c: 813: else
  2726                           ;main.c: 814: {
  2727                           ;main.c: 815: ADCON0 = 0;
  2728  032D  1683               	bsf	3,5	;RP0=1, select bank1
  2729  032E  0195               	clrf	21	;volatile
  2730                           
  2731                           ;main.c: 816: ADCON1 = 0;
  2732  032F  0196               	clrf	22	;volatile
  2733                           
  2734                           ;main.c: 817: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2735  0330  3085               	movlw	133
  2736  0331  00F4               	movwf	??_checkBatAD
  2737  0332                     u3677:	
  2738  0332  0BF4               	decfsz	??_checkBatAD,f
  2739  0333  2B32               	goto	u3677
  2740  0334  0008               	return
  2741  0335                     __end_of_checkBatAD:	
  2742                           
  2743                           	psect	text14
  2744  0102                     __ptext14:	
  2745 ;; *************** function _ADC_Sample *****************
  2746 ;; Defined at:
  2747 ;;		line 1066 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  adch            1    wreg     unsigned char 
  2750 ;;  adldo           1    3[COMMON] unsigned char 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  adch            1    5[BANK0 ] unsigned char 
  2753 ;;  j               1    4[BANK0 ] unsigned char 
  2754 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2755 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2756 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2757 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2758 ;;  i               1    6[BANK0 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      unsigned char 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 100/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1
  2768 ;;      Params:         1       0       0
  2769 ;;      Locals:         0      13       0
  2770 ;;      Temps:          0       4       0
  2771 ;;      Totals:         1      17       0
  2772 ;;Total ram usage:       18 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    2
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_checkOutA
  2779 ;;		_checkBatAD
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           
  2784                           ;psect for function _ADC_Sample
  2785  0102                     _ADC_Sample:	
  2786                           
  2787                           ;incstack = 0
  2788                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2789                           ;ADC_Sample@adch stored from wreg
  2790  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0103  00D5               	movwf	ADC_Sample@adch
  2792                           
  2793                           ;main.c: 1068: volatile unsigned long adsum = 0;
  2794                           
  2795                           ;main.c: 1069: volatile unsigned int admin = 0, admax = 0;
  2796  0104  21DD               	fcall	PL4	;call to abstracted procedure
  2797                           
  2798                           ;main.c: 1070: volatile unsigned int ad_temp = 0;
  2799  0105  01DF               	clrf	ADC_Sample@ad_temp	;volatile
  2800  0106  01E0               	clrf	ADC_Sample@ad_temp+1	;volatile
  2801                           
  2802                           ;main.c: 1072: if ((!LDO_EN) && (adldo & 0x04) )
  2803  0107  1683               	bsf	3,5	;RP0=1, select bank1
  2804  0108  1D16               	btfss	22,2	;volatile
  2805  0109  1D73               	btfss	ADC_Sample@adldo,2
  2806  010A  2914               	goto	l2944
  2807                           
  2808                           ;main.c: 1073: {
  2809                           ;main.c: 1075: ADCON1 = adldo;
  2810  010B  0873               	movf	ADC_Sample@adldo,w
  2811  010C  0096               	movwf	22	;volatile
  2812                           
  2813                           ;main.c: 1076: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2814  010D  3084               	movlw	132
  2815  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2816  010F  00D0               	movwf	??_ADC_Sample
  2817  0110                     u3687:	
  2818  0110  0BD0               	decfsz	??_ADC_Sample,f
  2819  0111  2910               	goto	u3687
  2820  0112  2913               	nop2
  2821                           
  2822                           ;main.c: 1077: }
  2823  0113  2916               	goto	l2946
  2824  0114                     l2944:	
  2825                           
  2826                           ;main.c: 1078: else
  2827                           ;main.c: 1079: ADCON1 = adldo;
  2828  0114  0873               	movf	ADC_Sample@adldo,w
  2829  0115  0096               	movwf	22	;volatile
  2830  0116                     l2946:	
  2831                           
  2832                           ;main.c: 1081: if(adch & 0x10)
  2833  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2834  0117  1E55               	btfss	ADC_Sample@adch,4
  2835  0118  291E               	goto	l2954
  2836                           
  2837                           ;main.c: 1082: {
  2838                           ;main.c: 1083: CHS4 = 1;
  2839  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2840  011A  1716               	bsf	22,6	;volatile
  2841                           
  2842                           ;main.c: 1084: adch &= 0x0f;
  2843  011B  300F               	movlw	15
  2844  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2845  011D  05D5               	andwf	ADC_Sample@adch,f
  2846  011E                     l2954:	
  2847                           
  2848                           ;main.c: 1087: for (i = 0; i < 10; i++)
  2849  011E  01D6               	clrf	ADC_Sample@i
  2850  011F                     l2960:	
  2851                           
  2852                           ;main.c: 1088: {
  2853                           ;main.c: 1089: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2854  011F  0855               	movf	ADC_Sample@adch,w
  2855  0120  00D0               	movwf	??_ADC_Sample
  2856  0121  3001               	movlw	1
  2857  0122  1003               	clrc
  2858  0123                     L8:	
  2859  0123  0DD0               	rlf	??_ADC_Sample,f
  2860  0124  3EFF               	addlw	-1
  2861  0125  1003               	clrc
  2862  0126  1D03               	skipz
  2863  0127  2923               	goto	L8
  2864  0128  0D50               	rlf	??_ADC_Sample,w
  2865  0129  3841               	iorlw	65
  2866  012A  1683               	bsf	3,5	;RP0=1, select bank1
  2867  012B  0095               	movwf	21	;volatile
  2868  012C  0000               	nop	;# 
  2869  012D  0000               	nop	;# 
  2870  012E  0000               	nop	;# 
  2871  012F  0000               	nop	;# 
  2872                           
  2873                           ;main.c: 1094: GODONE = 1;
  2874  0130  1683               	bsf	3,5	;RP0=1, select bank1
  2875  0131  1495               	bsf	21,1	;volatile
  2876                           
  2877                           ;main.c: 1096: unsigned char j = 0;
  2878  0132  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0133  01D4               	clrf	ADC_Sample@j
  2880  0134                     l913:	
  2881                           ;main.c: 1097: while (GODONE)
  2882                           
  2883  0134  1683               	bsf	3,5	;RP0=1, select bank1
  2884  0135  1C95               	btfss	21,1	;volatile
  2885  0136  293F               	goto	l2970
  2886                           
  2887                           ;main.c: 1098: {
  2888                           ;main.c: 1099: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2889  0137  2938               	nop2	;2 cycle nop
  2890  0138  2939               	nop2	;2 cycle nop
  2891  0139  293A               	nop2	;2 cycle nop
  2892  013A  293B               	nop2	;2 cycle nop
  2893                           
  2894                           ;main.c: 1101: if (0 == (--j))
  2895  013B  1283               	bcf	3,5	;RP0=0, select bank0
  2896  013C  0BD4               	decfsz	ADC_Sample@j,f
  2897  013D  2934               	goto	l913
  2898                           
  2899                           ;main.c: 1102: return 0;
  2900  013E  3400               	retlw	0
  2901  013F                     l2970:	
  2902                           
  2903                           ;main.c: 1103: }
  2904                           ;main.c: 1105: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2905  013F  0819               	movf	25,w	;volatile
  2906  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0141  00DF               	movwf	ADC_Sample@ad_temp	;volatile
  2908  0142  01E0               	clrf	ADC_Sample@ad_temp+1	;volatile
  2909  0143  0EDF               	swapf	ADC_Sample@ad_temp,f	;volatile
  2910  0144  0EE0               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2911  0145  30F0               	movlw	240
  2912  0146  05E0               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2913  0147  085F               	movf	ADC_Sample@ad_temp,w	;volatile
  2914  0148  390F               	andlw	15
  2915  0149  04E0               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2916  014A  30F0               	movlw	240
  2917  014B  05DF               	andwf	ADC_Sample@ad_temp,f	;volatile
  2918  014C  1683               	bsf	3,5	;RP0=1, select bank1
  2919  014D  0E18               	swapf	24,w	;volatile
  2920  014E  390F               	andlw	15
  2921  014F  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0150  07DF               	addwf	ADC_Sample@ad_temp,f	;volatile
  2923  0151  1803               	skipnc
  2924  0152  0AE0               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2925                           
  2926                           ;main.c: 1107: if (0 == admax)
  2927  0153  085D               	movf	ADC_Sample@admax,w	;volatile
  2928  0154  045E               	iorwf	ADC_Sample@admax+1,w	;volatile
  2929  0155  1D03               	btfss	3,2
  2930  0156  2959               	goto	l2978
  2931                           
  2932                           ;main.c: 1108: {
  2933                           ;main.c: 1109: admax = ad_temp;
  2934  0157  21E6               	fcall	PL12	;call to abstracted procedure
  2935  0158  296B               	goto	l2984
  2936  0159                     l2978:	
  2937                           ;main.c: 1111: }
  2938                           
  2939                           ;main.c: 1110: admin = ad_temp;
  2940                           
  2941                           
  2942                           ;main.c: 1112: else if (ad_temp > admax)
  2943  0159  0860               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2944  015A  025E               	subwf	ADC_Sample@admax+1,w	;volatile
  2945  015B  1D03               	skipz
  2946  015C  295F               	goto	u3105
  2947  015D  085F               	movf	ADC_Sample@ad_temp,w	;volatile
  2948  015E  025D               	subwf	ADC_Sample@admax,w	;volatile
  2949  015F                     u3105:	
  2950  015F  1803               	skipnc
  2951  0160  2963               	goto	l2982
  2952                           
  2953                           ;main.c: 1113: admax = ad_temp;
  2954  0161  21E6               	fcall	PL12	;call to abstracted procedure
  2955  0162  296F               	goto	l919
  2956  0163                     l2982:	
  2957                           
  2958                           ;main.c: 1114: else if (ad_temp < admin)
  2959  0163  085C               	movf	ADC_Sample@admin+1,w	;volatile
  2960  0164  0260               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2961  0165  1D03               	skipz
  2962  0166  2969               	goto	u3115
  2963  0167  085B               	movf	ADC_Sample@admin,w	;volatile
  2964  0168  025F               	subwf	ADC_Sample@ad_temp,w	;volatile
  2965  0169                     u3115:	
  2966  0169  1803               	skipnc
  2967  016A  296F               	goto	l919
  2968  016B                     l2984:	
  2969                           
  2970                           ;main.c: 1115: admin = ad_temp;
  2971  016B  0860               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2972  016C  00DC               	movwf	ADC_Sample@admin+1	;volatile
  2973  016D  085F               	movf	ADC_Sample@ad_temp,w	;volatile
  2974  016E  00DB               	movwf	ADC_Sample@admin	;volatile
  2975  016F                     l919:	
  2976                           
  2977                           ;main.c: 1117: adsum += ad_temp;
  2978  016F  085F               	movf	ADC_Sample@ad_temp,w	;volatile
  2979  0170  00D0               	movwf	??_ADC_Sample
  2980  0171  0860               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2981  0172  00D1               	movwf	??_ADC_Sample+1
  2982  0173  01D2               	clrf	??_ADC_Sample+2
  2983  0174  01D3               	clrf	??_ADC_Sample+3
  2984  0175  0850               	movf	??_ADC_Sample,w
  2985  0176  07D7               	addwf	ADC_Sample@adsum,f	;volatile
  2986  0177  0851               	movf	??_ADC_Sample+1,w
  2987  0178  1103               	clrz
  2988  0179  1803               	skipnc
  2989  017A  3E01               	addlw	1
  2990  017B  1D03               	btfss	3,2
  2991  017C  07D8               	addwf	ADC_Sample@adsum+1,f	;volatile
  2992  017D  0852               	movf	??_ADC_Sample+2,w
  2993  017E  1103               	clrz
  2994  017F  1803               	skipnc
  2995  0180  3E01               	addlw	1
  2996  0181  1D03               	btfss	3,2
  2997  0182  07D9               	addwf	ADC_Sample@adsum+2,f	;volatile
  2998  0183  0853               	movf	??_ADC_Sample+3,w
  2999  0184  1103               	clrz
  3000  0185  1803               	skipnc
  3001  0186  3E01               	addlw	1
  3002  0187  1D03               	btfss	3,2
  3003  0188  07DA               	addwf	ADC_Sample@adsum+3,f	;volatile
  3004  0189  300A               	movlw	10
  3005  018A  0AD6               	incf	ADC_Sample@i,f
  3006  018B  0256               	subwf	ADC_Sample@i,w
  3007  018C  1C03               	skipc
  3008  018D  291F               	goto	l2960
  3009                           
  3010                           ;main.c: 1118: }
  3011                           ;main.c: 1119: adsum -= admax;
  3012  018E  085D               	movf	ADC_Sample@admax,w	;volatile
  3013  018F  00D0               	movwf	??_ADC_Sample
  3014  0190  085E               	movf	ADC_Sample@admax+1,w	;volatile
  3015  0191  21CE               	fcall	PL2	;call to abstracted procedure
  3016  0192  1C03               	skipc
  3017  0193  0F53               	incfsz	??_ADC_Sample+3,w
  3018  0194  02DA               	subwf	ADC_Sample@adsum+3,f	;volatile
  3019                           
  3020                           ;main.c: 1120: if (adsum >= admin)
  3021  0195  085B               	movf	ADC_Sample@admin,w	;volatile
  3022  0196  00D0               	movwf	??_ADC_Sample
  3023  0197  085C               	movf	ADC_Sample@admin+1,w	;volatile
  3024  0198  00D1               	movwf	??_ADC_Sample+1
  3025  0199  01D2               	clrf	??_ADC_Sample+2
  3026  019A  01D3               	clrf	??_ADC_Sample+3
  3027  019B  0853               	movf	??_ADC_Sample+3,w
  3028  019C  025A               	subwf	ADC_Sample@adsum+3,w	;volatile
  3029  019D  1D03               	skipz
  3030  019E  29A9               	goto	u3155
  3031  019F  0852               	movf	??_ADC_Sample+2,w
  3032  01A0  0259               	subwf	ADC_Sample@adsum+2,w	;volatile
  3033  01A1  1D03               	skipz
  3034  01A2  29A9               	goto	u3155
  3035  01A3  0851               	movf	??_ADC_Sample+1,w
  3036  01A4  0258               	subwf	ADC_Sample@adsum+1,w	;volatile
  3037  01A5  1D03               	skipz
  3038  01A6  29A9               	goto	u3155
  3039  01A7  0850               	movf	??_ADC_Sample,w
  3040  01A8  0257               	subwf	ADC_Sample@adsum,w	;volatile
  3041  01A9                     u3155:	
  3042  01A9  1C03               	skipc
  3043  01AA  29B3               	goto	l923
  3044                           
  3045                           ;main.c: 1121: adsum -= admin;
  3046  01AB  085B               	movf	ADC_Sample@admin,w	;volatile
  3047  01AC  00D0               	movwf	??_ADC_Sample
  3048  01AD  085C               	movf	ADC_Sample@admin+1,w	;volatile
  3049  01AE  21CE               	fcall	PL2	;call to abstracted procedure
  3050  01AF  1C03               	skipc
  3051  01B0  0F53               	incfsz	??_ADC_Sample+3,w
  3052  01B1  02DA               	subwf	ADC_Sample@adsum+3,f	;volatile
  3053  01B2  29B7               	goto	l2994
  3054  01B3                     l923:	
  3055                           
  3056                           ;main.c: 1122: else
  3057                           ;main.c: 1123: adsum = 0;
  3058  01B3  01D7               	clrf	ADC_Sample@adsum	;volatile
  3059  01B4  01D8               	clrf	ADC_Sample@adsum+1	;volatile
  3060  01B5  01D9               	clrf	ADC_Sample@adsum+2	;volatile
  3061  01B6  01DA               	clrf	ADC_Sample@adsum+3	;volatile
  3062  01B7                     l2994:	
  3063                           
  3064                           ;main.c: 1125: adresult = adsum >> 3;
  3065  01B7  0857               	movf	ADC_Sample@adsum,w	;volatile
  3066  01B8  00D0               	movwf	??_ADC_Sample
  3067  01B9  0858               	movf	ADC_Sample@adsum+1,w	;volatile
  3068  01BA  00D1               	movwf	??_ADC_Sample+1
  3069  01BB  0859               	movf	ADC_Sample@adsum+2,w	;volatile
  3070  01BC  00D2               	movwf	??_ADC_Sample+2
  3071  01BD  085A               	movf	ADC_Sample@adsum+3,w	;volatile
  3072  01BE  00D3               	movwf	??_ADC_Sample+3
  3073  01BF  3003               	movlw	3
  3074  01C0                     u3175:	
  3075  01C0  1003               	clrc
  3076  01C1  0CD3               	rrf	??_ADC_Sample+3,f
  3077  01C2  0CD2               	rrf	??_ADC_Sample+2,f
  3078  01C3  0CD1               	rrf	??_ADC_Sample+1,f
  3079  01C4  0CD0               	rrf	??_ADC_Sample,f
  3080  01C5  3EFF               	addlw	-1
  3081  01C6  1D03               	skipz
  3082  01C7  29C0               	goto	u3175
  3083  01C8  0851               	movf	??_ADC_Sample+1,w
  3084  01C9  00F8               	movwf	_adresult+1	;volatile
  3085  01CA  0850               	movf	??_ADC_Sample,w
  3086  01CB  00F7               	movwf	_adresult	;volatile
  3087                           
  3088                           ;main.c: 1127: adsum = 0;
  3089                           
  3090                           ;main.c: 1128: admin = 0;
  3091                           
  3092                           ;main.c: 1129: admax = 0;
  3093  01CC  21DD               	fcall	PL4	;call to abstracted procedure
  3094                           
  3095                           ;main.c: 1130: return 0xA5;
  3096  01CD  34A5               	retlw	165
  3097  01CE                     __end_of_ADC_Sample:	
  3098  01CE                     PL2:	
  3099  01CE  00D1               	movwf	??_ADC_Sample+1
  3100  01CF  01D2               	clrf	??_ADC_Sample+2
  3101  01D0  01D3               	clrf	??_ADC_Sample+3
  3102  01D1  0850               	movf	??_ADC_Sample,w
  3103  01D2  02D7               	subwf	ADC_Sample@adsum,f	;volatile
  3104  01D3  0851               	movf	??_ADC_Sample+1,w
  3105  01D4  1C03               	skipc
  3106  01D5  0F51               	incfsz	??_ADC_Sample+1,w
  3107  01D6  02D8               	subwf	ADC_Sample@adsum+1,f	;volatile
  3108  01D7  0852               	movf	??_ADC_Sample+2,w
  3109  01D8  1C03               	skipc
  3110  01D9  0F52               	incfsz	??_ADC_Sample+2,w
  3111  01DA  02D9               	subwf	ADC_Sample@adsum+2,f	;volatile
  3112  01DB  0853               	movf	??_ADC_Sample+3,w
  3113  01DC  0008               	return
  3114  01DD                     __end_ofPL2:	
  3115  01DD                     PL4:	
  3116  01DD  01D7               	clrf	ADC_Sample@adsum	;volatile
  3117  01DE  01D8               	clrf	ADC_Sample@adsum+1	;volatile
  3118  01DF  01D9               	clrf	ADC_Sample@adsum+2	;volatile
  3119  01E0  01DA               	clrf	ADC_Sample@adsum+3	;volatile
  3120  01E1  01DB               	clrf	ADC_Sample@admin	;volatile
  3121  01E2  01DC               	clrf	ADC_Sample@admin+1	;volatile
  3122  01E3  01DD               	clrf	ADC_Sample@admax	;volatile
  3123  01E4  01DE               	clrf	ADC_Sample@admax+1	;volatile
  3124  01E5  0008               	return
  3125  01E6                     __end_ofPL4:	
  3126  01E6                     PL12:	
  3127  01E6  0860               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3128  01E7  00DE               	movwf	ADC_Sample@admax+1	;volatile
  3129  01E8  085F               	movf	ADC_Sample@ad_temp,w	;volatile
  3130  01E9  00DD               	movwf	ADC_Sample@admax	;volatile
  3131  01EA  0008               	return
  3132  01EB                     __end_ofPL12:	
  3133                           
  3134                           	psect	text15
  3135  0442                     __ptext15:	
  3136 ;; *************** function _Sleep_Mode *****************
  3137 ;; Defined at:
  3138 ;;		line 989 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;		None
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, status,2, status,0, pclath, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 100/0
  3149 ;;		On exit  : 100/100
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1
  3152 ;;      Params:         0       0       0
  3153 ;;      Locals:         0       0       0
  3154 ;;      Temps:          0       0       0
  3155 ;;      Totals:         0       0       0
  3156 ;;Total ram usage:        0 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    3
  3159 ;; This function calls:
  3160 ;;		_AD_Init
  3161 ;;		_Init_System
  3162 ;; This function is called by:
  3163 ;;		_main
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _Sleep_Mode
  3169  0442                     _Sleep_Mode:	
  3170                           
  3171                           ;main.c: 991: INTCON = 0;
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3175  0442  018B               	clrf	11	;volatile
  3176                           
  3177                           ;main.c: 993: OPTION_REG = 0;
  3178  0443  0181               	clrf	1	;volatile
  3179                           
  3180                           ;main.c: 995: WPUA = 0B00000000;
  3181  0444  1683               	bsf	3,5	;RP0=1, select bank1
  3182  0445  0188               	clrf	8	;volatile
  3183                           
  3184                           ;main.c: 996: TRISA = 0x27;
  3185  0446  3027               	movlw	39
  3186                           
  3187                           ;main.c: 997: TRISB = 0x04;
  3188                           
  3189                           ;main.c: 999: PORTA = 0X00;
  3190                           
  3191                           ;main.c: 1000: PORTB = 0X00;
  3192  0447  247B               	fcall	PL6	;call to abstracted procedure
  3193                           
  3194                           ;main.c: 1001: WPUB = 0x04;
  3195  0448  0088               	movwf	8	;volatile
  3196                           
  3197                           ;main.c: 1003: ADCON0 = 0;
  3198  0449  1683               	bsf	3,5	;RP0=1, select bank1
  3199  044A  0195               	clrf	21	;volatile
  3200                           
  3201                           ;main.c: 1004: ADCON1 = 0;
  3202  044B  0196               	clrf	22	;volatile
  3203                           
  3204                           ;main.c: 1006: PWMCON0 = 0;
  3205  044C  1283               	bcf	3,5	;RP0=0, select bank0
  3206  044D  0195               	clrf	21	;volatile
  3207                           
  3208                           ;main.c: 1008: OSCCON = 0X70;
  3209  044E  3070               	movlw	112
  3210  044F  0094               	movwf	20	;volatile
  3211                           
  3212                           ;main.c: 1010: IOCA = 0x20;
  3213  0450  3020               	movlw	32
  3214  0451  1683               	bsf	3,5	;RP0=1, select bank1
  3215  0452  0089               	movwf	9	;volatile
  3216                           
  3217                           ;main.c: 1011: IOCB = 0x04;
  3218  0453  3004               	movlw	4
  3219  0454  1283               	bcf	3,5	;RP0=0, select bank0
  3220  0455  0089               	movwf	9	;volatile
  3221                           
  3222                           ;main.c: 1013: RAIE = 1;
  3223  0456  158E               	bsf	14,3	;volatile
  3224                           
  3225                           ;main.c: 1014: PEIE = 1;
  3226  0457  170B               	bsf	11,6	;volatile
  3227                           
  3228                           ;main.c: 1015: RBIE = 1;
  3229  0458  158B               	bsf	11,3	;volatile
  3230                           
  3231                           ;main.c: 1016: GIE = 0;
  3232  0459  138B               	bcf	11,7	;volatile
  3233                           
  3234                           ;main.c: 1018: PIE1 &= 0X08;
  3235  045A  3008               	movlw	8
  3236  045B  058E               	andwf	14,f	;volatile
  3237                           
  3238                           ;main.c: 1019: PIR1 = 0;
  3239  045C  018D               	clrf	13	;volatile
  3240                           
  3241                           ;main.c: 1020: INTCON &= 0XC8;
  3242  045D  30C8               	movlw	200
  3243  045E  058B               	andwf	11,f	;volatile
  3244                           
  3245                           ;main.c: 1022: PORTA;
  3246  045F  1683               	bsf	3,5	;RP0=1, select bank1
  3247  0460  0806               	movf	6,w	;volatile
  3248                           
  3249                           ;main.c: 1023: RAIF = 0;
  3250  0461  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0462  118D               	bcf	13,3	;volatile
  3252                           
  3253                           ;main.c: 1024: PORTB;
  3254  0463  0806               	movf	6,w	;volatile
  3255                           
  3256                           ;main.c: 1025: RBIF = 0;
  3257  0464  100B               	bcf	11,0	;volatile
  3258  0465  0064               	clrwdt	;# 
  3259  0466  0063               	sleep	;# 
  3260  0467  0000               	nop	;# 
  3261  0468  0064               	clrwdt	;# 
  3262  0469  0000               	nop	;# 
  3263  046A  0000               	nop	;# 
  3264  046B  0000               	nop	;# 
  3265  046C  0000               	nop	;# 
  3266  046D  0000               	nop	;# 
  3267                           
  3268                           ;main.c: 1037: if(RAIF) RAIF = 0;
  3269  046E  1283               	bcf	3,5	;RP0=0, select bank0
  3270  046F  198D               	btfsc	13,3	;volatile
  3271  0470  118D               	bcf	13,3	;volatile
  3272                           
  3273                           ;main.c: 1038: if(RBIF) RBIF = 0;
  3274  0471  180B               	btfsc	11,0	;volatile
  3275  0472  100B               	bcf	11,0	;volatile
  3276                           
  3277                           ;main.c: 1039: if(TMR2IF) TMR2IF = 0;
  3278  0473  188D               	btfsc	13,1	;volatile
  3279  0474  108D               	bcf	13,1	;volatile
  3280                           
  3281                           ;main.c: 1040: IOCA = 0B00000000;
  3282  0475  1683               	bsf	3,5	;RP0=1, select bank1
  3283  0476  0189               	clrf	9	;volatile
  3284                           
  3285                           ;main.c: 1041: IOCB = 0B00000000;
  3286  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0478  0189               	clrf	9	;volatile
  3288                           
  3289                           ;main.c: 1042: Init_System();
  3290  0479  2562               	fcall	_Init_System
  3291                           
  3292                           ;main.c: 1043: AD_Init();
  3293  047A  2DD2               	ljmp	l2146
  3294  047B                     __end_of_Sleep_Mode:	
  3295  047B                     PL6:	
  3296  047B  0085               	movwf	5	;volatile
  3297  047C  3004               	movlw	4
  3298  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3299  047E  0085               	movwf	5	;volatile
  3300  047F  1683               	bsf	3,5	;RP0=1, select bank1
  3301  0480  0186               	clrf	6	;volatile
  3302  0481  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0482  0186               	clrf	6	;volatile
  3304  0483  0008               	return
  3305  0484                     __end_ofPL6:	
  3306                           
  3307                           	psect	text16
  3308  0562                     __ptext16:	
  3309 ;; *************** function _Init_System *****************
  3310 ;; Defined at:
  3311 ;;		line 831 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2
  3320 ;; Tracked objects:
  3321 ;;		On entry : 100/0
  3322 ;;		On exit  : 100/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1
  3325 ;;      Params:         0       0       0
  3326 ;;      Locals:         0       0       0
  3327 ;;      Temps:          0       0       0
  3328 ;;      Totals:         0       0       0
  3329 ;;Total ram usage:        0 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    2
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_main
  3336 ;;		_Sleep_Mode
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _Init_System
  3342  0562                     _Init_System:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _Init_System: [wreg+status,2]
  3346  0562  0000               	nop	;# 
  3347  0563  0064               	clrwdt	;# 
  3348                           
  3349                           ;main.c: 835: OPTION_REG = 0;
  3350  0564  1283               	bcf	3,5	;RP0=0, select bank0
  3351  0565  0181               	clrf	1	;volatile
  3352  0566  0064               	clrwdt	;# 
  3353                           
  3354                           ;main.c: 837: OSCCON = 0X72;
  3355  0567  3072               	movlw	114
  3356  0568  1283               	bcf	3,5	;RP0=0, select bank0
  3357  0569  0094               	movwf	20	;volatile
  3358                           
  3359                           ;main.c: 839: WPUA = 0B00000000;
  3360  056A  1683               	bsf	3,5	;RP0=1, select bank1
  3361  056B  0188               	clrf	8	;volatile
  3362                           
  3363                           ;main.c: 840: WPDA = 0x00;
  3364  056C  0187               	clrf	7	;volatile
  3365                           
  3366                           ;main.c: 841: WPUB = 0x04;
  3367  056D  3004               	movlw	4
  3368  056E  1283               	bcf	3,5	;RP0=0, select bank0
  3369  056F  0088               	movwf	8	;volatile
  3370                           
  3371                           ;main.c: 843: TRISA = 0x27;
  3372  0570  3027               	movlw	39
  3373  0571  1683               	bsf	3,5	;RP0=1, select bank1
  3374                           
  3375                           ;main.c: 844: TRISB = 0x04;
  3376                           
  3377                           ;main.c: 846: PORTA = 0X00;
  3378                           
  3379                           ;main.c: 847: PORTB = 0X00;
  3380  0572  247B               	fcall	PL6	;call to abstracted procedure
  3381                           
  3382                           ;main.c: 851: PR2 = 249;
  3383  0573  30F9               	movlw	249
  3384  0574  0091               	movwf	17	;volatile
  3385                           
  3386                           ;main.c: 852: TMR2IF = 0;
  3387  0575  108D               	bcf	13,1	;volatile
  3388                           
  3389                           ;main.c: 853: TMR2IE = 1;
  3390  0576  148E               	bsf	14,1	;volatile
  3391                           
  3392                           ;main.c: 855: T2CON = 0B00000100;
  3393  0577  3004               	movlw	4
  3394  0578  0093               	movwf	19	;volatile
  3395                           
  3396                           ;main.c: 856: INTCON = 0XC0;
  3397  0579  30C0               	movlw	192
  3398  057A  008B               	movwf	11	;volatile
  3399  057B  0008               	return
  3400  057C                     __end_of_Init_System:	
  3401                           
  3402                           	psect	text17
  3403  05D2                     __ptext17:	
  3404 ;; *************** function _AD_Init *****************
  3405 ;; Defined at:
  3406 ;;		line 868 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2
  3415 ;; Tracked objects:
  3416 ;;		On entry : 100/0
  3417 ;;		On exit  : 100/100
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1
  3420 ;;      Params:         0       0       0
  3421 ;;      Locals:         0       0       0
  3422 ;;      Temps:          0       0       0
  3423 ;;      Totals:         0       0       0
  3424 ;;Total ram usage:        0 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    2
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_main
  3431 ;;		_Sleep_Mode
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _AD_Init
  3437  05D2                     _AD_Init:	
  3438  05D2                     l2146:	
  3439                           ;incstack = 0
  3440                           ; Regs used in _AD_Init: [wreg+status,2]
  3441                           
  3442                           
  3443                           ;main.c: 901: ADCON0 = 0X41;
  3444  05D2  3041               	movlw	65
  3445  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  3446  05D4  0095               	movwf	21	;volatile
  3447                           
  3448                           ;main.c: 918: ADCON1 = 0;
  3449  05D5  0196               	clrf	22	;volatile
  3450                           
  3451                           ;main.c: 919: ANSEL0 = 0X07;
  3452  05D6  3007               	movlw	7
  3453  05D7  0093               	movwf	19	;volatile
  3454                           
  3455                           ;main.c: 920: ANSEL1 = 0x00;
  3456  05D8  0194               	clrf	20	;volatile
  3457  05D9  0008               	return
  3458  05DA                     __end_of_AD_Init:	
  3459                           
  3460                           	psect	text18
  3461  050E                     __ptext18:	
  3462 ;; *************** function _Isr_Timer *****************
  3463 ;; Defined at:
  3464 ;;		line 130 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 100/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1
  3478 ;;      Params:         0       0       0
  3479 ;;      Locals:         0       0       0
  3480 ;;      Temps:          3       0       0
  3481 ;;      Totals:         3       0       0
  3482 ;;Total ram usage:        3 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    1
  3485 ;; This function calls:
  3486 ;;		_ledShow
  3487 ;; This function is called by:
  3488 ;;		Interrupt level 1
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           
  3493                           ;psect for function _Isr_Timer
  3494  050E                     _Isr_Timer:	
  3495                           
  3496                           ;main.c: 132: if(TMR2IF)
  3497  050E  1283               	bcf	3,5	;RP0=0, select bank0
  3498  050F  1C8D               	btfss	13,1	;volatile
  3499  0510  2D22               	goto	i1l684
  3500                           
  3501                           ;main.c: 133: {
  3502                           ;main.c: 134: TMR2IF = 0;
  3503  0511  108D               	bcf	13,1	;volatile
  3504                           
  3505                           ;main.c: 135: if(++intCount >= 160)
  3506  0512  30A0               	movlw	160
  3507  0513  0ACE               	incf	_intCount,f
  3508  0514  024E               	subwf	_intCount,w
  3509  0515  1C03               	skipc
  3510  0516  2D1F               	goto	i1l2850
  3511  0517  3064               	movlw	100
  3512                           
  3513                           ;main.c: 136: {
  3514                           ;main.c: 137: intCount = 0;
  3515  0518  01CE               	clrf	_intCount
  3516                           
  3517                           ;main.c: 138: IntFlag = 1;
  3518  0519  01CC               	clrf	_IntFlag
  3519  051A  0ACC               	incf	_IntFlag,f
  3520                           
  3521                           ;main.c: 139: if(++count1s >= 100)
  3522  051B  0ACD               	incf	_count1s,f
  3523  051C  024D               	subwf	_count1s,w
  3524  051D  1803               	btfsc	3,0
  3525                           
  3526                           ;main.c: 140: {
  3527                           ;main.c: 141: count1s = 0;
  3528  051E  01CD               	clrf	_count1s
  3529  051F                     i1l2850:	
  3530                           
  3531                           ;main.c: 142: }
  3532                           ;main.c: 143: }
  3533                           ;main.c: 144: ledShow();
  3534  051F  21EB               	fcall	_ledShow
  3535                           
  3536                           ;main.c: 145: intCount10++;
  3537  0520  1283               	bcf	3,5	;RP0=0, select bank0
  3538  0521  0ACA               	incf	_intCount10,f
  3539  0522                     i1l684:	
  3540  0522  0872               	movf	??_Isr_Timer+2,w
  3541  0523  008A               	movwf	10
  3542  0524  0871               	movf	??_Isr_Timer+1,w
  3543  0525  0084               	movwf	4
  3544  0526  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3545  0527  0083               	movwf	3
  3546  0528  0EFE               	swapf	126,f
  3547  0529  0E7E               	swapf	126,w
  3548  052A  0009               	retfie
  3549  052B                     __end_of_Isr_Timer:	
  3550                           
  3551                           	psect	intentry
  3552  0004                     __pintentry:	
  3553                           ;incstack = 0
  3554                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3555                           
  3556  0004                     interrupt_function:	
  3557  007E                     saved_w	set	btemp
  3558  0004  00FE               	movwf	btemp
  3559  0005  0E03               	swapf	3,w
  3560  0006  00F0               	movwf	??_Isr_Timer
  3561  0007  0804               	movf	4,w
  3562  0008  00F1               	movwf	??_Isr_Timer+1
  3563  0009  080A               	movf	10,w
  3564  000A  00F2               	movwf	??_Isr_Timer+2
  3565  000B  2D0E               	ljmp	_Isr_Timer
  3566                           
  3567                           	psect	text19
  3568  01EB                     __ptext19:	
  3569 ;; *************** function _ledShow *****************
  3570 ;; Defined at:
  3571 ;;		line 199 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : 100/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1
  3585 ;;      Params:         0       0       0
  3586 ;;      Locals:         0       0       0
  3587 ;;      Temps:          0       0       0
  3588 ;;      Totals:         0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; This function calls:
  3592 ;;		Nothing
  3593 ;; This function is called by:
  3594 ;;		_Isr_Timer
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _ledShow
  3600  01EB                     _ledShow:	
  3601                           
  3602                           ;main.c: 201: if(++ledCntTime > 5)
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3606  01EB  3006               	movlw	6
  3607  01EC  0AB5               	incf	_ledCntTime,f
  3608  01ED  0235               	subwf	_ledCntTime,w
  3609  01EE  1C03               	skipc
  3610  01EF  0008               	return
  3611  01F0  3011               	movlw	17
  3612                           
  3613                           ;main.c: 202: {
  3614                           ;main.c: 203: ledCntTime = 0;
  3615  01F1  01B5               	clrf	_ledCntTime
  3616                           
  3617                           ;main.c: 204: if(++ledCnt > 16)
  3618  01F2  0AC6               	incf	_ledCnt,f
  3619  01F3  0246               	subwf	_ledCnt,w
  3620  01F4  1803               	btfsc	3,0
  3621                           
  3622                           ;main.c: 205: {
  3623                           ;main.c: 206: ledCnt = 0;
  3624  01F5  01C6               	clrf	_ledCnt
  3625                           
  3626                           ;main.c: 207: }
  3627                           ;main.c: 208: PORTA &= 0xE7;
  3628  01F6  30E7               	movlw	231
  3629  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  3630  01F8  0586               	andwf	6,f	;volatile
  3631                           
  3632                           ;main.c: 209: PORTB &= 0xDC;
  3633  01F9  30DC               	movlw	220
  3634  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3635  01FB  0586               	andwf	6,f	;volatile
  3636                           
  3637                           ;main.c: 210: TRISA |= 0x18;
  3638  01FC  3018               	movlw	24
  3639  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  3640  01FE  0485               	iorwf	5,f	;volatile
  3641                           
  3642                           ;main.c: 211: TRISB |= 0x23;
  3643  01FF  3023               	movlw	35
  3644  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0201  0485               	iorwf	5,f	;volatile
  3646                           
  3647                           ;main.c: 212: switch(ledCnt)
  3648  0202  2A86               	goto	i1l2418
  3649  0203                     i1l705:	
  3650                           ;main.c: 213: {
  3651                           ;main.c: 214: case 1:
  3652                           
  3653                           
  3654                           ;main.c: 215: if(shiweiNum & 0x01)
  3655  0203  1C62               	btfss	_shiweiNum,0
  3656  0204  0008               	return
  3657                           
  3658                           ;main.c: 216: {
  3659                           ;main.c: 217: TRISB &= 0xDF;
  3660  0205  1285               	bcf	5,5	;volatile
  3661                           
  3662                           ;main.c: 218: TRISB &= 0xFE;
  3663  0206  1005               	bcf	5,0	;volatile
  3664                           
  3665                           ;main.c: 219: RB5 = 1;
  3666  0207  1686               	bsf	6,5	;volatile
  3667                           
  3668                           ;main.c: 220: RB0 = 0;
  3669  0208  1006               	bcf	6,0	;volatile
  3670  0209  0008               	return
  3671  020A                     i1l708:	
  3672                           ;main.c: 223: case 2:
  3673                           
  3674                           
  3675                           ;main.c: 224: if(shiweiNum & 0x02)
  3676  020A  1CE2               	btfss	_shiweiNum,1
  3677  020B  0008               	return
  3678                           
  3679                           ;main.c: 225: {
  3680                           ;main.c: 226: TRISB &= 0xDF;
  3681  020C  1285               	bcf	5,5	;volatile
  3682                           
  3683                           ;main.c: 227: TRISB &= 0xFE;
  3684  020D  1005               	bcf	5,0	;volatile
  3685                           
  3686                           ;main.c: 228: RB0 = 1;
  3687  020E  1406               	bsf	6,0	;volatile
  3688                           
  3689                           ;main.c: 229: RB5 = 0;
  3690  020F  1286               	bcf	6,5	;volatile
  3691  0210  0008               	return
  3692  0211                     i1l710:	
  3693                           ;main.c: 232: case 3:
  3694                           
  3695                           
  3696                           ;main.c: 233: if(shiweiNum & 0x04)
  3697  0211  1D62               	btfss	_shiweiNum,2
  3698  0212  0008               	return
  3699                           
  3700                           ;main.c: 234: {
  3701                           ;main.c: 235: TRISB &= 0xDF;
  3702  0213  1285               	bcf	5,5	;volatile
  3703                           
  3704                           ;main.c: 236: TRISA &= 0xF7;
  3705  0214  1683               	bsf	3,5	;RP0=1, select bank1
  3706  0215  1185               	bcf	5,3	;volatile
  3707                           
  3708                           ;main.c: 237: RB5 = 1;
  3709  0216  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0217  1686               	bsf	6,5	;volatile
  3711                           
  3712                           ;main.c: 238: RA3 = 0;
  3713  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3714  0219  1186               	bcf	6,3	;volatile
  3715  021A  0008               	return
  3716  021B                     i1l712:	
  3717                           ;main.c: 241: case 4:
  3718                           
  3719                           
  3720                           ;main.c: 242: if(shiweiNum & 0x08)
  3721  021B  1DE2               	btfss	_shiweiNum,3
  3722  021C  0008               	return
  3723                           
  3724                           ;main.c: 243: {
  3725                           ;main.c: 244: TRISB &= 0xFE;
  3726  021D  1005               	bcf	5,0	;volatile
  3727                           
  3728                           ;main.c: 245: TRISA &= 0xF7;
  3729  021E  1683               	bsf	3,5	;RP0=1, select bank1
  3730  021F  1185               	bcf	5,3	;volatile
  3731                           
  3732                           ;main.c: 246: RB0 = 1;
  3733  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0221  1406               	bsf	6,0	;volatile
  3735                           
  3736                           ;main.c: 247: RA3 = 0;
  3737  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3738  0223  1186               	bcf	6,3	;volatile
  3739  0224  0008               	return
  3740  0225                     i1l714:	
  3741                           ;main.c: 250: case 5:
  3742                           
  3743                           
  3744                           ;main.c: 251: if(shiweiNum & 0x10)
  3745  0225  1E62               	btfss	_shiweiNum,4
  3746  0226  0008               	return
  3747                           
  3748                           ;main.c: 252: {
  3749                           ;main.c: 253: TRISB &= 0xFE;
  3750  0227  1005               	bcf	5,0	;volatile
  3751                           
  3752                           ;main.c: 254: TRISA &= 0xEF;
  3753  0228  1683               	bsf	3,5	;RP0=1, select bank1
  3754  0229  1205               	bcf	5,4	;volatile
  3755                           
  3756                           ;main.c: 255: RB0 = 1;
  3757  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3758  022B  1406               	bsf	6,0	;volatile
  3759                           
  3760                           ;main.c: 256: RA4 = 0;
  3761  022C  1683               	bsf	3,5	;RP0=1, select bank1
  3762  022D  1206               	bcf	6,4	;volatile
  3763  022E  0008               	return
  3764  022F                     i1l716:	
  3765                           ;main.c: 259: case 6:
  3766                           
  3767                           
  3768                           ;main.c: 260: if(shiweiNum & 0x20)
  3769  022F  1EE2               	btfss	_shiweiNum,5
  3770  0230  0008               	return
  3771                           
  3772                           ;main.c: 261: {
  3773                           ;main.c: 262: TRISB &= 0xDF;
  3774  0231  1285               	bcf	5,5	;volatile
  3775                           
  3776                           ;main.c: 263: TRISA &= 0xEF;
  3777  0232  1683               	bsf	3,5	;RP0=1, select bank1
  3778  0233  1205               	bcf	5,4	;volatile
  3779                           
  3780                           ;main.c: 264: RB5 = 1;
  3781  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3782  0235  1686               	bsf	6,5	;volatile
  3783                           
  3784                           ;main.c: 265: RA4 = 0;
  3785  0236  1683               	bsf	3,5	;RP0=1, select bank1
  3786  0237  1206               	bcf	6,4	;volatile
  3787  0238  0008               	return
  3788  0239                     i1l718:	
  3789                           ;main.c: 268: case 7:
  3790                           
  3791                           
  3792                           ;main.c: 269: if(shiweiNum & 0x40)
  3793  0239  1F62               	btfss	_shiweiNum,6
  3794  023A  0008               	return
  3795                           
  3796                           ;main.c: 270: {
  3797                           ;main.c: 271: TRISA &= 0xF7;
  3798  023B  1683               	bsf	3,5	;RP0=1, select bank1
  3799  023C  1185               	bcf	5,3	;volatile
  3800                           
  3801                           ;main.c: 272: TRISA &= 0xEF;
  3802  023D  1205               	bcf	5,4	;volatile
  3803                           
  3804                           ;main.c: 273: RA3 = 1;
  3805  023E  1586               	bsf	6,3	;volatile
  3806                           
  3807                           ;main.c: 274: RA4 = 0;
  3808  023F  1206               	bcf	6,4	;volatile
  3809  0240  0008               	return
  3810  0241                     i1l720:	
  3811                           ;main.c: 277: case 8:
  3812                           
  3813                           
  3814                           ;main.c: 278: if(geweiNum & 0x01)
  3815  0241  1C61               	btfss	_geweiNum,0
  3816  0242  0008               	return
  3817                           
  3818                           ;main.c: 279: {
  3819                           ;main.c: 280: TRISB &= 0xFD;
  3820  0243  1085               	bcf	5,1	;volatile
  3821                           
  3822                           ;main.c: 281: TRISB &= 0xFE;
  3823  0244  1005               	bcf	5,0	;volatile
  3824                           
  3825                           ;main.c: 282: RB0 = 1;
  3826  0245  1406               	bsf	6,0	;volatile
  3827                           
  3828                           ;main.c: 283: RB1 = 0;
  3829  0246  1086               	bcf	6,1	;volatile
  3830  0247  0008               	return
  3831  0248                     i1l722:	
  3832                           ;main.c: 286: case 9:
  3833                           
  3834                           
  3835                           ;main.c: 287: if(geweiNum & 0x02)
  3836  0248  1CE1               	btfss	_geweiNum,1
  3837  0249  0008               	return
  3838                           
  3839                           ;main.c: 288: {
  3840                           ;main.c: 289: TRISB &= 0xFD;
  3841  024A  1085               	bcf	5,1	;volatile
  3842                           
  3843                           ;main.c: 290: TRISB &= 0xFE;
  3844  024B  1005               	bcf	5,0	;volatile
  3845                           
  3846                           ;main.c: 291: RB1 = 1;
  3847  024C  1486               	bsf	6,1	;volatile
  3848                           
  3849                           ;main.c: 292: RB0 = 0;
  3850  024D  1006               	bcf	6,0	;volatile
  3851  024E  0008               	return
  3852  024F                     i1l724:	
  3853                           ;main.c: 295: case 10:
  3854                           
  3855                           
  3856                           ;main.c: 296: if(geweiNum & 0x04)
  3857  024F  1D61               	btfss	_geweiNum,2
  3858  0250  0008               	return
  3859                           
  3860                           ;main.c: 297: {
  3861                           ;main.c: 298: TRISB &= 0xFD;
  3862  0251  1085               	bcf	5,1	;volatile
  3863                           
  3864                           ;main.c: 299: TRISB &= 0xDF;
  3865  0252  1285               	bcf	5,5	;volatile
  3866                           
  3867                           ;main.c: 300: RB5 = 1;
  3868  0253  1686               	bsf	6,5	;volatile
  3869                           
  3870                           ;main.c: 301: RB1 = 0;
  3871  0254  1086               	bcf	6,1	;volatile
  3872  0255  0008               	return
  3873  0256                     i1l726:	
  3874                           ;main.c: 304: case 11:
  3875                           
  3876                           
  3877                           ;main.c: 305: if(geweiNum & 0x08)
  3878  0256  1DE1               	btfss	_geweiNum,3
  3879  0257  0008               	return
  3880                           
  3881                           ;main.c: 306: {
  3882                           ;main.c: 307: TRISB &= 0xFD;
  3883  0258  1085               	bcf	5,1	;volatile
  3884                           
  3885                           ;main.c: 308: TRISB &= 0xDF;
  3886  0259  1285               	bcf	5,5	;volatile
  3887                           
  3888                           ;main.c: 309: RB1 = 1;
  3889  025A  1486               	bsf	6,1	;volatile
  3890                           
  3891                           ;main.c: 310: RB5 = 0;
  3892  025B  1286               	bcf	6,5	;volatile
  3893  025C  0008               	return
  3894  025D                     i1l728:	
  3895                           ;main.c: 313: case 12:
  3896                           
  3897                           
  3898                           ;main.c: 314: if(geweiNum & 0x10)
  3899  025D  1E61               	btfss	_geweiNum,4
  3900  025E  0008               	return
  3901                           
  3902                           ;main.c: 315: {
  3903                           ;main.c: 316: TRISB &= 0xFD;
  3904  025F  1085               	bcf	5,1	;volatile
  3905                           
  3906                           ;main.c: 317: TRISA &= 0xF7;
  3907  0260  1683               	bsf	3,5	;RP0=1, select bank1
  3908  0261  1185               	bcf	5,3	;volatile
  3909                           
  3910                           ;main.c: 318: RA3 = 1;
  3911  0262  1586               	bsf	6,3	;volatile
  3912                           
  3913                           ;main.c: 319: RB1 = 0;
  3914  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0264  1086               	bcf	6,1	;volatile
  3916  0265  0008               	return
  3917  0266                     i1l730:	
  3918                           ;main.c: 322: case 13:
  3919                           
  3920                           
  3921                           ;main.c: 323: if(geweiNum & 0x20)
  3922  0266  1EE1               	btfss	_geweiNum,5
  3923  0267  0008               	return
  3924                           
  3925                           ;main.c: 324: {
  3926                           ;main.c: 325: TRISB &= 0xFD;
  3927  0268  1085               	bcf	5,1	;volatile
  3928                           
  3929                           ;main.c: 326: TRISA &= 0xF7;
  3930  0269  1683               	bsf	3,5	;RP0=1, select bank1
  3931  026A  1185               	bcf	5,3	;volatile
  3932                           
  3933                           ;main.c: 327: RB1 = 1;
  3934  026B  1283               	bcf	3,5	;RP0=0, select bank0
  3935  026C  1486               	bsf	6,1	;volatile
  3936                           
  3937                           ;main.c: 328: RA3 = 0;
  3938  026D  1683               	bsf	3,5	;RP0=1, select bank1
  3939  026E  1186               	bcf	6,3	;volatile
  3940  026F  0008               	return
  3941  0270                     i1l732:	
  3942                           ;main.c: 331: case 0:
  3943                           
  3944                           
  3945                           ;main.c: 332: if(geweiNum & 0x40)
  3946  0270  1F61               	btfss	_geweiNum,6
  3947  0271  0008               	return
  3948                           
  3949                           ;main.c: 333: {
  3950                           ;main.c: 334: TRISB &= 0xFD;
  3951  0272  1085               	bcf	5,1	;volatile
  3952                           
  3953                           ;main.c: 335: TRISA &= 0xEF;
  3954  0273  1683               	bsf	3,5	;RP0=1, select bank1
  3955  0274  1205               	bcf	5,4	;volatile
  3956                           
  3957                           ;main.c: 336: RB1 = 1;
  3958  0275  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0276  1486               	bsf	6,1	;volatile
  3960                           
  3961                           ;main.c: 337: RA4 = 0;
  3962  0277  1683               	bsf	3,5	;RP0=1, select bank1
  3963  0278  1206               	bcf	6,4	;volatile
  3964  0279  0008               	return
  3965  027A                     i1l2398:	
  3966                           
  3967                           ;main.c: 341: if(chrgFlag == 0 && RB2 == 0)
  3968  027A  087A               	movf	_chrgFlag,w
  3969  027B  1903               	btfsc	3,2
  3970  027C  1906               	btfsc	6,2	;volatile
  3971  027D  0008               	return
  3972                           
  3973                           ;main.c: 342: {
  3974                           ;main.c: 343: TRISB &= 0xFE;
  3975  027E  1005               	bcf	5,0	;volatile
  3976                           
  3977                           ;main.c: 344: TRISA &= 0xF7;
  3978  027F  1683               	bsf	3,5	;RP0=1, select bank1
  3979  0280  1185               	bcf	5,3	;volatile
  3980                           
  3981                           ;main.c: 345: RA3 = 1;
  3982  0281  1586               	bsf	6,3	;volatile
  3983                           
  3984                           ;main.c: 346: RB0 = 0;
  3985  0282  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0283  1006               	bcf	6,0	;volatile
  3987  0284  0008               	return
  3988  0285                     i1l2404:	
  3989  0285                     i1l2410:	
  3990                           ;main.c: 350: if(chrgFlag == 0 && RB2 == 0)
  3991                           
  3992  0285  2A7A               	goto	i1l2398
  3993  0286                     i1l2418:	
  3994                           ;main.c: 359: if(chrgFlag == 0 && RB2 == 0)
  3995                           
  3996  0286  0846               	movf	_ledCnt,w
  3997                           
  3998                           ; Switch size 1, requested type "space"
  3999                           ; Number of cases is 17, Range of values is 0 to 16
  4000                           ; switch strategies available:
  4001                           ; Name         Instructions Cycles
  4002                           ; direct_byte           23     6 (fixed)
  4003                           ; simple_byte           52    27 (average)
  4004                           ; jumptable            260     6 (fixed)
  4005                           ;	Chosen strategy is direct_byte
  4006  0287  0084               	movwf	4
  4007  0288  3011               	movlw	17
  4008  0289  0204               	subwf	4,w
  4009  028A  1803               	skipnc
  4010  028B  0008               	return
  4011  028C  3005               	movlw	high i1S3242
  4012  028D  008A               	movwf	10
  4013  028E  30A1               	movlw	low i1S3242
  4014  028F  0704               	addwf	4,w
  4015  0290  0082               	movwf	2
  4016  0291  0008               	return
  4017  0292                     __end_of_ledShow:	
  4018  007E                     btemp	set	126	;btemp
  4019  007E                     wtemp0	set	126
  4020                           
  4021                           	psect	swtext1
  4022  05A1                     __pswtext1:	
  4023  05A1                     i1S3242:	
  4024  05A1  2A70               	ljmp	i1l732
  4025  05A2  2A03               	ljmp	i1l705
  4026  05A3  2A0A               	ljmp	i1l708
  4027  05A4  2A11               	ljmp	i1l710
  4028  05A5  2A1B               	ljmp	i1l712
  4029  05A6  2A25               	ljmp	i1l714
  4030  05A7  2A2F               	ljmp	i1l716
  4031  05A8  2A39               	ljmp	i1l718
  4032  05A9  2A41               	ljmp	i1l720
  4033  05AA  2A48               	ljmp	i1l722
  4034  05AB  2A4F               	ljmp	i1l724
  4035  05AC  2A56               	ljmp	i1l726
  4036  05AD  2A5D               	ljmp	i1l728
  4037  05AE  2A66               	ljmp	i1l730
  4038  05AF  2A7A               	ljmp	i1l2398
  4039  05B0  2A85               	ljmp	i1l2404
  4040  05B1  2A85               	ljmp	i1l2410


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         52
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      68
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2651
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     630
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            1     1      0     977
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      44       4       85.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      4F       7        0.0%
DATA                 0      0      4F       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 30 10:48:10 2025

            _protectFlag 0048                        pc 0002                       PL2 01CE  
                     PL4 01DD                       PL6 047B                       PL8 00FC  
                     fsr 0004                      PL10 059D                      PL12 01E6  
                    PL14 0393                      l801 04D1                      l816 0507  
                    l913 0134                      l923 01B3                      l693 0414  
                    l919 016F                      l689 03FA                      _GIE 005F  
                    _RB0 0030                      _RA3 0433                      _RB1 0031  
                    _RA4 0434                      _RB2 0032                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 05DA                     l2202 04DE                     l3010 052F  
                   l2212 04E5                     l3110 032B                     l1190 0553  
                   l3104 0322                     l3112 032D                     l3040 04A1  
                   l2152 05DA                     l2146 05D2                     l3050 04B7  
                   l3018 0543                     l3052 04B9                     l2332 0560  
                   l3140 035D                     l3132 034B                     l3124 0340  
                   l3220 0440                     l3070 02B8                     l3038 04A0  
                   l2510 0061                     l2502 0054                     l2318 054D  
                   l2520 006E                     l3160 0390                     l3152 0378  
                   l3082 02E5                     l2530 0088                     l3092 02F9  
                   l2540 00A4                     l2532 008A                     l2188 04CC  
                   l3148 036E                     l2550 00B1                     l2518 006C  
                   l3158 0382                     l2710 03C5                     l2702 03B9  
                   l3174 0402                     l3088 02F2                     l2552 00B3  
                   l2536 008E                     l2480 0035                     l2570 00D7  
                   l2546 00AE                     l2466 0023                     l2730 03E3  
                   l2722 03D7                     l2714 03CB                     l2706 03BF  
                   l2564 00D2                     l2492 0048                     l2590 00F9  
                   l2566 00D3                     l2478 0033                     l2574 00DE  
                   l2662 04FC                     l2726 03DD                     l2718 03D1  
                   l3198 0423                     l2496 004A                     l2736 03EC  
                   l2690 03A7                     l2694 03AD                     l2686 03A3  
                   l2960 011F                     l2944 0114                     l2970 013F  
                   l2954 011E                     l2946 0116                     l2698 03B3  
                   l2982 0163                     l2984 016B                     l2994 01B7  
                   l2978 0159                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3105 015F                     u2305 00A2  
                   u3115 0169                     u2345 00C6                     u3155 01A9  
                   u3325 02D7                     u3175 01C0                     _PIE1 000E  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3657 04BE  
                   u3667 02F7                     u3677 0332                     u3687 0110  
                   _PIR1 000D                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 03F0                     btemp 007E  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 0562          __end_of___lbmod 0547                    _T2CON 0013  
                  i1l710 0211                    i1l720 0241                    i1l712 021B  
                  i1l705 0203                    i1l730 0266                    i1l722 0248  
                  i1l714 0225                    i1l732 0270                    i1l724 024F  
                  i1l716 022F                    i1l708 020A                    i1l726 0256  
                  i1l718 0239                    i1l728 025D                    i1l684 0522  
          _countHalfFull 0049                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 00FC          __end_of_ledShow 0292  
        __end_of_keyRead 04EB                    pclath 000A          __end_of_pwmInit 05C2  
        __end_of_pwmStop 05D2                    status 0003                    wtemp0 007E  
        __end_of_workCtr 03F0          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 0442     __size_of_chrgPwmInit 000D  
   __size_of_chrgPwmStop 0007                   ??_main 0077                ??_AD_Init 0073  
    __end_of_Init_System 057C                   _ADCON0 0095                   _ADCON1 0096  
                 i1S3242 05A1                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _ANSEL1 0094                   _GODONE 04A9  
                 i1l2410 0285                   i1l2404 0285                   i1l2418 0286  
                 i1l2398 027A                   i1l2850 051F                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B                   _PWMD3L 009C  
           ??_ADC_Sample 0050             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 0442                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 0046                   _ledCtr 0335                   _keyCtr 04EB  
              ??_chrgCtr 0073                   _pwStep 0040                   _result 002E  
              ??_ledShow 0070         __end_of_numArray 0590                ??_keyRead 0073  
     __end_of_ADC_Sample 01CE                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 0028          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0051          _workOverOutTime 0047           __pcstackCOMMON 0070  
     __size_of_checkOutA 003D              _Init_System 0562               __end_ofPL2 01DD  
             __end_ofPL4 01E6               __end_ofPL6 0484               __end_ofPL8 0102  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 052B               _checkBatAD 0292  
             __pbssBANK0 0020             _chrgFullFlag 004B              ?_Sleep_Mode 0070  
             __pmaintext 03F0               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 0037                  ?_keyCtr 0070               _ledCntTime 0035  
                _AD_Init 05D2                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 04C1               __stringtab 057C                  _IntFlag 004C  
             _intCount10 004A          ADC_Sample@adldo 0073          ADC_Sample@admax 005D  
        ADC_Sample@admin 005B          ADC_Sample@adsum 0057                  ___lbdiv 0547  
                ___lbmod 052B                  _addTime 0039          __size_of_ledCtr 005E  
        __size_of_keyCtr 0023                  _chrgCtr 0018               _lowBatFlag 0033  
                __ptext1 0398                  __ptext2 05B2                  __ptext3 0335  
                __ptext4 052B                  __ptext5 0547                  __ptext6 04EB  
                __ptext7 04C1                  __ptext8 0018                  __ptext9 05CA  
                _ledShow 01EB                  _count1s 004D                  _count8s 0022  
                _maxDuty 0043                  _keyRead 04C1      __size_of_Sleep_Mode 0039  
                _pwmInit 05B2                  _subTime 0038              ?_checkBatAD 0070  
                _pwmStop 05CA                  clrloop0 05C3                  _workCtr 0398  
             _outADValue 002A     end_of_initialization 0016            _longPressFlag 0044  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0050  
            ___lbmod@rem 0052      __size_of_checkBatAD 00A3             ?_Init_System 0070  
         __end_of_ledCtr 0393           __end_of_keyCtr 050E      __end_of_chrgPwmInit 059D  
    __end_of_chrgPwmStop 05E1              __end_ofPL10 05A1              __end_ofPL12 01EB  
            __end_ofPL14 0398      start_initialization 000D                _Isr_Timer 050E  
           ??_Sleep_Mode 0073                 ??_ledCtr 0077        ADC_Sample@ad_temp 005F  
               ??_keyCtr 0074                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0050       __end_of_Sleep_Mode 047B  
             ?_Isr_Timer 0070                _checkOutA 0484                __pnvBANK0 0061  
            _chrgMaxDuty 0036                _chrgMaxAD 003B              _chrgPwmFlag 0031  
            _chrgPwmInit 0590                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05DA                 ?_chrgCtr 0070                __pstrings 057C  
              __pswtext1 05A1                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 0063           ADC_Sample@adch 0055  
               ?_pwmInit 0070                _fullCount 0024             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003A                 ?_workCtr 0070  
            ADC_Sample@i 0056              ADC_Sample@j 0054        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 05C2                _prePwStep 003F  
            _reChrgCount 003E                _sleepTime 0032                _shiweiNum 0062  
     __end_of_checkBatAD 0335              __stringbase 0581     __size_of_Init_System 001A  
              _startTime 0042         __size_of_AD_Init 0008         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 0102         __size_of___lbdiv 001B  
       __size_of___lbmod 001C       __end_of__stringtab 0582         __size_of_chrgCtr 00E4  
       __size_of_ledShow 00A7         __size_of_keyRead 002A                 _adresult 0077  
               _chrgFlag 007A                 _chrgMode 003C                 __ptext10 05DA  
               __ptext11 0590                 __ptext12 0484                 __ptext13 0292  
               __ptext14 0102                 __ptext15 0442                 __ptext16 0562  
               __ptext17 05D2                 __ptext18 050E                 __ptext19 01EB  
       __size_of_pwmInit 0010         __size_of_pwmStop 0008                 _geweiNum 0061  
               _count50s 0026         __size_of_workCtr 0058                 _keyCount 0045  
               _intCount 004E            __size_of_main 0052              ??_checkOutA 0074  
               _numArray 0582                 _test_adc 004F                 _power_ad 002C  
               _workStep 0079             _overChrgTime 0041             _motorPwmFlag 0030  
               intlevel1 0000              ?_ADC_Sample 0073                stringcode 057C  
           ?_chrgPwmInit 0070             _overWorkTime 0034             ?_chrgPwmStop 0070  
            _showBatTime 003D               _OPTION_REG 0001                 stringdir 057C  
               stringtab 057C  
