---- C:\mcuproject\scm\zdt\D108_8F083_tssop20_无转头\D108_8F083_tssop20_\main.c ----------------------------------------------------------------------
1:                #include <sc.h>
2:                #include "Touch_Kscan_Library.h"
3:                
4:                #ifndef _XTAL_FREQ
5:                #define _XTAL_FREQ 8000000			//8MHz,使用内置延时函数必须定义主频，
6:                									//如用16M需改此参数为16000000
7:                #endif
8:                #define     POWER_RATIO  	(4096UL*1.2*1000)
9:                
10:               #define		uchar		unsigned char
11:               #define		u8t		unsigned char
12:               #define		uint			unsigned int
13:               #define		u16t			unsigned int
14:               #define		ulong		unsigned long
15:               #define		MOT1		RA5
16:               #define		MOT2		RA6
17:               #define		MOT3		RA7
18:               #define		MOT4		RB7
19:               
20:               volatile unsigned char MainTime;
21:               volatile bit	B_MainLoop,B_OnOff;
22:               u8t	count1s = 0;
23:               u8t	workStep = 0;
24:               u8t	wuhuaFlag = 0;
25:               u16t		shanshuoTime = 0;
26:               u16t		shanshuoTime2 = 0;
27:               u16t		shanshuoTime3 = 0;
28:               u16t		fanValue = 0;
29:               u16t		wuhuaValue = 0;
30:               u8t	fanDuty = 0;
31:               u8t	count10s = 0;
32:               u8t	fanOverTime = 0;
33:               u8t	firstTime = 0;
34:               u16t	checkTime = 0;
35:               u16t	lowWaterTime = 0;
36:               u8t		chrgFlag = 0;
37:               u8t		chrgFullFlag = 0;
38:               u8t		chrgFullTime = 0;
39:               u8t		firstLock = 0;
40:               u8t		lowBatLock = 0;
41:               u8t		lowBatTime = 0;	
42:               u8t		lowFanTime = 0;//风扇降低为1档的时间
43:               u8t		bujinFlag = 0;	
44:               u16t	motorStep = 0;
45:               u16t	maxMotorStep = 0;
46:               u8t		powerFlag = 0;
47:               u8t		longKeyFlag = 0;
48:               u16t		keyCount = 0;
49:               u8t		closeTime = 0;
50:               
51:               volatile unsigned int adresult;
52:               volatile unsigned int result;
53:               volatile unsigned char test_adc;
54:               volatile unsigned int power_ad;
55:               
56:               void chrgCtr();
57:               unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
58:               
59:               //系统初始化
60:               void Init_System()
  041A    0000    NOP
  041B    0064    CLRWDT
61:               {
62:               	asm("nop");
63:               	asm("clrwdt");
64:               	INTCON = 0;				//禁止中断
  041C    018B    CLR	0xB
65:               	OSCCON = 0X72;			//配置振荡为8M
  041D    3072    LDIA	0x72
  041E    1283    CLRB	0x3,5
  041F    1303    CLRB	0x3,6
  0420    0094    LD	0x14,A
66:               	OPTION_REG = 0;
  0421    0181    CLR	0x1
67:               	
68:               	
69:               	//延时等待电源电压稳定
70:               	//DelayXms(200);
71:               	TRISA = 0x04;
  0422    3004    LDIA	0x4
  0423    1683    SETB	0x3,5
  0424    0085    LD	0x5,A
72:               	PORTA = 0;
  0425    0186    CLR	0x6
73:               	TRISB = 0x20;
  0426    3020    LDIA	0x20
  0427    1283    CLRB	0x3,5
  0428    0085    LD	0x5,A
74:               	PORTB = 0;
  0429    0186    CLR	0x6
75:               	WPUB = 0x00;
  042A    0188    CLR	0x8
76:               	TRISC = 0;
  042B    1703    SETB	0x3,6
  042C    0185    CLR	0x5
77:               	PORTC = 0;
  042D    0186    CLR	0x6
78:               
79:               	PIE1 = 2;
  042E    3002    LDIA	0x2
  042F    1303    CLRB	0x3,6
  0430    008E    LD	0xE,A
80:               	PR2 = 250;				//8M下将TMR2设置为125us中断
  0431    30FA    LDIA	0xFA
  0432    0091    LD	0x11,A
81:               	T2CON = 4;				//使能定时器2
  0433    3004    LDIA	0x4
  0434    0093    LD	0x13,A
82:               
83:               	INTCON = 0XC0;			//使能中断
  0435    30C0    LDIA	0xC0
  0436    008B    LD	0xB,A
84:               	ADCON0 = 0X41;
85:               	ADON = 1;
86:               	ADCON1 = 0x00;
  0437    2FDE    JP	0x7DE
87:               }
88:               
89:               
90:               /**********************************************************
91:               函数名称：Refurbish_Sfr
92:               函数功能：刷新一些特殊功能寄存器
93:               入口参数：无
94:               出口参数：无
95:               备    注：每隔一定时间刷新一次SFR可增强抗干扰能力
96:               **********************************************************/
97:               void Refurbish_Sfr() 
98:               {
99:               	//刷新中断相关控制寄存器
100:              	PIE1 = 2;
  077E    3002    LDIA	0x2
  077F    1283    CLRB	0x3,5
  0780    008E    LD	0xE,A
101:              	PR2 = 250;
  0781    30FA    LDIA	0xFA
  0782    0091    LD	0x11,A
102:              	INTCON = 0XC0;
  0783    30C0    LDIA	0xC0
  0784    008B    LD	0xB,A
103:              	if (4 != T2CON)
  0785    3004    LDIA	0x4
  0786    0613    XORA	0x13
  0787    1903    SZB	0x3,2
  0788    0008    RET
104:              		T2CON = 4;
  0789    3004    LDIA	0x4
  078A    0093    LD	0x13,A
  078B    0008    RET
105:              }
106:              
107:              
108:              /***********************************************************
109:              键处理函数
110:              ***********************************************************/
111:              void KeyServer() 
112:              {
113:              	static unsigned char KeyOldFlag = 0;
114:              	if (KeyFlag[0]) 
  0F03    0830    LD	A,0x30
  0F04    1903    SZB	0x3,2
  0F05    2F6C    JP	0x76C
115:              	{
116:              		if (KeyFlag[0] != KeyOldFlag) 
  0F06    0830    LD	A,0x30
  0F07    0638    XORA	0x38
  0F08    1903    SZB	0x3,2
  0F09    2F4D    JP	0x74D
117:              		{
118:              			//确定状态改变的按键
119:              			KeyOldFlag ^= KeyFlag[0];
  0F0A    0830    LD	A,0x30
  0F0B    06B8    XORR	0x38
120:              			if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFlag > 0) 
  0F0C    1838    SZB	0x38,0
  0F0D    1C30    SNZB	0x30,0
  0F0E    2F2D    JP	0x72D
  0F0F    086E    LD	A,0x6E
  0F10    1D03    SNZB	0x3,2
  0F11    2F2D    JP	0x72D
  0F12    083C    LD	A,0x3C
  0F13    1903    SZB	0x3,2
  0F14    2F2D    JP	0x72D
121:              			{
122:              				//KEY1被按下
123:              				if(lowBatLock == 1)
  0F15    0B40    SZDECA	0x40
  0F16    2F1C    JP	0x71C
124:              				{
125:              					shanshuoTime2 = 450;
  0F17    30C2    LDIA	0xC2
  0F18    00AC    LD	0x2C,A
  0F19    3001    LDIA	0x1
  0F1A    00AD    LD	0x2D,A
126:              				}
  0F1B    2F21    JP	0x721
127:              				else if(++wuhuaFlag > 2)
  0F1C    3003    LDIA	0x3
  0F1D    0AC7    INCR	0x47
  0F1E    0247    SUBA	0x47
  0F1F    1803    SZB	0x3,0
128:              				{
129:              					wuhuaFlag = 0;
  0F20    01C7    CLR	0x47
130:              				}
131:              				if(wuhuaFlag >= 2)
  0F21    3002    LDIA	0x2
  0F22    0247    SUBA	0x47
  0F23    1C03    SNZB	0x3,0
  0F24    2F2B    JP	0x72B
132:              				{
133:              					shanshuoTime2 = 450;
  0F25    30C2    LDIA	0xC2
  0F26    00AC    LD	0x2C,A
  0F27    3001    LDIA	0x1
  0F28    00AD    LD	0x2D,A
134:              					count10s = 0;
  0F29    01C5    CLR	0x45
135:              				}
  0F2A    2F2D    JP	0x72D
136:              				else
137:              				{
138:              					shanshuoTime2 = 0;
  0F2B    01AC    CLR	0x2C
  0F2C    01AD    CLR	0x2D
139:              				}
140:              			}
141:              			if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFlag > 0) 
  0F2D    18B8    SZB	0x38,1
  0F2E    1CB0    SNZB	0x30,1
  0F2F    2F4B    JP	0x74B
  0F30    086E    LD	A,0x6E
  0F31    1D03    SNZB	0x3,2
  0F32    2F4B    JP	0x74B
  0F33    083C    LD	A,0x3C
  0F34    1903    SZB	0x3,2
  0F35    2F4B    JP	0x74B
142:              			{
143:              				//KEY2被按下
144:              				if(lowBatLock == 1)
  0F36    0B40    SZDECA	0x40
  0F37    2F3B    JP	0x73B
145:              				{
146:              					shanshuoTime = 450;
  0F38    2771    CALL	0x771
  0F39    158A    SETB	0xA,3
147:              				}
  0F3A    2F42    JP	0x742
148:              				else if(++workStep > 3)
  0F3B    3004    LDIA	0x4
  0F3C    0AFB    INCR	0x7B
  0F3D    027B    SUBA	0x7B
  0F3E    1C03    SNZB	0x3,0
  0F3F    2F42    JP	0x742
149:              				{
150:              					workStep = 0;
  0F40    01FB    CLR	0x7B
151:              					bujinFlag = 0;
  0F41    01BD    CLR	0x3D
152:              				}
153:              				if(workStep >= 2)
  0F42    3002    LDIA	0x2
  0F43    027B    SUBA	0x7B
  0F44    1C03    SNZB	0x3,0
  0F45    2F49    JP	0x749
154:              				{
155:              					shanshuoTime = 450;
  0F46    2771    CALL	0x771
  0F47    158A    SETB	0xA,3
156:              				}
  0F48    2F4B    JP	0x74B
157:              				else
158:              				{
159:              					shanshuoTime = 0;
  0F49    01AE    CLR	0x2E
  0F4A    01AF    CLR	0x2F
160:              				}
161:              				
162:              			}
163:              
164:              			KeyOldFlag = KeyFlag[0];
  0F4B    0830    LD	A,0x30
  0F4C    00B8    LD	0x38,A
165:              		}
166:              		if(firstLock == 0 && KeyOldFlag & 0x4)
  0F4D    086E    LD	A,0x6E
  0F4E    1903    SZB	0x3,2
  0F4F    1D38    SNZB	0x38,2
  0F50    0008    RET
167:              		{
168:              			if(++keyCount >= 400)
  0F51    0AA4    INCR	0x24
  0F52    1903    SZB	0x3,2
  0F53    0AA5    INCR	0x25
  0F54    3001    LDIA	0x1
  0F55    0225    SUBA	0x25
  0F56    3090    LDIA	0x90
  0F57    1903    SZB	0x3,2
  0F58    0224    SUBA	0x24
  0F59    1C03    SNZB	0x3,0
  0F5A    0008    RET
169:              			{
170:              				keyCount = 0;
  0F5B    01A4    CLR	0x24
  0F5C    01A5    CLR	0x25
171:              				if(longKeyFlag == 0)
  0F5D    083B    LD	A,0x3B
  0F5E    1D03    SNZB	0x3,2
  0F5F    0008    RET
172:              				{
173:              					longKeyFlag = 1;
  0F60    01BB    CLR	0x3B
  0F61    0ABB    INCR	0x3B
174:              					if(powerFlag > 0)
  0F62    083C    LD	A,0x3C
  0F63    1903    SZB	0x3,2
  0F64    2F69    JP	0x769
175:              					{
176:              						powerFlag = 0;
  0F65    01BC    CLR	0x3C
177:              						workStep = 0;
  0F66    01FB    CLR	0x7B
178:              						wuhuaFlag = 0;
  0F67    01C7    CLR	0x47
179:              					}
  0F68    0008    RET
180:              					else
181:              					{
182:              						powerFlag = 1;
  0F69    01BC    CLR	0x3C
  0F6A    0ABC    INCR	0x3C
  0F6B    0008    RET
183:              					}
184:              				}
185:              			}
186:              		}
187:              	} 
188:              	else 
189:              	{
190:              		KeyOldFlag = 0;
  0F6C    01B8    CLR	0x38
191:              		longKeyFlag = 0;
  0F6D    01BB    CLR	0x3B
192:              		keyCount = 0;
  0F6E    01A4    CLR	0x24
  0F6F    01A5    CLR	0x25
  0F70    0008    RET
193:              	}
194:              }
195:              
196:              
197:              /***********************************************************
198:              中断服务函数
199:              ***********************************************************/
200:              void interrupt Isr_Timer()
201:              {
202:              	if(TMR2IF)				//若只使能了一个中断源,可以略去判断
  0E8A    1283    CLRB	0x3,5
  0E8B    1303    CLRB	0x3,6
  0E8C    1C8D    SNZB	0xD,1
  0E8D    2E9D    JP	0x69D
203:              	{
204:              		TMR2IF = 0;
  0E8E    108D    CLRB	0xD,1
205:              		if(++MainTime >= 32)	//需根据你选择的触摸路数和触摸电容选择扫描一次按键的时间
  0E8F    3020    LDIA	0x20
  0E90    0AC9    INCR	0x49
  0E91    0249    SUBA	0x49
  0E92    1C03    SNZB	0x3,0
  0E93    2E9E    JP	0x69E
206:              		{						//一般103电容，8路触摸，8M主频检测时间约4ms，故扫描一次的时间可选5ms
207:              			MainTime = 0;
  0E94    01C9    CLR	0x49
208:              			B_MainLoop = 1;
  0E95    1778    SETB	0x78,6
209:              			if(++count1s >= 250)
  0E96    30FA    LDIA	0xFA
  0E97    0AC8    INCR	0x48
  0E98    0248    SUBA	0x48
  0E99    1C03    SNZB	0x3,0
  0E9A    2E9E    JP	0x69E
210:              			{
211:              				count1s = 0;
  0E9B    01C8    CLR	0x48
  0E9C    2E9E    JP	0x69E
212:              			}
213:              		}
214:              	}
215:              	else
216:              	{
217:              		PIR1 = 0;
  0E9D    018D    CLR	0xD
  0E9E    0871    LD	A,0x71
  0E9F    008A    LD	0xA,A
  0EA0    0E70    SWAPA	0x70
  0EA1    0083    LD	0x3,A
  0EA2    0EFE    SWAPR	0x7E
  0EA3    0E7E    SWAPA	0x7E
  0EA4    0009    RETI
218:              	}
219:              	
220:              }
221:              
222:              void WorkSleep()
223:              {
224:              #if (0 != C_KEY_WAKEUP)
225:              	static unsigned char time;
226:              	
227:              	if(B_OnOff)time = 0;
  0438    1AF8    SZB	0x78,5
  0439    01B7    CLR	0x37
228:              	
229:              	if(++time >= 125)
  043A    307D    LDIA	0x7D
  043B    0AB7    INCR	0x37
  043C    0237    SUBA	0x37
  043D    1C03    SNZB	0x3,0
  043E    0008    RET
230:              	{
231:              		time = 0;
  043F    01B7    CLR	0x37
232:              		INTCON = 0;			//;关断ADC模块及中断使能；
  0440    018B    CLR	0xB
233:              		PIE1 = 0;
  0441    018E    CLR	0xE
234:              		PIE2 = 0;
  0442    1703    SETB	0x3,6
  0443    0190    CLR	0x10
235:              		PIR1 = 0;
  0444    1303    CLRB	0x3,6
  0445    018D    CLR	0xD
236:              		PIR2 = 0;
  0446    1703    SETB	0x3,6
  0447    018F    CLR	0xF
237:              		T2CON = 0;
  0448    1303    CLRB	0x3,6
  0449    0193    CLR	0x13
238:              		ADCON1 = 0;
  044A    1683    SETB	0x3,5
  044B    0196    CLR	0x16
239:              
240:              		//进入休眠前关掉所有功能模块,以降低休眠电流
241:              		ADCON0 = 0;
  044C    0195    CLR	0x15
242:              	
243:              		//进入休眠前,必须固定口线电平,这儿全部输出低电平,并关闭所有上拉电阻
244:              		PORTA = 0x01;
  044D    3001    LDIA	0x1
  044E    0086    LD	0x6,A
245:              		PORTB = 0x02;
  044F    3002    LDIA	0x2
  0450    1283    CLRB	0x3,5
  0451    0086    LD	0x6,A
246:              		TRISC = 0;
  0452    1703    SETB	0x3,6
  0453    0185    CLR	0x5
247:              		PORTC = 0x03;
  0454    3003    LDIA	0x3
  0455    0086    LD	0x6,A
248:              
249:              		TRISB5 =1;//输入
  0456    1303    CLRB	0x3,6
  0457    1685    SETB	0x5,5
250:              		//WPUB7 = 1;//上拉			
251:              		RBIF = 0;//清标志
  0458    100B    CLRB	0xB,0
252:              		RBIE = 1; //允许PB口电平变化中断
  0459    158B    SETB	0xB,3
253:              		IOCB5= 1;//允许PB0电平变化中断
  045A    1689    SETB	0x9,5
254:              		PORTB;//读一次PB口
  045B    0806    LD	A,0x6
255:              		PORTB &= 0xFD;	
  045C    1086    CLRB	0x6,1
256:              /****如需要PA口中断唤醒，使能下列程序并按需修改****
257:              			TRISA0 =1;	//输入
258:              			WPUA0 = 1;	//上拉			
259:              			RAIF = 0;	//清标志
260:              			RAIE = 1;	//允许PA口电平变化中断
261:              			IOCA0 = 1;	//允许PA0电平变化中断
262:              			PEIE = 1;	//允许外设中断
263:              			PORTA;		//读一次PA口			
264:              ************************************/	
265:              
266:              		//进入休眠模式,触摸允许唤醒的按键后恢复正常工作
267:              		SystemEnterSleep();
  045D    2494    CALL	0x494
  045E    118A    CLRB	0xA,3
268:              		if(RAIF) 
  045F    1D8D    SNZB	0xD,3
  0460    2C64    JP	0x464
269:              		{
270:              			RAIF = 0;
  0461    118D    CLRB	0xD,3
271:              			PORTA;
  0462    1683    SETB	0x3,5
  0463    0806    LD	A,0x6
272:              		}
273:              		//休眠被唤醒,重新配置中断等SFR,使系统进入正常工作
274:              		Refurbish_Sfr();
  0464    277E    CALL	0x77E
  0465    118A    CLRB	0xA,3
275:              		ADCON0 = 0X41;
276:              		ADON = 1;
277:              		ADCON1 = 0x00;
  0466    2FDE    JP	0x7DE
278:              	}
279:              #endif
280:              }
281:              
282:              
283:              /**********************************************************
284:              函数名称：AD_Sample
285:              函数功能：AD检测
286:              入口参数：adch - 检测通道
287:              出口参数：无
288:              备    注：采样通道需自行设置为输入口
289:              	      采样10次,取中间八次的平均值为采样结果存于adresult中
290:              
291:              	      adch 为输入AD通道 0-15，31
292:                           31  检测内部1.2V
293:              	
294:               		  adldo =5,开启内部LDO 2V 作为ADC 参考
295:               		  adldo =6,开启内部LDO 2.4V 作为ADC 参考
296:              		  adldo =7,开启内部LDO 3V 作为ADC 参考
297:               		  adldo =0,VDD 作为ADC 参考
298:               		  AD转换结果左对齐
299:               		  ADC参考电压从VDD切换到LDO时需要延时100us以上，才能进行AD转换
300:              **********************************************************/
301:              unsigned char ADC_Sample(unsigned char adch, unsigned char adldo) 
  019D    00CD    LD	0x4D,A
302:              {
303:              	volatile unsigned long adsum = 0;
304:              	volatile unsigned int admin = 0, admax = 0;
  019E    23EE    CALL	0x3EE
  019F    118A    CLRB	0xA,3
305:              	volatile unsigned int ad_temp = 0;
  01A0    01D7    CLR	0x57
  01A1    01D8    CLR	0x58
306:              
307:              	if ((!LDO_EN) && (adldo & 0x04) ) 
  01A2    1683    SETB	0x3,5
  01A3    1D16    SNZB	0x16,2
  01A4    1D72    SNZB	0x72,2
  01A5    29AE    JP	0x1AE
308:              	{
309:              								//如果AD参考从VDD换到内部LDO，需要延时100US以上
310:              		ADCON1 = adldo;			//左对齐,AD值取12位
  01A6    0872    LD	A,0x72
  01A7    0096    LD	0x16,A
311:              		__delay_us(100);		//IDE内置延时函数，延时100us
  01A8    3042    LDIA	0x42
  01A9    00F3    LD	0x73,A
  01AA    0BF3    SZDECR	0x73
  01AB    29AA    JP	0x1AA
  01AC    0000    NOP
312:              	} 
  01AD    29B0    JP	0x1B0
313:              	else
314:              		ADCON1 = adldo;			//如果ADCON1.7(ADFM)=1为右对齐，,AD值取10位
  01AE    0872    LD	A,0x72
  01AF    0096    LD	0x16,A
315:              
316:              	if(adch & 0x10) 
  01B0    1283    CLRB	0x3,5
  01B1    1303    CLRB	0x3,6
  01B2    1E4D    SNZB	0x4D,4
  01B3    29B9    JP	0x1B9
317:              	{
318:              		CHS4 = 1;
  01B4    1683    SETB	0x3,5
  01B5    1716    SETB	0x16,6
319:              		adch &= 0x0f;
  01B6    300F    LDIA	0xF
  01B7    1283    CLRB	0x3,5
  01B8    05CD    ANDR	0x4D
320:              	}
321:              	unsigned char i = 0;
322:              	for (i = 0; i < 10; i++) 
  01B9    01CE    CLR	0x4E
323:              	{
324:              		ADCON0 = (unsigned char)(0X41 | (adch << 2));	//16分频，如果主频为16M，则必须选16分频或以上
  01BA    084D    LD	A,0x4D
  01BB    00F3    LD	0x73,A
  01BC    3001    LDIA	0x1
  01BD    1003    CLRB	0x3,0
  01BE    0DF3    RLCR	0x73
  01BF    3EFF    ADDIA	0xFF
  01C0    1003    CLRB	0x3,0
  01C1    1D03    SNZB	0x3,2
  01C2    29BE    JP	0x1BE
  01C3    0D73    RLCA	0x73
  01C4    3841    ORIA	0x41
  01C5    1683    SETB	0x3,5
  01C6    0095    LD	0x15,A
  01C7    0000    NOP
  01C8    0000    NOP
  01C9    0000    NOP
  01CA    0000    NOP
325:              		asm("nop");
326:              		asm("nop");
327:              		asm("nop");
328:              		asm("nop");				//选择通道后需延时1uS以上
329:              		GODONE = 1;				//开始转换
  01CB    1683    SETB	0x3,5
  01CC    1303    CLRB	0x3,6
  01CD    1495    SETB	0x15,1
330:              
331:              		unsigned char j = 0;
  01CE    1283    CLRB	0x3,5
  01CF    01CC    CLR	0x4C
332:              		while (GODONE) 
  01D0    1683    SETB	0x3,5
  01D1    1C95    SNZB	0x15,1
  01D2    29DA    JP	0x1DA
333:              		{
334:              			__delay_us(2);		//延时2us(编译器内置函数)
  01D3    29D4    JP	0x1D4
  01D4    29D5    JP	0x1D5
335:              
336:              			if (0 == (--j))		//延时0.5ms仍没有AD转换结束，跳出程序
  01D5    1283    CLRB	0x3,5
  01D6    1303    CLRB	0x3,6
  01D7    0BCC    SZDECR	0x4C
  01D8    29D0    JP	0x1D0
337:              			return 0;
  01D9    3400    RET	0x0
338:              		}
339:              
340:              		ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));	//计算12位AD值
  01DA    0819    LD	A,0x19
  01DB    1283    CLRB	0x3,5
  01DC    00D7    LD	0x57,A
  01DD    01D8    CLR	0x58
  01DE    0ED7    SWAPR	0x57
  01DF    0ED8    SWAPR	0x58
  01E0    30F0    LDIA	0xF0
  01E1    05D8    ANDR	0x58
  01E2    0857    LD	A,0x57
  01E3    390F    ANDIA	0xF
  01E4    04D8    ORR	0x58
  01E5    30F0    LDIA	0xF0
  01E6    05D7    ANDR	0x57
  01E7    1683    SETB	0x3,5
  01E8    0E18    SWAPA	0x18
  01E9    390F    ANDIA	0xF
  01EA    1283    CLRB	0x3,5
  01EB    07D7    ADDR	0x57
  01EC    1803    SZB	0x3,0
  01ED    0AD8    INCR	0x58
341:              
342:              		if (0 == admax) 
  01EE    0855    LD	A,0x55
  01EF    0456    ORA	0x56
  01F0    1D03    SNZB	0x3,2
  01F1    29F5    JP	0x1F5
343:              		{
344:              			admax = ad_temp;
  01F2    2403    CALL	0x403
  01F3    118A    CLRB	0xA,3
  01F4    2A08    JP	0x208
345:              			admin = ad_temp;
346:              		} 
347:              		else if (ad_temp > admax)
  01F5    0858    LD	A,0x58
  01F6    0256    SUBA	0x56
  01F7    1D03    SNZB	0x3,2
  01F8    29FB    JP	0x1FB
  01F9    0857    LD	A,0x57
  01FA    0255    SUBA	0x55
  01FB    1803    SZB	0x3,0
  01FC    2A00    JP	0x200
348:              			admax = ad_temp;				//AD采样最大值
  01FD    2403    CALL	0x403
  01FE    118A    CLRB	0xA,3
  01FF    2A0C    JP	0x20C
349:              		else if (ad_temp < admin)
  0200    0854    LD	A,0x54
  0201    0258    SUBA	0x58
  0202    1D03    SNZB	0x3,2
  0203    2A06    JP	0x206
  0204    0853    LD	A,0x53
  0205    0257    SUBA	0x57
  0206    1803    SZB	0x3,0
  0207    2A0C    JP	0x20C
350:              			admin = ad_temp;				//AD采样最小值
  0208    0858    LD	A,0x58
  0209    00D4    LD	0x54,A
  020A    0857    LD	A,0x57
  020B    00D3    LD	0x53,A
351:              
352:              		adsum += ad_temp;
  020C    0857    LD	A,0x57
  020D    00F3    LD	0x73,A
  020E    0858    LD	A,0x58
  020F    00F4    LD	0x74,A
  0210    01F5    CLR	0x75
  0211    01F6    CLR	0x76
  0212    0873    LD	A,0x73
  0213    07CF    ADDR	0x4F
  0214    0874    LD	A,0x74
  0215    1103    CLRB	0x3,2
  0216    1803    SZB	0x3,0
  0217    3E01    ADDIA	0x1
  0218    1D03    SNZB	0x3,2
  0219    07D0    ADDR	0x50
  021A    0875    LD	A,0x75
  021B    1103    CLRB	0x3,2
  021C    1803    SZB	0x3,0
  021D    3E01    ADDIA	0x1
  021E    1D03    SNZB	0x3,2
  021F    07D1    ADDR	0x51
  0220    0876    LD	A,0x76
  0221    1103    CLRB	0x3,2
  0222    1803    SZB	0x3,0
  0223    3E01    ADDIA	0x1
  0224    1D03    SNZB	0x3,2
  0225    07D2    ADDR	0x52
  0226    300A    LDIA	0xA
  0227    0ACE    INCR	0x4E
  0228    024E    SUBA	0x4E
  0229    1C03    SNZB	0x3,0
  022A    29BA    JP	0x1BA
353:              	}
354:              		adsum -= admax;
  022B    0855    LD	A,0x55
  022C    00F3    LD	0x73,A
  022D    0856    LD	A,0x56
  022E    23DF    CALL	0x3DF
  022F    118A    CLRB	0xA,3
  0230    1C03    SNZB	0x3,0
  0231    0F76    SZINCA	0x76
  0232    02D2    SUBR	0x52
355:              		if (adsum >= admin)
  0233    0853    LD	A,0x53
  0234    00F3    LD	0x73,A
  0235    0854    LD	A,0x54
  0236    00F4    LD	0x74,A
  0237    01F5    CLR	0x75
  0238    01F6    CLR	0x76
  0239    0876    LD	A,0x76
  023A    0252    SUBA	0x52
  023B    1D03    SNZB	0x3,2
  023C    2A47    JP	0x247
  023D    0875    LD	A,0x75
  023E    0251    SUBA	0x51
  023F    1D03    SNZB	0x3,2
  0240    2A47    JP	0x247
  0241    0874    LD	A,0x74
  0242    0250    SUBA	0x50
  0243    1D03    SNZB	0x3,2
  0244    2A47    JP	0x247
  0245    0873    LD	A,0x73
  0246    024F    SUBA	0x4F
  0247    1C03    SNZB	0x3,0
  0248    2A52    JP	0x252
356:              			adsum -= admin;
  0249    0853    LD	A,0x53
  024A    00F3    LD	0x73,A
  024B    0854    LD	A,0x54
  024C    23DF    CALL	0x3DF
  024D    118A    CLRB	0xA,3
  024E    1C03    SNZB	0x3,0
  024F    0F76    SZINCA	0x76
  0250    02D2    SUBR	0x52
  0251    2A56    JP	0x256
357:              		else
358:              			adsum = 0;
  0252    01CF    CLR	0x4F
  0253    01D0    CLR	0x50
  0254    01D1    CLR	0x51
  0255    01D2    CLR	0x52
359:              
360:              		adresult = adsum >> 3;		//8次平均值作为最终结果
  0256    084F    LD	A,0x4F
  0257    00F3    LD	0x73,A
  0258    0850    LD	A,0x50
  0259    00F4    LD	0x74,A
  025A    0851    LD	A,0x51
  025B    00F5    LD	0x75,A
  025C    0852    LD	A,0x52
  025D    00F6    LD	0x76,A
  025E    3003    LDIA	0x3
  025F    1003    CLRB	0x3,0
  0260    0CF6    RRCR	0x76
  0261    0CF5    RRCR	0x75
  0262    0CF4    RRCR	0x74
  0263    0CF3    RRCR	0x73
  0264    3EFF    ADDIA	0xFF
  0265    1D03    SNZB	0x3,2
  0266    2A5F    JP	0x25F
  0267    0874    LD	A,0x74
  0268    00CB    LD	0x4B,A
  0269    0873    LD	A,0x73
  026A    00CA    LD	0x4A,A
361:              
362:              		adsum = 0;
363:              		admin = 0;
364:              		admax = 0;
  026B    23EE    CALL	0x3EE
365:              		return 0xA5;
  026C    34A5    RET	0xA5
366:              		
367:              }
368:              
369:              
370:              void chrgCtr()
371:              {
372:              	if(PORTB & 0x20)
  0EA5    1283    CLRB	0x3,5
  0EA6    1303    CLRB	0x3,6
  0EA7    1E86    SNZB	0x6,5
  0EA8    2EBF    JP	0x6BF
  0EA9    3010    LDIA	0x10
373:              	{
374:              		chrgFlag = 1;
  0EAA    01C3    CLR	0x43
  0EAB    0AC3    INCR	0x43
375:              		firstLock = 0;
  0EAC    01EE    CLR	0x6E
376:              		lowBatLock = 0;
  0EAD    01C0    CLR	0x40
377:              		if(power_ad > 4140)
  0EAE    0223    SUBA	0x23
  0EAF    302D    LDIA	0x2D
  0EB0    1903    SZB	0x3,2
  0EB1    0222    SUBA	0x22
  0EB2    1C03    SNZB	0x3,0
  0EB3    2EBD    JP	0x6BD
378:              		{
379:              			if(++chrgFullTime > 200)
  0EB4    30C9    LDIA	0xC9
  0EB5    0AC1    INCR	0x41
  0EB6    0241    SUBA	0x41
  0EB7    1C03    SNZB	0x3,0
  0EB8    0008    RET
380:              			{
381:              				chrgFullTime = 0;
  0EB9    01C1    CLR	0x41
382:              				chrgFullFlag = 1;
  0EBA    01C2    CLR	0x42
  0EBB    0AC2    INCR	0x42
  0EBC    0008    RET
383:              			}
384:              		}
385:              		else
386:              		{
387:              			chrgFullTime = 0;
  0EBD    01C1    CLR	0x41
  0EBE    0008    RET
388:              		}
389:              
390:              	}
391:              	else
392:              	{
393:              		chrgFlag = 0;
  0EBF    01C3    CLR	0x43
394:              		chrgFullTime = 0;
  0EC0    01C1    CLR	0x41
395:              		chrgFullFlag = 0;
  0EC1    01C2    CLR	0x42
  0EC2    0008    RET
396:              		
397:              	}
398:              }
399:              
400:              void keyLedCtr()
401:              {
402:              	if(shanshuoTime > 0)
  030C    1283    CLRB	0x3,5
  030D    082E    LD	A,0x2E
  030E    042F    ORA	0x2F
  030F    1903    SZB	0x3,2
  0310    2B2A    JP	0x32A
403:              	{
404:              		shanshuoTime--;
  0311    3001    LDIA	0x1
  0312    02AE    SUBR	0x2E
  0313    3000    LDIA	0x0
  0314    1C03    SNZB	0x3,0
  0315    03AF    DECR	0x2F
  0316    02AF    SUBR	0x2F
405:              		if((shanshuoTime % 150) < 75)
  0317    3096    LDIA	0x96
  0318    00F2    LD	0x72,A
  0319    01F3    CLR	0x73
  031A    082F    LD	A,0x2F
  031B    00F5    LD	0x75,A
  031C    082E    LD	A,0x2E
  031D    00F4    LD	0x74,A
  031E    2381    CALL	0x381
  031F    118A    CLRB	0xA,3
  0320    3000    LDIA	0x0
  0321    0273    SUBA	0x73
  0322    304B    LDIA	0x4B
  0323    1903    SZB	0x3,2
  0324    0272    SUBA	0x72
  0325    1803    SZB	0x3,0
  0326    2B2D    JP	0x32D
406:              		{
407:              			PORTC |= 0x01;
  0327    1703    SETB	0x3,6
  0328    1406    SETB	0x6,0
408:              		}
  0329    2B2F    JP	0x32F
409:              		else
410:              		{
411:              			PORTC &= 0xFE;
  032D    1703    SETB	0x3,6
  032E    1006    CLRB	0x6,0
412:              		}
413:              	}
414:              	else if(workStep > 0)
  032A    087B    LD	A,0x7B
  032B    1903    SZB	0x3,2
  032C    2B27    JP	0x327
415:              	{
416:              		PORTC &= 0xFE;
417:              	}
418:              	else
419:              	{
420:              		PORTC |= 0x01;
421:              	}
422:              	
423:              	if(shanshuoTime2 > 0)
  032F    1303    CLRB	0x3,6
  0330    082C    LD	A,0x2C
  0331    042D    ORA	0x2D
  0332    1903    SZB	0x3,2
  0333    2B4D    JP	0x34D
424:              	{
425:              		shanshuoTime2--;
  0334    3001    LDIA	0x1
  0335    02AC    SUBR	0x2C
  0336    3000    LDIA	0x0
  0337    1C03    SNZB	0x3,0
  0338    03AD    DECR	0x2D
  0339    02AD    SUBR	0x2D
426:              		if((shanshuoTime2 % 150) < 75)
  033A    3096    LDIA	0x96
  033B    00F2    LD	0x72,A
  033C    01F3    CLR	0x73
  033D    082D    LD	A,0x2D
  033E    00F5    LD	0x75,A
  033F    082C    LD	A,0x2C
  0340    00F4    LD	0x74,A
  0341    2381    CALL	0x381
  0342    118A    CLRB	0xA,3
  0343    3000    LDIA	0x0
  0344    0273    SUBA	0x73
  0345    304B    LDIA	0x4B
  0346    1903    SZB	0x3,2
  0347    0272    SUBA	0x72
  0348    1803    SZB	0x3,0
  0349    2B50    JP	0x350
427:              		{
428:              			PORTC |= 0x02;
  034A    1703    SETB	0x3,6
  034B    1486    SETB	0x6,1
429:              		}
  034C    2B52    JP	0x352
430:              		else
431:              		{
432:              			PORTC &= 0xFD;
  0350    1703    SETB	0x3,6
  0351    1086    CLRB	0x6,1
433:              		}
434:              	}
435:              	else if(wuhuaFlag > 0)
  034D    0847    LD	A,0x47
  034E    1903    SZB	0x3,2
  034F    2B4A    JP	0x34A
436:              	{
437:              		PORTC &= 0xFD;
438:              	}
439:              	else
440:              	{
441:              		PORTC |= 0x02;
442:              	}
443:              	if(shanshuoTime3 > 0)
  0352    1303    CLRB	0x3,6
  0353    082A    LD	A,0x2A
  0354    042B    ORA	0x2B
  0355    1903    SZB	0x3,2
  0356    2B73    JP	0x373
444:              	{
445:              		shanshuoTime3--;
  0357    3001    LDIA	0x1
  0358    02AA    SUBR	0x2A
  0359    3000    LDIA	0x0
  035A    1C03    SNZB	0x3,0
  035B    03AB    DECR	0x2B
  035C    02AB    SUBR	0x2B
446:              		if((shanshuoTime3 % 150) < 75)
  035D    3096    LDIA	0x96
  035E    00F2    LD	0x72,A
  035F    01F3    CLR	0x73
  0360    082B    LD	A,0x2B
  0361    00F5    LD	0x75,A
  0362    082A    LD	A,0x2A
  0363    00F4    LD	0x74,A
  0364    2381    CALL	0x381
  0365    118A    CLRB	0xA,3
  0366    3000    LDIA	0x0
  0367    0273    SUBA	0x73
  0368    304B    LDIA	0x4B
  0369    1903    SZB	0x3,2
  036A    0272    SUBA	0x72
  036B    1803    SZB	0x3,0
  036C    2B70    JP	0x370
447:              		{
448:              			PORTA |= 0x01;
  036D    1683    SETB	0x3,5
  036E    1406    SETB	0x6,0
449:              		}
  036F    0008    RET
450:              		else
451:              		{
452:              			PORTA &= 0xFE;
  0370    1683    SETB	0x3,5
  0371    1006    CLRB	0x6,0
  0372    0008    RET
453:              		}
454:              	}
455:              	else if(powerFlag)
  0373    083C    LD	A,0x3C
  0374    1D03    SNZB	0x3,2
  0375    2B70    JP	0x370
456:              	{
457:              		PORTA &= 0xFE;
458:              	}
459:              	else if(chrgFlag)
  0376    0843    LD	A,0x43
  0377    1903    SZB	0x3,2
  0378    2B6D    JP	0x36D
460:              	{
461:              		if(chrgFullFlag || count1s < 50)
  0379    0842    LD	A,0x42
  037A    1D03    SNZB	0x3,2
  037B    2B70    JP	0x370
  037C    3032    LDIA	0x32
  037D    0248    SUBA	0x48
  037E    1C03    SNZB	0x3,0
  037F    2B70    JP	0x370
  0380    2B6D    JP	0x36D
462:              		{
463:              			PORTA &= 0xFE;
464:              		}
465:              		else
466:              		{
467:              			PORTA |= 0x01;
468:              		}
469:              	}
470:              	else
471:              	{
472:              		PORTA |= 0x01;
473:              	}
474:              	
475:              }
476:              
477:              void pwmInit()
478:              {
479:              
480:              	PWMTH = 0x00;
  040C    0198    CLR	0x18
481:              	PWMTL = 73;
  040D    3049    LDIA	0x49
  040E    0097    LD	0x17,A
482:              	PWMD23H = 0x00;
  040F    1683    SETB	0x3,5
  0410    019E    CLR	0x1E
483:              	PWMD3L = 32;
  0411    3020    LDIA	0x20
  0412    009C    LD	0x1C,A
484:              	PWMCON1 = 0xC0;
  0413    30C0    LDIA	0xC0
  0414    1283    CLRB	0x3,5
  0415    0096    LD	0x16,A
485:              	PWMCON2 = 0x00;
  0416    019D    CLR	0x1D
486:              	PWMCON0 |= 0x28;
  0417    3028    LDIA	0x28
  0418    0495    ORR	0x15
  0419    0008    RET
487:              }
488:              
489:              void pwmStop()
490:              {
491:              	PWMD3L = 0;
  0E83    1683    SETB	0x3,5
  0E84    019C    CLR	0x1C
492:              	PWMCON0 &= 0xF7;
  0E85    1283    CLRB	0x3,5
  0E86    1195    CLRB	0x15,3
493:              	PORTA &= 0xF7;
  0E87    1683    SETB	0x3,5
  0E88    1186    CLRB	0x6,3
  0E89    0008    RET
494:              }
495:              
496:              void fanInit()
497:              {
498:              
499:              	PWMTH = 0x00;
  03A5    0198    CLR	0x18
500:              	PWMT4L = 73;
  03A6    3049    LDIA	0x49
  03A7    009C    LD	0x1C,A
501:              	PWMD4L = fanDuty;
  03A8    0846    LD	A,0x46
  03A9    009B    LD	0x1B,A
502:              	PWMCON1 = 0xC0;
  03AA    30C0    LDIA	0xC0
  03AB    0096    LD	0x16,A
503:              	PWMCON2 = 0x00;
  03AC    019D    CLR	0x1D
504:              	PWMCON0 |= 0x30;
  03AD    3030    LDIA	0x30
  03AE    0495    ORR	0x15
  03AF    0008    RET
505:              }
506:              
507:              void fanStop()
508:              {
509:              	PWMD4L = 0;
  03B0    1283    CLRB	0x3,5
  03B1    019B    CLR	0x1B
510:              	PWMCON0 &= 0xEF;
  03B2    1215    CLRB	0x15,4
511:              	PORTA &= 0xEF;
  03B3    1683    SETB	0x3,5
  03B4    1206    CLRB	0x6,4
  03B5    0008    RET
512:              }
513:              
514:              void fanCtr()
515:              {
516:              	if(workStep > 0)
  026D    087B    LD	A,0x7B
  026E    1903    SZB	0x3,2
  026F    2AD3    JP	0x2D3
517:              	{
518:              		PORTA |= 0x02;
  0270    1486    SETB	0x6,1
519:              		u8t maxFanValue = 52;
  0271    3034    LDIA	0x34
  0272    1283    CLRB	0x3,5
  0273    00D9    LD	0x59,A
520:              		if(workStep == 1)
  0274    0B7B    SZDECA	0x7B
  0275    2A78    JP	0x278
521:              		{	
522:              			maxFanValue = 40;
  0276    3028    LDIA	0x28
  0277    2A7D    JP	0x27D
523:              		}
524:              		else if(workStep == 3)
  0278    3003    LDIA	0x3
  0279    067B    XORA	0x7B
  027A    1D03    SNZB	0x3,2
  027B    2A7E    JP	0x27E
525:              		{
526:              			maxFanValue = 10;
  027C    300A    LDIA	0xA
  027D    00D9    LD	0x59,A
  027E    3002    LDIA	0x2
527:              		}
528:              		test_adc = ADC_Sample(2, 0);
  027F    01F2    CLR	0x72
  0280    219D    CALL	0x19D
  0281    118A    CLRB	0xA,3
  0282    00B9    LD	0x39,A
529:              		if (0xA5 == test_adc)
  0283    30A5    LDIA	0xA5
  0284    0639    XORA	0x39
  0285    1D03    SNZB	0x3,2
  0286    2AB1    JP	0x2B1
530:              		{
531:              			volatile unsigned long fan_temp;
532:              			if(power_ad > 0)
  0287    0822    LD	A,0x22
  0288    0423    ORA	0x23
  0289    1903    SZB	0x3,2
  028A    2AB1    JP	0x2B1
533:              			{
534:              				fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  028B    084A    LD	A,0x4A
  028C    00CC    LD	0x4C,A
  028D    084B    LD	A,0x4B
  028E    00CD    LD	0x4D,A
  028F    01CE    CLR	0x4E
  0290    01CF    CLR	0x4F
  0291    0822    LD	A,0x22
  0292    00D0    LD	0x50,A
  0293    0823    LD	A,0x23
  0294    00D1    LD	0x51,A
  0295    01D2    CLR	0x52
  0296    01D3    CLR	0x53
  0297    22D9    CALL	0x2D9
  0298    118A    CLRB	0xA,3
  0299    084F    LD	A,0x4F
  029A    00DD    LD	0x5D,A
  029B    084E    LD	A,0x4E
  029C    00DC    LD	0x5C,A
  029D    084D    LD	A,0x4D
  029E    00DB    LD	0x5B,A
  029F    084C    LD	A,0x4C
  02A0    00DA    LD	0x5A,A
  02A1    300C    LDIA	0xC
  02A2    1003    CLRB	0x3,0
  02A3    0CDD    RRCR	0x5D
  02A4    0CDC    RRCR	0x5C
  02A5    0CDB    RRCR	0x5B
  02A6    0CDA    RRCR	0x5A
  02A7    3EFF    ADDIA	0xFF
  02A8    1D03    SNZB	0x3,2
  02A9    2AA2    JP	0x2A2
535:              				fanValue = (unsigned int)(fan_temp);
  02AA    085B    LD	A,0x5B
  02AB    1683    SETB	0x3,5
  02AC    00C6    LD	0x46,A
  02AD    1283    CLRB	0x3,5
  02AE    085A    LD	A,0x5A
  02AF    1683    SETB	0x3,5
  02B0    00C5    LD	0x45,A
536:              			}
537:              		}
538:              		if(fanValue > 1300)
  02B1    3005    LDIA	0x5
  02B2    1683    SETB	0x3,5
  02B3    0246    SUBA	0x46
  02B4    3015    LDIA	0x15
  02B5    1903    SZB	0x3,2
  02B6    0245    SUBA	0x45
  02B7    1C03    SNZB	0x3,0
  02B8    2AC6    JP	0x2C6
539:              		{
540:              			if(++fanOverTime > 50)
  02B9    3033    LDIA	0x33
  02BA    1283    CLRB	0x3,5
  02BB    0AC4    INCR	0x44
  02BC    0244    SUBA	0x44
  02BD    1C03    SNZB	0x3,0
  02BE    2AC8    JP	0x2C8
  02BF    30C2    LDIA	0xC2
541:              			{
542:              				fanOverTime = 0;
  02C0    01C4    CLR	0x44
543:              				workStep = 0;
  02C1    01FB    CLR	0x7B
544:              				shanshuoTime = 450;
  02C2    00AE    LD	0x2E,A
  02C3    3001    LDIA	0x1
  02C4    00AF    LD	0x2F,A
  02C5    2AC8    JP	0x2C8
545:              			}
546:              		}
547:              		else
548:              		{
549:              			fanOverTime = 0;
  02C6    1283    CLRB	0x3,5
  02C7    01C4    CLR	0x44
550:              		}
551:              		if(fanDuty < maxFanValue)
  02C8    0859    LD	A,0x59
  02C9    0246    SUBA	0x46
  02CA    1803    SZB	0x3,0
  02CB    2ACE    JP	0x2CE
552:              		{
553:              			fanDuty++;
  02CC    0AC6    INCR	0x46
554:              		}
  02CD    2AD2    JP	0x2D2
555:              		else if(fanDuty > maxFanValue)
  02CE    0846    LD	A,0x46
  02CF    0259    SUBA	0x59
  02D0    1C03    SNZB	0x3,0
556:              		{
557:              			fanDuty--;
  02D1    03C6    DECR	0x46
558:              		}
559:              		fanInit();
  02D2    2BA5    JP	0x3A5
560:              	}
561:              	else
562:              	{
563:              		fanStop();
  02D3    23B0    CALL	0x3B0
564:              		fanDuty = 0;
  02D4    1283    CLRB	0x3,5
  02D5    01C6    CLR	0x46
565:              		PORTA &= 0xFD;
  02D6    1683    SETB	0x3,5
  02D7    1086    CLRB	0x6,1
  02D8    0008    RET
566:              	}
567:              }
568:              
569:              void wuhuaCtr()
570:              {
571:              	if(count1s == 0)
  03B6    1283    CLRB	0x3,5
  03B7    0848    LD	A,0x48
  03B8    1D03    SNZB	0x3,2
  03B9    2BD1    JP	0x3D1
572:              	{
573:              		if(++count10s >= 20)
  03BA    3014    LDIA	0x14
  03BB    0AC5    INCR	0x45
  03BC    0245    SUBA	0x45
  03BD    1803    SZB	0x3,0
574:              		{
575:              			count10s = 0;
  03BE    01C5    CLR	0x45
576:              		}
577:              		if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  03BF    087B    LD	A,0x7B
  03C0    1D03    SNZB	0x3,2
  03C1    2BD0    JP	0x3D0
  03C2    0847    LD	A,0x47
  03C3    1D03    SNZB	0x3,2
  03C4    2BD0    JP	0x3D0
  03C5    083C    LD	A,0x3C
  03C6    1903    SZB	0x3,2
  03C7    2BD0    JP	0x3D0
578:              		{
579:              			if(++closeTime > 200)
  03C8    30C9    LDIA	0xC9
  03C9    0ABA    INCR	0x3A
  03CA    023A    SUBA	0x3A
  03CB    1C03    SNZB	0x3,0
  03CC    2BD1    JP	0x3D1
580:              			{
581:              				closeTime = 0;
  03CD    01BA    CLR	0x3A
582:              				powerFlag = 0;
  03CE    01BC    CLR	0x3C
  03CF    2BD1    JP	0x3D1
583:              			}
584:              		}
585:              		else
586:              		{
587:              			closeTime = 0;
  03D0    01BA    CLR	0x3A
588:              		}
589:              	}
590:              	if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  03D1    0347    DECA	0x47
  03D2    1903    SZB	0x3,2
  03D3    2BDC    JP	0x3DC
  03D4    3002    LDIA	0x2
  03D5    0647    XORA	0x47
  03D6    1D03    SNZB	0x3,2
  03D7    2BDD    JP	0x3DD
  03D8    300A    LDIA	0xA
  03D9    0245    SUBA	0x45
  03DA    1803    SZB	0x3,0
  03DB    2BDD    JP	0x3DD
591:              	{
592:              		pwmInit();
  03DC    2C0C    JP	0x40C
593:              		/*
594:              		if(++checkTime > 200)
595:              		{
596:              			if(lowWaterTime > 110)
597:              			{
598:              				//干烧状态
599:              				wuhuaFlag = 0;
600:              				shanshuoTime2 = 450;
601:              			}
602:              			checkTime = 0;
603:              			lowWaterTime = 0;
604:              		}
605:              		
606:              		test_adc = ADC_Sample(2, 0);
607:              		if (0xA5 == test_adc)
608:              		{
609:              			volatile unsigned long wuhua_temp;
610:              			if(power_ad > 0)
611:              			{
612:              				wuhua_temp = (unsigned long)(1UL*adresult * power_ad)/4096;
613:              				wuhuaValue = (unsigned int)(wuhua_temp);
614:              			}
615:              		}
616:              		if(wuhuaValue < 7)
617:              		{
618:              			lowWaterTime++;
619:              		}
620:              		*/
621:              	}
622:              	else
623:              	{
624:              		pwmStop();
  03DD    158A    SETB	0xA,3
  03DE    2E83    JP	0x683
625:              	}
626:              }
627:              
628:              void bujinCtr()
629:              {
630:              	if(bujinFlag || motorStep > 0)
  0F76    1283    CLRB	0x3,5
  0F77    083D    LD	A,0x3D
  0F78    1D03    SNZB	0x3,2
  0F79    2F7E    JP	0x77E
  0F7A    0828    LD	A,0x28
  0F7B    0429    ORA	0x29
  0F7C    1903    SZB	0x3,2
  0F7D    2FEA    JP	0x7EA
631:              	{
632:              		if(bujinFlag == 1)
  0F7E    0B3D    SZDECA	0x3D
  0F7F    2F82    JP	0x782
633:              		{
634:              			maxMotorStep = 512;
  0F80    3002    LDIA	0x2
  0F81    2F87    JP	0x787
635:              		}
636:              		else if(bujinFlag == 2)
  0F82    3002    LDIA	0x2
  0F83    063D    XORA	0x3D
  0F84    1D03    SNZB	0x3,2
  0F85    2F89    JP	0x789
637:              		{
638:              			maxMotorStep = 1024;
  0F86    3004    LDIA	0x4
  0F87    01A6    CLR	0x26
  0F88    2F90    JP	0x790
639:              		}
640:              		else if(bujinFlag == 3)
  0F89    3003    LDIA	0x3
  0F8A    063D    XORA	0x3D
  0F8B    1D03    SNZB	0x3,2
  0F8C    2F91    JP	0x791
641:              		{
642:              			maxMotorStep = 1360;
  0F8D    3050    LDIA	0x50
  0F8E    00A6    LD	0x26,A
  0F8F    3005    LDIA	0x5
  0F90    00A7    LD	0x27,A
643:              		}
644:              		if(++motorStep >= (maxMotorStep*2))
  0F91    0827    LD	A,0x27
  0F92    00F3    LD	0x73,A
  0F93    0826    LD	A,0x26
  0F94    00F2    LD	0x72,A
  0F95    1003    CLRB	0x3,0
  0F96    0DF2    RLCR	0x72
  0F97    0DF3    RLCR	0x73
  0F98    0AA8    INCR	0x28
  0F99    1903    SZB	0x3,2
  0F9A    0AA9    INCR	0x29
  0F9B    0873    LD	A,0x73
  0F9C    0229    SUBA	0x29
  0F9D    1D03    SNZB	0x3,2
  0F9E    2FA1    JP	0x7A1
  0F9F    0872    LD	A,0x72
  0FA0    0228    SUBA	0x28
  0FA1    1C03    SNZB	0x3,0
  0FA2    2FA5    JP	0x7A5
645:              		{
646:              			motorStep = 0;
  0FA3    01A8    CLR	0x28
  0FA4    01A9    CLR	0x29
647:              		}
648:              		u8t	tempStep = motorStep % 8;
  0FA5    0828    LD	A,0x28
  0FA6    00F4    LD	0x74,A
  0FA7    3007    LDIA	0x7
  0FA8    05F4    ANDR	0x74
649:              		if(motorStep < maxMotorStep)
  0FA9    0827    LD	A,0x27
  0FAA    0229    SUBA	0x29
  0FAB    1D03    SNZB	0x3,2
  0FAC    2FAF    JP	0x7AF
  0FAD    0826    LD	A,0x26
  0FAE    0228    SUBA	0x28
  0FAF    1C03    SNZB	0x3,0
  0FB0    2FD2    JP	0x7D2
  0FB1    2FDE    JP	0x7DE
650:              		{
651:              			//正转
652:              			switch(tempStep)
653:              			{
654:              				case 0:
655:              				MOT1 = 1;MOT2 = 0;MOT3 = 0;MOT4 = 0;
  0FB2    1683    SETB	0x3,5
  0FB3    1686    SETB	0x6,5
  0FB4    1306    CLRB	0x6,6
  0FB5    1386    CLRB	0x6,7
  0FB6    1283    CLRB	0x3,5
  0FB7    1386    CLRB	0x6,7
656:              				break;
  0FB8    0008    RET
657:              				case 1:
658:              				MOT1 = 1;MOT2 = 1;MOT3 = 0;MOT4 = 0;
  0FB9    1683    SETB	0x3,5
  0FBA    1686    SETB	0x6,5
659:              				break;
  0FBB    2FF5    JP	0x7F5
660:              				case 2:
661:              				MOT1 = 0;MOT2 = 1;MOT3 = 0;MOT4 = 0;
  0FBC    1683    SETB	0x3,5
  0FBD    1286    CLRB	0x6,5
662:              				break;
  0FBE    2FF5    JP	0x7F5
663:              				case 3:
664:              				MOT1 = 0;MOT2 = 1;MOT3 = 1;MOT4 = 0;
  0FBF    1683    SETB	0x3,5
  0FC0    1286    CLRB	0x6,5
  0FC1    1706    SETB	0x6,6
  0FC2    1786    SETB	0x6,7
  0FC3    1283    CLRB	0x3,5
  0FC4    1386    CLRB	0x6,7
665:              				break;
  0FC5    0008    RET
666:              				case 4:
667:              				MOT1 = 0;MOT2 = 0;MOT3 = 1;MOT4 = 0;
  0FC6    27FA    CALL	0x7FA
  0FC7    1386    CLRB	0x6,7
668:              				break;
  0FC8    0008    RET
669:              				case 5:
670:              				MOT1 = 0;MOT2 = 0;MOT3 = 1;MOT4 = 1;
  0FC9    27FA    CALL	0x7FA
  0FCA    1786    SETB	0x6,7
671:              				break;
  0FCB    0008    RET
672:              				case 6:
673:              				MOT1 = 0;MOT2 = 0;MOT3 = 0;MOT4 = 1;
  0FCC    1683    SETB	0x3,5
  0FCD    1286    CLRB	0x6,5
674:              				break;
  0FCE    2FF0    JP	0x7F0
675:              				case 7:
676:              				MOT1 = 1;MOT2 = 0;MOT3 = 0;MOT4 = 1;
  0FCF    1683    SETB	0x3,5
  0FD0    1686    SETB	0x6,5
677:              				break;
  0FD1    2FF0    JP	0x7F0
  0FD2    0874    LD	A,0x74
  0FD3    0084    LD	0x4,A
  0FD4    3008    LDIA	0x8
  0FD5    0204    SUBA	0x4
  0FD6    1803    SZB	0x3,0
  0FD7    0008    RET
  0FD8    3008    LDIA	0x8
  0FD9    008A    LD	0xA,A
  0FDA    1003    CLRB	0x3,0
  0FDB    0D04    RLCA	0x4
  0FDC    3E17    ADDIA	0x17
  0FDD    0082    LD	0x2,A
  0FDE    0874    LD	A,0x74
  0FDF    0084    LD	0x4,A
  0FE0    3008    LDIA	0x8
  0FE1    0204    SUBA	0x4
  0FE2    1803    SZB	0x3,0
  0FE3    0008    RET
  0FE4    3008    LDIA	0x8
  0FE5    008A    LD	0xA,A
  0FE6    1003    CLRB	0x3,0
  0FE7    0D04    RLCA	0x4
  0FE8    3E27    ADDIA	0x27
  0FE9    0082    LD	0x2,A
678:              			}
679:              		}
680:              		else
681:              		{
682:              			//反转
683:              			switch(tempStep)
684:              			{
685:              				case 7:
686:              				MOT1 = 1;MOT2 = 0;MOT3 = 0;MOT4 = 0;
687:              				break;
688:              				case 6:
689:              				MOT1 = 1;MOT2 = 1;MOT3 = 0;MOT4 = 0;
690:              				break;
691:              				case 5:
692:              				MOT1 = 0;MOT2 = 1;MOT3 = 0;MOT4 = 0;
693:              				break;
694:              				case 4:
695:              				MOT1 = 0;MOT2 = 1;MOT3 = 1;MOT4 = 0;
696:              				break;
697:              				case 3:
698:              				MOT1 = 0;MOT2 = 0;MOT3 = 1;MOT4 = 0;
699:              				break;
700:              				case 2:
701:              				MOT1 = 0;MOT2 = 0;MOT3 = 1;MOT4 = 1;
702:              				break;
703:              				case 1:
704:              				MOT1 = 0;MOT2 = 0;MOT3 = 0;MOT4 = 1;
705:              				break;
706:              				case 0:
707:              				MOT1 = 1;MOT2 = 0;MOT3 = 0;MOT4 = 1;
708:              				break;
709:              			}
710:              		}
711:              	}
712:              	else
713:              	{
714:              		PORTA &= 0x1F;
  0FEA    301F    LDIA	0x1F
  0FEB    1683    SETB	0x3,5
  0FEC    0586    ANDR	0x6
715:              		PORTB &= 0x7F;
  0FED    1283    CLRB	0x3,5
  0FEE    1386    CLRB	0x6,7
  0FEF    0008    RET
716:              	}
717:              }
718:              
719:              
720:              void workCtr()
  0020    301F    LDIA	0x1F
721:              {
722:              	test_adc = ADC_Sample(31, 0);		//测试内部基准1.2V相对电源的AD值
  0021    01F2    CLR	0x72
  0022    219D    CALL	0x19D
  0023    118A    CLRB	0xA,3
  0024    00B9    LD	0x39,A
723:              	if (0xA5 == test_adc)
  0025    30A5    LDIA	0xA5
  0026    0639    XORA	0x39
  0027    1D03    SNZB	0x3,2
  0028    285A    JP	0x5A
724:              	{
725:              		volatile unsigned long power_temp;
726:              			
727:              		power_temp = (unsigned long)((POWER_RATIO)/adresult);		//1.2*4096/AD=VDD，参数放大1000倍 
  0029    3096    LDIA	0x96
  002A    01D5    CLR	0x55
  002B    00D6    LD	0x56,A
  002C    304A    LDIA	0x4A
  002D    00D7    LD	0x57,A
  002E    084B    LD	A,0x4B
  002F    00D0    LD	0x50,A
  0030    084A    LD	A,0x4A
  0031    00CF    LD	0x4F,A
  0032    214F    CALL	0x14F
  0033    118A    CLRB	0xA,3
  0034    084F    LD	A,0x4F
  0035    00D2    LD	0x52,A
  0036    0850    LD	A,0x50
  0037    00D3    LD	0x53,A
  0038    0851    LD	A,0x51
  0039    00D4    LD	0x54,A
  003A    2094    CALL	0x94
  003B    118A    CLRB	0xA,3
  003C    0852    LD	A,0x52
  003D    00E1    LD	0x61,A
  003E    0853    LD	A,0x53
  003F    00E2    LD	0x62,A
  0040    0854    LD	A,0x54
  0041    00E3    LD	0x63,A
  0042    20F6    CALL	0xF6
  0043    118A    CLRB	0xA,3
  0044    0864    LD	A,0x64
  0045    1683    SETB	0x3,5
  0046    00CA    LD	0x4A,A
  0047    1283    CLRB	0x3,5
  0048    0863    LD	A,0x63
  0049    1683    SETB	0x3,5
  004A    00C9    LD	0x49,A
  004B    1283    CLRB	0x3,5
  004C    0862    LD	A,0x62
  004D    1683    SETB	0x3,5
  004E    00C8    LD	0x48,A
  004F    1283    CLRB	0x3,5
  0050    0861    LD	A,0x61
  0051    1683    SETB	0x3,5
  0052    00C7    LD	0x47,A
728:              		power_ad = (unsigned int)(power_temp);		//通过内部基准电压推出芯片VDD电压
  0053    0848    LD	A,0x48
  0054    1283    CLRB	0x3,5
  0055    00A3    LD	0x23,A
  0056    1683    SETB	0x3,5
  0057    0847    LD	A,0x47
  0058    1283    CLRB	0x3,5
  0059    00A2    LD	0x22,A
729:              	}
730:              	if(workStep == 2 && power_ad < 2900)
  005A    3002    LDIA	0x2
  005B    067B    XORA	0x7B
  005C    1D03    SNZB	0x3,2
  005D    286E    JP	0x6E
  005E    300B    LDIA	0xB
  005F    0223    SUBA	0x23
  0060    3054    LDIA	0x54
  0061    1903    SZB	0x3,2
  0062    0222    SUBA	0x22
  0063    1803    SZB	0x3,0
  0064    286E    JP	0x6E
731:              	{
732:              		if(++lowFanTime > 200)
  0065    30C9    LDIA	0xC9
  0066    0ABE    INCR	0x3E
  0067    023E    SUBA	0x3E
  0068    1C03    SNZB	0x3,0
  0069    286F    JP	0x6F
733:              		{
734:              			lowFanTime = 0;
  006A    01BE    CLR	0x3E
735:              			workStep = 1;
  006B    01FB    CLR	0x7B
  006C    0AFB    INCR	0x7B
  006D    286F    JP	0x6F
736:              		}
737:              	}
738:              	else
739:              	{
740:              		lowFanTime = 0;
  006E    01BE    CLR	0x3E
741:              	}	
742:              	if(power_ad < 2700)
  006F    300A    LDIA	0xA
  0070    0223    SUBA	0x23
  0071    308C    LDIA	0x8C
  0072    1903    SZB	0x3,2
  0073    0222    SUBA	0x22
  0074    1803    SZB	0x3,0
  0075    2882    JP	0x82
743:              	{
744:              		if(++lowBatTime > 200)
  0076    30C9    LDIA	0xC9
  0077    0ABF    INCR	0x3F
  0078    023F    SUBA	0x3F
  0079    1C03    SNZB	0x3,0
  007A    2883    JP	0x83
745:              		{
746:              			lowBatTime = 0;
  007B    01BF    CLR	0x3F
747:              			lowBatLock = 1;
  007C    01C0    CLR	0x40
  007D    0AC0    INCR	0x40
748:              			workStep = 0;
  007E    01FB    CLR	0x7B
749:              			wuhuaFlag = 0;
  007F    01C7    CLR	0x47
750:              			bujinFlag = 0;
  0080    01BD    CLR	0x3D
  0081    2883    JP	0x83
751:              		}
752:              	}
753:              	else
754:              	{
755:              		lowBatTime = 0;
  0082    01BF    CLR	0x3F
756:              	}
757:              	if(firstTime > 0)
  0083    1683    SETB	0x3,5
  0084    084B    LD	A,0x4B
  0085    1903    SZB	0x3,2
  0086    288D    JP	0x8D
758:              	{
759:              		firstTime--;
  0087    03CB    DECR	0x4B
760:              		PORTB = 0x00;
  0088    1283    CLRB	0x3,5
  0089    0186    CLR	0x6
761:              		PORTA = 0x00;
  008A    1683    SETB	0x3,5
  008B    0186    CLR	0x6
762:              	}
  008C    0008    RET
763:              	else
764:              	{
765:              		keyLedCtr();
  008D    230C    CALL	0x30C
  008E    118A    CLRB	0xA,3
766:              		fanCtr();
  008F    226D    CALL	0x26D
  0090    118A    CLRB	0xA,3
767:              		wuhuaCtr();
  0091    23B6    CALL	0x3B6
768:              		bujinCtr();
  0092    158A    SETB	0xA,3
  0093    2F76    JP	0x776
769:              	}
770:              	
771:              }
772:              
773:              /***********************************************************
774:              主循环
775:              ***********************************************************/
776:              void main()
777:              {
778:              	Init_System();
  0EC3    118A    CLRB	0xA,3
  0EC4    241A    CALL	0x41A
  0EC5    158A    SETB	0xA,3
779:              	firstLock = 1;
  0EC6    1283    CLRB	0x3,5
  0EC7    30C8    LDIA	0xC8
  0EC8    01EE    CLR	0x6E
  0EC9    0AEE    INCR	0x6E
780:              	firstTime = 200;
  0ECA    1683    SETB	0x3,5
  0ECB    00CB    LD	0x4B,A
781:              	while(1)
782:              	{
783:              		if(B_MainLoop)
  0ECC    1F78    SNZB	0x78,6
  0ECD    2ECC    JP	0x6CC
784:              		{
785:              			B_MainLoop = 0;
  0ECE    1378    CLRB	0x78,6
  0ECF    0064    CLRWDT
786:              			CLRWDT();
787:              			
788:              			CheckTouchKey();
  0ED0    118A    CLRB	0xA,3
  0ED1    2467    CALL	0x467
  0ED2    158A    SETB	0xA,3
789:              			chrgCtr();
  0ED3    158A    SETB	0xA,3
  0ED4    26A5    CALL	0x6A5
  0ED5    158A    SETB	0xA,3
790:              			Refurbish_Sfr();
  0ED6    118A    CLRB	0xA,3
  0ED7    277E    CALL	0x77E
  0ED8    158A    SETB	0xA,3
791:              			KeyServer();
  0ED9    158A    SETB	0xA,3
  0EDA    2703    CALL	0x703
  0EDB    158A    SETB	0xA,3
792:              			workCtr();
  0EDC    118A    CLRB	0xA,3
  0EDD    2020    CALL	0x20
  0EDE    158A    SETB	0xA,3
793:              			if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && powerFlag == 0 && keyCount == 0 && wuhuaFlag == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 == 0)
  0EDF    1683    SETB	0x3,5
  0EE0    084B    LD	A,0x4B
  0EE1    1D03    SNZB	0x3,2
  0EE2    2ECC    JP	0x6CC
  0EE3    1283    CLRB	0x3,5
  0EE4    0843    LD	A,0x43
  0EE5    1D03    SNZB	0x3,2
  0EE6    2ECC    JP	0x6CC
  0EE7    087B    LD	A,0x7B
  0EE8    1D03    SNZB	0x3,2
  0EE9    2ECC    JP	0x6CC
  0EEA    083C    LD	A,0x3C
  0EEB    1D03    SNZB	0x3,2
  0EEC    2ECC    JP	0x6CC
  0EED    0824    LD	A,0x24
  0EEE    0425    ORA	0x25
  0EEF    1D03    SNZB	0x3,2
  0EF0    2ECC    JP	0x6CC
  0EF1    0847    LD	A,0x47
  0EF2    1D03    SNZB	0x3,2
  0EF3    2ECC    JP	0x6CC
  0EF4    083D    LD	A,0x3D
  0EF5    1D03    SNZB	0x3,2
  0EF6    2ECC    JP	0x6CC
  0EF7    082E    LD	A,0x2E
  0EF8    042F    ORA	0x2F
  0EF9    1D03    SNZB	0x3,2
  0EFA    2ECC    JP	0x6CC
  0EFB    082C    LD	A,0x2C
  0EFC    042D    ORA	0x2D
  0EFD    1D03    SNZB	0x3,2
  0EFE    2ECC    JP	0x6CC
794:              			{
795:              				WorkSleep();
  0EFF    118A    CLRB	0xA,3
  0F00    2438    CALL	0x438
  0F01    158A    SETB	0xA,3
  0F02    2ECC    JP	0x6CC
796:              			}
797:              		}
798:              	}
799:              }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_dividend	(*(unsigned short long *)&f1)
11:               #define	f2_as_divisor	(*(unsigned short long *)&f2)
12:               #define	f3_as_quot	(*(unsigned short long *)&f3)
13:               
14:               // floating addition
15:               #ifdef _OLDLIB
16:               #define	cntr		sign2
17:               float
18:               #ifdef _PIC18
19:               __ftdiv(float f1, float f2)
20:               #else
21:               __ftdiv(float f2, float f1)
22:               #endif
23:               {
24:               	unsigned char	exp1, exp2, sign1, sign2;
25:               	float	f3;
26:               	
27:               	f3_as_quot = 0;
28:               	sign1 = __ftunpack(&f1_as_dividend, &exp1);
29:               	if(exp1 == 0)
30:               		return f3;
31:               	sign2 = __ftunpack(&f2_as_divisor, &exp2);
32:               	if(exp2 == 0)
33:               		return f3;
34:               	exp1 -= exp2-127+8;	// compute new exponent
35:               	sign1 ^= sign2;
36:               	cntr = 16+8;
37:               	do {
38:               		f3_as_quot <<= 1;
39:               		if(f1_as_dividend >= f2_as_divisor) {
40:               			f1_as_dividend -= f2_as_divisor;
41:               			f3_as_quot |= 1;
42:               		}
43:               		f1_as_dividend <<= 1;
44:               	} while(--cntr != 0);
45:               	__ftpack(&f3_as_quot, exp1);
46:               	if(sign1)
47:               		f3_as_quot |= 0x800000;
48:               	return f3;
49:               }
50:               #else
51:               #define	exp2	sign
52:               float
53:               #ifdef _PIC18
54:               __ftdiv(float f1, float f2)
55:               #else
56:               __ftdiv(float f2, float f1)
  0094    0855    LD	A,0x55
  0095    00D8    LD	0x58,A
  0096    0856    LD	A,0x56
  0097    00D9    LD	0x59,A
  0098    0857    LD	A,0x57
  0099    00DA    LD	0x5A,A
  009A    1003    CLRB	0x3,0
  009B    0D59    RLCA	0x59
  009C    0D5A    RLCA	0x5A
  009D    00DF    LD	0x5F,A
  009E    085F    LD	A,0x5F
  009F    1D03    SNZB	0x3,2
  00A0    28A2    JP	0xA2
  00A1    2C08    JP	0x408
  00A2    0852    LD	A,0x52
  00A3    00D8    LD	0x58,A
  00A4    0853    LD	A,0x53
  00A5    00D9    LD	0x59,A
  00A6    0854    LD	A,0x54
  00A7    00DA    LD	0x5A,A
  00A8    1003    CLRB	0x3,0
  00A9    0D59    RLCA	0x59
  00AA    0D5A    RLCA	0x5A
  00AB    00E0    LD	0x60,A
  00AC    0860    LD	A,0x60
  00AD    1D03    SNZB	0x3,2
  00AE    28B0    JP	0xB0
  00AF    2C08    JP	0x408
  00B0    3089    LDIA	0x89
  00B1    01DC    CLR	0x5C
  00B2    01DD    CLR	0x5D
  00B3    01DE    CLR	0x5E
  00B4    0760    ADDA	0x60
  00B5    00D8    LD	0x58,A
  00B6    02DF    SUBR	0x5F
  00B7    0857    LD	A,0x57
  00B8    00E0    LD	0x60,A
  00B9    0854    LD	A,0x54
  00BA    06E0    XORR	0x60
  00BB    3080    LDIA	0x80
  00BC    05E0    ANDR	0x60
  00BD    3018    LDIA	0x18
  00BE    17D6    SETB	0x56,7
  00BF    01D7    CLR	0x57
  00C0    17D3    SETB	0x53,7
  00C1    01D4    CLR	0x54
  00C2    00DB    LD	0x5B,A
  00C3    1003    CLRB	0x3,0
  00C4    0DDC    RLCR	0x5C
  00C5    0DDD    RLCR	0x5D
  00C6    0DDE    RLCR	0x5E
  00C7    0854    LD	A,0x54
  00C8    0257    SUBA	0x57
  00C9    1D03    SNZB	0x3,2
  00CA    28D1    JP	0xD1
  00CB    0853    LD	A,0x53
  00CC    0256    SUBA	0x56
  00CD    1D03    SNZB	0x3,2
  00CE    28D1    JP	0xD1
  00CF    0852    LD	A,0x52
  00D0    0255    SUBA	0x55
  00D1    1C03    SNZB	0x3,0
  00D2    28DF    JP	0xDF
  00D3    0852    LD	A,0x52
  00D4    02D5    SUBR	0x55
  00D5    0853    LD	A,0x53
  00D6    1C03    SNZB	0x3,0
  00D7    0F53    SZINCA	0x53
  00D8    02D6    SUBR	0x56
  00D9    0854    LD	A,0x54
  00DA    1C03    SNZB	0x3,0
  00DB    0A54    INCA	0x54
  00DC    02D7    SUBR	0x57
  00DD    145C    SETB	0x5C,0
  00DE    1003    CLRB	0x3,0
  00DF    0DD5    RLCR	0x55
  00E0    0DD6    RLCR	0x56
  00E1    0DD7    RLCR	0x57
  00E2    0BDB    SZDECR	0x5B
  00E3    28C3    JP	0xC3
  00E4    085C    LD	A,0x5C
  00E5    00F2    LD	0x72,A
  00E6    085D    LD	A,0x5D
  00E7    00F3    LD	0x73,A
  00E8    085E    LD	A,0x5E
  00E9    00F4    LD	0x74,A
  00EA    085F    LD	A,0x5F
  00EB    00F5    LD	0x75,A
  00EC    0860    LD	A,0x60
  00ED    00F6    LD	0x76,A
  00EE    215F    CALL	0x15F
  00EF    0872    LD	A,0x72
  00F0    00D2    LD	0x52,A
  00F1    0873    LD	A,0x73
  00F2    00D3    LD	0x53,A
  00F3    0874    LD	A,0x74
  00F4    00D4    LD	0x54,A
  00F5    0008    RET
57:               #endif
58:               {
59:               	unsigned char	exp, sign, cntr;
60:               	float	f3;
61:               	
62:               	// unpack the operands
63:               	if((exp = f1_as_dividend >> 15) == 0)
64:               		return 0.0;
65:               	if((exp2 = f2_as_divisor >> 15) == 0)
66:               		return 0.0;
67:               	f3_as_quot = 0;
68:               	exp -= exp2-127+8;	// compute new exponent
69:               	sign = f1_as_dividend >> 16;
70:               	sign ^= (unsigned char)(f2_as_divisor >> 16);
71:               	sign &= 0x80;
72:               	f1_as_dividend |= 0x8000UL;
73:               	f1_as_dividend &= 0xFFFFUL;
74:               	f2_as_divisor |= 0x8000UL;
75:               	f2_as_divisor &= 0xFFFFUL;
76:               	cntr = 16+8;
77:               	do {
78:               		f3_as_quot <<= 1;
79:               		if(f1_as_dividend >= f2_as_divisor) {
80:               			f1_as_dividend -= f2_as_divisor;
81:               			f3_as_quot |= 1;
82:               		}
83:               		f1_as_dividend <<= 1;
84:               	} while(--cntr != 0);
85:               	return __ftpack(f3_as_quot, exp, sign);
86:               }
87:               #endif	
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
11:               
12:               // Convert float to long
13:               
14:               #ifdef _OLDLIB
15:               long
16:               __fttol(float f1)
17:               {
18:               	unsigned char	sign1, exp1;
19:               	unsigned long	lval;
20:               
21:               	sign1 = __ftunpack(&f1_as_mant1, &exp1);
22:               	lval = f1_as_mant1;
23:               	exp1 -= 127+15;
24:               	if((signed char)exp1 < 0) {
25:               		if((signed char)exp1 < -15)
26:               			return 0;
27:               		do
28:               			lval >>= 1;
29:               		while(++exp1 != 0);
30:               	} else {
31:               		if(exp1 >= 32)
32:               			return 00;
33:               		while(exp1 != 0) {
34:               			lval <<= 1;
35:               			exp1--;
36:               		}
37:               	}
38:               	if(sign1)
39:               		lval = -lval;
40:               	return lval;
41:               }
42:               #else
43:               long
44:               __fttol(float f1)
  00F6    23F7    CALL	0x3F7
  00F7    118A    CLRB	0xA,3
  00F8    1003    CLRB	0x3,0
  00F9    0D66    RLCA	0x66
  00FA    0D67    RLCA	0x67
  00FB    00ED    LD	0x6D,A
  00FC    086D    LD	A,0x6D
  00FD    1D03    SNZB	0x3,2
  00FE    2904    JP	0x104
  00FF    01E1    CLR	0x61
  0100    01E2    CLR	0x62
  0101    01E3    CLR	0x63
  0102    01E4    CLR	0x64
  0103    0008    RET
  0104    23F7    CALL	0x3F7
  0105    118A    CLRB	0xA,3
  0106    3017    LDIA	0x17
  0107    1003    CLRB	0x3,0
  0108    0CE7    RRCR	0x67
  0109    0CE6    RRCR	0x66
  010A    0CE5    RRCR	0x65
  010B    3EFF    ADDIA	0xFF
  010C    1D03    SNZB	0x3,2
  010D    2907    JP	0x107
  010E    0865    LD	A,0x65
  010F    00E8    LD	0x68,A
  0110    17E2    SETB	0x62,7
  0111    01E3    CLR	0x63
  0112    0861    LD	A,0x61
  0113    00E9    LD	0x69,A
  0114    0862    LD	A,0x62
  0115    00EA    LD	0x6A,A
  0116    0863    LD	A,0x63
  0117    00EB    LD	0x6B,A
  0118    308E    LDIA	0x8E
  0119    01EC    CLR	0x6C
  011A    02ED    SUBR	0x6D
  011B    1FED    SNZB	0x6D,7
  011C    292A    JP	0x12A
  011D    086D    LD	A,0x6D
  011E    3A80    XORIA	0x80
  011F    3E8F    ADDIA	0x8F
  0120    1C03    SNZB	0x3,0
  0121    28FF    JP	0xFF
  0122    1003    CLRB	0x3,0
  0123    0CEC    RRCR	0x6C
  0124    0CEB    RRCR	0x6B
  0125    0CEA    RRCR	0x6A
  0126    0CE9    RRCR	0x69
  0127    0FED    SZINCR	0x6D
  0128    2922    JP	0x122
  0129    2938    JP	0x138
  012A    3018    LDIA	0x18
  012B    026D    SUBA	0x6D
  012C    1803    SZB	0x3,0
  012D    28FF    JP	0xFF
  012E    086D    LD	A,0x6D
  012F    1903    SZB	0x3,2
  0130    2938    JP	0x138
  0131    1003    CLRB	0x3,0
  0132    0DE9    RLCR	0x69
  0133    0DEA    RLCR	0x6A
  0134    0DEB    RLCR	0x6B
  0135    0DEC    RLCR	0x6C
  0136    03ED    DECR	0x6D
  0137    292E    JP	0x12E
  0138    0868    LD	A,0x68
  0139    1903    SZB	0x3,2
  013A    2946    JP	0x146
  013B    09E9    COMR	0x69
  013C    09EA    COMR	0x6A
  013D    09EB    COMR	0x6B
  013E    09EC    COMR	0x6C
  013F    0AE9    INCR	0x69
  0140    1903    SZB	0x3,2
  0141    0AEA    INCR	0x6A
  0142    1903    SZB	0x3,2
  0143    0AEB    INCR	0x6B
  0144    1903    SZB	0x3,2
  0145    0AEC    INCR	0x6C
  0146    086C    LD	A,0x6C
  0147    00E4    LD	0x64,A
  0148    086B    LD	A,0x6B
  0149    00E3    LD	0x63,A
  014A    086A    LD	A,0x6A
  014B    00E2    LD	0x62,A
  014C    0869    LD	A,0x69
  014D    00E1    LD	0x61,A
  014E    0008    RET
45:               {
46:               	unsigned char	sign1, exp1;
47:               	unsigned long	lval;
48:               
49:               	if((exp1 = f1_as_mant1 >> 15) == 0)
50:               		return 0;
51:               	sign1 = f1_as_mant1 >> 23;
52:               	f1_as_mant1 |= 0x8000UL;
53:               	f1_as_mant1 &= 0xFFFFUL;
54:               	lval = f1_as_mant1;
55:               	exp1 -= 127+15;
56:               	if((signed char)exp1 < 0) {
57:               		if((signed char)exp1 < -15)
58:               			return 0;
59:               		do
60:               			lval >>= 1;
61:               		while(++exp1 != 0);
62:               	} else {
63:               		if(exp1 >= 24)
64:               			return 0;
65:               		while(exp1 != 0) {
66:               			lval <<= 1;
67:               			exp1--;
68:               		}
69:               	}
70:               	if(sign1)
71:               		lval = -lval;
72:               	return lval;
73:               }
74:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               
11:               // Convert unsigned int to float
12:               
13:               #ifdef _OLDLIB
14:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
15:               float
16:               __lwtoft(unsigned int c)
17:               {
18:               	float	f1;
19:               	
20:               	if(c == 0)
21:               		return 0.0;
22:               	f1_as_mant1 = c;
23:               	__ftpack(&f1_as_mant1, 127+15);
24:               	return f1;
25:               }
26:               #else
27:               float
28:               __lwtoft(unsigned int c)
  014F    084F    LD	A,0x4F
  0150    00F2    LD	0x72,A
  0151    0850    LD	A,0x50
  0152    00F3    LD	0x73,A
  0153    308E    LDIA	0x8E
  0154    01F4    CLR	0x74
  0155    00F5    LD	0x75,A
  0156    01F6    CLR	0x76
  0157    215F    CALL	0x15F
  0158    0872    LD	A,0x72
  0159    00CF    LD	0x4F,A
  015A    0873    LD	A,0x73
  015B    00D0    LD	0x50,A
  015C    0874    LD	A,0x74
  015D    00D1    LD	0x51,A
  015E    0008    RET
29:               {
30:               	return __ftpack(c, 127+15, 0);
31:               }
32:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                #include	"ftarith.h"
7:                
8:                
9:                //	unpack the operand pointed to. Store the exponent into the location pointed to by exp,
10:               //	and return the sign (zero is positive)
11:               
12:               #ifdef _OLDLIB
13:               
14:               unsigned char
15:               __ftunpack(unsigned short long * arg, unsigned char * exp)
16:               {
17:               	unsigned char	sign;
18:               
19:               	*exp = sign = *arg >> 15;
20:               	if(sign == 0) {
21:               		*arg = 0;
22:               		return 0;
23:               	}
24:               	sign = 0;
25:               	*arg |= 0x8000;
26:               	if(*arg & 0x800000)
27:               		sign++;
28:               	*arg &= 0xFFFF;
29:               	return sign;
30:               }
31:               
32:               // normalize and pack the supplied argument into floating point format
33:               
34:               void
35:               __ftpack(unsigned short long * arg, unsigned char exp)
36:               {
37:               	if(exp == 0 || *arg == 0) {
38:               		*arg = 0;
39:               		return;
40:               	}
41:               	while(*arg & 0xFE0000UL) {
42:               		exp++;
43:               		*arg >>= 1;
44:               	}
45:               	while(*arg & 0xFF0000UL) {
46:               		exp++;
47:               		(*arg)++;
48:               		*arg >>= 1;
49:               	}
50:               	while(!(*arg & 0x8000UL)) {
51:               		exp--;
52:               		*arg <<= 1;
53:               	}
54:               	if(!(exp & 1))
55:               		*arg &= ~0x8000L;
56:               	exp >>= 1;
57:               	*arg |= (unsigned short long)exp << 16;
58:               }
59:               
60:               #else
61:               float
62:               __ftpack(unsigned short long arg, unsigned char exp, unsigned char sign)
  015F    0875    LD	A,0x75
  0160    1903    SZB	0x3,2
  0161    2967    JP	0x167
  0162    0874    LD	A,0x74
  0163    0473    ORA	0x73
  0164    0472    ORA	0x72
  0165    1D03    SNZB	0x3,2
  0166    296E    JP	0x16E
  0167    01F2    CLR	0x72
  0168    01F3    CLR	0x73
  0169    01F4    CLR	0x74
  016A    0008    RET
  016B    0AF5    INCR	0x75
  016C    23FE    CALL	0x3FE
  016D    118A    CLRB	0xA,3
  016E    30FE    LDIA	0xFE
  016F    0574    ANDA	0x74
  0170    1903    SZB	0x3,2
  0171    297B    JP	0x17B
  0172    296B    JP	0x16B
  0173    0AF5    INCR	0x75
  0174    0AF2    INCR	0x72
  0175    1903    SZB	0x3,2
  0176    0AF3    INCR	0x73
  0177    1903    SZB	0x3,2
  0178    0AF4    INCR	0x74
  0179    23FE    CALL	0x3FE
  017A    118A    CLRB	0xA,3
  017B    30FF    LDIA	0xFF
  017C    0574    ANDA	0x74
  017D    1903    SZB	0x3,2
  017E    2989    JP	0x189
  017F    2973    JP	0x173
  0180    3002    LDIA	0x2
  0181    0275    SUBA	0x75
  0182    1C03    SNZB	0x3,0
  0183    298B    JP	0x18B
  0184    03F5    DECR	0x75
  0185    1003    CLRB	0x3,0
  0186    0DF2    RLCR	0x72
  0187    0DF3    RLCR	0x73
  0188    0DF4    RLCR	0x74
  0189    1FF3    SNZB	0x73,7
  018A    2980    JP	0x180
  018B    1C75    SNZB	0x75,0
  018C    13F3    CLRB	0x73,7
  018D    1003    CLRB	0x3,0
  018E    0CF5    RRCR	0x75
  018F    0875    LD	A,0x75
  0190    00CE    LD	0x4E,A
  0191    01CD    CLR	0x4D
  0192    01CC    CLR	0x4C
  0193    084C    LD	A,0x4C
  0194    04F2    ORR	0x72
  0195    084D    LD	A,0x4D
  0196    04F3    ORR	0x73
  0197    084E    LD	A,0x4E
  0198    04F4    ORR	0x74
  0199    0876    LD	A,0x76
  019A    1D03    SNZB	0x3,2
  019B    17F4    SETB	0x74,7
  019C    0008    RET
63:               {
64:               	if(exp == 0 || arg == 0)
65:               		return 0.0;
66:               	while(arg & 0xFE0000UL) {
67:               		exp++;
68:               		arg >>= 1;
69:               	}
70:               	while(arg & 0xFF0000UL) {
71:               		exp++;
72:               		(arg)++;
73:               		arg >>= 1;
74:               	}
75:               	while(!(arg & 0x8000UL) && exp > 1) {
76:               		exp--;
77:               		arg <<= 1;
78:               	}
79:               	if(!(exp & 1))
80:               		arg &= ~0x8000L;
81:               	exp >>= 1;
82:               	arg |= (unsigned short long)exp << 16;
83:               	if (sign)
84:               		arg |= 0x800000UL;
85:                  return *(float*)&arg;	
86:               }
87:               
88:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c ----------------------------------------------------------------------
1:                // 32 x 32 bit multiplication with 32 bit result
2:                #ifdef _PIC18
3:                #define _Has_hardware_multiply 1
4:                #else
5:                #define _Has_hardware_multiply 0
6:                #endif
7:                
8:                #if defined(_PIC14E) || defined(_PIC14EX) || defined(_PIC18)
9:                #define _Has_large_call_stack 1
10:               #else
11:               #define _Has_large_call_stack 0
12:               #endif
13:               
14:               unsigned long
15:               __lmul(unsigned long multiplier, unsigned long multiplicand)
  02D9    01F2    CLR	0x72
  02DA    01F3    CLR	0x73
  02DB    01F4    CLR	0x74
  02DC    01F5    CLR	0x75
  02DD    1C4C    SNZB	0x4C,0
  02DE    2AF3    JP	0x2F3
  02DF    0850    LD	A,0x50
  02E0    07F2    ADDR	0x72
  02E1    0851    LD	A,0x51
  02E2    1103    CLRB	0x3,2
  02E3    1803    SZB	0x3,0
  02E4    3E01    ADDIA	0x1
  02E5    1D03    SNZB	0x3,2
  02E6    07F3    ADDR	0x73
  02E7    0852    LD	A,0x52
  02E8    1103    CLRB	0x3,2
  02E9    1803    SZB	0x3,0
  02EA    3E01    ADDIA	0x1
  02EB    1D03    SNZB	0x3,2
  02EC    07F4    ADDR	0x74
  02ED    0853    LD	A,0x53
  02EE    1103    CLRB	0x3,2
  02EF    1803    SZB	0x3,0
  02F0    3E01    ADDIA	0x1
  02F1    1D03    SNZB	0x3,2
  02F2    07F5    ADDR	0x75
  02F3    1003    CLRB	0x3,0
  02F4    0DD0    RLCR	0x50
  02F5    0DD1    RLCR	0x51
  02F6    0DD2    RLCR	0x52
  02F7    0DD3    RLCR	0x53
  02F8    1003    CLRB	0x3,0
  02F9    0CCF    RRCR	0x4F
  02FA    0CCE    RRCR	0x4E
  02FB    0CCD    RRCR	0x4D
  02FC    0CCC    RRCR	0x4C
  02FD    084F    LD	A,0x4F
  02FE    044E    ORA	0x4E
  02FF    044D    ORA	0x4D
  0300    044C    ORA	0x4C
  0301    1D03    SNZB	0x3,2
  0302    2ADD    JP	0x2DD
  0303    0875    LD	A,0x75
  0304    00CF    LD	0x4F,A
  0305    0874    LD	A,0x74
  0306    00CE    LD	0x4E,A
  0307    0873    LD	A,0x73
  0308    00CD    LD	0x4D,A
  0309    0872    LD	A,0x72
  030A    00CC    LD	0x4C,A
  030B    0008    RET
16:               {
17:               	unsigned long product;
18:               
19:               #define LOWBYTE(x)  (*(unsigned char *)(&x))
20:               #define LMIDBYTE(x) (*(((unsigned char *)(&x))+1))
21:               #define HMIDBYTE(x) (*(((unsigned char *)(&x))+2))
22:               #define HIGHBYTE(x) (*(((unsigned char *)(&x))+3))
23:               
24:               #if (_Has_hardware_multiply || _Has_large_call_stack) && defined(__OPTIMIZE_SPEED__)
25:               	{
26:               
27:               #define USE_SHRINK
28:               
29:               /*
30:               a 32-bit multiply can be decomposed into the sum of ten 8-bit multiplies
31:                            a  b  c  d
32:               *            e  f  g  h
33:               -----------------------
34:                          |         dh
35:                          |      ch  0
36:                          |   bh  0  0
37:                          |ah  0  0  0
38:                          |      dg  0
39:                          |   cg  0  0
40:                          |bg  0  0  0
41:                        ag| 0  0  0  0 (we ignore this intermediate product
42:                                        because it does not affect the low 32 bits of the result)
43:                          |   df  0  0
44:                          |cf  0  0  0
45:                        bf| 0  0  0  0 (ignore)
46:                     af  0| 0  0  0  0 (ignore)
47:                          |de  0  0  0
48:                        ce| 0  0  0  0 (ignore)
49:                     be  0| 0  0  0  0 (ignore)
50:               +  ae  0  0| 0  0  0  0 (ignore)
51:               =======================
52:                */
53:               		product =  (unsigned int)LOWBYTE(multiplier) * LOWBYTE(multiplicand);
54:               
55:               #if defined(USE_MASKS)
56:               		product += ((unsigned long)
57:               			     ((unsigned int)LOWBYTE(multiplier) * LMIDBYTE(multiplicand))
58:               			     +
59:               			     ((unsigned int)LMIDBYTE(multiplier) * LOWBYTE(multiplicand)))
60:               			<< 8;
61:               
62:               		product += ((unsigned long)
63:               			    ((unsigned int)LOWBYTE(multiplier) * HMIDBYTE(multiplicand))
64:               			    +
65:               			    ((unsigned int)LMIDBYTE(multiplier) * LMIDBYTE(multiplicand))
66:               			    +
67:               			    ((unsigned int)HMIDBYTE(multiplier) * LOWBYTE(multiplicand)))
68:               			<< 16;
69:               
70:               		/* cast to smaller type to avoid adding high bits just to discard */
71:               		product += ((unsigned long)
72:               			    (unsigned char)
73:               			    ((unsigned int)LOWBYTE(multiplier) * HIGHBYTE(multiplicand))
74:               			    +
75:               			    (unsigned char)
76:               			    ((unsigned int)LMIDBYTE(multiplier) * HMIDBYTE(multiplicand))
77:               			    +
78:               			    (unsigned char)
79:               			    ((unsigned int)HMIDBYTE(multiplier) * LMIDBYTE(multiplicand))
80:               			    +
81:               			    (unsigned char)
82:               			    ((unsigned int)HIGHBYTE(multiplier) * LOWBYTE(multiplicand)))
83:               			<< 24;
84:               
85:               #elif defined(USE_SHRINK)
86:               		/* add direct to upper bytes, rather than shift and add all bytes */
87:               		*((unsigned short long*)(((unsigned char*)&product)+1)) +=
88:               			((unsigned int)LOWBYTE(multiplier) * LMIDBYTE(multiplicand));
89:               		*((unsigned short long*)(((unsigned char*)&product)+1)) +=
90:               			((unsigned int)LMIDBYTE(multiplier) * LOWBYTE(multiplicand));
91:               
92:               
93:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
94:               			((unsigned int)LOWBYTE(multiplier) * HMIDBYTE(multiplicand));
95:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
96:               			((unsigned int)LMIDBYTE(multiplier) * LMIDBYTE(multiplicand));
97:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
98:               			((unsigned int)HMIDBYTE(multiplier) * LOWBYTE(multiplicand));
99:               
100:              		*(((unsigned char*)&product)+3) +=
101:              			(unsigned char)
102:              			((unsigned int)LOWBYTE(multiplier) * HIGHBYTE(multiplicand));
103:              		*(((unsigned char*)&product)+3) +=
104:              			(unsigned char)
105:              			((unsigned int)LMIDBYTE(multiplier) * HMIDBYTE(multiplicand));
106:              		*(((unsigned char*)&product)+3) +=
107:              			(unsigned char)
108:              			((unsigned int)HMIDBYTE(multiplier) * LMIDBYTE(multiplicand));
109:              		*(((unsigned char*)&product)+3) +=
110:              			(unsigned char)
111:              			((unsigned int)HIGHBYTE(multiplier) * LOWBYTE(multiplicand));
112:              
113:              #else
114:              #error No method chosen
115:              #endif
116:              	}
117:              #else
118:              
119:              	product = 0;
120:              	do {
121:              		if(multiplier & 1)
122:              			product += multiplicand;
123:              		multiplicand <<= 1;
124:              		multiplier >>= 1;
125:              	} while(multiplier != 0);
126:              
127:              #endif
128:              	return product;
129:              }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c ----------------------------------------------------------------------
1:                // word unsigned modulus
2:                
3:                unsigned int
4:                #ifdef __PICC__
5:                #warning TODO: update cgpic and this file to use the other prototype
6:                __lwmod(unsigned int divisor, unsigned int dividend)
  0381    0872    LD	A,0x72
  0382    0473    ORA	0x73
  0383    1903    SZB	0x3,2
  0384    2BA0    JP	0x3A0
  0385    01F6    CLR	0x76
  0386    0AF6    INCR	0x76
  0387    1BF3    SZB	0x73,7
  0388    2B8D    JP	0x38D
  0389    1003    CLRB	0x3,0
  038A    0DF2    RLCR	0x72
  038B    0DF3    RLCR	0x73
  038C    2B86    JP	0x386
  038D    0873    LD	A,0x73
  038E    0275    SUBA	0x75
  038F    1D03    SNZB	0x3,2
  0390    2B93    JP	0x393
  0391    0872    LD	A,0x72
  0392    0274    SUBA	0x74
  0393    1C03    SNZB	0x3,0
  0394    2B9C    JP	0x39C
  0395    0872    LD	A,0x72
  0396    02F4    SUBR	0x74
  0397    0873    LD	A,0x73
  0398    1C03    SNZB	0x3,0
  0399    03F5    DECR	0x75
  039A    02F5    SUBR	0x75
  039B    1003    CLRB	0x3,0
  039C    0CF3    RRCR	0x73
  039D    0CF2    RRCR	0x72
  039E    0BF6    SZDECR	0x76
  039F    2B8D    JP	0x38D
  03A0    0875    LD	A,0x75
  03A1    00F3    LD	0x73,A
  03A2    0874    LD	A,0x74
  03A3    00F2    LD	0x72,A
  03A4    0008    RET
7:                #else
8:                __lwmod(unsigned int dividend, unsigned int divisor)
9:                #endif
10:               {
11:               	unsigned char	counter;
12:               
13:               	if(divisor != 0) {
14:               		counter = 1;
15:               		while((divisor & 0x8000) == 0) {
16:               			divisor <<= 1;
17:               			counter++;
18:               		}
19:               		do {
20:               			if(divisor <= dividend)
21:               				dividend -= divisor;
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return dividend;
26:               }
---- library_code ------------------------------------------------------------------
  0467    1A78    SZB	0x78,4
  0468    2C75    JP	0x475
  0469    2524    CALL	0x524
  046A    118A    CLRB	0xA,3
  046B    3008    LDIA	0x8
  046C    1283    CLRB	0x3,5
  046D    1303    CLRB	0x3,6
  046E    0AB6    INCR	0x36
  046F    0236    SUBA	0x36
  0470    1C03    SNZB	0x3,0
  0471    2C93    JP	0x493
  0472    01B6    CLR	0x36
  0473    1678    SETB	0x78,4
  0474    2C93    JP	0x493
  0475    19F8    SZB	0x78,3
  0476    2C8D    JP	0x48D
  0477    2593    CALL	0x593
  0478    118A    CLRB	0xA,3
  0479    2725    CALL	0x725
  047A    118A    CLRB	0xA,3
  047B    15F8    SETB	0x78,3
  047C    18F8    SZB	0x78,1
  047D    2C84    JP	0x484
  047E    3002    LDIA	0x2
  047F    1283    CLRB	0x3,5
  0480    1303    CLRB	0x3,6
  0481    0236    SUBA	0x36
  0482    1C03    SNZB	0x3,0
  0483    2C89    JP	0x489
  0484    270F    CALL	0x70F
  0485    118A    CLRB	0xA,3
  0486    10F8    CLRB	0x78,1
  0487    1278    CLRB	0x78,4
  0488    11F8    CLRB	0x78,3
  0489    1283    CLRB	0x3,5
  048A    1303    CLRB	0x3,6
  048B    01B6    CLR	0x36
  048C    2C93    JP	0x493
  048D    26AB    CALL	0x6AB
  048E    118A    CLRB	0xA,3
  048F    2584    CALL	0x584
  0490    118A    CLRB	0xA,3
  0491    1278    CLRB	0x78,4
  0492    11F8    CLRB	0x78,3
  0493    2F58    JP	0x758
  0494    0064    CLRWDT
  0495    1683    SETB	0x3,5
  0496    1303    CLRB	0x3,6
  0497    0181    CLR	0x1
  0498    3007    LDIA	0x7
  0499    1283    CLRB	0x3,5
  049A    0481    ORR	0x1
  049B    1581    SETB	0x1,3
  049C    0064    CLRWDT
  049D    300A    LDIA	0xA
  049E    1283    CLRB	0x3,5
  049F    1303    CLRB	0x3,6
  04A0    0081    LD	0x1,A
  04A1    0064    CLRWDT
  04A2    1283    CLRB	0x3,5
  04A3    1703    SETB	0x3,6
  04A4    0191    CLR	0x11
  04A5    0193    CLR	0x13
  04A6    3002    LDIA	0x2
  04A7    1303    CLRB	0x3,6
  04A8    0094    LD	0x14,A
  04A9    0063    STOP
  04AA    0000    NOP
  04AB    0064    CLRWDT
  04AC    3072    LDIA	0x72
  04AD    1283    CLRB	0x3,5
  04AE    1303    CLRB	0x3,6
  04AF    0094    LD	0x14,A
  04B0    3079    LDIA	0x79
  04B1    1703    SETB	0x3,6
  04B2    0093    LD	0x13,A
  04B3    2584    CALL	0x584
  04B4    118A    CLRB	0xA,3
  04B5    1478    SETB	0x78,0
  04B6    2524    CALL	0x524
  04B7    118A    CLRB	0xA,3
  04B8    1283    CLRB	0x3,5
  04B9    1303    CLRB	0x3,6
  04BA    27EA    CALL	0x7EA
  04BB    118A    CLRB	0xA,3
  04BC    1C0B    SNZB	0xB,0
  04BD    188B    SZB	0xB,1
  04BE    2CC1    JP	0x4C1
  04BF    1D8D    SNZB	0xD,3
  04C0    2CC8    JP	0x4C8
  04C1    2584    CALL	0x584
  04C2    1283    CLRB	0x3,5
  04C3    1303    CLRB	0x3,6
  04C4    01B6    CLR	0x36
  04C5    1278    CLRB	0x78,4
  04C6    11F8    CLRB	0x78,3
  04C7    0008    RET
  04C8    0852    LD	A,0x52
  04C9    3907    ANDIA	0x7
  04CA    1003    CLRB	0x3,0
  04CB    1903    SZB	0x3,2
  04CC    2D1E    JP	0x51E
  04CD    0D54    RLCA	0x54
  04CE    3EB8    ADDIA	0xB8
  04CF    0084    LD	0x4,A
  04D0    1383    CLRB	0x3,7
  04D1    0800    LD	A,0x0
  04D2    00D0    LD	0x50,A
  04D3    0A84    INCR	0x4
  04D4    0800    LD	A,0x0
  04D5    00D1    LD	0x51,A
  04D6    00CF    LD	0x4F,A
  04D7    0850    LD	A,0x50
  04D8    00CE    LD	0x4E,A
  04D9    0850    LD	A,0x50
  04DA    0451    ORA	0x51
  04DB    1903    SZB	0x3,2
  04DC    2D1D    JP	0x51D
  04DD    0854    LD	A,0x54
  04DE    3E09    ADDIA	0x9
  04DF    0084    LD	0x4,A
  04E0    158A    SETB	0xA,3
  04E1    2000    CALL	0x0
  04E2    118A    CLRB	0xA,3
  04E3    07CE    ADDR	0x4E
  04E4    1803    SZB	0x3,0
  04E5    0ACF    INCR	0x4F
  04E6    1003    CLRB	0x3,0
  04E7    0D54    RLCA	0x54
  04E8    3EA6    ADDIA	0xA6
  04E9    27C9    CALL	0x7C9
  04EA    118A    CLRB	0xA,3
  04EB    084F    LD	A,0x4F
  04EC    024D    SUBA	0x4D
  04ED    1D03    SNZB	0x3,2
  04EE    2CF1    JP	0x4F1
  04EF    084E    LD	A,0x4E
  04F0    024C    SUBA	0x4C
  04F1    1C03    SNZB	0x3,0
  04F2    2D05    JP	0x505
  04F3    27EA    CALL	0x7EA
  04F4    118A    CLRB	0xA,3
  04F5    0852    LD	A,0x52
  04F6    3907    ANDIA	0x7
  04F7    1D03    SNZB	0x3,2
  04F8    2CFC    JP	0x4FC
  04F9    0854    LD	A,0x54
  04FA    2688    CALL	0x688
  04FB    118A    CLRB	0xA,3
  04FC    1283    CLRB	0x3,5
  04FD    3003    LDIA	0x3
  04FE    1303    CLRB	0x3,6
  04FF    1003    CLRB	0x3,0
  0500    27EF    CALL	0x7EF
  0501    118A    CLRB	0xA,3
  0502    1803    SZB	0x3,0
  0503    2CC1    JP	0x4C1
  0504    2CF5    JP	0x4F5
  0505    0D54    RLCA	0x54
  0506    3EAC    ADDIA	0xAC
  0507    27C9    CALL	0x7C9
  0508    118A    CLRB	0xA,3
  0509    1003    CLRB	0x3,0
  050A    0D54    RLCA	0x54
  050B    3EA6    ADDIA	0xA6
  050C    27BE    CALL	0x7BE
  050D    118A    CLRB	0xA,3
  050E    0800    LD	A,0x0
  050F    00CC    LD	0x4C,A
  0510    0A84    INCR	0x4
  0511    0800    LD	A,0x0
  0512    00CD    LD	0x4D,A
  0513    1003    CLRB	0x3,0
  0514    0D54    RLCA	0x54
  0515    3EAC    ADDIA	0xAC
  0516    27BE    CALL	0x7BE
  0517    118A    CLRB	0xA,3
  0518    0850    LD	A,0x50
  0519    0080    LD	0x0,A
  051A    0A84    INCR	0x4
  051B    0851    LD	A,0x51
  051C    0080    LD	0x0,A
  051D    1003    CLRB	0x3,0
  051E    3003    LDIA	0x3
  051F    27EF    CALL	0x7EF
  0520    118A    CLRB	0xA,3
  0521    1803    SZB	0x3,0
  0522    2C94    JP	0x494
  0523    2CC8    JP	0x4C8
  0524    01F7    CLR	0x77
  0525    01F5    CLR	0x75
  0526    0AF5    INCR	0x75
  0527    01F6    CLR	0x76
  0528    1C78    SNZB	0x78,0
  0529    2D2E    JP	0x52E
  052A    0875    LD	A,0x75
  052B    3907    ANDIA	0x7
  052C    1903    SZB	0x3,2
  052D    2D7A    JP	0x57A
  052E    1283    CLRB	0x3,5
  052F    1703    SETB	0x3,6
  0530    0191    CLR	0x11
  0531    0192    CLR	0x12
  0532    3079    LDIA	0x79
  0533    0093    LD	0x13,A
  0534    1303    CLRB	0x3,6
  0535    1305    CLRB	0x5,6
  0536    1306    CLRB	0x6,6
  0537    0000    NOP
  0538    0000    NOP
  0539    0000    NOP
  053A    0000    NOP
  053B    0000    NOP
  053C    0000    NOP
  053D    0000    NOP
  053E    0000    NOP
  053F    1283    CLRB	0x3,5
  0540    1303    CLRB	0x3,6
  0541    1705    SETB	0x5,6
  0542    0877    LD	A,0x77
  0543    3E0C    ADDIA	0xC
  0544    0084    LD	0x4,A
  0545    158A    SETB	0xA,3
  0546    2000    CALL	0x0
  0547    118A    CLRB	0xA,3
  0548    1703    SETB	0x3,6
  0549    0091    LD	0x11,A
  054A    0877    LD	A,0x77
  054B    3E0F    ADDIA	0xF
  054C    0084    LD	0x4,A
  054D    158A    SETB	0xA,3
  054E    2000    CALL	0x0
  054F    118A    CLRB	0xA,3
  0550    0092    LD	0x12,A
  0551    0000    NOP
  0552    0000    NOP
  0553    0000    NOP
  0554    0000    NOP
  0555    1283    CLRB	0x3,5
  0556    1703    SETB	0x3,6
  0557    1411    SETB	0x11,0
  0558    30D0    LDIA	0xD0
  0559    00F3    LD	0x73,A
  055A    3007    LDIA	0x7
  055B    00F4    LD	0x74,A
  055C    1B91    SZB	0x11,7
  055D    2D6A    JP	0x56A
  055E    3001    LDIA	0x1
  055F    02F3    SUBR	0x73
  0560    1C03    SNZB	0x3,0
  0561    03F4    DECR	0x74
  0562    0873    LD	A,0x73
  0563    0474    ORA	0x74
  0564    1D03    SNZB	0x3,2
  0565    2D5C    JP	0x55C
  0566    30FF    LDIA	0xFF
  0567    1303    CLRB	0x3,6
  0568    00B6    LD	0x36,A
  0569    2D84    JP	0x584
  056A    1003    CLRB	0x3,0
  056B    0D77    RLCA	0x77
  056C    3EB8    ADDIA	0xB8
  056D    0084    LD	0x4,A
  056E    0816    LD	A,0x16
  056F    1383    CLRB	0x3,7
  0570    0780    ADDR	0x0
  0571    0F84    SZINCR	0x4
  0572    0800    LD	A,0x0
  0573    1803    SZB	0x3,0
  0574    0A00    INCA	0x0
  0575    00FF    LD	0x7F,A
  0576    0817    LD	A,0x17
  0577    077F    ADDA	0x7F
  0578    0080    LD	0x0,A
  0579    0384    DECR	0x4
  057A    3003    LDIA	0x3
  057B    1003    CLRB	0x3,0
  057C    0DF5    RLCR	0x75
  057D    0DF6    RLCR	0x76
  057E    0AF7    INCR	0x77
  057F    0277    SUBA	0x77
  0580    1C03    SNZB	0x3,0
  0581    2D28    JP	0x528
  0582    1078    CLRB	0x78,0
  0583    0008    RET
  0584    01F2    CLR	0x72
  0585    1003    CLRB	0x3,0
  0586    0D72    RLCA	0x72
  0587    3EB8    ADDIA	0xB8
  0588    0084    LD	0x4,A
  0589    3003    LDIA	0x3
  058A    1383    CLRB	0x3,7
  058B    0180    CLR	0x0
  058C    0A84    INCR	0x4
  058D    0180    CLR	0x0
  058E    0AF2    INCR	0x72
  058F    0272    SUBA	0x72
  0590    1803    SZB	0x3,0
  0591    0008    RET
  0592    2D85    JP	0x585
  0593    1283    CLRB	0x3,5
  0594    1303    CLRB	0x3,6
  0595    01D8    CLR	0x58
  0596    01F9    CLR	0x79
  0597    01FA    CLR	0x7A
  0598    01B5    CLR	0x35
  0599    0858    LD	A,0x58
  059A    3907    ANDIA	0x7
  059B    3E01    ADDIA	0x1
  059C    0084    LD	0x4,A
  059D    158A    SETB	0xA,3
  059E    2000    CALL	0x0
  059F    118A    CLRB	0xA,3
  05A0    00D2    LD	0x52,A
  05A1    1003    CLRB	0x3,0
  05A2    0D58    RLCA	0x58
  05A3    3EB8    ADDIA	0xB8
  05A4    0084    LD	0x4,A
  05A5    3003    LDIA	0x3
  05A6    0A84    INCR	0x4
  05A7    1003    CLRB	0x3,0
  05A8    1383    CLRB	0x3,7
  05A9    0C80    RRCR	0x0
  05AA    0384    DECR	0x4
  05AB    0C80    RRCR	0x0
  05AC    3EFF    ADDIA	0xFF
  05AD    1D03    SNZB	0x3,2
  05AE    2DA6    JP	0x5A6
  05AF    1003    CLRB	0x3,0
  05B0    0D58    RLCA	0x58
  05B1    3EB8    ADDIA	0xB8
  05B2    0084    LD	0x4,A
  05B3    0800    LD	A,0x0
  05B4    00D6    LD	0x56,A
  05B5    0A84    INCR	0x4
  05B6    0800    LD	A,0x0
  05B7    00D7    LD	0x57,A
  05B8    0858    LD	A,0x58
  05B9    3E09    ADDIA	0x9
  05BA    0084    LD	0x4,A
  05BB    158A    SETB	0xA,3
  05BC    2000    CALL	0x0
  05BD    118A    CLRB	0xA,3
  05BE    00D5    LD	0x55,A
  05BF    00D3    LD	0x53,A
  05C0    01D4    CLR	0x54
  05C1    0856    LD	A,0x56
  05C2    07D3    ADDR	0x53
  05C3    1803    SZB	0x3,0
  05C4    0AD4    INCR	0x54
  05C5    0857    LD	A,0x57
  05C6    07D4    ADDR	0x54
  05C7    0858    LD	A,0x58
  05C8    2674    CALL	0x674
  05C9    118A    CLRB	0xA,3
  05CA    3A00    XORIA	0x0
  05CB    1003    CLRB	0x3,0
  05CC    1D03    SNZB	0x3,2
  05CD    2E28    JP	0x628
  05CE    0D58    RLCA	0x58
  05CF    3EA6    ADDIA	0xA6
  05D0    0084    LD	0x4,A
  05D1    1383    CLRB	0x3,7
  05D2    0800    LD	A,0x0
  05D3    00D0    LD	0x50,A
  05D4    0A84    INCR	0x4
  05D5    0800    LD	A,0x0
  05D6    00D1    LD	0x51,A
  05D7    1003    CLRB	0x3,0
  05D8    0D58    RLCA	0x58
  05D9    3EA0    ADDIA	0xA0
  05DA    27AC    CALL	0x7AC
  05DB    118A    CLRB	0xA,3
  05DC    0254    SUBA	0x54
  05DD    1D03    SNZB	0x3,2
  05DE    2DE1    JP	0x5E1
  05DF    084C    LD	A,0x4C
  05E0    0253    SUBA	0x53
  05E1    1803    SZB	0x3,0
  05E2    2DF0    JP	0x5F0
  05E3    1003    CLRB	0x3,0
  05E4    0D58    RLCA	0x58
  05E5    3EA0    ADDIA	0xA0
  05E6    27AC    CALL	0x7AC
  05E7    118A    CLRB	0xA,3
  05E8    0856    LD	A,0x56
  05E9    024C    SUBA	0x4C
  05EA    00D6    LD	0x56,A
  05EB    0857    LD	A,0x57
  05EC    1C03    SNZB	0x3,0
  05ED    0A57    INCA	0x57
  05EE    024D    SUBA	0x4D
  05EF    2E14    JP	0x614
  05F0    0851    LD	A,0x51
  05F1    0254    SUBA	0x54
  05F2    1D03    SNZB	0x3,2
  05F3    2DF6    JP	0x5F6
  05F4    0850    LD	A,0x50
  05F5    0253    SUBA	0x53
  05F6    1803    SZB	0x3,0
  05F7    2E6C    JP	0x66C
  05F8    1003    CLRB	0x3,0
  05F9    0D58    RLCA	0x58
  05FA    3EAC    ADDIA	0xAC
  05FB    27AC    CALL	0x7AC
  05FC    118A    CLRB	0xA,3
  05FD    0254    SUBA	0x54
  05FE    1D03    SNZB	0x3,2
  05FF    2E02    JP	0x602
  0600    084C    LD	A,0x4C
  0601    0253    SUBA	0x53
  0602    1803    SZB	0x3,0
  0603    2E6C    JP	0x66C
  0604    1003    CLRB	0x3,0
  0605    0D58    RLCA	0x58
  0606    3EA0    ADDIA	0xA0
  0607    0084    LD	0x4,A
  0608    0850    LD	A,0x50
  0609    0080    LD	0x0,A
  060A    0A84    INCR	0x4
  060B    0851    LD	A,0x51
  060C    0080    LD	0x0,A
  060D    0856    LD	A,0x56
  060E    0250    SUBA	0x50
  060F    00D6    LD	0x56,A
  0610    0857    LD	A,0x57
  0611    1C03    SNZB	0x3,0
  0612    0A57    INCA	0x57
  0613    0251    SUBA	0x51
  0614    00D7    LD	0x57,A
  0615    0858    LD	A,0x58
  0616    3EBE    ADDIA	0xBE
  0617    0084    LD	0x4,A
  0618    0180    CLR	0x0
  0619    0857    LD	A,0x57
  061A    1903    SZB	0x3,2
  061B    2E1E    JP	0x61E
  061C    30FF    LDIA	0xFF
  061D    2E1F    JP	0x61F
  061E    0856    LD	A,0x56
  061F    00D5    LD	0x55,A
  0620    0235    SUBA	0x35
  0621    1803    SZB	0x3,0
  0622    2E26    JP	0x626
  0623    0855    LD	A,0x55
  0624    00B5    LD	0x35,A
  0625    2E66    JP	0x666
  0626    0AB6    INCR	0x36
  0627    2E6C    JP	0x66C
  0628    0D58    RLCA	0x58
  0629    3EA0    ADDIA	0xA0
  062A    0084    LD	0x4,A
  062B    1383    CLRB	0x3,7
  062C    0800    LD	A,0x0
  062D    00CC    LD	0x4C,A
  062E    0A84    INCR	0x4
  062F    0800    LD	A,0x0
  0630    00CD    LD	0x4D,A
  0631    084C    LD	A,0x4C
  0632    3E01    ADDIA	0x1
  0633    00CE    LD	0x4E,A
  0634    084D    LD	A,0x4D
  0635    1803    SZB	0x3,0
  0636    3E01    ADDIA	0x1
  0637    00CF    LD	0x4F,A
  0638    0854    LD	A,0x54
  0639    024F    SUBA	0x4F
  063A    1D03    SNZB	0x3,2
  063B    2E3E    JP	0x63E
  063C    0853    LD	A,0x53
  063D    024E    SUBA	0x4E
  063E    1C03    SNZB	0x3,0
  063F    2E6C    JP	0x66C
  0640    1003    CLRB	0x3,0
  0641    0D58    RLCA	0x58
  0642    3EA6    ADDIA	0xA6
  0643    0084    LD	0x4,A
  0644    0800    LD	A,0x0
  0645    279A    CALL	0x79A
  0646    118A    CLRB	0xA,3
  0647    1C03    SNZB	0x3,0
  0648    2E52    JP	0x652
  0649    1003    CLRB	0x3,0
  064A    0D58    RLCA	0x58
  064B    3EAC    ADDIA	0xAC
  064C    0084    LD	0x4,A
  064D    0800    LD	A,0x0
  064E    279A    CALL	0x79A
  064F    118A    CLRB	0xA,3
  0650    1803    SZB	0x3,0
  0651    2E5E    JP	0x65E
  0652    0858    LD	A,0x58
  0653    3EBE    ADDIA	0xBE
  0654    0084    LD	0x4,A
  0655    3009    LDIA	0x9
  0656    0A80    INCR	0x0
  0657    0200    SUBA	0x0
  0658    1C03    SNZB	0x3,0
  0659    2E62    JP	0x662
  065A    0858    LD	A,0x58
  065B    2688    CALL	0x688
  065C    118A    CLRB	0xA,3
  065D    2E6C    JP	0x66C
  065E    0858    LD	A,0x58
  065F    3EBE    ADDIA	0xBE
  0660    0084    LD	0x4,A
  0661    0180    CLR	0x0
  0662    087A    LD	A,0x7A
  0663    0479    ORA	0x79
  0664    1D03    SNZB	0x3,2
  0665    2E6C    JP	0x66C
  0666    0852    LD	A,0x52
  0667    00F2    LD	0x72,A
  0668    01F3    CLR	0x73
  0669    0858    LD	A,0x58
  066A    269D    CALL	0x69D
  066B    118A    CLRB	0xA,3
  066C    3003    LDIA	0x3
  066D    1283    CLRB	0x3,5
  066E    1303    CLRB	0x3,6
  066F    0AD8    INCR	0x58
  0670    0258    SUBA	0x58
  0671    1803    SZB	0x3,0
  0672    0008    RET
  0673    2D99    JP	0x599
  0674    00F3    LD	0x73,A
  0675    3907    ANDIA	0x7
  0676    3E01    ADDIA	0x1
  0677    0084    LD	0x4,A
  0678    158A    SETB	0xA,3
  0679    2000    CALL	0x0
  067A    118A    CLRB	0xA,3
  067B    00F2    LD	0x72,A
  067C    1DF3    SNZB	0x73,3
  067D    2E82    JP	0x682
  067E    1283    CLRB	0x3,5
  067F    1303    CLRB	0x3,6
  0680    0831    LD	A,0x31
  0681    2E85    JP	0x685
  0682    1283    CLRB	0x3,5
  0683    1303    CLRB	0x3,6
  0684    0830    LD	A,0x30
  0685    05F2    ANDR	0x72
  0686    0872    LD	A,0x72
  0687    0008    RET
  0688    00F2    LD	0x72,A
  0689    1003    CLRB	0x3,0
  068A    0D72    RLCA	0x72
  068B    3EB2    ADDIA	0xB2
  068C    0084    LD	0x4,A
  068D    1383    CLRB	0x3,7
  068E    27D8    CALL	0x7D8
  068F    118A    CLRB	0xA,3
  0690    3EAC    ADDIA	0xAC
  0691    0084    LD	0x4,A
  0692    27D8    CALL	0x7D8
  0693    118A    CLRB	0xA,3
  0694    3EA6    ADDIA	0xA6
  0695    0084    LD	0x4,A
  0696    27D8    CALL	0x7D8
  0697    3EA0    ADDIA	0xA0
  0698    0084    LD	0x4,A
  0699    0180    CLR	0x0
  069A    0A84    INCR	0x4
  069B    0180    CLR	0x0
  069C    0008    RET
  069D    00F4    LD	0x74,A
  069E    1283    CLRB	0x3,5
  069F    1303    CLRB	0x3,6
  06A0    0AB6    INCR	0x36
  06A1    01F9    CLR	0x79
  06A2    01FA    CLR	0x7A
  06A3    1DF4    SNZB	0x74,3
  06A4    2EA8    JP	0x6A8
  06A5    0872    LD	A,0x72
  06A6    00FA    LD	0x7A,A
  06A7    0008    RET
  06A8    0872    LD	A,0x72
  06A9    00F9    LD	0x79,A
  06AA    0008    RET
  06AB    1283    CLRB	0x3,5
  06AC    3004    LDIA	0x4
  06AD    1303    CLRB	0x3,6
  06AE    01D0    CLR	0x50
  06AF    0AB4    INCR	0x34
  06B0    0234    SUBA	0x34
  06B1    1C03    SNZB	0x3,0
  06B2    0008    RET
  06B3    01B4    CLR	0x34
  06B4    1003    CLRB	0x3,0
  06B5    0D50    RLCA	0x50
  06B6    3EB8    ADDIA	0xB8
  06B7    0084    LD	0x4,A
  06B8    1383    CLRB	0x3,7
  06B9    0800    LD	A,0x0
  06BA    00CC    LD	0x4C,A
  06BB    0A84    INCR	0x4
  06BC    0800    LD	A,0x0
  06BD    00CD    LD	0x4D,A
  06BE    0850    LD	A,0x50
  06BF    2674    CALL	0x674
  06C0    118A    CLRB	0xA,3
  06C1    3A00    XORIA	0x0
  06C2    1003    CLRB	0x3,0
  06C3    1D03    SNZB	0x3,2
  06C4    2EF9    JP	0x6F9
  06C5    0D50    RLCA	0x50
  06C6    3EB2    ADDIA	0xB2
  06C7    0084    LD	0x4,A
  06C8    1383    CLRB	0x3,7
  06C9    278C    CALL	0x78C
  06CA    118A    CLRB	0xA,3
  06CB    1903    SZB	0x3,2
  06CC    024E    SUBA	0x4E
  06CD    1C03    SNZB	0x3,0
  06CE    2ED5    JP	0x6D5
  06CF    0F4E    SZINCA	0x4E
  06D0    2EF8    JP	0x6F8
  06D1    0A4F    INCA	0x4F
  06D2    1003    CLRB	0x3,0
  06D3    1D03    SNZB	0x3,2
  06D4    2EF9    JP	0x6F9
  06D5    0D50    RLCA	0x50
  06D6    3EAC    ADDIA	0xAC
  06D7    0084    LD	0x4,A
  06D8    278C    CALL	0x78C
  06D9    118A    CLRB	0xA,3
  06DA    1903    SZB	0x3,2
  06DB    024E    SUBA	0x4E
  06DC    1C03    SNZB	0x3,0
  06DD    2EE4    JP	0x6E4
  06DE    0F4E    SZINCA	0x4E
  06DF    2EF8    JP	0x6F8
  06E0    0A4F    INCA	0x4F
  06E1    1003    CLRB	0x3,0
  06E2    1D03    SNZB	0x3,2
  06E3    2EF9    JP	0x6F9
  06E4    0D50    RLCA	0x50
  06E5    3EA6    ADDIA	0xA6
  06E6    0084    LD	0x4,A
  06E7    278C    CALL	0x78C
  06E8    118A    CLRB	0xA,3
  06E9    1903    SZB	0x3,2
  06EA    024E    SUBA	0x4E
  06EB    1C03    SNZB	0x3,0
  06EC    2EF3    JP	0x6F3
  06ED    0F4E    SZINCA	0x4E
  06EE    2EF8    JP	0x6F8
  06EF    0A4F    INCA	0x4F
  06F0    1003    CLRB	0x3,0
  06F1    1D03    SNZB	0x3,2
  06F2    2EF9    JP	0x6F9
  06F3    0D50    RLCA	0x50
  06F4    3EA0    ADDIA	0xA0
  06F5    0084    LD	0x4,A
  06F6    27E4    CALL	0x7E4
  06F7    118A    CLRB	0xA,3
  06F8    1003    CLRB	0x3,0
  06F9    0D50    RLCA	0x50
  06FA    3EAC    ADDIA	0xAC
  06FB    0084    LD	0x4,A
  06FC    1383    CLRB	0x3,7
  06FD    27D0    CALL	0x7D0
  06FE    118A    CLRB	0xA,3
  06FF    3EA6    ADDIA	0xA6
  0700    27B3    CALL	0x7B3
  0701    118A    CLRB	0xA,3
  0702    27D0    CALL	0x7D0
  0703    118A    CLRB	0xA,3
  0704    3EAC    ADDIA	0xAC
  0705    27B3    CALL	0x7B3
  0706    118A    CLRB	0xA,3
  0707    27E4    CALL	0x7E4
  0708    118A    CLRB	0xA,3
  0709    3003    LDIA	0x3
  070A    0AD0    INCR	0x50
  070B    0250    SUBA	0x50
  070C    1803    SZB	0x3,0
  070D    0008    RET
  070E    2EB4    JP	0x6B4
  070F    1283    CLRB	0x3,5
  0710    1303    CLRB	0x3,6
  0711    01B0    CLR	0x30
  0712    01B1    CLR	0x31
  0713    01F3    CLR	0x73
  0714    1003    CLRB	0x3,0
  0715    0D73    RLCA	0x73
  0716    3EB8    ADDIA	0xB8
  0717    0084    LD	0x4,A
  0718    1383    CLRB	0x3,7
  0719    0180    CLR	0x0
  071A    0A84    INCR	0x4
  071B    0180    CLR	0x0
  071C    0873    LD	A,0x73
  071D    2688    CALL	0x688
  071E    118A    CLRB	0xA,3
  071F    3003    LDIA	0x3
  0720    0AF3    INCR	0x73
  0721    0273    SUBA	0x73
  0722    1803    SZB	0x3,0
  0723    0008    RET
  0724    2F14    JP	0x714
  0725    087A    LD	A,0x7A
  0726    0479    ORA	0x79
  0727    1903    SZB	0x3,2
  0728    2F49    JP	0x749
  0729    1283    CLRB	0x3,5
  072A    1303    CLRB	0x3,6
  072B    01B2    CLR	0x32
  072C    0879    LD	A,0x79
  072D    0620    XORA	0x20
  072E    1D03    SNZB	0x3,2
  072F    2F42    JP	0x742
  0730    087A    LD	A,0x7A
  0731    0621    XORA	0x21
  0732    1D03    SNZB	0x3,2
  0733    2F42    JP	0x742
  0734    3002    LDIA	0x2
  0735    0AB3    INCR	0x33
  0736    0233    SUBA	0x33
  0737    1C03    SNZB	0x3,0
  0738    0008    RET
  0739    01B3    CLR	0x33
  073A    0879    LD	A,0x79
  073B    00B0    LD	0x30,A
  073C    087A    LD	A,0x7A
  073D    00B1    LD	0x31,A
  073E    1978    SZB	0x78,2
  073F    0008    RET
  0740    1578    SETB	0x78,2
  0741    2F6E    JP	0x76E
  0742    1178    CLRB	0x78,2
  0743    0879    LD	A,0x79
  0744    00A0    LD	0x20,A
  0745    087A    LD	A,0x7A
  0746    00A1    LD	0x21,A
  0747    01B3    CLR	0x33
  0748    0008    RET
  0749    1283    CLRB	0x3,5
  074A    1303    CLRB	0x3,6
  074B    01B3    CLR	0x33
  074C    01A0    CLR	0x20
  074D    01A1    CLR	0x21
  074E    3002    LDIA	0x2
  074F    0AB2    INCR	0x32
  0750    0232    SUBA	0x32
  0751    1C03    SNZB	0x3,0
  0752    0008    RET
  0753    01B2    CLR	0x32
  0754    01B0    CLR	0x30
  0755    01B1    CLR	0x31
  0756    1178    CLRB	0x78,2
  0757    0008    RET
  0758    1283    CLRB	0x3,5
  0759    1303    CLRB	0x3,6
  075A    0831    LD	A,0x31
  075B    0430    ORA	0x30
  075C    1903    SZB	0x3,2
  075D    2F6A    JP	0x76A
  075E    1683    SETB	0x3,5
  075F    0AC1    INCR	0x41
  0760    1903    SZB	0x3,2
  0761    0AC2    INCR	0x42
  0762    303A    LDIA	0x3A
  0763    0242    SUBA	0x42
  0764    3098    LDIA	0x98
  0765    1903    SZB	0x3,2
  0766    0241    SUBA	0x41
  0767    1C03    SNZB	0x3,0
  0768    0008    RET
  0769    14F8    SETB	0x78,1
  076A    1683    SETB	0x3,5
  076B    01C1    CLR	0x41
  076C    01C2    CLR	0x42
  076D    0008    RET
  076E    01F4    CLR	0x74
  076F    0874    LD	A,0x74
  0770    2674    CALL	0x674
  0771    118A    CLRB	0xA,3
  0772    3A00    XORIA	0x0
  0773    1D03    SNZB	0x3,2
  0774    2F78    JP	0x778
  0775    0874    LD	A,0x74
  0776    2688    CALL	0x688
  0777    118A    CLRB	0xA,3
  0778    3003    LDIA	0x3
  0779    0AF4    INCR	0x74
  077A    0274    SUBA	0x74
  077B    1803    SZB	0x3,0
  077C    0008    RET
  077D    2F6F    JP	0x76F
---- stringtab ------------------------------------------------------------------
  0800    3008    LDIA	0x8
  0801    008A    LD	0xA,A
  0802    0804    LD	A,0x4
  0803    0A84    INCR	0x4
  0804    0782    ADDR	0x2
  0805    3400    RET	0x0
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280B    JP	0xB
  000B    118A    CLRB	0xA,3
  000C    280D    JP	0xD
---- start_initialization ------------------------------------------------------------------
  000D    3020    LDIA	0x20
  000E    01F8    CLR	0x78
  000F    01F9    CLR	0x79
  0010    01FA    CLR	0x7A
  0011    01FB    CLR	0x7B
  0012    1383    CLRB	0x3,7
  0013    0084    LD	0x4,A
  0014    304C    LDIA	0x4C
  0015    118A    CLRB	0xA,3
  0016    27F4    CALL	0x7F4
  0017    118A    CLRB	0xA,3
  0018    30A0    LDIA	0xA0
  0019    0084    LD	0x4,A
  001A    30C7    LDIA	0xC7
  001B    118A    CLRB	0xA,3
  001C    27F4    CALL	0x7F4
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    080A    LD	A,0xA
  0008    00F1    LD	0x71,A
  0009    158A    SETB	0xA,3
  000A    2E8A    JP	0x68A
---- common_function ------------------------------------------------------------------
  001D    0183    CLR	0x3
  001E    158A    SETB	0xA,3
  001F    2EC3    JP	0x6C3
  03DF    00F4    LD	0x74,A
  03E0    01F5    CLR	0x75
  03E1    01F6    CLR	0x76
  03E2    0873    LD	A,0x73
  03E3    02CF    SUBR	0x4F
  03E4    0874    LD	A,0x74
  03E5    1C03    SNZB	0x3,0
  03E6    0F74    SZINCA	0x74
  03E7    02D0    SUBR	0x50
  03E8    0875    LD	A,0x75
  03E9    1C03    SNZB	0x3,0
  03EA    0F75    SZINCA	0x75
  03EB    02D1    SUBR	0x51
  03EC    0876    LD	A,0x76
  03ED    0008    RET
  03EE    01CF    CLR	0x4F
  03EF    01D0    CLR	0x50
  03F0    01D1    CLR	0x51
  03F1    01D2    CLR	0x52
  03F2    01D3    CLR	0x53
  03F3    01D4    CLR	0x54
  03F4    01D5    CLR	0x55
  03F5    01D6    CLR	0x56
  03F6    0008    RET
  03F7    0861    LD	A,0x61
  03F8    00E5    LD	0x65,A
  03F9    0862    LD	A,0x62
  03FA    00E6    LD	0x66,A
  03FB    0863    LD	A,0x63
  03FC    00E7    LD	0x67,A
  03FD    0008    RET
  03FE    1003    CLRB	0x3,0
  03FF    0CF4    RRCR	0x74
  0400    0CF3    RRCR	0x73
  0401    0CF2    RRCR	0x72
  0402    0008    RET
  0403    0858    LD	A,0x58
  0404    00D6    LD	0x56,A
  0405    0857    LD	A,0x57
  0406    00D5    LD	0x55,A
  0407    0008    RET
  0408    01D2    CLR	0x52
  0409    01D3    CLR	0x53
  040A    01D4    CLR	0x54
  040B    0008    RET
  078C    0800    LD	A,0x0
  078D    00CE    LD	0x4E,A
  078E    0A84    INCR	0x4
  078F    0800    LD	A,0x0
  0790    00CF    LD	0x4F,A
  0791    084C    LD	A,0x4C
  0792    02CE    SUBR	0x4E
  0793    084D    LD	A,0x4D
  0794    1C03    SNZB	0x3,0
  0795    03CF    DECR	0x4F
  0796    02CF    SUBR	0x4F
  0797    3000    LDIA	0x0
  0798    024F    SUBA	0x4F
  0799    3402    RET	0x2
  079A    00CC    LD	0x4C,A
  079B    0A84    INCR	0x4
  079C    0800    LD	A,0x0
  079D    00CD    LD	0x4D,A
  079E    0855    LD	A,0x55
  079F    074C    ADDA	0x4C
  07A0    00CE    LD	0x4E,A
  07A1    084D    LD	A,0x4D
  07A2    1803    SZB	0x3,0
  07A3    0A4D    INCA	0x4D
  07A4    00CF    LD	0x4F,A
  07A5    0857    LD	A,0x57
  07A6    024F    SUBA	0x4F
  07A7    1D03    SNZB	0x3,2
  07A8    0008    RET
  07A9    0856    LD	A,0x56
  07AA    024E    SUBA	0x4E
  07AB    0008    RET
  07AC    0084    LD	0x4,A
  07AD    0800    LD	A,0x0
  07AE    00CC    LD	0x4C,A
  07AF    0A84    INCR	0x4
  07B0    0800    LD	A,0x0
  07B1    00CD    LD	0x4D,A
  07B2    0008    RET
  07B3    0084    LD	0x4,A
  07B4    0874    LD	A,0x74
  07B5    0080    LD	0x0,A
  07B6    0A84    INCR	0x4
  07B7    0875    LD	A,0x75
  07B8    0080    LD	0x0,A
  07B9    1003    CLRB	0x3,0
  07BA    0D50    RLCA	0x50
  07BB    3EB2    ADDIA	0xB2
  07BC    0084    LD	0x4,A
  07BD    0008    RET
  07BE    0084    LD	0x4,A
  07BF    084C    LD	A,0x4C
  07C0    0080    LD	0x0,A
  07C1    0A84    INCR	0x4
  07C2    084D    LD	A,0x4D
  07C3    0080    LD	0x0,A
  07C4    1003    CLRB	0x3,0
  07C5    0D54    RLCA	0x54
  07C6    3EB2    ADDIA	0xB2
  07C7    0084    LD	0x4,A
  07C8    0008    RET
  07C9    0084    LD	0x4,A
  07CA    0800    LD	A,0x0
  07CB    00CC    LD	0x4C,A
  07CC    0A84    INCR	0x4
  07CD    0800    LD	A,0x0
  07CE    00CD    LD	0x4D,A
  07CF    0008    RET
  07D0    0800    LD	A,0x0
  07D1    00F4    LD	0x74,A
  07D2    0A84    INCR	0x4
  07D3    0800    LD	A,0x0
  07D4    00F5    LD	0x75,A
  07D5    1003    CLRB	0x3,0
  07D6    0D50    RLCA	0x50
  07D7    0008    RET
  07D8    0180    CLR	0x0
  07D9    0A84    INCR	0x4
  07DA    0180    CLR	0x0
  07DB    1003    CLRB	0x3,0
  07DC    0D72    RLCA	0x72
  07DD    0008    RET
  07DE    3041    LDIA	0x41
  07DF    1683    SETB	0x3,5
  07E0    0095    LD	0x15,A
  07E1    1415    SETB	0x15,0
  07E2    0196    CLR	0x16
  07E3    0008    RET
  07E4    084C    LD	A,0x4C
  07E5    0080    LD	0x0,A
  07E6    0A84    INCR	0x4
  07E7    084D    LD	A,0x4D
  07E8    0080    LD	0x0,A
  07E9    0008    RET
  07EA    01D4    CLR	0x54
  07EB    01D2    CLR	0x52
  07EC    0AD2    INCR	0x52
  07ED    01D3    CLR	0x53
  07EE    0008    RET
  07EF    0DD2    RLCR	0x52
  07F0    0DD3    RLCR	0x53
  07F1    0AD4    INCR	0x54
  07F2    0254    SUBA	0x54
  07F3    0008    RET
  07F4    0064    CLRWDT
  07F5    0180    CLR	0x0
  07F6    0A84    INCR	0x4
  07F7    0604    XORA	0x4
  07F8    1903    SZB	0x3,2
  07F9    3400    RET	0x0
  07FA    0604    XORA	0x4
  07FB    2FF5    JP	0x7F5
  0806    3401    RET	0x1
  0807    3402    RET	0x2
  0808    3404    RET	0x4
  0809    3408    RET	0x8
  080A    3410    RET	0x10
  080B    3420    RET	0x20
  080C    3440    RET	0x40
  080D    3480    RET	0x80
  080E    340A    RET	0xA
  080F    340A    RET	0xA
  0810    340A    RET	0xA
  0811    3402    RET	0x2
  0812    3402    RET	0x2
  0813    3402    RET	0x2
  0814    3444    RET	0x44
  0815    3443    RET	0x43
  0816    3442    RET	0x42
  0817    158A    SETB	0xA,3
  0818    2FB2    JP	0x7B2
  0819    158A    SETB	0xA,3
  081A    2FB9    JP	0x7B9
  081B    158A    SETB	0xA,3
  081C    2FBC    JP	0x7BC
  081D    158A    SETB	0xA,3
  081E    2FBF    JP	0x7BF
  081F    158A    SETB	0xA,3
  0820    2FC6    JP	0x7C6
  0821    158A    SETB	0xA,3
  0822    2FC9    JP	0x7C9
  0823    158A    SETB	0xA,3
  0824    2FCC    JP	0x7CC
  0825    158A    SETB	0xA,3
  0826    2FCF    JP	0x7CF
  0827    158A    SETB	0xA,3
  0828    2FCF    JP	0x7CF
  0829    158A    SETB	0xA,3
  082A    2FCC    JP	0x7CC
  082B    158A    SETB	0xA,3
  082C    2FC9    JP	0x7C9
  082D    158A    SETB	0xA,3
  082E    2FC6    JP	0x7C6
  082F    158A    SETB	0xA,3
  0830    2FBF    JP	0x7BF
  0831    158A    SETB	0xA,3
  0832    2FBC    JP	0x7BC
  0833    158A    SETB	0xA,3
  0834    2FB9    JP	0x7B9
  0835    158A    SETB	0xA,3
  0836    2FB2    JP	0x7B2
  0F71    30C2    LDIA	0xC2
  0F72    00AE    LD	0x2E,A
  0F73    3001    LDIA	0x1
  0F74    00AF    LD	0x2F,A
  0F75    0008    RET
  0FF0    1306    CLRB	0x6,6
  0FF1    1386    CLRB	0x6,7
  0FF2    1283    CLRB	0x3,5
  0FF3    1786    SETB	0x6,7
  0FF4    0008    RET
  0FF5    1706    SETB	0x6,6
  0FF6    1386    CLRB	0x6,7
  0FF7    1283    CLRB	0x3,5
  0FF8    1386    CLRB	0x6,7
  0FF9    0008    RET
  0FFA    1683    SETB	0x3,5
  0FFB    1286    CLRB	0x6,5
  0FFC    1306    CLRB	0x6,6
  0FFD    1786    SETB	0x6,7
  0FFE    1283    CLRB	0x3,5
