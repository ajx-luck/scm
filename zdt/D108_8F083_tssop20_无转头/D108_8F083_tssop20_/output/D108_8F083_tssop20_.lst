

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 28 13:34:08 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text12,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	text17,local,class=CODE,merge=1,delta=2
    23                           	psect	text21,local,class=CODE,merge=1,delta=2
    24                           	psect	text22,local,class=CODE,merge=1,delta=2
    25                           	psect	text35,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes0,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	strings
    66  0800                     __pstrings:	
    67  0800                     stringtab:	
    68  0800                     __stringtab:	
    69  0800                     stringcode:	
    70                           ;	String table - string pointers are 1 byte each
    71                           
    72  0800                     stringdir:	
    73  0800  3008               	movlw	high stringdir
    74  0801  008A               	movwf	10
    75  0802  0804               	movf	4,w
    76  0803  0A84               	incf	4,f
    77  0804  0782               	addwf	2,f
    78  0805                     __stringbase:	
    79  0805  3400               	retlw	0
    80  0806                     __end_of__stringtab:	
    81  0806                     _Table_KeyFalg:	
    82  0806  3401               	retlw	1
    83  0807  3402               	retlw	2
    84  0808  3404               	retlw	4
    85  0809  3408               	retlw	8
    86  080A  3410               	retlw	16
    87  080B  3420               	retlw	32
    88  080C  3440               	retlw	64
    89  080D  3480               	retlw	128
    90  080E                     __end_of_Table_KeyFalg:	
    91  080E                     _Table_KeyDown:	
    92  080E  340A               	retlw	10
    93  080F  340A               	retlw	10
    94  0810  340A               	retlw	10
    95  0811                     __end_of_Table_KeyDown:	
    96  0811                     _Table_KeyCap:	
    97  0811  3402               	retlw	2
    98  0812  3402               	retlw	2
    99  0813  3402               	retlw	2
   100  0814                     __end_of_Table_KeyCap:	
   101  0814                     _Table_KeyChannel:	
   102  0814  3444               	retlw	68
   103  0815  3443               	retlw	67
   104  0816  3442               	retlw	66
   105  0817                     __end_of_Table_KeyChannel:	
   106                           
   107                           	psect	nvBANK0
   108  006E                     __pnvBANK0:	
   109  006E                     _firstLock:	
   110  006E                     	ds	1
   111                           
   112                           	psect	nvBANK1
   113  00CB                     __pnvBANK1:	
   114  00CB                     _firstTime:	
   115  00CB                     	ds	1
   116  001D                     _PWMCON2	set	29
   117  001C                     _PWMT4L	set	28
   118  001B                     _PWMD4L	set	27
   119  0018                     _PWMTH	set	24
   120  0017                     _PWMTL	set	23
   121  0016                     _PWMCON1	set	22
   122  0015                     _PWMCON0	set	21
   123  0014                     _OSCCON	set	20
   124  0013                     _T2CON	set	19
   125  0011                     _PR2	set	17
   126  000E                     _PIE1	set	14
   127  000D                     _PIR1	set	13
   128  000B                     _INTCON	set	11
   129  0008                     _WPUB	set	8
   130  0006                     _PORTB	set	6
   131  0005                     _TRISB	set	5
   132  0001                     _OPTION_REG	set	1
   133  0069                     _TMR2IF	set	105
   134  006B                     _RAIF	set	107
   135  0058                     _RBIF	set	88
   136  0059                     _INTF	set	89
   137  005B                     _RBIE	set	91
   138  004D                     _IOCB5	set	77
   139  0036                     _RB6	set	54
   140  0037                     _RB7	set	55
   141  002D                     _TRISB5	set	45
   142  002E                     _TRISB6	set	46
   143  009E                     _PWMD23H	set	158
   144  009C                     _PWMD3L	set	156
   145  0099                     _ADRESH	set	153
   146  0098                     _ADRESL	set	152
   147  0096                     _ADCON1	set	150
   148  0095                     _ADCON0	set	149
   149  0086                     _PORTA	set	134
   150  0085                     _TRISA	set	133
   151  0081                     _TMR0	set	129
   152  04B2                     _LDO_EN	set	1202
   153  04B6                     _CHS4	set	1206
   154  04A8                     _ADON	set	1192
   155  04A9                     _GODONE	set	1193
   156  0435                     _RA5	set	1077
   157  0436                     _RA6	set	1078
   158  0437                     _RA7	set	1079
   159  0117                     _KEYDATAH	set	279
   160  0116                     _KEYDATAL	set	278
   161  0113                     _KEYCON2	set	275
   162  0112                     _KEYCON1	set	274
   163  0111                     _KEYCON0	set	273
   164  0110                     _PIE2	set	272
   165  010F                     _PIR2	set	271
   166  0106                     _PORTC	set	262
   167  0105                     _TRISC	set	261
   168                           
   169                           	psect	cinit
   170  000D                     start_initialization:	
   171                           ; #config settings
   172                           
   173  000D                     __initialization:	
   174  000D  3020               	movlw	low __pbssBANK0
   175                           
   176                           ; Clear objects allocated to BITCOMMON
   177  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   178                           
   179                           ; Clear objects allocated to COMMON
   180  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   181  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   182  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   183                           
   184                           ; Clear objects allocated to BANK0
   185  0012  1383               	bcf	3,7	;select IRP bank0
   186  0013  0084               	movwf	4
   187  0014  304C               	movlw	low (__pbssBANK0+44)
   188  0015  118A  27F4  118A   	fcall	clear_ram0
   189                           
   190                           ; Clear objects allocated to BANK1
   191  0018  30A0               	movlw	low __pbssBANK1
   192  0019  0084               	movwf	4
   193  001A  30C7               	movlw	low (__pbssBANK1+39)
   194  001B  118A  27F4         	fcall	clear_ram0
   195  001D                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198  001D                     __end_of__initialization:	
   199  001D  0183               	clrf	3
   200  001E  158A  2EC3         	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bitbssCOMMON
   203  03C0                     __pbitbssCOMMON:	
   204  03C0                     _b_ksleep:	
   205  03C0                     	ds	1
   206  03C1                     _b_kerr:	
   207  03C1                     	ds	1
   208  03C2                     _b_kclr:	
   209  03C2                     	ds	1
   210  03C3                     _b_kover1:	
   211  03C3                     	ds	1
   212  03C4                     _b_kover:	
   213  03C4                     	ds	1
   214  03C5                     _B_OnOff:	
   215  03C5                     	ds	1
   216  03C6                     _B_MainLoop:	
   217  03C6                     	ds	1
   218                           
   219                           	psect	bssCOMMON
   220  0079                     __pbssCOMMON:	
   221  0079                     _KeyData:	
   222  0079                     	ds	2
   223  007B                     _workStep:	
   224  007B                     	ds	1
   225                           
   226                           	psect	bssBANK0
   227  0020                     __pbssBANK0:	
   228  0020                     _KeyOldData:	
   229  0020                     	ds	2
   230  0022                     _power_ad:	
   231  0022                     	ds	2
   232  0024                     _keyCount:	
   233  0024                     	ds	2
   234  0026                     _maxMotorStep:	
   235  0026                     	ds	2
   236  0028                     _motorStep:	
   237  0028                     	ds	2
   238  002A                     _shanshuoTime3:	
   239  002A                     	ds	2
   240  002C                     _shanshuoTime2:	
   241  002C                     	ds	2
   242  002E                     _shanshuoTime:	
   243  002E                     	ds	2
   244  0030                     _KeyFlag:	
   245  0030                     	ds	2
   246  0032                     TurnKeyFlags@F84:	
   247  0032                     	ds	1
   248  0033                     TurnKeyFlags@F83:	
   249  0033                     	ds	1
   250  0034                     CheckKeyOldValue@F77:	
   251  0034                     	ds	1
   252  0035                     _KeyMaxSub:	
   253  0035                     	ds	1
   254  0036                     _KeyCounter:	
   255  0036                     	ds	1
   256  0037                     WorkSleep@time:	
   257  0037                     	ds	1
   258  0038                     KeyServer@KeyOldFlag:	
   259  0038                     	ds	1
   260  0039                     _test_adc:	
   261  0039                     	ds	1
   262  003A                     _closeTime:	
   263  003A                     	ds	1
   264  003B                     _longKeyFlag:	
   265  003B                     	ds	1
   266  003C                     _powerFlag:	
   267  003C                     	ds	1
   268  003D                     _bujinFlag:	
   269  003D                     	ds	1
   270  003E                     _lowFanTime:	
   271  003E                     	ds	1
   272  003F                     _lowBatTime:	
   273  003F                     	ds	1
   274  0040                     _lowBatLock:	
   275  0040                     	ds	1
   276  0041                     _chrgFullTime:	
   277  0041                     	ds	1
   278  0042                     _chrgFullFlag:	
   279  0042                     	ds	1
   280  0043                     _chrgFlag:	
   281  0043                     	ds	1
   282  0044                     _fanOverTime:	
   283  0044                     	ds	1
   284  0045                     _count10s:	
   285  0045                     	ds	1
   286  0046                     _fanDuty:	
   287  0046                     	ds	1
   288  0047                     _wuhuaFlag:	
   289  0047                     	ds	1
   290  0048                     _count1s:	
   291  0048                     	ds	1
   292  0049                     _MainTime:	
   293  0049                     	ds	1
   294  004A                     _adresult:	
   295  004A                     	ds	2
   296                           
   297                           	psect	bssBANK1
   298  00A0                     __pbssBANK1:	
   299  00A0                     _KeyReference:	
   300  00A0                     	ds	6
   301  00A6                     _KeyOldValue2:	
   302  00A6                     	ds	6
   303  00AC                     _KeyOldValue1:	
   304  00AC                     	ds	6
   305  00B2                     _KeyOldValue0:	
   306  00B2                     	ds	6
   307  00B8                     _KeyResSum:	
   308  00B8                     	ds	6
   309  00BE                     _KeyUpShake:	
   310  00BE                     	ds	3
   311  00C1                     CheckValidTime@F87:	
   312  00C1                     	ds	2
   313  00C3                     _result:	
   314  00C3                     	ds	2
   315  00C5                     _fanValue:	
   316  00C5                     	ds	2
   317                           
   318                           	psect	clrtext
   319  07F4                     clear_ram0:	
   320                           ;	Called with FSR containing the base address, and
   321                           ;	W with the last address+1
   322                           
   323  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
   324  07F5                     clrloop0:	
   325  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
   326  07F6  0A84               	incf	4,f	;increment pointer
   327  07F7  0604               	xorwf	4,w	;XOR with final address
   328  07F8  1903               	btfsc	3,2	;have we reached the end yet?
   329  07F9  3400               	retlw	0	;all done for this memory range, return
   330  07FA  0604               	xorwf	4,w	;XOR again to restore value
   331  07FB  2FF5               	goto	clrloop0	;do the next byte
   332                           
   333                           	psect	cstackBANK1
   334  00C7                     __pcstackBANK1:	
   335  00C7                     workCtr@power_temp:	
   336                           
   337                           ; 4 bytes @ 0x0
   338  00C7                     	ds	4
   339                           
   340                           	psect	cstackCOMMON
   341  0070                     __pcstackCOMMON:	
   342  0070                     ?_SystemEnterSleep:	
   343  0070                     ?_CheckTouchKey:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Init_System:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_Refurbish_Sfr:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_KeyServer:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_Isr_Timer:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_Isr_Timer:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_WorkSleep:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_chrgCtr:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_keyLedCtr:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_pwmInit:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_pwmStop:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_fanInit:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_fanStop:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_fanCtr:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_wuhuaCtr:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_bujinCtr:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_workCtr:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_main:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_KeyIsIn:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_KeyClearOne:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_KeyClearIn:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_KeyStopClear:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_ClearResSum:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_GetTouchKeyValue:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_CheckOnceResult:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_CheckKeyOldValue:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_TurnKeyFlags:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_CheckValidTime:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0070                     	ds	2
   430  0072                     ??_Init_System:	
   431  0072                     ??_Refurbish_Sfr:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     ??_KeyServer:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ?_ADC_Sample:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0072                     ??_chrgCtr:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0072                     ??_pwmInit:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0072                     ??_pwmStop:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ??_fanInit:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ??_fanStop:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     ??_wuhuaCtr:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     ??_bujinCtr:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ??_KeyIsIn:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ??_KeyClearOne:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     ??_ClearResSum:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     ?_KeyHave:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     ??_CheckValidTime:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     ??___lmul:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ?___lwmod:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ?___ftpack:	
   483                           ; 2 bytes @ 0x2
   484                           
   485  0072                     ADC_Sample@adldo:	
   486                           ; 3 bytes @ 0x2
   487                           
   488  0072                     KeyIsIn@46:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     KeyClearOne@49:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ClearResSum@56:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     KeyHave@59:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ___lwmod@divisor:	
   501                           ; 2 bytes @ 0x2
   502                           
   503  0072                     ___ftpack@arg:	
   504                           ; 2 bytes @ 0x2
   505                           
   506  0072                     ___lmul@product:	
   507                           ; 3 bytes @ 0x2
   508                           
   509                           
   510                           ; 4 bytes @ 0x2
   511  0072                     	ds	1
   512  0073                     ??_ADC_Sample:	
   513  0073                     ??_KeyStopClear:	
   514                           ; 1 bytes @ 0x3
   515                           
   516  0073                     ??_GetTouchKeyValue:	
   517                           ; 1 bytes @ 0x3
   518                           
   519  0073                     KeyIsIn@45:	
   520                           ; 1 bytes @ 0x3
   521                           
   522  0073                     KeyStopClear@53:	
   523                           ; 1 bytes @ 0x3
   524                           
   525  0073                     GetTouchKeyValue@64:	
   526                           ; 1 bytes @ 0x3
   527                           
   528                           
   529                           ; 2 bytes @ 0x3
   530  0073                     	ds	1
   531  0074                     ??_KeyClearIn:	
   532  0074                     ??_KeyHave:	
   533                           ; 1 bytes @ 0x4
   534                           
   535  0074                     ??_CheckKeyOldValue:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0074                     bujinCtr@tempStep:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0074                     KeyClearIn@51:	
   542                           ; 1 bytes @ 0x4
   543                           
   544  0074                     KeyHave@58:	
   545                           ; 1 bytes @ 0x4
   546                           
   547  0074                     ___lwmod@dividend:	
   548                           ; 1 bytes @ 0x4
   549                           
   550                           
   551                           ; 2 bytes @ 0x4
   552  0074                     	ds	1
   553  0075                     ??_TurnKeyFlags:	
   554  0075                     ___ftpack@exp:	
   555                           ; 1 bytes @ 0x5
   556                           
   557  0075                     GetTouchKeyValue@63:	
   558                           ; 1 bytes @ 0x5
   559                           
   560                           
   561                           ; 2 bytes @ 0x5
   562  0075                     	ds	1
   563  0076                     ??___lwmod:	
   564  0076                     ___ftpack@sign:	
   565                           ; 1 bytes @ 0x6
   566                           
   567  0076                     ___lwmod@counter:	
   568                           ; 1 bytes @ 0x6
   569                           
   570                           
   571                           ; 1 bytes @ 0x6
   572  0076                     	ds	1
   573  0077                     ??_keyLedCtr:	
   574  0077                     ??_fanCtr:	
   575                           ; 1 bytes @ 0x7
   576                           
   577  0077                     ??_workCtr:	
   578                           ; 1 bytes @ 0x7
   579                           
   580  0077                     ??___lwtoft:	
   581                           ; 1 bytes @ 0x7
   582                           
   583  0077                     GetTouchKeyValue@62:	
   584                           ; 1 bytes @ 0x7
   585                           
   586                           
   587                           ; 1 bytes @ 0x7
   588  0077                     	ds	1
   589  0078                     ??_CheckTouchKey:	
   590  0078                     ??_WorkSleep:	
   591                           ; 1 bytes @ 0x8
   592                           
   593  0078                     ??_main:	
   594                           ; 1 bytes @ 0x8
   595                           
   596                           
   597                           	psect	cstackBANK0
   598  004C                     __pcstackBANK0:	
   599                           ; 1 bytes @ 0x8
   600                           
   601  004C                     ??_SystemEnterSleep:	
   602  004C                     ??___ftpack:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  004C                     ??_CheckOnceResult:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  004C                     ?___lmul:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  004C                     ADC_Sample@j:	
   612                           ; 4 bytes @ 0x0
   613                           
   614  004C                     CheckKeyOldValue@79:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  004C                     ___lmul@multiplier:	
   618                           ; 2 bytes @ 0x0
   619                           
   620                           
   621                           ; 4 bytes @ 0x0
   622  004C                     	ds	1
   623  004D                     ADC_Sample@adch:	
   624                           
   625                           ; 1 bytes @ 0x1
   626  004D                     	ds	1
   627  004E                     ADC_Sample@i:	
   628  004E                     CheckKeyOldValue@80:	
   629                           ; 1 bytes @ 0x2
   630                           
   631  004E                     SystemEnterSleep@94:	
   632                           ; 2 bytes @ 0x2
   633                           
   634                           
   635                           ; 2 bytes @ 0x2
   636  004E                     	ds	1
   637  004F                     ?___lwtoft:	
   638  004F                     ___lwtoft@c:	
   639                           ; 3 bytes @ 0x3
   640                           
   641  004F                     ADC_Sample@adsum:	
   642                           ; 2 bytes @ 0x3
   643                           
   644                           
   645                           ; 4 bytes @ 0x3
   646  004F                     	ds	1
   647  0050                     CheckKeyOldValue@78:	
   648  0050                     CheckOnceResult@73:	
   649                           ; 1 bytes @ 0x4
   650                           
   651  0050                     SystemEnterSleep@93:	
   652                           ; 2 bytes @ 0x4
   653                           
   654  0050                     ___lmul@multiplicand:	
   655                           ; 2 bytes @ 0x4
   656                           
   657                           
   658                           ; 4 bytes @ 0x4
   659  0050                     	ds	2
   660  0052                     ?___ftdiv:	
   661  0052                     CheckOnceResult@70:	
   662                           ; 3 bytes @ 0x6
   663                           
   664  0052                     SystemEnterSleep@92:	
   665                           ; 1 bytes @ 0x6
   666                           
   667  0052                     ___ftdiv@f2:	
   668                           ; 2 bytes @ 0x6
   669                           
   670                           
   671                           ; 3 bytes @ 0x6
   672  0052                     	ds	1
   673  0053                     ADC_Sample@admin:	
   674  0053                     CheckOnceResult@72:	
   675                           ; 2 bytes @ 0x7
   676                           
   677                           
   678                           ; 2 bytes @ 0x7
   679  0053                     	ds	1
   680  0054                     SystemEnterSleep@91:	
   681                           
   682                           ; 1 bytes @ 0x8
   683  0054                     	ds	1
   684  0055                     CheckOnceResult@69:	
   685  0055                     ADC_Sample@admax:	
   686                           ; 1 bytes @ 0x9
   687                           
   688  0055                     ___ftdiv@f1:	
   689                           ; 2 bytes @ 0x9
   690                           
   691                           
   692                           ; 3 bytes @ 0x9
   693  0055                     	ds	1
   694  0056                     CheckOnceResult@71:	
   695                           
   696                           ; 2 bytes @ 0xA
   697  0056                     	ds	1
   698  0057                     ADC_Sample@ad_temp:	
   699                           
   700                           ; 2 bytes @ 0xB
   701  0057                     	ds	1
   702  0058                     ??___ftdiv:	
   703  0058                     CheckOnceResult@68:	
   704                           ; 1 bytes @ 0xC
   705                           
   706                           
   707                           ; 1 bytes @ 0xC
   708  0058                     	ds	1
   709  0059                     fanCtr@maxFanValue:	
   710                           
   711                           ; 1 bytes @ 0xD
   712  0059                     	ds	1
   713  005A                     fanCtr@fan_temp:	
   714                           
   715                           ; 4 bytes @ 0xE
   716  005A                     	ds	1
   717  005B                     ___ftdiv@cntr:	
   718                           
   719                           ; 1 bytes @ 0xF
   720  005B                     	ds	1
   721  005C                     ___ftdiv@f3:	
   722                           
   723                           ; 3 bytes @ 0x10
   724  005C                     	ds	3
   725  005F                     ___ftdiv@exp:	
   726                           
   727                           ; 1 bytes @ 0x13
   728  005F                     	ds	1
   729  0060                     ___ftdiv@sign:	
   730                           
   731                           ; 1 bytes @ 0x14
   732  0060                     	ds	1
   733  0061                     ?___fttol:	
   734  0061                     ___fttol@f1:	
   735                           ; 4 bytes @ 0x15
   736                           
   737                           
   738                           ; 3 bytes @ 0x15
   739  0061                     	ds	4
   740  0065                     ??___fttol:	
   741                           
   742                           ; 1 bytes @ 0x19
   743  0065                     	ds	3
   744  0068                     ___fttol@sign1:	
   745                           
   746                           ; 1 bytes @ 0x1C
   747  0068                     	ds	1
   748  0069                     ___fttol@lval:	
   749                           
   750                           ; 4 bytes @ 0x1D
   751  0069                     	ds	4
   752  006D                     ___fttol@exp1:	
   753                           
   754                           ; 1 bytes @ 0x21
   755  006D                     	ds	1
   756                           
   757                           	psect	maintext
   758  0EC3                     __pmaintext:	
   759 ;;
   760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   761 ;;
   762 ;; *************** function _main *****************
   763 ;; Defined at:
   764 ;;		line 776 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : B00/0
   775 ;;		On exit  : 200/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   778 ;;      Params:         0       0       0       0
   779 ;;      Locals:         0       0       0       0
   780 ;;      Temps:          0       0       0       0
   781 ;;      Totals:         0       0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels required when called:    6
   784 ;; This function calls:
   785 ;;		_CheckTouchKey
   786 ;;		_Init_System
   787 ;;		_KeyServer
   788 ;;		_Refurbish_Sfr
   789 ;;		_WorkSleep
   790 ;;		_chrgCtr
   791 ;;		_workCtr
   792 ;; This function is called by:
   793 ;;		Startup code after reset
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           
   798                           ;psect for function _main
   799  0EC3                     _main:	
   800                           
   801                           ;main.c: 778: Init_System();
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   805  0EC3  118A  241A  158A   	fcall	_Init_System
   806                           
   807                           ;main.c: 779: firstLock = 1;
   808  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
   809  0EC7  30C8               	movlw	200
   810  0EC8  01EE               	clrf	_firstLock
   811  0EC9  0AEE               	incf	_firstLock,f
   812                           
   813                           ;main.c: 780: firstTime = 200;
   814  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
   815  0ECB  00CB               	movwf	_firstTime^(0+128)
   816  0ECC                     l4675:	
   817                           
   818                           ;main.c: 782: {
   819                           ;main.c: 783: if(B_MainLoop)
   820  0ECC  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   821  0ECD  2ECC               	goto	l4675
   822                           
   823                           ;main.c: 784: {
   824                           ;main.c: 785: B_MainLoop = 0;
   825  0ECE  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   826  0ECF  0064               	clrwdt	;# 
   827                           
   828                           ;main.c: 788: CheckTouchKey();
   829  0ED0  118A  2467  158A   	fcall	_CheckTouchKey
   830                           
   831                           ;main.c: 789: chrgCtr();
   832  0ED3  158A  26A5  158A   	fcall	_chrgCtr
   833                           
   834                           ;main.c: 790: Refurbish_Sfr();
   835  0ED6  118A  277E  158A   	fcall	_Refurbish_Sfr
   836                           
   837                           ;main.c: 791: KeyServer();
   838  0ED9  158A  2703  158A   	fcall	_KeyServer
   839                           
   840                           ;main.c: 792: workCtr();
   841  0EDC  118A  2020  158A   	fcall	_workCtr
   842                           
   843                           ;main.c: 793: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && powerFlag == 0 && k
      +                          eyCount == 0 && wuhuaFlag == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   844  0EDF  1683               	bsf	3,5	;RP0=1, select bank1
   845  0EE0  084B               	movf	_firstTime^(0+128),w
   846  0EE1  1D03               	btfss	3,2
   847  0EE2  2ECC               	goto	l4675
   848  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
   849  0EE4  0843               	movf	_chrgFlag,w
   850  0EE5  1D03               	btfss	3,2
   851  0EE6  2ECC               	goto	l4675
   852  0EE7  087B               	movf	_workStep,w
   853  0EE8  1D03               	btfss	3,2
   854  0EE9  2ECC               	goto	l4675
   855  0EEA  083C               	movf	_powerFlag,w
   856  0EEB  1D03               	btfss	3,2
   857  0EEC  2ECC               	goto	l4675
   858  0EED  0824               	movf	_keyCount,w
   859  0EEE  0425               	iorwf	_keyCount+1,w
   860  0EEF  1D03               	btfss	3,2
   861  0EF0  2ECC               	goto	l4675
   862  0EF1  0847               	movf	_wuhuaFlag,w
   863  0EF2  1D03               	btfss	3,2
   864  0EF3  2ECC               	goto	l4675
   865  0EF4  083D               	movf	_bujinFlag,w
   866  0EF5  1D03               	btfss	3,2
   867  0EF6  2ECC               	goto	l4675
   868  0EF7  082E               	movf	_shanshuoTime,w
   869  0EF8  042F               	iorwf	_shanshuoTime+1,w
   870  0EF9  1D03               	btfss	3,2
   871  0EFA  2ECC               	goto	l4675
   872  0EFB  082C               	movf	_shanshuoTime2,w
   873  0EFC  042D               	iorwf	_shanshuoTime2+1,w
   874  0EFD  1D03               	btfss	3,2
   875  0EFE  2ECC               	goto	l4675
   876                           
   877                           ;main.c: 794: {
   878                           ;main.c: 795: WorkSleep();
   879  0EFF  118A  2438  158A   	fcall	_WorkSleep
   880  0F02  2ECC               	goto	l4675
   881  0F03                     __end_of_main:	
   882                           
   883                           	psect	text1
   884  0020                     __ptext1:	
   885 ;; *************** function _workCtr *****************
   886 ;; Defined at:
   887 ;;		line 720 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 300/0
   898 ;;		On exit  : 200/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   901 ;;      Params:         0       0       0       0
   902 ;;      Locals:         0       0       4       0
   903 ;;      Temps:          0       0       0       0
   904 ;;      Totals:         0       0       4       0
   905 ;;Total ram usage:        4 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    3
   908 ;; This function calls:
   909 ;;		_ADC_Sample
   910 ;;		___ftdiv
   911 ;;		___fttol
   912 ;;		___lwtoft
   913 ;;		_bujinCtr
   914 ;;		_fanCtr
   915 ;;		_keyLedCtr
   916 ;;		_wuhuaCtr
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _workCtr
   924  0020                     _workCtr:	
   925                           
   926                           ;incstack = 0
   927                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   928  0020  301F               	movlw	31
   929                           
   930                           ;main.c: 722: test_adc = ADC_Sample(31, 0);
   931  0021  01F2               	clrf	ADC_Sample@adldo
   932  0022  219D  118A         	fcall	_ADC_Sample
   933  0024  00B9               	movwf	_test_adc	;volatile
   934                           
   935                           ;main.c: 723: if (0xA5 == test_adc)
   936  0025  30A5               	movlw	165
   937  0026  0639               	xorwf	_test_adc,w	;volatile
   938  0027  1D03               	btfss	3,2
   939  0028  285A               	goto	l4599
   940                           
   941                           ;main.c: 724: {
   942                           ;main.c: 725: volatile unsigned long power_temp;
   943                           ;main.c: 727: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   944  0029  3096               	movlw	150
   945  002A  01D5               	clrf	___ftdiv@f1
   946  002B  00D6               	movwf	___ftdiv@f1+1
   947  002C  304A               	movlw	74
   948  002D  00D7               	movwf	___ftdiv@f1+2
   949  002E  084B               	movf	_adresult+1,w	;volatile
   950  002F  00D0               	movwf	___lwtoft@c+1
   951  0030  084A               	movf	_adresult,w	;volatile
   952  0031  00CF               	movwf	___lwtoft@c
   953  0032  214F  118A         	fcall	___lwtoft
   954  0034  084F               	movf	?___lwtoft,w
   955  0035  00D2               	movwf	___ftdiv@f2
   956  0036  0850               	movf	?___lwtoft+1,w
   957  0037  00D3               	movwf	___ftdiv@f2+1
   958  0038  0851               	movf	?___lwtoft+2,w
   959  0039  00D4               	movwf	___ftdiv@f2+2
   960  003A  2094  118A         	fcall	___ftdiv
   961  003C  0852               	movf	?___ftdiv,w
   962  003D  00E1               	movwf	___fttol@f1
   963  003E  0853               	movf	?___ftdiv+1,w
   964  003F  00E2               	movwf	___fttol@f1+1
   965  0040  0854               	movf	?___ftdiv+2,w
   966  0041  00E3               	movwf	___fttol@f1+2
   967  0042  20F6  118A         	fcall	___fttol
   968  0044  0864               	movf	?___fttol+3,w
   969  0045  1683               	bsf	3,5	;RP0=1, select bank1
   970  0046  00CA               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   971  0047  1283               	bcf	3,5	;RP0=0, select bank0
   972  0048  0863               	movf	?___fttol+2,w
   973  0049  1683               	bsf	3,5	;RP0=1, select bank1
   974  004A  00C9               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   975  004B  1283               	bcf	3,5	;RP0=0, select bank0
   976  004C  0862               	movf	?___fttol+1,w
   977  004D  1683               	bsf	3,5	;RP0=1, select bank1
   978  004E  00C8               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   979  004F  1283               	bcf	3,5	;RP0=0, select bank0
   980  0050  0861               	movf	?___fttol,w
   981  0051  1683               	bsf	3,5	;RP0=1, select bank1
   982  0052  00C7               	movwf	workCtr@power_temp^(0+128)	;volatile
   983                           
   984                           ;main.c: 728: power_ad = (unsigned int)(power_temp);
   985  0053  0848               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
   986  0054  1283               	bcf	3,5	;RP0=0, select bank0
   987  0055  00A3               	movwf	_power_ad+1	;volatile
   988  0056  1683               	bsf	3,5	;RP0=1, select bank1
   989  0057  0847               	movf	workCtr@power_temp^(0+128),w	;volatile
   990  0058  1283               	bcf	3,5	;RP0=0, select bank0
   991  0059  00A2               	movwf	_power_ad	;volatile
   992  005A                     l4599:	
   993                           
   994                           ;main.c: 729: }
   995                           ;main.c: 730: if(workStep == 2 && power_ad < 2900)
   996  005A  3002               	movlw	2
   997  005B  067B               	xorwf	_workStep,w
   998  005C  1D03               	btfss	3,2
   999  005D  286E               	goto	l4609
  1000  005E  300B               	movlw	11
  1001  005F  0223               	subwf	_power_ad+1,w	;volatile
  1002  0060  3054               	movlw	84
  1003  0061  1903               	skipnz
  1004  0062  0222               	subwf	_power_ad,w	;volatile
  1005  0063  1803               	skipnc
  1006  0064  286E               	goto	l4609
  1007                           
  1008                           ;main.c: 731: {
  1009                           ;main.c: 732: if(++lowFanTime > 200)
  1010  0065  30C9               	movlw	201
  1011  0066  0ABE               	incf	_lowFanTime,f
  1012  0067  023E               	subwf	_lowFanTime,w
  1013  0068  1C03               	skipc
  1014  0069  286F               	goto	l4611
  1015                           
  1016                           ;main.c: 733: {
  1017                           ;main.c: 734: lowFanTime = 0;
  1018  006A  01BE               	clrf	_lowFanTime
  1019                           
  1020                           ;main.c: 735: workStep = 1;
  1021  006B  01FB               	clrf	_workStep
  1022  006C  0AFB               	incf	_workStep,f
  1023  006D  286F               	goto	l4611
  1024  006E                     l4609:	
  1025                           
  1026                           ;main.c: 738: else
  1027                           ;main.c: 739: {
  1028                           ;main.c: 740: lowFanTime = 0;
  1029  006E  01BE               	clrf	_lowFanTime
  1030  006F                     l4611:	
  1031                           
  1032                           ;main.c: 741: }
  1033                           ;main.c: 742: if(power_ad < 2700)
  1034  006F  300A               	movlw	10
  1035  0070  0223               	subwf	_power_ad+1,w	;volatile
  1036  0071  308C               	movlw	140
  1037  0072  1903               	skipnz
  1038  0073  0222               	subwf	_power_ad,w	;volatile
  1039  0074  1803               	skipnc
  1040  0075  2882               	goto	l4619
  1041                           
  1042                           ;main.c: 743: {
  1043                           ;main.c: 744: if(++lowBatTime > 200)
  1044  0076  30C9               	movlw	201
  1045  0077  0ABF               	incf	_lowBatTime,f
  1046  0078  023F               	subwf	_lowBatTime,w
  1047  0079  1C03               	skipc
  1048  007A  2883               	goto	l4621
  1049                           
  1050                           ;main.c: 745: {
  1051                           ;main.c: 746: lowBatTime = 0;
  1052  007B  01BF               	clrf	_lowBatTime
  1053                           
  1054                           ;main.c: 747: lowBatLock = 1;
  1055  007C  01C0               	clrf	_lowBatLock
  1056  007D  0AC0               	incf	_lowBatLock,f
  1057                           
  1058                           ;main.c: 748: workStep = 0;
  1059  007E  01FB               	clrf	_workStep
  1060                           
  1061                           ;main.c: 749: wuhuaFlag = 0;
  1062  007F  01C7               	clrf	_wuhuaFlag
  1063                           
  1064                           ;main.c: 750: bujinFlag = 0;
  1065  0080  01BD               	clrf	_bujinFlag
  1066  0081  2883               	goto	l4621
  1067  0082                     l4619:	
  1068                           
  1069                           ;main.c: 753: else
  1070                           ;main.c: 754: {
  1071                           ;main.c: 755: lowBatTime = 0;
  1072  0082  01BF               	clrf	_lowBatTime
  1073  0083                     l4621:	
  1074                           
  1075                           ;main.c: 756: }
  1076                           ;main.c: 757: if(firstTime > 0)
  1077  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1078  0084  084B               	movf	_firstTime^(0+128),w
  1079  0085  1903               	btfsc	3,2
  1080  0086  288D               	goto	l4629
  1081                           
  1082                           ;main.c: 758: {
  1083                           ;main.c: 759: firstTime--;
  1084  0087  03CB               	decf	_firstTime^(0+128),f
  1085                           
  1086                           ;main.c: 760: PORTB = 0x00;
  1087  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0089  0186               	clrf	6	;volatile
  1089                           
  1090                           ;main.c: 761: PORTA = 0x00;
  1091  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1092  008B  0186               	clrf	6	;volatile
  1093                           
  1094                           ;main.c: 762: }
  1095  008C  0008               	return
  1096  008D                     l4629:	
  1097                           
  1098                           ;main.c: 763: else
  1099                           ;main.c: 764: {
  1100                           ;main.c: 765: keyLedCtr();
  1101  008D  230C  118A         	fcall	_keyLedCtr
  1102                           
  1103                           ;main.c: 766: fanCtr();
  1104  008F  226D  118A         	fcall	_fanCtr
  1105                           
  1106                           ;main.c: 767: wuhuaCtr();
  1107  0091  23B6               	fcall	_wuhuaCtr
  1108                           
  1109                           ;main.c: 768: bujinCtr();
  1110  0092  158A  2F76         	ljmp	l4347
  1111  0094                     __end_of_workCtr:	
  1112  0094                     __ptext15:	
  1113 ;; *************** function ___ftdiv *****************
  1114 ;; Defined at:
  1115 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  f2              3    6[BANK0 ] float 
  1118 ;;  f1              3    9[BANK0 ] float 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  f3              3   16[BANK0 ] float 
  1121 ;;  sign            1   20[BANK0 ] unsigned char 
  1122 ;;  exp             1   19[BANK0 ] unsigned char 
  1123 ;;  cntr            1   15[BANK0 ] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  3    6[BANK0 ] float 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0, pclath, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 300/0
  1130 ;;		On exit  : 300/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1133 ;;      Params:         0       6       0       0
  1134 ;;      Locals:         0       6       0       0
  1135 ;;      Temps:          0       3       0       0
  1136 ;;      Totals:         0      15       0       0
  1137 ;;Total ram usage:       15 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		___ftpack
  1142 ;; This function is called by:
  1143 ;;		_workCtr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function ___ftdiv
  1149  0094                     ___ftdiv:	
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1153  0094  0855               	movf	___ftdiv@f1,w
  1154  0095  00D8               	movwf	??___ftdiv
  1155  0096  0856               	movf	___ftdiv@f1+1,w
  1156  0097  00D9               	movwf	??___ftdiv+1
  1157  0098  0857               	movf	___ftdiv@f1+2,w
  1158  0099  00DA               	movwf	??___ftdiv+2
  1159  009A  1003               	clrc
  1160  009B  0D59               	rlf	??___ftdiv+1,w
  1161  009C  0D5A               	rlf	??___ftdiv+2,w
  1162  009D  00DF               	movwf	___ftdiv@exp
  1163  009E  085F               	movf	___ftdiv@exp,w
  1164  009F  1D03               	btfss	3,2
  1165  00A0  28A2               	goto	l4469
  1166  00A1  2C08               	ljmp	PL44	;call to abstracted procedure
  1167  00A2                     l4469:	
  1168  00A2  0852               	movf	___ftdiv@f2,w
  1169  00A3  00D8               	movwf	??___ftdiv
  1170  00A4  0853               	movf	___ftdiv@f2+1,w
  1171  00A5  00D9               	movwf	??___ftdiv+1
  1172  00A6  0854               	movf	___ftdiv@f2+2,w
  1173  00A7  00DA               	movwf	??___ftdiv+2
  1174  00A8  1003               	clrc
  1175  00A9  0D59               	rlf	??___ftdiv+1,w
  1176  00AA  0D5A               	rlf	??___ftdiv+2,w
  1177  00AB  00E0               	movwf	___ftdiv@sign
  1178  00AC  0860               	movf	___ftdiv@sign,w
  1179  00AD  1D03               	btfss	3,2
  1180  00AE  28B0               	goto	l1571
  1181  00AF  2C08               	ljmp	PL44	;call to abstracted procedure
  1182  00B0                     l1571:	
  1183  00B0  3089               	movlw	137
  1184  00B1  01DC               	clrf	___ftdiv@f3
  1185  00B2  01DD               	clrf	___ftdiv@f3+1
  1186  00B3  01DE               	clrf	___ftdiv@f3+2
  1187  00B4  0760               	addwf	___ftdiv@sign,w
  1188  00B5  00D8               	movwf	??___ftdiv
  1189  00B6  02DF               	subwf	___ftdiv@exp,f
  1190  00B7  0857               	movf	___ftdiv@f1+2,w
  1191  00B8  00E0               	movwf	___ftdiv@sign
  1192  00B9  0854               	movf	___ftdiv@f2+2,w
  1193  00BA  06E0               	xorwf	___ftdiv@sign,f
  1194  00BB  3080               	movlw	128
  1195  00BC  05E0               	andwf	___ftdiv@sign,f
  1196  00BD  3018               	movlw	24
  1197  00BE  17D6               	bsf	___ftdiv@f1+1,7
  1198  00BF  01D7               	clrf	___ftdiv@f1+2
  1199  00C0  17D3               	bsf	___ftdiv@f2+1,7
  1200  00C1  01D4               	clrf	___ftdiv@f2+2
  1201  00C2  00DB               	movwf	___ftdiv@cntr
  1202  00C3                     l4491:	
  1203  00C3  1003               	clrc
  1204  00C4  0DDC               	rlf	___ftdiv@f3,f
  1205  00C5  0DDD               	rlf	___ftdiv@f3+1,f
  1206  00C6  0DDE               	rlf	___ftdiv@f3+2,f
  1207  00C7  0854               	movf	___ftdiv@f2+2,w
  1208  00C8  0257               	subwf	___ftdiv@f1+2,w
  1209  00C9  1D03               	skipz
  1210  00CA  28D1               	goto	u4545
  1211  00CB  0853               	movf	___ftdiv@f2+1,w
  1212  00CC  0256               	subwf	___ftdiv@f1+1,w
  1213  00CD  1D03               	skipz
  1214  00CE  28D1               	goto	u4545
  1215  00CF  0852               	movf	___ftdiv@f2,w
  1216  00D0  0255               	subwf	___ftdiv@f1,w
  1217  00D1                     u4545:	
  1218  00D1  1C03               	skipc
  1219  00D2  28DF               	goto	L7
  1220  00D3  0852               	movf	___ftdiv@f2,w
  1221  00D4  02D5               	subwf	___ftdiv@f1,f
  1222  00D5  0853               	movf	___ftdiv@f2+1,w
  1223  00D6  1C03               	skipc
  1224  00D7  0F53               	incfsz	___ftdiv@f2+1,w
  1225  00D8  02D6               	subwf	___ftdiv@f1+1,f
  1226  00D9  0854               	movf	___ftdiv@f2+2,w
  1227  00DA  1C03               	skipc
  1228  00DB  0A54               	incf	___ftdiv@f2+2,w
  1229  00DC  02D7               	subwf	___ftdiv@f1+2,f
  1230  00DD  145C               	bsf	___ftdiv@f3,0
  1231  00DE  1003               	clrc
  1232  00DF                     L7:	
  1233  00DF  0DD5               	rlf	___ftdiv@f1,f
  1234  00E0  0DD6               	rlf	___ftdiv@f1+1,f
  1235  00E1  0DD7               	rlf	___ftdiv@f1+2,f
  1236  00E2  0BDB               	decfsz	___ftdiv@cntr,f
  1237  00E3  28C3               	goto	l4491
  1238  00E4  085C               	movf	___ftdiv@f3,w
  1239  00E5  00F2               	movwf	___ftpack@arg
  1240  00E6  085D               	movf	___ftdiv@f3+1,w
  1241  00E7  00F3               	movwf	___ftpack@arg+1
  1242  00E8  085E               	movf	___ftdiv@f3+2,w
  1243  00E9  00F4               	movwf	___ftpack@arg+2
  1244  00EA  085F               	movf	___ftdiv@exp,w
  1245  00EB  00F5               	movwf	___ftpack@exp
  1246  00EC  0860               	movf	___ftdiv@sign,w
  1247  00ED  00F6               	movwf	___ftpack@sign
  1248  00EE  215F               	fcall	___ftpack
  1249  00EF  0872               	movf	?___ftpack,w
  1250  00F0  00D2               	movwf	?___ftdiv
  1251  00F1  0873               	movf	?___ftpack+1,w
  1252  00F2  00D3               	movwf	?___ftdiv+1
  1253  00F3  0874               	movf	?___ftpack+2,w
  1254  00F4  00D4               	movwf	?___ftdiv+2
  1255  00F5  0008               	return
  1256  00F6                     __end_of___ftdiv:	
  1257  00F6                     __ptext14:	
  1258 ;; *************** function ___fttol *****************
  1259 ;; Defined at:
  1260 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  f1              3   21[BANK0 ] float 
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  lval            4   29[BANK0 ] unsigned long 
  1265 ;;  exp1            1   33[BANK0 ] unsigned char 
  1266 ;;  sign1           1   28[BANK0 ] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  4   21[BANK0 ] long 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 300/0
  1273 ;;		On exit  : 300/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       4       0       0
  1277 ;;      Locals:         0       6       0       0
  1278 ;;      Temps:          0       3       0       0
  1279 ;;      Totals:         0      13       0       0
  1280 ;;Total ram usage:       13 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    1
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_workCtr
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function ___fttol
  1292  00F6                     ___fttol:	
  1293                           
  1294                           ;incstack = 0
  1295                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1296  00F6  23F7  118A         	fcall	PL22	;call to abstracted procedure
  1297  00F8  1003               	clrc
  1298  00F9  0D66               	rlf	??___fttol+1,w
  1299  00FA  0D67               	rlf	??___fttol+2,w
  1300  00FB  00ED               	movwf	___fttol@exp1
  1301  00FC  086D               	movf	___fttol@exp1,w
  1302  00FD  1D03               	btfss	3,2
  1303  00FE  2904               	goto	l4509
  1304  00FF                     l4507:	
  1305  00FF  01E1               	clrf	?___fttol
  1306  0100  01E2               	clrf	?___fttol+1
  1307  0101  01E3               	clrf	?___fttol+2
  1308  0102  01E4               	clrf	?___fttol+3
  1309  0103  0008               	return
  1310  0104                     l4509:	
  1311  0104  23F7  118A         	fcall	PL22	;call to abstracted procedure
  1312  0106  3017               	movlw	23
  1313  0107                     u4575:	
  1314  0107  1003               	clrc
  1315  0108  0CE7               	rrf	??___fttol+2,f
  1316  0109  0CE6               	rrf	??___fttol+1,f
  1317  010A  0CE5               	rrf	??___fttol,f
  1318  010B  3EFF               	addlw	-1
  1319  010C  1D03               	skipz
  1320  010D  2907               	goto	u4575
  1321  010E  0865               	movf	??___fttol,w
  1322  010F  00E8               	movwf	___fttol@sign1
  1323  0110  17E2               	bsf	___fttol@f1+1,7
  1324  0111  01E3               	clrf	___fttol@f1+2
  1325  0112  0861               	movf	___fttol@f1,w
  1326  0113  00E9               	movwf	___fttol@lval
  1327  0114  0862               	movf	___fttol@f1+1,w
  1328  0115  00EA               	movwf	___fttol@lval+1
  1329  0116  0863               	movf	___fttol@f1+2,w
  1330  0117  00EB               	movwf	___fttol@lval+2
  1331  0118  308E               	movlw	142
  1332  0119  01EC               	clrf	___fttol@lval+3
  1333  011A  02ED               	subwf	___fttol@exp1,f
  1334  011B  1FED               	btfss	___fttol@exp1,7
  1335  011C  292A               	goto	l4529
  1336  011D  086D               	movf	___fttol@exp1,w
  1337  011E  3A80               	xorlw	128
  1338  011F  3E8F               	addlw	143
  1339  0120  1C03               	btfss	3,0
  1340  0121  28FF               	goto	l4507
  1341  0122                     l4525:	
  1342  0122  1003               	clrc
  1343  0123  0CEC               	rrf	___fttol@lval+3,f
  1344  0124  0CEB               	rrf	___fttol@lval+2,f
  1345  0125  0CEA               	rrf	___fttol@lval+1,f
  1346  0126  0CE9               	rrf	___fttol@lval,f
  1347  0127  0FED               	incfsz	___fttol@exp1,f
  1348  0128  2922               	goto	l4525
  1349  0129  2938               	goto	l4537
  1350  012A                     l4529:	
  1351  012A  3018               	movlw	24
  1352  012B  026D               	subwf	___fttol@exp1,w
  1353  012C  1803               	btfsc	3,0
  1354  012D  28FF               	goto	l4507
  1355  012E                     l4535:	
  1356  012E  086D               	movf	___fttol@exp1,w
  1357  012F  1903               	btfsc	3,2
  1358  0130  2938               	goto	l4537
  1359  0131  1003               	clrc
  1360  0132  0DE9               	rlf	___fttol@lval,f
  1361  0133  0DEA               	rlf	___fttol@lval+1,f
  1362  0134  0DEB               	rlf	___fttol@lval+2,f
  1363  0135  0DEC               	rlf	___fttol@lval+3,f
  1364  0136  03ED               	decf	___fttol@exp1,f
  1365  0137  292E               	goto	l4535
  1366  0138                     l4537:	
  1367  0138  0868               	movf	___fttol@sign1,w
  1368  0139  1903               	btfsc	3,2
  1369  013A  2946               	goto	l4541
  1370  013B  09E9               	comf	___fttol@lval,f
  1371  013C  09EA               	comf	___fttol@lval+1,f
  1372  013D  09EB               	comf	___fttol@lval+2,f
  1373  013E  09EC               	comf	___fttol@lval+3,f
  1374  013F  0AE9               	incf	___fttol@lval,f
  1375  0140  1903               	skipnz
  1376  0141  0AEA               	incf	___fttol@lval+1,f
  1377  0142  1903               	skipnz
  1378  0143  0AEB               	incf	___fttol@lval+2,f
  1379  0144  1903               	skipnz
  1380  0145  0AEC               	incf	___fttol@lval+3,f
  1381  0146                     l4541:	
  1382  0146  086C               	movf	___fttol@lval+3,w
  1383  0147  00E4               	movwf	?___fttol+3
  1384  0148  086B               	movf	___fttol@lval+2,w
  1385  0149  00E3               	movwf	?___fttol+2
  1386  014A  086A               	movf	___fttol@lval+1,w
  1387  014B  00E2               	movwf	?___fttol+1
  1388  014C  0869               	movf	___fttol@lval,w
  1389  014D  00E1               	movwf	?___fttol
  1390  014E  0008               	return
  1391  014F                     __end_of___fttol:	
  1392  014F                     __ptext13:	
  1393 ;; *************** function ___lwtoft *****************
  1394 ;; Defined at:
  1395 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  c               2    3[BANK0 ] unsigned int 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  3    3[BANK0 ] float 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, pclath, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 300/0
  1406 ;;		On exit  : 300/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1409 ;;      Params:         0       3       0       0
  1410 ;;      Locals:         0       0       0       0
  1411 ;;      Temps:          0       0       0       0
  1412 ;;      Totals:         0       3       0       0
  1413 ;;Total ram usage:        3 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    2
  1416 ;; This function calls:
  1417 ;;		___ftpack
  1418 ;; This function is called by:
  1419 ;;		_workCtr
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           
  1424                           ;psect for function ___lwtoft
  1425  014F                     ___lwtoft:	
  1426                           
  1427                           ;incstack = 0
  1428                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1429  014F  084F               	movf	___lwtoft@c,w
  1430  0150  00F2               	movwf	___ftpack@arg
  1431  0151  0850               	movf	___lwtoft@c+1,w
  1432  0152  00F3               	movwf	___ftpack@arg+1
  1433  0153  308E               	movlw	142
  1434  0154  01F4               	clrf	___ftpack@arg+2
  1435  0155  00F5               	movwf	___ftpack@exp
  1436  0156  01F6               	clrf	___ftpack@sign
  1437  0157  215F               	fcall	___ftpack
  1438  0158  0872               	movf	?___ftpack,w
  1439  0159  00CF               	movwf	?___lwtoft
  1440  015A  0873               	movf	?___ftpack+1,w
  1441  015B  00D0               	movwf	?___lwtoft+1
  1442  015C  0874               	movf	?___ftpack+2,w
  1443  015D  00D1               	movwf	?___lwtoft+2
  1444  015E  0008               	return
  1445  015F                     __end_of___lwtoft:	
  1446  015F                     __ptext16:	
  1447 ;; *************** function ___ftpack *****************
  1448 ;; Defined at:
  1449 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  arg             3    2[COMMON] unsigned um
  1452 ;;  exp             1    5[COMMON] unsigned char 
  1453 ;;  sign            1    6[COMMON] unsigned char 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  3    2[COMMON] float 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 300/0
  1462 ;;		On exit  : 300/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1465 ;;      Params:         5       0       0       0
  1466 ;;      Locals:         0       0       0       0
  1467 ;;      Temps:          0       3       0       0
  1468 ;;      Totals:         5       3       0       0
  1469 ;;Total ram usage:        8 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    1
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		___ftdiv
  1476 ;;		___lwtoft
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           
  1481                           ;psect for function ___ftpack
  1482  015F                     ___ftpack:	
  1483                           
  1484                           ;incstack = 0
  1485                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1486  015F  0875               	movf	___ftpack@exp,w
  1487  0160  1903               	btfsc	3,2
  1488  0161  2967               	goto	l1517
  1489  0162  0874               	movf	___ftpack@arg+2,w
  1490  0163  0473               	iorwf	___ftpack@arg+1,w
  1491  0164  0472               	iorwf	___ftpack@arg,w
  1492  0165  1D03               	skipz
  1493  0166  296E               	goto	l4101
  1494  0167                     l1517:	
  1495  0167  01F2               	clrf	?___ftpack
  1496  0168  01F3               	clrf	?___ftpack+1
  1497  0169  01F4               	clrf	?___ftpack+2
  1498  016A  0008               	return
  1499  016B                     l4099:	
  1500  016B  0AF5               	incf	___ftpack@exp,f
  1501  016C  23FE  118A         	fcall	PL38	;call to abstracted procedure
  1502  016E                     l4101:	
  1503  016E  30FE               	movlw	254
  1504  016F  0574               	andwf	___ftpack@arg+2,w
  1505  0170  1903               	btfsc	3,2
  1506  0171  297B               	goto	l4105
  1507  0172  296B               	goto	l4099
  1508  0173                     l4103:	
  1509  0173  0AF5               	incf	___ftpack@exp,f
  1510  0174  0AF2               	incf	___ftpack@arg,f
  1511  0175  1903               	skipnz
  1512  0176  0AF3               	incf	___ftpack@arg+1,f
  1513  0177  1903               	skipnz
  1514  0178  0AF4               	incf	___ftpack@arg+2,f
  1515  0179  23FE  118A         	fcall	PL38	;call to abstracted procedure
  1516  017B                     l4105:	
  1517  017B  30FF               	movlw	255
  1518  017C  0574               	andwf	___ftpack@arg+2,w
  1519  017D  1903               	btfsc	3,2
  1520  017E  2989               	goto	l4109
  1521  017F  2973               	goto	l4103
  1522  0180                     l4111:	
  1523  0180  3002               	movlw	2
  1524  0181  0275               	subwf	___ftpack@exp,w
  1525  0182  1C03               	btfss	3,0
  1526  0183  298B               	goto	l1529
  1527  0184  03F5               	decf	___ftpack@exp,f
  1528  0185  1003               	clrc
  1529  0186  0DF2               	rlf	___ftpack@arg,f
  1530  0187  0DF3               	rlf	___ftpack@arg+1,f
  1531  0188  0DF4               	rlf	___ftpack@arg+2,f
  1532  0189                     l4109:	
  1533  0189  1FF3               	btfss	___ftpack@arg+1,7
  1534  018A  2980               	goto	l4111
  1535  018B                     l1529:	
  1536  018B  1C75               	btfss	___ftpack@exp,0
  1537  018C  13F3               	bcf	___ftpack@arg+1,7
  1538  018D  1003               	clrc
  1539  018E  0CF5               	rrf	___ftpack@exp,f
  1540  018F  0875               	movf	___ftpack@exp,w
  1541  0190  00CE               	movwf	??___ftpack+2
  1542  0191  01CD               	clrf	??___ftpack+1
  1543  0192  01CC               	clrf	??___ftpack
  1544  0193  084C               	movf	??___ftpack,w
  1545  0194  04F2               	iorwf	___ftpack@arg,f
  1546  0195  084D               	movf	??___ftpack+1,w
  1547  0196  04F3               	iorwf	___ftpack@arg+1,f
  1548  0197  084E               	movf	??___ftpack+2,w
  1549  0198  04F4               	iorwf	___ftpack@arg+2,f
  1550  0199  0876               	movf	___ftpack@sign,w
  1551  019A  1D03               	btfss	3,2
  1552  019B  17F4               	bsf	___ftpack@arg+2,7
  1553  019C  0008               	return
  1554  019D                     __end_of___ftpack:	
  1555  019D                     __ptext11:	
  1556 ;; *************** function _ADC_Sample *****************
  1557 ;; Defined at:
  1558 ;;		line 301 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;  adch            1    wreg     unsigned char 
  1561 ;;  adldo           1    2[COMMON] unsigned char 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  adch            1    1[BANK0 ] unsigned char 
  1564 ;;  j               1    0[BANK0 ] unsigned char 
  1565 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1566 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1567 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1568 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1569 ;;  i               1    2[BANK0 ] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      unsigned char 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0
  1574 ;; Tracked objects:
  1575 ;;		On entry : 300/0
  1576 ;;		On exit  : 300/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1579 ;;      Params:         1       0       0       0
  1580 ;;      Locals:         0      13       0       0
  1581 ;;      Temps:          4       0       0       0
  1582 ;;      Totals:         5      13       0       0
  1583 ;;Total ram usage:       18 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    1
  1586 ;; This function calls:
  1587 ;;		Nothing
  1588 ;; This function is called by:
  1589 ;;		_fanCtr
  1590 ;;		_workCtr
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           
  1595                           ;psect for function _ADC_Sample
  1596  019D                     _ADC_Sample:	
  1597                           
  1598                           ;incstack = 0
  1599                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1600                           ;ADC_Sample@adch stored from wreg
  1601  019D  00CD               	movwf	ADC_Sample@adch
  1602                           
  1603                           ;main.c: 303: volatile unsigned long adsum = 0;
  1604                           
  1605                           ;main.c: 304: volatile unsigned int admin = 0, admax = 0;
  1606  019E  23EE  118A         	fcall	PL16	;call to abstracted procedure
  1607                           
  1608                           ;main.c: 305: volatile unsigned int ad_temp = 0;
  1609  01A0  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  1610  01A1  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1611                           
  1612                           ;main.c: 307: if ((!LDO_EN) && (adldo & 0x04) )
  1613  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1614  01A3  1D16               	btfss	22,2	;volatile
  1615  01A4  1D72               	btfss	ADC_Sample@adldo,2
  1616  01A5  29AE               	goto	l3987
  1617                           
  1618                           ;main.c: 308: {
  1619                           ;main.c: 310: ADCON1 = adldo;
  1620  01A6  0872               	movf	ADC_Sample@adldo,w
  1621  01A7  0096               	movwf	22	;volatile
  1622                           
  1623                           ;main.c: 311: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1624  01A8  3042               	movlw	66
  1625  01A9  00F3               	movwf	??_ADC_Sample
  1626  01AA                     u4897:	
  1627  01AA  0BF3               	decfsz	??_ADC_Sample,f
  1628  01AB  29AA               	goto	u4897
  1629  01AC  0000               	nop
  1630                           
  1631                           ;main.c: 312: }
  1632  01AD  29B0               	goto	l3989
  1633  01AE                     l3987:	
  1634                           
  1635                           ;main.c: 313: else
  1636                           ;main.c: 314: ADCON1 = adldo;
  1637  01AE  0872               	movf	ADC_Sample@adldo,w
  1638  01AF  0096               	movwf	22	;volatile
  1639  01B0                     l3989:	
  1640                           
  1641                           ;main.c: 316: if(adch & 0x10)
  1642  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1643  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  1644  01B2  1E4D               	btfss	ADC_Sample@adch,4
  1645  01B3  29B9               	goto	l3997
  1646                           
  1647                           ;main.c: 317: {
  1648                           ;main.c: 318: CHS4 = 1;
  1649  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  1650  01B5  1716               	bsf	22,6	;volatile
  1651                           
  1652                           ;main.c: 319: adch &= 0x0f;
  1653  01B6  300F               	movlw	15
  1654  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1655  01B8  05CD               	andwf	ADC_Sample@adch,f
  1656  01B9                     l3997:	
  1657                           
  1658                           ;main.c: 322: for (i = 0; i < 10; i++)
  1659  01B9  01CE               	clrf	ADC_Sample@i
  1660  01BA                     l4003:	
  1661                           
  1662                           ;main.c: 323: {
  1663                           ;main.c: 324: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1664  01BA  084D               	movf	ADC_Sample@adch,w
  1665  01BB  00F3               	movwf	??_ADC_Sample
  1666  01BC  3001               	movlw	1
  1667  01BD  1003               	clrc
  1668  01BE                     L4:	
  1669  01BE  0DF3               	rlf	??_ADC_Sample,f
  1670  01BF  3EFF               	addlw	-1
  1671  01C0  1003               	clrc
  1672  01C1  1D03               	skipz
  1673  01C2  29BE               	goto	L4
  1674  01C3  0D73               	rlf	??_ADC_Sample,w
  1675  01C4  3841               	iorlw	65
  1676  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  1677  01C6  0095               	movwf	21	;volatile
  1678  01C7  0000               	nop	;# 
  1679  01C8  0000               	nop	;# 
  1680  01C9  0000               	nop	;# 
  1681  01CA  0000               	nop	;# 
  1682                           
  1683                           ;main.c: 329: GODONE = 1;
  1684  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1685  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1686  01CD  1495               	bsf	21,1	;volatile
  1687                           
  1688                           ;main.c: 331: unsigned char j = 0;
  1689  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1690  01CF  01CC               	clrf	ADC_Sample@j
  1691  01D0                     l989:	
  1692                           ;main.c: 332: while (GODONE)
  1693                           
  1694  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  1695  01D1  1C95               	btfss	21,1	;volatile
  1696  01D2  29DA               	goto	l4013
  1697                           
  1698                           ;main.c: 333: {
  1699                           ;main.c: 334: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1700  01D3  29D4               	nop2	;2 cycle nop
  1701  01D4  29D5               	nop2	;2 cycle nop
  1702                           
  1703                           ;main.c: 336: if (0 == (--j))
  1704  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1705  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1706  01D7  0BCC               	decfsz	ADC_Sample@j,f
  1707  01D8  29D0               	goto	l989
  1708                           
  1709                           ;main.c: 337: return 0;
  1710  01D9  3400               	retlw	0
  1711  01DA                     l4013:	
  1712                           
  1713                           ;main.c: 338: }
  1714                           ;main.c: 340: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1715  01DA  0819               	movf	25,w	;volatile
  1716  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1717  01DC  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  1718  01DD  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1719  01DE  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  1720  01DF  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1721  01E0  30F0               	movlw	240
  1722  01E1  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1723  01E2  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1724  01E3  390F               	andlw	15
  1725  01E4  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1726  01E5  30F0               	movlw	240
  1727  01E6  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  1728  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1729  01E8  0E18               	swapf	24,w	;volatile
  1730  01E9  390F               	andlw	15
  1731  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1732  01EB  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  1733  01EC  1803               	skipnc
  1734  01ED  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1735                           
  1736                           ;main.c: 342: if (0 == admax)
  1737  01EE  0855               	movf	ADC_Sample@admax,w	;volatile
  1738  01EF  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  1739  01F0  1D03               	btfss	3,2
  1740  01F1  29F5               	goto	l4021
  1741                           
  1742                           ;main.c: 343: {
  1743                           ;main.c: 344: admax = ad_temp;
  1744  01F2  2403  118A         	fcall	PL42	;call to abstracted procedure
  1745  01F4  2A08               	goto	l4027
  1746  01F5                     l4021:	
  1747                           ;main.c: 346: }
  1748                           
  1749                           ;main.c: 345: admin = ad_temp;
  1750                           
  1751                           
  1752                           ;main.c: 347: else if (ad_temp > admax)
  1753  01F5  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1754  01F6  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  1755  01F7  1D03               	skipz
  1756  01F8  29FB               	goto	u3695
  1757  01F9  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1758  01FA  0255               	subwf	ADC_Sample@admax,w	;volatile
  1759  01FB                     u3695:	
  1760  01FB  1803               	skipnc
  1761  01FC  2A00               	goto	l4025
  1762                           
  1763                           ;main.c: 348: admax = ad_temp;
  1764  01FD  2403  118A         	fcall	PL42	;call to abstracted procedure
  1765  01FF  2A0C               	goto	l995
  1766  0200                     l4025:	
  1767                           
  1768                           ;main.c: 349: else if (ad_temp < admin)
  1769  0200  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1770  0201  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1771  0202  1D03               	skipz
  1772  0203  2A06               	goto	u3705
  1773  0204  0853               	movf	ADC_Sample@admin,w	;volatile
  1774  0205  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  1775  0206                     u3705:	
  1776  0206  1803               	skipnc
  1777  0207  2A0C               	goto	l995
  1778  0208                     l4027:	
  1779                           
  1780                           ;main.c: 350: admin = ad_temp;
  1781  0208  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1782  0209  00D4               	movwf	ADC_Sample@admin+1	;volatile
  1783  020A  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1784  020B  00D3               	movwf	ADC_Sample@admin	;volatile
  1785  020C                     l995:	
  1786                           
  1787                           ;main.c: 352: adsum += ad_temp;
  1788  020C  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1789  020D  00F3               	movwf	??_ADC_Sample
  1790  020E  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1791  020F  00F4               	movwf	??_ADC_Sample+1
  1792  0210  01F5               	clrf	??_ADC_Sample+2
  1793  0211  01F6               	clrf	??_ADC_Sample+3
  1794  0212  0873               	movf	??_ADC_Sample,w
  1795  0213  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  1796  0214  0874               	movf	??_ADC_Sample+1,w
  1797  0215  1103               	clrz
  1798  0216  1803               	skipnc
  1799  0217  3E01               	addlw	1
  1800  0218  1D03               	btfss	3,2
  1801  0219  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  1802  021A  0875               	movf	??_ADC_Sample+2,w
  1803  021B  1103               	clrz
  1804  021C  1803               	skipnc
  1805  021D  3E01               	addlw	1
  1806  021E  1D03               	btfss	3,2
  1807  021F  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  1808  0220  0876               	movf	??_ADC_Sample+3,w
  1809  0221  1103               	clrz
  1810  0222  1803               	skipnc
  1811  0223  3E01               	addlw	1
  1812  0224  1D03               	btfss	3,2
  1813  0225  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  1814  0226  300A               	movlw	10
  1815  0227  0ACE               	incf	ADC_Sample@i,f
  1816  0228  024E               	subwf	ADC_Sample@i,w
  1817  0229  1C03               	skipc
  1818  022A  29BA               	goto	l4003
  1819                           
  1820                           ;main.c: 353: }
  1821                           ;main.c: 354: adsum -= admax;
  1822  022B  0855               	movf	ADC_Sample@admax,w	;volatile
  1823  022C  00F3               	movwf	??_ADC_Sample
  1824  022D  0856               	movf	ADC_Sample@admax+1,w	;volatile
  1825  022E  23DF  118A         	fcall	PL6	;call to abstracted procedure
  1826  0230  1C03               	skipc
  1827  0231  0F76               	incfsz	??_ADC_Sample+3,w
  1828  0232  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1829                           
  1830                           ;main.c: 355: if (adsum >= admin)
  1831  0233  0853               	movf	ADC_Sample@admin,w	;volatile
  1832  0234  00F3               	movwf	??_ADC_Sample
  1833  0235  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1834  0236  00F4               	movwf	??_ADC_Sample+1
  1835  0237  01F5               	clrf	??_ADC_Sample+2
  1836  0238  01F6               	clrf	??_ADC_Sample+3
  1837  0239  0876               	movf	??_ADC_Sample+3,w
  1838  023A  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  1839  023B  1D03               	skipz
  1840  023C  2A47               	goto	u3745
  1841  023D  0875               	movf	??_ADC_Sample+2,w
  1842  023E  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  1843  023F  1D03               	skipz
  1844  0240  2A47               	goto	u3745
  1845  0241  0874               	movf	??_ADC_Sample+1,w
  1846  0242  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  1847  0243  1D03               	skipz
  1848  0244  2A47               	goto	u3745
  1849  0245  0873               	movf	??_ADC_Sample,w
  1850  0246  024F               	subwf	ADC_Sample@adsum,w	;volatile
  1851  0247                     u3745:	
  1852  0247  1C03               	skipc
  1853  0248  2A52               	goto	l999
  1854                           
  1855                           ;main.c: 356: adsum -= admin;
  1856  0249  0853               	movf	ADC_Sample@admin,w	;volatile
  1857  024A  00F3               	movwf	??_ADC_Sample
  1858  024B  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1859  024C  23DF  118A         	fcall	PL6	;call to abstracted procedure
  1860  024E  1C03               	skipc
  1861  024F  0F76               	incfsz	??_ADC_Sample+3,w
  1862  0250  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1863  0251  2A56               	goto	l4037
  1864  0252                     l999:	
  1865                           
  1866                           ;main.c: 357: else
  1867                           ;main.c: 358: adsum = 0;
  1868  0252  01CF               	clrf	ADC_Sample@adsum	;volatile
  1869  0253  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  1870  0254  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  1871  0255  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  1872  0256                     l4037:	
  1873                           
  1874                           ;main.c: 360: adresult = adsum >> 3;
  1875  0256  084F               	movf	ADC_Sample@adsum,w	;volatile
  1876  0257  00F3               	movwf	??_ADC_Sample
  1877  0258  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  1878  0259  00F4               	movwf	??_ADC_Sample+1
  1879  025A  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  1880  025B  00F5               	movwf	??_ADC_Sample+2
  1881  025C  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  1882  025D  00F6               	movwf	??_ADC_Sample+3
  1883  025E  3003               	movlw	3
  1884  025F                     u3765:	
  1885  025F  1003               	clrc
  1886  0260  0CF6               	rrf	??_ADC_Sample+3,f
  1887  0261  0CF5               	rrf	??_ADC_Sample+2,f
  1888  0262  0CF4               	rrf	??_ADC_Sample+1,f
  1889  0263  0CF3               	rrf	??_ADC_Sample,f
  1890  0264  3EFF               	addlw	-1
  1891  0265  1D03               	skipz
  1892  0266  2A5F               	goto	u3765
  1893  0267  0874               	movf	??_ADC_Sample+1,w
  1894  0268  00CB               	movwf	_adresult+1	;volatile
  1895  0269  0873               	movf	??_ADC_Sample,w
  1896  026A  00CA               	movwf	_adresult	;volatile
  1897                           
  1898                           ;main.c: 362: adsum = 0;
  1899                           
  1900                           ;main.c: 363: admin = 0;
  1901                           
  1902                           ;main.c: 364: admax = 0;
  1903  026B  23EE               	fcall	PL16	;call to abstracted procedure
  1904                           
  1905                           ;main.c: 365: return 0xA5;
  1906  026C  34A5               	retlw	165
  1907  026D                     __end_of_ADC_Sample:	
  1908  026D                     __ptext7:	
  1909 ;; *************** function _fanCtr *****************
  1910 ;; Defined at:
  1911 ;;		line 514 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1916 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0, pclath, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 300/100
  1923 ;;		On exit  : 200/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1926 ;;      Params:         0       0       0       0
  1927 ;;      Locals:         0       5       0       0
  1928 ;;      Temps:          0       0       0       0
  1929 ;;      Totals:         0       5       0       0
  1930 ;;Total ram usage:        5 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    2
  1933 ;; This function calls:
  1934 ;;		_ADC_Sample
  1935 ;;		___lmul
  1936 ;;		_fanInit
  1937 ;;		_fanStop
  1938 ;; This function is called by:
  1939 ;;		_workCtr
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _fanCtr
  1945  026D                     _fanCtr:	
  1946                           
  1947                           ;main.c: 516: if(workStep > 0)
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1951  026D  087B               	movf	_workStep,w
  1952  026E  1903               	btfsc	3,2
  1953  026F  2AD3               	goto	l4313
  1954                           
  1955                           ;main.c: 517: {
  1956                           ;main.c: 518: PORTA |= 0x02;
  1957  0270  1486               	bsf	6,1	;volatile
  1958                           
  1959                           ;main.c: 519: unsigned char maxFanValue = 52;
  1960  0271  3034               	movlw	52
  1961  0272  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0273  00D9               	movwf	fanCtr@maxFanValue
  1963                           
  1964                           ;main.c: 520: if(workStep == 1)
  1965  0274  0B7B               	decfsz	_workStep,w
  1966  0275  2A78               	goto	l4277
  1967                           
  1968                           ;main.c: 521: {
  1969                           ;main.c: 522: maxFanValue = 40;
  1970  0276  3028               	movlw	40
  1971  0277  2A7D               	goto	L3
  1972  0278                     l4277:	
  1973                           ;main.c: 523: }
  1974                           
  1975                           
  1976                           ;main.c: 524: else if(workStep == 3)
  1977  0278  3003               	movlw	3
  1978  0279  067B               	xorwf	_workStep,w
  1979  027A  1D03               	btfss	3,2
  1980  027B  2A7E               	goto	l4281
  1981                           
  1982                           ;main.c: 525: {
  1983                           ;main.c: 526: maxFanValue = 10;
  1984  027C  300A               	movlw	10
  1985  027D                     L3:	
  1986  027D  00D9               	movwf	fanCtr@maxFanValue
  1987  027E                     l4281:	
  1988  027E  3002               	movlw	2
  1989                           
  1990                           ;main.c: 527: }
  1991                           ;main.c: 528: test_adc = ADC_Sample(2, 0);
  1992  027F  01F2               	clrf	ADC_Sample@adldo
  1993  0280  219D  118A         	fcall	_ADC_Sample
  1994  0282  00B9               	movwf	_test_adc	;volatile
  1995                           
  1996                           ;main.c: 529: if (0xA5 == test_adc)
  1997  0283  30A5               	movlw	165
  1998  0284  0639               	xorwf	_test_adc,w	;volatile
  1999  0285  1D03               	btfss	3,2
  2000  0286  2AB1               	goto	l4293
  2001                           
  2002                           ;main.c: 530: {
  2003                           ;main.c: 531: volatile unsigned long fan_temp;
  2004                           ;main.c: 532: if(power_ad > 0)
  2005  0287  0822               	movf	_power_ad,w	;volatile
  2006  0288  0423               	iorwf	_power_ad+1,w	;volatile
  2007  0289  1903               	btfsc	3,2
  2008  028A  2AB1               	goto	l4293
  2009                           
  2010                           ;main.c: 533: {
  2011                           ;main.c: 534: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2012  028B  084A               	movf	_adresult,w	;volatile
  2013  028C  00CC               	movwf	___lmul@multiplier
  2014  028D  084B               	movf	_adresult+1,w	;volatile
  2015  028E  00CD               	movwf	___lmul@multiplier+1
  2016  028F  01CE               	clrf	___lmul@multiplier+2
  2017  0290  01CF               	clrf	___lmul@multiplier+3
  2018  0291  0822               	movf	_power_ad,w	;volatile
  2019  0292  00D0               	movwf	___lmul@multiplicand
  2020  0293  0823               	movf	_power_ad+1,w	;volatile
  2021  0294  00D1               	movwf	___lmul@multiplicand+1
  2022  0295  01D2               	clrf	___lmul@multiplicand+2
  2023  0296  01D3               	clrf	___lmul@multiplicand+3
  2024  0297  22D9  118A         	fcall	___lmul
  2025  0299  084F               	movf	?___lmul+3,w
  2026  029A  00DD               	movwf	fanCtr@fan_temp+3	;volatile
  2027  029B  084E               	movf	?___lmul+2,w
  2028  029C  00DC               	movwf	fanCtr@fan_temp+2	;volatile
  2029  029D  084D               	movf	?___lmul+1,w
  2030  029E  00DB               	movwf	fanCtr@fan_temp+1	;volatile
  2031  029F  084C               	movf	?___lmul,w
  2032  02A0  00DA               	movwf	fanCtr@fan_temp	;volatile
  2033  02A1  300C               	movlw	12
  2034  02A2                     u4185:	
  2035  02A2  1003               	clrc
  2036  02A3  0CDD               	rrf	fanCtr@fan_temp+3,f	;volatile
  2037  02A4  0CDC               	rrf	fanCtr@fan_temp+2,f	;volatile
  2038  02A5  0CDB               	rrf	fanCtr@fan_temp+1,f	;volatile
  2039  02A6  0CDA               	rrf	fanCtr@fan_temp,f	;volatile
  2040  02A7  3EFF               	addlw	-1
  2041  02A8  1D03               	skipz
  2042  02A9  2AA2               	goto	u4185
  2043                           
  2044                           ;main.c: 535: fanValue = (unsigned int)(fan_temp);
  2045  02AA  085B               	movf	fanCtr@fan_temp+1,w	;volatile
  2046  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2047  02AC  00C6               	movwf	(_fanValue+1)^(0+128)
  2048  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  2049  02AE  085A               	movf	fanCtr@fan_temp,w	;volatile
  2050  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  2051  02B0  00C5               	movwf	_fanValue^(0+128)
  2052  02B1                     l4293:	
  2053                           
  2054                           ;main.c: 536: }
  2055                           ;main.c: 537: }
  2056                           ;main.c: 538: if(fanValue > 1300)
  2057  02B1  3005               	movlw	5
  2058  02B2  1683               	bsf	3,5	;RP0=1, select bank1
  2059  02B3  0246               	subwf	(_fanValue+1)^(0+128),w
  2060  02B4  3015               	movlw	21
  2061  02B5  1903               	skipnz
  2062  02B6  0245               	subwf	_fanValue^(0+128),w
  2063  02B7  1C03               	skipc
  2064  02B8  2AC6               	goto	l4301
  2065                           
  2066                           ;main.c: 539: {
  2067                           ;main.c: 540: if(++fanOverTime > 50)
  2068  02B9  3033               	movlw	51
  2069  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2070  02BB  0AC4               	incf	_fanOverTime,f
  2071  02BC  0244               	subwf	_fanOverTime,w
  2072  02BD  1C03               	skipc
  2073  02BE  2AC8               	goto	l4303
  2074  02BF  30C2               	movlw	194
  2075                           
  2076                           ;main.c: 541: {
  2077                           ;main.c: 542: fanOverTime = 0;
  2078  02C0  01C4               	clrf	_fanOverTime
  2079                           
  2080                           ;main.c: 543: workStep = 0;
  2081  02C1  01FB               	clrf	_workStep
  2082                           
  2083                           ;main.c: 544: shanshuoTime = 450;
  2084  02C2  00AE               	movwf	_shanshuoTime
  2085  02C3  3001               	movlw	1
  2086  02C4  00AF               	movwf	_shanshuoTime+1
  2087  02C5  2AC8               	goto	l4303
  2088  02C6                     l4301:	
  2089                           
  2090                           ;main.c: 547: else
  2091                           ;main.c: 548: {
  2092                           ;main.c: 549: fanOverTime = 0;
  2093  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2094  02C7  01C4               	clrf	_fanOverTime
  2095  02C8                     l4303:	
  2096                           
  2097                           ;main.c: 550: }
  2098                           ;main.c: 551: if(fanDuty < maxFanValue)
  2099  02C8  0859               	movf	fanCtr@maxFanValue,w
  2100  02C9  0246               	subwf	_fanDuty,w
  2101  02CA  1803               	skipnc
  2102  02CB  2ACE               	goto	l4307
  2103                           
  2104                           ;main.c: 552: {
  2105                           ;main.c: 553: fanDuty++;
  2106  02CC  0AC6               	incf	_fanDuty,f
  2107                           
  2108                           ;main.c: 554: }
  2109  02CD  2AD2               	goto	l4311
  2110  02CE                     l4307:	
  2111                           
  2112                           ;main.c: 555: else if(fanDuty > maxFanValue)
  2113  02CE  0846               	movf	_fanDuty,w
  2114  02CF  0259               	subwf	fanCtr@maxFanValue,w
  2115  02D0  1C03               	btfss	3,0
  2116                           
  2117                           ;main.c: 556: {
  2118                           ;main.c: 557: fanDuty--;
  2119  02D1  03C6               	decf	_fanDuty,f
  2120  02D2                     l4311:	
  2121                           
  2122                           ;main.c: 558: }
  2123                           ;main.c: 559: fanInit();
  2124  02D2  2BA5               	ljmp	l4065
  2125  02D3                     l4313:	
  2126                           ;main.c: 560: }
  2127                           
  2128                           
  2129                           ;main.c: 561: else
  2130                           ;main.c: 562: {
  2131                           ;main.c: 563: fanStop();
  2132  02D3  23B0               	fcall	_fanStop
  2133                           
  2134                           ;main.c: 564: fanDuty = 0;
  2135  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2136  02D5  01C6               	clrf	_fanDuty
  2137                           
  2138                           ;main.c: 565: PORTA &= 0xFD;
  2139  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2140  02D7  1086               	bcf	6,1	;volatile
  2141  02D8  0008               	return
  2142  02D9                     __end_of_fanCtr:	
  2143  02D9                     __ptext10:	
  2144 ;; *************** function ___lmul *****************
  2145 ;; Defined at:
  2146 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2149 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  product         4    2[COMMON] unsigned long 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  4    0[BANK0 ] unsigned long 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 300/0
  2158 ;;		On exit  : 300/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2161 ;;      Params:         0       8       0       0
  2162 ;;      Locals:         4       0       0       0
  2163 ;;      Temps:          0       0       0       0
  2164 ;;      Totals:         4       8       0       0
  2165 ;;Total ram usage:       12 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    1
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_fanCtr
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function ___lmul
  2177  02D9                     ___lmul:	
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2181  02D9  01F2               	clrf	___lmul@product
  2182  02DA  01F3               	clrf	___lmul@product+1
  2183  02DB  01F4               	clrf	___lmul@product+2
  2184  02DC  01F5               	clrf	___lmul@product+3
  2185  02DD                     l1372:	
  2186  02DD  1C4C               	btfss	___lmul@multiplier,0
  2187  02DE  2AF3               	goto	l4087
  2188  02DF  0850               	movf	___lmul@multiplicand,w
  2189  02E0  07F2               	addwf	___lmul@product,f
  2190  02E1  0851               	movf	___lmul@multiplicand+1,w
  2191  02E2  1103               	clrz
  2192  02E3  1803               	skipnc
  2193  02E4  3E01               	addlw	1
  2194  02E5  1D03               	btfss	3,2
  2195  02E6  07F3               	addwf	___lmul@product+1,f
  2196  02E7  0852               	movf	___lmul@multiplicand+2,w
  2197  02E8  1103               	clrz
  2198  02E9  1803               	skipnc
  2199  02EA  3E01               	addlw	1
  2200  02EB  1D03               	btfss	3,2
  2201  02EC  07F4               	addwf	___lmul@product+2,f
  2202  02ED  0853               	movf	___lmul@multiplicand+3,w
  2203  02EE  1103               	clrz
  2204  02EF  1803               	skipnc
  2205  02F0  3E01               	addlw	1
  2206  02F1  1D03               	btfss	3,2
  2207  02F2  07F5               	addwf	___lmul@product+3,f
  2208  02F3                     l4087:	
  2209  02F3  1003               	clrc
  2210  02F4  0DD0               	rlf	___lmul@multiplicand,f
  2211  02F5  0DD1               	rlf	___lmul@multiplicand+1,f
  2212  02F6  0DD2               	rlf	___lmul@multiplicand+2,f
  2213  02F7  0DD3               	rlf	___lmul@multiplicand+3,f
  2214  02F8  1003               	clrc
  2215  02F9  0CCF               	rrf	___lmul@multiplier+3,f
  2216  02FA  0CCE               	rrf	___lmul@multiplier+2,f
  2217  02FB  0CCD               	rrf	___lmul@multiplier+1,f
  2218  02FC  0CCC               	rrf	___lmul@multiplier,f
  2219  02FD  084F               	movf	___lmul@multiplier+3,w
  2220  02FE  044E               	iorwf	___lmul@multiplier+2,w
  2221  02FF  044D               	iorwf	___lmul@multiplier+1,w
  2222  0300  044C               	iorwf	___lmul@multiplier,w
  2223  0301  1D03               	skipz
  2224  0302  2ADD               	goto	l1372
  2225  0303  0875               	movf	___lmul@product+3,w
  2226  0304  00CF               	movwf	?___lmul+3
  2227  0305  0874               	movf	___lmul@product+2,w
  2228  0306  00CE               	movwf	?___lmul+2
  2229  0307  0873               	movf	___lmul@product+1,w
  2230  0308  00CD               	movwf	?___lmul+1
  2231  0309  0872               	movf	___lmul@product,w
  2232  030A  00CC               	movwf	?___lmul
  2233  030B  0008               	return
  2234  030C                     __end_of___lmul:	
  2235  030C                     __ptext5:	
  2236 ;; *************** function _keyLedCtr *****************
  2237 ;; Defined at:
  2238 ;;		line 400 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0, pclath, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 300/100
  2249 ;;		On exit  : 300/100
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2252 ;;      Params:         0       0       0       0
  2253 ;;      Locals:         0       0       0       0
  2254 ;;      Temps:          0       0       0       0
  2255 ;;      Totals:         0       0       0       0
  2256 ;;Total ram usage:        0 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    2
  2259 ;; This function calls:
  2260 ;;		___lwmod
  2261 ;; This function is called by:
  2262 ;;		_workCtr
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function _keyLedCtr
  2268  030C                     _keyLedCtr:	
  2269                           
  2270                           ;main.c: 402: if(shanshuoTime > 0)
  2271                           
  2272                           ;incstack = 0
  2273                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2274  030C  1283               	bcf	3,5	;RP0=0, select bank0
  2275  030D  082E               	movf	_shanshuoTime,w
  2276  030E  042F               	iorwf	_shanshuoTime+1,w
  2277  030F  1903               	btfsc	3,2
  2278  0310  2B2A               	goto	l4233
  2279                           
  2280                           ;main.c: 403: {
  2281                           ;main.c: 404: shanshuoTime--;
  2282  0311  3001               	movlw	1
  2283  0312  02AE               	subwf	_shanshuoTime,f
  2284  0313  3000               	movlw	0
  2285  0314  1C03               	skipc
  2286  0315  03AF               	decf	_shanshuoTime+1,f
  2287  0316  02AF               	subwf	_shanshuoTime+1,f
  2288                           
  2289                           ;main.c: 405: if((shanshuoTime % 150) < 75)
  2290  0317  3096               	movlw	150
  2291  0318  00F2               	movwf	___lwmod@divisor
  2292  0319  01F3               	clrf	___lwmod@divisor+1
  2293  031A  082F               	movf	_shanshuoTime+1,w
  2294  031B  00F5               	movwf	___lwmod@dividend+1
  2295  031C  082E               	movf	_shanshuoTime,w
  2296  031D  00F4               	movwf	___lwmod@dividend
  2297  031E  2381  118A         	fcall	___lwmod
  2298  0320  3000               	movlw	0
  2299  0321  0273               	subwf	?___lwmod+1,w
  2300  0322  304B               	movlw	75
  2301  0323  1903               	skipnz
  2302  0324  0272               	subwf	?___lwmod,w
  2303  0325  1803               	skipnc
  2304  0326  2B2D               	goto	l1012
  2305  0327                     l4231:	
  2306                           
  2307                           ;main.c: 406: {
  2308                           ;main.c: 407: PORTC |= 0x01;
  2309  0327  1703               	bsf	3,6	;RP1=1, select bank2
  2310  0328  1406               	bsf	6,0	;volatile
  2311                           
  2312                           ;main.c: 408: }
  2313  0329  2B2F               	goto	l4237
  2314  032A                     l4233:	
  2315                           
  2316                           ;main.c: 414: else if(workStep > 0)
  2317  032A  087B               	movf	_workStep,w
  2318  032B  1903               	btfsc	3,2
  2319  032C  2B27               	goto	l4231
  2320  032D                     l1012:	
  2321                           
  2322                           ;main.c: 409: else
  2323                           ;main.c: 410: {
  2324                           ;main.c: 411: PORTC &= 0xFE;
  2325  032D  1703               	bsf	3,6	;RP1=1, select bank2
  2326  032E  1006               	bcf	6,0	;volatile
  2327  032F                     l4237:	
  2328                           
  2329                           ;main.c: 421: }
  2330                           ;main.c: 423: if(shanshuoTime2 > 0)
  2331  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0330  082C               	movf	_shanshuoTime2,w
  2333  0331  042D               	iorwf	_shanshuoTime2+1,w
  2334  0332  1903               	btfsc	3,2
  2335  0333  2B4D               	goto	l4245
  2336                           
  2337                           ;main.c: 424: {
  2338                           ;main.c: 425: shanshuoTime2--;
  2339  0334  3001               	movlw	1
  2340  0335  02AC               	subwf	_shanshuoTime2,f
  2341  0336  3000               	movlw	0
  2342  0337  1C03               	skipc
  2343  0338  03AD               	decf	_shanshuoTime2+1,f
  2344  0339  02AD               	subwf	_shanshuoTime2+1,f
  2345                           
  2346                           ;main.c: 426: if((shanshuoTime2 % 150) < 75)
  2347  033A  3096               	movlw	150
  2348  033B  00F2               	movwf	___lwmod@divisor
  2349  033C  01F3               	clrf	___lwmod@divisor+1
  2350  033D  082D               	movf	_shanshuoTime2+1,w
  2351  033E  00F5               	movwf	___lwmod@dividend+1
  2352  033F  082C               	movf	_shanshuoTime2,w
  2353  0340  00F4               	movwf	___lwmod@dividend
  2354  0341  2381  118A         	fcall	___lwmod
  2355  0343  3000               	movlw	0
  2356  0344  0273               	subwf	?___lwmod+1,w
  2357  0345  304B               	movlw	75
  2358  0346  1903               	skipnz
  2359  0347  0272               	subwf	?___lwmod,w
  2360  0348  1803               	skipnc
  2361  0349  2B50               	goto	l1018
  2362  034A                     l4243:	
  2363                           
  2364                           ;main.c: 427: {
  2365                           ;main.c: 428: PORTC |= 0x02;
  2366  034A  1703               	bsf	3,6	;RP1=1, select bank2
  2367  034B  1486               	bsf	6,1	;volatile
  2368                           
  2369                           ;main.c: 429: }
  2370  034C  2B52               	goto	l4249
  2371  034D                     l4245:	
  2372                           
  2373                           ;main.c: 435: else if(wuhuaFlag > 0)
  2374  034D  0847               	movf	_wuhuaFlag,w
  2375  034E  1903               	btfsc	3,2
  2376  034F  2B4A               	goto	l4243
  2377  0350                     l1018:	
  2378                           
  2379                           ;main.c: 430: else
  2380                           ;main.c: 431: {
  2381                           ;main.c: 432: PORTC &= 0xFD;
  2382  0350  1703               	bsf	3,6	;RP1=1, select bank2
  2383  0351  1086               	bcf	6,1	;volatile
  2384  0352                     l4249:	
  2385                           
  2386                           ;main.c: 442: }
  2387                           ;main.c: 443: if(shanshuoTime3 > 0)
  2388  0352  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0353  082A               	movf	_shanshuoTime3,w
  2390  0354  042B               	iorwf	_shanshuoTime3+1,w
  2391  0355  1903               	btfsc	3,2
  2392  0356  2B73               	goto	l4257
  2393                           
  2394                           ;main.c: 444: {
  2395                           ;main.c: 445: shanshuoTime3--;
  2396  0357  3001               	movlw	1
  2397  0358  02AA               	subwf	_shanshuoTime3,f
  2398  0359  3000               	movlw	0
  2399  035A  1C03               	skipc
  2400  035B  03AB               	decf	_shanshuoTime3+1,f
  2401  035C  02AB               	subwf	_shanshuoTime3+1,f
  2402                           
  2403                           ;main.c: 446: if((shanshuoTime3 % 150) < 75)
  2404  035D  3096               	movlw	150
  2405  035E  00F2               	movwf	___lwmod@divisor
  2406  035F  01F3               	clrf	___lwmod@divisor+1
  2407  0360  082B               	movf	_shanshuoTime3+1,w
  2408  0361  00F5               	movwf	___lwmod@dividend+1
  2409  0362  082A               	movf	_shanshuoTime3,w
  2410  0363  00F4               	movwf	___lwmod@dividend
  2411  0364  2381  118A         	fcall	___lwmod
  2412  0366  3000               	movlw	0
  2413  0367  0273               	subwf	?___lwmod+1,w
  2414  0368  304B               	movlw	75
  2415  0369  1903               	skipnz
  2416  036A  0272               	subwf	?___lwmod,w
  2417  036B  1803               	skipnc
  2418  036C  2B70               	goto	l1024
  2419  036D                     l4255:	
  2420                           
  2421                           ;main.c: 447: {
  2422                           ;main.c: 448: PORTA |= 0x01;
  2423  036D  1683               	bsf	3,5	;RP0=1, select bank1
  2424  036E  1406               	bsf	6,0	;volatile
  2425                           
  2426                           ;main.c: 449: }
  2427  036F  0008               	return
  2428  0370                     l1024:	
  2429                           
  2430                           ;main.c: 450: else
  2431                           ;main.c: 451: {
  2432                           ;main.c: 452: PORTA &= 0xFE;
  2433  0370  1683               	bsf	3,5	;RP0=1, select bank1
  2434  0371  1006               	bcf	6,0	;volatile
  2435  0372  0008               	return
  2436  0373                     l4257:	
  2437                           
  2438                           ;main.c: 455: else if(powerFlag)
  2439  0373  083C               	movf	_powerFlag,w
  2440  0374  1D03               	btfss	3,2
  2441  0375  2B70               	goto	l1024
  2442                           
  2443                           ;main.c: 459: else if(chrgFlag)
  2444  0376  0843               	movf	_chrgFlag,w
  2445  0377  1903               	btfsc	3,2
  2446  0378  2B6D               	goto	l4255
  2447                           
  2448                           ;main.c: 460: {
  2449                           ;main.c: 461: if(chrgFullFlag || count1s < 50)
  2450  0379  0842               	movf	_chrgFullFlag,w
  2451  037A  1D03               	btfss	3,2
  2452  037B  2B70               	goto	l1024
  2453  037C  3032               	movlw	50
  2454  037D  0248               	subwf	_count1s,w
  2455  037E  1C03               	btfss	3,0
  2456  037F  2B70               	goto	l1024
  2457  0380  2B6D               	goto	l4255
  2458  0381                     __end_of_keyLedCtr:	
  2459  0381                     __ptext6:	
  2460 ;; *************** function ___lwmod *****************
  2461 ;; Defined at:
  2462 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  divisor         2    2[COMMON] unsigned int 
  2465 ;;  dividend        2    4[COMMON] unsigned int 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  counter         1    6[COMMON] unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  2    2[COMMON] unsigned int 
  2470 ;; Registers used:
  2471 ;;		wreg, status,2, status,0
  2472 ;; Tracked objects:
  2473 ;;		On entry : 300/0
  2474 ;;		On exit  : 300/0
  2475 ;;		Unchanged: 300/0
  2476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2477 ;;      Params:         4       0       0       0
  2478 ;;      Locals:         1       0       0       0
  2479 ;;      Temps:          0       0       0       0
  2480 ;;      Totals:         5       0       0       0
  2481 ;;Total ram usage:        5 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    1
  2484 ;; This function calls:
  2485 ;;		Nothing
  2486 ;; This function is called by:
  2487 ;;		_keyLedCtr
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           
  2492                           ;psect for function ___lwmod
  2493  0381                     ___lwmod:	
  2494                           
  2495                           ;incstack = 0
  2496                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2497  0381  0872               	movf	___lwmod@divisor,w
  2498  0382  0473               	iorwf	___lwmod@divisor+1,w
  2499  0383  1903               	btfsc	3,2
  2500  0384  2BA0               	goto	l4135
  2501  0385  01F6               	clrf	___lwmod@counter
  2502  0386                     L1:	
  2503  0386  0AF6               	incf	___lwmod@counter,f
  2504  0387  1BF3               	btfsc	___lwmod@divisor+1,7
  2505  0388  2B8D               	goto	l4127
  2506  0389  1003               	clrc
  2507  038A  0DF2               	rlf	___lwmod@divisor,f
  2508  038B  0DF3               	rlf	___lwmod@divisor+1,f
  2509  038C  2B86               	goto	L1
  2510  038D                     l4127:	
  2511  038D  0873               	movf	___lwmod@divisor+1,w
  2512  038E  0275               	subwf	___lwmod@dividend+1,w
  2513  038F  1D03               	skipz
  2514  0390  2B93               	goto	u3905
  2515  0391  0872               	movf	___lwmod@divisor,w
  2516  0392  0274               	subwf	___lwmod@dividend,w
  2517  0393                     u3905:	
  2518  0393  1C03               	skipc
  2519  0394  2B9C               	goto	L2
  2520  0395  0872               	movf	___lwmod@divisor,w
  2521  0396  02F4               	subwf	___lwmod@dividend,f
  2522  0397  0873               	movf	___lwmod@divisor+1,w
  2523  0398  1C03               	skipc
  2524  0399  03F5               	decf	___lwmod@dividend+1,f
  2525  039A  02F5               	subwf	___lwmod@dividend+1,f
  2526  039B  1003               	clrc
  2527  039C                     L2:	
  2528  039C  0CF3               	rrf	___lwmod@divisor+1,f
  2529  039D  0CF2               	rrf	___lwmod@divisor,f
  2530  039E  0BF6               	decfsz	___lwmod@counter,f
  2531  039F  2B8D               	goto	l4127
  2532  03A0                     l4135:	
  2533  03A0  0875               	movf	___lwmod@dividend+1,w
  2534  03A1  00F3               	movwf	?___lwmod+1
  2535  03A2  0874               	movf	___lwmod@dividend,w
  2536  03A3  00F2               	movwf	?___lwmod
  2537  03A4  0008               	return
  2538  03A5                     __end_of___lwmod:	
  2539  03A5                     __ptext9:	
  2540 ;; *************** function _fanInit *****************
  2541 ;; Defined at:
  2542 ;;		line 496 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0
  2551 ;; Tracked objects:
  2552 ;;		On entry : 300/0
  2553 ;;		On exit  : 300/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2556 ;;      Params:         0       0       0       0
  2557 ;;      Locals:         0       0       0       0
  2558 ;;      Temps:          0       0       0       0
  2559 ;;      Totals:         0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_fanCtr
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           
  2571                           ;psect for function _fanInit
  2572  03A5                     _fanInit:	
  2573  03A5                     l4065:	
  2574                           ;incstack = 0
  2575                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2576                           
  2577                           
  2578                           ;main.c: 499: PWMTH = 0x00;
  2579  03A5  0198               	clrf	24	;volatile
  2580                           
  2581                           ;main.c: 500: PWMT4L = 73;
  2582  03A6  3049               	movlw	73
  2583  03A7  009C               	movwf	28	;volatile
  2584                           
  2585                           ;main.c: 501: PWMD4L = fanDuty;
  2586  03A8  0846               	movf	_fanDuty,w
  2587  03A9  009B               	movwf	27	;volatile
  2588                           
  2589                           ;main.c: 502: PWMCON1 = 0xC0;
  2590  03AA  30C0               	movlw	192
  2591  03AB  0096               	movwf	22	;volatile
  2592                           
  2593                           ;main.c: 503: PWMCON2 = 0x00;
  2594  03AC  019D               	clrf	29	;volatile
  2595                           
  2596                           ;main.c: 504: PWMCON0 |= 0x30;
  2597  03AD  3030               	movlw	48
  2598  03AE  0495               	iorwf	21,f	;volatile
  2599  03AF  0008               	return
  2600  03B0                     __end_of_fanInit:	
  2601  03B0                     __ptext8:	
  2602 ;; *************** function _fanStop *****************
  2603 ;; Defined at:
  2604 ;;		line 507 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		status,2
  2613 ;; Tracked objects:
  2614 ;;		On entry : 300/100
  2615 ;;		On exit  : 300/100
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2618 ;;      Params:         0       0       0       0
  2619 ;;      Locals:         0       0       0       0
  2620 ;;      Temps:          0       0       0       0
  2621 ;;      Totals:         0       0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_fanCtr
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _fanStop
  2634  03B0                     _fanStop:	
  2635                           
  2636                           ;main.c: 509: PWMD4L = 0;
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _fanStop: [status,2]
  2640  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2641  03B1  019B               	clrf	27	;volatile
  2642                           
  2643                           ;main.c: 510: PWMCON0 &= 0xEF;
  2644  03B2  1215               	bcf	21,4	;volatile
  2645                           
  2646                           ;main.c: 511: PORTA &= 0xEF;
  2647  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  2648  03B4  1206               	bcf	6,4	;volatile
  2649  03B5  0008               	return
  2650  03B6                     __end_of_fanStop:	
  2651  03B6                     __ptext2:	
  2652 ;; *************** function _wuhuaCtr *****************
  2653 ;; Defined at:
  2654 ;;		line 569 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 200/100
  2665 ;;		On exit  : 200/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       0       0       0
  2670 ;;      Temps:          0       0       0       0
  2671 ;;      Totals:         0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    2
  2675 ;; This function calls:
  2676 ;;		_pwmInit
  2677 ;;		_pwmStop
  2678 ;; This function is called by:
  2679 ;;		_workCtr
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _wuhuaCtr
  2685  03B6                     _wuhuaCtr:	
  2686                           
  2687                           ;main.c: 571: if(count1s == 0)
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2691  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2692  03B7  0848               	movf	_count1s,w
  2693  03B8  1D03               	btfss	3,2
  2694  03B9  2BD1               	goto	l4337
  2695                           
  2696                           ;main.c: 572: {
  2697                           ;main.c: 573: if(++count10s >= 20)
  2698  03BA  3014               	movlw	20
  2699  03BB  0AC5               	incf	_count10s,f
  2700  03BC  0245               	subwf	_count10s,w
  2701  03BD  1803               	btfsc	3,0
  2702                           
  2703                           ;main.c: 574: {
  2704                           ;main.c: 575: count10s = 0;
  2705  03BE  01C5               	clrf	_count10s
  2706                           
  2707                           ;main.c: 576: }
  2708                           ;main.c: 577: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2709  03BF  087B               	movf	_workStep,w
  2710  03C0  1D03               	btfss	3,2
  2711  03C1  2BD0               	goto	l4335
  2712  03C2  0847               	movf	_wuhuaFlag,w
  2713  03C3  1D03               	btfss	3,2
  2714  03C4  2BD0               	goto	l4335
  2715  03C5  083C               	movf	_powerFlag,w
  2716  03C6  1903               	btfsc	3,2
  2717  03C7  2BD0               	goto	l4335
  2718                           
  2719                           ;main.c: 578: {
  2720                           ;main.c: 579: if(++closeTime > 200)
  2721  03C8  30C9               	movlw	201
  2722  03C9  0ABA               	incf	_closeTime,f
  2723  03CA  023A               	subwf	_closeTime,w
  2724  03CB  1C03               	skipc
  2725  03CC  2BD1               	goto	l4337
  2726                           
  2727                           ;main.c: 580: {
  2728                           ;main.c: 581: closeTime = 0;
  2729  03CD  01BA               	clrf	_closeTime
  2730                           
  2731                           ;main.c: 582: powerFlag = 0;
  2732  03CE  01BC               	clrf	_powerFlag
  2733  03CF  2BD1               	goto	l4337
  2734  03D0                     l4335:	
  2735                           
  2736                           ;main.c: 585: else
  2737                           ;main.c: 586: {
  2738                           ;main.c: 587: closeTime = 0;
  2739  03D0  01BA               	clrf	_closeTime
  2740  03D1                     l4337:	
  2741                           
  2742                           ;main.c: 588: }
  2743                           ;main.c: 589: }
  2744                           ;main.c: 590: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2745  03D1  0347               	decf	_wuhuaFlag,w
  2746  03D2  1903               	btfsc	3,2
  2747  03D3  2BDC               	goto	l4343
  2748  03D4  3002               	movlw	2
  2749  03D5  0647               	xorwf	_wuhuaFlag,w
  2750  03D6  1D03               	btfss	3,2
  2751  03D7  2BDD               	goto	l4345
  2752  03D8  300A               	movlw	10
  2753  03D9  0245               	subwf	_count10s,w
  2754  03DA  1803               	skipnc
  2755  03DB  2BDD               	goto	l4345
  2756  03DC                     l4343:	
  2757                           
  2758                           ;main.c: 591: {
  2759                           ;main.c: 592: pwmInit();
  2760  03DC  2C0C               	ljmp	l4049
  2761  03DD                     l4345:	
  2762                           ;main.c: 621: }
  2763                           
  2764                           
  2765                           ;main.c: 622: else
  2766                           ;main.c: 623: {
  2767                           ;main.c: 624: pwmStop();
  2768  03DD  158A  2E83         	ljmp	l4059
  2769  03DF                     __end_of_wuhuaCtr:	
  2770  03DF                     PL6:	
  2771  03DF  00F4               	movwf	??_ADC_Sample+1
  2772  03E0  01F5               	clrf	??_ADC_Sample+2
  2773  03E1  01F6               	clrf	??_ADC_Sample+3
  2774  03E2  0873               	movf	??_ADC_Sample,w
  2775  03E3  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2776  03E4  0874               	movf	??_ADC_Sample+1,w
  2777  03E5  1C03               	skipc
  2778  03E6  0F74               	incfsz	??_ADC_Sample+1,w
  2779  03E7  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2780  03E8  0875               	movf	??_ADC_Sample+2,w
  2781  03E9  1C03               	skipc
  2782  03EA  0F75               	incfsz	??_ADC_Sample+2,w
  2783  03EB  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2784  03EC  0876               	movf	??_ADC_Sample+3,w
  2785  03ED  0008               	return
  2786  03EE                     __end_ofPL6:	
  2787  03EE                     PL16:	
  2788  03EE  01CF               	clrf	ADC_Sample@adsum	;volatile
  2789  03EF  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2790  03F0  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2791  03F1  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2792  03F2  01D3               	clrf	ADC_Sample@admin	;volatile
  2793  03F3  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2794  03F4  01D5               	clrf	ADC_Sample@admax	;volatile
  2795  03F5  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2796  03F6  0008               	return
  2797  03F7                     __end_ofPL16:	
  2798  03F7                     PL22:	
  2799  03F7  0861               	movf	___fttol@f1,w
  2800  03F8  00E5               	movwf	??___fttol
  2801  03F9  0862               	movf	___fttol@f1+1,w
  2802  03FA  00E6               	movwf	??___fttol+1
  2803  03FB  0863               	movf	___fttol@f1+2,w
  2804  03FC  00E7               	movwf	??___fttol+2
  2805  03FD  0008               	return
  2806  03FE                     __end_ofPL22:	
  2807  03FE                     PL38:	
  2808  03FE  1003               	clrc
  2809  03FF  0CF4               	rrf	___ftpack@arg+2,f
  2810  0400  0CF3               	rrf	___ftpack@arg+1,f
  2811  0401  0CF2               	rrf	___ftpack@arg,f
  2812  0402  0008               	return
  2813  0403                     __end_ofPL38:	
  2814  0403                     PL42:	
  2815  0403  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2816  0404  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2817  0405  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2818  0406  00D5               	movwf	ADC_Sample@admax	;volatile
  2819  0407  0008               	return
  2820  0408                     __end_ofPL42:	
  2821  0408                     PL44:	
  2822  0408  01D2               	clrf	?___ftdiv
  2823  0409  01D3               	clrf	?___ftdiv+1
  2824  040A  01D4               	clrf	?___ftdiv+2
  2825  040B  0008               	return
  2826  040C                     __end_ofPL44:	
  2827  040C                     __ptext4:	
  2828 ;; *************** function _pwmInit *****************
  2829 ;; Defined at:
  2830 ;;		line 477 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;		None
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      void 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 300/0
  2841 ;;		On exit  : 300/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2844 ;;      Params:         0       0       0       0
  2845 ;;      Locals:         0       0       0       0
  2846 ;;      Temps:          0       0       0       0
  2847 ;;      Totals:         0       0       0       0
  2848 ;;Total ram usage:        0 bytes
  2849 ;; Hardware stack levels used:    1
  2850 ;; Hardware stack levels required when called:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_wuhuaCtr
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function _pwmInit
  2860  040C                     _pwmInit:	
  2861  040C                     l4049:	
  2862                           ;incstack = 0
  2863                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2864                           
  2865                           
  2866                           ;main.c: 480: PWMTH = 0x00;
  2867  040C  0198               	clrf	24	;volatile
  2868                           
  2869                           ;main.c: 481: PWMTL = 73;
  2870  040D  3049               	movlw	73
  2871  040E  0097               	movwf	23	;volatile
  2872                           
  2873                           ;main.c: 482: PWMD23H = 0x00;
  2874  040F  1683               	bsf	3,5	;RP0=1, select bank1
  2875  0410  019E               	clrf	30	;volatile
  2876                           
  2877                           ;main.c: 483: PWMD3L = 32;
  2878  0411  3020               	movlw	32
  2879  0412  009C               	movwf	28	;volatile
  2880                           
  2881                           ;main.c: 484: PWMCON1 = 0xC0;
  2882  0413  30C0               	movlw	192
  2883  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2884  0415  0096               	movwf	22	;volatile
  2885                           
  2886                           ;main.c: 485: PWMCON2 = 0x00;
  2887  0416  019D               	clrf	29	;volatile
  2888                           
  2889                           ;main.c: 486: PWMCON0 |= 0x28;
  2890  0417  3028               	movlw	40
  2891  0418  0495               	iorwf	21,f	;volatile
  2892  0419  0008               	return
  2893  041A                     __end_of_pwmInit:	
  2894                           
  2895                           	psect	text3
  2896  0E83                     __ptext3:	
  2897 ;; *************** function _pwmStop *****************
  2898 ;; Defined at:
  2899 ;;		line 489 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;		None
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;		None
  2904 ;; Return value:  Size  Location     Type
  2905 ;;                  1    wreg      void 
  2906 ;; Registers used:
  2907 ;;		status,2
  2908 ;; Tracked objects:
  2909 ;;		On entry : 300/0
  2910 ;;		On exit  : 300/100
  2911 ;;		Unchanged: 0/0
  2912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2913 ;;      Params:         0       0       0       0
  2914 ;;      Locals:         0       0       0       0
  2915 ;;      Temps:          0       0       0       0
  2916 ;;      Totals:         0       0       0       0
  2917 ;;Total ram usage:        0 bytes
  2918 ;; Hardware stack levels used:    1
  2919 ;; Hardware stack levels required when called:    1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_wuhuaCtr
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _pwmStop
  2929  0E83                     _pwmStop:	
  2930  0E83                     l4059:	
  2931                           ;incstack = 0
  2932                           ; Regs used in _pwmStop: [status,2]
  2933                           
  2934                           
  2935                           ;main.c: 491: PWMD3L = 0;
  2936  0E83  1683               	bsf	3,5	;RP0=1, select bank1
  2937  0E84  019C               	clrf	28	;volatile
  2938                           
  2939                           ;main.c: 492: PWMCON0 &= 0xF7;
  2940  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0E86  1195               	bcf	21,3	;volatile
  2942                           
  2943                           ;main.c: 493: PORTA &= 0xF7;
  2944  0E87  1683               	bsf	3,5	;RP0=1, select bank1
  2945  0E88  1186               	bcf	6,3	;volatile
  2946  0E89  0008               	return
  2947  0E8A                     __end_of_pwmStop:	
  2948                           
  2949                           	psect	text12
  2950  0F76                     __ptext12:	
  2951 ;; *************** function _bujinCtr *****************
  2952 ;; Defined at:
  2953 ;;		line 628 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  tempStep        1    4[COMMON] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      void 
  2960 ;; Registers used:
  2961 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 200/100
  2964 ;;		On exit  : 300/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2967 ;;      Params:         0       0       0       0
  2968 ;;      Locals:         1       0       0       0
  2969 ;;      Temps:          2       0       0       0
  2970 ;;      Totals:         3       0       0       0
  2971 ;;Total ram usage:        3 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    1
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_workCtr
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           
  2982                           ;psect for function _bujinCtr
  2983  0F76                     _bujinCtr:	
  2984  0F76                     l4347:	
  2985                           ;incstack = 0
  2986                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  2987                           
  2988                           
  2989                           ;main.c: 630: if(bujinFlag || motorStep > 0)
  2990  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0F77  083D               	movf	_bujinFlag,w
  2992  0F78  1D03               	btfss	3,2
  2993  0F79  2F7E               	goto	l4351
  2994  0F7A  0828               	movf	_motorStep,w
  2995  0F7B  0429               	iorwf	_motorStep+1,w
  2996  0F7C  1903               	btfsc	3,2
  2997  0F7D  2FEA               	goto	l4383
  2998  0F7E                     l4351:	
  2999                           
  3000                           ;main.c: 631: {
  3001                           ;main.c: 632: if(bujinFlag == 1)
  3002  0F7E  0B3D               	decfsz	_bujinFlag,w
  3003  0F7F  2F82               	goto	l4355
  3004                           
  3005                           ;main.c: 633: {
  3006                           ;main.c: 634: maxMotorStep = 512;
  3007  0F80  3002               	movlw	2
  3008  0F81  2F87               	goto	L6
  3009  0F82                     l4355:	
  3010                           ;main.c: 635: }
  3011                           
  3012                           
  3013                           ;main.c: 636: else if(bujinFlag == 2)
  3014  0F82  3002               	movlw	2
  3015  0F83  063D               	xorwf	_bujinFlag,w
  3016  0F84  1D03               	btfss	3,2
  3017  0F85  2F89               	goto	l4359
  3018                           
  3019                           ;main.c: 637: {
  3020                           ;main.c: 638: maxMotorStep = 1024;
  3021  0F86  3004               	movlw	4
  3022  0F87                     L6:	
  3023  0F87  01A6               	clrf	_maxMotorStep
  3024  0F88  2F90               	goto	L5
  3025  0F89                     l4359:	
  3026                           ;main.c: 639: }
  3027                           
  3028                           
  3029                           ;main.c: 640: else if(bujinFlag == 3)
  3030  0F89  3003               	movlw	3
  3031  0F8A  063D               	xorwf	_bujinFlag,w
  3032  0F8B  1D03               	btfss	3,2
  3033  0F8C  2F91               	goto	l4363
  3034                           
  3035                           ;main.c: 641: {
  3036                           ;main.c: 642: maxMotorStep = 1360;
  3037  0F8D  3050               	movlw	80
  3038  0F8E  00A6               	movwf	_maxMotorStep
  3039  0F8F  3005               	movlw	5
  3040  0F90                     L5:	
  3041  0F90  00A7               	movwf	_maxMotorStep+1
  3042  0F91                     l4363:	
  3043                           
  3044                           ;main.c: 643: }
  3045                           ;main.c: 644: if(++motorStep >= (maxMotorStep*2))
  3046  0F91  0827               	movf	_maxMotorStep+1,w
  3047  0F92  00F3               	movwf	??_bujinCtr+1
  3048  0F93  0826               	movf	_maxMotorStep,w
  3049  0F94  00F2               	movwf	??_bujinCtr
  3050  0F95  1003               	clrc
  3051  0F96  0DF2               	rlf	??_bujinCtr,f
  3052  0F97  0DF3               	rlf	??_bujinCtr+1,f
  3053  0F98  0AA8               	incf	_motorStep,f
  3054  0F99  1903               	skipnz
  3055  0F9A  0AA9               	incf	_motorStep+1,f
  3056  0F9B  0873               	movf	??_bujinCtr+1,w
  3057  0F9C  0229               	subwf	_motorStep+1,w
  3058  0F9D  1D03               	skipz
  3059  0F9E  2FA1               	goto	u4375
  3060  0F9F  0872               	movf	??_bujinCtr,w
  3061  0FA0  0228               	subwf	_motorStep,w
  3062  0FA1                     u4375:	
  3063  0FA1  1C03               	skipc
  3064  0FA2  2FA5               	goto	l4367
  3065                           
  3066                           ;main.c: 645: {
  3067                           ;main.c: 646: motorStep = 0;
  3068  0FA3  01A8               	clrf	_motorStep
  3069  0FA4  01A9               	clrf	_motorStep+1
  3070  0FA5                     l4367:	
  3071                           
  3072                           ;main.c: 647: }
  3073                           ;main.c: 648: unsigned char tempStep = motorStep % 8;
  3074  0FA5  0828               	movf	_motorStep,w
  3075  0FA6  00F4               	movwf	bujinCtr@tempStep
  3076  0FA7  3007               	movlw	7
  3077  0FA8  05F4               	andwf	bujinCtr@tempStep,f
  3078                           
  3079                           ;main.c: 649: if(motorStep < maxMotorStep)
  3080  0FA9  0827               	movf	_maxMotorStep+1,w
  3081  0FAA  0229               	subwf	_motorStep+1,w
  3082  0FAB  1D03               	skipz
  3083  0FAC  2FAF               	goto	u4385
  3084  0FAD  0826               	movf	_maxMotorStep,w
  3085  0FAE  0228               	subwf	_motorStep,w
  3086  0FAF                     u4385:	
  3087  0FAF  1C03               	btfss	3,0
  3088  0FB0  2FD2               	goto	l4377
  3089  0FB1  2FDE               	goto	l4381
  3090  0FB2                     l1089:	
  3091                           ;main.c: 653: {
  3092                           ;main.c: 654: case 0:
  3093                           
  3094                           
  3095                           ;main.c: 655: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3096  0FB2  1683               	bsf	3,5	;RP0=1, select bank1
  3097  0FB3  1686               	bsf	6,5	;volatile
  3098  0FB4  1306               	bcf	6,6	;volatile
  3099  0FB5  1386               	bcf	6,7	;volatile
  3100  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0FB7  1386               	bcf	6,7	;volatile
  3102                           
  3103                           ;main.c: 656: break;
  3104  0FB8  0008               	return
  3105  0FB9                     l1091:	
  3106                           ;main.c: 657: case 1:
  3107                           
  3108                           
  3109                           ;main.c: 658: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3110  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0FBA  1686               	bsf	6,5	;volatile
  3112                           
  3113                           ;main.c: 659: break;
  3114  0FBB  2FF5               	ljmp	PL28	;call to abstracted procedure
  3115  0FBC                     l1092:	
  3116                           ;main.c: 660: case 2:
  3117                           
  3118                           
  3119                           ;main.c: 661: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3120  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  3121  0FBD  1286               	bcf	6,5	;volatile
  3122                           
  3123                           ;main.c: 662: break;
  3124  0FBE  2FF5               	ljmp	PL28	;call to abstracted procedure
  3125  0FBF                     l1093:	
  3126                           ;main.c: 663: case 3:
  3127                           
  3128                           
  3129                           ;main.c: 664: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3130  0FBF  1683               	bsf	3,5	;RP0=1, select bank1
  3131  0FC0  1286               	bcf	6,5	;volatile
  3132  0FC1  1706               	bsf	6,6	;volatile
  3133  0FC2  1786               	bsf	6,7	;volatile
  3134  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  3135  0FC4  1386               	bcf	6,7	;volatile
  3136                           
  3137                           ;main.c: 665: break;
  3138  0FC5  0008               	return
  3139  0FC6                     l1094:	
  3140                           ;main.c: 666: case 4:
  3141                           
  3142                           
  3143                           ;main.c: 667: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3144  0FC6  27FA               	fcall	PL32	;call to abstracted procedure
  3145  0FC7  1386               	bcf	6,7	;volatile
  3146                           
  3147                           ;main.c: 668: break;
  3148  0FC8  0008               	return
  3149  0FC9                     l1095:	
  3150                           ;main.c: 669: case 5:
  3151                           
  3152                           
  3153                           ;main.c: 670: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3154  0FC9  27FA               	fcall	PL32	;call to abstracted procedure
  3155  0FCA  1786               	bsf	6,7	;volatile
  3156                           
  3157                           ;main.c: 671: break;
  3158  0FCB  0008               	return
  3159  0FCC                     l1096:	
  3160                           ;main.c: 672: case 6:
  3161                           
  3162                           
  3163                           ;main.c: 673: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3164  0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  3165  0FCD  1286               	bcf	6,5	;volatile
  3166                           
  3167                           ;main.c: 674: break;
  3168  0FCE  2FF0               	ljmp	PL26	;call to abstracted procedure
  3169  0FCF                     l1097:	
  3170                           ;main.c: 675: case 7:
  3171                           
  3172                           
  3173                           ;main.c: 676: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3174  0FCF  1683               	bsf	3,5	;RP0=1, select bank1
  3175  0FD0  1686               	bsf	6,5	;volatile
  3176                           
  3177                           ;main.c: 677: break;
  3178  0FD1  2FF0               	ljmp	PL26	;call to abstracted procedure
  3179  0FD2                     l4377:	
  3180  0FD2  0874               	movf	bujinCtr@tempStep,w
  3181                           
  3182                           ; Switch size 1, requested type "space"
  3183                           ; Number of cases is 8, Range of values is 0 to 7
  3184                           ; switch strategies available:
  3185                           ; Name         Instructions Cycles
  3186                           ; direct_byte           23     7 (fixed)
  3187                           ; simple_byte           25    13 (average)
  3188                           ; jumptable            260     6 (fixed)
  3189                           ;	Chosen strategy is direct_byte
  3190  0FD3  0084               	movwf	4
  3191  0FD4  3008               	movlw	8
  3192  0FD5  0204               	subwf	4,w
  3193  0FD6  1803               	skipnc
  3194  0FD7  0008               	return
  3195  0FD8  3008               	movlw	high S4749
  3196  0FD9  008A               	movwf	10
  3197  0FDA  1003               	clrc
  3198  0FDB  0D04               	rlf	4,w
  3199  0FDC  3E17               	addlw	low S4749
  3200  0FDD  0082               	movwf	2
  3201  0FDE                     l4381:	
  3202  0FDE  0874               	movf	bujinCtr@tempStep,w
  3203                           
  3204                           ; Switch size 1, requested type "space"
  3205                           ; Number of cases is 8, Range of values is 0 to 7
  3206                           ; switch strategies available:
  3207                           ; Name         Instructions Cycles
  3208                           ; direct_byte           23     7 (fixed)
  3209                           ; simple_byte           25    13 (average)
  3210                           ; jumptable            260     6 (fixed)
  3211                           ;	Chosen strategy is direct_byte
  3212  0FDF  0084               	movwf	4
  3213  0FE0  3008               	movlw	8
  3214  0FE1  0204               	subwf	4,w
  3215  0FE2  1803               	skipnc
  3216  0FE3  0008               	return
  3217  0FE4  3008               	movlw	high S4751
  3218  0FE5  008A               	movwf	10
  3219  0FE6  1003               	clrc
  3220  0FE7  0D04               	rlf	4,w
  3221  0FE8  3E27               	addlw	low S4751
  3222  0FE9  0082               	movwf	2
  3223  0FEA                     l4383:	
  3224                           
  3225                           ;main.c: 712: else
  3226                           ;main.c: 713: {
  3227                           ;main.c: 714: PORTA &= 0x1F;
  3228  0FEA  301F               	movlw	31
  3229  0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  3230  0FEC  0586               	andwf	6,f	;volatile
  3231                           
  3232                           ;main.c: 715: PORTB &= 0x7F;
  3233  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0FEE  1386               	bcf	6,7	;volatile
  3235  0FEF  0008               	return
  3236  0FF0                     __end_of_bujinCtr:	
  3237  0FF0                     PL26:	
  3238  0FF0  1306               	bcf	6,6	;volatile
  3239  0FF1  1386               	bcf	6,7	;volatile
  3240  0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  3241  0FF3  1786               	bsf	6,7	;volatile
  3242  0FF4  0008               	return
  3243  0FF5                     __end_ofPL26:	
  3244  0FF5                     PL28:	
  3245  0FF5  1706               	bsf	6,6	;volatile
  3246  0FF6  1386               	bcf	6,7	;volatile
  3247  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0FF8  1386               	bcf	6,7	;volatile
  3249  0FF9  0008               	return
  3250  0FFA                     __end_ofPL28:	
  3251  0FFA                     PL32:	
  3252  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  3253  0FFB  1286               	bcf	6,5	;volatile
  3254  0FFC  1306               	bcf	6,6	;volatile
  3255  0FFD  1786               	bsf	6,7	;volatile
  3256  0FFE  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0FFF  0008               	return
  3258  1000                     __end_ofPL32:	
  3259                           
  3260                           	psect	swtext1
  3261  0817                     __pswtext1:	
  3262  0817                     S4749:	
  3263  0817  158A  2FB2         	ljmp	l1089
  3264  0819  158A  2FB9         	ljmp	l1091
  3265  081B  158A  2FBC         	ljmp	l1092
  3266  081D  158A  2FBF         	ljmp	l1093
  3267  081F  158A  2FC6         	ljmp	l1094
  3268  0821  158A  2FC9         	ljmp	l1095
  3269  0823  158A  2FCC         	ljmp	l1096
  3270  0825  158A  2FCF         	ljmp	l1097
  3271                           
  3272                           	psect	swtext2
  3273  0827                     __pswtext2:	
  3274  0827                     S4751:	
  3275  0827  158A  2FCF         	ljmp	l1097
  3276  0829  158A  2FCC         	ljmp	l1096
  3277  082B  158A  2FC9         	ljmp	l1095
  3278  082D  158A  2FC6         	ljmp	l1094
  3279  082F  158A  2FBF         	ljmp	l1093
  3280  0831  158A  2FBC         	ljmp	l1092
  3281  0833  158A  2FB9         	ljmp	l1091
  3282  0835  158A  2FB2         	ljmp	l1089
  3283                           
  3284                           	psect	text17
  3285  0EA5                     __ptext17:	
  3286 ;; *************** function _chrgCtr *****************
  3287 ;; Defined at:
  3288 ;;		line 370 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/100
  3299 ;;		On exit  : 300/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3302 ;;      Params:         0       0       0       0
  3303 ;;      Locals:         0       0       0       0
  3304 ;;      Temps:          0       0       0       0
  3305 ;;      Totals:         0       0       0       0
  3306 ;;Total ram usage:        0 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    1
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _chrgCtr
  3318  0EA5                     _chrgCtr:	
  3319                           
  3320                           ;main.c: 372: if(PORTB & 0x20)
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3324  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0EA7  1E86               	btfss	6,5	;volatile
  3327  0EA8  2EBF               	goto	l3801
  3328  0EA9  3010               	movlw	16
  3329                           
  3330                           ;main.c: 373: {
  3331                           ;main.c: 374: chrgFlag = 1;
  3332  0EAA  01C3               	clrf	_chrgFlag
  3333  0EAB  0AC3               	incf	_chrgFlag,f
  3334                           
  3335                           ;main.c: 375: firstLock = 0;
  3336  0EAC  01EE               	clrf	_firstLock
  3337                           
  3338                           ;main.c: 376: lowBatLock = 0;
  3339  0EAD  01C0               	clrf	_lowBatLock
  3340                           
  3341                           ;main.c: 377: if(power_ad > 4140)
  3342  0EAE  0223               	subwf	_power_ad+1,w	;volatile
  3343  0EAF  302D               	movlw	45
  3344  0EB0  1903               	skipnz
  3345  0EB1  0222               	subwf	_power_ad,w	;volatile
  3346  0EB2  1C03               	skipc
  3347  0EB3  2EBD               	goto	l3799
  3348                           
  3349                           ;main.c: 378: {
  3350                           ;main.c: 379: if(++chrgFullTime > 200)
  3351  0EB4  30C9               	movlw	201
  3352  0EB5  0AC1               	incf	_chrgFullTime,f
  3353  0EB6  0241               	subwf	_chrgFullTime,w
  3354  0EB7  1C03               	skipc
  3355  0EB8  0008               	return
  3356                           
  3357                           ;main.c: 380: {
  3358                           ;main.c: 381: chrgFullTime = 0;
  3359  0EB9  01C1               	clrf	_chrgFullTime
  3360                           
  3361                           ;main.c: 382: chrgFullFlag = 1;
  3362  0EBA  01C2               	clrf	_chrgFullFlag
  3363  0EBB  0AC2               	incf	_chrgFullFlag,f
  3364  0EBC  0008               	return
  3365  0EBD                     l3799:	
  3366                           
  3367                           ;main.c: 385: else
  3368                           ;main.c: 386: {
  3369                           ;main.c: 387: chrgFullTime = 0;
  3370  0EBD  01C1               	clrf	_chrgFullTime
  3371  0EBE  0008               	return
  3372  0EBF                     l3801:	
  3373                           
  3374                           ;main.c: 391: else
  3375                           ;main.c: 392: {
  3376                           ;main.c: 393: chrgFlag = 0;
  3377  0EBF  01C3               	clrf	_chrgFlag
  3378                           
  3379                           ;main.c: 394: chrgFullTime = 0;
  3380  0EC0  01C1               	clrf	_chrgFullTime
  3381                           
  3382                           ;main.c: 395: chrgFullFlag = 0;
  3383  0EC1  01C2               	clrf	_chrgFullFlag
  3384  0EC2  0008               	return
  3385  0EC3                     __end_of_chrgCtr:	
  3386                           
  3387                           	psect	text21
  3388  0F03                     __ptext21:	
  3389 ;; *************** function _KeyServer *****************
  3390 ;; Defined at:
  3391 ;;		line 111 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 300/0
  3402 ;;		On exit  : 300/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3405 ;;      Params:         0       0       0       0
  3406 ;;      Locals:         0       0       0       0
  3407 ;;      Temps:          0       0       0       0
  3408 ;;      Totals:         0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    1
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _KeyServer
  3421  0F03                     _KeyServer:	
  3422                           
  3423                           ;main.c: 113: static unsigned char KeyOldFlag = 0;
  3424                           ;main.c: 114: if (KeyFlag[0])
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3428  0F03  0830               	movf	_KeyFlag,w	;volatile
  3429  0F04  1903               	btfsc	3,2
  3430  0F05  2F6C               	goto	l3741
  3431                           
  3432                           ;main.c: 115: {
  3433                           ;main.c: 116: if (KeyFlag[0] != KeyOldFlag)
  3434  0F06  0830               	movf	_KeyFlag,w	;volatile
  3435  0F07  0638               	xorwf	KeyServer@KeyOldFlag,w
  3436  0F08  1903               	skipnz
  3437  0F09  2F4D               	goto	l3725
  3438                           
  3439                           ;main.c: 117: {
  3440                           ;main.c: 119: KeyOldFlag ^= KeyFlag[0];
  3441  0F0A  0830               	movf	_KeyFlag,w	;volatile
  3442  0F0B  06B8               	xorwf	KeyServer@KeyOldFlag,f
  3443                           
  3444                           ;main.c: 120: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3445  0F0C  1838               	btfsc	KeyServer@KeyOldFlag,0
  3446  0F0D  1C30               	btfss	_KeyFlag,0	;volatile
  3447  0F0E  2F2D               	goto	l3701
  3448  0F0F  086E               	movf	_firstLock,w
  3449  0F10  1D03               	btfss	3,2
  3450  0F11  2F2D               	goto	l3701
  3451  0F12  083C               	movf	_powerFlag,w
  3452  0F13  1903               	btfsc	3,2
  3453  0F14  2F2D               	goto	l3701
  3454                           
  3455                           ;main.c: 121: {
  3456                           ;main.c: 123: if(lowBatLock == 1)
  3457  0F15  0B40               	decfsz	_lowBatLock,w
  3458  0F16  2F1C               	goto	l3689
  3459                           
  3460                           ;main.c: 124: {
  3461                           ;main.c: 125: shanshuoTime2 = 450;
  3462  0F17  30C2               	movlw	194
  3463  0F18  00AC               	movwf	_shanshuoTime2
  3464  0F19  3001               	movlw	1
  3465  0F1A  00AD               	movwf	_shanshuoTime2+1
  3466                           
  3467                           ;main.c: 126: }
  3468  0F1B  2F21               	goto	l3693
  3469  0F1C                     l3689:	
  3470                           
  3471                           ;main.c: 127: else if(++wuhuaFlag > 2)
  3472  0F1C  3003               	movlw	3
  3473  0F1D  0AC7               	incf	_wuhuaFlag,f
  3474  0F1E  0247               	subwf	_wuhuaFlag,w
  3475  0F1F  1803               	btfsc	3,0
  3476                           
  3477                           ;main.c: 128: {
  3478                           ;main.c: 129: wuhuaFlag = 0;
  3479  0F20  01C7               	clrf	_wuhuaFlag
  3480  0F21                     l3693:	
  3481                           
  3482                           ;main.c: 130: }
  3483                           ;main.c: 131: if(wuhuaFlag >= 2)
  3484  0F21  3002               	movlw	2
  3485  0F22  0247               	subwf	_wuhuaFlag,w
  3486  0F23  1C03               	skipc
  3487  0F24  2F2B               	goto	l3699
  3488                           
  3489                           ;main.c: 132: {
  3490                           ;main.c: 133: shanshuoTime2 = 450;
  3491  0F25  30C2               	movlw	194
  3492  0F26  00AC               	movwf	_shanshuoTime2
  3493  0F27  3001               	movlw	1
  3494  0F28  00AD               	movwf	_shanshuoTime2+1
  3495                           
  3496                           ;main.c: 134: count10s = 0;
  3497  0F29  01C5               	clrf	_count10s
  3498                           
  3499                           ;main.c: 135: }
  3500  0F2A  2F2D               	goto	l3701
  3501  0F2B                     l3699:	
  3502                           
  3503                           ;main.c: 136: else
  3504                           ;main.c: 137: {
  3505                           ;main.c: 138: shanshuoTime2 = 0;
  3506  0F2B  01AC               	clrf	_shanshuoTime2
  3507  0F2C  01AD               	clrf	_shanshuoTime2+1
  3508  0F2D                     l3701:	
  3509                           
  3510                           ;main.c: 139: }
  3511                           ;main.c: 140: }
  3512                           ;main.c: 141: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3513  0F2D  18B8               	btfsc	KeyServer@KeyOldFlag,1
  3514  0F2E  1CB0               	btfss	_KeyFlag,1	;volatile
  3515  0F2F  2F4B               	goto	l3723
  3516  0F30  086E               	movf	_firstLock,w
  3517  0F31  1D03               	btfss	3,2
  3518  0F32  2F4B               	goto	l3723
  3519  0F33  083C               	movf	_powerFlag,w
  3520  0F34  1903               	btfsc	3,2
  3521  0F35  2F4B               	goto	l3723
  3522                           
  3523                           ;main.c: 142: {
  3524                           ;main.c: 144: if(lowBatLock == 1)
  3525  0F36  0B40               	decfsz	_lowBatLock,w
  3526  0F37  2F3B               	goto	l3713
  3527                           
  3528                           ;main.c: 145: {
  3529                           ;main.c: 146: shanshuoTime = 450;
  3530  0F38  2771  158A         	fcall	PL40	;call to abstracted procedure
  3531                           
  3532                           ;main.c: 147: }
  3533  0F3A  2F42               	goto	l3717
  3534  0F3B                     l3713:	
  3535                           
  3536                           ;main.c: 148: else if(++workStep > 3)
  3537  0F3B  3004               	movlw	4
  3538  0F3C  0AFB               	incf	_workStep,f
  3539  0F3D  027B               	subwf	_workStep,w
  3540  0F3E  1C03               	skipc
  3541  0F3F  2F42               	goto	l3717
  3542                           
  3543                           ;main.c: 149: {
  3544                           ;main.c: 150: workStep = 0;
  3545  0F40  01FB               	clrf	_workStep
  3546                           
  3547                           ;main.c: 151: bujinFlag = 0;
  3548  0F41  01BD               	clrf	_bujinFlag
  3549  0F42                     l3717:	
  3550                           
  3551                           ;main.c: 152: }
  3552                           ;main.c: 153: if(workStep >= 2)
  3553  0F42  3002               	movlw	2
  3554  0F43  027B               	subwf	_workStep,w
  3555  0F44  1C03               	skipc
  3556  0F45  2F49               	goto	l3721
  3557                           
  3558                           ;main.c: 154: {
  3559                           ;main.c: 155: shanshuoTime = 450;
  3560  0F46  2771  158A         	fcall	PL40	;call to abstracted procedure
  3561                           
  3562                           ;main.c: 156: }
  3563  0F48  2F4B               	goto	l3723
  3564  0F49                     l3721:	
  3565                           
  3566                           ;main.c: 157: else
  3567                           ;main.c: 158: {
  3568                           ;main.c: 159: shanshuoTime = 0;
  3569  0F49  01AE               	clrf	_shanshuoTime
  3570  0F4A  01AF               	clrf	_shanshuoTime+1
  3571  0F4B                     l3723:	
  3572                           
  3573                           ;main.c: 160: }
  3574                           ;main.c: 162: }
  3575                           ;main.c: 164: KeyOldFlag = KeyFlag[0];
  3576  0F4B  0830               	movf	_KeyFlag,w	;volatile
  3577  0F4C  00B8               	movwf	KeyServer@KeyOldFlag
  3578  0F4D                     l3725:	
  3579                           
  3580                           ;main.c: 165: }
  3581                           ;main.c: 166: if(firstLock == 0 && KeyOldFlag & 0x4)
  3582  0F4D  086E               	movf	_firstLock,w
  3583  0F4E  1903               	btfsc	3,2
  3584  0F4F  1D38               	btfss	KeyServer@KeyOldFlag,2
  3585  0F50  0008               	return
  3586                           
  3587                           ;main.c: 167: {
  3588                           ;main.c: 168: if(++keyCount >= 400)
  3589  0F51  0AA4               	incf	_keyCount,f
  3590  0F52  1903               	skipnz
  3591  0F53  0AA5               	incf	_keyCount+1,f
  3592  0F54  3001               	movlw	1
  3593  0F55  0225               	subwf	_keyCount+1,w
  3594  0F56  3090               	movlw	144
  3595  0F57  1903               	skipnz
  3596  0F58  0224               	subwf	_keyCount,w
  3597  0F59  1C03               	skipc
  3598  0F5A  0008               	return
  3599                           
  3600                           ;main.c: 169: {
  3601                           ;main.c: 170: keyCount = 0;
  3602  0F5B  01A4               	clrf	_keyCount
  3603  0F5C  01A5               	clrf	_keyCount+1
  3604                           
  3605                           ;main.c: 171: if(longKeyFlag == 0)
  3606  0F5D  083B               	movf	_longKeyFlag,w
  3607  0F5E  1D03               	btfss	3,2
  3608  0F5F  0008               	return
  3609                           
  3610                           ;main.c: 172: {
  3611                           ;main.c: 173: longKeyFlag = 1;
  3612  0F60  01BB               	clrf	_longKeyFlag
  3613  0F61  0ABB               	incf	_longKeyFlag,f
  3614                           
  3615                           ;main.c: 174: if(powerFlag > 0)
  3616  0F62  083C               	movf	_powerFlag,w
  3617  0F63  1903               	btfsc	3,2
  3618  0F64  2F69               	goto	l961
  3619                           
  3620                           ;main.c: 175: {
  3621                           ;main.c: 176: powerFlag = 0;
  3622  0F65  01BC               	clrf	_powerFlag
  3623                           
  3624                           ;main.c: 177: workStep = 0;
  3625  0F66  01FB               	clrf	_workStep
  3626                           
  3627                           ;main.c: 178: wuhuaFlag = 0;
  3628  0F67  01C7               	clrf	_wuhuaFlag
  3629                           
  3630                           ;main.c: 179: }
  3631  0F68  0008               	return
  3632  0F69                     l961:	
  3633                           
  3634                           ;main.c: 180: else
  3635                           ;main.c: 181: {
  3636                           ;main.c: 182: powerFlag = 1;
  3637  0F69  01BC               	clrf	_powerFlag
  3638  0F6A  0ABC               	incf	_powerFlag,f
  3639  0F6B  0008               	return
  3640  0F6C                     l3741:	
  3641                           
  3642                           ;main.c: 188: else
  3643                           ;main.c: 189: {
  3644                           ;main.c: 190: KeyOldFlag = 0;
  3645  0F6C  01B8               	clrf	KeyServer@KeyOldFlag
  3646                           
  3647                           ;main.c: 191: longKeyFlag = 0;
  3648  0F6D  01BB               	clrf	_longKeyFlag
  3649                           
  3650                           ;main.c: 192: keyCount = 0;
  3651  0F6E  01A4               	clrf	_keyCount
  3652  0F6F  01A5               	clrf	_keyCount+1
  3653  0F70  0008               	return
  3654  0F71                     __end_of_KeyServer:	
  3655  0F71                     PL40:	
  3656  0F71  30C2               	movlw	194
  3657  0F72  00AE               	movwf	_shanshuoTime
  3658  0F73  3001               	movlw	1
  3659  0F74  00AF               	movwf	_shanshuoTime+1
  3660  0F75  0008               	return
  3661  0F76                     __end_ofPL40:	
  3662                           
  3663                           	psect	text22
  3664  041A                     __ptext22:	
  3665 ;; *************** function _Init_System *****************
  3666 ;; Defined at:
  3667 ;;		line 60 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2
  3676 ;; Tracked objects:
  3677 ;;		On entry : B00/0
  3678 ;;		On exit  : 300/100
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3681 ;;      Params:         0       0       0       0
  3682 ;;      Locals:         0       0       0       0
  3683 ;;      Temps:          0       0       0       0
  3684 ;;      Totals:         0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_main
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           
  3696                           ;psect for function _Init_System
  3697  041A                     _Init_System:	
  3698                           
  3699                           ;incstack = 0
  3700                           ; Regs used in _Init_System: [wreg+status,2]
  3701  041A  0000               	nop	;# 
  3702  041B  0064               	clrwdt	;# 
  3703                           
  3704                           ;main.c: 64: INTCON = 0;
  3705  041C  018B               	clrf	11	;volatile
  3706                           
  3707                           ;main.c: 65: OSCCON = 0X72;
  3708  041D  3072               	movlw	114
  3709  041E  1283               	bcf	3,5	;RP0=0, select bank0
  3710  041F  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0420  0094               	movwf	20	;volatile
  3712                           
  3713                           ;main.c: 66: OPTION_REG = 0;
  3714  0421  0181               	clrf	1	;volatile
  3715                           
  3716                           ;main.c: 71: TRISA = 0x04;
  3717  0422  3004               	movlw	4
  3718  0423  1683               	bsf	3,5	;RP0=1, select bank1
  3719  0424  0085               	movwf	5	;volatile
  3720                           
  3721                           ;main.c: 72: PORTA = 0;
  3722  0425  0186               	clrf	6	;volatile
  3723                           
  3724                           ;main.c: 73: TRISB = 0x20;
  3725  0426  3020               	movlw	32
  3726  0427  1283               	bcf	3,5	;RP0=0, select bank0
  3727  0428  0085               	movwf	5	;volatile
  3728                           
  3729                           ;main.c: 74: PORTB = 0;
  3730  0429  0186               	clrf	6	;volatile
  3731                           
  3732                           ;main.c: 75: WPUB = 0x00;
  3733  042A  0188               	clrf	8	;volatile
  3734                           
  3735                           ;main.c: 76: TRISC = 0;
  3736  042B  1703               	bsf	3,6	;RP1=1, select bank2
  3737  042C  0185               	clrf	5	;volatile
  3738                           
  3739                           ;main.c: 77: PORTC = 0;
  3740  042D  0186               	clrf	6	;volatile
  3741                           
  3742                           ;main.c: 79: PIE1 = 2;
  3743  042E  3002               	movlw	2
  3744  042F  1303               	bcf	3,6	;RP1=0, select bank0
  3745  0430  008E               	movwf	14	;volatile
  3746                           
  3747                           ;main.c: 80: PR2 = 250;
  3748  0431  30FA               	movlw	250
  3749  0432  0091               	movwf	17	;volatile
  3750                           
  3751                           ;main.c: 81: T2CON = 4;
  3752  0433  3004               	movlw	4
  3753  0434  0093               	movwf	19	;volatile
  3754                           
  3755                           ;main.c: 83: INTCON = 0XC0;
  3756  0435  30C0               	movlw	192
  3757  0436  008B               	movwf	11	;volatile
  3758                           
  3759                           ;main.c: 84: ADCON0 = 0X41;
  3760                           
  3761                           ;main.c: 85: ADON = 1;
  3762                           
  3763                           ;main.c: 86: ADCON1 = 0x00;
  3764  0437  2FDE               	ljmp	PL24	;call to abstracted procedure
  3765  0438                     __end_of_Init_System:	
  3766  0438                     __ptext18:	
  3767 ;; *************** function _WorkSleep *****************
  3768 ;; Defined at:
  3769 ;;		line 222 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 300/0
  3780 ;;		On exit  : 200/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3783 ;;      Params:         0       0       0       0
  3784 ;;      Locals:         0       0       0       0
  3785 ;;      Temps:          0       0       0       0
  3786 ;;      Totals:         0       0       0       0
  3787 ;;Total ram usage:        0 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    4
  3790 ;; This function calls:
  3791 ;;		_Refurbish_Sfr
  3792 ;;		_SystemEnterSleep
  3793 ;; This function is called by:
  3794 ;;		_main
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           
  3799                           ;psect for function _WorkSleep
  3800  0438                     _WorkSleep:	
  3801                           
  3802                           ;main.c: 225: static unsigned char time;
  3803                           ;main.c: 227: if(B_OnOff)time = 0;
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3807  0438  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3808  0439  01B7               	clrf	WorkSleep@time
  3809                           
  3810                           ;main.c: 229: if(++time >= 125)
  3811  043A  307D               	movlw	125
  3812  043B  0AB7               	incf	WorkSleep@time,f
  3813  043C  0237               	subwf	WorkSleep@time,w
  3814  043D  1C03               	skipc
  3815  043E  0008               	return
  3816                           
  3817                           ;main.c: 230: {
  3818                           ;main.c: 231: time = 0;
  3819  043F  01B7               	clrf	WorkSleep@time
  3820                           
  3821                           ;main.c: 232: INTCON = 0;
  3822  0440  018B               	clrf	11	;volatile
  3823                           
  3824                           ;main.c: 233: PIE1 = 0;
  3825  0441  018E               	clrf	14	;volatile
  3826                           
  3827                           ;main.c: 234: PIE2 = 0;
  3828  0442  1703               	bsf	3,6	;RP1=1, select bank2
  3829  0443  0190               	clrf	16	;volatile
  3830                           
  3831                           ;main.c: 235: PIR1 = 0;
  3832  0444  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0445  018D               	clrf	13	;volatile
  3834                           
  3835                           ;main.c: 236: PIR2 = 0;
  3836  0446  1703               	bsf	3,6	;RP1=1, select bank2
  3837  0447  018F               	clrf	15	;volatile
  3838                           
  3839                           ;main.c: 237: T2CON = 0;
  3840  0448  1303               	bcf	3,6	;RP1=0, select bank0
  3841  0449  0193               	clrf	19	;volatile
  3842                           
  3843                           ;main.c: 238: ADCON1 = 0;
  3844  044A  1683               	bsf	3,5	;RP0=1, select bank1
  3845  044B  0196               	clrf	22	;volatile
  3846                           
  3847                           ;main.c: 241: ADCON0 = 0;
  3848  044C  0195               	clrf	21	;volatile
  3849                           
  3850                           ;main.c: 244: PORTA = 0x01;
  3851  044D  3001               	movlw	1
  3852  044E  0086               	movwf	6	;volatile
  3853                           
  3854                           ;main.c: 245: PORTB = 0x02;
  3855  044F  3002               	movlw	2
  3856  0450  1283               	bcf	3,5	;RP0=0, select bank0
  3857  0451  0086               	movwf	6	;volatile
  3858                           
  3859                           ;main.c: 246: TRISC = 0;
  3860  0452  1703               	bsf	3,6	;RP1=1, select bank2
  3861  0453  0185               	clrf	5	;volatile
  3862                           
  3863                           ;main.c: 247: PORTC = 0x03;
  3864  0454  3003               	movlw	3
  3865  0455  0086               	movwf	6	;volatile
  3866                           
  3867                           ;main.c: 249: TRISB5 =1;
  3868  0456  1303               	bcf	3,6	;RP1=0, select bank0
  3869  0457  1685               	bsf	5,5	;volatile
  3870                           
  3871                           ;main.c: 251: RBIF = 0;
  3872  0458  100B               	bcf	11,0	;volatile
  3873                           
  3874                           ;main.c: 252: RBIE = 1;
  3875  0459  158B               	bsf	11,3	;volatile
  3876                           
  3877                           ;main.c: 253: IOCB5= 1;
  3878  045A  1689               	bsf	9,5	;volatile
  3879                           
  3880                           ;main.c: 254: PORTB;
  3881  045B  0806               	movf	6,w	;volatile
  3882                           
  3883                           ;main.c: 255: PORTB &= 0xFD;
  3884  045C  1086               	bcf	6,1	;volatile
  3885                           
  3886                           ;main.c: 267: SystemEnterSleep();
  3887  045D  2494  118A         	fcall	_SystemEnterSleep
  3888                           
  3889                           ;main.c: 268: if(RAIF)
  3890  045F  1D8D               	btfss	13,3	;volatile
  3891  0460  2C64               	goto	l4583
  3892                           
  3893                           ;main.c: 269: {
  3894                           ;main.c: 270: RAIF = 0;
  3895  0461  118D               	bcf	13,3	;volatile
  3896                           
  3897                           ;main.c: 271: PORTA;
  3898  0462  1683               	bsf	3,5	;RP0=1, select bank1
  3899  0463  0806               	movf	6,w	;volatile
  3900  0464                     l4583:	
  3901                           
  3902                           ;main.c: 272: }
  3903                           ;main.c: 274: Refurbish_Sfr();
  3904  0464  277E  118A         	fcall	_Refurbish_Sfr
  3905                           
  3906                           ;main.c: 275: ADCON0 = 0X41;
  3907                           
  3908                           ;main.c: 276: ADON = 1;
  3909                           
  3910                           ;main.c: 277: ADCON1 = 0x00;
  3911  0466  2FDE               	ljmp	PL24	;call to abstracted procedure
  3912  0467                     __end_of_WorkSleep:	
  3913  0467                     __ptext23:	
  3914 ;; *************** function _CheckTouchKey *****************
  3915 ;; Defined at:
  3916 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;		None
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/100
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3930 ;;      Params:         0       0       0       0
  3931 ;;      Locals:         0       0       0       0
  3932 ;;      Temps:          0       0       0       0
  3933 ;;      Totals:         0       0       0       0
  3934 ;;Total ram usage:        0 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    5
  3937 ;; This function calls:
  3938 ;;		_CheckKeyOldValue
  3939 ;;		_CheckOnceResult
  3940 ;;		_CheckValidTime
  3941 ;;		_ClearResSum
  3942 ;;		_GetTouchKeyValue
  3943 ;;		_KeyStopClear
  3944 ;;		_TurnKeyFlags
  3945 ;; This function is called by:
  3946 ;;		_main
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _CheckTouchKey
  3952  0467                     _CheckTouchKey:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3956  0467  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3957  0468  2C75               	goto	l1330
  3958  0469  2524  118A         	fcall	_GetTouchKeyValue
  3959  046B  3008               	movlw	8
  3960  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3961  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3962  046E  0AB6               	incf	_KeyCounter,f
  3963  046F  0236               	subwf	_KeyCounter,w
  3964  0470  1C03               	skipc
  3965  0471  2C93               	goto	l4667
  3966  0472  01B6               	clrf	_KeyCounter
  3967  0473  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3968  0474  2C93               	goto	l4667
  3969  0475                     l1330:	
  3970  0475  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3971  0476  2C8D               	goto	l4661
  3972  0477  2593  118A         	fcall	_CheckOnceResult
  3973  0479  2725  118A         	fcall	_TurnKeyFlags
  3974  047B  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3975  047C  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3976  047D  2C84               	goto	l4651
  3977  047E  3002               	movlw	2
  3978  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3980  0481  0236               	subwf	_KeyCounter,w
  3981  0482  1C03               	skipc
  3982  0483  2C89               	goto	l4659
  3983  0484                     l4651:	
  3984  0484  270F  118A         	fcall	_KeyStopClear
  3985  0486  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3986  0487  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3987  0488  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3988  0489                     l4659:	
  3989  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3990  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3991  048B  01B6               	clrf	_KeyCounter
  3992  048C  2C93               	goto	l4667
  3993  048D                     l4661:	
  3994  048D  26AB  118A         	fcall	_CheckKeyOldValue
  3995  048F  2584  118A         	fcall	_ClearResSum
  3996  0491  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3997  0492  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3998  0493                     l4667:	
  3999  0493  2F58               	ljmp	l3551	;# 
  4000  0494                     __end_of_CheckTouchKey:	
  4001  0494                     __ptext19:	
  4002 ;; *************** function _SystemEnterSleep *****************
  4003 ;; Defined at:
  4004 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;		None
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  92              2    6[BANK0 ] unsigned int 
  4009 ;;  93              2    4[BANK0 ] unsigned int 
  4010 ;;  94              2    2[BANK0 ] unsigned int 
  4011 ;;  91              1    8[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 300/0
  4018 ;;		On exit  : 300/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4021 ;;      Params:         0       0       0       0
  4022 ;;      Locals:         0       7       0       0
  4023 ;;      Temps:          0       2       0       0
  4024 ;;      Totals:         0       9       0       0
  4025 ;;Total ram usage:        9 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    3
  4028 ;; This function calls:
  4029 ;;		_ClearResSum
  4030 ;;		_GetTouchKeyValue
  4031 ;;		_KeyClearOne
  4032 ;; This function is called by:
  4033 ;;		_WorkSleep
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _SystemEnterSleep
  4039  0494                     _SystemEnterSleep:	
  4040  0494                     l1342:	
  4041                           ;incstack = 0
  4042                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4043                           
  4044  0494  0064               	clrwdt	;# 
  4045  0495  1683               	bsf	3,5	;RP0=1, select bank1
  4046  0496  1303               	bcf	3,6	;RP1=0, select bank1
  4047  0497  0181               	clrf	1	;volatile
  4048  0498  3007               	movlw	7
  4049  0499  1283               	bcf	3,5	;RP0=0, select bank0
  4050  049A  0481               	iorwf	1,f	;volatile
  4051  049B  1581               	bsf	1,3	;volatile
  4052  049C  0064               	clrwdt	;# 
  4053  049D  300A               	movlw	10
  4054  049E  1283               	bcf	3,5	;RP0=0, select bank0
  4055  049F  1303               	bcf	3,6	;RP1=0, select bank0
  4056  04A0  0081               	movwf	1	;volatile
  4057  04A1  0064               	clrwdt	;# 
  4058  04A2  1283               	bcf	3,5	;RP0=0, select bank2
  4059  04A3  1703               	bsf	3,6	;RP1=1, select bank2
  4060  04A4  0191               	clrf	17	;volatile
  4061  04A5  0193               	clrf	19	;volatile
  4062  04A6  3002               	movlw	2
  4063  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  4064  04A8  0094               	movwf	20	;volatile
  4065  04A9  0063               	sleep	;# 
  4066  04AA  0000               	nop	;# 
  4067  04AB  0064               	clrwdt	;# 
  4068  04AC  3072               	movlw	114
  4069  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  4070  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  4071  04AF  0094               	movwf	20	;volatile
  4072  04B0  3079               	movlw	121
  4073  04B1  1703               	bsf	3,6	;RP1=1, select bank2
  4074  04B2  0093               	movwf	19	;volatile
  4075  04B3  2584  118A         	fcall	_ClearResSum
  4076  04B5  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4077  04B6  2524  118A         	fcall	_GetTouchKeyValue
  4078  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  4079  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  4080  04BA  27EA  118A         	fcall	PL34	;call to abstracted procedure
  4081  04BC  1C0B               	btfss	11,0	;volatile
  4082  04BD  188B               	btfsc	11,1	;volatile
  4083  04BE  2CC1               	goto	l4175
  4084  04BF  1D8D               	btfss	13,3	;volatile
  4085  04C0  2CC8               	goto	l4187
  4086  04C1                     l4175:	
  4087  04C1  2584               	fcall	_ClearResSum
  4088  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  4089  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  4090  04C4  01B6               	clrf	_KeyCounter
  4091  04C5  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4092  04C6  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4093  04C7  0008               	return
  4094  04C8                     l4187:	
  4095  04C8  0852               	movf	SystemEnterSleep@92,w
  4096  04C9  3907               	andlw	7
  4097  04CA  1003               	clrc
  4098  04CB  1903               	btfsc	3,2
  4099  04CC  2D1E               	goto	L9
  4100  04CD  0D54               	rlf	SystemEnterSleep@91,w
  4101  04CE  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4102  04CF  0084               	movwf	4
  4103  04D0  1383               	bcf	3,7	;select IRP bank1
  4104  04D1  0800               	movf	0,w
  4105  04D2  00D0               	movwf	SystemEnterSleep@93
  4106  04D3  0A84               	incf	4,f
  4107  04D4  0800               	movf	0,w
  4108  04D5  00D1               	movwf	SystemEnterSleep@93+1
  4109  04D6  00CF               	movwf	SystemEnterSleep@94+1
  4110  04D7  0850               	movf	SystemEnterSleep@93,w
  4111  04D8  00CE               	movwf	SystemEnterSleep@94
  4112  04D9  0850               	movf	SystemEnterSleep@93,w
  4113  04DA  0451               	iorwf	SystemEnterSleep@93+1,w
  4114  04DB  1903               	btfsc	3,2
  4115  04DC  2D1D               	goto	l4221
  4116  04DD  0854               	movf	SystemEnterSleep@91,w
  4117  04DE  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4118  04DF  0084               	movwf	4
  4119  04E0  158A  2000  118A   	fcall	stringdir
  4120  04E3  07CE               	addwf	SystemEnterSleep@94,f
  4121  04E4  1803               	skipnc
  4122  04E5  0ACF               	incf	SystemEnterSleep@94+1,f
  4123  04E6  1003               	clrc
  4124  04E7  0D54               	rlf	SystemEnterSleep@91,w
  4125  04E8  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4126  04E9  27C9  118A         	fcall	PL14	;call to abstracted procedure
  4127  04EB  084F               	movf	SystemEnterSleep@94+1,w
  4128  04EC  024D               	subwf	??_SystemEnterSleep+1,w
  4129  04ED  1D03               	skipz
  4130  04EE  2CF1               	goto	u3975
  4131  04EF  084E               	movf	SystemEnterSleep@94,w
  4132  04F0  024C               	subwf	??_SystemEnterSleep,w
  4133  04F1                     u3975:	
  4134  04F1  1C03               	skipc
  4135  04F2  2D05               	goto	L8
  4136  04F3  27EA  118A         	fcall	PL34	;call to abstracted procedure
  4137  04F5                     l4201:	
  4138  04F5  0852               	movf	SystemEnterSleep@92,w
  4139  04F6  3907               	andlw	7
  4140  04F7  1D03               	btfss	3,2
  4141  04F8  2CFC               	goto	l4205
  4142  04F9  0854               	movf	SystemEnterSleep@91,w
  4143  04FA  2688  118A         	fcall	_KeyClearOne
  4144  04FC                     l4205:	
  4145  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  4146  04FD  3003               	movlw	3
  4147  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  4148  04FF  1003               	clrc
  4149  0500  27EF  118A         	fcall	PL36	;call to abstracted procedure
  4150  0502  1803               	btfsc	3,0
  4151  0503  2CC1               	goto	l4175
  4152  0504  2CF5               	goto	l4201
  4153  0505                     L8:	
  4154  0505  0D54               	rlf	SystemEnterSleep@91,w
  4155  0506  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4156  0507  27C9  118A         	fcall	PL14	;call to abstracted procedure
  4157  0509  1003               	clrc
  4158  050A  0D54               	rlf	SystemEnterSleep@91,w
  4159  050B  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4160  050C  27BE  118A         	fcall	PL12	;call to abstracted procedure
  4161  050E  0800               	movf	0,w
  4162  050F  00CC               	movwf	??_SystemEnterSleep
  4163  0510  0A84               	incf	4,f
  4164  0511  0800               	movf	0,w
  4165  0512  00CD               	movwf	??_SystemEnterSleep+1
  4166  0513  1003               	clrc
  4167  0514  0D54               	rlf	SystemEnterSleep@91,w
  4168  0515  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4169  0516  27BE  118A         	fcall	PL12	;call to abstracted procedure
  4170  0518  0850               	movf	SystemEnterSleep@93,w
  4171  0519  0080               	movwf	0
  4172  051A  0A84               	incf	4,f
  4173  051B  0851               	movf	SystemEnterSleep@93+1,w
  4174  051C  0080               	movwf	0
  4175  051D                     l4221:	
  4176  051D  1003               	clrc
  4177  051E                     L9:	
  4178  051E  3003               	movlw	3
  4179  051F  27EF  118A         	fcall	PL36	;call to abstracted procedure
  4180  0521  1803               	btfsc	3,0
  4181  0522  2C94               	goto	l1342
  4182  0523  2CC8               	goto	l4187
  4183  0524                     __end_of_SystemEnterSleep:	
  4184  0524                     __ptext27:	
  4185 ;; *************** function _GetTouchKeyValue *****************
  4186 ;; Defined at:
  4187 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  63              2    5[COMMON] unsigned int 
  4192 ;;  64              2    3[COMMON] unsigned int 
  4193 ;;  62              1    7[COMMON] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/200
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4203 ;;      Params:         0       0       0       0
  4204 ;;      Locals:         5       0       0       0
  4205 ;;      Temps:          0       0       0       0
  4206 ;;      Totals:         5       0       0       0
  4207 ;;Total ram usage:        5 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    2
  4210 ;; This function calls:
  4211 ;;		_ClearResSum
  4212 ;; This function is called by:
  4213 ;;		_CheckTouchKey
  4214 ;;		_SystemEnterSleep
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function _GetTouchKeyValue
  4220  0524                     _GetTouchKeyValue:	
  4221                           
  4222                           ;incstack = 0
  4223                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4224  0524  01F7               	clrf	GetTouchKeyValue@62
  4225  0525  01F5               	clrf	GetTouchKeyValue@63
  4226  0526  0AF5               	incf	GetTouchKeyValue@63,f
  4227  0527  01F6               	clrf	GetTouchKeyValue@63+1
  4228  0528                     l3031:	
  4229  0528  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4230  0529  2D2E               	goto	l3035
  4231  052A  0875               	movf	GetTouchKeyValue@63,w
  4232  052B  3907               	andlw	7
  4233  052C  1903               	btfsc	3,2
  4234  052D  2D7A               	goto	l3063
  4235  052E                     l3035:	
  4236  052E  1283               	bcf	3,5	;RP0=0, select bank2
  4237  052F  1703               	bsf	3,6	;RP1=1, select bank2
  4238  0530  0191               	clrf	17	;volatile
  4239  0531  0192               	clrf	18	;volatile
  4240  0532  3079               	movlw	121
  4241  0533  0093               	movwf	19	;volatile
  4242  0534  1303               	bcf	3,6	;RP1=0, select bank0
  4243  0535  1305               	bcf	5,6	;volatile
  4244  0536  1306               	bcf	6,6	;volatile
  4245  0537  0000               	nop	;# 
  4246  0538  0000               	nop	;# 
  4247  0539  0000               	nop	;# 
  4248  053A  0000               	nop	;# 
  4249  053B  0000               	nop	;# 
  4250  053C  0000               	nop	;# 
  4251  053D  0000               	nop	;# 
  4252  053E  0000               	nop	;# 
  4253  053F  1283               	bcf	3,5	;RP0=0, select bank0
  4254  0540  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0541  1705               	bsf	5,6	;volatile
  4256  0542  0877               	movf	GetTouchKeyValue@62,w
  4257  0543  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4258  0544  0084               	movwf	4
  4259  0545  158A  2000  118A   	fcall	stringdir
  4260  0548  1703               	bsf	3,6	;RP1=1, select bank2
  4261  0549  0091               	movwf	17	;volatile
  4262  054A  0877               	movf	GetTouchKeyValue@62,w
  4263  054B  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4264  054C  0084               	movwf	4
  4265  054D  158A  2000  118A   	fcall	stringdir
  4266  0550  0092               	movwf	18	;volatile
  4267  0551  0000               	nop	;# 
  4268  0552  0000               	nop	;# 
  4269  0553  0000               	nop	;# 
  4270  0554  0000               	nop	;# 
  4271  0555  1283               	bcf	3,5	;RP0=0, select bank2
  4272  0556  1703               	bsf	3,6	;RP1=1, select bank2
  4273  0557  1411               	bsf	17,0	;volatile
  4274  0558  30D0               	movlw	208
  4275  0559  00F3               	movwf	GetTouchKeyValue@64
  4276  055A  3007               	movlw	7
  4277  055B  00F4               	movwf	GetTouchKeyValue@64+1
  4278  055C                     l1252:	
  4279  055C  1B91               	btfsc	17,7	;volatile
  4280  055D  2D6A               	goto	l3061
  4281  055E  3001               	movlw	1
  4282  055F  02F3               	subwf	GetTouchKeyValue@64,f
  4283  0560  1C03               	skipc
  4284  0561  03F4               	decf	GetTouchKeyValue@64+1,f
  4285  0562  0873               	movf	GetTouchKeyValue@64,w
  4286  0563  0474               	iorwf	GetTouchKeyValue@64+1,w
  4287  0564  1D03               	btfss	3,2
  4288  0565  2D5C               	goto	l1252
  4289  0566  30FF               	movlw	255
  4290  0567  1303               	bcf	3,6	;RP1=0, select bank0
  4291  0568  00B6               	movwf	_KeyCounter
  4292  0569  2D84               	ljmp	l2879
  4293  056A                     l3061:	
  4294  056A  1003               	clrc
  4295  056B  0D77               	rlf	GetTouchKeyValue@62,w
  4296  056C  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4297  056D  0084               	movwf	4
  4298  056E  0816               	movf	22,w	;volatile
  4299  056F  1383               	bcf	3,7	;select IRP bank1
  4300  0570  0780               	addwf	0,f
  4301  0571  0F84               	incfsz	4,f
  4302  0572  0800               	movf	0,w
  4303  0573  1803               	skipnc
  4304  0574  0A00               	incf	0,w
  4305  0575  00FF               	movwf	127
  4306  0576  0817               	movf	23,w	;volatile
  4307  0577  077F               	addwf	127,w
  4308  0578  0080               	movwf	0
  4309  0579  0384               	decf	4,f
  4310  057A                     l3063:	
  4311  057A  3003               	movlw	3
  4312  057B  1003               	clrc
  4313  057C  0DF5               	rlf	GetTouchKeyValue@63,f
  4314  057D  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4315  057E  0AF7               	incf	GetTouchKeyValue@62,f
  4316  057F  0277               	subwf	GetTouchKeyValue@62,w
  4317  0580  1C03               	skipc
  4318  0581  2D28               	goto	l3031
  4319  0582  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4320  0583  0008               	return
  4321  0584                     __end_of_GetTouchKeyValue:	
  4322  0584                     __ptext28:	
  4323 ;; *************** function _ClearResSum *****************
  4324 ;; Defined at:
  4325 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  56              1    2[COMMON] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/200
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4339 ;;      Params:         0       0       0       0
  4340 ;;      Locals:         1       0       0       0
  4341 ;;      Temps:          0       0       0       0
  4342 ;;      Totals:         1       0       0       0
  4343 ;;Total ram usage:        1 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    1
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_GetTouchKeyValue
  4350 ;;		_CheckTouchKey
  4351 ;;		_SystemEnterSleep
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _ClearResSum
  4357  0584                     _ClearResSum:	
  4358  0584                     l2879:	
  4359                           ;incstack = 0
  4360                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4361                           
  4362  0584  01F2               	clrf	ClearResSum@56
  4363  0585                     l2881:	
  4364  0585  1003               	clrc
  4365  0586  0D72               	rlf	ClearResSum@56,w
  4366  0587  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4367  0588  0084               	movwf	4
  4368  0589  3003               	movlw	3
  4369  058A  1383               	bcf	3,7	;select IRP bank1
  4370  058B  0180               	clrf	0
  4371  058C  0A84               	incf	4,f
  4372  058D  0180               	clrf	0
  4373  058E  0AF2               	incf	ClearResSum@56,f
  4374  058F  0272               	subwf	ClearResSum@56,w
  4375  0590  1803               	btfsc	3,0
  4376  0591  0008               	return
  4377  0592  2D85               	goto	l2881
  4378  0593                     __end_of_ClearResSum:	
  4379  0593                     __ptext30:	
  4380 ;; *************** function _CheckOnceResult *****************
  4381 ;; Defined at:
  4382 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;		None
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  71              2   10[BANK0 ] unsigned int 
  4387 ;;  72              2    7[BANK0 ] unsigned int 
  4388 ;;  73              2    4[BANK0 ] unsigned int 
  4389 ;;  68              1   12[BANK0 ] unsigned char 
  4390 ;;  69              1    9[BANK0 ] unsigned char 
  4391 ;;  70              1    6[BANK0 ] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/100
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4401 ;;      Params:         0       0       0       0
  4402 ;;      Locals:         0       9       0       0
  4403 ;;      Temps:          0       4       0       0
  4404 ;;      Totals:         0      13       0       0
  4405 ;;Total ram usage:       13 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    3
  4408 ;; This function calls:
  4409 ;;		_KeyClearOne
  4410 ;;		_KeyHave
  4411 ;;		_KeyIsIn
  4412 ;; This function is called by:
  4413 ;;		_CheckTouchKey
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _CheckOnceResult
  4419  0593                     _CheckOnceResult:	
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4423  0593  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0594  1303               	bcf	3,6	;RP1=0, select bank0
  4425  0595  01D8               	clrf	CheckOnceResult@68
  4426  0596  01F9               	clrf	_KeyData	;volatile
  4427  0597  01FA               	clrf	_KeyData+1	;volatile
  4428  0598  01B5               	clrf	_KeyMaxSub
  4429  0599                     l4399:	
  4430  0599  0858               	movf	CheckOnceResult@68,w
  4431  059A  3907               	andlw	7
  4432  059B  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4433  059C  0084               	movwf	4
  4434  059D  158A  2000  118A   	fcall	stringdir
  4435  05A0  00D2               	movwf	CheckOnceResult@70
  4436  05A1  1003               	clrc
  4437  05A2  0D58               	rlf	CheckOnceResult@68,w
  4438  05A3  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4439  05A4  0084               	movwf	4
  4440  05A5  3003               	movlw	3
  4441  05A6                     u4395:	
  4442  05A6  0A84               	incf	4,f
  4443  05A7  1003               	clrc
  4444  05A8  1383               	bcf	3,7	;select IRP bank1
  4445  05A9  0C80               	rrf	0,f
  4446  05AA  0384               	decf	4,f
  4447  05AB  0C80               	rrf	0,f
  4448  05AC  3EFF               	addlw	-1
  4449  05AD  1D03               	skipz
  4450  05AE  2DA6               	goto	u4395
  4451  05AF  1003               	clrc
  4452  05B0  0D58               	rlf	CheckOnceResult@68,w
  4453  05B1  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4454  05B2  0084               	movwf	4
  4455  05B3  0800               	movf	0,w
  4456  05B4  00D6               	movwf	CheckOnceResult@71
  4457  05B5  0A84               	incf	4,f
  4458  05B6  0800               	movf	0,w
  4459  05B7  00D7               	movwf	CheckOnceResult@71+1
  4460  05B8  0858               	movf	CheckOnceResult@68,w
  4461  05B9  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4462  05BA  0084               	movwf	4
  4463  05BB  158A  2000  118A   	fcall	stringdir
  4464  05BE  00D5               	movwf	CheckOnceResult@69
  4465  05BF  00D3               	movwf	CheckOnceResult@72
  4466  05C0  01D4               	clrf	CheckOnceResult@72+1
  4467  05C1  0856               	movf	CheckOnceResult@71,w
  4468  05C2  07D3               	addwf	CheckOnceResult@72,f
  4469  05C3  1803               	skipnc
  4470  05C4  0AD4               	incf	CheckOnceResult@72+1,f
  4471  05C5  0857               	movf	CheckOnceResult@71+1,w
  4472  05C6  07D4               	addwf	CheckOnceResult@72+1,f
  4473  05C7  0858               	movf	CheckOnceResult@68,w
  4474  05C8  2674  118A         	fcall	_KeyIsIn
  4475  05CA  3A00               	xorlw	0
  4476  05CB  1003               	clrc
  4477  05CC  1D03               	skipz
  4478  05CD  2E28               	goto	L12
  4479  05CE  0D58               	rlf	CheckOnceResult@68,w
  4480  05CF  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4481  05D0  0084               	movwf	4
  4482  05D1  1383               	bcf	3,7	;select IRP bank1
  4483  05D2  0800               	movf	0,w
  4484  05D3  00D0               	movwf	CheckOnceResult@73
  4485  05D4  0A84               	incf	4,f
  4486  05D5  0800               	movf	0,w
  4487  05D6  00D1               	movwf	CheckOnceResult@73+1
  4488  05D7  1003               	clrc
  4489  05D8  0D58               	rlf	CheckOnceResult@68,w
  4490  05D9  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4491  05DA  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4492  05DC  0254               	subwf	CheckOnceResult@72+1,w
  4493  05DD  1D03               	skipz
  4494  05DE  2DE1               	goto	u4415
  4495  05DF  084C               	movf	??_CheckOnceResult,w
  4496  05E0  0253               	subwf	CheckOnceResult@72,w
  4497  05E1                     u4415:	
  4498  05E1  1803               	skipnc
  4499  05E2  2DF0               	goto	l4417
  4500  05E3  1003               	clrc
  4501  05E4  0D58               	rlf	CheckOnceResult@68,w
  4502  05E5  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4503  05E6  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4504  05E8  0856               	movf	CheckOnceResult@71,w
  4505  05E9  024C               	subwf	??_CheckOnceResult,w
  4506  05EA  00D6               	movwf	CheckOnceResult@71
  4507  05EB  0857               	movf	CheckOnceResult@71+1,w
  4508  05EC  1C03               	skipc
  4509  05ED  0A57               	incf	CheckOnceResult@71+1,w
  4510  05EE  024D               	subwf	??_CheckOnceResult+1,w
  4511  05EF  2E14               	goto	L10
  4512  05F0                     l4417:	
  4513  05F0  0851               	movf	CheckOnceResult@73+1,w
  4514  05F1  0254               	subwf	CheckOnceResult@72+1,w
  4515  05F2  1D03               	skipz
  4516  05F3  2DF6               	goto	u4425
  4517  05F4  0850               	movf	CheckOnceResult@73,w
  4518  05F5  0253               	subwf	CheckOnceResult@72,w
  4519  05F6                     u4425:	
  4520  05F6  1803               	skipnc
  4521  05F7  2E6C               	goto	l4463
  4522  05F8  1003               	clrc
  4523  05F9  0D58               	rlf	CheckOnceResult@68,w
  4524  05FA  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4525  05FB  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4526  05FD  0254               	subwf	CheckOnceResult@72+1,w
  4527  05FE  1D03               	skipz
  4528  05FF  2E02               	goto	u4435
  4529  0600  084C               	movf	??_CheckOnceResult,w
  4530  0601  0253               	subwf	CheckOnceResult@72,w
  4531  0602                     u4435:	
  4532  0602  1803               	skipnc
  4533  0603  2E6C               	goto	l4463
  4534  0604  1003               	clrc
  4535  0605  0D58               	rlf	CheckOnceResult@68,w
  4536  0606  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4537  0607  0084               	movwf	4
  4538  0608  0850               	movf	CheckOnceResult@73,w
  4539  0609  0080               	movwf	0
  4540  060A  0A84               	incf	4,f
  4541  060B  0851               	movf	CheckOnceResult@73+1,w
  4542  060C  0080               	movwf	0
  4543  060D  0856               	movf	CheckOnceResult@71,w
  4544  060E  0250               	subwf	CheckOnceResult@73,w
  4545  060F  00D6               	movwf	CheckOnceResult@71
  4546  0610  0857               	movf	CheckOnceResult@71+1,w
  4547  0611  1C03               	skipc
  4548  0612  0A57               	incf	CheckOnceResult@71+1,w
  4549  0613  0251               	subwf	CheckOnceResult@73+1,w
  4550  0614                     L10:	
  4551  0614  00D7               	movwf	CheckOnceResult@71+1
  4552  0615  0858               	movf	CheckOnceResult@68,w
  4553  0616  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4554  0617  0084               	movwf	4
  4555  0618  0180               	clrf	0
  4556  0619  0857               	movf	CheckOnceResult@71+1,w
  4557  061A  1903               	btfsc	3,2
  4558  061B  2E1E               	goto	l4431
  4559  061C  30FF               	movlw	255
  4560  061D  2E1F               	goto	L11
  4561  061E                     l4431:	
  4562  061E  0856               	movf	CheckOnceResult@71,w
  4563  061F                     L11:	
  4564  061F  00D5               	movwf	CheckOnceResult@69
  4565  0620  0235               	subwf	_KeyMaxSub,w
  4566  0621  1803               	skipnc
  4567  0622  2E26               	goto	l4437
  4568  0623  0855               	movf	CheckOnceResult@69,w
  4569  0624  00B5               	movwf	_KeyMaxSub
  4570  0625  2E66               	goto	l4461
  4571  0626                     l4437:	
  4572  0626  0AB6               	incf	_KeyCounter,f
  4573  0627  2E6C               	goto	l4463
  4574  0628                     L12:	
  4575  0628  0D58               	rlf	CheckOnceResult@68,w
  4576  0629  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4577  062A  0084               	movwf	4
  4578  062B  1383               	bcf	3,7	;select IRP bank1
  4579  062C  0800               	movf	0,w
  4580  062D  00CC               	movwf	??_CheckOnceResult
  4581  062E  0A84               	incf	4,f
  4582  062F  0800               	movf	0,w
  4583  0630  00CD               	movwf	??_CheckOnceResult+1
  4584  0631  084C               	movf	??_CheckOnceResult,w
  4585  0632  3E01               	addlw	1
  4586  0633  00CE               	movwf	??_CheckOnceResult+2
  4587  0634  084D               	movf	??_CheckOnceResult+1,w
  4588  0635  1803               	skipnc
  4589  0636  3E01               	addlw	1
  4590  0637  00CF               	movwf	??_CheckOnceResult+3
  4591  0638  0854               	movf	CheckOnceResult@72+1,w
  4592  0639  024F               	subwf	??_CheckOnceResult+3,w
  4593  063A  1D03               	skipz
  4594  063B  2E3E               	goto	u4465
  4595  063C  0853               	movf	CheckOnceResult@72,w
  4596  063D  024E               	subwf	??_CheckOnceResult+2,w
  4597  063E                     u4465:	
  4598  063E  1C03               	btfss	3,0
  4599  063F  2E6C               	goto	l4463
  4600  0640  1003               	clrc
  4601  0641  0D58               	rlf	CheckOnceResult@68,w
  4602  0642  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4603  0643  0084               	movwf	4
  4604  0644  0800               	movf	0,w
  4605  0645  279A  118A         	fcall	PL4	;call to abstracted procedure
  4606  0647  1C03               	skipc
  4607  0648  2E52               	goto	l4451
  4608  0649  1003               	clrc
  4609  064A  0D58               	rlf	CheckOnceResult@68,w
  4610  064B  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4611  064C  0084               	movwf	4
  4612  064D  0800               	movf	0,w
  4613  064E  279A  118A         	fcall	PL4	;call to abstracted procedure
  4614  0650  1803               	skipnc
  4615  0651  2E5E               	goto	l4455
  4616  0652                     l4451:	
  4617  0652  0858               	movf	CheckOnceResult@68,w
  4618  0653  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4619  0654  0084               	movwf	4
  4620  0655  3009               	movlw	9
  4621  0656  0A80               	incf	0,f
  4622  0657  0200               	subwf	0,w
  4623  0658  1C03               	skipc
  4624  0659  2E62               	goto	l4459
  4625  065A  0858               	movf	CheckOnceResult@68,w
  4626  065B  2688  118A         	fcall	_KeyClearOne
  4627  065D  2E6C               	goto	l4463
  4628  065E                     l4455:	
  4629  065E  0858               	movf	CheckOnceResult@68,w
  4630  065F  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4631  0660  0084               	movwf	4
  4632  0661  0180               	clrf	0
  4633  0662                     l4459:	
  4634  0662  087A               	movf	_KeyData+1,w	;volatile
  4635  0663  0479               	iorwf	_KeyData,w	;volatile
  4636  0664  1D03               	btfss	3,2
  4637  0665  2E6C               	goto	l4463
  4638  0666                     l4461:	
  4639  0666  0852               	movf	CheckOnceResult@70,w
  4640  0667  00F2               	movwf	KeyHave@59
  4641  0668  01F3               	clrf	KeyHave@59+1
  4642  0669  0858               	movf	CheckOnceResult@68,w
  4643  066A  269D  118A         	fcall	_KeyHave
  4644  066C                     l4463:	
  4645  066C  3003               	movlw	3
  4646  066D  1283               	bcf	3,5	;RP0=0, select bank0
  4647  066E  1303               	bcf	3,6	;RP1=0, select bank0
  4648  066F  0AD8               	incf	CheckOnceResult@68,f
  4649  0670  0258               	subwf	CheckOnceResult@68,w
  4650  0671  1803               	btfsc	3,0
  4651  0672  0008               	return
  4652  0673  2D99               	goto	l4399
  4653  0674                     __end_of_CheckOnceResult:	
  4654  0674                     __ptext34:	
  4655 ;; *************** function _KeyIsIn *****************
  4656 ;; Defined at:
  4657 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  45              1    wreg     unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  45              1    3[COMMON] unsigned char 
  4662 ;;  46              1    2[COMMON] unsigned char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      unsigned char 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 300/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4672 ;;      Params:         0       0       0       0
  4673 ;;      Locals:         2       0       0       0
  4674 ;;      Temps:          0       0       0       0
  4675 ;;      Totals:         2       0       0       0
  4676 ;;Total ram usage:        2 bytes
  4677 ;; Hardware stack levels used:    2
  4678 ;; Hardware stack levels required when called:    1
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_KeyClearIn
  4683 ;;		_CheckOnceResult
  4684 ;;		_CheckKeyOldValue
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _KeyIsIn
  4690  0674                     _KeyIsIn:	
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4694                           ;KeyIsIn@45 stored from wreg
  4695  0674  00F3               	movwf	KeyIsIn@45
  4696  0675  3907               	andlw	7
  4697  0676  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4698  0677  0084               	movwf	4
  4699  0678  158A  2000  118A   	fcall	stringdir
  4700  067B  00F2               	movwf	KeyIsIn@46
  4701  067C  1DF3               	btfss	KeyIsIn@45,3
  4702  067D  2E82               	goto	l2865
  4703  067E  1283               	bcf	3,5	;RP0=0, select bank0
  4704  067F  1303               	bcf	3,6	;RP1=0, select bank0
  4705  0680  0831               	movf	_KeyFlag+1,w	;volatile
  4706  0681  2E85               	goto	L17
  4707  0682                     l2865:	
  4708  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4709  0683  1303               	bcf	3,6	;RP1=0, select bank0
  4710  0684  0830               	movf	_KeyFlag,w	;volatile
  4711  0685                     L17:	
  4712  0685  05F2               	andwf	KeyIsIn@46,f
  4713  0686  0872               	movf	KeyIsIn@46,w
  4714  0687  0008               	return
  4715  0688                     __end_of_KeyIsIn:	
  4716  0688                     __ptext32:	
  4717 ;; *************** function _KeyClearOne *****************
  4718 ;; Defined at:
  4719 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  49              1    wreg     unsigned char 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  49              1    2[COMMON] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4733 ;;      Params:         0       0       0       0
  4734 ;;      Locals:         1       0       0       0
  4735 ;;      Temps:          0       0       0       0
  4736 ;;      Totals:         1       0       0       0
  4737 ;;Total ram usage:        1 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_KeyClearIn
  4744 ;;		_KeyStopClear
  4745 ;;		_CheckOnceResult
  4746 ;;		_SystemEnterSleep
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _KeyClearOne
  4752  0688                     _KeyClearOne:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4756                           ;KeyClearOne@49 stored from wreg
  4757  0688  00F2               	movwf	KeyClearOne@49
  4758  0689  1003               	clrc
  4759  068A  0D72               	rlf	KeyClearOne@49,w
  4760  068B  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4761  068C  0084               	movwf	4
  4762  068D  1383               	bcf	3,7	;select IRP bank1
  4763  068E  27D8  118A         	fcall	PL20	;call to abstracted procedure
  4764  0690  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4765  0691  0084               	movwf	4
  4766  0692  27D8  118A         	fcall	PL20	;call to abstracted procedure
  4767  0694  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4768  0695  0084               	movwf	4
  4769  0696  27D8               	fcall	PL20	;call to abstracted procedure
  4770  0697  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4771  0698  0084               	movwf	4
  4772  0699  0180               	clrf	0
  4773  069A  0A84               	incf	4,f
  4774  069B  0180               	clrf	0	;# 
  4775  069C  0008               	return
  4776  069D                     __end_of_KeyClearOne:	
  4777  069D                     __ptext31:	
  4778 ;; *************** function _KeyHave *****************
  4779 ;; Defined at:
  4780 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  58              1    wreg     unsigned char 
  4783 ;;  59              2    2[COMMON] unsigned int 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  58              1    4[COMMON] unsigned char 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  1    wreg      void 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : B00/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4795 ;;      Params:         2       0       0       0
  4796 ;;      Locals:         1       0       0       0
  4797 ;;      Temps:          0       0       0       0
  4798 ;;      Totals:         3       0       0       0
  4799 ;;Total ram usage:        3 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    1
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_CheckOnceResult
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _KeyHave
  4811  069D                     _KeyHave:	
  4812                           
  4813                           ;incstack = 0
  4814                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4815                           ;KeyHave@58 stored from wreg
  4816  069D  00F4               	movwf	KeyHave@58
  4817  069E  1283               	bcf	3,5	;RP0=0, select bank0
  4818  069F  1303               	bcf	3,6	;RP1=0, select bank0
  4819  06A0  0AB6               	incf	_KeyCounter,f
  4820  06A1  01F9               	clrf	_KeyData	;volatile
  4821  06A2  01FA               	clrf	_KeyData+1	;volatile
  4822  06A3  1DF4               	btfss	KeyHave@58,3
  4823  06A4  2EA8               	goto	l3019
  4824  06A5  0872               	movf	KeyHave@59,w
  4825  06A6  00FA               	movwf	_KeyData+1	;volatile
  4826  06A7  0008               	return
  4827  06A8                     l3019:	
  4828  06A8  0872               	movf	KeyHave@59,w
  4829  06A9  00F9               	movwf	_KeyData	;volatile
  4830  06AA  0008               	return
  4831  06AB                     __end_of_KeyHave:	
  4832  06AB                     __ptext33:	
  4833 ;; *************** function _CheckKeyOldValue *****************
  4834 ;; Defined at:
  4835 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;		None
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  80              2    2[BANK0 ] unsigned int 
  4840 ;;  79              2    0[BANK0 ] unsigned int 
  4841 ;;  78              1    4[BANK0 ] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/100
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4851 ;;      Params:         0       0       0       0
  4852 ;;      Locals:         0       5       0       0
  4853 ;;      Temps:          2       0       0       0
  4854 ;;      Totals:         2       5       0       0
  4855 ;;Total ram usage:        7 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    3
  4858 ;; This function calls:
  4859 ;;		_KeyIsIn
  4860 ;; This function is called by:
  4861 ;;		_CheckTouchKey
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           
  4866                           ;psect for function _CheckKeyOldValue
  4867  06AB                     _CheckKeyOldValue:	
  4868                           
  4869                           ;incstack = 0
  4870                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4871  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  4872  06AC  3004               	movlw	4
  4873  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  4874  06AE  01D0               	clrf	CheckKeyOldValue@78
  4875  06AF  0AB4               	incf	CheckKeyOldValue@F77,f
  4876  06B0  0234               	subwf	CheckKeyOldValue@F77,w
  4877  06B1  1C03               	btfss	3,0
  4878  06B2  0008               	return
  4879  06B3  01B4               	clrf	CheckKeyOldValue@F77
  4880  06B4                     l3481:	
  4881  06B4  1003               	clrc
  4882  06B5  0D50               	rlf	CheckKeyOldValue@78,w
  4883  06B6  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4884  06B7  0084               	movwf	4
  4885  06B8  1383               	bcf	3,7	;select IRP bank1
  4886  06B9  0800               	movf	0,w
  4887  06BA  00CC               	movwf	CheckKeyOldValue@79
  4888  06BB  0A84               	incf	4,f
  4889  06BC  0800               	movf	0,w
  4890  06BD  00CD               	movwf	CheckKeyOldValue@79+1
  4891  06BE  0850               	movf	CheckKeyOldValue@78,w
  4892  06BF  2674  118A         	fcall	_KeyIsIn
  4893  06C1  3A00               	xorlw	0
  4894  06C2  1003               	clrc
  4895  06C3  1D03               	skipz
  4896  06C4  2EF9               	goto	L16
  4897  06C5  0D50               	rlf	CheckKeyOldValue@78,w
  4898  06C6  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4899  06C7  0084               	movwf	4
  4900  06C8  1383               	bcf	3,7	;select IRP bank1
  4901  06C9  278C  118A         	fcall	PL2	;call to abstracted procedure
  4902  06CB  1903               	skipnz
  4903  06CC  024E               	subwf	CheckKeyOldValue@80,w
  4904  06CD  1C03               	skipc
  4905  06CE  2ED5               	goto	L13
  4906  06CF  0F4E               	incfsz	CheckKeyOldValue@80,w
  4907  06D0  2EF8               	goto	l1293
  4908  06D1  0A4F               	incf	CheckKeyOldValue@80+1,w
  4909  06D2  1003               	clrc
  4910  06D3  1D03               	btfss	3,2
  4911  06D4  2EF9               	goto	L16
  4912  06D5                     L13:	
  4913  06D5  0D50               	rlf	CheckKeyOldValue@78,w
  4914  06D6  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4915  06D7  0084               	movwf	4
  4916  06D8  278C  118A         	fcall	PL2	;call to abstracted procedure
  4917  06DA  1903               	skipnz
  4918  06DB  024E               	subwf	CheckKeyOldValue@80,w
  4919  06DC  1C03               	skipc
  4920  06DD  2EE4               	goto	L14
  4921  06DE  0F4E               	incfsz	CheckKeyOldValue@80,w
  4922  06DF  2EF8               	goto	l1293
  4923  06E0  0A4F               	incf	CheckKeyOldValue@80+1,w
  4924  06E1  1003               	clrc
  4925  06E2  1D03               	btfss	3,2
  4926  06E3  2EF9               	goto	L16
  4927  06E4                     L14:	
  4928  06E4  0D50               	rlf	CheckKeyOldValue@78,w
  4929  06E5  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4930  06E6  0084               	movwf	4
  4931  06E7  278C  118A         	fcall	PL2	;call to abstracted procedure
  4932  06E9  1903               	skipnz
  4933  06EA  024E               	subwf	CheckKeyOldValue@80,w
  4934  06EB  1C03               	skipc
  4935  06EC  2EF3               	goto	L15
  4936  06ED  0F4E               	incfsz	CheckKeyOldValue@80,w
  4937  06EE  2EF8               	goto	l1293
  4938  06EF  0A4F               	incf	CheckKeyOldValue@80+1,w
  4939  06F0  1003               	clrc
  4940  06F1  1D03               	btfss	3,2
  4941  06F2  2EF9               	goto	L16
  4942  06F3                     L15:	
  4943  06F3  0D50               	rlf	CheckKeyOldValue@78,w
  4944  06F4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4945  06F5  0084               	movwf	4
  4946  06F6  27E4  118A         	fcall	PL30	;call to abstracted procedure
  4947  06F8                     l1293:	
  4948  06F8  1003               	clrc
  4949  06F9                     L16:	
  4950  06F9  0D50               	rlf	CheckKeyOldValue@78,w
  4951  06FA  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4952  06FB  0084               	movwf	4
  4953  06FC  1383               	bcf	3,7	;select IRP bank1
  4954  06FD  27D0  118A         	fcall	PL18	;call to abstracted procedure
  4955  06FF  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4956  0700  27B3  118A         	fcall	PL10	;call to abstracted procedure
  4957  0702  27D0  118A         	fcall	PL18	;call to abstracted procedure
  4958  0704  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4959  0705  27B3  118A         	fcall	PL10	;call to abstracted procedure
  4960  0707  27E4  118A         	fcall	PL30	;call to abstracted procedure
  4961  0709  3003               	movlw	3
  4962  070A  0AD0               	incf	CheckKeyOldValue@78,f
  4963  070B  0250               	subwf	CheckKeyOldValue@78,w
  4964  070C  1803               	btfsc	3,0
  4965  070D  0008               	return
  4966  070E  2EB4               	goto	l3481
  4967  070F                     __end_of_CheckKeyOldValue:	
  4968  070F                     __ptext26:	
  4969 ;; *************** function _KeyStopClear *****************
  4970 ;; Defined at:
  4971 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  53              1    3[COMMON] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      void 
  4978 ;; Registers used:
  4979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/100
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4985 ;;      Params:         0       0       0       0
  4986 ;;      Locals:         1       0       0       0
  4987 ;;      Temps:          0       0       0       0
  4988 ;;      Totals:         1       0       0       0
  4989 ;;Total ram usage:        1 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		_KeyClearOne
  4994 ;; This function is called by:
  4995 ;;		_CheckTouchKey
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _KeyStopClear
  5001  070F                     _KeyStopClear:	
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5005  070F  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0710  1303               	bcf	3,6	;RP1=0, select bank0
  5007  0711  01B0               	clrf	_KeyFlag	;volatile
  5008  0712  01B1               	clrf	_KeyFlag+1	;volatile
  5009  0713  01F3               	clrf	KeyStopClear@53
  5010  0714                     l3393:	
  5011  0714  1003               	clrc
  5012  0715  0D73               	rlf	KeyStopClear@53,w
  5013  0716  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5014  0717  0084               	movwf	4
  5015  0718  1383               	bcf	3,7	;select IRP bank1
  5016  0719  0180               	clrf	0
  5017  071A  0A84               	incf	4,f
  5018  071B  0180               	clrf	0
  5019  071C  0873               	movf	KeyStopClear@53,w
  5020  071D  2688  118A         	fcall	_KeyClearOne
  5021  071F  3003               	movlw	3
  5022  0720  0AF3               	incf	KeyStopClear@53,f
  5023  0721  0273               	subwf	KeyStopClear@53,w
  5024  0722  1803               	btfsc	3,0
  5025  0723  0008               	return
  5026  0724  2F14               	goto	l3393
  5027  0725                     __end_of_KeyStopClear:	
  5028  0725                     __ptext24:	
  5029 ;; *************** function _TurnKeyFlags *****************
  5030 ;; Defined at:
  5031 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/100
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5045 ;;      Params:         0       0       0       0
  5046 ;;      Locals:         0       0       0       0
  5047 ;;      Temps:          0       0       0       0
  5048 ;;      Totals:         0       0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    4
  5052 ;; This function calls:
  5053 ;;		_KeyClearIn
  5054 ;; This function is called by:
  5055 ;;		_CheckTouchKey
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           
  5060                           ;psect for function _TurnKeyFlags
  5061  0725                     _TurnKeyFlags:	
  5062                           
  5063                           ;incstack = 0
  5064                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5065  0725  087A               	movf	_KeyData+1,w	;volatile
  5066  0726  0479               	iorwf	_KeyData,w	;volatile
  5067  0727  1903               	btfsc	3,2
  5068  0728  2F49               	goto	l3541
  5069  0729  1283               	bcf	3,5	;RP0=0, select bank0
  5070  072A  1303               	bcf	3,6	;RP1=0, select bank0
  5071  072B  01B2               	clrf	TurnKeyFlags@F84
  5072  072C  0879               	movf	_KeyData,w	;volatile
  5073  072D  0620               	xorwf	_KeyOldData,w	;volatile
  5074  072E  1D03               	skipz
  5075  072F  2F42               	goto	l1311
  5076  0730  087A               	movf	_KeyData+1,w	;volatile
  5077  0731  0621               	xorwf	_KeyOldData+1,w	;volatile
  5078  0732  1D03               	skipz
  5079  0733  2F42               	goto	l1311
  5080  0734  3002               	movlw	2
  5081  0735  0AB3               	incf	TurnKeyFlags@F83,f
  5082  0736  0233               	subwf	TurnKeyFlags@F83,w
  5083  0737  1C03               	skipc
  5084  0738  0008               	return
  5085  0739  01B3               	clrf	TurnKeyFlags@F83
  5086  073A  0879               	movf	_KeyData,w	;volatile
  5087  073B  00B0               	movwf	_KeyFlag	;volatile
  5088  073C  087A               	movf	_KeyData+1,w	;volatile
  5089  073D  00B1               	movwf	_KeyFlag+1	;volatile
  5090  073E  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5091  073F  0008               	return
  5092  0740  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5093  0741  2F6E               	ljmp	l2993
  5094  0742                     l1311:	
  5095  0742  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5096  0743  0879               	movf	_KeyData,w	;volatile
  5097  0744  00A0               	movwf	_KeyOldData	;volatile
  5098  0745  087A               	movf	_KeyData+1,w	;volatile
  5099  0746  00A1               	movwf	_KeyOldData+1	;volatile
  5100  0747  01B3               	clrf	TurnKeyFlags@F83
  5101  0748  0008               	return
  5102  0749                     l3541:	
  5103  0749  1283               	bcf	3,5	;RP0=0, select bank0
  5104  074A  1303               	bcf	3,6	;RP1=0, select bank0
  5105  074B  01B3               	clrf	TurnKeyFlags@F83
  5106  074C  01A0               	clrf	_KeyOldData	;volatile
  5107  074D  01A1               	clrf	_KeyOldData+1	;volatile
  5108  074E  3002               	movlw	2
  5109  074F  0AB2               	incf	TurnKeyFlags@F84,f
  5110  0750  0232               	subwf	TurnKeyFlags@F84,w
  5111  0751  1C03               	skipc
  5112  0752  0008               	return
  5113  0753  01B2               	clrf	TurnKeyFlags@F84
  5114  0754  01B0               	clrf	_KeyFlag	;volatile
  5115  0755  01B1               	clrf	_KeyFlag+1	;volatile
  5116  0756  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5117  0757  0008               	return
  5118  0758                     __end_of_TurnKeyFlags:	
  5119  0758                     __ptext29:	
  5120 ;; *************** function _CheckValidTime *****************
  5121 ;; Defined at:
  5122 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;		None
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      void 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5136 ;;      Params:         0       0       0       0
  5137 ;;      Locals:         0       0       0       0
  5138 ;;      Temps:          0       0       0       0
  5139 ;;      Totals:         0       0       0       0
  5140 ;;Total ram usage:        0 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    1
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_CheckTouchKey
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           
  5151                           ;psect for function _CheckValidTime
  5152  0758                     _CheckValidTime:	
  5153  0758                     l3551:	
  5154                           ;incstack = 0
  5155                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5156                           
  5157  0758  1283               	bcf	3,5	;RP0=0, select bank0
  5158  0759  1303               	bcf	3,6	;RP1=0, select bank0
  5159  075A  0831               	movf	_KeyFlag+1,w	;volatile
  5160  075B  0430               	iorwf	_KeyFlag,w	;volatile
  5161  075C  1903               	btfsc	3,2
  5162  075D  2F6A               	goto	l3557
  5163  075E  1683               	bsf	3,5	;RP0=1, select bank1
  5164  075F  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5165  0760  1903               	skipnz
  5166  0761  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5167  0762  303A               	movlw	58
  5168  0763  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5169  0764  3098               	movlw	152
  5170  0765  1903               	skipnz
  5171  0766  0241               	subwf	CheckValidTime@F87^(0+128),w
  5172  0767  1C03               	skipc
  5173  0768  0008               	return
  5174  0769  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5175  076A                     l3557:	
  5176  076A  1683               	bsf	3,5	;RP0=1, select bank1
  5177  076B  01C1               	clrf	CheckValidTime@F87^(0+128)
  5178  076C  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5179  076D  0008               	return
  5180  076E                     __end_of_CheckValidTime:	
  5181  076E                     __ptext25:	
  5182 ;; *************** function _KeyClearIn *****************
  5183 ;; Defined at:
  5184 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;		None
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  51              1    4[COMMON] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 300/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5198 ;;      Params:         0       0       0       0
  5199 ;;      Locals:         1       0       0       0
  5200 ;;      Temps:          0       0       0       0
  5201 ;;      Totals:         1       0       0       0
  5202 ;;Total ram usage:        1 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    3
  5205 ;; This function calls:
  5206 ;;		_KeyClearOne
  5207 ;;		_KeyIsIn
  5208 ;; This function is called by:
  5209 ;;		_TurnKeyFlags
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _KeyClearIn
  5215  076E                     _KeyClearIn:	
  5216  076E                     l2993:	
  5217                           ;incstack = 0
  5218                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5219                           
  5220  076E  01F4               	clrf	KeyClearIn@51
  5221  076F                     l2999:	
  5222  076F  0874               	movf	KeyClearIn@51,w
  5223  0770  2674  118A         	fcall	_KeyIsIn
  5224  0772  3A00               	xorlw	0
  5225  0773  1D03               	skipz
  5226  0774  2F78               	goto	l3003
  5227  0775  0874               	movf	KeyClearIn@51,w
  5228  0776  2688  118A         	fcall	_KeyClearOne
  5229  0778                     l3003:	
  5230  0778  3003               	movlw	3
  5231  0779  0AF4               	incf	KeyClearIn@51,f
  5232  077A  0274               	subwf	KeyClearIn@51,w
  5233  077B  1803               	btfsc	3,0
  5234  077C  0008               	return
  5235  077D  2F6F               	goto	l2999
  5236  077E                     __end_of_KeyClearIn:	
  5237  077E                     __ptext20:	
  5238 ;; *************** function _Refurbish_Sfr *****************
  5239 ;; Defined at:
  5240 ;;		line 97 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5241 ;; Parameters:    Size  Location     Type
  5242 ;;		None
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;		None
  5245 ;; Return value:  Size  Location     Type
  5246 ;;                  1    wreg      void 
  5247 ;; Registers used:
  5248 ;;		wreg, status,2, status,0
  5249 ;; Tracked objects:
  5250 ;;		On entry : 200/0
  5251 ;;		On exit  : 300/0
  5252 ;;		Unchanged: 0/0
  5253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5254 ;;      Params:         0       0       0       0
  5255 ;;      Locals:         0       0       0       0
  5256 ;;      Temps:          0       0       0       0
  5257 ;;      Totals:         0       0       0       0
  5258 ;;Total ram usage:        0 bytes
  5259 ;; Hardware stack levels used:    1
  5260 ;; Hardware stack levels required when called:    1
  5261 ;; This function calls:
  5262 ;;		Nothing
  5263 ;; This function is called by:
  5264 ;;		_WorkSleep
  5265 ;;		_main
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _Refurbish_Sfr
  5271  077E                     _Refurbish_Sfr:	
  5272                           
  5273                           ;main.c: 100: PIE1 = 2;
  5274                           
  5275                           ;incstack = 0
  5276                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5277  077E  3002               	movlw	2
  5278  077F  1283               	bcf	3,5	;RP0=0, select bank0
  5279  0780  008E               	movwf	14	;volatile
  5280                           
  5281                           ;main.c: 101: PR2 = 250;
  5282  0781  30FA               	movlw	250
  5283  0782  0091               	movwf	17	;volatile
  5284                           
  5285                           ;main.c: 102: INTCON = 0XC0;
  5286  0783  30C0               	movlw	192
  5287  0784  008B               	movwf	11	;volatile
  5288                           
  5289                           ;main.c: 103: if (4 != T2CON)
  5290  0785  3004               	movlw	4
  5291  0786  0613               	xorwf	19,w	;volatile
  5292  0787  1903               	btfsc	3,2
  5293  0788  0008               	return
  5294                           
  5295                           ;main.c: 104: T2CON = 4;
  5296  0789  3004               	movlw	4
  5297  078A  0093               	movwf	19	;volatile
  5298  078B  0008               	return
  5299  078C                     __end_of_Refurbish_Sfr:	
  5300  078C                     PL2:	
  5301  078C  0800               	movf	0,w
  5302  078D  00CE               	movwf	CheckKeyOldValue@80
  5303  078E  0A84               	incf	4,f
  5304  078F  0800               	movf	0,w
  5305  0790  00CF               	movwf	CheckKeyOldValue@80+1
  5306  0791  084C               	movf	CheckKeyOldValue@79,w
  5307  0792  02CE               	subwf	CheckKeyOldValue@80,f
  5308  0793  084D               	movf	CheckKeyOldValue@79+1,w
  5309  0794  1C03               	skipc
  5310  0795  03CF               	decf	CheckKeyOldValue@80+1,f
  5311  0796  02CF               	subwf	CheckKeyOldValue@80+1,f
  5312  0797  3000               	movlw	0
  5313  0798  024F               	subwf	CheckKeyOldValue@80+1,w
  5314  0799  3402               	retlw	2
  5315  079A                     __end_ofPL2:	
  5316  079A                     PL4:	
  5317  079A  00CC               	movwf	??_CheckOnceResult
  5318  079B  0A84               	incf	4,f
  5319  079C  0800               	movf	0,w
  5320  079D  00CD               	movwf	??_CheckOnceResult+1
  5321  079E  0855               	movf	CheckOnceResult@69,w
  5322  079F  074C               	addwf	??_CheckOnceResult,w
  5323  07A0  00CE               	movwf	??_CheckOnceResult+2
  5324  07A1  084D               	movf	??_CheckOnceResult+1,w
  5325  07A2  1803               	skipnc
  5326  07A3  0A4D               	incf	??_CheckOnceResult+1,w
  5327  07A4  00CF               	movwf	??_CheckOnceResult+3
  5328  07A5  0857               	movf	CheckOnceResult@71+1,w
  5329  07A6  024F               	subwf	??_CheckOnceResult+3,w
  5330  07A7  1D03               	skipz
  5331  07A8  0008               	return
  5332  07A9  0856               	movf	CheckOnceResult@71,w
  5333  07AA  024E               	subwf	??_CheckOnceResult+2,w
  5334  07AB  0008               	return
  5335  07AC                     __end_ofPL4:	
  5336  07AC                     PL8:	
  5337  07AC  0084               	movwf	4
  5338  07AD  0800               	movf	0,w
  5339  07AE  00CC               	movwf	??_CheckOnceResult
  5340  07AF  0A84               	incf	4,f
  5341  07B0  0800               	movf	0,w
  5342  07B1  00CD               	movwf	??_CheckOnceResult+1
  5343  07B2  0008               	return
  5344  07B3                     __end_ofPL8:	
  5345  07B3                     PL10:	
  5346  07B3  0084               	movwf	4
  5347  07B4  0874               	movf	??_CheckKeyOldValue,w
  5348  07B5  0080               	movwf	0
  5349  07B6  0A84               	incf	4,f
  5350  07B7  0875               	movf	??_CheckKeyOldValue+1,w
  5351  07B8  0080               	movwf	0
  5352  07B9  1003               	clrc
  5353  07BA  0D50               	rlf	CheckKeyOldValue@78,w
  5354  07BB  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5355  07BC  0084               	movwf	4
  5356  07BD  0008               	return
  5357  07BE                     __end_ofPL10:	
  5358  07BE                     PL12:	
  5359  07BE  0084               	movwf	4
  5360  07BF  084C               	movf	??_SystemEnterSleep,w
  5361  07C0  0080               	movwf	0
  5362  07C1  0A84               	incf	4,f
  5363  07C2  084D               	movf	??_SystemEnterSleep+1,w
  5364  07C3  0080               	movwf	0
  5365  07C4  1003               	clrc
  5366  07C5  0D54               	rlf	SystemEnterSleep@91,w
  5367  07C6  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5368  07C7  0084               	movwf	4
  5369  07C8  0008               	return
  5370  07C9                     __end_ofPL12:	
  5371  07C9                     PL14:	
  5372  07C9  0084               	movwf	4
  5373  07CA  0800               	movf	0,w
  5374  07CB  00CC               	movwf	??_SystemEnterSleep
  5375  07CC  0A84               	incf	4,f
  5376  07CD  0800               	movf	0,w
  5377  07CE  00CD               	movwf	??_SystemEnterSleep+1
  5378  07CF  0008               	return
  5379  07D0                     __end_ofPL14:	
  5380  07D0                     PL18:	
  5381  07D0  0800               	movf	0,w
  5382  07D1  00F4               	movwf	??_CheckKeyOldValue
  5383  07D2  0A84               	incf	4,f
  5384  07D3  0800               	movf	0,w
  5385  07D4  00F5               	movwf	??_CheckKeyOldValue+1
  5386  07D5  1003               	clrc
  5387  07D6  0D50               	rlf	CheckKeyOldValue@78,w
  5388  07D7  0008               	return
  5389  07D8                     __end_ofPL18:	
  5390  07D8                     PL20:	
  5391  07D8  0180               	clrf	0
  5392  07D9  0A84               	incf	4,f
  5393  07DA  0180               	clrf	0
  5394  07DB  1003               	clrc
  5395  07DC  0D72               	rlf	KeyClearOne@49,w
  5396  07DD  0008               	return
  5397  07DE                     __end_ofPL20:	
  5398  07DE                     PL24:	
  5399  07DE  3041               	movlw	65
  5400  07DF  1683               	bsf	3,5	;RP0=1, select bank1
  5401  07E0  0095               	movwf	21	;volatile
  5402  07E1  1415               	bsf	21,0	;volatile
  5403  07E2  0196               	clrf	22	;volatile
  5404  07E3  0008               	return
  5405  07E4                     __end_ofPL24:	
  5406  07E4                     PL30:	
  5407  07E4  084C               	movf	CheckKeyOldValue@79,w
  5408  07E5  0080               	movwf	0
  5409  07E6  0A84               	incf	4,f
  5410  07E7  084D               	movf	CheckKeyOldValue@79+1,w
  5411  07E8  0080               	movwf	0
  5412  07E9  0008               	return
  5413  07EA                     __end_ofPL30:	
  5414  07EA                     PL34:	
  5415  07EA  01D4               	clrf	SystemEnterSleep@91
  5416  07EB  01D2               	clrf	SystemEnterSleep@92
  5417  07EC  0AD2               	incf	SystemEnterSleep@92,f
  5418  07ED  01D3               	clrf	SystemEnterSleep@92+1
  5419  07EE  0008               	return
  5420  07EF                     __end_ofPL34:	
  5421  07EF                     PL36:	
  5422  07EF  0DD2               	rlf	SystemEnterSleep@92,f
  5423  07F0  0DD3               	rlf	SystemEnterSleep@92+1,f
  5424  07F1  0AD4               	incf	SystemEnterSleep@91,f
  5425  07F2  0254               	subwf	SystemEnterSleep@91,w
  5426  07F3  0008               	return
  5427  07F4                     __end_ofPL36:	
  5428                           
  5429                           	psect	text35
  5430  0E8A                     __ptext35:	
  5431 ;; *************** function _Isr_Timer *****************
  5432 ;; Defined at:
  5433 ;;		line 200 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 300/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5447 ;;      Params:         0       0       0       0
  5448 ;;      Locals:         0       0       0       0
  5449 ;;      Temps:          2       0       0       0
  5450 ;;      Totals:         2       0       0       0
  5451 ;;Total ram usage:        2 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		Interrupt level 1
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _Isr_Timer
  5462  0E8A                     _Isr_Timer:	
  5463                           
  5464                           ;main.c: 202: if(TMR2IF)
  5465  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0E8C  1C8D               	btfss	13,1	;volatile
  5468  0E8D  2E9D               	goto	i1l3895
  5469                           
  5470                           ;main.c: 203: {
  5471                           ;main.c: 204: TMR2IF = 0;
  5472  0E8E  108D               	bcf	13,1	;volatile
  5473                           
  5474                           ;main.c: 205: if(++MainTime >= 32)
  5475  0E8F  3020               	movlw	32
  5476  0E90  0AC9               	incf	_MainTime,f	;volatile
  5477  0E91  0249               	subwf	_MainTime,w	;volatile
  5478  0E92  1C03               	skipc
  5479  0E93  2E9E               	goto	i1l973
  5480                           
  5481                           ;main.c: 206: {
  5482                           ;main.c: 207: MainTime = 0;
  5483  0E94  01C9               	clrf	_MainTime	;volatile
  5484                           
  5485                           ;main.c: 208: B_MainLoop = 1;
  5486  0E95  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5487                           
  5488                           ;main.c: 209: if(++count1s >= 250)
  5489  0E96  30FA               	movlw	250
  5490  0E97  0AC8               	incf	_count1s,f
  5491  0E98  0248               	subwf	_count1s,w
  5492  0E99  1C03               	skipc
  5493  0E9A  2E9E               	goto	i1l973
  5494                           
  5495                           ;main.c: 210: {
  5496                           ;main.c: 211: count1s = 0;
  5497  0E9B  01C8               	clrf	_count1s
  5498  0E9C  2E9E               	goto	i1l973
  5499  0E9D                     i1l3895:	
  5500                           
  5501                           ;main.c: 215: else
  5502                           ;main.c: 216: {
  5503                           ;main.c: 217: PIR1 = 0;
  5504  0E9D  018D               	clrf	13	;volatile
  5505  0E9E                     i1l973:	
  5506  0E9E  0871               	movf	??_Isr_Timer+1,w
  5507  0E9F  008A               	movwf	10
  5508  0EA0  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5509  0EA1  0083               	movwf	3
  5510  0EA2  0EFE               	swapf	126,f
  5511  0EA3  0E7E               	swapf	126,w
  5512  0EA4  0009               	retfie
  5513  0EA5                     __end_of_Isr_Timer:	
  5514  007E                     btemp	set	126	;btemp
  5515  007E                     wtemp0	set	126
  5516                           
  5517                           	psect	intentry
  5518  0004                     __pintentry:	
  5519                           ;incstack = 0
  5520                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5521                           
  5522  0004                     interrupt_function:	
  5523  007E                     saved_w	set	btemp
  5524  0004  00FE               	movwf	btemp
  5525  0005  0E03               	swapf	3,w
  5526  0006  00F0               	movwf	??_Isr_Timer
  5527  0007  080A               	movf	10,w
  5528  0008  00F1               	movwf	??_Isr_Timer+1
  5529  0009  158A  2E8A         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         86
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      44
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11909
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7906
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1286
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      2C       6       55.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      87       8        0.0%
DATA                 0      0      87       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 28 13:34:08 2025

                        pc 0002                         PL2 078C                         PL4 079A  
                       PL6 03DF                         PL8 07AC              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 07B3                        PL20 07D8                        PL12 07BE  
                      PL30 07E4                        PL22 03F7                        PL14 07C9  
                      PL40 0F71                        PL32 0FFA                        PL24 07DE  
                      PL16 03EE                        PL42 0403                        PL34 07EA  
                      PL26 0FF0                        PL18 07D0                        PL44 0408  
                      PL36 07EF                        PL28 0FF5                        PL38 03FE  
                      l961 0F69                        l995 020C                        l989 01D0  
                      l999 0252                        _RA5 0435                        _RA6 0436  
                      _RA7 0437                        _RB6 0036                        _RB7 0037  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0817  
                     S4751 0827                       S4749 0817         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 005B               ___ftdiv@sign 0060                       l1012 032D  
                     l1024 0370                       l1018 0350                       l1311 0742  
                     l1330 0475                       l3003 0778                       l1091 0FB9  
                     l1252 055C                       l1092 0FBC                       l1093 0FBF  
                     l1342 0494                       l1094 0FC6                       l3031 0528  
                     l1095 0FC9                       l1096 0FCC                       l1097 0FCF  
                     l1089 0FB2                       l3019 06A8                       l3035 052E  
                     l4003 01BA                       l1372 02DD                       l1293 06F8  
                     l3061 056A                       l4101 016E                       l1517 0167  
                     l4021 01F5                       l4013 01DA                       l3063 057A  
                     l4111 0180                       l4103 0173                       l4201 04F5  
                     l1529 018B                       l4105 017B                       l4025 0200  
                     l1571 00B0                       l4027 0208                       l4205 04FC  
                     l4221 051D                       l4109 0189                       l4037 0256  
                     l4301 02C6                       l4311 02D2                       l4303 02C8  
                     l4127 038D                       l4135 03A0                       l4231 0327  
                     l4065 03A5                       l4313 02D3                       l4233 032A  
                     l4049 040C                       l4307 02CE                       l4243 034A  
                     l4059 0E83                       l3541 0749                       l3701 0F2D  
                     l4245 034D                       l4237 032F                       l4431 061E  
                     l3551 0758                       l4175 04C1                       l4351 0F7E  
                     l4087 02F3                       l4255 036D                       l4343 03DC  
                     l4335 03D0                       l3481 06B4                       l4417 05F0  
                     l3393 0714                       l3721 0F49                       l3713 0F3B  
                     l3801 0EBF                       l4281 027E                       l4257 0373  
                     l4249 0352                       l4345 03DD                       l4337 03D1  
                     l4451 0652                       l3723 0F4B                       l4187 04C8  
                     l4099 016B                       l4507 00FF                       l4363 0F91  
                     l4355 0F82                       l4347 0F76                       l4611 006F  
                     l4461 0666                       l4437 0626                       l3557 076A  
                     l3717 0F42                       l3725 0F4D                       l3741 0F6C  
                     l4541 0146                       l4525 0122                       l4509 0104  
                     l4381 0FDE                       l4293 02B1                       l4277 0278  
                     l4621 0083                       l4455 065E                       l4463 066C  
                     l4535 012E                       l4367 0FA5                       l4359 0F89  
                     l4383 0FEA                       l2865 0682                       l2881 0585  
                     l4537 0138                       l4529 012A                       l4377 0FD2  
                     l4609 006E                       l4459 0662                       l4651 0484  
                     l4491 00C3                       l4619 0082                       l4661 048D  
                     l3693 0F21                       l4469 00A2                       l4629 008D  
                     l4399 0599                       l2879 0584                       l4583 0464  
                     l2993 076E                       l3689 0F1C                       l4659 0489  
                     l4667 0493                       l3699 0F2B                       l4675 0ECC  
                     l2999 076F                       l3799 0EBD                       l4599 005A  
                     l3987 01AE                       l3997 01B9                       l3989 01B0  
                     _ADON 04A8                       _CHS4 04B6                       _PIE1 000E  
                     _PIE2 0110                       u4415 05E1                       u4425 05F6  
                     u3705 0206                       u4185 02A2                       u4435 0602  
                     _RAIF 006B                       _INTF 0059                       u4375 0FA1  
                     _RBIE 005B                       _RBIF 0058                       u4465 063E  
                     u4545 00D1                       u4385 0FAF                       u3745 0247  
                     u3905 0393                       u4395 05A6                       u3765 025F  
                     u4575 0107                       u3695 01FB                       _PIR1 000D  
                     _PIR2 010F                       u3975 04F1                       u4897 01AA  
                     _TMR0 0081                       _WPUB 0008                       _main 0EC3  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       btemp 007E  
            ?_KeyStopClear 0070                       start 000B               _TurnKeyFlags 0725  
          __end_of_KeyIsIn 0688            __end_of_KeyHave 06AB               ___fttol@exp1 006D  
            ??_Init_System 0072               ___fttol@lval 0069            TurnKeyFlags@F83 0033  
          TurnKeyFlags@F84 0032                      ?_main 0070            __end_of___ftdiv 00F6  
          __end_of___fttol 014F                      _T2CON 0013                      _IOCB5 004D  
 __end_of_SystemEnterSleep 0524            __end_of___lwmod 03A5                      i1l973 0E9E  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 03B0                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 03B6            __end_of_chrgCtr 0EC3        ___lmul@multiplicand 0050  
      __end_of_KeyClearOne 069D                 _KeyClearIn 076E             fanCtr@fan_temp 005A  
            ___ftpack@sign 0076             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 041A                _ClearResSum 0584                 _KeyCounter 0036  
               _KeyOldData 0020            __end_of_pwmStop 0E8A             ??_KeyStopClear 0073  
                    status 0003                      wtemp0 007E            __end_of_workCtr 0094  
               _KeyUpShake 00BE            __initialization 000D               __end_of_main 0F03  
                   ??_main 0078              ___fttol@sign1 0068        __end_of_Init_System 0438  
                   _ADCON0 0095                     _ADCON1 0096                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 019D                     _GODONE 04A9  
                   i1l3895 0E9D                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 015F         __size_of_KeyServer 006E                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD3L 009C                     _PWMD4L 001B  
             ??_ADC_Sample 0073                     _PWMT4L 001C                     _TRISB5 002D  
                   _TRISB6 002E                  ??_KeyIsIn 0072                  ??_KeyHave 0074  
            ClearResSum@56 0072         __size_of_Isr_Timer 001B           __end_of_bujinCtr 0FF0  
__size_of_CheckKeyOldValue 0064                     ___lmul 02D9                     _b_kclr 03C2  
                   _b_kerr 03C1                     _fanCtr 026D                  ??___ftdiv 0058  
                ??___fttol 0065                  ??___lwmod 0076                  ??_fanInit 0072  
                ??_fanStop 0072                _KeyClearOne 0688                  ??_chrgCtr 0072  
                   _result 00C3              _Table_KeyFalg 0806              _Table_KeyDown 080E  
       __end_of_ADC_Sample 026D                     saved_w 007E     __size_of_CheckTouchKey 002D  
                ??_pwmInit 0072                  ??_pwmStop 0072                ?_KeyClearIn 0070  
                ??_workCtr 0077            _CheckOnceResult 0593           __end_of_wuhuaCtr 03DF  
  __end_of__initialization 001D         __size_of_WorkSleep 002F          CheckOnceResult@70 0052  
        CheckOnceResult@71 0056          CheckOnceResult@72 0053          CheckOnceResult@73 0050  
        CheckOnceResult@68 0058          CheckOnceResult@69 0055                 ___ftdiv@f1 0055  
               ___ftdiv@f2 0052                 ___ftdiv@f3 005C                 ___fttol@f1 0061  
           __pcstackCOMMON 0070                _Init_System 041A                 __end_ofPL2 079A  
               __end_ofPL4 07AC                 __end_ofPL6 03EE                 __end_ofPL8 07B3  
        __end_of_KeyServer 0F71                 ___lwtoft@c 004F       __end_of_KeyStopClear 0725  
        __end_of_Isr_Timer 0EA5         __size_of_keyLedCtr 0075                 __pbssBANK0 0020  
               __pbssBANK1 00A0               _chrgFullFlag 0042  __size_of_GetTouchKeyValue 0060  
             _chrgFullTime 0041              _CheckTouchKey 0467                 __pmaintext 0EC3  
                  ?___lmul 004C                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0467                  ?___lwtoft 004F          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0674                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 004C                    _B_OnOff 03C5  
                  _PWMD23H 009E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D                  ?_bujinCtr 0070  
     __end_of_Table_KeyCap 0814                 __stringtab 0800               ?_ClearResSum 0070  
                  _KeyData 0079                    _KeyFlag 0030                    _KeyIsIn 0674  
                  _KeyHave 069D             ?_CheckTouchKey 0070            ADC_Sample@adldo 0072  
          ADC_Sample@admax 0055            ADC_Sample@admin 0053            ADC_Sample@adsum 004F  
         _CheckKeyOldValue 06AB            __size_of___lmul 0033                    ___ftdiv 0094  
          __size_of_fanCtr 006C                    ___fttol 00F6                    ___lwmod 0381  
        __end_of_keyLedCtr 0381                    _b_kover 03C4                    _fanInit 03A5  
                  _fanDuty 0046                    _fanStop 03B0                 ??___ftpack 004C  
                  _chrgCtr 0EA5                    __ptext1 0020                    __ptext2 03B6  
                  __ptext3 0E83                    __ptext4 040C                    __ptext5 030C  
                  __ptext6 0381                    __ptext7 026D                    __ptext8 03B0  
                  __ptext9 03A5                 _lowBatLock 0040                 _lowBatTime 003F  
                ?_wuhuaCtr 0070                 ??___lwtoft 0077                    _count1s 0048  
               _lowFanTime 003E                    _pwmInit 040C                    _pwmStop 0E83  
  __size_of_CheckValidTime 0016                    clrloop0 07F5                    _workCtr 0020  
               ??_bujinCtr 0072       end_of_initialization 001D              _Refurbish_Sfr 077E  
             _KeyOldValue0 00B2               _KeyOldValue1 00AC               _KeyOldValue2 00A6  
    __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054         SystemEnterSleep@92 0052  
       SystemEnterSleep@93 0050         SystemEnterSleep@94 004E               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0072          CheckValidTime@F87 00C1  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 005F            ??_CheckTouchKey 0078               _KeyStopClear 070F  
         _GetTouchKeyValue 0524             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 030C             __end_of_fanCtr 02D9         __end_of_KeyClearIn 077E  
            WorkSleep@time 0037                  _KeyMaxSub 0035                  _KeyResSum 00B8  
              __end_ofPL10 07BE                __end_ofPL20 07DE                __end_ofPL12 07C9  
              __end_ofPL30 07EA                __end_ofPL22 03FE                __end_ofPL14 07D0  
              __end_ofPL40 0F76                __end_ofPL32 1000                __end_ofPL24 07E4  
              __end_ofPL16 03F7                __end_ofPL42 0408                __end_ofPL34 07EF  
              __end_ofPL26 0FF5                __end_ofPL18 07D8                __end_ofPL44 040C  
              __end_ofPL36 07F4                __end_ofPL28 0FFA                __end_ofPL38 0403  
      start_initialization 000D                  _KeyServer 0F03                  _Isr_Timer 0E8A  
             _maxMotorStep 0026          workCtr@power_temp 00C7       __size_of_ClearResSum 000F  
            ?_TurnKeyFlags 0070                   ??___lmul 0072                   ??_fanCtr 0077  
        ADC_Sample@ad_temp 0057               _Table_KeyCap 0811          __size_of___ftpack 003E  
              __pbssCOMMON 0079                _fanOverTime 0044                 ?_KeyServer 0070  
                ___latbits 0001          __size_of___lwtoft 0010              __pcstackBANK0 004C  
            __pcstackBANK1 00C7                  _WorkSleep 0438             _CheckValidTime 0758  
 __end_of_CheckKeyOldValue 070F                 ?_Isr_Timer 0070        KeyServer@KeyOldFlag 0038  
        __size_of_bujinCtr 007A                   ?_KeyIsIn 0070                   ?_KeyHave 0072  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075  
                __pnvBANK0 006E                  __pnvBANK1 00CB                   ?___ftdiv 0052  
                 ?___fttol 0061                   ?___lwmod 0072                   ?_fanInit 0070  
                _closeTime 003A                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 002C              _shanshuoTime3 002A                  __pstrings 0800  
                __pswtext1 0817                  __pswtext2 0827                  _bujinFlag 003D  
     __size_of_KeyClearOne 0015                  _keyLedCtr 030C                  _firstLock 006E  
   __end_of_CheckValidTime 076E                  _firstTime 00CB          __size_of_wuhuaCtr 0029  
               ?_WorkSleep 0070             ADC_Sample@adch 004D                   ?_pwmInit 0070  
                 ?_pwmStop 0070                   ?_workCtr 0070                ADC_Sample@i 004E  
              ADC_Sample@j 004C                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 07F4             KeyStopClear@53 0073  
                _motorStep 0028        CheckKeyOldValue@F77 0034                  _powerFlag 003C  
              __stringbase 0805       __size_of_Init_System 001E      __end_of_Table_KeyFalg 080E  
    __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0584  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004C  
                _wuhuaFlag 0047                ??_Isr_Timer 0070                   _MainTime 0049  
               _ADC_Sample 019D           __size_of_KeyIsIn 0014           __size_of_KeyHave 000E  
         _Table_KeyChannel 0814           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwmod 0024                   ___ftpack 015F           __size_of_fanInit 000B  
       __end_of__stringtab 0806           __size_of_fanStop 0006           __size_of_chrgCtr 001E  
                 ___lwtoft 014F                   _b_kover1 03C3                   _b_ksleep 03C0  
     __end_of_TurnKeyFlags 0758                   _fanValue 00C5                   _adresult 004A  
                 _chrgFlag 0043                ??_WorkSleep 0078                   __ptext10 02D9  
                 __ptext11 019D                   __ptext20 077E                   __ptext12 0F76  
                 __ptext21 0F03                   __ptext13 014F                   __ptext30 0593  
                 __ptext22 041A                   __ptext14 00F6                   __ptext31 069D  
                 __ptext23 0467                   __ptext15 0094                   __ptext32 0688  
                 __ptext24 0725                   __ptext16 015F                   __ptext33 06AB  
                 __ptext25 076E                   __ptext17 0EA5                   __ptext34 0674  
                 __ptext26 070F                   __ptext18 0438                   __ptext35 0E8A  
                 __ptext27 0524                   __ptext19 0494                   __ptext28 0584  
                 __ptext29 0758           __size_of_pwmInit 000E           __size_of_pwmStop 0007  
             _shanshuoTime 002E                   _bujinCtr 0F76                   _count10s 0045  
         __size_of_workCtr 0074                   _keyCount 0024   __size_of_CheckOnceResult 00E1  
       GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073  
            __size_of_main 0040                _longKeyFlag 003B           _SystemEnterSleep 0494  
         bujinCtr@tempStep 0074      __end_of_CheckTouchKey 0494         CheckKeyOldValue@80 004E  
       CheckKeyOldValue@78 0050         CheckKeyOldValue@79 004C                   _test_adc 0039  
                 _power_ad 0022                   _workStep 007B                   _wuhuaCtr 03B6  
              ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0072                  stringcode 0800                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0059                 _OPTION_REG 0001            ___lwmod@divisor 0072  
          ___lwmod@counter 0076                   stringdir 0800                   stringtab 0800  
            KeyClearOne@49 0072               KeyClearIn@51 0074      __end_of_Refurbish_Sfr 078C  
      __end_of_ClearResSum 0593          ??_CheckOnceResult 004C  
