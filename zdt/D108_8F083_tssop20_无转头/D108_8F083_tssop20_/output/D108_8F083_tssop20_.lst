

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Aug 30 14:41:52 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text12,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	swtext2,local,class=CONST,delta=2
    22                           	psect	text17,local,class=CODE,merge=1,delta=2
    23                           	psect	text21,local,class=CODE,merge=1,delta=2
    24                           	psect	text22,local,class=CODE,merge=1,delta=2
    25                           	psect	text35,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes0,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	strings
    66  0800                     __pstrings:	
    67  0800                     stringtab:	
    68  0800                     __stringtab:	
    69  0800                     stringcode:	
    70                           ;	String table - string pointers are 1 byte each
    71                           
    72  0800                     stringdir:	
    73  0800  3008               	movlw	high stringdir
    74  0801  008A               	movwf	10
    75  0802  0804               	movf	4,w
    76  0803  0A84               	incf	4,f
    77  0804  0782               	addwf	2,f
    78  0805                     __stringbase:	
    79  0805  3400               	retlw	0
    80  0806                     __end_of__stringtab:	
    81  0806                     _Table_KeyFalg:	
    82  0806  3401               	retlw	1
    83  0807  3402               	retlw	2
    84  0808  3404               	retlw	4
    85  0809  3408               	retlw	8
    86  080A  3410               	retlw	16
    87  080B  3420               	retlw	32
    88  080C  3440               	retlw	64
    89  080D  3480               	retlw	128
    90  080E                     __end_of_Table_KeyFalg:	
    91  080E                     _Table_KeyDown:	
    92  080E  340A               	retlw	10
    93  080F  340A               	retlw	10
    94  0810  340A               	retlw	10
    95  0811                     __end_of_Table_KeyDown:	
    96  0811                     _Table_KeyCap:	
    97  0811  3402               	retlw	2
    98  0812  3402               	retlw	2
    99  0813  3402               	retlw	2
   100  0814                     __end_of_Table_KeyCap:	
   101  0814                     _Table_KeyChannel:	
   102  0814  3444               	retlw	68
   103  0815  3443               	retlw	67
   104  0816  3442               	retlw	66
   105  0817                     __end_of_Table_KeyChannel:	
   106                           
   107                           	psect	nvBANK0
   108  006E                     __pnvBANK0:	
   109  006E                     _firstLock:	
   110  006E                     	ds	1
   111                           
   112                           	psect	nvBANK1
   113  00CD                     __pnvBANK1:	
   114  00CD                     _firstTime:	
   115  00CD                     	ds	1
   116  001D                     _PWMCON2	set	29
   117  001C                     _PWMT4L	set	28
   118  001B                     _PWMD4L	set	27
   119  0018                     _PWMTH	set	24
   120  0017                     _PWMTL	set	23
   121  0016                     _PWMCON1	set	22
   122  0015                     _PWMCON0	set	21
   123  0014                     _OSCCON	set	20
   124  0013                     _T2CON	set	19
   125  0011                     _PR2	set	17
   126  000E                     _PIE1	set	14
   127  000D                     _PIR1	set	13
   128  000B                     _INTCON	set	11
   129  0008                     _WPUB	set	8
   130  0006                     _PORTB	set	6
   131  0005                     _TRISB	set	5
   132  0001                     _OPTION_REG	set	1
   133  0069                     _TMR2IF	set	105
   134  006B                     _RAIF	set	107
   135  0058                     _RBIF	set	88
   136  0059                     _INTF	set	89
   137  005B                     _RBIE	set	91
   138  004D                     _IOCB5	set	77
   139  0036                     _RB6	set	54
   140  0037                     _RB7	set	55
   141  002D                     _TRISB5	set	45
   142  002E                     _TRISB6	set	46
   143  009E                     _PWMD23H	set	158
   144  009C                     _PWMD3L	set	156
   145  0099                     _ADRESH	set	153
   146  0098                     _ADRESL	set	152
   147  0096                     _ADCON1	set	150
   148  0095                     _ADCON0	set	149
   149  0086                     _PORTA	set	134
   150  0085                     _TRISA	set	133
   151  0081                     _TMR0	set	129
   152  04B2                     _LDO_EN	set	1202
   153  04B6                     _CHS4	set	1206
   154  04A8                     _ADON	set	1192
   155  04A9                     _GODONE	set	1193
   156  0435                     _RA5	set	1077
   157  0436                     _RA6	set	1078
   158  0437                     _RA7	set	1079
   159  0117                     _KEYDATAH	set	279
   160  0116                     _KEYDATAL	set	278
   161  0113                     _KEYCON2	set	275
   162  0112                     _KEYCON1	set	274
   163  0111                     _KEYCON0	set	273
   164  0110                     _PIE2	set	272
   165  010F                     _PIR2	set	271
   166  0106                     _PORTC	set	262
   167  0105                     _TRISC	set	261
   168                           
   169                           	psect	cinit
   170  000D                     start_initialization:	
   171                           ; #config settings
   172                           
   173  000D                     __initialization:	
   174  000D  3020               	movlw	low __pbssBANK0
   175                           
   176                           ; Clear objects allocated to BITCOMMON
   177  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   178                           
   179                           ; Clear objects allocated to COMMON
   180  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   181  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   182  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   183                           
   184                           ; Clear objects allocated to BANK0
   185  0012  1383               	bcf	3,7	;select IRP bank0
   186  0013  0084               	movwf	4
   187  0014  304C               	movlw	low (__pbssBANK0+44)
   188  0015  118A  27F3  118A   	fcall	clear_ram0
   189                           
   190                           ; Clear objects allocated to BANK1
   191  0018  30A0               	movlw	low __pbssBANK1
   192  0019  0084               	movwf	4
   193  001A  30C9               	movlw	low (__pbssBANK1+41)
   194  001B  118A  27F3         	fcall	clear_ram0
   195  001D                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198  001D                     __end_of__initialization:	
   199  001D  0183               	clrf	3
   200  001E  158A  2EC0         	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bitbssCOMMON
   203  03C0                     __pbitbssCOMMON:	
   204  03C0                     _b_ksleep:	
   205  03C0                     	ds	1
   206  03C1                     _b_kerr:	
   207  03C1                     	ds	1
   208  03C2                     _b_kclr:	
   209  03C2                     	ds	1
   210  03C3                     _b_kover1:	
   211  03C3                     	ds	1
   212  03C4                     _b_kover:	
   213  03C4                     	ds	1
   214  03C5                     _B_OnOff:	
   215  03C5                     	ds	1
   216  03C6                     _B_MainLoop:	
   217  03C6                     	ds	1
   218                           
   219                           	psect	bssCOMMON
   220  0079                     __pbssCOMMON:	
   221  0079                     _KeyData:	
   222  0079                     	ds	2
   223  007B                     _workStep:	
   224  007B                     	ds	1
   225                           
   226                           	psect	bssBANK0
   227  0020                     __pbssBANK0:	
   228  0020                     _KeyOldData:	
   229  0020                     	ds	2
   230  0022                     _power_ad:	
   231  0022                     	ds	2
   232  0024                     _keyCount:	
   233  0024                     	ds	2
   234  0026                     _maxMotorStep:	
   235  0026                     	ds	2
   236  0028                     _motorStep:	
   237  0028                     	ds	2
   238  002A                     _fanValue:	
   239  002A                     	ds	2
   240  002C                     _shanshuoTime3:	
   241  002C                     	ds	2
   242  002E                     _shanshuoTime2:	
   243  002E                     	ds	2
   244  0030                     _shanshuoTime:	
   245  0030                     	ds	2
   246  0032                     _KeyFlag:	
   247  0032                     	ds	2
   248  0034                     TurnKeyFlags@F84:	
   249  0034                     	ds	1
   250  0035                     TurnKeyFlags@F83:	
   251  0035                     	ds	1
   252  0036                     CheckKeyOldValue@F77:	
   253  0036                     	ds	1
   254  0037                     _KeyMaxSub:	
   255  0037                     	ds	1
   256  0038                     _KeyCounter:	
   257  0038                     	ds	1
   258  0039                     WorkSleep@time:	
   259  0039                     	ds	1
   260  003A                     KeyServer@KeyOldFlag:	
   261  003A                     	ds	1
   262  003B                     _test_adc:	
   263  003B                     	ds	1
   264  003C                     _closeTime:	
   265  003C                     	ds	1
   266  003D                     _longKeyFlag:	
   267  003D                     	ds	1
   268  003E                     _powerFlag:	
   269  003E                     	ds	1
   270  003F                     _bujinFlag:	
   271  003F                     	ds	1
   272  0040                     _lowBatLock:	
   273  0040                     	ds	1
   274  0041                     _chrgFullTime:	
   275  0041                     	ds	1
   276  0042                     _chrgFullFlag:	
   277  0042                     	ds	1
   278  0043                     _chrgFlag:	
   279  0043                     	ds	1
   280  0044                     _fanOverTime:	
   281  0044                     	ds	1
   282  0045                     _count10s:	
   283  0045                     	ds	1
   284  0046                     _fanDuty:	
   285  0046                     	ds	1
   286  0047                     _wuhuaFlag:	
   287  0047                     	ds	1
   288  0048                     _count1s:	
   289  0048                     	ds	1
   290  0049                     _MainTime:	
   291  0049                     	ds	1
   292  004A                     _adresult:	
   293  004A                     	ds	2
   294                           
   295                           	psect	bssBANK1
   296  00A0                     __pbssBANK1:	
   297  00A0                     _KeyReference:	
   298  00A0                     	ds	6
   299  00A6                     _KeyOldValue2:	
   300  00A6                     	ds	6
   301  00AC                     _KeyOldValue1:	
   302  00AC                     	ds	6
   303  00B2                     _KeyOldValue0:	
   304  00B2                     	ds	6
   305  00B8                     _KeyResSum:	
   306  00B8                     	ds	6
   307  00BE                     _KeyUpShake:	
   308  00BE                     	ds	3
   309  00C1                     CheckValidTime@F87:	
   310  00C1                     	ds	2
   311  00C3                     _result:	
   312  00C3                     	ds	2
   313  00C5                     _lowFanTime:	
   314  00C5                     	ds	2
   315  00C7                     _lowBatTime:	
   316  00C7                     	ds	2
   317                           
   318                           	psect	clrtext
   319  07F3                     clear_ram0:	
   320                           ;	Called with FSR containing the base address, and
   321                           ;	W with the last address+1
   322                           
   323  07F3  0064               	clrwdt	;clear the watchdog before getting into this loop
   324  07F4                     clrloop0:	
   325  07F4  0180               	clrf	0	;clear RAM location pointed to by FSR
   326  07F5  0A84               	incf	4,f	;increment pointer
   327  07F6  0604               	xorwf	4,w	;XOR with final address
   328  07F7  1903               	btfsc	3,2	;have we reached the end yet?
   329  07F8  3400               	retlw	0	;all done for this memory range, return
   330  07F9  0604               	xorwf	4,w	;XOR again to restore value
   331  07FA  2FF4               	goto	clrloop0	;do the next byte
   332                           
   333                           	psect	cstackBANK1
   334  00C9                     __pcstackBANK1:	
   335  00C9                     workCtr@power_temp:	
   336                           
   337                           ; 4 bytes @ 0x0
   338  00C9                     	ds	4
   339                           
   340                           	psect	cstackCOMMON
   341  0070                     __pcstackCOMMON:	
   342  0070                     ?_SystemEnterSleep:	
   343  0070                     ?_CheckTouchKey:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Init_System:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_Refurbish_Sfr:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_KeyServer:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_Isr_Timer:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ??_Isr_Timer:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_WorkSleep:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_chrgCtr:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_keyLedCtr:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_pwmInit:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_pwmStop:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_fanInit:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_fanStop:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_fanCtr:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_wuhuaCtr:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_bujinCtr:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_workCtr:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_main:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_KeyIsIn:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_KeyClearOne:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_KeyClearIn:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_KeyStopClear:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_ClearResSum:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_GetTouchKeyValue:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_CheckOnceResult:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_CheckKeyOldValue:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_TurnKeyFlags:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_CheckValidTime:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0070                     	ds	2
   430  0072                     ??_Init_System:	
   431  0072                     ??_Refurbish_Sfr:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     ??_KeyServer:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ?_ADC_Sample:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0072                     ??_chrgCtr:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0072                     ??_pwmInit:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0072                     ??_pwmStop:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ??_fanInit:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ??_fanStop:	
   453                           ; 1 bytes @ 0x2
   454                           
   455  0072                     ??_wuhuaCtr:	
   456                           ; 1 bytes @ 0x2
   457                           
   458  0072                     ??_bujinCtr:	
   459                           ; 1 bytes @ 0x2
   460                           
   461  0072                     ??_KeyIsIn:	
   462                           ; 1 bytes @ 0x2
   463                           
   464  0072                     ??_KeyClearOne:	
   465                           ; 1 bytes @ 0x2
   466                           
   467  0072                     ??_ClearResSum:	
   468                           ; 1 bytes @ 0x2
   469                           
   470  0072                     ?_KeyHave:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     ??_CheckValidTime:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     ??___lmul:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ?___lwmod:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ?___ftpack:	
   483                           ; 2 bytes @ 0x2
   484                           
   485  0072                     ADC_Sample@adldo:	
   486                           ; 3 bytes @ 0x2
   487                           
   488  0072                     KeyIsIn@46:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     KeyClearOne@49:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ClearResSum@56:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     KeyHave@59:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ___lwmod@divisor:	
   501                           ; 2 bytes @ 0x2
   502                           
   503  0072                     ___ftpack@arg:	
   504                           ; 2 bytes @ 0x2
   505                           
   506  0072                     ___lmul@product:	
   507                           ; 3 bytes @ 0x2
   508                           
   509                           
   510                           ; 4 bytes @ 0x2
   511  0072                     	ds	1
   512  0073                     ??_ADC_Sample:	
   513  0073                     ??_KeyStopClear:	
   514                           ; 1 bytes @ 0x3
   515                           
   516  0073                     ??_GetTouchKeyValue:	
   517                           ; 1 bytes @ 0x3
   518                           
   519  0073                     KeyIsIn@45:	
   520                           ; 1 bytes @ 0x3
   521                           
   522  0073                     KeyStopClear@53:	
   523                           ; 1 bytes @ 0x3
   524                           
   525  0073                     GetTouchKeyValue@64:	
   526                           ; 1 bytes @ 0x3
   527                           
   528                           
   529                           ; 2 bytes @ 0x3
   530  0073                     	ds	1
   531  0074                     ??_KeyClearIn:	
   532  0074                     ??_KeyHave:	
   533                           ; 1 bytes @ 0x4
   534                           
   535  0074                     ??_CheckKeyOldValue:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0074                     bujinCtr@tempStep:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0074                     KeyClearIn@51:	
   542                           ; 1 bytes @ 0x4
   543                           
   544  0074                     KeyHave@58:	
   545                           ; 1 bytes @ 0x4
   546                           
   547  0074                     ___lwmod@dividend:	
   548                           ; 1 bytes @ 0x4
   549                           
   550                           
   551                           ; 2 bytes @ 0x4
   552  0074                     	ds	1
   553  0075                     ??_TurnKeyFlags:	
   554  0075                     ___ftpack@exp:	
   555                           ; 1 bytes @ 0x5
   556                           
   557  0075                     GetTouchKeyValue@63:	
   558                           ; 1 bytes @ 0x5
   559                           
   560                           
   561                           ; 2 bytes @ 0x5
   562  0075                     	ds	1
   563  0076                     ??___lwmod:	
   564  0076                     ___ftpack@sign:	
   565                           ; 1 bytes @ 0x6
   566                           
   567  0076                     ___lwmod@counter:	
   568                           ; 1 bytes @ 0x6
   569                           
   570                           
   571                           ; 1 bytes @ 0x6
   572  0076                     	ds	1
   573  0077                     ??_keyLedCtr:	
   574  0077                     ??_fanCtr:	
   575                           ; 1 bytes @ 0x7
   576                           
   577  0077                     ??_workCtr:	
   578                           ; 1 bytes @ 0x7
   579                           
   580  0077                     ??___lwtoft:	
   581                           ; 1 bytes @ 0x7
   582                           
   583  0077                     GetTouchKeyValue@62:	
   584                           ; 1 bytes @ 0x7
   585                           
   586                           
   587                           ; 1 bytes @ 0x7
   588  0077                     	ds	1
   589  0078                     ??_CheckTouchKey:	
   590  0078                     ??_WorkSleep:	
   591                           ; 1 bytes @ 0x8
   592                           
   593  0078                     ??_main:	
   594                           ; 1 bytes @ 0x8
   595                           
   596                           
   597                           	psect	cstackBANK0
   598  004C                     __pcstackBANK0:	
   599                           ; 1 bytes @ 0x8
   600                           
   601  004C                     ??_SystemEnterSleep:	
   602  004C                     ??___ftpack:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  004C                     ??_CheckOnceResult:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  004C                     ?___lmul:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  004C                     ADC_Sample@j:	
   612                           ; 4 bytes @ 0x0
   613                           
   614  004C                     CheckKeyOldValue@79:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  004C                     ___lmul@multiplier:	
   618                           ; 2 bytes @ 0x0
   619                           
   620                           
   621                           ; 4 bytes @ 0x0
   622  004C                     	ds	1
   623  004D                     ADC_Sample@adch:	
   624                           
   625                           ; 1 bytes @ 0x1
   626  004D                     	ds	1
   627  004E                     ADC_Sample@i:	
   628  004E                     CheckKeyOldValue@80:	
   629                           ; 1 bytes @ 0x2
   630                           
   631  004E                     SystemEnterSleep@94:	
   632                           ; 2 bytes @ 0x2
   633                           
   634                           
   635                           ; 2 bytes @ 0x2
   636  004E                     	ds	1
   637  004F                     ?___lwtoft:	
   638  004F                     ___lwtoft@c:	
   639                           ; 3 bytes @ 0x3
   640                           
   641  004F                     ADC_Sample@adsum:	
   642                           ; 2 bytes @ 0x3
   643                           
   644                           
   645                           ; 4 bytes @ 0x3
   646  004F                     	ds	1
   647  0050                     CheckKeyOldValue@78:	
   648  0050                     CheckOnceResult@73:	
   649                           ; 1 bytes @ 0x4
   650                           
   651  0050                     SystemEnterSleep@93:	
   652                           ; 2 bytes @ 0x4
   653                           
   654  0050                     ___lmul@multiplicand:	
   655                           ; 2 bytes @ 0x4
   656                           
   657                           
   658                           ; 4 bytes @ 0x4
   659  0050                     	ds	2
   660  0052                     ?___ftdiv:	
   661  0052                     CheckOnceResult@70:	
   662                           ; 3 bytes @ 0x6
   663                           
   664  0052                     SystemEnterSleep@92:	
   665                           ; 1 bytes @ 0x6
   666                           
   667  0052                     ___ftdiv@f2:	
   668                           ; 2 bytes @ 0x6
   669                           
   670                           
   671                           ; 3 bytes @ 0x6
   672  0052                     	ds	1
   673  0053                     ADC_Sample@admin:	
   674  0053                     CheckOnceResult@72:	
   675                           ; 2 bytes @ 0x7
   676                           
   677                           
   678                           ; 2 bytes @ 0x7
   679  0053                     	ds	1
   680  0054                     SystemEnterSleep@91:	
   681                           
   682                           ; 1 bytes @ 0x8
   683  0054                     	ds	1
   684  0055                     CheckOnceResult@69:	
   685  0055                     ADC_Sample@admax:	
   686                           ; 1 bytes @ 0x9
   687                           
   688  0055                     ___ftdiv@f1:	
   689                           ; 2 bytes @ 0x9
   690                           
   691                           
   692                           ; 3 bytes @ 0x9
   693  0055                     	ds	1
   694  0056                     CheckOnceResult@71:	
   695                           
   696                           ; 2 bytes @ 0xA
   697  0056                     	ds	1
   698  0057                     ADC_Sample@ad_temp:	
   699                           
   700                           ; 2 bytes @ 0xB
   701  0057                     	ds	1
   702  0058                     ??___ftdiv:	
   703  0058                     CheckOnceResult@68:	
   704                           ; 1 bytes @ 0xC
   705                           
   706                           
   707                           ; 1 bytes @ 0xC
   708  0058                     	ds	1
   709  0059                     fanCtr@maxFanValue:	
   710                           
   711                           ; 1 bytes @ 0xD
   712  0059                     	ds	1
   713  005A                     fanCtr@fan_temp:	
   714                           
   715                           ; 4 bytes @ 0xE
   716  005A                     	ds	1
   717  005B                     ___ftdiv@cntr:	
   718                           
   719                           ; 1 bytes @ 0xF
   720  005B                     	ds	1
   721  005C                     ___ftdiv@f3:	
   722                           
   723                           ; 3 bytes @ 0x10
   724  005C                     	ds	3
   725  005F                     ___ftdiv@exp:	
   726                           
   727                           ; 1 bytes @ 0x13
   728  005F                     	ds	1
   729  0060                     ___ftdiv@sign:	
   730                           
   731                           ; 1 bytes @ 0x14
   732  0060                     	ds	1
   733  0061                     ?___fttol:	
   734  0061                     ___fttol@f1:	
   735                           ; 4 bytes @ 0x15
   736                           
   737                           
   738                           ; 3 bytes @ 0x15
   739  0061                     	ds	4
   740  0065                     ??___fttol:	
   741                           
   742                           ; 1 bytes @ 0x19
   743  0065                     	ds	3
   744  0068                     ___fttol@sign1:	
   745                           
   746                           ; 1 bytes @ 0x1C
   747  0068                     	ds	1
   748  0069                     ___fttol@lval:	
   749                           
   750                           ; 4 bytes @ 0x1D
   751  0069                     	ds	4
   752  006D                     ___fttol@exp1:	
   753                           
   754                           ; 1 bytes @ 0x21
   755  006D                     	ds	1
   756                           
   757                           	psect	maintext
   758  0EC0                     __pmaintext:	
   759 ;;
   760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   761 ;;
   762 ;; *************** function _main *****************
   763 ;; Defined at:
   764 ;;		line 781 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : B00/0
   775 ;;		On exit  : 200/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   778 ;;      Params:         0       0       0       0
   779 ;;      Locals:         0       0       0       0
   780 ;;      Temps:          0       0       0       0
   781 ;;      Totals:         0       0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels required when called:    6
   784 ;; This function calls:
   785 ;;		_CheckTouchKey
   786 ;;		_Init_System
   787 ;;		_KeyServer
   788 ;;		_Refurbish_Sfr
   789 ;;		_WorkSleep
   790 ;;		_chrgCtr
   791 ;;		_workCtr
   792 ;; This function is called by:
   793 ;;		Startup code after reset
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           
   798                           ;psect for function _main
   799  0EC0                     _main:	
   800                           
   801                           ;main.c: 783: Init_System();
   802                           
   803                           ;incstack = 0
   804                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   805  0EC0  118A  23FB  158A   	fcall	_Init_System
   806                           
   807                           ;main.c: 784: firstLock = 1;
   808  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
   809  0EC4  30C8               	movlw	200
   810  0EC5  01EE               	clrf	_firstLock
   811  0EC6  0AEE               	incf	_firstLock,f
   812                           
   813                           ;main.c: 785: firstTime = 200;
   814  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
   815  0EC8  00CD               	movwf	_firstTime^(0+128)
   816  0EC9                     l4681:	
   817                           
   818                           ;main.c: 787: {
   819                           ;main.c: 788: if(B_MainLoop)
   820  0EC9  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   821  0ECA  2EC9               	goto	l4681
   822                           
   823                           ;main.c: 789: {
   824                           ;main.c: 790: B_MainLoop = 0;
   825  0ECB  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   826  0ECC  0064               	clrwdt	;# 
   827                           
   828                           ;main.c: 793: CheckTouchKey();
   829  0ECD  118A  2448  158A   	fcall	_CheckTouchKey
   830                           
   831                           ;main.c: 794: chrgCtr();
   832  0ED0  118A  27D5  158A   	fcall	_chrgCtr
   833                           
   834                           ;main.c: 795: Refurbish_Sfr();
   835  0ED3  118A  275F  158A   	fcall	_Refurbish_Sfr
   836                           
   837                           ;main.c: 796: KeyServer();
   838  0ED6  158A  2700  158A   	fcall	_KeyServer
   839                           
   840                           ;main.c: 797: workCtr();
   841  0ED9  118A  2020  158A   	fcall	_workCtr
   842                           
   843                           ;main.c: 798: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && powerFlag == 0 && k
      +                          eyCount == 0 && wuhuaFlag == 0 && bujinFlag == 0 && shanshuoTime == 0 && shanshuoTime2 =
      +                          = 0)
   844  0EDC  1683               	bsf	3,5	;RP0=1, select bank1
   845  0EDD  084D               	movf	_firstTime^(0+128),w
   846  0EDE  1D03               	btfss	3,2
   847  0EDF  2EC9               	goto	l4681
   848  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
   849  0EE1  0843               	movf	_chrgFlag,w
   850  0EE2  1D03               	btfss	3,2
   851  0EE3  2EC9               	goto	l4681
   852  0EE4  087B               	movf	_workStep,w
   853  0EE5  1D03               	btfss	3,2
   854  0EE6  2EC9               	goto	l4681
   855  0EE7  083E               	movf	_powerFlag,w
   856  0EE8  1D03               	btfss	3,2
   857  0EE9  2EC9               	goto	l4681
   858  0EEA  0824               	movf	_keyCount,w
   859  0EEB  0425               	iorwf	_keyCount+1,w
   860  0EEC  1D03               	btfss	3,2
   861  0EED  2EC9               	goto	l4681
   862  0EEE  0847               	movf	_wuhuaFlag,w
   863  0EEF  1D03               	btfss	3,2
   864  0EF0  2EC9               	goto	l4681
   865  0EF1  083F               	movf	_bujinFlag,w
   866  0EF2  1D03               	btfss	3,2
   867  0EF3  2EC9               	goto	l4681
   868  0EF4  0830               	movf	_shanshuoTime,w
   869  0EF5  0431               	iorwf	_shanshuoTime+1,w
   870  0EF6  1D03               	btfss	3,2
   871  0EF7  2EC9               	goto	l4681
   872  0EF8  082E               	movf	_shanshuoTime2,w
   873  0EF9  042F               	iorwf	_shanshuoTime2+1,w
   874  0EFA  1D03               	btfss	3,2
   875  0EFB  2EC9               	goto	l4681
   876                           
   877                           ;main.c: 799: {
   878                           ;main.c: 800: WorkSleep();
   879  0EFC  118A  2419  158A   	fcall	_WorkSleep
   880  0EFF  2EC9               	goto	l4681
   881  0F00                     __end_of_main:	
   882                           
   883                           	psect	text1
   884  0020                     __ptext1:	
   885 ;; *************** function _workCtr *****************
   886 ;; Defined at:
   887 ;;		line 725 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 300/0
   898 ;;		On exit  : 200/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   901 ;;      Params:         0       0       0       0
   902 ;;      Locals:         0       0       4       0
   903 ;;      Temps:          0       0       0       0
   904 ;;      Totals:         0       0       4       0
   905 ;;Total ram usage:        4 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:    3
   908 ;; This function calls:
   909 ;;		_ADC_Sample
   910 ;;		___ftdiv
   911 ;;		___fttol
   912 ;;		___lwtoft
   913 ;;		_bujinCtr
   914 ;;		_fanCtr
   915 ;;		_keyLedCtr
   916 ;;		_wuhuaCtr
   917 ;; This function is called by:
   918 ;;		_main
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _workCtr
   924  0020                     _workCtr:	
   925                           
   926                           ;incstack = 0
   927                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   928  0020  301F               	movlw	31
   929                           
   930                           ;main.c: 727: test_adc = ADC_Sample(31, 0);
   931  0021  01F2               	clrf	ADC_Sample@adldo
   932  0022  21B2  118A         	fcall	_ADC_Sample
   933  0024  00BB               	movwf	_test_adc	;volatile
   934                           
   935                           ;main.c: 728: if (0xA5 == test_adc)
   936  0025  30A5               	movlw	165
   937  0026  063B               	xorwf	_test_adc,w	;volatile
   938  0027  1D03               	btfss	3,2
   939  0028  285A               	goto	l4605
   940                           
   941                           ;main.c: 729: {
   942                           ;main.c: 730: volatile unsigned long power_temp;
   943                           ;main.c: 732: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   944  0029  3096               	movlw	150
   945  002A  01D5               	clrf	___ftdiv@f1
   946  002B  00D6               	movwf	___ftdiv@f1+1
   947  002C  304A               	movlw	74
   948  002D  00D7               	movwf	___ftdiv@f1+2
   949  002E  084B               	movf	_adresult+1,w	;volatile
   950  002F  00D0               	movwf	___lwtoft@c+1
   951  0030  084A               	movf	_adresult,w	;volatile
   952  0031  00CF               	movwf	___lwtoft@c
   953  0032  2164  118A         	fcall	___lwtoft
   954  0034  084F               	movf	?___lwtoft,w
   955  0035  00D2               	movwf	___ftdiv@f2
   956  0036  0850               	movf	?___lwtoft+1,w
   957  0037  00D3               	movwf	___ftdiv@f2+1
   958  0038  0851               	movf	?___lwtoft+2,w
   959  0039  00D4               	movwf	___ftdiv@f2+2
   960  003A  20A9  118A         	fcall	___ftdiv
   961  003C  0852               	movf	?___ftdiv,w
   962  003D  00E1               	movwf	___fttol@f1
   963  003E  0853               	movf	?___ftdiv+1,w
   964  003F  00E2               	movwf	___fttol@f1+1
   965  0040  0854               	movf	?___ftdiv+2,w
   966  0041  00E3               	movwf	___fttol@f1+2
   967  0042  210B  118A         	fcall	___fttol
   968  0044  0864               	movf	?___fttol+3,w
   969  0045  1683               	bsf	3,5	;RP0=1, select bank1
   970  0046  00CC               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
   971  0047  1283               	bcf	3,5	;RP0=0, select bank0
   972  0048  0863               	movf	?___fttol+2,w
   973  0049  1683               	bsf	3,5	;RP0=1, select bank1
   974  004A  00CB               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
   975  004B  1283               	bcf	3,5	;RP0=0, select bank0
   976  004C  0862               	movf	?___fttol+1,w
   977  004D  1683               	bsf	3,5	;RP0=1, select bank1
   978  004E  00CA               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
   979  004F  1283               	bcf	3,5	;RP0=0, select bank0
   980  0050  0861               	movf	?___fttol,w
   981  0051  1683               	bsf	3,5	;RP0=1, select bank1
   982  0052  00C9               	movwf	workCtr@power_temp^(0+128)	;volatile
   983                           
   984                           ;main.c: 733: power_ad = (unsigned int)(power_temp);
   985  0053  084A               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
   986  0054  1283               	bcf	3,5	;RP0=0, select bank0
   987  0055  00A3               	movwf	_power_ad+1	;volatile
   988  0056  1683               	bsf	3,5	;RP0=1, select bank1
   989  0057  0849               	movf	workCtr@power_temp^(0+128),w	;volatile
   990  0058  1283               	bcf	3,5	;RP0=0, select bank0
   991  0059  00A2               	movwf	_power_ad	;volatile
   992  005A                     l4605:	
   993                           
   994                           ;main.c: 734: }
   995                           ;main.c: 735: if(workStep == 2 && power_ad < 3300)
   996  005A  3002               	movlw	2
   997  005B  067B               	xorwf	_workStep,w
   998  005C  1D03               	btfss	3,2
   999  005D  2875               	goto	l4615
  1000  005E  300C               	movlw	12
  1001  005F  0223               	subwf	_power_ad+1,w	;volatile
  1002  0060  30E4               	movlw	228
  1003  0061  1903               	skipnz
  1004  0062  0222               	subwf	_power_ad,w	;volatile
  1005  0063  1803               	skipnc
  1006  0064  2875               	goto	l4615
  1007                           
  1008                           ;main.c: 736: {
  1009                           ;main.c: 737: if(++lowFanTime > 2000)
  1010  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1011  0066  0AC5               	incf	_lowFanTime^(0+128),f
  1012  0067  1903               	skipnz
  1013  0068  0AC6               	incf	(_lowFanTime+1)^(0+128),f
  1014  0069  3007               	movlw	7
  1015  006A  0246               	subwf	(_lowFanTime+1)^(0+128),w
  1016  006B  30D1               	movlw	209
  1017  006C  1903               	skipnz
  1018  006D  0245               	subwf	_lowFanTime^(0+128),w
  1019  006E  1C03               	skipc
  1020  006F  2878               	goto	l4617
  1021                           
  1022                           ;main.c: 738: {
  1023                           ;main.c: 739: lowFanTime = 0;
  1024  0070  01C5               	clrf	_lowFanTime^(0+128)
  1025  0071  01C6               	clrf	(_lowFanTime+1)^(0+128)
  1026                           
  1027                           ;main.c: 740: workStep = 1;
  1028  0072  01FB               	clrf	_workStep
  1029  0073  0AFB               	incf	_workStep,f
  1030  0074  2878               	goto	l4617
  1031  0075                     l4615:	
  1032                           
  1033                           ;main.c: 743: else
  1034                           ;main.c: 744: {
  1035                           ;main.c: 745: lowFanTime = 0;
  1036  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1037  0076  01C5               	clrf	_lowFanTime^(0+128)
  1038  0077  01C6               	clrf	(_lowFanTime+1)^(0+128)
  1039  0078                     l4617:	
  1040                           
  1041                           ;main.c: 746: }
  1042                           ;main.c: 747: if(power_ad < 2900)
  1043  0078  300B               	movlw	11
  1044  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1045  007A  0223               	subwf	_power_ad+1,w	;volatile
  1046  007B  3054               	movlw	84
  1047  007C  1903               	skipnz
  1048  007D  0222               	subwf	_power_ad,w	;volatile
  1049  007E  1803               	skipnc
  1050  007F  2894               	goto	l4625
  1051                           
  1052                           ;main.c: 748: {
  1053                           ;main.c: 749: if(++lowBatTime > 1000)
  1054  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1055  0081  0AC7               	incf	_lowBatTime^(0+128),f
  1056  0082  1903               	skipnz
  1057  0083  0AC8               	incf	(_lowBatTime+1)^(0+128),f
  1058  0084  3003               	movlw	3
  1059  0085  0248               	subwf	(_lowBatTime+1)^(0+128),w
  1060  0086  30E9               	movlw	233
  1061  0087  1903               	skipnz
  1062  0088  0247               	subwf	_lowBatTime^(0+128),w
  1063  0089  1C03               	skipc
  1064  008A  2897               	goto	l4627
  1065                           
  1066                           ;main.c: 750: {
  1067                           ;main.c: 751: lowBatTime = 0;
  1068  008B  01C7               	clrf	_lowBatTime^(0+128)
  1069  008C  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1070                           
  1071                           ;main.c: 752: lowBatLock = 1;
  1072  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1073  008E  01C0               	clrf	_lowBatLock
  1074  008F  0AC0               	incf	_lowBatLock,f
  1075                           
  1076                           ;main.c: 753: workStep = 0;
  1077  0090  01FB               	clrf	_workStep
  1078                           
  1079                           ;main.c: 754: wuhuaFlag = 0;
  1080  0091  01C7               	clrf	_wuhuaFlag
  1081                           
  1082                           ;main.c: 755: bujinFlag = 0;
  1083  0092  01BF               	clrf	_bujinFlag
  1084  0093  2897               	goto	l4627
  1085  0094                     l4625:	
  1086                           
  1087                           ;main.c: 758: else
  1088                           ;main.c: 759: {
  1089                           ;main.c: 760: lowBatTime = 0;
  1090  0094  1683               	bsf	3,5	;RP0=1, select bank1
  1091  0095  01C7               	clrf	_lowBatTime^(0+128)
  1092  0096  01C8               	clrf	(_lowBatTime+1)^(0+128)
  1093  0097                     l4627:	
  1094                           
  1095                           ;main.c: 761: }
  1096                           ;main.c: 762: if(firstTime > 0)
  1097  0097  1683               	bsf	3,5	;RP0=1, select bank1
  1098  0098  084D               	movf	_firstTime^(0+128),w
  1099  0099  1903               	btfsc	3,2
  1100  009A  28A1               	goto	l4635
  1101                           
  1102                           ;main.c: 763: {
  1103                           ;main.c: 764: firstTime--;
  1104  009B  03CD               	decf	_firstTime^(0+128),f
  1105                           
  1106                           ;main.c: 765: PORTB = 0x00;
  1107  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1108  009D  0186               	clrf	6	;volatile
  1109                           
  1110                           ;main.c: 766: PORTA = 0x00;
  1111  009E  1683               	bsf	3,5	;RP0=1, select bank1
  1112  009F  0186               	clrf	6	;volatile
  1113                           
  1114                           ;main.c: 767: }
  1115  00A0  0008               	return
  1116  00A1                     l4635:	
  1117                           
  1118                           ;main.c: 768: else
  1119                           ;main.c: 769: {
  1120                           ;main.c: 770: keyLedCtr();
  1121  00A1  2324  118A         	fcall	_keyLedCtr
  1122                           
  1123                           ;main.c: 771: fanCtr();
  1124  00A3  2282               	fcall	_fanCtr
  1125                           
  1126                           ;main.c: 772: wuhuaCtr();
  1127  00A4  158A  2683  118A   	fcall	_wuhuaCtr
  1128                           
  1129                           ;main.c: 773: bujinCtr();
  1130  00A7  158A  2F75         	ljmp	l4353
  1131  00A9                     __end_of_workCtr:	
  1132  00A9                     __ptext15:	
  1133 ;; *************** function ___ftdiv *****************
  1134 ;; Defined at:
  1135 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  f2              3    6[BANK0 ] float 
  1138 ;;  f1              3    9[BANK0 ] float 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  f3              3   16[BANK0 ] float 
  1141 ;;  sign            1   20[BANK0 ] unsigned char 
  1142 ;;  exp             1   19[BANK0 ] unsigned char 
  1143 ;;  cntr            1   15[BANK0 ] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  3    6[BANK0 ] float 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0, pclath, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 300/0
  1150 ;;		On exit  : 300/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1153 ;;      Params:         0       6       0       0
  1154 ;;      Locals:         0       6       0       0
  1155 ;;      Temps:          0       3       0       0
  1156 ;;      Totals:         0      15       0       0
  1157 ;;Total ram usage:       15 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    2
  1160 ;; This function calls:
  1161 ;;		___ftpack
  1162 ;; This function is called by:
  1163 ;;		_workCtr
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           
  1168                           ;psect for function ___ftdiv
  1169  00A9                     ___ftdiv:	
  1170                           
  1171                           ;incstack = 0
  1172                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1173  00A9  0855               	movf	___ftdiv@f1,w
  1174  00AA  00D8               	movwf	??___ftdiv
  1175  00AB  0856               	movf	___ftdiv@f1+1,w
  1176  00AC  00D9               	movwf	??___ftdiv+1
  1177  00AD  0857               	movf	___ftdiv@f1+2,w
  1178  00AE  00DA               	movwf	??___ftdiv+2
  1179  00AF  1003               	clrc
  1180  00B0  0D59               	rlf	??___ftdiv+1,w
  1181  00B1  0D5A               	rlf	??___ftdiv+2,w
  1182  00B2  00DF               	movwf	___ftdiv@exp
  1183  00B3  085F               	movf	___ftdiv@exp,w
  1184  00B4  1D03               	btfss	3,2
  1185  00B5  28B7               	goto	l4475
  1186  00B6  2BED               	ljmp	PL34	;call to abstracted procedure
  1187  00B7                     l4475:	
  1188  00B7  0852               	movf	___ftdiv@f2,w
  1189  00B8  00D8               	movwf	??___ftdiv
  1190  00B9  0853               	movf	___ftdiv@f2+1,w
  1191  00BA  00D9               	movwf	??___ftdiv+1
  1192  00BB  0854               	movf	___ftdiv@f2+2,w
  1193  00BC  00DA               	movwf	??___ftdiv+2
  1194  00BD  1003               	clrc
  1195  00BE  0D59               	rlf	??___ftdiv+1,w
  1196  00BF  0D5A               	rlf	??___ftdiv+2,w
  1197  00C0  00E0               	movwf	___ftdiv@sign
  1198  00C1  0860               	movf	___ftdiv@sign,w
  1199  00C2  1D03               	btfss	3,2
  1200  00C3  28C5               	goto	l1571
  1201  00C4  2BED               	ljmp	PL34	;call to abstracted procedure
  1202  00C5                     l1571:	
  1203  00C5  3089               	movlw	137
  1204  00C6  01DC               	clrf	___ftdiv@f3
  1205  00C7  01DD               	clrf	___ftdiv@f3+1
  1206  00C8  01DE               	clrf	___ftdiv@f3+2
  1207  00C9  0760               	addwf	___ftdiv@sign,w
  1208  00CA  00D8               	movwf	??___ftdiv
  1209  00CB  02DF               	subwf	___ftdiv@exp,f
  1210  00CC  0857               	movf	___ftdiv@f1+2,w
  1211  00CD  00E0               	movwf	___ftdiv@sign
  1212  00CE  0854               	movf	___ftdiv@f2+2,w
  1213  00CF  06E0               	xorwf	___ftdiv@sign,f
  1214  00D0  3080               	movlw	128
  1215  00D1  05E0               	andwf	___ftdiv@sign,f
  1216  00D2  3018               	movlw	24
  1217  00D3  17D6               	bsf	___ftdiv@f1+1,7
  1218  00D4  01D7               	clrf	___ftdiv@f1+2
  1219  00D5  17D3               	bsf	___ftdiv@f2+1,7
  1220  00D6  01D4               	clrf	___ftdiv@f2+2
  1221  00D7  00DB               	movwf	___ftdiv@cntr
  1222  00D8                     l4497:	
  1223  00D8  1003               	clrc
  1224  00D9  0DDC               	rlf	___ftdiv@f3,f
  1225  00DA  0DDD               	rlf	___ftdiv@f3+1,f
  1226  00DB  0DDE               	rlf	___ftdiv@f3+2,f
  1227  00DC  0854               	movf	___ftdiv@f2+2,w
  1228  00DD  0257               	subwf	___ftdiv@f1+2,w
  1229  00DE  1D03               	skipz
  1230  00DF  28E6               	goto	u4575
  1231  00E0  0853               	movf	___ftdiv@f2+1,w
  1232  00E1  0256               	subwf	___ftdiv@f1+1,w
  1233  00E2  1D03               	skipz
  1234  00E3  28E6               	goto	u4575
  1235  00E4  0852               	movf	___ftdiv@f2,w
  1236  00E5  0255               	subwf	___ftdiv@f1,w
  1237  00E6                     u4575:	
  1238  00E6  1C03               	skipc
  1239  00E7  28F4               	goto	L6
  1240  00E8  0852               	movf	___ftdiv@f2,w
  1241  00E9  02D5               	subwf	___ftdiv@f1,f
  1242  00EA  0853               	movf	___ftdiv@f2+1,w
  1243  00EB  1C03               	skipc
  1244  00EC  0F53               	incfsz	___ftdiv@f2+1,w
  1245  00ED  02D6               	subwf	___ftdiv@f1+1,f
  1246  00EE  0854               	movf	___ftdiv@f2+2,w
  1247  00EF  1C03               	skipc
  1248  00F0  0A54               	incf	___ftdiv@f2+2,w
  1249  00F1  02D7               	subwf	___ftdiv@f1+2,f
  1250  00F2  145C               	bsf	___ftdiv@f3,0
  1251  00F3  1003               	clrc
  1252  00F4                     L6:	
  1253  00F4  0DD5               	rlf	___ftdiv@f1,f
  1254  00F5  0DD6               	rlf	___ftdiv@f1+1,f
  1255  00F6  0DD7               	rlf	___ftdiv@f1+2,f
  1256  00F7  0BDB               	decfsz	___ftdiv@cntr,f
  1257  00F8  28D8               	goto	l4497
  1258  00F9  085C               	movf	___ftdiv@f3,w
  1259  00FA  00F2               	movwf	___ftpack@arg
  1260  00FB  085D               	movf	___ftdiv@f3+1,w
  1261  00FC  00F3               	movwf	___ftpack@arg+1
  1262  00FD  085E               	movf	___ftdiv@f3+2,w
  1263  00FE  00F4               	movwf	___ftpack@arg+2
  1264  00FF  085F               	movf	___ftdiv@exp,w
  1265  0100  00F5               	movwf	___ftpack@exp
  1266  0101  0860               	movf	___ftdiv@sign,w
  1267  0102  00F6               	movwf	___ftpack@sign
  1268  0103  2174               	fcall	___ftpack
  1269  0104  0872               	movf	?___ftpack,w
  1270  0105  00D2               	movwf	?___ftdiv
  1271  0106  0873               	movf	?___ftpack+1,w
  1272  0107  00D3               	movwf	?___ftdiv+1
  1273  0108  0874               	movf	?___ftpack+2,w
  1274  0109  00D4               	movwf	?___ftdiv+2
  1275  010A  0008               	return
  1276  010B                     __end_of___ftdiv:	
  1277  010B                     __ptext14:	
  1278 ;; *************** function ___fttol *****************
  1279 ;; Defined at:
  1280 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  f1              3   21[BANK0 ] float 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  lval            4   29[BANK0 ] unsigned long 
  1285 ;;  exp1            1   33[BANK0 ] unsigned char 
  1286 ;;  sign1           1   28[BANK0 ] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  4   21[BANK0 ] long 
  1289 ;; Registers used:
  1290 ;;		wreg, status,2, status,0
  1291 ;; Tracked objects:
  1292 ;;		On entry : 300/0
  1293 ;;		On exit  : 300/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1296 ;;      Params:         0       4       0       0
  1297 ;;      Locals:         0       6       0       0
  1298 ;;      Temps:          0       3       0       0
  1299 ;;      Totals:         0      13       0       0
  1300 ;;Total ram usage:       13 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    1
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_workCtr
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           
  1311                           ;psect for function ___fttol
  1312  010B                     ___fttol:	
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1316  010B  23E6  118A         	fcall	PL24	;call to abstracted procedure
  1317  010D  1003               	clrc
  1318  010E  0D66               	rlf	??___fttol+1,w
  1319  010F  0D67               	rlf	??___fttol+2,w
  1320  0110  00ED               	movwf	___fttol@exp1
  1321  0111  086D               	movf	___fttol@exp1,w
  1322  0112  1D03               	btfss	3,2
  1323  0113  2919               	goto	l4515
  1324  0114                     l4513:	
  1325  0114  01E1               	clrf	?___fttol
  1326  0115  01E2               	clrf	?___fttol+1
  1327  0116  01E3               	clrf	?___fttol+2
  1328  0117  01E4               	clrf	?___fttol+3
  1329  0118  0008               	return
  1330  0119                     l4515:	
  1331  0119  23E6  118A         	fcall	PL24	;call to abstracted procedure
  1332  011B  3017               	movlw	23
  1333  011C                     u4605:	
  1334  011C  1003               	clrc
  1335  011D  0CE7               	rrf	??___fttol+2,f
  1336  011E  0CE6               	rrf	??___fttol+1,f
  1337  011F  0CE5               	rrf	??___fttol,f
  1338  0120  3EFF               	addlw	-1
  1339  0121  1D03               	skipz
  1340  0122  291C               	goto	u4605
  1341  0123  0865               	movf	??___fttol,w
  1342  0124  00E8               	movwf	___fttol@sign1
  1343  0125  17E2               	bsf	___fttol@f1+1,7
  1344  0126  01E3               	clrf	___fttol@f1+2
  1345  0127  0861               	movf	___fttol@f1,w
  1346  0128  00E9               	movwf	___fttol@lval
  1347  0129  0862               	movf	___fttol@f1+1,w
  1348  012A  00EA               	movwf	___fttol@lval+1
  1349  012B  0863               	movf	___fttol@f1+2,w
  1350  012C  00EB               	movwf	___fttol@lval+2
  1351  012D  308E               	movlw	142
  1352  012E  01EC               	clrf	___fttol@lval+3
  1353  012F  02ED               	subwf	___fttol@exp1,f
  1354  0130  1FED               	btfss	___fttol@exp1,7
  1355  0131  293F               	goto	l4535
  1356  0132  086D               	movf	___fttol@exp1,w
  1357  0133  3A80               	xorlw	128
  1358  0134  3E8F               	addlw	143
  1359  0135  1C03               	btfss	3,0
  1360  0136  2914               	goto	l4513
  1361  0137                     l4531:	
  1362  0137  1003               	clrc
  1363  0138  0CEC               	rrf	___fttol@lval+3,f
  1364  0139  0CEB               	rrf	___fttol@lval+2,f
  1365  013A  0CEA               	rrf	___fttol@lval+1,f
  1366  013B  0CE9               	rrf	___fttol@lval,f
  1367  013C  0FED               	incfsz	___fttol@exp1,f
  1368  013D  2937               	goto	l4531
  1369  013E  294D               	goto	l4543
  1370  013F                     l4535:	
  1371  013F  3018               	movlw	24
  1372  0140  026D               	subwf	___fttol@exp1,w
  1373  0141  1803               	btfsc	3,0
  1374  0142  2914               	goto	l4513
  1375  0143                     l4541:	
  1376  0143  086D               	movf	___fttol@exp1,w
  1377  0144  1903               	btfsc	3,2
  1378  0145  294D               	goto	l4543
  1379  0146  1003               	clrc
  1380  0147  0DE9               	rlf	___fttol@lval,f
  1381  0148  0DEA               	rlf	___fttol@lval+1,f
  1382  0149  0DEB               	rlf	___fttol@lval+2,f
  1383  014A  0DEC               	rlf	___fttol@lval+3,f
  1384  014B  03ED               	decf	___fttol@exp1,f
  1385  014C  2943               	goto	l4541
  1386  014D                     l4543:	
  1387  014D  0868               	movf	___fttol@sign1,w
  1388  014E  1903               	btfsc	3,2
  1389  014F  295B               	goto	l4547
  1390  0150  09E9               	comf	___fttol@lval,f
  1391  0151  09EA               	comf	___fttol@lval+1,f
  1392  0152  09EB               	comf	___fttol@lval+2,f
  1393  0153  09EC               	comf	___fttol@lval+3,f
  1394  0154  0AE9               	incf	___fttol@lval,f
  1395  0155  1903               	skipnz
  1396  0156  0AEA               	incf	___fttol@lval+1,f
  1397  0157  1903               	skipnz
  1398  0158  0AEB               	incf	___fttol@lval+2,f
  1399  0159  1903               	skipnz
  1400  015A  0AEC               	incf	___fttol@lval+3,f
  1401  015B                     l4547:	
  1402  015B  086C               	movf	___fttol@lval+3,w
  1403  015C  00E4               	movwf	?___fttol+3
  1404  015D  086B               	movf	___fttol@lval+2,w
  1405  015E  00E3               	movwf	?___fttol+2
  1406  015F  086A               	movf	___fttol@lval+1,w
  1407  0160  00E2               	movwf	?___fttol+1
  1408  0161  0869               	movf	___fttol@lval,w
  1409  0162  00E1               	movwf	?___fttol
  1410  0163  0008               	return
  1411  0164                     __end_of___fttol:	
  1412  0164                     __ptext13:	
  1413 ;; *************** function ___lwtoft *****************
  1414 ;; Defined at:
  1415 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  c               2    3[BANK0 ] unsigned int 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  3    3[BANK0 ] float 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0, pclath, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 300/0
  1426 ;;		On exit  : 300/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1429 ;;      Params:         0       3       0       0
  1430 ;;      Locals:         0       0       0       0
  1431 ;;      Temps:          0       0       0       0
  1432 ;;      Totals:         0       3       0       0
  1433 ;;Total ram usage:        3 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    2
  1436 ;; This function calls:
  1437 ;;		___ftpack
  1438 ;; This function is called by:
  1439 ;;		_workCtr
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function ___lwtoft
  1445  0164                     ___lwtoft:	
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1449  0164  084F               	movf	___lwtoft@c,w
  1450  0165  00F2               	movwf	___ftpack@arg
  1451  0166  0850               	movf	___lwtoft@c+1,w
  1452  0167  00F3               	movwf	___ftpack@arg+1
  1453  0168  308E               	movlw	142
  1454  0169  01F4               	clrf	___ftpack@arg+2
  1455  016A  00F5               	movwf	___ftpack@exp
  1456  016B  01F6               	clrf	___ftpack@sign
  1457  016C  2174               	fcall	___ftpack
  1458  016D  0872               	movf	?___ftpack,w
  1459  016E  00CF               	movwf	?___lwtoft
  1460  016F  0873               	movf	?___ftpack+1,w
  1461  0170  00D0               	movwf	?___lwtoft+1
  1462  0171  0874               	movf	?___ftpack+2,w
  1463  0172  00D1               	movwf	?___lwtoft+2
  1464  0173  0008               	return
  1465  0174                     __end_of___lwtoft:	
  1466  0174                     __ptext16:	
  1467 ;; *************** function ___ftpack *****************
  1468 ;; Defined at:
  1469 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  arg             3    2[COMMON] unsigned um
  1472 ;;  exp             1    5[COMMON] unsigned char 
  1473 ;;  sign            1    6[COMMON] unsigned char 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  3    2[COMMON] float 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 300/0
  1482 ;;		On exit  : 300/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1485 ;;      Params:         5       0       0       0
  1486 ;;      Locals:         0       0       0       0
  1487 ;;      Temps:          0       3       0       0
  1488 ;;      Totals:         5       3       0       0
  1489 ;;Total ram usage:        8 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    1
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		___ftdiv
  1496 ;;		___lwtoft
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           
  1501                           ;psect for function ___ftpack
  1502  0174                     ___ftpack:	
  1503                           
  1504                           ;incstack = 0
  1505                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1506  0174  0875               	movf	___ftpack@exp,w
  1507  0175  1903               	btfsc	3,2
  1508  0176  297C               	goto	l1517
  1509  0177  0874               	movf	___ftpack@arg+2,w
  1510  0178  0473               	iorwf	___ftpack@arg+1,w
  1511  0179  0472               	iorwf	___ftpack@arg,w
  1512  017A  1D03               	skipz
  1513  017B  2983               	goto	l4105
  1514  017C                     l1517:	
  1515  017C  01F2               	clrf	?___ftpack
  1516  017D  01F3               	clrf	?___ftpack+1
  1517  017E  01F4               	clrf	?___ftpack+2
  1518  017F  0008               	return
  1519  0180                     l4103:	
  1520  0180  0AF5               	incf	___ftpack@exp,f
  1521  0181  23F1  118A         	fcall	PL40	;call to abstracted procedure
  1522  0183                     l4105:	
  1523  0183  30FE               	movlw	254
  1524  0184  0574               	andwf	___ftpack@arg+2,w
  1525  0185  1903               	btfsc	3,2
  1526  0186  2990               	goto	l4109
  1527  0187  2980               	goto	l4103
  1528  0188                     l4107:	
  1529  0188  0AF5               	incf	___ftpack@exp,f
  1530  0189  0AF2               	incf	___ftpack@arg,f
  1531  018A  1903               	skipnz
  1532  018B  0AF3               	incf	___ftpack@arg+1,f
  1533  018C  1903               	skipnz
  1534  018D  0AF4               	incf	___ftpack@arg+2,f
  1535  018E  23F1  118A         	fcall	PL40	;call to abstracted procedure
  1536  0190                     l4109:	
  1537  0190  30FF               	movlw	255
  1538  0191  0574               	andwf	___ftpack@arg+2,w
  1539  0192  1903               	btfsc	3,2
  1540  0193  299E               	goto	l4113
  1541  0194  2988               	goto	l4107
  1542  0195                     l4115:	
  1543  0195  3002               	movlw	2
  1544  0196  0275               	subwf	___ftpack@exp,w
  1545  0197  1C03               	btfss	3,0
  1546  0198  29A0               	goto	l1529
  1547  0199  03F5               	decf	___ftpack@exp,f
  1548  019A  1003               	clrc
  1549  019B  0DF2               	rlf	___ftpack@arg,f
  1550  019C  0DF3               	rlf	___ftpack@arg+1,f
  1551  019D  0DF4               	rlf	___ftpack@arg+2,f
  1552  019E                     l4113:	
  1553  019E  1FF3               	btfss	___ftpack@arg+1,7
  1554  019F  2995               	goto	l4115
  1555  01A0                     l1529:	
  1556  01A0  1C75               	btfss	___ftpack@exp,0
  1557  01A1  13F3               	bcf	___ftpack@arg+1,7
  1558  01A2  1003               	clrc
  1559  01A3  0CF5               	rrf	___ftpack@exp,f
  1560  01A4  0875               	movf	___ftpack@exp,w
  1561  01A5  00CE               	movwf	??___ftpack+2
  1562  01A6  01CD               	clrf	??___ftpack+1
  1563  01A7  01CC               	clrf	??___ftpack
  1564  01A8  084C               	movf	??___ftpack,w
  1565  01A9  04F2               	iorwf	___ftpack@arg,f
  1566  01AA  084D               	movf	??___ftpack+1,w
  1567  01AB  04F3               	iorwf	___ftpack@arg+1,f
  1568  01AC  084E               	movf	??___ftpack+2,w
  1569  01AD  04F4               	iorwf	___ftpack@arg+2,f
  1570  01AE  0876               	movf	___ftpack@sign,w
  1571  01AF  1D03               	btfss	3,2
  1572  01B0  17F4               	bsf	___ftpack@arg+2,7
  1573  01B1  0008               	return
  1574  01B2                     __end_of___ftpack:	
  1575  01B2                     __ptext11:	
  1576 ;; *************** function _ADC_Sample *****************
  1577 ;; Defined at:
  1578 ;;		line 302 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  adch            1    wreg     unsigned char 
  1581 ;;  adldo           1    2[COMMON] unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  adch            1    1[BANK0 ] unsigned char 
  1584 ;;  j               1    0[BANK0 ] unsigned char 
  1585 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1586 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1587 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1588 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1589 ;;  i               1    2[BANK0 ] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      unsigned char 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 300/0
  1596 ;;		On exit  : 300/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1599 ;;      Params:         1       0       0       0
  1600 ;;      Locals:         0      13       0       0
  1601 ;;      Temps:          4       0       0       0
  1602 ;;      Totals:         5      13       0       0
  1603 ;;Total ram usage:       18 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_fanCtr
  1610 ;;		_workCtr
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           
  1615                           ;psect for function _ADC_Sample
  1616  01B2                     _ADC_Sample:	
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1620                           ;ADC_Sample@adch stored from wreg
  1621  01B2  00CD               	movwf	ADC_Sample@adch
  1622                           
  1623                           ;main.c: 304: volatile unsigned long adsum = 0;
  1624                           
  1625                           ;main.c: 305: volatile unsigned int admin = 0, admax = 0;
  1626  01B3  23DD  118A         	fcall	PL16	;call to abstracted procedure
  1627                           
  1628                           ;main.c: 306: volatile unsigned int ad_temp = 0;
  1629  01B5  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  1630  01B6  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1631                           
  1632                           ;main.c: 308: if ((!LDO_EN) && (adldo & 0x04) )
  1633  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1634  01B8  1D16               	btfss	22,2	;volatile
  1635  01B9  1D72               	btfss	ADC_Sample@adldo,2
  1636  01BA  29C3               	goto	l3991
  1637                           
  1638                           ;main.c: 309: {
  1639                           ;main.c: 311: ADCON1 = adldo;
  1640  01BB  0872               	movf	ADC_Sample@adldo,w
  1641  01BC  0096               	movwf	22	;volatile
  1642                           
  1643                           ;main.c: 312: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1644  01BD  3042               	movlw	66
  1645  01BE  00F3               	movwf	??_ADC_Sample
  1646  01BF                     u4927:	
  1647  01BF  0BF3               	decfsz	??_ADC_Sample,f
  1648  01C0  29BF               	goto	u4927
  1649  01C1  0000               	nop
  1650                           
  1651                           ;main.c: 313: }
  1652  01C2  29C5               	goto	l3993
  1653  01C3                     l3991:	
  1654                           
  1655                           ;main.c: 314: else
  1656                           ;main.c: 315: ADCON1 = adldo;
  1657  01C3  0872               	movf	ADC_Sample@adldo,w
  1658  01C4  0096               	movwf	22	;volatile
  1659  01C5                     l3993:	
  1660                           
  1661                           ;main.c: 317: if(adch & 0x10)
  1662  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1663  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1664  01C7  1E4D               	btfss	ADC_Sample@adch,4
  1665  01C8  29CE               	goto	l4001
  1666                           
  1667                           ;main.c: 318: {
  1668                           ;main.c: 319: CHS4 = 1;
  1669  01C9  1683               	bsf	3,5	;RP0=1, select bank1
  1670  01CA  1716               	bsf	22,6	;volatile
  1671                           
  1672                           ;main.c: 320: adch &= 0x0f;
  1673  01CB  300F               	movlw	15
  1674  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1675  01CD  05CD               	andwf	ADC_Sample@adch,f
  1676  01CE                     l4001:	
  1677                           
  1678                           ;main.c: 323: for (i = 0; i < 10; i++)
  1679  01CE  01CE               	clrf	ADC_Sample@i
  1680  01CF                     l4007:	
  1681                           
  1682                           ;main.c: 324: {
  1683                           ;main.c: 325: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1684  01CF  084D               	movf	ADC_Sample@adch,w
  1685  01D0  00F3               	movwf	??_ADC_Sample
  1686  01D1  3001               	movlw	1
  1687  01D2  1003               	clrc
  1688  01D3                     L3:	
  1689  01D3  0DF3               	rlf	??_ADC_Sample,f
  1690  01D4  3EFF               	addlw	-1
  1691  01D5  1003               	clrc
  1692  01D6  1D03               	skipz
  1693  01D7  29D3               	goto	L3
  1694  01D8  0D73               	rlf	??_ADC_Sample,w
  1695  01D9  3841               	iorlw	65
  1696  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1697  01DB  0095               	movwf	21	;volatile
  1698  01DC  0000               	nop	;# 
  1699  01DD  0000               	nop	;# 
  1700  01DE  0000               	nop	;# 
  1701  01DF  0000               	nop	;# 
  1702                           
  1703                           ;main.c: 330: GODONE = 1;
  1704  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  1705  01E1  1303               	bcf	3,6	;RP1=0, select bank1
  1706  01E2  1495               	bsf	21,1	;volatile
  1707                           
  1708                           ;main.c: 332: unsigned char j = 0;
  1709  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1710  01E4  01CC               	clrf	ADC_Sample@j
  1711  01E5                     l989:	
  1712                           ;main.c: 333: while (GODONE)
  1713                           
  1714  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  1715  01E6  1C95               	btfss	21,1	;volatile
  1716  01E7  29EF               	goto	l4017
  1717                           
  1718                           ;main.c: 334: {
  1719                           ;main.c: 335: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1720  01E8  29E9               	nop2	;2 cycle nop
  1721  01E9  29EA               	nop2	;2 cycle nop
  1722                           
  1723                           ;main.c: 337: if (0 == (--j))
  1724  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1725  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1726  01EC  0BCC               	decfsz	ADC_Sample@j,f
  1727  01ED  29E5               	goto	l989
  1728                           
  1729                           ;main.c: 338: return 0;
  1730  01EE  3400               	retlw	0
  1731  01EF                     l4017:	
  1732                           
  1733                           ;main.c: 339: }
  1734                           ;main.c: 341: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1735  01EF  0819               	movf	25,w	;volatile
  1736  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1737  01F1  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  1738  01F2  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  1739  01F3  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  1740  01F4  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1741  01F5  30F0               	movlw	240
  1742  01F6  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1743  01F7  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1744  01F8  390F               	andlw	15
  1745  01F9  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1746  01FA  30F0               	movlw	240
  1747  01FB  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  1748  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  1749  01FD  0E18               	swapf	24,w	;volatile
  1750  01FE  390F               	andlw	15
  1751  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0200  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  1753  0201  1803               	skipnc
  1754  0202  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1755                           
  1756                           ;main.c: 343: if (0 == admax)
  1757  0203  0855               	movf	ADC_Sample@admax,w	;volatile
  1758  0204  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  1759  0205  1D03               	btfss	3,2
  1760  0206  2A0A               	goto	l4025
  1761                           
  1762                           ;main.c: 344: {
  1763                           ;main.c: 345: admax = ad_temp;
  1764  0207  23F6  118A         	fcall	PL44	;call to abstracted procedure
  1765  0209  2A1D               	goto	l4031
  1766  020A                     l4025:	
  1767                           ;main.c: 347: }
  1768                           
  1769                           ;main.c: 346: admin = ad_temp;
  1770                           
  1771                           
  1772                           ;main.c: 348: else if (ad_temp > admax)
  1773  020A  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1774  020B  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  1775  020C  1D03               	skipz
  1776  020D  2A10               	goto	u3715
  1777  020E  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1778  020F  0255               	subwf	ADC_Sample@admax,w	;volatile
  1779  0210                     u3715:	
  1780  0210  1803               	skipnc
  1781  0211  2A15               	goto	l4029
  1782                           
  1783                           ;main.c: 349: admax = ad_temp;
  1784  0212  23F6  118A         	fcall	PL44	;call to abstracted procedure
  1785  0214  2A21               	goto	l995
  1786  0215                     l4029:	
  1787                           
  1788                           ;main.c: 350: else if (ad_temp < admin)
  1789  0215  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1790  0216  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1791  0217  1D03               	skipz
  1792  0218  2A1B               	goto	u3725
  1793  0219  0853               	movf	ADC_Sample@admin,w	;volatile
  1794  021A  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  1795  021B                     u3725:	
  1796  021B  1803               	skipnc
  1797  021C  2A21               	goto	l995
  1798  021D                     l4031:	
  1799                           
  1800                           ;main.c: 351: admin = ad_temp;
  1801  021D  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1802  021E  00D4               	movwf	ADC_Sample@admin+1	;volatile
  1803  021F  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1804  0220  00D3               	movwf	ADC_Sample@admin	;volatile
  1805  0221                     l995:	
  1806                           
  1807                           ;main.c: 353: adsum += ad_temp;
  1808  0221  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  1809  0222  00F3               	movwf	??_ADC_Sample
  1810  0223  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1811  0224  00F4               	movwf	??_ADC_Sample+1
  1812  0225  01F5               	clrf	??_ADC_Sample+2
  1813  0226  01F6               	clrf	??_ADC_Sample+3
  1814  0227  0873               	movf	??_ADC_Sample,w
  1815  0228  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  1816  0229  0874               	movf	??_ADC_Sample+1,w
  1817  022A  1103               	clrz
  1818  022B  1803               	skipnc
  1819  022C  3E01               	addlw	1
  1820  022D  1D03               	btfss	3,2
  1821  022E  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  1822  022F  0875               	movf	??_ADC_Sample+2,w
  1823  0230  1103               	clrz
  1824  0231  1803               	skipnc
  1825  0232  3E01               	addlw	1
  1826  0233  1D03               	btfss	3,2
  1827  0234  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  1828  0235  0876               	movf	??_ADC_Sample+3,w
  1829  0236  1103               	clrz
  1830  0237  1803               	skipnc
  1831  0238  3E01               	addlw	1
  1832  0239  1D03               	btfss	3,2
  1833  023A  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  1834  023B  300A               	movlw	10
  1835  023C  0ACE               	incf	ADC_Sample@i,f
  1836  023D  024E               	subwf	ADC_Sample@i,w
  1837  023E  1C03               	skipc
  1838  023F  29CF               	goto	l4007
  1839                           
  1840                           ;main.c: 354: }
  1841                           ;main.c: 355: adsum -= admax;
  1842  0240  0855               	movf	ADC_Sample@admax,w	;volatile
  1843  0241  00F3               	movwf	??_ADC_Sample
  1844  0242  0856               	movf	ADC_Sample@admax+1,w	;volatile
  1845  0243  23CE  118A         	fcall	PL6	;call to abstracted procedure
  1846  0245  1C03               	skipc
  1847  0246  0F76               	incfsz	??_ADC_Sample+3,w
  1848  0247  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1849                           
  1850                           ;main.c: 356: if (adsum >= admin)
  1851  0248  0853               	movf	ADC_Sample@admin,w	;volatile
  1852  0249  00F3               	movwf	??_ADC_Sample
  1853  024A  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1854  024B  00F4               	movwf	??_ADC_Sample+1
  1855  024C  01F5               	clrf	??_ADC_Sample+2
  1856  024D  01F6               	clrf	??_ADC_Sample+3
  1857  024E  0876               	movf	??_ADC_Sample+3,w
  1858  024F  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  1859  0250  1D03               	skipz
  1860  0251  2A5C               	goto	u3765
  1861  0252  0875               	movf	??_ADC_Sample+2,w
  1862  0253  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  1863  0254  1D03               	skipz
  1864  0255  2A5C               	goto	u3765
  1865  0256  0874               	movf	??_ADC_Sample+1,w
  1866  0257  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  1867  0258  1D03               	skipz
  1868  0259  2A5C               	goto	u3765
  1869  025A  0873               	movf	??_ADC_Sample,w
  1870  025B  024F               	subwf	ADC_Sample@adsum,w	;volatile
  1871  025C                     u3765:	
  1872  025C  1C03               	skipc
  1873  025D  2A67               	goto	l999
  1874                           
  1875                           ;main.c: 357: adsum -= admin;
  1876  025E  0853               	movf	ADC_Sample@admin,w	;volatile
  1877  025F  00F3               	movwf	??_ADC_Sample
  1878  0260  0854               	movf	ADC_Sample@admin+1,w	;volatile
  1879  0261  23CE  118A         	fcall	PL6	;call to abstracted procedure
  1880  0263  1C03               	skipc
  1881  0264  0F76               	incfsz	??_ADC_Sample+3,w
  1882  0265  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  1883  0266  2A6B               	goto	l4041
  1884  0267                     l999:	
  1885                           
  1886                           ;main.c: 358: else
  1887                           ;main.c: 359: adsum = 0;
  1888  0267  01CF               	clrf	ADC_Sample@adsum	;volatile
  1889  0268  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  1890  0269  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  1891  026A  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  1892  026B                     l4041:	
  1893                           
  1894                           ;main.c: 361: adresult = adsum >> 3;
  1895  026B  084F               	movf	ADC_Sample@adsum,w	;volatile
  1896  026C  00F3               	movwf	??_ADC_Sample
  1897  026D  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  1898  026E  00F4               	movwf	??_ADC_Sample+1
  1899  026F  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  1900  0270  00F5               	movwf	??_ADC_Sample+2
  1901  0271  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  1902  0272  00F6               	movwf	??_ADC_Sample+3
  1903  0273  3003               	movlw	3
  1904  0274                     u3785:	
  1905  0274  1003               	clrc
  1906  0275  0CF6               	rrf	??_ADC_Sample+3,f
  1907  0276  0CF5               	rrf	??_ADC_Sample+2,f
  1908  0277  0CF4               	rrf	??_ADC_Sample+1,f
  1909  0278  0CF3               	rrf	??_ADC_Sample,f
  1910  0279  3EFF               	addlw	-1
  1911  027A  1D03               	skipz
  1912  027B  2A74               	goto	u3785
  1913  027C  0874               	movf	??_ADC_Sample+1,w
  1914  027D  00CB               	movwf	_adresult+1	;volatile
  1915  027E  0873               	movf	??_ADC_Sample,w
  1916  027F  00CA               	movwf	_adresult	;volatile
  1917                           
  1918                           ;main.c: 363: adsum = 0;
  1919                           
  1920                           ;main.c: 364: admin = 0;
  1921                           
  1922                           ;main.c: 365: admax = 0;
  1923  0280  23DD               	fcall	PL16	;call to abstracted procedure
  1924                           
  1925                           ;main.c: 366: return 0xA5;
  1926  0281  34A5               	retlw	165
  1927  0282                     __end_of_ADC_Sample:	
  1928  0282                     __ptext7:	
  1929 ;; *************** function _fanCtr *****************
  1930 ;; Defined at:
  1931 ;;		line 515 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;		None
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1936 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 300/100
  1943 ;;		On exit  : 200/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       0       0       0
  1947 ;;      Locals:         0       5       0       0
  1948 ;;      Temps:          0       0       0       0
  1949 ;;      Totals:         0       5       0       0
  1950 ;;Total ram usage:        5 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    2
  1953 ;; This function calls:
  1954 ;;		_ADC_Sample
  1955 ;;		___lmul
  1956 ;;		_fanInit
  1957 ;;		_fanStop
  1958 ;; This function is called by:
  1959 ;;		_workCtr
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _fanCtr
  1965  0282                     _fanCtr:	
  1966                           
  1967                           ;main.c: 517: if(workStep > 0)
  1968                           
  1969                           ;incstack = 0
  1970                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1971  0282  087B               	movf	_workStep,w
  1972  0283  1903               	btfsc	3,2
  1973  0284  2AEB               	goto	l4319
  1974                           
  1975                           ;main.c: 518: {
  1976                           ;main.c: 519: PORTA |= 0x02;
  1977  0285  1486               	bsf	6,1	;volatile
  1978                           
  1979                           ;main.c: 520: unsigned char maxFanValue = 52;
  1980  0286  3034               	movlw	52
  1981  0287  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0288  00D9               	movwf	fanCtr@maxFanValue
  1983                           
  1984                           ;main.c: 521: if(workStep == 1)
  1985  0289  0B7B               	decfsz	_workStep,w
  1986  028A  2A8D               	goto	l1051
  1987                           
  1988                           ;main.c: 522: {
  1989                           ;main.c: 523: maxFanValue = 40;
  1990  028B  3028               	movlw	40
  1991  028C  00D9               	movwf	fanCtr@maxFanValue
  1992  028D                     l1051:	
  1993                           
  1994                           ;main.c: 524: }
  1995                           ;main.c: 525: if(power_ad < 3150)
  1996  028D  300C               	movlw	12
  1997  028E  0223               	subwf	_power_ad+1,w	;volatile
  1998  028F  304E               	movlw	78
  1999  0290  1903               	skipnz
  2000  0291  0222               	subwf	_power_ad,w	;volatile
  2001  0292  1803               	skipnc
  2002  0293  2A96               	goto	l4283
  2003                           
  2004                           ;main.c: 526: {
  2005                           ;main.c: 527: maxFanValue = 32;
  2006  0294  3020               	movlw	32
  2007  0295  00D9               	movwf	fanCtr@maxFanValue
  2008  0296                     l4283:	
  2009                           
  2010                           ;main.c: 528: }
  2011                           ;main.c: 529: if(workStep == 3)
  2012  0296  3003               	movlw	3
  2013  0297  067B               	xorwf	_workStep,w
  2014  0298  1D03               	btfss	3,2
  2015  0299  2A9C               	goto	l4287
  2016                           
  2017                           ;main.c: 530: {
  2018                           ;main.c: 531: maxFanValue = 10;
  2019  029A  300A               	movlw	10
  2020  029B  00D9               	movwf	fanCtr@maxFanValue
  2021  029C                     l4287:	
  2022  029C  3002               	movlw	2
  2023                           
  2024                           ;main.c: 532: }
  2025                           ;main.c: 533: test_adc = ADC_Sample(2, 0);
  2026  029D  01F2               	clrf	ADC_Sample@adldo
  2027  029E  21B2  118A         	fcall	_ADC_Sample
  2028  02A0  00BB               	movwf	_test_adc	;volatile
  2029                           
  2030                           ;main.c: 534: if (0xA5 == test_adc)
  2031  02A1  30A5               	movlw	165
  2032  02A2  063B               	xorwf	_test_adc,w	;volatile
  2033  02A3  1D03               	btfss	3,2
  2034  02A4  2ACC               	goto	l4299
  2035                           
  2036                           ;main.c: 535: {
  2037                           ;main.c: 536: volatile unsigned long fan_temp;
  2038                           ;main.c: 537: if(power_ad > 0)
  2039  02A5  0822               	movf	_power_ad,w	;volatile
  2040  02A6  0423               	iorwf	_power_ad+1,w	;volatile
  2041  02A7  1903               	btfsc	3,2
  2042  02A8  2ACC               	goto	l4299
  2043                           
  2044                           ;main.c: 538: {
  2045                           ;main.c: 539: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  2046  02A9  084A               	movf	_adresult,w	;volatile
  2047  02AA  00CC               	movwf	___lmul@multiplier
  2048  02AB  084B               	movf	_adresult+1,w	;volatile
  2049  02AC  00CD               	movwf	___lmul@multiplier+1
  2050  02AD  01CE               	clrf	___lmul@multiplier+2
  2051  02AE  01CF               	clrf	___lmul@multiplier+3
  2052  02AF  0822               	movf	_power_ad,w	;volatile
  2053  02B0  00D0               	movwf	___lmul@multiplicand
  2054  02B1  0823               	movf	_power_ad+1,w	;volatile
  2055  02B2  00D1               	movwf	___lmul@multiplicand+1
  2056  02B3  01D2               	clrf	___lmul@multiplicand+2
  2057  02B4  01D3               	clrf	___lmul@multiplicand+3
  2058  02B5  22F1  118A         	fcall	___lmul
  2059  02B7  084F               	movf	?___lmul+3,w
  2060  02B8  00DD               	movwf	fanCtr@fan_temp+3	;volatile
  2061  02B9  084E               	movf	?___lmul+2,w
  2062  02BA  00DC               	movwf	fanCtr@fan_temp+2	;volatile
  2063  02BB  084D               	movf	?___lmul+1,w
  2064  02BC  00DB               	movwf	fanCtr@fan_temp+1	;volatile
  2065  02BD  084C               	movf	?___lmul,w
  2066  02BE  00DA               	movwf	fanCtr@fan_temp	;volatile
  2067  02BF  300C               	movlw	12
  2068  02C0                     u4215:	
  2069  02C0  1003               	clrc
  2070  02C1  0CDD               	rrf	fanCtr@fan_temp+3,f	;volatile
  2071  02C2  0CDC               	rrf	fanCtr@fan_temp+2,f	;volatile
  2072  02C3  0CDB               	rrf	fanCtr@fan_temp+1,f	;volatile
  2073  02C4  0CDA               	rrf	fanCtr@fan_temp,f	;volatile
  2074  02C5  3EFF               	addlw	-1
  2075  02C6  1D03               	skipz
  2076  02C7  2AC0               	goto	u4215
  2077                           
  2078                           ;main.c: 540: fanValue = (unsigned int)(fan_temp);
  2079  02C8  085B               	movf	fanCtr@fan_temp+1,w	;volatile
  2080  02C9  00AB               	movwf	_fanValue+1
  2081  02CA  085A               	movf	fanCtr@fan_temp,w	;volatile
  2082  02CB  00AA               	movwf	_fanValue
  2083  02CC                     l4299:	
  2084                           
  2085                           ;main.c: 541: }
  2086                           ;main.c: 542: }
  2087                           ;main.c: 543: if(fanValue > 1300)
  2088  02CC  3005               	movlw	5
  2089  02CD  022B               	subwf	_fanValue+1,w
  2090  02CE  3015               	movlw	21
  2091  02CF  1903               	skipnz
  2092  02D0  022A               	subwf	_fanValue,w
  2093  02D1  1C03               	skipc
  2094  02D2  2ADF               	goto	l4307
  2095                           
  2096                           ;main.c: 544: {
  2097                           ;main.c: 545: if(++fanOverTime > 50)
  2098  02D3  3033               	movlw	51
  2099  02D4  0AC4               	incf	_fanOverTime,f
  2100  02D5  0244               	subwf	_fanOverTime,w
  2101  02D6  1C03               	skipc
  2102  02D7  2AE0               	goto	l4309
  2103  02D8  30C2               	movlw	194
  2104                           
  2105                           ;main.c: 546: {
  2106                           ;main.c: 547: fanOverTime = 0;
  2107  02D9  01C4               	clrf	_fanOverTime
  2108                           
  2109                           ;main.c: 548: workStep = 0;
  2110  02DA  01FB               	clrf	_workStep
  2111                           
  2112                           ;main.c: 549: shanshuoTime = 450;
  2113  02DB  00B0               	movwf	_shanshuoTime
  2114  02DC  3001               	movlw	1
  2115  02DD  00B1               	movwf	_shanshuoTime+1
  2116  02DE  2AE0               	goto	l4309
  2117  02DF                     l4307:	
  2118                           
  2119                           ;main.c: 552: else
  2120                           ;main.c: 553: {
  2121                           ;main.c: 554: fanOverTime = 0;
  2122  02DF  01C4               	clrf	_fanOverTime
  2123  02E0                     l4309:	
  2124                           
  2125                           ;main.c: 555: }
  2126                           ;main.c: 556: if(fanDuty < maxFanValue)
  2127  02E0  0859               	movf	fanCtr@maxFanValue,w
  2128  02E1  0246               	subwf	_fanDuty,w
  2129  02E2  1803               	skipnc
  2130  02E3  2AE6               	goto	l4313
  2131                           
  2132                           ;main.c: 557: {
  2133                           ;main.c: 558: fanDuty++;
  2134  02E4  0AC6               	incf	_fanDuty,f
  2135                           
  2136                           ;main.c: 559: }
  2137  02E5  2AEA               	goto	l4317
  2138  02E6                     l4313:	
  2139                           
  2140                           ;main.c: 560: else if(fanDuty > maxFanValue)
  2141  02E6  0846               	movf	_fanDuty,w
  2142  02E7  0259               	subwf	fanCtr@maxFanValue,w
  2143  02E8  1C03               	btfss	3,0
  2144                           
  2145                           ;main.c: 561: {
  2146                           ;main.c: 562: fanDuty--;
  2147  02E9  03C6               	decf	_fanDuty,f
  2148  02EA                     l4317:	
  2149                           
  2150                           ;main.c: 563: }
  2151                           ;main.c: 564: fanInit();
  2152  02EA  2BBD               	ljmp	l4069
  2153  02EB                     l4319:	
  2154                           ;main.c: 565: }
  2155                           
  2156                           
  2157                           ;main.c: 566: else
  2158                           ;main.c: 567: {
  2159                           ;main.c: 568: fanStop();
  2160  02EB  23C8               	fcall	_fanStop
  2161                           
  2162                           ;main.c: 569: fanDuty = 0;
  2163  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2164  02ED  01C6               	clrf	_fanDuty
  2165                           
  2166                           ;main.c: 570: PORTA &= 0xFD;
  2167  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2168  02EF  1086               	bcf	6,1	;volatile
  2169  02F0  0008               	return
  2170  02F1                     __end_of_fanCtr:	
  2171  02F1                     __ptext10:	
  2172 ;; *************** function ___lmul *****************
  2173 ;; Defined at:
  2174 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2177 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  product         4    2[COMMON] unsigned long 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  4    0[BANK0 ] unsigned long 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0
  2184 ;; Tracked objects:
  2185 ;;		On entry : 300/0
  2186 ;;		On exit  : 300/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2189 ;;      Params:         0       8       0       0
  2190 ;;      Locals:         4       0       0       0
  2191 ;;      Temps:          0       0       0       0
  2192 ;;      Totals:         4       8       0       0
  2193 ;;Total ram usage:       12 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    1
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_fanCtr
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           
  2204                           ;psect for function ___lmul
  2205  02F1                     ___lmul:	
  2206                           
  2207                           ;incstack = 0
  2208                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2209  02F1  01F2               	clrf	___lmul@product
  2210  02F2  01F3               	clrf	___lmul@product+1
  2211  02F3  01F4               	clrf	___lmul@product+2
  2212  02F4  01F5               	clrf	___lmul@product+3
  2213  02F5                     l1372:	
  2214  02F5  1C4C               	btfss	___lmul@multiplier,0
  2215  02F6  2B0B               	goto	l4091
  2216  02F7  0850               	movf	___lmul@multiplicand,w
  2217  02F8  07F2               	addwf	___lmul@product,f
  2218  02F9  0851               	movf	___lmul@multiplicand+1,w
  2219  02FA  1103               	clrz
  2220  02FB  1803               	skipnc
  2221  02FC  3E01               	addlw	1
  2222  02FD  1D03               	btfss	3,2
  2223  02FE  07F3               	addwf	___lmul@product+1,f
  2224  02FF  0852               	movf	___lmul@multiplicand+2,w
  2225  0300  1103               	clrz
  2226  0301  1803               	skipnc
  2227  0302  3E01               	addlw	1
  2228  0303  1D03               	btfss	3,2
  2229  0304  07F4               	addwf	___lmul@product+2,f
  2230  0305  0853               	movf	___lmul@multiplicand+3,w
  2231  0306  1103               	clrz
  2232  0307  1803               	skipnc
  2233  0308  3E01               	addlw	1
  2234  0309  1D03               	btfss	3,2
  2235  030A  07F5               	addwf	___lmul@product+3,f
  2236  030B                     l4091:	
  2237  030B  1003               	clrc
  2238  030C  0DD0               	rlf	___lmul@multiplicand,f
  2239  030D  0DD1               	rlf	___lmul@multiplicand+1,f
  2240  030E  0DD2               	rlf	___lmul@multiplicand+2,f
  2241  030F  0DD3               	rlf	___lmul@multiplicand+3,f
  2242  0310  1003               	clrc
  2243  0311  0CCF               	rrf	___lmul@multiplier+3,f
  2244  0312  0CCE               	rrf	___lmul@multiplier+2,f
  2245  0313  0CCD               	rrf	___lmul@multiplier+1,f
  2246  0314  0CCC               	rrf	___lmul@multiplier,f
  2247  0315  084F               	movf	___lmul@multiplier+3,w
  2248  0316  044E               	iorwf	___lmul@multiplier+2,w
  2249  0317  044D               	iorwf	___lmul@multiplier+1,w
  2250  0318  044C               	iorwf	___lmul@multiplier,w
  2251  0319  1D03               	skipz
  2252  031A  2AF5               	goto	l1372
  2253  031B  0875               	movf	___lmul@product+3,w
  2254  031C  00CF               	movwf	?___lmul+3
  2255  031D  0874               	movf	___lmul@product+2,w
  2256  031E  00CE               	movwf	?___lmul+2
  2257  031F  0873               	movf	___lmul@product+1,w
  2258  0320  00CD               	movwf	?___lmul+1
  2259  0321  0872               	movf	___lmul@product,w
  2260  0322  00CC               	movwf	?___lmul
  2261  0323  0008               	return
  2262  0324                     __end_of___lmul:	
  2263  0324                     __ptext5:	
  2264 ;; *************** function _keyLedCtr *****************
  2265 ;; Defined at:
  2266 ;;		line 401 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		wreg, status,2, status,0, pclath, cstack
  2275 ;; Tracked objects:
  2276 ;;		On entry : 300/100
  2277 ;;		On exit  : 300/100
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2280 ;;      Params:         0       0       0       0
  2281 ;;      Locals:         0       0       0       0
  2282 ;;      Temps:          0       0       0       0
  2283 ;;      Totals:         0       0       0       0
  2284 ;;Total ram usage:        0 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    2
  2287 ;; This function calls:
  2288 ;;		___lwmod
  2289 ;; This function is called by:
  2290 ;;		_workCtr
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function _keyLedCtr
  2296  0324                     _keyLedCtr:	
  2297                           
  2298                           ;main.c: 403: if(shanshuoTime > 0)
  2299                           
  2300                           ;incstack = 0
  2301                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2302  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0325  0830               	movf	_shanshuoTime,w
  2304  0326  0431               	iorwf	_shanshuoTime+1,w
  2305  0327  1903               	btfsc	3,2
  2306  0328  2B42               	goto	l4237
  2307                           
  2308                           ;main.c: 404: {
  2309                           ;main.c: 405: shanshuoTime--;
  2310  0329  3001               	movlw	1
  2311  032A  02B0               	subwf	_shanshuoTime,f
  2312  032B  3000               	movlw	0
  2313  032C  1C03               	skipc
  2314  032D  03B1               	decf	_shanshuoTime+1,f
  2315  032E  02B1               	subwf	_shanshuoTime+1,f
  2316                           
  2317                           ;main.c: 406: if((shanshuoTime % 150) < 75)
  2318  032F  3096               	movlw	150
  2319  0330  00F2               	movwf	___lwmod@divisor
  2320  0331  01F3               	clrf	___lwmod@divisor+1
  2321  0332  0831               	movf	_shanshuoTime+1,w
  2322  0333  00F5               	movwf	___lwmod@dividend+1
  2323  0334  0830               	movf	_shanshuoTime,w
  2324  0335  00F4               	movwf	___lwmod@dividend
  2325  0336  2399  118A         	fcall	___lwmod
  2326  0338  3000               	movlw	0
  2327  0339  0273               	subwf	?___lwmod+1,w
  2328  033A  304B               	movlw	75
  2329  033B  1903               	skipnz
  2330  033C  0272               	subwf	?___lwmod,w
  2331  033D  1803               	skipnc
  2332  033E  2B45               	goto	l1012
  2333  033F                     l4235:	
  2334                           
  2335                           ;main.c: 407: {
  2336                           ;main.c: 408: PORTC |= 0x01;
  2337  033F  1703               	bsf	3,6	;RP1=1, select bank2
  2338  0340  1406               	bsf	6,0	;volatile
  2339                           
  2340                           ;main.c: 409: }
  2341  0341  2B47               	goto	l4241
  2342  0342                     l4237:	
  2343                           
  2344                           ;main.c: 415: else if(workStep > 0)
  2345  0342  087B               	movf	_workStep,w
  2346  0343  1903               	btfsc	3,2
  2347  0344  2B3F               	goto	l4235
  2348  0345                     l1012:	
  2349                           
  2350                           ;main.c: 410: else
  2351                           ;main.c: 411: {
  2352                           ;main.c: 412: PORTC &= 0xFE;
  2353  0345  1703               	bsf	3,6	;RP1=1, select bank2
  2354  0346  1006               	bcf	6,0	;volatile
  2355  0347                     l4241:	
  2356                           
  2357                           ;main.c: 422: }
  2358                           ;main.c: 424: if(shanshuoTime2 > 0)
  2359  0347  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0348  082E               	movf	_shanshuoTime2,w
  2361  0349  042F               	iorwf	_shanshuoTime2+1,w
  2362  034A  1903               	btfsc	3,2
  2363  034B  2B65               	goto	l4249
  2364                           
  2365                           ;main.c: 425: {
  2366                           ;main.c: 426: shanshuoTime2--;
  2367  034C  3001               	movlw	1
  2368  034D  02AE               	subwf	_shanshuoTime2,f
  2369  034E  3000               	movlw	0
  2370  034F  1C03               	skipc
  2371  0350  03AF               	decf	_shanshuoTime2+1,f
  2372  0351  02AF               	subwf	_shanshuoTime2+1,f
  2373                           
  2374                           ;main.c: 427: if((shanshuoTime2 % 150) < 75)
  2375  0352  3096               	movlw	150
  2376  0353  00F2               	movwf	___lwmod@divisor
  2377  0354  01F3               	clrf	___lwmod@divisor+1
  2378  0355  082F               	movf	_shanshuoTime2+1,w
  2379  0356  00F5               	movwf	___lwmod@dividend+1
  2380  0357  082E               	movf	_shanshuoTime2,w
  2381  0358  00F4               	movwf	___lwmod@dividend
  2382  0359  2399  118A         	fcall	___lwmod
  2383  035B  3000               	movlw	0
  2384  035C  0273               	subwf	?___lwmod+1,w
  2385  035D  304B               	movlw	75
  2386  035E  1903               	skipnz
  2387  035F  0272               	subwf	?___lwmod,w
  2388  0360  1803               	skipnc
  2389  0361  2B68               	goto	l1018
  2390  0362                     l4247:	
  2391                           
  2392                           ;main.c: 428: {
  2393                           ;main.c: 429: PORTC |= 0x02;
  2394  0362  1703               	bsf	3,6	;RP1=1, select bank2
  2395  0363  1486               	bsf	6,1	;volatile
  2396                           
  2397                           ;main.c: 430: }
  2398  0364  2B6A               	goto	l4253
  2399  0365                     l4249:	
  2400                           
  2401                           ;main.c: 436: else if(wuhuaFlag > 0)
  2402  0365  0847               	movf	_wuhuaFlag,w
  2403  0366  1903               	btfsc	3,2
  2404  0367  2B62               	goto	l4247
  2405  0368                     l1018:	
  2406                           
  2407                           ;main.c: 431: else
  2408                           ;main.c: 432: {
  2409                           ;main.c: 433: PORTC &= 0xFD;
  2410  0368  1703               	bsf	3,6	;RP1=1, select bank2
  2411  0369  1086               	bcf	6,1	;volatile
  2412  036A                     l4253:	
  2413                           
  2414                           ;main.c: 443: }
  2415                           ;main.c: 444: if(shanshuoTime3 > 0)
  2416  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2417  036B  082C               	movf	_shanshuoTime3,w
  2418  036C  042D               	iorwf	_shanshuoTime3+1,w
  2419  036D  1903               	btfsc	3,2
  2420  036E  2B8B               	goto	l4261
  2421                           
  2422                           ;main.c: 445: {
  2423                           ;main.c: 446: shanshuoTime3--;
  2424  036F  3001               	movlw	1
  2425  0370  02AC               	subwf	_shanshuoTime3,f
  2426  0371  3000               	movlw	0
  2427  0372  1C03               	skipc
  2428  0373  03AD               	decf	_shanshuoTime3+1,f
  2429  0374  02AD               	subwf	_shanshuoTime3+1,f
  2430                           
  2431                           ;main.c: 447: if((shanshuoTime3 % 150) < 75)
  2432  0375  3096               	movlw	150
  2433  0376  00F2               	movwf	___lwmod@divisor
  2434  0377  01F3               	clrf	___lwmod@divisor+1
  2435  0378  082D               	movf	_shanshuoTime3+1,w
  2436  0379  00F5               	movwf	___lwmod@dividend+1
  2437  037A  082C               	movf	_shanshuoTime3,w
  2438  037B  00F4               	movwf	___lwmod@dividend
  2439  037C  2399  118A         	fcall	___lwmod
  2440  037E  3000               	movlw	0
  2441  037F  0273               	subwf	?___lwmod+1,w
  2442  0380  304B               	movlw	75
  2443  0381  1903               	skipnz
  2444  0382  0272               	subwf	?___lwmod,w
  2445  0383  1803               	skipnc
  2446  0384  2B88               	goto	l1024
  2447  0385                     l4259:	
  2448                           
  2449                           ;main.c: 448: {
  2450                           ;main.c: 449: PORTA |= 0x01;
  2451  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0386  1406               	bsf	6,0	;volatile
  2453                           
  2454                           ;main.c: 450: }
  2455  0387  0008               	return
  2456  0388                     l1024:	
  2457                           
  2458                           ;main.c: 451: else
  2459                           ;main.c: 452: {
  2460                           ;main.c: 453: PORTA &= 0xFE;
  2461  0388  1683               	bsf	3,5	;RP0=1, select bank1
  2462  0389  1006               	bcf	6,0	;volatile
  2463  038A  0008               	return
  2464  038B                     l4261:	
  2465                           
  2466                           ;main.c: 456: else if(powerFlag)
  2467  038B  083E               	movf	_powerFlag,w
  2468  038C  1D03               	btfss	3,2
  2469  038D  2B88               	goto	l1024
  2470                           
  2471                           ;main.c: 460: else if(chrgFlag)
  2472  038E  0843               	movf	_chrgFlag,w
  2473  038F  1903               	btfsc	3,2
  2474  0390  2B85               	goto	l4259
  2475                           
  2476                           ;main.c: 461: {
  2477                           ;main.c: 462: if(chrgFullFlag || count1s < 50)
  2478  0391  0842               	movf	_chrgFullFlag,w
  2479  0392  1D03               	btfss	3,2
  2480  0393  2B88               	goto	l1024
  2481  0394  3032               	movlw	50
  2482  0395  0248               	subwf	_count1s,w
  2483  0396  1C03               	btfss	3,0
  2484  0397  2B88               	goto	l1024
  2485  0398  2B85               	goto	l4259
  2486  0399                     __end_of_keyLedCtr:	
  2487  0399                     __ptext6:	
  2488 ;; *************** function ___lwmod *****************
  2489 ;; Defined at:
  2490 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  divisor         2    2[COMMON] unsigned int 
  2493 ;;  dividend        2    4[COMMON] unsigned int 
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  counter         1    6[COMMON] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  2    2[COMMON] unsigned int 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0
  2500 ;; Tracked objects:
  2501 ;;		On entry : 300/0
  2502 ;;		On exit  : 300/0
  2503 ;;		Unchanged: 300/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2505 ;;      Params:         4       0       0       0
  2506 ;;      Locals:         1       0       0       0
  2507 ;;      Temps:          0       0       0       0
  2508 ;;      Totals:         5       0       0       0
  2509 ;;Total ram usage:        5 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_keyLedCtr
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function ___lwmod
  2521  0399                     ___lwmod:	
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2525  0399  0872               	movf	___lwmod@divisor,w
  2526  039A  0473               	iorwf	___lwmod@divisor+1,w
  2527  039B  1903               	btfsc	3,2
  2528  039C  2BB8               	goto	l4139
  2529  039D  01F6               	clrf	___lwmod@counter
  2530  039E                     L1:	
  2531  039E  0AF6               	incf	___lwmod@counter,f
  2532  039F  1BF3               	btfsc	___lwmod@divisor+1,7
  2533  03A0  2BA5               	goto	l4131
  2534  03A1  1003               	clrc
  2535  03A2  0DF2               	rlf	___lwmod@divisor,f
  2536  03A3  0DF3               	rlf	___lwmod@divisor+1,f
  2537  03A4  2B9E               	goto	L1
  2538  03A5                     l4131:	
  2539  03A5  0873               	movf	___lwmod@divisor+1,w
  2540  03A6  0275               	subwf	___lwmod@dividend+1,w
  2541  03A7  1D03               	skipz
  2542  03A8  2BAB               	goto	u3925
  2543  03A9  0872               	movf	___lwmod@divisor,w
  2544  03AA  0274               	subwf	___lwmod@dividend,w
  2545  03AB                     u3925:	
  2546  03AB  1C03               	skipc
  2547  03AC  2BB4               	goto	L2
  2548  03AD  0872               	movf	___lwmod@divisor,w
  2549  03AE  02F4               	subwf	___lwmod@dividend,f
  2550  03AF  0873               	movf	___lwmod@divisor+1,w
  2551  03B0  1C03               	skipc
  2552  03B1  03F5               	decf	___lwmod@dividend+1,f
  2553  03B2  02F5               	subwf	___lwmod@dividend+1,f
  2554  03B3  1003               	clrc
  2555  03B4                     L2:	
  2556  03B4  0CF3               	rrf	___lwmod@divisor+1,f
  2557  03B5  0CF2               	rrf	___lwmod@divisor,f
  2558  03B6  0BF6               	decfsz	___lwmod@counter,f
  2559  03B7  2BA5               	goto	l4131
  2560  03B8                     l4139:	
  2561  03B8  0875               	movf	___lwmod@dividend+1,w
  2562  03B9  00F3               	movwf	?___lwmod+1
  2563  03BA  0874               	movf	___lwmod@dividend,w
  2564  03BB  00F2               	movwf	?___lwmod
  2565  03BC  0008               	return
  2566  03BD                     __end_of___lwmod:	
  2567  03BD                     __ptext9:	
  2568 ;; *************** function _fanInit *****************
  2569 ;; Defined at:
  2570 ;;		line 497 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2, status,0
  2579 ;; Tracked objects:
  2580 ;;		On entry : 300/0
  2581 ;;		On exit  : 300/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2584 ;;      Params:         0       0       0       0
  2585 ;;      Locals:         0       0       0       0
  2586 ;;      Temps:          0       0       0       0
  2587 ;;      Totals:         0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    1
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_fanCtr
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _fanInit
  2600  03BD                     _fanInit:	
  2601  03BD                     l4069:	
  2602                           ;incstack = 0
  2603                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2604                           
  2605                           
  2606                           ;main.c: 500: PWMTH = 0x00;
  2607  03BD  0198               	clrf	24	;volatile
  2608                           
  2609                           ;main.c: 501: PWMT4L = 73;
  2610  03BE  3049               	movlw	73
  2611  03BF  009C               	movwf	28	;volatile
  2612                           
  2613                           ;main.c: 502: PWMD4L = fanDuty;
  2614  03C0  0846               	movf	_fanDuty,w
  2615  03C1  009B               	movwf	27	;volatile
  2616                           
  2617                           ;main.c: 503: PWMCON1 = 0xC0;
  2618  03C2  30C0               	movlw	192
  2619  03C3  0096               	movwf	22	;volatile
  2620                           
  2621                           ;main.c: 504: PWMCON2 = 0x00;
  2622  03C4  019D               	clrf	29	;volatile
  2623                           
  2624                           ;main.c: 505: PWMCON0 |= 0x30;
  2625  03C5  3030               	movlw	48
  2626  03C6  0495               	iorwf	21,f	;volatile
  2627  03C7  0008               	return
  2628  03C8                     __end_of_fanInit:	
  2629  03C8                     __ptext8:	
  2630 ;; *************** function _fanStop *****************
  2631 ;; Defined at:
  2632 ;;		line 508 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;		None
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		status,2
  2641 ;; Tracked objects:
  2642 ;;		On entry : 300/100
  2643 ;;		On exit  : 300/100
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2646 ;;      Params:         0       0       0       0
  2647 ;;      Locals:         0       0       0       0
  2648 ;;      Temps:          0       0       0       0
  2649 ;;      Totals:         0       0       0       0
  2650 ;;Total ram usage:        0 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    1
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_fanCtr
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _fanStop
  2662  03C8                     _fanStop:	
  2663                           
  2664                           ;main.c: 510: PWMD4L = 0;
  2665                           
  2666                           ;incstack = 0
  2667                           ; Regs used in _fanStop: [status,2]
  2668  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2669  03C9  019B               	clrf	27	;volatile
  2670                           
  2671                           ;main.c: 511: PWMCON0 &= 0xEF;
  2672  03CA  1215               	bcf	21,4	;volatile
  2673                           
  2674                           ;main.c: 512: PORTA &= 0xEF;
  2675  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  2676  03CC  1206               	bcf	6,4	;volatile
  2677  03CD  0008               	return
  2678  03CE                     __end_of_fanStop:	
  2679  03CE                     PL6:	
  2680  03CE  00F4               	movwf	??_ADC_Sample+1
  2681  03CF  01F5               	clrf	??_ADC_Sample+2
  2682  03D0  01F6               	clrf	??_ADC_Sample+3
  2683  03D1  0873               	movf	??_ADC_Sample,w
  2684  03D2  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2685  03D3  0874               	movf	??_ADC_Sample+1,w
  2686  03D4  1C03               	skipc
  2687  03D5  0F74               	incfsz	??_ADC_Sample+1,w
  2688  03D6  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2689  03D7  0875               	movf	??_ADC_Sample+2,w
  2690  03D8  1C03               	skipc
  2691  03D9  0F75               	incfsz	??_ADC_Sample+2,w
  2692  03DA  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2693  03DB  0876               	movf	??_ADC_Sample+3,w
  2694  03DC  0008               	return
  2695  03DD                     __end_ofPL6:	
  2696  03DD                     PL16:	
  2697  03DD  01CF               	clrf	ADC_Sample@adsum	;volatile
  2698  03DE  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2699  03DF  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2700  03E0  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2701  03E1  01D3               	clrf	ADC_Sample@admin	;volatile
  2702  03E2  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2703  03E3  01D5               	clrf	ADC_Sample@admax	;volatile
  2704  03E4  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2705  03E5  0008               	return
  2706  03E6                     __end_ofPL16:	
  2707  03E6                     PL24:	
  2708  03E6  0861               	movf	___fttol@f1,w
  2709  03E7  00E5               	movwf	??___fttol
  2710  03E8  0862               	movf	___fttol@f1+1,w
  2711  03E9  00E6               	movwf	??___fttol+1
  2712  03EA  0863               	movf	___fttol@f1+2,w
  2713  03EB  00E7               	movwf	??___fttol+2
  2714  03EC  0008               	return
  2715  03ED                     __end_ofPL24:	
  2716  03ED                     PL34:	
  2717  03ED  01D2               	clrf	?___ftdiv
  2718  03EE  01D3               	clrf	?___ftdiv+1
  2719  03EF  01D4               	clrf	?___ftdiv+2
  2720  03F0  0008               	return
  2721  03F1                     __end_ofPL34:	
  2722  03F1                     PL40:	
  2723  03F1  1003               	clrc
  2724  03F2  0CF4               	rrf	___ftpack@arg+2,f
  2725  03F3  0CF3               	rrf	___ftpack@arg+1,f
  2726  03F4  0CF2               	rrf	___ftpack@arg,f
  2727  03F5  0008               	return
  2728  03F6                     __end_ofPL40:	
  2729  03F6                     PL44:	
  2730  03F6  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2731  03F7  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2732  03F8  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2733  03F9  00D5               	movwf	ADC_Sample@admax	;volatile
  2734  03FA  0008               	return
  2735  03FB                     __end_ofPL44:	
  2736                           
  2737                           	psect	text2
  2738  0E83                     __ptext2:	
  2739 ;; *************** function _wuhuaCtr *****************
  2740 ;; Defined at:
  2741 ;;		line 574 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;		None
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;		None
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0, pclath, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 200/100
  2752 ;;		On exit  : 200/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2755 ;;      Params:         0       0       0       0
  2756 ;;      Locals:         0       0       0       0
  2757 ;;      Temps:          0       0       0       0
  2758 ;;      Totals:         0       0       0       0
  2759 ;;Total ram usage:        0 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    2
  2762 ;; This function calls:
  2763 ;;		_pwmInit
  2764 ;;		_pwmStop
  2765 ;; This function is called by:
  2766 ;;		_workCtr
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _wuhuaCtr
  2772  0E83                     _wuhuaCtr:	
  2773                           
  2774                           ;main.c: 576: if(count1s == 0)
  2775                           
  2776                           ;incstack = 0
  2777                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2778  0E83  1283               	bcf	3,5	;RP0=0, select bank0
  2779  0E84  0848               	movf	_count1s,w
  2780  0E85  1D03               	btfss	3,2
  2781  0E86  2E9E               	goto	l4343
  2782                           
  2783                           ;main.c: 577: {
  2784                           ;main.c: 578: if(++count10s >= 20)
  2785  0E87  3014               	movlw	20
  2786  0E88  0AC5               	incf	_count10s,f
  2787  0E89  0245               	subwf	_count10s,w
  2788  0E8A  1803               	btfsc	3,0
  2789                           
  2790                           ;main.c: 579: {
  2791                           ;main.c: 580: count10s = 0;
  2792  0E8B  01C5               	clrf	_count10s
  2793                           
  2794                           ;main.c: 581: }
  2795                           ;main.c: 582: if(workStep == 0 && wuhuaFlag == 0 && powerFlag > 0)
  2796  0E8C  087B               	movf	_workStep,w
  2797  0E8D  1D03               	btfss	3,2
  2798  0E8E  2E9D               	goto	l4341
  2799  0E8F  0847               	movf	_wuhuaFlag,w
  2800  0E90  1D03               	btfss	3,2
  2801  0E91  2E9D               	goto	l4341
  2802  0E92  083E               	movf	_powerFlag,w
  2803  0E93  1903               	btfsc	3,2
  2804  0E94  2E9D               	goto	l4341
  2805                           
  2806                           ;main.c: 583: {
  2807                           ;main.c: 584: if(++closeTime > 200)
  2808  0E95  30C9               	movlw	201
  2809  0E96  0ABC               	incf	_closeTime,f
  2810  0E97  023C               	subwf	_closeTime,w
  2811  0E98  1C03               	skipc
  2812  0E99  2E9E               	goto	l4343
  2813                           
  2814                           ;main.c: 585: {
  2815                           ;main.c: 586: closeTime = 0;
  2816  0E9A  01BC               	clrf	_closeTime
  2817                           
  2818                           ;main.c: 587: powerFlag = 0;
  2819  0E9B  01BE               	clrf	_powerFlag
  2820  0E9C  2E9E               	goto	l4343
  2821  0E9D                     l4341:	
  2822                           
  2823                           ;main.c: 590: else
  2824                           ;main.c: 591: {
  2825                           ;main.c: 592: closeTime = 0;
  2826  0E9D  01BC               	clrf	_closeTime
  2827  0E9E                     l4343:	
  2828                           
  2829                           ;main.c: 593: }
  2830                           ;main.c: 594: }
  2831                           ;main.c: 595: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2832  0E9E  0347               	decf	_wuhuaFlag,w
  2833  0E9F  1903               	btfsc	3,2
  2834  0EA0  2EA9               	goto	l4349
  2835  0EA1  3002               	movlw	2
  2836  0EA2  0647               	xorwf	_wuhuaFlag,w
  2837  0EA3  1D03               	btfss	3,2
  2838  0EA4  2EAA               	goto	l4351
  2839  0EA5  300A               	movlw	10
  2840  0EA6  0245               	subwf	_count10s,w
  2841  0EA7  1803               	skipnc
  2842  0EA8  2EAA               	goto	l4351
  2843  0EA9                     l4349:	
  2844                           
  2845                           ;main.c: 596: {
  2846                           ;main.c: 597: pwmInit();
  2847  0EA9  2EAB               	ljmp	l4053
  2848  0EAA                     l4351:	
  2849                           ;main.c: 626: }
  2850                           
  2851                           
  2852                           ;main.c: 627: else
  2853                           ;main.c: 628: {
  2854                           ;main.c: 629: pwmStop();
  2855  0EAA  2EB9               	ljmp	l4063
  2856  0EAB                     __end_of_wuhuaCtr:	
  2857  0EAB                     __ptext4:	
  2858 ;; *************** function _pwmInit *****************
  2859 ;; Defined at:
  2860 ;;		line 478 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      void 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 300/0
  2871 ;;		On exit  : 300/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2874 ;;      Params:         0       0       0       0
  2875 ;;      Locals:         0       0       0       0
  2876 ;;      Temps:          0       0       0       0
  2877 ;;      Totals:         0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    1
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_wuhuaCtr
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _pwmInit
  2890  0EAB                     _pwmInit:	
  2891  0EAB                     l4053:	
  2892                           ;incstack = 0
  2893                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2894                           
  2895                           
  2896                           ;main.c: 481: PWMTH = 0x00;
  2897  0EAB  0198               	clrf	24	;volatile
  2898                           
  2899                           ;main.c: 482: PWMTL = 73;
  2900  0EAC  3049               	movlw	73
  2901  0EAD  0097               	movwf	23	;volatile
  2902                           
  2903                           ;main.c: 483: PWMD23H = 0x00;
  2904  0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  2905  0EAF  019E               	clrf	30	;volatile
  2906                           
  2907                           ;main.c: 484: PWMD3L = 32;
  2908  0EB0  3020               	movlw	32
  2909  0EB1  009C               	movwf	28	;volatile
  2910                           
  2911                           ;main.c: 485: PWMCON1 = 0xC0;
  2912  0EB2  30C0               	movlw	192
  2913  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0EB4  0096               	movwf	22	;volatile
  2915                           
  2916                           ;main.c: 486: PWMCON2 = 0x00;
  2917  0EB5  019D               	clrf	29	;volatile
  2918                           
  2919                           ;main.c: 487: PWMCON0 |= 0x28;
  2920  0EB6  3028               	movlw	40
  2921  0EB7  0495               	iorwf	21,f	;volatile
  2922  0EB8  0008               	return
  2923  0EB9                     __end_of_pwmInit:	
  2924  0EB9                     __ptext3:	
  2925 ;; *************** function _pwmStop *****************
  2926 ;; Defined at:
  2927 ;;		line 490 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		status,2
  2936 ;; Tracked objects:
  2937 ;;		On entry : 300/0
  2938 ;;		On exit  : 300/100
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2941 ;;      Params:         0       0       0       0
  2942 ;;      Locals:         0       0       0       0
  2943 ;;      Temps:          0       0       0       0
  2944 ;;      Totals:         0       0       0       0
  2945 ;;Total ram usage:        0 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    1
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_wuhuaCtr
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _pwmStop
  2957  0EB9                     _pwmStop:	
  2958  0EB9                     l4063:	
  2959                           ;incstack = 0
  2960                           ; Regs used in _pwmStop: [status,2]
  2961                           
  2962                           
  2963                           ;main.c: 492: PWMD3L = 0;
  2964  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  2965  0EBA  019C               	clrf	28	;volatile
  2966                           
  2967                           ;main.c: 493: PWMCON0 &= 0xF7;
  2968  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0EBC  1195               	bcf	21,3	;volatile
  2970                           
  2971                           ;main.c: 494: PORTA &= 0xF7;
  2972  0EBD  1683               	bsf	3,5	;RP0=1, select bank1
  2973  0EBE  1186               	bcf	6,3	;volatile
  2974  0EBF  0008               	return
  2975  0EC0                     __end_of_pwmStop:	
  2976                           
  2977                           	psect	text12
  2978  0F75                     __ptext12:	
  2979 ;; *************** function _bujinCtr *****************
  2980 ;; Defined at:
  2981 ;;		line 633 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;		None
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  tempStep        1    4[COMMON] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 200/100
  2992 ;;		On exit  : 300/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2995 ;;      Params:         0       0       0       0
  2996 ;;      Locals:         1       0       0       0
  2997 ;;      Temps:          2       0       0       0
  2998 ;;      Totals:         3       0       0       0
  2999 ;;Total ram usage:        3 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    1
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_workCtr
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           
  3010                           ;psect for function _bujinCtr
  3011  0F75                     _bujinCtr:	
  3012  0F75                     l4353:	
  3013                           ;incstack = 0
  3014                           ; Regs used in _bujinCtr: [wreg-fsr0h+status,2+status,0]
  3015                           
  3016                           
  3017                           ;main.c: 635: if(bujinFlag || motorStep > 0)
  3018  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  3019  0F76  083F               	movf	_bujinFlag,w
  3020  0F77  1D03               	btfss	3,2
  3021  0F78  2F7D               	goto	l4357
  3022  0F79  0828               	movf	_motorStep,w
  3023  0F7A  0429               	iorwf	_motorStep+1,w
  3024  0F7B  1903               	btfsc	3,2
  3025  0F7C  2FE9               	goto	l4389
  3026  0F7D                     l4357:	
  3027                           
  3028                           ;main.c: 636: {
  3029                           ;main.c: 637: if(bujinFlag == 1)
  3030  0F7D  0B3F               	decfsz	_bujinFlag,w
  3031  0F7E  2F81               	goto	l4361
  3032                           
  3033                           ;main.c: 638: {
  3034                           ;main.c: 639: maxMotorStep = 512;
  3035  0F7F  3002               	movlw	2
  3036  0F80  2F86               	goto	L5
  3037  0F81                     l4361:	
  3038                           ;main.c: 640: }
  3039                           
  3040                           
  3041                           ;main.c: 641: else if(bujinFlag == 2)
  3042  0F81  3002               	movlw	2
  3043  0F82  063F               	xorwf	_bujinFlag,w
  3044  0F83  1D03               	btfss	3,2
  3045  0F84  2F88               	goto	l4365
  3046                           
  3047                           ;main.c: 642: {
  3048                           ;main.c: 643: maxMotorStep = 1024;
  3049  0F85  3004               	movlw	4
  3050  0F86                     L5:	
  3051  0F86  01A6               	clrf	_maxMotorStep
  3052  0F87  2F8F               	goto	L4
  3053  0F88                     l4365:	
  3054                           ;main.c: 644: }
  3055                           
  3056                           
  3057                           ;main.c: 645: else if(bujinFlag == 3)
  3058  0F88  3003               	movlw	3
  3059  0F89  063F               	xorwf	_bujinFlag,w
  3060  0F8A  1D03               	btfss	3,2
  3061  0F8B  2F90               	goto	l4369
  3062                           
  3063                           ;main.c: 646: {
  3064                           ;main.c: 647: maxMotorStep = 1360;
  3065  0F8C  3050               	movlw	80
  3066  0F8D  00A6               	movwf	_maxMotorStep
  3067  0F8E  3005               	movlw	5
  3068  0F8F                     L4:	
  3069  0F8F  00A7               	movwf	_maxMotorStep+1
  3070  0F90                     l4369:	
  3071                           
  3072                           ;main.c: 648: }
  3073                           ;main.c: 649: if(++motorStep >= (maxMotorStep*2))
  3074  0F90  0827               	movf	_maxMotorStep+1,w
  3075  0F91  00F3               	movwf	??_bujinCtr+1
  3076  0F92  0826               	movf	_maxMotorStep,w
  3077  0F93  00F2               	movwf	??_bujinCtr
  3078  0F94  1003               	clrc
  3079  0F95  0DF2               	rlf	??_bujinCtr,f
  3080  0F96  0DF3               	rlf	??_bujinCtr+1,f
  3081  0F97  0AA8               	incf	_motorStep,f
  3082  0F98  1903               	skipnz
  3083  0F99  0AA9               	incf	_motorStep+1,f
  3084  0F9A  0873               	movf	??_bujinCtr+1,w
  3085  0F9B  0229               	subwf	_motorStep+1,w
  3086  0F9C  1D03               	skipz
  3087  0F9D  2FA0               	goto	u4405
  3088  0F9E  0872               	movf	??_bujinCtr,w
  3089  0F9F  0228               	subwf	_motorStep,w
  3090  0FA0                     u4405:	
  3091  0FA0  1C03               	skipc
  3092  0FA1  2FA4               	goto	l4373
  3093                           
  3094                           ;main.c: 650: {
  3095                           ;main.c: 651: motorStep = 0;
  3096  0FA2  01A8               	clrf	_motorStep
  3097  0FA3  01A9               	clrf	_motorStep+1
  3098  0FA4                     l4373:	
  3099                           
  3100                           ;main.c: 652: }
  3101                           ;main.c: 653: unsigned char tempStep = motorStep % 8;
  3102  0FA4  0828               	movf	_motorStep,w
  3103  0FA5  00F4               	movwf	bujinCtr@tempStep
  3104  0FA6  3007               	movlw	7
  3105  0FA7  05F4               	andwf	bujinCtr@tempStep,f
  3106                           
  3107                           ;main.c: 654: if(motorStep < maxMotorStep)
  3108  0FA8  0827               	movf	_maxMotorStep+1,w
  3109  0FA9  0229               	subwf	_motorStep+1,w
  3110  0FAA  1D03               	skipz
  3111  0FAB  2FAE               	goto	u4415
  3112  0FAC  0826               	movf	_maxMotorStep,w
  3113  0FAD  0228               	subwf	_motorStep,w
  3114  0FAE                     u4415:	
  3115  0FAE  1C03               	btfss	3,0
  3116  0FAF  2FD1               	goto	l4383
  3117  0FB0  2FDD               	goto	l4387
  3118  0FB1                     l1089:	
  3119                           ;main.c: 658: {
  3120                           ;main.c: 659: case 0:
  3121                           
  3122                           
  3123                           ;main.c: 660: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 0;
  3124  0FB1  27FA               	fcall	PL32	;call to abstracted procedure
  3125  0FB2  1386               	bcf	6,7	;volatile
  3126                           
  3127                           ;main.c: 661: break;
  3128  0FB3  0008               	return
  3129  0FB4                     l1091:	
  3130                           ;main.c: 662: case 1:
  3131                           
  3132                           
  3133                           ;main.c: 663: RA5 = 1;RA6 = 1;RA7 = 0;RB7 = 0;
  3134  0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0FB5  1686               	bsf	6,5	;volatile
  3136                           
  3137                           ;main.c: 664: break;
  3138  0FB6  2FEF               	ljmp	PL26	;call to abstracted procedure
  3139  0FB7                     l1092:	
  3140                           ;main.c: 665: case 2:
  3141                           
  3142                           
  3143                           ;main.c: 666: RA5 = 0;RA6 = 1;RA7 = 0;RB7 = 0;
  3144  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  3145  0FB8  1286               	bcf	6,5	;volatile
  3146                           
  3147                           ;main.c: 667: break;
  3148  0FB9  2FEF               	ljmp	PL26	;call to abstracted procedure
  3149  0FBA                     l1093:	
  3150                           ;main.c: 668: case 3:
  3151                           
  3152                           
  3153                           ;main.c: 669: RA5 = 0;RA6 = 1;RA7 = 1;RB7 = 0;
  3154  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0FBB  1286               	bcf	6,5	;volatile
  3156  0FBC  1706               	bsf	6,6	;volatile
  3157  0FBD  1786               	bsf	6,7	;volatile
  3158  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  3159  0FBF  1386               	bcf	6,7	;volatile
  3160                           
  3161                           ;main.c: 670: break;
  3162  0FC0  0008               	return
  3163  0FC1                     l1094:	
  3164                           ;main.c: 671: case 4:
  3165                           
  3166                           
  3167                           ;main.c: 672: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 0;
  3168  0FC1  27F4               	fcall	PL30	;call to abstracted procedure
  3169  0FC2  1386               	bcf	6,7	;volatile
  3170                           
  3171                           ;main.c: 673: break;
  3172  0FC3  0008               	return
  3173  0FC4                     l1095:	
  3174                           ;main.c: 674: case 5:
  3175                           
  3176                           
  3177                           ;main.c: 675: RA5 = 0;RA6 = 0;RA7 = 1;RB7 = 1;
  3178  0FC4  27F4               	fcall	PL30	;call to abstracted procedure
  3179  0FC5  1786               	bsf	6,7	;volatile
  3180                           
  3181                           ;main.c: 676: break;
  3182  0FC6  0008               	return
  3183  0FC7                     l1096:	
  3184                           ;main.c: 677: case 6:
  3185                           
  3186                           
  3187                           ;main.c: 678: RA5 = 0;RA6 = 0;RA7 = 0;RB7 = 1;
  3188  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  3189  0FC8  1286               	bcf	6,5	;volatile
  3190  0FC9  1306               	bcf	6,6	;volatile
  3191  0FCA  1386               	bcf	6,7	;volatile
  3192  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  3193  0FCC  1786               	bsf	6,7	;volatile
  3194                           
  3195                           ;main.c: 679: break;
  3196  0FCD  0008               	return
  3197  0FCE                     l1097:	
  3198                           ;main.c: 680: case 7:
  3199                           
  3200                           
  3201                           ;main.c: 681: RA5 = 1;RA6 = 0;RA7 = 0;RB7 = 1;
  3202  0FCE  27FA               	fcall	PL32	;call to abstracted procedure
  3203  0FCF  1786               	bsf	6,7	;volatile
  3204                           
  3205                           ;main.c: 682: break;
  3206  0FD0  0008               	return
  3207  0FD1                     l4383:	
  3208  0FD1  0874               	movf	bujinCtr@tempStep,w
  3209                           
  3210                           ; Switch size 1, requested type "space"
  3211                           ; Number of cases is 8, Range of values is 0 to 7
  3212                           ; switch strategies available:
  3213                           ; Name         Instructions Cycles
  3214                           ; direct_byte           23     7 (fixed)
  3215                           ; simple_byte           25    13 (average)
  3216                           ; jumptable            260     6 (fixed)
  3217                           ;	Chosen strategy is direct_byte
  3218  0FD2  0084               	movwf	4
  3219  0FD3  3008               	movlw	8
  3220  0FD4  0204               	subwf	4,w
  3221  0FD5  1803               	skipnc
  3222  0FD6  0008               	return
  3223  0FD7  3008               	movlw	high S4755
  3224  0FD8  008A               	movwf	10
  3225  0FD9  1003               	clrc
  3226  0FDA  0D04               	rlf	4,w
  3227  0FDB  3E17               	addlw	low S4755
  3228  0FDC  0082               	movwf	2
  3229  0FDD                     l4387:	
  3230  0FDD  0874               	movf	bujinCtr@tempStep,w
  3231                           
  3232                           ; Switch size 1, requested type "space"
  3233                           ; Number of cases is 8, Range of values is 0 to 7
  3234                           ; switch strategies available:
  3235                           ; Name         Instructions Cycles
  3236                           ; direct_byte           23     7 (fixed)
  3237                           ; simple_byte           25    13 (average)
  3238                           ; jumptable            260     6 (fixed)
  3239                           ;	Chosen strategy is direct_byte
  3240  0FDE  0084               	movwf	4
  3241  0FDF  3008               	movlw	8
  3242  0FE0  0204               	subwf	4,w
  3243  0FE1  1803               	skipnc
  3244  0FE2  0008               	return
  3245  0FE3  3008               	movlw	high S4757
  3246  0FE4  008A               	movwf	10
  3247  0FE5  1003               	clrc
  3248  0FE6  0D04               	rlf	4,w
  3249  0FE7  3E27               	addlw	low S4757
  3250  0FE8  0082               	movwf	2
  3251  0FE9                     l4389:	
  3252                           
  3253                           ;main.c: 717: else
  3254                           ;main.c: 718: {
  3255                           ;main.c: 719: PORTA &= 0x1F;
  3256  0FE9  301F               	movlw	31
  3257  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  3258  0FEB  0586               	andwf	6,f	;volatile
  3259                           
  3260                           ;main.c: 720: PORTB &= 0x7F;
  3261  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  3262  0FED  1386               	bcf	6,7	;volatile
  3263  0FEE  0008               	return
  3264  0FEF                     __end_of_bujinCtr:	
  3265  0FEF                     PL26:	
  3266  0FEF  1706               	bsf	6,6	;volatile
  3267  0FF0  1386               	bcf	6,7	;volatile
  3268  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  3269  0FF2  1386               	bcf	6,7	;volatile
  3270  0FF3  0008               	return
  3271  0FF4                     __end_ofPL26:	
  3272  0FF4                     PL30:	
  3273  0FF4  1683               	bsf	3,5	;RP0=1, select bank1
  3274  0FF5  1286               	bcf	6,5	;volatile
  3275  0FF6  1306               	bcf	6,6	;volatile
  3276  0FF7  1786               	bsf	6,7	;volatile
  3277  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0FF9  0008               	return
  3279  0FFA                     __end_ofPL30:	
  3280  0FFA                     PL32:	
  3281  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  3282  0FFB  1686               	bsf	6,5	;volatile
  3283  0FFC  1306               	bcf	6,6	;volatile
  3284  0FFD  1386               	bcf	6,7	;volatile
  3285  0FFE  1283               	bcf	3,5	;RP0=0, select bank0
  3286  0FFF  0008               	return
  3287  1000                     __end_ofPL32:	
  3288                           
  3289                           	psect	swtext1
  3290  0817                     __pswtext1:	
  3291  0817                     S4755:	
  3292  0817  158A  2FB1         	ljmp	l1089
  3293  0819  158A  2FB4         	ljmp	l1091
  3294  081B  158A  2FB7         	ljmp	l1092
  3295  081D  158A  2FBA         	ljmp	l1093
  3296  081F  158A  2FC1         	ljmp	l1094
  3297  0821  158A  2FC4         	ljmp	l1095
  3298  0823  158A  2FC7         	ljmp	l1096
  3299  0825  158A  2FCE         	ljmp	l1097
  3300                           
  3301                           	psect	swtext2
  3302  0827                     __pswtext2:	
  3303  0827                     S4757:	
  3304  0827  158A  2FCE         	ljmp	l1097
  3305  0829  158A  2FC7         	ljmp	l1096
  3306  082B  158A  2FC4         	ljmp	l1095
  3307  082D  158A  2FC1         	ljmp	l1094
  3308  082F  158A  2FBA         	ljmp	l1093
  3309  0831  158A  2FB7         	ljmp	l1092
  3310  0833  158A  2FB4         	ljmp	l1091
  3311  0835  158A  2FB1         	ljmp	l1089
  3312                           
  3313                           	psect	text17
  3314  07D5                     __ptext17:	
  3315 ;; *************** function _chrgCtr *****************
  3316 ;; Defined at:
  3317 ;;		line 371 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/100
  3328 ;;		On exit  : 300/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3331 ;;      Params:         0       0       0       0
  3332 ;;      Locals:         0       0       0       0
  3333 ;;      Temps:          0       0       0       0
  3334 ;;      Totals:         0       0       0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    1
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_main
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function _chrgCtr
  3347  07D5                     _chrgCtr:	
  3348                           
  3349                           ;main.c: 373: if(PORTB & 0x20)
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  3353  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  3354  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  3355  07D7  1E86               	btfss	6,5	;volatile
  3356  07D8  2FEF               	goto	l3805
  3357  07D9  3010               	movlw	16
  3358                           
  3359                           ;main.c: 374: {
  3360                           ;main.c: 375: chrgFlag = 1;
  3361  07DA  01C3               	clrf	_chrgFlag
  3362  07DB  0AC3               	incf	_chrgFlag,f
  3363                           
  3364                           ;main.c: 376: firstLock = 0;
  3365  07DC  01EE               	clrf	_firstLock
  3366                           
  3367                           ;main.c: 377: lowBatLock = 0;
  3368  07DD  01C0               	clrf	_lowBatLock
  3369                           
  3370                           ;main.c: 378: if(power_ad > 4140)
  3371  07DE  0223               	subwf	_power_ad+1,w	;volatile
  3372  07DF  302D               	movlw	45
  3373  07E0  1903               	skipnz
  3374  07E1  0222               	subwf	_power_ad,w	;volatile
  3375  07E2  1C03               	skipc
  3376  07E3  2FED               	goto	l3803
  3377                           
  3378                           ;main.c: 379: {
  3379                           ;main.c: 380: if(++chrgFullTime > 200)
  3380  07E4  30C9               	movlw	201
  3381  07E5  0AC1               	incf	_chrgFullTime,f
  3382  07E6  0241               	subwf	_chrgFullTime,w
  3383  07E7  1C03               	skipc
  3384  07E8  0008               	return
  3385                           
  3386                           ;main.c: 381: {
  3387                           ;main.c: 382: chrgFullTime = 0;
  3388  07E9  01C1               	clrf	_chrgFullTime
  3389                           
  3390                           ;main.c: 383: chrgFullFlag = 1;
  3391  07EA  01C2               	clrf	_chrgFullFlag
  3392  07EB  0AC2               	incf	_chrgFullFlag,f
  3393  07EC  0008               	return
  3394  07ED                     l3803:	
  3395                           
  3396                           ;main.c: 386: else
  3397                           ;main.c: 387: {
  3398                           ;main.c: 388: chrgFullTime = 0;
  3399  07ED  01C1               	clrf	_chrgFullTime
  3400  07EE  0008               	return
  3401  07EF                     l3805:	
  3402                           
  3403                           ;main.c: 392: else
  3404                           ;main.c: 393: {
  3405                           ;main.c: 394: chrgFlag = 0;
  3406  07EF  01C3               	clrf	_chrgFlag
  3407                           
  3408                           ;main.c: 395: chrgFullTime = 0;
  3409  07F0  01C1               	clrf	_chrgFullTime
  3410                           
  3411                           ;main.c: 396: chrgFullFlag = 0;
  3412  07F1  01C2               	clrf	_chrgFullFlag
  3413  07F2  0008               	return
  3414  07F3                     __end_of_chrgCtr:	
  3415                           
  3416                           	psect	text21
  3417  0F00                     __ptext21:	
  3418 ;; *************** function _KeyServer *****************
  3419 ;; Defined at:
  3420 ;;		line 111 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0
  3429 ;; Tracked objects:
  3430 ;;		On entry : 300/0
  3431 ;;		On exit  : 300/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3434 ;;      Params:         0       0       0       0
  3435 ;;      Locals:         0       0       0       0
  3436 ;;      Temps:          0       0       0       0
  3437 ;;      Totals:         0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    1
  3441 ;; This function calls:
  3442 ;;		Nothing
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           
  3449                           ;psect for function _KeyServer
  3450  0F00                     _KeyServer:	
  3451                           
  3452                           ;main.c: 113: static unsigned char KeyOldFlag = 0;
  3453                           ;main.c: 114: if (KeyFlag[0])
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3457  0F00  0832               	movf	_KeyFlag,w	;volatile
  3458  0F01  1903               	btfsc	3,2
  3459  0F02  2F6B               	goto	l3745
  3460                           
  3461                           ;main.c: 115: {
  3462                           ;main.c: 116: if (KeyFlag[0] != KeyOldFlag)
  3463  0F03  0832               	movf	_KeyFlag,w	;volatile
  3464  0F04  063A               	xorwf	KeyServer@KeyOldFlag,w
  3465  0F05  1903               	skipnz
  3466  0F06  2F4A               	goto	l3729
  3467                           
  3468                           ;main.c: 117: {
  3469                           ;main.c: 119: KeyOldFlag ^= KeyFlag[0];
  3470  0F07  0832               	movf	_KeyFlag,w	;volatile
  3471  0F08  06BA               	xorwf	KeyServer@KeyOldFlag,f
  3472                           
  3473                           ;main.c: 120: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0 && powerFla
      +                          g > 0)
  3474  0F09  183A               	btfsc	KeyServer@KeyOldFlag,0
  3475  0F0A  1C32               	btfss	_KeyFlag,0	;volatile
  3476  0F0B  2F2A               	goto	l3705
  3477  0F0C  086E               	movf	_firstLock,w
  3478  0F0D  1D03               	btfss	3,2
  3479  0F0E  2F2A               	goto	l3705
  3480  0F0F  083E               	movf	_powerFlag,w
  3481  0F10  1903               	btfsc	3,2
  3482  0F11  2F2A               	goto	l3705
  3483                           
  3484                           ;main.c: 121: {
  3485                           ;main.c: 123: if(lowBatLock == 1)
  3486  0F12  0B40               	decfsz	_lowBatLock,w
  3487  0F13  2F19               	goto	l3693
  3488                           
  3489                           ;main.c: 124: {
  3490                           ;main.c: 125: shanshuoTime2 = 450;
  3491  0F14  30C2               	movlw	194
  3492  0F15  00AE               	movwf	_shanshuoTime2
  3493  0F16  3001               	movlw	1
  3494  0F17  00AF               	movwf	_shanshuoTime2+1
  3495                           
  3496                           ;main.c: 126: }
  3497  0F18  2F1E               	goto	l3697
  3498  0F19                     l3693:	
  3499                           
  3500                           ;main.c: 127: else if(++wuhuaFlag > 2)
  3501  0F19  3003               	movlw	3
  3502  0F1A  0AC7               	incf	_wuhuaFlag,f
  3503  0F1B  0247               	subwf	_wuhuaFlag,w
  3504  0F1C  1803               	btfsc	3,0
  3505                           
  3506                           ;main.c: 128: {
  3507                           ;main.c: 129: wuhuaFlag = 0;
  3508  0F1D  01C7               	clrf	_wuhuaFlag
  3509  0F1E                     l3697:	
  3510                           
  3511                           ;main.c: 130: }
  3512                           ;main.c: 131: if(wuhuaFlag >= 2)
  3513  0F1E  3002               	movlw	2
  3514  0F1F  0247               	subwf	_wuhuaFlag,w
  3515  0F20  1C03               	skipc
  3516  0F21  2F28               	goto	l3703
  3517                           
  3518                           ;main.c: 132: {
  3519                           ;main.c: 133: shanshuoTime2 = 450;
  3520  0F22  30C2               	movlw	194
  3521  0F23  00AE               	movwf	_shanshuoTime2
  3522  0F24  3001               	movlw	1
  3523  0F25  00AF               	movwf	_shanshuoTime2+1
  3524                           
  3525                           ;main.c: 134: count10s = 0;
  3526  0F26  01C5               	clrf	_count10s
  3527                           
  3528                           ;main.c: 135: }
  3529  0F27  2F2A               	goto	l3705
  3530  0F28                     l3703:	
  3531                           
  3532                           ;main.c: 136: else
  3533                           ;main.c: 137: {
  3534                           ;main.c: 138: shanshuoTime2 = 0;
  3535  0F28  01AE               	clrf	_shanshuoTime2
  3536  0F29  01AF               	clrf	_shanshuoTime2+1
  3537  0F2A                     l3705:	
  3538                           
  3539                           ;main.c: 139: }
  3540                           ;main.c: 140: }
  3541                           ;main.c: 141: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0 && powerFla
      +                          g > 0)
  3542  0F2A  18BA               	btfsc	KeyServer@KeyOldFlag,1
  3543  0F2B  1CB2               	btfss	_KeyFlag,1	;volatile
  3544  0F2C  2F48               	goto	l3727
  3545  0F2D  086E               	movf	_firstLock,w
  3546  0F2E  1D03               	btfss	3,2
  3547  0F2F  2F48               	goto	l3727
  3548  0F30  083E               	movf	_powerFlag,w
  3549  0F31  1903               	btfsc	3,2
  3550  0F32  2F48               	goto	l3727
  3551                           
  3552                           ;main.c: 142: {
  3553                           ;main.c: 144: if(lowBatLock == 1)
  3554  0F33  0B40               	decfsz	_lowBatLock,w
  3555  0F34  2F38               	goto	l3717
  3556                           
  3557                           ;main.c: 145: {
  3558                           ;main.c: 146: shanshuoTime = 450;
  3559  0F35  2770  158A         	fcall	PL42	;call to abstracted procedure
  3560                           
  3561                           ;main.c: 147: }
  3562  0F37  2F3F               	goto	l3721
  3563  0F38                     l3717:	
  3564                           
  3565                           ;main.c: 148: else if(++workStep > 3)
  3566  0F38  3004               	movlw	4
  3567  0F39  0AFB               	incf	_workStep,f
  3568  0F3A  027B               	subwf	_workStep,w
  3569  0F3B  1C03               	skipc
  3570  0F3C  2F3F               	goto	l3721
  3571                           
  3572                           ;main.c: 149: {
  3573                           ;main.c: 150: workStep = 0;
  3574  0F3D  01FB               	clrf	_workStep
  3575                           
  3576                           ;main.c: 151: bujinFlag = 0;
  3577  0F3E  01BF               	clrf	_bujinFlag
  3578  0F3F                     l3721:	
  3579                           
  3580                           ;main.c: 152: }
  3581                           ;main.c: 153: if(workStep >= 2)
  3582  0F3F  3002               	movlw	2
  3583  0F40  027B               	subwf	_workStep,w
  3584  0F41  1C03               	skipc
  3585  0F42  2F46               	goto	l3725
  3586                           
  3587                           ;main.c: 154: {
  3588                           ;main.c: 155: shanshuoTime = 450;
  3589  0F43  2770  158A         	fcall	PL42	;call to abstracted procedure
  3590                           
  3591                           ;main.c: 156: }
  3592  0F45  2F48               	goto	l3727
  3593  0F46                     l3725:	
  3594                           
  3595                           ;main.c: 157: else
  3596                           ;main.c: 158: {
  3597                           ;main.c: 159: shanshuoTime = 0;
  3598  0F46  01B0               	clrf	_shanshuoTime
  3599  0F47  01B1               	clrf	_shanshuoTime+1
  3600  0F48                     l3727:	
  3601                           
  3602                           ;main.c: 160: }
  3603                           ;main.c: 162: }
  3604                           ;main.c: 164: KeyOldFlag = KeyFlag[0];
  3605  0F48  0832               	movf	_KeyFlag,w	;volatile
  3606  0F49  00BA               	movwf	KeyServer@KeyOldFlag
  3607  0F4A                     l3729:	
  3608                           
  3609                           ;main.c: 165: }
  3610                           ;main.c: 166: if(firstLock == 0 && KeyOldFlag & 0x4)
  3611  0F4A  086E               	movf	_firstLock,w
  3612  0F4B  1903               	btfsc	3,2
  3613  0F4C  1D3A               	btfss	KeyServer@KeyOldFlag,2
  3614  0F4D  0008               	return
  3615                           
  3616                           ;main.c: 167: {
  3617                           ;main.c: 168: if(++keyCount >= 400)
  3618  0F4E  0AA4               	incf	_keyCount,f
  3619  0F4F  1903               	skipnz
  3620  0F50  0AA5               	incf	_keyCount+1,f
  3621  0F51  3001               	movlw	1
  3622  0F52  0225               	subwf	_keyCount+1,w
  3623  0F53  3090               	movlw	144
  3624  0F54  1903               	skipnz
  3625  0F55  0224               	subwf	_keyCount,w
  3626  0F56  1C03               	skipc
  3627  0F57  0008               	return
  3628                           
  3629                           ;main.c: 169: {
  3630                           ;main.c: 170: keyCount = 0;
  3631  0F58  01A4               	clrf	_keyCount
  3632  0F59  01A5               	clrf	_keyCount+1
  3633                           
  3634                           ;main.c: 171: if(longKeyFlag == 0)
  3635  0F5A  083D               	movf	_longKeyFlag,w
  3636  0F5B  1D03               	btfss	3,2
  3637  0F5C  0008               	return
  3638                           
  3639                           ;main.c: 172: {
  3640                           ;main.c: 173: longKeyFlag = 1;
  3641  0F5D  01BD               	clrf	_longKeyFlag
  3642  0F5E  0ABD               	incf	_longKeyFlag,f
  3643                           
  3644                           ;main.c: 174: if(powerFlag > 0)
  3645  0F5F  083E               	movf	_powerFlag,w
  3646  0F60  1903               	btfsc	3,2
  3647  0F61  2F66               	goto	l961
  3648                           
  3649                           ;main.c: 175: {
  3650                           ;main.c: 176: powerFlag = 0;
  3651  0F62  01BE               	clrf	_powerFlag
  3652                           
  3653                           ;main.c: 177: workStep = 0;
  3654  0F63  01FB               	clrf	_workStep
  3655                           
  3656                           ;main.c: 178: wuhuaFlag = 0;
  3657  0F64  01C7               	clrf	_wuhuaFlag
  3658                           
  3659                           ;main.c: 179: }
  3660  0F65  0008               	return
  3661  0F66                     l961:	
  3662                           
  3663                           ;main.c: 180: else
  3664                           ;main.c: 181: {
  3665                           ;main.c: 182: powerFlag = 1;
  3666  0F66  01BE               	clrf	_powerFlag
  3667  0F67  0ABE               	incf	_powerFlag,f
  3668                           
  3669                           ;main.c: 183: workStep = 1;
  3670  0F68  01FB               	clrf	_workStep
  3671  0F69  0AFB               	incf	_workStep,f
  3672  0F6A  0008               	return
  3673  0F6B                     l3745:	
  3674                           
  3675                           ;main.c: 189: else
  3676                           ;main.c: 190: {
  3677                           ;main.c: 191: KeyOldFlag = 0;
  3678  0F6B  01BA               	clrf	KeyServer@KeyOldFlag
  3679                           
  3680                           ;main.c: 192: longKeyFlag = 0;
  3681  0F6C  01BD               	clrf	_longKeyFlag
  3682                           
  3683                           ;main.c: 193: keyCount = 0;
  3684  0F6D  01A4               	clrf	_keyCount
  3685  0F6E  01A5               	clrf	_keyCount+1
  3686  0F6F  0008               	return
  3687  0F70                     __end_of_KeyServer:	
  3688  0F70                     PL42:	
  3689  0F70  30C2               	movlw	194
  3690  0F71  00B0               	movwf	_shanshuoTime
  3691  0F72  3001               	movlw	1
  3692  0F73  00B1               	movwf	_shanshuoTime+1
  3693  0F74  0008               	return
  3694  0F75                     __end_ofPL42:	
  3695                           
  3696                           	psect	text22
  3697  03FB                     __ptext22:	
  3698 ;; *************** function _Init_System *****************
  3699 ;; Defined at:
  3700 ;;		line 60 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      void 
  3707 ;; Registers used:
  3708 ;;		wreg, status,2
  3709 ;; Tracked objects:
  3710 ;;		On entry : B00/0
  3711 ;;		On exit  : 300/100
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3714 ;;      Params:         0       0       0       0
  3715 ;;      Locals:         0       0       0       0
  3716 ;;      Temps:          0       0       0       0
  3717 ;;      Totals:         0       0       0       0
  3718 ;;Total ram usage:        0 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    1
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_main
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           
  3729                           ;psect for function _Init_System
  3730  03FB                     _Init_System:	
  3731                           
  3732                           ;incstack = 0
  3733                           ; Regs used in _Init_System: [wreg+status,2]
  3734  03FB  0000               	nop	;# 
  3735  03FC  0064               	clrwdt	;# 
  3736                           
  3737                           ;main.c: 64: INTCON = 0;
  3738  03FD  018B               	clrf	11	;volatile
  3739                           
  3740                           ;main.c: 65: OSCCON = 0X72;
  3741  03FE  3072               	movlw	114
  3742  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0400  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0401  0094               	movwf	20	;volatile
  3745                           
  3746                           ;main.c: 66: OPTION_REG = 0;
  3747  0402  0181               	clrf	1	;volatile
  3748                           
  3749                           ;main.c: 71: TRISA = 0x04;
  3750  0403  3004               	movlw	4
  3751  0404  1683               	bsf	3,5	;RP0=1, select bank1
  3752  0405  0085               	movwf	5	;volatile
  3753                           
  3754                           ;main.c: 72: PORTA = 0;
  3755  0406  0186               	clrf	6	;volatile
  3756                           
  3757                           ;main.c: 73: TRISB = 0x20;
  3758  0407  3020               	movlw	32
  3759  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3760  0409  0085               	movwf	5	;volatile
  3761                           
  3762                           ;main.c: 74: PORTB = 0;
  3763  040A  0186               	clrf	6	;volatile
  3764                           
  3765                           ;main.c: 75: WPUB = 0x00;
  3766  040B  0188               	clrf	8	;volatile
  3767                           
  3768                           ;main.c: 76: TRISC = 0;
  3769  040C  1703               	bsf	3,6	;RP1=1, select bank2
  3770  040D  0185               	clrf	5	;volatile
  3771                           
  3772                           ;main.c: 77: PORTC = 0;
  3773  040E  0186               	clrf	6	;volatile
  3774                           
  3775                           ;main.c: 79: PIE1 = 2;
  3776  040F  3002               	movlw	2
  3777  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0411  008E               	movwf	14	;volatile
  3779                           
  3780                           ;main.c: 80: PR2 = 250;
  3781  0412  30FA               	movlw	250
  3782  0413  0091               	movwf	17	;volatile
  3783                           
  3784                           ;main.c: 81: T2CON = 4;
  3785  0414  3004               	movlw	4
  3786  0415  0093               	movwf	19	;volatile
  3787                           
  3788                           ;main.c: 83: INTCON = 0XC0;
  3789  0416  30C0               	movlw	192
  3790  0417  008B               	movwf	11	;volatile
  3791                           
  3792                           ;main.c: 84: ADCON0 = 0X41;
  3793                           
  3794                           ;main.c: 85: ADON = 1;
  3795                           
  3796                           ;main.c: 86: ADCON1 = 0x00;
  3797  0418  2FBF               	ljmp	PL22	;call to abstracted procedure
  3798  0419                     __end_of_Init_System:	
  3799  0419                     __ptext18:	
  3800 ;; *************** function _WorkSleep *****************
  3801 ;; Defined at:
  3802 ;;		line 223 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;		None
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      void 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 300/0
  3813 ;;		On exit  : 200/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3816 ;;      Params:         0       0       0       0
  3817 ;;      Locals:         0       0       0       0
  3818 ;;      Temps:          0       0       0       0
  3819 ;;      Totals:         0       0       0       0
  3820 ;;Total ram usage:        0 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    4
  3823 ;; This function calls:
  3824 ;;		_Refurbish_Sfr
  3825 ;;		_SystemEnterSleep
  3826 ;; This function is called by:
  3827 ;;		_main
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           
  3832                           ;psect for function _WorkSleep
  3833  0419                     _WorkSleep:	
  3834                           
  3835                           ;main.c: 226: static unsigned char time;
  3836                           ;main.c: 228: if(B_OnOff)time = 0;
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3840  0419  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3841  041A  01B9               	clrf	WorkSleep@time
  3842                           
  3843                           ;main.c: 230: if(++time >= 125)
  3844  041B  307D               	movlw	125
  3845  041C  0AB9               	incf	WorkSleep@time,f
  3846  041D  0239               	subwf	WorkSleep@time,w
  3847  041E  1C03               	skipc
  3848  041F  0008               	return
  3849                           
  3850                           ;main.c: 231: {
  3851                           ;main.c: 232: time = 0;
  3852  0420  01B9               	clrf	WorkSleep@time
  3853                           
  3854                           ;main.c: 233: INTCON = 0;
  3855  0421  018B               	clrf	11	;volatile
  3856                           
  3857                           ;main.c: 234: PIE1 = 0;
  3858  0422  018E               	clrf	14	;volatile
  3859                           
  3860                           ;main.c: 235: PIE2 = 0;
  3861  0423  1703               	bsf	3,6	;RP1=1, select bank2
  3862  0424  0190               	clrf	16	;volatile
  3863                           
  3864                           ;main.c: 236: PIR1 = 0;
  3865  0425  1303               	bcf	3,6	;RP1=0, select bank0
  3866  0426  018D               	clrf	13	;volatile
  3867                           
  3868                           ;main.c: 237: PIR2 = 0;
  3869  0427  1703               	bsf	3,6	;RP1=1, select bank2
  3870  0428  018F               	clrf	15	;volatile
  3871                           
  3872                           ;main.c: 238: T2CON = 0;
  3873  0429  1303               	bcf	3,6	;RP1=0, select bank0
  3874  042A  0193               	clrf	19	;volatile
  3875                           
  3876                           ;main.c: 239: ADCON1 = 0;
  3877  042B  1683               	bsf	3,5	;RP0=1, select bank1
  3878  042C  0196               	clrf	22	;volatile
  3879                           
  3880                           ;main.c: 242: ADCON0 = 0;
  3881  042D  0195               	clrf	21	;volatile
  3882                           
  3883                           ;main.c: 245: PORTA = 0x01;
  3884  042E  3001               	movlw	1
  3885  042F  0086               	movwf	6	;volatile
  3886                           
  3887                           ;main.c: 246: PORTB = 0x02;
  3888  0430  3002               	movlw	2
  3889  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0432  0086               	movwf	6	;volatile
  3891                           
  3892                           ;main.c: 247: TRISC = 0;
  3893  0433  1703               	bsf	3,6	;RP1=1, select bank2
  3894  0434  0185               	clrf	5	;volatile
  3895                           
  3896                           ;main.c: 248: PORTC = 0x03;
  3897  0435  3003               	movlw	3
  3898  0436  0086               	movwf	6	;volatile
  3899                           
  3900                           ;main.c: 250: TRISB5 =1;
  3901  0437  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0438  1685               	bsf	5,5	;volatile
  3903                           
  3904                           ;main.c: 252: RBIF = 0;
  3905  0439  100B               	bcf	11,0	;volatile
  3906                           
  3907                           ;main.c: 253: RBIE = 1;
  3908  043A  158B               	bsf	11,3	;volatile
  3909                           
  3910                           ;main.c: 254: IOCB5= 1;
  3911  043B  1689               	bsf	9,5	;volatile
  3912                           
  3913                           ;main.c: 255: PORTB;
  3914  043C  0806               	movf	6,w	;volatile
  3915                           
  3916                           ;main.c: 256: PORTB &= 0xFD;
  3917  043D  1086               	bcf	6,1	;volatile
  3918                           
  3919                           ;main.c: 268: SystemEnterSleep();
  3920  043E  2475  118A         	fcall	_SystemEnterSleep
  3921                           
  3922                           ;main.c: 269: if(RAIF)
  3923  0440  1D8D               	btfss	13,3	;volatile
  3924  0441  2C45               	goto	l4589
  3925                           
  3926                           ;main.c: 270: {
  3927                           ;main.c: 271: RAIF = 0;
  3928  0442  118D               	bcf	13,3	;volatile
  3929                           
  3930                           ;main.c: 272: PORTA;
  3931  0443  1683               	bsf	3,5	;RP0=1, select bank1
  3932  0444  0806               	movf	6,w	;volatile
  3933  0445                     l4589:	
  3934                           
  3935                           ;main.c: 273: }
  3936                           ;main.c: 275: Refurbish_Sfr();
  3937  0445  275F  118A         	fcall	_Refurbish_Sfr
  3938                           
  3939                           ;main.c: 276: ADCON0 = 0X41;
  3940                           
  3941                           ;main.c: 277: ADON = 1;
  3942                           
  3943                           ;main.c: 278: ADCON1 = 0x00;
  3944  0447  2FBF               	ljmp	PL22	;call to abstracted procedure
  3945  0448                     __end_of_WorkSleep:	
  3946  0448                     __ptext23:	
  3947 ;; *************** function _CheckTouchKey *****************
  3948 ;; Defined at:
  3949 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;		None
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/100
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3963 ;;      Params:         0       0       0       0
  3964 ;;      Locals:         0       0       0       0
  3965 ;;      Temps:          0       0       0       0
  3966 ;;      Totals:         0       0       0       0
  3967 ;;Total ram usage:        0 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    5
  3970 ;; This function calls:
  3971 ;;		_CheckKeyOldValue
  3972 ;;		_CheckOnceResult
  3973 ;;		_CheckValidTime
  3974 ;;		_ClearResSum
  3975 ;;		_GetTouchKeyValue
  3976 ;;		_KeyStopClear
  3977 ;;		_TurnKeyFlags
  3978 ;; This function is called by:
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           
  3984                           ;psect for function _CheckTouchKey
  3985  0448                     _CheckTouchKey:	
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3989  0448  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3990  0449  2C56               	goto	l1330
  3991  044A  2505  118A         	fcall	_GetTouchKeyValue
  3992  044C  3008               	movlw	8
  3993  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3994  044E  1303               	bcf	3,6	;RP1=0, select bank0
  3995  044F  0AB8               	incf	_KeyCounter,f
  3996  0450  0238               	subwf	_KeyCounter,w
  3997  0451  1C03               	skipc
  3998  0452  2C74               	goto	l4673
  3999  0453  01B8               	clrf	_KeyCounter
  4000  0454  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4001  0455  2C74               	goto	l4673
  4002  0456                     l1330:	
  4003  0456  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4004  0457  2C6E               	goto	l4667
  4005  0458  2574  118A         	fcall	_CheckOnceResult
  4006  045A  2706  118A         	fcall	_TurnKeyFlags
  4007  045C  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4008  045D  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4009  045E  2C65               	goto	l4657
  4010  045F  3002               	movlw	2
  4011  0460  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0461  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0462  0238               	subwf	_KeyCounter,w
  4014  0463  1C03               	skipc
  4015  0464  2C6A               	goto	l4665
  4016  0465                     l4657:	
  4017  0465  26F0  118A         	fcall	_KeyStopClear
  4018  0467  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4019  0468  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4020  0469  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4021  046A                     l4665:	
  4022  046A  1283               	bcf	3,5	;RP0=0, select bank0
  4023  046B  1303               	bcf	3,6	;RP1=0, select bank0
  4024  046C  01B8               	clrf	_KeyCounter
  4025  046D  2C74               	goto	l4673
  4026  046E                     l4667:	
  4027  046E  268C  118A         	fcall	_CheckKeyOldValue
  4028  0470  2565  118A         	fcall	_ClearResSum
  4029  0472  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4030  0473  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4031  0474                     l4673:	
  4032  0474  2F39               	ljmp	l3555	;# 
  4033  0475                     __end_of_CheckTouchKey:	
  4034  0475                     __ptext19:	
  4035 ;; *************** function _SystemEnterSleep *****************
  4036 ;; Defined at:
  4037 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;  92              2    6[BANK0 ] unsigned int 
  4042 ;;  93              2    4[BANK0 ] unsigned int 
  4043 ;;  94              2    2[BANK0 ] unsigned int 
  4044 ;;  91              1    8[BANK0 ] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 300/0
  4051 ;;		On exit  : 300/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4054 ;;      Params:         0       0       0       0
  4055 ;;      Locals:         0       7       0       0
  4056 ;;      Temps:          0       2       0       0
  4057 ;;      Totals:         0       9       0       0
  4058 ;;Total ram usage:        9 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    3
  4061 ;; This function calls:
  4062 ;;		_ClearResSum
  4063 ;;		_GetTouchKeyValue
  4064 ;;		_KeyClearOne
  4065 ;; This function is called by:
  4066 ;;		_WorkSleep
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           
  4071                           ;psect for function _SystemEnterSleep
  4072  0475                     _SystemEnterSleep:	
  4073  0475                     l1342:	
  4074                           ;incstack = 0
  4075                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4076                           
  4077  0475  0064               	clrwdt	;# 
  4078  0476  1683               	bsf	3,5	;RP0=1, select bank1
  4079  0477  1303               	bcf	3,6	;RP1=0, select bank1
  4080  0478  0181               	clrf	1	;volatile
  4081  0479  3007               	movlw	7
  4082  047A  1283               	bcf	3,5	;RP0=0, select bank0
  4083  047B  0481               	iorwf	1,f	;volatile
  4084  047C  1581               	bsf	1,3	;volatile
  4085  047D  0064               	clrwdt	;# 
  4086  047E  300A               	movlw	10
  4087  047F  1283               	bcf	3,5	;RP0=0, select bank0
  4088  0480  1303               	bcf	3,6	;RP1=0, select bank0
  4089  0481  0081               	movwf	1	;volatile
  4090  0482  0064               	clrwdt	;# 
  4091  0483  1283               	bcf	3,5	;RP0=0, select bank2
  4092  0484  1703               	bsf	3,6	;RP1=1, select bank2
  4093  0485  0191               	clrf	17	;volatile
  4094  0486  0193               	clrf	19	;volatile
  4095  0487  3002               	movlw	2
  4096  0488  1303               	bcf	3,6	;RP1=0, select bank0
  4097  0489  0094               	movwf	20	;volatile
  4098  048A  0063               	sleep	;# 
  4099  048B  0000               	nop	;# 
  4100  048C  0064               	clrwdt	;# 
  4101  048D  3072               	movlw	114
  4102  048E  1283               	bcf	3,5	;RP0=0, select bank0
  4103  048F  1303               	bcf	3,6	;RP1=0, select bank0
  4104  0490  0094               	movwf	20	;volatile
  4105  0491  3079               	movlw	121
  4106  0492  1703               	bsf	3,6	;RP1=1, select bank2
  4107  0493  0093               	movwf	19	;volatile
  4108  0494  2565  118A         	fcall	_ClearResSum
  4109  0496  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4110  0497  2505  118A         	fcall	_GetTouchKeyValue
  4111  0499  1283               	bcf	3,5	;RP0=0, select bank0
  4112  049A  1303               	bcf	3,6	;RP1=0, select bank0
  4113  049B  27CB  118A         	fcall	PL36	;call to abstracted procedure
  4114  049D  1C0B               	btfss	11,0	;volatile
  4115  049E  188B               	btfsc	11,1	;volatile
  4116  049F  2CA2               	goto	l4179
  4117  04A0  1D8D               	btfss	13,3	;volatile
  4118  04A1  2CA9               	goto	l4191
  4119  04A2                     l4179:	
  4120  04A2  2565               	fcall	_ClearResSum
  4121  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  4122  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  4123  04A5  01B8               	clrf	_KeyCounter
  4124  04A6  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4125  04A7  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4126  04A8  0008               	return
  4127  04A9                     l4191:	
  4128  04A9  0852               	movf	SystemEnterSleep@92,w
  4129  04AA  3907               	andlw	7
  4130  04AB  1003               	clrc
  4131  04AC  1903               	btfsc	3,2
  4132  04AD  2CFF               	goto	L8
  4133  04AE  0D54               	rlf	SystemEnterSleep@91,w
  4134  04AF  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4135  04B0  0084               	movwf	4
  4136  04B1  1383               	bcf	3,7	;select IRP bank1
  4137  04B2  0800               	movf	0,w
  4138  04B3  00D0               	movwf	SystemEnterSleep@93
  4139  04B4  0A84               	incf	4,f
  4140  04B5  0800               	movf	0,w
  4141  04B6  00D1               	movwf	SystemEnterSleep@93+1
  4142  04B7  00CF               	movwf	SystemEnterSleep@94+1
  4143  04B8  0850               	movf	SystemEnterSleep@93,w
  4144  04B9  00CE               	movwf	SystemEnterSleep@94
  4145  04BA  0850               	movf	SystemEnterSleep@93,w
  4146  04BB  0451               	iorwf	SystemEnterSleep@93+1,w
  4147  04BC  1903               	btfsc	3,2
  4148  04BD  2CFE               	goto	l4225
  4149  04BE  0854               	movf	SystemEnterSleep@91,w
  4150  04BF  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4151  04C0  0084               	movwf	4
  4152  04C1  158A  2000  118A   	fcall	stringdir
  4153  04C4  07CE               	addwf	SystemEnterSleep@94,f
  4154  04C5  1803               	skipnc
  4155  04C6  0ACF               	incf	SystemEnterSleep@94+1,f
  4156  04C7  1003               	clrc
  4157  04C8  0D54               	rlf	SystemEnterSleep@91,w
  4158  04C9  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4159  04CA  27AA  118A         	fcall	PL14	;call to abstracted procedure
  4160  04CC  084F               	movf	SystemEnterSleep@94+1,w
  4161  04CD  024D               	subwf	??_SystemEnterSleep+1,w
  4162  04CE  1D03               	skipz
  4163  04CF  2CD2               	goto	u3995
  4164  04D0  084E               	movf	SystemEnterSleep@94,w
  4165  04D1  024C               	subwf	??_SystemEnterSleep,w
  4166  04D2                     u3995:	
  4167  04D2  1C03               	skipc
  4168  04D3  2CE6               	goto	L7
  4169  04D4  27CB  118A         	fcall	PL36	;call to abstracted procedure
  4170  04D6                     l4205:	
  4171  04D6  0852               	movf	SystemEnterSleep@92,w
  4172  04D7  3907               	andlw	7
  4173  04D8  1D03               	btfss	3,2
  4174  04D9  2CDD               	goto	l4209
  4175  04DA  0854               	movf	SystemEnterSleep@91,w
  4176  04DB  2669  118A         	fcall	_KeyClearOne
  4177  04DD                     l4209:	
  4178  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  4179  04DE  3003               	movlw	3
  4180  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  4181  04E0  1003               	clrc
  4182  04E1  27D0  118A         	fcall	PL38	;call to abstracted procedure
  4183  04E3  1803               	btfsc	3,0
  4184  04E4  2CA2               	goto	l4179
  4185  04E5  2CD6               	goto	l4205
  4186  04E6                     L7:	
  4187  04E6  0D54               	rlf	SystemEnterSleep@91,w
  4188  04E7  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4189  04E8  27AA  118A         	fcall	PL14	;call to abstracted procedure
  4190  04EA  1003               	clrc
  4191  04EB  0D54               	rlf	SystemEnterSleep@91,w
  4192  04EC  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4193  04ED  2794  118A         	fcall	PL10	;call to abstracted procedure
  4194  04EF  0800               	movf	0,w
  4195  04F0  00CC               	movwf	??_SystemEnterSleep
  4196  04F1  0A84               	incf	4,f
  4197  04F2  0800               	movf	0,w
  4198  04F3  00CD               	movwf	??_SystemEnterSleep+1
  4199  04F4  1003               	clrc
  4200  04F5  0D54               	rlf	SystemEnterSleep@91,w
  4201  04F6  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4202  04F7  2794  118A         	fcall	PL10	;call to abstracted procedure
  4203  04F9  0850               	movf	SystemEnterSleep@93,w
  4204  04FA  0080               	movwf	0
  4205  04FB  0A84               	incf	4,f
  4206  04FC  0851               	movf	SystemEnterSleep@93+1,w
  4207  04FD  0080               	movwf	0
  4208  04FE                     l4225:	
  4209  04FE  1003               	clrc
  4210  04FF                     L8:	
  4211  04FF  3003               	movlw	3
  4212  0500  27D0  118A         	fcall	PL38	;call to abstracted procedure
  4213  0502  1803               	btfsc	3,0
  4214  0503  2C75               	goto	l1342
  4215  0504  2CA9               	goto	l4191
  4216  0505                     __end_of_SystemEnterSleep:	
  4217  0505                     __ptext27:	
  4218 ;; *************** function _GetTouchKeyValue *****************
  4219 ;; Defined at:
  4220 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  63              2    5[COMMON] unsigned int 
  4225 ;;  64              2    3[COMMON] unsigned int 
  4226 ;;  62              1    7[COMMON] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/200
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4236 ;;      Params:         0       0       0       0
  4237 ;;      Locals:         5       0       0       0
  4238 ;;      Temps:          0       0       0       0
  4239 ;;      Totals:         5       0       0       0
  4240 ;;Total ram usage:        5 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    2
  4243 ;; This function calls:
  4244 ;;		_ClearResSum
  4245 ;; This function is called by:
  4246 ;;		_CheckTouchKey
  4247 ;;		_SystemEnterSleep
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _GetTouchKeyValue
  4253  0505                     _GetTouchKeyValue:	
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4257  0505  01F7               	clrf	GetTouchKeyValue@62
  4258  0506  01F5               	clrf	GetTouchKeyValue@63
  4259  0507  0AF5               	incf	GetTouchKeyValue@63,f
  4260  0508  01F6               	clrf	GetTouchKeyValue@63+1
  4261  0509                     l3033:	
  4262  0509  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4263  050A  2D0F               	goto	l3037
  4264  050B  0875               	movf	GetTouchKeyValue@63,w
  4265  050C  3907               	andlw	7
  4266  050D  1903               	btfsc	3,2
  4267  050E  2D5B               	goto	l3065
  4268  050F                     l3037:	
  4269  050F  1283               	bcf	3,5	;RP0=0, select bank2
  4270  0510  1703               	bsf	3,6	;RP1=1, select bank2
  4271  0511  0191               	clrf	17	;volatile
  4272  0512  0192               	clrf	18	;volatile
  4273  0513  3079               	movlw	121
  4274  0514  0093               	movwf	19	;volatile
  4275  0515  1303               	bcf	3,6	;RP1=0, select bank0
  4276  0516  1305               	bcf	5,6	;volatile
  4277  0517  1306               	bcf	6,6	;volatile
  4278  0518  0000               	nop	;# 
  4279  0519  0000               	nop	;# 
  4280  051A  0000               	nop	;# 
  4281  051B  0000               	nop	;# 
  4282  051C  0000               	nop	;# 
  4283  051D  0000               	nop	;# 
  4284  051E  0000               	nop	;# 
  4285  051F  0000               	nop	;# 
  4286  0520  1283               	bcf	3,5	;RP0=0, select bank0
  4287  0521  1303               	bcf	3,6	;RP1=0, select bank0
  4288  0522  1705               	bsf	5,6	;volatile
  4289  0523  0877               	movf	GetTouchKeyValue@62,w
  4290  0524  3E0C               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4291  0525  0084               	movwf	4
  4292  0526  158A  2000  118A   	fcall	stringdir
  4293  0529  1703               	bsf	3,6	;RP1=1, select bank2
  4294  052A  0091               	movwf	17	;volatile
  4295  052B  0877               	movf	GetTouchKeyValue@62,w
  4296  052C  3E0F               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4297  052D  0084               	movwf	4
  4298  052E  158A  2000  118A   	fcall	stringdir
  4299  0531  0092               	movwf	18	;volatile
  4300  0532  0000               	nop	;# 
  4301  0533  0000               	nop	;# 
  4302  0534  0000               	nop	;# 
  4303  0535  0000               	nop	;# 
  4304  0536  1283               	bcf	3,5	;RP0=0, select bank2
  4305  0537  1703               	bsf	3,6	;RP1=1, select bank2
  4306  0538  1411               	bsf	17,0	;volatile
  4307  0539  30D0               	movlw	208
  4308  053A  00F3               	movwf	GetTouchKeyValue@64
  4309  053B  3007               	movlw	7
  4310  053C  00F4               	movwf	GetTouchKeyValue@64+1
  4311  053D                     l1252:	
  4312  053D  1B91               	btfsc	17,7	;volatile
  4313  053E  2D4B               	goto	l3063
  4314  053F  3001               	movlw	1
  4315  0540  02F3               	subwf	GetTouchKeyValue@64,f
  4316  0541  1C03               	skipc
  4317  0542  03F4               	decf	GetTouchKeyValue@64+1,f
  4318  0543  0873               	movf	GetTouchKeyValue@64,w
  4319  0544  0474               	iorwf	GetTouchKeyValue@64+1,w
  4320  0545  1D03               	btfss	3,2
  4321  0546  2D3D               	goto	l1252
  4322  0547  30FF               	movlw	255
  4323  0548  1303               	bcf	3,6	;RP1=0, select bank0
  4324  0549  00B8               	movwf	_KeyCounter
  4325  054A  2D65               	ljmp	l2881
  4326  054B                     l3063:	
  4327  054B  1003               	clrc
  4328  054C  0D77               	rlf	GetTouchKeyValue@62,w
  4329  054D  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4330  054E  0084               	movwf	4
  4331  054F  0816               	movf	22,w	;volatile
  4332  0550  1383               	bcf	3,7	;select IRP bank1
  4333  0551  0780               	addwf	0,f
  4334  0552  0F84               	incfsz	4,f
  4335  0553  0800               	movf	0,w
  4336  0554  1803               	skipnc
  4337  0555  0A00               	incf	0,w
  4338  0556  00FF               	movwf	127
  4339  0557  0817               	movf	23,w	;volatile
  4340  0558  077F               	addwf	127,w
  4341  0559  0080               	movwf	0
  4342  055A  0384               	decf	4,f
  4343  055B                     l3065:	
  4344  055B  3003               	movlw	3
  4345  055C  1003               	clrc
  4346  055D  0DF5               	rlf	GetTouchKeyValue@63,f
  4347  055E  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4348  055F  0AF7               	incf	GetTouchKeyValue@62,f
  4349  0560  0277               	subwf	GetTouchKeyValue@62,w
  4350  0561  1C03               	skipc
  4351  0562  2D09               	goto	l3033
  4352  0563  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4353  0564  0008               	return
  4354  0565                     __end_of_GetTouchKeyValue:	
  4355  0565                     __ptext28:	
  4356 ;; *************** function _ClearResSum *****************
  4357 ;; Defined at:
  4358 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  56              1    2[COMMON] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/200
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4372 ;;      Params:         0       0       0       0
  4373 ;;      Locals:         1       0       0       0
  4374 ;;      Temps:          0       0       0       0
  4375 ;;      Totals:         1       0       0       0
  4376 ;;Total ram usage:        1 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    1
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_GetTouchKeyValue
  4383 ;;		_CheckTouchKey
  4384 ;;		_SystemEnterSleep
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _ClearResSum
  4390  0565                     _ClearResSum:	
  4391  0565                     l2881:	
  4392                           ;incstack = 0
  4393                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4394                           
  4395  0565  01F2               	clrf	ClearResSum@56
  4396  0566                     l2883:	
  4397  0566  1003               	clrc
  4398  0567  0D72               	rlf	ClearResSum@56,w
  4399  0568  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4400  0569  0084               	movwf	4
  4401  056A  3003               	movlw	3
  4402  056B  1383               	bcf	3,7	;select IRP bank1
  4403  056C  0180               	clrf	0
  4404  056D  0A84               	incf	4,f
  4405  056E  0180               	clrf	0
  4406  056F  0AF2               	incf	ClearResSum@56,f
  4407  0570  0272               	subwf	ClearResSum@56,w
  4408  0571  1803               	btfsc	3,0
  4409  0572  0008               	return
  4410  0573  2D66               	goto	l2883
  4411  0574                     __end_of_ClearResSum:	
  4412  0574                     __ptext30:	
  4413 ;; *************** function _CheckOnceResult *****************
  4414 ;; Defined at:
  4415 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  71              2   10[BANK0 ] unsigned int 
  4420 ;;  72              2    7[BANK0 ] unsigned int 
  4421 ;;  73              2    4[BANK0 ] unsigned int 
  4422 ;;  68              1   12[BANK0 ] unsigned char 
  4423 ;;  69              1    9[BANK0 ] unsigned char 
  4424 ;;  70              1    6[BANK0 ] unsigned char 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  1    wreg      void 
  4427 ;; Registers used:
  4428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/100
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4434 ;;      Params:         0       0       0       0
  4435 ;;      Locals:         0       9       0       0
  4436 ;;      Temps:          0       4       0       0
  4437 ;;      Totals:         0      13       0       0
  4438 ;;Total ram usage:       13 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    3
  4441 ;; This function calls:
  4442 ;;		_KeyClearOne
  4443 ;;		_KeyHave
  4444 ;;		_KeyIsIn
  4445 ;; This function is called by:
  4446 ;;		_CheckTouchKey
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _CheckOnceResult
  4452  0574                     _CheckOnceResult:	
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4456  0574  1283               	bcf	3,5	;RP0=0, select bank0
  4457  0575  1303               	bcf	3,6	;RP1=0, select bank0
  4458  0576  01D8               	clrf	CheckOnceResult@68
  4459  0577  01F9               	clrf	_KeyData	;volatile
  4460  0578  01FA               	clrf	_KeyData+1	;volatile
  4461  0579  01B7               	clrf	_KeyMaxSub
  4462  057A                     l4405:	
  4463  057A  0858               	movf	CheckOnceResult@68,w
  4464  057B  3907               	andlw	7
  4465  057C  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4466  057D  0084               	movwf	4
  4467  057E  158A  2000  118A   	fcall	stringdir
  4468  0581  00D2               	movwf	CheckOnceResult@70
  4469  0582  1003               	clrc
  4470  0583  0D58               	rlf	CheckOnceResult@68,w
  4471  0584  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4472  0585  0084               	movwf	4
  4473  0586  3003               	movlw	3
  4474  0587                     u4425:	
  4475  0587  0A84               	incf	4,f
  4476  0588  1003               	clrc
  4477  0589  1383               	bcf	3,7	;select IRP bank1
  4478  058A  0C80               	rrf	0,f
  4479  058B  0384               	decf	4,f
  4480  058C  0C80               	rrf	0,f
  4481  058D  3EFF               	addlw	-1
  4482  058E  1D03               	skipz
  4483  058F  2D87               	goto	u4425
  4484  0590  1003               	clrc
  4485  0591  0D58               	rlf	CheckOnceResult@68,w
  4486  0592  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4487  0593  0084               	movwf	4
  4488  0594  0800               	movf	0,w
  4489  0595  00D6               	movwf	CheckOnceResult@71
  4490  0596  0A84               	incf	4,f
  4491  0597  0800               	movf	0,w
  4492  0598  00D7               	movwf	CheckOnceResult@71+1
  4493  0599  0858               	movf	CheckOnceResult@68,w
  4494  059A  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4495  059B  0084               	movwf	4
  4496  059C  158A  2000  118A   	fcall	stringdir
  4497  059F  00D5               	movwf	CheckOnceResult@69
  4498  05A0  00D3               	movwf	CheckOnceResult@72
  4499  05A1  01D4               	clrf	CheckOnceResult@72+1
  4500  05A2  0856               	movf	CheckOnceResult@71,w
  4501  05A3  07D3               	addwf	CheckOnceResult@72,f
  4502  05A4  1803               	skipnc
  4503  05A5  0AD4               	incf	CheckOnceResult@72+1,f
  4504  05A6  0857               	movf	CheckOnceResult@71+1,w
  4505  05A7  07D4               	addwf	CheckOnceResult@72+1,f
  4506  05A8  0858               	movf	CheckOnceResult@68,w
  4507  05A9  2655  118A         	fcall	_KeyIsIn
  4508  05AB  3A00               	xorlw	0
  4509  05AC  1003               	clrc
  4510  05AD  1D03               	skipz
  4511  05AE  2E09               	goto	L11
  4512  05AF  0D58               	rlf	CheckOnceResult@68,w
  4513  05B0  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4514  05B1  0084               	movwf	4
  4515  05B2  1383               	bcf	3,7	;select IRP bank1
  4516  05B3  0800               	movf	0,w
  4517  05B4  00D0               	movwf	CheckOnceResult@73
  4518  05B5  0A84               	incf	4,f
  4519  05B6  0800               	movf	0,w
  4520  05B7  00D1               	movwf	CheckOnceResult@73+1
  4521  05B8  1003               	clrc
  4522  05B9  0D58               	rlf	CheckOnceResult@68,w
  4523  05BA  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4524  05BB  278D  118A         	fcall	PL8	;call to abstracted procedure
  4525  05BD  0254               	subwf	CheckOnceResult@72+1,w
  4526  05BE  1D03               	skipz
  4527  05BF  2DC2               	goto	u4445
  4528  05C0  084C               	movf	??_CheckOnceResult,w
  4529  05C1  0253               	subwf	CheckOnceResult@72,w
  4530  05C2                     u4445:	
  4531  05C2  1803               	skipnc
  4532  05C3  2DD1               	goto	l4423
  4533  05C4  1003               	clrc
  4534  05C5  0D58               	rlf	CheckOnceResult@68,w
  4535  05C6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4536  05C7  278D  118A         	fcall	PL8	;call to abstracted procedure
  4537  05C9  0856               	movf	CheckOnceResult@71,w
  4538  05CA  024C               	subwf	??_CheckOnceResult,w
  4539  05CB  00D6               	movwf	CheckOnceResult@71
  4540  05CC  0857               	movf	CheckOnceResult@71+1,w
  4541  05CD  1C03               	skipc
  4542  05CE  0A57               	incf	CheckOnceResult@71+1,w
  4543  05CF  024D               	subwf	??_CheckOnceResult+1,w
  4544  05D0  2DF5               	goto	L9
  4545  05D1                     l4423:	
  4546  05D1  0851               	movf	CheckOnceResult@73+1,w
  4547  05D2  0254               	subwf	CheckOnceResult@72+1,w
  4548  05D3  1D03               	skipz
  4549  05D4  2DD7               	goto	u4455
  4550  05D5  0850               	movf	CheckOnceResult@73,w
  4551  05D6  0253               	subwf	CheckOnceResult@72,w
  4552  05D7                     u4455:	
  4553  05D7  1803               	skipnc
  4554  05D8  2E4D               	goto	l4469
  4555  05D9  1003               	clrc
  4556  05DA  0D58               	rlf	CheckOnceResult@68,w
  4557  05DB  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4558  05DC  278D  118A         	fcall	PL8	;call to abstracted procedure
  4559  05DE  0254               	subwf	CheckOnceResult@72+1,w
  4560  05DF  1D03               	skipz
  4561  05E0  2DE3               	goto	u4465
  4562  05E1  084C               	movf	??_CheckOnceResult,w
  4563  05E2  0253               	subwf	CheckOnceResult@72,w
  4564  05E3                     u4465:	
  4565  05E3  1803               	skipnc
  4566  05E4  2E4D               	goto	l4469
  4567  05E5  1003               	clrc
  4568  05E6  0D58               	rlf	CheckOnceResult@68,w
  4569  05E7  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4570  05E8  0084               	movwf	4
  4571  05E9  0850               	movf	CheckOnceResult@73,w
  4572  05EA  0080               	movwf	0
  4573  05EB  0A84               	incf	4,f
  4574  05EC  0851               	movf	CheckOnceResult@73+1,w
  4575  05ED  0080               	movwf	0
  4576  05EE  0856               	movf	CheckOnceResult@71,w
  4577  05EF  0250               	subwf	CheckOnceResult@73,w
  4578  05F0  00D6               	movwf	CheckOnceResult@71
  4579  05F1  0857               	movf	CheckOnceResult@71+1,w
  4580  05F2  1C03               	skipc
  4581  05F3  0A57               	incf	CheckOnceResult@71+1,w
  4582  05F4  0251               	subwf	CheckOnceResult@73+1,w
  4583  05F5                     L9:	
  4584  05F5  00D7               	movwf	CheckOnceResult@71+1
  4585  05F6  0858               	movf	CheckOnceResult@68,w
  4586  05F7  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4587  05F8  0084               	movwf	4
  4588  05F9  0180               	clrf	0
  4589  05FA  0857               	movf	CheckOnceResult@71+1,w
  4590  05FB  1903               	btfsc	3,2
  4591  05FC  2DFF               	goto	l4437
  4592  05FD  30FF               	movlw	255
  4593  05FE  2E00               	goto	L10
  4594  05FF                     l4437:	
  4595  05FF  0856               	movf	CheckOnceResult@71,w
  4596  0600                     L10:	
  4597  0600  00D5               	movwf	CheckOnceResult@69
  4598  0601  0237               	subwf	_KeyMaxSub,w
  4599  0602  1803               	skipnc
  4600  0603  2E07               	goto	l4443
  4601  0604  0855               	movf	CheckOnceResult@69,w
  4602  0605  00B7               	movwf	_KeyMaxSub
  4603  0606  2E47               	goto	l4467
  4604  0607                     l4443:	
  4605  0607  0AB8               	incf	_KeyCounter,f
  4606  0608  2E4D               	goto	l4469
  4607  0609                     L11:	
  4608  0609  0D58               	rlf	CheckOnceResult@68,w
  4609  060A  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4610  060B  0084               	movwf	4
  4611  060C  1383               	bcf	3,7	;select IRP bank1
  4612  060D  0800               	movf	0,w
  4613  060E  00CC               	movwf	??_CheckOnceResult
  4614  060F  0A84               	incf	4,f
  4615  0610  0800               	movf	0,w
  4616  0611  00CD               	movwf	??_CheckOnceResult+1
  4617  0612  084C               	movf	??_CheckOnceResult,w
  4618  0613  3E01               	addlw	1
  4619  0614  00CE               	movwf	??_CheckOnceResult+2
  4620  0615  084D               	movf	??_CheckOnceResult+1,w
  4621  0616  1803               	skipnc
  4622  0617  3E01               	addlw	1
  4623  0618  00CF               	movwf	??_CheckOnceResult+3
  4624  0619  0854               	movf	CheckOnceResult@72+1,w
  4625  061A  024F               	subwf	??_CheckOnceResult+3,w
  4626  061B  1D03               	skipz
  4627  061C  2E1F               	goto	u4495
  4628  061D  0853               	movf	CheckOnceResult@72,w
  4629  061E  024E               	subwf	??_CheckOnceResult+2,w
  4630  061F                     u4495:	
  4631  061F  1C03               	btfss	3,0
  4632  0620  2E4D               	goto	l4469
  4633  0621  1003               	clrc
  4634  0622  0D58               	rlf	CheckOnceResult@68,w
  4635  0623  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4636  0624  0084               	movwf	4
  4637  0625  0800               	movf	0,w
  4638  0626  277B  118A         	fcall	PL4	;call to abstracted procedure
  4639  0628  1C03               	skipc
  4640  0629  2E33               	goto	l4457
  4641  062A  1003               	clrc
  4642  062B  0D58               	rlf	CheckOnceResult@68,w
  4643  062C  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4644  062D  0084               	movwf	4
  4645  062E  0800               	movf	0,w
  4646  062F  277B  118A         	fcall	PL4	;call to abstracted procedure
  4647  0631  1803               	skipnc
  4648  0632  2E3F               	goto	l4461
  4649  0633                     l4457:	
  4650  0633  0858               	movf	CheckOnceResult@68,w
  4651  0634  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4652  0635  0084               	movwf	4
  4653  0636  3009               	movlw	9
  4654  0637  0A80               	incf	0,f
  4655  0638  0200               	subwf	0,w
  4656  0639  1C03               	skipc
  4657  063A  2E43               	goto	l4465
  4658  063B  0858               	movf	CheckOnceResult@68,w
  4659  063C  2669  118A         	fcall	_KeyClearOne
  4660  063E  2E4D               	goto	l4469
  4661  063F                     l4461:	
  4662  063F  0858               	movf	CheckOnceResult@68,w
  4663  0640  3EBE               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4664  0641  0084               	movwf	4
  4665  0642  0180               	clrf	0
  4666  0643                     l4465:	
  4667  0643  087A               	movf	_KeyData+1,w	;volatile
  4668  0644  0479               	iorwf	_KeyData,w	;volatile
  4669  0645  1D03               	btfss	3,2
  4670  0646  2E4D               	goto	l4469
  4671  0647                     l4467:	
  4672  0647  0852               	movf	CheckOnceResult@70,w
  4673  0648  00F2               	movwf	KeyHave@59
  4674  0649  01F3               	clrf	KeyHave@59+1
  4675  064A  0858               	movf	CheckOnceResult@68,w
  4676  064B  267E  118A         	fcall	_KeyHave
  4677  064D                     l4469:	
  4678  064D  3003               	movlw	3
  4679  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4680  064F  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0650  0AD8               	incf	CheckOnceResult@68,f
  4682  0651  0258               	subwf	CheckOnceResult@68,w
  4683  0652  1803               	btfsc	3,0
  4684  0653  0008               	return
  4685  0654  2D7A               	goto	l4405
  4686  0655                     __end_of_CheckOnceResult:	
  4687  0655                     __ptext34:	
  4688 ;; *************** function _KeyIsIn *****************
  4689 ;; Defined at:
  4690 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  45              1    wreg     unsigned char 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  45              1    3[COMMON] unsigned char 
  4695 ;;  46              1    2[COMMON] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      unsigned char 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 300/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4705 ;;      Params:         0       0       0       0
  4706 ;;      Locals:         2       0       0       0
  4707 ;;      Temps:          0       0       0       0
  4708 ;;      Totals:         2       0       0       0
  4709 ;;Total ram usage:        2 bytes
  4710 ;; Hardware stack levels used:    2
  4711 ;; Hardware stack levels required when called:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_KeyClearIn
  4716 ;;		_CheckOnceResult
  4717 ;;		_CheckKeyOldValue
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function _KeyIsIn
  4723  0655                     _KeyIsIn:	
  4724                           
  4725                           ;incstack = 0
  4726                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4727                           ;KeyIsIn@45 stored from wreg
  4728  0655  00F3               	movwf	KeyIsIn@45
  4729  0656  3907               	andlw	7
  4730  0657  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4731  0658  0084               	movwf	4
  4732  0659  158A  2000  118A   	fcall	stringdir
  4733  065C  00F2               	movwf	KeyIsIn@46
  4734  065D  1DF3               	btfss	KeyIsIn@45,3
  4735  065E  2E63               	goto	l2867
  4736  065F  1283               	bcf	3,5	;RP0=0, select bank0
  4737  0660  1303               	bcf	3,6	;RP1=0, select bank0
  4738  0661  0833               	movf	_KeyFlag+1,w	;volatile
  4739  0662  2E66               	goto	L16
  4740  0663                     l2867:	
  4741  0663  1283               	bcf	3,5	;RP0=0, select bank0
  4742  0664  1303               	bcf	3,6	;RP1=0, select bank0
  4743  0665  0832               	movf	_KeyFlag,w	;volatile
  4744  0666                     L16:	
  4745  0666  05F2               	andwf	KeyIsIn@46,f
  4746  0667  0872               	movf	KeyIsIn@46,w
  4747  0668  0008               	return
  4748  0669                     __end_of_KeyIsIn:	
  4749  0669                     __ptext32:	
  4750 ;; *************** function _KeyClearOne *****************
  4751 ;; Defined at:
  4752 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  49              1    wreg     unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  49              1    2[COMMON] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4766 ;;      Params:         0       0       0       0
  4767 ;;      Locals:         1       0       0       0
  4768 ;;      Temps:          0       0       0       0
  4769 ;;      Totals:         1       0       0       0
  4770 ;;Total ram usage:        1 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    1
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_KeyClearIn
  4777 ;;		_KeyStopClear
  4778 ;;		_CheckOnceResult
  4779 ;;		_SystemEnterSleep
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _KeyClearOne
  4785  0669                     _KeyClearOne:	
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4789                           ;KeyClearOne@49 stored from wreg
  4790  0669  00F2               	movwf	KeyClearOne@49
  4791  066A  1003               	clrc
  4792  066B  0D72               	rlf	KeyClearOne@49,w
  4793  066C  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4794  066D  0084               	movwf	4
  4795  066E  1383               	bcf	3,7	;select IRP bank1
  4796  066F  27B9  118A         	fcall	PL20	;call to abstracted procedure
  4797  0671  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4798  0672  0084               	movwf	4
  4799  0673  27B9  118A         	fcall	PL20	;call to abstracted procedure
  4800  0675  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4801  0676  0084               	movwf	4
  4802  0677  27B9               	fcall	PL20	;call to abstracted procedure
  4803  0678  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4804  0679  0084               	movwf	4
  4805  067A  0180               	clrf	0
  4806  067B  0A84               	incf	4,f
  4807  067C  0180               	clrf	0	;# 
  4808  067D  0008               	return
  4809  067E                     __end_of_KeyClearOne:	
  4810  067E                     __ptext31:	
  4811 ;; *************** function _KeyHave *****************
  4812 ;; Defined at:
  4813 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  58              1    wreg     unsigned char 
  4816 ;;  59              2    2[COMMON] unsigned int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  58              1    4[COMMON] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      void 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0
  4823 ;; Tracked objects:
  4824 ;;		On entry : B00/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4828 ;;      Params:         2       0       0       0
  4829 ;;      Locals:         1       0       0       0
  4830 ;;      Temps:          0       0       0       0
  4831 ;;      Totals:         3       0       0       0
  4832 ;;Total ram usage:        3 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    1
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_CheckOnceResult
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           
  4843                           ;psect for function _KeyHave
  4844  067E                     _KeyHave:	
  4845                           
  4846                           ;incstack = 0
  4847                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4848                           ;KeyHave@58 stored from wreg
  4849  067E  00F4               	movwf	KeyHave@58
  4850  067F  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0680  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0681  0AB8               	incf	_KeyCounter,f
  4853  0682  01F9               	clrf	_KeyData	;volatile
  4854  0683  01FA               	clrf	_KeyData+1	;volatile
  4855  0684  1DF4               	btfss	KeyHave@58,3
  4856  0685  2E89               	goto	l3021
  4857  0686  0872               	movf	KeyHave@59,w
  4858  0687  00FA               	movwf	_KeyData+1	;volatile
  4859  0688  0008               	return
  4860  0689                     l3021:	
  4861  0689  0872               	movf	KeyHave@59,w
  4862  068A  00F9               	movwf	_KeyData	;volatile
  4863  068B  0008               	return
  4864  068C                     __end_of_KeyHave:	
  4865  068C                     __ptext33:	
  4866 ;; *************** function _CheckKeyOldValue *****************
  4867 ;; Defined at:
  4868 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  80              2    2[BANK0 ] unsigned int 
  4873 ;;  79              2    0[BANK0 ] unsigned int 
  4874 ;;  78              1    4[BANK0 ] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/100
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4884 ;;      Params:         0       0       0       0
  4885 ;;      Locals:         0       5       0       0
  4886 ;;      Temps:          2       0       0       0
  4887 ;;      Totals:         2       5       0       0
  4888 ;;Total ram usage:        7 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    3
  4891 ;; This function calls:
  4892 ;;		_KeyIsIn
  4893 ;; This function is called by:
  4894 ;;		_CheckTouchKey
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           
  4899                           ;psect for function _CheckKeyOldValue
  4900  068C                     _CheckKeyOldValue:	
  4901                           
  4902                           ;incstack = 0
  4903                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4904  068C  1283               	bcf	3,5	;RP0=0, select bank0
  4905  068D  3004               	movlw	4
  4906  068E  1303               	bcf	3,6	;RP1=0, select bank0
  4907  068F  01D0               	clrf	CheckKeyOldValue@78
  4908  0690  0AB6               	incf	CheckKeyOldValue@F77,f
  4909  0691  0236               	subwf	CheckKeyOldValue@F77,w
  4910  0692  1C03               	btfss	3,0
  4911  0693  0008               	return
  4912  0694  01B6               	clrf	CheckKeyOldValue@F77
  4913  0695                     l3485:	
  4914  0695  1003               	clrc
  4915  0696  0D50               	rlf	CheckKeyOldValue@78,w
  4916  0697  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  4917  0698  0084               	movwf	4
  4918  0699  1383               	bcf	3,7	;select IRP bank1
  4919  069A  0800               	movf	0,w
  4920  069B  00CC               	movwf	CheckKeyOldValue@79
  4921  069C  0A84               	incf	4,f
  4922  069D  0800               	movf	0,w
  4923  069E  00CD               	movwf	CheckKeyOldValue@79+1
  4924  069F  0850               	movf	CheckKeyOldValue@78,w
  4925  06A0  2655  118A         	fcall	_KeyIsIn
  4926  06A2  3A00               	xorlw	0
  4927  06A3  1003               	clrc
  4928  06A4  1D03               	skipz
  4929  06A5  2EDA               	goto	L15
  4930  06A6  0D50               	rlf	CheckKeyOldValue@78,w
  4931  06A7  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4932  06A8  0084               	movwf	4
  4933  06A9  1383               	bcf	3,7	;select IRP bank1
  4934  06AA  276D  118A         	fcall	PL2	;call to abstracted procedure
  4935  06AC  1903               	skipnz
  4936  06AD  024E               	subwf	CheckKeyOldValue@80,w
  4937  06AE  1C03               	skipc
  4938  06AF  2EB6               	goto	L12
  4939  06B0  0F4E               	incfsz	CheckKeyOldValue@80,w
  4940  06B1  2ED9               	goto	l1293
  4941  06B2  0A4F               	incf	CheckKeyOldValue@80+1,w
  4942  06B3  1003               	clrc
  4943  06B4  1D03               	btfss	3,2
  4944  06B5  2EDA               	goto	L15
  4945  06B6                     L12:	
  4946  06B6  0D50               	rlf	CheckKeyOldValue@78,w
  4947  06B7  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4948  06B8  0084               	movwf	4
  4949  06B9  276D  118A         	fcall	PL2	;call to abstracted procedure
  4950  06BB  1903               	skipnz
  4951  06BC  024E               	subwf	CheckKeyOldValue@80,w
  4952  06BD  1C03               	skipc
  4953  06BE  2EC5               	goto	L13
  4954  06BF  0F4E               	incfsz	CheckKeyOldValue@80,w
  4955  06C0  2ED9               	goto	l1293
  4956  06C1  0A4F               	incf	CheckKeyOldValue@80+1,w
  4957  06C2  1003               	clrc
  4958  06C3  1D03               	btfss	3,2
  4959  06C4  2EDA               	goto	L15
  4960  06C5                     L13:	
  4961  06C5  0D50               	rlf	CheckKeyOldValue@78,w
  4962  06C6  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4963  06C7  0084               	movwf	4
  4964  06C8  276D  118A         	fcall	PL2	;call to abstracted procedure
  4965  06CA  1903               	skipnz
  4966  06CB  024E               	subwf	CheckKeyOldValue@80,w
  4967  06CC  1C03               	skipc
  4968  06CD  2ED4               	goto	L14
  4969  06CE  0F4E               	incfsz	CheckKeyOldValue@80,w
  4970  06CF  2ED9               	goto	l1293
  4971  06D0  0A4F               	incf	CheckKeyOldValue@80+1,w
  4972  06D1  1003               	clrc
  4973  06D2  1D03               	btfss	3,2
  4974  06D3  2EDA               	goto	L15
  4975  06D4                     L14:	
  4976  06D4  0D50               	rlf	CheckKeyOldValue@78,w
  4977  06D5  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4978  06D6  0084               	movwf	4
  4979  06D7  27C5  118A         	fcall	PL28	;call to abstracted procedure
  4980  06D9                     l1293:	
  4981  06D9  1003               	clrc
  4982  06DA                     L15:	
  4983  06DA  0D50               	rlf	CheckKeyOldValue@78,w
  4984  06DB  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4985  06DC  0084               	movwf	4
  4986  06DD  1383               	bcf	3,7	;select IRP bank1
  4987  06DE  27B1  118A         	fcall	PL18	;call to abstracted procedure
  4988  06E0  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4989  06E1  279F  118A         	fcall	PL12	;call to abstracted procedure
  4990  06E3  27B1  118A         	fcall	PL18	;call to abstracted procedure
  4991  06E5  3EAC               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4992  06E6  279F  118A         	fcall	PL12	;call to abstracted procedure
  4993  06E8  27C5  118A         	fcall	PL28	;call to abstracted procedure
  4994  06EA  3003               	movlw	3
  4995  06EB  0AD0               	incf	CheckKeyOldValue@78,f
  4996  06EC  0250               	subwf	CheckKeyOldValue@78,w
  4997  06ED  1803               	btfsc	3,0
  4998  06EE  0008               	return
  4999  06EF  2E95               	goto	l3485
  5000  06F0                     __end_of_CheckKeyOldValue:	
  5001  06F0                     __ptext26:	
  5002 ;; *************** function _KeyStopClear *****************
  5003 ;; Defined at:
  5004 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  53              1    3[COMMON] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/100
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5018 ;;      Params:         0       0       0       0
  5019 ;;      Locals:         1       0       0       0
  5020 ;;      Temps:          0       0       0       0
  5021 ;;      Totals:         1       0       0       0
  5022 ;;Total ram usage:        1 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    2
  5025 ;; This function calls:
  5026 ;;		_KeyClearOne
  5027 ;; This function is called by:
  5028 ;;		_CheckTouchKey
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _KeyStopClear
  5034  06F0                     _KeyStopClear:	
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5038  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  5039  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  5040  06F2  01B2               	clrf	_KeyFlag	;volatile
  5041  06F3  01B3               	clrf	_KeyFlag+1	;volatile
  5042  06F4  01F3               	clrf	KeyStopClear@53
  5043  06F5                     l3397:	
  5044  06F5  1003               	clrc
  5045  06F6  0D73               	rlf	KeyStopClear@53,w
  5046  06F7  3EB8               	addlw	(low (_KeyResSum| 0))& (0+255)
  5047  06F8  0084               	movwf	4
  5048  06F9  1383               	bcf	3,7	;select IRP bank1
  5049  06FA  0180               	clrf	0
  5050  06FB  0A84               	incf	4,f
  5051  06FC  0180               	clrf	0
  5052  06FD  0873               	movf	KeyStopClear@53,w
  5053  06FE  2669  118A         	fcall	_KeyClearOne
  5054  0700  3003               	movlw	3
  5055  0701  0AF3               	incf	KeyStopClear@53,f
  5056  0702  0273               	subwf	KeyStopClear@53,w
  5057  0703  1803               	btfsc	3,0
  5058  0704  0008               	return
  5059  0705  2EF5               	goto	l3397
  5060  0706                     __end_of_KeyStopClear:	
  5061  0706                     __ptext24:	
  5062 ;; *************** function _TurnKeyFlags *****************
  5063 ;; Defined at:
  5064 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;		None
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;		None
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/100
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5078 ;;      Params:         0       0       0       0
  5079 ;;      Locals:         0       0       0       0
  5080 ;;      Temps:          0       0       0       0
  5081 ;;      Totals:         0       0       0       0
  5082 ;;Total ram usage:        0 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    4
  5085 ;; This function calls:
  5086 ;;		_KeyClearIn
  5087 ;; This function is called by:
  5088 ;;		_CheckTouchKey
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           
  5093                           ;psect for function _TurnKeyFlags
  5094  0706                     _TurnKeyFlags:	
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5098  0706  087A               	movf	_KeyData+1,w	;volatile
  5099  0707  0479               	iorwf	_KeyData,w	;volatile
  5100  0708  1903               	btfsc	3,2
  5101  0709  2F2A               	goto	l3545
  5102  070A  1283               	bcf	3,5	;RP0=0, select bank0
  5103  070B  1303               	bcf	3,6	;RP1=0, select bank0
  5104  070C  01B4               	clrf	TurnKeyFlags@F84
  5105  070D  0879               	movf	_KeyData,w	;volatile
  5106  070E  0620               	xorwf	_KeyOldData,w	;volatile
  5107  070F  1D03               	skipz
  5108  0710  2F23               	goto	l1311
  5109  0711  087A               	movf	_KeyData+1,w	;volatile
  5110  0712  0621               	xorwf	_KeyOldData+1,w	;volatile
  5111  0713  1D03               	skipz
  5112  0714  2F23               	goto	l1311
  5113  0715  3002               	movlw	2
  5114  0716  0AB5               	incf	TurnKeyFlags@F83,f
  5115  0717  0235               	subwf	TurnKeyFlags@F83,w
  5116  0718  1C03               	skipc
  5117  0719  0008               	return
  5118  071A  01B5               	clrf	TurnKeyFlags@F83
  5119  071B  0879               	movf	_KeyData,w	;volatile
  5120  071C  00B2               	movwf	_KeyFlag	;volatile
  5121  071D  087A               	movf	_KeyData+1,w	;volatile
  5122  071E  00B3               	movwf	_KeyFlag+1	;volatile
  5123  071F  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5124  0720  0008               	return
  5125  0721  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5126  0722  2F4F               	ljmp	l2995
  5127  0723                     l1311:	
  5128  0723  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5129  0724  0879               	movf	_KeyData,w	;volatile
  5130  0725  00A0               	movwf	_KeyOldData	;volatile
  5131  0726  087A               	movf	_KeyData+1,w	;volatile
  5132  0727  00A1               	movwf	_KeyOldData+1	;volatile
  5133  0728  01B5               	clrf	TurnKeyFlags@F83
  5134  0729  0008               	return
  5135  072A                     l3545:	
  5136  072A  1283               	bcf	3,5	;RP0=0, select bank0
  5137  072B  1303               	bcf	3,6	;RP1=0, select bank0
  5138  072C  01B5               	clrf	TurnKeyFlags@F83
  5139  072D  01A0               	clrf	_KeyOldData	;volatile
  5140  072E  01A1               	clrf	_KeyOldData+1	;volatile
  5141  072F  3002               	movlw	2
  5142  0730  0AB4               	incf	TurnKeyFlags@F84,f
  5143  0731  0234               	subwf	TurnKeyFlags@F84,w
  5144  0732  1C03               	skipc
  5145  0733  0008               	return
  5146  0734  01B4               	clrf	TurnKeyFlags@F84
  5147  0735  01B2               	clrf	_KeyFlag	;volatile
  5148  0736  01B3               	clrf	_KeyFlag+1	;volatile
  5149  0737  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5150  0738  0008               	return
  5151  0739                     __end_of_TurnKeyFlags:	
  5152  0739                     __ptext29:	
  5153 ;; *************** function _CheckValidTime *****************
  5154 ;; Defined at:
  5155 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;		None
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5169 ;;      Params:         0       0       0       0
  5170 ;;      Locals:         0       0       0       0
  5171 ;;      Temps:          0       0       0       0
  5172 ;;      Totals:         0       0       0       0
  5173 ;;Total ram usage:        0 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    1
  5176 ;; This function calls:
  5177 ;;		Nothing
  5178 ;; This function is called by:
  5179 ;;		_CheckTouchKey
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           
  5184                           ;psect for function _CheckValidTime
  5185  0739                     _CheckValidTime:	
  5186  0739                     l3555:	
  5187                           ;incstack = 0
  5188                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5189                           
  5190  0739  1283               	bcf	3,5	;RP0=0, select bank0
  5191  073A  1303               	bcf	3,6	;RP1=0, select bank0
  5192  073B  0833               	movf	_KeyFlag+1,w	;volatile
  5193  073C  0432               	iorwf	_KeyFlag,w	;volatile
  5194  073D  1903               	btfsc	3,2
  5195  073E  2F4B               	goto	l3561
  5196  073F  1683               	bsf	3,5	;RP0=1, select bank1
  5197  0740  0AC1               	incf	CheckValidTime@F87^(0+128),f
  5198  0741  1903               	skipnz
  5199  0742  0AC2               	incf	(CheckValidTime@F87+1)^(0+128),f
  5200  0743  303A               	movlw	58
  5201  0744  0242               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5202  0745  3098               	movlw	152
  5203  0746  1903               	skipnz
  5204  0747  0241               	subwf	CheckValidTime@F87^(0+128),w
  5205  0748  1C03               	skipc
  5206  0749  0008               	return
  5207  074A  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5208  074B                     l3561:	
  5209  074B  1683               	bsf	3,5	;RP0=1, select bank1
  5210  074C  01C1               	clrf	CheckValidTime@F87^(0+128)
  5211  074D  01C2               	clrf	(CheckValidTime@F87+1)^(0+128)
  5212  074E  0008               	return
  5213  074F                     __end_of_CheckValidTime:	
  5214  074F                     __ptext25:	
  5215 ;; *************** function _KeyClearIn *****************
  5216 ;; Defined at:
  5217 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;		None
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  51              1    4[COMMON] unsigned char 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 300/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5231 ;;      Params:         0       0       0       0
  5232 ;;      Locals:         1       0       0       0
  5233 ;;      Temps:          0       0       0       0
  5234 ;;      Totals:         1       0       0       0
  5235 ;;Total ram usage:        1 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    3
  5238 ;; This function calls:
  5239 ;;		_KeyClearOne
  5240 ;;		_KeyIsIn
  5241 ;; This function is called by:
  5242 ;;		_TurnKeyFlags
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _KeyClearIn
  5248  074F                     _KeyClearIn:	
  5249  074F                     l2995:	
  5250                           ;incstack = 0
  5251                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5252                           
  5253  074F  01F4               	clrf	KeyClearIn@51
  5254  0750                     l3001:	
  5255  0750  0874               	movf	KeyClearIn@51,w
  5256  0751  2655  118A         	fcall	_KeyIsIn
  5257  0753  3A00               	xorlw	0
  5258  0754  1D03               	skipz
  5259  0755  2F59               	goto	l3005
  5260  0756  0874               	movf	KeyClearIn@51,w
  5261  0757  2669  118A         	fcall	_KeyClearOne
  5262  0759                     l3005:	
  5263  0759  3003               	movlw	3
  5264  075A  0AF4               	incf	KeyClearIn@51,f
  5265  075B  0274               	subwf	KeyClearIn@51,w
  5266  075C  1803               	btfsc	3,0
  5267  075D  0008               	return
  5268  075E  2F50               	goto	l3001
  5269  075F                     __end_of_KeyClearIn:	
  5270  075F                     __ptext20:	
  5271 ;; *************** function _Refurbish_Sfr *****************
  5272 ;; Defined at:
  5273 ;;		line 97 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;		None
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, status,0
  5282 ;; Tracked objects:
  5283 ;;		On entry : 200/0
  5284 ;;		On exit  : 300/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5287 ;;      Params:         0       0       0       0
  5288 ;;      Locals:         0       0       0       0
  5289 ;;      Temps:          0       0       0       0
  5290 ;;      Totals:         0       0       0       0
  5291 ;;Total ram usage:        0 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    1
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_WorkSleep
  5298 ;;		_main
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           
  5303                           ;psect for function _Refurbish_Sfr
  5304  075F                     _Refurbish_Sfr:	
  5305                           
  5306                           ;main.c: 100: PIE1 = 2;
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5310  075F  3002               	movlw	2
  5311  0760  1283               	bcf	3,5	;RP0=0, select bank0
  5312  0761  008E               	movwf	14	;volatile
  5313                           
  5314                           ;main.c: 101: PR2 = 250;
  5315  0762  30FA               	movlw	250
  5316  0763  0091               	movwf	17	;volatile
  5317                           
  5318                           ;main.c: 102: INTCON = 0XC0;
  5319  0764  30C0               	movlw	192
  5320  0765  008B               	movwf	11	;volatile
  5321                           
  5322                           ;main.c: 103: if (4 != T2CON)
  5323  0766  3004               	movlw	4
  5324  0767  0613               	xorwf	19,w	;volatile
  5325  0768  1903               	btfsc	3,2
  5326  0769  0008               	return
  5327                           
  5328                           ;main.c: 104: T2CON = 4;
  5329  076A  3004               	movlw	4
  5330  076B  0093               	movwf	19	;volatile
  5331  076C  0008               	return
  5332  076D                     __end_of_Refurbish_Sfr:	
  5333  076D                     PL2:	
  5334  076D  0800               	movf	0,w
  5335  076E  00CE               	movwf	CheckKeyOldValue@80
  5336  076F  0A84               	incf	4,f
  5337  0770  0800               	movf	0,w
  5338  0771  00CF               	movwf	CheckKeyOldValue@80+1
  5339  0772  084C               	movf	CheckKeyOldValue@79,w
  5340  0773  02CE               	subwf	CheckKeyOldValue@80,f
  5341  0774  084D               	movf	CheckKeyOldValue@79+1,w
  5342  0775  1C03               	skipc
  5343  0776  03CF               	decf	CheckKeyOldValue@80+1,f
  5344  0777  02CF               	subwf	CheckKeyOldValue@80+1,f
  5345  0778  3000               	movlw	0
  5346  0779  024F               	subwf	CheckKeyOldValue@80+1,w
  5347  077A  3402               	retlw	2
  5348  077B                     __end_ofPL2:	
  5349  077B                     PL4:	
  5350  077B  00CC               	movwf	??_CheckOnceResult
  5351  077C  0A84               	incf	4,f
  5352  077D  0800               	movf	0,w
  5353  077E  00CD               	movwf	??_CheckOnceResult+1
  5354  077F  0855               	movf	CheckOnceResult@69,w
  5355  0780  074C               	addwf	??_CheckOnceResult,w
  5356  0781  00CE               	movwf	??_CheckOnceResult+2
  5357  0782  084D               	movf	??_CheckOnceResult+1,w
  5358  0783  1803               	skipnc
  5359  0784  0A4D               	incf	??_CheckOnceResult+1,w
  5360  0785  00CF               	movwf	??_CheckOnceResult+3
  5361  0786  0857               	movf	CheckOnceResult@71+1,w
  5362  0787  024F               	subwf	??_CheckOnceResult+3,w
  5363  0788  1D03               	skipz
  5364  0789  0008               	return
  5365  078A  0856               	movf	CheckOnceResult@71,w
  5366  078B  024E               	subwf	??_CheckOnceResult+2,w
  5367  078C  0008               	return
  5368  078D                     __end_ofPL4:	
  5369  078D                     PL8:	
  5370  078D  0084               	movwf	4
  5371  078E  0800               	movf	0,w
  5372  078F  00CC               	movwf	??_CheckOnceResult
  5373  0790  0A84               	incf	4,f
  5374  0791  0800               	movf	0,w
  5375  0792  00CD               	movwf	??_CheckOnceResult+1
  5376  0793  0008               	return
  5377  0794                     __end_ofPL8:	
  5378  0794                     PL10:	
  5379  0794  0084               	movwf	4
  5380  0795  084C               	movf	??_SystemEnterSleep,w
  5381  0796  0080               	movwf	0
  5382  0797  0A84               	incf	4,f
  5383  0798  084D               	movf	??_SystemEnterSleep+1,w
  5384  0799  0080               	movwf	0
  5385  079A  1003               	clrc
  5386  079B  0D54               	rlf	SystemEnterSleep@91,w
  5387  079C  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5388  079D  0084               	movwf	4
  5389  079E  0008               	return
  5390  079F                     __end_ofPL10:	
  5391  079F                     PL12:	
  5392  079F  0084               	movwf	4
  5393  07A0  0874               	movf	??_CheckKeyOldValue,w
  5394  07A1  0080               	movwf	0
  5395  07A2  0A84               	incf	4,f
  5396  07A3  0875               	movf	??_CheckKeyOldValue+1,w
  5397  07A4  0080               	movwf	0
  5398  07A5  1003               	clrc
  5399  07A6  0D50               	rlf	CheckKeyOldValue@78,w
  5400  07A7  3EB2               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5401  07A8  0084               	movwf	4
  5402  07A9  0008               	return
  5403  07AA                     __end_ofPL12:	
  5404  07AA                     PL14:	
  5405  07AA  0084               	movwf	4
  5406  07AB  0800               	movf	0,w
  5407  07AC  00CC               	movwf	??_SystemEnterSleep
  5408  07AD  0A84               	incf	4,f
  5409  07AE  0800               	movf	0,w
  5410  07AF  00CD               	movwf	??_SystemEnterSleep+1
  5411  07B0  0008               	return
  5412  07B1                     __end_ofPL14:	
  5413  07B1                     PL18:	
  5414  07B1  0800               	movf	0,w
  5415  07B2  00F4               	movwf	??_CheckKeyOldValue
  5416  07B3  0A84               	incf	4,f
  5417  07B4  0800               	movf	0,w
  5418  07B5  00F5               	movwf	??_CheckKeyOldValue+1
  5419  07B6  1003               	clrc
  5420  07B7  0D50               	rlf	CheckKeyOldValue@78,w
  5421  07B8  0008               	return
  5422  07B9                     __end_ofPL18:	
  5423  07B9                     PL20:	
  5424  07B9  0180               	clrf	0
  5425  07BA  0A84               	incf	4,f
  5426  07BB  0180               	clrf	0
  5427  07BC  1003               	clrc
  5428  07BD  0D72               	rlf	KeyClearOne@49,w
  5429  07BE  0008               	return
  5430  07BF                     __end_ofPL20:	
  5431  07BF                     PL22:	
  5432  07BF  3041               	movlw	65
  5433  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  5434  07C1  0095               	movwf	21	;volatile
  5435  07C2  1415               	bsf	21,0	;volatile
  5436  07C3  0196               	clrf	22	;volatile
  5437  07C4  0008               	return
  5438  07C5                     __end_ofPL22:	
  5439  07C5                     PL28:	
  5440  07C5  084C               	movf	CheckKeyOldValue@79,w
  5441  07C6  0080               	movwf	0
  5442  07C7  0A84               	incf	4,f
  5443  07C8  084D               	movf	CheckKeyOldValue@79+1,w
  5444  07C9  0080               	movwf	0
  5445  07CA  0008               	return
  5446  07CB                     __end_ofPL28:	
  5447  07CB                     PL36:	
  5448  07CB  01D4               	clrf	SystemEnterSleep@91
  5449  07CC  01D2               	clrf	SystemEnterSleep@92
  5450  07CD  0AD2               	incf	SystemEnterSleep@92,f
  5451  07CE  01D3               	clrf	SystemEnterSleep@92+1
  5452  07CF  0008               	return
  5453  07D0                     __end_ofPL36:	
  5454  07D0                     PL38:	
  5455  07D0  0DD2               	rlf	SystemEnterSleep@92,f
  5456  07D1  0DD3               	rlf	SystemEnterSleep@92+1,f
  5457  07D2  0AD4               	incf	SystemEnterSleep@91,f
  5458  07D3  0254               	subwf	SystemEnterSleep@91,w
  5459  07D4  0008               	return
  5460  07D5                     __end_ofPL38:	
  5461                           
  5462                           	psect	text35
  5463  0E68                     __ptext35:	
  5464 ;; *************** function _Isr_Timer *****************
  5465 ;; Defined at:
  5466 ;;		line 201 in file "C:\mcuproject\scm\zdt\D108_8F083_tssop20_ÎÞ×ªÍ·\D108_8F083_tssop20_\main.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, status,2, status,0
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 300/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5480 ;;      Params:         0       0       0       0
  5481 ;;      Locals:         0       0       0       0
  5482 ;;      Temps:          2       0       0       0
  5483 ;;      Totals:         2       0       0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		Interrupt level 1
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _Isr_Timer
  5495  0E68                     _Isr_Timer:	
  5496                           
  5497                           ;main.c: 203: if(TMR2IF)
  5498  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5499  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  5500  0E6A  1C8D               	btfss	13,1	;volatile
  5501  0E6B  2E7B               	goto	i1l3899
  5502                           
  5503                           ;main.c: 204: {
  5504                           ;main.c: 205: TMR2IF = 0;
  5505  0E6C  108D               	bcf	13,1	;volatile
  5506                           
  5507                           ;main.c: 206: if(++MainTime >= 32)
  5508  0E6D  3020               	movlw	32
  5509  0E6E  0AC9               	incf	_MainTime,f	;volatile
  5510  0E6F  0249               	subwf	_MainTime,w	;volatile
  5511  0E70  1C03               	skipc
  5512  0E71  2E7C               	goto	i1l973
  5513                           
  5514                           ;main.c: 207: {
  5515                           ;main.c: 208: MainTime = 0;
  5516  0E72  01C9               	clrf	_MainTime	;volatile
  5517                           
  5518                           ;main.c: 209: B_MainLoop = 1;
  5519  0E73  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5520                           
  5521                           ;main.c: 210: if(++count1s >= 250)
  5522  0E74  30FA               	movlw	250
  5523  0E75  0AC8               	incf	_count1s,f
  5524  0E76  0248               	subwf	_count1s,w
  5525  0E77  1C03               	skipc
  5526  0E78  2E7C               	goto	i1l973
  5527                           
  5528                           ;main.c: 211: {
  5529                           ;main.c: 212: count1s = 0;
  5530  0E79  01C8               	clrf	_count1s
  5531  0E7A  2E7C               	goto	i1l973
  5532  0E7B                     i1l3899:	
  5533                           
  5534                           ;main.c: 216: else
  5535                           ;main.c: 217: {
  5536                           ;main.c: 218: PIR1 = 0;
  5537  0E7B  018D               	clrf	13	;volatile
  5538  0E7C                     i1l973:	
  5539  0E7C  0871               	movf	??_Isr_Timer+1,w
  5540  0E7D  008A               	movwf	10
  5541  0E7E  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5542  0E7F  0083               	movwf	3
  5543  0E80  0EFE               	swapf	126,f
  5544  0E81  0E7E               	swapf	126,w
  5545  0E82  0009               	retfie
  5546  0E83                     __end_of_Isr_Timer:	
  5547  007E                     btemp	set	126	;btemp
  5548  007E                     wtemp0	set	126
  5549                           
  5550                           	psect	intentry
  5551  0004                     __pintentry:	
  5552                           ;incstack = 0
  5553                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5554                           
  5555  0004                     interrupt_function:	
  5556  007E                     saved_w	set	btemp
  5557  0004  00FE               	movwf	btemp
  5558  0005  0E03               	swapf	3,w
  5559  0006  00F0               	movwf	??_Isr_Timer
  5560  0007  080A               	movf	10,w
  5561  0008  00F1               	movwf	??_Isr_Timer+1
  5562  0009  158A  2E68         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         88
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      46
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11912
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7909
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                           _bujinCtr
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     622
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1289
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _bujinCtr                                             3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _bujinCtr
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      2E       6       57.5%
BANK2               50      0       0       7        0.0%
ABS                  0      0      89       8        0.0%
DATA                 0      0      89       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Aug 30 14:41:52 2025

                        pc 0002                         PL2 076D                         PL4 077B  
                       PL6 03CE                         PL8 078D              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 0794                        PL20 07B9                        PL12 079F  
                      PL30 0FF4                        PL22 07BF                        PL14 07AA  
                      PL40 03F1                        PL32 0FFA                        PL24 03E6  
                      PL16 03DD                        PL42 0F70                        PL34 03ED  
                      PL26 0FEF                        PL18 07B1                        PL44 03F6  
                      PL36 07CB                        PL28 07C5                        PL38 07D0  
                      l961 0F66                        l995 0221                        l989 01E5  
                      l999 0267                        _RA5 0435                        _RA6 0436  
                      _RA7 0437                        _RB6 0036                        _RB7 0037  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0817  
                     S4755 0817                       S4757 0827         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 005B               ___ftdiv@sign 0060                       l1012 0345  
                     l1024 0388                       l1018 0368                       l1051 028D  
                     l1311 0723                       l3001 0750                       l1330 0456  
                     l1091 0FB4                       l1252 053D                       l1092 0FB7  
                     l3021 0689                       l3005 0759                       l1093 0FBA  
                     l1342 0475                       l1094 0FC1                       l1095 0FC4  
                     l1096 0FC7                       l3033 0509                       l1097 0FCE  
                     l1089 0FB1                       l4001 01CE                       l1372 02F5  
                     l1293 06D9                       l3037 050F                       l1517 017C  
                     l3063 054B                       l4103 0180                       l4031 021D  
                     l4007 01CF                       l3065 055B                       l1529 01A0  
                     l4113 019E                       l4105 0183                       l4041 026B  
                     l4025 020A                       l4017 01EF                       l4115 0195  
                     l4107 0188                       l1571 00C5                       l4131 03A5  
                     l4205 04D6                       l4109 0190                       l4029 0215  
                     l4053 0EAB                       l4063 0EB9                       l4209 04DD  
                     l4225 04FE                       l4313 02E6                       l4241 0347  
                     l4091 030B                       l4307 02DF                       l4139 03B8  
                     l4235 033F                       l4405 057A                       l4069 03BD  
                     l4317 02EA                       l4309 02E0                       l4261 038B  
                     l4253 036A                       l4237 0342                       l4341 0E9D  
                     l4423 05D1                       l3703 0F28                       l4191 04A9  
                     l4319 02EB                       l4247 0362                       l4351 0EAA  
                     l4343 0E9E                       l3561 074B                       l3545 072A  
                     l3721 0F3F                       l3705 0F2A                       l4513 0114  
                     l4361 0F81                       l4353 0F75                       l4249 0365  
                     l4443 0607                       l3555 0739                       l4179 04A2  
                     l3803 07ED                       l4531 0137                       l4515 0119  
                     l4283 0296                       l4259 0385                       l3485 0695  
                     l4461 063F                       l4437 05FF                       l3397 06F5  
                     l3725 0F46                       l3717 0F38                       l3805 07EF  
                     l4541 0143                       l4373 0FA4                       l4365 0F88  
                     l4357 0F7D                       l4349 0EA9                       l4605 005A  
                     l3727 0F48                       l4543 014D                       l4535 013F  
                     l4383 0FD1                       l4287 029C                       l4615 0075  
                     l4465 0643                       l4457 0633                       l2881 0565  
                     l3729 0F4A                       l3745 0F6B                       l4369 0F90  
                     l4625 0094                       l4617 0078                       l2867 0663  
                     l4467 0647                       l2883 0566                       l4475 00B7  
                     l4547 015B                       l4387 0FDD                       l4299 02CC  
                     l4635 00A1                       l4627 0097                       l4469 064D  
                     l3693 0F19                       l4389 0FE9                       l4665 046A  
                     l4657 0465                       l4673 0474                       l3697 0F1E  
                     l4497 00D8                       l4681 0EC9                       l2995 074F  
                     l4667 046E                       l4589 0445                       l3991 01C3  
                     l3993 01C5                       _ADON 04A8                       _CHS4 04B6  
                     u4215 02C0                       _PIE1 000E                       _PIE2 0110  
                     u4405 0FA0                       u4415 0FAE                       u4425 0587  
                     u3715 0210                       _RAIF 006B                       u4445 05C2  
                     u4605 011C                       u3725 021B                       _INTF 0059  
                     u4455 05D7                       _RBIE 005B                       _RBIF 0058  
                     u4465 05E3                       u3765 025C                       u3925 03AB  
                     u4495 061F                       u4575 00E6                       u3785 0274  
                     _PIR1 000D                       _PIR2 010F                       u4927 01BF  
                     u3995 04D2                       _TMR0 0081                       _WPUB 0008  
                     _main 0EC0               ___ftpack@arg 0072               ___ftpack@exp 0075  
                     btemp 007E              ?_KeyStopClear 0070                       start 000B  
             _TurnKeyFlags 0706            __end_of_KeyIsIn 0669            __end_of_KeyHave 068C  
             ___fttol@exp1 006D              ??_Init_System 0072               ___fttol@lval 0069  
          TurnKeyFlags@F83 0035            TurnKeyFlags@F84 0034                      ?_main 0070  
          __end_of___ftdiv 010B            __end_of___fttol 0164                      _T2CON 0013  
                    _IOCB5 004D   __end_of_SystemEnterSleep 0505            __end_of___lwmod 03BD  
                    i1l973 0E7C                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 03C8                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 03CE            __end_of_chrgCtr 07F3  
      ___lmul@multiplicand 0050        __end_of_KeyClearOne 067E                 _KeyClearIn 074F  
           fanCtr@fan_temp 005A              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 0EB9                _ClearResSum 0565  
               _KeyCounter 0038                 _KeyOldData 0020            __end_of_pwmStop 0EC0  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 00A9                 _KeyUpShake 00BE            __initialization 000D  
             __end_of_main 0F00                     ??_main 0078              ___fttol@sign1 0068  
      __end_of_Init_System 0419                     _ADCON0 0095                     _ADCON1 0096  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 01B2  
                   _GODONE 04A9                     i1l3899 0E7B                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 0174         __size_of_KeyServer 0070  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD3L 009C  
                   _PWMD4L 001B               ??_ADC_Sample 0073                     _PWMT4L 001C  
                   _TRISB5 002D                     _TRISB6 002E                  ??_KeyIsIn 0072  
                ??_KeyHave 0074              ClearResSum@56 0072         __size_of_Isr_Timer 001B  
         __end_of_bujinCtr 0FEF  __size_of_CheckKeyOldValue 0064                     ___lmul 02F1  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0282  
                ??___ftdiv 0058                  ??___fttol 0065                  ??___lwmod 0076  
                ??_fanInit 0072                  ??_fanStop 0072                _KeyClearOne 0669  
                ??_chrgCtr 0072                     _result 00C3              _Table_KeyFalg 0806  
            _Table_KeyDown 080E         __end_of_ADC_Sample 0282                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0072                  ??_pwmStop 0072  
              ?_KeyClearIn 0070                  ??_workCtr 0077            _CheckOnceResult 0574  
         __end_of_wuhuaCtr 0EAB    __end_of__initialization 001D         __size_of_WorkSleep 002F  
        CheckOnceResult@70 0052          CheckOnceResult@71 0056          CheckOnceResult@72 0053  
        CheckOnceResult@73 0050          CheckOnceResult@68 0058          CheckOnceResult@69 0055  
               ___ftdiv@f1 0055                 ___ftdiv@f2 0052                 ___ftdiv@f3 005C  
               ___fttol@f1 0061             __pcstackCOMMON 0070                _Init_System 03FB  
               __end_ofPL2 077B                 __end_ofPL4 078D                 __end_ofPL6 03DD  
               __end_ofPL8 0794          __end_of_KeyServer 0F70                 ___lwtoft@c 004F  
     __end_of_KeyStopClear 0706          __end_of_Isr_Timer 0E83         __size_of_keyLedCtr 0075  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 0042  
__size_of_GetTouchKeyValue 0060               _chrgFullTime 0041              _CheckTouchKey 0448  
               __pmaintext 0EC0                    ?___lmul 004C                    ?_fanCtr 0070  
               __pintentry 0004        __size_of_KeyClearIn 0010             ___lmul@product 0072  
                ?___ftpack 0072          __end_of_WorkSleep 0448                  ?___lwtoft 004F  
        ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0655                    _KEYCON0 0111  
                  _KEYCON1 0112                    _KEYCON2 0113         ??_SystemEnterSleep 004C  
                  _B_OnOff 03C5                    _PWMD23H 009E     __size_of_Refurbish_Sfr 000E  
                  _PWMCON0 0015                    _PWMCON1 0016                    _PWMCON2 001D  
                ?_bujinCtr 0070       __end_of_Table_KeyCap 0814                 __stringtab 0800  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 0032  
                  _KeyIsIn 0655                    _KeyHave 067E             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0072            ADC_Sample@admax 0055            ADC_Sample@admin 0053  
          ADC_Sample@adsum 004F           _CheckKeyOldValue 068C            __size_of___lmul 0033  
                  ___ftdiv 00A9            __size_of_fanCtr 006F                    ___fttol 010B  
                  ___lwmod 0399          __end_of_keyLedCtr 0399                    _b_kover 03C4  
                  _fanInit 03BD                    _fanDuty 0046                    _fanStop 03C8  
               ??___ftpack 004C                    _chrgCtr 07D5                    __ptext1 0020  
                  __ptext2 0E83                    __ptext3 0EB9                    __ptext4 0EAB  
                  __ptext5 0324                    __ptext6 0399                    __ptext7 0282  
                  __ptext8 03C8                    __ptext9 03BD                 _lowBatLock 0040  
               _lowBatTime 00C7                  ?_wuhuaCtr 0070                 ??___lwtoft 0077  
                  _count1s 0048                 _lowFanTime 00C5                    _pwmInit 0EAB  
                  _pwmStop 0EB9    __size_of_CheckValidTime 0016                    clrloop0 07F4  
                  _workCtr 0020                 ??_bujinCtr 0072       end_of_initialization 001D  
            _Refurbish_Sfr 075F               _KeyOldValue0 00B2               _KeyOldValue1 00AC  
             _KeyOldValue2 00A6      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054  
       SystemEnterSleep@92 0052         SystemEnterSleep@93 0050         SystemEnterSleep@94 004E  
             ?_KeyClearOne 0070               _KeyReference 00A0                 ??_wuhuaCtr 0072  
        CheckValidTime@F87 00C1           ?_CheckOnceResult 0070                  KeyIsIn@45 0073  
                KeyIsIn@46 0072                  KeyHave@58 0074                  KeyHave@59 0072  
             ??_KeyClearIn 0074                ___ftdiv@exp 005F            ??_CheckTouchKey 0078  
             _KeyStopClear 06F0           _GetTouchKeyValue 0505             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 0324             __end_of_fanCtr 02F1  
       __end_of_KeyClearIn 075F              WorkSleep@time 0039                  _KeyMaxSub 0037  
                _KeyResSum 00B8                __end_ofPL10 079F                __end_ofPL20 07BF  
              __end_ofPL12 07AA                __end_ofPL30 0FFA                __end_ofPL22 07C5  
              __end_ofPL14 07B1                __end_ofPL40 03F6                __end_ofPL32 1000  
              __end_ofPL24 03ED                __end_ofPL16 03E6                __end_ofPL42 0F75  
              __end_ofPL34 03F1                __end_ofPL26 0FF4                __end_ofPL18 07B9  
              __end_ofPL44 03FB                __end_ofPL36 07D0                __end_ofPL28 07CB  
              __end_ofPL38 07D5        start_initialization 000D                  _KeyServer 0F00  
                _Isr_Timer 0E68               _maxMotorStep 0026          workCtr@power_temp 00C9  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0057               _Table_KeyCap 0811  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0044  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004C              __pcstackBANK1 00C9                  _WorkSleep 0419  
           _CheckValidTime 0739   __end_of_CheckKeyOldValue 06F0                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 003A          __size_of_bujinCtr 007A                   ?_KeyIsIn 0070  
                 ?_KeyHave 0072  __size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072  
           ??_TurnKeyFlags 0075                  __pnvBANK0 006E                  __pnvBANK1 00CD  
                 ?___ftdiv 0052                   ?___fttol 0061                   ?___lwmod 0072  
                 ?_fanInit 0070                  _closeTime 003C                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 002E              _shanshuoTime3 002C  
                __pstrings 0800                  __pswtext1 0817                  __pswtext2 0827  
                _bujinFlag 003F       __size_of_KeyClearOne 0015                  _keyLedCtr 0324  
                _firstLock 006E     __end_of_CheckValidTime 074F                  _firstTime 00CD  
        __size_of_wuhuaCtr 0028                 ?_WorkSleep 0070             ADC_Sample@adch 004D  
                 ?_pwmInit 0070                   ?_pwmStop 0070                   ?_workCtr 0070  
              ADC_Sample@i 004E                ADC_Sample@j 004C                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 07F3  
           KeyStopClear@53 0073                  _motorStep 0028        CheckKeyOldValue@F77 0036  
                _powerFlag 003E                __stringbase 0805       __size_of_Init_System 001E  
    __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0811                 ?_keyLedCtr 0070  
 __end_of_GetTouchKeyValue 0565            ?_CheckValidTime 0070                ??_KeyServer 0072  
        ___lmul@multiplier 004C                  _wuhuaFlag 0047                ??_Isr_Timer 0070  
                 _MainTime 0049                 _ADC_Sample 01B2           __size_of_KeyIsIn 0014  
         __size_of_KeyHave 000E           _Table_KeyChannel 0814           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwmod 0024                   ___ftpack 0174  
         __size_of_fanInit 000B         __end_of__stringtab 0806           __size_of_fanStop 0006  
         __size_of_chrgCtr 001E                   ___lwtoft 0164                   _b_kover1 03C3  
                 _b_ksleep 03C0       __end_of_TurnKeyFlags 0739                   _fanValue 002A  
                 _adresult 004A                   _chrgFlag 0043                ??_WorkSleep 0078  
                 __ptext10 02F1                   __ptext11 01B2                   __ptext20 075F  
                 __ptext12 0F75                   __ptext21 0F00                   __ptext13 0164  
                 __ptext30 0574                   __ptext22 03FB                   __ptext14 010B  
                 __ptext31 067E                   __ptext23 0448                   __ptext15 00A9  
                 __ptext32 0669                   __ptext24 0706                   __ptext16 0174  
                 __ptext33 068C                   __ptext25 074F                   __ptext17 07D5  
                 __ptext34 0655                   __ptext26 06F0                   __ptext18 0419  
                 __ptext35 0E68                   __ptext27 0505                   __ptext19 0475  
                 __ptext28 0565                   __ptext29 0739           __size_of_pwmInit 000E  
         __size_of_pwmStop 0007               _shanshuoTime 0030                   _bujinCtr 0F75  
                 _count10s 0045           __size_of_workCtr 0089                   _keyCount 0024  
 __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075  
       GetTouchKeyValue@64 0073              __size_of_main 0040                _longKeyFlag 003D  
         _SystemEnterSleep 0475           bujinCtr@tempStep 0074      __end_of_CheckTouchKey 0475  
       CheckKeyOldValue@80 004E         CheckKeyOldValue@78 0050         CheckKeyOldValue@79 004C  
                 _test_adc 003B                   _power_ad 0022                   _workStep 007B  
                 _wuhuaCtr 0E83                ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070  
                 intlevel1 0000              ??_ClearResSum 0072         ??_CheckKeyOldValue 0074  
         ___lwmod@dividend 0074                ?_ADC_Sample 0072                  stringcode 0800  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0059                 _OPTION_REG 0001  
          ___lwmod@divisor 0072            ___lwmod@counter 0076                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0072               KeyClearIn@51 0074  
    __end_of_Refurbish_Sfr 076D        __end_of_ClearResSum 0574          ??_CheckOnceResult 004C  
