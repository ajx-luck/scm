

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 19 14:06:19 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F6790
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text21,local,class=CODE,merge=1,delta=2
    16                           	psect	text25,local,class=CODE,merge=1,delta=2
    17                           	psect	text38,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	pa_nodes0,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	strings
    58  0800                     __pstrings:	
    59  0800                     stringtab:	
    60  0800                     __stringtab:	
    61  0800                     stringcode:	
    62                           ;	String table - string pointers are 1 byte each
    63                           
    64  0800                     stringdir:	
    65  0800  3008               	movlw	high stringdir
    66  0801  008A               	movwf	10
    67  0802  0804               	movf	4,w
    68  0803  0A84               	incf	4,f
    69  0804  0782               	addwf	2,f
    70  0805                     __stringbase:	
    71  0805  3400               	retlw	0
    72  0806                     __end_of__stringtab:	
    73  0806                     _numArray:	
    74  0806  343F               	retlw	63
    75  0807  3406               	retlw	6
    76  0808  345B               	retlw	91
    77  0809  344F               	retlw	79
    78  080A  3466               	retlw	102
    79  080B  346D               	retlw	109
    80  080C  347D               	retlw	125
    81  080D  3407               	retlw	7
    82  080E  347F               	retlw	127
    83  080F  346F               	retlw	111
    84  0810  3471               	retlw	113
    85  0811  3479               	retlw	121
    86  0812  3450               	retlw	80
    87  0813  3473               	retlw	115
    88  0814                     __end_of_numArray:	
    89  0814                     _Table_KeyFalg:	
    90  0814  3401               	retlw	1
    91  0815  3402               	retlw	2
    92  0816  3404               	retlw	4
    93  0817  3408               	retlw	8
    94  0818  3410               	retlw	16
    95  0819  3420               	retlw	32
    96  081A  3440               	retlw	64
    97  081B  3480               	retlw	128
    98  081C                     __end_of_Table_KeyFalg:	
    99  081C                     _Table_KeyDown:	
   100  081C  340A               	retlw	10
   101  081D  340A               	retlw	10
   102  081E  340A               	retlw	10
   103  081F                     __end_of_Table_KeyDown:	
   104  081F                     _Table_KeyCap:	
   105  081F  343A               	retlw	58
   106  0820  341A               	retlw	26
   107  0821  3402               	retlw	2
   108  0822                     __end_of_Table_KeyCap:	
   109  0822                     _Table_KeyChannel:	
   110  0822  3458               	retlw	88
   111  0823  3459               	retlw	89
   112  0824  345A               	retlw	90
   113  0825                     __end_of_Table_KeyChannel:	
   114  001D                     _PWMCON2	set	29
   115  001C                     _PWMD01H	set	28
   116  001A                     _PWMD3L	set	26
   117  0017                     _PWMD0L	set	23
   118  0016                     _PWMTH	set	22
   119  0015                     _PWMTL	set	21
   120  0014                     _PWMCON1	set	20
   121  0013                     _PWMCON0	set	19
   122  0012                     _T2CON	set	18
   123  000E                     _PWMD23H	set	14
   124  000D                     _PIE1	set	13
   125  000C                     _PIR1	set	12
   126  000B                     _INTCON	set	11
   127  0008                     _WPUB	set	8
   128  0006                     _PORTB	set	6
   129  0005                     _PORTA	set	5
   130  0001                     _TMR0	set	1
   131  0061                     _TMR2IF	set	97
   132  0058                     _RBIF	set	88
   133  0036                     _RB6	set	54
   134  0037                     _RB7	set	55
   135  009F                     _ADRESH	set	159
   136  009E                     _ADRESL	set	158
   137  009D                     _ADCON0	set	157
   138  009C                     _ADCON1	set	156
   139  0097                     _KEYCON2	set	151
   140  0095                     _KEYDATAH	set	149
   141  0094                     _KEYDATAL	set	148
   142  0093                     _KEYCON1	set	147
   143  0092                     _KEYCON0	set	146
   144  0091                     _PR2	set	145
   145  0088                     _OSCCON	set	136
   146  0086                     _TRISB	set	134
   147  0085                     _TRISA	set	133
   148  0081                     _OPTION_REG	set	129
   149  04E8                     _ADON	set	1256
   150  04E9                     _GODONE	set	1257
   151  04E6                     _CHS4	set	1254
   152  0441                     _SWDTEN	set	1089
   153  0436                     _TRISB6	set	1078
   154  0115                     _WPUC	set	277
   155  0112                     _ANSEL2	set	274
   156  0111                     _ANSEL1	set	273
   157  0110                     _ANSEL0	set	272
   158  0108                     _PIE2	set	264
   159  0107                     _PIR2	set	263
   160  0841                     _RACIE	set	2113
   161  0839                     _RACIF	set	2105
   162  083A                     _RCCIF	set	2106
   163  018D                     _PWMIOS1	set	397
   164  018C                     _PWMIOS0	set	396
   165  0188                     _IOCA	set	392
   166  0186                     _TRISC	set	390
   167  0185                     _PORTC	set	389
   168  0C28                     _RC0	set	3112
   169                           
   170                           	psect	cinit
   171  000D                     start_initialization:	
   172                           ; #config settings
   173                           
   174  000D                     __initialization:	
   175  000D  3020               	movlw	low __pbssBANK0
   176                           
   177                           ; Clear objects allocated to BITCOMMON
   178  000E  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   179                           
   180                           ; Clear objects allocated to COMMON
   181  000F  01FB               	clrf	__pbssCOMMON& (0+127)
   182                           
   183                           ; Clear objects allocated to BANK0
   184  0010  1383               	bcf	3,7	;select IRP bank0
   185  0011  0084               	movwf	4
   186  0012  3066               	movlw	low (__pbssBANK0+70)
   187  0013  118A  27F5  118A   	fcall	clear_ram0
   188                           
   189                           ; Clear objects allocated to BANK1
   190  0016  30A0               	movlw	low __pbssBANK1
   191  0017  0084               	movwf	4
   192  0018  30C1               	movlw	low (__pbssBANK1+33)
   193  0019  118A  27F5         	fcall	clear_ram0
   194  001B                     end_of_initialization:	
   195                           ;End of C runtime variable initialization code
   196                           
   197  001B                     __end_of__initialization:	
   198  001B  0183               	clrf	3
   199  001C  158A  2D59         	ljmp	_main	;jump to C main() function
   200                           
   201                           	psect	bitbssCOMMON
   202  03D0                     __pbitbssCOMMON:	
   203  03D0                     _b_ksleep:	
   204  03D0                     	ds	1
   205  03D1                     _b_kerr:	
   206  03D1                     	ds	1
   207  03D2                     _b_kclr:	
   208  03D2                     	ds	1
   209  03D3                     _b_kover1:	
   210  03D3                     	ds	1
   211  03D4                     _b_kover:	
   212  03D4                     	ds	1
   213  03D5                     _B_OnOff:	
   214  03D5                     	ds	1
   215  03D6                     _B_MainLoop:	
   216  03D6                     	ds	1
   217                           
   218                           	psect	bssCOMMON
   219  007B                     __pbssCOMMON:	
   220  007B                     _zeroStep:	
   221  007B                     	ds	1
   222                           
   223                           	psect	bssBANK0
   224  0020                     __pbssBANK0:	
   225  0020                     _KeyOldValue1:	
   226  0020                     	ds	6
   227  0026                     _KeyData:	
   228  0026                     	ds	2
   229  0028                     _KeyOldData:	
   230  0028                     	ds	2
   231  002A                     _sleepTime:	
   232  002A                     	ds	2
   233  002C                     _chrgFullTime:	
   234  002C                     	ds	2
   235  002E                     _outResult:	
   236  002E                     	ds	2
   237  0030                     _chrgResult:	
   238  0030                     	ds	2
   239  0032                     _batResult:	
   240  0032                     	ds	2
   241  0034                     _ledLightTime:	
   242  0034                     	ds	2
   243  0036                     _keyCount3:	
   244  0036                     	ds	2
   245  0038                     _keyCount2:	
   246  0038                     	ds	2
   247  003A                     _keyCount1:	
   248  003A                     	ds	2
   249  003C                     _firstTime:	
   250  003C                     	ds	2
   251  003E                     _KeyFlag:	
   252  003E                     	ds	2
   253  0040                     TurnKeyFlags@KeyNoTimes:	
   254  0040                     	ds	1
   255  0041                     TurnKeyFlags@KeyHaveTimes:	
   256  0041                     	ds	1
   257  0042                     CheckKeyOldValue@counter:	
   258  0042                     	ds	1
   259  0043                     _KeyMaxSub:	
   260  0043                     	ds	1
   261  0044                     _KeyCounter:	
   262  0044                     	ds	1
   263  0045                     _startTime:	
   264  0045                     	ds	1
   265  0046                     _checkTime:	
   266  0046                     	ds	1
   267  0047                     _maxDuty:	
   268  0047                     	ds	1
   269  0048                     _tempDuty:	
   270  0048                     	ds	1
   271  0049                     _preZero:	
   272  0049                     	ds	1
   273  004A                     _keyCancelTime:	
   274  004A                     	ds	1
   275  004B                     _key3ProtectTime:	
   276  004B                     	ds	1
   277  004C                     _key2ProtectTime:	
   278  004C                     	ds	1
   279  004D                     _key1ProtectTime:	
   280  004D                     	ds	1
   281  004E                     _chrgBatStepTime:	
   282  004E                     	ds	1
   283  004F                     _checkTempTime:	
   284  004F                     	ds	1
   285  0050                     _lowBatTime:	
   286  0050                     	ds	1
   287  0051                     _lowBatFlag:	
   288  0051                     	ds	1
   289  0052                     _chrgLockFlag:	
   290  0052                     	ds	1
   291  0053                     _count15s:	
   292  0053                     	ds	1
   293  0054                     _subTime:	
   294  0054                     	ds	1
   295  0055                     _addTime:	
   296  0055                     	ds	1
   297  0056                     _chrgDuty:	
   298  0056                     	ds	1
   299  0057                     _chrgFullFlag:	
   300  0057                     	ds	1
   301  0058                     _count50:	
   302  0058                     	ds	1
   303  0059                     _preBatValue:	
   304  0059                     	ds	1
   305  005A                     _batValue:	
   306  005A                     	ds	1
   307  005B                     _chrgFlag:	
   308  005B                     	ds	1
   309  005C                     _count1s:	
   310  005C                     	ds	1
   311  005D                     _count64ms:	
   312  005D                     	ds	1
   313  005E                     _showLed2:	
   314  005E                     	ds	1
   315  005F                     _showLed1:	
   316  005F                     	ds	1
   317  0060                     _showGeWei:	
   318  0060                     	ds	1
   319  0061                     _showShiWei:	
   320  0061                     	ds	1
   321  0062                     _showFlag:	
   322  0062                     	ds	1
   323  0063                     _workStep:	
   324  0063                     	ds	1
   325  0064                     _longKeyFalg:	
   326  0064                     	ds	1
   327  0065                     _MainTime:	
   328  0065                     	ds	1
   329                           
   330                           	psect	bssBANK1
   331  00A0                     __pbssBANK1:	
   332  00A0                     _KeyReference:	
   333  00A0                     	ds	6
   334  00A6                     _KeyOldValue2:	
   335  00A6                     	ds	6
   336  00AC                     _KeyOldValue0:	
   337  00AC                     	ds	6
   338  00B2                     _KeyResSum:	
   339  00B2                     	ds	6
   340  00B8                     _KeyUpShake:	
   341  00B8                     	ds	3
   342  00BB                     CheckValidTime@validtime:	
   343  00BB                     	ds	2
   344  00BD                     _tempResult:	
   345  00BD                     	ds	2
   346  00BF                     _count900s:	
   347  00BF                     	ds	2
   348                           
   349                           	psect	clrtext
   350  07F5                     clear_ram0:	
   351                           ;	Called with FSR containing the base address, and
   352                           ;	W with the last address+1
   353                           
   354  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   355  07F6                     clrloop0:	
   356  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   357  07F7  0A84               	incf	4,f	;increment pointer
   358  07F8  0604               	xorwf	4,w	;XOR with final address
   359  07F9  1903               	btfsc	3,2	;have we reached the end yet?
   360  07FA  3400               	retlw	0	;all done for this memory range, return
   361  07FB  0604               	xorwf	4,w	;XOR again to restore value
   362  07FC  2FF6               	goto	clrloop0	;do the next byte
   363                           
   364                           	psect	cstackCOMMON
   365  0070                     __pcstackCOMMON:	
   366  0070                     ?_SystemEnterSleep:	
   367  0070                     ?_CheckTouchKey:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_Init_System:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_Refurbish_Sfr:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_KeyServer:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_checkOutAD:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_checkChrgAD:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_checkTempAD:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_checkBat:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_Isr_Timer:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ??_Isr_Timer:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_WorkSleep:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_TM1650_START:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_TM1650_STOP:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_write_8bit:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_initTM1650:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_refreshTM1650:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_setZeroStep:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_setZeroStep2:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_showCtr:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_workCtr:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_chrgCtr:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_task1:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_KeyIsIn:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_KeyClearOne:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_KeyClearIn:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_KeyStopClear:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_ClearResSum:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_GetTouchKeyValue:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_CheckOnceResult:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?_CheckKeyOldValue:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_TurnKeyFlags:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_CheckValidTime:	
   464                           ; 1 bytes @ 0x0
   465                           
   466                           
   467                           ; 1 bytes @ 0x0
   468  0070                     	ds	2
   469  0072                     ??_Init_System:	
   470  0072                     ??_Refurbish_Sfr:	
   471                           ; 1 bytes @ 0x2
   472                           
   473  0072                     ??_KeyServer:	
   474                           ; 1 bytes @ 0x2
   475                           
   476  0072                     ??_TM1650_START:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ??_TM1650_STOP:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ??_write_8bit:	
   483                           ; 1 bytes @ 0x2
   484                           
   485  0072                     ??_setZeroStep:	
   486                           ; 1 bytes @ 0x2
   487                           
   488  0072                     ??_setZeroStep2:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     ??_KeyIsIn:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ??_KeyClearOne:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     ??_ClearResSum:	
   498                           ; 1 bytes @ 0x2
   499                           
   500  0072                     ?_KeyHave:	
   501                           ; 1 bytes @ 0x2
   502                           
   503  0072                     ??_CheckValidTime:	
   504                           ; 1 bytes @ 0x2
   505                           
   506  0072                     ?___lbdiv:	
   507                           ; 1 bytes @ 0x2
   508                           
   509  0072                     ?___lbmod:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     ?_Read_ADC:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     ?___lwmod:	
   516                           ; 2 bytes @ 0x2
   517                           
   518  0072                     Read_ADC@ADCLDORef:	
   519                           ; 2 bytes @ 0x2
   520                           
   521  0072                     write_8bit@dat:	
   522                           ; 1 bytes @ 0x2
   523                           
   524  0072                     KeyIsIn@i:	
   525                           ; 1 bytes @ 0x2
   526                           
   527  0072                     KeyClearOne@cnt:	
   528                           ; 1 bytes @ 0x2
   529                           
   530  0072                     ClearResSum@cnt:	
   531                           ; 1 bytes @ 0x2
   532                           
   533  0072                     ___lbdiv@divisor:	
   534                           ; 1 bytes @ 0x2
   535                           
   536  0072                     ___lbmod@divisor:	
   537                           ; 1 bytes @ 0x2
   538                           
   539  0072                     KeyHave@flag:	
   540                           ; 1 bytes @ 0x2
   541                           
   542  0072                     ___lwmod@divisor:	
   543                           ; 2 bytes @ 0x2
   544                           
   545                           
   546                           ; 2 bytes @ 0x2
   547  0072                     	ds	1
   548  0073                     ??_KeyStopClear:	
   549  0073                     ??_GetTouchKeyValue:	
   550                           ; 1 bytes @ 0x3
   551                           
   552  0073                     ??___lbdiv:	
   553                           ; 1 bytes @ 0x3
   554                           
   555  0073                     ??___lbmod:	
   556                           ; 1 bytes @ 0x3
   557                           
   558  0073                     write_8bit@i:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0073                     KeyIsIn@cnt:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     KeyStopClear@i:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0073                     ___lbdiv@dividend:	
   568                           ; 1 bytes @ 0x3
   569                           
   570  0073                     GetTouchKeyValue@temp:	
   571                           ; 1 bytes @ 0x3
   572                           
   573                           
   574                           ; 2 bytes @ 0x3
   575  0073                     	ds	1
   576  0074                     ??_Read_ADC:	
   577  0074                     ?_tm1650cmd:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     ??_KeyClearIn:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ??_KeyHave:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ??_CheckKeyOldValue:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0074                     tm1650cmd@seg_data:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0074                     KeyClearIn@cnt:	
   593                           ; 1 bytes @ 0x4
   594                           
   595  0074                     KeyHave@cnt:	
   596                           ; 1 bytes @ 0x4
   597                           
   598  0074                     ___lbdiv@counter:	
   599                           ; 1 bytes @ 0x4
   600                           
   601  0074                     ___lbmod@dividend:	
   602                           ; 1 bytes @ 0x4
   603                           
   604  0074                     ___lwmod@dividend:	
   605                           ; 1 bytes @ 0x4
   606                           
   607                           
   608                           ; 2 bytes @ 0x4
   609  0074                     	ds	1
   610  0075                     ??_tm1650cmd:	
   611  0075                     ??_CheckOnceResult:	
   612                           ; 1 bytes @ 0x5
   613                           
   614  0075                     ??_TurnKeyFlags:	
   615                           ; 1 bytes @ 0x5
   616                           
   617  0075                     tm1650cmd@digAddr:	
   618                           ; 1 bytes @ 0x5
   619                           
   620  0075                     ___lbdiv@quotient:	
   621                           ; 1 bytes @ 0x5
   622                           
   623  0075                     ___lbmod@counter:	
   624                           ; 1 bytes @ 0x5
   625                           
   626  0075                     Read_ADC@Adc_Result:	
   627                           ; 1 bytes @ 0x5
   628                           
   629  0075                     GetTouchKeyValue@wake:	
   630                           ; 2 bytes @ 0x5
   631                           
   632                           
   633                           ; 2 bytes @ 0x5
   634  0075                     	ds	1
   635  0076                     ??_initTM1650:	
   636  0076                     ??_refreshTM1650:	
   637                           ; 1 bytes @ 0x6
   638                           
   639  0076                     ??_task1:	
   640                           ; 1 bytes @ 0x6
   641                           
   642  0076                     ??___lwmod:	
   643                           ; 1 bytes @ 0x6
   644                           
   645  0076                     ___lbmod@rem:	
   646                           ; 1 bytes @ 0x6
   647                           
   648  0076                     ___lwmod@counter:	
   649                           ; 1 bytes @ 0x6
   650                           
   651                           
   652                           ; 1 bytes @ 0x6
   653  0076                     	ds	1
   654  0077                     Read_ADC@i:	
   655  0077                     GetTouchKeyValue@cnt:	
   656                           ; 1 bytes @ 0x7
   657                           
   658                           
   659                           ; 1 bytes @ 0x7
   660  0077                     	ds	1
   661  0078                     ??_SystemEnterSleep:	
   662  0078                     Read_ADC@ADCchannel:	
   663                           ; 1 bytes @ 0x8
   664                           
   665                           
   666                           ; 1 bytes @ 0x8
   667  0078                     	ds	1
   668  0079                     ??_CheckTouchKey:	
   669  0079                     ??_checkChrgAD:	
   670                           ; 1 bytes @ 0x9
   671                           
   672  0079                     ??_checkTempAD:	
   673                           ; 1 bytes @ 0x9
   674                           
   675  0079                     ??_chrgCtr:	
   676                           ; 1 bytes @ 0x9
   677                           
   678  0079                     checkOutAD@maxAout:	
   679                           ; 1 bytes @ 0x9
   680                           
   681                           
   682                           ; 1 bytes @ 0x9
   683  0079                     	ds	1
   684  007A                     ??_WorkSleep:	
   685  007A                     ??_showCtr:	
   686                           ; 1 bytes @ 0xA
   687                           
   688  007A                     ??_workCtr:	
   689                           ; 1 bytes @ 0xA
   690                           
   691  007A                     ??_main:	
   692                           ; 1 bytes @ 0xA
   693                           
   694                           
   695                           	psect	cstackBANK0
   696  0066                     __pcstackBANK0:	
   697                           ; 1 bytes @ 0xA
   698                           
   699  0066                     ??_checkOutAD:	
   700  0066                     ??_checkBat:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0066                     CheckOnceResult@OldValue:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0066                     CheckKeyOldValue@KeyResTemp:	
   707                           ; 2 bytes @ 0x0
   708                           
   709  0066                     SystemEnterSleep@KeyValue:	
   710                           ; 2 bytes @ 0x0
   711                           
   712                           
   713                           ; 2 bytes @ 0x0
   714  0066                     	ds	2
   715  0068                     CheckOnceResult@KeyValue:	
   716  0068                     CheckKeyOldValue@KeyOldTemp:	
   717                           ; 2 bytes @ 0x2
   718                           
   719  0068                     SystemEnterSleep@KeyResTemp:	
   720                           ; 2 bytes @ 0x2
   721                           
   722                           
   723                           ; 2 bytes @ 0x2
   724  0068                     	ds	2
   725  006A                     CheckOnceResult@flag:	
   726  006A                     CheckKeyOldValue@cnt:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  006A                     SystemEnterSleep@wake:	
   730                           ; 1 bytes @ 0x4
   731                           
   732                           
   733                           ; 2 bytes @ 0x4
   734  006A                     	ds	1
   735  006B                     CheckOnceResult@KeyDown:	
   736                           
   737                           ; 1 bytes @ 0x5
   738  006B                     	ds	1
   739  006C                     SystemEnterSleep@cnt:	
   740  006C                     CheckOnceResult@KeyResTemp:	
   741                           ; 1 bytes @ 0x6
   742                           
   743                           
   744                           ; 2 bytes @ 0x6
   745  006C                     	ds	2
   746  006E                     CheckOnceResult@cnt:	
   747                           
   748                           ; 1 bytes @ 0x8
   749  006E                     	ds	1
   750                           
   751                           	psect	maintext
   752  0D59                     __pmaintext:	
   753 ;;
   754 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   755 ;;
   756 ;; *************** function _main *****************
   757 ;; Defined at:
   758 ;;		line 1103 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : B00/0
   769 ;;		On exit  : 300/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   772 ;;      Params:         0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0
   774 ;;      Temps:          0       0       0       0       0
   775 ;;      Totals:         0       0       0       0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels required when called:    6
   778 ;; This function calls:
   779 ;;		_CheckTouchKey
   780 ;;		_Init_System
   781 ;;		_KeyServer
   782 ;;		_Refurbish_Sfr
   783 ;;		_checkBat
   784 ;;		_chrgCtr
   785 ;;		_initTM1650
   786 ;;		_showCtr
   787 ;;		_task1
   788 ;;		_workCtr
   789 ;; This function is called by:
   790 ;;		Startup code after reset
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           
   795                           ;psect for function _main
   796  0D59                     _main:	
   797                           
   798                           ;main.c: 1105: Init_System();
   799                           
   800                           ;incstack = 0
   801                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   802  0D59  118A  2645  158A   	fcall	_Init_System
   803                           
   804                           ;main.c: 1106: initTM1650();
   805  0D5C  118A  2691  158A   	fcall	_initTM1650
   806                           
   807                           ;main.c: 1107: firstTime = 250;
   808  0D5F  30FA               	movlw	250
   809  0D60  00BC               	movwf	_firstTime
   810  0D61  01BD               	clrf	_firstTime+1
   811  0D62                     l4758:	
   812                           
   813                           ;main.c: 1109: {
   814                           ;main.c: 1110: if(B_MainLoop)
   815  0D62  1F7A               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   816  0D63  2D62               	goto	l4758
   817                           
   818                           ;main.c: 1111: {
   819                           ;main.c: 1112: B_MainLoop = 0;
   820  0D64  137A               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   821  0D65  0064               	clrwdt	;# 
   822                           
   823                           ;main.c: 1115: CheckTouchKey();
   824  0D66  118A  207D  158A   	fcall	_CheckTouchKey
   825                           
   826                           ;main.c: 1117: Refurbish_Sfr();
   827  0D69  118A  2611  158A   	fcall	_Refurbish_Sfr
   828                           
   829                           ;main.c: 1118: if(chrgFlag == 0)
   830  0D6C  085B               	movf	_chrgFlag,w
   831  0D6D  1D03               	btfss	3,2
   832  0D6E  2D72               	goto	l4770
   833                           
   834                           ;main.c: 1119: KeyServer();
   835  0D6F  158A  2582  158A   	fcall	_KeyServer
   836  0D72                     l4770:	
   837                           
   838                           ;main.c: 1120: showCtr();
   839  0D72  118A  2225  158A   	fcall	_showCtr
   840                           
   841                           ;main.c: 1121: workCtr();
   842  0D75  158A  26AB  158A   	fcall	_workCtr
   843                           
   844                           ;main.c: 1122: checkBat();
   845  0D78  158A  2767  158A   	fcall	_checkBat
   846                           
   847                           ;main.c: 1123: chrgCtr();
   848  0D7B  158A  2674  158A   	fcall	_chrgCtr
   849                           
   850                           ;main.c: 1124: task1();
   851  0D7E  118A  201E  158A   	fcall	_task1
   852  0D81  2D62               	goto	l4758
   853  0D82                     __end_of_main:	
   854                           
   855                           	psect	text4
   856  001E                     __ptext4:	
   857 ;; *************** function _task1 *****************
   858 ;; Defined at:
   859 ;;		line 1030 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2, status,0, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 300/0
   870 ;;		On exit  : 300/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0
   876 ;;      Totals:         0       0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    4
   880 ;; This function calls:
   881 ;;		_refreshTM1650
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _task1
   889  001E                     _task1:	
   890                           
   891                           ;main.c: 1032: if(firstTime > 0)
   892                           
   893                           ;incstack = 0
   894                           ; Regs used in _task1: [wreg+status,2+status,0+pclath+cstack]
   895  001E  083C               	movf	_firstTime,w
   896  001F  043D               	iorwf	_firstTime+1,w
   897  0020  1903               	btfsc	3,2
   898  0021  282D               	goto	l4494
   899                           
   900                           ;main.c: 1033: {
   901                           ;main.c: 1034: firstTime--;
   902  0022  3001               	movlw	1
   903  0023  02BC               	subwf	_firstTime,f
   904  0024  1C03               	skipc
   905  0025  03BD               	decf	_firstTime+1,f
   906                           
   907                           ;main.c: 1035: if(preBatValue < batValue)
   908  0026  085A               	movf	_batValue,w
   909  0027  0259               	subwf	_preBatValue,w
   910  0028  1803               	skipnc
   911  0029  282F               	goto	l4496
   912                           
   913                           ;main.c: 1036: {
   914                           ;main.c: 1037: preBatValue = batValue;
   915  002A  085A               	movf	_batValue,w
   916  002B  00D9               	movwf	_preBatValue
   917  002C  282F               	goto	l4496
   918  002D                     l4494:	
   919                           
   920                           ;main.c: 1040: else
   921                           ;main.c: 1041: {
   922                           ;main.c: 1042: refreshTM1650();
   923  002D  233E  118A         	fcall	_refreshTM1650
   924  002F                     l4496:	
   925                           
   926                           ;main.c: 1043: }
   927                           ;main.c: 1044: if(++count1s >= 250)
   928  002F  30FA               	movlw	250
   929  0030  0ADC               	incf	_count1s,f
   930  0031  025C               	subwf	_count1s,w
   931  0032  1C03               	skipc
   932  0033  0008               	return
   933                           
   934                           ;main.c: 1045: {
   935                           ;main.c: 1046: count1s = 0;
   936  0034  01DC               	clrf	_count1s
   937                           
   938                           ;main.c: 1047: if(workStep > 0)
   939  0035  0863               	movf	_workStep,w
   940  0036  1903               	btfsc	3,2
   941  0037  284B               	goto	l4506
   942                           
   943                           ;main.c: 1048: {
   944                           ;main.c: 1049: if(++count900s > 675)
   945  0038  1683               	bsf	3,5	;RP0=1, select bank1
   946  0039  0ABF               	incf	_count900s^(0+128),f
   947  003A  1903               	skipnz
   948  003B  0AC0               	incf	(_count900s+1)^(0+128),f
   949  003C  3002               	movlw	2
   950  003D  0240               	subwf	(_count900s+1)^(0+128),w
   951  003E  30A4               	movlw	164
   952  003F  1903               	skipnz
   953  0040  023F               	subwf	_count900s^(0+128),w
   954  0041  1C03               	skipc
   955  0042  284E               	goto	l4508
   956                           
   957                           ;main.c: 1050: {
   958                           ;main.c: 1051: count900s = 0;
   959  0043  01BF               	clrf	_count900s^(0+128)
   960  0044  01C0               	clrf	(_count900s+1)^(0+128)
   961                           
   962                           ;main.c: 1052: workStep = 0;
   963  0045  1283               	bcf	3,5	;RP0=0, select bank0
   964  0046  01E3               	clrf	_workStep
   965                           
   966                           ;main.c: 1053: zeroStep = 0;
   967  0047  01FB               	clrf	_zeroStep
   968                           
   969                           ;main.c: 1054: ledLightTime = 0;
   970  0048  01B4               	clrf	_ledLightTime
   971  0049  01B5               	clrf	_ledLightTime+1
   972  004A  284E               	goto	l4508
   973  004B                     l4506:	
   974                           
   975                           ;main.c: 1057: else
   976                           ;main.c: 1058: {
   977                           ;main.c: 1059: count900s = 0;
   978  004B  1683               	bsf	3,5	;RP0=1, select bank1
   979  004C  01BF               	clrf	_count900s^(0+128)
   980  004D  01C0               	clrf	(_count900s+1)^(0+128)
   981  004E                     l4508:	
   982                           
   983                           ;main.c: 1060: }
   984                           ;main.c: 1061: if(ledLightTime > 0)
   985  004E  1283               	bcf	3,5	;RP0=0, select bank0
   986  004F  0834               	movf	_ledLightTime,w
   987  0050  0435               	iorwf	_ledLightTime+1,w
   988  0051  1903               	btfsc	3,2
   989  0052  2859               	goto	l4512
   990                           
   991                           ;main.c: 1062: {
   992                           ;main.c: 1063: ledLightTime--;
   993  0053  3001               	movlw	1
   994  0054  02B4               	subwf	_ledLightTime,f
   995  0055  3000               	movlw	0
   996  0056  1C03               	skipc
   997  0057  03B5               	decf	_ledLightTime+1,f
   998  0058  02B5               	subwf	_ledLightTime+1,f
   999  0059                     l4512:	
  1000                           
  1001                           ;main.c: 1064: }
  1002                           ;main.c: 1065: if(chrgFlag)
  1003  0059  085B               	movf	_chrgFlag,w
  1004  005A  1903               	btfsc	3,2
  1005  005B  286E               	goto	l4526
  1006                           
  1007                           ;main.c: 1066: {
  1008                           ;main.c: 1067: if(preBatValue < 99 && preBatValue < batValue)
  1009  005C  3063               	movlw	99
  1010  005D  0259               	subwf	_preBatValue,w
  1011  005E  1803               	skipnc
  1012  005F  286C               	goto	l4524
  1013  0060  085A               	movf	_batValue,w
  1014  0061  0259               	subwf	_preBatValue,w
  1015  0062  1803               	skipnc
  1016  0063  286C               	goto	l4524
  1017                           
  1018                           ;main.c: 1068: {
  1019                           ;main.c: 1069: if(++count15s >= 15)
  1020  0064  300F               	movlw	15
  1021  0065  0AD3               	incf	_count15s,f
  1022  0066  0253               	subwf	_count15s,w
  1023  0067  1C03               	skipc
  1024  0068  0008               	return
  1025                           
  1026                           ;main.c: 1070: {
  1027                           ;main.c: 1071: count15s = 0;
  1028  0069  01D3               	clrf	_count15s
  1029                           
  1030                           ;main.c: 1072: preBatValue++;
  1031  006A  0AD9               	incf	_preBatValue,f
  1032  006B  0008               	return
  1033  006C                     l4524:	
  1034                           
  1035                           ;main.c: 1075: else
  1036                           ;main.c: 1076: {
  1037                           ;main.c: 1077: count15s = 0;
  1038  006C  01D3               	clrf	_count15s
  1039  006D  0008               	return
  1040  006E                     l4526:	
  1041                           
  1042                           ;main.c: 1080: else
  1043                           ;main.c: 1081: {
  1044                           ;main.c: 1082: if(preBatValue > 0 && preBatValue > batValue)
  1045  006E  0859               	movf	_preBatValue,w
  1046  006F  1903               	btfsc	3,2
  1047  0070  286C               	goto	l4524
  1048  0071  0859               	movf	_preBatValue,w
  1049  0072  025A               	subwf	_batValue,w
  1050  0073  1803               	skipnc
  1051  0074  286C               	goto	l4524
  1052                           
  1053                           ;main.c: 1083: {
  1054                           ;main.c: 1084: if(++count15s >= 15)
  1055  0075  300F               	movlw	15
  1056  0076  0AD3               	incf	_count15s,f
  1057  0077  0253               	subwf	_count15s,w
  1058  0078  1C03               	skipc
  1059  0079  0008               	return
  1060                           
  1061                           ;main.c: 1085: {
  1062                           ;main.c: 1086: count15s = 0;
  1063  007A  01D3               	clrf	_count15s
  1064                           
  1065                           ;main.c: 1087: preBatValue--;
  1066  007B  03D9               	decf	_preBatValue,f
  1067  007C  0008               	return
  1068  007D                     __end_of_task1:	
  1069  007D                     __ptext26:	
  1070 ;; *************** function _CheckTouchKey *****************
  1071 ;; Defined at:
  1072 ;;		line 529 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 300/100
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1086 ;;      Params:         0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0
  1089 ;;      Totals:         0       0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; Hardware stack levels required when called:    5
  1093 ;; This function calls:
  1094 ;;		_CheckKeyOldValue
  1095 ;;		_CheckOnceResult
  1096 ;;		_CheckValidTime
  1097 ;;		_ClearResSum
  1098 ;;		_GetTouchKeyValue
  1099 ;;		_KeyStopClear
  1100 ;;		_TurnKeyFlags
  1101 ;; This function is called by:
  1102 ;;		_main
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           
  1107                           ;psect for function _CheckTouchKey
  1108  007D                     _CheckTouchKey:	
  1109                           
  1110                           ;CheckTouchKey.c: 531: if(!b_kover)
  1111                           
  1112                           ;incstack = 0
  1113                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1114  007D  1A7A               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1115  007E  288B               	goto	l1679
  1116                           
  1117                           ;CheckTouchKey.c: 532: {
  1118                           ;CheckTouchKey.c: 534: GetTouchKeyValue();
  1119  007F  2585  118A         	fcall	_GetTouchKeyValue
  1120                           
  1121                           ;CheckTouchKey.c: 535: if(++KeyCounter >= 8)
  1122  0081  3008               	movlw	8
  1123  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1124  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1125  0084  0AC4               	incf	_KeyCounter,f
  1126  0085  0244               	subwf	_KeyCounter,w
  1127  0086  1C03               	skipc
  1128  0087  28A9               	goto	l4572
  1129                           
  1130                           ;CheckTouchKey.c: 536: {
  1131                           ;CheckTouchKey.c: 537: KeyCounter = 0;
  1132  0088  01C4               	clrf	_KeyCounter
  1133                           
  1134                           ;CheckTouchKey.c: 538: b_kover = 1;
  1135  0089  167A               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1136  008A  28A9               	goto	l4572
  1137  008B                     l1679:	
  1138                           
  1139                           ;CheckTouchKey.c: 541: else if(!b_kover1)
  1140  008B  19FA               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1141  008C  28A3               	goto	l4566
  1142                           
  1143                           ;CheckTouchKey.c: 542: {
  1144                           ;CheckTouchKey.c: 544: CheckOnceResult();
  1145  008D  210E  118A         	fcall	_CheckOnceResult
  1146                           
  1147                           ;CheckTouchKey.c: 547: TurnKeyFlags();
  1148  008F  25E4  118A         	fcall	_TurnKeyFlags
  1149                           
  1150                           ;CheckTouchKey.c: 548: b_kover1 = 1;
  1151  0091  15FA               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1152                           
  1153                           ;CheckTouchKey.c: 554: if(b_kerr || KeyCounter > KeyValidNumber)
  1154  0092  18FA               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1155  0093  289A               	goto	l4556
  1156  0094  3004               	movlw	4
  1157  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1158  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1159  0097  0244               	subwf	_KeyCounter,w
  1160  0098  1C03               	skipc
  1161  0099  289F               	goto	l4564
  1162  009A                     l4556:	
  1163                           
  1164                           ;CheckTouchKey.c: 555: {
  1165                           ;CheckTouchKey.c: 556: KeyStopClear();
  1166  009A  220F  118A         	fcall	_KeyStopClear
  1167                           
  1168                           ;CheckTouchKey.c: 557: b_kerr = 0;
  1169  009C  10FA               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  1170                           
  1171                           ;CheckTouchKey.c: 558: b_kover = 0;
  1172  009D  127A               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1173                           
  1174                           ;CheckTouchKey.c: 559: b_kover1 = 0;
  1175  009E  11FA               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1176  009F                     l4564:	
  1177                           
  1178                           ;CheckTouchKey.c: 560: }
  1179                           ;CheckTouchKey.c: 561: KeyCounter = 0;
  1180  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1181  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1182  00A1  01C4               	clrf	_KeyCounter
  1183                           
  1184                           ;CheckTouchKey.c: 562: }
  1185  00A2  28A9               	goto	l4572
  1186  00A3                     l4566:	
  1187                           
  1188                           ;CheckTouchKey.c: 563: else
  1189                           ;CheckTouchKey.c: 564: {
  1190                           ;CheckTouchKey.c: 566: CheckKeyOldValue();
  1191  00A3  20AA  118A         	fcall	_CheckKeyOldValue
  1192                           
  1193                           ;CheckTouchKey.c: 568: ClearResSum();
  1194  00A5  2561  118A         	fcall	_ClearResSum
  1195                           
  1196                           ;CheckTouchKey.c: 570: b_kover = 0;
  1197  00A7  127A               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  1198                           
  1199                           ;CheckTouchKey.c: 571: b_kover1 = 0;
  1200  00A8  11FA               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  1201  00A9                     l4572:	
  1202                           
  1203                           ;CheckTouchKey.c: 572: }
  1204                           ;CheckTouchKey.c: 574: CheckValidTime();
  1205  00A9  2E1F               	ljmp	l4020
  1206  00AA                     __end_of_CheckTouchKey:	
  1207  00AA                     __ptext36:	
  1208 ;; *************** function _CheckKeyOldValue *****************
  1209 ;; Defined at:
  1210 ;;		line 369 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  KeyOldTemp      2    2[BANK0 ] unsigned int 
  1215 ;;  KeyResTemp      2    0[BANK0 ] unsigned int 
  1216 ;;  cnt             1    4[BANK0 ] unsigned char 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 300/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1226 ;;      Params:         0       0       0       0       0
  1227 ;;      Locals:         0       5       0       0       0
  1228 ;;      Temps:          2       0       0       0       0
  1229 ;;      Totals:         2       5       0       0       0
  1230 ;;Total ram usage:        7 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    3
  1233 ;; This function calls:
  1234 ;;		_KeyIsIn
  1235 ;; This function is called by:
  1236 ;;		_CheckTouchKey
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function _CheckKeyOldValue
  1242  00AA                     _CheckKeyOldValue:	
  1243                           
  1244                           ;CheckTouchKey.c: 371: static unsigned char counter = 0;
  1245                           ;CheckTouchKey.c: 372: unsigned char cnt = 0;
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1249  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1250  00AB  3004               	movlw	4
  1251  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  1252  00AD  01EA               	clrf	CheckKeyOldValue@cnt
  1253                           
  1254                           ;CheckTouchKey.c: 373: unsigned int KeyResTemp;
  1255                           ;CheckTouchKey.c: 374: unsigned int KeyOldTemp;
  1256                           ;CheckTouchKey.c: 376: if(++counter < 4)
  1257  00AE  0AC2               	incf	CheckKeyOldValue@counter,f
  1258  00AF  0242               	subwf	CheckKeyOldValue@counter,w
  1259  00B0  1C03               	btfss	3,0
  1260  00B1  0008               	return
  1261                           
  1262                           ;CheckTouchKey.c: 378: counter = 0;
  1263  00B2  01C2               	clrf	CheckKeyOldValue@counter
  1264  00B3                     l3954:	
  1265                           
  1266                           ;CheckTouchKey.c: 381: {
  1267                           ;CheckTouchKey.c: 382: KeyResTemp = KeyResSum[cnt];
  1268  00B3  1003               	clrc
  1269  00B4  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1270  00B5  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1271  00B6  0084               	movwf	4
  1272  00B7  1383               	bcf	3,7	;select IRP bank1
  1273  00B8  0800               	movf	0,w
  1274  00B9  00E6               	movwf	CheckKeyOldValue@KeyResTemp
  1275  00BA  0A84               	incf	4,f
  1276  00BB  0800               	movf	0,w
  1277  00BC  00E7               	movwf	CheckKeyOldValue@KeyResTemp+1
  1278                           
  1279                           ;CheckTouchKey.c: 383: if(!KeyIsIn(cnt))
  1280  00BD  086A               	movf	CheckKeyOldValue@cnt,w
  1281  00BE  21EF  118A         	fcall	_KeyIsIn
  1282  00C0  3A00               	xorlw	0
  1283                           
  1284                           ;CheckTouchKey.c: 384: {
  1285                           ;CheckTouchKey.c: 386: KeyOldTemp = KeyOldValue0[cnt] - KeyResTemp;
  1286  00C1  1003               	clrc
  1287  00C2  1D03               	skipz
  1288  00C3  28F8               	goto	L27
  1289  00C4  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1290  00C5  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  1291  00C6  0084               	movwf	4
  1292  00C7  1383               	bcf	3,7	;select IRP bank1
  1293                           
  1294                           ;CheckTouchKey.c: 387: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1295  00C8  2780  118A         	fcall	PL2	;call to abstracted procedure
  1296  00CA  1903               	skipnz
  1297  00CB  0268               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1298  00CC  1C03               	skipc
  1299  00CD  28D4               	goto	L24
  1300  00CE  0F68               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1301  00CF  28F7               	goto	l1642
  1302  00D0  0A69               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1303                           
  1304                           ;CheckTouchKey.c: 388: {
  1305                           ;CheckTouchKey.c: 389: KeyOldTemp = KeyOldValue1[cnt] - KeyResTemp;
  1306  00D1  1003               	clrc
  1307  00D2  1D03               	btfss	3,2
  1308  00D3  28F8               	goto	L27
  1309  00D4                     L24:	
  1310  00D4  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1311  00D5  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1312  00D6  0084               	movwf	4
  1313                           
  1314                           ;CheckTouchKey.c: 390: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1315  00D7  2780  118A         	fcall	PL2	;call to abstracted procedure
  1316  00D9  1903               	skipnz
  1317  00DA  0268               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1318  00DB  1C03               	skipc
  1319  00DC  28E3               	goto	L25
  1320  00DD  0F68               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1321  00DE  28F7               	goto	l1642
  1322  00DF  0A69               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1323                           
  1324                           ;CheckTouchKey.c: 391: {
  1325                           ;CheckTouchKey.c: 392: KeyOldTemp = KeyOldValue2[cnt] - KeyResTemp;
  1326  00E0  1003               	clrc
  1327  00E1  1D03               	btfss	3,2
  1328  00E2  28F8               	goto	L27
  1329  00E3                     L25:	
  1330  00E3  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1331  00E4  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1332  00E5  0084               	movwf	4
  1333                           
  1334                           ;CheckTouchKey.c: 393: if(KeyOldTemp <= 1 || KeyOldTemp >= -1)
  1335  00E6  2780  118A         	fcall	PL2	;call to abstracted procedure
  1336  00E8  1903               	skipnz
  1337  00E9  0268               	subwf	CheckKeyOldValue@KeyOldTemp,w
  1338  00EA  1C03               	skipc
  1339  00EB  28F2               	goto	L26
  1340  00EC  0F68               	incfsz	CheckKeyOldValue@KeyOldTemp,w
  1341  00ED  28F7               	goto	l1642
  1342  00EE  0A69               	incf	CheckKeyOldValue@KeyOldTemp+1,w
  1343                           
  1344                           ;CheckTouchKey.c: 394: {
  1345                           ;CheckTouchKey.c: 395: KeyReference[cnt] = KeyResTemp;
  1346  00EF  1003               	clrc
  1347  00F0  1D03               	btfss	3,2
  1348  00F1  28F8               	goto	L27
  1349  00F2                     L26:	
  1350  00F2  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1351  00F3  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1352  00F4  0084               	movwf	4
  1353  00F5  27D9  118A         	fcall	PL20	;call to abstracted procedure
  1354  00F7                     l1642:	
  1355                           
  1356                           ;CheckTouchKey.c: 396: }
  1357                           ;CheckTouchKey.c: 397: }
  1358                           ;CheckTouchKey.c: 398: }
  1359                           ;CheckTouchKey.c: 399: }
  1360                           ;CheckTouchKey.c: 402: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  1361  00F7  1003               	clrc
  1362  00F8                     L27:	
  1363  00F8  0D6A               	rlf	CheckKeyOldValue@cnt,w
  1364  00F9  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1365  00FA  0084               	movwf	4
  1366  00FB  1383               	bcf	3,7	;select IRP bank0
  1367  00FC  27C4  118A         	fcall	PL14	;call to abstracted procedure
  1368  00FE  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1369                           
  1370                           ;CheckTouchKey.c: 403: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  1371  00FF  27A7  118A         	fcall	PL8	;call to abstracted procedure
  1372  0101  27C4  118A         	fcall	PL14	;call to abstracted procedure
  1373  0103  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1374                           
  1375                           ;CheckTouchKey.c: 404: KeyOldValue0[cnt] = KeyResTemp;
  1376  0104  27A7  118A         	fcall	PL8	;call to abstracted procedure
  1377  0106  27D9  118A         	fcall	PL20	;call to abstracted procedure
  1378  0108  3003               	movlw	3
  1379  0109  0AEA               	incf	CheckKeyOldValue@cnt,f
  1380  010A  026A               	subwf	CheckKeyOldValue@cnt,w
  1381  010B  1803               	btfsc	3,0
  1382  010C  0008               	return
  1383  010D  28B3               	goto	l3954
  1384  010E                     __end_of_CheckKeyOldValue:	
  1385  010E                     __ptext33:	
  1386 ;; *************** function _CheckOnceResult *****************
  1387 ;; Defined at:
  1388 ;;		line 255 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  KeyResTemp      2    6[BANK0 ] unsigned int 
  1393 ;;  KeyValue        2    2[BANK0 ] unsigned int 
  1394 ;;  OldValue        2    0[BANK0 ] unsigned int 
  1395 ;;  cnt             1    8[BANK0 ] unsigned char 
  1396 ;;  KeyDown         1    5[BANK0 ] unsigned char 
  1397 ;;  flag            1    4[BANK0 ] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : B00/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1407 ;;      Params:         0       0       0       0       0
  1408 ;;      Locals:         0       9       0       0       0
  1409 ;;      Temps:          4       0       0       0       0
  1410 ;;      Totals:         4       9       0       0       0
  1411 ;;Total ram usage:       13 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    3
  1414 ;; This function calls:
  1415 ;;		_KeyClearOne
  1416 ;;		_KeyHave
  1417 ;;		_KeyIsIn
  1418 ;; This function is called by:
  1419 ;;		_CheckTouchKey
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           
  1424                           ;psect for function _CheckOnceResult
  1425  010E                     _CheckOnceResult:	
  1426                           
  1427                           ;CheckTouchKey.c: 257: unsigned char cnt = 0;
  1428                           
  1429                           ;incstack = 0
  1430                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1431  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1432  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0110  01EE               	clrf	CheckOnceResult@cnt
  1434                           
  1435                           ;CheckTouchKey.c: 258: unsigned char KeyDown;
  1436                           ;CheckTouchKey.c: 259: unsigned char flag;
  1437                           ;CheckTouchKey.c: 261: unsigned int KeyResTemp;
  1438                           ;CheckTouchKey.c: 262: unsigned int KeyValue;
  1439                           ;CheckTouchKey.c: 263: unsigned int OldValue;
  1440                           ;CheckTouchKey.c: 265: KeyData[0] = 0;
  1441  0111  01A6               	clrf	_KeyData	;volatile
  1442                           
  1443                           ;CheckTouchKey.c: 266: KeyData[1] = 0;
  1444  0112  01A7               	clrf	_KeyData+1	;volatile
  1445                           
  1446                           ;CheckTouchKey.c: 267: KeyMaxSub = 0;
  1447  0113  01C3               	clrf	_KeyMaxSub
  1448  0114                     l3880:	
  1449                           
  1450                           ;CheckTouchKey.c: 271: {
  1451                           ;CheckTouchKey.c: 272: flag = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1452  0114  086E               	movf	CheckOnceResult@cnt,w
  1453  0115  3907               	andlw	7
  1454  0116  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1455  0117  0084               	movwf	4
  1456  0118  158A  2000  118A   	fcall	stringdir
  1457  011B  00EA               	movwf	CheckOnceResult@flag
  1458                           
  1459                           ;CheckTouchKey.c: 274: KeyResSum[cnt] >>= 3;
  1460  011C  1003               	clrc
  1461  011D  0D6E               	rlf	CheckOnceResult@cnt,w
  1462  011E  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1463  011F  0084               	movwf	4
  1464  0120  3003               	movlw	3
  1465  0121                     u2755:	
  1466  0121  0A84               	incf	4,f
  1467  0122  1003               	clrc
  1468  0123  1383               	bcf	3,7	;select IRP bank1
  1469  0124  0C80               	rrf	0,f
  1470  0125  0384               	decf	4,f
  1471  0126  0C80               	rrf	0,f
  1472  0127  3EFF               	addlw	-1
  1473  0128  1D03               	skipz
  1474  0129  2921               	goto	u2755
  1475                           
  1476                           ;CheckTouchKey.c: 275: KeyResTemp = KeyResSum[cnt];
  1477  012A  1003               	clrc
  1478  012B  0D6E               	rlf	CheckOnceResult@cnt,w
  1479  012C  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1480  012D  0084               	movwf	4
  1481  012E  0800               	movf	0,w
  1482  012F  00EC               	movwf	CheckOnceResult@KeyResTemp
  1483  0130  0A84               	incf	4,f
  1484  0131  0800               	movf	0,w
  1485  0132  00ED               	movwf	CheckOnceResult@KeyResTemp+1
  1486                           
  1487                           ;CheckTouchKey.c: 276: KeyDown = Table_KeyDown[cnt];
  1488  0133  086E               	movf	CheckOnceResult@cnt,w
  1489  0134  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  1490  0135  0084               	movwf	4
  1491  0136  158A  2000  118A   	fcall	stringdir
  1492  0139  00EB               	movwf	CheckOnceResult@KeyDown
  1493                           
  1494                           ;CheckTouchKey.c: 278: KeyValue = KeyResTemp + KeyDown;
  1495  013A  00E8               	movwf	CheckOnceResult@KeyValue
  1496  013B  01E9               	clrf	CheckOnceResult@KeyValue+1
  1497  013C  086C               	movf	CheckOnceResult@KeyResTemp,w
  1498  013D  07E8               	addwf	CheckOnceResult@KeyValue,f
  1499  013E  1803               	skipnc
  1500  013F  0AE9               	incf	CheckOnceResult@KeyValue+1,f
  1501  0140  086D               	movf	CheckOnceResult@KeyResTemp+1,w
  1502  0141  07E9               	addwf	CheckOnceResult@KeyValue+1,f
  1503                           
  1504                           ;CheckTouchKey.c: 280: if(!KeyIsIn(cnt))
  1505  0142  086E               	movf	CheckOnceResult@cnt,w
  1506  0143  21EF  118A         	fcall	_KeyIsIn
  1507  0145  3A00               	xorlw	0
  1508                           
  1509                           ;CheckTouchKey.c: 281: {
  1510                           ;CheckTouchKey.c: 283: OldValue = KeyOldValue2[cnt];
  1511  0146  1003               	clrc
  1512  0147  1D03               	skipz
  1513  0148  29A3               	goto	L23
  1514  0149  0D6E               	rlf	CheckOnceResult@cnt,w
  1515  014A  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1516  014B  0084               	movwf	4
  1517  014C  1383               	bcf	3,7	;select IRP bank1
  1518  014D  0800               	movf	0,w
  1519  014E  00E6               	movwf	CheckOnceResult@OldValue
  1520  014F  0A84               	incf	4,f
  1521  0150  0800               	movf	0,w
  1522  0151  00E7               	movwf	CheckOnceResult@OldValue+1
  1523                           
  1524                           ;CheckTouchKey.c: 285: if(KeyReference[cnt] > KeyValue)
  1525  0152  1003               	clrc
  1526  0153  0D6E               	rlf	CheckOnceResult@cnt,w
  1527  0154  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1528  0155  27A0  118A         	fcall	PL6	;call to abstracted procedure
  1529  0157  0269               	subwf	CheckOnceResult@KeyValue+1,w
  1530  0158  1D03               	skipz
  1531  0159  295C               	goto	u2775
  1532  015A  0875               	movf	??_CheckOnceResult,w
  1533  015B  0268               	subwf	CheckOnceResult@KeyValue,w
  1534  015C                     u2775:	
  1535  015C  1803               	skipnc
  1536  015D  296B               	goto	l3898
  1537                           
  1538                           ;CheckTouchKey.c: 286: {
  1539                           ;CheckTouchKey.c: 287: KeyResTemp = KeyReference[cnt] - KeyResTemp;
  1540  015E  1003               	clrc
  1541  015F  0D6E               	rlf	CheckOnceResult@cnt,w
  1542  0160  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1543  0161  27A0  118A         	fcall	PL6	;call to abstracted procedure
  1544  0163  086C               	movf	CheckOnceResult@KeyResTemp,w
  1545  0164  0275               	subwf	??_CheckOnceResult,w
  1546  0165  00EC               	movwf	CheckOnceResult@KeyResTemp
  1547  0166  086D               	movf	CheckOnceResult@KeyResTemp+1,w
  1548  0167  1C03               	skipc
  1549  0168  0A6D               	incf	CheckOnceResult@KeyResTemp+1,w
  1550  0169  0276               	subwf	??_CheckOnceResult+1,w
  1551  016A  298F               	goto	L21
  1552  016B                     l3898:	
  1553                           ;CheckTouchKey.c: 288: }
  1554                           
  1555                           
  1556                           ;CheckTouchKey.c: 289: else if ((OldValue > KeyValue) && (KeyOldValue1[cnt] > KeyValue))
  1557  016B  0867               	movf	CheckOnceResult@OldValue+1,w
  1558  016C  0269               	subwf	CheckOnceResult@KeyValue+1,w
  1559  016D  1D03               	skipz
  1560  016E  2971               	goto	u2785
  1561  016F  0866               	movf	CheckOnceResult@OldValue,w
  1562  0170  0268               	subwf	CheckOnceResult@KeyValue,w
  1563  0171                     u2785:	
  1564  0171  1803               	skipnc
  1565  0172  29E7               	goto	l3944
  1566  0173  1003               	clrc
  1567  0174  0D6E               	rlf	CheckOnceResult@cnt,w
  1568  0175  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1569  0176  27A0  118A         	fcall	PL6	;call to abstracted procedure
  1570  0178  0269               	subwf	CheckOnceResult@KeyValue+1,w
  1571  0179  1D03               	skipz
  1572  017A  297D               	goto	u2795
  1573  017B  0875               	movf	??_CheckOnceResult,w
  1574  017C  0268               	subwf	CheckOnceResult@KeyValue,w
  1575  017D                     u2795:	
  1576  017D  1803               	skipnc
  1577  017E  29E7               	goto	l3944
  1578                           
  1579                           ;CheckTouchKey.c: 290: {
  1580                           ;CheckTouchKey.c: 291: KeyReference[cnt] = OldValue;
  1581  017F  1003               	clrc
  1582  0180  0D6E               	rlf	CheckOnceResult@cnt,w
  1583  0181  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1584  0182  0084               	movwf	4
  1585  0183  0866               	movf	CheckOnceResult@OldValue,w
  1586  0184  0080               	movwf	0
  1587  0185  0A84               	incf	4,f
  1588  0186  0867               	movf	CheckOnceResult@OldValue+1,w
  1589  0187  0080               	movwf	0
  1590                           
  1591                           ;CheckTouchKey.c: 292: KeyResTemp = OldValue - KeyResTemp;
  1592  0188  086C               	movf	CheckOnceResult@KeyResTemp,w
  1593  0189  0266               	subwf	CheckOnceResult@OldValue,w
  1594  018A  00EC               	movwf	CheckOnceResult@KeyResTemp
  1595  018B  086D               	movf	CheckOnceResult@KeyResTemp+1,w
  1596  018C  1C03               	skipc
  1597  018D  0A6D               	incf	CheckOnceResult@KeyResTemp+1,w
  1598  018E  0267               	subwf	CheckOnceResult@OldValue+1,w
  1599  018F                     L21:	
  1600  018F  00ED               	movwf	CheckOnceResult@KeyResTemp+1
  1601                           
  1602                           ;CheckTouchKey.c: 297: }
  1603                           ;CheckTouchKey.c: 299: KeyUpShake[cnt] = 0;
  1604                           
  1605                           ;CheckTouchKey.c: 293: }
  1606  0190  086E               	movf	CheckOnceResult@cnt,w
  1607  0191  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1608  0192  0084               	movwf	4
  1609  0193  0180               	clrf	0
  1610                           
  1611                           ;CheckTouchKey.c: 302: {
  1612                           ;CheckTouchKey.c: 303: if(KeyResTemp >> 8)
  1613  0194  086D               	movf	CheckOnceResult@KeyResTemp+1,w
  1614  0195  1903               	btfsc	3,2
  1615  0196  2999               	goto	l3912
  1616                           
  1617                           ;CheckTouchKey.c: 304: {
  1618                           ;CheckTouchKey.c: 305: KeyDown = 0xFF;
  1619  0197  30FF               	movlw	255
  1620  0198  299A               	goto	L22
  1621  0199                     l3912:	
  1622                           ;CheckTouchKey.c: 306: }
  1623                           
  1624                           
  1625                           ;CheckTouchKey.c: 307: else
  1626                           ;CheckTouchKey.c: 308: {
  1627                           ;CheckTouchKey.c: 309: KeyDown = KeyResTemp & 0xFF;
  1628  0199  086C               	movf	CheckOnceResult@KeyResTemp,w
  1629  019A                     L22:	
  1630  019A  00EB               	movwf	CheckOnceResult@KeyDown
  1631                           
  1632                           ;CheckTouchKey.c: 310: }
  1633                           ;CheckTouchKey.c: 312: if(KeyMaxSub < KeyDown)
  1634  019B  0243               	subwf	_KeyMaxSub,w
  1635  019C  1803               	skipnc
  1636  019D  29A1               	goto	l3918
  1637                           
  1638                           ;CheckTouchKey.c: 313: {
  1639                           ;CheckTouchKey.c: 314: KeyMaxSub = KeyDown;
  1640  019E  086B               	movf	CheckOnceResult@KeyDown,w
  1641  019F  00C3               	movwf	_KeyMaxSub
  1642  01A0  29E1               	goto	l3942
  1643  01A1                     l3918:	
  1644                           ;CheckTouchKey.c: 316: }
  1645                           
  1646                           ;CheckTouchKey.c: 315: KeyHave(cnt,flag);
  1647                           
  1648                           
  1649                           ;CheckTouchKey.c: 317: else
  1650                           ;CheckTouchKey.c: 318: {
  1651                           ;CheckTouchKey.c: 319: KeyCounter++;
  1652  01A1  0AC4               	incf	_KeyCounter,f
  1653  01A2  29E7               	goto	l3944
  1654  01A3                     L23:	
  1655                           ;CheckTouchKey.c: 328: else
  1656                           ;CheckTouchKey.c: 329: {
  1657                           ;CheckTouchKey.c: 332: if(KeyReference[cnt]+1 < KeyValue)
  1658                           
  1659  01A3  0D6E               	rlf	CheckOnceResult@cnt,w
  1660  01A4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  1661  01A5  0084               	movwf	4
  1662  01A6  1383               	bcf	3,7	;select IRP bank1
  1663  01A7  0800               	movf	0,w
  1664  01A8  00F5               	movwf	??_CheckOnceResult
  1665  01A9  0A84               	incf	4,f
  1666  01AA  0800               	movf	0,w
  1667  01AB  00F6               	movwf	??_CheckOnceResult+1
  1668  01AC  0875               	movf	??_CheckOnceResult,w
  1669  01AD  3E01               	addlw	1
  1670  01AE  00F7               	movwf	??_CheckOnceResult+2
  1671  01AF  0876               	movf	??_CheckOnceResult+1,w
  1672  01B0  1803               	skipnc
  1673  01B1  3E01               	addlw	1
  1674  01B2  00F8               	movwf	??_CheckOnceResult+3
  1675  01B3  0869               	movf	CheckOnceResult@KeyValue+1,w
  1676  01B4  0278               	subwf	??_CheckOnceResult+3,w
  1677  01B5  1D03               	skipz
  1678  01B6  29B9               	goto	u2825
  1679  01B7  0868               	movf	CheckOnceResult@KeyValue,w
  1680  01B8  0277               	subwf	??_CheckOnceResult+2,w
  1681  01B9                     u2825:	
  1682  01B9  1C03               	btfss	3,0
  1683  01BA  29E7               	goto	l3944
  1684                           
  1685                           ;CheckTouchKey.c: 336: else if((KeyOldValue2[cnt]+KeyDown<KeyResTemp) || (KeyOldValue1[c
      +                          nt]+KeyDown<KeyResTemp))
  1686  01BB  1003               	clrc
  1687  01BC  0D6E               	rlf	CheckOnceResult@cnt,w
  1688  01BD  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  1689  01BE  0084               	movwf	4
  1690  01BF  0800               	movf	0,w
  1691  01C0  278E  118A         	fcall	PL4	;call to abstracted procedure
  1692  01C2  1C03               	skipc
  1693  01C3  29CD               	goto	l3932
  1694  01C4  1003               	clrc
  1695  01C5  0D6E               	rlf	CheckOnceResult@cnt,w
  1696  01C6  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  1697  01C7  0084               	movwf	4
  1698  01C8  0800               	movf	0,w
  1699  01C9  278E  118A         	fcall	PL4	;call to abstracted procedure
  1700  01CB  1803               	skipnc
  1701  01CC  29D9               	goto	l3936
  1702  01CD                     l3932:	
  1703                           
  1704                           ;CheckTouchKey.c: 337: {
  1705                           ;CheckTouchKey.c: 338: if(++KeyUpShake[cnt] > 8)
  1706  01CD  086E               	movf	CheckOnceResult@cnt,w
  1707  01CE  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1708  01CF  0084               	movwf	4
  1709  01D0  3009               	movlw	9
  1710  01D1  0A80               	incf	0,f
  1711  01D2  0200               	subwf	0,w
  1712  01D3  1C03               	skipc
  1713  01D4  29DD               	goto	l3940
  1714                           
  1715                           ;CheckTouchKey.c: 339: {
  1716                           ;CheckTouchKey.c: 340: KeyClearOne(cnt);
  1717  01D5  086E               	movf	CheckOnceResult@cnt,w
  1718  01D6  2570  118A         	fcall	_KeyClearOne
  1719                           
  1720                           ;CheckTouchKey.c: 341: continue;
  1721  01D8  29E7               	goto	l3944
  1722  01D9                     l3936:	
  1723                           
  1724                           ;CheckTouchKey.c: 344: else
  1725                           ;CheckTouchKey.c: 345: {
  1726                           ;CheckTouchKey.c: 346: KeyUpShake[cnt] = 0;
  1727  01D9  086E               	movf	CheckOnceResult@cnt,w
  1728  01DA  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  1729  01DB  0084               	movwf	4
  1730  01DC  0180               	clrf	0
  1731  01DD                     l3940:	
  1732                           
  1733                           ;CheckTouchKey.c: 353: else if(!(KeyData[0] | KeyData[1]))
  1734  01DD  0827               	movf	_KeyData+1,w	;volatile
  1735  01DE  0426               	iorwf	_KeyData,w	;volatile
  1736  01DF  1D03               	btfss	3,2
  1737  01E0  29E7               	goto	l3944
  1738  01E1                     l3942:	
  1739                           
  1740                           ;CheckTouchKey.c: 354: {
  1741                           ;CheckTouchKey.c: 355: KeyHave(cnt,flag);
  1742  01E1  086A               	movf	CheckOnceResult@flag,w
  1743  01E2  00F2               	movwf	KeyHave@flag
  1744  01E3  01F3               	clrf	KeyHave@flag+1
  1745  01E4  086E               	movf	CheckOnceResult@cnt,w
  1746  01E5  2203  118A         	fcall	_KeyHave
  1747  01E7                     l3944:	
  1748  01E7  3003               	movlw	3
  1749  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1750  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1751  01EA  0AEE               	incf	CheckOnceResult@cnt,f
  1752  01EB  026E               	subwf	CheckOnceResult@cnt,w
  1753  01EC  1803               	btfsc	3,0
  1754  01ED  0008               	return
  1755  01EE  2914               	goto	l3880
  1756  01EF                     __end_of_CheckOnceResult:	
  1757  01EF                     __ptext37:	
  1758 ;; *************** function _KeyIsIn *****************
  1759 ;; Defined at:
  1760 ;;		line 74 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;  cnt             1    wreg     unsigned char 
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;  cnt             1    3[COMMON] unsigned char 
  1765 ;;  i               1    2[COMMON] unsigned char 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      unsigned char 
  1768 ;; Registers used:
  1769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 300/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1775 ;;      Params:         0       0       0       0       0
  1776 ;;      Locals:         2       0       0       0       0
  1777 ;;      Temps:          0       0       0       0       0
  1778 ;;      Totals:         2       0       0       0       0
  1779 ;;Total ram usage:        2 bytes
  1780 ;; Hardware stack levels used:    2
  1781 ;; Hardware stack levels required when called:    1
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_KeyClearIn
  1786 ;;		_CheckOnceResult
  1787 ;;		_CheckKeyOldValue
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           
  1792                           ;psect for function _KeyIsIn
  1793  01EF                     _KeyIsIn:	
  1794                           
  1795                           ;incstack = 0
  1796                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  1797                           ;KeyIsIn@cnt stored from wreg
  1798  01EF  00F3               	movwf	KeyIsIn@cnt
  1799                           
  1800                           ;CheckTouchKey.c: 76: unsigned char i = Table_KeyFalg[((unsigned char)(cnt&0x7))];
  1801  01F0  3907               	andlw	7
  1802  01F1  3E0F               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  1803  01F2  0084               	movwf	4
  1804  01F3  158A  2000  118A   	fcall	stringdir
  1805  01F6  00F2               	movwf	KeyIsIn@i
  1806                           
  1807                           ;CheckTouchKey.c: 78: if(cnt&0x8)
  1808  01F7  1DF3               	btfss	KeyIsIn@cnt,3
  1809  01F8  29FD               	goto	l3386
  1810                           
  1811                           ;CheckTouchKey.c: 79: {
  1812                           ;CheckTouchKey.c: 80: i &= KeyFlag[1];
  1813  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1814  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1815  01FB  083F               	movf	_KeyFlag+1,w	;volatile
  1816  01FC  2A00               	goto	L28
  1817  01FD                     l3386:	
  1818                           ;CheckTouchKey.c: 81: }
  1819                           
  1820                           
  1821                           ;CheckTouchKey.c: 82: else
  1822                           ;CheckTouchKey.c: 83: {
  1823                           ;CheckTouchKey.c: 84: i &= KeyFlag[0];
  1824  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1825  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1826  01FF  083E               	movf	_KeyFlag,w	;volatile
  1827  0200                     L28:	
  1828  0200  05F2               	andwf	KeyIsIn@i,f
  1829                           
  1830                           ;CheckTouchKey.c: 85: }
  1831                           ;CheckTouchKey.c: 86: return i;
  1832  0201  0872               	movf	KeyIsIn@i,w
  1833  0202  0008               	return
  1834  0203                     __end_of_KeyIsIn:	
  1835  0203                     __ptext34:	
  1836 ;; *************** function _KeyHave *****************
  1837 ;; Defined at:
  1838 ;;		line 158 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  cnt             1    wreg     unsigned char 
  1841 ;;  flag            2    2[COMMON] unsigned int 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  cnt             1    4[COMMON] unsigned char 
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  1    wreg      void 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0
  1848 ;; Tracked objects:
  1849 ;;		On entry : B00/0
  1850 ;;		On exit  : B00/0
  1851 ;;		Unchanged: 800/0
  1852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1853 ;;      Params:         2       0       0       0       0
  1854 ;;      Locals:         1       0       0       0       0
  1855 ;;      Temps:          0       0       0       0       0
  1856 ;;      Totals:         3       0       0       0       0
  1857 ;;Total ram usage:        3 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    1
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_CheckOnceResult
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           
  1868                           ;psect for function _KeyHave
  1869  0203                     _KeyHave:	
  1870                           
  1871                           ;incstack = 0
  1872                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  1873                           ;KeyHave@cnt stored from wreg
  1874  0203  00F4               	movwf	KeyHave@cnt
  1875                           
  1876                           ;CheckTouchKey.c: 160: KeyCounter++;
  1877  0204  0AC4               	incf	_KeyCounter,f
  1878                           
  1879                           ;CheckTouchKey.c: 163: {
  1880                           ;CheckTouchKey.c: 164: KeyData[0] = 0;
  1881  0205  01A6               	clrf	_KeyData	;volatile
  1882                           
  1883                           ;CheckTouchKey.c: 165: KeyData[1] = 0;
  1884  0206  01A7               	clrf	_KeyData+1	;volatile
  1885                           
  1886                           ;CheckTouchKey.c: 166: if(cnt&0x8)
  1887  0207  1DF4               	btfss	KeyHave@cnt,3
  1888  0208  2A0C               	goto	l3618
  1889                           
  1890                           ;CheckTouchKey.c: 167: {
  1891                           ;CheckTouchKey.c: 168: KeyData[1] = flag;
  1892  0209  0872               	movf	KeyHave@flag,w
  1893  020A  00A7               	movwf	_KeyData+1	;volatile
  1894                           
  1895                           ;CheckTouchKey.c: 169: }
  1896  020B  0008               	return
  1897  020C                     l3618:	
  1898                           
  1899                           ;CheckTouchKey.c: 170: else
  1900                           ;CheckTouchKey.c: 171: {
  1901                           ;CheckTouchKey.c: 172: KeyData[0] = flag;
  1902  020C  0872               	movf	KeyHave@flag,w
  1903  020D  00A6               	movwf	_KeyData	;volatile
  1904  020E  0008               	return
  1905  020F                     __end_of_KeyHave:	
  1906  020F                     __ptext29:	
  1907 ;; *************** function _KeyStopClear *****************
  1908 ;; Defined at:
  1909 ;;		line 123 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  i               1    3[COMMON] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 800/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		_KeyClearOne
  1932 ;; This function is called by:
  1933 ;;		_CheckTouchKey
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _KeyStopClear
  1939  020F                     _KeyStopClear:	
  1940                           
  1941                           ;CheckTouchKey.c: 125: unsigned char i;
  1942                           ;CheckTouchKey.c: 126: KeyFlag[0] = 0;
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1946  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0211  01BE               	clrf	_KeyFlag	;volatile
  1949                           
  1950                           ;CheckTouchKey.c: 127: KeyFlag[1] = 0;
  1951  0212  01BF               	clrf	_KeyFlag+1	;volatile
  1952                           
  1953                           ;CheckTouchKey.c: 128: for(i = 0; i < KeyTotalNumber; i++)
  1954  0213  01F3               	clrf	KeyStopClear@i
  1955  0214                     l3870:	
  1956                           
  1957                           ;CheckTouchKey.c: 129: {
  1958                           ;CheckTouchKey.c: 130: KeyResSum[i] = 0;
  1959  0214  1003               	clrc
  1960  0215  0D73               	rlf	KeyStopClear@i,w
  1961  0216  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  1962  0217  0084               	movwf	4
  1963  0218  1383               	bcf	3,7	;select IRP bank1
  1964  0219  0180               	clrf	0
  1965  021A  0A84               	incf	4,f
  1966  021B  0180               	clrf	0
  1967                           
  1968                           ;CheckTouchKey.c: 131: KeyClearOne(i);
  1969  021C  0873               	movf	KeyStopClear@i,w
  1970  021D  2570  118A         	fcall	_KeyClearOne
  1971  021F  3003               	movlw	3
  1972  0220  0AF3               	incf	KeyStopClear@i,f
  1973  0221  0273               	subwf	KeyStopClear@i,w
  1974  0222  1803               	btfsc	3,0
  1975  0223  0008               	return
  1976  0224  2A14               	goto	l3870
  1977  0225                     __end_of_KeyStopClear:	
  1978  0225                     __ptext6:	
  1979 ;; *************** function _showCtr *****************
  1980 ;; Defined at:
  1981 ;;		line 829 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 300/0
  1992 ;;		On exit  : 200/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         0       0       0       0       0
  1996 ;;      Locals:         0       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0
  1998 ;;      Totals:         0       0       0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    5
  2002 ;; This function calls:
  2003 ;;		_WorkSleep
  2004 ;;		___lbdiv
  2005 ;;		___lbmod
  2006 ;;		___lwmod
  2007 ;;		_initTM1650
  2008 ;;		_setZeroStep
  2009 ;;		_setZeroStep2
  2010 ;;		_tm1650cmd
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           
  2017                           ;psect for function _showCtr
  2018  0225                     _showCtr:	
  2019                           
  2020                           ;main.c: 831: if(firstTime > 0)
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _showCtr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2024  0225  083C               	movf	_firstTime,w
  2025  0226  043D               	iorwf	_firstTime+1,w
  2026  0227  1903               	btfsc	3,2
  2027  0228  2A2E               	goto	l4292
  2028                           
  2029                           ;main.c: 832: {
  2030                           ;main.c: 833: showFlag = 1;
  2031  0229  01E2               	clrf	_showFlag
  2032  022A  0AE2               	incf	_showFlag,f
  2033                           
  2034                           ;main.c: 834: sleepTime = 0;
  2035  022B  01AA               	clrf	_sleepTime
  2036  022C  01AB               	clrf	_sleepTime+1
  2037                           
  2038                           ;main.c: 835: initTM1650();
  2039  022D  2E91               	ljmp	l3708
  2040  022E                     l4292:	
  2041                           ;main.c: 836: }
  2042                           
  2043                           
  2044                           ;main.c: 837: else if(workStep > 0)
  2045  022E  0863               	movf	_workStep,w
  2046  022F  1903               	btfsc	3,2
  2047  0230  2A4C               	goto	l4306
  2048  0231  30FF               	movlw	255
  2049                           
  2050                           ;main.c: 838: {
  2051                           ;main.c: 839: showFlag = 1;
  2052  0232  01E2               	clrf	_showFlag
  2053  0233  0AE2               	incf	_showFlag,f
  2054                           
  2055                           ;main.c: 840: sleepTime = 0;
  2056  0234  01AA               	clrf	_sleepTime
  2057  0235  01AB               	clrf	_sleepTime+1
  2058                           
  2059                           ;main.c: 841: showLed1 = 0xFF;
  2060  0236  00DF               	movwf	_showLed1
  2061                           
  2062                           ;main.c: 842: showLed2 = 0xFF;
  2063  0237  00DE               	movwf	_showLed2
  2064                           
  2065                           ;main.c: 843: showShiWei = numArray[workStep / 10];
  2066  0238  300A               	movlw	10
  2067  0239  00F2               	movwf	___lbdiv@divisor
  2068  023A  0863               	movf	_workStep,w
  2069  023B  22E3               	fcall	___lbdiv
  2070  023C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2071  023D  0084               	movwf	4
  2072  023E  158A  2000  118A   	fcall	stringdir
  2073  0241  00E1               	movwf	_showShiWei
  2074                           
  2075                           ;main.c: 844: showGeWei = numArray[workStep % 10];
  2076  0242  300A               	movlw	10
  2077  0243  00F2               	movwf	___lbmod@divisor
  2078  0244  0863               	movf	_workStep,w
  2079  0245  22FE               	fcall	___lbmod
  2080  0246  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2081  0247  0084               	movwf	4
  2082  0248  158A  2000         	fcall	stringdir
  2083  024A  00E0               	movwf	_showGeWei
  2084                           
  2085                           ;main.c: 845: }
  2086  024B  0008               	return
  2087  024C                     l4306:	
  2088                           
  2089                           ;main.c: 846: else if(ledLightTime > 0)
  2090  024C  0834               	movf	_ledLightTime,w
  2091  024D  0435               	iorwf	_ledLightTime+1,w
  2092  024E  1903               	btfsc	3,2
  2093  024F  2A86               	goto	l4338
  2094  0250  3055               	movlw	85
  2095                           
  2096                           ;main.c: 847: {
  2097                           ;main.c: 848: showFlag = 1;
  2098  0251  01E2               	clrf	_showFlag
  2099  0252  0AE2               	incf	_showFlag,f
  2100                           
  2101                           ;main.c: 849: sleepTime = 0;
  2102  0253  01AA               	clrf	_sleepTime
  2103  0254  01AB               	clrf	_sleepTime+1
  2104                           
  2105                           ;main.c: 850: if(preBatValue >= 85)
  2106  0255  0259               	subwf	_preBatValue,w
  2107  0256  1C03               	skipc
  2108  0257  2A60               	goto	l4316
  2109                           
  2110                           ;main.c: 851: {
  2111                           ;main.c: 852: showShiWei = numArray[9];
  2112  0258  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2113  0259  0084               	movwf	4
  2114  025A  158A  2000  118A   	fcall	stringdir
  2115  025D  00E1               	movwf	_showShiWei
  2116                           
  2117                           ;main.c: 853: showGeWei = numArray[9];
  2118  025E  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2119  025F  2A7E               	goto	L2
  2120  0260                     l4316:	
  2121                           ;main.c: 854: }
  2122                           
  2123                           
  2124                           ;main.c: 855: else if(preBatValue > 60)
  2125  0260  303D               	movlw	61
  2126  0261  0259               	subwf	_preBatValue,w
  2127  0262  1C03               	skipc
  2128  0263  2A66               	goto	l4320
  2129                           
  2130                           ;main.c: 856: {
  2131                           ;main.c: 857: showShiWei = numArray[8];
  2132  0264  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
  2133  0265  2A78               	goto	L3
  2134  0266                     l4320:	
  2135                           ;main.c: 859: }
  2136                           
  2137                           ;main.c: 858: showGeWei = numArray[0];
  2138                           
  2139                           
  2140                           ;main.c: 860: else if(preBatValue > 40)
  2141  0266  3029               	movlw	41
  2142  0267  0259               	subwf	_preBatValue,w
  2143  0268  1C03               	skipc
  2144  0269  2A6C               	goto	l4324
  2145                           
  2146                           ;main.c: 861: {
  2147                           ;main.c: 862: showShiWei = numArray[6];
  2148  026A  3007               	movlw	low (((_numArray+6)-__stringbase)| (0+32768))
  2149  026B  2A78               	goto	L3
  2150  026C                     l4324:	
  2151                           ;main.c: 864: }
  2152                           
  2153                           ;main.c: 863: showGeWei = numArray[0];
  2154                           
  2155                           
  2156                           ;main.c: 865: else if(preBatValue > 20)
  2157  026C  3015               	movlw	21
  2158  026D  0259               	subwf	_preBatValue,w
  2159  026E  1C03               	skipc
  2160  026F  2A72               	goto	l4328
  2161                           
  2162                           ;main.c: 866: {
  2163                           ;main.c: 867: showShiWei = numArray[4];
  2164  0270  3005               	movlw	low (((_numArray+4)-__stringbase)| (0+32768))
  2165  0271  2A78               	goto	L3
  2166  0272                     l4328:	
  2167                           ;main.c: 869: }
  2168                           
  2169                           ;main.c: 868: showGeWei = numArray[0];
  2170                           
  2171                           
  2172                           ;main.c: 870: else if(preBatValue > 0)
  2173  0272  0859               	movf	_preBatValue,w
  2174  0273  1903               	btfsc	3,2
  2175  0274  2A77               	goto	l4332
  2176                           
  2177                           ;main.c: 871: {
  2178                           ;main.c: 872: showShiWei = numArray[2];
  2179  0275  3003               	movlw	low (((_numArray+2)-__stringbase)| (0+32768))
  2180  0276  2A78               	goto	L3
  2181  0277                     l4332:	
  2182                           ;main.c: 874: }
  2183                           
  2184                           ;main.c: 873: showGeWei = numArray[0];
  2185                           
  2186                           
  2187                           ;main.c: 875: else
  2188                           ;main.c: 876: {
  2189                           ;main.c: 877: showShiWei = numArray[0];
  2190  0277  3001               	movlw	low (_numArray-__stringbase)
  2191  0278                     L3:	
  2192  0278  0084               	movwf	4
  2193  0279  158A  2000  118A   	fcall	stringdir
  2194  027C  00E1               	movwf	_showShiWei
  2195                           
  2196                           ;main.c: 878: showGeWei = numArray[0];
  2197  027D  3001               	movlw	low (_numArray-__stringbase)
  2198  027E                     L2:	
  2199  027E  0084               	movwf	4
  2200  027F  158A  2000         	fcall	stringdir
  2201  0281  00E0               	movwf	_showGeWei
  2202                           
  2203                           ;main.c: 879: }
  2204                           ;main.c: 880: showLed1 = 0xFF;
  2205  0282  30FF               	movlw	255
  2206  0283  00DF               	movwf	_showLed1
  2207                           
  2208                           ;main.c: 881: showLed2 = 0xFF;
  2209  0284  00DE               	movwf	_showLed2
  2210                           
  2211                           ;main.c: 882: }
  2212  0285  0008               	return
  2213  0286                     l4338:	
  2214                           
  2215                           ;main.c: 883: else if(chrgFlag)
  2216  0286  085B               	movf	_chrgFlag,w
  2217  0287  1903               	btfsc	3,2
  2218  0288  2AAF               	goto	l4364
  2219  0289  3040               	movlw	64
  2220                           
  2221                           ;main.c: 884: {
  2222                           ;main.c: 885: showFlag = 1;
  2223  028A  01E2               	clrf	_showFlag
  2224  028B  0AE2               	incf	_showFlag,f
  2225                           
  2226                           ;main.c: 886: sleepTime = 0;
  2227  028C  01AA               	clrf	_sleepTime
  2228  028D  01AB               	clrf	_sleepTime+1
  2229                           
  2230                           ;main.c: 887: if(++chrgBatStepTime > 63)
  2231  028E  0ACE               	incf	_chrgBatStepTime,f
  2232  028F  024E               	subwf	_chrgBatStepTime,w
  2233  0290  1C03               	skipc
  2234  0291  2AAE               	goto	l4362
  2235  0292  3063               	movlw	99
  2236                           
  2237                           ;main.c: 888: {
  2238                           ;main.c: 889: chrgBatStepTime = 0;
  2239  0293  01CE               	clrf	_chrgBatStepTime
  2240                           
  2241                           ;main.c: 890: if(preBatValue >= 99)
  2242  0294  0259               	subwf	_preBatValue,w
  2243  0295  1C03               	skipc
  2244  0296  2AA5               	goto	l4356
  2245  0297  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2246                           
  2247                           ;main.c: 891: {
  2248                           ;main.c: 892: zeroStep = 0;
  2249  0298  01FB               	clrf	_zeroStep
  2250                           
  2251                           ;main.c: 893: showShiWei = numArray[9];
  2252  0299  0084               	movwf	4
  2253  029A  158A  2000  118A   	fcall	stringdir
  2254  029D  00E1               	movwf	_showShiWei
  2255                           
  2256                           ;main.c: 894: showGeWei = numArray[9];
  2257  029E  300A               	movlw	low (((_numArray+9)-__stringbase)| (0+32768))
  2258  029F  0084               	movwf	4
  2259  02A0  158A  2000  118A   	fcall	stringdir
  2260  02A3  00E0               	movwf	_showGeWei
  2261                           
  2262                           ;main.c: 895: }
  2263  02A4  2AAE               	goto	l4362
  2264  02A5                     l4356:	
  2265                           
  2266                           ;main.c: 896: else
  2267                           ;main.c: 897: {
  2268                           ;main.c: 898: if(++zeroStep > 12)
  2269  02A5  300D               	movlw	13
  2270  02A6  0AFB               	incf	_zeroStep,f
  2271  02A7  027B               	subwf	_zeroStep,w
  2272  02A8  1C03               	skipc
  2273  02A9  2AAC               	goto	l4360
  2274                           
  2275                           ;main.c: 899: {
  2276                           ;main.c: 900: zeroStep = 1;
  2277  02AA  01FB               	clrf	_zeroStep
  2278  02AB  0AFB               	incf	_zeroStep,f
  2279  02AC                     l4360:	
  2280                           
  2281                           ;main.c: 901: }
  2282                           ;main.c: 902: showShiWei = 0x00;
  2283  02AC  01E1               	clrf	_showShiWei
  2284                           
  2285                           ;main.c: 903: showGeWei = 0x00;
  2286  02AD  01E0               	clrf	_showGeWei
  2287  02AE                     l4362:	
  2288                           
  2289                           ;main.c: 904: }
  2290                           ;main.c: 905: }
  2291                           ;main.c: 906: setZeroStep2();
  2292  02AE  2F23               	ljmp	l3788
  2293  02AF                     l4364:	
  2294                           ;main.c: 908: }
  2295                           
  2296                           
  2297                           ;main.c: 909: else if(zeroStep > 0)
  2298  02AF  087B               	movf	_zeroStep,w
  2299  02B0  1903               	btfsc	3,2
  2300  02B1  2AB9               	goto	l4372
  2301                           
  2302                           ;main.c: 910: {
  2303                           ;main.c: 911: showFlag = 1;
  2304  02B2  01E2               	clrf	_showFlag
  2305  02B3  0AE2               	incf	_showFlag,f
  2306                           
  2307                           ;main.c: 912: sleepTime = 0;
  2308  02B4  01AA               	clrf	_sleepTime
  2309  02B5  01AB               	clrf	_sleepTime+1
  2310                           
  2311                           ;main.c: 913: showShiWei = showGeWei = 0;
  2312  02B6  01E0               	clrf	_showGeWei
  2313  02B7  01E1               	clrf	_showShiWei
  2314                           
  2315                           ;main.c: 914: setZeroStep();
  2316  02B8  2EC1               	ljmp	l3726
  2317  02B9                     l4372:	
  2318                           ;main.c: 915: }
  2319                           
  2320                           
  2321                           ;main.c: 916: else
  2322                           ;main.c: 917: {
  2323                           ;main.c: 918: if(sleepTime > 10 && sleepTime % 20 == 0)
  2324  02B9  3000               	movlw	0
  2325  02BA  022B               	subwf	_sleepTime+1,w
  2326  02BB  300B               	movlw	11
  2327  02BC  1903               	skipnz
  2328  02BD  022A               	subwf	_sleepTime,w
  2329  02BE  1C03               	skipc
  2330  02BF  2AD6               	goto	l4384
  2331  02C0  3014               	movlw	20
  2332  02C1  00F2               	movwf	___lwmod@divisor
  2333  02C2  01F3               	clrf	___lwmod@divisor+1
  2334  02C3  082B               	movf	_sleepTime+1,w
  2335  02C4  00F5               	movwf	___lwmod@dividend+1
  2336  02C5  082A               	movf	_sleepTime,w
  2337  02C6  00F4               	movwf	___lwmod@dividend
  2338  02C7  231A  118A         	fcall	___lwmod
  2339  02C9  0872               	movf	?___lwmod,w
  2340  02CA  0473               	iorwf	?___lwmod+1,w
  2341  02CB  1D03               	btfss	3,2
  2342  02CC  2AD6               	goto	l4384
  2343  02CD  3004               	movlw	4
  2344                           
  2345                           ;main.c: 919: {
  2346                           ;main.c: 920: showFlag = 0;
  2347  02CE  01E2               	clrf	_showFlag
  2348                           
  2349                           ;main.c: 921: tm1650cmd(0X48,0x04);
  2350  02CF  00F4               	movwf	tm1650cmd@seg_data
  2351  02D0  3048               	movlw	72
  2352  02D1  23B8  118A         	fcall	_tm1650cmd
  2353                           
  2354                           ;main.c: 922: PORTC |= 0x01;
  2355                           
  2356                           ;main.c: 923: PORTB |= 0x80;
  2357  02D3  27E5  118A         	fcall	PL24	;call to abstracted procedure
  2358  02D5  1786               	bsf	6,7	;volatile
  2359  02D6                     l4384:	
  2360                           
  2361                           ;main.c: 924: }
  2362                           ;main.c: 925: if(++sleepTime > 200)
  2363  02D6  0AAA               	incf	_sleepTime,f
  2364  02D7  1903               	skipnz
  2365  02D8  0AAB               	incf	_sleepTime+1,f
  2366  02D9  3000               	movlw	0
  2367  02DA  022B               	subwf	_sleepTime+1,w
  2368  02DB  30C9               	movlw	201
  2369  02DC  1903               	skipnz
  2370  02DD  022A               	subwf	_sleepTime,w
  2371  02DE  1C03               	skipc
  2372  02DF  0008               	return
  2373                           
  2374                           ;main.c: 926: {
  2375                           ;main.c: 927: sleepTime = 0;
  2376  02E0  01AA               	clrf	_sleepTime
  2377  02E1  01AB               	clrf	_sleepTime+1
  2378                           
  2379                           ;main.c: 928: WorkSleep();
  2380  02E2  2C95               	ljmp	l3668
  2381  02E3                     __end_of_showCtr:	
  2382  02E3                     __ptext16:	
  2383 ;; *************** function ___lbdiv *****************
  2384 ;; Defined at:
  2385 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  dividend        1    wreg     unsigned char 
  2388 ;;  divisor         1    2[COMMON] unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  dividend        1    3[COMMON] unsigned char 
  2391 ;;  quotient        1    5[COMMON] unsigned char 
  2392 ;;  counter         1    4[COMMON] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      unsigned char 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 300/0
  2399 ;;		On exit  : 300/0
  2400 ;;		Unchanged: 300/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2402 ;;      Params:         1       0       0       0       0
  2403 ;;      Locals:         3       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0
  2405 ;;      Totals:         4       0       0       0       0
  2406 ;;Total ram usage:        4 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    1
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_showCtr
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function ___lbdiv
  2418  02E3                     ___lbdiv:	
  2419                           
  2420                           ;incstack = 0
  2421                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2422                           ;___lbdiv@dividend stored from wreg
  2423  02E3  00F3               	movwf	___lbdiv@dividend
  2424  02E4  01F5               	clrf	___lbdiv@quotient
  2425  02E5  0872               	movf	___lbdiv@divisor,w
  2426  02E6  1903               	btfsc	3,2
  2427  02E7  2AFC               	goto	l4050
  2428  02E8  01F4               	clrf	___lbdiv@counter
  2429  02E9                     l4036:	
  2430  02E9  0AF4               	incf	___lbdiv@counter,f
  2431  02EA  1BF2               	btfsc	___lbdiv@divisor,7
  2432  02EB  2AEF               	goto	l1972
  2433  02EC  1003               	clrc
  2434  02ED  0DF2               	rlf	___lbdiv@divisor,f
  2435  02EE  2AE9               	goto	l4036
  2436  02EF                     l1972:	
  2437  02EF  1003               	clrc
  2438  02F0  0DF5               	rlf	___lbdiv@quotient,f
  2439  02F1  0872               	movf	___lbdiv@divisor,w
  2440  02F2  0273               	subwf	___lbdiv@dividend,w
  2441  02F3  1C03               	skipc
  2442  02F4  2AF9               	goto	L14
  2443  02F5  0872               	movf	___lbdiv@divisor,w
  2444  02F6  02F3               	subwf	___lbdiv@dividend,f
  2445  02F7  1475               	bsf	___lbdiv@quotient,0
  2446  02F8  1003               	clrc
  2447  02F9                     L14:	
  2448  02F9  0CF2               	rrf	___lbdiv@divisor,f
  2449  02FA  0BF4               	decfsz	___lbdiv@counter,f
  2450  02FB  2AEF               	goto	l1972
  2451  02FC                     l4050:	
  2452  02FC  0875               	movf	___lbdiv@quotient,w
  2453  02FD  0008               	return
  2454  02FE                     __end_of___lbdiv:	
  2455  02FE                     __ptext15:	
  2456 ;; *************** function ___lbmod *****************
  2457 ;; Defined at:
  2458 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  dividend        1    wreg     unsigned char 
  2461 ;;  divisor         1    2[COMMON] unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  dividend        1    4[COMMON] unsigned char 
  2464 ;;  rem             1    6[COMMON] unsigned char 
  2465 ;;  counter         1    5[COMMON] unsigned char 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      unsigned char 
  2468 ;; Registers used:
  2469 ;;		wreg, status,2, status,0
  2470 ;; Tracked objects:
  2471 ;;		On entry : 300/0
  2472 ;;		On exit  : 300/0
  2473 ;;		Unchanged: 300/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2475 ;;      Params:         1       0       0       0       0
  2476 ;;      Locals:         3       0       0       0       0
  2477 ;;      Temps:          1       0       0       0       0
  2478 ;;      Totals:         5       0       0       0       0
  2479 ;;Total ram usage:        5 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_showCtr
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           
  2490                           ;psect for function ___lbmod
  2491  02FE                     ___lbmod:	
  2492                           
  2493                           ;incstack = 0
  2494                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2495                           ;___lbmod@dividend stored from wreg
  2496  02FE  00F4               	movwf	___lbmod@dividend
  2497  02FF  3008               	movlw	8
  2498  0300  00F5               	movwf	___lbmod@counter
  2499  0301  01F6               	clrf	___lbmod@rem
  2500  0302                     l4058:	
  2501  0302  0874               	movf	___lbmod@dividend,w
  2502  0303  00F3               	movwf	??___lbmod
  2503  0304  3007               	movlw	7
  2504  0305  1003               	clrc
  2505  0306                     L13:	
  2506  0306  0CF3               	rrf	??___lbmod,f
  2507  0307  3EFF               	addlw	-1
  2508  0308  1003               	clrc
  2509  0309  1D03               	skipz
  2510  030A  2B06               	goto	L13
  2511  030B  0D76               	rlf	___lbmod@rem,w
  2512  030C  0473               	iorwf	??___lbmod,w
  2513  030D  00F6               	movwf	___lbmod@rem
  2514  030E  1003               	clrc
  2515  030F  0DF4               	rlf	___lbmod@dividend,f
  2516  0310  0872               	movf	___lbmod@divisor,w
  2517  0311  0276               	subwf	___lbmod@rem,w
  2518  0312  1C03               	skipc
  2519  0313  2B16               	goto	l4066
  2520  0314  0872               	movf	___lbmod@divisor,w
  2521  0315  02F6               	subwf	___lbmod@rem,f
  2522  0316                     l4066:	
  2523  0316  0BF5               	decfsz	___lbmod@counter,f
  2524  0317  2B02               	goto	l4058
  2525  0318  0876               	movf	___lbmod@rem,w
  2526  0319  0008               	return
  2527  031A                     __end_of___lbmod:	
  2528  031A                     __ptext14:	
  2529 ;; *************** function ___lwmod *****************
  2530 ;; Defined at:
  2531 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  divisor         2    2[COMMON] unsigned int 
  2534 ;;  dividend        2    4[COMMON] unsigned int 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  counter         1    6[COMMON] unsigned char 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  2    2[COMMON] unsigned int 
  2539 ;; Registers used:
  2540 ;;		wreg, status,2, status,0
  2541 ;; Tracked objects:
  2542 ;;		On entry : 300/0
  2543 ;;		On exit  : 300/0
  2544 ;;		Unchanged: 300/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2546 ;;      Params:         4       0       0       0       0
  2547 ;;      Locals:         1       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0
  2549 ;;      Totals:         5       0       0       0       0
  2550 ;;Total ram usage:        5 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    1
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_showCtr
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function ___lwmod
  2562  031A                     ___lwmod:	
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2566  031A  0872               	movf	___lwmod@divisor,w
  2567  031B  0473               	iorwf	___lwmod@divisor+1,w
  2568  031C  1903               	btfsc	3,2
  2569  031D  2B39               	goto	l4088
  2570  031E  01F6               	clrf	___lwmod@counter
  2571  031F                     L11:	
  2572  031F  0AF6               	incf	___lwmod@counter,f
  2573  0320  1BF3               	btfsc	___lwmod@divisor+1,7
  2574  0321  2B26               	goto	l4080
  2575  0322  1003               	clrc
  2576  0323  0DF2               	rlf	___lwmod@divisor,f
  2577  0324  0DF3               	rlf	___lwmod@divisor+1,f
  2578  0325  2B1F               	goto	L11
  2579  0326                     l4080:	
  2580  0326  0873               	movf	___lwmod@divisor+1,w
  2581  0327  0275               	subwf	___lwmod@dividend+1,w
  2582  0328  1D03               	skipz
  2583  0329  2B2C               	goto	u3145
  2584  032A  0872               	movf	___lwmod@divisor,w
  2585  032B  0274               	subwf	___lwmod@dividend,w
  2586  032C                     u3145:	
  2587  032C  1C03               	skipc
  2588  032D  2B35               	goto	L12
  2589  032E  0872               	movf	___lwmod@divisor,w
  2590  032F  02F4               	subwf	___lwmod@dividend,f
  2591  0330  0873               	movf	___lwmod@divisor+1,w
  2592  0331  1C03               	skipc
  2593  0332  03F5               	decf	___lwmod@dividend+1,f
  2594  0333  02F5               	subwf	___lwmod@dividend+1,f
  2595  0334  1003               	clrc
  2596  0335                     L12:	
  2597  0335  0CF3               	rrf	___lwmod@divisor+1,f
  2598  0336  0CF2               	rrf	___lwmod@divisor,f
  2599  0337  0BF6               	decfsz	___lwmod@counter,f
  2600  0338  2B26               	goto	l4080
  2601  0339                     l4088:	
  2602  0339  0875               	movf	___lwmod@dividend+1,w
  2603  033A  00F3               	movwf	?___lwmod+1
  2604  033B  0874               	movf	___lwmod@dividend,w
  2605  033C  00F2               	movwf	?___lwmod
  2606  033D  0008               	return
  2607  033E                     __end_of___lwmod:	
  2608  033E                     __ptext5:	
  2609 ;; *************** function _refreshTM1650 *****************
  2610 ;; Defined at:
  2611 ;;		line 656 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 300/0
  2622 ;;		On exit  : 300/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       0       0       0       0
  2626 ;;      Locals:         0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0
  2628 ;;      Totals:         0       0       0       0       0
  2629 ;;Total ram usage:        0 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    3
  2632 ;; This function calls:
  2633 ;;		_tm1650cmd
  2634 ;; This function is called by:
  2635 ;;		_task1
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _refreshTM1650
  2641  033E                     _refreshTM1650:	
  2642                           
  2643                           ;main.c: 658: if(showFlag)
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _refreshTM1650: [wreg+status,2+status,0+pclath+cstack]
  2647  033E  0862               	movf	_showFlag,w
  2648  033F  1903               	btfsc	3,2
  2649  0340  2B79               	goto	l3714
  2650                           
  2651                           ;main.c: 659: {
  2652                           ;main.c: 660: tm1650cmd(0X48,0x21);
  2653  0341  3021               	movlw	33
  2654  0342  00F4               	movwf	tm1650cmd@seg_data
  2655  0343  3048               	movlw	72
  2656  0344  23B8  118A         	fcall	_tm1650cmd
  2657  0346  0000               	nop	;# 
  2658  0347  0000               	nop	;# 
  2659  0348  0000               	nop	;# 
  2660  0349  0000               	nop	;# 
  2661  034A  0000               	nop	;# 
  2662  034B  0000               	nop	;# 
  2663                           
  2664                           ;main.c: 662: tm1650cmd(0X68,showLed2);
  2665  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2666  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2667  034E  085E               	movf	_showLed2,w
  2668  034F  00F4               	movwf	tm1650cmd@seg_data
  2669  0350  3068               	movlw	104
  2670  0351  23B8  118A         	fcall	_tm1650cmd
  2671  0353  0000               	nop	;# 
  2672  0354  0000               	nop	;# 
  2673  0355  0000               	nop	;# 
  2674  0356  0000               	nop	;# 
  2675  0357  0000               	nop	;# 
  2676  0358  0000               	nop	;# 
  2677                           
  2678                           ;main.c: 664: tm1650cmd(0X6A,showShiWei);
  2679  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2680  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2681  035B  0861               	movf	_showShiWei,w
  2682  035C  00F4               	movwf	tm1650cmd@seg_data
  2683  035D  306A               	movlw	106
  2684  035E  23B8  118A         	fcall	_tm1650cmd
  2685  0360  0000               	nop	;# 
  2686  0361  0000               	nop	;# 
  2687  0362  0000               	nop	;# 
  2688  0363  0000               	nop	;# 
  2689  0364  0000               	nop	;# 
  2690  0365  0000               	nop	;# 
  2691                           
  2692                           ;main.c: 666: tm1650cmd(0X6C,showGeWei);
  2693  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0368  0860               	movf	_showGeWei,w
  2696  0369  00F4               	movwf	tm1650cmd@seg_data
  2697  036A  306C               	movlw	108
  2698  036B  23B8  118A         	fcall	_tm1650cmd
  2699  036D  0000               	nop	;# 
  2700  036E  0000               	nop	;# 
  2701  036F  0000               	nop	;# 
  2702  0370  0000               	nop	;# 
  2703  0371  0000               	nop	;# 
  2704  0372  0000               	nop	;# 
  2705                           
  2706                           ;main.c: 668: tm1650cmd(0X6E,showLed1);
  2707  0373  1283               	bcf	3,5	;RP0=0, select bank0
  2708  0374  1303               	bcf	3,6	;RP1=0, select bank0
  2709  0375  085F               	movf	_showLed1,w
  2710  0376  00F4               	movwf	tm1650cmd@seg_data
  2711  0377  306E               	movlw	110
  2712  0378  2BB8               	ljmp	_tm1650cmd
  2713  0379                     l3714:	
  2714                           ;main.c: 669: }
  2715                           
  2716                           
  2717                           ;main.c: 670: else if(sleepTime < 10)
  2718  0379  3000               	movlw	0
  2719  037A  022B               	subwf	_sleepTime+1,w
  2720  037B  300A               	movlw	10
  2721  037C  1903               	skipnz
  2722  037D  022A               	subwf	_sleepTime,w
  2723  037E  1803               	skipnc
  2724  037F  0008               	return
  2725  0380  3068               	movlw	104
  2726                           
  2727                           ;main.c: 671: {
  2728                           ;main.c: 672: tm1650cmd(0X68,0);
  2729  0381  01F4               	clrf	tm1650cmd@seg_data
  2730  0382  23B8  118A         	fcall	_tm1650cmd
  2731  0384  0000               	nop	;# 
  2732  0385  0000               	nop	;# 
  2733  0386  0000               	nop	;# 
  2734  0387  0000               	nop	;# 
  2735  0388  0000               	nop	;# 
  2736  0389  0000               	nop	;# 
  2737  038A  306A               	movlw	106
  2738                           
  2739                           ;main.c: 674: tm1650cmd(0X6A,0);
  2740  038B  01F4               	clrf	tm1650cmd@seg_data
  2741  038C  23B8  118A         	fcall	_tm1650cmd
  2742  038E  0000               	nop	;# 
  2743  038F  0000               	nop	;# 
  2744  0390  0000               	nop	;# 
  2745  0391  0000               	nop	;# 
  2746  0392  0000               	nop	;# 
  2747  0393  0000               	nop	;# 
  2748  0394  306C               	movlw	108
  2749                           
  2750                           ;main.c: 676: tm1650cmd(0X6C,0);
  2751  0395  01F4               	clrf	tm1650cmd@seg_data
  2752  0396  23B8  118A         	fcall	_tm1650cmd
  2753  0398  0000               	nop	;# 
  2754  0399  0000               	nop	;# 
  2755  039A  0000               	nop	;# 
  2756  039B  0000               	nop	;# 
  2757  039C  0000               	nop	;# 
  2758  039D  0000               	nop	;# 
  2759  039E  306E               	movlw	110
  2760                           
  2761                           ;main.c: 678: tm1650cmd(0X6E,0);
  2762  039F  01F4               	clrf	tm1650cmd@seg_data
  2763  03A0  23B8  118A         	fcall	_tm1650cmd
  2764  03A2  0000               	nop	;# 
  2765  03A3  0000               	nop	;# 
  2766  03A4  0000               	nop	;# 
  2767  03A5  0000               	nop	;# 
  2768  03A6  0000               	nop	;# 
  2769  03A7  0000               	nop	;# 
  2770  03A8  3048               	movlw	72
  2771                           
  2772                           ;main.c: 680: tm1650cmd(0X48,0x00);
  2773  03A9  01F4               	clrf	tm1650cmd@seg_data
  2774  03AA  23B8               	fcall	_tm1650cmd
  2775  03AB  0000               	nop	;# 
  2776  03AC  0000               	nop	;# 
  2777  03AD  0000               	nop	;# 
  2778  03AE  0000               	nop	;# 
  2779  03AF  0000               	nop	;# 
  2780  03B0  0000               	nop	;# 
  2781                           
  2782                           ;main.c: 682: showShiWei = 0x00;
  2783  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2784  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2785  03B3  01E1               	clrf	_showShiWei
  2786                           
  2787                           ;main.c: 683: showGeWei = 0x00;
  2788  03B4  01E0               	clrf	_showGeWei
  2789                           
  2790                           ;main.c: 684: showLed1 = 0x00;
  2791  03B5  01DF               	clrf	_showLed1
  2792                           
  2793                           ;main.c: 685: showLed2 = 0x00;
  2794  03B6  01DE               	clrf	_showLed2
  2795  03B7  0008               	return
  2796  03B8                     __end_of_refreshTM1650:	
  2797  03B8                     __ptext10:	
  2798 ;; *************** function _tm1650cmd *****************
  2799 ;; Defined at:
  2800 ;;		line 632 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  digAddr         1    wreg     unsigned char 
  2803 ;;  seg_data        1    4[COMMON] unsigned char 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  digAddr         1    5[COMMON] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 300/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2815 ;;      Params:         1       0       0       0       0
  2816 ;;      Locals:         1       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0
  2818 ;;      Totals:         2       0       0       0       0
  2819 ;;Total ram usage:        2 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    2
  2822 ;; This function calls:
  2823 ;;		_TM1650_START
  2824 ;;		_TM1650_STOP
  2825 ;;		_write_8bit
  2826 ;; This function is called by:
  2827 ;;		_initTM1650
  2828 ;;		_refreshTM1650
  2829 ;;		_showCtr
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           
  2834                           ;psect for function _tm1650cmd
  2835  03B8                     _tm1650cmd:	
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in _tm1650cmd: [wreg+status,2+status,0+pclath+cstack]
  2839                           ;tm1650cmd@digAddr stored from wreg
  2840  03B8  00F5               	movwf	tm1650cmd@digAddr
  2841                           
  2842                           ;main.c: 634: TM1650_START();
  2843  03B9  2480  118A         	fcall	_TM1650_START
  2844                           
  2845                           ;main.c: 635: write_8bit(digAddr);
  2846  03BB  0875               	movf	tm1650cmd@digAddr,w
  2847  03BC  23C2  118A         	fcall	_write_8bit
  2848                           
  2849                           ;main.c: 636: write_8bit(seg_data);
  2850  03BE  0874               	movf	tm1650cmd@seg_data,w
  2851  03BF  23C2  118A         	fcall	_write_8bit
  2852                           
  2853                           ;main.c: 637: TM1650_STOP();
  2854  03C1  2E6F               	ljmp	l3364
  2855  03C2                     __end_of_tm1650cmd:	
  2856  03C2                     __ptext11:	
  2857 ;; *************** function _write_8bit *****************
  2858 ;; Defined at:
  2859 ;;		line 530 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  dat             1    wreg     unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  dat             1    2[COMMON] unsigned char 
  2864 ;;  i               1    3[COMMON] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      void 
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/300
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2874 ;;      Params:         0       0       0       0       0
  2875 ;;      Locals:         2       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0
  2877 ;;      Totals:         2       0       0       0       0
  2878 ;;Total ram usage:        2 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    1
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_tm1650cmd
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _write_8bit
  2890  03C2                     _write_8bit:	
  2891                           
  2892                           ;incstack = 0
  2893                           ; Regs used in _write_8bit: [wreg+status,2+status,0]
  2894                           ;write_8bit@dat stored from wreg
  2895  03C2  00F2               	movwf	write_8bit@dat
  2896                           
  2897                           ;main.c: 532: unsigned char i;
  2898                           ;main.c: 533: RC0=0;
  2899  03C3  1683               	bsf	3,5	;RP0=1, select bank3
  2900  03C4  1703               	bsf	3,6	;RP1=1, select bank3
  2901  03C5  1005               	bcf	5,0	;volatile
  2902                           
  2903                           ;main.c: 534: for(i=0;i<8;i++)
  2904  03C6  01F3               	clrf	write_8bit@i
  2905  03C7                     l1317:	
  2906                           
  2907                           ;main.c: 535: {
  2908                           ;main.c: 536: if(dat&0x80)
  2909  03C7  1FF2               	btfss	write_8bit@dat,7
  2910  03C8  2BFA               	goto	l1319
  2911                           
  2912                           ;main.c: 537: {
  2913                           ;main.c: 538: RB7=1;
  2914  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2915  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2916  03CB  1786               	bsf	6,7	;volatile
  2917  03CC  0000               	nop	;# 
  2918  03CD  0000               	nop	;# 
  2919  03CE  0000               	nop	;# 
  2920  03CF  0000               	nop	;# 
  2921  03D0  0000               	nop	;# 
  2922  03D1  0000               	nop	;# 
  2923  03D2  0000               	nop	;# 
  2924  03D3  0000               	nop	;# 
  2925  03D4  0000               	nop	;# 
  2926  03D5  0000               	nop	;# 
  2927  03D6  0000               	nop	;# 
  2928  03D7  0000               	nop	;# 
  2929                           
  2930                           ;main.c: 541: RC0=1;
  2931  03D8  1683               	bsf	3,5	;RP0=1, select bank3
  2932  03D9  1703               	bsf	3,6	;RP1=1, select bank3
  2933  03DA  1405               	bsf	5,0	;volatile
  2934  03DB  0000               	nop	;# 
  2935  03DC  0000               	nop	;# 
  2936  03DD  0000               	nop	;# 
  2937  03DE  0000               	nop	;# 
  2938  03DF  0000               	nop	;# 
  2939  03E0  0000               	nop	;# 
  2940  03E1  0000               	nop	;# 
  2941  03E2  0000               	nop	;# 
  2942  03E3  0000               	nop	;# 
  2943  03E4  0000               	nop	;# 
  2944  03E5  0000               	nop	;# 
  2945  03E6  0000               	nop	;# 
  2946  03E7  0000               	nop	;# 
  2947  03E8  0000               	nop	;# 
  2948  03E9  0000               	nop	;# 
  2949  03EA  0000               	nop	;# 
  2950  03EB  0000               	nop	;# 
  2951  03EC  0000               	nop	;# 
  2952  03ED  0000               	nop	;# 
  2953  03EE  0000               	nop	;# 
  2954  03EF  0000               	nop	;# 
  2955  03F0  0000               	nop	;# 
  2956  03F1  0000               	nop	;# 
  2957  03F2  0000               	nop	;# 
  2958  03F3  0000               	nop	;# 
  2959  03F4  0000               	nop	;# 
  2960  03F5  0000               	nop	;# 
  2961  03F6  0000               	nop	;# 
  2962  03F7  0000               	nop	;# 
  2963  03F8  0000               	nop	;# 
  2964  03F9  2C2A               	goto	L10
  2965  03FA                     l1319:	
  2966                           ;main.c: 548: }
  2967                           
  2968                           ;main.c: 547: RC0=0;
  2969                           
  2970                           
  2971                           ;main.c: 549: else
  2972                           ;main.c: 550: {
  2973                           ;main.c: 551: RB7=0;
  2974  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2975  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2976  03FC  1386               	bcf	6,7	;volatile
  2977  03FD  0000               	nop	;# 
  2978  03FE  0000               	nop	;# 
  2979  03FF  0000               	nop	;# 
  2980  0400  0000               	nop	;# 
  2981  0401  0000               	nop	;# 
  2982  0402  0000               	nop	;# 
  2983  0403  0000               	nop	;# 
  2984  0404  0000               	nop	;# 
  2985  0405  0000               	nop	;# 
  2986  0406  0000               	nop	;# 
  2987  0407  0000               	nop	;# 
  2988  0408  0000               	nop	;# 
  2989                           
  2990                           ;main.c: 554: RC0=1;
  2991  0409  1683               	bsf	3,5	;RP0=1, select bank3
  2992  040A  1703               	bsf	3,6	;RP1=1, select bank3
  2993  040B  1405               	bsf	5,0	;volatile
  2994  040C  0000               	nop	;# 
  2995  040D  0000               	nop	;# 
  2996  040E  0000               	nop	;# 
  2997  040F  0000               	nop	;# 
  2998  0410  0000               	nop	;# 
  2999  0411  0000               	nop	;# 
  3000  0412  0000               	nop	;# 
  3001  0413  0000               	nop	;# 
  3002  0414  0000               	nop	;# 
  3003  0415  0000               	nop	;# 
  3004  0416  0000               	nop	;# 
  3005  0417  0000               	nop	;# 
  3006  0418  0000               	nop	;# 
  3007  0419  0000               	nop	;# 
  3008  041A  0000               	nop	;# 
  3009  041B  0000               	nop	;# 
  3010  041C  0000               	nop	;# 
  3011  041D  0000               	nop	;# 
  3012  041E  0000               	nop	;# 
  3013  041F  0000               	nop	;# 
  3014  0420  0000               	nop	;# 
  3015  0421  0000               	nop	;# 
  3016  0422  0000               	nop	;# 
  3017  0423  0000               	nop	;# 
  3018  0424  0000               	nop	;# 
  3019  0425  0000               	nop	;# 
  3020  0426  0000               	nop	;# 
  3021  0427  0000               	nop	;# 
  3022  0428  0000               	nop	;# 
  3023  0429  0000               	nop	;# 
  3024  042A                     L10:	
  3025                           
  3026                           ;main.c: 560: RC0=0;
  3027  042A  1683               	bsf	3,5	;RP0=1, select bank3
  3028  042B  1703               	bsf	3,6	;RP1=1, select bank3
  3029  042C  1005               	bcf	5,0	;volatile
  3030  042D  3008               	movlw	8
  3031                           
  3032                           ;main.c: 561: }
  3033                           ;main.c: 562: dat<<=1;
  3034  042E  1003               	clrc
  3035  042F  0DF2               	rlf	write_8bit@dat,f
  3036  0430  0AF3               	incf	write_8bit@i,f
  3037  0431  0273               	subwf	write_8bit@i,w
  3038  0432  1C03               	skipc
  3039  0433  2BC7               	goto	l1317
  3040                           
  3041                           ;main.c: 563: }
  3042                           ;main.c: 564: RB7=1;
  3043  0434  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0435  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0436  1786               	bsf	6,7	;volatile
  3046  0437  0000               	nop	;# 
  3047  0438  0000               	nop	;# 
  3048  0439  0000               	nop	;# 
  3049  043A  0000               	nop	;# 
  3050  043B  0000               	nop	;# 
  3051  043C  0000               	nop	;# 
  3052  043D  0000               	nop	;# 
  3053  043E  0000               	nop	;# 
  3054  043F  0000               	nop	;# 
  3055  0440  0000               	nop	;# 
  3056  0441  0000               	nop	;# 
  3057  0442  0000               	nop	;# 
  3058  0443  0000               	nop	;# 
  3059  0444  0000               	nop	;# 
  3060  0445  0000               	nop	;# 
  3061  0446  0000               	nop	;# 
  3062  0447  0000               	nop	;# 
  3063  0448  0000               	nop	;# 
  3064  0449  0000               	nop	;# 
  3065  044A  0000               	nop	;# 
  3066  044B  0000               	nop	;# 
  3067  044C  0000               	nop	;# 
  3068  044D  0000               	nop	;# 
  3069  044E  0000               	nop	;# 
  3070                           
  3071                           ;main.c: 569: RC0=1;
  3072  044F  1683               	bsf	3,5	;RP0=1, select bank3
  3073  0450  1703               	bsf	3,6	;RP1=1, select bank3
  3074  0451  1405               	bsf	5,0	;volatile
  3075  0452  0000               	nop	;# 
  3076  0453  0000               	nop	;# 
  3077  0454  0000               	nop	;# 
  3078  0455  0000               	nop	;# 
  3079  0456  0000               	nop	;# 
  3080  0457  0000               	nop	;# 
  3081  0458  0000               	nop	;# 
  3082  0459  0000               	nop	;# 
  3083  045A  0000               	nop	;# 
  3084  045B  0000               	nop	;# 
  3085  045C  0000               	nop	;# 
  3086  045D  0000               	nop	;# 
  3087  045E  0000               	nop	;# 
  3088  045F  0000               	nop	;# 
  3089  0460  0000               	nop	;# 
  3090  0461  0000               	nop	;# 
  3091  0462  0000               	nop	;# 
  3092  0463  0000               	nop	;# 
  3093  0464  0000               	nop	;# 
  3094  0465  0000               	nop	;# 
  3095  0466  0000               	nop	;# 
  3096  0467  0000               	nop	;# 
  3097  0468  0000               	nop	;# 
  3098  0469  0000               	nop	;# 
  3099  046A  0000               	nop	;# 
  3100  046B  0000               	nop	;# 
  3101  046C  0000               	nop	;# 
  3102  046D  0000               	nop	;# 
  3103  046E  0000               	nop	;# 
  3104  046F  0000               	nop	;# 
  3105                           
  3106                           ;main.c: 575: RC0=0;
  3107  0470  1683               	bsf	3,5	;RP0=1, select bank3
  3108  0471  1703               	bsf	3,6	;RP1=1, select bank3
  3109  0472  1005               	bcf	5,0	;volatile
  3110  0473  0000               	nop	;# 
  3111  0474  0000               	nop	;# 
  3112  0475  0000               	nop	;# 
  3113  0476  0000               	nop	;# 
  3114  0477  0000               	nop	;# 
  3115  0478  0000               	nop	;# 
  3116  0479  0000               	nop	;# 
  3117  047A  0000               	nop	;# 
  3118  047B  0000               	nop	;# 
  3119  047C  0000               	nop	;# 
  3120  047D  0000               	nop	;# 
  3121  047E  0000               	nop	;# 
  3122  047F  0008               	return
  3123  0480                     __end_of_write_8bit:	
  3124  0480                     __ptext13:	
  3125 ;; *************** function _TM1650_START *****************
  3126 ;; Defined at:
  3127 ;;		line 505 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		None
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 300/300
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0
  3144 ;;      Totals:         0       0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_tm1650cmd
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _TM1650_START
  3157  0480                     _TM1650_START:	
  3158                           
  3159                           ;main.c: 507: RC0=1;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _TM1650_START: []
  3163                           
  3164                           ;main.c: 508: RB7=1;
  3165  0480  27E5               	fcall	PL24	;call to abstracted procedure
  3166  0481  1786               	bsf	6,7	;volatile
  3167  0482  0000               	nop	;# 
  3168  0483  0000               	nop	;# 
  3169  0484  0000               	nop	;# 
  3170  0485  0000               	nop	;# 
  3171  0486  0000               	nop	;# 
  3172  0487  0000               	nop	;# 
  3173                           
  3174                           ;main.c: 510: RB7=0;
  3175  0488  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0489  1303               	bcf	3,6	;RP1=0, select bank0
  3177  048A  1386               	bcf	6,7	;volatile
  3178  048B  0000               	nop	;# 
  3179  048C  0000               	nop	;# 
  3180  048D  0000               	nop	;# 
  3181  048E  0000               	nop	;# 
  3182  048F  0000               	nop	;# 
  3183  0490  0000               	nop	;# 
  3184                           
  3185                           ;main.c: 512: RC0=0;
  3186  0491  1683               	bsf	3,5	;RP0=1, select bank3
  3187  0492  1703               	bsf	3,6	;RP1=1, select bank3
  3188  0493  1005               	bcf	5,0	;volatile
  3189  0494  0008               	return
  3190  0495                     __end_of_TM1650_START:	
  3191  0495                     __ptext17:	
  3192 ;; *************** function _WorkSleep *****************
  3193 ;; Defined at:
  3194 ;;		line 437 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;		None
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 300/0
  3205 ;;		On exit  : 300/100
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3208 ;;      Params:         0       0       0       0       0
  3209 ;;      Locals:         0       0       0       0       0
  3210 ;;      Temps:          0       0       0       0       0
  3211 ;;      Totals:         0       0       0       0       0
  3212 ;;Total ram usage:        0 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    4
  3215 ;; This function calls:
  3216 ;;		_Init_System
  3217 ;;		_Refurbish_Sfr
  3218 ;;		_SystemEnterSleep
  3219 ;; This function is called by:
  3220 ;;		_showCtr
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _WorkSleep
  3226  0495                     _WorkSleep:	
  3227  0495                     l3668:	
  3228                           ;incstack = 0
  3229                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3230                           
  3231                           
  3232                           ;main.c: 449: INTCON = 0;
  3233  0495  018B               	clrf	11	;volatile
  3234                           
  3235                           ;main.c: 450: PIE1 = 0;
  3236  0496  018D               	clrf	13	;volatile
  3237                           
  3238                           ;main.c: 451: PIE2 = 0;
  3239  0497  1703               	bsf	3,6	;RP1=1, select bank2
  3240  0498  0188               	clrf	8	;volatile
  3241                           
  3242                           ;main.c: 452: PIR1 = 0;
  3243  0499  1303               	bcf	3,6	;RP1=0, select bank0
  3244  049A  018C               	clrf	12	;volatile
  3245                           
  3246                           ;main.c: 453: PIR2 = 0;
  3247  049B  1703               	bsf	3,6	;RP1=1, select bank2
  3248  049C  0187               	clrf	7	;volatile
  3249                           
  3250                           ;main.c: 454: T2CON = 0;
  3251  049D  1303               	bcf	3,6	;RP1=0, select bank0
  3252  049E  0192               	clrf	18	;volatile
  3253                           
  3254                           ;main.c: 455: ADCON1 = 0;
  3255  049F  1683               	bsf	3,5	;RP0=1, select bank1
  3256  04A0  019C               	clrf	28	;volatile
  3257                           
  3258                           ;main.c: 456: SWDTEN = 0;
  3259  04A1  1088               	bcf	8,1	;volatile
  3260  04A2  0064               	clrwdt	;# 
  3261                           
  3262                           ;main.c: 459: ADCON0 = 0;
  3263  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  3264  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  3265  04A5  019D               	clrf	29	;volatile
  3266                           
  3267                           ;main.c: 462: TRISA = 0x22;
  3268  04A6  3022               	movlw	34
  3269                           
  3270                           ;main.c: 463: PORTA = 0;
  3271                           
  3272                           ;main.c: 464: TRISB = 0x18;
  3273  04A7  27D2  118A         	fcall	PL18	;call to abstracted procedure
  3274                           
  3275                           ;main.c: 465: TRISC = 0x00;
  3276  04A9  1703               	bsf	3,6	;RP1=1, select bank3
  3277  04AA  0186               	clrf	6	;volatile
  3278                           
  3279                           ;main.c: 466: PORTC = 0x01;
  3280  04AB  3001               	movlw	1
  3281  04AC  0085               	movwf	5	;volatile
  3282                           
  3283                           ;main.c: 467: PORTB = 0x80;
  3284  04AD  3080               	movlw	128
  3285  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  3286  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  3287  04B0  0086               	movwf	6	;volatile
  3288                           
  3289                           ;main.c: 468: RACIF = 0;
  3290  04B1  1703               	bsf	3,6	;RP1=1, select bank2
  3291  04B2  1087               	bcf	7,1	;volatile
  3292                           
  3293                           ;main.c: 469: IOCA = 0x20;
  3294  04B3  3020               	movlw	32
  3295  04B4  1683               	bsf	3,5	;RP0=1, select bank3
  3296  04B5  0088               	movwf	8	;volatile
  3297                           
  3298                           ;main.c: 470: RACIE = 1;
  3299  04B6  1283               	bcf	3,5	;RP0=0, select bank2
  3300  04B7  1488               	bsf	8,1	;volatile
  3301                           
  3302                           ;main.c: 471: PORTA;
  3303  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  3304  04B9  0805               	movf	5,w	;volatile
  3305                           
  3306                           ;main.c: 483: SystemEnterSleep();
  3307  04BA  24D2  118A         	fcall	_SystemEnterSleep
  3308  04BC  0000               	nop	;# 
  3309  04BD  0000               	nop	;# 
  3310  04BE  0000               	nop	;# 
  3311  04BF  0000               	nop	;# 
  3312  04C0  0000               	nop	;# 
  3313  04C1  0000               	nop	;# 
  3314                           
  3315                           ;main.c: 485: if(RACIF)
  3316  04C2  1283               	bcf	3,5	;RP0=0, select bank2
  3317  04C3  1703               	bsf	3,6	;RP1=1, select bank2
  3318  04C4  1C87               	btfss	7,1	;volatile
  3319  04C5  2CC9               	goto	l3698
  3320                           
  3321                           ;main.c: 486: {
  3322                           ;main.c: 487: RACIF = 0;
  3323  04C6  1087               	bcf	7,1	;volatile
  3324                           
  3325                           ;main.c: 488: PORTA;
  3326  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3327  04C8  0805               	movf	5,w	;volatile
  3328  04C9                     l3698:	
  3329                           
  3330                           ;main.c: 489: }
  3331                           ;main.c: 490: if(RCCIF)
  3332  04C9  1703               	bsf	3,6	;RP1=1, select bank2
  3333  04CA  1D07               	btfss	7,2	;volatile
  3334  04CB  2CCF               	goto	l3704
  3335                           
  3336                           ;main.c: 491: {
  3337                           ;main.c: 492: RCCIF = 0;
  3338  04CC  1107               	bcf	7,2	;volatile
  3339                           
  3340                           ;main.c: 493: PORTC;
  3341  04CD  1683               	bsf	3,5	;RP0=1, select bank3
  3342  04CE  0805               	movf	5,w	;volatile
  3343  04CF                     l3704:	
  3344                           
  3345                           ;main.c: 494: }
  3346                           ;main.c: 496: Refurbish_Sfr();
  3347  04CF  2611  118A         	fcall	_Refurbish_Sfr
  3348                           
  3349                           ;main.c: 497: Init_System();
  3350  04D1  2E45               	ljmp	l3434
  3351  04D2                     __end_of_WorkSleep:	
  3352  04D2                     __ptext18:	
  3353 ;; *************** function _SystemEnterSleep *****************
  3354 ;; Defined at:
  3355 ;;		line 578 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  wake            2    4[BANK0 ] unsigned int 
  3360 ;;  KeyResTemp      2    2[BANK0 ] unsigned int 
  3361 ;;  KeyValue        2    0[BANK0 ] unsigned int 
  3362 ;;  cnt             1    6[BANK0 ] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 300/0
  3369 ;;		On exit  : B00/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3372 ;;      Params:         0       0       0       0       0
  3373 ;;      Locals:         0       7       0       0       0
  3374 ;;      Temps:          2       0       0       0       0
  3375 ;;      Totals:         2       7       0       0       0
  3376 ;;Total ram usage:        9 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    3
  3379 ;; This function calls:
  3380 ;;		_ClearResSum
  3381 ;;		_GetTouchKeyValue
  3382 ;;		_KeyClearOne
  3383 ;; This function is called by:
  3384 ;;		_WorkSleep
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           
  3389                           ;psect for function _SystemEnterSleep
  3390  04D2                     _SystemEnterSleep:	
  3391  04D2                     l1691:	
  3392                           ;incstack = 0
  3393                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3394                           ;CheckTouchKey.c: 587: {
  3395                           ;CheckTouchKey.c: 588: while(1)
  3396                           
  3397  04D2  0064               	clrwdt	;# 
  3398                           
  3399                           ;CheckTouchKey.c: 593: TMR0 = 0;
  3400  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3401  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3402  04D5  0181               	clrf	1	;volatile
  3403                           
  3404                           ;CheckTouchKey.c: 594: OPTION_REG |= 0x07;
  3405  04D6  3007               	movlw	7
  3406  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  3407  04D8  0481               	iorwf	1,f	;volatile
  3408                           
  3409                           ;CheckTouchKey.c: 596: OPTION_REG |= 0x08;
  3410  04D9  1581               	bsf	1,3	;volatile
  3411  04DA  0064               	clrwdt	;# 
  3412  04DB  300A               	movlw	10
  3413  04DC  1683               	bsf	3,5	;RP0=1, select bank1
  3414  04DD  1303               	bcf	3,6	;RP1=0, select bank1
  3415  04DE  0081               	movwf	1	;volatile
  3416  04DF  0064               	clrwdt	;# 
  3417                           
  3418                           ;CheckTouchKey.c: 602: KEYCON0 = 0;
  3419  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  3420  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  3421  04E2  0192               	clrf	18	;volatile
  3422                           
  3423                           ;CheckTouchKey.c: 603: KEYCON2 = 0;
  3424  04E3  0197               	clrf	23	;volatile
  3425                           
  3426                           ;CheckTouchKey.c: 605: OSCCON = 0x1;
  3427  04E4  3001               	movlw	1
  3428  04E5  0088               	movwf	8	;volatile
  3429  04E6  0063               	sleep	;# 
  3430  04E7  0000               	nop	;# 
  3431  04E8  0064               	clrwdt	;# 
  3432                           
  3433                           ;CheckTouchKey.c: 609: OSCCON = 0x71;
  3434  04E9  3071               	movlw	113
  3435  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  3436  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  3437  04EC  0088               	movwf	8	;volatile
  3438                           
  3439                           ;CheckTouchKey.c: 613: ClearResSum();
  3440  04ED  2561  118A         	fcall	_ClearResSum
  3441                           
  3442                           ;CheckTouchKey.c: 614: b_ksleep = 1;
  3443  04EF  147A               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3444                           
  3445                           ;CheckTouchKey.c: 615: GetTouchKeyValue();
  3446  04F0  2585  118A         	fcall	_GetTouchKeyValue
  3447                           
  3448                           ;CheckTouchKey.c: 617: cnt = 0;
  3449  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  3450  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  3451                           
  3452                           ;CheckTouchKey.c: 618: wake = 1;
  3453  04F4  27EB  118A         	fcall	PL26	;call to abstracted procedure
  3454                           
  3455                           ;CheckTouchKey.c: 619: if( RBIF || RCCIF || RACIF)
  3456  04F6  180B               	btfsc	11,0	;volatile
  3457  04F7  2CFD               	goto	l3538
  3458  04F8  1703               	bsf	3,6	;RP1=1, select bank2
  3459  04F9  1907               	btfsc	7,2	;volatile
  3460  04FA  2CFD               	goto	l3538
  3461  04FB  1C87               	btfss	7,1	;volatile
  3462  04FC  2D04               	goto	l3550
  3463  04FD                     l3538:	
  3464                           
  3465                           ;CheckTouchKey.c: 620: {
  3466                           ;CheckTouchKey.c: 621: ClearResSum();
  3467  04FD  2561               	fcall	_ClearResSum
  3468                           
  3469                           ;CheckTouchKey.c: 622: KeyCounter = 0;
  3470  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3471  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0500  01C4               	clrf	_KeyCounter
  3473                           
  3474                           ;CheckTouchKey.c: 623: b_kover = 0;
  3475  0501  127A               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3476                           
  3477                           ;CheckTouchKey.c: 624: b_kover1 = 0;
  3478  0502  11FA               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3479  0503  0008               	return
  3480  0504                     l3550:	
  3481  0504  1303               	bcf	3,6	;RP1=0, select bank0
  3482  0505  086A               	movf	SystemEnterSleep@wake,w
  3483  0506  3907               	andlw	7
  3484                           
  3485                           ;CheckTouchKey.c: 631: {
  3486                           ;CheckTouchKey.c: 633: KeyValue = KeyResTemp = KeyResSum[cnt];
  3487  0507  1003               	clrc
  3488  0508  1903               	btfsc	3,2
  3489  0509  2D5B               	goto	L16
  3490  050A  0D6C               	rlf	SystemEnterSleep@cnt,w
  3491  050B  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3492  050C  0084               	movwf	4
  3493  050D  1383               	bcf	3,7	;select IRP bank1
  3494  050E  0800               	movf	0,w
  3495  050F  00E8               	movwf	SystemEnterSleep@KeyResTemp
  3496  0510  0A84               	incf	4,f
  3497  0511  0800               	movf	0,w
  3498  0512  00E9               	movwf	SystemEnterSleep@KeyResTemp+1
  3499  0513  00E7               	movwf	SystemEnterSleep@KeyValue+1
  3500  0514  0868               	movf	SystemEnterSleep@KeyResTemp,w
  3501  0515  00E6               	movwf	SystemEnterSleep@KeyValue
  3502                           
  3503                           ;CheckTouchKey.c: 634: if(KeyResTemp)
  3504  0516  0868               	movf	SystemEnterSleep@KeyResTemp,w
  3505  0517  0469               	iorwf	SystemEnterSleep@KeyResTemp+1,w
  3506  0518  1903               	btfsc	3,2
  3507  0519  2D5A               	goto	l3584
  3508                           
  3509                           ;CheckTouchKey.c: 635: {
  3510                           ;CheckTouchKey.c: 636: KeyValue += Table_KeyDown[cnt];
  3511  051A  086C               	movf	SystemEnterSleep@cnt,w
  3512  051B  3E17               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3513  051C  0084               	movwf	4
  3514  051D  158A  2000  118A   	fcall	stringdir
  3515  0520  07E6               	addwf	SystemEnterSleep@KeyValue,f
  3516  0521  1803               	skipnc
  3517  0522  0AE7               	incf	SystemEnterSleep@KeyValue+1,f
  3518                           
  3519                           ;CheckTouchKey.c: 638: if(KeyOldValue2[cnt] >= KeyValue)
  3520  0523  1003               	clrc
  3521  0524  0D6C               	rlf	SystemEnterSleep@cnt,w
  3522  0525  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3523  0526  27BD  118A         	fcall	PL12	;call to abstracted procedure
  3524  0528  0867               	movf	SystemEnterSleep@KeyValue+1,w
  3525  0529  0279               	subwf	??_SystemEnterSleep+1,w
  3526  052A  1D03               	skipz
  3527  052B  2D2E               	goto	u2315
  3528  052C  0866               	movf	SystemEnterSleep@KeyValue,w
  3529  052D  0278               	subwf	??_SystemEnterSleep,w
  3530  052E                     u2315:	
  3531  052E  1C03               	skipc
  3532  052F  2D42               	goto	L15
  3533                           
  3534                           ;CheckTouchKey.c: 639: {
  3535                           ;CheckTouchKey.c: 640: cnt = 0;
  3536                           
  3537                           ;CheckTouchKey.c: 641: wake = 1;
  3538  0530  27EB  118A         	fcall	PL26	;call to abstracted procedure
  3539  0532                     l3564:	
  3540  0532  086A               	movf	SystemEnterSleep@wake,w
  3541  0533  3907               	andlw	7
  3542  0534  1D03               	btfss	3,2
  3543  0535  2D39               	goto	l3568
  3544                           
  3545                           ;CheckTouchKey.c: 645: {
  3546                           ;CheckTouchKey.c: 646: KeyClearOne(cnt);
  3547  0536  086C               	movf	SystemEnterSleep@cnt,w
  3548  0537  2570  118A         	fcall	_KeyClearOne
  3549  0539                     l3568:	
  3550                           
  3551                           ;CheckTouchKey.c: 647: }
  3552                           ;CheckTouchKey.c: 648: wake <<= 1;
  3553  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3554  053A  3003               	movlw	3
  3555  053B  1303               	bcf	3,6	;RP1=0, select bank0
  3556  053C  1003               	clrc
  3557  053D  27F0  118A         	fcall	PL28	;call to abstracted procedure
  3558  053F  1803               	btfsc	3,0
  3559  0540  2CFD               	goto	l3538
  3560  0541  2D32               	goto	l3564
  3561  0542                     L15:	
  3562                           ;CheckTouchKey.c: 656: }
  3563                           ;CheckTouchKey.c: 658: KeyOldValue2[cnt] = KeyOldValue1[cnt];
  3564                           
  3565  0542  0D6C               	rlf	SystemEnterSleep@cnt,w
  3566  0543  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3567  0544  27BD  118A         	fcall	PL12	;call to abstracted procedure
  3568  0546  1003               	clrc
  3569  0547  0D6C               	rlf	SystemEnterSleep@cnt,w
  3570  0548  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3571                           
  3572                           ;CheckTouchKey.c: 659: KeyOldValue1[cnt] = KeyOldValue0[cnt];
  3573  0549  27B2  118A         	fcall	PL10	;call to abstracted procedure
  3574  054B  0800               	movf	0,w
  3575  054C  00F8               	movwf	??_SystemEnterSleep
  3576  054D  0A84               	incf	4,f
  3577  054E  0800               	movf	0,w
  3578  054F  00F9               	movwf	??_SystemEnterSleep+1
  3579  0550  1003               	clrc
  3580  0551  0D6C               	rlf	SystemEnterSleep@cnt,w
  3581  0552  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3582                           
  3583                           ;CheckTouchKey.c: 660: KeyOldValue0[cnt] = KeyResTemp;
  3584  0553  27B2  118A         	fcall	PL10	;call to abstracted procedure
  3585  0555  0868               	movf	SystemEnterSleep@KeyResTemp,w
  3586  0556  0080               	movwf	0
  3587  0557  0A84               	incf	4,f
  3588  0558  0869               	movf	SystemEnterSleep@KeyResTemp+1,w
  3589  0559  0080               	movwf	0
  3590  055A                     l3584:	
  3591                           
  3592                           ;CheckTouchKey.c: 661: }
  3593                           ;CheckTouchKey.c: 662: }
  3594                           ;CheckTouchKey.c: 663: wake <<= 1;
  3595  055A  1003               	clrc
  3596  055B                     L16:	
  3597  055B  3003               	movlw	3
  3598  055C  27F0  118A         	fcall	PL28	;call to abstracted procedure
  3599  055E  1803               	btfsc	3,0
  3600  055F  2CD2               	goto	l1691
  3601  0560  2D04               	goto	l3550
  3602  0561                     __end_of_SystemEnterSleep:	
  3603  0561                     __ptext31:	
  3604 ;; *************** function _ClearResSum *****************
  3605 ;; Defined at:
  3606 ;;		line 142 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  cnt             1    2[COMMON] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/100
  3617 ;;		On exit  : 800/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3620 ;;      Params:         0       0       0       0       0
  3621 ;;      Locals:         1       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0
  3623 ;;      Totals:         1       0       0       0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    1
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_GetTouchKeyValue
  3631 ;;		_CheckTouchKey
  3632 ;;		_SystemEnterSleep
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function _ClearResSum
  3638  0561                     _ClearResSum:	
  3639  0561                     l3356:	
  3640                           ;incstack = 0
  3641                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3642                           
  3643                           
  3644                           ;CheckTouchKey.c: 144: unsigned char cnt = 0;
  3645  0561  01F2               	clrf	ClearResSum@cnt
  3646  0562                     l3358:	
  3647                           
  3648                           ;CheckTouchKey.c: 146: {
  3649                           ;CheckTouchKey.c: 147: KeyResSum[cnt] = 0;
  3650  0562  1003               	clrc
  3651  0563  0D72               	rlf	ClearResSum@cnt,w
  3652  0564  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3653  0565  0084               	movwf	4
  3654  0566  3003               	movlw	3
  3655  0567  1383               	bcf	3,7	;select IRP bank1
  3656  0568  0180               	clrf	0
  3657  0569  0A84               	incf	4,f
  3658  056A  0180               	clrf	0
  3659  056B  0AF2               	incf	ClearResSum@cnt,f
  3660  056C  0272               	subwf	ClearResSum@cnt,w
  3661  056D  1803               	btfsc	3,0
  3662  056E  0008               	return
  3663  056F  2D62               	goto	l3358
  3664  0570                     __end_of_ClearResSum:	
  3665  0570                     __ptext35:	
  3666 ;; *************** function _KeyClearOne *****************
  3667 ;; Defined at:
  3668 ;;		line 96 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;  cnt             1    wreg     unsigned char 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  cnt             1    2[COMMON] unsigned char 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 800/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3682 ;;      Params:         0       0       0       0       0
  3683 ;;      Locals:         1       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0
  3685 ;;      Totals:         1       0       0       0       0
  3686 ;;Total ram usage:        1 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    1
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_KeyClearIn
  3693 ;;		_KeyStopClear
  3694 ;;		_CheckOnceResult
  3695 ;;		_SystemEnterSleep
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _KeyClearOne
  3701  0570                     _KeyClearOne:	
  3702                           
  3703                           ;incstack = 0
  3704                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  3705                           ;KeyClearOne@cnt stored from wreg
  3706  0570  00F2               	movwf	KeyClearOne@cnt
  3707                           
  3708                           ;CheckTouchKey.c: 98: KeyOldValue0[cnt] = 0;
  3709  0571  1003               	clrc
  3710  0572  0D72               	rlf	KeyClearOne@cnt,w
  3711  0573  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  3712  0574  0084               	movwf	4
  3713  0575  1383               	bcf	3,7	;select IRP bank1
  3714                           
  3715                           ;CheckTouchKey.c: 99: KeyOldValue1[cnt] = 0;
  3716  0576  27CC  118A         	fcall	PL16	;call to abstracted procedure
  3717  0578  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3718  0579  0084               	movwf	4
  3719                           
  3720                           ;CheckTouchKey.c: 100: KeyOldValue2[cnt] = 0;
  3721  057A  27CC  118A         	fcall	PL16	;call to abstracted procedure
  3722  057C  3EA6               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3723  057D  0084               	movwf	4
  3724                           
  3725                           ;CheckTouchKey.c: 101: KeyReference[cnt] = 0;
  3726  057E  27CC               	fcall	PL16	;call to abstracted procedure
  3727  057F  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  3728  0580  0084               	movwf	4
  3729  0581  0180               	clrf	0
  3730  0582  0A84               	incf	4,f
  3731  0583  0180               	clrf	0
  3732  0584  0008               	return
  3733  0585                     __end_of_KeyClearOne:	
  3734  0585                     __ptext30:	
  3735 ;; *************** function _GetTouchKeyValue *****************
  3736 ;; Defined at:
  3737 ;;		line 196 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;		None
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  wake            2    5[COMMON] unsigned int 
  3742 ;;  temp            2    3[COMMON] unsigned int 
  3743 ;;  cnt             1    7[COMMON] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/100
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3753 ;;      Params:         0       0       0       0       0
  3754 ;;      Locals:         5       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0
  3756 ;;      Totals:         5       0       0       0       0
  3757 ;;Total ram usage:        5 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    2
  3760 ;; This function calls:
  3761 ;;		_ClearResSum
  3762 ;; This function is called by:
  3763 ;;		_CheckTouchKey
  3764 ;;		_SystemEnterSleep
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function _GetTouchKeyValue
  3770  0585                     _GetTouchKeyValue:	
  3771                           
  3772                           ;CheckTouchKey.c: 198: unsigned char cnt = 0;
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3776  0585  01F7               	clrf	GetTouchKeyValue@cnt
  3777                           
  3778                           ;CheckTouchKey.c: 199: unsigned int wake = 1;
  3779  0586  01F5               	clrf	GetTouchKeyValue@wake
  3780  0587  0AF5               	incf	GetTouchKeyValue@wake,f
  3781  0588  01F6               	clrf	GetTouchKeyValue@wake+1
  3782  0589                     l3398:	
  3783  0589  1C7A               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3784  058A  2D8F               	goto	l3402
  3785  058B  0875               	movf	GetTouchKeyValue@wake,w
  3786  058C  3907               	andlw	7
  3787  058D  1903               	btfsc	3,2
  3788  058E  2DDA               	goto	l3430
  3789  058F                     l3402:	
  3790                           
  3791                           ;CheckTouchKey.c: 204: {
  3792                           ;CheckTouchKey.c: 205: KEYCON0 = 0;
  3793  058F  1683               	bsf	3,5	;RP0=1, select bank1
  3794  0590  1303               	bcf	3,6	;RP1=0, select bank1
  3795  0591  0192               	clrf	18	;volatile
  3796                           
  3797                           ;CheckTouchKey.c: 206: KEYCON1 = 0;
  3798  0592  0193               	clrf	19	;volatile
  3799                           
  3800                           ;CheckTouchKey.c: 207: KEYCON2 = 0x01;
  3801  0593  3001               	movlw	1
  3802  0594  0097               	movwf	23	;volatile
  3803                           
  3804                           ;CheckTouchKey.c: 209: TRISB6 = 0;
  3805  0595  1306               	bcf	6,6	;volatile
  3806                           
  3807                           ;CheckTouchKey.c: 210: RB6 = 0;
  3808  0596  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0597  1306               	bcf	6,6	;volatile
  3810  0598  0000               	nop	;# 
  3811  0599  0000               	nop	;# 
  3812  059A  0000               	nop	;# 
  3813  059B  0000               	nop	;# 
  3814  059C  0000               	nop	;# 
  3815  059D  0000               	nop	;# 
  3816  059E  0000               	nop	;# 
  3817  059F  0000               	nop	;# 
  3818                           
  3819                           ;CheckTouchKey.c: 219: TRISB6 = 1;
  3820  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  3821  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  3822  05A2  1706               	bsf	6,6	;volatile
  3823                           
  3824                           ;CheckTouchKey.c: 221: KEYCON0 = Table_KeyCap[cnt];
  3825  05A3  0877               	movf	GetTouchKeyValue@cnt,w
  3826  05A4  3E1A               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3827  05A5  0084               	movwf	4
  3828  05A6  158A  2000  118A   	fcall	stringdir
  3829  05A9  0092               	movwf	18	;volatile
  3830                           
  3831                           ;CheckTouchKey.c: 222: KEYCON1 = Table_KeyChannel[cnt];
  3832  05AA  0877               	movf	GetTouchKeyValue@cnt,w
  3833  05AB  3E1D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3834  05AC  0084               	movwf	4
  3835  05AD  158A  2000  118A   	fcall	stringdir
  3836  05B0  0093               	movwf	19	;volatile
  3837  05B1  0000               	nop	;# 
  3838  05B2  0000               	nop	;# 
  3839  05B3  0000               	nop	;# 
  3840  05B4  0000               	nop	;# 
  3841                           
  3842                           ;CheckTouchKey.c: 227: KEYCON0 |= 0x1;
  3843  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  3844  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  3845  05B7  1412               	bsf	18,0	;volatile
  3846                           
  3847                           ;CheckTouchKey.c: 229: temp = 2000;
  3848  05B8  30D0               	movlw	208
  3849  05B9  00F3               	movwf	GetTouchKeyValue@temp
  3850  05BA  3007               	movlw	7
  3851  05BB  00F4               	movwf	GetTouchKeyValue@temp+1
  3852  05BC                     l1601:	
  3853                           ;CheckTouchKey.c: 230: while(!(KEYCON0&0x80))
  3854                           
  3855  05BC  1B92               	btfsc	18,7	;volatile
  3856  05BD  2DCA               	goto	l3428
  3857                           
  3858                           ;CheckTouchKey.c: 231: {
  3859                           ;CheckTouchKey.c: 232: if(0 == (--temp))
  3860  05BE  3001               	movlw	1
  3861  05BF  02F3               	subwf	GetTouchKeyValue@temp,f
  3862  05C0  1C03               	skipc
  3863  05C1  03F4               	decf	GetTouchKeyValue@temp+1,f
  3864  05C2  0873               	movf	GetTouchKeyValue@temp,w
  3865  05C3  0474               	iorwf	GetTouchKeyValue@temp+1,w
  3866  05C4  1D03               	btfss	3,2
  3867  05C5  2DBC               	goto	l1601
  3868                           
  3869                           ;CheckTouchKey.c: 233: {
  3870                           ;CheckTouchKey.c: 234: KeyCounter = 255;
  3871  05C6  30FF               	movlw	255
  3872  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  3873  05C8  00C4               	movwf	_KeyCounter
  3874                           
  3875                           ;CheckTouchKey.c: 235: ClearResSum();
  3876  05C9  2D61               	ljmp	l3356
  3877  05CA                     l3428:	
  3878                           
  3879                           ;CheckTouchKey.c: 237: }
  3880                           ;CheckTouchKey.c: 238: }
  3881                           ;CheckTouchKey.c: 240: KeyResSum[cnt] += (unsigned int)((KEYDATAH<<8) | KEYDATAL);
  3882  05CA  1003               	clrc
  3883  05CB  0D77               	rlf	GetTouchKeyValue@cnt,w
  3884  05CC  3EB2               	addlw	(low (_KeyResSum| 0))& (0+255)
  3885  05CD  0084               	movwf	4
  3886  05CE  0814               	movf	20,w	;volatile
  3887  05CF  1383               	bcf	3,7	;select IRP bank1
  3888  05D0  0780               	addwf	0,f
  3889  05D1  0F84               	incfsz	4,f
  3890  05D2  0800               	movf	0,w
  3891  05D3  1803               	skipnc
  3892  05D4  0A00               	incf	0,w
  3893  05D5  00FF               	movwf	127
  3894  05D6  0815               	movf	21,w	;volatile
  3895  05D7  077F               	addwf	127,w
  3896  05D8  0080               	movwf	0
  3897  05D9  0384               	decf	4,f
  3898  05DA                     l3430:	
  3899  05DA  3003               	movlw	3
  3900                           
  3901                           ;CheckTouchKey.c: 241: }
  3902                           ;CheckTouchKey.c: 242: wake <<= 1;
  3903  05DB  1003               	clrc
  3904  05DC  0DF5               	rlf	GetTouchKeyValue@wake,f
  3905  05DD  0DF6               	rlf	GetTouchKeyValue@wake+1,f
  3906  05DE  0AF7               	incf	GetTouchKeyValue@cnt,f
  3907  05DF  0277               	subwf	GetTouchKeyValue@cnt,w
  3908  05E0  1C03               	skipc
  3909  05E1  2D89               	goto	l3398
  3910                           
  3911                           ;CheckTouchKey.c: 244: b_ksleep = 0;
  3912  05E2  107A               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3913  05E3  0008               	return
  3914  05E4                     __end_of_GetTouchKeyValue:	
  3915  05E4                     __ptext27:	
  3916 ;; *************** function _TurnKeyFlags *****************
  3917 ;; Defined at:
  3918 ;;		line 416 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : B00/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3932 ;;      Params:         0       0       0       0       0
  3933 ;;      Locals:         0       0       0       0       0
  3934 ;;      Temps:          0       0       0       0       0
  3935 ;;      Totals:         0       0       0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    4
  3939 ;; This function calls:
  3940 ;;		_KeyClearIn
  3941 ;; This function is called by:
  3942 ;;		_CheckTouchKey
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _TurnKeyFlags
  3948  05E4                     _TurnKeyFlags:	
  3949                           
  3950                           ;CheckTouchKey.c: 418: static unsigned char KeyHaveTimes = 0;
  3951                           ;CheckTouchKey.c: 419: static unsigned char KeyNoTimes = 0;
  3952                           ;CheckTouchKey.c: 421: if(KeyData[0] | KeyData[1])
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3956  05E4  0827               	movf	_KeyData+1,w	;volatile
  3957  05E5  0426               	iorwf	_KeyData,w	;volatile
  3958  05E6  1903               	btfsc	3,2
  3959  05E7  2E04               	goto	l4012
  3960                           
  3961                           ;CheckTouchKey.c: 422: {
  3962                           ;CheckTouchKey.c: 423: KeyNoTimes = 0;
  3963  05E8  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  3964                           
  3965                           ;CheckTouchKey.c: 425: if(KeyData[0] == KeyOldData[0] && KeyData[1] == KeyOldData[1])
  3966  05E9  0826               	movf	_KeyData,w	;volatile
  3967  05EA  0628               	xorwf	_KeyOldData,w	;volatile
  3968  05EB  1D03               	skipz
  3969  05EC  2DFD               	goto	l1660
  3970  05ED  0827               	movf	_KeyData+1,w	;volatile
  3971  05EE  0629               	xorwf	_KeyOldData+1,w	;volatile
  3972  05EF  1D03               	skipz
  3973  05F0  2DFD               	goto	l1660
  3974  05F1  0AC1               	incf	TurnKeyFlags@KeyHaveTimes,f
  3975  05F2  1903               	btfsc	3,2
  3976  05F3  0008               	return
  3977                           
  3978                           ;CheckTouchKey.c: 428: {
  3979                           ;CheckTouchKey.c: 429: KeyHaveTimes = 0;
  3980  05F4  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  3981                           
  3982                           ;CheckTouchKey.c: 430: KeyFlag[0] = KeyData[0];
  3983  05F5  0826               	movf	_KeyData,w	;volatile
  3984  05F6  00BE               	movwf	_KeyFlag	;volatile
  3985                           
  3986                           ;CheckTouchKey.c: 431: KeyFlag[1] = KeyData[1];
  3987  05F7  0827               	movf	_KeyData+1,w	;volatile
  3988  05F8  00BF               	movwf	_KeyFlag+1	;volatile
  3989                           
  3990                           ;CheckTouchKey.c: 434: {
  3991                           ;CheckTouchKey.c: 435: if(!b_kclr)
  3992  05F9  197A               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3993  05FA  0008               	return
  3994                           
  3995                           ;CheckTouchKey.c: 436: {
  3996                           ;CheckTouchKey.c: 437: b_kclr = 1;
  3997  05FB  157A               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  3998                           
  3999                           ;CheckTouchKey.c: 438: KeyClearIn();
  4000  05FC  2E35               	ljmp	l3594
  4001  05FD                     l1660:	
  4002                           
  4003                           ;CheckTouchKey.c: 443: else
  4004                           ;CheckTouchKey.c: 444: {
  4005                           ;CheckTouchKey.c: 445: b_kclr = 0;
  4006  05FD  117A               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4007                           
  4008                           ;CheckTouchKey.c: 446: KeyOldData[0] = KeyData[0];
  4009  05FE  0826               	movf	_KeyData,w	;volatile
  4010  05FF  00A8               	movwf	_KeyOldData	;volatile
  4011                           
  4012                           ;CheckTouchKey.c: 447: KeyOldData[1] = KeyData[1];
  4013  0600  0827               	movf	_KeyData+1,w	;volatile
  4014  0601  00A9               	movwf	_KeyOldData+1	;volatile
  4015                           
  4016                           ;CheckTouchKey.c: 448: KeyHaveTimes = 0;
  4017  0602  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  4018                           
  4019                           ;CheckTouchKey.c: 449: }
  4020                           ;CheckTouchKey.c: 450: }
  4021  0603  0008               	return
  4022  0604                     l4012:	
  4023                           
  4024                           ;CheckTouchKey.c: 451: else
  4025                           ;CheckTouchKey.c: 452: {
  4026                           ;CheckTouchKey.c: 453: KeyHaveTimes = 0;
  4027  0604  01C1               	clrf	TurnKeyFlags@KeyHaveTimes
  4028                           
  4029                           ;CheckTouchKey.c: 454: KeyOldData[0] = 0;
  4030  0605  01A8               	clrf	_KeyOldData	;volatile
  4031                           
  4032                           ;CheckTouchKey.c: 455: KeyOldData[1] = 0;
  4033  0606  01A9               	clrf	_KeyOldData+1	;volatile
  4034                           
  4035                           ;CheckTouchKey.c: 457: if(++KeyNoTimes >=2)
  4036  0607  3002               	movlw	2
  4037  0608  0AC0               	incf	TurnKeyFlags@KeyNoTimes,f
  4038  0609  0240               	subwf	TurnKeyFlags@KeyNoTimes,w
  4039  060A  1C03               	skipc
  4040  060B  0008               	return
  4041                           
  4042                           ;CheckTouchKey.c: 458: {
  4043                           ;CheckTouchKey.c: 459: KeyNoTimes = 0;
  4044  060C  01C0               	clrf	TurnKeyFlags@KeyNoTimes
  4045                           
  4046                           ;CheckTouchKey.c: 460: KeyFlag[0] = 0;
  4047  060D  01BE               	clrf	_KeyFlag	;volatile
  4048                           
  4049                           ;CheckTouchKey.c: 461: KeyFlag[1] = 0;
  4050  060E  01BF               	clrf	_KeyFlag+1	;volatile
  4051                           
  4052                           ;CheckTouchKey.c: 463: b_kclr = 0;
  4053  060F  117A               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4054  0610  0008               	return
  4055  0611                     __end_of_TurnKeyFlags:	
  4056  0611                     __ptext19:	
  4057 ;; *************** function _Refurbish_Sfr *****************
  4058 ;; Defined at:
  4059 ;;		line 122 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/100
  4070 ;;		On exit  : 300/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4073 ;;      Params:         0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0
  4076 ;;      Totals:         0       0       0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    1
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_WorkSleep
  4084 ;;		_main
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _Refurbish_Sfr
  4090  0611                     _Refurbish_Sfr:	
  4091                           
  4092                           ;main.c: 124: PIE1 = 2;
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4096  0611  3002               	movlw	2
  4097  0612  1283               	bcf	3,5	;RP0=0, select bank0
  4098                           
  4099                           ;main.c: 125: PR2 = 250;
  4100  0613  27DF  118A         	fcall	PL22	;call to abstracted procedure
  4101                           
  4102                           ;main.c: 126: INTCON = 0XC0;
  4103  0615  30C0               	movlw	192
  4104  0616  008B               	movwf	11	;volatile
  4105                           
  4106                           ;main.c: 127: if (4 != T2CON)
  4107  0617  3004               	movlw	4
  4108  0618  1283               	bcf	3,5	;RP0=0, select bank0
  4109  0619  0612               	xorwf	18,w	;volatile
  4110  061A  1903               	btfsc	3,2
  4111  061B  0008               	return
  4112                           
  4113                           ;main.c: 128: T2CON = 4;
  4114  061C  3004               	movlw	4
  4115  061D  0092               	movwf	18	;volatile
  4116  061E  0008               	return
  4117  061F                     __end_of_Refurbish_Sfr:	
  4118  061F                     __ptext32:	
  4119 ;; *************** function _CheckValidTime *****************
  4120 ;; Defined at:
  4121 ;;		line 501 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 300/100
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4135 ;;      Params:         0       0       0       0       0
  4136 ;;      Locals:         0       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0
  4138 ;;      Totals:         0       0       0       0       0
  4139 ;;Total ram usage:        0 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    1
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_CheckTouchKey
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _CheckValidTime
  4151  061F                     _CheckValidTime:	
  4152  061F                     l4020:	
  4153                           ;incstack = 0
  4154                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4155                           
  4156                           
  4157                           ;CheckTouchKey.c: 506: {
  4158                           ;CheckTouchKey.c: 507: if(KeyFlag[0] | KeyFlag[1])
  4159  061F  1283               	bcf	3,5	;RP0=0, select bank0
  4160  0620  1303               	bcf	3,6	;RP1=0, select bank0
  4161  0621  083F               	movf	_KeyFlag+1,w	;volatile
  4162  0622  043E               	iorwf	_KeyFlag,w	;volatile
  4163  0623  1903               	btfsc	3,2
  4164  0624  2E31               	goto	l4026
  4165  0625  1683               	bsf	3,5	;RP0=1, select bank1
  4166  0626  0ABB               	incf	CheckValidTime@validtime^(0+128),f
  4167  0627  1903               	skipnz
  4168  0628  0ABC               	incf	(CheckValidTime@validtime+1)^(0+128),f
  4169  0629  303A               	movlw	58
  4170  062A  023C               	subwf	(CheckValidTime@validtime+1)^(0+128),w
  4171  062B  3098               	movlw	152
  4172  062C  1903               	skipnz
  4173  062D  023B               	subwf	CheckValidTime@validtime^(0+128),w
  4174  062E  1C03               	skipc
  4175  062F  0008               	return
  4176                           
  4177                           ;CheckTouchKey.c: 510: {
  4178                           ;CheckTouchKey.c: 511: b_kerr = 1;
  4179  0630  14FA               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4180  0631                     l4026:	
  4181                           
  4182                           ;CheckTouchKey.c: 512: validtime = 0;
  4183  0631  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0632  01BB               	clrf	CheckValidTime@validtime^(0+128)
  4185  0633  01BC               	clrf	(CheckValidTime@validtime+1)^(0+128)
  4186  0634  0008               	return
  4187  0635                     __end_of_CheckValidTime:	
  4188  0635                     __ptext28:	
  4189 ;; *************** function _KeyClearIn *****************
  4190 ;; Defined at:
  4191 ;;		line 104 in file "D:\ToolsDesign\Software\SCMCU\SCMCU_IDE\ASource\SCTouch_lib\Normal\XC8\SC58A11\CheckTouchKey.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  cnt             1    4[COMMON] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : B00/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4205 ;;      Params:         0       0       0       0       0
  4206 ;;      Locals:         1       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0
  4208 ;;      Totals:         1       0       0       0       0
  4209 ;;Total ram usage:        1 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    3
  4212 ;; This function calls:
  4213 ;;		_KeyClearOne
  4214 ;;		_KeyIsIn
  4215 ;; This function is called by:
  4216 ;;		_TurnKeyFlags
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           
  4221                           ;psect for function _KeyClearIn
  4222  0635                     _KeyClearIn:	
  4223  0635                     l3594:	
  4224                           ;incstack = 0
  4225                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4226                           
  4227                           
  4228                           ;CheckTouchKey.c: 106: unsigned char cnt;
  4229                           ;CheckTouchKey.c: 107: for(cnt=0;cnt < KeyTotalNumber;cnt++)
  4230  0635  01F4               	clrf	KeyClearIn@cnt
  4231  0636                     l3600:	
  4232                           
  4233                           ;CheckTouchKey.c: 108: {
  4234                           ;CheckTouchKey.c: 109: if(!KeyIsIn(cnt))
  4235  0636  0874               	movf	KeyClearIn@cnt,w
  4236  0637  21EF  118A         	fcall	_KeyIsIn
  4237  0639  3A00               	xorlw	0
  4238  063A  1D03               	skipz
  4239  063B  2E3F               	goto	l3604
  4240                           
  4241                           ;CheckTouchKey.c: 110: {
  4242                           ;CheckTouchKey.c: 111: KeyClearOne(cnt);
  4243  063C  0874               	movf	KeyClearIn@cnt,w
  4244  063D  2570  118A         	fcall	_KeyClearOne
  4245  063F                     l3604:	
  4246  063F  3003               	movlw	3
  4247  0640  0AF4               	incf	KeyClearIn@cnt,f
  4248  0641  0274               	subwf	KeyClearIn@cnt,w
  4249  0642  1803               	btfsc	3,0
  4250  0643  0008               	return
  4251  0644  2E36               	goto	l3600
  4252  0645                     __end_of_KeyClearIn:	
  4253  0645                     __ptext20:	
  4254 ;; *************** function _Init_System *****************
  4255 ;; Defined at:
  4256 ;;		line 81 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2
  4265 ;; Tracked objects:
  4266 ;;		On entry : 300/0
  4267 ;;		On exit  : 300/100
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4270 ;;      Params:         0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    1
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_WorkSleep
  4281 ;;		_main
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function _Init_System
  4287  0645                     _Init_System:	
  4288  0645                     l3434:	
  4289                           ;incstack = 0
  4290                           ; Regs used in _Init_System: [wreg+status,2]
  4291                           
  4292  0645  0000               	nop	;# 
  4293  0646  0064               	clrwdt	;# 
  4294                           
  4295                           ;main.c: 85: INTCON = 0;
  4296  0647  018B               	clrf	11	;volatile
  4297                           
  4298                           ;main.c: 86: OSCCON = 0X71;
  4299  0648  3071               	movlw	113
  4300  0649  1683               	bsf	3,5	;RP0=1, select bank1
  4301  064A  1303               	bcf	3,6	;RP1=0, select bank1
  4302  064B  0088               	movwf	8	;volatile
  4303                           
  4304                           ;main.c: 87: OPTION_REG = 0;
  4305  064C  0181               	clrf	1	;volatile
  4306                           
  4307                           ;main.c: 88: SWDTEN = 1;
  4308  064D  1488               	bsf	8,1	;volatile
  4309  064E  0064               	clrwdt	;# 
  4310                           
  4311                           ;main.c: 93: TRISA = 0x22;
  4312  064F  3022               	movlw	34
  4313  0650  1683               	bsf	3,5	;RP0=1, select bank1
  4314  0651  1303               	bcf	3,6	;RP1=0, select bank1
  4315                           
  4316                           ;main.c: 94: PORTA = 0;
  4317                           
  4318                           ;main.c: 95: TRISB = 0x18;
  4319  0652  27D2  118A         	fcall	PL18	;call to abstracted procedure
  4320                           
  4321                           ;main.c: 96: PORTB = 0;
  4322  0654  1283               	bcf	3,5	;RP0=0, select bank0
  4323  0655  0186               	clrf	6	;volatile
  4324                           
  4325                           ;main.c: 97: WPUB = 0x00;
  4326  0656  0188               	clrf	8	;volatile
  4327                           
  4328                           ;main.c: 98: TRISC = 0;
  4329  0657  1683               	bsf	3,5	;RP0=1, select bank3
  4330  0658  1703               	bsf	3,6	;RP1=1, select bank3
  4331  0659  0186               	clrf	6	;volatile
  4332                           
  4333                           ;main.c: 99: PORTC = 0;
  4334  065A  0185               	clrf	5	;volatile
  4335                           
  4336                           ;main.c: 100: WPUC = 0x00;
  4337  065B  1283               	bcf	3,5	;RP0=0, select bank2
  4338  065C  0195               	clrf	21	;volatile
  4339                           
  4340                           ;main.c: 101: ANSEL0 = 0x01;
  4341  065D  3001               	movlw	1
  4342  065E  0090               	movwf	16	;volatile
  4343                           
  4344                           ;main.c: 102: ANSEL1 = 0x06;
  4345  065F  3006               	movlw	6
  4346  0660  0091               	movwf	17	;volatile
  4347                           
  4348                           ;main.c: 103: ANSEL2 = 0x01;
  4349  0661  3001               	movlw	1
  4350  0662  0092               	movwf	18	;volatile
  4351                           
  4352                           ;main.c: 105: PIE1 = 2;
  4353  0663  3002               	movlw	2
  4354                           
  4355                           ;main.c: 106: PR2 = 250;
  4356  0664  27DF               	fcall	PL22	;call to abstracted procedure
  4357                           
  4358                           ;main.c: 107: T2CON = 4;
  4359  0665  3004               	movlw	4
  4360  0666  1283               	bcf	3,5	;RP0=0, select bank0
  4361  0667  0092               	movwf	18	;volatile
  4362                           
  4363                           ;main.c: 109: INTCON = 0XC0;
  4364  0668  30C0               	movlw	192
  4365  0669  008B               	movwf	11	;volatile
  4366                           
  4367                           ;main.c: 110: ADCON0 = 0XC1;
  4368  066A  30C1               	movlw	193
  4369  066B  1683               	bsf	3,5	;RP0=1, select bank1
  4370  066C  009D               	movwf	29	;volatile
  4371                           
  4372                           ;main.c: 111: ADON = 1;
  4373  066D  141D               	bsf	29,0	;volatile
  4374  066E  0008               	return
  4375  066F                     __end_of_Init_System:	
  4376  066F                     __ptext12:	
  4377 ;; *************** function _TM1650_STOP *****************
  4378 ;; Defined at:
  4379 ;;		line 516 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;		None
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		None
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/300
  4390 ;;		On exit  : 300/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4393 ;;      Params:         0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0
  4396 ;;      Totals:         0       0       0       0       0
  4397 ;;Total ram usage:        0 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    1
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_tm1650cmd
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _TM1650_STOP
  4409  066F                     _TM1650_STOP:	
  4410  066F                     l3364:	
  4411                           ;incstack = 0
  4412                           ; Regs used in _TM1650_STOP: []
  4413                           
  4414                           
  4415                           ;main.c: 518: RB7=0;
  4416  066F  1283               	bcf	3,5	;RP0=0, select bank0
  4417  0670  1303               	bcf	3,6	;RP1=0, select bank0
  4418  0671  1386               	bcf	6,7	;volatile
  4419  0672  0000               	nop	;# 
  4420  0673  0000               	nop	;# 
  4421  0674  0000               	nop	;# 
  4422  0675  0000               	nop	;# 
  4423  0676  0000               	nop	;# 
  4424  0677  0000               	nop	;# 
  4425                           
  4426                           ;main.c: 520: RC0=1;
  4427  0678  1683               	bsf	3,5	;RP0=1, select bank3
  4428  0679  1703               	bsf	3,6	;RP1=1, select bank3
  4429  067A  1405               	bsf	5,0	;volatile
  4430  067B  0000               	nop	;# 
  4431  067C  0000               	nop	;# 
  4432  067D  0000               	nop	;# 
  4433  067E  0000               	nop	;# 
  4434  067F  0000               	nop	;# 
  4435  0680  0000               	nop	;# 
  4436                           
  4437                           ;main.c: 522: RB7=1;
  4438  0681  1283               	bcf	3,5	;RP0=0, select bank0
  4439  0682  1303               	bcf	3,6	;RP1=0, select bank0
  4440  0683  1786               	bsf	6,7	;volatile
  4441  0684  0000               	nop	;# 
  4442  0685  0000               	nop	;# 
  4443  0686  0000               	nop	;# 
  4444  0687  0000               	nop	;# 
  4445  0688  0000               	nop	;# 
  4446  0689  0000               	nop	;# 
  4447                           
  4448                           ;main.c: 524: RC0=0;
  4449  068A  1683               	bsf	3,5	;RP0=1, select bank3
  4450  068B  1703               	bsf	3,6	;RP1=1, select bank3
  4451  068C  1005               	bcf	5,0	;volatile
  4452                           
  4453                           ;main.c: 525: RB7=0;
  4454  068D  1283               	bcf	3,5	;RP0=0, select bank0
  4455  068E  1303               	bcf	3,6	;RP1=0, select bank0
  4456  068F  1386               	bcf	6,7	;volatile
  4457  0690  0008               	return
  4458  0691                     __end_of_TM1650_STOP:	
  4459  0691                     __ptext9:	
  4460 ;; *************** function _initTM1650 *****************
  4461 ;; Defined at:
  4462 ;;		line 641 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 200/100
  4473 ;;		On exit  : 300/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4476 ;;      Params:         0       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0
  4478 ;;      Temps:          0       0       0       0       0
  4479 ;;      Totals:         0       0       0       0       0
  4480 ;;Total ram usage:        0 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    3
  4483 ;; This function calls:
  4484 ;;		_tm1650cmd
  4485 ;; This function is called by:
  4486 ;;		_showCtr
  4487 ;;		_main
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           
  4492                           ;psect for function _initTM1650
  4493  0691                     _initTM1650:	
  4494  0691                     l3708:	
  4495                           ;incstack = 0
  4496                           ; Regs used in _initTM1650: [wreg+status,2+status,0+pclath+cstack]
  4497                           
  4498                           
  4499                           ;main.c: 643: tm1650cmd(0X48,0x11);
  4500  0691  3011               	movlw	17
  4501  0692  00F4               	movwf	tm1650cmd@seg_data
  4502  0693  3048               	movlw	72
  4503  0694  23B8  118A         	fcall	_tm1650cmd
  4504  0696  0000               	nop	;# 
  4505  0697  0000               	nop	;# 
  4506  0698  0000               	nop	;# 
  4507  0699  0000               	nop	;# 
  4508  069A  0000               	nop	;# 
  4509  069B  0000               	nop	;# 
  4510                           
  4511                           ;main.c: 645: tm1650cmd(0X68,0xFF);
  4512  069C  30FF               	movlw	255
  4513  069D  00F4               	movwf	tm1650cmd@seg_data
  4514  069E  3068               	movlw	104
  4515  069F  23B8  118A         	fcall	_tm1650cmd
  4516  06A1  0000               	nop	;# 
  4517  06A2  0000               	nop	;# 
  4518  06A3  0000               	nop	;# 
  4519  06A4  0000               	nop	;# 
  4520  06A5  0000               	nop	;# 
  4521  06A6  0000               	nop	;# 
  4522                           
  4523                           ;main.c: 647: tm1650cmd(0X6A,0xFF);
  4524  06A7  30FF               	movlw	255
  4525  06A8  00F4               	movwf	tm1650cmd@seg_data
  4526  06A9  306A               	movlw	106
  4527  06AA  23B8  118A         	fcall	_tm1650cmd
  4528  06AC  0000               	nop	;# 
  4529  06AD  0000               	nop	;# 
  4530  06AE  0000               	nop	;# 
  4531  06AF  0000               	nop	;# 
  4532  06B0  0000               	nop	;# 
  4533  06B1  0000               	nop	;# 
  4534                           
  4535                           ;main.c: 649: tm1650cmd(0X6C,0xFF);
  4536  06B2  30FF               	movlw	255
  4537  06B3  00F4               	movwf	tm1650cmd@seg_data
  4538  06B4  306C               	movlw	108
  4539  06B5  23B8  118A         	fcall	_tm1650cmd
  4540  06B7  0000               	nop	;# 
  4541  06B8  0000               	nop	;# 
  4542  06B9  0000               	nop	;# 
  4543  06BA  0000               	nop	;# 
  4544  06BB  0000               	nop	;# 
  4545  06BC  0000               	nop	;# 
  4546                           
  4547                           ;main.c: 651: tm1650cmd(0X6E,0xFF);
  4548  06BD  30FF               	movlw	255
  4549  06BE  00F4               	movwf	tm1650cmd@seg_data
  4550  06BF  306E               	movlw	110
  4551  06C0  2BB8               	ljmp	_tm1650cmd
  4552  06C1                     __end_of_initTM1650:	
  4553  06C1                     __ptext8:	
  4554 ;; *************** function _setZeroStep *****************
  4555 ;; Defined at:
  4556 ;;		line 690 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0
  4565 ;; Tracked objects:
  4566 ;;		On entry : 300/0
  4567 ;;		On exit  : 300/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4570 ;;      Params:         0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0
  4573 ;;      Totals:         0       0       0       0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    1
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_showCtr
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _setZeroStep
  4586  06C1                     _setZeroStep:	
  4587  06C1                     l3726:	
  4588                           ;incstack = 0
  4589                           ; Regs used in _setZeroStep: [wreg+status,2+status,0]
  4590                           
  4591                           
  4592                           ;main.c: 692: if(zeroStep == 0)
  4593  06C1  087B               	movf	_zeroStep,w
  4594  06C2  1D03               	btfss	3,2
  4595  06C3  2EC7               	goto	l3730
  4596                           
  4597                           ;main.c: 693: {
  4598                           ;main.c: 694: showLed1 = 0x00;
  4599  06C4  01DF               	clrf	_showLed1
  4600                           
  4601                           ;main.c: 695: showLed2 = 0x00;
  4602  06C5  01DE               	clrf	_showLed2
  4603                           
  4604                           ;main.c: 696: }
  4605  06C6  0008               	return
  4606  06C7                     l3730:	
  4607                           
  4608                           ;main.c: 697: else if(zeroStep == 1)
  4609  06C7  0B7B               	decfsz	_zeroStep,w
  4610  06C8  2ED3               	goto	l3736
  4611                           
  4612                           ;main.c: 698: {
  4613                           ;main.c: 699: showLed1 = 0xE1;
  4614  06C9  30E1               	movlw	225
  4615  06CA  2ED0               	goto	L9
  4616  06CB                     l3738:	
  4617                           
  4618                           ;main.c: 703: {
  4619                           ;main.c: 704: showLed1 = 0xE3;
  4620  06CB  30E3               	movlw	227
  4621  06CC  2ED0               	goto	L9
  4622  06CD                     l3744:	
  4623                           
  4624                           ;main.c: 708: {
  4625                           ;main.c: 709: showLed1 = 0xE7;
  4626  06CD  30E7               	movlw	231
  4627  06CE  2ED0               	goto	L9
  4628  06CF                     l3750:	
  4629                           
  4630                           ;main.c: 713: {
  4631                           ;main.c: 714: showLed1 = 0xFF;
  4632  06CF  30FF               	movlw	255
  4633  06D0                     L9:	
  4634  06D0  00DF               	movwf	_showLed1
  4635                           
  4636                           ;main.c: 700: showLed2 = 0x00;
  4637  06D1  01DE               	clrf	_showLed2
  4638                           
  4639                           ;main.c: 701: }
  4640  06D2  0008               	return
  4641  06D3                     l3736:	
  4642                           
  4643                           ;main.c: 702: else if(zeroStep == 2)
  4644  06D3  3002               	movlw	2
  4645  06D4  067B               	xorwf	_zeroStep,w
  4646  06D5  1903               	btfsc	3,2
  4647  06D6  2ECB               	goto	l3738
  4648                           
  4649                           ;main.c: 707: else if(zeroStep == 3)
  4650  06D7  3003               	movlw	3
  4651  06D8  067B               	xorwf	_zeroStep,w
  4652  06D9  1903               	btfsc	3,2
  4653  06DA  2ECD               	goto	l3744
  4654                           
  4655                           ;main.c: 712: else if(zeroStep == 4)
  4656  06DB  3004               	movlw	4
  4657  06DC  067B               	xorwf	_zeroStep,w
  4658  06DD  1903               	btfsc	3,2
  4659  06DE  2ECF               	goto	l3750
  4660                           
  4661                           ;main.c: 717: else if(zeroStep == 5)
  4662  06DF  3005               	movlw	5
  4663  06E0  067B               	xorwf	_zeroStep,w
  4664  06E1  1D03               	btfss	3,2
  4665  06E2  2EE8               	goto	l3760
  4666                           
  4667                           ;main.c: 718: {
  4668                           ;main.c: 719: showLed1 = 0xFF;
  4669  06E3  30FF               	movlw	255
  4670  06E4  00DF               	movwf	_showLed1
  4671                           
  4672                           ;main.c: 720: showLed2 = 0x01;
  4673  06E5  01DE               	clrf	_showLed2
  4674  06E6  0ADE               	incf	_showLed2,f
  4675                           
  4676                           ;main.c: 721: }
  4677  06E7  0008               	return
  4678  06E8                     l3760:	
  4679                           
  4680                           ;main.c: 722: else if(zeroStep == 6)
  4681  06E8  3006               	movlw	6
  4682  06E9  067B               	xorwf	_zeroStep,w
  4683  06EA  1D03               	btfss	3,2
  4684  06EB  2EF1               	goto	l3764
  4685                           
  4686                           ;main.c: 723: {
  4687                           ;main.c: 724: showLed1 = 0xFF;
  4688  06EC  30FF               	movlw	255
  4689  06ED  00DF               	movwf	_showLed1
  4690                           
  4691                           ;main.c: 725: showLed2 = 0x03;
  4692  06EE  3003               	movlw	3
  4693  06EF  00DE               	movwf	_showLed2
  4694                           
  4695                           ;main.c: 726: }
  4696  06F0  0008               	return
  4697  06F1                     l3764:	
  4698                           
  4699                           ;main.c: 727: else if(zeroStep == 7)
  4700  06F1  3007               	movlw	7
  4701  06F2  067B               	xorwf	_zeroStep,w
  4702  06F3  1D03               	btfss	3,2
  4703  06F4  2EFA               	goto	l3768
  4704                           
  4705                           ;main.c: 728: {
  4706                           ;main.c: 729: showLed1 = 0xFF;
  4707  06F5  30FF               	movlw	255
  4708  06F6  00DF               	movwf	_showLed1
  4709                           
  4710                           ;main.c: 730: showLed2 = 0x07;
  4711  06F7  3007               	movlw	7
  4712  06F8  00DE               	movwf	_showLed2
  4713                           
  4714                           ;main.c: 731: }
  4715  06F9  0008               	return
  4716  06FA                     l3768:	
  4717                           
  4718                           ;main.c: 732: else if(zeroStep == 8)
  4719  06FA  3008               	movlw	8
  4720  06FB  067B               	xorwf	_zeroStep,w
  4721  06FC  1D03               	btfss	3,2
  4722  06FD  2F03               	goto	l3772
  4723                           
  4724                           ;main.c: 733: {
  4725                           ;main.c: 734: showLed1 = 0xFF;
  4726  06FE  30FF               	movlw	255
  4727  06FF  00DF               	movwf	_showLed1
  4728                           
  4729                           ;main.c: 735: showLed2 = 0x0F;
  4730  0700  300F               	movlw	15
  4731  0701  00DE               	movwf	_showLed2
  4732                           
  4733                           ;main.c: 736: }
  4734  0702  0008               	return
  4735  0703                     l3772:	
  4736                           
  4737                           ;main.c: 737: else if(zeroStep == 9)
  4738  0703  3009               	movlw	9
  4739  0704  067B               	xorwf	_zeroStep,w
  4740  0705  1D03               	btfss	3,2
  4741  0706  2F0C               	goto	l3776
  4742                           
  4743                           ;main.c: 738: {
  4744                           ;main.c: 739: showLed1 = 0xFF;
  4745  0707  30FF               	movlw	255
  4746  0708  00DF               	movwf	_showLed1
  4747                           
  4748                           ;main.c: 740: showLed2 = 0x2F;
  4749  0709  302F               	movlw	47
  4750  070A  00DE               	movwf	_showLed2
  4751                           
  4752                           ;main.c: 741: }
  4753  070B  0008               	return
  4754  070C                     l3776:	
  4755                           
  4756                           ;main.c: 742: else if(zeroStep == 10)
  4757  070C  300A               	movlw	10
  4758  070D  067B               	xorwf	_zeroStep,w
  4759  070E  1D03               	btfss	3,2
  4760  070F  2F15               	goto	l3780
  4761                           
  4762                           ;main.c: 743: {
  4763                           ;main.c: 744: showLed1 = 0xFF;
  4764  0710  30FF               	movlw	255
  4765  0711  00DF               	movwf	_showLed1
  4766                           
  4767                           ;main.c: 745: showLed2 = 0x6F;
  4768  0712  306F               	movlw	111
  4769  0713  00DE               	movwf	_showLed2
  4770                           
  4771                           ;main.c: 746: }
  4772  0714  0008               	return
  4773  0715                     l3780:	
  4774                           
  4775                           ;main.c: 747: else if(zeroStep == 11)
  4776  0715  300B               	movlw	11
  4777  0716  067B               	xorwf	_zeroStep,w
  4778  0717  1D03               	btfss	3,2
  4779  0718  2F1E               	goto	l3784
  4780  0719                     l3782:	
  4781                           
  4782                           ;main.c: 748: {
  4783                           ;main.c: 749: showLed1 = 0xFF;
  4784  0719  30FF               	movlw	255
  4785  071A  00DF               	movwf	_showLed1
  4786                           
  4787                           ;main.c: 750: showLed2 = 0xEF;
  4788  071B  30EF               	movlw	239
  4789  071C  00DE               	movwf	_showLed2
  4790                           
  4791                           ;main.c: 751: }
  4792  071D  0008               	return
  4793  071E                     l3784:	
  4794                           
  4795                           ;main.c: 752: else if(zeroStep == 12)
  4796  071E  300C               	movlw	12
  4797  071F  067B               	xorwf	_zeroStep,w
  4798  0720  1D03               	btfss	3,2
  4799  0721  0008               	return
  4800  0722  2F19               	goto	l3782
  4801  0723                     __end_of_setZeroStep:	
  4802  0723                     __ptext7:	
  4803 ;; *************** function _setZeroStep2 *****************
  4804 ;; Defined at:
  4805 ;;		line 760 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 300/0
  4816 ;;		On exit  : 300/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4819 ;;      Params:         0       0       0       0       0
  4820 ;;      Locals:         0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0
  4822 ;;      Totals:         0       0       0       0       0
  4823 ;;Total ram usage:        0 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    1
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_showCtr
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function _setZeroStep2
  4835  0723                     _setZeroStep2:	
  4836  0723                     l3788:	
  4837                           ;incstack = 0
  4838                           ; Regs used in _setZeroStep2: [wreg+status,2+status,0]
  4839                           
  4840                           
  4841                           ;main.c: 762: if(zeroStep == 0)
  4842  0723  087B               	movf	_zeroStep,w
  4843  0724  1D03               	btfss	3,2
  4844  0725  2F29               	goto	l3792
  4845                           
  4846                           ;main.c: 763: {
  4847                           ;main.c: 764: showLed1 = 0x00;
  4848  0726  01DF               	clrf	_showLed1
  4849                           
  4850                           ;main.c: 765: showLed2 = 0x00;
  4851  0727  01DE               	clrf	_showLed2
  4852                           
  4853                           ;main.c: 766: }
  4854  0728  0008               	return
  4855  0729                     l3792:	
  4856                           
  4857                           ;main.c: 767: else if(zeroStep == 1)
  4858  0729  0B7B               	decfsz	_zeroStep,w
  4859  072A  2F34               	goto	l3798
  4860                           
  4861                           ;main.c: 768: {
  4862                           ;main.c: 769: showLed1 = 0x01;
  4863  072B  01DF               	clrf	_showLed1
  4864  072C  0ADF               	incf	_showLed1,f
  4865  072D  2F32               	goto	l3796
  4866  072E                     l3800:	
  4867                           
  4868                           ;main.c: 773: {
  4869                           ;main.c: 774: showLed1 = 0x02;
  4870  072E  3002               	movlw	2
  4871                           
  4872                           ;main.c: 778: {
  4873                           ;main.c: 779: showLed1 = 0x04;
  4874  072F  2F31               	goto	L5
  4875  0730                     l3812:	
  4876                           
  4877                           ;main.c: 783: {
  4878                           ;main.c: 784: showLed1 = 0x10;
  4879  0730  3010               	movlw	16
  4880  0731                     L5:	
  4881  0731  00DF               	movwf	_showLed1
  4882  0732                     l3796:	
  4883                           
  4884                           ;main.c: 770: showLed2 = 0x00;
  4885  0732  01DE               	clrf	_showLed2
  4886                           
  4887                           ;main.c: 771: }
  4888  0733  0008               	return
  4889  0734                     l3798:	
  4890                           
  4891                           ;main.c: 772: else if(zeroStep == 2)
  4892  0734  3002               	movlw	2
  4893  0735  067B               	xorwf	_zeroStep,w
  4894  0736  1903               	btfsc	3,2
  4895  0737  2F2E               	goto	l3800
  4896                           
  4897                           ;main.c: 777: else if(zeroStep == 3)
  4898  0738  3003               	movlw	3
  4899  0739  067B               	xorwf	_zeroStep,w
  4900                           
  4901                           ;main.c: 782: else if(zeroStep == 4)
  4902  073A  3004               	movlw	4
  4903  073B  1903               	btfsc	3,2
  4904  073C  2F31               	goto	L5
  4905  073D  067B               	xorwf	_zeroStep,w
  4906  073E  1903               	btfsc	3,2
  4907  073F  2F30               	goto	l3812
  4908                           
  4909                           ;main.c: 787: else if(zeroStep == 5)
  4910  0740  3005               	movlw	5
  4911  0741  067B               	xorwf	_zeroStep,w
  4912  0742  1D03               	btfss	3,2
  4913  0743  2F48               	goto	l3822
  4914                           
  4915                           ;main.c: 788: {
  4916                           ;main.c: 789: showLed1 = 0x00;
  4917  0744  01DF               	clrf	_showLed1
  4918                           
  4919                           ;main.c: 790: showLed2 = 0x01;
  4920  0745  01DE               	clrf	_showLed2
  4921  0746  0ADE               	incf	_showLed2,f
  4922                           
  4923                           ;main.c: 791: }
  4924  0747  0008               	return
  4925  0748                     l3822:	
  4926                           
  4927                           ;main.c: 792: else if(zeroStep == 6)
  4928  0748  3006               	movlw	6
  4929  0749  067B               	xorwf	_zeroStep,w
  4930  074A  1D03               	btfss	3,2
  4931  074B  2F50               	goto	l3828
  4932  074C  3002               	movlw	2
  4933                           
  4934                           ;main.c: 793: {
  4935                           ;main.c: 794: showLed1 = 0x00;
  4936  074D  01DF               	clrf	_showLed1
  4937                           
  4938                           ;main.c: 795: showLed2 = 0x02;
  4939  074E  00DE               	movwf	_showLed2
  4940                           
  4941                           ;main.c: 796: }
  4942  074F  0008               	return
  4943  0750                     l3828:	
  4944                           
  4945                           ;main.c: 797: else if(zeroStep == 7)
  4946  0750  3007               	movlw	7
  4947  0751  067B               	xorwf	_zeroStep,w
  4948  0752  1D03               	btfss	3,2
  4949  0753  2F58               	goto	l3834
  4950  0754  3004               	movlw	4
  4951                           
  4952                           ;main.c: 798: {
  4953                           ;main.c: 799: showLed1 = 0x00;
  4954  0755  01DF               	clrf	_showLed1
  4955                           
  4956                           ;main.c: 800: showLed2 = 0x04;
  4957  0756  00DE               	movwf	_showLed2
  4958                           
  4959                           ;main.c: 801: }
  4960  0757  0008               	return
  4961  0758                     l3834:	
  4962                           
  4963                           ;main.c: 802: else if(zeroStep == 8)
  4964  0758  3008               	movlw	8
  4965  0759  067B               	xorwf	_zeroStep,w
  4966  075A  1D03               	btfss	3,2
  4967  075B  2F60               	goto	l3840
  4968  075C  3008               	movlw	8
  4969                           
  4970                           ;main.c: 803: {
  4971                           ;main.c: 804: showLed1 = 0x00;
  4972  075D  01DF               	clrf	_showLed1
  4973                           
  4974                           ;main.c: 805: showLed2 = 0x08;
  4975  075E  00DE               	movwf	_showLed2
  4976                           
  4977                           ;main.c: 806: }
  4978  075F  0008               	return
  4979  0760                     l3840:	
  4980                           
  4981                           ;main.c: 807: else if(zeroStep == 9)
  4982  0760  3009               	movlw	9
  4983  0761  067B               	xorwf	_zeroStep,w
  4984  0762  1D03               	btfss	3,2
  4985  0763  2F68               	goto	l3846
  4986  0764  3020               	movlw	32
  4987                           
  4988                           ;main.c: 808: {
  4989                           ;main.c: 809: showLed1 = 0x00;
  4990  0765  01DF               	clrf	_showLed1
  4991                           
  4992                           ;main.c: 810: showLed2 = 0x20;
  4993  0766  00DE               	movwf	_showLed2
  4994                           
  4995                           ;main.c: 811: }
  4996  0767  0008               	return
  4997  0768                     l3846:	
  4998                           
  4999                           ;main.c: 812: else if(zeroStep == 10)
  5000  0768  300A               	movlw	10
  5001  0769  067B               	xorwf	_zeroStep,w
  5002  076A  1D03               	btfss	3,2
  5003  076B  2F70               	goto	l3852
  5004  076C  3040               	movlw	64
  5005                           
  5006                           ;main.c: 813: {
  5007                           ;main.c: 814: showLed1 = 0x00;
  5008  076D  01DF               	clrf	_showLed1
  5009                           
  5010                           ;main.c: 815: showLed2 = 0x40;
  5011  076E  00DE               	movwf	_showLed2
  5012                           
  5013                           ;main.c: 816: }
  5014  076F  0008               	return
  5015  0770                     l3852:	
  5016                           
  5017                           ;main.c: 817: else if(zeroStep == 11)
  5018  0770  300B               	movlw	11
  5019  0771  067B               	xorwf	_zeroStep,w
  5020  0772  1D03               	btfss	3,2
  5021  0773  2F78               	goto	l3858
  5022  0774  3080               	movlw	128
  5023                           
  5024                           ;main.c: 818: {
  5025                           ;main.c: 819: showLed1 = 0x00;
  5026  0775  01DF               	clrf	_showLed1
  5027                           
  5028                           ;main.c: 820: showLed2 = 0x80;
  5029  0776  00DE               	movwf	_showLed2
  5030                           
  5031                           ;main.c: 821: }
  5032  0777  0008               	return
  5033  0778                     l3858:	
  5034                           
  5035                           ;main.c: 822: else if(zeroStep == 12)
  5036  0778  300C               	movlw	12
  5037  0779  067B               	xorwf	_zeroStep,w
  5038  077A  1D03               	btfss	3,2
  5039  077B  0008               	return
  5040  077C  3010               	movlw	16
  5041                           
  5042                           ;main.c: 823: {
  5043                           ;main.c: 824: showLed1 = 0x00;
  5044  077D  01DF               	clrf	_showLed1
  5045                           
  5046                           ;main.c: 825: showLed2 = 0x10;
  5047  077E  00DE               	movwf	_showLed2
  5048  077F  0008               	return
  5049  0780                     __end_of_setZeroStep2:	
  5050  0780                     PL2:	
  5051  0780  0800               	movf	0,w
  5052  0781  00E8               	movwf	CheckKeyOldValue@KeyOldTemp
  5053  0782  0A84               	incf	4,f
  5054  0783  0800               	movf	0,w
  5055  0784  00E9               	movwf	CheckKeyOldValue@KeyOldTemp+1
  5056  0785  0866               	movf	CheckKeyOldValue@KeyResTemp,w
  5057  0786  02E8               	subwf	CheckKeyOldValue@KeyOldTemp,f
  5058  0787  0867               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5059  0788  1C03               	skipc
  5060  0789  03E9               	decf	CheckKeyOldValue@KeyOldTemp+1,f
  5061  078A  02E9               	subwf	CheckKeyOldValue@KeyOldTemp+1,f
  5062  078B  3000               	movlw	0
  5063  078C  0269               	subwf	CheckKeyOldValue@KeyOldTemp+1,w
  5064  078D  3402               	retlw	2
  5065  078E                     __end_ofPL2:	
  5066  078E                     PL4:	
  5067  078E  00F5               	movwf	??_CheckOnceResult
  5068  078F  0A84               	incf	4,f
  5069  0790  0800               	movf	0,w
  5070  0791  00F6               	movwf	??_CheckOnceResult+1
  5071  0792  086B               	movf	CheckOnceResult@KeyDown,w
  5072  0793  0775               	addwf	??_CheckOnceResult,w
  5073  0794  00F7               	movwf	??_CheckOnceResult+2
  5074  0795  0876               	movf	??_CheckOnceResult+1,w
  5075  0796  1803               	skipnc
  5076  0797  0A76               	incf	??_CheckOnceResult+1,w
  5077  0798  00F8               	movwf	??_CheckOnceResult+3
  5078  0799  086D               	movf	CheckOnceResult@KeyResTemp+1,w
  5079  079A  0278               	subwf	??_CheckOnceResult+3,w
  5080  079B  1D03               	skipz
  5081  079C  0008               	return
  5082  079D  086C               	movf	CheckOnceResult@KeyResTemp,w
  5083  079E  0277               	subwf	??_CheckOnceResult+2,w
  5084  079F  0008               	return
  5085  07A0                     __end_ofPL4:	
  5086  07A0                     PL6:	
  5087  07A0  0084               	movwf	4
  5088  07A1  0800               	movf	0,w
  5089  07A2  00F5               	movwf	??_CheckOnceResult
  5090  07A3  0A84               	incf	4,f
  5091  07A4  0800               	movf	0,w
  5092  07A5  00F6               	movwf	??_CheckOnceResult+1
  5093  07A6  0008               	return
  5094  07A7                     __end_ofPL6:	
  5095  07A7                     PL8:	
  5096  07A7  0084               	movwf	4
  5097  07A8  0874               	movf	??_CheckKeyOldValue,w
  5098  07A9  0080               	movwf	0
  5099  07AA  0A84               	incf	4,f
  5100  07AB  0875               	movf	??_CheckKeyOldValue+1,w
  5101  07AC  0080               	movwf	0
  5102  07AD  1003               	clrc
  5103  07AE  0D6A               	rlf	CheckKeyOldValue@cnt,w
  5104  07AF  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5105  07B0  0084               	movwf	4
  5106  07B1  0008               	return
  5107  07B2                     __end_ofPL8:	
  5108  07B2                     PL10:	
  5109  07B2  0084               	movwf	4
  5110  07B3  0878               	movf	??_SystemEnterSleep,w
  5111  07B4  0080               	movwf	0
  5112  07B5  0A84               	incf	4,f
  5113  07B6  0879               	movf	??_SystemEnterSleep+1,w
  5114  07B7  0080               	movwf	0
  5115  07B8  1003               	clrc
  5116  07B9  0D6C               	rlf	SystemEnterSleep@cnt,w
  5117  07BA  3EAC               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5118  07BB  0084               	movwf	4
  5119  07BC  0008               	return
  5120  07BD                     __end_ofPL10:	
  5121  07BD                     PL12:	
  5122  07BD  0084               	movwf	4
  5123  07BE  0800               	movf	0,w
  5124  07BF  00F8               	movwf	??_SystemEnterSleep
  5125  07C0  0A84               	incf	4,f
  5126  07C1  0800               	movf	0,w
  5127  07C2  00F9               	movwf	??_SystemEnterSleep+1
  5128  07C3  0008               	return
  5129  07C4                     __end_ofPL12:	
  5130  07C4                     PL14:	
  5131  07C4  0800               	movf	0,w
  5132  07C5  00F4               	movwf	??_CheckKeyOldValue
  5133  07C6  0A84               	incf	4,f
  5134  07C7  0800               	movf	0,w
  5135  07C8  00F5               	movwf	??_CheckKeyOldValue+1
  5136  07C9  1003               	clrc
  5137  07CA  0D6A               	rlf	CheckKeyOldValue@cnt,w
  5138  07CB  0008               	return
  5139  07CC                     __end_ofPL14:	
  5140  07CC                     PL16:	
  5141  07CC  0180               	clrf	0
  5142  07CD  0A84               	incf	4,f
  5143  07CE  0180               	clrf	0
  5144  07CF  1003               	clrc
  5145  07D0  0D72               	rlf	KeyClearOne@cnt,w
  5146  07D1  0008               	return
  5147  07D2                     __end_ofPL16:	
  5148  07D2                     PL18:	
  5149  07D2  0085               	movwf	5	;volatile
  5150  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  5151  07D4  0185               	clrf	5	;volatile
  5152  07D5  3018               	movlw	24
  5153  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  5154  07D7  0086               	movwf	6	;volatile
  5155  07D8  0008               	return
  5156  07D9                     __end_ofPL18:	
  5157  07D9                     PL20:	
  5158  07D9  0866               	movf	CheckKeyOldValue@KeyResTemp,w
  5159  07DA  0080               	movwf	0
  5160  07DB  0A84               	incf	4,f
  5161  07DC  0867               	movf	CheckKeyOldValue@KeyResTemp+1,w
  5162  07DD  0080               	movwf	0
  5163  07DE  0008               	return
  5164  07DF                     __end_ofPL20:	
  5165  07DF                     PL22:	
  5166  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  5167  07E0  008D               	movwf	13	;volatile
  5168  07E1  30FA               	movlw	250
  5169  07E2  1683               	bsf	3,5	;RP0=1, select bank1
  5170  07E3  0091               	movwf	17	;volatile
  5171  07E4  0008               	return
  5172  07E5                     __end_ofPL22:	
  5173  07E5                     PL24:	
  5174  07E5  1683               	bsf	3,5	;RP0=1, select bank3
  5175  07E6  1703               	bsf	3,6	;RP1=1, select bank3
  5176  07E7  1405               	bsf	5,0	;volatile
  5177  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  5178  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  5179  07EA  0008               	return
  5180  07EB                     __end_ofPL24:	
  5181  07EB                     PL26:	
  5182  07EB  01EC               	clrf	SystemEnterSleep@cnt
  5183  07EC  01EA               	clrf	SystemEnterSleep@wake
  5184  07ED  0AEA               	incf	SystemEnterSleep@wake,f
  5185  07EE  01EB               	clrf	SystemEnterSleep@wake+1
  5186  07EF  0008               	return
  5187  07F0                     __end_ofPL26:	
  5188  07F0                     PL28:	
  5189  07F0  0DEA               	rlf	SystemEnterSleep@wake,f
  5190  07F1  0DEB               	rlf	SystemEnterSleep@wake+1,f
  5191  07F2  0AEC               	incf	SystemEnterSleep@cnt,f
  5192  07F3  026C               	subwf	SystemEnterSleep@cnt,w
  5193  07F4  0008               	return
  5194  07F5                     __end_ofPL28:	
  5195                           
  5196                           	psect	text21
  5197  0E74                     __ptext21:	
  5198 ;; *************** function _chrgCtr *****************
  5199 ;; Defined at:
  5200 ;;		line 994 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;		None
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  1    wreg      void 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, pclath, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 300/0
  5211 ;;		On exit  : 300/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5214 ;;      Params:         0       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0
  5217 ;;      Totals:         0       0       0       0       0
  5218 ;;Total ram usage:        0 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    3
  5221 ;; This function calls:
  5222 ;;		_checkChrgAD
  5223 ;; This function is called by:
  5224 ;;		_main
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _chrgCtr
  5230  0E74                     _chrgCtr:	
  5231                           
  5232                           ;main.c: 996: if(0x20 & PORTA)
  5233                           
  5234                           ;incstack = 0
  5235                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  5236  0E74  1E85               	btfss	5,5	;volatile
  5237  0E75  2E97               	goto	l4484
  5238                           
  5239                           ;main.c: 997: {
  5240                           ;main.c: 998: checkChrgAD();
  5241  0E76  26A1  158A         	fcall	_checkChrgAD
  5242  0E78  3006               	movlw	6
  5243                           
  5244                           ;main.c: 999: chrgFlag = 1;
  5245  0E79  01DB               	clrf	_chrgFlag
  5246  0E7A  0ADB               	incf	_chrgFlag,f
  5247                           
  5248                           ;main.c: 1000: workStep = 0;
  5249  0E7B  01E3               	clrf	_workStep
  5250                           
  5251                           ;main.c: 1001: lowBatFlag = 0;
  5252  0E7C  01D1               	clrf	_lowBatFlag
  5253                           
  5254                           ;main.c: 1002: ledLightTime = 0;
  5255  0E7D  01B4               	clrf	_ledLightTime
  5256  0E7E  01B5               	clrf	_ledLightTime+1
  5257                           
  5258                           ;main.c: 1003: if(batResult > 1555)
  5259  0E7F  0233               	subwf	_batResult+1,w
  5260  0E80  3014               	movlw	20
  5261  0E81  1903               	skipnz
  5262  0E82  0232               	subwf	_batResult,w
  5263  0E83  1C03               	skipc
  5264  0E84  2E94               	goto	l4482
  5265                           
  5266                           ;main.c: 1004: {
  5267                           ;main.c: 1005: if(++chrgFullTime > 2500)
  5268  0E85  0AAC               	incf	_chrgFullTime,f
  5269  0E86  1903               	skipnz
  5270  0E87  0AAD               	incf	_chrgFullTime+1,f
  5271  0E88  3009               	movlw	9
  5272  0E89  022D               	subwf	_chrgFullTime+1,w
  5273  0E8A  30C5               	movlw	197
  5274  0E8B  1903               	skipnz
  5275  0E8C  022C               	subwf	_chrgFullTime,w
  5276  0E8D  1C03               	skipc
  5277  0E8E  0008               	return
  5278                           
  5279                           ;main.c: 1006: {
  5280                           ;main.c: 1007: chrgFullTime = 0;
  5281  0E8F  01AC               	clrf	_chrgFullTime
  5282  0E90  01AD               	clrf	_chrgFullTime+1
  5283                           
  5284                           ;main.c: 1008: chrgFullFlag = 1;
  5285  0E91  01D7               	clrf	_chrgFullFlag
  5286  0E92  0AD7               	incf	_chrgFullFlag,f
  5287  0E93  0008               	return
  5288  0E94                     l4482:	
  5289                           
  5290                           ;main.c: 1011: else
  5291                           ;main.c: 1012: {
  5292                           ;main.c: 1013: chrgFullTime = 0;
  5293  0E94  01AC               	clrf	_chrgFullTime
  5294  0E95  01AD               	clrf	_chrgFullTime+1
  5295  0E96  0008               	return
  5296  0E97                     l4484:	
  5297                           
  5298                           ;main.c: 1016: else
  5299                           ;main.c: 1017: {
  5300                           ;main.c: 1018: if(chrgFlag)
  5301  0E97  085B               	movf	_chrgFlag,w
  5302  0E98  1D03               	btfss	3,2
  5303                           
  5304                           ;main.c: 1019: {
  5305                           ;main.c: 1020: zeroStep = 0;
  5306  0E99  01FB               	clrf	_zeroStep
  5307                           
  5308                           ;main.c: 1021: }
  5309                           ;main.c: 1022: chrgFlag = 0;
  5310  0E9A  01DB               	clrf	_chrgFlag
  5311                           
  5312                           ;main.c: 1023: chrgFullFlag = 0;
  5313  0E9B  01D7               	clrf	_chrgFullFlag
  5314                           
  5315                           ;main.c: 1024: chrgFullTime = 0;
  5316  0E9C  01AC               	clrf	_chrgFullTime
  5317  0E9D  01AD               	clrf	_chrgFullTime+1
  5318                           
  5319                           ;main.c: 1025: chrgDuty = 0;
  5320  0E9E  01D6               	clrf	_chrgDuty
  5321                           
  5322                           ;main.c: 1026: chrgLockFlag = 0;
  5323  0E9F  01D2               	clrf	_chrgLockFlag
  5324  0EA0  0008               	return
  5325  0EA1                     __end_of_chrgCtr:	
  5326  0EA1                     __ptext22:	
  5327 ;; *************** function _checkChrgAD *****************
  5328 ;; Defined at:
  5329 ;;		line 344 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0, pclath, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 300/0
  5340 ;;		On exit  : 300/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5343 ;;      Params:         0       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0
  5346 ;;      Totals:         0       0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    2
  5350 ;; This function calls:
  5351 ;;		_Read_ADC
  5352 ;; This function is called by:
  5353 ;;		_chrgCtr
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _checkChrgAD
  5359  0EA1                     _checkChrgAD:	
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _checkChrgAD: [wreg+status,2+status,0+pclath+cstack]
  5363  0EA1  3010               	movlw	16
  5364                           
  5365                           ;main.c: 346: chrgResult = Read_ADC(16,1);
  5366  0EA2  01F2               	clrf	Read_ADC@ADCLDORef
  5367  0EA3  0AF2               	incf	Read_ADC@ADCLDORef,f
  5368  0EA4  27B7               	fcall	_Read_ADC
  5369  0EA5  0873               	movf	?_Read_ADC+1,w
  5370  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  5371  0EA7  00B1               	movwf	_chrgResult+1
  5372  0EA8  0872               	movf	?_Read_ADC,w
  5373  0EA9  00B0               	movwf	_chrgResult
  5374  0EAA  0008               	return
  5375  0EAB                     __end_of_checkChrgAD:	
  5376  0EAB                     __ptext1:	
  5377 ;; *************** function _workCtr *****************
  5378 ;; Defined at:
  5379 ;;		line 934 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 200/0
  5390 ;;		On exit  : 300/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5393 ;;      Params:         0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    3
  5400 ;; This function calls:
  5401 ;;		_checkOutAD
  5402 ;;		_checkTempAD
  5403 ;; This function is called by:
  5404 ;;		_main
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _workCtr
  5410  0EAB                     _workCtr:	
  5411                           
  5412                           ;main.c: 936: if(startTime > 0)
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  5416  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  5417  0EAC  0845               	movf	_startTime,w
  5418  0EAD  1D03               	btfss	3,2
  5419                           
  5420                           ;main.c: 937: {
  5421                           ;main.c: 938: startTime--;
  5422  0EAE  03C5               	decf	_startTime,f
  5423                           
  5424                           ;main.c: 939: }
  5425                           ;main.c: 940: if(workStep > 0)
  5426  0EAF  0863               	movf	_workStep,w
  5427  0EB0  1903               	btfsc	3,2
  5428  0EB1  2EC6               	goto	l4708
  5429                           
  5430                           ;main.c: 941: {
  5431                           ;main.c: 942: checkTempAD();
  5432  0EB2  2718  158A         	fcall	_checkTempAD
  5433                           
  5434                           ;main.c: 943: PWMIOS0 = 0x01;
  5435  0EB4  3001               	movlw	1
  5436  0EB5  1683               	bsf	3,5	;RP0=1, select bank3
  5437  0EB6  1703               	bsf	3,6	;RP1=1, select bank3
  5438  0EB7  008C               	movwf	12	;volsfr
  5439                           
  5440                           ;main.c: 944: PWMTH = 0x00;
  5441  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  5442  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  5443  0EBA  0196               	clrf	22	;volatile
  5444                           
  5445                           ;main.c: 945: PWMTL = 100;
  5446  0EBB  3064               	movlw	100
  5447  0EBC  0095               	movwf	21	;volatile
  5448                           
  5449                           ;main.c: 946: PWMD01H = 0x00;
  5450  0EBD  019C               	clrf	28	;volatile
  5451                           
  5452                           ;main.c: 947: maxDuty = 40 + workStep;
  5453  0EBE  0863               	movf	_workStep,w
  5454  0EBF  3E28               	addlw	40
  5455  0EC0  00C7               	movwf	_maxDuty
  5456                           
  5457                           ;main.c: 948: PWMCON1 = 0x00;
  5458  0EC1  0194               	clrf	20	;volatile
  5459                           
  5460                           ;main.c: 949: PWMCON2 = 0x00;
  5461  0EC2  019D               	clrf	29	;volatile
  5462                           
  5463                           ;main.c: 950: PWMCON0 = 0x41;
  5464  0EC3  3041               	movlw	65
  5465  0EC4  0093               	movwf	19	;volatile
  5466                           
  5467                           ;main.c: 951: checkOutAD();
  5468  0EC5  2F35               	ljmp	l4624
  5469  0EC6                     l4708:	
  5470                           ;main.c: 952: }
  5471                           
  5472                           
  5473                           ;main.c: 953: else if(chrgFlag && chrgFullFlag == 0 && chrgLockFlag == 0)
  5474  0EC6  085B               	movf	_chrgFlag,w
  5475  0EC7  1903               	btfsc	3,2
  5476  0EC8  2F16               	goto	l4752
  5477  0EC9  0857               	movf	_chrgFullFlag,w
  5478  0ECA  1D03               	btfss	3,2
  5479  0ECB  2F16               	goto	l4752
  5480  0ECC  0852               	movf	_chrgLockFlag,w
  5481  0ECD  1D03               	btfss	3,2
  5482  0ECE  2F16               	goto	l4752
  5483                           
  5484                           ;main.c: 954: {
  5485                           ;main.c: 955: if(chrgResult < 70 && batResult <= 1555)
  5486  0ECF  3000               	movlw	0
  5487  0ED0  0231               	subwf	_chrgResult+1,w
  5488  0ED1  3046               	movlw	70
  5489  0ED2  1903               	skipnz
  5490  0ED3  0230               	subwf	_chrgResult,w
  5491  0ED4  1803               	skipnc
  5492  0ED5  2EE9               	goto	l4726
  5493  0ED6  3006               	movlw	6
  5494  0ED7  0233               	subwf	_batResult+1,w
  5495  0ED8  3014               	movlw	20
  5496  0ED9  1903               	skipnz
  5497  0EDA  0232               	subwf	_batResult,w
  5498  0EDB  1803               	skipnc
  5499  0EDC  2EE9               	goto	l4726
  5500                           
  5501                           ;main.c: 956: {
  5502                           ;main.c: 957: if(++addTime > 10 && chrgDuty < 35)
  5503  0EDD  300B               	movlw	11
  5504  0EDE  0AD5               	incf	_addTime,f
  5505  0EDF  0255               	subwf	_addTime,w
  5506  0EE0  1C03               	skipc
  5507  0EE1  2EEA               	goto	l4728
  5508  0EE2  3023               	movlw	35
  5509  0EE3  0256               	subwf	_chrgDuty,w
  5510  0EE4  1803               	skipnc
  5511  0EE5  2EEA               	goto	l4728
  5512                           
  5513                           ;main.c: 958: {
  5514                           ;main.c: 959: addTime = 0;
  5515  0EE6  01D5               	clrf	_addTime
  5516                           
  5517                           ;main.c: 960: chrgDuty++;
  5518  0EE7  0AD6               	incf	_chrgDuty,f
  5519  0EE8  2EEA               	goto	l4728
  5520  0EE9                     l4726:	
  5521                           
  5522                           ;main.c: 963: else
  5523                           ;main.c: 964: {
  5524                           ;main.c: 965: addTime = 0;
  5525  0EE9  01D5               	clrf	_addTime
  5526  0EEA                     l4728:	
  5527                           
  5528                           ;main.c: 966: }
  5529                           ;main.c: 967: if(chrgResult > 80 || batResult > 1555)
  5530  0EEA  3000               	movlw	0
  5531  0EEB  0231               	subwf	_chrgResult+1,w
  5532  0EEC  3051               	movlw	81
  5533  0EED  1903               	skipnz
  5534  0EEE  0230               	subwf	_chrgResult,w
  5535  0EEF  1803               	skipnc
  5536  0EF0  2EF8               	goto	l4732
  5537  0EF1  3006               	movlw	6
  5538  0EF2  0233               	subwf	_batResult+1,w
  5539  0EF3  3014               	movlw	20
  5540  0EF4  1903               	skipnz
  5541  0EF5  0232               	subwf	_batResult,w
  5542  0EF6  1C03               	skipc
  5543  0EF7  2F04               	goto	l4740
  5544  0EF8                     l4732:	
  5545                           
  5546                           ;main.c: 968: {
  5547                           ;main.c: 969: if(++subTime > 10 && chrgDuty > 10)
  5548  0EF8  300B               	movlw	11
  5549  0EF9  0AD4               	incf	_subTime,f
  5550  0EFA  0254               	subwf	_subTime,w
  5551  0EFB  1C03               	skipc
  5552  0EFC  2F05               	goto	l4742
  5553  0EFD  300B               	movlw	11
  5554  0EFE  0256               	subwf	_chrgDuty,w
  5555  0EFF  1C03               	skipc
  5556  0F00  2F05               	goto	l4742
  5557                           
  5558                           ;main.c: 970: {
  5559                           ;main.c: 971: subTime = 0;
  5560  0F01  01D4               	clrf	_subTime
  5561                           
  5562                           ;main.c: 972: chrgDuty--;
  5563  0F02  03D6               	decf	_chrgDuty,f
  5564  0F03  2F05               	goto	l4742
  5565  0F04                     l4740:	
  5566                           
  5567                           ;main.c: 975: else
  5568                           ;main.c: 976: {
  5569                           ;main.c: 977: subTime = 0;
  5570  0F04  01D4               	clrf	_subTime
  5571  0F05                     l4742:	
  5572                           
  5573                           ;main.c: 978: }
  5574                           ;main.c: 979: PWMIOS1 = 0x20;
  5575  0F05  3020               	movlw	32
  5576  0F06  1683               	bsf	3,5	;RP0=1, select bank3
  5577  0F07  1703               	bsf	3,6	;RP1=1, select bank3
  5578  0F08  008D               	movwf	13	;volsfr
  5579                           
  5580                           ;main.c: 980: PWMTH = 0x00;
  5581  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0F0B  0196               	clrf	22	;volatile
  5584                           
  5585                           ;main.c: 981: PWMTL = 70;
  5586  0F0C  3046               	movlw	70
  5587  0F0D  0095               	movwf	21	;volatile
  5588                           
  5589                           ;main.c: 982: PWMD23H = 0x00;
  5590  0F0E  018E               	clrf	14	;volatile
  5591                           
  5592                           ;main.c: 983: PWMD3L = chrgDuty;
  5593  0F0F  0856               	movf	_chrgDuty,w
  5594  0F10  009A               	movwf	26	;volatile
  5595                           
  5596                           ;main.c: 984: PWMCON1 = 0x00;
  5597  0F11  0194               	clrf	20	;volatile
  5598                           
  5599                           ;main.c: 985: PWMCON2 = 0x00;
  5600  0F12  019D               	clrf	29	;volatile
  5601                           
  5602                           ;main.c: 986: PWMCON0 = 0x08;
  5603  0F13  3008               	movlw	8
  5604  0F14  0093               	movwf	19	;volatile
  5605                           
  5606                           ;main.c: 987: }
  5607  0F15  0008               	return
  5608  0F16                     l4752:	
  5609                           
  5610                           ;main.c: 988: else
  5611                           ;main.c: 989: {
  5612                           ;main.c: 990: PWMCON0 = 0x00;
  5613  0F16  0193               	clrf	19	;volatile
  5614  0F17  0008               	return
  5615  0F18                     __end_of_workCtr:	
  5616  0F18                     __ptext2:	
  5617 ;; *************** function _checkTempAD *****************
  5618 ;; Defined at:
  5619 ;;		line 349 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, pclath, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 300/0
  5630 ;;		On exit  : 300/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5633 ;;      Params:         0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    2
  5640 ;; This function calls:
  5641 ;;		_Read_ADC
  5642 ;; This function is called by:
  5643 ;;		_workCtr
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           
  5648                           ;psect for function _checkTempAD
  5649  0F18                     _checkTempAD:	
  5650                           
  5651                           ;main.c: 351: PORTA |= 0x01;
  5652                           
  5653                           ;incstack = 0
  5654                           ; Regs used in _checkTempAD: [wreg+status,2+status,0+pclath+cstack]
  5655  0F18  1405               	bsf	5,0	;volatile
  5656  0F19  3001               	movlw	1
  5657                           
  5658                           ;main.c: 352: tempResult = Read_ADC(1,1);
  5659  0F1A  01F2               	clrf	Read_ADC@ADCLDORef
  5660  0F1B  0AF2               	incf	Read_ADC@ADCLDORef,f
  5661  0F1C  27B7  158A         	fcall	_Read_ADC
  5662  0F1E  0873               	movf	?_Read_ADC+1,w
  5663  0F1F  00BE               	movwf	(_tempResult+1)^(0+128)
  5664  0F20  0872               	movf	?_Read_ADC,w
  5665  0F21  00BD               	movwf	_tempResult^(0+128)
  5666                           
  5667                           ;main.c: 353: if(tempResult < 130)
  5668  0F22  3000               	movlw	0
  5669  0F23  023E               	subwf	(_tempResult+1)^(0+128),w
  5670  0F24  3082               	movlw	130
  5671  0F25  1903               	skipnz
  5672  0F26  023D               	subwf	_tempResult^(0+128),w
  5673  0F27  1803               	skipnc
  5674  0F28  2F32               	goto	l3664
  5675                           
  5676                           ;main.c: 354: {
  5677                           ;main.c: 356: if(++checkTempTime > 200)
  5678  0F29  30C9               	movlw	201
  5679  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  5680  0F2B  0ACF               	incf	_checkTempTime,f
  5681  0F2C  024F               	subwf	_checkTempTime,w
  5682  0F2D  1C03               	skipc
  5683  0F2E  0008               	return
  5684                           
  5685                           ;main.c: 357: {
  5686                           ;main.c: 358: checkTempTime = 0;
  5687  0F2F  01CF               	clrf	_checkTempTime
  5688                           
  5689                           ;main.c: 359: workStep = 0;
  5690  0F30  01E3               	clrf	_workStep
  5691  0F31  0008               	return
  5692  0F32                     l3664:	
  5693                           
  5694                           ;main.c: 363: else
  5695                           ;main.c: 364: {
  5696                           ;main.c: 365: checkTempTime = 0;
  5697  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  5698  0F33  01CF               	clrf	_checkTempTime
  5699  0F34  0008               	return
  5700  0F35                     __end_of_checkTempAD:	
  5701  0F35                     __ptext3:	
  5702 ;; *************** function _checkOutAD *****************
  5703 ;; Defined at:
  5704 ;;		line 313 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  maxAout         1    9[COMMON] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0, pclath, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 300/0
  5715 ;;		On exit  : 300/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5718 ;;      Params:         0       0       0       0       0
  5719 ;;      Locals:         1       0       0       0       0
  5720 ;;      Temps:          0       2       0       0       0
  5721 ;;      Totals:         1       2       0       0       0
  5722 ;;Total ram usage:        3 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    2
  5725 ;; This function calls:
  5726 ;;		_Read_ADC
  5727 ;; This function is called by:
  5728 ;;		_workCtr
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _checkOutAD
  5734  0F35                     _checkOutAD:	
  5735  0F35                     l4624:	
  5736                           ;incstack = 0
  5737                           ; Regs used in _checkOutAD: [wreg+status,2+status,0+pclath+cstack]
  5738                           
  5739  0F35  3009               	movlw	9
  5740                           
  5741                           ;main.c: 315: outResult = Read_ADC(9,1);
  5742  0F36  01F2               	clrf	Read_ADC@ADCLDORef
  5743  0F37  0AF2               	incf	Read_ADC@ADCLDORef,f
  5744  0F38  27B7  158A         	fcall	_Read_ADC
  5745  0F3A  0873               	movf	?_Read_ADC+1,w
  5746  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0F3C  00AF               	movwf	_outResult+1
  5748  0F3D  0872               	movf	?_Read_ADC,w
  5749  0F3E  00AE               	movwf	_outResult
  5750                           
  5751                           ;main.c: 316: unsigned char maxAout = 37;
  5752  0F3F  3025               	movlw	37
  5753  0F40  00F9               	movwf	checkOutAD@maxAout
  5754                           
  5755                           ;main.c: 317: if(batValue > 30)
  5756  0F41  301F               	movlw	31
  5757  0F42  025A               	subwf	_batValue,w
  5758  0F43  1C03               	skipc
  5759  0F44  2F47               	goto	l4632
  5760                           
  5761                           ;main.c: 318: maxAout = 39;
  5762  0F45  3027               	movlw	39
  5763  0F46  00F9               	movwf	checkOutAD@maxAout
  5764  0F47                     l4632:	
  5765                           
  5766                           ;main.c: 319: maxAout = maxAout + workStep;
  5767  0F47  0863               	movf	_workStep,w
  5768  0F48  07F9               	addwf	checkOutAD@maxAout,f
  5769                           
  5770                           ;main.c: 321: if(outResult > maxAout)
  5771  0F49  0879               	movf	checkOutAD@maxAout,w
  5772  0F4A  00E6               	movwf	??_checkOutAD
  5773  0F4B  01E7               	clrf	??_checkOutAD+1
  5774  0F4C  082F               	movf	_outResult+1,w
  5775  0F4D  0267               	subwf	??_checkOutAD+1,w
  5776  0F4E  1D03               	skipz
  5777  0F4F  2F52               	goto	u4255
  5778  0F50  082E               	movf	_outResult,w
  5779  0F51  0266               	subwf	??_checkOutAD,w
  5780  0F52                     u4255:	
  5781  0F52  1803               	skipnc
  5782  0F53  2F61               	goto	l4646
  5783                           
  5784                           ;main.c: 322: {
  5785                           ;main.c: 323: if(++checkTime > 2)
  5786  0F54  3003               	movlw	3
  5787  0F55  0AC6               	incf	_checkTime,f
  5788  0F56  0246               	subwf	_checkTime,w
  5789  0F57  1C03               	skipc
  5790  0F58  2F64               	goto	l4650
  5791                           
  5792                           ;main.c: 324: {
  5793                           ;main.c: 325: checkTime = 2;
  5794  0F59  3002               	movlw	2
  5795  0F5A  00C6               	movwf	_checkTime
  5796                           
  5797                           ;main.c: 326: if(startTime == 0)
  5798  0F5B  0845               	movf	_startTime,w
  5799  0F5C  1D03               	btfss	3,2
  5800  0F5D  2F62               	goto	l4644
  5801                           
  5802                           ;main.c: 327: {
  5803                           ;main.c: 328: tempDuty = 80 + workStep;
  5804  0F5E  0863               	movf	_workStep,w
  5805  0F5F  3E50               	addlw	80
  5806  0F60  2F63               	goto	L1
  5807  0F61                     l4646:	
  5808                           
  5809                           ;main.c: 336: else
  5810                           ;main.c: 337: {
  5811                           ;main.c: 338: checkTime = 0;
  5812  0F61  01C6               	clrf	_checkTime
  5813  0F62                     l4644:	
  5814                           ;main.c: 329: }
  5815                           
  5816                           
  5817                           ;main.c: 330: else
  5818                           ;main.c: 331: {
  5819                           ;main.c: 332: tempDuty = maxDuty;
  5820  0F62  0847               	movf	_maxDuty,w
  5821  0F63                     L1:	
  5822  0F63  00C8               	movwf	_tempDuty
  5823  0F64                     l4650:	
  5824                           
  5825                           ;main.c: 340: }
  5826                           ;main.c: 341: PWMD0L = tempDuty;
  5827  0F64  0848               	movf	_tempDuty,w
  5828  0F65  0097               	movwf	23	;volatile
  5829  0F66  0008               	return
  5830  0F67                     __end_of_checkOutAD:	
  5831  0F67                     __ptext23:	
  5832 ;; *************** function _checkBat *****************
  5833 ;; Defined at:
  5834 ;;		line 369 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 300/0
  5845 ;;		On exit  : 300/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5848 ;;      Params:         0       0       0       0       0
  5849 ;;      Locals:         0       0       0       0       0
  5850 ;;      Temps:          0       2       0       0       0
  5851 ;;      Totals:         0       2       0       0       0
  5852 ;;Total ram usage:        2 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    2
  5855 ;; This function calls:
  5856 ;;		_Read_ADC
  5857 ;; This function is called by:
  5858 ;;		_main
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _checkBat
  5864  0F67                     _checkBat:	
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _checkBat: [wreg+status,2+status,0+pclath+cstack]
  5868  0F67  300A               	movlw	10
  5869                           
  5870                           ;main.c: 371: batResult = Read_ADC(10,1);
  5871  0F68  01F2               	clrf	Read_ADC@ADCLDORef
  5872  0F69  0AF2               	incf	Read_ADC@ADCLDORef,f
  5873  0F6A  27B7  158A         	fcall	_Read_ADC
  5874  0F6C  0873               	movf	?_Read_ADC+1,w
  5875  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0F6E  00B3               	movwf	_batResult+1
  5877  0F6F  0872               	movf	?_Read_ADC,w
  5878  0F70  00B2               	movwf	_batResult
  5879                           
  5880                           ;main.c: 372: if(batResult < 1118)
  5881  0F71  3004               	movlw	4
  5882  0F72  0233               	subwf	_batResult+1,w
  5883  0F73  305E               	movlw	94
  5884  0F74  1903               	skipnz
  5885  0F75  0232               	subwf	_batResult,w
  5886  0F76  1803               	skipnc
  5887  0F77  2F8A               	goto	l4670
  5888                           
  5889                           ;main.c: 373: {
  5890                           ;main.c: 374: batValue = 0;
  5891  0F78  01DA               	clrf	_batValue
  5892                           
  5893                           ;main.c: 375: if(workStep > 0 && ++lowBatTime > 200)
  5894  0F79  0863               	movf	_workStep,w
  5895  0F7A  1903               	btfsc	3,2
  5896  0F7B  0008               	return
  5897  0F7C  30C9               	movlw	201
  5898  0F7D  0AD0               	incf	_lowBatTime,f
  5899  0F7E  0250               	subwf	_lowBatTime,w
  5900  0F7F  1C03               	skipc
  5901  0F80  0008               	return
  5902  0F81  300C               	movlw	12
  5903                           
  5904                           ;main.c: 376: {
  5905                           ;main.c: 377: lowBatTime = 0;
  5906  0F82  01D0               	clrf	_lowBatTime
  5907                           
  5908                           ;main.c: 378: lowBatFlag = 1;
  5909  0F83  01D1               	clrf	_lowBatFlag
  5910  0F84  0AD1               	incf	_lowBatFlag,f
  5911                           
  5912                           ;main.c: 379: workStep = 0;
  5913  0F85  01E3               	clrf	_workStep
  5914                           
  5915                           ;main.c: 380: zeroStep = 12;
  5916  0F86  00FB               	movwf	_zeroStep
  5917                           
  5918                           ;main.c: 381: ledLightTime = 0;
  5919  0F87  01B4               	clrf	_ledLightTime
  5920  0F88  01B5               	clrf	_ledLightTime+1
  5921  0F89  0008               	return
  5922  0F8A                     l4670:	
  5923  0F8A  3005               	movlw	5
  5924                           
  5925                           ;main.c: 384: else
  5926                           ;main.c: 385: {
  5927                           ;main.c: 386: lowBatTime = 0;
  5928  0F8B  01D0               	clrf	_lowBatTime
  5929                           
  5930                           ;main.c: 387: if(batResult >= 1376)
  5931  0F8C  0233               	subwf	_batResult+1,w
  5932  0F8D  3060               	movlw	96
  5933  0F8E  1903               	skipnz
  5934  0F8F  0232               	subwf	_batResult,w
  5935                           
  5936                           ;main.c: 388: {
  5937                           ;main.c: 389: batValue = ((batResult - 1376) /2) + 16;
  5938  0F90  0832               	movf	_batResult,w
  5939  0F91  1C03               	skipc
  5940  0F92  2FA0               	goto	L18
  5941  0F93  3EA0               	addlw	160
  5942  0F94  00E6               	movwf	??_checkBat
  5943  0F95  0833               	movf	_batResult+1,w
  5944  0F96  1803               	skipnc
  5945  0F97  3E01               	addlw	1
  5946  0F98  3EFA               	addlw	250
  5947  0F99  00E7               	movwf	??_checkBat+1
  5948  0F9A  1003               	clrc
  5949  0F9B  0CE7               	rrf	??_checkBat+1,f
  5950  0F9C  0CE6               	rrf	??_checkBat,f
  5951  0F9D  0866               	movf	??_checkBat,w
  5952  0F9E  3E10               	addlw	16
  5953  0F9F  2FAF               	goto	L17
  5954  0FA0                     L18:	
  5955                           ;main.c: 391: else
  5956                           ;main.c: 392: {
  5957                           ;main.c: 393: batValue = (batResult - 1118) / 16;
  5958                           
  5959                           ;main.c: 390: }
  5960                           
  5961  0FA0  3EA2               	addlw	162
  5962  0FA1  00E6               	movwf	??_checkBat
  5963  0FA2  0833               	movf	_batResult+1,w
  5964  0FA3  1803               	skipnc
  5965  0FA4  3E01               	addlw	1
  5966  0FA5  3EFB               	addlw	251
  5967  0FA6  00E7               	movwf	??_checkBat+1
  5968  0FA7  3004               	movlw	4
  5969  0FA8                     u4325:	
  5970  0FA8  1003               	clrc
  5971  0FA9  0CE7               	rrf	??_checkBat+1,f
  5972  0FAA  0CE6               	rrf	??_checkBat,f
  5973  0FAB  3EFF               	addlw	-1
  5974  0FAC  1D03               	skipz
  5975  0FAD  2FA8               	goto	u4325
  5976  0FAE  0866               	movf	??_checkBat,w
  5977  0FAF                     L17:	
  5978  0FAF  00DA               	movwf	_batValue
  5979                           
  5980                           ;main.c: 394: }
  5981                           ;main.c: 396: if(batValue > 99)
  5982  0FB0  3064               	movlw	100
  5983  0FB1  025A               	subwf	_batValue,w
  5984  0FB2  1C03               	skipc
  5985  0FB3  0008               	return
  5986                           
  5987                           ;main.c: 397: batValue = 99;
  5988  0FB4  3063               	movlw	99
  5989  0FB5  00DA               	movwf	_batValue
  5990  0FB6  0008               	return
  5991  0FB7                     __end_of_checkBat:	
  5992  0FB7                     __ptext24:	
  5993 ;; *************** function _Read_ADC *****************
  5994 ;; Defined at:
  5995 ;;		line 272 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  ADCchannel      1    wreg     unsigned char 
  5998 ;;  ADCLDORef       1    2[COMMON] unsigned char 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  ADCchannel      1    8[COMMON] unsigned char 
  6001 ;;  Adc_Result      2    5[COMMON] unsigned int 
  6002 ;;  Adc_ResultSu    2    0        unsigned int 
  6003 ;;  i               1    7[COMMON] unsigned char 
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  2    2[COMMON] unsigned int 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0
  6008 ;; Tracked objects:
  6009 ;;		On entry : 300/0
  6010 ;;		On exit  : 300/100
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6013 ;;      Params:         2       0       0       0       0
  6014 ;;      Locals:         4       0       0       0       0
  6015 ;;      Temps:          1       0       0       0       0
  6016 ;;      Totals:         7       0       0       0       0
  6017 ;;Total ram usage:        7 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:    1
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		_checkOutAD
  6024 ;;		_checkChrgAD
  6025 ;;		_checkTempAD
  6026 ;;		_checkBat
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           
  6031                           ;psect for function _Read_ADC
  6032  0FB7                     _Read_ADC:	
  6033                           
  6034                           ;incstack = 0
  6035                           ; Regs used in _Read_ADC: [wreg+status,2+status,0]
  6036                           ;Read_ADC@ADCchannel stored from wreg
  6037  0FB7  00F8               	movwf	Read_ADC@ADCchannel
  6038                           
  6039                           ;main.c: 276: unsigned char i=200;
  6040  0FB8  30C8               	movlw	200
  6041  0FB9  00F7               	movwf	Read_ADC@i
  6042                           
  6043                           ;main.c: 278: if(ADCLDORef==0)
  6044  0FBA  0872               	movf	Read_ADC@ADCLDORef,w
  6045  0FBB  1D03               	btfss	3,2
  6046  0FBC  2FC0               	goto	l3478
  6047                           
  6048                           ;main.c: 279: {
  6049                           ;main.c: 280: ADCON1 = 0B00000000;
  6050  0FBD  1683               	bsf	3,5	;RP0=1, select bank1
  6051  0FBE  019C               	clrf	28	;volatile
  6052                           
  6053                           ;main.c: 281: }
  6054  0FBF  2FC7               	goto	l3484
  6055  0FC0                     l3478:	
  6056                           
  6057                           ;main.c: 282: else if(ADCLDORef==1)
  6058  0FC0  0B72               	decfsz	Read_ADC@ADCLDORef,w
  6059  0FC1  2FC4               	goto	l3482
  6060                           
  6061                           ;main.c: 283: {
  6062                           ;main.c: 284: ADCON1 = 0B00000101;
  6063  0FC2  3005               	movlw	5
  6064  0FC3  2FC5               	goto	L20
  6065  0FC4                     l3482:	
  6066                           ;main.c: 285: }
  6067                           
  6068                           
  6069                           ;main.c: 286: else
  6070                           ;main.c: 287: {
  6071                           ;main.c: 288: ADCON1 = 0B00000110;
  6072  0FC4  3006               	movlw	6
  6073  0FC5                     L20:	
  6074  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  6075  0FC6  009C               	movwf	28	;volatile
  6076  0FC7                     l3484:	
  6077                           
  6078                           ;main.c: 289: }
  6079                           ;main.c: 291: CHS4 = 0;
  6080  0FC7  131C               	bcf	28,6	;volatile
  6081                           
  6082                           ;main.c: 292: if(ADCchannel >=16)
  6083  0FC8  3010               	movlw	16
  6084  0FC9  0278               	subwf	Read_ADC@ADCchannel,w
  6085  0FCA  1C03               	skipc
  6086  0FCB  2FCF               	goto	l1257
  6087                           
  6088                           ;main.c: 293: {
  6089                           ;main.c: 294: ADCchannel -= 16;
  6090  0FCC  3010               	movlw	16
  6091  0FCD  02F8               	subwf	Read_ADC@ADCchannel,f
  6092                           
  6093                           ;main.c: 295: CHS4 = 1;
  6094  0FCE  171C               	bsf	28,6	;volatile
  6095  0FCF                     l1257:	
  6096                           
  6097                           ;main.c: 296: }
  6098                           ;main.c: 298: ADCON0 &= 0b11000011;
  6099  0FCF  30C3               	movlw	195
  6100  0FD0  059D               	andwf	29,f	;volatile
  6101                           
  6102                           ;main.c: 299: ADCON0 |= ADCchannel<<2;
  6103  0FD1  0878               	movf	Read_ADC@ADCchannel,w
  6104  0FD2  00F4               	movwf	??_Read_ADC
  6105  0FD3  3001               	movlw	1
  6106  0FD4  1003               	clrc
  6107  0FD5                     L19:	
  6108  0FD5  0DF4               	rlf	??_Read_ADC,f
  6109  0FD6  3EFF               	addlw	-1
  6110  0FD7  1003               	clrc
  6111  0FD8  1D03               	skipz
  6112  0FD9  2FD5               	goto	L19
  6113  0FDA  0D74               	rlf	??_Read_ADC,w
  6114  0FDB  049D               	iorwf	29,f	;volatile
  6115  0FDC  0000               	nop	;# 
  6116                           
  6117                           ;main.c: 301: GODONE = 1;
  6118  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  6119  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  6120  0FDF  149D               	bsf	29,1	;volatile
  6121                           
  6122                           ;main.c: 302: while(GODONE==1&&i>0)
  6123  0FE0  2FE6               	goto	l3494
  6124  0FE1                     l3496:	
  6125  0FE1  0877               	movf	Read_ADC@i,w
  6126  0FE2  1903               	btfsc	3,2
  6127  0FE3  2FEA               	goto	l3498
  6128                           
  6129                           ;main.c: 303: {
  6130                           ;main.c: 304: i--;
  6131  0FE4  03F7               	decf	Read_ADC@i,f
  6132  0FE5  0000               	nop	;# 
  6133  0FE6                     l3494:	
  6134  0FE6  1683               	bsf	3,5	;RP0=1, select bank1
  6135  0FE7  1303               	bcf	3,6	;RP1=0, select bank1
  6136  0FE8  189D               	btfsc	29,1	;volatile
  6137  0FE9  2FE1               	goto	l3496
  6138  0FEA                     l3498:	
  6139                           
  6140                           ;main.c: 306: }
  6141                           ;main.c: 307: Adc_Result = ADRESH<<4;
  6142  0FEA  081F               	movf	31,w	;volatile
  6143  0FEB  00F5               	movwf	Read_ADC@Adc_Result
  6144  0FEC  30F0               	movlw	240
  6145  0FED  01F6               	clrf	Read_ADC@Adc_Result+1
  6146  0FEE  0EF5               	swapf	Read_ADC@Adc_Result,f
  6147  0FEF  0EF6               	swapf	Read_ADC@Adc_Result+1,f
  6148  0FF0  05F6               	andwf	Read_ADC@Adc_Result+1,f
  6149  0FF1  0875               	movf	Read_ADC@Adc_Result,w
  6150  0FF2  390F               	andlw	15
  6151  0FF3  04F6               	iorwf	Read_ADC@Adc_Result+1,f
  6152  0FF4  30F0               	movlw	240
  6153  0FF5  05F5               	andwf	Read_ADC@Adc_Result,f
  6154                           
  6155                           ;main.c: 308: Adc_Result += ADRESL>>4;
  6156  0FF6  0E1E               	swapf	30,w	;volatile
  6157  0FF7  390F               	andlw	15
  6158  0FF8  07F5               	addwf	Read_ADC@Adc_Result,f
  6159  0FF9  1803               	skipnc
  6160  0FFA  0AF6               	incf	Read_ADC@Adc_Result+1,f
  6161                           
  6162                           ;main.c: 309: return Adc_Result;
  6163  0FFB  0876               	movf	Read_ADC@Adc_Result+1,w
  6164  0FFC  00F3               	movwf	?_Read_ADC+1
  6165  0FFD  0875               	movf	Read_ADC@Adc_Result,w
  6166  0FFE  00F2               	movwf	?_Read_ADC
  6167  0FFF  0008               	return
  6168  1000                     __end_of_Read_ADC:	
  6169                           
  6170                           	psect	text25
  6171  0D82                     __ptext25:	
  6172 ;; *************** function _KeyServer *****************
  6173 ;; Defined at:
  6174 ;;		line 132 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 300/0
  6185 ;;		On exit  : 300/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6188 ;;      Params:         0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0
  6191 ;;      Totals:         0       0       0       0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    1
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _KeyServer
  6204  0D82                     _KeyServer:	
  6205                           
  6206                           ;main.c: 133: if(key1ProtectTime > 0)
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  6210  0D82  084D               	movf	_key1ProtectTime,w
  6211  0D83  1D03               	btfss	3,2
  6212                           
  6213                           ;main.c: 134: {
  6214                           ;main.c: 135: key1ProtectTime--;
  6215  0D84  03CD               	decf	_key1ProtectTime,f
  6216                           
  6217                           ;main.c: 136: }
  6218                           ;main.c: 137: if(key2ProtectTime > 0)
  6219  0D85  084C               	movf	_key2ProtectTime,w
  6220  0D86  1D03               	btfss	3,2
  6221                           
  6222                           ;main.c: 138: {
  6223                           ;main.c: 139: key2ProtectTime--;
  6224  0D87  03CC               	decf	_key2ProtectTime,f
  6225                           
  6226                           ;main.c: 140: }
  6227                           ;main.c: 141: if(key3ProtectTime > 0)
  6228  0D88  084B               	movf	_key3ProtectTime,w
  6229  0D89  1D03               	btfss	3,2
  6230                           
  6231                           ;main.c: 142: {
  6232                           ;main.c: 143: key3ProtectTime--;
  6233  0D8A  03CB               	decf	_key3ProtectTime,f
  6234                           
  6235                           ;main.c: 147: NoTouchTime = 0;
  6236  0D8B  083E               	movf	_KeyFlag,w	;volatile
  6237  0D8C  1903               	btfsc	3,2
  6238  0D8D  2E2F               	goto	l4206
  6239                           
  6240                           ;main.c: 148: sleepTime = 0;
  6241  0D8E  01AA               	clrf	_sleepTime
  6242  0D8F  01AB               	clrf	_sleepTime+1
  6243                           
  6244                           ;main.c: 149: if ((KeyFlag[0] & 0x2) && key2ProtectTime == 0 && key3ProtectTime == 0) {
  6245  0D90  1CBE               	btfss	_KeyFlag,1	;volatile
  6246  0D91  2DB2               	goto	l4126
  6247  0D92  084C               	movf	_key2ProtectTime,w
  6248  0D93  1D03               	btfss	3,2
  6249  0D94  2DB2               	goto	l4126
  6250  0D95  084B               	movf	_key3ProtectTime,w
  6251  0D96  1D03               	btfss	3,2
  6252  0D97  2DB2               	goto	l4126
  6253                           
  6254                           ;main.c: 151: key1ProtectTime = 5;
  6255  0D98  3005               	movlw	5
  6256  0D99  00CD               	movwf	_key1ProtectTime
  6257                           
  6258                           ;main.c: 152: if(++keyCount1 > 45)
  6259  0D9A  0ABA               	incf	_keyCount1,f
  6260  0D9B  1903               	skipnz
  6261  0D9C  0ABB               	incf	_keyCount1+1,f
  6262  0D9D  3000               	movlw	0
  6263  0D9E  023B               	subwf	_keyCount1+1,w
  6264  0D9F  302E               	movlw	46
  6265  0DA0  1903               	skipnz
  6266  0DA1  023A               	subwf	_keyCount1,w
  6267  0DA2  1C03               	skipc
  6268  0DA3  2DB2               	goto	l4126
  6269                           
  6270                           ;main.c: 153: {
  6271                           ;main.c: 154: keyCount1 = 45;
  6272  0DA4  302D               	movlw	45
  6273  0DA5  00BA               	movwf	_keyCount1
  6274  0DA6  3002               	movlw	2
  6275  0DA7  01BB               	clrf	_keyCount1+1
  6276                           
  6277                           ;main.c: 155: if(workStep > 1 && ++count50 > 25)
  6278  0DA8  0263               	subwf	_workStep,w
  6279  0DA9  1C03               	skipc
  6280  0DAA  2DB2               	goto	l4126
  6281  0DAB  301A               	movlw	26
  6282  0DAC  0AD8               	incf	_count50,f
  6283  0DAD  0258               	subwf	_count50,w
  6284  0DAE  1C03               	skipc
  6285  0DAF  2DB2               	goto	l4126
  6286                           
  6287                           ;main.c: 156: {
  6288                           ;main.c: 157: workStep--;
  6289  0DB0  03E3               	decf	_workStep,f
  6290                           
  6291                           ;main.c: 158: count50 = 0;
  6292  0DB1  01D8               	clrf	_count50
  6293  0DB2                     l4126:	
  6294                           
  6295                           ;main.c: 159: }
  6296                           ;main.c: 160: }
  6297                           ;main.c: 161: }
  6298                           ;main.c: 162: if ((KeyFlag[0] & 0x1) && key1ProtectTime == 0 && key3ProtectTime == 0) {
  6299  0DB2  1C3E               	btfss	_KeyFlag,0	;volatile
  6300  0DB3  2DDF               	goto	l4152
  6301  0DB4  084D               	movf	_key1ProtectTime,w
  6302  0DB5  1D03               	btfss	3,2
  6303  0DB6  2DDF               	goto	l4152
  6304  0DB7  084B               	movf	_key3ProtectTime,w
  6305  0DB8  1D03               	btfss	3,2
  6306  0DB9  2DDF               	goto	l4152
  6307                           
  6308                           ;main.c: 164: key2ProtectTime = 5;
  6309  0DBA  3005               	movlw	5
  6310  0DBB  00CC               	movwf	_key2ProtectTime
  6311                           
  6312                           ;main.c: 165: if(++keyCount2 > 45)
  6313  0DBC  0AB8               	incf	_keyCount2,f
  6314  0DBD  1903               	skipnz
  6315  0DBE  0AB9               	incf	_keyCount2+1,f
  6316  0DBF  3000               	movlw	0
  6317  0DC0  0239               	subwf	_keyCount2+1,w
  6318  0DC1  302E               	movlw	46
  6319  0DC2  1903               	skipnz
  6320  0DC3  0238               	subwf	_keyCount2,w
  6321  0DC4  1C03               	skipc
  6322  0DC5  2DDF               	goto	l4152
  6323                           
  6324                           ;main.c: 166: {
  6325                           ;main.c: 167: keyCount2 = 45;
  6326  0DC6  302D               	movlw	45
  6327  0DC7  00B8               	movwf	_keyCount2
  6328  0DC8  3014               	movlw	20
  6329  0DC9  01B9               	clrf	_keyCount2+1
  6330                           
  6331                           ;main.c: 168: if(workStep < 20 && (workStep > 0 || ledLightTime > 0) && ++count50 > 25)
  6332  0DCA  0263               	subwf	_workStep,w
  6333  0DCB  1803               	skipnc
  6334  0DCC  2DDB               	goto	l4148
  6335  0DCD  0863               	movf	_workStep,w
  6336  0DCE  1D03               	btfss	3,2
  6337  0DCF  2DD4               	goto	l4142
  6338  0DD0  0834               	movf	_ledLightTime,w
  6339  0DD1  0435               	iorwf	_ledLightTime+1,w
  6340  0DD2  1903               	btfsc	3,2
  6341  0DD3  2DDB               	goto	l4148
  6342  0DD4                     l4142:	
  6343  0DD4  301A               	movlw	26
  6344  0DD5  0AD8               	incf	_count50,f
  6345  0DD6  0258               	subwf	_count50,w
  6346  0DD7  1C03               	skipc
  6347  0DD8  2DDB               	goto	l4148
  6348                           
  6349                           ;main.c: 169: {
  6350                           ;main.c: 170: workStep++;
  6351  0DD9  0AE3               	incf	_workStep,f
  6352                           
  6353                           ;main.c: 171: count50 = 0;
  6354  0DDA  01D8               	clrf	_count50
  6355  0DDB                     l4148:	
  6356                           
  6357                           ;main.c: 172: }
  6358                           ;main.c: 173: if(workStep == 1)
  6359  0DDB  0B63               	decfsz	_workStep,w
  6360  0DDC  2DDF               	goto	l4152
  6361                           
  6362                           ;main.c: 174: {
  6363                           ;main.c: 175: startTime = 50;
  6364  0DDD  3032               	movlw	50
  6365  0DDE  00C5               	movwf	_startTime
  6366  0DDF                     l4152:	
  6367                           
  6368                           ;main.c: 176: }
  6369                           ;main.c: 177: }
  6370                           ;main.c: 178: }
  6371                           ;main.c: 179: if ((KeyFlag[0] & 0x4) && key2ProtectTime == 0 && key1ProtectTime == 0) {
  6372  0DDF  1D3E               	btfss	_KeyFlag,2	;volatile
  6373  0DE0  2E2D               	goto	l4204
  6374  0DE1  084C               	movf	_key2ProtectTime,w
  6375  0DE2  1D03               	btfss	3,2
  6376  0DE3  2E2D               	goto	l4204
  6377  0DE4  084D               	movf	_key1ProtectTime,w
  6378  0DE5  1D03               	btfss	3,2
  6379  0DE6  2E2D               	goto	l4204
  6380                           
  6381                           ;main.c: 181: key3ProtectTime = 5;
  6382  0DE7  3005               	movlw	5
  6383  0DE8  00CB               	movwf	_key3ProtectTime
  6384                           
  6385                           ;main.c: 182: if(++keyCount3 > 200)
  6386  0DE9  0AB6               	incf	_keyCount3,f
  6387  0DEA  1903               	skipnz
  6388  0DEB  0AB7               	incf	_keyCount3+1,f
  6389  0DEC  3000               	movlw	0
  6390  0DED  0237               	subwf	_keyCount3+1,w
  6391  0DEE  30C9               	movlw	201
  6392  0DEF  1903               	skipnz
  6393  0DF0  0236               	subwf	_keyCount3,w
  6394  0DF1  1C03               	skipc
  6395  0DF2  2E1C               	goto	l4192
  6396                           
  6397                           ;main.c: 183: {
  6398                           ;main.c: 184: keyCount3 = 200;
  6399  0DF3  30C8               	movlw	200
  6400  0DF4  00B6               	movwf	_keyCount3
  6401  0DF5  01B7               	clrf	_keyCount3+1
  6402                           
  6403                           ;main.c: 185: if(longKeyFalg == 0)
  6404  0DF6  0864               	movf	_longKeyFalg,w
  6405  0DF7  1D03               	btfss	3,2
  6406  0DF8  2E12               	goto	l4184
  6407                           
  6408                           ;main.c: 186: {
  6409                           ;main.c: 187: longKeyFalg = 1;
  6410  0DF9  01E4               	clrf	_longKeyFalg
  6411  0DFA  0AE4               	incf	_longKeyFalg,f
  6412                           
  6413                           ;main.c: 188: if(workStep > 0 || ledLightTime > 0)
  6414  0DFB  0863               	movf	_workStep,w
  6415  0DFC  1D03               	btfss	3,2
  6416  0DFD  2E02               	goto	l4172
  6417  0DFE  0834               	movf	_ledLightTime,w
  6418  0DFF  0435               	iorwf	_ledLightTime+1,w
  6419  0E00  1903               	btfsc	3,2
  6420  0E01  2E08               	goto	l4178
  6421  0E02                     l4172:	
  6422  0E02  300C               	movlw	12
  6423                           
  6424                           ;main.c: 189: {
  6425                           ;main.c: 190: workStep = 0;
  6426  0E03  01E3               	clrf	_workStep
  6427                           
  6428                           ;main.c: 191: zeroStep = 12;
  6429  0E04  00FB               	movwf	_zeroStep
  6430                           
  6431                           ;main.c: 192: ledLightTime = 0;
  6432  0E05  01B4               	clrf	_ledLightTime
  6433  0E06  01B5               	clrf	_ledLightTime+1
  6434                           
  6435                           ;main.c: 193: }
  6436  0E07  2E1C               	goto	l4192
  6437  0E08                     l4178:	
  6438                           
  6439                           ;main.c: 194: else if(lowBatFlag == 0)
  6440  0E08  0851               	movf	_lowBatFlag,w
  6441  0E09  1D03               	btfss	3,2
  6442  0E0A  2E1C               	goto	l4192
  6443  0E0B  302C               	movlw	44
  6444                           
  6445                           ;main.c: 195: {
  6446                           ;main.c: 196: workStep = 0;
  6447  0E0C  01E3               	clrf	_workStep
  6448                           
  6449                           ;main.c: 197: zeroStep = 0;
  6450  0E0D  01FB               	clrf	_zeroStep
  6451                           
  6452                           ;main.c: 198: ledLightTime = 300;
  6453  0E0E  00B4               	movwf	_ledLightTime
  6454  0E0F  3001               	movlw	1
  6455  0E10  00B5               	movwf	_ledLightTime+1
  6456                           
  6457                           ;main.c: 200: {
  6458                           ;main.c: 201: shanShuoTime = 250;
  6459  0E11  2E1C               	goto	l4192
  6460  0E12                     l4184:	
  6461                           
  6462                           ;main.c: 205: else if(zeroStep > 0 && ++count64ms >= 12)
  6463  0E12  087B               	movf	_zeroStep,w
  6464  0E13  1903               	btfsc	3,2
  6465  0E14  2E1C               	goto	l4192
  6466  0E15  300C               	movlw	12
  6467  0E16  0ADD               	incf	_count64ms,f
  6468  0E17  025D               	subwf	_count64ms,w
  6469  0E18  1C03               	skipc
  6470  0E19  2E1C               	goto	l4192
  6471                           
  6472                           ;main.c: 206: {
  6473                           ;main.c: 207: zeroStep--;
  6474  0E1A  03FB               	decf	_zeroStep,f
  6475                           
  6476                           ;main.c: 208: count64ms = 0;
  6477  0E1B  01DD               	clrf	_count64ms
  6478  0E1C                     l4192:	
  6479                           
  6480                           ;main.c: 209: }
  6481                           ;main.c: 210: }
  6482                           ;main.c: 211: if(lowBatFlag == 0 && ledLightTime == 0 && longKeyFalg == 0 && keyCount3 %
      +                           16 == 0)
  6483  0E1C  0851               	movf	_lowBatFlag,w
  6484  0E1D  1D03               	btfss	3,2
  6485  0E1E  2E2D               	goto	l4204
  6486  0E1F  0834               	movf	_ledLightTime,w
  6487  0E20  0435               	iorwf	_ledLightTime+1,w
  6488  0E21  1D03               	btfss	3,2
  6489  0E22  2E2D               	goto	l4204
  6490  0E23  0864               	movf	_longKeyFalg,w
  6491  0E24  1D03               	btfss	3,2
  6492  0E25  2E2D               	goto	l4204
  6493  0E26  0836               	movf	_keyCount3,w
  6494  0E27  390F               	andlw	15
  6495  0E28  1D03               	btfss	3,2
  6496  0E29  2E2D               	goto	l4204
  6497                           
  6498                           ;main.c: 212: {
  6499                           ;main.c: 213: zeroStep++;
  6500  0E2A  0AFB               	incf	_zeroStep,f
  6501                           
  6502                           ;main.c: 214: preZero = zeroStep;
  6503  0E2B  087B               	movf	_zeroStep,w
  6504  0E2C  00C9               	movwf	_preZero
  6505  0E2D                     l4204:	
  6506                           
  6507                           ;main.c: 215: }
  6508                           ;main.c: 216: }
  6509                           ;main.c: 217: keyCancelTime = 0;
  6510  0E2D  01CA               	clrf	_keyCancelTime
  6511                           
  6512                           ;main.c: 218: }
  6513  0E2E  0008               	return
  6514  0E2F                     l4206:	
  6515                           
  6516                           ;main.c: 219: else
  6517                           ;main.c: 220: {
  6518                           ;main.c: 221: if(++keyCancelTime > 5)
  6519  0E2F  3006               	movlw	6
  6520  0E30  0ACA               	incf	_keyCancelTime,f
  6521  0E31  024A               	subwf	_keyCancelTime,w
  6522  0E32  1C03               	skipc
  6523  0E33  2E5C               	goto	l4234
  6524  0E34  3000               	movlw	0
  6525                           
  6526                           ;main.c: 222: {
  6527                           ;main.c: 223: keyCancelTime = 0;
  6528  0E35  01CA               	clrf	_keyCancelTime
  6529                           
  6530                           ;main.c: 224: if(keyCount1 > 5 && workStep > 1)
  6531  0E36  023B               	subwf	_keyCount1+1,w
  6532  0E37  3006               	movlw	6
  6533  0E38  1903               	skipnz
  6534  0E39  023A               	subwf	_keyCount1,w
  6535  0E3A  1C03               	skipc
  6536  0E3B  2E41               	goto	l4216
  6537  0E3C  3002               	movlw	2
  6538  0E3D  0263               	subwf	_workStep,w
  6539  0E3E  1C03               	skipc
  6540  0E3F  2E41               	goto	l4216
  6541                           
  6542                           ;main.c: 225: {
  6543                           ;main.c: 226: workStep--;
  6544  0E40  03E3               	decf	_workStep,f
  6545  0E41                     l4216:	
  6546  0E41  3000               	movlw	0
  6547                           
  6548                           ;main.c: 227: }
  6549                           ;main.c: 228: keyCount1 = 0;
  6550  0E42  01BA               	clrf	_keyCount1
  6551  0E43  01BB               	clrf	_keyCount1+1
  6552                           
  6553                           ;main.c: 230: if(keyCount2 > 5 && workStep < 20 && (workStep > 0 || ledLightTime > 0))
  6554  0E44  0239               	subwf	_keyCount2+1,w
  6555  0E45  3006               	movlw	6
  6556  0E46  1903               	skipnz
  6557  0E47  0238               	subwf	_keyCount2,w
  6558  0E48  1C03               	skipc
  6559  0E49  2E5A               	goto	l4232
  6560  0E4A  3014               	movlw	20
  6561  0E4B  0263               	subwf	_workStep,w
  6562  0E4C  1803               	skipnc
  6563  0E4D  2E5A               	goto	l4232
  6564  0E4E  0863               	movf	_workStep,w
  6565  0E4F  1D03               	btfss	3,2
  6566  0E50  2E55               	goto	l4226
  6567  0E51  0834               	movf	_ledLightTime,w
  6568  0E52  0435               	iorwf	_ledLightTime+1,w
  6569  0E53  1903               	btfsc	3,2
  6570  0E54  2E5A               	goto	l4232
  6571  0E55                     l4226:	
  6572                           
  6573                           ;main.c: 231: {
  6574                           ;main.c: 232: workStep++;
  6575  0E55  0AE3               	incf	_workStep,f
  6576                           
  6577                           ;main.c: 233: if(workStep == 1)
  6578  0E56  0B63               	decfsz	_workStep,w
  6579  0E57  2E5A               	goto	l4232
  6580                           
  6581                           ;main.c: 234: {
  6582                           ;main.c: 235: startTime = 50;
  6583  0E58  3032               	movlw	50
  6584  0E59  00C5               	movwf	_startTime
  6585  0E5A                     l4232:	
  6586                           
  6587                           ;main.c: 236: }
  6588                           ;main.c: 237: }
  6589                           ;main.c: 238: keyCount2 = 0;
  6590  0E5A  01B8               	clrf	_keyCount2
  6591  0E5B  01B9               	clrf	_keyCount2+1
  6592  0E5C                     l4234:	
  6593                           
  6594                           ;main.c: 239: }
  6595                           ;main.c: 246: if(preZero == 1 || preZero == 2)
  6596  0E5C  0349               	decf	_preZero,w
  6597  0E5D  1903               	btfsc	3,2
  6598  0E5E  2E63               	goto	l4238
  6599  0E5F  3002               	movlw	2
  6600  0E60  0649               	xorwf	_preZero,w
  6601  0E61  1D03               	btfss	3,2
  6602  0E62  2E66               	goto	l4242
  6603  0E63                     l4238:	
  6604  0E63  3003               	movlw	3
  6605                           
  6606                           ;main.c: 247: {
  6607                           ;main.c: 248: preZero = 0;
  6608  0E64  01C9               	clrf	_preZero
  6609                           
  6610                           ;main.c: 249: zeroStep = 3;
  6611  0E65  00FB               	movwf	_zeroStep
  6612  0E66                     l4242:	
  6613                           
  6614                           ;main.c: 250: }
  6615                           ;main.c: 251: longKeyFalg = 0;
  6616  0E66  01E4               	clrf	_longKeyFalg
  6617                           
  6618                           ;main.c: 252: keyCount3 = 0;
  6619  0E67  01B6               	clrf	_keyCount3
  6620  0E68  01B7               	clrf	_keyCount3+1
  6621                           
  6622                           ;main.c: 253: if(zeroStep > 0 && ++count64ms >= 12)
  6623  0E69  087B               	movf	_zeroStep,w
  6624  0E6A  1903               	btfsc	3,2
  6625  0E6B  0008               	return
  6626  0E6C  300C               	movlw	12
  6627  0E6D  0ADD               	incf	_count64ms,f
  6628  0E6E  025D               	subwf	_count64ms,w
  6629  0E6F  1C03               	skipc
  6630  0E70  0008               	return
  6631                           
  6632                           ;main.c: 254: {
  6633                           ;main.c: 255: zeroStep--;
  6634  0E71  03FB               	decf	_zeroStep,f
  6635                           
  6636                           ;main.c: 256: count64ms = 0;
  6637  0E72  01DD               	clrf	_count64ms
  6638  0E73  0008               	return
  6639  0E74                     __end_of_KeyServer:	
  6640                           
  6641                           	psect	text38
  6642  0D38                     __ptext38:	
  6643 ;; *************** function _Isr_Timer *****************
  6644 ;; Defined at:
  6645 ;;		line 405 in file "C:\mcuproject\scm\zdt\D17-jl_SC8F6790_tssop20\D17_SC8F6790_tssop20\main.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 200/200
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6659 ;;      Params:         0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0
  6661 ;;      Temps:          2       0       0       0       0
  6662 ;;      Totals:         2       0       0       0       0
  6663 ;;Total ram usage:        2 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		Interrupt level 1
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _Isr_Timer
  6674  0D38                     _Isr_Timer:	
  6675                           
  6676                           ;main.c: 407: if(TMR2IF)
  6677  0D38  1283               	bcf	3,5	;RP0=0, select bank0
  6678  0D39  1303               	bcf	3,6	;RP1=0, select bank0
  6679  0D3A  1C8C               	btfss	12,1	;volatile
  6680  0D3B  2D45               	goto	i1l4584
  6681                           
  6682                           ;main.c: 408: {
  6683                           ;main.c: 409: TMR2IF = 0;
  6684  0D3C  108C               	bcf	12,1	;volatile
  6685                           
  6686                           ;main.c: 410: if(++MainTime >= 32)
  6687  0D3D  3020               	movlw	32
  6688  0D3E  0AE5               	incf	_MainTime,f	;volatile
  6689  0D3F  0265               	subwf	_MainTime,w	;volatile
  6690  0D40  1C03               	skipc
  6691  0D41  2D46               	goto	i1l4586
  6692                           
  6693                           ;main.c: 411: {
  6694                           ;main.c: 412: MainTime = 0;
  6695  0D42  01E5               	clrf	_MainTime	;volatile
  6696                           
  6697                           ;main.c: 413: B_MainLoop = 1;
  6698  0D43  177A               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  6699  0D44  2D46               	goto	i1l4586
  6700  0D45                     i1l4584:	
  6701                           
  6702                           ;main.c: 416: else
  6703                           ;main.c: 417: {
  6704                           ;main.c: 418: PIR1 = 0;
  6705  0D45  018C               	clrf	12	;volatile
  6706  0D46                     i1l4586:	
  6707                           
  6708                           ;main.c: 419: }
  6709                           ;main.c: 421: if(RACIF)
  6710  0D46  1703               	bsf	3,6	;RP1=1, select bank2
  6711  0D47  1C87               	btfss	7,1	;volatile
  6712  0D48  2D4C               	goto	i1l4592
  6713                           
  6714                           ;main.c: 422: {
  6715                           ;main.c: 423: RACIF = 0;
  6716  0D49  1087               	bcf	7,1	;volatile
  6717                           
  6718                           ;main.c: 424: PORTA;
  6719  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  6720  0D4B  0805               	movf	5,w	;volatile
  6721  0D4C                     i1l4592:	
  6722                           
  6723                           ;main.c: 426: }
  6724                           ;main.c: 429: if(RCCIF)
  6725  0D4C  1703               	bsf	3,6	;RP1=1, select bank2
  6726  0D4D  1D07               	btfss	7,2	;volatile
  6727  0D4E  2D52               	goto	i1l1300
  6728                           
  6729                           ;main.c: 430: {
  6730                           ;main.c: 431: RCCIF = 0;
  6731  0D4F  1107               	bcf	7,2	;volatile
  6732                           
  6733                           ;main.c: 432: PORTC;
  6734  0D50  1683               	bsf	3,5	;RP0=1, select bank3
  6735  0D51  0805               	movf	5,w	;volatile
  6736  0D52                     i1l1300:	
  6737  0D52  0871               	movf	??_Isr_Timer+1,w
  6738  0D53  008A               	movwf	10
  6739  0D54  0E70               	swapf	??_Isr_Timer^(0+-128),w
  6740  0D55  0083               	movwf	3
  6741  0D56  0EFE               	swapf	126,f
  6742  0D57  0E7E               	swapf	126,w
  6743  0D58  0009               	retfie
  6744  0D59                     __end_of_Isr_Timer:	
  6745  007E                     btemp	set	126	;btemp
  6746  007E                     wtemp0	set	126
  6747                           
  6748                           	psect	intentry
  6749  0004                     __pintentry:	
  6750                           ;incstack = 0
  6751                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  6752                           
  6753  0004                     interrupt_function:	
  6754  007E                     saved_w	set	btemp
  6755  0004  00FE               	movwf	btemp
  6756  0005  0E03               	swapf	3,w
  6757  0006  00F0               	movwf	??_Isr_Timer
  6758  0007  080A               	movf	10,w
  6759  0008  00F1               	movwf	??_Isr_Timer+1
  6760  0009  158A  2D38         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    31
    Data        0
    BSS         104
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      9      79
    BANK1            80      0      33
    BANK3            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_checkOutAD
    _checkTempAD->_Read_ADC
    _checkOutAD->_Read_ADC
    _refreshTM1650->_tm1650cmd
    _initTM1650->_tm1650cmd
    _tm1650cmd->_write_8bit
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _checkChrgAD->_Read_ADC
    _checkBat->_Read_ADC
    _CheckTouchKey->_CheckOnceResult
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->_checkOutAD
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Isr_Timer in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8508
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                           _checkBat
                            _chrgCtr
                         _initTM1650
                            _showCtr
                              _task1
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     660
                         _checkOutAD
                        _checkTempAD
 ---------------------------------------------------------------------------------
 (2) _checkTempAD                                          0     0      0     310
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (2) _checkOutAD                                           3     3      0     350
                                              9 COMMON     1     1      0
                                              0 BANK0      2     2      0
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _task1                                                0     0      0     801
                      _refreshTM1650
 ---------------------------------------------------------------------------------
 (2) _refreshTM1650                                        0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (1) _showCtr                                              0     0      0    2929
                          _WorkSleep
                            ___lbdiv
                            ___lbmod
                            ___lwmod
                         _initTM1650
                        _setZeroStep
                       _setZeroStep2
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (2) _setZeroStep2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setZeroStep                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTM1650                                           0     0      0     801
                          _tm1650cmd
 ---------------------------------------------------------------------------------
 (3) _tm1650cmd                                            2     1      1     801
                                              4 COMMON     2     1      1
                       _TM1650_START
                        _TM1650_STOP
                         _write_8bit
 ---------------------------------------------------------------------------------
 (4) _write_8bit                                           2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _TM1650_STOP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TM1650_START                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     245
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     202
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     205
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _WorkSleep                                            0     0      0     675
                        _Init_System
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (3) _SystemEnterSleep                                     9     9      0     675
                                              8 COMMON     2     2      0
                                              0 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     310
                        _checkChrgAD
 ---------------------------------------------------------------------------------
 (2) _checkChrgAD                                          0     0      0     310
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (1) _checkBat                                             2     2      0     310
                                              0 BANK0      2     2      0
                           _Read_ADC
 ---------------------------------------------------------------------------------
 (3) _Read_ADC                                             9     7      2     310
                                              2 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    2697
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (4) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (5) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1463
                                              5 COMMON     4     4      0
                                              0 BANK0      9     9      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     304
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _checkBat
     _Read_ADC
   _chrgCtr
     _checkChrgAD
       _Read_ADC
   _initTM1650
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _showCtr
     _WorkSleep
       _Init_System
       _Refurbish_Sfr
       _SystemEnterSleep
         _ClearResSum
         _GetTouchKeyValue
           _ClearResSum
         _KeyClearOne
     ___lbdiv
     ___lbmod
     ___lwmod
     _initTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
     _setZeroStep
     _setZeroStep2
     _tm1650cmd
       _TM1650_START
       _TM1650_STOP
       _write_8bit
   _task1
     _refreshTM1650
       _tm1650cmd
         _TM1650_START
         _TM1650_STOP
         _write_8bit
   _workCtr
     _checkOutAD
       _Read_ADC
     _checkTempAD
       _Read_ADC

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      9      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      0      21       6       41.3%
BITBANK3            50      0       0       7        0.0%
BANK3               50      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
ABS                  0      0      7C      11        0.0%
DATA                 0      0      7C      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 19 14:06:19 2025

                KeyIsIn@cnt 0073                  KeyHave@cnt 0074                 KeyHave@flag 0072  
              ?_TM1650_STOP 0070                           pc 0002                          PL2 0780  
                        PL4 078E                          PL6 07A0                          PL8 07A7  
             ?_TM1650_START 0070               ??_KeyClearOne 0072       __size_of_TurnKeyFlags 002D  
                        fsr 0004            ??_CheckValidTime 0072  SystemEnterSleep@KeyResTemp 0068  
                       PL10 07B2                         PL20 07D9                         PL12 07BD  
                       PL22 07DF                         PL14 07C4                         PL24 07E5  
                       PL16 07CC                         PL26 07EB                         PL18 07D2  
                       PL28 07F0                         _RC0 0C28                         _RB6 0036  
                       _RB7 0037                         _PR2 0091                         fsr0 0004  
                       indf 0000         CheckOnceResult@flag 006A           ?_GetTouchKeyValue 0070  
  __end_of_Table_KeyChannel 0825          ??_GetTouchKeyValue 0073                        l1317 03C7  
                      l1319 03FA                        l1601 05BC                        l1257 0FCF  
                      l4020 061F                        l4012 0604                        l1642 00F7  
                      l4026 0631                        l3402 058F                        l4050 02FC  
                      l1660 05FD                        l4204 0E2D                        l4036 02E9  
                      l3430 05DA                        l4142 0DD4                        l4126 0DB2  
                      l4206 0E2F                        l3600 0636                        l4232 0E5A  
                      l4216 0E41                        l4152 0DDF                        l4080 0326  
                      l4320 0266                        l4242 0E66                        l4226 0E55  
                      l4234 0E5C                        l3434 0645                        l4066 0316  
                      l4058 0302                        l4306 024C                        l1691 04D2  
                      l3356 0561                        l3428 05CA                        l3604 063F  
                      l4172 0E02                        l4148 0DDB                        l3364 066F  
                      l4332 0277                        l4324 026C                        l4316 0260  
                      l3358 0562                        l4238 0E63                        l3550 0504  
                      l1679 008B                        l4184 0E12                        l4192 0E1C  
                      l3704 04CF                        l4088 0339                        l3800 072E  
                      l4360 02AC                        l4328 0272                        l4512 0059  
                      l3386 01FD                        l3618 020C                        l4178 0E08  
                      l3482 0FC4                        l3538 04FD                        l3730 06C7  
                      l4362 02AE                        l4338 0286                        l3714 0379  
                      l4506 004B                        l3484 0FC7                        l3564 0532  
                      l1972 02EF                        l3708 0691                        l3812 0730  
                      l4372 02B9                        l4356 02A5                        l4364 02AF  
                      l4292 022E                        l4524 006C                        l4508 004E  
                      l3398 0589                        l3494 0FE6                        l3478 0FC0  
                      l3750 06CF                        l3726 06C1                        l3822 0748  
                      l4526 006E                        l3912 0199                        l3496 0FE1  
                      l3568 0539                        l3584 055A                        l3760 06E8  
                      l3744 06CD                        l3736 06D3                        l3840 0760  
                      l4384 02D6                        l4632 0F47                        l4624 0F35  
                      l3664 0F32                        l3594 0635                        l3498 0FEA  
                      l4482 0E94                        l3738 06CB                        l3834 0758  
                      l4650 0F64                        l3940 01DD                        l3932 01CD  
                      l4564 009F                        l4556 009A                        l4572 00A9  
                      l4484 0E97                        l3668 0495                        l3780 0715  
                      l3772 0703                        l3764 06F1                        l3852 0770  
                      l3828 0750                        l4644 0F62                        l4740 0F04  
                      l4732 0EF8                        l4708 0EC6                        l3942 01E1  
                      l3918 01A1                        l3870 0214                        l4566 00A3  
                      l4670 0F8A                        l3782 0719                        l3846 0768  
                      l4494 002D                        l4646 0F61                        l4742 0F05  
                      l4726 0EE9                        l3936 01D9                        l3944 01E7  
                      l3880 0114                        l3784 071E                        l3776 070C  
                      l3768 06FA                        l3792 0729                        l4496 002F  
                      l4728 0EEA                        l4752 0F16                        l3954 00B3  
                      l3698 04C9                        l3858 0778                        l4770 0D72  
                      l3796 0732                        l3788 0723                        l3798 0734  
                      l4758 0D62                        l3898 016B                        _ADON 04E8  
                      _CHS4 04E6                        _IOCA 0188                        u2315 052E  
                      u3145 032C                        _PIE1 000D                        _PIE2 0108  
                      u4325 0FA8                        u4255 0F52                        u2825 01B9  
                      u2755 0121                        u2775 015C                        _RBIF 0058  
                      u2785 0171                        u2795 017D                        _PIR1 000C  
                      _PIR2 0107                        _TMR0 0001                        _WPUB 0008  
                      _WPUC 0115                        _main 0D59                        btemp 007E  
             ?_KeyStopClear 0070                        start 000B                _TurnKeyFlags 05E4  
           __end_of_KeyIsIn 0203             __end_of_KeyHave 020F              ??_TM1650_START 0072  
CheckKeyOldValue@KeyOldTemp 0068               ??_Init_System 0072  CheckKeyOldValue@KeyResTemp 0066  
     __end_of_refreshTM1650 03B8                       ?_main 0070             __end_of___lbdiv 02FE  
      __size_of_checkChrgAD 000A             __end_of___lbmod 031A                       _T2CON 0012  
  __end_of_SystemEnterSleep 0561                       _RACIE 0841                       _RACIF 0839  
           __end_of___lwmod 033E                       _RCCIF 083A                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0185                       _TRISA 0085  
                     _TRISB 0086                       _PWMTH 0016                       _TRISC 0186  
                     _PWMTL 0015        __size_of_checkTempAD 001D             __end_of_chrgCtr 0EA1  
       __end_of_KeyClearOne 0585                  _KeyClearIn 0635                       _task1 001E  
            __pbitbssCOMMON 03D0                       pclath 000A             __end_of_showCtr 02E3  
               _ClearResSum 0561                  _KeyCounter 0044                  _KeyOldData 0028  
            ??_KeyStopClear 0073                       status 0003          Read_ADC@ADCchannel 0078  
                     wtemp0 007E             __end_of_workCtr 0F18             ___lbdiv@divisor 0072  
                _KeyUpShake 00B8             ___lbdiv@counter 0074             __initialization 000D  
              __end_of_main 0D82            __end_of_Read_ADC 1000                      ??_main 007A  
       __end_of_Init_System 066F                      _ADCON0 009D                      _ADCON1 009C  
                    _ADRESH 009F                      _ADRESL 009E                      ?_task1 0070  
                    _ANSEL0 0110                      _ANSEL1 0111                      _ANSEL2 0112  
                    _GODONE 04E9                      i1l1300 0D52                      i1l4592 0D4C  
                    i1l4584 0D45                      i1l4586 0D46                      _INTCON 000B  
        __size_of_KeyServer 00F2                      _OSCCON 0088                      _TMR2IF 0061  
                    _PWMD0L 0017                      _PWMD3L 001A                      _TRISB6 0436  
          __end_of_checkBat 0FB7                ?_setZeroStep 0070                      _SWDTEN 0441  
                 ??_KeyIsIn 0072                   ??_KeyHave 0074          __size_of_Isr_Timer 0021  
 CheckOnceResult@KeyResTemp 006C      CheckOnceResult@KeyDown 006B   __size_of_CheckKeyOldValue 0064  
                    _b_kclr 03D2                      _b_kerr 03D1                   ??___lbdiv 0073  
                 ??___lbmod 0073                   ??___lwmod 0076                 _KeyClearOne 0570  
      __size_of_TM1650_STOP 0022                   ??_chrgCtr 0079             _key1ProtectTime 004D  
          __end_of_numArray 0814               _Table_KeyFalg 0814               _Table_KeyDown 081C  
                    saved_w 007E      __size_of_CheckTouchKey 002D                   ??_showCtr 007A  
               ?_KeyClearIn 0070                   ??_workCtr 007A             _CheckOnceResult 010E  
          ___lbdiv@dividend 0073        __end_of_TM1650_START 0495             ___lbmod@divisor 0072  
   __end_of__initialization 001B             ___lbmod@counter 0075             _key2ProtectTime 004C  
        __size_of_WorkSleep 003D          __size_of_tm1650cmd 000A              __pcstackCOMMON 0070  
             __end_of_task1 007D                 _Init_System 0645                  __end_ofPL2 078E  
                __end_ofPL4 07A0                  __end_ofPL6 07A7                  __end_ofPL8 07B2  
          ___lbdiv@quotient 0075           __end_of_KeyServer 0E74             _key3ProtectTime 004B  
      __end_of_KeyStopClear 0225           __end_of_Isr_Timer 0D59                     ??_task1 0076  
        Read_ADC@Adc_Result 0075                  _checkOutAD 0F35                  __pbssBANK0 0020  
                __pbssBANK1 00A0                   ?_Read_ADC 0072                _chrgFullFlag 0057  
 __size_of_GetTouchKeyValue 005F                _chrgLockFlag 0052                _chrgFullTime 002C  
             _CheckTouchKey 007D                  __pmaintext 0D59                  _chrgResult 0030  
                __pintentry 0004         __size_of_KeyClearIn 0010           __end_of_WorkSleep 04D2  
         ?_SystemEnterSleep 0070     __end_of_CheckOnceResult 01EF                     _KEYCON0 0092  
                   _KEYCON1 0093                     _KEYCON2 0097                   ?_checkBat 0070  
         __end_of_tm1650cmd 03C2               KeyStopClear@i 0073          ??_SystemEnterSleep 0078  
                   _B_OnOff 03D5                     _PWMD01H 001C                     _PWMD23H 000E  
    __size_of_Refurbish_Sfr 000E                     _PWMCON0 0013                     _PWMCON1 0014  
                   _PWMCON2 001D                     _PWMIOS0 018C                     _PWMIOS1 018D  
             ?_setZeroStep2 0070        __end_of_Table_KeyCap 0822                  __stringtab 0800  
              ?_ClearResSum 0070                  ??_Read_ADC 0074                  _initTM1650 0691  
                   _KeyData 0026                     _KeyFlag 003E                     _KeyIsIn 01EF  
                   _KeyHave 0203              ClearResSum@cnt 0072              ?_CheckTouchKey 0070  
      __size_of_setZeroStep 0062             _chrgBatStepTime 004E     CheckOnceResult@KeyValue 0068  
          _CheckKeyOldValue 00AA                     ___lbdiv 02E3                     ___lbmod 02FE  
                   _addTime 0055     CheckOnceResult@OldValue 0066                _ledLightTime 0034  
    TurnKeyFlags@KeyNoTimes 0040               ??_checkChrgAD 0079                     ___lwmod 031A  
      GetTouchKeyValue@wake 0075        GetTouchKeyValue@temp 0073                     _b_kover 03D4  
                   _chrgCtr 0E74               ??_checkTempAD 0079                  _lowBatFlag 0051  
                   __ptext1 0EAB                     __ptext2 0F18                     __ptext3 0F35  
                   __ptext4 001E                     __ptext5 033E                     __ptext6 0225  
                   __ptext7 0723                     __ptext8 06C1                     __ptext9 0691  
                _lowBatTime 0050                     _count50 0058                     _count1s 005C  
                   _maxDuty 0047                  ??_checkBat 0066       __size_of_TM1650_START 0015  
                   _preZero 0049                     _showCtr 0225                     _subTime 0054  
            ??_setZeroStep2 0072     __size_of_CheckValidTime 0016                     clrloop0 07F6  
                   _workCtr 0EAB                 ?_checkOutAD 0070        end_of_initialization 001B  
    __size_of_refreshTM1650 007A                  _tempResult 00BD               _Refurbish_Sfr 0611  
              _KeyOldValue0 00AC                _KeyOldValue1 0020                _KeyOldValue2 00A6  
     __size_of_KeyStopClear 0016                _TM1650_START 0480                  _showShiWei 0061  
              ?_KeyClearOne 0070                _KeyReference 00A0               _checkTempTime 004F  
          ?_CheckOnceResult 0070         __end_of_checkChrgAD 0EAB            ___lbmod@dividend 0074  
       __end_of_checkTempAD 0F35                ??_KeyClearIn 0074          CheckOnceResult@cnt 006E  
               ___lbmod@rem 0076                   Read_ADC@i 0077                 ?_initTM1650 0070  
           ??_CheckTouchKey 0079                _KeyStopClear 020F            _GetTouchKeyValue 0585  
            ?_Refurbish_Sfr 0070           Read_ADC@ADCLDORef 0072               ??_TM1650_STOP 0072  
                _write_8bit 03C2                ?_Init_System 0070         __size_of_checkOutAD 0032  
        __end_of_KeyClearIn 0645               _refreshTM1650 033E                   _KeyMaxSub 0043  
                 _KeyResSum 00B2                 __end_ofPL10 07BD                 __end_ofPL20 07DF  
               __end_ofPL12 07C4                 __end_ofPL22 07E5                 __end_ofPL14 07CC  
               __end_ofPL24 07EB                 __end_ofPL16 07D2                 __end_ofPL26 07F0  
               __end_ofPL18 07D9                 __end_ofPL28 07F5         start_initialization 000D  
                 _KeyServer 0D82                   _Isr_Timer 0D38        __size_of_ClearResSum 000F  
         __size_of_Read_ADC 0049               ?_TurnKeyFlags 0070        __end_of_setZeroStep2 0780  
  TurnKeyFlags@KeyHaveTimes 0041                 _checkChrgAD 0EA1                _Table_KeyCap 081F  
            ?_refreshTM1650 0070                 _checkTempAD 0F18         __end_of_TM1650_STOP 0691  
       __size_of_initTM1650 0030                 __pbssCOMMON 007B                  ?_KeyServer 0070  
                 ___latbits 0001               __pcstackBANK0 0066                   _WorkSleep 0495  
         __size_of_checkBat 0050              _CheckValidTime 061F    __end_of_CheckKeyOldValue 010E  
                 _tm1650cmd 03B8                  ?_Isr_Timer 0070                   _batResult 0032  
                  ?_KeyIsIn 0070                    ?_KeyHave 0072                   _checkTime 0046  
 __size_of_SystemEnterSleep 008F             ??_Refurbish_Sfr 0072              ??_TurnKeyFlags 0075  
         checkOutAD@maxAout 0079                    ?___lbdiv 0072                    ?___lbmod 0072  
               ?_write_8bit 0070                    ?___lwmod 0072                    ?_chrgCtr 0070  
                 __pstrings 0800                   _count900s 00BF                   _count64ms 005D  
      __size_of_KeyClearOne 0015                   _keyCount1 003A                   _keyCount2 0038  
                 _keyCount3 0036      __end_of_CheckValidTime 0635                   _firstTime 003C  
                ?_WorkSleep 0070                    ?_showCtr 0070         GetTouchKeyValue@cnt 0077  
                ?_tm1650cmd 0074                    ?_workCtr 0070              __size_of_task1 005F  
              ??_checkOutAD 0066                    _KEYDATAH 0095                    _KEYDATAL 0094  
         interrupt_function 0004               ??_setZeroStep 0072                   clear_ram0 07F5  
                 _sleepTime 002A                 write_8bit@i 0073                   _showGeWei 0060  
               _TM1650_STOP 066F         CheckKeyOldValue@cnt 006A             ??_refreshTM1650 0076  
                 _outResult 002E                    KeyIsIn@i 0072          __end_of_checkOutAD 0F67  
               __stringbase 0805        __size_of_Init_System 002A       __end_of_Table_KeyFalg 081C  
                 _startTime 0045       __end_of_Table_KeyDown 081F    __end_of_GetTouchKeyValue 05E4  
           ?_CheckValidTime 0070                 ??_KeyServer 0072                 ??_Isr_Timer 0070  
                  _MainTime 0065         __size_of_write_8bit 00BE                    _Read_ADC 0FB7  
              ??_initTM1650 0076       __size_of_setZeroStep2 005D           tm1650cmd@seg_data 0074  
          __size_of_KeyIsIn 0014            __size_of_KeyHave 000C            _Table_KeyChannel 0822  
       __end_of_setZeroStep 0723            __size_of___lbdiv 001B    SystemEnterSleep@KeyValue 0066  
          __size_of___lbmod 001C            __size_of___lwmod 0024          __end_of__stringtab 0806  
          __size_of_chrgCtr 002D                    _batValue 005A                    _b_kover1 03D3  
                  _b_ksleep 03D0                    _checkBat 0F67          __end_of_initTM1650 06C1  
      __end_of_TurnKeyFlags 0611                    _chrgFlag 005B                    _chrgDuty 0056  
               ??_WorkSleep 007A     CheckValidTime@validtime 00BB                    __ptext10 03B8  
                  __ptext11 03C2                    __ptext20 0645                    __ptext12 066F  
                  __ptext21 0E74                    __ptext13 0480                    __ptext30 0585  
                  __ptext22 0EA1                    __ptext14 031A                    __ptext31 0561  
                  __ptext23 0F67                    __ptext15 02FE                    __ptext32 061F  
                  __ptext24 0FB7                    __ptext16 02E3                    __ptext33 010E  
                  __ptext25 0D82                    __ptext17 0495                    __ptext34 0203  
                  __ptext26 007D                    __ptext18 04D2                    __ptext35 0570  
                  __ptext27 05E4                    __ptext19 0611                    __ptext36 00AA  
                  __ptext28 0635                    __ptext37 01EF                    __ptext29 020F  
                  __ptext38 0D38                 ??_tm1650cmd 0075            __size_of_showCtr 00BE  
              _setZeroStep2 0723                    _count15s 0053            __size_of_workCtr 006D  
  __size_of_CheckOnceResult 00E1               __size_of_main 0029                 _longKeyFalg 0064  
          _SystemEnterSleep 04D2                 _preBatValue 0059       __end_of_CheckTouchKey 00AA  
                  _numArray 0806                    _tempDuty 0048                    _showLed1 005F  
                  _showLed2 005E                    _showFlag 0062                ?_checkChrgAD 0070  
          tm1650cmd@digAddr 0075                    _zeroStep 007B                    _workStep 0063  
              ?_checkTempAD 0070     CheckKeyOldValue@counter 0042           ?_CheckKeyOldValue 0070  
                  intlevel1 0000               ??_ClearResSum 0072          ??_CheckKeyOldValue 0074  
          ___lwmod@dividend 0074                 _setZeroStep 06C1                   stringcode 0800  
      SystemEnterSleep@wake 006A               write_8bit@dat 0072                ??_write_8bit 0072  
                _B_MainLoop 03D6                  _OPTION_REG 0081             ___lwmod@divisor 0072  
           ___lwmod@counter 0076                    stringdir 0800         SystemEnterSleep@cnt 006C  
                  stringtab 0800              KeyClearOne@cnt 0072               KeyClearIn@cnt 0074  
        __end_of_write_8bit 0480       __end_of_Refurbish_Sfr 061F         __end_of_ClearResSum 0570  
         ??_CheckOnceResult 0075               _keyCancelTime 004A  
