---- C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c ----------------------------------------------------------------------
1:                #include <sc.h>
2:                #include "Touch_Kscan_Library.h"
3:                
4:                #ifndef _XTAL_FREQ
5:                #define _XTAL_FREQ 8000000			//8MHz,使用内置延时函数必须定义主频，
6:                									//如用16M需改此参数为16000000
7:                #endif
8:                #define     POWER_RATIO  	(4096UL*1.2*1000)
9:                
10:               #define		uchar		unsigned char
11:               #define		u8t		unsigned char
12:               #define		uint			unsigned int
13:               #define		u16t			unsigned int
14:               #define		ulong		unsigned long
15:               
16:               
17:               
18:               #define		LED5						 RB4
19:               #define		LED4						 RA1
20:               #define		LED3						 RA3
21:               #define		LED2						 RA4
22:               #define		LED1						 RA0
23:               
24:               
25:               #define		LED5_OUT					 TRISB	&= 0xEF
26:               #define		LED4_OUT					 TRISA	&= 0xFD
27:               #define		LED3_OUT					 TRISA	&= 0xF7
28:               #define		LED2_OUT					 TRISA	&= 0xEF
29:               #define		LED1_OUT					 TRISA	&= 0xFE
30:               
31:               
32:               
33:               
34:               
35:               const static unsigned char numArray[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x71,0x79,0x50};
36:               volatile unsigned char MainTime;
37:               static unsigned int time;
38:               volatile bit	B_MainLoop,B_OnOff;
39:               u8t	count1s = 0;
40:               u8t	workStep = 0;
41:               u8t	wuhuaFlag = 0;
42:               u16t		shanshuoTime = 0;
43:               u16t		shanshuoTime2 = 0;
44:               u16t		fanValue = 0;
45:               u16t		wuhuaValue = 0;
46:               u8t	fanDuty = 0;
47:               u8t	count10s = 0;
48:               u8t	fanOverTime = 0;
49:               u8t	firstTime = 0;
50:               u16t	checkTime = 0;
51:               u16t	lowWaterTime = 0;
52:               u8t		chrgFlag = 0;
53:               u8t		chrgFullFlag = 0;
54:               u8t		chrgFullTime = 0;
55:               u8t		firstLock = 0;
56:               u8t		lowBatLock = 0;
57:               u8t		lowBatTime = 0;	
58:               u8t		lowFanTime = 0;//风扇降低为1档的时间
59:               u8t		ledCnt = 0;	
60:               u8t		showNumShi = 0x7F;
61:               u8t		showNumGe = 0x7F;
62:               u8t		fanKeyFlag = 0;
63:               u8t		wuhuaKeyFlag = 0;
64:               u8t		showBatStep = 0;
65:               u8t		curBatStep = 0;
66:               u16t	count30s = 0;
67:               u16t	count15s = 0;
68:               
69:               volatile unsigned int adresult;
70:               volatile unsigned int result;
71:               volatile unsigned char test_adc;
72:               volatile unsigned int power_ad;
73:               
74:               void chrgCtr();
75:               unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
76:               void ledShow();
77:               
78:               
79:               //系统初始化
80:               void Init_System()
  0024    0000    NOP
  0025    0064    CLRWDT
81:               {
82:               	asm("nop");
83:               	asm("clrwdt");
84:               	INTCON = 0;				//禁止中断
  0026    018B    CLR	0xB
85:               	OSCCON = 0X72;			//配置振荡为8M
  0027    3072    LDIA	0x72
  0028    1283    CLRB	0x3,5
  0029    1303    CLRB	0x3,6
  002A    0094    LD	0x14,A
86:               	OPTION_REG = 0;
  002B    0181    CLR	0x1
87:               	
88:               	
89:               	//延时等待电源电压稳定
90:               	//DelayXms(200);
91:               	TRISA = 0x00;
  002C    1683    SETB	0x3,5
  002D    0185    CLR	0x5
92:               	PORTA = 0;
  002E    0186    CLR	0x6
93:               	TRISB = 0x23;
  002F    3023    LDIA	0x23
  0030    1283    CLRB	0x3,5
  0031    0085    LD	0x5,A
94:               	PORTB = 0;
  0032    0186    CLR	0x6
95:               	WPUB = 0x02;
  0033    3002    LDIA	0x2
  0034    0088    LD	0x8,A
96:               	TRISC = 0;
  0035    1703    SETB	0x3,6
  0036    0185    CLR	0x5
97:               	PORTC = 0;
  0037    0186    CLR	0x6
98:               
99:               	PIE1 = 2;
  0038    1303    CLRB	0x3,6
  0039    008E    LD	0xE,A
100:              	PR2 = 250;				//8M下将TMR2设置为125us中断
  003A    30FA    LDIA	0xFA
  003B    0091    LD	0x11,A
101:              	T2CON = 4;				//使能定时器2
  003C    3004    LDIA	0x4
  003D    0093    LD	0x13,A
102:              
103:              	INTCON = 0XC0;			//使能中断
  003E    30C0    LDIA	0xC0
  003F    008B    LD	0xB,A
104:              	ADCON0 = 0X41;
105:              	ADON = 1;
106:              	ADCON1 = 0x00;
  0040    2BF6    JP	0x3F6
107:              }
108:              
109:              
110:              /**********************************************************
111:              函数名称：Refurbish_Sfr
112:              函数功能：刷新一些特殊功能寄存器
113:              入口参数：无
114:              出口参数：无
115:              备    注：每隔一定时间刷新一次SFR可增强抗干扰能力
116:              **********************************************************/
117:              void Refurbish_Sfr() 
118:              {
119:              	//刷新中断相关控制寄存器
120:              	PIE1 = 2;
  0396    3002    LDIA	0x2
  0397    1283    CLRB	0x3,5
  0398    008E    LD	0xE,A
121:              	PR2 = 250;
  0399    30FA    LDIA	0xFA
  039A    0091    LD	0x11,A
122:              	INTCON = 0XC0;
  039B    30C0    LDIA	0xC0
  039C    008B    LD	0xB,A
123:              	if (4 != T2CON)
  039D    3004    LDIA	0x4
  039E    0613    XORA	0x13
  039F    1903    SZB	0x3,2
  03A0    0008    RET
124:              		T2CON = 4;
  03A1    3004    LDIA	0x4
  03A2    0093    LD	0x13,A
  03A3    0008    RET
125:              }
126:              
127:              
128:              /***********************************************************
129:              键处理函数
130:              ***********************************************************/
131:              void KeyServer() 
132:              {
133:              	static unsigned char KeyOldFlag = 0;
134:              	if (KeyFlag[0]) 
  07B5    082C    LD	A,0x2C
  07B6    1903    SZB	0x3,2
  07B7    2FFB    JP	0x7FB
135:              	{
136:              		time = 0;
  07B8    1683    SETB	0x3,5
  07B9    01BA    CLR	0x3A
  07BA    01BB    CLR	0x3B
137:              		if (KeyFlag[0] != KeyOldFlag) 
  07BB    1283    CLRB	0x3,5
  07BC    082C    LD	A,0x2C
  07BD    0633    XORA	0x33
  07BE    1903    SZB	0x3,2
  07BF    0008    RET
138:              		{
139:              			//确定状态改变的按键
140:              			KeyOldFlag ^= KeyFlag[0];
  07C0    082C    LD	A,0x2C
  07C1    06B3    XORR	0x33
141:              			if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0) 
  07C2    1833    SZB	0x33,0
  07C3    1C2C    SNZB	0x2C,0
  07C4    2FDC    JP	0x7DC
  07C5    086B    LD	A,0x6B
  07C6    1D03    SNZB	0x3,2
  07C7    2FDC    JP	0x7DC
142:              			{
143:              				//KEY1被按下
144:              				if(lowBatLock == 1)
  07C8    0B3C    SZDECA	0x3C
  07C9    2FCE    JP	0x7CE
145:              				{
146:              					shanshuoTime = 225;
  07CA    30E1    LDIA	0xE1
  07CB    00AA    LD	0x2A,A
  07CC    01AB    CLR	0x2B
147:              				}
  07CD    2FD3    JP	0x7D3
148:              				else if(++workStep > 2)
  07CE    3003    LDIA	0x3
  07CF    0AC4    INCR	0x44
  07D0    0244    SUBA	0x44
  07D1    1803    SZB	0x3,0
149:              				{
150:              					workStep = 0;
  07D2    01C4    CLR	0x44
151:              				}
152:              				if(workStep == 2)
  07D3    3002    LDIA	0x2
  07D4    0644    XORA	0x44
  07D5    1D03    SNZB	0x3,2
  07D6    2FDA    JP	0x7DA
153:              				{
154:              					shanshuoTime = 225;
  07D7    30E1    LDIA	0xE1
  07D8    00AA    LD	0x2A,A
  07D9    2FDB    JP	0x7DB
155:              				}
156:              				else
157:              				{
158:              					shanshuoTime = 0;
  07DA    01AA    CLR	0x2A
  07DB    01AB    CLR	0x2B
159:              				}
160:              			}
161:              			if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0) 
  07DC    18B3    SZB	0x33,1
  07DD    1CAC    SNZB	0x2C,1
  07DE    2FF8    JP	0x7F8
  07DF    086B    LD	A,0x6B
  07E0    1D03    SNZB	0x3,2
  07E1    2FF8    JP	0x7F8
162:              			{
163:              				//KEY2被按下
164:              				if(lowBatLock == 1)
  07E2    0B3C    SZDECA	0x3C
  07E3    2FE8    JP	0x7E8
165:              				{
166:              					shanshuoTime2 = 225;
  07E4    30E1    LDIA	0xE1
  07E5    00A8    LD	0x28,A
  07E6    01A9    CLR	0x29
167:              				}
  07E7    2FED    JP	0x7ED
168:              				else if(++wuhuaFlag > 2)
  07E8    3003    LDIA	0x3
  07E9    0AC3    INCR	0x43
  07EA    0243    SUBA	0x43
  07EB    1803    SZB	0x3,0
169:              				{
170:              					wuhuaFlag = 0;
  07EC    01C3    CLR	0x43
171:              				}
172:              				if(wuhuaFlag == 2)
  07ED    3002    LDIA	0x2
  07EE    0643    XORA	0x43
  07EF    1D03    SNZB	0x3,2
  07F0    2FF6    JP	0x7F6
173:              				{
174:              					shanshuoTime2 = 225;
  07F1    30E1    LDIA	0xE1
  07F2    00A8    LD	0x28,A
  07F3    01A9    CLR	0x29
175:              					count10s = 0;
  07F4    01C1    CLR	0x41
176:              				}
  07F5    2FF8    JP	0x7F8
177:              				else
178:              				{
179:              					shanshuoTime2 = 0;
  07F6    01A8    CLR	0x28
  07F7    01A9    CLR	0x29
180:              				}
181:              			}
182:              			
183:              
184:              			KeyOldFlag = KeyFlag[0];
  07F8    082C    LD	A,0x2C
  07F9    00B3    LD	0x33,A
  07FA    0008    RET
185:              		}
186:              	} 
187:              	else 
188:              	{
189:              		KeyOldFlag = 0;
  07FB    01B3    CLR	0x33
  07FC    0008    RET
190:              	}
191:              }
192:              
193:              
194:              /***********************************************************
195:              中断服务函数
196:              ***********************************************************/
197:              void interrupt Isr_Timer()
198:              {
199:              	if(TMR2IF)				//若只使能了一个中断源,可以略去判断
  0E48    1283    CLRB	0x3,5
  0E49    1303    CLRB	0x3,6
  0E4A    1C8D    SNZB	0xD,1
  0E4B    2E69    JP	0x669
200:              	{
201:              		TMR2IF = 0;
  0E4C    108D    CLRB	0xD,1
202:              		if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  0E4D    086C    LD	A,0x6C
  0E4E    1D03    SNZB	0x3,2
  0E4F    2E58    JP	0x658
  0E50    0844    LD	A,0x44
  0E51    1D03    SNZB	0x3,2
  0E52    2E58    JP	0x658
  0E53    0843    LD	A,0x43
  0E54    1903    SZB	0x3,2
  0E55    083F    LD	A,0x3F
  0E56    1903    SZB	0x3,2
  0E57    2E5A    JP	0x65A
203:              		{
204:              			ledShow();
  0E58    2673    CALL	0x673
  0E59    158A    SETB	0xA,3
205:              		}
206:              		if(++MainTime >= 64)	//需根据你选择的触摸路数和触摸电容选择扫描一次按键的时间
  0E5A    3040    LDIA	0x40
  0E5B    1283    CLRB	0x3,5
  0E5C    0AC6    INCR	0x46
  0E5D    0246    SUBA	0x46
  0E5E    1C03    SNZB	0x3,0
  0E5F    2E6A    JP	0x66A
207:              		{						//一般103电容，8路触摸，8M主频检测时间约4ms，故扫描一次的时间可选5ms
208:              			MainTime = 0;
  0E60    01C6    CLR	0x46
209:              			B_MainLoop = 1;
  0E61    1778    SETB	0x78,6
210:              			if(++count1s >= 250)
  0E62    30FA    LDIA	0xFA
  0E63    0AC5    INCR	0x45
  0E64    0245    SUBA	0x45
  0E65    1C03    SNZB	0x3,0
  0E66    2E6A    JP	0x66A
211:              			{
212:              				count1s = 0;
  0E67    01C5    CLR	0x45
  0E68    2E6A    JP	0x66A
213:              			}
214:              		}
215:              	}
216:              	else
217:              	{
218:              		PIR1 = 0;
  0E69    018D    CLR	0xD
  0E6A    0872    LD	A,0x72
  0E6B    008A    LD	0xA,A
  0E6C    0871    LD	A,0x71
  0E6D    0084    LD	0x4,A
  0E6E    0E70    SWAPA	0x70
  0E6F    0083    LD	0x3,A
  0E70    0EFE    SWAPR	0x7E
  0E71    0E7E    SWAPA	0x7E
  0E72    0009    RETI
219:              	}
220:              	
221:              }
222:              
223:              void WorkSleep()
224:              {
225:              #if (0 != C_KEY_WAKEUP)
226:              	
227:              	
228:              	if(B_OnOff)time = 0;
  0041    1EF8    SNZB	0x78,5
  0042    2846    JP	0x46
  0043    1683    SETB	0x3,5
  0044    01BA    CLR	0x3A
  0045    01BB    CLR	0x3B
229:              	
230:              	if(++time >= 1000)
  0046    1683    SETB	0x3,5
  0047    0ABA    INCR	0x3A
  0048    1903    SZB	0x3,2
  0049    0ABB    INCR	0x3B
  004A    3003    LDIA	0x3
  004B    023B    SUBA	0x3B
  004C    30E8    LDIA	0xE8
  004D    1903    SZB	0x3,2
  004E    023A    SUBA	0x3A
  004F    1C03    SNZB	0x3,0
  0050    0008    RET
231:              	{
232:              		time = 0;
  0051    01BA    CLR	0x3A
  0052    01BB    CLR	0x3B
233:              		INTCON = 0;			//;关断ADC模块及中断使能；
  0053    018B    CLR	0xB
234:              		PIE1 = 0;
  0054    1283    CLRB	0x3,5
  0055    018E    CLR	0xE
235:              		PIE2 = 0;
  0056    1703    SETB	0x3,6
  0057    0190    CLR	0x10
236:              		PIR1 = 0;
  0058    1303    CLRB	0x3,6
  0059    018D    CLR	0xD
237:              		PIR2 = 0;
  005A    1703    SETB	0x3,6
  005B    018F    CLR	0xF
238:              		T2CON = 0;
  005C    1303    CLRB	0x3,6
  005D    0193    CLR	0x13
239:              		ADCON1 = 0;
  005E    1683    SETB	0x3,5
  005F    0196    CLR	0x16
240:              
241:              		//进入休眠前关掉所有功能模块,以降低休眠电流
242:              		ADCON0 = 0;
  0060    0195    CLR	0x15
243:              	
244:              		//进入休眠前,必须固定口线电平,这儿全部输出低电平,并关闭所有上拉电阻
245:              		PORTA = 0x00;
  0061    0186    CLR	0x6
246:              		PORTB = 0x00;
  0062    1283    CLRB	0x3,5
  0063    0186    CLR	0x6
247:              		TRISC = 0;
  0064    1703    SETB	0x3,6
  0065    0185    CLR	0x5
248:              		PORTC = 0;
  0066    0186    CLR	0x6
249:              
250:              		TRISB0 =1;//输入
  0067    1303    CLRB	0x3,6
  0068    1405    SETB	0x5,0
251:              		//WPUB7 = 1;//上拉			
252:              		RBIF = 0;//清标志
  0069    100B    CLRB	0xB,0
253:              		RBIE = 1; //允许PB口电平变化中断
  006A    158B    SETB	0xB,3
254:              		IOCB0= 1;//允许PB0电平变化中断
  006B    1409    SETB	0x9,0
255:              		PORTB;//读一次PB口	
  006C    0806    LD	A,0x6
256:              /****如需要PA口中断唤醒，使能下列程序并按需修改****
257:              			TRISA0 =1;	//输入
258:              			WPUA0 = 1;	//上拉			
259:              			RAIF = 0;	//清标志
260:              			RAIE = 1;	//允许PA口电平变化中断
261:              			IOCA0 = 1;	//允许PA0电平变化中断
262:              			PEIE = 1;	//允许外设中断
263:              			PORTA;		//读一次PA口			
264:              ************************************/	
265:              
266:              		//进入休眠模式,触摸允许唤醒的按键后恢复正常工作
267:              		SystemEnterSleep();
  006D    20A4    CALL	0xA4
  006E    118A    CLRB	0xA,3
268:              		if(RAIF) 
  006F    1D8D    SNZB	0xD,3
  0070    2874    JP	0x74
269:              		{
270:              			RAIF = 0;
  0071    118D    CLRB	0xD,3
271:              			PORTA;
  0072    1683    SETB	0x3,5
  0073    0806    LD	A,0x6
272:              		}
273:              		//休眠被唤醒,重新配置中断等SFR,使系统进入正常工作
274:              		Refurbish_Sfr();
  0074    2396    CALL	0x396
  0075    118A    CLRB	0xA,3
275:              		ADCON0 = 0X41;
276:              		ADON = 1;
277:              		ADCON1 = 0x00;
  0076    2BF6    JP	0x3F6
278:              	}
279:              #endif
280:              }
281:              
282:              
283:              /**********************************************************
284:              函数名称：AD_Sample
285:              函数功能：AD检测
286:              入口参数：adch - 检测通道
287:              出口参数：无
288:              备    注：采样通道需自行设置为输入口
289:              	      采样10次,取中间八次的平均值为采样结果存于adresult中
290:              
291:              	      adch 为输入AD通道 0-15，31
292:                           31  检测内部1.2V
293:              	
294:               		  adldo =5,开启内部LDO 2V 作为ADC 参考
295:               		  adldo =6,开启内部LDO 2.4V 作为ADC 参考
296:              		  adldo =7,开启内部LDO 3V 作为ADC 参考
297:               		  adldo =0,VDD 作为ADC 参考
298:               		  AD转换结果左对齐
299:               		  ADC参考电压从VDD切换到LDO时需要延时100us以上，才能进行AD转换
300:              **********************************************************/
301:              unsigned char ADC_Sample(unsigned char adch, unsigned char adldo) 
  0619    00CA    LD	0x4A,A
302:              {
303:              	volatile unsigned long adsum = 0;
304:              	volatile unsigned int admin = 0, admax = 0;
  061A    2797    CALL	0x797
  061B    118A    CLRB	0xA,3
305:              	volatile unsigned int ad_temp = 0;
  061C    01D4    CLR	0x54
  061D    01D5    CLR	0x55
306:              
307:              	if ((!LDO_EN) && (adldo & 0x04) ) 
  061E    1683    SETB	0x3,5
  061F    1D16    SNZB	0x16,2
  0620    1D73    SNZB	0x73,2
  0621    2E2A    JP	0x62A
308:              	{
309:              								//如果AD参考从VDD换到内部LDO，需要延时100US以上
310:              		ADCON1 = adldo;			//左对齐,AD值取12位
  0622    0873    LD	A,0x73
  0623    0096    LD	0x16,A
311:              		__delay_us(100);		//IDE内置延时函数，延时100us
  0624    3042    LDIA	0x42
  0625    00F4    LD	0x74,A
  0626    0BF4    SZDECR	0x74
  0627    2E26    JP	0x626
  0628    0000    NOP
312:              	} 
  0629    2E2C    JP	0x62C
313:              	else
314:              		ADCON1 = adldo;			//如果ADCON1.7(ADFM)=1为右对齐，,AD值取10位
  062A    0873    LD	A,0x73
  062B    0096    LD	0x16,A
315:              
316:              	if(adch & 0x10) 
  062C    1283    CLRB	0x3,5
  062D    1303    CLRB	0x3,6
  062E    1E4A    SNZB	0x4A,4
  062F    2E35    JP	0x635
317:              	{
318:              		CHS4 = 1;
  0630    1683    SETB	0x3,5
  0631    1716    SETB	0x16,6
319:              		adch &= 0x0f;
  0632    300F    LDIA	0xF
  0633    1283    CLRB	0x3,5
  0634    05CA    ANDR	0x4A
320:              	}
321:              	unsigned char i = 0;
322:              	for (i = 0; i < 10; i++) 
  0635    01CB    CLR	0x4B
323:              	{
324:              		ADCON0 = (unsigned char)(0X41 | (adch << 2));	//16分频，如果主频为16M，则必须选16分频或以上
  0636    084A    LD	A,0x4A
  0637    00F4    LD	0x74,A
  0638    3001    LDIA	0x1
  0639    1003    CLRB	0x3,0
  063A    0DF4    RLCR	0x74
  063B    3EFF    ADDIA	0xFF
  063C    1003    CLRB	0x3,0
  063D    1D03    SNZB	0x3,2
  063E    2E3A    JP	0x63A
  063F    0D74    RLCA	0x74
  0640    3841    ORIA	0x41
  0641    1683    SETB	0x3,5
  0642    0095    LD	0x15,A
  0643    0000    NOP
  0644    0000    NOP
  0645    0000    NOP
  0646    0000    NOP
325:              		asm("nop");
326:              		asm("nop");
327:              		asm("nop");
328:              		asm("nop");				//选择通道后需延时1uS以上
329:              		GODONE = 1;				//开始转换
  0647    1683    SETB	0x3,5
  0648    1303    CLRB	0x3,6
  0649    1495    SETB	0x15,1
330:              
331:              		unsigned char j = 0;
  064A    1283    CLRB	0x3,5
  064B    01C9    CLR	0x49
332:              		while (GODONE) 
  064C    1683    SETB	0x3,5
  064D    1C95    SNZB	0x15,1
  064E    2E56    JP	0x656
333:              		{
334:              			__delay_us(2);		//延时2us(编译器内置函数)
  064F    2E50    JP	0x650
  0650    2E51    JP	0x651
335:              
336:              			if (0 == (--j))		//延时0.5ms仍没有AD转换结束，跳出程序
  0651    1283    CLRB	0x3,5
  0652    1303    CLRB	0x3,6
  0653    0BC9    SZDECR	0x49
  0654    2E4C    JP	0x64C
337:              			return 0;
  0655    3400    RET	0x0
338:              		}
339:              
340:              		ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));	//计算12位AD值
  0656    0819    LD	A,0x19
  0657    1283    CLRB	0x3,5
  0658    00D4    LD	0x54,A
  0659    01D5    CLR	0x55
  065A    0ED4    SWAPR	0x54
  065B    0ED5    SWAPR	0x55
  065C    30F0    LDIA	0xF0
  065D    05D5    ANDR	0x55
  065E    0854    LD	A,0x54
  065F    390F    ANDIA	0xF
  0660    04D5    ORR	0x55
  0661    30F0    LDIA	0xF0
  0662    05D4    ANDR	0x54
  0663    1683    SETB	0x3,5
  0664    0E18    SWAPA	0x18
  0665    390F    ANDIA	0xF
  0666    1283    CLRB	0x3,5
  0667    07D4    ADDR	0x54
  0668    1803    SZB	0x3,0
  0669    0AD5    INCR	0x55
341:              
342:              		if (0 == admax) 
  066A    0852    LD	A,0x52
  066B    0453    ORA	0x53
  066C    1D03    SNZB	0x3,2
  066D    2E71    JP	0x671
343:              		{
344:              			admax = ad_temp;
  066E    27AC    CALL	0x7AC
  066F    118A    CLRB	0xA,3
  0670    2E84    JP	0x684
345:              			admin = ad_temp;
346:              		} 
347:              		else if (ad_temp > admax)
  0671    0855    LD	A,0x55
  0672    0253    SUBA	0x53
  0673    1D03    SNZB	0x3,2
  0674    2E77    JP	0x677
  0675    0854    LD	A,0x54
  0676    0252    SUBA	0x52
  0677    1803    SZB	0x3,0
  0678    2E7C    JP	0x67C
348:              			admax = ad_temp;				//AD采样最大值
  0679    27AC    CALL	0x7AC
  067A    118A    CLRB	0xA,3
  067B    2E88    JP	0x688
349:              		else if (ad_temp < admin)
  067C    0851    LD	A,0x51
  067D    0255    SUBA	0x55
  067E    1D03    SNZB	0x3,2
  067F    2E82    JP	0x682
  0680    0850    LD	A,0x50
  0681    0254    SUBA	0x54
  0682    1803    SZB	0x3,0
  0683    2E88    JP	0x688
350:              			admin = ad_temp;				//AD采样最小值
  0684    0855    LD	A,0x55
  0685    00D1    LD	0x51,A
  0686    0854    LD	A,0x54
  0687    00D0    LD	0x50,A
351:              
352:              		adsum += ad_temp;
  0688    0854    LD	A,0x54
  0689    00F4    LD	0x74,A
  068A    0855    LD	A,0x55
  068B    00F5    LD	0x75,A
  068C    01F6    CLR	0x76
  068D    01F7    CLR	0x77
  068E    0874    LD	A,0x74
  068F    07CC    ADDR	0x4C
  0690    0875    LD	A,0x75
  0691    1103    CLRB	0x3,2
  0692    1803    SZB	0x3,0
  0693    3E01    ADDIA	0x1
  0694    1D03    SNZB	0x3,2
  0695    07CD    ADDR	0x4D
  0696    0876    LD	A,0x76
  0697    1103    CLRB	0x3,2
  0698    1803    SZB	0x3,0
  0699    3E01    ADDIA	0x1
  069A    1D03    SNZB	0x3,2
  069B    07CE    ADDR	0x4E
  069C    0877    LD	A,0x77
  069D    1103    CLRB	0x3,2
  069E    1803    SZB	0x3,0
  069F    3E01    ADDIA	0x1
  06A0    1D03    SNZB	0x3,2
  06A1    07CF    ADDR	0x4F
  06A2    300A    LDIA	0xA
  06A3    0ACB    INCR	0x4B
  06A4    024B    SUBA	0x4B
  06A5    1C03    SNZB	0x3,0
  06A6    2E36    JP	0x636
353:              	}
354:              		adsum -= admax;
  06A7    0852    LD	A,0x52
  06A8    00F4    LD	0x74,A
  06A9    0853    LD	A,0x53
  06AA    2788    CALL	0x788
  06AB    118A    CLRB	0xA,3
  06AC    1C03    SNZB	0x3,0
  06AD    0F77    SZINCA	0x77
  06AE    02CF    SUBR	0x4F
355:              		if (adsum >= admin)
  06AF    0850    LD	A,0x50
  06B0    00F4    LD	0x74,A
  06B1    0851    LD	A,0x51
  06B2    00F5    LD	0x75,A
  06B3    01F6    CLR	0x76
  06B4    01F7    CLR	0x77
  06B5    0877    LD	A,0x77
  06B6    024F    SUBA	0x4F
  06B7    1D03    SNZB	0x3,2
  06B8    2EC3    JP	0x6C3
  06B9    0876    LD	A,0x76
  06BA    024E    SUBA	0x4E
  06BB    1D03    SNZB	0x3,2
  06BC    2EC3    JP	0x6C3
  06BD    0875    LD	A,0x75
  06BE    024D    SUBA	0x4D
  06BF    1D03    SNZB	0x3,2
  06C0    2EC3    JP	0x6C3
  06C1    0874    LD	A,0x74
  06C2    024C    SUBA	0x4C
  06C3    1C03    SNZB	0x3,0
  06C4    2ECE    JP	0x6CE
356:              			adsum -= admin;
  06C5    0850    LD	A,0x50
  06C6    00F4    LD	0x74,A
  06C7    0851    LD	A,0x51
  06C8    2788    CALL	0x788
  06C9    118A    CLRB	0xA,3
  06CA    1C03    SNZB	0x3,0
  06CB    0F77    SZINCA	0x77
  06CC    02CF    SUBR	0x4F
  06CD    2ED2    JP	0x6D2
357:              		else
358:              			adsum = 0;
  06CE    01CC    CLR	0x4C
  06CF    01CD    CLR	0x4D
  06D0    01CE    CLR	0x4E
  06D1    01CF    CLR	0x4F
359:              
360:              		adresult = adsum >> 3;		//8次平均值作为最终结果
  06D2    084C    LD	A,0x4C
  06D3    00F4    LD	0x74,A
  06D4    084D    LD	A,0x4D
  06D5    00F5    LD	0x75,A
  06D6    084E    LD	A,0x4E
  06D7    00F6    LD	0x76,A
  06D8    084F    LD	A,0x4F
  06D9    00F7    LD	0x77,A
  06DA    3003    LDIA	0x3
  06DB    1003    CLRB	0x3,0
  06DC    0CF7    RRCR	0x77
  06DD    0CF6    RRCR	0x76
  06DE    0CF5    RRCR	0x75
  06DF    0CF4    RRCR	0x74
  06E0    3EFF    ADDIA	0xFF
  06E1    1D03    SNZB	0x3,2
  06E2    2EDB    JP	0x6DB
  06E3    0875    LD	A,0x75
  06E4    00C8    LD	0x48,A
  06E5    0874    LD	A,0x74
  06E6    00C7    LD	0x47,A
361:              
362:              		adsum = 0;
363:              		admin = 0;
364:              		admax = 0;
  06E7    2797    CALL	0x797
365:              		return 0xA5;
  06E8    34A5    RET	0xA5
366:              		
367:              }
368:              
369:              void ledShow()
370:              {
371:              
372:              	if(++ledCnt > 19)
  0E73    3014    LDIA	0x14
  0E74    0AB9    INCR	0x39
  0E75    0239    SUBA	0x39
  0E76    1803    SZB	0x3,0
373:              	{
374:              		ledCnt = 0;
  0E77    01B9    CLR	0x39
375:              	
376:              	}
377:              	PORTA &= 0xE4;
378:              	PORTB &= 0xEF;
379:              	TRISA |= 0x1B;
380:              	TRISB |= 0x10;
  0E78    158A    SETB	0xA,3
  0E79    25C1    CALL	0x5C1
  0E7A    158A    SETB	0xA,3
381:              	switch(ledCnt)
  0E7B    2F0B    JP	0x70B
382:              	{
383:              		case 0:
384:              		break;
385:              		case 1:
386:              		if(showNumShi & 0x01)
  0E7C    1C6E    SNZB	0x6E,0
  0E7D    0008    RET
387:              		{
388:              			LED1_OUT;
  0E7E    1683    SETB	0x3,5
  0E7F    1005    CLRB	0x5,0
389:              			LED2_OUT;
  0E80    1205    CLRB	0x5,4
390:              			LED2 = 1;
  0E81    1606    SETB	0x6,4
  0E82    0008    RET
391:              		}
392:              		break;
393:              		case 2:
394:              		if(showNumShi & 0x02)
  0E83    1CEE    SNZB	0x6E,1
  0E84    0008    RET
395:              		{
396:              			LED1_OUT;
  0E85    1683    SETB	0x3,5
  0E86    1005    CLRB	0x5,0
397:              			LED3_OUT;
  0E87    1185    CLRB	0x5,3
398:              			LED3 = 1;
  0E88    1586    SETB	0x6,3
  0E89    0008    RET
399:              		}
400:              		break;
401:              		case 3:
402:              		if(showNumShi & 0x04)
  0E8A    1D6E    SNZB	0x6E,2
  0E8B    0008    RET
403:              		{
404:              			LED1_OUT;
  0E8C    1683    SETB	0x3,5
  0E8D    1005    CLRB	0x5,0
405:              			LED4_OUT;
  0E8E    1085    CLRB	0x5,1
406:              			LED4 = 1;
  0E8F    1486    SETB	0x6,1
  0E90    0008    RET
407:              		}
408:              		break;
409:              		case 4:
410:              		if(showNumShi & 0x08)
  0E91    1DEE    SNZB	0x6E,3
  0E92    0008    RET
411:              		{
412:              			LED1_OUT;
  0E93    1683    SETB	0x3,5
  0E94    1005    CLRB	0x5,0
413:              			LED5_OUT;
414:              			LED5 = 1;
  0E95    2F18    JP	0x718
415:              		}
416:              		break;
417:              		case 5:
418:              		if(showNumShi & 0x10)
  0E96    1E6E    SNZB	0x6E,4
  0E97    0008    RET
419:              		{
420:              			LED2_OUT;
  0E98    1683    SETB	0x3,5
  0E99    1205    CLRB	0x5,4
421:              			LED1_OUT;
  0E9A    1005    CLRB	0x5,0
422:              			LED1 = 1;
  0E9B    1406    SETB	0x6,0
  0E9C    0008    RET
423:              		}
424:              		break;
425:              		case 6:
426:              		if(showNumShi & 0x20)
  0E9D    1EEE    SNZB	0x6E,5
  0E9E    0008    RET
427:              		{
428:              			LED2_OUT;
  0E9F    1683    SETB	0x3,5
  0EA0    1205    CLRB	0x5,4
429:              			LED3_OUT;
  0EA1    1185    CLRB	0x5,3
430:              			LED3 = 1;
  0EA2    1586    SETB	0x6,3
  0EA3    0008    RET
431:              		}
432:              		break;
433:              		case 7:
434:              		if(showNumShi & 0x40)
  0EA4    1F6E    SNZB	0x6E,6
  0EA5    0008    RET
435:              		{
436:              			LED2_OUT;
  0EA6    1683    SETB	0x3,5
  0EA7    1205    CLRB	0x5,4
437:              			LED4_OUT;
  0EA8    1085    CLRB	0x5,1
438:              			LED4 = 1;
  0EA9    1486    SETB	0x6,1
  0EAA    0008    RET
439:              		}
440:              		break;
441:              		case 8:
442:              		if(showNumGe & 0x01)
  0EAB    1C6D    SNZB	0x6D,0
  0EAC    0008    RET
443:              		{
444:              			LED2_OUT;
  0EAD    1683    SETB	0x3,5
  0EAE    1205    CLRB	0x5,4
445:              			LED5_OUT;
446:              			LED5 = 1;
  0EAF    2F18    JP	0x718
447:              		}
448:              		break;
449:              		case 9:
450:              		if(showNumGe & 0x02)
  0EB0    1CED    SNZB	0x6D,1
  0EB1    0008    RET
451:              		{
452:              			LED3_OUT;
  0EB2    1683    SETB	0x3,5
  0EB3    1185    CLRB	0x5,3
453:              			LED1_OUT;
  0EB4    1005    CLRB	0x5,0
454:              			LED1 = 1;
  0EB5    1406    SETB	0x6,0
  0EB6    0008    RET
455:              		}
456:              		break;
457:              		case 10:
458:              		if(showNumGe & 0x04)
  0EB7    1D6D    SNZB	0x6D,2
  0EB8    0008    RET
459:              		{
460:              			LED3_OUT;
  0EB9    1683    SETB	0x3,5
  0EBA    1185    CLRB	0x5,3
461:              			LED2_OUT;
  0EBB    1205    CLRB	0x5,4
462:              			LED2 = 1;
  0EBC    1606    SETB	0x6,4
  0EBD    0008    RET
463:              		}
464:              		break;
465:              		case 11:
466:              		if(showNumGe & 0x08)
  0EBE    1DED    SNZB	0x6D,3
  0EBF    0008    RET
467:              		{
468:              			LED3_OUT;
  0EC0    1683    SETB	0x3,5
  0EC1    1185    CLRB	0x5,3
469:              			LED4_OUT;
  0EC2    1085    CLRB	0x5,1
470:              			LED4 = 1;
  0EC3    1486    SETB	0x6,1
  0EC4    0008    RET
471:              		}
472:              		break;
473:              		case 12:
474:              		if(showNumGe & 0x10)
  0EC5    1E6D    SNZB	0x6D,4
  0EC6    0008    RET
475:              		{
476:              			LED3_OUT;
  0EC7    1683    SETB	0x3,5
  0EC8    1185    CLRB	0x5,3
477:              			LED5_OUT;
478:              			LED5 = 1;
  0EC9    2F18    JP	0x718
479:              		}
480:              		break;
481:              		case 13:
482:              		if(showNumGe & 0x20)
  0ECA    1EED    SNZB	0x6D,5
  0ECB    0008    RET
483:              		{
484:              			LED4_OUT;
  0ECC    1683    SETB	0x3,5
  0ECD    1085    CLRB	0x5,1
485:              			LED1_OUT;
  0ECE    1005    CLRB	0x5,0
486:              			LED1 = 1;
  0ECF    1406    SETB	0x6,0
  0ED0    0008    RET
487:              		}
488:              		break;
489:              		case 14:
490:              		if(showNumGe & 0x40)
  0ED1    1F6D    SNZB	0x6D,6
  0ED2    0008    RET
491:              		{
492:              			LED4_OUT;
  0ED3    1683    SETB	0x3,5
  0ED4    1085    CLRB	0x5,1
493:              			LED2_OUT;
  0ED5    1205    CLRB	0x5,4
494:              			LED2 = 1;
  0ED6    1606    SETB	0x6,4
  0ED7    0008    RET
495:              		}
496:              		break;
497:              		case 15:
498:              		if(firstTime || showNumGe || showNumShi)
  0ED8    086C    LD	A,0x6C
  0ED9    1D03    SNZB	0x3,2
  0EDA    2EE0    JP	0x6E0
  0EDB    086D    LD	A,0x6D
  0EDC    1903    SZB	0x3,2
  0EDD    086E    LD	A,0x6E
  0EDE    1903    SZB	0x3,2
  0EDF    0008    RET
499:              		{
500:              			LED4_OUT;
  0EE0    1683    SETB	0x3,5
  0EE1    1085    CLRB	0x5,1
501:              			LED3_OUT;
  0EE2    1185    CLRB	0x5,3
502:              			LED3 = 1;
  0EE3    1586    SETB	0x6,3
  0EE4    0008    RET
503:              		}
504:              		break;
505:              		case 16:
506:              		if(firstTime > 0 || wuhuaFlag > 0)
  0EE5    086C    LD	A,0x6C
  0EE6    1903    SZB	0x3,2
  0EE7    0843    LD	A,0x43
  0EE8    1903    SZB	0x3,2
  0EE9    0008    RET
507:              		{
508:              			LED4_OUT;
  0EEA    1683    SETB	0x3,5
  0EEB    1085    CLRB	0x5,1
509:              			LED5_OUT;
510:              			LED5 = 1;
  0EEC    2F18    JP	0x718
511:              		}
512:              		break;
513:              		case 17:
514:              		if(firstTime > 0 ||workStep > 0)
  0EED    086C    LD	A,0x6C
  0EEE    1903    SZB	0x3,2
  0EEF    0844    LD	A,0x44
  0EF0    1903    SZB	0x3,2
  0EF1    0008    RET
515:              		{
516:              			LED5_OUT;
  0EF2    1205    CLRB	0x5,4
517:              			LED1_OUT;
  0EF3    1683    SETB	0x3,5
  0EF4    1005    CLRB	0x5,0
518:              			LED1 = 1;
  0EF5    1406    SETB	0x6,0
  0EF6    0008    RET
519:              		}
520:              		break;
521:              		case 18:
522:              		if(firstTime > 0 ||fanKeyFlag > 0)
  0EF7    086C    LD	A,0x6C
  0EF8    1903    SZB	0x3,2
  0EF9    0838    LD	A,0x38
  0EFA    1903    SZB	0x3,2
  0EFB    0008    RET
523:              		{
524:              			LED5_OUT;
  0EFC    1205    CLRB	0x5,4
525:              			LED2_OUT;
  0EFD    1683    SETB	0x3,5
  0EFE    1205    CLRB	0x5,4
526:              			LED2 = 1;
  0EFF    1606    SETB	0x6,4
  0F00    0008    RET
527:              		}
528:              		break;
529:              		case 19:
530:              		if(firstTime > 0 ||wuhuaKeyFlag > 0)
  0F01    086C    LD	A,0x6C
  0F02    1903    SZB	0x3,2
  0F03    0837    LD	A,0x37
  0F04    1903    SZB	0x3,2
  0F05    0008    RET
531:              		{
532:              			LED5_OUT;
  0F06    1205    CLRB	0x5,4
533:              			LED4_OUT;
  0F07    1683    SETB	0x3,5
  0F08    1085    CLRB	0x5,1
534:              			LED4 = 1;
  0F09    1486    SETB	0x6,1
  0F0A    0008    RET
  0F0B    0839    LD	A,0x39
  0F0C    0084    LD	0x4,A
  0F0D    3014    LDIA	0x14
  0F0E    0204    SUBA	0x4
  0F0F    1803    SZB	0x3,0
  0F10    0008    RET
  0F11    3008    LDIA	0x8
  0F12    008A    LD	0xA,A
  0F13    1003    CLRB	0x3,0
  0F14    0D04    RLCA	0x4
  0F15    3E00    ADDIA	0x0
  0F16    0082    LD	0x2,A
  0F17    0008    RET
535:              		}
536:              		break;
537:              		default:
538:              		break;
539:              	}
540:              
541:              }
542:              
543:              void showBatLed()
544:              {
545:              	showNumShi = numArray[showBatStep/10];
  0DFD    300A    LDIA	0xA
  0DFE    00F3    LD	0x73,A
  0DFF    0836    LD	A,0x36
  0E00    2611    CALL	0x611
  0E01    3E01    ADDIA	0x1
  0E02    0084    LD	0x4,A
  0E03    158A    SETB	0xA,3
  0E04    2028    CALL	0x28
  0E05    158A    SETB	0xA,3
  0E06    00EE    LD	0x6E,A
546:              	showNumGe = numArray[showBatStep%10];
  0E07    300A    LDIA	0xA
  0E08    00F3    LD	0x73,A
  0E09    0836    LD	A,0x36
  0E0A    262C    CALL	0x62C
  0E0B    3E01    ADDIA	0x1
  0E0C    0084    LD	0x4,A
  0E0D    158A    SETB	0xA,3
  0E0E    2028    CALL	0x28
  0E0F    00ED    LD	0x6D,A
  0E10    0008    RET
547:              }
548:              
549:              void setBatStep()
550:              {
551:              	if(lowBatLock == 1)
  0F1C    1283    CLRB	0x3,5
  0F1D    0B3C    SZDECA	0x3C
  0F1E    2F22    JP	0x722
552:              	{
553:              		showBatStep = 0;
  0F1F    01B6    CLR	0x36
554:              		curBatStep = 0;
  0F20    01B5    CLR	0x35
555:              	}
  0F21    0008    RET
556:              	else if(power_ad < 2800)
  0F22    300A    LDIA	0xA
  0F23    0227    SUBA	0x27
  0F24    30F0    LDIA	0xF0
  0F25    1903    SZB	0x3,2
  0F26    0226    SUBA	0x26
  0F27    1803    SZB	0x3,0
  0F28    2F3F    JP	0x73F
557:              	{
558:              		if(count10s == 0 && count1s == 0)
  0F29    0841    LD	A,0x41
  0F2A    1D03    SNZB	0x3,2
  0F2B    2F3C    JP	0x73C
  0F2C    0845    LD	A,0x45
  0F2D    1D03    SNZB	0x3,2
  0F2E    2F3C    JP	0x73C
559:              		{
560:              			if(showBatStep > 1)
  0F2F    3002    LDIA	0x2
  0F30    0236    SUBA	0x36
  0F31    1C03    SNZB	0x3,0
  0F32    2F38    JP	0x738
561:              			{
562:              				if(chrgFlag == 0)
  0F33    083F    LD	A,0x3F
  0F34    1D03    SNZB	0x3,2
  0F35    2F3A    JP	0x73A
563:              					showBatStep--;
  0F36    03B6    DECR	0x36
  0F37    2F3A    JP	0x73A
564:              			}
565:              			else
566:              			{
567:              				showBatStep = 1;
  0F38    01B6    CLR	0x36
  0F39    0AB6    INCR	0x36
568:              			}
569:              			curBatStep = 1;
  0F3A    01B5    CLR	0x35
  0F3B    0AB5    INCR	0x35
570:              		}
571:              		curBatStep = 1;
  0F3C    01B5    CLR	0x35
  0F3D    0AB5    INCR	0x35
572:              	}
  0F3E    0008    RET
573:              	else
574:              	{
575:              		if(power_ad < 3600)
  0F3F    300E    LDIA	0xE
  0F40    0227    SUBA	0x27
  0F41    3010    LDIA	0x10
  0F42    1903    SZB	0x3,2
  0F43    0226    SUBA	0x26
  0F44    1803    SZB	0x3,0
  0F45    2F55    JP	0x755
576:              		{
577:              			curBatStep = (power_ad - 2800)/80;
  0F46    3050    LDIA	0x50
  0F47    00F3    LD	0x73,A
  0F48    01F4    CLR	0x74
  0F49    0826    LD	A,0x26
  0F4A    3E10    ADDIA	0x10
  0F4B    00F5    LD	0x75,A
  0F4C    0827    LD	A,0x27
  0F4D    1803    SZB	0x3,0
  0F4E    3E01    ADDIA	0x1
  0F4F    3EF5    ADDIA	0xF5
  0F50    00F6    LD	0x76,A
  0F51    27D6    CALL	0x7D6
  0F52    158A    SETB	0xA,3
  0F53    0873    LD	A,0x73
  0F54    2F64    JP	0x764
578:              		}
579:              		else
580:              		{
581:              			curBatStep = 20 + ((power_ad - 3600)/6);
  0F55    3006    LDIA	0x6
  0F56    00F3    LD	0x73,A
  0F57    01F4    CLR	0x74
  0F58    0826    LD	A,0x26
  0F59    3EF0    ADDIA	0xF0
  0F5A    00F5    LD	0x75,A
  0F5B    0827    LD	A,0x27
  0F5C    1803    SZB	0x3,0
  0F5D    3E01    ADDIA	0x1
  0F5E    3EF1    ADDIA	0xF1
  0F5F    00F6    LD	0x76,A
  0F60    27D6    CALL	0x7D6
  0F61    158A    SETB	0xA,3
  0F62    0873    LD	A,0x73
  0F63    3E14    ADDIA	0x14
  0F64    00B5    LD	0x35,A
582:              		}
583:              		if(curBatStep > 99)
  0F65    3064    LDIA	0x64
  0F66    0235    SUBA	0x35
  0F67    1C03    SNZB	0x3,0
  0F68    2F6B    JP	0x76B
584:              		{
585:              			curBatStep = 99;
  0F69    3063    LDIA	0x63
  0F6A    00B5    LD	0x35,A
586:              		}
587:              
588:              		if(chrgFlag)
  0F6B    083F    LD	A,0x3F
  0F6C    1903    SZB	0x3,2
  0F6D    2FA7    JP	0x7A7
589:              		{
590:              			if(chrgFullFlag && showBatStep < 99)
  0F6E    083E    LD	A,0x3E
  0F6F    1903    SZB	0x3,2
  0F70    2F85    JP	0x785
  0F71    3063    LDIA	0x63
  0F72    0236    SUBA	0x36
  0F73    1803    SZB	0x3,0
  0F74    2F85    JP	0x785
591:              			{
592:              				if(++count15s >= 7500)
  0F75    1683    SETB	0x3,5
  0F76    0AB4    INCR	0x34
  0F77    1903    SZB	0x3,2
  0F78    0AB5    INCR	0x35
  0F79    301D    LDIA	0x1D
  0F7A    0235    SUBA	0x35
  0F7B    304C    LDIA	0x4C
  0F7C    1903    SZB	0x3,2
  0F7D    0234    SUBA	0x34
  0F7E    1C03    SNZB	0x3,0
  0F7F    2F88    JP	0x788
593:              				{
594:              					count15s = 0;
  0F80    01B4    CLR	0x34
  0F81    01B5    CLR	0x35
595:              					showBatStep++;
  0F82    1283    CLRB	0x3,5
  0F83    0AB6    INCR	0x36
  0F84    2F88    JP	0x788
596:              				}
597:              			}
598:              			else
599:              			{
600:              				count15s = 0;
  0F85    1683    SETB	0x3,5
  0F86    01B4    CLR	0x34
  0F87    01B5    CLR	0x35
601:              			}
602:              			if(curBatStep > showBatStep)
  0F88    1283    CLRB	0x3,5
  0F89    0835    LD	A,0x35
  0F8A    0236    SUBA	0x36
  0F8B    1803    SZB	0x3,0
  0F8C    2FA3    JP	0x7A3
603:              			{
604:              				if(++count30s >= 15000 && showBatStep < 99)	//60s
  0F8D    1683    SETB	0x3,5
  0F8E    0AB6    INCR	0x36
  0F8F    1903    SZB	0x3,2
  0F90    0AB7    INCR	0x37
  0F91    303A    LDIA	0x3A
  0F92    0237    SUBA	0x37
  0F93    3098    LDIA	0x98
  0F94    1903    SZB	0x3,2
  0F95    0236    SUBA	0x36
  0F96    1C03    SNZB	0x3,0
  0F97    0008    RET
  0F98    3063    LDIA	0x63
  0F99    1283    CLRB	0x3,5
  0F9A    0236    SUBA	0x36
  0F9B    1803    SZB	0x3,0
  0F9C    0008    RET
605:              				{	
606:              					count30s = 0;
  0F9D    1683    SETB	0x3,5
  0F9E    01B6    CLR	0x36
  0F9F    01B7    CLR	0x37
607:              					showBatStep++;
  0FA0    1283    CLRB	0x3,5
  0FA1    0AB6    INCR	0x36
  0FA2    0008    RET
608:              				}
609:              				
610:              			}
611:              			else
612:              			{
613:              				count30s = 0;
  0FA3    1683    SETB	0x3,5
  0FA4    01B6    CLR	0x36
  0FA5    01B7    CLR	0x37
  0FA6    0008    RET
614:              			}
615:              		}
616:              		else
617:              		{
618:              			u16t tempSubBatTime = 15000;
  0FA7    3098    LDIA	0x98
  0FA8    00CC    LD	0x4C,A
  0FA9    303A    LDIA	0x3A
  0FAA    00CD    LD	0x4D,A
619:              			if(showBatStep < 40)
  0FAB    3028    LDIA	0x28
  0FAC    0236    SUBA	0x36
  0FAD    1803    SZB	0x3,0
  0FAE    2FB3    JP	0x7B3
620:              			{
621:              				tempSubBatTime = 8000;
  0FAF    3040    LDIA	0x40
  0FB0    00CC    LD	0x4C,A
  0FB1    301F    LDIA	0x1F
  0FB2    00CD    LD	0x4D,A
622:              			}
623:              			if(curBatStep < showBatStep && showBatStep > 1)
  0FB3    0836    LD	A,0x36
  0FB4    0235    SUBA	0x35
  0FB5    1803    SZB	0x3,0
  0FB6    2FA3    JP	0x7A3
  0FB7    3002    LDIA	0x2
  0FB8    0236    SUBA	0x36
  0FB9    1C03    SNZB	0x3,0
  0FBA    2FA3    JP	0x7A3
624:              			{
625:              				if(++count30s >= tempSubBatTime && showBatStep > 1)	//60s
  0FBB    1683    SETB	0x3,5
  0FBC    0AB6    INCR	0x36
  0FBD    1903    SZB	0x3,2
  0FBE    0AB7    INCR	0x37
  0FBF    1283    CLRB	0x3,5
  0FC0    084D    LD	A,0x4D
  0FC1    1683    SETB	0x3,5
  0FC2    0237    SUBA	0x37
  0FC3    1D03    SNZB	0x3,2
  0FC4    2FC9    JP	0x7C9
  0FC5    1283    CLRB	0x3,5
  0FC6    084C    LD	A,0x4C
  0FC7    1683    SETB	0x3,5
  0FC8    0236    SUBA	0x36
  0FC9    1C03    SNZB	0x3,0
  0FCA    0008    RET
  0FCB    3002    LDIA	0x2
  0FCC    1283    CLRB	0x3,5
  0FCD    0236    SUBA	0x36
  0FCE    1C03    SNZB	0x3,0
  0FCF    0008    RET
626:              				{	
627:              					count30s = 0;
  0FD0    1683    SETB	0x3,5
  0FD1    01B6    CLR	0x36
  0FD2    01B7    CLR	0x37
628:              					showBatStep--;
  0FD3    1283    CLRB	0x3,5
  0FD4    03B6    DECR	0x36
  0FD5    0008    RET
629:              				}
630:              			}
631:              			else
632:              			{
633:              				count30s = 0;
634:              			}
635:              		}
636:              		
637:              	}
638:              }
639:              
640:              void chrgCtr()
641:              {
642:              	if(PORTB & 0x01)
  0DCC    1283    CLRB	0x3,5
  0DCD    1303    CLRB	0x3,6
  0DCE    1C06    SNZB	0x6,0
  0DCF    2DE3    JP	0x5E3
643:              	{
644:              		chrgFlag = 1;
  0DD0    01BF    CLR	0x3F
  0DD1    0ABF    INCR	0x3F
645:              		firstLock = 0;
  0DD2    01EB    CLR	0x6B
646:              		lowBatLock = 0;
  0DD3    01BC    CLR	0x3C
647:              		showBatLed();
  0DD4    25FD    CALL	0x5FD
  0DD5    158A    SETB	0xA,3
648:              		if(PORTB & 0x02)
  0DD6    1C86    SNZB	0x6,1
  0DD7    2DE1    JP	0x5E1
649:              		{
650:              			if(++chrgFullTime > 200)
  0DD8    30C9    LDIA	0xC9
  0DD9    0ABD    INCR	0x3D
  0DDA    023D    SUBA	0x3D
  0DDB    1C03    SNZB	0x3,0
  0DDC    0008    RET
651:              			{
652:              				chrgFullTime = 0;
  0DDD    01BD    CLR	0x3D
653:              				chrgFullFlag = 1;
  0DDE    01BE    CLR	0x3E
  0DDF    0ABE    INCR	0x3E
  0DE0    0008    RET
654:              			}
655:              		}
656:              		else
657:              		{
658:              			chrgFullTime = 0;
  0DE1    01BD    CLR	0x3D
  0DE2    0008    RET
659:              		}
660:              
661:              	}
662:              	else
663:              	{
664:              		chrgFlag = 0;
  0DE3    01BF    CLR	0x3F
665:              		chrgFullTime = 0;
  0DE4    01BD    CLR	0x3D
666:              		chrgFullFlag = 0;
  0DE5    01BE    CLR	0x3E
667:              		
668:              		if(firstTime == 0)
  0DE6    086C    LD	A,0x6C
  0DE7    1D03    SNZB	0x3,2
  0DE8    2DF3    JP	0x5F3
669:              		{
670:              			if(workStep == 0 && wuhuaFlag == 0)
  0DE9    0844    LD	A,0x44
  0DEA    1D03    SNZB	0x3,2
  0DEB    2DF2    JP	0x5F2
  0DEC    0843    LD	A,0x43
  0DED    1D03    SNZB	0x3,2
  0DEE    2DF2    JP	0x5F2
671:              			{
672:              				showNumShi = 0;
  0DEF    01EE    CLR	0x6E
673:              				showNumGe = 0;
  0DF0    01ED    CLR	0x6D
674:              			}
  0DF1    0008    RET
675:              			else
676:              			{
677:              				showBatLed();
  0DF2    2DFD    JP	0x5FD
678:              			}
679:              		}
680:              		else
681:              		{
682:              			if(showBatStep < curBatStep)
  0DF3    0835    LD	A,0x35
  0DF4    0236    SUBA	0x36
  0DF5    1803    SZB	0x3,0
  0DF6    2DF9    JP	0x5F9
683:              			{
684:              				showBatStep = curBatStep;
  0DF7    0835    LD	A,0x35
  0DF8    00B6    LD	0x36,A
685:              			}
686:              			showNumShi = 0x7F;
  0DF9    307F    LDIA	0x7F
  0DFA    00EE    LD	0x6E,A
687:              			showNumGe = 0x7F;
  0DFB    00ED    LD	0x6D,A
  0DFC    0008    RET
688:              		}
689:              	}
690:              }
691:              
692:              void keyLedCtr()
693:              {
694:              	if(shanshuoTime > 0)
  06E9    082A    LD	A,0x2A
  06EA    042B    ORA	0x2B
  06EB    1903    SZB	0x3,2
  06EC    2F05    JP	0x705
695:              	{
696:              		shanshuoTime--;
  06ED    3001    LDIA	0x1
  06EE    02AA    SUBR	0x2A
  06EF    3000    LDIA	0x0
  06F0    1C03    SNZB	0x3,0
  06F1    03AB    DECR	0x2B
  06F2    02AB    SUBR	0x2B
697:              		if((shanshuoTime % 75) < 37)
  06F3    304B    LDIA	0x4B
  06F4    00F3    LD	0x73,A
  06F5    01F4    CLR	0x74
  06F6    082B    LD	A,0x2B
  06F7    00F6    LD	0x76,A
  06F8    082A    LD	A,0x2A
  06F9    00F5    LD	0x75,A
  06FA    272D    CALL	0x72D
  06FB    118A    CLRB	0xA,3
  06FC    3000    LDIA	0x0
  06FD    0274    SUBA	0x74
  06FE    3025    LDIA	0x25
  06FF    1903    SZB	0x3,2
  0700    0273    SUBA	0x73
  0701    1803    SZB	0x3,0
  0702    2F08    JP	0x708
698:              		{
699:              			fanKeyFlag = 0;
  0703    01B8    CLR	0x38
700:              		}
  0704    2F0A    JP	0x70A
701:              		else
702:              		{
703:              			fanKeyFlag = 1;
  0708    01B8    CLR	0x38
  0709    0AB8    INCR	0x38
704:              		}
705:              	}
706:              	else if(workStep > 0)
  0705    0844    LD	A,0x44
  0706    1903    SZB	0x3,2
  0707    2F03    JP	0x703
707:              	{
708:              		fanKeyFlag = 1;
709:              	}
710:              	else
711:              	{
712:              		fanKeyFlag = 0;
713:              	}
714:              	
715:              	if(shanshuoTime2 > 0)
  070A    0828    LD	A,0x28
  070B    0429    ORA	0x29
  070C    1903    SZB	0x3,2
  070D    2F29    JP	0x729
716:              	{
717:              		shanshuoTime2--;
  070E    3001    LDIA	0x1
  070F    02A8    SUBR	0x28
  0710    3000    LDIA	0x0
  0711    1C03    SNZB	0x3,0
  0712    03A9    DECR	0x29
  0713    02A9    SUBR	0x29
718:              		if((shanshuoTime2 % 75) < 37)
  0714    304B    LDIA	0x4B
  0715    00F3    LD	0x73,A
  0716    01F4    CLR	0x74
  0717    0829    LD	A,0x29
  0718    00F6    LD	0x76,A
  0719    0828    LD	A,0x28
  071A    00F5    LD	0x75,A
  071B    272D    CALL	0x72D
  071C    118A    CLRB	0xA,3
  071D    3000    LDIA	0x0
  071E    0274    SUBA	0x74
  071F    3025    LDIA	0x25
  0720    1903    SZB	0x3,2
  0721    0273    SUBA	0x73
  0722    1803    SZB	0x3,0
  0723    2F26    JP	0x726
719:              		{
720:              			wuhuaKeyFlag = 0;
  0724    01B7    CLR	0x37
721:              		}
  0725    0008    RET
722:              		else
723:              		{
724:              			wuhuaKeyFlag = 1;
  0726    01B7    CLR	0x37
  0727    0AB7    INCR	0x37
  0728    0008    RET
725:              		}
726:              	}
727:              	else if(wuhuaFlag > 0)
  0729    0843    LD	A,0x43
  072A    1D03    SNZB	0x3,2
  072B    2F26    JP	0x726
  072C    2F24    JP	0x724
728:              	{
729:              		wuhuaKeyFlag = 1;
730:              	}
731:              	else
732:              	{
733:              		wuhuaKeyFlag = 0;
734:              	}
735:              	
736:              }
737:              
738:              void pwmInit()
739:              {
740:              
741:              	PWMTH = 0x00;
  0777    0198    CLR	0x18
742:              	PWMTL = 73;
  0778    3049    LDIA	0x49
  0779    0097    LD	0x17,A
743:              	PWMD01H = 0x00;
  077A    019E    CLR	0x1E
744:              	PWMD0L = 32;
  077B    3020    LDIA	0x20
  077C    0099    LD	0x19,A
745:              	PWMCON1 = 0x40;
  077D    3040    LDIA	0x40
  077E    0096    LD	0x16,A
746:              	PWMCON2 = 0x00;
  077F    019D    CLR	0x1D
747:              	PWMCON0 |= 0x21;
  0780    3021    LDIA	0x21
  0781    0495    ORR	0x15
  0782    0008    RET
748:              }
749:              
750:              void pwmStop()
751:              {
752:              	PWMD0L = 0;
  0783    0199    CLR	0x19
753:              	PWMCON0 &= 0xFE;
  0784    1015    CLRB	0x15,0
754:              	PORTA &= 0xDF;
  0785    1683    SETB	0x3,5
  0786    1286    CLRB	0x6,5
  0787    0008    RET
755:              }
756:              
757:              void fanInit()
758:              {
759:              
760:              	PWMTH = 0x00;
  0751    0198    CLR	0x18
761:              	PWMTL = 73;
  0752    3049    LDIA	0x49
  0753    0097    LD	0x17,A
762:              	PWMD01H = 0x00;
  0754    019E    CLR	0x1E
763:              	PWMD1L = fanDuty;
  0755    0842    LD	A,0x42
  0756    009A    LD	0x1A,A
764:              	PWMCON1 = 0x40;
  0757    3040    LDIA	0x40
  0758    0096    LD	0x16,A
765:              	PWMCON2 = 0x00;
  0759    019D    CLR	0x1D
766:              	PWMCON0 |= 0x22;
  075A    3022    LDIA	0x22
  075B    0495    ORR	0x15
  075C    0008    RET
767:              }
768:              
769:              void fanStop()
770:              {
771:              	PWMD1L = 0;
  075D    019A    CLR	0x1A
772:              	PWMCON0 &= 0xFD;
  075E    1095    CLRB	0x15,1
773:              	PORTB &= 0x7F;
  075F    1386    CLRB	0x6,7
  0760    0008    RET
774:              }
775:              
776:              void fanCtr()
777:              {
778:              	if(workStep > 0)
  040C    0844    LD	A,0x44
  040D    1903    SZB	0x3,2
  040E    2C6C    JP	0x46C
779:              	{
780:              		PORTA |= 0x04;
  040F    1683    SETB	0x3,5
  0410    1506    SETB	0x6,2
781:              		u8t maxFanValue = 52;
  0411    3034    LDIA	0x34
  0412    1283    CLRB	0x3,5
  0413    00D6    LD	0x56,A
782:              		if(workStep == 1)
  0414    0B44    SZDECA	0x44
  0415    2C18    JP	0x418
783:              		{	
784:              			maxFanValue = 40;
  0416    3028    LDIA	0x28
  0417    00D6    LD	0x56,A
  0418    300D    LDIA	0xD
785:              		}
786:              		test_adc = ADC_Sample(13, 0);
  0419    01F3    CLR	0x73
  041A    2619    CALL	0x619
  041B    118A    CLRB	0xA,3
  041C    00B4    LD	0x34,A
787:              		if (0xA5 == test_adc)
  041D    30A5    LDIA	0xA5
  041E    0634    XORA	0x34
  041F    1D03    SNZB	0x3,2
  0420    2C4B    JP	0x44B
788:              		{
789:              			volatile unsigned long fan_temp;
790:              			if(power_ad > 0)
  0421    0826    LD	A,0x26
  0422    0427    ORA	0x27
  0423    1903    SZB	0x3,2
  0424    2C4B    JP	0x44B
791:              			{
792:              				fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  0425    0847    LD	A,0x47
  0426    00C9    LD	0x49,A
  0427    0848    LD	A,0x48
  0428    00CA    LD	0x4A,A
  0429    01CB    CLR	0x4B
  042A    01CC    CLR	0x4C
  042B    0826    LD	A,0x26
  042C    00CD    LD	0x4D,A
  042D    0827    LD	A,0x27
  042E    00CE    LD	0x4E,A
  042F    01CF    CLR	0x4F
  0430    01D0    CLR	0x50
  0431    2471    CALL	0x471
  0432    118A    CLRB	0xA,3
  0433    084C    LD	A,0x4C
  0434    00DA    LD	0x5A,A
  0435    084B    LD	A,0x4B
  0436    00D9    LD	0x59,A
  0437    084A    LD	A,0x4A
  0438    00D8    LD	0x58,A
  0439    0849    LD	A,0x49
  043A    00D7    LD	0x57,A
  043B    300C    LDIA	0xC
  043C    1003    CLRB	0x3,0
  043D    0CDA    RRCR	0x5A
  043E    0CD9    RRCR	0x59
  043F    0CD8    RRCR	0x58
  0440    0CD7    RRCR	0x57
  0441    3EFF    ADDIA	0xFF
  0442    1D03    SNZB	0x3,2
  0443    2C3C    JP	0x43C
793:              				fanValue = (unsigned int)(fan_temp);
  0444    0858    LD	A,0x58
  0445    1683    SETB	0x3,5
  0446    00B9    LD	0x39,A
  0447    1283    CLRB	0x3,5
  0448    0857    LD	A,0x57
  0449    1683    SETB	0x3,5
  044A    00B8    LD	0x38,A
794:              			}
795:              		}
796:              		if(fanValue > 1300)		//原来的值是1.3V
  044B    3005    LDIA	0x5
  044C    1683    SETB	0x3,5
  044D    0239    SUBA	0x39
  044E    3015    LDIA	0x15
  044F    1903    SZB	0x3,2
  0450    0238    SUBA	0x38
  0451    1C03    SNZB	0x3,0
  0452    2C5F    JP	0x45F
797:              		{
798:              			if(++fanOverTime > 25)
  0453    301A    LDIA	0x1A
  0454    1283    CLRB	0x3,5
  0455    0AC0    INCR	0x40
  0456    0240    SUBA	0x40
  0457    1C03    SNZB	0x3,0
  0458    2C61    JP	0x461
  0459    30E1    LDIA	0xE1
799:              			{
800:              				fanOverTime = 0;
  045A    01C0    CLR	0x40
801:              				workStep = 0;
  045B    01C4    CLR	0x44
802:              				shanshuoTime = 225;
  045C    00AA    LD	0x2A,A
  045D    01AB    CLR	0x2B
  045E    2C61    JP	0x461
803:              			}
804:              		}
805:              		else
806:              		{
807:              			fanOverTime = 0;
  045F    1283    CLRB	0x3,5
  0460    01C0    CLR	0x40
808:              		}
809:              		if(fanDuty < maxFanValue)
  0461    0856    LD	A,0x56
  0462    0242    SUBA	0x42
  0463    1803    SZB	0x3,0
  0464    2C67    JP	0x467
810:              		{
811:              			fanDuty++;
  0465    0AC2    INCR	0x42
812:              		}
  0466    2C6B    JP	0x46B
813:              		else if(fanDuty > maxFanValue)
  0467    0842    LD	A,0x42
  0468    0256    SUBA	0x56
  0469    1C03    SNZB	0x3,0
814:              		{
815:              			fanDuty--;
  046A    03C2    DECR	0x42
816:              		}
817:              		fanInit();
  046B    2F51    JP	0x751
818:              	}
819:              	else
820:              	{
821:              		fanStop();
  046C    275D    CALL	0x75D
822:              		fanDuty = 0;
  046D    01C2    CLR	0x42
823:              		PORTA &= 0xFB;
  046E    1683    SETB	0x3,5
  046F    1106    CLRB	0x6,2
  0470    0008    RET
824:              	}
825:              }
826:              
827:              void wuhuaCtr()
828:              {
829:              	if(count1s == 0)
  0761    1283    CLRB	0x3,5
  0762    0845    LD	A,0x45
  0763    1D03    SNZB	0x3,2
  0764    2F6A    JP	0x76A
830:              	{
831:              		if(++count10s >= 10)
  0765    300A    LDIA	0xA
  0766    0AC1    INCR	0x41
  0767    0241    SUBA	0x41
  0768    1803    SZB	0x3,0
832:              		{
833:              			count10s = 0;
  0769    01C1    CLR	0x41
834:              		}
835:              	}
836:              	if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  076A    0343    DECA	0x43
  076B    1903    SZB	0x3,2
  076C    2F75    JP	0x775
  076D    3002    LDIA	0x2
  076E    0643    XORA	0x43
  076F    1D03    SNZB	0x3,2
  0770    2F76    JP	0x776
  0771    3005    LDIA	0x5
  0772    0241    SUBA	0x41
  0773    1803    SZB	0x3,0
  0774    2F76    JP	0x776
837:              	{
838:              		pwmInit();
  0775    2F77    JP	0x777
839:              		/*
840:              		if(++checkTime > 200)
841:              		{
842:              			if(lowWaterTime > 110)
843:              			{
844:              				//干烧状态
845:              				wuhuaFlag = 0;
846:              				shanshuoTime2 = 450;
847:              			}
848:              			checkTime = 0;
849:              			lowWaterTime = 0;
850:              		}
851:              		*/
852:              		
853:              	}
854:              	else
855:              	{
856:              		pwmStop();
  0776    2F83    JP	0x783
857:              	}
858:              }
859:              
860:              
861:              void workCtr()
  04A4    301F    LDIA	0x1F
862:              {
863:              	test_adc = ADC_Sample(31, 0);		//测试内部基准1.2V相对电源的AD值
  04A5    01F3    CLR	0x73
  04A6    2619    CALL	0x619
  04A7    118A    CLRB	0xA,3
  04A8    00B4    LD	0x34,A
864:              	if (0xA5 == test_adc)
  04A9    30A5    LDIA	0xA5
  04AA    0634    XORA	0x34
  04AB    1D03    SNZB	0x3,2
  04AC    2CDE    JP	0x4DE
865:              	{
866:              		volatile unsigned long power_temp;
867:              			
868:              		power_temp = (unsigned long)((POWER_RATIO)/adresult);		//1.2*4096/AD=VDD，参数放大1000倍 
  04AD    3096    LDIA	0x96
  04AE    01D2    CLR	0x52
  04AF    00D3    LD	0x53,A
  04B0    304A    LDIA	0x4A
  04B1    00D4    LD	0x54,A
  04B2    0848    LD	A,0x48
  04B3    00CD    LD	0x4D,A
  04B4    0847    LD	A,0x47
  04B5    00CC    LD	0x4C,A
  04B6    25CB    CALL	0x5CB
  04B7    118A    CLRB	0xA,3
  04B8    084C    LD	A,0x4C
  04B9    00CF    LD	0x4F,A
  04BA    084D    LD	A,0x4D
  04BB    00D0    LD	0x50,A
  04BC    084E    LD	A,0x4E
  04BD    00D1    LD	0x51,A
  04BE    2510    CALL	0x510
  04BF    118A    CLRB	0xA,3
  04C0    084F    LD	A,0x4F
  04C1    00DE    LD	0x5E,A
  04C2    0850    LD	A,0x50
  04C3    00DF    LD	0x5F,A
  04C4    0851    LD	A,0x51
  04C5    00E0    LD	0x60,A
  04C6    2572    CALL	0x572
  04C7    118A    CLRB	0xA,3
  04C8    0861    LD	A,0x61
  04C9    1683    SETB	0x3,5
  04CA    00C1    LD	0x41,A
  04CB    1283    CLRB	0x3,5
  04CC    0860    LD	A,0x60
  04CD    1683    SETB	0x3,5
  04CE    00C0    LD	0x40,A
  04CF    1283    CLRB	0x3,5
  04D0    085F    LD	A,0x5F
  04D1    1683    SETB	0x3,5
  04D2    00BF    LD	0x3F,A
  04D3    1283    CLRB	0x3,5
  04D4    085E    LD	A,0x5E
  04D5    1683    SETB	0x3,5
  04D6    00BE    LD	0x3E,A
869:              		power_ad = (unsigned int)(power_temp);		//通过内部基准电压推出芯片VDD电压
  04D7    083F    LD	A,0x3F
  04D8    1283    CLRB	0x3,5
  04D9    00A7    LD	0x27,A
  04DA    1683    SETB	0x3,5
  04DB    083E    LD	A,0x3E
  04DC    1283    CLRB	0x3,5
  04DD    00A6    LD	0x26,A
870:              	}
871:              	if(workStep == 2 && power_ad < 2900)
  04DE    3002    LDIA	0x2
  04DF    0644    XORA	0x44
  04E0    1D03    SNZB	0x3,2
  04E1    2CF2    JP	0x4F2
  04E2    300B    LDIA	0xB
  04E3    0227    SUBA	0x27
  04E4    3054    LDIA	0x54
  04E5    1903    SZB	0x3,2
  04E6    0226    SUBA	0x26
  04E7    1803    SZB	0x3,0
  04E8    2CF2    JP	0x4F2
872:              	{
873:              		if(++lowFanTime > 200)
  04E9    30C9    LDIA	0xC9
  04EA    0ABA    INCR	0x3A
  04EB    023A    SUBA	0x3A
  04EC    1C03    SNZB	0x3,0
  04ED    2CF3    JP	0x4F3
874:              		{
875:              			lowFanTime = 0;
  04EE    01BA    CLR	0x3A
876:              			workStep = 1;
  04EF    01C4    CLR	0x44
  04F0    0AC4    INCR	0x44
  04F1    2CF3    JP	0x4F3
877:              		}
878:              	}
879:              	else
880:              	{
881:              		lowFanTime = 0;
  04F2    01BA    CLR	0x3A
882:              	}	
883:              	if(power_ad < 2800)
  04F3    300A    LDIA	0xA
  04F4    0227    SUBA	0x27
  04F5    30F0    LDIA	0xF0
  04F6    1903    SZB	0x3,2
  04F7    0226    SUBA	0x26
  04F8    1803    SZB	0x3,0
  04F9    2D05    JP	0x505
884:              	{
885:              		if(++lowBatTime > 200)
  04FA    30C9    LDIA	0xC9
  04FB    0ABB    INCR	0x3B
  04FC    023B    SUBA	0x3B
  04FD    1C03    SNZB	0x3,0
  04FE    2D06    JP	0x506
886:              		{
887:              			lowBatTime = 0;
  04FF    01BB    CLR	0x3B
888:              			lowBatLock = 1;
  0500    01BC    CLR	0x3C
  0501    0ABC    INCR	0x3C
889:              			workStep = 0;
  0502    01C4    CLR	0x44
890:              			wuhuaFlag = 0;
  0503    01C3    CLR	0x43
  0504    2D06    JP	0x506
891:              		}
892:              	}
893:              	else
894:              	{
895:              		lowBatTime = 0;
  0505    01BB    CLR	0x3B
896:              	}
897:              	if(firstTime > 0)
  0506    086C    LD	A,0x6C
  0507    1903    SZB	0x3,2
  0508    2D0B    JP	0x50B
898:              	{
899:              		firstTime--;
  0509    03EC    DECR	0x6C
900:              	}
  050A    0008    RET
901:              	else
902:              	{
903:              		keyLedCtr();
  050B    26E9    CALL	0x6E9
  050C    118A    CLRB	0xA,3
904:              		fanCtr();
  050D    240C    CALL	0x40C
  050E    118A    CLRB	0xA,3
905:              		wuhuaCtr();
  050F    2F61    JP	0x761
906:              	}
907:              	
908:              }
909:              
910:              /***********************************************************
911:              主循环
912:              ***********************************************************/
913:              void main()
914:              {
915:              	Init_System();
  0D85    118A    CLRB	0xA,3
  0D86    2024    CALL	0x24
  0D87    158A    SETB	0xA,3
916:              	firstLock = 1;
  0D88    1283    CLRB	0x3,5
  0D89    30FA    LDIA	0xFA
  0D8A    01EB    CLR	0x6B
  0D8B    0AEB    INCR	0x6B
917:              	firstTime = 250;
  0D8C    00EC    LD	0x6C,A
918:              	while(1)
919:              	{
920:              
921:              		if(B_MainLoop)
  0D8D    1F78    SNZB	0x78,6
  0D8E    2D8D    JP	0x58D
922:              		{
923:              			B_MainLoop = 0;
  0D8F    1378    CLRB	0x78,6
  0D90    0064    CLRWDT
924:              			CLRWDT();
925:              			CheckTouchKey();
  0D91    118A    CLRB	0xA,3
  0D92    2077    CALL	0x77
  0D93    158A    SETB	0xA,3
926:              			chrgCtr();
  0D94    158A    SETB	0xA,3
  0D95    25CC    CALL	0x5CC
  0D96    158A    SETB	0xA,3
927:              			Refurbish_Sfr();
  0D97    118A    CLRB	0xA,3
  0D98    2396    CALL	0x396
  0D99    158A    SETB	0xA,3
928:              			KeyServer();
  0D9A    118A    CLRB	0xA,3
  0D9B    27B5    CALL	0x7B5
  0D9C    158A    SETB	0xA,3
929:              			workCtr();
  0D9D    118A    CLRB	0xA,3
  0D9E    24A4    CALL	0x4A4
  0D9F    158A    SETB	0xA,3
930:              			setBatStep();
  0DA0    158A    SETB	0xA,3
  0DA1    271C    CALL	0x71C
  0DA2    158A    SETB	0xA,3
931:              			if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && shanshuoTime == 0 && shanshuoTime2 == 0)
  0DA3    1283    CLRB	0x3,5
  0DA4    086C    LD	A,0x6C
  0DA5    1D03    SNZB	0x3,2
  0DA6    2DBD    JP	0x5BD
  0DA7    083F    LD	A,0x3F
  0DA8    1D03    SNZB	0x3,2
  0DA9    2DBD    JP	0x5BD
  0DAA    0844    LD	A,0x44
  0DAB    1D03    SNZB	0x3,2
  0DAC    2DBD    JP	0x5BD
  0DAD    0843    LD	A,0x43
  0DAE    1D03    SNZB	0x3,2
  0DAF    2DBD    JP	0x5BD
  0DB0    082A    LD	A,0x2A
  0DB1    042B    ORA	0x2B
  0DB2    1D03    SNZB	0x3,2
  0DB3    2DBD    JP	0x5BD
  0DB4    0828    LD	A,0x28
  0DB5    0429    ORA	0x29
  0DB6    1D03    SNZB	0x3,2
  0DB7    2DBD    JP	0x5BD
932:              			{
933:              				PORTA &= 0xE4;
934:              				PORTB &= 0xEF;
935:              				TRISA |= 0x1B;
936:              				TRISB |= 0x10;
  0DB8    25C1    CALL	0x5C1
937:              				WorkSleep();
  0DB9    118A    CLRB	0xA,3
  0DBA    2041    CALL	0x41
  0DBB    158A    SETB	0xA,3
938:              			}
  0DBC    2D8D    JP	0x58D
939:              			else
940:              			{
941:              				time = 0;
  0DBD    1683    SETB	0x3,5
  0DBE    01BA    CLR	0x3A
  0DBF    01BB    CLR	0x3B
  0DC0    2D8D    JP	0x58D
942:              			}
943:              		}
944:              	}
945:              }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c ----------------------------------------------------------------------
1:                // 32 x 32 bit multiplication with 32 bit result
2:                #ifdef _PIC18
3:                #define _Has_hardware_multiply 1
4:                #else
5:                #define _Has_hardware_multiply 0
6:                #endif
7:                
8:                #if defined(_PIC14E) || defined(_PIC14EX) || defined(_PIC18)
9:                #define _Has_large_call_stack 1
10:               #else
11:               #define _Has_large_call_stack 0
12:               #endif
13:               
14:               unsigned long
15:               __lmul(unsigned long multiplier, unsigned long multiplicand)
  0471    01F3    CLR	0x73
  0472    01F4    CLR	0x74
  0473    01F5    CLR	0x75
  0474    01F6    CLR	0x76
  0475    1C49    SNZB	0x49,0
  0476    2C8B    JP	0x48B
  0477    084D    LD	A,0x4D
  0478    07F3    ADDR	0x73
  0479    084E    LD	A,0x4E
  047A    1103    CLRB	0x3,2
  047B    1803    SZB	0x3,0
  047C    3E01    ADDIA	0x1
  047D    1D03    SNZB	0x3,2
  047E    07F4    ADDR	0x74
  047F    084F    LD	A,0x4F
  0480    1103    CLRB	0x3,2
  0481    1803    SZB	0x3,0
  0482    3E01    ADDIA	0x1
  0483    1D03    SNZB	0x3,2
  0484    07F5    ADDR	0x75
  0485    0850    LD	A,0x50
  0486    1103    CLRB	0x3,2
  0487    1803    SZB	0x3,0
  0488    3E01    ADDIA	0x1
  0489    1D03    SNZB	0x3,2
  048A    07F6    ADDR	0x76
  048B    1003    CLRB	0x3,0
  048C    0DCD    RLCR	0x4D
  048D    0DCE    RLCR	0x4E
  048E    0DCF    RLCR	0x4F
  048F    0DD0    RLCR	0x50
  0490    1003    CLRB	0x3,0
  0491    0CCC    RRCR	0x4C
  0492    0CCB    RRCR	0x4B
  0493    0CCA    RRCR	0x4A
  0494    0CC9    RRCR	0x49
  0495    084C    LD	A,0x4C
  0496    044B    ORA	0x4B
  0497    044A    ORA	0x4A
  0498    0449    ORA	0x49
  0499    1D03    SNZB	0x3,2
  049A    2C75    JP	0x475
  049B    0876    LD	A,0x76
  049C    00CC    LD	0x4C,A
  049D    0875    LD	A,0x75
  049E    00CB    LD	0x4B,A
  049F    0874    LD	A,0x74
  04A0    00CA    LD	0x4A,A
  04A1    0873    LD	A,0x73
  04A2    00C9    LD	0x49,A
  04A3    0008    RET
16:               {
17:               	unsigned long product;
18:               
19:               #define LOWBYTE(x)  (*(unsigned char *)(&x))
20:               #define LMIDBYTE(x) (*(((unsigned char *)(&x))+1))
21:               #define HMIDBYTE(x) (*(((unsigned char *)(&x))+2))
22:               #define HIGHBYTE(x) (*(((unsigned char *)(&x))+3))
23:               
24:               #if (_Has_hardware_multiply || _Has_large_call_stack) && defined(__OPTIMIZE_SPEED__)
25:               	{
26:               
27:               #define USE_SHRINK
28:               
29:               /*
30:               a 32-bit multiply can be decomposed into the sum of ten 8-bit multiplies
31:                            a  b  c  d
32:               *            e  f  g  h
33:               -----------------------
34:                          |         dh
35:                          |      ch  0
36:                          |   bh  0  0
37:                          |ah  0  0  0
38:                          |      dg  0
39:                          |   cg  0  0
40:                          |bg  0  0  0
41:                        ag| 0  0  0  0 (we ignore this intermediate product
42:                                        because it does not affect the low 32 bits of the result)
43:                          |   df  0  0
44:                          |cf  0  0  0
45:                        bf| 0  0  0  0 (ignore)
46:                     af  0| 0  0  0  0 (ignore)
47:                          |de  0  0  0
48:                        ce| 0  0  0  0 (ignore)
49:                     be  0| 0  0  0  0 (ignore)
50:               +  ae  0  0| 0  0  0  0 (ignore)
51:               =======================
52:                */
53:               		product =  (unsigned int)LOWBYTE(multiplier) * LOWBYTE(multiplicand);
54:               
55:               #if defined(USE_MASKS)
56:               		product += ((unsigned long)
57:               			     ((unsigned int)LOWBYTE(multiplier) * LMIDBYTE(multiplicand))
58:               			     +
59:               			     ((unsigned int)LMIDBYTE(multiplier) * LOWBYTE(multiplicand)))
60:               			<< 8;
61:               
62:               		product += ((unsigned long)
63:               			    ((unsigned int)LOWBYTE(multiplier) * HMIDBYTE(multiplicand))
64:               			    +
65:               			    ((unsigned int)LMIDBYTE(multiplier) * LMIDBYTE(multiplicand))
66:               			    +
67:               			    ((unsigned int)HMIDBYTE(multiplier) * LOWBYTE(multiplicand)))
68:               			<< 16;
69:               
70:               		/* cast to smaller type to avoid adding high bits just to discard */
71:               		product += ((unsigned long)
72:               			    (unsigned char)
73:               			    ((unsigned int)LOWBYTE(multiplier) * HIGHBYTE(multiplicand))
74:               			    +
75:               			    (unsigned char)
76:               			    ((unsigned int)LMIDBYTE(multiplier) * HMIDBYTE(multiplicand))
77:               			    +
78:               			    (unsigned char)
79:               			    ((unsigned int)HMIDBYTE(multiplier) * LMIDBYTE(multiplicand))
80:               			    +
81:               			    (unsigned char)
82:               			    ((unsigned int)HIGHBYTE(multiplier) * LOWBYTE(multiplicand)))
83:               			<< 24;
84:               
85:               #elif defined(USE_SHRINK)
86:               		/* add direct to upper bytes, rather than shift and add all bytes */
87:               		*((unsigned short long*)(((unsigned char*)&product)+1)) +=
88:               			((unsigned int)LOWBYTE(multiplier) * LMIDBYTE(multiplicand));
89:               		*((unsigned short long*)(((unsigned char*)&product)+1)) +=
90:               			((unsigned int)LMIDBYTE(multiplier) * LOWBYTE(multiplicand));
91:               
92:               
93:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
94:               			((unsigned int)LOWBYTE(multiplier) * HMIDBYTE(multiplicand));
95:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
96:               			((unsigned int)LMIDBYTE(multiplier) * LMIDBYTE(multiplicand));
97:               		*((unsigned int*)(((unsigned char*)&product)+2)) +=
98:               			((unsigned int)HMIDBYTE(multiplier) * LOWBYTE(multiplicand));
99:               
100:              		*(((unsigned char*)&product)+3) +=
101:              			(unsigned char)
102:              			((unsigned int)LOWBYTE(multiplier) * HIGHBYTE(multiplicand));
103:              		*(((unsigned char*)&product)+3) +=
104:              			(unsigned char)
105:              			((unsigned int)LMIDBYTE(multiplier) * HMIDBYTE(multiplicand));
106:              		*(((unsigned char*)&product)+3) +=
107:              			(unsigned char)
108:              			((unsigned int)HMIDBYTE(multiplier) * LMIDBYTE(multiplicand));
109:              		*(((unsigned char*)&product)+3) +=
110:              			(unsigned char)
111:              			((unsigned int)HIGHBYTE(multiplier) * LOWBYTE(multiplicand));
112:              
113:              #else
114:              #error No method chosen
115:              #endif
116:              	}
117:              #else
118:              
119:              	product = 0;
120:              	do {
121:              		if(multiplier & 1)
122:              			product += multiplicand;
123:              		multiplicand <<= 1;
124:              		multiplier >>= 1;
125:              	} while(multiplier != 0);
126:              
127:              #endif
128:              	return product;
129:              }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_dividend	(*(unsigned short long *)&f1)
11:               #define	f2_as_divisor	(*(unsigned short long *)&f2)
12:               #define	f3_as_quot	(*(unsigned short long *)&f3)
13:               
14:               // floating addition
15:               #ifdef _OLDLIB
16:               #define	cntr		sign2
17:               float
18:               #ifdef _PIC18
19:               __ftdiv(float f1, float f2)
20:               #else
21:               __ftdiv(float f2, float f1)
22:               #endif
23:               {
24:               	unsigned char	exp1, exp2, sign1, sign2;
25:               	float	f3;
26:               	
27:               	f3_as_quot = 0;
28:               	sign1 = __ftunpack(&f1_as_dividend, &exp1);
29:               	if(exp1 == 0)
30:               		return f3;
31:               	sign2 = __ftunpack(&f2_as_divisor, &exp2);
32:               	if(exp2 == 0)
33:               		return f3;
34:               	exp1 -= exp2-127+8;	// compute new exponent
35:               	sign1 ^= sign2;
36:               	cntr = 16+8;
37:               	do {
38:               		f3_as_quot <<= 1;
39:               		if(f1_as_dividend >= f2_as_divisor) {
40:               			f1_as_dividend -= f2_as_divisor;
41:               			f3_as_quot |= 1;
42:               		}
43:               		f1_as_dividend <<= 1;
44:               	} while(--cntr != 0);
45:               	__ftpack(&f3_as_quot, exp1);
46:               	if(sign1)
47:               		f3_as_quot |= 0x800000;
48:               	return f3;
49:               }
50:               #else
51:               #define	exp2	sign
52:               float
53:               #ifdef _PIC18
54:               __ftdiv(float f1, float f2)
55:               #else
56:               __ftdiv(float f2, float f1)
  0510    0852    LD	A,0x52
  0511    00D5    LD	0x55,A
  0512    0853    LD	A,0x53
  0513    00D6    LD	0x56,A
  0514    0854    LD	A,0x54
  0515    00D7    LD	0x57,A
  0516    1003    CLRB	0x3,0
  0517    0D56    RLCA	0x56
  0518    0D57    RLCA	0x57
  0519    00DC    LD	0x5C,A
  051A    085C    LD	A,0x5C
  051B    1D03    SNZB	0x3,2
  051C    2D1E    JP	0x51E
  051D    2FB1    JP	0x7B1
  051E    084F    LD	A,0x4F
  051F    00D5    LD	0x55,A
  0520    0850    LD	A,0x50
  0521    00D6    LD	0x56,A
  0522    0851    LD	A,0x51
  0523    00D7    LD	0x57,A
  0524    1003    CLRB	0x3,0
  0525    0D56    RLCA	0x56
  0526    0D57    RLCA	0x57
  0527    00DD    LD	0x5D,A
  0528    085D    LD	A,0x5D
  0529    1D03    SNZB	0x3,2
  052A    2D2C    JP	0x52C
  052B    2FB1    JP	0x7B1
  052C    3089    LDIA	0x89
  052D    01D9    CLR	0x59
  052E    01DA    CLR	0x5A
  052F    01DB    CLR	0x5B
  0530    075D    ADDA	0x5D
  0531    00D5    LD	0x55,A
  0532    02DC    SUBR	0x5C
  0533    0854    LD	A,0x54
  0534    00DD    LD	0x5D,A
  0535    0851    LD	A,0x51
  0536    06DD    XORR	0x5D
  0537    3080    LDIA	0x80
  0538    05DD    ANDR	0x5D
  0539    3018    LDIA	0x18
  053A    17D3    SETB	0x53,7
  053B    01D4    CLR	0x54
  053C    17D0    SETB	0x50,7
  053D    01D1    CLR	0x51
  053E    00D8    LD	0x58,A
  053F    1003    CLRB	0x3,0
  0540    0DD9    RLCR	0x59
  0541    0DDA    RLCR	0x5A
  0542    0DDB    RLCR	0x5B
  0543    0851    LD	A,0x51
  0544    0254    SUBA	0x54
  0545    1D03    SNZB	0x3,2
  0546    2D4D    JP	0x54D
  0547    0850    LD	A,0x50
  0548    0253    SUBA	0x53
  0549    1D03    SNZB	0x3,2
  054A    2D4D    JP	0x54D
  054B    084F    LD	A,0x4F
  054C    0252    SUBA	0x52
  054D    1C03    SNZB	0x3,0
  054E    2D5B    JP	0x55B
  054F    084F    LD	A,0x4F
  0550    02D2    SUBR	0x52
  0551    0850    LD	A,0x50
  0552    1C03    SNZB	0x3,0
  0553    0F50    SZINCA	0x50
  0554    02D3    SUBR	0x53
  0555    0851    LD	A,0x51
  0556    1C03    SNZB	0x3,0
  0557    0A51    INCA	0x51
  0558    02D4    SUBR	0x54
  0559    1459    SETB	0x59,0
  055A    1003    CLRB	0x3,0
  055B    0DD2    RLCR	0x52
  055C    0DD3    RLCR	0x53
  055D    0DD4    RLCR	0x54
  055E    0BD8    SZDECR	0x58
  055F    2D3F    JP	0x53F
  0560    0859    LD	A,0x59
  0561    00F3    LD	0x73,A
  0562    085A    LD	A,0x5A
  0563    00F4    LD	0x74,A
  0564    085B    LD	A,0x5B
  0565    00F5    LD	0x75,A
  0566    085C    LD	A,0x5C
  0567    00F6    LD	0x76,A
  0568    085D    LD	A,0x5D
  0569    00F7    LD	0x77,A
  056A    25DB    CALL	0x5DB
  056B    0873    LD	A,0x73
  056C    00CF    LD	0x4F,A
  056D    0874    LD	A,0x74
  056E    00D0    LD	0x50,A
  056F    0875    LD	A,0x75
  0570    00D1    LD	0x51,A
  0571    0008    RET
57:               #endif
58:               {
59:               	unsigned char	exp, sign, cntr;
60:               	float	f3;
61:               	
62:               	// unpack the operands
63:               	if((exp = f1_as_dividend >> 15) == 0)
64:               		return 0.0;
65:               	if((exp2 = f2_as_divisor >> 15) == 0)
66:               		return 0.0;
67:               	f3_as_quot = 0;
68:               	exp -= exp2-127+8;	// compute new exponent
69:               	sign = f1_as_dividend >> 16;
70:               	sign ^= (unsigned char)(f2_as_divisor >> 16);
71:               	sign &= 0x80;
72:               	f1_as_dividend |= 0x8000UL;
73:               	f1_as_dividend &= 0xFFFFUL;
74:               	f2_as_divisor |= 0x8000UL;
75:               	f2_as_divisor &= 0xFFFFUL;
76:               	cntr = 16+8;
77:               	do {
78:               		f3_as_quot <<= 1;
79:               		if(f1_as_dividend >= f2_as_divisor) {
80:               			f1_as_dividend -= f2_as_divisor;
81:               			f3_as_quot |= 1;
82:               		}
83:               		f1_as_dividend <<= 1;
84:               	} while(--cntr != 0);
85:               	return __ftpack(f3_as_quot, exp, sign);
86:               }
87:               #endif	
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
11:               
12:               // Convert float to long
13:               
14:               #ifdef _OLDLIB
15:               long
16:               __fttol(float f1)
17:               {
18:               	unsigned char	sign1, exp1;
19:               	unsigned long	lval;
20:               
21:               	sign1 = __ftunpack(&f1_as_mant1, &exp1);
22:               	lval = f1_as_mant1;
23:               	exp1 -= 127+15;
24:               	if((signed char)exp1 < 0) {
25:               		if((signed char)exp1 < -15)
26:               			return 0;
27:               		do
28:               			lval >>= 1;
29:               		while(++exp1 != 0);
30:               	} else {
31:               		if(exp1 >= 32)
32:               			return 00;
33:               		while(exp1 != 0) {
34:               			lval <<= 1;
35:               			exp1--;
36:               		}
37:               	}
38:               	if(sign1)
39:               		lval = -lval;
40:               	return lval;
41:               }
42:               #else
43:               long
44:               __fttol(float f1)
  0572    27A0    CALL	0x7A0
  0573    118A    CLRB	0xA,3
  0574    1003    CLRB	0x3,0
  0575    0D63    RLCA	0x63
  0576    0D64    RLCA	0x64
  0577    00EA    LD	0x6A,A
  0578    086A    LD	A,0x6A
  0579    1D03    SNZB	0x3,2
  057A    2D80    JP	0x580
  057B    01DE    CLR	0x5E
  057C    01DF    CLR	0x5F
  057D    01E0    CLR	0x60
  057E    01E1    CLR	0x61
  057F    0008    RET
  0580    27A0    CALL	0x7A0
  0581    118A    CLRB	0xA,3
  0582    3017    LDIA	0x17
  0583    1003    CLRB	0x3,0
  0584    0CE4    RRCR	0x64
  0585    0CE3    RRCR	0x63
  0586    0CE2    RRCR	0x62
  0587    3EFF    ADDIA	0xFF
  0588    1D03    SNZB	0x3,2
  0589    2D83    JP	0x583
  058A    0862    LD	A,0x62
  058B    00E5    LD	0x65,A
  058C    17DF    SETB	0x5F,7
  058D    01E0    CLR	0x60
  058E    085E    LD	A,0x5E
  058F    00E6    LD	0x66,A
  0590    085F    LD	A,0x5F
  0591    00E7    LD	0x67,A
  0592    0860    LD	A,0x60
  0593    00E8    LD	0x68,A
  0594    308E    LDIA	0x8E
  0595    01E9    CLR	0x69
  0596    02EA    SUBR	0x6A
  0597    1FEA    SNZB	0x6A,7
  0598    2DA6    JP	0x5A6
  0599    086A    LD	A,0x6A
  059A    3A80    XORIA	0x80
  059B    3E8F    ADDIA	0x8F
  059C    1C03    SNZB	0x3,0
  059D    2D7B    JP	0x57B
  059E    1003    CLRB	0x3,0
  059F    0CE9    RRCR	0x69
  05A0    0CE8    RRCR	0x68
  05A1    0CE7    RRCR	0x67
  05A2    0CE6    RRCR	0x66
  05A3    0FEA    SZINCR	0x6A
  05A4    2D9E    JP	0x59E
  05A5    2DB4    JP	0x5B4
  05A6    3018    LDIA	0x18
  05A7    026A    SUBA	0x6A
  05A8    1803    SZB	0x3,0
  05A9    2D7B    JP	0x57B
  05AA    086A    LD	A,0x6A
  05AB    1903    SZB	0x3,2
  05AC    2DB4    JP	0x5B4
  05AD    1003    CLRB	0x3,0
  05AE    0DE6    RLCR	0x66
  05AF    0DE7    RLCR	0x67
  05B0    0DE8    RLCR	0x68
  05B1    0DE9    RLCR	0x69
  05B2    03EA    DECR	0x6A
  05B3    2DAA    JP	0x5AA
  05B4    0865    LD	A,0x65
  05B5    1903    SZB	0x3,2
  05B6    2DC2    JP	0x5C2
  05B7    09E6    COMR	0x66
  05B8    09E7    COMR	0x67
  05B9    09E8    COMR	0x68
  05BA    09E9    COMR	0x69
  05BB    0AE6    INCR	0x66
  05BC    1903    SZB	0x3,2
  05BD    0AE7    INCR	0x67
  05BE    1903    SZB	0x3,2
  05BF    0AE8    INCR	0x68
  05C0    1903    SZB	0x3,2
  05C1    0AE9    INCR	0x69
  05C2    0869    LD	A,0x69
  05C3    00E1    LD	0x61,A
  05C4    0868    LD	A,0x68
  05C5    00E0    LD	0x60,A
  05C6    0867    LD	A,0x67
  05C7    00DF    LD	0x5F,A
  05C8    0866    LD	A,0x66
  05C9    00DE    LD	0x5E,A
  05CA    0008    RET
45:               {
46:               	unsigned char	sign1, exp1;
47:               	unsigned long	lval;
48:               
49:               	if((exp1 = f1_as_mant1 >> 15) == 0)
50:               		return 0;
51:               	sign1 = f1_as_mant1 >> 23;
52:               	f1_as_mant1 |= 0x8000UL;
53:               	f1_as_mant1 &= 0xFFFFUL;
54:               	lval = f1_as_mant1;
55:               	exp1 -= 127+15;
56:               	if((signed char)exp1 < 0) {
57:               		if((signed char)exp1 < -15)
58:               			return 0;
59:               		do
60:               			lval >>= 1;
61:               		while(++exp1 != 0);
62:               	} else {
63:               		if(exp1 >= 24)
64:               			return 0;
65:               		while(exp1 != 0) {
66:               			lval <<= 1;
67:               			exp1--;
68:               		}
69:               	}
70:               	if(sign1)
71:               		lval = -lval;
72:               	return lval;
73:               }
74:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                // this is bigendian code right now. Need to parameterise it.
7:                
8:                #include	"ftarith.h"
9:                
10:               
11:               // Convert unsigned int to float
12:               
13:               #ifdef _OLDLIB
14:               #define	f1_as_mant1	(*(unsigned short long *)&f1)
15:               float
16:               __lwtoft(unsigned int c)
17:               {
18:               	float	f1;
19:               	
20:               	if(c == 0)
21:               		return 0.0;
22:               	f1_as_mant1 = c;
23:               	__ftpack(&f1_as_mant1, 127+15);
24:               	return f1;
25:               }
26:               #else
27:               float
28:               __lwtoft(unsigned int c)
  05CB    084C    LD	A,0x4C
  05CC    00F3    LD	0x73,A
  05CD    084D    LD	A,0x4D
  05CE    00F4    LD	0x74,A
  05CF    308E    LDIA	0x8E
  05D0    01F5    CLR	0x75
  05D1    00F6    LD	0x76,A
  05D2    01F7    CLR	0x77
  05D3    25DB    CALL	0x5DB
  05D4    0873    LD	A,0x73
  05D5    00CC    LD	0x4C,A
  05D6    0874    LD	A,0x74
  05D7    00CD    LD	0x4D,A
  05D8    0875    LD	A,0x75
  05D9    00CE    LD	0x4E,A
  05DA    0008    RET
29:               {
30:               	return __ftpack(c, 127+15, 0);
31:               }
32:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c ----------------------------------------------------------------------
1:                /*	Floating point routines.
2:                
3:                	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
4:                */
5:                
6:                #include	"ftarith.h"
7:                
8:                
9:                //	unpack the operand pointed to. Store the exponent into the location pointed to by exp,
10:               //	and return the sign (zero is positive)
11:               
12:               #ifdef _OLDLIB
13:               
14:               unsigned char
15:               __ftunpack(unsigned short long * arg, unsigned char * exp)
16:               {
17:               	unsigned char	sign;
18:               
19:               	*exp = sign = *arg >> 15;
20:               	if(sign == 0) {
21:               		*arg = 0;
22:               		return 0;
23:               	}
24:               	sign = 0;
25:               	*arg |= 0x8000;
26:               	if(*arg & 0x800000)
27:               		sign++;
28:               	*arg &= 0xFFFF;
29:               	return sign;
30:               }
31:               
32:               // normalize and pack the supplied argument into floating point format
33:               
34:               void
35:               __ftpack(unsigned short long * arg, unsigned char exp)
36:               {
37:               	if(exp == 0 || *arg == 0) {
38:               		*arg = 0;
39:               		return;
40:               	}
41:               	while(*arg & 0xFE0000UL) {
42:               		exp++;
43:               		*arg >>= 1;
44:               	}
45:               	while(*arg & 0xFF0000UL) {
46:               		exp++;
47:               		(*arg)++;
48:               		*arg >>= 1;
49:               	}
50:               	while(!(*arg & 0x8000UL)) {
51:               		exp--;
52:               		*arg <<= 1;
53:               	}
54:               	if(!(exp & 1))
55:               		*arg &= ~0x8000L;
56:               	exp >>= 1;
57:               	*arg |= (unsigned short long)exp << 16;
58:               }
59:               
60:               #else
61:               float
62:               __ftpack(unsigned short long arg, unsigned char exp, unsigned char sign)
  05DB    0876    LD	A,0x76
  05DC    1903    SZB	0x3,2
  05DD    2DE3    JP	0x5E3
  05DE    0875    LD	A,0x75
  05DF    0474    ORA	0x74
  05E0    0473    ORA	0x73
  05E1    1D03    SNZB	0x3,2
  05E2    2DEA    JP	0x5EA
  05E3    01F3    CLR	0x73
  05E4    01F4    CLR	0x74
  05E5    01F5    CLR	0x75
  05E6    0008    RET
  05E7    0AF6    INCR	0x76
  05E8    27A7    CALL	0x7A7
  05E9    118A    CLRB	0xA,3
  05EA    30FE    LDIA	0xFE
  05EB    0575    ANDA	0x75
  05EC    1903    SZB	0x3,2
  05ED    2DF7    JP	0x5F7
  05EE    2DE7    JP	0x5E7
  05EF    0AF6    INCR	0x76
  05F0    0AF3    INCR	0x73
  05F1    1903    SZB	0x3,2
  05F2    0AF4    INCR	0x74
  05F3    1903    SZB	0x3,2
  05F4    0AF5    INCR	0x75
  05F5    27A7    CALL	0x7A7
  05F6    118A    CLRB	0xA,3
  05F7    30FF    LDIA	0xFF
  05F8    0575    ANDA	0x75
  05F9    1903    SZB	0x3,2
  05FA    2E05    JP	0x605
  05FB    2DEF    JP	0x5EF
  05FC    3002    LDIA	0x2
  05FD    0276    SUBA	0x76
  05FE    1C03    SNZB	0x3,0
  05FF    2E07    JP	0x607
  0600    03F6    DECR	0x76
  0601    1003    CLRB	0x3,0
  0602    0DF3    RLCR	0x73
  0603    0DF4    RLCR	0x74
  0604    0DF5    RLCR	0x75
  0605    1FF4    SNZB	0x74,7
  0606    2DFC    JP	0x5FC
  0607    1C76    SNZB	0x76,0
  0608    13F4    CLRB	0x74,7
  0609    1003    CLRB	0x3,0
  060A    0CF6    RRCR	0x76
  060B    0876    LD	A,0x76
  060C    00CB    LD	0x4B,A
  060D    01CA    CLR	0x4A
  060E    01C9    CLR	0x49
  060F    0849    LD	A,0x49
  0610    04F3    ORR	0x73
  0611    084A    LD	A,0x4A
  0612    04F4    ORR	0x74
  0613    084B    LD	A,0x4B
  0614    04F5    ORR	0x75
  0615    0877    LD	A,0x77
  0616    1D03    SNZB	0x3,2
  0617    17F5    SETB	0x75,7
  0618    0008    RET
63:               {
64:               	if(exp == 0 || arg == 0)
65:               		return 0.0;
66:               	while(arg & 0xFE0000UL) {
67:               		exp++;
68:               		arg >>= 1;
69:               	}
70:               	while(arg & 0xFF0000UL) {
71:               		exp++;
72:               		(arg)++;
73:               		arg >>= 1;
74:               	}
75:               	while(!(arg & 0x8000UL) && exp > 1) {
76:               		exp--;
77:               		arg <<= 1;
78:               	}
79:               	if(!(exp & 1))
80:               		arg &= ~0x8000L;
81:               	exp >>= 1;
82:               	arg |= (unsigned short long)exp << 16;
83:               	if (sign)
84:               		arg |= 0x800000UL;
85:                  return *(float*)&arg;	
86:               }
87:               
88:               #endif
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c ----------------------------------------------------------------------
1:                // word unsigned modulus
2:                
3:                unsigned int
4:                #ifdef __PICC__
5:                #warning TODO: update cgpic and this file to use the other prototype
6:                __lwmod(unsigned int divisor, unsigned int dividend)
  072D    0873    LD	A,0x73
  072E    0474    ORA	0x74
  072F    1903    SZB	0x3,2
  0730    2F4C    JP	0x74C
  0731    01F7    CLR	0x77
  0732    0AF7    INCR	0x77
  0733    1BF4    SZB	0x74,7
  0734    2F39    JP	0x739
  0735    1003    CLRB	0x3,0
  0736    0DF3    RLCR	0x73
  0737    0DF4    RLCR	0x74
  0738    2F32    JP	0x732
  0739    0874    LD	A,0x74
  073A    0276    SUBA	0x76
  073B    1D03    SNZB	0x3,2
  073C    2F3F    JP	0x73F
  073D    0873    LD	A,0x73
  073E    0275    SUBA	0x75
  073F    1C03    SNZB	0x3,0
  0740    2F48    JP	0x748
  0741    0873    LD	A,0x73
  0742    02F5    SUBR	0x75
  0743    0874    LD	A,0x74
  0744    1C03    SNZB	0x3,0
  0745    03F6    DECR	0x76
  0746    02F6    SUBR	0x76
  0747    1003    CLRB	0x3,0
  0748    0CF4    RRCR	0x74
  0749    0CF3    RRCR	0x73
  074A    0BF7    SZDECR	0x77
  074B    2F39    JP	0x739
  074C    0876    LD	A,0x76
  074D    00F4    LD	0x74,A
  074E    0875    LD	A,0x75
  074F    00F3    LD	0x73,A
  0750    0008    RET
7:                #else
8:                __lwmod(unsigned int dividend, unsigned int divisor)
9:                #endif
10:               {
11:               	unsigned char	counter;
12:               
13:               	if(divisor != 0) {
14:               		counter = 1;
15:               		while((divisor & 0x8000) == 0) {
16:               			divisor <<= 1;
17:               			counter++;
18:               		}
19:               		do {
20:               			if(divisor <= dividend)
21:               				dividend -= divisor;
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return dividend;
26:               }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c ----------------------------------------------------------------------
1:                // word unsigned division
2:                
3:                unsigned int
4:                #ifdef __PICC__
5:                #warning TODO: update cgpic and this file to use the other prototype
6:                __lwdiv(unsigned int divisor, unsigned int dividend)
  0FD6    01CA    CLR	0x4A
  0FD7    01CB    CLR	0x4B
  0FD8    0873    LD	A,0x73
  0FD9    0474    ORA	0x74
  0FDA    1903    SZB	0x3,2
  0FDB    2FFB    JP	0x7FB
  0FDC    01C9    CLR	0x49
  0FDD    0AC9    INCR	0x49
  0FDE    1BF4    SZB	0x74,7
  0FDF    2FE4    JP	0x7E4
  0FE0    1003    CLRB	0x3,0
  0FE1    0DF3    RLCR	0x73
  0FE2    0DF4    RLCR	0x74
  0FE3    2FDD    JP	0x7DD
  0FE4    1003    CLRB	0x3,0
  0FE5    0DCA    RLCR	0x4A
  0FE6    0DCB    RLCR	0x4B
  0FE7    0874    LD	A,0x74
  0FE8    0276    SUBA	0x76
  0FE9    1D03    SNZB	0x3,2
  0FEA    2FED    JP	0x7ED
  0FEB    0873    LD	A,0x73
  0FEC    0275    SUBA	0x75
  0FED    1C03    SNZB	0x3,0
  0FEE    2FF7    JP	0x7F7
  0FEF    0873    LD	A,0x73
  0FF0    02F5    SUBR	0x75
  0FF1    0874    LD	A,0x74
  0FF2    1C03    SNZB	0x3,0
  0FF3    03F6    DECR	0x76
  0FF4    02F6    SUBR	0x76
  0FF5    144A    SETB	0x4A,0
  0FF6    1003    CLRB	0x3,0
  0FF7    0CF4    RRCR	0x74
  0FF8    0CF3    RRCR	0x73
  0FF9    0BC9    SZDECR	0x49
  0FFA    2FE4    JP	0x7E4
  0FFB    084B    LD	A,0x4B
  0FFC    00F4    LD	0x74,A
  0FFD    084A    LD	A,0x4A
  0FFE    00F3    LD	0x73,A
7:                #else
8:                __lwdiv(unsigned int dividend, unsigned int divisor)
9:                #endif
10:               {
11:               	unsigned int	quotient;
12:               	unsigned char	counter;
13:               
14:               	quotient = 0;
15:               	if(divisor != 0) {
16:               		counter = 1;
17:               		while((divisor & 0x8000) == 0) {
18:               			divisor <<= 1;
19:               			counter++;
20:               		}
21:               		do {
22:               			quotient <<= 1;
23:               			if(divisor <= dividend) {
24:               				dividend -= divisor;
25:               				quotient |= 1;
26:               			}
27:               			divisor >>= 1;
28:               		} while(--counter != 0);
29:               	}
30:               	return quotient;
31:               }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c ----------------------------------------------------------------------
1:                // byte unsigned division
2:                
3:                unsigned char
4:                __lbdiv(unsigned char dividend, unsigned char divisor)
  0E11    00F4    LD	0x74,A
  0E12    01F6    CLR	0x76
  0E13    0873    LD	A,0x73
  0E14    1903    SZB	0x3,2
  0E15    2E2A    JP	0x62A
  0E16    01F5    CLR	0x75
  0E17    0AF5    INCR	0x75
  0E18    1BF3    SZB	0x73,7
  0E19    2E1D    JP	0x61D
  0E1A    1003    CLRB	0x3,0
  0E1B    0DF3    RLCR	0x73
  0E1C    2E17    JP	0x617
  0E1D    1003    CLRB	0x3,0
  0E1E    0DF6    RLCR	0x76
  0E1F    0873    LD	A,0x73
  0E20    0274    SUBA	0x74
  0E21    1C03    SNZB	0x3,0
  0E22    2E27    JP	0x627
  0E23    0873    LD	A,0x73
  0E24    02F4    SUBR	0x74
  0E25    1476    SETB	0x76,0
  0E26    1003    CLRB	0x3,0
  0E27    0CF3    RRCR	0x73
  0E28    0BF5    SZDECR	0x75
  0E29    2E1D    JP	0x61D
  0E2A    0876    LD	A,0x76
  0E2B    0008    RET
5:                {
6:                	unsigned char	quotient;
7:                	unsigned char	counter;
8:                
9:                	quotient = 0;
10:               	if(divisor != 0) {
11:               		counter = 1;
12:               		while((divisor & 0x80) == 0) {
13:               			divisor <<= 1;
14:               			counter++;
15:               		}
16:               		do {
17:               			quotient <<= 1;
18:               			if(divisor <= dividend) {
19:               				dividend -= divisor;
20:               				quotient |= 1;
21:               			}
22:               			divisor >>= 1;
23:               		} while(--counter != 0);
24:               	}
25:               	return quotient;
26:               }
---- C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c ----------------------------------------------------------------------
1:                // byte unsigned modulus
2:                
3:                unsigned char
4:                __lbmod(unsigned char dividend, unsigned char divisor)
  0E2C    00F5    LD	0x75,A
  0E2D    3008    LDIA	0x8
  0E2E    00F6    LD	0x76,A
  0E2F    01F7    CLR	0x77
  0E30    0875    LD	A,0x75
  0E31    00F4    LD	0x74,A
  0E32    3007    LDIA	0x7
  0E33    1003    CLRB	0x3,0
  0E34    0CF4    RRCR	0x74
  0E35    3EFF    ADDIA	0xFF
  0E36    1003    CLRB	0x3,0
  0E37    1D03    SNZB	0x3,2
  0E38    2E34    JP	0x634
  0E39    0D77    RLCA	0x77
  0E3A    0474    ORA	0x74
  0E3B    00F7    LD	0x77,A
  0E3C    1003    CLRB	0x3,0
  0E3D    0DF5    RLCR	0x75
  0E3E    0873    LD	A,0x73
  0E3F    0277    SUBA	0x77
  0E40    1C03    SNZB	0x3,0
  0E41    2E44    JP	0x644
  0E42    0873    LD	A,0x73
  0E43    02F7    SUBR	0x77
  0E44    0BF6    SZDECR	0x76
  0E45    2E30    JP	0x630
  0E46    0877    LD	A,0x77
  0E47    0008    RET
5:                {
6:                	unsigned char	rem;
7:                	unsigned char	counter;
8:                
9:                	counter = 8;
10:               	rem = 0;
11:               	do {
12:               		rem = (rem << 1) | (dividend >> 7);
13:               		dividend <<= 1;
14:               		if(divisor <= rem)
15:               			rem -= divisor;
16:               	} while(--counter != 0);
17:               	return rem;
18:               }
---- library_code ------------------------------------------------------------------
  0077    1A78    SZB	0x78,4
  0078    2885    JP	0x85
  0079    2134    CALL	0x134
  007A    118A    CLRB	0xA,3
  007B    3008    LDIA	0x8
  007C    1283    CLRB	0x3,5
  007D    1303    CLRB	0x3,6
  007E    0AB2    INCR	0x32
  007F    0232    SUBA	0x32
  0080    1C03    SNZB	0x3,0
  0081    28A3    JP	0xA3
  0082    01B2    CLR	0x32
  0083    1678    SETB	0x78,4
  0084    28A3    JP	0xA3
  0085    19F8    SZB	0x78,3
  0086    289D    JP	0x9D
  0087    21AB    CALL	0x1AB
  0088    118A    CLRB	0xA,3
  0089    233D    CALL	0x33D
  008A    118A    CLRB	0xA,3
  008B    15F8    SETB	0x78,3
  008C    18F8    SZB	0x78,1
  008D    2894    JP	0x94
  008E    3003    LDIA	0x3
  008F    1283    CLRB	0x3,5
  0090    1303    CLRB	0x3,6
  0091    0232    SUBA	0x32
  0092    1C03    SNZB	0x3,0
  0093    2899    JP	0x99
  0094    2327    CALL	0x327
  0095    118A    CLRB	0xA,3
  0096    10F8    CLRB	0x78,1
  0097    1278    CLRB	0x78,4
  0098    11F8    CLRB	0x78,3
  0099    1283    CLRB	0x3,5
  009A    1303    CLRB	0x3,6
  009B    01B2    CLR	0x32
  009C    28A3    JP	0xA3
  009D    22C3    CALL	0x2C3
  009E    118A    CLRB	0xA,3
  009F    219C    CALL	0x19C
  00A0    118A    CLRB	0xA,3
  00A1    1278    CLRB	0x78,4
  00A2    11F8    CLRB	0x78,3
  00A3    2B70    JP	0x370
  00A4    0064    CLRWDT
  00A5    1683    SETB	0x3,5
  00A6    1303    CLRB	0x3,6
  00A7    0181    CLR	0x1
  00A8    3007    LDIA	0x7
  00A9    1283    CLRB	0x3,5
  00AA    0481    ORR	0x1
  00AB    1581    SETB	0x1,3
  00AC    0064    CLRWDT
  00AD    300A    LDIA	0xA
  00AE    1283    CLRB	0x3,5
  00AF    1303    CLRB	0x3,6
  00B0    0081    LD	0x1,A
  00B1    0064    CLRWDT
  00B2    1283    CLRB	0x3,5
  00B3    1703    SETB	0x3,6
  00B4    0191    CLR	0x11
  00B5    0193    CLR	0x13
  00B6    3002    LDIA	0x2
  00B7    1303    CLRB	0x3,6
  00B8    0094    LD	0x14,A
  00B9    0063    STOP
  00BA    0000    NOP
  00BB    0064    CLRWDT
  00BC    3072    LDIA	0x72
  00BD    1283    CLRB	0x3,5
  00BE    1303    CLRB	0x3,6
  00BF    0094    LD	0x14,A
  00C0    3079    LDIA	0x79
  00C1    1703    SETB	0x3,6
  00C2    0093    LD	0x13,A
  00C3    219C    CALL	0x19C
  00C4    118A    CLRB	0xA,3
  00C5    1478    SETB	0x78,0
  00C6    2134    CALL	0x134
  00C7    118A    CLRB	0xA,3
  00C8    1283    CLRB	0x3,5
  00C9    1303    CLRB	0x3,6
  00CA    2402    CALL	0x402
  00CB    118A    CLRB	0xA,3
  00CC    1C0B    SNZB	0xB,0
  00CD    188B    SZB	0xB,1
  00CE    28D1    JP	0xD1
  00CF    1D8D    SNZB	0xD,3
  00D0    28D8    JP	0xD8
  00D1    219C    CALL	0x19C
  00D2    1283    CLRB	0x3,5
  00D3    1303    CLRB	0x3,6
  00D4    01B2    CLR	0x32
  00D5    1278    CLRB	0x78,4
  00D6    11F8    CLRB	0x78,3
  00D7    0008    RET
  00D8    0852    LD	A,0x52
  00D9    3903    ANDIA	0x3
  00DA    1003    CLRB	0x3,0
  00DB    1903    SZB	0x3,2
  00DC    292E    JP	0x12E
  00DD    0D54    RLCA	0x54
  00DE    3EAC    ADDIA	0xAC
  00DF    0084    LD	0x4,A
  00E0    1383    CLRB	0x3,7
  00E1    0800    LD	A,0x0
  00E2    00D0    LD	0x50,A
  00E3    0A84    INCR	0x4
  00E4    0800    LD	A,0x0
  00E5    00D1    LD	0x51,A
  00E6    00CF    LD	0x4F,A
  00E7    0850    LD	A,0x50
  00E8    00CE    LD	0x4E,A
  00E9    0850    LD	A,0x50
  00EA    0451    ORA	0x51
  00EB    1903    SZB	0x3,2
  00EC    292D    JP	0x12D
  00ED    0854    LD	A,0x54
  00EE    3E16    ADDIA	0x16
  00EF    0084    LD	0x4,A
  00F0    158A    SETB	0xA,3
  00F1    2028    CALL	0x28
  00F2    118A    CLRB	0xA,3
  00F3    07CE    ADDR	0x4E
  00F4    1803    SZB	0x3,0
  00F5    0ACF    INCR	0x4F
  00F6    1003    CLRB	0x3,0
  00F7    0D54    RLCA	0x54
  00F8    3EA4    ADDIA	0xA4
  00F9    23E1    CALL	0x3E1
  00FA    118A    CLRB	0xA,3
  00FB    084F    LD	A,0x4F
  00FC    0275    SUBA	0x75
  00FD    1D03    SNZB	0x3,2
  00FE    2901    JP	0x101
  00FF    084E    LD	A,0x4E
  0100    0274    SUBA	0x74
  0101    1C03    SNZB	0x3,0
  0102    2915    JP	0x115
  0103    2402    CALL	0x402
  0104    118A    CLRB	0xA,3
  0105    0852    LD	A,0x52
  0106    3903    ANDIA	0x3
  0107    1D03    SNZB	0x3,2
  0108    290C    JP	0x10C
  0109    0854    LD	A,0x54
  010A    22A0    CALL	0x2A0
  010B    118A    CLRB	0xA,3
  010C    1283    CLRB	0x3,5
  010D    3002    LDIA	0x2
  010E    1303    CLRB	0x3,6
  010F    1003    CLRB	0x3,0
  0110    2407    CALL	0x407
  0111    118A    CLRB	0xA,3
  0112    1803    SZB	0x3,0
  0113    28D1    JP	0xD1
  0114    2905    JP	0x105
  0115    0D54    RLCA	0x54
  0116    3E20    ADDIA	0x20
  0117    23E1    CALL	0x3E1
  0118    118A    CLRB	0xA,3
  0119    1003    CLRB	0x3,0
  011A    0D54    RLCA	0x54
  011B    3EA4    ADDIA	0xA4
  011C    23CB    CALL	0x3CB
  011D    118A    CLRB	0xA,3
  011E    0800    LD	A,0x0
  011F    00F4    LD	0x74,A
  0120    0A84    INCR	0x4
  0121    0800    LD	A,0x0
  0122    00F5    LD	0x75,A
  0123    1003    CLRB	0x3,0
  0124    0D54    RLCA	0x54
  0125    3E20    ADDIA	0x20
  0126    23CB    CALL	0x3CB
  0127    118A    CLRB	0xA,3
  0128    0850    LD	A,0x50
  0129    0080    LD	0x0,A
  012A    0A84    INCR	0x4
  012B    0851    LD	A,0x51
  012C    0080    LD	0x0,A
  012D    1003    CLRB	0x3,0
  012E    3002    LDIA	0x2
  012F    2407    CALL	0x407
  0130    118A    CLRB	0xA,3
  0131    1803    SZB	0x3,0
  0132    28A4    JP	0xA4
  0133    28D8    JP	0xD8
  0134    1283    CLRB	0x3,5
  0135    1303    CLRB	0x3,6
  0136    01CD    CLR	0x4D
  0137    01CB    CLR	0x4B
  0138    0ACB    INCR	0x4B
  0139    01CC    CLR	0x4C
  013A    1C78    SNZB	0x78,0
  013B    2940    JP	0x140
  013C    084B    LD	A,0x4B
  013D    3903    ANDIA	0x3
  013E    1903    SZB	0x3,2
  013F    2991    JP	0x191
  0140    1703    SETB	0x3,6
  0141    0191    CLR	0x11
  0142    0192    CLR	0x12
  0143    3079    LDIA	0x79
  0144    0093    LD	0x13,A
  0145    1303    CLRB	0x3,6
  0146    1305    CLRB	0x5,6
  0147    1306    CLRB	0x6,6
  0148    0000    NOP
  0149    0000    NOP
  014A    0000    NOP
  014B    0000    NOP
  014C    0000    NOP
  014D    0000    NOP
  014E    0000    NOP
  014F    0000    NOP
  0150    1283    CLRB	0x3,5
  0151    1303    CLRB	0x3,6
  0152    1705    SETB	0x5,6
  0153    084D    LD	A,0x4D
  0154    3E18    ADDIA	0x18
  0155    0084    LD	0x4,A
  0156    158A    SETB	0xA,3
  0157    2028    CALL	0x28
  0158    118A    CLRB	0xA,3
  0159    1703    SETB	0x3,6
  015A    0091    LD	0x11,A
  015B    1303    CLRB	0x3,6
  015C    084D    LD	A,0x4D
  015D    3E1A    ADDIA	0x1A
  015E    0084    LD	0x4,A
  015F    158A    SETB	0xA,3
  0160    2028    CALL	0x28
  0161    118A    CLRB	0xA,3
  0162    1703    SETB	0x3,6
  0163    0092    LD	0x12,A
  0164    0000    NOP
  0165    0000    NOP
  0166    0000    NOP
  0167    0000    NOP
  0168    1283    CLRB	0x3,5
  0169    1703    SETB	0x3,6
  016A    1411    SETB	0x11,0
  016B    30D0    LDIA	0xD0
  016C    1303    CLRB	0x3,6
  016D    00C9    LD	0x49,A
  016E    3007    LDIA	0x7
  016F    00CA    LD	0x4A,A
  0170    1703    SETB	0x3,6
  0171    1B91    SZB	0x11,7
  0172    297F    JP	0x17F
  0173    3001    LDIA	0x1
  0174    1303    CLRB	0x3,6
  0175    02C9    SUBR	0x49
  0176    1C03    SNZB	0x3,0
  0177    03CA    DECR	0x4A
  0178    0849    LD	A,0x49
  0179    044A    ORA	0x4A
  017A    1D03    SNZB	0x3,2
  017B    2970    JP	0x170
  017C    30FF    LDIA	0xFF
  017D    00B2    LD	0x32,A
  017E    299C    JP	0x19C
  017F    1303    CLRB	0x3,6
  0180    1003    CLRB	0x3,0
  0181    0D4D    RLCA	0x4D
  0182    3EAC    ADDIA	0xAC
  0183    0084    LD	0x4,A
  0184    1703    SETB	0x3,6
  0185    0816    LD	A,0x16
  0186    1383    CLRB	0x3,7
  0187    0780    ADDR	0x0
  0188    0F84    SZINCR	0x4
  0189    0800    LD	A,0x0
  018A    1803    SZB	0x3,0
  018B    0A00    INCA	0x0
  018C    00FF    LD	0x7F,A
  018D    0817    LD	A,0x17
  018E    077F    ADDA	0x7F
  018F    0080    LD	0x0,A
  0190    0384    DECR	0x4
  0191    3002    LDIA	0x2
  0192    1303    CLRB	0x3,6
  0193    1003    CLRB	0x3,0
  0194    0DCB    RLCR	0x4B
  0195    0DCC    RLCR	0x4C
  0196    0ACD    INCR	0x4D
  0197    024D    SUBA	0x4D
  0198    1C03    SNZB	0x3,0
  0199    293A    JP	0x13A
  019A    1078    CLRB	0x78,0
  019B    0008    RET
  019C    01F3    CLR	0x73
  019D    1003    CLRB	0x3,0
  019E    0D73    RLCA	0x73
  019F    3EAC    ADDIA	0xAC
  01A0    0084    LD	0x4,A
  01A1    3002    LDIA	0x2
  01A2    1383    CLRB	0x3,7
  01A3    0180    CLR	0x0
  01A4    0A84    INCR	0x4
  01A5    0180    CLR	0x0
  01A6    0AF3    INCR	0x73
  01A7    0273    SUBA	0x73
  01A8    1803    SZB	0x3,0
  01A9    0008    RET
  01AA    299D    JP	0x19D
  01AB    1283    CLRB	0x3,5
  01AC    1303    CLRB	0x3,6
  01AD    01D5    CLR	0x55
  01AE    01F9    CLR	0x79
  01AF    01FA    CLR	0x7A
  01B0    01B1    CLR	0x31
  01B1    0855    LD	A,0x55
  01B2    3907    ANDIA	0x7
  01B3    3E0E    ADDIA	0xE
  01B4    0084    LD	0x4,A
  01B5    158A    SETB	0xA,3
  01B6    2028    CALL	0x28
  01B7    118A    CLRB	0xA,3
  01B8    00CF    LD	0x4F,A
  01B9    1003    CLRB	0x3,0
  01BA    0D55    RLCA	0x55
  01BB    3EAC    ADDIA	0xAC
  01BC    0084    LD	0x4,A
  01BD    3003    LDIA	0x3
  01BE    0A84    INCR	0x4
  01BF    1003    CLRB	0x3,0
  01C0    1383    CLRB	0x3,7
  01C1    0C80    RRCR	0x0
  01C2    0384    DECR	0x4
  01C3    0C80    RRCR	0x0
  01C4    3EFF    ADDIA	0xFF
  01C5    1D03    SNZB	0x3,2
  01C6    29BE    JP	0x1BE
  01C7    1003    CLRB	0x3,0
  01C8    0D55    RLCA	0x55
  01C9    3EAC    ADDIA	0xAC
  01CA    0084    LD	0x4,A
  01CB    0800    LD	A,0x0
  01CC    00D3    LD	0x53,A
  01CD    0A84    INCR	0x4
  01CE    0800    LD	A,0x0
  01CF    00D4    LD	0x54,A
  01D0    0855    LD	A,0x55
  01D1    3E16    ADDIA	0x16
  01D2    0084    LD	0x4,A
  01D3    158A    SETB	0xA,3
  01D4    2028    CALL	0x28
  01D5    118A    CLRB	0xA,3
  01D6    00D2    LD	0x52,A
  01D7    00D0    LD	0x50,A
  01D8    01D1    CLR	0x51
  01D9    0853    LD	A,0x53
  01DA    07D0    ADDR	0x50
  01DB    1803    SZB	0x3,0
  01DC    0AD1    INCR	0x51
  01DD    0854    LD	A,0x54
  01DE    07D1    ADDR	0x51
  01DF    0855    LD	A,0x55
  01E0    228C    CALL	0x28C
  01E1    118A    CLRB	0xA,3
  01E2    3A00    XORIA	0x0
  01E3    1003    CLRB	0x3,0
  01E4    1D03    SNZB	0x3,2
  01E5    2A40    JP	0x240
  01E6    0D55    RLCA	0x55
  01E7    3EA4    ADDIA	0xA4
  01E8    0084    LD	0x4,A
  01E9    1383    CLRB	0x3,7
  01EA    0800    LD	A,0x0
  01EB    00CD    LD	0x4D,A
  01EC    0A84    INCR	0x4
  01ED    0800    LD	A,0x0
  01EE    00CE    LD	0x4E,A
  01EF    1003    CLRB	0x3,0
  01F0    0D55    RLCA	0x55
  01F1    3EA0    ADDIA	0xA0
  01F2    23C4    CALL	0x3C4
  01F3    118A    CLRB	0xA,3
  01F4    0251    SUBA	0x51
  01F5    1D03    SNZB	0x3,2
  01F6    29F9    JP	0x1F9
  01F7    0849    LD	A,0x49
  01F8    0250    SUBA	0x50
  01F9    1803    SZB	0x3,0
  01FA    2A08    JP	0x208
  01FB    1003    CLRB	0x3,0
  01FC    0D55    RLCA	0x55
  01FD    3EA0    ADDIA	0xA0
  01FE    23C4    CALL	0x3C4
  01FF    118A    CLRB	0xA,3
  0200    0853    LD	A,0x53
  0201    0249    SUBA	0x49
  0202    00D3    LD	0x53,A
  0203    0854    LD	A,0x54
  0204    1C03    SNZB	0x3,0
  0205    0A54    INCA	0x54
  0206    024A    SUBA	0x4A
  0207    2A2C    JP	0x22C
  0208    084E    LD	A,0x4E
  0209    0251    SUBA	0x51
  020A    1D03    SNZB	0x3,2
  020B    2A0E    JP	0x20E
  020C    084D    LD	A,0x4D
  020D    0250    SUBA	0x50
  020E    1803    SZB	0x3,0
  020F    2A84    JP	0x284
  0210    1003    CLRB	0x3,0
  0211    0D55    RLCA	0x55
  0212    3E20    ADDIA	0x20
  0213    23C4    CALL	0x3C4
  0214    118A    CLRB	0xA,3
  0215    0251    SUBA	0x51
  0216    1D03    SNZB	0x3,2
  0217    2A1A    JP	0x21A
  0218    0849    LD	A,0x49
  0219    0250    SUBA	0x50
  021A    1803    SZB	0x3,0
  021B    2A84    JP	0x284
  021C    1003    CLRB	0x3,0
  021D    0D55    RLCA	0x55
  021E    3EA0    ADDIA	0xA0
  021F    0084    LD	0x4,A
  0220    084D    LD	A,0x4D
  0221    0080    LD	0x0,A
  0222    0A84    INCR	0x4
  0223    084E    LD	A,0x4E
  0224    0080    LD	0x0,A
  0225    0853    LD	A,0x53
  0226    024D    SUBA	0x4D
  0227    00D3    LD	0x53,A
  0228    0854    LD	A,0x54
  0229    1C03    SNZB	0x3,0
  022A    0A54    INCA	0x54
  022B    024E    SUBA	0x4E
  022C    00D4    LD	0x54,A
  022D    0855    LD	A,0x55
  022E    3EBC    ADDIA	0xBC
  022F    0084    LD	0x4,A
  0230    0180    CLR	0x0
  0231    0854    LD	A,0x54
  0232    1903    SZB	0x3,2
  0233    2A36    JP	0x236
  0234    30FF    LDIA	0xFF
  0235    2A37    JP	0x237
  0236    0853    LD	A,0x53
  0237    00D2    LD	0x52,A
  0238    0231    SUBA	0x31
  0239    1803    SZB	0x3,0
  023A    2A3E    JP	0x23E
  023B    0852    LD	A,0x52
  023C    00B1    LD	0x31,A
  023D    2A7E    JP	0x27E
  023E    0AB2    INCR	0x32
  023F    2A84    JP	0x284
  0240    0D55    RLCA	0x55
  0241    3EA0    ADDIA	0xA0
  0242    0084    LD	0x4,A
  0243    1383    CLRB	0x3,7
  0244    0800    LD	A,0x0
  0245    00C9    LD	0x49,A
  0246    0A84    INCR	0x4
  0247    0800    LD	A,0x0
  0248    00CA    LD	0x4A,A
  0249    0849    LD	A,0x49
  024A    3E01    ADDIA	0x1
  024B    00CB    LD	0x4B,A
  024C    084A    LD	A,0x4A
  024D    1803    SZB	0x3,0
  024E    3E01    ADDIA	0x1
  024F    00CC    LD	0x4C,A
  0250    0851    LD	A,0x51
  0251    024C    SUBA	0x4C
  0252    1D03    SNZB	0x3,2
  0253    2A56    JP	0x256
  0254    0850    LD	A,0x50
  0255    024B    SUBA	0x4B
  0256    1C03    SNZB	0x3,0
  0257    2A84    JP	0x284
  0258    1003    CLRB	0x3,0
  0259    0D55    RLCA	0x55
  025A    3EA4    ADDIA	0xA4
  025B    0084    LD	0x4,A
  025C    0800    LD	A,0x0
  025D    23B2    CALL	0x3B2
  025E    118A    CLRB	0xA,3
  025F    1C03    SNZB	0x3,0
  0260    2A6A    JP	0x26A
  0261    1003    CLRB	0x3,0
  0262    0D55    RLCA	0x55
  0263    3E20    ADDIA	0x20
  0264    0084    LD	0x4,A
  0265    0800    LD	A,0x0
  0266    23B2    CALL	0x3B2
  0267    118A    CLRB	0xA,3
  0268    1803    SZB	0x3,0
  0269    2A76    JP	0x276
  026A    0855    LD	A,0x55
  026B    3EBC    ADDIA	0xBC
  026C    0084    LD	0x4,A
  026D    3009    LDIA	0x9
  026E    0A80    INCR	0x0
  026F    0200    SUBA	0x0
  0270    1C03    SNZB	0x3,0
  0271    2A7A    JP	0x27A
  0272    0855    LD	A,0x55
  0273    22A0    CALL	0x2A0
  0274    118A    CLRB	0xA,3
  0275    2A84    JP	0x284
  0276    0855    LD	A,0x55
  0277    3EBC    ADDIA	0xBC
  0278    0084    LD	0x4,A
  0279    0180    CLR	0x0
  027A    087A    LD	A,0x7A
  027B    0479    ORA	0x79
  027C    1D03    SNZB	0x3,2
  027D    2A84    JP	0x284
  027E    084F    LD	A,0x4F
  027F    00F3    LD	0x73,A
  0280    01F4    CLR	0x74
  0281    0855    LD	A,0x55
  0282    22B5    CALL	0x2B5
  0283    118A    CLRB	0xA,3
  0284    3002    LDIA	0x2
  0285    1283    CLRB	0x3,5
  0286    1303    CLRB	0x3,6
  0287    0AD5    INCR	0x55
  0288    0255    SUBA	0x55
  0289    1803    SZB	0x3,0
  028A    0008    RET
  028B    29B1    JP	0x1B1
  028C    00F4    LD	0x74,A
  028D    3907    ANDIA	0x7
  028E    3E0E    ADDIA	0xE
  028F    0084    LD	0x4,A
  0290    158A    SETB	0xA,3
  0291    2028    CALL	0x28
  0292    118A    CLRB	0xA,3
  0293    00F3    LD	0x73,A
  0294    1DF4    SNZB	0x74,3
  0295    2A9A    JP	0x29A
  0296    1283    CLRB	0x3,5
  0297    1303    CLRB	0x3,6
  0298    082D    LD	A,0x2D
  0299    2A9D    JP	0x29D
  029A    1283    CLRB	0x3,5
  029B    1303    CLRB	0x3,6
  029C    082C    LD	A,0x2C
  029D    05F3    ANDR	0x73
  029E    0873    LD	A,0x73
  029F    0008    RET
  02A0    00F3    LD	0x73,A
  02A1    1003    CLRB	0x3,0
  02A2    0D73    RLCA	0x73
  02A3    3EA8    ADDIA	0xA8
  02A4    0084    LD	0x4,A
  02A5    1383    CLRB	0x3,7
  02A6    23F0    CALL	0x3F0
  02A7    118A    CLRB	0xA,3
  02A8    3E20    ADDIA	0x20
  02A9    0084    LD	0x4,A
  02AA    23F0    CALL	0x3F0
  02AB    118A    CLRB	0xA,3
  02AC    3EA4    ADDIA	0xA4
  02AD    0084    LD	0x4,A
  02AE    23F0    CALL	0x3F0
  02AF    3EA0    ADDIA	0xA0
  02B0    0084    LD	0x4,A
  02B1    0180    CLR	0x0
  02B2    0A84    INCR	0x4
  02B3    0180    CLR	0x0
  02B4    0008    RET
  02B5    00F5    LD	0x75,A
  02B6    1283    CLRB	0x3,5
  02B7    1303    CLRB	0x3,6
  02B8    0AB2    INCR	0x32
  02B9    01F9    CLR	0x79
  02BA    01FA    CLR	0x7A
  02BB    1DF5    SNZB	0x75,3
  02BC    2AC0    JP	0x2C0
  02BD    0873    LD	A,0x73
  02BE    00FA    LD	0x7A,A
  02BF    0008    RET
  02C0    0873    LD	A,0x73
  02C1    00F9    LD	0x79,A
  02C2    0008    RET
  02C3    1283    CLRB	0x3,5
  02C4    3004    LDIA	0x4
  02C5    1303    CLRB	0x3,6
  02C6    01CD    CLR	0x4D
  02C7    0AB0    INCR	0x30
  02C8    0230    SUBA	0x30
  02C9    1C03    SNZB	0x3,0
  02CA    0008    RET
  02CB    01B0    CLR	0x30
  02CC    1003    CLRB	0x3,0
  02CD    0D4D    RLCA	0x4D
  02CE    3EAC    ADDIA	0xAC
  02CF    0084    LD	0x4,A
  02D0    1383    CLRB	0x3,7
  02D1    0800    LD	A,0x0
  02D2    00C9    LD	0x49,A
  02D3    0A84    INCR	0x4
  02D4    0800    LD	A,0x0
  02D5    00CA    LD	0x4A,A
  02D6    084D    LD	A,0x4D
  02D7    228C    CALL	0x28C
  02D8    118A    CLRB	0xA,3
  02D9    3A00    XORIA	0x0
  02DA    1003    CLRB	0x3,0
  02DB    1D03    SNZB	0x3,2
  02DC    2B11    JP	0x311
  02DD    0D4D    RLCA	0x4D
  02DE    3EA8    ADDIA	0xA8
  02DF    0084    LD	0x4,A
  02E0    1383    CLRB	0x3,7
  02E1    23A4    CALL	0x3A4
  02E2    118A    CLRB	0xA,3
  02E3    1903    SZB	0x3,2
  02E4    024B    SUBA	0x4B
  02E5    1C03    SNZB	0x3,0
  02E6    2AED    JP	0x2ED
  02E7    0F4B    SZINCA	0x4B
  02E8    2B10    JP	0x310
  02E9    0A4C    INCA	0x4C
  02EA    1003    CLRB	0x3,0
  02EB    1D03    SNZB	0x3,2
  02EC    2B11    JP	0x311
  02ED    0D4D    RLCA	0x4D
  02EE    3E20    ADDIA	0x20
  02EF    0084    LD	0x4,A
  02F0    23A4    CALL	0x3A4
  02F1    118A    CLRB	0xA,3
  02F2    1903    SZB	0x3,2
  02F3    024B    SUBA	0x4B
  02F4    1C03    SNZB	0x3,0
  02F5    2AFC    JP	0x2FC
  02F6    0F4B    SZINCA	0x4B
  02F7    2B10    JP	0x310
  02F8    0A4C    INCA	0x4C
  02F9    1003    CLRB	0x3,0
  02FA    1D03    SNZB	0x3,2
  02FB    2B11    JP	0x311
  02FC    0D4D    RLCA	0x4D
  02FD    3EA4    ADDIA	0xA4
  02FE    0084    LD	0x4,A
  02FF    23A4    CALL	0x3A4
  0300    118A    CLRB	0xA,3
  0301    1903    SZB	0x3,2
  0302    024B    SUBA	0x4B
  0303    1C03    SNZB	0x3,0
  0304    2B0B    JP	0x30B
  0305    0F4B    SZINCA	0x4B
  0306    2B10    JP	0x310
  0307    0A4C    INCA	0x4C
  0308    1003    CLRB	0x3,0
  0309    1D03    SNZB	0x3,2
  030A    2B11    JP	0x311
  030B    0D4D    RLCA	0x4D
  030C    3EA0    ADDIA	0xA0
  030D    0084    LD	0x4,A
  030E    23FC    CALL	0x3FC
  030F    118A    CLRB	0xA,3
  0310    1003    CLRB	0x3,0
  0311    0D4D    RLCA	0x4D
  0312    3E20    ADDIA	0x20
  0313    0084    LD	0x4,A
  0314    1383    CLRB	0x3,7
  0315    23E8    CALL	0x3E8
  0316    118A    CLRB	0xA,3
  0317    3EA4    ADDIA	0xA4
  0318    23D6    CALL	0x3D6
  0319    118A    CLRB	0xA,3
  031A    23E8    CALL	0x3E8
  031B    118A    CLRB	0xA,3
  031C    3E20    ADDIA	0x20
  031D    23D6    CALL	0x3D6
  031E    118A    CLRB	0xA,3
  031F    23FC    CALL	0x3FC
  0320    118A    CLRB	0xA,3
  0321    3002    LDIA	0x2
  0322    0ACD    INCR	0x4D
  0323    024D    SUBA	0x4D
  0324    1803    SZB	0x3,0
  0325    0008    RET
  0326    2ACC    JP	0x2CC
  0327    1283    CLRB	0x3,5
  0328    1303    CLRB	0x3,6
  0329    01AC    CLR	0x2C
  032A    01AD    CLR	0x2D
  032B    01F4    CLR	0x74
  032C    1003    CLRB	0x3,0
  032D    0D74    RLCA	0x74
  032E    3EAC    ADDIA	0xAC
  032F    0084    LD	0x4,A
  0330    1383    CLRB	0x3,7
  0331    0180    CLR	0x0
  0332    0A84    INCR	0x4
  0333    0180    CLR	0x0
  0334    0874    LD	A,0x74
  0335    22A0    CALL	0x2A0
  0336    118A    CLRB	0xA,3
  0337    3002    LDIA	0x2
  0338    0AF4    INCR	0x74
  0339    0274    SUBA	0x74
  033A    1803    SZB	0x3,0
  033B    0008    RET
  033C    2B2C    JP	0x32C
  033D    087A    LD	A,0x7A
  033E    0479    ORA	0x79
  033F    1903    SZB	0x3,2
  0340    2B61    JP	0x361
  0341    1283    CLRB	0x3,5
  0342    1303    CLRB	0x3,6
  0343    01AE    CLR	0x2E
  0344    0879    LD	A,0x79
  0345    0624    XORA	0x24
  0346    1D03    SNZB	0x3,2
  0347    2B5A    JP	0x35A
  0348    087A    LD	A,0x7A
  0349    0625    XORA	0x25
  034A    1D03    SNZB	0x3,2
  034B    2B5A    JP	0x35A
  034C    3002    LDIA	0x2
  034D    0AAF    INCR	0x2F
  034E    022F    SUBA	0x2F
  034F    1C03    SNZB	0x3,0
  0350    0008    RET
  0351    01AF    CLR	0x2F
  0352    0879    LD	A,0x79
  0353    00AC    LD	0x2C,A
  0354    087A    LD	A,0x7A
  0355    00AD    LD	0x2D,A
  0356    1978    SZB	0x78,2
  0357    0008    RET
  0358    1578    SETB	0x78,2
  0359    2B86    JP	0x386
  035A    1178    CLRB	0x78,2
  035B    0879    LD	A,0x79
  035C    00A4    LD	0x24,A
  035D    087A    LD	A,0x7A
  035E    00A5    LD	0x25,A
  035F    01AF    CLR	0x2F
  0360    0008    RET
  0361    1283    CLRB	0x3,5
  0362    1303    CLRB	0x3,6
  0363    01AF    CLR	0x2F
  0364    01A4    CLR	0x24
  0365    01A5    CLR	0x25
  0366    3002    LDIA	0x2
  0367    0AAE    INCR	0x2E
  0368    022E    SUBA	0x2E
  0369    1C03    SNZB	0x3,0
  036A    0008    RET
  036B    01AE    CLR	0x2E
  036C    01AC    CLR	0x2C
  036D    01AD    CLR	0x2D
  036E    1178    CLRB	0x78,2
  036F    0008    RET
  0370    1283    CLRB	0x3,5
  0371    1303    CLRB	0x3,6
  0372    082D    LD	A,0x2D
  0373    042C    ORA	0x2C
  0374    1903    SZB	0x3,2
  0375    2B82    JP	0x382
  0376    1683    SETB	0x3,5
  0377    0AB0    INCR	0x30
  0378    1903    SZB	0x3,2
  0379    0AB1    INCR	0x31
  037A    303A    LDIA	0x3A
  037B    0231    SUBA	0x31
  037C    3098    LDIA	0x98
  037D    1903    SZB	0x3,2
  037E    0230    SUBA	0x30
  037F    1C03    SNZB	0x3,0
  0380    0008    RET
  0381    14F8    SETB	0x78,1
  0382    1683    SETB	0x3,5
  0383    01B0    CLR	0x30
  0384    01B1    CLR	0x31
  0385    0008    RET
  0386    01F5    CLR	0x75
  0387    0875    LD	A,0x75
  0388    228C    CALL	0x28C
  0389    118A    CLRB	0xA,3
  038A    3A00    XORIA	0x0
  038B    1D03    SNZB	0x3,2
  038C    2B90    JP	0x390
  038D    0875    LD	A,0x75
  038E    22A0    CALL	0x2A0
  038F    118A    CLRB	0xA,3
  0390    3002    LDIA	0x2
  0391    0AF5    INCR	0x75
  0392    0275    SUBA	0x75
  0393    1803    SZB	0x3,0
  0394    0008    RET
  0395    2B87    JP	0x387
---- stringtab ------------------------------------------------------------------
  0828    3008    LDIA	0x8
  0829    008A    LD	0xA,A
  082A    0804    LD	A,0x4
  082B    0A84    INCR	0x4
  082C    0782    ADDR	0x2
  082D    3400    RET	0x0
---- reset_enter ------------------------------------------------------------------
  0000    118A    CLRB	0xA,3
  0001    280D    JP	0xD
  000D    118A    CLRB	0xA,3
  000E    280F    JP	0xF
---- start_initialization ------------------------------------------------------------------
  000F    307F    LDIA	0x7F
  0010    00ED    LD	0x6D,A
  0011    00EE    LD	0x6E,A
  0012    30A0    LDIA	0xA0
  0013    1383    CLRB	0x3,7
  0014    0084    LD	0x4,A
  0015    30BE    LDIA	0xBE
  0016    158A    SETB	0xA,3
  0017    257D    CALL	0x57D
  0018    118A    CLRB	0xA,3
  0019    3020    LDIA	0x20
  001A    0084    LD	0x4,A
  001B    3049    LDIA	0x49
  001C    158A    SETB	0xA,3
  001D    257D    CALL	0x57D
  001E    01F9    CLR	0x79
  001F    01FA    CLR	0x7A
  0020    01F8    CLR	0x78
---- interrupt_function_enter ----------------------------------------------------------
  0004    00FE    LD	0x7E,A
  0005    0E03    SWAPA	0x3
  0006    00F0    LD	0x70,A
  0007    0804    LD	A,0x4
  0008    00F1    LD	0x71,A
  0009    080A    LD	A,0xA
  000A    00F2    LD	0x72,A
  000B    158A    SETB	0xA,3
  000C    2E48    JP	0x648
  0800    158A    SETB	0xA,3
  0801    2F17    JP	0x717
  0802    158A    SETB	0xA,3
  0803    2E7C    JP	0x67C
  0804    158A    SETB	0xA,3
  0805    2E83    JP	0x683
  0806    158A    SETB	0xA,3
  0807    2E8A    JP	0x68A
  0808    158A    SETB	0xA,3
  0809    2E91    JP	0x691
  080A    158A    SETB	0xA,3
  080B    2E96    JP	0x696
  080C    158A    SETB	0xA,3
  080D    2E9D    JP	0x69D
  080E    158A    SETB	0xA,3
  080F    2EA4    JP	0x6A4
  0810    158A    SETB	0xA,3
  0811    2EAB    JP	0x6AB
  0812    158A    SETB	0xA,3
  0813    2EB0    JP	0x6B0
  0814    158A    SETB	0xA,3
  0815    2EB7    JP	0x6B7
  0816    158A    SETB	0xA,3
  0817    2EBE    JP	0x6BE
  0818    158A    SETB	0xA,3
  0819    2EC5    JP	0x6C5
  081A    158A    SETB	0xA,3
  081B    2ECA    JP	0x6CA
  081C    158A    SETB	0xA,3
  081D    2ED1    JP	0x6D1
  081E    158A    SETB	0xA,3
  081F    2ED8    JP	0x6D8
  0820    158A    SETB	0xA,3
  0821    2EE5    JP	0x6E5
  0822    158A    SETB	0xA,3
  0823    2EED    JP	0x6ED
  0824    158A    SETB	0xA,3
  0825    2EF7    JP	0x6F7
  0826    158A    SETB	0xA,3
  0827    2F01    JP	0x701
---- common_function ------------------------------------------------------------------
  0021    0183    CLR	0x3
  0022    158A    SETB	0xA,3
  0023    2D85    JP	0x585
  03A4    0800    LD	A,0x0
  03A5    00CB    LD	0x4B,A
  03A6    0A84    INCR	0x4
  03A7    0800    LD	A,0x0
  03A8    00CC    LD	0x4C,A
  03A9    0849    LD	A,0x49
  03AA    02CB    SUBR	0x4B
  03AB    084A    LD	A,0x4A
  03AC    1C03    SNZB	0x3,0
  03AD    03CC    DECR	0x4C
  03AE    02CC    SUBR	0x4C
  03AF    3000    LDIA	0x0
  03B0    024C    SUBA	0x4C
  03B1    3402    RET	0x2
  03B2    00C9    LD	0x49,A
  03B3    0A84    INCR	0x4
  03B4    0800    LD	A,0x0
  03B5    00CA    LD	0x4A,A
  03B6    0852    LD	A,0x52
  03B7    0749    ADDA	0x49
  03B8    00CB    LD	0x4B,A
  03B9    084A    LD	A,0x4A
  03BA    1803    SZB	0x3,0
  03BB    0A4A    INCA	0x4A
  03BC    00CC    LD	0x4C,A
  03BD    0854    LD	A,0x54
  03BE    024C    SUBA	0x4C
  03BF    1D03    SNZB	0x3,2
  03C0    0008    RET
  03C1    0853    LD	A,0x53
  03C2    024B    SUBA	0x4B
  03C3    0008    RET
  03C4    0084    LD	0x4,A
  03C5    0800    LD	A,0x0
  03C6    00C9    LD	0x49,A
  03C7    0A84    INCR	0x4
  03C8    0800    LD	A,0x0
  03C9    00CA    LD	0x4A,A
  03CA    0008    RET
  03CB    0084    LD	0x4,A
  03CC    0874    LD	A,0x74
  03CD    0080    LD	0x0,A
  03CE    0A84    INCR	0x4
  03CF    0875    LD	A,0x75
  03D0    0080    LD	0x0,A
  03D1    1003    CLRB	0x3,0
  03D2    0D54    RLCA	0x54
  03D3    3EA8    ADDIA	0xA8
  03D4    0084    LD	0x4,A
  03D5    0008    RET
  03D6    0084    LD	0x4,A
  03D7    0875    LD	A,0x75
  03D8    0080    LD	0x0,A
  03D9    0A84    INCR	0x4
  03DA    0876    LD	A,0x76
  03DB    0080    LD	0x0,A
  03DC    1003    CLRB	0x3,0
  03DD    0D4D    RLCA	0x4D
  03DE    3EA8    ADDIA	0xA8
  03DF    0084    LD	0x4,A
  03E0    0008    RET
  03E1    0084    LD	0x4,A
  03E2    0800    LD	A,0x0
  03E3    00F4    LD	0x74,A
  03E4    0A84    INCR	0x4
  03E5    0800    LD	A,0x0
  03E6    00F5    LD	0x75,A
  03E7    0008    RET
  03E8    0800    LD	A,0x0
  03E9    00F5    LD	0x75,A
  03EA    0A84    INCR	0x4
  03EB    0800    LD	A,0x0
  03EC    00F6    LD	0x76,A
  03ED    1003    CLRB	0x3,0
  03EE    0D4D    RLCA	0x4D
  03EF    0008    RET
  03F0    0180    CLR	0x0
  03F1    0A84    INCR	0x4
  03F2    0180    CLR	0x0
  03F3    1003    CLRB	0x3,0
  03F4    0D73    RLCA	0x73
  03F5    0008    RET
  03F6    3041    LDIA	0x41
  03F7    1683    SETB	0x3,5
  03F8    0095    LD	0x15,A
  03F9    1415    SETB	0x15,0
  03FA    0196    CLR	0x16
  03FB    0008    RET
  03FC    0849    LD	A,0x49
  03FD    0080    LD	0x0,A
  03FE    0A84    INCR	0x4
  03FF    084A    LD	A,0x4A
  0400    0080    LD	0x0,A
  0401    0008    RET
  0402    01D4    CLR	0x54
  0403    01D2    CLR	0x52
  0404    0AD2    INCR	0x52
  0405    01D3    CLR	0x53
  0406    0008    RET
  0407    0DD2    RLCR	0x52
  0408    0DD3    RLCR	0x53
  0409    0AD4    INCR	0x54
  040A    0254    SUBA	0x54
  040B    0008    RET
  0788    00F5    LD	0x75,A
  0789    01F6    CLR	0x76
  078A    01F7    CLR	0x77
  078B    0874    LD	A,0x74
  078C    02CC    SUBR	0x4C
  078D    0875    LD	A,0x75
  078E    1C03    SNZB	0x3,0
  078F    0F75    SZINCA	0x75
  0790    02CD    SUBR	0x4D
  0791    0876    LD	A,0x76
  0792    1C03    SNZB	0x3,0
  0793    0F76    SZINCA	0x76
  0794    02CE    SUBR	0x4E
  0795    0877    LD	A,0x77
  0796    0008    RET
  0797    01CC    CLR	0x4C
  0798    01CD    CLR	0x4D
  0799    01CE    CLR	0x4E
  079A    01CF    CLR	0x4F
  079B    01D0    CLR	0x50
  079C    01D1    CLR	0x51
  079D    01D2    CLR	0x52
  079E    01D3    CLR	0x53
  079F    0008    RET
  07A0    085E    LD	A,0x5E
  07A1    00E2    LD	0x62,A
  07A2    085F    LD	A,0x5F
  07A3    00E3    LD	0x63,A
  07A4    0860    LD	A,0x60
  07A5    00E4    LD	0x64,A
  07A6    0008    RET
  07A7    1003    CLRB	0x3,0
  07A8    0CF5    RRCR	0x75
  07A9    0CF4    RRCR	0x74
  07AA    0CF3    RRCR	0x73
  07AB    0008    RET
  07AC    0855    LD	A,0x55
  07AD    00D3    LD	0x53,A
  07AE    0854    LD	A,0x54
  07AF    00D2    LD	0x52,A
  07B0    0008    RET
  07B1    01CF    CLR	0x4F
  07B2    01D0    CLR	0x50
  07B3    01D1    CLR	0x51
  07B4    0008    RET
  082E    343F    RET	0x3F
  082F    3406    RET	0x6
  0830    345B    RET	0x5B
  0831    344F    RET	0x4F
  0832    3466    RET	0x66
  0833    346D    RET	0x6D
  0834    347D    RET	0x7D
  0835    3407    RET	0x7
  0836    347F    RET	0x7F
  0837    346F    RET	0x6F
  0838    3471    RET	0x71
  0839    3479    RET	0x79
  083A    3450    RET	0x50
  083B    3401    RET	0x1
  083C    3402    RET	0x2
  083D    3404    RET	0x4
  083E    3408    RET	0x8
  083F    3410    RET	0x10
  0840    3420    RET	0x20
  0841    3440    RET	0x40
  0842    3480    RET	0x80
  0843    340A    RET	0xA
  0844    340A    RET	0xA
  0845    3402    RET	0x2
  0846    3402    RET	0x2
  0847    3442    RET	0x42
  0848    3443    RET	0x43
  0D7D    0064    CLRWDT
  0D7E    0180    CLR	0x0
  0D7F    0A84    INCR	0x4
  0D80    0604    XORA	0x4
  0D81    1903    SZB	0x3,2
  0D82    3400    RET	0x0
  0D83    0604    XORA	0x4
  0D84    2D7E    JP	0x57E
  0DC1    30E4    LDIA	0xE4
  0DC2    1683    SETB	0x3,5
  0DC3    0586    ANDR	0x6
  0DC4    1283    CLRB	0x3,5
  0DC5    1206    CLRB	0x6,4
  0DC6    301B    LDIA	0x1B
  0DC7    1683    SETB	0x3,5
  0DC8    0485    ORR	0x5
  0DC9    1283    CLRB	0x3,5
  0DCA    1605    SETB	0x5,4
  0DCB    0008    RET
  0F18    1283    CLRB	0x3,5
  0F19    1205    CLRB	0x5,4
  0F1A    1606    SETB	0x6,4
  0F1B    0008    RET
