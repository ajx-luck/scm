

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 12 17:32:25 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text17,local,class=CODE,merge=1,delta=2
    24                           	psect	text19,local,class=CODE,merge=1,delta=2
    25                           	psect	text26,local,class=CODE,merge=1,delta=2
    26                           	psect	text27,local,class=CODE,merge=1,delta=2
    27                           	psect	text40,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	idataCOMMON
    68  0000                     __pidataCOMMON:	
    69                           
    70                           	psect	idataBANK0
    71  0000                     __pidataBANK0:	
    72                           
    73                           	psect	strings
    74  0800                     __pstrings:	
    75  0800                     stringtab:	
    76  0800                     __stringtab:	
    77  0800                     stringcode:	
    78                           ;	String table - string pointers are 1 byte each
    79                           
    80  0800                     stringdir:	
    81  0800  3008               	movlw	high stringdir
    82  0801  008A               	movwf	10
    83  0802  0804               	movf	4,w
    84  0803  0A84               	incf	4,f
    85  0804  0782               	addwf	2,f
    86  0805                     __stringbase:	
    87  0805  3400               	retlw	0
    88  0806                     __end_of__stringtab:	
    89  0806                     _numArray:	
    90  0806  343F               	retlw	63
    91  0807  3406               	retlw	6
    92  0808  345B               	retlw	91
    93  0809  344F               	retlw	79
    94  080A  3466               	retlw	102
    95  080B  346D               	retlw	109
    96  080C  347D               	retlw	125
    97  080D  3407               	retlw	7
    98  080E  347F               	retlw	127
    99  080F  346F               	retlw	111
   100  0810  3471               	retlw	113
   101  0811  3479               	retlw	121
   102  0812  3450               	retlw	80
   103  0813                     __end_of_numArray:	
   104  0813                     _Table_KeyFalg:	
   105  0813  3401               	retlw	1
   106  0814  3402               	retlw	2
   107  0815  3404               	retlw	4
   108  0816  3408               	retlw	8
   109  0817  3410               	retlw	16
   110  0818  3420               	retlw	32
   111  0819  3440               	retlw	64
   112  081A  3480               	retlw	128
   113  081B                     __end_of_Table_KeyFalg:	
   114  081B                     _Table_KeyDown:	
   115  081B  340A               	retlw	10
   116  081C  340A               	retlw	10
   117  081D                     __end_of_Table_KeyDown:	
   118  081D                     _Table_KeyCap:	
   119  081D  3402               	retlw	2
   120  081E  3402               	retlw	2
   121  081F                     __end_of_Table_KeyCap:	
   122  081F                     _Table_KeyChannel:	
   123  081F  3442               	retlw	66
   124  0820  3443               	retlw	67
   125  0821                     __end_of_Table_KeyChannel:	
   126                           
   127                           	psect	nvBANK0
   128  006C                     __pnvBANK0:	
   129  006C                     _firstTime:	
   130  006C                     	ds	1
   131  001E                     _PWMD01H	set	30
   132  001D                     _PWMCON2	set	29
   133  001A                     _PWMD1L	set	26
   134  0019                     _PWMD0L	set	25
   135  0018                     _PWMTH	set	24
   136  0017                     _PWMTL	set	23
   137  0016                     _PWMCON1	set	22
   138  0015                     _PWMCON0	set	21
   139  0014                     _OSCCON	set	20
   140  0013                     _T2CON	set	19
   141  0011                     _PR2	set	17
   142  000E                     _PIE1	set	14
   143  000D                     _PIR1	set	13
   144  000B                     _INTCON	set	11
   145  0008                     _WPUB	set	8
   146  0006                     _PORTB	set	6
   147  0005                     _TRISB	set	5
   148  0001                     _OPTION_REG	set	1
   149  0069                     _TMR2IF	set	105
   150  006B                     _RAIF	set	107
   151  0058                     _RBIF	set	88
   152  0059                     _INTF	set	89
   153  005B                     _RBIE	set	91
   154  0048                     _IOCB0	set	72
   155  0034                     _RB4	set	52
   156  0036                     _RB6	set	54
   157  0028                     _TRISB0	set	40
   158  002E                     _TRISB6	set	46
   159  0099                     _ADRESH	set	153
   160  0098                     _ADRESL	set	152
   161  0096                     _ADCON1	set	150
   162  0095                     _ADCON0	set	149
   163  0086                     _PORTA	set	134
   164  0085                     _TRISA	set	133
   165  0081                     _TMR0	set	129
   166  04B2                     _LDO_EN	set	1202
   167  04B6                     _CHS4	set	1206
   168  04A8                     _ADON	set	1192
   169  04A9                     _GODONE	set	1193
   170  0430                     _RA0	set	1072
   171  0431                     _RA1	set	1073
   172  0433                     _RA3	set	1075
   173  0434                     _RA4	set	1076
   174  0117                     _KEYDATAH	set	279
   175  0116                     _KEYDATAL	set	278
   176  0113                     _KEYCON2	set	275
   177  0112                     _KEYCON1	set	274
   178  0111                     _KEYCON0	set	273
   179  0110                     _PIE2	set	272
   180  010F                     _PIR2	set	271
   181  0106                     _PORTC	set	262
   182  0105                     _TRISC	set	261
   183                           
   184                           	psect	cinit
   185  000D                     start_initialization:	
   186                           ; #config settings
   187                           
   188  000D                     __initialization:	
   189                           
   190                           ;initializer for _showNumGe
   191  000D  307F               	movlw	127
   192  000E  00ED               	movwf	__pdataBANK0& (0+127)
   193                           
   194                           ;initializer for _showNumShi
   195  000F  00FB               	movwf	__pdataCOMMON& (0+127)
   196  0010  30A0               	movlw	low __pbssBANK1
   197                           
   198                           ; Clear objects allocated to BANK1
   199  0011  1383               	bcf	3,7	;select IRP bank0
   200  0012  0084               	movwf	4
   201  0013  30B8               	movlw	low (__pbssBANK1+24)
   202  0014  158A  25B9  118A   	fcall	clear_ram0
   203                           
   204                           ; Clear objects allocated to BANK0
   205  0017  3020               	movlw	low __pbssBANK0
   206  0018  0084               	movwf	4
   207  0019  304A               	movlw	low (__pbssBANK0+42)
   208  001A  158A  25B9         	fcall	clear_ram0
   209                           
   210                           ; Clear objects allocated to COMMON
   211  001C  01F9               	clrf	__pbssCOMMON& (0+127)
   212  001D  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   213                           
   214                           ; Clear objects allocated to BITCOMMON
   215  001E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   216  001F                     end_of_initialization:	
   217                           ;End of C runtime variable initialization code
   218                           
   219  001F                     __end_of__initialization:	
   220  001F  0183               	clrf	3
   221  0020  158A  2E0B         	ljmp	_main	;jump to C main() function
   222                           
   223                           	psect	bitbssCOMMON
   224  03C0                     __pbitbssCOMMON:	
   225  03C0                     _b_ksleep:	
   226  03C0                     	ds	1
   227  03C1                     _b_kerr:	
   228  03C1                     	ds	1
   229  03C2                     _b_kclr:	
   230  03C2                     	ds	1
   231  03C3                     _b_kover1:	
   232  03C3                     	ds	1
   233  03C4                     _b_kover:	
   234  03C4                     	ds	1
   235  03C5                     _B_OnOff:	
   236  03C5                     	ds	1
   237  03C6                     _B_MainLoop:	
   238  03C6                     	ds	1
   239                           
   240                           	psect	bssCOMMON
   241  0079                     __pbssCOMMON:	
   242  0079                     _wuhuaFlag:	
   243  0079                     	ds	1
   244  007A                     _workStep:	
   245  007A                     	ds	1
   246                           
   247                           	psect	dataCOMMON
   248  007B                     __pdataCOMMON:	
   249  007B                     _showNumShi:	
   250  007B                     	ds	1
   251                           
   252                           	psect	bssBANK0
   253  0020                     __pbssBANK0:	
   254  0020                     _KeyOldValue1:	
   255  0020                     	ds	4
   256  0024                     _KeyData:	
   257  0024                     	ds	2
   258  0026                     _KeyOldData:	
   259  0026                     	ds	2
   260  0028                     _power_ad:	
   261  0028                     	ds	2
   262  002A                     _shanshuoTime2:	
   263  002A                     	ds	2
   264  002C                     _shanshuoTime:	
   265  002C                     	ds	2
   266  002E                     _KeyFlag:	
   267  002E                     	ds	2
   268  0030                     TurnKeyFlags@F84:	
   269  0030                     	ds	1
   270  0031                     TurnKeyFlags@F83:	
   271  0031                     	ds	1
   272  0032                     CheckKeyOldValue@F77:	
   273  0032                     	ds	1
   274  0033                     _KeyMaxSub:	
   275  0033                     	ds	1
   276  0034                     _KeyCounter:	
   277  0034                     	ds	1
   278  0035                     WorkSleep@time:	
   279  0035                     	ds	1
   280  0036                     KeyServer@KeyOldFlag:	
   281  0036                     	ds	1
   282  0037                     _test_adc:	
   283  0037                     	ds	1
   284  0038                     _curBatStep:	
   285  0038                     	ds	1
   286  0039                     _showBatStep:	
   287  0039                     	ds	1
   288  003A                     _wuhuaKeyFlag:	
   289  003A                     	ds	1
   290  003B                     _fanKeyFlag:	
   291  003B                     	ds	1
   292  003C                     _ledCnt:	
   293  003C                     	ds	1
   294  003D                     _lowFanTime:	
   295  003D                     	ds	1
   296  003E                     _lowBatTime:	
   297  003E                     	ds	1
   298  003F                     _lowBatLock:	
   299  003F                     	ds	1
   300  0040                     _firstLock:	
   301  0040                     	ds	1
   302  0041                     _chrgFullTime:	
   303  0041                     	ds	1
   304  0042                     _chrgFlag:	
   305  0042                     	ds	1
   306  0043                     _fanOverTime:	
   307  0043                     	ds	1
   308  0044                     _count10s:	
   309  0044                     	ds	1
   310  0045                     _fanDuty:	
   311  0045                     	ds	1
   312  0046                     _count1s:	
   313  0046                     	ds	1
   314  0047                     _MainTime:	
   315  0047                     	ds	1
   316  0048                     _adresult:	
   317  0048                     	ds	2
   318                           
   319                           	psect	dataBANK0
   320  006D                     __pdataBANK0:	
   321  006D                     _showNumGe:	
   322  006D                     	ds	1
   323                           
   324                           	psect	bssBANK1
   325  00A0                     __pbssBANK1:	
   326  00A0                     _KeyReference:	
   327  00A0                     	ds	4
   328  00A4                     _KeyOldValue2:	
   329  00A4                     	ds	4
   330  00A8                     _KeyOldValue0:	
   331  00A8                     	ds	4
   332  00AC                     _KeyResSum:	
   333  00AC                     	ds	4
   334  00B0                     CheckValidTime@F87:	
   335  00B0                     	ds	2
   336  00B2                     _result:	
   337  00B2                     	ds	2
   338  00B4                     _fanValue:	
   339  00B4                     	ds	2
   340  00B6                     _KeyUpShake:	
   341  00B6                     	ds	2
   342                           
   343                           	psect	clrtext
   344  0DB9                     clear_ram0:	
   345                           ;	Called with FSR containing the base address, and
   346                           ;	W with the last address+1
   347                           
   348  0DB9  0064               	clrwdt	;clear the watchdog before getting into this loop
   349  0DBA                     clrloop0:	
   350  0DBA  0180               	clrf	0	;clear RAM location pointed to by FSR
   351  0DBB  0A84               	incf	4,f	;increment pointer
   352  0DBC  0604               	xorwf	4,w	;XOR with final address
   353  0DBD  1903               	btfsc	3,2	;have we reached the end yet?
   354  0DBE  3400               	retlw	0	;all done for this memory range, return
   355  0DBF  0604               	xorwf	4,w	;XOR again to restore value
   356  0DC0  2DBA               	goto	clrloop0	;do the next byte
   357                           
   358                           	psect	cstackBANK1
   359  00B8                     __pcstackBANK1:	
   360  00B8                     workCtr@power_temp:	
   361                           
   362                           ; 4 bytes @ 0x0
   363  00B8                     	ds	4
   364                           
   365                           	psect	cstackCOMMON
   366  0070                     __pcstackCOMMON:	
   367  0070                     ?_SystemEnterSleep:	
   368  0070                     ?_ledShow:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_CheckTouchKey:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Init_System:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_Refurbish_Sfr:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_KeyServer:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_Isr_Timer:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_Isr_Timer:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_WorkSleep:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_showBatLed:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_setBatStep:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_chrgCtr:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_keyLedCtr:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_pwmInit:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_pwmStop:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_fanInit:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_fanStop:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_fanCtr:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_wuhuaCtr:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_workCtr:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_main:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_KeyIsIn:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_KeyClearOne:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_KeyClearIn:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_KeyStopClear:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_ClearResSum:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_GetTouchKeyValue:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_CheckOnceResult:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_CheckKeyOldValue:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_TurnKeyFlags:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_CheckValidTime:	
   456                           ; 1 bytes @ 0x0
   457                           
   458                           
   459                           ; 1 bytes @ 0x0
   460  0070                     	ds	2
   461  0072                     ??_ledShow:	
   462  0072                     ??_Init_System:	
   463                           ; 1 bytes @ 0x2
   464                           
   465  0072                     ??_Refurbish_Sfr:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ??_KeyServer:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ??_pwmInit:	
   472                           ; 1 bytes @ 0x2
   473                           
   474  0072                     ??_pwmStop:	
   475                           ; 1 bytes @ 0x2
   476                           
   477  0072                     ??_fanInit:	
   478                           ; 1 bytes @ 0x2
   479                           
   480  0072                     ??_fanStop:	
   481                           ; 1 bytes @ 0x2
   482                           
   483  0072                     ??_wuhuaCtr:	
   484                           ; 1 bytes @ 0x2
   485                           
   486  0072                     ??_KeyIsIn:	
   487                           ; 1 bytes @ 0x2
   488                           
   489  0072                     ??_KeyClearOne:	
   490                           ; 1 bytes @ 0x2
   491                           
   492  0072                     ??_ClearResSum:	
   493                           ; 1 bytes @ 0x2
   494                           
   495  0072                     ?_KeyHave:	
   496                           ; 1 bytes @ 0x2
   497                           
   498  0072                     ??_CheckValidTime:	
   499                           ; 1 bytes @ 0x2
   500                           
   501  0072                     ??___lmul:	
   502                           ; 1 bytes @ 0x2
   503                           
   504  0072                     ?___lbdiv:	
   505                           ; 1 bytes @ 0x2
   506                           
   507  0072                     ?___lbmod:	
   508                           ; 1 bytes @ 0x2
   509                           
   510  0072                     ?___lwdiv:	
   511                           ; 1 bytes @ 0x2
   512                           
   513  0072                     ?___lwmod:	
   514                           ; 2 bytes @ 0x2
   515                           
   516  0072                     ?___ftpack:	
   517                           ; 2 bytes @ 0x2
   518                           
   519  0072                     KeyIsIn@46:	
   520                           ; 3 bytes @ 0x2
   521                           
   522  0072                     KeyClearOne@49:	
   523                           ; 1 bytes @ 0x2
   524                           
   525  0072                     ClearResSum@56:	
   526                           ; 1 bytes @ 0x2
   527                           
   528  0072                     ___lbdiv@divisor:	
   529                           ; 1 bytes @ 0x2
   530                           
   531  0072                     ___lbmod@divisor:	
   532                           ; 1 bytes @ 0x2
   533                           
   534  0072                     KeyHave@59:	
   535                           ; 1 bytes @ 0x2
   536                           
   537  0072                     ___lwdiv@divisor:	
   538                           ; 2 bytes @ 0x2
   539                           
   540  0072                     ___lwmod@divisor:	
   541                           ; 2 bytes @ 0x2
   542                           
   543  0072                     ___ftpack@arg:	
   544                           ; 2 bytes @ 0x2
   545                           
   546  0072                     ___lmul@product:	
   547                           ; 3 bytes @ 0x2
   548                           
   549                           
   550                           ; 4 bytes @ 0x2
   551  0072                     	ds	1
   552  0073                     ?_ADC_Sample:	
   553  0073                     ??_KeyStopClear:	
   554                           ; 1 bytes @ 0x3
   555                           
   556  0073                     ??_GetTouchKeyValue:	
   557                           ; 1 bytes @ 0x3
   558                           
   559  0073                     ??___lbdiv:	
   560                           ; 1 bytes @ 0x3
   561                           
   562  0073                     ??___lbmod:	
   563                           ; 1 bytes @ 0x3
   564                           
   565  0073                     ADC_Sample@adldo:	
   566                           ; 1 bytes @ 0x3
   567                           
   568  0073                     KeyIsIn@45:	
   569                           ; 1 bytes @ 0x3
   570                           
   571  0073                     KeyStopClear@53:	
   572                           ; 1 bytes @ 0x3
   573                           
   574  0073                     ___lbdiv@dividend:	
   575                           ; 1 bytes @ 0x3
   576                           
   577  0073                     GetTouchKeyValue@64:	
   578                           ; 1 bytes @ 0x3
   579                           
   580                           
   581                           ; 2 bytes @ 0x3
   582  0073                     	ds	1
   583  0074                     ??_ADC_Sample:	
   584  0074                     ??_KeyClearIn:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0074                     ??_KeyHave:	
   588                           ; 1 bytes @ 0x4
   589                           
   590  0074                     ??_CheckKeyOldValue:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0074                     KeyClearIn@51:	
   594                           ; 1 bytes @ 0x4
   595                           
   596  0074                     KeyHave@58:	
   597                           ; 1 bytes @ 0x4
   598                           
   599  0074                     ___lbdiv@counter:	
   600                           ; 1 bytes @ 0x4
   601                           
   602  0074                     ___lbmod@dividend:	
   603                           ; 1 bytes @ 0x4
   604                           
   605  0074                     ___lwdiv@dividend:	
   606                           ; 1 bytes @ 0x4
   607                           
   608  0074                     ___lwmod@dividend:	
   609                           ; 2 bytes @ 0x4
   610                           
   611                           
   612                           ; 2 bytes @ 0x4
   613  0074                     	ds	1
   614  0075                     ??_TurnKeyFlags:	
   615  0075                     ___ftpack@exp:	
   616                           ; 1 bytes @ 0x5
   617                           
   618  0075                     ___lbdiv@quotient:	
   619                           ; 1 bytes @ 0x5
   620                           
   621  0075                     ___lbmod@counter:	
   622                           ; 1 bytes @ 0x5
   623                           
   624  0075                     GetTouchKeyValue@63:	
   625                           ; 1 bytes @ 0x5
   626                           
   627                           
   628                           ; 2 bytes @ 0x5
   629  0075                     	ds	1
   630  0076                     ??_setBatStep:	
   631  0076                     ??___lwdiv:	
   632                           ; 1 bytes @ 0x6
   633                           
   634  0076                     ??___lwmod:	
   635                           ; 1 bytes @ 0x6
   636                           
   637  0076                     ___ftpack@sign:	
   638                           ; 1 bytes @ 0x6
   639                           
   640  0076                     ___lbmod@rem:	
   641                           ; 1 bytes @ 0x6
   642                           
   643  0076                     ___lwmod@counter:	
   644                           ; 1 bytes @ 0x6
   645                           
   646                           
   647                           ; 1 bytes @ 0x6
   648  0076                     	ds	1
   649  0077                     ??_showBatLed:	
   650  0077                     ??_chrgCtr:	
   651                           ; 1 bytes @ 0x7
   652                           
   653  0077                     ??_keyLedCtr:	
   654                           ; 1 bytes @ 0x7
   655                           
   656  0077                     ??___lwtoft:	
   657                           ; 1 bytes @ 0x7
   658                           
   659  0077                     GetTouchKeyValue@62:	
   660                           ; 1 bytes @ 0x7
   661                           
   662                           
   663                           ; 1 bytes @ 0x7
   664  0077                     	ds	1
   665  0078                     ??_CheckTouchKey:	
   666  0078                     ??_WorkSleep:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0078                     ??_fanCtr:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  0078                     ??_workCtr:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0078                     ??_main:	
   676                           ; 1 bytes @ 0x8
   677                           
   678                           
   679                           	psect	cstackBANK0
   680  004A                     __pcstackBANK0:	
   681                           ; 1 bytes @ 0x8
   682                           
   683  004A                     ??_SystemEnterSleep:	
   684  004A                     ??___ftpack:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  004A                     ??_CheckOnceResult:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  004A                     ?___lmul:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  004A                     ADC_Sample@j:	
   694                           ; 4 bytes @ 0x0
   695                           
   696  004A                     ___lwdiv@counter:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  004A                     CheckKeyOldValue@79:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  004A                     ___lmul@multiplier:	
   703                           ; 2 bytes @ 0x0
   704                           
   705                           
   706                           ; 4 bytes @ 0x0
   707  004A                     	ds	1
   708  004B                     ADC_Sample@adch:	
   709  004B                     ___lwdiv@quotient:	
   710                           ; 1 bytes @ 0x1
   711                           
   712                           
   713                           ; 2 bytes @ 0x1
   714  004B                     	ds	1
   715  004C                     ADC_Sample@i:	
   716  004C                     CheckKeyOldValue@80:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  004C                     SystemEnterSleep@94:	
   720                           ; 2 bytes @ 0x2
   721                           
   722                           
   723                           ; 2 bytes @ 0x2
   724  004C                     	ds	1
   725  004D                     ?___lwtoft:	
   726  004D                     ___lwtoft@c:	
   727                           ; 3 bytes @ 0x3
   728                           
   729  004D                     ADC_Sample@adsum:	
   730                           ; 2 bytes @ 0x3
   731                           
   732                           
   733                           ; 4 bytes @ 0x3
   734  004D                     	ds	1
   735  004E                     CheckKeyOldValue@78:	
   736  004E                     CheckOnceResult@73:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  004E                     SystemEnterSleep@93:	
   740                           ; 2 bytes @ 0x4
   741                           
   742  004E                     ___lmul@multiplicand:	
   743                           ; 2 bytes @ 0x4
   744                           
   745                           
   746                           ; 4 bytes @ 0x4
   747  004E                     	ds	2
   748  0050                     ?___ftdiv:	
   749  0050                     CheckOnceResult@70:	
   750                           ; 3 bytes @ 0x6
   751                           
   752  0050                     SystemEnterSleep@92:	
   753                           ; 1 bytes @ 0x6
   754                           
   755  0050                     ___ftdiv@f2:	
   756                           ; 2 bytes @ 0x6
   757                           
   758                           
   759                           ; 3 bytes @ 0x6
   760  0050                     	ds	1
   761  0051                     ADC_Sample@admin:	
   762  0051                     CheckOnceResult@72:	
   763                           ; 2 bytes @ 0x7
   764                           
   765                           
   766                           ; 2 bytes @ 0x7
   767  0051                     	ds	1
   768  0052                     SystemEnterSleep@91:	
   769                           
   770                           ; 1 bytes @ 0x8
   771  0052                     	ds	1
   772  0053                     CheckOnceResult@69:	
   773  0053                     ADC_Sample@admax:	
   774                           ; 1 bytes @ 0x9
   775                           
   776  0053                     ___ftdiv@f1:	
   777                           ; 2 bytes @ 0x9
   778                           
   779                           
   780                           ; 3 bytes @ 0x9
   781  0053                     	ds	1
   782  0054                     CheckOnceResult@71:	
   783                           
   784                           ; 2 bytes @ 0xA
   785  0054                     	ds	1
   786  0055                     ADC_Sample@ad_temp:	
   787                           
   788                           ; 2 bytes @ 0xB
   789  0055                     	ds	1
   790  0056                     ??___ftdiv:	
   791  0056                     CheckOnceResult@68:	
   792                           ; 1 bytes @ 0xC
   793                           
   794                           
   795                           ; 1 bytes @ 0xC
   796  0056                     	ds	1
   797  0057                     fanCtr@maxFanValue:	
   798                           
   799                           ; 1 bytes @ 0xD
   800  0057                     	ds	1
   801  0058                     fanCtr@fan_temp:	
   802                           
   803                           ; 4 bytes @ 0xE
   804  0058                     	ds	1
   805  0059                     ___ftdiv@cntr:	
   806                           
   807                           ; 1 bytes @ 0xF
   808  0059                     	ds	1
   809  005A                     ___ftdiv@f3:	
   810                           
   811                           ; 3 bytes @ 0x10
   812  005A                     	ds	3
   813  005D                     ___ftdiv@exp:	
   814                           
   815                           ; 1 bytes @ 0x13
   816  005D                     	ds	1
   817  005E                     ___ftdiv@sign:	
   818                           
   819                           ; 1 bytes @ 0x14
   820  005E                     	ds	1
   821  005F                     ?___fttol:	
   822  005F                     ___fttol@f1:	
   823                           ; 4 bytes @ 0x15
   824                           
   825                           
   826                           ; 3 bytes @ 0x15
   827  005F                     	ds	4
   828  0063                     ??___fttol:	
   829                           
   830                           ; 1 bytes @ 0x19
   831  0063                     	ds	3
   832  0066                     ___fttol@sign1:	
   833                           
   834                           ; 1 bytes @ 0x1C
   835  0066                     	ds	1
   836  0067                     ___fttol@lval:	
   837                           
   838                           ; 4 bytes @ 0x1D
   839  0067                     	ds	4
   840  006B                     ___fttol@exp1:	
   841                           
   842                           ; 1 bytes @ 0x21
   843  006B                     	ds	1
   844                           
   845                           	psect	maintext
   846  0E0B                     __pmaintext:	
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 873 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : B00/0
   863 ;;		On exit  : 200/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   866 ;;      Params:         0       0       0       0
   867 ;;      Locals:         0       0       0       0
   868 ;;      Temps:          0       0       0       0
   869 ;;      Totals:         0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels required when called:    6
   872 ;; This function calls:
   873 ;;		_CheckTouchKey
   874 ;;		_Init_System
   875 ;;		_KeyServer
   876 ;;		_Refurbish_Sfr
   877 ;;		_WorkSleep
   878 ;;		_chrgCtr
   879 ;;		_ledShow
   880 ;;		_setBatStep
   881 ;;		_workCtr
   882 ;; This function is called by:
   883 ;;		Startup code after reset
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           
   888                           ;psect for function _main
   889  0E0B                     _main:	
   890                           
   891                           ;main.c: 875: Init_System();
   892                           
   893                           ;incstack = 0
   894                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   895  0E0B  118A  2022  158A   	fcall	_Init_System
   896                           
   897                           ;main.c: 876: firstLock = 0;
   898  0E0E  1283               	bcf	3,5	;RP0=0, select bank0
   899  0E0F  30C8               	movlw	200
   900  0E10  01C0               	clrf	_firstLock
   901                           
   902                           ;main.c: 877: firstTime = 200;
   903  0E11  00EC               	movwf	_firstTime
   904  0E12                     l4995:	
   905                           
   906                           ;main.c: 879: {
   907                           ;main.c: 880: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0)
   908  0E12  1283               	bcf	3,5	;RP0=0, select bank0
   909  0E13  086C               	movf	_firstTime,w
   910  0E14  1D03               	btfss	3,2
   911  0E15  2E1B               	goto	l5001
   912  0E16  087A               	movf	_workStep,w
   913  0E17  1903               	btfsc	3,2
   914  0E18  0879               	movf	_wuhuaFlag,w
   915  0E19  1903               	btfsc	3,2
   916  0E1A  2E1E               	goto	l5003
   917  0E1B                     l5001:	
   918                           
   919                           ;main.c: 881: {
   920                           ;main.c: 882: ledShow();
   921  0E1B  118A  2644  158A   	fcall	_ledShow
   922  0E1E                     l5003:	
   923                           
   924                           ;main.c: 883: }
   925                           ;main.c: 884: if(B_MainLoop)
   926  0E1E  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   927  0E1F  2E12               	goto	l4995
   928                           
   929                           ;main.c: 885: {
   930                           ;main.c: 886: B_MainLoop = 0;
   931  0E20  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   932  0E21  0064               	clrwdt	;# 
   933                           
   934                           ;main.c: 888: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0)
   935  0E22  1283               	bcf	3,5	;RP0=0, select bank0
   936  0E23  1303               	bcf	3,6	;RP1=0, select bank0
   937  0E24  086C               	movf	_firstTime,w
   938  0E25  1D03               	btfss	3,2
   939  0E26  2E2C               	goto	l5013
   940  0E27  087A               	movf	_workStep,w
   941  0E28  1903               	btfsc	3,2
   942  0E29  0879               	movf	_wuhuaFlag,w
   943  0E2A  1903               	btfsc	3,2
   944  0E2B  2E2F               	goto	l5015
   945  0E2C                     l5013:	
   946                           
   947                           ;main.c: 889: {
   948                           ;main.c: 890: ledShow();
   949  0E2C  118A  2644  158A   	fcall	_ledShow
   950  0E2F                     l5015:	
   951                           
   952                           ;main.c: 891: }
   953                           ;main.c: 892: CheckTouchKey();
   954  0E2F  118A  206A  158A   	fcall	_CheckTouchKey
   955                           
   956                           ;main.c: 893: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0)
   957  0E32  1283               	bcf	3,5	;RP0=0, select bank0
   958  0E33  1303               	bcf	3,6	;RP1=0, select bank0
   959  0E34  086C               	movf	_firstTime,w
   960  0E35  1D03               	btfss	3,2
   961  0E36  2E3C               	goto	l5023
   962  0E37  087A               	movf	_workStep,w
   963  0E38  1903               	btfsc	3,2
   964  0E39  0879               	movf	_wuhuaFlag,w
   965  0E3A  1903               	btfsc	3,2
   966  0E3B  2E3F               	goto	l1164
   967  0E3C                     l5023:	
   968                           
   969                           ;main.c: 894: {
   970                           ;main.c: 895: ledShow();
   971  0E3C  118A  2644  158A   	fcall	_ledShow
   972  0E3F                     l1164:	
   973                           
   974                           ;main.c: 896: }
   975                           ;main.c: 897: chrgCtr();
   976  0E3F  158A  2666  158A   	fcall	_chrgCtr
   977                           
   978                           ;main.c: 898: Refurbish_Sfr();
   979  0E42  118A  237F  158A   	fcall	_Refurbish_Sfr
   980                           
   981                           ;main.c: 899: KeyServer();
   982  0E45  158A  25C1  158A   	fcall	_KeyServer
   983                           
   984                           ;main.c: 900: workCtr();
   985  0E48  118A  23F5  158A   	fcall	_workCtr
   986                           
   987                           ;main.c: 901: setBatStep();
   988  0E4B  158A  26DB  158A   	fcall	_setBatStep
   989                           
   990                           ;main.c: 902: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   991  0E4E  086C               	movf	_firstTime,w
   992  0E4F  1D03               	btfss	3,2
   993  0E50  2E12               	goto	l4995
   994  0E51  0842               	movf	_chrgFlag,w
   995  0E52  1D03               	btfss	3,2
   996  0E53  2E12               	goto	l4995
   997  0E54  087A               	movf	_workStep,w
   998  0E55  1D03               	btfss	3,2
   999  0E56  2E12               	goto	l4995
  1000  0E57  0879               	movf	_wuhuaFlag,w
  1001  0E58  1D03               	btfss	3,2
  1002  0E59  2E12               	goto	l4995
  1003  0E5A  082C               	movf	_shanshuoTime,w
  1004  0E5B  042D               	iorwf	_shanshuoTime+1,w
  1005  0E5C  1D03               	btfss	3,2
  1006  0E5D  2E12               	goto	l4995
  1007  0E5E  082A               	movf	_shanshuoTime2,w
  1008  0E5F  042B               	iorwf	_shanshuoTime2+1,w
  1009  0E60  1D03               	btfss	3,2
  1010  0E61  2E12               	goto	l4995
  1011                           
  1012                           ;main.c: 903: {
  1013                           ;main.c: 904: WorkSleep();
  1014  0E62  118A  203F  158A   	fcall	_WorkSleep
  1015  0E65  2E12               	goto	l4995
  1016  0E66                     __end_of_main:	
  1017                           
  1018                           	psect	text1
  1019  03F5                     __ptext1:	
  1020 ;; *************** function _workCtr *****************
  1021 ;; Defined at:
  1022 ;;		line 821 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : 300/0
  1033 ;;		On exit  : 200/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1036 ;;      Params:         0       0       0       0
  1037 ;;      Locals:         0       0       4       0
  1038 ;;      Temps:          0       0       0       0
  1039 ;;      Totals:         0       0       4       0
  1040 ;;Total ram usage:        4 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    4
  1043 ;; This function calls:
  1044 ;;		_ADC_Sample
  1045 ;;		___ftdiv
  1046 ;;		___fttol
  1047 ;;		___lwtoft
  1048 ;;		_fanCtr
  1049 ;;		_keyLedCtr
  1050 ;;		_wuhuaCtr
  1051 ;; This function is called by:
  1052 ;;		_main
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           
  1057                           ;psect for function _workCtr
  1058  03F5                     _workCtr:	
  1059                           
  1060                           ;incstack = 0
  1061                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1062  03F5  301F               	movlw	31
  1063                           
  1064                           ;main.c: 823: test_adc = ADC_Sample(31, 0);
  1065  03F6  01F3               	clrf	ADC_Sample@adldo
  1066  03F7  256A  118A         	fcall	_ADC_Sample
  1067  03F9  00B7               	movwf	_test_adc	;volatile
  1068                           
  1069                           ;main.c: 824: if (0xA5 == test_adc)
  1070  03FA  30A5               	movlw	165
  1071  03FB  0637               	xorwf	_test_adc,w	;volatile
  1072  03FC  1D03               	btfss	3,2
  1073  03FD  2C2F               	goto	l4921
  1074                           
  1075                           ;main.c: 825: {
  1076                           ;main.c: 826: volatile unsigned long power_temp;
  1077                           ;main.c: 828: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1078  03FE  3096               	movlw	150
  1079  03FF  01D3               	clrf	___ftdiv@f1
  1080  0400  00D4               	movwf	___ftdiv@f1+1
  1081  0401  304A               	movlw	74
  1082  0402  00D5               	movwf	___ftdiv@f1+2
  1083  0403  0849               	movf	_adresult+1,w	;volatile
  1084  0404  00CE               	movwf	___lwtoft@c+1
  1085  0405  0848               	movf	_adresult,w	;volatile
  1086  0406  00CD               	movwf	___lwtoft@c
  1087  0407  251C  118A         	fcall	___lwtoft
  1088  0409  084D               	movf	?___lwtoft,w
  1089  040A  00D0               	movwf	___ftdiv@f2
  1090  040B  084E               	movf	?___lwtoft+1,w
  1091  040C  00D1               	movwf	___ftdiv@f2+1
  1092  040D  084F               	movf	?___lwtoft+2,w
  1093  040E  00D2               	movwf	___ftdiv@f2+2
  1094  040F  2461  118A         	fcall	___ftdiv
  1095  0411  0850               	movf	?___ftdiv,w
  1096  0412  00DF               	movwf	___fttol@f1
  1097  0413  0851               	movf	?___ftdiv+1,w
  1098  0414  00E0               	movwf	___fttol@f1+1
  1099  0415  0852               	movf	?___ftdiv+2,w
  1100  0416  00E1               	movwf	___fttol@f1+2
  1101  0417  24C3  118A         	fcall	___fttol
  1102  0419  0862               	movf	?___fttol+3,w
  1103  041A  1683               	bsf	3,5	;RP0=1, select bank1
  1104  041B  00BB               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1105  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1106  041D  0861               	movf	?___fttol+2,w
  1107  041E  1683               	bsf	3,5	;RP0=1, select bank1
  1108  041F  00BA               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1109  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0421  0860               	movf	?___fttol+1,w
  1111  0422  1683               	bsf	3,5	;RP0=1, select bank1
  1112  0423  00B9               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1113  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0425  085F               	movf	?___fttol,w
  1115  0426  1683               	bsf	3,5	;RP0=1, select bank1
  1116  0427  00B8               	movwf	workCtr@power_temp^(0+128)	;volatile
  1117                           
  1118                           ;main.c: 829: power_ad = (unsigned int)(power_temp);
  1119  0428  0839               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1120  0429  1283               	bcf	3,5	;RP0=0, select bank0
  1121  042A  00A9               	movwf	_power_ad+1	;volatile
  1122  042B  1683               	bsf	3,5	;RP0=1, select bank1
  1123  042C  0838               	movf	workCtr@power_temp^(0+128),w	;volatile
  1124  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1125  042E  00A8               	movwf	_power_ad	;volatile
  1126  042F                     l4921:	
  1127                           
  1128                           ;main.c: 830: }
  1129                           ;main.c: 831: if(workStep == 2 && power_ad < 2900)
  1130  042F  3002               	movlw	2
  1131  0430  067A               	xorwf	_workStep,w
  1132  0431  1D03               	btfss	3,2
  1133  0432  2C43               	goto	l4931
  1134  0433  300B               	movlw	11
  1135  0434  0229               	subwf	_power_ad+1,w	;volatile
  1136  0435  3054               	movlw	84
  1137  0436  1903               	skipnz
  1138  0437  0228               	subwf	_power_ad,w	;volatile
  1139  0438  1803               	skipnc
  1140  0439  2C43               	goto	l4931
  1141                           
  1142                           ;main.c: 832: {
  1143                           ;main.c: 833: if(++lowFanTime > 200)
  1144  043A  30C9               	movlw	201
  1145  043B  0ABD               	incf	_lowFanTime,f
  1146  043C  023D               	subwf	_lowFanTime,w
  1147  043D  1C03               	skipc
  1148  043E  2C44               	goto	l4933
  1149                           
  1150                           ;main.c: 834: {
  1151                           ;main.c: 835: lowFanTime = 0;
  1152  043F  01BD               	clrf	_lowFanTime
  1153                           
  1154                           ;main.c: 836: workStep = 1;
  1155  0440  01FA               	clrf	_workStep
  1156  0441  0AFA               	incf	_workStep,f
  1157  0442  2C44               	goto	l4933
  1158  0443                     l4931:	
  1159                           
  1160                           ;main.c: 839: else
  1161                           ;main.c: 840: {
  1162                           ;main.c: 841: lowFanTime = 0;
  1163  0443  01BD               	clrf	_lowFanTime
  1164  0444                     l4933:	
  1165                           
  1166                           ;main.c: 842: }
  1167                           ;main.c: 843: if(power_ad < 2700)
  1168  0444  300A               	movlw	10
  1169  0445  0229               	subwf	_power_ad+1,w	;volatile
  1170  0446  308C               	movlw	140
  1171  0447  1903               	skipnz
  1172  0448  0228               	subwf	_power_ad,w	;volatile
  1173  0449  1803               	skipnc
  1174  044A  2C56               	goto	l4941
  1175                           
  1176                           ;main.c: 844: {
  1177                           ;main.c: 845: if(++lowBatTime > 200)
  1178  044B  30C9               	movlw	201
  1179  044C  0ABE               	incf	_lowBatTime,f
  1180  044D  023E               	subwf	_lowBatTime,w
  1181  044E  1C03               	skipc
  1182  044F  2C57               	goto	l4943
  1183                           
  1184                           ;main.c: 846: {
  1185                           ;main.c: 847: lowBatTime = 0;
  1186  0450  01BE               	clrf	_lowBatTime
  1187                           
  1188                           ;main.c: 848: lowBatLock = 1;
  1189  0451  01BF               	clrf	_lowBatLock
  1190  0452  0ABF               	incf	_lowBatLock,f
  1191                           
  1192                           ;main.c: 849: workStep = 0;
  1193  0453  01FA               	clrf	_workStep
  1194                           
  1195                           ;main.c: 850: wuhuaFlag = 0;
  1196  0454  01F9               	clrf	_wuhuaFlag
  1197  0455  2C57               	goto	l4943
  1198  0456                     l4941:	
  1199                           
  1200                           ;main.c: 853: else
  1201                           ;main.c: 854: {
  1202                           ;main.c: 855: lowBatTime = 0;
  1203  0456  01BE               	clrf	_lowBatTime
  1204  0457                     l4943:	
  1205                           
  1206                           ;main.c: 856: }
  1207                           ;main.c: 857: if(firstTime > 0)
  1208  0457  086C               	movf	_firstTime,w
  1209  0458  1903               	btfsc	3,2
  1210  0459  2C5C               	goto	l4947
  1211                           
  1212                           ;main.c: 858: {
  1213                           ;main.c: 859: firstTime--;
  1214  045A  03EC               	decf	_firstTime,f
  1215                           
  1216                           ;main.c: 860: }
  1217  045B  0008               	return
  1218  045C                     l4947:	
  1219                           
  1220                           ;main.c: 861: else
  1221                           ;main.c: 862: {
  1222                           ;main.c: 863: keyLedCtr();
  1223  045C  26F4               	fcall	_keyLedCtr
  1224                           
  1225                           ;main.c: 864: fanCtr();
  1226  045D  158A  2756  118A   	fcall	_fanCtr
  1227                           
  1228                           ;main.c: 865: wuhuaCtr();
  1229  0460  2F5C               	ljmp	l4643
  1230  0461                     __end_of_workCtr:	
  1231  0461                     __ptext15:	
  1232 ;; *************** function ___ftdiv *****************
  1233 ;; Defined at:
  1234 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  f2              3    6[BANK0 ] float 
  1237 ;;  f1              3    9[BANK0 ] float 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  f3              3   16[BANK0 ] float 
  1240 ;;  sign            1   20[BANK0 ] unsigned char 
  1241 ;;  exp             1   19[BANK0 ] unsigned char 
  1242 ;;  cntr            1   15[BANK0 ] unsigned char 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  3    6[BANK0 ] float 
  1245 ;; Registers used:
  1246 ;;		wreg, status,2, status,0, pclath, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 300/0
  1249 ;;		On exit  : 300/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1252 ;;      Params:         0       6       0       0
  1253 ;;      Locals:         0       6       0       0
  1254 ;;      Temps:          0       3       0       0
  1255 ;;      Totals:         0      15       0       0
  1256 ;;Total ram usage:       15 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    2
  1259 ;; This function calls:
  1260 ;;		___ftpack
  1261 ;; This function is called by:
  1262 ;;		_workCtr
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           
  1267                           ;psect for function ___ftdiv
  1268  0461                     ___ftdiv:	
  1269                           
  1270                           ;incstack = 0
  1271                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1272  0461  0853               	movf	___ftdiv@f1,w
  1273  0462  00D6               	movwf	??___ftdiv
  1274  0463  0854               	movf	___ftdiv@f1+1,w
  1275  0464  00D7               	movwf	??___ftdiv+1
  1276  0465  0855               	movf	___ftdiv@f1+2,w
  1277  0466  00D8               	movwf	??___ftdiv+2
  1278  0467  1003               	clrc
  1279  0468  0D57               	rlf	??___ftdiv+1,w
  1280  0469  0D58               	rlf	??___ftdiv+2,w
  1281  046A  00DD               	movwf	___ftdiv@exp
  1282  046B  085D               	movf	___ftdiv@exp,w
  1283  046C  1D03               	btfss	3,2
  1284  046D  2C6F               	goto	l4733
  1285  046E  2FB5               	ljmp	PL38	;call to abstracted procedure
  1286  046F                     l4733:	
  1287  046F  0850               	movf	___ftdiv@f2,w
  1288  0470  00D6               	movwf	??___ftdiv
  1289  0471  0851               	movf	___ftdiv@f2+1,w
  1290  0472  00D7               	movwf	??___ftdiv+1
  1291  0473  0852               	movf	___ftdiv@f2+2,w
  1292  0474  00D8               	movwf	??___ftdiv+2
  1293  0475  1003               	clrc
  1294  0476  0D57               	rlf	??___ftdiv+1,w
  1295  0477  0D58               	rlf	??___ftdiv+2,w
  1296  0478  00DE               	movwf	___ftdiv@sign
  1297  0479  085E               	movf	___ftdiv@sign,w
  1298  047A  1D03               	btfss	3,2
  1299  047B  2C7D               	goto	l1609
  1300  047C  2FB5               	ljmp	PL38	;call to abstracted procedure
  1301  047D                     l1609:	
  1302  047D  3089               	movlw	137
  1303  047E  01DA               	clrf	___ftdiv@f3
  1304  047F  01DB               	clrf	___ftdiv@f3+1
  1305  0480  01DC               	clrf	___ftdiv@f3+2
  1306  0481  075E               	addwf	___ftdiv@sign,w
  1307  0482  00D6               	movwf	??___ftdiv
  1308  0483  02DD               	subwf	___ftdiv@exp,f
  1309  0484  0855               	movf	___ftdiv@f1+2,w
  1310  0485  00DE               	movwf	___ftdiv@sign
  1311  0486  0852               	movf	___ftdiv@f2+2,w
  1312  0487  06DE               	xorwf	___ftdiv@sign,f
  1313  0488  3080               	movlw	128
  1314  0489  05DE               	andwf	___ftdiv@sign,f
  1315  048A  3018               	movlw	24
  1316  048B  17D4               	bsf	___ftdiv@f1+1,7
  1317  048C  01D5               	clrf	___ftdiv@f1+2
  1318  048D  17D1               	bsf	___ftdiv@f2+1,7
  1319  048E  01D2               	clrf	___ftdiv@f2+2
  1320  048F  00D9               	movwf	___ftdiv@cntr
  1321  0490                     l4755:	
  1322  0490  1003               	clrc
  1323  0491  0DDA               	rlf	___ftdiv@f3,f
  1324  0492  0DDB               	rlf	___ftdiv@f3+1,f
  1325  0493  0DDC               	rlf	___ftdiv@f3+2,f
  1326  0494  0852               	movf	___ftdiv@f2+2,w
  1327  0495  0255               	subwf	___ftdiv@f1+2,w
  1328  0496  1D03               	skipz
  1329  0497  2C9E               	goto	u5435
  1330  0498  0851               	movf	___ftdiv@f2+1,w
  1331  0499  0254               	subwf	___ftdiv@f1+1,w
  1332  049A  1D03               	skipz
  1333  049B  2C9E               	goto	u5435
  1334  049C  0850               	movf	___ftdiv@f2,w
  1335  049D  0253               	subwf	___ftdiv@f1,w
  1336  049E                     u5435:	
  1337  049E  1C03               	skipc
  1338  049F  2CAC               	goto	L20
  1339  04A0  0850               	movf	___ftdiv@f2,w
  1340  04A1  02D3               	subwf	___ftdiv@f1,f
  1341  04A2  0851               	movf	___ftdiv@f2+1,w
  1342  04A3  1C03               	skipc
  1343  04A4  0F51               	incfsz	___ftdiv@f2+1,w
  1344  04A5  02D4               	subwf	___ftdiv@f1+1,f
  1345  04A6  0852               	movf	___ftdiv@f2+2,w
  1346  04A7  1C03               	skipc
  1347  04A8  0A52               	incf	___ftdiv@f2+2,w
  1348  04A9  02D5               	subwf	___ftdiv@f1+2,f
  1349  04AA  145A               	bsf	___ftdiv@f3,0
  1350  04AB  1003               	clrc
  1351  04AC                     L20:	
  1352  04AC  0DD3               	rlf	___ftdiv@f1,f
  1353  04AD  0DD4               	rlf	___ftdiv@f1+1,f
  1354  04AE  0DD5               	rlf	___ftdiv@f1+2,f
  1355  04AF  0BD9               	decfsz	___ftdiv@cntr,f
  1356  04B0  2C90               	goto	l4755
  1357  04B1  085A               	movf	___ftdiv@f3,w
  1358  04B2  00F2               	movwf	___ftpack@arg
  1359  04B3  085B               	movf	___ftdiv@f3+1,w
  1360  04B4  00F3               	movwf	___ftpack@arg+1
  1361  04B5  085C               	movf	___ftdiv@f3+2,w
  1362  04B6  00F4               	movwf	___ftpack@arg+2
  1363  04B7  085D               	movf	___ftdiv@exp,w
  1364  04B8  00F5               	movwf	___ftpack@exp
  1365  04B9  085E               	movf	___ftdiv@sign,w
  1366  04BA  00F6               	movwf	___ftpack@sign
  1367  04BB  252C               	fcall	___ftpack
  1368  04BC  0872               	movf	?___ftpack,w
  1369  04BD  00D0               	movwf	?___ftdiv
  1370  04BE  0873               	movf	?___ftpack+1,w
  1371  04BF  00D1               	movwf	?___ftdiv+1
  1372  04C0  0874               	movf	?___ftpack+2,w
  1373  04C1  00D2               	movwf	?___ftdiv+2
  1374  04C2  0008               	return
  1375  04C3                     __end_of___ftdiv:	
  1376  04C3                     __ptext14:	
  1377 ;; *************** function ___fttol *****************
  1378 ;; Defined at:
  1379 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  f1              3   21[BANK0 ] float 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  lval            4   29[BANK0 ] unsigned long 
  1384 ;;  exp1            1   33[BANK0 ] unsigned char 
  1385 ;;  sign1           1   28[BANK0 ] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  4   21[BANK0 ] long 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0
  1390 ;; Tracked objects:
  1391 ;;		On entry : 300/0
  1392 ;;		On exit  : 300/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1395 ;;      Params:         0       4       0       0
  1396 ;;      Locals:         0       6       0       0
  1397 ;;      Temps:          0       3       0       0
  1398 ;;      Totals:         0      13       0       0
  1399 ;;Total ram usage:       13 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_workCtr
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function ___fttol
  1411  04C3                     ___fttol:	
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1415  04C3  27A4  118A         	fcall	PL26	;call to abstracted procedure
  1416  04C5  1003               	clrc
  1417  04C6  0D64               	rlf	??___fttol+1,w
  1418  04C7  0D65               	rlf	??___fttol+2,w
  1419  04C8  00EB               	movwf	___fttol@exp1
  1420  04C9  086B               	movf	___fttol@exp1,w
  1421  04CA  1D03               	btfss	3,2
  1422  04CB  2CD1               	goto	l4773
  1423  04CC                     l4771:	
  1424  04CC  01DF               	clrf	?___fttol
  1425  04CD  01E0               	clrf	?___fttol+1
  1426  04CE  01E1               	clrf	?___fttol+2
  1427  04CF  01E2               	clrf	?___fttol+3
  1428  04D0  0008               	return
  1429  04D1                     l4773:	
  1430  04D1  27A4  118A         	fcall	PL26	;call to abstracted procedure
  1431  04D3  3017               	movlw	23
  1432  04D4                     u5465:	
  1433  04D4  1003               	clrc
  1434  04D5  0CE5               	rrf	??___fttol+2,f
  1435  04D6  0CE4               	rrf	??___fttol+1,f
  1436  04D7  0CE3               	rrf	??___fttol,f
  1437  04D8  3EFF               	addlw	-1
  1438  04D9  1D03               	skipz
  1439  04DA  2CD4               	goto	u5465
  1440  04DB  0863               	movf	??___fttol,w
  1441  04DC  00E6               	movwf	___fttol@sign1
  1442  04DD  17E0               	bsf	___fttol@f1+1,7
  1443  04DE  01E1               	clrf	___fttol@f1+2
  1444  04DF  085F               	movf	___fttol@f1,w
  1445  04E0  00E7               	movwf	___fttol@lval
  1446  04E1  0860               	movf	___fttol@f1+1,w
  1447  04E2  00E8               	movwf	___fttol@lval+1
  1448  04E3  0861               	movf	___fttol@f1+2,w
  1449  04E4  00E9               	movwf	___fttol@lval+2
  1450  04E5  308E               	movlw	142
  1451  04E6  01EA               	clrf	___fttol@lval+3
  1452  04E7  02EB               	subwf	___fttol@exp1,f
  1453  04E8  1FEB               	btfss	___fttol@exp1,7
  1454  04E9  2CF7               	goto	l4793
  1455  04EA  086B               	movf	___fttol@exp1,w
  1456  04EB  3A80               	xorlw	128
  1457  04EC  3E8F               	addlw	143
  1458  04ED  1C03               	btfss	3,0
  1459  04EE  2CCC               	goto	l4771
  1460  04EF                     l4789:	
  1461  04EF  1003               	clrc
  1462  04F0  0CEA               	rrf	___fttol@lval+3,f
  1463  04F1  0CE9               	rrf	___fttol@lval+2,f
  1464  04F2  0CE8               	rrf	___fttol@lval+1,f
  1465  04F3  0CE7               	rrf	___fttol@lval,f
  1466  04F4  0FEB               	incfsz	___fttol@exp1,f
  1467  04F5  2CEF               	goto	l4789
  1468  04F6  2D05               	goto	l4801
  1469  04F7                     l4793:	
  1470  04F7  3018               	movlw	24
  1471  04F8  026B               	subwf	___fttol@exp1,w
  1472  04F9  1803               	btfsc	3,0
  1473  04FA  2CCC               	goto	l4771
  1474  04FB                     l4799:	
  1475  04FB  086B               	movf	___fttol@exp1,w
  1476  04FC  1903               	btfsc	3,2
  1477  04FD  2D05               	goto	l4801
  1478  04FE  1003               	clrc
  1479  04FF  0DE7               	rlf	___fttol@lval,f
  1480  0500  0DE8               	rlf	___fttol@lval+1,f
  1481  0501  0DE9               	rlf	___fttol@lval+2,f
  1482  0502  0DEA               	rlf	___fttol@lval+3,f
  1483  0503  03EB               	decf	___fttol@exp1,f
  1484  0504  2CFB               	goto	l4799
  1485  0505                     l4801:	
  1486  0505  0866               	movf	___fttol@sign1,w
  1487  0506  1903               	btfsc	3,2
  1488  0507  2D13               	goto	l4805
  1489  0508  09E7               	comf	___fttol@lval,f
  1490  0509  09E8               	comf	___fttol@lval+1,f
  1491  050A  09E9               	comf	___fttol@lval+2,f
  1492  050B  09EA               	comf	___fttol@lval+3,f
  1493  050C  0AE7               	incf	___fttol@lval,f
  1494  050D  1903               	skipnz
  1495  050E  0AE8               	incf	___fttol@lval+1,f
  1496  050F  1903               	skipnz
  1497  0510  0AE9               	incf	___fttol@lval+2,f
  1498  0511  1903               	skipnz
  1499  0512  0AEA               	incf	___fttol@lval+3,f
  1500  0513                     l4805:	
  1501  0513  086A               	movf	___fttol@lval+3,w
  1502  0514  00E2               	movwf	?___fttol+3
  1503  0515  0869               	movf	___fttol@lval+2,w
  1504  0516  00E1               	movwf	?___fttol+2
  1505  0517  0868               	movf	___fttol@lval+1,w
  1506  0518  00E0               	movwf	?___fttol+1
  1507  0519  0867               	movf	___fttol@lval,w
  1508  051A  00DF               	movwf	?___fttol
  1509  051B  0008               	return
  1510  051C                     __end_of___fttol:	
  1511  051C                     __ptext13:	
  1512 ;; *************** function ___lwtoft *****************
  1513 ;; Defined at:
  1514 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  c               2    3[BANK0 ] unsigned int 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  3    3[BANK0 ] float 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 300/0
  1525 ;;		On exit  : 300/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1528 ;;      Params:         0       3       0       0
  1529 ;;      Locals:         0       0       0       0
  1530 ;;      Temps:          0       0       0       0
  1531 ;;      Totals:         0       3       0       0
  1532 ;;Total ram usage:        3 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    2
  1535 ;; This function calls:
  1536 ;;		___ftpack
  1537 ;; This function is called by:
  1538 ;;		_workCtr
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           
  1543                           ;psect for function ___lwtoft
  1544  051C                     ___lwtoft:	
  1545                           
  1546                           ;incstack = 0
  1547                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1548  051C  084D               	movf	___lwtoft@c,w
  1549  051D  00F2               	movwf	___ftpack@arg
  1550  051E  084E               	movf	___lwtoft@c+1,w
  1551  051F  00F3               	movwf	___ftpack@arg+1
  1552  0520  308E               	movlw	142
  1553  0521  01F4               	clrf	___ftpack@arg+2
  1554  0522  00F5               	movwf	___ftpack@exp
  1555  0523  01F6               	clrf	___ftpack@sign
  1556  0524  252C               	fcall	___ftpack
  1557  0525  0872               	movf	?___ftpack,w
  1558  0526  00CD               	movwf	?___lwtoft
  1559  0527  0873               	movf	?___ftpack+1,w
  1560  0528  00CE               	movwf	?___lwtoft+1
  1561  0529  0874               	movf	?___ftpack+2,w
  1562  052A  00CF               	movwf	?___lwtoft+2
  1563  052B  0008               	return
  1564  052C                     __end_of___lwtoft:	
  1565  052C                     __ptext16:	
  1566 ;; *************** function ___ftpack *****************
  1567 ;; Defined at:
  1568 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  arg             3    2[COMMON] unsigned um
  1571 ;;  exp             1    5[COMMON] unsigned char 
  1572 ;;  sign            1    6[COMMON] unsigned char 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;		None
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  3    2[COMMON] float 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, status,0
  1579 ;; Tracked objects:
  1580 ;;		On entry : 300/0
  1581 ;;		On exit  : 300/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1584 ;;      Params:         5       0       0       0
  1585 ;;      Locals:         0       0       0       0
  1586 ;;      Temps:          0       3       0       0
  1587 ;;      Totals:         5       3       0       0
  1588 ;;Total ram usage:        8 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; Hardware stack levels required when called:    1
  1591 ;; This function calls:
  1592 ;;		Nothing
  1593 ;; This function is called by:
  1594 ;;		___ftdiv
  1595 ;;		___lwtoft
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           
  1600                           ;psect for function ___ftpack
  1601  052C                     ___ftpack:	
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1605  052C  0875               	movf	___ftpack@exp,w
  1606  052D  1903               	btfsc	3,2
  1607  052E  2D34               	goto	l1555
  1608  052F  0874               	movf	___ftpack@arg+2,w
  1609  0530  0473               	iorwf	___ftpack@arg+1,w
  1610  0531  0472               	iorwf	___ftpack@arg,w
  1611  0532  1D03               	skipz
  1612  0533  2D3B               	goto	l4443
  1613  0534                     l1555:	
  1614  0534  01F2               	clrf	?___ftpack
  1615  0535  01F3               	clrf	?___ftpack+1
  1616  0536  01F4               	clrf	?___ftpack+2
  1617  0537  0008               	return
  1618  0538                     l4441:	
  1619  0538  0AF5               	incf	___ftpack@exp,f
  1620  0539  27AB  118A         	fcall	PL32	;call to abstracted procedure
  1621  053B                     l4443:	
  1622  053B  30FE               	movlw	254
  1623  053C  0574               	andwf	___ftpack@arg+2,w
  1624  053D  1903               	btfsc	3,2
  1625  053E  2D48               	goto	l4447
  1626  053F  2D38               	goto	l4441
  1627  0540                     l4445:	
  1628  0540  0AF5               	incf	___ftpack@exp,f
  1629  0541  0AF2               	incf	___ftpack@arg,f
  1630  0542  1903               	skipnz
  1631  0543  0AF3               	incf	___ftpack@arg+1,f
  1632  0544  1903               	skipnz
  1633  0545  0AF4               	incf	___ftpack@arg+2,f
  1634  0546  27AB  118A         	fcall	PL32	;call to abstracted procedure
  1635  0548                     l4447:	
  1636  0548  30FF               	movlw	255
  1637  0549  0574               	andwf	___ftpack@arg+2,w
  1638  054A  1903               	btfsc	3,2
  1639  054B  2D56               	goto	l4451
  1640  054C  2D40               	goto	l4445
  1641  054D                     l4453:	
  1642  054D  3002               	movlw	2
  1643  054E  0275               	subwf	___ftpack@exp,w
  1644  054F  1C03               	btfss	3,0
  1645  0550  2D58               	goto	l1567
  1646  0551  03F5               	decf	___ftpack@exp,f
  1647  0552  1003               	clrc
  1648  0553  0DF2               	rlf	___ftpack@arg,f
  1649  0554  0DF3               	rlf	___ftpack@arg+1,f
  1650  0555  0DF4               	rlf	___ftpack@arg+2,f
  1651  0556                     l4451:	
  1652  0556  1FF3               	btfss	___ftpack@arg+1,7
  1653  0557  2D4D               	goto	l4453
  1654  0558                     l1567:	
  1655  0558  1C75               	btfss	___ftpack@exp,0
  1656  0559  13F3               	bcf	___ftpack@arg+1,7
  1657  055A  1003               	clrc
  1658  055B  0CF5               	rrf	___ftpack@exp,f
  1659  055C  0875               	movf	___ftpack@exp,w
  1660  055D  00CC               	movwf	??___ftpack+2
  1661  055E  01CB               	clrf	??___ftpack+1
  1662  055F  01CA               	clrf	??___ftpack
  1663  0560  084A               	movf	??___ftpack,w
  1664  0561  04F2               	iorwf	___ftpack@arg,f
  1665  0562  084B               	movf	??___ftpack+1,w
  1666  0563  04F3               	iorwf	___ftpack@arg+1,f
  1667  0564  084C               	movf	??___ftpack+2,w
  1668  0565  04F4               	iorwf	___ftpack@arg+2,f
  1669  0566  0876               	movf	___ftpack@sign,w
  1670  0567  1D03               	btfss	3,2
  1671  0568  17F4               	bsf	___ftpack@arg+2,7
  1672  0569  0008               	return
  1673  056A                     __end_of___ftpack:	
  1674  056A                     __ptext11:	
  1675 ;; *************** function _ADC_Sample *****************
  1676 ;; Defined at:
  1677 ;;		line 294 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  adch            1    wreg     unsigned char 
  1680 ;;  adldo           1    3[COMMON] unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  adch            1    1[BANK0 ] unsigned char 
  1683 ;;  j               1    0[BANK0 ] unsigned char 
  1684 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1685 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1686 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1687 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1688 ;;  i               1    2[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      unsigned char 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 300/0
  1695 ;;		On exit  : 300/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1698 ;;      Params:         1       0       0       0
  1699 ;;      Locals:         0      13       0       0
  1700 ;;      Temps:          4       0       0       0
  1701 ;;      Totals:         5      13       0       0
  1702 ;;Total ram usage:       18 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    2
  1705 ;; This function calls:
  1706 ;;		_ledShow
  1707 ;; This function is called by:
  1708 ;;		_fanCtr
  1709 ;;		_workCtr
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           
  1714                           ;psect for function _ADC_Sample
  1715  056A                     _ADC_Sample:	
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _ADC_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1719                           ;ADC_Sample@adch stored from wreg
  1720  056A  00CB               	movwf	ADC_Sample@adch
  1721                           
  1722                           ;main.c: 296: volatile unsigned long adsum = 0;
  1723                           
  1724                           ;main.c: 297: volatile unsigned int admin = 0, admax = 0;
  1725  056B  279B  118A         	fcall	PL18	;call to abstracted procedure
  1726                           
  1727                           ;main.c: 298: volatile unsigned int ad_temp = 0;
  1728  056D  01D5               	clrf	ADC_Sample@ad_temp	;volatile
  1729  056E  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1730                           
  1731                           ;main.c: 300: if ((!LDO_EN) && (adldo & 0x04) )
  1732  056F  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0570  1D16               	btfss	22,2	;volatile
  1734  0571  1D73               	btfss	ADC_Sample@adldo,2
  1735  0572  2D7B               	goto	l4323
  1736                           
  1737                           ;main.c: 301: {
  1738                           ;main.c: 303: ADCON1 = adldo;
  1739  0573  0873               	movf	ADC_Sample@adldo,w
  1740  0574  0096               	movwf	22	;volatile
  1741                           
  1742                           ;main.c: 304: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1743  0575  3042               	movlw	66
  1744  0576  00F4               	movwf	??_ADC_Sample
  1745  0577                     u6027:	
  1746  0577  0BF4               	decfsz	??_ADC_Sample,f
  1747  0578  2D77               	goto	u6027
  1748  0579  0000               	nop
  1749                           
  1750                           ;main.c: 305: }
  1751  057A  2D7D               	goto	l4325
  1752  057B                     l4323:	
  1753                           
  1754                           ;main.c: 306: else
  1755                           ;main.c: 307: ADCON1 = adldo;
  1756  057B  0873               	movf	ADC_Sample@adldo,w
  1757  057C  0096               	movwf	22	;volatile
  1758  057D                     l4325:	
  1759                           
  1760                           ;main.c: 309: if(adch & 0x10)
  1761  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1762  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1763  057F  1E4B               	btfss	ADC_Sample@adch,4
  1764  0580  2D86               	goto	l4333
  1765                           
  1766                           ;main.c: 310: {
  1767                           ;main.c: 311: CHS4 = 1;
  1768  0581  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0582  1716               	bsf	22,6	;volatile
  1770                           
  1771                           ;main.c: 312: adch &= 0x0f;
  1772  0583  300F               	movlw	15
  1773  0584  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0585  05CB               	andwf	ADC_Sample@adch,f
  1775  0586                     l4333:	
  1776                           
  1777                           ;main.c: 315: for (i = 0; i < 10; i++)
  1778  0586  01CC               	clrf	ADC_Sample@i
  1779  0587                     l4339:	
  1780                           
  1781                           ;main.c: 316: {
  1782                           ;main.c: 317: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0)
  1783  0587  086C               	movf	_firstTime,w
  1784  0588  1D03               	btfss	3,2
  1785  0589  2D8F               	goto	l4345
  1786  058A  087A               	movf	_workStep,w
  1787  058B  1903               	btfsc	3,2
  1788  058C  0879               	movf	_wuhuaFlag,w
  1789  058D  1903               	btfsc	3,2
  1790  058E  2D91               	goto	l4347
  1791  058F                     l4345:	
  1792                           
  1793                           ;main.c: 318: {
  1794                           ;main.c: 319: ledShow();
  1795  058F  2644  118A         	fcall	_ledShow
  1796  0591                     l4347:	
  1797                           
  1798                           ;main.c: 320: }
  1799                           ;main.c: 321: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1800  0591  084B               	movf	ADC_Sample@adch,w
  1801  0592  00F4               	movwf	??_ADC_Sample
  1802  0593  3001               	movlw	1
  1803  0594  1003               	clrc
  1804  0595                     L3:	
  1805  0595  0DF4               	rlf	??_ADC_Sample,f
  1806  0596  3EFF               	addlw	-1
  1807  0597  1003               	clrc
  1808  0598  1D03               	skipz
  1809  0599  2D95               	goto	L3
  1810  059A  0D74               	rlf	??_ADC_Sample,w
  1811  059B  3841               	iorlw	65
  1812  059C  1683               	bsf	3,5	;RP0=1, select bank1
  1813  059D  0095               	movwf	21	;volatile
  1814  059E  0000               	nop	;# 
  1815  059F  0000               	nop	;# 
  1816  05A0  0000               	nop	;# 
  1817  05A1  0000               	nop	;# 
  1818                           
  1819                           ;main.c: 326: GODONE = 1;
  1820  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  1821  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  1822  05A4  1495               	bsf	21,1	;volatile
  1823                           
  1824                           ;main.c: 328: unsigned char j = 0;
  1825  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1826  05A6  01CA               	clrf	ADC_Sample@j
  1827  05A7                     l989:	
  1828                           ;main.c: 329: while (GODONE)
  1829                           
  1830  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1831  05A8  1C95               	btfss	21,1	;volatile
  1832  05A9  2DB1               	goto	l4357
  1833                           
  1834                           ;main.c: 330: {
  1835                           ;main.c: 331: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1836  05AA  2DAB               	nop2	;2 cycle nop
  1837  05AB  2DAC               	nop2	;2 cycle nop
  1838                           
  1839                           ;main.c: 333: if (0 == (--j))
  1840  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1841  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1842  05AE  0BCA               	decfsz	ADC_Sample@j,f
  1843  05AF  2DA7               	goto	l989
  1844                           
  1845                           ;main.c: 334: return 0;
  1846  05B0  3400               	retlw	0
  1847  05B1                     l4357:	
  1848                           
  1849                           ;main.c: 335: }
  1850                           ;main.c: 337: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1851  05B1  0819               	movf	25,w	;volatile
  1852  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1853  05B3  00D5               	movwf	ADC_Sample@ad_temp	;volatile
  1854  05B4  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  1855  05B5  0ED5               	swapf	ADC_Sample@ad_temp,f	;volatile
  1856  05B6  0ED6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1857  05B7  30F0               	movlw	240
  1858  05B8  05D6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1859  05B9  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1860  05BA  390F               	andlw	15
  1861  05BB  04D6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1862  05BC  30F0               	movlw	240
  1863  05BD  05D5               	andwf	ADC_Sample@ad_temp,f	;volatile
  1864  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  1865  05BF  0E18               	swapf	24,w	;volatile
  1866  05C0  390F               	andlw	15
  1867  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1868  05C2  07D5               	addwf	ADC_Sample@ad_temp,f	;volatile
  1869  05C3  1803               	skipnc
  1870  05C4  0AD6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1871                           
  1872                           ;main.c: 339: if (0 == admax)
  1873  05C5  0853               	movf	ADC_Sample@admax,w	;volatile
  1874  05C6  0454               	iorwf	ADC_Sample@admax+1,w	;volatile
  1875  05C7  1D03               	btfss	3,2
  1876  05C8  2DCC               	goto	l4365
  1877                           
  1878                           ;main.c: 340: {
  1879                           ;main.c: 341: admax = ad_temp;
  1880  05C9  27B0  118A         	fcall	PL36	;call to abstracted procedure
  1881  05CB  2DDF               	goto	l4371
  1882  05CC                     l4365:	
  1883                           ;main.c: 343: }
  1884                           
  1885                           ;main.c: 342: admin = ad_temp;
  1886                           
  1887                           
  1888                           ;main.c: 344: else if (ad_temp > admax)
  1889  05CC  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1890  05CD  0254               	subwf	ADC_Sample@admax+1,w	;volatile
  1891  05CE  1D03               	skipz
  1892  05CF  2DD2               	goto	u4765
  1893  05D0  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1894  05D1  0253               	subwf	ADC_Sample@admax,w	;volatile
  1895  05D2                     u4765:	
  1896  05D2  1803               	skipnc
  1897  05D3  2DD7               	goto	l4369
  1898                           
  1899                           ;main.c: 345: admax = ad_temp;
  1900  05D4  27B0  118A         	fcall	PL36	;call to abstracted procedure
  1901  05D6  2DE3               	goto	l995
  1902  05D7                     l4369:	
  1903                           
  1904                           ;main.c: 346: else if (ad_temp < admin)
  1905  05D7  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1906  05D8  0256               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1907  05D9  1D03               	skipz
  1908  05DA  2DDD               	goto	u4775
  1909  05DB  0851               	movf	ADC_Sample@admin,w	;volatile
  1910  05DC  0255               	subwf	ADC_Sample@ad_temp,w	;volatile
  1911  05DD                     u4775:	
  1912  05DD  1803               	skipnc
  1913  05DE  2DE3               	goto	l995
  1914  05DF                     l4371:	
  1915                           
  1916                           ;main.c: 347: admin = ad_temp;
  1917  05DF  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1918  05E0  00D2               	movwf	ADC_Sample@admin+1	;volatile
  1919  05E1  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1920  05E2  00D1               	movwf	ADC_Sample@admin	;volatile
  1921  05E3                     l995:	
  1922                           
  1923                           ;main.c: 349: adsum += ad_temp;
  1924  05E3  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  1925  05E4  00F4               	movwf	??_ADC_Sample
  1926  05E5  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1927  05E6  00F5               	movwf	??_ADC_Sample+1
  1928  05E7  01F6               	clrf	??_ADC_Sample+2
  1929  05E8  01F7               	clrf	??_ADC_Sample+3
  1930  05E9  0874               	movf	??_ADC_Sample,w
  1931  05EA  07CD               	addwf	ADC_Sample@adsum,f	;volatile
  1932  05EB  0875               	movf	??_ADC_Sample+1,w
  1933  05EC  1103               	clrz
  1934  05ED  1803               	skipnc
  1935  05EE  3E01               	addlw	1
  1936  05EF  1D03               	btfss	3,2
  1937  05F0  07CE               	addwf	ADC_Sample@adsum+1,f	;volatile
  1938  05F1  0876               	movf	??_ADC_Sample+2,w
  1939  05F2  1103               	clrz
  1940  05F3  1803               	skipnc
  1941  05F4  3E01               	addlw	1
  1942  05F5  1D03               	btfss	3,2
  1943  05F6  07CF               	addwf	ADC_Sample@adsum+2,f	;volatile
  1944  05F7  0877               	movf	??_ADC_Sample+3,w
  1945  05F8  1103               	clrz
  1946  05F9  1803               	skipnc
  1947  05FA  3E01               	addlw	1
  1948  05FB  1D03               	btfss	3,2
  1949  05FC  07D0               	addwf	ADC_Sample@adsum+3,f	;volatile
  1950  05FD  300A               	movlw	10
  1951  05FE  0ACC               	incf	ADC_Sample@i,f
  1952  05FF  024C               	subwf	ADC_Sample@i,w
  1953  0600  1C03               	skipc
  1954  0601  2D87               	goto	l4339
  1955                           
  1956                           ;main.c: 350: }
  1957                           ;main.c: 351: adsum -= admax;
  1958  0602  0853               	movf	ADC_Sample@admax,w	;volatile
  1959  0603  00F4               	movwf	??_ADC_Sample
  1960  0604  0854               	movf	ADC_Sample@admax+1,w	;volatile
  1961  0605  2783  118A         	fcall	PL6	;call to abstracted procedure
  1962  0607  1C03               	skipc
  1963  0608  0F77               	incfsz	??_ADC_Sample+3,w
  1964  0609  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1965                           
  1966                           ;main.c: 352: if (adsum >= admin)
  1967  060A  0851               	movf	ADC_Sample@admin,w	;volatile
  1968  060B  00F4               	movwf	??_ADC_Sample
  1969  060C  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1970  060D  00F5               	movwf	??_ADC_Sample+1
  1971  060E  01F6               	clrf	??_ADC_Sample+2
  1972  060F  01F7               	clrf	??_ADC_Sample+3
  1973  0610  0877               	movf	??_ADC_Sample+3,w
  1974  0611  0250               	subwf	ADC_Sample@adsum+3,w	;volatile
  1975  0612  1D03               	skipz
  1976  0613  2E1E               	goto	u4815
  1977  0614  0876               	movf	??_ADC_Sample+2,w
  1978  0615  024F               	subwf	ADC_Sample@adsum+2,w	;volatile
  1979  0616  1D03               	skipz
  1980  0617  2E1E               	goto	u4815
  1981  0618  0875               	movf	??_ADC_Sample+1,w
  1982  0619  024E               	subwf	ADC_Sample@adsum+1,w	;volatile
  1983  061A  1D03               	skipz
  1984  061B  2E1E               	goto	u4815
  1985  061C  0874               	movf	??_ADC_Sample,w
  1986  061D  024D               	subwf	ADC_Sample@adsum,w	;volatile
  1987  061E                     u4815:	
  1988  061E  1C03               	skipc
  1989  061F  2E29               	goto	l999
  1990                           
  1991                           ;main.c: 353: adsum -= admin;
  1992  0620  0851               	movf	ADC_Sample@admin,w	;volatile
  1993  0621  00F4               	movwf	??_ADC_Sample
  1994  0622  0852               	movf	ADC_Sample@admin+1,w	;volatile
  1995  0623  2783  118A         	fcall	PL6	;call to abstracted procedure
  1996  0625  1C03               	skipc
  1997  0626  0F77               	incfsz	??_ADC_Sample+3,w
  1998  0627  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  1999  0628  2E2D               	goto	l4381
  2000  0629                     l999:	
  2001                           
  2002                           ;main.c: 354: else
  2003                           ;main.c: 355: adsum = 0;
  2004  0629  01CD               	clrf	ADC_Sample@adsum	;volatile
  2005  062A  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2006  062B  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2007  062C  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2008  062D                     l4381:	
  2009                           
  2010                           ;main.c: 357: adresult = adsum >> 3;
  2011  062D  084D               	movf	ADC_Sample@adsum,w	;volatile
  2012  062E  00F4               	movwf	??_ADC_Sample
  2013  062F  084E               	movf	ADC_Sample@adsum+1,w	;volatile
  2014  0630  00F5               	movwf	??_ADC_Sample+1
  2015  0631  084F               	movf	ADC_Sample@adsum+2,w	;volatile
  2016  0632  00F6               	movwf	??_ADC_Sample+2
  2017  0633  0850               	movf	ADC_Sample@adsum+3,w	;volatile
  2018  0634  00F7               	movwf	??_ADC_Sample+3
  2019  0635  3003               	movlw	3
  2020  0636                     u4835:	
  2021  0636  1003               	clrc
  2022  0637  0CF7               	rrf	??_ADC_Sample+3,f
  2023  0638  0CF6               	rrf	??_ADC_Sample+2,f
  2024  0639  0CF5               	rrf	??_ADC_Sample+1,f
  2025  063A  0CF4               	rrf	??_ADC_Sample,f
  2026  063B  3EFF               	addlw	-1
  2027  063C  1D03               	skipz
  2028  063D  2E36               	goto	u4835
  2029  063E  0875               	movf	??_ADC_Sample+1,w
  2030  063F  00C9               	movwf	_adresult+1	;volatile
  2031  0640  0874               	movf	??_ADC_Sample,w
  2032  0641  00C8               	movwf	_adresult	;volatile
  2033                           
  2034                           ;main.c: 359: adsum = 0;
  2035                           
  2036                           ;main.c: 360: admin = 0;
  2037                           
  2038                           ;main.c: 361: admax = 0;
  2039  0642  279B               	fcall	PL18	;call to abstracted procedure
  2040                           
  2041                           ;main.c: 362: return 0xA5;
  2042  0643  34A5               	retlw	165
  2043  0644                     __end_of_ADC_Sample:	
  2044  0644                     __ptext12:	
  2045 ;; *************** function _ledShow *****************
  2046 ;; Defined at:
  2047 ;;		line 366 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;		None
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 300/0
  2058 ;;		On exit  : 300/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2061 ;;      Params:         0       0       0       0
  2062 ;;      Locals:         0       0       0       0
  2063 ;;      Temps:          1       0       0       0
  2064 ;;      Totals:         1       0       0       0
  2065 ;;Total ram usage:        1 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_ADC_Sample
  2072 ;;		_main
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           
  2077                           ;psect for function _ledShow
  2078  0644                     _ledShow:	
  2079                           
  2080                           ;main.c: 369: if(++ledCnt > 19)
  2081                           
  2082                           ;incstack = 0
  2083                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  2084  0644  3014               	movlw	20
  2085  0645  0ABC               	incf	_ledCnt,f
  2086  0646  023C               	subwf	_ledCnt,w
  2087  0647  1803               	btfsc	3,0
  2088                           
  2089                           ;main.c: 370: {
  2090                           ;main.c: 371: ledCnt = 0;
  2091  0648  01BC               	clrf	_ledCnt
  2092                           
  2093                           ;main.c: 373: }
  2094                           ;main.c: 374: PORTA &= 0xE4;
  2095  0649  30E4               	movlw	228
  2096  064A  1683               	bsf	3,5	;RP0=1, select bank1
  2097                           
  2098                           ;main.c: 375: PORTB &= 0xEF;
  2099                           
  2100                           ;main.c: 376: TRISA |= 0x1B;
  2101                           
  2102                           ;main.c: 377: TRISB |= 0x10;
  2103  064B  2792  118A         	fcall	PL16	;call to abstracted procedure
  2104                           
  2105                           ;main.c: 378: switch(ledCnt)
  2106  064D  2EDF               	goto	l4297
  2107  064E                     l1007:	
  2108                           ;main.c: 382: case 1:
  2109                           
  2110                           
  2111                           ;main.c: 383: if(showNumShi & 0x01)
  2112  064E  1C7B               	btfss	_showNumShi,0
  2113  064F  2EEB               	goto	l4299
  2114                           
  2115                           ;main.c: 384: {
  2116                           ;main.c: 385: TRISA &= 0xFE;
  2117  0650  1683               	bsf	3,5	;RP0=1, select bank1
  2118  0651  1005               	bcf	5,0	;volatile
  2119                           
  2120                           ;main.c: 386: TRISA &= 0xEF;
  2121  0652  1205               	bcf	5,4	;volatile
  2122  0653  2E67               	goto	L6
  2123  0654                     l1009:	
  2124                           ;main.c: 390: case 2:
  2125                           
  2126                           ;main.c: 387: RA0 = 1;
  2127                           
  2128                           
  2129                           ;main.c: 391: if(showNumShi & 0x02)
  2130  0654  1CFB               	btfss	_showNumShi,1
  2131  0655  2EEB               	goto	l4299
  2132                           
  2133                           ;main.c: 392: {
  2134                           ;main.c: 393: TRISA &= 0xFE;
  2135  0656  1683               	bsf	3,5	;RP0=1, select bank1
  2136  0657  1005               	bcf	5,0	;volatile
  2137                           
  2138                           ;main.c: 394: TRISA &= 0xF7;
  2139  0658  1185               	bcf	5,3	;volatile
  2140  0659  2E67               	goto	L6
  2141  065A                     l1011:	
  2142                           ;main.c: 398: case 3:
  2143                           
  2144                           ;main.c: 395: RA0 = 1;
  2145                           
  2146                           
  2147                           ;main.c: 399: if(showNumShi & 0x04)
  2148  065A  1D7B               	btfss	_showNumShi,2
  2149  065B  2EEB               	goto	l4299
  2150                           
  2151                           ;main.c: 400: {
  2152                           ;main.c: 401: TRISA &= 0xFE;
  2153  065C  1683               	bsf	3,5	;RP0=1, select bank1
  2154  065D  1005               	bcf	5,0	;volatile
  2155                           
  2156                           ;main.c: 402: TRISA &= 0xFD;
  2157  065E  1085               	bcf	5,1	;volatile
  2158  065F  2E67               	goto	L6
  2159  0660                     l1013:	
  2160                           ;main.c: 406: case 4:
  2161                           
  2162                           ;main.c: 403: RA0 = 1;
  2163                           
  2164                           
  2165                           ;main.c: 407: if(showNumShi & 0x08)
  2166  0660  1DFB               	btfss	_showNumShi,3
  2167  0661  2EEB               	goto	l4299
  2168                           
  2169                           ;main.c: 408: {
  2170                           ;main.c: 409: TRISA &= 0xFE;
  2171  0662  1683               	bsf	3,5	;RP0=1, select bank1
  2172  0663  1005               	bcf	5,0	;volatile
  2173                           
  2174                           ;main.c: 410: TRISB &= 0xEF;
  2175  0664  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0665  1205               	bcf	5,4	;volatile
  2177                           
  2178                           ;main.c: 411: RA0 = 1;
  2179  0666  1683               	bsf	3,5	;RP0=1, select bank1
  2180  0667                     L6:	
  2181  0667  1406               	bsf	6,0	;volatile
  2182  0668  2EEB               	goto	l4299
  2183  0669                     l1015:	
  2184                           ;main.c: 414: case 5:
  2185                           
  2186                           
  2187                           ;main.c: 415: if(showNumShi & 0x10)
  2188  0669  1E7B               	btfss	_showNumShi,4
  2189  066A  2EEB               	goto	l4299
  2190                           
  2191                           ;main.c: 416: {
  2192                           ;main.c: 417: TRISA &= 0xEF;
  2193  066B  1683               	bsf	3,5	;RP0=1, select bank1
  2194  066C  1205               	bcf	5,4	;volatile
  2195                           
  2196                           ;main.c: 418: TRISA &= 0xFE;
  2197  066D  1005               	bcf	5,0	;volatile
  2198  066E  2EDD               	goto	L18
  2199  066F                     l1017:	
  2200                           ;main.c: 422: case 6:
  2201                           
  2202                           ;main.c: 419: RA4 = 1;
  2203                           
  2204                           
  2205                           ;main.c: 423: if(showNumShi & 0x20)
  2206  066F  1EFB               	btfss	_showNumShi,5
  2207  0670  2EEB               	goto	l4299
  2208                           
  2209                           ;main.c: 424: {
  2210                           ;main.c: 425: TRISA &= 0xEF;
  2211  0671  1683               	bsf	3,5	;RP0=1, select bank1
  2212  0672  1205               	bcf	5,4	;volatile
  2213                           
  2214                           ;main.c: 426: TRISA &= 0xF7;
  2215  0673  1185               	bcf	5,3	;volatile
  2216  0674  2EDD               	goto	L18
  2217  0675                     l1019:	
  2218                           ;main.c: 430: case 7:
  2219                           
  2220                           ;main.c: 427: RA4 = 1;
  2221                           
  2222                           
  2223                           ;main.c: 431: if(showNumShi & 0x40)
  2224  0675  1F7B               	btfss	_showNumShi,6
  2225  0676  2EEB               	goto	l4299
  2226                           
  2227                           ;main.c: 432: {
  2228                           ;main.c: 433: TRISA &= 0xEF;
  2229  0677  1683               	bsf	3,5	;RP0=1, select bank1
  2230  0678  1205               	bcf	5,4	;volatile
  2231                           
  2232                           ;main.c: 434: TRISA &= 0xFD;
  2233  0679  1085               	bcf	5,1	;volatile
  2234  067A  2EDD               	goto	L18
  2235  067B                     l1021:	
  2236                           ;main.c: 438: case 8:
  2237                           
  2238                           ;main.c: 435: RA4 = 1;
  2239                           
  2240                           
  2241                           ;main.c: 439: if(showNumGe & 0x01)
  2242  067B  1C6D               	btfss	_showNumGe,0
  2243  067C  2EEB               	goto	l4299
  2244                           
  2245                           ;main.c: 440: {
  2246                           ;main.c: 441: TRISA &= 0xEF;
  2247  067D  1683               	bsf	3,5	;RP0=1, select bank1
  2248  067E  1205               	bcf	5,4	;volatile
  2249                           
  2250                           ;main.c: 442: TRISB &= 0xEF;
  2251  067F  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0680  1205               	bcf	5,4	;volatile
  2253                           
  2254                           ;main.c: 443: RA4 = 1;
  2255  0681  1683               	bsf	3,5	;RP0=1, select bank1
  2256  0682  2EDD               	goto	L18
  2257  0683                     l1023:	
  2258                           ;main.c: 446: case 9:
  2259                           
  2260                           
  2261                           ;main.c: 447: if(showNumGe & 0x02)
  2262  0683  1CED               	btfss	_showNumGe,1
  2263  0684  2EEB               	goto	l4299
  2264                           
  2265                           ;main.c: 448: {
  2266                           ;main.c: 449: TRISA &= 0xF7;
  2267  0685  1683               	bsf	3,5	;RP0=1, select bank1
  2268  0686  1185               	bcf	5,3	;volatile
  2269                           
  2270                           ;main.c: 450: TRISA &= 0xFE;
  2271  0687  1005               	bcf	5,0	;volatile
  2272  0688  2E9C               	goto	L13
  2273  0689                     l1025:	
  2274                           ;main.c: 454: case 10:
  2275                           
  2276                           ;main.c: 451: RA3 = 1;
  2277                           
  2278                           
  2279                           ;main.c: 455: if(showNumGe & 0x04)
  2280  0689  1D6D               	btfss	_showNumGe,2
  2281  068A  2EEB               	goto	l4299
  2282                           
  2283                           ;main.c: 456: {
  2284                           ;main.c: 457: TRISA &= 0xF7;
  2285  068B  1683               	bsf	3,5	;RP0=1, select bank1
  2286  068C  1185               	bcf	5,3	;volatile
  2287                           
  2288                           ;main.c: 458: TRISA &= 0xEF;
  2289  068D  1205               	bcf	5,4	;volatile
  2290  068E  2E9C               	goto	L13
  2291  068F                     l1027:	
  2292                           ;main.c: 462: case 11:
  2293                           
  2294                           ;main.c: 459: RA3 = 1;
  2295                           
  2296                           
  2297                           ;main.c: 463: if(showNumGe & 0x08)
  2298  068F  1DED               	btfss	_showNumGe,3
  2299  0690  2EEB               	goto	l4299
  2300                           
  2301                           ;main.c: 464: {
  2302                           ;main.c: 465: TRISA &= 0xF7;
  2303  0691  1683               	bsf	3,5	;RP0=1, select bank1
  2304  0692  1185               	bcf	5,3	;volatile
  2305                           
  2306                           ;main.c: 466: TRISA &= 0xFD;
  2307  0693  1085               	bcf	5,1	;volatile
  2308  0694  2E9C               	goto	L13
  2309  0695                     l1029:	
  2310                           ;main.c: 470: case 12:
  2311                           
  2312                           ;main.c: 467: RA3 = 1;
  2313                           
  2314                           
  2315                           ;main.c: 471: if(showNumGe & 0x10)
  2316  0695  1E6D               	btfss	_showNumGe,4
  2317  0696  2EEB               	goto	l4299
  2318                           
  2319                           ;main.c: 472: {
  2320                           ;main.c: 473: TRISA &= 0xF7;
  2321  0697  1683               	bsf	3,5	;RP0=1, select bank1
  2322  0698  1185               	bcf	5,3	;volatile
  2323                           
  2324                           ;main.c: 474: TRISB &= 0xEF;
  2325  0699  1283               	bcf	3,5	;RP0=0, select bank0
  2326  069A  1205               	bcf	5,4	;volatile
  2327                           
  2328                           ;main.c: 475: RA3 = 1;
  2329  069B  1683               	bsf	3,5	;RP0=1, select bank1
  2330  069C                     L13:	
  2331  069C  1586               	bsf	6,3	;volatile
  2332  069D  2EEB               	goto	l4299
  2333  069E                     l1031:	
  2334                           ;main.c: 478: case 13:
  2335                           
  2336                           
  2337                           ;main.c: 479: if(showNumGe & 0x20)
  2338  069E  1EED               	btfss	_showNumGe,5
  2339  069F  2EEB               	goto	l4299
  2340                           
  2341                           ;main.c: 480: {
  2342                           ;main.c: 481: TRISA &= 0xFD;
  2343  06A0  1683               	bsf	3,5	;RP0=1, select bank1
  2344  06A1  1085               	bcf	5,1	;volatile
  2345                           
  2346                           ;main.c: 482: TRISA &= 0xFE;
  2347  06A2  1005               	bcf	5,0	;volatile
  2348  06A3  2EC0               	goto	L16
  2349  06A4                     l1033:	
  2350                           ;main.c: 486: case 14:
  2351                           
  2352                           ;main.c: 483: RA1 = 1;
  2353                           
  2354                           
  2355                           ;main.c: 487: if(showNumGe & 0x40)
  2356  06A4  1F6D               	btfss	_showNumGe,6
  2357  06A5  2EEB               	goto	l4299
  2358                           
  2359                           ;main.c: 488: {
  2360                           ;main.c: 489: TRISA &= 0xFD;
  2361  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  2362  06A7  1085               	bcf	5,1	;volatile
  2363                           
  2364                           ;main.c: 490: TRISA &= 0xEF;
  2365  06A8  1205               	bcf	5,4	;volatile
  2366  06A9  2EC0               	goto	L16
  2367  06AA                     l4273:	
  2368                           ;main.c: 491: RA1 = 1;
  2369                           
  2370                           
  2371                           ;main.c: 495: if(firstTime || showNumGe || showNumShi)
  2372  06AA  086C               	movf	_firstTime,w
  2373  06AB  1D03               	btfss	3,2
  2374  06AC  2EB2               	goto	l1038
  2375  06AD  086D               	movf	_showNumGe,w
  2376  06AE  1903               	btfsc	3,2
  2377  06AF  087B               	movf	_showNumShi,w
  2378  06B0  1903               	btfsc	3,2
  2379  06B1  2EEB               	goto	l4299
  2380  06B2                     l1038:	
  2381                           
  2382                           ;main.c: 496: {
  2383                           ;main.c: 497: TRISA &= 0xFD;
  2384  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  2385  06B3  1085               	bcf	5,1	;volatile
  2386                           
  2387                           ;main.c: 498: TRISA &= 0xF7;
  2388  06B4  1185               	bcf	5,3	;volatile
  2389  06B5  2EC0               	goto	L16
  2390  06B6                     l4279:	
  2391                           ;main.c: 499: RA1 = 1;
  2392                           
  2393                           
  2394                           ;main.c: 503: if(firstTime > 0 || wuhuaFlag > 0)
  2395  06B6  086C               	movf	_firstTime,w
  2396  06B7  1903               	btfsc	3,2
  2397  06B8  0879               	movf	_wuhuaFlag,w
  2398  06B9  1903               	btfsc	3,2
  2399  06BA  2EEB               	goto	l4299
  2400                           
  2401                           ;main.c: 504: {
  2402                           ;main.c: 505: TRISA &= 0xFD;
  2403  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  2404  06BC  1085               	bcf	5,1	;volatile
  2405                           
  2406                           ;main.c: 506: TRISB &= 0xEF;
  2407  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  2408  06BE  1205               	bcf	5,4	;volatile
  2409                           
  2410                           ;main.c: 507: RA1 = 1;
  2411  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  2412  06C0                     L16:	
  2413  06C0  1486               	bsf	6,1	;volatile
  2414  06C1  2EEB               	goto	l4299
  2415  06C2                     l4283:	
  2416                           
  2417                           ;main.c: 511: if(firstTime > 0 ||workStep > 0)
  2418  06C2  086C               	movf	_firstTime,w
  2419  06C3  1903               	btfsc	3,2
  2420  06C4  087A               	movf	_workStep,w
  2421  06C5  1903               	btfsc	3,2
  2422  06C6  2EEB               	goto	l4299
  2423                           
  2424                           ;main.c: 512: {
  2425                           ;main.c: 513: TRISB &= 0xEF;
  2426  06C7  1205               	bcf	5,4	;volatile
  2427                           
  2428                           ;main.c: 514: TRISA &= 0xFE;
  2429  06C8  1683               	bsf	3,5	;RP0=1, select bank1
  2430  06C9  1005               	bcf	5,0	;volatile
  2431  06CA  2EDC               	goto	L19
  2432  06CB                     l4287:	
  2433                           ;main.c: 515: RB4 = 1;
  2434                           
  2435                           
  2436                           ;main.c: 519: if(firstTime > 0 ||fanKeyFlag > 0)
  2437  06CB  086C               	movf	_firstTime,w
  2438  06CC  1903               	btfsc	3,2
  2439  06CD  083B               	movf	_fanKeyFlag,w
  2440  06CE  1903               	btfsc	3,2
  2441  06CF  2EEB               	goto	l4299
  2442                           
  2443                           ;main.c: 520: {
  2444                           ;main.c: 521: TRISB &= 0xEF;
  2445  06D0  1205               	bcf	5,4	;volatile
  2446                           
  2447                           ;main.c: 522: TRISA &= 0xEF;
  2448  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  2449  06D2  1205               	bcf	5,4	;volatile
  2450  06D3  2EDC               	goto	L19
  2451  06D4                     l4291:	
  2452                           ;main.c: 523: RB4 = 1;
  2453                           
  2454                           
  2455                           ;main.c: 527: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  2456  06D4  086C               	movf	_firstTime,w
  2457  06D5  1903               	btfsc	3,2
  2458  06D6  083A               	movf	_wuhuaKeyFlag,w
  2459  06D7  1903               	btfsc	3,2
  2460  06D8  2EEB               	goto	l4299
  2461                           
  2462                           ;main.c: 528: {
  2463                           ;main.c: 529: TRISB &= 0xEF;
  2464  06D9  1205               	bcf	5,4	;volatile
  2465                           
  2466                           ;main.c: 530: TRISA &= 0xFD;
  2467  06DA  1683               	bsf	3,5	;RP0=1, select bank1
  2468  06DB  1085               	bcf	5,1	;volatile
  2469  06DC                     L19:	
  2470                           
  2471                           ;main.c: 531: RB4 = 1;
  2472  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  2473  06DD                     L18:	
  2474  06DD  1606               	bsf	6,4	;volatile
  2475  06DE  2EEB               	goto	l4299
  2476  06DF                     l4297:	
  2477  06DF  083C               	movf	_ledCnt,w
  2478                           
  2479                           ; Switch size 1, requested type "space"
  2480                           ; Number of cases is 20, Range of values is 0 to 19
  2481                           ; switch strategies available:
  2482                           ; Name         Instructions Cycles
  2483                           ; direct_byte           47     7 (fixed)
  2484                           ; simple_byte           61    31 (average)
  2485                           ; jumptable            260     6 (fixed)
  2486                           ;	Chosen strategy is direct_byte
  2487  06E0  0084               	movwf	4
  2488  06E1  3014               	movlw	20
  2489  06E2  0204               	subwf	4,w
  2490  06E3  1803               	skipnc
  2491  06E4  2EEB               	goto	l4299
  2492  06E5  3007               	movlw	high S5065
  2493  06E6  008A               	movwf	10
  2494  06E7  1003               	clrc
  2495  06E8  0D04               	rlf	4,w
  2496  06E9  3EB9               	addlw	low S5065
  2497  06EA  0082               	movwf	2
  2498  06EB                     l4299:	
  2499                           
  2500                           ;main.c: 537: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2501  06EB  3085               	movlw	133
  2502  06EC  00F2               	movwf	??_ledShow
  2503  06ED                     u6037:	
  2504  06ED  0BF2               	decfsz	??_ledShow,f
  2505  06EE  2EED               	goto	u6037
  2506                           
  2507                           ;main.c: 538: PORTA &= 0xE4;
  2508  06EF  30E4               	movlw	228
  2509  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  2510  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  2511                           
  2512                           ;main.c: 539: PORTB &= 0xEF;
  2513                           
  2514                           ;main.c: 540: TRISA |= 0x1B;
  2515                           
  2516                           ;main.c: 541: TRISB |= 0x10;
  2517  06F2  2792               	fcall	PL16	;call to abstracted procedure
  2518  06F3  0008               	return
  2519  06F4                     __end_of_ledShow:	
  2520  06F4                     __ptext5:	
  2521 ;; *************** function _keyLedCtr *****************
  2522 ;; Defined at:
  2523 ;;		line 652 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;		None
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, pclath, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 300/0
  2534 ;;		On exit  : 300/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2537 ;;      Params:         0       0       0       0
  2538 ;;      Locals:         0       0       0       0
  2539 ;;      Temps:          0       0       0       0
  2540 ;;      Totals:         0       0       0       0
  2541 ;;Total ram usage:        0 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    2
  2544 ;; This function calls:
  2545 ;;		___lwmod
  2546 ;; This function is called by:
  2547 ;;		_workCtr
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function _keyLedCtr
  2553  06F4                     _keyLedCtr:	
  2554                           
  2555                           ;main.c: 654: if(shanshuoTime > 0)
  2556                           
  2557                           ;incstack = 0
  2558                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2559  06F4  082C               	movf	_shanshuoTime,w
  2560  06F5  042D               	iorwf	_shanshuoTime+1,w
  2561  06F6  1903               	btfsc	3,2
  2562  06F7  2F10               	goto	l4575
  2563                           
  2564                           ;main.c: 655: {
  2565                           ;main.c: 656: shanshuoTime--;
  2566  06F8  3001               	movlw	1
  2567  06F9  02AC               	subwf	_shanshuoTime,f
  2568  06FA  3000               	movlw	0
  2569  06FB  1C03               	skipc
  2570  06FC  03AD               	decf	_shanshuoTime+1,f
  2571  06FD  02AD               	subwf	_shanshuoTime+1,f
  2572                           
  2573                           ;main.c: 657: if((shanshuoTime % 150) < 75)
  2574  06FE  3096               	movlw	150
  2575  06FF  00F2               	movwf	___lwmod@divisor
  2576  0700  01F3               	clrf	___lwmod@divisor+1
  2577  0701  082D               	movf	_shanshuoTime+1,w
  2578  0702  00F5               	movwf	___lwmod@dividend+1
  2579  0703  082C               	movf	_shanshuoTime,w
  2580  0704  00F4               	movwf	___lwmod@dividend
  2581  0705  2738  118A         	fcall	___lwmod
  2582  0707  3000               	movlw	0
  2583  0708  0273               	subwf	?___lwmod+1,w
  2584  0709  304B               	movlw	75
  2585  070A  1903               	skipnz
  2586  070B  0272               	subwf	?___lwmod,w
  2587  070C  1803               	skipnc
  2588  070D  2F13               	goto	l1093
  2589  070E                     l4573:	
  2590                           
  2591                           ;main.c: 658: {
  2592                           ;main.c: 659: fanKeyFlag = 0;
  2593  070E  01BB               	clrf	_fanKeyFlag
  2594                           
  2595                           ;main.c: 660: }
  2596  070F  2F15               	goto	l4581
  2597  0710                     l4575:	
  2598                           
  2599                           ;main.c: 666: else if(workStep > 0)
  2600  0710  087A               	movf	_workStep,w
  2601  0711  1903               	btfsc	3,2
  2602  0712  2F0E               	goto	l4573
  2603  0713                     l1093:	
  2604                           
  2605                           ;main.c: 661: else
  2606                           ;main.c: 662: {
  2607                           ;main.c: 663: fanKeyFlag = 1;
  2608  0713  01BB               	clrf	_fanKeyFlag
  2609  0714  0ABB               	incf	_fanKeyFlag,f
  2610  0715                     l4581:	
  2611                           
  2612                           ;main.c: 673: }
  2613                           ;main.c: 675: if(shanshuoTime2 > 0)
  2614  0715  082A               	movf	_shanshuoTime2,w
  2615  0716  042B               	iorwf	_shanshuoTime2+1,w
  2616  0717  1903               	btfsc	3,2
  2617  0718  2F34               	goto	l4589
  2618                           
  2619                           ;main.c: 676: {
  2620                           ;main.c: 677: shanshuoTime2--;
  2621  0719  3001               	movlw	1
  2622  071A  02AA               	subwf	_shanshuoTime2,f
  2623  071B  3000               	movlw	0
  2624  071C  1C03               	skipc
  2625  071D  03AB               	decf	_shanshuoTime2+1,f
  2626  071E  02AB               	subwf	_shanshuoTime2+1,f
  2627                           
  2628                           ;main.c: 678: if((shanshuoTime2 % 150) < 75)
  2629  071F  3096               	movlw	150
  2630  0720  00F2               	movwf	___lwmod@divisor
  2631  0721  01F3               	clrf	___lwmod@divisor+1
  2632  0722  082B               	movf	_shanshuoTime2+1,w
  2633  0723  00F5               	movwf	___lwmod@dividend+1
  2634  0724  082A               	movf	_shanshuoTime2,w
  2635  0725  00F4               	movwf	___lwmod@dividend
  2636  0726  2738  118A         	fcall	___lwmod
  2637  0728  3000               	movlw	0
  2638  0729  0273               	subwf	?___lwmod+1,w
  2639  072A  304B               	movlw	75
  2640  072B  1903               	skipnz
  2641  072C  0272               	subwf	?___lwmod,w
  2642  072D  1803               	skipnc
  2643  072E  2F31               	goto	l1099
  2644  072F                     l4587:	
  2645                           
  2646                           ;main.c: 679: {
  2647                           ;main.c: 680: wuhuaKeyFlag = 0;
  2648  072F  01BA               	clrf	_wuhuaKeyFlag
  2649                           
  2650                           ;main.c: 681: }
  2651  0730  0008               	return
  2652  0731                     l1099:	
  2653                           
  2654                           ;main.c: 682: else
  2655                           ;main.c: 683: {
  2656                           ;main.c: 684: wuhuaKeyFlag = 1;
  2657  0731  01BA               	clrf	_wuhuaKeyFlag
  2658  0732  0ABA               	incf	_wuhuaKeyFlag,f
  2659  0733  0008               	return
  2660  0734                     l4589:	
  2661                           
  2662                           ;main.c: 687: else if(wuhuaFlag > 0)
  2663  0734  0879               	movf	_wuhuaFlag,w
  2664  0735  1D03               	btfss	3,2
  2665  0736  2F31               	goto	l1099
  2666  0737  2F2F               	goto	l4587
  2667  0738                     __end_of_keyLedCtr:	
  2668  0738                     __ptext6:	
  2669 ;; *************** function ___lwmod *****************
  2670 ;; Defined at:
  2671 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  divisor         2    2[COMMON] unsigned int 
  2674 ;;  dividend        2    4[COMMON] unsigned int 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  counter         1    6[COMMON] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  2    2[COMMON] unsigned int 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 300/0
  2683 ;;		On exit  : 300/0
  2684 ;;		Unchanged: 300/0
  2685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2686 ;;      Params:         4       0       0       0
  2687 ;;      Locals:         1       0       0       0
  2688 ;;      Temps:          0       0       0       0
  2689 ;;      Totals:         5       0       0       0
  2690 ;;Total ram usage:        5 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    1
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_keyLedCtr
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function ___lwmod
  2702  0738                     ___lwmod:	
  2703                           
  2704                           ;incstack = 0
  2705                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2706  0738  0872               	movf	___lwmod@divisor,w
  2707  0739  0473               	iorwf	___lwmod@divisor+1,w
  2708  073A  1903               	btfsc	3,2
  2709  073B  2F57               	goto	l4477
  2710  073C  01F6               	clrf	___lwmod@counter
  2711  073D                     L1:	
  2712  073D  0AF6               	incf	___lwmod@counter,f
  2713  073E  1BF3               	btfsc	___lwmod@divisor+1,7
  2714  073F  2F44               	goto	l4469
  2715  0740  1003               	clrc
  2716  0741  0DF2               	rlf	___lwmod@divisor,f
  2717  0742  0DF3               	rlf	___lwmod@divisor+1,f
  2718  0743  2F3D               	goto	L1
  2719  0744                     l4469:	
  2720  0744  0873               	movf	___lwmod@divisor+1,w
  2721  0745  0275               	subwf	___lwmod@dividend+1,w
  2722  0746  1D03               	skipz
  2723  0747  2F4A               	goto	u4975
  2724  0748  0872               	movf	___lwmod@divisor,w
  2725  0749  0274               	subwf	___lwmod@dividend,w
  2726  074A                     u4975:	
  2727  074A  1C03               	skipc
  2728  074B  2F53               	goto	L2
  2729  074C  0872               	movf	___lwmod@divisor,w
  2730  074D  02F4               	subwf	___lwmod@dividend,f
  2731  074E  0873               	movf	___lwmod@divisor+1,w
  2732  074F  1C03               	skipc
  2733  0750  03F5               	decf	___lwmod@dividend+1,f
  2734  0751  02F5               	subwf	___lwmod@dividend+1,f
  2735  0752  1003               	clrc
  2736  0753                     L2:	
  2737  0753  0CF3               	rrf	___lwmod@divisor+1,f
  2738  0754  0CF2               	rrf	___lwmod@divisor,f
  2739  0755  0BF6               	decfsz	___lwmod@counter,f
  2740  0756  2F44               	goto	l4469
  2741  0757                     l4477:	
  2742  0757  0875               	movf	___lwmod@dividend+1,w
  2743  0758  00F3               	movwf	?___lwmod+1
  2744  0759  0874               	movf	___lwmod@dividend,w
  2745  075A  00F2               	movwf	?___lwmod
  2746  075B  0008               	return
  2747  075C                     __end_of___lwmod:	
  2748  075C                     __ptext2:	
  2749 ;; *************** function _wuhuaCtr *****************
  2750 ;; Defined at:
  2751 ;;		line 787 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;		None
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0, pclath, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 200/0
  2762 ;;		On exit  : 200/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2765 ;;      Params:         0       0       0       0
  2766 ;;      Locals:         0       0       0       0
  2767 ;;      Temps:          0       0       0       0
  2768 ;;      Totals:         0       0       0       0
  2769 ;;Total ram usage:        0 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    2
  2772 ;; This function calls:
  2773 ;;		_pwmInit
  2774 ;;		_pwmStop
  2775 ;; This function is called by:
  2776 ;;		_workCtr
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           
  2781                           ;psect for function _wuhuaCtr
  2782  075C                     _wuhuaCtr:	
  2783  075C                     l4643:	
  2784                           ;incstack = 0
  2785                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2786                           
  2787                           
  2788                           ;main.c: 789: if(count1s == 0)
  2789  075C  1283               	bcf	3,5	;RP0=0, select bank0
  2790  075D  0846               	movf	_count1s,w
  2791  075E  1D03               	btfss	3,2
  2792  075F  2F65               	goto	l4649
  2793                           
  2794                           ;main.c: 790: {
  2795                           ;main.c: 791: if(++count10s >= 10)
  2796  0760  300A               	movlw	10
  2797  0761  0AC4               	incf	_count10s,f
  2798  0762  0244               	subwf	_count10s,w
  2799  0763  1803               	btfsc	3,0
  2800                           
  2801                           ;main.c: 792: {
  2802                           ;main.c: 793: count10s = 0;
  2803  0764  01C4               	clrf	_count10s
  2804  0765                     l4649:	
  2805                           
  2806                           ;main.c: 794: }
  2807                           ;main.c: 795: }
  2808                           ;main.c: 796: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2809  0765  0379               	decf	_wuhuaFlag,w
  2810  0766  1903               	btfsc	3,2
  2811  0767  2F70               	goto	l4655
  2812  0768  3002               	movlw	2
  2813  0769  0679               	xorwf	_wuhuaFlag,w
  2814  076A  1D03               	btfss	3,2
  2815  076B  2F71               	goto	l4657
  2816  076C  3005               	movlw	5
  2817  076D  0244               	subwf	_count10s,w
  2818  076E  1803               	skipnc
  2819  076F  2F71               	goto	l4657
  2820  0770                     l4655:	
  2821                           
  2822                           ;main.c: 797: {
  2823                           ;main.c: 798: pwmInit();
  2824  0770  2F72               	ljmp	l4393
  2825  0771                     l4657:	
  2826                           ;main.c: 813: }
  2827                           
  2828                           
  2829                           ;main.c: 814: else
  2830                           ;main.c: 815: {
  2831                           ;main.c: 816: pwmStop();
  2832  0771  2F7E               	ljmp	l4403
  2833  0772                     __end_of_wuhuaCtr:	
  2834  0772                     __ptext4:	
  2835 ;; *************** function _pwmInit *****************
  2836 ;; Defined at:
  2837 ;;		line 698 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 300/0
  2848 ;;		On exit  : 300/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2851 ;;      Params:         0       0       0       0
  2852 ;;      Locals:         0       0       0       0
  2853 ;;      Temps:          0       0       0       0
  2854 ;;      Totals:         0       0       0       0
  2855 ;;Total ram usage:        0 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_wuhuaCtr
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _pwmInit
  2867  0772                     _pwmInit:	
  2868  0772                     l4393:	
  2869                           ;incstack = 0
  2870                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2871                           
  2872                           
  2873                           ;main.c: 701: PWMTH = 0x00;
  2874  0772  0198               	clrf	24	;volatile
  2875                           
  2876                           ;main.c: 702: PWMTL = 73;
  2877  0773  3049               	movlw	73
  2878  0774  0097               	movwf	23	;volatile
  2879                           
  2880                           ;main.c: 703: PWMD01H = 0x00;
  2881  0775  019E               	clrf	30	;volatile
  2882                           
  2883                           ;main.c: 704: PWMD0L = 32;
  2884  0776  3020               	movlw	32
  2885  0777  0099               	movwf	25	;volatile
  2886                           
  2887                           ;main.c: 705: PWMCON1 = 0x40;
  2888  0778  3040               	movlw	64
  2889  0779  0096               	movwf	22	;volatile
  2890                           
  2891                           ;main.c: 706: PWMCON2 = 0x00;
  2892  077A  019D               	clrf	29	;volatile
  2893                           
  2894                           ;main.c: 707: PWMCON0 |= 0x21;
  2895  077B  3021               	movlw	33
  2896  077C  0495               	iorwf	21,f	;volatile
  2897  077D  0008               	return
  2898  077E                     __end_of_pwmInit:	
  2899  077E                     __ptext3:	
  2900 ;; *************** function _pwmStop *****************
  2901 ;; Defined at:
  2902 ;;		line 710 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		status,2
  2911 ;; Tracked objects:
  2912 ;;		On entry : 300/0
  2913 ;;		On exit  : 300/100
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2916 ;;      Params:         0       0       0       0
  2917 ;;      Locals:         0       0       0       0
  2918 ;;      Temps:          0       0       0       0
  2919 ;;      Totals:         0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_wuhuaCtr
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _pwmStop
  2932  077E                     _pwmStop:	
  2933  077E                     l4403:	
  2934                           ;incstack = 0
  2935                           ; Regs used in _pwmStop: [status,2]
  2936                           
  2937                           
  2938                           ;main.c: 712: PWMD0L = 0;
  2939  077E  0199               	clrf	25	;volatile
  2940                           
  2941                           ;main.c: 713: PWMCON0 &= 0xFE;
  2942  077F  1015               	bcf	21,0	;volatile
  2943                           
  2944                           ;main.c: 714: PORTA &= 0xDF;
  2945  0780  1683               	bsf	3,5	;RP0=1, select bank1
  2946  0781  1286               	bcf	6,5	;volatile
  2947  0782  0008               	return
  2948  0783                     __end_of_pwmStop:	
  2949  0783                     PL6:	
  2950  0783  00F5               	movwf	??_ADC_Sample+1
  2951  0784  01F6               	clrf	??_ADC_Sample+2
  2952  0785  01F7               	clrf	??_ADC_Sample+3
  2953  0786  0874               	movf	??_ADC_Sample,w
  2954  0787  02CD               	subwf	ADC_Sample@adsum,f	;volatile
  2955  0788  0875               	movf	??_ADC_Sample+1,w
  2956  0789  1C03               	skipc
  2957  078A  0F75               	incfsz	??_ADC_Sample+1,w
  2958  078B  02CE               	subwf	ADC_Sample@adsum+1,f	;volatile
  2959  078C  0876               	movf	??_ADC_Sample+2,w
  2960  078D  1C03               	skipc
  2961  078E  0F76               	incfsz	??_ADC_Sample+2,w
  2962  078F  02CF               	subwf	ADC_Sample@adsum+2,f	;volatile
  2963  0790  0877               	movf	??_ADC_Sample+3,w
  2964  0791  0008               	return
  2965  0792                     __end_ofPL6:	
  2966  0792                     PL16:	
  2967  0792  0586               	andwf	6,f	;volatile
  2968  0793  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0794  1206               	bcf	6,4	;volatile
  2970  0795  301B               	movlw	27
  2971  0796  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0797  0485               	iorwf	5,f	;volatile
  2973  0798  1283               	bcf	3,5	;RP0=0, select bank0
  2974  0799  1605               	bsf	5,4	;volatile
  2975  079A  0008               	return
  2976  079B                     __end_ofPL16:	
  2977  079B                     PL18:	
  2978  079B  01CD               	clrf	ADC_Sample@adsum	;volatile
  2979  079C  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2980  079D  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2981  079E  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2982  079F  01D1               	clrf	ADC_Sample@admin	;volatile
  2983  07A0  01D2               	clrf	ADC_Sample@admin+1	;volatile
  2984  07A1  01D3               	clrf	ADC_Sample@admax	;volatile
  2985  07A2  01D4               	clrf	ADC_Sample@admax+1	;volatile
  2986  07A3  0008               	return
  2987  07A4                     __end_ofPL18:	
  2988  07A4                     PL26:	
  2989  07A4  085F               	movf	___fttol@f1,w
  2990  07A5  00E3               	movwf	??___fttol
  2991  07A6  0860               	movf	___fttol@f1+1,w
  2992  07A7  00E4               	movwf	??___fttol+1
  2993  07A8  0861               	movf	___fttol@f1+2,w
  2994  07A9  00E5               	movwf	??___fttol+2
  2995  07AA  0008               	return
  2996  07AB                     __end_ofPL26:	
  2997  07AB                     PL32:	
  2998  07AB  1003               	clrc
  2999  07AC  0CF4               	rrf	___ftpack@arg+2,f
  3000  07AD  0CF3               	rrf	___ftpack@arg+1,f
  3001  07AE  0CF2               	rrf	___ftpack@arg,f
  3002  07AF  0008               	return
  3003  07B0                     __end_ofPL32:	
  3004  07B0                     PL36:	
  3005  07B0  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3006  07B1  00D4               	movwf	ADC_Sample@admax+1	;volatile
  3007  07B2  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  3008  07B3  00D3               	movwf	ADC_Sample@admax	;volatile
  3009  07B4  0008               	return
  3010  07B5                     __end_ofPL36:	
  3011  07B5                     PL38:	
  3012  07B5  01D0               	clrf	?___ftdiv
  3013  07B6  01D1               	clrf	?___ftdiv+1
  3014  07B7  01D2               	clrf	?___ftdiv+2
  3015  07B8  0008               	return
  3016  07B9                     __end_ofPL38:	
  3017                           
  3018                           	psect	text7
  3019  0F56                     __ptext7:	
  3020 ;; *************** function _fanCtr *****************
  3021 ;; Defined at:
  3022 ;;		line 736 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  3027 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 300/0
  3034 ;;		On exit  : 200/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3037 ;;      Params:         0       0       0       0
  3038 ;;      Locals:         0       5       0       0
  3039 ;;      Temps:          0       0       0       0
  3040 ;;      Totals:         0       5       0       0
  3041 ;;Total ram usage:        5 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    3
  3044 ;; This function calls:
  3045 ;;		_ADC_Sample
  3046 ;;		___lmul
  3047 ;;		_fanInit
  3048 ;;		_fanStop
  3049 ;; This function is called by:
  3050 ;;		_workCtr
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _fanCtr
  3056  0F56                     _fanCtr:	
  3057                           
  3058                           ;main.c: 738: if(workStep > 0)
  3059                           
  3060                           ;incstack = 0
  3061                           ; Regs used in _fanCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3062  0F56  087A               	movf	_workStep,w
  3063  0F57  1903               	btfsc	3,2
  3064  0F58  2FB8               	goto	l4637
  3065                           
  3066                           ;main.c: 739: {
  3067                           ;main.c: 740: PORTA |= 0x04;
  3068  0F59  1683               	bsf	3,5	;RP0=1, select bank1
  3069  0F5A  1506               	bsf	6,2	;volatile
  3070                           
  3071                           ;main.c: 741: unsigned char maxFanValue = 52;
  3072  0F5B  3034               	movlw	52
  3073  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0F5D  00D7               	movwf	fanCtr@maxFanValue
  3075                           
  3076                           ;main.c: 742: if(workStep == 1)
  3077  0F5E  0B7A               	decfsz	_workStep,w
  3078  0F5F  2F62               	goto	l4605
  3079                           
  3080                           ;main.c: 743: {
  3081                           ;main.c: 744: maxFanValue = 40;
  3082  0F60  3028               	movlw	40
  3083  0F61  00D7               	movwf	fanCtr@maxFanValue
  3084  0F62                     l4605:	
  3085  0F62  300D               	movlw	13
  3086                           
  3087                           ;main.c: 745: }
  3088                           ;main.c: 746: test_adc = ADC_Sample(13, 0);
  3089  0F63  01F3               	clrf	ADC_Sample@adldo
  3090  0F64  118A  256A  158A   	fcall	_ADC_Sample
  3091  0F67  00B7               	movwf	_test_adc	;volatile
  3092                           
  3093                           ;main.c: 747: if (0xA5 == test_adc)
  3094  0F68  30A5               	movlw	165
  3095  0F69  0637               	xorwf	_test_adc,w	;volatile
  3096  0F6A  1D03               	btfss	3,2
  3097  0F6B  2F96               	goto	l4617
  3098                           
  3099                           ;main.c: 748: {
  3100                           ;main.c: 749: volatile unsigned long fan_temp;
  3101                           ;main.c: 750: if(power_ad > 0)
  3102  0F6C  0828               	movf	_power_ad,w	;volatile
  3103  0F6D  0429               	iorwf	_power_ad+1,w	;volatile
  3104  0F6E  1903               	btfsc	3,2
  3105  0F6F  2F96               	goto	l4617
  3106                           
  3107                           ;main.c: 751: {
  3108                           ;main.c: 752: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  3109  0F70  0848               	movf	_adresult,w	;volatile
  3110  0F71  00CA               	movwf	___lmul@multiplier
  3111  0F72  0849               	movf	_adresult+1,w	;volatile
  3112  0F73  00CB               	movwf	___lmul@multiplier+1
  3113  0F74  01CC               	clrf	___lmul@multiplier+2
  3114  0F75  01CD               	clrf	___lmul@multiplier+3
  3115  0F76  0828               	movf	_power_ad,w	;volatile
  3116  0F77  00CE               	movwf	___lmul@multiplicand
  3117  0F78  0829               	movf	_power_ad+1,w	;volatile
  3118  0F79  00CF               	movwf	___lmul@multiplicand+1
  3119  0F7A  01D0               	clrf	___lmul@multiplicand+2
  3120  0F7B  01D1               	clrf	___lmul@multiplicand+3
  3121  0F7C  27BD  158A         	fcall	___lmul
  3122  0F7E  084D               	movf	?___lmul+3,w
  3123  0F7F  00DB               	movwf	fanCtr@fan_temp+3	;volatile
  3124  0F80  084C               	movf	?___lmul+2,w
  3125  0F81  00DA               	movwf	fanCtr@fan_temp+2	;volatile
  3126  0F82  084B               	movf	?___lmul+1,w
  3127  0F83  00D9               	movwf	fanCtr@fan_temp+1	;volatile
  3128  0F84  084A               	movf	?___lmul,w
  3129  0F85  00D8               	movwf	fanCtr@fan_temp	;volatile
  3130  0F86  300C               	movlw	12
  3131  0F87                     u5185:	
  3132  0F87  1003               	clrc
  3133  0F88  0CDB               	rrf	fanCtr@fan_temp+3,f	;volatile
  3134  0F89  0CDA               	rrf	fanCtr@fan_temp+2,f	;volatile
  3135  0F8A  0CD9               	rrf	fanCtr@fan_temp+1,f	;volatile
  3136  0F8B  0CD8               	rrf	fanCtr@fan_temp,f	;volatile
  3137  0F8C  3EFF               	addlw	-1
  3138  0F8D  1D03               	skipz
  3139  0F8E  2F87               	goto	u5185
  3140                           
  3141                           ;main.c: 753: fanValue = (unsigned int)(fan_temp);
  3142  0F8F  0859               	movf	fanCtr@fan_temp+1,w	;volatile
  3143  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  3144  0F91  00B5               	movwf	(_fanValue+1)^(0+128)
  3145  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0F93  0858               	movf	fanCtr@fan_temp,w	;volatile
  3147  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  3148  0F95  00B4               	movwf	_fanValue^(0+128)
  3149  0F96                     l4617:	
  3150                           
  3151                           ;main.c: 754: }
  3152                           ;main.c: 755: }
  3153                           ;main.c: 756: if(fanValue > 1300)
  3154  0F96  3005               	movlw	5
  3155  0F97  1683               	bsf	3,5	;RP0=1, select bank1
  3156  0F98  0235               	subwf	(_fanValue+1)^(0+128),w
  3157  0F99  3015               	movlw	21
  3158  0F9A  1903               	skipnz
  3159  0F9B  0234               	subwf	_fanValue^(0+128),w
  3160  0F9C  1C03               	skipc
  3161  0F9D  2FAB               	goto	l4625
  3162                           
  3163                           ;main.c: 757: {
  3164                           ;main.c: 758: if(++fanOverTime > 50)
  3165  0F9E  3033               	movlw	51
  3166  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0FA0  0AC3               	incf	_fanOverTime,f
  3168  0FA1  0243               	subwf	_fanOverTime,w
  3169  0FA2  1C03               	skipc
  3170  0FA3  2FAD               	goto	l4627
  3171  0FA4  30C2               	movlw	194
  3172                           
  3173                           ;main.c: 759: {
  3174                           ;main.c: 760: fanOverTime = 0;
  3175  0FA5  01C3               	clrf	_fanOverTime
  3176                           
  3177                           ;main.c: 761: workStep = 0;
  3178  0FA6  01FA               	clrf	_workStep
  3179                           
  3180                           ;main.c: 762: shanshuoTime = 450;
  3181  0FA7  00AC               	movwf	_shanshuoTime
  3182  0FA8  3001               	movlw	1
  3183  0FA9  00AD               	movwf	_shanshuoTime+1
  3184  0FAA  2FAD               	goto	l4627
  3185  0FAB                     l4625:	
  3186                           
  3187                           ;main.c: 765: else
  3188                           ;main.c: 766: {
  3189                           ;main.c: 767: fanOverTime = 0;
  3190  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0FAC  01C3               	clrf	_fanOverTime
  3192  0FAD                     l4627:	
  3193                           
  3194                           ;main.c: 768: }
  3195                           ;main.c: 769: if(fanDuty < maxFanValue)
  3196  0FAD  0857               	movf	fanCtr@maxFanValue,w
  3197  0FAE  0245               	subwf	_fanDuty,w
  3198  0FAF  1803               	skipnc
  3199  0FB0  2FB3               	goto	l4631
  3200                           
  3201                           ;main.c: 770: {
  3202                           ;main.c: 771: fanDuty++;
  3203  0FB1  0AC5               	incf	_fanDuty,f
  3204                           
  3205                           ;main.c: 772: }
  3206  0FB2  2FB7               	goto	l4635
  3207  0FB3                     l4631:	
  3208                           
  3209                           ;main.c: 773: else if(fanDuty > maxFanValue)
  3210  0FB3  0845               	movf	_fanDuty,w
  3211  0FB4  0257               	subwf	fanCtr@maxFanValue,w
  3212  0FB5  1C03               	btfss	3,0
  3213                           
  3214                           ;main.c: 774: {
  3215                           ;main.c: 775: fanDuty--;
  3216  0FB6  03C5               	decf	_fanDuty,f
  3217  0FB7                     l4635:	
  3218                           
  3219                           ;main.c: 776: }
  3220                           ;main.c: 777: fanInit();
  3221  0FB7  2FF0               	ljmp	l4409
  3222  0FB8                     l4637:	
  3223                           ;main.c: 778: }
  3224                           
  3225                           
  3226                           ;main.c: 779: else
  3227                           ;main.c: 780: {
  3228                           ;main.c: 781: fanStop();
  3229  0FB8  27FC               	fcall	_fanStop
  3230                           
  3231                           ;main.c: 782: fanDuty = 0;
  3232  0FB9  01C5               	clrf	_fanDuty
  3233                           
  3234                           ;main.c: 783: PORTA &= 0xFB;
  3235  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  3236  0FBB  1106               	bcf	6,2	;volatile
  3237  0FBC  0008               	return
  3238  0FBD                     __end_of_fanCtr:	
  3239  0FBD                     __ptext10:	
  3240 ;; *************** function ___lmul *****************
  3241 ;; Defined at:
  3242 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3245 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;  product         4    2[COMMON] unsigned long 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  4    0[BANK0 ] unsigned long 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0
  3252 ;; Tracked objects:
  3253 ;;		On entry : 300/0
  3254 ;;		On exit  : 300/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3257 ;;      Params:         0       8       0       0
  3258 ;;      Locals:         4       0       0       0
  3259 ;;      Temps:          0       0       0       0
  3260 ;;      Totals:         4       8       0       0
  3261 ;;Total ram usage:       12 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    1
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_fanCtr
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           
  3272                           ;psect for function ___lmul
  3273  0FBD                     ___lmul:	
  3274                           
  3275                           ;incstack = 0
  3276                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3277  0FBD  01F2               	clrf	___lmul@product
  3278  0FBE  01F3               	clrf	___lmul@product+1
  3279  0FBF  01F4               	clrf	___lmul@product+2
  3280  0FC0  01F5               	clrf	___lmul@product+3
  3281  0FC1                     l1410:	
  3282  0FC1  1C4A               	btfss	___lmul@multiplier,0
  3283  0FC2  2FD7               	goto	l4429
  3284  0FC3  084E               	movf	___lmul@multiplicand,w
  3285  0FC4  07F2               	addwf	___lmul@product,f
  3286  0FC5  084F               	movf	___lmul@multiplicand+1,w
  3287  0FC6  1103               	clrz
  3288  0FC7  1803               	skipnc
  3289  0FC8  3E01               	addlw	1
  3290  0FC9  1D03               	btfss	3,2
  3291  0FCA  07F3               	addwf	___lmul@product+1,f
  3292  0FCB  0850               	movf	___lmul@multiplicand+2,w
  3293  0FCC  1103               	clrz
  3294  0FCD  1803               	skipnc
  3295  0FCE  3E01               	addlw	1
  3296  0FCF  1D03               	btfss	3,2
  3297  0FD0  07F4               	addwf	___lmul@product+2,f
  3298  0FD1  0851               	movf	___lmul@multiplicand+3,w
  3299  0FD2  1103               	clrz
  3300  0FD3  1803               	skipnc
  3301  0FD4  3E01               	addlw	1
  3302  0FD5  1D03               	btfss	3,2
  3303  0FD6  07F5               	addwf	___lmul@product+3,f
  3304  0FD7                     l4429:	
  3305  0FD7  1003               	clrc
  3306  0FD8  0DCE               	rlf	___lmul@multiplicand,f
  3307  0FD9  0DCF               	rlf	___lmul@multiplicand+1,f
  3308  0FDA  0DD0               	rlf	___lmul@multiplicand+2,f
  3309  0FDB  0DD1               	rlf	___lmul@multiplicand+3,f
  3310  0FDC  1003               	clrc
  3311  0FDD  0CCD               	rrf	___lmul@multiplier+3,f
  3312  0FDE  0CCC               	rrf	___lmul@multiplier+2,f
  3313  0FDF  0CCB               	rrf	___lmul@multiplier+1,f
  3314  0FE0  0CCA               	rrf	___lmul@multiplier,f
  3315  0FE1  084D               	movf	___lmul@multiplier+3,w
  3316  0FE2  044C               	iorwf	___lmul@multiplier+2,w
  3317  0FE3  044B               	iorwf	___lmul@multiplier+1,w
  3318  0FE4  044A               	iorwf	___lmul@multiplier,w
  3319  0FE5  1D03               	skipz
  3320  0FE6  2FC1               	goto	l1410
  3321  0FE7  0875               	movf	___lmul@product+3,w
  3322  0FE8  00CD               	movwf	?___lmul+3
  3323  0FE9  0874               	movf	___lmul@product+2,w
  3324  0FEA  00CC               	movwf	?___lmul+2
  3325  0FEB  0873               	movf	___lmul@product+1,w
  3326  0FEC  00CB               	movwf	?___lmul+1
  3327  0FED  0872               	movf	___lmul@product,w
  3328  0FEE  00CA               	movwf	?___lmul
  3329  0FEF  0008               	return
  3330  0FF0                     __end_of___lmul:	
  3331  0FF0                     __ptext9:	
  3332 ;; *************** function _fanInit *****************
  3333 ;; Defined at:
  3334 ;;		line 717 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;		None
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0
  3343 ;; Tracked objects:
  3344 ;;		On entry : 300/0
  3345 ;;		On exit  : 300/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3348 ;;      Params:         0       0       0       0
  3349 ;;      Locals:         0       0       0       0
  3350 ;;      Temps:          0       0       0       0
  3351 ;;      Totals:         0       0       0       0
  3352 ;;Total ram usage:        0 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    1
  3355 ;; This function calls:
  3356 ;;		Nothing
  3357 ;; This function is called by:
  3358 ;;		_fanCtr
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _fanInit
  3364  0FF0                     _fanInit:	
  3365  0FF0                     l4409:	
  3366                           ;incstack = 0
  3367                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  3368                           
  3369                           
  3370                           ;main.c: 720: PWMTH = 0x00;
  3371  0FF0  0198               	clrf	24	;volatile
  3372                           
  3373                           ;main.c: 721: PWMTL = 73;
  3374  0FF1  3049               	movlw	73
  3375  0FF2  0097               	movwf	23	;volatile
  3376                           
  3377                           ;main.c: 722: PWMD01H = 0x00;
  3378  0FF3  019E               	clrf	30	;volatile
  3379                           
  3380                           ;main.c: 723: PWMD1L = fanDuty;
  3381  0FF4  0845               	movf	_fanDuty,w
  3382  0FF5  009A               	movwf	26	;volatile
  3383                           
  3384                           ;main.c: 724: PWMCON1 = 0x40;
  3385  0FF6  3040               	movlw	64
  3386  0FF7  0096               	movwf	22	;volatile
  3387                           
  3388                           ;main.c: 725: PWMCON2 = 0x00;
  3389  0FF8  019D               	clrf	29	;volatile
  3390                           
  3391                           ;main.c: 726: PWMCON0 |= 0x22;
  3392  0FF9  3022               	movlw	34
  3393  0FFA  0495               	iorwf	21,f	;volatile
  3394  0FFB  0008               	return
  3395  0FFC                     __end_of_fanInit:	
  3396  0FFC                     __ptext8:	
  3397 ;; *************** function _fanStop *****************
  3398 ;; Defined at:
  3399 ;;		line 729 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;		None
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		status,2
  3408 ;; Tracked objects:
  3409 ;;		On entry : 300/0
  3410 ;;		On exit  : 300/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3413 ;;      Params:         0       0       0       0
  3414 ;;      Locals:         0       0       0       0
  3415 ;;      Temps:          0       0       0       0
  3416 ;;      Totals:         0       0       0       0
  3417 ;;Total ram usage:        0 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_fanCtr
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _fanStop
  3429  0FFC                     _fanStop:	
  3430                           
  3431                           ;main.c: 731: PWMD1L = 0;
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _fanStop: [status,2]
  3435  0FFC  019A               	clrf	26	;volatile
  3436                           
  3437                           ;main.c: 732: PWMCON0 &= 0xFD;
  3438  0FFD  1095               	bcf	21,1	;volatile
  3439                           
  3440                           ;main.c: 733: PORTB &= 0x7F;
  3441  0FFE  1386               	bcf	6,7	;volatile
  3442  0FFF  0008               	return
  3443  1000                     __end_of_fanStop:	
  3444                           
  3445                           	psect	swtext1
  3446  07B9                     __pswtext1:	
  3447  07B9                     S5065:	
  3448  07B9  118A  2EEB         	ljmp	l4299
  3449  07BB  118A  2E4E         	ljmp	l1007
  3450  07BD  118A  2E54         	ljmp	l1009
  3451  07BF  118A  2E5A         	ljmp	l1011
  3452  07C1  118A  2E60         	ljmp	l1013
  3453  07C3  118A  2E69         	ljmp	l1015
  3454  07C5  118A  2E6F         	ljmp	l1017
  3455  07C7  118A  2E75         	ljmp	l1019
  3456  07C9  118A  2E7B         	ljmp	l1021
  3457  07CB  118A  2E83         	ljmp	l1023
  3458  07CD  118A  2E89         	ljmp	l1025
  3459  07CF  118A  2E8F         	ljmp	l1027
  3460  07D1  118A  2E95         	ljmp	l1029
  3461  07D3  118A  2E9E         	ljmp	l1031
  3462  07D5  118A  2EA4         	ljmp	l1033
  3463  07D7  118A  2EAA         	ljmp	l4273
  3464  07D9  118A  2EB6         	ljmp	l4279
  3465  07DB  118A  2EC2         	ljmp	l4283
  3466  07DD  118A  2ECB         	ljmp	l4287
  3467  07DF  118A  2ED4         	ljmp	l4291
  3468                           
  3469                           	psect	text17
  3470  0EDB                     __ptext17:	
  3471 ;; *************** function _setBatStep *****************
  3472 ;; Defined at:
  3473 ;;		line 550 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0, pclath, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 200/0
  3484 ;;		On exit  : 300/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3487 ;;      Params:         0       0       0       0
  3488 ;;      Locals:         0       0       0       0
  3489 ;;      Temps:          0       0       0       0
  3490 ;;      Totals:         0       0       0       0
  3491 ;;Total ram usage:        0 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    2
  3494 ;; This function calls:
  3495 ;;		___lwdiv
  3496 ;; This function is called by:
  3497 ;;		_main
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function _setBatStep
  3503  0EDB                     _setBatStep:	
  3504                           
  3505                           ;main.c: 552: if(lowBatLock == 1)
  3506                           
  3507                           ;incstack = 0
  3508                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  3509  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0EDC  0B3F               	decfsz	_lowBatLock,w
  3511  0EDD  2EE1               	goto	l4877
  3512                           
  3513                           ;main.c: 553: {
  3514                           ;main.c: 554: showBatStep = 0;
  3515  0EDE  01B9               	clrf	_showBatStep
  3516                           
  3517                           ;main.c: 555: curBatStep = 0;
  3518  0EDF  01B8               	clrf	_curBatStep
  3519                           
  3520                           ;main.c: 556: }
  3521  0EE0  0008               	return
  3522  0EE1                     l4877:	
  3523                           
  3524                           ;main.c: 557: else if(power_ad < 2800)
  3525  0EE1  300A               	movlw	10
  3526  0EE2  0229               	subwf	_power_ad+1,w	;volatile
  3527  0EE3  30F0               	movlw	240
  3528  0EE4  1903               	skipnz
  3529  0EE5  0228               	subwf	_power_ad,w	;volatile
  3530  0EE6  1803               	skipnc
  3531  0EE7  2EFC               	goto	l4889
  3532                           
  3533                           ;main.c: 558: {
  3534                           ;main.c: 559: if(count10s == 0 && count1s == 0)
  3535  0EE8  0844               	movf	_count10s,w
  3536  0EE9  1D03               	btfss	3,2
  3537  0EEA  0008               	return
  3538  0EEB  0846               	movf	_count1s,w
  3539  0EEC  1D03               	btfss	3,2
  3540  0EED  0008               	return
  3541                           
  3542                           ;main.c: 560: {
  3543                           ;main.c: 561: if(showBatStep > 1)
  3544  0EEE  3002               	movlw	2
  3545  0EEF  0239               	subwf	_showBatStep,w
  3546  0EF0  1C03               	skipc
  3547  0EF1  2EF7               	goto	l1066
  3548                           
  3549                           ;main.c: 562: {
  3550                           ;main.c: 563: if(chrgFlag == 0)
  3551  0EF2  0842               	movf	_chrgFlag,w
  3552  0EF3  1D03               	btfss	3,2
  3553  0EF4  2EF9               	goto	l1068
  3554                           
  3555                           ;main.c: 564: showBatStep--;
  3556  0EF5  03B9               	decf	_showBatStep,f
  3557  0EF6  2EF9               	goto	l1068
  3558  0EF7                     l1066:	
  3559                           
  3560                           ;main.c: 566: else
  3561                           ;main.c: 567: {
  3562                           ;main.c: 568: showBatStep = 1;
  3563  0EF7  01B9               	clrf	_showBatStep
  3564  0EF8  0AB9               	incf	_showBatStep,f
  3565  0EF9                     l1068:	
  3566                           
  3567                           ;main.c: 569: }
  3568                           ;main.c: 570: curBatStep = 1;
  3569  0EF9  01B8               	clrf	_curBatStep
  3570  0EFA  0AB8               	incf	_curBatStep,f
  3571  0EFB  0008               	return
  3572  0EFC                     l4889:	
  3573                           
  3574                           ;main.c: 573: else
  3575                           ;main.c: 574: {
  3576                           ;main.c: 575: curBatStep = (power_ad - 2800)/13;
  3577  0EFC  300D               	movlw	13
  3578  0EFD  00F2               	movwf	___lwdiv@divisor
  3579  0EFE  01F3               	clrf	___lwdiv@divisor+1
  3580  0EFF  0828               	movf	_power_ad,w	;volatile
  3581  0F00  3E10               	addlw	16
  3582  0F01  00F4               	movwf	___lwdiv@dividend
  3583  0F02  0829               	movf	_power_ad+1,w	;volatile
  3584  0F03  1803               	skipnc
  3585  0F04  3E01               	addlw	1
  3586  0F05  3EF5               	addlw	245
  3587  0F06  00F5               	movwf	___lwdiv@dividend+1
  3588  0F07  272C  158A         	fcall	___lwdiv
  3589  0F09  0872               	movf	?___lwdiv,w
  3590  0F0A  00B8               	movwf	_curBatStep
  3591                           
  3592                           ;main.c: 576: if(curBatStep > 99)
  3593  0F0B  3064               	movlw	100
  3594  0F0C  0238               	subwf	_curBatStep,w
  3595  0F0D  1C03               	skipc
  3596  0F0E  2F11               	goto	l4895
  3597                           
  3598                           ;main.c: 577: {
  3599                           ;main.c: 578: curBatStep = 99;
  3600  0F0F  3063               	movlw	99
  3601  0F10  00B8               	movwf	_curBatStep
  3602  0F11                     l4895:	
  3603                           
  3604                           ;main.c: 579: }
  3605                           ;main.c: 580: if(count10s == 0 && count1s == 0)
  3606  0F11  0844               	movf	_count10s,w
  3607  0F12  1D03               	btfss	3,2
  3608  0F13  0008               	return
  3609  0F14  0846               	movf	_count1s,w
  3610  0F15  1D03               	btfss	3,2
  3611  0F16  0008               	return
  3612                           
  3613                           ;main.c: 581: {
  3614                           ;main.c: 582: if(chrgFlag)
  3615  0F17  0842               	movf	_chrgFlag,w
  3616  0F18  1903               	btfsc	3,2
  3617  0F19  2F23               	goto	l4907
  3618                           
  3619                           ;main.c: 583: {
  3620                           ;main.c: 584: if(curBatStep > showBatStep && showBatStep < 99)
  3621  0F1A  0838               	movf	_curBatStep,w
  3622  0F1B  0239               	subwf	_showBatStep,w
  3623  0F1C  1803               	skipnc
  3624  0F1D  0008               	return
  3625  0F1E  3063               	movlw	99
  3626  0F1F  0239               	subwf	_showBatStep,w
  3627  0F20  1C03               	btfss	3,0
  3628                           
  3629                           ;main.c: 585: {
  3630                           ;main.c: 586: showBatStep++;
  3631  0F21  0AB9               	incf	_showBatStep,f
  3632  0F22  0008               	return
  3633  0F23                     l4907:	
  3634                           
  3635                           ;main.c: 589: else
  3636                           ;main.c: 590: {
  3637                           ;main.c: 591: if(curBatStep < showBatStep && showBatStep > 1)
  3638  0F23  0839               	movf	_showBatStep,w
  3639  0F24  0238               	subwf	_curBatStep,w
  3640  0F25  1803               	skipnc
  3641  0F26  0008               	return
  3642  0F27  3002               	movlw	2
  3643  0F28  0239               	subwf	_showBatStep,w
  3644  0F29  1803               	btfsc	3,0
  3645                           
  3646                           ;main.c: 592: {
  3647                           ;main.c: 593: showBatStep--;
  3648  0F2A  03B9               	decf	_showBatStep,f
  3649  0F2B  0008               	return
  3650  0F2C                     __end_of_setBatStep:	
  3651  0F2C                     __ptext18:	
  3652 ;; *************** function ___lwdiv *****************
  3653 ;; Defined at:
  3654 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  divisor         2    2[COMMON] unsigned int 
  3657 ;;  dividend        2    4[COMMON] unsigned int 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  quotient        2    1[BANK0 ] unsigned int 
  3660 ;;  counter         1    0[BANK0 ] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    2[COMMON] unsigned int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 300/0
  3667 ;;		On exit  : 300/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3670 ;;      Params:         4       0       0       0
  3671 ;;      Locals:         0       3       0       0
  3672 ;;      Temps:          0       0       0       0
  3673 ;;      Totals:         4       3       0       0
  3674 ;;Total ram usage:        7 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    1
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_setBatStep
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function ___lwdiv
  3686  0F2C                     ___lwdiv:	
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3690  0F2C  01CB               	clrf	___lwdiv@quotient
  3691  0F2D  01CC               	clrf	___lwdiv@quotient+1
  3692  0F2E  0872               	movf	___lwdiv@divisor,w
  3693  0F2F  0473               	iorwf	___lwdiv@divisor+1,w
  3694  0F30  1903               	btfsc	3,2
  3695  0F31  2F51               	goto	l4831
  3696  0F32  01CA               	clrf	___lwdiv@counter
  3697  0F33                     L21:	
  3698  0F33  0ACA               	incf	___lwdiv@counter,f
  3699  0F34  1BF3               	btfsc	___lwdiv@divisor+1,7
  3700  0F35  2F3A               	goto	l4819
  3701  0F36  1003               	clrc
  3702  0F37  0DF2               	rlf	___lwdiv@divisor,f
  3703  0F38  0DF3               	rlf	___lwdiv@divisor+1,f
  3704  0F39  2F33               	goto	L21
  3705  0F3A                     l4819:	
  3706  0F3A  1003               	clrc
  3707  0F3B  0DCB               	rlf	___lwdiv@quotient,f
  3708  0F3C  0DCC               	rlf	___lwdiv@quotient+1,f
  3709  0F3D  0873               	movf	___lwdiv@divisor+1,w
  3710  0F3E  0275               	subwf	___lwdiv@dividend+1,w
  3711  0F3F  1D03               	skipz
  3712  0F40  2F43               	goto	u5555
  3713  0F41  0872               	movf	___lwdiv@divisor,w
  3714  0F42  0274               	subwf	___lwdiv@dividend,w
  3715  0F43                     u5555:	
  3716  0F43  1C03               	skipc
  3717  0F44  2F4D               	goto	L22
  3718  0F45  0872               	movf	___lwdiv@divisor,w
  3719  0F46  02F4               	subwf	___lwdiv@dividend,f
  3720  0F47  0873               	movf	___lwdiv@divisor+1,w
  3721  0F48  1C03               	skipc
  3722  0F49  03F5               	decf	___lwdiv@dividend+1,f
  3723  0F4A  02F5               	subwf	___lwdiv@dividend+1,f
  3724  0F4B  144B               	bsf	___lwdiv@quotient,0
  3725  0F4C  1003               	clrc
  3726  0F4D                     L22:	
  3727  0F4D  0CF3               	rrf	___lwdiv@divisor+1,f
  3728  0F4E  0CF2               	rrf	___lwdiv@divisor,f
  3729  0F4F  0BCA               	decfsz	___lwdiv@counter,f
  3730  0F50  2F3A               	goto	l4819
  3731  0F51                     l4831:	
  3732  0F51  084C               	movf	___lwdiv@quotient+1,w
  3733  0F52  00F3               	movwf	?___lwdiv+1
  3734  0F53  084B               	movf	___lwdiv@quotient,w
  3735  0F54  00F2               	movwf	?___lwdiv
  3736  0F55  0008               	return
  3737  0F56                     __end_of___lwdiv:	
  3738                           
  3739                           	psect	text19
  3740  0E66                     __ptext19:	
  3741 ;; *************** function _chrgCtr *****************
  3742 ;; Defined at:
  3743 ;;		line 600 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 300/0
  3754 ;;		On exit  : 300/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3757 ;;      Params:         0       0       0       0
  3758 ;;      Locals:         0       0       0       0
  3759 ;;      Temps:          0       0       0       0
  3760 ;;      Totals:         0       0       0       0
  3761 ;;Total ram usage:        0 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    3
  3764 ;; This function calls:
  3765 ;;		_showBatLed
  3766 ;; This function is called by:
  3767 ;;		_main
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           
  3772                           ;psect for function _chrgCtr
  3773  0E66                     _chrgCtr:	
  3774                           
  3775                           ;main.c: 602: if(PORTB & 0x01)
  3776                           
  3777                           ;incstack = 0
  3778                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3779  0E66  1C06               	btfss	6,0	;volatile
  3780  0E67  2E77               	goto	l4049
  3781                           
  3782                           ;main.c: 603: {
  3783                           ;main.c: 604: chrgFlag = 1;
  3784  0E68  01C2               	clrf	_chrgFlag
  3785  0E69  0AC2               	incf	_chrgFlag,f
  3786                           
  3787                           ;main.c: 605: firstLock = 0;
  3788  0E6A  01C0               	clrf	_firstLock
  3789                           
  3790                           ;main.c: 606: lowBatLock = 0;
  3791  0E6B  01BF               	clrf	_lowBatLock
  3792                           
  3793                           ;main.c: 607: showBatLed();
  3794  0E6C  2690  158A         	fcall	_showBatLed
  3795                           
  3796                           ;main.c: 608: if(PORTB & 0x02)
  3797  0E6E  1C86               	btfss	6,1	;volatile
  3798  0E6F  2E75               	goto	l4045
  3799                           
  3800                           ;main.c: 609: {
  3801                           ;main.c: 610: if(++chrgFullTime > 200)
  3802  0E70  30C9               	movlw	201
  3803  0E71  0AC1               	incf	_chrgFullTime,f
  3804  0E72  0241               	subwf	_chrgFullTime,w
  3805  0E73  1C03               	skipc
  3806  0E74  0008               	return
  3807  0E75                     l4045:	
  3808                           
  3809                           ;main.c: 613: chrgFullFlag = 1;
  3810  0E75  01C1               	clrf	_chrgFullTime
  3811  0E76  0008               	return
  3812  0E77                     l4049:	
  3813                           
  3814                           ;main.c: 622: else
  3815                           ;main.c: 623: {
  3816                           ;main.c: 624: chrgFlag = 0;
  3817  0E77  01C2               	clrf	_chrgFlag
  3818                           
  3819                           ;main.c: 626: chrgFullFlag = 0;
  3820  0E78  01C1               	clrf	_chrgFullTime
  3821                           
  3822                           ;main.c: 628: if(firstTime == 0)
  3823  0E79  086C               	movf	_firstTime,w
  3824  0E7A  1D03               	btfss	3,2
  3825  0E7B  2E86               	goto	l4061
  3826                           
  3827                           ;main.c: 629: {
  3828                           ;main.c: 630: if(workStep == 0 && wuhuaFlag == 0)
  3829  0E7C  087A               	movf	_workStep,w
  3830  0E7D  1D03               	btfss	3,2
  3831  0E7E  2E85               	goto	l4059
  3832  0E7F  0879               	movf	_wuhuaFlag,w
  3833  0E80  1D03               	btfss	3,2
  3834  0E81  2E85               	goto	l4059
  3835                           
  3836                           ;main.c: 631: {
  3837                           ;main.c: 632: showNumShi = 0;
  3838  0E82  01FB               	clrf	_showNumShi
  3839                           
  3840                           ;main.c: 633: showNumGe = 0;
  3841  0E83  01ED               	clrf	_showNumGe
  3842                           
  3843                           ;main.c: 634: }
  3844  0E84  0008               	return
  3845  0E85                     l4059:	
  3846                           
  3847                           ;main.c: 635: else
  3848                           ;main.c: 636: {
  3849                           ;main.c: 637: showBatLed();
  3850  0E85  2E90               	ljmp	l3497
  3851  0E86                     l4061:	
  3852                           
  3853                           ;main.c: 640: else
  3854                           ;main.c: 641: {
  3855                           ;main.c: 642: if(showBatStep < curBatStep)
  3856  0E86  0838               	movf	_curBatStep,w
  3857  0E87  0239               	subwf	_showBatStep,w
  3858  0E88  1803               	skipnc
  3859  0E89  2E8C               	goto	l1088
  3860                           
  3861                           ;main.c: 643: {
  3862                           ;main.c: 644: showBatStep = curBatStep;
  3863  0E8A  0838               	movf	_curBatStep,w
  3864  0E8B  00B9               	movwf	_showBatStep
  3865  0E8C                     l1088:	
  3866                           
  3867                           ;main.c: 645: }
  3868                           ;main.c: 646: showNumShi = 0x7F;
  3869  0E8C  307F               	movlw	127
  3870  0E8D  00FB               	movwf	_showNumShi
  3871                           
  3872                           ;main.c: 647: showNumGe = 0x7F;
  3873  0E8E  00ED               	movwf	_showNumGe
  3874  0E8F  0008               	return
  3875  0E90                     __end_of_chrgCtr:	
  3876  0E90                     __ptext20:	
  3877 ;; *************** function _showBatLed *****************
  3878 ;; Defined at:
  3879 ;;		line 544 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 300/0
  3890 ;;		On exit  : 300/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3893 ;;      Params:         0       0       0       0
  3894 ;;      Locals:         0       0       0       0
  3895 ;;      Temps:          0       0       0       0
  3896 ;;      Totals:         0       0       0       0
  3897 ;;Total ram usage:        0 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    2
  3900 ;; This function calls:
  3901 ;;		___lbdiv
  3902 ;;		___lbmod
  3903 ;; This function is called by:
  3904 ;;		_chrgCtr
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _showBatLed
  3910  0E90                     _showBatLed:	
  3911  0E90                     l3497:	
  3912                           ;incstack = 0
  3913                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3914                           
  3915                           
  3916                           ;main.c: 546: showNumShi = numArray[showBatStep/10];
  3917  0E90  300A               	movlw	10
  3918  0E91  00F2               	movwf	___lbdiv@divisor
  3919  0E92  0839               	movf	_showBatStep,w
  3920  0E93  26A4               	fcall	___lbdiv
  3921  0E94  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3922  0E95  0084               	movwf	4
  3923  0E96  158A  2000  158A   	fcall	stringdir
  3924  0E99  00FB               	movwf	_showNumShi
  3925                           
  3926                           ;main.c: 547: showNumGe = numArray[showBatStep%10];
  3927  0E9A  300A               	movlw	10
  3928  0E9B  00F2               	movwf	___lbmod@divisor
  3929  0E9C  0839               	movf	_showBatStep,w
  3930  0E9D  26BF               	fcall	___lbmod
  3931  0E9E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3932  0E9F  0084               	movwf	4
  3933  0EA0  158A  2000         	fcall	stringdir
  3934  0EA2  00ED               	movwf	_showNumGe
  3935  0EA3  0008               	return
  3936  0EA4                     __end_of_showBatLed:	
  3937  0EA4                     __ptext22:	
  3938 ;; *************** function ___lbdiv *****************
  3939 ;; Defined at:
  3940 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  dividend        1    wreg     unsigned char 
  3943 ;;  divisor         1    2[COMMON] unsigned char 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  dividend        1    3[COMMON] unsigned char 
  3946 ;;  quotient        1    5[COMMON] unsigned char 
  3947 ;;  counter         1    4[COMMON] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 300/0
  3954 ;;		On exit  : 300/0
  3955 ;;		Unchanged: 300/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3957 ;;      Params:         1       0       0       0
  3958 ;;      Locals:         3       0       0       0
  3959 ;;      Temps:          0       0       0       0
  3960 ;;      Totals:         4       0       0       0
  3961 ;;Total ram usage:        4 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    1
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_showBatLed
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function ___lbdiv
  3973  0EA4                     ___lbdiv:	
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3977                           ;___lbdiv@dividend stored from wreg
  3978  0EA4  00F3               	movwf	___lbdiv@dividend
  3979  0EA5  01F5               	clrf	___lbdiv@quotient
  3980  0EA6  0872               	movf	___lbdiv@divisor,w
  3981  0EA7  1903               	btfsc	3,2
  3982  0EA8  2EBD               	goto	l3363
  3983  0EA9  01F4               	clrf	___lbdiv@counter
  3984  0EAA                     l3349:	
  3985  0EAA  0AF4               	incf	___lbdiv@counter,f
  3986  0EAB  1BF2               	btfsc	___lbdiv@divisor,7
  3987  0EAC  2EB0               	goto	l1661
  3988  0EAD  1003               	clrc
  3989  0EAE  0DF2               	rlf	___lbdiv@divisor,f
  3990  0EAF  2EAA               	goto	l3349
  3991  0EB0                     l1661:	
  3992  0EB0  1003               	clrc
  3993  0EB1  0DF5               	rlf	___lbdiv@quotient,f
  3994  0EB2  0872               	movf	___lbdiv@divisor,w
  3995  0EB3  0273               	subwf	___lbdiv@dividend,w
  3996  0EB4  1C03               	skipc
  3997  0EB5  2EBA               	goto	L24
  3998  0EB6  0872               	movf	___lbdiv@divisor,w
  3999  0EB7  02F3               	subwf	___lbdiv@dividend,f
  4000  0EB8  1475               	bsf	___lbdiv@quotient,0
  4001  0EB9  1003               	clrc
  4002  0EBA                     L24:	
  4003  0EBA  0CF2               	rrf	___lbdiv@divisor,f
  4004  0EBB  0BF4               	decfsz	___lbdiv@counter,f
  4005  0EBC  2EB0               	goto	l1661
  4006  0EBD                     l3363:	
  4007  0EBD  0875               	movf	___lbdiv@quotient,w
  4008  0EBE  0008               	return
  4009  0EBF                     __end_of___lbdiv:	
  4010  0EBF                     __ptext21:	
  4011 ;; *************** function ___lbmod *****************
  4012 ;; Defined at:
  4013 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  dividend        1    wreg     unsigned char 
  4016 ;;  divisor         1    2[COMMON] unsigned char 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  dividend        1    4[COMMON] unsigned char 
  4019 ;;  rem             1    6[COMMON] unsigned char 
  4020 ;;  counter         1    5[COMMON] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      unsigned char 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0
  4025 ;; Tracked objects:
  4026 ;;		On entry : 300/0
  4027 ;;		On exit  : 300/0
  4028 ;;		Unchanged: 300/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4030 ;;      Params:         1       0       0       0
  4031 ;;      Locals:         3       0       0       0
  4032 ;;      Temps:          1       0       0       0
  4033 ;;      Totals:         5       0       0       0
  4034 ;;Total ram usage:        5 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    1
  4037 ;; This function calls:
  4038 ;;		Nothing
  4039 ;; This function is called by:
  4040 ;;		_showBatLed
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function ___lbmod
  4046  0EBF                     ___lbmod:	
  4047                           
  4048                           ;incstack = 0
  4049                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4050                           ;___lbmod@dividend stored from wreg
  4051  0EBF  00F4               	movwf	___lbmod@dividend
  4052  0EC0  3008               	movlw	8
  4053  0EC1  00F5               	movwf	___lbmod@counter
  4054  0EC2  01F6               	clrf	___lbmod@rem
  4055  0EC3                     l3371:	
  4056  0EC3  0874               	movf	___lbmod@dividend,w
  4057  0EC4  00F3               	movwf	??___lbmod
  4058  0EC5  3007               	movlw	7
  4059  0EC6  1003               	clrc
  4060  0EC7                     L23:	
  4061  0EC7  0CF3               	rrf	??___lbmod,f
  4062  0EC8  3EFF               	addlw	-1
  4063  0EC9  1003               	clrc
  4064  0ECA  1D03               	skipz
  4065  0ECB  2EC7               	goto	L23
  4066  0ECC  0D76               	rlf	___lbmod@rem,w
  4067  0ECD  0473               	iorwf	??___lbmod,w
  4068  0ECE  00F6               	movwf	___lbmod@rem
  4069  0ECF  1003               	clrc
  4070  0ED0  0DF4               	rlf	___lbmod@dividend,f
  4071  0ED1  0872               	movf	___lbmod@divisor,w
  4072  0ED2  0276               	subwf	___lbmod@rem,w
  4073  0ED3  1C03               	skipc
  4074  0ED4  2ED7               	goto	l3379
  4075  0ED5  0872               	movf	___lbmod@divisor,w
  4076  0ED6  02F6               	subwf	___lbmod@rem,f
  4077  0ED7                     l3379:	
  4078  0ED7  0BF5               	decfsz	___lbmod@counter,f
  4079  0ED8  2EC3               	goto	l3371
  4080  0ED9  0876               	movf	___lbmod@rem,w
  4081  0EDA  0008               	return
  4082  0EDB                     __end_of___lbmod:	
  4083                           
  4084                           	psect	text26
  4085  0DC1                     __ptext26:	
  4086 ;; *************** function _KeyServer *****************
  4087 ;; Defined at:
  4088 ;;		line 129 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0
  4097 ;; Tracked objects:
  4098 ;;		On entry : 300/0
  4099 ;;		On exit  : 300/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4102 ;;      Params:         0       0       0       0
  4103 ;;      Locals:         0       0       0       0
  4104 ;;      Temps:          0       0       0       0
  4105 ;;      Totals:         0       0       0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    1
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _KeyServer
  4118  0DC1                     _KeyServer:	
  4119                           
  4120                           ;main.c: 131: static unsigned char KeyOldFlag = 0;
  4121                           ;main.c: 132: if (KeyFlag[0])
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  4125  0DC1  082E               	movf	_KeyFlag,w	;volatile
  4126  0DC2  1903               	btfsc	3,2
  4127  0DC3  2E04               	goto	l3957
  4128                           
  4129                           ;main.c: 133: {
  4130                           ;main.c: 134: if (KeyFlag[0] != KeyOldFlag)
  4131  0DC4  082E               	movf	_KeyFlag,w	;volatile
  4132  0DC5  0636               	xorwf	KeyServer@KeyOldFlag,w
  4133  0DC6  1903               	skipnz
  4134  0DC7  0008               	return
  4135                           
  4136                           ;main.c: 135: {
  4137                           ;main.c: 137: KeyOldFlag ^= KeyFlag[0];
  4138  0DC8  082E               	movf	_KeyFlag,w	;volatile
  4139  0DC9  06B6               	xorwf	KeyServer@KeyOldFlag,f
  4140                           
  4141                           ;main.c: 138: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  4142  0DCA  1836               	btfsc	KeyServer@KeyOldFlag,0
  4143  0DCB  1C2E               	btfss	_KeyFlag,0	;volatile
  4144  0DCC  2DE3               	goto	l3933
  4145  0DCD  0840               	movf	_firstLock,w
  4146  0DCE  1D03               	btfss	3,2
  4147  0DCF  2DE3               	goto	l3933
  4148                           
  4149                           ;main.c: 139: {
  4150                           ;main.c: 141: if(lowBatLock == 1)
  4151  0DD0  0B3F               	decfsz	_lowBatLock,w
  4152  0DD1  2DD5               	goto	l3923
  4153                           
  4154                           ;main.c: 142: {
  4155                           ;main.c: 143: shanshuoTime = 450;
  4156  0DD2  2606  158A         	fcall	PL34	;call to abstracted procedure
  4157                           
  4158                           ;main.c: 144: }
  4159  0DD4  2DDA               	goto	l3927
  4160  0DD5                     l3923:	
  4161                           
  4162                           ;main.c: 145: else if(++workStep > 2)
  4163  0DD5  3003               	movlw	3
  4164  0DD6  0AFA               	incf	_workStep,f
  4165  0DD7  027A               	subwf	_workStep,w
  4166  0DD8  1803               	btfsc	3,0
  4167                           
  4168                           ;main.c: 146: {
  4169                           ;main.c: 147: workStep = 0;
  4170  0DD9  01FA               	clrf	_workStep
  4171  0DDA                     l3927:	
  4172                           
  4173                           ;main.c: 148: }
  4174                           ;main.c: 149: if(workStep == 2)
  4175  0DDA  3002               	movlw	2
  4176  0DDB  067A               	xorwf	_workStep,w
  4177  0DDC  1D03               	btfss	3,2
  4178  0DDD  2DE1               	goto	l3931
  4179                           
  4180                           ;main.c: 150: {
  4181                           ;main.c: 151: shanshuoTime = 450;
  4182  0DDE  2606  158A         	fcall	PL34	;call to abstracted procedure
  4183                           
  4184                           ;main.c: 152: }
  4185  0DE0  2DE3               	goto	l3933
  4186  0DE1                     l3931:	
  4187                           
  4188                           ;main.c: 153: else
  4189                           ;main.c: 154: {
  4190                           ;main.c: 155: shanshuoTime = 0;
  4191  0DE1  01AC               	clrf	_shanshuoTime
  4192  0DE2  01AD               	clrf	_shanshuoTime+1
  4193  0DE3                     l3933:	
  4194                           
  4195                           ;main.c: 156: }
  4196                           ;main.c: 157: }
  4197                           ;main.c: 158: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  4198  0DE3  18B6               	btfsc	KeyServer@KeyOldFlag,1
  4199  0DE4  1CAE               	btfss	_KeyFlag,1	;volatile
  4200  0DE5  2E01               	goto	l3955
  4201  0DE6  0840               	movf	_firstLock,w
  4202  0DE7  1D03               	btfss	3,2
  4203  0DE8  2E01               	goto	l3955
  4204                           
  4205                           ;main.c: 159: {
  4206                           ;main.c: 161: if(lowBatLock == 1)
  4207  0DE9  0B3F               	decfsz	_lowBatLock,w
  4208  0DEA  2DF0               	goto	l3943
  4209                           
  4210                           ;main.c: 162: {
  4211                           ;main.c: 163: shanshuoTime2 = 450;
  4212  0DEB  30C2               	movlw	194
  4213  0DEC  00AA               	movwf	_shanshuoTime2
  4214  0DED  3001               	movlw	1
  4215  0DEE  00AB               	movwf	_shanshuoTime2+1
  4216                           
  4217                           ;main.c: 164: }
  4218  0DEF  2DF5               	goto	l3947
  4219  0DF0                     l3943:	
  4220                           
  4221                           ;main.c: 165: else if(++wuhuaFlag > 2)
  4222  0DF0  3003               	movlw	3
  4223  0DF1  0AF9               	incf	_wuhuaFlag,f
  4224  0DF2  0279               	subwf	_wuhuaFlag,w
  4225  0DF3  1803               	btfsc	3,0
  4226                           
  4227                           ;main.c: 166: {
  4228                           ;main.c: 167: wuhuaFlag = 0;
  4229  0DF4  01F9               	clrf	_wuhuaFlag
  4230  0DF5                     l3947:	
  4231                           
  4232                           ;main.c: 168: }
  4233                           ;main.c: 169: if(wuhuaFlag == 2)
  4234  0DF5  3002               	movlw	2
  4235  0DF6  0679               	xorwf	_wuhuaFlag,w
  4236  0DF7  1D03               	btfss	3,2
  4237  0DF8  2DFF               	goto	l3953
  4238                           
  4239                           ;main.c: 170: {
  4240                           ;main.c: 171: shanshuoTime2 = 450;
  4241  0DF9  30C2               	movlw	194
  4242  0DFA  00AA               	movwf	_shanshuoTime2
  4243  0DFB  3001               	movlw	1
  4244  0DFC  00AB               	movwf	_shanshuoTime2+1
  4245                           
  4246                           ;main.c: 172: count10s = 0;
  4247  0DFD  01C4               	clrf	_count10s
  4248                           
  4249                           ;main.c: 173: }
  4250  0DFE  2E01               	goto	l3955
  4251  0DFF                     l3953:	
  4252                           
  4253                           ;main.c: 174: else
  4254                           ;main.c: 175: {
  4255                           ;main.c: 176: shanshuoTime2 = 0;
  4256  0DFF  01AA               	clrf	_shanshuoTime2
  4257  0E00  01AB               	clrf	_shanshuoTime2+1
  4258  0E01                     l3955:	
  4259                           
  4260                           ;main.c: 177: }
  4261                           ;main.c: 178: }
  4262                           ;main.c: 181: KeyOldFlag = KeyFlag[0];
  4263  0E01  082E               	movf	_KeyFlag,w	;volatile
  4264  0E02  00B6               	movwf	KeyServer@KeyOldFlag
  4265  0E03  0008               	return
  4266  0E04                     l3957:	
  4267                           
  4268                           ;main.c: 184: else
  4269                           ;main.c: 185: {
  4270                           ;main.c: 186: KeyOldFlag = 0;
  4271  0E04  01B6               	clrf	KeyServer@KeyOldFlag
  4272  0E05  0008               	return
  4273  0E06                     __end_of_KeyServer:	
  4274  0E06                     PL34:	
  4275  0E06  30C2               	movlw	194
  4276  0E07  00AC               	movwf	_shanshuoTime
  4277  0E08  3001               	movlw	1
  4278  0E09  00AD               	movwf	_shanshuoTime+1
  4279  0E0A  0008               	return
  4280  0E0B                     __end_ofPL34:	
  4281                           
  4282                           	psect	text27
  4283  0022                     __ptext27:	
  4284 ;; *************** function _Init_System *****************
  4285 ;; Defined at:
  4286 ;;		line 78 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2
  4295 ;; Tracked objects:
  4296 ;;		On entry : B00/0
  4297 ;;		On exit  : 300/100
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4300 ;;      Params:         0       0       0       0
  4301 ;;      Locals:         0       0       0       0
  4302 ;;      Temps:          0       0       0       0
  4303 ;;      Totals:         0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    1
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _Init_System
  4316  0022                     _Init_System:	
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _Init_System: [wreg+status,2]
  4320  0022  0000               	nop	;# 
  4321  0023  0064               	clrwdt	;# 
  4322                           
  4323                           ;main.c: 82: INTCON = 0;
  4324  0024  018B               	clrf	11	;volatile
  4325                           
  4326                           ;main.c: 83: OSCCON = 0X72;
  4327  0025  3072               	movlw	114
  4328  0026  1283               	bcf	3,5	;RP0=0, select bank0
  4329  0027  1303               	bcf	3,6	;RP1=0, select bank0
  4330  0028  0094               	movwf	20	;volatile
  4331                           
  4332                           ;main.c: 84: OPTION_REG = 0;
  4333  0029  0181               	clrf	1	;volatile
  4334                           
  4335                           ;main.c: 89: TRISA = 0x00;
  4336  002A  1683               	bsf	3,5	;RP0=1, select bank1
  4337  002B  0185               	clrf	5	;volatile
  4338                           
  4339                           ;main.c: 90: PORTA = 0;
  4340  002C  0186               	clrf	6	;volatile
  4341                           
  4342                           ;main.c: 91: TRISB = 0x23;
  4343  002D  3023               	movlw	35
  4344  002E  1283               	bcf	3,5	;RP0=0, select bank0
  4345  002F  0085               	movwf	5	;volatile
  4346                           
  4347                           ;main.c: 92: PORTB = 0;
  4348  0030  0186               	clrf	6	;volatile
  4349                           
  4350                           ;main.c: 93: WPUB = 0x02;
  4351  0031  3002               	movlw	2
  4352  0032  0088               	movwf	8	;volatile
  4353                           
  4354                           ;main.c: 94: TRISC = 0;
  4355  0033  1703               	bsf	3,6	;RP1=1, select bank2
  4356  0034  0185               	clrf	5	;volatile
  4357                           
  4358                           ;main.c: 95: PORTC = 0;
  4359  0035  0186               	clrf	6	;volatile
  4360                           
  4361                           ;main.c: 97: PIE1 = 2;
  4362  0036  1303               	bcf	3,6	;RP1=0, select bank0
  4363  0037  008E               	movwf	14	;volatile
  4364                           
  4365                           ;main.c: 98: PR2 = 250;
  4366  0038  30FA               	movlw	250
  4367  0039  0091               	movwf	17	;volatile
  4368                           
  4369                           ;main.c: 99: T2CON = 4;
  4370  003A  3004               	movlw	4
  4371  003B  0093               	movwf	19	;volatile
  4372                           
  4373                           ;main.c: 101: INTCON = 0XC0;
  4374  003C  30C0               	movlw	192
  4375  003D  008B               	movwf	11	;volatile
  4376                           
  4377                           ;main.c: 102: ADCON0 = 0X41;
  4378                           
  4379                           ;main.c: 103: ADON = 1;
  4380                           
  4381                           ;main.c: 104: ADCON1 = 0x00;
  4382  003E  2BDF               	ljmp	PL24	;call to abstracted procedure
  4383  003F                     __end_of_Init_System:	
  4384  003F                     __ptext23:	
  4385 ;; *************** function _WorkSleep *****************
  4386 ;; Defined at:
  4387 ;;		line 216 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 300/0
  4398 ;;		On exit  : 200/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4401 ;;      Params:         0       0       0       0
  4402 ;;      Locals:         0       0       0       0
  4403 ;;      Temps:          0       0       0       0
  4404 ;;      Totals:         0       0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    4
  4408 ;; This function calls:
  4409 ;;		_Refurbish_Sfr
  4410 ;;		_SystemEnterSleep
  4411 ;; This function is called by:
  4412 ;;		_main
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _WorkSleep
  4418  003F                     _WorkSleep:	
  4419                           
  4420                           ;main.c: 219: static unsigned char time;
  4421                           ;main.c: 221: if(B_OnOff)time = 0;
  4422                           
  4423                           ;incstack = 0
  4424                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4425  003F  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4426  0040  01B5               	clrf	WorkSleep@time
  4427                           
  4428                           ;main.c: 223: if(++time >= 125)
  4429  0041  307D               	movlw	125
  4430  0042  0AB5               	incf	WorkSleep@time,f
  4431  0043  0235               	subwf	WorkSleep@time,w
  4432  0044  1C03               	skipc
  4433  0045  0008               	return
  4434                           
  4435                           ;main.c: 224: {
  4436                           ;main.c: 225: time = 0;
  4437  0046  01B5               	clrf	WorkSleep@time
  4438                           
  4439                           ;main.c: 226: INTCON = 0;
  4440  0047  018B               	clrf	11	;volatile
  4441                           
  4442                           ;main.c: 227: PIE1 = 0;
  4443  0048  018E               	clrf	14	;volatile
  4444                           
  4445                           ;main.c: 228: PIE2 = 0;
  4446  0049  1703               	bsf	3,6	;RP1=1, select bank2
  4447  004A  0190               	clrf	16	;volatile
  4448                           
  4449                           ;main.c: 229: PIR1 = 0;
  4450  004B  1303               	bcf	3,6	;RP1=0, select bank0
  4451  004C  018D               	clrf	13	;volatile
  4452                           
  4453                           ;main.c: 230: PIR2 = 0;
  4454  004D  1703               	bsf	3,6	;RP1=1, select bank2
  4455  004E  018F               	clrf	15	;volatile
  4456                           
  4457                           ;main.c: 231: T2CON = 0;
  4458  004F  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0050  0193               	clrf	19	;volatile
  4460                           
  4461                           ;main.c: 232: ADCON1 = 0;
  4462  0051  1683               	bsf	3,5	;RP0=1, select bank1
  4463  0052  0196               	clrf	22	;volatile
  4464                           
  4465                           ;main.c: 235: ADCON0 = 0;
  4466  0053  0195               	clrf	21	;volatile
  4467                           
  4468                           ;main.c: 238: PORTA = 0x00;
  4469  0054  0186               	clrf	6	;volatile
  4470                           
  4471                           ;main.c: 239: PORTB = 0x00;
  4472  0055  1283               	bcf	3,5	;RP0=0, select bank0
  4473  0056  0186               	clrf	6	;volatile
  4474                           
  4475                           ;main.c: 240: TRISC = 0;
  4476  0057  1703               	bsf	3,6	;RP1=1, select bank2
  4477  0058  0185               	clrf	5	;volatile
  4478                           
  4479                           ;main.c: 241: PORTC = 0;
  4480  0059  0186               	clrf	6	;volatile
  4481                           
  4482                           ;main.c: 243: TRISB0 =1;
  4483  005A  1303               	bcf	3,6	;RP1=0, select bank0
  4484  005B  1405               	bsf	5,0	;volatile
  4485                           
  4486                           ;main.c: 245: RBIF = 0;
  4487  005C  100B               	bcf	11,0	;volatile
  4488                           
  4489                           ;main.c: 246: RBIE = 1;
  4490  005D  158B               	bsf	11,3	;volatile
  4491                           
  4492                           ;main.c: 247: IOCB0= 1;
  4493  005E  1409               	bsf	9,0	;volatile
  4494                           
  4495                           ;main.c: 248: PORTB;
  4496  005F  0806               	movf	6,w	;volatile
  4497                           
  4498                           ;main.c: 260: SystemEnterSleep();
  4499  0060  2097  118A         	fcall	_SystemEnterSleep
  4500                           
  4501                           ;main.c: 261: if(RAIF)
  4502  0062  1D8D               	btfss	13,3	;volatile
  4503  0063  2867               	goto	l4865
  4504                           
  4505                           ;main.c: 262: {
  4506                           ;main.c: 263: RAIF = 0;
  4507  0064  118D               	bcf	13,3	;volatile
  4508                           
  4509                           ;main.c: 264: PORTA;
  4510  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4511  0066  0806               	movf	6,w	;volatile
  4512  0067                     l4865:	
  4513                           
  4514                           ;main.c: 265: }
  4515                           ;main.c: 267: Refurbish_Sfr();
  4516  0067  237F  118A         	fcall	_Refurbish_Sfr
  4517                           
  4518                           ;main.c: 268: ADCON0 = 0X41;
  4519                           
  4520                           ;main.c: 269: ADON = 1;
  4521                           
  4522                           ;main.c: 270: ADCON1 = 0x00;
  4523  0069  2BDF               	ljmp	PL24	;call to abstracted procedure
  4524  006A                     __end_of_WorkSleep:	
  4525  006A                     __ptext28:	
  4526 ;; *************** function _CheckTouchKey *****************
  4527 ;; Defined at:
  4528 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 300/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4542 ;;      Params:         0       0       0       0
  4543 ;;      Locals:         0       0       0       0
  4544 ;;      Temps:          0       0       0       0
  4545 ;;      Totals:         0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    5
  4549 ;; This function calls:
  4550 ;;		_CheckKeyOldValue
  4551 ;;		_CheckOnceResult
  4552 ;;		_CheckValidTime
  4553 ;;		_ClearResSum
  4554 ;;		_GetTouchKeyValue
  4555 ;;		_KeyStopClear
  4556 ;;		_TurnKeyFlags
  4557 ;; This function is called by:
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _CheckTouchKey
  4564  006A                     _CheckTouchKey:	
  4565                           
  4566                           ;incstack = 0
  4567                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4568  006A  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4569  006B  2878               	goto	l1368
  4570  006C  2127  118A         	fcall	_GetTouchKeyValue
  4571  006E  3008               	movlw	8
  4572  006F  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0070  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0071  0AB4               	incf	_KeyCounter,f
  4575  0072  0234               	subwf	_KeyCounter,w
  4576  0073  1C03               	skipc
  4577  0074  2896               	goto	l4987
  4578  0075  01B4               	clrf	_KeyCounter
  4579  0076  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4580  0077  2896               	goto	l4987
  4581  0078                     l1368:	
  4582  0078  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4583  0079  2890               	goto	l4981
  4584  007A  2196  118A         	fcall	_CheckOnceResult
  4585  007C  2328  118A         	fcall	_TurnKeyFlags
  4586  007E  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4587  007F  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4588  0080  2887               	goto	l4971
  4589  0081  3002               	movlw	2
  4590  0082  1283               	bcf	3,5	;RP0=0, select bank0
  4591  0083  1303               	bcf	3,6	;RP1=0, select bank0
  4592  0084  0234               	subwf	_KeyCounter,w
  4593  0085  1C03               	skipc
  4594  0086  288C               	goto	l4979
  4595  0087                     l4971:	
  4596  0087  2312  118A         	fcall	_KeyStopClear
  4597  0089  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4598  008A  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4599  008B  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4600  008C                     l4979:	
  4601  008C  1283               	bcf	3,5	;RP0=0, select bank0
  4602  008D  1303               	bcf	3,6	;RP1=0, select bank0
  4603  008E  01B4               	clrf	_KeyCounter
  4604  008F  2896               	goto	l4987
  4605  0090                     l4981:	
  4606  0090  22AE  118A         	fcall	_CheckKeyOldValue
  4607  0092  2187  118A         	fcall	_ClearResSum
  4608  0094  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4609  0095  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4610  0096                     l4987:	
  4611  0096  2B59               	ljmp	l3757	;# 
  4612  0097                     __end_of_CheckTouchKey:	
  4613  0097                     __ptext24:	
  4614 ;; *************** function _SystemEnterSleep *****************
  4615 ;; Defined at:
  4616 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  92              2    6[BANK0 ] unsigned int 
  4621 ;;  93              2    4[BANK0 ] unsigned int 
  4622 ;;  94              2    2[BANK0 ] unsigned int 
  4623 ;;  91              1    8[BANK0 ] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 300/0
  4630 ;;		On exit  : 300/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4633 ;;      Params:         0       0       0       0
  4634 ;;      Locals:         0       7       0       0
  4635 ;;      Temps:          0       2       0       0
  4636 ;;      Totals:         0       9       0       0
  4637 ;;Total ram usage:        9 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    3
  4640 ;; This function calls:
  4641 ;;		_ClearResSum
  4642 ;;		_GetTouchKeyValue
  4643 ;;		_KeyClearOne
  4644 ;; This function is called by:
  4645 ;;		_WorkSleep
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           
  4650                           ;psect for function _SystemEnterSleep
  4651  0097                     _SystemEnterSleep:	
  4652  0097                     l1380:	
  4653                           ;incstack = 0
  4654                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4655                           
  4656  0097  0064               	clrwdt	;# 
  4657  0098  1683               	bsf	3,5	;RP0=1, select bank1
  4658  0099  1303               	bcf	3,6	;RP1=0, select bank1
  4659  009A  0181               	clrf	1	;volatile
  4660  009B  3007               	movlw	7
  4661  009C  1283               	bcf	3,5	;RP0=0, select bank0
  4662  009D  0481               	iorwf	1,f	;volatile
  4663  009E  1581               	bsf	1,3	;volatile
  4664  009F  0064               	clrwdt	;# 
  4665  00A0  300A               	movlw	10
  4666  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  4667  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  4668  00A3  0081               	movwf	1	;volatile
  4669  00A4  0064               	clrwdt	;# 
  4670  00A5  1283               	bcf	3,5	;RP0=0, select bank2
  4671  00A6  1703               	bsf	3,6	;RP1=1, select bank2
  4672  00A7  0191               	clrf	17	;volatile
  4673  00A8  0193               	clrf	19	;volatile
  4674  00A9  3002               	movlw	2
  4675  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  4676  00AB  0094               	movwf	20	;volatile
  4677  00AC  0063               	sleep	;# 
  4678  00AD  0000               	nop	;# 
  4679  00AE  0064               	clrwdt	;# 
  4680  00AF  3072               	movlw	114
  4681  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  4682  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  4683  00B2  0094               	movwf	20	;volatile
  4684  00B3  3079               	movlw	121
  4685  00B4  1703               	bsf	3,6	;RP1=1, select bank2
  4686  00B5  0093               	movwf	19	;volatile
  4687  00B6  2187  118A         	fcall	_ClearResSum
  4688  00B8  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4689  00B9  2127  118A         	fcall	_GetTouchKeyValue
  4690  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  4691  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4692  00BD  23F0  118A         	fcall	PL40	;call to abstracted procedure
  4693  00BF  1C0B               	btfss	11,0	;volatile
  4694  00C0  188B               	btfsc	11,1	;volatile
  4695  00C1  28C4               	goto	l4517
  4696  00C2  1D8D               	btfss	13,3	;volatile
  4697  00C3  28CB               	goto	l4529
  4698  00C4                     l4517:	
  4699  00C4  2187               	fcall	_ClearResSum
  4700  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  4701  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  4702  00C7  01B4               	clrf	_KeyCounter
  4703  00C8  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4704  00C9  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4705  00CA  0008               	return
  4706  00CB                     l4529:	
  4707  00CB  0850               	movf	SystemEnterSleep@92,w
  4708  00CC  3903               	andlw	3
  4709  00CD  1003               	clrc
  4710  00CE  1903               	btfsc	3,2
  4711  00CF  2921               	goto	L26
  4712  00D0  0D52               	rlf	SystemEnterSleep@91,w
  4713  00D1  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4714  00D2  0084               	movwf	4
  4715  00D3  1383               	bcf	3,7	;select IRP bank1
  4716  00D4  0800               	movf	0,w
  4717  00D5  00CE               	movwf	SystemEnterSleep@93
  4718  00D6  0A84               	incf	4,f
  4719  00D7  0800               	movf	0,w
  4720  00D8  00CF               	movwf	SystemEnterSleep@93+1
  4721  00D9  00CD               	movwf	SystemEnterSleep@94+1
  4722  00DA  084E               	movf	SystemEnterSleep@93,w
  4723  00DB  00CC               	movwf	SystemEnterSleep@94
  4724  00DC  084E               	movf	SystemEnterSleep@93,w
  4725  00DD  044F               	iorwf	SystemEnterSleep@93+1,w
  4726  00DE  1903               	btfsc	3,2
  4727  00DF  2920               	goto	l4563
  4728  00E0  0852               	movf	SystemEnterSleep@91,w
  4729  00E1  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4730  00E2  0084               	movwf	4
  4731  00E3  158A  2000  118A   	fcall	stringdir
  4732  00E6  07CC               	addwf	SystemEnterSleep@94,f
  4733  00E7  1803               	skipnc
  4734  00E8  0ACD               	incf	SystemEnterSleep@94+1,f
  4735  00E9  1003               	clrc
  4736  00EA  0D52               	rlf	SystemEnterSleep@91,w
  4737  00EB  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4738  00EC  23CA  118A         	fcall	PL14	;call to abstracted procedure
  4739  00EE  084D               	movf	SystemEnterSleep@94+1,w
  4740  00EF  024B               	subwf	??_SystemEnterSleep+1,w
  4741  00F0  1D03               	skipz
  4742  00F1  28F4               	goto	u5045
  4743  00F2  084C               	movf	SystemEnterSleep@94,w
  4744  00F3  024A               	subwf	??_SystemEnterSleep,w
  4745  00F4                     u5045:	
  4746  00F4  1C03               	skipc
  4747  00F5  2908               	goto	L25
  4748  00F6  23F0  118A         	fcall	PL40	;call to abstracted procedure
  4749  00F8                     l4543:	
  4750  00F8  0850               	movf	SystemEnterSleep@92,w
  4751  00F9  3903               	andlw	3
  4752  00FA  1D03               	btfss	3,2
  4753  00FB  28FF               	goto	l4547
  4754  00FC  0852               	movf	SystemEnterSleep@91,w
  4755  00FD  228B  118A         	fcall	_KeyClearOne
  4756  00FF                     l4547:	
  4757  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0100  3002               	movlw	2
  4759  0101  1303               	bcf	3,6	;RP1=0, select bank0
  4760  0102  1003               	clrc
  4761  0103  23EB  118A         	fcall	PL30	;call to abstracted procedure
  4762  0105  1803               	btfsc	3,0
  4763  0106  28C4               	goto	l4517
  4764  0107  28F8               	goto	l4543
  4765  0108                     L25:	
  4766  0108  0D52               	rlf	SystemEnterSleep@91,w
  4767  0109  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4768  010A  23CA  118A         	fcall	PL14	;call to abstracted procedure
  4769  010C  1003               	clrc
  4770  010D  0D52               	rlf	SystemEnterSleep@91,w
  4771  010E  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4772  010F  23B4  118A         	fcall	PL10	;call to abstracted procedure
  4773  0111  0800               	movf	0,w
  4774  0112  00CA               	movwf	??_SystemEnterSleep
  4775  0113  0A84               	incf	4,f
  4776  0114  0800               	movf	0,w
  4777  0115  00CB               	movwf	??_SystemEnterSleep+1
  4778  0116  1003               	clrc
  4779  0117  0D52               	rlf	SystemEnterSleep@91,w
  4780  0118  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4781  0119  23B4  118A         	fcall	PL10	;call to abstracted procedure
  4782  011B  084E               	movf	SystemEnterSleep@93,w
  4783  011C  0080               	movwf	0
  4784  011D  0A84               	incf	4,f
  4785  011E  084F               	movf	SystemEnterSleep@93+1,w
  4786  011F  0080               	movwf	0
  4787  0120                     l4563:	
  4788  0120  1003               	clrc
  4789  0121                     L26:	
  4790  0121  3002               	movlw	2
  4791  0122  23EB  118A         	fcall	PL30	;call to abstracted procedure
  4792  0124  1803               	btfsc	3,0
  4793  0125  2897               	goto	l1380
  4794  0126  28CB               	goto	l4529
  4795  0127                     __end_of_SystemEnterSleep:	
  4796  0127                     __ptext32:	
  4797 ;; *************** function _GetTouchKeyValue *****************
  4798 ;; Defined at:
  4799 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;		None
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  63              2    5[COMMON] unsigned int 
  4804 ;;  64              2    3[COMMON] unsigned int 
  4805 ;;  62              1    7[COMMON] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/200
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4815 ;;      Params:         0       0       0       0
  4816 ;;      Locals:         5       0       0       0
  4817 ;;      Temps:          0       0       0       0
  4818 ;;      Totals:         5       0       0       0
  4819 ;;Total ram usage:        5 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    2
  4822 ;; This function calls:
  4823 ;;		_ClearResSum
  4824 ;; This function is called by:
  4825 ;;		_CheckTouchKey
  4826 ;;		_SystemEnterSleep
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           
  4831                           ;psect for function _GetTouchKeyValue
  4832  0127                     _GetTouchKeyValue:	
  4833                           
  4834                           ;incstack = 0
  4835                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4836  0127  01F7               	clrf	GetTouchKeyValue@62
  4837  0128  01F5               	clrf	GetTouchKeyValue@63
  4838  0129  0AF5               	incf	GetTouchKeyValue@63,f
  4839  012A  01F6               	clrf	GetTouchKeyValue@63+1
  4840  012B                     l3271:	
  4841  012B  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4842  012C  2931               	goto	l3275
  4843  012D  0875               	movf	GetTouchKeyValue@63,w
  4844  012E  3903               	andlw	3
  4845  012F  1903               	btfsc	3,2
  4846  0130  297D               	goto	l3303
  4847  0131                     l3275:	
  4848  0131  1283               	bcf	3,5	;RP0=0, select bank2
  4849  0132  1703               	bsf	3,6	;RP1=1, select bank2
  4850  0133  0191               	clrf	17	;volatile
  4851  0134  0192               	clrf	18	;volatile
  4852  0135  3079               	movlw	121
  4853  0136  0093               	movwf	19	;volatile
  4854  0137  1303               	bcf	3,6	;RP1=0, select bank0
  4855  0138  1305               	bcf	5,6	;volatile
  4856  0139  1306               	bcf	6,6	;volatile
  4857  013A  0000               	nop	;# 
  4858  013B  0000               	nop	;# 
  4859  013C  0000               	nop	;# 
  4860  013D  0000               	nop	;# 
  4861  013E  0000               	nop	;# 
  4862  013F  0000               	nop	;# 
  4863  0140  0000               	nop	;# 
  4864  0141  0000               	nop	;# 
  4865  0142  1283               	bcf	3,5	;RP0=0, select bank0
  4866  0143  1303               	bcf	3,6	;RP1=0, select bank0
  4867  0144  1705               	bsf	5,6	;volatile
  4868  0145  0877               	movf	GetTouchKeyValue@62,w
  4869  0146  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4870  0147  0084               	movwf	4
  4871  0148  158A  2000  118A   	fcall	stringdir
  4872  014B  1703               	bsf	3,6	;RP1=1, select bank2
  4873  014C  0091               	movwf	17	;volatile
  4874  014D  0877               	movf	GetTouchKeyValue@62,w
  4875  014E  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4876  014F  0084               	movwf	4
  4877  0150  158A  2000  118A   	fcall	stringdir
  4878  0153  0092               	movwf	18	;volatile
  4879  0154  0000               	nop	;# 
  4880  0155  0000               	nop	;# 
  4881  0156  0000               	nop	;# 
  4882  0157  0000               	nop	;# 
  4883  0158  1283               	bcf	3,5	;RP0=0, select bank2
  4884  0159  1703               	bsf	3,6	;RP1=1, select bank2
  4885  015A  1411               	bsf	17,0	;volatile
  4886  015B  30D0               	movlw	208
  4887  015C  00F3               	movwf	GetTouchKeyValue@64
  4888  015D  3007               	movlw	7
  4889  015E  00F4               	movwf	GetTouchKeyValue@64+1
  4890  015F                     l1290:	
  4891  015F  1B91               	btfsc	17,7	;volatile
  4892  0160  296D               	goto	l3301
  4893  0161  3001               	movlw	1
  4894  0162  02F3               	subwf	GetTouchKeyValue@64,f
  4895  0163  1C03               	skipc
  4896  0164  03F4               	decf	GetTouchKeyValue@64+1,f
  4897  0165  0873               	movf	GetTouchKeyValue@64,w
  4898  0166  0474               	iorwf	GetTouchKeyValue@64+1,w
  4899  0167  1D03               	btfss	3,2
  4900  0168  295F               	goto	l1290
  4901  0169  30FF               	movlw	255
  4902  016A  1303               	bcf	3,6	;RP1=0, select bank0
  4903  016B  00B4               	movwf	_KeyCounter
  4904  016C  2987               	ljmp	l3113
  4905  016D                     l3301:	
  4906  016D  1003               	clrc
  4907  016E  0D77               	rlf	GetTouchKeyValue@62,w
  4908  016F  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4909  0170  0084               	movwf	4
  4910  0171  0816               	movf	22,w	;volatile
  4911  0172  1383               	bcf	3,7	;select IRP bank1
  4912  0173  0780               	addwf	0,f
  4913  0174  0F84               	incfsz	4,f
  4914  0175  0800               	movf	0,w
  4915  0176  1803               	skipnc
  4916  0177  0A00               	incf	0,w
  4917  0178  00FF               	movwf	127
  4918  0179  0817               	movf	23,w	;volatile
  4919  017A  077F               	addwf	127,w
  4920  017B  0080               	movwf	0
  4921  017C  0384               	decf	4,f
  4922  017D                     l3303:	
  4923  017D  3002               	movlw	2
  4924  017E  1003               	clrc
  4925  017F  0DF5               	rlf	GetTouchKeyValue@63,f
  4926  0180  0DF6               	rlf	GetTouchKeyValue@63+1,f
  4927  0181  0AF7               	incf	GetTouchKeyValue@62,f
  4928  0182  0277               	subwf	GetTouchKeyValue@62,w
  4929  0183  1C03               	skipc
  4930  0184  292B               	goto	l3271
  4931  0185  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4932  0186  0008               	return
  4933  0187                     __end_of_GetTouchKeyValue:	
  4934  0187                     __ptext33:	
  4935 ;; *************** function _ClearResSum *****************
  4936 ;; Defined at:
  4937 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  56              1    2[COMMON] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/200
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4951 ;;      Params:         0       0       0       0
  4952 ;;      Locals:         1       0       0       0
  4953 ;;      Temps:          0       0       0       0
  4954 ;;      Totals:         1       0       0       0
  4955 ;;Total ram usage:        1 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    1
  4958 ;; This function calls:
  4959 ;;		Nothing
  4960 ;; This function is called by:
  4961 ;;		_GetTouchKeyValue
  4962 ;;		_CheckTouchKey
  4963 ;;		_SystemEnterSleep
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _ClearResSum
  4969  0187                     _ClearResSum:	
  4970  0187                     l3113:	
  4971                           ;incstack = 0
  4972                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4973                           
  4974  0187  01F2               	clrf	ClearResSum@56
  4975  0188                     l3115:	
  4976  0188  1003               	clrc
  4977  0189  0D72               	rlf	ClearResSum@56,w
  4978  018A  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4979  018B  0084               	movwf	4
  4980  018C  3002               	movlw	2
  4981  018D  1383               	bcf	3,7	;select IRP bank1
  4982  018E  0180               	clrf	0
  4983  018F  0A84               	incf	4,f
  4984  0190  0180               	clrf	0
  4985  0191  0AF2               	incf	ClearResSum@56,f
  4986  0192  0272               	subwf	ClearResSum@56,w
  4987  0193  1803               	btfsc	3,0
  4988  0194  0008               	return
  4989  0195  2988               	goto	l3115
  4990  0196                     __end_of_ClearResSum:	
  4991  0196                     __ptext35:	
  4992 ;; *************** function _CheckOnceResult *****************
  4993 ;; Defined at:
  4994 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;  71              2   10[BANK0 ] unsigned int 
  4999 ;;  72              2    7[BANK0 ] unsigned int 
  5000 ;;  73              2    4[BANK0 ] unsigned int 
  5001 ;;  68              1   12[BANK0 ] unsigned char 
  5002 ;;  69              1    9[BANK0 ] unsigned char 
  5003 ;;  70              1    6[BANK0 ] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5013 ;;      Params:         0       0       0       0
  5014 ;;      Locals:         0       9       0       0
  5015 ;;      Temps:          0       4       0       0
  5016 ;;      Totals:         0      13       0       0
  5017 ;;Total ram usage:       13 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    3
  5020 ;; This function calls:
  5021 ;;		_KeyClearOne
  5022 ;;		_KeyHave
  5023 ;;		_KeyIsIn
  5024 ;; This function is called by:
  5025 ;;		_CheckTouchKey
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           
  5030                           ;psect for function _CheckOnceResult
  5031  0196                     _CheckOnceResult:	
  5032                           
  5033                           ;incstack = 0
  5034                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5035  0196  1283               	bcf	3,5	;RP0=0, select bank0
  5036  0197  1303               	bcf	3,6	;RP1=0, select bank0
  5037  0198  01D6               	clrf	CheckOnceResult@68
  5038  0199  01A4               	clrf	_KeyData	;volatile
  5039  019A  01A5               	clrf	_KeyData+1	;volatile
  5040  019B  01B3               	clrf	_KeyMaxSub
  5041  019C                     l4663:	
  5042  019C  0856               	movf	CheckOnceResult@68,w
  5043  019D  3907               	andlw	7
  5044  019E  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  5045  019F  0084               	movwf	4
  5046  01A0  158A  2000  118A   	fcall	stringdir
  5047  01A3  00D0               	movwf	CheckOnceResult@70
  5048  01A4  1003               	clrc
  5049  01A5  0D56               	rlf	CheckOnceResult@68,w
  5050  01A6  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5051  01A7  0084               	movwf	4
  5052  01A8  3003               	movlw	3
  5053  01A9                     u5285:	
  5054  01A9  0A84               	incf	4,f
  5055  01AA  1003               	clrc
  5056  01AB  1383               	bcf	3,7	;select IRP bank1
  5057  01AC  0C80               	rrf	0,f
  5058  01AD  0384               	decf	4,f
  5059  01AE  0C80               	rrf	0,f
  5060  01AF  3EFF               	addlw	-1
  5061  01B0  1D03               	skipz
  5062  01B1  29A9               	goto	u5285
  5063  01B2  1003               	clrc
  5064  01B3  0D56               	rlf	CheckOnceResult@68,w
  5065  01B4  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5066  01B5  0084               	movwf	4
  5067  01B6  0800               	movf	0,w
  5068  01B7  00D4               	movwf	CheckOnceResult@71
  5069  01B8  0A84               	incf	4,f
  5070  01B9  0800               	movf	0,w
  5071  01BA  00D5               	movwf	CheckOnceResult@71+1
  5072  01BB  0856               	movf	CheckOnceResult@68,w
  5073  01BC  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  5074  01BD  0084               	movwf	4
  5075  01BE  158A  2000  118A   	fcall	stringdir
  5076  01C1  00D3               	movwf	CheckOnceResult@69
  5077  01C2  00D1               	movwf	CheckOnceResult@72
  5078  01C3  01D2               	clrf	CheckOnceResult@72+1
  5079  01C4  0854               	movf	CheckOnceResult@71,w
  5080  01C5  07D1               	addwf	CheckOnceResult@72,f
  5081  01C6  1803               	skipnc
  5082  01C7  0AD2               	incf	CheckOnceResult@72+1,f
  5083  01C8  0855               	movf	CheckOnceResult@71+1,w
  5084  01C9  07D2               	addwf	CheckOnceResult@72+1,f
  5085  01CA  0856               	movf	CheckOnceResult@68,w
  5086  01CB  2277  118A         	fcall	_KeyIsIn
  5087  01CD  3A00               	xorlw	0
  5088  01CE  1003               	clrc
  5089  01CF  1D03               	skipz
  5090  01D0  2A2B               	goto	L29
  5091  01D1  0D56               	rlf	CheckOnceResult@68,w
  5092  01D2  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5093  01D3  0084               	movwf	4
  5094  01D4  1383               	bcf	3,7	;select IRP bank1
  5095  01D5  0800               	movf	0,w
  5096  01D6  00CE               	movwf	CheckOnceResult@73
  5097  01D7  0A84               	incf	4,f
  5098  01D8  0800               	movf	0,w
  5099  01D9  00CF               	movwf	CheckOnceResult@73+1
  5100  01DA  1003               	clrc
  5101  01DB  0D56               	rlf	CheckOnceResult@68,w
  5102  01DC  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5103  01DD  23AD  118A         	fcall	PL8	;call to abstracted procedure
  5104  01DF  0252               	subwf	CheckOnceResult@72+1,w
  5105  01E0  1D03               	skipz
  5106  01E1  29E4               	goto	u5305
  5107  01E2  084A               	movf	??_CheckOnceResult,w
  5108  01E3  0251               	subwf	CheckOnceResult@72,w
  5109  01E4                     u5305:	
  5110  01E4  1803               	skipnc
  5111  01E5  29F3               	goto	l4681
  5112  01E6  1003               	clrc
  5113  01E7  0D56               	rlf	CheckOnceResult@68,w
  5114  01E8  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5115  01E9  23AD  118A         	fcall	PL8	;call to abstracted procedure
  5116  01EB  0854               	movf	CheckOnceResult@71,w
  5117  01EC  024A               	subwf	??_CheckOnceResult,w
  5118  01ED  00D4               	movwf	CheckOnceResult@71
  5119  01EE  0855               	movf	CheckOnceResult@71+1,w
  5120  01EF  1C03               	skipc
  5121  01F0  0A55               	incf	CheckOnceResult@71+1,w
  5122  01F1  024B               	subwf	??_CheckOnceResult+1,w
  5123  01F2  2A17               	goto	L27
  5124  01F3                     l4681:	
  5125  01F3  084F               	movf	CheckOnceResult@73+1,w
  5126  01F4  0252               	subwf	CheckOnceResult@72+1,w
  5127  01F5  1D03               	skipz
  5128  01F6  29F9               	goto	u5315
  5129  01F7  084E               	movf	CheckOnceResult@73,w
  5130  01F8  0251               	subwf	CheckOnceResult@72,w
  5131  01F9                     u5315:	
  5132  01F9  1803               	skipnc
  5133  01FA  2A6F               	goto	l4727
  5134  01FB  1003               	clrc
  5135  01FC  0D56               	rlf	CheckOnceResult@68,w
  5136  01FD  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5137  01FE  23AD  118A         	fcall	PL8	;call to abstracted procedure
  5138  0200  0252               	subwf	CheckOnceResult@72+1,w
  5139  0201  1D03               	skipz
  5140  0202  2A05               	goto	u5325
  5141  0203  084A               	movf	??_CheckOnceResult,w
  5142  0204  0251               	subwf	CheckOnceResult@72,w
  5143  0205                     u5325:	
  5144  0205  1803               	skipnc
  5145  0206  2A6F               	goto	l4727
  5146  0207  1003               	clrc
  5147  0208  0D56               	rlf	CheckOnceResult@68,w
  5148  0209  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5149  020A  0084               	movwf	4
  5150  020B  084E               	movf	CheckOnceResult@73,w
  5151  020C  0080               	movwf	0
  5152  020D  0A84               	incf	4,f
  5153  020E  084F               	movf	CheckOnceResult@73+1,w
  5154  020F  0080               	movwf	0
  5155  0210  0854               	movf	CheckOnceResult@71,w
  5156  0211  024E               	subwf	CheckOnceResult@73,w
  5157  0212  00D4               	movwf	CheckOnceResult@71
  5158  0213  0855               	movf	CheckOnceResult@71+1,w
  5159  0214  1C03               	skipc
  5160  0215  0A55               	incf	CheckOnceResult@71+1,w
  5161  0216  024F               	subwf	CheckOnceResult@73+1,w
  5162  0217                     L27:	
  5163  0217  00D5               	movwf	CheckOnceResult@71+1
  5164  0218  0856               	movf	CheckOnceResult@68,w
  5165  0219  3EB6               	addlw	(low (_KeyUpShake| 0))& (0+255)
  5166  021A  0084               	movwf	4
  5167  021B  0180               	clrf	0
  5168  021C  0855               	movf	CheckOnceResult@71+1,w
  5169  021D  1903               	btfsc	3,2
  5170  021E  2A21               	goto	l4695
  5171  021F  30FF               	movlw	255
  5172  0220  2A22               	goto	L28
  5173  0221                     l4695:	
  5174  0221  0854               	movf	CheckOnceResult@71,w
  5175  0222                     L28:	
  5176  0222  00D3               	movwf	CheckOnceResult@69
  5177  0223  0233               	subwf	_KeyMaxSub,w
  5178  0224  1803               	skipnc
  5179  0225  2A29               	goto	l4701
  5180  0226  0853               	movf	CheckOnceResult@69,w
  5181  0227  00B3               	movwf	_KeyMaxSub
  5182  0228  2A69               	goto	l4725
  5183  0229                     l4701:	
  5184  0229  0AB4               	incf	_KeyCounter,f
  5185  022A  2A6F               	goto	l4727
  5186  022B                     L29:	
  5187  022B  0D56               	rlf	CheckOnceResult@68,w
  5188  022C  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5189  022D  0084               	movwf	4
  5190  022E  1383               	bcf	3,7	;select IRP bank1
  5191  022F  0800               	movf	0,w
  5192  0230  00CA               	movwf	??_CheckOnceResult
  5193  0231  0A84               	incf	4,f
  5194  0232  0800               	movf	0,w
  5195  0233  00CB               	movwf	??_CheckOnceResult+1
  5196  0234  084A               	movf	??_CheckOnceResult,w
  5197  0235  3E01               	addlw	1
  5198  0236  00CC               	movwf	??_CheckOnceResult+2
  5199  0237  084B               	movf	??_CheckOnceResult+1,w
  5200  0238  1803               	skipnc
  5201  0239  3E01               	addlw	1
  5202  023A  00CD               	movwf	??_CheckOnceResult+3
  5203  023B  0852               	movf	CheckOnceResult@72+1,w
  5204  023C  024D               	subwf	??_CheckOnceResult+3,w
  5205  023D  1D03               	skipz
  5206  023E  2A41               	goto	u5355
  5207  023F  0851               	movf	CheckOnceResult@72,w
  5208  0240  024C               	subwf	??_CheckOnceResult+2,w
  5209  0241                     u5355:	
  5210  0241  1C03               	btfss	3,0
  5211  0242  2A6F               	goto	l4727
  5212  0243  1003               	clrc
  5213  0244  0D56               	rlf	CheckOnceResult@68,w
  5214  0245  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5215  0246  0084               	movwf	4
  5216  0247  0800               	movf	0,w
  5217  0248  239B  118A         	fcall	PL4	;call to abstracted procedure
  5218  024A  1C03               	skipc
  5219  024B  2A55               	goto	l4715
  5220  024C  1003               	clrc
  5221  024D  0D56               	rlf	CheckOnceResult@68,w
  5222  024E  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5223  024F  0084               	movwf	4
  5224  0250  0800               	movf	0,w
  5225  0251  239B  118A         	fcall	PL4	;call to abstracted procedure
  5226  0253  1803               	skipnc
  5227  0254  2A61               	goto	l4719
  5228  0255                     l4715:	
  5229  0255  0856               	movf	CheckOnceResult@68,w
  5230  0256  3EB6               	addlw	(low (_KeyUpShake| 0))& (0+255)
  5231  0257  0084               	movwf	4
  5232  0258  3009               	movlw	9
  5233  0259  0A80               	incf	0,f
  5234  025A  0200               	subwf	0,w
  5235  025B  1C03               	skipc
  5236  025C  2A65               	goto	l4723
  5237  025D  0856               	movf	CheckOnceResult@68,w
  5238  025E  228B  118A         	fcall	_KeyClearOne
  5239  0260  2A6F               	goto	l4727
  5240  0261                     l4719:	
  5241  0261  0856               	movf	CheckOnceResult@68,w
  5242  0262  3EB6               	addlw	(low (_KeyUpShake| 0))& (0+255)
  5243  0263  0084               	movwf	4
  5244  0264  0180               	clrf	0
  5245  0265                     l4723:	
  5246  0265  0825               	movf	_KeyData+1,w	;volatile
  5247  0266  0424               	iorwf	_KeyData,w	;volatile
  5248  0267  1D03               	btfss	3,2
  5249  0268  2A6F               	goto	l4727
  5250  0269                     l4725:	
  5251  0269  0850               	movf	CheckOnceResult@70,w
  5252  026A  00F2               	movwf	KeyHave@59
  5253  026B  01F3               	clrf	KeyHave@59+1
  5254  026C  0856               	movf	CheckOnceResult@68,w
  5255  026D  22A0  118A         	fcall	_KeyHave
  5256  026F                     l4727:	
  5257  026F  3002               	movlw	2
  5258  0270  1283               	bcf	3,5	;RP0=0, select bank0
  5259  0271  1303               	bcf	3,6	;RP1=0, select bank0
  5260  0272  0AD6               	incf	CheckOnceResult@68,f
  5261  0273  0256               	subwf	CheckOnceResult@68,w
  5262  0274  1803               	btfsc	3,0
  5263  0275  0008               	return
  5264  0276  299C               	goto	l4663
  5265  0277                     __end_of_CheckOnceResult:	
  5266  0277                     __ptext39:	
  5267 ;; *************** function _KeyIsIn *****************
  5268 ;; Defined at:
  5269 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  45              1    wreg     unsigned char 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  45              1    3[COMMON] unsigned char 
  5274 ;;  46              1    2[COMMON] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 300/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5284 ;;      Params:         0       0       0       0
  5285 ;;      Locals:         2       0       0       0
  5286 ;;      Temps:          0       0       0       0
  5287 ;;      Totals:         2       0       0       0
  5288 ;;Total ram usage:        2 bytes
  5289 ;; Hardware stack levels used:    2
  5290 ;; Hardware stack levels required when called:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_KeyClearIn
  5295 ;;		_CheckOnceResult
  5296 ;;		_CheckKeyOldValue
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _KeyIsIn
  5302  0277                     _KeyIsIn:	
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  5306                           ;KeyIsIn@45 stored from wreg
  5307  0277  00F3               	movwf	KeyIsIn@45
  5308  0278  3907               	andlw	7
  5309  0279  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  5310  027A  0084               	movwf	4
  5311  027B  158A  2000  118A   	fcall	stringdir
  5312  027E  00F2               	movwf	KeyIsIn@46
  5313  027F  1DF3               	btfss	KeyIsIn@45,3
  5314  0280  2A85               	goto	l3099
  5315  0281  1283               	bcf	3,5	;RP0=0, select bank0
  5316  0282  1303               	bcf	3,6	;RP1=0, select bank0
  5317  0283  082F               	movf	_KeyFlag+1,w	;volatile
  5318  0284  2A88               	goto	L34
  5319  0285                     l3099:	
  5320  0285  1283               	bcf	3,5	;RP0=0, select bank0
  5321  0286  1303               	bcf	3,6	;RP1=0, select bank0
  5322  0287  082E               	movf	_KeyFlag,w	;volatile
  5323  0288                     L34:	
  5324  0288  05F2               	andwf	KeyIsIn@46,f
  5325  0289  0872               	movf	KeyIsIn@46,w
  5326  028A  0008               	return
  5327  028B                     __end_of_KeyIsIn:	
  5328  028B                     __ptext37:	
  5329 ;; *************** function _KeyClearOne *****************
  5330 ;; Defined at:
  5331 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;  49              1    wreg     unsigned char 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  49              1    2[COMMON] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5345 ;;      Params:         0       0       0       0
  5346 ;;      Locals:         1       0       0       0
  5347 ;;      Temps:          0       0       0       0
  5348 ;;      Totals:         1       0       0       0
  5349 ;;Total ram usage:        1 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    1
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_KeyClearIn
  5356 ;;		_KeyStopClear
  5357 ;;		_CheckOnceResult
  5358 ;;		_SystemEnterSleep
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _KeyClearOne
  5364  028B                     _KeyClearOne:	
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  5368                           ;KeyClearOne@49 stored from wreg
  5369  028B  00F2               	movwf	KeyClearOne@49
  5370  028C  1003               	clrc
  5371  028D  0D72               	rlf	KeyClearOne@49,w
  5372  028E  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5373  028F  0084               	movwf	4
  5374  0290  1383               	bcf	3,7	;select IRP bank1
  5375  0291  23D9  118A         	fcall	PL22	;call to abstracted procedure
  5376  0293  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5377  0294  0084               	movwf	4
  5378  0295  23D9  118A         	fcall	PL22	;call to abstracted procedure
  5379  0297  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5380  0298  0084               	movwf	4
  5381  0299  23D9               	fcall	PL22	;call to abstracted procedure
  5382  029A  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5383  029B  0084               	movwf	4
  5384  029C  0180               	clrf	0
  5385  029D  0A84               	incf	4,f
  5386  029E  0180               	clrf	0	;# 
  5387  029F  0008               	return
  5388  02A0                     __end_of_KeyClearOne:	
  5389  02A0                     __ptext36:	
  5390 ;; *************** function _KeyHave *****************
  5391 ;; Defined at:
  5392 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  58              1    wreg     unsigned char 
  5395 ;;  59              2    2[COMMON] unsigned int 
  5396 ;; Auto vars:     Size  Location     Type
  5397 ;;  58              1    4[COMMON] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0
  5402 ;; Tracked objects:
  5403 ;;		On entry : B00/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5407 ;;      Params:         2       0       0       0
  5408 ;;      Locals:         1       0       0       0
  5409 ;;      Temps:          0       0       0       0
  5410 ;;      Totals:         3       0       0       0
  5411 ;;Total ram usage:        3 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    1
  5414 ;; This function calls:
  5415 ;;		Nothing
  5416 ;; This function is called by:
  5417 ;;		_CheckOnceResult
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _KeyHave
  5423  02A0                     _KeyHave:	
  5424                           
  5425                           ;incstack = 0
  5426                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5427                           ;KeyHave@58 stored from wreg
  5428  02A0  00F4               	movwf	KeyHave@58
  5429  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  5430  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  5431  02A3  0AB4               	incf	_KeyCounter,f
  5432  02A4  01A4               	clrf	_KeyData	;volatile
  5433  02A5  01A5               	clrf	_KeyData+1	;volatile
  5434  02A6  1DF4               	btfss	KeyHave@58,3
  5435  02A7  2AAB               	goto	l3259
  5436  02A8  0872               	movf	KeyHave@59,w
  5437  02A9  00A5               	movwf	_KeyData+1	;volatile
  5438  02AA  0008               	return
  5439  02AB                     l3259:	
  5440  02AB  0872               	movf	KeyHave@59,w
  5441  02AC  00A4               	movwf	_KeyData	;volatile
  5442  02AD  0008               	return
  5443  02AE                     __end_of_KeyHave:	
  5444  02AE                     __ptext38:	
  5445 ;; *************** function _CheckKeyOldValue *****************
  5446 ;; Defined at:
  5447 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;		None
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  80              2    2[BANK0 ] unsigned int 
  5452 ;;  79              2    0[BANK0 ] unsigned int 
  5453 ;;  78              1    4[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5463 ;;      Params:         0       0       0       0
  5464 ;;      Locals:         0       5       0       0
  5465 ;;      Temps:          2       0       0       0
  5466 ;;      Totals:         2       5       0       0
  5467 ;;Total ram usage:        7 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    3
  5470 ;; This function calls:
  5471 ;;		_KeyIsIn
  5472 ;; This function is called by:
  5473 ;;		_CheckTouchKey
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _CheckKeyOldValue
  5479  02AE                     _CheckKeyOldValue:	
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5483  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  5484  02AF  3004               	movlw	4
  5485  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  5486  02B1  01CE               	clrf	CheckKeyOldValue@78
  5487  02B2  0AB2               	incf	CheckKeyOldValue@F77,f
  5488  02B3  0232               	subwf	CheckKeyOldValue@F77,w
  5489  02B4  1C03               	btfss	3,0
  5490  02B5  0008               	return
  5491  02B6  01B2               	clrf	CheckKeyOldValue@F77
  5492  02B7                     l3687:	
  5493  02B7  1003               	clrc
  5494  02B8  0D4E               	rlf	CheckKeyOldValue@78,w
  5495  02B9  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5496  02BA  0084               	movwf	4
  5497  02BB  1383               	bcf	3,7	;select IRP bank1
  5498  02BC  0800               	movf	0,w
  5499  02BD  00CA               	movwf	CheckKeyOldValue@79
  5500  02BE  0A84               	incf	4,f
  5501  02BF  0800               	movf	0,w
  5502  02C0  00CB               	movwf	CheckKeyOldValue@79+1
  5503  02C1  084E               	movf	CheckKeyOldValue@78,w
  5504  02C2  2277  118A         	fcall	_KeyIsIn
  5505  02C4  3A00               	xorlw	0
  5506  02C5  1003               	clrc
  5507  02C6  1D03               	skipz
  5508  02C7  2AFC               	goto	L33
  5509  02C8  0D4E               	rlf	CheckKeyOldValue@78,w
  5510  02C9  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5511  02CA  0084               	movwf	4
  5512  02CB  1383               	bcf	3,7	;select IRP bank1
  5513  02CC  238D  118A         	fcall	PL2	;call to abstracted procedure
  5514  02CE  1903               	skipnz
  5515  02CF  024C               	subwf	CheckKeyOldValue@80,w
  5516  02D0  1C03               	skipc
  5517  02D1  2AD8               	goto	L30
  5518  02D2  0F4C               	incfsz	CheckKeyOldValue@80,w
  5519  02D3  2AFB               	goto	l1331
  5520  02D4  0A4D               	incf	CheckKeyOldValue@80+1,w
  5521  02D5  1003               	clrc
  5522  02D6  1D03               	btfss	3,2
  5523  02D7  2AFC               	goto	L33
  5524  02D8                     L30:	
  5525  02D8  0D4E               	rlf	CheckKeyOldValue@78,w
  5526  02D9  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5527  02DA  0084               	movwf	4
  5528  02DB  238D  118A         	fcall	PL2	;call to abstracted procedure
  5529  02DD  1903               	skipnz
  5530  02DE  024C               	subwf	CheckKeyOldValue@80,w
  5531  02DF  1C03               	skipc
  5532  02E0  2AE7               	goto	L31
  5533  02E1  0F4C               	incfsz	CheckKeyOldValue@80,w
  5534  02E2  2AFB               	goto	l1331
  5535  02E3  0A4D               	incf	CheckKeyOldValue@80+1,w
  5536  02E4  1003               	clrc
  5537  02E5  1D03               	btfss	3,2
  5538  02E6  2AFC               	goto	L33
  5539  02E7                     L31:	
  5540  02E7  0D4E               	rlf	CheckKeyOldValue@78,w
  5541  02E8  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5542  02E9  0084               	movwf	4
  5543  02EA  238D  118A         	fcall	PL2	;call to abstracted procedure
  5544  02EC  1903               	skipnz
  5545  02ED  024C               	subwf	CheckKeyOldValue@80,w
  5546  02EE  1C03               	skipc
  5547  02EF  2AF6               	goto	L32
  5548  02F0  0F4C               	incfsz	CheckKeyOldValue@80,w
  5549  02F1  2AFB               	goto	l1331
  5550  02F2  0A4D               	incf	CheckKeyOldValue@80+1,w
  5551  02F3  1003               	clrc
  5552  02F4  1D03               	btfss	3,2
  5553  02F5  2AFC               	goto	L33
  5554  02F6                     L32:	
  5555  02F6  0D4E               	rlf	CheckKeyOldValue@78,w
  5556  02F7  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5557  02F8  0084               	movwf	4
  5558  02F9  23E5  118A         	fcall	PL28	;call to abstracted procedure
  5559  02FB                     l1331:	
  5560  02FB  1003               	clrc
  5561  02FC                     L33:	
  5562  02FC  0D4E               	rlf	CheckKeyOldValue@78,w
  5563  02FD  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5564  02FE  0084               	movwf	4
  5565  02FF  1383               	bcf	3,7	;select IRP bank0
  5566  0300  23D1  118A         	fcall	PL20	;call to abstracted procedure
  5567  0302  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5568  0303  23BF  118A         	fcall	PL12	;call to abstracted procedure
  5569  0305  23D1  118A         	fcall	PL20	;call to abstracted procedure
  5570  0307  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5571  0308  23BF  118A         	fcall	PL12	;call to abstracted procedure
  5572  030A  23E5  118A         	fcall	PL28	;call to abstracted procedure
  5573  030C  3002               	movlw	2
  5574  030D  0ACE               	incf	CheckKeyOldValue@78,f
  5575  030E  024E               	subwf	CheckKeyOldValue@78,w
  5576  030F  1803               	btfsc	3,0
  5577  0310  0008               	return
  5578  0311  2AB7               	goto	l3687
  5579  0312                     __end_of_CheckKeyOldValue:	
  5580  0312                     __ptext31:	
  5581 ;; *************** function _KeyStopClear *****************
  5582 ;; Defined at:
  5583 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  53              1    3[COMMON] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5597 ;;      Params:         0       0       0       0
  5598 ;;      Locals:         1       0       0       0
  5599 ;;      Temps:          0       0       0       0
  5600 ;;      Totals:         1       0       0       0
  5601 ;;Total ram usage:        1 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    2
  5604 ;; This function calls:
  5605 ;;		_KeyClearOne
  5606 ;; This function is called by:
  5607 ;;		_CheckTouchKey
  5608 ;; This function uses a non-reentrant model
  5609 ;;
  5610                           
  5611                           
  5612                           ;psect for function _KeyStopClear
  5613  0312                     _KeyStopClear:	
  5614                           
  5615                           ;incstack = 0
  5616                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5617  0312  1283               	bcf	3,5	;RP0=0, select bank0
  5618  0313  1303               	bcf	3,6	;RP1=0, select bank0
  5619  0314  01AE               	clrf	_KeyFlag	;volatile
  5620  0315  01AF               	clrf	_KeyFlag+1	;volatile
  5621  0316  01F3               	clrf	KeyStopClear@53
  5622  0317                     l3599:	
  5623  0317  1003               	clrc
  5624  0318  0D73               	rlf	KeyStopClear@53,w
  5625  0319  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5626  031A  0084               	movwf	4
  5627  031B  1383               	bcf	3,7	;select IRP bank1
  5628  031C  0180               	clrf	0
  5629  031D  0A84               	incf	4,f
  5630  031E  0180               	clrf	0
  5631  031F  0873               	movf	KeyStopClear@53,w
  5632  0320  228B  118A         	fcall	_KeyClearOne
  5633  0322  3002               	movlw	2
  5634  0323  0AF3               	incf	KeyStopClear@53,f
  5635  0324  0273               	subwf	KeyStopClear@53,w
  5636  0325  1803               	btfsc	3,0
  5637  0326  0008               	return
  5638  0327  2B17               	goto	l3599
  5639  0328                     __end_of_KeyStopClear:	
  5640  0328                     __ptext29:	
  5641 ;; *************** function _TurnKeyFlags *****************
  5642 ;; Defined at:
  5643 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5657 ;;      Params:         0       0       0       0
  5658 ;;      Locals:         0       0       0       0
  5659 ;;      Temps:          0       0       0       0
  5660 ;;      Totals:         0       0       0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    4
  5664 ;; This function calls:
  5665 ;;		_KeyClearIn
  5666 ;; This function is called by:
  5667 ;;		_CheckTouchKey
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _TurnKeyFlags
  5673  0328                     _TurnKeyFlags:	
  5674                           
  5675                           ;incstack = 0
  5676                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5677  0328  1283               	bcf	3,5	;RP0=0, select bank0
  5678  0329  1303               	bcf	3,6	;RP1=0, select bank0
  5679  032A  0825               	movf	_KeyData+1,w	;volatile
  5680  032B  0424               	iorwf	_KeyData,w	;volatile
  5681  032C  1903               	btfsc	3,2
  5682  032D  2B4C               	goto	l3747
  5683  032E  01B0               	clrf	TurnKeyFlags@F84
  5684  032F  0824               	movf	_KeyData,w	;volatile
  5685  0330  0626               	xorwf	_KeyOldData,w	;volatile
  5686  0331  1D03               	skipz
  5687  0332  2B45               	goto	l1349
  5688  0333  0825               	movf	_KeyData+1,w	;volatile
  5689  0334  0627               	xorwf	_KeyOldData+1,w	;volatile
  5690  0335  1D03               	skipz
  5691  0336  2B45               	goto	l1349
  5692  0337  3002               	movlw	2
  5693  0338  0AB1               	incf	TurnKeyFlags@F83,f
  5694  0339  0231               	subwf	TurnKeyFlags@F83,w
  5695  033A  1C03               	skipc
  5696  033B  0008               	return
  5697  033C  01B1               	clrf	TurnKeyFlags@F83
  5698  033D  0824               	movf	_KeyData,w	;volatile
  5699  033E  00AE               	movwf	_KeyFlag	;volatile
  5700  033F  0825               	movf	_KeyData+1,w	;volatile
  5701  0340  00AF               	movwf	_KeyFlag+1	;volatile
  5702  0341  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5703  0342  0008               	return
  5704  0343  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5705  0344  2B6F               	ljmp	l3233
  5706  0345                     l1349:	
  5707  0345  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5708  0346  0824               	movf	_KeyData,w	;volatile
  5709  0347  00A6               	movwf	_KeyOldData	;volatile
  5710  0348  0825               	movf	_KeyData+1,w	;volatile
  5711  0349  00A7               	movwf	_KeyOldData+1	;volatile
  5712  034A  01B1               	clrf	TurnKeyFlags@F83
  5713  034B  0008               	return
  5714  034C                     l3747:	
  5715  034C  01B1               	clrf	TurnKeyFlags@F83
  5716  034D  01A6               	clrf	_KeyOldData	;volatile
  5717  034E  01A7               	clrf	_KeyOldData+1	;volatile
  5718  034F  3002               	movlw	2
  5719  0350  0AB0               	incf	TurnKeyFlags@F84,f
  5720  0351  0230               	subwf	TurnKeyFlags@F84,w
  5721  0352  1C03               	skipc
  5722  0353  0008               	return
  5723  0354  01B0               	clrf	TurnKeyFlags@F84
  5724  0355  01AE               	clrf	_KeyFlag	;volatile
  5725  0356  01AF               	clrf	_KeyFlag+1	;volatile
  5726  0357  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5727  0358  0008               	return
  5728  0359                     __end_of_TurnKeyFlags:	
  5729  0359                     __ptext34:	
  5730 ;; *************** function _CheckValidTime *****************
  5731 ;; Defined at:
  5732 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5746 ;;      Params:         0       0       0       0
  5747 ;;      Locals:         0       0       0       0
  5748 ;;      Temps:          0       0       0       0
  5749 ;;      Totals:         0       0       0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    1
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_CheckTouchKey
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _CheckValidTime
  5762  0359                     _CheckValidTime:	
  5763  0359                     l3757:	
  5764                           ;incstack = 0
  5765                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5766                           
  5767  0359  1283               	bcf	3,5	;RP0=0, select bank0
  5768  035A  1303               	bcf	3,6	;RP1=0, select bank0
  5769  035B  082F               	movf	_KeyFlag+1,w	;volatile
  5770  035C  042E               	iorwf	_KeyFlag,w	;volatile
  5771  035D  1903               	btfsc	3,2
  5772  035E  2B6B               	goto	l3763
  5773  035F  1683               	bsf	3,5	;RP0=1, select bank1
  5774  0360  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5775  0361  1903               	skipnz
  5776  0362  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5777  0363  303A               	movlw	58
  5778  0364  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5779  0365  3098               	movlw	152
  5780  0366  1903               	skipnz
  5781  0367  0230               	subwf	CheckValidTime@F87^(0+128),w
  5782  0368  1C03               	skipc
  5783  0369  0008               	return
  5784  036A  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5785  036B                     l3763:	
  5786  036B  1683               	bsf	3,5	;RP0=1, select bank1
  5787  036C  01B0               	clrf	CheckValidTime@F87^(0+128)
  5788  036D  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5789  036E  0008               	return
  5790  036F                     __end_of_CheckValidTime:	
  5791  036F                     __ptext30:	
  5792 ;; *************** function _KeyClearIn *****************
  5793 ;; Defined at:
  5794 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  51              1    4[COMMON] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 300/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5808 ;;      Params:         0       0       0       0
  5809 ;;      Locals:         1       0       0       0
  5810 ;;      Temps:          0       0       0       0
  5811 ;;      Totals:         1       0       0       0
  5812 ;;Total ram usage:        1 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    3
  5815 ;; This function calls:
  5816 ;;		_KeyClearOne
  5817 ;;		_KeyIsIn
  5818 ;; This function is called by:
  5819 ;;		_TurnKeyFlags
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           
  5824                           ;psect for function _KeyClearIn
  5825  036F                     _KeyClearIn:	
  5826  036F                     l3233:	
  5827                           ;incstack = 0
  5828                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5829                           
  5830  036F  01F4               	clrf	KeyClearIn@51
  5831  0370                     l3239:	
  5832  0370  0874               	movf	KeyClearIn@51,w
  5833  0371  2277  118A         	fcall	_KeyIsIn
  5834  0373  3A00               	xorlw	0
  5835  0374  1D03               	skipz
  5836  0375  2B79               	goto	l3243
  5837  0376  0874               	movf	KeyClearIn@51,w
  5838  0377  228B  118A         	fcall	_KeyClearOne
  5839  0379                     l3243:	
  5840  0379  3002               	movlw	2
  5841  037A  0AF4               	incf	KeyClearIn@51,f
  5842  037B  0274               	subwf	KeyClearIn@51,w
  5843  037C  1803               	btfsc	3,0
  5844  037D  0008               	return
  5845  037E  2B70               	goto	l3239
  5846  037F                     __end_of_KeyClearIn:	
  5847  037F                     __ptext25:	
  5848 ;; *************** function _Refurbish_Sfr *****************
  5849 ;; Defined at:
  5850 ;;		line 115 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;		None
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;		None
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  1    wreg      void 
  5857 ;; Registers used:
  5858 ;;		wreg, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 200/0
  5861 ;;		On exit  : 300/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5864 ;;      Params:         0       0       0       0
  5865 ;;      Locals:         0       0       0       0
  5866 ;;      Temps:          0       0       0       0
  5867 ;;      Totals:         0       0       0       0
  5868 ;;Total ram usage:        0 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    1
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_WorkSleep
  5875 ;;		_main
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           
  5880                           ;psect for function _Refurbish_Sfr
  5881  037F                     _Refurbish_Sfr:	
  5882                           
  5883                           ;main.c: 118: PIE1 = 2;
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5887  037F  3002               	movlw	2
  5888  0380  1283               	bcf	3,5	;RP0=0, select bank0
  5889  0381  008E               	movwf	14	;volatile
  5890                           
  5891                           ;main.c: 119: PR2 = 250;
  5892  0382  30FA               	movlw	250
  5893  0383  0091               	movwf	17	;volatile
  5894                           
  5895                           ;main.c: 120: INTCON = 0XC0;
  5896  0384  30C0               	movlw	192
  5897  0385  008B               	movwf	11	;volatile
  5898                           
  5899                           ;main.c: 121: if (4 != T2CON)
  5900  0386  3004               	movlw	4
  5901  0387  0613               	xorwf	19,w	;volatile
  5902  0388  1903               	btfsc	3,2
  5903  0389  0008               	return
  5904                           
  5905                           ;main.c: 122: T2CON = 4;
  5906  038A  3004               	movlw	4
  5907  038B  0093               	movwf	19	;volatile
  5908  038C  0008               	return
  5909  038D                     __end_of_Refurbish_Sfr:	
  5910  038D                     PL2:	
  5911  038D  0800               	movf	0,w
  5912  038E  00CC               	movwf	CheckKeyOldValue@80
  5913  038F  0A84               	incf	4,f
  5914  0390  0800               	movf	0,w
  5915  0391  00CD               	movwf	CheckKeyOldValue@80+1
  5916  0392  084A               	movf	CheckKeyOldValue@79,w
  5917  0393  02CC               	subwf	CheckKeyOldValue@80,f
  5918  0394  084B               	movf	CheckKeyOldValue@79+1,w
  5919  0395  1C03               	skipc
  5920  0396  03CD               	decf	CheckKeyOldValue@80+1,f
  5921  0397  02CD               	subwf	CheckKeyOldValue@80+1,f
  5922  0398  3000               	movlw	0
  5923  0399  024D               	subwf	CheckKeyOldValue@80+1,w
  5924  039A  3402               	retlw	2
  5925  039B                     __end_ofPL2:	
  5926  039B                     PL4:	
  5927  039B  00CA               	movwf	??_CheckOnceResult
  5928  039C  0A84               	incf	4,f
  5929  039D  0800               	movf	0,w
  5930  039E  00CB               	movwf	??_CheckOnceResult+1
  5931  039F  0853               	movf	CheckOnceResult@69,w
  5932  03A0  074A               	addwf	??_CheckOnceResult,w
  5933  03A1  00CC               	movwf	??_CheckOnceResult+2
  5934  03A2  084B               	movf	??_CheckOnceResult+1,w
  5935  03A3  1803               	skipnc
  5936  03A4  0A4B               	incf	??_CheckOnceResult+1,w
  5937  03A5  00CD               	movwf	??_CheckOnceResult+3
  5938  03A6  0855               	movf	CheckOnceResult@71+1,w
  5939  03A7  024D               	subwf	??_CheckOnceResult+3,w
  5940  03A8  1D03               	skipz
  5941  03A9  0008               	return
  5942  03AA  0854               	movf	CheckOnceResult@71,w
  5943  03AB  024C               	subwf	??_CheckOnceResult+2,w
  5944  03AC  0008               	return
  5945  03AD                     __end_ofPL4:	
  5946  03AD                     PL8:	
  5947  03AD  0084               	movwf	4
  5948  03AE  0800               	movf	0,w
  5949  03AF  00CA               	movwf	??_CheckOnceResult
  5950  03B0  0A84               	incf	4,f
  5951  03B1  0800               	movf	0,w
  5952  03B2  00CB               	movwf	??_CheckOnceResult+1
  5953  03B3  0008               	return
  5954  03B4                     __end_ofPL8:	
  5955  03B4                     PL10:	
  5956  03B4  0084               	movwf	4
  5957  03B5  084A               	movf	??_SystemEnterSleep,w
  5958  03B6  0080               	movwf	0
  5959  03B7  0A84               	incf	4,f
  5960  03B8  084B               	movf	??_SystemEnterSleep+1,w
  5961  03B9  0080               	movwf	0
  5962  03BA  1003               	clrc
  5963  03BB  0D52               	rlf	SystemEnterSleep@91,w
  5964  03BC  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5965  03BD  0084               	movwf	4
  5966  03BE  0008               	return
  5967  03BF                     __end_ofPL10:	
  5968  03BF                     PL12:	
  5969  03BF  0084               	movwf	4
  5970  03C0  0874               	movf	??_CheckKeyOldValue,w
  5971  03C1  0080               	movwf	0
  5972  03C2  0A84               	incf	4,f
  5973  03C3  0875               	movf	??_CheckKeyOldValue+1,w
  5974  03C4  0080               	movwf	0
  5975  03C5  1003               	clrc
  5976  03C6  0D4E               	rlf	CheckKeyOldValue@78,w
  5977  03C7  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5978  03C8  0084               	movwf	4
  5979  03C9  0008               	return
  5980  03CA                     __end_ofPL12:	
  5981  03CA                     PL14:	
  5982  03CA  0084               	movwf	4
  5983  03CB  0800               	movf	0,w
  5984  03CC  00CA               	movwf	??_SystemEnterSleep
  5985  03CD  0A84               	incf	4,f
  5986  03CE  0800               	movf	0,w
  5987  03CF  00CB               	movwf	??_SystemEnterSleep+1
  5988  03D0  0008               	return
  5989  03D1                     __end_ofPL14:	
  5990  03D1                     PL20:	
  5991  03D1  0800               	movf	0,w
  5992  03D2  00F4               	movwf	??_CheckKeyOldValue
  5993  03D3  0A84               	incf	4,f
  5994  03D4  0800               	movf	0,w
  5995  03D5  00F5               	movwf	??_CheckKeyOldValue+1
  5996  03D6  1003               	clrc
  5997  03D7  0D4E               	rlf	CheckKeyOldValue@78,w
  5998  03D8  0008               	return
  5999  03D9                     __end_ofPL20:	
  6000  03D9                     PL22:	
  6001  03D9  0180               	clrf	0
  6002  03DA  0A84               	incf	4,f
  6003  03DB  0180               	clrf	0
  6004  03DC  1003               	clrc
  6005  03DD  0D72               	rlf	KeyClearOne@49,w
  6006  03DE  0008               	return
  6007  03DF                     __end_ofPL22:	
  6008  03DF                     PL24:	
  6009  03DF  3041               	movlw	65
  6010  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  6011  03E1  0095               	movwf	21	;volatile
  6012  03E2  1415               	bsf	21,0	;volatile
  6013  03E3  0196               	clrf	22	;volatile
  6014  03E4  0008               	return
  6015  03E5                     __end_ofPL24:	
  6016  03E5                     PL28:	
  6017  03E5  084A               	movf	CheckKeyOldValue@79,w
  6018  03E6  0080               	movwf	0
  6019  03E7  0A84               	incf	4,f
  6020  03E8  084B               	movf	CheckKeyOldValue@79+1,w
  6021  03E9  0080               	movwf	0
  6022  03EA  0008               	return
  6023  03EB                     __end_ofPL28:	
  6024  03EB                     PL30:	
  6025  03EB  0DD0               	rlf	SystemEnterSleep@92,f
  6026  03EC  0DD1               	rlf	SystemEnterSleep@92+1,f
  6027  03ED  0AD2               	incf	SystemEnterSleep@91,f
  6028  03EE  0252               	subwf	SystemEnterSleep@91,w
  6029  03EF  0008               	return
  6030  03F0                     __end_ofPL30:	
  6031  03F0                     PL40:	
  6032  03F0  01D2               	clrf	SystemEnterSleep@91
  6033  03F1  01D0               	clrf	SystemEnterSleep@92
  6034  03F2  0AD0               	incf	SystemEnterSleep@92,f
  6035  03F3  01D1               	clrf	SystemEnterSleep@92+1
  6036  03F4  0008               	return
  6037  03F5                     __end_ofPL40:	
  6038                           
  6039                           	psect	text40
  6040  07E1                     __ptext40:	
  6041 ;; *************** function _Isr_Timer *****************
  6042 ;; Defined at:
  6043 ;;		line 194 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 300/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6057 ;;      Params:         0       0       0       0
  6058 ;;      Locals:         0       0       0       0
  6059 ;;      Temps:          2       0       0       0
  6060 ;;      Totals:         2       0       0       0
  6061 ;;Total ram usage:        2 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; This function calls:
  6064 ;;		Nothing
  6065 ;; This function is called by:
  6066 ;;		Interrupt level 1
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _Isr_Timer
  6072  07E1                     _Isr_Timer:	
  6073                           
  6074                           ;main.c: 196: if(TMR2IF)
  6075  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  6076  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  6077  07E3  1C8D               	btfss	13,1	;volatile
  6078  07E4  2FF4               	goto	i1l4155
  6079                           
  6080                           ;main.c: 197: {
  6081                           ;main.c: 198: TMR2IF = 0;
  6082  07E5  108D               	bcf	13,1	;volatile
  6083                           
  6084                           ;main.c: 199: if(++MainTime >= 32)
  6085  07E6  3020               	movlw	32
  6086  07E7  0AC7               	incf	_MainTime,f	;volatile
  6087  07E8  0247               	subwf	_MainTime,w	;volatile
  6088  07E9  1C03               	skipc
  6089  07EA  2FF5               	goto	i1l970
  6090                           
  6091                           ;main.c: 200: {
  6092                           ;main.c: 201: MainTime = 0;
  6093  07EB  01C7               	clrf	_MainTime	;volatile
  6094                           
  6095                           ;main.c: 202: B_MainLoop = 1;
  6096  07EC  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  6097                           
  6098                           ;main.c: 203: if(++count1s >= 250)
  6099  07ED  30FA               	movlw	250
  6100  07EE  0AC6               	incf	_count1s,f
  6101  07EF  0246               	subwf	_count1s,w
  6102  07F0  1C03               	skipc
  6103  07F1  2FF5               	goto	i1l970
  6104                           
  6105                           ;main.c: 204: {
  6106                           ;main.c: 205: count1s = 0;
  6107  07F2  01C6               	clrf	_count1s
  6108  07F3  2FF5               	goto	i1l970
  6109  07F4                     i1l4155:	
  6110                           
  6111                           ;main.c: 209: else
  6112                           ;main.c: 210: {
  6113                           ;main.c: 211: PIR1 = 0;
  6114  07F4  018D               	clrf	13	;volatile
  6115  07F5                     i1l970:	
  6116  07F5  0871               	movf	??_Isr_Timer+1,w
  6117  07F6  008A               	movwf	10
  6118  07F7  0E70               	swapf	??_Isr_Timer^(0+-128),w
  6119  07F8  0083               	movwf	3
  6120  07F9  0EFE               	swapf	126,f
  6121  07FA  0E7E               	swapf	126,w
  6122  07FB  0009               	retfie
  6123  07FC                     __end_of_Isr_Timer:	
  6124  007E                     btemp	set	126	;btemp
  6125  007E                     wtemp0	set	126
  6126                           
  6127                           	psect	intentry
  6128  0004                     __pintentry:	
  6129                           ;incstack = 0
  6130                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  6131                           
  6132  0004                     interrupt_function:	
  6133  007E                     saved_w	set	btemp
  6134  0004  00FE               	movwf	btemp
  6135  0005  0E03               	swapf	3,w
  6136  0006  00F0               	movwf	??_Isr_Timer
  6137  0007  080A               	movf	10,w
  6138  0008  00F1               	movwf	??_Isr_Timer+1
  6139  0009  118A  2FE1         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         68
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      78
    BANK1            80      4      28
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    _ADC_Sample->_ledShow
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12506
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _ledShow
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     371
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                              2 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _ledShow
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
       _ledShow
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
         _ledShow
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      1C       6       35.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4E       4       97.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76       9        0.0%
ABS                  0      0      76       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 12 17:32:25 2024

                        pc 0002                         PL2 038D                         PL4 039B  
                       PL6 0783                         PL8 03AD              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03B4                        PL20 03D1                        PL12 03BF  
                      PL30 03EB                        PL22 03D9                        PL14 03CA  
                      PL40 03F0                        PL32 07AB                        PL24 03DF  
                      PL16 0792                        PL34 0E06                        PL26 07A4  
                      PL18 079B                        PL36 07B0                        PL28 03E5  
                      PL38 07B5                        l995 05E3                        l989 05A7  
                      l999 0629                        _RA0 0430                        _RA1 0431  
                      _RA3 0433                        _RA4 0434                        _RB4 0034  
                      _RB6 0036                        _PR2 0011        __size_of_ADC_Sample 00DA  
                      fsr0 0004                        indf 0000          ?_GetTouchKeyValue 0070  
                     S5065 07B9   __end_of_Table_KeyChannel 0821         ??_GetTouchKeyValue 0073  
             ___ftdiv@cntr 0059               ___ftdiv@sign 005E                       l1011 065A  
                     l1021 067B                       l1013 0660                       l1031 069E  
                     l1023 0683                       l1015 0669                       l1007 064E  
                     l1033 06A4                       l1025 0689                       l1017 066F  
                     l1009 0654                       l1027 068F                       l1019 0675  
                     l1029 0695                       l1038 06B2                       l1066 0EF7  
                     l1410 0FC1                       l1331 02FB                       l1068 0EF9  
                     l1164 0E3F                       l1093 0713                       l1088 0E8C  
                     l3113 0187                       l1290 015F                       l3115 0188  
                     l1099 0731                       l1380 0097                       l3301 016D  
                     l1349 0345                       l3303 017D                       l1368 0078  
                     l3233 036F                       l1609 047D                       l5001 0E1B  
                     l3243 0379                       l1555 0534                       l5003 0E1E  
                     l1661 0EB0                       l4061 0E86                       l4045 0E75  
                     l5013 0E2C                       l3271 012B                       l3239 0370  
                     l1567 0558                       l5023 0E3C                       l5015 0E2F  
                     l4049 0E77                       l3099 0285                       l3259 02AB  
                     l3275 0131                       l3363 0EBD                       l3371 0EC3  
                     l4059 0E85                       l4323 057B                       l4403 077E  
                     l3349 0EAA                       l4333 0586                       l4325 057D  
                     l4441 0538                       l4273 06AA                       l4345 058F  
                     l4409 0FF0                       l3379 0ED7                       l4451 0556  
                     l4443 053B                       l4291 06D4                       l4283 06C2  
                     l4371 05DF                       l4347 0591                       l4339 0587  
                     l4701 0229                       l4517 00C4                       l4453 054D  
                     l4445 0540                       l4381 062D                       l4365 05CC  
                     l4357 05B1                       l4429 0FD7                       l4605 0F62  
                     l4543 00F8                       l4447 0548                       l4287 06CB  
                     l4279 06B6                       l4631 0FB3                       l4529 00CB  
                     l3497 0E90                       l4801 0505                       l4297 06DF  
                     l4369 05D7                       l4625 0FAB                       l4617 0F96  
                     l4393 0772                       l4723 0265                       l4715 0255  
                     l3763 036B                       l3747 034C                       l3931 0DE1  
                     l3923 0DD5                       l4547 00FF                       l4563 0120  
                     l4299 06EB                       l4635 0FB7                       l4627 0FAD  
                     l4643 075C                       l4725 0269                       l3757 0359  
                     l3933 0DE3                       l4733 046F                       l4805 0513  
                     l4637 0FB8                       l4469 0744                       l4477 0757  
                     l4581 0715                       l4573 070E                       l3687 02B7  
                     l4719 0261                       l4727 026F                       l4663 019C  
                     l3599 0317                       l3943 0DF0                       l3927 0DDA  
                     l4831 0F51                       l4575 0710                       l4655 0770  
                     l4681 01F3                       l3953 0DFF                       l4657 0771  
                     l4649 0765                       l4921 042F                       l3947 0DF5  
                     l3955 0E01                       l4819 0F3A                       l4907 0F23  
                     l4755 0490                       l4771 04CC                       l4587 072F  
                     l4931 0443                       l3957 0E04                       l4773 04D1  
                     l4589 0734                       l4941 0456                       l4933 0444  
                     l4695 0221                       l4943 0457                       l4865 0067  
                     l4793 04F7                       l4971 0087                       l4947 045C  
                     l4981 0090                       l4877 0EE1                       l4789 04EF  
                     l4895 0F11                       l4799 04FB                       l4889 0EFC  
                     l4979 008C                       l4987 0096                       l4995 0E12  
                     _ADON 04A8                       _CHS4 04B6                       _PIE1 000E  
                     _PIE2 0110                       u5045 00F4                       u5305 01E4  
                     u5315 01F9                       u6027 0577                       _RAIF 006B  
                     u5325 0205                       u6037 06ED                       _INTF 0059  
                     _RBIE 005B                       _RBIF 0058                       u5185 0F87  
                     u5355 0241                       u5435 049E                       u5285 01A9  
                     u4815 061E                       u5465 04D4                       _PIR1 000D  
                     _PIR2 010F                       u5555 0F43                       u4835 0636  
                     u4765 05D2                       u4775 05DD                       u4975 074A  
                     _TMR0 0081                       _WPUB 0008                       _main 0E0B  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       btemp 007E  
            ?_KeyStopClear 0070                       start 000B               _TurnKeyFlags 0328  
          __end_of_KeyIsIn 028B            __end_of_KeyHave 02AE               ___fttol@exp1 006B  
            ??_Init_System 0072               ___fttol@lval 0067            TurnKeyFlags@F83 0031  
          TurnKeyFlags@F84 0030                      ?_main 0070            __end_of___lbdiv 0EBF  
          __end_of___lbmod 0EDB            __end_of___ftdiv 04C3            __end_of___fttol 051C  
                    _IOCB0 0048                      _T2CON 0013   __end_of_SystemEnterSleep 0127  
          __end_of___lwdiv 0F56            __end_of___lwmod 075C                      i1l970 07F5  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 0FFC                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 1000            __end_of_chrgCtr 0E90        ___lmul@multiplicand 004E  
      __end_of_KeyClearOne 02A0            __end_of_ledShow 06F4                 _KeyClearIn 036F  
           fanCtr@fan_temp 0058              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 077E                _ClearResSum 0187  
               _KeyCounter 0034                 _KeyOldData 0026            __end_of_pwmStop 0783  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 0461            ___lbdiv@divisor 0072                 _KeyUpShake 00B6  
          ___lbdiv@counter 0074            __initialization 000D               __end_of_main 0E66  
                   ??_main 0078              ___fttol@sign1 0066        __end_of_Init_System 003F  
                   _ADCON0 0095                     _ADCON1 0096                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 056A                     _GODONE 04A9  
                   i1l4155 07F4                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 052C         __size_of_KeyServer 0045                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
             ??_ADC_Sample 0074                     _TRISB0 0028                     _TRISB6 002E  
                ??_KeyIsIn 0072                  ??_KeyHave 0074              ClearResSum@56 0072  
       __size_of_Isr_Timer 001B  __size_of_CheckKeyOldValue 0064                     ___lmul 0FBD  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0F56  
                ??___lbdiv 0073                  ??___lbmod 0073                  ??___ftdiv 0056  
                ??___fttol 0063                     _ledCnt 003C                  ??___lwdiv 0076  
                ??___lwmod 0076               _wuhuaKeyFlag 003A                  ??_fanInit 0072  
                ??_fanStop 0072                _KeyClearOne 028B                  ??_chrgCtr 0077  
                   _result 00B2                  ??_ledShow 0072           __end_of_numArray 0813  
            _Table_KeyFalg 0813              _Table_KeyDown 081B               __pdataCOMMON 007B  
       __end_of_ADC_Sample 0644                     saved_w 007E     __size_of_CheckTouchKey 002D  
                ??_pwmInit 0072                  ??_pwmStop 0072                ?_KeyClearIn 0070  
                ??_workCtr 0078            _CheckOnceResult 0196           ___lbdiv@dividend 0073  
         __end_of_wuhuaCtr 0772            ___lbmod@divisor 0072    __end_of__initialization 001F  
          ___lbmod@counter 0075         __size_of_WorkSleep 002B          CheckOnceResult@70 0050  
        CheckOnceResult@71 0054          CheckOnceResult@72 0051          CheckOnceResult@73 004E  
        CheckOnceResult@68 0056          CheckOnceResult@69 0053                 ___ftdiv@f1 0053  
               ___ftdiv@f2 0050                 ___ftdiv@f3 005A                 ___fttol@f1 005F  
           __pcstackCOMMON 0070               __pidataBANK0 0000                _Init_System 0022  
               __end_ofPL2 039B                 __end_ofPL4 03AD                 __end_ofPL6 0792  
               __end_ofPL8 03B4           ___lbdiv@quotient 0075          __end_of_KeyServer 0E06  
               ___lwtoft@c 004D       __end_of_KeyStopClear 0328          __end_of_Isr_Timer 07FC  
               _fanKeyFlag 003B         __size_of_keyLedCtr 0044                 __pbssBANK0 0020  
               __pbssBANK1 00A0  __size_of_GetTouchKeyValue 0060               _chrgFullTime 0041  
            _CheckTouchKey 006A                 __pmaintext 0E0B                    ?___lmul 004A  
                  ?_fanCtr 0070                 __pintentry 0004        __size_of_KeyClearIn 0010  
           ___lmul@product 0072                  ?___ftpack 0072          __end_of_WorkSleep 006A  
                ?___lwtoft 004D          ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0277  
                  _KEYCON0 0111                    _KEYCON1 0112                    _KEYCON2 0113  
               _curBatStep 0038         ??_SystemEnterSleep 004A                    _B_OnOff 03C5  
                  _PWMD01H 001E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D       __end_of_Table_KeyCap 081F  
               __stringtab 0800               ?_ClearResSum 0070                    _KeyData 0024  
                  _KeyFlag 002E                    _KeyIsIn 0277                    _KeyHave 02A0  
           ?_CheckTouchKey 0070            ADC_Sample@adldo 0073            ADC_Sample@admax 0053  
          ADC_Sample@admin 0051            ADC_Sample@adsum 004D           _CheckKeyOldValue 02AE  
                  ___lbdiv 0EA4            __size_of___lmul 0033                    ___lbmod 0EBF  
                  ___ftdiv 0461            __size_of_fanCtr 0067                    ___fttol 04C3  
                  ___lwdiv 0F2C                    ___lwmod 0738          __end_of_keyLedCtr 0738  
                  _b_kover 03C4                    _fanInit 0FF0                    _fanDuty 0045  
                  _fanStop 0FFC                 ??___ftpack 004A                    _chrgCtr 0E66  
                  __ptext1 03F5                    __ptext2 075C                    __ptext3 077E  
                  __ptext4 0772                    __ptext5 06F4                    __ptext6 0738  
                  __ptext7 0F56                    __ptext8 0FFC                    __ptext9 0FF0  
               _lowBatLock 003F                    _ledShow 0644                 _lowBatTime 003E  
                ?_wuhuaCtr 0070                 ??___lwtoft 0077                    _count1s 0046  
               _lowFanTime 003D                 _setBatStep 0EDB                    _pwmInit 0772  
                  _pwmStop 077E    __size_of_CheckValidTime 0016                    clrloop0 0DBA  
                  _workCtr 03F5       end_of_initialization 001F              _Refurbish_Sfr 037F  
               _showBatLed 0E90               _KeyOldValue0 00A8               _KeyOldValue1 0020  
             _KeyOldValue2 00A4      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0052  
       SystemEnterSleep@92 0050         SystemEnterSleep@93 004E         SystemEnterSleep@94 004C  
             ?_KeyClearOne 0070                 _showNumShi 007B               _KeyReference 00A0  
               ??_wuhuaCtr 0072          CheckValidTime@F87 00B0           ?_CheckOnceResult 0070  
         ___lbmod@dividend 0074                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___lbmod@rem 0076                ___ftdiv@exp 005D            ??_CheckTouchKey 0078  
             _KeyStopClear 0312           _GetTouchKeyValue 0127             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 0FF0             __end_of_fanCtr 0FBD  
       __end_of_KeyClearIn 037F              __pidataCOMMON 0000              WorkSleep@time 0035  
                _KeyMaxSub 0033                  _KeyResSum 00AC                __end_ofPL10 03BF  
              __end_ofPL20 03D9                __end_ofPL12 03CA                __end_ofPL30 03F0  
              __end_ofPL22 03DF                __end_ofPL14 03D1                __end_ofPL40 03F5  
              __end_ofPL32 07B0                __end_ofPL24 03E5                __end_ofPL16 079B  
              __end_ofPL34 0E0B                __end_ofPL26 07AB                __end_ofPL18 07A4  
              __end_ofPL36 07B5                __end_ofPL28 03EB                __end_ofPL38 07B9  
      start_initialization 000D                  _KeyServer 0DC1                ?_setBatStep 0070  
                _Isr_Timer 07E1          workCtr@power_temp 00B8       __size_of_ClearResSum 000F  
            ?_TurnKeyFlags 0070                ?_showBatLed 0070                   ??___lmul 0072  
                 ??_fanCtr 0078          ADC_Sample@ad_temp 0055                __pdataBANK0 006D  
             _Table_KeyCap 081D          __size_of___ftpack 003E                __pbssCOMMON 0079  
              _fanOverTime 0043                 ?_KeyServer 0070                  ___latbits 0001  
        __size_of___lwtoft 0010              __pcstackBANK0 004A              __pcstackBANK1 00B8  
                _WorkSleep 003F             _CheckValidTime 0359   __end_of_CheckKeyOldValue 0312  
               ?_Isr_Timer 0070        KeyServer@KeyOldFlag 0036                   ?_KeyIsIn 0070  
                 ?_KeyHave 0072  __size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072  
           ??_TurnKeyFlags 0075                  __pnvBANK0 006C           ___lwdiv@dividend 0074  
      __size_of_setBatStep 0051                   ?___lbdiv 0072                   ?___lbmod 0072  
                 ?___ftdiv 0050                   ?___fttol 005F                   ?___lwdiv 0072  
                 ?___lwmod 0072                   ?_fanInit 0070                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 002A                  __pstrings 0800  
                __pswtext1 07B9                   ?_ledShow 0070       __size_of_KeyClearOne 0015  
                _keyLedCtr 06F4                  _firstLock 0040     __end_of_CheckValidTime 036F  
                _firstTime 006C          __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070  
           ADC_Sample@adch 004B                   ?_pwmInit 0070                   ?_pwmStop 0070  
         ___lwdiv@quotient 004B        __size_of_showBatLed 0014                   ?_workCtr 0070  
              ADC_Sample@i 004C                ADC_Sample@j 004A                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 0DB9  
           KeyStopClear@53 0073        CheckKeyOldValue@F77 0032                  _showNumGe 006D  
              __stringbase 0805       __size_of_Init_System 001D      __end_of_Table_KeyFalg 081B  
    __end_of_Table_KeyDown 081D                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0187  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004A  
                _wuhuaFlag 0079                ??_Isr_Timer 0070                   _MainTime 0047  
               _ADC_Sample 056A           __size_of_KeyIsIn 0014           __size_of_KeyHave 000E  
         _Table_KeyChannel 081F           __size_of___lbdiv 001B           __size_of___lbmod 001C  
         __size_of___ftdiv 0062           __size_of___fttol 0059           __size_of___lwdiv 002A  
         __size_of___lwmod 0024                   ___ftpack 052C           __size_of_fanInit 000C  
       __end_of__stringtab 0806           __size_of_fanStop 0004           __size_of_chrgCtr 002A  
                 ___lwtoft 051C                   _b_kover1 03C3                   _b_ksleep 03C0  
         __size_of_ledShow 00B0       __end_of_TurnKeyFlags 0359                   _fanValue 00B4  
                 _adresult 0048               ??_setBatStep 0076                   _chrgFlag 0042  
              ??_WorkSleep 0078            ___lwdiv@divisor 0072            ___lwdiv@counter 004A  
                 __ptext10 0FBD                   __ptext11 056A                   __ptext20 0E90  
                 __ptext12 0644                   __ptext21 0EBF                   __ptext13 051C  
                 __ptext30 036F                   __ptext22 0EA4                   __ptext14 04C3  
                 __ptext31 0312                   __ptext23 003F                   __ptext15 0461  
                 __ptext40 07E1                   __ptext32 0127                   __ptext24 0097  
                 __ptext16 052C                   __ptext33 0187                   __ptext25 037F  
                 __ptext17 0EDB                   __ptext34 0359                   __ptext26 0DC1  
                 __ptext18 0F2C                   __ptext35 0196                   __ptext27 0022  
                 __ptext19 0E66                   __ptext36 02A0                   __ptext28 006A  
                 __ptext37 028B                   __ptext29 0328                   __ptext38 02AE  
                 __ptext39 0277           __size_of_pwmInit 000C           __size_of_pwmStop 0005  
             _shanshuoTime 002C                   _count10s 0044           __size_of_workCtr 006C  
 __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075  
       GetTouchKeyValue@64 0073              __size_of_main 005B           _SystemEnterSleep 0097  
    __end_of_CheckTouchKey 0097                   _numArray 0806               ??_showBatLed 0077  
       CheckKeyOldValue@80 004C         CheckKeyOldValue@78 004E         CheckKeyOldValue@79 004A  
                 _test_adc 0037         __end_of_setBatStep 0F2C                   _power_ad 0028  
                 _workStep 007A                   _wuhuaCtr 075C                ??_keyLedCtr 0077  
        ?_CheckKeyOldValue 0070         __end_of_showBatLed 0EA4                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0073                  stringcode 0800                _showBatStep 0039  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0057                 _OPTION_REG 0001  
          ___lwmod@divisor 0072            ___lwmod@counter 0076                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0072               KeyClearIn@51 0074  
    __end_of_Refurbish_Sfr 038D        __end_of_ClearResSum 0196          ??_CheckOnceResult 004A  
