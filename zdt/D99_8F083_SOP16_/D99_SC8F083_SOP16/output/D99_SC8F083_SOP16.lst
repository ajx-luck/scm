

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Dec 25 15:18:11 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text16,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text25,local,class=CODE,merge=1,delta=2
    22                           	psect	text26,local,class=CODE,merge=1,delta=2
    23                           	psect	text39,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  0000                     __pidataBANK0:	
    66                           
    67                           	psect	strings
    68  0828                     __pstrings:	
    69  0828                     stringtab:	
    70  0828                     __stringtab:	
    71  0828                     stringcode:	
    72                           ;	String table - string pointers are 1 byte each
    73                           
    74  0828                     stringdir:	
    75  0828  3008               	movlw	high stringdir
    76  0829  008A               	movwf	10
    77  082A  0804               	movf	4,w
    78  082B  0A84               	incf	4,f
    79  082C  0782               	addwf	2,f
    80  082D                     __stringbase:	
    81  082D  3400               	retlw	0
    82  082E                     __end_of__stringtab:	
    83  082E                     _numArray:	
    84  082E  343F               	retlw	63
    85  082F  3406               	retlw	6
    86  0830  345B               	retlw	91
    87  0831  344F               	retlw	79
    88  0832  3466               	retlw	102
    89  0833  346D               	retlw	109
    90  0834  347D               	retlw	125
    91  0835  3407               	retlw	7
    92  0836  347F               	retlw	127
    93  0837  346F               	retlw	111
    94  0838  3471               	retlw	113
    95  0839  3479               	retlw	121
    96  083A  3450               	retlw	80
    97  083B                     __end_of_numArray:	
    98  083B                     _Table_KeyFalg:	
    99  083B  3401               	retlw	1
   100  083C  3402               	retlw	2
   101  083D  3404               	retlw	4
   102  083E  3408               	retlw	8
   103  083F  3410               	retlw	16
   104  0840  3420               	retlw	32
   105  0841  3440               	retlw	64
   106  0842  3480               	retlw	128
   107  0843                     __end_of_Table_KeyFalg:	
   108  0843                     _Table_KeyDown:	
   109  0843  340A               	retlw	10
   110  0844  340A               	retlw	10
   111  0845                     __end_of_Table_KeyDown:	
   112  0845                     _Table_KeyCap:	
   113  0845  3402               	retlw	2
   114  0846  3402               	retlw	2
   115  0847                     __end_of_Table_KeyCap:	
   116  0847                     _Table_KeyChannel:	
   117  0847  3442               	retlw	66
   118  0848  3443               	retlw	67
   119  0849                     __end_of_Table_KeyChannel:	
   120                           
   121                           	psect	nvBANK0
   122  006B                     __pnvBANK0:	
   123  006B                     _firstLock:	
   124  006B                     	ds	1
   125  006C                     _firstTime:	
   126  006C                     	ds	1
   127  001E                     _PWMD01H	set	30
   128  001D                     _PWMCON2	set	29
   129  001A                     _PWMD1L	set	26
   130  0019                     _PWMD0L	set	25
   131  0018                     _PWMTH	set	24
   132  0017                     _PWMTL	set	23
   133  0016                     _PWMCON1	set	22
   134  0015                     _PWMCON0	set	21
   135  0014                     _OSCCON	set	20
   136  0013                     _T2CON	set	19
   137  0011                     _PR2	set	17
   138  000E                     _PIE1	set	14
   139  000D                     _PIR1	set	13
   140  000B                     _INTCON	set	11
   141  0008                     _WPUB	set	8
   142  0006                     _PORTB	set	6
   143  0005                     _TRISB	set	5
   144  0001                     _OPTION_REG	set	1
   145  0069                     _TMR2IF	set	105
   146  006B                     _RAIF	set	107
   147  0058                     _RBIF	set	88
   148  0059                     _INTF	set	89
   149  005B                     _RBIE	set	91
   150  0048                     _IOCB0	set	72
   151  0034                     _RB4	set	52
   152  0036                     _RB6	set	54
   153  0028                     _TRISB0	set	40
   154  002E                     _TRISB6	set	46
   155  0099                     _ADRESH	set	153
   156  0098                     _ADRESL	set	152
   157  0096                     _ADCON1	set	150
   158  0095                     _ADCON0	set	149
   159  0086                     _PORTA	set	134
   160  0085                     _TRISA	set	133
   161  0081                     _TMR0	set	129
   162  04B2                     _LDO_EN	set	1202
   163  04B6                     _CHS4	set	1206
   164  04A8                     _ADON	set	1192
   165  04A9                     _GODONE	set	1193
   166  0430                     _RA0	set	1072
   167  0431                     _RA1	set	1073
   168  0433                     _RA3	set	1075
   169  0434                     _RA4	set	1076
   170  0117                     _KEYDATAH	set	279
   171  0116                     _KEYDATAL	set	278
   172  0113                     _KEYCON2	set	275
   173  0112                     _KEYCON1	set	274
   174  0111                     _KEYCON0	set	273
   175  0110                     _PIE2	set	272
   176  010F                     _PIR2	set	271
   177  0106                     _PORTC	set	262
   178  0105                     _TRISC	set	261
   179                           
   180                           	psect	cinit
   181  000F                     start_initialization:	
   182                           ; #config settings
   183                           
   184  000F                     __initialization:	
   185                           
   186                           ;initializer for _showNumGe
   187  000F  307F               	movlw	127
   188  0010  00ED               	movwf	__pdataBANK0& (0+127)
   189                           
   190                           ;initializer for _showNumShi
   191  0011  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   192  0012  30A0               	movlw	low __pbssBANK1
   193                           
   194                           ; Clear objects allocated to BANK1
   195  0013  1383               	bcf	3,7	;select IRP bank0
   196  0014  0084               	movwf	4
   197  0015  30BA               	movlw	low (__pbssBANK1+26)
   198  0016  118A  27F1  118A   	fcall	clear_ram0
   199                           
   200                           ; Clear objects allocated to BANK0
   201  0019  3020               	movlw	low __pbssBANK0
   202  001A  0084               	movwf	4
   203  001B  3049               	movlw	low (__pbssBANK0+41)
   204  001C  118A  27F1         	fcall	clear_ram0
   205                           
   206                           ; Clear objects allocated to COMMON
   207  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   208  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   209                           
   210                           ; Clear objects allocated to BITCOMMON
   211  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   212  0021                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215  0021                     __end_of__initialization:	
   216  0021  0183               	clrf	3
   217  0022  158A  2DBA         	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	bitbssCOMMON
   220  03C0                     __pbitbssCOMMON:	
   221  03C0                     _b_ksleep:	
   222  03C0                     	ds	1
   223  03C1                     _b_kerr:	
   224  03C1                     	ds	1
   225  03C2                     _b_kclr:	
   226  03C2                     	ds	1
   227  03C3                     _b_kover1:	
   228  03C3                     	ds	1
   229  03C4                     _b_kover:	
   230  03C4                     	ds	1
   231  03C5                     _B_OnOff:	
   232  03C5                     	ds	1
   233  03C6                     _B_MainLoop:	
   234  03C6                     	ds	1
   235                           
   236                           	psect	bssCOMMON
   237  0079                     __pbssCOMMON:	
   238  0079                     _power_ad:	
   239  0079                     	ds	2
   240                           
   241                           	psect	bssBANK0
   242  0020                     __pbssBANK0:	
   243  0020                     _KeyOldValue1:	
   244  0020                     	ds	4
   245  0024                     _KeyData:	
   246  0024                     	ds	2
   247  0026                     _KeyOldData:	
   248  0026                     	ds	2
   249  0028                     _shanshuoTime2:	
   250  0028                     	ds	2
   251  002A                     _shanshuoTime:	
   252  002A                     	ds	2
   253  002C                     _KeyFlag:	
   254  002C                     	ds	2
   255  002E                     TurnKeyFlags@F84:	
   256  002E                     	ds	1
   257  002F                     TurnKeyFlags@F83:	
   258  002F                     	ds	1
   259  0030                     CheckKeyOldValue@F77:	
   260  0030                     	ds	1
   261  0031                     _KeyMaxSub:	
   262  0031                     	ds	1
   263  0032                     _KeyCounter:	
   264  0032                     	ds	1
   265  0033                     WorkSleep@time:	
   266  0033                     	ds	1
   267  0034                     KeyServer@KeyOldFlag:	
   268  0034                     	ds	1
   269  0035                     _test_adc:	
   270  0035                     	ds	1
   271  0036                     _curBatStep:	
   272  0036                     	ds	1
   273  0037                     _showBatStep:	
   274  0037                     	ds	1
   275  0038                     _wuhuaKeyFlag:	
   276  0038                     	ds	1
   277  0039                     _fanKeyFlag:	
   278  0039                     	ds	1
   279  003A                     _ledCnt:	
   280  003A                     	ds	1
   281  003B                     _lowFanTime:	
   282  003B                     	ds	1
   283  003C                     _lowBatTime:	
   284  003C                     	ds	1
   285  003D                     _lowBatLock:	
   286  003D                     	ds	1
   287  003E                     _chrgFullTime:	
   288  003E                     	ds	1
   289  003F                     _chrgFlag:	
   290  003F                     	ds	1
   291  0040                     _fanOverTime:	
   292  0040                     	ds	1
   293  0041                     _count10s:	
   294  0041                     	ds	1
   295  0042                     _fanDuty:	
   296  0042                     	ds	1
   297  0043                     _wuhuaFlag:	
   298  0043                     	ds	1
   299  0044                     _workStep:	
   300  0044                     	ds	1
   301  0045                     _count1s:	
   302  0045                     	ds	1
   303  0046                     _MainTime:	
   304  0046                     	ds	1
   305  0047                     _adresult:	
   306  0047                     	ds	2
   307                           
   308                           	psect	dataBANK0
   309  006D                     __pdataBANK0:	
   310  006D                     _showNumGe:	
   311  006D                     	ds	1
   312  006E                     _showNumShi:	
   313  006E                     	ds	1
   314                           
   315                           	psect	bssBANK1
   316  00A0                     __pbssBANK1:	
   317  00A0                     _KeyReference:	
   318  00A0                     	ds	4
   319  00A4                     _KeyOldValue2:	
   320  00A4                     	ds	4
   321  00A8                     _KeyOldValue0:	
   322  00A8                     	ds	4
   323  00AC                     _KeyResSum:	
   324  00AC                     	ds	4
   325  00B0                     CheckValidTime@F87:	
   326  00B0                     	ds	2
   327  00B2                     _result:	
   328  00B2                     	ds	2
   329  00B4                     _count30s:	
   330  00B4                     	ds	2
   331  00B6                     _fanValue:	
   332  00B6                     	ds	2
   333  00B8                     _KeyUpShake:	
   334  00B8                     	ds	2
   335                           
   336                           	psect	clrtext
   337  07F1                     clear_ram0:	
   338                           ;	Called with FSR containing the base address, and
   339                           ;	W with the last address+1
   340                           
   341  07F1  0064               	clrwdt	;clear the watchdog before getting into this loop
   342  07F2                     clrloop0:	
   343  07F2  0180               	clrf	0	;clear RAM location pointed to by FSR
   344  07F3  0A84               	incf	4,f	;increment pointer
   345  07F4  0604               	xorwf	4,w	;XOR with final address
   346  07F5  1903               	btfsc	3,2	;have we reached the end yet?
   347  07F6  3400               	retlw	0	;all done for this memory range, return
   348  07F7  0604               	xorwf	4,w	;XOR again to restore value
   349  07F8  2FF2               	goto	clrloop0	;do the next byte
   350                           
   351                           	psect	cstackBANK1
   352  00BA                     __pcstackBANK1:	
   353  00BA                     workCtr@power_temp:	
   354                           
   355                           ; 4 bytes @ 0x0
   356  00BA                     	ds	4
   357                           
   358                           	psect	cstackCOMMON
   359  0070                     __pcstackCOMMON:	
   360  0070                     ?_ledShow:	
   361  0070                     ??_ledShow:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_SystemEnterSleep:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_CheckTouchKey:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_Init_System:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ?_Refurbish_Sfr:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0070                     ?_KeyServer:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_Isr_Timer:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ??_Isr_Timer:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_WorkSleep:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_showBatLed:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_setBatStep:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_chrgCtr:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_keyLedCtr:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_pwmInit:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_pwmStop:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_fanInit:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_fanStop:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_fanCtr:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_wuhuaCtr:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_workCtr:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_main:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_KeyIsIn:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_KeyClearOne:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_KeyClearIn:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_KeyStopClear:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_ClearResSum:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ?_GetTouchKeyValue:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ?_CheckOnceResult:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_CheckKeyOldValue:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_TurnKeyFlags:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_CheckValidTime:	
   452                           ; 1 bytes @ 0x0
   453                           
   454                           
   455                           ; 1 bytes @ 0x0
   456  0070                     	ds	3
   457  0073                     ??_Init_System:	
   458  0073                     ??_Refurbish_Sfr:	
   459                           ; 1 bytes @ 0x3
   460                           
   461  0073                     ??_KeyServer:	
   462                           ; 1 bytes @ 0x3
   463                           
   464  0073                     ?_ADC_Sample:	
   465                           ; 1 bytes @ 0x3
   466                           
   467  0073                     ??_pwmInit:	
   468                           ; 1 bytes @ 0x3
   469                           
   470  0073                     ??_pwmStop:	
   471                           ; 1 bytes @ 0x3
   472                           
   473  0073                     ??_fanInit:	
   474                           ; 1 bytes @ 0x3
   475                           
   476  0073                     ??_fanStop:	
   477                           ; 1 bytes @ 0x3
   478                           
   479  0073                     ??_wuhuaCtr:	
   480                           ; 1 bytes @ 0x3
   481                           
   482  0073                     ??_KeyIsIn:	
   483                           ; 1 bytes @ 0x3
   484                           
   485  0073                     ??_KeyClearOne:	
   486                           ; 1 bytes @ 0x3
   487                           
   488  0073                     ??_ClearResSum:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     ?_KeyHave:	
   492                           ; 1 bytes @ 0x3
   493                           
   494  0073                     ??_CheckValidTime:	
   495                           ; 1 bytes @ 0x3
   496                           
   497  0073                     ??___lmul:	
   498                           ; 1 bytes @ 0x3
   499                           
   500  0073                     ?___lbdiv:	
   501                           ; 1 bytes @ 0x3
   502                           
   503  0073                     ?___lbmod:	
   504                           ; 1 bytes @ 0x3
   505                           
   506  0073                     ?___lwdiv:	
   507                           ; 1 bytes @ 0x3
   508                           
   509  0073                     ?___lwmod:	
   510                           ; 2 bytes @ 0x3
   511                           
   512  0073                     ?___ftpack:	
   513                           ; 2 bytes @ 0x3
   514                           
   515  0073                     ADC_Sample@adldo:	
   516                           ; 3 bytes @ 0x3
   517                           
   518  0073                     KeyIsIn@46:	
   519                           ; 1 bytes @ 0x3
   520                           
   521  0073                     KeyClearOne@49:	
   522                           ; 1 bytes @ 0x3
   523                           
   524  0073                     ClearResSum@56:	
   525                           ; 1 bytes @ 0x3
   526                           
   527  0073                     ___lbdiv@divisor:	
   528                           ; 1 bytes @ 0x3
   529                           
   530  0073                     ___lbmod@divisor:	
   531                           ; 1 bytes @ 0x3
   532                           
   533  0073                     KeyHave@59:	
   534                           ; 1 bytes @ 0x3
   535                           
   536  0073                     ___lwdiv@divisor:	
   537                           ; 2 bytes @ 0x3
   538                           
   539  0073                     ___lwmod@divisor:	
   540                           ; 2 bytes @ 0x3
   541                           
   542  0073                     ___ftpack@arg:	
   543                           ; 2 bytes @ 0x3
   544                           
   545  0073                     ___lmul@product:	
   546                           ; 3 bytes @ 0x3
   547                           
   548                           
   549                           ; 4 bytes @ 0x3
   550  0073                     	ds	1
   551  0074                     ??_SystemEnterSleep:	
   552  0074                     ??_ADC_Sample:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0074                     ??_KeyStopClear:	
   556                           ; 1 bytes @ 0x4
   557                           
   558  0074                     ??_GetTouchKeyValue:	
   559                           ; 1 bytes @ 0x4
   560                           
   561  0074                     ??___lbdiv:	
   562                           ; 1 bytes @ 0x4
   563                           
   564  0074                     ??___lbmod:	
   565                           ; 1 bytes @ 0x4
   566                           
   567  0074                     KeyIsIn@45:	
   568                           ; 1 bytes @ 0x4
   569                           
   570  0074                     KeyStopClear@53:	
   571                           ; 1 bytes @ 0x4
   572                           
   573  0074                     ___lbdiv@dividend:	
   574                           ; 1 bytes @ 0x4
   575                           
   576                           
   577                           ; 1 bytes @ 0x4
   578  0074                     	ds	1
   579  0075                     ??_KeyClearIn:	
   580  0075                     ??_KeyHave:	
   581                           ; 1 bytes @ 0x5
   582                           
   583  0075                     ??_CheckKeyOldValue:	
   584                           ; 1 bytes @ 0x5
   585                           
   586  0075                     KeyClearIn@51:	
   587                           ; 1 bytes @ 0x5
   588                           
   589  0075                     KeyHave@58:	
   590                           ; 1 bytes @ 0x5
   591                           
   592  0075                     ___lbdiv@counter:	
   593                           ; 1 bytes @ 0x5
   594                           
   595  0075                     ___lbmod@dividend:	
   596                           ; 1 bytes @ 0x5
   597                           
   598  0075                     ___lwdiv@dividend:	
   599                           ; 1 bytes @ 0x5
   600                           
   601  0075                     ___lwmod@dividend:	
   602                           ; 2 bytes @ 0x5
   603                           
   604                           
   605                           ; 2 bytes @ 0x5
   606  0075                     	ds	1
   607  0076                     ??_WorkSleep:	
   608  0076                     ??_TurnKeyFlags:	
   609                           ; 1 bytes @ 0x6
   610                           
   611  0076                     ___ftpack@exp:	
   612                           ; 1 bytes @ 0x6
   613                           
   614  0076                     ___lbdiv@quotient:	
   615                           ; 1 bytes @ 0x6
   616                           
   617  0076                     ___lbmod@counter:	
   618                           ; 1 bytes @ 0x6
   619                           
   620                           
   621                           ; 1 bytes @ 0x6
   622  0076                     	ds	1
   623  0077                     ??_CheckTouchKey:	
   624  0077                     ??_setBatStep:	
   625                           ; 1 bytes @ 0x7
   626                           
   627  0077                     ??___lwdiv:	
   628                           ; 1 bytes @ 0x7
   629                           
   630  0077                     ??___lwmod:	
   631                           ; 1 bytes @ 0x7
   632                           
   633  0077                     ___ftpack@sign:	
   634                           ; 1 bytes @ 0x7
   635                           
   636  0077                     ___lbmod@rem:	
   637                           ; 1 bytes @ 0x7
   638                           
   639  0077                     ___lwmod@counter:	
   640                           ; 1 bytes @ 0x7
   641                           
   642                           
   643                           ; 1 bytes @ 0x7
   644  0077                     	ds	1
   645  0078                     ??_showBatLed:	
   646  0078                     ??_chrgCtr:	
   647                           ; 1 bytes @ 0x8
   648                           
   649  0078                     ??_keyLedCtr:	
   650                           ; 1 bytes @ 0x8
   651                           
   652  0078                     ??_fanCtr:	
   653                           ; 1 bytes @ 0x8
   654                           
   655  0078                     ??_workCtr:	
   656                           ; 1 bytes @ 0x8
   657                           
   658  0078                     ??_main:	
   659                           ; 1 bytes @ 0x8
   660                           
   661  0078                     ??___lwtoft:	
   662                           ; 1 bytes @ 0x8
   663                           
   664                           
   665                           	psect	cstackBANK0
   666  0049                     __pcstackBANK0:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0049                     ??___ftpack:	
   670  0049                     ??_CheckOnceResult:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0049                     ?___lmul:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0049                     ADC_Sample@j:	
   677                           ; 4 bytes @ 0x0
   678                           
   679  0049                     ___lwdiv@counter:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0049                     GetTouchKeyValue@64:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0049                     CheckKeyOldValue@79:	
   686                           ; 2 bytes @ 0x0
   687                           
   688  0049                     ___lmul@multiplier:	
   689                           ; 2 bytes @ 0x0
   690                           
   691                           
   692                           ; 4 bytes @ 0x0
   693  0049                     	ds	1
   694  004A                     ADC_Sample@adch:	
   695  004A                     ___lwdiv@quotient:	
   696                           ; 1 bytes @ 0x1
   697                           
   698                           
   699                           ; 2 bytes @ 0x1
   700  004A                     	ds	1
   701  004B                     ADC_Sample@i:	
   702  004B                     GetTouchKeyValue@63:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  004B                     CheckKeyOldValue@80:	
   706                           ; 2 bytes @ 0x2
   707                           
   708                           
   709                           ; 2 bytes @ 0x2
   710  004B                     	ds	1
   711  004C                     ?___lwtoft:	
   712  004C                     ___lwtoft@c:	
   713                           ; 3 bytes @ 0x3
   714                           
   715  004C                     ADC_Sample@adsum:	
   716                           ; 2 bytes @ 0x3
   717                           
   718                           
   719                           ; 4 bytes @ 0x3
   720  004C                     	ds	1
   721  004D                     GetTouchKeyValue@62:	
   722  004D                     CheckKeyOldValue@78:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  004D                     CheckOnceResult@73:	
   726                           ; 1 bytes @ 0x4
   727                           
   728  004D                     ___lmul@multiplicand:	
   729                           ; 2 bytes @ 0x4
   730                           
   731                           
   732                           ; 4 bytes @ 0x4
   733  004D                     	ds	1
   734  004E                     SystemEnterSleep@94:	
   735                           
   736                           ; 2 bytes @ 0x5
   737  004E                     	ds	1
   738  004F                     ?___ftdiv:	
   739  004F                     CheckOnceResult@70:	
   740                           ; 3 bytes @ 0x6
   741                           
   742  004F                     ___ftdiv@f2:	
   743                           ; 1 bytes @ 0x6
   744                           
   745                           
   746                           ; 3 bytes @ 0x6
   747  004F                     	ds	1
   748  0050                     ADC_Sample@admin:	
   749  0050                     CheckOnceResult@72:	
   750                           ; 2 bytes @ 0x7
   751                           
   752  0050                     SystemEnterSleep@93:	
   753                           ; 2 bytes @ 0x7
   754                           
   755                           
   756                           ; 2 bytes @ 0x7
   757  0050                     	ds	2
   758  0052                     CheckOnceResult@69:	
   759  0052                     ADC_Sample@admax:	
   760                           ; 1 bytes @ 0x9
   761                           
   762  0052                     SystemEnterSleep@92:	
   763                           ; 2 bytes @ 0x9
   764                           
   765  0052                     ___ftdiv@f1:	
   766                           ; 2 bytes @ 0x9
   767                           
   768                           
   769                           ; 3 bytes @ 0x9
   770  0052                     	ds	1
   771  0053                     CheckOnceResult@71:	
   772                           
   773                           ; 2 bytes @ 0xA
   774  0053                     	ds	1
   775  0054                     SystemEnterSleep@91:	
   776  0054                     ADC_Sample@ad_temp:	
   777                           ; 1 bytes @ 0xB
   778                           
   779                           
   780                           ; 2 bytes @ 0xB
   781  0054                     	ds	1
   782  0055                     ??___ftdiv:	
   783  0055                     CheckOnceResult@68:	
   784                           ; 1 bytes @ 0xC
   785                           
   786                           
   787                           ; 1 bytes @ 0xC
   788  0055                     	ds	1
   789  0056                     fanCtr@maxFanValue:	
   790                           
   791                           ; 1 bytes @ 0xD
   792  0056                     	ds	1
   793  0057                     fanCtr@fan_temp:	
   794                           
   795                           ; 4 bytes @ 0xE
   796  0057                     	ds	1
   797  0058                     ___ftdiv@cntr:	
   798                           
   799                           ; 1 bytes @ 0xF
   800  0058                     	ds	1
   801  0059                     ___ftdiv@f3:	
   802                           
   803                           ; 3 bytes @ 0x10
   804  0059                     	ds	3
   805  005C                     ___ftdiv@exp:	
   806                           
   807                           ; 1 bytes @ 0x13
   808  005C                     	ds	1
   809  005D                     ___ftdiv@sign:	
   810                           
   811                           ; 1 bytes @ 0x14
   812  005D                     	ds	1
   813  005E                     ?___fttol:	
   814  005E                     ___fttol@f1:	
   815                           ; 4 bytes @ 0x15
   816                           
   817                           
   818                           ; 3 bytes @ 0x15
   819  005E                     	ds	4
   820  0062                     ??___fttol:	
   821                           
   822                           ; 1 bytes @ 0x19
   823  0062                     	ds	3
   824  0065                     ___fttol@sign1:	
   825                           
   826                           ; 1 bytes @ 0x1C
   827  0065                     	ds	1
   828  0066                     ___fttol@lval:	
   829                           
   830                           ; 4 bytes @ 0x1D
   831  0066                     	ds	4
   832  006A                     ___fttol@exp1:	
   833                           
   834                           ; 1 bytes @ 0x21
   835  006A                     	ds	1
   836                           
   837                           	psect	maintext
   838  0DBA                     __pmaintext:	
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 894 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : B00/0
   855 ;;		On exit  : 200/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   858 ;;      Params:         0       0       0       0
   859 ;;      Locals:         0       0       0       0
   860 ;;      Temps:          0       0       0       0
   861 ;;      Totals:         0       0       0       0
   862 ;;Total ram usage:        0 bytes
   863 ;; Hardware stack levels required when called:    6
   864 ;; This function calls:
   865 ;;		_CheckTouchKey
   866 ;;		_Init_System
   867 ;;		_KeyServer
   868 ;;		_Refurbish_Sfr
   869 ;;		_WorkSleep
   870 ;;		_chrgCtr
   871 ;;		_setBatStep
   872 ;;		_workCtr
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           
   879                           ;psect for function _main
   880  0DBA                     _main:	
   881                           
   882                           ;main.c: 896: Init_System();
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   886  0DBA  118A  2024  158A   	fcall	_Init_System
   887                           
   888                           ;main.c: 897: firstLock = 1;
   889  0DBD  1283               	bcf	3,5	;RP0=0, select bank0
   890  0DBE  30FA               	movlw	250
   891  0DBF  01EB               	clrf	_firstLock
   892  0DC0  0AEB               	incf	_firstLock,f
   893                           
   894                           ;main.c: 898: firstTime = 250;
   895  0DC1  00EC               	movwf	_firstTime
   896  0DC2                     l4929:	
   897                           
   898                           ;main.c: 900: {
   899                           ;main.c: 902: if(B_MainLoop)
   900  0DC2  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   901  0DC3  2DC2               	goto	l4929
   902                           
   903                           ;main.c: 903: {
   904                           ;main.c: 904: B_MainLoop = 0;
   905  0DC4  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   906  0DC5  0064               	clrwdt	;# 
   907                           
   908                           ;main.c: 906: CheckTouchKey();
   909  0DC6  118A  206C  158A   	fcall	_CheckTouchKey
   910                           
   911                           ;main.c: 907: chrgCtr();
   912  0DC9  158A  25FD  158A   	fcall	_chrgCtr
   913                           
   914                           ;main.c: 908: Refurbish_Sfr();
   915  0DCC  118A  2389  158A   	fcall	_Refurbish_Sfr
   916                           
   917                           ;main.c: 909: KeyServer();
   918  0DCF  118A  27A7  158A   	fcall	_KeyServer
   919                           
   920                           ;main.c: 910: workCtr();
   921  0DD2  118A  2498  158A   	fcall	_workCtr
   922                           
   923                           ;main.c: 911: setBatStep();
   924  0DD5  158A  2674  158A   	fcall	_setBatStep
   925                           
   926                           ;main.c: 912: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   927  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
   928  0DD9  086C               	movf	_firstTime,w
   929  0DDA  1D03               	btfss	3,2
   930  0DDB  2DC2               	goto	l4929
   931  0DDC  083F               	movf	_chrgFlag,w
   932  0DDD  1D03               	btfss	3,2
   933  0DDE  2DC2               	goto	l4929
   934  0DDF  0844               	movf	_workStep,w
   935  0DE0  1D03               	btfss	3,2
   936  0DE1  2DC2               	goto	l4929
   937  0DE2  0843               	movf	_wuhuaFlag,w
   938  0DE3  1D03               	btfss	3,2
   939  0DE4  2DC2               	goto	l4929
   940  0DE5  082A               	movf	_shanshuoTime,w
   941  0DE6  042B               	iorwf	_shanshuoTime+1,w
   942  0DE7  1D03               	btfss	3,2
   943  0DE8  2DC2               	goto	l4929
   944  0DE9  0828               	movf	_shanshuoTime2,w
   945  0DEA  0429               	iorwf	_shanshuoTime2+1,w
   946  0DEB  1D03               	btfss	3,2
   947  0DEC  2DC2               	goto	l4929
   948                           
   949                           ;main.c: 913: {
   950                           ;main.c: 914: PORTA &= 0xE4;
   951                           
   952                           ;main.c: 915: PORTB &= 0xEF;
   953                           
   954                           ;main.c: 916: TRISA |= 0x1B;
   955                           
   956                           ;main.c: 917: TRISB |= 0x10;
   957  0DED  25F2               	fcall	PL12	;call to abstracted procedure
   958                           
   959                           ;main.c: 918: WorkSleep();
   960  0DEE  118A  2041  158A   	fcall	_WorkSleep
   961  0DF1  2DC2               	goto	l4929
   962  0DF2                     __end_of_main:	
   963  0DF2                     PL12:	
   964  0DF2  30E4               	movlw	228
   965  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
   966  0DF4  0586               	andwf	6,f	;volatile
   967  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
   968  0DF6  1206               	bcf	6,4	;volatile
   969  0DF7  301B               	movlw	27
   970  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
   971  0DF9  0485               	iorwf	5,f	;volatile
   972  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
   973  0DFB  1605               	bsf	5,4	;volatile
   974  0DFC  0008               	return
   975  0DFD                     __end_ofPL12:	
   976                           
   977                           	psect	text7
   978  03FF                     __ptext7:	
   979 ;; *************** function _fanCtr *****************
   980 ;; Defined at:
   981 ;;		line 757 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
   986 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, pclath, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 300/0
   993 ;;		On exit  : 200/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   996 ;;      Params:         0       0       0       0
   997 ;;      Locals:         0       5       0       0
   998 ;;      Temps:          0       0       0       0
   999 ;;      Totals:         0       5       0       0
  1000 ;;Total ram usage:        5 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    3
  1003 ;; This function calls:
  1004 ;;		_ADC_Sample
  1005 ;;		___lmul
  1006 ;;		_fanInit
  1007 ;;		_fanStop
  1008 ;; This function is called by:
  1009 ;;		_workCtr
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _fanCtr
  1015  03FF                     _fanCtr:	
  1016                           
  1017                           ;main.c: 759: if(workStep > 0)
  1018                           
  1019                           ;incstack = 0
  1020                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1021  03FF  0844               	movf	_workStep,w
  1022  0400  1903               	btfsc	3,2
  1023  0401  2C60               	goto	l4561
  1024                           
  1025                           ;main.c: 760: {
  1026                           ;main.c: 761: PORTA |= 0x04;
  1027  0402  1683               	bsf	3,5	;RP0=1, select bank1
  1028  0403  1506               	bsf	6,2	;volatile
  1029                           
  1030                           ;main.c: 762: unsigned char maxFanValue = 52;
  1031  0404  3034               	movlw	52
  1032  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1033  0406  00D6               	movwf	fanCtr@maxFanValue
  1034                           
  1035                           ;main.c: 763: if(workStep == 1)
  1036  0407  0B44               	decfsz	_workStep,w
  1037  0408  2C0B               	goto	l4529
  1038                           
  1039                           ;main.c: 764: {
  1040                           ;main.c: 765: maxFanValue = 40;
  1041  0409  3028               	movlw	40
  1042  040A  00D6               	movwf	fanCtr@maxFanValue
  1043  040B                     l4529:	
  1044  040B  300D               	movlw	13
  1045                           
  1046                           ;main.c: 766: }
  1047                           ;main.c: 767: test_adc = ADC_Sample(13, 0);
  1048  040C  01F3               	clrf	ADC_Sample@adldo
  1049  040D  260B  118A         	fcall	_ADC_Sample
  1050  040F  00B5               	movwf	_test_adc	;volatile
  1051                           
  1052                           ;main.c: 768: if (0xA5 == test_adc)
  1053  0410  30A5               	movlw	165
  1054  0411  0635               	xorwf	_test_adc,w	;volatile
  1055  0412  1D03               	btfss	3,2
  1056  0413  2C3E               	goto	l4541
  1057                           
  1058                           ;main.c: 769: {
  1059                           ;main.c: 770: volatile unsigned long fan_temp;
  1060                           ;main.c: 771: if(power_ad > 0)
  1061  0414  0879               	movf	_power_ad,w	;volatile
  1062  0415  047A               	iorwf	_power_ad+1,w	;volatile
  1063  0416  1903               	btfsc	3,2
  1064  0417  2C3E               	goto	l4541
  1065                           
  1066                           ;main.c: 772: {
  1067                           ;main.c: 773: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1068  0418  0847               	movf	_adresult,w	;volatile
  1069  0419  00C9               	movwf	___lmul@multiplier
  1070  041A  0848               	movf	_adresult+1,w	;volatile
  1071  041B  00CA               	movwf	___lmul@multiplier+1
  1072  041C  01CB               	clrf	___lmul@multiplier+2
  1073  041D  01CC               	clrf	___lmul@multiplier+3
  1074  041E  0879               	movf	_power_ad,w	;volatile
  1075  041F  00CD               	movwf	___lmul@multiplicand
  1076  0420  087A               	movf	_power_ad+1,w	;volatile
  1077  0421  00CE               	movwf	___lmul@multiplicand+1
  1078  0422  01CF               	clrf	___lmul@multiplicand+2
  1079  0423  01D0               	clrf	___lmul@multiplicand+3
  1080  0424  2465  118A         	fcall	___lmul
  1081  0426  084C               	movf	?___lmul+3,w
  1082  0427  00DA               	movwf	fanCtr@fan_temp+3	;volatile
  1083  0428  084B               	movf	?___lmul+2,w
  1084  0429  00D9               	movwf	fanCtr@fan_temp+2	;volatile
  1085  042A  084A               	movf	?___lmul+1,w
  1086  042B  00D8               	movwf	fanCtr@fan_temp+1	;volatile
  1087  042C  0849               	movf	?___lmul,w
  1088  042D  00D7               	movwf	fanCtr@fan_temp	;volatile
  1089  042E  300C               	movlw	12
  1090  042F                     u4835:	
  1091  042F  1003               	clrc
  1092  0430  0CDA               	rrf	fanCtr@fan_temp+3,f	;volatile
  1093  0431  0CD9               	rrf	fanCtr@fan_temp+2,f	;volatile
  1094  0432  0CD8               	rrf	fanCtr@fan_temp+1,f	;volatile
  1095  0433  0CD7               	rrf	fanCtr@fan_temp,f	;volatile
  1096  0434  3EFF               	addlw	-1
  1097  0435  1D03               	skipz
  1098  0436  2C2F               	goto	u4835
  1099                           
  1100                           ;main.c: 774: fanValue = (unsigned int)(fan_temp);
  1101  0437  0858               	movf	fanCtr@fan_temp+1,w	;volatile
  1102  0438  1683               	bsf	3,5	;RP0=1, select bank1
  1103  0439  00B7               	movwf	(_fanValue+1)^(0+128)
  1104  043A  1283               	bcf	3,5	;RP0=0, select bank0
  1105  043B  0857               	movf	fanCtr@fan_temp,w	;volatile
  1106  043C  1683               	bsf	3,5	;RP0=1, select bank1
  1107  043D  00B6               	movwf	_fanValue^(0+128)
  1108  043E                     l4541:	
  1109                           
  1110                           ;main.c: 775: }
  1111                           ;main.c: 776: }
  1112                           ;main.c: 777: if(fanValue > 1300)
  1113  043E  3005               	movlw	5
  1114  043F  1683               	bsf	3,5	;RP0=1, select bank1
  1115  0440  0237               	subwf	(_fanValue+1)^(0+128),w
  1116  0441  3015               	movlw	21
  1117  0442  1903               	skipnz
  1118  0443  0236               	subwf	_fanValue^(0+128),w
  1119  0444  1C03               	skipc
  1120  0445  2C53               	goto	l4549
  1121                           
  1122                           ;main.c: 778: {
  1123                           ;main.c: 779: if(++fanOverTime > 50)
  1124  0446  3033               	movlw	51
  1125  0447  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0448  0AC0               	incf	_fanOverTime,f
  1127  0449  0240               	subwf	_fanOverTime,w
  1128  044A  1C03               	skipc
  1129  044B  2C55               	goto	l4551
  1130  044C  30C2               	movlw	194
  1131                           
  1132                           ;main.c: 780: {
  1133                           ;main.c: 781: fanOverTime = 0;
  1134  044D  01C0               	clrf	_fanOverTime
  1135                           
  1136                           ;main.c: 782: workStep = 0;
  1137  044E  01C4               	clrf	_workStep
  1138                           
  1139                           ;main.c: 783: shanshuoTime = 450;
  1140  044F  00AA               	movwf	_shanshuoTime
  1141  0450  3001               	movlw	1
  1142  0451  00AB               	movwf	_shanshuoTime+1
  1143  0452  2C55               	goto	l4551
  1144  0453                     l4549:	
  1145                           
  1146                           ;main.c: 786: else
  1147                           ;main.c: 787: {
  1148                           ;main.c: 788: fanOverTime = 0;
  1149  0453  1283               	bcf	3,5	;RP0=0, select bank0
  1150  0454  01C0               	clrf	_fanOverTime
  1151  0455                     l4551:	
  1152                           
  1153                           ;main.c: 789: }
  1154                           ;main.c: 790: if(fanDuty < maxFanValue)
  1155  0455  0856               	movf	fanCtr@maxFanValue,w
  1156  0456  0242               	subwf	_fanDuty,w
  1157  0457  1803               	skipnc
  1158  0458  2C5B               	goto	l4555
  1159                           
  1160                           ;main.c: 791: {
  1161                           ;main.c: 792: fanDuty++;
  1162  0459  0AC2               	incf	_fanDuty,f
  1163                           
  1164                           ;main.c: 793: }
  1165  045A  2C5F               	goto	l4559
  1166  045B                     l4555:	
  1167                           
  1168                           ;main.c: 794: else if(fanDuty > maxFanValue)
  1169  045B  0842               	movf	_fanDuty,w
  1170  045C  0256               	subwf	fanCtr@maxFanValue,w
  1171  045D  1C03               	btfss	3,0
  1172                           
  1173                           ;main.c: 795: {
  1174                           ;main.c: 796: fanDuty--;
  1175  045E  03C2               	decf	_fanDuty,f
  1176  045F                     l4559:	
  1177                           
  1178                           ;main.c: 797: }
  1179                           ;main.c: 798: fanInit();
  1180  045F  2F43               	ljmp	l4291
  1181  0460                     l4561:	
  1182                           ;main.c: 799: }
  1183                           
  1184                           
  1185                           ;main.c: 800: else
  1186                           ;main.c: 801: {
  1187                           ;main.c: 802: fanStop();
  1188  0460  274F               	fcall	_fanStop
  1189                           
  1190                           ;main.c: 803: fanDuty = 0;
  1191  0461  01C2               	clrf	_fanDuty
  1192                           
  1193                           ;main.c: 804: PORTA &= 0xFB;
  1194  0462  1683               	bsf	3,5	;RP0=1, select bank1
  1195  0463  1106               	bcf	6,2	;volatile
  1196  0464  0008               	return
  1197  0465                     __end_of_fanCtr:	
  1198  0465                     __ptext10:	
  1199 ;; *************** function ___lmul *****************
  1200 ;; Defined at:
  1201 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1204 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  product         4    3[COMMON] unsigned long 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  4    0[BANK0 ] unsigned long 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 300/0
  1213 ;;		On exit  : 300/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1216 ;;      Params:         0       8       0       0
  1217 ;;      Locals:         4       0       0       0
  1218 ;;      Temps:          0       0       0       0
  1219 ;;      Totals:         4       8       0       0
  1220 ;;Total ram usage:       12 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    2
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_fanCtr
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function ___lmul
  1232  0465                     ___lmul:	
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1236  0465  01F3               	clrf	___lmul@product
  1237  0466  01F4               	clrf	___lmul@product+1
  1238  0467  01F5               	clrf	___lmul@product+2
  1239  0468  01F6               	clrf	___lmul@product+3
  1240  0469                     l1408:	
  1241  0469  1C49               	btfss	___lmul@multiplier,0
  1242  046A  2C7F               	goto	l4353
  1243  046B  084D               	movf	___lmul@multiplicand,w
  1244  046C  07F3               	addwf	___lmul@product,f
  1245  046D  084E               	movf	___lmul@multiplicand+1,w
  1246  046E  1103               	clrz
  1247  046F  1803               	skipnc
  1248  0470  3E01               	addlw	1
  1249  0471  1D03               	btfss	3,2
  1250  0472  07F4               	addwf	___lmul@product+1,f
  1251  0473  084F               	movf	___lmul@multiplicand+2,w
  1252  0474  1103               	clrz
  1253  0475  1803               	skipnc
  1254  0476  3E01               	addlw	1
  1255  0477  1D03               	btfss	3,2
  1256  0478  07F5               	addwf	___lmul@product+2,f
  1257  0479  0850               	movf	___lmul@multiplicand+3,w
  1258  047A  1103               	clrz
  1259  047B  1803               	skipnc
  1260  047C  3E01               	addlw	1
  1261  047D  1D03               	btfss	3,2
  1262  047E  07F6               	addwf	___lmul@product+3,f
  1263  047F                     l4353:	
  1264  047F  1003               	clrc
  1265  0480  0DCD               	rlf	___lmul@multiplicand,f
  1266  0481  0DCE               	rlf	___lmul@multiplicand+1,f
  1267  0482  0DCF               	rlf	___lmul@multiplicand+2,f
  1268  0483  0DD0               	rlf	___lmul@multiplicand+3,f
  1269  0484  1003               	clrc
  1270  0485  0CCC               	rrf	___lmul@multiplier+3,f
  1271  0486  0CCB               	rrf	___lmul@multiplier+2,f
  1272  0487  0CCA               	rrf	___lmul@multiplier+1,f
  1273  0488  0CC9               	rrf	___lmul@multiplier,f
  1274  0489  084C               	movf	___lmul@multiplier+3,w
  1275  048A  044B               	iorwf	___lmul@multiplier+2,w
  1276  048B  044A               	iorwf	___lmul@multiplier+1,w
  1277  048C  0449               	iorwf	___lmul@multiplier,w
  1278  048D  1D03               	skipz
  1279  048E  2C69               	goto	l1408
  1280  048F  0876               	movf	___lmul@product+3,w
  1281  0490  00CC               	movwf	?___lmul+3
  1282  0491  0875               	movf	___lmul@product+2,w
  1283  0492  00CB               	movwf	?___lmul+2
  1284  0493  0874               	movf	___lmul@product+1,w
  1285  0494  00CA               	movwf	?___lmul+1
  1286  0495  0873               	movf	___lmul@product,w
  1287  0496  00C9               	movwf	?___lmul
  1288  0497  0008               	return
  1289  0498                     __end_of___lmul:	
  1290  0498                     __ptext1:	
  1291 ;; *************** function _workCtr *****************
  1292 ;; Defined at:
  1293 ;;		line 842 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0, pclath, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 300/0
  1304 ;;		On exit  : 200/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1307 ;;      Params:         0       0       0       0
  1308 ;;      Locals:         0       0       4       0
  1309 ;;      Temps:          0       0       0       0
  1310 ;;      Totals:         0       0       4       0
  1311 ;;Total ram usage:        4 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    4
  1314 ;; This function calls:
  1315 ;;		_ADC_Sample
  1316 ;;		___ftdiv
  1317 ;;		___fttol
  1318 ;;		___lwtoft
  1319 ;;		_fanCtr
  1320 ;;		_keyLedCtr
  1321 ;;		_wuhuaCtr
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _workCtr
  1329  0498                     _workCtr:	
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1333  0498  301F               	movlw	31
  1334                           
  1335                           ;main.c: 844: test_adc = ADC_Sample(31, 0);
  1336  0499  01F3               	clrf	ADC_Sample@adldo
  1337  049A  260B  118A         	fcall	_ADC_Sample
  1338  049C  00B5               	movwf	_test_adc	;volatile
  1339                           
  1340                           ;main.c: 845: if (0xA5 == test_adc)
  1341  049D  30A5               	movlw	165
  1342  049E  0635               	xorwf	_test_adc,w	;volatile
  1343  049F  1D03               	btfss	3,2
  1344  04A0  2CCF               	goto	l4859
  1345                           
  1346                           ;main.c: 846: {
  1347                           ;main.c: 847: volatile unsigned long power_temp;
  1348                           ;main.c: 849: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1349  04A1  3096               	movlw	150
  1350  04A2  01D2               	clrf	___ftdiv@f1
  1351  04A3  00D3               	movwf	___ftdiv@f1+1
  1352  04A4  304A               	movlw	74
  1353  04A5  00D4               	movwf	___ftdiv@f1+2
  1354  04A6  0848               	movf	_adresult+1,w	;volatile
  1355  04A7  00CD               	movwf	___lwtoft@c+1
  1356  04A8  0847               	movf	_adresult,w	;volatile
  1357  04A9  00CC               	movwf	___lwtoft@c
  1358  04AA  25BD  118A         	fcall	___lwtoft
  1359  04AC  084C               	movf	?___lwtoft,w
  1360  04AD  00CF               	movwf	___ftdiv@f2
  1361  04AE  084D               	movf	?___lwtoft+1,w
  1362  04AF  00D0               	movwf	___ftdiv@f2+1
  1363  04B0  084E               	movf	?___lwtoft+2,w
  1364  04B1  00D1               	movwf	___ftdiv@f2+2
  1365  04B2  2502  118A         	fcall	___ftdiv
  1366  04B4  084F               	movf	?___ftdiv,w
  1367  04B5  00DE               	movwf	___fttol@f1
  1368  04B6  0850               	movf	?___ftdiv+1,w
  1369  04B7  00DF               	movwf	___fttol@f1+1
  1370  04B8  0851               	movf	?___ftdiv+2,w
  1371  04B9  00E0               	movwf	___fttol@f1+2
  1372  04BA  2564  118A         	fcall	___fttol
  1373  04BC  0861               	movf	?___fttol+3,w
  1374  04BD  1683               	bsf	3,5	;RP0=1, select bank1
  1375  04BE  00BD               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1376  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1377  04C0  0860               	movf	?___fttol+2,w
  1378  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  1379  04C2  00BC               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1380  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1381  04C4  085F               	movf	?___fttol+1,w
  1382  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  1383  04C6  00BB               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1384  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1385  04C8  085E               	movf	?___fttol,w
  1386  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  1387  04CA  00BA               	movwf	workCtr@power_temp^(0+128)	;volatile
  1388                           
  1389                           ;main.c: 850: power_ad = (unsigned int)(power_temp);
  1390  04CB  083B               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1391  04CC  00FA               	movwf	_power_ad+1	;volatile
  1392  04CD  083A               	movf	workCtr@power_temp^(0+128),w	;volatile
  1393  04CE  00F9               	movwf	_power_ad	;volatile
  1394  04CF                     l4859:	
  1395                           
  1396                           ;main.c: 851: }
  1397                           ;main.c: 852: if(workStep == 2 && power_ad < 2900)
  1398  04CF  3002               	movlw	2
  1399  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1400  04D1  0644               	xorwf	_workStep,w
  1401  04D2  1D03               	btfss	3,2
  1402  04D3  2CE4               	goto	l4869
  1403  04D4  300B               	movlw	11
  1404  04D5  027A               	subwf	_power_ad+1,w	;volatile
  1405  04D6  3054               	movlw	84
  1406  04D7  1903               	skipnz
  1407  04D8  0279               	subwf	_power_ad,w	;volatile
  1408  04D9  1803               	skipnc
  1409  04DA  2CE4               	goto	l4869
  1410                           
  1411                           ;main.c: 853: {
  1412                           ;main.c: 854: if(++lowFanTime > 200)
  1413  04DB  30C9               	movlw	201
  1414  04DC  0ABB               	incf	_lowFanTime,f
  1415  04DD  023B               	subwf	_lowFanTime,w
  1416  04DE  1C03               	skipc
  1417  04DF  2CE5               	goto	l4871
  1418                           
  1419                           ;main.c: 855: {
  1420                           ;main.c: 856: lowFanTime = 0;
  1421  04E0  01BB               	clrf	_lowFanTime
  1422                           
  1423                           ;main.c: 857: workStep = 1;
  1424  04E1  01C4               	clrf	_workStep
  1425  04E2  0AC4               	incf	_workStep,f
  1426  04E3  2CE5               	goto	l4871
  1427  04E4                     l4869:	
  1428                           
  1429                           ;main.c: 860: else
  1430                           ;main.c: 861: {
  1431                           ;main.c: 862: lowFanTime = 0;
  1432  04E4  01BB               	clrf	_lowFanTime
  1433  04E5                     l4871:	
  1434                           
  1435                           ;main.c: 863: }
  1436                           ;main.c: 864: if(power_ad < 2800)
  1437  04E5  300A               	movlw	10
  1438  04E6  027A               	subwf	_power_ad+1,w	;volatile
  1439  04E7  30F0               	movlw	240
  1440  04E8  1903               	skipnz
  1441  04E9  0279               	subwf	_power_ad,w	;volatile
  1442  04EA  1803               	skipnc
  1443  04EB  2CF7               	goto	l4879
  1444                           
  1445                           ;main.c: 865: {
  1446                           ;main.c: 866: if(++lowBatTime > 200)
  1447  04EC  30C9               	movlw	201
  1448  04ED  0ABC               	incf	_lowBatTime,f
  1449  04EE  023C               	subwf	_lowBatTime,w
  1450  04EF  1C03               	skipc
  1451  04F0  2CF8               	goto	l4881
  1452                           
  1453                           ;main.c: 867: {
  1454                           ;main.c: 868: lowBatTime = 0;
  1455  04F1  01BC               	clrf	_lowBatTime
  1456                           
  1457                           ;main.c: 869: lowBatLock = 1;
  1458  04F2  01BD               	clrf	_lowBatLock
  1459  04F3  0ABD               	incf	_lowBatLock,f
  1460                           
  1461                           ;main.c: 870: workStep = 0;
  1462  04F4  01C4               	clrf	_workStep
  1463                           
  1464                           ;main.c: 871: wuhuaFlag = 0;
  1465  04F5  01C3               	clrf	_wuhuaFlag
  1466  04F6  2CF8               	goto	l4881
  1467  04F7                     l4879:	
  1468                           
  1469                           ;main.c: 874: else
  1470                           ;main.c: 875: {
  1471                           ;main.c: 876: lowBatTime = 0;
  1472  04F7  01BC               	clrf	_lowBatTime
  1473  04F8                     l4881:	
  1474                           
  1475                           ;main.c: 877: }
  1476                           ;main.c: 878: if(firstTime > 0)
  1477  04F8  086C               	movf	_firstTime,w
  1478  04F9  1903               	btfsc	3,2
  1479  04FA  2CFD               	goto	l4885
  1480                           
  1481                           ;main.c: 879: {
  1482                           ;main.c: 880: firstTime--;
  1483  04FB  03EC               	decf	_firstTime,f
  1484                           
  1485                           ;main.c: 881: }
  1486  04FC  0008               	return
  1487  04FD                     l4885:	
  1488                           
  1489                           ;main.c: 882: else
  1490                           ;main.c: 883: {
  1491                           ;main.c: 884: keyLedCtr();
  1492  04FD  26DB  118A         	fcall	_keyLedCtr
  1493                           
  1494                           ;main.c: 885: fanCtr();
  1495  04FF  23FF  118A         	fcall	_fanCtr
  1496                           
  1497                           ;main.c: 886: wuhuaCtr();
  1498  0501  2F53               	ljmp	l4567
  1499  0502                     __end_of_workCtr:	
  1500  0502                     __ptext14:	
  1501 ;; *************** function ___ftdiv *****************
  1502 ;; Defined at:
  1503 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  f2              3    6[BANK0 ] float 
  1506 ;;  f1              3    9[BANK0 ] float 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  f3              3   16[BANK0 ] float 
  1509 ;;  sign            1   20[BANK0 ] unsigned char 
  1510 ;;  exp             1   19[BANK0 ] unsigned char 
  1511 ;;  cntr            1   15[BANK0 ] unsigned char 
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  3    6[BANK0 ] float 
  1514 ;; Registers used:
  1515 ;;		wreg, status,2, status,0, pclath, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 300/0
  1518 ;;		On exit  : 300/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1521 ;;      Params:         0       6       0       0
  1522 ;;      Locals:         0       6       0       0
  1523 ;;      Temps:          0       3       0       0
  1524 ;;      Totals:         0      15       0       0
  1525 ;;Total ram usage:       15 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:    3
  1528 ;; This function calls:
  1529 ;;		___ftpack
  1530 ;; This function is called by:
  1531 ;;		_workCtr
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           
  1536                           ;psect for function ___ftdiv
  1537  0502                     ___ftdiv:	
  1538                           
  1539                           ;incstack = 0
  1540                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1541  0502  0852               	movf	___ftdiv@f1,w
  1542  0503  00D5               	movwf	??___ftdiv
  1543  0504  0853               	movf	___ftdiv@f1+1,w
  1544  0505  00D6               	movwf	??___ftdiv+1
  1545  0506  0854               	movf	___ftdiv@f1+2,w
  1546  0507  00D7               	movwf	??___ftdiv+2
  1547  0508  1003               	clrc
  1548  0509  0D56               	rlf	??___ftdiv+1,w
  1549  050A  0D57               	rlf	??___ftdiv+2,w
  1550  050B  00DC               	movwf	___ftdiv@exp
  1551  050C  085C               	movf	___ftdiv@exp,w
  1552  050D  1D03               	btfss	3,2
  1553  050E  2D10               	goto	l4657
  1554  050F  2FA3               	ljmp	PL42	;call to abstracted procedure
  1555  0510                     l4657:	
  1556  0510  084F               	movf	___ftdiv@f2,w
  1557  0511  00D5               	movwf	??___ftdiv
  1558  0512  0850               	movf	___ftdiv@f2+1,w
  1559  0513  00D6               	movwf	??___ftdiv+1
  1560  0514  0851               	movf	___ftdiv@f2+2,w
  1561  0515  00D7               	movwf	??___ftdiv+2
  1562  0516  1003               	clrc
  1563  0517  0D56               	rlf	??___ftdiv+1,w
  1564  0518  0D57               	rlf	??___ftdiv+2,w
  1565  0519  00DD               	movwf	___ftdiv@sign
  1566  051A  085D               	movf	___ftdiv@sign,w
  1567  051B  1D03               	btfss	3,2
  1568  051C  2D1E               	goto	l1607
  1569  051D  2FA3               	ljmp	PL42	;call to abstracted procedure
  1570  051E                     l1607:	
  1571  051E  3089               	movlw	137
  1572  051F  01D9               	clrf	___ftdiv@f3
  1573  0520  01DA               	clrf	___ftdiv@f3+1
  1574  0521  01DB               	clrf	___ftdiv@f3+2
  1575  0522  075D               	addwf	___ftdiv@sign,w
  1576  0523  00D5               	movwf	??___ftdiv
  1577  0524  02DC               	subwf	___ftdiv@exp,f
  1578  0525  0854               	movf	___ftdiv@f1+2,w
  1579  0526  00DD               	movwf	___ftdiv@sign
  1580  0527  0851               	movf	___ftdiv@f2+2,w
  1581  0528  06DD               	xorwf	___ftdiv@sign,f
  1582  0529  3080               	movlw	128
  1583  052A  05DD               	andwf	___ftdiv@sign,f
  1584  052B  3018               	movlw	24
  1585  052C  17D3               	bsf	___ftdiv@f1+1,7
  1586  052D  01D4               	clrf	___ftdiv@f1+2
  1587  052E  17D0               	bsf	___ftdiv@f2+1,7
  1588  052F  01D1               	clrf	___ftdiv@f2+2
  1589  0530  00D8               	movwf	___ftdiv@cntr
  1590  0531                     l4679:	
  1591  0531  1003               	clrc
  1592  0532  0DD9               	rlf	___ftdiv@f3,f
  1593  0533  0DDA               	rlf	___ftdiv@f3+1,f
  1594  0534  0DDB               	rlf	___ftdiv@f3+2,f
  1595  0535  0851               	movf	___ftdiv@f2+2,w
  1596  0536  0254               	subwf	___ftdiv@f1+2,w
  1597  0537  1D03               	skipz
  1598  0538  2D3F               	goto	u5085
  1599  0539  0850               	movf	___ftdiv@f2+1,w
  1600  053A  0253               	subwf	___ftdiv@f1+1,w
  1601  053B  1D03               	skipz
  1602  053C  2D3F               	goto	u5085
  1603  053D  084F               	movf	___ftdiv@f2,w
  1604  053E  0252               	subwf	___ftdiv@f1,w
  1605  053F                     u5085:	
  1606  053F  1C03               	skipc
  1607  0540  2D4D               	goto	L4
  1608  0541  084F               	movf	___ftdiv@f2,w
  1609  0542  02D2               	subwf	___ftdiv@f1,f
  1610  0543  0850               	movf	___ftdiv@f2+1,w
  1611  0544  1C03               	skipc
  1612  0545  0F50               	incfsz	___ftdiv@f2+1,w
  1613  0546  02D3               	subwf	___ftdiv@f1+1,f
  1614  0547  0851               	movf	___ftdiv@f2+2,w
  1615  0548  1C03               	skipc
  1616  0549  0A51               	incf	___ftdiv@f2+2,w
  1617  054A  02D4               	subwf	___ftdiv@f1+2,f
  1618  054B  1459               	bsf	___ftdiv@f3,0
  1619  054C  1003               	clrc
  1620  054D                     L4:	
  1621  054D  0DD2               	rlf	___ftdiv@f1,f
  1622  054E  0DD3               	rlf	___ftdiv@f1+1,f
  1623  054F  0DD4               	rlf	___ftdiv@f1+2,f
  1624  0550  0BD8               	decfsz	___ftdiv@cntr,f
  1625  0551  2D31               	goto	l4679
  1626  0552  0859               	movf	___ftdiv@f3,w
  1627  0553  00F3               	movwf	___ftpack@arg
  1628  0554  085A               	movf	___ftdiv@f3+1,w
  1629  0555  00F4               	movwf	___ftpack@arg+1
  1630  0556  085B               	movf	___ftdiv@f3+2,w
  1631  0557  00F5               	movwf	___ftpack@arg+2
  1632  0558  085C               	movf	___ftdiv@exp,w
  1633  0559  00F6               	movwf	___ftpack@exp
  1634  055A  085D               	movf	___ftdiv@sign,w
  1635  055B  00F7               	movwf	___ftpack@sign
  1636  055C  25CD               	fcall	___ftpack
  1637  055D  0873               	movf	?___ftpack,w
  1638  055E  00CF               	movwf	?___ftdiv
  1639  055F  0874               	movf	?___ftpack+1,w
  1640  0560  00D0               	movwf	?___ftdiv+1
  1641  0561  0875               	movf	?___ftpack+2,w
  1642  0562  00D1               	movwf	?___ftdiv+2
  1643  0563  0008               	return
  1644  0564                     __end_of___ftdiv:	
  1645  0564                     __ptext13:	
  1646 ;; *************** function ___fttol *****************
  1647 ;; Defined at:
  1648 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  f1              3   21[BANK0 ] float 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  lval            4   29[BANK0 ] unsigned long 
  1653 ;;  exp1            1   33[BANK0 ] unsigned char 
  1654 ;;  sign1           1   28[BANK0 ] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  4   21[BANK0 ] long 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 300/0
  1661 ;;		On exit  : 300/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       4       0       0
  1665 ;;      Locals:         0       6       0       0
  1666 ;;      Temps:          0       3       0       0
  1667 ;;      Totals:         0      13       0       0
  1668 ;;Total ram usage:       13 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    2
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_workCtr
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           
  1679                           ;psect for function ___fttol
  1680  0564                     ___fttol:	
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1684  0564  2792  118A         	fcall	PL24	;call to abstracted procedure
  1685  0566  1003               	clrc
  1686  0567  0D63               	rlf	??___fttol+1,w
  1687  0568  0D64               	rlf	??___fttol+2,w
  1688  0569  00EA               	movwf	___fttol@exp1
  1689  056A  086A               	movf	___fttol@exp1,w
  1690  056B  1D03               	btfss	3,2
  1691  056C  2D72               	goto	l4697
  1692  056D                     l4695:	
  1693  056D  01DE               	clrf	?___fttol
  1694  056E  01DF               	clrf	?___fttol+1
  1695  056F  01E0               	clrf	?___fttol+2
  1696  0570  01E1               	clrf	?___fttol+3
  1697  0571  0008               	return
  1698  0572                     l4697:	
  1699  0572  2792  118A         	fcall	PL24	;call to abstracted procedure
  1700  0574  3017               	movlw	23
  1701  0575                     u5115:	
  1702  0575  1003               	clrc
  1703  0576  0CE4               	rrf	??___fttol+2,f
  1704  0577  0CE3               	rrf	??___fttol+1,f
  1705  0578  0CE2               	rrf	??___fttol,f
  1706  0579  3EFF               	addlw	-1
  1707  057A  1D03               	skipz
  1708  057B  2D75               	goto	u5115
  1709  057C  0862               	movf	??___fttol,w
  1710  057D  00E5               	movwf	___fttol@sign1
  1711  057E  17DF               	bsf	___fttol@f1+1,7
  1712  057F  01E0               	clrf	___fttol@f1+2
  1713  0580  085E               	movf	___fttol@f1,w
  1714  0581  00E6               	movwf	___fttol@lval
  1715  0582  085F               	movf	___fttol@f1+1,w
  1716  0583  00E7               	movwf	___fttol@lval+1
  1717  0584  0860               	movf	___fttol@f1+2,w
  1718  0585  00E8               	movwf	___fttol@lval+2
  1719  0586  308E               	movlw	142
  1720  0587  01E9               	clrf	___fttol@lval+3
  1721  0588  02EA               	subwf	___fttol@exp1,f
  1722  0589  1FEA               	btfss	___fttol@exp1,7
  1723  058A  2D98               	goto	l4717
  1724  058B  086A               	movf	___fttol@exp1,w
  1725  058C  3A80               	xorlw	128
  1726  058D  3E8F               	addlw	143
  1727  058E  1C03               	btfss	3,0
  1728  058F  2D6D               	goto	l4695
  1729  0590                     l4713:	
  1730  0590  1003               	clrc
  1731  0591  0CE9               	rrf	___fttol@lval+3,f
  1732  0592  0CE8               	rrf	___fttol@lval+2,f
  1733  0593  0CE7               	rrf	___fttol@lval+1,f
  1734  0594  0CE6               	rrf	___fttol@lval,f
  1735  0595  0FEA               	incfsz	___fttol@exp1,f
  1736  0596  2D90               	goto	l4713
  1737  0597  2DA6               	goto	l4725
  1738  0598                     l4717:	
  1739  0598  3018               	movlw	24
  1740  0599  026A               	subwf	___fttol@exp1,w
  1741  059A  1803               	btfsc	3,0
  1742  059B  2D6D               	goto	l4695
  1743  059C                     l4723:	
  1744  059C  086A               	movf	___fttol@exp1,w
  1745  059D  1903               	btfsc	3,2
  1746  059E  2DA6               	goto	l4725
  1747  059F  1003               	clrc
  1748  05A0  0DE6               	rlf	___fttol@lval,f
  1749  05A1  0DE7               	rlf	___fttol@lval+1,f
  1750  05A2  0DE8               	rlf	___fttol@lval+2,f
  1751  05A3  0DE9               	rlf	___fttol@lval+3,f
  1752  05A4  03EA               	decf	___fttol@exp1,f
  1753  05A5  2D9C               	goto	l4723
  1754  05A6                     l4725:	
  1755  05A6  0865               	movf	___fttol@sign1,w
  1756  05A7  1903               	btfsc	3,2
  1757  05A8  2DB4               	goto	l4729
  1758  05A9  09E6               	comf	___fttol@lval,f
  1759  05AA  09E7               	comf	___fttol@lval+1,f
  1760  05AB  09E8               	comf	___fttol@lval+2,f
  1761  05AC  09E9               	comf	___fttol@lval+3,f
  1762  05AD  0AE6               	incf	___fttol@lval,f
  1763  05AE  1903               	skipnz
  1764  05AF  0AE7               	incf	___fttol@lval+1,f
  1765  05B0  1903               	skipnz
  1766  05B1  0AE8               	incf	___fttol@lval+2,f
  1767  05B2  1903               	skipnz
  1768  05B3  0AE9               	incf	___fttol@lval+3,f
  1769  05B4                     l4729:	
  1770  05B4  0869               	movf	___fttol@lval+3,w
  1771  05B5  00E1               	movwf	?___fttol+3
  1772  05B6  0868               	movf	___fttol@lval+2,w
  1773  05B7  00E0               	movwf	?___fttol+2
  1774  05B8  0867               	movf	___fttol@lval+1,w
  1775  05B9  00DF               	movwf	?___fttol+1
  1776  05BA  0866               	movf	___fttol@lval,w
  1777  05BB  00DE               	movwf	?___fttol
  1778  05BC  0008               	return
  1779  05BD                     __end_of___fttol:	
  1780  05BD                     __ptext12:	
  1781 ;; *************** function ___lwtoft *****************
  1782 ;; Defined at:
  1783 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  c               2    3[BANK0 ] unsigned int 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  3    3[BANK0 ] float 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, pclath, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 300/0
  1794 ;;		On exit  : 300/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1797 ;;      Params:         0       3       0       0
  1798 ;;      Locals:         0       0       0       0
  1799 ;;      Temps:          0       0       0       0
  1800 ;;      Totals:         0       3       0       0
  1801 ;;Total ram usage:        3 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    3
  1804 ;; This function calls:
  1805 ;;		___ftpack
  1806 ;; This function is called by:
  1807 ;;		_workCtr
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function ___lwtoft
  1813  05BD                     ___lwtoft:	
  1814                           
  1815                           ;incstack = 0
  1816                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1817  05BD  084C               	movf	___lwtoft@c,w
  1818  05BE  00F3               	movwf	___ftpack@arg
  1819  05BF  084D               	movf	___lwtoft@c+1,w
  1820  05C0  00F4               	movwf	___ftpack@arg+1
  1821  05C1  308E               	movlw	142
  1822  05C2  01F5               	clrf	___ftpack@arg+2
  1823  05C3  00F6               	movwf	___ftpack@exp
  1824  05C4  01F7               	clrf	___ftpack@sign
  1825  05C5  25CD               	fcall	___ftpack
  1826  05C6  0873               	movf	?___ftpack,w
  1827  05C7  00CC               	movwf	?___lwtoft
  1828  05C8  0874               	movf	?___ftpack+1,w
  1829  05C9  00CD               	movwf	?___lwtoft+1
  1830  05CA  0875               	movf	?___ftpack+2,w
  1831  05CB  00CE               	movwf	?___lwtoft+2
  1832  05CC  0008               	return
  1833  05CD                     __end_of___lwtoft:	
  1834  05CD                     __ptext15:	
  1835 ;; *************** function ___ftpack *****************
  1836 ;; Defined at:
  1837 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  arg             3    3[COMMON] unsigned um
  1840 ;;  exp             1    6[COMMON] unsigned char 
  1841 ;;  sign            1    7[COMMON] unsigned char 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  3    3[COMMON] float 
  1846 ;; Registers used:
  1847 ;;		wreg, status,2, status,0
  1848 ;; Tracked objects:
  1849 ;;		On entry : 300/0
  1850 ;;		On exit  : 300/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1853 ;;      Params:         5       0       0       0
  1854 ;;      Locals:         0       0       0       0
  1855 ;;      Temps:          0       3       0       0
  1856 ;;      Totals:         5       3       0       0
  1857 ;;Total ram usage:        8 bytes
  1858 ;; Hardware stack levels used:    1
  1859 ;; Hardware stack levels required when called:    2
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		___ftdiv
  1864 ;;		___lwtoft
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           
  1869                           ;psect for function ___ftpack
  1870  05CD                     ___ftpack:	
  1871                           
  1872                           ;incstack = 0
  1873                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1874  05CD  0876               	movf	___ftpack@exp,w
  1875  05CE  1903               	btfsc	3,2
  1876  05CF  2DD5               	goto	l1553
  1877  05D0  0875               	movf	___ftpack@arg+2,w
  1878  05D1  0474               	iorwf	___ftpack@arg+1,w
  1879  05D2  0473               	iorwf	___ftpack@arg,w
  1880  05D3  1D03               	skipz
  1881  05D4  2DDC               	goto	l4367
  1882  05D5                     l1553:	
  1883  05D5  01F3               	clrf	?___ftpack
  1884  05D6  01F4               	clrf	?___ftpack+1
  1885  05D7  01F5               	clrf	?___ftpack+2
  1886  05D8  0008               	return
  1887  05D9                     l4365:	
  1888  05D9  0AF6               	incf	___ftpack@exp,f
  1889  05DA  2799  118A         	fcall	PL36	;call to abstracted procedure
  1890  05DC                     l4367:	
  1891  05DC  30FE               	movlw	254
  1892  05DD  0575               	andwf	___ftpack@arg+2,w
  1893  05DE  1903               	btfsc	3,2
  1894  05DF  2DE9               	goto	l4371
  1895  05E0  2DD9               	goto	l4365
  1896  05E1                     l4369:	
  1897  05E1  0AF6               	incf	___ftpack@exp,f
  1898  05E2  0AF3               	incf	___ftpack@arg,f
  1899  05E3  1903               	skipnz
  1900  05E4  0AF4               	incf	___ftpack@arg+1,f
  1901  05E5  1903               	skipnz
  1902  05E6  0AF5               	incf	___ftpack@arg+2,f
  1903  05E7  2799  118A         	fcall	PL36	;call to abstracted procedure
  1904  05E9                     l4371:	
  1905  05E9  30FF               	movlw	255
  1906  05EA  0575               	andwf	___ftpack@arg+2,w
  1907  05EB  1903               	btfsc	3,2
  1908  05EC  2DF7               	goto	l4375
  1909  05ED  2DE1               	goto	l4369
  1910  05EE                     l4377:	
  1911  05EE  3002               	movlw	2
  1912  05EF  0276               	subwf	___ftpack@exp,w
  1913  05F0  1C03               	btfss	3,0
  1914  05F1  2DF9               	goto	l1565
  1915  05F2  03F6               	decf	___ftpack@exp,f
  1916  05F3  1003               	clrc
  1917  05F4  0DF3               	rlf	___ftpack@arg,f
  1918  05F5  0DF4               	rlf	___ftpack@arg+1,f
  1919  05F6  0DF5               	rlf	___ftpack@arg+2,f
  1920  05F7                     l4375:	
  1921  05F7  1FF4               	btfss	___ftpack@arg+1,7
  1922  05F8  2DEE               	goto	l4377
  1923  05F9                     l1565:	
  1924  05F9  1C76               	btfss	___ftpack@exp,0
  1925  05FA  13F4               	bcf	___ftpack@arg+1,7
  1926  05FB  1003               	clrc
  1927  05FC  0CF6               	rrf	___ftpack@exp,f
  1928  05FD  0876               	movf	___ftpack@exp,w
  1929  05FE  00CB               	movwf	??___ftpack+2
  1930  05FF  01CA               	clrf	??___ftpack+1
  1931  0600  01C9               	clrf	??___ftpack
  1932  0601  0849               	movf	??___ftpack,w
  1933  0602  04F3               	iorwf	___ftpack@arg,f
  1934  0603  084A               	movf	??___ftpack+1,w
  1935  0604  04F4               	iorwf	___ftpack@arg+1,f
  1936  0605  084B               	movf	??___ftpack+2,w
  1937  0606  04F5               	iorwf	___ftpack@arg+2,f
  1938  0607  0877               	movf	___ftpack@sign,w
  1939  0608  1D03               	btfss	3,2
  1940  0609  17F5               	bsf	___ftpack@arg+2,7
  1941  060A  0008               	return
  1942  060B                     __end_of___ftpack:	
  1943  060B                     __ptext11:	
  1944 ;; *************** function _ADC_Sample *****************
  1945 ;; Defined at:
  1946 ;;		line 299 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;  adch            1    wreg     unsigned char 
  1949 ;;  adldo           1    3[COMMON] unsigned char 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  adch            1    1[BANK0 ] unsigned char 
  1952 ;;  j               1    0[BANK0 ] unsigned char 
  1953 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1954 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1955 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1956 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1957 ;;  i               1    2[BANK0 ] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      unsigned char 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 300/0
  1964 ;;		On exit  : 300/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1967 ;;      Params:         1       0       0       0
  1968 ;;      Locals:         0      13       0       0
  1969 ;;      Temps:          4       0       0       0
  1970 ;;      Totals:         5      13       0       0
  1971 ;;Total ram usage:       18 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    2
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_fanCtr
  1978 ;;		_workCtr
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           
  1983                           ;psect for function _ADC_Sample
  1984  060B                     _ADC_Sample:	
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1988                           ;ADC_Sample@adch stored from wreg
  1989  060B  00CA               	movwf	ADC_Sample@adch
  1990                           
  1991                           ;main.c: 301: volatile unsigned long adsum = 0;
  1992                           
  1993                           ;main.c: 302: volatile unsigned int admin = 0, admax = 0;
  1994  060C  2789  118A         	fcall	PL18	;call to abstracted procedure
  1995                           
  1996                           ;main.c: 303: volatile unsigned int ad_temp = 0;
  1997  060E  01D4               	clrf	ADC_Sample@ad_temp	;volatile
  1998  060F  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1999                           
  2000                           ;main.c: 305: if ((!LDO_EN) && (adldo & 0x04) )
  2001  0610  1683               	bsf	3,5	;RP0=1, select bank1
  2002  0611  1D16               	btfss	22,2	;volatile
  2003  0612  1D73               	btfss	ADC_Sample@adldo,2
  2004  0613  2E1C               	goto	l4213
  2005                           
  2006                           ;main.c: 306: {
  2007                           ;main.c: 308: ADCON1 = adldo;
  2008  0614  0873               	movf	ADC_Sample@adldo,w
  2009  0615  0096               	movwf	22	;volatile
  2010                           
  2011                           ;main.c: 309: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2012  0616  3042               	movlw	66
  2013  0617  00F4               	movwf	??_ADC_Sample
  2014  0618                     u5607:	
  2015  0618  0BF4               	decfsz	??_ADC_Sample,f
  2016  0619  2E18               	goto	u5607
  2017  061A  0000               	nop
  2018                           
  2019                           ;main.c: 310: }
  2020  061B  2E1E               	goto	l4215
  2021  061C                     l4213:	
  2022                           
  2023                           ;main.c: 311: else
  2024                           ;main.c: 312: ADCON1 = adldo;
  2025  061C  0873               	movf	ADC_Sample@adldo,w
  2026  061D  0096               	movwf	22	;volatile
  2027  061E                     l4215:	
  2028                           
  2029                           ;main.c: 314: if(adch & 0x10)
  2030  061E  1283               	bcf	3,5	;RP0=0, select bank0
  2031  061F  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0620  1E4A               	btfss	ADC_Sample@adch,4
  2033  0621  2E27               	goto	l4223
  2034                           
  2035                           ;main.c: 315: {
  2036                           ;main.c: 316: CHS4 = 1;
  2037  0622  1683               	bsf	3,5	;RP0=1, select bank1
  2038  0623  1716               	bsf	22,6	;volatile
  2039                           
  2040                           ;main.c: 317: adch &= 0x0f;
  2041  0624  300F               	movlw	15
  2042  0625  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0626  05CA               	andwf	ADC_Sample@adch,f
  2044  0627                     l4223:	
  2045                           
  2046                           ;main.c: 320: for (i = 0; i < 10; i++)
  2047  0627  01CB               	clrf	ADC_Sample@i
  2048  0628                     l4229:	
  2049                           
  2050                           ;main.c: 321: {
  2051                           ;main.c: 322: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2052  0628  084A               	movf	ADC_Sample@adch,w
  2053  0629  00F4               	movwf	??_ADC_Sample
  2054  062A  3001               	movlw	1
  2055  062B  1003               	clrc
  2056  062C                     L3:	
  2057  062C  0DF4               	rlf	??_ADC_Sample,f
  2058  062D  3EFF               	addlw	-1
  2059  062E  1003               	clrc
  2060  062F  1D03               	skipz
  2061  0630  2E2C               	goto	L3
  2062  0631  0D74               	rlf	??_ADC_Sample,w
  2063  0632  3841               	iorlw	65
  2064  0633  1683               	bsf	3,5	;RP0=1, select bank1
  2065  0634  0095               	movwf	21	;volatile
  2066  0635  0000               	nop	;# 
  2067  0636  0000               	nop	;# 
  2068  0637  0000               	nop	;# 
  2069  0638  0000               	nop	;# 
  2070                           
  2071                           ;main.c: 327: GODONE = 1;
  2072  0639  1683               	bsf	3,5	;RP0=1, select bank1
  2073  063A  1303               	bcf	3,6	;RP1=0, select bank1
  2074  063B  1495               	bsf	21,1	;volatile
  2075                           
  2076                           ;main.c: 329: unsigned char j = 0;
  2077  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2078  063D  01C9               	clrf	ADC_Sample@j
  2079  063E                     l991:	
  2080                           ;main.c: 330: while (GODONE)
  2081                           
  2082  063E  1683               	bsf	3,5	;RP0=1, select bank1
  2083  063F  1C95               	btfss	21,1	;volatile
  2084  0640  2E48               	goto	l4239
  2085                           
  2086                           ;main.c: 331: {
  2087                           ;main.c: 332: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2088  0641  2E42               	nop2	;2 cycle nop
  2089  0642  2E43               	nop2	;2 cycle nop
  2090                           
  2091                           ;main.c: 334: if (0 == (--j))
  2092  0643  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0644  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0645  0BC9               	decfsz	ADC_Sample@j,f
  2095  0646  2E3E               	goto	l991
  2096                           
  2097                           ;main.c: 335: return 0;
  2098  0647  3400               	retlw	0
  2099  0648                     l4239:	
  2100                           
  2101                           ;main.c: 336: }
  2102                           ;main.c: 338: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2103  0648  0819               	movf	25,w	;volatile
  2104  0649  1283               	bcf	3,5	;RP0=0, select bank0
  2105  064A  00D4               	movwf	ADC_Sample@ad_temp	;volatile
  2106  064B  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  2107  064C  0ED4               	swapf	ADC_Sample@ad_temp,f	;volatile
  2108  064D  0ED5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2109  064E  30F0               	movlw	240
  2110  064F  05D5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2111  0650  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2112  0651  390F               	andlw	15
  2113  0652  04D5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2114  0653  30F0               	movlw	240
  2115  0654  05D4               	andwf	ADC_Sample@ad_temp,f	;volatile
  2116  0655  1683               	bsf	3,5	;RP0=1, select bank1
  2117  0656  0E18               	swapf	24,w	;volatile
  2118  0657  390F               	andlw	15
  2119  0658  1283               	bcf	3,5	;RP0=0, select bank0
  2120  0659  07D4               	addwf	ADC_Sample@ad_temp,f	;volatile
  2121  065A  1803               	skipnc
  2122  065B  0AD5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2123                           
  2124                           ;main.c: 340: if (0 == admax)
  2125  065C  0852               	movf	ADC_Sample@admax,w	;volatile
  2126  065D  0453               	iorwf	ADC_Sample@admax+1,w	;volatile
  2127  065E  1D03               	btfss	3,2
  2128  065F  2E63               	goto	l4247
  2129                           
  2130                           ;main.c: 341: {
  2131                           ;main.c: 342: admax = ad_temp;
  2132  0660  279E  118A         	fcall	PL40	;call to abstracted procedure
  2133  0662  2E76               	goto	l4253
  2134  0663                     l4247:	
  2135                           ;main.c: 344: }
  2136                           
  2137                           ;main.c: 343: admin = ad_temp;
  2138                           
  2139                           
  2140                           ;main.c: 345: else if (ad_temp > admax)
  2141  0663  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2142  0664  0253               	subwf	ADC_Sample@admax+1,w	;volatile
  2143  0665  1D03               	skipz
  2144  0666  2E69               	goto	u4365
  2145  0667  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2146  0668  0252               	subwf	ADC_Sample@admax,w	;volatile
  2147  0669                     u4365:	
  2148  0669  1803               	skipnc
  2149  066A  2E6E               	goto	l4251
  2150                           
  2151                           ;main.c: 346: admax = ad_temp;
  2152  066B  279E  118A         	fcall	PL40	;call to abstracted procedure
  2153  066D  2E7A               	goto	l997
  2154  066E                     l4251:	
  2155                           
  2156                           ;main.c: 347: else if (ad_temp < admin)
  2157  066E  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2158  066F  0255               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2159  0670  1D03               	skipz
  2160  0671  2E74               	goto	u4375
  2161  0672  0850               	movf	ADC_Sample@admin,w	;volatile
  2162  0673  0254               	subwf	ADC_Sample@ad_temp,w	;volatile
  2163  0674                     u4375:	
  2164  0674  1803               	skipnc
  2165  0675  2E7A               	goto	l997
  2166  0676                     l4253:	
  2167                           
  2168                           ;main.c: 348: admin = ad_temp;
  2169  0676  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2170  0677  00D1               	movwf	ADC_Sample@admin+1	;volatile
  2171  0678  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2172  0679  00D0               	movwf	ADC_Sample@admin	;volatile
  2173  067A                     l997:	
  2174                           
  2175                           ;main.c: 350: adsum += ad_temp;
  2176  067A  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2177  067B  00F4               	movwf	??_ADC_Sample
  2178  067C  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2179  067D  00F5               	movwf	??_ADC_Sample+1
  2180  067E  01F6               	clrf	??_ADC_Sample+2
  2181  067F  01F7               	clrf	??_ADC_Sample+3
  2182  0680  0874               	movf	??_ADC_Sample,w
  2183  0681  07CC               	addwf	ADC_Sample@adsum,f	;volatile
  2184  0682  0875               	movf	??_ADC_Sample+1,w
  2185  0683  1103               	clrz
  2186  0684  1803               	skipnc
  2187  0685  3E01               	addlw	1
  2188  0686  1D03               	btfss	3,2
  2189  0687  07CD               	addwf	ADC_Sample@adsum+1,f	;volatile
  2190  0688  0876               	movf	??_ADC_Sample+2,w
  2191  0689  1103               	clrz
  2192  068A  1803               	skipnc
  2193  068B  3E01               	addlw	1
  2194  068C  1D03               	btfss	3,2
  2195  068D  07CE               	addwf	ADC_Sample@adsum+2,f	;volatile
  2196  068E  0877               	movf	??_ADC_Sample+3,w
  2197  068F  1103               	clrz
  2198  0690  1803               	skipnc
  2199  0691  3E01               	addlw	1
  2200  0692  1D03               	btfss	3,2
  2201  0693  07CF               	addwf	ADC_Sample@adsum+3,f	;volatile
  2202  0694  300A               	movlw	10
  2203  0695  0ACB               	incf	ADC_Sample@i,f
  2204  0696  024B               	subwf	ADC_Sample@i,w
  2205  0697  1C03               	skipc
  2206  0698  2E28               	goto	l4229
  2207                           
  2208                           ;main.c: 351: }
  2209                           ;main.c: 352: adsum -= admax;
  2210  0699  0852               	movf	ADC_Sample@admax,w	;volatile
  2211  069A  00F4               	movwf	??_ADC_Sample
  2212  069B  0853               	movf	ADC_Sample@admax+1,w	;volatile
  2213  069C  277A  118A         	fcall	PL6	;call to abstracted procedure
  2214  069E  1C03               	skipc
  2215  069F  0F77               	incfsz	??_ADC_Sample+3,w
  2216  06A0  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  2217                           
  2218                           ;main.c: 353: if (adsum >= admin)
  2219  06A1  0850               	movf	ADC_Sample@admin,w	;volatile
  2220  06A2  00F4               	movwf	??_ADC_Sample
  2221  06A3  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2222  06A4  00F5               	movwf	??_ADC_Sample+1
  2223  06A5  01F6               	clrf	??_ADC_Sample+2
  2224  06A6  01F7               	clrf	??_ADC_Sample+3
  2225  06A7  0877               	movf	??_ADC_Sample+3,w
  2226  06A8  024F               	subwf	ADC_Sample@adsum+3,w	;volatile
  2227  06A9  1D03               	skipz
  2228  06AA  2EB5               	goto	u4415
  2229  06AB  0876               	movf	??_ADC_Sample+2,w
  2230  06AC  024E               	subwf	ADC_Sample@adsum+2,w	;volatile
  2231  06AD  1D03               	skipz
  2232  06AE  2EB5               	goto	u4415
  2233  06AF  0875               	movf	??_ADC_Sample+1,w
  2234  06B0  024D               	subwf	ADC_Sample@adsum+1,w	;volatile
  2235  06B1  1D03               	skipz
  2236  06B2  2EB5               	goto	u4415
  2237  06B3  0874               	movf	??_ADC_Sample,w
  2238  06B4  024C               	subwf	ADC_Sample@adsum,w	;volatile
  2239  06B5                     u4415:	
  2240  06B5  1C03               	skipc
  2241  06B6  2EC0               	goto	l1001
  2242                           
  2243                           ;main.c: 354: adsum -= admin;
  2244  06B7  0850               	movf	ADC_Sample@admin,w	;volatile
  2245  06B8  00F4               	movwf	??_ADC_Sample
  2246  06B9  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2247  06BA  277A  118A         	fcall	PL6	;call to abstracted procedure
  2248  06BC  1C03               	skipc
  2249  06BD  0F77               	incfsz	??_ADC_Sample+3,w
  2250  06BE  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  2251  06BF  2EC4               	goto	l4263
  2252  06C0                     l1001:	
  2253                           
  2254                           ;main.c: 355: else
  2255                           ;main.c: 356: adsum = 0;
  2256  06C0  01CC               	clrf	ADC_Sample@adsum	;volatile
  2257  06C1  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2258  06C2  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2259  06C3  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2260  06C4                     l4263:	
  2261                           
  2262                           ;main.c: 358: adresult = adsum >> 3;
  2263  06C4  084C               	movf	ADC_Sample@adsum,w	;volatile
  2264  06C5  00F4               	movwf	??_ADC_Sample
  2265  06C6  084D               	movf	ADC_Sample@adsum+1,w	;volatile
  2266  06C7  00F5               	movwf	??_ADC_Sample+1
  2267  06C8  084E               	movf	ADC_Sample@adsum+2,w	;volatile
  2268  06C9  00F6               	movwf	??_ADC_Sample+2
  2269  06CA  084F               	movf	ADC_Sample@adsum+3,w	;volatile
  2270  06CB  00F7               	movwf	??_ADC_Sample+3
  2271  06CC  3003               	movlw	3
  2272  06CD                     u4435:	
  2273  06CD  1003               	clrc
  2274  06CE  0CF7               	rrf	??_ADC_Sample+3,f
  2275  06CF  0CF6               	rrf	??_ADC_Sample+2,f
  2276  06D0  0CF5               	rrf	??_ADC_Sample+1,f
  2277  06D1  0CF4               	rrf	??_ADC_Sample,f
  2278  06D2  3EFF               	addlw	-1
  2279  06D3  1D03               	skipz
  2280  06D4  2ECD               	goto	u4435
  2281  06D5  0875               	movf	??_ADC_Sample+1,w
  2282  06D6  00C8               	movwf	_adresult+1	;volatile
  2283  06D7  0874               	movf	??_ADC_Sample,w
  2284  06D8  00C7               	movwf	_adresult	;volatile
  2285                           
  2286                           ;main.c: 360: adsum = 0;
  2287                           
  2288                           ;main.c: 361: admin = 0;
  2289                           
  2290                           ;main.c: 362: admax = 0;
  2291  06D9  2789               	fcall	PL18	;call to abstracted procedure
  2292                           
  2293                           ;main.c: 363: return 0xA5;
  2294  06DA  34A5               	retlw	165
  2295  06DB                     __end_of_ADC_Sample:	
  2296  06DB                     __ptext5:	
  2297 ;; *************** function _keyLedCtr *****************
  2298 ;; Defined at:
  2299 ;;		line 673 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 300/0
  2310 ;;		On exit  : 300/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2313 ;;      Params:         0       0       0       0
  2314 ;;      Locals:         0       0       0       0
  2315 ;;      Temps:          0       0       0       0
  2316 ;;      Totals:         0       0       0       0
  2317 ;;Total ram usage:        0 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    3
  2320 ;; This function calls:
  2321 ;;		___lwmod
  2322 ;; This function is called by:
  2323 ;;		_workCtr
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _keyLedCtr
  2329  06DB                     _keyLedCtr:	
  2330                           
  2331                           ;main.c: 675: if(shanshuoTime > 0)
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2335  06DB  082A               	movf	_shanshuoTime,w
  2336  06DC  042B               	iorwf	_shanshuoTime+1,w
  2337  06DD  1903               	btfsc	3,2
  2338  06DE  2EF7               	goto	l4499
  2339                           
  2340                           ;main.c: 676: {
  2341                           ;main.c: 677: shanshuoTime--;
  2342  06DF  3001               	movlw	1
  2343  06E0  02AA               	subwf	_shanshuoTime,f
  2344  06E1  3000               	movlw	0
  2345  06E2  1C03               	skipc
  2346  06E3  03AB               	decf	_shanshuoTime+1,f
  2347  06E4  02AB               	subwf	_shanshuoTime+1,f
  2348                           
  2349                           ;main.c: 678: if((shanshuoTime % 150) < 75)
  2350  06E5  3096               	movlw	150
  2351  06E6  00F3               	movwf	___lwmod@divisor
  2352  06E7  01F4               	clrf	___lwmod@divisor+1
  2353  06E8  082B               	movf	_shanshuoTime+1,w
  2354  06E9  00F6               	movwf	___lwmod@dividend+1
  2355  06EA  082A               	movf	_shanshuoTime,w
  2356  06EB  00F5               	movwf	___lwmod@dividend
  2357  06EC  271F  118A         	fcall	___lwmod
  2358  06EE  3000               	movlw	0
  2359  06EF  0274               	subwf	?___lwmod+1,w
  2360  06F0  304B               	movlw	75
  2361  06F1  1903               	skipnz
  2362  06F2  0273               	subwf	?___lwmod,w
  2363  06F3  1803               	skipnc
  2364  06F4  2EFA               	goto	l1100
  2365  06F5                     l4497:	
  2366                           
  2367                           ;main.c: 679: {
  2368                           ;main.c: 680: fanKeyFlag = 0;
  2369  06F5  01B9               	clrf	_fanKeyFlag
  2370                           
  2371                           ;main.c: 681: }
  2372  06F6  2EFC               	goto	l4505
  2373  06F7                     l4499:	
  2374                           
  2375                           ;main.c: 687: else if(workStep > 0)
  2376  06F7  0844               	movf	_workStep,w
  2377  06F8  1903               	btfsc	3,2
  2378  06F9  2EF5               	goto	l4497
  2379  06FA                     l1100:	
  2380                           
  2381                           ;main.c: 682: else
  2382                           ;main.c: 683: {
  2383                           ;main.c: 684: fanKeyFlag = 1;
  2384  06FA  01B9               	clrf	_fanKeyFlag
  2385  06FB  0AB9               	incf	_fanKeyFlag,f
  2386  06FC                     l4505:	
  2387                           
  2388                           ;main.c: 694: }
  2389                           ;main.c: 696: if(shanshuoTime2 > 0)
  2390  06FC  0828               	movf	_shanshuoTime2,w
  2391  06FD  0429               	iorwf	_shanshuoTime2+1,w
  2392  06FE  1903               	btfsc	3,2
  2393  06FF  2F1B               	goto	l4513
  2394                           
  2395                           ;main.c: 697: {
  2396                           ;main.c: 698: shanshuoTime2--;
  2397  0700  3001               	movlw	1
  2398  0701  02A8               	subwf	_shanshuoTime2,f
  2399  0702  3000               	movlw	0
  2400  0703  1C03               	skipc
  2401  0704  03A9               	decf	_shanshuoTime2+1,f
  2402  0705  02A9               	subwf	_shanshuoTime2+1,f
  2403                           
  2404                           ;main.c: 699: if((shanshuoTime2 % 150) < 75)
  2405  0706  3096               	movlw	150
  2406  0707  00F3               	movwf	___lwmod@divisor
  2407  0708  01F4               	clrf	___lwmod@divisor+1
  2408  0709  0829               	movf	_shanshuoTime2+1,w
  2409  070A  00F6               	movwf	___lwmod@dividend+1
  2410  070B  0828               	movf	_shanshuoTime2,w
  2411  070C  00F5               	movwf	___lwmod@dividend
  2412  070D  271F  118A         	fcall	___lwmod
  2413  070F  3000               	movlw	0
  2414  0710  0274               	subwf	?___lwmod+1,w
  2415  0711  304B               	movlw	75
  2416  0712  1903               	skipnz
  2417  0713  0273               	subwf	?___lwmod,w
  2418  0714  1803               	skipnc
  2419  0715  2F18               	goto	l1106
  2420  0716                     l4511:	
  2421                           
  2422                           ;main.c: 700: {
  2423                           ;main.c: 701: wuhuaKeyFlag = 0;
  2424  0716  01B8               	clrf	_wuhuaKeyFlag
  2425                           
  2426                           ;main.c: 702: }
  2427  0717  0008               	return
  2428  0718                     l1106:	
  2429                           
  2430                           ;main.c: 703: else
  2431                           ;main.c: 704: {
  2432                           ;main.c: 705: wuhuaKeyFlag = 1;
  2433  0718  01B8               	clrf	_wuhuaKeyFlag
  2434  0719  0AB8               	incf	_wuhuaKeyFlag,f
  2435  071A  0008               	return
  2436  071B                     l4513:	
  2437                           
  2438                           ;main.c: 708: else if(wuhuaFlag > 0)
  2439  071B  0843               	movf	_wuhuaFlag,w
  2440  071C  1D03               	btfss	3,2
  2441  071D  2F18               	goto	l1106
  2442  071E  2F16               	goto	l4511
  2443  071F                     __end_of_keyLedCtr:	
  2444  071F                     __ptext6:	
  2445 ;; *************** function ___lwmod *****************
  2446 ;; Defined at:
  2447 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  divisor         2    3[COMMON] unsigned int 
  2450 ;;  dividend        2    5[COMMON] unsigned int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  counter         1    7[COMMON] unsigned char 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  2    3[COMMON] unsigned int 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0
  2457 ;; Tracked objects:
  2458 ;;		On entry : 300/0
  2459 ;;		On exit  : 300/0
  2460 ;;		Unchanged: 300/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2462 ;;      Params:         4       0       0       0
  2463 ;;      Locals:         1       0       0       0
  2464 ;;      Temps:          0       0       0       0
  2465 ;;      Totals:         5       0       0       0
  2466 ;;Total ram usage:        5 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    2
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_keyLedCtr
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function ___lwmod
  2478  071F                     ___lwmod:	
  2479                           
  2480                           ;incstack = 0
  2481                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2482  071F  0873               	movf	___lwmod@divisor,w
  2483  0720  0474               	iorwf	___lwmod@divisor+1,w
  2484  0721  1903               	btfsc	3,2
  2485  0722  2F3E               	goto	l4401
  2486  0723  01F7               	clrf	___lwmod@counter
  2487  0724                     L1:	
  2488  0724  0AF7               	incf	___lwmod@counter,f
  2489  0725  1BF4               	btfsc	___lwmod@divisor+1,7
  2490  0726  2F2B               	goto	l4393
  2491  0727  1003               	clrc
  2492  0728  0DF3               	rlf	___lwmod@divisor,f
  2493  0729  0DF4               	rlf	___lwmod@divisor+1,f
  2494  072A  2F24               	goto	L1
  2495  072B                     l4393:	
  2496  072B  0874               	movf	___lwmod@divisor+1,w
  2497  072C  0276               	subwf	___lwmod@dividend+1,w
  2498  072D  1D03               	skipz
  2499  072E  2F31               	goto	u4625
  2500  072F  0873               	movf	___lwmod@divisor,w
  2501  0730  0275               	subwf	___lwmod@dividend,w
  2502  0731                     u4625:	
  2503  0731  1C03               	skipc
  2504  0732  2F3A               	goto	L2
  2505  0733  0873               	movf	___lwmod@divisor,w
  2506  0734  02F5               	subwf	___lwmod@dividend,f
  2507  0735  0874               	movf	___lwmod@divisor+1,w
  2508  0736  1C03               	skipc
  2509  0737  03F6               	decf	___lwmod@dividend+1,f
  2510  0738  02F6               	subwf	___lwmod@dividend+1,f
  2511  0739  1003               	clrc
  2512  073A                     L2:	
  2513  073A  0CF4               	rrf	___lwmod@divisor+1,f
  2514  073B  0CF3               	rrf	___lwmod@divisor,f
  2515  073C  0BF7               	decfsz	___lwmod@counter,f
  2516  073D  2F2B               	goto	l4393
  2517  073E                     l4401:	
  2518  073E  0876               	movf	___lwmod@dividend+1,w
  2519  073F  00F4               	movwf	?___lwmod+1
  2520  0740  0875               	movf	___lwmod@dividend,w
  2521  0741  00F3               	movwf	?___lwmod
  2522  0742  0008               	return
  2523  0743                     __end_of___lwmod:	
  2524  0743                     __ptext9:	
  2525 ;; *************** function _fanInit *****************
  2526 ;; Defined at:
  2527 ;;		line 738 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 300/0
  2538 ;;		On exit  : 300/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2541 ;;      Params:         0       0       0       0
  2542 ;;      Locals:         0       0       0       0
  2543 ;;      Temps:          0       0       0       0
  2544 ;;      Totals:         0       0       0       0
  2545 ;;Total ram usage:        0 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    2
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_fanCtr
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           
  2556                           ;psect for function _fanInit
  2557  0743                     _fanInit:	
  2558  0743                     l4291:	
  2559                           ;incstack = 0
  2560                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2561                           
  2562                           
  2563                           ;main.c: 741: PWMTH = 0x00;
  2564  0743  0198               	clrf	24	;volatile
  2565                           
  2566                           ;main.c: 742: PWMTL = 73;
  2567  0744  3049               	movlw	73
  2568  0745  0097               	movwf	23	;volatile
  2569                           
  2570                           ;main.c: 743: PWMD01H = 0x00;
  2571  0746  019E               	clrf	30	;volatile
  2572                           
  2573                           ;main.c: 744: PWMD1L = fanDuty;
  2574  0747  0842               	movf	_fanDuty,w
  2575  0748  009A               	movwf	26	;volatile
  2576                           
  2577                           ;main.c: 745: PWMCON1 = 0x40;
  2578  0749  3040               	movlw	64
  2579  074A  0096               	movwf	22	;volatile
  2580                           
  2581                           ;main.c: 746: PWMCON2 = 0x00;
  2582  074B  019D               	clrf	29	;volatile
  2583                           
  2584                           ;main.c: 747: PWMCON0 |= 0x22;
  2585  074C  3022               	movlw	34
  2586  074D  0495               	iorwf	21,f	;volatile
  2587  074E  0008               	return
  2588  074F                     __end_of_fanInit:	
  2589  074F                     __ptext8:	
  2590 ;; *************** function _fanStop *****************
  2591 ;; Defined at:
  2592 ;;		line 750 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		status,2
  2601 ;; Tracked objects:
  2602 ;;		On entry : 300/0
  2603 ;;		On exit  : 300/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2606 ;;      Params:         0       0       0       0
  2607 ;;      Locals:         0       0       0       0
  2608 ;;      Temps:          0       0       0       0
  2609 ;;      Totals:         0       0       0       0
  2610 ;;Total ram usage:        0 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_fanCtr
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function _fanStop
  2622  074F                     _fanStop:	
  2623                           
  2624                           ;main.c: 752: PWMD1L = 0;
  2625                           
  2626                           ;incstack = 0
  2627                           ; Regs used in _fanStop: [status,2]
  2628  074F  019A               	clrf	26	;volatile
  2629                           
  2630                           ;main.c: 753: PWMCON0 &= 0xFD;
  2631  0750  1095               	bcf	21,1	;volatile
  2632                           
  2633                           ;main.c: 754: PORTB &= 0x7F;
  2634  0751  1386               	bcf	6,7	;volatile
  2635  0752  0008               	return
  2636  0753                     __end_of_fanStop:	
  2637  0753                     __ptext2:	
  2638 ;; *************** function _wuhuaCtr *****************
  2639 ;; Defined at:
  2640 ;;		line 808 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 200/0
  2651 ;;		On exit  : 200/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2654 ;;      Params:         0       0       0       0
  2655 ;;      Locals:         0       0       0       0
  2656 ;;      Temps:          0       0       0       0
  2657 ;;      Totals:         0       0       0       0
  2658 ;;Total ram usage:        0 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    3
  2661 ;; This function calls:
  2662 ;;		_pwmInit
  2663 ;;		_pwmStop
  2664 ;; This function is called by:
  2665 ;;		_workCtr
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _wuhuaCtr
  2671  0753                     _wuhuaCtr:	
  2672  0753                     l4567:	
  2673                           ;incstack = 0
  2674                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2675                           
  2676                           
  2677                           ;main.c: 810: if(count1s == 0)
  2678  0753  1283               	bcf	3,5	;RP0=0, select bank0
  2679  0754  0845               	movf	_count1s,w
  2680  0755  1D03               	btfss	3,2
  2681  0756  2F5C               	goto	l4573
  2682                           
  2683                           ;main.c: 811: {
  2684                           ;main.c: 812: if(++count10s >= 20)
  2685  0757  3014               	movlw	20
  2686  0758  0AC1               	incf	_count10s,f
  2687  0759  0241               	subwf	_count10s,w
  2688  075A  1803               	btfsc	3,0
  2689                           
  2690                           ;main.c: 813: {
  2691                           ;main.c: 814: count10s = 0;
  2692  075B  01C1               	clrf	_count10s
  2693  075C                     l4573:	
  2694                           
  2695                           ;main.c: 815: }
  2696                           ;main.c: 816: }
  2697                           ;main.c: 817: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 10))
  2698  075C  0343               	decf	_wuhuaFlag,w
  2699  075D  1903               	btfsc	3,2
  2700  075E  2F67               	goto	l4579
  2701  075F  3002               	movlw	2
  2702  0760  0643               	xorwf	_wuhuaFlag,w
  2703  0761  1D03               	btfss	3,2
  2704  0762  2F68               	goto	l4581
  2705  0763  300A               	movlw	10
  2706  0764  0241               	subwf	_count10s,w
  2707  0765  1803               	skipnc
  2708  0766  2F68               	goto	l4581
  2709  0767                     l4579:	
  2710                           
  2711                           ;main.c: 818: {
  2712                           ;main.c: 819: pwmInit();
  2713  0767  2F69               	ljmp	l4275
  2714  0768                     l4581:	
  2715                           ;main.c: 834: }
  2716                           
  2717                           
  2718                           ;main.c: 835: else
  2719                           ;main.c: 836: {
  2720                           ;main.c: 837: pwmStop();
  2721  0768  2F75               	ljmp	l4285
  2722  0769                     __end_of_wuhuaCtr:	
  2723  0769                     __ptext4:	
  2724 ;; *************** function _pwmInit *****************
  2725 ;; Defined at:
  2726 ;;		line 719 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0
  2735 ;; Tracked objects:
  2736 ;;		On entry : 300/0
  2737 ;;		On exit  : 300/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2740 ;;      Params:         0       0       0       0
  2741 ;;      Locals:         0       0       0       0
  2742 ;;      Temps:          0       0       0       0
  2743 ;;      Totals:         0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    2
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_wuhuaCtr
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           
  2755                           ;psect for function _pwmInit
  2756  0769                     _pwmInit:	
  2757  0769                     l4275:	
  2758                           ;incstack = 0
  2759                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2760                           
  2761                           
  2762                           ;main.c: 722: PWMTH = 0x00;
  2763  0769  0198               	clrf	24	;volatile
  2764                           
  2765                           ;main.c: 723: PWMTL = 73;
  2766  076A  3049               	movlw	73
  2767  076B  0097               	movwf	23	;volatile
  2768                           
  2769                           ;main.c: 724: PWMD01H = 0x00;
  2770  076C  019E               	clrf	30	;volatile
  2771                           
  2772                           ;main.c: 725: PWMD0L = 32;
  2773  076D  3020               	movlw	32
  2774  076E  0099               	movwf	25	;volatile
  2775                           
  2776                           ;main.c: 726: PWMCON1 = 0x40;
  2777  076F  3040               	movlw	64
  2778  0770  0096               	movwf	22	;volatile
  2779                           
  2780                           ;main.c: 727: PWMCON2 = 0x00;
  2781  0771  019D               	clrf	29	;volatile
  2782                           
  2783                           ;main.c: 728: PWMCON0 |= 0x21;
  2784  0772  3021               	movlw	33
  2785  0773  0495               	iorwf	21,f	;volatile
  2786  0774  0008               	return
  2787  0775                     __end_of_pwmInit:	
  2788  0775                     __ptext3:	
  2789 ;; *************** function _pwmStop *****************
  2790 ;; Defined at:
  2791 ;;		line 731 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;		None
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;		None
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		status,2
  2800 ;; Tracked objects:
  2801 ;;		On entry : 300/0
  2802 ;;		On exit  : 300/100
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2805 ;;      Params:         0       0       0       0
  2806 ;;      Locals:         0       0       0       0
  2807 ;;      Temps:          0       0       0       0
  2808 ;;      Totals:         0       0       0       0
  2809 ;;Total ram usage:        0 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    2
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_wuhuaCtr
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           
  2820                           ;psect for function _pwmStop
  2821  0775                     _pwmStop:	
  2822  0775                     l4285:	
  2823                           ;incstack = 0
  2824                           ; Regs used in _pwmStop: [status,2]
  2825                           
  2826                           
  2827                           ;main.c: 733: PWMD0L = 0;
  2828  0775  0199               	clrf	25	;volatile
  2829                           
  2830                           ;main.c: 734: PWMCON0 &= 0xFE;
  2831  0776  1015               	bcf	21,0	;volatile
  2832                           
  2833                           ;main.c: 735: PORTA &= 0xDF;
  2834  0777  1683               	bsf	3,5	;RP0=1, select bank1
  2835  0778  1286               	bcf	6,5	;volatile
  2836  0779  0008               	return
  2837  077A                     __end_of_pwmStop:	
  2838  077A                     PL6:	
  2839  077A  00F5               	movwf	??_ADC_Sample+1
  2840  077B  01F6               	clrf	??_ADC_Sample+2
  2841  077C  01F7               	clrf	??_ADC_Sample+3
  2842  077D  0874               	movf	??_ADC_Sample,w
  2843  077E  02CC               	subwf	ADC_Sample@adsum,f	;volatile
  2844  077F  0875               	movf	??_ADC_Sample+1,w
  2845  0780  1C03               	skipc
  2846  0781  0F75               	incfsz	??_ADC_Sample+1,w
  2847  0782  02CD               	subwf	ADC_Sample@adsum+1,f	;volatile
  2848  0783  0876               	movf	??_ADC_Sample+2,w
  2849  0784  1C03               	skipc
  2850  0785  0F76               	incfsz	??_ADC_Sample+2,w
  2851  0786  02CE               	subwf	ADC_Sample@adsum+2,f	;volatile
  2852  0787  0877               	movf	??_ADC_Sample+3,w
  2853  0788  0008               	return
  2854  0789                     __end_ofPL6:	
  2855  0789                     PL18:	
  2856  0789  01CC               	clrf	ADC_Sample@adsum	;volatile
  2857  078A  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2858  078B  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2859  078C  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2860  078D  01D0               	clrf	ADC_Sample@admin	;volatile
  2861  078E  01D1               	clrf	ADC_Sample@admin+1	;volatile
  2862  078F  01D2               	clrf	ADC_Sample@admax	;volatile
  2863  0790  01D3               	clrf	ADC_Sample@admax+1	;volatile
  2864  0791  0008               	return
  2865  0792                     __end_ofPL18:	
  2866  0792                     PL24:	
  2867  0792  085E               	movf	___fttol@f1,w
  2868  0793  00E2               	movwf	??___fttol
  2869  0794  085F               	movf	___fttol@f1+1,w
  2870  0795  00E3               	movwf	??___fttol+1
  2871  0796  0860               	movf	___fttol@f1+2,w
  2872  0797  00E4               	movwf	??___fttol+2
  2873  0798  0008               	return
  2874  0799                     __end_ofPL24:	
  2875  0799                     PL36:	
  2876  0799  1003               	clrc
  2877  079A  0CF5               	rrf	___ftpack@arg+2,f
  2878  079B  0CF4               	rrf	___ftpack@arg+1,f
  2879  079C  0CF3               	rrf	___ftpack@arg,f
  2880  079D  0008               	return
  2881  079E                     __end_ofPL36:	
  2882  079E                     PL40:	
  2883  079E  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2884  079F  00D3               	movwf	ADC_Sample@admax+1	;volatile
  2885  07A0  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2886  07A1  00D2               	movwf	ADC_Sample@admax	;volatile
  2887  07A2  0008               	return
  2888  07A3                     __end_ofPL40:	
  2889  07A3                     PL42:	
  2890  07A3  01CF               	clrf	?___ftdiv
  2891  07A4  01D0               	clrf	?___ftdiv+1
  2892  07A5  01D1               	clrf	?___ftdiv+2
  2893  07A6  0008               	return
  2894  07A7                     __end_ofPL42:	
  2895                           
  2896                           	psect	text16
  2897  0E74                     __ptext16:	
  2898 ;; *************** function _setBatStep *****************
  2899 ;; Defined at:
  2900 ;;		line 547 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;		None
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0, pclath, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 200/0
  2911 ;;		On exit  : 200/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2914 ;;      Params:         0       0       0       0
  2915 ;;      Locals:         0       0       0       0
  2916 ;;      Temps:          0       0       0       0
  2917 ;;      Totals:         0       0       0       0
  2918 ;;Total ram usage:        0 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    3
  2921 ;; This function calls:
  2922 ;;		___lwdiv
  2923 ;; This function is called by:
  2924 ;;		_main
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           
  2929                           ;psect for function _setBatStep
  2930  0E74                     _setBatStep:	
  2931                           
  2932                           ;main.c: 549: if(lowBatLock == 1)
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  2936  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  2937  0E75  0B3D               	decfsz	_lowBatLock,w
  2938  0E76  2E7A               	goto	l4801
  2939                           
  2940                           ;main.c: 550: {
  2941                           ;main.c: 551: showBatStep = 0;
  2942  0E77  01B7               	clrf	_showBatStep
  2943                           
  2944                           ;main.c: 552: curBatStep = 0;
  2945  0E78  01B6               	clrf	_curBatStep
  2946                           
  2947                           ;main.c: 553: }
  2948  0E79  0008               	return
  2949  0E7A                     l4801:	
  2950                           
  2951                           ;main.c: 554: else if(power_ad < 2800)
  2952  0E7A  300A               	movlw	10
  2953  0E7B  027A               	subwf	_power_ad+1,w	;volatile
  2954  0E7C  30F0               	movlw	240
  2955  0E7D  1903               	skipnz
  2956  0E7E  0279               	subwf	_power_ad,w	;volatile
  2957  0E7F  1803               	skipnc
  2958  0E80  2E97               	goto	l4813
  2959                           
  2960                           ;main.c: 555: {
  2961                           ;main.c: 556: if(count10s == 0 && count1s == 0)
  2962  0E81  0841               	movf	_count10s,w
  2963  0E82  1D03               	btfss	3,2
  2964  0E83  2E94               	goto	l1067
  2965  0E84  0845               	movf	_count1s,w
  2966  0E85  1D03               	btfss	3,2
  2967  0E86  2E94               	goto	l1067
  2968                           
  2969                           ;main.c: 557: {
  2970                           ;main.c: 558: if(showBatStep > 1)
  2971  0E87  3002               	movlw	2
  2972  0E88  0237               	subwf	_showBatStep,w
  2973  0E89  1C03               	skipc
  2974  0E8A  2E90               	goto	l1068
  2975                           
  2976                           ;main.c: 559: {
  2977                           ;main.c: 560: if(chrgFlag == 0)
  2978  0E8B  083F               	movf	_chrgFlag,w
  2979  0E8C  1D03               	btfss	3,2
  2980  0E8D  2E92               	goto	l1070
  2981                           
  2982                           ;main.c: 561: showBatStep--;
  2983  0E8E  03B7               	decf	_showBatStep,f
  2984  0E8F  2E92               	goto	l1070
  2985  0E90                     l1068:	
  2986                           
  2987                           ;main.c: 563: else
  2988                           ;main.c: 564: {
  2989                           ;main.c: 565: showBatStep = 1;
  2990  0E90  01B7               	clrf	_showBatStep
  2991  0E91  0AB7               	incf	_showBatStep,f
  2992  0E92                     l1070:	
  2993                           
  2994                           ;main.c: 566: }
  2995                           ;main.c: 567: curBatStep = 1;
  2996  0E92  01B6               	clrf	_curBatStep
  2997  0E93  0AB6               	incf	_curBatStep,f
  2998  0E94                     l1067:	
  2999                           
  3000                           ;main.c: 568: }
  3001                           ;main.c: 569: curBatStep = 1;
  3002  0E94  01B6               	clrf	_curBatStep
  3003  0E95  0AB6               	incf	_curBatStep,f
  3004                           
  3005                           ;main.c: 570: }
  3006  0E96  0008               	return
  3007  0E97                     l4813:	
  3008                           
  3009                           ;main.c: 571: else
  3010                           ;main.c: 572: {
  3011                           ;main.c: 573: if(power_ad < 3600)
  3012  0E97  300E               	movlw	14
  3013  0E98  027A               	subwf	_power_ad+1,w	;volatile
  3014  0E99  3010               	movlw	16
  3015  0E9A  1903               	skipnz
  3016  0E9B  0279               	subwf	_power_ad,w	;volatile
  3017  0E9C  1803               	skipnc
  3018  0E9D  2EAD               	goto	l4817
  3019                           
  3020                           ;main.c: 574: {
  3021                           ;main.c: 575: curBatStep = (power_ad - 2800)/40;
  3022  0E9E  3028               	movlw	40
  3023  0E9F  00F3               	movwf	___lwdiv@divisor
  3024  0EA0  01F4               	clrf	___lwdiv@divisor+1
  3025  0EA1  0879               	movf	_power_ad,w	;volatile
  3026  0EA2  3E10               	addlw	16
  3027  0EA3  00F5               	movwf	___lwdiv@dividend
  3028  0EA4  087A               	movf	_power_ad+1,w	;volatile
  3029  0EA5  1803               	skipnc
  3030  0EA6  3E01               	addlw	1
  3031  0EA7  3EF5               	addlw	245
  3032  0EA8  00F6               	movwf	___lwdiv@dividend+1
  3033  0EA9  2702  158A         	fcall	___lwdiv
  3034  0EAB  0873               	movf	?___lwdiv,w
  3035  0EAC  2EBC               	goto	L5
  3036  0EAD                     l4817:	
  3037                           ;main.c: 576: }
  3038                           
  3039                           
  3040                           ;main.c: 577: else
  3041                           ;main.c: 578: {
  3042                           ;main.c: 579: curBatStep = 20 + ((power_ad - 3600)/6);
  3043  0EAD  3006               	movlw	6
  3044  0EAE  00F3               	movwf	___lwdiv@divisor
  3045  0EAF  01F4               	clrf	___lwdiv@divisor+1
  3046  0EB0  0879               	movf	_power_ad,w	;volatile
  3047  0EB1  3EF0               	addlw	240
  3048  0EB2  00F5               	movwf	___lwdiv@dividend
  3049  0EB3  087A               	movf	_power_ad+1,w	;volatile
  3050  0EB4  1803               	skipnc
  3051  0EB5  3E01               	addlw	1
  3052  0EB6  3EF1               	addlw	241
  3053  0EB7  00F6               	movwf	___lwdiv@dividend+1
  3054  0EB8  2702  158A         	fcall	___lwdiv
  3055  0EBA  0873               	movf	?___lwdiv,w
  3056  0EBB  3E14               	addlw	20
  3057  0EBC                     L5:	
  3058  0EBC  00B6               	movwf	_curBatStep
  3059                           
  3060                           ;main.c: 580: }
  3061                           ;main.c: 581: if(curBatStep > 99)
  3062  0EBD  3064               	movlw	100
  3063  0EBE  0236               	subwf	_curBatStep,w
  3064  0EBF  1C03               	skipc
  3065  0EC0  2EC3               	goto	l4823
  3066                           
  3067                           ;main.c: 582: {
  3068                           ;main.c: 583: curBatStep = 99;
  3069  0EC1  3063               	movlw	99
  3070  0EC2  00B6               	movwf	_curBatStep
  3071  0EC3                     l4823:	
  3072                           
  3073                           ;main.c: 584: }
  3074                           ;main.c: 586: if(chrgFlag)
  3075  0EC3  083F               	movf	_chrgFlag,w
  3076  0EC4  1903               	btfsc	3,2
  3077  0EC5  2EE4               	goto	l4837
  3078                           
  3079                           ;main.c: 587: {
  3080                           ;main.c: 588: if(curBatStep > showBatStep)
  3081  0EC6  0836               	movf	_curBatStep,w
  3082  0EC7  0237               	subwf	_showBatStep,w
  3083  0EC8  1803               	skipnc
  3084  0EC9  2EE0               	goto	l4835
  3085                           
  3086                           ;main.c: 589: {
  3087                           ;main.c: 590: if(++count30s >= 10000 && showBatStep < 99)
  3088  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  3089  0ECB  0AB4               	incf	_count30s^(0+128),f
  3090  0ECC  1903               	skipnz
  3091  0ECD  0AB5               	incf	(_count30s+1)^(0+128),f
  3092  0ECE  3027               	movlw	39
  3093  0ECF  0235               	subwf	(_count30s+1)^(0+128),w
  3094  0ED0  3010               	movlw	16
  3095  0ED1  1903               	skipnz
  3096  0ED2  0234               	subwf	_count30s^(0+128),w
  3097  0ED3  1C03               	skipc
  3098  0ED4  0008               	return
  3099  0ED5  3063               	movlw	99
  3100  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  3101  0ED7  0237               	subwf	_showBatStep,w
  3102  0ED8  1803               	skipnc
  3103  0ED9  0008               	return
  3104                           
  3105                           ;main.c: 591: {
  3106                           ;main.c: 592: count30s = 0;
  3107  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  3108  0EDB  01B4               	clrf	_count30s^(0+128)
  3109  0EDC  01B5               	clrf	(_count30s+1)^(0+128)
  3110                           
  3111                           ;main.c: 593: showBatStep++;
  3112  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0EDE  0AB7               	incf	_showBatStep,f
  3114  0EDF  0008               	return
  3115  0EE0                     l4835:	
  3116                           
  3117                           ;main.c: 597: else
  3118                           ;main.c: 598: {
  3119                           ;main.c: 599: count30s = 0;
  3120  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  3121  0EE1  01B4               	clrf	_count30s^(0+128)
  3122  0EE2  01B5               	clrf	(_count30s+1)^(0+128)
  3123  0EE3  0008               	return
  3124  0EE4                     l4837:	
  3125                           
  3126                           ;main.c: 602: else
  3127                           ;main.c: 603: {
  3128                           ;main.c: 604: if(curBatStep < showBatStep && showBatStep > 1)
  3129  0EE4  0837               	movf	_showBatStep,w
  3130  0EE5  0236               	subwf	_curBatStep,w
  3131  0EE6  1803               	skipnc
  3132  0EE7  2EE0               	goto	l4835
  3133  0EE8  3002               	movlw	2
  3134  0EE9  0237               	subwf	_showBatStep,w
  3135  0EEA  1C03               	skipc
  3136  0EEB  2EE0               	goto	l4835
  3137                           
  3138                           ;main.c: 605: {
  3139                           ;main.c: 606: if(++count30s >= 2500 && showBatStep > 1)
  3140  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  3141  0EED  0AB4               	incf	_count30s^(0+128),f
  3142  0EEE  1903               	skipnz
  3143  0EEF  0AB5               	incf	(_count30s+1)^(0+128),f
  3144  0EF0  3009               	movlw	9
  3145  0EF1  0235               	subwf	(_count30s+1)^(0+128),w
  3146  0EF2  30C4               	movlw	196
  3147  0EF3  1903               	skipnz
  3148  0EF4  0234               	subwf	_count30s^(0+128),w
  3149  0EF5  1C03               	skipc
  3150  0EF6  0008               	return
  3151  0EF7  3002               	movlw	2
  3152  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0EF9  0237               	subwf	_showBatStep,w
  3154  0EFA  1C03               	skipc
  3155  0EFB  0008               	return
  3156                           
  3157                           ;main.c: 607: {
  3158                           ;main.c: 608: count30s = 0;
  3159  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0EFD  01B4               	clrf	_count30s^(0+128)
  3161  0EFE  01B5               	clrf	(_count30s+1)^(0+128)
  3162                           
  3163                           ;main.c: 609: showBatStep--;
  3164  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  3165  0F00  03B7               	decf	_showBatStep,f
  3166  0F01  0008               	return
  3167  0F02                     __end_of_setBatStep:	
  3168  0F02                     __ptext17:	
  3169 ;; *************** function ___lwdiv *****************
  3170 ;; Defined at:
  3171 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  divisor         2    3[COMMON] unsigned int 
  3174 ;;  dividend        2    5[COMMON] unsigned int 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  quotient        2    1[BANK0 ] unsigned int 
  3177 ;;  counter         1    0[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  2    3[COMMON] unsigned int 
  3180 ;; Registers used:
  3181 ;;		wreg, status,2, status,0
  3182 ;; Tracked objects:
  3183 ;;		On entry : 300/0
  3184 ;;		On exit  : 300/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3187 ;;      Params:         4       0       0       0
  3188 ;;      Locals:         0       3       0       0
  3189 ;;      Temps:          0       0       0       0
  3190 ;;      Totals:         4       3       0       0
  3191 ;;Total ram usage:        7 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    2
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_setBatStep
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function ___lwdiv
  3203  0F02                     ___lwdiv:	
  3204                           
  3205                           ;incstack = 0
  3206                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3207  0F02  01CA               	clrf	___lwdiv@quotient
  3208  0F03  01CB               	clrf	___lwdiv@quotient+1
  3209  0F04  0873               	movf	___lwdiv@divisor,w
  3210  0F05  0474               	iorwf	___lwdiv@divisor+1,w
  3211  0F06  1903               	btfsc	3,2
  3212  0F07  2F27               	goto	l4755
  3213  0F08  01C9               	clrf	___lwdiv@counter
  3214  0F09                     L6:	
  3215  0F09  0AC9               	incf	___lwdiv@counter,f
  3216  0F0A  1BF4               	btfsc	___lwdiv@divisor+1,7
  3217  0F0B  2F10               	goto	l4743
  3218  0F0C  1003               	clrc
  3219  0F0D  0DF3               	rlf	___lwdiv@divisor,f
  3220  0F0E  0DF4               	rlf	___lwdiv@divisor+1,f
  3221  0F0F  2F09               	goto	L6
  3222  0F10                     l4743:	
  3223  0F10  1003               	clrc
  3224  0F11  0DCA               	rlf	___lwdiv@quotient,f
  3225  0F12  0DCB               	rlf	___lwdiv@quotient+1,f
  3226  0F13  0874               	movf	___lwdiv@divisor+1,w
  3227  0F14  0276               	subwf	___lwdiv@dividend+1,w
  3228  0F15  1D03               	skipz
  3229  0F16  2F19               	goto	u5205
  3230  0F17  0873               	movf	___lwdiv@divisor,w
  3231  0F18  0275               	subwf	___lwdiv@dividend,w
  3232  0F19                     u5205:	
  3233  0F19  1C03               	skipc
  3234  0F1A  2F23               	goto	L7
  3235  0F1B  0873               	movf	___lwdiv@divisor,w
  3236  0F1C  02F5               	subwf	___lwdiv@dividend,f
  3237  0F1D  0874               	movf	___lwdiv@divisor+1,w
  3238  0F1E  1C03               	skipc
  3239  0F1F  03F6               	decf	___lwdiv@dividend+1,f
  3240  0F20  02F6               	subwf	___lwdiv@dividend+1,f
  3241  0F21  144A               	bsf	___lwdiv@quotient,0
  3242  0F22  1003               	clrc
  3243  0F23                     L7:	
  3244  0F23  0CF4               	rrf	___lwdiv@divisor+1,f
  3245  0F24  0CF3               	rrf	___lwdiv@divisor,f
  3246  0F25  0BC9               	decfsz	___lwdiv@counter,f
  3247  0F26  2F10               	goto	l4743
  3248  0F27                     l4755:	
  3249  0F27  084B               	movf	___lwdiv@quotient+1,w
  3250  0F28  00F4               	movwf	?___lwdiv+1
  3251  0F29  084A               	movf	___lwdiv@quotient,w
  3252  0F2A  00F3               	movwf	?___lwdiv
  3253  0F2B  0008               	return
  3254  0F2C                     __end_of___lwdiv:	
  3255                           
  3256                           	psect	text18
  3257  0DFD                     __ptext18:	
  3258 ;; *************** function _chrgCtr *****************
  3259 ;; Defined at:
  3260 ;;		line 621 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 300/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3274 ;;      Params:         0       0       0       0
  3275 ;;      Locals:         0       0       0       0
  3276 ;;      Temps:          0       0       0       0
  3277 ;;      Totals:         0       0       0       0
  3278 ;;Total ram usage:        0 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    4
  3281 ;; This function calls:
  3282 ;;		_showBatLed
  3283 ;; This function is called by:
  3284 ;;		_main
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           
  3289                           ;psect for function _chrgCtr
  3290  0DFD                     _chrgCtr:	
  3291                           
  3292                           ;main.c: 623: if(PORTB & 0x01)
  3293                           
  3294                           ;incstack = 0
  3295                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3296  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0DFF  1C06               	btfss	6,0	;volatile
  3299  0E00  2E10               	goto	l4019
  3300                           
  3301                           ;main.c: 624: {
  3302                           ;main.c: 625: chrgFlag = 1;
  3303  0E01  01BF               	clrf	_chrgFlag
  3304  0E02  0ABF               	incf	_chrgFlag,f
  3305                           
  3306                           ;main.c: 626: firstLock = 0;
  3307  0E03  01EB               	clrf	_firstLock
  3308                           
  3309                           ;main.c: 627: lowBatLock = 0;
  3310  0E04  01BD               	clrf	_lowBatLock
  3311                           
  3312                           ;main.c: 628: showBatLed();
  3313  0E05  2629  158A         	fcall	_showBatLed
  3314                           
  3315                           ;main.c: 629: if(PORTB & 0x02)
  3316  0E07  1C86               	btfss	6,1	;volatile
  3317  0E08  2E0E               	goto	l4015
  3318                           
  3319                           ;main.c: 630: {
  3320                           ;main.c: 631: if(++chrgFullTime > 200)
  3321  0E09  30C9               	movlw	201
  3322  0E0A  0ABE               	incf	_chrgFullTime,f
  3323  0E0B  023E               	subwf	_chrgFullTime,w
  3324  0E0C  1C03               	skipc
  3325  0E0D  0008               	return
  3326  0E0E                     l4015:	
  3327                           
  3328                           ;main.c: 634: chrgFullFlag = 1;
  3329  0E0E  01BE               	clrf	_chrgFullTime
  3330  0E0F  0008               	return
  3331  0E10                     l4019:	
  3332                           
  3333                           ;main.c: 643: else
  3334                           ;main.c: 644: {
  3335                           ;main.c: 645: chrgFlag = 0;
  3336  0E10  01BF               	clrf	_chrgFlag
  3337                           
  3338                           ;main.c: 647: chrgFullFlag = 0;
  3339  0E11  01BE               	clrf	_chrgFullTime
  3340                           
  3341                           ;main.c: 649: if(firstTime == 0)
  3342  0E12  086C               	movf	_firstTime,w
  3343  0E13  1D03               	btfss	3,2
  3344  0E14  2E1F               	goto	l4031
  3345                           
  3346                           ;main.c: 650: {
  3347                           ;main.c: 651: if(workStep == 0 && wuhuaFlag == 0)
  3348  0E15  0844               	movf	_workStep,w
  3349  0E16  1D03               	btfss	3,2
  3350  0E17  2E1E               	goto	l4029
  3351  0E18  0843               	movf	_wuhuaFlag,w
  3352  0E19  1D03               	btfss	3,2
  3353  0E1A  2E1E               	goto	l4029
  3354                           
  3355                           ;main.c: 652: {
  3356                           ;main.c: 653: showNumShi = 0;
  3357  0E1B  01EE               	clrf	_showNumShi
  3358                           
  3359                           ;main.c: 654: showNumGe = 0;
  3360  0E1C  01ED               	clrf	_showNumGe
  3361                           
  3362                           ;main.c: 655: }
  3363  0E1D  0008               	return
  3364  0E1E                     l4029:	
  3365                           
  3366                           ;main.c: 656: else
  3367                           ;main.c: 657: {
  3368                           ;main.c: 658: showBatLed();
  3369  0E1E  2E29               	ljmp	l3383
  3370  0E1F                     l4031:	
  3371                           
  3372                           ;main.c: 661: else
  3373                           ;main.c: 662: {
  3374                           ;main.c: 663: if(showBatStep < curBatStep)
  3375  0E1F  0836               	movf	_curBatStep,w
  3376  0E20  0237               	subwf	_showBatStep,w
  3377  0E21  1803               	skipnc
  3378  0E22  2E25               	goto	l1095
  3379                           
  3380                           ;main.c: 664: {
  3381                           ;main.c: 665: showBatStep = curBatStep;
  3382  0E23  0836               	movf	_curBatStep,w
  3383  0E24  00B7               	movwf	_showBatStep
  3384  0E25                     l1095:	
  3385                           
  3386                           ;main.c: 666: }
  3387                           ;main.c: 667: showNumShi = 0x7F;
  3388  0E25  307F               	movlw	127
  3389  0E26  00EE               	movwf	_showNumShi
  3390                           
  3391                           ;main.c: 668: showNumGe = 0x7F;
  3392  0E27  00ED               	movwf	_showNumGe
  3393  0E28  0008               	return
  3394  0E29                     __end_of_chrgCtr:	
  3395  0E29                     __ptext19:	
  3396 ;; *************** function _showBatLed *****************
  3397 ;; Defined at:
  3398 ;;		line 541 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 300/0
  3409 ;;		On exit  : 300/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3412 ;;      Params:         0       0       0       0
  3413 ;;      Locals:         0       0       0       0
  3414 ;;      Temps:          0       0       0       0
  3415 ;;      Totals:         0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    3
  3419 ;; This function calls:
  3420 ;;		___lbdiv
  3421 ;;		___lbmod
  3422 ;; This function is called by:
  3423 ;;		_chrgCtr
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           
  3428                           ;psect for function _showBatLed
  3429  0E29                     _showBatLed:	
  3430  0E29                     l3383:	
  3431                           ;incstack = 0
  3432                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3433                           
  3434                           
  3435                           ;main.c: 543: showNumShi = numArray[showBatStep/10];
  3436  0E29  300A               	movlw	10
  3437  0E2A  00F3               	movwf	___lbdiv@divisor
  3438  0E2B  0837               	movf	_showBatStep,w
  3439  0E2C  263D               	fcall	___lbdiv
  3440  0E2D  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3441  0E2E  0084               	movwf	4
  3442  0E2F  158A  2028  158A   	fcall	stringdir
  3443  0E32  00EE               	movwf	_showNumShi
  3444                           
  3445                           ;main.c: 544: showNumGe = numArray[showBatStep%10];
  3446  0E33  300A               	movlw	10
  3447  0E34  00F3               	movwf	___lbmod@divisor
  3448  0E35  0837               	movf	_showBatStep,w
  3449  0E36  2658               	fcall	___lbmod
  3450  0E37  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3451  0E38  0084               	movwf	4
  3452  0E39  158A  2028         	fcall	stringdir
  3453  0E3B  00ED               	movwf	_showNumGe
  3454  0E3C  0008               	return
  3455  0E3D                     __end_of_showBatLed:	
  3456  0E3D                     __ptext21:	
  3457 ;; *************** function ___lbdiv *****************
  3458 ;; Defined at:
  3459 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  dividend        1    wreg     unsigned char 
  3462 ;;  divisor         1    3[COMMON] unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  dividend        1    4[COMMON] unsigned char 
  3465 ;;  quotient        1    6[COMMON] unsigned char 
  3466 ;;  counter         1    5[COMMON] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      unsigned char 
  3469 ;; Registers used:
  3470 ;;		wreg, status,2, status,0
  3471 ;; Tracked objects:
  3472 ;;		On entry : 300/0
  3473 ;;		On exit  : 300/0
  3474 ;;		Unchanged: 300/0
  3475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3476 ;;      Params:         1       0       0       0
  3477 ;;      Locals:         3       0       0       0
  3478 ;;      Temps:          0       0       0       0
  3479 ;;      Totals:         4       0       0       0
  3480 ;;Total ram usage:        4 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    2
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_showBatLed
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           
  3491                           ;psect for function ___lbdiv
  3492  0E3D                     ___lbdiv:	
  3493                           
  3494                           ;incstack = 0
  3495                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3496                           ;___lbdiv@dividend stored from wreg
  3497  0E3D  00F4               	movwf	___lbdiv@dividend
  3498  0E3E  01F6               	clrf	___lbdiv@quotient
  3499  0E3F  0873               	movf	___lbdiv@divisor,w
  3500  0E40  1903               	btfsc	3,2
  3501  0E41  2E56               	goto	l3249
  3502  0E42  01F5               	clrf	___lbdiv@counter
  3503  0E43                     l3235:	
  3504  0E43  0AF5               	incf	___lbdiv@counter,f
  3505  0E44  1BF3               	btfsc	___lbdiv@divisor,7
  3506  0E45  2E49               	goto	l1659
  3507  0E46  1003               	clrc
  3508  0E47  0DF3               	rlf	___lbdiv@divisor,f
  3509  0E48  2E43               	goto	l3235
  3510  0E49                     l1659:	
  3511  0E49  1003               	clrc
  3512  0E4A  0DF6               	rlf	___lbdiv@quotient,f
  3513  0E4B  0873               	movf	___lbdiv@divisor,w
  3514  0E4C  0274               	subwf	___lbdiv@dividend,w
  3515  0E4D  1C03               	skipc
  3516  0E4E  2E53               	goto	L9
  3517  0E4F  0873               	movf	___lbdiv@divisor,w
  3518  0E50  02F4               	subwf	___lbdiv@dividend,f
  3519  0E51  1476               	bsf	___lbdiv@quotient,0
  3520  0E52  1003               	clrc
  3521  0E53                     L9:	
  3522  0E53  0CF3               	rrf	___lbdiv@divisor,f
  3523  0E54  0BF5               	decfsz	___lbdiv@counter,f
  3524  0E55  2E49               	goto	l1659
  3525  0E56                     l3249:	
  3526  0E56  0876               	movf	___lbdiv@quotient,w
  3527  0E57  0008               	return
  3528  0E58                     __end_of___lbdiv:	
  3529  0E58                     __ptext20:	
  3530 ;; *************** function ___lbmod *****************
  3531 ;; Defined at:
  3532 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  dividend        1    wreg     unsigned char 
  3535 ;;  divisor         1    3[COMMON] unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  dividend        1    5[COMMON] unsigned char 
  3538 ;;  rem             1    7[COMMON] unsigned char 
  3539 ;;  counter         1    6[COMMON] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 300/0
  3546 ;;		On exit  : 300/0
  3547 ;;		Unchanged: 300/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3549 ;;      Params:         1       0       0       0
  3550 ;;      Locals:         3       0       0       0
  3551 ;;      Temps:          1       0       0       0
  3552 ;;      Totals:         5       0       0       0
  3553 ;;Total ram usage:        5 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    2
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_showBatLed
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function ___lbmod
  3565  0E58                     ___lbmod:	
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3569                           ;___lbmod@dividend stored from wreg
  3570  0E58  00F5               	movwf	___lbmod@dividend
  3571  0E59  3008               	movlw	8
  3572  0E5A  00F6               	movwf	___lbmod@counter
  3573  0E5B  01F7               	clrf	___lbmod@rem
  3574  0E5C                     l3257:	
  3575  0E5C  0875               	movf	___lbmod@dividend,w
  3576  0E5D  00F4               	movwf	??___lbmod
  3577  0E5E  3007               	movlw	7
  3578  0E5F  1003               	clrc
  3579  0E60                     L8:	
  3580  0E60  0CF4               	rrf	??___lbmod,f
  3581  0E61  3EFF               	addlw	-1
  3582  0E62  1003               	clrc
  3583  0E63  1D03               	skipz
  3584  0E64  2E60               	goto	L8
  3585  0E65  0D77               	rlf	___lbmod@rem,w
  3586  0E66  0474               	iorwf	??___lbmod,w
  3587  0E67  00F7               	movwf	___lbmod@rem
  3588  0E68  1003               	clrc
  3589  0E69  0DF5               	rlf	___lbmod@dividend,f
  3590  0E6A  0873               	movf	___lbmod@divisor,w
  3591  0E6B  0277               	subwf	___lbmod@rem,w
  3592  0E6C  1C03               	skipc
  3593  0E6D  2E70               	goto	l3265
  3594  0E6E  0873               	movf	___lbmod@divisor,w
  3595  0E6F  02F7               	subwf	___lbmod@rem,f
  3596  0E70                     l3265:	
  3597  0E70  0BF6               	decfsz	___lbmod@counter,f
  3598  0E71  2E5C               	goto	l3257
  3599  0E72  0877               	movf	___lbmod@rem,w
  3600  0E73  0008               	return
  3601  0E74                     __end_of___lbmod:	
  3602                           
  3603                           	psect	text25
  3604  07A7                     __ptext25:	
  3605 ;; *************** function _KeyServer *****************
  3606 ;; Defined at:
  3607 ;;		line 130 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0
  3616 ;; Tracked objects:
  3617 ;;		On entry : 300/0
  3618 ;;		On exit  : 300/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3621 ;;      Params:         0       0       0       0
  3622 ;;      Locals:         0       0       0       0
  3623 ;;      Temps:          0       0       0       0
  3624 ;;      Totals:         0       0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    2
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_main
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _KeyServer
  3637  07A7                     _KeyServer:	
  3638                           
  3639                           ;main.c: 132: static unsigned char KeyOldFlag = 0;
  3640                           ;main.c: 133: if (KeyFlag[0])
  3641                           
  3642                           ;incstack = 0
  3643                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3644  07A7  082C               	movf	_KeyFlag,w	;volatile
  3645  07A8  1903               	btfsc	3,2
  3646  07A9  2FEA               	goto	l3843
  3647                           
  3648                           ;main.c: 134: {
  3649                           ;main.c: 135: if (KeyFlag[0] != KeyOldFlag)
  3650  07AA  082C               	movf	_KeyFlag,w	;volatile
  3651  07AB  0634               	xorwf	KeyServer@KeyOldFlag,w
  3652  07AC  1903               	skipnz
  3653  07AD  0008               	return
  3654                           
  3655                           ;main.c: 136: {
  3656                           ;main.c: 138: KeyOldFlag ^= KeyFlag[0];
  3657  07AE  082C               	movf	_KeyFlag,w	;volatile
  3658  07AF  06B4               	xorwf	KeyServer@KeyOldFlag,f
  3659                           
  3660                           ;main.c: 139: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3661  07B0  1834               	btfsc	KeyServer@KeyOldFlag,0
  3662  07B1  1C2C               	btfss	_KeyFlag,0	;volatile
  3663  07B2  2FC9               	goto	l3819
  3664  07B3  086B               	movf	_firstLock,w
  3665  07B4  1D03               	btfss	3,2
  3666  07B5  2FC9               	goto	l3819
  3667                           
  3668                           ;main.c: 140: {
  3669                           ;main.c: 142: if(lowBatLock == 1)
  3670  07B6  0B3D               	decfsz	_lowBatLock,w
  3671  07B7  2FBB               	goto	l3809
  3672                           
  3673                           ;main.c: 143: {
  3674                           ;main.c: 144: shanshuoTime = 450;
  3675  07B8  27EC  118A         	fcall	PL38	;call to abstracted procedure
  3676                           
  3677                           ;main.c: 145: }
  3678  07BA  2FC0               	goto	l3813
  3679  07BB                     l3809:	
  3680                           
  3681                           ;main.c: 146: else if(++workStep > 2)
  3682  07BB  3003               	movlw	3
  3683  07BC  0AC4               	incf	_workStep,f
  3684  07BD  0244               	subwf	_workStep,w
  3685  07BE  1803               	btfsc	3,0
  3686                           
  3687                           ;main.c: 147: {
  3688                           ;main.c: 148: workStep = 0;
  3689  07BF  01C4               	clrf	_workStep
  3690  07C0                     l3813:	
  3691                           
  3692                           ;main.c: 149: }
  3693                           ;main.c: 150: if(workStep == 2)
  3694  07C0  3002               	movlw	2
  3695  07C1  0644               	xorwf	_workStep,w
  3696  07C2  1D03               	btfss	3,2
  3697  07C3  2FC7               	goto	l3817
  3698                           
  3699                           ;main.c: 151: {
  3700                           ;main.c: 152: shanshuoTime = 450;
  3701  07C4  27EC  118A         	fcall	PL38	;call to abstracted procedure
  3702                           
  3703                           ;main.c: 153: }
  3704  07C6  2FC9               	goto	l3819
  3705  07C7                     l3817:	
  3706                           
  3707                           ;main.c: 154: else
  3708                           ;main.c: 155: {
  3709                           ;main.c: 156: shanshuoTime = 0;
  3710  07C7  01AA               	clrf	_shanshuoTime
  3711  07C8  01AB               	clrf	_shanshuoTime+1
  3712  07C9                     l3819:	
  3713                           
  3714                           ;main.c: 157: }
  3715                           ;main.c: 158: }
  3716                           ;main.c: 159: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3717  07C9  18B4               	btfsc	KeyServer@KeyOldFlag,1
  3718  07CA  1CAC               	btfss	_KeyFlag,1	;volatile
  3719  07CB  2FE7               	goto	l3841
  3720  07CC  086B               	movf	_firstLock,w
  3721  07CD  1D03               	btfss	3,2
  3722  07CE  2FE7               	goto	l3841
  3723                           
  3724                           ;main.c: 160: {
  3725                           ;main.c: 162: if(lowBatLock == 1)
  3726  07CF  0B3D               	decfsz	_lowBatLock,w
  3727  07D0  2FD6               	goto	l3829
  3728                           
  3729                           ;main.c: 163: {
  3730                           ;main.c: 164: shanshuoTime2 = 450;
  3731  07D1  30C2               	movlw	194
  3732  07D2  00A8               	movwf	_shanshuoTime2
  3733  07D3  3001               	movlw	1
  3734  07D4  00A9               	movwf	_shanshuoTime2+1
  3735                           
  3736                           ;main.c: 165: }
  3737  07D5  2FDB               	goto	l3833
  3738  07D6                     l3829:	
  3739                           
  3740                           ;main.c: 166: else if(++wuhuaFlag > 2)
  3741  07D6  3003               	movlw	3
  3742  07D7  0AC3               	incf	_wuhuaFlag,f
  3743  07D8  0243               	subwf	_wuhuaFlag,w
  3744  07D9  1803               	btfsc	3,0
  3745                           
  3746                           ;main.c: 167: {
  3747                           ;main.c: 168: wuhuaFlag = 0;
  3748  07DA  01C3               	clrf	_wuhuaFlag
  3749  07DB                     l3833:	
  3750                           
  3751                           ;main.c: 169: }
  3752                           ;main.c: 170: if(wuhuaFlag == 2)
  3753  07DB  3002               	movlw	2
  3754  07DC  0643               	xorwf	_wuhuaFlag,w
  3755  07DD  1D03               	btfss	3,2
  3756  07DE  2FE5               	goto	l3839
  3757                           
  3758                           ;main.c: 171: {
  3759                           ;main.c: 172: shanshuoTime2 = 450;
  3760  07DF  30C2               	movlw	194
  3761  07E0  00A8               	movwf	_shanshuoTime2
  3762  07E1  3001               	movlw	1
  3763  07E2  00A9               	movwf	_shanshuoTime2+1
  3764                           
  3765                           ;main.c: 173: count10s = 0;
  3766  07E3  01C1               	clrf	_count10s
  3767                           
  3768                           ;main.c: 174: }
  3769  07E4  2FE7               	goto	l3841
  3770  07E5                     l3839:	
  3771                           
  3772                           ;main.c: 175: else
  3773                           ;main.c: 176: {
  3774                           ;main.c: 177: shanshuoTime2 = 0;
  3775  07E5  01A8               	clrf	_shanshuoTime2
  3776  07E6  01A9               	clrf	_shanshuoTime2+1
  3777  07E7                     l3841:	
  3778                           
  3779                           ;main.c: 178: }
  3780                           ;main.c: 179: }
  3781                           ;main.c: 182: KeyOldFlag = KeyFlag[0];
  3782  07E7  082C               	movf	_KeyFlag,w	;volatile
  3783  07E8  00B4               	movwf	KeyServer@KeyOldFlag
  3784  07E9  0008               	return
  3785  07EA                     l3843:	
  3786                           
  3787                           ;main.c: 185: else
  3788                           ;main.c: 186: {
  3789                           ;main.c: 187: KeyOldFlag = 0;
  3790  07EA  01B4               	clrf	KeyServer@KeyOldFlag
  3791  07EB  0008               	return
  3792  07EC                     __end_of_KeyServer:	
  3793  07EC                     PL38:	
  3794  07EC  30C2               	movlw	194
  3795  07ED  00AA               	movwf	_shanshuoTime
  3796  07EE  3001               	movlw	1
  3797  07EF  00AB               	movwf	_shanshuoTime+1
  3798  07F0  0008               	return
  3799  07F1                     __end_ofPL38:	
  3800                           
  3801                           	psect	text26
  3802  0024                     __ptext26:	
  3803 ;; *************** function _Init_System *****************
  3804 ;; Defined at:
  3805 ;;		line 79 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2
  3814 ;; Tracked objects:
  3815 ;;		On entry : B00/0
  3816 ;;		On exit  : 300/100
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3819 ;;      Params:         0       0       0       0
  3820 ;;      Locals:         0       0       0       0
  3821 ;;      Temps:          0       0       0       0
  3822 ;;      Totals:         0       0       0       0
  3823 ;;Total ram usage:        0 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    2
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_main
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           
  3834                           ;psect for function _Init_System
  3835  0024                     _Init_System:	
  3836                           
  3837                           ;incstack = 0
  3838                           ; Regs used in _Init_System: [wreg+status,2]
  3839  0024  0000               	nop	;# 
  3840  0025  0064               	clrwdt	;# 
  3841                           
  3842                           ;main.c: 83: INTCON = 0;
  3843  0026  018B               	clrf	11	;volatile
  3844                           
  3845                           ;main.c: 84: OSCCON = 0X72;
  3846  0027  3072               	movlw	114
  3847  0028  1283               	bcf	3,5	;RP0=0, select bank0
  3848  0029  1303               	bcf	3,6	;RP1=0, select bank0
  3849  002A  0094               	movwf	20	;volatile
  3850                           
  3851                           ;main.c: 85: OPTION_REG = 0;
  3852  002B  0181               	clrf	1	;volatile
  3853                           
  3854                           ;main.c: 90: TRISA = 0x00;
  3855  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3856  002D  0185               	clrf	5	;volatile
  3857                           
  3858                           ;main.c: 91: PORTA = 0;
  3859  002E  0186               	clrf	6	;volatile
  3860                           
  3861                           ;main.c: 92: TRISB = 0x23;
  3862  002F  3023               	movlw	35
  3863  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0031  0085               	movwf	5	;volatile
  3865                           
  3866                           ;main.c: 93: PORTB = 0;
  3867  0032  0186               	clrf	6	;volatile
  3868                           
  3869                           ;main.c: 94: WPUB = 0x02;
  3870  0033  3002               	movlw	2
  3871  0034  0088               	movwf	8	;volatile
  3872                           
  3873                           ;main.c: 95: TRISC = 0;
  3874  0035  1703               	bsf	3,6	;RP1=1, select bank2
  3875  0036  0185               	clrf	5	;volatile
  3876                           
  3877                           ;main.c: 96: PORTC = 0;
  3878  0037  0186               	clrf	6	;volatile
  3879                           
  3880                           ;main.c: 98: PIE1 = 2;
  3881  0038  1303               	bcf	3,6	;RP1=0, select bank0
  3882  0039  008E               	movwf	14	;volatile
  3883                           
  3884                           ;main.c: 99: PR2 = 250;
  3885  003A  30FA               	movlw	250
  3886  003B  0091               	movwf	17	;volatile
  3887                           
  3888                           ;main.c: 100: T2CON = 4;
  3889  003C  3004               	movlw	4
  3890  003D  0093               	movwf	19	;volatile
  3891                           
  3892                           ;main.c: 102: INTCON = 0XC0;
  3893  003E  30C0               	movlw	192
  3894  003F  008B               	movwf	11	;volatile
  3895                           
  3896                           ;main.c: 103: ADCON0 = 0X41;
  3897                           
  3898                           ;main.c: 104: ADON = 1;
  3899                           
  3900                           ;main.c: 105: ADCON1 = 0x00;
  3901  0040  2BE9               	ljmp	PL26	;call to abstracted procedure
  3902  0041                     __end_of_Init_System:	
  3903  0041                     __ptext22:	
  3904 ;; *************** function _WorkSleep *****************
  3905 ;; Defined at:
  3906 ;;		line 221 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 300/0
  3917 ;;		On exit  : 200/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3920 ;;      Params:         0       0       0       0
  3921 ;;      Locals:         0       0       0       0
  3922 ;;      Temps:          0       0       0       0
  3923 ;;      Totals:         0       0       0       0
  3924 ;;Total ram usage:        0 bytes
  3925 ;; Hardware stack levels used:    1
  3926 ;; Hardware stack levels required when called:    5
  3927 ;; This function calls:
  3928 ;;		_Refurbish_Sfr
  3929 ;;		_SystemEnterSleep
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _WorkSleep
  3937  0041                     _WorkSleep:	
  3938                           
  3939                           ;main.c: 224: static unsigned char time;
  3940                           ;main.c: 226: if(B_OnOff)time = 0;
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3944  0041  1AF8               	btfsc	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3945  0042  01B3               	clrf	WorkSleep@time
  3946                           
  3947                           ;main.c: 228: if(++time >= 125)
  3948  0043  307D               	movlw	125
  3949  0044  0AB3               	incf	WorkSleep@time,f
  3950  0045  0233               	subwf	WorkSleep@time,w
  3951  0046  1C03               	skipc
  3952  0047  0008               	return
  3953                           
  3954                           ;main.c: 229: {
  3955                           ;main.c: 230: time = 0;
  3956  0048  01B3               	clrf	WorkSleep@time
  3957                           
  3958                           ;main.c: 231: INTCON = 0;
  3959  0049  018B               	clrf	11	;volatile
  3960                           
  3961                           ;main.c: 232: PIE1 = 0;
  3962  004A  018E               	clrf	14	;volatile
  3963                           
  3964                           ;main.c: 233: PIE2 = 0;
  3965  004B  1703               	bsf	3,6	;RP1=1, select bank2
  3966  004C  0190               	clrf	16	;volatile
  3967                           
  3968                           ;main.c: 234: PIR1 = 0;
  3969  004D  1303               	bcf	3,6	;RP1=0, select bank0
  3970  004E  018D               	clrf	13	;volatile
  3971                           
  3972                           ;main.c: 235: PIR2 = 0;
  3973  004F  1703               	bsf	3,6	;RP1=1, select bank2
  3974  0050  018F               	clrf	15	;volatile
  3975                           
  3976                           ;main.c: 236: T2CON = 0;
  3977  0051  1303               	bcf	3,6	;RP1=0, select bank0
  3978  0052  0193               	clrf	19	;volatile
  3979                           
  3980                           ;main.c: 237: ADCON1 = 0;
  3981  0053  1683               	bsf	3,5	;RP0=1, select bank1
  3982  0054  0196               	clrf	22	;volatile
  3983                           
  3984                           ;main.c: 240: ADCON0 = 0;
  3985  0055  0195               	clrf	21	;volatile
  3986                           
  3987                           ;main.c: 243: PORTA = 0x00;
  3988  0056  0186               	clrf	6	;volatile
  3989                           
  3990                           ;main.c: 244: PORTB = 0x00;
  3991  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3992  0058  0186               	clrf	6	;volatile
  3993                           
  3994                           ;main.c: 245: TRISC = 0;
  3995  0059  1703               	bsf	3,6	;RP1=1, select bank2
  3996  005A  0185               	clrf	5	;volatile
  3997                           
  3998                           ;main.c: 246: PORTC = 0;
  3999  005B  0186               	clrf	6	;volatile
  4000                           
  4001                           ;main.c: 248: TRISB0 =1;
  4002  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4003  005D  1405               	bsf	5,0	;volatile
  4004                           
  4005                           ;main.c: 250: RBIF = 0;
  4006  005E  100B               	bcf	11,0	;volatile
  4007                           
  4008                           ;main.c: 251: RBIE = 1;
  4009  005F  158B               	bsf	11,3	;volatile
  4010                           
  4011                           ;main.c: 252: IOCB0= 1;
  4012  0060  1409               	bsf	9,0	;volatile
  4013                           
  4014                           ;main.c: 253: PORTB;
  4015  0061  0806               	movf	6,w	;volatile
  4016                           
  4017                           ;main.c: 265: SystemEnterSleep();
  4018  0062  2099  118A         	fcall	_SystemEnterSleep
  4019                           
  4020                           ;main.c: 266: if(RAIF)
  4021  0064  1D8D               	btfss	13,3	;volatile
  4022  0065  2869               	goto	l4789
  4023                           
  4024                           ;main.c: 267: {
  4025                           ;main.c: 268: RAIF = 0;
  4026  0066  118D               	bcf	13,3	;volatile
  4027                           
  4028                           ;main.c: 269: PORTA;
  4029  0067  1683               	bsf	3,5	;RP0=1, select bank1
  4030  0068  0806               	movf	6,w	;volatile
  4031  0069                     l4789:	
  4032                           
  4033                           ;main.c: 270: }
  4034                           ;main.c: 272: Refurbish_Sfr();
  4035  0069  2389  118A         	fcall	_Refurbish_Sfr
  4036                           
  4037                           ;main.c: 273: ADCON0 = 0X41;
  4038                           
  4039                           ;main.c: 274: ADON = 1;
  4040                           
  4041                           ;main.c: 275: ADCON1 = 0x00;
  4042  006B  2BE9               	ljmp	PL26	;call to abstracted procedure
  4043  006C                     __end_of_WorkSleep:	
  4044  006C                     __ptext27:	
  4045 ;; *************** function _CheckTouchKey *****************
  4046 ;; Defined at:
  4047 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4061 ;;      Params:         0       0       0       0
  4062 ;;      Locals:         0       0       0       0
  4063 ;;      Temps:          0       0       0       0
  4064 ;;      Totals:         0       0       0       0
  4065 ;;Total ram usage:        0 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    5
  4068 ;; This function calls:
  4069 ;;		_CheckKeyOldValue
  4070 ;;		_CheckOnceResult
  4071 ;;		_CheckValidTime
  4072 ;;		_ClearResSum
  4073 ;;		_GetTouchKeyValue
  4074 ;;		_KeyStopClear
  4075 ;;		_TurnKeyFlags
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _CheckTouchKey
  4083  006C                     _CheckTouchKey:	
  4084                           
  4085                           ;incstack = 0
  4086                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4087  006C  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4088  006D  287A               	goto	l1366
  4089  006E  2129  118A         	fcall	_GetTouchKeyValue
  4090  0070  3008               	movlw	8
  4091  0071  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0072  1303               	bcf	3,6	;RP1=0, select bank0
  4093  0073  0AB2               	incf	_KeyCounter,f
  4094  0074  0232               	subwf	_KeyCounter,w
  4095  0075  1C03               	skipc
  4096  0076  2898               	goto	l4921
  4097  0077  01B2               	clrf	_KeyCounter
  4098  0078  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4099  0079  2898               	goto	l4921
  4100  007A                     l1366:	
  4101  007A  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4102  007B  2892               	goto	l4915
  4103  007C  21A0  118A         	fcall	_CheckOnceResult
  4104  007E  2332  118A         	fcall	_TurnKeyFlags
  4105  0080  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4106  0081  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4107  0082  2889               	goto	l4905
  4108  0083  3002               	movlw	2
  4109  0084  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0085  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0086  0232               	subwf	_KeyCounter,w
  4112  0087  1C03               	skipc
  4113  0088  288E               	goto	l4913
  4114  0089                     l4905:	
  4115  0089  231C  118A         	fcall	_KeyStopClear
  4116  008B  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4117  008C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4118  008D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4119  008E                     l4913:	
  4120  008E  1283               	bcf	3,5	;RP0=0, select bank0
  4121  008F  1303               	bcf	3,6	;RP1=0, select bank0
  4122  0090  01B2               	clrf	_KeyCounter
  4123  0091  2898               	goto	l4921
  4124  0092                     l4915:	
  4125  0092  22B8  118A         	fcall	_CheckKeyOldValue
  4126  0094  2191  118A         	fcall	_ClearResSum
  4127  0096  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4128  0097  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4129  0098                     l4921:	
  4130  0098  2B63               	ljmp	l3643	;# 
  4131  0099                     __end_of_CheckTouchKey:	
  4132  0099                     __ptext23:	
  4133 ;; *************** function _SystemEnterSleep *****************
  4134 ;; Defined at:
  4135 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  92              2    9[BANK0 ] unsigned int 
  4140 ;;  93              2    7[BANK0 ] unsigned int 
  4141 ;;  94              2    5[BANK0 ] unsigned int 
  4142 ;;  91              1   11[BANK0 ] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      void 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 300/0
  4149 ;;		On exit  : 300/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4152 ;;      Params:         0       0       0       0
  4153 ;;      Locals:         0       7       0       0
  4154 ;;      Temps:          2       0       0       0
  4155 ;;      Totals:         2       7       0       0
  4156 ;;Total ram usage:        9 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    4
  4159 ;; This function calls:
  4160 ;;		_ClearResSum
  4161 ;;		_GetTouchKeyValue
  4162 ;;		_KeyClearOne
  4163 ;; This function is called by:
  4164 ;;		_WorkSleep
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _SystemEnterSleep
  4170  0099                     _SystemEnterSleep:	
  4171  0099                     l1378:	
  4172                           ;incstack = 0
  4173                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4174                           
  4175  0099  0064               	clrwdt	;# 
  4176  009A  1683               	bsf	3,5	;RP0=1, select bank1
  4177  009B  1303               	bcf	3,6	;RP1=0, select bank1
  4178  009C  0181               	clrf	1	;volatile
  4179  009D  3007               	movlw	7
  4180  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4181  009F  0481               	iorwf	1,f	;volatile
  4182  00A0  1581               	bsf	1,3	;volatile
  4183  00A1  0064               	clrwdt	;# 
  4184  00A2  300A               	movlw	10
  4185  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  4186  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  4187  00A5  0081               	movwf	1	;volatile
  4188  00A6  0064               	clrwdt	;# 
  4189  00A7  1283               	bcf	3,5	;RP0=0, select bank2
  4190  00A8  1703               	bsf	3,6	;RP1=1, select bank2
  4191  00A9  0191               	clrf	17	;volatile
  4192  00AA  0193               	clrf	19	;volatile
  4193  00AB  3002               	movlw	2
  4194  00AC  1303               	bcf	3,6	;RP1=0, select bank0
  4195  00AD  0094               	movwf	20	;volatile
  4196  00AE  0063               	sleep	;# 
  4197  00AF  0000               	nop	;# 
  4198  00B0  0064               	clrwdt	;# 
  4199  00B1  3072               	movlw	114
  4200  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  4201  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  4202  00B4  0094               	movwf	20	;volatile
  4203  00B5  3079               	movlw	121
  4204  00B6  1703               	bsf	3,6	;RP1=1, select bank2
  4205  00B7  0093               	movwf	19	;volatile
  4206  00B8  2191  118A         	fcall	_ClearResSum
  4207  00BA  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4208  00BB  2129  118A         	fcall	_GetTouchKeyValue
  4209  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4210  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4211  00BF  23F5  118A         	fcall	PL32	;call to abstracted procedure
  4212  00C1  1C0B               	btfss	11,0	;volatile
  4213  00C2  188B               	btfsc	11,1	;volatile
  4214  00C3  28C6               	goto	l4441
  4215  00C4  1D8D               	btfss	13,3	;volatile
  4216  00C5  28CD               	goto	l4453
  4217  00C6                     l4441:	
  4218  00C6  2191               	fcall	_ClearResSum
  4219  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  4220  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  4221  00C9  01B2               	clrf	_KeyCounter
  4222  00CA  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4223  00CB  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4224  00CC  0008               	return
  4225  00CD                     l4453:	
  4226  00CD  0852               	movf	SystemEnterSleep@92,w
  4227  00CE  3903               	andlw	3
  4228  00CF  1003               	clrc
  4229  00D0  1903               	btfsc	3,2
  4230  00D1  2923               	goto	L11
  4231  00D2  0D54               	rlf	SystemEnterSleep@91,w
  4232  00D3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4233  00D4  0084               	movwf	4
  4234  00D5  1383               	bcf	3,7	;select IRP bank1
  4235  00D6  0800               	movf	0,w
  4236  00D7  00D0               	movwf	SystemEnterSleep@93
  4237  00D8  0A84               	incf	4,f
  4238  00D9  0800               	movf	0,w
  4239  00DA  00D1               	movwf	SystemEnterSleep@93+1
  4240  00DB  00CF               	movwf	SystemEnterSleep@94+1
  4241  00DC  0850               	movf	SystemEnterSleep@93,w
  4242  00DD  00CE               	movwf	SystemEnterSleep@94
  4243  00DE  0850               	movf	SystemEnterSleep@93,w
  4244  00DF  0451               	iorwf	SystemEnterSleep@93+1,w
  4245  00E0  1903               	btfsc	3,2
  4246  00E1  2922               	goto	l4487
  4247  00E2  0854               	movf	SystemEnterSleep@91,w
  4248  00E3  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4249  00E4  0084               	movwf	4
  4250  00E5  158A  2028  118A   	fcall	stringdir
  4251  00E8  07CE               	addwf	SystemEnterSleep@94,f
  4252  00E9  1803               	skipnc
  4253  00EA  0ACF               	incf	SystemEnterSleep@94+1,f
  4254  00EB  1003               	clrc
  4255  00EC  0D54               	rlf	SystemEnterSleep@91,w
  4256  00ED  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4257  00EE  23D4  118A         	fcall	PL16	;call to abstracted procedure
  4258  00F0  084F               	movf	SystemEnterSleep@94+1,w
  4259  00F1  0275               	subwf	??_SystemEnterSleep+1,w
  4260  00F2  1D03               	skipz
  4261  00F3  28F6               	goto	u4695
  4262  00F4  084E               	movf	SystemEnterSleep@94,w
  4263  00F5  0274               	subwf	??_SystemEnterSleep,w
  4264  00F6                     u4695:	
  4265  00F6  1C03               	skipc
  4266  00F7  290A               	goto	L10
  4267  00F8  23F5  118A         	fcall	PL32	;call to abstracted procedure
  4268  00FA                     l4467:	
  4269  00FA  0852               	movf	SystemEnterSleep@92,w
  4270  00FB  3903               	andlw	3
  4271  00FC  1D03               	btfss	3,2
  4272  00FD  2901               	goto	l4471
  4273  00FE  0854               	movf	SystemEnterSleep@91,w
  4274  00FF  2295  118A         	fcall	_KeyClearOne
  4275  0101                     l4471:	
  4276  0101  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0102  3002               	movlw	2
  4278  0103  1303               	bcf	3,6	;RP1=0, select bank0
  4279  0104  1003               	clrc
  4280  0105  23FA  118A         	fcall	PL34	;call to abstracted procedure
  4281  0107  1803               	btfsc	3,0
  4282  0108  28C6               	goto	l4441
  4283  0109  28FA               	goto	l4467
  4284  010A                     L10:	
  4285  010A  0D54               	rlf	SystemEnterSleep@91,w
  4286  010B  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4287  010C  23D4  118A         	fcall	PL16	;call to abstracted procedure
  4288  010E  1003               	clrc
  4289  010F  0D54               	rlf	SystemEnterSleep@91,w
  4290  0110  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4291  0111  23C9  118A         	fcall	PL14	;call to abstracted procedure
  4292  0113  0800               	movf	0,w
  4293  0114  00F4               	movwf	??_SystemEnterSleep
  4294  0115  0A84               	incf	4,f
  4295  0116  0800               	movf	0,w
  4296  0117  00F5               	movwf	??_SystemEnterSleep+1
  4297  0118  1003               	clrc
  4298  0119  0D54               	rlf	SystemEnterSleep@91,w
  4299  011A  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4300  011B  23C9  118A         	fcall	PL14	;call to abstracted procedure
  4301  011D  0850               	movf	SystemEnterSleep@93,w
  4302  011E  0080               	movwf	0
  4303  011F  0A84               	incf	4,f
  4304  0120  0851               	movf	SystemEnterSleep@93+1,w
  4305  0121  0080               	movwf	0
  4306  0122                     l4487:	
  4307  0122  1003               	clrc
  4308  0123                     L11:	
  4309  0123  3002               	movlw	2
  4310  0124  23FA  118A         	fcall	PL34	;call to abstracted procedure
  4311  0126  1803               	btfsc	3,0
  4312  0127  2899               	goto	l1378
  4313  0128  28CD               	goto	l4453
  4314  0129                     __end_of_SystemEnterSleep:	
  4315  0129                     __ptext31:	
  4316 ;; *************** function _GetTouchKeyValue *****************
  4317 ;; Defined at:
  4318 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  63              2    2[BANK0 ] unsigned int 
  4323 ;;  64              2    0[BANK0 ] unsigned int 
  4324 ;;  62              1    4[BANK0 ] unsigned char 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/200
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4334 ;;      Params:         0       0       0       0
  4335 ;;      Locals:         0       5       0       0
  4336 ;;      Temps:          0       0       0       0
  4337 ;;      Totals:         0       5       0       0
  4338 ;;Total ram usage:        5 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		_ClearResSum
  4343 ;; This function is called by:
  4344 ;;		_CheckTouchKey
  4345 ;;		_SystemEnterSleep
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           
  4350                           ;psect for function _GetTouchKeyValue
  4351  0129                     _GetTouchKeyValue:	
  4352                           
  4353                           ;incstack = 0
  4354                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4355  0129  1283               	bcf	3,5	;RP0=0, select bank0
  4356  012A  1303               	bcf	3,6	;RP1=0, select bank0
  4357  012B  01CD               	clrf	GetTouchKeyValue@62
  4358  012C  01CB               	clrf	GetTouchKeyValue@63
  4359  012D  0ACB               	incf	GetTouchKeyValue@63,f
  4360  012E  01CC               	clrf	GetTouchKeyValue@63+1
  4361  012F                     l4313:	
  4362  012F  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4363  0130  2935               	goto	l4317
  4364  0131  084B               	movf	GetTouchKeyValue@63,w
  4365  0132  3903               	andlw	3
  4366  0133  1903               	btfsc	3,2
  4367  0134  2986               	goto	l4345
  4368  0135                     l4317:	
  4369  0135  1703               	bsf	3,6	;RP1=1, select bank2
  4370  0136  0191               	clrf	17	;volatile
  4371  0137  0192               	clrf	18	;volatile
  4372  0138  3079               	movlw	121
  4373  0139  0093               	movwf	19	;volatile
  4374  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4375  013B  1305               	bcf	5,6	;volatile
  4376  013C  1306               	bcf	6,6	;volatile
  4377  013D  0000               	nop	;# 
  4378  013E  0000               	nop	;# 
  4379  013F  0000               	nop	;# 
  4380  0140  0000               	nop	;# 
  4381  0141  0000               	nop	;# 
  4382  0142  0000               	nop	;# 
  4383  0143  0000               	nop	;# 
  4384  0144  0000               	nop	;# 
  4385  0145  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0146  1303               	bcf	3,6	;RP1=0, select bank0
  4387  0147  1705               	bsf	5,6	;volatile
  4388  0148  084D               	movf	GetTouchKeyValue@62,w
  4389  0149  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4390  014A  0084               	movwf	4
  4391  014B  158A  2028  118A   	fcall	stringdir
  4392  014E  1703               	bsf	3,6	;RP1=1, select bank2
  4393  014F  0091               	movwf	17	;volatile
  4394  0150  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0151  084D               	movf	GetTouchKeyValue@62,w
  4396  0152  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4397  0153  0084               	movwf	4
  4398  0154  158A  2028  118A   	fcall	stringdir
  4399  0157  1703               	bsf	3,6	;RP1=1, select bank2
  4400  0158  0092               	movwf	18	;volatile
  4401  0159  0000               	nop	;# 
  4402  015A  0000               	nop	;# 
  4403  015B  0000               	nop	;# 
  4404  015C  0000               	nop	;# 
  4405  015D  1283               	bcf	3,5	;RP0=0, select bank2
  4406  015E  1703               	bsf	3,6	;RP1=1, select bank2
  4407  015F  1411               	bsf	17,0	;volatile
  4408  0160  30D0               	movlw	208
  4409  0161  1303               	bcf	3,6	;RP1=0, select bank0
  4410  0162  00C9               	movwf	GetTouchKeyValue@64
  4411  0163  3007               	movlw	7
  4412  0164  00CA               	movwf	GetTouchKeyValue@64+1
  4413  0165                     l1288:	
  4414  0165  1703               	bsf	3,6	;RP1=1, select bank2
  4415  0166  1B91               	btfsc	17,7	;volatile
  4416  0167  2974               	goto	l4343
  4417  0168  3001               	movlw	1
  4418  0169  1303               	bcf	3,6	;RP1=0, select bank0
  4419  016A  02C9               	subwf	GetTouchKeyValue@64,f
  4420  016B  1C03               	skipc
  4421  016C  03CA               	decf	GetTouchKeyValue@64+1,f
  4422  016D  0849               	movf	GetTouchKeyValue@64,w
  4423  016E  044A               	iorwf	GetTouchKeyValue@64+1,w
  4424  016F  1D03               	btfss	3,2
  4425  0170  2965               	goto	l1288
  4426  0171  30FF               	movlw	255
  4427  0172  00B2               	movwf	_KeyCounter
  4428  0173  2991               	ljmp	l4197
  4429  0174                     l4343:	
  4430  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4431  0175  1003               	clrc
  4432  0176  0D4D               	rlf	GetTouchKeyValue@62,w
  4433  0177  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4434  0178  0084               	movwf	4
  4435  0179  1703               	bsf	3,6	;RP1=1, select bank2
  4436  017A  0816               	movf	22,w	;volatile
  4437  017B  1383               	bcf	3,7	;select IRP bank1
  4438  017C  0780               	addwf	0,f
  4439  017D  0F84               	incfsz	4,f
  4440  017E  0800               	movf	0,w
  4441  017F  1803               	skipnc
  4442  0180  0A00               	incf	0,w
  4443  0181  00FF               	movwf	127
  4444  0182  0817               	movf	23,w	;volatile
  4445  0183  077F               	addwf	127,w
  4446  0184  0080               	movwf	0
  4447  0185  0384               	decf	4,f
  4448  0186                     l4345:	
  4449  0186  3002               	movlw	2
  4450  0187  1303               	bcf	3,6	;RP1=0, select bank0
  4451  0188  1003               	clrc
  4452  0189  0DCB               	rlf	GetTouchKeyValue@63,f
  4453  018A  0DCC               	rlf	GetTouchKeyValue@63+1,f
  4454  018B  0ACD               	incf	GetTouchKeyValue@62,f
  4455  018C  024D               	subwf	GetTouchKeyValue@62,w
  4456  018D  1C03               	skipc
  4457  018E  292F               	goto	l4313
  4458  018F  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4459  0190  0008               	return
  4460  0191                     __end_of_GetTouchKeyValue:	
  4461  0191                     __ptext32:	
  4462 ;; *************** function _ClearResSum *****************
  4463 ;; Defined at:
  4464 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  56              1    3[COMMON] unsigned char 
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/200
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4478 ;;      Params:         0       0       0       0
  4479 ;;      Locals:         1       0       0       0
  4480 ;;      Temps:          0       0       0       0
  4481 ;;      Totals:         1       0       0       0
  4482 ;;Total ram usage:        1 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    2
  4485 ;; This function calls:
  4486 ;;		Nothing
  4487 ;; This function is called by:
  4488 ;;		_GetTouchKeyValue
  4489 ;;		_CheckTouchKey
  4490 ;;		_SystemEnterSleep
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _ClearResSum
  4496  0191                     _ClearResSum:	
  4497  0191                     l4197:	
  4498                           ;incstack = 0
  4499                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4500                           
  4501  0191  01F3               	clrf	ClearResSum@56
  4502  0192                     l4199:	
  4503  0192  1003               	clrc
  4504  0193  0D73               	rlf	ClearResSum@56,w
  4505  0194  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4506  0195  0084               	movwf	4
  4507  0196  3002               	movlw	2
  4508  0197  1383               	bcf	3,7	;select IRP bank1
  4509  0198  0180               	clrf	0
  4510  0199  0A84               	incf	4,f
  4511  019A  0180               	clrf	0
  4512  019B  0AF3               	incf	ClearResSum@56,f
  4513  019C  0273               	subwf	ClearResSum@56,w
  4514  019D  1803               	btfsc	3,0
  4515  019E  0008               	return
  4516  019F  2992               	goto	l4199
  4517  01A0                     __end_of_ClearResSum:	
  4518  01A0                     __ptext34:	
  4519 ;; *************** function _CheckOnceResult *****************
  4520 ;; Defined at:
  4521 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  71              2   10[BANK0 ] unsigned int 
  4526 ;;  72              2    7[BANK0 ] unsigned int 
  4527 ;;  73              2    4[BANK0 ] unsigned int 
  4528 ;;  68              1   12[BANK0 ] unsigned char 
  4529 ;;  69              1    9[BANK0 ] unsigned char 
  4530 ;;  70              1    6[BANK0 ] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4540 ;;      Params:         0       0       0       0
  4541 ;;      Locals:         0       9       0       0
  4542 ;;      Temps:          0       4       0       0
  4543 ;;      Totals:         0      13       0       0
  4544 ;;Total ram usage:       13 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    3
  4547 ;; This function calls:
  4548 ;;		_KeyClearOne
  4549 ;;		_KeyHave
  4550 ;;		_KeyIsIn
  4551 ;; This function is called by:
  4552 ;;		_CheckTouchKey
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _CheckOnceResult
  4558  01A0                     _CheckOnceResult:	
  4559                           
  4560                           ;incstack = 0
  4561                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4562  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  4563  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  4564  01A2  01D5               	clrf	CheckOnceResult@68
  4565  01A3  01A4               	clrf	_KeyData	;volatile
  4566  01A4  01A5               	clrf	_KeyData+1	;volatile
  4567  01A5  01B1               	clrf	_KeyMaxSub
  4568  01A6                     l4587:	
  4569  01A6  0855               	movf	CheckOnceResult@68,w
  4570  01A7  3907               	andlw	7
  4571  01A8  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4572  01A9  0084               	movwf	4
  4573  01AA  158A  2028  118A   	fcall	stringdir
  4574  01AD  00CF               	movwf	CheckOnceResult@70
  4575  01AE  1003               	clrc
  4576  01AF  0D55               	rlf	CheckOnceResult@68,w
  4577  01B0  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4578  01B1  0084               	movwf	4
  4579  01B2  3003               	movlw	3
  4580  01B3                     u4935:	
  4581  01B3  0A84               	incf	4,f
  4582  01B4  1003               	clrc
  4583  01B5  1383               	bcf	3,7	;select IRP bank1
  4584  01B6  0C80               	rrf	0,f
  4585  01B7  0384               	decf	4,f
  4586  01B8  0C80               	rrf	0,f
  4587  01B9  3EFF               	addlw	-1
  4588  01BA  1D03               	skipz
  4589  01BB  29B3               	goto	u4935
  4590  01BC  1003               	clrc
  4591  01BD  0D55               	rlf	CheckOnceResult@68,w
  4592  01BE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4593  01BF  0084               	movwf	4
  4594  01C0  0800               	movf	0,w
  4595  01C1  00D3               	movwf	CheckOnceResult@71
  4596  01C2  0A84               	incf	4,f
  4597  01C3  0800               	movf	0,w
  4598  01C4  00D4               	movwf	CheckOnceResult@71+1
  4599  01C5  0855               	movf	CheckOnceResult@68,w
  4600  01C6  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4601  01C7  0084               	movwf	4
  4602  01C8  158A  2028  118A   	fcall	stringdir
  4603  01CB  00D2               	movwf	CheckOnceResult@69
  4604  01CC  00D0               	movwf	CheckOnceResult@72
  4605  01CD  01D1               	clrf	CheckOnceResult@72+1
  4606  01CE  0853               	movf	CheckOnceResult@71,w
  4607  01CF  07D0               	addwf	CheckOnceResult@72,f
  4608  01D0  1803               	skipnc
  4609  01D1  0AD1               	incf	CheckOnceResult@72+1,f
  4610  01D2  0854               	movf	CheckOnceResult@71+1,w
  4611  01D3  07D1               	addwf	CheckOnceResult@72+1,f
  4612  01D4  0855               	movf	CheckOnceResult@68,w
  4613  01D5  2281  118A         	fcall	_KeyIsIn
  4614  01D7  3A00               	xorlw	0
  4615  01D8  1003               	clrc
  4616  01D9  1D03               	skipz
  4617  01DA  2A35               	goto	L14
  4618  01DB  0D55               	rlf	CheckOnceResult@68,w
  4619  01DC  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4620  01DD  0084               	movwf	4
  4621  01DE  1383               	bcf	3,7	;select IRP bank1
  4622  01DF  0800               	movf	0,w
  4623  01E0  00CD               	movwf	CheckOnceResult@73
  4624  01E1  0A84               	incf	4,f
  4625  01E2  0800               	movf	0,w
  4626  01E3  00CE               	movwf	CheckOnceResult@73+1
  4627  01E4  1003               	clrc
  4628  01E5  0D55               	rlf	CheckOnceResult@68,w
  4629  01E6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4630  01E7  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4631  01E9  0251               	subwf	CheckOnceResult@72+1,w
  4632  01EA  1D03               	skipz
  4633  01EB  29EE               	goto	u4955
  4634  01EC  0849               	movf	??_CheckOnceResult,w
  4635  01ED  0250               	subwf	CheckOnceResult@72,w
  4636  01EE                     u4955:	
  4637  01EE  1803               	skipnc
  4638  01EF  29FD               	goto	l4605
  4639  01F0  1003               	clrc
  4640  01F1  0D55               	rlf	CheckOnceResult@68,w
  4641  01F2  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4642  01F3  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4643  01F5  0853               	movf	CheckOnceResult@71,w
  4644  01F6  0249               	subwf	??_CheckOnceResult,w
  4645  01F7  00D3               	movwf	CheckOnceResult@71
  4646  01F8  0854               	movf	CheckOnceResult@71+1,w
  4647  01F9  1C03               	skipc
  4648  01FA  0A54               	incf	CheckOnceResult@71+1,w
  4649  01FB  024A               	subwf	??_CheckOnceResult+1,w
  4650  01FC  2A21               	goto	L12
  4651  01FD                     l4605:	
  4652  01FD  084E               	movf	CheckOnceResult@73+1,w
  4653  01FE  0251               	subwf	CheckOnceResult@72+1,w
  4654  01FF  1D03               	skipz
  4655  0200  2A03               	goto	u4965
  4656  0201  084D               	movf	CheckOnceResult@73,w
  4657  0202  0250               	subwf	CheckOnceResult@72,w
  4658  0203                     u4965:	
  4659  0203  1803               	skipnc
  4660  0204  2A79               	goto	l4651
  4661  0205  1003               	clrc
  4662  0206  0D55               	rlf	CheckOnceResult@68,w
  4663  0207  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4664  0208  23B7  118A         	fcall	PL8	;call to abstracted procedure
  4665  020A  0251               	subwf	CheckOnceResult@72+1,w
  4666  020B  1D03               	skipz
  4667  020C  2A0F               	goto	u4975
  4668  020D  0849               	movf	??_CheckOnceResult,w
  4669  020E  0250               	subwf	CheckOnceResult@72,w
  4670  020F                     u4975:	
  4671  020F  1803               	skipnc
  4672  0210  2A79               	goto	l4651
  4673  0211  1003               	clrc
  4674  0212  0D55               	rlf	CheckOnceResult@68,w
  4675  0213  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4676  0214  0084               	movwf	4
  4677  0215  084D               	movf	CheckOnceResult@73,w
  4678  0216  0080               	movwf	0
  4679  0217  0A84               	incf	4,f
  4680  0218  084E               	movf	CheckOnceResult@73+1,w
  4681  0219  0080               	movwf	0
  4682  021A  0853               	movf	CheckOnceResult@71,w
  4683  021B  024D               	subwf	CheckOnceResult@73,w
  4684  021C  00D3               	movwf	CheckOnceResult@71
  4685  021D  0854               	movf	CheckOnceResult@71+1,w
  4686  021E  1C03               	skipc
  4687  021F  0A54               	incf	CheckOnceResult@71+1,w
  4688  0220  024E               	subwf	CheckOnceResult@73+1,w
  4689  0221                     L12:	
  4690  0221  00D4               	movwf	CheckOnceResult@71+1
  4691  0222  0855               	movf	CheckOnceResult@68,w
  4692  0223  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4693  0224  0084               	movwf	4
  4694  0225  0180               	clrf	0
  4695  0226  0854               	movf	CheckOnceResult@71+1,w
  4696  0227  1903               	btfsc	3,2
  4697  0228  2A2B               	goto	l4619
  4698  0229  30FF               	movlw	255
  4699  022A  2A2C               	goto	L13
  4700  022B                     l4619:	
  4701  022B  0853               	movf	CheckOnceResult@71,w
  4702  022C                     L13:	
  4703  022C  00D2               	movwf	CheckOnceResult@69
  4704  022D  0231               	subwf	_KeyMaxSub,w
  4705  022E  1803               	skipnc
  4706  022F  2A33               	goto	l4625
  4707  0230  0852               	movf	CheckOnceResult@69,w
  4708  0231  00B1               	movwf	_KeyMaxSub
  4709  0232  2A73               	goto	l4649
  4710  0233                     l4625:	
  4711  0233  0AB2               	incf	_KeyCounter,f
  4712  0234  2A79               	goto	l4651
  4713  0235                     L14:	
  4714  0235  0D55               	rlf	CheckOnceResult@68,w
  4715  0236  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4716  0237  0084               	movwf	4
  4717  0238  1383               	bcf	3,7	;select IRP bank1
  4718  0239  0800               	movf	0,w
  4719  023A  00C9               	movwf	??_CheckOnceResult
  4720  023B  0A84               	incf	4,f
  4721  023C  0800               	movf	0,w
  4722  023D  00CA               	movwf	??_CheckOnceResult+1
  4723  023E  0849               	movf	??_CheckOnceResult,w
  4724  023F  3E01               	addlw	1
  4725  0240  00CB               	movwf	??_CheckOnceResult+2
  4726  0241  084A               	movf	??_CheckOnceResult+1,w
  4727  0242  1803               	skipnc
  4728  0243  3E01               	addlw	1
  4729  0244  00CC               	movwf	??_CheckOnceResult+3
  4730  0245  0851               	movf	CheckOnceResult@72+1,w
  4731  0246  024C               	subwf	??_CheckOnceResult+3,w
  4732  0247  1D03               	skipz
  4733  0248  2A4B               	goto	u5005
  4734  0249  0850               	movf	CheckOnceResult@72,w
  4735  024A  024B               	subwf	??_CheckOnceResult+2,w
  4736  024B                     u5005:	
  4737  024B  1C03               	btfss	3,0
  4738  024C  2A79               	goto	l4651
  4739  024D  1003               	clrc
  4740  024E  0D55               	rlf	CheckOnceResult@68,w
  4741  024F  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4742  0250  0084               	movwf	4
  4743  0251  0800               	movf	0,w
  4744  0252  23A5  118A         	fcall	PL4	;call to abstracted procedure
  4745  0254  1C03               	skipc
  4746  0255  2A5F               	goto	l4639
  4747  0256  1003               	clrc
  4748  0257  0D55               	rlf	CheckOnceResult@68,w
  4749  0258  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4750  0259  0084               	movwf	4
  4751  025A  0800               	movf	0,w
  4752  025B  23A5  118A         	fcall	PL4	;call to abstracted procedure
  4753  025D  1803               	skipnc
  4754  025E  2A6B               	goto	l4643
  4755  025F                     l4639:	
  4756  025F  0855               	movf	CheckOnceResult@68,w
  4757  0260  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4758  0261  0084               	movwf	4
  4759  0262  3009               	movlw	9
  4760  0263  0A80               	incf	0,f
  4761  0264  0200               	subwf	0,w
  4762  0265  1C03               	skipc
  4763  0266  2A6F               	goto	l4647
  4764  0267  0855               	movf	CheckOnceResult@68,w
  4765  0268  2295  118A         	fcall	_KeyClearOne
  4766  026A  2A79               	goto	l4651
  4767  026B                     l4643:	
  4768  026B  0855               	movf	CheckOnceResult@68,w
  4769  026C  3EB8               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4770  026D  0084               	movwf	4
  4771  026E  0180               	clrf	0
  4772  026F                     l4647:	
  4773  026F  0825               	movf	_KeyData+1,w	;volatile
  4774  0270  0424               	iorwf	_KeyData,w	;volatile
  4775  0271  1D03               	btfss	3,2
  4776  0272  2A79               	goto	l4651
  4777  0273                     l4649:	
  4778  0273  084F               	movf	CheckOnceResult@70,w
  4779  0274  00F3               	movwf	KeyHave@59
  4780  0275  01F4               	clrf	KeyHave@59+1
  4781  0276  0855               	movf	CheckOnceResult@68,w
  4782  0277  22AA  118A         	fcall	_KeyHave
  4783  0279                     l4651:	
  4784  0279  3002               	movlw	2
  4785  027A  1283               	bcf	3,5	;RP0=0, select bank0
  4786  027B  1303               	bcf	3,6	;RP1=0, select bank0
  4787  027C  0AD5               	incf	CheckOnceResult@68,f
  4788  027D  0255               	subwf	CheckOnceResult@68,w
  4789  027E  1803               	btfsc	3,0
  4790  027F  0008               	return
  4791  0280  29A6               	goto	l4587
  4792  0281                     __end_of_CheckOnceResult:	
  4793  0281                     __ptext38:	
  4794 ;; *************** function _KeyIsIn *****************
  4795 ;; Defined at:
  4796 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  45              1    wreg     unsigned char 
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;  45              1    4[COMMON] unsigned char 
  4801 ;;  46              1    3[COMMON] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      unsigned char 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 300/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4811 ;;      Params:         0       0       0       0
  4812 ;;      Locals:         2       0       0       0
  4813 ;;      Temps:          0       0       0       0
  4814 ;;      Totals:         2       0       0       0
  4815 ;;Total ram usage:        2 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    2
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_KeyClearIn
  4822 ;;		_CheckOnceResult
  4823 ;;		_CheckKeyOldValue
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           
  4828                           ;psect for function _KeyIsIn
  4829  0281                     _KeyIsIn:	
  4830                           
  4831                           ;incstack = 0
  4832                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4833                           ;KeyIsIn@45 stored from wreg
  4834  0281  00F4               	movwf	KeyIsIn@45
  4835  0282  3907               	andlw	7
  4836  0283  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4837  0284  0084               	movwf	4
  4838  0285  158A  2028  118A   	fcall	stringdir
  4839  0288  00F3               	movwf	KeyIsIn@46
  4840  0289  1DF4               	btfss	KeyIsIn@45,3
  4841  028A  2A8F               	goto	l2993
  4842  028B  1283               	bcf	3,5	;RP0=0, select bank0
  4843  028C  1303               	bcf	3,6	;RP1=0, select bank0
  4844  028D  082D               	movf	_KeyFlag+1,w	;volatile
  4845  028E  2A92               	goto	L19
  4846  028F                     l2993:	
  4847  028F  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0290  1303               	bcf	3,6	;RP1=0, select bank0
  4849  0291  082C               	movf	_KeyFlag,w	;volatile
  4850  0292                     L19:	
  4851  0292  05F3               	andwf	KeyIsIn@46,f
  4852  0293  0873               	movf	KeyIsIn@46,w
  4853  0294  0008               	return
  4854  0295                     __end_of_KeyIsIn:	
  4855  0295                     __ptext36:	
  4856 ;; *************** function _KeyClearOne *****************
  4857 ;; Defined at:
  4858 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  49              1    wreg     unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  49              1    3[COMMON] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4872 ;;      Params:         0       0       0       0
  4873 ;;      Locals:         1       0       0       0
  4874 ;;      Temps:          0       0       0       0
  4875 ;;      Totals:         1       0       0       0
  4876 ;;Total ram usage:        1 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    2
  4879 ;; This function calls:
  4880 ;;		Nothing
  4881 ;; This function is called by:
  4882 ;;		_KeyClearIn
  4883 ;;		_KeyStopClear
  4884 ;;		_CheckOnceResult
  4885 ;;		_SystemEnterSleep
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           
  4890                           ;psect for function _KeyClearOne
  4891  0295                     _KeyClearOne:	
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4895                           ;KeyClearOne@49 stored from wreg
  4896  0295  00F3               	movwf	KeyClearOne@49
  4897  0296  1003               	clrc
  4898  0297  0D73               	rlf	KeyClearOne@49,w
  4899  0298  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4900  0299  0084               	movwf	4
  4901  029A  1383               	bcf	3,7	;select IRP bank1
  4902  029B  23E3  118A         	fcall	PL22	;call to abstracted procedure
  4903  029D  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4904  029E  0084               	movwf	4
  4905  029F  23E3  118A         	fcall	PL22	;call to abstracted procedure
  4906  02A1  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4907  02A2  0084               	movwf	4
  4908  02A3  23E3               	fcall	PL22	;call to abstracted procedure
  4909  02A4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4910  02A5  0084               	movwf	4
  4911  02A6  0180               	clrf	0
  4912  02A7  0A84               	incf	4,f
  4913  02A8  0180               	clrf	0	;# 
  4914  02A9  0008               	return
  4915  02AA                     __end_of_KeyClearOne:	
  4916  02AA                     __ptext35:	
  4917 ;; *************** function _KeyHave *****************
  4918 ;; Defined at:
  4919 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  58              1    wreg     unsigned char 
  4922 ;;  59              2    3[COMMON] unsigned int 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  58              1    5[COMMON] unsigned char 
  4925 ;; Return value:  Size  Location     Type
  4926 ;;                  1    wreg      void 
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : B00/0
  4931 ;;		On exit  : 0/0
  4932 ;;		Unchanged: 0/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4934 ;;      Params:         2       0       0       0
  4935 ;;      Locals:         1       0       0       0
  4936 ;;      Temps:          0       0       0       0
  4937 ;;      Totals:         3       0       0       0
  4938 ;;Total ram usage:        3 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:    2
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_CheckOnceResult
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _KeyHave
  4950  02AA                     _KeyHave:	
  4951                           
  4952                           ;incstack = 0
  4953                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4954                           ;KeyHave@58 stored from wreg
  4955  02AA  00F5               	movwf	KeyHave@58
  4956  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  4957  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  4958  02AD  0AB2               	incf	_KeyCounter,f
  4959  02AE  01A4               	clrf	_KeyData	;volatile
  4960  02AF  01A5               	clrf	_KeyData+1	;volatile
  4961  02B0  1DF5               	btfss	KeyHave@58,3
  4962  02B1  2AB5               	goto	l3145
  4963  02B2  0873               	movf	KeyHave@59,w
  4964  02B3  00A5               	movwf	_KeyData+1	;volatile
  4965  02B4  0008               	return
  4966  02B5                     l3145:	
  4967  02B5  0873               	movf	KeyHave@59,w
  4968  02B6  00A4               	movwf	_KeyData	;volatile
  4969  02B7  0008               	return
  4970  02B8                     __end_of_KeyHave:	
  4971  02B8                     __ptext37:	
  4972 ;; *************** function _CheckKeyOldValue *****************
  4973 ;; Defined at:
  4974 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  80              2    2[BANK0 ] unsigned int 
  4979 ;;  79              2    0[BANK0 ] unsigned int 
  4980 ;;  78              1    4[BANK0 ] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      void 
  4983 ;; Registers used:
  4984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4990 ;;      Params:         0       0       0       0
  4991 ;;      Locals:         0       5       0       0
  4992 ;;      Temps:          2       0       0       0
  4993 ;;      Totals:         2       5       0       0
  4994 ;;Total ram usage:        7 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    3
  4997 ;; This function calls:
  4998 ;;		_KeyIsIn
  4999 ;; This function is called by:
  5000 ;;		_CheckTouchKey
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _CheckKeyOldValue
  5006  02B8                     _CheckKeyOldValue:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5010  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  5011  02B9  3004               	movlw	4
  5012  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5013  02BB  01CD               	clrf	CheckKeyOldValue@78
  5014  02BC  0AB0               	incf	CheckKeyOldValue@F77,f
  5015  02BD  0230               	subwf	CheckKeyOldValue@F77,w
  5016  02BE  1C03               	btfss	3,0
  5017  02BF  0008               	return
  5018  02C0  01B0               	clrf	CheckKeyOldValue@F77
  5019  02C1                     l3573:	
  5020  02C1  1003               	clrc
  5021  02C2  0D4D               	rlf	CheckKeyOldValue@78,w
  5022  02C3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5023  02C4  0084               	movwf	4
  5024  02C5  1383               	bcf	3,7	;select IRP bank1
  5025  02C6  0800               	movf	0,w
  5026  02C7  00C9               	movwf	CheckKeyOldValue@79
  5027  02C8  0A84               	incf	4,f
  5028  02C9  0800               	movf	0,w
  5029  02CA  00CA               	movwf	CheckKeyOldValue@79+1
  5030  02CB  084D               	movf	CheckKeyOldValue@78,w
  5031  02CC  2281  118A         	fcall	_KeyIsIn
  5032  02CE  3A00               	xorlw	0
  5033  02CF  1003               	clrc
  5034  02D0  1D03               	skipz
  5035  02D1  2B06               	goto	L18
  5036  02D2  0D4D               	rlf	CheckKeyOldValue@78,w
  5037  02D3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5038  02D4  0084               	movwf	4
  5039  02D5  1383               	bcf	3,7	;select IRP bank1
  5040  02D6  2397  118A         	fcall	PL2	;call to abstracted procedure
  5041  02D8  1903               	skipnz
  5042  02D9  024B               	subwf	CheckKeyOldValue@80,w
  5043  02DA  1C03               	skipc
  5044  02DB  2AE2               	goto	L15
  5045  02DC  0F4B               	incfsz	CheckKeyOldValue@80,w
  5046  02DD  2B05               	goto	l1329
  5047  02DE  0A4C               	incf	CheckKeyOldValue@80+1,w
  5048  02DF  1003               	clrc
  5049  02E0  1D03               	btfss	3,2
  5050  02E1  2B06               	goto	L18
  5051  02E2                     L15:	
  5052  02E2  0D4D               	rlf	CheckKeyOldValue@78,w
  5053  02E3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5054  02E4  0084               	movwf	4
  5055  02E5  2397  118A         	fcall	PL2	;call to abstracted procedure
  5056  02E7  1903               	skipnz
  5057  02E8  024B               	subwf	CheckKeyOldValue@80,w
  5058  02E9  1C03               	skipc
  5059  02EA  2AF1               	goto	L16
  5060  02EB  0F4B               	incfsz	CheckKeyOldValue@80,w
  5061  02EC  2B05               	goto	l1329
  5062  02ED  0A4C               	incf	CheckKeyOldValue@80+1,w
  5063  02EE  1003               	clrc
  5064  02EF  1D03               	btfss	3,2
  5065  02F0  2B06               	goto	L18
  5066  02F1                     L16:	
  5067  02F1  0D4D               	rlf	CheckKeyOldValue@78,w
  5068  02F2  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5069  02F3  0084               	movwf	4
  5070  02F4  2397  118A         	fcall	PL2	;call to abstracted procedure
  5071  02F6  1903               	skipnz
  5072  02F7  024B               	subwf	CheckKeyOldValue@80,w
  5073  02F8  1C03               	skipc
  5074  02F9  2B00               	goto	L17
  5075  02FA  0F4B               	incfsz	CheckKeyOldValue@80,w
  5076  02FB  2B05               	goto	l1329
  5077  02FC  0A4C               	incf	CheckKeyOldValue@80+1,w
  5078  02FD  1003               	clrc
  5079  02FE  1D03               	btfss	3,2
  5080  02FF  2B06               	goto	L18
  5081  0300                     L17:	
  5082  0300  0D4D               	rlf	CheckKeyOldValue@78,w
  5083  0301  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5084  0302  0084               	movwf	4
  5085  0303  23EF  118A         	fcall	PL30	;call to abstracted procedure
  5086  0305                     l1329:	
  5087  0305  1003               	clrc
  5088  0306                     L18:	
  5089  0306  0D4D               	rlf	CheckKeyOldValue@78,w
  5090  0307  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5091  0308  0084               	movwf	4
  5092  0309  1383               	bcf	3,7	;select IRP bank0
  5093  030A  23DB  118A         	fcall	PL20	;call to abstracted procedure
  5094  030C  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5095  030D  23BE  118A         	fcall	PL10	;call to abstracted procedure
  5096  030F  23DB  118A         	fcall	PL20	;call to abstracted procedure
  5097  0311  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5098  0312  23BE  118A         	fcall	PL10	;call to abstracted procedure
  5099  0314  23EF  118A         	fcall	PL30	;call to abstracted procedure
  5100  0316  3002               	movlw	2
  5101  0317  0ACD               	incf	CheckKeyOldValue@78,f
  5102  0318  024D               	subwf	CheckKeyOldValue@78,w
  5103  0319  1803               	btfsc	3,0
  5104  031A  0008               	return
  5105  031B  2AC1               	goto	l3573
  5106  031C                     __end_of_CheckKeyOldValue:	
  5107  031C                     __ptext30:	
  5108 ;; *************** function _KeyStopClear *****************
  5109 ;; Defined at:
  5110 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5111 ;; Parameters:    Size  Location     Type
  5112 ;;		None
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  53              1    4[COMMON] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  1    wreg      void 
  5117 ;; Registers used:
  5118 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5124 ;;      Params:         0       0       0       0
  5125 ;;      Locals:         1       0       0       0
  5126 ;;      Temps:          0       0       0       0
  5127 ;;      Totals:         1       0       0       0
  5128 ;;Total ram usage:        1 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    3
  5131 ;; This function calls:
  5132 ;;		_KeyClearOne
  5133 ;; This function is called by:
  5134 ;;		_CheckTouchKey
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function _KeyStopClear
  5140  031C                     _KeyStopClear:	
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5144  031C  1283               	bcf	3,5	;RP0=0, select bank0
  5145  031D  1303               	bcf	3,6	;RP1=0, select bank0
  5146  031E  01AC               	clrf	_KeyFlag	;volatile
  5147  031F  01AD               	clrf	_KeyFlag+1	;volatile
  5148  0320  01F4               	clrf	KeyStopClear@53
  5149  0321                     l3485:	
  5150  0321  1003               	clrc
  5151  0322  0D74               	rlf	KeyStopClear@53,w
  5152  0323  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5153  0324  0084               	movwf	4
  5154  0325  1383               	bcf	3,7	;select IRP bank1
  5155  0326  0180               	clrf	0
  5156  0327  0A84               	incf	4,f
  5157  0328  0180               	clrf	0
  5158  0329  0874               	movf	KeyStopClear@53,w
  5159  032A  2295  118A         	fcall	_KeyClearOne
  5160  032C  3002               	movlw	2
  5161  032D  0AF4               	incf	KeyStopClear@53,f
  5162  032E  0274               	subwf	KeyStopClear@53,w
  5163  032F  1803               	btfsc	3,0
  5164  0330  0008               	return
  5165  0331  2B21               	goto	l3485
  5166  0332                     __end_of_KeyStopClear:	
  5167  0332                     __ptext28:	
  5168 ;; *************** function _TurnKeyFlags *****************
  5169 ;; Defined at:
  5170 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  1    wreg      void 
  5177 ;; Registers used:
  5178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5184 ;;      Params:         0       0       0       0
  5185 ;;      Locals:         0       0       0       0
  5186 ;;      Temps:          0       0       0       0
  5187 ;;      Totals:         0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    4
  5191 ;; This function calls:
  5192 ;;		_KeyClearIn
  5193 ;; This function is called by:
  5194 ;;		_CheckTouchKey
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function _TurnKeyFlags
  5200  0332                     _TurnKeyFlags:	
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5204  0332  1283               	bcf	3,5	;RP0=0, select bank0
  5205  0333  1303               	bcf	3,6	;RP1=0, select bank0
  5206  0334  0825               	movf	_KeyData+1,w	;volatile
  5207  0335  0424               	iorwf	_KeyData,w	;volatile
  5208  0336  1903               	btfsc	3,2
  5209  0337  2B56               	goto	l3633
  5210  0338  01AE               	clrf	TurnKeyFlags@F84
  5211  0339  0824               	movf	_KeyData,w	;volatile
  5212  033A  0626               	xorwf	_KeyOldData,w	;volatile
  5213  033B  1D03               	skipz
  5214  033C  2B4F               	goto	l1347
  5215  033D  0825               	movf	_KeyData+1,w	;volatile
  5216  033E  0627               	xorwf	_KeyOldData+1,w	;volatile
  5217  033F  1D03               	skipz
  5218  0340  2B4F               	goto	l1347
  5219  0341  3002               	movlw	2
  5220  0342  0AAF               	incf	TurnKeyFlags@F83,f
  5221  0343  022F               	subwf	TurnKeyFlags@F83,w
  5222  0344  1C03               	skipc
  5223  0345  0008               	return
  5224  0346  01AF               	clrf	TurnKeyFlags@F83
  5225  0347  0824               	movf	_KeyData,w	;volatile
  5226  0348  00AC               	movwf	_KeyFlag	;volatile
  5227  0349  0825               	movf	_KeyData+1,w	;volatile
  5228  034A  00AD               	movwf	_KeyFlag+1	;volatile
  5229  034B  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5230  034C  0008               	return
  5231  034D  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5232  034E  2B79               	ljmp	l3119
  5233  034F                     l1347:	
  5234  034F  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5235  0350  0824               	movf	_KeyData,w	;volatile
  5236  0351  00A6               	movwf	_KeyOldData	;volatile
  5237  0352  0825               	movf	_KeyData+1,w	;volatile
  5238  0353  00A7               	movwf	_KeyOldData+1	;volatile
  5239  0354  01AF               	clrf	TurnKeyFlags@F83
  5240  0355  0008               	return
  5241  0356                     l3633:	
  5242  0356  01AF               	clrf	TurnKeyFlags@F83
  5243  0357  01A6               	clrf	_KeyOldData	;volatile
  5244  0358  01A7               	clrf	_KeyOldData+1	;volatile
  5245  0359  3002               	movlw	2
  5246  035A  0AAE               	incf	TurnKeyFlags@F84,f
  5247  035B  022E               	subwf	TurnKeyFlags@F84,w
  5248  035C  1C03               	skipc
  5249  035D  0008               	return
  5250  035E  01AE               	clrf	TurnKeyFlags@F84
  5251  035F  01AC               	clrf	_KeyFlag	;volatile
  5252  0360  01AD               	clrf	_KeyFlag+1	;volatile
  5253  0361  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5254  0362  0008               	return
  5255  0363                     __end_of_TurnKeyFlags:	
  5256  0363                     __ptext33:	
  5257 ;; *************** function _CheckValidTime *****************
  5258 ;; Defined at:
  5259 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;		None
  5262 ;; Auto vars:     Size  Location     Type
  5263 ;;		None
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  1    wreg      void 
  5266 ;; Registers used:
  5267 ;;		wreg, status,2, status,0
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5273 ;;      Params:         0       0       0       0
  5274 ;;      Locals:         0       0       0       0
  5275 ;;      Temps:          0       0       0       0
  5276 ;;      Totals:         0       0       0       0
  5277 ;;Total ram usage:        0 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    2
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_CheckTouchKey
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           
  5288                           ;psect for function _CheckValidTime
  5289  0363                     _CheckValidTime:	
  5290  0363                     l3643:	
  5291                           ;incstack = 0
  5292                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5293                           
  5294  0363  1283               	bcf	3,5	;RP0=0, select bank0
  5295  0364  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0365  082D               	movf	_KeyFlag+1,w	;volatile
  5297  0366  042C               	iorwf	_KeyFlag,w	;volatile
  5298  0367  1903               	btfsc	3,2
  5299  0368  2B75               	goto	l3649
  5300  0369  1683               	bsf	3,5	;RP0=1, select bank1
  5301  036A  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5302  036B  1903               	skipnz
  5303  036C  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5304  036D  303A               	movlw	58
  5305  036E  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5306  036F  3098               	movlw	152
  5307  0370  1903               	skipnz
  5308  0371  0230               	subwf	CheckValidTime@F87^(0+128),w
  5309  0372  1C03               	skipc
  5310  0373  0008               	return
  5311  0374  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5312  0375                     l3649:	
  5313  0375  1683               	bsf	3,5	;RP0=1, select bank1
  5314  0376  01B0               	clrf	CheckValidTime@F87^(0+128)
  5315  0377  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5316  0378  0008               	return
  5317  0379                     __end_of_CheckValidTime:	
  5318  0379                     __ptext29:	
  5319 ;; *************** function _KeyClearIn *****************
  5320 ;; Defined at:
  5321 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  51              1    5[COMMON] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 300/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5335 ;;      Params:         0       0       0       0
  5336 ;;      Locals:         1       0       0       0
  5337 ;;      Temps:          0       0       0       0
  5338 ;;      Totals:         1       0       0       0
  5339 ;;Total ram usage:        1 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		_KeyClearOne
  5344 ;;		_KeyIsIn
  5345 ;; This function is called by:
  5346 ;;		_TurnKeyFlags
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           
  5351                           ;psect for function _KeyClearIn
  5352  0379                     _KeyClearIn:	
  5353  0379                     l3119:	
  5354                           ;incstack = 0
  5355                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5356                           
  5357  0379  01F5               	clrf	KeyClearIn@51
  5358  037A                     l3125:	
  5359  037A  0875               	movf	KeyClearIn@51,w
  5360  037B  2281  118A         	fcall	_KeyIsIn
  5361  037D  3A00               	xorlw	0
  5362  037E  1D03               	skipz
  5363  037F  2B83               	goto	l3129
  5364  0380  0875               	movf	KeyClearIn@51,w
  5365  0381  2295  118A         	fcall	_KeyClearOne
  5366  0383                     l3129:	
  5367  0383  3002               	movlw	2
  5368  0384  0AF5               	incf	KeyClearIn@51,f
  5369  0385  0275               	subwf	KeyClearIn@51,w
  5370  0386  1803               	btfsc	3,0
  5371  0387  0008               	return
  5372  0388  2B7A               	goto	l3125
  5373  0389                     __end_of_KeyClearIn:	
  5374  0389                     __ptext24:	
  5375 ;; *************** function _Refurbish_Sfr *****************
  5376 ;; Defined at:
  5377 ;;		line 116 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0
  5386 ;; Tracked objects:
  5387 ;;		On entry : 200/0
  5388 ;;		On exit  : 300/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5391 ;;      Params:         0       0       0       0
  5392 ;;      Locals:         0       0       0       0
  5393 ;;      Temps:          0       0       0       0
  5394 ;;      Totals:         0       0       0       0
  5395 ;;Total ram usage:        0 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    2
  5398 ;; This function calls:
  5399 ;;		Nothing
  5400 ;; This function is called by:
  5401 ;;		_WorkSleep
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _Refurbish_Sfr
  5408  0389                     _Refurbish_Sfr:	
  5409                           
  5410                           ;main.c: 119: PIE1 = 2;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5414  0389  3002               	movlw	2
  5415  038A  1283               	bcf	3,5	;RP0=0, select bank0
  5416  038B  008E               	movwf	14	;volatile
  5417                           
  5418                           ;main.c: 120: PR2 = 250;
  5419  038C  30FA               	movlw	250
  5420  038D  0091               	movwf	17	;volatile
  5421                           
  5422                           ;main.c: 121: INTCON = 0XC0;
  5423  038E  30C0               	movlw	192
  5424  038F  008B               	movwf	11	;volatile
  5425                           
  5426                           ;main.c: 122: if (4 != T2CON)
  5427  0390  3004               	movlw	4
  5428  0391  0613               	xorwf	19,w	;volatile
  5429  0392  1903               	btfsc	3,2
  5430  0393  0008               	return
  5431                           
  5432                           ;main.c: 123: T2CON = 4;
  5433  0394  3004               	movlw	4
  5434  0395  0093               	movwf	19	;volatile
  5435  0396  0008               	return
  5436  0397                     __end_of_Refurbish_Sfr:	
  5437  0397                     PL2:	
  5438  0397  0800               	movf	0,w
  5439  0398  00CB               	movwf	CheckKeyOldValue@80
  5440  0399  0A84               	incf	4,f
  5441  039A  0800               	movf	0,w
  5442  039B  00CC               	movwf	CheckKeyOldValue@80+1
  5443  039C  0849               	movf	CheckKeyOldValue@79,w
  5444  039D  02CB               	subwf	CheckKeyOldValue@80,f
  5445  039E  084A               	movf	CheckKeyOldValue@79+1,w
  5446  039F  1C03               	skipc
  5447  03A0  03CC               	decf	CheckKeyOldValue@80+1,f
  5448  03A1  02CC               	subwf	CheckKeyOldValue@80+1,f
  5449  03A2  3000               	movlw	0
  5450  03A3  024C               	subwf	CheckKeyOldValue@80+1,w
  5451  03A4  3402               	retlw	2
  5452  03A5                     __end_ofPL2:	
  5453  03A5                     PL4:	
  5454  03A5  00C9               	movwf	??_CheckOnceResult
  5455  03A6  0A84               	incf	4,f
  5456  03A7  0800               	movf	0,w
  5457  03A8  00CA               	movwf	??_CheckOnceResult+1
  5458  03A9  0852               	movf	CheckOnceResult@69,w
  5459  03AA  0749               	addwf	??_CheckOnceResult,w
  5460  03AB  00CB               	movwf	??_CheckOnceResult+2
  5461  03AC  084A               	movf	??_CheckOnceResult+1,w
  5462  03AD  1803               	skipnc
  5463  03AE  0A4A               	incf	??_CheckOnceResult+1,w
  5464  03AF  00CC               	movwf	??_CheckOnceResult+3
  5465  03B0  0854               	movf	CheckOnceResult@71+1,w
  5466  03B1  024C               	subwf	??_CheckOnceResult+3,w
  5467  03B2  1D03               	skipz
  5468  03B3  0008               	return
  5469  03B4  0853               	movf	CheckOnceResult@71,w
  5470  03B5  024B               	subwf	??_CheckOnceResult+2,w
  5471  03B6  0008               	return
  5472  03B7                     __end_ofPL4:	
  5473  03B7                     PL8:	
  5474  03B7  0084               	movwf	4
  5475  03B8  0800               	movf	0,w
  5476  03B9  00C9               	movwf	??_CheckOnceResult
  5477  03BA  0A84               	incf	4,f
  5478  03BB  0800               	movf	0,w
  5479  03BC  00CA               	movwf	??_CheckOnceResult+1
  5480  03BD  0008               	return
  5481  03BE                     __end_ofPL8:	
  5482  03BE                     PL10:	
  5483  03BE  0084               	movwf	4
  5484  03BF  0875               	movf	??_CheckKeyOldValue,w
  5485  03C0  0080               	movwf	0
  5486  03C1  0A84               	incf	4,f
  5487  03C2  0876               	movf	??_CheckKeyOldValue+1,w
  5488  03C3  0080               	movwf	0
  5489  03C4  1003               	clrc
  5490  03C5  0D4D               	rlf	CheckKeyOldValue@78,w
  5491  03C6  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5492  03C7  0084               	movwf	4
  5493  03C8  0008               	return
  5494  03C9                     __end_ofPL10:	
  5495  03C9                     PL14:	
  5496  03C9  0084               	movwf	4
  5497  03CA  0874               	movf	??_SystemEnterSleep,w
  5498  03CB  0080               	movwf	0
  5499  03CC  0A84               	incf	4,f
  5500  03CD  0875               	movf	??_SystemEnterSleep+1,w
  5501  03CE  0080               	movwf	0
  5502  03CF  1003               	clrc
  5503  03D0  0D54               	rlf	SystemEnterSleep@91,w
  5504  03D1  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5505  03D2  0084               	movwf	4
  5506  03D3  0008               	return
  5507  03D4                     __end_ofPL14:	
  5508  03D4                     PL16:	
  5509  03D4  0084               	movwf	4
  5510  03D5  0800               	movf	0,w
  5511  03D6  00F4               	movwf	??_SystemEnterSleep
  5512  03D7  0A84               	incf	4,f
  5513  03D8  0800               	movf	0,w
  5514  03D9  00F5               	movwf	??_SystemEnterSleep+1
  5515  03DA  0008               	return
  5516  03DB                     __end_ofPL16:	
  5517  03DB                     PL20:	
  5518  03DB  0800               	movf	0,w
  5519  03DC  00F5               	movwf	??_CheckKeyOldValue
  5520  03DD  0A84               	incf	4,f
  5521  03DE  0800               	movf	0,w
  5522  03DF  00F6               	movwf	??_CheckKeyOldValue+1
  5523  03E0  1003               	clrc
  5524  03E1  0D4D               	rlf	CheckKeyOldValue@78,w
  5525  03E2  0008               	return
  5526  03E3                     __end_ofPL20:	
  5527  03E3                     PL22:	
  5528  03E3  0180               	clrf	0
  5529  03E4  0A84               	incf	4,f
  5530  03E5  0180               	clrf	0
  5531  03E6  1003               	clrc
  5532  03E7  0D73               	rlf	KeyClearOne@49,w
  5533  03E8  0008               	return
  5534  03E9                     __end_ofPL22:	
  5535  03E9                     PL26:	
  5536  03E9  3041               	movlw	65
  5537  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  5538  03EB  0095               	movwf	21	;volatile
  5539  03EC  1415               	bsf	21,0	;volatile
  5540  03ED  0196               	clrf	22	;volatile
  5541  03EE  0008               	return
  5542  03EF                     __end_ofPL26:	
  5543  03EF                     PL30:	
  5544  03EF  0849               	movf	CheckKeyOldValue@79,w
  5545  03F0  0080               	movwf	0
  5546  03F1  0A84               	incf	4,f
  5547  03F2  084A               	movf	CheckKeyOldValue@79+1,w
  5548  03F3  0080               	movwf	0
  5549  03F4  0008               	return
  5550  03F5                     __end_ofPL30:	
  5551  03F5                     PL32:	
  5552  03F5  01D4               	clrf	SystemEnterSleep@91
  5553  03F6  01D2               	clrf	SystemEnterSleep@92
  5554  03F7  0AD2               	incf	SystemEnterSleep@92,f
  5555  03F8  01D3               	clrf	SystemEnterSleep@92+1
  5556  03F9  0008               	return
  5557  03FA                     __end_ofPL32:	
  5558  03FA                     PL34:	
  5559  03FA  0DD2               	rlf	SystemEnterSleep@92,f
  5560  03FB  0DD3               	rlf	SystemEnterSleep@92+1,f
  5561  03FC  0AD4               	incf	SystemEnterSleep@91,f
  5562  03FD  0254               	subwf	SystemEnterSleep@91,w
  5563  03FE  0008               	return
  5564  03FF                     __end_ofPL34:	
  5565                           
  5566                           	psect	text39
  5567  0F2C                     __ptext39:	
  5568 ;; *************** function _Isr_Timer *****************
  5569 ;; Defined at:
  5570 ;;		line 195 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;		None
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 300/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5584 ;;      Params:         0       0       0       0
  5585 ;;      Locals:         0       0       0       0
  5586 ;;      Temps:          3       0       0       0
  5587 ;;      Totals:         3       0       0       0
  5588 ;;Total ram usage:        3 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    1
  5591 ;; This function calls:
  5592 ;;		_ledShow
  5593 ;; This function is called by:
  5594 ;;		Interrupt level 1
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _Isr_Timer
  5600  0F2C                     _Isr_Timer:	
  5601                           
  5602                           ;main.c: 197: if(TMR2IF)
  5603  0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  5604  0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  5605  0F2E  1C8D               	btfss	13,1	;volatile
  5606  0F2F  2F4D               	goto	i1l4131
  5607                           
  5608                           ;main.c: 198: {
  5609                           ;main.c: 199: TMR2IF = 0;
  5610  0F30  108D               	bcf	13,1	;volatile
  5611                           
  5612                           ;main.c: 200: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  5613  0F31  086C               	movf	_firstTime,w
  5614  0F32  1D03               	btfss	3,2
  5615  0F33  2F3C               	goto	i1l4119
  5616  0F34  0844               	movf	_workStep,w
  5617  0F35  1D03               	btfss	3,2
  5618  0F36  2F3C               	goto	i1l4119
  5619  0F37  0843               	movf	_wuhuaFlag,w
  5620  0F38  1903               	btfsc	3,2
  5621  0F39  083F               	movf	_chrgFlag,w
  5622  0F3A  1903               	btfsc	3,2
  5623  0F3B  2F3E               	goto	i1l4121
  5624  0F3C                     i1l4119:	
  5625                           
  5626                           ;main.c: 201: {
  5627                           ;main.c: 202: ledShow();
  5628  0F3C  2757  158A         	fcall	_ledShow
  5629  0F3E                     i1l4121:	
  5630                           
  5631                           ;main.c: 203: }
  5632                           ;main.c: 204: if(++MainTime >= 32)
  5633  0F3E  3020               	movlw	32
  5634  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  5635  0F40  0AC6               	incf	_MainTime,f	;volatile
  5636  0F41  0246               	subwf	_MainTime,w	;volatile
  5637  0F42  1C03               	skipc
  5638  0F43  2F4E               	goto	i1l975
  5639                           
  5640                           ;main.c: 205: {
  5641                           ;main.c: 206: MainTime = 0;
  5642  0F44  01C6               	clrf	_MainTime	;volatile
  5643                           
  5644                           ;main.c: 207: B_MainLoop = 1;
  5645  0F45  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5646                           
  5647                           ;main.c: 208: if(++count1s >= 250)
  5648  0F46  30FA               	movlw	250
  5649  0F47  0AC5               	incf	_count1s,f
  5650  0F48  0245               	subwf	_count1s,w
  5651  0F49  1C03               	skipc
  5652  0F4A  2F4E               	goto	i1l975
  5653                           
  5654                           ;main.c: 209: {
  5655                           ;main.c: 210: count1s = 0;
  5656  0F4B  01C5               	clrf	_count1s
  5657  0F4C  2F4E               	goto	i1l975
  5658  0F4D                     i1l4131:	
  5659                           
  5660                           ;main.c: 214: else
  5661                           ;main.c: 215: {
  5662                           ;main.c: 216: PIR1 = 0;
  5663  0F4D  018D               	clrf	13	;volatile
  5664  0F4E                     i1l975:	
  5665  0F4E  0872               	movf	??_Isr_Timer+2,w
  5666  0F4F  008A               	movwf	10
  5667  0F50  0871               	movf	??_Isr_Timer+1,w
  5668  0F51  0084               	movwf	4
  5669  0F52  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5670  0F53  0083               	movwf	3
  5671  0F54  0EFE               	swapf	126,f
  5672  0F55  0E7E               	swapf	126,w
  5673  0F56  0009               	retfie
  5674  0F57                     __end_of_Isr_Timer:	
  5675  0F57                     __ptext40:	
  5676 ;; *************** function _ledShow *****************
  5677 ;; Defined at:
  5678 ;;		line 367 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 300/0
  5689 ;;		On exit  : 200/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5692 ;;      Params:         0       0       0       0
  5693 ;;      Locals:         0       0       0       0
  5694 ;;      Temps:          0       0       0       0
  5695 ;;      Totals:         0       0       0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_Isr_Timer
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _ledShow
  5707  0F57                     _ledShow:	
  5708                           
  5709                           ;main.c: 370: if(++ledCnt > 19)
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  5713  0F57  3014               	movlw	20
  5714  0F58  0ABA               	incf	_ledCnt,f
  5715  0F59  023A               	subwf	_ledCnt,w
  5716  0F5A  1803               	btfsc	3,0
  5717                           
  5718                           ;main.c: 371: {
  5719                           ;main.c: 372: ledCnt = 0;
  5720  0F5B  01BA               	clrf	_ledCnt
  5721                           
  5722                           ;main.c: 374: }
  5723                           ;main.c: 375: PORTA &= 0xE4;
  5724                           
  5725                           ;main.c: 376: PORTB &= 0xEF;
  5726                           
  5727                           ;main.c: 377: TRISA |= 0x1B;
  5728                           
  5729                           ;main.c: 378: TRISB |= 0x10;
  5730  0F5C  158A  25F2  158A   	fcall	PL12	;call to abstracted procedure
  5731                           
  5732                           ;main.c: 379: switch(ledCnt)
  5733  0F5F  2FEF               	goto	i1l3909
  5734  0F60                     i1l1009:	
  5735                           ;main.c: 383: case 1:
  5736                           
  5737                           
  5738                           ;main.c: 384: if(showNumShi & 0x01)
  5739  0F60  1C6E               	btfss	_showNumShi,0
  5740  0F61  0008               	return
  5741                           
  5742                           ;main.c: 385: {
  5743                           ;main.c: 386: TRISA &= 0xFE;
  5744  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  5745  0F63  1005               	bcf	5,0	;volatile
  5746                           
  5747                           ;main.c: 387: TRISA &= 0xEF;
  5748  0F64  1205               	bcf	5,4	;volatile
  5749                           
  5750                           ;main.c: 388: RA4 = 1;
  5751  0F65  1606               	bsf	6,4	;volatile
  5752  0F66  0008               	return
  5753  0F67                     i1l1011:	
  5754                           ;main.c: 391: case 2:
  5755                           
  5756                           
  5757                           ;main.c: 392: if(showNumShi & 0x02)
  5758  0F67  1CEE               	btfss	_showNumShi,1
  5759  0F68  0008               	return
  5760                           
  5761                           ;main.c: 393: {
  5762                           ;main.c: 394: TRISA &= 0xFE;
  5763  0F69  1683               	bsf	3,5	;RP0=1, select bank1
  5764  0F6A  1005               	bcf	5,0	;volatile
  5765                           
  5766                           ;main.c: 395: TRISA &= 0xF7;
  5767  0F6B  1185               	bcf	5,3	;volatile
  5768                           
  5769                           ;main.c: 396: RA3 = 1;
  5770  0F6C  1586               	bsf	6,3	;volatile
  5771  0F6D  0008               	return
  5772  0F6E                     i1l1013:	
  5773                           ;main.c: 399: case 3:
  5774                           
  5775                           
  5776                           ;main.c: 400: if(showNumShi & 0x04)
  5777  0F6E  1D6E               	btfss	_showNumShi,2
  5778  0F6F  0008               	return
  5779                           
  5780                           ;main.c: 401: {
  5781                           ;main.c: 402: TRISA &= 0xFE;
  5782  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  5783  0F71  1005               	bcf	5,0	;volatile
  5784                           
  5785                           ;main.c: 403: TRISA &= 0xFD;
  5786  0F72  1085               	bcf	5,1	;volatile
  5787                           
  5788                           ;main.c: 404: RA1 = 1;
  5789  0F73  1486               	bsf	6,1	;volatile
  5790  0F74  0008               	return
  5791  0F75                     i1l1015:	
  5792                           ;main.c: 407: case 4:
  5793                           
  5794                           
  5795                           ;main.c: 408: if(showNumShi & 0x08)
  5796  0F75  1DEE               	btfss	_showNumShi,3
  5797  0F76  0008               	return
  5798                           
  5799                           ;main.c: 409: {
  5800                           ;main.c: 410: TRISA &= 0xFE;
  5801  0F77  1683               	bsf	3,5	;RP0=1, select bank1
  5802  0F78  1005               	bcf	5,0	;volatile
  5803                           
  5804                           ;main.c: 411: TRISB &= 0xEF;
  5805                           
  5806                           ;main.c: 412: RB4 = 1;
  5807  0F79  2FFC               	ljmp	PL28	;call to abstracted procedure
  5808  0F7A                     i1l1017:	
  5809                           ;main.c: 415: case 5:
  5810                           
  5811                           
  5812                           ;main.c: 416: if(showNumShi & 0x10)
  5813  0F7A  1E6E               	btfss	_showNumShi,4
  5814  0F7B  0008               	return
  5815                           
  5816                           ;main.c: 417: {
  5817                           ;main.c: 418: TRISA &= 0xEF;
  5818  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  5819  0F7D  1205               	bcf	5,4	;volatile
  5820                           
  5821                           ;main.c: 419: TRISA &= 0xFE;
  5822  0F7E  1005               	bcf	5,0	;volatile
  5823                           
  5824                           ;main.c: 420: RA0 = 1;
  5825  0F7F  1406               	bsf	6,0	;volatile
  5826  0F80  0008               	return
  5827  0F81                     i1l1019:	
  5828                           ;main.c: 423: case 6:
  5829                           
  5830                           
  5831                           ;main.c: 424: if(showNumShi & 0x20)
  5832  0F81  1EEE               	btfss	_showNumShi,5
  5833  0F82  0008               	return
  5834                           
  5835                           ;main.c: 425: {
  5836                           ;main.c: 426: TRISA &= 0xEF;
  5837  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  5838  0F84  1205               	bcf	5,4	;volatile
  5839                           
  5840                           ;main.c: 427: TRISA &= 0xF7;
  5841  0F85  1185               	bcf	5,3	;volatile
  5842                           
  5843                           ;main.c: 428: RA3 = 1;
  5844  0F86  1586               	bsf	6,3	;volatile
  5845  0F87  0008               	return
  5846  0F88                     i1l1021:	
  5847                           ;main.c: 431: case 7:
  5848                           
  5849                           
  5850                           ;main.c: 432: if(showNumShi & 0x40)
  5851  0F88  1F6E               	btfss	_showNumShi,6
  5852  0F89  0008               	return
  5853                           
  5854                           ;main.c: 433: {
  5855                           ;main.c: 434: TRISA &= 0xEF;
  5856  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  5857  0F8B  1205               	bcf	5,4	;volatile
  5858                           
  5859                           ;main.c: 435: TRISA &= 0xFD;
  5860  0F8C  1085               	bcf	5,1	;volatile
  5861                           
  5862                           ;main.c: 436: RA1 = 1;
  5863  0F8D  1486               	bsf	6,1	;volatile
  5864  0F8E  0008               	return
  5865  0F8F                     i1l1023:	
  5866                           ;main.c: 439: case 8:
  5867                           
  5868                           
  5869                           ;main.c: 440: if(showNumGe & 0x01)
  5870  0F8F  1C6D               	btfss	_showNumGe,0
  5871  0F90  0008               	return
  5872                           
  5873                           ;main.c: 441: {
  5874                           ;main.c: 442: TRISA &= 0xEF;
  5875  0F91  1683               	bsf	3,5	;RP0=1, select bank1
  5876  0F92  1205               	bcf	5,4	;volatile
  5877                           
  5878                           ;main.c: 443: TRISB &= 0xEF;
  5879                           
  5880                           ;main.c: 444: RB4 = 1;
  5881  0F93  2FFC               	ljmp	PL28	;call to abstracted procedure
  5882  0F94                     i1l1025:	
  5883                           ;main.c: 447: case 9:
  5884                           
  5885                           
  5886                           ;main.c: 448: if(showNumGe & 0x02)
  5887  0F94  1CED               	btfss	_showNumGe,1
  5888  0F95  0008               	return
  5889                           
  5890                           ;main.c: 449: {
  5891                           ;main.c: 450: TRISA &= 0xF7;
  5892  0F96  1683               	bsf	3,5	;RP0=1, select bank1
  5893  0F97  1185               	bcf	5,3	;volatile
  5894                           
  5895                           ;main.c: 451: TRISA &= 0xFE;
  5896  0F98  1005               	bcf	5,0	;volatile
  5897                           
  5898                           ;main.c: 452: RA0 = 1;
  5899  0F99  1406               	bsf	6,0	;volatile
  5900  0F9A  0008               	return
  5901  0F9B                     i1l1027:	
  5902                           ;main.c: 455: case 10:
  5903                           
  5904                           
  5905                           ;main.c: 456: if(showNumGe & 0x04)
  5906  0F9B  1D6D               	btfss	_showNumGe,2
  5907  0F9C  0008               	return
  5908                           
  5909                           ;main.c: 457: {
  5910                           ;main.c: 458: TRISA &= 0xF7;
  5911  0F9D  1683               	bsf	3,5	;RP0=1, select bank1
  5912  0F9E  1185               	bcf	5,3	;volatile
  5913                           
  5914                           ;main.c: 459: TRISA &= 0xEF;
  5915  0F9F  1205               	bcf	5,4	;volatile
  5916                           
  5917                           ;main.c: 460: RA4 = 1;
  5918  0FA0  1606               	bsf	6,4	;volatile
  5919  0FA1  0008               	return
  5920  0FA2                     i1l1029:	
  5921                           ;main.c: 463: case 11:
  5922                           
  5923                           
  5924                           ;main.c: 464: if(showNumGe & 0x08)
  5925  0FA2  1DED               	btfss	_showNumGe,3
  5926  0FA3  0008               	return
  5927                           
  5928                           ;main.c: 465: {
  5929                           ;main.c: 466: TRISA &= 0xF7;
  5930  0FA4  1683               	bsf	3,5	;RP0=1, select bank1
  5931  0FA5  1185               	bcf	5,3	;volatile
  5932                           
  5933                           ;main.c: 467: TRISA &= 0xFD;
  5934  0FA6  1085               	bcf	5,1	;volatile
  5935                           
  5936                           ;main.c: 468: RA1 = 1;
  5937  0FA7  1486               	bsf	6,1	;volatile
  5938  0FA8  0008               	return
  5939  0FA9                     i1l1031:	
  5940                           ;main.c: 471: case 12:
  5941                           
  5942                           
  5943                           ;main.c: 472: if(showNumGe & 0x10)
  5944  0FA9  1E6D               	btfss	_showNumGe,4
  5945  0FAA  0008               	return
  5946                           
  5947                           ;main.c: 473: {
  5948                           ;main.c: 474: TRISA &= 0xF7;
  5949  0FAB  1683               	bsf	3,5	;RP0=1, select bank1
  5950  0FAC  1185               	bcf	5,3	;volatile
  5951                           
  5952                           ;main.c: 475: TRISB &= 0xEF;
  5953                           
  5954                           ;main.c: 476: RB4 = 1;
  5955  0FAD  2FFC               	ljmp	PL28	;call to abstracted procedure
  5956  0FAE                     i1l1033:	
  5957                           ;main.c: 479: case 13:
  5958                           
  5959                           
  5960                           ;main.c: 480: if(showNumGe & 0x20)
  5961  0FAE  1EED               	btfss	_showNumGe,5
  5962  0FAF  0008               	return
  5963                           
  5964                           ;main.c: 481: {
  5965                           ;main.c: 482: TRISA &= 0xFD;
  5966  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  5967  0FB1  1085               	bcf	5,1	;volatile
  5968                           
  5969                           ;main.c: 483: TRISA &= 0xFE;
  5970  0FB2  1005               	bcf	5,0	;volatile
  5971                           
  5972                           ;main.c: 484: RA0 = 1;
  5973  0FB3  1406               	bsf	6,0	;volatile
  5974  0FB4  0008               	return
  5975  0FB5                     i1l1035:	
  5976                           ;main.c: 487: case 14:
  5977                           
  5978                           
  5979                           ;main.c: 488: if(showNumGe & 0x40)
  5980  0FB5  1F6D               	btfss	_showNumGe,6
  5981  0FB6  0008               	return
  5982                           
  5983                           ;main.c: 489: {
  5984                           ;main.c: 490: TRISA &= 0xFD;
  5985  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  5986  0FB8  1085               	bcf	5,1	;volatile
  5987                           
  5988                           ;main.c: 491: TRISA &= 0xEF;
  5989  0FB9  1205               	bcf	5,4	;volatile
  5990                           
  5991                           ;main.c: 492: RA4 = 1;
  5992  0FBA  1606               	bsf	6,4	;volatile
  5993  0FBB  0008               	return
  5994  0FBC                     i1l3885:	
  5995                           
  5996                           ;main.c: 496: if(firstTime || showNumGe || showNumShi)
  5997  0FBC  086C               	movf	_firstTime,w
  5998  0FBD  1D03               	btfss	3,2
  5999  0FBE  2FC4               	goto	i1l1040
  6000  0FBF  086D               	movf	_showNumGe,w
  6001  0FC0  1903               	btfsc	3,2
  6002  0FC1  086E               	movf	_showNumShi,w
  6003  0FC2  1903               	btfsc	3,2
  6004  0FC3  0008               	return
  6005  0FC4                     i1l1040:	
  6006                           
  6007                           ;main.c: 497: {
  6008                           ;main.c: 498: TRISA &= 0xFD;
  6009  0FC4  1683               	bsf	3,5	;RP0=1, select bank1
  6010  0FC5  1085               	bcf	5,1	;volatile
  6011                           
  6012                           ;main.c: 499: TRISA &= 0xF7;
  6013  0FC6  1185               	bcf	5,3	;volatile
  6014                           
  6015                           ;main.c: 500: RA3 = 1;
  6016  0FC7  1586               	bsf	6,3	;volatile
  6017  0FC8  0008               	return
  6018  0FC9                     i1l3891:	
  6019                           
  6020                           ;main.c: 504: if(firstTime > 0 || wuhuaFlag > 0)
  6021  0FC9  086C               	movf	_firstTime,w
  6022  0FCA  1903               	btfsc	3,2
  6023  0FCB  0843               	movf	_wuhuaFlag,w
  6024  0FCC  1903               	btfsc	3,2
  6025  0FCD  0008               	return
  6026                           
  6027                           ;main.c: 505: {
  6028                           ;main.c: 506: TRISA &= 0xFD;
  6029  0FCE  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0FCF  1085               	bcf	5,1	;volatile
  6031                           
  6032                           ;main.c: 507: TRISB &= 0xEF;
  6033                           
  6034                           ;main.c: 508: RB4 = 1;
  6035  0FD0  2FFC               	ljmp	PL28	;call to abstracted procedure
  6036  0FD1                     i1l3895:	
  6037                           
  6038                           ;main.c: 512: if(firstTime > 0 ||workStep > 0)
  6039  0FD1  086C               	movf	_firstTime,w
  6040  0FD2  1903               	btfsc	3,2
  6041  0FD3  0844               	movf	_workStep,w
  6042  0FD4  1903               	btfsc	3,2
  6043  0FD5  0008               	return
  6044                           
  6045                           ;main.c: 513: {
  6046                           ;main.c: 514: TRISB &= 0xEF;
  6047  0FD6  1205               	bcf	5,4	;volatile
  6048                           
  6049                           ;main.c: 515: TRISA &= 0xFE;
  6050  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  6051  0FD8  1005               	bcf	5,0	;volatile
  6052                           
  6053                           ;main.c: 516: RA0 = 1;
  6054  0FD9  1406               	bsf	6,0	;volatile
  6055  0FDA  0008               	return
  6056  0FDB                     i1l3899:	
  6057                           
  6058                           ;main.c: 520: if(firstTime > 0 ||fanKeyFlag > 0)
  6059  0FDB  086C               	movf	_firstTime,w
  6060  0FDC  1903               	btfsc	3,2
  6061  0FDD  0839               	movf	_fanKeyFlag,w
  6062  0FDE  1903               	btfsc	3,2
  6063  0FDF  0008               	return
  6064                           
  6065                           ;main.c: 521: {
  6066                           ;main.c: 522: TRISB &= 0xEF;
  6067  0FE0  1205               	bcf	5,4	;volatile
  6068                           
  6069                           ;main.c: 523: TRISA &= 0xEF;
  6070  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  6071  0FE2  1205               	bcf	5,4	;volatile
  6072                           
  6073                           ;main.c: 524: RA4 = 1;
  6074  0FE3  1606               	bsf	6,4	;volatile
  6075  0FE4  0008               	return
  6076  0FE5                     i1l3903:	
  6077                           
  6078                           ;main.c: 528: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  6079  0FE5  086C               	movf	_firstTime,w
  6080  0FE6  1903               	btfsc	3,2
  6081  0FE7  0838               	movf	_wuhuaKeyFlag,w
  6082  0FE8  1903               	btfsc	3,2
  6083  0FE9  0008               	return
  6084                           
  6085                           ;main.c: 529: {
  6086                           ;main.c: 530: TRISB &= 0xEF;
  6087  0FEA  1205               	bcf	5,4	;volatile
  6088                           
  6089                           ;main.c: 531: TRISA &= 0xFD;
  6090  0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  6091  0FEC  1085               	bcf	5,1	;volatile
  6092                           
  6093                           ;main.c: 532: RA1 = 1;
  6094  0FED  1486               	bsf	6,1	;volatile
  6095  0FEE  0008               	return
  6096  0FEF                     i1l3909:	
  6097  0FEF  083A               	movf	_ledCnt,w
  6098                           
  6099                           ; Switch size 1, requested type "space"
  6100                           ; Number of cases is 20, Range of values is 0 to 19
  6101                           ; switch strategies available:
  6102                           ; Name         Instructions Cycles
  6103                           ; direct_byte           47     7 (fixed)
  6104                           ; simple_byte           61    31 (average)
  6105                           ; jumptable            260     6 (fixed)
  6106                           ;	Chosen strategy is direct_byte
  6107  0FF0  0084               	movwf	4
  6108  0FF1  3014               	movlw	20
  6109  0FF2  0204               	subwf	4,w
  6110  0FF3  1803               	skipnc
  6111  0FF4  0008               	return
  6112  0FF5  3008               	movlw	high i1S4985
  6113  0FF6  008A               	movwf	10
  6114  0FF7  1003               	clrc
  6115  0FF8  0D04               	rlf	4,w
  6116  0FF9  3E00               	addlw	low i1S4985
  6117  0FFA  0082               	movwf	2
  6118  0FFB                     i1l1058:	
  6119  0FFB  0008               	return
  6120  0FFC                     __end_of_ledShow:	
  6121  007E                     btemp	set	126	;btemp
  6122  007E                     wtemp0	set	126
  6123  0FFC                     PL28:	
  6124  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  6125  0FFD  1205               	bcf	5,4	;volatile
  6126  0FFE  1606               	bsf	6,4	;volatile
  6127  0FFF  0008               	return
  6128  1000                     __end_ofPL28:	
  6129                           
  6130                           	psect	intentry
  6131  0004                     __pintentry:	
  6132                           ;incstack = 0
  6133                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6134                           
  6135  0004                     interrupt_function:	
  6136  007E                     saved_w	set	btemp
  6137  0004  00FE               	movwf	btemp
  6138  0005  0E03               	swapf	3,w
  6139  0006  00F0               	movwf	??_Isr_Timer
  6140  0007  0804               	movf	4,w
  6141  0008  00F1               	movwf	??_Isr_Timer+1
  6142  0009  080A               	movf	10,w
  6143  000A  00F2               	movwf	??_Isr_Timer+2
  6144  000B  158A  2F2C         	ljmp	_Isr_Timer
  6145                           
  6146                           	psect	swtext1
  6147  0800                     __pswtext1:	
  6148  0800                     i1S4985:	
  6149  0800  158A  2FFB         	ljmp	i1l1058
  6150  0802  158A  2F60         	ljmp	i1l1009
  6151  0804  158A  2F67         	ljmp	i1l1011
  6152  0806  158A  2F6E         	ljmp	i1l1013
  6153  0808  158A  2F75         	ljmp	i1l1015
  6154  080A  158A  2F7A         	ljmp	i1l1017
  6155  080C  158A  2F81         	ljmp	i1l1019
  6156  080E  158A  2F88         	ljmp	i1l1021
  6157  0810  158A  2F8F         	ljmp	i1l1023
  6158  0812  158A  2F94         	ljmp	i1l1025
  6159  0814  158A  2F9B         	ljmp	i1l1027
  6160  0816  158A  2FA2         	ljmp	i1l1029
  6161  0818  158A  2FA9         	ljmp	i1l1031
  6162  081A  158A  2FAE         	ljmp	i1l1033
  6163  081C  158A  2FB5         	ljmp	i1l1035
  6164  081E  158A  2FBC         	ljmp	i1l3885
  6165  0820  158A  2FC9         	ljmp	i1l3891
  6166  0822  158A  2FD1         	ljmp	i1l3895
  6167  0824  158A  2FDB         	ljmp	i1l3899
  6168  0826  158A  2FE5         	ljmp	i1l3903


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         69
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      79
    BANK1            80      4      30
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_ClearResSum
    _SystemEnterSleep->_KeyClearOne
    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12840
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     939
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     939
                                              4 COMMON     2     2      0
                                              5 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3268
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              5 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              4 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     263
                                              0 BANK0      5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      65
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              5 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (4) _KeyIsIn                                              2     2      0      69
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (6) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      1E       6       37.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      78       9        0.0%
ABS                  0      0      78       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Dec 25 15:18:11 2024

                        pc 0002                         PL2 0397                         PL4 03A5  
                       PL6 077A                         PL8 03B7              ??_KeyClearOne 0073  
    __size_of_TurnKeyFlags 0031                         fsr 0004           ??_CheckValidTime 0073  
                      PL10 03BE                        PL20 03DB                        PL12 0DF2  
                      PL30 03EF                        PL22 03E3                        PL14 03C9  
                      PL40 079E                        PL32 03F5                        PL24 0792  
                      PL16 03D4                        PL42 07A3                        PL34 03FA  
                      PL26 03E9                        PL18 0789                        PL36 0799  
                      PL28 0FFC                        PL38 07EC                        l991 063E  
                      l997 067A                        _RA0 0430                        _RA1 0431  
                      _RA3 0433                        _RA4 0434                        _RB4 0034  
                      _RB6 0036                        _PR2 0011        __size_of_ADC_Sample 00D0  
                      fsr0 0004                        indf 0000          ?_GetTouchKeyValue 0070  
 __end_of_Table_KeyChannel 0849         ??_GetTouchKeyValue 0074               ___ftdiv@cntr 0058  
             ___ftdiv@sign 005D                       l1001 06C0                       l1100 06FA  
                     l1106 0718                       l1070 0E92                       l1067 0E94  
                     l1068 0E90                       l1095 0E25                       l1408 0469  
                     l1329 0305                       l1347 034F                       l3125 037A  
                     l1366 007A                       l3119 0379                       l4031 0E1F  
                     l4015 0E0E                       l1607 051E                       l1288 0165  
                     l3145 02B5                       l3129 0383                       l1553 05D5  
                     l1378 0099                       l3235 0E43                       l4019 0E10  
                     l4029 0E1E                       l1565 05F9                       l4213 061C  
                     l4223 0627                       l4215 061E                       l4313 012F  
                     l3249 0E56                       l3265 0E70                       l3257 0E5C  
                     l4401 073E                       l1659 0E49                       l4251 066E  
                     l4317 0135                       l4253 0676                       l4229 0628  
                     l4343 0174                       l3383 0E29                       l4263 06C4  
                     l4247 0663                       l4239 0648                       l4511 0716  
                     l4345 0186                       l3633 0356                       l4441 00C6  
                     l4353 047F                       l4513 071B                       l4505 06FC  
                     l3643 0363                       l4371 05E9                       l4291 0743  
                     l4275 0769                       l3573 02C1                       l4605 01FD  
                     l4197 0191                       l3485 0321                       l3813 07C0  
                     l4453 00CD                       l4365 05D9                       l4541 043E  
                     l4285 0775                       l4199 0192                       l4471 0101  
                     l4375 05F7                       l4367 05DC                       l4551 0455  
                     l4625 0233                       l3649 0375                       l3833 07DB  
                     l3841 07E7                       l3817 07C7                       l3809 07BB  
                     l4801 0E7A                       l4377 05EE                       l4369 05E1  
                     l4713 0590                       l4529 040B                       l4561 0460  
                     l4393 072B                       l4643 026B                       l4619 022B  
                     l4651 0279                       l3819 07C9                       l3843 07EA  
                     l4467 00FA                       l4723 059C                       l4555 045B  
                     l3829 07D6                       l4813 0E97                       l4725 05A6  
                     l4717 0598                       l4549 0453                       l4581 0768  
                     l4573 075C                       l4647 026F                       l4639 025F  
                     l3839 07E5                       l4487 0122                       l4743 0F10  
                     l4823 0EC3                       l4559 045F                       l4567 0753  
                     l2993 028F                       l4649 0273                       l4913 008E  
                     l4905 0089                       l4921 0098                       l4817 0EAD  
                     l4657 0510                       l4729 05B4                       l4497 06F5  
                     l4587 01A6                       l4915 0092                       l4755 0F27  
                     l4835 0EE0                       l4499 06F7                       l4579 0767  
                     l4837 0EE4                       l4679 0531                       l4695 056D  
                     l4871 04E5                       l4697 0572                       l4881 04F8  
                     l4929 0DC2                       l4859 04CF                       l4789 0069  
                     l4885 04FD                       l4869 04E4                       l4879 04F7  
                     _ADON 04A8                       _CHS4 04B6                       u5005 024B  
                     _PIE1 000E                       _PIE2 0110                       u5115 0575  
                     u5205 0F19                       u4415 06B5                       u4435 06CD  
                     _RAIF 006B                       u5085 053F                       u4365 0669  
                     _INTF 0059                       u4375 0674                       _RBIE 005B  
                     _RBIF 0058                       u4625 0731                       u5607 0618  
                     _PIR1 000D                       _PIR2 010F                       u4835 042F  
                     u4935 01B3                       u4695 00F6                       u4955 01EE  
                     u4965 0203                       u4975 020F                       _TMR0 0081  
                     _WPUB 0008                       _main 0DBA               ___ftpack@arg 0073  
             ___ftpack@exp 0076                       btemp 007E              ?_KeyStopClear 0070  
                     start 000D               _TurnKeyFlags 0332            __end_of_KeyIsIn 0295  
          __end_of_KeyHave 02B8               ___fttol@exp1 006A              ??_Init_System 0073  
             ___fttol@lval 0066            TurnKeyFlags@F83 002F            TurnKeyFlags@F84 002E  
                    ?_main 0070            __end_of___lbdiv 0E58            __end_of___lbmod 0E74  
          __end_of___ftdiv 0564            __end_of___fttol 05BD                      _IOCB0 0048  
                    _T2CON 0013   __end_of_SystemEnterSleep 0129            __end_of___lwdiv 0F2C  
          __end_of___lwmod 0743                      i1l975 0F4E                      _PORTA 0086  
                    _PORTB 0006                      _PORTC 0106            __end_of_fanInit 074F  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _TRISC 0105                      _PWMTL 0017            __end_of_fanStop 0753  
          __end_of_chrgCtr 0E29        ___lmul@multiplicand 004D        __end_of_KeyClearOne 02AA  
          __end_of_ledShow 0FFC                 _KeyClearIn 0379             fanCtr@fan_temp 0057  
            ___ftpack@sign 0077             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 0775                _ClearResSum 0191                 _KeyCounter 0032  
               _KeyOldData 0026            __end_of_pwmStop 077A             ??_KeyStopClear 0074  
                    status 0003                      wtemp0 007E            __end_of_workCtr 0502  
          ___lbdiv@divisor 0073                 _KeyUpShake 00B8            ___lbdiv@counter 0075  
          __initialization 000F               __end_of_main 0DF2                     ??_main 0078  
            ___fttol@sign1 0065        __end_of_Init_System 0041                     _ADCON0 0095  
                   _ADCON1 0096                     _ADRESH 0099                     _ADRESL 0098  
                   i1S4985 0800           __end_of___ftpack 060B                     _GODONE 04A9  
                   i1l1011 0F67                     i1l1021 0F88                     i1l1013 0F6E  
                   i1l1031 0FA9                     i1l1023 0F8F                     i1l1015 0F75  
                   i1l1040 0FC4                     i1l1033 0FAE                     i1l1025 0F94  
                   i1l1017 0F7A                     i1l1009 0F60                     i1l1035 0FB5  
                   i1l1027 0F9B                     i1l1019 0F81                     i1l1029 0FA2  
                   i1l1058 0FFB                     i1l4121 0F3E                     i1l4131 0F4D  
                   i1l4119 0F3C                     i1l3903 0FE5                     i1l3909 0FEF  
                   i1l3891 0FC9                     i1l3885 0FBC                     i1l3895 0FD1  
                   i1l3899 0FDB                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 05CD         __size_of_KeyServer 0045                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
             ??_ADC_Sample 0074                     _TRISB0 0028                     _TRISB6 002E  
                ??_KeyIsIn 0073                  ??_KeyHave 0075              ClearResSum@56 0073  
       __size_of_Isr_Timer 002B  __size_of_CheckKeyOldValue 0064                     ___lmul 0465  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 03FF  
                ??___lbdiv 0074                  ??___lbmod 0074                  ??___ftdiv 0055  
                ??___fttol 0062                     _ledCnt 003A                  ??___lwdiv 0077  
                ??___lwmod 0077               _wuhuaKeyFlag 0038                  ??_fanInit 0073  
                ??_fanStop 0073                _KeyClearOne 0295                  ??_chrgCtr 0078  
                   _result 00B2                  ??_ledShow 0070           __end_of_numArray 083B  
            _Table_KeyFalg 083B              _Table_KeyDown 0843         __end_of_ADC_Sample 06DB  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0073  
                ??_pwmStop 0073                ?_KeyClearIn 0070                  ??_workCtr 0078  
          _CheckOnceResult 01A0           ___lbdiv@dividend 0074           __end_of_wuhuaCtr 0769  
          ___lbmod@divisor 0073    __end_of__initialization 0021            ___lbmod@counter 0076  
       __size_of_WorkSleep 002B          CheckOnceResult@70 004F          CheckOnceResult@71 0053  
        CheckOnceResult@72 0050          CheckOnceResult@73 004D          CheckOnceResult@68 0055  
        CheckOnceResult@69 0052                 ___ftdiv@f1 0052                 ___ftdiv@f2 004F  
               ___ftdiv@f3 0059                 ___fttol@f1 005E             __pcstackCOMMON 0070  
             __pidataBANK0 0000                _Init_System 0024                 __end_ofPL2 03A5  
               __end_ofPL4 03B7                 __end_ofPL6 0789                 __end_ofPL8 03BE  
         ___lbdiv@quotient 0076          __end_of_KeyServer 07EC                 ___lwtoft@c 004C  
     __end_of_KeyStopClear 0332          __end_of_Isr_Timer 0F57                 _fanKeyFlag 0039  
       __size_of_keyLedCtr 0044                 __pbssBANK0 0020                 __pbssBANK1 00A0  
__size_of_GetTouchKeyValue 0068               _chrgFullTime 003E              _CheckTouchKey 006C  
               __pmaintext 0DBA                    ?___lmul 0049                    ?_fanCtr 0070  
               __pintentry 0004        __size_of_KeyClearIn 0010             ___lmul@product 0073  
                ?___ftpack 0073          __end_of_WorkSleep 006C                  ?___lwtoft 004C  
        ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0281                    _KEYCON0 0111  
                  _KEYCON1 0112                    _KEYCON2 0113                 _curBatStep 0036  
       ??_SystemEnterSleep 0074                    _B_OnOff 03C5                    _PWMD01H 001E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D       __end_of_Table_KeyCap 0847                 __stringtab 0828  
             ?_ClearResSum 0070                    _KeyData 0024                    _KeyFlag 002C  
                  _KeyIsIn 0281                    _KeyHave 02AA             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0073            ADC_Sample@admax 0052            ADC_Sample@admin 0050  
          ADC_Sample@adsum 004C           _CheckKeyOldValue 02B8                    ___lbdiv 0E3D  
          __size_of___lmul 0033                    ___lbmod 0E58                    ___ftdiv 0502  
          __size_of_fanCtr 0066                    ___fttol 0564                    ___lwdiv 0F02  
                  ___lwmod 071F          __end_of_keyLedCtr 071F                    _b_kover 03C4  
                  _fanInit 0743                    _fanDuty 0042                    _fanStop 074F  
               ??___ftpack 0049                    _chrgCtr 0DFD                    __ptext1 0498  
                  __ptext2 0753                    __ptext3 0775                    __ptext4 0769  
                  __ptext5 06DB                    __ptext6 071F                    __ptext7 03FF  
                  __ptext8 074F                    __ptext9 0743                 _lowBatLock 003D  
                  _ledShow 0F57                 _lowBatTime 003C                  ?_wuhuaCtr 0070  
               ??___lwtoft 0078                    _count1s 0045                 _lowFanTime 003B  
               _setBatStep 0E74                    _pwmInit 0769                    _pwmStop 0775  
  __size_of_CheckValidTime 0016                    clrloop0 07F2                    _workCtr 0498  
     end_of_initialization 0021              _Refurbish_Sfr 0389                 _showBatLed 0E29  
             _KeyOldValue0 00A8               _KeyOldValue1 0020               _KeyOldValue2 00A4  
    __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054         SystemEnterSleep@92 0052  
       SystemEnterSleep@93 0050         SystemEnterSleep@94 004E               ?_KeyClearOne 0070  
               _showNumShi 006E               _KeyReference 00A0                 ??_wuhuaCtr 0073  
        CheckValidTime@F87 00B0           ?_CheckOnceResult 0070           ___lbmod@dividend 0075  
                KeyIsIn@45 0074                  KeyIsIn@46 0073                  KeyHave@58 0075  
                KeyHave@59 0073               ??_KeyClearIn 0075                ___lbmod@rem 0077  
              ___ftdiv@exp 005C            ??_CheckTouchKey 0077               _KeyStopClear 031C  
         _GetTouchKeyValue 0129             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 0498             __end_of_fanCtr 0465         __end_of_KeyClearIn 0389  
            WorkSleep@time 0033                  _KeyMaxSub 0031                  _KeyResSum 00AC  
              __end_ofPL10 03C9                __end_ofPL20 03E3                __end_ofPL12 0DFD  
              __end_ofPL30 03F5                __end_ofPL22 03E9                __end_ofPL14 03D4  
              __end_ofPL40 07A3                __end_ofPL32 03FA                __end_ofPL24 0799  
              __end_ofPL16 03DB                __end_ofPL42 07A7                __end_ofPL34 03FF  
              __end_ofPL26 03EF                __end_ofPL18 0792                __end_ofPL36 079E  
              __end_ofPL28 1000                __end_ofPL38 07F1        start_initialization 000F  
                _KeyServer 07A7                ?_setBatStep 0070                  _Isr_Timer 0F2C  
        workCtr@power_temp 00BA       __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070  
              ?_showBatLed 0070                   ??___lmul 0073                   ??_fanCtr 0078  
        ADC_Sample@ad_temp 0054                __pdataBANK0 006D               _Table_KeyCap 0845  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0040  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 0049              __pcstackBANK1 00BA                  _WorkSleep 0041  
           _CheckValidTime 0363   __end_of_CheckKeyOldValue 031C                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 0034                   ?_KeyIsIn 0070                   ?_KeyHave 0073  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0073             ??_TurnKeyFlags 0076  
                __pnvBANK0 006B           ___lwdiv@dividend 0075        __size_of_setBatStep 008E  
                 ?___lbdiv 0073                   ?___lbmod 0073                   ?___ftdiv 004F  
                 ?___fttol 005E                   ?___lwdiv 0073                   ?___lwmod 0073  
                 ?_fanInit 0070                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 0028                  __pstrings 0828                  __pswtext1 0800  
                 ?_ledShow 0070       __size_of_KeyClearOne 0015                  _keyLedCtr 06DB  
                _firstLock 006B     __end_of_CheckValidTime 0379                  _firstTime 006C  
        __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070             ADC_Sample@adch 004A  
                 ?_pwmInit 0070                   ?_pwmStop 0070           ___lwdiv@quotient 004A  
      __size_of_showBatLed 0014                   ?_workCtr 0070                ADC_Sample@i 004B  
              ADC_Sample@j 0049                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 07F1             KeyStopClear@53 0074  
      CheckKeyOldValue@F77 0030                  _showNumGe 006D                __stringbase 082D  
     __size_of_Init_System 001D      __end_of_Table_KeyFalg 0843      __end_of_Table_KeyDown 0845  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0191            ?_CheckValidTime 0070  
              ??_KeyServer 0073          ___lmul@multiplier 0049                  _wuhuaFlag 0043  
              ??_Isr_Timer 0070                   _MainTime 0046                 _ADC_Sample 060B  
         __size_of_KeyIsIn 0014           __size_of_KeyHave 000E           _Table_KeyChannel 0847  
         __size_of___lbdiv 001B           __size_of___lbmod 001C           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwdiv 002A           __size_of___lwmod 0024  
                 ___ftpack 05CD           __size_of_fanInit 000C         __end_of__stringtab 082E  
         __size_of_fanStop 0004           __size_of_chrgCtr 002C                   ___lwtoft 05BD  
                 _b_kover1 03C3                   _b_ksleep 03C0           __size_of_ledShow 00A5  
     __end_of_TurnKeyFlags 0363                   _fanValue 00B6                   _adresult 0047  
             ??_setBatStep 0077                   _chrgFlag 003F                ??_WorkSleep 0076  
          ___lwdiv@divisor 0073            ___lwdiv@counter 0049                   __ptext10 0465  
                 __ptext11 060B                   __ptext20 0E58                   __ptext12 05BD  
                 __ptext21 0E3D                   __ptext13 0564                   __ptext30 031C  
                 __ptext22 0041                   __ptext14 0502                   __ptext31 0129  
                 __ptext23 0099                   __ptext15 05CD                   __ptext40 0F57  
                 __ptext32 0191                   __ptext24 0389                   __ptext16 0E74  
                 __ptext33 0363                   __ptext25 07A7                   __ptext17 0F02  
                 __ptext34 01A0                   __ptext26 0024                   __ptext18 0DFD  
                 __ptext35 02AA                   __ptext27 006C                   __ptext19 0E29  
                 __ptext36 0295                   __ptext28 0332                   __ptext37 02B8  
                 __ptext29 0379                   __ptext38 0281                   __ptext39 0F2C  
         __size_of_pwmInit 000C           __size_of_pwmStop 0005               _shanshuoTime 002A  
                 _count10s 0041                   _count30s 00B4           __size_of_workCtr 006A  
 __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 004D         GetTouchKeyValue@63 004B  
       GetTouchKeyValue@64 0049              __size_of_main 0038           _SystemEnterSleep 0099  
    __end_of_CheckTouchKey 0099                   _numArray 082E               ??_showBatLed 0078  
       CheckKeyOldValue@80 004B         CheckKeyOldValue@78 004D         CheckKeyOldValue@79 0049  
                 _test_adc 0035         __end_of_setBatStep 0F02                   _power_ad 0079  
                 _workStep 0044                   _wuhuaCtr 0753                ??_keyLedCtr 0078  
        ?_CheckKeyOldValue 0070         __end_of_showBatLed 0E3D                   intlevel1 0000  
            ??_ClearResSum 0073         ??_CheckKeyOldValue 0075           ___lwmod@dividend 0075  
              ?_ADC_Sample 0073                  stringcode 0828                _showBatStep 0037  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0056                 _OPTION_REG 0001  
          ___lwmod@divisor 0073            ___lwmod@counter 0077                   stringdir 0828  
                 stringtab 0828              KeyClearOne@49 0073               KeyClearIn@51 0075  
    __end_of_Refurbish_Sfr 0397        __end_of_ClearResSum 01A0          ??_CheckOnceResult 0049  
