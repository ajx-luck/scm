

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 16 17:23:50 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text16,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text25,local,class=CODE,merge=1,delta=2
    22                           	psect	text26,local,class=CODE,merge=1,delta=2
    23                           	psect	text39,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  0000                     __pidataBANK0:	
    66                           
    67                           	psect	strings
    68  0828                     __pstrings:	
    69  0828                     stringtab:	
    70  0828                     __stringtab:	
    71  0828                     stringcode:	
    72                           ;	String table - string pointers are 1 byte each
    73                           
    74  0828                     stringdir:	
    75  0828  3008               	movlw	high stringdir
    76  0829  008A               	movwf	10
    77  082A  0804               	movf	4,w
    78  082B  0A84               	incf	4,f
    79  082C  0782               	addwf	2,f
    80  082D                     __stringbase:	
    81  082D  3400               	retlw	0
    82  082E                     __end_of__stringtab:	
    83  082E                     _numArray:	
    84  082E  343F               	retlw	63
    85  082F  3406               	retlw	6
    86  0830  345B               	retlw	91
    87  0831  344F               	retlw	79
    88  0832  3466               	retlw	102
    89  0833  346D               	retlw	109
    90  0834  347D               	retlw	125
    91  0835  3407               	retlw	7
    92  0836  347F               	retlw	127
    93  0837  346F               	retlw	111
    94  0838  3471               	retlw	113
    95  0839  3479               	retlw	121
    96  083A  3450               	retlw	80
    97  083B                     __end_of_numArray:	
    98  083B                     _Table_KeyFalg:	
    99  083B  3401               	retlw	1
   100  083C  3402               	retlw	2
   101  083D  3404               	retlw	4
   102  083E  3408               	retlw	8
   103  083F  3410               	retlw	16
   104  0840  3420               	retlw	32
   105  0841  3440               	retlw	64
   106  0842  3480               	retlw	128
   107  0843                     __end_of_Table_KeyFalg:	
   108  0843                     _Table_KeyDown:	
   109  0843  340A               	retlw	10
   110  0844  340A               	retlw	10
   111  0845                     __end_of_Table_KeyDown:	
   112  0845                     _Table_KeyCap:	
   113  0845  3402               	retlw	2
   114  0846  3402               	retlw	2
   115  0847                     __end_of_Table_KeyCap:	
   116  0847                     _Table_KeyChannel:	
   117  0847  3442               	retlw	66
   118  0848  3443               	retlw	67
   119  0849                     __end_of_Table_KeyChannel:	
   120                           
   121                           	psect	nvBANK0
   122  006B                     __pnvBANK0:	
   123  006B                     _firstLock:	
   124  006B                     	ds	1
   125  006C                     _firstTime:	
   126  006C                     	ds	1
   127  001E                     _PWMD01H	set	30
   128  001D                     _PWMCON2	set	29
   129  001A                     _PWMD1L	set	26
   130  0019                     _PWMD0L	set	25
   131  0018                     _PWMTH	set	24
   132  0017                     _PWMTL	set	23
   133  0016                     _PWMCON1	set	22
   134  0015                     _PWMCON0	set	21
   135  0014                     _OSCCON	set	20
   136  0013                     _T2CON	set	19
   137  0011                     _PR2	set	17
   138  000E                     _PIE1	set	14
   139  000D                     _PIR1	set	13
   140  000B                     _INTCON	set	11
   141  0008                     _WPUB	set	8
   142  0006                     _PORTB	set	6
   143  0005                     _TRISB	set	5
   144  0001                     _OPTION_REG	set	1
   145  0069                     _TMR2IF	set	105
   146  006B                     _RAIF	set	107
   147  0058                     _RBIF	set	88
   148  0059                     _INTF	set	89
   149  005B                     _RBIE	set	91
   150  0048                     _IOCB0	set	72
   151  0034                     _RB4	set	52
   152  0036                     _RB6	set	54
   153  0028                     _TRISB0	set	40
   154  002E                     _TRISB6	set	46
   155  0099                     _ADRESH	set	153
   156  0098                     _ADRESL	set	152
   157  0096                     _ADCON1	set	150
   158  0095                     _ADCON0	set	149
   159  0086                     _PORTA	set	134
   160  0085                     _TRISA	set	133
   161  0081                     _TMR0	set	129
   162  04B2                     _LDO_EN	set	1202
   163  04B6                     _CHS4	set	1206
   164  04A8                     _ADON	set	1192
   165  04A9                     _GODONE	set	1193
   166  0430                     _RA0	set	1072
   167  0431                     _RA1	set	1073
   168  0433                     _RA3	set	1075
   169  0434                     _RA4	set	1076
   170  0117                     _KEYDATAH	set	279
   171  0116                     _KEYDATAL	set	278
   172  0113                     _KEYCON2	set	275
   173  0112                     _KEYCON1	set	274
   174  0111                     _KEYCON0	set	273
   175  0110                     _PIE2	set	272
   176  010F                     _PIR2	set	271
   177  0106                     _PORTC	set	262
   178  0105                     _TRISC	set	261
   179                           
   180                           	psect	cinit
   181  000F                     start_initialization:	
   182                           ; #config settings
   183                           
   184  000F                     __initialization:	
   185                           
   186                           ;initializer for _showNumGe
   187  000F  307F               	movlw	127
   188  0010  00ED               	movwf	__pdataBANK0& (0+127)
   189                           
   190                           ;initializer for _showNumShi
   191  0011  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   192  0012  30A0               	movlw	low __pbssBANK1
   193                           
   194                           ; Clear objects allocated to BANK1
   195  0013  1383               	bcf	3,7	;select IRP bank0
   196  0014  0084               	movwf	4
   197  0015  30BE               	movlw	low (__pbssBANK1+30)
   198  0016  158A  257E  118A   	fcall	clear_ram0
   199                           
   200                           ; Clear objects allocated to BANK0
   201  0019  3020               	movlw	low __pbssBANK0
   202  001A  0084               	movwf	4
   203  001B  3049               	movlw	low (__pbssBANK0+41)
   204  001C  158A  257E         	fcall	clear_ram0
   205                           
   206                           ; Clear objects allocated to COMMON
   207  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   208  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   209                           
   210                           ; Clear objects allocated to BITCOMMON
   211  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   212  0021                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215  0021                     __end_of__initialization:	
   216  0021  0183               	clrf	3
   217  0022  118A  2FB9         	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	bitbssCOMMON
   220  03C0                     __pbitbssCOMMON:	
   221  03C0                     _b_ksleep:	
   222  03C0                     	ds	1
   223  03C1                     _b_kerr:	
   224  03C1                     	ds	1
   225  03C2                     _b_kclr:	
   226  03C2                     	ds	1
   227  03C3                     _b_kover1:	
   228  03C3                     	ds	1
   229  03C4                     _b_kover:	
   230  03C4                     	ds	1
   231  03C5                     _B_OnOff:	
   232  03C5                     	ds	1
   233  03C6                     _B_MainLoop:	
   234  03C6                     	ds	1
   235                           
   236                           	psect	bssCOMMON
   237  0079                     __pbssCOMMON:	
   238  0079                     _KeyData:	
   239  0079                     	ds	2
   240                           
   241                           	psect	bssBANK0
   242  0020                     __pbssBANK0:	
   243  0020                     _KeyOldValue1:	
   244  0020                     	ds	4
   245  0024                     _KeyOldData:	
   246  0024                     	ds	2
   247  0026                     _power_ad:	
   248  0026                     	ds	2
   249  0028                     _count30s:	
   250  0028                     	ds	2
   251  002A                     _shanshuoTime2:	
   252  002A                     	ds	2
   253  002C                     _shanshuoTime:	
   254  002C                     	ds	2
   255  002E                     _KeyFlag:	
   256  002E                     	ds	2
   257  0030                     TurnKeyFlags@F84:	
   258  0030                     	ds	1
   259  0031                     TurnKeyFlags@F83:	
   260  0031                     	ds	1
   261  0032                     CheckKeyOldValue@F77:	
   262  0032                     	ds	1
   263  0033                     _KeyMaxSub:	
   264  0033                     	ds	1
   265  0034                     _KeyCounter:	
   266  0034                     	ds	1
   267  0035                     KeyServer@KeyOldFlag:	
   268  0035                     	ds	1
   269  0036                     _test_adc:	
   270  0036                     	ds	1
   271  0037                     _curBatStep:	
   272  0037                     	ds	1
   273  0038                     _showBatStep:	
   274  0038                     	ds	1
   275  0039                     _wuhuaKeyFlag:	
   276  0039                     	ds	1
   277  003A                     _fanKeyFlag:	
   278  003A                     	ds	1
   279  003B                     _ledCnt:	
   280  003B                     	ds	1
   281  003C                     _lowBatLock:	
   282  003C                     	ds	1
   283  003D                     _chrgFullTime:	
   284  003D                     	ds	1
   285  003E                     _chrgFullFlag:	
   286  003E                     	ds	1
   287  003F                     _chrgFlag:	
   288  003F                     	ds	1
   289  0040                     _fanOverTime:	
   290  0040                     	ds	1
   291  0041                     _count10s:	
   292  0041                     	ds	1
   293  0042                     _fanDuty:	
   294  0042                     	ds	1
   295  0043                     _wuhuaFlag:	
   296  0043                     	ds	1
   297  0044                     _workStep:	
   298  0044                     	ds	1
   299  0045                     _count1s:	
   300  0045                     	ds	1
   301  0046                     _MainTime:	
   302  0046                     	ds	1
   303  0047                     _adresult:	
   304  0047                     	ds	2
   305                           
   306                           	psect	dataBANK0
   307  006D                     __pdataBANK0:	
   308  006D                     _showNumGe:	
   309  006D                     	ds	1
   310  006E                     _showNumShi:	
   311  006E                     	ds	1
   312                           
   313                           	psect	bssBANK1
   314  00A0                     __pbssBANK1:	
   315  00A0                     _KeyReference:	
   316  00A0                     	ds	4
   317  00A4                     _KeyOldValue2:	
   318  00A4                     	ds	4
   319  00A8                     _KeyOldValue0:	
   320  00A8                     	ds	4
   321  00AC                     _KeyResSum:	
   322  00AC                     	ds	4
   323  00B0                     CheckValidTime@F87:	
   324  00B0                     	ds	2
   325  00B2                     _result:	
   326  00B2                     	ds	2
   327  00B4                     _count15s:	
   328  00B4                     	ds	2
   329  00B6                     _lowBatTime:	
   330  00B6                     	ds	2
   331  00B8                     _fanValue:	
   332  00B8                     	ds	2
   333  00BA                     _time:	
   334  00BA                     	ds	2
   335  00BC                     _KeyUpShake:	
   336  00BC                     	ds	2
   337                           
   338                           	psect	clrtext
   339  0D7E                     clear_ram0:	
   340                           ;	Called with FSR containing the base address, and
   341                           ;	W with the last address+1
   342                           
   343  0D7E  0064               	clrwdt	;clear the watchdog before getting into this loop
   344  0D7F                     clrloop0:	
   345  0D7F  0180               	clrf	0	;clear RAM location pointed to by FSR
   346  0D80  0A84               	incf	4,f	;increment pointer
   347  0D81  0604               	xorwf	4,w	;XOR with final address
   348  0D82  1903               	btfsc	3,2	;have we reached the end yet?
   349  0D83  3400               	retlw	0	;all done for this memory range, return
   350  0D84  0604               	xorwf	4,w	;XOR again to restore value
   351  0D85  2D7F               	goto	clrloop0	;do the next byte
   352                           
   353                           	psect	cstackBANK1
   354  00BE                     __pcstackBANK1:	
   355  00BE                     workCtr@power_temp:	
   356                           
   357                           ; 4 bytes @ 0x0
   358  00BE                     	ds	4
   359                           
   360                           	psect	cstackCOMMON
   361  0070                     __pcstackCOMMON:	
   362  0070                     ?_ledShow:	
   363  0070                     ??_ledShow:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_SystemEnterSleep:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_CheckTouchKey:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_Init_System:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_Refurbish_Sfr:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_KeyServer:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Isr_Timer:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_Isr_Timer:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_WorkSleep:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_showBatLed:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_setBatStep:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_chrgCtr:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_keyLedCtr:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_pwmInit:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_pwmStop:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_fanInit:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_fanStop:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_fanCtr:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_wuhuaCtr:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_workCtr:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_main:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_KeyIsIn:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_KeyClearOne:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_KeyClearIn:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_KeyStopClear:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_ClearResSum:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_GetTouchKeyValue:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_CheckOnceResult:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_CheckKeyOldValue:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_TurnKeyFlags:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_CheckValidTime:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 1 bytes @ 0x0
   458  0070                     	ds	3
   459  0073                     ??_Init_System:	
   460  0073                     ??_Refurbish_Sfr:	
   461                           ; 1 bytes @ 0x3
   462                           
   463  0073                     ??_KeyServer:	
   464                           ; 1 bytes @ 0x3
   465                           
   466  0073                     ?_ADC_Sample:	
   467                           ; 1 bytes @ 0x3
   468                           
   469  0073                     ??_pwmInit:	
   470                           ; 1 bytes @ 0x3
   471                           
   472  0073                     ??_pwmStop:	
   473                           ; 1 bytes @ 0x3
   474                           
   475  0073                     ??_fanInit:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     ??_fanStop:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     ??_wuhuaCtr:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     ??_KeyIsIn:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     ??_KeyClearOne:	
   488                           ; 1 bytes @ 0x3
   489                           
   490  0073                     ??_ClearResSum:	
   491                           ; 1 bytes @ 0x3
   492                           
   493  0073                     ?_KeyHave:	
   494                           ; 1 bytes @ 0x3
   495                           
   496  0073                     ??_CheckValidTime:	
   497                           ; 1 bytes @ 0x3
   498                           
   499  0073                     ??___lmul:	
   500                           ; 1 bytes @ 0x3
   501                           
   502  0073                     ?___lbdiv:	
   503                           ; 1 bytes @ 0x3
   504                           
   505  0073                     ?___lbmod:	
   506                           ; 1 bytes @ 0x3
   507                           
   508  0073                     ?___lwdiv:	
   509                           ; 1 bytes @ 0x3
   510                           
   511  0073                     ?___lwmod:	
   512                           ; 2 bytes @ 0x3
   513                           
   514  0073                     ?___ftpack:	
   515                           ; 2 bytes @ 0x3
   516                           
   517  0073                     ADC_Sample@adldo:	
   518                           ; 3 bytes @ 0x3
   519                           
   520  0073                     KeyIsIn@46:	
   521                           ; 1 bytes @ 0x3
   522                           
   523  0073                     KeyClearOne@49:	
   524                           ; 1 bytes @ 0x3
   525                           
   526  0073                     ClearResSum@56:	
   527                           ; 1 bytes @ 0x3
   528                           
   529  0073                     ___lbdiv@divisor:	
   530                           ; 1 bytes @ 0x3
   531                           
   532  0073                     ___lbmod@divisor:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0073                     KeyHave@59:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0073                     ___lwdiv@divisor:	
   539                           ; 2 bytes @ 0x3
   540                           
   541  0073                     ___lwmod@divisor:	
   542                           ; 2 bytes @ 0x3
   543                           
   544  0073                     ___ftpack@arg:	
   545                           ; 2 bytes @ 0x3
   546                           
   547  0073                     ___lmul@product:	
   548                           ; 3 bytes @ 0x3
   549                           
   550                           
   551                           ; 4 bytes @ 0x3
   552  0073                     	ds	1
   553  0074                     ??_SystemEnterSleep:	
   554  0074                     ??_ADC_Sample:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0074                     ??_KeyStopClear:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     ??_GetTouchKeyValue:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     ??___lbdiv:	
   564                           ; 1 bytes @ 0x4
   565                           
   566  0074                     ??___lbmod:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0074                     KeyIsIn@45:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0074                     KeyStopClear@53:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0074                     ___lbdiv@dividend:	
   576                           ; 1 bytes @ 0x4
   577                           
   578                           
   579                           ; 1 bytes @ 0x4
   580  0074                     	ds	1
   581  0075                     ??_KeyClearIn:	
   582  0075                     ??_KeyHave:	
   583                           ; 1 bytes @ 0x5
   584                           
   585  0075                     ??_CheckKeyOldValue:	
   586                           ; 1 bytes @ 0x5
   587                           
   588  0075                     KeyClearIn@51:	
   589                           ; 1 bytes @ 0x5
   590                           
   591  0075                     KeyHave@58:	
   592                           ; 1 bytes @ 0x5
   593                           
   594  0075                     ___lbdiv@counter:	
   595                           ; 1 bytes @ 0x5
   596                           
   597  0075                     ___lbmod@dividend:	
   598                           ; 1 bytes @ 0x5
   599                           
   600  0075                     ___lwdiv@dividend:	
   601                           ; 1 bytes @ 0x5
   602                           
   603  0075                     ___lwmod@dividend:	
   604                           ; 2 bytes @ 0x5
   605                           
   606                           
   607                           ; 2 bytes @ 0x5
   608  0075                     	ds	1
   609  0076                     ??_WorkSleep:	
   610  0076                     ??_TurnKeyFlags:	
   611                           ; 1 bytes @ 0x6
   612                           
   613  0076                     ___ftpack@exp:	
   614                           ; 1 bytes @ 0x6
   615                           
   616  0076                     ___lbdiv@quotient:	
   617                           ; 1 bytes @ 0x6
   618                           
   619  0076                     ___lbmod@counter:	
   620                           ; 1 bytes @ 0x6
   621                           
   622                           
   623                           ; 1 bytes @ 0x6
   624  0076                     	ds	1
   625  0077                     ??_CheckTouchKey:	
   626  0077                     ??_setBatStep:	
   627                           ; 1 bytes @ 0x7
   628                           
   629  0077                     ??___lwdiv:	
   630                           ; 1 bytes @ 0x7
   631                           
   632  0077                     ??___lwmod:	
   633                           ; 1 bytes @ 0x7
   634                           
   635  0077                     ___ftpack@sign:	
   636                           ; 1 bytes @ 0x7
   637                           
   638  0077                     ___lbmod@rem:	
   639                           ; 1 bytes @ 0x7
   640                           
   641  0077                     ___lwmod@counter:	
   642                           ; 1 bytes @ 0x7
   643                           
   644                           
   645                           ; 1 bytes @ 0x7
   646  0077                     	ds	1
   647  0078                     ??_showBatLed:	
   648  0078                     ??_chrgCtr:	
   649                           ; 1 bytes @ 0x8
   650                           
   651  0078                     ??_keyLedCtr:	
   652                           ; 1 bytes @ 0x8
   653                           
   654  0078                     ??_fanCtr:	
   655                           ; 1 bytes @ 0x8
   656                           
   657  0078                     ??_workCtr:	
   658                           ; 1 bytes @ 0x8
   659                           
   660  0078                     ??_main:	
   661                           ; 1 bytes @ 0x8
   662                           
   663  0078                     ??___lwtoft:	
   664                           ; 1 bytes @ 0x8
   665                           
   666                           
   667                           	psect	cstackBANK0
   668  0049                     __pcstackBANK0:	
   669                           ; 1 bytes @ 0x8
   670                           
   671  0049                     ??___ftpack:	
   672  0049                     ??_CheckOnceResult:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0049                     ?___lmul:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0049                     ADC_Sample@j:	
   679                           ; 4 bytes @ 0x0
   680                           
   681  0049                     ___lwdiv@counter:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0049                     GetTouchKeyValue@64:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0049                     CheckKeyOldValue@79:	
   688                           ; 2 bytes @ 0x0
   689                           
   690  0049                     ___lmul@multiplier:	
   691                           ; 2 bytes @ 0x0
   692                           
   693                           
   694                           ; 4 bytes @ 0x0
   695  0049                     	ds	1
   696  004A                     ADC_Sample@adch:	
   697  004A                     ___lwdiv@quotient:	
   698                           ; 1 bytes @ 0x1
   699                           
   700                           
   701                           ; 2 bytes @ 0x1
   702  004A                     	ds	1
   703  004B                     ADC_Sample@i:	
   704  004B                     GetTouchKeyValue@63:	
   705                           ; 1 bytes @ 0x2
   706                           
   707  004B                     CheckKeyOldValue@80:	
   708                           ; 2 bytes @ 0x2
   709                           
   710                           
   711                           ; 2 bytes @ 0x2
   712  004B                     	ds	1
   713  004C                     ?___lwtoft:	
   714  004C                     setBatStep@tempSubBatTime:	
   715                           ; 3 bytes @ 0x3
   716                           
   717  004C                     ___lwtoft@c:	
   718                           ; 2 bytes @ 0x3
   719                           
   720  004C                     ADC_Sample@adsum:	
   721                           ; 2 bytes @ 0x3
   722                           
   723                           
   724                           ; 4 bytes @ 0x3
   725  004C                     	ds	1
   726  004D                     GetTouchKeyValue@62:	
   727  004D                     CheckKeyOldValue@78:	
   728                           ; 1 bytes @ 0x4
   729                           
   730  004D                     CheckOnceResult@73:	
   731                           ; 1 bytes @ 0x4
   732                           
   733  004D                     ___lmul@multiplicand:	
   734                           ; 2 bytes @ 0x4
   735                           
   736                           
   737                           ; 4 bytes @ 0x4
   738  004D                     	ds	1
   739  004E                     SystemEnterSleep@94:	
   740                           
   741                           ; 2 bytes @ 0x5
   742  004E                     	ds	1
   743  004F                     ?___ftdiv:	
   744  004F                     CheckOnceResult@70:	
   745                           ; 3 bytes @ 0x6
   746                           
   747  004F                     ___ftdiv@f2:	
   748                           ; 1 bytes @ 0x6
   749                           
   750                           
   751                           ; 3 bytes @ 0x6
   752  004F                     	ds	1
   753  0050                     ADC_Sample@admin:	
   754  0050                     CheckOnceResult@72:	
   755                           ; 2 bytes @ 0x7
   756                           
   757  0050                     SystemEnterSleep@93:	
   758                           ; 2 bytes @ 0x7
   759                           
   760                           
   761                           ; 2 bytes @ 0x7
   762  0050                     	ds	2
   763  0052                     CheckOnceResult@69:	
   764  0052                     ADC_Sample@admax:	
   765                           ; 1 bytes @ 0x9
   766                           
   767  0052                     SystemEnterSleep@92:	
   768                           ; 2 bytes @ 0x9
   769                           
   770  0052                     ___ftdiv@f1:	
   771                           ; 2 bytes @ 0x9
   772                           
   773                           
   774                           ; 3 bytes @ 0x9
   775  0052                     	ds	1
   776  0053                     CheckOnceResult@71:	
   777                           
   778                           ; 2 bytes @ 0xA
   779  0053                     	ds	1
   780  0054                     SystemEnterSleep@91:	
   781  0054                     ADC_Sample@ad_temp:	
   782                           ; 1 bytes @ 0xB
   783                           
   784                           
   785                           ; 2 bytes @ 0xB
   786  0054                     	ds	1
   787  0055                     ??___ftdiv:	
   788  0055                     CheckOnceResult@68:	
   789                           ; 1 bytes @ 0xC
   790                           
   791                           
   792                           ; 1 bytes @ 0xC
   793  0055                     	ds	1
   794  0056                     fanCtr@maxFanValue:	
   795                           
   796                           ; 1 bytes @ 0xD
   797  0056                     	ds	1
   798  0057                     fanCtr@fan_temp:	
   799                           
   800                           ; 4 bytes @ 0xE
   801  0057                     	ds	1
   802  0058                     ___ftdiv@cntr:	
   803                           
   804                           ; 1 bytes @ 0xF
   805  0058                     	ds	1
   806  0059                     ___ftdiv@f3:	
   807                           
   808                           ; 3 bytes @ 0x10
   809  0059                     	ds	3
   810  005C                     ___ftdiv@exp:	
   811                           
   812                           ; 1 bytes @ 0x13
   813  005C                     	ds	1
   814  005D                     ___ftdiv@sign:	
   815                           
   816                           ; 1 bytes @ 0x14
   817  005D                     	ds	1
   818  005E                     ?___fttol:	
   819  005E                     ___fttol@f1:	
   820                           ; 4 bytes @ 0x15
   821                           
   822                           
   823                           ; 3 bytes @ 0x15
   824  005E                     	ds	4
   825  0062                     ??___fttol:	
   826                           
   827                           ; 1 bytes @ 0x19
   828  0062                     	ds	3
   829  0065                     ___fttol@sign1:	
   830                           
   831                           ; 1 bytes @ 0x1C
   832  0065                     	ds	1
   833  0066                     ___fttol@lval:	
   834                           
   835                           ; 4 bytes @ 0x1D
   836  0066                     	ds	4
   837  006A                     ___fttol@exp1:	
   838                           
   839                           ; 1 bytes @ 0x21
   840  006A                     	ds	1
   841                           
   842                           	psect	maintext
   843  07B9                     __pmaintext:	
   844 ;;
   845 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   846 ;;
   847 ;; *************** function _main *****************
   848 ;; Defined at:
   849 ;;		line 920 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : B00/0
   860 ;;		On exit  : 300/100
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   863 ;;      Params:         0       0       0       0
   864 ;;      Locals:         0       0       0       0
   865 ;;      Temps:          0       0       0       0
   866 ;;      Totals:         0       0       0       0
   867 ;;Total ram usage:        0 bytes
   868 ;; Hardware stack levels required when called:    6
   869 ;; This function calls:
   870 ;;		_CheckTouchKey
   871 ;;		_Init_System
   872 ;;		_KeyServer
   873 ;;		_Refurbish_Sfr
   874 ;;		_WorkSleep
   875 ;;		_chrgCtr
   876 ;;		_setBatStep
   877 ;;		_workCtr
   878 ;; This function is called by:
   879 ;;		Startup code after reset
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           
   884                           ;psect for function _main
   885  07B9                     _main:	
   886                           
   887                           ;main.c: 922: Init_System();
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   891  07B9  118A  2024  118A   	fcall	_Init_System
   892                           
   893                           ;main.c: 923: firstLock = 1;
   894  07BC  1283               	bcf	3,5	;RP0=0, select bank0
   895  07BD  30FA               	movlw	250
   896  07BE  01EB               	clrf	_firstLock
   897  07BF  0AEB               	incf	_firstLock,f
   898                           
   899                           ;main.c: 924: firstTime = 250;
   900  07C0  00EC               	movwf	_firstTime
   901  07C1                     l5035:	
   902                           
   903                           ;main.c: 926: {
   904                           ;main.c: 928: if(B_MainLoop)
   905  07C1  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   906  07C2  2FC1               	goto	l5035
   907                           
   908                           ;main.c: 929: {
   909                           ;main.c: 930: B_MainLoop = 0;
   910  07C3  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   911  07C4  0064               	clrwdt	;# 
   912                           
   913                           ;main.c: 932: CheckTouchKey();
   914  07C5  118A  207C  118A   	fcall	_CheckTouchKey
   915                           
   916                           ;main.c: 933: chrgCtr();
   917  07C8  158A  25D9  118A   	fcall	_chrgCtr
   918                           
   919                           ;main.c: 934: Refurbish_Sfr();
   920  07CB  118A  2403  118A   	fcall	_Refurbish_Sfr
   921                           
   922                           ;main.c: 935: KeyServer();
   923  07CE  158A  2586  118A   	fcall	_KeyServer
   924                           
   925                           ;main.c: 936: workCtr();
   926  07D1  118A  2411  118A   	fcall	_workCtr
   927                           
   928                           ;main.c: 937: setBatStep();
   929  07D4  158A  2729  118A   	fcall	_setBatStep
   930                           
   931                           ;main.c: 938: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   932  07D7  086C               	movf	_firstTime,w
   933  07D8  1D03               	btfss	3,2
   934  07D9  2FF0               	goto	l5071
   935  07DA  083F               	movf	_chrgFlag,w
   936  07DB  1D03               	btfss	3,2
   937  07DC  2FF0               	goto	l5071
   938  07DD  0844               	movf	_workStep,w
   939  07DE  1D03               	btfss	3,2
   940  07DF  2FF0               	goto	l5071
   941  07E0  0843               	movf	_wuhuaFlag,w
   942  07E1  1D03               	btfss	3,2
   943  07E2  2FF0               	goto	l5071
   944  07E3  082C               	movf	_shanshuoTime,w
   945  07E4  042D               	iorwf	_shanshuoTime+1,w
   946  07E5  1D03               	btfss	3,2
   947  07E6  2FF0               	goto	l5071
   948  07E7  082A               	movf	_shanshuoTime2,w
   949  07E8  042B               	iorwf	_shanshuoTime2+1,w
   950  07E9  1D03               	btfss	3,2
   951  07EA  2FF0               	goto	l5071
   952                           
   953                           ;main.c: 939: {
   954                           ;main.c: 940: PORTA &= 0xE4;
   955                           
   956                           ;main.c: 941: PORTB &= 0xEF;
   957                           
   958                           ;main.c: 942: TRISA |= 0x1B;
   959                           
   960                           ;main.c: 943: TRISB |= 0x10;
   961  07EB  27F4               	fcall	PL14	;call to abstracted procedure
   962                           
   963                           ;main.c: 944: WorkSleep();
   964  07EC  118A  2041  118A   	fcall	_WorkSleep
   965                           
   966                           ;main.c: 945: }
   967  07EF  2FC1               	goto	l5035
   968  07F0                     l5071:	
   969                           
   970                           ;main.c: 946: else
   971                           ;main.c: 947: {
   972                           ;main.c: 948: time = 0;
   973  07F0  1683               	bsf	3,5	;RP0=1, select bank1
   974  07F1  01BA               	clrf	_time^(0+128)
   975  07F2  01BB               	clrf	(_time+1)^(0+128)
   976  07F3  2FC1               	goto	l5035
   977  07F4                     __end_of_main:	
   978  07F4                     PL14:	
   979  07F4  30E4               	movlw	228
   980  07F5  1683               	bsf	3,5	;RP0=1, select bank1
   981  07F6  0586               	andwf	6,f	;volatile
   982  07F7  1283               	bcf	3,5	;RP0=0, select bank0
   983  07F8  1206               	bcf	6,4	;volatile
   984  07F9  301B               	movlw	27
   985  07FA  1683               	bsf	3,5	;RP0=1, select bank1
   986  07FB  0485               	iorwf	5,f	;volatile
   987  07FC  1283               	bcf	3,5	;RP0=0, select bank0
   988  07FD  1605               	bsf	5,4	;volatile
   989  07FE  0008               	return
   990  07FF                     __end_ofPL14:	
   991                           
   992                           	psect	text1
   993  0411                     __ptext1:	
   994 ;; *************** function _workCtr *****************
   995 ;; Defined at:
   996 ;;		line 867 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 300/0
  1007 ;;		On exit  : 200/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1010 ;;      Params:         0       0       0       0
  1011 ;;      Locals:         0       0       4       0
  1012 ;;      Temps:          0       0       0       0
  1013 ;;      Totals:         0       0       4       0
  1014 ;;Total ram usage:        4 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    4
  1017 ;; This function calls:
  1018 ;;		_ADC_Sample
  1019 ;;		___ftdiv
  1020 ;;		___fttol
  1021 ;;		___lwtoft
  1022 ;;		_fanCtr
  1023 ;;		_keyLedCtr
  1024 ;;		_wuhuaCtr
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _workCtr
  1032  0411                     _workCtr:	
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1036  0411  301F               	movlw	31
  1037                           
  1038                           ;main.c: 869: test_adc = ADC_Sample(31, 0);
  1039  0412  01F3               	clrf	ADC_Sample@adldo
  1040  0413  24E1  118A         	fcall	_ADC_Sample
  1041  0415  00B6               	movwf	_test_adc	;volatile
  1042                           
  1043                           ;main.c: 870: if (0xA5 == test_adc)
  1044  0416  30A5               	movlw	165
  1045  0417  0636               	xorwf	_test_adc,w	;volatile
  1046  0418  1D03               	btfss	3,2
  1047  0419  2C4B               	goto	l4977
  1048                           
  1049                           ;main.c: 871: {
  1050                           ;main.c: 872: volatile unsigned long power_temp;
  1051                           ;main.c: 874: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1052  041A  3096               	movlw	150
  1053  041B  01D2               	clrf	___ftdiv@f1
  1054  041C  00D3               	movwf	___ftdiv@f1+1
  1055  041D  304A               	movlw	74
  1056  041E  00D4               	movwf	___ftdiv@f1+2
  1057  041F  0848               	movf	_adresult+1,w	;volatile
  1058  0420  00CD               	movwf	___lwtoft@c+1
  1059  0421  0847               	movf	_adresult,w	;volatile
  1060  0422  00CC               	movwf	___lwtoft@c
  1061  0423  266C  118A         	fcall	___lwtoft
  1062  0425  084C               	movf	?___lwtoft,w
  1063  0426  00CF               	movwf	___ftdiv@f2
  1064  0427  084D               	movf	?___lwtoft+1,w
  1065  0428  00D0               	movwf	___ftdiv@f2+1
  1066  0429  084E               	movf	?___lwtoft+2,w
  1067  042A  00D1               	movwf	___ftdiv@f2+2
  1068  042B  25B1  118A         	fcall	___ftdiv
  1069  042D  084F               	movf	?___ftdiv,w
  1070  042E  00DE               	movwf	___fttol@f1
  1071  042F  0850               	movf	?___ftdiv+1,w
  1072  0430  00DF               	movwf	___fttol@f1+1
  1073  0431  0851               	movf	?___ftdiv+2,w
  1074  0432  00E0               	movwf	___fttol@f1+2
  1075  0433  2613  118A         	fcall	___fttol
  1076  0435  0861               	movf	?___fttol+3,w
  1077  0436  1683               	bsf	3,5	;RP0=1, select bank1
  1078  0437  00C1               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1079  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0439  0860               	movf	?___fttol+2,w
  1081  043A  1683               	bsf	3,5	;RP0=1, select bank1
  1082  043B  00C0               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1083  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1084  043D  085F               	movf	?___fttol+1,w
  1085  043E  1683               	bsf	3,5	;RP0=1, select bank1
  1086  043F  00BF               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1087  0440  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0441  085E               	movf	?___fttol,w
  1089  0442  1683               	bsf	3,5	;RP0=1, select bank1
  1090  0443  00BE               	movwf	workCtr@power_temp^(0+128)	;volatile
  1091                           
  1092                           ;main.c: 875: power_ad = (unsigned int)(power_temp);
  1093  0444  083F               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1094  0445  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0446  00A7               	movwf	_power_ad+1	;volatile
  1096  0447  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0448  083E               	movf	workCtr@power_temp^(0+128),w	;volatile
  1098  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1099  044A  00A6               	movwf	_power_ad	;volatile
  1100  044B                     l4977:	
  1101                           
  1102                           ;main.c: 888: }
  1103                           ;main.c: 889: if(power_ad < 2900)
  1104  044B  300B               	movlw	11
  1105  044C  0227               	subwf	_power_ad+1,w	;volatile
  1106  044D  3054               	movlw	84
  1107  044E  1903               	skipnz
  1108  044F  0226               	subwf	_power_ad,w	;volatile
  1109  0450  1803               	skipnc
  1110  0451  2C66               	goto	l4985
  1111                           
  1112                           ;main.c: 890: {
  1113                           ;main.c: 891: if(++lowBatTime > 1000)
  1114  0452  1683               	bsf	3,5	;RP0=1, select bank1
  1115  0453  0AB6               	incf	_lowBatTime^(0+128),f
  1116  0454  1903               	skipnz
  1117  0455  0AB7               	incf	(_lowBatTime+1)^(0+128),f
  1118  0456  3003               	movlw	3
  1119  0457  0237               	subwf	(_lowBatTime+1)^(0+128),w
  1120  0458  30E9               	movlw	233
  1121  0459  1903               	skipnz
  1122  045A  0236               	subwf	_lowBatTime^(0+128),w
  1123  045B  1C03               	skipc
  1124  045C  2C69               	goto	l4987
  1125                           
  1126                           ;main.c: 892: {
  1127                           ;main.c: 893: lowBatTime = 0;
  1128  045D  01B6               	clrf	_lowBatTime^(0+128)
  1129  045E  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1130                           
  1131                           ;main.c: 894: lowBatLock = 1;
  1132  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0460  01BC               	clrf	_lowBatLock
  1134  0461  0ABC               	incf	_lowBatLock,f
  1135                           
  1136                           ;main.c: 895: workStep = 0;
  1137  0462  01C4               	clrf	_workStep
  1138                           
  1139                           ;main.c: 896: wuhuaFlag = 0;
  1140  0463  01C3               	clrf	_wuhuaFlag
  1141                           
  1142                           ;main.c: 897: showBatStep = 0;
  1143  0464  01B8               	clrf	_showBatStep
  1144  0465  2C69               	goto	l4987
  1145  0466                     l4985:	
  1146                           
  1147                           ;main.c: 900: else
  1148                           ;main.c: 901: {
  1149                           ;main.c: 902: lowBatTime = 0;
  1150  0466  1683               	bsf	3,5	;RP0=1, select bank1
  1151  0467  01B6               	clrf	_lowBatTime^(0+128)
  1152  0468  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1153  0469                     l4987:	
  1154                           
  1155                           ;main.c: 903: }
  1156                           ;main.c: 904: if(firstTime > 0)
  1157  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1158  046A  086C               	movf	_firstTime,w
  1159  046B  1903               	btfsc	3,2
  1160  046C  2C6F               	goto	l4991
  1161                           
  1162                           ;main.c: 905: {
  1163                           ;main.c: 906: firstTime--;
  1164  046D  03EC               	decf	_firstTime,f
  1165                           
  1166                           ;main.c: 907: }
  1167  046E  0008               	return
  1168  046F                     l4991:	
  1169                           
  1170                           ;main.c: 908: else
  1171                           ;main.c: 909: {
  1172                           ;main.c: 910: keyLedCtr();
  1173  046F  26ED  118A         	fcall	_keyLedCtr
  1174                           
  1175                           ;main.c: 911: fanCtr();
  1176  0471  2474  118A         	fcall	_fanCtr
  1177                           
  1178                           ;main.c: 912: wuhuaCtr();
  1179  0473  2F65               	ljmp	l4651
  1180  0474                     __end_of_workCtr:	
  1181  0474                     __ptext7:	
  1182 ;; *************** function _fanCtr *****************
  1183 ;; Defined at:
  1184 ;;		line 782 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1189 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0, pclath, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 300/0
  1196 ;;		On exit  : 200/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1199 ;;      Params:         0       0       0       0
  1200 ;;      Locals:         0       5       0       0
  1201 ;;      Temps:          0       0       0       0
  1202 ;;      Totals:         0       5       0       0
  1203 ;;Total ram usage:        5 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    3
  1206 ;; This function calls:
  1207 ;;		_ADC_Sample
  1208 ;;		___lmul
  1209 ;;		_fanInit
  1210 ;;		_fanStop
  1211 ;; This function is called by:
  1212 ;;		_workCtr
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           
  1217                           ;psect for function _fanCtr
  1218  0474                     _fanCtr:	
  1219                           
  1220                           ;main.c: 784: if(workStep > 0)
  1221                           
  1222                           ;incstack = 0
  1223                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1224  0474  0844               	movf	_workStep,w
  1225  0475  1903               	btfsc	3,2
  1226  0476  2CDC               	goto	l4645
  1227                           
  1228                           ;main.c: 785: {
  1229                           ;main.c: 786: PORTA |= 0x04;
  1230  0477  1683               	bsf	3,5	;RP0=1, select bank1
  1231  0478  1506               	bsf	6,2	;volatile
  1232                           
  1233                           ;main.c: 787: unsigned char maxFanValue = 52;
  1234  0479  3034               	movlw	52
  1235  047A  1283               	bcf	3,5	;RP0=0, select bank0
  1236  047B  00D6               	movwf	fanCtr@maxFanValue
  1237                           
  1238                           ;main.c: 788: if(workStep == 1 || power_ad < 3350)
  1239  047C  0344               	decf	_workStep,w
  1240  047D  1903               	btfsc	3,2
  1241  047E  2C86               	goto	l4611
  1242  047F  300D               	movlw	13
  1243  0480  0227               	subwf	_power_ad+1,w	;volatile
  1244  0481  3016               	movlw	22
  1245  0482  1903               	skipnz
  1246  0483  0226               	subwf	_power_ad,w	;volatile
  1247  0484  1803               	skipnc
  1248  0485  2C88               	goto	l4613
  1249  0486                     l4611:	
  1250                           
  1251                           ;main.c: 789: {
  1252                           ;main.c: 790: maxFanValue = 34;
  1253  0486  3022               	movlw	34
  1254  0487  00D6               	movwf	fanCtr@maxFanValue
  1255  0488                     l4613:	
  1256  0488  300D               	movlw	13
  1257                           
  1258                           ;main.c: 791: }
  1259                           ;main.c: 792: test_adc = ADC_Sample(13, 0);
  1260  0489  01F3               	clrf	ADC_Sample@adldo
  1261  048A  24E1  118A         	fcall	_ADC_Sample
  1262  048C  00B6               	movwf	_test_adc	;volatile
  1263                           
  1264                           ;main.c: 793: if (0xA5 == test_adc)
  1265  048D  30A5               	movlw	165
  1266  048E  0636               	xorwf	_test_adc,w	;volatile
  1267  048F  1D03               	btfss	3,2
  1268  0490  2CBB               	goto	l4625
  1269                           
  1270                           ;main.c: 794: {
  1271                           ;main.c: 795: volatile unsigned long fan_temp;
  1272                           ;main.c: 796: if(power_ad > 0)
  1273  0491  0826               	movf	_power_ad,w	;volatile
  1274  0492  0427               	iorwf	_power_ad+1,w	;volatile
  1275  0493  1903               	btfsc	3,2
  1276  0494  2CBB               	goto	l4625
  1277                           
  1278                           ;main.c: 797: {
  1279                           ;main.c: 798: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1280  0495  0847               	movf	_adresult,w	;volatile
  1281  0496  00C9               	movwf	___lmul@multiplier
  1282  0497  0848               	movf	_adresult+1,w	;volatile
  1283  0498  00CA               	movwf	___lmul@multiplier+1
  1284  0499  01CB               	clrf	___lmul@multiplier+2
  1285  049A  01CC               	clrf	___lmul@multiplier+3
  1286  049B  0826               	movf	_power_ad,w	;volatile
  1287  049C  00CD               	movwf	___lmul@multiplicand
  1288  049D  0827               	movf	_power_ad+1,w	;volatile
  1289  049E  00CE               	movwf	___lmul@multiplicand+1
  1290  049F  01CF               	clrf	___lmul@multiplicand+2
  1291  04A0  01D0               	clrf	___lmul@multiplicand+3
  1292  04A1  26BA  118A         	fcall	___lmul
  1293  04A3  084C               	movf	?___lmul+3,w
  1294  04A4  00DA               	movwf	fanCtr@fan_temp+3	;volatile
  1295  04A5  084B               	movf	?___lmul+2,w
  1296  04A6  00D9               	movwf	fanCtr@fan_temp+2	;volatile
  1297  04A7  084A               	movf	?___lmul+1,w
  1298  04A8  00D8               	movwf	fanCtr@fan_temp+1	;volatile
  1299  04A9  0849               	movf	?___lmul,w
  1300  04AA  00D7               	movwf	fanCtr@fan_temp	;volatile
  1301  04AB  300C               	movlw	12
  1302  04AC                     u4925:	
  1303  04AC  1003               	clrc
  1304  04AD  0CDA               	rrf	fanCtr@fan_temp+3,f	;volatile
  1305  04AE  0CD9               	rrf	fanCtr@fan_temp+2,f	;volatile
  1306  04AF  0CD8               	rrf	fanCtr@fan_temp+1,f	;volatile
  1307  04B0  0CD7               	rrf	fanCtr@fan_temp,f	;volatile
  1308  04B1  3EFF               	addlw	-1
  1309  04B2  1D03               	skipz
  1310  04B3  2CAC               	goto	u4925
  1311                           
  1312                           ;main.c: 799: fanValue = (unsigned int)(fan_temp);
  1313  04B4  0858               	movf	fanCtr@fan_temp+1,w	;volatile
  1314  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  1315  04B6  00B9               	movwf	(_fanValue+1)^(0+128)
  1316  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1317  04B8  0857               	movf	fanCtr@fan_temp,w	;volatile
  1318  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  1319  04BA  00B8               	movwf	_fanValue^(0+128)
  1320  04BB                     l4625:	
  1321                           
  1322                           ;main.c: 800: }
  1323                           ;main.c: 801: }
  1324                           ;main.c: 802: if(fanValue > 1300)
  1325  04BB  3005               	movlw	5
  1326  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  1327  04BD  0239               	subwf	(_fanValue+1)^(0+128),w
  1328  04BE  3015               	movlw	21
  1329  04BF  1903               	skipnz
  1330  04C0  0238               	subwf	_fanValue^(0+128),w
  1331  04C1  1C03               	skipc
  1332  04C2  2CCF               	goto	l4633
  1333                           
  1334                           ;main.c: 803: {
  1335                           ;main.c: 804: if(++fanOverTime > 25)
  1336  04C3  301A               	movlw	26
  1337  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1338  04C5  0AC0               	incf	_fanOverTime,f
  1339  04C6  0240               	subwf	_fanOverTime,w
  1340  04C7  1C03               	skipc
  1341  04C8  2CD1               	goto	l4635
  1342  04C9  30E1               	movlw	225
  1343                           
  1344                           ;main.c: 805: {
  1345                           ;main.c: 806: fanOverTime = 0;
  1346  04CA  01C0               	clrf	_fanOverTime
  1347                           
  1348                           ;main.c: 807: workStep = 0;
  1349  04CB  01C4               	clrf	_workStep
  1350                           
  1351                           ;main.c: 808: shanshuoTime = 225;
  1352  04CC  00AC               	movwf	_shanshuoTime
  1353  04CD  01AD               	clrf	_shanshuoTime+1
  1354  04CE  2CD1               	goto	l4635
  1355  04CF                     l4633:	
  1356                           
  1357                           ;main.c: 811: else
  1358                           ;main.c: 812: {
  1359                           ;main.c: 813: fanOverTime = 0;
  1360  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  1361  04D0  01C0               	clrf	_fanOverTime
  1362  04D1                     l4635:	
  1363                           
  1364                           ;main.c: 814: }
  1365                           ;main.c: 815: if(fanDuty < maxFanValue)
  1366  04D1  0856               	movf	fanCtr@maxFanValue,w
  1367  04D2  0242               	subwf	_fanDuty,w
  1368  04D3  1803               	skipnc
  1369  04D4  2CD7               	goto	l4639
  1370                           
  1371                           ;main.c: 816: {
  1372                           ;main.c: 817: fanDuty++;
  1373  04D5  0AC2               	incf	_fanDuty,f
  1374                           
  1375                           ;main.c: 818: }
  1376  04D6  2CDB               	goto	l4643
  1377  04D7                     l4639:	
  1378                           
  1379                           ;main.c: 819: else if(fanDuty > maxFanValue)
  1380  04D7  0842               	movf	_fanDuty,w
  1381  04D8  0256               	subwf	fanCtr@maxFanValue,w
  1382  04D9  1C03               	btfss	3,0
  1383                           
  1384                           ;main.c: 820: {
  1385                           ;main.c: 821: fanDuty--;
  1386  04DA  03C2               	decf	_fanDuty,f
  1387  04DB                     l4643:	
  1388                           
  1389                           ;main.c: 822: }
  1390                           ;main.c: 823: fanInit();
  1391  04DB  2F55               	ljmp	l4373
  1392  04DC                     l4645:	
  1393                           ;main.c: 824: }
  1394                           
  1395                           
  1396                           ;main.c: 825: else
  1397                           ;main.c: 826: {
  1398                           ;main.c: 827: fanStop();
  1399  04DC  2761               	fcall	_fanStop
  1400                           
  1401                           ;main.c: 828: fanDuty = 0;
  1402  04DD  01C2               	clrf	_fanDuty
  1403                           
  1404                           ;main.c: 829: PORTA &= 0xFB;
  1405  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  1406  04DF  1106               	bcf	6,2	;volatile
  1407  04E0  0008               	return
  1408  04E1                     __end_of_fanCtr:	
  1409  04E1                     __ptext11:	
  1410 ;; *************** function _ADC_Sample *****************
  1411 ;; Defined at:
  1412 ;;		line 307 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;  adch            1    wreg     unsigned char 
  1415 ;;  adldo           1    3[COMMON] unsigned char 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  adch            1    1[BANK0 ] unsigned char 
  1418 ;;  j               1    0[BANK0 ] unsigned char 
  1419 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1420 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1421 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1422 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1423 ;;  i               1    2[BANK0 ] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      unsigned char 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0
  1428 ;; Tracked objects:
  1429 ;;		On entry : 300/0
  1430 ;;		On exit  : 300/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1433 ;;      Params:         1       0       0       0
  1434 ;;      Locals:         0      13       0       0
  1435 ;;      Temps:          4       0       0       0
  1436 ;;      Totals:         5      13       0       0
  1437 ;;Total ram usage:       18 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    2
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_fanCtr
  1444 ;;		_workCtr
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           
  1449                           ;psect for function _ADC_Sample
  1450  04E1                     _ADC_Sample:	
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1454                           ;ADC_Sample@adch stored from wreg
  1455  04E1  00CA               	movwf	ADC_Sample@adch
  1456                           
  1457                           ;main.c: 309: volatile unsigned long adsum = 0;
  1458                           
  1459                           ;main.c: 310: volatile unsigned int admin = 0, admax = 0;
  1460  04E2  279B  118A         	fcall	PL18	;call to abstracted procedure
  1461                           
  1462                           ;main.c: 311: volatile unsigned int ad_temp = 0;
  1463  04E4  01D4               	clrf	ADC_Sample@ad_temp	;volatile
  1464  04E5  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1465                           
  1466                           ;main.c: 313: if ((!LDO_EN) && (adldo & 0x04) )
  1467  04E6  1683               	bsf	3,5	;RP0=1, select bank1
  1468  04E7  1D16               	btfss	22,2	;volatile
  1469  04E8  1D73               	btfss	ADC_Sample@adldo,2
  1470  04E9  2CF2               	goto	l4295
  1471                           
  1472                           ;main.c: 314: {
  1473                           ;main.c: 316: ADCON1 = adldo;
  1474  04EA  0873               	movf	ADC_Sample@adldo,w
  1475  04EB  0096               	movwf	22	;volatile
  1476                           
  1477                           ;main.c: 317: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1478  04EC  3042               	movlw	66
  1479  04ED  00F4               	movwf	??_ADC_Sample
  1480  04EE                     u5707:	
  1481  04EE  0BF4               	decfsz	??_ADC_Sample,f
  1482  04EF  2CEE               	goto	u5707
  1483  04F0  0000               	nop
  1484                           
  1485                           ;main.c: 318: }
  1486  04F1  2CF4               	goto	l4297
  1487  04F2                     l4295:	
  1488                           
  1489                           ;main.c: 319: else
  1490                           ;main.c: 320: ADCON1 = adldo;
  1491  04F2  0873               	movf	ADC_Sample@adldo,w
  1492  04F3  0096               	movwf	22	;volatile
  1493  04F4                     l4297:	
  1494                           
  1495                           ;main.c: 322: if(adch & 0x10)
  1496  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  1497  04F5  1303               	bcf	3,6	;RP1=0, select bank0
  1498  04F6  1E4A               	btfss	ADC_Sample@adch,4
  1499  04F7  2CFD               	goto	l4305
  1500                           
  1501                           ;main.c: 323: {
  1502                           ;main.c: 324: CHS4 = 1;
  1503  04F8  1683               	bsf	3,5	;RP0=1, select bank1
  1504  04F9  1716               	bsf	22,6	;volatile
  1505                           
  1506                           ;main.c: 325: adch &= 0x0f;
  1507  04FA  300F               	movlw	15
  1508  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  1509  04FC  05CA               	andwf	ADC_Sample@adch,f
  1510  04FD                     l4305:	
  1511                           
  1512                           ;main.c: 328: for (i = 0; i < 10; i++)
  1513  04FD  01CB               	clrf	ADC_Sample@i
  1514  04FE                     l4311:	
  1515                           
  1516                           ;main.c: 329: {
  1517                           ;main.c: 330: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1518  04FE  084A               	movf	ADC_Sample@adch,w
  1519  04FF  00F4               	movwf	??_ADC_Sample
  1520  0500  3001               	movlw	1
  1521  0501  1003               	clrc
  1522  0502                     L3:	
  1523  0502  0DF4               	rlf	??_ADC_Sample,f
  1524  0503  3EFF               	addlw	-1
  1525  0504  1003               	clrc
  1526  0505  1D03               	skipz
  1527  0506  2D02               	goto	L3
  1528  0507  0D74               	rlf	??_ADC_Sample,w
  1529  0508  3841               	iorlw	65
  1530  0509  1683               	bsf	3,5	;RP0=1, select bank1
  1531  050A  0095               	movwf	21	;volatile
  1532  050B  0000               	nop	;# 
  1533  050C  0000               	nop	;# 
  1534  050D  0000               	nop	;# 
  1535  050E  0000               	nop	;# 
  1536                           
  1537                           ;main.c: 335: GODONE = 1;
  1538  050F  1683               	bsf	3,5	;RP0=1, select bank1
  1539  0510  1303               	bcf	3,6	;RP1=0, select bank1
  1540  0511  1495               	bsf	21,1	;volatile
  1541                           
  1542                           ;main.c: 337: unsigned char j = 0;
  1543  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1544  0513  01C9               	clrf	ADC_Sample@j
  1545  0514                     l994:	
  1546                           ;main.c: 338: while (GODONE)
  1547                           
  1548  0514  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0515  1C95               	btfss	21,1	;volatile
  1550  0516  2D1E               	goto	l4321
  1551                           
  1552                           ;main.c: 339: {
  1553                           ;main.c: 340: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1554  0517  2D18               	nop2	;2 cycle nop
  1555  0518  2D19               	nop2	;2 cycle nop
  1556                           
  1557                           ;main.c: 342: if (0 == (--j))
  1558  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1559  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1560  051B  0BC9               	decfsz	ADC_Sample@j,f
  1561  051C  2D14               	goto	l994
  1562                           
  1563                           ;main.c: 343: return 0;
  1564  051D  3400               	retlw	0
  1565  051E                     l4321:	
  1566                           
  1567                           ;main.c: 344: }
  1568                           ;main.c: 346: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1569  051E  0819               	movf	25,w	;volatile
  1570  051F  1283               	bcf	3,5	;RP0=0, select bank0
  1571  0520  00D4               	movwf	ADC_Sample@ad_temp	;volatile
  1572  0521  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1573  0522  0ED4               	swapf	ADC_Sample@ad_temp,f	;volatile
  1574  0523  0ED5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1575  0524  30F0               	movlw	240
  1576  0525  05D5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1577  0526  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1578  0527  390F               	andlw	15
  1579  0528  04D5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1580  0529  30F0               	movlw	240
  1581  052A  05D4               	andwf	ADC_Sample@ad_temp,f	;volatile
  1582  052B  1683               	bsf	3,5	;RP0=1, select bank1
  1583  052C  0E18               	swapf	24,w	;volatile
  1584  052D  390F               	andlw	15
  1585  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1586  052F  07D4               	addwf	ADC_Sample@ad_temp,f	;volatile
  1587  0530  1803               	skipnc
  1588  0531  0AD5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1589                           
  1590                           ;main.c: 348: if (0 == admax)
  1591  0532  0852               	movf	ADC_Sample@admax,w	;volatile
  1592  0533  0453               	iorwf	ADC_Sample@admax+1,w	;volatile
  1593  0534  1D03               	btfss	3,2
  1594  0535  2D39               	goto	l4329
  1595                           
  1596                           ;main.c: 349: {
  1597                           ;main.c: 350: admax = ad_temp;
  1598  0536  27B4  118A         	fcall	PL40	;call to abstracted procedure
  1599  0538  2D4C               	goto	l4335
  1600  0539                     l4329:	
  1601                           ;main.c: 352: }
  1602                           
  1603                           ;main.c: 351: admin = ad_temp;
  1604                           
  1605                           
  1606                           ;main.c: 353: else if (ad_temp > admax)
  1607  0539  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1608  053A  0253               	subwf	ADC_Sample@admax+1,w	;volatile
  1609  053B  1D03               	skipz
  1610  053C  2D3F               	goto	u4445
  1611  053D  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1612  053E  0252               	subwf	ADC_Sample@admax,w	;volatile
  1613  053F                     u4445:	
  1614  053F  1803               	skipnc
  1615  0540  2D44               	goto	l4333
  1616                           
  1617                           ;main.c: 354: admax = ad_temp;
  1618  0541  27B4  118A         	fcall	PL40	;call to abstracted procedure
  1619  0543  2D50               	goto	l1000
  1620  0544                     l4333:	
  1621                           
  1622                           ;main.c: 355: else if (ad_temp < admin)
  1623  0544  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1624  0545  0255               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1625  0546  1D03               	skipz
  1626  0547  2D4A               	goto	u4455
  1627  0548  0850               	movf	ADC_Sample@admin,w	;volatile
  1628  0549  0254               	subwf	ADC_Sample@ad_temp,w	;volatile
  1629  054A                     u4455:	
  1630  054A  1803               	skipnc
  1631  054B  2D50               	goto	l1000
  1632  054C                     l4335:	
  1633                           
  1634                           ;main.c: 356: admin = ad_temp;
  1635  054C  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1636  054D  00D1               	movwf	ADC_Sample@admin+1	;volatile
  1637  054E  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1638  054F  00D0               	movwf	ADC_Sample@admin	;volatile
  1639  0550                     l1000:	
  1640                           
  1641                           ;main.c: 358: adsum += ad_temp;
  1642  0550  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1643  0551  00F4               	movwf	??_ADC_Sample
  1644  0552  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1645  0553  00F5               	movwf	??_ADC_Sample+1
  1646  0554  01F6               	clrf	??_ADC_Sample+2
  1647  0555  01F7               	clrf	??_ADC_Sample+3
  1648  0556  0874               	movf	??_ADC_Sample,w
  1649  0557  07CC               	addwf	ADC_Sample@adsum,f	;volatile
  1650  0558  0875               	movf	??_ADC_Sample+1,w
  1651  0559  1103               	clrz
  1652  055A  1803               	skipnc
  1653  055B  3E01               	addlw	1
  1654  055C  1D03               	btfss	3,2
  1655  055D  07CD               	addwf	ADC_Sample@adsum+1,f	;volatile
  1656  055E  0876               	movf	??_ADC_Sample+2,w
  1657  055F  1103               	clrz
  1658  0560  1803               	skipnc
  1659  0561  3E01               	addlw	1
  1660  0562  1D03               	btfss	3,2
  1661  0563  07CE               	addwf	ADC_Sample@adsum+2,f	;volatile
  1662  0564  0877               	movf	??_ADC_Sample+3,w
  1663  0565  1103               	clrz
  1664  0566  1803               	skipnc
  1665  0567  3E01               	addlw	1
  1666  0568  1D03               	btfss	3,2
  1667  0569  07CF               	addwf	ADC_Sample@adsum+3,f	;volatile
  1668  056A  300A               	movlw	10
  1669  056B  0ACB               	incf	ADC_Sample@i,f
  1670  056C  024B               	subwf	ADC_Sample@i,w
  1671  056D  1C03               	skipc
  1672  056E  2CFE               	goto	l4311
  1673                           
  1674                           ;main.c: 359: }
  1675                           ;main.c: 360: adsum -= admax;
  1676  056F  0852               	movf	ADC_Sample@admax,w	;volatile
  1677  0570  00F4               	movwf	??_ADC_Sample
  1678  0571  0853               	movf	ADC_Sample@admax+1,w	;volatile
  1679  0572  278C  118A         	fcall	PL6	;call to abstracted procedure
  1680  0574  1C03               	skipc
  1681  0575  0F77               	incfsz	??_ADC_Sample+3,w
  1682  0576  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1683                           
  1684                           ;main.c: 361: if (adsum >= admin)
  1685  0577  0850               	movf	ADC_Sample@admin,w	;volatile
  1686  0578  00F4               	movwf	??_ADC_Sample
  1687  0579  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1688  057A  00F5               	movwf	??_ADC_Sample+1
  1689  057B  01F6               	clrf	??_ADC_Sample+2
  1690  057C  01F7               	clrf	??_ADC_Sample+3
  1691  057D  0877               	movf	??_ADC_Sample+3,w
  1692  057E  024F               	subwf	ADC_Sample@adsum+3,w	;volatile
  1693  057F  1D03               	skipz
  1694  0580  2D8B               	goto	u4495
  1695  0581  0876               	movf	??_ADC_Sample+2,w
  1696  0582  024E               	subwf	ADC_Sample@adsum+2,w	;volatile
  1697  0583  1D03               	skipz
  1698  0584  2D8B               	goto	u4495
  1699  0585  0875               	movf	??_ADC_Sample+1,w
  1700  0586  024D               	subwf	ADC_Sample@adsum+1,w	;volatile
  1701  0587  1D03               	skipz
  1702  0588  2D8B               	goto	u4495
  1703  0589  0874               	movf	??_ADC_Sample,w
  1704  058A  024C               	subwf	ADC_Sample@adsum,w	;volatile
  1705  058B                     u4495:	
  1706  058B  1C03               	skipc
  1707  058C  2D96               	goto	l1004
  1708                           
  1709                           ;main.c: 362: adsum -= admin;
  1710  058D  0850               	movf	ADC_Sample@admin,w	;volatile
  1711  058E  00F4               	movwf	??_ADC_Sample
  1712  058F  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1713  0590  278C  118A         	fcall	PL6	;call to abstracted procedure
  1714  0592  1C03               	skipc
  1715  0593  0F77               	incfsz	??_ADC_Sample+3,w
  1716  0594  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1717  0595  2D9A               	goto	l4345
  1718  0596                     l1004:	
  1719                           
  1720                           ;main.c: 363: else
  1721                           ;main.c: 364: adsum = 0;
  1722  0596  01CC               	clrf	ADC_Sample@adsum	;volatile
  1723  0597  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  1724  0598  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  1725  0599  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  1726  059A                     l4345:	
  1727                           
  1728                           ;main.c: 366: adresult = adsum >> 3;
  1729  059A  084C               	movf	ADC_Sample@adsum,w	;volatile
  1730  059B  00F4               	movwf	??_ADC_Sample
  1731  059C  084D               	movf	ADC_Sample@adsum+1,w	;volatile
  1732  059D  00F5               	movwf	??_ADC_Sample+1
  1733  059E  084E               	movf	ADC_Sample@adsum+2,w	;volatile
  1734  059F  00F6               	movwf	??_ADC_Sample+2
  1735  05A0  084F               	movf	ADC_Sample@adsum+3,w	;volatile
  1736  05A1  00F7               	movwf	??_ADC_Sample+3
  1737  05A2  3003               	movlw	3
  1738  05A3                     u4515:	
  1739  05A3  1003               	clrc
  1740  05A4  0CF7               	rrf	??_ADC_Sample+3,f
  1741  05A5  0CF6               	rrf	??_ADC_Sample+2,f
  1742  05A6  0CF5               	rrf	??_ADC_Sample+1,f
  1743  05A7  0CF4               	rrf	??_ADC_Sample,f
  1744  05A8  3EFF               	addlw	-1
  1745  05A9  1D03               	skipz
  1746  05AA  2DA3               	goto	u4515
  1747  05AB  0875               	movf	??_ADC_Sample+1,w
  1748  05AC  00C8               	movwf	_adresult+1	;volatile
  1749  05AD  0874               	movf	??_ADC_Sample,w
  1750  05AE  00C7               	movwf	_adresult	;volatile
  1751                           
  1752                           ;main.c: 368: adsum = 0;
  1753                           
  1754                           ;main.c: 369: admin = 0;
  1755                           
  1756                           ;main.c: 370: admax = 0;
  1757  05AF  279B               	fcall	PL18	;call to abstracted procedure
  1758                           
  1759                           ;main.c: 371: return 0xA5;
  1760  05B0  34A5               	retlw	165
  1761  05B1                     __end_of_ADC_Sample:	
  1762  05B1                     __ptext14:	
  1763 ;; *************** function ___ftdiv *****************
  1764 ;; Defined at:
  1765 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  f2              3    6[BANK0 ] float 
  1768 ;;  f1              3    9[BANK0 ] float 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  f3              3   16[BANK0 ] float 
  1771 ;;  sign            1   20[BANK0 ] unsigned char 
  1772 ;;  exp             1   19[BANK0 ] unsigned char 
  1773 ;;  cntr            1   15[BANK0 ] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  3    6[BANK0 ] float 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 300/0
  1780 ;;		On exit  : 300/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1783 ;;      Params:         0       6       0       0
  1784 ;;      Locals:         0       6       0       0
  1785 ;;      Temps:          0       3       0       0
  1786 ;;      Totals:         0      15       0       0
  1787 ;;Total ram usage:       15 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    3
  1790 ;; This function calls:
  1791 ;;		___ftpack
  1792 ;; This function is called by:
  1793 ;;		_workCtr
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797                           
  1798                           ;psect for function ___ftdiv
  1799  05B1                     ___ftdiv:	
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1803  05B1  0852               	movf	___ftdiv@f1,w
  1804  05B2  00D5               	movwf	??___ftdiv
  1805  05B3  0853               	movf	___ftdiv@f1+1,w
  1806  05B4  00D6               	movwf	??___ftdiv+1
  1807  05B5  0854               	movf	___ftdiv@f1+2,w
  1808  05B6  00D7               	movwf	??___ftdiv+2
  1809  05B7  1003               	clrc
  1810  05B8  0D56               	rlf	??___ftdiv+1,w
  1811  05B9  0D57               	rlf	??___ftdiv+2,w
  1812  05BA  00DC               	movwf	___ftdiv@exp
  1813  05BB  085C               	movf	___ftdiv@exp,w
  1814  05BC  1D03               	btfss	3,2
  1815  05BD  2DBF               	goto	l4741
  1816  05BE  2FAB               	ljmp	PL32	;call to abstracted procedure
  1817  05BF                     l4741:	
  1818  05BF  084F               	movf	___ftdiv@f2,w
  1819  05C0  00D5               	movwf	??___ftdiv
  1820  05C1  0850               	movf	___ftdiv@f2+1,w
  1821  05C2  00D6               	movwf	??___ftdiv+1
  1822  05C3  0851               	movf	___ftdiv@f2+2,w
  1823  05C4  00D7               	movwf	??___ftdiv+2
  1824  05C5  1003               	clrc
  1825  05C6  0D56               	rlf	??___ftdiv+1,w
  1826  05C7  0D57               	rlf	??___ftdiv+2,w
  1827  05C8  00DD               	movwf	___ftdiv@sign
  1828  05C9  085D               	movf	___ftdiv@sign,w
  1829  05CA  1D03               	btfss	3,2
  1830  05CB  2DCD               	goto	l1617
  1831  05CC  2FAB               	ljmp	PL32	;call to abstracted procedure
  1832  05CD                     l1617:	
  1833  05CD  3089               	movlw	137
  1834  05CE  01D9               	clrf	___ftdiv@f3
  1835  05CF  01DA               	clrf	___ftdiv@f3+1
  1836  05D0  01DB               	clrf	___ftdiv@f3+2
  1837  05D1  075D               	addwf	___ftdiv@sign,w
  1838  05D2  00D5               	movwf	??___ftdiv
  1839  05D3  02DC               	subwf	___ftdiv@exp,f
  1840  05D4  0854               	movf	___ftdiv@f1+2,w
  1841  05D5  00DD               	movwf	___ftdiv@sign
  1842  05D6  0851               	movf	___ftdiv@f2+2,w
  1843  05D7  06DD               	xorwf	___ftdiv@sign,f
  1844  05D8  3080               	movlw	128
  1845  05D9  05DD               	andwf	___ftdiv@sign,f
  1846  05DA  3018               	movlw	24
  1847  05DB  17D3               	bsf	___ftdiv@f1+1,7
  1848  05DC  01D4               	clrf	___ftdiv@f1+2
  1849  05DD  17D0               	bsf	___ftdiv@f2+1,7
  1850  05DE  01D1               	clrf	___ftdiv@f2+2
  1851  05DF  00D8               	movwf	___ftdiv@cntr
  1852  05E0                     l4763:	
  1853  05E0  1003               	clrc
  1854  05E1  0DD9               	rlf	___ftdiv@f3,f
  1855  05E2  0DDA               	rlf	___ftdiv@f3+1,f
  1856  05E3  0DDB               	rlf	___ftdiv@f3+2,f
  1857  05E4  0851               	movf	___ftdiv@f2+2,w
  1858  05E5  0254               	subwf	___ftdiv@f1+2,w
  1859  05E6  1D03               	skipz
  1860  05E7  2DEE               	goto	u5175
  1861  05E8  0850               	movf	___ftdiv@f2+1,w
  1862  05E9  0253               	subwf	___ftdiv@f1+1,w
  1863  05EA  1D03               	skipz
  1864  05EB  2DEE               	goto	u5175
  1865  05EC  084F               	movf	___ftdiv@f2,w
  1866  05ED  0252               	subwf	___ftdiv@f1,w
  1867  05EE                     u5175:	
  1868  05EE  1C03               	skipc
  1869  05EF  2DFC               	goto	L4
  1870  05F0  084F               	movf	___ftdiv@f2,w
  1871  05F1  02D2               	subwf	___ftdiv@f1,f
  1872  05F2  0850               	movf	___ftdiv@f2+1,w
  1873  05F3  1C03               	skipc
  1874  05F4  0F50               	incfsz	___ftdiv@f2+1,w
  1875  05F5  02D3               	subwf	___ftdiv@f1+1,f
  1876  05F6  0851               	movf	___ftdiv@f2+2,w
  1877  05F7  1C03               	skipc
  1878  05F8  0A51               	incf	___ftdiv@f2+2,w
  1879  05F9  02D4               	subwf	___ftdiv@f1+2,f
  1880  05FA  1459               	bsf	___ftdiv@f3,0
  1881  05FB  1003               	clrc
  1882  05FC                     L4:	
  1883  05FC  0DD2               	rlf	___ftdiv@f1,f
  1884  05FD  0DD3               	rlf	___ftdiv@f1+1,f
  1885  05FE  0DD4               	rlf	___ftdiv@f1+2,f
  1886  05FF  0BD8               	decfsz	___ftdiv@cntr,f
  1887  0600  2DE0               	goto	l4763
  1888  0601  0859               	movf	___ftdiv@f3,w
  1889  0602  00F3               	movwf	___ftpack@arg
  1890  0603  085A               	movf	___ftdiv@f3+1,w
  1891  0604  00F4               	movwf	___ftpack@arg+1
  1892  0605  085B               	movf	___ftdiv@f3+2,w
  1893  0606  00F5               	movwf	___ftpack@arg+2
  1894  0607  085C               	movf	___ftdiv@exp,w
  1895  0608  00F6               	movwf	___ftpack@exp
  1896  0609  085D               	movf	___ftdiv@sign,w
  1897  060A  00F7               	movwf	___ftpack@sign
  1898  060B  267C               	fcall	___ftpack
  1899  060C  0873               	movf	?___ftpack,w
  1900  060D  00CF               	movwf	?___ftdiv
  1901  060E  0874               	movf	?___ftpack+1,w
  1902  060F  00D0               	movwf	?___ftdiv+1
  1903  0610  0875               	movf	?___ftpack+2,w
  1904  0611  00D1               	movwf	?___ftdiv+2
  1905  0612  0008               	return
  1906  0613                     __end_of___ftdiv:	
  1907  0613                     __ptext13:	
  1908 ;; *************** function ___fttol *****************
  1909 ;; Defined at:
  1910 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  f1              3   21[BANK0 ] float 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  lval            4   29[BANK0 ] unsigned long 
  1915 ;;  exp1            1   33[BANK0 ] unsigned char 
  1916 ;;  sign1           1   28[BANK0 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  4   21[BANK0 ] long 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0
  1921 ;; Tracked objects:
  1922 ;;		On entry : 300/0
  1923 ;;		On exit  : 300/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1926 ;;      Params:         0       4       0       0
  1927 ;;      Locals:         0       6       0       0
  1928 ;;      Temps:          0       3       0       0
  1929 ;;      Totals:         0      13       0       0
  1930 ;;Total ram usage:       13 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    2
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_workCtr
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           
  1941                           ;psect for function ___fttol
  1942  0613                     ___fttol:	
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1946  0613  27A4  118A         	fcall	PL26	;call to abstracted procedure
  1947  0615  1003               	clrc
  1948  0616  0D63               	rlf	??___fttol+1,w
  1949  0617  0D64               	rlf	??___fttol+2,w
  1950  0618  00EA               	movwf	___fttol@exp1
  1951  0619  086A               	movf	___fttol@exp1,w
  1952  061A  1D03               	btfss	3,2
  1953  061B  2E21               	goto	l4781
  1954  061C                     l4779:	
  1955  061C  01DE               	clrf	?___fttol
  1956  061D  01DF               	clrf	?___fttol+1
  1957  061E  01E0               	clrf	?___fttol+2
  1958  061F  01E1               	clrf	?___fttol+3
  1959  0620  0008               	return
  1960  0621                     l4781:	
  1961  0621  27A4  118A         	fcall	PL26	;call to abstracted procedure
  1962  0623  3017               	movlw	23
  1963  0624                     u5205:	
  1964  0624  1003               	clrc
  1965  0625  0CE4               	rrf	??___fttol+2,f
  1966  0626  0CE3               	rrf	??___fttol+1,f
  1967  0627  0CE2               	rrf	??___fttol,f
  1968  0628  3EFF               	addlw	-1
  1969  0629  1D03               	skipz
  1970  062A  2E24               	goto	u5205
  1971  062B  0862               	movf	??___fttol,w
  1972  062C  00E5               	movwf	___fttol@sign1
  1973  062D  17DF               	bsf	___fttol@f1+1,7
  1974  062E  01E0               	clrf	___fttol@f1+2
  1975  062F  085E               	movf	___fttol@f1,w
  1976  0630  00E6               	movwf	___fttol@lval
  1977  0631  085F               	movf	___fttol@f1+1,w
  1978  0632  00E7               	movwf	___fttol@lval+1
  1979  0633  0860               	movf	___fttol@f1+2,w
  1980  0634  00E8               	movwf	___fttol@lval+2
  1981  0635  308E               	movlw	142
  1982  0636  01E9               	clrf	___fttol@lval+3
  1983  0637  02EA               	subwf	___fttol@exp1,f
  1984  0638  1FEA               	btfss	___fttol@exp1,7
  1985  0639  2E47               	goto	l4801
  1986  063A  086A               	movf	___fttol@exp1,w
  1987  063B  3A80               	xorlw	128
  1988  063C  3E8F               	addlw	143
  1989  063D  1C03               	btfss	3,0
  1990  063E  2E1C               	goto	l4779
  1991  063F                     l4797:	
  1992  063F  1003               	clrc
  1993  0640  0CE9               	rrf	___fttol@lval+3,f
  1994  0641  0CE8               	rrf	___fttol@lval+2,f
  1995  0642  0CE7               	rrf	___fttol@lval+1,f
  1996  0643  0CE6               	rrf	___fttol@lval,f
  1997  0644  0FEA               	incfsz	___fttol@exp1,f
  1998  0645  2E3F               	goto	l4797
  1999  0646  2E55               	goto	l4809
  2000  0647                     l4801:	
  2001  0647  3018               	movlw	24
  2002  0648  026A               	subwf	___fttol@exp1,w
  2003  0649  1803               	btfsc	3,0
  2004  064A  2E1C               	goto	l4779
  2005  064B                     l4807:	
  2006  064B  086A               	movf	___fttol@exp1,w
  2007  064C  1903               	btfsc	3,2
  2008  064D  2E55               	goto	l4809
  2009  064E  1003               	clrc
  2010  064F  0DE6               	rlf	___fttol@lval,f
  2011  0650  0DE7               	rlf	___fttol@lval+1,f
  2012  0651  0DE8               	rlf	___fttol@lval+2,f
  2013  0652  0DE9               	rlf	___fttol@lval+3,f
  2014  0653  03EA               	decf	___fttol@exp1,f
  2015  0654  2E4B               	goto	l4807
  2016  0655                     l4809:	
  2017  0655  0865               	movf	___fttol@sign1,w
  2018  0656  1903               	btfsc	3,2
  2019  0657  2E63               	goto	l4813
  2020  0658  09E6               	comf	___fttol@lval,f
  2021  0659  09E7               	comf	___fttol@lval+1,f
  2022  065A  09E8               	comf	___fttol@lval+2,f
  2023  065B  09E9               	comf	___fttol@lval+3,f
  2024  065C  0AE6               	incf	___fttol@lval,f
  2025  065D  1903               	skipnz
  2026  065E  0AE7               	incf	___fttol@lval+1,f
  2027  065F  1903               	skipnz
  2028  0660  0AE8               	incf	___fttol@lval+2,f
  2029  0661  1903               	skipnz
  2030  0662  0AE9               	incf	___fttol@lval+3,f
  2031  0663                     l4813:	
  2032  0663  0869               	movf	___fttol@lval+3,w
  2033  0664  00E1               	movwf	?___fttol+3
  2034  0665  0868               	movf	___fttol@lval+2,w
  2035  0666  00E0               	movwf	?___fttol+2
  2036  0667  0867               	movf	___fttol@lval+1,w
  2037  0668  00DF               	movwf	?___fttol+1
  2038  0669  0866               	movf	___fttol@lval,w
  2039  066A  00DE               	movwf	?___fttol
  2040  066B  0008               	return
  2041  066C                     __end_of___fttol:	
  2042  066C                     __ptext12:	
  2043 ;; *************** function ___lwtoft *****************
  2044 ;; Defined at:
  2045 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  c               2    3[BANK0 ] unsigned int 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  3    3[BANK0 ] float 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 300/0
  2056 ;;		On exit  : 300/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2059 ;;      Params:         0       3       0       0
  2060 ;;      Locals:         0       0       0       0
  2061 ;;      Temps:          0       0       0       0
  2062 ;;      Totals:         0       3       0       0
  2063 ;;Total ram usage:        3 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    3
  2066 ;; This function calls:
  2067 ;;		___ftpack
  2068 ;; This function is called by:
  2069 ;;		_workCtr
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           
  2074                           ;psect for function ___lwtoft
  2075  066C                     ___lwtoft:	
  2076                           
  2077                           ;incstack = 0
  2078                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2079  066C  084C               	movf	___lwtoft@c,w
  2080  066D  00F3               	movwf	___ftpack@arg
  2081  066E  084D               	movf	___lwtoft@c+1,w
  2082  066F  00F4               	movwf	___ftpack@arg+1
  2083  0670  308E               	movlw	142
  2084  0671  01F5               	clrf	___ftpack@arg+2
  2085  0672  00F6               	movwf	___ftpack@exp
  2086  0673  01F7               	clrf	___ftpack@sign
  2087  0674  267C               	fcall	___ftpack
  2088  0675  0873               	movf	?___ftpack,w
  2089  0676  00CC               	movwf	?___lwtoft
  2090  0677  0874               	movf	?___ftpack+1,w
  2091  0678  00CD               	movwf	?___lwtoft+1
  2092  0679  0875               	movf	?___ftpack+2,w
  2093  067A  00CE               	movwf	?___lwtoft+2
  2094  067B  0008               	return
  2095  067C                     __end_of___lwtoft:	
  2096  067C                     __ptext15:	
  2097 ;; *************** function ___ftpack *****************
  2098 ;; Defined at:
  2099 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  arg             3    3[COMMON] unsigned um
  2102 ;;  exp             1    6[COMMON] unsigned char 
  2103 ;;  sign            1    7[COMMON] unsigned char 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  3    3[COMMON] float 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 300/0
  2112 ;;		On exit  : 300/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2115 ;;      Params:         5       0       0       0
  2116 ;;      Locals:         0       0       0       0
  2117 ;;      Temps:          0       3       0       0
  2118 ;;      Totals:         5       3       0       0
  2119 ;;Total ram usage:        8 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    2
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		___ftdiv
  2126 ;;		___lwtoft
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           
  2131                           ;psect for function ___ftpack
  2132  067C                     ___ftpack:	
  2133                           
  2134                           ;incstack = 0
  2135                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2136  067C  0876               	movf	___ftpack@exp,w
  2137  067D  1903               	btfsc	3,2
  2138  067E  2E84               	goto	l1563
  2139  067F  0875               	movf	___ftpack@arg+2,w
  2140  0680  0474               	iorwf	___ftpack@arg+1,w
  2141  0681  0473               	iorwf	___ftpack@arg,w
  2142  0682  1D03               	skipz
  2143  0683  2E8B               	goto	l4449
  2144  0684                     l1563:	
  2145  0684  01F3               	clrf	?___ftpack
  2146  0685  01F4               	clrf	?___ftpack+1
  2147  0686  01F5               	clrf	?___ftpack+2
  2148  0687  0008               	return
  2149  0688                     l4447:	
  2150  0688  0AF6               	incf	___ftpack@exp,f
  2151  0689  27AF  118A         	fcall	PL38	;call to abstracted procedure
  2152  068B                     l4449:	
  2153  068B  30FE               	movlw	254
  2154  068C  0575               	andwf	___ftpack@arg+2,w
  2155  068D  1903               	btfsc	3,2
  2156  068E  2E98               	goto	l4453
  2157  068F  2E88               	goto	l4447
  2158  0690                     l4451:	
  2159  0690  0AF6               	incf	___ftpack@exp,f
  2160  0691  0AF3               	incf	___ftpack@arg,f
  2161  0692  1903               	skipnz
  2162  0693  0AF4               	incf	___ftpack@arg+1,f
  2163  0694  1903               	skipnz
  2164  0695  0AF5               	incf	___ftpack@arg+2,f
  2165  0696  27AF  118A         	fcall	PL38	;call to abstracted procedure
  2166  0698                     l4453:	
  2167  0698  30FF               	movlw	255
  2168  0699  0575               	andwf	___ftpack@arg+2,w
  2169  069A  1903               	btfsc	3,2
  2170  069B  2EA6               	goto	l4457
  2171  069C  2E90               	goto	l4451
  2172  069D                     l4459:	
  2173  069D  3002               	movlw	2
  2174  069E  0276               	subwf	___ftpack@exp,w
  2175  069F  1C03               	btfss	3,0
  2176  06A0  2EA8               	goto	l1575
  2177  06A1  03F6               	decf	___ftpack@exp,f
  2178  06A2  1003               	clrc
  2179  06A3  0DF3               	rlf	___ftpack@arg,f
  2180  06A4  0DF4               	rlf	___ftpack@arg+1,f
  2181  06A5  0DF5               	rlf	___ftpack@arg+2,f
  2182  06A6                     l4457:	
  2183  06A6  1FF4               	btfss	___ftpack@arg+1,7
  2184  06A7  2E9D               	goto	l4459
  2185  06A8                     l1575:	
  2186  06A8  1C76               	btfss	___ftpack@exp,0
  2187  06A9  13F4               	bcf	___ftpack@arg+1,7
  2188  06AA  1003               	clrc
  2189  06AB  0CF6               	rrf	___ftpack@exp,f
  2190  06AC  0876               	movf	___ftpack@exp,w
  2191  06AD  00CB               	movwf	??___ftpack+2
  2192  06AE  01CA               	clrf	??___ftpack+1
  2193  06AF  01C9               	clrf	??___ftpack
  2194  06B0  0849               	movf	??___ftpack,w
  2195  06B1  04F3               	iorwf	___ftpack@arg,f
  2196  06B2  084A               	movf	??___ftpack+1,w
  2197  06B3  04F4               	iorwf	___ftpack@arg+1,f
  2198  06B4  084B               	movf	??___ftpack+2,w
  2199  06B5  04F5               	iorwf	___ftpack@arg+2,f
  2200  06B6  0877               	movf	___ftpack@sign,w
  2201  06B7  1D03               	btfss	3,2
  2202  06B8  17F5               	bsf	___ftpack@arg+2,7
  2203  06B9  0008               	return
  2204  06BA                     __end_of___ftpack:	
  2205  06BA                     __ptext10:	
  2206 ;; *************** function ___lmul *****************
  2207 ;; Defined at:
  2208 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2211 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  product         4    3[COMMON] unsigned long 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  4    0[BANK0 ] unsigned long 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 300/0
  2220 ;;		On exit  : 300/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2223 ;;      Params:         0       8       0       0
  2224 ;;      Locals:         4       0       0       0
  2225 ;;      Temps:          0       0       0       0
  2226 ;;      Totals:         4       8       0       0
  2227 ;;Total ram usage:       12 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    2
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_fanCtr
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function ___lmul
  2239  06BA                     ___lmul:	
  2240                           
  2241                           ;incstack = 0
  2242                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2243  06BA  01F3               	clrf	___lmul@product
  2244  06BB  01F4               	clrf	___lmul@product+1
  2245  06BC  01F5               	clrf	___lmul@product+2
  2246  06BD  01F6               	clrf	___lmul@product+3
  2247  06BE                     l1418:	
  2248  06BE  1C49               	btfss	___lmul@multiplier,0
  2249  06BF  2ED4               	goto	l4435
  2250  06C0  084D               	movf	___lmul@multiplicand,w
  2251  06C1  07F3               	addwf	___lmul@product,f
  2252  06C2  084E               	movf	___lmul@multiplicand+1,w
  2253  06C3  1103               	clrz
  2254  06C4  1803               	skipnc
  2255  06C5  3E01               	addlw	1
  2256  06C6  1D03               	btfss	3,2
  2257  06C7  07F4               	addwf	___lmul@product+1,f
  2258  06C8  084F               	movf	___lmul@multiplicand+2,w
  2259  06C9  1103               	clrz
  2260  06CA  1803               	skipnc
  2261  06CB  3E01               	addlw	1
  2262  06CC  1D03               	btfss	3,2
  2263  06CD  07F5               	addwf	___lmul@product+2,f
  2264  06CE  0850               	movf	___lmul@multiplicand+3,w
  2265  06CF  1103               	clrz
  2266  06D0  1803               	skipnc
  2267  06D1  3E01               	addlw	1
  2268  06D2  1D03               	btfss	3,2
  2269  06D3  07F6               	addwf	___lmul@product+3,f
  2270  06D4                     l4435:	
  2271  06D4  1003               	clrc
  2272  06D5  0DCD               	rlf	___lmul@multiplicand,f
  2273  06D6  0DCE               	rlf	___lmul@multiplicand+1,f
  2274  06D7  0DCF               	rlf	___lmul@multiplicand+2,f
  2275  06D8  0DD0               	rlf	___lmul@multiplicand+3,f
  2276  06D9  1003               	clrc
  2277  06DA  0CCC               	rrf	___lmul@multiplier+3,f
  2278  06DB  0CCB               	rrf	___lmul@multiplier+2,f
  2279  06DC  0CCA               	rrf	___lmul@multiplier+1,f
  2280  06DD  0CC9               	rrf	___lmul@multiplier,f
  2281  06DE  084C               	movf	___lmul@multiplier+3,w
  2282  06DF  044B               	iorwf	___lmul@multiplier+2,w
  2283  06E0  044A               	iorwf	___lmul@multiplier+1,w
  2284  06E1  0449               	iorwf	___lmul@multiplier,w
  2285  06E2  1D03               	skipz
  2286  06E3  2EBE               	goto	l1418
  2287  06E4  0876               	movf	___lmul@product+3,w
  2288  06E5  00CC               	movwf	?___lmul+3
  2289  06E6  0875               	movf	___lmul@product+2,w
  2290  06E7  00CB               	movwf	?___lmul+2
  2291  06E8  0874               	movf	___lmul@product+1,w
  2292  06E9  00CA               	movwf	?___lmul+1
  2293  06EA  0873               	movf	___lmul@product,w
  2294  06EB  00C9               	movwf	?___lmul
  2295  06EC  0008               	return
  2296  06ED                     __end_of___lmul:	
  2297  06ED                     __ptext5:	
  2298 ;; *************** function _keyLedCtr *****************
  2299 ;; Defined at:
  2300 ;;		line 698 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0, pclath, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 300/0
  2311 ;;		On exit  : 300/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2314 ;;      Params:         0       0       0       0
  2315 ;;      Locals:         0       0       0       0
  2316 ;;      Temps:          0       0       0       0
  2317 ;;      Totals:         0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    3
  2321 ;; This function calls:
  2322 ;;		___lwmod
  2323 ;; This function is called by:
  2324 ;;		_workCtr
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _keyLedCtr
  2330  06ED                     _keyLedCtr:	
  2331                           
  2332                           ;main.c: 700: if(shanshuoTime > 0)
  2333                           
  2334                           ;incstack = 0
  2335                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2336  06ED  082C               	movf	_shanshuoTime,w
  2337  06EE  042D               	iorwf	_shanshuoTime+1,w
  2338  06EF  1903               	btfsc	3,2
  2339  06F0  2F09               	goto	l4581
  2340                           
  2341                           ;main.c: 701: {
  2342                           ;main.c: 702: shanshuoTime--;
  2343  06F1  3001               	movlw	1
  2344  06F2  02AC               	subwf	_shanshuoTime,f
  2345  06F3  3000               	movlw	0
  2346  06F4  1C03               	skipc
  2347  06F5  03AD               	decf	_shanshuoTime+1,f
  2348  06F6  02AD               	subwf	_shanshuoTime+1,f
  2349                           
  2350                           ;main.c: 703: if((shanshuoTime % 75) < 37)
  2351  06F7  304B               	movlw	75
  2352  06F8  00F3               	movwf	___lwmod@divisor
  2353  06F9  01F4               	clrf	___lwmod@divisor+1
  2354  06FA  082D               	movf	_shanshuoTime+1,w
  2355  06FB  00F6               	movwf	___lwmod@dividend+1
  2356  06FC  082C               	movf	_shanshuoTime,w
  2357  06FD  00F5               	movwf	___lwmod@dividend
  2358  06FE  2731  118A         	fcall	___lwmod
  2359  0700  3000               	movlw	0
  2360  0701  0274               	subwf	?___lwmod+1,w
  2361  0702  3025               	movlw	37
  2362  0703  1903               	skipnz
  2363  0704  0273               	subwf	?___lwmod,w
  2364  0705  1803               	skipnc
  2365  0706  2F0C               	goto	l1107
  2366  0707                     l4579:	
  2367                           
  2368                           ;main.c: 704: {
  2369                           ;main.c: 705: fanKeyFlag = 0;
  2370  0707  01BA               	clrf	_fanKeyFlag
  2371                           
  2372                           ;main.c: 706: }
  2373  0708  2F0E               	goto	l4587
  2374  0709                     l4581:	
  2375                           
  2376                           ;main.c: 712: else if(workStep > 0)
  2377  0709  0844               	movf	_workStep,w
  2378  070A  1903               	btfsc	3,2
  2379  070B  2F07               	goto	l4579
  2380  070C                     l1107:	
  2381                           
  2382                           ;main.c: 707: else
  2383                           ;main.c: 708: {
  2384                           ;main.c: 709: fanKeyFlag = 1;
  2385  070C  01BA               	clrf	_fanKeyFlag
  2386  070D  0ABA               	incf	_fanKeyFlag,f
  2387  070E                     l4587:	
  2388                           
  2389                           ;main.c: 719: }
  2390                           ;main.c: 721: if(shanshuoTime2 > 0)
  2391  070E  082A               	movf	_shanshuoTime2,w
  2392  070F  042B               	iorwf	_shanshuoTime2+1,w
  2393  0710  1903               	btfsc	3,2
  2394  0711  2F2D               	goto	l4595
  2395                           
  2396                           ;main.c: 722: {
  2397                           ;main.c: 723: shanshuoTime2--;
  2398  0712  3001               	movlw	1
  2399  0713  02AA               	subwf	_shanshuoTime2,f
  2400  0714  3000               	movlw	0
  2401  0715  1C03               	skipc
  2402  0716  03AB               	decf	_shanshuoTime2+1,f
  2403  0717  02AB               	subwf	_shanshuoTime2+1,f
  2404                           
  2405                           ;main.c: 724: if((shanshuoTime2 % 75) < 37)
  2406  0718  304B               	movlw	75
  2407  0719  00F3               	movwf	___lwmod@divisor
  2408  071A  01F4               	clrf	___lwmod@divisor+1
  2409  071B  082B               	movf	_shanshuoTime2+1,w
  2410  071C  00F6               	movwf	___lwmod@dividend+1
  2411  071D  082A               	movf	_shanshuoTime2,w
  2412  071E  00F5               	movwf	___lwmod@dividend
  2413  071F  2731  118A         	fcall	___lwmod
  2414  0721  3000               	movlw	0
  2415  0722  0274               	subwf	?___lwmod+1,w
  2416  0723  3025               	movlw	37
  2417  0724  1903               	skipnz
  2418  0725  0273               	subwf	?___lwmod,w
  2419  0726  1803               	skipnc
  2420  0727  2F2A               	goto	l1113
  2421  0728                     l4593:	
  2422                           
  2423                           ;main.c: 725: {
  2424                           ;main.c: 726: wuhuaKeyFlag = 0;
  2425  0728  01B9               	clrf	_wuhuaKeyFlag
  2426                           
  2427                           ;main.c: 727: }
  2428  0729  0008               	return
  2429  072A                     l1113:	
  2430                           
  2431                           ;main.c: 728: else
  2432                           ;main.c: 729: {
  2433                           ;main.c: 730: wuhuaKeyFlag = 1;
  2434  072A  01B9               	clrf	_wuhuaKeyFlag
  2435  072B  0AB9               	incf	_wuhuaKeyFlag,f
  2436  072C  0008               	return
  2437  072D                     l4595:	
  2438                           
  2439                           ;main.c: 733: else if(wuhuaFlag > 0)
  2440  072D  0843               	movf	_wuhuaFlag,w
  2441  072E  1D03               	btfss	3,2
  2442  072F  2F2A               	goto	l1113
  2443  0730  2F28               	goto	l4593
  2444  0731                     __end_of_keyLedCtr:	
  2445  0731                     __ptext6:	
  2446 ;; *************** function ___lwmod *****************
  2447 ;; Defined at:
  2448 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  divisor         2    3[COMMON] unsigned int 
  2451 ;;  dividend        2    5[COMMON] unsigned int 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  counter         1    7[COMMON] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  2    3[COMMON] unsigned int 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0
  2458 ;; Tracked objects:
  2459 ;;		On entry : 300/0
  2460 ;;		On exit  : 300/0
  2461 ;;		Unchanged: 300/0
  2462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2463 ;;      Params:         4       0       0       0
  2464 ;;      Locals:         1       0       0       0
  2465 ;;      Temps:          0       0       0       0
  2466 ;;      Totals:         5       0       0       0
  2467 ;;Total ram usage:        5 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    2
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_keyLedCtr
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           
  2478                           ;psect for function ___lwmod
  2479  0731                     ___lwmod:	
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2483  0731  0873               	movf	___lwmod@divisor,w
  2484  0732  0474               	iorwf	___lwmod@divisor+1,w
  2485  0733  1903               	btfsc	3,2
  2486  0734  2F50               	goto	l4483
  2487  0735  01F7               	clrf	___lwmod@counter
  2488  0736                     L1:	
  2489  0736  0AF7               	incf	___lwmod@counter,f
  2490  0737  1BF4               	btfsc	___lwmod@divisor+1,7
  2491  0738  2F3D               	goto	l4475
  2492  0739  1003               	clrc
  2493  073A  0DF3               	rlf	___lwmod@divisor,f
  2494  073B  0DF4               	rlf	___lwmod@divisor+1,f
  2495  073C  2F36               	goto	L1
  2496  073D                     l4475:	
  2497  073D  0874               	movf	___lwmod@divisor+1,w
  2498  073E  0276               	subwf	___lwmod@dividend+1,w
  2499  073F  1D03               	skipz
  2500  0740  2F43               	goto	u4705
  2501  0741  0873               	movf	___lwmod@divisor,w
  2502  0742  0275               	subwf	___lwmod@dividend,w
  2503  0743                     u4705:	
  2504  0743  1C03               	skipc
  2505  0744  2F4C               	goto	L2
  2506  0745  0873               	movf	___lwmod@divisor,w
  2507  0746  02F5               	subwf	___lwmod@dividend,f
  2508  0747  0874               	movf	___lwmod@divisor+1,w
  2509  0748  1C03               	skipc
  2510  0749  03F6               	decf	___lwmod@dividend+1,f
  2511  074A  02F6               	subwf	___lwmod@dividend+1,f
  2512  074B  1003               	clrc
  2513  074C                     L2:	
  2514  074C  0CF4               	rrf	___lwmod@divisor+1,f
  2515  074D  0CF3               	rrf	___lwmod@divisor,f
  2516  074E  0BF7               	decfsz	___lwmod@counter,f
  2517  074F  2F3D               	goto	l4475
  2518  0750                     l4483:	
  2519  0750  0876               	movf	___lwmod@dividend+1,w
  2520  0751  00F4               	movwf	?___lwmod+1
  2521  0752  0875               	movf	___lwmod@dividend,w
  2522  0753  00F3               	movwf	?___lwmod
  2523  0754  0008               	return
  2524  0755                     __end_of___lwmod:	
  2525  0755                     __ptext9:	
  2526 ;; *************** function _fanInit *****************
  2527 ;; Defined at:
  2528 ;;		line 763 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;		None
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, status,2, status,0
  2537 ;; Tracked objects:
  2538 ;;		On entry : 300/0
  2539 ;;		On exit  : 300/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2542 ;;      Params:         0       0       0       0
  2543 ;;      Locals:         0       0       0       0
  2544 ;;      Temps:          0       0       0       0
  2545 ;;      Totals:         0       0       0       0
  2546 ;;Total ram usage:        0 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    2
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_fanCtr
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           
  2557                           ;psect for function _fanInit
  2558  0755                     _fanInit:	
  2559  0755                     l4373:	
  2560                           ;incstack = 0
  2561                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2562                           
  2563                           
  2564                           ;main.c: 766: PWMTH = 0x00;
  2565  0755  0198               	clrf	24	;volatile
  2566                           
  2567                           ;main.c: 767: PWMTL = 73;
  2568  0756  3049               	movlw	73
  2569  0757  0097               	movwf	23	;volatile
  2570                           
  2571                           ;main.c: 768: PWMD01H = 0x00;
  2572  0758  019E               	clrf	30	;volatile
  2573                           
  2574                           ;main.c: 769: PWMD1L = fanDuty;
  2575  0759  0842               	movf	_fanDuty,w
  2576  075A  009A               	movwf	26	;volatile
  2577                           
  2578                           ;main.c: 770: PWMCON1 = 0x40;
  2579  075B  3040               	movlw	64
  2580  075C  0096               	movwf	22	;volatile
  2581                           
  2582                           ;main.c: 771: PWMCON2 = 0x00;
  2583  075D  019D               	clrf	29	;volatile
  2584                           
  2585                           ;main.c: 772: PWMCON0 |= 0x22;
  2586  075E  3022               	movlw	34
  2587  075F  0495               	iorwf	21,f	;volatile
  2588  0760  0008               	return
  2589  0761                     __end_of_fanInit:	
  2590  0761                     __ptext8:	
  2591 ;; *************** function _fanStop *****************
  2592 ;; Defined at:
  2593 ;;		line 775 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;		None
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		status,2
  2602 ;; Tracked objects:
  2603 ;;		On entry : 300/0
  2604 ;;		On exit  : 300/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2607 ;;      Params:         0       0       0       0
  2608 ;;      Locals:         0       0       0       0
  2609 ;;      Temps:          0       0       0       0
  2610 ;;      Totals:         0       0       0       0
  2611 ;;Total ram usage:        0 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    2
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_fanCtr
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           
  2622                           ;psect for function _fanStop
  2623  0761                     _fanStop:	
  2624                           
  2625                           ;main.c: 777: PWMD1L = 0;
  2626                           
  2627                           ;incstack = 0
  2628                           ; Regs used in _fanStop: [status,2]
  2629  0761  019A               	clrf	26	;volatile
  2630                           
  2631                           ;main.c: 778: PWMCON0 &= 0xFD;
  2632  0762  1095               	bcf	21,1	;volatile
  2633                           
  2634                           ;main.c: 779: PORTB &= 0x7F;
  2635  0763  1386               	bcf	6,7	;volatile
  2636  0764  0008               	return
  2637  0765                     __end_of_fanStop:	
  2638  0765                     __ptext2:	
  2639 ;; *************** function _wuhuaCtr *****************
  2640 ;; Defined at:
  2641 ;;		line 833 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;		None
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      void 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, pclath, cstack
  2650 ;; Tracked objects:
  2651 ;;		On entry : 200/0
  2652 ;;		On exit  : 200/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2655 ;;      Params:         0       0       0       0
  2656 ;;      Locals:         0       0       0       0
  2657 ;;      Temps:          0       0       0       0
  2658 ;;      Totals:         0       0       0       0
  2659 ;;Total ram usage:        0 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    3
  2662 ;; This function calls:
  2663 ;;		_pwmInit
  2664 ;;		_pwmStop
  2665 ;; This function is called by:
  2666 ;;		_workCtr
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _wuhuaCtr
  2672  0765                     _wuhuaCtr:	
  2673  0765                     l4651:	
  2674                           ;incstack = 0
  2675                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2676                           
  2677                           
  2678                           ;main.c: 835: if(count1s == 0)
  2679  0765  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0766  0845               	movf	_count1s,w
  2681  0767  1D03               	btfss	3,2
  2682  0768  2F6E               	goto	l4657
  2683                           
  2684                           ;main.c: 836: {
  2685                           ;main.c: 837: if(++count10s >= 10)
  2686  0769  300A               	movlw	10
  2687  076A  0AC1               	incf	_count10s,f
  2688  076B  0241               	subwf	_count10s,w
  2689  076C  1803               	btfsc	3,0
  2690                           
  2691                           ;main.c: 838: {
  2692                           ;main.c: 839: count10s = 0;
  2693  076D  01C1               	clrf	_count10s
  2694  076E                     l4657:	
  2695                           
  2696                           ;main.c: 840: }
  2697                           ;main.c: 841: }
  2698                           ;main.c: 842: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2699  076E  0343               	decf	_wuhuaFlag,w
  2700  076F  1903               	btfsc	3,2
  2701  0770  2F79               	goto	l4663
  2702  0771  3002               	movlw	2
  2703  0772  0643               	xorwf	_wuhuaFlag,w
  2704  0773  1D03               	btfss	3,2
  2705  0774  2F7A               	goto	l4665
  2706  0775  3005               	movlw	5
  2707  0776  0241               	subwf	_count10s,w
  2708  0777  1803               	skipnc
  2709  0778  2F7A               	goto	l4665
  2710  0779                     l4663:	
  2711                           
  2712                           ;main.c: 843: {
  2713                           ;main.c: 844: pwmInit();
  2714  0779  2F7B               	ljmp	l4357
  2715  077A                     l4665:	
  2716                           ;main.c: 859: }
  2717                           
  2718                           
  2719                           ;main.c: 860: else
  2720                           ;main.c: 861: {
  2721                           ;main.c: 862: pwmStop();
  2722  077A  2F87               	ljmp	l4367
  2723  077B                     __end_of_wuhuaCtr:	
  2724  077B                     __ptext4:	
  2725 ;; *************** function _pwmInit *****************
  2726 ;; Defined at:
  2727 ;;		line 744 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 300/0
  2738 ;;		On exit  : 300/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2741 ;;      Params:         0       0       0       0
  2742 ;;      Locals:         0       0       0       0
  2743 ;;      Temps:          0       0       0       0
  2744 ;;      Totals:         0       0       0       0
  2745 ;;Total ram usage:        0 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    2
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_wuhuaCtr
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _pwmInit
  2757  077B                     _pwmInit:	
  2758  077B                     l4357:	
  2759                           ;incstack = 0
  2760                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2761                           
  2762                           
  2763                           ;main.c: 747: PWMTH = 0x00;
  2764  077B  0198               	clrf	24	;volatile
  2765                           
  2766                           ;main.c: 748: PWMTL = 73;
  2767  077C  3049               	movlw	73
  2768  077D  0097               	movwf	23	;volatile
  2769                           
  2770                           ;main.c: 749: PWMD01H = 0x00;
  2771  077E  019E               	clrf	30	;volatile
  2772                           
  2773                           ;main.c: 750: PWMD0L = 32;
  2774  077F  3020               	movlw	32
  2775  0780  0099               	movwf	25	;volatile
  2776                           
  2777                           ;main.c: 751: PWMCON1 = 0x40;
  2778  0781  3040               	movlw	64
  2779  0782  0096               	movwf	22	;volatile
  2780                           
  2781                           ;main.c: 752: PWMCON2 = 0x00;
  2782  0783  019D               	clrf	29	;volatile
  2783                           
  2784                           ;main.c: 753: PWMCON0 |= 0x21;
  2785  0784  3021               	movlw	33
  2786  0785  0495               	iorwf	21,f	;volatile
  2787  0786  0008               	return
  2788  0787                     __end_of_pwmInit:	
  2789  0787                     __ptext3:	
  2790 ;; *************** function _pwmStop *****************
  2791 ;; Defined at:
  2792 ;;		line 756 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		status,2
  2801 ;; Tracked objects:
  2802 ;;		On entry : 300/0
  2803 ;;		On exit  : 300/100
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2806 ;;      Params:         0       0       0       0
  2807 ;;      Locals:         0       0       0       0
  2808 ;;      Temps:          0       0       0       0
  2809 ;;      Totals:         0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    2
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_wuhuaCtr
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           
  2821                           ;psect for function _pwmStop
  2822  0787                     _pwmStop:	
  2823  0787                     l4367:	
  2824                           ;incstack = 0
  2825                           ; Regs used in _pwmStop: [status,2]
  2826                           
  2827                           
  2828                           ;main.c: 758: PWMD0L = 0;
  2829  0787  0199               	clrf	25	;volatile
  2830                           
  2831                           ;main.c: 759: PWMCON0 &= 0xFE;
  2832  0788  1015               	bcf	21,0	;volatile
  2833                           
  2834                           ;main.c: 760: PORTA &= 0xDF;
  2835  0789  1683               	bsf	3,5	;RP0=1, select bank1
  2836  078A  1286               	bcf	6,5	;volatile
  2837  078B  0008               	return
  2838  078C                     __end_of_pwmStop:	
  2839  078C                     PL6:	
  2840  078C  00F5               	movwf	??_ADC_Sample+1
  2841  078D  01F6               	clrf	??_ADC_Sample+2
  2842  078E  01F7               	clrf	??_ADC_Sample+3
  2843  078F  0874               	movf	??_ADC_Sample,w
  2844  0790  02CC               	subwf	ADC_Sample@adsum,f	;volatile
  2845  0791  0875               	movf	??_ADC_Sample+1,w
  2846  0792  1C03               	skipc
  2847  0793  0F75               	incfsz	??_ADC_Sample+1,w
  2848  0794  02CD               	subwf	ADC_Sample@adsum+1,f	;volatile
  2849  0795  0876               	movf	??_ADC_Sample+2,w
  2850  0796  1C03               	skipc
  2851  0797  0F76               	incfsz	??_ADC_Sample+2,w
  2852  0798  02CE               	subwf	ADC_Sample@adsum+2,f	;volatile
  2853  0799  0877               	movf	??_ADC_Sample+3,w
  2854  079A  0008               	return
  2855  079B                     __end_ofPL6:	
  2856  079B                     PL18:	
  2857  079B  01CC               	clrf	ADC_Sample@adsum	;volatile
  2858  079C  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2859  079D  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2860  079E  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2861  079F  01D0               	clrf	ADC_Sample@admin	;volatile
  2862  07A0  01D1               	clrf	ADC_Sample@admin+1	;volatile
  2863  07A1  01D2               	clrf	ADC_Sample@admax	;volatile
  2864  07A2  01D3               	clrf	ADC_Sample@admax+1	;volatile
  2865  07A3  0008               	return
  2866  07A4                     __end_ofPL18:	
  2867  07A4                     PL26:	
  2868  07A4  085E               	movf	___fttol@f1,w
  2869  07A5  00E2               	movwf	??___fttol
  2870  07A6  085F               	movf	___fttol@f1+1,w
  2871  07A7  00E3               	movwf	??___fttol+1
  2872  07A8  0860               	movf	___fttol@f1+2,w
  2873  07A9  00E4               	movwf	??___fttol+2
  2874  07AA  0008               	return
  2875  07AB                     __end_ofPL26:	
  2876  07AB                     PL32:	
  2877  07AB  01CF               	clrf	?___ftdiv
  2878  07AC  01D0               	clrf	?___ftdiv+1
  2879  07AD  01D1               	clrf	?___ftdiv+2
  2880  07AE  0008               	return
  2881  07AF                     __end_ofPL32:	
  2882  07AF                     PL38:	
  2883  07AF  1003               	clrc
  2884  07B0  0CF5               	rrf	___ftpack@arg+2,f
  2885  07B1  0CF4               	rrf	___ftpack@arg+1,f
  2886  07B2  0CF3               	rrf	___ftpack@arg,f
  2887  07B3  0008               	return
  2888  07B4                     __end_ofPL38:	
  2889  07B4                     PL40:	
  2890  07B4  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2891  07B5  00D3               	movwf	ADC_Sample@admax+1	;volatile
  2892  07B6  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2893  07B7  00D2               	movwf	ADC_Sample@admax	;volatile
  2894  07B8  0008               	return
  2895  07B9                     __end_ofPL40:	
  2896                           
  2897                           	psect	text16
  2898  0F29                     __ptext16:	
  2899 ;; *************** function _setBatStep *****************
  2900 ;; Defined at:
  2901 ;;		line 555 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  tempSubBatTi    2    3[BANK0 ] unsigned int 
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0, pclath, cstack
  2910 ;; Tracked objects:
  2911 ;;		On entry : 200/0
  2912 ;;		On exit  : 300/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2915 ;;      Params:         0       0       0       0
  2916 ;;      Locals:         0       2       0       0
  2917 ;;      Temps:          0       0       0       0
  2918 ;;      Totals:         0       2       0       0
  2919 ;;Total ram usage:        2 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    3
  2922 ;; This function calls:
  2923 ;;		___lwdiv
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _setBatStep
  2931  0F29                     _setBatStep:	
  2932                           
  2933                           ;main.c: 557: if(lowBatLock == 1)
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  2937  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0F2A  0B3C               	decfsz	_lowBatLock,w
  2939  0F2B  2F2F               	goto	l4897
  2940                           
  2941                           ;main.c: 558: {
  2942                           ;main.c: 559: showBatStep = 0;
  2943  0F2C  01B8               	clrf	_showBatStep
  2944                           
  2945                           ;main.c: 560: curBatStep = 0;
  2946  0F2D  01B7               	clrf	_curBatStep
  2947                           
  2948                           ;main.c: 561: }
  2949  0F2E  0008               	return
  2950  0F2F                     l4897:	
  2951                           
  2952                           ;main.c: 562: else if(power_ad < 2800)
  2953  0F2F  300A               	movlw	10
  2954  0F30  0227               	subwf	_power_ad+1,w	;volatile
  2955  0F31  30F0               	movlw	240
  2956  0F32  1903               	skipnz
  2957  0F33  0226               	subwf	_power_ad,w	;volatile
  2958  0F34  1803               	skipnc
  2959  0F35  2F4C               	goto	l4909
  2960                           
  2961                           ;main.c: 563: {
  2962                           ;main.c: 564: if(count10s == 0 && count1s == 0)
  2963  0F36  0841               	movf	_count10s,w
  2964  0F37  1D03               	btfss	3,2
  2965  0F38  2F49               	goto	l1070
  2966  0F39  0845               	movf	_count1s,w
  2967  0F3A  1D03               	btfss	3,2
  2968  0F3B  2F49               	goto	l1070
  2969                           
  2970                           ;main.c: 565: {
  2971                           ;main.c: 566: if(showBatStep > 1)
  2972  0F3C  3002               	movlw	2
  2973  0F3D  0238               	subwf	_showBatStep,w
  2974  0F3E  1C03               	skipc
  2975  0F3F  2F45               	goto	l1071
  2976                           
  2977                           ;main.c: 567: {
  2978                           ;main.c: 568: if(chrgFlag == 0)
  2979  0F40  083F               	movf	_chrgFlag,w
  2980  0F41  1D03               	btfss	3,2
  2981  0F42  2F47               	goto	l1073
  2982                           
  2983                           ;main.c: 569: showBatStep--;
  2984  0F43  03B8               	decf	_showBatStep,f
  2985  0F44  2F47               	goto	l1073
  2986  0F45                     l1071:	
  2987                           
  2988                           ;main.c: 571: else
  2989                           ;main.c: 572: {
  2990                           ;main.c: 573: showBatStep = 1;
  2991  0F45  01B8               	clrf	_showBatStep
  2992  0F46  0AB8               	incf	_showBatStep,f
  2993  0F47                     l1073:	
  2994                           
  2995                           ;main.c: 574: }
  2996                           ;main.c: 575: curBatStep = 1;
  2997  0F47  01B7               	clrf	_curBatStep
  2998  0F48  0AB7               	incf	_curBatStep,f
  2999  0F49                     l1070:	
  3000                           
  3001                           ;main.c: 576: }
  3002                           ;main.c: 577: curBatStep = 1;
  3003  0F49  01B7               	clrf	_curBatStep
  3004  0F4A  0AB7               	incf	_curBatStep,f
  3005                           
  3006                           ;main.c: 578: }
  3007  0F4B  0008               	return
  3008  0F4C                     l4909:	
  3009                           
  3010                           ;main.c: 579: else
  3011                           ;main.c: 580: {
  3012                           ;main.c: 581: if(power_ad < 3600)
  3013  0F4C  300E               	movlw	14
  3014  0F4D  0227               	subwf	_power_ad+1,w	;volatile
  3015  0F4E  3010               	movlw	16
  3016  0F4F  1903               	skipnz
  3017  0F50  0226               	subwf	_power_ad,w	;volatile
  3018  0F51  1803               	skipnc
  3019  0F52  2F62               	goto	l4913
  3020                           
  3021                           ;main.c: 582: {
  3022                           ;main.c: 583: curBatStep = (power_ad - 2800)/80;
  3023  0F53  3050               	movlw	80
  3024  0F54  00F3               	movwf	___lwdiv@divisor
  3025  0F55  01F4               	clrf	___lwdiv@divisor+1
  3026  0F56  0826               	movf	_power_ad,w	;volatile
  3027  0F57  3E10               	addlw	16
  3028  0F58  00F5               	movwf	___lwdiv@dividend
  3029  0F59  0827               	movf	_power_ad+1,w	;volatile
  3030  0F5A  1803               	skipnc
  3031  0F5B  3E01               	addlw	1
  3032  0F5C  3EF5               	addlw	245
  3033  0F5D  00F6               	movwf	___lwdiv@dividend+1
  3034  0F5E  27D6  158A         	fcall	___lwdiv
  3035  0F60  0873               	movf	?___lwdiv,w
  3036  0F61  2F71               	goto	L5
  3037  0F62                     l4913:	
  3038                           ;main.c: 584: }
  3039                           
  3040                           
  3041                           ;main.c: 585: else
  3042                           ;main.c: 586: {
  3043                           ;main.c: 587: curBatStep = 20 + ((power_ad - 3600)/5);
  3044  0F62  3005               	movlw	5
  3045  0F63  00F3               	movwf	___lwdiv@divisor
  3046  0F64  01F4               	clrf	___lwdiv@divisor+1
  3047  0F65  0826               	movf	_power_ad,w	;volatile
  3048  0F66  3EF0               	addlw	240
  3049  0F67  00F5               	movwf	___lwdiv@dividend
  3050  0F68  0827               	movf	_power_ad+1,w	;volatile
  3051  0F69  1803               	skipnc
  3052  0F6A  3E01               	addlw	1
  3053  0F6B  3EF1               	addlw	241
  3054  0F6C  00F6               	movwf	___lwdiv@dividend+1
  3055  0F6D  27D6  158A         	fcall	___lwdiv
  3056  0F6F  0873               	movf	?___lwdiv,w
  3057  0F70  3E14               	addlw	20
  3058  0F71                     L5:	
  3059  0F71  00B7               	movwf	_curBatStep
  3060                           
  3061                           ;main.c: 588: }
  3062                           ;main.c: 589: if(curBatStep > 99)
  3063  0F72  3064               	movlw	100
  3064  0F73  0237               	subwf	_curBatStep,w
  3065  0F74  1C03               	skipc
  3066  0F75  2F78               	goto	l4919
  3067                           
  3068                           ;main.c: 590: {
  3069                           ;main.c: 591: curBatStep = 99;
  3070  0F76  3063               	movlw	99
  3071  0F77  00B7               	movwf	_curBatStep
  3072  0F78                     l4919:	
  3073                           
  3074                           ;main.c: 592: }
  3075                           ;main.c: 594: if(chrgFlag)
  3076  0F78  083F               	movf	_chrgFlag,w
  3077  0F79  1903               	btfsc	3,2
  3078  0F7A  2FAF               	goto	l4945
  3079                           
  3080                           ;main.c: 595: {
  3081                           ;main.c: 596: if(chrgFullFlag && showBatStep < 99)
  3082  0F7B  083E               	movf	_chrgFullFlag,w
  3083  0F7C  1903               	btfsc	3,2
  3084  0F7D  2F92               	goto	l4931
  3085  0F7E  3063               	movlw	99
  3086  0F7F  0238               	subwf	_showBatStep,w
  3087  0F80  1803               	skipnc
  3088  0F81  2F92               	goto	l4931
  3089                           
  3090                           ;main.c: 597: {
  3091                           ;main.c: 598: if(++count15s >= 7500)
  3092  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3093  0F83  0AB4               	incf	_count15s^(0+128),f
  3094  0F84  1903               	skipnz
  3095  0F85  0AB5               	incf	(_count15s+1)^(0+128),f
  3096  0F86  301D               	movlw	29
  3097  0F87  0235               	subwf	(_count15s+1)^(0+128),w
  3098  0F88  304C               	movlw	76
  3099  0F89  1903               	skipnz
  3100  0F8A  0234               	subwf	_count15s^(0+128),w
  3101  0F8B  1C03               	skipc
  3102  0F8C  2F95               	goto	l4933
  3103                           
  3104                           ;main.c: 599: {
  3105                           ;main.c: 600: count15s = 0;
  3106  0F8D  01B4               	clrf	_count15s^(0+128)
  3107  0F8E  01B5               	clrf	(_count15s+1)^(0+128)
  3108                           
  3109                           ;main.c: 601: showBatStep++;
  3110  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0F90  0AB8               	incf	_showBatStep,f
  3112  0F91  2F95               	goto	l4933
  3113  0F92                     l4931:	
  3114                           
  3115                           ;main.c: 604: else
  3116                           ;main.c: 605: {
  3117                           ;main.c: 606: count15s = 0;
  3118  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3119  0F93  01B4               	clrf	_count15s^(0+128)
  3120  0F94  01B5               	clrf	(_count15s+1)^(0+128)
  3121  0F95                     l4933:	
  3122                           
  3123                           ;main.c: 607: }
  3124                           ;main.c: 608: if(curBatStep > showBatStep)
  3125  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0F96  0837               	movf	_curBatStep,w
  3127  0F97  0238               	subwf	_showBatStep,w
  3128  0F98  1803               	skipnc
  3129  0F99  2FAC               	goto	l4943
  3130                           
  3131                           ;main.c: 609: {
  3132                           ;main.c: 610: if(++count30s >= 15000 && showBatStep < 99)
  3133  0F9A  0AA8               	incf	_count30s,f
  3134  0F9B  1903               	skipnz
  3135  0F9C  0AA9               	incf	_count30s+1,f
  3136  0F9D  303A               	movlw	58
  3137  0F9E  0229               	subwf	_count30s+1,w
  3138  0F9F  3098               	movlw	152
  3139  0FA0  1903               	skipnz
  3140  0FA1  0228               	subwf	_count30s,w
  3141  0FA2  1C03               	skipc
  3142  0FA3  0008               	return
  3143  0FA4  3063               	movlw	99
  3144  0FA5  0238               	subwf	_showBatStep,w
  3145  0FA6  1803               	skipnc
  3146  0FA7  0008               	return
  3147                           
  3148                           ;main.c: 611: {
  3149                           ;main.c: 612: count30s = 0;
  3150  0FA8  01A8               	clrf	_count30s
  3151  0FA9  01A9               	clrf	_count30s+1
  3152                           
  3153                           ;main.c: 613: showBatStep++;
  3154  0FAA  0AB8               	incf	_showBatStep,f
  3155  0FAB  0008               	return
  3156  0FAC                     l4943:	
  3157                           
  3158                           ;main.c: 617: else
  3159                           ;main.c: 618: {
  3160                           ;main.c: 619: count30s = 0;
  3161  0FAC  01A8               	clrf	_count30s
  3162  0FAD  01A9               	clrf	_count30s+1
  3163  0FAE  0008               	return
  3164  0FAF                     l4945:	
  3165                           
  3166                           ;main.c: 622: else
  3167                           ;main.c: 623: {
  3168                           ;main.c: 624: unsigned int tempSubBatTime = 15000;
  3169  0FAF  3098               	movlw	152
  3170  0FB0  00CC               	movwf	setBatStep@tempSubBatTime
  3171  0FB1  303A               	movlw	58
  3172  0FB2  00CD               	movwf	setBatStep@tempSubBatTime+1
  3173                           
  3174                           ;main.c: 625: if(showBatStep < 40)
  3175  0FB3  3028               	movlw	40
  3176  0FB4  0238               	subwf	_showBatStep,w
  3177  0FB5  1803               	skipnc
  3178  0FB6  2FBB               	goto	l1086
  3179                           
  3180                           ;main.c: 626: {
  3181                           ;main.c: 627: tempSubBatTime = 8000;
  3182  0FB7  3040               	movlw	64
  3183  0FB8  00CC               	movwf	setBatStep@tempSubBatTime
  3184  0FB9  301F               	movlw	31
  3185  0FBA  00CD               	movwf	setBatStep@tempSubBatTime+1
  3186  0FBB                     l1086:	
  3187                           
  3188                           ;main.c: 628: }
  3189                           ;main.c: 629: if(curBatStep < showBatStep && showBatStep > 1)
  3190  0FBB  0838               	movf	_showBatStep,w
  3191  0FBC  0237               	subwf	_curBatStep,w
  3192  0FBD  1803               	skipnc
  3193  0FBE  2FAC               	goto	l4943
  3194  0FBF  3002               	movlw	2
  3195  0FC0  0238               	subwf	_showBatStep,w
  3196  0FC1  1C03               	skipc
  3197  0FC2  2FAC               	goto	l4943
  3198                           
  3199                           ;main.c: 630: {
  3200                           ;main.c: 631: if(++count30s >= tempSubBatTime && showBatStep > 1)
  3201  0FC3  0AA8               	incf	_count30s,f
  3202  0FC4  1903               	skipnz
  3203  0FC5  0AA9               	incf	_count30s+1,f
  3204  0FC6  084D               	movf	setBatStep@tempSubBatTime+1,w
  3205  0FC7  0229               	subwf	_count30s+1,w
  3206  0FC8  1D03               	skipz
  3207  0FC9  2FCC               	goto	u5525
  3208  0FCA  084C               	movf	setBatStep@tempSubBatTime,w
  3209  0FCB  0228               	subwf	_count30s,w
  3210  0FCC                     u5525:	
  3211  0FCC  1C03               	skipc
  3212  0FCD  0008               	return
  3213  0FCE  3002               	movlw	2
  3214  0FCF  0238               	subwf	_showBatStep,w
  3215  0FD0  1C03               	skipc
  3216  0FD1  0008               	return
  3217                           
  3218                           ;main.c: 632: {
  3219                           ;main.c: 633: count30s = 0;
  3220  0FD2  01A8               	clrf	_count30s
  3221  0FD3  01A9               	clrf	_count30s+1
  3222                           
  3223                           ;main.c: 634: showBatStep--;
  3224  0FD4  03B8               	decf	_showBatStep,f
  3225  0FD5  0008               	return
  3226  0FD6                     __end_of_setBatStep:	
  3227  0FD6                     __ptext17:	
  3228 ;; *************** function ___lwdiv *****************
  3229 ;; Defined at:
  3230 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  divisor         2    3[COMMON] unsigned int 
  3233 ;;  dividend        2    5[COMMON] unsigned int 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  quotient        2    1[BANK0 ] unsigned int 
  3236 ;;  counter         1    0[BANK0 ] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  2    3[COMMON] unsigned int 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0
  3241 ;; Tracked objects:
  3242 ;;		On entry : 300/0
  3243 ;;		On exit  : 300/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3246 ;;      Params:         4       0       0       0
  3247 ;;      Locals:         0       3       0       0
  3248 ;;      Temps:          0       0       0       0
  3249 ;;      Totals:         4       3       0       0
  3250 ;;Total ram usage:        7 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    2
  3253 ;; This function calls:
  3254 ;;		Nothing
  3255 ;; This function is called by:
  3256 ;;		_setBatStep
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           
  3261                           ;psect for function ___lwdiv
  3262  0FD6                     ___lwdiv:	
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3266  0FD6  01CA               	clrf	___lwdiv@quotient
  3267  0FD7  01CB               	clrf	___lwdiv@quotient+1
  3268  0FD8  0873               	movf	___lwdiv@divisor,w
  3269  0FD9  0474               	iorwf	___lwdiv@divisor+1,w
  3270  0FDA  1903               	btfsc	3,2
  3271  0FDB  2FFB               	goto	l4839
  3272  0FDC  01C9               	clrf	___lwdiv@counter
  3273  0FDD                     L6:	
  3274  0FDD  0AC9               	incf	___lwdiv@counter,f
  3275  0FDE  1BF4               	btfsc	___lwdiv@divisor+1,7
  3276  0FDF  2FE4               	goto	l4827
  3277  0FE0  1003               	clrc
  3278  0FE1  0DF3               	rlf	___lwdiv@divisor,f
  3279  0FE2  0DF4               	rlf	___lwdiv@divisor+1,f
  3280  0FE3  2FDD               	goto	L6
  3281  0FE4                     l4827:	
  3282  0FE4  1003               	clrc
  3283  0FE5  0DCA               	rlf	___lwdiv@quotient,f
  3284  0FE6  0DCB               	rlf	___lwdiv@quotient+1,f
  3285  0FE7  0874               	movf	___lwdiv@divisor+1,w
  3286  0FE8  0276               	subwf	___lwdiv@dividend+1,w
  3287  0FE9  1D03               	skipz
  3288  0FEA  2FED               	goto	u5295
  3289  0FEB  0873               	movf	___lwdiv@divisor,w
  3290  0FEC  0275               	subwf	___lwdiv@dividend,w
  3291  0FED                     u5295:	
  3292  0FED  1C03               	skipc
  3293  0FEE  2FF7               	goto	L7
  3294  0FEF  0873               	movf	___lwdiv@divisor,w
  3295  0FF0  02F5               	subwf	___lwdiv@dividend,f
  3296  0FF1  0874               	movf	___lwdiv@divisor+1,w
  3297  0FF2  1C03               	skipc
  3298  0FF3  03F6               	decf	___lwdiv@dividend+1,f
  3299  0FF4  02F6               	subwf	___lwdiv@dividend+1,f
  3300  0FF5  144A               	bsf	___lwdiv@quotient,0
  3301  0FF6  1003               	clrc
  3302  0FF7                     L7:	
  3303  0FF7  0CF4               	rrf	___lwdiv@divisor+1,f
  3304  0FF8  0CF3               	rrf	___lwdiv@divisor,f
  3305  0FF9  0BC9               	decfsz	___lwdiv@counter,f
  3306  0FFA  2FE4               	goto	l4827
  3307  0FFB                     l4839:	
  3308  0FFB  084B               	movf	___lwdiv@quotient+1,w
  3309  0FFC  00F4               	movwf	?___lwdiv+1
  3310  0FFD  084A               	movf	___lwdiv@quotient,w
  3311  0FFE  00F3               	movwf	?___lwdiv
  3312  0FFF  0008               	return
  3313  1000                     __end_of___lwdiv:	
  3314                           
  3315                           	psect	text18
  3316  0DD9                     __ptext18:	
  3317 ;; *************** function _chrgCtr *****************
  3318 ;; Defined at:
  3319 ;;		line 646 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 300/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3333 ;;      Params:         0       0       0       0
  3334 ;;      Locals:         0       0       0       0
  3335 ;;      Temps:          0       0       0       0
  3336 ;;      Totals:         0       0       0       0
  3337 ;;Total ram usage:        0 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    4
  3340 ;; This function calls:
  3341 ;;		_showBatLed
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _chrgCtr
  3349  0DD9                     _chrgCtr:	
  3350                           
  3351                           ;main.c: 648: if(PORTB & 0x01)
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3355  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  3356  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  3357  0DDB  1C06               	btfss	6,0	;volatile
  3358  0DDC  2DF0               	goto	l4103
  3359                           
  3360                           ;main.c: 649: {
  3361                           ;main.c: 650: chrgFlag = 1;
  3362  0DDD  01BF               	clrf	_chrgFlag
  3363  0DDE  0ABF               	incf	_chrgFlag,f
  3364                           
  3365                           ;main.c: 651: firstLock = 0;
  3366  0DDF  01EB               	clrf	_firstLock
  3367                           
  3368                           ;main.c: 652: lowBatLock = 0;
  3369  0DE0  01BC               	clrf	_lowBatLock
  3370                           
  3371                           ;main.c: 653: showBatLed();
  3372  0DE1  260A  158A         	fcall	_showBatLed
  3373                           
  3374                           ;main.c: 654: if(PORTB & 0x02)
  3375  0DE3  1C86               	btfss	6,1	;volatile
  3376  0DE4  2DEE               	goto	l4101
  3377                           
  3378                           ;main.c: 655: {
  3379                           ;main.c: 656: if(++chrgFullTime > 200)
  3380  0DE5  30C9               	movlw	201
  3381  0DE6  0ABD               	incf	_chrgFullTime,f
  3382  0DE7  023D               	subwf	_chrgFullTime,w
  3383  0DE8  1C03               	skipc
  3384  0DE9  0008               	return
  3385                           
  3386                           ;main.c: 657: {
  3387                           ;main.c: 658: chrgFullTime = 0;
  3388  0DEA  01BD               	clrf	_chrgFullTime
  3389                           
  3390                           ;main.c: 659: chrgFullFlag = 1;
  3391  0DEB  01BE               	clrf	_chrgFullFlag
  3392  0DEC  0ABE               	incf	_chrgFullFlag,f
  3393  0DED  0008               	return
  3394  0DEE                     l4101:	
  3395                           
  3396                           ;main.c: 662: else
  3397                           ;main.c: 663: {
  3398                           ;main.c: 664: chrgFullTime = 0;
  3399  0DEE  01BD               	clrf	_chrgFullTime
  3400  0DEF  0008               	return
  3401  0DF0                     l4103:	
  3402                           
  3403                           ;main.c: 668: else
  3404                           ;main.c: 669: {
  3405                           ;main.c: 670: chrgFlag = 0;
  3406  0DF0  01BF               	clrf	_chrgFlag
  3407                           
  3408                           ;main.c: 671: chrgFullTime = 0;
  3409  0DF1  01BD               	clrf	_chrgFullTime
  3410                           
  3411                           ;main.c: 672: chrgFullFlag = 0;
  3412  0DF2  01BE               	clrf	_chrgFullFlag
  3413                           
  3414                           ;main.c: 674: if(firstTime == 0)
  3415  0DF3  086C               	movf	_firstTime,w
  3416  0DF4  1D03               	btfss	3,2
  3417  0DF5  2E00               	goto	l4115
  3418                           
  3419                           ;main.c: 675: {
  3420                           ;main.c: 676: if(workStep == 0 && wuhuaFlag == 0)
  3421  0DF6  0844               	movf	_workStep,w
  3422  0DF7  1D03               	btfss	3,2
  3423  0DF8  2DFF               	goto	l4113
  3424  0DF9  0843               	movf	_wuhuaFlag,w
  3425  0DFA  1D03               	btfss	3,2
  3426  0DFB  2DFF               	goto	l4113
  3427                           
  3428                           ;main.c: 677: {
  3429                           ;main.c: 678: showNumShi = 0;
  3430  0DFC  01EE               	clrf	_showNumShi
  3431                           
  3432                           ;main.c: 679: showNumGe = 0;
  3433  0DFD  01ED               	clrf	_showNumGe
  3434                           
  3435                           ;main.c: 680: }
  3436  0DFE  0008               	return
  3437  0DFF                     l4113:	
  3438                           
  3439                           ;main.c: 681: else
  3440                           ;main.c: 682: {
  3441                           ;main.c: 683: showBatLed();
  3442  0DFF  2E0A               	ljmp	l3429
  3443  0E00                     l4115:	
  3444                           
  3445                           ;main.c: 686: else
  3446                           ;main.c: 687: {
  3447                           ;main.c: 688: if(showBatStep < curBatStep)
  3448  0E00  0837               	movf	_curBatStep,w
  3449  0E01  0238               	subwf	_showBatStep,w
  3450  0E02  1803               	skipnc
  3451  0E03  2E06               	goto	l1102
  3452                           
  3453                           ;main.c: 689: {
  3454                           ;main.c: 690: showBatStep = curBatStep;
  3455  0E04  0837               	movf	_curBatStep,w
  3456  0E05  00B8               	movwf	_showBatStep
  3457  0E06                     l1102:	
  3458                           
  3459                           ;main.c: 691: }
  3460                           ;main.c: 692: showNumShi = 0x7F;
  3461  0E06  307F               	movlw	127
  3462  0E07  00EE               	movwf	_showNumShi
  3463                           
  3464                           ;main.c: 693: showNumGe = 0x7F;
  3465  0E08  00ED               	movwf	_showNumGe
  3466  0E09  0008               	return
  3467  0E0A                     __end_of_chrgCtr:	
  3468  0E0A                     __ptext19:	
  3469 ;; *************** function _showBatLed *****************
  3470 ;; Defined at:
  3471 ;;		line 549 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 300/0
  3482 ;;		On exit  : 300/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3485 ;;      Params:         0       0       0       0
  3486 ;;      Locals:         0       0       0       0
  3487 ;;      Temps:          0       0       0       0
  3488 ;;      Totals:         0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		___lbdiv
  3494 ;;		___lbmod
  3495 ;; This function is called by:
  3496 ;;		_chrgCtr
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _showBatLed
  3502  0E0A                     _showBatLed:	
  3503  0E0A                     l3429:	
  3504                           ;incstack = 0
  3505                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3506                           
  3507                           
  3508                           ;main.c: 551: showNumShi = numArray[showBatStep/10];
  3509  0E0A  300A               	movlw	10
  3510  0E0B  00F3               	movwf	___lbdiv@divisor
  3511  0E0C  0838               	movf	_showBatStep,w
  3512  0E0D  261E               	fcall	___lbdiv
  3513  0E0E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3514  0E0F  0084               	movwf	4
  3515  0E10  158A  2028  158A   	fcall	stringdir
  3516  0E13  00EE               	movwf	_showNumShi
  3517                           
  3518                           ;main.c: 552: showNumGe = numArray[showBatStep%10];
  3519  0E14  300A               	movlw	10
  3520  0E15  00F3               	movwf	___lbmod@divisor
  3521  0E16  0838               	movf	_showBatStep,w
  3522  0E17  2639               	fcall	___lbmod
  3523  0E18  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3524  0E19  0084               	movwf	4
  3525  0E1A  158A  2028         	fcall	stringdir
  3526  0E1C  00ED               	movwf	_showNumGe
  3527  0E1D  0008               	return
  3528  0E1E                     __end_of_showBatLed:	
  3529  0E1E                     __ptext21:	
  3530 ;; *************** function ___lbdiv *****************
  3531 ;; Defined at:
  3532 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  dividend        1    wreg     unsigned char 
  3535 ;;  divisor         1    3[COMMON] unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  dividend        1    4[COMMON] unsigned char 
  3538 ;;  quotient        1    6[COMMON] unsigned char 
  3539 ;;  counter         1    5[COMMON] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 300/0
  3546 ;;		On exit  : 300/0
  3547 ;;		Unchanged: 300/0
  3548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3549 ;;      Params:         1       0       0       0
  3550 ;;      Locals:         3       0       0       0
  3551 ;;      Temps:          0       0       0       0
  3552 ;;      Totals:         4       0       0       0
  3553 ;;Total ram usage:        4 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    2
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_showBatLed
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           
  3564                           ;psect for function ___lbdiv
  3565  0E1E                     ___lbdiv:	
  3566                           
  3567                           ;incstack = 0
  3568                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3569                           ;___lbdiv@dividend stored from wreg
  3570  0E1E  00F4               	movwf	___lbdiv@dividend
  3571  0E1F  01F6               	clrf	___lbdiv@quotient
  3572  0E20  0873               	movf	___lbdiv@divisor,w
  3573  0E21  1903               	btfsc	3,2
  3574  0E22  2E37               	goto	l3295
  3575  0E23  01F5               	clrf	___lbdiv@counter
  3576  0E24                     l3281:	
  3577  0E24  0AF5               	incf	___lbdiv@counter,f
  3578  0E25  1BF3               	btfsc	___lbdiv@divisor,7
  3579  0E26  2E2A               	goto	l1669
  3580  0E27  1003               	clrc
  3581  0E28  0DF3               	rlf	___lbdiv@divisor,f
  3582  0E29  2E24               	goto	l3281
  3583  0E2A                     l1669:	
  3584  0E2A  1003               	clrc
  3585  0E2B  0DF6               	rlf	___lbdiv@quotient,f
  3586  0E2C  0873               	movf	___lbdiv@divisor,w
  3587  0E2D  0274               	subwf	___lbdiv@dividend,w
  3588  0E2E  1C03               	skipc
  3589  0E2F  2E34               	goto	L9
  3590  0E30  0873               	movf	___lbdiv@divisor,w
  3591  0E31  02F4               	subwf	___lbdiv@dividend,f
  3592  0E32  1476               	bsf	___lbdiv@quotient,0
  3593  0E33  1003               	clrc
  3594  0E34                     L9:	
  3595  0E34  0CF3               	rrf	___lbdiv@divisor,f
  3596  0E35  0BF5               	decfsz	___lbdiv@counter,f
  3597  0E36  2E2A               	goto	l1669
  3598  0E37                     l3295:	
  3599  0E37  0876               	movf	___lbdiv@quotient,w
  3600  0E38  0008               	return
  3601  0E39                     __end_of___lbdiv:	
  3602  0E39                     __ptext20:	
  3603 ;; *************** function ___lbmod *****************
  3604 ;; Defined at:
  3605 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  dividend        1    wreg     unsigned char 
  3608 ;;  divisor         1    3[COMMON] unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  dividend        1    5[COMMON] unsigned char 
  3611 ;;  rem             1    7[COMMON] unsigned char 
  3612 ;;  counter         1    6[COMMON] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      unsigned char 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0
  3617 ;; Tracked objects:
  3618 ;;		On entry : 300/0
  3619 ;;		On exit  : 300/0
  3620 ;;		Unchanged: 300/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3622 ;;      Params:         1       0       0       0
  3623 ;;      Locals:         3       0       0       0
  3624 ;;      Temps:          1       0       0       0
  3625 ;;      Totals:         5       0       0       0
  3626 ;;Total ram usage:        5 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    2
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_showBatLed
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           
  3637                           ;psect for function ___lbmod
  3638  0E39                     ___lbmod:	
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3642                           ;___lbmod@dividend stored from wreg
  3643  0E39  00F5               	movwf	___lbmod@dividend
  3644  0E3A  3008               	movlw	8
  3645  0E3B  00F6               	movwf	___lbmod@counter
  3646  0E3C  01F7               	clrf	___lbmod@rem
  3647  0E3D                     l3303:	
  3648  0E3D  0875               	movf	___lbmod@dividend,w
  3649  0E3E  00F4               	movwf	??___lbmod
  3650  0E3F  3007               	movlw	7
  3651  0E40  1003               	clrc
  3652  0E41                     L8:	
  3653  0E41  0CF4               	rrf	??___lbmod,f
  3654  0E42  3EFF               	addlw	-1
  3655  0E43  1003               	clrc
  3656  0E44  1D03               	skipz
  3657  0E45  2E41               	goto	L8
  3658  0E46  0D77               	rlf	___lbmod@rem,w
  3659  0E47  0474               	iorwf	??___lbmod,w
  3660  0E48  00F7               	movwf	___lbmod@rem
  3661  0E49  1003               	clrc
  3662  0E4A  0DF5               	rlf	___lbmod@dividend,f
  3663  0E4B  0873               	movf	___lbmod@divisor,w
  3664  0E4C  0277               	subwf	___lbmod@rem,w
  3665  0E4D  1C03               	skipc
  3666  0E4E  2E51               	goto	l3311
  3667  0E4F  0873               	movf	___lbmod@divisor,w
  3668  0E50  02F7               	subwf	___lbmod@rem,f
  3669  0E51                     l3311:	
  3670  0E51  0BF6               	decfsz	___lbmod@counter,f
  3671  0E52  2E3D               	goto	l3303
  3672  0E53  0877               	movf	___lbmod@rem,w
  3673  0E54  0008               	return
  3674  0E55                     __end_of___lbmod:	
  3675                           
  3676                           	psect	text25
  3677  0D86                     __ptext25:	
  3678 ;; *************** function _KeyServer *****************
  3679 ;; Defined at:
  3680 ;;		line 131 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0
  3689 ;; Tracked objects:
  3690 ;;		On entry : 300/0
  3691 ;;		On exit  : 300/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3694 ;;      Params:         0       0       0       0
  3695 ;;      Locals:         0       0       0       0
  3696 ;;      Temps:          0       0       0       0
  3697 ;;      Totals:         0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    2
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_main
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _KeyServer
  3710  0D86                     _KeyServer:	
  3711                           
  3712                           ;main.c: 133: static unsigned char KeyOldFlag = 0;
  3713                           ;main.c: 134: if (KeyFlag[0])
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3717  0D86  082E               	movf	_KeyFlag,w	;volatile
  3718  0D87  1903               	btfsc	3,2
  3719  0D88  2DD7               	goto	l3899
  3720                           
  3721                           ;main.c: 135: {
  3722                           ;main.c: 136: time = 0;
  3723  0D89  1683               	bsf	3,5	;RP0=1, select bank1
  3724  0D8A  01BA               	clrf	_time^(0+128)
  3725  0D8B  01BB               	clrf	(_time+1)^(0+128)
  3726                           
  3727                           ;main.c: 137: if (KeyFlag[0] != KeyOldFlag)
  3728  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0D8D  082E               	movf	_KeyFlag,w	;volatile
  3730  0D8E  0635               	xorwf	KeyServer@KeyOldFlag,w
  3731  0D8F  1903               	skipnz
  3732  0D90  0008               	return
  3733                           
  3734                           ;main.c: 138: {
  3735                           ;main.c: 140: KeyOldFlag ^= KeyFlag[0];
  3736  0D91  082E               	movf	_KeyFlag,w	;volatile
  3737  0D92  06B5               	xorwf	KeyServer@KeyOldFlag,f
  3738                           
  3739                           ;main.c: 141: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3740  0D93  1835               	btfsc	KeyServer@KeyOldFlag,0
  3741  0D94  1C2E               	btfss	_KeyFlag,0	;volatile
  3742  0D95  2DB8               	goto	l3875
  3743  0D96  086B               	movf	_firstLock,w
  3744  0D97  1D03               	btfss	3,2
  3745  0D98  2DB8               	goto	l3875
  3746                           
  3747                           ;main.c: 142: {
  3748                           ;main.c: 144: if(lowBatLock == 1)
  3749  0D99  0B3C               	decfsz	_lowBatLock,w
  3750  0D9A  2D9F               	goto	l3859
  3751                           
  3752                           ;main.c: 145: {
  3753                           ;main.c: 146: shanshuoTime = 225;
  3754  0D9B  30E1               	movlw	225
  3755  0D9C  00AC               	movwf	_shanshuoTime
  3756  0D9D  01AD               	clrf	_shanshuoTime+1
  3757                           
  3758                           ;main.c: 147: }
  3759  0D9E  2DA4               	goto	l3863
  3760  0D9F                     l3859:	
  3761                           
  3762                           ;main.c: 148: else if(++workStep > 2)
  3763  0D9F  3003               	movlw	3
  3764  0DA0  0AC4               	incf	_workStep,f
  3765  0DA1  0244               	subwf	_workStep,w
  3766  0DA2  1803               	btfsc	3,0
  3767                           
  3768                           ;main.c: 149: {
  3769                           ;main.c: 150: workStep = 0;
  3770  0DA3  01C4               	clrf	_workStep
  3771  0DA4                     l3863:	
  3772                           
  3773                           ;main.c: 151: }
  3774                           ;main.c: 152: if(power_ad < 3200 && workStep == 2)
  3775  0DA4  300C               	movlw	12
  3776  0DA5  0227               	subwf	_power_ad+1,w	;volatile
  3777  0DA6  3080               	movlw	128
  3778  0DA7  1903               	skipnz
  3779  0DA8  0226               	subwf	_power_ad,w	;volatile
  3780  0DA9  3002               	movlw	2
  3781  0DAA  0644               	xorwf	_workStep,w
  3782  0DAB  1803               	skipnc
  3783  0DAC  2DB1               	goto	L13
  3784  0DAD  1903               	btfsc	3,2
  3785                           
  3786                           ;main.c: 153: {
  3787                           ;main.c: 154: workStep = 0;
  3788  0DAE  01C4               	clrf	_workStep
  3789                           
  3790                           ;main.c: 155: }
  3791                           ;main.c: 156: if(workStep == 2)
  3792  0DAF  3002               	movlw	2
  3793  0DB0  0644               	xorwf	_workStep,w
  3794  0DB1                     L13:	
  3795  0DB1  1D03               	btfss	3,2
  3796  0DB2  2DB6               	goto	l3873
  3797                           
  3798                           ;main.c: 157: {
  3799                           ;main.c: 158: shanshuoTime = 225;
  3800  0DB3  30E1               	movlw	225
  3801  0DB4  00AC               	movwf	_shanshuoTime
  3802  0DB5  2DB7               	goto	L12
  3803  0DB6                     l3873:	
  3804                           ;main.c: 159: }
  3805                           
  3806                           
  3807                           ;main.c: 160: else
  3808                           ;main.c: 161: {
  3809                           ;main.c: 162: shanshuoTime = 0;
  3810  0DB6  01AC               	clrf	_shanshuoTime
  3811  0DB7                     L12:	
  3812  0DB7  01AD               	clrf	_shanshuoTime+1
  3813  0DB8                     l3875:	
  3814                           
  3815                           ;main.c: 163: }
  3816                           ;main.c: 164: }
  3817                           ;main.c: 165: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3818  0DB8  18B5               	btfsc	KeyServer@KeyOldFlag,1
  3819  0DB9  1CAE               	btfss	_KeyFlag,1	;volatile
  3820  0DBA  2DD4               	goto	l3897
  3821  0DBB  086B               	movf	_firstLock,w
  3822  0DBC  1D03               	btfss	3,2
  3823  0DBD  2DD4               	goto	l3897
  3824                           
  3825                           ;main.c: 166: {
  3826                           ;main.c: 168: if(lowBatLock == 1)
  3827  0DBE  0B3C               	decfsz	_lowBatLock,w
  3828  0DBF  2DC4               	goto	l3885
  3829                           
  3830                           ;main.c: 169: {
  3831                           ;main.c: 170: shanshuoTime2 = 225;
  3832  0DC0  30E1               	movlw	225
  3833  0DC1  00AA               	movwf	_shanshuoTime2
  3834  0DC2  01AB               	clrf	_shanshuoTime2+1
  3835                           
  3836                           ;main.c: 171: }
  3837  0DC3  2DC9               	goto	l3889
  3838  0DC4                     l3885:	
  3839                           
  3840                           ;main.c: 172: else if(++wuhuaFlag > 2)
  3841  0DC4  3003               	movlw	3
  3842  0DC5  0AC3               	incf	_wuhuaFlag,f
  3843  0DC6  0243               	subwf	_wuhuaFlag,w
  3844  0DC7  1803               	btfsc	3,0
  3845                           
  3846                           ;main.c: 173: {
  3847                           ;main.c: 174: wuhuaFlag = 0;
  3848  0DC8  01C3               	clrf	_wuhuaFlag
  3849  0DC9                     l3889:	
  3850                           
  3851                           ;main.c: 175: }
  3852                           ;main.c: 176: if(wuhuaFlag == 2)
  3853  0DC9  3002               	movlw	2
  3854  0DCA  0643               	xorwf	_wuhuaFlag,w
  3855  0DCB  1D03               	btfss	3,2
  3856  0DCC  2DD2               	goto	l3895
  3857                           
  3858                           ;main.c: 177: {
  3859                           ;main.c: 178: shanshuoTime2 = 225;
  3860  0DCD  30E1               	movlw	225
  3861  0DCE  00AA               	movwf	_shanshuoTime2
  3862  0DCF  01AB               	clrf	_shanshuoTime2+1
  3863                           
  3864                           ;main.c: 179: count10s = 0;
  3865  0DD0  01C1               	clrf	_count10s
  3866                           
  3867                           ;main.c: 180: }
  3868  0DD1  2DD4               	goto	l3897
  3869  0DD2                     l3895:	
  3870                           
  3871                           ;main.c: 181: else
  3872                           ;main.c: 182: {
  3873                           ;main.c: 183: shanshuoTime2 = 0;
  3874  0DD2  01AA               	clrf	_shanshuoTime2
  3875  0DD3  01AB               	clrf	_shanshuoTime2+1
  3876  0DD4                     l3897:	
  3877                           
  3878                           ;main.c: 184: }
  3879                           ;main.c: 185: }
  3880                           ;main.c: 188: KeyOldFlag = KeyFlag[0];
  3881  0DD4  082E               	movf	_KeyFlag,w	;volatile
  3882  0DD5  00B5               	movwf	KeyServer@KeyOldFlag
  3883  0DD6  0008               	return
  3884  0DD7                     l3899:	
  3885                           
  3886                           ;main.c: 191: else
  3887                           ;main.c: 192: {
  3888                           ;main.c: 193: KeyOldFlag = 0;
  3889  0DD7  01B5               	clrf	KeyServer@KeyOldFlag
  3890  0DD8  0008               	return
  3891  0DD9                     __end_of_KeyServer:	
  3892                           
  3893                           	psect	text26
  3894  0024                     __ptext26:	
  3895 ;; *************** function _Init_System *****************
  3896 ;; Defined at:
  3897 ;;		line 80 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2
  3906 ;; Tracked objects:
  3907 ;;		On entry : B00/0
  3908 ;;		On exit  : 300/100
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3911 ;;      Params:         0       0       0       0
  3912 ;;      Locals:         0       0       0       0
  3913 ;;      Temps:          0       0       0       0
  3914 ;;      Totals:         0       0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_main
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _Init_System
  3927  0024                     _Init_System:	
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _Init_System: [wreg+status,2]
  3931  0024  0000               	nop	;# 
  3932  0025  0064               	clrwdt	;# 
  3933                           
  3934                           ;main.c: 84: INTCON = 0;
  3935  0026  018B               	clrf	11	;volatile
  3936                           
  3937                           ;main.c: 85: OSCCON = 0X72;
  3938  0027  3072               	movlw	114
  3939  0028  1283               	bcf	3,5	;RP0=0, select bank0
  3940  0029  1303               	bcf	3,6	;RP1=0, select bank0
  3941  002A  0094               	movwf	20	;volatile
  3942                           
  3943                           ;main.c: 86: OPTION_REG = 0;
  3944  002B  0181               	clrf	1	;volatile
  3945                           
  3946                           ;main.c: 91: TRISA = 0x00;
  3947  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3948  002D  0185               	clrf	5	;volatile
  3949                           
  3950                           ;main.c: 92: PORTA = 0;
  3951  002E  0186               	clrf	6	;volatile
  3952                           
  3953                           ;main.c: 93: TRISB = 0x23;
  3954  002F  3023               	movlw	35
  3955  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3956  0031  0085               	movwf	5	;volatile
  3957                           
  3958                           ;main.c: 94: PORTB = 0;
  3959  0032  0186               	clrf	6	;volatile
  3960                           
  3961                           ;main.c: 95: WPUB = 0x02;
  3962  0033  3002               	movlw	2
  3963  0034  0088               	movwf	8	;volatile
  3964                           
  3965                           ;main.c: 96: TRISC = 0;
  3966  0035  1703               	bsf	3,6	;RP1=1, select bank2
  3967  0036  0185               	clrf	5	;volatile
  3968                           
  3969                           ;main.c: 97: PORTC = 0;
  3970  0037  0186               	clrf	6	;volatile
  3971                           
  3972                           ;main.c: 99: PIE1 = 2;
  3973  0038  1303               	bcf	3,6	;RP1=0, select bank0
  3974  0039  008E               	movwf	14	;volatile
  3975                           
  3976                           ;main.c: 100: PR2 = 250;
  3977  003A  30FA               	movlw	250
  3978  003B  0091               	movwf	17	;volatile
  3979                           
  3980                           ;main.c: 101: T2CON = 4;
  3981  003C  3004               	movlw	4
  3982  003D  0093               	movwf	19	;volatile
  3983                           
  3984                           ;main.c: 103: INTCON = 0XC0;
  3985  003E  30C0               	movlw	192
  3986  003F  008B               	movwf	11	;volatile
  3987                           
  3988                           ;main.c: 104: ADCON0 = 0X41;
  3989                           
  3990                           ;main.c: 105: ADON = 1;
  3991                           
  3992                           ;main.c: 106: ADCON1 = 0x00;
  3993  0040  2BED               	ljmp	PL24	;call to abstracted procedure
  3994  0041                     __end_of_Init_System:	
  3995  0041                     __ptext22:	
  3996 ;; *************** function _WorkSleep *****************
  3997 ;; Defined at:
  3998 ;;		line 227 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 300/0
  4009 ;;		On exit  : 300/100
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4012 ;;      Params:         0       0       0       0
  4013 ;;      Locals:         0       0       0       0
  4014 ;;      Temps:          0       0       0       0
  4015 ;;      Totals:         0       0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    5
  4019 ;; This function calls:
  4020 ;;		_Refurbish_Sfr
  4021 ;;		_SystemEnterSleep
  4022 ;; This function is called by:
  4023 ;;		_main
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _WorkSleep
  4029  0041                     _WorkSleep:	
  4030                           
  4031                           ;main.c: 232: if(B_OnOff)time = 0;
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4035  0041  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4036  0042  2846               	goto	l4851
  4037  0043  1683               	bsf	3,5	;RP0=1, select bank1
  4038  0044  01BA               	clrf	_time^(0+128)
  4039  0045  01BB               	clrf	(_time+1)^(0+128)
  4040  0046                     l4851:	
  4041                           
  4042                           ;main.c: 234: if(++time >= 1000)
  4043  0046  1683               	bsf	3,5	;RP0=1, select bank1
  4044  0047  0ABA               	incf	_time^(0+128),f
  4045  0048  1903               	skipnz
  4046  0049  0ABB               	incf	(_time+1)^(0+128),f
  4047  004A  3003               	movlw	3
  4048  004B  023B               	subwf	(_time+1)^(0+128),w
  4049  004C  30E8               	movlw	232
  4050  004D  1903               	skipnz
  4051  004E  023A               	subwf	_time^(0+128),w
  4052  004F  1C03               	skipc
  4053  0050  0008               	return
  4054                           
  4055                           ;main.c: 235: {
  4056                           ;main.c: 236: time = 0;
  4057  0051  01BA               	clrf	_time^(0+128)
  4058  0052  01BB               	clrf	(_time+1)^(0+128)
  4059                           
  4060                           ;main.c: 237: INTCON = 0;
  4061  0053  018B               	clrf	11	;volatile
  4062                           
  4063                           ;main.c: 238: PIE1 = 0;
  4064  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4065  0055  018E               	clrf	14	;volatile
  4066                           
  4067                           ;main.c: 239: PIE2 = 0;
  4068  0056  1703               	bsf	3,6	;RP1=1, select bank2
  4069  0057  0190               	clrf	16	;volatile
  4070                           
  4071                           ;main.c: 240: PIR1 = 0;
  4072  0058  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0059  018D               	clrf	13	;volatile
  4074                           
  4075                           ;main.c: 241: PIR2 = 0;
  4076  005A  1703               	bsf	3,6	;RP1=1, select bank2
  4077  005B  018F               	clrf	15	;volatile
  4078                           
  4079                           ;main.c: 242: T2CON = 0;
  4080  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4081  005D  0193               	clrf	19	;volatile
  4082                           
  4083                           ;main.c: 243: ADCON1 = 0;
  4084  005E  1683               	bsf	3,5	;RP0=1, select bank1
  4085  005F  0196               	clrf	22	;volatile
  4086                           
  4087                           ;main.c: 246: ADCON0 = 0;
  4088  0060  0195               	clrf	21	;volatile
  4089                           
  4090                           ;main.c: 249: TRISA &= 0xE4;
  4091  0061  30E4               	movlw	228
  4092  0062  0585               	andwf	5,f	;volatile
  4093                           
  4094                           ;main.c: 250: TRISB &= 0xEF;
  4095  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0064  1205               	bcf	5,4	;volatile
  4097                           
  4098                           ;main.c: 251: PORTA = 0x00;
  4099  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4100  0066  0186               	clrf	6	;volatile
  4101                           
  4102                           ;main.c: 252: PORTB = 0x00;
  4103  0067  1283               	bcf	3,5	;RP0=0, select bank0
  4104  0068  0186               	clrf	6	;volatile
  4105                           
  4106                           ;main.c: 253: TRISC = 0;
  4107  0069  1703               	bsf	3,6	;RP1=1, select bank2
  4108  006A  0185               	clrf	5	;volatile
  4109                           
  4110                           ;main.c: 254: PORTC = 0;
  4111  006B  0186               	clrf	6	;volatile
  4112                           
  4113                           ;main.c: 256: TRISB0 =1;
  4114  006C  1303               	bcf	3,6	;RP1=0, select bank0
  4115  006D  1405               	bsf	5,0	;volatile
  4116                           
  4117                           ;main.c: 258: RBIF = 0;
  4118  006E  100B               	bcf	11,0	;volatile
  4119                           
  4120                           ;main.c: 259: RBIE = 1;
  4121  006F  158B               	bsf	11,3	;volatile
  4122                           
  4123                           ;main.c: 260: IOCB0= 1;
  4124  0070  1409               	bsf	9,0	;volatile
  4125                           
  4126                           ;main.c: 261: PORTB;
  4127  0071  0806               	movf	6,w	;volatile
  4128                           
  4129                           ;main.c: 273: SystemEnterSleep();
  4130  0072  20A9  118A         	fcall	_SystemEnterSleep
  4131                           
  4132                           ;main.c: 274: if(RAIF)
  4133  0074  1D8D               	btfss	13,3	;volatile
  4134  0075  2879               	goto	l4885
  4135                           
  4136                           ;main.c: 275: {
  4137                           ;main.c: 276: RAIF = 0;
  4138  0076  118D               	bcf	13,3	;volatile
  4139                           
  4140                           ;main.c: 277: PORTA;
  4141  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4142  0078  0806               	movf	6,w	;volatile
  4143  0079                     l4885:	
  4144                           
  4145                           ;main.c: 278: }
  4146                           ;main.c: 280: Refurbish_Sfr();
  4147  0079  2403  118A         	fcall	_Refurbish_Sfr
  4148                           
  4149                           ;main.c: 281: ADCON0 = 0X41;
  4150                           
  4151                           ;main.c: 282: ADON = 1;
  4152                           
  4153                           ;main.c: 283: ADCON1 = 0x00;
  4154  007B  2BED               	ljmp	PL24	;call to abstracted procedure
  4155  007C                     __end_of_WorkSleep:	
  4156  007C                     __ptext27:	
  4157 ;; *************** function _CheckTouchKey *****************
  4158 ;; Defined at:
  4159 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4173 ;;      Params:         0       0       0       0
  4174 ;;      Locals:         0       0       0       0
  4175 ;;      Temps:          0       0       0       0
  4176 ;;      Totals:         0       0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    5
  4180 ;; This function calls:
  4181 ;;		_CheckKeyOldValue
  4182 ;;		_CheckOnceResult
  4183 ;;		_CheckValidTime
  4184 ;;		_ClearResSum
  4185 ;;		_GetTouchKeyValue
  4186 ;;		_KeyStopClear
  4187 ;;		_TurnKeyFlags
  4188 ;; This function is called by:
  4189 ;;		_main
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _CheckTouchKey
  4195  007C                     _CheckTouchKey:	
  4196                           
  4197                           ;incstack = 0
  4198                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4199  007C  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4200  007D  288A               	goto	l1376
  4201  007E  2139  118A         	fcall	_GetTouchKeyValue
  4202  0080  3008               	movlw	8
  4203  0081  1283               	bcf	3,5	;RP0=0, select bank0
  4204  0082  1303               	bcf	3,6	;RP1=0, select bank0
  4205  0083  0AB4               	incf	_KeyCounter,f
  4206  0084  0234               	subwf	_KeyCounter,w
  4207  0085  1C03               	skipc
  4208  0086  28A8               	goto	l5027
  4209  0087  01B4               	clrf	_KeyCounter
  4210  0088  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4211  0089  28A8               	goto	l5027
  4212  008A                     l1376:	
  4213  008A  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4214  008B  28A2               	goto	l5021
  4215  008C  21B0  118A         	fcall	_CheckOnceResult
  4216  008E  2342  118A         	fcall	_TurnKeyFlags
  4217  0090  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4218  0091  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4219  0092  2899               	goto	l5011
  4220  0093  3003               	movlw	3
  4221  0094  1283               	bcf	3,5	;RP0=0, select bank0
  4222  0095  1303               	bcf	3,6	;RP1=0, select bank0
  4223  0096  0234               	subwf	_KeyCounter,w
  4224  0097  1C03               	skipc
  4225  0098  289E               	goto	l5019
  4226  0099                     l5011:	
  4227  0099  232C  118A         	fcall	_KeyStopClear
  4228  009B  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4229  009C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4230  009D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4231  009E                     l5019:	
  4232  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4233  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4234  00A0  01B4               	clrf	_KeyCounter
  4235  00A1  28A8               	goto	l5027
  4236  00A2                     l5021:	
  4237  00A2  22C8  118A         	fcall	_CheckKeyOldValue
  4238  00A4  21A1  118A         	fcall	_ClearResSum
  4239  00A6  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4240  00A7  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4241  00A8                     l5027:	
  4242  00A8  2B75               	ljmp	l3691	;# 
  4243  00A9                     __end_of_CheckTouchKey:	
  4244  00A9                     __ptext23:	
  4245 ;; *************** function _SystemEnterSleep *****************
  4246 ;; Defined at:
  4247 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  92              2    9[BANK0 ] unsigned int 
  4252 ;;  93              2    7[BANK0 ] unsigned int 
  4253 ;;  94              2    5[BANK0 ] unsigned int 
  4254 ;;  91              1   11[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 300/0
  4261 ;;		On exit  : 300/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4264 ;;      Params:         0       0       0       0
  4265 ;;      Locals:         0       7       0       0
  4266 ;;      Temps:          2       0       0       0
  4267 ;;      Totals:         2       7       0       0
  4268 ;;Total ram usage:        9 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    4
  4271 ;; This function calls:
  4272 ;;		_ClearResSum
  4273 ;;		_GetTouchKeyValue
  4274 ;;		_KeyClearOne
  4275 ;; This function is called by:
  4276 ;;		_WorkSleep
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _SystemEnterSleep
  4282  00A9                     _SystemEnterSleep:	
  4283  00A9                     l1388:	
  4284                           ;incstack = 0
  4285                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4286                           
  4287  00A9  0064               	clrwdt	;# 
  4288  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  4289  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  4290  00AC  0181               	clrf	1	;volatile
  4291  00AD  3007               	movlw	7
  4292  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4293  00AF  0481               	iorwf	1,f	;volatile
  4294  00B0  1581               	bsf	1,3	;volatile
  4295  00B1  0064               	clrwdt	;# 
  4296  00B2  300A               	movlw	10
  4297  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  4298  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  4299  00B5  0081               	movwf	1	;volatile
  4300  00B6  0064               	clrwdt	;# 
  4301  00B7  1283               	bcf	3,5	;RP0=0, select bank2
  4302  00B8  1703               	bsf	3,6	;RP1=1, select bank2
  4303  00B9  0191               	clrf	17	;volatile
  4304  00BA  0193               	clrf	19	;volatile
  4305  00BB  3002               	movlw	2
  4306  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4307  00BD  0094               	movwf	20	;volatile
  4308  00BE  0063               	sleep	;# 
  4309  00BF  0000               	nop	;# 
  4310  00C0  0064               	clrwdt	;# 
  4311  00C1  3072               	movlw	114
  4312  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4313  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4314  00C4  0094               	movwf	20	;volatile
  4315  00C5  3079               	movlw	121
  4316  00C6  1703               	bsf	3,6	;RP1=1, select bank2
  4317  00C7  0093               	movwf	19	;volatile
  4318  00C8  21A1  118A         	fcall	_ClearResSum
  4319  00CA  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4320  00CB  2139  118A         	fcall	_GetTouchKeyValue
  4321  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4322  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  4323  00CF  23F9  118A         	fcall	PL34	;call to abstracted procedure
  4324  00D1  1C0B               	btfss	11,0	;volatile
  4325  00D2  188B               	btfsc	11,1	;volatile
  4326  00D3  28D6               	goto	l4523
  4327  00D4  1D8D               	btfss	13,3	;volatile
  4328  00D5  28DD               	goto	l4535
  4329  00D6                     l4523:	
  4330  00D6  21A1               	fcall	_ClearResSum
  4331  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4332  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4333  00D9  01B4               	clrf	_KeyCounter
  4334  00DA  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4335  00DB  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4336  00DC  0008               	return
  4337  00DD                     l4535:	
  4338  00DD  0852               	movf	SystemEnterSleep@92,w
  4339  00DE  3903               	andlw	3
  4340  00DF  1003               	clrc
  4341  00E0  1903               	btfsc	3,2
  4342  00E1  2933               	goto	L11
  4343  00E2  0D54               	rlf	SystemEnterSleep@91,w
  4344  00E3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4345  00E4  0084               	movwf	4
  4346  00E5  1383               	bcf	3,7	;select IRP bank1
  4347  00E6  0800               	movf	0,w
  4348  00E7  00D0               	movwf	SystemEnterSleep@93
  4349  00E8  0A84               	incf	4,f
  4350  00E9  0800               	movf	0,w
  4351  00EA  00D1               	movwf	SystemEnterSleep@93+1
  4352  00EB  00CF               	movwf	SystemEnterSleep@94+1
  4353  00EC  0850               	movf	SystemEnterSleep@93,w
  4354  00ED  00CE               	movwf	SystemEnterSleep@94
  4355  00EE  0850               	movf	SystemEnterSleep@93,w
  4356  00EF  0451               	iorwf	SystemEnterSleep@93+1,w
  4357  00F0  1903               	btfsc	3,2
  4358  00F1  2932               	goto	l4569
  4359  00F2  0854               	movf	SystemEnterSleep@91,w
  4360  00F3  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4361  00F4  0084               	movwf	4
  4362  00F5  158A  2028  118A   	fcall	stringdir
  4363  00F8  07CE               	addwf	SystemEnterSleep@94,f
  4364  00F9  1803               	skipnc
  4365  00FA  0ACF               	incf	SystemEnterSleep@94+1,f
  4366  00FB  1003               	clrc
  4367  00FC  0D54               	rlf	SystemEnterSleep@91,w
  4368  00FD  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4369  00FE  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4370  0100  084F               	movf	SystemEnterSleep@94+1,w
  4371  0101  0275               	subwf	??_SystemEnterSleep+1,w
  4372  0102  1D03               	skipz
  4373  0103  2906               	goto	u4775
  4374  0104  084E               	movf	SystemEnterSleep@94,w
  4375  0105  0274               	subwf	??_SystemEnterSleep,w
  4376  0106                     u4775:	
  4377  0106  1C03               	skipc
  4378  0107  291A               	goto	L10
  4379  0108  23F9  118A         	fcall	PL34	;call to abstracted procedure
  4380  010A                     l4549:	
  4381  010A  0852               	movf	SystemEnterSleep@92,w
  4382  010B  3903               	andlw	3
  4383  010C  1D03               	btfss	3,2
  4384  010D  2911               	goto	l4553
  4385  010E  0854               	movf	SystemEnterSleep@91,w
  4386  010F  22A5  118A         	fcall	_KeyClearOne
  4387  0111                     l4553:	
  4388  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4389  0112  3002               	movlw	2
  4390  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4391  0114  1003               	clrc
  4392  0115  23FE  118A         	fcall	PL36	;call to abstracted procedure
  4393  0117  1803               	btfsc	3,0
  4394  0118  28D6               	goto	l4523
  4395  0119  290A               	goto	l4549
  4396  011A                     L10:	
  4397  011A  0D54               	rlf	SystemEnterSleep@91,w
  4398  011B  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4399  011C  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4400  011E  1003               	clrc
  4401  011F  0D54               	rlf	SystemEnterSleep@91,w
  4402  0120  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4403  0121  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4404  0123  0800               	movf	0,w
  4405  0124  00F4               	movwf	??_SystemEnterSleep
  4406  0125  0A84               	incf	4,f
  4407  0126  0800               	movf	0,w
  4408  0127  00F5               	movwf	??_SystemEnterSleep+1
  4409  0128  1003               	clrc
  4410  0129  0D54               	rlf	SystemEnterSleep@91,w
  4411  012A  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4412  012B  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4413  012D  0850               	movf	SystemEnterSleep@93,w
  4414  012E  0080               	movwf	0
  4415  012F  0A84               	incf	4,f
  4416  0130  0851               	movf	SystemEnterSleep@93+1,w
  4417  0131  0080               	movwf	0
  4418  0132                     l4569:	
  4419  0132  1003               	clrc
  4420  0133                     L11:	
  4421  0133  3002               	movlw	2
  4422  0134  23FE  118A         	fcall	PL36	;call to abstracted procedure
  4423  0136  1803               	btfsc	3,0
  4424  0137  28A9               	goto	l1388
  4425  0138  28DD               	goto	l4535
  4426  0139                     __end_of_SystemEnterSleep:	
  4427  0139                     __ptext31:	
  4428 ;; *************** function _GetTouchKeyValue *****************
  4429 ;; Defined at:
  4430 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;		None
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;  63              2    2[BANK0 ] unsigned int 
  4435 ;;  64              2    0[BANK0 ] unsigned int 
  4436 ;;  62              1    4[BANK0 ] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/200
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4446 ;;      Params:         0       0       0       0
  4447 ;;      Locals:         0       5       0       0
  4448 ;;      Temps:          0       0       0       0
  4449 ;;      Totals:         0       5       0       0
  4450 ;;Total ram usage:        5 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    3
  4453 ;; This function calls:
  4454 ;;		_ClearResSum
  4455 ;; This function is called by:
  4456 ;;		_CheckTouchKey
  4457 ;;		_SystemEnterSleep
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _GetTouchKeyValue
  4463  0139                     _GetTouchKeyValue:	
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4467  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4468  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4469  013B  01CD               	clrf	GetTouchKeyValue@62
  4470  013C  01CB               	clrf	GetTouchKeyValue@63
  4471  013D  0ACB               	incf	GetTouchKeyValue@63,f
  4472  013E  01CC               	clrf	GetTouchKeyValue@63+1
  4473  013F                     l4395:	
  4474  013F  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4475  0140  2945               	goto	l4399
  4476  0141  084B               	movf	GetTouchKeyValue@63,w
  4477  0142  3903               	andlw	3
  4478  0143  1903               	btfsc	3,2
  4479  0144  2996               	goto	l4427
  4480  0145                     l4399:	
  4481  0145  1703               	bsf	3,6	;RP1=1, select bank2
  4482  0146  0191               	clrf	17	;volatile
  4483  0147  0192               	clrf	18	;volatile
  4484  0148  3079               	movlw	121
  4485  0149  0093               	movwf	19	;volatile
  4486  014A  1303               	bcf	3,6	;RP1=0, select bank0
  4487  014B  1305               	bcf	5,6	;volatile
  4488  014C  1306               	bcf	6,6	;volatile
  4489  014D  0000               	nop	;# 
  4490  014E  0000               	nop	;# 
  4491  014F  0000               	nop	;# 
  4492  0150  0000               	nop	;# 
  4493  0151  0000               	nop	;# 
  4494  0152  0000               	nop	;# 
  4495  0153  0000               	nop	;# 
  4496  0154  0000               	nop	;# 
  4497  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4498  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0157  1705               	bsf	5,6	;volatile
  4500  0158  084D               	movf	GetTouchKeyValue@62,w
  4501  0159  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4502  015A  0084               	movwf	4
  4503  015B  158A  2028  118A   	fcall	stringdir
  4504  015E  1703               	bsf	3,6	;RP1=1, select bank2
  4505  015F  0091               	movwf	17	;volatile
  4506  0160  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0161  084D               	movf	GetTouchKeyValue@62,w
  4508  0162  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4509  0163  0084               	movwf	4
  4510  0164  158A  2028  118A   	fcall	stringdir
  4511  0167  1703               	bsf	3,6	;RP1=1, select bank2
  4512  0168  0092               	movwf	18	;volatile
  4513  0169  0000               	nop	;# 
  4514  016A  0000               	nop	;# 
  4515  016B  0000               	nop	;# 
  4516  016C  0000               	nop	;# 
  4517  016D  1283               	bcf	3,5	;RP0=0, select bank2
  4518  016E  1703               	bsf	3,6	;RP1=1, select bank2
  4519  016F  1411               	bsf	17,0	;volatile
  4520  0170  30D0               	movlw	208
  4521  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4522  0172  00C9               	movwf	GetTouchKeyValue@64
  4523  0173  3007               	movlw	7
  4524  0174  00CA               	movwf	GetTouchKeyValue@64+1
  4525  0175                     l1298:	
  4526  0175  1703               	bsf	3,6	;RP1=1, select bank2
  4527  0176  1B91               	btfsc	17,7	;volatile
  4528  0177  2984               	goto	l4425
  4529  0178  3001               	movlw	1
  4530  0179  1303               	bcf	3,6	;RP1=0, select bank0
  4531  017A  02C9               	subwf	GetTouchKeyValue@64,f
  4532  017B  1C03               	skipc
  4533  017C  03CA               	decf	GetTouchKeyValue@64+1,f
  4534  017D  0849               	movf	GetTouchKeyValue@64,w
  4535  017E  044A               	iorwf	GetTouchKeyValue@64+1,w
  4536  017F  1D03               	btfss	3,2
  4537  0180  2975               	goto	l1298
  4538  0181  30FF               	movlw	255
  4539  0182  00B4               	movwf	_KeyCounter
  4540  0183  29A1               	ljmp	l4279
  4541  0184                     l4425:	
  4542  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4543  0185  1003               	clrc
  4544  0186  0D4D               	rlf	GetTouchKeyValue@62,w
  4545  0187  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4546  0188  0084               	movwf	4
  4547  0189  1703               	bsf	3,6	;RP1=1, select bank2
  4548  018A  0816               	movf	22,w	;volatile
  4549  018B  1383               	bcf	3,7	;select IRP bank1
  4550  018C  0780               	addwf	0,f
  4551  018D  0F84               	incfsz	4,f
  4552  018E  0800               	movf	0,w
  4553  018F  1803               	skipnc
  4554  0190  0A00               	incf	0,w
  4555  0191  00FF               	movwf	127
  4556  0192  0817               	movf	23,w	;volatile
  4557  0193  077F               	addwf	127,w
  4558  0194  0080               	movwf	0
  4559  0195  0384               	decf	4,f
  4560  0196                     l4427:	
  4561  0196  3002               	movlw	2
  4562  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4563  0198  1003               	clrc
  4564  0199  0DCB               	rlf	GetTouchKeyValue@63,f
  4565  019A  0DCC               	rlf	GetTouchKeyValue@63+1,f
  4566  019B  0ACD               	incf	GetTouchKeyValue@62,f
  4567  019C  024D               	subwf	GetTouchKeyValue@62,w
  4568  019D  1C03               	skipc
  4569  019E  293F               	goto	l4395
  4570  019F  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4571  01A0  0008               	return
  4572  01A1                     __end_of_GetTouchKeyValue:	
  4573  01A1                     __ptext32:	
  4574 ;; *************** function _ClearResSum *****************
  4575 ;; Defined at:
  4576 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;		None
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  56              1    3[COMMON] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/200
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4590 ;;      Params:         0       0       0       0
  4591 ;;      Locals:         1       0       0       0
  4592 ;;      Temps:          0       0       0       0
  4593 ;;      Totals:         1       0       0       0
  4594 ;;Total ram usage:        1 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    2
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_GetTouchKeyValue
  4601 ;;		_CheckTouchKey
  4602 ;;		_SystemEnterSleep
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _ClearResSum
  4608  01A1                     _ClearResSum:	
  4609  01A1                     l4279:	
  4610                           ;incstack = 0
  4611                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4612                           
  4613  01A1  01F3               	clrf	ClearResSum@56
  4614  01A2                     l4281:	
  4615  01A2  1003               	clrc
  4616  01A3  0D73               	rlf	ClearResSum@56,w
  4617  01A4  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4618  01A5  0084               	movwf	4
  4619  01A6  3002               	movlw	2
  4620  01A7  1383               	bcf	3,7	;select IRP bank1
  4621  01A8  0180               	clrf	0
  4622  01A9  0A84               	incf	4,f
  4623  01AA  0180               	clrf	0
  4624  01AB  0AF3               	incf	ClearResSum@56,f
  4625  01AC  0273               	subwf	ClearResSum@56,w
  4626  01AD  1803               	btfsc	3,0
  4627  01AE  0008               	return
  4628  01AF  29A2               	goto	l4281
  4629  01B0                     __end_of_ClearResSum:	
  4630  01B0                     __ptext34:	
  4631 ;; *************** function _CheckOnceResult *****************
  4632 ;; Defined at:
  4633 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  71              2   10[BANK0 ] unsigned int 
  4638 ;;  72              2    7[BANK0 ] unsigned int 
  4639 ;;  73              2    4[BANK0 ] unsigned int 
  4640 ;;  68              1   12[BANK0 ] unsigned char 
  4641 ;;  69              1    9[BANK0 ] unsigned char 
  4642 ;;  70              1    6[BANK0 ] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4652 ;;      Params:         0       0       0       0
  4653 ;;      Locals:         0       9       0       0
  4654 ;;      Temps:          0       4       0       0
  4655 ;;      Totals:         0      13       0       0
  4656 ;;Total ram usage:       13 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    3
  4659 ;; This function calls:
  4660 ;;		_KeyClearOne
  4661 ;;		_KeyHave
  4662 ;;		_KeyIsIn
  4663 ;; This function is called by:
  4664 ;;		_CheckTouchKey
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _CheckOnceResult
  4670  01B0                     _CheckOnceResult:	
  4671                           
  4672                           ;incstack = 0
  4673                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4674  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  4675  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  4676  01B2  01D5               	clrf	CheckOnceResult@68
  4677  01B3  01F9               	clrf	_KeyData	;volatile
  4678  01B4  01FA               	clrf	_KeyData+1	;volatile
  4679  01B5  01B3               	clrf	_KeyMaxSub
  4680  01B6                     l4671:	
  4681  01B6  0855               	movf	CheckOnceResult@68,w
  4682  01B7  3907               	andlw	7
  4683  01B8  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4684  01B9  0084               	movwf	4
  4685  01BA  158A  2028  118A   	fcall	stringdir
  4686  01BD  00CF               	movwf	CheckOnceResult@70
  4687  01BE  1003               	clrc
  4688  01BF  0D55               	rlf	CheckOnceResult@68,w
  4689  01C0  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4690  01C1  0084               	movwf	4
  4691  01C2  3003               	movlw	3
  4692  01C3                     u5025:	
  4693  01C3  0A84               	incf	4,f
  4694  01C4  1003               	clrc
  4695  01C5  1383               	bcf	3,7	;select IRP bank1
  4696  01C6  0C80               	rrf	0,f
  4697  01C7  0384               	decf	4,f
  4698  01C8  0C80               	rrf	0,f
  4699  01C9  3EFF               	addlw	-1
  4700  01CA  1D03               	skipz
  4701  01CB  29C3               	goto	u5025
  4702  01CC  1003               	clrc
  4703  01CD  0D55               	rlf	CheckOnceResult@68,w
  4704  01CE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4705  01CF  0084               	movwf	4
  4706  01D0  0800               	movf	0,w
  4707  01D1  00D3               	movwf	CheckOnceResult@71
  4708  01D2  0A84               	incf	4,f
  4709  01D3  0800               	movf	0,w
  4710  01D4  00D4               	movwf	CheckOnceResult@71+1
  4711  01D5  0855               	movf	CheckOnceResult@68,w
  4712  01D6  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4713  01D7  0084               	movwf	4
  4714  01D8  158A  2028  118A   	fcall	stringdir
  4715  01DB  00D2               	movwf	CheckOnceResult@69
  4716  01DC  00D0               	movwf	CheckOnceResult@72
  4717  01DD  01D1               	clrf	CheckOnceResult@72+1
  4718  01DE  0853               	movf	CheckOnceResult@71,w
  4719  01DF  07D0               	addwf	CheckOnceResult@72,f
  4720  01E0  1803               	skipnc
  4721  01E1  0AD1               	incf	CheckOnceResult@72+1,f
  4722  01E2  0854               	movf	CheckOnceResult@71+1,w
  4723  01E3  07D1               	addwf	CheckOnceResult@72+1,f
  4724  01E4  0855               	movf	CheckOnceResult@68,w
  4725  01E5  2291  118A         	fcall	_KeyIsIn
  4726  01E7  3A00               	xorlw	0
  4727  01E8  1003               	clrc
  4728  01E9  1D03               	skipz
  4729  01EA  2A45               	goto	L16
  4730  01EB  0D55               	rlf	CheckOnceResult@68,w
  4731  01EC  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4732  01ED  0084               	movwf	4
  4733  01EE  1383               	bcf	3,7	;select IRP bank1
  4734  01EF  0800               	movf	0,w
  4735  01F0  00CD               	movwf	CheckOnceResult@73
  4736  01F1  0A84               	incf	4,f
  4737  01F2  0800               	movf	0,w
  4738  01F3  00CE               	movwf	CheckOnceResult@73+1
  4739  01F4  1003               	clrc
  4740  01F5  0D55               	rlf	CheckOnceResult@68,w
  4741  01F6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4742  01F7  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4743  01F9  0251               	subwf	CheckOnceResult@72+1,w
  4744  01FA  1D03               	skipz
  4745  01FB  29FE               	goto	u5045
  4746  01FC  0849               	movf	??_CheckOnceResult,w
  4747  01FD  0250               	subwf	CheckOnceResult@72,w
  4748  01FE                     u5045:	
  4749  01FE  1803               	skipnc
  4750  01FF  2A0D               	goto	l4689
  4751  0200  1003               	clrc
  4752  0201  0D55               	rlf	CheckOnceResult@68,w
  4753  0202  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4754  0203  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4755  0205  0853               	movf	CheckOnceResult@71,w
  4756  0206  0249               	subwf	??_CheckOnceResult,w
  4757  0207  00D3               	movwf	CheckOnceResult@71
  4758  0208  0854               	movf	CheckOnceResult@71+1,w
  4759  0209  1C03               	skipc
  4760  020A  0A54               	incf	CheckOnceResult@71+1,w
  4761  020B  024A               	subwf	??_CheckOnceResult+1,w
  4762  020C  2A31               	goto	L14
  4763  020D                     l4689:	
  4764  020D  084E               	movf	CheckOnceResult@73+1,w
  4765  020E  0251               	subwf	CheckOnceResult@72+1,w
  4766  020F  1D03               	skipz
  4767  0210  2A13               	goto	u5055
  4768  0211  084D               	movf	CheckOnceResult@73,w
  4769  0212  0250               	subwf	CheckOnceResult@72,w
  4770  0213                     u5055:	
  4771  0213  1803               	skipnc
  4772  0214  2A89               	goto	l4735
  4773  0215  1003               	clrc
  4774  0216  0D55               	rlf	CheckOnceResult@68,w
  4775  0217  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4776  0218  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4777  021A  0251               	subwf	CheckOnceResult@72+1,w
  4778  021B  1D03               	skipz
  4779  021C  2A1F               	goto	u5065
  4780  021D  0849               	movf	??_CheckOnceResult,w
  4781  021E  0250               	subwf	CheckOnceResult@72,w
  4782  021F                     u5065:	
  4783  021F  1803               	skipnc
  4784  0220  2A89               	goto	l4735
  4785  0221  1003               	clrc
  4786  0222  0D55               	rlf	CheckOnceResult@68,w
  4787  0223  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4788  0224  0084               	movwf	4
  4789  0225  084D               	movf	CheckOnceResult@73,w
  4790  0226  0080               	movwf	0
  4791  0227  0A84               	incf	4,f
  4792  0228  084E               	movf	CheckOnceResult@73+1,w
  4793  0229  0080               	movwf	0
  4794  022A  0853               	movf	CheckOnceResult@71,w
  4795  022B  024D               	subwf	CheckOnceResult@73,w
  4796  022C  00D3               	movwf	CheckOnceResult@71
  4797  022D  0854               	movf	CheckOnceResult@71+1,w
  4798  022E  1C03               	skipc
  4799  022F  0A54               	incf	CheckOnceResult@71+1,w
  4800  0230  024E               	subwf	CheckOnceResult@73+1,w
  4801  0231                     L14:	
  4802  0231  00D4               	movwf	CheckOnceResult@71+1
  4803  0232  0855               	movf	CheckOnceResult@68,w
  4804  0233  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4805  0234  0084               	movwf	4
  4806  0235  0180               	clrf	0
  4807  0236  0854               	movf	CheckOnceResult@71+1,w
  4808  0237  1903               	btfsc	3,2
  4809  0238  2A3B               	goto	l4703
  4810  0239  30FF               	movlw	255
  4811  023A  2A3C               	goto	L15
  4812  023B                     l4703:	
  4813  023B  0853               	movf	CheckOnceResult@71,w
  4814  023C                     L15:	
  4815  023C  00D2               	movwf	CheckOnceResult@69
  4816  023D  0233               	subwf	_KeyMaxSub,w
  4817  023E  1803               	skipnc
  4818  023F  2A43               	goto	l4709
  4819  0240  0852               	movf	CheckOnceResult@69,w
  4820  0241  00B3               	movwf	_KeyMaxSub
  4821  0242  2A83               	goto	l4733
  4822  0243                     l4709:	
  4823  0243  0AB4               	incf	_KeyCounter,f
  4824  0244  2A89               	goto	l4735
  4825  0245                     L16:	
  4826  0245  0D55               	rlf	CheckOnceResult@68,w
  4827  0246  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4828  0247  0084               	movwf	4
  4829  0248  1383               	bcf	3,7	;select IRP bank1
  4830  0249  0800               	movf	0,w
  4831  024A  00C9               	movwf	??_CheckOnceResult
  4832  024B  0A84               	incf	4,f
  4833  024C  0800               	movf	0,w
  4834  024D  00CA               	movwf	??_CheckOnceResult+1
  4835  024E  0849               	movf	??_CheckOnceResult,w
  4836  024F  3E01               	addlw	1
  4837  0250  00CB               	movwf	??_CheckOnceResult+2
  4838  0251  084A               	movf	??_CheckOnceResult+1,w
  4839  0252  1803               	skipnc
  4840  0253  3E01               	addlw	1
  4841  0254  00CC               	movwf	??_CheckOnceResult+3
  4842  0255  0851               	movf	CheckOnceResult@72+1,w
  4843  0256  024C               	subwf	??_CheckOnceResult+3,w
  4844  0257  1D03               	skipz
  4845  0258  2A5B               	goto	u5095
  4846  0259  0850               	movf	CheckOnceResult@72,w
  4847  025A  024B               	subwf	??_CheckOnceResult+2,w
  4848  025B                     u5095:	
  4849  025B  1C03               	btfss	3,0
  4850  025C  2A89               	goto	l4735
  4851  025D  1003               	clrc
  4852  025E  0D55               	rlf	CheckOnceResult@68,w
  4853  025F  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4854  0260  0084               	movwf	4
  4855  0261  0800               	movf	0,w
  4856  0262  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4857  0264  1C03               	skipc
  4858  0265  2A6F               	goto	l4723
  4859  0266  1003               	clrc
  4860  0267  0D55               	rlf	CheckOnceResult@68,w
  4861  0268  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4862  0269  0084               	movwf	4
  4863  026A  0800               	movf	0,w
  4864  026B  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4865  026D  1803               	skipnc
  4866  026E  2A7B               	goto	l4727
  4867  026F                     l4723:	
  4868  026F  0855               	movf	CheckOnceResult@68,w
  4869  0270  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4870  0271  0084               	movwf	4
  4871  0272  3009               	movlw	9
  4872  0273  0A80               	incf	0,f
  4873  0274  0200               	subwf	0,w
  4874  0275  1C03               	skipc
  4875  0276  2A7F               	goto	l4731
  4876  0277  0855               	movf	CheckOnceResult@68,w
  4877  0278  22A5  118A         	fcall	_KeyClearOne
  4878  027A  2A89               	goto	l4735
  4879  027B                     l4727:	
  4880  027B  0855               	movf	CheckOnceResult@68,w
  4881  027C  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4882  027D  0084               	movwf	4
  4883  027E  0180               	clrf	0
  4884  027F                     l4731:	
  4885  027F  087A               	movf	_KeyData+1,w	;volatile
  4886  0280  0479               	iorwf	_KeyData,w	;volatile
  4887  0281  1D03               	btfss	3,2
  4888  0282  2A89               	goto	l4735
  4889  0283                     l4733:	
  4890  0283  084F               	movf	CheckOnceResult@70,w
  4891  0284  00F3               	movwf	KeyHave@59
  4892  0285  01F4               	clrf	KeyHave@59+1
  4893  0286  0855               	movf	CheckOnceResult@68,w
  4894  0287  22BA  118A         	fcall	_KeyHave
  4895  0289                     l4735:	
  4896  0289  3002               	movlw	2
  4897  028A  1283               	bcf	3,5	;RP0=0, select bank0
  4898  028B  1303               	bcf	3,6	;RP1=0, select bank0
  4899  028C  0AD5               	incf	CheckOnceResult@68,f
  4900  028D  0255               	subwf	CheckOnceResult@68,w
  4901  028E  1803               	btfsc	3,0
  4902  028F  0008               	return
  4903  0290  29B6               	goto	l4671
  4904  0291                     __end_of_CheckOnceResult:	
  4905  0291                     __ptext38:	
  4906 ;; *************** function _KeyIsIn *****************
  4907 ;; Defined at:
  4908 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  45              1    wreg     unsigned char 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  45              1    4[COMMON] unsigned char 
  4913 ;;  46              1    3[COMMON] unsigned char 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      unsigned char 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 300/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4923 ;;      Params:         0       0       0       0
  4924 ;;      Locals:         2       0       0       0
  4925 ;;      Temps:          0       0       0       0
  4926 ;;      Totals:         2       0       0       0
  4927 ;;Total ram usage:        2 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    2
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_KeyClearIn
  4934 ;;		_CheckOnceResult
  4935 ;;		_CheckKeyOldValue
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _KeyIsIn
  4941  0291                     _KeyIsIn:	
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4945                           ;KeyIsIn@45 stored from wreg
  4946  0291  00F4               	movwf	KeyIsIn@45
  4947  0292  3907               	andlw	7
  4948  0293  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4949  0294  0084               	movwf	4
  4950  0295  158A  2028  118A   	fcall	stringdir
  4951  0298  00F3               	movwf	KeyIsIn@46
  4952  0299  1DF4               	btfss	KeyIsIn@45,3
  4953  029A  2A9F               	goto	l3039
  4954  029B  1283               	bcf	3,5	;RP0=0, select bank0
  4955  029C  1303               	bcf	3,6	;RP1=0, select bank0
  4956  029D  082F               	movf	_KeyFlag+1,w	;volatile
  4957  029E  2AA2               	goto	L21
  4958  029F                     l3039:	
  4959  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4960  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  4961  02A1  082E               	movf	_KeyFlag,w	;volatile
  4962  02A2                     L21:	
  4963  02A2  05F3               	andwf	KeyIsIn@46,f
  4964  02A3  0873               	movf	KeyIsIn@46,w
  4965  02A4  0008               	return
  4966  02A5                     __end_of_KeyIsIn:	
  4967  02A5                     __ptext36:	
  4968 ;; *************** function _KeyClearOne *****************
  4969 ;; Defined at:
  4970 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  49              1    wreg     unsigned char 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;  49              1    3[COMMON] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4984 ;;      Params:         0       0       0       0
  4985 ;;      Locals:         1       0       0       0
  4986 ;;      Temps:          0       0       0       0
  4987 ;;      Totals:         1       0       0       0
  4988 ;;Total ram usage:        1 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    2
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_KeyClearIn
  4995 ;;		_KeyStopClear
  4996 ;;		_CheckOnceResult
  4997 ;;		_SystemEnterSleep
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           
  5002                           ;psect for function _KeyClearOne
  5003  02A5                     _KeyClearOne:	
  5004                           
  5005                           ;incstack = 0
  5006                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  5007                           ;KeyClearOne@49 stored from wreg
  5008  02A5  00F3               	movwf	KeyClearOne@49
  5009  02A6  1003               	clrc
  5010  02A7  0D73               	rlf	KeyClearOne@49,w
  5011  02A8  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5012  02A9  0084               	movwf	4
  5013  02AA  1383               	bcf	3,7	;select IRP bank1
  5014  02AB  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5015  02AD  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5016  02AE  0084               	movwf	4
  5017  02AF  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5018  02B1  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5019  02B2  0084               	movwf	4
  5020  02B3  23E7               	fcall	PL22	;call to abstracted procedure
  5021  02B4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5022  02B5  0084               	movwf	4
  5023  02B6  0180               	clrf	0
  5024  02B7  0A84               	incf	4,f
  5025  02B8  0180               	clrf	0	;# 
  5026  02B9  0008               	return
  5027  02BA                     __end_of_KeyClearOne:	
  5028  02BA                     __ptext35:	
  5029 ;; *************** function _KeyHave *****************
  5030 ;; Defined at:
  5031 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  58              1    wreg     unsigned char 
  5034 ;;  59              2    3[COMMON] unsigned int 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  58              1    5[COMMON] unsigned char 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      void 
  5039 ;; Registers used:
  5040 ;;		wreg, status,2, status,0
  5041 ;; Tracked objects:
  5042 ;;		On entry : B00/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5046 ;;      Params:         2       0       0       0
  5047 ;;      Locals:         1       0       0       0
  5048 ;;      Temps:          0       0       0       0
  5049 ;;      Totals:         3       0       0       0
  5050 ;;Total ram usage:        3 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    2
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_CheckOnceResult
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           
  5061                           ;psect for function _KeyHave
  5062  02BA                     _KeyHave:	
  5063                           
  5064                           ;incstack = 0
  5065                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5066                           ;KeyHave@58 stored from wreg
  5067  02BA  00F5               	movwf	KeyHave@58
  5068  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  5069  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  5070  02BD  0AB4               	incf	_KeyCounter,f
  5071  02BE  01F9               	clrf	_KeyData	;volatile
  5072  02BF  01FA               	clrf	_KeyData+1	;volatile
  5073  02C0  1DF5               	btfss	KeyHave@58,3
  5074  02C1  2AC5               	goto	l3191
  5075  02C2  0873               	movf	KeyHave@59,w
  5076  02C3  00FA               	movwf	_KeyData+1	;volatile
  5077  02C4  0008               	return
  5078  02C5                     l3191:	
  5079  02C5  0873               	movf	KeyHave@59,w
  5080  02C6  00F9               	movwf	_KeyData	;volatile
  5081  02C7  0008               	return
  5082  02C8                     __end_of_KeyHave:	
  5083  02C8                     __ptext37:	
  5084 ;; *************** function _CheckKeyOldValue *****************
  5085 ;; Defined at:
  5086 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  80              2    2[BANK0 ] unsigned int 
  5091 ;;  79              2    0[BANK0 ] unsigned int 
  5092 ;;  78              1    4[BANK0 ] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5102 ;;      Params:         0       0       0       0
  5103 ;;      Locals:         0       5       0       0
  5104 ;;      Temps:          2       0       0       0
  5105 ;;      Totals:         2       5       0       0
  5106 ;;Total ram usage:        7 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    3
  5109 ;; This function calls:
  5110 ;;		_KeyIsIn
  5111 ;; This function is called by:
  5112 ;;		_CheckTouchKey
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           
  5117                           ;psect for function _CheckKeyOldValue
  5118  02C8                     _CheckKeyOldValue:	
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5122  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5123  02C9  3004               	movlw	4
  5124  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5125  02CB  01CD               	clrf	CheckKeyOldValue@78
  5126  02CC  0AB2               	incf	CheckKeyOldValue@F77,f
  5127  02CD  0232               	subwf	CheckKeyOldValue@F77,w
  5128  02CE  1C03               	btfss	3,0
  5129  02CF  0008               	return
  5130  02D0  01B2               	clrf	CheckKeyOldValue@F77
  5131  02D1                     l3621:	
  5132  02D1  1003               	clrc
  5133  02D2  0D4D               	rlf	CheckKeyOldValue@78,w
  5134  02D3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5135  02D4  0084               	movwf	4
  5136  02D5  1383               	bcf	3,7	;select IRP bank1
  5137  02D6  0800               	movf	0,w
  5138  02D7  00C9               	movwf	CheckKeyOldValue@79
  5139  02D8  0A84               	incf	4,f
  5140  02D9  0800               	movf	0,w
  5141  02DA  00CA               	movwf	CheckKeyOldValue@79+1
  5142  02DB  084D               	movf	CheckKeyOldValue@78,w
  5143  02DC  2291  118A         	fcall	_KeyIsIn
  5144  02DE  3A00               	xorlw	0
  5145  02DF  1003               	clrc
  5146  02E0  1D03               	skipz
  5147  02E1  2B16               	goto	L20
  5148  02E2  0D4D               	rlf	CheckKeyOldValue@78,w
  5149  02E3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5150  02E4  0084               	movwf	4
  5151  02E5  1383               	bcf	3,7	;select IRP bank1
  5152  02E6  239B  118A         	fcall	PL2	;call to abstracted procedure
  5153  02E8  1903               	skipnz
  5154  02E9  024B               	subwf	CheckKeyOldValue@80,w
  5155  02EA  1C03               	skipc
  5156  02EB  2AF2               	goto	L17
  5157  02EC  0F4B               	incfsz	CheckKeyOldValue@80,w
  5158  02ED  2B15               	goto	l1339
  5159  02EE  0A4C               	incf	CheckKeyOldValue@80+1,w
  5160  02EF  1003               	clrc
  5161  02F0  1D03               	btfss	3,2
  5162  02F1  2B16               	goto	L20
  5163  02F2                     L17:	
  5164  02F2  0D4D               	rlf	CheckKeyOldValue@78,w
  5165  02F3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5166  02F4  0084               	movwf	4
  5167  02F5  239B  118A         	fcall	PL2	;call to abstracted procedure
  5168  02F7  1903               	skipnz
  5169  02F8  024B               	subwf	CheckKeyOldValue@80,w
  5170  02F9  1C03               	skipc
  5171  02FA  2B01               	goto	L18
  5172  02FB  0F4B               	incfsz	CheckKeyOldValue@80,w
  5173  02FC  2B15               	goto	l1339
  5174  02FD  0A4C               	incf	CheckKeyOldValue@80+1,w
  5175  02FE  1003               	clrc
  5176  02FF  1D03               	btfss	3,2
  5177  0300  2B16               	goto	L20
  5178  0301                     L18:	
  5179  0301  0D4D               	rlf	CheckKeyOldValue@78,w
  5180  0302  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5181  0303  0084               	movwf	4
  5182  0304  239B  118A         	fcall	PL2	;call to abstracted procedure
  5183  0306  1903               	skipnz
  5184  0307  024B               	subwf	CheckKeyOldValue@80,w
  5185  0308  1C03               	skipc
  5186  0309  2B10               	goto	L19
  5187  030A  0F4B               	incfsz	CheckKeyOldValue@80,w
  5188  030B  2B15               	goto	l1339
  5189  030C  0A4C               	incf	CheckKeyOldValue@80+1,w
  5190  030D  1003               	clrc
  5191  030E  1D03               	btfss	3,2
  5192  030F  2B16               	goto	L20
  5193  0310                     L19:	
  5194  0310  0D4D               	rlf	CheckKeyOldValue@78,w
  5195  0311  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5196  0312  0084               	movwf	4
  5197  0313  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5198  0315                     l1339:	
  5199  0315  1003               	clrc
  5200  0316                     L20:	
  5201  0316  0D4D               	rlf	CheckKeyOldValue@78,w
  5202  0317  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5203  0318  0084               	movwf	4
  5204  0319  1383               	bcf	3,7	;select IRP bank0
  5205  031A  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5206  031C  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5207  031D  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5208  031F  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5209  0321  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5210  0322  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5211  0324  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5212  0326  3002               	movlw	2
  5213  0327  0ACD               	incf	CheckKeyOldValue@78,f
  5214  0328  024D               	subwf	CheckKeyOldValue@78,w
  5215  0329  1803               	btfsc	3,0
  5216  032A  0008               	return
  5217  032B  2AD1               	goto	l3621
  5218  032C                     __end_of_CheckKeyOldValue:	
  5219  032C                     __ptext30:	
  5220 ;; *************** function _KeyStopClear *****************
  5221 ;; Defined at:
  5222 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  53              1    4[COMMON] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5236 ;;      Params:         0       0       0       0
  5237 ;;      Locals:         1       0       0       0
  5238 ;;      Temps:          0       0       0       0
  5239 ;;      Totals:         1       0       0       0
  5240 ;;Total ram usage:        1 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    3
  5243 ;; This function calls:
  5244 ;;		_KeyClearOne
  5245 ;; This function is called by:
  5246 ;;		_CheckTouchKey
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           
  5251                           ;psect for function _KeyStopClear
  5252  032C                     _KeyStopClear:	
  5253                           
  5254                           ;incstack = 0
  5255                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5256  032C  1283               	bcf	3,5	;RP0=0, select bank0
  5257  032D  1303               	bcf	3,6	;RP1=0, select bank0
  5258  032E  01AE               	clrf	_KeyFlag	;volatile
  5259  032F  01AF               	clrf	_KeyFlag+1	;volatile
  5260  0330  01F4               	clrf	KeyStopClear@53
  5261  0331                     l3533:	
  5262  0331  1003               	clrc
  5263  0332  0D74               	rlf	KeyStopClear@53,w
  5264  0333  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5265  0334  0084               	movwf	4
  5266  0335  1383               	bcf	3,7	;select IRP bank1
  5267  0336  0180               	clrf	0
  5268  0337  0A84               	incf	4,f
  5269  0338  0180               	clrf	0
  5270  0339  0874               	movf	KeyStopClear@53,w
  5271  033A  22A5  118A         	fcall	_KeyClearOne
  5272  033C  3002               	movlw	2
  5273  033D  0AF4               	incf	KeyStopClear@53,f
  5274  033E  0274               	subwf	KeyStopClear@53,w
  5275  033F  1803               	btfsc	3,0
  5276  0340  0008               	return
  5277  0341  2B31               	goto	l3533
  5278  0342                     __end_of_KeyStopClear:	
  5279  0342                     __ptext28:	
  5280 ;; *************** function _TurnKeyFlags *****************
  5281 ;; Defined at:
  5282 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      void 
  5289 ;; Registers used:
  5290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5296 ;;      Params:         0       0       0       0
  5297 ;;      Locals:         0       0       0       0
  5298 ;;      Temps:          0       0       0       0
  5299 ;;      Totals:         0       0       0       0
  5300 ;;Total ram usage:        0 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    4
  5303 ;; This function calls:
  5304 ;;		_KeyClearIn
  5305 ;; This function is called by:
  5306 ;;		_CheckTouchKey
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _TurnKeyFlags
  5312  0342                     _TurnKeyFlags:	
  5313                           
  5314                           ;incstack = 0
  5315                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5316  0342  087A               	movf	_KeyData+1,w	;volatile
  5317  0343  0479               	iorwf	_KeyData,w	;volatile
  5318  0344  1903               	btfsc	3,2
  5319  0345  2B66               	goto	l3681
  5320  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5321  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5322  0348  01B0               	clrf	TurnKeyFlags@F84
  5323  0349  0879               	movf	_KeyData,w	;volatile
  5324  034A  0624               	xorwf	_KeyOldData,w	;volatile
  5325  034B  1D03               	skipz
  5326  034C  2B5F               	goto	l1357
  5327  034D  087A               	movf	_KeyData+1,w	;volatile
  5328  034E  0625               	xorwf	_KeyOldData+1,w	;volatile
  5329  034F  1D03               	skipz
  5330  0350  2B5F               	goto	l1357
  5331  0351  3002               	movlw	2
  5332  0352  0AB1               	incf	TurnKeyFlags@F83,f
  5333  0353  0231               	subwf	TurnKeyFlags@F83,w
  5334  0354  1C03               	skipc
  5335  0355  0008               	return
  5336  0356  01B1               	clrf	TurnKeyFlags@F83
  5337  0357  0879               	movf	_KeyData,w	;volatile
  5338  0358  00AE               	movwf	_KeyFlag	;volatile
  5339  0359  087A               	movf	_KeyData+1,w	;volatile
  5340  035A  00AF               	movwf	_KeyFlag+1	;volatile
  5341  035B  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5342  035C  0008               	return
  5343  035D  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5344  035E  2B8B               	ljmp	l3165
  5345  035F                     l1357:	
  5346  035F  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5347  0360  0879               	movf	_KeyData,w	;volatile
  5348  0361  00A4               	movwf	_KeyOldData	;volatile
  5349  0362  087A               	movf	_KeyData+1,w	;volatile
  5350  0363  00A5               	movwf	_KeyOldData+1	;volatile
  5351  0364  01B1               	clrf	TurnKeyFlags@F83
  5352  0365  0008               	return
  5353  0366                     l3681:	
  5354  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5355  0367  1303               	bcf	3,6	;RP1=0, select bank0
  5356  0368  01B1               	clrf	TurnKeyFlags@F83
  5357  0369  01A4               	clrf	_KeyOldData	;volatile
  5358  036A  01A5               	clrf	_KeyOldData+1	;volatile
  5359  036B  3002               	movlw	2
  5360  036C  0AB0               	incf	TurnKeyFlags@F84,f
  5361  036D  0230               	subwf	TurnKeyFlags@F84,w
  5362  036E  1C03               	skipc
  5363  036F  0008               	return
  5364  0370  01B0               	clrf	TurnKeyFlags@F84
  5365  0371  01AE               	clrf	_KeyFlag	;volatile
  5366  0372  01AF               	clrf	_KeyFlag+1	;volatile
  5367  0373  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5368  0374  0008               	return
  5369  0375                     __end_of_TurnKeyFlags:	
  5370  0375                     __ptext33:	
  5371 ;; *************** function _CheckValidTime *****************
  5372 ;; Defined at:
  5373 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5387 ;;      Params:         0       0       0       0
  5388 ;;      Locals:         0       0       0       0
  5389 ;;      Temps:          0       0       0       0
  5390 ;;      Totals:         0       0       0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    2
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_CheckTouchKey
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _CheckValidTime
  5403  0375                     _CheckValidTime:	
  5404  0375                     l3691:	
  5405                           ;incstack = 0
  5406                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5407                           
  5408  0375  1283               	bcf	3,5	;RP0=0, select bank0
  5409  0376  1303               	bcf	3,6	;RP1=0, select bank0
  5410  0377  082F               	movf	_KeyFlag+1,w	;volatile
  5411  0378  042E               	iorwf	_KeyFlag,w	;volatile
  5412  0379  1903               	btfsc	3,2
  5413  037A  2B87               	goto	l3697
  5414  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5415  037C  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5416  037D  1903               	skipnz
  5417  037E  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5418  037F  303A               	movlw	58
  5419  0380  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5420  0381  3098               	movlw	152
  5421  0382  1903               	skipnz
  5422  0383  0230               	subwf	CheckValidTime@F87^(0+128),w
  5423  0384  1C03               	skipc
  5424  0385  0008               	return
  5425  0386  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5426  0387                     l3697:	
  5427  0387  1683               	bsf	3,5	;RP0=1, select bank1
  5428  0388  01B0               	clrf	CheckValidTime@F87^(0+128)
  5429  0389  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5430  038A  0008               	return
  5431  038B                     __end_of_CheckValidTime:	
  5432  038B                     __ptext29:	
  5433 ;; *************** function _KeyClearIn *****************
  5434 ;; Defined at:
  5435 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  51              1    5[COMMON] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      void 
  5442 ;; Registers used:
  5443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5444 ;; Tracked objects:
  5445 ;;		On entry : 300/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5449 ;;      Params:         0       0       0       0
  5450 ;;      Locals:         1       0       0       0
  5451 ;;      Temps:          0       0       0       0
  5452 ;;      Totals:         1       0       0       0
  5453 ;;Total ram usage:        1 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    3
  5456 ;; This function calls:
  5457 ;;		_KeyClearOne
  5458 ;;		_KeyIsIn
  5459 ;; This function is called by:
  5460 ;;		_TurnKeyFlags
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           
  5465                           ;psect for function _KeyClearIn
  5466  038B                     _KeyClearIn:	
  5467  038B                     l3165:	
  5468                           ;incstack = 0
  5469                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5470                           
  5471  038B  01F5               	clrf	KeyClearIn@51
  5472  038C                     l3171:	
  5473  038C  0875               	movf	KeyClearIn@51,w
  5474  038D  2291  118A         	fcall	_KeyIsIn
  5475  038F  3A00               	xorlw	0
  5476  0390  1D03               	skipz
  5477  0391  2B95               	goto	l3175
  5478  0392  0875               	movf	KeyClearIn@51,w
  5479  0393  22A5  118A         	fcall	_KeyClearOne
  5480  0395                     l3175:	
  5481  0395  3002               	movlw	2
  5482  0396  0AF5               	incf	KeyClearIn@51,f
  5483  0397  0275               	subwf	KeyClearIn@51,w
  5484  0398  1803               	btfsc	3,0
  5485  0399  0008               	return
  5486  039A  2B8C               	goto	l3171
  5487  039B                     __end_of_KeyClearIn:	
  5488  039B                     PL2:	
  5489  039B  0800               	movf	0,w
  5490  039C  00CB               	movwf	CheckKeyOldValue@80
  5491  039D  0A84               	incf	4,f
  5492  039E  0800               	movf	0,w
  5493  039F  00CC               	movwf	CheckKeyOldValue@80+1
  5494  03A0  0849               	movf	CheckKeyOldValue@79,w
  5495  03A1  02CB               	subwf	CheckKeyOldValue@80,f
  5496  03A2  084A               	movf	CheckKeyOldValue@79+1,w
  5497  03A3  1C03               	skipc
  5498  03A4  03CC               	decf	CheckKeyOldValue@80+1,f
  5499  03A5  02CC               	subwf	CheckKeyOldValue@80+1,f
  5500  03A6  3000               	movlw	0
  5501  03A7  024C               	subwf	CheckKeyOldValue@80+1,w
  5502  03A8  3402               	retlw	2
  5503  03A9                     __end_ofPL2:	
  5504  03A9                     PL4:	
  5505  03A9  00C9               	movwf	??_CheckOnceResult
  5506  03AA  0A84               	incf	4,f
  5507  03AB  0800               	movf	0,w
  5508  03AC  00CA               	movwf	??_CheckOnceResult+1
  5509  03AD  0852               	movf	CheckOnceResult@69,w
  5510  03AE  0749               	addwf	??_CheckOnceResult,w
  5511  03AF  00CB               	movwf	??_CheckOnceResult+2
  5512  03B0  084A               	movf	??_CheckOnceResult+1,w
  5513  03B1  1803               	skipnc
  5514  03B2  0A4A               	incf	??_CheckOnceResult+1,w
  5515  03B3  00CC               	movwf	??_CheckOnceResult+3
  5516  03B4  0854               	movf	CheckOnceResult@71+1,w
  5517  03B5  024C               	subwf	??_CheckOnceResult+3,w
  5518  03B6  1D03               	skipz
  5519  03B7  0008               	return
  5520  03B8  0853               	movf	CheckOnceResult@71,w
  5521  03B9  024B               	subwf	??_CheckOnceResult+2,w
  5522  03BA  0008               	return
  5523  03BB                     __end_ofPL4:	
  5524  03BB                     PL8:	
  5525  03BB  0084               	movwf	4
  5526  03BC  0800               	movf	0,w
  5527  03BD  00C9               	movwf	??_CheckOnceResult
  5528  03BE  0A84               	incf	4,f
  5529  03BF  0800               	movf	0,w
  5530  03C0  00CA               	movwf	??_CheckOnceResult+1
  5531  03C1  0008               	return
  5532  03C2                     __end_ofPL8:	
  5533  03C2                     PL10:	
  5534  03C2  0084               	movwf	4
  5535  03C3  0874               	movf	??_SystemEnterSleep,w
  5536  03C4  0080               	movwf	0
  5537  03C5  0A84               	incf	4,f
  5538  03C6  0875               	movf	??_SystemEnterSleep+1,w
  5539  03C7  0080               	movwf	0
  5540  03C8  1003               	clrc
  5541  03C9  0D54               	rlf	SystemEnterSleep@91,w
  5542  03CA  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5543  03CB  0084               	movwf	4
  5544  03CC  0008               	return
  5545  03CD                     __end_ofPL10:	
  5546  03CD                     PL12:	
  5547  03CD  0084               	movwf	4
  5548  03CE  0875               	movf	??_CheckKeyOldValue,w
  5549  03CF  0080               	movwf	0
  5550  03D0  0A84               	incf	4,f
  5551  03D1  0876               	movf	??_CheckKeyOldValue+1,w
  5552  03D2  0080               	movwf	0
  5553  03D3  1003               	clrc
  5554  03D4  0D4D               	rlf	CheckKeyOldValue@78,w
  5555  03D5  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5556  03D6  0084               	movwf	4
  5557  03D7  0008               	return
  5558  03D8                     __end_ofPL12:	
  5559  03D8                     PL16:	
  5560  03D8  0084               	movwf	4
  5561  03D9  0800               	movf	0,w
  5562  03DA  00F4               	movwf	??_SystemEnterSleep
  5563  03DB  0A84               	incf	4,f
  5564  03DC  0800               	movf	0,w
  5565  03DD  00F5               	movwf	??_SystemEnterSleep+1
  5566  03DE  0008               	return
  5567  03DF                     __end_ofPL16:	
  5568  03DF                     PL20:	
  5569  03DF  0800               	movf	0,w
  5570  03E0  00F5               	movwf	??_CheckKeyOldValue
  5571  03E1  0A84               	incf	4,f
  5572  03E2  0800               	movf	0,w
  5573  03E3  00F6               	movwf	??_CheckKeyOldValue+1
  5574  03E4  1003               	clrc
  5575  03E5  0D4D               	rlf	CheckKeyOldValue@78,w
  5576  03E6  0008               	return
  5577  03E7                     __end_ofPL20:	
  5578  03E7                     PL22:	
  5579  03E7  0180               	clrf	0
  5580  03E8  0A84               	incf	4,f
  5581  03E9  0180               	clrf	0
  5582  03EA  1003               	clrc
  5583  03EB  0D73               	rlf	KeyClearOne@49,w
  5584  03EC  0008               	return
  5585  03ED                     __end_ofPL22:	
  5586  03ED                     PL24:	
  5587  03ED  3041               	movlw	65
  5588  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  5589  03EF  0095               	movwf	21	;volatile
  5590  03F0  1415               	bsf	21,0	;volatile
  5591  03F1  0196               	clrf	22	;volatile
  5592  03F2  0008               	return
  5593  03F3                     __end_ofPL24:	
  5594  03F3                     PL30:	
  5595  03F3  0849               	movf	CheckKeyOldValue@79,w
  5596  03F4  0080               	movwf	0
  5597  03F5  0A84               	incf	4,f
  5598  03F6  084A               	movf	CheckKeyOldValue@79+1,w
  5599  03F7  0080               	movwf	0
  5600  03F8  0008               	return
  5601  03F9                     __end_ofPL30:	
  5602  03F9                     PL34:	
  5603  03F9  01D4               	clrf	SystemEnterSleep@91
  5604  03FA  01D2               	clrf	SystemEnterSleep@92
  5605  03FB  0AD2               	incf	SystemEnterSleep@92,f
  5606  03FC  01D3               	clrf	SystemEnterSleep@92+1
  5607  03FD  0008               	return
  5608  03FE                     __end_ofPL34:	
  5609  03FE                     PL36:	
  5610  03FE  0DD2               	rlf	SystemEnterSleep@92,f
  5611  03FF  0DD3               	rlf	SystemEnterSleep@92+1,f
  5612  0400  0AD4               	incf	SystemEnterSleep@91,f
  5613  0401  0254               	subwf	SystemEnterSleep@91,w
  5614  0402  0008               	return
  5615  0403                     __end_ofPL36:	
  5616  0403                     __ptext24:	
  5617 ;; *************** function _Refurbish_Sfr *****************
  5618 ;; Defined at:
  5619 ;;		line 117 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0
  5628 ;; Tracked objects:
  5629 ;;		On entry : 200/0
  5630 ;;		On exit  : 300/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5633 ;;      Params:         0       0       0       0
  5634 ;;      Locals:         0       0       0       0
  5635 ;;      Temps:          0       0       0       0
  5636 ;;      Totals:         0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    2
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_WorkSleep
  5644 ;;		_main
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _Refurbish_Sfr
  5650  0403                     _Refurbish_Sfr:	
  5651                           
  5652                           ;main.c: 120: PIE1 = 2;
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5656  0403  3002               	movlw	2
  5657  0404  1283               	bcf	3,5	;RP0=0, select bank0
  5658  0405  008E               	movwf	14	;volatile
  5659                           
  5660                           ;main.c: 121: PR2 = 250;
  5661  0406  30FA               	movlw	250
  5662  0407  0091               	movwf	17	;volatile
  5663                           
  5664                           ;main.c: 122: INTCON = 0XC0;
  5665  0408  30C0               	movlw	192
  5666  0409  008B               	movwf	11	;volatile
  5667                           
  5668                           ;main.c: 123: if (4 != T2CON)
  5669  040A  3004               	movlw	4
  5670  040B  0613               	xorwf	19,w	;volatile
  5671  040C  1903               	btfsc	3,2
  5672  040D  0008               	return
  5673                           
  5674                           ;main.c: 124: T2CON = 4;
  5675  040E  3004               	movlw	4
  5676  040F  0093               	movwf	19	;volatile
  5677  0410  0008               	return
  5678  0411                     __end_of_Refurbish_Sfr:	
  5679                           
  5680                           	psect	text39
  5681  0E55                     __ptext39:	
  5682 ;; *************** function _Isr_Timer *****************
  5683 ;; Defined at:
  5684 ;;		line 201 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;		None
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;		None
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      void 
  5691 ;; Registers used:
  5692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 300/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5698 ;;      Params:         0       0       0       0
  5699 ;;      Locals:         0       0       0       0
  5700 ;;      Temps:          3       0       0       0
  5701 ;;      Totals:         3       0       0       0
  5702 ;;Total ram usage:        3 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    1
  5705 ;; This function calls:
  5706 ;;		_ledShow
  5707 ;; This function is called by:
  5708 ;;		Interrupt level 1
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _Isr_Timer
  5714  0E55                     _Isr_Timer:	
  5715                           
  5716                           ;main.c: 203: if(TMR2IF)
  5717  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5718  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5719  0E57  1C8D               	btfss	13,1	;volatile
  5720  0E58  2E76               	goto	i1l4211
  5721                           
  5722                           ;main.c: 204: {
  5723                           ;main.c: 205: TMR2IF = 0;
  5724  0E59  108D               	bcf	13,1	;volatile
  5725                           
  5726                           ;main.c: 206: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  5727  0E5A  086C               	movf	_firstTime,w
  5728  0E5B  1D03               	btfss	3,2
  5729  0E5C  2E65               	goto	i1l4199
  5730  0E5D  0844               	movf	_workStep,w
  5731  0E5E  1D03               	btfss	3,2
  5732  0E5F  2E65               	goto	i1l4199
  5733  0E60  0843               	movf	_wuhuaFlag,w
  5734  0E61  1903               	btfsc	3,2
  5735  0E62  083F               	movf	_chrgFlag,w
  5736  0E63  1903               	btfsc	3,2
  5737  0E64  2E67               	goto	i1l4201
  5738  0E65                     i1l4199:	
  5739                           
  5740                           ;main.c: 207: {
  5741                           ;main.c: 208: ledShow();
  5742  0E65  2680  158A         	fcall	_ledShow
  5743  0E67                     i1l4201:	
  5744                           
  5745                           ;main.c: 209: }
  5746                           ;main.c: 210: if(++MainTime >= 64)
  5747  0E67  3040               	movlw	64
  5748  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5749  0E69  0AC6               	incf	_MainTime,f	;volatile
  5750  0E6A  0246               	subwf	_MainTime,w	;volatile
  5751  0E6B  1C03               	skipc
  5752  0E6C  2E77               	goto	i1l980
  5753                           
  5754                           ;main.c: 211: {
  5755                           ;main.c: 212: MainTime = 0;
  5756  0E6D  01C6               	clrf	_MainTime	;volatile
  5757                           
  5758                           ;main.c: 213: B_MainLoop = 1;
  5759  0E6E  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5760                           
  5761                           ;main.c: 214: if(++count1s >= 250)
  5762  0E6F  30FA               	movlw	250
  5763  0E70  0AC5               	incf	_count1s,f
  5764  0E71  0245               	subwf	_count1s,w
  5765  0E72  1C03               	skipc
  5766  0E73  2E77               	goto	i1l980
  5767                           
  5768                           ;main.c: 215: {
  5769                           ;main.c: 216: count1s = 0;
  5770  0E74  01C5               	clrf	_count1s
  5771  0E75  2E77               	goto	i1l980
  5772  0E76                     i1l4211:	
  5773                           
  5774                           ;main.c: 220: else
  5775                           ;main.c: 221: {
  5776                           ;main.c: 222: PIR1 = 0;
  5777  0E76  018D               	clrf	13	;volatile
  5778  0E77                     i1l980:	
  5779  0E77  0872               	movf	??_Isr_Timer+2,w
  5780  0E78  008A               	movwf	10
  5781  0E79  0871               	movf	??_Isr_Timer+1,w
  5782  0E7A  0084               	movwf	4
  5783  0E7B  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5784  0E7C  0083               	movwf	3
  5785  0E7D  0EFE               	swapf	126,f
  5786  0E7E  0E7E               	swapf	126,w
  5787  0E7F  0009               	retfie
  5788  0E80                     __end_of_Isr_Timer:	
  5789  0E80                     __ptext40:	
  5790 ;; *************** function _ledShow *****************
  5791 ;; Defined at:
  5792 ;;		line 375 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5801 ;; Tracked objects:
  5802 ;;		On entry : 300/0
  5803 ;;		On exit  : 200/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5806 ;;      Params:         0       0       0       0
  5807 ;;      Locals:         0       0       0       0
  5808 ;;      Temps:          0       0       0       0
  5809 ;;      Totals:         0       0       0       0
  5810 ;;Total ram usage:        0 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_Isr_Timer
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           
  5820                           ;psect for function _ledShow
  5821  0E80                     _ledShow:	
  5822                           
  5823                           ;main.c: 378: if(++ledCnt > 19)
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  5827  0E80  3014               	movlw	20
  5828  0E81  0ABB               	incf	_ledCnt,f
  5829  0E82  023B               	subwf	_ledCnt,w
  5830  0E83  1803               	btfsc	3,0
  5831                           
  5832                           ;main.c: 379: {
  5833                           ;main.c: 380: ledCnt = 0;
  5834  0E84  01BB               	clrf	_ledCnt
  5835                           
  5836                           ;main.c: 382: }
  5837                           ;main.c: 383: PORTA &= 0xE4;
  5838                           
  5839                           ;main.c: 384: PORTB &= 0xEF;
  5840                           
  5841                           ;main.c: 385: TRISA |= 0x1B;
  5842                           
  5843                           ;main.c: 386: TRISB |= 0x10;
  5844  0E85  118A  27F4  158A   	fcall	PL14	;call to abstracted procedure
  5845                           
  5846                           ;main.c: 387: switch(ledCnt)
  5847  0E88  2F18               	goto	i1l3965
  5848  0E89                     i1l1012:	
  5849                           ;main.c: 391: case 1:
  5850                           
  5851                           
  5852                           ;main.c: 392: if(showNumShi & 0x01)
  5853  0E89  1C6E               	btfss	_showNumShi,0
  5854  0E8A  0008               	return
  5855                           
  5856                           ;main.c: 393: {
  5857                           ;main.c: 394: TRISA &= 0xFE;
  5858  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  5859  0E8C  1005               	bcf	5,0	;volatile
  5860                           
  5861                           ;main.c: 395: TRISA &= 0xEF;
  5862  0E8D  1205               	bcf	5,4	;volatile
  5863                           
  5864                           ;main.c: 396: RA4 = 1;
  5865  0E8E  1606               	bsf	6,4	;volatile
  5866  0E8F  0008               	return
  5867  0E90                     i1l1014:	
  5868                           ;main.c: 399: case 2:
  5869                           
  5870                           
  5871                           ;main.c: 400: if(showNumShi & 0x02)
  5872  0E90  1CEE               	btfss	_showNumShi,1
  5873  0E91  0008               	return
  5874                           
  5875                           ;main.c: 401: {
  5876                           ;main.c: 402: TRISA &= 0xFE;
  5877  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  5878  0E93  1005               	bcf	5,0	;volatile
  5879                           
  5880                           ;main.c: 403: TRISA &= 0xF7;
  5881  0E94  1185               	bcf	5,3	;volatile
  5882                           
  5883                           ;main.c: 404: RA3 = 1;
  5884  0E95  1586               	bsf	6,3	;volatile
  5885  0E96  0008               	return
  5886  0E97                     i1l1016:	
  5887                           ;main.c: 407: case 3:
  5888                           
  5889                           
  5890                           ;main.c: 408: if(showNumShi & 0x04)
  5891  0E97  1D6E               	btfss	_showNumShi,2
  5892  0E98  0008               	return
  5893                           
  5894                           ;main.c: 409: {
  5895                           ;main.c: 410: TRISA &= 0xFE;
  5896  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  5897  0E9A  1005               	bcf	5,0	;volatile
  5898                           
  5899                           ;main.c: 411: TRISA &= 0xFD;
  5900  0E9B  1085               	bcf	5,1	;volatile
  5901                           
  5902                           ;main.c: 412: RA1 = 1;
  5903  0E9C  1486               	bsf	6,1	;volatile
  5904  0E9D  0008               	return
  5905  0E9E                     i1l1018:	
  5906                           ;main.c: 415: case 4:
  5907                           
  5908                           
  5909                           ;main.c: 416: if(showNumShi & 0x08)
  5910  0E9E  1DEE               	btfss	_showNumShi,3
  5911  0E9F  0008               	return
  5912                           
  5913                           ;main.c: 417: {
  5914                           ;main.c: 418: TRISA &= 0xFE;
  5915  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  5916  0EA1  1005               	bcf	5,0	;volatile
  5917                           
  5918                           ;main.c: 419: TRISB &= 0xEF;
  5919                           
  5920                           ;main.c: 420: RB4 = 1;
  5921  0EA2  2F25               	ljmp	PL28	;call to abstracted procedure
  5922  0EA3                     i1l1020:	
  5923                           ;main.c: 423: case 5:
  5924                           
  5925                           
  5926                           ;main.c: 424: if(showNumShi & 0x10)
  5927  0EA3  1E6E               	btfss	_showNumShi,4
  5928  0EA4  0008               	return
  5929                           
  5930                           ;main.c: 425: {
  5931                           ;main.c: 426: TRISA &= 0xEF;
  5932  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  5933  0EA6  1205               	bcf	5,4	;volatile
  5934                           
  5935                           ;main.c: 427: TRISA &= 0xFE;
  5936  0EA7  1005               	bcf	5,0	;volatile
  5937                           
  5938                           ;main.c: 428: RA0 = 1;
  5939  0EA8  1406               	bsf	6,0	;volatile
  5940  0EA9  0008               	return
  5941  0EAA                     i1l1022:	
  5942                           ;main.c: 431: case 6:
  5943                           
  5944                           
  5945                           ;main.c: 432: if(showNumShi & 0x20)
  5946  0EAA  1EEE               	btfss	_showNumShi,5
  5947  0EAB  0008               	return
  5948                           
  5949                           ;main.c: 433: {
  5950                           ;main.c: 434: TRISA &= 0xEF;
  5951  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  5952  0EAD  1205               	bcf	5,4	;volatile
  5953                           
  5954                           ;main.c: 435: TRISA &= 0xF7;
  5955  0EAE  1185               	bcf	5,3	;volatile
  5956                           
  5957                           ;main.c: 436: RA3 = 1;
  5958  0EAF  1586               	bsf	6,3	;volatile
  5959  0EB0  0008               	return
  5960  0EB1                     i1l1024:	
  5961                           ;main.c: 439: case 7:
  5962                           
  5963                           
  5964                           ;main.c: 440: if(showNumShi & 0x40)
  5965  0EB1  1F6E               	btfss	_showNumShi,6
  5966  0EB2  0008               	return
  5967                           
  5968                           ;main.c: 441: {
  5969                           ;main.c: 442: TRISA &= 0xEF;
  5970  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  5971  0EB4  1205               	bcf	5,4	;volatile
  5972                           
  5973                           ;main.c: 443: TRISA &= 0xFD;
  5974  0EB5  1085               	bcf	5,1	;volatile
  5975                           
  5976                           ;main.c: 444: RA1 = 1;
  5977  0EB6  1486               	bsf	6,1	;volatile
  5978  0EB7  0008               	return
  5979  0EB8                     i1l1026:	
  5980                           ;main.c: 447: case 8:
  5981                           
  5982                           
  5983                           ;main.c: 448: if(showNumGe & 0x01)
  5984  0EB8  1C6D               	btfss	_showNumGe,0
  5985  0EB9  0008               	return
  5986                           
  5987                           ;main.c: 449: {
  5988                           ;main.c: 450: TRISA &= 0xEF;
  5989  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  5990  0EBB  1205               	bcf	5,4	;volatile
  5991                           
  5992                           ;main.c: 451: TRISB &= 0xEF;
  5993                           
  5994                           ;main.c: 452: RB4 = 1;
  5995  0EBC  2F25               	ljmp	PL28	;call to abstracted procedure
  5996  0EBD                     i1l1028:	
  5997                           ;main.c: 455: case 9:
  5998                           
  5999                           
  6000                           ;main.c: 456: if(showNumGe & 0x02)
  6001  0EBD  1CED               	btfss	_showNumGe,1
  6002  0EBE  0008               	return
  6003                           
  6004                           ;main.c: 457: {
  6005                           ;main.c: 458: TRISA &= 0xF7;
  6006  0EBF  1683               	bsf	3,5	;RP0=1, select bank1
  6007  0EC0  1185               	bcf	5,3	;volatile
  6008                           
  6009                           ;main.c: 459: TRISA &= 0xFE;
  6010  0EC1  1005               	bcf	5,0	;volatile
  6011                           
  6012                           ;main.c: 460: RA0 = 1;
  6013  0EC2  1406               	bsf	6,0	;volatile
  6014  0EC3  0008               	return
  6015  0EC4                     i1l1030:	
  6016                           ;main.c: 463: case 10:
  6017                           
  6018                           
  6019                           ;main.c: 464: if(showNumGe & 0x04)
  6020  0EC4  1D6D               	btfss	_showNumGe,2
  6021  0EC5  0008               	return
  6022                           
  6023                           ;main.c: 465: {
  6024                           ;main.c: 466: TRISA &= 0xF7;
  6025  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  6026  0EC7  1185               	bcf	5,3	;volatile
  6027                           
  6028                           ;main.c: 467: TRISA &= 0xEF;
  6029  0EC8  1205               	bcf	5,4	;volatile
  6030                           
  6031                           ;main.c: 468: RA4 = 1;
  6032  0EC9  1606               	bsf	6,4	;volatile
  6033  0ECA  0008               	return
  6034  0ECB                     i1l1032:	
  6035                           ;main.c: 471: case 11:
  6036                           
  6037                           
  6038                           ;main.c: 472: if(showNumGe & 0x08)
  6039  0ECB  1DED               	btfss	_showNumGe,3
  6040  0ECC  0008               	return
  6041                           
  6042                           ;main.c: 473: {
  6043                           ;main.c: 474: TRISA &= 0xF7;
  6044  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  6045  0ECE  1185               	bcf	5,3	;volatile
  6046                           
  6047                           ;main.c: 475: TRISA &= 0xFD;
  6048  0ECF  1085               	bcf	5,1	;volatile
  6049                           
  6050                           ;main.c: 476: RA1 = 1;
  6051  0ED0  1486               	bsf	6,1	;volatile
  6052  0ED1  0008               	return
  6053  0ED2                     i1l1034:	
  6054                           ;main.c: 479: case 12:
  6055                           
  6056                           
  6057                           ;main.c: 480: if(showNumGe & 0x10)
  6058  0ED2  1E6D               	btfss	_showNumGe,4
  6059  0ED3  0008               	return
  6060                           
  6061                           ;main.c: 481: {
  6062                           ;main.c: 482: TRISA &= 0xF7;
  6063  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  6064  0ED5  1185               	bcf	5,3	;volatile
  6065                           
  6066                           ;main.c: 483: TRISB &= 0xEF;
  6067                           
  6068                           ;main.c: 484: RB4 = 1;
  6069  0ED6  2F25               	ljmp	PL28	;call to abstracted procedure
  6070  0ED7                     i1l1036:	
  6071                           ;main.c: 487: case 13:
  6072                           
  6073                           
  6074                           ;main.c: 488: if(showNumGe & 0x20)
  6075  0ED7  1EED               	btfss	_showNumGe,5
  6076  0ED8  0008               	return
  6077                           
  6078                           ;main.c: 489: {
  6079                           ;main.c: 490: TRISA &= 0xFD;
  6080  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  6081  0EDA  1085               	bcf	5,1	;volatile
  6082                           
  6083                           ;main.c: 491: TRISA &= 0xFE;
  6084  0EDB  1005               	bcf	5,0	;volatile
  6085                           
  6086                           ;main.c: 492: RA0 = 1;
  6087  0EDC  1406               	bsf	6,0	;volatile
  6088  0EDD  0008               	return
  6089  0EDE                     i1l1038:	
  6090                           ;main.c: 495: case 14:
  6091                           
  6092                           
  6093                           ;main.c: 496: if(showNumGe & 0x40)
  6094  0EDE  1F6D               	btfss	_showNumGe,6
  6095  0EDF  0008               	return
  6096                           
  6097                           ;main.c: 497: {
  6098                           ;main.c: 498: TRISA &= 0xFD;
  6099  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  6100  0EE1  1085               	bcf	5,1	;volatile
  6101                           
  6102                           ;main.c: 499: TRISA &= 0xEF;
  6103  0EE2  1205               	bcf	5,4	;volatile
  6104                           
  6105                           ;main.c: 500: RA4 = 1;
  6106  0EE3  1606               	bsf	6,4	;volatile
  6107  0EE4  0008               	return
  6108  0EE5                     i1l3941:	
  6109                           
  6110                           ;main.c: 504: if(firstTime || showNumGe || showNumShi)
  6111  0EE5  086C               	movf	_firstTime,w
  6112  0EE6  1D03               	btfss	3,2
  6113  0EE7  2EED               	goto	i1l1043
  6114  0EE8  086D               	movf	_showNumGe,w
  6115  0EE9  1903               	btfsc	3,2
  6116  0EEA  086E               	movf	_showNumShi,w
  6117  0EEB  1903               	btfsc	3,2
  6118  0EEC  0008               	return
  6119  0EED                     i1l1043:	
  6120                           
  6121                           ;main.c: 505: {
  6122                           ;main.c: 506: TRISA &= 0xFD;
  6123  0EED  1683               	bsf	3,5	;RP0=1, select bank1
  6124  0EEE  1085               	bcf	5,1	;volatile
  6125                           
  6126                           ;main.c: 507: TRISA &= 0xF7;
  6127  0EEF  1185               	bcf	5,3	;volatile
  6128                           
  6129                           ;main.c: 508: RA3 = 1;
  6130  0EF0  1586               	bsf	6,3	;volatile
  6131  0EF1  0008               	return
  6132  0EF2                     i1l3947:	
  6133                           
  6134                           ;main.c: 512: if(firstTime > 0 || wuhuaFlag > 0)
  6135  0EF2  086C               	movf	_firstTime,w
  6136  0EF3  1903               	btfsc	3,2
  6137  0EF4  0843               	movf	_wuhuaFlag,w
  6138  0EF5  1903               	btfsc	3,2
  6139  0EF6  0008               	return
  6140                           
  6141                           ;main.c: 513: {
  6142                           ;main.c: 514: TRISA &= 0xFD;
  6143  0EF7  1683               	bsf	3,5	;RP0=1, select bank1
  6144  0EF8  1085               	bcf	5,1	;volatile
  6145                           
  6146                           ;main.c: 515: TRISB &= 0xEF;
  6147                           
  6148                           ;main.c: 516: RB4 = 1;
  6149  0EF9  2F25               	ljmp	PL28	;call to abstracted procedure
  6150  0EFA                     i1l3951:	
  6151                           
  6152                           ;main.c: 520: if(firstTime > 0 ||workStep > 0)
  6153  0EFA  086C               	movf	_firstTime,w
  6154  0EFB  1903               	btfsc	3,2
  6155  0EFC  0844               	movf	_workStep,w
  6156  0EFD  1903               	btfsc	3,2
  6157  0EFE  0008               	return
  6158                           
  6159                           ;main.c: 521: {
  6160                           ;main.c: 522: TRISB &= 0xEF;
  6161  0EFF  1205               	bcf	5,4	;volatile
  6162                           
  6163                           ;main.c: 523: TRISA &= 0xFE;
  6164  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  6165  0F01  1005               	bcf	5,0	;volatile
  6166                           
  6167                           ;main.c: 524: RA0 = 1;
  6168  0F02  1406               	bsf	6,0	;volatile
  6169  0F03  0008               	return
  6170  0F04                     i1l3955:	
  6171                           
  6172                           ;main.c: 528: if(firstTime > 0 ||fanKeyFlag > 0)
  6173  0F04  086C               	movf	_firstTime,w
  6174  0F05  1903               	btfsc	3,2
  6175  0F06  083A               	movf	_fanKeyFlag,w
  6176  0F07  1903               	btfsc	3,2
  6177  0F08  0008               	return
  6178                           
  6179                           ;main.c: 529: {
  6180                           ;main.c: 530: TRISB &= 0xEF;
  6181  0F09  1205               	bcf	5,4	;volatile
  6182                           
  6183                           ;main.c: 531: TRISA &= 0xEF;
  6184  0F0A  1683               	bsf	3,5	;RP0=1, select bank1
  6185  0F0B  1205               	bcf	5,4	;volatile
  6186                           
  6187                           ;main.c: 532: RA4 = 1;
  6188  0F0C  1606               	bsf	6,4	;volatile
  6189  0F0D  0008               	return
  6190  0F0E                     i1l3959:	
  6191                           
  6192                           ;main.c: 536: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  6193  0F0E  086C               	movf	_firstTime,w
  6194  0F0F  1903               	btfsc	3,2
  6195  0F10  0839               	movf	_wuhuaKeyFlag,w
  6196  0F11  1903               	btfsc	3,2
  6197  0F12  0008               	return
  6198                           
  6199                           ;main.c: 537: {
  6200                           ;main.c: 538: TRISB &= 0xEF;
  6201  0F13  1205               	bcf	5,4	;volatile
  6202                           
  6203                           ;main.c: 539: TRISA &= 0xFD;
  6204  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  6205  0F15  1085               	bcf	5,1	;volatile
  6206                           
  6207                           ;main.c: 540: RA1 = 1;
  6208  0F16  1486               	bsf	6,1	;volatile
  6209  0F17  0008               	return
  6210  0F18                     i1l3965:	
  6211  0F18  083B               	movf	_ledCnt,w
  6212                           
  6213                           ; Switch size 1, requested type "space"
  6214                           ; Number of cases is 20, Range of values is 0 to 19
  6215                           ; switch strategies available:
  6216                           ; Name         Instructions Cycles
  6217                           ; direct_byte           47     7 (fixed)
  6218                           ; simple_byte           61    31 (average)
  6219                           ; jumptable            260     6 (fixed)
  6220                           ;	Chosen strategy is direct_byte
  6221  0F19  0084               	movwf	4
  6222  0F1A  3014               	movlw	20
  6223  0F1B  0204               	subwf	4,w
  6224  0F1C  1803               	skipnc
  6225  0F1D  0008               	return
  6226  0F1E  3008               	movlw	high i1S5093
  6227  0F1F  008A               	movwf	10
  6228  0F20  1003               	clrc
  6229  0F21  0D04               	rlf	4,w
  6230  0F22  3E00               	addlw	low i1S5093
  6231  0F23  0082               	movwf	2
  6232  0F24                     i1l1061:	
  6233  0F24  0008               	return
  6234  0F25                     __end_of_ledShow:	
  6235  007E                     btemp	set	126	;btemp
  6236  007E                     wtemp0	set	126
  6237  0F25                     PL28:	
  6238  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  6239  0F26  1205               	bcf	5,4	;volatile
  6240  0F27  1606               	bsf	6,4	;volatile
  6241  0F28  0008               	return
  6242  0F29                     __end_ofPL28:	
  6243                           
  6244                           	psect	intentry
  6245  0004                     __pintentry:	
  6246                           ;incstack = 0
  6247                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6248                           
  6249  0004                     interrupt_function:	
  6250  007E                     saved_w	set	btemp
  6251  0004  00FE               	movwf	btemp
  6252  0005  0E03               	swapf	3,w
  6253  0006  00F0               	movwf	??_Isr_Timer
  6254  0007  0804               	movf	4,w
  6255  0008  00F1               	movwf	??_Isr_Timer+1
  6256  0009  080A               	movf	10,w
  6257  000A  00F2               	movwf	??_Isr_Timer+2
  6258  000B  158A  2E55         	ljmp	_Isr_Timer
  6259                           
  6260                           	psect	swtext1
  6261  0800                     __pswtext1:	
  6262  0800                     i1S5093:	
  6263  0800  158A  2F24         	ljmp	i1l1061
  6264  0802  158A  2E89         	ljmp	i1l1012
  6265  0804  158A  2E90         	ljmp	i1l1014
  6266  0806  158A  2E97         	ljmp	i1l1016
  6267  0808  158A  2E9E         	ljmp	i1l1018
  6268  080A  158A  2EA3         	ljmp	i1l1020
  6269  080C  158A  2EAA         	ljmp	i1l1022
  6270  080E  158A  2EB1         	ljmp	i1l1024
  6271  0810  158A  2EB8         	ljmp	i1l1026
  6272  0812  158A  2EBD         	ljmp	i1l1028
  6273  0814  158A  2EC4         	ljmp	i1l1030
  6274  0816  158A  2ECB         	ljmp	i1l1032
  6275  0818  158A  2ED2         	ljmp	i1l1034
  6276  081A  158A  2ED7         	ljmp	i1l1036
  6277  081C  158A  2EDE         	ljmp	i1l1038
  6278  081E  158A  2EE5         	ljmp	i1l3941
  6279  0820  158A  2EF2         	ljmp	i1l3947
  6280  0822  158A  2EFA         	ljmp	i1l3951
  6281  0824  158A  2F04         	ljmp	i1l3955
  6282  0826  158A  2F0E         	ljmp	i1l3959


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         73
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      79
    BANK1            80      4      34
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_ClearResSum
    _SystemEnterSleep->_KeyClearOne
    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12877
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     538
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     939
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     939
                                              4 COMMON     2     2      0
                                              5 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3268
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              5 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              4 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     263
                                              0 BANK0      5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      65
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              5 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (4) _KeyIsIn                                              2     2      0      69
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (6) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      22       6       42.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7C       9        0.0%
ABS                  0      0      7C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 16 17:23:50 2025

                        pc 0002                         PL2 039B                         PL4 03A9  
                       PL6 078C                         PL8 03BB              ??_KeyClearOne 0073  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0073  
                      PL10 03C2                        PL20 03DF                        PL12 03CD  
                      PL30 03F3                        PL22 03E7                        PL14 07F4  
                      PL40 07B4                        PL32 07AB                        PL24 03ED  
                      PL16 03D8                        PL34 03F9                        PL26 07A4  
                      PL18 079B                        PL36 03FE                        PL28 0F25  
                      PL38 07AF                        l994 0514                        _RA0 0430  
                      _RA1 0431                        _RA3 0433                        _RA4 0434  
                      _RB4 0034                        _RB6 0036                        _PR2 0011  
      __size_of_ADC_Sample 00D0                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0849         ??_GetTouchKeyValue 0074  
             ___ftdiv@cntr 0058               ___ftdiv@sign 005D                       l1000 0550  
                     l1004 0596                       l1102 0E06                       l1113 072A  
                     l1107 070C                       l1070 0F49                       l1071 0F45  
                     l1073 0F47                       l1086 0FBB                       l1418 06BE  
                     l1339 0315                       l1357 035F                       l4101 0DEE  
                     l3039 029F                       l3311 0E51                       l3303 0E3D  
                     l4103 0DF0                       l1376 008A                       l4113 0DFF  
                     l1617 05CD                       l1298 0175                       l3171 038C  
                     l5011 0099                       l4115 0E00                       l1563 0684  
                     l1388 00A9                       l3165 038B                       l5021 00A2  
                     l3191 02C5                       l3175 0395                       l1575 06A8  
                     l4311 04FE                       l3281 0E24                       l4321 051E  
                     l4305 04FD                       l5019 009E                       l5027 00A8  
                     l5035 07C1                       l3621 02D1                       l3533 0331  
                     l1669 0E2A                       l3429 0E0A                       l4333 0544  
                     l3295 0E37                       l4335 054C                       l5071 07F0  
                     l4281 01A2                       l4425 0184                       l4345 059A  
                     l4329 0539                       l4427 0196                       l4523 00D6  
                     l4451 0690                       l4435 06D4                       l4611 0486  
                     l4453 0698                       l4373 0755                       l4613 0488  
                     l4357 077B                       l4703 023B                       l4279 01A1  
                     l4535 00DD                       l4447 0688                       l4295 04F2  
                     l4367 0787                       l3681 0366                       l4553 0111  
                     l4457 06A6                       l4449 068B                       l4801 0647  
                     l4297 04F4                       l4633 04CF                       l4625 04BB  
                     l4731 027F                       l4723 026F                       l3691 0375  
                     l4395 013F                       l4459 069D                       l4643 04DB  
                     l4635 04D1                       l4475 073D                       l4483 0750  
                     l4651 0765                       l4733 0283                       l4709 0243  
                     l4549 010A                       l4741 05BF                       l4813 0663  
                     l4645 04DC                       l4581 0709                       l4727 027B  
                     l4735 0289                       l4671 01B6                       l4399 0145  
                     l3863 0DA4                       l4807 064B                       l4639 04D7  
                     l4663 0779                       l3697 0387                       l3873 0DB6  
                     l4569 0132                       l4913 0F62                       l4809 0655  
                     l4593 0728                       l4665 077A                       l4657 076E  
                     l3859 0D9F                       l3875 0DB8                       l4851 0046  
                     l4827 0FE4                       l4931 0F92                       l4763 05E0  
                     l4595 072D                       l4587 070E                       l4579 0707  
                     l3885 0DC4                       l4933 0F95                       l4909 0F4C  
                     l4781 0621                       l3895 0DD2                       l4839 0FFB  
                     l4943 0FAC                       l4919 0F78                       l4689 020D  
                     l3889 0DC9                       l3897 0DD4                       l4945 0FAF  
                     l3899 0DD7                       l4779 061C                       l4885 0079  
                     l4797 063F                       l4991 046F                       l4897 0F2F  
                     l4985 0466                       l4977 044B                       l4987 0469  
                     _ADON 04A8                       _CHS4 04B6                       _PIE1 000E  
                     _PIE2 0110                       u5025 01C3                       u5045 01FE  
                     u5205 0624                       u5055 0213                       u5065 021F  
                     u4515 05A3                       _RAIF 006B                       u4445 053F  
                     _INTF 0059                       u5095 025B                       u5175 05EE  
                     u4455 054A                       _RBIE 005B                       _RBIF 0058  
                     u4705 0743                       u5525 0FCC                       u5295 0FED  
                     u4495 058B                       _PIR1 000D                       _PIR2 010F  
                     u5707 04EE                       u4925 04AC                       u4775 0106  
                     _TMR0 0081                       _WPUB 0008                       _main 07B9  
             ___ftpack@arg 0073               ___ftpack@exp 0076                       _time 00BA  
                     btemp 007E              ?_KeyStopClear 0070                       start 000D  
             _TurnKeyFlags 0342            __end_of_KeyIsIn 02A5            __end_of_KeyHave 02C8  
             ___fttol@exp1 006A              ??_Init_System 0073               ___fttol@lval 0066  
          TurnKeyFlags@F83 0031            TurnKeyFlags@F84 0030                      ?_main 0070  
          __end_of___lbdiv 0E39            __end_of___lbmod 0E55            __end_of___ftdiv 0613  
          __end_of___fttol 066C                      _IOCB0 0048                      _T2CON 0013  
 __end_of_SystemEnterSleep 0139            __end_of___lwdiv 1000            __end_of___lwmod 0755  
                    i1l980 0E77                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 0761                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 0765            __end_of_chrgCtr 0E0A  
      ___lmul@multiplicand 004D        __end_of_KeyClearOne 02BA            __end_of_ledShow 0F25  
               _KeyClearIn 038B             fanCtr@fan_temp 0057              ___ftpack@sign 0077  
           __pbitbssCOMMON 03C0                      pclath 000A            __end_of_pwmInit 0787  
              _ClearResSum 01A1                 _KeyCounter 0034                 _KeyOldData 0024  
          __end_of_pwmStop 078C             ??_KeyStopClear 0074                      status 0003  
                    wtemp0 007E            __end_of_workCtr 0474            ___lbdiv@divisor 0073  
               _KeyUpShake 00BC            ___lbdiv@counter 0075            __initialization 000F  
             __end_of_main 07F4                     ??_main 0078              ___fttol@sign1 0065  
      __end_of_Init_System 0041                     _ADCON0 0095                     _ADCON1 0096  
                   i1S5093 0800                     _ADRESH 0099                     _ADRESL 0098  
         __end_of___ftpack 06BA                     _GODONE 04A9                     i1l1020 0EA3  
                   i1l1012 0E89                     i1l1030 0EC4                     i1l1022 0EAA  
                   i1l1014 0E90                     i1l1032 0ECB                     i1l1024 0EB1  
                   i1l1016 0E97                     i1l1034 0ED2                     i1l1026 0EB8  
                   i1l1018 0E9E                     i1l1043 0EED                     i1l1036 0ED7  
                   i1l1028 0EBD                     i1l1061 0F24                     i1l1038 0EDE  
                   i1l4201 0E67                     i1l4211 0E76                     i1l4199 0E65  
                   i1l3941 0EE5                     i1l3951 0EFA                     i1l3955 0F04  
                   i1l3947 0EF2                     i1l3965 0F18                     i1l3959 0F0E  
                   _LDO_EN 04B2                     _INTCON 000B           __end_of___lwtoft 067C  
       __size_of_KeyServer 0053                     _OSCCON 0014                     _TMR2IF 0069  
                   _PWMD0L 0019                     _PWMD1L 001A               ??_ADC_Sample 0074  
                   _TRISB0 0028                     _TRISB6 002E                  ??_KeyIsIn 0073  
                ??_KeyHave 0075              ClearResSum@56 0073         __size_of_Isr_Timer 002B  
__size_of_CheckKeyOldValue 0064                     ___lmul 06BA                     _b_kclr 03C2  
                   _b_kerr 03C1                     _fanCtr 0474                  ??___lbdiv 0074  
                ??___lbmod 0074                  ??___ftdiv 0055                  ??___fttol 0062  
                   _ledCnt 003B                  ??___lwdiv 0077                  ??___lwmod 0077  
             _wuhuaKeyFlag 0039                  ??_fanInit 0073                  ??_fanStop 0073  
              _KeyClearOne 02A5                  ??_chrgCtr 0078                     _result 00B2  
                ??_ledShow 0070           __end_of_numArray 083B              _Table_KeyFalg 083B  
            _Table_KeyDown 0843         __end_of_ADC_Sample 05B1                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0073                  ??_pwmStop 0073  
              ?_KeyClearIn 0070                  ??_workCtr 0078            _CheckOnceResult 01B0  
         ___lbdiv@dividend 0074           __end_of_wuhuaCtr 077B            ___lbmod@divisor 0073  
  __end_of__initialization 0021            ___lbmod@counter 0076         __size_of_WorkSleep 003B  
        CheckOnceResult@70 004F          CheckOnceResult@71 0053          CheckOnceResult@72 0050  
        CheckOnceResult@73 004D          CheckOnceResult@68 0055          CheckOnceResult@69 0052  
               ___ftdiv@f1 0052                 ___ftdiv@f2 004F                 ___ftdiv@f3 0059  
               ___fttol@f1 005E             __pcstackCOMMON 0070               __pidataBANK0 0000  
              _Init_System 0024                 __end_ofPL2 03A9                 __end_ofPL4 03BB  
               __end_ofPL6 079B                 __end_ofPL8 03C2           ___lbdiv@quotient 0076  
        __end_of_KeyServer 0DD9                 ___lwtoft@c 004C       __end_of_KeyStopClear 0342  
        __end_of_Isr_Timer 0E80                 _fanKeyFlag 003A         __size_of_keyLedCtr 0044  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 003E  
__size_of_GetTouchKeyValue 0068               _chrgFullTime 003D              _CheckTouchKey 007C  
               __pmaintext 07B9                    ?___lmul 0049                    ?_fanCtr 0070  
               __pintentry 0004        __size_of_KeyClearIn 0010             ___lmul@product 0073  
                ?___ftpack 0073          __end_of_WorkSleep 007C                  ?___lwtoft 004C  
        ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0291                    _KEYCON0 0111  
                  _KEYCON1 0112                    _KEYCON2 0113                 _curBatStep 0037  
       ??_SystemEnterSleep 0074                    _B_OnOff 03C5                    _PWMD01H 001E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D       __end_of_Table_KeyCap 0847                 __stringtab 0828  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 002E  
                  _KeyIsIn 0291                    _KeyHave 02BA             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0073            ADC_Sample@admax 0052            ADC_Sample@admin 0050  
          ADC_Sample@adsum 004C           _CheckKeyOldValue 02C8                    ___lbdiv 0E1E  
          __size_of___lmul 0033                    ___lbmod 0E39                    ___ftdiv 05B1  
          __size_of_fanCtr 006D                    ___fttol 0613                    ___lwdiv 0FD6  
                  ___lwmod 0731          __end_of_keyLedCtr 0731                    _b_kover 03C4  
                  _fanInit 0755                    _fanDuty 0042                    _fanStop 0761  
               ??___ftpack 0049                    _chrgCtr 0DD9                    __ptext1 0411  
                  __ptext2 0765                    __ptext3 0787                    __ptext4 077B  
                  __ptext5 06ED                    __ptext6 0731                    __ptext7 0474  
                  __ptext8 0761                    __ptext9 0755                 _lowBatLock 003C  
                  _ledShow 0E80                 _lowBatTime 00B6                  ?_wuhuaCtr 0070  
               ??___lwtoft 0078                    _count1s 0045                 _setBatStep 0F29  
                  _pwmInit 077B                    _pwmStop 0787    __size_of_CheckValidTime 0016  
                  clrloop0 0D7F                    _workCtr 0411       end_of_initialization 0021  
            _Refurbish_Sfr 0403                 _showBatLed 0E0A               _KeyOldValue0 00A8  
             _KeyOldValue1 0020               _KeyOldValue2 00A4      __size_of_KeyStopClear 0016  
       SystemEnterSleep@91 0054         SystemEnterSleep@92 0052         SystemEnterSleep@93 0050  
       SystemEnterSleep@94 004E               ?_KeyClearOne 0070                 _showNumShi 006E  
             _KeyReference 00A0                 ??_wuhuaCtr 0073          CheckValidTime@F87 00B0  
         ?_CheckOnceResult 0070           ___lbmod@dividend 0075                  KeyIsIn@45 0074  
                KeyIsIn@46 0073                  KeyHave@58 0075                  KeyHave@59 0073  
             ??_KeyClearIn 0075                ___lbmod@rem 0077                ___ftdiv@exp 005C  
          ??_CheckTouchKey 0077               _KeyStopClear 032C           _GetTouchKeyValue 0139  
           ?_Refurbish_Sfr 0070               ?_Init_System 0070             __end_of___lmul 06ED  
           __end_of_fanCtr 04E1         __end_of_KeyClearIn 039B                  _KeyMaxSub 0033  
                _KeyResSum 00AC                __end_ofPL10 03CD                __end_ofPL20 03E7  
              __end_ofPL12 03D8                __end_ofPL30 03F9                __end_ofPL22 03ED  
              __end_ofPL14 07FF                __end_ofPL40 07B9                __end_ofPL32 07AF  
              __end_ofPL24 03F3                __end_ofPL16 03DF                __end_ofPL34 03FE  
              __end_ofPL26 07AB                __end_ofPL18 07A4                __end_ofPL36 0403  
              __end_ofPL28 0F29                __end_ofPL38 07B4        start_initialization 000F  
                _KeyServer 0D86                ?_setBatStep 0070                  _Isr_Timer 0E55  
        workCtr@power_temp 00BE       __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070  
              ?_showBatLed 0070                   ??___lmul 0073                   ??_fanCtr 0078  
        ADC_Sample@ad_temp 0054                __pdataBANK0 006D               _Table_KeyCap 0845  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0040  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 0049              __pcstackBANK1 00BE                  _WorkSleep 0041  
           _CheckValidTime 0375   __end_of_CheckKeyOldValue 032C                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 0035                   ?_KeyIsIn 0070                   ?_KeyHave 0073  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0073             ??_TurnKeyFlags 0076  
                __pnvBANK0 006B           ___lwdiv@dividend 0075        __size_of_setBatStep 00AD  
                 ?___lbdiv 0073                   ?___lbmod 0073                   ?___ftdiv 004F  
                 ?___fttol 005E                   ?___lwdiv 0073                   ?___lwmod 0073  
                 ?_fanInit 0070                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 002A                  __pstrings 0828                  __pswtext1 0800  
                 ?_ledShow 0070       __size_of_KeyClearOne 0015                  _keyLedCtr 06ED  
                _firstLock 006B     __end_of_CheckValidTime 038B                  _firstTime 006C  
        __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070             ADC_Sample@adch 004A  
                 ?_pwmInit 0070                   ?_pwmStop 0070           ___lwdiv@quotient 004A  
      __size_of_showBatLed 0014                   ?_workCtr 0070                ADC_Sample@i 004B  
              ADC_Sample@j 0049                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 0D7E             KeyStopClear@53 0074  
      CheckKeyOldValue@F77 0032                  _showNumGe 006D                __stringbase 082D  
     __size_of_Init_System 001D      __end_of_Table_KeyFalg 0843      __end_of_Table_KeyDown 0845  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 01A1            ?_CheckValidTime 0070  
              ??_KeyServer 0073          ___lmul@multiplier 0049                  _wuhuaFlag 0043  
              ??_Isr_Timer 0070                   _MainTime 0046                 _ADC_Sample 04E1  
         __size_of_KeyIsIn 0014           __size_of_KeyHave 000E           _Table_KeyChannel 0847  
         __size_of___lbdiv 001B           __size_of___lbmod 001C           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwdiv 002A           __size_of___lwmod 0024  
                 ___ftpack 067C           __size_of_fanInit 000C         __end_of__stringtab 082E  
         __size_of_fanStop 0004           __size_of_chrgCtr 0031                   ___lwtoft 066C  
                 _b_kover1 03C3                   _b_ksleep 03C0           __size_of_ledShow 00A5  
     __end_of_TurnKeyFlags 0375                   _fanValue 00B8                   _adresult 0047  
             ??_setBatStep 0077                   _chrgFlag 003F                ??_WorkSleep 0076  
          ___lwdiv@divisor 0073            ___lwdiv@counter 0049                   __ptext10 06BA  
                 __ptext11 04E1                   __ptext20 0E39                   __ptext12 066C  
                 __ptext21 0E1E                   __ptext13 0613                   __ptext30 032C  
                 __ptext22 0041                   __ptext14 05B1                   __ptext31 0139  
                 __ptext23 00A9                   __ptext15 067C                   __ptext40 0E80  
                 __ptext32 01A1                   __ptext24 0403                   __ptext16 0F29  
                 __ptext33 0375                   __ptext25 0D86                   __ptext17 0FD6  
                 __ptext34 01B0                   __ptext26 0024                   __ptext18 0DD9  
                 __ptext35 02BA                   __ptext27 007C                   __ptext19 0E0A  
                 __ptext36 02A5                   __ptext28 0342                   __ptext37 02C8  
                 __ptext29 038B                   __ptext38 0291                   __ptext39 0E55  
         __size_of_pwmInit 000C           __size_of_pwmStop 0005               _shanshuoTime 002C  
                 _count10s 0041                   _count30s 0028                   _count15s 00B4  
         __size_of_workCtr 0063   __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 004D  
       GetTouchKeyValue@63 004B         GetTouchKeyValue@64 0049              __size_of_main 003B  
         _SystemEnterSleep 00A9      __end_of_CheckTouchKey 00A9                   _numArray 082E  
             ??_showBatLed 0078         CheckKeyOldValue@80 004B         CheckKeyOldValue@78 004D  
       CheckKeyOldValue@79 0049                   _test_adc 0036         __end_of_setBatStep 0FD6  
                 _power_ad 0026   setBatStep@tempSubBatTime 004C                   _workStep 0044  
                 _wuhuaCtr 0765                ??_keyLedCtr 0078          ?_CheckKeyOldValue 0070  
       __end_of_showBatLed 0E1E                   intlevel1 0000              ??_ClearResSum 0073  
       ??_CheckKeyOldValue 0075           ___lwmod@dividend 0075                ?_ADC_Sample 0073  
                stringcode 0828                _showBatStep 0038                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0056                 _OPTION_REG 0001            ___lwmod@divisor 0073  
          ___lwmod@counter 0077                   stringdir 0828                   stringtab 0828  
            KeyClearOne@49 0073               KeyClearIn@51 0075      __end_of_Refurbish_Sfr 0411  
      __end_of_ClearResSum 01B0          ??_CheckOnceResult 0049  
