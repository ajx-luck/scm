

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 18 11:25:27 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text16,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text25,local,class=CODE,merge=1,delta=2
    22                           	psect	text26,local,class=CODE,merge=1,delta=2
    23                           	psect	text39,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  0000                     __pidataBANK0:	
    66                           
    67                           	psect	strings
    68  0828                     __pstrings:	
    69  0828                     stringtab:	
    70  0828                     __stringtab:	
    71  0828                     stringcode:	
    72                           ;	String table - string pointers are 1 byte each
    73                           
    74  0828                     stringdir:	
    75  0828  3008               	movlw	high stringdir
    76  0829  008A               	movwf	10
    77  082A  0804               	movf	4,w
    78  082B  0A84               	incf	4,f
    79  082C  0782               	addwf	2,f
    80  082D                     __stringbase:	
    81  082D  3400               	retlw	0
    82  082E                     __end_of__stringtab:	
    83  082E                     _numArray:	
    84  082E  343F               	retlw	63
    85  082F  3406               	retlw	6
    86  0830  345B               	retlw	91
    87  0831  344F               	retlw	79
    88  0832  3466               	retlw	102
    89  0833  346D               	retlw	109
    90  0834  347D               	retlw	125
    91  0835  3407               	retlw	7
    92  0836  347F               	retlw	127
    93  0837  346F               	retlw	111
    94  0838  3471               	retlw	113
    95  0839  3479               	retlw	121
    96  083A  3450               	retlw	80
    97  083B                     __end_of_numArray:	
    98  083B                     _Table_KeyFalg:	
    99  083B  3401               	retlw	1
   100  083C  3402               	retlw	2
   101  083D  3404               	retlw	4
   102  083E  3408               	retlw	8
   103  083F  3410               	retlw	16
   104  0840  3420               	retlw	32
   105  0841  3440               	retlw	64
   106  0842  3480               	retlw	128
   107  0843                     __end_of_Table_KeyFalg:	
   108  0843                     _Table_KeyDown:	
   109  0843  340A               	retlw	10
   110  0844  340A               	retlw	10
   111  0845                     __end_of_Table_KeyDown:	
   112  0845                     _Table_KeyCap:	
   113  0845  3402               	retlw	2
   114  0846  3402               	retlw	2
   115  0847                     __end_of_Table_KeyCap:	
   116  0847                     _Table_KeyChannel:	
   117  0847  3442               	retlw	66
   118  0848  3443               	retlw	67
   119  0849                     __end_of_Table_KeyChannel:	
   120                           
   121                           	psect	nvBANK0
   122  006B                     __pnvBANK0:	
   123  006B                     _firstLock:	
   124  006B                     	ds	1
   125  006C                     _firstTime:	
   126  006C                     	ds	1
   127  001E                     _PWMD01H	set	30
   128  001D                     _PWMCON2	set	29
   129  001A                     _PWMD1L	set	26
   130  0019                     _PWMD0L	set	25
   131  0018                     _PWMTH	set	24
   132  0017                     _PWMTL	set	23
   133  0016                     _PWMCON1	set	22
   134  0015                     _PWMCON0	set	21
   135  0014                     _OSCCON	set	20
   136  0013                     _T2CON	set	19
   137  0011                     _PR2	set	17
   138  000E                     _PIE1	set	14
   139  000D                     _PIR1	set	13
   140  000B                     _INTCON	set	11
   141  0008                     _WPUB	set	8
   142  0006                     _PORTB	set	6
   143  0005                     _TRISB	set	5
   144  0001                     _OPTION_REG	set	1
   145  0069                     _TMR2IF	set	105
   146  006B                     _RAIF	set	107
   147  0058                     _RBIF	set	88
   148  0059                     _INTF	set	89
   149  005B                     _RBIE	set	91
   150  0048                     _IOCB0	set	72
   151  0034                     _RB4	set	52
   152  0036                     _RB6	set	54
   153  0028                     _TRISB0	set	40
   154  002E                     _TRISB6	set	46
   155  0099                     _ADRESH	set	153
   156  0098                     _ADRESL	set	152
   157  0096                     _ADCON1	set	150
   158  0095                     _ADCON0	set	149
   159  0086                     _PORTA	set	134
   160  0085                     _TRISA	set	133
   161  0081                     _TMR0	set	129
   162  04B2                     _LDO_EN	set	1202
   163  04B6                     _CHS4	set	1206
   164  04A8                     _ADON	set	1192
   165  04A9                     _GODONE	set	1193
   166  0430                     _RA0	set	1072
   167  0431                     _RA1	set	1073
   168  0433                     _RA3	set	1075
   169  0434                     _RA4	set	1076
   170  0117                     _KEYDATAH	set	279
   171  0116                     _KEYDATAL	set	278
   172  0113                     _KEYCON2	set	275
   173  0112                     _KEYCON1	set	274
   174  0111                     _KEYCON0	set	273
   175  0110                     _PIE2	set	272
   176  010F                     _PIR2	set	271
   177  0106                     _PORTC	set	262
   178  0105                     _TRISC	set	261
   179                           
   180                           	psect	cinit
   181  000F                     start_initialization:	
   182                           ; #config settings
   183                           
   184  000F                     __initialization:	
   185                           
   186                           ;initializer for _showNumGe
   187  000F  307F               	movlw	127
   188  0010  00ED               	movwf	__pdataBANK0& (0+127)
   189                           
   190                           ;initializer for _showNumShi
   191  0011  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   192  0012  30A0               	movlw	low __pbssBANK1
   193                           
   194                           ; Clear objects allocated to BANK1
   195  0013  1383               	bcf	3,7	;select IRP bank0
   196  0014  0084               	movwf	4
   197  0015  30BE               	movlw	low (__pbssBANK1+30)
   198  0016  158A  257D  118A   	fcall	clear_ram0
   199                           
   200                           ; Clear objects allocated to BANK0
   201  0019  3020               	movlw	low __pbssBANK0
   202  001A  0084               	movwf	4
   203  001B  3049               	movlw	low (__pbssBANK0+41)
   204  001C  158A  257D         	fcall	clear_ram0
   205                           
   206                           ; Clear objects allocated to COMMON
   207  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   208  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   209                           
   210                           ; Clear objects allocated to BITCOMMON
   211  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   212  0021                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215  0021                     __end_of__initialization:	
   216  0021  0183               	clrf	3
   217  0022  158A  2D85         	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	bitbssCOMMON
   220  03C0                     __pbitbssCOMMON:	
   221  03C0                     _b_ksleep:	
   222  03C0                     	ds	1
   223  03C1                     _b_kerr:	
   224  03C1                     	ds	1
   225  03C2                     _b_kclr:	
   226  03C2                     	ds	1
   227  03C3                     _b_kover1:	
   228  03C3                     	ds	1
   229  03C4                     _b_kover:	
   230  03C4                     	ds	1
   231  03C5                     _B_OnOff:	
   232  03C5                     	ds	1
   233  03C6                     _B_MainLoop:	
   234  03C6                     	ds	1
   235                           
   236                           	psect	bssCOMMON
   237  0079                     __pbssCOMMON:	
   238  0079                     _KeyData:	
   239  0079                     	ds	2
   240                           
   241                           	psect	bssBANK0
   242  0020                     __pbssBANK0:	
   243  0020                     _KeyOldValue1:	
   244  0020                     	ds	4
   245  0024                     _KeyOldData:	
   246  0024                     	ds	2
   247  0026                     _power_ad:	
   248  0026                     	ds	2
   249  0028                     _shanshuoTime2:	
   250  0028                     	ds	2
   251  002A                     _shanshuoTime:	
   252  002A                     	ds	2
   253  002C                     _KeyFlag:	
   254  002C                     	ds	2
   255  002E                     TurnKeyFlags@F84:	
   256  002E                     	ds	1
   257  002F                     TurnKeyFlags@F83:	
   258  002F                     	ds	1
   259  0030                     CheckKeyOldValue@F77:	
   260  0030                     	ds	1
   261  0031                     _KeyMaxSub:	
   262  0031                     	ds	1
   263  0032                     _KeyCounter:	
   264  0032                     	ds	1
   265  0033                     KeyServer@KeyOldFlag:	
   266  0033                     	ds	1
   267  0034                     _test_adc:	
   268  0034                     	ds	1
   269  0035                     _curBatStep:	
   270  0035                     	ds	1
   271  0036                     _showBatStep:	
   272  0036                     	ds	1
   273  0037                     _wuhuaKeyFlag:	
   274  0037                     	ds	1
   275  0038                     _fanKeyFlag:	
   276  0038                     	ds	1
   277  0039                     _ledCnt:	
   278  0039                     	ds	1
   279  003A                     _lowFanTime:	
   280  003A                     	ds	1
   281  003B                     _lowBatTime:	
   282  003B                     	ds	1
   283  003C                     _lowBatLock:	
   284  003C                     	ds	1
   285  003D                     _chrgFullTime:	
   286  003D                     	ds	1
   287  003E                     _chrgFullFlag:	
   288  003E                     	ds	1
   289  003F                     _chrgFlag:	
   290  003F                     	ds	1
   291  0040                     _fanOverTime:	
   292  0040                     	ds	1
   293  0041                     _count10s:	
   294  0041                     	ds	1
   295  0042                     _fanDuty:	
   296  0042                     	ds	1
   297  0043                     _wuhuaFlag:	
   298  0043                     	ds	1
   299  0044                     _workStep:	
   300  0044                     	ds	1
   301  0045                     _count1s:	
   302  0045                     	ds	1
   303  0046                     _MainTime:	
   304  0046                     	ds	1
   305  0047                     _adresult:	
   306  0047                     	ds	2
   307                           
   308                           	psect	dataBANK0
   309  006D                     __pdataBANK0:	
   310  006D                     _showNumGe:	
   311  006D                     	ds	1
   312  006E                     _showNumShi:	
   313  006E                     	ds	1
   314                           
   315                           	psect	bssBANK1
   316  00A0                     __pbssBANK1:	
   317  00A0                     _KeyReference:	
   318  00A0                     	ds	4
   319  00A4                     _KeyOldValue2:	
   320  00A4                     	ds	4
   321  00A8                     _KeyOldValue0:	
   322  00A8                     	ds	4
   323  00AC                     _KeyResSum:	
   324  00AC                     	ds	4
   325  00B0                     CheckValidTime@F87:	
   326  00B0                     	ds	2
   327  00B2                     _result:	
   328  00B2                     	ds	2
   329  00B4                     _count15s:	
   330  00B4                     	ds	2
   331  00B6                     _count30s:	
   332  00B6                     	ds	2
   333  00B8                     _fanValue:	
   334  00B8                     	ds	2
   335  00BA                     _time:	
   336  00BA                     	ds	2
   337  00BC                     _KeyUpShake:	
   338  00BC                     	ds	2
   339                           
   340                           	psect	clrtext
   341  0D7D                     clear_ram0:	
   342                           ;	Called with FSR containing the base address, and
   343                           ;	W with the last address+1
   344                           
   345  0D7D  0064               	clrwdt	;clear the watchdog before getting into this loop
   346  0D7E                     clrloop0:	
   347  0D7E  0180               	clrf	0	;clear RAM location pointed to by FSR
   348  0D7F  0A84               	incf	4,f	;increment pointer
   349  0D80  0604               	xorwf	4,w	;XOR with final address
   350  0D81  1903               	btfsc	3,2	;have we reached the end yet?
   351  0D82  3400               	retlw	0	;all done for this memory range, return
   352  0D83  0604               	xorwf	4,w	;XOR again to restore value
   353  0D84  2D7E               	goto	clrloop0	;do the next byte
   354                           
   355                           	psect	cstackBANK1
   356  00BE                     __pcstackBANK1:	
   357  00BE                     workCtr@power_temp:	
   358                           
   359                           ; 4 bytes @ 0x0
   360  00BE                     	ds	4
   361                           
   362                           	psect	cstackCOMMON
   363  0070                     __pcstackCOMMON:	
   364  0070                     ?_ledShow:	
   365  0070                     ??_ledShow:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_SystemEnterSleep:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_CheckTouchKey:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_Init_System:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_Refurbish_Sfr:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_KeyServer:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_Isr_Timer:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_Isr_Timer:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_WorkSleep:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_showBatLed:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_setBatStep:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_chrgCtr:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_keyLedCtr:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_pwmInit:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_pwmStop:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_fanInit:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_fanStop:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_fanCtr:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_wuhuaCtr:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_workCtr:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_main:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_KeyIsIn:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_KeyClearOne:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_KeyClearIn:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_KeyStopClear:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_ClearResSum:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_GetTouchKeyValue:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ?_CheckOnceResult:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_CheckKeyOldValue:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?_TurnKeyFlags:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_CheckValidTime:	
   456                           ; 1 bytes @ 0x0
   457                           
   458                           
   459                           ; 1 bytes @ 0x0
   460  0070                     	ds	3
   461  0073                     ??_Init_System:	
   462  0073                     ??_Refurbish_Sfr:	
   463                           ; 1 bytes @ 0x3
   464                           
   465  0073                     ??_KeyServer:	
   466                           ; 1 bytes @ 0x3
   467                           
   468  0073                     ?_ADC_Sample:	
   469                           ; 1 bytes @ 0x3
   470                           
   471  0073                     ??_pwmInit:	
   472                           ; 1 bytes @ 0x3
   473                           
   474  0073                     ??_pwmStop:	
   475                           ; 1 bytes @ 0x3
   476                           
   477  0073                     ??_fanInit:	
   478                           ; 1 bytes @ 0x3
   479                           
   480  0073                     ??_fanStop:	
   481                           ; 1 bytes @ 0x3
   482                           
   483  0073                     ??_wuhuaCtr:	
   484                           ; 1 bytes @ 0x3
   485                           
   486  0073                     ??_KeyIsIn:	
   487                           ; 1 bytes @ 0x3
   488                           
   489  0073                     ??_KeyClearOne:	
   490                           ; 1 bytes @ 0x3
   491                           
   492  0073                     ??_ClearResSum:	
   493                           ; 1 bytes @ 0x3
   494                           
   495  0073                     ?_KeyHave:	
   496                           ; 1 bytes @ 0x3
   497                           
   498  0073                     ??_CheckValidTime:	
   499                           ; 1 bytes @ 0x3
   500                           
   501  0073                     ??___lmul:	
   502                           ; 1 bytes @ 0x3
   503                           
   504  0073                     ?___lbdiv:	
   505                           ; 1 bytes @ 0x3
   506                           
   507  0073                     ?___lbmod:	
   508                           ; 1 bytes @ 0x3
   509                           
   510  0073                     ?___lwdiv:	
   511                           ; 1 bytes @ 0x3
   512                           
   513  0073                     ?___lwmod:	
   514                           ; 2 bytes @ 0x3
   515                           
   516  0073                     ?___ftpack:	
   517                           ; 2 bytes @ 0x3
   518                           
   519  0073                     ADC_Sample@adldo:	
   520                           ; 3 bytes @ 0x3
   521                           
   522  0073                     KeyIsIn@46:	
   523                           ; 1 bytes @ 0x3
   524                           
   525  0073                     KeyClearOne@49:	
   526                           ; 1 bytes @ 0x3
   527                           
   528  0073                     ClearResSum@56:	
   529                           ; 1 bytes @ 0x3
   530                           
   531  0073                     ___lbdiv@divisor:	
   532                           ; 1 bytes @ 0x3
   533                           
   534  0073                     ___lbmod@divisor:	
   535                           ; 1 bytes @ 0x3
   536                           
   537  0073                     KeyHave@59:	
   538                           ; 1 bytes @ 0x3
   539                           
   540  0073                     ___lwdiv@divisor:	
   541                           ; 2 bytes @ 0x3
   542                           
   543  0073                     ___lwmod@divisor:	
   544                           ; 2 bytes @ 0x3
   545                           
   546  0073                     ___ftpack@arg:	
   547                           ; 2 bytes @ 0x3
   548                           
   549  0073                     ___lmul@product:	
   550                           ; 3 bytes @ 0x3
   551                           
   552                           
   553                           ; 4 bytes @ 0x3
   554  0073                     	ds	1
   555  0074                     ??_SystemEnterSleep:	
   556  0074                     ??_ADC_Sample:	
   557                           ; 1 bytes @ 0x4
   558                           
   559  0074                     ??_KeyStopClear:	
   560                           ; 1 bytes @ 0x4
   561                           
   562  0074                     ??_GetTouchKeyValue:	
   563                           ; 1 bytes @ 0x4
   564                           
   565  0074                     ??___lbdiv:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     ??___lbmod:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     KeyIsIn@45:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     KeyStopClear@53:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     ___lbdiv@dividend:	
   578                           ; 1 bytes @ 0x4
   579                           
   580                           
   581                           ; 1 bytes @ 0x4
   582  0074                     	ds	1
   583  0075                     ??_KeyClearIn:	
   584  0075                     ??_KeyHave:	
   585                           ; 1 bytes @ 0x5
   586                           
   587  0075                     ??_CheckKeyOldValue:	
   588                           ; 1 bytes @ 0x5
   589                           
   590  0075                     KeyClearIn@51:	
   591                           ; 1 bytes @ 0x5
   592                           
   593  0075                     KeyHave@58:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0075                     ___lbdiv@counter:	
   597                           ; 1 bytes @ 0x5
   598                           
   599  0075                     ___lbmod@dividend:	
   600                           ; 1 bytes @ 0x5
   601                           
   602  0075                     ___lwdiv@dividend:	
   603                           ; 1 bytes @ 0x5
   604                           
   605  0075                     ___lwmod@dividend:	
   606                           ; 2 bytes @ 0x5
   607                           
   608                           
   609                           ; 2 bytes @ 0x5
   610  0075                     	ds	1
   611  0076                     ??_WorkSleep:	
   612  0076                     ??_TurnKeyFlags:	
   613                           ; 1 bytes @ 0x6
   614                           
   615  0076                     ___ftpack@exp:	
   616                           ; 1 bytes @ 0x6
   617                           
   618  0076                     ___lbdiv@quotient:	
   619                           ; 1 bytes @ 0x6
   620                           
   621  0076                     ___lbmod@counter:	
   622                           ; 1 bytes @ 0x6
   623                           
   624                           
   625                           ; 1 bytes @ 0x6
   626  0076                     	ds	1
   627  0077                     ??_CheckTouchKey:	
   628  0077                     ??_setBatStep:	
   629                           ; 1 bytes @ 0x7
   630                           
   631  0077                     ??___lwdiv:	
   632                           ; 1 bytes @ 0x7
   633                           
   634  0077                     ??___lwmod:	
   635                           ; 1 bytes @ 0x7
   636                           
   637  0077                     ___ftpack@sign:	
   638                           ; 1 bytes @ 0x7
   639                           
   640  0077                     ___lbmod@rem:	
   641                           ; 1 bytes @ 0x7
   642                           
   643  0077                     ___lwmod@counter:	
   644                           ; 1 bytes @ 0x7
   645                           
   646                           
   647                           ; 1 bytes @ 0x7
   648  0077                     	ds	1
   649  0078                     ??_showBatLed:	
   650  0078                     ??_chrgCtr:	
   651                           ; 1 bytes @ 0x8
   652                           
   653  0078                     ??_keyLedCtr:	
   654                           ; 1 bytes @ 0x8
   655                           
   656  0078                     ??_fanCtr:	
   657                           ; 1 bytes @ 0x8
   658                           
   659  0078                     ??_workCtr:	
   660                           ; 1 bytes @ 0x8
   661                           
   662  0078                     ??_main:	
   663                           ; 1 bytes @ 0x8
   664                           
   665  0078                     ??___lwtoft:	
   666                           ; 1 bytes @ 0x8
   667                           
   668                           
   669                           	psect	cstackBANK0
   670  0049                     __pcstackBANK0:	
   671                           ; 1 bytes @ 0x8
   672                           
   673  0049                     ??___ftpack:	
   674  0049                     ??_CheckOnceResult:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0049                     ?___lmul:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0049                     ADC_Sample@j:	
   681                           ; 4 bytes @ 0x0
   682                           
   683  0049                     ___lwdiv@counter:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0049                     GetTouchKeyValue@64:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0049                     CheckKeyOldValue@79:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0049                     ___lmul@multiplier:	
   693                           ; 2 bytes @ 0x0
   694                           
   695                           
   696                           ; 4 bytes @ 0x0
   697  0049                     	ds	1
   698  004A                     ADC_Sample@adch:	
   699  004A                     ___lwdiv@quotient:	
   700                           ; 1 bytes @ 0x1
   701                           
   702                           
   703                           ; 2 bytes @ 0x1
   704  004A                     	ds	1
   705  004B                     ADC_Sample@i:	
   706  004B                     GetTouchKeyValue@63:	
   707                           ; 1 bytes @ 0x2
   708                           
   709  004B                     CheckKeyOldValue@80:	
   710                           ; 2 bytes @ 0x2
   711                           
   712                           
   713                           ; 2 bytes @ 0x2
   714  004B                     	ds	1
   715  004C                     ?___lwtoft:	
   716  004C                     setBatStep@tempSubBatTime:	
   717                           ; 3 bytes @ 0x3
   718                           
   719  004C                     ___lwtoft@c:	
   720                           ; 2 bytes @ 0x3
   721                           
   722  004C                     ADC_Sample@adsum:	
   723                           ; 2 bytes @ 0x3
   724                           
   725                           
   726                           ; 4 bytes @ 0x3
   727  004C                     	ds	1
   728  004D                     GetTouchKeyValue@62:	
   729  004D                     CheckKeyOldValue@78:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  004D                     CheckOnceResult@73:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  004D                     ___lmul@multiplicand:	
   736                           ; 2 bytes @ 0x4
   737                           
   738                           
   739                           ; 4 bytes @ 0x4
   740  004D                     	ds	1
   741  004E                     SystemEnterSleep@94:	
   742                           
   743                           ; 2 bytes @ 0x5
   744  004E                     	ds	1
   745  004F                     ?___ftdiv:	
   746  004F                     CheckOnceResult@70:	
   747                           ; 3 bytes @ 0x6
   748                           
   749  004F                     ___ftdiv@f2:	
   750                           ; 1 bytes @ 0x6
   751                           
   752                           
   753                           ; 3 bytes @ 0x6
   754  004F                     	ds	1
   755  0050                     ADC_Sample@admin:	
   756  0050                     CheckOnceResult@72:	
   757                           ; 2 bytes @ 0x7
   758                           
   759  0050                     SystemEnterSleep@93:	
   760                           ; 2 bytes @ 0x7
   761                           
   762                           
   763                           ; 2 bytes @ 0x7
   764  0050                     	ds	2
   765  0052                     CheckOnceResult@69:	
   766  0052                     ADC_Sample@admax:	
   767                           ; 1 bytes @ 0x9
   768                           
   769  0052                     SystemEnterSleep@92:	
   770                           ; 2 bytes @ 0x9
   771                           
   772  0052                     ___ftdiv@f1:	
   773                           ; 2 bytes @ 0x9
   774                           
   775                           
   776                           ; 3 bytes @ 0x9
   777  0052                     	ds	1
   778  0053                     CheckOnceResult@71:	
   779                           
   780                           ; 2 bytes @ 0xA
   781  0053                     	ds	1
   782  0054                     SystemEnterSleep@91:	
   783  0054                     ADC_Sample@ad_temp:	
   784                           ; 1 bytes @ 0xB
   785                           
   786                           
   787                           ; 2 bytes @ 0xB
   788  0054                     	ds	1
   789  0055                     ??___ftdiv:	
   790  0055                     CheckOnceResult@68:	
   791                           ; 1 bytes @ 0xC
   792                           
   793                           
   794                           ; 1 bytes @ 0xC
   795  0055                     	ds	1
   796  0056                     fanCtr@maxFanValue:	
   797                           
   798                           ; 1 bytes @ 0xD
   799  0056                     	ds	1
   800  0057                     fanCtr@fan_temp:	
   801                           
   802                           ; 4 bytes @ 0xE
   803  0057                     	ds	1
   804  0058                     ___ftdiv@cntr:	
   805                           
   806                           ; 1 bytes @ 0xF
   807  0058                     	ds	1
   808  0059                     ___ftdiv@f3:	
   809                           
   810                           ; 3 bytes @ 0x10
   811  0059                     	ds	3
   812  005C                     ___ftdiv@exp:	
   813                           
   814                           ; 1 bytes @ 0x13
   815  005C                     	ds	1
   816  005D                     ___ftdiv@sign:	
   817                           
   818                           ; 1 bytes @ 0x14
   819  005D                     	ds	1
   820  005E                     ?___fttol:	
   821  005E                     ___fttol@f1:	
   822                           ; 4 bytes @ 0x15
   823                           
   824                           
   825                           ; 3 bytes @ 0x15
   826  005E                     	ds	4
   827  0062                     ??___fttol:	
   828                           
   829                           ; 1 bytes @ 0x19
   830  0062                     	ds	3
   831  0065                     ___fttol@sign1:	
   832                           
   833                           ; 1 bytes @ 0x1C
   834  0065                     	ds	1
   835  0066                     ___fttol@lval:	
   836                           
   837                           ; 4 bytes @ 0x1D
   838  0066                     	ds	4
   839  006A                     ___fttol@exp1:	
   840                           
   841                           ; 1 bytes @ 0x21
   842  006A                     	ds	1
   843                           
   844                           	psect	maintext
   845  0D85                     __pmaintext:	
   846 ;;
   847 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   848 ;;
   849 ;; *************** function _main *****************
   850 ;; Defined at:
   851 ;;		line 913 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : B00/0
   862 ;;		On exit  : 300/100
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   865 ;;      Params:         0       0       0       0
   866 ;;      Locals:         0       0       0       0
   867 ;;      Temps:          0       0       0       0
   868 ;;      Totals:         0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels required when called:    6
   871 ;; This function calls:
   872 ;;		_CheckTouchKey
   873 ;;		_Init_System
   874 ;;		_KeyServer
   875 ;;		_Refurbish_Sfr
   876 ;;		_WorkSleep
   877 ;;		_chrgCtr
   878 ;;		_setBatStep
   879 ;;		_workCtr
   880 ;; This function is called by:
   881 ;;		Startup code after reset
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _main
   887  0D85                     _main:	
   888                           
   889                           ;main.c: 915: Init_System();
   890                           
   891                           ;incstack = 0
   892                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   893  0D85  118A  2024  158A   	fcall	_Init_System
   894                           
   895                           ;main.c: 916: firstLock = 1;
   896  0D88  1283               	bcf	3,5	;RP0=0, select bank0
   897  0D89  30FA               	movlw	250
   898  0D8A  01EB               	clrf	_firstLock
   899  0D8B  0AEB               	incf	_firstLock,f
   900                           
   901                           ;main.c: 917: firstTime = 250;
   902  0D8C  00EC               	movwf	_firstTime
   903  0D8D                     l4990:	
   904                           
   905                           ;main.c: 919: {
   906                           ;main.c: 921: if(B_MainLoop)
   907  0D8D  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   908  0D8E  2D8D               	goto	l4990
   909                           
   910                           ;main.c: 922: {
   911                           ;main.c: 923: B_MainLoop = 0;
   912  0D8F  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   913  0D90  0064               	clrwdt	;# 
   914                           
   915                           ;main.c: 925: CheckTouchKey();
   916  0D91  118A  2077  158A   	fcall	_CheckTouchKey
   917                           
   918                           ;main.c: 926: chrgCtr();
   919  0D94  158A  25CC  158A   	fcall	_chrgCtr
   920                           
   921                           ;main.c: 927: Refurbish_Sfr();
   922  0D97  118A  2396  158A   	fcall	_Refurbish_Sfr
   923                           
   924                           ;main.c: 928: KeyServer();
   925  0D9A  118A  27B5  158A   	fcall	_KeyServer
   926                           
   927                           ;main.c: 929: workCtr();
   928  0D9D  118A  24A4  158A   	fcall	_workCtr
   929                           
   930                           ;main.c: 930: setBatStep();
   931  0DA0  158A  271C  158A   	fcall	_setBatStep
   932                           
   933                           ;main.c: 931: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   934  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
   935  0DA4  086C               	movf	_firstTime,w
   936  0DA5  1D03               	btfss	3,2
   937  0DA6  2DBD               	goto	l5026
   938  0DA7  083F               	movf	_chrgFlag,w
   939  0DA8  1D03               	btfss	3,2
   940  0DA9  2DBD               	goto	l5026
   941  0DAA  0844               	movf	_workStep,w
   942  0DAB  1D03               	btfss	3,2
   943  0DAC  2DBD               	goto	l5026
   944  0DAD  0843               	movf	_wuhuaFlag,w
   945  0DAE  1D03               	btfss	3,2
   946  0DAF  2DBD               	goto	l5026
   947  0DB0  082A               	movf	_shanshuoTime,w
   948  0DB1  042B               	iorwf	_shanshuoTime+1,w
   949  0DB2  1D03               	btfss	3,2
   950  0DB3  2DBD               	goto	l5026
   951  0DB4  0828               	movf	_shanshuoTime2,w
   952  0DB5  0429               	iorwf	_shanshuoTime2+1,w
   953  0DB6  1D03               	btfss	3,2
   954  0DB7  2DBD               	goto	l5026
   955                           
   956                           ;main.c: 932: {
   957                           ;main.c: 933: PORTA &= 0xE4;
   958                           
   959                           ;main.c: 934: PORTB &= 0xEF;
   960                           
   961                           ;main.c: 935: TRISA |= 0x1B;
   962                           
   963                           ;main.c: 936: TRISB |= 0x10;
   964  0DB8  25C1               	fcall	PL10	;call to abstracted procedure
   965                           
   966                           ;main.c: 937: WorkSleep();
   967  0DB9  118A  2041  158A   	fcall	_WorkSleep
   968                           
   969                           ;main.c: 938: }
   970  0DBC  2D8D               	goto	l4990
   971  0DBD                     l5026:	
   972                           
   973                           ;main.c: 939: else
   974                           ;main.c: 940: {
   975                           ;main.c: 941: time = 0;
   976  0DBD  1683               	bsf	3,5	;RP0=1, select bank1
   977  0DBE  01BA               	clrf	_time^(0+128)
   978  0DBF  01BB               	clrf	(_time+1)^(0+128)
   979  0DC0  2D8D               	goto	l4990
   980  0DC1                     __end_of_main:	
   981  0DC1                     PL10:	
   982  0DC1  30E4               	movlw	228
   983  0DC2  1683               	bsf	3,5	;RP0=1, select bank1
   984  0DC3  0586               	andwf	6,f	;volatile
   985  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
   986  0DC5  1206               	bcf	6,4	;volatile
   987  0DC6  301B               	movlw	27
   988  0DC7  1683               	bsf	3,5	;RP0=1, select bank1
   989  0DC8  0485               	iorwf	5,f	;volatile
   990  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
   991  0DCA  1605               	bsf	5,4	;volatile
   992  0DCB  0008               	return
   993  0DCC                     __end_ofPL10:	
   994                           
   995                           	psect	text7
   996  040C                     __ptext7:	
   997 ;; *************** function _fanCtr *****************
   998 ;; Defined at:
   999 ;;		line 776 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1004 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      void 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, status,0, pclath, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 300/0
  1011 ;;		On exit  : 200/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1014 ;;      Params:         0       0       0       0
  1015 ;;      Locals:         0       5       0       0
  1016 ;;      Temps:          0       0       0       0
  1017 ;;      Totals:         0       5       0       0
  1018 ;;Total ram usage:        5 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; Hardware stack levels required when called:    3
  1021 ;; This function calls:
  1022 ;;		_ADC_Sample
  1023 ;;		___lmul
  1024 ;;		_fanInit
  1025 ;;		_fanStop
  1026 ;; This function is called by:
  1027 ;;		_workCtr
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           
  1032                           ;psect for function _fanCtr
  1033  040C                     _fanCtr:	
  1034                           
  1035                           ;main.c: 778: if(workStep > 0)
  1036                           
  1037                           ;incstack = 0
  1038                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1039  040C  0844               	movf	_workStep,w
  1040  040D  1903               	btfsc	3,2
  1041  040E  2C6C               	goto	l4608
  1042                           
  1043                           ;main.c: 779: {
  1044                           ;main.c: 780: PORTA |= 0x04;
  1045  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1046  0410  1506               	bsf	6,2	;volatile
  1047                           
  1048                           ;main.c: 781: unsigned char maxFanValue = 52;
  1049  0411  3034               	movlw	52
  1050  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1051  0413  00D6               	movwf	fanCtr@maxFanValue
  1052                           
  1053                           ;main.c: 782: if(workStep == 1)
  1054  0414  0B44               	decfsz	_workStep,w
  1055  0415  2C18               	goto	l4576
  1056                           
  1057                           ;main.c: 783: {
  1058                           ;main.c: 784: maxFanValue = 40;
  1059  0416  3028               	movlw	40
  1060  0417  00D6               	movwf	fanCtr@maxFanValue
  1061  0418                     l4576:	
  1062  0418  300D               	movlw	13
  1063                           
  1064                           ;main.c: 785: }
  1065                           ;main.c: 786: test_adc = ADC_Sample(13, 0);
  1066  0419  01F3               	clrf	ADC_Sample@adldo
  1067  041A  2619  118A         	fcall	_ADC_Sample
  1068  041C  00B4               	movwf	_test_adc	;volatile
  1069                           
  1070                           ;main.c: 787: if (0xA5 == test_adc)
  1071  041D  30A5               	movlw	165
  1072  041E  0634               	xorwf	_test_adc,w	;volatile
  1073  041F  1D03               	btfss	3,2
  1074  0420  2C4B               	goto	l4588
  1075                           
  1076                           ;main.c: 788: {
  1077                           ;main.c: 789: volatile unsigned long fan_temp;
  1078                           ;main.c: 790: if(power_ad > 0)
  1079  0421  0826               	movf	_power_ad,w	;volatile
  1080  0422  0427               	iorwf	_power_ad+1,w	;volatile
  1081  0423  1903               	btfsc	3,2
  1082  0424  2C4B               	goto	l4588
  1083                           
  1084                           ;main.c: 791: {
  1085                           ;main.c: 792: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1086  0425  0847               	movf	_adresult,w	;volatile
  1087  0426  00C9               	movwf	___lmul@multiplier
  1088  0427  0848               	movf	_adresult+1,w	;volatile
  1089  0428  00CA               	movwf	___lmul@multiplier+1
  1090  0429  01CB               	clrf	___lmul@multiplier+2
  1091  042A  01CC               	clrf	___lmul@multiplier+3
  1092  042B  0826               	movf	_power_ad,w	;volatile
  1093  042C  00CD               	movwf	___lmul@multiplicand
  1094  042D  0827               	movf	_power_ad+1,w	;volatile
  1095  042E  00CE               	movwf	___lmul@multiplicand+1
  1096  042F  01CF               	clrf	___lmul@multiplicand+2
  1097  0430  01D0               	clrf	___lmul@multiplicand+3
  1098  0431  2471  118A         	fcall	___lmul
  1099  0433  084C               	movf	?___lmul+3,w
  1100  0434  00DA               	movwf	fanCtr@fan_temp+3	;volatile
  1101  0435  084B               	movf	?___lmul+2,w
  1102  0436  00D9               	movwf	fanCtr@fan_temp+2	;volatile
  1103  0437  084A               	movf	?___lmul+1,w
  1104  0438  00D8               	movwf	fanCtr@fan_temp+1	;volatile
  1105  0439  0849               	movf	?___lmul,w
  1106  043A  00D7               	movwf	fanCtr@fan_temp	;volatile
  1107  043B  300C               	movlw	12
  1108  043C                     u4915:	
  1109  043C  1003               	clrc
  1110  043D  0CDA               	rrf	fanCtr@fan_temp+3,f	;volatile
  1111  043E  0CD9               	rrf	fanCtr@fan_temp+2,f	;volatile
  1112  043F  0CD8               	rrf	fanCtr@fan_temp+1,f	;volatile
  1113  0440  0CD7               	rrf	fanCtr@fan_temp,f	;volatile
  1114  0441  3EFF               	addlw	-1
  1115  0442  1D03               	skipz
  1116  0443  2C3C               	goto	u4915
  1117                           
  1118                           ;main.c: 793: fanValue = (unsigned int)(fan_temp);
  1119  0444  0858               	movf	fanCtr@fan_temp+1,w	;volatile
  1120  0445  1683               	bsf	3,5	;RP0=1, select bank1
  1121  0446  00B9               	movwf	(_fanValue+1)^(0+128)
  1122  0447  1283               	bcf	3,5	;RP0=0, select bank0
  1123  0448  0857               	movf	fanCtr@fan_temp,w	;volatile
  1124  0449  1683               	bsf	3,5	;RP0=1, select bank1
  1125  044A  00B8               	movwf	_fanValue^(0+128)
  1126  044B                     l4588:	
  1127                           
  1128                           ;main.c: 794: }
  1129                           ;main.c: 795: }
  1130                           ;main.c: 796: if(fanValue > 1300)
  1131  044B  3005               	movlw	5
  1132  044C  1683               	bsf	3,5	;RP0=1, select bank1
  1133  044D  0239               	subwf	(_fanValue+1)^(0+128),w
  1134  044E  3015               	movlw	21
  1135  044F  1903               	skipnz
  1136  0450  0238               	subwf	_fanValue^(0+128),w
  1137  0451  1C03               	skipc
  1138  0452  2C5F               	goto	l4596
  1139                           
  1140                           ;main.c: 797: {
  1141                           ;main.c: 798: if(++fanOverTime > 25)
  1142  0453  301A               	movlw	26
  1143  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0455  0AC0               	incf	_fanOverTime,f
  1145  0456  0240               	subwf	_fanOverTime,w
  1146  0457  1C03               	skipc
  1147  0458  2C61               	goto	l4598
  1148  0459  30E1               	movlw	225
  1149                           
  1150                           ;main.c: 799: {
  1151                           ;main.c: 800: fanOverTime = 0;
  1152  045A  01C0               	clrf	_fanOverTime
  1153                           
  1154                           ;main.c: 801: workStep = 0;
  1155  045B  01C4               	clrf	_workStep
  1156                           
  1157                           ;main.c: 802: shanshuoTime = 225;
  1158  045C  00AA               	movwf	_shanshuoTime
  1159  045D  01AB               	clrf	_shanshuoTime+1
  1160  045E  2C61               	goto	l4598
  1161  045F                     l4596:	
  1162                           
  1163                           ;main.c: 805: else
  1164                           ;main.c: 806: {
  1165                           ;main.c: 807: fanOverTime = 0;
  1166  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1167  0460  01C0               	clrf	_fanOverTime
  1168  0461                     l4598:	
  1169                           
  1170                           ;main.c: 808: }
  1171                           ;main.c: 809: if(fanDuty < maxFanValue)
  1172  0461  0856               	movf	fanCtr@maxFanValue,w
  1173  0462  0242               	subwf	_fanDuty,w
  1174  0463  1803               	skipnc
  1175  0464  2C67               	goto	l4602
  1176                           
  1177                           ;main.c: 810: {
  1178                           ;main.c: 811: fanDuty++;
  1179  0465  0AC2               	incf	_fanDuty,f
  1180                           
  1181                           ;main.c: 812: }
  1182  0466  2C6B               	goto	l4606
  1183  0467                     l4602:	
  1184                           
  1185                           ;main.c: 813: else if(fanDuty > maxFanValue)
  1186  0467  0842               	movf	_fanDuty,w
  1187  0468  0256               	subwf	fanCtr@maxFanValue,w
  1188  0469  1C03               	btfss	3,0
  1189                           
  1190                           ;main.c: 814: {
  1191                           ;main.c: 815: fanDuty--;
  1192  046A  03C2               	decf	_fanDuty,f
  1193  046B                     l4606:	
  1194                           
  1195                           ;main.c: 816: }
  1196                           ;main.c: 817: fanInit();
  1197  046B  2F51               	ljmp	l4338
  1198  046C                     l4608:	
  1199                           ;main.c: 818: }
  1200                           
  1201                           
  1202                           ;main.c: 819: else
  1203                           ;main.c: 820: {
  1204                           ;main.c: 821: fanStop();
  1205  046C  275D               	fcall	_fanStop
  1206                           
  1207                           ;main.c: 822: fanDuty = 0;
  1208  046D  01C2               	clrf	_fanDuty
  1209                           
  1210                           ;main.c: 823: PORTA &= 0xFB;
  1211  046E  1683               	bsf	3,5	;RP0=1, select bank1
  1212  046F  1106               	bcf	6,2	;volatile
  1213  0470  0008               	return
  1214  0471                     __end_of_fanCtr:	
  1215  0471                     __ptext10:	
  1216 ;; *************** function ___lmul *****************
  1217 ;; Defined at:
  1218 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1221 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;  product         4    3[COMMON] unsigned long 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  4    0[BANK0 ] unsigned long 
  1226 ;; Registers used:
  1227 ;;		wreg, status,2, status,0
  1228 ;; Tracked objects:
  1229 ;;		On entry : 300/0
  1230 ;;		On exit  : 300/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1233 ;;      Params:         0       8       0       0
  1234 ;;      Locals:         4       0       0       0
  1235 ;;      Temps:          0       0       0       0
  1236 ;;      Totals:         4       8       0       0
  1237 ;;Total ram usage:       12 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    2
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_fanCtr
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           
  1248                           ;psect for function ___lmul
  1249  0471                     ___lmul:	
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1253  0471  01F3               	clrf	___lmul@product
  1254  0472  01F4               	clrf	___lmul@product+1
  1255  0473  01F5               	clrf	___lmul@product+2
  1256  0474  01F6               	clrf	___lmul@product+3
  1257  0475                     l1415:	
  1258  0475  1C49               	btfss	___lmul@multiplier,0
  1259  0476  2C8B               	goto	l4400
  1260  0477  084D               	movf	___lmul@multiplicand,w
  1261  0478  07F3               	addwf	___lmul@product,f
  1262  0479  084E               	movf	___lmul@multiplicand+1,w
  1263  047A  1103               	clrz
  1264  047B  1803               	skipnc
  1265  047C  3E01               	addlw	1
  1266  047D  1D03               	btfss	3,2
  1267  047E  07F4               	addwf	___lmul@product+1,f
  1268  047F  084F               	movf	___lmul@multiplicand+2,w
  1269  0480  1103               	clrz
  1270  0481  1803               	skipnc
  1271  0482  3E01               	addlw	1
  1272  0483  1D03               	btfss	3,2
  1273  0484  07F5               	addwf	___lmul@product+2,f
  1274  0485  0850               	movf	___lmul@multiplicand+3,w
  1275  0486  1103               	clrz
  1276  0487  1803               	skipnc
  1277  0488  3E01               	addlw	1
  1278  0489  1D03               	btfss	3,2
  1279  048A  07F6               	addwf	___lmul@product+3,f
  1280  048B                     l4400:	
  1281  048B  1003               	clrc
  1282  048C  0DCD               	rlf	___lmul@multiplicand,f
  1283  048D  0DCE               	rlf	___lmul@multiplicand+1,f
  1284  048E  0DCF               	rlf	___lmul@multiplicand+2,f
  1285  048F  0DD0               	rlf	___lmul@multiplicand+3,f
  1286  0490  1003               	clrc
  1287  0491  0CCC               	rrf	___lmul@multiplier+3,f
  1288  0492  0CCB               	rrf	___lmul@multiplier+2,f
  1289  0493  0CCA               	rrf	___lmul@multiplier+1,f
  1290  0494  0CC9               	rrf	___lmul@multiplier,f
  1291  0495  084C               	movf	___lmul@multiplier+3,w
  1292  0496  044B               	iorwf	___lmul@multiplier+2,w
  1293  0497  044A               	iorwf	___lmul@multiplier+1,w
  1294  0498  0449               	iorwf	___lmul@multiplier,w
  1295  0499  1D03               	skipz
  1296  049A  2C75               	goto	l1415
  1297  049B  0876               	movf	___lmul@product+3,w
  1298  049C  00CC               	movwf	?___lmul+3
  1299  049D  0875               	movf	___lmul@product+2,w
  1300  049E  00CB               	movwf	?___lmul+2
  1301  049F  0874               	movf	___lmul@product+1,w
  1302  04A0  00CA               	movwf	?___lmul+1
  1303  04A1  0873               	movf	___lmul@product,w
  1304  04A2  00C9               	movwf	?___lmul
  1305  04A3  0008               	return
  1306  04A4                     __end_of___lmul:	
  1307  04A4                     __ptext1:	
  1308 ;; *************** function _workCtr *****************
  1309 ;; Defined at:
  1310 ;;		line 861 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 300/0
  1321 ;;		On exit  : 200/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1324 ;;      Params:         0       0       0       0
  1325 ;;      Locals:         0       0       4       0
  1326 ;;      Temps:          0       0       0       0
  1327 ;;      Totals:         0       0       4       0
  1328 ;;Total ram usage:        4 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    4
  1331 ;; This function calls:
  1332 ;;		_ADC_Sample
  1333 ;;		___ftdiv
  1334 ;;		___fttol
  1335 ;;		___lwtoft
  1336 ;;		_fanCtr
  1337 ;;		_keyLedCtr
  1338 ;;		_wuhuaCtr
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _workCtr
  1346  04A4                     _workCtr:	
  1347                           
  1348                           ;incstack = 0
  1349                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1350  04A4  301F               	movlw	31
  1351                           
  1352                           ;main.c: 863: test_adc = ADC_Sample(31, 0);
  1353  04A5  01F3               	clrf	ADC_Sample@adldo
  1354  04A6  2619  118A         	fcall	_ADC_Sample
  1355  04A8  00B4               	movwf	_test_adc	;volatile
  1356                           
  1357                           ;main.c: 864: if (0xA5 == test_adc)
  1358  04A9  30A5               	movlw	165
  1359  04AA  0634               	xorwf	_test_adc,w	;volatile
  1360  04AB  1D03               	btfss	3,2
  1361  04AC  2CDE               	goto	l4920
  1362                           
  1363                           ;main.c: 865: {
  1364                           ;main.c: 866: volatile unsigned long power_temp;
  1365                           ;main.c: 868: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1366  04AD  3096               	movlw	150
  1367  04AE  01D2               	clrf	___ftdiv@f1
  1368  04AF  00D3               	movwf	___ftdiv@f1+1
  1369  04B0  304A               	movlw	74
  1370  04B1  00D4               	movwf	___ftdiv@f1+2
  1371  04B2  0848               	movf	_adresult+1,w	;volatile
  1372  04B3  00CD               	movwf	___lwtoft@c+1
  1373  04B4  0847               	movf	_adresult,w	;volatile
  1374  04B5  00CC               	movwf	___lwtoft@c
  1375  04B6  25CB  118A         	fcall	___lwtoft
  1376  04B8  084C               	movf	?___lwtoft,w
  1377  04B9  00CF               	movwf	___ftdiv@f2
  1378  04BA  084D               	movf	?___lwtoft+1,w
  1379  04BB  00D0               	movwf	___ftdiv@f2+1
  1380  04BC  084E               	movf	?___lwtoft+2,w
  1381  04BD  00D1               	movwf	___ftdiv@f2+2
  1382  04BE  2510  118A         	fcall	___ftdiv
  1383  04C0  084F               	movf	?___ftdiv,w
  1384  04C1  00DE               	movwf	___fttol@f1
  1385  04C2  0850               	movf	?___ftdiv+1,w
  1386  04C3  00DF               	movwf	___fttol@f1+1
  1387  04C4  0851               	movf	?___ftdiv+2,w
  1388  04C5  00E0               	movwf	___fttol@f1+2
  1389  04C6  2572  118A         	fcall	___fttol
  1390  04C8  0861               	movf	?___fttol+3,w
  1391  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  1392  04CA  00C1               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1393  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  1394  04CC  0860               	movf	?___fttol+2,w
  1395  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  1396  04CE  00C0               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1397  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  1398  04D0  085F               	movf	?___fttol+1,w
  1399  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  1400  04D2  00BF               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1401  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1402  04D4  085E               	movf	?___fttol,w
  1403  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  1404  04D6  00BE               	movwf	workCtr@power_temp^(0+128)	;volatile
  1405                           
  1406                           ;main.c: 869: power_ad = (unsigned int)(power_temp);
  1407  04D7  083F               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1408  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  1409  04D9  00A7               	movwf	_power_ad+1	;volatile
  1410  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  1411  04DB  083E               	movf	workCtr@power_temp^(0+128),w	;volatile
  1412  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1413  04DD  00A6               	movwf	_power_ad	;volatile
  1414  04DE                     l4920:	
  1415                           
  1416                           ;main.c: 870: }
  1417                           ;main.c: 871: if(workStep == 2 && power_ad < 2900)
  1418  04DE  3002               	movlw	2
  1419  04DF  0644               	xorwf	_workStep,w
  1420  04E0  1D03               	btfss	3,2
  1421  04E1  2CF2               	goto	l4930
  1422  04E2  300B               	movlw	11
  1423  04E3  0227               	subwf	_power_ad+1,w	;volatile
  1424  04E4  3054               	movlw	84
  1425  04E5  1903               	skipnz
  1426  04E6  0226               	subwf	_power_ad,w	;volatile
  1427  04E7  1803               	skipnc
  1428  04E8  2CF2               	goto	l4930
  1429                           
  1430                           ;main.c: 872: {
  1431                           ;main.c: 873: if(++lowFanTime > 200)
  1432  04E9  30C9               	movlw	201
  1433  04EA  0ABA               	incf	_lowFanTime,f
  1434  04EB  023A               	subwf	_lowFanTime,w
  1435  04EC  1C03               	skipc
  1436  04ED  2CF3               	goto	l4932
  1437                           
  1438                           ;main.c: 874: {
  1439                           ;main.c: 875: lowFanTime = 0;
  1440  04EE  01BA               	clrf	_lowFanTime
  1441                           
  1442                           ;main.c: 876: workStep = 1;
  1443  04EF  01C4               	clrf	_workStep
  1444  04F0  0AC4               	incf	_workStep,f
  1445  04F1  2CF3               	goto	l4932
  1446  04F2                     l4930:	
  1447                           
  1448                           ;main.c: 879: else
  1449                           ;main.c: 880: {
  1450                           ;main.c: 881: lowFanTime = 0;
  1451  04F2  01BA               	clrf	_lowFanTime
  1452  04F3                     l4932:	
  1453                           
  1454                           ;main.c: 882: }
  1455                           ;main.c: 883: if(power_ad < 2800)
  1456  04F3  300A               	movlw	10
  1457  04F4  0227               	subwf	_power_ad+1,w	;volatile
  1458  04F5  30F0               	movlw	240
  1459  04F6  1903               	skipnz
  1460  04F7  0226               	subwf	_power_ad,w	;volatile
  1461  04F8  1803               	skipnc
  1462  04F9  2D05               	goto	l4940
  1463                           
  1464                           ;main.c: 884: {
  1465                           ;main.c: 885: if(++lowBatTime > 200)
  1466  04FA  30C9               	movlw	201
  1467  04FB  0ABB               	incf	_lowBatTime,f
  1468  04FC  023B               	subwf	_lowBatTime,w
  1469  04FD  1C03               	skipc
  1470  04FE  2D06               	goto	l4942
  1471                           
  1472                           ;main.c: 886: {
  1473                           ;main.c: 887: lowBatTime = 0;
  1474  04FF  01BB               	clrf	_lowBatTime
  1475                           
  1476                           ;main.c: 888: lowBatLock = 1;
  1477  0500  01BC               	clrf	_lowBatLock
  1478  0501  0ABC               	incf	_lowBatLock,f
  1479                           
  1480                           ;main.c: 889: workStep = 0;
  1481  0502  01C4               	clrf	_workStep
  1482                           
  1483                           ;main.c: 890: wuhuaFlag = 0;
  1484  0503  01C3               	clrf	_wuhuaFlag
  1485  0504  2D06               	goto	l4942
  1486  0505                     l4940:	
  1487                           
  1488                           ;main.c: 893: else
  1489                           ;main.c: 894: {
  1490                           ;main.c: 895: lowBatTime = 0;
  1491  0505  01BB               	clrf	_lowBatTime
  1492  0506                     l4942:	
  1493                           
  1494                           ;main.c: 896: }
  1495                           ;main.c: 897: if(firstTime > 0)
  1496  0506  086C               	movf	_firstTime,w
  1497  0507  1903               	btfsc	3,2
  1498  0508  2D0B               	goto	l4946
  1499                           
  1500                           ;main.c: 898: {
  1501                           ;main.c: 899: firstTime--;
  1502  0509  03EC               	decf	_firstTime,f
  1503                           
  1504                           ;main.c: 900: }
  1505  050A  0008               	return
  1506  050B                     l4946:	
  1507                           
  1508                           ;main.c: 901: else
  1509                           ;main.c: 902: {
  1510                           ;main.c: 903: keyLedCtr();
  1511  050B  26E9  118A         	fcall	_keyLedCtr
  1512                           
  1513                           ;main.c: 904: fanCtr();
  1514  050D  240C  118A         	fcall	_fanCtr
  1515                           
  1516                           ;main.c: 905: wuhuaCtr();
  1517  050F  2F61               	ljmp	l4614
  1518  0510                     __end_of_workCtr:	
  1519  0510                     __ptext14:	
  1520 ;; *************** function ___ftdiv *****************
  1521 ;; Defined at:
  1522 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  f2              3    6[BANK0 ] float 
  1525 ;;  f1              3    9[BANK0 ] float 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  f3              3   16[BANK0 ] float 
  1528 ;;  sign            1   20[BANK0 ] unsigned char 
  1529 ;;  exp             1   19[BANK0 ] unsigned char 
  1530 ;;  cntr            1   15[BANK0 ] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  3    6[BANK0 ] float 
  1533 ;; Registers used:
  1534 ;;		wreg, status,2, status,0, pclath, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 300/0
  1537 ;;		On exit  : 300/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1540 ;;      Params:         0       6       0       0
  1541 ;;      Locals:         0       6       0       0
  1542 ;;      Temps:          0       3       0       0
  1543 ;;      Totals:         0      15       0       0
  1544 ;;Total ram usage:       15 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    3
  1547 ;; This function calls:
  1548 ;;		___ftpack
  1549 ;; This function is called by:
  1550 ;;		_workCtr
  1551 ;; This function uses a non-reentrant model
  1552 ;;
  1553                           
  1554                           
  1555                           ;psect for function ___ftdiv
  1556  0510                     ___ftdiv:	
  1557                           
  1558                           ;incstack = 0
  1559                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1560  0510  0852               	movf	___ftdiv@f1,w
  1561  0511  00D5               	movwf	??___ftdiv
  1562  0512  0853               	movf	___ftdiv@f1+1,w
  1563  0513  00D6               	movwf	??___ftdiv+1
  1564  0514  0854               	movf	___ftdiv@f1+2,w
  1565  0515  00D7               	movwf	??___ftdiv+2
  1566  0516  1003               	clrc
  1567  0517  0D56               	rlf	??___ftdiv+1,w
  1568  0518  0D57               	rlf	??___ftdiv+2,w
  1569  0519  00DC               	movwf	___ftdiv@exp
  1570  051A  085C               	movf	___ftdiv@exp,w
  1571  051B  1D03               	btfss	3,2
  1572  051C  2D1E               	goto	l4704
  1573  051D  2FB1               	ljmp	PL36	;call to abstracted procedure
  1574  051E                     l4704:	
  1575  051E  084F               	movf	___ftdiv@f2,w
  1576  051F  00D5               	movwf	??___ftdiv
  1577  0520  0850               	movf	___ftdiv@f2+1,w
  1578  0521  00D6               	movwf	??___ftdiv+1
  1579  0522  0851               	movf	___ftdiv@f2+2,w
  1580  0523  00D7               	movwf	??___ftdiv+2
  1581  0524  1003               	clrc
  1582  0525  0D56               	rlf	??___ftdiv+1,w
  1583  0526  0D57               	rlf	??___ftdiv+2,w
  1584  0527  00DD               	movwf	___ftdiv@sign
  1585  0528  085D               	movf	___ftdiv@sign,w
  1586  0529  1D03               	btfss	3,2
  1587  052A  2D2C               	goto	l1614
  1588  052B  2FB1               	ljmp	PL36	;call to abstracted procedure
  1589  052C                     l1614:	
  1590  052C  3089               	movlw	137
  1591  052D  01D9               	clrf	___ftdiv@f3
  1592  052E  01DA               	clrf	___ftdiv@f3+1
  1593  052F  01DB               	clrf	___ftdiv@f3+2
  1594  0530  075D               	addwf	___ftdiv@sign,w
  1595  0531  00D5               	movwf	??___ftdiv
  1596  0532  02DC               	subwf	___ftdiv@exp,f
  1597  0533  0854               	movf	___ftdiv@f1+2,w
  1598  0534  00DD               	movwf	___ftdiv@sign
  1599  0535  0851               	movf	___ftdiv@f2+2,w
  1600  0536  06DD               	xorwf	___ftdiv@sign,f
  1601  0537  3080               	movlw	128
  1602  0538  05DD               	andwf	___ftdiv@sign,f
  1603  0539  3018               	movlw	24
  1604  053A  17D3               	bsf	___ftdiv@f1+1,7
  1605  053B  01D4               	clrf	___ftdiv@f1+2
  1606  053C  17D0               	bsf	___ftdiv@f2+1,7
  1607  053D  01D1               	clrf	___ftdiv@f2+2
  1608  053E  00D8               	movwf	___ftdiv@cntr
  1609  053F                     l4726:	
  1610  053F  1003               	clrc
  1611  0540  0DD9               	rlf	___ftdiv@f3,f
  1612  0541  0DDA               	rlf	___ftdiv@f3+1,f
  1613  0542  0DDB               	rlf	___ftdiv@f3+2,f
  1614  0543  0851               	movf	___ftdiv@f2+2,w
  1615  0544  0254               	subwf	___ftdiv@f1+2,w
  1616  0545  1D03               	skipz
  1617  0546  2D4D               	goto	u5165
  1618  0547  0850               	movf	___ftdiv@f2+1,w
  1619  0548  0253               	subwf	___ftdiv@f1+1,w
  1620  0549  1D03               	skipz
  1621  054A  2D4D               	goto	u5165
  1622  054B  084F               	movf	___ftdiv@f2,w
  1623  054C  0252               	subwf	___ftdiv@f1,w
  1624  054D                     u5165:	
  1625  054D  1C03               	skipc
  1626  054E  2D5B               	goto	L4
  1627  054F  084F               	movf	___ftdiv@f2,w
  1628  0550  02D2               	subwf	___ftdiv@f1,f
  1629  0551  0850               	movf	___ftdiv@f2+1,w
  1630  0552  1C03               	skipc
  1631  0553  0F50               	incfsz	___ftdiv@f2+1,w
  1632  0554  02D3               	subwf	___ftdiv@f1+1,f
  1633  0555  0851               	movf	___ftdiv@f2+2,w
  1634  0556  1C03               	skipc
  1635  0557  0A51               	incf	___ftdiv@f2+2,w
  1636  0558  02D4               	subwf	___ftdiv@f1+2,f
  1637  0559  1459               	bsf	___ftdiv@f3,0
  1638  055A  1003               	clrc
  1639  055B                     L4:	
  1640  055B  0DD2               	rlf	___ftdiv@f1,f
  1641  055C  0DD3               	rlf	___ftdiv@f1+1,f
  1642  055D  0DD4               	rlf	___ftdiv@f1+2,f
  1643  055E  0BD8               	decfsz	___ftdiv@cntr,f
  1644  055F  2D3F               	goto	l4726
  1645  0560  0859               	movf	___ftdiv@f3,w
  1646  0561  00F3               	movwf	___ftpack@arg
  1647  0562  085A               	movf	___ftdiv@f3+1,w
  1648  0563  00F4               	movwf	___ftpack@arg+1
  1649  0564  085B               	movf	___ftdiv@f3+2,w
  1650  0565  00F5               	movwf	___ftpack@arg+2
  1651  0566  085C               	movf	___ftdiv@exp,w
  1652  0567  00F6               	movwf	___ftpack@exp
  1653  0568  085D               	movf	___ftdiv@sign,w
  1654  0569  00F7               	movwf	___ftpack@sign
  1655  056A  25DB               	fcall	___ftpack
  1656  056B  0873               	movf	?___ftpack,w
  1657  056C  00CF               	movwf	?___ftdiv
  1658  056D  0874               	movf	?___ftpack+1,w
  1659  056E  00D0               	movwf	?___ftdiv+1
  1660  056F  0875               	movf	?___ftpack+2,w
  1661  0570  00D1               	movwf	?___ftdiv+2
  1662  0571  0008               	return
  1663  0572                     __end_of___ftdiv:	
  1664  0572                     __ptext13:	
  1665 ;; *************** function ___fttol *****************
  1666 ;; Defined at:
  1667 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  f1              3   21[BANK0 ] float 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  lval            4   29[BANK0 ] unsigned long 
  1672 ;;  exp1            1   33[BANK0 ] unsigned char 
  1673 ;;  sign1           1   28[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  4   21[BANK0 ] long 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 300/0
  1680 ;;		On exit  : 300/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1683 ;;      Params:         0       4       0       0
  1684 ;;      Locals:         0       6       0       0
  1685 ;;      Temps:          0       3       0       0
  1686 ;;      Totals:         0      13       0       0
  1687 ;;Total ram usage:       13 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    2
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_workCtr
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function ___fttol
  1699  0572                     ___fttol:	
  1700                           
  1701                           ;incstack = 0
  1702                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1703  0572  27A0  118A         	fcall	PL26	;call to abstracted procedure
  1704  0574  1003               	clrc
  1705  0575  0D63               	rlf	??___fttol+1,w
  1706  0576  0D64               	rlf	??___fttol+2,w
  1707  0577  00EA               	movwf	___fttol@exp1
  1708  0578  086A               	movf	___fttol@exp1,w
  1709  0579  1D03               	btfss	3,2
  1710  057A  2D80               	goto	l4744
  1711  057B                     l4742:	
  1712  057B  01DE               	clrf	?___fttol
  1713  057C  01DF               	clrf	?___fttol+1
  1714  057D  01E0               	clrf	?___fttol+2
  1715  057E  01E1               	clrf	?___fttol+3
  1716  057F  0008               	return
  1717  0580                     l4744:	
  1718  0580  27A0  118A         	fcall	PL26	;call to abstracted procedure
  1719  0582  3017               	movlw	23
  1720  0583                     u5195:	
  1721  0583  1003               	clrc
  1722  0584  0CE4               	rrf	??___fttol+2,f
  1723  0585  0CE3               	rrf	??___fttol+1,f
  1724  0586  0CE2               	rrf	??___fttol,f
  1725  0587  3EFF               	addlw	-1
  1726  0588  1D03               	skipz
  1727  0589  2D83               	goto	u5195
  1728  058A  0862               	movf	??___fttol,w
  1729  058B  00E5               	movwf	___fttol@sign1
  1730  058C  17DF               	bsf	___fttol@f1+1,7
  1731  058D  01E0               	clrf	___fttol@f1+2
  1732  058E  085E               	movf	___fttol@f1,w
  1733  058F  00E6               	movwf	___fttol@lval
  1734  0590  085F               	movf	___fttol@f1+1,w
  1735  0591  00E7               	movwf	___fttol@lval+1
  1736  0592  0860               	movf	___fttol@f1+2,w
  1737  0593  00E8               	movwf	___fttol@lval+2
  1738  0594  308E               	movlw	142
  1739  0595  01E9               	clrf	___fttol@lval+3
  1740  0596  02EA               	subwf	___fttol@exp1,f
  1741  0597  1FEA               	btfss	___fttol@exp1,7
  1742  0598  2DA6               	goto	l4764
  1743  0599  086A               	movf	___fttol@exp1,w
  1744  059A  3A80               	xorlw	128
  1745  059B  3E8F               	addlw	143
  1746  059C  1C03               	btfss	3,0
  1747  059D  2D7B               	goto	l4742
  1748  059E                     l4760:	
  1749  059E  1003               	clrc
  1750  059F  0CE9               	rrf	___fttol@lval+3,f
  1751  05A0  0CE8               	rrf	___fttol@lval+2,f
  1752  05A1  0CE7               	rrf	___fttol@lval+1,f
  1753  05A2  0CE6               	rrf	___fttol@lval,f
  1754  05A3  0FEA               	incfsz	___fttol@exp1,f
  1755  05A4  2D9E               	goto	l4760
  1756  05A5  2DB4               	goto	l4772
  1757  05A6                     l4764:	
  1758  05A6  3018               	movlw	24
  1759  05A7  026A               	subwf	___fttol@exp1,w
  1760  05A8  1803               	btfsc	3,0
  1761  05A9  2D7B               	goto	l4742
  1762  05AA                     l4770:	
  1763  05AA  086A               	movf	___fttol@exp1,w
  1764  05AB  1903               	btfsc	3,2
  1765  05AC  2DB4               	goto	l4772
  1766  05AD  1003               	clrc
  1767  05AE  0DE6               	rlf	___fttol@lval,f
  1768  05AF  0DE7               	rlf	___fttol@lval+1,f
  1769  05B0  0DE8               	rlf	___fttol@lval+2,f
  1770  05B1  0DE9               	rlf	___fttol@lval+3,f
  1771  05B2  03EA               	decf	___fttol@exp1,f
  1772  05B3  2DAA               	goto	l4770
  1773  05B4                     l4772:	
  1774  05B4  0865               	movf	___fttol@sign1,w
  1775  05B5  1903               	btfsc	3,2
  1776  05B6  2DC2               	goto	l4776
  1777  05B7  09E6               	comf	___fttol@lval,f
  1778  05B8  09E7               	comf	___fttol@lval+1,f
  1779  05B9  09E8               	comf	___fttol@lval+2,f
  1780  05BA  09E9               	comf	___fttol@lval+3,f
  1781  05BB  0AE6               	incf	___fttol@lval,f
  1782  05BC  1903               	skipnz
  1783  05BD  0AE7               	incf	___fttol@lval+1,f
  1784  05BE  1903               	skipnz
  1785  05BF  0AE8               	incf	___fttol@lval+2,f
  1786  05C0  1903               	skipnz
  1787  05C1  0AE9               	incf	___fttol@lval+3,f
  1788  05C2                     l4776:	
  1789  05C2  0869               	movf	___fttol@lval+3,w
  1790  05C3  00E1               	movwf	?___fttol+3
  1791  05C4  0868               	movf	___fttol@lval+2,w
  1792  05C5  00E0               	movwf	?___fttol+2
  1793  05C6  0867               	movf	___fttol@lval+1,w
  1794  05C7  00DF               	movwf	?___fttol+1
  1795  05C8  0866               	movf	___fttol@lval,w
  1796  05C9  00DE               	movwf	?___fttol
  1797  05CA  0008               	return
  1798  05CB                     __end_of___fttol:	
  1799  05CB                     __ptext12:	
  1800 ;; *************** function ___lwtoft *****************
  1801 ;; Defined at:
  1802 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  c               2    3[BANK0 ] unsigned int 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  3    3[BANK0 ] float 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, pclath, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 300/0
  1813 ;;		On exit  : 300/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1816 ;;      Params:         0       3       0       0
  1817 ;;      Locals:         0       0       0       0
  1818 ;;      Temps:          0       0       0       0
  1819 ;;      Totals:         0       3       0       0
  1820 ;;Total ram usage:        3 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    3
  1823 ;; This function calls:
  1824 ;;		___ftpack
  1825 ;; This function is called by:
  1826 ;;		_workCtr
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           
  1831                           ;psect for function ___lwtoft
  1832  05CB                     ___lwtoft:	
  1833                           
  1834                           ;incstack = 0
  1835                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1836  05CB  084C               	movf	___lwtoft@c,w
  1837  05CC  00F3               	movwf	___ftpack@arg
  1838  05CD  084D               	movf	___lwtoft@c+1,w
  1839  05CE  00F4               	movwf	___ftpack@arg+1
  1840  05CF  308E               	movlw	142
  1841  05D0  01F5               	clrf	___ftpack@arg+2
  1842  05D1  00F6               	movwf	___ftpack@exp
  1843  05D2  01F7               	clrf	___ftpack@sign
  1844  05D3  25DB               	fcall	___ftpack
  1845  05D4  0873               	movf	?___ftpack,w
  1846  05D5  00CC               	movwf	?___lwtoft
  1847  05D6  0874               	movf	?___ftpack+1,w
  1848  05D7  00CD               	movwf	?___lwtoft+1
  1849  05D8  0875               	movf	?___ftpack+2,w
  1850  05D9  00CE               	movwf	?___lwtoft+2
  1851  05DA  0008               	return
  1852  05DB                     __end_of___lwtoft:	
  1853  05DB                     __ptext15:	
  1854 ;; *************** function ___ftpack *****************
  1855 ;; Defined at:
  1856 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;  arg             3    3[COMMON] unsigned um
  1859 ;;  exp             1    6[COMMON] unsigned char 
  1860 ;;  sign            1    7[COMMON] unsigned char 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;		None
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  3    3[COMMON] float 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2, status,0
  1867 ;; Tracked objects:
  1868 ;;		On entry : 300/0
  1869 ;;		On exit  : 300/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1872 ;;      Params:         5       0       0       0
  1873 ;;      Locals:         0       0       0       0
  1874 ;;      Temps:          0       3       0       0
  1875 ;;      Totals:         5       3       0       0
  1876 ;;Total ram usage:        8 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    2
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		___ftdiv
  1883 ;;		___lwtoft
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           
  1888                           ;psect for function ___ftpack
  1889  05DB                     ___ftpack:	
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1893  05DB  0876               	movf	___ftpack@exp,w
  1894  05DC  1903               	btfsc	3,2
  1895  05DD  2DE3               	goto	l1560
  1896  05DE  0875               	movf	___ftpack@arg+2,w
  1897  05DF  0474               	iorwf	___ftpack@arg+1,w
  1898  05E0  0473               	iorwf	___ftpack@arg,w
  1899  05E1  1D03               	skipz
  1900  05E2  2DEA               	goto	l4414
  1901  05E3                     l1560:	
  1902  05E3  01F3               	clrf	?___ftpack
  1903  05E4  01F4               	clrf	?___ftpack+1
  1904  05E5  01F5               	clrf	?___ftpack+2
  1905  05E6  0008               	return
  1906  05E7                     l4412:	
  1907  05E7  0AF6               	incf	___ftpack@exp,f
  1908  05E8  27A7  118A         	fcall	PL32	;call to abstracted procedure
  1909  05EA                     l4414:	
  1910  05EA  30FE               	movlw	254
  1911  05EB  0575               	andwf	___ftpack@arg+2,w
  1912  05EC  1903               	btfsc	3,2
  1913  05ED  2DF7               	goto	l4418
  1914  05EE  2DE7               	goto	l4412
  1915  05EF                     l4416:	
  1916  05EF  0AF6               	incf	___ftpack@exp,f
  1917  05F0  0AF3               	incf	___ftpack@arg,f
  1918  05F1  1903               	skipnz
  1919  05F2  0AF4               	incf	___ftpack@arg+1,f
  1920  05F3  1903               	skipnz
  1921  05F4  0AF5               	incf	___ftpack@arg+2,f
  1922  05F5  27A7  118A         	fcall	PL32	;call to abstracted procedure
  1923  05F7                     l4418:	
  1924  05F7  30FF               	movlw	255
  1925  05F8  0575               	andwf	___ftpack@arg+2,w
  1926  05F9  1903               	btfsc	3,2
  1927  05FA  2E05               	goto	l4422
  1928  05FB  2DEF               	goto	l4416
  1929  05FC                     l4424:	
  1930  05FC  3002               	movlw	2
  1931  05FD  0276               	subwf	___ftpack@exp,w
  1932  05FE  1C03               	btfss	3,0
  1933  05FF  2E07               	goto	l1572
  1934  0600  03F6               	decf	___ftpack@exp,f
  1935  0601  1003               	clrc
  1936  0602  0DF3               	rlf	___ftpack@arg,f
  1937  0603  0DF4               	rlf	___ftpack@arg+1,f
  1938  0604  0DF5               	rlf	___ftpack@arg+2,f
  1939  0605                     l4422:	
  1940  0605  1FF4               	btfss	___ftpack@arg+1,7
  1941  0606  2DFC               	goto	l4424
  1942  0607                     l1572:	
  1943  0607  1C76               	btfss	___ftpack@exp,0
  1944  0608  13F4               	bcf	___ftpack@arg+1,7
  1945  0609  1003               	clrc
  1946  060A  0CF6               	rrf	___ftpack@exp,f
  1947  060B  0876               	movf	___ftpack@exp,w
  1948  060C  00CB               	movwf	??___ftpack+2
  1949  060D  01CA               	clrf	??___ftpack+1
  1950  060E  01C9               	clrf	??___ftpack
  1951  060F  0849               	movf	??___ftpack,w
  1952  0610  04F3               	iorwf	___ftpack@arg,f
  1953  0611  084A               	movf	??___ftpack+1,w
  1954  0612  04F4               	iorwf	___ftpack@arg+1,f
  1955  0613  084B               	movf	??___ftpack+2,w
  1956  0614  04F5               	iorwf	___ftpack@arg+2,f
  1957  0615  0877               	movf	___ftpack@sign,w
  1958  0616  1D03               	btfss	3,2
  1959  0617  17F5               	bsf	___ftpack@arg+2,7
  1960  0618  0008               	return
  1961  0619                     __end_of___ftpack:	
  1962  0619                     __ptext11:	
  1963 ;; *************** function _ADC_Sample *****************
  1964 ;; Defined at:
  1965 ;;		line 301 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  adch            1    wreg     unsigned char 
  1968 ;;  adldo           1    3[COMMON] unsigned char 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  adch            1    1[BANK0 ] unsigned char 
  1971 ;;  j               1    0[BANK0 ] unsigned char 
  1972 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1973 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1974 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1975 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1976 ;;  i               1    2[BANK0 ] unsigned char 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      unsigned char 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0
  1981 ;; Tracked objects:
  1982 ;;		On entry : 300/0
  1983 ;;		On exit  : 300/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1986 ;;      Params:         1       0       0       0
  1987 ;;      Locals:         0      13       0       0
  1988 ;;      Temps:          4       0       0       0
  1989 ;;      Totals:         5      13       0       0
  1990 ;;Total ram usage:       18 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    2
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_fanCtr
  1997 ;;		_workCtr
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           
  2002                           ;psect for function _ADC_Sample
  2003  0619                     _ADC_Sample:	
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2007                           ;ADC_Sample@adch stored from wreg
  2008  0619  00CA               	movwf	ADC_Sample@adch
  2009                           
  2010                           ;main.c: 303: volatile unsigned long adsum = 0;
  2011                           
  2012                           ;main.c: 304: volatile unsigned int admin = 0, admax = 0;
  2013  061A  2797  118A         	fcall	PL18	;call to abstracted procedure
  2014                           
  2015                           ;main.c: 305: volatile unsigned int ad_temp = 0;
  2016  061C  01D4               	clrf	ADC_Sample@ad_temp	;volatile
  2017  061D  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  2018                           
  2019                           ;main.c: 307: if ((!LDO_EN) && (adldo & 0x04) )
  2020  061E  1683               	bsf	3,5	;RP0=1, select bank1
  2021  061F  1D16               	btfss	22,2	;volatile
  2022  0620  1D73               	btfss	ADC_Sample@adldo,2
  2023  0621  2E2A               	goto	l4260
  2024                           
  2025                           ;main.c: 308: {
  2026                           ;main.c: 310: ADCON1 = adldo;
  2027  0622  0873               	movf	ADC_Sample@adldo,w
  2028  0623  0096               	movwf	22	;volatile
  2029                           
  2030                           ;main.c: 311: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2031  0624  3042               	movlw	66
  2032  0625  00F4               	movwf	??_ADC_Sample
  2033  0626                     u5727:	
  2034  0626  0BF4               	decfsz	??_ADC_Sample,f
  2035  0627  2E26               	goto	u5727
  2036  0628  0000               	nop
  2037                           
  2038                           ;main.c: 312: }
  2039  0629  2E2C               	goto	l4262
  2040  062A                     l4260:	
  2041                           
  2042                           ;main.c: 313: else
  2043                           ;main.c: 314: ADCON1 = adldo;
  2044  062A  0873               	movf	ADC_Sample@adldo,w
  2045  062B  0096               	movwf	22	;volatile
  2046  062C                     l4262:	
  2047                           
  2048                           ;main.c: 316: if(adch & 0x10)
  2049  062C  1283               	bcf	3,5	;RP0=0, select bank0
  2050  062D  1303               	bcf	3,6	;RP1=0, select bank0
  2051  062E  1E4A               	btfss	ADC_Sample@adch,4
  2052  062F  2E35               	goto	l4270
  2053                           
  2054                           ;main.c: 317: {
  2055                           ;main.c: 318: CHS4 = 1;
  2056  0630  1683               	bsf	3,5	;RP0=1, select bank1
  2057  0631  1716               	bsf	22,6	;volatile
  2058                           
  2059                           ;main.c: 319: adch &= 0x0f;
  2060  0632  300F               	movlw	15
  2061  0633  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0634  05CA               	andwf	ADC_Sample@adch,f
  2063  0635                     l4270:	
  2064                           
  2065                           ;main.c: 322: for (i = 0; i < 10; i++)
  2066  0635  01CB               	clrf	ADC_Sample@i
  2067  0636                     l4276:	
  2068                           
  2069                           ;main.c: 323: {
  2070                           ;main.c: 324: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2071  0636  084A               	movf	ADC_Sample@adch,w
  2072  0637  00F4               	movwf	??_ADC_Sample
  2073  0638  3001               	movlw	1
  2074  0639  1003               	clrc
  2075  063A                     L3:	
  2076  063A  0DF4               	rlf	??_ADC_Sample,f
  2077  063B  3EFF               	addlw	-1
  2078  063C  1003               	clrc
  2079  063D  1D03               	skipz
  2080  063E  2E3A               	goto	L3
  2081  063F  0D74               	rlf	??_ADC_Sample,w
  2082  0640  3841               	iorlw	65
  2083  0641  1683               	bsf	3,5	;RP0=1, select bank1
  2084  0642  0095               	movwf	21	;volatile
  2085  0643  0000               	nop	;# 
  2086  0644  0000               	nop	;# 
  2087  0645  0000               	nop	;# 
  2088  0646  0000               	nop	;# 
  2089                           
  2090                           ;main.c: 329: GODONE = 1;
  2091  0647  1683               	bsf	3,5	;RP0=1, select bank1
  2092  0648  1303               	bcf	3,6	;RP1=0, select bank1
  2093  0649  1495               	bsf	21,1	;volatile
  2094                           
  2095                           ;main.c: 331: unsigned char j = 0;
  2096  064A  1283               	bcf	3,5	;RP0=0, select bank0
  2097  064B  01C9               	clrf	ADC_Sample@j
  2098  064C                     l993:	
  2099                           ;main.c: 332: while (GODONE)
  2100                           
  2101  064C  1683               	bsf	3,5	;RP0=1, select bank1
  2102  064D  1C95               	btfss	21,1	;volatile
  2103  064E  2E56               	goto	l4286
  2104                           
  2105                           ;main.c: 333: {
  2106                           ;main.c: 334: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2107  064F  2E50               	nop2	;2 cycle nop
  2108  0650  2E51               	nop2	;2 cycle nop
  2109                           
  2110                           ;main.c: 336: if (0 == (--j))
  2111  0651  1283               	bcf	3,5	;RP0=0, select bank0
  2112  0652  1303               	bcf	3,6	;RP1=0, select bank0
  2113  0653  0BC9               	decfsz	ADC_Sample@j,f
  2114  0654  2E4C               	goto	l993
  2115                           
  2116                           ;main.c: 337: return 0;
  2117  0655  3400               	retlw	0
  2118  0656                     l4286:	
  2119                           
  2120                           ;main.c: 338: }
  2121                           ;main.c: 340: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2122  0656  0819               	movf	25,w	;volatile
  2123  0657  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0658  00D4               	movwf	ADC_Sample@ad_temp	;volatile
  2125  0659  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  2126  065A  0ED4               	swapf	ADC_Sample@ad_temp,f	;volatile
  2127  065B  0ED5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2128  065C  30F0               	movlw	240
  2129  065D  05D5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2130  065E  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2131  065F  390F               	andlw	15
  2132  0660  04D5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2133  0661  30F0               	movlw	240
  2134  0662  05D4               	andwf	ADC_Sample@ad_temp,f	;volatile
  2135  0663  1683               	bsf	3,5	;RP0=1, select bank1
  2136  0664  0E18               	swapf	24,w	;volatile
  2137  0665  390F               	andlw	15
  2138  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2139  0667  07D4               	addwf	ADC_Sample@ad_temp,f	;volatile
  2140  0668  1803               	skipnc
  2141  0669  0AD5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2142                           
  2143                           ;main.c: 342: if (0 == admax)
  2144  066A  0852               	movf	ADC_Sample@admax,w	;volatile
  2145  066B  0453               	iorwf	ADC_Sample@admax+1,w	;volatile
  2146  066C  1D03               	btfss	3,2
  2147  066D  2E71               	goto	l4294
  2148                           
  2149                           ;main.c: 343: {
  2150                           ;main.c: 344: admax = ad_temp;
  2151  066E  27AC  118A         	fcall	PL34	;call to abstracted procedure
  2152  0670  2E84               	goto	l4300
  2153  0671                     l4294:	
  2154                           ;main.c: 346: }
  2155                           
  2156                           ;main.c: 345: admin = ad_temp;
  2157                           
  2158                           
  2159                           ;main.c: 347: else if (ad_temp > admax)
  2160  0671  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2161  0672  0253               	subwf	ADC_Sample@admax+1,w	;volatile
  2162  0673  1D03               	skipz
  2163  0674  2E77               	goto	u4445
  2164  0675  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2165  0676  0252               	subwf	ADC_Sample@admax,w	;volatile
  2166  0677                     u4445:	
  2167  0677  1803               	skipnc
  2168  0678  2E7C               	goto	l4298
  2169                           
  2170                           ;main.c: 348: admax = ad_temp;
  2171  0679  27AC  118A         	fcall	PL34	;call to abstracted procedure
  2172  067B  2E88               	goto	l999
  2173  067C                     l4298:	
  2174                           
  2175                           ;main.c: 349: else if (ad_temp < admin)
  2176  067C  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2177  067D  0255               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2178  067E  1D03               	skipz
  2179  067F  2E82               	goto	u4455
  2180  0680  0850               	movf	ADC_Sample@admin,w	;volatile
  2181  0681  0254               	subwf	ADC_Sample@ad_temp,w	;volatile
  2182  0682                     u4455:	
  2183  0682  1803               	skipnc
  2184  0683  2E88               	goto	l999
  2185  0684                     l4300:	
  2186                           
  2187                           ;main.c: 350: admin = ad_temp;
  2188  0684  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2189  0685  00D1               	movwf	ADC_Sample@admin+1	;volatile
  2190  0686  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2191  0687  00D0               	movwf	ADC_Sample@admin	;volatile
  2192  0688                     l999:	
  2193                           
  2194                           ;main.c: 352: adsum += ad_temp;
  2195  0688  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2196  0689  00F4               	movwf	??_ADC_Sample
  2197  068A  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2198  068B  00F5               	movwf	??_ADC_Sample+1
  2199  068C  01F6               	clrf	??_ADC_Sample+2
  2200  068D  01F7               	clrf	??_ADC_Sample+3
  2201  068E  0874               	movf	??_ADC_Sample,w
  2202  068F  07CC               	addwf	ADC_Sample@adsum,f	;volatile
  2203  0690  0875               	movf	??_ADC_Sample+1,w
  2204  0691  1103               	clrz
  2205  0692  1803               	skipnc
  2206  0693  3E01               	addlw	1
  2207  0694  1D03               	btfss	3,2
  2208  0695  07CD               	addwf	ADC_Sample@adsum+1,f	;volatile
  2209  0696  0876               	movf	??_ADC_Sample+2,w
  2210  0697  1103               	clrz
  2211  0698  1803               	skipnc
  2212  0699  3E01               	addlw	1
  2213  069A  1D03               	btfss	3,2
  2214  069B  07CE               	addwf	ADC_Sample@adsum+2,f	;volatile
  2215  069C  0877               	movf	??_ADC_Sample+3,w
  2216  069D  1103               	clrz
  2217  069E  1803               	skipnc
  2218  069F  3E01               	addlw	1
  2219  06A0  1D03               	btfss	3,2
  2220  06A1  07CF               	addwf	ADC_Sample@adsum+3,f	;volatile
  2221  06A2  300A               	movlw	10
  2222  06A3  0ACB               	incf	ADC_Sample@i,f
  2223  06A4  024B               	subwf	ADC_Sample@i,w
  2224  06A5  1C03               	skipc
  2225  06A6  2E36               	goto	l4276
  2226                           
  2227                           ;main.c: 353: }
  2228                           ;main.c: 354: adsum -= admax;
  2229  06A7  0852               	movf	ADC_Sample@admax,w	;volatile
  2230  06A8  00F4               	movwf	??_ADC_Sample
  2231  06A9  0853               	movf	ADC_Sample@admax+1,w	;volatile
  2232  06AA  2788  118A         	fcall	PL6	;call to abstracted procedure
  2233  06AC  1C03               	skipc
  2234  06AD  0F77               	incfsz	??_ADC_Sample+3,w
  2235  06AE  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  2236                           
  2237                           ;main.c: 355: if (adsum >= admin)
  2238  06AF  0850               	movf	ADC_Sample@admin,w	;volatile
  2239  06B0  00F4               	movwf	??_ADC_Sample
  2240  06B1  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2241  06B2  00F5               	movwf	??_ADC_Sample+1
  2242  06B3  01F6               	clrf	??_ADC_Sample+2
  2243  06B4  01F7               	clrf	??_ADC_Sample+3
  2244  06B5  0877               	movf	??_ADC_Sample+3,w
  2245  06B6  024F               	subwf	ADC_Sample@adsum+3,w	;volatile
  2246  06B7  1D03               	skipz
  2247  06B8  2EC3               	goto	u4495
  2248  06B9  0876               	movf	??_ADC_Sample+2,w
  2249  06BA  024E               	subwf	ADC_Sample@adsum+2,w	;volatile
  2250  06BB  1D03               	skipz
  2251  06BC  2EC3               	goto	u4495
  2252  06BD  0875               	movf	??_ADC_Sample+1,w
  2253  06BE  024D               	subwf	ADC_Sample@adsum+1,w	;volatile
  2254  06BF  1D03               	skipz
  2255  06C0  2EC3               	goto	u4495
  2256  06C1  0874               	movf	??_ADC_Sample,w
  2257  06C2  024C               	subwf	ADC_Sample@adsum,w	;volatile
  2258  06C3                     u4495:	
  2259  06C3  1C03               	skipc
  2260  06C4  2ECE               	goto	l1003
  2261                           
  2262                           ;main.c: 356: adsum -= admin;
  2263  06C5  0850               	movf	ADC_Sample@admin,w	;volatile
  2264  06C6  00F4               	movwf	??_ADC_Sample
  2265  06C7  0851               	movf	ADC_Sample@admin+1,w	;volatile
  2266  06C8  2788  118A         	fcall	PL6	;call to abstracted procedure
  2267  06CA  1C03               	skipc
  2268  06CB  0F77               	incfsz	??_ADC_Sample+3,w
  2269  06CC  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  2270  06CD  2ED2               	goto	l4310
  2271  06CE                     l1003:	
  2272                           
  2273                           ;main.c: 357: else
  2274                           ;main.c: 358: adsum = 0;
  2275  06CE  01CC               	clrf	ADC_Sample@adsum	;volatile
  2276  06CF  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2277  06D0  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2278  06D1  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2279  06D2                     l4310:	
  2280                           
  2281                           ;main.c: 360: adresult = adsum >> 3;
  2282  06D2  084C               	movf	ADC_Sample@adsum,w	;volatile
  2283  06D3  00F4               	movwf	??_ADC_Sample
  2284  06D4  084D               	movf	ADC_Sample@adsum+1,w	;volatile
  2285  06D5  00F5               	movwf	??_ADC_Sample+1
  2286  06D6  084E               	movf	ADC_Sample@adsum+2,w	;volatile
  2287  06D7  00F6               	movwf	??_ADC_Sample+2
  2288  06D8  084F               	movf	ADC_Sample@adsum+3,w	;volatile
  2289  06D9  00F7               	movwf	??_ADC_Sample+3
  2290  06DA  3003               	movlw	3
  2291  06DB                     u4515:	
  2292  06DB  1003               	clrc
  2293  06DC  0CF7               	rrf	??_ADC_Sample+3,f
  2294  06DD  0CF6               	rrf	??_ADC_Sample+2,f
  2295  06DE  0CF5               	rrf	??_ADC_Sample+1,f
  2296  06DF  0CF4               	rrf	??_ADC_Sample,f
  2297  06E0  3EFF               	addlw	-1
  2298  06E1  1D03               	skipz
  2299  06E2  2EDB               	goto	u4515
  2300  06E3  0875               	movf	??_ADC_Sample+1,w
  2301  06E4  00C8               	movwf	_adresult+1	;volatile
  2302  06E5  0874               	movf	??_ADC_Sample,w
  2303  06E6  00C7               	movwf	_adresult	;volatile
  2304                           
  2305                           ;main.c: 362: adsum = 0;
  2306                           
  2307                           ;main.c: 363: admin = 0;
  2308                           
  2309                           ;main.c: 364: admax = 0;
  2310  06E7  2797               	fcall	PL18	;call to abstracted procedure
  2311                           
  2312                           ;main.c: 365: return 0xA5;
  2313  06E8  34A5               	retlw	165
  2314  06E9                     __end_of_ADC_Sample:	
  2315  06E9                     __ptext5:	
  2316 ;; *************** function _keyLedCtr *****************
  2317 ;; Defined at:
  2318 ;;		line 692 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0, pclath, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 300/0
  2329 ;;		On exit  : 300/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2332 ;;      Params:         0       0       0       0
  2333 ;;      Locals:         0       0       0       0
  2334 ;;      Temps:          0       0       0       0
  2335 ;;      Totals:         0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    3
  2339 ;; This function calls:
  2340 ;;		___lwmod
  2341 ;; This function is called by:
  2342 ;;		_workCtr
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _keyLedCtr
  2348  06E9                     _keyLedCtr:	
  2349                           
  2350                           ;main.c: 694: if(shanshuoTime > 0)
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2354  06E9  082A               	movf	_shanshuoTime,w
  2355  06EA  042B               	iorwf	_shanshuoTime+1,w
  2356  06EB  1903               	btfsc	3,2
  2357  06EC  2F05               	goto	l4546
  2358                           
  2359                           ;main.c: 695: {
  2360                           ;main.c: 696: shanshuoTime--;
  2361  06ED  3001               	movlw	1
  2362  06EE  02AA               	subwf	_shanshuoTime,f
  2363  06EF  3000               	movlw	0
  2364  06F0  1C03               	skipc
  2365  06F1  03AB               	decf	_shanshuoTime+1,f
  2366  06F2  02AB               	subwf	_shanshuoTime+1,f
  2367                           
  2368                           ;main.c: 697: if((shanshuoTime % 75) < 37)
  2369  06F3  304B               	movlw	75
  2370  06F4  00F3               	movwf	___lwmod@divisor
  2371  06F5  01F4               	clrf	___lwmod@divisor+1
  2372  06F6  082B               	movf	_shanshuoTime+1,w
  2373  06F7  00F6               	movwf	___lwmod@dividend+1
  2374  06F8  082A               	movf	_shanshuoTime,w
  2375  06F9  00F5               	movwf	___lwmod@dividend
  2376  06FA  272D  118A         	fcall	___lwmod
  2377  06FC  3000               	movlw	0
  2378  06FD  0274               	subwf	?___lwmod+1,w
  2379  06FE  3025               	movlw	37
  2380  06FF  1903               	skipnz
  2381  0700  0273               	subwf	?___lwmod,w
  2382  0701  1803               	skipnc
  2383  0702  2F08               	goto	l1106
  2384  0703                     l4544:	
  2385                           
  2386                           ;main.c: 698: {
  2387                           ;main.c: 699: fanKeyFlag = 0;
  2388  0703  01B8               	clrf	_fanKeyFlag
  2389                           
  2390                           ;main.c: 700: }
  2391  0704  2F0A               	goto	l4552
  2392  0705                     l4546:	
  2393                           
  2394                           ;main.c: 706: else if(workStep > 0)
  2395  0705  0844               	movf	_workStep,w
  2396  0706  1903               	btfsc	3,2
  2397  0707  2F03               	goto	l4544
  2398  0708                     l1106:	
  2399                           
  2400                           ;main.c: 701: else
  2401                           ;main.c: 702: {
  2402                           ;main.c: 703: fanKeyFlag = 1;
  2403  0708  01B8               	clrf	_fanKeyFlag
  2404  0709  0AB8               	incf	_fanKeyFlag,f
  2405  070A                     l4552:	
  2406                           
  2407                           ;main.c: 713: }
  2408                           ;main.c: 715: if(shanshuoTime2 > 0)
  2409  070A  0828               	movf	_shanshuoTime2,w
  2410  070B  0429               	iorwf	_shanshuoTime2+1,w
  2411  070C  1903               	btfsc	3,2
  2412  070D  2F29               	goto	l4560
  2413                           
  2414                           ;main.c: 716: {
  2415                           ;main.c: 717: shanshuoTime2--;
  2416  070E  3001               	movlw	1
  2417  070F  02A8               	subwf	_shanshuoTime2,f
  2418  0710  3000               	movlw	0
  2419  0711  1C03               	skipc
  2420  0712  03A9               	decf	_shanshuoTime2+1,f
  2421  0713  02A9               	subwf	_shanshuoTime2+1,f
  2422                           
  2423                           ;main.c: 718: if((shanshuoTime2 % 75) < 37)
  2424  0714  304B               	movlw	75
  2425  0715  00F3               	movwf	___lwmod@divisor
  2426  0716  01F4               	clrf	___lwmod@divisor+1
  2427  0717  0829               	movf	_shanshuoTime2+1,w
  2428  0718  00F6               	movwf	___lwmod@dividend+1
  2429  0719  0828               	movf	_shanshuoTime2,w
  2430  071A  00F5               	movwf	___lwmod@dividend
  2431  071B  272D  118A         	fcall	___lwmod
  2432  071D  3000               	movlw	0
  2433  071E  0274               	subwf	?___lwmod+1,w
  2434  071F  3025               	movlw	37
  2435  0720  1903               	skipnz
  2436  0721  0273               	subwf	?___lwmod,w
  2437  0722  1803               	skipnc
  2438  0723  2F26               	goto	l1112
  2439  0724                     l4558:	
  2440                           
  2441                           ;main.c: 719: {
  2442                           ;main.c: 720: wuhuaKeyFlag = 0;
  2443  0724  01B7               	clrf	_wuhuaKeyFlag
  2444                           
  2445                           ;main.c: 721: }
  2446  0725  0008               	return
  2447  0726                     l1112:	
  2448                           
  2449                           ;main.c: 722: else
  2450                           ;main.c: 723: {
  2451                           ;main.c: 724: wuhuaKeyFlag = 1;
  2452  0726  01B7               	clrf	_wuhuaKeyFlag
  2453  0727  0AB7               	incf	_wuhuaKeyFlag,f
  2454  0728  0008               	return
  2455  0729                     l4560:	
  2456                           
  2457                           ;main.c: 727: else if(wuhuaFlag > 0)
  2458  0729  0843               	movf	_wuhuaFlag,w
  2459  072A  1D03               	btfss	3,2
  2460  072B  2F26               	goto	l1112
  2461  072C  2F24               	goto	l4558
  2462  072D                     __end_of_keyLedCtr:	
  2463  072D                     __ptext6:	
  2464 ;; *************** function ___lwmod *****************
  2465 ;; Defined at:
  2466 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  divisor         2    3[COMMON] unsigned int 
  2469 ;;  dividend        2    5[COMMON] unsigned int 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  counter         1    7[COMMON] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2    3[COMMON] unsigned int 
  2474 ;; Registers used:
  2475 ;;		wreg, status,2, status,0
  2476 ;; Tracked objects:
  2477 ;;		On entry : 300/0
  2478 ;;		On exit  : 300/0
  2479 ;;		Unchanged: 300/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2481 ;;      Params:         4       0       0       0
  2482 ;;      Locals:         1       0       0       0
  2483 ;;      Temps:          0       0       0       0
  2484 ;;      Totals:         5       0       0       0
  2485 ;;Total ram usage:        5 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    2
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		_keyLedCtr
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function ___lwmod
  2497  072D                     ___lwmod:	
  2498                           
  2499                           ;incstack = 0
  2500                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2501  072D  0873               	movf	___lwmod@divisor,w
  2502  072E  0474               	iorwf	___lwmod@divisor+1,w
  2503  072F  1903               	btfsc	3,2
  2504  0730  2F4C               	goto	l4448
  2505  0731  01F7               	clrf	___lwmod@counter
  2506  0732                     L1:	
  2507  0732  0AF7               	incf	___lwmod@counter,f
  2508  0733  1BF4               	btfsc	___lwmod@divisor+1,7
  2509  0734  2F39               	goto	l4440
  2510  0735  1003               	clrc
  2511  0736  0DF3               	rlf	___lwmod@divisor,f
  2512  0737  0DF4               	rlf	___lwmod@divisor+1,f
  2513  0738  2F32               	goto	L1
  2514  0739                     l4440:	
  2515  0739  0874               	movf	___lwmod@divisor+1,w
  2516  073A  0276               	subwf	___lwmod@dividend+1,w
  2517  073B  1D03               	skipz
  2518  073C  2F3F               	goto	u4705
  2519  073D  0873               	movf	___lwmod@divisor,w
  2520  073E  0275               	subwf	___lwmod@dividend,w
  2521  073F                     u4705:	
  2522  073F  1C03               	skipc
  2523  0740  2F48               	goto	L2
  2524  0741  0873               	movf	___lwmod@divisor,w
  2525  0742  02F5               	subwf	___lwmod@dividend,f
  2526  0743  0874               	movf	___lwmod@divisor+1,w
  2527  0744  1C03               	skipc
  2528  0745  03F6               	decf	___lwmod@dividend+1,f
  2529  0746  02F6               	subwf	___lwmod@dividend+1,f
  2530  0747  1003               	clrc
  2531  0748                     L2:	
  2532  0748  0CF4               	rrf	___lwmod@divisor+1,f
  2533  0749  0CF3               	rrf	___lwmod@divisor,f
  2534  074A  0BF7               	decfsz	___lwmod@counter,f
  2535  074B  2F39               	goto	l4440
  2536  074C                     l4448:	
  2537  074C  0876               	movf	___lwmod@dividend+1,w
  2538  074D  00F4               	movwf	?___lwmod+1
  2539  074E  0875               	movf	___lwmod@dividend,w
  2540  074F  00F3               	movwf	?___lwmod
  2541  0750  0008               	return
  2542  0751                     __end_of___lwmod:	
  2543  0751                     __ptext9:	
  2544 ;; *************** function _fanInit *****************
  2545 ;; Defined at:
  2546 ;;		line 757 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2, status,0
  2555 ;; Tracked objects:
  2556 ;;		On entry : 300/0
  2557 ;;		On exit  : 300/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2560 ;;      Params:         0       0       0       0
  2561 ;;      Locals:         0       0       0       0
  2562 ;;      Temps:          0       0       0       0
  2563 ;;      Totals:         0       0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    2
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_fanCtr
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _fanInit
  2576  0751                     _fanInit:	
  2577  0751                     l4338:	
  2578                           ;incstack = 0
  2579                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2580                           
  2581                           
  2582                           ;main.c: 760: PWMTH = 0x00;
  2583  0751  0198               	clrf	24	;volatile
  2584                           
  2585                           ;main.c: 761: PWMTL = 73;
  2586  0752  3049               	movlw	73
  2587  0753  0097               	movwf	23	;volatile
  2588                           
  2589                           ;main.c: 762: PWMD01H = 0x00;
  2590  0754  019E               	clrf	30	;volatile
  2591                           
  2592                           ;main.c: 763: PWMD1L = fanDuty;
  2593  0755  0842               	movf	_fanDuty,w
  2594  0756  009A               	movwf	26	;volatile
  2595                           
  2596                           ;main.c: 764: PWMCON1 = 0x40;
  2597  0757  3040               	movlw	64
  2598  0758  0096               	movwf	22	;volatile
  2599                           
  2600                           ;main.c: 765: PWMCON2 = 0x00;
  2601  0759  019D               	clrf	29	;volatile
  2602                           
  2603                           ;main.c: 766: PWMCON0 |= 0x22;
  2604  075A  3022               	movlw	34
  2605  075B  0495               	iorwf	21,f	;volatile
  2606  075C  0008               	return
  2607  075D                     __end_of_fanInit:	
  2608  075D                     __ptext8:	
  2609 ;; *************** function _fanStop *****************
  2610 ;; Defined at:
  2611 ;;		line 769 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		status,2
  2620 ;; Tracked objects:
  2621 ;;		On entry : 300/0
  2622 ;;		On exit  : 300/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2625 ;;      Params:         0       0       0       0
  2626 ;;      Locals:         0       0       0       0
  2627 ;;      Temps:          0       0       0       0
  2628 ;;      Totals:         0       0       0       0
  2629 ;;Total ram usage:        0 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    2
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_fanCtr
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function _fanStop
  2641  075D                     _fanStop:	
  2642                           
  2643                           ;main.c: 771: PWMD1L = 0;
  2644                           
  2645                           ;incstack = 0
  2646                           ; Regs used in _fanStop: [status,2]
  2647  075D  019A               	clrf	26	;volatile
  2648                           
  2649                           ;main.c: 772: PWMCON0 &= 0xFD;
  2650  075E  1095               	bcf	21,1	;volatile
  2651                           
  2652                           ;main.c: 773: PORTB &= 0x7F;
  2653  075F  1386               	bcf	6,7	;volatile
  2654  0760  0008               	return
  2655  0761                     __end_of_fanStop:	
  2656  0761                     __ptext2:	
  2657 ;; *************** function _wuhuaCtr *****************
  2658 ;; Defined at:
  2659 ;;		line 827 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 200/0
  2670 ;;		On exit  : 200/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2673 ;;      Params:         0       0       0       0
  2674 ;;      Locals:         0       0       0       0
  2675 ;;      Temps:          0       0       0       0
  2676 ;;      Totals:         0       0       0       0
  2677 ;;Total ram usage:        0 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		_pwmInit
  2682 ;;		_pwmStop
  2683 ;; This function is called by:
  2684 ;;		_workCtr
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _wuhuaCtr
  2690  0761                     _wuhuaCtr:	
  2691  0761                     l4614:	
  2692                           ;incstack = 0
  2693                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2694                           
  2695                           
  2696                           ;main.c: 829: if(count1s == 0)
  2697  0761  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0762  0845               	movf	_count1s,w
  2699  0763  1D03               	btfss	3,2
  2700  0764  2F6A               	goto	l4620
  2701                           
  2702                           ;main.c: 830: {
  2703                           ;main.c: 831: if(++count10s >= 10)
  2704  0765  300A               	movlw	10
  2705  0766  0AC1               	incf	_count10s,f
  2706  0767  0241               	subwf	_count10s,w
  2707  0768  1803               	btfsc	3,0
  2708                           
  2709                           ;main.c: 832: {
  2710                           ;main.c: 833: count10s = 0;
  2711  0769  01C1               	clrf	_count10s
  2712  076A                     l4620:	
  2713                           
  2714                           ;main.c: 834: }
  2715                           ;main.c: 835: }
  2716                           ;main.c: 836: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2717  076A  0343               	decf	_wuhuaFlag,w
  2718  076B  1903               	btfsc	3,2
  2719  076C  2F75               	goto	l4626
  2720  076D  3002               	movlw	2
  2721  076E  0643               	xorwf	_wuhuaFlag,w
  2722  076F  1D03               	btfss	3,2
  2723  0770  2F76               	goto	l4628
  2724  0771  3005               	movlw	5
  2725  0772  0241               	subwf	_count10s,w
  2726  0773  1803               	skipnc
  2727  0774  2F76               	goto	l4628
  2728  0775                     l4626:	
  2729                           
  2730                           ;main.c: 837: {
  2731                           ;main.c: 838: pwmInit();
  2732  0775  2F77               	ljmp	l4322
  2733  0776                     l4628:	
  2734                           ;main.c: 853: }
  2735                           
  2736                           
  2737                           ;main.c: 854: else
  2738                           ;main.c: 855: {
  2739                           ;main.c: 856: pwmStop();
  2740  0776  2F83               	ljmp	l4332
  2741  0777                     __end_of_wuhuaCtr:	
  2742  0777                     __ptext4:	
  2743 ;; *************** function _pwmInit *****************
  2744 ;; Defined at:
  2745 ;;		line 738 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0
  2754 ;; Tracked objects:
  2755 ;;		On entry : 300/0
  2756 ;;		On exit  : 300/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2759 ;;      Params:         0       0       0       0
  2760 ;;      Locals:         0       0       0       0
  2761 ;;      Temps:          0       0       0       0
  2762 ;;      Totals:         0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    2
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_wuhuaCtr
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _pwmInit
  2775  0777                     _pwmInit:	
  2776  0777                     l4322:	
  2777                           ;incstack = 0
  2778                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2779                           
  2780                           
  2781                           ;main.c: 741: PWMTH = 0x00;
  2782  0777  0198               	clrf	24	;volatile
  2783                           
  2784                           ;main.c: 742: PWMTL = 73;
  2785  0778  3049               	movlw	73
  2786  0779  0097               	movwf	23	;volatile
  2787                           
  2788                           ;main.c: 743: PWMD01H = 0x00;
  2789  077A  019E               	clrf	30	;volatile
  2790                           
  2791                           ;main.c: 744: PWMD0L = 32;
  2792  077B  3020               	movlw	32
  2793  077C  0099               	movwf	25	;volatile
  2794                           
  2795                           ;main.c: 745: PWMCON1 = 0x40;
  2796  077D  3040               	movlw	64
  2797  077E  0096               	movwf	22	;volatile
  2798                           
  2799                           ;main.c: 746: PWMCON2 = 0x00;
  2800  077F  019D               	clrf	29	;volatile
  2801                           
  2802                           ;main.c: 747: PWMCON0 |= 0x21;
  2803  0780  3021               	movlw	33
  2804  0781  0495               	iorwf	21,f	;volatile
  2805  0782  0008               	return
  2806  0783                     __end_of_pwmInit:	
  2807  0783                     __ptext3:	
  2808 ;; *************** function _pwmStop *****************
  2809 ;; Defined at:
  2810 ;;		line 750 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      void 
  2817 ;; Registers used:
  2818 ;;		status,2
  2819 ;; Tracked objects:
  2820 ;;		On entry : 300/0
  2821 ;;		On exit  : 300/100
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2824 ;;      Params:         0       0       0       0
  2825 ;;      Locals:         0       0       0       0
  2826 ;;      Temps:          0       0       0       0
  2827 ;;      Totals:         0       0       0       0
  2828 ;;Total ram usage:        0 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    2
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_wuhuaCtr
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           
  2839                           ;psect for function _pwmStop
  2840  0783                     _pwmStop:	
  2841  0783                     l4332:	
  2842                           ;incstack = 0
  2843                           ; Regs used in _pwmStop: [status,2]
  2844                           
  2845                           
  2846                           ;main.c: 752: PWMD0L = 0;
  2847  0783  0199               	clrf	25	;volatile
  2848                           
  2849                           ;main.c: 753: PWMCON0 &= 0xFE;
  2850  0784  1015               	bcf	21,0	;volatile
  2851                           
  2852                           ;main.c: 754: PORTA &= 0xDF;
  2853  0785  1683               	bsf	3,5	;RP0=1, select bank1
  2854  0786  1286               	bcf	6,5	;volatile
  2855  0787  0008               	return
  2856  0788                     __end_of_pwmStop:	
  2857  0788                     PL6:	
  2858  0788  00F5               	movwf	??_ADC_Sample+1
  2859  0789  01F6               	clrf	??_ADC_Sample+2
  2860  078A  01F7               	clrf	??_ADC_Sample+3
  2861  078B  0874               	movf	??_ADC_Sample,w
  2862  078C  02CC               	subwf	ADC_Sample@adsum,f	;volatile
  2863  078D  0875               	movf	??_ADC_Sample+1,w
  2864  078E  1C03               	skipc
  2865  078F  0F75               	incfsz	??_ADC_Sample+1,w
  2866  0790  02CD               	subwf	ADC_Sample@adsum+1,f	;volatile
  2867  0791  0876               	movf	??_ADC_Sample+2,w
  2868  0792  1C03               	skipc
  2869  0793  0F76               	incfsz	??_ADC_Sample+2,w
  2870  0794  02CE               	subwf	ADC_Sample@adsum+2,f	;volatile
  2871  0795  0877               	movf	??_ADC_Sample+3,w
  2872  0796  0008               	return
  2873  0797                     __end_ofPL6:	
  2874  0797                     PL18:	
  2875  0797  01CC               	clrf	ADC_Sample@adsum	;volatile
  2876  0798  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2877  0799  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2878  079A  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2879  079B  01D0               	clrf	ADC_Sample@admin	;volatile
  2880  079C  01D1               	clrf	ADC_Sample@admin+1	;volatile
  2881  079D  01D2               	clrf	ADC_Sample@admax	;volatile
  2882  079E  01D3               	clrf	ADC_Sample@admax+1	;volatile
  2883  079F  0008               	return
  2884  07A0                     __end_ofPL18:	
  2885  07A0                     PL26:	
  2886  07A0  085E               	movf	___fttol@f1,w
  2887  07A1  00E2               	movwf	??___fttol
  2888  07A2  085F               	movf	___fttol@f1+1,w
  2889  07A3  00E3               	movwf	??___fttol+1
  2890  07A4  0860               	movf	___fttol@f1+2,w
  2891  07A5  00E4               	movwf	??___fttol+2
  2892  07A6  0008               	return
  2893  07A7                     __end_ofPL26:	
  2894  07A7                     PL32:	
  2895  07A7  1003               	clrc
  2896  07A8  0CF5               	rrf	___ftpack@arg+2,f
  2897  07A9  0CF4               	rrf	___ftpack@arg+1,f
  2898  07AA  0CF3               	rrf	___ftpack@arg,f
  2899  07AB  0008               	return
  2900  07AC                     __end_ofPL32:	
  2901  07AC                     PL34:	
  2902  07AC  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2903  07AD  00D3               	movwf	ADC_Sample@admax+1	;volatile
  2904  07AE  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2905  07AF  00D2               	movwf	ADC_Sample@admax	;volatile
  2906  07B0  0008               	return
  2907  07B1                     __end_ofPL34:	
  2908  07B1                     PL36:	
  2909  07B1  01CF               	clrf	?___ftdiv
  2910  07B2  01D0               	clrf	?___ftdiv+1
  2911  07B3  01D1               	clrf	?___ftdiv+2
  2912  07B4  0008               	return
  2913  07B5                     __end_ofPL36:	
  2914                           
  2915                           	psect	text16
  2916  0F1C                     __ptext16:	
  2917 ;; *************** function _setBatStep *****************
  2918 ;; Defined at:
  2919 ;;		line 549 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  tempSubBatTi    2    3[BANK0 ] unsigned int 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, pclath, cstack
  2928 ;; Tracked objects:
  2929 ;;		On entry : 200/0
  2930 ;;		On exit  : 200/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2933 ;;      Params:         0       0       0       0
  2934 ;;      Locals:         0       2       0       0
  2935 ;;      Temps:          0       0       0       0
  2936 ;;      Totals:         0       2       0       0
  2937 ;;Total ram usage:        2 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    3
  2940 ;; This function calls:
  2941 ;;		___lwdiv
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _setBatStep
  2949  0F1C                     _setBatStep:	
  2950                           
  2951                           ;main.c: 551: if(lowBatLock == 1)
  2952                           
  2953                           ;incstack = 0
  2954                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  2955  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  2956  0F1D  0B3C               	decfsz	_lowBatLock,w
  2957  0F1E  2F22               	goto	l4848
  2958                           
  2959                           ;main.c: 552: {
  2960                           ;main.c: 553: showBatStep = 0;
  2961  0F1F  01B6               	clrf	_showBatStep
  2962                           
  2963                           ;main.c: 554: curBatStep = 0;
  2964  0F20  01B5               	clrf	_curBatStep
  2965                           
  2966                           ;main.c: 555: }
  2967  0F21  0008               	return
  2968  0F22                     l4848:	
  2969                           
  2970                           ;main.c: 556: else if(power_ad < 2800)
  2971  0F22  300A               	movlw	10
  2972  0F23  0227               	subwf	_power_ad+1,w	;volatile
  2973  0F24  30F0               	movlw	240
  2974  0F25  1903               	skipnz
  2975  0F26  0226               	subwf	_power_ad,w	;volatile
  2976  0F27  1803               	skipnc
  2977  0F28  2F3F               	goto	l4860
  2978                           
  2979                           ;main.c: 557: {
  2980                           ;main.c: 558: if(count10s == 0 && count1s == 0)
  2981  0F29  0841               	movf	_count10s,w
  2982  0F2A  1D03               	btfss	3,2
  2983  0F2B  2F3C               	goto	l1069
  2984  0F2C  0845               	movf	_count1s,w
  2985  0F2D  1D03               	btfss	3,2
  2986  0F2E  2F3C               	goto	l1069
  2987                           
  2988                           ;main.c: 559: {
  2989                           ;main.c: 560: if(showBatStep > 1)
  2990  0F2F  3002               	movlw	2
  2991  0F30  0236               	subwf	_showBatStep,w
  2992  0F31  1C03               	skipc
  2993  0F32  2F38               	goto	l1070
  2994                           
  2995                           ;main.c: 561: {
  2996                           ;main.c: 562: if(chrgFlag == 0)
  2997  0F33  083F               	movf	_chrgFlag,w
  2998  0F34  1D03               	btfss	3,2
  2999  0F35  2F3A               	goto	l1072
  3000                           
  3001                           ;main.c: 563: showBatStep--;
  3002  0F36  03B6               	decf	_showBatStep,f
  3003  0F37  2F3A               	goto	l1072
  3004  0F38                     l1070:	
  3005                           
  3006                           ;main.c: 565: else
  3007                           ;main.c: 566: {
  3008                           ;main.c: 567: showBatStep = 1;
  3009  0F38  01B6               	clrf	_showBatStep
  3010  0F39  0AB6               	incf	_showBatStep,f
  3011  0F3A                     l1072:	
  3012                           
  3013                           ;main.c: 568: }
  3014                           ;main.c: 569: curBatStep = 1;
  3015  0F3A  01B5               	clrf	_curBatStep
  3016  0F3B  0AB5               	incf	_curBatStep,f
  3017  0F3C                     l1069:	
  3018                           
  3019                           ;main.c: 570: }
  3020                           ;main.c: 571: curBatStep = 1;
  3021  0F3C  01B5               	clrf	_curBatStep
  3022  0F3D  0AB5               	incf	_curBatStep,f
  3023                           
  3024                           ;main.c: 572: }
  3025  0F3E  0008               	return
  3026  0F3F                     l4860:	
  3027                           
  3028                           ;main.c: 573: else
  3029                           ;main.c: 574: {
  3030                           ;main.c: 575: if(power_ad < 3600)
  3031  0F3F  300E               	movlw	14
  3032  0F40  0227               	subwf	_power_ad+1,w	;volatile
  3033  0F41  3010               	movlw	16
  3034  0F42  1903               	skipnz
  3035  0F43  0226               	subwf	_power_ad,w	;volatile
  3036  0F44  1803               	skipnc
  3037  0F45  2F55               	goto	l4864
  3038                           
  3039                           ;main.c: 576: {
  3040                           ;main.c: 577: curBatStep = (power_ad - 2800)/80;
  3041  0F46  3050               	movlw	80
  3042  0F47  00F3               	movwf	___lwdiv@divisor
  3043  0F48  01F4               	clrf	___lwdiv@divisor+1
  3044  0F49  0826               	movf	_power_ad,w	;volatile
  3045  0F4A  3E10               	addlw	16
  3046  0F4B  00F5               	movwf	___lwdiv@dividend
  3047  0F4C  0827               	movf	_power_ad+1,w	;volatile
  3048  0F4D  1803               	skipnc
  3049  0F4E  3E01               	addlw	1
  3050  0F4F  3EF5               	addlw	245
  3051  0F50  00F6               	movwf	___lwdiv@dividend+1
  3052  0F51  27D6  158A         	fcall	___lwdiv
  3053  0F53  0873               	movf	?___lwdiv,w
  3054  0F54  2F64               	goto	L5
  3055  0F55                     l4864:	
  3056                           ;main.c: 578: }
  3057                           
  3058                           
  3059                           ;main.c: 579: else
  3060                           ;main.c: 580: {
  3061                           ;main.c: 581: curBatStep = 20 + ((power_ad - 3600)/6);
  3062  0F55  3006               	movlw	6
  3063  0F56  00F3               	movwf	___lwdiv@divisor
  3064  0F57  01F4               	clrf	___lwdiv@divisor+1
  3065  0F58  0826               	movf	_power_ad,w	;volatile
  3066  0F59  3EF0               	addlw	240
  3067  0F5A  00F5               	movwf	___lwdiv@dividend
  3068  0F5B  0827               	movf	_power_ad+1,w	;volatile
  3069  0F5C  1803               	skipnc
  3070  0F5D  3E01               	addlw	1
  3071  0F5E  3EF1               	addlw	241
  3072  0F5F  00F6               	movwf	___lwdiv@dividend+1
  3073  0F60  27D6  158A         	fcall	___lwdiv
  3074  0F62  0873               	movf	?___lwdiv,w
  3075  0F63  3E14               	addlw	20
  3076  0F64                     L5:	
  3077  0F64  00B5               	movwf	_curBatStep
  3078                           
  3079                           ;main.c: 582: }
  3080                           ;main.c: 583: if(curBatStep > 99)
  3081  0F65  3064               	movlw	100
  3082  0F66  0235               	subwf	_curBatStep,w
  3083  0F67  1C03               	skipc
  3084  0F68  2F6B               	goto	l4870
  3085                           
  3086                           ;main.c: 584: {
  3087                           ;main.c: 585: curBatStep = 99;
  3088  0F69  3063               	movlw	99
  3089  0F6A  00B5               	movwf	_curBatStep
  3090  0F6B                     l4870:	
  3091                           
  3092                           ;main.c: 586: }
  3093                           ;main.c: 588: if(chrgFlag)
  3094  0F6B  083F               	movf	_chrgFlag,w
  3095  0F6C  1903               	btfsc	3,2
  3096  0F6D  2FA7               	goto	l4896
  3097                           
  3098                           ;main.c: 589: {
  3099                           ;main.c: 590: if(chrgFullFlag && showBatStep < 99)
  3100  0F6E  083E               	movf	_chrgFullFlag,w
  3101  0F6F  1903               	btfsc	3,2
  3102  0F70  2F85               	goto	l4882
  3103  0F71  3063               	movlw	99
  3104  0F72  0236               	subwf	_showBatStep,w
  3105  0F73  1803               	skipnc
  3106  0F74  2F85               	goto	l4882
  3107                           
  3108                           ;main.c: 591: {
  3109                           ;main.c: 592: if(++count15s >= 7500)
  3110  0F75  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0F76  0AB4               	incf	_count15s^(0+128),f
  3112  0F77  1903               	skipnz
  3113  0F78  0AB5               	incf	(_count15s+1)^(0+128),f
  3114  0F79  301D               	movlw	29
  3115  0F7A  0235               	subwf	(_count15s+1)^(0+128),w
  3116  0F7B  304C               	movlw	76
  3117  0F7C  1903               	skipnz
  3118  0F7D  0234               	subwf	_count15s^(0+128),w
  3119  0F7E  1C03               	skipc
  3120  0F7F  2F88               	goto	l4884
  3121                           
  3122                           ;main.c: 593: {
  3123                           ;main.c: 594: count15s = 0;
  3124  0F80  01B4               	clrf	_count15s^(0+128)
  3125  0F81  01B5               	clrf	(_count15s+1)^(0+128)
  3126                           
  3127                           ;main.c: 595: showBatStep++;
  3128  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0F83  0AB6               	incf	_showBatStep,f
  3130  0F84  2F88               	goto	l4884
  3131  0F85                     l4882:	
  3132                           
  3133                           ;main.c: 598: else
  3134                           ;main.c: 599: {
  3135                           ;main.c: 600: count15s = 0;
  3136  0F85  1683               	bsf	3,5	;RP0=1, select bank1
  3137  0F86  01B4               	clrf	_count15s^(0+128)
  3138  0F87  01B5               	clrf	(_count15s+1)^(0+128)
  3139  0F88                     l4884:	
  3140                           
  3141                           ;main.c: 601: }
  3142                           ;main.c: 602: if(curBatStep > showBatStep)
  3143  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0F89  0835               	movf	_curBatStep,w
  3145  0F8A  0236               	subwf	_showBatStep,w
  3146  0F8B  1803               	skipnc
  3147  0F8C  2FA3               	goto	l4894
  3148                           
  3149                           ;main.c: 603: {
  3150                           ;main.c: 604: if(++count30s >= 15000 && showBatStep < 99)
  3151  0F8D  1683               	bsf	3,5	;RP0=1, select bank1
  3152  0F8E  0AB6               	incf	_count30s^(0+128),f
  3153  0F8F  1903               	skipnz
  3154  0F90  0AB7               	incf	(_count30s+1)^(0+128),f
  3155  0F91  303A               	movlw	58
  3156  0F92  0237               	subwf	(_count30s+1)^(0+128),w
  3157  0F93  3098               	movlw	152
  3158  0F94  1903               	skipnz
  3159  0F95  0236               	subwf	_count30s^(0+128),w
  3160  0F96  1C03               	skipc
  3161  0F97  0008               	return
  3162  0F98  3063               	movlw	99
  3163  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0F9A  0236               	subwf	_showBatStep,w
  3165  0F9B  1803               	skipnc
  3166  0F9C  0008               	return
  3167                           
  3168                           ;main.c: 605: {
  3169                           ;main.c: 606: count30s = 0;
  3170  0F9D  1683               	bsf	3,5	;RP0=1, select bank1
  3171  0F9E  01B6               	clrf	_count30s^(0+128)
  3172  0F9F  01B7               	clrf	(_count30s+1)^(0+128)
  3173                           
  3174                           ;main.c: 607: showBatStep++;
  3175  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  3176  0FA1  0AB6               	incf	_showBatStep,f
  3177  0FA2  0008               	return
  3178  0FA3                     l4894:	
  3179                           
  3180                           ;main.c: 611: else
  3181                           ;main.c: 612: {
  3182                           ;main.c: 613: count30s = 0;
  3183  0FA3  1683               	bsf	3,5	;RP0=1, select bank1
  3184  0FA4  01B6               	clrf	_count30s^(0+128)
  3185  0FA5  01B7               	clrf	(_count30s+1)^(0+128)
  3186  0FA6  0008               	return
  3187  0FA7                     l4896:	
  3188                           
  3189                           ;main.c: 616: else
  3190                           ;main.c: 617: {
  3191                           ;main.c: 618: unsigned int tempSubBatTime = 15000;
  3192  0FA7  3098               	movlw	152
  3193  0FA8  00CC               	movwf	setBatStep@tempSubBatTime
  3194  0FA9  303A               	movlw	58
  3195  0FAA  00CD               	movwf	setBatStep@tempSubBatTime+1
  3196                           
  3197                           ;main.c: 619: if(showBatStep < 40)
  3198  0FAB  3028               	movlw	40
  3199  0FAC  0236               	subwf	_showBatStep,w
  3200  0FAD  1803               	skipnc
  3201  0FAE  2FB3               	goto	l1085
  3202                           
  3203                           ;main.c: 620: {
  3204                           ;main.c: 621: tempSubBatTime = 8000;
  3205  0FAF  3040               	movlw	64
  3206  0FB0  00CC               	movwf	setBatStep@tempSubBatTime
  3207  0FB1  301F               	movlw	31
  3208  0FB2  00CD               	movwf	setBatStep@tempSubBatTime+1
  3209  0FB3                     l1085:	
  3210                           
  3211                           ;main.c: 622: }
  3212                           ;main.c: 623: if(curBatStep < showBatStep && showBatStep > 1)
  3213  0FB3  0836               	movf	_showBatStep,w
  3214  0FB4  0235               	subwf	_curBatStep,w
  3215  0FB5  1803               	skipnc
  3216  0FB6  2FA3               	goto	l4894
  3217  0FB7  3002               	movlw	2
  3218  0FB8  0236               	subwf	_showBatStep,w
  3219  0FB9  1C03               	skipc
  3220  0FBA  2FA3               	goto	l4894
  3221                           
  3222                           ;main.c: 624: {
  3223                           ;main.c: 625: if(++count30s >= tempSubBatTime && showBatStep > 1)
  3224  0FBB  1683               	bsf	3,5	;RP0=1, select bank1
  3225  0FBC  0AB6               	incf	_count30s^(0+128),f
  3226  0FBD  1903               	skipnz
  3227  0FBE  0AB7               	incf	(_count30s+1)^(0+128),f
  3228  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0FC0  084D               	movf	setBatStep@tempSubBatTime+1,w
  3230  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0FC2  0237               	subwf	(_count30s+1)^(0+128),w
  3232  0FC3  1D03               	skipz
  3233  0FC4  2FC9               	goto	u5515
  3234  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0FC6  084C               	movf	setBatStep@tempSubBatTime,w
  3236  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  3237  0FC8  0236               	subwf	_count30s^(0+128),w
  3238  0FC9                     u5515:	
  3239  0FC9  1C03               	skipc
  3240  0FCA  0008               	return
  3241  0FCB  3002               	movlw	2
  3242  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  3243  0FCD  0236               	subwf	_showBatStep,w
  3244  0FCE  1C03               	skipc
  3245  0FCF  0008               	return
  3246                           
  3247                           ;main.c: 626: {
  3248                           ;main.c: 627: count30s = 0;
  3249  0FD0  1683               	bsf	3,5	;RP0=1, select bank1
  3250  0FD1  01B6               	clrf	_count30s^(0+128)
  3251  0FD2  01B7               	clrf	(_count30s+1)^(0+128)
  3252                           
  3253                           ;main.c: 628: showBatStep--;
  3254  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0FD4  03B6               	decf	_showBatStep,f
  3256  0FD5  0008               	return
  3257  0FD6                     __end_of_setBatStep:	
  3258  0FD6                     __ptext17:	
  3259 ;; *************** function ___lwdiv *****************
  3260 ;; Defined at:
  3261 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  divisor         2    3[COMMON] unsigned int 
  3264 ;;  dividend        2    5[COMMON] unsigned int 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  quotient        2    1[BANK0 ] unsigned int 
  3267 ;;  counter         1    0[BANK0 ] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  2    3[COMMON] unsigned int 
  3270 ;; Registers used:
  3271 ;;		wreg, status,2, status,0
  3272 ;; Tracked objects:
  3273 ;;		On entry : 300/0
  3274 ;;		On exit  : 300/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3277 ;;      Params:         4       0       0       0
  3278 ;;      Locals:         0       3       0       0
  3279 ;;      Temps:          0       0       0       0
  3280 ;;      Totals:         4       3       0       0
  3281 ;;Total ram usage:        7 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    2
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_setBatStep
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           
  3292                           ;psect for function ___lwdiv
  3293  0FD6                     ___lwdiv:	
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3297  0FD6  01CA               	clrf	___lwdiv@quotient
  3298  0FD7  01CB               	clrf	___lwdiv@quotient+1
  3299  0FD8  0873               	movf	___lwdiv@divisor,w
  3300  0FD9  0474               	iorwf	___lwdiv@divisor+1,w
  3301  0FDA  1903               	btfsc	3,2
  3302  0FDB  2FFB               	goto	l4802
  3303  0FDC  01C9               	clrf	___lwdiv@counter
  3304  0FDD                     L6:	
  3305  0FDD  0AC9               	incf	___lwdiv@counter,f
  3306  0FDE  1BF4               	btfsc	___lwdiv@divisor+1,7
  3307  0FDF  2FE4               	goto	l4790
  3308  0FE0  1003               	clrc
  3309  0FE1  0DF3               	rlf	___lwdiv@divisor,f
  3310  0FE2  0DF4               	rlf	___lwdiv@divisor+1,f
  3311  0FE3  2FDD               	goto	L6
  3312  0FE4                     l4790:	
  3313  0FE4  1003               	clrc
  3314  0FE5  0DCA               	rlf	___lwdiv@quotient,f
  3315  0FE6  0DCB               	rlf	___lwdiv@quotient+1,f
  3316  0FE7  0874               	movf	___lwdiv@divisor+1,w
  3317  0FE8  0276               	subwf	___lwdiv@dividend+1,w
  3318  0FE9  1D03               	skipz
  3319  0FEA  2FED               	goto	u5285
  3320  0FEB  0873               	movf	___lwdiv@divisor,w
  3321  0FEC  0275               	subwf	___lwdiv@dividend,w
  3322  0FED                     u5285:	
  3323  0FED  1C03               	skipc
  3324  0FEE  2FF7               	goto	L7
  3325  0FEF  0873               	movf	___lwdiv@divisor,w
  3326  0FF0  02F5               	subwf	___lwdiv@dividend,f
  3327  0FF1  0874               	movf	___lwdiv@divisor+1,w
  3328  0FF2  1C03               	skipc
  3329  0FF3  03F6               	decf	___lwdiv@dividend+1,f
  3330  0FF4  02F6               	subwf	___lwdiv@dividend+1,f
  3331  0FF5  144A               	bsf	___lwdiv@quotient,0
  3332  0FF6  1003               	clrc
  3333  0FF7                     L7:	
  3334  0FF7  0CF4               	rrf	___lwdiv@divisor+1,f
  3335  0FF8  0CF3               	rrf	___lwdiv@divisor,f
  3336  0FF9  0BC9               	decfsz	___lwdiv@counter,f
  3337  0FFA  2FE4               	goto	l4790
  3338  0FFB                     l4802:	
  3339  0FFB  084B               	movf	___lwdiv@quotient+1,w
  3340  0FFC  00F4               	movwf	?___lwdiv+1
  3341  0FFD  084A               	movf	___lwdiv@quotient,w
  3342  0FFE  00F3               	movwf	?___lwdiv
  3343  0FFF  0008               	return
  3344  1000                     __end_of___lwdiv:	
  3345                           
  3346                           	psect	text18
  3347  0DCC                     __ptext18:	
  3348 ;; *************** function _chrgCtr *****************
  3349 ;; Defined at:
  3350 ;;		line 640 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 300/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       0       0       0
  3365 ;;      Locals:         0       0       0       0
  3366 ;;      Temps:          0       0       0       0
  3367 ;;      Totals:         0       0       0       0
  3368 ;;Total ram usage:        0 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		_showBatLed
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _chrgCtr
  3380  0DCC                     _chrgCtr:	
  3381                           
  3382                           ;main.c: 642: if(PORTB & 0x01)
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3386  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  3388  0DCE  1C06               	btfss	6,0	;volatile
  3389  0DCF  2DE3               	goto	l4064
  3390                           
  3391                           ;main.c: 643: {
  3392                           ;main.c: 644: chrgFlag = 1;
  3393  0DD0  01BF               	clrf	_chrgFlag
  3394  0DD1  0ABF               	incf	_chrgFlag,f
  3395                           
  3396                           ;main.c: 645: firstLock = 0;
  3397  0DD2  01EB               	clrf	_firstLock
  3398                           
  3399                           ;main.c: 646: lowBatLock = 0;
  3400  0DD3  01BC               	clrf	_lowBatLock
  3401                           
  3402                           ;main.c: 647: showBatLed();
  3403  0DD4  25FD  158A         	fcall	_showBatLed
  3404                           
  3405                           ;main.c: 648: if(PORTB & 0x02)
  3406  0DD6  1C86               	btfss	6,1	;volatile
  3407  0DD7  2DE1               	goto	l4062
  3408                           
  3409                           ;main.c: 649: {
  3410                           ;main.c: 650: if(++chrgFullTime > 200)
  3411  0DD8  30C9               	movlw	201
  3412  0DD9  0ABD               	incf	_chrgFullTime,f
  3413  0DDA  023D               	subwf	_chrgFullTime,w
  3414  0DDB  1C03               	skipc
  3415  0DDC  0008               	return
  3416                           
  3417                           ;main.c: 651: {
  3418                           ;main.c: 652: chrgFullTime = 0;
  3419  0DDD  01BD               	clrf	_chrgFullTime
  3420                           
  3421                           ;main.c: 653: chrgFullFlag = 1;
  3422  0DDE  01BE               	clrf	_chrgFullFlag
  3423  0DDF  0ABE               	incf	_chrgFullFlag,f
  3424  0DE0  0008               	return
  3425  0DE1                     l4062:	
  3426                           
  3427                           ;main.c: 656: else
  3428                           ;main.c: 657: {
  3429                           ;main.c: 658: chrgFullTime = 0;
  3430  0DE1  01BD               	clrf	_chrgFullTime
  3431  0DE2  0008               	return
  3432  0DE3                     l4064:	
  3433                           
  3434                           ;main.c: 662: else
  3435                           ;main.c: 663: {
  3436                           ;main.c: 664: chrgFlag = 0;
  3437  0DE3  01BF               	clrf	_chrgFlag
  3438                           
  3439                           ;main.c: 665: chrgFullTime = 0;
  3440  0DE4  01BD               	clrf	_chrgFullTime
  3441                           
  3442                           ;main.c: 666: chrgFullFlag = 0;
  3443  0DE5  01BE               	clrf	_chrgFullFlag
  3444                           
  3445                           ;main.c: 668: if(firstTime == 0)
  3446  0DE6  086C               	movf	_firstTime,w
  3447  0DE7  1D03               	btfss	3,2
  3448  0DE8  2DF3               	goto	l4076
  3449                           
  3450                           ;main.c: 669: {
  3451                           ;main.c: 670: if(workStep == 0 && wuhuaFlag == 0)
  3452  0DE9  0844               	movf	_workStep,w
  3453  0DEA  1D03               	btfss	3,2
  3454  0DEB  2DF2               	goto	l4074
  3455  0DEC  0843               	movf	_wuhuaFlag,w
  3456  0DED  1D03               	btfss	3,2
  3457  0DEE  2DF2               	goto	l4074
  3458                           
  3459                           ;main.c: 671: {
  3460                           ;main.c: 672: showNumShi = 0;
  3461  0DEF  01EE               	clrf	_showNumShi
  3462                           
  3463                           ;main.c: 673: showNumGe = 0;
  3464  0DF0  01ED               	clrf	_showNumGe
  3465                           
  3466                           ;main.c: 674: }
  3467  0DF1  0008               	return
  3468  0DF2                     l4074:	
  3469                           
  3470                           ;main.c: 675: else
  3471                           ;main.c: 676: {
  3472                           ;main.c: 677: showBatLed();
  3473  0DF2  2DFD               	ljmp	l3410
  3474  0DF3                     l4076:	
  3475                           
  3476                           ;main.c: 680: else
  3477                           ;main.c: 681: {
  3478                           ;main.c: 682: if(showBatStep < curBatStep)
  3479  0DF3  0835               	movf	_curBatStep,w
  3480  0DF4  0236               	subwf	_showBatStep,w
  3481  0DF5  1803               	skipnc
  3482  0DF6  2DF9               	goto	l1101
  3483                           
  3484                           ;main.c: 683: {
  3485                           ;main.c: 684: showBatStep = curBatStep;
  3486  0DF7  0835               	movf	_curBatStep,w
  3487  0DF8  00B6               	movwf	_showBatStep
  3488  0DF9                     l1101:	
  3489                           
  3490                           ;main.c: 685: }
  3491                           ;main.c: 686: showNumShi = 0x7F;
  3492  0DF9  307F               	movlw	127
  3493  0DFA  00EE               	movwf	_showNumShi
  3494                           
  3495                           ;main.c: 687: showNumGe = 0x7F;
  3496  0DFB  00ED               	movwf	_showNumGe
  3497  0DFC  0008               	return
  3498  0DFD                     __end_of_chrgCtr:	
  3499  0DFD                     __ptext19:	
  3500 ;; *************** function _showBatLed *****************
  3501 ;; Defined at:
  3502 ;;		line 543 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 300/0
  3513 ;;		On exit  : 300/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3516 ;;      Params:         0       0       0       0
  3517 ;;      Locals:         0       0       0       0
  3518 ;;      Temps:          0       0       0       0
  3519 ;;      Totals:         0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    3
  3523 ;; This function calls:
  3524 ;;		___lbdiv
  3525 ;;		___lbmod
  3526 ;; This function is called by:
  3527 ;;		_chrgCtr
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           
  3532                           ;psect for function _showBatLed
  3533  0DFD                     _showBatLed:	
  3534  0DFD                     l3410:	
  3535                           ;incstack = 0
  3536                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3537                           
  3538                           
  3539                           ;main.c: 545: showNumShi = numArray[showBatStep/10];
  3540  0DFD  300A               	movlw	10
  3541  0DFE  00F3               	movwf	___lbdiv@divisor
  3542  0DFF  0836               	movf	_showBatStep,w
  3543  0E00  2611               	fcall	___lbdiv
  3544  0E01  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3545  0E02  0084               	movwf	4
  3546  0E03  158A  2028  158A   	fcall	stringdir
  3547  0E06  00EE               	movwf	_showNumShi
  3548                           
  3549                           ;main.c: 546: showNumGe = numArray[showBatStep%10];
  3550  0E07  300A               	movlw	10
  3551  0E08  00F3               	movwf	___lbmod@divisor
  3552  0E09  0836               	movf	_showBatStep,w
  3553  0E0A  262C               	fcall	___lbmod
  3554  0E0B  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3555  0E0C  0084               	movwf	4
  3556  0E0D  158A  2028         	fcall	stringdir
  3557  0E0F  00ED               	movwf	_showNumGe
  3558  0E10  0008               	return
  3559  0E11                     __end_of_showBatLed:	
  3560  0E11                     __ptext21:	
  3561 ;; *************** function ___lbdiv *****************
  3562 ;; Defined at:
  3563 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  dividend        1    wreg     unsigned char 
  3566 ;;  divisor         1    3[COMMON] unsigned char 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  dividend        1    4[COMMON] unsigned char 
  3569 ;;  quotient        1    6[COMMON] unsigned char 
  3570 ;;  counter         1    5[COMMON] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      unsigned char 
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0
  3575 ;; Tracked objects:
  3576 ;;		On entry : 300/0
  3577 ;;		On exit  : 300/0
  3578 ;;		Unchanged: 300/0
  3579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3580 ;;      Params:         1       0       0       0
  3581 ;;      Locals:         3       0       0       0
  3582 ;;      Temps:          0       0       0       0
  3583 ;;      Totals:         4       0       0       0
  3584 ;;Total ram usage:        4 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    2
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_showBatLed
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           
  3595                           ;psect for function ___lbdiv
  3596  0E11                     ___lbdiv:	
  3597                           
  3598                           ;incstack = 0
  3599                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3600                           ;___lbdiv@dividend stored from wreg
  3601  0E11  00F4               	movwf	___lbdiv@dividend
  3602  0E12  01F6               	clrf	___lbdiv@quotient
  3603  0E13  0873               	movf	___lbdiv@divisor,w
  3604  0E14  1903               	btfsc	3,2
  3605  0E15  2E2A               	goto	l3276
  3606  0E16  01F5               	clrf	___lbdiv@counter
  3607  0E17                     l3262:	
  3608  0E17  0AF5               	incf	___lbdiv@counter,f
  3609  0E18  1BF3               	btfsc	___lbdiv@divisor,7
  3610  0E19  2E1D               	goto	l1666
  3611  0E1A  1003               	clrc
  3612  0E1B  0DF3               	rlf	___lbdiv@divisor,f
  3613  0E1C  2E17               	goto	l3262
  3614  0E1D                     l1666:	
  3615  0E1D  1003               	clrc
  3616  0E1E  0DF6               	rlf	___lbdiv@quotient,f
  3617  0E1F  0873               	movf	___lbdiv@divisor,w
  3618  0E20  0274               	subwf	___lbdiv@dividend,w
  3619  0E21  1C03               	skipc
  3620  0E22  2E27               	goto	L9
  3621  0E23  0873               	movf	___lbdiv@divisor,w
  3622  0E24  02F4               	subwf	___lbdiv@dividend,f
  3623  0E25  1476               	bsf	___lbdiv@quotient,0
  3624  0E26  1003               	clrc
  3625  0E27                     L9:	
  3626  0E27  0CF3               	rrf	___lbdiv@divisor,f
  3627  0E28  0BF5               	decfsz	___lbdiv@counter,f
  3628  0E29  2E1D               	goto	l1666
  3629  0E2A                     l3276:	
  3630  0E2A  0876               	movf	___lbdiv@quotient,w
  3631  0E2B  0008               	return
  3632  0E2C                     __end_of___lbdiv:	
  3633  0E2C                     __ptext20:	
  3634 ;; *************** function ___lbmod *****************
  3635 ;; Defined at:
  3636 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  dividend        1    wreg     unsigned char 
  3639 ;;  divisor         1    3[COMMON] unsigned char 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  dividend        1    5[COMMON] unsigned char 
  3642 ;;  rem             1    7[COMMON] unsigned char 
  3643 ;;  counter         1    6[COMMON] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      unsigned char 
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : 300/0
  3650 ;;		On exit  : 300/0
  3651 ;;		Unchanged: 300/0
  3652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3653 ;;      Params:         1       0       0       0
  3654 ;;      Locals:         3       0       0       0
  3655 ;;      Temps:          1       0       0       0
  3656 ;;      Totals:         5       0       0       0
  3657 ;;Total ram usage:        5 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    2
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_showBatLed
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function ___lbmod
  3669  0E2C                     ___lbmod:	
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3673                           ;___lbmod@dividend stored from wreg
  3674  0E2C  00F5               	movwf	___lbmod@dividend
  3675  0E2D  3008               	movlw	8
  3676  0E2E  00F6               	movwf	___lbmod@counter
  3677  0E2F  01F7               	clrf	___lbmod@rem
  3678  0E30                     l3284:	
  3679  0E30  0875               	movf	___lbmod@dividend,w
  3680  0E31  00F4               	movwf	??___lbmod
  3681  0E32  3007               	movlw	7
  3682  0E33  1003               	clrc
  3683  0E34                     L8:	
  3684  0E34  0CF4               	rrf	??___lbmod,f
  3685  0E35  3EFF               	addlw	-1
  3686  0E36  1003               	clrc
  3687  0E37  1D03               	skipz
  3688  0E38  2E34               	goto	L8
  3689  0E39  0D77               	rlf	___lbmod@rem,w
  3690  0E3A  0474               	iorwf	??___lbmod,w
  3691  0E3B  00F7               	movwf	___lbmod@rem
  3692  0E3C  1003               	clrc
  3693  0E3D  0DF5               	rlf	___lbmod@dividend,f
  3694  0E3E  0873               	movf	___lbmod@divisor,w
  3695  0E3F  0277               	subwf	___lbmod@rem,w
  3696  0E40  1C03               	skipc
  3697  0E41  2E44               	goto	l3292
  3698  0E42  0873               	movf	___lbmod@divisor,w
  3699  0E43  02F7               	subwf	___lbmod@rem,f
  3700  0E44                     l3292:	
  3701  0E44  0BF6               	decfsz	___lbmod@counter,f
  3702  0E45  2E30               	goto	l3284
  3703  0E46  0877               	movf	___lbmod@rem,w
  3704  0E47  0008               	return
  3705  0E48                     __end_of___lbmod:	
  3706                           
  3707                           	psect	text25
  3708  07B5                     __ptext25:	
  3709 ;; *************** function _KeyServer *****************
  3710 ;; Defined at:
  3711 ;;		line 131 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;		None
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;		None
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0
  3720 ;; Tracked objects:
  3721 ;;		On entry : 300/0
  3722 ;;		On exit  : 300/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3725 ;;      Params:         0       0       0       0
  3726 ;;      Locals:         0       0       0       0
  3727 ;;      Temps:          0       0       0       0
  3728 ;;      Totals:         0       0       0       0
  3729 ;;Total ram usage:        0 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    2
  3732 ;; This function calls:
  3733 ;;		Nothing
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           
  3740                           ;psect for function _KeyServer
  3741  07B5                     _KeyServer:	
  3742                           
  3743                           ;main.c: 133: static unsigned char KeyOldFlag = 0;
  3744                           ;main.c: 134: if (KeyFlag[0])
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3748  07B5  082C               	movf	_KeyFlag,w	;volatile
  3749  07B6  1903               	btfsc	3,2
  3750  07B7  2FFB               	goto	l3872
  3751                           
  3752                           ;main.c: 135: {
  3753                           ;main.c: 136: time = 0;
  3754  07B8  1683               	bsf	3,5	;RP0=1, select bank1
  3755  07B9  01BA               	clrf	_time^(0+128)
  3756  07BA  01BB               	clrf	(_time+1)^(0+128)
  3757                           
  3758                           ;main.c: 137: if (KeyFlag[0] != KeyOldFlag)
  3759  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  3760  07BC  082C               	movf	_KeyFlag,w	;volatile
  3761  07BD  0633               	xorwf	KeyServer@KeyOldFlag,w
  3762  07BE  1903               	skipnz
  3763  07BF  0008               	return
  3764                           
  3765                           ;main.c: 138: {
  3766                           ;main.c: 140: KeyOldFlag ^= KeyFlag[0];
  3767  07C0  082C               	movf	_KeyFlag,w	;volatile
  3768  07C1  06B3               	xorwf	KeyServer@KeyOldFlag,f
  3769                           
  3770                           ;main.c: 141: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3771  07C2  1833               	btfsc	KeyServer@KeyOldFlag,0
  3772  07C3  1C2C               	btfss	_KeyFlag,0	;volatile
  3773  07C4  2FDC               	goto	l3848
  3774  07C5  086B               	movf	_firstLock,w
  3775  07C6  1D03               	btfss	3,2
  3776  07C7  2FDC               	goto	l3848
  3777                           
  3778                           ;main.c: 142: {
  3779                           ;main.c: 144: if(lowBatLock == 1)
  3780  07C8  0B3C               	decfsz	_lowBatLock,w
  3781  07C9  2FCE               	goto	l3838
  3782                           
  3783                           ;main.c: 145: {
  3784                           ;main.c: 146: shanshuoTime = 225;
  3785  07CA  30E1               	movlw	225
  3786  07CB  00AA               	movwf	_shanshuoTime
  3787  07CC  01AB               	clrf	_shanshuoTime+1
  3788                           
  3789                           ;main.c: 147: }
  3790  07CD  2FD3               	goto	l3842
  3791  07CE                     l3838:	
  3792                           
  3793                           ;main.c: 148: else if(++workStep > 2)
  3794  07CE  3003               	movlw	3
  3795  07CF  0AC4               	incf	_workStep,f
  3796  07D0  0244               	subwf	_workStep,w
  3797  07D1  1803               	btfsc	3,0
  3798                           
  3799                           ;main.c: 149: {
  3800                           ;main.c: 150: workStep = 0;
  3801  07D2  01C4               	clrf	_workStep
  3802  07D3                     l3842:	
  3803                           
  3804                           ;main.c: 151: }
  3805                           ;main.c: 152: if(workStep == 2)
  3806  07D3  3002               	movlw	2
  3807  07D4  0644               	xorwf	_workStep,w
  3808  07D5  1D03               	btfss	3,2
  3809  07D6  2FDA               	goto	l3846
  3810                           
  3811                           ;main.c: 153: {
  3812                           ;main.c: 154: shanshuoTime = 225;
  3813  07D7  30E1               	movlw	225
  3814  07D8  00AA               	movwf	_shanshuoTime
  3815  07D9  2FDB               	goto	L12
  3816  07DA                     l3846:	
  3817                           ;main.c: 155: }
  3818                           
  3819                           
  3820                           ;main.c: 156: else
  3821                           ;main.c: 157: {
  3822                           ;main.c: 158: shanshuoTime = 0;
  3823  07DA  01AA               	clrf	_shanshuoTime
  3824  07DB                     L12:	
  3825  07DB  01AB               	clrf	_shanshuoTime+1
  3826  07DC                     l3848:	
  3827                           
  3828                           ;main.c: 159: }
  3829                           ;main.c: 160: }
  3830                           ;main.c: 161: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3831  07DC  18B3               	btfsc	KeyServer@KeyOldFlag,1
  3832  07DD  1CAC               	btfss	_KeyFlag,1	;volatile
  3833  07DE  2FF8               	goto	l3870
  3834  07DF  086B               	movf	_firstLock,w
  3835  07E0  1D03               	btfss	3,2
  3836  07E1  2FF8               	goto	l3870
  3837                           
  3838                           ;main.c: 162: {
  3839                           ;main.c: 164: if(lowBatLock == 1)
  3840  07E2  0B3C               	decfsz	_lowBatLock,w
  3841  07E3  2FE8               	goto	l3858
  3842                           
  3843                           ;main.c: 165: {
  3844                           ;main.c: 166: shanshuoTime2 = 225;
  3845  07E4  30E1               	movlw	225
  3846  07E5  00A8               	movwf	_shanshuoTime2
  3847  07E6  01A9               	clrf	_shanshuoTime2+1
  3848                           
  3849                           ;main.c: 167: }
  3850  07E7  2FED               	goto	l3862
  3851  07E8                     l3858:	
  3852                           
  3853                           ;main.c: 168: else if(++wuhuaFlag > 2)
  3854  07E8  3003               	movlw	3
  3855  07E9  0AC3               	incf	_wuhuaFlag,f
  3856  07EA  0243               	subwf	_wuhuaFlag,w
  3857  07EB  1803               	btfsc	3,0
  3858                           
  3859                           ;main.c: 169: {
  3860                           ;main.c: 170: wuhuaFlag = 0;
  3861  07EC  01C3               	clrf	_wuhuaFlag
  3862  07ED                     l3862:	
  3863                           
  3864                           ;main.c: 171: }
  3865                           ;main.c: 172: if(wuhuaFlag == 2)
  3866  07ED  3002               	movlw	2
  3867  07EE  0643               	xorwf	_wuhuaFlag,w
  3868  07EF  1D03               	btfss	3,2
  3869  07F0  2FF6               	goto	l3868
  3870                           
  3871                           ;main.c: 173: {
  3872                           ;main.c: 174: shanshuoTime2 = 225;
  3873  07F1  30E1               	movlw	225
  3874  07F2  00A8               	movwf	_shanshuoTime2
  3875  07F3  01A9               	clrf	_shanshuoTime2+1
  3876                           
  3877                           ;main.c: 175: count10s = 0;
  3878  07F4  01C1               	clrf	_count10s
  3879                           
  3880                           ;main.c: 176: }
  3881  07F5  2FF8               	goto	l3870
  3882  07F6                     l3868:	
  3883                           
  3884                           ;main.c: 177: else
  3885                           ;main.c: 178: {
  3886                           ;main.c: 179: shanshuoTime2 = 0;
  3887  07F6  01A8               	clrf	_shanshuoTime2
  3888  07F7  01A9               	clrf	_shanshuoTime2+1
  3889  07F8                     l3870:	
  3890                           
  3891                           ;main.c: 180: }
  3892                           ;main.c: 181: }
  3893                           ;main.c: 184: KeyOldFlag = KeyFlag[0];
  3894  07F8  082C               	movf	_KeyFlag,w	;volatile
  3895  07F9  00B3               	movwf	KeyServer@KeyOldFlag
  3896  07FA  0008               	return
  3897  07FB                     l3872:	
  3898                           
  3899                           ;main.c: 187: else
  3900                           ;main.c: 188: {
  3901                           ;main.c: 189: KeyOldFlag = 0;
  3902  07FB  01B3               	clrf	KeyServer@KeyOldFlag
  3903  07FC  0008               	return
  3904  07FD                     __end_of_KeyServer:	
  3905                           
  3906                           	psect	text26
  3907  0024                     __ptext26:	
  3908 ;; *************** function _Init_System *****************
  3909 ;; Defined at:
  3910 ;;		line 80 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;		None
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, status,2
  3919 ;; Tracked objects:
  3920 ;;		On entry : B00/0
  3921 ;;		On exit  : 300/100
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3924 ;;      Params:         0       0       0       0
  3925 ;;      Locals:         0       0       0       0
  3926 ;;      Temps:          0       0       0       0
  3927 ;;      Totals:         0       0       0       0
  3928 ;;Total ram usage:        0 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    2
  3931 ;; This function calls:
  3932 ;;		Nothing
  3933 ;; This function is called by:
  3934 ;;		_main
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _Init_System
  3940  0024                     _Init_System:	
  3941                           
  3942                           ;incstack = 0
  3943                           ; Regs used in _Init_System: [wreg+status,2]
  3944  0024  0000               	nop	;# 
  3945  0025  0064               	clrwdt	;# 
  3946                           
  3947                           ;main.c: 84: INTCON = 0;
  3948  0026  018B               	clrf	11	;volatile
  3949                           
  3950                           ;main.c: 85: OSCCON = 0X72;
  3951  0027  3072               	movlw	114
  3952  0028  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0029  1303               	bcf	3,6	;RP1=0, select bank0
  3954  002A  0094               	movwf	20	;volatile
  3955                           
  3956                           ;main.c: 86: OPTION_REG = 0;
  3957  002B  0181               	clrf	1	;volatile
  3958                           
  3959                           ;main.c: 91: TRISA = 0x00;
  3960  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3961  002D  0185               	clrf	5	;volatile
  3962                           
  3963                           ;main.c: 92: PORTA = 0;
  3964  002E  0186               	clrf	6	;volatile
  3965                           
  3966                           ;main.c: 93: TRISB = 0x23;
  3967  002F  3023               	movlw	35
  3968  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0031  0085               	movwf	5	;volatile
  3970                           
  3971                           ;main.c: 94: PORTB = 0;
  3972  0032  0186               	clrf	6	;volatile
  3973                           
  3974                           ;main.c: 95: WPUB = 0x02;
  3975  0033  3002               	movlw	2
  3976  0034  0088               	movwf	8	;volatile
  3977                           
  3978                           ;main.c: 96: TRISC = 0;
  3979  0035  1703               	bsf	3,6	;RP1=1, select bank2
  3980  0036  0185               	clrf	5	;volatile
  3981                           
  3982                           ;main.c: 97: PORTC = 0;
  3983  0037  0186               	clrf	6	;volatile
  3984                           
  3985                           ;main.c: 99: PIE1 = 2;
  3986  0038  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0039  008E               	movwf	14	;volatile
  3988                           
  3989                           ;main.c: 100: PR2 = 250;
  3990  003A  30FA               	movlw	250
  3991  003B  0091               	movwf	17	;volatile
  3992                           
  3993                           ;main.c: 101: T2CON = 4;
  3994  003C  3004               	movlw	4
  3995  003D  0093               	movwf	19	;volatile
  3996                           
  3997                           ;main.c: 103: INTCON = 0XC0;
  3998  003E  30C0               	movlw	192
  3999  003F  008B               	movwf	11	;volatile
  4000                           
  4001                           ;main.c: 104: ADCON0 = 0X41;
  4002                           
  4003                           ;main.c: 105: ADON = 1;
  4004                           
  4005                           ;main.c: 106: ADCON1 = 0x00;
  4006  0040  2BF6               	ljmp	PL24	;call to abstracted procedure
  4007  0041                     __end_of_Init_System:	
  4008  0041                     __ptext22:	
  4009 ;; *************** function _WorkSleep *****************
  4010 ;; Defined at:
  4011 ;;		line 223 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 300/0
  4022 ;;		On exit  : 300/100
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4025 ;;      Params:         0       0       0       0
  4026 ;;      Locals:         0       0       0       0
  4027 ;;      Temps:          0       0       0       0
  4028 ;;      Totals:         0       0       0       0
  4029 ;;Total ram usage:        0 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    5
  4032 ;; This function calls:
  4033 ;;		_Refurbish_Sfr
  4034 ;;		_SystemEnterSleep
  4035 ;; This function is called by:
  4036 ;;		_main
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _WorkSleep
  4042  0041                     _WorkSleep:	
  4043                           
  4044                           ;main.c: 228: if(B_OnOff)time = 0;
  4045                           
  4046                           ;incstack = 0
  4047                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4048  0041  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4049  0042  2846               	goto	l4814
  4050  0043  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0044  01BA               	clrf	_time^(0+128)
  4052  0045  01BB               	clrf	(_time+1)^(0+128)
  4053  0046                     l4814:	
  4054                           
  4055                           ;main.c: 230: if(++time >= 1000)
  4056  0046  1683               	bsf	3,5	;RP0=1, select bank1
  4057  0047  0ABA               	incf	_time^(0+128),f
  4058  0048  1903               	skipnz
  4059  0049  0ABB               	incf	(_time+1)^(0+128),f
  4060  004A  3003               	movlw	3
  4061  004B  023B               	subwf	(_time+1)^(0+128),w
  4062  004C  30E8               	movlw	232
  4063  004D  1903               	skipnz
  4064  004E  023A               	subwf	_time^(0+128),w
  4065  004F  1C03               	skipc
  4066  0050  0008               	return
  4067                           
  4068                           ;main.c: 231: {
  4069                           ;main.c: 232: time = 0;
  4070  0051  01BA               	clrf	_time^(0+128)
  4071  0052  01BB               	clrf	(_time+1)^(0+128)
  4072                           
  4073                           ;main.c: 233: INTCON = 0;
  4074  0053  018B               	clrf	11	;volatile
  4075                           
  4076                           ;main.c: 234: PIE1 = 0;
  4077  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4078  0055  018E               	clrf	14	;volatile
  4079                           
  4080                           ;main.c: 235: PIE2 = 0;
  4081  0056  1703               	bsf	3,6	;RP1=1, select bank2
  4082  0057  0190               	clrf	16	;volatile
  4083                           
  4084                           ;main.c: 236: PIR1 = 0;
  4085  0058  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0059  018D               	clrf	13	;volatile
  4087                           
  4088                           ;main.c: 237: PIR2 = 0;
  4089  005A  1703               	bsf	3,6	;RP1=1, select bank2
  4090  005B  018F               	clrf	15	;volatile
  4091                           
  4092                           ;main.c: 238: T2CON = 0;
  4093  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4094  005D  0193               	clrf	19	;volatile
  4095                           
  4096                           ;main.c: 239: ADCON1 = 0;
  4097  005E  1683               	bsf	3,5	;RP0=1, select bank1
  4098  005F  0196               	clrf	22	;volatile
  4099                           
  4100                           ;main.c: 242: ADCON0 = 0;
  4101  0060  0195               	clrf	21	;volatile
  4102                           
  4103                           ;main.c: 245: PORTA = 0x00;
  4104  0061  0186               	clrf	6	;volatile
  4105                           
  4106                           ;main.c: 246: PORTB = 0x00;
  4107  0062  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0063  0186               	clrf	6	;volatile
  4109                           
  4110                           ;main.c: 247: TRISC = 0;
  4111  0064  1703               	bsf	3,6	;RP1=1, select bank2
  4112  0065  0185               	clrf	5	;volatile
  4113                           
  4114                           ;main.c: 248: PORTC = 0;
  4115  0066  0186               	clrf	6	;volatile
  4116                           
  4117                           ;main.c: 250: TRISB0 =1;
  4118  0067  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0068  1405               	bsf	5,0	;volatile
  4120                           
  4121                           ;main.c: 252: RBIF = 0;
  4122  0069  100B               	bcf	11,0	;volatile
  4123                           
  4124                           ;main.c: 253: RBIE = 1;
  4125  006A  158B               	bsf	11,3	;volatile
  4126                           
  4127                           ;main.c: 254: IOCB0= 1;
  4128  006B  1409               	bsf	9,0	;volatile
  4129                           
  4130                           ;main.c: 255: PORTB;
  4131  006C  0806               	movf	6,w	;volatile
  4132                           
  4133                           ;main.c: 267: SystemEnterSleep();
  4134  006D  20A4  118A         	fcall	_SystemEnterSleep
  4135                           
  4136                           ;main.c: 268: if(RAIF)
  4137  006F  1D8D               	btfss	13,3	;volatile
  4138  0070  2874               	goto	l4836
  4139                           
  4140                           ;main.c: 269: {
  4141                           ;main.c: 270: RAIF = 0;
  4142  0071  118D               	bcf	13,3	;volatile
  4143                           
  4144                           ;main.c: 271: PORTA;
  4145  0072  1683               	bsf	3,5	;RP0=1, select bank1
  4146  0073  0806               	movf	6,w	;volatile
  4147  0074                     l4836:	
  4148                           
  4149                           ;main.c: 272: }
  4150                           ;main.c: 274: Refurbish_Sfr();
  4151  0074  2396  118A         	fcall	_Refurbish_Sfr
  4152                           
  4153                           ;main.c: 275: ADCON0 = 0X41;
  4154                           
  4155                           ;main.c: 276: ADON = 1;
  4156                           
  4157                           ;main.c: 277: ADCON1 = 0x00;
  4158  0076  2BF6               	ljmp	PL24	;call to abstracted procedure
  4159  0077                     __end_of_WorkSleep:	
  4160  0077                     __ptext27:	
  4161 ;; *************** function _CheckTouchKey *****************
  4162 ;; Defined at:
  4163 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4177 ;;      Params:         0       0       0       0
  4178 ;;      Locals:         0       0       0       0
  4179 ;;      Temps:          0       0       0       0
  4180 ;;      Totals:         0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    5
  4184 ;; This function calls:
  4185 ;;		_CheckKeyOldValue
  4186 ;;		_CheckOnceResult
  4187 ;;		_CheckValidTime
  4188 ;;		_ClearResSum
  4189 ;;		_GetTouchKeyValue
  4190 ;;		_KeyStopClear
  4191 ;;		_TurnKeyFlags
  4192 ;; This function is called by:
  4193 ;;		_main
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           
  4198                           ;psect for function _CheckTouchKey
  4199  0077                     _CheckTouchKey:	
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4203  0077  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4204  0078  2885               	goto	l1373
  4205  0079  2134  118A         	fcall	_GetTouchKeyValue
  4206  007B  3008               	movlw	8
  4207  007C  1283               	bcf	3,5	;RP0=0, select bank0
  4208  007D  1303               	bcf	3,6	;RP1=0, select bank0
  4209  007E  0AB2               	incf	_KeyCounter,f
  4210  007F  0232               	subwf	_KeyCounter,w
  4211  0080  1C03               	skipc
  4212  0081  28A3               	goto	l4982
  4213  0082  01B2               	clrf	_KeyCounter
  4214  0083  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4215  0084  28A3               	goto	l4982
  4216  0085                     l1373:	
  4217  0085  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4218  0086  289D               	goto	l4976
  4219  0087  21AB  118A         	fcall	_CheckOnceResult
  4220  0089  233D  118A         	fcall	_TurnKeyFlags
  4221  008B  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4222  008C  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4223  008D  2894               	goto	l4966
  4224  008E  3003               	movlw	3
  4225  008F  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0090  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0091  0232               	subwf	_KeyCounter,w
  4228  0092  1C03               	skipc
  4229  0093  2899               	goto	l4974
  4230  0094                     l4966:	
  4231  0094  2327  118A         	fcall	_KeyStopClear
  4232  0096  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4233  0097  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4234  0098  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4235  0099                     l4974:	
  4236  0099  1283               	bcf	3,5	;RP0=0, select bank0
  4237  009A  1303               	bcf	3,6	;RP1=0, select bank0
  4238  009B  01B2               	clrf	_KeyCounter
  4239  009C  28A3               	goto	l4982
  4240  009D                     l4976:	
  4241  009D  22C3  118A         	fcall	_CheckKeyOldValue
  4242  009F  219C  118A         	fcall	_ClearResSum
  4243  00A1  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4244  00A2  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4245  00A3                     l4982:	
  4246  00A3  2B70               	ljmp	l3670	;# 
  4247  00A4                     __end_of_CheckTouchKey:	
  4248  00A4                     __ptext23:	
  4249 ;; *************** function _SystemEnterSleep *****************
  4250 ;; Defined at:
  4251 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;		None
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;  92              2    9[BANK0 ] unsigned int 
  4256 ;;  93              2    7[BANK0 ] unsigned int 
  4257 ;;  94              2    5[BANK0 ] unsigned int 
  4258 ;;  91              1   11[BANK0 ] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4263 ;; Tracked objects:
  4264 ;;		On entry : 300/0
  4265 ;;		On exit  : 300/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4268 ;;      Params:         0       0       0       0
  4269 ;;      Locals:         0       7       0       0
  4270 ;;      Temps:          2       0       0       0
  4271 ;;      Totals:         2       7       0       0
  4272 ;;Total ram usage:        9 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    4
  4275 ;; This function calls:
  4276 ;;		_ClearResSum
  4277 ;;		_GetTouchKeyValue
  4278 ;;		_KeyClearOne
  4279 ;; This function is called by:
  4280 ;;		_WorkSleep
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function _SystemEnterSleep
  4286  00A4                     _SystemEnterSleep:	
  4287  00A4                     l1385:	
  4288                           ;incstack = 0
  4289                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4290                           
  4291  00A4  0064               	clrwdt	;# 
  4292  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  4293  00A6  1303               	bcf	3,6	;RP1=0, select bank1
  4294  00A7  0181               	clrf	1	;volatile
  4295  00A8  3007               	movlw	7
  4296  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  4297  00AA  0481               	iorwf	1,f	;volatile
  4298  00AB  1581               	bsf	1,3	;volatile
  4299  00AC  0064               	clrwdt	;# 
  4300  00AD  300A               	movlw	10
  4301  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4302  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  4303  00B0  0081               	movwf	1	;volatile
  4304  00B1  0064               	clrwdt	;# 
  4305  00B2  1283               	bcf	3,5	;RP0=0, select bank2
  4306  00B3  1703               	bsf	3,6	;RP1=1, select bank2
  4307  00B4  0191               	clrf	17	;volatile
  4308  00B5  0193               	clrf	19	;volatile
  4309  00B6  3002               	movlw	2
  4310  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  4311  00B8  0094               	movwf	20	;volatile
  4312  00B9  0063               	sleep	;# 
  4313  00BA  0000               	nop	;# 
  4314  00BB  0064               	clrwdt	;# 
  4315  00BC  3072               	movlw	114
  4316  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4317  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4318  00BF  0094               	movwf	20	;volatile
  4319  00C0  3079               	movlw	121
  4320  00C1  1703               	bsf	3,6	;RP1=1, select bank2
  4321  00C2  0093               	movwf	19	;volatile
  4322  00C3  219C  118A         	fcall	_ClearResSum
  4323  00C5  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4324  00C6  2134  118A         	fcall	_GetTouchKeyValue
  4325  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  4326  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  4327  00CA  2402  118A         	fcall	PL38	;call to abstracted procedure
  4328  00CC  1C0B               	btfss	11,0	;volatile
  4329  00CD  188B               	btfsc	11,1	;volatile
  4330  00CE  28D1               	goto	l4488
  4331  00CF  1D8D               	btfss	13,3	;volatile
  4332  00D0  28D8               	goto	l4500
  4333  00D1                     l4488:	
  4334  00D1  219C               	fcall	_ClearResSum
  4335  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  4336  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  4337  00D4  01B2               	clrf	_KeyCounter
  4338  00D5  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4339  00D6  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4340  00D7  0008               	return
  4341  00D8                     l4500:	
  4342  00D8  0852               	movf	SystemEnterSleep@92,w
  4343  00D9  3903               	andlw	3
  4344  00DA  1003               	clrc
  4345  00DB  1903               	btfsc	3,2
  4346  00DC  292E               	goto	L11
  4347  00DD  0D54               	rlf	SystemEnterSleep@91,w
  4348  00DE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4349  00DF  0084               	movwf	4
  4350  00E0  1383               	bcf	3,7	;select IRP bank1
  4351  00E1  0800               	movf	0,w
  4352  00E2  00D0               	movwf	SystemEnterSleep@93
  4353  00E3  0A84               	incf	4,f
  4354  00E4  0800               	movf	0,w
  4355  00E5  00D1               	movwf	SystemEnterSleep@93+1
  4356  00E6  00CF               	movwf	SystemEnterSleep@94+1
  4357  00E7  0850               	movf	SystemEnterSleep@93,w
  4358  00E8  00CE               	movwf	SystemEnterSleep@94
  4359  00E9  0850               	movf	SystemEnterSleep@93,w
  4360  00EA  0451               	iorwf	SystemEnterSleep@93+1,w
  4361  00EB  1903               	btfsc	3,2
  4362  00EC  292D               	goto	l4534
  4363  00ED  0854               	movf	SystemEnterSleep@91,w
  4364  00EE  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4365  00EF  0084               	movwf	4
  4366  00F0  158A  2028  118A   	fcall	stringdir
  4367  00F3  07CE               	addwf	SystemEnterSleep@94,f
  4368  00F4  1803               	skipnc
  4369  00F5  0ACF               	incf	SystemEnterSleep@94+1,f
  4370  00F6  1003               	clrc
  4371  00F7  0D54               	rlf	SystemEnterSleep@91,w
  4372  00F8  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4373  00F9  23E1  118A         	fcall	PL16	;call to abstracted procedure
  4374  00FB  084F               	movf	SystemEnterSleep@94+1,w
  4375  00FC  0275               	subwf	??_SystemEnterSleep+1,w
  4376  00FD  1D03               	skipz
  4377  00FE  2901               	goto	u4775
  4378  00FF  084E               	movf	SystemEnterSleep@94,w
  4379  0100  0274               	subwf	??_SystemEnterSleep,w
  4380  0101                     u4775:	
  4381  0101  1C03               	skipc
  4382  0102  2915               	goto	L10
  4383  0103  2402  118A         	fcall	PL38	;call to abstracted procedure
  4384  0105                     l4514:	
  4385  0105  0852               	movf	SystemEnterSleep@92,w
  4386  0106  3903               	andlw	3
  4387  0107  1D03               	btfss	3,2
  4388  0108  290C               	goto	l4518
  4389  0109  0854               	movf	SystemEnterSleep@91,w
  4390  010A  22A0  118A         	fcall	_KeyClearOne
  4391  010C                     l4518:	
  4392  010C  1283               	bcf	3,5	;RP0=0, select bank0
  4393  010D  3002               	movlw	2
  4394  010E  1303               	bcf	3,6	;RP1=0, select bank0
  4395  010F  1003               	clrc
  4396  0110  2407  118A         	fcall	PL40	;call to abstracted procedure
  4397  0112  1803               	btfsc	3,0
  4398  0113  28D1               	goto	l4488
  4399  0114  2905               	goto	l4514
  4400  0115                     L10:	
  4401  0115  0D54               	rlf	SystemEnterSleep@91,w
  4402  0116  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4403  0117  23E1  118A         	fcall	PL16	;call to abstracted procedure
  4404  0119  1003               	clrc
  4405  011A  0D54               	rlf	SystemEnterSleep@91,w
  4406  011B  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4407  011C  23CB  118A         	fcall	PL12	;call to abstracted procedure
  4408  011E  0800               	movf	0,w
  4409  011F  00F4               	movwf	??_SystemEnterSleep
  4410  0120  0A84               	incf	4,f
  4411  0121  0800               	movf	0,w
  4412  0122  00F5               	movwf	??_SystemEnterSleep+1
  4413  0123  1003               	clrc
  4414  0124  0D54               	rlf	SystemEnterSleep@91,w
  4415  0125  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4416  0126  23CB  118A         	fcall	PL12	;call to abstracted procedure
  4417  0128  0850               	movf	SystemEnterSleep@93,w
  4418  0129  0080               	movwf	0
  4419  012A  0A84               	incf	4,f
  4420  012B  0851               	movf	SystemEnterSleep@93+1,w
  4421  012C  0080               	movwf	0
  4422  012D                     l4534:	
  4423  012D  1003               	clrc
  4424  012E                     L11:	
  4425  012E  3002               	movlw	2
  4426  012F  2407  118A         	fcall	PL40	;call to abstracted procedure
  4427  0131  1803               	btfsc	3,0
  4428  0132  28A4               	goto	l1385
  4429  0133  28D8               	goto	l4500
  4430  0134                     __end_of_SystemEnterSleep:	
  4431  0134                     __ptext31:	
  4432 ;; *************** function _GetTouchKeyValue *****************
  4433 ;; Defined at:
  4434 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  63              2    2[BANK0 ] unsigned int 
  4439 ;;  64              2    0[BANK0 ] unsigned int 
  4440 ;;  62              1    4[BANK0 ] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      void 
  4443 ;; Registers used:
  4444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/200
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4450 ;;      Params:         0       0       0       0
  4451 ;;      Locals:         0       5       0       0
  4452 ;;      Temps:          0       0       0       0
  4453 ;;      Totals:         0       5       0       0
  4454 ;;Total ram usage:        5 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		_ClearResSum
  4459 ;; This function is called by:
  4460 ;;		_CheckTouchKey
  4461 ;;		_SystemEnterSleep
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _GetTouchKeyValue
  4467  0134                     _GetTouchKeyValue:	
  4468                           
  4469                           ;incstack = 0
  4470                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4471  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4472  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4473  0136  01CD               	clrf	GetTouchKeyValue@62
  4474  0137  01CB               	clrf	GetTouchKeyValue@63
  4475  0138  0ACB               	incf	GetTouchKeyValue@63,f
  4476  0139  01CC               	clrf	GetTouchKeyValue@63+1
  4477  013A                     l4360:	
  4478  013A  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4479  013B  2940               	goto	l4364
  4480  013C  084B               	movf	GetTouchKeyValue@63,w
  4481  013D  3903               	andlw	3
  4482  013E  1903               	btfsc	3,2
  4483  013F  2991               	goto	l4392
  4484  0140                     l4364:	
  4485  0140  1703               	bsf	3,6	;RP1=1, select bank2
  4486  0141  0191               	clrf	17	;volatile
  4487  0142  0192               	clrf	18	;volatile
  4488  0143  3079               	movlw	121
  4489  0144  0093               	movwf	19	;volatile
  4490  0145  1303               	bcf	3,6	;RP1=0, select bank0
  4491  0146  1305               	bcf	5,6	;volatile
  4492  0147  1306               	bcf	6,6	;volatile
  4493  0148  0000               	nop	;# 
  4494  0149  0000               	nop	;# 
  4495  014A  0000               	nop	;# 
  4496  014B  0000               	nop	;# 
  4497  014C  0000               	nop	;# 
  4498  014D  0000               	nop	;# 
  4499  014E  0000               	nop	;# 
  4500  014F  0000               	nop	;# 
  4501  0150  1283               	bcf	3,5	;RP0=0, select bank0
  4502  0151  1303               	bcf	3,6	;RP1=0, select bank0
  4503  0152  1705               	bsf	5,6	;volatile
  4504  0153  084D               	movf	GetTouchKeyValue@62,w
  4505  0154  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4506  0155  0084               	movwf	4
  4507  0156  158A  2028  118A   	fcall	stringdir
  4508  0159  1703               	bsf	3,6	;RP1=1, select bank2
  4509  015A  0091               	movwf	17	;volatile
  4510  015B  1303               	bcf	3,6	;RP1=0, select bank0
  4511  015C  084D               	movf	GetTouchKeyValue@62,w
  4512  015D  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4513  015E  0084               	movwf	4
  4514  015F  158A  2028  118A   	fcall	stringdir
  4515  0162  1703               	bsf	3,6	;RP1=1, select bank2
  4516  0163  0092               	movwf	18	;volatile
  4517  0164  0000               	nop	;# 
  4518  0165  0000               	nop	;# 
  4519  0166  0000               	nop	;# 
  4520  0167  0000               	nop	;# 
  4521  0168  1283               	bcf	3,5	;RP0=0, select bank2
  4522  0169  1703               	bsf	3,6	;RP1=1, select bank2
  4523  016A  1411               	bsf	17,0	;volatile
  4524  016B  30D0               	movlw	208
  4525  016C  1303               	bcf	3,6	;RP1=0, select bank0
  4526  016D  00C9               	movwf	GetTouchKeyValue@64
  4527  016E  3007               	movlw	7
  4528  016F  00CA               	movwf	GetTouchKeyValue@64+1
  4529  0170                     l1295:	
  4530  0170  1703               	bsf	3,6	;RP1=1, select bank2
  4531  0171  1B91               	btfsc	17,7	;volatile
  4532  0172  297F               	goto	l4390
  4533  0173  3001               	movlw	1
  4534  0174  1303               	bcf	3,6	;RP1=0, select bank0
  4535  0175  02C9               	subwf	GetTouchKeyValue@64,f
  4536  0176  1C03               	skipc
  4537  0177  03CA               	decf	GetTouchKeyValue@64+1,f
  4538  0178  0849               	movf	GetTouchKeyValue@64,w
  4539  0179  044A               	iorwf	GetTouchKeyValue@64+1,w
  4540  017A  1D03               	btfss	3,2
  4541  017B  2970               	goto	l1295
  4542  017C  30FF               	movlw	255
  4543  017D  00B2               	movwf	_KeyCounter
  4544  017E  299C               	ljmp	l4244
  4545  017F                     l4390:	
  4546  017F  1303               	bcf	3,6	;RP1=0, select bank0
  4547  0180  1003               	clrc
  4548  0181  0D4D               	rlf	GetTouchKeyValue@62,w
  4549  0182  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4550  0183  0084               	movwf	4
  4551  0184  1703               	bsf	3,6	;RP1=1, select bank2
  4552  0185  0816               	movf	22,w	;volatile
  4553  0186  1383               	bcf	3,7	;select IRP bank1
  4554  0187  0780               	addwf	0,f
  4555  0188  0F84               	incfsz	4,f
  4556  0189  0800               	movf	0,w
  4557  018A  1803               	skipnc
  4558  018B  0A00               	incf	0,w
  4559  018C  00FF               	movwf	127
  4560  018D  0817               	movf	23,w	;volatile
  4561  018E  077F               	addwf	127,w
  4562  018F  0080               	movwf	0
  4563  0190  0384               	decf	4,f
  4564  0191                     l4392:	
  4565  0191  3002               	movlw	2
  4566  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0193  1003               	clrc
  4568  0194  0DCB               	rlf	GetTouchKeyValue@63,f
  4569  0195  0DCC               	rlf	GetTouchKeyValue@63+1,f
  4570  0196  0ACD               	incf	GetTouchKeyValue@62,f
  4571  0197  024D               	subwf	GetTouchKeyValue@62,w
  4572  0198  1C03               	skipc
  4573  0199  293A               	goto	l4360
  4574  019A  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4575  019B  0008               	return
  4576  019C                     __end_of_GetTouchKeyValue:	
  4577  019C                     __ptext32:	
  4578 ;; *************** function _ClearResSum *****************
  4579 ;; Defined at:
  4580 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;		None
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  56              1    3[COMMON] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/200
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4594 ;;      Params:         0       0       0       0
  4595 ;;      Locals:         1       0       0       0
  4596 ;;      Temps:          0       0       0       0
  4597 ;;      Totals:         1       0       0       0
  4598 ;;Total ram usage:        1 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    2
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_GetTouchKeyValue
  4605 ;;		_CheckTouchKey
  4606 ;;		_SystemEnterSleep
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           
  4611                           ;psect for function _ClearResSum
  4612  019C                     _ClearResSum:	
  4613  019C                     l4244:	
  4614                           ;incstack = 0
  4615                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4616                           
  4617  019C  01F3               	clrf	ClearResSum@56
  4618  019D                     l4246:	
  4619  019D  1003               	clrc
  4620  019E  0D73               	rlf	ClearResSum@56,w
  4621  019F  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4622  01A0  0084               	movwf	4
  4623  01A1  3002               	movlw	2
  4624  01A2  1383               	bcf	3,7	;select IRP bank1
  4625  01A3  0180               	clrf	0
  4626  01A4  0A84               	incf	4,f
  4627  01A5  0180               	clrf	0
  4628  01A6  0AF3               	incf	ClearResSum@56,f
  4629  01A7  0273               	subwf	ClearResSum@56,w
  4630  01A8  1803               	btfsc	3,0
  4631  01A9  0008               	return
  4632  01AA  299D               	goto	l4246
  4633  01AB                     __end_of_ClearResSum:	
  4634  01AB                     __ptext34:	
  4635 ;; *************** function _CheckOnceResult *****************
  4636 ;; Defined at:
  4637 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  71              2   10[BANK0 ] unsigned int 
  4642 ;;  72              2    7[BANK0 ] unsigned int 
  4643 ;;  73              2    4[BANK0 ] unsigned int 
  4644 ;;  68              1   12[BANK0 ] unsigned char 
  4645 ;;  69              1    9[BANK0 ] unsigned char 
  4646 ;;  70              1    6[BANK0 ] unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4656 ;;      Params:         0       0       0       0
  4657 ;;      Locals:         0       9       0       0
  4658 ;;      Temps:          0       4       0       0
  4659 ;;      Totals:         0      13       0       0
  4660 ;;Total ram usage:       13 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    3
  4663 ;; This function calls:
  4664 ;;		_KeyClearOne
  4665 ;;		_KeyHave
  4666 ;;		_KeyIsIn
  4667 ;; This function is called by:
  4668 ;;		_CheckTouchKey
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _CheckOnceResult
  4674  01AB                     _CheckOnceResult:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4678  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  4679  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  4680  01AD  01D5               	clrf	CheckOnceResult@68
  4681  01AE  01F9               	clrf	_KeyData	;volatile
  4682  01AF  01FA               	clrf	_KeyData+1	;volatile
  4683  01B0  01B1               	clrf	_KeyMaxSub
  4684  01B1                     l4634:	
  4685  01B1  0855               	movf	CheckOnceResult@68,w
  4686  01B2  3907               	andlw	7
  4687  01B3  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4688  01B4  0084               	movwf	4
  4689  01B5  158A  2028  118A   	fcall	stringdir
  4690  01B8  00CF               	movwf	CheckOnceResult@70
  4691  01B9  1003               	clrc
  4692  01BA  0D55               	rlf	CheckOnceResult@68,w
  4693  01BB  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4694  01BC  0084               	movwf	4
  4695  01BD  3003               	movlw	3
  4696  01BE                     u5015:	
  4697  01BE  0A84               	incf	4,f
  4698  01BF  1003               	clrc
  4699  01C0  1383               	bcf	3,7	;select IRP bank1
  4700  01C1  0C80               	rrf	0,f
  4701  01C2  0384               	decf	4,f
  4702  01C3  0C80               	rrf	0,f
  4703  01C4  3EFF               	addlw	-1
  4704  01C5  1D03               	skipz
  4705  01C6  29BE               	goto	u5015
  4706  01C7  1003               	clrc
  4707  01C8  0D55               	rlf	CheckOnceResult@68,w
  4708  01C9  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4709  01CA  0084               	movwf	4
  4710  01CB  0800               	movf	0,w
  4711  01CC  00D3               	movwf	CheckOnceResult@71
  4712  01CD  0A84               	incf	4,f
  4713  01CE  0800               	movf	0,w
  4714  01CF  00D4               	movwf	CheckOnceResult@71+1
  4715  01D0  0855               	movf	CheckOnceResult@68,w
  4716  01D1  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4717  01D2  0084               	movwf	4
  4718  01D3  158A  2028  118A   	fcall	stringdir
  4719  01D6  00D2               	movwf	CheckOnceResult@69
  4720  01D7  00D0               	movwf	CheckOnceResult@72
  4721  01D8  01D1               	clrf	CheckOnceResult@72+1
  4722  01D9  0853               	movf	CheckOnceResult@71,w
  4723  01DA  07D0               	addwf	CheckOnceResult@72,f
  4724  01DB  1803               	skipnc
  4725  01DC  0AD1               	incf	CheckOnceResult@72+1,f
  4726  01DD  0854               	movf	CheckOnceResult@71+1,w
  4727  01DE  07D1               	addwf	CheckOnceResult@72+1,f
  4728  01DF  0855               	movf	CheckOnceResult@68,w
  4729  01E0  228C  118A         	fcall	_KeyIsIn
  4730  01E2  3A00               	xorlw	0
  4731  01E3  1003               	clrc
  4732  01E4  1D03               	skipz
  4733  01E5  2A40               	goto	L15
  4734  01E6  0D55               	rlf	CheckOnceResult@68,w
  4735  01E7  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4736  01E8  0084               	movwf	4
  4737  01E9  1383               	bcf	3,7	;select IRP bank1
  4738  01EA  0800               	movf	0,w
  4739  01EB  00CD               	movwf	CheckOnceResult@73
  4740  01EC  0A84               	incf	4,f
  4741  01ED  0800               	movf	0,w
  4742  01EE  00CE               	movwf	CheckOnceResult@73+1
  4743  01EF  1003               	clrc
  4744  01F0  0D55               	rlf	CheckOnceResult@68,w
  4745  01F1  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4746  01F2  23C4  118A         	fcall	PL8	;call to abstracted procedure
  4747  01F4  0251               	subwf	CheckOnceResult@72+1,w
  4748  01F5  1D03               	skipz
  4749  01F6  29F9               	goto	u5035
  4750  01F7  0849               	movf	??_CheckOnceResult,w
  4751  01F8  0250               	subwf	CheckOnceResult@72,w
  4752  01F9                     u5035:	
  4753  01F9  1803               	skipnc
  4754  01FA  2A08               	goto	l4652
  4755  01FB  1003               	clrc
  4756  01FC  0D55               	rlf	CheckOnceResult@68,w
  4757  01FD  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4758  01FE  23C4  118A         	fcall	PL8	;call to abstracted procedure
  4759  0200  0853               	movf	CheckOnceResult@71,w
  4760  0201  0249               	subwf	??_CheckOnceResult,w
  4761  0202  00D3               	movwf	CheckOnceResult@71
  4762  0203  0854               	movf	CheckOnceResult@71+1,w
  4763  0204  1C03               	skipc
  4764  0205  0A54               	incf	CheckOnceResult@71+1,w
  4765  0206  024A               	subwf	??_CheckOnceResult+1,w
  4766  0207  2A2C               	goto	L13
  4767  0208                     l4652:	
  4768  0208  084E               	movf	CheckOnceResult@73+1,w
  4769  0209  0251               	subwf	CheckOnceResult@72+1,w
  4770  020A  1D03               	skipz
  4771  020B  2A0E               	goto	u5045
  4772  020C  084D               	movf	CheckOnceResult@73,w
  4773  020D  0250               	subwf	CheckOnceResult@72,w
  4774  020E                     u5045:	
  4775  020E  1803               	skipnc
  4776  020F  2A84               	goto	l4698
  4777  0210  1003               	clrc
  4778  0211  0D55               	rlf	CheckOnceResult@68,w
  4779  0212  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4780  0213  23C4  118A         	fcall	PL8	;call to abstracted procedure
  4781  0215  0251               	subwf	CheckOnceResult@72+1,w
  4782  0216  1D03               	skipz
  4783  0217  2A1A               	goto	u5055
  4784  0218  0849               	movf	??_CheckOnceResult,w
  4785  0219  0250               	subwf	CheckOnceResult@72,w
  4786  021A                     u5055:	
  4787  021A  1803               	skipnc
  4788  021B  2A84               	goto	l4698
  4789  021C  1003               	clrc
  4790  021D  0D55               	rlf	CheckOnceResult@68,w
  4791  021E  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4792  021F  0084               	movwf	4
  4793  0220  084D               	movf	CheckOnceResult@73,w
  4794  0221  0080               	movwf	0
  4795  0222  0A84               	incf	4,f
  4796  0223  084E               	movf	CheckOnceResult@73+1,w
  4797  0224  0080               	movwf	0
  4798  0225  0853               	movf	CheckOnceResult@71,w
  4799  0226  024D               	subwf	CheckOnceResult@73,w
  4800  0227  00D3               	movwf	CheckOnceResult@71
  4801  0228  0854               	movf	CheckOnceResult@71+1,w
  4802  0229  1C03               	skipc
  4803  022A  0A54               	incf	CheckOnceResult@71+1,w
  4804  022B  024E               	subwf	CheckOnceResult@73+1,w
  4805  022C                     L13:	
  4806  022C  00D4               	movwf	CheckOnceResult@71+1
  4807  022D  0855               	movf	CheckOnceResult@68,w
  4808  022E  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4809  022F  0084               	movwf	4
  4810  0230  0180               	clrf	0
  4811  0231  0854               	movf	CheckOnceResult@71+1,w
  4812  0232  1903               	btfsc	3,2
  4813  0233  2A36               	goto	l4666
  4814  0234  30FF               	movlw	255
  4815  0235  2A37               	goto	L14
  4816  0236                     l4666:	
  4817  0236  0853               	movf	CheckOnceResult@71,w
  4818  0237                     L14:	
  4819  0237  00D2               	movwf	CheckOnceResult@69
  4820  0238  0231               	subwf	_KeyMaxSub,w
  4821  0239  1803               	skipnc
  4822  023A  2A3E               	goto	l4672
  4823  023B  0852               	movf	CheckOnceResult@69,w
  4824  023C  00B1               	movwf	_KeyMaxSub
  4825  023D  2A7E               	goto	l4696
  4826  023E                     l4672:	
  4827  023E  0AB2               	incf	_KeyCounter,f
  4828  023F  2A84               	goto	l4698
  4829  0240                     L15:	
  4830  0240  0D55               	rlf	CheckOnceResult@68,w
  4831  0241  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4832  0242  0084               	movwf	4
  4833  0243  1383               	bcf	3,7	;select IRP bank1
  4834  0244  0800               	movf	0,w
  4835  0245  00C9               	movwf	??_CheckOnceResult
  4836  0246  0A84               	incf	4,f
  4837  0247  0800               	movf	0,w
  4838  0248  00CA               	movwf	??_CheckOnceResult+1
  4839  0249  0849               	movf	??_CheckOnceResult,w
  4840  024A  3E01               	addlw	1
  4841  024B  00CB               	movwf	??_CheckOnceResult+2
  4842  024C  084A               	movf	??_CheckOnceResult+1,w
  4843  024D  1803               	skipnc
  4844  024E  3E01               	addlw	1
  4845  024F  00CC               	movwf	??_CheckOnceResult+3
  4846  0250  0851               	movf	CheckOnceResult@72+1,w
  4847  0251  024C               	subwf	??_CheckOnceResult+3,w
  4848  0252  1D03               	skipz
  4849  0253  2A56               	goto	u5085
  4850  0254  0850               	movf	CheckOnceResult@72,w
  4851  0255  024B               	subwf	??_CheckOnceResult+2,w
  4852  0256                     u5085:	
  4853  0256  1C03               	btfss	3,0
  4854  0257  2A84               	goto	l4698
  4855  0258  1003               	clrc
  4856  0259  0D55               	rlf	CheckOnceResult@68,w
  4857  025A  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4858  025B  0084               	movwf	4
  4859  025C  0800               	movf	0,w
  4860  025D  23B2  118A         	fcall	PL4	;call to abstracted procedure
  4861  025F  1C03               	skipc
  4862  0260  2A6A               	goto	l4686
  4863  0261  1003               	clrc
  4864  0262  0D55               	rlf	CheckOnceResult@68,w
  4865  0263  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4866  0264  0084               	movwf	4
  4867  0265  0800               	movf	0,w
  4868  0266  23B2  118A         	fcall	PL4	;call to abstracted procedure
  4869  0268  1803               	skipnc
  4870  0269  2A76               	goto	l4690
  4871  026A                     l4686:	
  4872  026A  0855               	movf	CheckOnceResult@68,w
  4873  026B  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4874  026C  0084               	movwf	4
  4875  026D  3009               	movlw	9
  4876  026E  0A80               	incf	0,f
  4877  026F  0200               	subwf	0,w
  4878  0270  1C03               	skipc
  4879  0271  2A7A               	goto	l4694
  4880  0272  0855               	movf	CheckOnceResult@68,w
  4881  0273  22A0  118A         	fcall	_KeyClearOne
  4882  0275  2A84               	goto	l4698
  4883  0276                     l4690:	
  4884  0276  0855               	movf	CheckOnceResult@68,w
  4885  0277  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4886  0278  0084               	movwf	4
  4887  0279  0180               	clrf	0
  4888  027A                     l4694:	
  4889  027A  087A               	movf	_KeyData+1,w	;volatile
  4890  027B  0479               	iorwf	_KeyData,w	;volatile
  4891  027C  1D03               	btfss	3,2
  4892  027D  2A84               	goto	l4698
  4893  027E                     l4696:	
  4894  027E  084F               	movf	CheckOnceResult@70,w
  4895  027F  00F3               	movwf	KeyHave@59
  4896  0280  01F4               	clrf	KeyHave@59+1
  4897  0281  0855               	movf	CheckOnceResult@68,w
  4898  0282  22B5  118A         	fcall	_KeyHave
  4899  0284                     l4698:	
  4900  0284  3002               	movlw	2
  4901  0285  1283               	bcf	3,5	;RP0=0, select bank0
  4902  0286  1303               	bcf	3,6	;RP1=0, select bank0
  4903  0287  0AD5               	incf	CheckOnceResult@68,f
  4904  0288  0255               	subwf	CheckOnceResult@68,w
  4905  0289  1803               	btfsc	3,0
  4906  028A  0008               	return
  4907  028B  29B1               	goto	l4634
  4908  028C                     __end_of_CheckOnceResult:	
  4909  028C                     __ptext38:	
  4910 ;; *************** function _KeyIsIn *****************
  4911 ;; Defined at:
  4912 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  45              1    wreg     unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  45              1    4[COMMON] unsigned char 
  4917 ;;  46              1    3[COMMON] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      unsigned char 
  4920 ;; Registers used:
  4921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 300/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4927 ;;      Params:         0       0       0       0
  4928 ;;      Locals:         2       0       0       0
  4929 ;;      Temps:          0       0       0       0
  4930 ;;      Totals:         2       0       0       0
  4931 ;;Total ram usage:        2 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    2
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_KeyClearIn
  4938 ;;		_CheckOnceResult
  4939 ;;		_CheckKeyOldValue
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _KeyIsIn
  4945  028C                     _KeyIsIn:	
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4949                           ;KeyIsIn@45 stored from wreg
  4950  028C  00F4               	movwf	KeyIsIn@45
  4951  028D  3907               	andlw	7
  4952  028E  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4953  028F  0084               	movwf	4
  4954  0290  158A  2028  118A   	fcall	stringdir
  4955  0293  00F3               	movwf	KeyIsIn@46
  4956  0294  1DF4               	btfss	KeyIsIn@45,3
  4957  0295  2A9A               	goto	l3020
  4958  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0297  1303               	bcf	3,6	;RP1=0, select bank0
  4960  0298  082D               	movf	_KeyFlag+1,w	;volatile
  4961  0299  2A9D               	goto	L20
  4962  029A                     l3020:	
  4963  029A  1283               	bcf	3,5	;RP0=0, select bank0
  4964  029B  1303               	bcf	3,6	;RP1=0, select bank0
  4965  029C  082C               	movf	_KeyFlag,w	;volatile
  4966  029D                     L20:	
  4967  029D  05F3               	andwf	KeyIsIn@46,f
  4968  029E  0873               	movf	KeyIsIn@46,w
  4969  029F  0008               	return
  4970  02A0                     __end_of_KeyIsIn:	
  4971  02A0                     __ptext36:	
  4972 ;; *************** function _KeyClearOne *****************
  4973 ;; Defined at:
  4974 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  49              1    wreg     unsigned char 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  49              1    3[COMMON] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4988 ;;      Params:         0       0       0       0
  4989 ;;      Locals:         1       0       0       0
  4990 ;;      Temps:          0       0       0       0
  4991 ;;      Totals:         1       0       0       0
  4992 ;;Total ram usage:        1 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    2
  4995 ;; This function calls:
  4996 ;;		Nothing
  4997 ;; This function is called by:
  4998 ;;		_KeyClearIn
  4999 ;;		_KeyStopClear
  5000 ;;		_CheckOnceResult
  5001 ;;		_SystemEnterSleep
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function _KeyClearOne
  5007  02A0                     _KeyClearOne:	
  5008                           
  5009                           ;incstack = 0
  5010                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  5011                           ;KeyClearOne@49 stored from wreg
  5012  02A0  00F3               	movwf	KeyClearOne@49
  5013  02A1  1003               	clrc
  5014  02A2  0D73               	rlf	KeyClearOne@49,w
  5015  02A3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5016  02A4  0084               	movwf	4
  5017  02A5  1383               	bcf	3,7	;select IRP bank1
  5018  02A6  23F0  118A         	fcall	PL22	;call to abstracted procedure
  5019  02A8  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5020  02A9  0084               	movwf	4
  5021  02AA  23F0  118A         	fcall	PL22	;call to abstracted procedure
  5022  02AC  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5023  02AD  0084               	movwf	4
  5024  02AE  23F0               	fcall	PL22	;call to abstracted procedure
  5025  02AF  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5026  02B0  0084               	movwf	4
  5027  02B1  0180               	clrf	0
  5028  02B2  0A84               	incf	4,f
  5029  02B3  0180               	clrf	0	;# 
  5030  02B4  0008               	return
  5031  02B5                     __end_of_KeyClearOne:	
  5032  02B5                     __ptext35:	
  5033 ;; *************** function _KeyHave *****************
  5034 ;; Defined at:
  5035 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  58              1    wreg     unsigned char 
  5038 ;;  59              2    3[COMMON] unsigned int 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  58              1    5[COMMON] unsigned char 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  1    wreg      void 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : B00/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5050 ;;      Params:         2       0       0       0
  5051 ;;      Locals:         1       0       0       0
  5052 ;;      Temps:          0       0       0       0
  5053 ;;      Totals:         3       0       0       0
  5054 ;;Total ram usage:        3 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    2
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_CheckOnceResult
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _KeyHave
  5066  02B5                     _KeyHave:	
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5070                           ;KeyHave@58 stored from wreg
  5071  02B5  00F5               	movwf	KeyHave@58
  5072  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  5073  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  5074  02B8  0AB2               	incf	_KeyCounter,f
  5075  02B9  01F9               	clrf	_KeyData	;volatile
  5076  02BA  01FA               	clrf	_KeyData+1	;volatile
  5077  02BB  1DF5               	btfss	KeyHave@58,3
  5078  02BC  2AC0               	goto	l3172
  5079  02BD  0873               	movf	KeyHave@59,w
  5080  02BE  00FA               	movwf	_KeyData+1	;volatile
  5081  02BF  0008               	return
  5082  02C0                     l3172:	
  5083  02C0  0873               	movf	KeyHave@59,w
  5084  02C1  00F9               	movwf	_KeyData	;volatile
  5085  02C2  0008               	return
  5086  02C3                     __end_of_KeyHave:	
  5087  02C3                     __ptext37:	
  5088 ;; *************** function _CheckKeyOldValue *****************
  5089 ;; Defined at:
  5090 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  80              2    2[BANK0 ] unsigned int 
  5095 ;;  79              2    0[BANK0 ] unsigned int 
  5096 ;;  78              1    4[BANK0 ] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5106 ;;      Params:         0       0       0       0
  5107 ;;      Locals:         0       5       0       0
  5108 ;;      Temps:          2       0       0       0
  5109 ;;      Totals:         2       5       0       0
  5110 ;;Total ram usage:        7 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    3
  5113 ;; This function calls:
  5114 ;;		_KeyIsIn
  5115 ;; This function is called by:
  5116 ;;		_CheckTouchKey
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           
  5121                           ;psect for function _CheckKeyOldValue
  5122  02C3                     _CheckKeyOldValue:	
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5126  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  5127  02C4  3004               	movlw	4
  5128  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  5129  02C6  01CD               	clrf	CheckKeyOldValue@78
  5130  02C7  0AB0               	incf	CheckKeyOldValue@F77,f
  5131  02C8  0230               	subwf	CheckKeyOldValue@F77,w
  5132  02C9  1C03               	btfss	3,0
  5133  02CA  0008               	return
  5134  02CB  01B0               	clrf	CheckKeyOldValue@F77
  5135  02CC                     l3600:	
  5136  02CC  1003               	clrc
  5137  02CD  0D4D               	rlf	CheckKeyOldValue@78,w
  5138  02CE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5139  02CF  0084               	movwf	4
  5140  02D0  1383               	bcf	3,7	;select IRP bank1
  5141  02D1  0800               	movf	0,w
  5142  02D2  00C9               	movwf	CheckKeyOldValue@79
  5143  02D3  0A84               	incf	4,f
  5144  02D4  0800               	movf	0,w
  5145  02D5  00CA               	movwf	CheckKeyOldValue@79+1
  5146  02D6  084D               	movf	CheckKeyOldValue@78,w
  5147  02D7  228C  118A         	fcall	_KeyIsIn
  5148  02D9  3A00               	xorlw	0
  5149  02DA  1003               	clrc
  5150  02DB  1D03               	skipz
  5151  02DC  2B11               	goto	L19
  5152  02DD  0D4D               	rlf	CheckKeyOldValue@78,w
  5153  02DE  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5154  02DF  0084               	movwf	4
  5155  02E0  1383               	bcf	3,7	;select IRP bank1
  5156  02E1  23A4  118A         	fcall	PL2	;call to abstracted procedure
  5157  02E3  1903               	skipnz
  5158  02E4  024B               	subwf	CheckKeyOldValue@80,w
  5159  02E5  1C03               	skipc
  5160  02E6  2AED               	goto	L16
  5161  02E7  0F4B               	incfsz	CheckKeyOldValue@80,w
  5162  02E8  2B10               	goto	l1336
  5163  02E9  0A4C               	incf	CheckKeyOldValue@80+1,w
  5164  02EA  1003               	clrc
  5165  02EB  1D03               	btfss	3,2
  5166  02EC  2B11               	goto	L19
  5167  02ED                     L16:	
  5168  02ED  0D4D               	rlf	CheckKeyOldValue@78,w
  5169  02EE  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5170  02EF  0084               	movwf	4
  5171  02F0  23A4  118A         	fcall	PL2	;call to abstracted procedure
  5172  02F2  1903               	skipnz
  5173  02F3  024B               	subwf	CheckKeyOldValue@80,w
  5174  02F4  1C03               	skipc
  5175  02F5  2AFC               	goto	L17
  5176  02F6  0F4B               	incfsz	CheckKeyOldValue@80,w
  5177  02F7  2B10               	goto	l1336
  5178  02F8  0A4C               	incf	CheckKeyOldValue@80+1,w
  5179  02F9  1003               	clrc
  5180  02FA  1D03               	btfss	3,2
  5181  02FB  2B11               	goto	L19
  5182  02FC                     L17:	
  5183  02FC  0D4D               	rlf	CheckKeyOldValue@78,w
  5184  02FD  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5185  02FE  0084               	movwf	4
  5186  02FF  23A4  118A         	fcall	PL2	;call to abstracted procedure
  5187  0301  1903               	skipnz
  5188  0302  024B               	subwf	CheckKeyOldValue@80,w
  5189  0303  1C03               	skipc
  5190  0304  2B0B               	goto	L18
  5191  0305  0F4B               	incfsz	CheckKeyOldValue@80,w
  5192  0306  2B10               	goto	l1336
  5193  0307  0A4C               	incf	CheckKeyOldValue@80+1,w
  5194  0308  1003               	clrc
  5195  0309  1D03               	btfss	3,2
  5196  030A  2B11               	goto	L19
  5197  030B                     L18:	
  5198  030B  0D4D               	rlf	CheckKeyOldValue@78,w
  5199  030C  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5200  030D  0084               	movwf	4
  5201  030E  23FC  118A         	fcall	PL28	;call to abstracted procedure
  5202  0310                     l1336:	
  5203  0310  1003               	clrc
  5204  0311                     L19:	
  5205  0311  0D4D               	rlf	CheckKeyOldValue@78,w
  5206  0312  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5207  0313  0084               	movwf	4
  5208  0314  1383               	bcf	3,7	;select IRP bank0
  5209  0315  23E8  118A         	fcall	PL20	;call to abstracted procedure
  5210  0317  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5211  0318  23D6  118A         	fcall	PL14	;call to abstracted procedure
  5212  031A  23E8  118A         	fcall	PL20	;call to abstracted procedure
  5213  031C  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5214  031D  23D6  118A         	fcall	PL14	;call to abstracted procedure
  5215  031F  23FC  118A         	fcall	PL28	;call to abstracted procedure
  5216  0321  3002               	movlw	2
  5217  0322  0ACD               	incf	CheckKeyOldValue@78,f
  5218  0323  024D               	subwf	CheckKeyOldValue@78,w
  5219  0324  1803               	btfsc	3,0
  5220  0325  0008               	return
  5221  0326  2ACC               	goto	l3600
  5222  0327                     __end_of_CheckKeyOldValue:	
  5223  0327                     __ptext30:	
  5224 ;; *************** function _KeyStopClear *****************
  5225 ;; Defined at:
  5226 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;  53              1    4[COMMON] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5240 ;;      Params:         0       0       0       0
  5241 ;;      Locals:         1       0       0       0
  5242 ;;      Temps:          0       0       0       0
  5243 ;;      Totals:         1       0       0       0
  5244 ;;Total ram usage:        1 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    3
  5247 ;; This function calls:
  5248 ;;		_KeyClearOne
  5249 ;; This function is called by:
  5250 ;;		_CheckTouchKey
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           
  5255                           ;psect for function _KeyStopClear
  5256  0327                     _KeyStopClear:	
  5257                           
  5258                           ;incstack = 0
  5259                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5260  0327  1283               	bcf	3,5	;RP0=0, select bank0
  5261  0328  1303               	bcf	3,6	;RP1=0, select bank0
  5262  0329  01AC               	clrf	_KeyFlag	;volatile
  5263  032A  01AD               	clrf	_KeyFlag+1	;volatile
  5264  032B  01F4               	clrf	KeyStopClear@53
  5265  032C                     l3512:	
  5266  032C  1003               	clrc
  5267  032D  0D74               	rlf	KeyStopClear@53,w
  5268  032E  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5269  032F  0084               	movwf	4
  5270  0330  1383               	bcf	3,7	;select IRP bank1
  5271  0331  0180               	clrf	0
  5272  0332  0A84               	incf	4,f
  5273  0333  0180               	clrf	0
  5274  0334  0874               	movf	KeyStopClear@53,w
  5275  0335  22A0  118A         	fcall	_KeyClearOne
  5276  0337  3002               	movlw	2
  5277  0338  0AF4               	incf	KeyStopClear@53,f
  5278  0339  0274               	subwf	KeyStopClear@53,w
  5279  033A  1803               	btfsc	3,0
  5280  033B  0008               	return
  5281  033C  2B2C               	goto	l3512
  5282  033D                     __end_of_KeyStopClear:	
  5283  033D                     __ptext28:	
  5284 ;; *************** function _TurnKeyFlags *****************
  5285 ;; Defined at:
  5286 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5300 ;;      Params:         0       0       0       0
  5301 ;;      Locals:         0       0       0       0
  5302 ;;      Temps:          0       0       0       0
  5303 ;;      Totals:         0       0       0       0
  5304 ;;Total ram usage:        0 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    4
  5307 ;; This function calls:
  5308 ;;		_KeyClearIn
  5309 ;; This function is called by:
  5310 ;;		_CheckTouchKey
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function _TurnKeyFlags
  5316  033D                     _TurnKeyFlags:	
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5320  033D  087A               	movf	_KeyData+1,w	;volatile
  5321  033E  0479               	iorwf	_KeyData,w	;volatile
  5322  033F  1903               	btfsc	3,2
  5323  0340  2B61               	goto	l3660
  5324  0341  1283               	bcf	3,5	;RP0=0, select bank0
  5325  0342  1303               	bcf	3,6	;RP1=0, select bank0
  5326  0343  01AE               	clrf	TurnKeyFlags@F84
  5327  0344  0879               	movf	_KeyData,w	;volatile
  5328  0345  0624               	xorwf	_KeyOldData,w	;volatile
  5329  0346  1D03               	skipz
  5330  0347  2B5A               	goto	l1354
  5331  0348  087A               	movf	_KeyData+1,w	;volatile
  5332  0349  0625               	xorwf	_KeyOldData+1,w	;volatile
  5333  034A  1D03               	skipz
  5334  034B  2B5A               	goto	l1354
  5335  034C  3002               	movlw	2
  5336  034D  0AAF               	incf	TurnKeyFlags@F83,f
  5337  034E  022F               	subwf	TurnKeyFlags@F83,w
  5338  034F  1C03               	skipc
  5339  0350  0008               	return
  5340  0351  01AF               	clrf	TurnKeyFlags@F83
  5341  0352  0879               	movf	_KeyData,w	;volatile
  5342  0353  00AC               	movwf	_KeyFlag	;volatile
  5343  0354  087A               	movf	_KeyData+1,w	;volatile
  5344  0355  00AD               	movwf	_KeyFlag+1	;volatile
  5345  0356  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5346  0357  0008               	return
  5347  0358  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5348  0359  2B86               	ljmp	l3146
  5349  035A                     l1354:	
  5350  035A  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5351  035B  0879               	movf	_KeyData,w	;volatile
  5352  035C  00A4               	movwf	_KeyOldData	;volatile
  5353  035D  087A               	movf	_KeyData+1,w	;volatile
  5354  035E  00A5               	movwf	_KeyOldData+1	;volatile
  5355  035F  01AF               	clrf	TurnKeyFlags@F83
  5356  0360  0008               	return
  5357  0361                     l3660:	
  5358  0361  1283               	bcf	3,5	;RP0=0, select bank0
  5359  0362  1303               	bcf	3,6	;RP1=0, select bank0
  5360  0363  01AF               	clrf	TurnKeyFlags@F83
  5361  0364  01A4               	clrf	_KeyOldData	;volatile
  5362  0365  01A5               	clrf	_KeyOldData+1	;volatile
  5363  0366  3002               	movlw	2
  5364  0367  0AAE               	incf	TurnKeyFlags@F84,f
  5365  0368  022E               	subwf	TurnKeyFlags@F84,w
  5366  0369  1C03               	skipc
  5367  036A  0008               	return
  5368  036B  01AE               	clrf	TurnKeyFlags@F84
  5369  036C  01AC               	clrf	_KeyFlag	;volatile
  5370  036D  01AD               	clrf	_KeyFlag+1	;volatile
  5371  036E  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5372  036F  0008               	return
  5373  0370                     __end_of_TurnKeyFlags:	
  5374  0370                     __ptext33:	
  5375 ;; *************** function _CheckValidTime *****************
  5376 ;; Defined at:
  5377 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5391 ;;      Params:         0       0       0       0
  5392 ;;      Locals:         0       0       0       0
  5393 ;;      Temps:          0       0       0       0
  5394 ;;      Totals:         0       0       0       0
  5395 ;;Total ram usage:        0 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    2
  5398 ;; This function calls:
  5399 ;;		Nothing
  5400 ;; This function is called by:
  5401 ;;		_CheckTouchKey
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _CheckValidTime
  5407  0370                     _CheckValidTime:	
  5408  0370                     l3670:	
  5409                           ;incstack = 0
  5410                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5411                           
  5412  0370  1283               	bcf	3,5	;RP0=0, select bank0
  5413  0371  1303               	bcf	3,6	;RP1=0, select bank0
  5414  0372  082D               	movf	_KeyFlag+1,w	;volatile
  5415  0373  042C               	iorwf	_KeyFlag,w	;volatile
  5416  0374  1903               	btfsc	3,2
  5417  0375  2B82               	goto	l3676
  5418  0376  1683               	bsf	3,5	;RP0=1, select bank1
  5419  0377  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5420  0378  1903               	skipnz
  5421  0379  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5422  037A  303A               	movlw	58
  5423  037B  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5424  037C  3098               	movlw	152
  5425  037D  1903               	skipnz
  5426  037E  0230               	subwf	CheckValidTime@F87^(0+128),w
  5427  037F  1C03               	skipc
  5428  0380  0008               	return
  5429  0381  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5430  0382                     l3676:	
  5431  0382  1683               	bsf	3,5	;RP0=1, select bank1
  5432  0383  01B0               	clrf	CheckValidTime@F87^(0+128)
  5433  0384  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5434  0385  0008               	return
  5435  0386                     __end_of_CheckValidTime:	
  5436  0386                     __ptext29:	
  5437 ;; *************** function _KeyClearIn *****************
  5438 ;; Defined at:
  5439 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  51              1    5[COMMON] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 300/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5453 ;;      Params:         0       0       0       0
  5454 ;;      Locals:         1       0       0       0
  5455 ;;      Temps:          0       0       0       0
  5456 ;;      Totals:         1       0       0       0
  5457 ;;Total ram usage:        1 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    3
  5460 ;; This function calls:
  5461 ;;		_KeyClearOne
  5462 ;;		_KeyIsIn
  5463 ;; This function is called by:
  5464 ;;		_TurnKeyFlags
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _KeyClearIn
  5470  0386                     _KeyClearIn:	
  5471  0386                     l3146:	
  5472                           ;incstack = 0
  5473                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5474                           
  5475  0386  01F5               	clrf	KeyClearIn@51
  5476  0387                     l3152:	
  5477  0387  0875               	movf	KeyClearIn@51,w
  5478  0388  228C  118A         	fcall	_KeyIsIn
  5479  038A  3A00               	xorlw	0
  5480  038B  1D03               	skipz
  5481  038C  2B90               	goto	l3156
  5482  038D  0875               	movf	KeyClearIn@51,w
  5483  038E  22A0  118A         	fcall	_KeyClearOne
  5484  0390                     l3156:	
  5485  0390  3002               	movlw	2
  5486  0391  0AF5               	incf	KeyClearIn@51,f
  5487  0392  0275               	subwf	KeyClearIn@51,w
  5488  0393  1803               	btfsc	3,0
  5489  0394  0008               	return
  5490  0395  2B87               	goto	l3152
  5491  0396                     __end_of_KeyClearIn:	
  5492  0396                     __ptext24:	
  5493 ;; *************** function _Refurbish_Sfr *****************
  5494 ;; Defined at:
  5495 ;;		line 117 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, status,2, status,0
  5504 ;; Tracked objects:
  5505 ;;		On entry : 200/0
  5506 ;;		On exit  : 300/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5509 ;;      Params:         0       0       0       0
  5510 ;;      Locals:         0       0       0       0
  5511 ;;      Temps:          0       0       0       0
  5512 ;;      Totals:         0       0       0       0
  5513 ;;Total ram usage:        0 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    2
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_WorkSleep
  5520 ;;		_main
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           
  5525                           ;psect for function _Refurbish_Sfr
  5526  0396                     _Refurbish_Sfr:	
  5527                           
  5528                           ;main.c: 120: PIE1 = 2;
  5529                           
  5530                           ;incstack = 0
  5531                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5532  0396  3002               	movlw	2
  5533  0397  1283               	bcf	3,5	;RP0=0, select bank0
  5534  0398  008E               	movwf	14	;volatile
  5535                           
  5536                           ;main.c: 121: PR2 = 250;
  5537  0399  30FA               	movlw	250
  5538  039A  0091               	movwf	17	;volatile
  5539                           
  5540                           ;main.c: 122: INTCON = 0XC0;
  5541  039B  30C0               	movlw	192
  5542  039C  008B               	movwf	11	;volatile
  5543                           
  5544                           ;main.c: 123: if (4 != T2CON)
  5545  039D  3004               	movlw	4
  5546  039E  0613               	xorwf	19,w	;volatile
  5547  039F  1903               	btfsc	3,2
  5548  03A0  0008               	return
  5549                           
  5550                           ;main.c: 124: T2CON = 4;
  5551  03A1  3004               	movlw	4
  5552  03A2  0093               	movwf	19	;volatile
  5553  03A3  0008               	return
  5554  03A4                     __end_of_Refurbish_Sfr:	
  5555  03A4                     PL2:	
  5556  03A4  0800               	movf	0,w
  5557  03A5  00CB               	movwf	CheckKeyOldValue@80
  5558  03A6  0A84               	incf	4,f
  5559  03A7  0800               	movf	0,w
  5560  03A8  00CC               	movwf	CheckKeyOldValue@80+1
  5561  03A9  0849               	movf	CheckKeyOldValue@79,w
  5562  03AA  02CB               	subwf	CheckKeyOldValue@80,f
  5563  03AB  084A               	movf	CheckKeyOldValue@79+1,w
  5564  03AC  1C03               	skipc
  5565  03AD  03CC               	decf	CheckKeyOldValue@80+1,f
  5566  03AE  02CC               	subwf	CheckKeyOldValue@80+1,f
  5567  03AF  3000               	movlw	0
  5568  03B0  024C               	subwf	CheckKeyOldValue@80+1,w
  5569  03B1  3402               	retlw	2
  5570  03B2                     __end_ofPL2:	
  5571  03B2                     PL4:	
  5572  03B2  00C9               	movwf	??_CheckOnceResult
  5573  03B3  0A84               	incf	4,f
  5574  03B4  0800               	movf	0,w
  5575  03B5  00CA               	movwf	??_CheckOnceResult+1
  5576  03B6  0852               	movf	CheckOnceResult@69,w
  5577  03B7  0749               	addwf	??_CheckOnceResult,w
  5578  03B8  00CB               	movwf	??_CheckOnceResult+2
  5579  03B9  084A               	movf	??_CheckOnceResult+1,w
  5580  03BA  1803               	skipnc
  5581  03BB  0A4A               	incf	??_CheckOnceResult+1,w
  5582  03BC  00CC               	movwf	??_CheckOnceResult+3
  5583  03BD  0854               	movf	CheckOnceResult@71+1,w
  5584  03BE  024C               	subwf	??_CheckOnceResult+3,w
  5585  03BF  1D03               	skipz
  5586  03C0  0008               	return
  5587  03C1  0853               	movf	CheckOnceResult@71,w
  5588  03C2  024B               	subwf	??_CheckOnceResult+2,w
  5589  03C3  0008               	return
  5590  03C4                     __end_ofPL4:	
  5591  03C4                     PL8:	
  5592  03C4  0084               	movwf	4
  5593  03C5  0800               	movf	0,w
  5594  03C6  00C9               	movwf	??_CheckOnceResult
  5595  03C7  0A84               	incf	4,f
  5596  03C8  0800               	movf	0,w
  5597  03C9  00CA               	movwf	??_CheckOnceResult+1
  5598  03CA  0008               	return
  5599  03CB                     __end_ofPL8:	
  5600  03CB                     PL12:	
  5601  03CB  0084               	movwf	4
  5602  03CC  0874               	movf	??_SystemEnterSleep,w
  5603  03CD  0080               	movwf	0
  5604  03CE  0A84               	incf	4,f
  5605  03CF  0875               	movf	??_SystemEnterSleep+1,w
  5606  03D0  0080               	movwf	0
  5607  03D1  1003               	clrc
  5608  03D2  0D54               	rlf	SystemEnterSleep@91,w
  5609  03D3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5610  03D4  0084               	movwf	4
  5611  03D5  0008               	return
  5612  03D6                     __end_ofPL12:	
  5613  03D6                     PL14:	
  5614  03D6  0084               	movwf	4
  5615  03D7  0875               	movf	??_CheckKeyOldValue,w
  5616  03D8  0080               	movwf	0
  5617  03D9  0A84               	incf	4,f
  5618  03DA  0876               	movf	??_CheckKeyOldValue+1,w
  5619  03DB  0080               	movwf	0
  5620  03DC  1003               	clrc
  5621  03DD  0D4D               	rlf	CheckKeyOldValue@78,w
  5622  03DE  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5623  03DF  0084               	movwf	4
  5624  03E0  0008               	return
  5625  03E1                     __end_ofPL14:	
  5626  03E1                     PL16:	
  5627  03E1  0084               	movwf	4
  5628  03E2  0800               	movf	0,w
  5629  03E3  00F4               	movwf	??_SystemEnterSleep
  5630  03E4  0A84               	incf	4,f
  5631  03E5  0800               	movf	0,w
  5632  03E6  00F5               	movwf	??_SystemEnterSleep+1
  5633  03E7  0008               	return
  5634  03E8                     __end_ofPL16:	
  5635  03E8                     PL20:	
  5636  03E8  0800               	movf	0,w
  5637  03E9  00F5               	movwf	??_CheckKeyOldValue
  5638  03EA  0A84               	incf	4,f
  5639  03EB  0800               	movf	0,w
  5640  03EC  00F6               	movwf	??_CheckKeyOldValue+1
  5641  03ED  1003               	clrc
  5642  03EE  0D4D               	rlf	CheckKeyOldValue@78,w
  5643  03EF  0008               	return
  5644  03F0                     __end_ofPL20:	
  5645  03F0                     PL22:	
  5646  03F0  0180               	clrf	0
  5647  03F1  0A84               	incf	4,f
  5648  03F2  0180               	clrf	0
  5649  03F3  1003               	clrc
  5650  03F4  0D73               	rlf	KeyClearOne@49,w
  5651  03F5  0008               	return
  5652  03F6                     __end_ofPL22:	
  5653  03F6                     PL24:	
  5654  03F6  3041               	movlw	65
  5655  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  5656  03F8  0095               	movwf	21	;volatile
  5657  03F9  1415               	bsf	21,0	;volatile
  5658  03FA  0196               	clrf	22	;volatile
  5659  03FB  0008               	return
  5660  03FC                     __end_ofPL24:	
  5661  03FC                     PL28:	
  5662  03FC  0849               	movf	CheckKeyOldValue@79,w
  5663  03FD  0080               	movwf	0
  5664  03FE  0A84               	incf	4,f
  5665  03FF  084A               	movf	CheckKeyOldValue@79+1,w
  5666  0400  0080               	movwf	0
  5667  0401  0008               	return
  5668  0402                     __end_ofPL28:	
  5669  0402                     PL38:	
  5670  0402  01D4               	clrf	SystemEnterSleep@91
  5671  0403  01D2               	clrf	SystemEnterSleep@92
  5672  0404  0AD2               	incf	SystemEnterSleep@92,f
  5673  0405  01D3               	clrf	SystemEnterSleep@92+1
  5674  0406  0008               	return
  5675  0407                     __end_ofPL38:	
  5676  0407                     PL40:	
  5677  0407  0DD2               	rlf	SystemEnterSleep@92,f
  5678  0408  0DD3               	rlf	SystemEnterSleep@92+1,f
  5679  0409  0AD4               	incf	SystemEnterSleep@91,f
  5680  040A  0254               	subwf	SystemEnterSleep@91,w
  5681  040B  0008               	return
  5682  040C                     __end_ofPL40:	
  5683                           
  5684                           	psect	text39
  5685  0E48                     __ptext39:	
  5686 ;; *************** function _Isr_Timer *****************
  5687 ;; Defined at:
  5688 ;;		line 197 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;		None
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;		None
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 300/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5702 ;;      Params:         0       0       0       0
  5703 ;;      Locals:         0       0       0       0
  5704 ;;      Temps:          3       0       0       0
  5705 ;;      Totals:         3       0       0       0
  5706 ;;Total ram usage:        3 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    1
  5709 ;; This function calls:
  5710 ;;		_ledShow
  5711 ;; This function is called by:
  5712 ;;		Interrupt level 1
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           
  5717                           ;psect for function _Isr_Timer
  5718  0E48                     _Isr_Timer:	
  5719                           
  5720                           ;main.c: 199: if(TMR2IF)
  5721  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  5722  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  5723  0E4A  1C8D               	btfss	13,1	;volatile
  5724  0E4B  2E69               	goto	i1l4176
  5725                           
  5726                           ;main.c: 200: {
  5727                           ;main.c: 201: TMR2IF = 0;
  5728  0E4C  108D               	bcf	13,1	;volatile
  5729                           
  5730                           ;main.c: 202: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  5731  0E4D  086C               	movf	_firstTime,w
  5732  0E4E  1D03               	btfss	3,2
  5733  0E4F  2E58               	goto	i1l4164
  5734  0E50  0844               	movf	_workStep,w
  5735  0E51  1D03               	btfss	3,2
  5736  0E52  2E58               	goto	i1l4164
  5737  0E53  0843               	movf	_wuhuaFlag,w
  5738  0E54  1903               	btfsc	3,2
  5739  0E55  083F               	movf	_chrgFlag,w
  5740  0E56  1903               	btfsc	3,2
  5741  0E57  2E5A               	goto	i1l4166
  5742  0E58                     i1l4164:	
  5743                           
  5744                           ;main.c: 203: {
  5745                           ;main.c: 204: ledShow();
  5746  0E58  2673  158A         	fcall	_ledShow
  5747  0E5A                     i1l4166:	
  5748                           
  5749                           ;main.c: 205: }
  5750                           ;main.c: 206: if(++MainTime >= 64)
  5751  0E5A  3040               	movlw	64
  5752  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  5753  0E5C  0AC6               	incf	_MainTime,f	;volatile
  5754  0E5D  0246               	subwf	_MainTime,w	;volatile
  5755  0E5E  1C03               	skipc
  5756  0E5F  2E6A               	goto	i1l979
  5757                           
  5758                           ;main.c: 207: {
  5759                           ;main.c: 208: MainTime = 0;
  5760  0E60  01C6               	clrf	_MainTime	;volatile
  5761                           
  5762                           ;main.c: 209: B_MainLoop = 1;
  5763  0E61  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5764                           
  5765                           ;main.c: 210: if(++count1s >= 250)
  5766  0E62  30FA               	movlw	250
  5767  0E63  0AC5               	incf	_count1s,f
  5768  0E64  0245               	subwf	_count1s,w
  5769  0E65  1C03               	skipc
  5770  0E66  2E6A               	goto	i1l979
  5771                           
  5772                           ;main.c: 211: {
  5773                           ;main.c: 212: count1s = 0;
  5774  0E67  01C5               	clrf	_count1s
  5775  0E68  2E6A               	goto	i1l979
  5776  0E69                     i1l4176:	
  5777                           
  5778                           ;main.c: 216: else
  5779                           ;main.c: 217: {
  5780                           ;main.c: 218: PIR1 = 0;
  5781  0E69  018D               	clrf	13	;volatile
  5782  0E6A                     i1l979:	
  5783  0E6A  0872               	movf	??_Isr_Timer+2,w
  5784  0E6B  008A               	movwf	10
  5785  0E6C  0871               	movf	??_Isr_Timer+1,w
  5786  0E6D  0084               	movwf	4
  5787  0E6E  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5788  0E6F  0083               	movwf	3
  5789  0E70  0EFE               	swapf	126,f
  5790  0E71  0E7E               	swapf	126,w
  5791  0E72  0009               	retfie
  5792  0E73                     __end_of_Isr_Timer:	
  5793  0E73                     __ptext40:	
  5794 ;; *************** function _ledShow *****************
  5795 ;; Defined at:
  5796 ;;		line 369 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5805 ;; Tracked objects:
  5806 ;;		On entry : 300/0
  5807 ;;		On exit  : 200/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5810 ;;      Params:         0       0       0       0
  5811 ;;      Locals:         0       0       0       0
  5812 ;;      Temps:          0       0       0       0
  5813 ;;      Totals:         0       0       0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_Isr_Timer
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           
  5824                           ;psect for function _ledShow
  5825  0E73                     _ledShow:	
  5826                           
  5827                           ;main.c: 372: if(++ledCnt > 19)
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  5831  0E73  3014               	movlw	20
  5832  0E74  0AB9               	incf	_ledCnt,f
  5833  0E75  0239               	subwf	_ledCnt,w
  5834  0E76  1803               	btfsc	3,0
  5835                           
  5836                           ;main.c: 373: {
  5837                           ;main.c: 374: ledCnt = 0;
  5838  0E77  01B9               	clrf	_ledCnt
  5839                           
  5840                           ;main.c: 376: }
  5841                           ;main.c: 377: PORTA &= 0xE4;
  5842                           
  5843                           ;main.c: 378: PORTB &= 0xEF;
  5844                           
  5845                           ;main.c: 379: TRISA |= 0x1B;
  5846                           
  5847                           ;main.c: 380: TRISB |= 0x10;
  5848  0E78  158A  25C1  158A   	fcall	PL10	;call to abstracted procedure
  5849                           
  5850                           ;main.c: 381: switch(ledCnt)
  5851  0E7B  2F0B               	goto	i1l3938
  5852  0E7C                     i1l1011:	
  5853                           ;main.c: 385: case 1:
  5854                           
  5855                           
  5856                           ;main.c: 386: if(showNumShi & 0x01)
  5857  0E7C  1C6E               	btfss	_showNumShi,0
  5858  0E7D  0008               	return
  5859                           
  5860                           ;main.c: 387: {
  5861                           ;main.c: 388: TRISA &= 0xFE;
  5862  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  5863  0E7F  1005               	bcf	5,0	;volatile
  5864                           
  5865                           ;main.c: 389: TRISA &= 0xEF;
  5866  0E80  1205               	bcf	5,4	;volatile
  5867                           
  5868                           ;main.c: 390: RA4 = 1;
  5869  0E81  1606               	bsf	6,4	;volatile
  5870  0E82  0008               	return
  5871  0E83                     i1l1013:	
  5872                           ;main.c: 393: case 2:
  5873                           
  5874                           
  5875                           ;main.c: 394: if(showNumShi & 0x02)
  5876  0E83  1CEE               	btfss	_showNumShi,1
  5877  0E84  0008               	return
  5878                           
  5879                           ;main.c: 395: {
  5880                           ;main.c: 396: TRISA &= 0xFE;
  5881  0E85  1683               	bsf	3,5	;RP0=1, select bank1
  5882  0E86  1005               	bcf	5,0	;volatile
  5883                           
  5884                           ;main.c: 397: TRISA &= 0xF7;
  5885  0E87  1185               	bcf	5,3	;volatile
  5886                           
  5887                           ;main.c: 398: RA3 = 1;
  5888  0E88  1586               	bsf	6,3	;volatile
  5889  0E89  0008               	return
  5890  0E8A                     i1l1015:	
  5891                           ;main.c: 401: case 3:
  5892                           
  5893                           
  5894                           ;main.c: 402: if(showNumShi & 0x04)
  5895  0E8A  1D6E               	btfss	_showNumShi,2
  5896  0E8B  0008               	return
  5897                           
  5898                           ;main.c: 403: {
  5899                           ;main.c: 404: TRISA &= 0xFE;
  5900  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  5901  0E8D  1005               	bcf	5,0	;volatile
  5902                           
  5903                           ;main.c: 405: TRISA &= 0xFD;
  5904  0E8E  1085               	bcf	5,1	;volatile
  5905                           
  5906                           ;main.c: 406: RA1 = 1;
  5907  0E8F  1486               	bsf	6,1	;volatile
  5908  0E90  0008               	return
  5909  0E91                     i1l1017:	
  5910                           ;main.c: 409: case 4:
  5911                           
  5912                           
  5913                           ;main.c: 410: if(showNumShi & 0x08)
  5914  0E91  1DEE               	btfss	_showNumShi,3
  5915  0E92  0008               	return
  5916                           
  5917                           ;main.c: 411: {
  5918                           ;main.c: 412: TRISA &= 0xFE;
  5919  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  5920  0E94  1005               	bcf	5,0	;volatile
  5921                           
  5922                           ;main.c: 413: TRISB &= 0xEF;
  5923                           
  5924                           ;main.c: 414: RB4 = 1;
  5925  0E95  2F18               	ljmp	PL30	;call to abstracted procedure
  5926  0E96                     i1l1019:	
  5927                           ;main.c: 417: case 5:
  5928                           
  5929                           
  5930                           ;main.c: 418: if(showNumShi & 0x10)
  5931  0E96  1E6E               	btfss	_showNumShi,4
  5932  0E97  0008               	return
  5933                           
  5934                           ;main.c: 419: {
  5935                           ;main.c: 420: TRISA &= 0xEF;
  5936  0E98  1683               	bsf	3,5	;RP0=1, select bank1
  5937  0E99  1205               	bcf	5,4	;volatile
  5938                           
  5939                           ;main.c: 421: TRISA &= 0xFE;
  5940  0E9A  1005               	bcf	5,0	;volatile
  5941                           
  5942                           ;main.c: 422: RA0 = 1;
  5943  0E9B  1406               	bsf	6,0	;volatile
  5944  0E9C  0008               	return
  5945  0E9D                     i1l1021:	
  5946                           ;main.c: 425: case 6:
  5947                           
  5948                           
  5949                           ;main.c: 426: if(showNumShi & 0x20)
  5950  0E9D  1EEE               	btfss	_showNumShi,5
  5951  0E9E  0008               	return
  5952                           
  5953                           ;main.c: 427: {
  5954                           ;main.c: 428: TRISA &= 0xEF;
  5955  0E9F  1683               	bsf	3,5	;RP0=1, select bank1
  5956  0EA0  1205               	bcf	5,4	;volatile
  5957                           
  5958                           ;main.c: 429: TRISA &= 0xF7;
  5959  0EA1  1185               	bcf	5,3	;volatile
  5960                           
  5961                           ;main.c: 430: RA3 = 1;
  5962  0EA2  1586               	bsf	6,3	;volatile
  5963  0EA3  0008               	return
  5964  0EA4                     i1l1023:	
  5965                           ;main.c: 433: case 7:
  5966                           
  5967                           
  5968                           ;main.c: 434: if(showNumShi & 0x40)
  5969  0EA4  1F6E               	btfss	_showNumShi,6
  5970  0EA5  0008               	return
  5971                           
  5972                           ;main.c: 435: {
  5973                           ;main.c: 436: TRISA &= 0xEF;
  5974  0EA6  1683               	bsf	3,5	;RP0=1, select bank1
  5975  0EA7  1205               	bcf	5,4	;volatile
  5976                           
  5977                           ;main.c: 437: TRISA &= 0xFD;
  5978  0EA8  1085               	bcf	5,1	;volatile
  5979                           
  5980                           ;main.c: 438: RA1 = 1;
  5981  0EA9  1486               	bsf	6,1	;volatile
  5982  0EAA  0008               	return
  5983  0EAB                     i1l1025:	
  5984                           ;main.c: 441: case 8:
  5985                           
  5986                           
  5987                           ;main.c: 442: if(showNumGe & 0x01)
  5988  0EAB  1C6D               	btfss	_showNumGe,0
  5989  0EAC  0008               	return
  5990                           
  5991                           ;main.c: 443: {
  5992                           ;main.c: 444: TRISA &= 0xEF;
  5993  0EAD  1683               	bsf	3,5	;RP0=1, select bank1
  5994  0EAE  1205               	bcf	5,4	;volatile
  5995                           
  5996                           ;main.c: 445: TRISB &= 0xEF;
  5997                           
  5998                           ;main.c: 446: RB4 = 1;
  5999  0EAF  2F18               	ljmp	PL30	;call to abstracted procedure
  6000  0EB0                     i1l1027:	
  6001                           ;main.c: 449: case 9:
  6002                           
  6003                           
  6004                           ;main.c: 450: if(showNumGe & 0x02)
  6005  0EB0  1CED               	btfss	_showNumGe,1
  6006  0EB1  0008               	return
  6007                           
  6008                           ;main.c: 451: {
  6009                           ;main.c: 452: TRISA &= 0xF7;
  6010  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  6011  0EB3  1185               	bcf	5,3	;volatile
  6012                           
  6013                           ;main.c: 453: TRISA &= 0xFE;
  6014  0EB4  1005               	bcf	5,0	;volatile
  6015                           
  6016                           ;main.c: 454: RA0 = 1;
  6017  0EB5  1406               	bsf	6,0	;volatile
  6018  0EB6  0008               	return
  6019  0EB7                     i1l1029:	
  6020                           ;main.c: 457: case 10:
  6021                           
  6022                           
  6023                           ;main.c: 458: if(showNumGe & 0x04)
  6024  0EB7  1D6D               	btfss	_showNumGe,2
  6025  0EB8  0008               	return
  6026                           
  6027                           ;main.c: 459: {
  6028                           ;main.c: 460: TRISA &= 0xF7;
  6029  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  6030  0EBA  1185               	bcf	5,3	;volatile
  6031                           
  6032                           ;main.c: 461: TRISA &= 0xEF;
  6033  0EBB  1205               	bcf	5,4	;volatile
  6034                           
  6035                           ;main.c: 462: RA4 = 1;
  6036  0EBC  1606               	bsf	6,4	;volatile
  6037  0EBD  0008               	return
  6038  0EBE                     i1l1031:	
  6039                           ;main.c: 465: case 11:
  6040                           
  6041                           
  6042                           ;main.c: 466: if(showNumGe & 0x08)
  6043  0EBE  1DED               	btfss	_showNumGe,3
  6044  0EBF  0008               	return
  6045                           
  6046                           ;main.c: 467: {
  6047                           ;main.c: 468: TRISA &= 0xF7;
  6048  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
  6049  0EC1  1185               	bcf	5,3	;volatile
  6050                           
  6051                           ;main.c: 469: TRISA &= 0xFD;
  6052  0EC2  1085               	bcf	5,1	;volatile
  6053                           
  6054                           ;main.c: 470: RA1 = 1;
  6055  0EC3  1486               	bsf	6,1	;volatile
  6056  0EC4  0008               	return
  6057  0EC5                     i1l1033:	
  6058                           ;main.c: 473: case 12:
  6059                           
  6060                           
  6061                           ;main.c: 474: if(showNumGe & 0x10)
  6062  0EC5  1E6D               	btfss	_showNumGe,4
  6063  0EC6  0008               	return
  6064                           
  6065                           ;main.c: 475: {
  6066                           ;main.c: 476: TRISA &= 0xF7;
  6067  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  6068  0EC8  1185               	bcf	5,3	;volatile
  6069                           
  6070                           ;main.c: 477: TRISB &= 0xEF;
  6071                           
  6072                           ;main.c: 478: RB4 = 1;
  6073  0EC9  2F18               	ljmp	PL30	;call to abstracted procedure
  6074  0ECA                     i1l1035:	
  6075                           ;main.c: 481: case 13:
  6076                           
  6077                           
  6078                           ;main.c: 482: if(showNumGe & 0x20)
  6079  0ECA  1EED               	btfss	_showNumGe,5
  6080  0ECB  0008               	return
  6081                           
  6082                           ;main.c: 483: {
  6083                           ;main.c: 484: TRISA &= 0xFD;
  6084  0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  6085  0ECD  1085               	bcf	5,1	;volatile
  6086                           
  6087                           ;main.c: 485: TRISA &= 0xFE;
  6088  0ECE  1005               	bcf	5,0	;volatile
  6089                           
  6090                           ;main.c: 486: RA0 = 1;
  6091  0ECF  1406               	bsf	6,0	;volatile
  6092  0ED0  0008               	return
  6093  0ED1                     i1l1037:	
  6094                           ;main.c: 489: case 14:
  6095                           
  6096                           
  6097                           ;main.c: 490: if(showNumGe & 0x40)
  6098  0ED1  1F6D               	btfss	_showNumGe,6
  6099  0ED2  0008               	return
  6100                           
  6101                           ;main.c: 491: {
  6102                           ;main.c: 492: TRISA &= 0xFD;
  6103  0ED3  1683               	bsf	3,5	;RP0=1, select bank1
  6104  0ED4  1085               	bcf	5,1	;volatile
  6105                           
  6106                           ;main.c: 493: TRISA &= 0xEF;
  6107  0ED5  1205               	bcf	5,4	;volatile
  6108                           
  6109                           ;main.c: 494: RA4 = 1;
  6110  0ED6  1606               	bsf	6,4	;volatile
  6111  0ED7  0008               	return
  6112  0ED8                     i1l3914:	
  6113                           
  6114                           ;main.c: 498: if(firstTime || showNumGe || showNumShi)
  6115  0ED8  086C               	movf	_firstTime,w
  6116  0ED9  1D03               	btfss	3,2
  6117  0EDA  2EE0               	goto	i1l1042
  6118  0EDB  086D               	movf	_showNumGe,w
  6119  0EDC  1903               	btfsc	3,2
  6120  0EDD  086E               	movf	_showNumShi,w
  6121  0EDE  1903               	btfsc	3,2
  6122  0EDF  0008               	return
  6123  0EE0                     i1l1042:	
  6124                           
  6125                           ;main.c: 499: {
  6126                           ;main.c: 500: TRISA &= 0xFD;
  6127  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  6128  0EE1  1085               	bcf	5,1	;volatile
  6129                           
  6130                           ;main.c: 501: TRISA &= 0xF7;
  6131  0EE2  1185               	bcf	5,3	;volatile
  6132                           
  6133                           ;main.c: 502: RA3 = 1;
  6134  0EE3  1586               	bsf	6,3	;volatile
  6135  0EE4  0008               	return
  6136  0EE5                     i1l3920:	
  6137                           
  6138                           ;main.c: 506: if(firstTime > 0 || wuhuaFlag > 0)
  6139  0EE5  086C               	movf	_firstTime,w
  6140  0EE6  1903               	btfsc	3,2
  6141  0EE7  0843               	movf	_wuhuaFlag,w
  6142  0EE8  1903               	btfsc	3,2
  6143  0EE9  0008               	return
  6144                           
  6145                           ;main.c: 507: {
  6146                           ;main.c: 508: TRISA &= 0xFD;
  6147  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  6148  0EEB  1085               	bcf	5,1	;volatile
  6149                           
  6150                           ;main.c: 509: TRISB &= 0xEF;
  6151                           
  6152                           ;main.c: 510: RB4 = 1;
  6153  0EEC  2F18               	ljmp	PL30	;call to abstracted procedure
  6154  0EED                     i1l3924:	
  6155                           
  6156                           ;main.c: 514: if(firstTime > 0 ||workStep > 0)
  6157  0EED  086C               	movf	_firstTime,w
  6158  0EEE  1903               	btfsc	3,2
  6159  0EEF  0844               	movf	_workStep,w
  6160  0EF0  1903               	btfsc	3,2
  6161  0EF1  0008               	return
  6162                           
  6163                           ;main.c: 515: {
  6164                           ;main.c: 516: TRISB &= 0xEF;
  6165  0EF2  1205               	bcf	5,4	;volatile
  6166                           
  6167                           ;main.c: 517: TRISA &= 0xFE;
  6168  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  6169  0EF4  1005               	bcf	5,0	;volatile
  6170                           
  6171                           ;main.c: 518: RA0 = 1;
  6172  0EF5  1406               	bsf	6,0	;volatile
  6173  0EF6  0008               	return
  6174  0EF7                     i1l3928:	
  6175                           
  6176                           ;main.c: 522: if(firstTime > 0 ||fanKeyFlag > 0)
  6177  0EF7  086C               	movf	_firstTime,w
  6178  0EF8  1903               	btfsc	3,2
  6179  0EF9  0838               	movf	_fanKeyFlag,w
  6180  0EFA  1903               	btfsc	3,2
  6181  0EFB  0008               	return
  6182                           
  6183                           ;main.c: 523: {
  6184                           ;main.c: 524: TRISB &= 0xEF;
  6185  0EFC  1205               	bcf	5,4	;volatile
  6186                           
  6187                           ;main.c: 525: TRISA &= 0xEF;
  6188  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  6189  0EFE  1205               	bcf	5,4	;volatile
  6190                           
  6191                           ;main.c: 526: RA4 = 1;
  6192  0EFF  1606               	bsf	6,4	;volatile
  6193  0F00  0008               	return
  6194  0F01                     i1l3932:	
  6195                           
  6196                           ;main.c: 530: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  6197  0F01  086C               	movf	_firstTime,w
  6198  0F02  1903               	btfsc	3,2
  6199  0F03  0837               	movf	_wuhuaKeyFlag,w
  6200  0F04  1903               	btfsc	3,2
  6201  0F05  0008               	return
  6202                           
  6203                           ;main.c: 531: {
  6204                           ;main.c: 532: TRISB &= 0xEF;
  6205  0F06  1205               	bcf	5,4	;volatile
  6206                           
  6207                           ;main.c: 533: TRISA &= 0xFD;
  6208  0F07  1683               	bsf	3,5	;RP0=1, select bank1
  6209  0F08  1085               	bcf	5,1	;volatile
  6210                           
  6211                           ;main.c: 534: RA1 = 1;
  6212  0F09  1486               	bsf	6,1	;volatile
  6213  0F0A  0008               	return
  6214  0F0B                     i1l3938:	
  6215  0F0B  0839               	movf	_ledCnt,w
  6216                           
  6217                           ; Switch size 1, requested type "space"
  6218                           ; Number of cases is 20, Range of values is 0 to 19
  6219                           ; switch strategies available:
  6220                           ; Name         Instructions Cycles
  6221                           ; direct_byte           47     7 (fixed)
  6222                           ; simple_byte           61    31 (average)
  6223                           ; jumptable            260     6 (fixed)
  6224                           ;	Chosen strategy is direct_byte
  6225  0F0C  0084               	movwf	4
  6226  0F0D  3014               	movlw	20
  6227  0F0E  0204               	subwf	4,w
  6228  0F0F  1803               	skipnc
  6229  0F10  0008               	return
  6230  0F11  3008               	movlw	high i1S5048
  6231  0F12  008A               	movwf	10
  6232  0F13  1003               	clrc
  6233  0F14  0D04               	rlf	4,w
  6234  0F15  3E00               	addlw	low i1S5048
  6235  0F16  0082               	movwf	2
  6236  0F17                     i1l1060:	
  6237  0F17  0008               	return
  6238  0F18                     __end_of_ledShow:	
  6239  007E                     btemp	set	126	;btemp
  6240  007E                     wtemp0	set	126
  6241  0F18                     PL30:	
  6242  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  6243  0F19  1205               	bcf	5,4	;volatile
  6244  0F1A  1606               	bsf	6,4	;volatile
  6245  0F1B  0008               	return
  6246  0F1C                     __end_ofPL30:	
  6247                           
  6248                           	psect	intentry
  6249  0004                     __pintentry:	
  6250                           ;incstack = 0
  6251                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6252                           
  6253  0004                     interrupt_function:	
  6254  007E                     saved_w	set	btemp
  6255  0004  00FE               	movwf	btemp
  6256  0005  0E03               	swapf	3,w
  6257  0006  00F0               	movwf	??_Isr_Timer
  6258  0007  0804               	movf	4,w
  6259  0008  00F1               	movwf	??_Isr_Timer+1
  6260  0009  080A               	movf	10,w
  6261  000A  00F2               	movwf	??_Isr_Timer+2
  6262  000B  158A  2E48         	ljmp	_Isr_Timer
  6263                           
  6264                           	psect	swtext1
  6265  0800                     __pswtext1:	
  6266  0800                     i1S5048:	
  6267  0800  158A  2F17         	ljmp	i1l1060
  6268  0802  158A  2E7C         	ljmp	i1l1011
  6269  0804  158A  2E83         	ljmp	i1l1013
  6270  0806  158A  2E8A         	ljmp	i1l1015
  6271  0808  158A  2E91         	ljmp	i1l1017
  6272  080A  158A  2E96         	ljmp	i1l1019
  6273  080C  158A  2E9D         	ljmp	i1l1021
  6274  080E  158A  2EA4         	ljmp	i1l1023
  6275  0810  158A  2EAB         	ljmp	i1l1025
  6276  0812  158A  2EB0         	ljmp	i1l1027
  6277  0814  158A  2EB7         	ljmp	i1l1029
  6278  0816  158A  2EBE         	ljmp	i1l1031
  6279  0818  158A  2EC5         	ljmp	i1l1033
  6280  081A  158A  2ECA         	ljmp	i1l1035
  6281  081C  158A  2ED1         	ljmp	i1l1037
  6282  081E  158A  2ED8         	ljmp	i1l3914
  6283  0820  158A  2EE5         	ljmp	i1l3920
  6284  0822  158A  2EED         	ljmp	i1l3924
  6285  0824  158A  2EF7         	ljmp	i1l3928
  6286  0826  158A  2F01         	ljmp	i1l3932


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         73
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      79
    BANK1            80      4      34
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_ClearResSum
    _SystemEnterSleep->_KeyClearOne
    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12877
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     538
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     939
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     939
                                              4 COMMON     2     2      0
                                              5 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3268
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              5 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              4 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     263
                                              0 BANK0      5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      65
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              5 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (4) _KeyIsIn                                              2     2      0      69
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (6) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      22       6       42.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7C       9        0.0%
ABS                  0      0      7C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 18 11:25:27 2025

                        pc 0002                         PL2 03A4                         PL4 03B2  
                       PL6 0788                         PL8 03C4              ??_KeyClearOne 0073  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0073  
                      PL10 0DC1                        PL20 03E8                        PL12 03CB  
                      PL30 0F18                        PL22 03F0                        PL14 03D6  
                      PL40 0407                        PL32 07A7                        PL24 03F6  
                      PL16 03E1                        PL34 07AC                        PL26 07A0  
                      PL18 0797                        PL36 07B1                        PL28 03FC  
                      PL38 0402                        l993 064C                        l999 0688  
                      _RA0 0430                        _RA1 0431                        _RA3 0433  
                      _RA4 0434                        _RB4 0034                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0849  
       ??_GetTouchKeyValue 0074               ___ftdiv@cntr 0058               ___ftdiv@sign 005D  
                     l1003 06CE                       l1101 0DF9                       l1112 0726  
                     l1106 0708                       l1070 0F38                       l1072 0F3A  
                     l3020 029A                       l1085 0FB3                       l1069 0F3C  
                     l1415 0475                       l1336 0310                       l1354 035A  
                     l1373 0085                       l1614 052C                       l1295 0170  
                     l3152 0387                       l1560 05E3                       l1385 00A4  
                     l3146 0386                       l3410 0DFD                       l3172 02C0  
                     l3156 0390                       l1572 0607                       l4300 0684  
                     l3262 0E17                       l4062 0DE1                       l4310 06D2  
                     l3600 02CC                       l3512 032C                       l4064 0DE3  
                     l4400 048B                       l1666 0E1D                       l4074 0DF2  
                     l4322 0777                       l5026 0DBD                       l4244 019C  
                     l4500 00D8                       l3276 0E2A                       l3292 0E44  
                     l3284 0E30                       l4076 0DF3                       l4412 05E7  
                     l4260 062A                       l4332 0783                       l4246 019D  
                     l4422 0605                       l4414 05EA                       l4270 0635  
                     l4262 062C                       l4360 013A                       l4424 05FC  
                     l4416 05EF                       l4440 0739                       l4514 0105  
                     l4418 05F7                       l4338 0751                       l4602 0467  
                     l4364 0140                       l3660 0361                       l4276 0636  
                     l4620 076A                       l3670 0370                       l4390 017F  
                     l4518 010C                       l4534 012D                       l4294 0671  
                     l4286 0656                       l4606 046B                       l4614 0761  
                     l4392 0191                       l4704 051E                       l4608 046C  
                     l4448 074C                       l4560 0729                       l4552 070A  
                     l4544 0703                       l4634 01B1                       l3842 07D3  
                     l4802 0FFB                       l4298 067C                       l4546 0705  
                     l4626 0775                       l4652 0208                       l3676 0382  
                     l4628 0776                       l3862 07ED                       l3870 07F8  
                     l3846 07DA                       l3838 07CE                       l4814 0046  
                     l4726 053F                       l4742 057B                       l4558 0724  
                     l4672 023E                       l3848 07DC                       l3872 07FB  
                     l4488 00D1                       l4760 059E                       l4744 0580  
                     l4576 0418                       l4920 04DE                       l4690 0276  
                     l4666 0236                       l3858 07E8                       l4770 05AA  
                     l4930 04F2                       l3868 07F6                       l4836 0074  
                     l4860 0F3F                       l4772 05B4                       l4764 05A6  
                     l4596 045F                       l4588 044B                       l4940 0505  
                     l4932 04F3                       l4694 027A                       l4686 026A  
                     l4790 0FE4                       l4870 0F6B                       l4598 0461  
                     l4942 0506                       l4696 027E                       l4864 0F55  
                     l4848 0F22                       l4776 05C2                       l4698 0284  
                     l4882 0F85                       l4946 050B                       l4884 0F88  
                     l4974 0099                       l4966 0094                       l4982 00A3  
                     l4894 0FA3                       l4990 0D8D                       l4976 009D  
                     l4896 0FA7                       _ADON 04A8                       _CHS4 04B6  
                     u5015 01BE                       _PIE1 000E                       _PIE2 0110  
                     u5035 01F9                       u5045 020E                       u5055 021A  
                     u4515 06DB                       _RAIF 006B                       u5085 0256  
                     u5165 054D                       u4445 0677                       _INTF 0059  
                     u4455 0682                       _RBIE 005B                       _RBIF 0058  
                     u4705 073F                       u5515 0FC9                       u5195 0583  
                     u5285 0FED                       u4495 06C3                       _PIR1 000D  
                     _PIR2 010F                       u4915 043C                       u4775 0101  
                     u5727 0626                       _TMR0 0081                       _WPUB 0008  
                     _main 0D85               ___ftpack@arg 0073               ___ftpack@exp 0076  
                     _time 00BA                       btemp 007E              ?_KeyStopClear 0070  
                     start 000D               _TurnKeyFlags 033D            __end_of_KeyIsIn 02A0  
          __end_of_KeyHave 02C3               ___fttol@exp1 006A              ??_Init_System 0073  
             ___fttol@lval 0066            TurnKeyFlags@F83 002F            TurnKeyFlags@F84 002E  
                    ?_main 0070            __end_of___lbdiv 0E2C            __end_of___lbmod 0E48  
          __end_of___ftdiv 0572            __end_of___fttol 05CB                      _IOCB0 0048  
                    _T2CON 0013   __end_of_SystemEnterSleep 0134            __end_of___lwdiv 1000  
          __end_of___lwmod 0751                      i1l979 0E6A                      _PORTA 0086  
                    _PORTB 0006                      _PORTC 0106            __end_of_fanInit 075D  
                    _TRISA 0085                      _TRISB 0005                      _PWMTH 0018  
                    _TRISC 0105                      _PWMTL 0017            __end_of_fanStop 0761  
          __end_of_chrgCtr 0DFD        ___lmul@multiplicand 004D        __end_of_KeyClearOne 02B5  
          __end_of_ledShow 0F18                 _KeyClearIn 0386             fanCtr@fan_temp 0057  
            ___ftpack@sign 0077             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 0783                _ClearResSum 019C                 _KeyCounter 0032  
               _KeyOldData 0024            __end_of_pwmStop 0788             ??_KeyStopClear 0074  
                    status 0003                      wtemp0 007E            __end_of_workCtr 0510  
          ___lbdiv@divisor 0073                 _KeyUpShake 00BC            ___lbdiv@counter 0075  
          __initialization 000F               __end_of_main 0DC1                     ??_main 0078  
            ___fttol@sign1 0065        __end_of_Init_System 0041                     _ADCON0 0095  
                   _ADCON1 0096                     i1S5048 0800                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 0619                     _GODONE 04A9  
                   i1l1011 0E7C                     i1l1021 0E9D                     i1l1013 0E83  
                   i1l1031 0EBE                     i1l1023 0EA4                     i1l1015 0E8A  
                   i1l1033 0EC5                     i1l1025 0EAB                     i1l1017 0E91  
                   i1l1042 0EE0                     i1l1035 0ECA                     i1l1027 0EB0  
                   i1l1019 0E96                     i1l1060 0F17                     i1l1037 0ED1  
                   i1l1029 0EB7                     i1l4164 0E58                     i1l4166 0E5A  
                   i1l4176 0E69                     i1l3920 0EE5                     i1l3914 0ED8  
                   i1l3932 0F01                     i1l3924 0EED                     i1l3928 0EF7  
                   i1l3938 0F0B                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 05DB         __size_of_KeyServer 0048                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
             ??_ADC_Sample 0074                     _TRISB0 0028                     _TRISB6 002E  
                ??_KeyIsIn 0073                  ??_KeyHave 0075              ClearResSum@56 0073  
       __size_of_Isr_Timer 002B  __size_of_CheckKeyOldValue 0064                     ___lmul 0471  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 040C  
                ??___lbdiv 0074                  ??___lbmod 0074                  ??___ftdiv 0055  
                ??___fttol 0062                     _ledCnt 0039                  ??___lwdiv 0077  
                ??___lwmod 0077               _wuhuaKeyFlag 0037                  ??_fanInit 0073  
                ??_fanStop 0073                _KeyClearOne 02A0                  ??_chrgCtr 0078  
                   _result 00B2                  ??_ledShow 0070           __end_of_numArray 083B  
            _Table_KeyFalg 083B              _Table_KeyDown 0843         __end_of_ADC_Sample 06E9  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0073  
                ??_pwmStop 0073                ?_KeyClearIn 0070                  ??_workCtr 0078  
          _CheckOnceResult 01AB           ___lbdiv@dividend 0074           __end_of_wuhuaCtr 0777  
          ___lbmod@divisor 0073    __end_of__initialization 0021            ___lbmod@counter 0076  
       __size_of_WorkSleep 0036          CheckOnceResult@70 004F          CheckOnceResult@71 0053  
        CheckOnceResult@72 0050          CheckOnceResult@73 004D          CheckOnceResult@68 0055  
        CheckOnceResult@69 0052                 ___ftdiv@f1 0052                 ___ftdiv@f2 004F  
               ___ftdiv@f3 0059                 ___fttol@f1 005E             __pcstackCOMMON 0070  
             __pidataBANK0 0000                _Init_System 0024                 __end_ofPL2 03B2  
               __end_ofPL4 03C4                 __end_ofPL6 0797                 __end_ofPL8 03CB  
         ___lbdiv@quotient 0076          __end_of_KeyServer 07FD                 ___lwtoft@c 004C  
     __end_of_KeyStopClear 033D          __end_of_Isr_Timer 0E73                 _fanKeyFlag 0038  
       __size_of_keyLedCtr 0044                 __pbssBANK0 0020                 __pbssBANK1 00A0  
             _chrgFullFlag 003E  __size_of_GetTouchKeyValue 0068               _chrgFullTime 003D  
            _CheckTouchKey 0077                 __pmaintext 0D85                    ?___lmul 0049  
                  ?_fanCtr 0070                 __pintentry 0004        __size_of_KeyClearIn 0010  
           ___lmul@product 0073                  ?___ftpack 0073          __end_of_WorkSleep 0077  
                ?___lwtoft 004C          ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 028C  
                  _KEYCON0 0111                    _KEYCON1 0112                    _KEYCON2 0113  
               _curBatStep 0035         ??_SystemEnterSleep 0074                    _B_OnOff 03C5  
                  _PWMD01H 001E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D       __end_of_Table_KeyCap 0847  
               __stringtab 0828               ?_ClearResSum 0070                    _KeyData 0079  
                  _KeyFlag 002C                    _KeyIsIn 028C                    _KeyHave 02B5  
           ?_CheckTouchKey 0070            ADC_Sample@adldo 0073            ADC_Sample@admax 0052  
          ADC_Sample@admin 0050            ADC_Sample@adsum 004C           _CheckKeyOldValue 02C3  
                  ___lbdiv 0E11            __size_of___lmul 0033                    ___lbmod 0E2C  
                  ___ftdiv 0510            __size_of_fanCtr 0065                    ___fttol 0572  
                  ___lwdiv 0FD6                    ___lwmod 072D          __end_of_keyLedCtr 072D  
                  _b_kover 03C4                    _fanInit 0751                    _fanDuty 0042  
                  _fanStop 075D                 ??___ftpack 0049                    _chrgCtr 0DCC  
                  __ptext1 04A4                    __ptext2 0761                    __ptext3 0783  
                  __ptext4 0777                    __ptext5 06E9                    __ptext6 072D  
                  __ptext7 040C                    __ptext8 075D                    __ptext9 0751  
               _lowBatLock 003C                    _ledShow 0E73                 _lowBatTime 003B  
                ?_wuhuaCtr 0070                 ??___lwtoft 0078                    _count1s 0045  
               _lowFanTime 003A                 _setBatStep 0F1C                    _pwmInit 0777  
                  _pwmStop 0783    __size_of_CheckValidTime 0016                    clrloop0 0D7E  
                  _workCtr 04A4       end_of_initialization 0021              _Refurbish_Sfr 0396  
               _showBatLed 0DFD               _KeyOldValue0 00A8               _KeyOldValue1 0020  
             _KeyOldValue2 00A4      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054  
       SystemEnterSleep@92 0052         SystemEnterSleep@93 0050         SystemEnterSleep@94 004E  
             ?_KeyClearOne 0070                 _showNumShi 006E               _KeyReference 00A0  
               ??_wuhuaCtr 0073          CheckValidTime@F87 00B0           ?_CheckOnceResult 0070  
         ___lbmod@dividend 0075                  KeyIsIn@45 0074                  KeyIsIn@46 0073  
                KeyHave@58 0075                  KeyHave@59 0073               ??_KeyClearIn 0075  
              ___lbmod@rem 0077                ___ftdiv@exp 005C            ??_CheckTouchKey 0077  
             _KeyStopClear 0327           _GetTouchKeyValue 0134             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 04A4             __end_of_fanCtr 0471  
       __end_of_KeyClearIn 0396                  _KeyMaxSub 0031                  _KeyResSum 00AC  
              __end_ofPL10 0DCC                __end_ofPL20 03F0                __end_ofPL12 03D6  
              __end_ofPL30 0F1C                __end_ofPL22 03F6                __end_ofPL14 03E1  
              __end_ofPL40 040C                __end_ofPL32 07AC                __end_ofPL24 03FC  
              __end_ofPL16 03E8                __end_ofPL34 07B1                __end_ofPL26 07A7  
              __end_ofPL18 07A0                __end_ofPL36 07B5                __end_ofPL28 0402  
              __end_ofPL38 0407        start_initialization 000F                  _KeyServer 07B5  
              ?_setBatStep 0070                  _Isr_Timer 0E48          workCtr@power_temp 00BE  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                ?_showBatLed 0070  
                 ??___lmul 0073                   ??_fanCtr 0078          ADC_Sample@ad_temp 0054  
              __pdataBANK0 006D               _Table_KeyCap 0845          __size_of___ftpack 003E  
              __pbssCOMMON 0079                _fanOverTime 0040                 ?_KeyServer 0070  
                ___latbits 0001          __size_of___lwtoft 0010              __pcstackBANK0 0049  
            __pcstackBANK1 00BE                  _WorkSleep 0041             _CheckValidTime 0370  
 __end_of_CheckKeyOldValue 0327                 ?_Isr_Timer 0070        KeyServer@KeyOldFlag 0033  
                 ?_KeyIsIn 0070                   ?_KeyHave 0073  __size_of_SystemEnterSleep 0090  
          ??_Refurbish_Sfr 0073             ??_TurnKeyFlags 0076                  __pnvBANK0 006B  
         ___lwdiv@dividend 0075        __size_of_setBatStep 00BA                   ?___lbdiv 0073  
                 ?___lbmod 0073                   ?___ftdiv 004F                   ?___fttol 005E  
                 ?___lwdiv 0073                   ?___lwmod 0073                   ?_fanInit 0070  
                 ?_fanStop 0070                   ?_chrgCtr 0070              _shanshuoTime2 0028  
                __pstrings 0828                  __pswtext1 0800                   ?_ledShow 0070  
     __size_of_KeyClearOne 0015                  _keyLedCtr 06E9                  _firstLock 006B  
   __end_of_CheckValidTime 0386                  _firstTime 006C          __size_of_wuhuaCtr 0016  
               ?_WorkSleep 0070             ADC_Sample@adch 004A                   ?_pwmInit 0070  
                 ?_pwmStop 0070           ___lwdiv@quotient 004A        __size_of_showBatLed 0014  
                 ?_workCtr 0070                ADC_Sample@i 004B                ADC_Sample@j 0049  
                 _KEYDATAH 0117                   _KEYDATAL 0116          interrupt_function 0004  
                clear_ram0 0D7D             KeyStopClear@53 0074        CheckKeyOldValue@F77 0030  
                _showNumGe 006D                __stringbase 082D       __size_of_Init_System 001D  
    __end_of_Table_KeyFalg 0843      __end_of_Table_KeyDown 0845                 ?_keyLedCtr 0070  
 __end_of_GetTouchKeyValue 019C            ?_CheckValidTime 0070                ??_KeyServer 0073  
        ___lmul@multiplier 0049                  _wuhuaFlag 0043                ??_Isr_Timer 0070  
                 _MainTime 0046                 _ADC_Sample 0619           __size_of_KeyIsIn 0014  
         __size_of_KeyHave 000E           _Table_KeyChannel 0847           __size_of___lbdiv 001B  
         __size_of___lbmod 001C           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwdiv 002A           __size_of___lwmod 0024                   ___ftpack 05DB  
         __size_of_fanInit 000C         __end_of__stringtab 082E           __size_of_fanStop 0004  
         __size_of_chrgCtr 0031                   ___lwtoft 05CB                   _b_kover1 03C3  
                 _b_ksleep 03C0           __size_of_ledShow 00A5       __end_of_TurnKeyFlags 0370  
                 _fanValue 00B8                   _adresult 0047               ??_setBatStep 0077  
                 _chrgFlag 003F                ??_WorkSleep 0076            ___lwdiv@divisor 0073  
          ___lwdiv@counter 0049                   __ptext10 0471                   __ptext11 0619  
                 __ptext20 0E2C                   __ptext12 05CB                   __ptext21 0E11  
                 __ptext13 0572                   __ptext30 0327                   __ptext22 0041  
                 __ptext14 0510                   __ptext31 0134                   __ptext23 00A4  
                 __ptext15 05DB                   __ptext40 0E73                   __ptext32 019C  
                 __ptext24 0396                   __ptext16 0F1C                   __ptext33 0370  
                 __ptext25 07B5                   __ptext17 0FD6                   __ptext34 01AB  
                 __ptext26 0024                   __ptext18 0DCC                   __ptext35 02B5  
                 __ptext27 0077                   __ptext19 0DFD                   __ptext36 02A0  
                 __ptext28 033D                   __ptext37 02C3                   __ptext29 0386  
                 __ptext38 028C                   __ptext39 0E48           __size_of_pwmInit 000C  
         __size_of_pwmStop 0005               _shanshuoTime 002A                   _count10s 0041  
                 _count30s 00B6                   _count15s 00B4           __size_of_workCtr 006C  
 __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 004D         GetTouchKeyValue@63 004B  
       GetTouchKeyValue@64 0049              __size_of_main 003C           _SystemEnterSleep 00A4  
    __end_of_CheckTouchKey 00A4                   _numArray 082E               ??_showBatLed 0078  
       CheckKeyOldValue@80 004B         CheckKeyOldValue@78 004D         CheckKeyOldValue@79 0049  
                 _test_adc 0034         __end_of_setBatStep 0FD6                   _power_ad 0026  
 setBatStep@tempSubBatTime 004C                   _workStep 0044                   _wuhuaCtr 0761  
              ??_keyLedCtr 0078          ?_CheckKeyOldValue 0070         __end_of_showBatLed 0E11  
                 intlevel1 0000              ??_ClearResSum 0073         ??_CheckKeyOldValue 0075  
         ___lwmod@dividend 0075                ?_ADC_Sample 0073                  stringcode 0828  
              _showBatStep 0036                 _B_MainLoop 03C6          fanCtr@maxFanValue 0056  
               _OPTION_REG 0001            ___lwmod@divisor 0073            ___lwmod@counter 0077  
                 stringdir 0828                   stringtab 0828              KeyClearOne@49 0073  
             KeyClearIn@51 0075      __end_of_Refurbish_Sfr 03A4        __end_of_ClearResSum 01AB  
        ??_CheckOnceResult 0049  
