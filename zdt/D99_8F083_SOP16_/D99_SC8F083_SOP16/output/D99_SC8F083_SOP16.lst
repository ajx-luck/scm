

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 29 14:23:41 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text16,local,class=CODE,merge=1,delta=2
    21                           	psect	text18,local,class=CODE,merge=1,delta=2
    22                           	psect	text25,local,class=CODE,merge=1,delta=2
    23                           	psect	text26,local,class=CODE,merge=1,delta=2
    24                           	psect	text39,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	pa_nodes0,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataBANK0
    66  0000                     __pidataBANK0:	
    67                           
    68                           	psect	strings
    69  0800                     __pstrings:	
    70  0800                     stringtab:	
    71  0800                     __stringtab:	
    72  0800                     stringcode:	
    73                           ;	String table - string pointers are 1 byte each
    74                           
    75  0800                     stringdir:	
    76  0800  3008               	movlw	high stringdir
    77  0801  008A               	movwf	10
    78  0802  0804               	movf	4,w
    79  0803  0A84               	incf	4,f
    80  0804  0782               	addwf	2,f
    81  0805                     __stringbase:	
    82  0805  3400               	retlw	0
    83  0806                     __end_of__stringtab:	
    84  0806                     _numArray:	
    85  0806  343F               	retlw	63
    86  0807  3406               	retlw	6
    87  0808  345B               	retlw	91
    88  0809  344F               	retlw	79
    89  080A  3466               	retlw	102
    90  080B  346D               	retlw	109
    91  080C  347D               	retlw	125
    92  080D  3407               	retlw	7
    93  080E  347F               	retlw	127
    94  080F  346F               	retlw	111
    95  0810  3471               	retlw	113
    96  0811  3479               	retlw	121
    97  0812  3450               	retlw	80
    98  0813                     __end_of_numArray:	
    99  0813                     _Table_KeyFalg:	
   100  0813  3401               	retlw	1
   101  0814  3402               	retlw	2
   102  0815  3404               	retlw	4
   103  0816  3408               	retlw	8
   104  0817  3410               	retlw	16
   105  0818  3420               	retlw	32
   106  0819  3440               	retlw	64
   107  081A  3480               	retlw	128
   108  081B                     __end_of_Table_KeyFalg:	
   109  081B                     _Table_KeyDown:	
   110  081B  340A               	retlw	10
   111  081C  340A               	retlw	10
   112  081D                     __end_of_Table_KeyDown:	
   113  081D                     _Table_KeyCap:	
   114  081D  3402               	retlw	2
   115  081E  3402               	retlw	2
   116  081F                     __end_of_Table_KeyCap:	
   117  081F                     _Table_KeyChannel:	
   118  081F  3442               	retlw	66
   119  0820  3443               	retlw	67
   120  0821                     __end_of_Table_KeyChannel:	
   121                           
   122                           	psect	nvBANK0
   123  006E                     __pnvBANK0:	
   124  006E                     _firstTime:	
   125  006E                     	ds	1
   126                           
   127                           	psect	nvBANK1
   128  00C2                     __pnvBANK1:	
   129  00C2                     _firstLock:	
   130  00C2                     	ds	1
   131  001E                     _PWMD01H	set	30
   132  001D                     _PWMCON2	set	29
   133  001A                     _PWMD1L	set	26
   134  0019                     _PWMD0L	set	25
   135  0018                     _PWMTH	set	24
   136  0017                     _PWMTL	set	23
   137  0016                     _PWMCON1	set	22
   138  0015                     _PWMCON0	set	21
   139  0014                     _OSCCON	set	20
   140  0013                     _T2CON	set	19
   141  0011                     _PR2	set	17
   142  000E                     _PIE1	set	14
   143  000D                     _PIR1	set	13
   144  000B                     _INTCON	set	11
   145  0008                     _WPUB	set	8
   146  0006                     _PORTB	set	6
   147  0005                     _TRISB	set	5
   148  0001                     _OPTION_REG	set	1
   149  0069                     _TMR2IF	set	105
   150  006B                     _RAIF	set	107
   151  0058                     _RBIF	set	88
   152  0059                     _INTF	set	89
   153  005B                     _RBIE	set	91
   154  0048                     _IOCB0	set	72
   155  0034                     _RB4	set	52
   156  0036                     _RB6	set	54
   157  0028                     _TRISB0	set	40
   158  002E                     _TRISB6	set	46
   159  0099                     _ADRESH	set	153
   160  0098                     _ADRESL	set	152
   161  0096                     _ADCON1	set	150
   162  0095                     _ADCON0	set	149
   163  0086                     _PORTA	set	134
   164  0085                     _TRISA	set	133
   165  0081                     _TMR0	set	129
   166  04B2                     _LDO_EN	set	1202
   167  04B6                     _CHS4	set	1206
   168  04A8                     _ADON	set	1192
   169  04A9                     _GODONE	set	1193
   170  0430                     _RA0	set	1072
   171  0431                     _RA1	set	1073
   172  0433                     _RA3	set	1075
   173  0434                     _RA4	set	1076
   174  0117                     _KEYDATAH	set	279
   175  0116                     _KEYDATAL	set	278
   176  0113                     _KEYCON2	set	275
   177  0112                     _KEYCON1	set	274
   178  0111                     _KEYCON0	set	273
   179  0110                     _PIE2	set	272
   180  010F                     _PIR2	set	271
   181  0106                     _PORTC	set	262
   182  0105                     _TRISC	set	261
   183                           
   184                           	psect	cinit
   185  000F                     start_initialization:	
   186                           ; #config settings
   187                           
   188  000F                     __initialization:	
   189                           
   190                           ;initializer for _showNumGe
   191  000F  307F               	movlw	127
   192  0010  00EC               	movwf	__pdataBANK0& (0+127)
   193                           
   194                           ;initializer for _showNumShi
   195  0011  00ED               	movwf	(__pdataBANK0+1)& (0+127)
   196  0012  30A0               	movlw	low __pbssBANK1
   197                           
   198                           ; Clear objects allocated to BANK1
   199  0013  1383               	bcf	3,7	;select IRP bank0
   200  0014  0084               	movwf	4
   201  0015  30BE               	movlw	low (__pbssBANK1+30)
   202  0016  118A  27F5  118A   	fcall	clear_ram0
   203                           
   204                           ; Clear objects allocated to BANK0
   205  0019  3020               	movlw	low __pbssBANK0
   206  001A  0084               	movwf	4
   207  001B  304A               	movlw	low (__pbssBANK0+42)
   208  001C  118A  27F5         	fcall	clear_ram0
   209                           
   210                           ; Clear objects allocated to COMMON
   211  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   212  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   213                           
   214                           ; Clear objects allocated to BITCOMMON
   215  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   216  0021                     end_of_initialization:	
   217                           ;End of C runtime variable initialization code
   218                           
   219  0021                     __end_of__initialization:	
   220  0021  0183               	clrf	3
   221  0022  158A  2D43         	ljmp	_main	;jump to C main() function
   222                           
   223                           	psect	bitbssCOMMON
   224  03C0                     __pbitbssCOMMON:	
   225  03C0                     _b_ksleep:	
   226  03C0                     	ds	1
   227  03C1                     _b_kerr:	
   228  03C1                     	ds	1
   229  03C2                     _b_kclr:	
   230  03C2                     	ds	1
   231  03C3                     _b_kover1:	
   232  03C3                     	ds	1
   233  03C4                     _b_kover:	
   234  03C4                     	ds	1
   235  03C5                     _B_OnOff:	
   236  03C5                     	ds	1
   237  03C6                     _B_MainLoop:	
   238  03C6                     	ds	1
   239                           
   240                           	psect	bssCOMMON
   241  0079                     __pbssCOMMON:	
   242  0079                     _KeyData:	
   243  0079                     	ds	2
   244                           
   245                           	psect	bssBANK0
   246  0020                     __pbssBANK0:	
   247  0020                     _KeyOldValue1:	
   248  0020                     	ds	4
   249  0024                     _KeyOldData:	
   250  0024                     	ds	2
   251  0026                     _power_ad:	
   252  0026                     	ds	2
   253  0028                     _count30s:	
   254  0028                     	ds	2
   255  002A                     _shanshuoTime2:	
   256  002A                     	ds	2
   257  002C                     _shanshuoTime:	
   258  002C                     	ds	2
   259  002E                     _KeyFlag:	
   260  002E                     	ds	2
   261  0030                     TurnKeyFlags@F84:	
   262  0030                     	ds	1
   263  0031                     TurnKeyFlags@F83:	
   264  0031                     	ds	1
   265  0032                     CheckKeyOldValue@F77:	
   266  0032                     	ds	1
   267  0033                     _KeyMaxSub:	
   268  0033                     	ds	1
   269  0034                     _KeyCounter:	
   270  0034                     	ds	1
   271  0035                     KeyServer@KeyOldFlag:	
   272  0035                     	ds	1
   273  0036                     _test_adc:	
   274  0036                     	ds	1
   275  0037                     _curBatStep:	
   276  0037                     	ds	1
   277  0038                     _showBatStep:	
   278  0038                     	ds	1
   279  0039                     _wuhuaKeyFlag:	
   280  0039                     	ds	1
   281  003A                     _fanKeyFlag:	
   282  003A                     	ds	1
   283  003B                     _ledCnt:	
   284  003B                     	ds	1
   285  003C                     _lowFanTime:	
   286  003C                     	ds	1
   287  003D                     _lowBatLock:	
   288  003D                     	ds	1
   289  003E                     _chrgFullTime:	
   290  003E                     	ds	1
   291  003F                     _chrgFullFlag:	
   292  003F                     	ds	1
   293  0040                     _chrgFlag:	
   294  0040                     	ds	1
   295  0041                     _fanOverTime:	
   296  0041                     	ds	1
   297  0042                     _count10s:	
   298  0042                     	ds	1
   299  0043                     _fanDuty:	
   300  0043                     	ds	1
   301  0044                     _wuhuaFlag:	
   302  0044                     	ds	1
   303  0045                     _workStep:	
   304  0045                     	ds	1
   305  0046                     _count1s:	
   306  0046                     	ds	1
   307  0047                     _MainTime:	
   308  0047                     	ds	1
   309  0048                     _adresult:	
   310  0048                     	ds	2
   311                           
   312                           	psect	dataBANK0
   313  006C                     __pdataBANK0:	
   314  006C                     _showNumGe:	
   315  006C                     	ds	1
   316  006D                     _showNumShi:	
   317  006D                     	ds	1
   318                           
   319                           	psect	bssBANK1
   320  00A0                     __pbssBANK1:	
   321  00A0                     _KeyReference:	
   322  00A0                     	ds	4
   323  00A4                     _KeyOldValue2:	
   324  00A4                     	ds	4
   325  00A8                     _KeyOldValue0:	
   326  00A8                     	ds	4
   327  00AC                     _KeyResSum:	
   328  00AC                     	ds	4
   329  00B0                     CheckValidTime@F87:	
   330  00B0                     	ds	2
   331  00B2                     _result:	
   332  00B2                     	ds	2
   333  00B4                     _count15s:	
   334  00B4                     	ds	2
   335  00B6                     _lowBatTime:	
   336  00B6                     	ds	2
   337  00B8                     _fanValue:	
   338  00B8                     	ds	2
   339  00BA                     _time:	
   340  00BA                     	ds	2
   341  00BC                     _KeyUpShake:	
   342  00BC                     	ds	2
   343                           
   344                           	psect	clrtext
   345  07F5                     clear_ram0:	
   346                           ;	Called with FSR containing the base address, and
   347                           ;	W with the last address+1
   348                           
   349  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   350  07F6                     clrloop0:	
   351  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   352  07F7  0A84               	incf	4,f	;increment pointer
   353  07F8  0604               	xorwf	4,w	;XOR with final address
   354  07F9  1903               	btfsc	3,2	;have we reached the end yet?
   355  07FA  3400               	retlw	0	;all done for this memory range, return
   356  07FB  0604               	xorwf	4,w	;XOR again to restore value
   357  07FC  2FF6               	goto	clrloop0	;do the next byte
   358                           
   359                           	psect	cstackBANK1
   360  00BE                     __pcstackBANK1:	
   361  00BE                     workCtr@power_temp:	
   362                           
   363                           ; 4 bytes @ 0x0
   364  00BE                     	ds	4
   365                           
   366                           	psect	cstackCOMMON
   367  0070                     __pcstackCOMMON:	
   368  0070                     ?_ledShow:	
   369  0070                     ??_ledShow:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_SystemEnterSleep:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_CheckTouchKey:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_Init_System:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Refurbish_Sfr:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_KeyServer:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_Isr_Timer:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_Isr_Timer:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_WorkSleep:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_showBatLed:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_setBatStep:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_chrgCtr:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_keyLedCtr:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_pwmInit:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_pwmStop:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_fanInit:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_fanStop:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_fanCtr:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_wuhuaCtr:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_workCtr:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_main:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_KeyIsIn:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_KeyClearOne:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_KeyClearIn:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_KeyStopClear:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_ClearResSum:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_GetTouchKeyValue:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_CheckOnceResult:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_CheckKeyOldValue:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_TurnKeyFlags:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_CheckValidTime:	
   460                           ; 1 bytes @ 0x0
   461                           
   462                           
   463                           ; 1 bytes @ 0x0
   464  0070                     	ds	3
   465  0073                     ??_Init_System:	
   466  0073                     ??_Refurbish_Sfr:	
   467                           ; 1 bytes @ 0x3
   468                           
   469  0073                     ??_KeyServer:	
   470                           ; 1 bytes @ 0x3
   471                           
   472  0073                     ?_ADC_Sample:	
   473                           ; 1 bytes @ 0x3
   474                           
   475  0073                     ??_pwmInit:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     ??_pwmStop:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     ??_fanInit:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     ??_fanStop:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     ??_wuhuaCtr:	
   488                           ; 1 bytes @ 0x3
   489                           
   490  0073                     ??_KeyIsIn:	
   491                           ; 1 bytes @ 0x3
   492                           
   493  0073                     ??_KeyClearOne:	
   494                           ; 1 bytes @ 0x3
   495                           
   496  0073                     ??_ClearResSum:	
   497                           ; 1 bytes @ 0x3
   498                           
   499  0073                     ?_KeyHave:	
   500                           ; 1 bytes @ 0x3
   501                           
   502  0073                     ??_CheckValidTime:	
   503                           ; 1 bytes @ 0x3
   504                           
   505  0073                     ??___lmul:	
   506                           ; 1 bytes @ 0x3
   507                           
   508  0073                     ?___lbdiv:	
   509                           ; 1 bytes @ 0x3
   510                           
   511  0073                     ?___lbmod:	
   512                           ; 1 bytes @ 0x3
   513                           
   514  0073                     ?___lwdiv:	
   515                           ; 1 bytes @ 0x3
   516                           
   517  0073                     ?___lwmod:	
   518                           ; 2 bytes @ 0x3
   519                           
   520  0073                     ?___ftpack:	
   521                           ; 2 bytes @ 0x3
   522                           
   523  0073                     ADC_Sample@adldo:	
   524                           ; 3 bytes @ 0x3
   525                           
   526  0073                     KeyIsIn@46:	
   527                           ; 1 bytes @ 0x3
   528                           
   529  0073                     KeyClearOne@49:	
   530                           ; 1 bytes @ 0x3
   531                           
   532  0073                     ClearResSum@56:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0073                     ___lbdiv@divisor:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0073                     ___lbmod@divisor:	
   539                           ; 1 bytes @ 0x3
   540                           
   541  0073                     KeyHave@59:	
   542                           ; 1 bytes @ 0x3
   543                           
   544  0073                     ___lwdiv@divisor:	
   545                           ; 2 bytes @ 0x3
   546                           
   547  0073                     ___lwmod@divisor:	
   548                           ; 2 bytes @ 0x3
   549                           
   550  0073                     ___ftpack@arg:	
   551                           ; 2 bytes @ 0x3
   552                           
   553  0073                     ___lmul@product:	
   554                           ; 3 bytes @ 0x3
   555                           
   556                           
   557                           ; 4 bytes @ 0x3
   558  0073                     	ds	1
   559  0074                     ??_SystemEnterSleep:	
   560  0074                     ??_ADC_Sample:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     ??_KeyStopClear:	
   564                           ; 1 bytes @ 0x4
   565                           
   566  0074                     ??_GetTouchKeyValue:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0074                     ??___lbdiv:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0074                     ??___lbmod:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0074                     KeyIsIn@45:	
   576                           ; 1 bytes @ 0x4
   577                           
   578  0074                     KeyStopClear@53:	
   579                           ; 1 bytes @ 0x4
   580                           
   581  0074                     ___lbdiv@dividend:	
   582                           ; 1 bytes @ 0x4
   583                           
   584                           
   585                           ; 1 bytes @ 0x4
   586  0074                     	ds	1
   587  0075                     ??_KeyClearIn:	
   588  0075                     ??_KeyHave:	
   589                           ; 1 bytes @ 0x5
   590                           
   591  0075                     ??_CheckKeyOldValue:	
   592                           ; 1 bytes @ 0x5
   593                           
   594  0075                     KeyClearIn@51:	
   595                           ; 1 bytes @ 0x5
   596                           
   597  0075                     KeyHave@58:	
   598                           ; 1 bytes @ 0x5
   599                           
   600  0075                     ___lbdiv@counter:	
   601                           ; 1 bytes @ 0x5
   602                           
   603  0075                     ___lbmod@dividend:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0075                     ___lwdiv@dividend:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0075                     ___lwmod@dividend:	
   610                           ; 2 bytes @ 0x5
   611                           
   612                           
   613                           ; 2 bytes @ 0x5
   614  0075                     	ds	1
   615  0076                     ??_WorkSleep:	
   616  0076                     ??_TurnKeyFlags:	
   617                           ; 1 bytes @ 0x6
   618                           
   619  0076                     ___ftpack@exp:	
   620                           ; 1 bytes @ 0x6
   621                           
   622  0076                     ___lbdiv@quotient:	
   623                           ; 1 bytes @ 0x6
   624                           
   625  0076                     ___lbmod@counter:	
   626                           ; 1 bytes @ 0x6
   627                           
   628                           
   629                           ; 1 bytes @ 0x6
   630  0076                     	ds	1
   631  0077                     ??_CheckTouchKey:	
   632  0077                     ??_setBatStep:	
   633                           ; 1 bytes @ 0x7
   634                           
   635  0077                     ??___lwdiv:	
   636                           ; 1 bytes @ 0x7
   637                           
   638  0077                     ??___lwmod:	
   639                           ; 1 bytes @ 0x7
   640                           
   641  0077                     ___ftpack@sign:	
   642                           ; 1 bytes @ 0x7
   643                           
   644  0077                     ___lbmod@rem:	
   645                           ; 1 bytes @ 0x7
   646                           
   647  0077                     ___lwmod@counter:	
   648                           ; 1 bytes @ 0x7
   649                           
   650                           
   651                           ; 1 bytes @ 0x7
   652  0077                     	ds	1
   653  0078                     ??_showBatLed:	
   654  0078                     ??_chrgCtr:	
   655                           ; 1 bytes @ 0x8
   656                           
   657  0078                     ??_keyLedCtr:	
   658                           ; 1 bytes @ 0x8
   659                           
   660  0078                     ??_fanCtr:	
   661                           ; 1 bytes @ 0x8
   662                           
   663  0078                     ??_workCtr:	
   664                           ; 1 bytes @ 0x8
   665                           
   666  0078                     ??_main:	
   667                           ; 1 bytes @ 0x8
   668                           
   669  0078                     ??___lwtoft:	
   670                           ; 1 bytes @ 0x8
   671                           
   672                           
   673                           	psect	cstackBANK0
   674  004A                     __pcstackBANK0:	
   675                           ; 1 bytes @ 0x8
   676                           
   677  004A                     ??___ftpack:	
   678  004A                     ??_CheckOnceResult:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  004A                     ?___lmul:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  004A                     ADC_Sample@j:	
   685                           ; 4 bytes @ 0x0
   686                           
   687  004A                     ___lwdiv@counter:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  004A                     GetTouchKeyValue@64:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  004A                     CheckKeyOldValue@79:	
   694                           ; 2 bytes @ 0x0
   695                           
   696  004A                     ___lmul@multiplier:	
   697                           ; 2 bytes @ 0x0
   698                           
   699                           
   700                           ; 4 bytes @ 0x0
   701  004A                     	ds	1
   702  004B                     ADC_Sample@adch:	
   703  004B                     ___lwdiv@quotient:	
   704                           ; 1 bytes @ 0x1
   705                           
   706                           
   707                           ; 2 bytes @ 0x1
   708  004B                     	ds	1
   709  004C                     ADC_Sample@i:	
   710  004C                     GetTouchKeyValue@63:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  004C                     CheckKeyOldValue@80:	
   714                           ; 2 bytes @ 0x2
   715                           
   716                           
   717                           ; 2 bytes @ 0x2
   718  004C                     	ds	1
   719  004D                     ?___lwtoft:	
   720  004D                     setBatStep@tempSubBatTime:	
   721                           ; 3 bytes @ 0x3
   722                           
   723  004D                     ___lwtoft@c:	
   724                           ; 2 bytes @ 0x3
   725                           
   726  004D                     ADC_Sample@adsum:	
   727                           ; 2 bytes @ 0x3
   728                           
   729                           
   730                           ; 4 bytes @ 0x3
   731  004D                     	ds	1
   732  004E                     GetTouchKeyValue@62:	
   733  004E                     CheckKeyOldValue@78:	
   734                           ; 1 bytes @ 0x4
   735                           
   736  004E                     CheckOnceResult@73:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  004E                     ___lmul@multiplicand:	
   740                           ; 2 bytes @ 0x4
   741                           
   742                           
   743                           ; 4 bytes @ 0x4
   744  004E                     	ds	1
   745  004F                     SystemEnterSleep@94:	
   746                           
   747                           ; 2 bytes @ 0x5
   748  004F                     	ds	1
   749  0050                     ?___ftdiv:	
   750  0050                     CheckOnceResult@70:	
   751                           ; 3 bytes @ 0x6
   752                           
   753  0050                     ___ftdiv@f2:	
   754                           ; 1 bytes @ 0x6
   755                           
   756                           
   757                           ; 3 bytes @ 0x6
   758  0050                     	ds	1
   759  0051                     ADC_Sample@admin:	
   760  0051                     CheckOnceResult@72:	
   761                           ; 2 bytes @ 0x7
   762                           
   763  0051                     SystemEnterSleep@93:	
   764                           ; 2 bytes @ 0x7
   765                           
   766                           
   767                           ; 2 bytes @ 0x7
   768  0051                     	ds	2
   769  0053                     CheckOnceResult@69:	
   770  0053                     ADC_Sample@admax:	
   771                           ; 1 bytes @ 0x9
   772                           
   773  0053                     SystemEnterSleep@92:	
   774                           ; 2 bytes @ 0x9
   775                           
   776  0053                     ___ftdiv@f1:	
   777                           ; 2 bytes @ 0x9
   778                           
   779                           
   780                           ; 3 bytes @ 0x9
   781  0053                     	ds	1
   782  0054                     CheckOnceResult@71:	
   783                           
   784                           ; 2 bytes @ 0xA
   785  0054                     	ds	1
   786  0055                     SystemEnterSleep@91:	
   787  0055                     ADC_Sample@ad_temp:	
   788                           ; 1 bytes @ 0xB
   789                           
   790                           
   791                           ; 2 bytes @ 0xB
   792  0055                     	ds	1
   793  0056                     ??___ftdiv:	
   794  0056                     CheckOnceResult@68:	
   795                           ; 1 bytes @ 0xC
   796                           
   797                           
   798                           ; 1 bytes @ 0xC
   799  0056                     	ds	1
   800  0057                     fanCtr@maxFanValue:	
   801                           
   802                           ; 1 bytes @ 0xD
   803  0057                     	ds	1
   804  0058                     fanCtr@fan_temp:	
   805                           
   806                           ; 4 bytes @ 0xE
   807  0058                     	ds	1
   808  0059                     ___ftdiv@cntr:	
   809                           
   810                           ; 1 bytes @ 0xF
   811  0059                     	ds	1
   812  005A                     ___ftdiv@f3:	
   813                           
   814                           ; 3 bytes @ 0x10
   815  005A                     	ds	3
   816  005D                     ___ftdiv@exp:	
   817                           
   818                           ; 1 bytes @ 0x13
   819  005D                     	ds	1
   820  005E                     ___ftdiv@sign:	
   821                           
   822                           ; 1 bytes @ 0x14
   823  005E                     	ds	1
   824  005F                     ?___fttol:	
   825  005F                     ___fttol@f1:	
   826                           ; 4 bytes @ 0x15
   827                           
   828                           
   829                           ; 3 bytes @ 0x15
   830  005F                     	ds	4
   831  0063                     ??___fttol:	
   832                           
   833                           ; 1 bytes @ 0x19
   834  0063                     	ds	3
   835  0066                     ___fttol@sign1:	
   836                           
   837                           ; 1 bytes @ 0x1C
   838  0066                     	ds	1
   839  0067                     ___fttol@lval:	
   840                           
   841                           ; 4 bytes @ 0x1D
   842  0067                     	ds	4
   843  006B                     ___fttol@exp1:	
   844                           
   845                           ; 1 bytes @ 0x21
   846  006B                     	ds	1
   847                           
   848                           	psect	maintext
   849  0D43                     __pmaintext:	
   850 ;;
   851 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   852 ;;
   853 ;; *************** function _main *****************
   854 ;; Defined at:
   855 ;;		line 915 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : B00/0
   866 ;;		On exit  : 300/100
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   869 ;;      Params:         0       0       0       0
   870 ;;      Locals:         0       0       0       0
   871 ;;      Temps:          0       0       0       0
   872 ;;      Totals:         0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels required when called:    6
   875 ;; This function calls:
   876 ;;		_CheckTouchKey
   877 ;;		_Init_System
   878 ;;		_KeyServer
   879 ;;		_Refurbish_Sfr
   880 ;;		_WorkSleep
   881 ;;		_chrgCtr
   882 ;;		_setBatStep
   883 ;;		_workCtr
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           
   890                           ;psect for function _main
   891  0D43                     _main:	
   892                           
   893                           ;main.c: 917: Init_System();
   894                           
   895                           ;incstack = 0
   896                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   897  0D43  118A  2024  158A   	fcall	_Init_System
   898  0D46  30FA               	movlw	250
   899                           
   900                           ;main.c: 918: firstLock = 1;
   901  0D47  01C2               	clrf	_firstLock^(0+128)
   902  0D48  0AC2               	incf	_firstLock^(0+128),f
   903                           
   904                           ;main.c: 919: firstTime = 250;
   905  0D49  1283               	bcf	3,5	;RP0=0, select bank0
   906  0D4A  00EE               	movwf	_firstTime
   907  0D4B                     l5034:	
   908                           
   909                           ;main.c: 921: {
   910                           ;main.c: 923: if(B_MainLoop)
   911  0D4B  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   912  0D4C  2D4B               	goto	l5034
   913                           
   914                           ;main.c: 924: {
   915                           ;main.c: 925: B_MainLoop = 0;
   916  0D4D  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   917  0D4E  0064               	clrwdt	;# 
   918                           
   919                           ;main.c: 927: CheckTouchKey();
   920  0D4F  118A  207C  158A   	fcall	_CheckTouchKey
   921                           
   922                           ;main.c: 928: chrgCtr();
   923  0D52  158A  25D7  158A   	fcall	_chrgCtr
   924                           
   925                           ;main.c: 929: Refurbish_Sfr();
   926  0D55  118A  2403  158A   	fcall	_Refurbish_Sfr
   927                           
   928                           ;main.c: 930: KeyServer();
   929  0D58  158A  2589  158A   	fcall	_KeyServer
   930                           
   931                           ;main.c: 931: workCtr();
   932  0D5B  118A  24B1  158A   	fcall	_workCtr
   933                           
   934                           ;main.c: 932: setBatStep();
   935  0D5E  158A  2729  158A   	fcall	_setBatStep
   936                           
   937                           ;main.c: 933: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   938  0D61  086E               	movf	_firstTime,w
   939  0D62  1D03               	btfss	3,2
   940  0D63  2D7A               	goto	l5070
   941  0D64  0840               	movf	_chrgFlag,w
   942  0D65  1D03               	btfss	3,2
   943  0D66  2D7A               	goto	l5070
   944  0D67  0845               	movf	_workStep,w
   945  0D68  1D03               	btfss	3,2
   946  0D69  2D7A               	goto	l5070
   947  0D6A  0844               	movf	_wuhuaFlag,w
   948  0D6B  1D03               	btfss	3,2
   949  0D6C  2D7A               	goto	l5070
   950  0D6D  082C               	movf	_shanshuoTime,w
   951  0D6E  042D               	iorwf	_shanshuoTime+1,w
   952  0D6F  1D03               	btfss	3,2
   953  0D70  2D7A               	goto	l5070
   954  0D71  082A               	movf	_shanshuoTime2,w
   955  0D72  042B               	iorwf	_shanshuoTime2+1,w
   956  0D73  1D03               	btfss	3,2
   957  0D74  2D7A               	goto	l5070
   958                           
   959                           ;main.c: 934: {
   960                           ;main.c: 935: PORTA &= 0xE4;
   961                           
   962                           ;main.c: 936: PORTB &= 0xEF;
   963                           
   964                           ;main.c: 937: TRISA |= 0x1B;
   965                           
   966                           ;main.c: 938: TRISB |= 0x10;
   967  0D75  257E               	fcall	PL14	;call to abstracted procedure
   968                           
   969                           ;main.c: 939: WorkSleep();
   970  0D76  118A  2041  158A   	fcall	_WorkSleep
   971                           
   972                           ;main.c: 940: }
   973  0D79  2D4B               	goto	l5034
   974  0D7A                     l5070:	
   975                           
   976                           ;main.c: 941: else
   977                           ;main.c: 942: {
   978                           ;main.c: 943: time = 0;
   979  0D7A  1683               	bsf	3,5	;RP0=1, select bank1
   980  0D7B  01BA               	clrf	_time^(0+128)
   981  0D7C  01BB               	clrf	(_time+1)^(0+128)
   982  0D7D  2D4B               	goto	l5034
   983  0D7E                     __end_of_main:	
   984  0D7E                     PL14:	
   985  0D7E  30E4               	movlw	228
   986  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
   987  0D80  0586               	andwf	6,f	;volatile
   988  0D81  1283               	bcf	3,5	;RP0=0, select bank0
   989  0D82  1206               	bcf	6,4	;volatile
   990  0D83  301B               	movlw	27
   991  0D84  1683               	bsf	3,5	;RP0=1, select bank1
   992  0D85  0485               	iorwf	5,f	;volatile
   993  0D86  1283               	bcf	3,5	;RP0=0, select bank0
   994  0D87  1605               	bsf	5,4	;volatile
   995  0D88  0008               	return
   996  0D89                     __end_ofPL14:	
   997                           
   998                           	psect	text7
   999  0411                     __ptext7:	
  1000 ;; *************** function _fanCtr *****************
  1001 ;; Defined at:
  1002 ;;		line 778 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1007 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2, status,0, pclath, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 300/0
  1014 ;;		On exit  : 200/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1017 ;;      Params:         0       0       0       0
  1018 ;;      Locals:         0       5       0       0
  1019 ;;      Temps:          0       0       0       0
  1020 ;;      Totals:         0       5       0       0
  1021 ;;Total ram usage:        5 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    3
  1024 ;; This function calls:
  1025 ;;		_ADC_Sample
  1026 ;;		___lmul
  1027 ;;		_fanInit
  1028 ;;		_fanStop
  1029 ;; This function is called by:
  1030 ;;		_workCtr
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           
  1035                           ;psect for function _fanCtr
  1036  0411                     _fanCtr:	
  1037                           
  1038                           ;main.c: 780: if(workStep > 0)
  1039                           
  1040                           ;incstack = 0
  1041                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1042  0411  0845               	movf	_workStep,w
  1043  0412  1903               	btfsc	3,2
  1044  0413  2C79               	goto	l4640
  1045                           
  1046                           ;main.c: 781: {
  1047                           ;main.c: 782: PORTA |= 0x04;
  1048  0414  1683               	bsf	3,5	;RP0=1, select bank1
  1049  0415  1506               	bsf	6,2	;volatile
  1050                           
  1051                           ;main.c: 783: unsigned char maxFanValue = 52;
  1052  0416  3034               	movlw	52
  1053  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0418  00D7               	movwf	fanCtr@maxFanValue
  1055                           
  1056                           ;main.c: 784: if(workStep == 1 || power_ad < 3150)
  1057  0419  0345               	decf	_workStep,w
  1058  041A  1903               	btfsc	3,2
  1059  041B  2C23               	goto	l4606
  1060  041C  300C               	movlw	12
  1061  041D  0227               	subwf	_power_ad+1,w	;volatile
  1062  041E  304E               	movlw	78
  1063  041F  1903               	skipnz
  1064  0420  0226               	subwf	_power_ad,w	;volatile
  1065  0421  1803               	skipnc
  1066  0422  2C25               	goto	l4608
  1067  0423                     l4606:	
  1068                           
  1069                           ;main.c: 785: {
  1070                           ;main.c: 786: maxFanValue = 38;
  1071  0423  3026               	movlw	38
  1072  0424  00D7               	movwf	fanCtr@maxFanValue
  1073  0425                     l4608:	
  1074  0425  300D               	movlw	13
  1075                           
  1076                           ;main.c: 787: }
  1077                           ;main.c: 788: test_adc = ADC_Sample(13, 0);
  1078  0426  01F3               	clrf	ADC_Sample@adldo
  1079  0427  2631  118A         	fcall	_ADC_Sample
  1080  0429  00B6               	movwf	_test_adc	;volatile
  1081                           
  1082                           ;main.c: 789: if (0xA5 == test_adc)
  1083  042A  30A5               	movlw	165
  1084  042B  0636               	xorwf	_test_adc,w	;volatile
  1085  042C  1D03               	btfss	3,2
  1086  042D  2C58               	goto	l4620
  1087                           
  1088                           ;main.c: 790: {
  1089                           ;main.c: 791: volatile unsigned long fan_temp;
  1090                           ;main.c: 792: if(power_ad > 0)
  1091  042E  0826               	movf	_power_ad,w	;volatile
  1092  042F  0427               	iorwf	_power_ad+1,w	;volatile
  1093  0430  1903               	btfsc	3,2
  1094  0431  2C58               	goto	l4620
  1095                           
  1096                           ;main.c: 793: {
  1097                           ;main.c: 794: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1098  0432  0848               	movf	_adresult,w	;volatile
  1099  0433  00CA               	movwf	___lmul@multiplier
  1100  0434  0849               	movf	_adresult+1,w	;volatile
  1101  0435  00CB               	movwf	___lmul@multiplier+1
  1102  0436  01CC               	clrf	___lmul@multiplier+2
  1103  0437  01CD               	clrf	___lmul@multiplier+3
  1104  0438  0826               	movf	_power_ad,w	;volatile
  1105  0439  00CE               	movwf	___lmul@multiplicand
  1106  043A  0827               	movf	_power_ad+1,w	;volatile
  1107  043B  00CF               	movwf	___lmul@multiplicand+1
  1108  043C  01D0               	clrf	___lmul@multiplicand+2
  1109  043D  01D1               	clrf	___lmul@multiplicand+3
  1110  043E  247E  118A         	fcall	___lmul
  1111  0440  084D               	movf	?___lmul+3,w
  1112  0441  00DB               	movwf	fanCtr@fan_temp+3	;volatile
  1113  0442  084C               	movf	?___lmul+2,w
  1114  0443  00DA               	movwf	fanCtr@fan_temp+2	;volatile
  1115  0444  084B               	movf	?___lmul+1,w
  1116  0445  00D9               	movwf	fanCtr@fan_temp+1	;volatile
  1117  0446  084A               	movf	?___lmul,w
  1118  0447  00D8               	movwf	fanCtr@fan_temp	;volatile
  1119  0448  300C               	movlw	12
  1120  0449                     u4945:	
  1121  0449  1003               	clrc
  1122  044A  0CDB               	rrf	fanCtr@fan_temp+3,f	;volatile
  1123  044B  0CDA               	rrf	fanCtr@fan_temp+2,f	;volatile
  1124  044C  0CD9               	rrf	fanCtr@fan_temp+1,f	;volatile
  1125  044D  0CD8               	rrf	fanCtr@fan_temp,f	;volatile
  1126  044E  3EFF               	addlw	-1
  1127  044F  1D03               	skipz
  1128  0450  2C49               	goto	u4945
  1129                           
  1130                           ;main.c: 795: fanValue = (unsigned int)(fan_temp);
  1131  0451  0859               	movf	fanCtr@fan_temp+1,w	;volatile
  1132  0452  1683               	bsf	3,5	;RP0=1, select bank1
  1133  0453  00B9               	movwf	(_fanValue+1)^(0+128)
  1134  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1135  0455  0858               	movf	fanCtr@fan_temp,w	;volatile
  1136  0456  1683               	bsf	3,5	;RP0=1, select bank1
  1137  0457  00B8               	movwf	_fanValue^(0+128)
  1138  0458                     l4620:	
  1139                           
  1140                           ;main.c: 796: }
  1141                           ;main.c: 797: }
  1142                           ;main.c: 798: if(fanValue > 1300)
  1143  0458  3005               	movlw	5
  1144  0459  1683               	bsf	3,5	;RP0=1, select bank1
  1145  045A  0239               	subwf	(_fanValue+1)^(0+128),w
  1146  045B  3015               	movlw	21
  1147  045C  1903               	skipnz
  1148  045D  0238               	subwf	_fanValue^(0+128),w
  1149  045E  1C03               	skipc
  1150  045F  2C6C               	goto	l4628
  1151                           
  1152                           ;main.c: 799: {
  1153                           ;main.c: 800: if(++fanOverTime > 25)
  1154  0460  301A               	movlw	26
  1155  0461  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0462  0AC1               	incf	_fanOverTime,f
  1157  0463  0241               	subwf	_fanOverTime,w
  1158  0464  1C03               	skipc
  1159  0465  2C6E               	goto	l4630
  1160  0466  30E1               	movlw	225
  1161                           
  1162                           ;main.c: 801: {
  1163                           ;main.c: 802: fanOverTime = 0;
  1164  0467  01C1               	clrf	_fanOverTime
  1165                           
  1166                           ;main.c: 803: workStep = 0;
  1167  0468  01C5               	clrf	_workStep
  1168                           
  1169                           ;main.c: 804: shanshuoTime = 225;
  1170  0469  00AC               	movwf	_shanshuoTime
  1171  046A  01AD               	clrf	_shanshuoTime+1
  1172  046B  2C6E               	goto	l4630
  1173  046C                     l4628:	
  1174                           
  1175                           ;main.c: 807: else
  1176                           ;main.c: 808: {
  1177                           ;main.c: 809: fanOverTime = 0;
  1178  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1179  046D  01C1               	clrf	_fanOverTime
  1180  046E                     l4630:	
  1181                           
  1182                           ;main.c: 810: }
  1183                           ;main.c: 811: if(fanDuty < maxFanValue)
  1184  046E  0857               	movf	fanCtr@maxFanValue,w
  1185  046F  0243               	subwf	_fanDuty,w
  1186  0470  1803               	skipnc
  1187  0471  2C74               	goto	l4634
  1188                           
  1189                           ;main.c: 812: {
  1190                           ;main.c: 813: fanDuty++;
  1191  0472  0AC3               	incf	_fanDuty,f
  1192                           
  1193                           ;main.c: 814: }
  1194  0473  2C78               	goto	l4638
  1195  0474                     l4634:	
  1196                           
  1197                           ;main.c: 815: else if(fanDuty > maxFanValue)
  1198  0474  0843               	movf	_fanDuty,w
  1199  0475  0257               	subwf	fanCtr@maxFanValue,w
  1200  0476  1C03               	btfss	3,0
  1201                           
  1202                           ;main.c: 816: {
  1203                           ;main.c: 817: fanDuty--;
  1204  0477  03C3               	decf	_fanDuty,f
  1205  0478                     l4638:	
  1206                           
  1207                           ;main.c: 818: }
  1208                           ;main.c: 819: fanInit();
  1209  0478  2F69               	ljmp	l4368
  1210  0479                     l4640:	
  1211                           ;main.c: 820: }
  1212                           
  1213                           
  1214                           ;main.c: 821: else
  1215                           ;main.c: 822: {
  1216                           ;main.c: 823: fanStop();
  1217  0479  2775               	fcall	_fanStop
  1218                           
  1219                           ;main.c: 824: fanDuty = 0;
  1220  047A  01C3               	clrf	_fanDuty
  1221                           
  1222                           ;main.c: 825: PORTA &= 0xFB;
  1223  047B  1683               	bsf	3,5	;RP0=1, select bank1
  1224  047C  1106               	bcf	6,2	;volatile
  1225  047D  0008               	return
  1226  047E                     __end_of_fanCtr:	
  1227  047E                     __ptext10:	
  1228 ;; *************** function ___lmul *****************
  1229 ;; Defined at:
  1230 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1233 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  product         4    3[COMMON] unsigned long 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  4    0[BANK0 ] unsigned long 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 300/0
  1242 ;;		On exit  : 300/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1245 ;;      Params:         0       8       0       0
  1246 ;;      Locals:         4       0       0       0
  1247 ;;      Temps:          0       0       0       0
  1248 ;;      Totals:         4       8       0       0
  1249 ;;Total ram usage:       12 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    2
  1252 ;; This function calls:
  1253 ;;		Nothing
  1254 ;; This function is called by:
  1255 ;;		_fanCtr
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           
  1260                           ;psect for function ___lmul
  1261  047E                     ___lmul:	
  1262                           
  1263                           ;incstack = 0
  1264                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1265  047E  01F3               	clrf	___lmul@product
  1266  047F  01F4               	clrf	___lmul@product+1
  1267  0480  01F5               	clrf	___lmul@product+2
  1268  0481  01F6               	clrf	___lmul@product+3
  1269  0482                     l1417:	
  1270  0482  1C4A               	btfss	___lmul@multiplier,0
  1271  0483  2C98               	goto	l4430
  1272  0484  084E               	movf	___lmul@multiplicand,w
  1273  0485  07F3               	addwf	___lmul@product,f
  1274  0486  084F               	movf	___lmul@multiplicand+1,w
  1275  0487  1103               	clrz
  1276  0488  1803               	skipnc
  1277  0489  3E01               	addlw	1
  1278  048A  1D03               	btfss	3,2
  1279  048B  07F4               	addwf	___lmul@product+1,f
  1280  048C  0850               	movf	___lmul@multiplicand+2,w
  1281  048D  1103               	clrz
  1282  048E  1803               	skipnc
  1283  048F  3E01               	addlw	1
  1284  0490  1D03               	btfss	3,2
  1285  0491  07F5               	addwf	___lmul@product+2,f
  1286  0492  0851               	movf	___lmul@multiplicand+3,w
  1287  0493  1103               	clrz
  1288  0494  1803               	skipnc
  1289  0495  3E01               	addlw	1
  1290  0496  1D03               	btfss	3,2
  1291  0497  07F6               	addwf	___lmul@product+3,f
  1292  0498                     l4430:	
  1293  0498  1003               	clrc
  1294  0499  0DCE               	rlf	___lmul@multiplicand,f
  1295  049A  0DCF               	rlf	___lmul@multiplicand+1,f
  1296  049B  0DD0               	rlf	___lmul@multiplicand+2,f
  1297  049C  0DD1               	rlf	___lmul@multiplicand+3,f
  1298  049D  1003               	clrc
  1299  049E  0CCD               	rrf	___lmul@multiplier+3,f
  1300  049F  0CCC               	rrf	___lmul@multiplier+2,f
  1301  04A0  0CCB               	rrf	___lmul@multiplier+1,f
  1302  04A1  0CCA               	rrf	___lmul@multiplier,f
  1303  04A2  084D               	movf	___lmul@multiplier+3,w
  1304  04A3  044C               	iorwf	___lmul@multiplier+2,w
  1305  04A4  044B               	iorwf	___lmul@multiplier+1,w
  1306  04A5  044A               	iorwf	___lmul@multiplier,w
  1307  04A6  1D03               	skipz
  1308  04A7  2C82               	goto	l1417
  1309  04A8  0876               	movf	___lmul@product+3,w
  1310  04A9  00CD               	movwf	?___lmul+3
  1311  04AA  0875               	movf	___lmul@product+2,w
  1312  04AB  00CC               	movwf	?___lmul+2
  1313  04AC  0874               	movf	___lmul@product+1,w
  1314  04AD  00CB               	movwf	?___lmul+1
  1315  04AE  0873               	movf	___lmul@product,w
  1316  04AF  00CA               	movwf	?___lmul
  1317  04B0  0008               	return
  1318  04B1                     __end_of___lmul:	
  1319  04B1                     __ptext1:	
  1320 ;; *************** function _workCtr *****************
  1321 ;; Defined at:
  1322 ;;		line 863 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, status,0, pclath, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 300/0
  1333 ;;		On exit  : 200/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1336 ;;      Params:         0       0       0       0
  1337 ;;      Locals:         0       0       4       0
  1338 ;;      Temps:          0       0       0       0
  1339 ;;      Totals:         0       0       4       0
  1340 ;;Total ram usage:        4 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    4
  1343 ;; This function calls:
  1344 ;;		_ADC_Sample
  1345 ;;		___ftdiv
  1346 ;;		___fttol
  1347 ;;		___lwtoft
  1348 ;;		_fanCtr
  1349 ;;		_keyLedCtr
  1350 ;;		_wuhuaCtr
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           
  1357                           ;psect for function _workCtr
  1358  04B1                     _workCtr:	
  1359                           
  1360                           ;incstack = 0
  1361                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1362  04B1  301F               	movlw	31
  1363                           
  1364                           ;main.c: 865: test_adc = ADC_Sample(31, 0);
  1365  04B2  01F3               	clrf	ADC_Sample@adldo
  1366  04B3  2631  118A         	fcall	_ADC_Sample
  1367  04B5  00B6               	movwf	_test_adc	;volatile
  1368                           
  1369                           ;main.c: 866: if (0xA5 == test_adc)
  1370  04B6  30A5               	movlw	165
  1371  04B7  0636               	xorwf	_test_adc,w	;volatile
  1372  04B8  1D03               	btfss	3,2
  1373  04B9  2CEB               	goto	l4964
  1374                           
  1375                           ;main.c: 867: {
  1376                           ;main.c: 868: volatile unsigned long power_temp;
  1377                           ;main.c: 870: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1378  04BA  3096               	movlw	150
  1379  04BB  01D3               	clrf	___ftdiv@f1
  1380  04BC  00D4               	movwf	___ftdiv@f1+1
  1381  04BD  304A               	movlw	74
  1382  04BE  00D5               	movwf	___ftdiv@f1+2
  1383  04BF  0849               	movf	_adresult+1,w	;volatile
  1384  04C0  00CE               	movwf	___lwtoft@c+1
  1385  04C1  0848               	movf	_adresult,w	;volatile
  1386  04C2  00CD               	movwf	___lwtoft@c
  1387  04C3  25E3  118A         	fcall	___lwtoft
  1388  04C5  084D               	movf	?___lwtoft,w
  1389  04C6  00D0               	movwf	___ftdiv@f2
  1390  04C7  084E               	movf	?___lwtoft+1,w
  1391  04C8  00D1               	movwf	___ftdiv@f2+1
  1392  04C9  084F               	movf	?___lwtoft+2,w
  1393  04CA  00D2               	movwf	___ftdiv@f2+2
  1394  04CB  2528  118A         	fcall	___ftdiv
  1395  04CD  0850               	movf	?___ftdiv,w
  1396  04CE  00DF               	movwf	___fttol@f1
  1397  04CF  0851               	movf	?___ftdiv+1,w
  1398  04D0  00E0               	movwf	___fttol@f1+1
  1399  04D1  0852               	movf	?___ftdiv+2,w
  1400  04D2  00E1               	movwf	___fttol@f1+2
  1401  04D3  258A  118A         	fcall	___fttol
  1402  04D5  0862               	movf	?___fttol+3,w
  1403  04D6  1683               	bsf	3,5	;RP0=1, select bank1
  1404  04D7  00C1               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1405  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  1406  04D9  0861               	movf	?___fttol+2,w
  1407  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  1408  04DB  00C0               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1409  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1410  04DD  0860               	movf	?___fttol+1,w
  1411  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  1412  04DF  00BF               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1413  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1414  04E1  085F               	movf	?___fttol,w
  1415  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  1416  04E3  00BE               	movwf	workCtr@power_temp^(0+128)	;volatile
  1417                           
  1418                           ;main.c: 871: power_ad = (unsigned int)(power_temp);
  1419  04E4  083F               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1420  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1421  04E6  00A7               	movwf	_power_ad+1	;volatile
  1422  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  1423  04E8  083E               	movf	workCtr@power_temp^(0+128),w	;volatile
  1424  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  1425  04EA  00A6               	movwf	_power_ad	;volatile
  1426  04EB                     l4964:	
  1427                           
  1428                           ;main.c: 872: }
  1429                           ;main.c: 873: if(workStep == 2 && power_ad < 3300)
  1430  04EB  3002               	movlw	2
  1431  04EC  0645               	xorwf	_workStep,w
  1432  04ED  1D03               	btfss	3,2
  1433  04EE  2CFF               	goto	l4974
  1434  04EF  300C               	movlw	12
  1435  04F0  0227               	subwf	_power_ad+1,w	;volatile
  1436  04F1  30E4               	movlw	228
  1437  04F2  1903               	skipnz
  1438  04F3  0226               	subwf	_power_ad,w	;volatile
  1439  04F4  1803               	skipnc
  1440  04F5  2CFF               	goto	l4974
  1441                           
  1442                           ;main.c: 874: {
  1443                           ;main.c: 875: if(++lowFanTime > 200)
  1444  04F6  30C9               	movlw	201
  1445  04F7  0ABC               	incf	_lowFanTime,f
  1446  04F8  023C               	subwf	_lowFanTime,w
  1447  04F9  1C03               	skipc
  1448  04FA  2D00               	goto	l4976
  1449                           
  1450                           ;main.c: 876: {
  1451                           ;main.c: 877: lowFanTime = 0;
  1452  04FB  01BC               	clrf	_lowFanTime
  1453                           
  1454                           ;main.c: 878: workStep = 1;
  1455  04FC  01C5               	clrf	_workStep
  1456  04FD  0AC5               	incf	_workStep,f
  1457  04FE  2D00               	goto	l4976
  1458  04FF                     l4974:	
  1459                           
  1460                           ;main.c: 881: else
  1461                           ;main.c: 882: {
  1462                           ;main.c: 883: lowFanTime = 0;
  1463  04FF  01BC               	clrf	_lowFanTime
  1464  0500                     l4976:	
  1465                           
  1466                           ;main.c: 884: }
  1467                           ;main.c: 885: if(power_ad < 2900)
  1468  0500  300B               	movlw	11
  1469  0501  0227               	subwf	_power_ad+1,w	;volatile
  1470  0502  3054               	movlw	84
  1471  0503  1903               	skipnz
  1472  0504  0226               	subwf	_power_ad,w	;volatile
  1473  0505  1803               	skipnc
  1474  0506  2D1A               	goto	l4984
  1475                           
  1476                           ;main.c: 886: {
  1477                           ;main.c: 887: if(++lowBatTime > 1000)
  1478  0507  1683               	bsf	3,5	;RP0=1, select bank1
  1479  0508  0AB6               	incf	_lowBatTime^(0+128),f
  1480  0509  1903               	skipnz
  1481  050A  0AB7               	incf	(_lowBatTime+1)^(0+128),f
  1482  050B  3003               	movlw	3
  1483  050C  0237               	subwf	(_lowBatTime+1)^(0+128),w
  1484  050D  30E9               	movlw	233
  1485  050E  1903               	skipnz
  1486  050F  0236               	subwf	_lowBatTime^(0+128),w
  1487  0510  1C03               	skipc
  1488  0511  2D1D               	goto	l4986
  1489                           
  1490                           ;main.c: 888: {
  1491                           ;main.c: 889: lowBatTime = 0;
  1492  0512  01B6               	clrf	_lowBatTime^(0+128)
  1493  0513  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1494                           
  1495                           ;main.c: 890: lowBatLock = 1;
  1496  0514  1283               	bcf	3,5	;RP0=0, select bank0
  1497  0515  01BD               	clrf	_lowBatLock
  1498  0516  0ABD               	incf	_lowBatLock,f
  1499                           
  1500                           ;main.c: 891: workStep = 0;
  1501  0517  01C5               	clrf	_workStep
  1502                           
  1503                           ;main.c: 892: wuhuaFlag = 0;
  1504  0518  01C4               	clrf	_wuhuaFlag
  1505  0519  2D1D               	goto	l4986
  1506  051A                     l4984:	
  1507                           
  1508                           ;main.c: 895: else
  1509                           ;main.c: 896: {
  1510                           ;main.c: 897: lowBatTime = 0;
  1511  051A  1683               	bsf	3,5	;RP0=1, select bank1
  1512  051B  01B6               	clrf	_lowBatTime^(0+128)
  1513  051C  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1514  051D                     l4986:	
  1515                           
  1516                           ;main.c: 898: }
  1517                           ;main.c: 899: if(firstTime > 0)
  1518  051D  1283               	bcf	3,5	;RP0=0, select bank0
  1519  051E  086E               	movf	_firstTime,w
  1520  051F  1903               	btfsc	3,2
  1521  0520  2D23               	goto	l4990
  1522                           
  1523                           ;main.c: 900: {
  1524                           ;main.c: 901: firstTime--;
  1525  0521  03EE               	decf	_firstTime,f
  1526                           
  1527                           ;main.c: 902: }
  1528  0522  0008               	return
  1529  0523                     l4990:	
  1530                           
  1531                           ;main.c: 903: else
  1532                           ;main.c: 904: {
  1533                           ;main.c: 905: keyLedCtr();
  1534  0523  2701  118A         	fcall	_keyLedCtr
  1535                           
  1536                           ;main.c: 906: fanCtr();
  1537  0525  2411  118A         	fcall	_fanCtr
  1538                           
  1539                           ;main.c: 907: wuhuaCtr();
  1540  0527  2F79               	ljmp	l4646
  1541  0528                     __end_of_workCtr:	
  1542  0528                     __ptext14:	
  1543 ;; *************** function ___ftdiv *****************
  1544 ;; Defined at:
  1545 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  f2              3    6[BANK0 ] float 
  1548 ;;  f1              3    9[BANK0 ] float 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  f3              3   16[BANK0 ] float 
  1551 ;;  sign            1   20[BANK0 ] unsigned char 
  1552 ;;  exp             1   19[BANK0 ] unsigned char 
  1553 ;;  cntr            1   15[BANK0 ] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  3    6[BANK0 ] float 
  1556 ;; Registers used:
  1557 ;;		wreg, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 300/0
  1560 ;;		On exit  : 300/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1563 ;;      Params:         0       6       0       0
  1564 ;;      Locals:         0       6       0       0
  1565 ;;      Temps:          0       3       0       0
  1566 ;;      Totals:         0      15       0       0
  1567 ;;Total ram usage:       15 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    3
  1570 ;; This function calls:
  1571 ;;		___ftpack
  1572 ;; This function is called by:
  1573 ;;		_workCtr
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           
  1578                           ;psect for function ___ftdiv
  1579  0528                     ___ftdiv:	
  1580                           
  1581                           ;incstack = 0
  1582                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1583  0528  0853               	movf	___ftdiv@f1,w
  1584  0529  00D6               	movwf	??___ftdiv
  1585  052A  0854               	movf	___ftdiv@f1+1,w
  1586  052B  00D7               	movwf	??___ftdiv+1
  1587  052C  0855               	movf	___ftdiv@f1+2,w
  1588  052D  00D8               	movwf	??___ftdiv+2
  1589  052E  1003               	clrc
  1590  052F  0D57               	rlf	??___ftdiv+1,w
  1591  0530  0D58               	rlf	??___ftdiv+2,w
  1592  0531  00DD               	movwf	___ftdiv@exp
  1593  0532  085D               	movf	___ftdiv@exp,w
  1594  0533  1D03               	btfss	3,2
  1595  0534  2D36               	goto	l4736
  1596  0535  2FC9               	ljmp	PL40	;call to abstracted procedure
  1597  0536                     l4736:	
  1598  0536  0850               	movf	___ftdiv@f2,w
  1599  0537  00D6               	movwf	??___ftdiv
  1600  0538  0851               	movf	___ftdiv@f2+1,w
  1601  0539  00D7               	movwf	??___ftdiv+1
  1602  053A  0852               	movf	___ftdiv@f2+2,w
  1603  053B  00D8               	movwf	??___ftdiv+2
  1604  053C  1003               	clrc
  1605  053D  0D57               	rlf	??___ftdiv+1,w
  1606  053E  0D58               	rlf	??___ftdiv+2,w
  1607  053F  00DE               	movwf	___ftdiv@sign
  1608  0540  085E               	movf	___ftdiv@sign,w
  1609  0541  1D03               	btfss	3,2
  1610  0542  2D44               	goto	l1616
  1611  0543  2FC9               	ljmp	PL40	;call to abstracted procedure
  1612  0544                     l1616:	
  1613  0544  3089               	movlw	137
  1614  0545  01DA               	clrf	___ftdiv@f3
  1615  0546  01DB               	clrf	___ftdiv@f3+1
  1616  0547  01DC               	clrf	___ftdiv@f3+2
  1617  0548  075E               	addwf	___ftdiv@sign,w
  1618  0549  00D6               	movwf	??___ftdiv
  1619  054A  02DD               	subwf	___ftdiv@exp,f
  1620  054B  0855               	movf	___ftdiv@f1+2,w
  1621  054C  00DE               	movwf	___ftdiv@sign
  1622  054D  0852               	movf	___ftdiv@f2+2,w
  1623  054E  06DE               	xorwf	___ftdiv@sign,f
  1624  054F  3080               	movlw	128
  1625  0550  05DE               	andwf	___ftdiv@sign,f
  1626  0551  3018               	movlw	24
  1627  0552  17D4               	bsf	___ftdiv@f1+1,7
  1628  0553  01D5               	clrf	___ftdiv@f1+2
  1629  0554  17D1               	bsf	___ftdiv@f2+1,7
  1630  0555  01D2               	clrf	___ftdiv@f2+2
  1631  0556  00D9               	movwf	___ftdiv@cntr
  1632  0557                     l4758:	
  1633  0557  1003               	clrc
  1634  0558  0DDA               	rlf	___ftdiv@f3,f
  1635  0559  0DDB               	rlf	___ftdiv@f3+1,f
  1636  055A  0DDC               	rlf	___ftdiv@f3+2,f
  1637  055B  0852               	movf	___ftdiv@f2+2,w
  1638  055C  0255               	subwf	___ftdiv@f1+2,w
  1639  055D  1D03               	skipz
  1640  055E  2D65               	goto	u5195
  1641  055F  0851               	movf	___ftdiv@f2+1,w
  1642  0560  0254               	subwf	___ftdiv@f1+1,w
  1643  0561  1D03               	skipz
  1644  0562  2D65               	goto	u5195
  1645  0563  0850               	movf	___ftdiv@f2,w
  1646  0564  0253               	subwf	___ftdiv@f1,w
  1647  0565                     u5195:	
  1648  0565  1C03               	skipc
  1649  0566  2D73               	goto	L4
  1650  0567  0850               	movf	___ftdiv@f2,w
  1651  0568  02D3               	subwf	___ftdiv@f1,f
  1652  0569  0851               	movf	___ftdiv@f2+1,w
  1653  056A  1C03               	skipc
  1654  056B  0F51               	incfsz	___ftdiv@f2+1,w
  1655  056C  02D4               	subwf	___ftdiv@f1+1,f
  1656  056D  0852               	movf	___ftdiv@f2+2,w
  1657  056E  1C03               	skipc
  1658  056F  0A52               	incf	___ftdiv@f2+2,w
  1659  0570  02D5               	subwf	___ftdiv@f1+2,f
  1660  0571  145A               	bsf	___ftdiv@f3,0
  1661  0572  1003               	clrc
  1662  0573                     L4:	
  1663  0573  0DD3               	rlf	___ftdiv@f1,f
  1664  0574  0DD4               	rlf	___ftdiv@f1+1,f
  1665  0575  0DD5               	rlf	___ftdiv@f1+2,f
  1666  0576  0BD9               	decfsz	___ftdiv@cntr,f
  1667  0577  2D57               	goto	l4758
  1668  0578  085A               	movf	___ftdiv@f3,w
  1669  0579  00F3               	movwf	___ftpack@arg
  1670  057A  085B               	movf	___ftdiv@f3+1,w
  1671  057B  00F4               	movwf	___ftpack@arg+1
  1672  057C  085C               	movf	___ftdiv@f3+2,w
  1673  057D  00F5               	movwf	___ftpack@arg+2
  1674  057E  085D               	movf	___ftdiv@exp,w
  1675  057F  00F6               	movwf	___ftpack@exp
  1676  0580  085E               	movf	___ftdiv@sign,w
  1677  0581  00F7               	movwf	___ftpack@sign
  1678  0582  25F3               	fcall	___ftpack
  1679  0583  0873               	movf	?___ftpack,w
  1680  0584  00D0               	movwf	?___ftdiv
  1681  0585  0874               	movf	?___ftpack+1,w
  1682  0586  00D1               	movwf	?___ftdiv+1
  1683  0587  0875               	movf	?___ftpack+2,w
  1684  0588  00D2               	movwf	?___ftdiv+2
  1685  0589  0008               	return
  1686  058A                     __end_of___ftdiv:	
  1687  058A                     __ptext13:	
  1688 ;; *************** function ___fttol *****************
  1689 ;; Defined at:
  1690 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  f1              3   21[BANK0 ] float 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  lval            4   29[BANK0 ] unsigned long 
  1695 ;;  exp1            1   33[BANK0 ] unsigned char 
  1696 ;;  sign1           1   28[BANK0 ] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  4   21[BANK0 ] long 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 300/0
  1703 ;;		On exit  : 300/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1706 ;;      Params:         0       4       0       0
  1707 ;;      Locals:         0       6       0       0
  1708 ;;      Temps:          0       3       0       0
  1709 ;;      Totals:         0      13       0       0
  1710 ;;Total ram usage:       13 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    2
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_workCtr
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function ___fttol
  1722  058A                     ___fttol:	
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1726  058A  27B8  118A         	fcall	PL24	;call to abstracted procedure
  1727  058C  1003               	clrc
  1728  058D  0D64               	rlf	??___fttol+1,w
  1729  058E  0D65               	rlf	??___fttol+2,w
  1730  058F  00EB               	movwf	___fttol@exp1
  1731  0590  086B               	movf	___fttol@exp1,w
  1732  0591  1D03               	btfss	3,2
  1733  0592  2D98               	goto	l4776
  1734  0593                     l4774:	
  1735  0593  01DF               	clrf	?___fttol
  1736  0594  01E0               	clrf	?___fttol+1
  1737  0595  01E1               	clrf	?___fttol+2
  1738  0596  01E2               	clrf	?___fttol+3
  1739  0597  0008               	return
  1740  0598                     l4776:	
  1741  0598  27B8  118A         	fcall	PL24	;call to abstracted procedure
  1742  059A  3017               	movlw	23
  1743  059B                     u5225:	
  1744  059B  1003               	clrc
  1745  059C  0CE5               	rrf	??___fttol+2,f
  1746  059D  0CE4               	rrf	??___fttol+1,f
  1747  059E  0CE3               	rrf	??___fttol,f
  1748  059F  3EFF               	addlw	-1
  1749  05A0  1D03               	skipz
  1750  05A1  2D9B               	goto	u5225
  1751  05A2  0863               	movf	??___fttol,w
  1752  05A3  00E6               	movwf	___fttol@sign1
  1753  05A4  17E0               	bsf	___fttol@f1+1,7
  1754  05A5  01E1               	clrf	___fttol@f1+2
  1755  05A6  085F               	movf	___fttol@f1,w
  1756  05A7  00E7               	movwf	___fttol@lval
  1757  05A8  0860               	movf	___fttol@f1+1,w
  1758  05A9  00E8               	movwf	___fttol@lval+1
  1759  05AA  0861               	movf	___fttol@f1+2,w
  1760  05AB  00E9               	movwf	___fttol@lval+2
  1761  05AC  308E               	movlw	142
  1762  05AD  01EA               	clrf	___fttol@lval+3
  1763  05AE  02EB               	subwf	___fttol@exp1,f
  1764  05AF  1FEB               	btfss	___fttol@exp1,7
  1765  05B0  2DBE               	goto	l4796
  1766  05B1  086B               	movf	___fttol@exp1,w
  1767  05B2  3A80               	xorlw	128
  1768  05B3  3E8F               	addlw	143
  1769  05B4  1C03               	btfss	3,0
  1770  05B5  2D93               	goto	l4774
  1771  05B6                     l4792:	
  1772  05B6  1003               	clrc
  1773  05B7  0CEA               	rrf	___fttol@lval+3,f
  1774  05B8  0CE9               	rrf	___fttol@lval+2,f
  1775  05B9  0CE8               	rrf	___fttol@lval+1,f
  1776  05BA  0CE7               	rrf	___fttol@lval,f
  1777  05BB  0FEB               	incfsz	___fttol@exp1,f
  1778  05BC  2DB6               	goto	l4792
  1779  05BD  2DCC               	goto	l4804
  1780  05BE                     l4796:	
  1781  05BE  3018               	movlw	24
  1782  05BF  026B               	subwf	___fttol@exp1,w
  1783  05C0  1803               	btfsc	3,0
  1784  05C1  2D93               	goto	l4774
  1785  05C2                     l4802:	
  1786  05C2  086B               	movf	___fttol@exp1,w
  1787  05C3  1903               	btfsc	3,2
  1788  05C4  2DCC               	goto	l4804
  1789  05C5  1003               	clrc
  1790  05C6  0DE7               	rlf	___fttol@lval,f
  1791  05C7  0DE8               	rlf	___fttol@lval+1,f
  1792  05C8  0DE9               	rlf	___fttol@lval+2,f
  1793  05C9  0DEA               	rlf	___fttol@lval+3,f
  1794  05CA  03EB               	decf	___fttol@exp1,f
  1795  05CB  2DC2               	goto	l4802
  1796  05CC                     l4804:	
  1797  05CC  0866               	movf	___fttol@sign1,w
  1798  05CD  1903               	btfsc	3,2
  1799  05CE  2DDA               	goto	l4808
  1800  05CF  09E7               	comf	___fttol@lval,f
  1801  05D0  09E8               	comf	___fttol@lval+1,f
  1802  05D1  09E9               	comf	___fttol@lval+2,f
  1803  05D2  09EA               	comf	___fttol@lval+3,f
  1804  05D3  0AE7               	incf	___fttol@lval,f
  1805  05D4  1903               	skipnz
  1806  05D5  0AE8               	incf	___fttol@lval+1,f
  1807  05D6  1903               	skipnz
  1808  05D7  0AE9               	incf	___fttol@lval+2,f
  1809  05D8  1903               	skipnz
  1810  05D9  0AEA               	incf	___fttol@lval+3,f
  1811  05DA                     l4808:	
  1812  05DA  086A               	movf	___fttol@lval+3,w
  1813  05DB  00E2               	movwf	?___fttol+3
  1814  05DC  0869               	movf	___fttol@lval+2,w
  1815  05DD  00E1               	movwf	?___fttol+2
  1816  05DE  0868               	movf	___fttol@lval+1,w
  1817  05DF  00E0               	movwf	?___fttol+1
  1818  05E0  0867               	movf	___fttol@lval,w
  1819  05E1  00DF               	movwf	?___fttol
  1820  05E2  0008               	return
  1821  05E3                     __end_of___fttol:	
  1822  05E3                     __ptext12:	
  1823 ;; *************** function ___lwtoft *****************
  1824 ;; Defined at:
  1825 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  c               2    3[BANK0 ] unsigned int 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;		None
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  3    3[BANK0 ] float 
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0, pclath, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 300/0
  1836 ;;		On exit  : 300/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1839 ;;      Params:         0       3       0       0
  1840 ;;      Locals:         0       0       0       0
  1841 ;;      Temps:          0       0       0       0
  1842 ;;      Totals:         0       3       0       0
  1843 ;;Total ram usage:        3 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; Hardware stack levels required when called:    3
  1846 ;; This function calls:
  1847 ;;		___ftpack
  1848 ;; This function is called by:
  1849 ;;		_workCtr
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           
  1854                           ;psect for function ___lwtoft
  1855  05E3                     ___lwtoft:	
  1856                           
  1857                           ;incstack = 0
  1858                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1859  05E3  084D               	movf	___lwtoft@c,w
  1860  05E4  00F3               	movwf	___ftpack@arg
  1861  05E5  084E               	movf	___lwtoft@c+1,w
  1862  05E6  00F4               	movwf	___ftpack@arg+1
  1863  05E7  308E               	movlw	142
  1864  05E8  01F5               	clrf	___ftpack@arg+2
  1865  05E9  00F6               	movwf	___ftpack@exp
  1866  05EA  01F7               	clrf	___ftpack@sign
  1867  05EB  25F3               	fcall	___ftpack
  1868  05EC  0873               	movf	?___ftpack,w
  1869  05ED  00CD               	movwf	?___lwtoft
  1870  05EE  0874               	movf	?___ftpack+1,w
  1871  05EF  00CE               	movwf	?___lwtoft+1
  1872  05F0  0875               	movf	?___ftpack+2,w
  1873  05F1  00CF               	movwf	?___lwtoft+2
  1874  05F2  0008               	return
  1875  05F3                     __end_of___lwtoft:	
  1876  05F3                     __ptext15:	
  1877 ;; *************** function ___ftpack *****************
  1878 ;; Defined at:
  1879 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  arg             3    3[COMMON] unsigned um
  1882 ;;  exp             1    6[COMMON] unsigned char 
  1883 ;;  sign            1    7[COMMON] unsigned char 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  3    3[COMMON] float 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 300/0
  1892 ;;		On exit  : 300/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1895 ;;      Params:         5       0       0       0
  1896 ;;      Locals:         0       0       0       0
  1897 ;;      Temps:          0       3       0       0
  1898 ;;      Totals:         5       3       0       0
  1899 ;;Total ram usage:        8 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    2
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		___ftdiv
  1906 ;;		___lwtoft
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           
  1911                           ;psect for function ___ftpack
  1912  05F3                     ___ftpack:	
  1913                           
  1914                           ;incstack = 0
  1915                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1916  05F3  0876               	movf	___ftpack@exp,w
  1917  05F4  1903               	btfsc	3,2
  1918  05F5  2DFB               	goto	l1562
  1919  05F6  0875               	movf	___ftpack@arg+2,w
  1920  05F7  0474               	iorwf	___ftpack@arg+1,w
  1921  05F8  0473               	iorwf	___ftpack@arg,w
  1922  05F9  1D03               	skipz
  1923  05FA  2E02               	goto	l4444
  1924  05FB                     l1562:	
  1925  05FB  01F3               	clrf	?___ftpack
  1926  05FC  01F4               	clrf	?___ftpack+1
  1927  05FD  01F5               	clrf	?___ftpack+2
  1928  05FE  0008               	return
  1929  05FF                     l4442:	
  1930  05FF  0AF6               	incf	___ftpack@exp,f
  1931  0600  27BF  118A         	fcall	PL36	;call to abstracted procedure
  1932  0602                     l4444:	
  1933  0602  30FE               	movlw	254
  1934  0603  0575               	andwf	___ftpack@arg+2,w
  1935  0604  1903               	btfsc	3,2
  1936  0605  2E0F               	goto	l4448
  1937  0606  2DFF               	goto	l4442
  1938  0607                     l4446:	
  1939  0607  0AF6               	incf	___ftpack@exp,f
  1940  0608  0AF3               	incf	___ftpack@arg,f
  1941  0609  1903               	skipnz
  1942  060A  0AF4               	incf	___ftpack@arg+1,f
  1943  060B  1903               	skipnz
  1944  060C  0AF5               	incf	___ftpack@arg+2,f
  1945  060D  27BF  118A         	fcall	PL36	;call to abstracted procedure
  1946  060F                     l4448:	
  1947  060F  30FF               	movlw	255
  1948  0610  0575               	andwf	___ftpack@arg+2,w
  1949  0611  1903               	btfsc	3,2
  1950  0612  2E1D               	goto	l4452
  1951  0613  2E07               	goto	l4446
  1952  0614                     l4454:	
  1953  0614  3002               	movlw	2
  1954  0615  0276               	subwf	___ftpack@exp,w
  1955  0616  1C03               	btfss	3,0
  1956  0617  2E1F               	goto	l1574
  1957  0618  03F6               	decf	___ftpack@exp,f
  1958  0619  1003               	clrc
  1959  061A  0DF3               	rlf	___ftpack@arg,f
  1960  061B  0DF4               	rlf	___ftpack@arg+1,f
  1961  061C  0DF5               	rlf	___ftpack@arg+2,f
  1962  061D                     l4452:	
  1963  061D  1FF4               	btfss	___ftpack@arg+1,7
  1964  061E  2E14               	goto	l4454
  1965  061F                     l1574:	
  1966  061F  1C76               	btfss	___ftpack@exp,0
  1967  0620  13F4               	bcf	___ftpack@arg+1,7
  1968  0621  1003               	clrc
  1969  0622  0CF6               	rrf	___ftpack@exp,f
  1970  0623  0876               	movf	___ftpack@exp,w
  1971  0624  00CC               	movwf	??___ftpack+2
  1972  0625  01CB               	clrf	??___ftpack+1
  1973  0626  01CA               	clrf	??___ftpack
  1974  0627  084A               	movf	??___ftpack,w
  1975  0628  04F3               	iorwf	___ftpack@arg,f
  1976  0629  084B               	movf	??___ftpack+1,w
  1977  062A  04F4               	iorwf	___ftpack@arg+1,f
  1978  062B  084C               	movf	??___ftpack+2,w
  1979  062C  04F5               	iorwf	___ftpack@arg+2,f
  1980  062D  0877               	movf	___ftpack@sign,w
  1981  062E  1D03               	btfss	3,2
  1982  062F  17F5               	bsf	___ftpack@arg+2,7
  1983  0630  0008               	return
  1984  0631                     __end_of___ftpack:	
  1985  0631                     __ptext11:	
  1986 ;; *************** function _ADC_Sample *****************
  1987 ;; Defined at:
  1988 ;;		line 303 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  adch            1    wreg     unsigned char 
  1991 ;;  adldo           1    3[COMMON] unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  adch            1    1[BANK0 ] unsigned char 
  1994 ;;  j               1    0[BANK0 ] unsigned char 
  1995 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1996 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1997 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1998 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1999 ;;  i               1    2[BANK0 ] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      unsigned char 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0
  2004 ;; Tracked objects:
  2005 ;;		On entry : 300/0
  2006 ;;		On exit  : 300/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2009 ;;      Params:         1       0       0       0
  2010 ;;      Locals:         0      13       0       0
  2011 ;;      Temps:          4       0       0       0
  2012 ;;      Totals:         5      13       0       0
  2013 ;;Total ram usage:       18 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    2
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_fanCtr
  2020 ;;		_workCtr
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           
  2025                           ;psect for function _ADC_Sample
  2026  0631                     _ADC_Sample:	
  2027                           
  2028                           ;incstack = 0
  2029                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2030                           ;ADC_Sample@adch stored from wreg
  2031  0631  00CB               	movwf	ADC_Sample@adch
  2032                           
  2033                           ;main.c: 305: volatile unsigned long adsum = 0;
  2034                           
  2035                           ;main.c: 306: volatile unsigned int admin = 0, admax = 0;
  2036  0632  27AF  118A         	fcall	PL18	;call to abstracted procedure
  2037                           
  2038                           ;main.c: 307: volatile unsigned int ad_temp = 0;
  2039  0634  01D5               	clrf	ADC_Sample@ad_temp	;volatile
  2040  0635  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  2041                           
  2042                           ;main.c: 309: if ((!LDO_EN) && (adldo & 0x04) )
  2043  0636  1683               	bsf	3,5	;RP0=1, select bank1
  2044  0637  1D16               	btfss	22,2	;volatile
  2045  0638  1D73               	btfss	ADC_Sample@adldo,2
  2046  0639  2E42               	goto	l4290
  2047                           
  2048                           ;main.c: 310: {
  2049                           ;main.c: 312: ADCON1 = adldo;
  2050  063A  0873               	movf	ADC_Sample@adldo,w
  2051  063B  0096               	movwf	22	;volatile
  2052                           
  2053                           ;main.c: 313: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2054  063C  3042               	movlw	66
  2055  063D  00F4               	movwf	??_ADC_Sample
  2056  063E                     u5757:	
  2057  063E  0BF4               	decfsz	??_ADC_Sample,f
  2058  063F  2E3E               	goto	u5757
  2059  0640  0000               	nop
  2060                           
  2061                           ;main.c: 314: }
  2062  0641  2E44               	goto	l4292
  2063  0642                     l4290:	
  2064                           
  2065                           ;main.c: 315: else
  2066                           ;main.c: 316: ADCON1 = adldo;
  2067  0642  0873               	movf	ADC_Sample@adldo,w
  2068  0643  0096               	movwf	22	;volatile
  2069  0644                     l4292:	
  2070                           
  2071                           ;main.c: 318: if(adch & 0x10)
  2072  0644  1283               	bcf	3,5	;RP0=0, select bank0
  2073  0645  1303               	bcf	3,6	;RP1=0, select bank0
  2074  0646  1E4B               	btfss	ADC_Sample@adch,4
  2075  0647  2E4D               	goto	l4300
  2076                           
  2077                           ;main.c: 319: {
  2078                           ;main.c: 320: CHS4 = 1;
  2079  0648  1683               	bsf	3,5	;RP0=1, select bank1
  2080  0649  1716               	bsf	22,6	;volatile
  2081                           
  2082                           ;main.c: 321: adch &= 0x0f;
  2083  064A  300F               	movlw	15
  2084  064B  1283               	bcf	3,5	;RP0=0, select bank0
  2085  064C  05CB               	andwf	ADC_Sample@adch,f
  2086  064D                     l4300:	
  2087                           
  2088                           ;main.c: 324: for (i = 0; i < 10; i++)
  2089  064D  01CC               	clrf	ADC_Sample@i
  2090  064E                     l4306:	
  2091                           
  2092                           ;main.c: 325: {
  2093                           ;main.c: 326: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2094  064E  084B               	movf	ADC_Sample@adch,w
  2095  064F  00F4               	movwf	??_ADC_Sample
  2096  0650  3001               	movlw	1
  2097  0651  1003               	clrc
  2098  0652                     L3:	
  2099  0652  0DF4               	rlf	??_ADC_Sample,f
  2100  0653  3EFF               	addlw	-1
  2101  0654  1003               	clrc
  2102  0655  1D03               	skipz
  2103  0656  2E52               	goto	L3
  2104  0657  0D74               	rlf	??_ADC_Sample,w
  2105  0658  3841               	iorlw	65
  2106  0659  1683               	bsf	3,5	;RP0=1, select bank1
  2107  065A  0095               	movwf	21	;volatile
  2108  065B  0000               	nop	;# 
  2109  065C  0000               	nop	;# 
  2110  065D  0000               	nop	;# 
  2111  065E  0000               	nop	;# 
  2112                           
  2113                           ;main.c: 331: GODONE = 1;
  2114  065F  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0660  1303               	bcf	3,6	;RP1=0, select bank1
  2116  0661  1495               	bsf	21,1	;volatile
  2117                           
  2118                           ;main.c: 333: unsigned char j = 0;
  2119  0662  1283               	bcf	3,5	;RP0=0, select bank0
  2120  0663  01CA               	clrf	ADC_Sample@j
  2121  0664                     l993:	
  2122                           ;main.c: 334: while (GODONE)
  2123                           
  2124  0664  1683               	bsf	3,5	;RP0=1, select bank1
  2125  0665  1C95               	btfss	21,1	;volatile
  2126  0666  2E6E               	goto	l4316
  2127                           
  2128                           ;main.c: 335: {
  2129                           ;main.c: 336: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2130  0667  2E68               	nop2	;2 cycle nop
  2131  0668  2E69               	nop2	;2 cycle nop
  2132                           
  2133                           ;main.c: 338: if (0 == (--j))
  2134  0669  1283               	bcf	3,5	;RP0=0, select bank0
  2135  066A  1303               	bcf	3,6	;RP1=0, select bank0
  2136  066B  0BCA               	decfsz	ADC_Sample@j,f
  2137  066C  2E64               	goto	l993
  2138                           
  2139                           ;main.c: 339: return 0;
  2140  066D  3400               	retlw	0
  2141  066E                     l4316:	
  2142                           
  2143                           ;main.c: 340: }
  2144                           ;main.c: 342: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2145  066E  0819               	movf	25,w	;volatile
  2146  066F  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0670  00D5               	movwf	ADC_Sample@ad_temp	;volatile
  2148  0671  01D6               	clrf	ADC_Sample@ad_temp+1	;volatile
  2149  0672  0ED5               	swapf	ADC_Sample@ad_temp,f	;volatile
  2150  0673  0ED6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2151  0674  30F0               	movlw	240
  2152  0675  05D6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2153  0676  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2154  0677  390F               	andlw	15
  2155  0678  04D6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2156  0679  30F0               	movlw	240
  2157  067A  05D5               	andwf	ADC_Sample@ad_temp,f	;volatile
  2158  067B  1683               	bsf	3,5	;RP0=1, select bank1
  2159  067C  0E18               	swapf	24,w	;volatile
  2160  067D  390F               	andlw	15
  2161  067E  1283               	bcf	3,5	;RP0=0, select bank0
  2162  067F  07D5               	addwf	ADC_Sample@ad_temp,f	;volatile
  2163  0680  1803               	skipnc
  2164  0681  0AD6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2165                           
  2166                           ;main.c: 344: if (0 == admax)
  2167  0682  0853               	movf	ADC_Sample@admax,w	;volatile
  2168  0683  0454               	iorwf	ADC_Sample@admax+1,w	;volatile
  2169  0684  1D03               	btfss	3,2
  2170  0685  2E89               	goto	l4324
  2171                           
  2172                           ;main.c: 345: {
  2173                           ;main.c: 346: admax = ad_temp;
  2174  0686  27C4  118A         	fcall	PL38	;call to abstracted procedure
  2175  0688  2E9C               	goto	l4330
  2176  0689                     l4324:	
  2177                           ;main.c: 348: }
  2178                           
  2179                           ;main.c: 347: admin = ad_temp;
  2180                           
  2181                           
  2182                           ;main.c: 349: else if (ad_temp > admax)
  2183  0689  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2184  068A  0254               	subwf	ADC_Sample@admax+1,w	;volatile
  2185  068B  1D03               	skipz
  2186  068C  2E8F               	goto	u4465
  2187  068D  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2188  068E  0253               	subwf	ADC_Sample@admax,w	;volatile
  2189  068F                     u4465:	
  2190  068F  1803               	skipnc
  2191  0690  2E94               	goto	l4328
  2192                           
  2193                           ;main.c: 350: admax = ad_temp;
  2194  0691  27C4  118A         	fcall	PL38	;call to abstracted procedure
  2195  0693  2EA0               	goto	l999
  2196  0694                     l4328:	
  2197                           
  2198                           ;main.c: 351: else if (ad_temp < admin)
  2199  0694  0852               	movf	ADC_Sample@admin+1,w	;volatile
  2200  0695  0256               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2201  0696  1D03               	skipz
  2202  0697  2E9A               	goto	u4475
  2203  0698  0851               	movf	ADC_Sample@admin,w	;volatile
  2204  0699  0255               	subwf	ADC_Sample@ad_temp,w	;volatile
  2205  069A                     u4475:	
  2206  069A  1803               	skipnc
  2207  069B  2EA0               	goto	l999
  2208  069C                     l4330:	
  2209                           
  2210                           ;main.c: 352: admin = ad_temp;
  2211  069C  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2212  069D  00D2               	movwf	ADC_Sample@admin+1	;volatile
  2213  069E  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2214  069F  00D1               	movwf	ADC_Sample@admin	;volatile
  2215  06A0                     l999:	
  2216                           
  2217                           ;main.c: 354: adsum += ad_temp;
  2218  06A0  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2219  06A1  00F4               	movwf	??_ADC_Sample
  2220  06A2  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2221  06A3  00F5               	movwf	??_ADC_Sample+1
  2222  06A4  01F6               	clrf	??_ADC_Sample+2
  2223  06A5  01F7               	clrf	??_ADC_Sample+3
  2224  06A6  0874               	movf	??_ADC_Sample,w
  2225  06A7  07CD               	addwf	ADC_Sample@adsum,f	;volatile
  2226  06A8  0875               	movf	??_ADC_Sample+1,w
  2227  06A9  1103               	clrz
  2228  06AA  1803               	skipnc
  2229  06AB  3E01               	addlw	1
  2230  06AC  1D03               	btfss	3,2
  2231  06AD  07CE               	addwf	ADC_Sample@adsum+1,f	;volatile
  2232  06AE  0876               	movf	??_ADC_Sample+2,w
  2233  06AF  1103               	clrz
  2234  06B0  1803               	skipnc
  2235  06B1  3E01               	addlw	1
  2236  06B2  1D03               	btfss	3,2
  2237  06B3  07CF               	addwf	ADC_Sample@adsum+2,f	;volatile
  2238  06B4  0877               	movf	??_ADC_Sample+3,w
  2239  06B5  1103               	clrz
  2240  06B6  1803               	skipnc
  2241  06B7  3E01               	addlw	1
  2242  06B8  1D03               	btfss	3,2
  2243  06B9  07D0               	addwf	ADC_Sample@adsum+3,f	;volatile
  2244  06BA  300A               	movlw	10
  2245  06BB  0ACC               	incf	ADC_Sample@i,f
  2246  06BC  024C               	subwf	ADC_Sample@i,w
  2247  06BD  1C03               	skipc
  2248  06BE  2E4E               	goto	l4306
  2249                           
  2250                           ;main.c: 355: }
  2251                           ;main.c: 356: adsum -= admax;
  2252  06BF  0853               	movf	ADC_Sample@admax,w	;volatile
  2253  06C0  00F4               	movwf	??_ADC_Sample
  2254  06C1  0854               	movf	ADC_Sample@admax+1,w	;volatile
  2255  06C2  27A0  118A         	fcall	PL6	;call to abstracted procedure
  2256  06C4  1C03               	skipc
  2257  06C5  0F77               	incfsz	??_ADC_Sample+3,w
  2258  06C6  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  2259                           
  2260                           ;main.c: 357: if (adsum >= admin)
  2261  06C7  0851               	movf	ADC_Sample@admin,w	;volatile
  2262  06C8  00F4               	movwf	??_ADC_Sample
  2263  06C9  0852               	movf	ADC_Sample@admin+1,w	;volatile
  2264  06CA  00F5               	movwf	??_ADC_Sample+1
  2265  06CB  01F6               	clrf	??_ADC_Sample+2
  2266  06CC  01F7               	clrf	??_ADC_Sample+3
  2267  06CD  0877               	movf	??_ADC_Sample+3,w
  2268  06CE  0250               	subwf	ADC_Sample@adsum+3,w	;volatile
  2269  06CF  1D03               	skipz
  2270  06D0  2EDB               	goto	u4515
  2271  06D1  0876               	movf	??_ADC_Sample+2,w
  2272  06D2  024F               	subwf	ADC_Sample@adsum+2,w	;volatile
  2273  06D3  1D03               	skipz
  2274  06D4  2EDB               	goto	u4515
  2275  06D5  0875               	movf	??_ADC_Sample+1,w
  2276  06D6  024E               	subwf	ADC_Sample@adsum+1,w	;volatile
  2277  06D7  1D03               	skipz
  2278  06D8  2EDB               	goto	u4515
  2279  06D9  0874               	movf	??_ADC_Sample,w
  2280  06DA  024D               	subwf	ADC_Sample@adsum,w	;volatile
  2281  06DB                     u4515:	
  2282  06DB  1C03               	skipc
  2283  06DC  2EE6               	goto	l1003
  2284                           
  2285                           ;main.c: 358: adsum -= admin;
  2286  06DD  0851               	movf	ADC_Sample@admin,w	;volatile
  2287  06DE  00F4               	movwf	??_ADC_Sample
  2288  06DF  0852               	movf	ADC_Sample@admin+1,w	;volatile
  2289  06E0  27A0  118A         	fcall	PL6	;call to abstracted procedure
  2290  06E2  1C03               	skipc
  2291  06E3  0F77               	incfsz	??_ADC_Sample+3,w
  2292  06E4  02D0               	subwf	ADC_Sample@adsum+3,f	;volatile
  2293  06E5  2EEA               	goto	l4340
  2294  06E6                     l1003:	
  2295                           
  2296                           ;main.c: 359: else
  2297                           ;main.c: 360: adsum = 0;
  2298  06E6  01CD               	clrf	ADC_Sample@adsum	;volatile
  2299  06E7  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2300  06E8  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2301  06E9  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2302  06EA                     l4340:	
  2303                           
  2304                           ;main.c: 362: adresult = adsum >> 3;
  2305  06EA  084D               	movf	ADC_Sample@adsum,w	;volatile
  2306  06EB  00F4               	movwf	??_ADC_Sample
  2307  06EC  084E               	movf	ADC_Sample@adsum+1,w	;volatile
  2308  06ED  00F5               	movwf	??_ADC_Sample+1
  2309  06EE  084F               	movf	ADC_Sample@adsum+2,w	;volatile
  2310  06EF  00F6               	movwf	??_ADC_Sample+2
  2311  06F0  0850               	movf	ADC_Sample@adsum+3,w	;volatile
  2312  06F1  00F7               	movwf	??_ADC_Sample+3
  2313  06F2  3003               	movlw	3
  2314  06F3                     u4535:	
  2315  06F3  1003               	clrc
  2316  06F4  0CF7               	rrf	??_ADC_Sample+3,f
  2317  06F5  0CF6               	rrf	??_ADC_Sample+2,f
  2318  06F6  0CF5               	rrf	??_ADC_Sample+1,f
  2319  06F7  0CF4               	rrf	??_ADC_Sample,f
  2320  06F8  3EFF               	addlw	-1
  2321  06F9  1D03               	skipz
  2322  06FA  2EF3               	goto	u4535
  2323  06FB  0875               	movf	??_ADC_Sample+1,w
  2324  06FC  00C9               	movwf	_adresult+1	;volatile
  2325  06FD  0874               	movf	??_ADC_Sample,w
  2326  06FE  00C8               	movwf	_adresult	;volatile
  2327                           
  2328                           ;main.c: 364: adsum = 0;
  2329                           
  2330                           ;main.c: 365: admin = 0;
  2331                           
  2332                           ;main.c: 366: admax = 0;
  2333  06FF  27AF               	fcall	PL18	;call to abstracted procedure
  2334                           
  2335                           ;main.c: 367: return 0xA5;
  2336  0700  34A5               	retlw	165
  2337  0701                     __end_of_ADC_Sample:	
  2338  0701                     __ptext5:	
  2339 ;; *************** function _keyLedCtr *****************
  2340 ;; Defined at:
  2341 ;;		line 694 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 300/0
  2352 ;;		On exit  : 300/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2355 ;;      Params:         0       0       0       0
  2356 ;;      Locals:         0       0       0       0
  2357 ;;      Temps:          0       0       0       0
  2358 ;;      Totals:         0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    3
  2362 ;; This function calls:
  2363 ;;		___lwmod
  2364 ;; This function is called by:
  2365 ;;		_workCtr
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _keyLedCtr
  2371  0701                     _keyLedCtr:	
  2372                           
  2373                           ;main.c: 696: if(shanshuoTime > 0)
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2377  0701  082C               	movf	_shanshuoTime,w
  2378  0702  042D               	iorwf	_shanshuoTime+1,w
  2379  0703  1903               	btfsc	3,2
  2380  0704  2F1D               	goto	l4576
  2381                           
  2382                           ;main.c: 697: {
  2383                           ;main.c: 698: shanshuoTime--;
  2384  0705  3001               	movlw	1
  2385  0706  02AC               	subwf	_shanshuoTime,f
  2386  0707  3000               	movlw	0
  2387  0708  1C03               	skipc
  2388  0709  03AD               	decf	_shanshuoTime+1,f
  2389  070A  02AD               	subwf	_shanshuoTime+1,f
  2390                           
  2391                           ;main.c: 699: if((shanshuoTime % 75) < 37)
  2392  070B  304B               	movlw	75
  2393  070C  00F3               	movwf	___lwmod@divisor
  2394  070D  01F4               	clrf	___lwmod@divisor+1
  2395  070E  082D               	movf	_shanshuoTime+1,w
  2396  070F  00F6               	movwf	___lwmod@dividend+1
  2397  0710  082C               	movf	_shanshuoTime,w
  2398  0711  00F5               	movwf	___lwmod@dividend
  2399  0712  2745  118A         	fcall	___lwmod
  2400  0714  3000               	movlw	0
  2401  0715  0274               	subwf	?___lwmod+1,w
  2402  0716  3025               	movlw	37
  2403  0717  1903               	skipnz
  2404  0718  0273               	subwf	?___lwmod,w
  2405  0719  1803               	skipnc
  2406  071A  2F20               	goto	l1106
  2407  071B                     l4574:	
  2408                           
  2409                           ;main.c: 700: {
  2410                           ;main.c: 701: fanKeyFlag = 0;
  2411  071B  01BA               	clrf	_fanKeyFlag
  2412                           
  2413                           ;main.c: 702: }
  2414  071C  2F22               	goto	l4582
  2415  071D                     l4576:	
  2416                           
  2417                           ;main.c: 708: else if(workStep > 0)
  2418  071D  0845               	movf	_workStep,w
  2419  071E  1903               	btfsc	3,2
  2420  071F  2F1B               	goto	l4574
  2421  0720                     l1106:	
  2422                           
  2423                           ;main.c: 703: else
  2424                           ;main.c: 704: {
  2425                           ;main.c: 705: fanKeyFlag = 1;
  2426  0720  01BA               	clrf	_fanKeyFlag
  2427  0721  0ABA               	incf	_fanKeyFlag,f
  2428  0722                     l4582:	
  2429                           
  2430                           ;main.c: 715: }
  2431                           ;main.c: 717: if(shanshuoTime2 > 0)
  2432  0722  082A               	movf	_shanshuoTime2,w
  2433  0723  042B               	iorwf	_shanshuoTime2+1,w
  2434  0724  1903               	btfsc	3,2
  2435  0725  2F41               	goto	l4590
  2436                           
  2437                           ;main.c: 718: {
  2438                           ;main.c: 719: shanshuoTime2--;
  2439  0726  3001               	movlw	1
  2440  0727  02AA               	subwf	_shanshuoTime2,f
  2441  0728  3000               	movlw	0
  2442  0729  1C03               	skipc
  2443  072A  03AB               	decf	_shanshuoTime2+1,f
  2444  072B  02AB               	subwf	_shanshuoTime2+1,f
  2445                           
  2446                           ;main.c: 720: if((shanshuoTime2 % 75) < 37)
  2447  072C  304B               	movlw	75
  2448  072D  00F3               	movwf	___lwmod@divisor
  2449  072E  01F4               	clrf	___lwmod@divisor+1
  2450  072F  082B               	movf	_shanshuoTime2+1,w
  2451  0730  00F6               	movwf	___lwmod@dividend+1
  2452  0731  082A               	movf	_shanshuoTime2,w
  2453  0732  00F5               	movwf	___lwmod@dividend
  2454  0733  2745  118A         	fcall	___lwmod
  2455  0735  3000               	movlw	0
  2456  0736  0274               	subwf	?___lwmod+1,w
  2457  0737  3025               	movlw	37
  2458  0738  1903               	skipnz
  2459  0739  0273               	subwf	?___lwmod,w
  2460  073A  1803               	skipnc
  2461  073B  2F3E               	goto	l1112
  2462  073C                     l4588:	
  2463                           
  2464                           ;main.c: 721: {
  2465                           ;main.c: 722: wuhuaKeyFlag = 0;
  2466  073C  01B9               	clrf	_wuhuaKeyFlag
  2467                           
  2468                           ;main.c: 723: }
  2469  073D  0008               	return
  2470  073E                     l1112:	
  2471                           
  2472                           ;main.c: 724: else
  2473                           ;main.c: 725: {
  2474                           ;main.c: 726: wuhuaKeyFlag = 1;
  2475  073E  01B9               	clrf	_wuhuaKeyFlag
  2476  073F  0AB9               	incf	_wuhuaKeyFlag,f
  2477  0740  0008               	return
  2478  0741                     l4590:	
  2479                           
  2480                           ;main.c: 729: else if(wuhuaFlag > 0)
  2481  0741  0844               	movf	_wuhuaFlag,w
  2482  0742  1D03               	btfss	3,2
  2483  0743  2F3E               	goto	l1112
  2484  0744  2F3C               	goto	l4588
  2485  0745                     __end_of_keyLedCtr:	
  2486  0745                     __ptext6:	
  2487 ;; *************** function ___lwmod *****************
  2488 ;; Defined at:
  2489 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  divisor         2    3[COMMON] unsigned int 
  2492 ;;  dividend        2    5[COMMON] unsigned int 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  counter         1    7[COMMON] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2    3[COMMON] unsigned int 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0
  2499 ;; Tracked objects:
  2500 ;;		On entry : 300/0
  2501 ;;		On exit  : 300/0
  2502 ;;		Unchanged: 300/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2504 ;;      Params:         4       0       0       0
  2505 ;;      Locals:         1       0       0       0
  2506 ;;      Temps:          0       0       0       0
  2507 ;;      Totals:         5       0       0       0
  2508 ;;Total ram usage:        5 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    2
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_keyLedCtr
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function ___lwmod
  2520  0745                     ___lwmod:	
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2524  0745  0873               	movf	___lwmod@divisor,w
  2525  0746  0474               	iorwf	___lwmod@divisor+1,w
  2526  0747  1903               	btfsc	3,2
  2527  0748  2F64               	goto	l4478
  2528  0749  01F7               	clrf	___lwmod@counter
  2529  074A                     L1:	
  2530  074A  0AF7               	incf	___lwmod@counter,f
  2531  074B  1BF4               	btfsc	___lwmod@divisor+1,7
  2532  074C  2F51               	goto	l4470
  2533  074D  1003               	clrc
  2534  074E  0DF3               	rlf	___lwmod@divisor,f
  2535  074F  0DF4               	rlf	___lwmod@divisor+1,f
  2536  0750  2F4A               	goto	L1
  2537  0751                     l4470:	
  2538  0751  0874               	movf	___lwmod@divisor+1,w
  2539  0752  0276               	subwf	___lwmod@dividend+1,w
  2540  0753  1D03               	skipz
  2541  0754  2F57               	goto	u4725
  2542  0755  0873               	movf	___lwmod@divisor,w
  2543  0756  0275               	subwf	___lwmod@dividend,w
  2544  0757                     u4725:	
  2545  0757  1C03               	skipc
  2546  0758  2F60               	goto	L2
  2547  0759  0873               	movf	___lwmod@divisor,w
  2548  075A  02F5               	subwf	___lwmod@dividend,f
  2549  075B  0874               	movf	___lwmod@divisor+1,w
  2550  075C  1C03               	skipc
  2551  075D  03F6               	decf	___lwmod@dividend+1,f
  2552  075E  02F6               	subwf	___lwmod@dividend+1,f
  2553  075F  1003               	clrc
  2554  0760                     L2:	
  2555  0760  0CF4               	rrf	___lwmod@divisor+1,f
  2556  0761  0CF3               	rrf	___lwmod@divisor,f
  2557  0762  0BF7               	decfsz	___lwmod@counter,f
  2558  0763  2F51               	goto	l4470
  2559  0764                     l4478:	
  2560  0764  0876               	movf	___lwmod@dividend+1,w
  2561  0765  00F4               	movwf	?___lwmod+1
  2562  0766  0875               	movf	___lwmod@dividend,w
  2563  0767  00F3               	movwf	?___lwmod
  2564  0768  0008               	return
  2565  0769                     __end_of___lwmod:	
  2566  0769                     __ptext9:	
  2567 ;; *************** function _fanInit *****************
  2568 ;; Defined at:
  2569 ;;		line 759 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0
  2578 ;; Tracked objects:
  2579 ;;		On entry : 300/0
  2580 ;;		On exit  : 300/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2583 ;;      Params:         0       0       0       0
  2584 ;;      Locals:         0       0       0       0
  2585 ;;      Temps:          0       0       0       0
  2586 ;;      Totals:         0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    2
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_fanCtr
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           
  2598                           ;psect for function _fanInit
  2599  0769                     _fanInit:	
  2600  0769                     l4368:	
  2601                           ;incstack = 0
  2602                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2603                           
  2604                           
  2605                           ;main.c: 762: PWMTH = 0x00;
  2606  0769  0198               	clrf	24	;volatile
  2607                           
  2608                           ;main.c: 763: PWMTL = 73;
  2609  076A  3049               	movlw	73
  2610  076B  0097               	movwf	23	;volatile
  2611                           
  2612                           ;main.c: 764: PWMD01H = 0x00;
  2613  076C  019E               	clrf	30	;volatile
  2614                           
  2615                           ;main.c: 765: PWMD1L = fanDuty;
  2616  076D  0843               	movf	_fanDuty,w
  2617  076E  009A               	movwf	26	;volatile
  2618                           
  2619                           ;main.c: 766: PWMCON1 = 0x40;
  2620  076F  3040               	movlw	64
  2621  0770  0096               	movwf	22	;volatile
  2622                           
  2623                           ;main.c: 767: PWMCON2 = 0x00;
  2624  0771  019D               	clrf	29	;volatile
  2625                           
  2626                           ;main.c: 768: PWMCON0 |= 0x22;
  2627  0772  3022               	movlw	34
  2628  0773  0495               	iorwf	21,f	;volatile
  2629  0774  0008               	return
  2630  0775                     __end_of_fanInit:	
  2631  0775                     __ptext8:	
  2632 ;; *************** function _fanStop *****************
  2633 ;; Defined at:
  2634 ;;		line 771 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;		None
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      void 
  2641 ;; Registers used:
  2642 ;;		status,2
  2643 ;; Tracked objects:
  2644 ;;		On entry : 300/0
  2645 ;;		On exit  : 300/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2648 ;;      Params:         0       0       0       0
  2649 ;;      Locals:         0       0       0       0
  2650 ;;      Temps:          0       0       0       0
  2651 ;;      Totals:         0       0       0       0
  2652 ;;Total ram usage:        0 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    2
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_fanCtr
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           
  2663                           ;psect for function _fanStop
  2664  0775                     _fanStop:	
  2665                           
  2666                           ;main.c: 773: PWMD1L = 0;
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _fanStop: [status,2]
  2670  0775  019A               	clrf	26	;volatile
  2671                           
  2672                           ;main.c: 774: PWMCON0 &= 0xFD;
  2673  0776  1095               	bcf	21,1	;volatile
  2674                           
  2675                           ;main.c: 775: PORTB &= 0x7F;
  2676  0777  1386               	bcf	6,7	;volatile
  2677  0778  0008               	return
  2678  0779                     __end_of_fanStop:	
  2679  0779                     __ptext2:	
  2680 ;; *************** function _wuhuaCtr *****************
  2681 ;; Defined at:
  2682 ;;		line 829 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0, pclath, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 200/0
  2693 ;;		On exit  : 200/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2696 ;;      Params:         0       0       0       0
  2697 ;;      Locals:         0       0       0       0
  2698 ;;      Temps:          0       0       0       0
  2699 ;;      Totals:         0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    3
  2703 ;; This function calls:
  2704 ;;		_pwmInit
  2705 ;;		_pwmStop
  2706 ;; This function is called by:
  2707 ;;		_workCtr
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           
  2712                           ;psect for function _wuhuaCtr
  2713  0779                     _wuhuaCtr:	
  2714  0779                     l4646:	
  2715                           ;incstack = 0
  2716                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2717                           
  2718                           
  2719                           ;main.c: 831: if(count1s == 0)
  2720  0779  1283               	bcf	3,5	;RP0=0, select bank0
  2721  077A  0846               	movf	_count1s,w
  2722  077B  1D03               	btfss	3,2
  2723  077C  2F82               	goto	l4652
  2724                           
  2725                           ;main.c: 832: {
  2726                           ;main.c: 833: if(++count10s >= 10)
  2727  077D  300A               	movlw	10
  2728  077E  0AC2               	incf	_count10s,f
  2729  077F  0242               	subwf	_count10s,w
  2730  0780  1803               	btfsc	3,0
  2731                           
  2732                           ;main.c: 834: {
  2733                           ;main.c: 835: count10s = 0;
  2734  0781  01C2               	clrf	_count10s
  2735  0782                     l4652:	
  2736                           
  2737                           ;main.c: 836: }
  2738                           ;main.c: 837: }
  2739                           ;main.c: 838: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2740  0782  0344               	decf	_wuhuaFlag,w
  2741  0783  1903               	btfsc	3,2
  2742  0784  2F8D               	goto	l4658
  2743  0785  3002               	movlw	2
  2744  0786  0644               	xorwf	_wuhuaFlag,w
  2745  0787  1D03               	btfss	3,2
  2746  0788  2F8E               	goto	l4660
  2747  0789  3005               	movlw	5
  2748  078A  0242               	subwf	_count10s,w
  2749  078B  1803               	skipnc
  2750  078C  2F8E               	goto	l4660
  2751  078D                     l4658:	
  2752                           
  2753                           ;main.c: 839: {
  2754                           ;main.c: 840: pwmInit();
  2755  078D  2F8F               	ljmp	l4352
  2756  078E                     l4660:	
  2757                           ;main.c: 855: }
  2758                           
  2759                           
  2760                           ;main.c: 856: else
  2761                           ;main.c: 857: {
  2762                           ;main.c: 858: pwmStop();
  2763  078E  2F9B               	ljmp	l4362
  2764  078F                     __end_of_wuhuaCtr:	
  2765  078F                     __ptext4:	
  2766 ;; *************** function _pwmInit *****************
  2767 ;; Defined at:
  2768 ;;		line 740 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;		None
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 300/0
  2779 ;;		On exit  : 300/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2782 ;;      Params:         0       0       0       0
  2783 ;;      Locals:         0       0       0       0
  2784 ;;      Temps:          0       0       0       0
  2785 ;;      Totals:         0       0       0       0
  2786 ;;Total ram usage:        0 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; Hardware stack levels required when called:    2
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_wuhuaCtr
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _pwmInit
  2798  078F                     _pwmInit:	
  2799  078F                     l4352:	
  2800                           ;incstack = 0
  2801                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2802                           
  2803                           
  2804                           ;main.c: 743: PWMTH = 0x00;
  2805  078F  0198               	clrf	24	;volatile
  2806                           
  2807                           ;main.c: 744: PWMTL = 73;
  2808  0790  3049               	movlw	73
  2809  0791  0097               	movwf	23	;volatile
  2810                           
  2811                           ;main.c: 745: PWMD01H = 0x00;
  2812  0792  019E               	clrf	30	;volatile
  2813                           
  2814                           ;main.c: 746: PWMD0L = 32;
  2815  0793  3020               	movlw	32
  2816  0794  0099               	movwf	25	;volatile
  2817                           
  2818                           ;main.c: 747: PWMCON1 = 0x40;
  2819  0795  3040               	movlw	64
  2820  0796  0096               	movwf	22	;volatile
  2821                           
  2822                           ;main.c: 748: PWMCON2 = 0x00;
  2823  0797  019D               	clrf	29	;volatile
  2824                           
  2825                           ;main.c: 749: PWMCON0 |= 0x21;
  2826  0798  3021               	movlw	33
  2827  0799  0495               	iorwf	21,f	;volatile
  2828  079A  0008               	return
  2829  079B                     __end_of_pwmInit:	
  2830  079B                     __ptext3:	
  2831 ;; *************** function _pwmStop *****************
  2832 ;; Defined at:
  2833 ;;		line 752 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		status,2
  2842 ;; Tracked objects:
  2843 ;;		On entry : 300/0
  2844 ;;		On exit  : 300/100
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2847 ;;      Params:         0       0       0       0
  2848 ;;      Locals:         0       0       0       0
  2849 ;;      Temps:          0       0       0       0
  2850 ;;      Totals:         0       0       0       0
  2851 ;;Total ram usage:        0 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    2
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_wuhuaCtr
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           
  2862                           ;psect for function _pwmStop
  2863  079B                     _pwmStop:	
  2864  079B                     l4362:	
  2865                           ;incstack = 0
  2866                           ; Regs used in _pwmStop: [status,2]
  2867                           
  2868                           
  2869                           ;main.c: 754: PWMD0L = 0;
  2870  079B  0199               	clrf	25	;volatile
  2871                           
  2872                           ;main.c: 755: PWMCON0 &= 0xFE;
  2873  079C  1015               	bcf	21,0	;volatile
  2874                           
  2875                           ;main.c: 756: PORTA &= 0xDF;
  2876  079D  1683               	bsf	3,5	;RP0=1, select bank1
  2877  079E  1286               	bcf	6,5	;volatile
  2878  079F  0008               	return
  2879  07A0                     __end_of_pwmStop:	
  2880  07A0                     PL6:	
  2881  07A0  00F5               	movwf	??_ADC_Sample+1
  2882  07A1  01F6               	clrf	??_ADC_Sample+2
  2883  07A2  01F7               	clrf	??_ADC_Sample+3
  2884  07A3  0874               	movf	??_ADC_Sample,w
  2885  07A4  02CD               	subwf	ADC_Sample@adsum,f	;volatile
  2886  07A5  0875               	movf	??_ADC_Sample+1,w
  2887  07A6  1C03               	skipc
  2888  07A7  0F75               	incfsz	??_ADC_Sample+1,w
  2889  07A8  02CE               	subwf	ADC_Sample@adsum+1,f	;volatile
  2890  07A9  0876               	movf	??_ADC_Sample+2,w
  2891  07AA  1C03               	skipc
  2892  07AB  0F76               	incfsz	??_ADC_Sample+2,w
  2893  07AC  02CF               	subwf	ADC_Sample@adsum+2,f	;volatile
  2894  07AD  0877               	movf	??_ADC_Sample+3,w
  2895  07AE  0008               	return
  2896  07AF                     __end_ofPL6:	
  2897  07AF                     PL18:	
  2898  07AF  01CD               	clrf	ADC_Sample@adsum	;volatile
  2899  07B0  01CE               	clrf	ADC_Sample@adsum+1	;volatile
  2900  07B1  01CF               	clrf	ADC_Sample@adsum+2	;volatile
  2901  07B2  01D0               	clrf	ADC_Sample@adsum+3	;volatile
  2902  07B3  01D1               	clrf	ADC_Sample@admin	;volatile
  2903  07B4  01D2               	clrf	ADC_Sample@admin+1	;volatile
  2904  07B5  01D3               	clrf	ADC_Sample@admax	;volatile
  2905  07B6  01D4               	clrf	ADC_Sample@admax+1	;volatile
  2906  07B7  0008               	return
  2907  07B8                     __end_ofPL18:	
  2908  07B8                     PL24:	
  2909  07B8  085F               	movf	___fttol@f1,w
  2910  07B9  00E3               	movwf	??___fttol
  2911  07BA  0860               	movf	___fttol@f1+1,w
  2912  07BB  00E4               	movwf	??___fttol+1
  2913  07BC  0861               	movf	___fttol@f1+2,w
  2914  07BD  00E5               	movwf	??___fttol+2
  2915  07BE  0008               	return
  2916  07BF                     __end_ofPL24:	
  2917  07BF                     PL36:	
  2918  07BF  1003               	clrc
  2919  07C0  0CF5               	rrf	___ftpack@arg+2,f
  2920  07C1  0CF4               	rrf	___ftpack@arg+1,f
  2921  07C2  0CF3               	rrf	___ftpack@arg,f
  2922  07C3  0008               	return
  2923  07C4                     __end_ofPL36:	
  2924  07C4                     PL38:	
  2925  07C4  0856               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2926  07C5  00D4               	movwf	ADC_Sample@admax+1	;volatile
  2927  07C6  0855               	movf	ADC_Sample@ad_temp,w	;volatile
  2928  07C7  00D3               	movwf	ADC_Sample@admax	;volatile
  2929  07C8  0008               	return
  2930  07C9                     __end_ofPL38:	
  2931  07C9                     PL40:	
  2932  07C9  01D0               	clrf	?___ftdiv
  2933  07CA  01D1               	clrf	?___ftdiv+1
  2934  07CB  01D2               	clrf	?___ftdiv+2
  2935  07CC  0008               	return
  2936  07CD                     __end_ofPL40:	
  2937                           
  2938                           	psect	text16
  2939  0F29                     __ptext16:	
  2940 ;; *************** function _setBatStep *****************
  2941 ;; Defined at:
  2942 ;;		line 551 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  tempSubBatTi    2    3[BANK0 ] unsigned int 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, pclath, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 200/0
  2953 ;;		On exit  : 300/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2956 ;;      Params:         0       0       0       0
  2957 ;;      Locals:         0       2       0       0
  2958 ;;      Temps:          0       0       0       0
  2959 ;;      Totals:         0       2       0       0
  2960 ;;Total ram usage:        2 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    3
  2963 ;; This function calls:
  2964 ;;		___lwdiv
  2965 ;; This function is called by:
  2966 ;;		_main
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           
  2971                           ;psect for function _setBatStep
  2972  0F29                     _setBatStep:	
  2973                           
  2974                           ;main.c: 553: if(lowBatLock == 1)
  2975                           
  2976                           ;incstack = 0
  2977                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  2978  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0F2A  0B3D               	decfsz	_lowBatLock,w
  2980  0F2B  2F2F               	goto	l4892
  2981                           
  2982                           ;main.c: 554: {
  2983                           ;main.c: 555: showBatStep = 0;
  2984  0F2C  01B8               	clrf	_showBatStep
  2985                           
  2986                           ;main.c: 556: curBatStep = 0;
  2987  0F2D  01B7               	clrf	_curBatStep
  2988                           
  2989                           ;main.c: 557: }
  2990  0F2E  0008               	return
  2991  0F2F                     l4892:	
  2992                           
  2993                           ;main.c: 558: else if(power_ad < 2800)
  2994  0F2F  300A               	movlw	10
  2995  0F30  0227               	subwf	_power_ad+1,w	;volatile
  2996  0F31  30F0               	movlw	240
  2997  0F32  1903               	skipnz
  2998  0F33  0226               	subwf	_power_ad,w	;volatile
  2999  0F34  1803               	skipnc
  3000  0F35  2F4C               	goto	l4904
  3001                           
  3002                           ;main.c: 559: {
  3003                           ;main.c: 560: if(count10s == 0 && count1s == 0)
  3004  0F36  0842               	movf	_count10s,w
  3005  0F37  1D03               	btfss	3,2
  3006  0F38  2F49               	goto	l1069
  3007  0F39  0846               	movf	_count1s,w
  3008  0F3A  1D03               	btfss	3,2
  3009  0F3B  2F49               	goto	l1069
  3010                           
  3011                           ;main.c: 561: {
  3012                           ;main.c: 562: if(showBatStep > 1)
  3013  0F3C  3002               	movlw	2
  3014  0F3D  0238               	subwf	_showBatStep,w
  3015  0F3E  1C03               	skipc
  3016  0F3F  2F45               	goto	l1070
  3017                           
  3018                           ;main.c: 563: {
  3019                           ;main.c: 564: if(chrgFlag == 0)
  3020  0F40  0840               	movf	_chrgFlag,w
  3021  0F41  1D03               	btfss	3,2
  3022  0F42  2F47               	goto	l1072
  3023                           
  3024                           ;main.c: 565: showBatStep--;
  3025  0F43  03B8               	decf	_showBatStep,f
  3026  0F44  2F47               	goto	l1072
  3027  0F45                     l1070:	
  3028                           
  3029                           ;main.c: 567: else
  3030                           ;main.c: 568: {
  3031                           ;main.c: 569: showBatStep = 1;
  3032  0F45  01B8               	clrf	_showBatStep
  3033  0F46  0AB8               	incf	_showBatStep,f
  3034  0F47                     l1072:	
  3035                           
  3036                           ;main.c: 570: }
  3037                           ;main.c: 571: curBatStep = 1;
  3038  0F47  01B7               	clrf	_curBatStep
  3039  0F48  0AB7               	incf	_curBatStep,f
  3040  0F49                     l1069:	
  3041                           
  3042                           ;main.c: 572: }
  3043                           ;main.c: 573: curBatStep = 1;
  3044  0F49  01B7               	clrf	_curBatStep
  3045  0F4A  0AB7               	incf	_curBatStep,f
  3046                           
  3047                           ;main.c: 574: }
  3048  0F4B  0008               	return
  3049  0F4C                     l4904:	
  3050                           
  3051                           ;main.c: 575: else
  3052                           ;main.c: 576: {
  3053                           ;main.c: 577: if(power_ad < 3600)
  3054  0F4C  300E               	movlw	14
  3055  0F4D  0227               	subwf	_power_ad+1,w	;volatile
  3056  0F4E  3010               	movlw	16
  3057  0F4F  1903               	skipnz
  3058  0F50  0226               	subwf	_power_ad,w	;volatile
  3059  0F51  1803               	skipnc
  3060  0F52  2F62               	goto	l4908
  3061                           
  3062                           ;main.c: 578: {
  3063                           ;main.c: 579: curBatStep = (power_ad - 2800)/80;
  3064  0F53  3050               	movlw	80
  3065  0F54  00F3               	movwf	___lwdiv@divisor
  3066  0F55  01F4               	clrf	___lwdiv@divisor+1
  3067  0F56  0826               	movf	_power_ad,w	;volatile
  3068  0F57  3E10               	addlw	16
  3069  0F58  00F5               	movwf	___lwdiv@dividend
  3070  0F59  0827               	movf	_power_ad+1,w	;volatile
  3071  0F5A  1803               	skipnc
  3072  0F5B  3E01               	addlw	1
  3073  0F5C  3EF5               	addlw	245
  3074  0F5D  00F6               	movwf	___lwdiv@dividend+1
  3075  0F5E  27D6  158A         	fcall	___lwdiv
  3076  0F60  0873               	movf	?___lwdiv,w
  3077  0F61  2F71               	goto	L5
  3078  0F62                     l4908:	
  3079                           ;main.c: 580: }
  3080                           
  3081                           
  3082                           ;main.c: 581: else
  3083                           ;main.c: 582: {
  3084                           ;main.c: 583: curBatStep = 20 + ((power_ad - 3600)/5);
  3085  0F62  3005               	movlw	5
  3086  0F63  00F3               	movwf	___lwdiv@divisor
  3087  0F64  01F4               	clrf	___lwdiv@divisor+1
  3088  0F65  0826               	movf	_power_ad,w	;volatile
  3089  0F66  3EF0               	addlw	240
  3090  0F67  00F5               	movwf	___lwdiv@dividend
  3091  0F68  0827               	movf	_power_ad+1,w	;volatile
  3092  0F69  1803               	skipnc
  3093  0F6A  3E01               	addlw	1
  3094  0F6B  3EF1               	addlw	241
  3095  0F6C  00F6               	movwf	___lwdiv@dividend+1
  3096  0F6D  27D6  158A         	fcall	___lwdiv
  3097  0F6F  0873               	movf	?___lwdiv,w
  3098  0F70  3E14               	addlw	20
  3099  0F71                     L5:	
  3100  0F71  00B7               	movwf	_curBatStep
  3101                           
  3102                           ;main.c: 584: }
  3103                           ;main.c: 585: if(curBatStep > 99)
  3104  0F72  3064               	movlw	100
  3105  0F73  0237               	subwf	_curBatStep,w
  3106  0F74  1C03               	skipc
  3107  0F75  2F78               	goto	l4914
  3108                           
  3109                           ;main.c: 586: {
  3110                           ;main.c: 587: curBatStep = 99;
  3111  0F76  3063               	movlw	99
  3112  0F77  00B7               	movwf	_curBatStep
  3113  0F78                     l4914:	
  3114                           
  3115                           ;main.c: 588: }
  3116                           ;main.c: 590: if(chrgFlag)
  3117  0F78  0840               	movf	_chrgFlag,w
  3118  0F79  1903               	btfsc	3,2
  3119  0F7A  2FAF               	goto	l4940
  3120                           
  3121                           ;main.c: 591: {
  3122                           ;main.c: 592: if(chrgFullFlag && showBatStep < 99)
  3123  0F7B  083F               	movf	_chrgFullFlag,w
  3124  0F7C  1903               	btfsc	3,2
  3125  0F7D  2F92               	goto	l4926
  3126  0F7E  3063               	movlw	99
  3127  0F7F  0238               	subwf	_showBatStep,w
  3128  0F80  1803               	skipnc
  3129  0F81  2F92               	goto	l4926
  3130                           
  3131                           ;main.c: 593: {
  3132                           ;main.c: 594: if(++count15s >= 7500)
  3133  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3134  0F83  0AB4               	incf	_count15s^(0+128),f
  3135  0F84  1903               	skipnz
  3136  0F85  0AB5               	incf	(_count15s+1)^(0+128),f
  3137  0F86  301D               	movlw	29
  3138  0F87  0235               	subwf	(_count15s+1)^(0+128),w
  3139  0F88  304C               	movlw	76
  3140  0F89  1903               	skipnz
  3141  0F8A  0234               	subwf	_count15s^(0+128),w
  3142  0F8B  1C03               	skipc
  3143  0F8C  2F95               	goto	l4928
  3144                           
  3145                           ;main.c: 595: {
  3146                           ;main.c: 596: count15s = 0;
  3147  0F8D  01B4               	clrf	_count15s^(0+128)
  3148  0F8E  01B5               	clrf	(_count15s+1)^(0+128)
  3149                           
  3150                           ;main.c: 597: showBatStep++;
  3151  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0F90  0AB8               	incf	_showBatStep,f
  3153  0F91  2F95               	goto	l4928
  3154  0F92                     l4926:	
  3155                           
  3156                           ;main.c: 600: else
  3157                           ;main.c: 601: {
  3158                           ;main.c: 602: count15s = 0;
  3159  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0F93  01B4               	clrf	_count15s^(0+128)
  3161  0F94  01B5               	clrf	(_count15s+1)^(0+128)
  3162  0F95                     l4928:	
  3163                           
  3164                           ;main.c: 603: }
  3165                           ;main.c: 604: if(curBatStep > showBatStep)
  3166  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0F96  0837               	movf	_curBatStep,w
  3168  0F97  0238               	subwf	_showBatStep,w
  3169  0F98  1803               	skipnc
  3170  0F99  2FAC               	goto	l4938
  3171                           
  3172                           ;main.c: 605: {
  3173                           ;main.c: 606: if(++count30s >= 15000 && showBatStep < 99)
  3174  0F9A  0AA8               	incf	_count30s,f
  3175  0F9B  1903               	skipnz
  3176  0F9C  0AA9               	incf	_count30s+1,f
  3177  0F9D  303A               	movlw	58
  3178  0F9E  0229               	subwf	_count30s+1,w
  3179  0F9F  3098               	movlw	152
  3180  0FA0  1903               	skipnz
  3181  0FA1  0228               	subwf	_count30s,w
  3182  0FA2  1C03               	skipc
  3183  0FA3  0008               	return
  3184  0FA4  3063               	movlw	99
  3185  0FA5  0238               	subwf	_showBatStep,w
  3186  0FA6  1803               	skipnc
  3187  0FA7  0008               	return
  3188                           
  3189                           ;main.c: 607: {
  3190                           ;main.c: 608: count30s = 0;
  3191  0FA8  01A8               	clrf	_count30s
  3192  0FA9  01A9               	clrf	_count30s+1
  3193                           
  3194                           ;main.c: 609: showBatStep++;
  3195  0FAA  0AB8               	incf	_showBatStep,f
  3196  0FAB  0008               	return
  3197  0FAC                     l4938:	
  3198                           
  3199                           ;main.c: 613: else
  3200                           ;main.c: 614: {
  3201                           ;main.c: 615: count30s = 0;
  3202  0FAC  01A8               	clrf	_count30s
  3203  0FAD  01A9               	clrf	_count30s+1
  3204  0FAE  0008               	return
  3205  0FAF                     l4940:	
  3206                           
  3207                           ;main.c: 618: else
  3208                           ;main.c: 619: {
  3209                           ;main.c: 620: unsigned int tempSubBatTime = 15000;
  3210  0FAF  3098               	movlw	152
  3211  0FB0  00CD               	movwf	setBatStep@tempSubBatTime
  3212  0FB1  303A               	movlw	58
  3213  0FB2  00CE               	movwf	setBatStep@tempSubBatTime+1
  3214                           
  3215                           ;main.c: 621: if(showBatStep < 40)
  3216  0FB3  3028               	movlw	40
  3217  0FB4  0238               	subwf	_showBatStep,w
  3218  0FB5  1803               	skipnc
  3219  0FB6  2FBB               	goto	l1085
  3220                           
  3221                           ;main.c: 622: {
  3222                           ;main.c: 623: tempSubBatTime = 8000;
  3223  0FB7  3040               	movlw	64
  3224  0FB8  00CD               	movwf	setBatStep@tempSubBatTime
  3225  0FB9  301F               	movlw	31
  3226  0FBA  00CE               	movwf	setBatStep@tempSubBatTime+1
  3227  0FBB                     l1085:	
  3228                           
  3229                           ;main.c: 624: }
  3230                           ;main.c: 625: if(curBatStep < showBatStep && showBatStep > 1)
  3231  0FBB  0838               	movf	_showBatStep,w
  3232  0FBC  0237               	subwf	_curBatStep,w
  3233  0FBD  1803               	skipnc
  3234  0FBE  2FAC               	goto	l4938
  3235  0FBF  3002               	movlw	2
  3236  0FC0  0238               	subwf	_showBatStep,w
  3237  0FC1  1C03               	skipc
  3238  0FC2  2FAC               	goto	l4938
  3239                           
  3240                           ;main.c: 626: {
  3241                           ;main.c: 627: if(++count30s >= tempSubBatTime && showBatStep > 1)
  3242  0FC3  0AA8               	incf	_count30s,f
  3243  0FC4  1903               	skipnz
  3244  0FC5  0AA9               	incf	_count30s+1,f
  3245  0FC6  084E               	movf	setBatStep@tempSubBatTime+1,w
  3246  0FC7  0229               	subwf	_count30s+1,w
  3247  0FC8  1D03               	skipz
  3248  0FC9  2FCC               	goto	u5545
  3249  0FCA  084D               	movf	setBatStep@tempSubBatTime,w
  3250  0FCB  0228               	subwf	_count30s,w
  3251  0FCC                     u5545:	
  3252  0FCC  1C03               	skipc
  3253  0FCD  0008               	return
  3254  0FCE  3002               	movlw	2
  3255  0FCF  0238               	subwf	_showBatStep,w
  3256  0FD0  1C03               	skipc
  3257  0FD1  0008               	return
  3258                           
  3259                           ;main.c: 628: {
  3260                           ;main.c: 629: count30s = 0;
  3261  0FD2  01A8               	clrf	_count30s
  3262  0FD3  01A9               	clrf	_count30s+1
  3263                           
  3264                           ;main.c: 630: showBatStep--;
  3265  0FD4  03B8               	decf	_showBatStep,f
  3266  0FD5  0008               	return
  3267  0FD6                     __end_of_setBatStep:	
  3268  0FD6                     __ptext17:	
  3269 ;; *************** function ___lwdiv *****************
  3270 ;; Defined at:
  3271 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  divisor         2    3[COMMON] unsigned int 
  3274 ;;  dividend        2    5[COMMON] unsigned int 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  quotient        2    1[BANK0 ] unsigned int 
  3277 ;;  counter         1    0[BANK0 ] unsigned char 
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  2    3[COMMON] unsigned int 
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0
  3282 ;; Tracked objects:
  3283 ;;		On entry : 300/0
  3284 ;;		On exit  : 300/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3287 ;;      Params:         4       0       0       0
  3288 ;;      Locals:         0       3       0       0
  3289 ;;      Temps:          0       0       0       0
  3290 ;;      Totals:         4       3       0       0
  3291 ;;Total ram usage:        7 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    2
  3294 ;; This function calls:
  3295 ;;		Nothing
  3296 ;; This function is called by:
  3297 ;;		_setBatStep
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function ___lwdiv
  3303  0FD6                     ___lwdiv:	
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3307  0FD6  01CB               	clrf	___lwdiv@quotient
  3308  0FD7  01CC               	clrf	___lwdiv@quotient+1
  3309  0FD8  0873               	movf	___lwdiv@divisor,w
  3310  0FD9  0474               	iorwf	___lwdiv@divisor+1,w
  3311  0FDA  1903               	btfsc	3,2
  3312  0FDB  2FFB               	goto	l4834
  3313  0FDC  01CA               	clrf	___lwdiv@counter
  3314  0FDD                     L6:	
  3315  0FDD  0ACA               	incf	___lwdiv@counter,f
  3316  0FDE  1BF4               	btfsc	___lwdiv@divisor+1,7
  3317  0FDF  2FE4               	goto	l4822
  3318  0FE0  1003               	clrc
  3319  0FE1  0DF3               	rlf	___lwdiv@divisor,f
  3320  0FE2  0DF4               	rlf	___lwdiv@divisor+1,f
  3321  0FE3  2FDD               	goto	L6
  3322  0FE4                     l4822:	
  3323  0FE4  1003               	clrc
  3324  0FE5  0DCB               	rlf	___lwdiv@quotient,f
  3325  0FE6  0DCC               	rlf	___lwdiv@quotient+1,f
  3326  0FE7  0874               	movf	___lwdiv@divisor+1,w
  3327  0FE8  0276               	subwf	___lwdiv@dividend+1,w
  3328  0FE9  1D03               	skipz
  3329  0FEA  2FED               	goto	u5315
  3330  0FEB  0873               	movf	___lwdiv@divisor,w
  3331  0FEC  0275               	subwf	___lwdiv@dividend,w
  3332  0FED                     u5315:	
  3333  0FED  1C03               	skipc
  3334  0FEE  2FF7               	goto	L7
  3335  0FEF  0873               	movf	___lwdiv@divisor,w
  3336  0FF0  02F5               	subwf	___lwdiv@dividend,f
  3337  0FF1  0874               	movf	___lwdiv@divisor+1,w
  3338  0FF2  1C03               	skipc
  3339  0FF3  03F6               	decf	___lwdiv@dividend+1,f
  3340  0FF4  02F6               	subwf	___lwdiv@dividend+1,f
  3341  0FF5  144B               	bsf	___lwdiv@quotient,0
  3342  0FF6  1003               	clrc
  3343  0FF7                     L7:	
  3344  0FF7  0CF4               	rrf	___lwdiv@divisor+1,f
  3345  0FF8  0CF3               	rrf	___lwdiv@divisor,f
  3346  0FF9  0BCA               	decfsz	___lwdiv@counter,f
  3347  0FFA  2FE4               	goto	l4822
  3348  0FFB                     l4834:	
  3349  0FFB  084C               	movf	___lwdiv@quotient+1,w
  3350  0FFC  00F4               	movwf	?___lwdiv+1
  3351  0FFD  084B               	movf	___lwdiv@quotient,w
  3352  0FFE  00F3               	movwf	?___lwdiv
  3353  0FFF  0008               	return
  3354  1000                     __end_of___lwdiv:	
  3355                           
  3356                           	psect	text18
  3357  0DD7                     __ptext18:	
  3358 ;; *************** function _chrgCtr *****************
  3359 ;; Defined at:
  3360 ;;		line 642 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 300/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3374 ;;      Params:         0       0       0       0
  3375 ;;      Locals:         0       0       0       0
  3376 ;;      Temps:          0       0       0       0
  3377 ;;      Totals:         0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    4
  3381 ;; This function calls:
  3382 ;;		_showBatLed
  3383 ;; This function is called by:
  3384 ;;		_main
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           
  3389                           ;psect for function _chrgCtr
  3390  0DD7                     _chrgCtr:	
  3391                           
  3392                           ;main.c: 644: if(PORTB & 0x01)
  3393                           
  3394                           ;incstack = 0
  3395                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3396  0DD7  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0DD8  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0DD9  1C06               	btfss	6,0	;volatile
  3399  0DDA  2DF0               	goto	l4094
  3400                           
  3401                           ;main.c: 645: {
  3402                           ;main.c: 646: chrgFlag = 1;
  3403  0DDB  01C0               	clrf	_chrgFlag
  3404  0DDC  0AC0               	incf	_chrgFlag,f
  3405                           
  3406                           ;main.c: 647: firstLock = 0;
  3407  0DDD  1683               	bsf	3,5	;RP0=1, select bank1
  3408  0DDE  01C2               	clrf	_firstLock^(0+128)
  3409                           
  3410                           ;main.c: 648: lowBatLock = 0;
  3411  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  3412  0DE0  01BD               	clrf	_lowBatLock
  3413                           
  3414                           ;main.c: 649: showBatLed();
  3415  0DE1  260A  158A         	fcall	_showBatLed
  3416                           
  3417                           ;main.c: 650: if(PORTB & 0x02)
  3418  0DE3  1C86               	btfss	6,1	;volatile
  3419  0DE4  2DEE               	goto	l4092
  3420                           
  3421                           ;main.c: 651: {
  3422                           ;main.c: 652: if(++chrgFullTime > 200)
  3423  0DE5  30C9               	movlw	201
  3424  0DE6  0ABE               	incf	_chrgFullTime,f
  3425  0DE7  023E               	subwf	_chrgFullTime,w
  3426  0DE8  1C03               	skipc
  3427  0DE9  0008               	return
  3428                           
  3429                           ;main.c: 653: {
  3430                           ;main.c: 654: chrgFullTime = 0;
  3431  0DEA  01BE               	clrf	_chrgFullTime
  3432                           
  3433                           ;main.c: 655: chrgFullFlag = 1;
  3434  0DEB  01BF               	clrf	_chrgFullFlag
  3435  0DEC  0ABF               	incf	_chrgFullFlag,f
  3436  0DED  0008               	return
  3437  0DEE                     l4092:	
  3438                           
  3439                           ;main.c: 658: else
  3440                           ;main.c: 659: {
  3441                           ;main.c: 660: chrgFullTime = 0;
  3442  0DEE  01BE               	clrf	_chrgFullTime
  3443  0DEF  0008               	return
  3444  0DF0                     l4094:	
  3445                           
  3446                           ;main.c: 664: else
  3447                           ;main.c: 665: {
  3448                           ;main.c: 666: chrgFlag = 0;
  3449  0DF0  01C0               	clrf	_chrgFlag
  3450                           
  3451                           ;main.c: 667: chrgFullTime = 0;
  3452  0DF1  01BE               	clrf	_chrgFullTime
  3453                           
  3454                           ;main.c: 668: chrgFullFlag = 0;
  3455  0DF2  01BF               	clrf	_chrgFullFlag
  3456                           
  3457                           ;main.c: 670: if(firstTime == 0)
  3458  0DF3  086E               	movf	_firstTime,w
  3459  0DF4  1D03               	btfss	3,2
  3460  0DF5  2E00               	goto	l4106
  3461                           
  3462                           ;main.c: 671: {
  3463                           ;main.c: 672: if(workStep == 0 && wuhuaFlag == 0)
  3464  0DF6  0845               	movf	_workStep,w
  3465  0DF7  1D03               	btfss	3,2
  3466  0DF8  2DFF               	goto	l4104
  3467  0DF9  0844               	movf	_wuhuaFlag,w
  3468  0DFA  1D03               	btfss	3,2
  3469  0DFB  2DFF               	goto	l4104
  3470                           
  3471                           ;main.c: 673: {
  3472                           ;main.c: 674: showNumShi = 0;
  3473  0DFC  01ED               	clrf	_showNumShi
  3474                           
  3475                           ;main.c: 675: showNumGe = 0;
  3476  0DFD  01EC               	clrf	_showNumGe
  3477                           
  3478                           ;main.c: 676: }
  3479  0DFE  0008               	return
  3480  0DFF                     l4104:	
  3481                           
  3482                           ;main.c: 677: else
  3483                           ;main.c: 678: {
  3484                           ;main.c: 679: showBatLed();
  3485  0DFF  2E0A               	ljmp	l3426
  3486  0E00                     l4106:	
  3487                           
  3488                           ;main.c: 682: else
  3489                           ;main.c: 683: {
  3490                           ;main.c: 684: if(showBatStep < curBatStep)
  3491  0E00  0837               	movf	_curBatStep,w
  3492  0E01  0238               	subwf	_showBatStep,w
  3493  0E02  1803               	skipnc
  3494  0E03  2E06               	goto	l1101
  3495                           
  3496                           ;main.c: 685: {
  3497                           ;main.c: 686: showBatStep = curBatStep;
  3498  0E04  0837               	movf	_curBatStep,w
  3499  0E05  00B8               	movwf	_showBatStep
  3500  0E06                     l1101:	
  3501                           
  3502                           ;main.c: 687: }
  3503                           ;main.c: 688: showNumShi = 0x7F;
  3504  0E06  307F               	movlw	127
  3505  0E07  00ED               	movwf	_showNumShi
  3506                           
  3507                           ;main.c: 689: showNumGe = 0x7F;
  3508  0E08  00EC               	movwf	_showNumGe
  3509  0E09  0008               	return
  3510  0E0A                     __end_of_chrgCtr:	
  3511  0E0A                     __ptext19:	
  3512 ;; *************** function _showBatLed *****************
  3513 ;; Defined at:
  3514 ;;		line 545 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 300/0
  3525 ;;		On exit  : 300/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3528 ;;      Params:         0       0       0       0
  3529 ;;      Locals:         0       0       0       0
  3530 ;;      Temps:          0       0       0       0
  3531 ;;      Totals:         0       0       0       0
  3532 ;;Total ram usage:        0 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    3
  3535 ;; This function calls:
  3536 ;;		___lbdiv
  3537 ;;		___lbmod
  3538 ;; This function is called by:
  3539 ;;		_chrgCtr
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           
  3544                           ;psect for function _showBatLed
  3545  0E0A                     _showBatLed:	
  3546  0E0A                     l3426:	
  3547                           ;incstack = 0
  3548                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3549                           
  3550                           
  3551                           ;main.c: 547: showNumShi = numArray[showBatStep/10];
  3552  0E0A  300A               	movlw	10
  3553  0E0B  00F3               	movwf	___lbdiv@divisor
  3554  0E0C  0838               	movf	_showBatStep,w
  3555  0E0D  261E               	fcall	___lbdiv
  3556  0E0E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3557  0E0F  0084               	movwf	4
  3558  0E10  158A  2000  158A   	fcall	stringdir
  3559  0E13  00ED               	movwf	_showNumShi
  3560                           
  3561                           ;main.c: 548: showNumGe = numArray[showBatStep%10];
  3562  0E14  300A               	movlw	10
  3563  0E15  00F3               	movwf	___lbmod@divisor
  3564  0E16  0838               	movf	_showBatStep,w
  3565  0E17  2639               	fcall	___lbmod
  3566  0E18  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3567  0E19  0084               	movwf	4
  3568  0E1A  158A  2000         	fcall	stringdir
  3569  0E1C  00EC               	movwf	_showNumGe
  3570  0E1D  0008               	return
  3571  0E1E                     __end_of_showBatLed:	
  3572  0E1E                     __ptext21:	
  3573 ;; *************** function ___lbdiv *****************
  3574 ;; Defined at:
  3575 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  dividend        1    wreg     unsigned char 
  3578 ;;  divisor         1    3[COMMON] unsigned char 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  dividend        1    4[COMMON] unsigned char 
  3581 ;;  quotient        1    6[COMMON] unsigned char 
  3582 ;;  counter         1    5[COMMON] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      unsigned char 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0
  3587 ;; Tracked objects:
  3588 ;;		On entry : 300/0
  3589 ;;		On exit  : 300/0
  3590 ;;		Unchanged: 300/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3592 ;;      Params:         1       0       0       0
  3593 ;;      Locals:         3       0       0       0
  3594 ;;      Temps:          0       0       0       0
  3595 ;;      Totals:         4       0       0       0
  3596 ;;Total ram usage:        4 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    2
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_showBatLed
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function ___lbdiv
  3608  0E1E                     ___lbdiv:	
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3612                           ;___lbdiv@dividend stored from wreg
  3613  0E1E  00F4               	movwf	___lbdiv@dividend
  3614  0E1F  01F6               	clrf	___lbdiv@quotient
  3615  0E20  0873               	movf	___lbdiv@divisor,w
  3616  0E21  1903               	btfsc	3,2
  3617  0E22  2E37               	goto	l3292
  3618  0E23  01F5               	clrf	___lbdiv@counter
  3619  0E24                     l3278:	
  3620  0E24  0AF5               	incf	___lbdiv@counter,f
  3621  0E25  1BF3               	btfsc	___lbdiv@divisor,7
  3622  0E26  2E2A               	goto	l1668
  3623  0E27  1003               	clrc
  3624  0E28  0DF3               	rlf	___lbdiv@divisor,f
  3625  0E29  2E24               	goto	l3278
  3626  0E2A                     l1668:	
  3627  0E2A  1003               	clrc
  3628  0E2B  0DF6               	rlf	___lbdiv@quotient,f
  3629  0E2C  0873               	movf	___lbdiv@divisor,w
  3630  0E2D  0274               	subwf	___lbdiv@dividend,w
  3631  0E2E  1C03               	skipc
  3632  0E2F  2E34               	goto	L9
  3633  0E30  0873               	movf	___lbdiv@divisor,w
  3634  0E31  02F4               	subwf	___lbdiv@dividend,f
  3635  0E32  1476               	bsf	___lbdiv@quotient,0
  3636  0E33  1003               	clrc
  3637  0E34                     L9:	
  3638  0E34  0CF3               	rrf	___lbdiv@divisor,f
  3639  0E35  0BF5               	decfsz	___lbdiv@counter,f
  3640  0E36  2E2A               	goto	l1668
  3641  0E37                     l3292:	
  3642  0E37  0876               	movf	___lbdiv@quotient,w
  3643  0E38  0008               	return
  3644  0E39                     __end_of___lbdiv:	
  3645  0E39                     __ptext20:	
  3646 ;; *************** function ___lbmod *****************
  3647 ;; Defined at:
  3648 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  dividend        1    wreg     unsigned char 
  3651 ;;  divisor         1    3[COMMON] unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  dividend        1    5[COMMON] unsigned char 
  3654 ;;  rem             1    7[COMMON] unsigned char 
  3655 ;;  counter         1    6[COMMON] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      unsigned char 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0
  3660 ;; Tracked objects:
  3661 ;;		On entry : 300/0
  3662 ;;		On exit  : 300/0
  3663 ;;		Unchanged: 300/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3665 ;;      Params:         1       0       0       0
  3666 ;;      Locals:         3       0       0       0
  3667 ;;      Temps:          1       0       0       0
  3668 ;;      Totals:         5       0       0       0
  3669 ;;Total ram usage:        5 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    2
  3672 ;; This function calls:
  3673 ;;		Nothing
  3674 ;; This function is called by:
  3675 ;;		_showBatLed
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           
  3680                           ;psect for function ___lbmod
  3681  0E39                     ___lbmod:	
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3685                           ;___lbmod@dividend stored from wreg
  3686  0E39  00F5               	movwf	___lbmod@dividend
  3687  0E3A  3008               	movlw	8
  3688  0E3B  00F6               	movwf	___lbmod@counter
  3689  0E3C  01F7               	clrf	___lbmod@rem
  3690  0E3D                     l3300:	
  3691  0E3D  0875               	movf	___lbmod@dividend,w
  3692  0E3E  00F4               	movwf	??___lbmod
  3693  0E3F  3007               	movlw	7
  3694  0E40  1003               	clrc
  3695  0E41                     L8:	
  3696  0E41  0CF4               	rrf	??___lbmod,f
  3697  0E42  3EFF               	addlw	-1
  3698  0E43  1003               	clrc
  3699  0E44  1D03               	skipz
  3700  0E45  2E41               	goto	L8
  3701  0E46  0D77               	rlf	___lbmod@rem,w
  3702  0E47  0474               	iorwf	??___lbmod,w
  3703  0E48  00F7               	movwf	___lbmod@rem
  3704  0E49  1003               	clrc
  3705  0E4A  0DF5               	rlf	___lbmod@dividend,f
  3706  0E4B  0873               	movf	___lbmod@divisor,w
  3707  0E4C  0277               	subwf	___lbmod@rem,w
  3708  0E4D  1C03               	skipc
  3709  0E4E  2E51               	goto	l3308
  3710  0E4F  0873               	movf	___lbmod@divisor,w
  3711  0E50  02F7               	subwf	___lbmod@rem,f
  3712  0E51                     l3308:	
  3713  0E51  0BF6               	decfsz	___lbmod@counter,f
  3714  0E52  2E3D               	goto	l3300
  3715  0E53  0877               	movf	___lbmod@rem,w
  3716  0E54  0008               	return
  3717  0E55                     __end_of___lbmod:	
  3718                           
  3719                           	psect	text25
  3720  0D89                     __ptext25:	
  3721 ;; *************** function _KeyServer *****************
  3722 ;; Defined at:
  3723 ;;		line 131 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : 300/0
  3734 ;;		On exit  : 300/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3737 ;;      Params:         0       0       0       0
  3738 ;;      Locals:         0       0       0       0
  3739 ;;      Temps:          0       0       0       0
  3740 ;;      Totals:         0       0       0       0
  3741 ;;Total ram usage:        0 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    2
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _KeyServer
  3753  0D89                     _KeyServer:	
  3754                           
  3755                           ;main.c: 133: static unsigned char KeyOldFlag = 0;
  3756                           ;main.c: 134: if (KeyFlag[0])
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3760  0D89  082E               	movf	_KeyFlag,w	;volatile
  3761  0D8A  1903               	btfsc	3,2
  3762  0D8B  2DD5               	goto	l3890
  3763                           
  3764                           ;main.c: 135: {
  3765                           ;main.c: 136: time = 0;
  3766  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  3767  0D8D  01BA               	clrf	_time^(0+128)
  3768  0D8E  01BB               	clrf	(_time+1)^(0+128)
  3769                           
  3770                           ;main.c: 137: if (KeyFlag[0] != KeyOldFlag)
  3771  0D8F  1283               	bcf	3,5	;RP0=0, select bank0
  3772  0D90  082E               	movf	_KeyFlag,w	;volatile
  3773  0D91  0635               	xorwf	KeyServer@KeyOldFlag,w
  3774  0D92  1903               	skipnz
  3775  0D93  0008               	return
  3776                           
  3777                           ;main.c: 138: {
  3778                           ;main.c: 140: KeyOldFlag ^= KeyFlag[0];
  3779  0D94  082E               	movf	_KeyFlag,w	;volatile
  3780  0D95  06B5               	xorwf	KeyServer@KeyOldFlag,f
  3781                           
  3782                           ;main.c: 141: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3783  0D96  1835               	btfsc	KeyServer@KeyOldFlag,0
  3784  0D97  1C2E               	btfss	_KeyFlag,0	;volatile
  3785  0D98  2DB2               	goto	l3866
  3786  0D99  1683               	bsf	3,5	;RP0=1, select bank1
  3787  0D9A  0842               	movf	_firstLock^(0+128),w
  3788  0D9B  1D03               	btfss	3,2
  3789  0D9C  2DB2               	goto	l3866
  3790                           
  3791                           ;main.c: 142: {
  3792                           ;main.c: 144: if(lowBatLock == 1)
  3793  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  3794  0D9E  0B3D               	decfsz	_lowBatLock,w
  3795  0D9F  2DA4               	goto	l3856
  3796                           
  3797                           ;main.c: 145: {
  3798                           ;main.c: 146: shanshuoTime = 225;
  3799  0DA0  30E1               	movlw	225
  3800  0DA1  00AC               	movwf	_shanshuoTime
  3801  0DA2  01AD               	clrf	_shanshuoTime+1
  3802                           
  3803                           ;main.c: 147: }
  3804  0DA3  2DA9               	goto	l3860
  3805  0DA4                     l3856:	
  3806                           
  3807                           ;main.c: 148: else if(++workStep > 2)
  3808  0DA4  3003               	movlw	3
  3809  0DA5  0AC5               	incf	_workStep,f
  3810  0DA6  0245               	subwf	_workStep,w
  3811  0DA7  1803               	btfsc	3,0
  3812                           
  3813                           ;main.c: 149: {
  3814                           ;main.c: 150: workStep = 0;
  3815  0DA8  01C5               	clrf	_workStep
  3816  0DA9                     l3860:	
  3817                           
  3818                           ;main.c: 151: }
  3819                           ;main.c: 152: if(workStep == 2)
  3820  0DA9  3002               	movlw	2
  3821  0DAA  0645               	xorwf	_workStep,w
  3822  0DAB  1D03               	btfss	3,2
  3823  0DAC  2DB0               	goto	l3864
  3824                           
  3825                           ;main.c: 153: {
  3826                           ;main.c: 154: shanshuoTime = 225;
  3827  0DAD  30E1               	movlw	225
  3828  0DAE  00AC               	movwf	_shanshuoTime
  3829  0DAF  2DB1               	goto	L12
  3830  0DB0                     l3864:	
  3831                           ;main.c: 155: }
  3832                           
  3833                           
  3834                           ;main.c: 156: else
  3835                           ;main.c: 157: {
  3836                           ;main.c: 158: shanshuoTime = 0;
  3837  0DB0  01AC               	clrf	_shanshuoTime
  3838  0DB1                     L12:	
  3839  0DB1  01AD               	clrf	_shanshuoTime+1
  3840  0DB2                     l3866:	
  3841                           
  3842                           ;main.c: 159: }
  3843                           ;main.c: 160: }
  3844                           ;main.c: 161: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3845  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0DB3  18B5               	btfsc	KeyServer@KeyOldFlag,1
  3847  0DB4  1CAE               	btfss	_KeyFlag,1	;volatile
  3848  0DB5  2DD1               	goto	l3888
  3849  0DB6  1683               	bsf	3,5	;RP0=1, select bank1
  3850  0DB7  0842               	movf	_firstLock^(0+128),w
  3851  0DB8  1D03               	btfss	3,2
  3852  0DB9  2DD1               	goto	l3888
  3853                           
  3854                           ;main.c: 162: {
  3855                           ;main.c: 164: if(lowBatLock == 1)
  3856  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  3857  0DBB  0B3D               	decfsz	_lowBatLock,w
  3858  0DBC  2DC1               	goto	l3876
  3859                           
  3860                           ;main.c: 165: {
  3861                           ;main.c: 166: shanshuoTime2 = 225;
  3862  0DBD  30E1               	movlw	225
  3863  0DBE  00AA               	movwf	_shanshuoTime2
  3864  0DBF  01AB               	clrf	_shanshuoTime2+1
  3865                           
  3866                           ;main.c: 167: }
  3867  0DC0  2DC6               	goto	l3880
  3868  0DC1                     l3876:	
  3869                           
  3870                           ;main.c: 168: else if(++wuhuaFlag > 2)
  3871  0DC1  3003               	movlw	3
  3872  0DC2  0AC4               	incf	_wuhuaFlag,f
  3873  0DC3  0244               	subwf	_wuhuaFlag,w
  3874  0DC4  1803               	btfsc	3,0
  3875                           
  3876                           ;main.c: 169: {
  3877                           ;main.c: 170: wuhuaFlag = 0;
  3878  0DC5  01C4               	clrf	_wuhuaFlag
  3879  0DC6                     l3880:	
  3880                           
  3881                           ;main.c: 171: }
  3882                           ;main.c: 172: if(wuhuaFlag == 2)
  3883  0DC6  3002               	movlw	2
  3884  0DC7  0644               	xorwf	_wuhuaFlag,w
  3885  0DC8  1D03               	btfss	3,2
  3886  0DC9  2DCF               	goto	l3886
  3887                           
  3888                           ;main.c: 173: {
  3889                           ;main.c: 174: shanshuoTime2 = 225;
  3890  0DCA  30E1               	movlw	225
  3891  0DCB  00AA               	movwf	_shanshuoTime2
  3892  0DCC  01AB               	clrf	_shanshuoTime2+1
  3893                           
  3894                           ;main.c: 175: count10s = 0;
  3895  0DCD  01C2               	clrf	_count10s
  3896                           
  3897                           ;main.c: 176: }
  3898  0DCE  2DD1               	goto	l3888
  3899  0DCF                     l3886:	
  3900                           
  3901                           ;main.c: 177: else
  3902                           ;main.c: 178: {
  3903                           ;main.c: 179: shanshuoTime2 = 0;
  3904  0DCF  01AA               	clrf	_shanshuoTime2
  3905  0DD0  01AB               	clrf	_shanshuoTime2+1
  3906  0DD1                     l3888:	
  3907                           
  3908                           ;main.c: 180: }
  3909                           ;main.c: 181: }
  3910                           ;main.c: 184: KeyOldFlag = KeyFlag[0];
  3911  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  3912  0DD2  082E               	movf	_KeyFlag,w	;volatile
  3913  0DD3  00B5               	movwf	KeyServer@KeyOldFlag
  3914  0DD4  0008               	return
  3915  0DD5                     l3890:	
  3916                           
  3917                           ;main.c: 187: else
  3918                           ;main.c: 188: {
  3919                           ;main.c: 189: KeyOldFlag = 0;
  3920  0DD5  01B5               	clrf	KeyServer@KeyOldFlag
  3921  0DD6  0008               	return
  3922  0DD7                     __end_of_KeyServer:	
  3923                           
  3924                           	psect	text26
  3925  0024                     __ptext26:	
  3926 ;; *************** function _Init_System *****************
  3927 ;; Defined at:
  3928 ;;		line 80 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, status,2
  3937 ;; Tracked objects:
  3938 ;;		On entry : B00/0
  3939 ;;		On exit  : 300/100
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3942 ;;      Params:         0       0       0       0
  3943 ;;      Locals:         0       0       0       0
  3944 ;;      Temps:          0       0       0       0
  3945 ;;      Totals:         0       0       0       0
  3946 ;;Total ram usage:        0 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    2
  3949 ;; This function calls:
  3950 ;;		Nothing
  3951 ;; This function is called by:
  3952 ;;		_main
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _Init_System
  3958  0024                     _Init_System:	
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _Init_System: [wreg+status,2]
  3962  0024  0000               	nop	;# 
  3963  0025  0064               	clrwdt	;# 
  3964                           
  3965                           ;main.c: 84: INTCON = 0;
  3966  0026  018B               	clrf	11	;volatile
  3967                           
  3968                           ;main.c: 85: OSCCON = 0X72;
  3969  0027  3072               	movlw	114
  3970  0028  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0029  1303               	bcf	3,6	;RP1=0, select bank0
  3972  002A  0094               	movwf	20	;volatile
  3973                           
  3974                           ;main.c: 86: OPTION_REG = 0;
  3975  002B  0181               	clrf	1	;volatile
  3976                           
  3977                           ;main.c: 91: TRISA = 0x00;
  3978  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3979  002D  0185               	clrf	5	;volatile
  3980                           
  3981                           ;main.c: 92: PORTA = 0;
  3982  002E  0186               	clrf	6	;volatile
  3983                           
  3984                           ;main.c: 93: TRISB = 0x23;
  3985  002F  3023               	movlw	35
  3986  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0031  0085               	movwf	5	;volatile
  3988                           
  3989                           ;main.c: 94: PORTB = 0;
  3990  0032  0186               	clrf	6	;volatile
  3991                           
  3992                           ;main.c: 95: WPUB = 0x02;
  3993  0033  3002               	movlw	2
  3994  0034  0088               	movwf	8	;volatile
  3995                           
  3996                           ;main.c: 96: TRISC = 0;
  3997  0035  1703               	bsf	3,6	;RP1=1, select bank2
  3998  0036  0185               	clrf	5	;volatile
  3999                           
  4000                           ;main.c: 97: PORTC = 0;
  4001  0037  0186               	clrf	6	;volatile
  4002                           
  4003                           ;main.c: 99: PIE1 = 2;
  4004  0038  1303               	bcf	3,6	;RP1=0, select bank0
  4005  0039  008E               	movwf	14	;volatile
  4006                           
  4007                           ;main.c: 100: PR2 = 250;
  4008  003A  30FA               	movlw	250
  4009  003B  0091               	movwf	17	;volatile
  4010                           
  4011                           ;main.c: 101: T2CON = 4;
  4012  003C  3004               	movlw	4
  4013  003D  0093               	movwf	19	;volatile
  4014                           
  4015                           ;main.c: 103: INTCON = 0XC0;
  4016  003E  30C0               	movlw	192
  4017  003F  008B               	movwf	11	;volatile
  4018                           
  4019                           ;main.c: 104: ADCON0 = 0X41;
  4020                           
  4021                           ;main.c: 105: ADON = 1;
  4022                           
  4023                           ;main.c: 106: ADCON1 = 0x00;
  4024  0040  2BED               	ljmp	PL26	;call to abstracted procedure
  4025  0041                     __end_of_Init_System:	
  4026  0041                     __ptext22:	
  4027 ;; *************** function _WorkSleep *****************
  4028 ;; Defined at:
  4029 ;;		line 223 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 300/0
  4040 ;;		On exit  : 300/100
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4043 ;;      Params:         0       0       0       0
  4044 ;;      Locals:         0       0       0       0
  4045 ;;      Temps:          0       0       0       0
  4046 ;;      Totals:         0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		_Refurbish_Sfr
  4052 ;;		_SystemEnterSleep
  4053 ;; This function is called by:
  4054 ;;		_main
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _WorkSleep
  4060  0041                     _WorkSleep:	
  4061                           
  4062                           ;main.c: 228: if(B_OnOff)time = 0;
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4066  0041  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4067  0042  2846               	goto	l4846
  4068  0043  1683               	bsf	3,5	;RP0=1, select bank1
  4069  0044  01BA               	clrf	_time^(0+128)
  4070  0045  01BB               	clrf	(_time+1)^(0+128)
  4071  0046                     l4846:	
  4072                           
  4073                           ;main.c: 230: if(++time >= 1000)
  4074  0046  1683               	bsf	3,5	;RP0=1, select bank1
  4075  0047  0ABA               	incf	_time^(0+128),f
  4076  0048  1903               	skipnz
  4077  0049  0ABB               	incf	(_time+1)^(0+128),f
  4078  004A  3003               	movlw	3
  4079  004B  023B               	subwf	(_time+1)^(0+128),w
  4080  004C  30E8               	movlw	232
  4081  004D  1903               	skipnz
  4082  004E  023A               	subwf	_time^(0+128),w
  4083  004F  1C03               	skipc
  4084  0050  0008               	return
  4085                           
  4086                           ;main.c: 231: {
  4087                           ;main.c: 232: time = 0;
  4088  0051  01BA               	clrf	_time^(0+128)
  4089  0052  01BB               	clrf	(_time+1)^(0+128)
  4090                           
  4091                           ;main.c: 233: INTCON = 0;
  4092  0053  018B               	clrf	11	;volatile
  4093                           
  4094                           ;main.c: 234: PIE1 = 0;
  4095  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0055  018E               	clrf	14	;volatile
  4097                           
  4098                           ;main.c: 235: PIE2 = 0;
  4099  0056  1703               	bsf	3,6	;RP1=1, select bank2
  4100  0057  0190               	clrf	16	;volatile
  4101                           
  4102                           ;main.c: 236: PIR1 = 0;
  4103  0058  1303               	bcf	3,6	;RP1=0, select bank0
  4104  0059  018D               	clrf	13	;volatile
  4105                           
  4106                           ;main.c: 237: PIR2 = 0;
  4107  005A  1703               	bsf	3,6	;RP1=1, select bank2
  4108  005B  018F               	clrf	15	;volatile
  4109                           
  4110                           ;main.c: 238: T2CON = 0;
  4111  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4112  005D  0193               	clrf	19	;volatile
  4113                           
  4114                           ;main.c: 239: ADCON1 = 0;
  4115  005E  1683               	bsf	3,5	;RP0=1, select bank1
  4116  005F  0196               	clrf	22	;volatile
  4117                           
  4118                           ;main.c: 242: ADCON0 = 0;
  4119  0060  0195               	clrf	21	;volatile
  4120                           
  4121                           ;main.c: 245: TRISA &= 0xE4;
  4122  0061  30E4               	movlw	228
  4123  0062  0585               	andwf	5,f	;volatile
  4124                           
  4125                           ;main.c: 246: TRISB &= 0xEF;
  4126  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4127  0064  1205               	bcf	5,4	;volatile
  4128                           
  4129                           ;main.c: 247: PORTA = 0x00;
  4130  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4131  0066  0186               	clrf	6	;volatile
  4132                           
  4133                           ;main.c: 248: PORTB = 0x00;
  4134  0067  1283               	bcf	3,5	;RP0=0, select bank0
  4135  0068  0186               	clrf	6	;volatile
  4136                           
  4137                           ;main.c: 249: TRISC = 0;
  4138  0069  1703               	bsf	3,6	;RP1=1, select bank2
  4139  006A  0185               	clrf	5	;volatile
  4140                           
  4141                           ;main.c: 250: PORTC = 0;
  4142  006B  0186               	clrf	6	;volatile
  4143                           
  4144                           ;main.c: 252: TRISB0 =1;
  4145  006C  1303               	bcf	3,6	;RP1=0, select bank0
  4146  006D  1405               	bsf	5,0	;volatile
  4147                           
  4148                           ;main.c: 254: RBIF = 0;
  4149  006E  100B               	bcf	11,0	;volatile
  4150                           
  4151                           ;main.c: 255: RBIE = 1;
  4152  006F  158B               	bsf	11,3	;volatile
  4153                           
  4154                           ;main.c: 256: IOCB0= 1;
  4155  0070  1409               	bsf	9,0	;volatile
  4156                           
  4157                           ;main.c: 257: PORTB;
  4158  0071  0806               	movf	6,w	;volatile
  4159                           
  4160                           ;main.c: 269: SystemEnterSleep();
  4161  0072  20A9  118A         	fcall	_SystemEnterSleep
  4162                           
  4163                           ;main.c: 270: if(RAIF)
  4164  0074  1D8D               	btfss	13,3	;volatile
  4165  0075  2879               	goto	l4880
  4166                           
  4167                           ;main.c: 271: {
  4168                           ;main.c: 272: RAIF = 0;
  4169  0076  118D               	bcf	13,3	;volatile
  4170                           
  4171                           ;main.c: 273: PORTA;
  4172  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4173  0078  0806               	movf	6,w	;volatile
  4174  0079                     l4880:	
  4175                           
  4176                           ;main.c: 274: }
  4177                           ;main.c: 276: Refurbish_Sfr();
  4178  0079  2403  118A         	fcall	_Refurbish_Sfr
  4179                           
  4180                           ;main.c: 277: ADCON0 = 0X41;
  4181                           
  4182                           ;main.c: 278: ADON = 1;
  4183                           
  4184                           ;main.c: 279: ADCON1 = 0x00;
  4185  007B  2BED               	ljmp	PL26	;call to abstracted procedure
  4186  007C                     __end_of_WorkSleep:	
  4187  007C                     __ptext27:	
  4188 ;; *************** function _CheckTouchKey *****************
  4189 ;; Defined at:
  4190 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;                  1    wreg      void 
  4197 ;; Registers used:
  4198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4204 ;;      Params:         0       0       0       0
  4205 ;;      Locals:         0       0       0       0
  4206 ;;      Temps:          0       0       0       0
  4207 ;;      Totals:         0       0       0       0
  4208 ;;Total ram usage:        0 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    5
  4211 ;; This function calls:
  4212 ;;		_CheckKeyOldValue
  4213 ;;		_CheckOnceResult
  4214 ;;		_CheckValidTime
  4215 ;;		_ClearResSum
  4216 ;;		_GetTouchKeyValue
  4217 ;;		_KeyStopClear
  4218 ;;		_TurnKeyFlags
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _CheckTouchKey
  4226  007C                     _CheckTouchKey:	
  4227                           
  4228                           ;incstack = 0
  4229                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4230  007C  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4231  007D  288A               	goto	l1375
  4232  007E  2139  118A         	fcall	_GetTouchKeyValue
  4233  0080  3008               	movlw	8
  4234  0081  1283               	bcf	3,5	;RP0=0, select bank0
  4235  0082  1303               	bcf	3,6	;RP1=0, select bank0
  4236  0083  0AB4               	incf	_KeyCounter,f
  4237  0084  0234               	subwf	_KeyCounter,w
  4238  0085  1C03               	skipc
  4239  0086  28A8               	goto	l5026
  4240  0087  01B4               	clrf	_KeyCounter
  4241  0088  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4242  0089  28A8               	goto	l5026
  4243  008A                     l1375:	
  4244  008A  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4245  008B  28A2               	goto	l5020
  4246  008C  21B0  118A         	fcall	_CheckOnceResult
  4247  008E  2342  118A         	fcall	_TurnKeyFlags
  4248  0090  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4249  0091  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4250  0092  2899               	goto	l5010
  4251  0093  3003               	movlw	3
  4252  0094  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0095  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0096  0234               	subwf	_KeyCounter,w
  4255  0097  1C03               	skipc
  4256  0098  289E               	goto	l5018
  4257  0099                     l5010:	
  4258  0099  232C  118A         	fcall	_KeyStopClear
  4259  009B  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4260  009C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4261  009D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4262  009E                     l5018:	
  4263  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4264  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4265  00A0  01B4               	clrf	_KeyCounter
  4266  00A1  28A8               	goto	l5026
  4267  00A2                     l5020:	
  4268  00A2  22C8  118A         	fcall	_CheckKeyOldValue
  4269  00A4  21A1  118A         	fcall	_ClearResSum
  4270  00A6  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4271  00A7  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4272  00A8                     l5026:	
  4273  00A8  2B75               	ljmp	l3688	;# 
  4274  00A9                     __end_of_CheckTouchKey:	
  4275  00A9                     __ptext23:	
  4276 ;; *************** function _SystemEnterSleep *****************
  4277 ;; Defined at:
  4278 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  92              2    9[BANK0 ] unsigned int 
  4283 ;;  93              2    7[BANK0 ] unsigned int 
  4284 ;;  94              2    5[BANK0 ] unsigned int 
  4285 ;;  91              1   11[BANK0 ] unsigned char 
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 300/0
  4292 ;;		On exit  : 300/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4295 ;;      Params:         0       0       0       0
  4296 ;;      Locals:         0       7       0       0
  4297 ;;      Temps:          2       0       0       0
  4298 ;;      Totals:         2       7       0       0
  4299 ;;Total ram usage:        9 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    4
  4302 ;; This function calls:
  4303 ;;		_ClearResSum
  4304 ;;		_GetTouchKeyValue
  4305 ;;		_KeyClearOne
  4306 ;; This function is called by:
  4307 ;;		_WorkSleep
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function _SystemEnterSleep
  4313  00A9                     _SystemEnterSleep:	
  4314  00A9                     l1387:	
  4315                           ;incstack = 0
  4316                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4317                           
  4318  00A9  0064               	clrwdt	;# 
  4319  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  4320  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  4321  00AC  0181               	clrf	1	;volatile
  4322  00AD  3007               	movlw	7
  4323  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4324  00AF  0481               	iorwf	1,f	;volatile
  4325  00B0  1581               	bsf	1,3	;volatile
  4326  00B1  0064               	clrwdt	;# 
  4327  00B2  300A               	movlw	10
  4328  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  4329  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  4330  00B5  0081               	movwf	1	;volatile
  4331  00B6  0064               	clrwdt	;# 
  4332  00B7  1283               	bcf	3,5	;RP0=0, select bank2
  4333  00B8  1703               	bsf	3,6	;RP1=1, select bank2
  4334  00B9  0191               	clrf	17	;volatile
  4335  00BA  0193               	clrf	19	;volatile
  4336  00BB  3002               	movlw	2
  4337  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4338  00BD  0094               	movwf	20	;volatile
  4339  00BE  0063               	sleep	;# 
  4340  00BF  0000               	nop	;# 
  4341  00C0  0064               	clrwdt	;# 
  4342  00C1  3072               	movlw	114
  4343  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4344  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4345  00C4  0094               	movwf	20	;volatile
  4346  00C5  3079               	movlw	121
  4347  00C6  1703               	bsf	3,6	;RP1=1, select bank2
  4348  00C7  0093               	movwf	19	;volatile
  4349  00C8  21A1  118A         	fcall	_ClearResSum
  4350  00CA  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4351  00CB  2139  118A         	fcall	_GetTouchKeyValue
  4352  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4353  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  4354  00CF  23F9  118A         	fcall	PL32	;call to abstracted procedure
  4355  00D1  1C0B               	btfss	11,0	;volatile
  4356  00D2  188B               	btfsc	11,1	;volatile
  4357  00D3  28D6               	goto	l4518
  4358  00D4  1D8D               	btfss	13,3	;volatile
  4359  00D5  28DD               	goto	l4530
  4360  00D6                     l4518:	
  4361  00D6  21A1               	fcall	_ClearResSum
  4362  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4363  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4364  00D9  01B4               	clrf	_KeyCounter
  4365  00DA  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4366  00DB  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4367  00DC  0008               	return
  4368  00DD                     l4530:	
  4369  00DD  0853               	movf	SystemEnterSleep@92,w
  4370  00DE  3903               	andlw	3
  4371  00DF  1003               	clrc
  4372  00E0  1903               	btfsc	3,2
  4373  00E1  2933               	goto	L11
  4374  00E2  0D55               	rlf	SystemEnterSleep@91,w
  4375  00E3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4376  00E4  0084               	movwf	4
  4377  00E5  1383               	bcf	3,7	;select IRP bank1
  4378  00E6  0800               	movf	0,w
  4379  00E7  00D1               	movwf	SystemEnterSleep@93
  4380  00E8  0A84               	incf	4,f
  4381  00E9  0800               	movf	0,w
  4382  00EA  00D2               	movwf	SystemEnterSleep@93+1
  4383  00EB  00D0               	movwf	SystemEnterSleep@94+1
  4384  00EC  0851               	movf	SystemEnterSleep@93,w
  4385  00ED  00CF               	movwf	SystemEnterSleep@94
  4386  00EE  0851               	movf	SystemEnterSleep@93,w
  4387  00EF  0452               	iorwf	SystemEnterSleep@93+1,w
  4388  00F0  1903               	btfsc	3,2
  4389  00F1  2932               	goto	l4564
  4390  00F2  0855               	movf	SystemEnterSleep@91,w
  4391  00F3  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4392  00F4  0084               	movwf	4
  4393  00F5  158A  2000  118A   	fcall	stringdir
  4394  00F8  07CF               	addwf	SystemEnterSleep@94,f
  4395  00F9  1803               	skipnc
  4396  00FA  0AD0               	incf	SystemEnterSleep@94+1,f
  4397  00FB  1003               	clrc
  4398  00FC  0D55               	rlf	SystemEnterSleep@91,w
  4399  00FD  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4400  00FE  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4401  0100  0850               	movf	SystemEnterSleep@94+1,w
  4402  0101  0275               	subwf	??_SystemEnterSleep+1,w
  4403  0102  1D03               	skipz
  4404  0103  2906               	goto	u4795
  4405  0104  084F               	movf	SystemEnterSleep@94,w
  4406  0105  0274               	subwf	??_SystemEnterSleep,w
  4407  0106                     u4795:	
  4408  0106  1C03               	skipc
  4409  0107  291A               	goto	L10
  4410  0108  23F9  118A         	fcall	PL32	;call to abstracted procedure
  4411  010A                     l4544:	
  4412  010A  0853               	movf	SystemEnterSleep@92,w
  4413  010B  3903               	andlw	3
  4414  010C  1D03               	btfss	3,2
  4415  010D  2911               	goto	l4548
  4416  010E  0855               	movf	SystemEnterSleep@91,w
  4417  010F  22A5  118A         	fcall	_KeyClearOne
  4418  0111                     l4548:	
  4419  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4420  0112  3002               	movlw	2
  4421  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0114  1003               	clrc
  4423  0115  23FE  118A         	fcall	PL34	;call to abstracted procedure
  4424  0117  1803               	btfsc	3,0
  4425  0118  28D6               	goto	l4518
  4426  0119  290A               	goto	l4544
  4427  011A                     L10:	
  4428  011A  0D55               	rlf	SystemEnterSleep@91,w
  4429  011B  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4430  011C  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4431  011E  1003               	clrc
  4432  011F  0D55               	rlf	SystemEnterSleep@91,w
  4433  0120  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4434  0121  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4435  0123  0800               	movf	0,w
  4436  0124  00F4               	movwf	??_SystemEnterSleep
  4437  0125  0A84               	incf	4,f
  4438  0126  0800               	movf	0,w
  4439  0127  00F5               	movwf	??_SystemEnterSleep+1
  4440  0128  1003               	clrc
  4441  0129  0D55               	rlf	SystemEnterSleep@91,w
  4442  012A  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4443  012B  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4444  012D  0851               	movf	SystemEnterSleep@93,w
  4445  012E  0080               	movwf	0
  4446  012F  0A84               	incf	4,f
  4447  0130  0852               	movf	SystemEnterSleep@93+1,w
  4448  0131  0080               	movwf	0
  4449  0132                     l4564:	
  4450  0132  1003               	clrc
  4451  0133                     L11:	
  4452  0133  3002               	movlw	2
  4453  0134  23FE  118A         	fcall	PL34	;call to abstracted procedure
  4454  0136  1803               	btfsc	3,0
  4455  0137  28A9               	goto	l1387
  4456  0138  28DD               	goto	l4530
  4457  0139                     __end_of_SystemEnterSleep:	
  4458  0139                     __ptext31:	
  4459 ;; *************** function _GetTouchKeyValue *****************
  4460 ;; Defined at:
  4461 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  63              2    2[BANK0 ] unsigned int 
  4466 ;;  64              2    0[BANK0 ] unsigned int 
  4467 ;;  62              1    4[BANK0 ] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/200
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4477 ;;      Params:         0       0       0       0
  4478 ;;      Locals:         0       5       0       0
  4479 ;;      Temps:          0       0       0       0
  4480 ;;      Totals:         0       5       0       0
  4481 ;;Total ram usage:        5 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    3
  4484 ;; This function calls:
  4485 ;;		_ClearResSum
  4486 ;; This function is called by:
  4487 ;;		_CheckTouchKey
  4488 ;;		_SystemEnterSleep
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _GetTouchKeyValue
  4494  0139                     _GetTouchKeyValue:	
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4498  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4499  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4500  013B  01CE               	clrf	GetTouchKeyValue@62
  4501  013C  01CC               	clrf	GetTouchKeyValue@63
  4502  013D  0ACC               	incf	GetTouchKeyValue@63,f
  4503  013E  01CD               	clrf	GetTouchKeyValue@63+1
  4504  013F                     l4390:	
  4505  013F  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4506  0140  2945               	goto	l4394
  4507  0141  084C               	movf	GetTouchKeyValue@63,w
  4508  0142  3903               	andlw	3
  4509  0143  1903               	btfsc	3,2
  4510  0144  2996               	goto	l4422
  4511  0145                     l4394:	
  4512  0145  1703               	bsf	3,6	;RP1=1, select bank2
  4513  0146  0191               	clrf	17	;volatile
  4514  0147  0192               	clrf	18	;volatile
  4515  0148  3079               	movlw	121
  4516  0149  0093               	movwf	19	;volatile
  4517  014A  1303               	bcf	3,6	;RP1=0, select bank0
  4518  014B  1305               	bcf	5,6	;volatile
  4519  014C  1306               	bcf	6,6	;volatile
  4520  014D  0000               	nop	;# 
  4521  014E  0000               	nop	;# 
  4522  014F  0000               	nop	;# 
  4523  0150  0000               	nop	;# 
  4524  0151  0000               	nop	;# 
  4525  0152  0000               	nop	;# 
  4526  0153  0000               	nop	;# 
  4527  0154  0000               	nop	;# 
  4528  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4529  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4530  0157  1705               	bsf	5,6	;volatile
  4531  0158  084E               	movf	GetTouchKeyValue@62,w
  4532  0159  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4533  015A  0084               	movwf	4
  4534  015B  158A  2000  118A   	fcall	stringdir
  4535  015E  1703               	bsf	3,6	;RP1=1, select bank2
  4536  015F  0091               	movwf	17	;volatile
  4537  0160  1303               	bcf	3,6	;RP1=0, select bank0
  4538  0161  084E               	movf	GetTouchKeyValue@62,w
  4539  0162  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4540  0163  0084               	movwf	4
  4541  0164  158A  2000  118A   	fcall	stringdir
  4542  0167  1703               	bsf	3,6	;RP1=1, select bank2
  4543  0168  0092               	movwf	18	;volatile
  4544  0169  0000               	nop	;# 
  4545  016A  0000               	nop	;# 
  4546  016B  0000               	nop	;# 
  4547  016C  0000               	nop	;# 
  4548  016D  1283               	bcf	3,5	;RP0=0, select bank2
  4549  016E  1703               	bsf	3,6	;RP1=1, select bank2
  4550  016F  1411               	bsf	17,0	;volatile
  4551  0170  30D0               	movlw	208
  4552  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4553  0172  00CA               	movwf	GetTouchKeyValue@64
  4554  0173  3007               	movlw	7
  4555  0174  00CB               	movwf	GetTouchKeyValue@64+1
  4556  0175                     l1297:	
  4557  0175  1703               	bsf	3,6	;RP1=1, select bank2
  4558  0176  1B91               	btfsc	17,7	;volatile
  4559  0177  2984               	goto	l4420
  4560  0178  3001               	movlw	1
  4561  0179  1303               	bcf	3,6	;RP1=0, select bank0
  4562  017A  02CA               	subwf	GetTouchKeyValue@64,f
  4563  017B  1C03               	skipc
  4564  017C  03CB               	decf	GetTouchKeyValue@64+1,f
  4565  017D  084A               	movf	GetTouchKeyValue@64,w
  4566  017E  044B               	iorwf	GetTouchKeyValue@64+1,w
  4567  017F  1D03               	btfss	3,2
  4568  0180  2975               	goto	l1297
  4569  0181  30FF               	movlw	255
  4570  0182  00B4               	movwf	_KeyCounter
  4571  0183  29A1               	ljmp	l4274
  4572  0184                     l4420:	
  4573  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4574  0185  1003               	clrc
  4575  0186  0D4E               	rlf	GetTouchKeyValue@62,w
  4576  0187  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4577  0188  0084               	movwf	4
  4578  0189  1703               	bsf	3,6	;RP1=1, select bank2
  4579  018A  0816               	movf	22,w	;volatile
  4580  018B  1383               	bcf	3,7	;select IRP bank1
  4581  018C  0780               	addwf	0,f
  4582  018D  0F84               	incfsz	4,f
  4583  018E  0800               	movf	0,w
  4584  018F  1803               	skipnc
  4585  0190  0A00               	incf	0,w
  4586  0191  00FF               	movwf	127
  4587  0192  0817               	movf	23,w	;volatile
  4588  0193  077F               	addwf	127,w
  4589  0194  0080               	movwf	0
  4590  0195  0384               	decf	4,f
  4591  0196                     l4422:	
  4592  0196  3002               	movlw	2
  4593  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4594  0198  1003               	clrc
  4595  0199  0DCC               	rlf	GetTouchKeyValue@63,f
  4596  019A  0DCD               	rlf	GetTouchKeyValue@63+1,f
  4597  019B  0ACE               	incf	GetTouchKeyValue@62,f
  4598  019C  024E               	subwf	GetTouchKeyValue@62,w
  4599  019D  1C03               	skipc
  4600  019E  293F               	goto	l4390
  4601  019F  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4602  01A0  0008               	return
  4603  01A1                     __end_of_GetTouchKeyValue:	
  4604  01A1                     __ptext32:	
  4605 ;; *************** function _ClearResSum *****************
  4606 ;; Defined at:
  4607 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  56              1    3[COMMON] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/200
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4621 ;;      Params:         0       0       0       0
  4622 ;;      Locals:         1       0       0       0
  4623 ;;      Temps:          0       0       0       0
  4624 ;;      Totals:         1       0       0       0
  4625 ;;Total ram usage:        1 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    2
  4628 ;; This function calls:
  4629 ;;		Nothing
  4630 ;; This function is called by:
  4631 ;;		_GetTouchKeyValue
  4632 ;;		_CheckTouchKey
  4633 ;;		_SystemEnterSleep
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _ClearResSum
  4639  01A1                     _ClearResSum:	
  4640  01A1                     l4274:	
  4641                           ;incstack = 0
  4642                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4643                           
  4644  01A1  01F3               	clrf	ClearResSum@56
  4645  01A2                     l4276:	
  4646  01A2  1003               	clrc
  4647  01A3  0D73               	rlf	ClearResSum@56,w
  4648  01A4  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4649  01A5  0084               	movwf	4
  4650  01A6  3002               	movlw	2
  4651  01A7  1383               	bcf	3,7	;select IRP bank1
  4652  01A8  0180               	clrf	0
  4653  01A9  0A84               	incf	4,f
  4654  01AA  0180               	clrf	0
  4655  01AB  0AF3               	incf	ClearResSum@56,f
  4656  01AC  0273               	subwf	ClearResSum@56,w
  4657  01AD  1803               	btfsc	3,0
  4658  01AE  0008               	return
  4659  01AF  29A2               	goto	l4276
  4660  01B0                     __end_of_ClearResSum:	
  4661  01B0                     __ptext34:	
  4662 ;; *************** function _CheckOnceResult *****************
  4663 ;; Defined at:
  4664 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  71              2   10[BANK0 ] unsigned int 
  4669 ;;  72              2    7[BANK0 ] unsigned int 
  4670 ;;  73              2    4[BANK0 ] unsigned int 
  4671 ;;  68              1   12[BANK0 ] unsigned char 
  4672 ;;  69              1    9[BANK0 ] unsigned char 
  4673 ;;  70              1    6[BANK0 ] unsigned char 
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4678 ;; Tracked objects:
  4679 ;;		On entry : 0/0
  4680 ;;		On exit  : 0/0
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4683 ;;      Params:         0       0       0       0
  4684 ;;      Locals:         0       9       0       0
  4685 ;;      Temps:          0       4       0       0
  4686 ;;      Totals:         0      13       0       0
  4687 ;;Total ram usage:       13 bytes
  4688 ;; Hardware stack levels used:    1
  4689 ;; Hardware stack levels required when called:    3
  4690 ;; This function calls:
  4691 ;;		_KeyClearOne
  4692 ;;		_KeyHave
  4693 ;;		_KeyIsIn
  4694 ;; This function is called by:
  4695 ;;		_CheckTouchKey
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _CheckOnceResult
  4701  01B0                     _CheckOnceResult:	
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4705  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  4706  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  4707  01B2  01D6               	clrf	CheckOnceResult@68
  4708  01B3  01F9               	clrf	_KeyData	;volatile
  4709  01B4  01FA               	clrf	_KeyData+1	;volatile
  4710  01B5  01B3               	clrf	_KeyMaxSub
  4711  01B6                     l4666:	
  4712  01B6  0856               	movf	CheckOnceResult@68,w
  4713  01B7  3907               	andlw	7
  4714  01B8  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4715  01B9  0084               	movwf	4
  4716  01BA  158A  2000  118A   	fcall	stringdir
  4717  01BD  00D0               	movwf	CheckOnceResult@70
  4718  01BE  1003               	clrc
  4719  01BF  0D56               	rlf	CheckOnceResult@68,w
  4720  01C0  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4721  01C1  0084               	movwf	4
  4722  01C2  3003               	movlw	3
  4723  01C3                     u5045:	
  4724  01C3  0A84               	incf	4,f
  4725  01C4  1003               	clrc
  4726  01C5  1383               	bcf	3,7	;select IRP bank1
  4727  01C6  0C80               	rrf	0,f
  4728  01C7  0384               	decf	4,f
  4729  01C8  0C80               	rrf	0,f
  4730  01C9  3EFF               	addlw	-1
  4731  01CA  1D03               	skipz
  4732  01CB  29C3               	goto	u5045
  4733  01CC  1003               	clrc
  4734  01CD  0D56               	rlf	CheckOnceResult@68,w
  4735  01CE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4736  01CF  0084               	movwf	4
  4737  01D0  0800               	movf	0,w
  4738  01D1  00D4               	movwf	CheckOnceResult@71
  4739  01D2  0A84               	incf	4,f
  4740  01D3  0800               	movf	0,w
  4741  01D4  00D5               	movwf	CheckOnceResult@71+1
  4742  01D5  0856               	movf	CheckOnceResult@68,w
  4743  01D6  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4744  01D7  0084               	movwf	4
  4745  01D8  158A  2000  118A   	fcall	stringdir
  4746  01DB  00D3               	movwf	CheckOnceResult@69
  4747  01DC  00D1               	movwf	CheckOnceResult@72
  4748  01DD  01D2               	clrf	CheckOnceResult@72+1
  4749  01DE  0854               	movf	CheckOnceResult@71,w
  4750  01DF  07D1               	addwf	CheckOnceResult@72,f
  4751  01E0  1803               	skipnc
  4752  01E1  0AD2               	incf	CheckOnceResult@72+1,f
  4753  01E2  0855               	movf	CheckOnceResult@71+1,w
  4754  01E3  07D2               	addwf	CheckOnceResult@72+1,f
  4755  01E4  0856               	movf	CheckOnceResult@68,w
  4756  01E5  2291  118A         	fcall	_KeyIsIn
  4757  01E7  3A00               	xorlw	0
  4758  01E8  1003               	clrc
  4759  01E9  1D03               	skipz
  4760  01EA  2A45               	goto	L15
  4761  01EB  0D56               	rlf	CheckOnceResult@68,w
  4762  01EC  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4763  01ED  0084               	movwf	4
  4764  01EE  1383               	bcf	3,7	;select IRP bank1
  4765  01EF  0800               	movf	0,w
  4766  01F0  00CE               	movwf	CheckOnceResult@73
  4767  01F1  0A84               	incf	4,f
  4768  01F2  0800               	movf	0,w
  4769  01F3  00CF               	movwf	CheckOnceResult@73+1
  4770  01F4  1003               	clrc
  4771  01F5  0D56               	rlf	CheckOnceResult@68,w
  4772  01F6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4773  01F7  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4774  01F9  0252               	subwf	CheckOnceResult@72+1,w
  4775  01FA  1D03               	skipz
  4776  01FB  29FE               	goto	u5065
  4777  01FC  084A               	movf	??_CheckOnceResult,w
  4778  01FD  0251               	subwf	CheckOnceResult@72,w
  4779  01FE                     u5065:	
  4780  01FE  1803               	skipnc
  4781  01FF  2A0D               	goto	l4684
  4782  0200  1003               	clrc
  4783  0201  0D56               	rlf	CheckOnceResult@68,w
  4784  0202  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4785  0203  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4786  0205  0854               	movf	CheckOnceResult@71,w
  4787  0206  024A               	subwf	??_CheckOnceResult,w
  4788  0207  00D4               	movwf	CheckOnceResult@71
  4789  0208  0855               	movf	CheckOnceResult@71+1,w
  4790  0209  1C03               	skipc
  4791  020A  0A55               	incf	CheckOnceResult@71+1,w
  4792  020B  024B               	subwf	??_CheckOnceResult+1,w
  4793  020C  2A31               	goto	L13
  4794  020D                     l4684:	
  4795  020D  084F               	movf	CheckOnceResult@73+1,w
  4796  020E  0252               	subwf	CheckOnceResult@72+1,w
  4797  020F  1D03               	skipz
  4798  0210  2A13               	goto	u5075
  4799  0211  084E               	movf	CheckOnceResult@73,w
  4800  0212  0251               	subwf	CheckOnceResult@72,w
  4801  0213                     u5075:	
  4802  0213  1803               	skipnc
  4803  0214  2A89               	goto	l4730
  4804  0215  1003               	clrc
  4805  0216  0D56               	rlf	CheckOnceResult@68,w
  4806  0217  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4807  0218  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4808  021A  0252               	subwf	CheckOnceResult@72+1,w
  4809  021B  1D03               	skipz
  4810  021C  2A1F               	goto	u5085
  4811  021D  084A               	movf	??_CheckOnceResult,w
  4812  021E  0251               	subwf	CheckOnceResult@72,w
  4813  021F                     u5085:	
  4814  021F  1803               	skipnc
  4815  0220  2A89               	goto	l4730
  4816  0221  1003               	clrc
  4817  0222  0D56               	rlf	CheckOnceResult@68,w
  4818  0223  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4819  0224  0084               	movwf	4
  4820  0225  084E               	movf	CheckOnceResult@73,w
  4821  0226  0080               	movwf	0
  4822  0227  0A84               	incf	4,f
  4823  0228  084F               	movf	CheckOnceResult@73+1,w
  4824  0229  0080               	movwf	0
  4825  022A  0854               	movf	CheckOnceResult@71,w
  4826  022B  024E               	subwf	CheckOnceResult@73,w
  4827  022C  00D4               	movwf	CheckOnceResult@71
  4828  022D  0855               	movf	CheckOnceResult@71+1,w
  4829  022E  1C03               	skipc
  4830  022F  0A55               	incf	CheckOnceResult@71+1,w
  4831  0230  024F               	subwf	CheckOnceResult@73+1,w
  4832  0231                     L13:	
  4833  0231  00D5               	movwf	CheckOnceResult@71+1
  4834  0232  0856               	movf	CheckOnceResult@68,w
  4835  0233  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4836  0234  0084               	movwf	4
  4837  0235  0180               	clrf	0
  4838  0236  0855               	movf	CheckOnceResult@71+1,w
  4839  0237  1903               	btfsc	3,2
  4840  0238  2A3B               	goto	l4698
  4841  0239  30FF               	movlw	255
  4842  023A  2A3C               	goto	L14
  4843  023B                     l4698:	
  4844  023B  0854               	movf	CheckOnceResult@71,w
  4845  023C                     L14:	
  4846  023C  00D3               	movwf	CheckOnceResult@69
  4847  023D  0233               	subwf	_KeyMaxSub,w
  4848  023E  1803               	skipnc
  4849  023F  2A43               	goto	l4704
  4850  0240  0853               	movf	CheckOnceResult@69,w
  4851  0241  00B3               	movwf	_KeyMaxSub
  4852  0242  2A83               	goto	l4728
  4853  0243                     l4704:	
  4854  0243  0AB4               	incf	_KeyCounter,f
  4855  0244  2A89               	goto	l4730
  4856  0245                     L15:	
  4857  0245  0D56               	rlf	CheckOnceResult@68,w
  4858  0246  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4859  0247  0084               	movwf	4
  4860  0248  1383               	bcf	3,7	;select IRP bank1
  4861  0249  0800               	movf	0,w
  4862  024A  00CA               	movwf	??_CheckOnceResult
  4863  024B  0A84               	incf	4,f
  4864  024C  0800               	movf	0,w
  4865  024D  00CB               	movwf	??_CheckOnceResult+1
  4866  024E  084A               	movf	??_CheckOnceResult,w
  4867  024F  3E01               	addlw	1
  4868  0250  00CC               	movwf	??_CheckOnceResult+2
  4869  0251  084B               	movf	??_CheckOnceResult+1,w
  4870  0252  1803               	skipnc
  4871  0253  3E01               	addlw	1
  4872  0254  00CD               	movwf	??_CheckOnceResult+3
  4873  0255  0852               	movf	CheckOnceResult@72+1,w
  4874  0256  024D               	subwf	??_CheckOnceResult+3,w
  4875  0257  1D03               	skipz
  4876  0258  2A5B               	goto	u5115
  4877  0259  0851               	movf	CheckOnceResult@72,w
  4878  025A  024C               	subwf	??_CheckOnceResult+2,w
  4879  025B                     u5115:	
  4880  025B  1C03               	btfss	3,0
  4881  025C  2A89               	goto	l4730
  4882  025D  1003               	clrc
  4883  025E  0D56               	rlf	CheckOnceResult@68,w
  4884  025F  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4885  0260  0084               	movwf	4
  4886  0261  0800               	movf	0,w
  4887  0262  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4888  0264  1C03               	skipc
  4889  0265  2A6F               	goto	l4718
  4890  0266  1003               	clrc
  4891  0267  0D56               	rlf	CheckOnceResult@68,w
  4892  0268  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4893  0269  0084               	movwf	4
  4894  026A  0800               	movf	0,w
  4895  026B  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4896  026D  1803               	skipnc
  4897  026E  2A7B               	goto	l4722
  4898  026F                     l4718:	
  4899  026F  0856               	movf	CheckOnceResult@68,w
  4900  0270  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4901  0271  0084               	movwf	4
  4902  0272  3009               	movlw	9
  4903  0273  0A80               	incf	0,f
  4904  0274  0200               	subwf	0,w
  4905  0275  1C03               	skipc
  4906  0276  2A7F               	goto	l4726
  4907  0277  0856               	movf	CheckOnceResult@68,w
  4908  0278  22A5  118A         	fcall	_KeyClearOne
  4909  027A  2A89               	goto	l4730
  4910  027B                     l4722:	
  4911  027B  0856               	movf	CheckOnceResult@68,w
  4912  027C  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4913  027D  0084               	movwf	4
  4914  027E  0180               	clrf	0
  4915  027F                     l4726:	
  4916  027F  087A               	movf	_KeyData+1,w	;volatile
  4917  0280  0479               	iorwf	_KeyData,w	;volatile
  4918  0281  1D03               	btfss	3,2
  4919  0282  2A89               	goto	l4730
  4920  0283                     l4728:	
  4921  0283  0850               	movf	CheckOnceResult@70,w
  4922  0284  00F3               	movwf	KeyHave@59
  4923  0285  01F4               	clrf	KeyHave@59+1
  4924  0286  0856               	movf	CheckOnceResult@68,w
  4925  0287  22BA  118A         	fcall	_KeyHave
  4926  0289                     l4730:	
  4927  0289  3002               	movlw	2
  4928  028A  1283               	bcf	3,5	;RP0=0, select bank0
  4929  028B  1303               	bcf	3,6	;RP1=0, select bank0
  4930  028C  0AD6               	incf	CheckOnceResult@68,f
  4931  028D  0256               	subwf	CheckOnceResult@68,w
  4932  028E  1803               	btfsc	3,0
  4933  028F  0008               	return
  4934  0290  29B6               	goto	l4666
  4935  0291                     __end_of_CheckOnceResult:	
  4936  0291                     __ptext38:	
  4937 ;; *************** function _KeyIsIn *****************
  4938 ;; Defined at:
  4939 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  45              1    wreg     unsigned char 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  45              1    4[COMMON] unsigned char 
  4944 ;;  46              1    3[COMMON] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      unsigned char 
  4947 ;; Registers used:
  4948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 300/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4954 ;;      Params:         0       0       0       0
  4955 ;;      Locals:         2       0       0       0
  4956 ;;      Temps:          0       0       0       0
  4957 ;;      Totals:         2       0       0       0
  4958 ;;Total ram usage:        2 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    2
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_KeyClearIn
  4965 ;;		_CheckOnceResult
  4966 ;;		_CheckKeyOldValue
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           
  4971                           ;psect for function _KeyIsIn
  4972  0291                     _KeyIsIn:	
  4973                           
  4974                           ;incstack = 0
  4975                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4976                           ;KeyIsIn@45 stored from wreg
  4977  0291  00F4               	movwf	KeyIsIn@45
  4978  0292  3907               	andlw	7
  4979  0293  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4980  0294  0084               	movwf	4
  4981  0295  158A  2000  118A   	fcall	stringdir
  4982  0298  00F3               	movwf	KeyIsIn@46
  4983  0299  1DF4               	btfss	KeyIsIn@45,3
  4984  029A  2A9F               	goto	l3036
  4985  029B  1283               	bcf	3,5	;RP0=0, select bank0
  4986  029C  1303               	bcf	3,6	;RP1=0, select bank0
  4987  029D  082F               	movf	_KeyFlag+1,w	;volatile
  4988  029E  2AA2               	goto	L20
  4989  029F                     l3036:	
  4990  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4991  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  4992  02A1  082E               	movf	_KeyFlag,w	;volatile
  4993  02A2                     L20:	
  4994  02A2  05F3               	andwf	KeyIsIn@46,f
  4995  02A3  0873               	movf	KeyIsIn@46,w
  4996  02A4  0008               	return
  4997  02A5                     __end_of_KeyIsIn:	
  4998  02A5                     __ptext36:	
  4999 ;; *************** function _KeyClearOne *****************
  5000 ;; Defined at:
  5001 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  49              1    wreg     unsigned char 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  49              1    3[COMMON] unsigned char 
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5015 ;;      Params:         0       0       0       0
  5016 ;;      Locals:         1       0       0       0
  5017 ;;      Temps:          0       0       0       0
  5018 ;;      Totals:         1       0       0       0
  5019 ;;Total ram usage:        1 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    2
  5022 ;; This function calls:
  5023 ;;		Nothing
  5024 ;; This function is called by:
  5025 ;;		_KeyClearIn
  5026 ;;		_KeyStopClear
  5027 ;;		_CheckOnceResult
  5028 ;;		_SystemEnterSleep
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _KeyClearOne
  5034  02A5                     _KeyClearOne:	
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  5038                           ;KeyClearOne@49 stored from wreg
  5039  02A5  00F3               	movwf	KeyClearOne@49
  5040  02A6  1003               	clrc
  5041  02A7  0D73               	rlf	KeyClearOne@49,w
  5042  02A8  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5043  02A9  0084               	movwf	4
  5044  02AA  1383               	bcf	3,7	;select IRP bank1
  5045  02AB  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5046  02AD  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5047  02AE  0084               	movwf	4
  5048  02AF  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5049  02B1  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5050  02B2  0084               	movwf	4
  5051  02B3  23E7               	fcall	PL22	;call to abstracted procedure
  5052  02B4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5053  02B5  0084               	movwf	4
  5054  02B6  0180               	clrf	0
  5055  02B7  0A84               	incf	4,f
  5056  02B8  0180               	clrf	0	;# 
  5057  02B9  0008               	return
  5058  02BA                     __end_of_KeyClearOne:	
  5059  02BA                     __ptext35:	
  5060 ;; *************** function _KeyHave *****************
  5061 ;; Defined at:
  5062 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;  58              1    wreg     unsigned char 
  5065 ;;  59              2    3[COMMON] unsigned int 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  58              1    5[COMMON] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, status,2, status,0
  5072 ;; Tracked objects:
  5073 ;;		On entry : B00/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5077 ;;      Params:         2       0       0       0
  5078 ;;      Locals:         1       0       0       0
  5079 ;;      Temps:          0       0       0       0
  5080 ;;      Totals:         3       0       0       0
  5081 ;;Total ram usage:        3 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    2
  5084 ;; This function calls:
  5085 ;;		Nothing
  5086 ;; This function is called by:
  5087 ;;		_CheckOnceResult
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _KeyHave
  5093  02BA                     _KeyHave:	
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5097                           ;KeyHave@58 stored from wreg
  5098  02BA  00F5               	movwf	KeyHave@58
  5099  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  5100  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  5101  02BD  0AB4               	incf	_KeyCounter,f
  5102  02BE  01F9               	clrf	_KeyData	;volatile
  5103  02BF  01FA               	clrf	_KeyData+1	;volatile
  5104  02C0  1DF5               	btfss	KeyHave@58,3
  5105  02C1  2AC5               	goto	l3188
  5106  02C2  0873               	movf	KeyHave@59,w
  5107  02C3  00FA               	movwf	_KeyData+1	;volatile
  5108  02C4  0008               	return
  5109  02C5                     l3188:	
  5110  02C5  0873               	movf	KeyHave@59,w
  5111  02C6  00F9               	movwf	_KeyData	;volatile
  5112  02C7  0008               	return
  5113  02C8                     __end_of_KeyHave:	
  5114  02C8                     __ptext37:	
  5115 ;; *************** function _CheckKeyOldValue *****************
  5116 ;; Defined at:
  5117 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  80              2    2[BANK0 ] unsigned int 
  5122 ;;  79              2    0[BANK0 ] unsigned int 
  5123 ;;  78              1    4[BANK0 ] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5133 ;;      Params:         0       0       0       0
  5134 ;;      Locals:         0       5       0       0
  5135 ;;      Temps:          2       0       0       0
  5136 ;;      Totals:         2       5       0       0
  5137 ;;Total ram usage:        7 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    3
  5140 ;; This function calls:
  5141 ;;		_KeyIsIn
  5142 ;; This function is called by:
  5143 ;;		_CheckTouchKey
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _CheckKeyOldValue
  5149  02C8                     _CheckKeyOldValue:	
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5153  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5154  02C9  3004               	movlw	4
  5155  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5156  02CB  01CE               	clrf	CheckKeyOldValue@78
  5157  02CC  0AB2               	incf	CheckKeyOldValue@F77,f
  5158  02CD  0232               	subwf	CheckKeyOldValue@F77,w
  5159  02CE  1C03               	btfss	3,0
  5160  02CF  0008               	return
  5161  02D0  01B2               	clrf	CheckKeyOldValue@F77
  5162  02D1                     l3618:	
  5163  02D1  1003               	clrc
  5164  02D2  0D4E               	rlf	CheckKeyOldValue@78,w
  5165  02D3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5166  02D4  0084               	movwf	4
  5167  02D5  1383               	bcf	3,7	;select IRP bank1
  5168  02D6  0800               	movf	0,w
  5169  02D7  00CA               	movwf	CheckKeyOldValue@79
  5170  02D8  0A84               	incf	4,f
  5171  02D9  0800               	movf	0,w
  5172  02DA  00CB               	movwf	CheckKeyOldValue@79+1
  5173  02DB  084E               	movf	CheckKeyOldValue@78,w
  5174  02DC  2291  118A         	fcall	_KeyIsIn
  5175  02DE  3A00               	xorlw	0
  5176  02DF  1003               	clrc
  5177  02E0  1D03               	skipz
  5178  02E1  2B16               	goto	L19
  5179  02E2  0D4E               	rlf	CheckKeyOldValue@78,w
  5180  02E3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5181  02E4  0084               	movwf	4
  5182  02E5  1383               	bcf	3,7	;select IRP bank1
  5183  02E6  239B  118A         	fcall	PL2	;call to abstracted procedure
  5184  02E8  1903               	skipnz
  5185  02E9  024C               	subwf	CheckKeyOldValue@80,w
  5186  02EA  1C03               	skipc
  5187  02EB  2AF2               	goto	L16
  5188  02EC  0F4C               	incfsz	CheckKeyOldValue@80,w
  5189  02ED  2B15               	goto	l1338
  5190  02EE  0A4D               	incf	CheckKeyOldValue@80+1,w
  5191  02EF  1003               	clrc
  5192  02F0  1D03               	btfss	3,2
  5193  02F1  2B16               	goto	L19
  5194  02F2                     L16:	
  5195  02F2  0D4E               	rlf	CheckKeyOldValue@78,w
  5196  02F3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5197  02F4  0084               	movwf	4
  5198  02F5  239B  118A         	fcall	PL2	;call to abstracted procedure
  5199  02F7  1903               	skipnz
  5200  02F8  024C               	subwf	CheckKeyOldValue@80,w
  5201  02F9  1C03               	skipc
  5202  02FA  2B01               	goto	L17
  5203  02FB  0F4C               	incfsz	CheckKeyOldValue@80,w
  5204  02FC  2B15               	goto	l1338
  5205  02FD  0A4D               	incf	CheckKeyOldValue@80+1,w
  5206  02FE  1003               	clrc
  5207  02FF  1D03               	btfss	3,2
  5208  0300  2B16               	goto	L19
  5209  0301                     L17:	
  5210  0301  0D4E               	rlf	CheckKeyOldValue@78,w
  5211  0302  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5212  0303  0084               	movwf	4
  5213  0304  239B  118A         	fcall	PL2	;call to abstracted procedure
  5214  0306  1903               	skipnz
  5215  0307  024C               	subwf	CheckKeyOldValue@80,w
  5216  0308  1C03               	skipc
  5217  0309  2B10               	goto	L18
  5218  030A  0F4C               	incfsz	CheckKeyOldValue@80,w
  5219  030B  2B15               	goto	l1338
  5220  030C  0A4D               	incf	CheckKeyOldValue@80+1,w
  5221  030D  1003               	clrc
  5222  030E  1D03               	btfss	3,2
  5223  030F  2B16               	goto	L19
  5224  0310                     L18:	
  5225  0310  0D4E               	rlf	CheckKeyOldValue@78,w
  5226  0311  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5227  0312  0084               	movwf	4
  5228  0313  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5229  0315                     l1338:	
  5230  0315  1003               	clrc
  5231  0316                     L19:	
  5232  0316  0D4E               	rlf	CheckKeyOldValue@78,w
  5233  0317  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5234  0318  0084               	movwf	4
  5235  0319  1383               	bcf	3,7	;select IRP bank0
  5236  031A  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5237  031C  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5238  031D  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5239  031F  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5240  0321  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5241  0322  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5242  0324  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5243  0326  3002               	movlw	2
  5244  0327  0ACE               	incf	CheckKeyOldValue@78,f
  5245  0328  024E               	subwf	CheckKeyOldValue@78,w
  5246  0329  1803               	btfsc	3,0
  5247  032A  0008               	return
  5248  032B  2AD1               	goto	l3618
  5249  032C                     __end_of_CheckKeyOldValue:	
  5250  032C                     __ptext30:	
  5251 ;; *************** function _KeyStopClear *****************
  5252 ;; Defined at:
  5253 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;		None
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  53              1    4[COMMON] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  1    wreg      void 
  5260 ;; Registers used:
  5261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5267 ;;      Params:         0       0       0       0
  5268 ;;      Locals:         1       0       0       0
  5269 ;;      Temps:          0       0       0       0
  5270 ;;      Totals:         1       0       0       0
  5271 ;;Total ram usage:        1 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    3
  5274 ;; This function calls:
  5275 ;;		_KeyClearOne
  5276 ;; This function is called by:
  5277 ;;		_CheckTouchKey
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           
  5282                           ;psect for function _KeyStopClear
  5283  032C                     _KeyStopClear:	
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5287  032C  1283               	bcf	3,5	;RP0=0, select bank0
  5288  032D  1303               	bcf	3,6	;RP1=0, select bank0
  5289  032E  01AE               	clrf	_KeyFlag	;volatile
  5290  032F  01AF               	clrf	_KeyFlag+1	;volatile
  5291  0330  01F4               	clrf	KeyStopClear@53
  5292  0331                     l3530:	
  5293  0331  1003               	clrc
  5294  0332  0D74               	rlf	KeyStopClear@53,w
  5295  0333  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5296  0334  0084               	movwf	4
  5297  0335  1383               	bcf	3,7	;select IRP bank1
  5298  0336  0180               	clrf	0
  5299  0337  0A84               	incf	4,f
  5300  0338  0180               	clrf	0
  5301  0339  0874               	movf	KeyStopClear@53,w
  5302  033A  22A5  118A         	fcall	_KeyClearOne
  5303  033C  3002               	movlw	2
  5304  033D  0AF4               	incf	KeyStopClear@53,f
  5305  033E  0274               	subwf	KeyStopClear@53,w
  5306  033F  1803               	btfsc	3,0
  5307  0340  0008               	return
  5308  0341  2B31               	goto	l3530
  5309  0342                     __end_of_KeyStopClear:	
  5310  0342                     __ptext28:	
  5311 ;; *************** function _TurnKeyFlags *****************
  5312 ;; Defined at:
  5313 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  1    wreg      void 
  5320 ;; Registers used:
  5321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5327 ;;      Params:         0       0       0       0
  5328 ;;      Locals:         0       0       0       0
  5329 ;;      Temps:          0       0       0       0
  5330 ;;      Totals:         0       0       0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    4
  5334 ;; This function calls:
  5335 ;;		_KeyClearIn
  5336 ;; This function is called by:
  5337 ;;		_CheckTouchKey
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _TurnKeyFlags
  5343  0342                     _TurnKeyFlags:	
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5347  0342  087A               	movf	_KeyData+1,w	;volatile
  5348  0343  0479               	iorwf	_KeyData,w	;volatile
  5349  0344  1903               	btfsc	3,2
  5350  0345  2B66               	goto	l3678
  5351  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0348  01B0               	clrf	TurnKeyFlags@F84
  5354  0349  0879               	movf	_KeyData,w	;volatile
  5355  034A  0624               	xorwf	_KeyOldData,w	;volatile
  5356  034B  1D03               	skipz
  5357  034C  2B5F               	goto	l1356
  5358  034D  087A               	movf	_KeyData+1,w	;volatile
  5359  034E  0625               	xorwf	_KeyOldData+1,w	;volatile
  5360  034F  1D03               	skipz
  5361  0350  2B5F               	goto	l1356
  5362  0351  3002               	movlw	2
  5363  0352  0AB1               	incf	TurnKeyFlags@F83,f
  5364  0353  0231               	subwf	TurnKeyFlags@F83,w
  5365  0354  1C03               	skipc
  5366  0355  0008               	return
  5367  0356  01B1               	clrf	TurnKeyFlags@F83
  5368  0357  0879               	movf	_KeyData,w	;volatile
  5369  0358  00AE               	movwf	_KeyFlag	;volatile
  5370  0359  087A               	movf	_KeyData+1,w	;volatile
  5371  035A  00AF               	movwf	_KeyFlag+1	;volatile
  5372  035B  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5373  035C  0008               	return
  5374  035D  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5375  035E  2B8B               	ljmp	l3162
  5376  035F                     l1356:	
  5377  035F  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5378  0360  0879               	movf	_KeyData,w	;volatile
  5379  0361  00A4               	movwf	_KeyOldData	;volatile
  5380  0362  087A               	movf	_KeyData+1,w	;volatile
  5381  0363  00A5               	movwf	_KeyOldData+1	;volatile
  5382  0364  01B1               	clrf	TurnKeyFlags@F83
  5383  0365  0008               	return
  5384  0366                     l3678:	
  5385  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5386  0367  1303               	bcf	3,6	;RP1=0, select bank0
  5387  0368  01B1               	clrf	TurnKeyFlags@F83
  5388  0369  01A4               	clrf	_KeyOldData	;volatile
  5389  036A  01A5               	clrf	_KeyOldData+1	;volatile
  5390  036B  3002               	movlw	2
  5391  036C  0AB0               	incf	TurnKeyFlags@F84,f
  5392  036D  0230               	subwf	TurnKeyFlags@F84,w
  5393  036E  1C03               	skipc
  5394  036F  0008               	return
  5395  0370  01B0               	clrf	TurnKeyFlags@F84
  5396  0371  01AE               	clrf	_KeyFlag	;volatile
  5397  0372  01AF               	clrf	_KeyFlag+1	;volatile
  5398  0373  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5399  0374  0008               	return
  5400  0375                     __end_of_TurnKeyFlags:	
  5401  0375                     __ptext33:	
  5402 ;; *************** function _CheckValidTime *****************
  5403 ;; Defined at:
  5404 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5418 ;;      Params:         0       0       0       0
  5419 ;;      Locals:         0       0       0       0
  5420 ;;      Temps:          0       0       0       0
  5421 ;;      Totals:         0       0       0       0
  5422 ;;Total ram usage:        0 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    2
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_CheckTouchKey
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function _CheckValidTime
  5434  0375                     _CheckValidTime:	
  5435  0375                     l3688:	
  5436                           ;incstack = 0
  5437                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5438                           
  5439  0375  1283               	bcf	3,5	;RP0=0, select bank0
  5440  0376  1303               	bcf	3,6	;RP1=0, select bank0
  5441  0377  082F               	movf	_KeyFlag+1,w	;volatile
  5442  0378  042E               	iorwf	_KeyFlag,w	;volatile
  5443  0379  1903               	btfsc	3,2
  5444  037A  2B87               	goto	l3694
  5445  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5446  037C  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5447  037D  1903               	skipnz
  5448  037E  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5449  037F  303A               	movlw	58
  5450  0380  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5451  0381  3098               	movlw	152
  5452  0382  1903               	skipnz
  5453  0383  0230               	subwf	CheckValidTime@F87^(0+128),w
  5454  0384  1C03               	skipc
  5455  0385  0008               	return
  5456  0386  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5457  0387                     l3694:	
  5458  0387  1683               	bsf	3,5	;RP0=1, select bank1
  5459  0388  01B0               	clrf	CheckValidTime@F87^(0+128)
  5460  0389  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5461  038A  0008               	return
  5462  038B                     __end_of_CheckValidTime:	
  5463  038B                     __ptext29:	
  5464 ;; *************** function _KeyClearIn *****************
  5465 ;; Defined at:
  5466 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  51              1    5[COMMON] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 300/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5480 ;;      Params:         0       0       0       0
  5481 ;;      Locals:         1       0       0       0
  5482 ;;      Temps:          0       0       0       0
  5483 ;;      Totals:         1       0       0       0
  5484 ;;Total ram usage:        1 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    3
  5487 ;; This function calls:
  5488 ;;		_KeyClearOne
  5489 ;;		_KeyIsIn
  5490 ;; This function is called by:
  5491 ;;		_TurnKeyFlags
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _KeyClearIn
  5497  038B                     _KeyClearIn:	
  5498  038B                     l3162:	
  5499                           ;incstack = 0
  5500                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5501                           
  5502  038B  01F5               	clrf	KeyClearIn@51
  5503  038C                     l3168:	
  5504  038C  0875               	movf	KeyClearIn@51,w
  5505  038D  2291  118A         	fcall	_KeyIsIn
  5506  038F  3A00               	xorlw	0
  5507  0390  1D03               	skipz
  5508  0391  2B95               	goto	l3172
  5509  0392  0875               	movf	KeyClearIn@51,w
  5510  0393  22A5  118A         	fcall	_KeyClearOne
  5511  0395                     l3172:	
  5512  0395  3002               	movlw	2
  5513  0396  0AF5               	incf	KeyClearIn@51,f
  5514  0397  0275               	subwf	KeyClearIn@51,w
  5515  0398  1803               	btfsc	3,0
  5516  0399  0008               	return
  5517  039A  2B8C               	goto	l3168
  5518  039B                     __end_of_KeyClearIn:	
  5519  039B                     PL2:	
  5520  039B  0800               	movf	0,w
  5521  039C  00CC               	movwf	CheckKeyOldValue@80
  5522  039D  0A84               	incf	4,f
  5523  039E  0800               	movf	0,w
  5524  039F  00CD               	movwf	CheckKeyOldValue@80+1
  5525  03A0  084A               	movf	CheckKeyOldValue@79,w
  5526  03A1  02CC               	subwf	CheckKeyOldValue@80,f
  5527  03A2  084B               	movf	CheckKeyOldValue@79+1,w
  5528  03A3  1C03               	skipc
  5529  03A4  03CD               	decf	CheckKeyOldValue@80+1,f
  5530  03A5  02CD               	subwf	CheckKeyOldValue@80+1,f
  5531  03A6  3000               	movlw	0
  5532  03A7  024D               	subwf	CheckKeyOldValue@80+1,w
  5533  03A8  3402               	retlw	2
  5534  03A9                     __end_ofPL2:	
  5535  03A9                     PL4:	
  5536  03A9  00CA               	movwf	??_CheckOnceResult
  5537  03AA  0A84               	incf	4,f
  5538  03AB  0800               	movf	0,w
  5539  03AC  00CB               	movwf	??_CheckOnceResult+1
  5540  03AD  0853               	movf	CheckOnceResult@69,w
  5541  03AE  074A               	addwf	??_CheckOnceResult,w
  5542  03AF  00CC               	movwf	??_CheckOnceResult+2
  5543  03B0  084B               	movf	??_CheckOnceResult+1,w
  5544  03B1  1803               	skipnc
  5545  03B2  0A4B               	incf	??_CheckOnceResult+1,w
  5546  03B3  00CD               	movwf	??_CheckOnceResult+3
  5547  03B4  0855               	movf	CheckOnceResult@71+1,w
  5548  03B5  024D               	subwf	??_CheckOnceResult+3,w
  5549  03B6  1D03               	skipz
  5550  03B7  0008               	return
  5551  03B8  0854               	movf	CheckOnceResult@71,w
  5552  03B9  024C               	subwf	??_CheckOnceResult+2,w
  5553  03BA  0008               	return
  5554  03BB                     __end_ofPL4:	
  5555  03BB                     PL8:	
  5556  03BB  0084               	movwf	4
  5557  03BC  0800               	movf	0,w
  5558  03BD  00CA               	movwf	??_CheckOnceResult
  5559  03BE  0A84               	incf	4,f
  5560  03BF  0800               	movf	0,w
  5561  03C0  00CB               	movwf	??_CheckOnceResult+1
  5562  03C1  0008               	return
  5563  03C2                     __end_ofPL8:	
  5564  03C2                     PL10:	
  5565  03C2  0084               	movwf	4
  5566  03C3  0874               	movf	??_SystemEnterSleep,w
  5567  03C4  0080               	movwf	0
  5568  03C5  0A84               	incf	4,f
  5569  03C6  0875               	movf	??_SystemEnterSleep+1,w
  5570  03C7  0080               	movwf	0
  5571  03C8  1003               	clrc
  5572  03C9  0D55               	rlf	SystemEnterSleep@91,w
  5573  03CA  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5574  03CB  0084               	movwf	4
  5575  03CC  0008               	return
  5576  03CD                     __end_ofPL10:	
  5577  03CD                     PL12:	
  5578  03CD  0084               	movwf	4
  5579  03CE  0875               	movf	??_CheckKeyOldValue,w
  5580  03CF  0080               	movwf	0
  5581  03D0  0A84               	incf	4,f
  5582  03D1  0876               	movf	??_CheckKeyOldValue+1,w
  5583  03D2  0080               	movwf	0
  5584  03D3  1003               	clrc
  5585  03D4  0D4E               	rlf	CheckKeyOldValue@78,w
  5586  03D5  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5587  03D6  0084               	movwf	4
  5588  03D7  0008               	return
  5589  03D8                     __end_ofPL12:	
  5590  03D8                     PL16:	
  5591  03D8  0084               	movwf	4
  5592  03D9  0800               	movf	0,w
  5593  03DA  00F4               	movwf	??_SystemEnterSleep
  5594  03DB  0A84               	incf	4,f
  5595  03DC  0800               	movf	0,w
  5596  03DD  00F5               	movwf	??_SystemEnterSleep+1
  5597  03DE  0008               	return
  5598  03DF                     __end_ofPL16:	
  5599  03DF                     PL20:	
  5600  03DF  0800               	movf	0,w
  5601  03E0  00F5               	movwf	??_CheckKeyOldValue
  5602  03E1  0A84               	incf	4,f
  5603  03E2  0800               	movf	0,w
  5604  03E3  00F6               	movwf	??_CheckKeyOldValue+1
  5605  03E4  1003               	clrc
  5606  03E5  0D4E               	rlf	CheckKeyOldValue@78,w
  5607  03E6  0008               	return
  5608  03E7                     __end_ofPL20:	
  5609  03E7                     PL22:	
  5610  03E7  0180               	clrf	0
  5611  03E8  0A84               	incf	4,f
  5612  03E9  0180               	clrf	0
  5613  03EA  1003               	clrc
  5614  03EB  0D73               	rlf	KeyClearOne@49,w
  5615  03EC  0008               	return
  5616  03ED                     __end_ofPL22:	
  5617  03ED                     PL26:	
  5618  03ED  3041               	movlw	65
  5619  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  5620  03EF  0095               	movwf	21	;volatile
  5621  03F0  1415               	bsf	21,0	;volatile
  5622  03F1  0196               	clrf	22	;volatile
  5623  03F2  0008               	return
  5624  03F3                     __end_ofPL26:	
  5625  03F3                     PL30:	
  5626  03F3  084A               	movf	CheckKeyOldValue@79,w
  5627  03F4  0080               	movwf	0
  5628  03F5  0A84               	incf	4,f
  5629  03F6  084B               	movf	CheckKeyOldValue@79+1,w
  5630  03F7  0080               	movwf	0
  5631  03F8  0008               	return
  5632  03F9                     __end_ofPL30:	
  5633  03F9                     PL32:	
  5634  03F9  01D5               	clrf	SystemEnterSleep@91
  5635  03FA  01D3               	clrf	SystemEnterSleep@92
  5636  03FB  0AD3               	incf	SystemEnterSleep@92,f
  5637  03FC  01D4               	clrf	SystemEnterSleep@92+1
  5638  03FD  0008               	return
  5639  03FE                     __end_ofPL32:	
  5640  03FE                     PL34:	
  5641  03FE  0DD3               	rlf	SystemEnterSleep@92,f
  5642  03FF  0DD4               	rlf	SystemEnterSleep@92+1,f
  5643  0400  0AD5               	incf	SystemEnterSleep@91,f
  5644  0401  0255               	subwf	SystemEnterSleep@91,w
  5645  0402  0008               	return
  5646  0403                     __end_ofPL34:	
  5647  0403                     __ptext24:	
  5648 ;; *************** function _Refurbish_Sfr *****************
  5649 ;; Defined at:
  5650 ;;		line 117 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;		None
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;		None
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 200/0
  5661 ;;		On exit  : 300/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5664 ;;      Params:         0       0       0       0
  5665 ;;      Locals:         0       0       0       0
  5666 ;;      Temps:          0       0       0       0
  5667 ;;      Totals:         0       0       0       0
  5668 ;;Total ram usage:        0 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    2
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_WorkSleep
  5675 ;;		_main
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           
  5680                           ;psect for function _Refurbish_Sfr
  5681  0403                     _Refurbish_Sfr:	
  5682                           
  5683                           ;main.c: 120: PIE1 = 2;
  5684                           
  5685                           ;incstack = 0
  5686                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5687  0403  3002               	movlw	2
  5688  0404  1283               	bcf	3,5	;RP0=0, select bank0
  5689  0405  008E               	movwf	14	;volatile
  5690                           
  5691                           ;main.c: 121: PR2 = 250;
  5692  0406  30FA               	movlw	250
  5693  0407  0091               	movwf	17	;volatile
  5694                           
  5695                           ;main.c: 122: INTCON = 0XC0;
  5696  0408  30C0               	movlw	192
  5697  0409  008B               	movwf	11	;volatile
  5698                           
  5699                           ;main.c: 123: if (4 != T2CON)
  5700  040A  3004               	movlw	4
  5701  040B  0613               	xorwf	19,w	;volatile
  5702  040C  1903               	btfsc	3,2
  5703  040D  0008               	return
  5704                           
  5705                           ;main.c: 124: T2CON = 4;
  5706  040E  3004               	movlw	4
  5707  040F  0093               	movwf	19	;volatile
  5708  0410  0008               	return
  5709  0411                     __end_of_Refurbish_Sfr:	
  5710                           
  5711                           	psect	text39
  5712  0E55                     __ptext39:	
  5713 ;; *************** function _Isr_Timer *****************
  5714 ;; Defined at:
  5715 ;;		line 197 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;		None
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  1    wreg      void 
  5722 ;; Registers used:
  5723 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 300/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5729 ;;      Params:         0       0       0       0
  5730 ;;      Locals:         0       0       0       0
  5731 ;;      Temps:          3       0       0       0
  5732 ;;      Totals:         3       0       0       0
  5733 ;;Total ram usage:        3 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		_ledShow
  5738 ;; This function is called by:
  5739 ;;		Interrupt level 1
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _Isr_Timer
  5745  0E55                     _Isr_Timer:	
  5746                           
  5747                           ;main.c: 199: if(TMR2IF)
  5748  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5749  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5750  0E57  1C8D               	btfss	13,1	;volatile
  5751  0E58  2E76               	goto	i1l4206
  5752                           
  5753                           ;main.c: 200: {
  5754                           ;main.c: 201: TMR2IF = 0;
  5755  0E59  108D               	bcf	13,1	;volatile
  5756                           
  5757                           ;main.c: 202: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  5758  0E5A  086E               	movf	_firstTime,w
  5759  0E5B  1D03               	btfss	3,2
  5760  0E5C  2E65               	goto	i1l4194
  5761  0E5D  0845               	movf	_workStep,w
  5762  0E5E  1D03               	btfss	3,2
  5763  0E5F  2E65               	goto	i1l4194
  5764  0E60  0844               	movf	_wuhuaFlag,w
  5765  0E61  1903               	btfsc	3,2
  5766  0E62  0840               	movf	_chrgFlag,w
  5767  0E63  1903               	btfsc	3,2
  5768  0E64  2E67               	goto	i1l4196
  5769  0E65                     i1l4194:	
  5770                           
  5771                           ;main.c: 203: {
  5772                           ;main.c: 204: ledShow();
  5773  0E65  2680  158A         	fcall	_ledShow
  5774  0E67                     i1l4196:	
  5775                           
  5776                           ;main.c: 205: }
  5777                           ;main.c: 206: if(++MainTime >= 64)
  5778  0E67  3040               	movlw	64
  5779  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5780  0E69  0AC7               	incf	_MainTime,f	;volatile
  5781  0E6A  0247               	subwf	_MainTime,w	;volatile
  5782  0E6B  1C03               	skipc
  5783  0E6C  2E77               	goto	i1l979
  5784                           
  5785                           ;main.c: 207: {
  5786                           ;main.c: 208: MainTime = 0;
  5787  0E6D  01C7               	clrf	_MainTime	;volatile
  5788                           
  5789                           ;main.c: 209: B_MainLoop = 1;
  5790  0E6E  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5791                           
  5792                           ;main.c: 210: if(++count1s >= 250)
  5793  0E6F  30FA               	movlw	250
  5794  0E70  0AC6               	incf	_count1s,f
  5795  0E71  0246               	subwf	_count1s,w
  5796  0E72  1C03               	skipc
  5797  0E73  2E77               	goto	i1l979
  5798                           
  5799                           ;main.c: 211: {
  5800                           ;main.c: 212: count1s = 0;
  5801  0E74  01C6               	clrf	_count1s
  5802  0E75  2E77               	goto	i1l979
  5803  0E76                     i1l4206:	
  5804                           
  5805                           ;main.c: 216: else
  5806                           ;main.c: 217: {
  5807                           ;main.c: 218: PIR1 = 0;
  5808  0E76  018D               	clrf	13	;volatile
  5809  0E77                     i1l979:	
  5810  0E77  0872               	movf	??_Isr_Timer+2,w
  5811  0E78  008A               	movwf	10
  5812  0E79  0871               	movf	??_Isr_Timer+1,w
  5813  0E7A  0084               	movwf	4
  5814  0E7B  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5815  0E7C  0083               	movwf	3
  5816  0E7D  0EFE               	swapf	126,f
  5817  0E7E  0E7E               	swapf	126,w
  5818  0E7F  0009               	retfie
  5819  0E80                     __end_of_Isr_Timer:	
  5820  0E80                     __ptext40:	
  5821 ;; *************** function _ledShow *****************
  5822 ;; Defined at:
  5823 ;;		line 371 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5832 ;; Tracked objects:
  5833 ;;		On entry : 300/0
  5834 ;;		On exit  : 200/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5837 ;;      Params:         0       0       0       0
  5838 ;;      Locals:         0       0       0       0
  5839 ;;      Temps:          0       0       0       0
  5840 ;;      Totals:         0       0       0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_Isr_Timer
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           
  5851                           ;psect for function _ledShow
  5852  0E80                     _ledShow:	
  5853                           
  5854                           ;main.c: 374: if(++ledCnt > 19)
  5855                           
  5856                           ;incstack = 0
  5857                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  5858  0E80  3014               	movlw	20
  5859  0E81  0ABB               	incf	_ledCnt,f
  5860  0E82  023B               	subwf	_ledCnt,w
  5861  0E83  1803               	btfsc	3,0
  5862                           
  5863                           ;main.c: 375: {
  5864                           ;main.c: 376: ledCnt = 0;
  5865  0E84  01BB               	clrf	_ledCnt
  5866                           
  5867                           ;main.c: 378: }
  5868                           ;main.c: 379: PORTA &= 0xE4;
  5869                           
  5870                           ;main.c: 380: PORTB &= 0xEF;
  5871                           
  5872                           ;main.c: 381: TRISA |= 0x1B;
  5873                           
  5874                           ;main.c: 382: TRISB |= 0x10;
  5875  0E85  158A  257E  158A   	fcall	PL14	;call to abstracted procedure
  5876                           
  5877                           ;main.c: 383: switch(ledCnt)
  5878  0E88  2F18               	goto	i1l3956
  5879  0E89                     i1l1011:	
  5880                           ;main.c: 387: case 1:
  5881                           
  5882                           
  5883                           ;main.c: 388: if(showNumShi & 0x01)
  5884  0E89  1C6D               	btfss	_showNumShi,0
  5885  0E8A  0008               	return
  5886                           
  5887                           ;main.c: 389: {
  5888                           ;main.c: 390: TRISA &= 0xFE;
  5889  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  5890  0E8C  1005               	bcf	5,0	;volatile
  5891                           
  5892                           ;main.c: 391: TRISA &= 0xEF;
  5893  0E8D  1205               	bcf	5,4	;volatile
  5894                           
  5895                           ;main.c: 392: RA4 = 1;
  5896  0E8E  1606               	bsf	6,4	;volatile
  5897  0E8F  0008               	return
  5898  0E90                     i1l1013:	
  5899                           ;main.c: 395: case 2:
  5900                           
  5901                           
  5902                           ;main.c: 396: if(showNumShi & 0x02)
  5903  0E90  1CED               	btfss	_showNumShi,1
  5904  0E91  0008               	return
  5905                           
  5906                           ;main.c: 397: {
  5907                           ;main.c: 398: TRISA &= 0xFE;
  5908  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  5909  0E93  1005               	bcf	5,0	;volatile
  5910                           
  5911                           ;main.c: 399: TRISA &= 0xF7;
  5912  0E94  1185               	bcf	5,3	;volatile
  5913                           
  5914                           ;main.c: 400: RA3 = 1;
  5915  0E95  1586               	bsf	6,3	;volatile
  5916  0E96  0008               	return
  5917  0E97                     i1l1015:	
  5918                           ;main.c: 403: case 3:
  5919                           
  5920                           
  5921                           ;main.c: 404: if(showNumShi & 0x04)
  5922  0E97  1D6D               	btfss	_showNumShi,2
  5923  0E98  0008               	return
  5924                           
  5925                           ;main.c: 405: {
  5926                           ;main.c: 406: TRISA &= 0xFE;
  5927  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  5928  0E9A  1005               	bcf	5,0	;volatile
  5929                           
  5930                           ;main.c: 407: TRISA &= 0xFD;
  5931  0E9B  1085               	bcf	5,1	;volatile
  5932                           
  5933                           ;main.c: 408: RA1 = 1;
  5934  0E9C  1486               	bsf	6,1	;volatile
  5935  0E9D  0008               	return
  5936  0E9E                     i1l1017:	
  5937                           ;main.c: 411: case 4:
  5938                           
  5939                           
  5940                           ;main.c: 412: if(showNumShi & 0x08)
  5941  0E9E  1DED               	btfss	_showNumShi,3
  5942  0E9F  0008               	return
  5943                           
  5944                           ;main.c: 413: {
  5945                           ;main.c: 414: TRISA &= 0xFE;
  5946  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  5947  0EA1  1005               	bcf	5,0	;volatile
  5948                           
  5949                           ;main.c: 415: TRISB &= 0xEF;
  5950                           
  5951                           ;main.c: 416: RB4 = 1;
  5952  0EA2  2F25               	ljmp	PL28	;call to abstracted procedure
  5953  0EA3                     i1l1019:	
  5954                           ;main.c: 419: case 5:
  5955                           
  5956                           
  5957                           ;main.c: 420: if(showNumShi & 0x10)
  5958  0EA3  1E6D               	btfss	_showNumShi,4
  5959  0EA4  0008               	return
  5960                           
  5961                           ;main.c: 421: {
  5962                           ;main.c: 422: TRISA &= 0xEF;
  5963  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  5964  0EA6  1205               	bcf	5,4	;volatile
  5965                           
  5966                           ;main.c: 423: TRISA &= 0xFE;
  5967  0EA7  1005               	bcf	5,0	;volatile
  5968                           
  5969                           ;main.c: 424: RA0 = 1;
  5970  0EA8  1406               	bsf	6,0	;volatile
  5971  0EA9  0008               	return
  5972  0EAA                     i1l1021:	
  5973                           ;main.c: 427: case 6:
  5974                           
  5975                           
  5976                           ;main.c: 428: if(showNumShi & 0x20)
  5977  0EAA  1EED               	btfss	_showNumShi,5
  5978  0EAB  0008               	return
  5979                           
  5980                           ;main.c: 429: {
  5981                           ;main.c: 430: TRISA &= 0xEF;
  5982  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  5983  0EAD  1205               	bcf	5,4	;volatile
  5984                           
  5985                           ;main.c: 431: TRISA &= 0xF7;
  5986  0EAE  1185               	bcf	5,3	;volatile
  5987                           
  5988                           ;main.c: 432: RA3 = 1;
  5989  0EAF  1586               	bsf	6,3	;volatile
  5990  0EB0  0008               	return
  5991  0EB1                     i1l1023:	
  5992                           ;main.c: 435: case 7:
  5993                           
  5994                           
  5995                           ;main.c: 436: if(showNumShi & 0x40)
  5996  0EB1  1F6D               	btfss	_showNumShi,6
  5997  0EB2  0008               	return
  5998                           
  5999                           ;main.c: 437: {
  6000                           ;main.c: 438: TRISA &= 0xEF;
  6001  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  6002  0EB4  1205               	bcf	5,4	;volatile
  6003                           
  6004                           ;main.c: 439: TRISA &= 0xFD;
  6005  0EB5  1085               	bcf	5,1	;volatile
  6006                           
  6007                           ;main.c: 440: RA1 = 1;
  6008  0EB6  1486               	bsf	6,1	;volatile
  6009  0EB7  0008               	return
  6010  0EB8                     i1l1025:	
  6011                           ;main.c: 443: case 8:
  6012                           
  6013                           
  6014                           ;main.c: 444: if(showNumGe & 0x01)
  6015  0EB8  1C6C               	btfss	_showNumGe,0
  6016  0EB9  0008               	return
  6017                           
  6018                           ;main.c: 445: {
  6019                           ;main.c: 446: TRISA &= 0xEF;
  6020  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  6021  0EBB  1205               	bcf	5,4	;volatile
  6022                           
  6023                           ;main.c: 447: TRISB &= 0xEF;
  6024                           
  6025                           ;main.c: 448: RB4 = 1;
  6026  0EBC  2F25               	ljmp	PL28	;call to abstracted procedure
  6027  0EBD                     i1l1027:	
  6028                           ;main.c: 451: case 9:
  6029                           
  6030                           
  6031                           ;main.c: 452: if(showNumGe & 0x02)
  6032  0EBD  1CEC               	btfss	_showNumGe,1
  6033  0EBE  0008               	return
  6034                           
  6035                           ;main.c: 453: {
  6036                           ;main.c: 454: TRISA &= 0xF7;
  6037  0EBF  1683               	bsf	3,5	;RP0=1, select bank1
  6038  0EC0  1185               	bcf	5,3	;volatile
  6039                           
  6040                           ;main.c: 455: TRISA &= 0xFE;
  6041  0EC1  1005               	bcf	5,0	;volatile
  6042                           
  6043                           ;main.c: 456: RA0 = 1;
  6044  0EC2  1406               	bsf	6,0	;volatile
  6045  0EC3  0008               	return
  6046  0EC4                     i1l1029:	
  6047                           ;main.c: 459: case 10:
  6048                           
  6049                           
  6050                           ;main.c: 460: if(showNumGe & 0x04)
  6051  0EC4  1D6C               	btfss	_showNumGe,2
  6052  0EC5  0008               	return
  6053                           
  6054                           ;main.c: 461: {
  6055                           ;main.c: 462: TRISA &= 0xF7;
  6056  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  6057  0EC7  1185               	bcf	5,3	;volatile
  6058                           
  6059                           ;main.c: 463: TRISA &= 0xEF;
  6060  0EC8  1205               	bcf	5,4	;volatile
  6061                           
  6062                           ;main.c: 464: RA4 = 1;
  6063  0EC9  1606               	bsf	6,4	;volatile
  6064  0ECA  0008               	return
  6065  0ECB                     i1l1031:	
  6066                           ;main.c: 467: case 11:
  6067                           
  6068                           
  6069                           ;main.c: 468: if(showNumGe & 0x08)
  6070  0ECB  1DEC               	btfss	_showNumGe,3
  6071  0ECC  0008               	return
  6072                           
  6073                           ;main.c: 469: {
  6074                           ;main.c: 470: TRISA &= 0xF7;
  6075  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  6076  0ECE  1185               	bcf	5,3	;volatile
  6077                           
  6078                           ;main.c: 471: TRISA &= 0xFD;
  6079  0ECF  1085               	bcf	5,1	;volatile
  6080                           
  6081                           ;main.c: 472: RA1 = 1;
  6082  0ED0  1486               	bsf	6,1	;volatile
  6083  0ED1  0008               	return
  6084  0ED2                     i1l1033:	
  6085                           ;main.c: 475: case 12:
  6086                           
  6087                           
  6088                           ;main.c: 476: if(showNumGe & 0x10)
  6089  0ED2  1E6C               	btfss	_showNumGe,4
  6090  0ED3  0008               	return
  6091                           
  6092                           ;main.c: 477: {
  6093                           ;main.c: 478: TRISA &= 0xF7;
  6094  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  6095  0ED5  1185               	bcf	5,3	;volatile
  6096                           
  6097                           ;main.c: 479: TRISB &= 0xEF;
  6098                           
  6099                           ;main.c: 480: RB4 = 1;
  6100  0ED6  2F25               	ljmp	PL28	;call to abstracted procedure
  6101  0ED7                     i1l1035:	
  6102                           ;main.c: 483: case 13:
  6103                           
  6104                           
  6105                           ;main.c: 484: if(showNumGe & 0x20)
  6106  0ED7  1EEC               	btfss	_showNumGe,5
  6107  0ED8  0008               	return
  6108                           
  6109                           ;main.c: 485: {
  6110                           ;main.c: 486: TRISA &= 0xFD;
  6111  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  6112  0EDA  1085               	bcf	5,1	;volatile
  6113                           
  6114                           ;main.c: 487: TRISA &= 0xFE;
  6115  0EDB  1005               	bcf	5,0	;volatile
  6116                           
  6117                           ;main.c: 488: RA0 = 1;
  6118  0EDC  1406               	bsf	6,0	;volatile
  6119  0EDD  0008               	return
  6120  0EDE                     i1l1037:	
  6121                           ;main.c: 491: case 14:
  6122                           
  6123                           
  6124                           ;main.c: 492: if(showNumGe & 0x40)
  6125  0EDE  1F6C               	btfss	_showNumGe,6
  6126  0EDF  0008               	return
  6127                           
  6128                           ;main.c: 493: {
  6129                           ;main.c: 494: TRISA &= 0xFD;
  6130  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  6131  0EE1  1085               	bcf	5,1	;volatile
  6132                           
  6133                           ;main.c: 495: TRISA &= 0xEF;
  6134  0EE2  1205               	bcf	5,4	;volatile
  6135                           
  6136                           ;main.c: 496: RA4 = 1;
  6137  0EE3  1606               	bsf	6,4	;volatile
  6138  0EE4  0008               	return
  6139  0EE5                     i1l3932:	
  6140                           
  6141                           ;main.c: 500: if(firstTime || showNumGe || showNumShi)
  6142  0EE5  086E               	movf	_firstTime,w
  6143  0EE6  1D03               	btfss	3,2
  6144  0EE7  2EED               	goto	i1l1042
  6145  0EE8  086C               	movf	_showNumGe,w
  6146  0EE9  1903               	btfsc	3,2
  6147  0EEA  086D               	movf	_showNumShi,w
  6148  0EEB  1903               	btfsc	3,2
  6149  0EEC  0008               	return
  6150  0EED                     i1l1042:	
  6151                           
  6152                           ;main.c: 501: {
  6153                           ;main.c: 502: TRISA &= 0xFD;
  6154  0EED  1683               	bsf	3,5	;RP0=1, select bank1
  6155  0EEE  1085               	bcf	5,1	;volatile
  6156                           
  6157                           ;main.c: 503: TRISA &= 0xF7;
  6158  0EEF  1185               	bcf	5,3	;volatile
  6159                           
  6160                           ;main.c: 504: RA3 = 1;
  6161  0EF0  1586               	bsf	6,3	;volatile
  6162  0EF1  0008               	return
  6163  0EF2                     i1l3938:	
  6164                           
  6165                           ;main.c: 508: if(firstTime > 0 || wuhuaFlag > 0)
  6166  0EF2  086E               	movf	_firstTime,w
  6167  0EF3  1903               	btfsc	3,2
  6168  0EF4  0844               	movf	_wuhuaFlag,w
  6169  0EF5  1903               	btfsc	3,2
  6170  0EF6  0008               	return
  6171                           
  6172                           ;main.c: 509: {
  6173                           ;main.c: 510: TRISA &= 0xFD;
  6174  0EF7  1683               	bsf	3,5	;RP0=1, select bank1
  6175  0EF8  1085               	bcf	5,1	;volatile
  6176                           
  6177                           ;main.c: 511: TRISB &= 0xEF;
  6178                           
  6179                           ;main.c: 512: RB4 = 1;
  6180  0EF9  2F25               	ljmp	PL28	;call to abstracted procedure
  6181  0EFA                     i1l3942:	
  6182                           
  6183                           ;main.c: 516: if(firstTime > 0 ||workStep > 0)
  6184  0EFA  086E               	movf	_firstTime,w
  6185  0EFB  1903               	btfsc	3,2
  6186  0EFC  0845               	movf	_workStep,w
  6187  0EFD  1903               	btfsc	3,2
  6188  0EFE  0008               	return
  6189                           
  6190                           ;main.c: 517: {
  6191                           ;main.c: 518: TRISB &= 0xEF;
  6192  0EFF  1205               	bcf	5,4	;volatile
  6193                           
  6194                           ;main.c: 519: TRISA &= 0xFE;
  6195  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  6196  0F01  1005               	bcf	5,0	;volatile
  6197                           
  6198                           ;main.c: 520: RA0 = 1;
  6199  0F02  1406               	bsf	6,0	;volatile
  6200  0F03  0008               	return
  6201  0F04                     i1l3946:	
  6202                           
  6203                           ;main.c: 524: if(firstTime > 0 ||fanKeyFlag > 0)
  6204  0F04  086E               	movf	_firstTime,w
  6205  0F05  1903               	btfsc	3,2
  6206  0F06  083A               	movf	_fanKeyFlag,w
  6207  0F07  1903               	btfsc	3,2
  6208  0F08  0008               	return
  6209                           
  6210                           ;main.c: 525: {
  6211                           ;main.c: 526: TRISB &= 0xEF;
  6212  0F09  1205               	bcf	5,4	;volatile
  6213                           
  6214                           ;main.c: 527: TRISA &= 0xEF;
  6215  0F0A  1683               	bsf	3,5	;RP0=1, select bank1
  6216  0F0B  1205               	bcf	5,4	;volatile
  6217                           
  6218                           ;main.c: 528: RA4 = 1;
  6219  0F0C  1606               	bsf	6,4	;volatile
  6220  0F0D  0008               	return
  6221  0F0E                     i1l3950:	
  6222                           
  6223                           ;main.c: 532: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  6224  0F0E  086E               	movf	_firstTime,w
  6225  0F0F  1903               	btfsc	3,2
  6226  0F10  0839               	movf	_wuhuaKeyFlag,w
  6227  0F11  1903               	btfsc	3,2
  6228  0F12  0008               	return
  6229                           
  6230                           ;main.c: 533: {
  6231                           ;main.c: 534: TRISB &= 0xEF;
  6232  0F13  1205               	bcf	5,4	;volatile
  6233                           
  6234                           ;main.c: 535: TRISA &= 0xFD;
  6235  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  6236  0F15  1085               	bcf	5,1	;volatile
  6237                           
  6238                           ;main.c: 536: RA1 = 1;
  6239  0F16  1486               	bsf	6,1	;volatile
  6240  0F17  0008               	return
  6241  0F18                     i1l3956:	
  6242  0F18  083B               	movf	_ledCnt,w
  6243                           
  6244                           ; Switch size 1, requested type "space"
  6245                           ; Number of cases is 20, Range of values is 0 to 19
  6246                           ; switch strategies available:
  6247                           ; Name         Instructions Cycles
  6248                           ; direct_byte           47     7 (fixed)
  6249                           ; simple_byte           61    31 (average)
  6250                           ; jumptable            260     6 (fixed)
  6251                           ;	Chosen strategy is direct_byte
  6252  0F19  0084               	movwf	4
  6253  0F1A  3014               	movlw	20
  6254  0F1B  0204               	subwf	4,w
  6255  0F1C  1803               	skipnc
  6256  0F1D  0008               	return
  6257  0F1E  3007               	movlw	high i1S5092
  6258  0F1F  008A               	movwf	10
  6259  0F20  1003               	clrc
  6260  0F21  0D04               	rlf	4,w
  6261  0F22  3ECD               	addlw	low i1S5092
  6262  0F23  0082               	movwf	2
  6263  0F24                     i1l1060:	
  6264  0F24  0008               	return
  6265  0F25                     __end_of_ledShow:	
  6266  007E                     btemp	set	126	;btemp
  6267  007E                     wtemp0	set	126
  6268  0F25                     PL28:	
  6269  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  6270  0F26  1205               	bcf	5,4	;volatile
  6271  0F27  1606               	bsf	6,4	;volatile
  6272  0F28  0008               	return
  6273  0F29                     __end_ofPL28:	
  6274                           
  6275                           	psect	intentry
  6276  0004                     __pintentry:	
  6277                           ;incstack = 0
  6278                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6279                           
  6280  0004                     interrupt_function:	
  6281  007E                     saved_w	set	btemp
  6282  0004  00FE               	movwf	btemp
  6283  0005  0E03               	swapf	3,w
  6284  0006  00F0               	movwf	??_Isr_Timer
  6285  0007  0804               	movf	4,w
  6286  0008  00F1               	movwf	??_Isr_Timer+1
  6287  0009  080A               	movf	10,w
  6288  000A  00F2               	movwf	??_Isr_Timer+2
  6289  000B  158A  2E55         	ljmp	_Isr_Timer
  6290                           
  6291                           	psect	swtext1
  6292  07CD                     __pswtext1:	
  6293  07CD                     i1S5092:	
  6294  07CD  158A  2F24         	ljmp	i1l1060
  6295  07CF  158A  2E89         	ljmp	i1l1011
  6296  07D1  158A  2E90         	ljmp	i1l1013
  6297  07D3  158A  2E97         	ljmp	i1l1015
  6298  07D5  158A  2E9E         	ljmp	i1l1017
  6299  07D7  158A  2EA3         	ljmp	i1l1019
  6300  07D9  158A  2EAA         	ljmp	i1l1021
  6301  07DB  158A  2EB1         	ljmp	i1l1023
  6302  07DD  158A  2EB8         	ljmp	i1l1025
  6303  07DF  158A  2EBD         	ljmp	i1l1027
  6304  07E1  158A  2EC4         	ljmp	i1l1029
  6305  07E3  158A  2ECB         	ljmp	i1l1031
  6306  07E5  158A  2ED2         	ljmp	i1l1033
  6307  07E7  158A  2ED7         	ljmp	i1l1035
  6308  07E9  158A  2EDE         	ljmp	i1l1037
  6309  07EB  158A  2EE5         	ljmp	i1l3932
  6310  07ED  158A  2EF2         	ljmp	i1l3938
  6311  07EF  158A  2EFA         	ljmp	i1l3942
  6312  07F1  158A  2F04         	ljmp	i1l3946
  6313  07F3  158A  2F0E         	ljmp	i1l3950


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         74
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      79
    BANK1            80      4      35
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_ClearResSum
    _SystemEnterSleep->_KeyClearOne
    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12877
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     538
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     939
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     939
                                              4 COMMON     2     2      0
                                              5 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3268
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              5 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              4 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     263
                                              0 BANK0      5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      65
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              5 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (4) _KeyIsIn                                              2     2      0      69
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (6) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      23       6       43.8%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7D       9        0.0%
ABS                  0      0      7D       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 29 14:23:41 2025

                        pc 0002                         PL2 039B                         PL4 03A9  
                       PL6 07A0                         PL8 03BB              ??_KeyClearOne 0073  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0073  
                      PL10 03C2                        PL20 03DF                        PL12 03CD  
                      PL30 03F3                        PL22 03E7                        PL14 0D7E  
                      PL40 07C9                        PL32 03F9                        PL24 07B8  
                      PL16 03D8                        PL34 03FE                        PL26 03ED  
                      PL18 07AF                        PL36 07BF                        PL28 0F25  
                      PL38 07C4                        l993 0664                        l999 06A0  
                      _RA0 0430                        _RA1 0431                        _RA3 0433  
                      _RA4 0434                        _RB4 0034                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0821  
       ??_GetTouchKeyValue 0074               ___ftdiv@cntr 0059               ___ftdiv@sign 005E  
                     l1003 06E6                       l1101 0E06                       l1112 073E  
                     l1106 0720                       l1070 0F45                       l1072 0F47  
                     l1085 0FBB                       l1069 0F49                       l1417 0482  
                     l1338 0315                       l3036 029F                       l1356 035F  
                     l3300 0E3D                       l1375 008A                       l4104 0DFF  
                     l1616 0544                       l1297 0175                       l3162 038B  
                     l5010 0099                       l4106 0E00                       l1562 05FB  
                     l1387 00A9                       l3172 0395                       l5020 00A2  
                     l3308 0E51                       l4300 064D                       l1574 061F  
                     l3168 038C                       l3530 0331                       l5018 009E  
                     l5026 00A8                       l3426 0E0A                       l4330 069C  
                     l4306 064E                       l5034 0D4B                       l3188 02C5  
                     l4420 0184                       l1668 0E2A                       l3292 0E37  
                     l4092 0DEE                       l4340 06EA                       l4324 0689  
                     l4316 066E                       l4422 0196                       l3278 0E24  
                     l4094 0DF0                       l4430 0498                       l5070 0D7A  
                     l4328 0694                       l4352 078F                       l3618 02D1  
                     l4274 01A1                       l4530 00DD                       l4442 05FF  
                     l4290 0642                       l4362 079B                       l4276 01A2  
                     l4452 061D                       l4444 0602                       l4292 0644  
                     l4620 0458                       l4390 013F                       l4518 00D6  
                     l4454 0614                       l4446 0607                       l4630 046E  
                     l4606 0423                       l4470 0751                       l4704 0243  
                     l4544 010A                       l4448 060F                       l4368 0769  
                     l4608 0425                       l4640 0479                       l4722 027B  
                     l4730 0289                       l4394 0145                       l4802 05C2  
                     l4634 0474                       l3860 0DA9                       l4548 0111  
                     l4564 0132                       l4804 05CC                       l4628 046C  
                     l4660 078E                       l4652 0782                       l4726 027F  
                     l4718 026F                       l3694 0387                       l3678 0366  
                     l4822 0FE4                       l4638 0478                       l4478 0764  
                     l4590 0741                       l4582 0722                       l4574 071B  
                     l4646 0779                       l4728 0283                       l3688 0375  
                     l3880 0DC6                       l3864 0DB0                       l3856 0DA4  
                     l4904 0F4C                       l4736 0536                       l4808 05DA  
                     l4576 071D                       l4666 01B6                       l3866 0DB2  
                     l3890 0DD5                       l4834 0FFB                       l4914 0F78  
                     l4658 078D                       l4684 020D                       l3876 0DC1  
                     l4940 0FAF                       l4908 0F62                       l4588 073C  
                     l3886 0DCF                       l4846 0046                       l4926 0F92  
                     l4758 0557                       l4774 0593                       l3888 0DD1  
                     l4880 0079                       l4928 0F95                       l4792 05B6  
                     l4776 0598                       l4698 023B                       l4938 0FAC  
                     l4892 0F2F                       l4796 05BE                       l4964 04EB  
                     l4990 0523                       l4974 04FF                       l4984 051A  
                     l4976 0500                       l4986 051D                       _ADON 04A8  
                     _CHS4 04B6                       _PIE1 000E                       _PIE2 0110  
                     u5115 025B                       u5045 01C3                       u5065 01FE  
                     u5225 059B                       u5075 0213                       u5315 0FED  
                     u4515 06DB                       _RAIF 006B                       u5085 021F  
                     _INTF 0059                       u4535 06F3                       _RBIE 005B  
                     _RBIF 0058                       u4465 068F                       u5195 0565  
                     u4475 069A                       u4725 0757                       u5545 0FCC  
                     _PIR1 000D                       _PIR2 010F                       u4945 0449  
                     u4795 0106                       u5757 063E                       _TMR0 0081  
                     _WPUB 0008                       _main 0D43               ___ftpack@arg 0073  
             ___ftpack@exp 0076                       _time 00BA                       btemp 007E  
            ?_KeyStopClear 0070                       start 000D               _TurnKeyFlags 0342  
          __end_of_KeyIsIn 02A5            __end_of_KeyHave 02C8               ___fttol@exp1 006B  
            ??_Init_System 0073               ___fttol@lval 0067            TurnKeyFlags@F83 0031  
          TurnKeyFlags@F84 0030                      ?_main 0070            __end_of___lbdiv 0E39  
          __end_of___lbmod 0E55            __end_of___ftdiv 058A            __end_of___fttol 05E3  
                    _IOCB0 0048                      _T2CON 0013   __end_of_SystemEnterSleep 0139  
          __end_of___lwdiv 1000            __end_of___lwmod 0769                      i1l979 0E77  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 0775                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 0779            __end_of_chrgCtr 0E0A        ___lmul@multiplicand 004E  
      __end_of_KeyClearOne 02BA            __end_of_ledShow 0F25                 _KeyClearIn 038B  
           fanCtr@fan_temp 0058              ___ftpack@sign 0077             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 079B                _ClearResSum 01A1  
               _KeyCounter 0034                 _KeyOldData 0024            __end_of_pwmStop 07A0  
           ??_KeyStopClear 0074                      status 0003                      wtemp0 007E  
          __end_of_workCtr 0528            ___lbdiv@divisor 0073                 _KeyUpShake 00BC  
          ___lbdiv@counter 0075            __initialization 000F               __end_of_main 0D7E  
                   ??_main 0078              ___fttol@sign1 0066        __end_of_Init_System 0041  
                   _ADCON0 0095                     _ADCON1 0096                     i1S5092 07CD  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 0631  
                   _GODONE 04A9                     i1l1011 0E89                     i1l1021 0EAA  
                   i1l1013 0E90                     i1l1031 0ECB                     i1l1023 0EB1  
                   i1l1015 0E97                     i1l1033 0ED2                     i1l1025 0EB8  
                   i1l1017 0E9E                     i1l1042 0EED                     i1l1035 0ED7  
                   i1l1027 0EBD                     i1l1019 0EA3                     i1l1060 0F24  
                   i1l1037 0EDE                     i1l1029 0EC4                     i1l4206 0E76  
                   i1l4194 0E65                     i1l4196 0E67                     i1l3932 0EE5  
                   i1l3950 0F0E                     i1l3942 0EFA                     i1l3946 0F04  
                   i1l3938 0EF2                     i1l3956 0F18                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 05F3         __size_of_KeyServer 004E  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD0L 0019  
                   _PWMD1L 001A               ??_ADC_Sample 0074                     _TRISB0 0028  
                   _TRISB6 002E                  ??_KeyIsIn 0073                  ??_KeyHave 0075  
            ClearResSum@56 0073         __size_of_Isr_Timer 002B  __size_of_CheckKeyOldValue 0064  
                   ___lmul 047E                     _b_kclr 03C2                     _b_kerr 03C1  
                   _fanCtr 0411                  ??___lbdiv 0074                  ??___lbmod 0074  
                ??___ftdiv 0056                  ??___fttol 0063                     _ledCnt 003B  
                ??___lwdiv 0077                  ??___lwmod 0077               _wuhuaKeyFlag 0039  
                ??_fanInit 0073                  ??_fanStop 0073                _KeyClearOne 02A5  
                ??_chrgCtr 0078                     _result 00B2                  ??_ledShow 0070  
         __end_of_numArray 0813              _Table_KeyFalg 0813              _Table_KeyDown 081B  
       __end_of_ADC_Sample 0701                     saved_w 007E     __size_of_CheckTouchKey 002D  
                ??_pwmInit 0073                  ??_pwmStop 0073                ?_KeyClearIn 0070  
                ??_workCtr 0078            _CheckOnceResult 01B0           ___lbdiv@dividend 0074  
         __end_of_wuhuaCtr 078F            ___lbmod@divisor 0073    __end_of__initialization 0021  
          ___lbmod@counter 0076         __size_of_WorkSleep 003B          CheckOnceResult@70 0050  
        CheckOnceResult@71 0054          CheckOnceResult@72 0051          CheckOnceResult@73 004E  
        CheckOnceResult@68 0056          CheckOnceResult@69 0053                 ___ftdiv@f1 0053  
               ___ftdiv@f2 0050                 ___ftdiv@f3 005A                 ___fttol@f1 005F  
           __pcstackCOMMON 0070               __pidataBANK0 0000                _Init_System 0024  
               __end_ofPL2 03A9                 __end_ofPL4 03BB                 __end_ofPL6 07AF  
               __end_ofPL8 03C2           ___lbdiv@quotient 0076          __end_of_KeyServer 0DD7  
               ___lwtoft@c 004D       __end_of_KeyStopClear 0342          __end_of_Isr_Timer 0E80  
               _fanKeyFlag 003A         __size_of_keyLedCtr 0044                 __pbssBANK0 0020  
               __pbssBANK1 00A0               _chrgFullFlag 003F  __size_of_GetTouchKeyValue 0068  
             _chrgFullTime 003E              _CheckTouchKey 007C                 __pmaintext 0D43  
                  ?___lmul 004A                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0073                  ?___ftpack 0073  
        __end_of_WorkSleep 007C                  ?___lwtoft 004D          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0291                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113                 _curBatStep 0037         ??_SystemEnterSleep 0074  
                  _B_OnOff 03C5                    _PWMD01H 001E     __size_of_Refurbish_Sfr 000E  
                  _PWMCON0 0015                    _PWMCON1 0016                    _PWMCON2 001D  
     __end_of_Table_KeyCap 081F                 __stringtab 0800               ?_ClearResSum 0070  
                  _KeyData 0079                    _KeyFlag 002E                    _KeyIsIn 0291  
                  _KeyHave 02BA             ?_CheckTouchKey 0070            ADC_Sample@adldo 0073  
          ADC_Sample@admax 0053            ADC_Sample@admin 0051            ADC_Sample@adsum 004D  
         _CheckKeyOldValue 02C8                    ___lbdiv 0E1E            __size_of___lmul 0033  
                  ___lbmod 0E39                    ___ftdiv 0528            __size_of_fanCtr 006D  
                  ___fttol 058A                    ___lwdiv 0FD6                    ___lwmod 0745  
        __end_of_keyLedCtr 0745                    _b_kover 03C4                    _fanInit 0769  
                  _fanDuty 0043                    _fanStop 0775                 ??___ftpack 004A  
                  _chrgCtr 0DD7                    __ptext1 04B1                    __ptext2 0779  
                  __ptext3 079B                    __ptext4 078F                    __ptext5 0701  
                  __ptext6 0745                    __ptext7 0411                    __ptext8 0775  
                  __ptext9 0769                 _lowBatLock 003D                    _ledShow 0E80  
               _lowBatTime 00B6                  ?_wuhuaCtr 0070                 ??___lwtoft 0078  
                  _count1s 0046                 _lowFanTime 003C                 _setBatStep 0F29  
                  _pwmInit 078F                    _pwmStop 079B    __size_of_CheckValidTime 0016  
                  clrloop0 07F6                    _workCtr 04B1       end_of_initialization 0021  
            _Refurbish_Sfr 0403                 _showBatLed 0E0A               _KeyOldValue0 00A8  
             _KeyOldValue1 0020               _KeyOldValue2 00A4      __size_of_KeyStopClear 0016  
       SystemEnterSleep@91 0055         SystemEnterSleep@92 0053         SystemEnterSleep@93 0051  
       SystemEnterSleep@94 004F               ?_KeyClearOne 0070                 _showNumShi 006D  
             _KeyReference 00A0                 ??_wuhuaCtr 0073          CheckValidTime@F87 00B0  
         ?_CheckOnceResult 0070           ___lbmod@dividend 0075                  KeyIsIn@45 0074  
                KeyIsIn@46 0073                  KeyHave@58 0075                  KeyHave@59 0073  
             ??_KeyClearIn 0075                ___lbmod@rem 0077                ___ftdiv@exp 005D  
          ??_CheckTouchKey 0077               _KeyStopClear 032C           _GetTouchKeyValue 0139  
           ?_Refurbish_Sfr 0070               ?_Init_System 0070             __end_of___lmul 04B1  
           __end_of_fanCtr 047E         __end_of_KeyClearIn 039B                  _KeyMaxSub 0033  
                _KeyResSum 00AC                __end_ofPL10 03CD                __end_ofPL20 03E7  
              __end_ofPL12 03D8                __end_ofPL30 03F9                __end_ofPL22 03ED  
              __end_ofPL14 0D89                __end_ofPL40 07CD                __end_ofPL32 03FE  
              __end_ofPL24 07BF                __end_ofPL16 03DF                __end_ofPL34 0403  
              __end_ofPL26 03F3                __end_ofPL18 07B8                __end_ofPL36 07C4  
              __end_ofPL28 0F29                __end_ofPL38 07C9        start_initialization 000F  
                _KeyServer 0D89                ?_setBatStep 0070                  _Isr_Timer 0E55  
        workCtr@power_temp 00BE       __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070  
              ?_showBatLed 0070                   ??___lmul 0073                   ??_fanCtr 0078  
        ADC_Sample@ad_temp 0055                __pdataBANK0 006C               _Table_KeyCap 081D  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0041  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004A              __pcstackBANK1 00BE                  _WorkSleep 0041  
           _CheckValidTime 0375   __end_of_CheckKeyOldValue 032C                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 0035                   ?_KeyIsIn 0070                   ?_KeyHave 0073  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0073             ??_TurnKeyFlags 0076  
                __pnvBANK0 006E                  __pnvBANK1 00C2           ___lwdiv@dividend 0075  
      __size_of_setBatStep 00AD                   ?___lbdiv 0073                   ?___lbmod 0073  
                 ?___ftdiv 0050                   ?___fttol 005F                   ?___lwdiv 0073  
                 ?___lwmod 0073                   ?_fanInit 0070                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 002A                  __pstrings 0800  
                __pswtext1 07CD                   ?_ledShow 0070       __size_of_KeyClearOne 0015  
                _keyLedCtr 0701                  _firstLock 00C2     __end_of_CheckValidTime 038B  
                _firstTime 006E          __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070  
           ADC_Sample@adch 004B                   ?_pwmInit 0070                   ?_pwmStop 0070  
         ___lwdiv@quotient 004B        __size_of_showBatLed 0014                   ?_workCtr 0070  
              ADC_Sample@i 004C                ADC_Sample@j 004A                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 07F5  
           KeyStopClear@53 0074        CheckKeyOldValue@F77 0032                  _showNumGe 006C  
              __stringbase 0805       __size_of_Init_System 001D      __end_of_Table_KeyFalg 081B  
    __end_of_Table_KeyDown 081D                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 01A1  
          ?_CheckValidTime 0070                ??_KeyServer 0073          ___lmul@multiplier 004A  
                _wuhuaFlag 0044                ??_Isr_Timer 0070                   _MainTime 0047  
               _ADC_Sample 0631           __size_of_KeyIsIn 0014           __size_of_KeyHave 000E  
         _Table_KeyChannel 081F           __size_of___lbdiv 001B           __size_of___lbmod 001C  
         __size_of___ftdiv 0062           __size_of___fttol 0059           __size_of___lwdiv 002A  
         __size_of___lwmod 0024                   ___ftpack 05F3           __size_of_fanInit 000C  
       __end_of__stringtab 0806           __size_of_fanStop 0004           __size_of_chrgCtr 0033  
                 ___lwtoft 05E3                   _b_kover1 03C3                   _b_ksleep 03C0  
         __size_of_ledShow 00A5       __end_of_TurnKeyFlags 0375                   _fanValue 00B8  
                 _adresult 0048               ??_setBatStep 0077                   _chrgFlag 0040  
              ??_WorkSleep 0076            ___lwdiv@divisor 0073            ___lwdiv@counter 004A  
                 __ptext10 047E                   __ptext11 0631                   __ptext20 0E39  
                 __ptext12 05E3                   __ptext21 0E1E                   __ptext13 058A  
                 __ptext30 032C                   __ptext22 0041                   __ptext14 0528  
                 __ptext31 0139                   __ptext23 00A9                   __ptext15 05F3  
                 __ptext40 0E80                   __ptext32 01A1                   __ptext24 0403  
                 __ptext16 0F29                   __ptext33 0375                   __ptext25 0D89  
                 __ptext17 0FD6                   __ptext34 01B0                   __ptext26 0024  
                 __ptext18 0DD7                   __ptext35 02BA                   __ptext27 007C  
                 __ptext19 0E0A                   __ptext36 02A5                   __ptext28 0342  
                 __ptext37 02C8                   __ptext29 038B                   __ptext38 0291  
                 __ptext39 0E55           __size_of_pwmInit 000C           __size_of_pwmStop 0005  
             _shanshuoTime 002C                   _count10s 0042                   _count30s 0028  
                 _count15s 00B4           __size_of_workCtr 0077   __size_of_CheckOnceResult 00E1  
       GetTouchKeyValue@62 004E         GetTouchKeyValue@63 004C         GetTouchKeyValue@64 004A  
            __size_of_main 003B           _SystemEnterSleep 00A9      __end_of_CheckTouchKey 00A9  
                 _numArray 0806               ??_showBatLed 0078         CheckKeyOldValue@80 004C  
       CheckKeyOldValue@78 004E         CheckKeyOldValue@79 004A                   _test_adc 0036  
       __end_of_setBatStep 0FD6                   _power_ad 0026   setBatStep@tempSubBatTime 004D  
                 _workStep 0045                   _wuhuaCtr 0779                ??_keyLedCtr 0078  
        ?_CheckKeyOldValue 0070         __end_of_showBatLed 0E1E                   intlevel1 0000  
            ??_ClearResSum 0073         ??_CheckKeyOldValue 0075           ___lwmod@dividend 0075  
              ?_ADC_Sample 0073                  stringcode 0800                _showBatStep 0038  
               _B_MainLoop 03C6          fanCtr@maxFanValue 0057                 _OPTION_REG 0001  
          ___lwmod@divisor 0073            ___lwmod@counter 0077                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0073               KeyClearIn@51 0075  
    __end_of_Refurbish_Sfr 0411        __end_of_ClearResSum 01B0          ??_CheckOnceResult 004A  
