

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 07 13:58:35 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text16,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text25,local,class=CODE,merge=1,delta=2
    22                           	psect	text26,local,class=CODE,merge=1,delta=2
    23                           	psect	text39,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  0000                     __pidataBANK0:	
    66                           
    67                           	psect	strings
    68  0828                     __pstrings:	
    69  0828                     stringtab:	
    70  0828                     __stringtab:	
    71  0828                     stringcode:	
    72                           ;	String table - string pointers are 1 byte each
    73                           
    74  0828                     stringdir:	
    75  0828  3008               	movlw	high stringdir
    76  0829  008A               	movwf	10
    77  082A  0804               	movf	4,w
    78  082B  0A84               	incf	4,f
    79  082C  0782               	addwf	2,f
    80  082D                     __stringbase:	
    81  082D  3400               	retlw	0
    82  082E                     __end_of__stringtab:	
    83  082E                     _numArray:	
    84  082E  343F               	retlw	63
    85  082F  3406               	retlw	6
    86  0830  345B               	retlw	91
    87  0831  344F               	retlw	79
    88  0832  3466               	retlw	102
    89  0833  346D               	retlw	109
    90  0834  347D               	retlw	125
    91  0835  3407               	retlw	7
    92  0836  347F               	retlw	127
    93  0837  346F               	retlw	111
    94  0838  3471               	retlw	113
    95  0839  3479               	retlw	121
    96  083A  3450               	retlw	80
    97  083B                     __end_of_numArray:	
    98  083B                     _Table_KeyFalg:	
    99  083B  3401               	retlw	1
   100  083C  3402               	retlw	2
   101  083D  3404               	retlw	4
   102  083E  3408               	retlw	8
   103  083F  3410               	retlw	16
   104  0840  3420               	retlw	32
   105  0841  3440               	retlw	64
   106  0842  3480               	retlw	128
   107  0843                     __end_of_Table_KeyFalg:	
   108  0843                     _Table_KeyDown:	
   109  0843  340A               	retlw	10
   110  0844  340A               	retlw	10
   111  0845                     __end_of_Table_KeyDown:	
   112  0845                     _Table_KeyCap:	
   113  0845  3402               	retlw	2
   114  0846  3402               	retlw	2
   115  0847                     __end_of_Table_KeyCap:	
   116  0847                     _Table_KeyChannel:	
   117  0847  3442               	retlw	66
   118  0848  3443               	retlw	67
   119  0849                     __end_of_Table_KeyChannel:	
   120                           
   121                           	psect	nvBANK0
   122  006B                     __pnvBANK0:	
   123  006B                     _firstLock:	
   124  006B                     	ds	1
   125  006C                     _firstTime:	
   126  006C                     	ds	1
   127  001E                     _PWMD01H	set	30
   128  001D                     _PWMCON2	set	29
   129  001A                     _PWMD1L	set	26
   130  0019                     _PWMD0L	set	25
   131  0018                     _PWMTH	set	24
   132  0017                     _PWMTL	set	23
   133  0016                     _PWMCON1	set	22
   134  0015                     _PWMCON0	set	21
   135  0014                     _OSCCON	set	20
   136  0013                     _T2CON	set	19
   137  0011                     _PR2	set	17
   138  000E                     _PIE1	set	14
   139  000D                     _PIR1	set	13
   140  000B                     _INTCON	set	11
   141  0008                     _WPUB	set	8
   142  0006                     _PORTB	set	6
   143  0005                     _TRISB	set	5
   144  0001                     _OPTION_REG	set	1
   145  0069                     _TMR2IF	set	105
   146  006B                     _RAIF	set	107
   147  0058                     _RBIF	set	88
   148  0059                     _INTF	set	89
   149  005B                     _RBIE	set	91
   150  0048                     _IOCB0	set	72
   151  0034                     _RB4	set	52
   152  0036                     _RB6	set	54
   153  0028                     _TRISB0	set	40
   154  002E                     _TRISB6	set	46
   155  0099                     _ADRESH	set	153
   156  0098                     _ADRESL	set	152
   157  0096                     _ADCON1	set	150
   158  0095                     _ADCON0	set	149
   159  0086                     _PORTA	set	134
   160  0085                     _TRISA	set	133
   161  0081                     _TMR0	set	129
   162  04B2                     _LDO_EN	set	1202
   163  04B6                     _CHS4	set	1206
   164  04A8                     _ADON	set	1192
   165  04A9                     _GODONE	set	1193
   166  0430                     _RA0	set	1072
   167  0431                     _RA1	set	1073
   168  0433                     _RA3	set	1075
   169  0434                     _RA4	set	1076
   170  0117                     _KEYDATAH	set	279
   171  0116                     _KEYDATAL	set	278
   172  0113                     _KEYCON2	set	275
   173  0112                     _KEYCON1	set	274
   174  0111                     _KEYCON0	set	273
   175  0110                     _PIE2	set	272
   176  010F                     _PIR2	set	271
   177  0106                     _PORTC	set	262
   178  0105                     _TRISC	set	261
   179                           
   180                           	psect	cinit
   181  000F                     start_initialization:	
   182                           ; #config settings
   183                           
   184  000F                     __initialization:	
   185                           
   186                           ;initializer for _showNumGe
   187  000F  307F               	movlw	127
   188  0010  00ED               	movwf	__pdataBANK0& (0+127)
   189                           
   190                           ;initializer for _showNumShi
   191  0011  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   192  0012  30A0               	movlw	low __pbssBANK1
   193                           
   194                           ; Clear objects allocated to BANK1
   195  0013  1383               	bcf	3,7	;select IRP bank0
   196  0014  0084               	movwf	4
   197  0015  30BE               	movlw	low (__pbssBANK1+30)
   198  0016  158A  257E  118A   	fcall	clear_ram0
   199                           
   200                           ; Clear objects allocated to BANK0
   201  0019  3020               	movlw	low __pbssBANK0
   202  001A  0084               	movwf	4
   203  001B  3049               	movlw	low (__pbssBANK0+41)
   204  001C  158A  257E         	fcall	clear_ram0
   205                           
   206                           ; Clear objects allocated to COMMON
   207  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   208  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   209                           
   210                           ; Clear objects allocated to BITCOMMON
   211  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   212  0021                     end_of_initialization:	
   213                           ;End of C runtime variable initialization code
   214                           
   215  0021                     __end_of__initialization:	
   216  0021  0183               	clrf	3
   217  0022  118A  2FB8         	ljmp	_main	;jump to C main() function
   218                           
   219                           	psect	bitbssCOMMON
   220  03C0                     __pbitbssCOMMON:	
   221  03C0                     _b_ksleep:	
   222  03C0                     	ds	1
   223  03C1                     _b_kerr:	
   224  03C1                     	ds	1
   225  03C2                     _b_kclr:	
   226  03C2                     	ds	1
   227  03C3                     _b_kover1:	
   228  03C3                     	ds	1
   229  03C4                     _b_kover:	
   230  03C4                     	ds	1
   231  03C5                     _B_OnOff:	
   232  03C5                     	ds	1
   233  03C6                     _B_MainLoop:	
   234  03C6                     	ds	1
   235                           
   236                           	psect	bssCOMMON
   237  0079                     __pbssCOMMON:	
   238  0079                     _KeyData:	
   239  0079                     	ds	2
   240                           
   241                           	psect	bssBANK0
   242  0020                     __pbssBANK0:	
   243  0020                     _KeyOldValue1:	
   244  0020                     	ds	4
   245  0024                     _KeyOldData:	
   246  0024                     	ds	2
   247  0026                     _power_ad:	
   248  0026                     	ds	2
   249  0028                     _count30s:	
   250  0028                     	ds	2
   251  002A                     _shanshuoTime2:	
   252  002A                     	ds	2
   253  002C                     _shanshuoTime:	
   254  002C                     	ds	2
   255  002E                     _KeyFlag:	
   256  002E                     	ds	2
   257  0030                     TurnKeyFlags@F84:	
   258  0030                     	ds	1
   259  0031                     TurnKeyFlags@F83:	
   260  0031                     	ds	1
   261  0032                     CheckKeyOldValue@F77:	
   262  0032                     	ds	1
   263  0033                     _KeyMaxSub:	
   264  0033                     	ds	1
   265  0034                     _KeyCounter:	
   266  0034                     	ds	1
   267  0035                     KeyServer@KeyOldFlag:	
   268  0035                     	ds	1
   269  0036                     _test_adc:	
   270  0036                     	ds	1
   271  0037                     _curBatStep:	
   272  0037                     	ds	1
   273  0038                     _showBatStep:	
   274  0038                     	ds	1
   275  0039                     _wuhuaKeyFlag:	
   276  0039                     	ds	1
   277  003A                     _fanKeyFlag:	
   278  003A                     	ds	1
   279  003B                     _ledCnt:	
   280  003B                     	ds	1
   281  003C                     _lowBatLock:	
   282  003C                     	ds	1
   283  003D                     _chrgFullTime:	
   284  003D                     	ds	1
   285  003E                     _chrgFullFlag:	
   286  003E                     	ds	1
   287  003F                     _chrgFlag:	
   288  003F                     	ds	1
   289  0040                     _fanOverTime:	
   290  0040                     	ds	1
   291  0041                     _count10s:	
   292  0041                     	ds	1
   293  0042                     _fanDuty:	
   294  0042                     	ds	1
   295  0043                     _wuhuaFlag:	
   296  0043                     	ds	1
   297  0044                     _workStep:	
   298  0044                     	ds	1
   299  0045                     _count1s:	
   300  0045                     	ds	1
   301  0046                     _MainTime:	
   302  0046                     	ds	1
   303  0047                     _adresult:	
   304  0047                     	ds	2
   305                           
   306                           	psect	dataBANK0
   307  006D                     __pdataBANK0:	
   308  006D                     _showNumGe:	
   309  006D                     	ds	1
   310  006E                     _showNumShi:	
   311  006E                     	ds	1
   312                           
   313                           	psect	bssBANK1
   314  00A0                     __pbssBANK1:	
   315  00A0                     _KeyReference:	
   316  00A0                     	ds	4
   317  00A4                     _KeyOldValue2:	
   318  00A4                     	ds	4
   319  00A8                     _KeyOldValue0:	
   320  00A8                     	ds	4
   321  00AC                     _KeyResSum:	
   322  00AC                     	ds	4
   323  00B0                     CheckValidTime@F87:	
   324  00B0                     	ds	2
   325  00B2                     _result:	
   326  00B2                     	ds	2
   327  00B4                     _count15s:	
   328  00B4                     	ds	2
   329  00B6                     _lowBatTime:	
   330  00B6                     	ds	2
   331  00B8                     _fanValue:	
   332  00B8                     	ds	2
   333  00BA                     _time:	
   334  00BA                     	ds	2
   335  00BC                     _KeyUpShake:	
   336  00BC                     	ds	2
   337                           
   338                           	psect	clrtext
   339  0D7E                     clear_ram0:	
   340                           ;	Called with FSR containing the base address, and
   341                           ;	W with the last address+1
   342                           
   343  0D7E  0064               	clrwdt	;clear the watchdog before getting into this loop
   344  0D7F                     clrloop0:	
   345  0D7F  0180               	clrf	0	;clear RAM location pointed to by FSR
   346  0D80  0A84               	incf	4,f	;increment pointer
   347  0D81  0604               	xorwf	4,w	;XOR with final address
   348  0D82  1903               	btfsc	3,2	;have we reached the end yet?
   349  0D83  3400               	retlw	0	;all done for this memory range, return
   350  0D84  0604               	xorwf	4,w	;XOR again to restore value
   351  0D85  2D7F               	goto	clrloop0	;do the next byte
   352                           
   353                           	psect	cstackBANK1
   354  00BE                     __pcstackBANK1:	
   355  00BE                     workCtr@power_temp:	
   356                           
   357                           ; 4 bytes @ 0x0
   358  00BE                     	ds	4
   359                           
   360                           	psect	cstackCOMMON
   361  0070                     __pcstackCOMMON:	
   362  0070                     ?_ledShow:	
   363  0070                     ??_ledShow:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_SystemEnterSleep:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_CheckTouchKey:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_Init_System:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_Refurbish_Sfr:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_KeyServer:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Isr_Timer:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_Isr_Timer:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_WorkSleep:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_showBatLed:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_setBatStep:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_chrgCtr:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_keyLedCtr:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_pwmInit:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_pwmStop:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_fanInit:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_fanStop:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ?_fanCtr:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_wuhuaCtr:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_workCtr:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_main:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_KeyIsIn:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ?_KeyClearOne:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_KeyClearIn:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_KeyStopClear:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_ClearResSum:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ?_GetTouchKeyValue:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_CheckOnceResult:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ?_CheckKeyOldValue:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_TurnKeyFlags:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_CheckValidTime:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 1 bytes @ 0x0
   458  0070                     	ds	3
   459  0073                     ??_Init_System:	
   460  0073                     ??_Refurbish_Sfr:	
   461                           ; 1 bytes @ 0x3
   462                           
   463  0073                     ??_KeyServer:	
   464                           ; 1 bytes @ 0x3
   465                           
   466  0073                     ?_ADC_Sample:	
   467                           ; 1 bytes @ 0x3
   468                           
   469  0073                     ??_pwmInit:	
   470                           ; 1 bytes @ 0x3
   471                           
   472  0073                     ??_pwmStop:	
   473                           ; 1 bytes @ 0x3
   474                           
   475  0073                     ??_fanInit:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     ??_fanStop:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     ??_wuhuaCtr:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     ??_KeyIsIn:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     ??_KeyClearOne:	
   488                           ; 1 bytes @ 0x3
   489                           
   490  0073                     ??_ClearResSum:	
   491                           ; 1 bytes @ 0x3
   492                           
   493  0073                     ?_KeyHave:	
   494                           ; 1 bytes @ 0x3
   495                           
   496  0073                     ??_CheckValidTime:	
   497                           ; 1 bytes @ 0x3
   498                           
   499  0073                     ??___lmul:	
   500                           ; 1 bytes @ 0x3
   501                           
   502  0073                     ?___lbdiv:	
   503                           ; 1 bytes @ 0x3
   504                           
   505  0073                     ?___lbmod:	
   506                           ; 1 bytes @ 0x3
   507                           
   508  0073                     ?___lwdiv:	
   509                           ; 1 bytes @ 0x3
   510                           
   511  0073                     ?___lwmod:	
   512                           ; 2 bytes @ 0x3
   513                           
   514  0073                     ?___ftpack:	
   515                           ; 2 bytes @ 0x3
   516                           
   517  0073                     ADC_Sample@adldo:	
   518                           ; 3 bytes @ 0x3
   519                           
   520  0073                     KeyIsIn@46:	
   521                           ; 1 bytes @ 0x3
   522                           
   523  0073                     KeyClearOne@49:	
   524                           ; 1 bytes @ 0x3
   525                           
   526  0073                     ClearResSum@56:	
   527                           ; 1 bytes @ 0x3
   528                           
   529  0073                     ___lbdiv@divisor:	
   530                           ; 1 bytes @ 0x3
   531                           
   532  0073                     ___lbmod@divisor:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0073                     KeyHave@59:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0073                     ___lwdiv@divisor:	
   539                           ; 2 bytes @ 0x3
   540                           
   541  0073                     ___lwmod@divisor:	
   542                           ; 2 bytes @ 0x3
   543                           
   544  0073                     ___ftpack@arg:	
   545                           ; 2 bytes @ 0x3
   546                           
   547  0073                     ___lmul@product:	
   548                           ; 3 bytes @ 0x3
   549                           
   550                           
   551                           ; 4 bytes @ 0x3
   552  0073                     	ds	1
   553  0074                     ??_SystemEnterSleep:	
   554  0074                     ??_ADC_Sample:	
   555                           ; 1 bytes @ 0x4
   556                           
   557  0074                     ??_KeyStopClear:	
   558                           ; 1 bytes @ 0x4
   559                           
   560  0074                     ??_GetTouchKeyValue:	
   561                           ; 1 bytes @ 0x4
   562                           
   563  0074                     ??___lbdiv:	
   564                           ; 1 bytes @ 0x4
   565                           
   566  0074                     ??___lbmod:	
   567                           ; 1 bytes @ 0x4
   568                           
   569  0074                     KeyIsIn@45:	
   570                           ; 1 bytes @ 0x4
   571                           
   572  0074                     KeyStopClear@53:	
   573                           ; 1 bytes @ 0x4
   574                           
   575  0074                     ___lbdiv@dividend:	
   576                           ; 1 bytes @ 0x4
   577                           
   578                           
   579                           ; 1 bytes @ 0x4
   580  0074                     	ds	1
   581  0075                     ??_KeyClearIn:	
   582  0075                     ??_KeyHave:	
   583                           ; 1 bytes @ 0x5
   584                           
   585  0075                     ??_CheckKeyOldValue:	
   586                           ; 1 bytes @ 0x5
   587                           
   588  0075                     KeyClearIn@51:	
   589                           ; 1 bytes @ 0x5
   590                           
   591  0075                     KeyHave@58:	
   592                           ; 1 bytes @ 0x5
   593                           
   594  0075                     ___lbdiv@counter:	
   595                           ; 1 bytes @ 0x5
   596                           
   597  0075                     ___lbmod@dividend:	
   598                           ; 1 bytes @ 0x5
   599                           
   600  0075                     ___lwdiv@dividend:	
   601                           ; 1 bytes @ 0x5
   602                           
   603  0075                     ___lwmod@dividend:	
   604                           ; 2 bytes @ 0x5
   605                           
   606                           
   607                           ; 2 bytes @ 0x5
   608  0075                     	ds	1
   609  0076                     ??_WorkSleep:	
   610  0076                     ??_TurnKeyFlags:	
   611                           ; 1 bytes @ 0x6
   612                           
   613  0076                     ___ftpack@exp:	
   614                           ; 1 bytes @ 0x6
   615                           
   616  0076                     ___lbdiv@quotient:	
   617                           ; 1 bytes @ 0x6
   618                           
   619  0076                     ___lbmod@counter:	
   620                           ; 1 bytes @ 0x6
   621                           
   622                           
   623                           ; 1 bytes @ 0x6
   624  0076                     	ds	1
   625  0077                     ??_CheckTouchKey:	
   626  0077                     ??_setBatStep:	
   627                           ; 1 bytes @ 0x7
   628                           
   629  0077                     ??___lwdiv:	
   630                           ; 1 bytes @ 0x7
   631                           
   632  0077                     ??___lwmod:	
   633                           ; 1 bytes @ 0x7
   634                           
   635  0077                     ___ftpack@sign:	
   636                           ; 1 bytes @ 0x7
   637                           
   638  0077                     ___lbmod@rem:	
   639                           ; 1 bytes @ 0x7
   640                           
   641  0077                     ___lwmod@counter:	
   642                           ; 1 bytes @ 0x7
   643                           
   644                           
   645                           ; 1 bytes @ 0x7
   646  0077                     	ds	1
   647  0078                     ??_showBatLed:	
   648  0078                     ??_chrgCtr:	
   649                           ; 1 bytes @ 0x8
   650                           
   651  0078                     ??_keyLedCtr:	
   652                           ; 1 bytes @ 0x8
   653                           
   654  0078                     ??_fanCtr:	
   655                           ; 1 bytes @ 0x8
   656                           
   657  0078                     ??_workCtr:	
   658                           ; 1 bytes @ 0x8
   659                           
   660  0078                     ??_main:	
   661                           ; 1 bytes @ 0x8
   662                           
   663  0078                     ??___lwtoft:	
   664                           ; 1 bytes @ 0x8
   665                           
   666                           
   667                           	psect	cstackBANK0
   668  0049                     __pcstackBANK0:	
   669                           ; 1 bytes @ 0x8
   670                           
   671  0049                     ??___ftpack:	
   672  0049                     ??_CheckOnceResult:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0049                     ?___lmul:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0049                     ADC_Sample@j:	
   679                           ; 4 bytes @ 0x0
   680                           
   681  0049                     ___lwdiv@counter:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0049                     GetTouchKeyValue@64:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0049                     CheckKeyOldValue@79:	
   688                           ; 2 bytes @ 0x0
   689                           
   690  0049                     ___lmul@multiplier:	
   691                           ; 2 bytes @ 0x0
   692                           
   693                           
   694                           ; 4 bytes @ 0x0
   695  0049                     	ds	1
   696  004A                     ADC_Sample@adch:	
   697  004A                     ___lwdiv@quotient:	
   698                           ; 1 bytes @ 0x1
   699                           
   700                           
   701                           ; 2 bytes @ 0x1
   702  004A                     	ds	1
   703  004B                     ADC_Sample@i:	
   704  004B                     GetTouchKeyValue@63:	
   705                           ; 1 bytes @ 0x2
   706                           
   707  004B                     CheckKeyOldValue@80:	
   708                           ; 2 bytes @ 0x2
   709                           
   710                           
   711                           ; 2 bytes @ 0x2
   712  004B                     	ds	1
   713  004C                     ?___lwtoft:	
   714  004C                     setBatStep@tempSubBatTime:	
   715                           ; 3 bytes @ 0x3
   716                           
   717  004C                     ___lwtoft@c:	
   718                           ; 2 bytes @ 0x3
   719                           
   720  004C                     ADC_Sample@adsum:	
   721                           ; 2 bytes @ 0x3
   722                           
   723                           
   724                           ; 4 bytes @ 0x3
   725  004C                     	ds	1
   726  004D                     GetTouchKeyValue@62:	
   727  004D                     CheckKeyOldValue@78:	
   728                           ; 1 bytes @ 0x4
   729                           
   730  004D                     CheckOnceResult@73:	
   731                           ; 1 bytes @ 0x4
   732                           
   733  004D                     ___lmul@multiplicand:	
   734                           ; 2 bytes @ 0x4
   735                           
   736                           
   737                           ; 4 bytes @ 0x4
   738  004D                     	ds	1
   739  004E                     SystemEnterSleep@94:	
   740                           
   741                           ; 2 bytes @ 0x5
   742  004E                     	ds	1
   743  004F                     ?___ftdiv:	
   744  004F                     CheckOnceResult@70:	
   745                           ; 3 bytes @ 0x6
   746                           
   747  004F                     ___ftdiv@f2:	
   748                           ; 1 bytes @ 0x6
   749                           
   750                           
   751                           ; 3 bytes @ 0x6
   752  004F                     	ds	1
   753  0050                     ADC_Sample@admin:	
   754  0050                     CheckOnceResult@72:	
   755                           ; 2 bytes @ 0x7
   756                           
   757  0050                     SystemEnterSleep@93:	
   758                           ; 2 bytes @ 0x7
   759                           
   760                           
   761                           ; 2 bytes @ 0x7
   762  0050                     	ds	2
   763  0052                     CheckOnceResult@69:	
   764  0052                     ADC_Sample@admax:	
   765                           ; 1 bytes @ 0x9
   766                           
   767  0052                     SystemEnterSleep@92:	
   768                           ; 2 bytes @ 0x9
   769                           
   770  0052                     ___ftdiv@f1:	
   771                           ; 2 bytes @ 0x9
   772                           
   773                           
   774                           ; 3 bytes @ 0x9
   775  0052                     	ds	1
   776  0053                     CheckOnceResult@71:	
   777                           
   778                           ; 2 bytes @ 0xA
   779  0053                     	ds	1
   780  0054                     SystemEnterSleep@91:	
   781  0054                     ADC_Sample@ad_temp:	
   782                           ; 1 bytes @ 0xB
   783                           
   784                           
   785                           ; 2 bytes @ 0xB
   786  0054                     	ds	1
   787  0055                     ??___ftdiv:	
   788  0055                     CheckOnceResult@68:	
   789                           ; 1 bytes @ 0xC
   790                           
   791                           
   792                           ; 1 bytes @ 0xC
   793  0055                     	ds	1
   794  0056                     fanCtr@maxFanValue:	
   795                           
   796                           ; 1 bytes @ 0xD
   797  0056                     	ds	1
   798  0057                     fanCtr@fan_temp:	
   799                           
   800                           ; 4 bytes @ 0xE
   801  0057                     	ds	1
   802  0058                     ___ftdiv@cntr:	
   803                           
   804                           ; 1 bytes @ 0xF
   805  0058                     	ds	1
   806  0059                     ___ftdiv@f3:	
   807                           
   808                           ; 3 bytes @ 0x10
   809  0059                     	ds	3
   810  005C                     ___ftdiv@exp:	
   811                           
   812                           ; 1 bytes @ 0x13
   813  005C                     	ds	1
   814  005D                     ___ftdiv@sign:	
   815                           
   816                           ; 1 bytes @ 0x14
   817  005D                     	ds	1
   818  005E                     ?___fttol:	
   819  005E                     ___fttol@f1:	
   820                           ; 4 bytes @ 0x15
   821                           
   822                           
   823                           ; 3 bytes @ 0x15
   824  005E                     	ds	4
   825  0062                     ??___fttol:	
   826                           
   827                           ; 1 bytes @ 0x19
   828  0062                     	ds	3
   829  0065                     ___fttol@sign1:	
   830                           
   831                           ; 1 bytes @ 0x1C
   832  0065                     	ds	1
   833  0066                     ___fttol@lval:	
   834                           
   835                           ; 4 bytes @ 0x1D
   836  0066                     	ds	4
   837  006A                     ___fttol@exp1:	
   838                           
   839                           ; 1 bytes @ 0x21
   840  006A                     	ds	1
   841                           
   842                           	psect	maintext
   843  07B8                     __pmaintext:	
   844 ;;
   845 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   846 ;;
   847 ;; *************** function _main *****************
   848 ;; Defined at:
   849 ;;		line 919 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : B00/0
   860 ;;		On exit  : 300/100
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   863 ;;      Params:         0       0       0       0
   864 ;;      Locals:         0       0       0       0
   865 ;;      Temps:          0       0       0       0
   866 ;;      Totals:         0       0       0       0
   867 ;;Total ram usage:        0 bytes
   868 ;; Hardware stack levels required when called:    6
   869 ;; This function calls:
   870 ;;		_CheckTouchKey
   871 ;;		_Init_System
   872 ;;		_KeyServer
   873 ;;		_Refurbish_Sfr
   874 ;;		_WorkSleep
   875 ;;		_chrgCtr
   876 ;;		_setBatStep
   877 ;;		_workCtr
   878 ;; This function is called by:
   879 ;;		Startup code after reset
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           
   884                           ;psect for function _main
   885  07B8                     _main:	
   886                           
   887                           ;main.c: 921: Init_System();
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   891  07B8  118A  2024  118A   	fcall	_Init_System
   892                           
   893                           ;main.c: 922: firstLock = 1;
   894  07BB  1283               	bcf	3,5	;RP0=0, select bank0
   895  07BC  30FA               	movlw	250
   896  07BD  01EB               	clrf	_firstLock
   897  07BE  0AEB               	incf	_firstLock,f
   898                           
   899                           ;main.c: 923: firstTime = 250;
   900  07BF  00EC               	movwf	_firstTime
   901  07C0                     l5035:	
   902                           
   903                           ;main.c: 925: {
   904                           ;main.c: 927: if(B_MainLoop)
   905  07C0  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   906  07C1  2FC0               	goto	l5035
   907                           
   908                           ;main.c: 928: {
   909                           ;main.c: 929: B_MainLoop = 0;
   910  07C2  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   911  07C3  0064               	clrwdt	;# 
   912                           
   913                           ;main.c: 931: CheckTouchKey();
   914  07C4  118A  207C  118A   	fcall	_CheckTouchKey
   915                           
   916                           ;main.c: 932: chrgCtr();
   917  07C7  158A  25D9  118A   	fcall	_chrgCtr
   918                           
   919                           ;main.c: 933: Refurbish_Sfr();
   920  07CA  118A  2403  118A   	fcall	_Refurbish_Sfr
   921                           
   922                           ;main.c: 934: KeyServer();
   923  07CD  158A  2586  118A   	fcall	_KeyServer
   924                           
   925                           ;main.c: 935: workCtr();
   926  07D0  118A  2411  118A   	fcall	_workCtr
   927                           
   928                           ;main.c: 936: setBatStep();
   929  07D3  158A  2729  118A   	fcall	_setBatStep
   930                           
   931                           ;main.c: 937: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   932  07D6  086C               	movf	_firstTime,w
   933  07D7  1D03               	btfss	3,2
   934  07D8  2FEF               	goto	l5071
   935  07D9  083F               	movf	_chrgFlag,w
   936  07DA  1D03               	btfss	3,2
   937  07DB  2FEF               	goto	l5071
   938  07DC  0844               	movf	_workStep,w
   939  07DD  1D03               	btfss	3,2
   940  07DE  2FEF               	goto	l5071
   941  07DF  0843               	movf	_wuhuaFlag,w
   942  07E0  1D03               	btfss	3,2
   943  07E1  2FEF               	goto	l5071
   944  07E2  082C               	movf	_shanshuoTime,w
   945  07E3  042D               	iorwf	_shanshuoTime+1,w
   946  07E4  1D03               	btfss	3,2
   947  07E5  2FEF               	goto	l5071
   948  07E6  082A               	movf	_shanshuoTime2,w
   949  07E7  042B               	iorwf	_shanshuoTime2+1,w
   950  07E8  1D03               	btfss	3,2
   951  07E9  2FEF               	goto	l5071
   952                           
   953                           ;main.c: 938: {
   954                           ;main.c: 939: PORTA &= 0xE4;
   955                           
   956                           ;main.c: 940: PORTB &= 0xEF;
   957                           
   958                           ;main.c: 941: TRISA |= 0x1B;
   959                           
   960                           ;main.c: 942: TRISB |= 0x10;
   961  07EA  27F3               	fcall	PL14	;call to abstracted procedure
   962                           
   963                           ;main.c: 943: WorkSleep();
   964  07EB  118A  2041  118A   	fcall	_WorkSleep
   965                           
   966                           ;main.c: 944: }
   967  07EE  2FC0               	goto	l5035
   968  07EF                     l5071:	
   969                           
   970                           ;main.c: 945: else
   971                           ;main.c: 946: {
   972                           ;main.c: 947: time = 0;
   973  07EF  1683               	bsf	3,5	;RP0=1, select bank1
   974  07F0  01BA               	clrf	_time^(0+128)
   975  07F1  01BB               	clrf	(_time+1)^(0+128)
   976  07F2  2FC0               	goto	l5035
   977  07F3                     __end_of_main:	
   978  07F3                     PL14:	
   979  07F3  30E4               	movlw	228
   980  07F4  1683               	bsf	3,5	;RP0=1, select bank1
   981  07F5  0586               	andwf	6,f	;volatile
   982  07F6  1283               	bcf	3,5	;RP0=0, select bank0
   983  07F7  1206               	bcf	6,4	;volatile
   984  07F8  301B               	movlw	27
   985  07F9  1683               	bsf	3,5	;RP0=1, select bank1
   986  07FA  0485               	iorwf	5,f	;volatile
   987  07FB  1283               	bcf	3,5	;RP0=0, select bank0
   988  07FC  1605               	bsf	5,4	;volatile
   989  07FD  0008               	return
   990  07FE                     __end_ofPL14:	
   991                           
   992                           	psect	text1
   993  0411                     __ptext1:	
   994 ;; *************** function _workCtr *****************
   995 ;; Defined at:
   996 ;;		line 867 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 300/0
  1007 ;;		On exit  : 200/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1010 ;;      Params:         0       0       0       0
  1011 ;;      Locals:         0       0       4       0
  1012 ;;      Temps:          0       0       0       0
  1013 ;;      Totals:         0       0       4       0
  1014 ;;Total ram usage:        4 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    4
  1017 ;; This function calls:
  1018 ;;		_ADC_Sample
  1019 ;;		___ftdiv
  1020 ;;		___fttol
  1021 ;;		___lwtoft
  1022 ;;		_fanCtr
  1023 ;;		_keyLedCtr
  1024 ;;		_wuhuaCtr
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _workCtr
  1032  0411                     _workCtr:	
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1036  0411  301F               	movlw	31
  1037                           
  1038                           ;main.c: 869: test_adc = ADC_Sample(31, 0);
  1039  0412  01F3               	clrf	ADC_Sample@adldo
  1040  0413  24E0  118A         	fcall	_ADC_Sample
  1041  0415  00B6               	movwf	_test_adc	;volatile
  1042                           
  1043                           ;main.c: 870: if (0xA5 == test_adc)
  1044  0416  30A5               	movlw	165
  1045  0417  0636               	xorwf	_test_adc,w	;volatile
  1046  0418  1D03               	btfss	3,2
  1047  0419  2C4B               	goto	l4977
  1048                           
  1049                           ;main.c: 871: {
  1050                           ;main.c: 872: volatile unsigned long power_temp;
  1051                           ;main.c: 874: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1052  041A  3096               	movlw	150
  1053  041B  01D2               	clrf	___ftdiv@f1
  1054  041C  00D3               	movwf	___ftdiv@f1+1
  1055  041D  304A               	movlw	74
  1056  041E  00D4               	movwf	___ftdiv@f1+2
  1057  041F  0848               	movf	_adresult+1,w	;volatile
  1058  0420  00CD               	movwf	___lwtoft@c+1
  1059  0421  0847               	movf	_adresult,w	;volatile
  1060  0422  00CC               	movwf	___lwtoft@c
  1061  0423  266B  118A         	fcall	___lwtoft
  1062  0425  084C               	movf	?___lwtoft,w
  1063  0426  00CF               	movwf	___ftdiv@f2
  1064  0427  084D               	movf	?___lwtoft+1,w
  1065  0428  00D0               	movwf	___ftdiv@f2+1
  1066  0429  084E               	movf	?___lwtoft+2,w
  1067  042A  00D1               	movwf	___ftdiv@f2+2
  1068  042B  25B0  118A         	fcall	___ftdiv
  1069  042D  084F               	movf	?___ftdiv,w
  1070  042E  00DE               	movwf	___fttol@f1
  1071  042F  0850               	movf	?___ftdiv+1,w
  1072  0430  00DF               	movwf	___fttol@f1+1
  1073  0431  0851               	movf	?___ftdiv+2,w
  1074  0432  00E0               	movwf	___fttol@f1+2
  1075  0433  2612  118A         	fcall	___fttol
  1076  0435  0861               	movf	?___fttol+3,w
  1077  0436  1683               	bsf	3,5	;RP0=1, select bank1
  1078  0437  00C1               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1079  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0439  0860               	movf	?___fttol+2,w
  1081  043A  1683               	bsf	3,5	;RP0=1, select bank1
  1082  043B  00C0               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1083  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1084  043D  085F               	movf	?___fttol+1,w
  1085  043E  1683               	bsf	3,5	;RP0=1, select bank1
  1086  043F  00BF               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1087  0440  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0441  085E               	movf	?___fttol,w
  1089  0442  1683               	bsf	3,5	;RP0=1, select bank1
  1090  0443  00BE               	movwf	workCtr@power_temp^(0+128)	;volatile
  1091                           
  1092                           ;main.c: 875: power_ad = (unsigned int)(power_temp);
  1093  0444  083F               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1094  0445  1283               	bcf	3,5	;RP0=0, select bank0
  1095  0446  00A7               	movwf	_power_ad+1	;volatile
  1096  0447  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0448  083E               	movf	workCtr@power_temp^(0+128),w	;volatile
  1098  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1099  044A  00A6               	movwf	_power_ad	;volatile
  1100  044B                     l4977:	
  1101                           
  1102                           ;main.c: 888: }
  1103                           ;main.c: 889: if(power_ad < 2900)
  1104  044B  300B               	movlw	11
  1105  044C  0227               	subwf	_power_ad+1,w	;volatile
  1106  044D  3054               	movlw	84
  1107  044E  1903               	skipnz
  1108  044F  0226               	subwf	_power_ad,w	;volatile
  1109  0450  1803               	skipnc
  1110  0451  2C65               	goto	l4985
  1111                           
  1112                           ;main.c: 890: {
  1113                           ;main.c: 891: if(++lowBatTime > 1000)
  1114  0452  1683               	bsf	3,5	;RP0=1, select bank1
  1115  0453  0AB6               	incf	_lowBatTime^(0+128),f
  1116  0454  1903               	skipnz
  1117  0455  0AB7               	incf	(_lowBatTime+1)^(0+128),f
  1118  0456  3003               	movlw	3
  1119  0457  0237               	subwf	(_lowBatTime+1)^(0+128),w
  1120  0458  30E9               	movlw	233
  1121  0459  1903               	skipnz
  1122  045A  0236               	subwf	_lowBatTime^(0+128),w
  1123  045B  1C03               	skipc
  1124  045C  2C68               	goto	l4987
  1125                           
  1126                           ;main.c: 892: {
  1127                           ;main.c: 893: lowBatTime = 0;
  1128  045D  01B6               	clrf	_lowBatTime^(0+128)
  1129  045E  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1130                           
  1131                           ;main.c: 894: lowBatLock = 1;
  1132  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0460  01BC               	clrf	_lowBatLock
  1134  0461  0ABC               	incf	_lowBatLock,f
  1135                           
  1136                           ;main.c: 895: workStep = 0;
  1137  0462  01C4               	clrf	_workStep
  1138                           
  1139                           ;main.c: 896: wuhuaFlag = 0;
  1140  0463  01C3               	clrf	_wuhuaFlag
  1141  0464  2C68               	goto	l4987
  1142  0465                     l4985:	
  1143                           
  1144                           ;main.c: 899: else
  1145                           ;main.c: 900: {
  1146                           ;main.c: 901: lowBatTime = 0;
  1147  0465  1683               	bsf	3,5	;RP0=1, select bank1
  1148  0466  01B6               	clrf	_lowBatTime^(0+128)
  1149  0467  01B7               	clrf	(_lowBatTime+1)^(0+128)
  1150  0468                     l4987:	
  1151                           
  1152                           ;main.c: 902: }
  1153                           ;main.c: 903: if(firstTime > 0)
  1154  0468  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0469  086C               	movf	_firstTime,w
  1156  046A  1903               	btfsc	3,2
  1157  046B  2C6E               	goto	l4991
  1158                           
  1159                           ;main.c: 904: {
  1160                           ;main.c: 905: firstTime--;
  1161  046C  03EC               	decf	_firstTime,f
  1162                           
  1163                           ;main.c: 906: }
  1164  046D  0008               	return
  1165  046E                     l4991:	
  1166                           
  1167                           ;main.c: 907: else
  1168                           ;main.c: 908: {
  1169                           ;main.c: 909: keyLedCtr();
  1170  046E  26EC  118A         	fcall	_keyLedCtr
  1171                           
  1172                           ;main.c: 910: fanCtr();
  1173  0470  2473  118A         	fcall	_fanCtr
  1174                           
  1175                           ;main.c: 911: wuhuaCtr();
  1176  0472  2F64               	ljmp	l4651
  1177  0473                     __end_of_workCtr:	
  1178  0473                     __ptext7:	
  1179 ;; *************** function _fanCtr *****************
  1180 ;; Defined at:
  1181 ;;		line 782 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;		None
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1186 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, pclath, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 300/0
  1193 ;;		On exit  : 200/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1196 ;;      Params:         0       0       0       0
  1197 ;;      Locals:         0       5       0       0
  1198 ;;      Temps:          0       0       0       0
  1199 ;;      Totals:         0       5       0       0
  1200 ;;Total ram usage:        5 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    3
  1203 ;; This function calls:
  1204 ;;		_ADC_Sample
  1205 ;;		___lmul
  1206 ;;		_fanInit
  1207 ;;		_fanStop
  1208 ;; This function is called by:
  1209 ;;		_workCtr
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           
  1214                           ;psect for function _fanCtr
  1215  0473                     _fanCtr:	
  1216                           
  1217                           ;main.c: 784: if(workStep > 0)
  1218                           
  1219                           ;incstack = 0
  1220                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1221  0473  0844               	movf	_workStep,w
  1222  0474  1903               	btfsc	3,2
  1223  0475  2CDB               	goto	l4645
  1224                           
  1225                           ;main.c: 785: {
  1226                           ;main.c: 786: PORTA |= 0x04;
  1227  0476  1683               	bsf	3,5	;RP0=1, select bank1
  1228  0477  1506               	bsf	6,2	;volatile
  1229                           
  1230                           ;main.c: 787: unsigned char maxFanValue = 52;
  1231  0478  3034               	movlw	52
  1232  0479  1283               	bcf	3,5	;RP0=0, select bank0
  1233  047A  00D6               	movwf	fanCtr@maxFanValue
  1234                           
  1235                           ;main.c: 788: if(workStep == 1 || power_ad < 3150)
  1236  047B  0344               	decf	_workStep,w
  1237  047C  1903               	btfsc	3,2
  1238  047D  2C85               	goto	l4611
  1239  047E  300C               	movlw	12
  1240  047F  0227               	subwf	_power_ad+1,w	;volatile
  1241  0480  304E               	movlw	78
  1242  0481  1903               	skipnz
  1243  0482  0226               	subwf	_power_ad,w	;volatile
  1244  0483  1803               	skipnc
  1245  0484  2C87               	goto	l4613
  1246  0485                     l4611:	
  1247                           
  1248                           ;main.c: 789: {
  1249                           ;main.c: 790: maxFanValue = 38;
  1250  0485  3026               	movlw	38
  1251  0486  00D6               	movwf	fanCtr@maxFanValue
  1252  0487                     l4613:	
  1253  0487  300D               	movlw	13
  1254                           
  1255                           ;main.c: 791: }
  1256                           ;main.c: 792: test_adc = ADC_Sample(13, 0);
  1257  0488  01F3               	clrf	ADC_Sample@adldo
  1258  0489  24E0  118A         	fcall	_ADC_Sample
  1259  048B  00B6               	movwf	_test_adc	;volatile
  1260                           
  1261                           ;main.c: 793: if (0xA5 == test_adc)
  1262  048C  30A5               	movlw	165
  1263  048D  0636               	xorwf	_test_adc,w	;volatile
  1264  048E  1D03               	btfss	3,2
  1265  048F  2CBA               	goto	l4625
  1266                           
  1267                           ;main.c: 794: {
  1268                           ;main.c: 795: volatile unsigned long fan_temp;
  1269                           ;main.c: 796: if(power_ad > 0)
  1270  0490  0826               	movf	_power_ad,w	;volatile
  1271  0491  0427               	iorwf	_power_ad+1,w	;volatile
  1272  0492  1903               	btfsc	3,2
  1273  0493  2CBA               	goto	l4625
  1274                           
  1275                           ;main.c: 797: {
  1276                           ;main.c: 798: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1277  0494  0847               	movf	_adresult,w	;volatile
  1278  0495  00C9               	movwf	___lmul@multiplier
  1279  0496  0848               	movf	_adresult+1,w	;volatile
  1280  0497  00CA               	movwf	___lmul@multiplier+1
  1281  0498  01CB               	clrf	___lmul@multiplier+2
  1282  0499  01CC               	clrf	___lmul@multiplier+3
  1283  049A  0826               	movf	_power_ad,w	;volatile
  1284  049B  00CD               	movwf	___lmul@multiplicand
  1285  049C  0827               	movf	_power_ad+1,w	;volatile
  1286  049D  00CE               	movwf	___lmul@multiplicand+1
  1287  049E  01CF               	clrf	___lmul@multiplicand+2
  1288  049F  01D0               	clrf	___lmul@multiplicand+3
  1289  04A0  26B9  118A         	fcall	___lmul
  1290  04A2  084C               	movf	?___lmul+3,w
  1291  04A3  00DA               	movwf	fanCtr@fan_temp+3	;volatile
  1292  04A4  084B               	movf	?___lmul+2,w
  1293  04A5  00D9               	movwf	fanCtr@fan_temp+2	;volatile
  1294  04A6  084A               	movf	?___lmul+1,w
  1295  04A7  00D8               	movwf	fanCtr@fan_temp+1	;volatile
  1296  04A8  0849               	movf	?___lmul,w
  1297  04A9  00D7               	movwf	fanCtr@fan_temp	;volatile
  1298  04AA  300C               	movlw	12
  1299  04AB                     u4925:	
  1300  04AB  1003               	clrc
  1301  04AC  0CDA               	rrf	fanCtr@fan_temp+3,f	;volatile
  1302  04AD  0CD9               	rrf	fanCtr@fan_temp+2,f	;volatile
  1303  04AE  0CD8               	rrf	fanCtr@fan_temp+1,f	;volatile
  1304  04AF  0CD7               	rrf	fanCtr@fan_temp,f	;volatile
  1305  04B0  3EFF               	addlw	-1
  1306  04B1  1D03               	skipz
  1307  04B2  2CAB               	goto	u4925
  1308                           
  1309                           ;main.c: 799: fanValue = (unsigned int)(fan_temp);
  1310  04B3  0858               	movf	fanCtr@fan_temp+1,w	;volatile
  1311  04B4  1683               	bsf	3,5	;RP0=1, select bank1
  1312  04B5  00B9               	movwf	(_fanValue+1)^(0+128)
  1313  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1314  04B7  0857               	movf	fanCtr@fan_temp,w	;volatile
  1315  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  1316  04B9  00B8               	movwf	_fanValue^(0+128)
  1317  04BA                     l4625:	
  1318                           
  1319                           ;main.c: 800: }
  1320                           ;main.c: 801: }
  1321                           ;main.c: 802: if(fanValue > 1300)
  1322  04BA  3005               	movlw	5
  1323  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  1324  04BC  0239               	subwf	(_fanValue+1)^(0+128),w
  1325  04BD  3015               	movlw	21
  1326  04BE  1903               	skipnz
  1327  04BF  0238               	subwf	_fanValue^(0+128),w
  1328  04C0  1C03               	skipc
  1329  04C1  2CCE               	goto	l4633
  1330                           
  1331                           ;main.c: 803: {
  1332                           ;main.c: 804: if(++fanOverTime > 25)
  1333  04C2  301A               	movlw	26
  1334  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1335  04C4  0AC0               	incf	_fanOverTime,f
  1336  04C5  0240               	subwf	_fanOverTime,w
  1337  04C6  1C03               	skipc
  1338  04C7  2CD0               	goto	l4635
  1339  04C8  30E1               	movlw	225
  1340                           
  1341                           ;main.c: 805: {
  1342                           ;main.c: 806: fanOverTime = 0;
  1343  04C9  01C0               	clrf	_fanOverTime
  1344                           
  1345                           ;main.c: 807: workStep = 0;
  1346  04CA  01C4               	clrf	_workStep
  1347                           
  1348                           ;main.c: 808: shanshuoTime = 225;
  1349  04CB  00AC               	movwf	_shanshuoTime
  1350  04CC  01AD               	clrf	_shanshuoTime+1
  1351  04CD  2CD0               	goto	l4635
  1352  04CE                     l4633:	
  1353                           
  1354                           ;main.c: 811: else
  1355                           ;main.c: 812: {
  1356                           ;main.c: 813: fanOverTime = 0;
  1357  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  1358  04CF  01C0               	clrf	_fanOverTime
  1359  04D0                     l4635:	
  1360                           
  1361                           ;main.c: 814: }
  1362                           ;main.c: 815: if(fanDuty < maxFanValue)
  1363  04D0  0856               	movf	fanCtr@maxFanValue,w
  1364  04D1  0242               	subwf	_fanDuty,w
  1365  04D2  1803               	skipnc
  1366  04D3  2CD6               	goto	l4639
  1367                           
  1368                           ;main.c: 816: {
  1369                           ;main.c: 817: fanDuty++;
  1370  04D4  0AC2               	incf	_fanDuty,f
  1371                           
  1372                           ;main.c: 818: }
  1373  04D5  2CDA               	goto	l4643
  1374  04D6                     l4639:	
  1375                           
  1376                           ;main.c: 819: else if(fanDuty > maxFanValue)
  1377  04D6  0842               	movf	_fanDuty,w
  1378  04D7  0256               	subwf	fanCtr@maxFanValue,w
  1379  04D8  1C03               	btfss	3,0
  1380                           
  1381                           ;main.c: 820: {
  1382                           ;main.c: 821: fanDuty--;
  1383  04D9  03C2               	decf	_fanDuty,f
  1384  04DA                     l4643:	
  1385                           
  1386                           ;main.c: 822: }
  1387                           ;main.c: 823: fanInit();
  1388  04DA  2F54               	ljmp	l4373
  1389  04DB                     l4645:	
  1390                           ;main.c: 824: }
  1391                           
  1392                           
  1393                           ;main.c: 825: else
  1394                           ;main.c: 826: {
  1395                           ;main.c: 827: fanStop();
  1396  04DB  2760               	fcall	_fanStop
  1397                           
  1398                           ;main.c: 828: fanDuty = 0;
  1399  04DC  01C2               	clrf	_fanDuty
  1400                           
  1401                           ;main.c: 829: PORTA &= 0xFB;
  1402  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  1403  04DE  1106               	bcf	6,2	;volatile
  1404  04DF  0008               	return
  1405  04E0                     __end_of_fanCtr:	
  1406  04E0                     __ptext11:	
  1407 ;; *************** function _ADC_Sample *****************
  1408 ;; Defined at:
  1409 ;;		line 307 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  adch            1    wreg     unsigned char 
  1412 ;;  adldo           1    3[COMMON] unsigned char 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  adch            1    1[BANK0 ] unsigned char 
  1415 ;;  j               1    0[BANK0 ] unsigned char 
  1416 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1417 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1418 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1419 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1420 ;;  i               1    2[BANK0 ] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      unsigned char 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0
  1425 ;; Tracked objects:
  1426 ;;		On entry : 300/0
  1427 ;;		On exit  : 300/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1430 ;;      Params:         1       0       0       0
  1431 ;;      Locals:         0      13       0       0
  1432 ;;      Temps:          4       0       0       0
  1433 ;;      Totals:         5      13       0       0
  1434 ;;Total ram usage:       18 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_fanCtr
  1441 ;;		_workCtr
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           
  1446                           ;psect for function _ADC_Sample
  1447  04E0                     _ADC_Sample:	
  1448                           
  1449                           ;incstack = 0
  1450                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1451                           ;ADC_Sample@adch stored from wreg
  1452  04E0  00CA               	movwf	ADC_Sample@adch
  1453                           
  1454                           ;main.c: 309: volatile unsigned long adsum = 0;
  1455                           
  1456                           ;main.c: 310: volatile unsigned int admin = 0, admax = 0;
  1457  04E1  279A  118A         	fcall	PL18	;call to abstracted procedure
  1458                           
  1459                           ;main.c: 311: volatile unsigned int ad_temp = 0;
  1460  04E3  01D4               	clrf	ADC_Sample@ad_temp	;volatile
  1461  04E4  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1462                           
  1463                           ;main.c: 313: if ((!LDO_EN) && (adldo & 0x04) )
  1464  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  1465  04E6  1D16               	btfss	22,2	;volatile
  1466  04E7  1D73               	btfss	ADC_Sample@adldo,2
  1467  04E8  2CF1               	goto	l4295
  1468                           
  1469                           ;main.c: 314: {
  1470                           ;main.c: 316: ADCON1 = adldo;
  1471  04E9  0873               	movf	ADC_Sample@adldo,w
  1472  04EA  0096               	movwf	22	;volatile
  1473                           
  1474                           ;main.c: 317: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1475  04EB  3042               	movlw	66
  1476  04EC  00F4               	movwf	??_ADC_Sample
  1477  04ED                     u5707:	
  1478  04ED  0BF4               	decfsz	??_ADC_Sample,f
  1479  04EE  2CED               	goto	u5707
  1480  04EF  0000               	nop
  1481                           
  1482                           ;main.c: 318: }
  1483  04F0  2CF3               	goto	l4297
  1484  04F1                     l4295:	
  1485                           
  1486                           ;main.c: 319: else
  1487                           ;main.c: 320: ADCON1 = adldo;
  1488  04F1  0873               	movf	ADC_Sample@adldo,w
  1489  04F2  0096               	movwf	22	;volatile
  1490  04F3                     l4297:	
  1491                           
  1492                           ;main.c: 322: if(adch & 0x10)
  1493  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1494  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1495  04F5  1E4A               	btfss	ADC_Sample@adch,4
  1496  04F6  2CFC               	goto	l4305
  1497                           
  1498                           ;main.c: 323: {
  1499                           ;main.c: 324: CHS4 = 1;
  1500  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  1501  04F8  1716               	bsf	22,6	;volatile
  1502                           
  1503                           ;main.c: 325: adch &= 0x0f;
  1504  04F9  300F               	movlw	15
  1505  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1506  04FB  05CA               	andwf	ADC_Sample@adch,f
  1507  04FC                     l4305:	
  1508                           
  1509                           ;main.c: 328: for (i = 0; i < 10; i++)
  1510  04FC  01CB               	clrf	ADC_Sample@i
  1511  04FD                     l4311:	
  1512                           
  1513                           ;main.c: 329: {
  1514                           ;main.c: 330: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1515  04FD  084A               	movf	ADC_Sample@adch,w
  1516  04FE  00F4               	movwf	??_ADC_Sample
  1517  04FF  3001               	movlw	1
  1518  0500  1003               	clrc
  1519  0501                     L3:	
  1520  0501  0DF4               	rlf	??_ADC_Sample,f
  1521  0502  3EFF               	addlw	-1
  1522  0503  1003               	clrc
  1523  0504  1D03               	skipz
  1524  0505  2D01               	goto	L3
  1525  0506  0D74               	rlf	??_ADC_Sample,w
  1526  0507  3841               	iorlw	65
  1527  0508  1683               	bsf	3,5	;RP0=1, select bank1
  1528  0509  0095               	movwf	21	;volatile
  1529  050A  0000               	nop	;# 
  1530  050B  0000               	nop	;# 
  1531  050C  0000               	nop	;# 
  1532  050D  0000               	nop	;# 
  1533                           
  1534                           ;main.c: 335: GODONE = 1;
  1535  050E  1683               	bsf	3,5	;RP0=1, select bank1
  1536  050F  1303               	bcf	3,6	;RP1=0, select bank1
  1537  0510  1495               	bsf	21,1	;volatile
  1538                           
  1539                           ;main.c: 337: unsigned char j = 0;
  1540  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0512  01C9               	clrf	ADC_Sample@j
  1542  0513                     l994:	
  1543                           ;main.c: 338: while (GODONE)
  1544                           
  1545  0513  1683               	bsf	3,5	;RP0=1, select bank1
  1546  0514  1C95               	btfss	21,1	;volatile
  1547  0515  2D1D               	goto	l4321
  1548                           
  1549                           ;main.c: 339: {
  1550                           ;main.c: 340: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1551  0516  2D17               	nop2	;2 cycle nop
  1552  0517  2D18               	nop2	;2 cycle nop
  1553                           
  1554                           ;main.c: 342: if (0 == (--j))
  1555  0518  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0519  1303               	bcf	3,6	;RP1=0, select bank0
  1557  051A  0BC9               	decfsz	ADC_Sample@j,f
  1558  051B  2D13               	goto	l994
  1559                           
  1560                           ;main.c: 343: return 0;
  1561  051C  3400               	retlw	0
  1562  051D                     l4321:	
  1563                           
  1564                           ;main.c: 344: }
  1565                           ;main.c: 346: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1566  051D  0819               	movf	25,w	;volatile
  1567  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1568  051F  00D4               	movwf	ADC_Sample@ad_temp	;volatile
  1569  0520  01D5               	clrf	ADC_Sample@ad_temp+1	;volatile
  1570  0521  0ED4               	swapf	ADC_Sample@ad_temp,f	;volatile
  1571  0522  0ED5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1572  0523  30F0               	movlw	240
  1573  0524  05D5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1574  0525  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1575  0526  390F               	andlw	15
  1576  0527  04D5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1577  0528  30F0               	movlw	240
  1578  0529  05D4               	andwf	ADC_Sample@ad_temp,f	;volatile
  1579  052A  1683               	bsf	3,5	;RP0=1, select bank1
  1580  052B  0E18               	swapf	24,w	;volatile
  1581  052C  390F               	andlw	15
  1582  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1583  052E  07D4               	addwf	ADC_Sample@ad_temp,f	;volatile
  1584  052F  1803               	skipnc
  1585  0530  0AD5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1586                           
  1587                           ;main.c: 348: if (0 == admax)
  1588  0531  0852               	movf	ADC_Sample@admax,w	;volatile
  1589  0532  0453               	iorwf	ADC_Sample@admax+1,w	;volatile
  1590  0533  1D03               	btfss	3,2
  1591  0534  2D38               	goto	l4329
  1592                           
  1593                           ;main.c: 349: {
  1594                           ;main.c: 350: admax = ad_temp;
  1595  0535  27B3  118A         	fcall	PL40	;call to abstracted procedure
  1596  0537  2D4B               	goto	l4335
  1597  0538                     l4329:	
  1598                           ;main.c: 352: }
  1599                           
  1600                           ;main.c: 351: admin = ad_temp;
  1601                           
  1602                           
  1603                           ;main.c: 353: else if (ad_temp > admax)
  1604  0538  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1605  0539  0253               	subwf	ADC_Sample@admax+1,w	;volatile
  1606  053A  1D03               	skipz
  1607  053B  2D3E               	goto	u4445
  1608  053C  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1609  053D  0252               	subwf	ADC_Sample@admax,w	;volatile
  1610  053E                     u4445:	
  1611  053E  1803               	skipnc
  1612  053F  2D43               	goto	l4333
  1613                           
  1614                           ;main.c: 354: admax = ad_temp;
  1615  0540  27B3  118A         	fcall	PL40	;call to abstracted procedure
  1616  0542  2D4F               	goto	l1000
  1617  0543                     l4333:	
  1618                           
  1619                           ;main.c: 355: else if (ad_temp < admin)
  1620  0543  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1621  0544  0255               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1622  0545  1D03               	skipz
  1623  0546  2D49               	goto	u4455
  1624  0547  0850               	movf	ADC_Sample@admin,w	;volatile
  1625  0548  0254               	subwf	ADC_Sample@ad_temp,w	;volatile
  1626  0549                     u4455:	
  1627  0549  1803               	skipnc
  1628  054A  2D4F               	goto	l1000
  1629  054B                     l4335:	
  1630                           
  1631                           ;main.c: 356: admin = ad_temp;
  1632  054B  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1633  054C  00D1               	movwf	ADC_Sample@admin+1	;volatile
  1634  054D  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1635  054E  00D0               	movwf	ADC_Sample@admin	;volatile
  1636  054F                     l1000:	
  1637                           
  1638                           ;main.c: 358: adsum += ad_temp;
  1639  054F  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  1640  0550  00F4               	movwf	??_ADC_Sample
  1641  0551  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1642  0552  00F5               	movwf	??_ADC_Sample+1
  1643  0553  01F6               	clrf	??_ADC_Sample+2
  1644  0554  01F7               	clrf	??_ADC_Sample+3
  1645  0555  0874               	movf	??_ADC_Sample,w
  1646  0556  07CC               	addwf	ADC_Sample@adsum,f	;volatile
  1647  0557  0875               	movf	??_ADC_Sample+1,w
  1648  0558  1103               	clrz
  1649  0559  1803               	skipnc
  1650  055A  3E01               	addlw	1
  1651  055B  1D03               	btfss	3,2
  1652  055C  07CD               	addwf	ADC_Sample@adsum+1,f	;volatile
  1653  055D  0876               	movf	??_ADC_Sample+2,w
  1654  055E  1103               	clrz
  1655  055F  1803               	skipnc
  1656  0560  3E01               	addlw	1
  1657  0561  1D03               	btfss	3,2
  1658  0562  07CE               	addwf	ADC_Sample@adsum+2,f	;volatile
  1659  0563  0877               	movf	??_ADC_Sample+3,w
  1660  0564  1103               	clrz
  1661  0565  1803               	skipnc
  1662  0566  3E01               	addlw	1
  1663  0567  1D03               	btfss	3,2
  1664  0568  07CF               	addwf	ADC_Sample@adsum+3,f	;volatile
  1665  0569  300A               	movlw	10
  1666  056A  0ACB               	incf	ADC_Sample@i,f
  1667  056B  024B               	subwf	ADC_Sample@i,w
  1668  056C  1C03               	skipc
  1669  056D  2CFD               	goto	l4311
  1670                           
  1671                           ;main.c: 359: }
  1672                           ;main.c: 360: adsum -= admax;
  1673  056E  0852               	movf	ADC_Sample@admax,w	;volatile
  1674  056F  00F4               	movwf	??_ADC_Sample
  1675  0570  0853               	movf	ADC_Sample@admax+1,w	;volatile
  1676  0571  278B  118A         	fcall	PL6	;call to abstracted procedure
  1677  0573  1C03               	skipc
  1678  0574  0F77               	incfsz	??_ADC_Sample+3,w
  1679  0575  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1680                           
  1681                           ;main.c: 361: if (adsum >= admin)
  1682  0576  0850               	movf	ADC_Sample@admin,w	;volatile
  1683  0577  00F4               	movwf	??_ADC_Sample
  1684  0578  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1685  0579  00F5               	movwf	??_ADC_Sample+1
  1686  057A  01F6               	clrf	??_ADC_Sample+2
  1687  057B  01F7               	clrf	??_ADC_Sample+3
  1688  057C  0877               	movf	??_ADC_Sample+3,w
  1689  057D  024F               	subwf	ADC_Sample@adsum+3,w	;volatile
  1690  057E  1D03               	skipz
  1691  057F  2D8A               	goto	u4495
  1692  0580  0876               	movf	??_ADC_Sample+2,w
  1693  0581  024E               	subwf	ADC_Sample@adsum+2,w	;volatile
  1694  0582  1D03               	skipz
  1695  0583  2D8A               	goto	u4495
  1696  0584  0875               	movf	??_ADC_Sample+1,w
  1697  0585  024D               	subwf	ADC_Sample@adsum+1,w	;volatile
  1698  0586  1D03               	skipz
  1699  0587  2D8A               	goto	u4495
  1700  0588  0874               	movf	??_ADC_Sample,w
  1701  0589  024C               	subwf	ADC_Sample@adsum,w	;volatile
  1702  058A                     u4495:	
  1703  058A  1C03               	skipc
  1704  058B  2D95               	goto	l1004
  1705                           
  1706                           ;main.c: 362: adsum -= admin;
  1707  058C  0850               	movf	ADC_Sample@admin,w	;volatile
  1708  058D  00F4               	movwf	??_ADC_Sample
  1709  058E  0851               	movf	ADC_Sample@admin+1,w	;volatile
  1710  058F  278B  118A         	fcall	PL6	;call to abstracted procedure
  1711  0591  1C03               	skipc
  1712  0592  0F77               	incfsz	??_ADC_Sample+3,w
  1713  0593  02CF               	subwf	ADC_Sample@adsum+3,f	;volatile
  1714  0594  2D99               	goto	l4345
  1715  0595                     l1004:	
  1716                           
  1717                           ;main.c: 363: else
  1718                           ;main.c: 364: adsum = 0;
  1719  0595  01CC               	clrf	ADC_Sample@adsum	;volatile
  1720  0596  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  1721  0597  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  1722  0598  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  1723  0599                     l4345:	
  1724                           
  1725                           ;main.c: 366: adresult = adsum >> 3;
  1726  0599  084C               	movf	ADC_Sample@adsum,w	;volatile
  1727  059A  00F4               	movwf	??_ADC_Sample
  1728  059B  084D               	movf	ADC_Sample@adsum+1,w	;volatile
  1729  059C  00F5               	movwf	??_ADC_Sample+1
  1730  059D  084E               	movf	ADC_Sample@adsum+2,w	;volatile
  1731  059E  00F6               	movwf	??_ADC_Sample+2
  1732  059F  084F               	movf	ADC_Sample@adsum+3,w	;volatile
  1733  05A0  00F7               	movwf	??_ADC_Sample+3
  1734  05A1  3003               	movlw	3
  1735  05A2                     u4515:	
  1736  05A2  1003               	clrc
  1737  05A3  0CF7               	rrf	??_ADC_Sample+3,f
  1738  05A4  0CF6               	rrf	??_ADC_Sample+2,f
  1739  05A5  0CF5               	rrf	??_ADC_Sample+1,f
  1740  05A6  0CF4               	rrf	??_ADC_Sample,f
  1741  05A7  3EFF               	addlw	-1
  1742  05A8  1D03               	skipz
  1743  05A9  2DA2               	goto	u4515
  1744  05AA  0875               	movf	??_ADC_Sample+1,w
  1745  05AB  00C8               	movwf	_adresult+1	;volatile
  1746  05AC  0874               	movf	??_ADC_Sample,w
  1747  05AD  00C7               	movwf	_adresult	;volatile
  1748                           
  1749                           ;main.c: 368: adsum = 0;
  1750                           
  1751                           ;main.c: 369: admin = 0;
  1752                           
  1753                           ;main.c: 370: admax = 0;
  1754  05AE  279A               	fcall	PL18	;call to abstracted procedure
  1755                           
  1756                           ;main.c: 371: return 0xA5;
  1757  05AF  34A5               	retlw	165
  1758  05B0                     __end_of_ADC_Sample:	
  1759  05B0                     __ptext14:	
  1760 ;; *************** function ___ftdiv *****************
  1761 ;; Defined at:
  1762 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  f2              3    6[BANK0 ] float 
  1765 ;;  f1              3    9[BANK0 ] float 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  f3              3   16[BANK0 ] float 
  1768 ;;  sign            1   20[BANK0 ] unsigned char 
  1769 ;;  exp             1   19[BANK0 ] unsigned char 
  1770 ;;  cntr            1   15[BANK0 ] unsigned char 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  3    6[BANK0 ] float 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0, pclath, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 300/0
  1777 ;;		On exit  : 300/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       6       0       0
  1781 ;;      Locals:         0       6       0       0
  1782 ;;      Temps:          0       3       0       0
  1783 ;;      Totals:         0      15       0       0
  1784 ;;Total ram usage:       15 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    3
  1787 ;; This function calls:
  1788 ;;		___ftpack
  1789 ;; This function is called by:
  1790 ;;		_workCtr
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           
  1795                           ;psect for function ___ftdiv
  1796  05B0                     ___ftdiv:	
  1797                           
  1798                           ;incstack = 0
  1799                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1800  05B0  0852               	movf	___ftdiv@f1,w
  1801  05B1  00D5               	movwf	??___ftdiv
  1802  05B2  0853               	movf	___ftdiv@f1+1,w
  1803  05B3  00D6               	movwf	??___ftdiv+1
  1804  05B4  0854               	movf	___ftdiv@f1+2,w
  1805  05B5  00D7               	movwf	??___ftdiv+2
  1806  05B6  1003               	clrc
  1807  05B7  0D56               	rlf	??___ftdiv+1,w
  1808  05B8  0D57               	rlf	??___ftdiv+2,w
  1809  05B9  00DC               	movwf	___ftdiv@exp
  1810  05BA  085C               	movf	___ftdiv@exp,w
  1811  05BB  1D03               	btfss	3,2
  1812  05BC  2DBE               	goto	l4741
  1813  05BD  2FAA               	ljmp	PL32	;call to abstracted procedure
  1814  05BE                     l4741:	
  1815  05BE  084F               	movf	___ftdiv@f2,w
  1816  05BF  00D5               	movwf	??___ftdiv
  1817  05C0  0850               	movf	___ftdiv@f2+1,w
  1818  05C1  00D6               	movwf	??___ftdiv+1
  1819  05C2  0851               	movf	___ftdiv@f2+2,w
  1820  05C3  00D7               	movwf	??___ftdiv+2
  1821  05C4  1003               	clrc
  1822  05C5  0D56               	rlf	??___ftdiv+1,w
  1823  05C6  0D57               	rlf	??___ftdiv+2,w
  1824  05C7  00DD               	movwf	___ftdiv@sign
  1825  05C8  085D               	movf	___ftdiv@sign,w
  1826  05C9  1D03               	btfss	3,2
  1827  05CA  2DCC               	goto	l1617
  1828  05CB  2FAA               	ljmp	PL32	;call to abstracted procedure
  1829  05CC                     l1617:	
  1830  05CC  3089               	movlw	137
  1831  05CD  01D9               	clrf	___ftdiv@f3
  1832  05CE  01DA               	clrf	___ftdiv@f3+1
  1833  05CF  01DB               	clrf	___ftdiv@f3+2
  1834  05D0  075D               	addwf	___ftdiv@sign,w
  1835  05D1  00D5               	movwf	??___ftdiv
  1836  05D2  02DC               	subwf	___ftdiv@exp,f
  1837  05D3  0854               	movf	___ftdiv@f1+2,w
  1838  05D4  00DD               	movwf	___ftdiv@sign
  1839  05D5  0851               	movf	___ftdiv@f2+2,w
  1840  05D6  06DD               	xorwf	___ftdiv@sign,f
  1841  05D7  3080               	movlw	128
  1842  05D8  05DD               	andwf	___ftdiv@sign,f
  1843  05D9  3018               	movlw	24
  1844  05DA  17D3               	bsf	___ftdiv@f1+1,7
  1845  05DB  01D4               	clrf	___ftdiv@f1+2
  1846  05DC  17D0               	bsf	___ftdiv@f2+1,7
  1847  05DD  01D1               	clrf	___ftdiv@f2+2
  1848  05DE  00D8               	movwf	___ftdiv@cntr
  1849  05DF                     l4763:	
  1850  05DF  1003               	clrc
  1851  05E0  0DD9               	rlf	___ftdiv@f3,f
  1852  05E1  0DDA               	rlf	___ftdiv@f3+1,f
  1853  05E2  0DDB               	rlf	___ftdiv@f3+2,f
  1854  05E3  0851               	movf	___ftdiv@f2+2,w
  1855  05E4  0254               	subwf	___ftdiv@f1+2,w
  1856  05E5  1D03               	skipz
  1857  05E6  2DED               	goto	u5175
  1858  05E7  0850               	movf	___ftdiv@f2+1,w
  1859  05E8  0253               	subwf	___ftdiv@f1+1,w
  1860  05E9  1D03               	skipz
  1861  05EA  2DED               	goto	u5175
  1862  05EB  084F               	movf	___ftdiv@f2,w
  1863  05EC  0252               	subwf	___ftdiv@f1,w
  1864  05ED                     u5175:	
  1865  05ED  1C03               	skipc
  1866  05EE  2DFB               	goto	L4
  1867  05EF  084F               	movf	___ftdiv@f2,w
  1868  05F0  02D2               	subwf	___ftdiv@f1,f
  1869  05F1  0850               	movf	___ftdiv@f2+1,w
  1870  05F2  1C03               	skipc
  1871  05F3  0F50               	incfsz	___ftdiv@f2+1,w
  1872  05F4  02D3               	subwf	___ftdiv@f1+1,f
  1873  05F5  0851               	movf	___ftdiv@f2+2,w
  1874  05F6  1C03               	skipc
  1875  05F7  0A51               	incf	___ftdiv@f2+2,w
  1876  05F8  02D4               	subwf	___ftdiv@f1+2,f
  1877  05F9  1459               	bsf	___ftdiv@f3,0
  1878  05FA  1003               	clrc
  1879  05FB                     L4:	
  1880  05FB  0DD2               	rlf	___ftdiv@f1,f
  1881  05FC  0DD3               	rlf	___ftdiv@f1+1,f
  1882  05FD  0DD4               	rlf	___ftdiv@f1+2,f
  1883  05FE  0BD8               	decfsz	___ftdiv@cntr,f
  1884  05FF  2DDF               	goto	l4763
  1885  0600  0859               	movf	___ftdiv@f3,w
  1886  0601  00F3               	movwf	___ftpack@arg
  1887  0602  085A               	movf	___ftdiv@f3+1,w
  1888  0603  00F4               	movwf	___ftpack@arg+1
  1889  0604  085B               	movf	___ftdiv@f3+2,w
  1890  0605  00F5               	movwf	___ftpack@arg+2
  1891  0606  085C               	movf	___ftdiv@exp,w
  1892  0607  00F6               	movwf	___ftpack@exp
  1893  0608  085D               	movf	___ftdiv@sign,w
  1894  0609  00F7               	movwf	___ftpack@sign
  1895  060A  267B               	fcall	___ftpack
  1896  060B  0873               	movf	?___ftpack,w
  1897  060C  00CF               	movwf	?___ftdiv
  1898  060D  0874               	movf	?___ftpack+1,w
  1899  060E  00D0               	movwf	?___ftdiv+1
  1900  060F  0875               	movf	?___ftpack+2,w
  1901  0610  00D1               	movwf	?___ftdiv+2
  1902  0611  0008               	return
  1903  0612                     __end_of___ftdiv:	
  1904  0612                     __ptext13:	
  1905 ;; *************** function ___fttol *****************
  1906 ;; Defined at:
  1907 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  f1              3   21[BANK0 ] float 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  lval            4   29[BANK0 ] unsigned long 
  1912 ;;  exp1            1   33[BANK0 ] unsigned char 
  1913 ;;  sign1           1   28[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  4   21[BANK0 ] long 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0
  1918 ;; Tracked objects:
  1919 ;;		On entry : 300/0
  1920 ;;		On exit  : 300/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1923 ;;      Params:         0       4       0       0
  1924 ;;      Locals:         0       6       0       0
  1925 ;;      Temps:          0       3       0       0
  1926 ;;      Totals:         0      13       0       0
  1927 ;;Total ram usage:       13 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_workCtr
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function ___fttol
  1939  0612                     ___fttol:	
  1940                           
  1941                           ;incstack = 0
  1942                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1943  0612  27A3  118A         	fcall	PL26	;call to abstracted procedure
  1944  0614  1003               	clrc
  1945  0615  0D63               	rlf	??___fttol+1,w
  1946  0616  0D64               	rlf	??___fttol+2,w
  1947  0617  00EA               	movwf	___fttol@exp1
  1948  0618  086A               	movf	___fttol@exp1,w
  1949  0619  1D03               	btfss	3,2
  1950  061A  2E20               	goto	l4781
  1951  061B                     l4779:	
  1952  061B  01DE               	clrf	?___fttol
  1953  061C  01DF               	clrf	?___fttol+1
  1954  061D  01E0               	clrf	?___fttol+2
  1955  061E  01E1               	clrf	?___fttol+3
  1956  061F  0008               	return
  1957  0620                     l4781:	
  1958  0620  27A3  118A         	fcall	PL26	;call to abstracted procedure
  1959  0622  3017               	movlw	23
  1960  0623                     u5205:	
  1961  0623  1003               	clrc
  1962  0624  0CE4               	rrf	??___fttol+2,f
  1963  0625  0CE3               	rrf	??___fttol+1,f
  1964  0626  0CE2               	rrf	??___fttol,f
  1965  0627  3EFF               	addlw	-1
  1966  0628  1D03               	skipz
  1967  0629  2E23               	goto	u5205
  1968  062A  0862               	movf	??___fttol,w
  1969  062B  00E5               	movwf	___fttol@sign1
  1970  062C  17DF               	bsf	___fttol@f1+1,7
  1971  062D  01E0               	clrf	___fttol@f1+2
  1972  062E  085E               	movf	___fttol@f1,w
  1973  062F  00E6               	movwf	___fttol@lval
  1974  0630  085F               	movf	___fttol@f1+1,w
  1975  0631  00E7               	movwf	___fttol@lval+1
  1976  0632  0860               	movf	___fttol@f1+2,w
  1977  0633  00E8               	movwf	___fttol@lval+2
  1978  0634  308E               	movlw	142
  1979  0635  01E9               	clrf	___fttol@lval+3
  1980  0636  02EA               	subwf	___fttol@exp1,f
  1981  0637  1FEA               	btfss	___fttol@exp1,7
  1982  0638  2E46               	goto	l4801
  1983  0639  086A               	movf	___fttol@exp1,w
  1984  063A  3A80               	xorlw	128
  1985  063B  3E8F               	addlw	143
  1986  063C  1C03               	btfss	3,0
  1987  063D  2E1B               	goto	l4779
  1988  063E                     l4797:	
  1989  063E  1003               	clrc
  1990  063F  0CE9               	rrf	___fttol@lval+3,f
  1991  0640  0CE8               	rrf	___fttol@lval+2,f
  1992  0641  0CE7               	rrf	___fttol@lval+1,f
  1993  0642  0CE6               	rrf	___fttol@lval,f
  1994  0643  0FEA               	incfsz	___fttol@exp1,f
  1995  0644  2E3E               	goto	l4797
  1996  0645  2E54               	goto	l4809
  1997  0646                     l4801:	
  1998  0646  3018               	movlw	24
  1999  0647  026A               	subwf	___fttol@exp1,w
  2000  0648  1803               	btfsc	3,0
  2001  0649  2E1B               	goto	l4779
  2002  064A                     l4807:	
  2003  064A  086A               	movf	___fttol@exp1,w
  2004  064B  1903               	btfsc	3,2
  2005  064C  2E54               	goto	l4809
  2006  064D  1003               	clrc
  2007  064E  0DE6               	rlf	___fttol@lval,f
  2008  064F  0DE7               	rlf	___fttol@lval+1,f
  2009  0650  0DE8               	rlf	___fttol@lval+2,f
  2010  0651  0DE9               	rlf	___fttol@lval+3,f
  2011  0652  03EA               	decf	___fttol@exp1,f
  2012  0653  2E4A               	goto	l4807
  2013  0654                     l4809:	
  2014  0654  0865               	movf	___fttol@sign1,w
  2015  0655  1903               	btfsc	3,2
  2016  0656  2E62               	goto	l4813
  2017  0657  09E6               	comf	___fttol@lval,f
  2018  0658  09E7               	comf	___fttol@lval+1,f
  2019  0659  09E8               	comf	___fttol@lval+2,f
  2020  065A  09E9               	comf	___fttol@lval+3,f
  2021  065B  0AE6               	incf	___fttol@lval,f
  2022  065C  1903               	skipnz
  2023  065D  0AE7               	incf	___fttol@lval+1,f
  2024  065E  1903               	skipnz
  2025  065F  0AE8               	incf	___fttol@lval+2,f
  2026  0660  1903               	skipnz
  2027  0661  0AE9               	incf	___fttol@lval+3,f
  2028  0662                     l4813:	
  2029  0662  0869               	movf	___fttol@lval+3,w
  2030  0663  00E1               	movwf	?___fttol+3
  2031  0664  0868               	movf	___fttol@lval+2,w
  2032  0665  00E0               	movwf	?___fttol+2
  2033  0666  0867               	movf	___fttol@lval+1,w
  2034  0667  00DF               	movwf	?___fttol+1
  2035  0668  0866               	movf	___fttol@lval,w
  2036  0669  00DE               	movwf	?___fttol
  2037  066A  0008               	return
  2038  066B                     __end_of___fttol:	
  2039  066B                     __ptext12:	
  2040 ;; *************** function ___lwtoft *****************
  2041 ;; Defined at:
  2042 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  c               2    3[BANK0 ] unsigned int 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  3    3[BANK0 ] float 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2, status,0, pclath, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 300/0
  2053 ;;		On exit  : 300/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2056 ;;      Params:         0       3       0       0
  2057 ;;      Locals:         0       0       0       0
  2058 ;;      Temps:          0       0       0       0
  2059 ;;      Totals:         0       3       0       0
  2060 ;;Total ram usage:        3 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    3
  2063 ;; This function calls:
  2064 ;;		___ftpack
  2065 ;; This function is called by:
  2066 ;;		_workCtr
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           
  2071                           ;psect for function ___lwtoft
  2072  066B                     ___lwtoft:	
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2076  066B  084C               	movf	___lwtoft@c,w
  2077  066C  00F3               	movwf	___ftpack@arg
  2078  066D  084D               	movf	___lwtoft@c+1,w
  2079  066E  00F4               	movwf	___ftpack@arg+1
  2080  066F  308E               	movlw	142
  2081  0670  01F5               	clrf	___ftpack@arg+2
  2082  0671  00F6               	movwf	___ftpack@exp
  2083  0672  01F7               	clrf	___ftpack@sign
  2084  0673  267B               	fcall	___ftpack
  2085  0674  0873               	movf	?___ftpack,w
  2086  0675  00CC               	movwf	?___lwtoft
  2087  0676  0874               	movf	?___ftpack+1,w
  2088  0677  00CD               	movwf	?___lwtoft+1
  2089  0678  0875               	movf	?___ftpack+2,w
  2090  0679  00CE               	movwf	?___lwtoft+2
  2091  067A  0008               	return
  2092  067B                     __end_of___lwtoft:	
  2093  067B                     __ptext15:	
  2094 ;; *************** function ___ftpack *****************
  2095 ;; Defined at:
  2096 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;  arg             3    3[COMMON] unsigned um
  2099 ;;  exp             1    6[COMMON] unsigned char 
  2100 ;;  sign            1    7[COMMON] unsigned char 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  3    3[COMMON] float 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2, status,0
  2107 ;; Tracked objects:
  2108 ;;		On entry : 300/0
  2109 ;;		On exit  : 300/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2112 ;;      Params:         5       0       0       0
  2113 ;;      Locals:         0       0       0       0
  2114 ;;      Temps:          0       3       0       0
  2115 ;;      Totals:         5       3       0       0
  2116 ;;Total ram usage:        8 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    2
  2119 ;; This function calls:
  2120 ;;		Nothing
  2121 ;; This function is called by:
  2122 ;;		___ftdiv
  2123 ;;		___lwtoft
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           
  2128                           ;psect for function ___ftpack
  2129  067B                     ___ftpack:	
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2133  067B  0876               	movf	___ftpack@exp,w
  2134  067C  1903               	btfsc	3,2
  2135  067D  2E83               	goto	l1563
  2136  067E  0875               	movf	___ftpack@arg+2,w
  2137  067F  0474               	iorwf	___ftpack@arg+1,w
  2138  0680  0473               	iorwf	___ftpack@arg,w
  2139  0681  1D03               	skipz
  2140  0682  2E8A               	goto	l4449
  2141  0683                     l1563:	
  2142  0683  01F3               	clrf	?___ftpack
  2143  0684  01F4               	clrf	?___ftpack+1
  2144  0685  01F5               	clrf	?___ftpack+2
  2145  0686  0008               	return
  2146  0687                     l4447:	
  2147  0687  0AF6               	incf	___ftpack@exp,f
  2148  0688  27AE  118A         	fcall	PL38	;call to abstracted procedure
  2149  068A                     l4449:	
  2150  068A  30FE               	movlw	254
  2151  068B  0575               	andwf	___ftpack@arg+2,w
  2152  068C  1903               	btfsc	3,2
  2153  068D  2E97               	goto	l4453
  2154  068E  2E87               	goto	l4447
  2155  068F                     l4451:	
  2156  068F  0AF6               	incf	___ftpack@exp,f
  2157  0690  0AF3               	incf	___ftpack@arg,f
  2158  0691  1903               	skipnz
  2159  0692  0AF4               	incf	___ftpack@arg+1,f
  2160  0693  1903               	skipnz
  2161  0694  0AF5               	incf	___ftpack@arg+2,f
  2162  0695  27AE  118A         	fcall	PL38	;call to abstracted procedure
  2163  0697                     l4453:	
  2164  0697  30FF               	movlw	255
  2165  0698  0575               	andwf	___ftpack@arg+2,w
  2166  0699  1903               	btfsc	3,2
  2167  069A  2EA5               	goto	l4457
  2168  069B  2E8F               	goto	l4451
  2169  069C                     l4459:	
  2170  069C  3002               	movlw	2
  2171  069D  0276               	subwf	___ftpack@exp,w
  2172  069E  1C03               	btfss	3,0
  2173  069F  2EA7               	goto	l1575
  2174  06A0  03F6               	decf	___ftpack@exp,f
  2175  06A1  1003               	clrc
  2176  06A2  0DF3               	rlf	___ftpack@arg,f
  2177  06A3  0DF4               	rlf	___ftpack@arg+1,f
  2178  06A4  0DF5               	rlf	___ftpack@arg+2,f
  2179  06A5                     l4457:	
  2180  06A5  1FF4               	btfss	___ftpack@arg+1,7
  2181  06A6  2E9C               	goto	l4459
  2182  06A7                     l1575:	
  2183  06A7  1C76               	btfss	___ftpack@exp,0
  2184  06A8  13F4               	bcf	___ftpack@arg+1,7
  2185  06A9  1003               	clrc
  2186  06AA  0CF6               	rrf	___ftpack@exp,f
  2187  06AB  0876               	movf	___ftpack@exp,w
  2188  06AC  00CB               	movwf	??___ftpack+2
  2189  06AD  01CA               	clrf	??___ftpack+1
  2190  06AE  01C9               	clrf	??___ftpack
  2191  06AF  0849               	movf	??___ftpack,w
  2192  06B0  04F3               	iorwf	___ftpack@arg,f
  2193  06B1  084A               	movf	??___ftpack+1,w
  2194  06B2  04F4               	iorwf	___ftpack@arg+1,f
  2195  06B3  084B               	movf	??___ftpack+2,w
  2196  06B4  04F5               	iorwf	___ftpack@arg+2,f
  2197  06B5  0877               	movf	___ftpack@sign,w
  2198  06B6  1D03               	btfss	3,2
  2199  06B7  17F5               	bsf	___ftpack@arg+2,7
  2200  06B8  0008               	return
  2201  06B9                     __end_of___ftpack:	
  2202  06B9                     __ptext10:	
  2203 ;; *************** function ___lmul *****************
  2204 ;; Defined at:
  2205 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2208 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  product         4    3[COMMON] unsigned long 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  4    0[BANK0 ] unsigned long 
  2213 ;; Registers used:
  2214 ;;		wreg, status,2, status,0
  2215 ;; Tracked objects:
  2216 ;;		On entry : 300/0
  2217 ;;		On exit  : 300/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2220 ;;      Params:         0       8       0       0
  2221 ;;      Locals:         4       0       0       0
  2222 ;;      Temps:          0       0       0       0
  2223 ;;      Totals:         4       8       0       0
  2224 ;;Total ram usage:       12 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    2
  2227 ;; This function calls:
  2228 ;;		Nothing
  2229 ;; This function is called by:
  2230 ;;		_fanCtr
  2231 ;; This function uses a non-reentrant model
  2232 ;;
  2233                           
  2234                           
  2235                           ;psect for function ___lmul
  2236  06B9                     ___lmul:	
  2237                           
  2238                           ;incstack = 0
  2239                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2240  06B9  01F3               	clrf	___lmul@product
  2241  06BA  01F4               	clrf	___lmul@product+1
  2242  06BB  01F5               	clrf	___lmul@product+2
  2243  06BC  01F6               	clrf	___lmul@product+3
  2244  06BD                     l1418:	
  2245  06BD  1C49               	btfss	___lmul@multiplier,0
  2246  06BE  2ED3               	goto	l4435
  2247  06BF  084D               	movf	___lmul@multiplicand,w
  2248  06C0  07F3               	addwf	___lmul@product,f
  2249  06C1  084E               	movf	___lmul@multiplicand+1,w
  2250  06C2  1103               	clrz
  2251  06C3  1803               	skipnc
  2252  06C4  3E01               	addlw	1
  2253  06C5  1D03               	btfss	3,2
  2254  06C6  07F4               	addwf	___lmul@product+1,f
  2255  06C7  084F               	movf	___lmul@multiplicand+2,w
  2256  06C8  1103               	clrz
  2257  06C9  1803               	skipnc
  2258  06CA  3E01               	addlw	1
  2259  06CB  1D03               	btfss	3,2
  2260  06CC  07F5               	addwf	___lmul@product+2,f
  2261  06CD  0850               	movf	___lmul@multiplicand+3,w
  2262  06CE  1103               	clrz
  2263  06CF  1803               	skipnc
  2264  06D0  3E01               	addlw	1
  2265  06D1  1D03               	btfss	3,2
  2266  06D2  07F6               	addwf	___lmul@product+3,f
  2267  06D3                     l4435:	
  2268  06D3  1003               	clrc
  2269  06D4  0DCD               	rlf	___lmul@multiplicand,f
  2270  06D5  0DCE               	rlf	___lmul@multiplicand+1,f
  2271  06D6  0DCF               	rlf	___lmul@multiplicand+2,f
  2272  06D7  0DD0               	rlf	___lmul@multiplicand+3,f
  2273  06D8  1003               	clrc
  2274  06D9  0CCC               	rrf	___lmul@multiplier+3,f
  2275  06DA  0CCB               	rrf	___lmul@multiplier+2,f
  2276  06DB  0CCA               	rrf	___lmul@multiplier+1,f
  2277  06DC  0CC9               	rrf	___lmul@multiplier,f
  2278  06DD  084C               	movf	___lmul@multiplier+3,w
  2279  06DE  044B               	iorwf	___lmul@multiplier+2,w
  2280  06DF  044A               	iorwf	___lmul@multiplier+1,w
  2281  06E0  0449               	iorwf	___lmul@multiplier,w
  2282  06E1  1D03               	skipz
  2283  06E2  2EBD               	goto	l1418
  2284  06E3  0876               	movf	___lmul@product+3,w
  2285  06E4  00CC               	movwf	?___lmul+3
  2286  06E5  0875               	movf	___lmul@product+2,w
  2287  06E6  00CB               	movwf	?___lmul+2
  2288  06E7  0874               	movf	___lmul@product+1,w
  2289  06E8  00CA               	movwf	?___lmul+1
  2290  06E9  0873               	movf	___lmul@product,w
  2291  06EA  00C9               	movwf	?___lmul
  2292  06EB  0008               	return
  2293  06EC                     __end_of___lmul:	
  2294  06EC                     __ptext5:	
  2295 ;; *************** function _keyLedCtr *****************
  2296 ;; Defined at:
  2297 ;;		line 698 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, pclath, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 300/0
  2308 ;;		On exit  : 300/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2311 ;;      Params:         0       0       0       0
  2312 ;;      Locals:         0       0       0       0
  2313 ;;      Temps:          0       0       0       0
  2314 ;;      Totals:         0       0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		___lwmod
  2320 ;; This function is called by:
  2321 ;;		_workCtr
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _keyLedCtr
  2327  06EC                     _keyLedCtr:	
  2328                           
  2329                           ;main.c: 700: if(shanshuoTime > 0)
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2333  06EC  082C               	movf	_shanshuoTime,w
  2334  06ED  042D               	iorwf	_shanshuoTime+1,w
  2335  06EE  1903               	btfsc	3,2
  2336  06EF  2F08               	goto	l4581
  2337                           
  2338                           ;main.c: 701: {
  2339                           ;main.c: 702: shanshuoTime--;
  2340  06F0  3001               	movlw	1
  2341  06F1  02AC               	subwf	_shanshuoTime,f
  2342  06F2  3000               	movlw	0
  2343  06F3  1C03               	skipc
  2344  06F4  03AD               	decf	_shanshuoTime+1,f
  2345  06F5  02AD               	subwf	_shanshuoTime+1,f
  2346                           
  2347                           ;main.c: 703: if((shanshuoTime % 75) < 37)
  2348  06F6  304B               	movlw	75
  2349  06F7  00F3               	movwf	___lwmod@divisor
  2350  06F8  01F4               	clrf	___lwmod@divisor+1
  2351  06F9  082D               	movf	_shanshuoTime+1,w
  2352  06FA  00F6               	movwf	___lwmod@dividend+1
  2353  06FB  082C               	movf	_shanshuoTime,w
  2354  06FC  00F5               	movwf	___lwmod@dividend
  2355  06FD  2730  118A         	fcall	___lwmod
  2356  06FF  3000               	movlw	0
  2357  0700  0274               	subwf	?___lwmod+1,w
  2358  0701  3025               	movlw	37
  2359  0702  1903               	skipnz
  2360  0703  0273               	subwf	?___lwmod,w
  2361  0704  1803               	skipnc
  2362  0705  2F0B               	goto	l1107
  2363  0706                     l4579:	
  2364                           
  2365                           ;main.c: 704: {
  2366                           ;main.c: 705: fanKeyFlag = 0;
  2367  0706  01BA               	clrf	_fanKeyFlag
  2368                           
  2369                           ;main.c: 706: }
  2370  0707  2F0D               	goto	l4587
  2371  0708                     l4581:	
  2372                           
  2373                           ;main.c: 712: else if(workStep > 0)
  2374  0708  0844               	movf	_workStep,w
  2375  0709  1903               	btfsc	3,2
  2376  070A  2F06               	goto	l4579
  2377  070B                     l1107:	
  2378                           
  2379                           ;main.c: 707: else
  2380                           ;main.c: 708: {
  2381                           ;main.c: 709: fanKeyFlag = 1;
  2382  070B  01BA               	clrf	_fanKeyFlag
  2383  070C  0ABA               	incf	_fanKeyFlag,f
  2384  070D                     l4587:	
  2385                           
  2386                           ;main.c: 719: }
  2387                           ;main.c: 721: if(shanshuoTime2 > 0)
  2388  070D  082A               	movf	_shanshuoTime2,w
  2389  070E  042B               	iorwf	_shanshuoTime2+1,w
  2390  070F  1903               	btfsc	3,2
  2391  0710  2F2C               	goto	l4595
  2392                           
  2393                           ;main.c: 722: {
  2394                           ;main.c: 723: shanshuoTime2--;
  2395  0711  3001               	movlw	1
  2396  0712  02AA               	subwf	_shanshuoTime2,f
  2397  0713  3000               	movlw	0
  2398  0714  1C03               	skipc
  2399  0715  03AB               	decf	_shanshuoTime2+1,f
  2400  0716  02AB               	subwf	_shanshuoTime2+1,f
  2401                           
  2402                           ;main.c: 724: if((shanshuoTime2 % 75) < 37)
  2403  0717  304B               	movlw	75
  2404  0718  00F3               	movwf	___lwmod@divisor
  2405  0719  01F4               	clrf	___lwmod@divisor+1
  2406  071A  082B               	movf	_shanshuoTime2+1,w
  2407  071B  00F6               	movwf	___lwmod@dividend+1
  2408  071C  082A               	movf	_shanshuoTime2,w
  2409  071D  00F5               	movwf	___lwmod@dividend
  2410  071E  2730  118A         	fcall	___lwmod
  2411  0720  3000               	movlw	0
  2412  0721  0274               	subwf	?___lwmod+1,w
  2413  0722  3025               	movlw	37
  2414  0723  1903               	skipnz
  2415  0724  0273               	subwf	?___lwmod,w
  2416  0725  1803               	skipnc
  2417  0726  2F29               	goto	l1113
  2418  0727                     l4593:	
  2419                           
  2420                           ;main.c: 725: {
  2421                           ;main.c: 726: wuhuaKeyFlag = 0;
  2422  0727  01B9               	clrf	_wuhuaKeyFlag
  2423                           
  2424                           ;main.c: 727: }
  2425  0728  0008               	return
  2426  0729                     l1113:	
  2427                           
  2428                           ;main.c: 728: else
  2429                           ;main.c: 729: {
  2430                           ;main.c: 730: wuhuaKeyFlag = 1;
  2431  0729  01B9               	clrf	_wuhuaKeyFlag
  2432  072A  0AB9               	incf	_wuhuaKeyFlag,f
  2433  072B  0008               	return
  2434  072C                     l4595:	
  2435                           
  2436                           ;main.c: 733: else if(wuhuaFlag > 0)
  2437  072C  0843               	movf	_wuhuaFlag,w
  2438  072D  1D03               	btfss	3,2
  2439  072E  2F29               	goto	l1113
  2440  072F  2F27               	goto	l4593
  2441  0730                     __end_of_keyLedCtr:	
  2442  0730                     __ptext6:	
  2443 ;; *************** function ___lwmod *****************
  2444 ;; Defined at:
  2445 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  divisor         2    3[COMMON] unsigned int 
  2448 ;;  dividend        2    5[COMMON] unsigned int 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  counter         1    7[COMMON] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2    3[COMMON] unsigned int 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0
  2455 ;; Tracked objects:
  2456 ;;		On entry : 300/0
  2457 ;;		On exit  : 300/0
  2458 ;;		Unchanged: 300/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2460 ;;      Params:         4       0       0       0
  2461 ;;      Locals:         1       0       0       0
  2462 ;;      Temps:          0       0       0       0
  2463 ;;      Totals:         5       0       0       0
  2464 ;;Total ram usage:        5 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		_keyLedCtr
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           
  2475                           ;psect for function ___lwmod
  2476  0730                     ___lwmod:	
  2477                           
  2478                           ;incstack = 0
  2479                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2480  0730  0873               	movf	___lwmod@divisor,w
  2481  0731  0474               	iorwf	___lwmod@divisor+1,w
  2482  0732  1903               	btfsc	3,2
  2483  0733  2F4F               	goto	l4483
  2484  0734  01F7               	clrf	___lwmod@counter
  2485  0735                     L1:	
  2486  0735  0AF7               	incf	___lwmod@counter,f
  2487  0736  1BF4               	btfsc	___lwmod@divisor+1,7
  2488  0737  2F3C               	goto	l4475
  2489  0738  1003               	clrc
  2490  0739  0DF3               	rlf	___lwmod@divisor,f
  2491  073A  0DF4               	rlf	___lwmod@divisor+1,f
  2492  073B  2F35               	goto	L1
  2493  073C                     l4475:	
  2494  073C  0874               	movf	___lwmod@divisor+1,w
  2495  073D  0276               	subwf	___lwmod@dividend+1,w
  2496  073E  1D03               	skipz
  2497  073F  2F42               	goto	u4705
  2498  0740  0873               	movf	___lwmod@divisor,w
  2499  0741  0275               	subwf	___lwmod@dividend,w
  2500  0742                     u4705:	
  2501  0742  1C03               	skipc
  2502  0743  2F4B               	goto	L2
  2503  0744  0873               	movf	___lwmod@divisor,w
  2504  0745  02F5               	subwf	___lwmod@dividend,f
  2505  0746  0874               	movf	___lwmod@divisor+1,w
  2506  0747  1C03               	skipc
  2507  0748  03F6               	decf	___lwmod@dividend+1,f
  2508  0749  02F6               	subwf	___lwmod@dividend+1,f
  2509  074A  1003               	clrc
  2510  074B                     L2:	
  2511  074B  0CF4               	rrf	___lwmod@divisor+1,f
  2512  074C  0CF3               	rrf	___lwmod@divisor,f
  2513  074D  0BF7               	decfsz	___lwmod@counter,f
  2514  074E  2F3C               	goto	l4475
  2515  074F                     l4483:	
  2516  074F  0876               	movf	___lwmod@dividend+1,w
  2517  0750  00F4               	movwf	?___lwmod+1
  2518  0751  0875               	movf	___lwmod@dividend,w
  2519  0752  00F3               	movwf	?___lwmod
  2520  0753  0008               	return
  2521  0754                     __end_of___lwmod:	
  2522  0754                     __ptext9:	
  2523 ;; *************** function _fanInit *****************
  2524 ;; Defined at:
  2525 ;;		line 763 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;		None
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  1    wreg      void 
  2532 ;; Registers used:
  2533 ;;		wreg, status,2, status,0
  2534 ;; Tracked objects:
  2535 ;;		On entry : 300/0
  2536 ;;		On exit  : 300/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2539 ;;      Params:         0       0       0       0
  2540 ;;      Locals:         0       0       0       0
  2541 ;;      Temps:          0       0       0       0
  2542 ;;      Totals:         0       0       0       0
  2543 ;;Total ram usage:        0 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    2
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_fanCtr
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           
  2554                           ;psect for function _fanInit
  2555  0754                     _fanInit:	
  2556  0754                     l4373:	
  2557                           ;incstack = 0
  2558                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2559                           
  2560                           
  2561                           ;main.c: 766: PWMTH = 0x00;
  2562  0754  0198               	clrf	24	;volatile
  2563                           
  2564                           ;main.c: 767: PWMTL = 73;
  2565  0755  3049               	movlw	73
  2566  0756  0097               	movwf	23	;volatile
  2567                           
  2568                           ;main.c: 768: PWMD01H = 0x00;
  2569  0757  019E               	clrf	30	;volatile
  2570                           
  2571                           ;main.c: 769: PWMD1L = fanDuty;
  2572  0758  0842               	movf	_fanDuty,w
  2573  0759  009A               	movwf	26	;volatile
  2574                           
  2575                           ;main.c: 770: PWMCON1 = 0x40;
  2576  075A  3040               	movlw	64
  2577  075B  0096               	movwf	22	;volatile
  2578                           
  2579                           ;main.c: 771: PWMCON2 = 0x00;
  2580  075C  019D               	clrf	29	;volatile
  2581                           
  2582                           ;main.c: 772: PWMCON0 |= 0x22;
  2583  075D  3022               	movlw	34
  2584  075E  0495               	iorwf	21,f	;volatile
  2585  075F  0008               	return
  2586  0760                     __end_of_fanInit:	
  2587  0760                     __ptext8:	
  2588 ;; *************** function _fanStop *****************
  2589 ;; Defined at:
  2590 ;;		line 775 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;		None
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		status,2
  2599 ;; Tracked objects:
  2600 ;;		On entry : 300/0
  2601 ;;		On exit  : 300/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2604 ;;      Params:         0       0       0       0
  2605 ;;      Locals:         0       0       0       0
  2606 ;;      Temps:          0       0       0       0
  2607 ;;      Totals:         0       0       0       0
  2608 ;;Total ram usage:        0 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    2
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_fanCtr
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           
  2619                           ;psect for function _fanStop
  2620  0760                     _fanStop:	
  2621                           
  2622                           ;main.c: 777: PWMD1L = 0;
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in _fanStop: [status,2]
  2626  0760  019A               	clrf	26	;volatile
  2627                           
  2628                           ;main.c: 778: PWMCON0 &= 0xFD;
  2629  0761  1095               	bcf	21,1	;volatile
  2630                           
  2631                           ;main.c: 779: PORTB &= 0x7F;
  2632  0762  1386               	bcf	6,7	;volatile
  2633  0763  0008               	return
  2634  0764                     __end_of_fanStop:	
  2635  0764                     __ptext2:	
  2636 ;; *************** function _wuhuaCtr *****************
  2637 ;; Defined at:
  2638 ;;		line 833 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 200/0
  2649 ;;		On exit  : 200/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2652 ;;      Params:         0       0       0       0
  2653 ;;      Locals:         0       0       0       0
  2654 ;;      Temps:          0       0       0       0
  2655 ;;      Totals:         0       0       0       0
  2656 ;;Total ram usage:        0 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    3
  2659 ;; This function calls:
  2660 ;;		_pwmInit
  2661 ;;		_pwmStop
  2662 ;; This function is called by:
  2663 ;;		_workCtr
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           
  2668                           ;psect for function _wuhuaCtr
  2669  0764                     _wuhuaCtr:	
  2670  0764                     l4651:	
  2671                           ;incstack = 0
  2672                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
  2673                           
  2674                           
  2675                           ;main.c: 835: if(count1s == 0)
  2676  0764  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0765  0845               	movf	_count1s,w
  2678  0766  1D03               	btfss	3,2
  2679  0767  2F6D               	goto	l4657
  2680                           
  2681                           ;main.c: 836: {
  2682                           ;main.c: 837: if(++count10s >= 10)
  2683  0768  300A               	movlw	10
  2684  0769  0AC1               	incf	_count10s,f
  2685  076A  0241               	subwf	_count10s,w
  2686  076B  1803               	btfsc	3,0
  2687                           
  2688                           ;main.c: 838: {
  2689                           ;main.c: 839: count10s = 0;
  2690  076C  01C1               	clrf	_count10s
  2691  076D                     l4657:	
  2692                           
  2693                           ;main.c: 840: }
  2694                           ;main.c: 841: }
  2695                           ;main.c: 842: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
  2696  076D  0343               	decf	_wuhuaFlag,w
  2697  076E  1903               	btfsc	3,2
  2698  076F  2F78               	goto	l4663
  2699  0770  3002               	movlw	2
  2700  0771  0643               	xorwf	_wuhuaFlag,w
  2701  0772  1D03               	btfss	3,2
  2702  0773  2F79               	goto	l4665
  2703  0774  3005               	movlw	5
  2704  0775  0241               	subwf	_count10s,w
  2705  0776  1803               	skipnc
  2706  0777  2F79               	goto	l4665
  2707  0778                     l4663:	
  2708                           
  2709                           ;main.c: 843: {
  2710                           ;main.c: 844: pwmInit();
  2711  0778  2F7A               	ljmp	l4357
  2712  0779                     l4665:	
  2713                           ;main.c: 859: }
  2714                           
  2715                           
  2716                           ;main.c: 860: else
  2717                           ;main.c: 861: {
  2718                           ;main.c: 862: pwmStop();
  2719  0779  2F86               	ljmp	l4367
  2720  077A                     __end_of_wuhuaCtr:	
  2721  077A                     __ptext4:	
  2722 ;; *************** function _pwmInit *****************
  2723 ;; Defined at:
  2724 ;;		line 744 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0
  2733 ;; Tracked objects:
  2734 ;;		On entry : 300/0
  2735 ;;		On exit  : 300/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2738 ;;      Params:         0       0       0       0
  2739 ;;      Locals:         0       0       0       0
  2740 ;;      Temps:          0       0       0       0
  2741 ;;      Totals:         0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    2
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_wuhuaCtr
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           
  2753                           ;psect for function _pwmInit
  2754  077A                     _pwmInit:	
  2755  077A                     l4357:	
  2756                           ;incstack = 0
  2757                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2758                           
  2759                           
  2760                           ;main.c: 747: PWMTH = 0x00;
  2761  077A  0198               	clrf	24	;volatile
  2762                           
  2763                           ;main.c: 748: PWMTL = 73;
  2764  077B  3049               	movlw	73
  2765  077C  0097               	movwf	23	;volatile
  2766                           
  2767                           ;main.c: 749: PWMD01H = 0x00;
  2768  077D  019E               	clrf	30	;volatile
  2769                           
  2770                           ;main.c: 750: PWMD0L = 32;
  2771  077E  3020               	movlw	32
  2772  077F  0099               	movwf	25	;volatile
  2773                           
  2774                           ;main.c: 751: PWMCON1 = 0x40;
  2775  0780  3040               	movlw	64
  2776  0781  0096               	movwf	22	;volatile
  2777                           
  2778                           ;main.c: 752: PWMCON2 = 0x00;
  2779  0782  019D               	clrf	29	;volatile
  2780                           
  2781                           ;main.c: 753: PWMCON0 |= 0x21;
  2782  0783  3021               	movlw	33
  2783  0784  0495               	iorwf	21,f	;volatile
  2784  0785  0008               	return
  2785  0786                     __end_of_pwmInit:	
  2786  0786                     __ptext3:	
  2787 ;; *************** function _pwmStop *****************
  2788 ;; Defined at:
  2789 ;;		line 756 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		status,2
  2798 ;; Tracked objects:
  2799 ;;		On entry : 300/0
  2800 ;;		On exit  : 300/100
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2803 ;;      Params:         0       0       0       0
  2804 ;;      Locals:         0       0       0       0
  2805 ;;      Temps:          0       0       0       0
  2806 ;;      Totals:         0       0       0       0
  2807 ;;Total ram usage:        0 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    2
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_wuhuaCtr
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _pwmStop
  2819  0786                     _pwmStop:	
  2820  0786                     l4367:	
  2821                           ;incstack = 0
  2822                           ; Regs used in _pwmStop: [status,2]
  2823                           
  2824                           
  2825                           ;main.c: 758: PWMD0L = 0;
  2826  0786  0199               	clrf	25	;volatile
  2827                           
  2828                           ;main.c: 759: PWMCON0 &= 0xFE;
  2829  0787  1015               	bcf	21,0	;volatile
  2830                           
  2831                           ;main.c: 760: PORTA &= 0xDF;
  2832  0788  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0789  1286               	bcf	6,5	;volatile
  2834  078A  0008               	return
  2835  078B                     __end_of_pwmStop:	
  2836  078B                     PL6:	
  2837  078B  00F5               	movwf	??_ADC_Sample+1
  2838  078C  01F6               	clrf	??_ADC_Sample+2
  2839  078D  01F7               	clrf	??_ADC_Sample+3
  2840  078E  0874               	movf	??_ADC_Sample,w
  2841  078F  02CC               	subwf	ADC_Sample@adsum,f	;volatile
  2842  0790  0875               	movf	??_ADC_Sample+1,w
  2843  0791  1C03               	skipc
  2844  0792  0F75               	incfsz	??_ADC_Sample+1,w
  2845  0793  02CD               	subwf	ADC_Sample@adsum+1,f	;volatile
  2846  0794  0876               	movf	??_ADC_Sample+2,w
  2847  0795  1C03               	skipc
  2848  0796  0F76               	incfsz	??_ADC_Sample+2,w
  2849  0797  02CE               	subwf	ADC_Sample@adsum+2,f	;volatile
  2850  0798  0877               	movf	??_ADC_Sample+3,w
  2851  0799  0008               	return
  2852  079A                     __end_ofPL6:	
  2853  079A                     PL18:	
  2854  079A  01CC               	clrf	ADC_Sample@adsum	;volatile
  2855  079B  01CD               	clrf	ADC_Sample@adsum+1	;volatile
  2856  079C  01CE               	clrf	ADC_Sample@adsum+2	;volatile
  2857  079D  01CF               	clrf	ADC_Sample@adsum+3	;volatile
  2858  079E  01D0               	clrf	ADC_Sample@admin	;volatile
  2859  079F  01D1               	clrf	ADC_Sample@admin+1	;volatile
  2860  07A0  01D2               	clrf	ADC_Sample@admax	;volatile
  2861  07A1  01D3               	clrf	ADC_Sample@admax+1	;volatile
  2862  07A2  0008               	return
  2863  07A3                     __end_ofPL18:	
  2864  07A3                     PL26:	
  2865  07A3  085E               	movf	___fttol@f1,w
  2866  07A4  00E2               	movwf	??___fttol
  2867  07A5  085F               	movf	___fttol@f1+1,w
  2868  07A6  00E3               	movwf	??___fttol+1
  2869  07A7  0860               	movf	___fttol@f1+2,w
  2870  07A8  00E4               	movwf	??___fttol+2
  2871  07A9  0008               	return
  2872  07AA                     __end_ofPL26:	
  2873  07AA                     PL32:	
  2874  07AA  01CF               	clrf	?___ftdiv
  2875  07AB  01D0               	clrf	?___ftdiv+1
  2876  07AC  01D1               	clrf	?___ftdiv+2
  2877  07AD  0008               	return
  2878  07AE                     __end_ofPL32:	
  2879  07AE                     PL38:	
  2880  07AE  1003               	clrc
  2881  07AF  0CF5               	rrf	___ftpack@arg+2,f
  2882  07B0  0CF4               	rrf	___ftpack@arg+1,f
  2883  07B1  0CF3               	rrf	___ftpack@arg,f
  2884  07B2  0008               	return
  2885  07B3                     __end_ofPL38:	
  2886  07B3                     PL40:	
  2887  07B3  0855               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2888  07B4  00D3               	movwf	ADC_Sample@admax+1	;volatile
  2889  07B5  0854               	movf	ADC_Sample@ad_temp,w	;volatile
  2890  07B6  00D2               	movwf	ADC_Sample@admax	;volatile
  2891  07B7  0008               	return
  2892  07B8                     __end_ofPL40:	
  2893                           
  2894                           	psect	text16
  2895  0F29                     __ptext16:	
  2896 ;; *************** function _setBatStep *****************
  2897 ;; Defined at:
  2898 ;;		line 555 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  tempSubBatTi    2    3[BANK0 ] unsigned int 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, pclath, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 200/0
  2909 ;;		On exit  : 300/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2912 ;;      Params:         0       0       0       0
  2913 ;;      Locals:         0       2       0       0
  2914 ;;      Temps:          0       0       0       0
  2915 ;;      Totals:         0       2       0       0
  2916 ;;Total ram usage:        2 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    3
  2919 ;; This function calls:
  2920 ;;		___lwdiv
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           
  2927                           ;psect for function _setBatStep
  2928  0F29                     _setBatStep:	
  2929                           
  2930                           ;main.c: 557: if(lowBatLock == 1)
  2931                           
  2932                           ;incstack = 0
  2933                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  2934  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2935  0F2A  0B3C               	decfsz	_lowBatLock,w
  2936  0F2B  2F2F               	goto	l4897
  2937                           
  2938                           ;main.c: 558: {
  2939                           ;main.c: 559: showBatStep = 0;
  2940  0F2C  01B8               	clrf	_showBatStep
  2941                           
  2942                           ;main.c: 560: curBatStep = 0;
  2943  0F2D  01B7               	clrf	_curBatStep
  2944                           
  2945                           ;main.c: 561: }
  2946  0F2E  0008               	return
  2947  0F2F                     l4897:	
  2948                           
  2949                           ;main.c: 562: else if(power_ad < 2800)
  2950  0F2F  300A               	movlw	10
  2951  0F30  0227               	subwf	_power_ad+1,w	;volatile
  2952  0F31  30F0               	movlw	240
  2953  0F32  1903               	skipnz
  2954  0F33  0226               	subwf	_power_ad,w	;volatile
  2955  0F34  1803               	skipnc
  2956  0F35  2F4C               	goto	l4909
  2957                           
  2958                           ;main.c: 563: {
  2959                           ;main.c: 564: if(count10s == 0 && count1s == 0)
  2960  0F36  0841               	movf	_count10s,w
  2961  0F37  1D03               	btfss	3,2
  2962  0F38  2F49               	goto	l1070
  2963  0F39  0845               	movf	_count1s,w
  2964  0F3A  1D03               	btfss	3,2
  2965  0F3B  2F49               	goto	l1070
  2966                           
  2967                           ;main.c: 565: {
  2968                           ;main.c: 566: if(showBatStep > 1)
  2969  0F3C  3002               	movlw	2
  2970  0F3D  0238               	subwf	_showBatStep,w
  2971  0F3E  1C03               	skipc
  2972  0F3F  2F45               	goto	l1071
  2973                           
  2974                           ;main.c: 567: {
  2975                           ;main.c: 568: if(chrgFlag == 0)
  2976  0F40  083F               	movf	_chrgFlag,w
  2977  0F41  1D03               	btfss	3,2
  2978  0F42  2F47               	goto	l1073
  2979                           
  2980                           ;main.c: 569: showBatStep--;
  2981  0F43  03B8               	decf	_showBatStep,f
  2982  0F44  2F47               	goto	l1073
  2983  0F45                     l1071:	
  2984                           
  2985                           ;main.c: 571: else
  2986                           ;main.c: 572: {
  2987                           ;main.c: 573: showBatStep = 1;
  2988  0F45  01B8               	clrf	_showBatStep
  2989  0F46  0AB8               	incf	_showBatStep,f
  2990  0F47                     l1073:	
  2991                           
  2992                           ;main.c: 574: }
  2993                           ;main.c: 575: curBatStep = 1;
  2994  0F47  01B7               	clrf	_curBatStep
  2995  0F48  0AB7               	incf	_curBatStep,f
  2996  0F49                     l1070:	
  2997                           
  2998                           ;main.c: 576: }
  2999                           ;main.c: 577: curBatStep = 1;
  3000  0F49  01B7               	clrf	_curBatStep
  3001  0F4A  0AB7               	incf	_curBatStep,f
  3002                           
  3003                           ;main.c: 578: }
  3004  0F4B  0008               	return
  3005  0F4C                     l4909:	
  3006                           
  3007                           ;main.c: 579: else
  3008                           ;main.c: 580: {
  3009                           ;main.c: 581: if(power_ad < 3600)
  3010  0F4C  300E               	movlw	14
  3011  0F4D  0227               	subwf	_power_ad+1,w	;volatile
  3012  0F4E  3010               	movlw	16
  3013  0F4F  1903               	skipnz
  3014  0F50  0226               	subwf	_power_ad,w	;volatile
  3015  0F51  1803               	skipnc
  3016  0F52  2F62               	goto	l4913
  3017                           
  3018                           ;main.c: 582: {
  3019                           ;main.c: 583: curBatStep = (power_ad - 2800)/80;
  3020  0F53  3050               	movlw	80
  3021  0F54  00F3               	movwf	___lwdiv@divisor
  3022  0F55  01F4               	clrf	___lwdiv@divisor+1
  3023  0F56  0826               	movf	_power_ad,w	;volatile
  3024  0F57  3E10               	addlw	16
  3025  0F58  00F5               	movwf	___lwdiv@dividend
  3026  0F59  0827               	movf	_power_ad+1,w	;volatile
  3027  0F5A  1803               	skipnc
  3028  0F5B  3E01               	addlw	1
  3029  0F5C  3EF5               	addlw	245
  3030  0F5D  00F6               	movwf	___lwdiv@dividend+1
  3031  0F5E  27D6  158A         	fcall	___lwdiv
  3032  0F60  0873               	movf	?___lwdiv,w
  3033  0F61  2F71               	goto	L5
  3034  0F62                     l4913:	
  3035                           ;main.c: 584: }
  3036                           
  3037                           
  3038                           ;main.c: 585: else
  3039                           ;main.c: 586: {
  3040                           ;main.c: 587: curBatStep = 20 + ((power_ad - 3600)/5);
  3041  0F62  3005               	movlw	5
  3042  0F63  00F3               	movwf	___lwdiv@divisor
  3043  0F64  01F4               	clrf	___lwdiv@divisor+1
  3044  0F65  0826               	movf	_power_ad,w	;volatile
  3045  0F66  3EF0               	addlw	240
  3046  0F67  00F5               	movwf	___lwdiv@dividend
  3047  0F68  0827               	movf	_power_ad+1,w	;volatile
  3048  0F69  1803               	skipnc
  3049  0F6A  3E01               	addlw	1
  3050  0F6B  3EF1               	addlw	241
  3051  0F6C  00F6               	movwf	___lwdiv@dividend+1
  3052  0F6D  27D6  158A         	fcall	___lwdiv
  3053  0F6F  0873               	movf	?___lwdiv,w
  3054  0F70  3E14               	addlw	20
  3055  0F71                     L5:	
  3056  0F71  00B7               	movwf	_curBatStep
  3057                           
  3058                           ;main.c: 588: }
  3059                           ;main.c: 589: if(curBatStep > 99)
  3060  0F72  3064               	movlw	100
  3061  0F73  0237               	subwf	_curBatStep,w
  3062  0F74  1C03               	skipc
  3063  0F75  2F78               	goto	l4919
  3064                           
  3065                           ;main.c: 590: {
  3066                           ;main.c: 591: curBatStep = 99;
  3067  0F76  3063               	movlw	99
  3068  0F77  00B7               	movwf	_curBatStep
  3069  0F78                     l4919:	
  3070                           
  3071                           ;main.c: 592: }
  3072                           ;main.c: 594: if(chrgFlag)
  3073  0F78  083F               	movf	_chrgFlag,w
  3074  0F79  1903               	btfsc	3,2
  3075  0F7A  2FAF               	goto	l4945
  3076                           
  3077                           ;main.c: 595: {
  3078                           ;main.c: 596: if(chrgFullFlag && showBatStep < 99)
  3079  0F7B  083E               	movf	_chrgFullFlag,w
  3080  0F7C  1903               	btfsc	3,2
  3081  0F7D  2F92               	goto	l4931
  3082  0F7E  3063               	movlw	99
  3083  0F7F  0238               	subwf	_showBatStep,w
  3084  0F80  1803               	skipnc
  3085  0F81  2F92               	goto	l4931
  3086                           
  3087                           ;main.c: 597: {
  3088                           ;main.c: 598: if(++count15s >= 7500)
  3089  0F82  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0F83  0AB4               	incf	_count15s^(0+128),f
  3091  0F84  1903               	skipnz
  3092  0F85  0AB5               	incf	(_count15s+1)^(0+128),f
  3093  0F86  301D               	movlw	29
  3094  0F87  0235               	subwf	(_count15s+1)^(0+128),w
  3095  0F88  304C               	movlw	76
  3096  0F89  1903               	skipnz
  3097  0F8A  0234               	subwf	_count15s^(0+128),w
  3098  0F8B  1C03               	skipc
  3099  0F8C  2F95               	goto	l4933
  3100                           
  3101                           ;main.c: 599: {
  3102                           ;main.c: 600: count15s = 0;
  3103  0F8D  01B4               	clrf	_count15s^(0+128)
  3104  0F8E  01B5               	clrf	(_count15s+1)^(0+128)
  3105                           
  3106                           ;main.c: 601: showBatStep++;
  3107  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0F90  0AB8               	incf	_showBatStep,f
  3109  0F91  2F95               	goto	l4933
  3110  0F92                     l4931:	
  3111                           
  3112                           ;main.c: 604: else
  3113                           ;main.c: 605: {
  3114                           ;main.c: 606: count15s = 0;
  3115  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  3116  0F93  01B4               	clrf	_count15s^(0+128)
  3117  0F94  01B5               	clrf	(_count15s+1)^(0+128)
  3118  0F95                     l4933:	
  3119                           
  3120                           ;main.c: 607: }
  3121                           ;main.c: 608: if(curBatStep > showBatStep)
  3122  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0F96  0837               	movf	_curBatStep,w
  3124  0F97  0238               	subwf	_showBatStep,w
  3125  0F98  1803               	skipnc
  3126  0F99  2FAC               	goto	l4943
  3127                           
  3128                           ;main.c: 609: {
  3129                           ;main.c: 610: if(++count30s >= 15000 && showBatStep < 99)
  3130  0F9A  0AA8               	incf	_count30s,f
  3131  0F9B  1903               	skipnz
  3132  0F9C  0AA9               	incf	_count30s+1,f
  3133  0F9D  303A               	movlw	58
  3134  0F9E  0229               	subwf	_count30s+1,w
  3135  0F9F  3098               	movlw	152
  3136  0FA0  1903               	skipnz
  3137  0FA1  0228               	subwf	_count30s,w
  3138  0FA2  1C03               	skipc
  3139  0FA3  0008               	return
  3140  0FA4  3063               	movlw	99
  3141  0FA5  0238               	subwf	_showBatStep,w
  3142  0FA6  1803               	skipnc
  3143  0FA7  0008               	return
  3144                           
  3145                           ;main.c: 611: {
  3146                           ;main.c: 612: count30s = 0;
  3147  0FA8  01A8               	clrf	_count30s
  3148  0FA9  01A9               	clrf	_count30s+1
  3149                           
  3150                           ;main.c: 613: showBatStep++;
  3151  0FAA  0AB8               	incf	_showBatStep,f
  3152  0FAB  0008               	return
  3153  0FAC                     l4943:	
  3154                           
  3155                           ;main.c: 617: else
  3156                           ;main.c: 618: {
  3157                           ;main.c: 619: count30s = 0;
  3158  0FAC  01A8               	clrf	_count30s
  3159  0FAD  01A9               	clrf	_count30s+1
  3160  0FAE  0008               	return
  3161  0FAF                     l4945:	
  3162                           
  3163                           ;main.c: 622: else
  3164                           ;main.c: 623: {
  3165                           ;main.c: 624: unsigned int tempSubBatTime = 15000;
  3166  0FAF  3098               	movlw	152
  3167  0FB0  00CC               	movwf	setBatStep@tempSubBatTime
  3168  0FB1  303A               	movlw	58
  3169  0FB2  00CD               	movwf	setBatStep@tempSubBatTime+1
  3170                           
  3171                           ;main.c: 625: if(showBatStep < 40)
  3172  0FB3  3028               	movlw	40
  3173  0FB4  0238               	subwf	_showBatStep,w
  3174  0FB5  1803               	skipnc
  3175  0FB6  2FBB               	goto	l1086
  3176                           
  3177                           ;main.c: 626: {
  3178                           ;main.c: 627: tempSubBatTime = 8000;
  3179  0FB7  3040               	movlw	64
  3180  0FB8  00CC               	movwf	setBatStep@tempSubBatTime
  3181  0FB9  301F               	movlw	31
  3182  0FBA  00CD               	movwf	setBatStep@tempSubBatTime+1
  3183  0FBB                     l1086:	
  3184                           
  3185                           ;main.c: 628: }
  3186                           ;main.c: 629: if(curBatStep < showBatStep && showBatStep > 1)
  3187  0FBB  0838               	movf	_showBatStep,w
  3188  0FBC  0237               	subwf	_curBatStep,w
  3189  0FBD  1803               	skipnc
  3190  0FBE  2FAC               	goto	l4943
  3191  0FBF  3002               	movlw	2
  3192  0FC0  0238               	subwf	_showBatStep,w
  3193  0FC1  1C03               	skipc
  3194  0FC2  2FAC               	goto	l4943
  3195                           
  3196                           ;main.c: 630: {
  3197                           ;main.c: 631: if(++count30s >= tempSubBatTime && showBatStep > 1)
  3198  0FC3  0AA8               	incf	_count30s,f
  3199  0FC4  1903               	skipnz
  3200  0FC5  0AA9               	incf	_count30s+1,f
  3201  0FC6  084D               	movf	setBatStep@tempSubBatTime+1,w
  3202  0FC7  0229               	subwf	_count30s+1,w
  3203  0FC8  1D03               	skipz
  3204  0FC9  2FCC               	goto	u5525
  3205  0FCA  084C               	movf	setBatStep@tempSubBatTime,w
  3206  0FCB  0228               	subwf	_count30s,w
  3207  0FCC                     u5525:	
  3208  0FCC  1C03               	skipc
  3209  0FCD  0008               	return
  3210  0FCE  3002               	movlw	2
  3211  0FCF  0238               	subwf	_showBatStep,w
  3212  0FD0  1C03               	skipc
  3213  0FD1  0008               	return
  3214                           
  3215                           ;main.c: 632: {
  3216                           ;main.c: 633: count30s = 0;
  3217  0FD2  01A8               	clrf	_count30s
  3218  0FD3  01A9               	clrf	_count30s+1
  3219                           
  3220                           ;main.c: 634: showBatStep--;
  3221  0FD4  03B8               	decf	_showBatStep,f
  3222  0FD5  0008               	return
  3223  0FD6                     __end_of_setBatStep:	
  3224  0FD6                     __ptext17:	
  3225 ;; *************** function ___lwdiv *****************
  3226 ;; Defined at:
  3227 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  divisor         2    3[COMMON] unsigned int 
  3230 ;;  dividend        2    5[COMMON] unsigned int 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  quotient        2    1[BANK0 ] unsigned int 
  3233 ;;  counter         1    0[BANK0 ] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  2    3[COMMON] unsigned int 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 300/0
  3240 ;;		On exit  : 300/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3243 ;;      Params:         4       0       0       0
  3244 ;;      Locals:         0       3       0       0
  3245 ;;      Temps:          0       0       0       0
  3246 ;;      Totals:         4       3       0       0
  3247 ;;Total ram usage:        7 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    2
  3250 ;; This function calls:
  3251 ;;		Nothing
  3252 ;; This function is called by:
  3253 ;;		_setBatStep
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function ___lwdiv
  3259  0FD6                     ___lwdiv:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3263  0FD6  01CA               	clrf	___lwdiv@quotient
  3264  0FD7  01CB               	clrf	___lwdiv@quotient+1
  3265  0FD8  0873               	movf	___lwdiv@divisor,w
  3266  0FD9  0474               	iorwf	___lwdiv@divisor+1,w
  3267  0FDA  1903               	btfsc	3,2
  3268  0FDB  2FFB               	goto	l4839
  3269  0FDC  01C9               	clrf	___lwdiv@counter
  3270  0FDD                     L6:	
  3271  0FDD  0AC9               	incf	___lwdiv@counter,f
  3272  0FDE  1BF4               	btfsc	___lwdiv@divisor+1,7
  3273  0FDF  2FE4               	goto	l4827
  3274  0FE0  1003               	clrc
  3275  0FE1  0DF3               	rlf	___lwdiv@divisor,f
  3276  0FE2  0DF4               	rlf	___lwdiv@divisor+1,f
  3277  0FE3  2FDD               	goto	L6
  3278  0FE4                     l4827:	
  3279  0FE4  1003               	clrc
  3280  0FE5  0DCA               	rlf	___lwdiv@quotient,f
  3281  0FE6  0DCB               	rlf	___lwdiv@quotient+1,f
  3282  0FE7  0874               	movf	___lwdiv@divisor+1,w
  3283  0FE8  0276               	subwf	___lwdiv@dividend+1,w
  3284  0FE9  1D03               	skipz
  3285  0FEA  2FED               	goto	u5295
  3286  0FEB  0873               	movf	___lwdiv@divisor,w
  3287  0FEC  0275               	subwf	___lwdiv@dividend,w
  3288  0FED                     u5295:	
  3289  0FED  1C03               	skipc
  3290  0FEE  2FF7               	goto	L7
  3291  0FEF  0873               	movf	___lwdiv@divisor,w
  3292  0FF0  02F5               	subwf	___lwdiv@dividend,f
  3293  0FF1  0874               	movf	___lwdiv@divisor+1,w
  3294  0FF2  1C03               	skipc
  3295  0FF3  03F6               	decf	___lwdiv@dividend+1,f
  3296  0FF4  02F6               	subwf	___lwdiv@dividend+1,f
  3297  0FF5  144A               	bsf	___lwdiv@quotient,0
  3298  0FF6  1003               	clrc
  3299  0FF7                     L7:	
  3300  0FF7  0CF4               	rrf	___lwdiv@divisor+1,f
  3301  0FF8  0CF3               	rrf	___lwdiv@divisor,f
  3302  0FF9  0BC9               	decfsz	___lwdiv@counter,f
  3303  0FFA  2FE4               	goto	l4827
  3304  0FFB                     l4839:	
  3305  0FFB  084B               	movf	___lwdiv@quotient+1,w
  3306  0FFC  00F4               	movwf	?___lwdiv+1
  3307  0FFD  084A               	movf	___lwdiv@quotient,w
  3308  0FFE  00F3               	movwf	?___lwdiv
  3309  0FFF  0008               	return
  3310  1000                     __end_of___lwdiv:	
  3311                           
  3312                           	psect	text18
  3313  0DD9                     __ptext18:	
  3314 ;; *************** function _chrgCtr *****************
  3315 ;; Defined at:
  3316 ;;		line 646 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;		None
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 300/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3330 ;;      Params:         0       0       0       0
  3331 ;;      Locals:         0       0       0       0
  3332 ;;      Temps:          0       0       0       0
  3333 ;;      Totals:         0       0       0       0
  3334 ;;Total ram usage:        0 bytes
  3335 ;; Hardware stack levels used:    1
  3336 ;; Hardware stack levels required when called:    4
  3337 ;; This function calls:
  3338 ;;		_showBatLed
  3339 ;; This function is called by:
  3340 ;;		_main
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function _chrgCtr
  3346  0DD9                     _chrgCtr:	
  3347                           
  3348                           ;main.c: 648: if(PORTB & 0x01)
  3349                           
  3350                           ;incstack = 0
  3351                           ; Regs used in _chrgCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3352  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  3353  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  3354  0DDB  1C06               	btfss	6,0	;volatile
  3355  0DDC  2DF0               	goto	l4103
  3356                           
  3357                           ;main.c: 649: {
  3358                           ;main.c: 650: chrgFlag = 1;
  3359  0DDD  01BF               	clrf	_chrgFlag
  3360  0DDE  0ABF               	incf	_chrgFlag,f
  3361                           
  3362                           ;main.c: 651: firstLock = 0;
  3363  0DDF  01EB               	clrf	_firstLock
  3364                           
  3365                           ;main.c: 652: lowBatLock = 0;
  3366  0DE0  01BC               	clrf	_lowBatLock
  3367                           
  3368                           ;main.c: 653: showBatLed();
  3369  0DE1  260A  158A         	fcall	_showBatLed
  3370                           
  3371                           ;main.c: 654: if(PORTB & 0x02)
  3372  0DE3  1C86               	btfss	6,1	;volatile
  3373  0DE4  2DEE               	goto	l4101
  3374                           
  3375                           ;main.c: 655: {
  3376                           ;main.c: 656: if(++chrgFullTime > 200)
  3377  0DE5  30C9               	movlw	201
  3378  0DE6  0ABD               	incf	_chrgFullTime,f
  3379  0DE7  023D               	subwf	_chrgFullTime,w
  3380  0DE8  1C03               	skipc
  3381  0DE9  0008               	return
  3382                           
  3383                           ;main.c: 657: {
  3384                           ;main.c: 658: chrgFullTime = 0;
  3385  0DEA  01BD               	clrf	_chrgFullTime
  3386                           
  3387                           ;main.c: 659: chrgFullFlag = 1;
  3388  0DEB  01BE               	clrf	_chrgFullFlag
  3389  0DEC  0ABE               	incf	_chrgFullFlag,f
  3390  0DED  0008               	return
  3391  0DEE                     l4101:	
  3392                           
  3393                           ;main.c: 662: else
  3394                           ;main.c: 663: {
  3395                           ;main.c: 664: chrgFullTime = 0;
  3396  0DEE  01BD               	clrf	_chrgFullTime
  3397  0DEF  0008               	return
  3398  0DF0                     l4103:	
  3399                           
  3400                           ;main.c: 668: else
  3401                           ;main.c: 669: {
  3402                           ;main.c: 670: chrgFlag = 0;
  3403  0DF0  01BF               	clrf	_chrgFlag
  3404                           
  3405                           ;main.c: 671: chrgFullTime = 0;
  3406  0DF1  01BD               	clrf	_chrgFullTime
  3407                           
  3408                           ;main.c: 672: chrgFullFlag = 0;
  3409  0DF2  01BE               	clrf	_chrgFullFlag
  3410                           
  3411                           ;main.c: 674: if(firstTime == 0)
  3412  0DF3  086C               	movf	_firstTime,w
  3413  0DF4  1D03               	btfss	3,2
  3414  0DF5  2E00               	goto	l4115
  3415                           
  3416                           ;main.c: 675: {
  3417                           ;main.c: 676: if(workStep == 0 && wuhuaFlag == 0)
  3418  0DF6  0844               	movf	_workStep,w
  3419  0DF7  1D03               	btfss	3,2
  3420  0DF8  2DFF               	goto	l4113
  3421  0DF9  0843               	movf	_wuhuaFlag,w
  3422  0DFA  1D03               	btfss	3,2
  3423  0DFB  2DFF               	goto	l4113
  3424                           
  3425                           ;main.c: 677: {
  3426                           ;main.c: 678: showNumShi = 0;
  3427  0DFC  01EE               	clrf	_showNumShi
  3428                           
  3429                           ;main.c: 679: showNumGe = 0;
  3430  0DFD  01ED               	clrf	_showNumGe
  3431                           
  3432                           ;main.c: 680: }
  3433  0DFE  0008               	return
  3434  0DFF                     l4113:	
  3435                           
  3436                           ;main.c: 681: else
  3437                           ;main.c: 682: {
  3438                           ;main.c: 683: showBatLed();
  3439  0DFF  2E0A               	ljmp	l3429
  3440  0E00                     l4115:	
  3441                           
  3442                           ;main.c: 686: else
  3443                           ;main.c: 687: {
  3444                           ;main.c: 688: if(showBatStep < curBatStep)
  3445  0E00  0837               	movf	_curBatStep,w
  3446  0E01  0238               	subwf	_showBatStep,w
  3447  0E02  1803               	skipnc
  3448  0E03  2E06               	goto	l1102
  3449                           
  3450                           ;main.c: 689: {
  3451                           ;main.c: 690: showBatStep = curBatStep;
  3452  0E04  0837               	movf	_curBatStep,w
  3453  0E05  00B8               	movwf	_showBatStep
  3454  0E06                     l1102:	
  3455                           
  3456                           ;main.c: 691: }
  3457                           ;main.c: 692: showNumShi = 0x7F;
  3458  0E06  307F               	movlw	127
  3459  0E07  00EE               	movwf	_showNumShi
  3460                           
  3461                           ;main.c: 693: showNumGe = 0x7F;
  3462  0E08  00ED               	movwf	_showNumGe
  3463  0E09  0008               	return
  3464  0E0A                     __end_of_chrgCtr:	
  3465  0E0A                     __ptext19:	
  3466 ;; *************** function _showBatLed *****************
  3467 ;; Defined at:
  3468 ;;		line 549 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;		None
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 300/0
  3479 ;;		On exit  : 300/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3482 ;;      Params:         0       0       0       0
  3483 ;;      Locals:         0       0       0       0
  3484 ;;      Temps:          0       0       0       0
  3485 ;;      Totals:         0       0       0       0
  3486 ;;Total ram usage:        0 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    3
  3489 ;; This function calls:
  3490 ;;		___lbdiv
  3491 ;;		___lbmod
  3492 ;; This function is called by:
  3493 ;;		_chrgCtr
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _showBatLed
  3499  0E0A                     _showBatLed:	
  3500  0E0A                     l3429:	
  3501                           ;incstack = 0
  3502                           ; Regs used in _showBatLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3503                           
  3504                           
  3505                           ;main.c: 551: showNumShi = numArray[showBatStep/10];
  3506  0E0A  300A               	movlw	10
  3507  0E0B  00F3               	movwf	___lbdiv@divisor
  3508  0E0C  0838               	movf	_showBatStep,w
  3509  0E0D  261E               	fcall	___lbdiv
  3510  0E0E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3511  0E0F  0084               	movwf	4
  3512  0E10  158A  2028  158A   	fcall	stringdir
  3513  0E13  00EE               	movwf	_showNumShi
  3514                           
  3515                           ;main.c: 552: showNumGe = numArray[showBatStep%10];
  3516  0E14  300A               	movlw	10
  3517  0E15  00F3               	movwf	___lbmod@divisor
  3518  0E16  0838               	movf	_showBatStep,w
  3519  0E17  2639               	fcall	___lbmod
  3520  0E18  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  3521  0E19  0084               	movwf	4
  3522  0E1A  158A  2028         	fcall	stringdir
  3523  0E1C  00ED               	movwf	_showNumGe
  3524  0E1D  0008               	return
  3525  0E1E                     __end_of_showBatLed:	
  3526  0E1E                     __ptext21:	
  3527 ;; *************** function ___lbdiv *****************
  3528 ;; Defined at:
  3529 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;  dividend        1    wreg     unsigned char 
  3532 ;;  divisor         1    3[COMMON] unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  dividend        1    4[COMMON] unsigned char 
  3535 ;;  quotient        1    6[COMMON] unsigned char 
  3536 ;;  counter         1    5[COMMON] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      unsigned char 
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0
  3541 ;; Tracked objects:
  3542 ;;		On entry : 300/0
  3543 ;;		On exit  : 300/0
  3544 ;;		Unchanged: 300/0
  3545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3546 ;;      Params:         1       0       0       0
  3547 ;;      Locals:         3       0       0       0
  3548 ;;      Temps:          0       0       0       0
  3549 ;;      Totals:         4       0       0       0
  3550 ;;Total ram usage:        4 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    2
  3553 ;; This function calls:
  3554 ;;		Nothing
  3555 ;; This function is called by:
  3556 ;;		_showBatLed
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           
  3561                           ;psect for function ___lbdiv
  3562  0E1E                     ___lbdiv:	
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3566                           ;___lbdiv@dividend stored from wreg
  3567  0E1E  00F4               	movwf	___lbdiv@dividend
  3568  0E1F  01F6               	clrf	___lbdiv@quotient
  3569  0E20  0873               	movf	___lbdiv@divisor,w
  3570  0E21  1903               	btfsc	3,2
  3571  0E22  2E37               	goto	l3295
  3572  0E23  01F5               	clrf	___lbdiv@counter
  3573  0E24                     l3281:	
  3574  0E24  0AF5               	incf	___lbdiv@counter,f
  3575  0E25  1BF3               	btfsc	___lbdiv@divisor,7
  3576  0E26  2E2A               	goto	l1669
  3577  0E27  1003               	clrc
  3578  0E28  0DF3               	rlf	___lbdiv@divisor,f
  3579  0E29  2E24               	goto	l3281
  3580  0E2A                     l1669:	
  3581  0E2A  1003               	clrc
  3582  0E2B  0DF6               	rlf	___lbdiv@quotient,f
  3583  0E2C  0873               	movf	___lbdiv@divisor,w
  3584  0E2D  0274               	subwf	___lbdiv@dividend,w
  3585  0E2E  1C03               	skipc
  3586  0E2F  2E34               	goto	L9
  3587  0E30  0873               	movf	___lbdiv@divisor,w
  3588  0E31  02F4               	subwf	___lbdiv@dividend,f
  3589  0E32  1476               	bsf	___lbdiv@quotient,0
  3590  0E33  1003               	clrc
  3591  0E34                     L9:	
  3592  0E34  0CF3               	rrf	___lbdiv@divisor,f
  3593  0E35  0BF5               	decfsz	___lbdiv@counter,f
  3594  0E36  2E2A               	goto	l1669
  3595  0E37                     l3295:	
  3596  0E37  0876               	movf	___lbdiv@quotient,w
  3597  0E38  0008               	return
  3598  0E39                     __end_of___lbdiv:	
  3599  0E39                     __ptext20:	
  3600 ;; *************** function ___lbmod *****************
  3601 ;; Defined at:
  3602 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  dividend        1    wreg     unsigned char 
  3605 ;;  divisor         1    3[COMMON] unsigned char 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  dividend        1    5[COMMON] unsigned char 
  3608 ;;  rem             1    7[COMMON] unsigned char 
  3609 ;;  counter         1    6[COMMON] unsigned char 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      unsigned char 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0
  3614 ;; Tracked objects:
  3615 ;;		On entry : 300/0
  3616 ;;		On exit  : 300/0
  3617 ;;		Unchanged: 300/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3619 ;;      Params:         1       0       0       0
  3620 ;;      Locals:         3       0       0       0
  3621 ;;      Temps:          1       0       0       0
  3622 ;;      Totals:         5       0       0       0
  3623 ;;Total ram usage:        5 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    2
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_showBatLed
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function ___lbmod
  3635  0E39                     ___lbmod:	
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3639                           ;___lbmod@dividend stored from wreg
  3640  0E39  00F5               	movwf	___lbmod@dividend
  3641  0E3A  3008               	movlw	8
  3642  0E3B  00F6               	movwf	___lbmod@counter
  3643  0E3C  01F7               	clrf	___lbmod@rem
  3644  0E3D                     l3303:	
  3645  0E3D  0875               	movf	___lbmod@dividend,w
  3646  0E3E  00F4               	movwf	??___lbmod
  3647  0E3F  3007               	movlw	7
  3648  0E40  1003               	clrc
  3649  0E41                     L8:	
  3650  0E41  0CF4               	rrf	??___lbmod,f
  3651  0E42  3EFF               	addlw	-1
  3652  0E43  1003               	clrc
  3653  0E44  1D03               	skipz
  3654  0E45  2E41               	goto	L8
  3655  0E46  0D77               	rlf	___lbmod@rem,w
  3656  0E47  0474               	iorwf	??___lbmod,w
  3657  0E48  00F7               	movwf	___lbmod@rem
  3658  0E49  1003               	clrc
  3659  0E4A  0DF5               	rlf	___lbmod@dividend,f
  3660  0E4B  0873               	movf	___lbmod@divisor,w
  3661  0E4C  0277               	subwf	___lbmod@rem,w
  3662  0E4D  1C03               	skipc
  3663  0E4E  2E51               	goto	l3311
  3664  0E4F  0873               	movf	___lbmod@divisor,w
  3665  0E50  02F7               	subwf	___lbmod@rem,f
  3666  0E51                     l3311:	
  3667  0E51  0BF6               	decfsz	___lbmod@counter,f
  3668  0E52  2E3D               	goto	l3303
  3669  0E53  0877               	movf	___lbmod@rem,w
  3670  0E54  0008               	return
  3671  0E55                     __end_of___lbmod:	
  3672                           
  3673                           	psect	text25
  3674  0D86                     __ptext25:	
  3675 ;; *************** function _KeyServer *****************
  3676 ;; Defined at:
  3677 ;;		line 131 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, status,0
  3686 ;; Tracked objects:
  3687 ;;		On entry : 300/0
  3688 ;;		On exit  : 300/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3691 ;;      Params:         0       0       0       0
  3692 ;;      Locals:         0       0       0       0
  3693 ;;      Temps:          0       0       0       0
  3694 ;;      Totals:         0       0       0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    2
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           
  3706                           ;psect for function _KeyServer
  3707  0D86                     _KeyServer:	
  3708                           
  3709                           ;main.c: 133: static unsigned char KeyOldFlag = 0;
  3710                           ;main.c: 134: if (KeyFlag[0])
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3714  0D86  082E               	movf	_KeyFlag,w	;volatile
  3715  0D87  1903               	btfsc	3,2
  3716  0D88  2DD7               	goto	l3899
  3717                           
  3718                           ;main.c: 135: {
  3719                           ;main.c: 136: time = 0;
  3720  0D89  1683               	bsf	3,5	;RP0=1, select bank1
  3721  0D8A  01BA               	clrf	_time^(0+128)
  3722  0D8B  01BB               	clrf	(_time+1)^(0+128)
  3723                           
  3724                           ;main.c: 137: if (KeyFlag[0] != KeyOldFlag)
  3725  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  3726  0D8D  082E               	movf	_KeyFlag,w	;volatile
  3727  0D8E  0635               	xorwf	KeyServer@KeyOldFlag,w
  3728  0D8F  1903               	skipnz
  3729  0D90  0008               	return
  3730                           
  3731                           ;main.c: 138: {
  3732                           ;main.c: 140: KeyOldFlag ^= KeyFlag[0];
  3733  0D91  082E               	movf	_KeyFlag,w	;volatile
  3734  0D92  06B5               	xorwf	KeyServer@KeyOldFlag,f
  3735                           
  3736                           ;main.c: 141: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3737  0D93  1835               	btfsc	KeyServer@KeyOldFlag,0
  3738  0D94  1C2E               	btfss	_KeyFlag,0	;volatile
  3739  0D95  2DB8               	goto	l3875
  3740  0D96  086B               	movf	_firstLock,w
  3741  0D97  1D03               	btfss	3,2
  3742  0D98  2DB8               	goto	l3875
  3743                           
  3744                           ;main.c: 142: {
  3745                           ;main.c: 144: if(lowBatLock == 1)
  3746  0D99  0B3C               	decfsz	_lowBatLock,w
  3747  0D9A  2D9F               	goto	l3859
  3748                           
  3749                           ;main.c: 145: {
  3750                           ;main.c: 146: shanshuoTime = 225;
  3751  0D9B  30E1               	movlw	225
  3752  0D9C  00AC               	movwf	_shanshuoTime
  3753  0D9D  01AD               	clrf	_shanshuoTime+1
  3754                           
  3755                           ;main.c: 147: }
  3756  0D9E  2DA4               	goto	l3863
  3757  0D9F                     l3859:	
  3758                           
  3759                           ;main.c: 148: else if(++workStep > 2)
  3760  0D9F  3003               	movlw	3
  3761  0DA0  0AC4               	incf	_workStep,f
  3762  0DA1  0244               	subwf	_workStep,w
  3763  0DA2  1803               	btfsc	3,0
  3764                           
  3765                           ;main.c: 149: {
  3766                           ;main.c: 150: workStep = 0;
  3767  0DA3  01C4               	clrf	_workStep
  3768  0DA4                     l3863:	
  3769                           
  3770                           ;main.c: 151: }
  3771                           ;main.c: 152: if(power_ad < 3200 && workStep == 2)
  3772  0DA4  300C               	movlw	12
  3773  0DA5  0227               	subwf	_power_ad+1,w	;volatile
  3774  0DA6  3080               	movlw	128
  3775  0DA7  1903               	skipnz
  3776  0DA8  0226               	subwf	_power_ad,w	;volatile
  3777  0DA9  3002               	movlw	2
  3778  0DAA  0644               	xorwf	_workStep,w
  3779  0DAB  1803               	skipnc
  3780  0DAC  2DB1               	goto	L13
  3781  0DAD  1903               	btfsc	3,2
  3782                           
  3783                           ;main.c: 153: {
  3784                           ;main.c: 154: workStep = 0;
  3785  0DAE  01C4               	clrf	_workStep
  3786                           
  3787                           ;main.c: 155: }
  3788                           ;main.c: 156: if(workStep == 2)
  3789  0DAF  3002               	movlw	2
  3790  0DB0  0644               	xorwf	_workStep,w
  3791  0DB1                     L13:	
  3792  0DB1  1D03               	btfss	3,2
  3793  0DB2  2DB6               	goto	l3873
  3794                           
  3795                           ;main.c: 157: {
  3796                           ;main.c: 158: shanshuoTime = 225;
  3797  0DB3  30E1               	movlw	225
  3798  0DB4  00AC               	movwf	_shanshuoTime
  3799  0DB5  2DB7               	goto	L12
  3800  0DB6                     l3873:	
  3801                           ;main.c: 159: }
  3802                           
  3803                           
  3804                           ;main.c: 160: else
  3805                           ;main.c: 161: {
  3806                           ;main.c: 162: shanshuoTime = 0;
  3807  0DB6  01AC               	clrf	_shanshuoTime
  3808  0DB7                     L12:	
  3809  0DB7  01AD               	clrf	_shanshuoTime+1
  3810  0DB8                     l3875:	
  3811                           
  3812                           ;main.c: 163: }
  3813                           ;main.c: 164: }
  3814                           ;main.c: 165: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3815  0DB8  18B5               	btfsc	KeyServer@KeyOldFlag,1
  3816  0DB9  1CAE               	btfss	_KeyFlag,1	;volatile
  3817  0DBA  2DD4               	goto	l3897
  3818  0DBB  086B               	movf	_firstLock,w
  3819  0DBC  1D03               	btfss	3,2
  3820  0DBD  2DD4               	goto	l3897
  3821                           
  3822                           ;main.c: 166: {
  3823                           ;main.c: 168: if(lowBatLock == 1)
  3824  0DBE  0B3C               	decfsz	_lowBatLock,w
  3825  0DBF  2DC4               	goto	l3885
  3826                           
  3827                           ;main.c: 169: {
  3828                           ;main.c: 170: shanshuoTime2 = 225;
  3829  0DC0  30E1               	movlw	225
  3830  0DC1  00AA               	movwf	_shanshuoTime2
  3831  0DC2  01AB               	clrf	_shanshuoTime2+1
  3832                           
  3833                           ;main.c: 171: }
  3834  0DC3  2DC9               	goto	l3889
  3835  0DC4                     l3885:	
  3836                           
  3837                           ;main.c: 172: else if(++wuhuaFlag > 2)
  3838  0DC4  3003               	movlw	3
  3839  0DC5  0AC3               	incf	_wuhuaFlag,f
  3840  0DC6  0243               	subwf	_wuhuaFlag,w
  3841  0DC7  1803               	btfsc	3,0
  3842                           
  3843                           ;main.c: 173: {
  3844                           ;main.c: 174: wuhuaFlag = 0;
  3845  0DC8  01C3               	clrf	_wuhuaFlag
  3846  0DC9                     l3889:	
  3847                           
  3848                           ;main.c: 175: }
  3849                           ;main.c: 176: if(wuhuaFlag == 2)
  3850  0DC9  3002               	movlw	2
  3851  0DCA  0643               	xorwf	_wuhuaFlag,w
  3852  0DCB  1D03               	btfss	3,2
  3853  0DCC  2DD2               	goto	l3895
  3854                           
  3855                           ;main.c: 177: {
  3856                           ;main.c: 178: shanshuoTime2 = 225;
  3857  0DCD  30E1               	movlw	225
  3858  0DCE  00AA               	movwf	_shanshuoTime2
  3859  0DCF  01AB               	clrf	_shanshuoTime2+1
  3860                           
  3861                           ;main.c: 179: count10s = 0;
  3862  0DD0  01C1               	clrf	_count10s
  3863                           
  3864                           ;main.c: 180: }
  3865  0DD1  2DD4               	goto	l3897
  3866  0DD2                     l3895:	
  3867                           
  3868                           ;main.c: 181: else
  3869                           ;main.c: 182: {
  3870                           ;main.c: 183: shanshuoTime2 = 0;
  3871  0DD2  01AA               	clrf	_shanshuoTime2
  3872  0DD3  01AB               	clrf	_shanshuoTime2+1
  3873  0DD4                     l3897:	
  3874                           
  3875                           ;main.c: 184: }
  3876                           ;main.c: 185: }
  3877                           ;main.c: 188: KeyOldFlag = KeyFlag[0];
  3878  0DD4  082E               	movf	_KeyFlag,w	;volatile
  3879  0DD5  00B5               	movwf	KeyServer@KeyOldFlag
  3880  0DD6  0008               	return
  3881  0DD7                     l3899:	
  3882                           
  3883                           ;main.c: 191: else
  3884                           ;main.c: 192: {
  3885                           ;main.c: 193: KeyOldFlag = 0;
  3886  0DD7  01B5               	clrf	KeyServer@KeyOldFlag
  3887  0DD8  0008               	return
  3888  0DD9                     __end_of_KeyServer:	
  3889                           
  3890                           	psect	text26
  3891  0024                     __ptext26:	
  3892 ;; *************** function _Init_System *****************
  3893 ;; Defined at:
  3894 ;;		line 80 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2
  3903 ;; Tracked objects:
  3904 ;;		On entry : B00/0
  3905 ;;		On exit  : 300/100
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3908 ;;      Params:         0       0       0       0
  3909 ;;      Locals:         0       0       0       0
  3910 ;;      Temps:          0       0       0       0
  3911 ;;      Totals:         0       0       0       0
  3912 ;;Total ram usage:        0 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    2
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_main
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function _Init_System
  3924  0024                     _Init_System:	
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Init_System: [wreg+status,2]
  3928  0024  0000               	nop	;# 
  3929  0025  0064               	clrwdt	;# 
  3930                           
  3931                           ;main.c: 84: INTCON = 0;
  3932  0026  018B               	clrf	11	;volatile
  3933                           
  3934                           ;main.c: 85: OSCCON = 0X72;
  3935  0027  3072               	movlw	114
  3936  0028  1283               	bcf	3,5	;RP0=0, select bank0
  3937  0029  1303               	bcf	3,6	;RP1=0, select bank0
  3938  002A  0094               	movwf	20	;volatile
  3939                           
  3940                           ;main.c: 86: OPTION_REG = 0;
  3941  002B  0181               	clrf	1	;volatile
  3942                           
  3943                           ;main.c: 91: TRISA = 0x00;
  3944  002C  1683               	bsf	3,5	;RP0=1, select bank1
  3945  002D  0185               	clrf	5	;volatile
  3946                           
  3947                           ;main.c: 92: PORTA = 0;
  3948  002E  0186               	clrf	6	;volatile
  3949                           
  3950                           ;main.c: 93: TRISB = 0x23;
  3951  002F  3023               	movlw	35
  3952  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0031  0085               	movwf	5	;volatile
  3954                           
  3955                           ;main.c: 94: PORTB = 0;
  3956  0032  0186               	clrf	6	;volatile
  3957                           
  3958                           ;main.c: 95: WPUB = 0x02;
  3959  0033  3002               	movlw	2
  3960  0034  0088               	movwf	8	;volatile
  3961                           
  3962                           ;main.c: 96: TRISC = 0;
  3963  0035  1703               	bsf	3,6	;RP1=1, select bank2
  3964  0036  0185               	clrf	5	;volatile
  3965                           
  3966                           ;main.c: 97: PORTC = 0;
  3967  0037  0186               	clrf	6	;volatile
  3968                           
  3969                           ;main.c: 99: PIE1 = 2;
  3970  0038  1303               	bcf	3,6	;RP1=0, select bank0
  3971  0039  008E               	movwf	14	;volatile
  3972                           
  3973                           ;main.c: 100: PR2 = 250;
  3974  003A  30FA               	movlw	250
  3975  003B  0091               	movwf	17	;volatile
  3976                           
  3977                           ;main.c: 101: T2CON = 4;
  3978  003C  3004               	movlw	4
  3979  003D  0093               	movwf	19	;volatile
  3980                           
  3981                           ;main.c: 103: INTCON = 0XC0;
  3982  003E  30C0               	movlw	192
  3983  003F  008B               	movwf	11	;volatile
  3984                           
  3985                           ;main.c: 104: ADCON0 = 0X41;
  3986                           
  3987                           ;main.c: 105: ADON = 1;
  3988                           
  3989                           ;main.c: 106: ADCON1 = 0x00;
  3990  0040  2BED               	ljmp	PL24	;call to abstracted procedure
  3991  0041                     __end_of_Init_System:	
  3992  0041                     __ptext22:	
  3993 ;; *************** function _WorkSleep *****************
  3994 ;; Defined at:
  3995 ;;		line 227 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;		None
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 300/0
  4006 ;;		On exit  : 300/100
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4009 ;;      Params:         0       0       0       0
  4010 ;;      Locals:         0       0       0       0
  4011 ;;      Temps:          0       0       0       0
  4012 ;;      Totals:         0       0       0       0
  4013 ;;Total ram usage:        0 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    5
  4016 ;; This function calls:
  4017 ;;		_Refurbish_Sfr
  4018 ;;		_SystemEnterSleep
  4019 ;; This function is called by:
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _WorkSleep
  4026  0041                     _WorkSleep:	
  4027                           
  4028                           ;main.c: 232: if(B_OnOff)time = 0;
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4032  0041  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  4033  0042  2846               	goto	l4851
  4034  0043  1683               	bsf	3,5	;RP0=1, select bank1
  4035  0044  01BA               	clrf	_time^(0+128)
  4036  0045  01BB               	clrf	(_time+1)^(0+128)
  4037  0046                     l4851:	
  4038                           
  4039                           ;main.c: 234: if(++time >= 1000)
  4040  0046  1683               	bsf	3,5	;RP0=1, select bank1
  4041  0047  0ABA               	incf	_time^(0+128),f
  4042  0048  1903               	skipnz
  4043  0049  0ABB               	incf	(_time+1)^(0+128),f
  4044  004A  3003               	movlw	3
  4045  004B  023B               	subwf	(_time+1)^(0+128),w
  4046  004C  30E8               	movlw	232
  4047  004D  1903               	skipnz
  4048  004E  023A               	subwf	_time^(0+128),w
  4049  004F  1C03               	skipc
  4050  0050  0008               	return
  4051                           
  4052                           ;main.c: 235: {
  4053                           ;main.c: 236: time = 0;
  4054  0051  01BA               	clrf	_time^(0+128)
  4055  0052  01BB               	clrf	(_time+1)^(0+128)
  4056                           
  4057                           ;main.c: 237: INTCON = 0;
  4058  0053  018B               	clrf	11	;volatile
  4059                           
  4060                           ;main.c: 238: PIE1 = 0;
  4061  0054  1283               	bcf	3,5	;RP0=0, select bank0
  4062  0055  018E               	clrf	14	;volatile
  4063                           
  4064                           ;main.c: 239: PIE2 = 0;
  4065  0056  1703               	bsf	3,6	;RP1=1, select bank2
  4066  0057  0190               	clrf	16	;volatile
  4067                           
  4068                           ;main.c: 240: PIR1 = 0;
  4069  0058  1303               	bcf	3,6	;RP1=0, select bank0
  4070  0059  018D               	clrf	13	;volatile
  4071                           
  4072                           ;main.c: 241: PIR2 = 0;
  4073  005A  1703               	bsf	3,6	;RP1=1, select bank2
  4074  005B  018F               	clrf	15	;volatile
  4075                           
  4076                           ;main.c: 242: T2CON = 0;
  4077  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4078  005D  0193               	clrf	19	;volatile
  4079                           
  4080                           ;main.c: 243: ADCON1 = 0;
  4081  005E  1683               	bsf	3,5	;RP0=1, select bank1
  4082  005F  0196               	clrf	22	;volatile
  4083                           
  4084                           ;main.c: 246: ADCON0 = 0;
  4085  0060  0195               	clrf	21	;volatile
  4086                           
  4087                           ;main.c: 249: TRISA &= 0xE4;
  4088  0061  30E4               	movlw	228
  4089  0062  0585               	andwf	5,f	;volatile
  4090                           
  4091                           ;main.c: 250: TRISB &= 0xEF;
  4092  0063  1283               	bcf	3,5	;RP0=0, select bank0
  4093  0064  1205               	bcf	5,4	;volatile
  4094                           
  4095                           ;main.c: 251: PORTA = 0x00;
  4096  0065  1683               	bsf	3,5	;RP0=1, select bank1
  4097  0066  0186               	clrf	6	;volatile
  4098                           
  4099                           ;main.c: 252: PORTB = 0x00;
  4100  0067  1283               	bcf	3,5	;RP0=0, select bank0
  4101  0068  0186               	clrf	6	;volatile
  4102                           
  4103                           ;main.c: 253: TRISC = 0;
  4104  0069  1703               	bsf	3,6	;RP1=1, select bank2
  4105  006A  0185               	clrf	5	;volatile
  4106                           
  4107                           ;main.c: 254: PORTC = 0;
  4108  006B  0186               	clrf	6	;volatile
  4109                           
  4110                           ;main.c: 256: TRISB0 =1;
  4111  006C  1303               	bcf	3,6	;RP1=0, select bank0
  4112  006D  1405               	bsf	5,0	;volatile
  4113                           
  4114                           ;main.c: 258: RBIF = 0;
  4115  006E  100B               	bcf	11,0	;volatile
  4116                           
  4117                           ;main.c: 259: RBIE = 1;
  4118  006F  158B               	bsf	11,3	;volatile
  4119                           
  4120                           ;main.c: 260: IOCB0= 1;
  4121  0070  1409               	bsf	9,0	;volatile
  4122                           
  4123                           ;main.c: 261: PORTB;
  4124  0071  0806               	movf	6,w	;volatile
  4125                           
  4126                           ;main.c: 273: SystemEnterSleep();
  4127  0072  20A9  118A         	fcall	_SystemEnterSleep
  4128                           
  4129                           ;main.c: 274: if(RAIF)
  4130  0074  1D8D               	btfss	13,3	;volatile
  4131  0075  2879               	goto	l4885
  4132                           
  4133                           ;main.c: 275: {
  4134                           ;main.c: 276: RAIF = 0;
  4135  0076  118D               	bcf	13,3	;volatile
  4136                           
  4137                           ;main.c: 277: PORTA;
  4138  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4139  0078  0806               	movf	6,w	;volatile
  4140  0079                     l4885:	
  4141                           
  4142                           ;main.c: 278: }
  4143                           ;main.c: 280: Refurbish_Sfr();
  4144  0079  2403  118A         	fcall	_Refurbish_Sfr
  4145                           
  4146                           ;main.c: 281: ADCON0 = 0X41;
  4147                           
  4148                           ;main.c: 282: ADON = 1;
  4149                           
  4150                           ;main.c: 283: ADCON1 = 0x00;
  4151  007B  2BED               	ljmp	PL24	;call to abstracted procedure
  4152  007C                     __end_of_WorkSleep:	
  4153  007C                     __ptext27:	
  4154 ;; *************** function _CheckTouchKey *****************
  4155 ;; Defined at:
  4156 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;		None
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;		None
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4170 ;;      Params:         0       0       0       0
  4171 ;;      Locals:         0       0       0       0
  4172 ;;      Temps:          0       0       0       0
  4173 ;;      Totals:         0       0       0       0
  4174 ;;Total ram usage:        0 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    5
  4177 ;; This function calls:
  4178 ;;		_CheckKeyOldValue
  4179 ;;		_CheckOnceResult
  4180 ;;		_CheckValidTime
  4181 ;;		_ClearResSum
  4182 ;;		_GetTouchKeyValue
  4183 ;;		_KeyStopClear
  4184 ;;		_TurnKeyFlags
  4185 ;; This function is called by:
  4186 ;;		_main
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _CheckTouchKey
  4192  007C                     _CheckTouchKey:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4196  007C  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4197  007D  288A               	goto	l1376
  4198  007E  2139  118A         	fcall	_GetTouchKeyValue
  4199  0080  3008               	movlw	8
  4200  0081  1283               	bcf	3,5	;RP0=0, select bank0
  4201  0082  1303               	bcf	3,6	;RP1=0, select bank0
  4202  0083  0AB4               	incf	_KeyCounter,f
  4203  0084  0234               	subwf	_KeyCounter,w
  4204  0085  1C03               	skipc
  4205  0086  28A8               	goto	l5027
  4206  0087  01B4               	clrf	_KeyCounter
  4207  0088  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4208  0089  28A8               	goto	l5027
  4209  008A                     l1376:	
  4210  008A  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4211  008B  28A2               	goto	l5021
  4212  008C  21B0  118A         	fcall	_CheckOnceResult
  4213  008E  2342  118A         	fcall	_TurnKeyFlags
  4214  0090  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4215  0091  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4216  0092  2899               	goto	l5011
  4217  0093  3003               	movlw	3
  4218  0094  1283               	bcf	3,5	;RP0=0, select bank0
  4219  0095  1303               	bcf	3,6	;RP1=0, select bank0
  4220  0096  0234               	subwf	_KeyCounter,w
  4221  0097  1C03               	skipc
  4222  0098  289E               	goto	l5019
  4223  0099                     l5011:	
  4224  0099  232C  118A         	fcall	_KeyStopClear
  4225  009B  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4226  009C  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4227  009D  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4228  009E                     l5019:	
  4229  009E  1283               	bcf	3,5	;RP0=0, select bank0
  4230  009F  1303               	bcf	3,6	;RP1=0, select bank0
  4231  00A0  01B4               	clrf	_KeyCounter
  4232  00A1  28A8               	goto	l5027
  4233  00A2                     l5021:	
  4234  00A2  22C8  118A         	fcall	_CheckKeyOldValue
  4235  00A4  21A1  118A         	fcall	_ClearResSum
  4236  00A6  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4237  00A7  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4238  00A8                     l5027:	
  4239  00A8  2B75               	ljmp	l3691	;# 
  4240  00A9                     __end_of_CheckTouchKey:	
  4241  00A9                     __ptext23:	
  4242 ;; *************** function _SystemEnterSleep *****************
  4243 ;; Defined at:
  4244 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  92              2    9[BANK0 ] unsigned int 
  4249 ;;  93              2    7[BANK0 ] unsigned int 
  4250 ;;  94              2    5[BANK0 ] unsigned int 
  4251 ;;  91              1   11[BANK0 ] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 300/0
  4258 ;;		On exit  : 300/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4261 ;;      Params:         0       0       0       0
  4262 ;;      Locals:         0       7       0       0
  4263 ;;      Temps:          2       0       0       0
  4264 ;;      Totals:         2       7       0       0
  4265 ;;Total ram usage:        9 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    4
  4268 ;; This function calls:
  4269 ;;		_ClearResSum
  4270 ;;		_GetTouchKeyValue
  4271 ;;		_KeyClearOne
  4272 ;; This function is called by:
  4273 ;;		_WorkSleep
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           
  4278                           ;psect for function _SystemEnterSleep
  4279  00A9                     _SystemEnterSleep:	
  4280  00A9                     l1388:	
  4281                           ;incstack = 0
  4282                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4283                           
  4284  00A9  0064               	clrwdt	;# 
  4285  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  4286  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  4287  00AC  0181               	clrf	1	;volatile
  4288  00AD  3007               	movlw	7
  4289  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4290  00AF  0481               	iorwf	1,f	;volatile
  4291  00B0  1581               	bsf	1,3	;volatile
  4292  00B1  0064               	clrwdt	;# 
  4293  00B2  300A               	movlw	10
  4294  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  4295  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  4296  00B5  0081               	movwf	1	;volatile
  4297  00B6  0064               	clrwdt	;# 
  4298  00B7  1283               	bcf	3,5	;RP0=0, select bank2
  4299  00B8  1703               	bsf	3,6	;RP1=1, select bank2
  4300  00B9  0191               	clrf	17	;volatile
  4301  00BA  0193               	clrf	19	;volatile
  4302  00BB  3002               	movlw	2
  4303  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4304  00BD  0094               	movwf	20	;volatile
  4305  00BE  0063               	sleep	;# 
  4306  00BF  0000               	nop	;# 
  4307  00C0  0064               	clrwdt	;# 
  4308  00C1  3072               	movlw	114
  4309  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  4310  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  4311  00C4  0094               	movwf	20	;volatile
  4312  00C5  3079               	movlw	121
  4313  00C6  1703               	bsf	3,6	;RP1=1, select bank2
  4314  00C7  0093               	movwf	19	;volatile
  4315  00C8  21A1  118A         	fcall	_ClearResSum
  4316  00CA  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4317  00CB  2139  118A         	fcall	_GetTouchKeyValue
  4318  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  4319  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  4320  00CF  23F9  118A         	fcall	PL34	;call to abstracted procedure
  4321  00D1  1C0B               	btfss	11,0	;volatile
  4322  00D2  188B               	btfsc	11,1	;volatile
  4323  00D3  28D6               	goto	l4523
  4324  00D4  1D8D               	btfss	13,3	;volatile
  4325  00D5  28DD               	goto	l4535
  4326  00D6                     l4523:	
  4327  00D6  21A1               	fcall	_ClearResSum
  4328  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  4329  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  4330  00D9  01B4               	clrf	_KeyCounter
  4331  00DA  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  4332  00DB  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  4333  00DC  0008               	return
  4334  00DD                     l4535:	
  4335  00DD  0852               	movf	SystemEnterSleep@92,w
  4336  00DE  3903               	andlw	3
  4337  00DF  1003               	clrc
  4338  00E0  1903               	btfsc	3,2
  4339  00E1  2933               	goto	L11
  4340  00E2  0D54               	rlf	SystemEnterSleep@91,w
  4341  00E3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4342  00E4  0084               	movwf	4
  4343  00E5  1383               	bcf	3,7	;select IRP bank1
  4344  00E6  0800               	movf	0,w
  4345  00E7  00D0               	movwf	SystemEnterSleep@93
  4346  00E8  0A84               	incf	4,f
  4347  00E9  0800               	movf	0,w
  4348  00EA  00D1               	movwf	SystemEnterSleep@93+1
  4349  00EB  00CF               	movwf	SystemEnterSleep@94+1
  4350  00EC  0850               	movf	SystemEnterSleep@93,w
  4351  00ED  00CE               	movwf	SystemEnterSleep@94
  4352  00EE  0850               	movf	SystemEnterSleep@93,w
  4353  00EF  0451               	iorwf	SystemEnterSleep@93+1,w
  4354  00F0  1903               	btfsc	3,2
  4355  00F1  2932               	goto	l4569
  4356  00F2  0854               	movf	SystemEnterSleep@91,w
  4357  00F3  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4358  00F4  0084               	movwf	4
  4359  00F5  158A  2028  118A   	fcall	stringdir
  4360  00F8  07CE               	addwf	SystemEnterSleep@94,f
  4361  00F9  1803               	skipnc
  4362  00FA  0ACF               	incf	SystemEnterSleep@94+1,f
  4363  00FB  1003               	clrc
  4364  00FC  0D54               	rlf	SystemEnterSleep@91,w
  4365  00FD  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4366  00FE  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4367  0100  084F               	movf	SystemEnterSleep@94+1,w
  4368  0101  0275               	subwf	??_SystemEnterSleep+1,w
  4369  0102  1D03               	skipz
  4370  0103  2906               	goto	u4775
  4371  0104  084E               	movf	SystemEnterSleep@94,w
  4372  0105  0274               	subwf	??_SystemEnterSleep,w
  4373  0106                     u4775:	
  4374  0106  1C03               	skipc
  4375  0107  291A               	goto	L10
  4376  0108  23F9  118A         	fcall	PL34	;call to abstracted procedure
  4377  010A                     l4549:	
  4378  010A  0852               	movf	SystemEnterSleep@92,w
  4379  010B  3903               	andlw	3
  4380  010C  1D03               	btfss	3,2
  4381  010D  2911               	goto	l4553
  4382  010E  0854               	movf	SystemEnterSleep@91,w
  4383  010F  22A5  118A         	fcall	_KeyClearOne
  4384  0111                     l4553:	
  4385  0111  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0112  3002               	movlw	2
  4387  0113  1303               	bcf	3,6	;RP1=0, select bank0
  4388  0114  1003               	clrc
  4389  0115  23FE  118A         	fcall	PL36	;call to abstracted procedure
  4390  0117  1803               	btfsc	3,0
  4391  0118  28D6               	goto	l4523
  4392  0119  290A               	goto	l4549
  4393  011A                     L10:	
  4394  011A  0D54               	rlf	SystemEnterSleep@91,w
  4395  011B  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4396  011C  23D8  118A         	fcall	PL16	;call to abstracted procedure
  4397  011E  1003               	clrc
  4398  011F  0D54               	rlf	SystemEnterSleep@91,w
  4399  0120  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4400  0121  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4401  0123  0800               	movf	0,w
  4402  0124  00F4               	movwf	??_SystemEnterSleep
  4403  0125  0A84               	incf	4,f
  4404  0126  0800               	movf	0,w
  4405  0127  00F5               	movwf	??_SystemEnterSleep+1
  4406  0128  1003               	clrc
  4407  0129  0D54               	rlf	SystemEnterSleep@91,w
  4408  012A  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4409  012B  23C2  118A         	fcall	PL10	;call to abstracted procedure
  4410  012D  0850               	movf	SystemEnterSleep@93,w
  4411  012E  0080               	movwf	0
  4412  012F  0A84               	incf	4,f
  4413  0130  0851               	movf	SystemEnterSleep@93+1,w
  4414  0131  0080               	movwf	0
  4415  0132                     l4569:	
  4416  0132  1003               	clrc
  4417  0133                     L11:	
  4418  0133  3002               	movlw	2
  4419  0134  23FE  118A         	fcall	PL36	;call to abstracted procedure
  4420  0136  1803               	btfsc	3,0
  4421  0137  28A9               	goto	l1388
  4422  0138  28DD               	goto	l4535
  4423  0139                     __end_of_SystemEnterSleep:	
  4424  0139                     __ptext31:	
  4425 ;; *************** function _GetTouchKeyValue *****************
  4426 ;; Defined at:
  4427 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  63              2    2[BANK0 ] unsigned int 
  4432 ;;  64              2    0[BANK0 ] unsigned int 
  4433 ;;  62              1    4[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/200
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4443 ;;      Params:         0       0       0       0
  4444 ;;      Locals:         0       5       0       0
  4445 ;;      Temps:          0       0       0       0
  4446 ;;      Totals:         0       5       0       0
  4447 ;;Total ram usage:        5 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    3
  4450 ;; This function calls:
  4451 ;;		_ClearResSum
  4452 ;; This function is called by:
  4453 ;;		_CheckTouchKey
  4454 ;;		_SystemEnterSleep
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           
  4459                           ;psect for function _GetTouchKeyValue
  4460  0139                     _GetTouchKeyValue:	
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4464  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4465  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4466  013B  01CD               	clrf	GetTouchKeyValue@62
  4467  013C  01CB               	clrf	GetTouchKeyValue@63
  4468  013D  0ACB               	incf	GetTouchKeyValue@63,f
  4469  013E  01CC               	clrf	GetTouchKeyValue@63+1
  4470  013F                     l4395:	
  4471  013F  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  4472  0140  2945               	goto	l4399
  4473  0141  084B               	movf	GetTouchKeyValue@63,w
  4474  0142  3903               	andlw	3
  4475  0143  1903               	btfsc	3,2
  4476  0144  2996               	goto	l4427
  4477  0145                     l4399:	
  4478  0145  1703               	bsf	3,6	;RP1=1, select bank2
  4479  0146  0191               	clrf	17	;volatile
  4480  0147  0192               	clrf	18	;volatile
  4481  0148  3079               	movlw	121
  4482  0149  0093               	movwf	19	;volatile
  4483  014A  1303               	bcf	3,6	;RP1=0, select bank0
  4484  014B  1305               	bcf	5,6	;volatile
  4485  014C  1306               	bcf	6,6	;volatile
  4486  014D  0000               	nop	;# 
  4487  014E  0000               	nop	;# 
  4488  014F  0000               	nop	;# 
  4489  0150  0000               	nop	;# 
  4490  0151  0000               	nop	;# 
  4491  0152  0000               	nop	;# 
  4492  0153  0000               	nop	;# 
  4493  0154  0000               	nop	;# 
  4494  0155  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0156  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0157  1705               	bsf	5,6	;volatile
  4497  0158  084D               	movf	GetTouchKeyValue@62,w
  4498  0159  3E18               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  4499  015A  0084               	movwf	4
  4500  015B  158A  2028  118A   	fcall	stringdir
  4501  015E  1703               	bsf	3,6	;RP1=1, select bank2
  4502  015F  0091               	movwf	17	;volatile
  4503  0160  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0161  084D               	movf	GetTouchKeyValue@62,w
  4505  0162  3E1A               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  4506  0163  0084               	movwf	4
  4507  0164  158A  2028  118A   	fcall	stringdir
  4508  0167  1703               	bsf	3,6	;RP1=1, select bank2
  4509  0168  0092               	movwf	18	;volatile
  4510  0169  0000               	nop	;# 
  4511  016A  0000               	nop	;# 
  4512  016B  0000               	nop	;# 
  4513  016C  0000               	nop	;# 
  4514  016D  1283               	bcf	3,5	;RP0=0, select bank2
  4515  016E  1703               	bsf	3,6	;RP1=1, select bank2
  4516  016F  1411               	bsf	17,0	;volatile
  4517  0170  30D0               	movlw	208
  4518  0171  1303               	bcf	3,6	;RP1=0, select bank0
  4519  0172  00C9               	movwf	GetTouchKeyValue@64
  4520  0173  3007               	movlw	7
  4521  0174  00CA               	movwf	GetTouchKeyValue@64+1
  4522  0175                     l1298:	
  4523  0175  1703               	bsf	3,6	;RP1=1, select bank2
  4524  0176  1B91               	btfsc	17,7	;volatile
  4525  0177  2984               	goto	l4425
  4526  0178  3001               	movlw	1
  4527  0179  1303               	bcf	3,6	;RP1=0, select bank0
  4528  017A  02C9               	subwf	GetTouchKeyValue@64,f
  4529  017B  1C03               	skipc
  4530  017C  03CA               	decf	GetTouchKeyValue@64+1,f
  4531  017D  0849               	movf	GetTouchKeyValue@64,w
  4532  017E  044A               	iorwf	GetTouchKeyValue@64+1,w
  4533  017F  1D03               	btfss	3,2
  4534  0180  2975               	goto	l1298
  4535  0181  30FF               	movlw	255
  4536  0182  00B4               	movwf	_KeyCounter
  4537  0183  29A1               	ljmp	l4279
  4538  0184                     l4425:	
  4539  0184  1303               	bcf	3,6	;RP1=0, select bank0
  4540  0185  1003               	clrc
  4541  0186  0D4D               	rlf	GetTouchKeyValue@62,w
  4542  0187  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4543  0188  0084               	movwf	4
  4544  0189  1703               	bsf	3,6	;RP1=1, select bank2
  4545  018A  0816               	movf	22,w	;volatile
  4546  018B  1383               	bcf	3,7	;select IRP bank1
  4547  018C  0780               	addwf	0,f
  4548  018D  0F84               	incfsz	4,f
  4549  018E  0800               	movf	0,w
  4550  018F  1803               	skipnc
  4551  0190  0A00               	incf	0,w
  4552  0191  00FF               	movwf	127
  4553  0192  0817               	movf	23,w	;volatile
  4554  0193  077F               	addwf	127,w
  4555  0194  0080               	movwf	0
  4556  0195  0384               	decf	4,f
  4557  0196                     l4427:	
  4558  0196  3002               	movlw	2
  4559  0197  1303               	bcf	3,6	;RP1=0, select bank0
  4560  0198  1003               	clrc
  4561  0199  0DCB               	rlf	GetTouchKeyValue@63,f
  4562  019A  0DCC               	rlf	GetTouchKeyValue@63+1,f
  4563  019B  0ACD               	incf	GetTouchKeyValue@62,f
  4564  019C  024D               	subwf	GetTouchKeyValue@62,w
  4565  019D  1C03               	skipc
  4566  019E  293F               	goto	l4395
  4567  019F  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  4568  01A0  0008               	return
  4569  01A1                     __end_of_GetTouchKeyValue:	
  4570  01A1                     __ptext32:	
  4571 ;; *************** function _ClearResSum *****************
  4572 ;; Defined at:
  4573 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;		None
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  56              1    3[COMMON] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  1    wreg      void 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/200
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4587 ;;      Params:         0       0       0       0
  4588 ;;      Locals:         1       0       0       0
  4589 ;;      Temps:          0       0       0       0
  4590 ;;      Totals:         1       0       0       0
  4591 ;;Total ram usage:        1 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    2
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_GetTouchKeyValue
  4598 ;;		_CheckTouchKey
  4599 ;;		_SystemEnterSleep
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _ClearResSum
  4605  01A1                     _ClearResSum:	
  4606  01A1                     l4279:	
  4607                           ;incstack = 0
  4608                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  4609                           
  4610  01A1  01F3               	clrf	ClearResSum@56
  4611  01A2                     l4281:	
  4612  01A2  1003               	clrc
  4613  01A3  0D73               	rlf	ClearResSum@56,w
  4614  01A4  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4615  01A5  0084               	movwf	4
  4616  01A6  3002               	movlw	2
  4617  01A7  1383               	bcf	3,7	;select IRP bank1
  4618  01A8  0180               	clrf	0
  4619  01A9  0A84               	incf	4,f
  4620  01AA  0180               	clrf	0
  4621  01AB  0AF3               	incf	ClearResSum@56,f
  4622  01AC  0273               	subwf	ClearResSum@56,w
  4623  01AD  1803               	btfsc	3,0
  4624  01AE  0008               	return
  4625  01AF  29A2               	goto	l4281
  4626  01B0                     __end_of_ClearResSum:	
  4627  01B0                     __ptext34:	
  4628 ;; *************** function _CheckOnceResult *****************
  4629 ;; Defined at:
  4630 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  71              2   10[BANK0 ] unsigned int 
  4635 ;;  72              2    7[BANK0 ] unsigned int 
  4636 ;;  73              2    4[BANK0 ] unsigned int 
  4637 ;;  68              1   12[BANK0 ] unsigned char 
  4638 ;;  69              1    9[BANK0 ] unsigned char 
  4639 ;;  70              1    6[BANK0 ] unsigned char 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      void 
  4642 ;; Registers used:
  4643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4649 ;;      Params:         0       0       0       0
  4650 ;;      Locals:         0       9       0       0
  4651 ;;      Temps:          0       4       0       0
  4652 ;;      Totals:         0      13       0       0
  4653 ;;Total ram usage:       13 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    3
  4656 ;; This function calls:
  4657 ;;		_KeyClearOne
  4658 ;;		_KeyHave
  4659 ;;		_KeyIsIn
  4660 ;; This function is called by:
  4661 ;;		_CheckTouchKey
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _CheckOnceResult
  4667  01B0                     _CheckOnceResult:	
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4671  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  4672  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  4673  01B2  01D5               	clrf	CheckOnceResult@68
  4674  01B3  01F9               	clrf	_KeyData	;volatile
  4675  01B4  01FA               	clrf	_KeyData+1	;volatile
  4676  01B5  01B3               	clrf	_KeyMaxSub
  4677  01B6                     l4671:	
  4678  01B6  0855               	movf	CheckOnceResult@68,w
  4679  01B7  3907               	andlw	7
  4680  01B8  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4681  01B9  0084               	movwf	4
  4682  01BA  158A  2028  118A   	fcall	stringdir
  4683  01BD  00CF               	movwf	CheckOnceResult@70
  4684  01BE  1003               	clrc
  4685  01BF  0D55               	rlf	CheckOnceResult@68,w
  4686  01C0  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4687  01C1  0084               	movwf	4
  4688  01C2  3003               	movlw	3
  4689  01C3                     u5025:	
  4690  01C3  0A84               	incf	4,f
  4691  01C4  1003               	clrc
  4692  01C5  1383               	bcf	3,7	;select IRP bank1
  4693  01C6  0C80               	rrf	0,f
  4694  01C7  0384               	decf	4,f
  4695  01C8  0C80               	rrf	0,f
  4696  01C9  3EFF               	addlw	-1
  4697  01CA  1D03               	skipz
  4698  01CB  29C3               	goto	u5025
  4699  01CC  1003               	clrc
  4700  01CD  0D55               	rlf	CheckOnceResult@68,w
  4701  01CE  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  4702  01CF  0084               	movwf	4
  4703  01D0  0800               	movf	0,w
  4704  01D1  00D3               	movwf	CheckOnceResult@71
  4705  01D2  0A84               	incf	4,f
  4706  01D3  0800               	movf	0,w
  4707  01D4  00D4               	movwf	CheckOnceResult@71+1
  4708  01D5  0855               	movf	CheckOnceResult@68,w
  4709  01D6  3E16               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4710  01D7  0084               	movwf	4
  4711  01D8  158A  2028  118A   	fcall	stringdir
  4712  01DB  00D2               	movwf	CheckOnceResult@69
  4713  01DC  00D0               	movwf	CheckOnceResult@72
  4714  01DD  01D1               	clrf	CheckOnceResult@72+1
  4715  01DE  0853               	movf	CheckOnceResult@71,w
  4716  01DF  07D0               	addwf	CheckOnceResult@72,f
  4717  01E0  1803               	skipnc
  4718  01E1  0AD1               	incf	CheckOnceResult@72+1,f
  4719  01E2  0854               	movf	CheckOnceResult@71+1,w
  4720  01E3  07D1               	addwf	CheckOnceResult@72+1,f
  4721  01E4  0855               	movf	CheckOnceResult@68,w
  4722  01E5  2291  118A         	fcall	_KeyIsIn
  4723  01E7  3A00               	xorlw	0
  4724  01E8  1003               	clrc
  4725  01E9  1D03               	skipz
  4726  01EA  2A45               	goto	L16
  4727  01EB  0D55               	rlf	CheckOnceResult@68,w
  4728  01EC  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4729  01ED  0084               	movwf	4
  4730  01EE  1383               	bcf	3,7	;select IRP bank1
  4731  01EF  0800               	movf	0,w
  4732  01F0  00CD               	movwf	CheckOnceResult@73
  4733  01F1  0A84               	incf	4,f
  4734  01F2  0800               	movf	0,w
  4735  01F3  00CE               	movwf	CheckOnceResult@73+1
  4736  01F4  1003               	clrc
  4737  01F5  0D55               	rlf	CheckOnceResult@68,w
  4738  01F6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4739  01F7  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4740  01F9  0251               	subwf	CheckOnceResult@72+1,w
  4741  01FA  1D03               	skipz
  4742  01FB  29FE               	goto	u5045
  4743  01FC  0849               	movf	??_CheckOnceResult,w
  4744  01FD  0250               	subwf	CheckOnceResult@72,w
  4745  01FE                     u5045:	
  4746  01FE  1803               	skipnc
  4747  01FF  2A0D               	goto	l4689
  4748  0200  1003               	clrc
  4749  0201  0D55               	rlf	CheckOnceResult@68,w
  4750  0202  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4751  0203  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4752  0205  0853               	movf	CheckOnceResult@71,w
  4753  0206  0249               	subwf	??_CheckOnceResult,w
  4754  0207  00D3               	movwf	CheckOnceResult@71
  4755  0208  0854               	movf	CheckOnceResult@71+1,w
  4756  0209  1C03               	skipc
  4757  020A  0A54               	incf	CheckOnceResult@71+1,w
  4758  020B  024A               	subwf	??_CheckOnceResult+1,w
  4759  020C  2A31               	goto	L14
  4760  020D                     l4689:	
  4761  020D  084E               	movf	CheckOnceResult@73+1,w
  4762  020E  0251               	subwf	CheckOnceResult@72+1,w
  4763  020F  1D03               	skipz
  4764  0210  2A13               	goto	u5055
  4765  0211  084D               	movf	CheckOnceResult@73,w
  4766  0212  0250               	subwf	CheckOnceResult@72,w
  4767  0213                     u5055:	
  4768  0213  1803               	skipnc
  4769  0214  2A89               	goto	l4735
  4770  0215  1003               	clrc
  4771  0216  0D55               	rlf	CheckOnceResult@68,w
  4772  0217  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4773  0218  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4774  021A  0251               	subwf	CheckOnceResult@72+1,w
  4775  021B  1D03               	skipz
  4776  021C  2A1F               	goto	u5065
  4777  021D  0849               	movf	??_CheckOnceResult,w
  4778  021E  0250               	subwf	CheckOnceResult@72,w
  4779  021F                     u5065:	
  4780  021F  1803               	skipnc
  4781  0220  2A89               	goto	l4735
  4782  0221  1003               	clrc
  4783  0222  0D55               	rlf	CheckOnceResult@68,w
  4784  0223  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4785  0224  0084               	movwf	4
  4786  0225  084D               	movf	CheckOnceResult@73,w
  4787  0226  0080               	movwf	0
  4788  0227  0A84               	incf	4,f
  4789  0228  084E               	movf	CheckOnceResult@73+1,w
  4790  0229  0080               	movwf	0
  4791  022A  0853               	movf	CheckOnceResult@71,w
  4792  022B  024D               	subwf	CheckOnceResult@73,w
  4793  022C  00D3               	movwf	CheckOnceResult@71
  4794  022D  0854               	movf	CheckOnceResult@71+1,w
  4795  022E  1C03               	skipc
  4796  022F  0A54               	incf	CheckOnceResult@71+1,w
  4797  0230  024E               	subwf	CheckOnceResult@73+1,w
  4798  0231                     L14:	
  4799  0231  00D4               	movwf	CheckOnceResult@71+1
  4800  0232  0855               	movf	CheckOnceResult@68,w
  4801  0233  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4802  0234  0084               	movwf	4
  4803  0235  0180               	clrf	0
  4804  0236  0854               	movf	CheckOnceResult@71+1,w
  4805  0237  1903               	btfsc	3,2
  4806  0238  2A3B               	goto	l4703
  4807  0239  30FF               	movlw	255
  4808  023A  2A3C               	goto	L15
  4809  023B                     l4703:	
  4810  023B  0853               	movf	CheckOnceResult@71,w
  4811  023C                     L15:	
  4812  023C  00D2               	movwf	CheckOnceResult@69
  4813  023D  0233               	subwf	_KeyMaxSub,w
  4814  023E  1803               	skipnc
  4815  023F  2A43               	goto	l4709
  4816  0240  0852               	movf	CheckOnceResult@69,w
  4817  0241  00B3               	movwf	_KeyMaxSub
  4818  0242  2A83               	goto	l4733
  4819  0243                     l4709:	
  4820  0243  0AB4               	incf	_KeyCounter,f
  4821  0244  2A89               	goto	l4735
  4822  0245                     L16:	
  4823  0245  0D55               	rlf	CheckOnceResult@68,w
  4824  0246  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4825  0247  0084               	movwf	4
  4826  0248  1383               	bcf	3,7	;select IRP bank1
  4827  0249  0800               	movf	0,w
  4828  024A  00C9               	movwf	??_CheckOnceResult
  4829  024B  0A84               	incf	4,f
  4830  024C  0800               	movf	0,w
  4831  024D  00CA               	movwf	??_CheckOnceResult+1
  4832  024E  0849               	movf	??_CheckOnceResult,w
  4833  024F  3E01               	addlw	1
  4834  0250  00CB               	movwf	??_CheckOnceResult+2
  4835  0251  084A               	movf	??_CheckOnceResult+1,w
  4836  0252  1803               	skipnc
  4837  0253  3E01               	addlw	1
  4838  0254  00CC               	movwf	??_CheckOnceResult+3
  4839  0255  0851               	movf	CheckOnceResult@72+1,w
  4840  0256  024C               	subwf	??_CheckOnceResult+3,w
  4841  0257  1D03               	skipz
  4842  0258  2A5B               	goto	u5095
  4843  0259  0850               	movf	CheckOnceResult@72,w
  4844  025A  024B               	subwf	??_CheckOnceResult+2,w
  4845  025B                     u5095:	
  4846  025B  1C03               	btfss	3,0
  4847  025C  2A89               	goto	l4735
  4848  025D  1003               	clrc
  4849  025E  0D55               	rlf	CheckOnceResult@68,w
  4850  025F  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4851  0260  0084               	movwf	4
  4852  0261  0800               	movf	0,w
  4853  0262  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4854  0264  1C03               	skipc
  4855  0265  2A6F               	goto	l4723
  4856  0266  1003               	clrc
  4857  0267  0D55               	rlf	CheckOnceResult@68,w
  4858  0268  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4859  0269  0084               	movwf	4
  4860  026A  0800               	movf	0,w
  4861  026B  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4862  026D  1803               	skipnc
  4863  026E  2A7B               	goto	l4727
  4864  026F                     l4723:	
  4865  026F  0855               	movf	CheckOnceResult@68,w
  4866  0270  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4867  0271  0084               	movwf	4
  4868  0272  3009               	movlw	9
  4869  0273  0A80               	incf	0,f
  4870  0274  0200               	subwf	0,w
  4871  0275  1C03               	skipc
  4872  0276  2A7F               	goto	l4731
  4873  0277  0855               	movf	CheckOnceResult@68,w
  4874  0278  22A5  118A         	fcall	_KeyClearOne
  4875  027A  2A89               	goto	l4735
  4876  027B                     l4727:	
  4877  027B  0855               	movf	CheckOnceResult@68,w
  4878  027C  3EBC               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4879  027D  0084               	movwf	4
  4880  027E  0180               	clrf	0
  4881  027F                     l4731:	
  4882  027F  087A               	movf	_KeyData+1,w	;volatile
  4883  0280  0479               	iorwf	_KeyData,w	;volatile
  4884  0281  1D03               	btfss	3,2
  4885  0282  2A89               	goto	l4735
  4886  0283                     l4733:	
  4887  0283  084F               	movf	CheckOnceResult@70,w
  4888  0284  00F3               	movwf	KeyHave@59
  4889  0285  01F4               	clrf	KeyHave@59+1
  4890  0286  0855               	movf	CheckOnceResult@68,w
  4891  0287  22BA  118A         	fcall	_KeyHave
  4892  0289                     l4735:	
  4893  0289  3002               	movlw	2
  4894  028A  1283               	bcf	3,5	;RP0=0, select bank0
  4895  028B  1303               	bcf	3,6	;RP1=0, select bank0
  4896  028C  0AD5               	incf	CheckOnceResult@68,f
  4897  028D  0255               	subwf	CheckOnceResult@68,w
  4898  028E  1803               	btfsc	3,0
  4899  028F  0008               	return
  4900  0290  29B6               	goto	l4671
  4901  0291                     __end_of_CheckOnceResult:	
  4902  0291                     __ptext38:	
  4903 ;; *************** function _KeyIsIn *****************
  4904 ;; Defined at:
  4905 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  45              1    wreg     unsigned char 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  45              1    4[COMMON] unsigned char 
  4910 ;;  46              1    3[COMMON] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      unsigned char 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 300/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4920 ;;      Params:         0       0       0       0
  4921 ;;      Locals:         2       0       0       0
  4922 ;;      Temps:          0       0       0       0
  4923 ;;      Totals:         2       0       0       0
  4924 ;;Total ram usage:        2 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    2
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_KeyClearIn
  4931 ;;		_CheckOnceResult
  4932 ;;		_CheckKeyOldValue
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _KeyIsIn
  4938  0291                     _KeyIsIn:	
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4942                           ;KeyIsIn@45 stored from wreg
  4943  0291  00F4               	movwf	KeyIsIn@45
  4944  0292  3907               	andlw	7
  4945  0293  3E0E               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4946  0294  0084               	movwf	4
  4947  0295  158A  2028  118A   	fcall	stringdir
  4948  0298  00F3               	movwf	KeyIsIn@46
  4949  0299  1DF4               	btfss	KeyIsIn@45,3
  4950  029A  2A9F               	goto	l3039
  4951  029B  1283               	bcf	3,5	;RP0=0, select bank0
  4952  029C  1303               	bcf	3,6	;RP1=0, select bank0
  4953  029D  082F               	movf	_KeyFlag+1,w	;volatile
  4954  029E  2AA2               	goto	L21
  4955  029F                     l3039:	
  4956  029F  1283               	bcf	3,5	;RP0=0, select bank0
  4957  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  4958  02A1  082E               	movf	_KeyFlag,w	;volatile
  4959  02A2                     L21:	
  4960  02A2  05F3               	andwf	KeyIsIn@46,f
  4961  02A3  0873               	movf	KeyIsIn@46,w
  4962  02A4  0008               	return
  4963  02A5                     __end_of_KeyIsIn:	
  4964  02A5                     __ptext36:	
  4965 ;; *************** function _KeyClearOne *****************
  4966 ;; Defined at:
  4967 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  49              1    wreg     unsigned char 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  49              1    3[COMMON] unsigned char 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;                  1    wreg      void 
  4974 ;; Registers used:
  4975 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4981 ;;      Params:         0       0       0       0
  4982 ;;      Locals:         1       0       0       0
  4983 ;;      Temps:          0       0       0       0
  4984 ;;      Totals:         1       0       0       0
  4985 ;;Total ram usage:        1 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    2
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_KeyClearIn
  4992 ;;		_KeyStopClear
  4993 ;;		_CheckOnceResult
  4994 ;;		_SystemEnterSleep
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function _KeyClearOne
  5000  02A5                     _KeyClearOne:	
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  5004                           ;KeyClearOne@49 stored from wreg
  5005  02A5  00F3               	movwf	KeyClearOne@49
  5006  02A6  1003               	clrc
  5007  02A7  0D73               	rlf	KeyClearOne@49,w
  5008  02A8  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5009  02A9  0084               	movwf	4
  5010  02AA  1383               	bcf	3,7	;select IRP bank1
  5011  02AB  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5012  02AD  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5013  02AE  0084               	movwf	4
  5014  02AF  23E7  118A         	fcall	PL22	;call to abstracted procedure
  5015  02B1  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5016  02B2  0084               	movwf	4
  5017  02B3  23E7               	fcall	PL22	;call to abstracted procedure
  5018  02B4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5019  02B5  0084               	movwf	4
  5020  02B6  0180               	clrf	0
  5021  02B7  0A84               	incf	4,f
  5022  02B8  0180               	clrf	0	;# 
  5023  02B9  0008               	return
  5024  02BA                     __end_of_KeyClearOne:	
  5025  02BA                     __ptext35:	
  5026 ;; *************** function _KeyHave *****************
  5027 ;; Defined at:
  5028 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  58              1    wreg     unsigned char 
  5031 ;;  59              2    3[COMMON] unsigned int 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  58              1    5[COMMON] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : B00/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5043 ;;      Params:         2       0       0       0
  5044 ;;      Locals:         1       0       0       0
  5045 ;;      Temps:          0       0       0       0
  5046 ;;      Totals:         3       0       0       0
  5047 ;;Total ram usage:        3 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    2
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_CheckOnceResult
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function _KeyHave
  5059  02BA                     _KeyHave:	
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  5063                           ;KeyHave@58 stored from wreg
  5064  02BA  00F5               	movwf	KeyHave@58
  5065  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  5066  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  5067  02BD  0AB4               	incf	_KeyCounter,f
  5068  02BE  01F9               	clrf	_KeyData	;volatile
  5069  02BF  01FA               	clrf	_KeyData+1	;volatile
  5070  02C0  1DF5               	btfss	KeyHave@58,3
  5071  02C1  2AC5               	goto	l3191
  5072  02C2  0873               	movf	KeyHave@59,w
  5073  02C3  00FA               	movwf	_KeyData+1	;volatile
  5074  02C4  0008               	return
  5075  02C5                     l3191:	
  5076  02C5  0873               	movf	KeyHave@59,w
  5077  02C6  00F9               	movwf	_KeyData	;volatile
  5078  02C7  0008               	return
  5079  02C8                     __end_of_KeyHave:	
  5080  02C8                     __ptext37:	
  5081 ;; *************** function _CheckKeyOldValue *****************
  5082 ;; Defined at:
  5083 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  80              2    2[BANK0 ] unsigned int 
  5088 ;;  79              2    0[BANK0 ] unsigned int 
  5089 ;;  78              1    4[BANK0 ] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  1    wreg      void 
  5092 ;; Registers used:
  5093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5099 ;;      Params:         0       0       0       0
  5100 ;;      Locals:         0       5       0       0
  5101 ;;      Temps:          2       0       0       0
  5102 ;;      Totals:         2       5       0       0
  5103 ;;Total ram usage:        7 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    3
  5106 ;; This function calls:
  5107 ;;		_KeyIsIn
  5108 ;; This function is called by:
  5109 ;;		_CheckTouchKey
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _CheckKeyOldValue
  5115  02C8                     _CheckKeyOldValue:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5119  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  5120  02C9  3004               	movlw	4
  5121  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  5122  02CB  01CD               	clrf	CheckKeyOldValue@78
  5123  02CC  0AB2               	incf	CheckKeyOldValue@F77,f
  5124  02CD  0232               	subwf	CheckKeyOldValue@F77,w
  5125  02CE  1C03               	btfss	3,0
  5126  02CF  0008               	return
  5127  02D0  01B2               	clrf	CheckKeyOldValue@F77
  5128  02D1                     l3621:	
  5129  02D1  1003               	clrc
  5130  02D2  0D4D               	rlf	CheckKeyOldValue@78,w
  5131  02D3  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5132  02D4  0084               	movwf	4
  5133  02D5  1383               	bcf	3,7	;select IRP bank1
  5134  02D6  0800               	movf	0,w
  5135  02D7  00C9               	movwf	CheckKeyOldValue@79
  5136  02D8  0A84               	incf	4,f
  5137  02D9  0800               	movf	0,w
  5138  02DA  00CA               	movwf	CheckKeyOldValue@79+1
  5139  02DB  084D               	movf	CheckKeyOldValue@78,w
  5140  02DC  2291  118A         	fcall	_KeyIsIn
  5141  02DE  3A00               	xorlw	0
  5142  02DF  1003               	clrc
  5143  02E0  1D03               	skipz
  5144  02E1  2B16               	goto	L20
  5145  02E2  0D4D               	rlf	CheckKeyOldValue@78,w
  5146  02E3  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5147  02E4  0084               	movwf	4
  5148  02E5  1383               	bcf	3,7	;select IRP bank1
  5149  02E6  239B  118A         	fcall	PL2	;call to abstracted procedure
  5150  02E8  1903               	skipnz
  5151  02E9  024B               	subwf	CheckKeyOldValue@80,w
  5152  02EA  1C03               	skipc
  5153  02EB  2AF2               	goto	L17
  5154  02EC  0F4B               	incfsz	CheckKeyOldValue@80,w
  5155  02ED  2B15               	goto	l1339
  5156  02EE  0A4C               	incf	CheckKeyOldValue@80+1,w
  5157  02EF  1003               	clrc
  5158  02F0  1D03               	btfss	3,2
  5159  02F1  2B16               	goto	L20
  5160  02F2                     L17:	
  5161  02F2  0D4D               	rlf	CheckKeyOldValue@78,w
  5162  02F3  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5163  02F4  0084               	movwf	4
  5164  02F5  239B  118A         	fcall	PL2	;call to abstracted procedure
  5165  02F7  1903               	skipnz
  5166  02F8  024B               	subwf	CheckKeyOldValue@80,w
  5167  02F9  1C03               	skipc
  5168  02FA  2B01               	goto	L18
  5169  02FB  0F4B               	incfsz	CheckKeyOldValue@80,w
  5170  02FC  2B15               	goto	l1339
  5171  02FD  0A4C               	incf	CheckKeyOldValue@80+1,w
  5172  02FE  1003               	clrc
  5173  02FF  1D03               	btfss	3,2
  5174  0300  2B16               	goto	L20
  5175  0301                     L18:	
  5176  0301  0D4D               	rlf	CheckKeyOldValue@78,w
  5177  0302  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5178  0303  0084               	movwf	4
  5179  0304  239B  118A         	fcall	PL2	;call to abstracted procedure
  5180  0306  1903               	skipnz
  5181  0307  024B               	subwf	CheckKeyOldValue@80,w
  5182  0308  1C03               	skipc
  5183  0309  2B10               	goto	L19
  5184  030A  0F4B               	incfsz	CheckKeyOldValue@80,w
  5185  030B  2B15               	goto	l1339
  5186  030C  0A4C               	incf	CheckKeyOldValue@80+1,w
  5187  030D  1003               	clrc
  5188  030E  1D03               	btfss	3,2
  5189  030F  2B16               	goto	L20
  5190  0310                     L19:	
  5191  0310  0D4D               	rlf	CheckKeyOldValue@78,w
  5192  0311  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  5193  0312  0084               	movwf	4
  5194  0313  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5195  0315                     l1339:	
  5196  0315  1003               	clrc
  5197  0316                     L20:	
  5198  0316  0D4D               	rlf	CheckKeyOldValue@78,w
  5199  0317  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5200  0318  0084               	movwf	4
  5201  0319  1383               	bcf	3,7	;select IRP bank0
  5202  031A  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5203  031C  3EA4               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  5204  031D  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5205  031F  23DF  118A         	fcall	PL20	;call to abstracted procedure
  5206  0321  3E20               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  5207  0322  23CD  118A         	fcall	PL12	;call to abstracted procedure
  5208  0324  23F3  118A         	fcall	PL30	;call to abstracted procedure
  5209  0326  3002               	movlw	2
  5210  0327  0ACD               	incf	CheckKeyOldValue@78,f
  5211  0328  024D               	subwf	CheckKeyOldValue@78,w
  5212  0329  1803               	btfsc	3,0
  5213  032A  0008               	return
  5214  032B  2AD1               	goto	l3621
  5215  032C                     __end_of_CheckKeyOldValue:	
  5216  032C                     __ptext30:	
  5217 ;; *************** function _KeyStopClear *****************
  5218 ;; Defined at:
  5219 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  53              1    4[COMMON] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5233 ;;      Params:         0       0       0       0
  5234 ;;      Locals:         1       0       0       0
  5235 ;;      Temps:          0       0       0       0
  5236 ;;      Totals:         1       0       0       0
  5237 ;;Total ram usage:        1 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    3
  5240 ;; This function calls:
  5241 ;;		_KeyClearOne
  5242 ;; This function is called by:
  5243 ;;		_CheckTouchKey
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _KeyStopClear
  5249  032C                     _KeyStopClear:	
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5253  032C  1283               	bcf	3,5	;RP0=0, select bank0
  5254  032D  1303               	bcf	3,6	;RP1=0, select bank0
  5255  032E  01AE               	clrf	_KeyFlag	;volatile
  5256  032F  01AF               	clrf	_KeyFlag+1	;volatile
  5257  0330  01F4               	clrf	KeyStopClear@53
  5258  0331                     l3533:	
  5259  0331  1003               	clrc
  5260  0332  0D74               	rlf	KeyStopClear@53,w
  5261  0333  3EAC               	addlw	(low (_KeyResSum| 0))& (0+255)
  5262  0334  0084               	movwf	4
  5263  0335  1383               	bcf	3,7	;select IRP bank1
  5264  0336  0180               	clrf	0
  5265  0337  0A84               	incf	4,f
  5266  0338  0180               	clrf	0
  5267  0339  0874               	movf	KeyStopClear@53,w
  5268  033A  22A5  118A         	fcall	_KeyClearOne
  5269  033C  3002               	movlw	2
  5270  033D  0AF4               	incf	KeyStopClear@53,f
  5271  033E  0274               	subwf	KeyStopClear@53,w
  5272  033F  1803               	btfsc	3,0
  5273  0340  0008               	return
  5274  0341  2B31               	goto	l3533
  5275  0342                     __end_of_KeyStopClear:	
  5276  0342                     __ptext28:	
  5277 ;; *************** function _TurnKeyFlags *****************
  5278 ;; Defined at:
  5279 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5293 ;;      Params:         0       0       0       0
  5294 ;;      Locals:         0       0       0       0
  5295 ;;      Temps:          0       0       0       0
  5296 ;;      Totals:         0       0       0       0
  5297 ;;Total ram usage:        0 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    4
  5300 ;; This function calls:
  5301 ;;		_KeyClearIn
  5302 ;; This function is called by:
  5303 ;;		_CheckTouchKey
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           
  5308                           ;psect for function _TurnKeyFlags
  5309  0342                     _TurnKeyFlags:	
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5313  0342  087A               	movf	_KeyData+1,w	;volatile
  5314  0343  0479               	iorwf	_KeyData,w	;volatile
  5315  0344  1903               	btfsc	3,2
  5316  0345  2B66               	goto	l3681
  5317  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5318  0347  1303               	bcf	3,6	;RP1=0, select bank0
  5319  0348  01B0               	clrf	TurnKeyFlags@F84
  5320  0349  0879               	movf	_KeyData,w	;volatile
  5321  034A  0624               	xorwf	_KeyOldData,w	;volatile
  5322  034B  1D03               	skipz
  5323  034C  2B5F               	goto	l1357
  5324  034D  087A               	movf	_KeyData+1,w	;volatile
  5325  034E  0625               	xorwf	_KeyOldData+1,w	;volatile
  5326  034F  1D03               	skipz
  5327  0350  2B5F               	goto	l1357
  5328  0351  3002               	movlw	2
  5329  0352  0AB1               	incf	TurnKeyFlags@F83,f
  5330  0353  0231               	subwf	TurnKeyFlags@F83,w
  5331  0354  1C03               	skipc
  5332  0355  0008               	return
  5333  0356  01B1               	clrf	TurnKeyFlags@F83
  5334  0357  0879               	movf	_KeyData,w	;volatile
  5335  0358  00AE               	movwf	_KeyFlag	;volatile
  5336  0359  087A               	movf	_KeyData+1,w	;volatile
  5337  035A  00AF               	movwf	_KeyFlag+1	;volatile
  5338  035B  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5339  035C  0008               	return
  5340  035D  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5341  035E  2B8B               	ljmp	l3165
  5342  035F                     l1357:	
  5343  035F  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5344  0360  0879               	movf	_KeyData,w	;volatile
  5345  0361  00A4               	movwf	_KeyOldData	;volatile
  5346  0362  087A               	movf	_KeyData+1,w	;volatile
  5347  0363  00A5               	movwf	_KeyOldData+1	;volatile
  5348  0364  01B1               	clrf	TurnKeyFlags@F83
  5349  0365  0008               	return
  5350  0366                     l3681:	
  5351  0366  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0367  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0368  01B1               	clrf	TurnKeyFlags@F83
  5354  0369  01A4               	clrf	_KeyOldData	;volatile
  5355  036A  01A5               	clrf	_KeyOldData+1	;volatile
  5356  036B  3002               	movlw	2
  5357  036C  0AB0               	incf	TurnKeyFlags@F84,f
  5358  036D  0230               	subwf	TurnKeyFlags@F84,w
  5359  036E  1C03               	skipc
  5360  036F  0008               	return
  5361  0370  01B0               	clrf	TurnKeyFlags@F84
  5362  0371  01AE               	clrf	_KeyFlag	;volatile
  5363  0372  01AF               	clrf	_KeyFlag+1	;volatile
  5364  0373  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  5365  0374  0008               	return
  5366  0375                     __end_of_TurnKeyFlags:	
  5367  0375                     __ptext33:	
  5368 ;; *************** function _CheckValidTime *****************
  5369 ;; Defined at:
  5370 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;                  1    wreg      void 
  5377 ;; Registers used:
  5378 ;;		wreg, status,2, status,0
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5384 ;;      Params:         0       0       0       0
  5385 ;;      Locals:         0       0       0       0
  5386 ;;      Temps:          0       0       0       0
  5387 ;;      Totals:         0       0       0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    2
  5391 ;; This function calls:
  5392 ;;		Nothing
  5393 ;; This function is called by:
  5394 ;;		_CheckTouchKey
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _CheckValidTime
  5400  0375                     _CheckValidTime:	
  5401  0375                     l3691:	
  5402                           ;incstack = 0
  5403                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  5404                           
  5405  0375  1283               	bcf	3,5	;RP0=0, select bank0
  5406  0376  1303               	bcf	3,6	;RP1=0, select bank0
  5407  0377  082F               	movf	_KeyFlag+1,w	;volatile
  5408  0378  042E               	iorwf	_KeyFlag,w	;volatile
  5409  0379  1903               	btfsc	3,2
  5410  037A  2B87               	goto	l3697
  5411  037B  1683               	bsf	3,5	;RP0=1, select bank1
  5412  037C  0AB0               	incf	CheckValidTime@F87^(0+128),f
  5413  037D  1903               	skipnz
  5414  037E  0AB1               	incf	(CheckValidTime@F87+1)^(0+128),f
  5415  037F  303A               	movlw	58
  5416  0380  0231               	subwf	(CheckValidTime@F87+1)^(0+128),w
  5417  0381  3098               	movlw	152
  5418  0382  1903               	skipnz
  5419  0383  0230               	subwf	CheckValidTime@F87^(0+128),w
  5420  0384  1C03               	skipc
  5421  0385  0008               	return
  5422  0386  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  5423  0387                     l3697:	
  5424  0387  1683               	bsf	3,5	;RP0=1, select bank1
  5425  0388  01B0               	clrf	CheckValidTime@F87^(0+128)
  5426  0389  01B1               	clrf	(CheckValidTime@F87+1)^(0+128)
  5427  038A  0008               	return
  5428  038B                     __end_of_CheckValidTime:	
  5429  038B                     __ptext29:	
  5430 ;; *************** function _KeyClearIn *****************
  5431 ;; Defined at:
  5432 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;		None
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  51              1    5[COMMON] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  1    wreg      void 
  5439 ;; Registers used:
  5440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5441 ;; Tracked objects:
  5442 ;;		On entry : 300/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5446 ;;      Params:         0       0       0       0
  5447 ;;      Locals:         1       0       0       0
  5448 ;;      Temps:          0       0       0       0
  5449 ;;      Totals:         1       0       0       0
  5450 ;;Total ram usage:        1 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    3
  5453 ;; This function calls:
  5454 ;;		_KeyClearOne
  5455 ;;		_KeyIsIn
  5456 ;; This function is called by:
  5457 ;;		_TurnKeyFlags
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _KeyClearIn
  5463  038B                     _KeyClearIn:	
  5464  038B                     l3165:	
  5465                           ;incstack = 0
  5466                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5467                           
  5468  038B  01F5               	clrf	KeyClearIn@51
  5469  038C                     l3171:	
  5470  038C  0875               	movf	KeyClearIn@51,w
  5471  038D  2291  118A         	fcall	_KeyIsIn
  5472  038F  3A00               	xorlw	0
  5473  0390  1D03               	skipz
  5474  0391  2B95               	goto	l3175
  5475  0392  0875               	movf	KeyClearIn@51,w
  5476  0393  22A5  118A         	fcall	_KeyClearOne
  5477  0395                     l3175:	
  5478  0395  3002               	movlw	2
  5479  0396  0AF5               	incf	KeyClearIn@51,f
  5480  0397  0275               	subwf	KeyClearIn@51,w
  5481  0398  1803               	btfsc	3,0
  5482  0399  0008               	return
  5483  039A  2B8C               	goto	l3171
  5484  039B                     __end_of_KeyClearIn:	
  5485  039B                     PL2:	
  5486  039B  0800               	movf	0,w
  5487  039C  00CB               	movwf	CheckKeyOldValue@80
  5488  039D  0A84               	incf	4,f
  5489  039E  0800               	movf	0,w
  5490  039F  00CC               	movwf	CheckKeyOldValue@80+1
  5491  03A0  0849               	movf	CheckKeyOldValue@79,w
  5492  03A1  02CB               	subwf	CheckKeyOldValue@80,f
  5493  03A2  084A               	movf	CheckKeyOldValue@79+1,w
  5494  03A3  1C03               	skipc
  5495  03A4  03CC               	decf	CheckKeyOldValue@80+1,f
  5496  03A5  02CC               	subwf	CheckKeyOldValue@80+1,f
  5497  03A6  3000               	movlw	0
  5498  03A7  024C               	subwf	CheckKeyOldValue@80+1,w
  5499  03A8  3402               	retlw	2
  5500  03A9                     __end_ofPL2:	
  5501  03A9                     PL4:	
  5502  03A9  00C9               	movwf	??_CheckOnceResult
  5503  03AA  0A84               	incf	4,f
  5504  03AB  0800               	movf	0,w
  5505  03AC  00CA               	movwf	??_CheckOnceResult+1
  5506  03AD  0852               	movf	CheckOnceResult@69,w
  5507  03AE  0749               	addwf	??_CheckOnceResult,w
  5508  03AF  00CB               	movwf	??_CheckOnceResult+2
  5509  03B0  084A               	movf	??_CheckOnceResult+1,w
  5510  03B1  1803               	skipnc
  5511  03B2  0A4A               	incf	??_CheckOnceResult+1,w
  5512  03B3  00CC               	movwf	??_CheckOnceResult+3
  5513  03B4  0854               	movf	CheckOnceResult@71+1,w
  5514  03B5  024C               	subwf	??_CheckOnceResult+3,w
  5515  03B6  1D03               	skipz
  5516  03B7  0008               	return
  5517  03B8  0853               	movf	CheckOnceResult@71,w
  5518  03B9  024B               	subwf	??_CheckOnceResult+2,w
  5519  03BA  0008               	return
  5520  03BB                     __end_ofPL4:	
  5521  03BB                     PL8:	
  5522  03BB  0084               	movwf	4
  5523  03BC  0800               	movf	0,w
  5524  03BD  00C9               	movwf	??_CheckOnceResult
  5525  03BE  0A84               	incf	4,f
  5526  03BF  0800               	movf	0,w
  5527  03C0  00CA               	movwf	??_CheckOnceResult+1
  5528  03C1  0008               	return
  5529  03C2                     __end_ofPL8:	
  5530  03C2                     PL10:	
  5531  03C2  0084               	movwf	4
  5532  03C3  0874               	movf	??_SystemEnterSleep,w
  5533  03C4  0080               	movwf	0
  5534  03C5  0A84               	incf	4,f
  5535  03C6  0875               	movf	??_SystemEnterSleep+1,w
  5536  03C7  0080               	movwf	0
  5537  03C8  1003               	clrc
  5538  03C9  0D54               	rlf	SystemEnterSleep@91,w
  5539  03CA  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5540  03CB  0084               	movwf	4
  5541  03CC  0008               	return
  5542  03CD                     __end_ofPL10:	
  5543  03CD                     PL12:	
  5544  03CD  0084               	movwf	4
  5545  03CE  0875               	movf	??_CheckKeyOldValue,w
  5546  03CF  0080               	movwf	0
  5547  03D0  0A84               	incf	4,f
  5548  03D1  0876               	movf	??_CheckKeyOldValue+1,w
  5549  03D2  0080               	movwf	0
  5550  03D3  1003               	clrc
  5551  03D4  0D4D               	rlf	CheckKeyOldValue@78,w
  5552  03D5  3EA8               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  5553  03D6  0084               	movwf	4
  5554  03D7  0008               	return
  5555  03D8                     __end_ofPL12:	
  5556  03D8                     PL16:	
  5557  03D8  0084               	movwf	4
  5558  03D9  0800               	movf	0,w
  5559  03DA  00F4               	movwf	??_SystemEnterSleep
  5560  03DB  0A84               	incf	4,f
  5561  03DC  0800               	movf	0,w
  5562  03DD  00F5               	movwf	??_SystemEnterSleep+1
  5563  03DE  0008               	return
  5564  03DF                     __end_ofPL16:	
  5565  03DF                     PL20:	
  5566  03DF  0800               	movf	0,w
  5567  03E0  00F5               	movwf	??_CheckKeyOldValue
  5568  03E1  0A84               	incf	4,f
  5569  03E2  0800               	movf	0,w
  5570  03E3  00F6               	movwf	??_CheckKeyOldValue+1
  5571  03E4  1003               	clrc
  5572  03E5  0D4D               	rlf	CheckKeyOldValue@78,w
  5573  03E6  0008               	return
  5574  03E7                     __end_ofPL20:	
  5575  03E7                     PL22:	
  5576  03E7  0180               	clrf	0
  5577  03E8  0A84               	incf	4,f
  5578  03E9  0180               	clrf	0
  5579  03EA  1003               	clrc
  5580  03EB  0D73               	rlf	KeyClearOne@49,w
  5581  03EC  0008               	return
  5582  03ED                     __end_ofPL22:	
  5583  03ED                     PL24:	
  5584  03ED  3041               	movlw	65
  5585  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  5586  03EF  0095               	movwf	21	;volatile
  5587  03F0  1415               	bsf	21,0	;volatile
  5588  03F1  0196               	clrf	22	;volatile
  5589  03F2  0008               	return
  5590  03F3                     __end_ofPL24:	
  5591  03F3                     PL30:	
  5592  03F3  0849               	movf	CheckKeyOldValue@79,w
  5593  03F4  0080               	movwf	0
  5594  03F5  0A84               	incf	4,f
  5595  03F6  084A               	movf	CheckKeyOldValue@79+1,w
  5596  03F7  0080               	movwf	0
  5597  03F8  0008               	return
  5598  03F9                     __end_ofPL30:	
  5599  03F9                     PL34:	
  5600  03F9  01D4               	clrf	SystemEnterSleep@91
  5601  03FA  01D2               	clrf	SystemEnterSleep@92
  5602  03FB  0AD2               	incf	SystemEnterSleep@92,f
  5603  03FC  01D3               	clrf	SystemEnterSleep@92+1
  5604  03FD  0008               	return
  5605  03FE                     __end_ofPL34:	
  5606  03FE                     PL36:	
  5607  03FE  0DD2               	rlf	SystemEnterSleep@92,f
  5608  03FF  0DD3               	rlf	SystemEnterSleep@92+1,f
  5609  0400  0AD4               	incf	SystemEnterSleep@91,f
  5610  0401  0254               	subwf	SystemEnterSleep@91,w
  5611  0402  0008               	return
  5612  0403                     __end_ofPL36:	
  5613  0403                     __ptext24:	
  5614 ;; *************** function _Refurbish_Sfr *****************
  5615 ;; Defined at:
  5616 ;;		line 117 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;		None
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 200/0
  5627 ;;		On exit  : 300/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5630 ;;      Params:         0       0       0       0
  5631 ;;      Locals:         0       0       0       0
  5632 ;;      Temps:          0       0       0       0
  5633 ;;      Totals:         0       0       0       0
  5634 ;;Total ram usage:        0 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    2
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_WorkSleep
  5641 ;;		_main
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _Refurbish_Sfr
  5647  0403                     _Refurbish_Sfr:	
  5648                           
  5649                           ;main.c: 120: PIE1 = 2;
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  5653  0403  3002               	movlw	2
  5654  0404  1283               	bcf	3,5	;RP0=0, select bank0
  5655  0405  008E               	movwf	14	;volatile
  5656                           
  5657                           ;main.c: 121: PR2 = 250;
  5658  0406  30FA               	movlw	250
  5659  0407  0091               	movwf	17	;volatile
  5660                           
  5661                           ;main.c: 122: INTCON = 0XC0;
  5662  0408  30C0               	movlw	192
  5663  0409  008B               	movwf	11	;volatile
  5664                           
  5665                           ;main.c: 123: if (4 != T2CON)
  5666  040A  3004               	movlw	4
  5667  040B  0613               	xorwf	19,w	;volatile
  5668  040C  1903               	btfsc	3,2
  5669  040D  0008               	return
  5670                           
  5671                           ;main.c: 124: T2CON = 4;
  5672  040E  3004               	movlw	4
  5673  040F  0093               	movwf	19	;volatile
  5674  0410  0008               	return
  5675  0411                     __end_of_Refurbish_Sfr:	
  5676                           
  5677                           	psect	text39
  5678  0E55                     __ptext39:	
  5679 ;; *************** function _Isr_Timer *****************
  5680 ;; Defined at:
  5681 ;;		line 201 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 300/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5695 ;;      Params:         0       0       0       0
  5696 ;;      Locals:         0       0       0       0
  5697 ;;      Temps:          3       0       0       0
  5698 ;;      Totals:         3       0       0       0
  5699 ;;Total ram usage:        3 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    1
  5702 ;; This function calls:
  5703 ;;		_ledShow
  5704 ;; This function is called by:
  5705 ;;		Interrupt level 1
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _Isr_Timer
  5711  0E55                     _Isr_Timer:	
  5712                           
  5713                           ;main.c: 203: if(TMR2IF)
  5714  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  5715  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  5716  0E57  1C8D               	btfss	13,1	;volatile
  5717  0E58  2E76               	goto	i1l4211
  5718                           
  5719                           ;main.c: 204: {
  5720                           ;main.c: 205: TMR2IF = 0;
  5721  0E59  108D               	bcf	13,1	;volatile
  5722                           
  5723                           ;main.c: 206: if(firstTime > 0 || workStep > 0 || wuhuaFlag > 0 || chrgFlag > 0)
  5724  0E5A  086C               	movf	_firstTime,w
  5725  0E5B  1D03               	btfss	3,2
  5726  0E5C  2E65               	goto	i1l4199
  5727  0E5D  0844               	movf	_workStep,w
  5728  0E5E  1D03               	btfss	3,2
  5729  0E5F  2E65               	goto	i1l4199
  5730  0E60  0843               	movf	_wuhuaFlag,w
  5731  0E61  1903               	btfsc	3,2
  5732  0E62  083F               	movf	_chrgFlag,w
  5733  0E63  1903               	btfsc	3,2
  5734  0E64  2E67               	goto	i1l4201
  5735  0E65                     i1l4199:	
  5736                           
  5737                           ;main.c: 207: {
  5738                           ;main.c: 208: ledShow();
  5739  0E65  2680  158A         	fcall	_ledShow
  5740  0E67                     i1l4201:	
  5741                           
  5742                           ;main.c: 209: }
  5743                           ;main.c: 210: if(++MainTime >= 64)
  5744  0E67  3040               	movlw	64
  5745  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  5746  0E69  0AC6               	incf	_MainTime,f	;volatile
  5747  0E6A  0246               	subwf	_MainTime,w	;volatile
  5748  0E6B  1C03               	skipc
  5749  0E6C  2E77               	goto	i1l980
  5750                           
  5751                           ;main.c: 211: {
  5752                           ;main.c: 212: MainTime = 0;
  5753  0E6D  01C6               	clrf	_MainTime	;volatile
  5754                           
  5755                           ;main.c: 213: B_MainLoop = 1;
  5756  0E6E  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5757                           
  5758                           ;main.c: 214: if(++count1s >= 250)
  5759  0E6F  30FA               	movlw	250
  5760  0E70  0AC5               	incf	_count1s,f
  5761  0E71  0245               	subwf	_count1s,w
  5762  0E72  1C03               	skipc
  5763  0E73  2E77               	goto	i1l980
  5764                           
  5765                           ;main.c: 215: {
  5766                           ;main.c: 216: count1s = 0;
  5767  0E74  01C5               	clrf	_count1s
  5768  0E75  2E77               	goto	i1l980
  5769  0E76                     i1l4211:	
  5770                           
  5771                           ;main.c: 220: else
  5772                           ;main.c: 221: {
  5773                           ;main.c: 222: PIR1 = 0;
  5774  0E76  018D               	clrf	13	;volatile
  5775  0E77                     i1l980:	
  5776  0E77  0872               	movf	??_Isr_Timer+2,w
  5777  0E78  008A               	movwf	10
  5778  0E79  0871               	movf	??_Isr_Timer+1,w
  5779  0E7A  0084               	movwf	4
  5780  0E7B  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5781  0E7C  0083               	movwf	3
  5782  0E7D  0EFE               	swapf	126,f
  5783  0E7E  0E7E               	swapf	126,w
  5784  0E7F  0009               	retfie
  5785  0E80                     __end_of_Isr_Timer:	
  5786  0E80                     __ptext40:	
  5787 ;; *************** function _ledShow *****************
  5788 ;; Defined at:
  5789 ;;		line 375 in file "C:\mcuproject\scm\zdt\D99_8F083_SOP16_\D99_SC8F083_SOP16\main.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;		None
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;		None
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      void 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5798 ;; Tracked objects:
  5799 ;;		On entry : 300/0
  5800 ;;		On exit  : 200/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5803 ;;      Params:         0       0       0       0
  5804 ;;      Locals:         0       0       0       0
  5805 ;;      Temps:          0       0       0       0
  5806 ;;      Totals:         0       0       0       0
  5807 ;;Total ram usage:        0 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_Isr_Timer
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _ledShow
  5818  0E80                     _ledShow:	
  5819                           
  5820                           ;main.c: 378: if(++ledCnt > 19)
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  5824  0E80  3014               	movlw	20
  5825  0E81  0ABB               	incf	_ledCnt,f
  5826  0E82  023B               	subwf	_ledCnt,w
  5827  0E83  1803               	btfsc	3,0
  5828                           
  5829                           ;main.c: 379: {
  5830                           ;main.c: 380: ledCnt = 0;
  5831  0E84  01BB               	clrf	_ledCnt
  5832                           
  5833                           ;main.c: 382: }
  5834                           ;main.c: 383: PORTA &= 0xE4;
  5835                           
  5836                           ;main.c: 384: PORTB &= 0xEF;
  5837                           
  5838                           ;main.c: 385: TRISA |= 0x1B;
  5839                           
  5840                           ;main.c: 386: TRISB |= 0x10;
  5841  0E85  118A  27F3  158A   	fcall	PL14	;call to abstracted procedure
  5842                           
  5843                           ;main.c: 387: switch(ledCnt)
  5844  0E88  2F18               	goto	i1l3965
  5845  0E89                     i1l1012:	
  5846                           ;main.c: 391: case 1:
  5847                           
  5848                           
  5849                           ;main.c: 392: if(showNumShi & 0x01)
  5850  0E89  1C6E               	btfss	_showNumShi,0
  5851  0E8A  0008               	return
  5852                           
  5853                           ;main.c: 393: {
  5854                           ;main.c: 394: TRISA &= 0xFE;
  5855  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  5856  0E8C  1005               	bcf	5,0	;volatile
  5857                           
  5858                           ;main.c: 395: TRISA &= 0xEF;
  5859  0E8D  1205               	bcf	5,4	;volatile
  5860                           
  5861                           ;main.c: 396: RA4 = 1;
  5862  0E8E  1606               	bsf	6,4	;volatile
  5863  0E8F  0008               	return
  5864  0E90                     i1l1014:	
  5865                           ;main.c: 399: case 2:
  5866                           
  5867                           
  5868                           ;main.c: 400: if(showNumShi & 0x02)
  5869  0E90  1CEE               	btfss	_showNumShi,1
  5870  0E91  0008               	return
  5871                           
  5872                           ;main.c: 401: {
  5873                           ;main.c: 402: TRISA &= 0xFE;
  5874  0E92  1683               	bsf	3,5	;RP0=1, select bank1
  5875  0E93  1005               	bcf	5,0	;volatile
  5876                           
  5877                           ;main.c: 403: TRISA &= 0xF7;
  5878  0E94  1185               	bcf	5,3	;volatile
  5879                           
  5880                           ;main.c: 404: RA3 = 1;
  5881  0E95  1586               	bsf	6,3	;volatile
  5882  0E96  0008               	return
  5883  0E97                     i1l1016:	
  5884                           ;main.c: 407: case 3:
  5885                           
  5886                           
  5887                           ;main.c: 408: if(showNumShi & 0x04)
  5888  0E97  1D6E               	btfss	_showNumShi,2
  5889  0E98  0008               	return
  5890                           
  5891                           ;main.c: 409: {
  5892                           ;main.c: 410: TRISA &= 0xFE;
  5893  0E99  1683               	bsf	3,5	;RP0=1, select bank1
  5894  0E9A  1005               	bcf	5,0	;volatile
  5895                           
  5896                           ;main.c: 411: TRISA &= 0xFD;
  5897  0E9B  1085               	bcf	5,1	;volatile
  5898                           
  5899                           ;main.c: 412: RA1 = 1;
  5900  0E9C  1486               	bsf	6,1	;volatile
  5901  0E9D  0008               	return
  5902  0E9E                     i1l1018:	
  5903                           ;main.c: 415: case 4:
  5904                           
  5905                           
  5906                           ;main.c: 416: if(showNumShi & 0x08)
  5907  0E9E  1DEE               	btfss	_showNumShi,3
  5908  0E9F  0008               	return
  5909                           
  5910                           ;main.c: 417: {
  5911                           ;main.c: 418: TRISA &= 0xFE;
  5912  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
  5913  0EA1  1005               	bcf	5,0	;volatile
  5914                           
  5915                           ;main.c: 419: TRISB &= 0xEF;
  5916                           
  5917                           ;main.c: 420: RB4 = 1;
  5918  0EA2  2F25               	ljmp	PL28	;call to abstracted procedure
  5919  0EA3                     i1l1020:	
  5920                           ;main.c: 423: case 5:
  5921                           
  5922                           
  5923                           ;main.c: 424: if(showNumShi & 0x10)
  5924  0EA3  1E6E               	btfss	_showNumShi,4
  5925  0EA4  0008               	return
  5926                           
  5927                           ;main.c: 425: {
  5928                           ;main.c: 426: TRISA &= 0xEF;
  5929  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  5930  0EA6  1205               	bcf	5,4	;volatile
  5931                           
  5932                           ;main.c: 427: TRISA &= 0xFE;
  5933  0EA7  1005               	bcf	5,0	;volatile
  5934                           
  5935                           ;main.c: 428: RA0 = 1;
  5936  0EA8  1406               	bsf	6,0	;volatile
  5937  0EA9  0008               	return
  5938  0EAA                     i1l1022:	
  5939                           ;main.c: 431: case 6:
  5940                           
  5941                           
  5942                           ;main.c: 432: if(showNumShi & 0x20)
  5943  0EAA  1EEE               	btfss	_showNumShi,5
  5944  0EAB  0008               	return
  5945                           
  5946                           ;main.c: 433: {
  5947                           ;main.c: 434: TRISA &= 0xEF;
  5948  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  5949  0EAD  1205               	bcf	5,4	;volatile
  5950                           
  5951                           ;main.c: 435: TRISA &= 0xF7;
  5952  0EAE  1185               	bcf	5,3	;volatile
  5953                           
  5954                           ;main.c: 436: RA3 = 1;
  5955  0EAF  1586               	bsf	6,3	;volatile
  5956  0EB0  0008               	return
  5957  0EB1                     i1l1024:	
  5958                           ;main.c: 439: case 7:
  5959                           
  5960                           
  5961                           ;main.c: 440: if(showNumShi & 0x40)
  5962  0EB1  1F6E               	btfss	_showNumShi,6
  5963  0EB2  0008               	return
  5964                           
  5965                           ;main.c: 441: {
  5966                           ;main.c: 442: TRISA &= 0xEF;
  5967  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  5968  0EB4  1205               	bcf	5,4	;volatile
  5969                           
  5970                           ;main.c: 443: TRISA &= 0xFD;
  5971  0EB5  1085               	bcf	5,1	;volatile
  5972                           
  5973                           ;main.c: 444: RA1 = 1;
  5974  0EB6  1486               	bsf	6,1	;volatile
  5975  0EB7  0008               	return
  5976  0EB8                     i1l1026:	
  5977                           ;main.c: 447: case 8:
  5978                           
  5979                           
  5980                           ;main.c: 448: if(showNumGe & 0x01)
  5981  0EB8  1C6D               	btfss	_showNumGe,0
  5982  0EB9  0008               	return
  5983                           
  5984                           ;main.c: 449: {
  5985                           ;main.c: 450: TRISA &= 0xEF;
  5986  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  5987  0EBB  1205               	bcf	5,4	;volatile
  5988                           
  5989                           ;main.c: 451: TRISB &= 0xEF;
  5990                           
  5991                           ;main.c: 452: RB4 = 1;
  5992  0EBC  2F25               	ljmp	PL28	;call to abstracted procedure
  5993  0EBD                     i1l1028:	
  5994                           ;main.c: 455: case 9:
  5995                           
  5996                           
  5997                           ;main.c: 456: if(showNumGe & 0x02)
  5998  0EBD  1CED               	btfss	_showNumGe,1
  5999  0EBE  0008               	return
  6000                           
  6001                           ;main.c: 457: {
  6002                           ;main.c: 458: TRISA &= 0xF7;
  6003  0EBF  1683               	bsf	3,5	;RP0=1, select bank1
  6004  0EC0  1185               	bcf	5,3	;volatile
  6005                           
  6006                           ;main.c: 459: TRISA &= 0xFE;
  6007  0EC1  1005               	bcf	5,0	;volatile
  6008                           
  6009                           ;main.c: 460: RA0 = 1;
  6010  0EC2  1406               	bsf	6,0	;volatile
  6011  0EC3  0008               	return
  6012  0EC4                     i1l1030:	
  6013                           ;main.c: 463: case 10:
  6014                           
  6015                           
  6016                           ;main.c: 464: if(showNumGe & 0x04)
  6017  0EC4  1D6D               	btfss	_showNumGe,2
  6018  0EC5  0008               	return
  6019                           
  6020                           ;main.c: 465: {
  6021                           ;main.c: 466: TRISA &= 0xF7;
  6022  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  6023  0EC7  1185               	bcf	5,3	;volatile
  6024                           
  6025                           ;main.c: 467: TRISA &= 0xEF;
  6026  0EC8  1205               	bcf	5,4	;volatile
  6027                           
  6028                           ;main.c: 468: RA4 = 1;
  6029  0EC9  1606               	bsf	6,4	;volatile
  6030  0ECA  0008               	return
  6031  0ECB                     i1l1032:	
  6032                           ;main.c: 471: case 11:
  6033                           
  6034                           
  6035                           ;main.c: 472: if(showNumGe & 0x08)
  6036  0ECB  1DED               	btfss	_showNumGe,3
  6037  0ECC  0008               	return
  6038                           
  6039                           ;main.c: 473: {
  6040                           ;main.c: 474: TRISA &= 0xF7;
  6041  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  6042  0ECE  1185               	bcf	5,3	;volatile
  6043                           
  6044                           ;main.c: 475: TRISA &= 0xFD;
  6045  0ECF  1085               	bcf	5,1	;volatile
  6046                           
  6047                           ;main.c: 476: RA1 = 1;
  6048  0ED0  1486               	bsf	6,1	;volatile
  6049  0ED1  0008               	return
  6050  0ED2                     i1l1034:	
  6051                           ;main.c: 479: case 12:
  6052                           
  6053                           
  6054                           ;main.c: 480: if(showNumGe & 0x10)
  6055  0ED2  1E6D               	btfss	_showNumGe,4
  6056  0ED3  0008               	return
  6057                           
  6058                           ;main.c: 481: {
  6059                           ;main.c: 482: TRISA &= 0xF7;
  6060  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  6061  0ED5  1185               	bcf	5,3	;volatile
  6062                           
  6063                           ;main.c: 483: TRISB &= 0xEF;
  6064                           
  6065                           ;main.c: 484: RB4 = 1;
  6066  0ED6  2F25               	ljmp	PL28	;call to abstracted procedure
  6067  0ED7                     i1l1036:	
  6068                           ;main.c: 487: case 13:
  6069                           
  6070                           
  6071                           ;main.c: 488: if(showNumGe & 0x20)
  6072  0ED7  1EED               	btfss	_showNumGe,5
  6073  0ED8  0008               	return
  6074                           
  6075                           ;main.c: 489: {
  6076                           ;main.c: 490: TRISA &= 0xFD;
  6077  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  6078  0EDA  1085               	bcf	5,1	;volatile
  6079                           
  6080                           ;main.c: 491: TRISA &= 0xFE;
  6081  0EDB  1005               	bcf	5,0	;volatile
  6082                           
  6083                           ;main.c: 492: RA0 = 1;
  6084  0EDC  1406               	bsf	6,0	;volatile
  6085  0EDD  0008               	return
  6086  0EDE                     i1l1038:	
  6087                           ;main.c: 495: case 14:
  6088                           
  6089                           
  6090                           ;main.c: 496: if(showNumGe & 0x40)
  6091  0EDE  1F6D               	btfss	_showNumGe,6
  6092  0EDF  0008               	return
  6093                           
  6094                           ;main.c: 497: {
  6095                           ;main.c: 498: TRISA &= 0xFD;
  6096  0EE0  1683               	bsf	3,5	;RP0=1, select bank1
  6097  0EE1  1085               	bcf	5,1	;volatile
  6098                           
  6099                           ;main.c: 499: TRISA &= 0xEF;
  6100  0EE2  1205               	bcf	5,4	;volatile
  6101                           
  6102                           ;main.c: 500: RA4 = 1;
  6103  0EE3  1606               	bsf	6,4	;volatile
  6104  0EE4  0008               	return
  6105  0EE5                     i1l3941:	
  6106                           
  6107                           ;main.c: 504: if(firstTime || showNumGe || showNumShi)
  6108  0EE5  086C               	movf	_firstTime,w
  6109  0EE6  1D03               	btfss	3,2
  6110  0EE7  2EED               	goto	i1l1043
  6111  0EE8  086D               	movf	_showNumGe,w
  6112  0EE9  1903               	btfsc	3,2
  6113  0EEA  086E               	movf	_showNumShi,w
  6114  0EEB  1903               	btfsc	3,2
  6115  0EEC  0008               	return
  6116  0EED                     i1l1043:	
  6117                           
  6118                           ;main.c: 505: {
  6119                           ;main.c: 506: TRISA &= 0xFD;
  6120  0EED  1683               	bsf	3,5	;RP0=1, select bank1
  6121  0EEE  1085               	bcf	5,1	;volatile
  6122                           
  6123                           ;main.c: 507: TRISA &= 0xF7;
  6124  0EEF  1185               	bcf	5,3	;volatile
  6125                           
  6126                           ;main.c: 508: RA3 = 1;
  6127  0EF0  1586               	bsf	6,3	;volatile
  6128  0EF1  0008               	return
  6129  0EF2                     i1l3947:	
  6130                           
  6131                           ;main.c: 512: if(firstTime > 0 || wuhuaFlag > 0)
  6132  0EF2  086C               	movf	_firstTime,w
  6133  0EF3  1903               	btfsc	3,2
  6134  0EF4  0843               	movf	_wuhuaFlag,w
  6135  0EF5  1903               	btfsc	3,2
  6136  0EF6  0008               	return
  6137                           
  6138                           ;main.c: 513: {
  6139                           ;main.c: 514: TRISA &= 0xFD;
  6140  0EF7  1683               	bsf	3,5	;RP0=1, select bank1
  6141  0EF8  1085               	bcf	5,1	;volatile
  6142                           
  6143                           ;main.c: 515: TRISB &= 0xEF;
  6144                           
  6145                           ;main.c: 516: RB4 = 1;
  6146  0EF9  2F25               	ljmp	PL28	;call to abstracted procedure
  6147  0EFA                     i1l3951:	
  6148                           
  6149                           ;main.c: 520: if(firstTime > 0 ||workStep > 0)
  6150  0EFA  086C               	movf	_firstTime,w
  6151  0EFB  1903               	btfsc	3,2
  6152  0EFC  0844               	movf	_workStep,w
  6153  0EFD  1903               	btfsc	3,2
  6154  0EFE  0008               	return
  6155                           
  6156                           ;main.c: 521: {
  6157                           ;main.c: 522: TRISB &= 0xEF;
  6158  0EFF  1205               	bcf	5,4	;volatile
  6159                           
  6160                           ;main.c: 523: TRISA &= 0xFE;
  6161  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  6162  0F01  1005               	bcf	5,0	;volatile
  6163                           
  6164                           ;main.c: 524: RA0 = 1;
  6165  0F02  1406               	bsf	6,0	;volatile
  6166  0F03  0008               	return
  6167  0F04                     i1l3955:	
  6168                           
  6169                           ;main.c: 528: if(firstTime > 0 ||fanKeyFlag > 0)
  6170  0F04  086C               	movf	_firstTime,w
  6171  0F05  1903               	btfsc	3,2
  6172  0F06  083A               	movf	_fanKeyFlag,w
  6173  0F07  1903               	btfsc	3,2
  6174  0F08  0008               	return
  6175                           
  6176                           ;main.c: 529: {
  6177                           ;main.c: 530: TRISB &= 0xEF;
  6178  0F09  1205               	bcf	5,4	;volatile
  6179                           
  6180                           ;main.c: 531: TRISA &= 0xEF;
  6181  0F0A  1683               	bsf	3,5	;RP0=1, select bank1
  6182  0F0B  1205               	bcf	5,4	;volatile
  6183                           
  6184                           ;main.c: 532: RA4 = 1;
  6185  0F0C  1606               	bsf	6,4	;volatile
  6186  0F0D  0008               	return
  6187  0F0E                     i1l3959:	
  6188                           
  6189                           ;main.c: 536: if(firstTime > 0 ||wuhuaKeyFlag > 0)
  6190  0F0E  086C               	movf	_firstTime,w
  6191  0F0F  1903               	btfsc	3,2
  6192  0F10  0839               	movf	_wuhuaKeyFlag,w
  6193  0F11  1903               	btfsc	3,2
  6194  0F12  0008               	return
  6195                           
  6196                           ;main.c: 537: {
  6197                           ;main.c: 538: TRISB &= 0xEF;
  6198  0F13  1205               	bcf	5,4	;volatile
  6199                           
  6200                           ;main.c: 539: TRISA &= 0xFD;
  6201  0F14  1683               	bsf	3,5	;RP0=1, select bank1
  6202  0F15  1085               	bcf	5,1	;volatile
  6203                           
  6204                           ;main.c: 540: RA1 = 1;
  6205  0F16  1486               	bsf	6,1	;volatile
  6206  0F17  0008               	return
  6207  0F18                     i1l3965:	
  6208  0F18  083B               	movf	_ledCnt,w
  6209                           
  6210                           ; Switch size 1, requested type "space"
  6211                           ; Number of cases is 20, Range of values is 0 to 19
  6212                           ; switch strategies available:
  6213                           ; Name         Instructions Cycles
  6214                           ; direct_byte           47     7 (fixed)
  6215                           ; simple_byte           61    31 (average)
  6216                           ; jumptable            260     6 (fixed)
  6217                           ;	Chosen strategy is direct_byte
  6218  0F19  0084               	movwf	4
  6219  0F1A  3014               	movlw	20
  6220  0F1B  0204               	subwf	4,w
  6221  0F1C  1803               	skipnc
  6222  0F1D  0008               	return
  6223  0F1E  3008               	movlw	high i1S5093
  6224  0F1F  008A               	movwf	10
  6225  0F20  1003               	clrc
  6226  0F21  0D04               	rlf	4,w
  6227  0F22  3E00               	addlw	low i1S5093
  6228  0F23  0082               	movwf	2
  6229  0F24                     i1l1061:	
  6230  0F24  0008               	return
  6231  0F25                     __end_of_ledShow:	
  6232  007E                     btemp	set	126	;btemp
  6233  007E                     wtemp0	set	126
  6234  0F25                     PL28:	
  6235  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  6236  0F26  1205               	bcf	5,4	;volatile
  6237  0F27  1606               	bsf	6,4	;volatile
  6238  0F28  0008               	return
  6239  0F29                     __end_ofPL28:	
  6240                           
  6241                           	psect	intentry
  6242  0004                     __pintentry:	
  6243                           ;incstack = 0
  6244                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6245                           
  6246  0004                     interrupt_function:	
  6247  007E                     saved_w	set	btemp
  6248  0004  00FE               	movwf	btemp
  6249  0005  0E03               	swapf	3,w
  6250  0006  00F0               	movwf	??_Isr_Timer
  6251  0007  0804               	movf	4,w
  6252  0008  00F1               	movwf	??_Isr_Timer+1
  6253  0009  080A               	movf	10,w
  6254  000A  00F2               	movwf	??_Isr_Timer+2
  6255  000B  158A  2E55         	ljmp	_Isr_Timer
  6256                           
  6257                           	psect	swtext1
  6258  0800                     __pswtext1:	
  6259  0800                     i1S5093:	
  6260  0800  158A  2F24         	ljmp	i1l1061
  6261  0802  158A  2E89         	ljmp	i1l1012
  6262  0804  158A  2E90         	ljmp	i1l1014
  6263  0806  158A  2E97         	ljmp	i1l1016
  6264  0808  158A  2E9E         	ljmp	i1l1018
  6265  080A  158A  2EA3         	ljmp	i1l1020
  6266  080C  158A  2EAA         	ljmp	i1l1022
  6267  080E  158A  2EB1         	ljmp	i1l1024
  6268  0810  158A  2EB8         	ljmp	i1l1026
  6269  0812  158A  2EBD         	ljmp	i1l1028
  6270  0814  158A  2EC4         	ljmp	i1l1030
  6271  0816  158A  2ECB         	ljmp	i1l1032
  6272  0818  158A  2ED2         	ljmp	i1l1034
  6273  081A  158A  2ED7         	ljmp	i1l1036
  6274  081C  158A  2EDE         	ljmp	i1l1038
  6275  081E  158A  2EE5         	ljmp	i1l3941
  6276  0820  158A  2EF2         	ljmp	i1l3947
  6277  0822  158A  2EFA         	ljmp	i1l3951
  6278  0824  158A  2F04         	ljmp	i1l3955
  6279  0826  158A  2F0E         	ljmp	i1l3959


Data Sizes:
    Strings     0
    Constant    27
    Data        2
    BSS         73
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     34      79
    BANK1            80      4      34
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _setBatStep->___lwdiv
    _showBatLed->___lbmod
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_ClearResSum
    _SystemEnterSleep->_KeyClearOne
    _CheckTouchKey->_CheckKeyOldValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _setBatStep->___lwdiv
    _WorkSleep->_SystemEnterSleep
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12877
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    7705
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1283
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     266
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     538
                                              3 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     427
                         _showBatLed
 ---------------------------------------------------------------------------------
 (2) _showBatLed                                           0     0      0     427
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     939
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     939
                                              4 COMMON     2     2      0
                                              5 BANK0      7     7      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3268
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              5 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              4 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     263
                                              0 BANK0      5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      65
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              5 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (4) _KeyIsIn                                              2     2      0      69
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (6) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
     _showBatLed
       ___lbdiv
       ___lbmod
   _setBatStep
     ___lwdiv
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      22       6       42.5%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      4F       4       98.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7C       9        0.0%
ABS                  0      0      7C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 07 13:58:35 2025

                        pc 0002                         PL2 039B                         PL4 03A9  
                       PL6 078B                         PL8 03BB              ??_KeyClearOne 0073  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0073  
                      PL10 03C2                        PL20 03DF                        PL12 03CD  
                      PL30 03F3                        PL22 03E7                        PL14 07F3  
                      PL40 07B3                        PL32 07AA                        PL24 03ED  
                      PL16 03D8                        PL34 03F9                        PL26 07A3  
                      PL18 079A                        PL36 03FE                        PL28 0F25  
                      PL38 07AE                        l994 0513                        _RA0 0430  
                      _RA1 0431                        _RA3 0433                        _RA4 0434  
                      _RB4 0034                        _RB6 0036                        _PR2 0011  
      __size_of_ADC_Sample 00D0                        fsr0 0004                        indf 0000  
        ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0849         ??_GetTouchKeyValue 0074  
             ___ftdiv@cntr 0058               ___ftdiv@sign 005D                       l1000 054F  
                     l1004 0595                       l1102 0E06                       l1113 0729  
                     l1107 070B                       l1070 0F49                       l1071 0F45  
                     l1073 0F47                       l1086 0FBB                       l1418 06BD  
                     l1339 0315                       l1357 035F                       l4101 0DEE  
                     l3039 029F                       l3311 0E51                       l3303 0E3D  
                     l4103 0DF0                       l1376 008A                       l4113 0DFF  
                     l1617 05CC                       l1298 0175                       l3171 038C  
                     l5011 0099                       l4115 0E00                       l1563 0683  
                     l1388 00A9                       l3165 038B                       l5021 00A2  
                     l3191 02C5                       l3175 0395                       l1575 06A7  
                     l4311 04FD                       l3281 0E24                       l4321 051D  
                     l4305 04FC                       l5019 009E                       l5027 00A8  
                     l5035 07C0                       l3621 02D1                       l3533 0331  
                     l1669 0E2A                       l3429 0E0A                       l4333 0543  
                     l3295 0E37                       l4335 054B                       l5071 07EF  
                     l4281 01A2                       l4425 0184                       l4345 0599  
                     l4329 0538                       l4427 0196                       l4523 00D6  
                     l4451 068F                       l4435 06D3                       l4611 0485  
                     l4453 0697                       l4373 0754                       l4613 0487  
                     l4357 077A                       l4703 023B                       l4279 01A1  
                     l4535 00DD                       l4447 0687                       l4295 04F1  
                     l4367 0786                       l3681 0366                       l4553 0111  
                     l4457 06A5                       l4449 068A                       l4801 0646  
                     l4297 04F3                       l4633 04CE                       l4625 04BA  
                     l4731 027F                       l4723 026F                       l3691 0375  
                     l4395 013F                       l4459 069C                       l4643 04DA  
                     l4635 04D0                       l4475 073C                       l4483 074F  
                     l4651 0764                       l4733 0283                       l4709 0243  
                     l4549 010A                       l4741 05BE                       l4813 0662  
                     l4645 04DB                       l4581 0708                       l4727 027B  
                     l4735 0289                       l4671 01B6                       l4399 0145  
                     l3863 0DA4                       l4807 064A                       l4639 04D6  
                     l4663 0778                       l3697 0387                       l3873 0DB6  
                     l4569 0132                       l4913 0F62                       l4809 0654  
                     l4593 0727                       l4665 0779                       l4657 076D  
                     l3859 0D9F                       l3875 0DB8                       l4851 0046  
                     l4827 0FE4                       l4931 0F92                       l4763 05DF  
                     l4595 072C                       l4587 070D                       l4579 0706  
                     l3885 0DC4                       l4933 0F95                       l4909 0F4C  
                     l4781 0620                       l3895 0DD2                       l4839 0FFB  
                     l4943 0FAC                       l4919 0F78                       l4689 020D  
                     l3889 0DC9                       l3897 0DD4                       l4945 0FAF  
                     l3899 0DD7                       l4779 061B                       l4885 0079  
                     l4797 063E                       l4991 046E                       l4897 0F2F  
                     l4985 0465                       l4977 044B                       l4987 0468  
                     _ADON 04A8                       _CHS4 04B6                       _PIE1 000E  
                     _PIE2 0110                       u5025 01C3                       u5045 01FE  
                     u5205 0623                       u5055 0213                       u5065 021F  
                     u4515 05A2                       _RAIF 006B                       u4445 053E  
                     _INTF 0059                       u5095 025B                       u5175 05ED  
                     u4455 0549                       _RBIE 005B                       _RBIF 0058  
                     u4705 0742                       u5525 0FCC                       u5295 0FED  
                     u4495 058A                       _PIR1 000D                       _PIR2 010F  
                     u5707 04ED                       u4925 04AB                       u4775 0106  
                     _TMR0 0081                       _WPUB 0008                       _main 07B8  
             ___ftpack@arg 0073               ___ftpack@exp 0076                       _time 00BA  
                     btemp 007E              ?_KeyStopClear 0070                       start 000D  
             _TurnKeyFlags 0342            __end_of_KeyIsIn 02A5            __end_of_KeyHave 02C8  
             ___fttol@exp1 006A              ??_Init_System 0073               ___fttol@lval 0066  
          TurnKeyFlags@F83 0031            TurnKeyFlags@F84 0030                      ?_main 0070  
          __end_of___lbdiv 0E39            __end_of___lbmod 0E55            __end_of___ftdiv 0612  
          __end_of___fttol 066B                      _IOCB0 0048                      _T2CON 0013  
 __end_of_SystemEnterSleep 0139            __end_of___lwdiv 1000            __end_of___lwmod 0754  
                    i1l980 0E77                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 0760                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 0764            __end_of_chrgCtr 0E0A  
      ___lmul@multiplicand 004D        __end_of_KeyClearOne 02BA            __end_of_ledShow 0F25  
               _KeyClearIn 038B             fanCtr@fan_temp 0057              ___ftpack@sign 0077  
           __pbitbssCOMMON 03C0                      pclath 000A            __end_of_pwmInit 0786  
              _ClearResSum 01A1                 _KeyCounter 0034                 _KeyOldData 0024  
          __end_of_pwmStop 078B             ??_KeyStopClear 0074                      status 0003  
                    wtemp0 007E            __end_of_workCtr 0473            ___lbdiv@divisor 0073  
               _KeyUpShake 00BC            ___lbdiv@counter 0075            __initialization 000F  
             __end_of_main 07F3                     ??_main 0078              ___fttol@sign1 0065  
      __end_of_Init_System 0041                     _ADCON0 0095                     _ADCON1 0096  
                   i1S5093 0800                     _ADRESH 0099                     _ADRESL 0098  
         __end_of___ftpack 06B9                     _GODONE 04A9                     i1l1020 0EA3  
                   i1l1012 0E89                     i1l1030 0EC4                     i1l1022 0EAA  
                   i1l1014 0E90                     i1l1032 0ECB                     i1l1024 0EB1  
                   i1l1016 0E97                     i1l1034 0ED2                     i1l1026 0EB8  
                   i1l1018 0E9E                     i1l1043 0EED                     i1l1036 0ED7  
                   i1l1028 0EBD                     i1l1061 0F24                     i1l1038 0EDE  
                   i1l4201 0E67                     i1l4211 0E76                     i1l4199 0E65  
                   i1l3941 0EE5                     i1l3951 0EFA                     i1l3955 0F04  
                   i1l3947 0EF2                     i1l3965 0F18                     i1l3959 0F0E  
                   _LDO_EN 04B2                     _INTCON 000B           __end_of___lwtoft 067B  
       __size_of_KeyServer 0053                     _OSCCON 0014                     _TMR2IF 0069  
                   _PWMD0L 0019                     _PWMD1L 001A               ??_ADC_Sample 0074  
                   _TRISB0 0028                     _TRISB6 002E                  ??_KeyIsIn 0073  
                ??_KeyHave 0075              ClearResSum@56 0073         __size_of_Isr_Timer 002B  
__size_of_CheckKeyOldValue 0064                     ___lmul 06B9                     _b_kclr 03C2  
                   _b_kerr 03C1                     _fanCtr 0473                  ??___lbdiv 0074  
                ??___lbmod 0074                  ??___ftdiv 0055                  ??___fttol 0062  
                   _ledCnt 003B                  ??___lwdiv 0077                  ??___lwmod 0077  
             _wuhuaKeyFlag 0039                  ??_fanInit 0073                  ??_fanStop 0073  
              _KeyClearOne 02A5                  ??_chrgCtr 0078                     _result 00B2  
                ??_ledShow 0070           __end_of_numArray 083B              _Table_KeyFalg 083B  
            _Table_KeyDown 0843         __end_of_ADC_Sample 05B0                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0073                  ??_pwmStop 0073  
              ?_KeyClearIn 0070                  ??_workCtr 0078            _CheckOnceResult 01B0  
         ___lbdiv@dividend 0074           __end_of_wuhuaCtr 077A            ___lbmod@divisor 0073  
  __end_of__initialization 0021            ___lbmod@counter 0076         __size_of_WorkSleep 003B  
        CheckOnceResult@70 004F          CheckOnceResult@71 0053          CheckOnceResult@72 0050  
        CheckOnceResult@73 004D          CheckOnceResult@68 0055          CheckOnceResult@69 0052  
               ___ftdiv@f1 0052                 ___ftdiv@f2 004F                 ___ftdiv@f3 0059  
               ___fttol@f1 005E             __pcstackCOMMON 0070               __pidataBANK0 0000  
              _Init_System 0024                 __end_ofPL2 03A9                 __end_ofPL4 03BB  
               __end_ofPL6 079A                 __end_ofPL8 03C2           ___lbdiv@quotient 0076  
        __end_of_KeyServer 0DD9                 ___lwtoft@c 004C       __end_of_KeyStopClear 0342  
        __end_of_Isr_Timer 0E80                 _fanKeyFlag 003A         __size_of_keyLedCtr 0044  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 003E  
__size_of_GetTouchKeyValue 0068               _chrgFullTime 003D              _CheckTouchKey 007C  
               __pmaintext 07B8                    ?___lmul 0049                    ?_fanCtr 0070  
               __pintentry 0004        __size_of_KeyClearIn 0010             ___lmul@product 0073  
                ?___ftpack 0073          __end_of_WorkSleep 007C                  ?___lwtoft 004C  
        ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0291                    _KEYCON0 0111  
                  _KEYCON1 0112                    _KEYCON2 0113                 _curBatStep 0037  
       ??_SystemEnterSleep 0074                    _B_OnOff 03C5                    _PWMD01H 001E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D       __end_of_Table_KeyCap 0847                 __stringtab 0828  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 002E  
                  _KeyIsIn 0291                    _KeyHave 02BA             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0073            ADC_Sample@admax 0052            ADC_Sample@admin 0050  
          ADC_Sample@adsum 004C           _CheckKeyOldValue 02C8                    ___lbdiv 0E1E  
          __size_of___lmul 0033                    ___lbmod 0E39                    ___ftdiv 05B0  
          __size_of_fanCtr 006D                    ___fttol 0612                    ___lwdiv 0FD6  
                  ___lwmod 0730          __end_of_keyLedCtr 0730                    _b_kover 03C4  
                  _fanInit 0754                    _fanDuty 0042                    _fanStop 0760  
               ??___ftpack 0049                    _chrgCtr 0DD9                    __ptext1 0411  
                  __ptext2 0764                    __ptext3 0786                    __ptext4 077A  
                  __ptext5 06EC                    __ptext6 0730                    __ptext7 0473  
                  __ptext8 0760                    __ptext9 0754                 _lowBatLock 003C  
                  _ledShow 0E80                 _lowBatTime 00B6                  ?_wuhuaCtr 0070  
               ??___lwtoft 0078                    _count1s 0045                 _setBatStep 0F29  
                  _pwmInit 077A                    _pwmStop 0786    __size_of_CheckValidTime 0016  
                  clrloop0 0D7F                    _workCtr 0411       end_of_initialization 0021  
            _Refurbish_Sfr 0403                 _showBatLed 0E0A               _KeyOldValue0 00A8  
             _KeyOldValue1 0020               _KeyOldValue2 00A4      __size_of_KeyStopClear 0016  
       SystemEnterSleep@91 0054         SystemEnterSleep@92 0052         SystemEnterSleep@93 0050  
       SystemEnterSleep@94 004E               ?_KeyClearOne 0070                 _showNumShi 006E  
             _KeyReference 00A0                 ??_wuhuaCtr 0073          CheckValidTime@F87 00B0  
         ?_CheckOnceResult 0070           ___lbmod@dividend 0075                  KeyIsIn@45 0074  
                KeyIsIn@46 0073                  KeyHave@58 0075                  KeyHave@59 0073  
             ??_KeyClearIn 0075                ___lbmod@rem 0077                ___ftdiv@exp 005C  
          ??_CheckTouchKey 0077               _KeyStopClear 032C           _GetTouchKeyValue 0139  
           ?_Refurbish_Sfr 0070               ?_Init_System 0070             __end_of___lmul 06EC  
           __end_of_fanCtr 04E0         __end_of_KeyClearIn 039B                  _KeyMaxSub 0033  
                _KeyResSum 00AC                __end_ofPL10 03CD                __end_ofPL20 03E7  
              __end_ofPL12 03D8                __end_ofPL30 03F9                __end_ofPL22 03ED  
              __end_ofPL14 07FE                __end_ofPL40 07B8                __end_ofPL32 07AE  
              __end_ofPL24 03F3                __end_ofPL16 03DF                __end_ofPL34 03FE  
              __end_ofPL26 07AA                __end_ofPL18 07A3                __end_ofPL36 0403  
              __end_ofPL28 0F29                __end_ofPL38 07B3        start_initialization 000F  
                _KeyServer 0D86                ?_setBatStep 0070                  _Isr_Timer 0E55  
        workCtr@power_temp 00BE       __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070  
              ?_showBatLed 0070                   ??___lmul 0073                   ??_fanCtr 0078  
        ADC_Sample@ad_temp 0054                __pdataBANK0 006D               _Table_KeyCap 0845  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0040  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 0049              __pcstackBANK1 00BE                  _WorkSleep 0041  
           _CheckValidTime 0375   __end_of_CheckKeyOldValue 032C                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 0035                   ?_KeyIsIn 0070                   ?_KeyHave 0073  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0073             ??_TurnKeyFlags 0076  
                __pnvBANK0 006B           ___lwdiv@dividend 0075        __size_of_setBatStep 00AD  
                 ?___lbdiv 0073                   ?___lbmod 0073                   ?___ftdiv 004F  
                 ?___fttol 005E                   ?___lwdiv 0073                   ?___lwmod 0073  
                 ?_fanInit 0070                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 002A                  __pstrings 0828                  __pswtext1 0800  
                 ?_ledShow 0070       __size_of_KeyClearOne 0015                  _keyLedCtr 06EC  
                _firstLock 006B     __end_of_CheckValidTime 038B                  _firstTime 006C  
        __size_of_wuhuaCtr 0016                 ?_WorkSleep 0070             ADC_Sample@adch 004A  
                 ?_pwmInit 0070                   ?_pwmStop 0070           ___lwdiv@quotient 004A  
      __size_of_showBatLed 0014                   ?_workCtr 0070                ADC_Sample@i 004B  
              ADC_Sample@j 0049                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 0D7E             KeyStopClear@53 0074  
      CheckKeyOldValue@F77 0032                  _showNumGe 006D                __stringbase 082D  
     __size_of_Init_System 001D      __end_of_Table_KeyFalg 0843      __end_of_Table_KeyDown 0845  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 01A1            ?_CheckValidTime 0070  
              ??_KeyServer 0073          ___lmul@multiplier 0049                  _wuhuaFlag 0043  
              ??_Isr_Timer 0070                   _MainTime 0046                 _ADC_Sample 04E0  
         __size_of_KeyIsIn 0014           __size_of_KeyHave 000E           _Table_KeyChannel 0847  
         __size_of___lbdiv 001B           __size_of___lbmod 001C           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwdiv 002A           __size_of___lwmod 0024  
                 ___ftpack 067B           __size_of_fanInit 000C         __end_of__stringtab 082E  
         __size_of_fanStop 0004           __size_of_chrgCtr 0031                   ___lwtoft 066B  
                 _b_kover1 03C3                   _b_ksleep 03C0           __size_of_ledShow 00A5  
     __end_of_TurnKeyFlags 0375                   _fanValue 00B8                   _adresult 0047  
             ??_setBatStep 0077                   _chrgFlag 003F                ??_WorkSleep 0076  
          ___lwdiv@divisor 0073            ___lwdiv@counter 0049                   __ptext10 06B9  
                 __ptext11 04E0                   __ptext20 0E39                   __ptext12 066B  
                 __ptext21 0E1E                   __ptext13 0612                   __ptext30 032C  
                 __ptext22 0041                   __ptext14 05B0                   __ptext31 0139  
                 __ptext23 00A9                   __ptext15 067B                   __ptext40 0E80  
                 __ptext32 01A1                   __ptext24 0403                   __ptext16 0F29  
                 __ptext33 0375                   __ptext25 0D86                   __ptext17 0FD6  
                 __ptext34 01B0                   __ptext26 0024                   __ptext18 0DD9  
                 __ptext35 02BA                   __ptext27 007C                   __ptext19 0E0A  
                 __ptext36 02A5                   __ptext28 0342                   __ptext37 02C8  
                 __ptext29 038B                   __ptext38 0291                   __ptext39 0E55  
         __size_of_pwmInit 000C           __size_of_pwmStop 0005               _shanshuoTime 002C  
                 _count10s 0041                   _count30s 0028                   _count15s 00B4  
         __size_of_workCtr 0062   __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 004D  
       GetTouchKeyValue@63 004B         GetTouchKeyValue@64 0049              __size_of_main 003B  
         _SystemEnterSleep 00A9      __end_of_CheckTouchKey 00A9                   _numArray 082E  
             ??_showBatLed 0078         CheckKeyOldValue@80 004B         CheckKeyOldValue@78 004D  
       CheckKeyOldValue@79 0049                   _test_adc 0036         __end_of_setBatStep 0FD6  
                 _power_ad 0026   setBatStep@tempSubBatTime 004C                   _workStep 0044  
                 _wuhuaCtr 0764                ??_keyLedCtr 0078          ?_CheckKeyOldValue 0070  
       __end_of_showBatLed 0E1E                   intlevel1 0000              ??_ClearResSum 0073  
       ??_CheckKeyOldValue 0075           ___lwmod@dividend 0075                ?_ADC_Sample 0073  
                stringcode 0828                _showBatStep 0038                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0056                 _OPTION_REG 0001            ___lwmod@divisor 0073  
          ___lwmod@counter 0077                   stringdir 0828                   stringtab 0828  
            KeyClearOne@49 0073               KeyClearIn@51 0075      __end_of_Refurbish_Sfr 0411  
      __end_of_ClearResSum 01B0          ??_CheckOnceResult 0049  
