

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 25 15:11:44 2021

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1711C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	pa_nodes0,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.45
    20                           ; Generated 16/11/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	text0
    55  0000                     __ptext0:	
    56  001F                     _ADCON0	set	31
    57  001E                     _ADRESH	set	30
    58  000B                     _INTCON	set	11
    59  0001                     _TMR0	set	1
    60  00F9                     _GODONE	set	249
    61  005A                     _T0IF	set	90
    62  0058                     _RBIF	set	88
    63  009F                     _ADCON1	set	159
    64  009E                     _ADRESL	set	158
    65  008F                     _OSCCON	set	143
    66  0081                     _OPTION_REG	set	129
    67  0435                     _TRISB5	set	1077
    68  0189                     _ANSELH	set	393
    69                           
    70                           	psect	cinit
    71  000B                     start_initialization:	
    72                           ; #config settings
    73                           
    74  000B                     __initialization:	
    75                           
    76                           ; Clear objects allocated to COMMON
    77  000B  01F6               	clrf	__pbssCOMMON& (0+127)
    78  000C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    79  000D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    80                           
    81                           ; Clear objects allocated to BANK0
    82  000E  1283               	bcf	3,5	;RP0=0, select bank0
    83  000F  1303               	bcf	3,6	;RP1=0, select bank0
    84  0010  01A0               	clrf	__pbssBANK0& (0+127)
    85  0011  01A1               	clrf	(__pbssBANK0+1)& (0+127)
    86  0012  01A2               	clrf	(__pbssBANK0+2)& (0+127)
    87  0013  01A3               	clrf	(__pbssBANK0+3)& (0+127)
    88  0014  01A4               	clrf	(__pbssBANK0+4)& (0+127)
    89  0015  01A5               	clrf	(__pbssBANK0+5)& (0+127)
    90  0016  01A6               	clrf	(__pbssBANK0+6)& (0+127)
    91  0017  01A7               	clrf	(__pbssBANK0+7)& (0+127)
    92  0018  01A8               	clrf	(__pbssBANK0+8)& (0+127)
    93  0019  01A9               	clrf	(__pbssBANK0+9)& (0+127)
    94  001A                     end_of_initialization:	
    95                           ;End of C runtime variable initialization code
    96                           
    97  001A                     __end_of__initialization:	
    98  001A  0183               	clrf	3
    99  001B  28FC               	ljmp	_main	;jump to C main() function
   100                           
   101                           	psect	bssCOMMON
   102  0076                     __pbssCOMMON:	
   103  0076                     ADC_Sample@adtimes:	
   104  0076                     	ds	1
   105  0077                     _IntFlag:	
   106  0077                     	ds	1
   107  0078                     _intCount:	
   108  0078                     	ds	1
   109                           
   110                           	psect	bssBANK0
   111  0020                     __pbssBANK0:	
   112  0020                     ADC_Sample@adsum:	
   113  0020                     	ds	4
   114  0024                     ADC_Sample@admax:	
   115  0024                     	ds	2
   116  0026                     ADC_Sample@admin:	
   117  0026                     	ds	2
   118  0028                     _adresult:	
   119  0028                     	ds	2
   120                           
   121                           	psect	cstackCOMMON
   122  0070                     __pcstackCOMMON:	
   123  0070                     ?_InitSys:	
   124  0070                     ?_ADC_Sample:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0070                     ?_ADC_Result:	
   128                           ; 1 bytes @ 0x0
   129                           
   130  0070                     ?_main:	
   131                           ; 1 bytes @ 0x0
   132                           
   133  0070                     ?_Timer0_Isr:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0070                     ??_Timer0_Isr:	
   137                           ; 1 bytes @ 0x0
   138                           
   139                           
   140                           ; 1 bytes @ 0x0
   141  0070                     	ds	2
   142  0072                     ??_InitSys:	
   143  0072                     ??_ADC_Sample:	
   144                           ; 1 bytes @ 0x2
   145                           
   146  0072                     ??_ADC_Result:	
   147                           ; 1 bytes @ 0x2
   148                           
   149                           
   150                           ; 1 bytes @ 0x2
   151  0072                     	ds	1
   152  0073                     ADC_Result@adch:	
   153                           
   154                           ; 1 bytes @ 0x3
   155  0073                     	ds	1
   156  0074                     ADC_Result@i:	
   157                           
   158                           ; 1 bytes @ 0x4
   159  0074                     	ds	2
   160  0076                     ??_main:	
   161                           
   162                           	psect	cstackBANK0
   163  002A                     __pcstackBANK0:	
   164                           ; 1 bytes @ 0x6
   165                           
   166  002A                     ADC_Sample@adch:	
   167                           
   168                           ; 1 bytes @ 0x0
   169  002A                     	ds	1
   170  002B                     ADC_Sample@i:	
   171                           
   172                           ; 1 bytes @ 0x1
   173  002B                     	ds	1
   174  002C                     ADC_Sample@ad_temp:	
   175                           
   176                           ; 2 bytes @ 0x2
   177  002C                     	ds	2
   178                           
   179                           	psect	maintext
   180  00FC                     __pmaintext:	
   181 ;;
   182 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   183 ;;
   184 ;; *************** function _main *****************
   185 ;; Defined at:
   186 ;;		line 148 in file "C:\mcuproject\scm\zdt\S23_1171C_SOP14_\main.c"
   187 ;; Parameters:    Size  Location     Type
   188 ;;		None
   189 ;; Auto vars:     Size  Location     Type
   190 ;;  result          1    0        unsigned char 
   191 ;; Return value:  Size  Location     Type
   192 ;;                  1    wreg      void 
   193 ;; Registers used:
   194 ;;		wreg, status,2, status,0, pclath, cstack
   195 ;; Tracked objects:
   196 ;;		On entry : B00/0
   197 ;;		On exit  : 300/0
   198 ;;		Unchanged: 0/0
   199 ;; Data sizes:     COMMON   BANK0   BANK1
   200 ;;      Params:         0       0       0
   201 ;;      Locals:         0       0       0
   202 ;;      Temps:          0       0       0
   203 ;;      Totals:         0       0       0
   204 ;;Total ram usage:        0 bytes
   205 ;; Hardware stack levels required when called:    2
   206 ;; This function calls:
   207 ;;		_ADC_Result
   208 ;;		_ADC_Sample
   209 ;;		_InitSys
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           
   216                           ;psect for function _main
   217  00FC                     _main:	
   218                           
   219                           ;main.c: 151: InitSys();
   220                           
   221                           ;incstack = 0
   222                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   223  00FC  210D               	fcall	_InitSys
   224  00FD                     l638:	
   225                           ;main.c: 152: while(1)
   226                           
   227  00FD  0064               	clrwdt	;# 
   228                           
   229                           ;main.c: 155: if(!IntFlag)
   230  00FE  0877               	movf	_IntFlag,w
   231  00FF  1903               	btfsc	3,2
   232  0100  28FD               	goto	l638
   233  0101  3020               	movlw	32
   234                           
   235                           ;main.c: 157: IntFlag = 0;
   236  0102  01F7               	clrf	_IntFlag
   237                           
   238                           ;main.c: 160: ANSELH = 0X20;
   239  0103  1683               	bsf	3,5	;RP0=1, select bank3
   240  0104  1703               	bsf	3,6	;RP1=1, select bank3
   241  0105  0089               	movwf	9	;volatile
   242                           
   243                           ;main.c: 161: TRISB5 = 1;
   244  0106  1303               	bcf	3,6	;RP1=0, select bank1
   245  0107  1686               	bsf	6,5	;volatile
   246                           
   247                           ;main.c: 162: ADC_Sample(13);
   248  0108  300D               	movlw	13
   249  0109  201C               	fcall	_ADC_Sample
   250                           
   251                           ;main.c: 164: unsigned char result;
   252                           ;main.c: 166: result = ADC_Result(13);
   253  010A  300D               	movlw	13
   254  010B  20C7               	fcall	_ADC_Result
   255  010C  28FD               	goto	l638
   256  010D                     __end_of_main:	
   257                           
   258                           	psect	text1
   259  010D                     __ptext1:	
   260 ;; *************** function _InitSys *****************
   261 ;; Defined at:
   262 ;;		line 173 in file "C:\mcuproject\scm\zdt\S23_1171C_SOP14_\main.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;		None
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, status,2
   271 ;; Tracked objects:
   272 ;;		On entry : B00/0
   273 ;;		On exit  : 300/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMMON   BANK0   BANK1
   276 ;;      Params:         0       0       0
   277 ;;      Locals:         0       0       0
   278 ;;      Temps:          0       0       0
   279 ;;      Totals:         0       0       0
   280 ;;Total ram usage:        0 bytes
   281 ;; Hardware stack levels used:    1
   282 ;; Hardware stack levels required when called:    1
   283 ;; This function calls:
   284 ;;		Nothing
   285 ;; This function is called by:
   286 ;;		_main
   287 ;; This function uses a non-reentrant model
   288 ;;
   289                           
   290                           
   291                           ;psect for function _InitSys
   292  010D                     _InitSys:	
   293                           
   294                           ;incstack = 0
   295                           ; Regs used in _InitSys: [wreg+status,2]
   296  010D  0000               	nop	;# 
   297  010E  0064               	clrwdt	;# 
   298                           
   299                           ;main.c: 177: INTCON = 0;
   300  010F  018B               	clrf	11	;volatile
   301                           
   302                           ;main.c: 178: OSCCON = 0X71;
   303  0110  3071               	movlw	113
   304  0111  1683               	bsf	3,5	;RP0=1, select bank1
   305  0112  1303               	bcf	3,6	;RP1=0, select bank1
   306  0113  008F               	movwf	15	;volatile
   307                           
   308                           ;main.c: 179: OPTION_REG = 0x00;
   309  0114  0181               	clrf	1	;volatile
   310                           
   311                           ;main.c: 180: TMR0 = 155;
   312  0115  309B               	movlw	155
   313  0116  1283               	bcf	3,5	;RP0=0, select bank0
   314  0117  0081               	movwf	1	;volatile
   315                           
   316                           ;main.c: 181: INTCON = 0xE0;
   317  0118  30E0               	movlw	224
   318  0119  008B               	movwf	11	;volatile
   319  011A  0008               	return
   320  011B                     __end_of_InitSys:	
   321                           
   322                           	psect	text2
   323  001C                     __ptext2:	
   324 ;; *************** function _ADC_Sample *****************
   325 ;; Defined at:
   326 ;;		line 67 in file "C:\mcuproject\scm\zdt\S23_1171C_SOP14_\main.c"
   327 ;; Parameters:    Size  Location     Type
   328 ;;  adch            1    wreg     unsigned char 
   329 ;; Auto vars:     Size  Location     Type
   330 ;;  adch            1    0[BANK0 ] unsigned char 
   331 ;;  ad_temp         2    2[BANK0 ] volatile unsigned int 
   332 ;;  i               1    1[BANK0 ] unsigned char 
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, status,2, status,0
   337 ;; Tracked objects:
   338 ;;		On entry : 300/100
   339 ;;		On exit  : 300/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMMON   BANK0   BANK1
   342 ;;      Params:         0       0       0
   343 ;;      Locals:         0       4       0
   344 ;;      Temps:          4       0       0
   345 ;;      Totals:         4       4       0
   346 ;;Total ram usage:        8 bytes
   347 ;; Hardware stack levels used:    1
   348 ;; Hardware stack levels required when called:    1
   349 ;; This function calls:
   350 ;;		Nothing
   351 ;; This function is called by:
   352 ;;		_main
   353 ;; This function uses a non-reentrant model
   354 ;;
   355                           
   356                           
   357                           ;psect for function _ADC_Sample
   358  001C                     _ADC_Sample:	
   359                           
   360                           ;incstack = 0
   361                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
   362                           ;ADC_Sample@adch stored from wreg
   363  001C  1283               	bcf	3,5	;RP0=0, select bank0
   364  001D  00AA               	movwf	ADC_Sample@adch
   365                           
   366                           ;main.c: 69: static unsigned long adsum = 0;
   367                           ;main.c: 70: static unsigned int admin = 0,admax = 0;
   368                           ;main.c: 71: static unsigned char adtimes = 0;
   369                           ;main.c: 72: volatile unsigned int ad_temp;
   370                           ;main.c: 73: ADCON1 = 0;
   371  001E  1683               	bsf	3,5	;RP0=1, select bank1
   372  001F  019F               	clrf	31	;volatile
   373                           
   374                           ;main.c: 74: ADCON0 = 0X41 | (adch << 2);
   375  0020  1283               	bcf	3,5	;RP0=0, select bank0
   376  0021  082A               	movf	ADC_Sample@adch,w
   377  0022  00F2               	movwf	??_ADC_Sample
   378  0023  3001               	movlw	1
   379  0024  1003               	clrc
   380  0025                     L1:	
   381  0025  0DF2               	rlf	??_ADC_Sample,f
   382  0026  3EFF               	addlw	-1
   383  0027  1003               	clrc
   384  0028  1D03               	skipz
   385  0029  2825               	goto	L1
   386  002A  0D72               	rlf	??_ADC_Sample,w
   387  002B  3841               	iorlw	65
   388  002C  009F               	movwf	31	;volatile
   389  002D  0000               	nop	;# 
   390  002E  0000               	nop	;# 
   391                           
   392                           ;main.c: 77: GODONE = 1;
   393  002F  1283               	bcf	3,5	;RP0=0, select bank0
   394  0030  1303               	bcf	3,6	;RP1=0, select bank0
   395  0031  149F               	bsf	31,1	;volatile
   396                           
   397                           ;main.c: 79: unsigned char i = 0;
   398  0032  01AB               	clrf	ADC_Sample@i
   399  0033                     l609:	
   400                           ;main.c: 80: while(GODONE)
   401                           
   402  0033  1C9F               	btfss	31,1	;volatile
   403  0034  2838               	goto	l1291
   404                           
   405                           ;main.c: 81: {
   406                           ;main.c: 82: if(0 == (--i))
   407  0035  0BAB               	decfsz	ADC_Sample@i,f
   408  0036  2833               	goto	l609
   409  0037  0008               	return
   410  0038                     l1291:	
   411                           
   412                           ;main.c: 84: }
   413                           ;main.c: 86: ad_temp=(ADRESH<<4)+(ADRESL>>4);
   414  0038  081E               	movf	30,w	;volatile
   415  0039  00AC               	movwf	ADC_Sample@ad_temp	;volatile
   416  003A  01AD               	clrf	ADC_Sample@ad_temp+1	;volatile
   417  003B  0EAC               	swapf	ADC_Sample@ad_temp,f	;volatile
   418  003C  0EAD               	swapf	ADC_Sample@ad_temp+1,f	;volatile
   419  003D  30F0               	movlw	240
   420  003E  05AD               	andwf	ADC_Sample@ad_temp+1,f	;volatile
   421  003F  082C               	movf	ADC_Sample@ad_temp,w	;volatile
   422  0040  390F               	andlw	15
   423  0041  04AD               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
   424  0042  30F0               	movlw	240
   425  0043  05AC               	andwf	ADC_Sample@ad_temp,f	;volatile
   426  0044  1683               	bsf	3,5	;RP0=1, select bank1
   427  0045  0E1E               	swapf	30,w	;volatile
   428  0046  390F               	andlw	15
   429  0047  1283               	bcf	3,5	;RP0=0, select bank0
   430  0048  07AC               	addwf	ADC_Sample@ad_temp,f	;volatile
   431  0049  1803               	skipnc
   432  004A  0AAD               	incf	ADC_Sample@ad_temp+1,f	;volatile
   433                           
   434                           ;main.c: 88: if(0 == admax)
   435  004B  0824               	movf	ADC_Sample@admax,w
   436  004C  0425               	iorwf	ADC_Sample@admax+1,w
   437  004D  1D03               	btfss	3,2
   438  004E  2851               	goto	l1299
   439                           
   440                           ;main.c: 89: {
   441                           ;main.c: 90: admax = ad_temp;
   442  004F  20C2               	fcall	PL4	;call to abstracted procedure
   443  0050  2863               	goto	l1305
   444  0051                     l1299:	
   445                           ;main.c: 92: }
   446                           
   447                           ;main.c: 91: admin = ad_temp;
   448                           
   449                           
   450                           ;main.c: 93: else if(ad_temp > admax)
   451  0051  082D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   452  0052  0225               	subwf	ADC_Sample@admax+1,w
   453  0053  1D03               	skipz
   454  0054  2857               	goto	u355
   455  0055  082C               	movf	ADC_Sample@ad_temp,w	;volatile
   456  0056  0224               	subwf	ADC_Sample@admax,w
   457  0057                     u355:	
   458  0057  1803               	skipnc
   459  0058  285B               	goto	l1303
   460                           
   461                           ;main.c: 94: admax = ad_temp;
   462  0059  20C2               	fcall	PL4	;call to abstracted procedure
   463  005A  2867               	goto	l615
   464  005B                     l1303:	
   465                           
   466                           ;main.c: 95: else if(ad_temp < admin)
   467  005B  0827               	movf	ADC_Sample@admin+1,w
   468  005C  022D               	subwf	ADC_Sample@ad_temp+1,w	;volatile
   469  005D  1D03               	skipz
   470  005E  2861               	goto	u365
   471  005F  0826               	movf	ADC_Sample@admin,w
   472  0060  022C               	subwf	ADC_Sample@ad_temp,w	;volatile
   473  0061                     u365:	
   474  0061  1803               	skipnc
   475  0062  2867               	goto	l615
   476  0063                     l1305:	
   477                           
   478                           ;main.c: 96: admin = ad_temp;
   479  0063  082D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   480  0064  00A7               	movwf	ADC_Sample@admin+1
   481  0065  082C               	movf	ADC_Sample@ad_temp,w	;volatile
   482  0066  00A6               	movwf	ADC_Sample@admin
   483  0067                     l615:	
   484                           
   485                           ;main.c: 98: adsum += ad_temp;
   486  0067  082C               	movf	ADC_Sample@ad_temp,w	;volatile
   487  0068  00F2               	movwf	??_ADC_Sample
   488  0069  082D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   489  006A  00F3               	movwf	??_ADC_Sample+1
   490  006B  01F4               	clrf	??_ADC_Sample+2
   491  006C  01F5               	clrf	??_ADC_Sample+3
   492  006D  0872               	movf	??_ADC_Sample,w
   493  006E  07A0               	addwf	ADC_Sample@adsum,f
   494  006F  0873               	movf	??_ADC_Sample+1,w
   495  0070  1103               	clrz
   496  0071  1803               	skipnc
   497  0072  3E01               	addlw	1
   498  0073  1D03               	btfss	3,2
   499  0074  07A1               	addwf	ADC_Sample@adsum+1,f
   500  0075  0874               	movf	??_ADC_Sample+2,w
   501  0076  1103               	clrz
   502  0077  1803               	skipnc
   503  0078  3E01               	addlw	1
   504  0079  1D03               	btfss	3,2
   505  007A  07A2               	addwf	ADC_Sample@adsum+2,f
   506  007B  0875               	movf	??_ADC_Sample+3,w
   507  007C  1103               	clrz
   508  007D  1803               	skipnc
   509  007E  3E01               	addlw	1
   510  007F  1D03               	btfss	3,2
   511  0080  07A3               	addwf	ADC_Sample@adsum+3,f
   512                           
   513                           ;main.c: 99: if(++adtimes >= 10)
   514  0081  300A               	movlw	10
   515  0082  0AF6               	incf	ADC_Sample@adtimes,f
   516  0083  0276               	subwf	ADC_Sample@adtimes,w
   517  0084  1C03               	skipc
   518  0085  0008               	return
   519                           
   520                           ;main.c: 100: {
   521                           ;main.c: 101: adsum -= admax;
   522  0086  0824               	movf	ADC_Sample@admax,w
   523  0087  00F2               	movwf	??_ADC_Sample
   524  0088  0825               	movf	ADC_Sample@admax+1,w
   525  0089  20B3               	fcall	PL2	;call to abstracted procedure
   526  008A  1C03               	skipc
   527  008B  0F75               	incfsz	??_ADC_Sample+3,w
   528  008C  02A3               	subwf	ADC_Sample@adsum+3,f
   529                           
   530                           ;main.c: 102: adsum -= admin;
   531  008D  0826               	movf	ADC_Sample@admin,w
   532  008E  00F2               	movwf	??_ADC_Sample
   533  008F  0827               	movf	ADC_Sample@admin+1,w
   534  0090  20B3               	fcall	PL2	;call to abstracted procedure
   535  0091  1C03               	skipc
   536  0092  0F75               	incfsz	??_ADC_Sample+3,w
   537  0093  02A3               	subwf	ADC_Sample@adsum+3,f
   538                           
   539                           ;main.c: 104: adresult = adsum >> 3;
   540  0094  0820               	movf	ADC_Sample@adsum,w
   541  0095  00F2               	movwf	??_ADC_Sample
   542  0096  0821               	movf	ADC_Sample@adsum+1,w
   543  0097  00F3               	movwf	??_ADC_Sample+1
   544  0098  0822               	movf	ADC_Sample@adsum+2,w
   545  0099  00F4               	movwf	??_ADC_Sample+2
   546  009A  0823               	movf	ADC_Sample@adsum+3,w
   547  009B  00F5               	movwf	??_ADC_Sample+3
   548  009C  3003               	movlw	3
   549  009D                     u415:	
   550  009D  1003               	clrc
   551  009E  0CF5               	rrf	??_ADC_Sample+3,f
   552  009F  0CF4               	rrf	??_ADC_Sample+2,f
   553  00A0  0CF3               	rrf	??_ADC_Sample+1,f
   554  00A1  0CF2               	rrf	??_ADC_Sample,f
   555  00A2  3EFF               	addlw	-1
   556  00A3  1D03               	skipz
   557  00A4  289D               	goto	u415
   558  00A5  0873               	movf	??_ADC_Sample+1,w
   559  00A6  00A9               	movwf	_adresult+1	;volatile
   560  00A7  0872               	movf	??_ADC_Sample,w
   561  00A8  00A8               	movwf	_adresult	;volatile
   562                           
   563                           ;main.c: 106: adsum = 0;
   564  00A9  01A0               	clrf	ADC_Sample@adsum
   565  00AA  01A1               	clrf	ADC_Sample@adsum+1
   566  00AB  01A2               	clrf	ADC_Sample@adsum+2
   567  00AC  01A3               	clrf	ADC_Sample@adsum+3
   568                           
   569                           ;main.c: 107: admin = 0;
   570  00AD  01A6               	clrf	ADC_Sample@admin
   571  00AE  01A7               	clrf	ADC_Sample@admin+1
   572                           
   573                           ;main.c: 108: admax = 0;
   574  00AF  01A4               	clrf	ADC_Sample@admax
   575  00B0  01A5               	clrf	ADC_Sample@admax+1
   576                           
   577                           ;main.c: 109: adtimes = 0;
   578  00B1  01F6               	clrf	ADC_Sample@adtimes
   579  00B2  0008               	return
   580  00B3                     __end_of_ADC_Sample:	
   581  00B3                     PL2:	
   582  00B3  00F3               	movwf	??_ADC_Sample+1
   583  00B4  01F4               	clrf	??_ADC_Sample+2
   584  00B5  01F5               	clrf	??_ADC_Sample+3
   585  00B6  0872               	movf	??_ADC_Sample,w
   586  00B7  02A0               	subwf	ADC_Sample@adsum,f
   587  00B8  0873               	movf	??_ADC_Sample+1,w
   588  00B9  1C03               	skipc
   589  00BA  0F73               	incfsz	??_ADC_Sample+1,w
   590  00BB  02A1               	subwf	ADC_Sample@adsum+1,f
   591  00BC  0874               	movf	??_ADC_Sample+2,w
   592  00BD  1C03               	skipc
   593  00BE  0F74               	incfsz	??_ADC_Sample+2,w
   594  00BF  02A2               	subwf	ADC_Sample@adsum+2,f
   595  00C0  0875               	movf	??_ADC_Sample+3,w
   596  00C1  0008               	return
   597  00C2                     __end_ofPL2:	
   598  00C2                     PL4:	
   599  00C2  082D               	movf	ADC_Sample@ad_temp+1,w	;volatile
   600  00C3  00A5               	movwf	ADC_Sample@admax+1
   601  00C4  082C               	movf	ADC_Sample@ad_temp,w	;volatile
   602  00C5  00A4               	movwf	ADC_Sample@admax
   603  00C6  0008               	return
   604  00C7                     __end_ofPL4:	
   605                           
   606                           	psect	text3
   607  00C7                     __ptext3:	
   608 ;; *************** function _ADC_Result *****************
   609 ;; Defined at:
   610 ;;		line 115 in file "C:\mcuproject\scm\zdt\S23_1171C_SOP14_\main.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  adch            1    wreg     unsigned char 
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  adch            1    3[COMMON] unsigned char 
   615 ;;  i               1    4[COMMON] unsigned char 
   616 ;; Return value:  Size  Location     Type
   617 ;;                  1    wreg      unsigned char 
   618 ;; Registers used:
   619 ;;		wreg, status,2, status,0
   620 ;; Tracked objects:
   621 ;;		On entry : 300/0
   622 ;;		On exit  : 300/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1
   625 ;;      Params:         0       0       0
   626 ;;      Locals:         2       0       0
   627 ;;      Temps:          1       0       0
   628 ;;      Totals:         3       0       0
   629 ;;Total ram usage:        3 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    1
   632 ;; This function calls:
   633 ;;		Nothing
   634 ;; This function is called by:
   635 ;;		_main
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           
   640                           ;psect for function _ADC_Result
   641  00C7                     _ADC_Result:	
   642                           
   643                           ;incstack = 0
   644                           ; Regs used in _ADC_Result: [wreg+status,2+status,0]
   645                           ;ADC_Result@adch stored from wreg
   646  00C7  00F3               	movwf	ADC_Result@adch
   647                           
   648                           ;main.c: 117: ADCON1 = 0;
   649  00C8  1683               	bsf	3,5	;RP0=1, select bank1
   650  00C9  019F               	clrf	31	;volatile
   651                           
   652                           ;main.c: 118: ADCON0 = 0X41 | (adch << 2);
   653  00CA  0873               	movf	ADC_Result@adch,w
   654  00CB  00F2               	movwf	??_ADC_Result
   655  00CC  3001               	movlw	1
   656  00CD  1003               	clrc
   657  00CE                     L2:	
   658  00CE  0DF2               	rlf	??_ADC_Result,f
   659  00CF  3EFF               	addlw	-1
   660  00D0  1003               	clrc
   661  00D1  1D03               	skipz
   662  00D2  28CE               	goto	L2
   663  00D3  0D72               	rlf	??_ADC_Result,w
   664  00D4  3841               	iorlw	65
   665  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   666  00D6  009F               	movwf	31	;volatile
   667  00D7  0000               	nop	;# 
   668  00D8  0000               	nop	;# 
   669                           
   670                           ;main.c: 121: GODONE = 1;
   671  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   672  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   673  00DB  149F               	bsf	31,1	;volatile
   674                           
   675                           ;main.c: 123: unsigned char i = 0;
   676  00DC  01F4               	clrf	ADC_Result@i
   677  00DD                     l622:	
   678                           ;main.c: 124: while(GODONE)
   679                           
   680  00DD  1C9F               	btfss	31,1	;volatile
   681  00DE  28E2               	goto	l1183
   682                           
   683                           ;main.c: 125: {
   684                           ;main.c: 126: if(0 == (--i))
   685  00DF  0BF4               	decfsz	ADC_Result@i,f
   686  00E0  28DD               	goto	l622
   687                           
   688                           ;main.c: 127: return 0;
   689  00E1  3400               	retlw	0
   690  00E2                     l1183:	
   691                           
   692                           ;main.c: 128: }
   693                           ;main.c: 129: return ADRESH;
   694  00E2  081E               	movf	30,w	;volatile
   695  00E3  0008               	return
   696  00E4                     __end_of_ADC_Result:	
   697                           
   698                           	psect	text4
   699  00E4                     __ptext4:	
   700 ;; *************** function _Timer0_Isr *****************
   701 ;; Defined at:
   702 ;;		line 481 in file "C:\mcuproject\scm\zdt\S23_1171C_SOP14_\main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1
   716 ;;      Params:         0       0       0
   717 ;;      Locals:         0       0       0
   718 ;;      Temps:          2       0       0
   719 ;;      Totals:         2       0       0
   720 ;;Total ram usage:        2 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		Interrupt level 1
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _Timer0_Isr
   731  00E4                     _Timer0_Isr:	
   732                           
   733                           ;main.c: 482: if (T0IF) {
   734  00E4  1D0B               	btfss	11,2	;volatile
   735  00E5  28F3               	goto	i1l1221
   736                           
   737                           ;main.c: 484: TMR0 += 155;
   738  00E6  309B               	movlw	155
   739  00E7  1283               	bcf	3,5	;RP0=0, select bank0
   740  00E8  1303               	bcf	3,6	;RP1=0, select bank0
   741  00E9  0781               	addwf	1,f	;volatile
   742                           
   743                           ;main.c: 487: T0IF = 0;
   744  00EA  110B               	bcf	11,2	;volatile
   745                           
   746                           ;main.c: 488: if(++intCount >= 100)
   747  00EB  3064               	movlw	100
   748  00EC  0AF8               	incf	_intCount,f
   749  00ED  0278               	subwf	_intCount,w
   750  00EE  1C03               	skipc
   751  00EF  28F3               	goto	i1l1221
   752                           
   753                           ;main.c: 489: {
   754                           ;main.c: 490: IntFlag = 1;
   755  00F0  01F7               	clrf	_IntFlag
   756  00F1  0AF7               	incf	_IntFlag,f
   757                           
   758                           ;main.c: 491: intCount = 0;
   759  00F2  01F8               	clrf	_intCount
   760  00F3                     i1l1221:	
   761                           
   762                           ;main.c: 492: }
   763                           ;main.c: 494: }
   764                           ;main.c: 496: if (RBIF) {
   765  00F3  180B               	btfsc	11,0	;volatile
   766                           
   767                           ;main.c: 497: RBIF = 0;
   768  00F4  100B               	bcf	11,0	;volatile
   769  00F5  0871               	movf	??_Timer0_Isr+1,w
   770  00F6  008A               	movwf	10
   771  00F7  0E70               	swapf	??_Timer0_Isr^(0+-128),w
   772  00F8  0083               	movwf	3
   773  00F9  0EFE               	swapf	126,f
   774  00FA  0E7E               	swapf	126,w
   775  00FB  0009               	retfie
   776  00FC                     __end_of_Timer0_Isr:	
   777  007E                     btemp	set	126	;btemp
   778  007E                     wtemp0	set	126
   779                           
   780                           	psect	intentry
   781  0004                     __pintentry:	
   782                           ;incstack = 0
   783                           ; Regs used in _Timer0_Isr: [wreg+status,2+status,0]
   784                           
   785  0004                     interrupt_function:	
   786  007E                     saved_w	set	btemp
   787  0004  00FE               	movwf	btemp
   788  0005  0E03               	swapf	3,w
   789  0006  00F0               	movwf	??_Timer0_Isr
   790  0007  080A               	movf	10,w
   791  0008  00F1               	movwf	??_Timer0_Isr+1
   792  0009  28E4               	ljmp	_Timer0_Isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       9
    BANK0            80      4      14
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Sample

Critical Paths under _Timer0_Isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_Sample

Critical Paths under _Timer0_Isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_Isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     321
                         _ADC_Result
                         _ADC_Sample
                            _InitSys
 ---------------------------------------------------------------------------------
 (1) _InitSys                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                           8     8      0     291
                                              2 COMMON     4     4      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Result                                           3     3      0      30
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Timer0_Isr                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Result
   _ADC_Sample
   _InitSys

 _Timer0_Isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      17       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       E       5       17.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
DATA                 0      0      17       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 25 15:11:44 2021

                     PL2 00B3                       PL4 00C2                      l622 00DD  
                    l615 0067                      l609 0033                      l638 00FD  
                    u415 009D                      u355 0057                      u365 0061  
    __size_of_ADC_Sample 0097      __size_of_ADC_Result 001D                     l1303 005B  
                   l1305 0063                     l1183 00E2                     l1291 0038  
                   l1299 0051                     _T0IF 005A                     _RBIF 0058  
                   _TMR0 0001                     _main 00FC                     btemp 007E  
                   start 000A          __end_of_InitSys 011B                    ?_main 0070  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000B             __end_of_main 010D                   ??_main 0076  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E                   _ANSELH 0189                   _GODONE 00F9  
                 i1l1221 00F3                   _INTCON 000B                   _OSCCON 008F  
           ??_ADC_Sample 0072                   _TRISB5 0435             ??_ADC_Result 0072  
              ??_InitSys 0072               _Timer0_Isr 00E4       __end_of_ADC_Sample 00B3  
     __end_of_ADC_Result 00E4                   saved_w 007E  __end_of__initialization 001A  
         __pcstackCOMMON 0070               __end_ofPL2 00C2               __end_ofPL4 00C7  
             __pbssBANK0 0020              ?_Timer0_Isr 0070               __pmaintext 00FC  
             __pintentry 0004                  _IntFlag 0077                  _InitSys 010D  
        ADC_Sample@admax 0024          ADC_Sample@admin 0026          ADC_Sample@adsum 0020  
                __ptext0 0000                  __ptext1 010D                  __ptext2 001C  
                __ptext3 00C7                  __ptext4 00E4      __size_of_Timer0_Isr 0018  
   end_of_initialization 001A      start_initialization 000B             ??_Timer0_Isr 0070  
      ADC_Sample@ad_temp 002C        ADC_Sample@adtimes 0076              __pbssCOMMON 0076  
              ___latbits 0000            __pcstackBANK0 002A       __end_of_Timer0_Isr 00FC  
               ?_InitSys 0070           ADC_Sample@adch 002A              ADC_Sample@i 002B  
      interrupt_function 0004              ADC_Result@i 0074           ADC_Result@adch 0073  
             _ADC_Sample 001C               _ADC_Result 00C7         __size_of_InitSys 000E  
               _adresult 0028                 _intCount 0078            __size_of_main 0011  
               intlevel1 0000              ?_ADC_Sample 0070              ?_ADC_Result 0070  
             _OPTION_REG 0081  
