

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 07 09:13:19 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	swtext1,local,class=CONST,delta=2
    36                           	psect	pa_nodes0,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F887 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	strings
    75  05C6                     __pstrings:	
    76  05C6                     stringtab:	
    77  05C6                     __stringtab:	
    78  05C6                     stringcode:	
    79                           ;	String table - string pointers are 1 byte each
    80                           
    81  05C6                     stringdir:	
    82  05C6  3005               	movlw	high stringdir
    83  05C7  008A               	movwf	10
    84  05C8  0804               	movf	4,w
    85  05C9  0A84               	incf	4,f
    86  05CA  0782               	addwf	2,f
    87  05CB                     __stringbase:	
    88  05CB  3400               	retlw	0
    89  05CC                     __end_of__stringtab:	
    90  05CC                     _numArray:	
    91  05CC  343F               	retlw	63
    92  05CD  3406               	retlw	6
    93  05CE  345B               	retlw	91
    94  05CF  344F               	retlw	79
    95  05D0  3466               	retlw	102
    96  05D1  346D               	retlw	109
    97  05D2  347D               	retlw	125
    98  05D3  3407               	retlw	7
    99  05D4  347F               	retlw	127
   100  05D5  346F               	retlw	111
   101  05D6  3438               	retlw	56
   102  05D7  3476               	retlw	118
   103  05D8                     __end_of_numArray:	
   104                           
   105                           	psect	nvBANK0
   106  0064                     __pnvBANK0:	
   107  0064                     _baiweiNum:	
   108  0064                     	ds	1
   109  0065                     _geweiNum:	
   110  0065                     	ds	1
   111  0066                     _shiweiNum:	
   112  0066                     	ds	1
   113  0067                     _firstTime:	
   114  0067                     	ds	1
   115  001D                     _PWMCON2	set	29
   116  0018                     _PWMTH	set	24
   117  0017                     _PWMTL	set	23
   118  0016                     _PWMCON1	set	22
   119  0015                     _PWMCON0	set	21
   120  0014                     _OSCCON	set	20
   121  0013                     _T2CON	set	19
   122  0011                     _PR2	set	17
   123  000E                     _PIE1	set	14
   124  000D                     _PIR1	set	13
   125  000B                     _INTCON	set	11
   126  0009                     _IOCB	set	9
   127  0008                     _WPUB	set	8
   128  0006                     _PORTB	set	6
   129  0005                     _TRISB	set	5
   130  0001                     _OPTION_REG	set	1
   131  0071                     _TMR2IE	set	113
   132  0073                     _RAIE	set	115
   133  0069                     _TMR2IF	set	105
   134  006B                     _RAIF	set	107
   135  0058                     _RBIF	set	88
   136  005B                     _RBIE	set	91
   137  005E                     _PEIE	set	94
   138  005F                     _GIE	set	95
   139  0033                     _RB3	set	51
   140  0035                     _RB5	set	53
   141  009E                     _PWMD23H	set	158
   142  009D                     _PWM23DT	set	157
   143  009B                     _PWMD2L	set	155
   144  0099                     _ADRESH	set	153
   145  0098                     _ADRESL	set	152
   146  0096                     _ADCON1	set	150
   147  0095                     _ADCON0	set	149
   148  0094                     _ANSEL1	set	148
   149  0093                     _ANSEL0	set	147
   150  0089                     _IOCA	set	137
   151  0088                     _WPUA	set	136
   152  0087                     _WPDA	set	135
   153  0086                     _PORTA	set	134
   154  0085                     _TRISA	set	133
   155  04B2                     _LDO_EN	set	1202
   156  04B6                     _CHS4	set	1206
   157  04A9                     _GODONE	set	1193
   158  0432                     _RA2	set	1074
   159  0433                     _RA3	set	1075
   160  0434                     _RA4	set	1076
   161  0435                     _RA5	set	1077
   162                           
   163                           	psect	cinit
   164  000D                     start_initialization:	
   165                           ; #config settings
   166                           
   167  000D                     __initialization:	
   168  000D  3047               	movlw	low __pbssBANK0
   169                           
   170                           ; Clear objects allocated to COMMON
   171  000E  01F8               	clrf	__pbssCOMMON& (0+127)
   172  000F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   173  0010  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   174                           
   175                           ; Clear objects allocated to BANK0
   176  0011  1383               	bcf	3,7	;select IRP bank0
   177  0012  0084               	movwf	4
   178  0013  3064               	movlw	low (__pbssBANK0+29)
   179  0014  2610               	fcall	clear_ram0
   180  0015                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  0015                     __end_of__initialization:	
   184  0015  0183               	clrf	3
   185  0016  2C4C               	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	bssCOMMON
   188  0078                     __pbssCOMMON:	
   189  0078                     _showBatStep:	
   190  0078                     	ds	1
   191  0079                     _workStep:	
   192  0079                     	ds	1
   193  007A                     _chrgFlag:	
   194  007A                     	ds	1
   195                           
   196                           	psect	bssBANK0
   197  0047                     __pbssBANK0:	
   198  0047                     _count30s:	
   199  0047                     	ds	2
   200  0049                     _count900s:	
   201  0049                     	ds	2
   202  004B                     _lowShanTime:	
   203  004B                     	ds	2
   204  004D                     _power_ad:	
   205  004D                     	ds	2
   206  004F                     _result:	
   207  004F                     	ds	2
   208  0051                     _lowBatTime:	
   209  0051                     	ds	1
   210  0052                     _curBatStep:	
   211  0052                     	ds	1
   212  0053                     _motorPwmFlag:	
   213  0053                     	ds	1
   214  0054                     _sleepTime:	
   215  0054                     	ds	1
   216  0055                     _lowBatFlag:	
   217  0055                     	ds	1
   218  0056                     _ledCntTime:	
   219  0056                     	ds	1
   220  0057                     _showBatTime:	
   221  0057                     	ds	1
   222  0058                     _longPressFlag:	
   223  0058                     	ds	1
   224  0059                     _keyCount:	
   225  0059                     	ds	1
   226  005A                     _ledCnt:	
   227  005A                     	ds	1
   228  005B                     _chrgFullTime:	
   229  005B                     	ds	1
   230  005C                     _intCount10:	
   231  005C                     	ds	1
   232  005D                     _chrgFullFlag:	
   233  005D                     	ds	1
   234  005E                     _IntFlag:	
   235  005E                     	ds	1
   236  005F                     _count1s:	
   237  005F                     	ds	1
   238  0060                     _intCount:	
   239  0060                     	ds	1
   240  0061                     _test_adc:	
   241  0061                     	ds	1
   242  0062                     _adresult:	
   243  0062                     	ds	2
   244                           
   245                           	psect	clrtext
   246  0610                     clear_ram0:	
   247                           ;	Called with FSR containing the base address, and
   248                           ;	W with the last address+1
   249                           
   250  0610  0064               	clrwdt	;clear the watchdog before getting into this loop
   251  0611                     clrloop0:	
   252  0611  0180               	clrf	0	;clear RAM location pointed to by FSR
   253  0612  0A84               	incf	4,f	;increment pointer
   254  0613  0604               	xorwf	4,w	;XOR with final address
   255  0614  1903               	btfsc	3,2	;have we reached the end yet?
   256  0615  3400               	retlw	0	;all done for this memory range, return
   257  0616  0604               	xorwf	4,w	;XOR again to restore value
   258  0617  2E11               	goto	clrloop0	;do the next byte
   259                           
   260                           	psect	cstackCOMMON
   261  0070                     __pcstackCOMMON:	
   262  0070                     ?_ledShow:	
   263  0070                     ??_ledShow:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_Init_System:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_AD_Init:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_chrgCtr:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_checkBatAD:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_setBatStep:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_keyCtr:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_workCtr:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_Sleep_Mode:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_pwmStop:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_pwmInit:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_Isr_Timer:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ??_Isr_Timer:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_main:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_keyRead:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310  0070                     	ds	3
   311  0073                     ??_Init_System:	
   312  0073                     ??_AD_Init:	
   313                           ; 1 bytes @ 0x3
   314                           
   315  0073                     ??_chrgCtr:	
   316                           ; 1 bytes @ 0x3
   317                           
   318  0073                     ??_Sleep_Mode:	
   319                           ; 1 bytes @ 0x3
   320                           
   321  0073                     ??_pwmStop:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ??_pwmInit:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ?_ADC_Sample:	
   328                           ; 1 bytes @ 0x3
   329                           
   330  0073                     ??_keyRead:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ?___lbdiv:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ?___lbmod:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ?___lwdiv:	
   340                           ; 1 bytes @ 0x3
   341                           
   342  0073                     ?___ftpack:	
   343                           ; 2 bytes @ 0x3
   344                           
   345  0073                     keyRead@keyStatus:	
   346                           ; 3 bytes @ 0x3
   347                           
   348  0073                     ADC_Sample@adldo:	
   349                           ; 1 bytes @ 0x3
   350                           
   351  0073                     ___lbdiv@divisor:	
   352                           ; 1 bytes @ 0x3
   353                           
   354  0073                     ___lbmod@divisor:	
   355                           ; 1 bytes @ 0x3
   356                           
   357  0073                     ___lwdiv@divisor:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     ___ftpack@arg:	
   361                           ; 2 bytes @ 0x3
   362                           
   363                           
   364                           ; 3 bytes @ 0x3
   365  0073                     	ds	1
   366  0074                     ??_keyCtr:	
   367  0074                     ??_ADC_Sample:	
   368                           ; 1 bytes @ 0x4
   369                           
   370  0074                     ??___lbdiv:	
   371                           ; 1 bytes @ 0x4
   372                           
   373  0074                     ??___lbmod:	
   374                           ; 1 bytes @ 0x4
   375                           
   376  0074                     keyCtr@kclick:	
   377                           ; 1 bytes @ 0x4
   378                           
   379  0074                     ___lbdiv@dividend:	
   380                           ; 1 bytes @ 0x4
   381                           
   382                           
   383                           ; 1 bytes @ 0x4
   384  0074                     	ds	1
   385  0075                     ___lbdiv@counter:	
   386  0075                     ___lbmod@dividend:	
   387                           ; 1 bytes @ 0x5
   388                           
   389  0075                     ___lwdiv@dividend:	
   390                           ; 1 bytes @ 0x5
   391                           
   392                           
   393                           ; 2 bytes @ 0x5
   394  0075                     	ds	1
   395  0076                     ___ftpack@exp:	
   396  0076                     ___lbdiv@quotient:	
   397                           ; 1 bytes @ 0x6
   398                           
   399  0076                     ___lbmod@counter:	
   400                           ; 1 bytes @ 0x6
   401                           
   402                           
   403                           ; 1 bytes @ 0x6
   404  0076                     	ds	1
   405  0077                     ??_setBatStep:	
   406  0077                     ??___lwdiv:	
   407                           ; 1 bytes @ 0x7
   408                           
   409  0077                     ___ftpack@sign:	
   410                           ; 1 bytes @ 0x7
   411                           
   412  0077                     ___lbmod@rem:	
   413                           ; 1 bytes @ 0x7
   414                           
   415                           
   416                           ; 1 bytes @ 0x7
   417  0077                     	ds	1
   418  0078                     ??_workCtr:	
   419  0078                     ??_main:	
   420                           ; 1 bytes @ 0x8
   421                           
   422  0078                     ??___lwtoft:	
   423                           ; 1 bytes @ 0x8
   424                           
   425                           
   426                           	psect	cstackBANK0
   427  0020                     __pcstackBANK0:	
   428                           ; 1 bytes @ 0x8
   429                           
   430  0020                     ??___ftpack:	
   431  0020                     ADC_Sample@j:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ___lwdiv@counter:	
   435                           ; 1 bytes @ 0x0
   436                           
   437                           
   438                           ; 1 bytes @ 0x0
   439  0020                     	ds	1
   440  0021                     ADC_Sample@adch:	
   441  0021                     ___lwdiv@quotient:	
   442                           ; 1 bytes @ 0x1
   443                           
   444                           
   445                           ; 2 bytes @ 0x1
   446  0021                     	ds	1
   447  0022                     ADC_Sample@i:	
   448                           
   449                           ; 1 bytes @ 0x2
   450  0022                     	ds	1
   451  0023                     ?___lwtoft:	
   452  0023                     ___lwtoft@c:	
   453                           ; 3 bytes @ 0x3
   454                           
   455  0023                     ADC_Sample@adsum:	
   456                           ; 2 bytes @ 0x3
   457                           
   458                           
   459                           ; 4 bytes @ 0x3
   460  0023                     	ds	3
   461  0026                     ?___ftdiv:	
   462  0026                     ___ftdiv@f2:	
   463                           ; 3 bytes @ 0x6
   464                           
   465                           
   466                           ; 3 bytes @ 0x6
   467  0026                     	ds	1
   468  0027                     ADC_Sample@admin:	
   469                           
   470                           ; 2 bytes @ 0x7
   471  0027                     	ds	2
   472  0029                     ADC_Sample@admax:	
   473  0029                     ___ftdiv@f1:	
   474                           ; 2 bytes @ 0x9
   475                           
   476                           
   477                           ; 3 bytes @ 0x9
   478  0029                     	ds	2
   479  002B                     ADC_Sample@ad_temp:	
   480                           
   481                           ; 2 bytes @ 0xB
   482  002B                     	ds	1
   483  002C                     ??___ftdiv:	
   484                           
   485                           ; 1 bytes @ 0xC
   486  002C                     	ds	3
   487  002F                     ___ftdiv@cntr:	
   488                           
   489                           ; 1 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     ___ftdiv@f3:	
   492                           
   493                           ; 3 bytes @ 0x10
   494  0030                     	ds	3
   495  0033                     ___ftdiv@exp:	
   496                           
   497                           ; 1 bytes @ 0x13
   498  0033                     	ds	1
   499  0034                     ___ftdiv@sign:	
   500                           
   501                           ; 1 bytes @ 0x14
   502  0034                     	ds	1
   503  0035                     ?___fttol:	
   504  0035                     ___fttol@f1:	
   505                           ; 4 bytes @ 0x15
   506                           
   507                           
   508                           ; 3 bytes @ 0x15
   509  0035                     	ds	4
   510  0039                     ??___fttol:	
   511                           
   512                           ; 1 bytes @ 0x19
   513  0039                     	ds	3
   514  003C                     ___fttol@sign1:	
   515                           
   516                           ; 1 bytes @ 0x1C
   517  003C                     	ds	1
   518  003D                     ___fttol@lval:	
   519                           
   520                           ; 4 bytes @ 0x1D
   521  003D                     	ds	4
   522  0041                     ___fttol@exp1:	
   523                           
   524                           ; 1 bytes @ 0x21
   525  0041                     	ds	1
   526  0042                     ??_checkBatAD:	
   527                           
   528                           ; 1 bytes @ 0x22
   529  0042                     	ds	1
   530  0043                     checkBatAD@power_temp:	
   531                           
   532                           ; 4 bytes @ 0x23
   533  0043                     	ds	4
   534                           
   535                           	psect	maintext
   536  044C                     __pmaintext:	
   537 ;;
   538 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   539 ;;
   540 ;; *************** function _main *****************
   541 ;; Defined at:
   542 ;;		line 117 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : B00/0
   553 ;;		On exit  : 100/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1
   556 ;;      Params:         0       0       0
   557 ;;      Locals:         0       0       0
   558 ;;      Temps:          0       0       0
   559 ;;      Totals:         0       0       0
   560 ;;Total ram usage:        0 bytes
   561 ;; Hardware stack levels required when called:    5
   562 ;; This function calls:
   563 ;;		_AD_Init
   564 ;;		_Init_System
   565 ;;		_Sleep_Mode
   566 ;;		_checkBatAD
   567 ;;		_chrgCtr
   568 ;;		_keyCtr
   569 ;;		_setBatStep
   570 ;;		_workCtr
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _main
   578  044C                     _main:	
   579                           
   580                           ;main.c: 119: Init_System();
   581                           
   582                           ;incstack = 0
   583                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   584  044C  25AC               	fcall	_Init_System
   585                           
   586                           ;main.c: 120: AD_Init();
   587  044D  2618               	fcall	_AD_Init
   588                           
   589                           ;main.c: 121: shiweiNum = geweiNum = numArray[8];
   590  044E  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   591  044F  0084               	movwf	4
   592  0450  25C6               	fcall	stringdir
   593  0451  1283               	bcf	3,5	;RP0=0, select bank0
   594  0452  00E5               	movwf	_geweiNum
   595  0453  00E6               	movwf	_shiweiNum
   596  0454  30C8               	movlw	200
   597                           
   598                           ;main.c: 122: baiweiNum = 1;
   599  0455  01E4               	clrf	_baiweiNum
   600  0456  0AE4               	incf	_baiweiNum,f
   601                           
   602                           ;main.c: 123: firstTime = 200;
   603  0457  00E7               	movwf	_firstTime
   604  0458                     l617:	
   605                           ;main.c: 124: while (1)
   606                           
   607  0458  0064               	clrwdt	;# 
   608                           
   609                           ;main.c: 127: if(intCount10 > 10)
   610  0459  300B               	movlw	11
   611  045A  1283               	bcf	3,5	;RP0=0, select bank0
   612  045B  025C               	subwf	_intCount10,w
   613  045C  1803               	btfsc	3,0
   614                           
   615                           ;main.c: 128: {
   616                           ;main.c: 129: intCount10 = 0;
   617  045D  01DC               	clrf	_intCount10
   618                           
   619                           ;main.c: 130: }
   620                           ;main.c: 131: if(!IntFlag)
   621  045E  085E               	movf	_IntFlag,w
   622  045F  1903               	btfsc	3,2
   623  0460  2C58               	goto	l617
   624                           
   625                           ;main.c: 133: IntFlag = 0;
   626  0461  01DE               	clrf	_IntFlag
   627                           
   628                           ;main.c: 134: chrgCtr();
   629  0462  2513               	fcall	_chrgCtr
   630                           
   631                           ;main.c: 135: checkBatAD();
   632  0463  2489               	fcall	_checkBatAD
   633                           
   634                           ;main.c: 136: setBatStep();
   635  0464  226F               	fcall	_setBatStep
   636                           
   637                           ;main.c: 137: if(lowBatFlag == 0 && firstTime == 0)
   638  0465  0855               	movf	_lowBatFlag,w
   639  0466  1D03               	btfss	3,2
   640  0467  2C6C               	goto	l2957
   641  0468  0867               	movf	_firstTime,w
   642  0469  1D03               	btfss	3,2
   643  046A  2C6C               	goto	l2957
   644                           
   645                           ;main.c: 138: {
   646                           ;main.c: 139: keyCtr();
   647  046B  24EA               	fcall	_keyCtr
   648  046C                     l2957:	
   649                           
   650                           ;main.c: 140: }
   651                           ;main.c: 141: workCtr();
   652  046C  20FD               	fcall	_workCtr
   653                           
   654                           ;main.c: 142: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 )
   655  046D  087A               	movf	_chrgFlag,w
   656  046E  1D03               	btfss	3,2
   657  046F  2C87               	goto	l2977
   658  0470  0879               	movf	_workStep,w
   659  0471  1D03               	btfss	3,2
   660  0472  2C87               	goto	l2977
   661  0473  0859               	movf	_keyCount,w
   662  0474  1D03               	btfss	3,2
   663  0475  2C87               	goto	l2977
   664  0476  0867               	movf	_firstTime,w
   665  0477  1D03               	btfss	3,2
   666  0478  2C87               	goto	l2977
   667  0479  0857               	movf	_showBatTime,w
   668  047A  1D03               	btfss	3,2
   669  047B  2C87               	goto	l2977
   670  047C  30C8               	movlw	200
   671                           
   672                           ;main.c: 143: {
   673                           ;main.c: 144: baiweiNum = 0;
   674  047D  01E4               	clrf	_baiweiNum
   675                           
   676                           ;main.c: 145: shiweiNum = geweiNum = 0;
   677  047E  01E5               	clrf	_geweiNum
   678  047F  01E6               	clrf	_shiweiNum
   679                           
   680                           ;main.c: 146: if(++sleepTime >= 200)
   681  0480  0AD4               	incf	_sleepTime,f
   682  0481  0254               	subwf	_sleepTime,w
   683  0482  1C03               	skipc
   684  0483  2C58               	goto	l617
   685                           
   686                           ;main.c: 147: {
   687                           ;main.c: 148: sleepTime = 0;
   688  0484  01D4               	clrf	_sleepTime
   689                           
   690                           ;main.c: 149: Sleep_Mode();
   691  0485  23C8               	fcall	_Sleep_Mode
   692  0486  2C58               	goto	l617
   693  0487                     l2977:	
   694                           
   695                           ;main.c: 152: else
   696                           ;main.c: 153: {
   697                           ;main.c: 154: sleepTime = 0;
   698  0487  01D4               	clrf	_sleepTime
   699  0488  2C58               	goto	l617
   700  0489                     __end_of_main:	
   701                           
   702                           	psect	text1
   703  00FD                     __ptext1:	
   704 ;; *************** function _workCtr *****************
   705 ;; Defined at:
   706 ;;		line 446 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 100/0
   717 ;;		On exit  : 100/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1
   720 ;;      Params:         0       0       0
   721 ;;      Locals:         0       0       0
   722 ;;      Temps:          0       0       0
   723 ;;      Totals:         0       0       0
   724 ;;Total ram usage:        0 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    3
   727 ;; This function calls:
   728 ;;		___lbdiv
   729 ;;		___lbmod
   730 ;;		_pwmInit
   731 ;;		_pwmStop
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _workCtr
   739  00FD                     _workCtr:	
   740                           
   741                           ;main.c: 448: if(workStep > 0 && count1s == 0 && ++count900s >= 900)
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   745  00FD  0879               	movf	_workStep,w
   746  00FE  1903               	btfsc	3,2
   747  00FF  2910               	goto	l2509
   748  0100  085F               	movf	_count1s,w
   749  0101  1D03               	btfss	3,2
   750  0102  2910               	goto	l2509
   751  0103  0AC9               	incf	_count900s,f
   752  0104  1903               	skipnz
   753  0105  0ACA               	incf	_count900s+1,f
   754  0106  3003               	movlw	3
   755  0107  024A               	subwf	_count900s+1,w
   756  0108  3084               	movlw	132
   757  0109  1903               	skipnz
   758  010A  0249               	subwf	_count900s,w
   759  010B  1C03               	skipc
   760  010C  2910               	goto	l2509
   761                           
   762                           ;main.c: 449: {
   763                           ;main.c: 450: count900s = 0;
   764  010D  01C9               	clrf	_count900s
   765  010E  01CA               	clrf	_count900s+1
   766                           
   767                           ;main.c: 451: workStep = 0;
   768  010F  01F9               	clrf	_workStep
   769  0110                     l2509:	
   770                           
   771                           ;main.c: 452: }
   772                           ;main.c: 453: if(lowShanTime > 0)
   773  0110  084B               	movf	_lowShanTime,w
   774  0111  044C               	iorwf	_lowShanTime+1,w
   775  0112  1903               	btfsc	3,2
   776  0113  291E               	goto	l2515
   777                           
   778                           ;main.c: 454: {
   779                           ;main.c: 455: if(--lowShanTime == 0)
   780  0114  3001               	movlw	1
   781  0115  02CB               	subwf	_lowShanTime,f
   782  0116  3000               	movlw	0
   783  0117  1C03               	skipc
   784  0118  03CC               	decf	_lowShanTime+1,f
   785  0119  02CC               	subwf	_lowShanTime+1,f
   786  011A  084B               	movf	_lowShanTime,w
   787  011B  044C               	iorwf	_lowShanTime+1,w
   788  011C  1903               	btfsc	3,2
   789                           
   790                           ;main.c: 456: {
   791                           ;main.c: 457: workStep = 0;
   792  011D  01F9               	clrf	_workStep
   793  011E                     l2515:	
   794                           
   795                           ;main.c: 458: }
   796                           ;main.c: 459: }
   797                           ;main.c: 460: if(showBatTime > 0)
   798  011E  0857               	movf	_showBatTime,w
   799  011F  1D03               	btfss	3,2
   800                           
   801                           ;main.c: 461: {
   802                           ;main.c: 462: showBatTime--;
   803  0120  03D7               	decf	_showBatTime,f
   804                           
   805                           ;main.c: 463: }
   806                           ;main.c: 464: if(firstTime > 0)
   807  0121  0867               	movf	_firstTime,w
   808  0122  1903               	btfsc	3,2
   809  0123  2936               	goto	l2533
   810                           
   811                           ;main.c: 465: {
   812                           ;main.c: 466: firstTime--;
   813  0124  03E7               	decf	_firstTime,f
   814                           
   815                           ;main.c: 467: if(showBatStep < curBatStep)
   816  0125  0852               	movf	_curBatStep,w
   817  0126  0278               	subwf	_showBatStep,w
   818  0127  1803               	skipnc
   819  0128  292B               	goto	l2527
   820                           
   821                           ;main.c: 468: {
   822                           ;main.c: 469: showBatStep = curBatStep;
   823  0129  0852               	movf	_curBatStep,w
   824  012A  00F8               	movwf	_showBatStep
   825  012B                     l2527:	
   826                           
   827                           ;main.c: 470: }
   828                           ;main.c: 471: shiweiNum = numArray[8];
   829  012B  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   830  012C  0084               	movwf	4
   831  012D  25C6               	fcall	stringdir
   832  012E  00E6               	movwf	_shiweiNum
   833                           
   834                           ;main.c: 472: geweiNum = numArray[8];
   835  012F  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   836  0130  0084               	movwf	4
   837  0131  25C6               	fcall	stringdir
   838  0132  00E5               	movwf	_geweiNum
   839                           
   840                           ;main.c: 473: baiweiNum = 1;
   841  0133  01E4               	clrf	_baiweiNum
   842  0134  0AE4               	incf	_baiweiNum,f
   843                           
   844                           ;main.c: 474: }
   845  0135  2979               	goto	l2581
   846  0136                     l2533:	
   847                           
   848                           ;main.c: 475: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   849  0136  0879               	movf	_workStep,w
   850  0137  1903               	btfsc	3,2
   851  0138  2941               	goto	l712
   852  0139  084B               	movf	_lowShanTime,w
   853  013A  044C               	iorwf	_lowShanTime+1,w
   854  013B  1903               	btfsc	3,2
   855  013C  2949               	goto	l2545
   856  013D  3032               	movlw	50
   857  013E  025F               	subwf	_count1s,w
   858  013F  1803               	skipnc
   859  0140  2949               	goto	l2545
   860  0141                     l712:	
   861                           
   862                           ;main.c: 476: {
   863                           ;main.c: 477: PORTB |= 0x10;
   864  0141  1606               	bsf	6,4	;volatile
   865                           
   866                           ;main.c: 478: shiweiNum = 0;
   867  0142  01E6               	clrf	_shiweiNum
   868                           
   869                           ;main.c: 479: geweiNum = 0;
   870  0143  01E5               	clrf	_geweiNum
   871                           
   872                           ;main.c: 480: baiweiNum = 0;
   873  0144  01E4               	clrf	_baiweiNum
   874                           
   875                           ;main.c: 481: pwmStop();
   876  0145  261F               	fcall	_pwmStop
   877                           
   878                           ;main.c: 482: count900s = 0;
   879  0146  01C9               	clrf	_count900s
   880  0147  01CA               	clrf	_count900s+1
   881                           
   882                           ;main.c: 483: }
   883  0148  2979               	goto	l2581
   884  0149                     l2545:	
   885                           
   886                           ;main.c: 484: else if(workStep == 1)
   887  0149  0B79               	decfsz	_workStep,w
   888  014A  2960               	goto	l2563
   889                           
   890                           ;main.c: 485: {
   891                           ;main.c: 486: PORTB &= 0xEF;
   892  014B  1206               	bcf	6,4	;volatile
   893                           
   894                           ;main.c: 487: if(chrgFlag == 0)
   895  014C  087A               	movf	_chrgFlag,w
   896  014D  1D03               	btfss	3,2
   897  014E  2958               	goto	l2555
   898                           
   899                           ;main.c: 488: {
   900                           ;main.c: 489: shiweiNum = numArray[10];
   901  014F  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   902  0150  0084               	movwf	4
   903  0151  25C6               	fcall	stringdir
   904  0152  00E6               	movwf	_shiweiNum
   905                           
   906                           ;main.c: 490: geweiNum = numArray[10];
   907  0153  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
   908  0154  0084               	movwf	4
   909  0155  25C6               	fcall	stringdir
   910  0156  00E5               	movwf	_geweiNum
   911                           
   912                           ;main.c: 491: baiweiNum = 0;
   913  0157  01E4               	clrf	_baiweiNum
   914  0158                     l2555:	
   915                           
   916                           ;main.c: 492: }
   917                           ;main.c: 493: if(motorPwmFlag == 0)
   918  0158  0853               	movf	_motorPwmFlag,w
   919  0159  1D03               	btfss	3,2
   920  015A  295C               	goto	l2559
   921                           
   922                           ;main.c: 494: {
   923                           ;main.c: 495: pwmInit();
   924  015B  25D8               	fcall	_pwmInit
   925  015C                     l2559:	
   926                           
   927                           ;main.c: 496: }
   928                           ;main.c: 497: PWMD23H = 0X00;
   929  015C  1683               	bsf	3,5	;RP0=1, select bank1
   930  015D  019E               	clrf	30	;volatile
   931                           
   932                           ;main.c: 498: PWMD2L = 60;
   933  015E  303C               	movlw	60
   934  015F  2978               	goto	L1
   935  0160                     l2563:	
   936                           ;main.c: 499: }
   937                           
   938                           
   939                           ;main.c: 500: else if(workStep == 2)
   940  0160  3002               	movlw	2
   941  0161  0679               	xorwf	_workStep,w
   942  0162  1D03               	btfss	3,2
   943  0163  2979               	goto	l2581
   944                           
   945                           ;main.c: 501: {
   946                           ;main.c: 502: PORTB &= 0xEF;
   947  0164  1206               	bcf	6,4	;volatile
   948                           
   949                           ;main.c: 503: if(chrgFlag == 0)
   950  0165  087A               	movf	_chrgFlag,w
   951  0166  1D03               	btfss	3,2
   952  0167  2971               	goto	l2573
   953                           
   954                           ;main.c: 504: {
   955                           ;main.c: 505: shiweiNum = numArray[11];
   956  0168  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
   957  0169  0084               	movwf	4
   958  016A  25C6               	fcall	stringdir
   959  016B  00E6               	movwf	_shiweiNum
   960                           
   961                           ;main.c: 506: geweiNum = numArray[11];
   962  016C  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
   963  016D  0084               	movwf	4
   964  016E  25C6               	fcall	stringdir
   965  016F  00E5               	movwf	_geweiNum
   966                           
   967                           ;main.c: 507: baiweiNum = 0;
   968  0170  01E4               	clrf	_baiweiNum
   969  0171                     l2573:	
   970                           
   971                           ;main.c: 508: }
   972                           ;main.c: 509: if(motorPwmFlag == 0)
   973  0171  0853               	movf	_motorPwmFlag,w
   974  0172  1D03               	btfss	3,2
   975  0173  2975               	goto	l2577
   976                           
   977                           ;main.c: 510: {
   978                           ;main.c: 511: pwmInit();
   979  0174  25D8               	fcall	_pwmInit
   980  0175                     l2577:	
   981                           
   982                           ;main.c: 512: }
   983                           ;main.c: 513: PWMD23H = 0X00;
   984  0175  1683               	bsf	3,5	;RP0=1, select bank1
   985  0176  019E               	clrf	30	;volatile
   986                           
   987                           ;main.c: 514: PWMD2L = 99;
   988  0177  3063               	movlw	99
   989  0178                     L1:	
   990  0178  009B               	movwf	27	;volatile
   991  0179                     l2581:	
   992                           
   993                           ;main.c: 516: }
   994                           ;main.c: 517: if(chrgFlag || showBatTime > 0)
   995  0179  087A               	movf	_chrgFlag,w
   996  017A  1D03               	btfss	3,2
   997  017B  2980               	goto	l2585
   998  017C  1283               	bcf	3,5	;RP0=0, select bank0
   999  017D  0857               	movf	_showBatTime,w
  1000  017E  1903               	btfsc	3,2
  1001  017F  0008               	return
  1002  0180                     l2585:	
  1003                           
  1004                           ;main.c: 518: {
  1005                           ;main.c: 519: if(showBatStep > 99)
  1006  0180  3064               	movlw	100
  1007  0181  0278               	subwf	_showBatStep,w
  1008  0182  1C03               	skipc
  1009  0183  2992               	goto	l2589
  1010                           
  1011                           ;main.c: 520: {
  1012                           ;main.c: 521: baiweiNum = numArray[1];
  1013  0184  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
  1014  0185  0084               	movwf	4
  1015  0186  25C6               	fcall	stringdir
  1016  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1017  0188  00E4               	movwf	_baiweiNum
  1018                           
  1019                           ;main.c: 522: shiweiNum = numArray[0];
  1020  0189  3001               	movlw	low (_numArray-__stringbase)
  1021  018A  0084               	movwf	4
  1022  018B  25C6               	fcall	stringdir
  1023  018C  00E6               	movwf	_shiweiNum
  1024                           
  1025                           ;main.c: 523: geweiNum = numArray[0];
  1026  018D  3001               	movlw	low (_numArray-__stringbase)
  1027  018E  0084               	movwf	4
  1028  018F  25C6               	fcall	stringdir
  1029  0190  00E5               	movwf	_geweiNum
  1030                           
  1031                           ;main.c: 524: }
  1032  0191  0008               	return
  1033  0192                     l2589:	
  1034                           
  1035                           ;main.c: 525: else if(showBatStep > 9)
  1036  0192  300A               	movlw	10
  1037  0193  0278               	subwf	_showBatStep,w
  1038                           
  1039                           ;main.c: 526: {
  1040                           ;main.c: 527: baiweiNum = 0;
  1041  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1042  0195  01E4               	clrf	_baiweiNum
  1043  0196  1C03               	skipc
  1044  0197  29B7               	goto	L2
  1045                           
  1046                           ;main.c: 528: shiweiNum = numArray[showBatStep/10];
  1047  0198  300A               	movlw	10
  1048  0199  00F3               	movwf	___lbdiv@divisor
  1049  019A  0878               	movf	_showBatStep,w
  1050  019B  2591               	fcall	___lbdiv
  1051  019C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1052  019D  0084               	movwf	4
  1053  019E  25C6               	fcall	stringdir
  1054  019F  00E6               	movwf	_shiweiNum
  1055                           
  1056                           ;main.c: 529: if(chrgFlag && count1s < 50)
  1057  01A0  087A               	movf	_chrgFlag,w
  1058  01A1  1903               	btfsc	3,2
  1059  01A2  29AE               	goto	l2601
  1060  01A3  3032               	movlw	50
  1061  01A4  025F               	subwf	_count1s,w
  1062  01A5  1C03               	btfss	3,0
  1063  01A6  29AC               	goto	l2599
  1064  01A7  29AE               	goto	l2601
  1065  01A8                     l2607:	
  1066  01A8  3032               	movlw	50
  1067  01A9  025F               	subwf	_count1s,w
  1068  01AA  1803               	skipnc
  1069  01AB  29BB               	goto	l2611
  1070  01AC                     l2599:	
  1071                           
  1072                           ;main.c: 530: {
  1073                           ;main.c: 531: geweiNum = 0;
  1074  01AC  01E5               	clrf	_geweiNum
  1075                           
  1076                           ;main.c: 532: }
  1077  01AD  0008               	return
  1078  01AE                     l2601:	
  1079                           
  1080                           ;main.c: 533: else
  1081                           ;main.c: 534: {
  1082                           ;main.c: 535: geweiNum = numArray[showBatStep%10];
  1083  01AE  300A               	movlw	10
  1084  01AF  00F3               	movwf	___lbmod@divisor
  1085  01B0  0878               	movf	_showBatStep,w
  1086  01B1  2575               	fcall	___lbmod
  1087  01B2  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1088  01B3  0084               	movwf	4
  1089  01B4  25C6               	fcall	stringdir
  1090  01B5  00E5               	movwf	_geweiNum
  1091  01B6  0008               	return
  1092  01B7                     L2:	
  1093                           ;main.c: 538: else
  1094                           ;main.c: 539: {
  1095                           ;main.c: 540: baiweiNum = 0;
  1096                           
  1097                           
  1098                           ;main.c: 541: shiweiNum = 0;
  1099  01B7  01E6               	clrf	_shiweiNum
  1100                           
  1101                           ;main.c: 542: if(chrgFlag && count1s < 50)
  1102  01B8  087A               	movf	_chrgFlag,w
  1103  01B9  1D03               	btfss	3,2
  1104  01BA  29A8               	goto	l2607
  1105  01BB                     l2611:	
  1106                           
  1107                           ;main.c: 546: else
  1108                           ;main.c: 547: {
  1109                           ;main.c: 548: geweiNum = numArray[showBatStep];
  1110  01BB  0878               	movf	_showBatStep,w
  1111  01BC  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1112  01BD  0084               	movwf	4
  1113  01BE  25C6               	fcall	stringdir
  1114  01BF  00E5               	movwf	_geweiNum
  1115  01C0  0008               	return
  1116  01C1                     __end_of_workCtr:	
  1117                           
  1118                           	psect	text2
  1119  061F                     __ptext2:	
  1120 ;; *************** function _pwmStop *****************
  1121 ;; Defined at:
  1122 ;;		line 777 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;		None
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;		None
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		status,2
  1131 ;; Tracked objects:
  1132 ;;		On entry : 100/0
  1133 ;;		On exit  : 100/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1
  1136 ;;      Params:         0       0       0
  1137 ;;      Locals:         0       0       0
  1138 ;;      Temps:          0       0       0
  1139 ;;      Totals:         0       0       0
  1140 ;;Total ram usage:        0 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    2
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_workCtr
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           
  1151                           ;psect for function _pwmStop
  1152  061F                     _pwmStop:	
  1153                           
  1154                           ;main.c: 779: PWMCON0 &= 0XFB;
  1155                           
  1156                           ;incstack = 0
  1157                           ; Regs used in _pwmStop: [status,2]
  1158  061F  1115               	bcf	21,2	;volatile
  1159                           
  1160                           ;main.c: 780: RB3 = 0;
  1161  0620  1186               	bcf	6,3	;volatile
  1162                           
  1163                           ;main.c: 781: motorPwmFlag = 0;
  1164  0621  01D3               	clrf	_motorPwmFlag
  1165  0622  0008               	return
  1166  0623                     __end_of_pwmStop:	
  1167                           
  1168                           	psect	text3
  1169  05D8                     __ptext3:	
  1170 ;; *************** function _pwmInit *****************
  1171 ;; Defined at:
  1172 ;;		line 761 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2
  1181 ;; Tracked objects:
  1182 ;;		On entry : 100/0
  1183 ;;		On exit  : 100/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1
  1186 ;;      Params:         0       0       0
  1187 ;;      Locals:         0       0       0
  1188 ;;      Temps:          0       0       0
  1189 ;;      Totals:         0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    2
  1193 ;; This function calls:
  1194 ;;		Nothing
  1195 ;; This function is called by:
  1196 ;;		_workCtr
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           
  1201                           ;psect for function _pwmInit
  1202  05D8                     _pwmInit:	
  1203                           
  1204                           ;main.c: 763: PWMCON1 = 0B00000000;
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _pwmInit: [wreg+status,2]
  1208  05D8  0196               	clrf	22	;volatile
  1209                           
  1210                           ;main.c: 764: PWMTH = 0X00;
  1211  05D9  0198               	clrf	24	;volatile
  1212                           
  1213                           ;main.c: 765: PWMTL = 100;
  1214  05DA  3064               	movlw	100
  1215  05DB  0097               	movwf	23	;volatile
  1216                           
  1217                           ;main.c: 768: PWMD23H = 0;
  1218  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  1219  05DD  019E               	clrf	30	;volatile
  1220                           
  1221                           ;main.c: 769: PWMD2L = 60;
  1222  05DE  303C               	movlw	60
  1223  05DF  009B               	movwf	27	;volatile
  1224                           
  1225                           ;main.c: 770: PWM23DT = 0X00;
  1226  05E0  019D               	clrf	29	;volatile
  1227                           
  1228                           ;main.c: 772: PWMCON0 = 0X64;
  1229  05E1  3064               	movlw	100
  1230  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1231  05E3  0095               	movwf	21	;volatile
  1232                           
  1233                           ;main.c: 773: PWMCON2 =0X00;
  1234  05E4  019D               	clrf	29	;volatile
  1235                           
  1236                           ;main.c: 774: motorPwmFlag = 1;
  1237  05E5  01D3               	clrf	_motorPwmFlag
  1238  05E6  0AD3               	incf	_motorPwmFlag,f
  1239  05E7  0008               	return
  1240  05E8                     __end_of_pwmInit:	
  1241                           
  1242                           	psect	text4
  1243  0575                     __ptext4:	
  1244 ;; *************** function ___lbmod *****************
  1245 ;; Defined at:
  1246 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  dividend        1    wreg     unsigned char 
  1249 ;;  divisor         1    3[COMMON] unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  dividend        1    5[COMMON] unsigned char 
  1252 ;;  rem             1    7[COMMON] unsigned char 
  1253 ;;  counter         1    6[COMMON] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      unsigned char 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 100/0
  1260 ;;		On exit  : 100/0
  1261 ;;		Unchanged: 100/0
  1262 ;; Data sizes:     COMMON   BANK0   BANK1
  1263 ;;      Params:         1       0       0
  1264 ;;      Locals:         3       0       0
  1265 ;;      Temps:          1       0       0
  1266 ;;      Totals:         5       0       0
  1267 ;;Total ram usage:        5 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    2
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_workCtr
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function ___lbmod
  1279  0575                     ___lbmod:	
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1283                           ;___lbmod@dividend stored from wreg
  1284  0575  00F5               	movwf	___lbmod@dividend
  1285  0576  3008               	movlw	8
  1286  0577  00F6               	movwf	___lbmod@counter
  1287  0578  01F7               	clrf	___lbmod@rem
  1288  0579                     l2263:	
  1289  0579  0875               	movf	___lbmod@dividend,w
  1290  057A  00F4               	movwf	??___lbmod
  1291  057B  3007               	movlw	7
  1292  057C  1003               	clrc
  1293  057D                     L3:	
  1294  057D  0CF4               	rrf	??___lbmod,f
  1295  057E  3EFF               	addlw	-1
  1296  057F  1003               	clrc
  1297  0580  1D03               	skipz
  1298  0581  2D7D               	goto	L3
  1299  0582  0D77               	rlf	___lbmod@rem,w
  1300  0583  0474               	iorwf	??___lbmod,w
  1301  0584  00F7               	movwf	___lbmod@rem
  1302  0585  1003               	clrc
  1303  0586  0DF5               	rlf	___lbmod@dividend,f
  1304  0587  0873               	movf	___lbmod@divisor,w
  1305  0588  0277               	subwf	___lbmod@rem,w
  1306  0589  1C03               	skipc
  1307  058A  2D8D               	goto	l2271
  1308  058B  0873               	movf	___lbmod@divisor,w
  1309  058C  02F7               	subwf	___lbmod@rem,f
  1310  058D                     l2271:	
  1311  058D  0BF6               	decfsz	___lbmod@counter,f
  1312  058E  2D79               	goto	l2263
  1313  058F  0877               	movf	___lbmod@rem,w
  1314  0590  0008               	return
  1315  0591                     __end_of___lbmod:	
  1316                           
  1317                           	psect	text5
  1318  0591                     __ptext5:	
  1319 ;; *************** function ___lbdiv *****************
  1320 ;; Defined at:
  1321 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  dividend        1    wreg     unsigned char 
  1324 ;;  divisor         1    3[COMMON] unsigned char 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  dividend        1    4[COMMON] unsigned char 
  1327 ;;  quotient        1    6[COMMON] unsigned char 
  1328 ;;  counter         1    5[COMMON] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      unsigned char 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0
  1333 ;; Tracked objects:
  1334 ;;		On entry : 100/0
  1335 ;;		On exit  : 100/0
  1336 ;;		Unchanged: 100/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1
  1338 ;;      Params:         1       0       0
  1339 ;;      Locals:         3       0       0
  1340 ;;      Temps:          0       0       0
  1341 ;;      Totals:         4       0       0
  1342 ;;Total ram usage:        4 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    2
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_workCtr
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function ___lbdiv
  1354  0591                     ___lbdiv:	
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1358                           ;___lbdiv@dividend stored from wreg
  1359  0591  00F4               	movwf	___lbdiv@dividend
  1360  0592  01F6               	clrf	___lbdiv@quotient
  1361  0593  0873               	movf	___lbdiv@divisor,w
  1362  0594  1903               	btfsc	3,2
  1363  0595  2DAA               	goto	l2255
  1364  0596  01F5               	clrf	___lbdiv@counter
  1365  0597                     l2241:	
  1366  0597  0AF5               	incf	___lbdiv@counter,f
  1367  0598  1BF3               	btfsc	___lbdiv@divisor,7
  1368  0599  2D9D               	goto	l1065
  1369  059A  1003               	clrc
  1370  059B  0DF3               	rlf	___lbdiv@divisor,f
  1371  059C  2D97               	goto	l2241
  1372  059D                     l1065:	
  1373  059D  1003               	clrc
  1374  059E  0DF6               	rlf	___lbdiv@quotient,f
  1375  059F  0873               	movf	___lbdiv@divisor,w
  1376  05A0  0274               	subwf	___lbdiv@dividend,w
  1377  05A1  1C03               	skipc
  1378  05A2  2DA7               	goto	L4
  1379  05A3  0873               	movf	___lbdiv@divisor,w
  1380  05A4  02F4               	subwf	___lbdiv@dividend,f
  1381  05A5  1476               	bsf	___lbdiv@quotient,0
  1382  05A6  1003               	clrc
  1383  05A7                     L4:	
  1384  05A7  0CF3               	rrf	___lbdiv@divisor,f
  1385  05A8  0BF5               	decfsz	___lbdiv@counter,f
  1386  05A9  2D9D               	goto	l1065
  1387  05AA                     l2255:	
  1388  05AA  0876               	movf	___lbdiv@quotient,w
  1389  05AB  0008               	return
  1390  05AC                     __end_of___lbdiv:	
  1391                           
  1392                           	psect	text6
  1393  026F                     __ptext6:	
  1394 ;; *************** function _setBatStep *****************
  1395 ;; Defined at:
  1396 ;;		line 556 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;		None
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 100/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1
  1410 ;;      Params:         0       0       0
  1411 ;;      Locals:         0       0       0
  1412 ;;      Temps:          0       0       0
  1413 ;;      Totals:         0       0       0
  1414 ;;Total ram usage:        0 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    3
  1417 ;; This function calls:
  1418 ;;		___lwdiv
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           
  1425                           ;psect for function _setBatStep
  1426  026F                     _setBatStep:	
  1427                           
  1428                           ;main.c: 558: if(lowBatFlag == 1 && lowShanTime == 0 && workStep > 0)
  1429                           
  1430                           ;incstack = 0
  1431                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1432  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0270  0B55               	decfsz	_lowBatFlag,w
  1434  0271  2A80               	goto	l2869
  1435  0272  084B               	movf	_lowShanTime,w
  1436  0273  044C               	iorwf	_lowShanTime+1,w
  1437  0274  1D03               	btfss	3,2
  1438  0275  2A80               	goto	l2869
  1439  0276  0879               	movf	_workStep,w
  1440  0277  1903               	btfsc	3,2
  1441  0278  2A80               	goto	l2869
  1442  0279  302C               	movlw	44
  1443                           
  1444                           ;main.c: 559: {
  1445                           ;main.c: 560: showBatStep = 0;
  1446  027A  01F8               	clrf	_showBatStep
  1447                           
  1448                           ;main.c: 561: curBatStep = 0;
  1449  027B  01D2               	clrf	_curBatStep
  1450                           
  1451                           ;main.c: 562: lowShanTime = 300;
  1452  027C  00CB               	movwf	_lowShanTime
  1453  027D  3001               	movlw	1
  1454  027E  00CC               	movwf	_lowShanTime+1
  1455                           
  1456                           ;main.c: 563: }
  1457  027F  0008               	return
  1458  0280                     l2869:	
  1459                           
  1460                           ;main.c: 564: else if(power_ad < 2800)
  1461  0280  300A               	movlw	10
  1462  0281  024E               	subwf	_power_ad+1,w	;volatile
  1463  0282  30F0               	movlw	240
  1464  0283  1903               	skipnz
  1465  0284  024D               	subwf	_power_ad,w	;volatile
  1466  0285  1803               	skipnc
  1467  0286  2A9A               	goto	l2879
  1468                           
  1469                           ;main.c: 565: {
  1470                           ;main.c: 566: if(count1s == 0)
  1471  0287  085F               	movf	_count1s,w
  1472  0288  1D03               	btfss	3,2
  1473  0289  2A97               	goto	l738
  1474                           
  1475                           ;main.c: 567: {
  1476                           ;main.c: 568: if(showBatStep > 1)
  1477  028A  3002               	movlw	2
  1478  028B  0278               	subwf	_showBatStep,w
  1479  028C  1C03               	skipc
  1480  028D  2A93               	goto	l739
  1481                           
  1482                           ;main.c: 569: {
  1483                           ;main.c: 570: if(chrgFlag == 0)
  1484  028E  087A               	movf	_chrgFlag,w
  1485  028F  1D03               	btfss	3,2
  1486  0290  2A95               	goto	l741
  1487                           
  1488                           ;main.c: 571: showBatStep--;
  1489  0291  03F8               	decf	_showBatStep,f
  1490  0292  2A95               	goto	l741
  1491  0293                     l739:	
  1492                           
  1493                           ;main.c: 573: else
  1494                           ;main.c: 574: {
  1495                           ;main.c: 575: showBatStep = 1;
  1496  0293  01F8               	clrf	_showBatStep
  1497  0294  0AF8               	incf	_showBatStep,f
  1498  0295                     l741:	
  1499                           
  1500                           ;main.c: 576: }
  1501                           ;main.c: 577: curBatStep = 1;
  1502  0295  01D2               	clrf	_curBatStep
  1503  0296  0AD2               	incf	_curBatStep,f
  1504  0297                     l738:	
  1505                           
  1506                           ;main.c: 578: }
  1507                           ;main.c: 579: curBatStep = 1;
  1508  0297  01D2               	clrf	_curBatStep
  1509  0298  0AD2               	incf	_curBatStep,f
  1510                           
  1511                           ;main.c: 580: }
  1512  0299  0008               	return
  1513  029A                     l2879:	
  1514                           
  1515                           ;main.c: 581: else
  1516                           ;main.c: 582: {
  1517                           ;main.c: 583: if(power_ad < 3600)
  1518  029A  300E               	movlw	14
  1519  029B  024E               	subwf	_power_ad+1,w	;volatile
  1520  029C  3010               	movlw	16
  1521  029D  1903               	skipnz
  1522  029E  024D               	subwf	_power_ad,w	;volatile
  1523  029F  1803               	skipnc
  1524  02A0  2AAF               	goto	l2883
  1525                           
  1526                           ;main.c: 584: {
  1527                           ;main.c: 585: curBatStep = (power_ad - 2800)/40;
  1528  02A1  3028               	movlw	40
  1529  02A2  00F3               	movwf	___lwdiv@divisor
  1530  02A3  01F4               	clrf	___lwdiv@divisor+1
  1531  02A4  084D               	movf	_power_ad,w	;volatile
  1532  02A5  3E10               	addlw	16
  1533  02A6  00F5               	movwf	___lwdiv@dividend
  1534  02A7  084E               	movf	_power_ad+1,w	;volatile
  1535  02A8  1803               	skipnc
  1536  02A9  3E01               	addlw	1
  1537  02AA  3EF5               	addlw	245
  1538  02AB  00F6               	movwf	___lwdiv@dividend+1
  1539  02AC  24C0               	fcall	___lwdiv
  1540  02AD  0873               	movf	?___lwdiv,w
  1541  02AE  2ABD               	goto	L5
  1542  02AF                     l2883:	
  1543                           ;main.c: 586: }
  1544                           
  1545                           
  1546                           ;main.c: 587: else
  1547                           ;main.c: 588: {
  1548                           ;main.c: 589: curBatStep = 20 + ((power_ad - 3600)/6);
  1549  02AF  3006               	movlw	6
  1550  02B0  00F3               	movwf	___lwdiv@divisor
  1551  02B1  01F4               	clrf	___lwdiv@divisor+1
  1552  02B2  084D               	movf	_power_ad,w	;volatile
  1553  02B3  3EF0               	addlw	240
  1554  02B4  00F5               	movwf	___lwdiv@dividend
  1555  02B5  084E               	movf	_power_ad+1,w	;volatile
  1556  02B6  1803               	skipnc
  1557  02B7  3E01               	addlw	1
  1558  02B8  3EF1               	addlw	241
  1559  02B9  00F6               	movwf	___lwdiv@dividend+1
  1560  02BA  24C0               	fcall	___lwdiv
  1561  02BB  0873               	movf	?___lwdiv,w
  1562  02BC  3E14               	addlw	20
  1563  02BD                     L5:	
  1564  02BD  00D2               	movwf	_curBatStep
  1565                           
  1566                           ;main.c: 590: }
  1567                           ;main.c: 591: if(curBatStep > 100)
  1568  02BE  3065               	movlw	101
  1569  02BF  0252               	subwf	_curBatStep,w
  1570  02C0  1C03               	skipc
  1571  02C1  2AC4               	goto	l2889
  1572                           
  1573                           ;main.c: 592: {
  1574                           ;main.c: 593: curBatStep = 100;
  1575  02C2  3064               	movlw	100
  1576  02C3  00D2               	movwf	_curBatStep
  1577  02C4                     l2889:	
  1578                           
  1579                           ;main.c: 594: }
  1580                           ;main.c: 596: if(chrgFlag)
  1581  02C4  087A               	movf	_chrgFlag,w
  1582  02C5  1903               	btfsc	3,2
  1583  02C6  2AEA               	goto	l2913
  1584                           
  1585                           ;main.c: 597: {
  1586                           ;main.c: 598: if(chrgFullFlag)
  1587  02C7  085D               	movf	_chrgFullFlag,w
  1588  02C8  1903               	btfsc	3,2
  1589  02C9  2AE3               	goto	l2901
  1590                           
  1591                           ;main.c: 599: {
  1592                           ;main.c: 600: if(++count30s >= 3000 && showBatStep < 100)
  1593  02CA  0AC7               	incf	_count30s,f
  1594  02CB  1903               	skipnz
  1595  02CC  0AC8               	incf	_count30s+1,f
  1596  02CD  300B               	movlw	11
  1597  02CE  0248               	subwf	_count30s+1,w
  1598  02CF  30B8               	movlw	184
  1599  02D0  2AD7               	goto	L6
  1600  02D1                     l2903:	
  1601                           
  1602                           ;main.c: 607: {
  1603                           ;main.c: 608: if(++count30s >= 30000 && showBatStep < 100)
  1604  02D1  0AC7               	incf	_count30s,f
  1605  02D2  1903               	skipnz
  1606  02D3  0AC8               	incf	_count30s+1,f
  1607  02D4  3075               	movlw	117
  1608  02D5  0248               	subwf	_count30s+1,w
  1609  02D6  3030               	movlw	48
  1610  02D7                     L6:	
  1611  02D7  1903               	skipnz
  1612  02D8  0247               	subwf	_count30s,w
  1613  02D9  1C03               	skipc
  1614  02DA  0008               	return
  1615  02DB  3064               	movlw	100
  1616  02DC  0278               	subwf	_showBatStep,w
  1617  02DD  1803               	skipnc
  1618  02DE  0008               	return
  1619                           
  1620                           ;main.c: 601: {
  1621                           ;main.c: 602: count30s = 0;
  1622  02DF  01C7               	clrf	_count30s
  1623  02E0  01C8               	clrf	_count30s+1
  1624                           
  1625                           ;main.c: 603: showBatStep++;
  1626  02E1  0AF8               	incf	_showBatStep,f
  1627  02E2  0008               	return
  1628  02E3                     l2901:	
  1629                           
  1630                           ;main.c: 606: else if(curBatStep > showBatStep)
  1631  02E3  0852               	movf	_curBatStep,w
  1632  02E4  0278               	subwf	_showBatStep,w
  1633  02E5  1C03               	btfss	3,0
  1634  02E6  2AD1               	goto	l2903
  1635  02E7                     l2911:	
  1636                           
  1637                           ;main.c: 615: else
  1638                           ;main.c: 616: {
  1639                           ;main.c: 617: count30s = 0;
  1640  02E7  01C7               	clrf	_count30s
  1641  02E8  01C8               	clrf	_count30s+1
  1642  02E9  0008               	return
  1643  02EA                     l2913:	
  1644                           
  1645                           ;main.c: 620: else
  1646                           ;main.c: 621: {
  1647                           ;main.c: 622: if(curBatStep < showBatStep && showBatStep > 1)
  1648  02EA  0878               	movf	_showBatStep,w
  1649  02EB  0252               	subwf	_curBatStep,w
  1650  02EC  1803               	skipnc
  1651  02ED  2AE7               	goto	l2911
  1652  02EE  3002               	movlw	2
  1653  02EF  0278               	subwf	_showBatStep,w
  1654  02F0  1C03               	skipc
  1655  02F1  2AE7               	goto	l2911
  1656                           
  1657                           ;main.c: 623: {
  1658                           ;main.c: 624: if(++count30s >= 1500 && showBatStep > 1)
  1659  02F2  0AC7               	incf	_count30s,f
  1660  02F3  1903               	skipnz
  1661  02F4  0AC8               	incf	_count30s+1,f
  1662  02F5  3005               	movlw	5
  1663  02F6  0248               	subwf	_count30s+1,w
  1664  02F7  30DC               	movlw	220
  1665  02F8  1903               	skipnz
  1666  02F9  0247               	subwf	_count30s,w
  1667  02FA  1C03               	skipc
  1668  02FB  0008               	return
  1669  02FC  3002               	movlw	2
  1670  02FD  0278               	subwf	_showBatStep,w
  1671  02FE  1C03               	skipc
  1672  02FF  0008               	return
  1673                           
  1674                           ;main.c: 625: {
  1675                           ;main.c: 626: count30s = 0;
  1676  0300  01C7               	clrf	_count30s
  1677  0301  01C8               	clrf	_count30s+1
  1678                           
  1679                           ;main.c: 627: showBatStep--;
  1680  0302  03F8               	decf	_showBatStep,f
  1681  0303  0008               	return
  1682  0304                     __end_of_setBatStep:	
  1683                           
  1684                           	psect	text7
  1685  04C0                     __ptext7:	
  1686 ;; *************** function ___lwdiv *****************
  1687 ;; Defined at:
  1688 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  divisor         2    3[COMMON] unsigned int 
  1691 ;;  dividend        2    5[COMMON] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  quotient        2    1[BANK0 ] unsigned int 
  1694 ;;  counter         1    0[BANK0 ] unsigned char 
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  2    3[COMMON] unsigned int 
  1697 ;; Registers used:
  1698 ;;		wreg, status,2, status,0
  1699 ;; Tracked objects:
  1700 ;;		On entry : 100/0
  1701 ;;		On exit  : 100/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMMON   BANK0   BANK1
  1704 ;;      Params:         4       0       0
  1705 ;;      Locals:         0       3       0
  1706 ;;      Temps:          0       0       0
  1707 ;;      Totals:         4       3       0
  1708 ;;Total ram usage:        7 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    2
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_setBatStep
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           
  1719                           ;psect for function ___lwdiv
  1720  04C0                     ___lwdiv:	
  1721                           
  1722                           ;incstack = 0
  1723                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1724  04C0  01A1               	clrf	___lwdiv@quotient
  1725  04C1  01A2               	clrf	___lwdiv@quotient+1
  1726  04C2  0873               	movf	___lwdiv@divisor,w
  1727  04C3  0474               	iorwf	___lwdiv@divisor+1,w
  1728  04C4  1903               	btfsc	3,2
  1729  04C5  2CE5               	goto	l2839
  1730  04C6  01A0               	clrf	___lwdiv@counter
  1731  04C7                     L7:	
  1732  04C7  0AA0               	incf	___lwdiv@counter,f
  1733  04C8  1BF4               	btfsc	___lwdiv@divisor+1,7
  1734  04C9  2CCE               	goto	l2827
  1735  04CA  1003               	clrc
  1736  04CB  0DF3               	rlf	___lwdiv@divisor,f
  1737  04CC  0DF4               	rlf	___lwdiv@divisor+1,f
  1738  04CD  2CC7               	goto	L7
  1739  04CE                     l2827:	
  1740  04CE  1003               	clrc
  1741  04CF  0DA1               	rlf	___lwdiv@quotient,f
  1742  04D0  0DA2               	rlf	___lwdiv@quotient+1,f
  1743  04D1  0874               	movf	___lwdiv@divisor+1,w
  1744  04D2  0276               	subwf	___lwdiv@dividend+1,w
  1745  04D3  1D03               	skipz
  1746  04D4  2CD7               	goto	u2995
  1747  04D5  0873               	movf	___lwdiv@divisor,w
  1748  04D6  0275               	subwf	___lwdiv@dividend,w
  1749  04D7                     u2995:	
  1750  04D7  1C03               	skipc
  1751  04D8  2CE1               	goto	L8
  1752  04D9  0873               	movf	___lwdiv@divisor,w
  1753  04DA  02F5               	subwf	___lwdiv@dividend,f
  1754  04DB  0874               	movf	___lwdiv@divisor+1,w
  1755  04DC  1C03               	skipc
  1756  04DD  03F6               	decf	___lwdiv@dividend+1,f
  1757  04DE  02F6               	subwf	___lwdiv@dividend+1,f
  1758  04DF  1421               	bsf	___lwdiv@quotient,0
  1759  04E0  1003               	clrc
  1760  04E1                     L8:	
  1761  04E1  0CF4               	rrf	___lwdiv@divisor+1,f
  1762  04E2  0CF3               	rrf	___lwdiv@divisor,f
  1763  04E3  0BA0               	decfsz	___lwdiv@counter,f
  1764  04E4  2CCE               	goto	l2827
  1765  04E5                     l2839:	
  1766  04E5  0822               	movf	___lwdiv@quotient+1,w
  1767  04E6  00F4               	movwf	?___lwdiv+1
  1768  04E7  0821               	movf	___lwdiv@quotient,w
  1769  04E8  00F3               	movwf	?___lwdiv
  1770  04E9  0008               	return
  1771  04EA                     __end_of___lwdiv:	
  1772                           
  1773                           	psect	text8
  1774  04EA                     __ptext8:	
  1775 ;; *************** function _keyCtr *****************
  1776 ;; Defined at:
  1777 ;;		line 407 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  kclick          1    4[COMMON] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0, pclath, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 100/0
  1788 ;;		On exit  : 100/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1
  1791 ;;      Params:         0       0       0
  1792 ;;      Locals:         1       0       0
  1793 ;;      Temps:          0       0       0
  1794 ;;      Totals:         1       0       0
  1795 ;;Total ram usage:        1 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    3
  1798 ;; This function calls:
  1799 ;;		_keyRead
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _keyCtr
  1807  04EA                     _keyCtr:	
  1808                           
  1809                           ;main.c: 409: char kclick = keyRead(0x04 & (~PORTB));
  1810                           
  1811                           ;incstack = 0
  1812                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1813  04EA  0906               	comf	6,w	;volatile
  1814  04EB  3904               	andlw	4
  1815  04EC  253A               	fcall	_keyRead
  1816  04ED  00F4               	movwf	keyCtr@kclick
  1817                           
  1818                           ;main.c: 410: if(kclick == 1)
  1819  04EE  0B74               	decfsz	keyCtr@kclick,w
  1820  04EF  2D04               	goto	l2493
  1821                           
  1822                           ;main.c: 411: {
  1823                           ;main.c: 412: if(workStep > 0)
  1824  04F0  0879               	movf	_workStep,w
  1825  04F1  1903               	btfsc	3,2
  1826  04F2  2CFB               	goto	l2485
  1827                           
  1828                           ;main.c: 413: {
  1829                           ;main.c: 414: if(++workStep > 2)
  1830  04F3  3003               	movlw	3
  1831  04F4  0AF9               	incf	_workStep,f
  1832  04F5  0279               	subwf	_workStep,w
  1833  04F6  1C03               	skipc
  1834  04F7  0008               	return
  1835                           
  1836                           ;main.c: 415: {
  1837                           ;main.c: 416: workStep = 1;
  1838  04F8  01F9               	clrf	_workStep
  1839  04F9  0AF9               	incf	_workStep,f
  1840  04FA  0008               	return
  1841  04FB                     l2485:	
  1842                           
  1843                           ;main.c: 419: else if(showBatTime > 0)
  1844  04FB  0857               	movf	_showBatTime,w
  1845  04FC  1903               	btfsc	3,2
  1846  04FD  2D00               	goto	l2489
  1847                           
  1848                           ;main.c: 420: {
  1849                           ;main.c: 421: showBatTime = 0;
  1850  04FE  01D7               	clrf	_showBatTime
  1851                           
  1852                           ;main.c: 422: }
  1853  04FF  0008               	return
  1854  0500                     l2489:	
  1855                           
  1856                           ;main.c: 423: else
  1857                           ;main.c: 424: {
  1858                           ;main.c: 425: showBatTime = 200;
  1859  0500  30C8               	movlw	200
  1860  0501  00D7               	movwf	_showBatTime
  1861                           
  1862                           ;main.c: 426: count1s = 0;
  1863  0502  01DF               	clrf	_count1s
  1864  0503  0008               	return
  1865  0504                     l2493:	
  1866                           
  1867                           ;main.c: 429: else if(kclick == 2)
  1868  0504  3002               	movlw	2
  1869  0505  0674               	xorwf	keyCtr@kclick,w
  1870  0506  1D03               	btfss	3,2
  1871  0507  0008               	return
  1872                           
  1873                           ;main.c: 430: {
  1874                           ;main.c: 431: if(workStep > 0)
  1875  0508  0879               	movf	_workStep,w
  1876  0509  1903               	btfsc	3,2
  1877  050A  2D0D               	goto	l698
  1878                           
  1879                           ;main.c: 432: {
  1880                           ;main.c: 433: workStep = 0;
  1881  050B  01F9               	clrf	_workStep
  1882                           
  1883                           ;main.c: 434: }
  1884  050C  0008               	return
  1885  050D                     l698:	
  1886                           
  1887                           ;main.c: 435: else
  1888                           ;main.c: 436: {
  1889                           ;main.c: 437: workStep = 1;
  1890  050D  01F9               	clrf	_workStep
  1891  050E  0AF9               	incf	_workStep,f
  1892                           
  1893                           ;main.c: 438: showBatTime = 0;
  1894  050F  01D7               	clrf	_showBatTime
  1895                           
  1896                           ;main.c: 439: count900s = 0;
  1897  0510  01C9               	clrf	_count900s
  1898  0511  01CA               	clrf	_count900s+1
  1899  0512  0008               	return
  1900  0513                     __end_of_keyCtr:	
  1901                           
  1902                           	psect	text9
  1903  053A                     __ptext9:	
  1904 ;; *************** function _keyRead *****************
  1905 ;; Defined at:
  1906 ;;		line 372 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  keyStatus       1    wreg     unsigned char 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  keyStatus       1    3[COMMON] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      unsigned char 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0
  1915 ;; Tracked objects:
  1916 ;;		On entry : 100/0
  1917 ;;		On exit  : 100/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1
  1920 ;;      Params:         0       0       0
  1921 ;;      Locals:         1       0       0
  1922 ;;      Temps:          0       0       0
  1923 ;;      Totals:         1       0       0
  1924 ;;Total ram usage:        1 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    2
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_keyCtr
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           
  1935                           ;psect for function _keyRead
  1936  053A                     _keyRead:	
  1937                           
  1938                           ;incstack = 0
  1939                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1940                           ;keyRead@keyStatus stored from wreg
  1941  053A  00F3               	movwf	keyRead@keyStatus
  1942                           
  1943                           ;main.c: 374: if(keyStatus)
  1944  053B  0873               	movf	keyRead@keyStatus,w
  1945  053C  3064               	movlw	100
  1946  053D  1903               	btfsc	3,2
  1947  053E  2D4C               	goto	L10
  1948                           
  1949                           ;main.c: 375: {
  1950                           ;main.c: 376: keyCount++;
  1951  053F  0AD9               	incf	_keyCount,f
  1952                           
  1953                           ;main.c: 377: if(keyCount >= 100)
  1954  0540  0259               	subwf	_keyCount,w
  1955  0541  1C03               	skipc
  1956  0542  3400               	retlw	0
  1957                           
  1958                           ;main.c: 378: {
  1959                           ;main.c: 379: keyCount = 100;
  1960  0543  3064               	movlw	100
  1961  0544  00D9               	movwf	_keyCount
  1962                           
  1963                           ;main.c: 380: if(!longPressFlag)
  1964  0545  0858               	movf	_longPressFlag,w
  1965  0546  1D03               	btfss	3,2
  1966  0547  3400               	retlw	0
  1967  0548  3002               	movlw	2
  1968                           
  1969                           ;main.c: 381: {
  1970                           ;main.c: 382: longPressFlag = 1;
  1971  0549  01D8               	clrf	_longPressFlag
  1972  054A  0AD8               	incf	_longPressFlag,f
  1973                           
  1974                           ;main.c: 383: return 2;
  1975  054B  0008               	return
  1976  054C                     L10:	
  1977                           ;main.c: 387: else
  1978                           ;main.c: 388: {
  1979                           ;main.c: 389: if(keyCount >= 100)
  1980                           
  1981  054C  0259               	subwf	_keyCount,w
  1982  054D  1C03               	skipc
  1983  054E  2D52               	goto	l2053
  1984                           
  1985                           ;main.c: 390: {
  1986                           ;main.c: 391: keyCount = 0;
  1987  054F  01D9               	clrf	_keyCount
  1988                           
  1989                           ;main.c: 392: longPressFlag = 0;
  1990  0550  01D8               	clrf	_longPressFlag
  1991                           
  1992                           ;main.c: 393: return 0;
  1993  0551  3400               	retlw	0
  1994  0552                     l2053:	
  1995                           
  1996                           ;main.c: 395: else if(keyCount >= 6)
  1997  0552  3006               	movlw	6
  1998  0553  0259               	subwf	_keyCount,w
  1999                           
  2000                           ;main.c: 396: {
  2001                           ;main.c: 397: keyCount = 0;
  2002  0554  01D9               	clrf	_keyCount
  2003  0555  1803               	btfsc	3,0
  2004                           
  2005                           ;main.c: 398: return 1;
  2006  0556  3401               	retlw	1
  2007  0557  3400               	retlw	0
  2008  0558                     __end_of_keyRead:	
  2009                           ;main.c: 399: }
  2010                           ;main.c: 400: keyCount = 0;
  2011                           
  2012                           
  2013                           	psect	text10
  2014  0513                     __ptext10:	
  2015 ;; *************** function _chrgCtr *****************
  2016 ;; Defined at:
  2017 ;;		line 331 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;		None
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2, status,0
  2026 ;; Tracked objects:
  2027 ;;		On entry : 100/0
  2028 ;;		On exit  : 100/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1
  2031 ;;      Params:         0       0       0
  2032 ;;      Locals:         0       0       0
  2033 ;;      Temps:          0       0       0
  2034 ;;      Totals:         0       0       0
  2035 ;;Total ram usage:        0 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    2
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _chrgCtr
  2047  0513                     _chrgCtr:	
  2048                           
  2049                           ;main.c: 333: if(PORTB & 0x02)
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2053  0513  1C86               	btfss	6,1	;volatile
  2054  0514  2D25               	goto	l2383
  2055                           
  2056                           ;main.c: 334: {
  2057                           ;main.c: 335: chrgFlag = 1;
  2058  0515  01FA               	clrf	_chrgFlag
  2059  0516  0AFA               	incf	_chrgFlag,f
  2060                           
  2061                           ;main.c: 336: lowBatFlag = 0;
  2062  0517  01D5               	clrf	_lowBatFlag
  2063                           
  2064                           ;main.c: 337: if(PORTB & 0x01)
  2065  0518  1C06               	btfss	6,0	;volatile
  2066  0519  2D23               	goto	l2381
  2067                           
  2068                           ;main.c: 338: {
  2069                           ;main.c: 339: if(++chrgFullTime >= 200)
  2070  051A  30C8               	movlw	200
  2071  051B  0ADB               	incf	_chrgFullTime,f
  2072  051C  025B               	subwf	_chrgFullTime,w
  2073  051D  1C03               	skipc
  2074  051E  0008               	return
  2075                           
  2076                           ;main.c: 340: {
  2077                           ;main.c: 341: chrgFullTime = 0;
  2078  051F  01DB               	clrf	_chrgFullTime
  2079                           
  2080                           ;main.c: 342: chrgFullFlag = 1;
  2081  0520  01DD               	clrf	_chrgFullFlag
  2082  0521  0ADD               	incf	_chrgFullFlag,f
  2083  0522  0008               	return
  2084  0523                     l2381:	
  2085                           
  2086                           ;main.c: 345: else
  2087                           ;main.c: 346: {
  2088                           ;main.c: 347: chrgFullTime = 0;
  2089  0523  01DB               	clrf	_chrgFullTime
  2090  0524  0008               	return
  2091  0525                     l2383:	
  2092  0525  3009               	movlw	9
  2093                           
  2094                           ;main.c: 350: else
  2095                           ;main.c: 351: {
  2096                           ;main.c: 352: chrgFlag = 0;
  2097  0526  01FA               	clrf	_chrgFlag
  2098                           
  2099                           ;main.c: 353: chrgFullFlag = 0;
  2100  0527  01DD               	clrf	_chrgFullFlag
  2101                           
  2102                           ;main.c: 354: chrgFullTime = 0;
  2103  0528  01DB               	clrf	_chrgFullTime
  2104                           
  2105                           ;main.c: 355: if(power_ad < 2500)
  2106  0529  024E               	subwf	_power_ad+1,w	;volatile
  2107  052A  30C4               	movlw	196
  2108  052B  1903               	skipnz
  2109  052C  024D               	subwf	_power_ad,w	;volatile
  2110  052D  1803               	skipnc
  2111  052E  2D38               	goto	l2393
  2112                           
  2113                           ;main.c: 356: {
  2114                           ;main.c: 357: if(++lowBatTime > 200)
  2115  052F  30C9               	movlw	201
  2116  0530  0AD1               	incf	_lowBatTime,f
  2117  0531  0251               	subwf	_lowBatTime,w
  2118  0532  1C03               	skipc
  2119  0533  0008               	return
  2120                           
  2121                           ;main.c: 358: {
  2122                           ;main.c: 359: lowBatTime = 0;
  2123  0534  01D1               	clrf	_lowBatTime
  2124                           
  2125                           ;main.c: 360: lowBatFlag = 1;
  2126  0535  01D5               	clrf	_lowBatFlag
  2127  0536  0AD5               	incf	_lowBatFlag,f
  2128  0537  0008               	return
  2129  0538                     l2393:	
  2130                           
  2131                           ;main.c: 363: else
  2132                           ;main.c: 364: {
  2133                           ;main.c: 365: lowBatTime = 0;
  2134  0538  01D1               	clrf	_lowBatTime
  2135  0539  0008               	return
  2136  053A                     __end_of_chrgCtr:	
  2137                           
  2138                           	psect	text11
  2139  0489                     __ptext11:	
  2140 ;; *************** function _checkBatAD *****************
  2141 ;; Defined at:
  2142 ;;		line 640 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;		None
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  power_temp      4   35[BANK0 ] volatile unsigned long 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, pclath, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 100/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1
  2156 ;;      Params:         0       0       0
  2157 ;;      Locals:         0       4       0
  2158 ;;      Temps:          0       1       0
  2159 ;;      Totals:         0       5       0
  2160 ;;Total ram usage:        5 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    4
  2163 ;; This function calls:
  2164 ;;		_ADC_Sample
  2165 ;;		___ftdiv
  2166 ;;		___fttol
  2167 ;;		___lwtoft
  2168 ;; This function is called by:
  2169 ;;		_main
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           
  2174                           ;psect for function _checkBatAD
  2175  0489                     _checkBatAD:	
  2176                           
  2177                           ;incstack = 0
  2178                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2179  0489  301F               	movlw	31
  2180                           
  2181                           ;main.c: 642: test_adc = ADC_Sample(31, 0);
  2182  048A  01F3               	clrf	ADC_Sample@adldo
  2183  048B  2017               	fcall	_ADC_Sample
  2184  048C  00E1               	movwf	_test_adc	;volatile
  2185                           
  2186                           ;main.c: 643: if (0xA5 == test_adc)
  2187  048D  30A5               	movlw	165
  2188  048E  0661               	xorwf	_test_adc,w	;volatile
  2189  048F  1D03               	btfss	3,2
  2190  0490  2CB6               	goto	l2855
  2191                           
  2192                           ;main.c: 644: {
  2193                           ;main.c: 645: volatile unsigned long power_temp;
  2194                           ;main.c: 647: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2195  0491  3096               	movlw	150
  2196  0492  01A9               	clrf	___ftdiv@f1
  2197  0493  00AA               	movwf	___ftdiv@f1+1
  2198  0494  304A               	movlw	74
  2199  0495  00AB               	movwf	___ftdiv@f1+2
  2200  0496  0863               	movf	_adresult+1,w	;volatile
  2201  0497  00A4               	movwf	___lwtoft@c+1
  2202  0498  0862               	movf	_adresult,w	;volatile
  2203  0499  00A3               	movwf	___lwtoft@c
  2204  049A  25E8               	fcall	___lwtoft
  2205  049B  0823               	movf	?___lwtoft,w
  2206  049C  00A6               	movwf	___ftdiv@f2
  2207  049D  0824               	movf	?___lwtoft+1,w
  2208  049E  00A7               	movwf	___ftdiv@f2+1
  2209  049F  0825               	movf	?___lwtoft+2,w
  2210  04A0  00A8               	movwf	___ftdiv@f2+2
  2211  04A1  2304               	fcall	___ftdiv
  2212  04A2  0826               	movf	?___ftdiv,w
  2213  04A3  00B5               	movwf	___fttol@f1
  2214  04A4  0827               	movf	?___ftdiv+1,w
  2215  04A5  00B6               	movwf	___fttol@f1+1
  2216  04A6  0828               	movf	?___ftdiv+2,w
  2217  04A7  00B7               	movwf	___fttol@f1+2
  2218  04A8  236A               	fcall	___fttol
  2219  04A9  0838               	movf	?___fttol+3,w
  2220  04AA  00C6               	movwf	checkBatAD@power_temp+3	;volatile
  2221  04AB  0837               	movf	?___fttol+2,w
  2222  04AC  00C5               	movwf	checkBatAD@power_temp+2	;volatile
  2223  04AD  0836               	movf	?___fttol+1,w
  2224  04AE  00C4               	movwf	checkBatAD@power_temp+1	;volatile
  2225  04AF  0835               	movf	?___fttol,w
  2226  04B0  00C3               	movwf	checkBatAD@power_temp	;volatile
  2227                           
  2228                           ;main.c: 648: power_ad = (unsigned int)(power_temp);
  2229  04B1  0844               	movf	checkBatAD@power_temp+1,w	;volatile
  2230  04B2  00CE               	movwf	_power_ad+1	;volatile
  2231  04B3  0843               	movf	checkBatAD@power_temp,w	;volatile
  2232  04B4  00CD               	movwf	_power_ad	;volatile
  2233                           
  2234                           ;main.c: 649: }
  2235  04B5  0008               	return
  2236  04B6                     l2855:	
  2237                           
  2238                           ;main.c: 650: else
  2239                           ;main.c: 651: {
  2240                           ;main.c: 652: ADCON0 = 0;
  2241  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  2242  04B7  0195               	clrf	21	;volatile
  2243                           
  2244                           ;main.c: 653: ADCON1 = 0;
  2245  04B8  0196               	clrf	22	;volatile
  2246                           
  2247                           ;main.c: 654: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2248  04B9  3084               	movlw	132
  2249  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  2250  04BB  00C2               	movwf	??_checkBatAD
  2251  04BC                     u3327:	
  2252  04BC  0BC2               	decfsz	??_checkBatAD,f
  2253  04BD  2CBC               	goto	u3327
  2254  04BE  2CBF               	nop2
  2255  04BF  0008               	return
  2256  04C0                     __end_of_checkBatAD:	
  2257                           
  2258                           	psect	text12
  2259  05E8                     __ptext12:	
  2260 ;; *************** function ___lwtoft *****************
  2261 ;; Defined at:
  2262 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  c               2    3[BANK0 ] unsigned int 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;		None
  2267 ;; Return value:  Size  Location     Type
  2268 ;;                  3    3[BANK0 ] float 
  2269 ;; Registers used:
  2270 ;;		wreg, status,2, status,0, pclath, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 100/0
  2273 ;;		On exit  : 100/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMMON   BANK0   BANK1
  2276 ;;      Params:         0       3       0
  2277 ;;      Locals:         0       0       0
  2278 ;;      Temps:          0       0       0
  2279 ;;      Totals:         0       3       0
  2280 ;;Total ram usage:        3 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    3
  2283 ;; This function calls:
  2284 ;;		___ftpack
  2285 ;; This function is called by:
  2286 ;;		_checkBatAD
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           
  2291                           ;psect for function ___lwtoft
  2292  05E8                     ___lwtoft:	
  2293                           
  2294                           ;incstack = 0
  2295                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2296  05E8  0823               	movf	___lwtoft@c,w
  2297  05E9  00F3               	movwf	___ftpack@arg
  2298  05EA  0824               	movf	___lwtoft@c+1,w
  2299  05EB  00F4               	movwf	___ftpack@arg+1
  2300  05EC  308E               	movlw	142
  2301  05ED  01F5               	clrf	___ftpack@arg+2
  2302  05EE  00F6               	movwf	___ftpack@exp
  2303  05EF  01F7               	clrf	___ftpack@sign
  2304  05F0  240B               	fcall	___ftpack
  2305  05F1  0873               	movf	?___ftpack,w
  2306  05F2  00A3               	movwf	?___lwtoft
  2307  05F3  0874               	movf	?___ftpack+1,w
  2308  05F4  00A4               	movwf	?___lwtoft+1
  2309  05F5  0875               	movf	?___ftpack+2,w
  2310  05F6  00A5               	movwf	?___lwtoft+2
  2311  05F7  0008               	return
  2312  05F8                     __end_of___lwtoft:	
  2313                           
  2314                           	psect	text13
  2315  036A                     __ptext13:	
  2316 ;; *************** function ___fttol *****************
  2317 ;; Defined at:
  2318 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;  f1              3   21[BANK0 ] float 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  lval            4   29[BANK0 ] unsigned long 
  2323 ;;  exp1            1   33[BANK0 ] unsigned char 
  2324 ;;  sign1           1   28[BANK0 ] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  4   21[BANK0 ] long 
  2327 ;; Registers used:
  2328 ;;		wreg, status,2, status,0
  2329 ;; Tracked objects:
  2330 ;;		On entry : 100/0
  2331 ;;		On exit  : 100/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1
  2334 ;;      Params:         0       4       0
  2335 ;;      Locals:         0       6       0
  2336 ;;      Temps:          0       3       0
  2337 ;;      Totals:         0      13       0
  2338 ;;Total ram usage:       13 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    2
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_checkBatAD
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function ___fttol
  2350  036A                     ___fttol:	
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2354  036A  23C1               	fcall	PL8	;call to abstracted procedure
  2355  036B  1003               	clrc
  2356  036C  0D3A               	rlf	??___fttol+1,w
  2357  036D  0D3B               	rlf	??___fttol+2,w
  2358  036E  00C1               	movwf	___fttol@exp1
  2359  036F  0841               	movf	___fttol@exp1,w
  2360  0370  1D03               	btfss	3,2
  2361  0371  2B77               	goto	l2199
  2362  0372                     l2197:	
  2363  0372  01B5               	clrf	?___fttol
  2364  0373  01B6               	clrf	?___fttol+1
  2365  0374  01B7               	clrf	?___fttol+2
  2366  0375  01B8               	clrf	?___fttol+3
  2367  0376  0008               	return
  2368  0377                     l2199:	
  2369  0377  23C1               	fcall	PL8	;call to abstracted procedure
  2370  0378  3017               	movlw	23
  2371  0379                     u1765:	
  2372  0379  1003               	clrc
  2373  037A  0CBB               	rrf	??___fttol+2,f
  2374  037B  0CBA               	rrf	??___fttol+1,f
  2375  037C  0CB9               	rrf	??___fttol,f
  2376  037D  3EFF               	addlw	-1
  2377  037E  1D03               	skipz
  2378  037F  2B79               	goto	u1765
  2379  0380  0839               	movf	??___fttol,w
  2380  0381  00BC               	movwf	___fttol@sign1
  2381  0382  17B6               	bsf	___fttol@f1+1,7
  2382  0383  01B7               	clrf	___fttol@f1+2
  2383  0384  0835               	movf	___fttol@f1,w
  2384  0385  00BD               	movwf	___fttol@lval
  2385  0386  0836               	movf	___fttol@f1+1,w
  2386  0387  00BE               	movwf	___fttol@lval+1
  2387  0388  0837               	movf	___fttol@f1+2,w
  2388  0389  00BF               	movwf	___fttol@lval+2
  2389  038A  308E               	movlw	142
  2390  038B  01C0               	clrf	___fttol@lval+3
  2391  038C  02C1               	subwf	___fttol@exp1,f
  2392  038D  1FC1               	btfss	___fttol@exp1,7
  2393  038E  2B9C               	goto	l2219
  2394  038F  0841               	movf	___fttol@exp1,w
  2395  0390  3A80               	xorlw	128
  2396  0391  3E8F               	addlw	143
  2397  0392  1C03               	btfss	3,0
  2398  0393  2B72               	goto	l2197
  2399  0394                     l2215:	
  2400  0394  1003               	clrc
  2401  0395  0CC0               	rrf	___fttol@lval+3,f
  2402  0396  0CBF               	rrf	___fttol@lval+2,f
  2403  0397  0CBE               	rrf	___fttol@lval+1,f
  2404  0398  0CBD               	rrf	___fttol@lval,f
  2405  0399  0FC1               	incfsz	___fttol@exp1,f
  2406  039A  2B94               	goto	l2215
  2407  039B  2BAA               	goto	l2227
  2408  039C                     l2219:	
  2409  039C  3018               	movlw	24
  2410  039D  0241               	subwf	___fttol@exp1,w
  2411  039E  1803               	btfsc	3,0
  2412  039F  2B72               	goto	l2197
  2413  03A0                     l2225:	
  2414  03A0  0841               	movf	___fttol@exp1,w
  2415  03A1  1903               	btfsc	3,2
  2416  03A2  2BAA               	goto	l2227
  2417  03A3  1003               	clrc
  2418  03A4  0DBD               	rlf	___fttol@lval,f
  2419  03A5  0DBE               	rlf	___fttol@lval+1,f
  2420  03A6  0DBF               	rlf	___fttol@lval+2,f
  2421  03A7  0DC0               	rlf	___fttol@lval+3,f
  2422  03A8  03C1               	decf	___fttol@exp1,f
  2423  03A9  2BA0               	goto	l2225
  2424  03AA                     l2227:	
  2425  03AA  083C               	movf	___fttol@sign1,w
  2426  03AB  1903               	btfsc	3,2
  2427  03AC  2BB8               	goto	l2231
  2428  03AD  09BD               	comf	___fttol@lval,f
  2429  03AE  09BE               	comf	___fttol@lval+1,f
  2430  03AF  09BF               	comf	___fttol@lval+2,f
  2431  03B0  09C0               	comf	___fttol@lval+3,f
  2432  03B1  0ABD               	incf	___fttol@lval,f
  2433  03B2  1903               	skipnz
  2434  03B3  0ABE               	incf	___fttol@lval+1,f
  2435  03B4  1903               	skipnz
  2436  03B5  0ABF               	incf	___fttol@lval+2,f
  2437  03B6  1903               	skipnz
  2438  03B7  0AC0               	incf	___fttol@lval+3,f
  2439  03B8                     l2231:	
  2440  03B8  0840               	movf	___fttol@lval+3,w
  2441  03B9  00B8               	movwf	?___fttol+3
  2442  03BA  083F               	movf	___fttol@lval+2,w
  2443  03BB  00B7               	movwf	?___fttol+2
  2444  03BC  083E               	movf	___fttol@lval+1,w
  2445  03BD  00B6               	movwf	?___fttol+1
  2446  03BE  083D               	movf	___fttol@lval,w
  2447  03BF  00B5               	movwf	?___fttol
  2448  03C0  0008               	return
  2449  03C1                     __end_of___fttol:	
  2450  03C1                     PL8:	
  2451  03C1  0835               	movf	___fttol@f1,w
  2452  03C2  00B9               	movwf	??___fttol
  2453  03C3  0836               	movf	___fttol@f1+1,w
  2454  03C4  00BA               	movwf	??___fttol+1
  2455  03C5  0837               	movf	___fttol@f1+2,w
  2456  03C6  00BB               	movwf	??___fttol+2
  2457  03C7  0008               	return
  2458  03C8                     __end_ofPL8:	
  2459                           
  2460                           	psect	text14
  2461  0304                     __ptext14:	
  2462 ;; *************** function ___ftdiv *****************
  2463 ;; Defined at:
  2464 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  f2              3    6[BANK0 ] float 
  2467 ;;  f1              3    9[BANK0 ] float 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  f3              3   16[BANK0 ] float 
  2470 ;;  sign            1   20[BANK0 ] unsigned char 
  2471 ;;  exp             1   19[BANK0 ] unsigned char 
  2472 ;;  cntr            1   15[BANK0 ] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  3    6[BANK0 ] float 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0, pclath, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 100/0
  2479 ;;		On exit  : 100/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1
  2482 ;;      Params:         0       6       0
  2483 ;;      Locals:         0       6       0
  2484 ;;      Temps:          0       3       0
  2485 ;;      Totals:         0      15       0
  2486 ;;Total ram usage:       15 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    3
  2489 ;; This function calls:
  2490 ;;		___ftpack
  2491 ;; This function is called by:
  2492 ;;		_checkBatAD
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function ___ftdiv
  2498  0304                     ___ftdiv:	
  2499                           
  2500                           ;incstack = 0
  2501                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2502  0304  0829               	movf	___ftdiv@f1,w
  2503  0305  00AC               	movwf	??___ftdiv
  2504  0306  082A               	movf	___ftdiv@f1+1,w
  2505  0307  00AD               	movwf	??___ftdiv+1
  2506  0308  082B               	movf	___ftdiv@f1+2,w
  2507  0309  00AE               	movwf	??___ftdiv+2
  2508  030A  1003               	clrc
  2509  030B  0D2D               	rlf	??___ftdiv+1,w
  2510  030C  0D2E               	rlf	??___ftdiv+2,w
  2511  030D  00B3               	movwf	___ftdiv@exp
  2512  030E  0833               	movf	___ftdiv@exp,w
  2513  030F  1D03               	btfss	3,2
  2514  0310  2B12               	goto	l2781
  2515  0311  2B66               	ljmp	PL12	;call to abstracted procedure
  2516  0312                     l2781:	
  2517  0312  0826               	movf	___ftdiv@f2,w
  2518  0313  00AC               	movwf	??___ftdiv
  2519  0314  0827               	movf	___ftdiv@f2+1,w
  2520  0315  00AD               	movwf	??___ftdiv+1
  2521  0316  0828               	movf	___ftdiv@f2+2,w
  2522  0317  00AE               	movwf	??___ftdiv+2
  2523  0318  1003               	clrc
  2524  0319  0D2D               	rlf	??___ftdiv+1,w
  2525  031A  0D2E               	rlf	??___ftdiv+2,w
  2526  031B  00B4               	movwf	___ftdiv@sign
  2527  031C  0834               	movf	___ftdiv@sign,w
  2528  031D  1D03               	btfss	3,2
  2529  031E  2B20               	goto	l1013
  2530  031F  2B66               	ljmp	PL12	;call to abstracted procedure
  2531  0320                     l1013:	
  2532  0320  3089               	movlw	137
  2533  0321  01B0               	clrf	___ftdiv@f3
  2534  0322  01B1               	clrf	___ftdiv@f3+1
  2535  0323  01B2               	clrf	___ftdiv@f3+2
  2536  0324  0734               	addwf	___ftdiv@sign,w
  2537  0325  00AC               	movwf	??___ftdiv
  2538  0326  02B3               	subwf	___ftdiv@exp,f
  2539  0327  082B               	movf	___ftdiv@f1+2,w
  2540  0328  00B4               	movwf	___ftdiv@sign
  2541  0329  0828               	movf	___ftdiv@f2+2,w
  2542  032A  06B4               	xorwf	___ftdiv@sign,f
  2543  032B  3080               	movlw	128
  2544  032C  05B4               	andwf	___ftdiv@sign,f
  2545  032D  3018               	movlw	24
  2546  032E  17AA               	bsf	___ftdiv@f1+1,7
  2547  032F  01AB               	clrf	___ftdiv@f1+2
  2548  0330  17A7               	bsf	___ftdiv@f2+1,7
  2549  0331  01A8               	clrf	___ftdiv@f2+2
  2550  0332  00AF               	movwf	___ftdiv@cntr
  2551  0333                     l2803:	
  2552  0333  1003               	clrc
  2553  0334  0DB0               	rlf	___ftdiv@f3,f
  2554  0335  0DB1               	rlf	___ftdiv@f3+1,f
  2555  0336  0DB2               	rlf	___ftdiv@f3+2,f
  2556  0337  0828               	movf	___ftdiv@f2+2,w
  2557  0338  022B               	subwf	___ftdiv@f1+2,w
  2558  0339  1D03               	skipz
  2559  033A  2B41               	goto	u2955
  2560  033B  0827               	movf	___ftdiv@f2+1,w
  2561  033C  022A               	subwf	___ftdiv@f1+1,w
  2562  033D  1D03               	skipz
  2563  033E  2B41               	goto	u2955
  2564  033F  0826               	movf	___ftdiv@f2,w
  2565  0340  0229               	subwf	___ftdiv@f1,w
  2566  0341                     u2955:	
  2567  0341  1C03               	skipc
  2568  0342  2B4F               	goto	L11
  2569  0343  0826               	movf	___ftdiv@f2,w
  2570  0344  02A9               	subwf	___ftdiv@f1,f
  2571  0345  0827               	movf	___ftdiv@f2+1,w
  2572  0346  1C03               	skipc
  2573  0347  0F27               	incfsz	___ftdiv@f2+1,w
  2574  0348  02AA               	subwf	___ftdiv@f1+1,f
  2575  0349  0828               	movf	___ftdiv@f2+2,w
  2576  034A  1C03               	skipc
  2577  034B  0A28               	incf	___ftdiv@f2+2,w
  2578  034C  02AB               	subwf	___ftdiv@f1+2,f
  2579  034D  1430               	bsf	___ftdiv@f3,0
  2580  034E  1003               	clrc
  2581  034F                     L11:	
  2582  034F  0DA9               	rlf	___ftdiv@f1,f
  2583  0350  0DAA               	rlf	___ftdiv@f1+1,f
  2584  0351  0DAB               	rlf	___ftdiv@f1+2,f
  2585  0352  0BAF               	decfsz	___ftdiv@cntr,f
  2586  0353  2B33               	goto	l2803
  2587  0354  0830               	movf	___ftdiv@f3,w
  2588  0355  00F3               	movwf	___ftpack@arg
  2589  0356  0831               	movf	___ftdiv@f3+1,w
  2590  0357  00F4               	movwf	___ftpack@arg+1
  2591  0358  0832               	movf	___ftdiv@f3+2,w
  2592  0359  00F5               	movwf	___ftpack@arg+2
  2593  035A  0833               	movf	___ftdiv@exp,w
  2594  035B  00F6               	movwf	___ftpack@exp
  2595  035C  0834               	movf	___ftdiv@sign,w
  2596  035D  00F7               	movwf	___ftpack@sign
  2597  035E  240B               	fcall	___ftpack
  2598  035F  0873               	movf	?___ftpack,w
  2599  0360  00A6               	movwf	?___ftdiv
  2600  0361  0874               	movf	?___ftpack+1,w
  2601  0362  00A7               	movwf	?___ftdiv+1
  2602  0363  0875               	movf	?___ftpack+2,w
  2603  0364  00A8               	movwf	?___ftdiv+2
  2604  0365  0008               	return
  2605  0366                     __end_of___ftdiv:	
  2606  0366                     PL12:	
  2607  0366  01A6               	clrf	?___ftdiv
  2608  0367  01A7               	clrf	?___ftdiv+1
  2609  0368  01A8               	clrf	?___ftdiv+2
  2610  0369  0008               	return
  2611  036A                     __end_ofPL12:	
  2612                           
  2613                           	psect	text15
  2614  040B                     __ptext15:	
  2615 ;; *************** function ___ftpack *****************
  2616 ;; Defined at:
  2617 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  arg             3    3[COMMON] unsigned um
  2620 ;;  exp             1    6[COMMON] unsigned char 
  2621 ;;  sign            1    7[COMMON] unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  3    3[COMMON] float 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0
  2628 ;; Tracked objects:
  2629 ;;		On entry : 100/0
  2630 ;;		On exit  : 100/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1
  2633 ;;      Params:         5       0       0
  2634 ;;      Locals:         0       0       0
  2635 ;;      Temps:          0       3       0
  2636 ;;      Totals:         5       3       0
  2637 ;;Total ram usage:        8 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    2
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		___ftdiv
  2644 ;;		___lwtoft
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function ___ftpack
  2650  040B                     ___ftpack:	
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2654  040B  0876               	movf	___ftpack@exp,w
  2655  040C  1903               	btfsc	3,2
  2656  040D  2C13               	goto	l959
  2657  040E  0875               	movf	___ftpack@arg+2,w
  2658  040F  0474               	iorwf	___ftpack@arg+1,w
  2659  0410  0473               	iorwf	___ftpack@arg,w
  2660  0411  1D03               	skipz
  2661  0412  2C19               	goto	l2759
  2662  0413                     l959:	
  2663  0413  01F3               	clrf	?___ftpack
  2664  0414  01F4               	clrf	?___ftpack+1
  2665  0415  01F5               	clrf	?___ftpack+2
  2666  0416  0008               	return
  2667  0417                     l2757:	
  2668  0417  0AF6               	incf	___ftpack@exp,f
  2669  0418  2447               	fcall	PL14	;call to abstracted procedure
  2670  0419                     l2759:	
  2671  0419  30FE               	movlw	254
  2672  041A  0575               	andwf	___ftpack@arg+2,w
  2673  041B  1903               	btfsc	3,2
  2674  041C  2C25               	goto	l2763
  2675  041D  2C17               	goto	l2757
  2676  041E                     l2761:	
  2677  041E  0AF6               	incf	___ftpack@exp,f
  2678  041F  0AF3               	incf	___ftpack@arg,f
  2679  0420  1903               	skipnz
  2680  0421  0AF4               	incf	___ftpack@arg+1,f
  2681  0422  1903               	skipnz
  2682  0423  0AF5               	incf	___ftpack@arg+2,f
  2683  0424  2447               	fcall	PL14	;call to abstracted procedure
  2684  0425                     l2763:	
  2685  0425  30FF               	movlw	255
  2686  0426  0575               	andwf	___ftpack@arg+2,w
  2687  0427  1903               	btfsc	3,2
  2688  0428  2C33               	goto	l2767
  2689  0429  2C1E               	goto	l2761
  2690  042A                     l2769:	
  2691  042A  3002               	movlw	2
  2692  042B  0276               	subwf	___ftpack@exp,w
  2693  042C  1C03               	btfss	3,0
  2694  042D  2C35               	goto	l971
  2695  042E  03F6               	decf	___ftpack@exp,f
  2696  042F  1003               	clrc
  2697  0430  0DF3               	rlf	___ftpack@arg,f
  2698  0431  0DF4               	rlf	___ftpack@arg+1,f
  2699  0432  0DF5               	rlf	___ftpack@arg+2,f
  2700  0433                     l2767:	
  2701  0433  1FF4               	btfss	___ftpack@arg+1,7
  2702  0434  2C2A               	goto	l2769
  2703  0435                     l971:	
  2704  0435  1C76               	btfss	___ftpack@exp,0
  2705  0436  13F4               	bcf	___ftpack@arg+1,7
  2706  0437  1003               	clrc
  2707  0438  0CF6               	rrf	___ftpack@exp,f
  2708  0439  0876               	movf	___ftpack@exp,w
  2709  043A  00A2               	movwf	??___ftpack+2
  2710  043B  01A1               	clrf	??___ftpack+1
  2711  043C  01A0               	clrf	??___ftpack
  2712  043D  0820               	movf	??___ftpack,w
  2713  043E  04F3               	iorwf	___ftpack@arg,f
  2714  043F  0821               	movf	??___ftpack+1,w
  2715  0440  04F4               	iorwf	___ftpack@arg+1,f
  2716  0441  0822               	movf	??___ftpack+2,w
  2717  0442  04F5               	iorwf	___ftpack@arg+2,f
  2718  0443  0877               	movf	___ftpack@sign,w
  2719  0444  1D03               	btfss	3,2
  2720  0445  17F5               	bsf	___ftpack@arg+2,7
  2721  0446  0008               	return
  2722  0447                     __end_of___ftpack:	
  2723  0447                     PL14:	
  2724  0447  1003               	clrc
  2725  0448  0CF5               	rrf	___ftpack@arg+2,f
  2726  0449  0CF4               	rrf	___ftpack@arg+1,f
  2727  044A  0CF3               	rrf	___ftpack@arg,f
  2728  044B  0008               	return
  2729  044C                     __end_ofPL14:	
  2730                           
  2731                           	psect	text16
  2732  0017                     __ptext16:	
  2733 ;; *************** function _ADC_Sample *****************
  2734 ;; Defined at:
  2735 ;;		line 869 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  adch            1    wreg     unsigned char 
  2738 ;;  adldo           1    3[COMMON] unsigned char 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  adch            1    1[BANK0 ] unsigned char 
  2741 ;;  j               1    0[BANK0 ] unsigned char 
  2742 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2743 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2744 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2745 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2746 ;;  i               1    2[BANK0 ] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      unsigned char 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 100/0
  2753 ;;		On exit  : 100/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1
  2756 ;;      Params:         1       0       0
  2757 ;;      Locals:         0      13       0
  2758 ;;      Temps:          4       0       0
  2759 ;;      Totals:         5      13       0
  2760 ;;Total ram usage:       18 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    2
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_checkBatAD
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _ADC_Sample
  2772  0017                     _ADC_Sample:	
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2776                           ;ADC_Sample@adch stored from wreg
  2777  0017  00A1               	movwf	ADC_Sample@adch
  2778                           
  2779                           ;main.c: 871: volatile unsigned long adsum = 0;
  2780                           
  2781                           ;main.c: 872: volatile unsigned int admin = 0, admax = 0;
  2782  0018  20EF               	fcall	PL6	;call to abstracted procedure
  2783                           
  2784                           ;main.c: 873: volatile unsigned int ad_temp = 0;
  2785  0019  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  2786  001A  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2787                           
  2788                           ;main.c: 875: if ((!LDO_EN) && (adldo & 0x04) )
  2789  001B  1683               	bsf	3,5	;RP0=1, select bank1
  2790  001C  1D16               	btfss	22,2	;volatile
  2791  001D  1D73               	btfss	ADC_Sample@adldo,2
  2792  001E  2826               	goto	l2093
  2793                           
  2794                           ;main.c: 876: {
  2795                           ;main.c: 878: ADCON1 = adldo;
  2796  001F  0873               	movf	ADC_Sample@adldo,w
  2797  0020  0096               	movwf	22	;volatile
  2798                           
  2799                           ;main.c: 879: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2800  0021  3085               	movlw	133
  2801  0022  00F4               	movwf	??_ADC_Sample
  2802  0023                     u3337:	
  2803  0023  0BF4               	decfsz	??_ADC_Sample,f
  2804  0024  2823               	goto	u3337
  2805                           
  2806                           ;main.c: 880: }
  2807  0025  2828               	goto	l2095
  2808  0026                     l2093:	
  2809                           
  2810                           ;main.c: 881: else
  2811                           ;main.c: 882: ADCON1 = adldo;
  2812  0026  0873               	movf	ADC_Sample@adldo,w
  2813  0027  0096               	movwf	22	;volatile
  2814  0028                     l2095:	
  2815                           
  2816                           ;main.c: 884: if(adch & 0x10)
  2817  0028  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0029  1E21               	btfss	ADC_Sample@adch,4
  2819  002A  2830               	goto	l2103
  2820                           
  2821                           ;main.c: 885: {
  2822                           ;main.c: 886: CHS4 = 1;
  2823  002B  1683               	bsf	3,5	;RP0=1, select bank1
  2824  002C  1716               	bsf	22,6	;volatile
  2825                           
  2826                           ;main.c: 887: adch &= 0x0f;
  2827  002D  300F               	movlw	15
  2828  002E  1283               	bcf	3,5	;RP0=0, select bank0
  2829  002F  05A1               	andwf	ADC_Sample@adch,f
  2830  0030                     l2103:	
  2831                           
  2832                           ;main.c: 890: for (i = 0; i < 10; i++)
  2833  0030  01A2               	clrf	ADC_Sample@i
  2834  0031                     l2109:	
  2835                           
  2836                           ;main.c: 891: {
  2837                           ;main.c: 892: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2838  0031  0821               	movf	ADC_Sample@adch,w
  2839  0032  00F4               	movwf	??_ADC_Sample
  2840  0033  3001               	movlw	1
  2841  0034  1003               	clrc
  2842  0035                     L12:	
  2843  0035  0DF4               	rlf	??_ADC_Sample,f
  2844  0036  3EFF               	addlw	-1
  2845  0037  1003               	clrc
  2846  0038  1D03               	skipz
  2847  0039  2835               	goto	L12
  2848  003A  0D74               	rlf	??_ADC_Sample,w
  2849  003B  3841               	iorlw	65
  2850  003C  1683               	bsf	3,5	;RP0=1, select bank1
  2851  003D  0095               	movwf	21	;volatile
  2852  003E  0000               	nop	;# 
  2853  003F  0000               	nop	;# 
  2854  0040  0000               	nop	;# 
  2855  0041  0000               	nop	;# 
  2856                           
  2857                           ;main.c: 897: GODONE = 1;
  2858  0042  1683               	bsf	3,5	;RP0=1, select bank1
  2859  0043  1495               	bsf	21,1	;volatile
  2860                           
  2861                           ;main.c: 899: unsigned char j = 0;
  2862  0044  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0045  01A0               	clrf	ADC_Sample@j
  2864  0046                     l788:	
  2865                           ;main.c: 900: while (GODONE)
  2866                           
  2867  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2868  0047  1C95               	btfss	21,1	;volatile
  2869  0048  2851               	goto	l2119
  2870                           
  2871                           ;main.c: 901: {
  2872                           ;main.c: 902: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2873  0049  284A               	nop2	;2 cycle nop
  2874  004A  284B               	nop2	;2 cycle nop
  2875  004B  284C               	nop2	;2 cycle nop
  2876  004C  284D               	nop2	;2 cycle nop
  2877                           
  2878                           ;main.c: 904: if (0 == (--j))
  2879  004D  1283               	bcf	3,5	;RP0=0, select bank0
  2880  004E  0BA0               	decfsz	ADC_Sample@j,f
  2881  004F  2846               	goto	l788
  2882                           
  2883                           ;main.c: 905: return 0;
  2884  0050  3400               	retlw	0
  2885  0051                     l2119:	
  2886                           
  2887                           ;main.c: 906: }
  2888                           ;main.c: 908: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2889  0051  0819               	movf	25,w	;volatile
  2890  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0053  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  2892  0054  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2893  0055  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  2894  0056  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2895  0057  30F0               	movlw	240
  2896  0058  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2897  0059  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2898  005A  390F               	andlw	15
  2899  005B  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2900  005C  30F0               	movlw	240
  2901  005D  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  2902  005E  1683               	bsf	3,5	;RP0=1, select bank1
  2903  005F  0E18               	swapf	24,w	;volatile
  2904  0060  390F               	andlw	15
  2905  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0062  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  2907  0063  1803               	skipnc
  2908  0064  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2909                           
  2910                           ;main.c: 910: if (0 == admax)
  2911  0065  0829               	movf	ADC_Sample@admax,w	;volatile
  2912  0066  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  2913  0067  1D03               	btfss	3,2
  2914  0068  286B               	goto	l2127
  2915                           
  2916                           ;main.c: 911: {
  2917                           ;main.c: 912: admax = ad_temp;
  2918  0069  20F8               	fcall	PL10	;call to abstracted procedure
  2919  006A  287D               	goto	l2133
  2920  006B                     l2127:	
  2921                           ;main.c: 914: }
  2922                           
  2923                           ;main.c: 913: admin = ad_temp;
  2924                           
  2925                           
  2926                           ;main.c: 915: else if (ad_temp > admax)
  2927  006B  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2928  006C  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  2929  006D  1D03               	skipz
  2930  006E  2871               	goto	u1635
  2931  006F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2932  0070  0229               	subwf	ADC_Sample@admax,w	;volatile
  2933  0071                     u1635:	
  2934  0071  1803               	skipnc
  2935  0072  2875               	goto	l2131
  2936                           
  2937                           ;main.c: 916: admax = ad_temp;
  2938  0073  20F8               	fcall	PL10	;call to abstracted procedure
  2939  0074  2881               	goto	l794
  2940  0075                     l2131:	
  2941                           
  2942                           ;main.c: 917: else if (ad_temp < admin)
  2943  0075  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2944  0076  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2945  0077  1D03               	skipz
  2946  0078  287B               	goto	u1645
  2947  0079  0827               	movf	ADC_Sample@admin,w	;volatile
  2948  007A  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  2949  007B                     u1645:	
  2950  007B  1803               	skipnc
  2951  007C  2881               	goto	l794
  2952  007D                     l2133:	
  2953                           
  2954                           ;main.c: 918: admin = ad_temp;
  2955  007D  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2956  007E  00A8               	movwf	ADC_Sample@admin+1	;volatile
  2957  007F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2958  0080  00A7               	movwf	ADC_Sample@admin	;volatile
  2959  0081                     l794:	
  2960                           
  2961                           ;main.c: 920: adsum += ad_temp;
  2962  0081  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2963  0082  00F4               	movwf	??_ADC_Sample
  2964  0083  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2965  0084  00F5               	movwf	??_ADC_Sample+1
  2966  0085  01F6               	clrf	??_ADC_Sample+2
  2967  0086  01F7               	clrf	??_ADC_Sample+3
  2968  0087  0874               	movf	??_ADC_Sample,w
  2969  0088  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  2970  0089  0875               	movf	??_ADC_Sample+1,w
  2971  008A  1103               	clrz
  2972  008B  1803               	skipnc
  2973  008C  3E01               	addlw	1
  2974  008D  1D03               	btfss	3,2
  2975  008E  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  2976  008F  0876               	movf	??_ADC_Sample+2,w
  2977  0090  1103               	clrz
  2978  0091  1803               	skipnc
  2979  0092  3E01               	addlw	1
  2980  0093  1D03               	btfss	3,2
  2981  0094  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  2982  0095  0877               	movf	??_ADC_Sample+3,w
  2983  0096  1103               	clrz
  2984  0097  1803               	skipnc
  2985  0098  3E01               	addlw	1
  2986  0099  1D03               	btfss	3,2
  2987  009A  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  2988  009B  300A               	movlw	10
  2989  009C  0AA2               	incf	ADC_Sample@i,f
  2990  009D  0222               	subwf	ADC_Sample@i,w
  2991  009E  1C03               	skipc
  2992  009F  2831               	goto	l2109
  2993                           
  2994                           ;main.c: 921: }
  2995                           ;main.c: 922: adsum -= admax;
  2996  00A0  0829               	movf	ADC_Sample@admax,w	;volatile
  2997  00A1  00F4               	movwf	??_ADC_Sample
  2998  00A2  082A               	movf	ADC_Sample@admax+1,w	;volatile
  2999  00A3  20E0               	fcall	PL2	;call to abstracted procedure
  3000  00A4  1C03               	skipc
  3001  00A5  0F77               	incfsz	??_ADC_Sample+3,w
  3002  00A6  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3003                           
  3004                           ;main.c: 923: if (adsum >= admin)
  3005  00A7  0827               	movf	ADC_Sample@admin,w	;volatile
  3006  00A8  00F4               	movwf	??_ADC_Sample
  3007  00A9  0828               	movf	ADC_Sample@admin+1,w	;volatile
  3008  00AA  00F5               	movwf	??_ADC_Sample+1
  3009  00AB  01F6               	clrf	??_ADC_Sample+2
  3010  00AC  01F7               	clrf	??_ADC_Sample+3
  3011  00AD  0877               	movf	??_ADC_Sample+3,w
  3012  00AE  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  3013  00AF  1D03               	skipz
  3014  00B0  28BB               	goto	u1685
  3015  00B1  0876               	movf	??_ADC_Sample+2,w
  3016  00B2  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  3017  00B3  1D03               	skipz
  3018  00B4  28BB               	goto	u1685
  3019  00B5  0875               	movf	??_ADC_Sample+1,w
  3020  00B6  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  3021  00B7  1D03               	skipz
  3022  00B8  28BB               	goto	u1685
  3023  00B9  0874               	movf	??_ADC_Sample,w
  3024  00BA  0223               	subwf	ADC_Sample@adsum,w	;volatile
  3025  00BB                     u1685:	
  3026  00BB  1C03               	skipc
  3027  00BC  28C5               	goto	l798
  3028                           
  3029                           ;main.c: 924: adsum -= admin;
  3030  00BD  0827               	movf	ADC_Sample@admin,w	;volatile
  3031  00BE  00F4               	movwf	??_ADC_Sample
  3032  00BF  0828               	movf	ADC_Sample@admin+1,w	;volatile
  3033  00C0  20E0               	fcall	PL2	;call to abstracted procedure
  3034  00C1  1C03               	skipc
  3035  00C2  0F77               	incfsz	??_ADC_Sample+3,w
  3036  00C3  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3037  00C4  28C9               	goto	l2143
  3038  00C5                     l798:	
  3039                           
  3040                           ;main.c: 925: else
  3041                           ;main.c: 926: adsum = 0;
  3042  00C5  01A3               	clrf	ADC_Sample@adsum	;volatile
  3043  00C6  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3044  00C7  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3045  00C8  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3046  00C9                     l2143:	
  3047                           
  3048                           ;main.c: 928: adresult = adsum >> 3;
  3049  00C9  0823               	movf	ADC_Sample@adsum,w	;volatile
  3050  00CA  00F4               	movwf	??_ADC_Sample
  3051  00CB  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  3052  00CC  00F5               	movwf	??_ADC_Sample+1
  3053  00CD  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  3054  00CE  00F6               	movwf	??_ADC_Sample+2
  3055  00CF  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  3056  00D0  00F7               	movwf	??_ADC_Sample+3
  3057  00D1  3003               	movlw	3
  3058  00D2                     u1705:	
  3059  00D2  1003               	clrc
  3060  00D3  0CF7               	rrf	??_ADC_Sample+3,f
  3061  00D4  0CF6               	rrf	??_ADC_Sample+2,f
  3062  00D5  0CF5               	rrf	??_ADC_Sample+1,f
  3063  00D6  0CF4               	rrf	??_ADC_Sample,f
  3064  00D7  3EFF               	addlw	-1
  3065  00D8  1D03               	skipz
  3066  00D9  28D2               	goto	u1705
  3067  00DA  0875               	movf	??_ADC_Sample+1,w
  3068  00DB  00E3               	movwf	_adresult+1	;volatile
  3069  00DC  0874               	movf	??_ADC_Sample,w
  3070  00DD  00E2               	movwf	_adresult	;volatile
  3071                           
  3072                           ;main.c: 930: adsum = 0;
  3073                           
  3074                           ;main.c: 931: admin = 0;
  3075                           
  3076                           ;main.c: 932: admax = 0;
  3077  00DE  20EF               	fcall	PL6	;call to abstracted procedure
  3078                           
  3079                           ;main.c: 933: return 0xA5;
  3080  00DF  34A5               	retlw	165
  3081  00E0                     __end_of_ADC_Sample:	
  3082  00E0                     PL2:	
  3083  00E0  00F5               	movwf	??_ADC_Sample+1
  3084  00E1  01F6               	clrf	??_ADC_Sample+2
  3085  00E2  01F7               	clrf	??_ADC_Sample+3
  3086  00E3  0874               	movf	??_ADC_Sample,w
  3087  00E4  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  3088  00E5  0875               	movf	??_ADC_Sample+1,w
  3089  00E6  1C03               	skipc
  3090  00E7  0F75               	incfsz	??_ADC_Sample+1,w
  3091  00E8  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  3092  00E9  0876               	movf	??_ADC_Sample+2,w
  3093  00EA  1C03               	skipc
  3094  00EB  0F76               	incfsz	??_ADC_Sample+2,w
  3095  00EC  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  3096  00ED  0877               	movf	??_ADC_Sample+3,w
  3097  00EE  0008               	return
  3098  00EF                     __end_ofPL2:	
  3099  00EF                     PL6:	
  3100  00EF  01A3               	clrf	ADC_Sample@adsum	;volatile
  3101  00F0  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3102  00F1  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3103  00F2  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3104  00F3  01A7               	clrf	ADC_Sample@admin	;volatile
  3105  00F4  01A8               	clrf	ADC_Sample@admin+1	;volatile
  3106  00F5  01A9               	clrf	ADC_Sample@admax	;volatile
  3107  00F6  01AA               	clrf	ADC_Sample@admax+1	;volatile
  3108  00F7  0008               	return
  3109  00F8                     __end_ofPL6:	
  3110  00F8                     PL10:	
  3111  00F8  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3112  00F9  00AA               	movwf	ADC_Sample@admax+1	;volatile
  3113  00FA  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  3114  00FB  00A9               	movwf	ADC_Sample@admax	;volatile
  3115  00FC  0008               	return
  3116  00FD                     __end_ofPL10:	
  3117                           
  3118                           	psect	text17
  3119  03C8                     __ptext17:	
  3120 ;; *************** function _Sleep_Mode *****************
  3121 ;; Defined at:
  3122 ;;		line 792 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, status,2, status,0, pclath, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 100/0
  3133 ;;		On exit  : 100/100
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMMON   BANK0   BANK1
  3136 ;;      Params:         0       0       0
  3137 ;;      Locals:         0       0       0
  3138 ;;      Temps:          0       0       0
  3139 ;;      Totals:         0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    3
  3143 ;; This function calls:
  3144 ;;		_AD_Init
  3145 ;;		_Init_System
  3146 ;; This function is called by:
  3147 ;;		_main
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _Sleep_Mode
  3153  03C8                     _Sleep_Mode:	
  3154                           
  3155                           ;main.c: 794: INTCON = 0;
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3159  03C8  018B               	clrf	11	;volatile
  3160                           
  3161                           ;main.c: 796: OPTION_REG = 0;
  3162  03C9  0181               	clrf	1	;volatile
  3163                           
  3164                           ;main.c: 798: WPUA = 0x00;
  3165  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  3166  03CB  0188               	clrf	8	;volatile
  3167                           
  3168                           ;main.c: 799: TRISA = 0x01;
  3169  03CC  3001               	movlw	1
  3170                           
  3171                           ;main.c: 800: TRISB = 0x07;
  3172                           
  3173                           ;main.c: 802: PORTA = 0X00;
  3174                           
  3175                           ;main.c: 803: PORTB = 0X10;
  3176  03CD  2401               	fcall	PL4	;call to abstracted procedure
  3177                           
  3178                           ;main.c: 804: WPUB = 0x05;
  3179  03CE  3005               	movlw	5
  3180  03CF  0088               	movwf	8	;volatile
  3181                           
  3182                           ;main.c: 806: ADCON0 = 0;
  3183  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  3184  03D1  0195               	clrf	21	;volatile
  3185                           
  3186                           ;main.c: 807: ADCON1 = 0;
  3187  03D2  0196               	clrf	22	;volatile
  3188                           
  3189                           ;main.c: 809: PWMCON0 = 0;
  3190  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  3191  03D4  0195               	clrf	21	;volatile
  3192                           
  3193                           ;main.c: 811: OSCCON = 0X70;
  3194  03D5  3070               	movlw	112
  3195  03D6  0094               	movwf	20	;volatile
  3196                           
  3197                           ;main.c: 813: IOCA = 0B00000000;
  3198  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  3199  03D8  0189               	clrf	9	;volatile
  3200                           
  3201                           ;main.c: 814: IOCB = 0x06;
  3202  03D9  3006               	movlw	6
  3203  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3204  03DB  0089               	movwf	9	;volatile
  3205                           
  3206                           ;main.c: 816: RAIE = 1;
  3207  03DC  158E               	bsf	14,3	;volatile
  3208                           
  3209                           ;main.c: 817: PEIE = 1;
  3210  03DD  170B               	bsf	11,6	;volatile
  3211                           
  3212                           ;main.c: 818: RBIE = 1;
  3213  03DE  158B               	bsf	11,3	;volatile
  3214                           
  3215                           ;main.c: 819: GIE = 0;
  3216  03DF  138B               	bcf	11,7	;volatile
  3217                           
  3218                           ;main.c: 821: PIE1 &= 0X08;
  3219  03E0  3008               	movlw	8
  3220  03E1  058E               	andwf	14,f	;volatile
  3221                           
  3222                           ;main.c: 822: PIR1 = 0;
  3223  03E2  018D               	clrf	13	;volatile
  3224                           
  3225                           ;main.c: 823: INTCON &= 0XC8;
  3226  03E3  30C8               	movlw	200
  3227  03E4  058B               	andwf	11,f	;volatile
  3228                           
  3229                           ;main.c: 825: PORTA;
  3230  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  3231  03E6  0806               	movf	6,w	;volatile
  3232                           
  3233                           ;main.c: 826: RAIF = 0;
  3234  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  3235  03E8  118D               	bcf	13,3	;volatile
  3236                           
  3237                           ;main.c: 827: PORTB;
  3238  03E9  0806               	movf	6,w	;volatile
  3239                           
  3240                           ;main.c: 828: RBIF = 0;
  3241  03EA  100B               	bcf	11,0	;volatile
  3242  03EB  0064               	clrwdt	;# 
  3243  03EC  0063               	sleep	;# 
  3244  03ED  0000               	nop	;# 
  3245  03EE  0064               	clrwdt	;# 
  3246  03EF  0000               	nop	;# 
  3247  03F0  0000               	nop	;# 
  3248  03F1  0000               	nop	;# 
  3249  03F2  0000               	nop	;# 
  3250  03F3  0000               	nop	;# 
  3251                           
  3252                           ;main.c: 840: if(RAIF) RAIF = 0;
  3253  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  3254  03F5  198D               	btfsc	13,3	;volatile
  3255  03F6  118D               	bcf	13,3	;volatile
  3256                           
  3257                           ;main.c: 841: if(RBIF) RBIF = 0;
  3258  03F7  180B               	btfsc	11,0	;volatile
  3259  03F8  100B               	bcf	11,0	;volatile
  3260                           
  3261                           ;main.c: 842: if(TMR2IF) TMR2IF = 0;
  3262  03F9  188D               	btfsc	13,1	;volatile
  3263  03FA  108D               	bcf	13,1	;volatile
  3264                           
  3265                           ;main.c: 843: IOCA = 0B00000000;
  3266  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  3267  03FC  0189               	clrf	9	;volatile
  3268                           
  3269                           ;main.c: 844: IOCB = 0B00000000;
  3270  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  3271  03FE  0189               	clrf	9	;volatile
  3272                           
  3273                           ;main.c: 845: Init_System();
  3274  03FF  25AC               	fcall	_Init_System
  3275                           
  3276                           ;main.c: 846: AD_Init();
  3277  0400  2E18               	ljmp	l2019
  3278  0401                     __end_of_Sleep_Mode:	
  3279  0401                     PL4:	
  3280  0401  0085               	movwf	5	;volatile
  3281  0402  3007               	movlw	7
  3282  0403  1283               	bcf	3,5	;RP0=0, select bank0
  3283  0404  0085               	movwf	5	;volatile
  3284  0405  1683               	bsf	3,5	;RP0=1, select bank1
  3285  0406  0186               	clrf	6	;volatile
  3286  0407  3010               	movlw	16
  3287  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3288  0409  0086               	movwf	6	;volatile
  3289  040A  0008               	return
  3290  040B                     __end_ofPL4:	
  3291                           
  3292                           	psect	text18
  3293  05AC                     __ptext18:	
  3294 ;; *************** function _Init_System *****************
  3295 ;; Defined at:
  3296 ;;		line 668 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;		None
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2
  3305 ;; Tracked objects:
  3306 ;;		On entry : 100/0
  3307 ;;		On exit  : 100/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1
  3310 ;;      Params:         0       0       0
  3311 ;;      Locals:         0       0       0
  3312 ;;      Temps:          0       0       0
  3313 ;;      Totals:         0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    2
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;;		_Sleep_Mode
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           
  3326                           ;psect for function _Init_System
  3327  05AC                     _Init_System:	
  3328                           
  3329                           ;incstack = 0
  3330                           ; Regs used in _Init_System: [wreg+status,2]
  3331  05AC  0000               	nop	;# 
  3332  05AD  0064               	clrwdt	;# 
  3333                           
  3334                           ;main.c: 672: OPTION_REG = 0;
  3335  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3336  05AF  0181               	clrf	1	;volatile
  3337  05B0  0064               	clrwdt	;# 
  3338                           
  3339                           ;main.c: 674: OSCCON = 0X72;
  3340  05B1  3072               	movlw	114
  3341  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  3342  05B3  0094               	movwf	20	;volatile
  3343                           
  3344                           ;main.c: 676: WPUA = 0x00;
  3345  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  3346  05B5  0188               	clrf	8	;volatile
  3347                           
  3348                           ;main.c: 677: WPDA = 0x00;
  3349  05B6  0187               	clrf	7	;volatile
  3350                           
  3351                           ;main.c: 678: WPUB = 0x05;
  3352  05B7  3005               	movlw	5
  3353  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  3354  05B9  0088               	movwf	8	;volatile
  3355                           
  3356                           ;main.c: 680: TRISA = 0x01;
  3357  05BA  3001               	movlw	1
  3358  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  3359                           
  3360                           ;main.c: 681: TRISB = 0x07;
  3361                           
  3362                           ;main.c: 683: PORTA = 0X00;
  3363                           
  3364                           ;main.c: 684: PORTB = 0X10;
  3365  05BC  2401               	fcall	PL4	;call to abstracted procedure
  3366                           
  3367                           ;main.c: 688: PR2 = 249;
  3368  05BD  30F9               	movlw	249
  3369  05BE  0091               	movwf	17	;volatile
  3370                           
  3371                           ;main.c: 689: TMR2IF = 0;
  3372  05BF  108D               	bcf	13,1	;volatile
  3373                           
  3374                           ;main.c: 690: TMR2IE = 1;
  3375  05C0  148E               	bsf	14,1	;volatile
  3376                           
  3377                           ;main.c: 692: T2CON = 0B00000100;
  3378  05C1  3004               	movlw	4
  3379  05C2  0093               	movwf	19	;volatile
  3380                           
  3381                           ;main.c: 693: INTCON = 0XC0;
  3382  05C3  30C0               	movlw	192
  3383  05C4  008B               	movwf	11	;volatile
  3384  05C5  0008               	return
  3385  05C6                     __end_of_Init_System:	
  3386                           
  3387                           	psect	text19
  3388  0618                     __ptext19:	
  3389 ;; *************** function _AD_Init *****************
  3390 ;; Defined at:
  3391 ;;		line 705 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2
  3400 ;; Tracked objects:
  3401 ;;		On entry : 100/0
  3402 ;;		On exit  : 100/100
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1
  3405 ;;      Params:         0       0       0
  3406 ;;      Locals:         0       0       0
  3407 ;;      Temps:          0       0       0
  3408 ;;      Totals:         0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    2
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;;		_Sleep_Mode
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _AD_Init
  3422  0618                     _AD_Init:	
  3423  0618                     l2019:	
  3424                           ;incstack = 0
  3425                           ; Regs used in _AD_Init: [wreg+status,2]
  3426                           
  3427                           
  3428                           ;main.c: 738: ADCON0 = 0X41;
  3429  0618  3041               	movlw	65
  3430  0619  1683               	bsf	3,5	;RP0=1, select bank1
  3431  061A  0095               	movwf	21	;volatile
  3432                           
  3433                           ;main.c: 755: ADCON1 = 0;
  3434  061B  0196               	clrf	22	;volatile
  3435                           
  3436                           ;main.c: 756: ANSEL0 = 0X00;
  3437  061C  0193               	clrf	19	;volatile
  3438                           
  3439                           ;main.c: 757: ANSEL1 = 0x00;
  3440  061D  0194               	clrf	20	;volatile
  3441  061E  0008               	return
  3442  061F                     __end_of_AD_Init:	
  3443                           
  3444                           	psect	text20
  3445  0558                     __ptext20:	
  3446 ;; *************** function _Isr_Timer *****************
  3447 ;; Defined at:
  3448 ;;		line 93 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 100/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1
  3462 ;;      Params:         0       0       0
  3463 ;;      Locals:         0       0       0
  3464 ;;      Temps:          3       0       0
  3465 ;;      Totals:         3       0       0
  3466 ;;Total ram usage:        3 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    1
  3469 ;; This function calls:
  3470 ;;		_ledShow
  3471 ;; This function is called by:
  3472 ;;		Interrupt level 1
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _Isr_Timer
  3478  0558                     _Isr_Timer:	
  3479                           
  3480                           ;main.c: 95: if(TMR2IF)
  3481  0558  1283               	bcf	3,5	;RP0=0, select bank0
  3482  0559  1C8D               	btfss	13,1	;volatile
  3483  055A  2D6C               	goto	i1l612
  3484                           
  3485                           ;main.c: 96: {
  3486                           ;main.c: 97: TMR2IF = 0;
  3487  055B  108D               	bcf	13,1	;volatile
  3488                           
  3489                           ;main.c: 98: if(++intCount >= 160)
  3490  055C  30A0               	movlw	160
  3491  055D  0AE0               	incf	_intCount,f
  3492  055E  0260               	subwf	_intCount,w
  3493  055F  1C03               	skipc
  3494  0560  2D69               	goto	i1l2677
  3495  0561  3064               	movlw	100
  3496                           
  3497                           ;main.c: 99: {
  3498                           ;main.c: 100: intCount = 0;
  3499  0562  01E0               	clrf	_intCount
  3500                           
  3501                           ;main.c: 101: IntFlag = 1;
  3502  0563  01DE               	clrf	_IntFlag
  3503  0564  0ADE               	incf	_IntFlag,f
  3504                           
  3505                           ;main.c: 102: if(++count1s >= 100)
  3506  0565  0ADF               	incf	_count1s,f
  3507  0566  025F               	subwf	_count1s,w
  3508  0567  1803               	btfsc	3,0
  3509                           
  3510                           ;main.c: 103: {
  3511                           ;main.c: 104: count1s = 0;
  3512  0568  01DF               	clrf	_count1s
  3513  0569                     i1l2677:	
  3514                           
  3515                           ;main.c: 105: }
  3516                           ;main.c: 106: }
  3517                           ;main.c: 107: ledShow();
  3518  0569  21C1               	fcall	_ledShow
  3519                           
  3520                           ;main.c: 108: intCount10++;
  3521  056A  1283               	bcf	3,5	;RP0=0, select bank0
  3522  056B  0ADC               	incf	_intCount10,f
  3523  056C                     i1l612:	
  3524  056C  0872               	movf	??_Isr_Timer+2,w
  3525  056D  008A               	movwf	10
  3526  056E  0871               	movf	??_Isr_Timer+1,w
  3527  056F  0084               	movwf	4
  3528  0570  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3529  0571  0083               	movwf	3
  3530  0572  0EFE               	swapf	126,f
  3531  0573  0E7E               	swapf	126,w
  3532  0574  0009               	retfie
  3533  0575                     __end_of_Isr_Timer:	
  3534                           
  3535                           	psect	intentry
  3536  0004                     __pintentry:	
  3537                           ;incstack = 0
  3538                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3539                           
  3540  0004                     interrupt_function:	
  3541  007E                     saved_w	set	btemp
  3542  0004  00FE               	movwf	btemp
  3543  0005  0E03               	swapf	3,w
  3544  0006  00F0               	movwf	??_Isr_Timer
  3545  0007  0804               	movf	4,w
  3546  0008  00F1               	movwf	??_Isr_Timer+1
  3547  0009  080A               	movf	10,w
  3548  000A  00F2               	movwf	??_Isr_Timer+2
  3549  000B  2D58               	ljmp	_Isr_Timer
  3550                           
  3551                           	psect	text21
  3552  01C1                     __ptext21:	
  3553 ;; *************** function _ledShow *****************
  3554 ;; Defined at:
  3555 ;;		line 159 in file "C:\mcuproject\scm\zdt\D107_062B_SOP14\main.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 100/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1
  3569 ;;      Params:         0       0       0
  3570 ;;      Locals:         0       0       0
  3571 ;;      Temps:          0       0       0
  3572 ;;      Totals:         0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_Isr_Timer
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _ledShow
  3584  01C1                     _ledShow:	
  3585                           
  3586                           ;main.c: 161: if(++ledCntTime > 5)
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3590  01C1  3006               	movlw	6
  3591  01C2  0AD6               	incf	_ledCntTime,f
  3592  01C3  0256               	subwf	_ledCntTime,w
  3593  01C4  1C03               	skipc
  3594  01C5  0008               	return
  3595  01C6  3010               	movlw	16
  3596                           
  3597                           ;main.c: 162: {
  3598                           ;main.c: 163: ledCntTime = 0;
  3599  01C7  01D6               	clrf	_ledCntTime
  3600                           
  3601                           ;main.c: 164: if(++ledCnt > 15)
  3602  01C8  0ADA               	incf	_ledCnt,f
  3603  01C9  025A               	subwf	_ledCnt,w
  3604  01CA  1803               	btfsc	3,0
  3605                           
  3606                           ;main.c: 165: {
  3607                           ;main.c: 166: ledCnt = 0;
  3608  01CB  01DA               	clrf	_ledCnt
  3609                           
  3610                           ;main.c: 167: }
  3611                           ;main.c: 168: PORTA &= 0xC3;
  3612  01CC  30C3               	movlw	195
  3613  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  3614  01CE  0586               	andwf	6,f	;volatile
  3615                           
  3616                           ;main.c: 169: PORTB &= 0xDF;
  3617  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  3618  01D0  1286               	bcf	6,5	;volatile
  3619                           
  3620                           ;main.c: 170: TRISA |= 0x3C;
  3621  01D1  303C               	movlw	60
  3622  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  3623  01D3  0485               	iorwf	5,f	;volatile
  3624                           
  3625                           ;main.c: 171: TRISB |= 0x20;
  3626  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  3627  01D5  1685               	bsf	5,5	;volatile
  3628                           
  3629                           ;main.c: 172: switch(ledCnt)
  3630  01D6  2A63               	goto	i1l2361
  3631  01D7                     i1l632:	
  3632                           ;main.c: 173: {
  3633                           ;main.c: 174: case 1:
  3634                           
  3635                           
  3636                           ;main.c: 175: if(shiweiNum & 0x01)
  3637  01D7  1C66               	btfss	_shiweiNum,0
  3638  01D8  0008               	return
  3639                           
  3640                           ;main.c: 176: {
  3641                           ;main.c: 177: TRISA &= 0xEF;
  3642  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  3643  01DA  1205               	bcf	5,4	;volatile
  3644                           
  3645                           ;main.c: 178: TRISA &= 0xDF;
  3646  01DB  1285               	bcf	5,5	;volatile
  3647                           
  3648                           ;main.c: 179: RA5 = 1;
  3649  01DC  1686               	bsf	6,5	;volatile
  3650                           
  3651                           ;main.c: 180: RA4 = 0;
  3652  01DD  1206               	bcf	6,4	;volatile
  3653  01DE  0008               	return
  3654  01DF                     i1l635:	
  3655                           ;main.c: 183: case 2:
  3656                           
  3657                           
  3658                           ;main.c: 184: if(shiweiNum & 0x02)
  3659  01DF  1CE6               	btfss	_shiweiNum,1
  3660  01E0  0008               	return
  3661                           
  3662                           ;main.c: 185: {
  3663                           ;main.c: 186: TRISA &= 0xEF;
  3664  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  3665  01E2  1205               	bcf	5,4	;volatile
  3666                           
  3667                           ;main.c: 187: TRISA &= 0xDF;
  3668  01E3  1285               	bcf	5,5	;volatile
  3669                           
  3670                           ;main.c: 188: RA4 = 1;
  3671  01E4  1606               	bsf	6,4	;volatile
  3672                           
  3673                           ;main.c: 189: RA5 = 0;
  3674  01E5  1286               	bcf	6,5	;volatile
  3675  01E6  0008               	return
  3676  01E7                     i1l637:	
  3677                           ;main.c: 192: case 3:
  3678                           
  3679                           
  3680                           ;main.c: 193: if(shiweiNum & 0x04)
  3681  01E7  1D66               	btfss	_shiweiNum,2
  3682  01E8  0008               	return
  3683                           
  3684                           ;main.c: 194: {
  3685                           ;main.c: 195: TRISA &= 0xEF;
  3686  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  3687  01EA  1205               	bcf	5,4	;volatile
  3688                           
  3689                           ;main.c: 196: TRISA &= 0xF7;
  3690  01EB  1185               	bcf	5,3	;volatile
  3691                           
  3692                           ;main.c: 197: RA3 = 1;
  3693  01EC  1586               	bsf	6,3	;volatile
  3694                           
  3695                           ;main.c: 198: RA4 = 0;
  3696  01ED  1206               	bcf	6,4	;volatile
  3697  01EE  0008               	return
  3698  01EF                     i1l639:	
  3699                           ;main.c: 201: case 4:
  3700                           
  3701                           
  3702                           ;main.c: 202: if(shiweiNum & 0x08)
  3703  01EF  1DE6               	btfss	_shiweiNum,3
  3704  01F0  0008               	return
  3705                           
  3706                           ;main.c: 203: {
  3707                           ;main.c: 204: TRISA &= 0xDF;
  3708  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  3709  01F2  1285               	bcf	5,5	;volatile
  3710                           
  3711                           ;main.c: 205: TRISA &= 0xF7;
  3712  01F3  1185               	bcf	5,3	;volatile
  3713                           
  3714                           ;main.c: 206: RA3 = 1;
  3715  01F4  1586               	bsf	6,3	;volatile
  3716                           
  3717                           ;main.c: 207: RA5 = 0;
  3718  01F5  1286               	bcf	6,5	;volatile
  3719  01F6  0008               	return
  3720  01F7                     i1l641:	
  3721                           ;main.c: 210: case 5:
  3722                           
  3723                           
  3724                           ;main.c: 211: if(shiweiNum & 0x10)
  3725  01F7  1E66               	btfss	_shiweiNum,4
  3726  01F8  0008               	return
  3727                           
  3728                           ;main.c: 212: {
  3729                           ;main.c: 213: TRISA &= 0xDF;
  3730  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  3731  01FA  1285               	bcf	5,5	;volatile
  3732                           
  3733                           ;main.c: 214: TRISA &= 0xFB;
  3734  01FB  1105               	bcf	5,2	;volatile
  3735                           
  3736                           ;main.c: 215: RA2 = 1;
  3737  01FC  1506               	bsf	6,2	;volatile
  3738                           
  3739                           ;main.c: 216: RA5 = 0;
  3740  01FD  1286               	bcf	6,5	;volatile
  3741  01FE  0008               	return
  3742  01FF                     i1l643:	
  3743                           ;main.c: 219: case 6:
  3744                           
  3745                           
  3746                           ;main.c: 220: if(shiweiNum & 0x20)
  3747  01FF  1EE6               	btfss	_shiweiNum,5
  3748  0200  0008               	return
  3749                           
  3750                           ;main.c: 221: {
  3751                           ;main.c: 222: TRISA &= 0xEF;
  3752  0201  1683               	bsf	3,5	;RP0=1, select bank1
  3753  0202  1205               	bcf	5,4	;volatile
  3754                           
  3755                           ;main.c: 223: TRISA &= 0xFB;
  3756  0203  1105               	bcf	5,2	;volatile
  3757                           
  3758                           ;main.c: 224: RA2 = 1;
  3759  0204  1506               	bsf	6,2	;volatile
  3760                           
  3761                           ;main.c: 225: RA4 = 0;
  3762  0205  1206               	bcf	6,4	;volatile
  3763  0206  0008               	return
  3764  0207                     i1l645:	
  3765                           ;main.c: 228: case 7:
  3766                           
  3767                           
  3768                           ;main.c: 229: if(shiweiNum & 0x40)
  3769  0207  1F66               	btfss	_shiweiNum,6
  3770  0208  0008               	return
  3771                           
  3772                           ;main.c: 230: {
  3773                           ;main.c: 231: TRISA &= 0xF7;
  3774  0209  1683               	bsf	3,5	;RP0=1, select bank1
  3775  020A  1185               	bcf	5,3	;volatile
  3776                           
  3777                           ;main.c: 232: TRISA &= 0xFB;
  3778  020B  1105               	bcf	5,2	;volatile
  3779                           
  3780                           ;main.c: 233: RA2 = 1;
  3781  020C  1506               	bsf	6,2	;volatile
  3782                           
  3783                           ;main.c: 234: RA3 = 0;
  3784  020D  1186               	bcf	6,3	;volatile
  3785  020E  0008               	return
  3786  020F                     i1l647:	
  3787                           ;main.c: 237: case 8:
  3788                           
  3789                           
  3790                           ;main.c: 238: if(geweiNum & 0x01)
  3791  020F  1C65               	btfss	_geweiNum,0
  3792  0210  0008               	return
  3793                           
  3794                           ;main.c: 239: {
  3795                           ;main.c: 240: TRISB &= 0xDF;
  3796  0211  1285               	bcf	5,5	;volatile
  3797                           
  3798                           ;main.c: 241: TRISA &= 0xDF;
  3799  0212  1683               	bsf	3,5	;RP0=1, select bank1
  3800  0213  1285               	bcf	5,5	;volatile
  3801                           
  3802                           ;main.c: 242: RB5 = 1;
  3803  0214  1283               	bcf	3,5	;RP0=0, select bank0
  3804  0215  1686               	bsf	6,5	;volatile
  3805                           
  3806                           ;main.c: 243: RA5 = 0;
  3807  0216  1683               	bsf	3,5	;RP0=1, select bank1
  3808  0217  1286               	bcf	6,5	;volatile
  3809  0218  0008               	return
  3810  0219                     i1l649:	
  3811                           ;main.c: 246: case 9:
  3812                           
  3813                           
  3814                           ;main.c: 247: if(geweiNum & 0x02)
  3815  0219  1CE5               	btfss	_geweiNum,1
  3816  021A  0008               	return
  3817                           
  3818                           ;main.c: 248: {
  3819                           ;main.c: 249: TRISB &= 0xDF;
  3820  021B  1285               	bcf	5,5	;volatile
  3821                           
  3822                           ;main.c: 250: TRISA &= 0xDF;
  3823  021C  1683               	bsf	3,5	;RP0=1, select bank1
  3824  021D  1285               	bcf	5,5	;volatile
  3825                           
  3826                           ;main.c: 251: RA5 = 1;
  3827  021E  1686               	bsf	6,5	;volatile
  3828                           
  3829                           ;main.c: 252: RB5 = 0;
  3830  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0220  1286               	bcf	6,5	;volatile
  3832  0221  0008               	return
  3833  0222                     i1l651:	
  3834                           ;main.c: 255: case 10:
  3835                           
  3836                           
  3837                           ;main.c: 256: if(geweiNum & 0x04)
  3838  0222  1D65               	btfss	_geweiNum,2
  3839  0223  0008               	return
  3840                           
  3841                           ;main.c: 257: {
  3842                           ;main.c: 258: TRISB &= 0xDF;
  3843  0224  1285               	bcf	5,5	;volatile
  3844                           
  3845                           ;main.c: 259: TRISA &= 0xEF;
  3846  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3847  0226  1205               	bcf	5,4	;volatile
  3848                           
  3849                           ;main.c: 260: RB5 = 1;
  3850  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0228  1686               	bsf	6,5	;volatile
  3852                           
  3853                           ;main.c: 261: RA4 = 0;
  3854  0229  1683               	bsf	3,5	;RP0=1, select bank1
  3855  022A  1206               	bcf	6,4	;volatile
  3856  022B  0008               	return
  3857  022C                     i1l653:	
  3858                           ;main.c: 264: case 11:
  3859                           
  3860                           
  3861                           ;main.c: 265: if(geweiNum & 0x08)
  3862  022C  1DE5               	btfss	_geweiNum,3
  3863  022D  0008               	return
  3864                           
  3865                           ;main.c: 266: {
  3866                           ;main.c: 267: TRISB &= 0xDF;
  3867  022E  1285               	bcf	5,5	;volatile
  3868                           
  3869                           ;main.c: 268: TRISA &= 0xEF;
  3870  022F  1683               	bsf	3,5	;RP0=1, select bank1
  3871  0230  1205               	bcf	5,4	;volatile
  3872                           
  3873                           ;main.c: 269: RA4 = 1;
  3874  0231  1606               	bsf	6,4	;volatile
  3875                           
  3876                           ;main.c: 270: RB5 = 0;
  3877  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0233  1286               	bcf	6,5	;volatile
  3879  0234  0008               	return
  3880  0235                     i1l655:	
  3881                           ;main.c: 273: case 12:
  3882                           
  3883                           
  3884                           ;main.c: 274: if(geweiNum & 0x10)
  3885  0235  1E65               	btfss	_geweiNum,4
  3886  0236  0008               	return
  3887                           
  3888                           ;main.c: 275: {
  3889                           ;main.c: 276: TRISB &= 0xDF;
  3890  0237  1285               	bcf	5,5	;volatile
  3891                           
  3892                           ;main.c: 277: TRISA &= 0xF7;
  3893  0238  1683               	bsf	3,5	;RP0=1, select bank1
  3894  0239  1185               	bcf	5,3	;volatile
  3895                           
  3896                           ;main.c: 278: RB5 = 1;
  3897  023A  1283               	bcf	3,5	;RP0=0, select bank0
  3898  023B  1686               	bsf	6,5	;volatile
  3899                           
  3900                           ;main.c: 279: RA3 = 0;
  3901  023C  1683               	bsf	3,5	;RP0=1, select bank1
  3902  023D  1186               	bcf	6,3	;volatile
  3903  023E  0008               	return
  3904  023F                     i1l657:	
  3905                           ;main.c: 282: case 13:
  3906                           
  3907                           
  3908                           ;main.c: 283: if(geweiNum & 0x20)
  3909  023F  1EE5               	btfss	_geweiNum,5
  3910  0240  0008               	return
  3911                           
  3912                           ;main.c: 284: {
  3913                           ;main.c: 285: TRISB &= 0xDF;
  3914  0241  1285               	bcf	5,5	;volatile
  3915                           
  3916                           ;main.c: 286: TRISA &= 0xF7;
  3917  0242  1683               	bsf	3,5	;RP0=1, select bank1
  3918  0243  1185               	bcf	5,3	;volatile
  3919                           
  3920                           ;main.c: 287: RA3 = 1;
  3921  0244  1586               	bsf	6,3	;volatile
  3922                           
  3923                           ;main.c: 288: RB5 = 0;
  3924  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0246  1286               	bcf	6,5	;volatile
  3926  0247  0008               	return
  3927  0248                     i1l659:	
  3928                           ;main.c: 291: case 14:
  3929                           
  3930                           
  3931                           ;main.c: 292: if(geweiNum & 0x40)
  3932  0248  1F65               	btfss	_geweiNum,6
  3933  0249  0008               	return
  3934                           
  3935                           ;main.c: 293: {
  3936                           ;main.c: 294: TRISB &= 0xDF;
  3937  024A  1285               	bcf	5,5	;volatile
  3938                           
  3939                           ;main.c: 295: TRISA &= 0xFB;
  3940  024B  1683               	bsf	3,5	;RP0=1, select bank1
  3941  024C  1105               	bcf	5,2	;volatile
  3942                           
  3943                           ;main.c: 296: RA2 = 1;
  3944  024D  1506               	bsf	6,2	;volatile
  3945                           
  3946                           ;main.c: 297: RB5 = 0;
  3947  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3948  024F  1286               	bcf	6,5	;volatile
  3949  0250  0008               	return
  3950  0251                     i1l2351:	
  3951                           
  3952                           ;main.c: 301: if(baiweiNum > 0)
  3953  0251  0864               	movf	_baiweiNum,w
  3954  0252  1903               	btfsc	3,2
  3955  0253  0008               	return
  3956                           
  3957                           ;main.c: 302: {
  3958                           ;main.c: 303: TRISA &= 0xDF;
  3959  0254  1683               	bsf	3,5	;RP0=1, select bank1
  3960  0255  1285               	bcf	5,5	;volatile
  3961                           
  3962                           ;main.c: 304: TRISA &= 0xF7;
  3963  0256  1185               	bcf	5,3	;volatile
  3964                           
  3965                           ;main.c: 305: RA5 = 1;
  3966  0257  1686               	bsf	6,5	;volatile
  3967                           
  3968                           ;main.c: 306: RA3 = 0;
  3969  0258  1186               	bcf	6,3	;volatile
  3970  0259  0008               	return
  3971  025A                     i1l2355:	
  3972                           
  3973                           ;main.c: 310: if(baiweiNum > 0)
  3974  025A  0864               	movf	_baiweiNum,w
  3975  025B  1903               	btfsc	3,2
  3976  025C  0008               	return
  3977                           
  3978                           ;main.c: 311: {
  3979                           ;main.c: 312: TRISA &= 0xEF;
  3980  025D  1683               	bsf	3,5	;RP0=1, select bank1
  3981  025E  1205               	bcf	5,4	;volatile
  3982                           
  3983                           ;main.c: 313: TRISA &= 0xF7;
  3984  025F  1185               	bcf	5,3	;volatile
  3985                           
  3986                           ;main.c: 314: RA4 = 1;
  3987  0260  1606               	bsf	6,4	;volatile
  3988                           
  3989                           ;main.c: 315: RA3 = 0;
  3990  0261  1186               	bcf	6,3	;volatile
  3991  0262  0008               	return
  3992  0263                     i1l2361:	
  3993  0263  085A               	movf	_ledCnt,w
  3994                           
  3995                           ; Switch size 1, requested type "space"
  3996                           ; Number of cases is 16, Range of values is 0 to 15
  3997                           ; switch strategies available:
  3998                           ; Name         Instructions Cycles
  3999                           ; direct_byte           22     6 (fixed)
  4000                           ; simple_byte           49    25 (average)
  4001                           ; jumptable            260     6 (fixed)
  4002                           ;	Chosen strategy is direct_byte
  4003  0264  0084               	movwf	4
  4004  0265  3010               	movlw	16
  4005  0266  0204               	subwf	4,w
  4006  0267  1803               	skipnc
  4007  0268  0008               	return
  4008  0269  3006               	movlw	high i1S2999
  4009  026A  008A               	movwf	10
  4010  026B  3000               	movlw	low i1S2999
  4011  026C  0704               	addwf	4,w
  4012  026D  0082               	movwf	2
  4013  026E  0008               	return
  4014  026F                     __end_of_ledShow:	
  4015  007E                     btemp	set	126	;btemp
  4016  007E                     wtemp0	set	126
  4017                           
  4018                           	psect	swtext1
  4019  0600                     __pswtext1:	
  4020  0600                     i1S2999:	
  4021  0600  2A5A               	ljmp	i1l2355
  4022  0601  29D7               	ljmp	i1l632
  4023  0602  29DF               	ljmp	i1l635
  4024  0603  29E7               	ljmp	i1l637
  4025  0604  29EF               	ljmp	i1l639
  4026  0605  29F7               	ljmp	i1l641
  4027  0606  29FF               	ljmp	i1l643
  4028  0607  2A07               	ljmp	i1l645
  4029  0608  2A0F               	ljmp	i1l647
  4030  0609  2A19               	ljmp	i1l649
  4031  060A  2A22               	ljmp	i1l651
  4032  060B  2A2C               	ljmp	i1l653
  4033  060C  2A35               	ljmp	i1l655
  4034  060D  2A3F               	ljmp	i1l657
  4035  060E  2A48               	ljmp	i1l659
  4036  060F  2A51               	ljmp	i1l2351


Data Sizes:
    Strings     0
    Constant    12
    Data        0
    BSS         32
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     39      72
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _keyCtr->_keyRead
    _checkBatAD->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _setBatStep->___lwdiv
    _checkBatAD->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6464
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     427
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0    5469
                                             34 BANK0      5     5      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     582
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (5) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _chrgCtr
   _keyCtr
     _keyRead
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     27      48       4       90.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      53       7        0.0%
DATA                 0      0      53       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 07 09:13:19 2025

                      pc 0002                       PL2 00E0                       PL4 0401  
                     PL6 00EF                       PL8 03C1                       fsr 0004  
                    PL10 00F8                      PL12 0366                      PL14 0447  
                    l712 0141                      l617 0458                      l741 0295  
                    l738 0297                      l739 0293                      l794 0081  
                    l698 050D                      l971 0435                      l788 0046  
                    l798 00C5                      l959 0413                      _GIE 005F  
                    _RA2 0432                      _RA3 0433                      _RA4 0434  
                    _RA5 0435                      _RB3 0033                      _RB5 0035  
                    _PR2 0011      __size_of_ADC_Sample 00C9                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 061F             ___ftdiv@cntr 002F  
           ___ftdiv@sign 0034                     l1013 0320                     l2103 0030  
                   l1065 059D                     l2019 0618                     l2131 0075  
                   l2133 007D                     l2109 0031                     l2053 0552  
                   l2143 00C9                     l2127 006B                     l2119 0051  
                   l2231 03B8                     l2215 0394                     l2225 03A0  
                   l2241 0597                     l2227 03AA                     l2219 039C  
                   l2093 0026                     l2095 0028                     l2255 05AA  
                   l2271 058D                     l2263 0579                     l2601 01AE  
                   l2611 01BB                     l2515 011E                     l2197 0372  
                   l2381 0523                     l2533 0136                     l2509 0110  
                   l2199 0377                     l2383 0525                     l2607 01A8  
                   l2527 012B                     l2393 0538                     l2545 0149  
                   l2803 0333                     l2555 0158                     l2563 0160  
                   l2485 04FB                     l2493 0504                     l2901 02E3  
                   l2573 0171                     l2581 0179                     l2903 02D1  
                   l2911 02E7                     l2559 015C                     l2761 041E  
                   l2489 0500                     l2913 02EA                     l2585 0180  
                   l2577 0175                     l2763 0425                     l2827 04CE  
                   l2757 0417                     l2781 0312                     l2589 0192  
                   l2767 0433                     l2759 0419                     l2855 04B6  
                   l2839 04E5                     l2599 01AC                     l2769 042A  
                   l2883 02AF                     l2869 0280                     l2957 046C  
                   l2879 029A                     l2889 02C4                     l2977 0487  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u1705 00D2                     u1635 0071                     u1645 007B  
                   u3327 04BC                     _PIE1 000E                     u3337 0023  
                   u1685 00BB                     u1765 0379                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     u2955 0341                     _PIR1 000D  
                   u2995 04D7                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 044C             ___ftpack@arg 0073  
           ___ftpack@exp 0076                     btemp 007E                     start 000C  
           ___fttol@exp1 0041            ??_Init_System 0073             ___fttol@lval 003D  
                  ?_main 0070          __end_of___lbdiv 05AC          __end_of___lbmod 0591  
        __end_of___ftdiv 0366          __end_of___fttol 03C1                    _T2CON 0013  
        __end_of___lwdiv 04EA                    i1l612 056C                    i1l632 01D7  
                  i1l641 01F7                    i1l651 0222                    i1l643 01FF  
                  i1l635 01DF                    i1l653 022C                    i1l645 0207  
                  i1l637 01E7                    i1l655 0235                    i1l647 020F  
                  i1l639 01EF                    i1l657 023F                    i1l649 0219  
                  i1l659 0248                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 053A          __end_of_ledShow 026F  
        __end_of_keyRead 0558            ___ftpack@sign 0077                    pclath 000A  
        __end_of_pwmInit 05E8          __end_of_pwmStop 0623                    status 0003  
                  wtemp0 007E          __end_of_workCtr 01C1          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 0489  
                 ??_main 0078            ___fttol@sign1 003C                ??_AD_Init 0073  
    __end_of_Init_System 05C6                   _ADCON0 0095                   _ADCON1 0096  
                 i1S2999 0600                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _ANSEL1 0094         __end_of___ftpack 0447  
                 _GODONE 04A9                   i1l2351 0251                   i1l2361 0263  
                 i1l2355 025A                   i1l2677 0569                   _LDO_EN 04B2  
                 _INTCON 000B         __end_of___lwtoft 05F8                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
           ??_ADC_Sample 0074             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 03C8                ??___lbdiv 0074                ??___lbmod 0074  
              ??___ftdiv 002C                ??___fttol 0039                   _ledCnt 005A  
              ??___lwdiv 0077                   _keyCtr 04EA                ??_chrgCtr 0073  
                 _result 004F                ??_ledShow 0070         __end_of_numArray 05D8  
              ??_keyRead 0073       __end_of_ADC_Sample 00E0                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0078  
       ___lbdiv@dividend 0074          ___lbmod@divisor 0073  __end_of__initialization 0015  
        ___lbmod@counter 0076               ___ftdiv@f1 0029               ___ftdiv@f2 0026  
             ___ftdiv@f3 0030               ___fttol@f1 0035           __pcstackCOMMON 0070  
            _Init_System 05AC               __end_ofPL2 00EF               __end_ofPL4 040B  
             __end_ofPL6 00F8               __end_ofPL8 03C8         ___lbdiv@quotient 0076  
             ___lwtoft@c 0023        __end_of_Isr_Timer 0575               _checkBatAD 0489  
             __pbssBANK0 0047             _chrgFullFlag 005D             _chrgFullTime 005B  
            ?_Sleep_Mode 0070               __pmaintext 044C               __pintentry 0004  
                ?_keyCtr 0070               _ledCntTime 0056                ?___ftpack 0073  
                _AD_Init 0618                ?___lwtoft 0023               _curBatStep 0052  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D               __stringtab 05C6  
                _IntFlag 005E               _intCount10 005C          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0029          ADC_Sample@admin 0027          ADC_Sample@adsum 0023  
                ___lbdiv 0591                  ___lbmod 0575                  ___ftdiv 0304  
                ___fttol 036A                  ___lwdiv 04C0          __size_of_keyCtr 0029  
             ??___ftpack 0020                  _chrgCtr 0513               _lowBatFlag 0055  
                __ptext1 00FD                  __ptext2 061F                  __ptext3 05D8  
                __ptext4 0575                  __ptext5 0591                  __ptext6 026F  
                __ptext7 04C0                  __ptext8 04EA                  __ptext9 053A  
                _ledShow 01C1               _lowBatTime 0051               ??___lwtoft 0078  
                _count1s 005F                  _keyRead 053A               _setBatStep 026F  
    __size_of_Sleep_Mode 0039                  _pwmInit 05D8              ?_checkBatAD 0070  
                _pwmStop 061F                  clrloop0 0611                  _workCtr 00FD  
   end_of_initialization 0015            _longPressFlag 0058         ___lbmod@dividend 0075  
            ___lbmod@rem 0077              ___ftdiv@exp 0033      __size_of_checkBatAD 0037  
           ?_Init_System 0070           __end_of_keyCtr 0513              __end_ofPL10 00FD  
            __end_ofPL12 036A              __end_ofPL14 044C      start_initialization 000D  
            ?_setBatStep 0070                _Isr_Timer 0558             ??_Sleep_Mode 0073  
      ADC_Sample@ad_temp 002B                 ??_keyCtr 0074                 ?_AD_Init 0070  
      __size_of___ftpack 003C              __pbssCOMMON 0078                ___latbits 0000  
      __size_of___lwtoft 0010            __pcstackBANK0 0020       __end_of_Sleep_Mode 0401  
             ?_Isr_Timer 0070                _baiweiNum 0064                __pnvBANK0 0064  
       ___lwdiv@dividend 0075      __size_of_setBatStep 0095                 ?___lbdiv 0073  
               ?___lbmod 0073                 ?___ftdiv 0026                 ?___fttol 0035  
               ?___lwdiv 0073                 ?_chrgCtr 0070                __pstrings 05C6  
              __pswtext1 0600                _count900s 0049                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 0067           ADC_Sample@adch 0021  
               ?_pwmInit 0070             ??_checkBatAD 0042                 ?_pwmStop 0070  
       ___lwdiv@quotient 0021                 ?_workCtr 0070              ADC_Sample@i 0022  
            ADC_Sample@j 0020        interrupt_function 0004                clear_ram0 0610  
              _sleepTime 0054                _shiweiNum 0066       __end_of_checkBatAD 04C0  
            __stringbase 05CB     __size_of_Init_System 001A         __size_of_AD_Init 0007  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0017  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___ftdiv 0062  
       __size_of___fttol 0057         __size_of___lwdiv 002A                 ___ftpack 040B  
     __end_of__stringtab 05CC         __size_of_chrgCtr 0027                 ___lwtoft 05E8  
       __size_of_ledShow 00AE         __size_of_keyRead 001E                 _adresult 0062  
           ??_setBatStep 0077                 _chrgFlag 007A          ___lwdiv@divisor 0073  
        ___lwdiv@counter 0020                 __ptext10 0513                 __ptext11 0489  
               __ptext20 0558                 __ptext12 05E8                 __ptext21 01C1  
               __ptext13 036A                 __ptext14 0304                 __ptext15 040B  
               __ptext16 0017                 __ptext17 03C8                 __ptext18 05AC  
               __ptext19 0618         __size_of_pwmInit 0010         __size_of_pwmStop 0004  
               _geweiNum 0065                 _count30s 0047         __size_of_workCtr 00C4  
               _keyCount 0059                 _intCount 0060            __size_of_main 003D  
               _numArray 05CC                 _test_adc 0061       __end_of_setBatStep 0304  
               _power_ad 004D              _lowShanTime 004B                 _workStep 0079  
           _motorPwmFlag 0053                 intlevel1 0000              ?_ADC_Sample 0073  
   checkBatAD@power_temp 0043                stringcode 05C6              _showBatTime 0057  
            _showBatStep 0078               _OPTION_REG 0001                 stringdir 05C6  
               stringtab 05C6  
