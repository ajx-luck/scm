

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 15 10:49:16 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	swtext1,local,class=CONST,delta=2
    39                           	psect	pa_nodes0,global,class=CODE,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 1.45
    43                           ; Generated 16/11/2017 GMT
    44                           ; 
    45                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F887 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	strings
    78  061B                     __pstrings:	
    79  061B                     stringtab:	
    80  061B                     __stringtab:	
    81  061B                     stringcode:	
    82                           ;	String table - string pointers are 1 byte each
    83                           
    84  061B                     stringdir:	
    85  061B  3006               	movlw	high stringdir
    86  061C  008A               	movwf	10
    87  061D  0804               	movf	4,w
    88  061E  0A84               	incf	4,f
    89  061F  0782               	addwf	2,f
    90  0620                     __stringbase:	
    91  0620  3400               	retlw	0
    92  0621                     __end_of__stringtab:	
    93  0621                     _numArray:	
    94  0621  343F               	retlw	63
    95  0622  3406               	retlw	6
    96  0623  345B               	retlw	91
    97  0624  344F               	retlw	79
    98  0625  3466               	retlw	102
    99  0626  346D               	retlw	109
   100  0627  347D               	retlw	125
   101  0628  3407               	retlw	7
   102  0629  347F               	retlw	127
   103  062A  346F               	retlw	111
   104  062B  3471               	retlw	113
   105  062C  3479               	retlw	121
   106  062D  3450               	retlw	80
   107  062E  3476               	retlw	118
   108  062F                     __end_of_numArray:	
   109                           
   110                           	psect	nvBANK0
   111  0067                     __pnvBANK0:	
   112  0067                     _geweiNum:	
   113  0067                     	ds	1
   114  0068                     _shiweiNum:	
   115  0068                     	ds	1
   116  0069                     _firstTime:	
   117  0069                     	ds	1
   118  001D                     _PWMCON2	set	29
   119  0018                     _PWMTH	set	24
   120  0017                     _PWMTL	set	23
   121  0016                     _PWMCON1	set	22
   122  0015                     _PWMCON0	set	21
   123  0014                     _OSCCON	set	20
   124  0013                     _T2CON	set	19
   125  0011                     _PR2	set	17
   126  000E                     _PIE1	set	14
   127  000D                     _PIR1	set	13
   128  000B                     _INTCON	set	11
   129  0009                     _IOCB	set	9
   130  0008                     _WPUB	set	8
   131  0006                     _PORTB	set	6
   132  0005                     _TRISB	set	5
   133  0001                     _OPTION_REG	set	1
   134  0071                     _TMR2IE	set	113
   135  0073                     _RAIE	set	115
   136  0069                     _TMR2IF	set	105
   137  006B                     _RAIF	set	107
   138  0058                     _RBIF	set	88
   139  005B                     _RBIE	set	91
   140  005E                     _PEIE	set	94
   141  005F                     _GIE	set	95
   142  0030                     _RB0	set	48
   143  0031                     _RB1	set	49
   144  0033                     _RB3	set	51
   145  0034                     _RB4	set	52
   146  0035                     _RB5	set	53
   147  009E                     _PWMD23H	set	158
   148  009D                     _PWM23DT	set	157
   149  009C                     _PWMD3L	set	156
   150  009B                     _PWMD2L	set	155
   151  0099                     _ADRESH	set	153
   152  0098                     _ADRESL	set	152
   153  0096                     _ADCON1	set	150
   154  0095                     _ADCON0	set	149
   155  0094                     _ANSEL1	set	148
   156  0093                     _ANSEL0	set	147
   157  0089                     _IOCA	set	137
   158  0088                     _WPUA	set	136
   159  0087                     _WPDA	set	135
   160  0086                     _PORTA	set	134
   161  0085                     _TRISA	set	133
   162  04B2                     _LDO_EN	set	1202
   163  04B6                     _CHS4	set	1206
   164  04A9                     _GODONE	set	1193
   165  0433                     _RA3	set	1075
   166  0434                     _RA4	set	1076
   167                           
   168                           	psect	cinit
   169  000D                     start_initialization:	
   170                           ; #config settings
   171                           
   172  000D                     __initialization:	
   173                           
   174                           ; Clear objects allocated to COMMON
   175  000D  3077               	movlw	low __pbssCOMMON
   176  000E  0084               	movwf	4
   177  000F  307B               	movlw	low (__pbssCOMMON+4)
   178  0010  265F               	fcall	clear_ram0
   179  0011  3020               	movlw	low __pbssBANK0
   180                           
   181                           ; Clear objects allocated to BANK0
   182  0012  1383               	bcf	3,7	;select IRP bank0
   183  0013  0084               	movwf	4
   184  0014  3056               	movlw	low (__pbssBANK0+54)
   185  0015  265F               	fcall	clear_ram0
   186  0016                     end_of_initialization:	
   187                           ;End of C runtime variable initialization code
   188                           
   189  0016                     __end_of__initialization:	
   190  0016  0183               	clrf	3
   191  0017  2B93               	ljmp	_main	;jump to C main() function
   192                           
   193                           	psect	bssCOMMON
   194  0077                     __pbssCOMMON:	
   195  0077                     _adresult:	
   196  0077                     	ds	2
   197  0079                     _prePwStep:	
   198  0079                     	ds	1
   199  007A                     _workStep:	
   200  007A                     	ds	1
   201                           
   202                           	psect	bssBANK0
   203  0020                     __pbssBANK0:	
   204  0020                     _maxWorkTime:	
   205  0020                     	ds	2
   206  0022                     _workTime:	
   207  0022                     	ds	2
   208  0024                     _count900s:	
   209  0024                     	ds	2
   210  0026                     _count8s:	
   211  0026                     	ds	2
   212  0028                     _overWorkTime:	
   213  0028                     	ds	2
   214  002A                     _fullCount:	
   215  002A                     	ds	2
   216  002C                     _count50s:	
   217  002C                     	ds	2
   218  002E                     _batADValue:	
   219  002E                     	ds	2
   220  0030                     _outADValue:	
   221  0030                     	ds	2
   222  0032                     _power_ad:	
   223  0032                     	ds	2
   224  0034                     _result:	
   225  0034                     	ds	2
   226  0036                     _curDuty:	
   227  0036                     	ds	1
   228  0037                     _motorPwmFlag:	
   229  0037                     	ds	1
   230  0038                     _chrgPwmFlag:	
   231  0038                     	ds	1
   232  0039                     _sleepTime:	
   233  0039                     	ds	1
   234  003A                     _lowBatFlag:	
   235  003A                     	ds	1
   236  003B                     _ledCntTime:	
   237  003B                     	ds	1
   238  003C                     _chrgMaxDuty:	
   239  003C                     	ds	1
   240  003D                     _chrgWaitTime:	
   241  003D                     	ds	1
   242  003E                     _subTime:	
   243  003E                     	ds	1
   244  003F                     _addTime:	
   245  003F                     	ds	1
   246  0040                     _lockCount:	
   247  0040                     	ds	1
   248  0041                     _chrgMaxAD:	
   249  0041                     	ds	1
   250  0042                     _chrgMode:	
   251  0042                     	ds	1
   252  0043                     _showBatTime:	
   253  0043                     	ds	1
   254  0044                     _reChrgCount:	
   255  0044                     	ds	1
   256  0045                     _pwStep:	
   257  0045                     	ds	1
   258  0046                     _overChrgTime:	
   259  0046                     	ds	1
   260  0047                     _startTime:	
   261  0047                     	ds	1
   262  0048                     _maxDuty:	
   263  0048                     	ds	1
   264  0049                     _longPressFlag:	
   265  0049                     	ds	1
   266  004A                     _keyCount:	
   267  004A                     	ds	1
   268  004B                     _ledCnt:	
   269  004B                     	ds	1
   270  004C                     _workOverOutTime:	
   271  004C                     	ds	1
   272  004D                     _protectFlag:	
   273  004D                     	ds	1
   274  004E                     _countHalfFull:	
   275  004E                     	ds	1
   276  004F                     _intCount10:	
   277  004F                     	ds	1
   278  0050                     _chrgFullFlag:	
   279  0050                     	ds	1
   280  0051                     _chrgFlag:	
   281  0051                     	ds	1
   282  0052                     _IntFlag:	
   283  0052                     	ds	1
   284  0053                     _count1s:	
   285  0053                     	ds	1
   286  0054                     _intCount:	
   287  0054                     	ds	1
   288  0055                     _test_adc:	
   289  0055                     	ds	1
   290                           
   291                           	psect	clrtext
   292  065F                     clear_ram0:	
   293                           ;	Called with FSR containing the base address, and
   294                           ;	W with the last address+1
   295                           
   296  065F  0064               	clrwdt	;clear the watchdog before getting into this loop
   297  0660                     clrloop0:	
   298  0660  0180               	clrf	0	;clear RAM location pointed to by FSR
   299  0661  0A84               	incf	4,f	;increment pointer
   300  0662  0604               	xorwf	4,w	;XOR with final address
   301  0663  1903               	btfsc	3,2	;have we reached the end yet?
   302  0664  3400               	retlw	0	;all done for this memory range, return
   303  0665  0604               	xorwf	4,w	;XOR again to restore value
   304  0666  2E60               	goto	clrloop0	;do the next byte
   305                           
   306                           	psect	cstackCOMMON
   307  0070                     __pcstackCOMMON:	
   308  0070                     ?_ledShow:	
   309  0070                     ??_ledShow:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_Init_System:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_AD_Init:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_checkOutA:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_chrgCtr:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_checkBatAD:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_keyCtr:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_workCtr2:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_workCtr:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_ledCtr:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_Sleep_Mode:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_chrgPwmStop:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_pwmStop:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_chrgPwmInit:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_pwmInit:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_Isr_Timer:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ??_Isr_Timer:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_main:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_keyRead:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_ctr7:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_ctr8:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_ctr9:	
   373                           ; 1 bytes @ 0x0
   374                           
   375                           
   376                           ; 1 bytes @ 0x0
   377  0070                     	ds	3
   378  0073                     ??_Init_System:	
   379  0073                     ??_AD_Init:	
   380                           ; 1 bytes @ 0x3
   381                           
   382  0073                     ??_chrgCtr:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     ??_workCtr:	
   386                           ; 1 bytes @ 0x3
   387                           
   388  0073                     ??_Sleep_Mode:	
   389                           ; 1 bytes @ 0x3
   390                           
   391  0073                     ??_chrgPwmStop:	
   392                           ; 1 bytes @ 0x3
   393                           
   394  0073                     ??_pwmStop:	
   395                           ; 1 bytes @ 0x3
   396                           
   397  0073                     ??_chrgPwmInit:	
   398                           ; 1 bytes @ 0x3
   399                           
   400  0073                     ??_pwmInit:	
   401                           ; 1 bytes @ 0x3
   402                           
   403  0073                     ?_ADC_Sample:	
   404                           ; 1 bytes @ 0x3
   405                           
   406  0073                     ??_keyRead:	
   407                           ; 1 bytes @ 0x3
   408                           
   409  0073                     ??_ctr9:	
   410                           ; 1 bytes @ 0x3
   411                           
   412  0073                     ?___lbdiv:	
   413                           ; 1 bytes @ 0x3
   414                           
   415  0073                     ?___lbmod:	
   416                           ; 1 bytes @ 0x3
   417                           
   418  0073                     ?___lwmod:	
   419                           ; 1 bytes @ 0x3
   420                           
   421  0073                     keyRead@keyStatus:	
   422                           ; 2 bytes @ 0x3
   423                           
   424  0073                     ADC_Sample@adldo:	
   425                           ; 1 bytes @ 0x3
   426                           
   427  0073                     ___lbdiv@divisor:	
   428                           ; 1 bytes @ 0x3
   429                           
   430  0073                     ___lbmod@divisor:	
   431                           ; 1 bytes @ 0x3
   432                           
   433  0073                     ___lwmod@divisor:	
   434                           ; 1 bytes @ 0x3
   435                           
   436                           
   437                           ; 2 bytes @ 0x3
   438  0073                     	ds	1
   439  0074                     ??_checkOutA:	
   440  0074                     ??_checkBatAD:	
   441                           ; 1 bytes @ 0x4
   442                           
   443  0074                     ??_keyCtr:	
   444                           ; 1 bytes @ 0x4
   445                           
   446  0074                     ??___lbdiv:	
   447                           ; 1 bytes @ 0x4
   448                           
   449  0074                     ??___lbmod:	
   450                           ; 1 bytes @ 0x4
   451                           
   452  0074                     keyCtr@kclick:	
   453                           ; 1 bytes @ 0x4
   454                           
   455  0074                     ___lbdiv@dividend:	
   456                           ; 1 bytes @ 0x4
   457                           
   458                           
   459                           ; 1 bytes @ 0x4
   460  0074                     	ds	1
   461  0075                     ___lbdiv@counter:	
   462  0075                     ___lwmod@dividend:	
   463                           ; 1 bytes @ 0x5
   464                           
   465                           
   466                           ; 2 bytes @ 0x5
   467  0075                     	ds	1
   468  0076                     ___lbdiv@quotient:	
   469                           
   470                           ; 1 bytes @ 0x6
   471  0076                     	ds	1
   472  0077                     ??_workCtr2:	
   473  0077                     ??_ledCtr:	
   474                           ; 1 bytes @ 0x7
   475                           
   476  0077                     ??_main:	
   477                           ; 1 bytes @ 0x7
   478                           
   479  0077                     ??_ctr7:	
   480                           ; 1 bytes @ 0x7
   481                           
   482  0077                     ??_ctr8:	
   483                           ; 1 bytes @ 0x7
   484                           
   485  0077                     ??___lwmod:	
   486                           ; 1 bytes @ 0x7
   487                           
   488                           
   489                           	psect	cstackBANK0
   490  0056                     __pcstackBANK0:	
   491                           ; 1 bytes @ 0x7
   492                           
   493  0056                     ??_ADC_Sample:	
   494  0056                     ___lbmod@dividend:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0056                     ___lwmod@counter:	
   498                           ; 1 bytes @ 0x0
   499                           
   500                           
   501                           ; 1 bytes @ 0x0
   502  0056                     	ds	1
   503  0057                     ___lbmod@counter:	
   504                           
   505                           ; 1 bytes @ 0x1
   506  0057                     	ds	1
   507  0058                     ___lbmod@rem:	
   508                           
   509                           ; 1 bytes @ 0x2
   510  0058                     	ds	2
   511  005A                     ADC_Sample@j:	
   512                           
   513                           ; 1 bytes @ 0x4
   514  005A                     	ds	1
   515  005B                     ADC_Sample@adch:	
   516                           
   517                           ; 1 bytes @ 0x5
   518  005B                     	ds	1
   519  005C                     ADC_Sample@i:	
   520                           
   521                           ; 1 bytes @ 0x6
   522  005C                     	ds	1
   523  005D                     ADC_Sample@adsum:	
   524                           
   525                           ; 4 bytes @ 0x7
   526  005D                     	ds	4
   527  0061                     ADC_Sample@admin:	
   528                           
   529                           ; 2 bytes @ 0xB
   530  0061                     	ds	2
   531  0063                     ADC_Sample@admax:	
   532                           
   533                           ; 2 bytes @ 0xD
   534  0063                     	ds	2
   535  0065                     ADC_Sample@ad_temp:	
   536                           
   537                           ; 2 bytes @ 0xF
   538  0065                     	ds	2
   539                           
   540                           	psect	maintext
   541  0393                     __pmaintext:	
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 154 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : B00/0
   558 ;;		On exit  : 100/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMMON   BANK0   BANK1
   561 ;;      Params:         0       0       0
   562 ;;      Locals:         0       0       0
   563 ;;      Temps:          0       0       0
   564 ;;      Totals:         0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels required when called:    5
   567 ;; This function calls:
   568 ;;		_AD_Init
   569 ;;		_Init_System
   570 ;;		_Sleep_Mode
   571 ;;		_checkBatAD
   572 ;;		_checkOutA
   573 ;;		_chrgCtr
   574 ;;		_keyCtr
   575 ;;		_ledCtr
   576 ;;		_workCtr
   577 ;;		_workCtr2
   578 ;; This function is called by:
   579 ;;		Startup code after reset
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           
   584                           ;psect for function _main
   585  0393                     _main:	
   586                           
   587                           ;main.c: 156: Init_System();
   588                           
   589                           ;incstack = 0
   590                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   591  0393  2601               	fcall	_Init_System
   592                           
   593                           ;main.c: 157: AD_Init();
   594  0394  2667               	fcall	_AD_Init
   595                           
   596                           ;main.c: 158: shiweiNum = geweiNum = numArray[8];
   597  0395  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   598  0396  0084               	movwf	4
   599  0397  261B               	fcall	stringdir
   600  0398  1283               	bcf	3,5	;RP0=0, select bank0
   601  0399  00E7               	movwf	_geweiNum
   602  039A  00E8               	movwf	_shiweiNum
   603                           
   604                           ;main.c: 159: firstTime = 200;
   605  039B  30C8               	movlw	200
   606  039C  00E9               	movwf	_firstTime
   607  039D                     l691:	
   608                           ;main.c: 160: while (1)
   609                           
   610  039D  0064               	clrwdt	;# 
   611                           
   612                           ;main.c: 163: if(intCount10 > 10)
   613  039E  300B               	movlw	11
   614  039F  1283               	bcf	3,5	;RP0=0, select bank0
   615  03A0  024F               	subwf	_intCount10,w
   616  03A1  1C03               	skipc
   617  03A2  2BA5               	goto	l3430
   618                           
   619                           ;main.c: 164: {
   620                           ;main.c: 165: intCount10 = 0;
   621  03A3  01CF               	clrf	_intCount10
   622                           
   623                           ;main.c: 166: checkOutA();
   624  03A4  246B               	fcall	_checkOutA
   625  03A5                     l3430:	
   626                           
   627                           ;main.c: 167: }
   628                           ;main.c: 168: if(!IntFlag)
   629  03A5  1283               	bcf	3,5	;RP0=0, select bank0
   630  03A6  0852               	movf	_IntFlag,w
   631  03A7  1903               	btfsc	3,2
   632  03A8  2B9D               	goto	l691
   633                           
   634                           ;main.c: 170: IntFlag = 0;
   635  03A9  01D2               	clrf	_IntFlag
   636                           
   637                           ;main.c: 171: chrgCtr();
   638  03AA  2018               	fcall	_chrgCtr
   639                           
   640                           ;main.c: 172: checkBatAD();
   641  03AB  2290               	fcall	_checkBatAD
   642                           
   643                           ;main.c: 173: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   644  03AC  1283               	bcf	3,5	;RP0=0, select bank0
   645  03AD  0851               	movf	_chrgFlag,w
   646  03AE  1D03               	btfss	3,2
   647  03AF  2BB7               	goto	l3448
   648  03B0  083A               	movf	_lowBatFlag,w
   649  03B1  1D03               	btfss	3,2
   650  03B2  2BB7               	goto	l3448
   651  03B3  0869               	movf	_firstTime,w
   652  03B4  1D03               	btfss	3,2
   653  03B5  2BB7               	goto	l3448
   654                           
   655                           ;main.c: 174: {
   656                           ;main.c: 175: keyCtr();
   657  03B6  242E               	fcall	_keyCtr
   658  03B7                     l3448:	
   659                           
   660                           ;main.c: 176: }
   661                           ;main.c: 177: if(workStep > 6)
   662  03B7  3007               	movlw	7
   663  03B8  027A               	subwf	_workStep,w
   664  03B9  1C03               	skipc
   665  03BA  2BBD               	goto	l3452
   666                           
   667                           ;main.c: 178: {
   668                           ;main.c: 179: workCtr2();
   669  03BB  25AE               	fcall	_workCtr2
   670                           
   671                           ;main.c: 180: }
   672  03BC  2BBE               	goto	l3454
   673  03BD                     l3452:	
   674                           
   675                           ;main.c: 181: else
   676                           ;main.c: 182: {
   677                           ;main.c: 183: workCtr();
   678  03BD  24A8               	fcall	_workCtr
   679  03BE                     l3454:	
   680                           
   681                           ;main.c: 184: }
   682                           ;main.c: 185: if(count1s == 0 && ++count900s >= 900)
   683  03BE  1283               	bcf	3,5	;RP0=0, select bank0
   684  03BF  0853               	movf	_count1s,w
   685  03C0  1D03               	btfss	3,2
   686  03C1  2BCC               	goto	l3460
   687  03C2  0AA4               	incf	_count900s,f
   688  03C3  1903               	skipnz
   689  03C4  0AA5               	incf	_count900s+1,f
   690  03C5  3003               	movlw	3
   691  03C6  0225               	subwf	_count900s+1,w
   692  03C7  3084               	movlw	132
   693  03C8  1903               	skipnz
   694  03C9  0224               	subwf	_count900s,w
   695  03CA  1803               	btfsc	3,0
   696                           
   697                           ;main.c: 186: {
   698                           ;main.c: 187: workStep = 0;
   699  03CB  01FA               	clrf	_workStep
   700  03CC                     l3460:	
   701                           
   702                           ;main.c: 188: }
   703                           ;main.c: 189: ledCtr();
   704  03CC  2333               	fcall	_ledCtr
   705                           
   706                           ;main.c: 190: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   707  03CD  0851               	movf	_chrgFlag,w
   708  03CE  1D03               	btfss	3,2
   709  03CF  2BEA               	goto	l3482
   710  03D0  087A               	movf	_workStep,w
   711  03D1  1D03               	btfss	3,2
   712  03D2  2BEA               	goto	l3482
   713  03D3  084A               	movf	_keyCount,w
   714  03D4  1D03               	btfss	3,2
   715  03D5  2BEA               	goto	l3482
   716  03D6  0869               	movf	_firstTime,w
   717  03D7  1D03               	btfss	3,2
   718  03D8  2BEA               	goto	l3482
   719  03D9  0843               	movf	_showBatTime,w
   720  03DA  1D03               	btfss	3,2
   721  03DB  2BEA               	goto	l3482
   722  03DC  0828               	movf	_overWorkTime,w
   723  03DD  0429               	iorwf	_overWorkTime+1,w
   724  03DE  1D03               	btfss	3,2
   725  03DF  2BEA               	goto	l3482
   726  03E0  30C8               	movlw	200
   727                           
   728                           ;main.c: 191: {
   729                           ;main.c: 192: shiweiNum = geweiNum = 0;
   730  03E1  01E7               	clrf	_geweiNum
   731  03E2  01E8               	clrf	_shiweiNum
   732                           
   733                           ;main.c: 193: if(++sleepTime >= 200)
   734  03E3  0AB9               	incf	_sleepTime,f
   735  03E4  0239               	subwf	_sleepTime,w
   736  03E5  1C03               	skipc
   737  03E6  2B9D               	goto	l691
   738                           
   739                           ;main.c: 194: {
   740                           ;main.c: 195: sleepTime = 0;
   741  03E7  01B9               	clrf	_sleepTime
   742                           
   743                           ;main.c: 196: Sleep_Mode();
   744  03E8  23EC               	fcall	_Sleep_Mode
   745  03E9  2B9D               	goto	l691
   746  03EA                     l3482:	
   747                           
   748                           ;main.c: 199: else
   749                           ;main.c: 200: {
   750                           ;main.c: 201: sleepTime = 0;
   751  03EA  01B9               	clrf	_sleepTime
   752  03EB  2B9D               	goto	l691
   753  03EC                     __end_of_main:	
   754                           
   755                           	psect	text1
   756  05AE                     __ptext1:	
   757 ;; *************** function _workCtr2 *****************
   758 ;; Defined at:
   759 ;;		line 753 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2, status,0, pclath, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 100/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1
   773 ;;      Params:         0       0       0
   774 ;;      Locals:         0       0       0
   775 ;;      Temps:          0       0       0
   776 ;;      Totals:         0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    4
   780 ;; This function calls:
   781 ;;		_ctr7
   782 ;;		_ctr8
   783 ;;		_ctr9
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           
   790                           ;psect for function _workCtr2
   791  05AE                     _workCtr2:	
   792                           
   793                           ;main.c: 756: if(++workTime > maxWorkTime)
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _workCtr2: [wreg+status,2+status,0+pclath+cstack]
   797  05AE  0AA2               	incf	_workTime,f
   798  05AF  1903               	skipnz
   799  05B0  0AA3               	incf	_workTime+1,f
   800  05B1  0823               	movf	_workTime+1,w
   801  05B2  0221               	subwf	_maxWorkTime+1,w
   802  05B3  1D03               	skipz
   803  05B4  2DB7               	goto	u3705
   804  05B5  0822               	movf	_workTime,w
   805  05B6  0220               	subwf	_maxWorkTime,w
   806  05B7                     u3705:	
   807  05B7  1803               	skipnc
   808  05B8  2DBB               	goto	l3364
   809                           
   810                           ;main.c: 757: {
   811                           ;main.c: 758: workTime = 0;
   812  05B9  01A2               	clrf	_workTime
   813  05BA  01A3               	clrf	_workTime+1
   814  05BB                     l3364:	
   815                           
   816                           ;main.c: 759: }
   817                           ;main.c: 760: if(workStep == 7)
   818  05BB  3007               	movlw	7
   819  05BC  067A               	xorwf	_workStep,w
   820  05BD  1D03               	btfss	3,2
   821  05BE  2DC0               	goto	l3368
   822                           
   823                           ;main.c: 761: {
   824                           ;main.c: 762: ctr7();
   825  05BF  2D54               	ljmp	l3142
   826  05C0                     l3368:	
   827                           ;main.c: 763: }
   828                           
   829                           
   830                           ;main.c: 764: else if(workStep == 8)
   831  05C0  3008               	movlw	8
   832  05C1  067A               	xorwf	_workStep,w
   833  05C2  1D03               	btfss	3,2
   834  05C3  2DC5               	goto	l3372
   835                           
   836                           ;main.c: 765: {
   837                           ;main.c: 766: ctr8();
   838  05C4  2D0B               	ljmp	l3156
   839  05C5                     l3372:	
   840                           ;main.c: 767: }
   841                           
   842                           
   843                           ;main.c: 768: else if(workStep == 9)
   844  05C5  3009               	movlw	9
   845  05C6  067A               	xorwf	_workStep,w
   846  05C7  1D03               	btfss	3,2
   847  05C8  0008               	return
   848                           
   849                           ;main.c: 769: {
   850                           ;main.c: 770: ctr9();
   851  05C9  2CDB               	ljmp	l2402
   852  05CA                     __end_of_workCtr2:	
   853                           
   854                           	psect	text2
   855  04DB                     __ptext2:	
   856 ;; *************** function _ctr9 *****************
   857 ;; Defined at:
   858 ;;		line 730 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;		None
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 100/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1
   872 ;;      Params:         0       0       0
   873 ;;      Locals:         0       0       0
   874 ;;      Temps:          0       0       0
   875 ;;      Totals:         0       0       0
   876 ;;Total ram usage:        0 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    2
   879 ;; This function calls:
   880 ;;		Nothing
   881 ;; This function is called by:
   882 ;;		_workCtr2
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           
   887                           ;psect for function _ctr9
   888  04DB                     _ctr9:	
   889  04DB                     l2402:	
   890                           ;incstack = 0
   891                           ; Regs used in _ctr9: [wreg+status,2+status,0]
   892                           
   893                           
   894                           ;main.c: 732: maxWorkTime = 600;
   895  04DB  3058               	movlw	88
   896  04DC  00A0               	movwf	_maxWorkTime
   897  04DD  3002               	movlw	2
   898  04DE  00A1               	movwf	_maxWorkTime+1
   899                           
   900                           ;main.c: 733: if(workTime % 2 == 0)
   901  04DF  1822               	btfsc	_workTime,0
   902  04E0  0008               	return
   903                           
   904                           ;main.c: 734: {
   905                           ;main.c: 735: if(workTime < 260 && curDuty < 199)
   906  04E1  3001               	movlw	1
   907  04E2  0223               	subwf	_workTime+1,w
   908  04E3  3004               	movlw	4
   909  04E4  1903               	skipnz
   910  04E5  0222               	subwf	_workTime,w
   911  04E6  1803               	skipnc
   912  04E7  2CEE               	goto	l2412
   913  04E8  30C7               	movlw	199
   914  04E9  0236               	subwf	_curDuty,w
   915  04EA  1803               	skipnc
   916  04EB  2CEE               	goto	l2412
   917                           
   918                           ;main.c: 736: {
   919                           ;main.c: 737: curDuty++;
   920  04EC  0AB6               	incf	_curDuty,f
   921                           
   922                           ;main.c: 738: }
   923  04ED  2D04               	goto	l2422
   924  04EE                     l2412:	
   925                           
   926                           ;main.c: 739: else if(workTime < 340)
   927  04EE  3001               	movlw	1
   928  04EF  0223               	subwf	_workTime+1,w
   929  04F0  3054               	movlw	84
   930  04F1  1903               	skipnz
   931  04F2  0222               	subwf	_workTime,w
   932  04F3  1803               	skipnc
   933  04F4  2CF8               	goto	l2416
   934                           
   935                           ;main.c: 740: {
   936                           ;main.c: 741: curDuty = 199;
   937  04F5  30C7               	movlw	199
   938  04F6  00B6               	movwf	_curDuty
   939                           
   940                           ;main.c: 742: }
   941  04F7  2D04               	goto	l2422
   942  04F8                     l2416:	
   943                           
   944                           ;main.c: 743: else if(workTime >= 340 && curDuty > 70)
   945  04F8  3001               	movlw	1
   946  04F9  0223               	subwf	_workTime+1,w
   947  04FA  3054               	movlw	84
   948  04FB  1903               	skipnz
   949  04FC  0222               	subwf	_workTime,w
   950  04FD  1C03               	skipc
   951  04FE  2D04               	goto	l2422
   952  04FF  3047               	movlw	71
   953  0500  0236               	subwf	_curDuty,w
   954  0501  1C03               	skipc
   955  0502  2D04               	goto	l2422
   956                           
   957                           ;main.c: 744: {
   958                           ;main.c: 745: curDuty--;
   959  0503  03B6               	decf	_curDuty,f
   960  0504                     l2422:	
   961                           
   962                           ;main.c: 746: }
   963                           ;main.c: 747: PWMD23H = 0;
   964  0504  1683               	bsf	3,5	;RP0=1, select bank1
   965  0505  019E               	clrf	30	;volatile
   966                           
   967                           ;main.c: 748: PWMD3L = curDuty;
   968  0506  1283               	bcf	3,5	;RP0=0, select bank0
   969  0507  0836               	movf	_curDuty,w
   970  0508  1683               	bsf	3,5	;RP0=1, select bank1
   971  0509  009C               	movwf	28	;volatile
   972  050A  0008               	return
   973  050B                     __end_of_ctr9:	
   974                           
   975                           	psect	text3
   976  050B                     __ptext3:	
   977 ;; *************** function _ctr8 *****************
   978 ;; Defined at:
   979 ;;		line 696 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 100/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1
   993 ;;      Params:         0       0       0
   994 ;;      Locals:         0       0       0
   995 ;;      Temps:          0       0       0
   996 ;;      Totals:         0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    3
  1000 ;; This function calls:
  1001 ;;		___lwmod
  1002 ;;		_pwmInit
  1003 ;;		_pwmStop
  1004 ;; This function is called by:
  1005 ;;		_workCtr2
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _ctr8
  1011  050B                     _ctr8:	
  1012  050B                     l3156:	
  1013                           ;incstack = 0
  1014                           ; Regs used in _ctr8: [wreg+status,2+status,0+pclath+cstack]
  1015                           
  1016                           
  1017                           ;main.c: 698: maxWorkTime = 494;
  1018  050B  30EE               	movlw	238
  1019  050C  00A0               	movwf	_maxWorkTime
  1020  050D  3001               	movlw	1
  1021  050E  00A1               	movwf	_maxWorkTime+1
  1022                           
  1023                           ;main.c: 699: if(workTime < 338)
  1024  050F  0223               	subwf	_workTime+1,w
  1025  0510  3052               	movlw	82
  1026  0511  1903               	skipnz
  1027  0512  0222               	subwf	_workTime,w
  1028  0513  1803               	skipnc
  1029  0514  2D22               	goto	l3168
  1030                           
  1031                           ;main.c: 700: {
  1032                           ;main.c: 701: if(workTime % 26 < 13)
  1033  0515  301A               	movlw	26
  1034  0516  2529               	fcall	PL4	;call to abstracted procedure
  1035  0517  2530               	fcall	___lwmod
  1036  0518  3000               	movlw	0
  1037  0519  0274               	subwf	?___lwmod+1,w
  1038  051A  300D               	movlw	13
  1039  051B                     L1:	
  1040  051B  1903               	skipnz
  1041  051C  0273               	subwf	?___lwmod,w
  1042  051D  1803               	skipnc
  1043  051E  2D21               	goto	l3166
  1044                           
  1045                           ;main.c: 702: {
  1046                           ;main.c: 703: pwmInit();
  1047  051F  2640               	fcall	_pwmInit
  1048                           
  1049                           ;main.c: 704: PWMD23H = 0;
  1050                           
  1051                           ;main.c: 705: PWMD3L = 172;
  1052                           
  1053                           ;main.c: 706: }
  1054  0520  2D6E               	ljmp	PL12	;call to abstracted procedure
  1055  0521                     l3166:	
  1056                           
  1057                           ;main.c: 707: else
  1058                           ;main.c: 708: {
  1059                           ;main.c: 709: pwmStop();
  1060  0521  2E6F               	ljmp	l2232
  1061  0522                     l3168:	
  1062                           
  1063                           ;main.c: 712: else
  1064                           ;main.c: 713: {
  1065                           ;main.c: 714: if(workTime % 12 < 6)
  1066  0522  300C               	movlw	12
  1067  0523  2529               	fcall	PL4	;call to abstracted procedure
  1068  0524  2530               	fcall	___lwmod
  1069  0525  3000               	movlw	0
  1070  0526  0274               	subwf	?___lwmod+1,w
  1071  0527  3006               	movlw	6
  1072  0528  2D1B               	goto	L1
  1073  0529                     __end_of_ctr8:	
  1074  0529                     PL4:	
  1075  0529  00F3               	movwf	___lwmod@divisor
  1076  052A  01F4               	clrf	___lwmod@divisor+1
  1077  052B  0823               	movf	_workTime+1,w
  1078  052C  00F6               	movwf	___lwmod@dividend+1
  1079  052D  0822               	movf	_workTime,w
  1080  052E  00F5               	movwf	___lwmod@dividend
  1081  052F  0008               	return
  1082  0530                     __end_ofPL4:	
  1083                           
  1084                           	psect	text4
  1085  0554                     __ptext4:	
  1086 ;; *************** function _ctr7 *****************
  1087 ;; Defined at:
  1088 ;;		line 681 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;		None
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;		None
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0, pclath, cstack
  1097 ;; Tracked objects:
  1098 ;;		On entry : 100/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1
  1102 ;;      Params:         0       0       0
  1103 ;;      Locals:         0       0       0
  1104 ;;      Temps:          0       0       0
  1105 ;;      Totals:         0       0       0
  1106 ;;Total ram usage:        0 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    3
  1109 ;; This function calls:
  1110 ;;		___lwmod
  1111 ;;		_pwmInit
  1112 ;;		_pwmStop
  1113 ;; This function is called by:
  1114 ;;		_workCtr2
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           
  1119                           ;psect for function _ctr7
  1120  0554                     _ctr7:	
  1121  0554                     l3142:	
  1122                           ;incstack = 0
  1123                           ; Regs used in _ctr7: [wreg+status,2+status,0+pclath+cstack]
  1124                           
  1125                           
  1126                           ;main.c: 683: maxWorkTime = 450;
  1127  0554  30C2               	movlw	194
  1128  0555  00A0               	movwf	_maxWorkTime
  1129  0556  3001               	movlw	1
  1130  0557  00A1               	movwf	_maxWorkTime+1
  1131                           
  1132                           ;main.c: 684: if(workTime > 390 || workTime % 100 > 90)
  1133  0558  0223               	subwf	_workTime+1,w
  1134  0559  3087               	movlw	135
  1135  055A  1903               	skipnz
  1136  055B  0222               	subwf	_workTime,w
  1137  055C  1803               	skipnc
  1138  055D  2D68               	goto	l3146
  1139  055E  3064               	movlw	100
  1140  055F  2529               	fcall	PL4	;call to abstracted procedure
  1141  0560  2530               	fcall	___lwmod
  1142  0561  3000               	movlw	0
  1143  0562  0274               	subwf	?___lwmod+1,w
  1144  0563  305B               	movlw	91
  1145  0564  1903               	skipnz
  1146  0565  0273               	subwf	?___lwmod,w
  1147  0566  1C03               	skipc
  1148  0567  2D69               	goto	l3148
  1149  0568                     l3146:	
  1150                           
  1151                           ;main.c: 685: {
  1152                           ;main.c: 686: pwmStop();
  1153  0568  2E6F               	ljmp	l2232
  1154  0569                     l3148:	
  1155                           ;main.c: 687: }
  1156                           
  1157                           
  1158                           ;main.c: 688: else if(motorPwmFlag == 0)
  1159  0569  0837               	movf	_motorPwmFlag,w
  1160  056A  1D03               	btfss	3,2
  1161  056B  0008               	return
  1162                           
  1163                           ;main.c: 689: {
  1164                           ;main.c: 690: pwmInit();
  1165  056C  2640               	fcall	_pwmInit
  1166                           
  1167                           ;main.c: 691: PWMD23H = 0;
  1168                           
  1169                           ;main.c: 692: PWMD3L = 172;
  1170  056D  2D6E               	ljmp	PL12	;call to abstracted procedure
  1171  056E                     __end_of_ctr7:	
  1172  056E                     PL12:	
  1173  056E  1683               	bsf	3,5	;RP0=1, select bank1
  1174  056F  019E               	clrf	30	;volatile
  1175  0570  30AC               	movlw	172
  1176  0571  009C               	movwf	28	;volatile
  1177  0572  0008               	return
  1178  0573                     __end_ofPL12:	
  1179                           
  1180                           	psect	text5
  1181  0530                     __ptext5:	
  1182 ;; *************** function ___lwmod *****************
  1183 ;; Defined at:
  1184 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  divisor         2    3[COMMON] unsigned int 
  1187 ;;  dividend        2    5[COMMON] unsigned int 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  counter         1    0[BANK0 ] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2    3[COMMON] unsigned int 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0
  1194 ;; Tracked objects:
  1195 ;;		On entry : 100/0
  1196 ;;		On exit  : 100/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0   BANK1
  1199 ;;      Params:         4       0       0
  1200 ;;      Locals:         0       1       0
  1201 ;;      Temps:          0       0       0
  1202 ;;      Totals:         4       1       0
  1203 ;;Total ram usage:        5 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    2
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_ctr7
  1210 ;;		_ctr8
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function ___lwmod
  1216  0530                     ___lwmod:	
  1217                           
  1218                           ;incstack = 0
  1219                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1220  0530  0873               	movf	___lwmod@divisor,w
  1221  0531  0474               	iorwf	___lwmod@divisor+1,w
  1222  0532  1903               	btfsc	3,2
  1223  0533  2D4F               	goto	l3138
  1224  0534  01D6               	clrf	___lwmod@counter
  1225  0535                     L2:	
  1226  0535  0AD6               	incf	___lwmod@counter,f
  1227  0536  1BF4               	btfsc	___lwmod@divisor+1,7
  1228  0537  2D3C               	goto	l3130
  1229  0538  1003               	clrc
  1230  0539  0DF3               	rlf	___lwmod@divisor,f
  1231  053A  0DF4               	rlf	___lwmod@divisor+1,f
  1232  053B  2D35               	goto	L2
  1233  053C                     l3130:	
  1234  053C  0874               	movf	___lwmod@divisor+1,w
  1235  053D  0276               	subwf	___lwmod@dividend+1,w
  1236  053E  1D03               	skipz
  1237  053F  2D42               	goto	u3235
  1238  0540  0873               	movf	___lwmod@divisor,w
  1239  0541  0275               	subwf	___lwmod@dividend,w
  1240  0542                     u3235:	
  1241  0542  1C03               	skipc
  1242  0543  2D4B               	goto	L3
  1243  0544  0873               	movf	___lwmod@divisor,w
  1244  0545  02F5               	subwf	___lwmod@dividend,f
  1245  0546  0874               	movf	___lwmod@divisor+1,w
  1246  0547  1C03               	skipc
  1247  0548  03F6               	decf	___lwmod@dividend+1,f
  1248  0549  02F6               	subwf	___lwmod@dividend+1,f
  1249  054A  1003               	clrc
  1250  054B                     L3:	
  1251  054B  0CF4               	rrf	___lwmod@divisor+1,f
  1252  054C  0CF3               	rrf	___lwmod@divisor,f
  1253  054D  0BD6               	decfsz	___lwmod@counter,f
  1254  054E  2D3C               	goto	l3130
  1255  054F                     l3138:	
  1256  054F  0876               	movf	___lwmod@dividend+1,w
  1257  0550  00F4               	movwf	?___lwmod+1
  1258  0551  0875               	movf	___lwmod@dividend,w
  1259  0552  00F3               	movwf	?___lwmod
  1260  0553  0008               	return
  1261  0554                     __end_of___lwmod:	
  1262                           
  1263                           	psect	text6
  1264  04A8                     __ptext6:	
  1265 ;; *************** function _workCtr *****************
  1266 ;; Defined at:
  1267 ;;		line 775 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0, pclath, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 100/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1
  1281 ;;      Params:         0       0       0
  1282 ;;      Locals:         0       0       0
  1283 ;;      Temps:          0       0       0
  1284 ;;      Totals:         0       0       0
  1285 ;;Total ram usage:        0 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    3
  1288 ;; This function calls:
  1289 ;;		_pwmInit
  1290 ;;		_pwmStop
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           
  1297                           ;psect for function _workCtr
  1298  04A8                     _workCtr:	
  1299                           
  1300                           ;main.c: 778: if(startTime > 0)
  1301                           
  1302                           ;incstack = 0
  1303                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1304  04A8  0847               	movf	_startTime,w
  1305  04A9  1D03               	btfss	3,2
  1306                           
  1307                           ;main.c: 779: {
  1308                           ;main.c: 780: startTime--;
  1309  04AA  03C7               	decf	_startTime,f
  1310                           
  1311                           ;main.c: 781: }
  1312                           ;main.c: 782: if(workStep > 0)
  1313  04AB  087A               	movf	_workStep,w
  1314  04AC  1903               	btfsc	3,2
  1315  04AD  2CD7               	goto	l2922
  1316                           
  1317                           ;main.c: 783: {
  1318                           ;main.c: 784: if(motorPwmFlag == 0)
  1319  04AE  0837               	movf	_motorPwmFlag,w
  1320  04AF  1D03               	btfss	3,2
  1321  04B0  2CB2               	goto	l2892
  1322                           
  1323                           ;main.c: 785: {
  1324                           ;main.c: 786: pwmInit();
  1325  04B1  2640               	fcall	_pwmInit
  1326  04B2                     l2892:	
  1327                           
  1328                           ;main.c: 788: }
  1329                           ;main.c: 789: if(workStep == 1)
  1330  04B2  0B7A               	decfsz	_workStep,w
  1331  04B3  2CB6               	goto	l2896
  1332                           
  1333                           ;main.c: 790: {
  1334                           ;main.c: 791: maxDuty = 76;
  1335  04B4  304C               	movlw	76
  1336  04B5  2CCF               	goto	L4
  1337  04B6                     l2896:	
  1338                           ;main.c: 792: }
  1339                           
  1340                           
  1341                           ;main.c: 793: else if(workStep == 2)
  1342  04B6  3002               	movlw	2
  1343  04B7  067A               	xorwf	_workStep,w
  1344  04B8  1D03               	btfss	3,2
  1345  04B9  2CBC               	goto	l2900
  1346                           
  1347                           ;main.c: 794: maxDuty = 100;
  1348  04BA  3064               	movlw	100
  1349  04BB  2CCF               	goto	L4
  1350  04BC                     l2900:	
  1351                           
  1352                           ;main.c: 795: else if(workStep == 3)
  1353  04BC  3003               	movlw	3
  1354  04BD  067A               	xorwf	_workStep,w
  1355  04BE  1D03               	btfss	3,2
  1356  04BF  2CC2               	goto	l2904
  1357                           
  1358                           ;main.c: 796: maxDuty = 124;
  1359  04C0  307C               	movlw	124
  1360  04C1  2CCF               	goto	L4
  1361  04C2                     l2904:	
  1362                           
  1363                           ;main.c: 797: else if(workStep == 4)
  1364  04C2  3004               	movlw	4
  1365  04C3  067A               	xorwf	_workStep,w
  1366  04C4  1D03               	btfss	3,2
  1367  04C5  2CC8               	goto	l2908
  1368                           
  1369                           ;main.c: 798: maxDuty = 150;
  1370  04C6  3096               	movlw	150
  1371  04C7  2CCF               	goto	L4
  1372  04C8                     l2908:	
  1373                           
  1374                           ;main.c: 799: else if(workStep == 5)
  1375  04C8  3005               	movlw	5
  1376  04C9  067A               	xorwf	_workStep,w
  1377  04CA  1D03               	btfss	3,2
  1378  04CB  2CCE               	goto	l2914
  1379                           
  1380                           ;main.c: 800: maxDuty = 160;
  1381  04CC  30A0               	movlw	160
  1382  04CD  2CCF               	goto	L4
  1383  04CE                     l2914:	
  1384                           
  1385                           ;main.c: 802: maxDuty = 172;
  1386  04CE  30AC               	movlw	172
  1387  04CF                     L4:	
  1388  04CF  00C8               	movwf	_maxDuty
  1389                           
  1390                           ;main.c: 806: }
  1391                           ;main.c: 807: PWMD23H = 0;
  1392  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  1393  04D1  019E               	clrf	30	;volatile
  1394                           
  1395                           ;main.c: 808: PWMD3L = maxDuty;
  1396  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1397  04D3  0848               	movf	_maxDuty,w
  1398  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  1399  04D5  009C               	movwf	28	;volatile
  1400                           
  1401                           ;main.c: 811: }
  1402  04D6  0008               	return
  1403  04D7                     l2922:	
  1404                           
  1405                           ;main.c: 812: else
  1406                           ;main.c: 813: {
  1407                           ;main.c: 814: pwmStop();
  1408  04D7  266F               	fcall	_pwmStop
  1409                           
  1410                           ;main.c: 815: count900s = 0;
  1411  04D8  01A4               	clrf	_count900s
  1412  04D9  01A5               	clrf	_count900s+1
  1413  04DA  0008               	return
  1414  04DB                     __end_of_workCtr:	
  1415                           
  1416                           	psect	text7
  1417  0333                     __ptext7:	
  1418 ;; *************** function _ledCtr *****************
  1419 ;; Defined at:
  1420 ;;		line 365 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 100/0
  1431 ;;		On exit  : 100/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1
  1434 ;;      Params:         0       0       0
  1435 ;;      Locals:         0       0       0
  1436 ;;      Temps:          0       0       0
  1437 ;;      Totals:         0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    3
  1441 ;; This function calls:
  1442 ;;		___lbdiv
  1443 ;;		___lbmod
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function _ledCtr
  1451  0333                     _ledCtr:	
  1452                           
  1453                           ;main.c: 367: if(firstTime > 0)
  1454                           
  1455                           ;incstack = 0
  1456                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1457  0333  0869               	movf	_firstTime,w
  1458  0334  1903               	btfsc	3,2
  1459  0335  2B3E               	goto	l3384
  1460                           
  1461                           ;main.c: 368: {
  1462                           ;main.c: 369: firstTime--;
  1463  0336  03E9               	decf	_firstTime,f
  1464                           
  1465                           ;main.c: 370: if(prePwStep < pwStep)
  1466  0337  0845               	movf	_pwStep,w
  1467  0338  0279               	subwf	_prePwStep,w
  1468  0339  1803               	skipnc
  1469  033A  0008               	return
  1470                           
  1471                           ;main.c: 371: {
  1472                           ;main.c: 372: prePwStep = pwStep;
  1473  033B  0845               	movf	_pwStep,w
  1474  033C  00F9               	movwf	_prePwStep
  1475  033D  0008               	return
  1476  033E                     l3384:	
  1477                           
  1478                           ;main.c: 375: else if(overWorkTime > 0)
  1479  033E  0828               	movf	_overWorkTime,w
  1480  033F  0429               	iorwf	_overWorkTime+1,w
  1481  0340  1903               	btfsc	3,2
  1482  0341  2B51               	goto	l3392
  1483                           
  1484                           ;main.c: 376: {
  1485                           ;main.c: 377: overWorkTime--;
  1486  0342  3001               	movlw	1
  1487  0343  02A8               	subwf	_overWorkTime,f
  1488  0344  3000               	movlw	0
  1489  0345  1C03               	skipc
  1490  0346  03A9               	decf	_overWorkTime+1,f
  1491  0347  02A9               	subwf	_overWorkTime+1,f
  1492                           
  1493                           ;main.c: 378: shiweiNum = numArray[11];
  1494  0348  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
  1495  0349  0084               	movwf	4
  1496  034A  261B               	fcall	stringdir
  1497  034B  00E8               	movwf	_shiweiNum
  1498                           
  1499                           ;main.c: 379: geweiNum = numArray[12];
  1500  034C  300D               	movlw	low (((_numArray+12)-__stringbase)| (0+32768))
  1501  034D  0084               	movwf	4
  1502  034E  261B               	fcall	stringdir
  1503  034F  00E7               	movwf	_geweiNum
  1504                           
  1505                           ;main.c: 380: }
  1506  0350  0008               	return
  1507  0351                     l3392:	
  1508                           
  1509                           ;main.c: 381: else if(showBatTime > 0)
  1510  0351  0843               	movf	_showBatTime,w
  1511  0352  1903               	btfsc	3,2
  1512  0353  2B63               	goto	l3400
  1513  0354  300A               	movlw	10
  1514                           
  1515                           ;main.c: 382: {
  1516                           ;main.c: 383: showBatTime--;
  1517  0355  03C3               	decf	_showBatTime,f
  1518                           
  1519                           ;main.c: 384: shiweiNum = numArray[prePwStep/10];
  1520  0356  00F3               	movwf	___lbdiv@divisor
  1521  0357  0879               	movf	_prePwStep,w
  1522  0358  25E6               	fcall	___lbdiv
  1523  0359  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1524  035A  0084               	movwf	4
  1525  035B  261B               	fcall	stringdir
  1526                           
  1527                           ;main.c: 385: geweiNum = numArray[prePwStep%10];
  1528  035C  238E               	fcall	PL18	;call to abstracted procedure
  1529  035D  25CA               	fcall	___lbmod
  1530  035E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1531  035F  0084               	movwf	4
  1532  0360  261B               	fcall	stringdir
  1533  0361  00E7               	movwf	_geweiNum
  1534                           
  1535                           ;main.c: 386: }
  1536  0362  0008               	return
  1537  0363                     l3400:	
  1538                           
  1539                           ;main.c: 387: else if(workStep > 0)
  1540  0363  087A               	movf	_workStep,w
  1541  0364  1903               	btfsc	3,2
  1542  0365  2B7A               	goto	l3412
  1543                           
  1544                           ;main.c: 388: {
  1545                           ;main.c: 390: if(workStep < 7)
  1546  0366  3007               	movlw	7
  1547  0367  027A               	subwf	_workStep,w
  1548  0368  1803               	skipnc
  1549  0369  2B72               	goto	l3408
  1550                           
  1551                           ;main.c: 391: {
  1552                           ;main.c: 392: shiweiNum = 0x73;
  1553  036A  3073               	movlw	115
  1554  036B  00E8               	movwf	_shiweiNum
  1555                           
  1556                           ;main.c: 393: geweiNum = numArray[workStep];
  1557  036C  087A               	movf	_workStep,w
  1558  036D  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1559  036E  0084               	movwf	4
  1560  036F  261B               	fcall	stringdir
  1561  0370  00E7               	movwf	_geweiNum
  1562                           
  1563                           ;main.c: 394: }
  1564  0371  0008               	return
  1565  0372                     l3408:	
  1566                           
  1567                           ;main.c: 395: else
  1568                           ;main.c: 396: {
  1569                           ;main.c: 397: shiweiNum = 0x71;
  1570  0372  3071               	movlw	113
  1571  0373  00E8               	movwf	_shiweiNum
  1572                           
  1573                           ;main.c: 398: geweiNum = numArray[workStep - 6];
  1574  0374  087A               	movf	_workStep,w
  1575  0375  3EFB               	addlw	low (((_numArray-__stringbase)| (0+32768)+250))
  1576  0376  0084               	movwf	4
  1577  0377  261B               	fcall	stringdir
  1578  0378  00E7               	movwf	_geweiNum
  1579  0379  0008               	return
  1580  037A                     l3412:	
  1581                           
  1582                           ;main.c: 402: else if(chrgFlag)
  1583  037A  0851               	movf	_chrgFlag,w
  1584  037B  1903               	btfsc	3,2
  1585  037C  2B8B               	goto	l3416
  1586                           
  1587                           ;main.c: 403: {
  1588                           ;main.c: 404: shiweiNum = numArray[prePwStep/10];
  1589  037D  300A               	movlw	10
  1590  037E  00F3               	movwf	___lbdiv@divisor
  1591  037F  0879               	movf	_prePwStep,w
  1592  0380  25E6               	fcall	___lbdiv
  1593  0381  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1594  0382  0084               	movwf	4
  1595  0383  261B               	fcall	stringdir
  1596                           
  1597                           ;main.c: 405: geweiNum = numArray[prePwStep%10];
  1598  0384  238E               	fcall	PL18	;call to abstracted procedure
  1599  0385  25CA               	fcall	___lbmod
  1600  0386  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1601  0387  0084               	movwf	4
  1602  0388  261B               	fcall	stringdir
  1603  0389  00E7               	movwf	_geweiNum
  1604                           
  1605                           ;main.c: 406: }
  1606  038A  0008               	return
  1607  038B                     l3416:	
  1608                           
  1609                           ;main.c: 407: else
  1610                           ;main.c: 408: {
  1611                           ;main.c: 409: shiweiNum = 0;
  1612  038B  01E8               	clrf	_shiweiNum
  1613                           
  1614                           ;main.c: 410: geweiNum = 0;
  1615  038C  01E7               	clrf	_geweiNum
  1616  038D  0008               	return
  1617  038E                     __end_of_ledCtr:	
  1618  038E                     PL18:	
  1619  038E  00E8               	movwf	_shiweiNum
  1620  038F  300A               	movlw	10
  1621  0390  00F3               	movwf	___lbmod@divisor
  1622  0391  0879               	movf	_prePwStep,w
  1623  0392  0008               	return
  1624  0393                     __end_ofPL18:	
  1625                           
  1626                           	psect	text8
  1627  05CA                     __ptext8:	
  1628 ;; *************** function ___lbmod *****************
  1629 ;; Defined at:
  1630 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  dividend        1    wreg     unsigned char 
  1633 ;;  divisor         1    3[COMMON] unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  dividend        1    0[BANK0 ] unsigned char 
  1636 ;;  rem             1    2[BANK0 ] unsigned char 
  1637 ;;  counter         1    1[BANK0 ] unsigned char 
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      unsigned char 
  1640 ;; Registers used:
  1641 ;;		wreg, status,2, status,0
  1642 ;; Tracked objects:
  1643 ;;		On entry : 100/0
  1644 ;;		On exit  : 100/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMMON   BANK0   BANK1
  1647 ;;      Params:         1       0       0
  1648 ;;      Locals:         0       3       0
  1649 ;;      Temps:          1       0       0
  1650 ;;      Totals:         2       3       0
  1651 ;;Total ram usage:        5 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    2
  1654 ;; This function calls:
  1655 ;;		Nothing
  1656 ;; This function is called by:
  1657 ;;		_ledCtr
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function ___lbmod
  1663  05CA                     ___lbmod:	
  1664                           
  1665                           ;incstack = 0
  1666                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1667                           ;___lbmod@dividend stored from wreg
  1668  05CA  00D6               	movwf	___lbmod@dividend
  1669  05CB  3008               	movlw	8
  1670  05CC  00D7               	movwf	___lbmod@counter
  1671  05CD  01D8               	clrf	___lbmod@rem
  1672  05CE                     l3254:	
  1673  05CE  0856               	movf	___lbmod@dividend,w
  1674  05CF  00F4               	movwf	??___lbmod
  1675  05D0  3007               	movlw	7
  1676  05D1  1003               	clrc
  1677  05D2                     L5:	
  1678  05D2  0CF4               	rrf	??___lbmod,f
  1679  05D3  3EFF               	addlw	-1
  1680  05D4  1003               	clrc
  1681  05D5  1D03               	skipz
  1682  05D6  2DD2               	goto	L5
  1683  05D7  0D58               	rlf	___lbmod@rem,w
  1684  05D8  0474               	iorwf	??___lbmod,w
  1685  05D9  00D8               	movwf	___lbmod@rem
  1686  05DA  1003               	clrc
  1687  05DB  0DD6               	rlf	___lbmod@dividend,f
  1688  05DC  0873               	movf	___lbmod@divisor,w
  1689  05DD  0258               	subwf	___lbmod@rem,w
  1690  05DE  1C03               	skipc
  1691  05DF  2DE2               	goto	l3262
  1692  05E0  0873               	movf	___lbmod@divisor,w
  1693  05E1  02D8               	subwf	___lbmod@rem,f
  1694  05E2                     l3262:	
  1695  05E2  0BD7               	decfsz	___lbmod@counter,f
  1696  05E3  2DCE               	goto	l3254
  1697  05E4  0858               	movf	___lbmod@rem,w
  1698  05E5  0008               	return
  1699  05E6                     __end_of___lbmod:	
  1700                           
  1701                           	psect	text9
  1702  05E6                     __ptext9:	
  1703 ;; *************** function ___lbdiv *****************
  1704 ;; Defined at:
  1705 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  dividend        1    wreg     unsigned char 
  1708 ;;  divisor         1    3[COMMON] unsigned char 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  dividend        1    4[COMMON] unsigned char 
  1711 ;;  quotient        1    6[COMMON] unsigned char 
  1712 ;;  counter         1    5[COMMON] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      unsigned char 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0
  1717 ;; Tracked objects:
  1718 ;;		On entry : 100/0
  1719 ;;		On exit  : 100/0
  1720 ;;		Unchanged: 100/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1
  1722 ;;      Params:         1       0       0
  1723 ;;      Locals:         3       0       0
  1724 ;;      Temps:          0       0       0
  1725 ;;      Totals:         4       0       0
  1726 ;;Total ram usage:        4 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_ledCtr
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           
  1737                           ;psect for function ___lbdiv
  1738  05E6                     ___lbdiv:	
  1739                           
  1740                           ;incstack = 0
  1741                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1742                           ;___lbdiv@dividend stored from wreg
  1743  05E6  00F4               	movwf	___lbdiv@dividend
  1744  05E7  01F6               	clrf	___lbdiv@quotient
  1745  05E8  0873               	movf	___lbdiv@divisor,w
  1746  05E9  1903               	btfsc	3,2
  1747  05EA  2DFF               	goto	l2518
  1748  05EB  01F5               	clrf	___lbdiv@counter
  1749  05EC                     l2504:	
  1750  05EC  0AF5               	incf	___lbdiv@counter,f
  1751  05ED  1BF3               	btfsc	___lbdiv@divisor,7
  1752  05EE  2DF2               	goto	l1226
  1753  05EF  1003               	clrc
  1754  05F0  0DF3               	rlf	___lbdiv@divisor,f
  1755  05F1  2DEC               	goto	l2504
  1756  05F2                     l1226:	
  1757  05F2  1003               	clrc
  1758  05F3  0DF6               	rlf	___lbdiv@quotient,f
  1759  05F4  0873               	movf	___lbdiv@divisor,w
  1760  05F5  0274               	subwf	___lbdiv@dividend,w
  1761  05F6  1C03               	skipc
  1762  05F7  2DFC               	goto	L6
  1763  05F8  0873               	movf	___lbdiv@divisor,w
  1764  05F9  02F4               	subwf	___lbdiv@dividend,f
  1765  05FA  1476               	bsf	___lbdiv@quotient,0
  1766  05FB  1003               	clrc
  1767  05FC                     L6:	
  1768  05FC  0CF3               	rrf	___lbdiv@divisor,f
  1769  05FD  0BF5               	decfsz	___lbdiv@counter,f
  1770  05FE  2DF2               	goto	l1226
  1771  05FF                     l2518:	
  1772  05FF  0876               	movf	___lbdiv@quotient,w
  1773  0600  0008               	return
  1774  0601                     __end_of___lbdiv:	
  1775                           
  1776                           	psect	text10
  1777  042E                     __ptext10:	
  1778 ;; *************** function _keyCtr *****************
  1779 ;; Defined at:
  1780 ;;		line 631 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  kclick          1    4[COMMON] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, pclath, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 100/0
  1791 ;;		On exit  : 100/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1
  1794 ;;      Params:         0       0       0
  1795 ;;      Locals:         1       0       0
  1796 ;;      Temps:          0       0       0
  1797 ;;      Totals:         1       0       0
  1798 ;;Total ram usage:        1 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    3
  1801 ;; This function calls:
  1802 ;;		_keyRead
  1803 ;;		_pwmInit
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _keyCtr
  1811  042E                     _keyCtr:	
  1812                           
  1813                           ;main.c: 633: char kclick = keyRead(0x04 & (~PORTB));
  1814                           
  1815                           ;incstack = 0
  1816                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1817  042E  0906               	comf	6,w	;volatile
  1818  042F  3904               	andlw	4
  1819  0430  2573               	fcall	_keyRead
  1820  0431  00F4               	movwf	keyCtr@kclick
  1821                           
  1822                           ;main.c: 634: if(kclick == 1)
  1823  0432  0B74               	decfsz	keyCtr@kclick,w
  1824  0433  2C5A               	goto	l2854
  1825                           
  1826                           ;main.c: 635: {
  1827                           ;main.c: 636: if(workStep > 0)
  1828  0434  087A               	movf	_workStep,w
  1829  0435  1903               	btfsc	3,2
  1830  0436  2C51               	goto	l2846
  1831                           
  1832                           ;main.c: 637: {
  1833                           ;main.c: 638: if(++workStep > 9)
  1834  0437  300A               	movlw	10
  1835  0438  0AFA               	incf	_workStep,f
  1836  0439  027A               	subwf	_workStep,w
  1837  043A  1C03               	skipc
  1838  043B  2C3E               	goto	l2834
  1839                           
  1840                           ;main.c: 639: {
  1841                           ;main.c: 640: workStep = 1;
  1842  043C  01FA               	clrf	_workStep
  1843  043D  0AFA               	incf	_workStep,f
  1844  043E                     l2834:	
  1845                           
  1846                           ;main.c: 641: }
  1847                           ;main.c: 642: if(workStep == 9)
  1848  043E  3009               	movlw	9
  1849  043F  067A               	xorwf	_workStep,w
  1850  0440  1D03               	btfss	3,2
  1851  0441  2C45               	goto	l2840
  1852                           
  1853                           ;main.c: 643: {
  1854                           ;main.c: 644: pwmInit();
  1855  0442  2640               	fcall	_pwmInit
  1856                           
  1857                           ;main.c: 645: maxDuty = 70;
  1858  0443  3046               	movlw	70
  1859  0444  00C8               	movwf	_maxDuty
  1860  0445                     l2840:	
  1861  0445  3007               	movlw	7
  1862                           
  1863                           ;main.c: 646: }
  1864                           ;main.c: 647: workTime = 0;
  1865  0446  01A2               	clrf	_workTime
  1866  0447  01A3               	clrf	_workTime+1
  1867                           
  1868                           ;main.c: 648: if(workStep == 7)
  1869  0448  067A               	xorwf	_workStep,w
  1870  0449  1D03               	btfss	3,2
  1871  044A  2C4E               	goto	l821
  1872                           
  1873                           ;main.c: 649: {
  1874                           ;main.c: 650: workTime = 100;
  1875  044B  3064               	movlw	100
  1876  044C  00A2               	movwf	_workTime
  1877  044D  01A3               	clrf	_workTime+1
  1878  044E                     l821:	
  1879                           
  1880                           ;main.c: 651: }
  1881                           ;main.c: 652: curDuty = 76;
  1882  044E  304C               	movlw	76
  1883  044F  00B6               	movwf	_curDuty
  1884                           
  1885                           ;main.c: 653: }
  1886  0450  0008               	return
  1887  0451                     l2846:	
  1888                           
  1889                           ;main.c: 654: else if(showBatTime > 0)
  1890  0451  0843               	movf	_showBatTime,w
  1891  0452  1903               	btfsc	3,2
  1892  0453  2C56               	goto	l2850
  1893                           
  1894                           ;main.c: 655: {
  1895                           ;main.c: 656: showBatTime = 0;
  1896  0454  01C3               	clrf	_showBatTime
  1897                           
  1898                           ;main.c: 657: }
  1899  0455  0008               	return
  1900  0456                     l2850:	
  1901                           
  1902                           ;main.c: 658: else
  1903                           ;main.c: 659: {
  1904                           ;main.c: 660: showBatTime = 200;
  1905  0456  30C8               	movlw	200
  1906  0457  00C3               	movwf	_showBatTime
  1907                           
  1908                           ;main.c: 661: count1s = 0;
  1909  0458  01D3               	clrf	_count1s
  1910  0459  0008               	return
  1911  045A                     l2854:	
  1912                           
  1913                           ;main.c: 664: else if(kclick == 2)
  1914  045A  3002               	movlw	2
  1915  045B  0674               	xorwf	keyCtr@kclick,w
  1916  045C  1D03               	btfss	3,2
  1917  045D  0008               	return
  1918                           
  1919                           ;main.c: 665: {
  1920                           ;main.c: 666: if(workStep > 0)
  1921  045E  087A               	movf	_workStep,w
  1922  045F  1903               	btfsc	3,2
  1923  0460  2C63               	goto	l827
  1924                           
  1925                           ;main.c: 667: {
  1926                           ;main.c: 668: workStep = 0;
  1927  0461  01FA               	clrf	_workStep
  1928                           
  1929                           ;main.c: 669: }
  1930  0462  0008               	return
  1931  0463                     l827:	
  1932  0463  301E               	movlw	30
  1933                           
  1934                           ;main.c: 670: else
  1935                           ;main.c: 671: {
  1936                           ;main.c: 672: workStep = 1;
  1937  0464  01FA               	clrf	_workStep
  1938  0465  0AFA               	incf	_workStep,f
  1939                           
  1940                           ;main.c: 673: startTime = 30;
  1941  0466  00C7               	movwf	_startTime
  1942                           
  1943                           ;main.c: 674: showBatTime = 0;
  1944  0467  01C3               	clrf	_showBatTime
  1945                           
  1946                           ;main.c: 675: overWorkTime = 0;
  1947  0468  01A8               	clrf	_overWorkTime
  1948  0469  01A9               	clrf	_overWorkTime+1
  1949  046A  0008               	return
  1950  046B                     __end_of_keyCtr:	
  1951                           
  1952                           	psect	text11
  1953  0640                     __ptext11:	
  1954 ;; *************** function _pwmInit *****************
  1955 ;; Defined at:
  1956 ;;		line 1069 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0
  1965 ;; Tracked objects:
  1966 ;;		On entry : 100/0
  1967 ;;		On exit  : 100/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1
  1970 ;;      Params:         0       0       0
  1971 ;;      Locals:         0       0       0
  1972 ;;      Temps:          0       0       0
  1973 ;;      Totals:         0       0       0
  1974 ;;Total ram usage:        0 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    2
  1977 ;; This function calls:
  1978 ;;		Nothing
  1979 ;; This function is called by:
  1980 ;;		_keyCtr
  1981 ;;		_ctr7
  1982 ;;		_ctr8
  1983 ;;		_workCtr
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           
  1988                           ;psect for function _pwmInit
  1989  0640                     _pwmInit:	
  1990                           
  1991                           ;main.c: 1071: if(motorPwmFlag > 0)
  1992                           
  1993                           ;incstack = 0
  1994                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  1995  0640  0837               	movf	_motorPwmFlag,w
  1996  0641  1D03               	btfss	3,2
  1997  0642  0008               	return
  1998                           
  1999                           ;main.c: 1073: motorPwmFlag = 1;
  2000  0643  01B7               	clrf	_motorPwmFlag
  2001  0644  0AB7               	incf	_motorPwmFlag,f
  2002                           
  2003                           ;main.c: 1074: PWMCON1 = 0B00000000;
  2004  0645  0196               	clrf	22	;volatile
  2005                           
  2006                           ;main.c: 1075: PWMTH = 0X00;
  2007  0646  0198               	clrf	24	;volatile
  2008                           
  2009                           ;main.c: 1076: PWMTL = 200;
  2010  0647  30C8               	movlw	200
  2011  0648  0097               	movwf	23	;volatile
  2012                           
  2013                           ;main.c: 1079: PWMD23H = 0;
  2014  0649  1683               	bsf	3,5	;RP0=1, select bank1
  2015  064A  019E               	clrf	30	;volatile
  2016                           
  2017                           ;main.c: 1080: PWMD3L = 80;
  2018  064B  3050               	movlw	80
  2019  064C  009C               	movwf	28	;volatile
  2020                           
  2021                           ;main.c: 1081: PWM23DT = 0X00;
  2022  064D  019D               	clrf	29	;volatile
  2023                           
  2024                           ;main.c: 1083: PWMCON0 = 0X48;
  2025  064E  3048               	movlw	72
  2026                           
  2027                           ;main.c: 1084: PWMCON2 =0X00;
  2028  064F  2E3C               	ljmp	PL14	;call to abstracted procedure
  2029  0650                     __end_of_pwmInit:	
  2030                           
  2031                           	psect	text12
  2032  0573                     __ptext12:	
  2033 ;; *************** function _keyRead *****************
  2034 ;; Defined at:
  2035 ;;		line 563 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  keyStatus       1    wreg     unsigned char 
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  keyStatus       1    3[COMMON] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      unsigned char 
  2042 ;; Registers used:
  2043 ;;		wreg, status,2, status,0
  2044 ;; Tracked objects:
  2045 ;;		On entry : 100/0
  2046 ;;		On exit  : 100/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1
  2049 ;;      Params:         0       0       0
  2050 ;;      Locals:         1       0       0
  2051 ;;      Temps:          0       0       0
  2052 ;;      Totals:         1       0       0
  2053 ;;Total ram usage:        1 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    2
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_keyCtr
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           
  2064                           ;psect for function _keyRead
  2065  0573                     _keyRead:	
  2066                           
  2067                           ;incstack = 0
  2068                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  2069                           ;keyRead@keyStatus stored from wreg
  2070  0573  00F3               	movwf	keyRead@keyStatus
  2071                           
  2072                           ;main.c: 565: if(keyStatus)
  2073  0574  0873               	movf	keyRead@keyStatus,w
  2074  0575  3064               	movlw	100
  2075  0576  1903               	btfsc	3,2
  2076  0577  2D85               	goto	L8
  2077                           
  2078                           ;main.c: 566: {
  2079                           ;main.c: 567: keyCount++;
  2080  0578  0ACA               	incf	_keyCount,f
  2081                           
  2082                           ;main.c: 568: if(keyCount >= 100)
  2083  0579  024A               	subwf	_keyCount,w
  2084  057A  1C03               	skipc
  2085  057B  3400               	retlw	0
  2086                           
  2087                           ;main.c: 569: {
  2088                           ;main.c: 570: keyCount = 100;
  2089  057C  3064               	movlw	100
  2090  057D  00CA               	movwf	_keyCount
  2091                           
  2092                           ;main.c: 571: if(!longPressFlag)
  2093  057E  0849               	movf	_longPressFlag,w
  2094  057F  1D03               	btfss	3,2
  2095  0580  3400               	retlw	0
  2096  0581  3002               	movlw	2
  2097                           
  2098                           ;main.c: 572: {
  2099                           ;main.c: 573: longPressFlag = 1;
  2100  0582  01C9               	clrf	_longPressFlag
  2101  0583  0AC9               	incf	_longPressFlag,f
  2102                           
  2103                           ;main.c: 574: return 2;
  2104  0584  0008               	return
  2105  0585                     L8:	
  2106                           ;main.c: 578: else
  2107                           ;main.c: 579: {
  2108                           ;main.c: 580: if(keyCount >= 100)
  2109                           
  2110  0585  024A               	subwf	_keyCount,w
  2111  0586  1C03               	skipc
  2112  0587  2D8B               	goto	l2352
  2113                           
  2114                           ;main.c: 581: {
  2115                           ;main.c: 582: keyCount = 0;
  2116  0588  01CA               	clrf	_keyCount
  2117                           
  2118                           ;main.c: 583: longPressFlag = 0;
  2119  0589  01C9               	clrf	_longPressFlag
  2120                           
  2121                           ;main.c: 584: return 0;
  2122  058A  3400               	retlw	0
  2123  058B                     l2352:	
  2124                           
  2125                           ;main.c: 586: else if(keyCount >= 6)
  2126  058B  3006               	movlw	6
  2127  058C  024A               	subwf	_keyCount,w
  2128                           
  2129                           ;main.c: 587: {
  2130                           ;main.c: 588: keyCount = 0;
  2131  058D  01CA               	clrf	_keyCount
  2132  058E  1803               	btfsc	3,0
  2133                           
  2134                           ;main.c: 589: return 1;
  2135  058F  3401               	retlw	1
  2136  0590  3400               	retlw	0
  2137  0591                     __end_of_keyRead:	
  2138                           ;main.c: 590: }
  2139                           ;main.c: 591: keyCount = 0;
  2140                           
  2141                           
  2142                           	psect	text13
  2143  0018                     __ptext13:	
  2144 ;; *************** function _chrgCtr *****************
  2145 ;; Defined at:
  2146 ;;		line 416 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2147 ;; Parameters:    Size  Location     Type
  2148 ;;		None
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;		None
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  1    wreg      void 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0, pclath, cstack
  2155 ;; Tracked objects:
  2156 ;;		On entry : 100/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMMON   BANK0   BANK1
  2160 ;;      Params:         0       0       0
  2161 ;;      Locals:         0       0       0
  2162 ;;      Temps:          2       0       0
  2163 ;;      Totals:         2       0       0
  2164 ;;Total ram usage:        2 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    3
  2167 ;; This function calls:
  2168 ;;		_chrgPwmInit
  2169 ;;		_chrgPwmStop
  2170 ;;		_pwmStop
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _chrgCtr
  2178  0018                     _chrgCtr:	
  2179                           
  2180                           ;main.c: 418: if(PORTA & 0x20)
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  2184  0018  1683               	bsf	3,5	;RP0=1, select bank1
  2185  0019  1E86               	btfss	6,5	;volatile
  2186  001A  28DE               	goto	l2746
  2187                           
  2188                           ;main.c: 419: {
  2189                           ;main.c: 420: if(chrgFlag == 0)
  2190  001B  1283               	bcf	3,5	;RP0=0, select bank0
  2191  001C  0851               	movf	_chrgFlag,w
  2192  001D  1D03               	btfss	3,2
  2193  001E  2823               	goto	l2638
  2194                           
  2195                           ;main.c: 421: {
  2196                           ;main.c: 422: chrgFlag = 1;
  2197  001F  01D1               	clrf	_chrgFlag
  2198  0020  0AD1               	incf	_chrgFlag,f
  2199                           
  2200                           ;main.c: 423: chrgMaxDuty = 0;
  2201  0021  01BC               	clrf	_chrgMaxDuty
  2202                           
  2203                           ;main.c: 424: chrgPwmStop();
  2204  0022  2676               	fcall	_chrgPwmStop
  2205  0023                     l2638:	
  2206                           
  2207                           ;main.c: 425: }
  2208                           ;main.c: 426: workStep = 0;
  2209  0023  01FA               	clrf	_workStep
  2210                           
  2211                           ;main.c: 427: pwmStop();
  2212  0024  266F               	fcall	_pwmStop
  2213                           
  2214                           ;main.c: 428: lowBatFlag = 0;
  2215  0025  01BA               	clrf	_lowBatFlag
  2216                           
  2217                           ;main.c: 429: if(prePwStep < pwStep)
  2218  0026  0845               	movf	_pwStep,w
  2219  0027  0279               	subwf	_prePwStep,w
  2220  0028  1803               	skipnc
  2221  0029  2833               	goto	l2650
  2222                           
  2223                           ;main.c: 430: {
  2224                           ;main.c: 431: if(++count50s > 3000)
  2225  002A  20FC               	fcall	PL10	;call to abstracted procedure
  2226  002B  1903               	skipnz
  2227  002C  022C               	subwf	_count50s,w
  2228  002D  1C03               	skipc
  2229  002E  2835               	goto	l2652
  2230                           
  2231                           ;main.c: 432: {
  2232                           ;main.c: 433: count50s = 0;
  2233  002F  01AC               	clrf	_count50s
  2234  0030  01AD               	clrf	_count50s+1
  2235                           
  2236                           ;main.c: 434: prePwStep++;
  2237  0031  0AF9               	incf	_prePwStep,f
  2238  0032  2835               	goto	l2652
  2239  0033                     l2650:	
  2240                           
  2241                           ;main.c: 437: else
  2242                           ;main.c: 438: {
  2243                           ;main.c: 439: count50s = 0;
  2244  0033  01AC               	clrf	_count50s
  2245  0034  01AD               	clrf	_count50s+1
  2246  0035                     l2652:	
  2247                           
  2248                           ;main.c: 440: }
  2249                           ;main.c: 441: if(protectFlag)
  2250  0035  084D               	movf	_protectFlag,w
  2251  0036  1903               	btfsc	3,2
  2252  0037  284A               	goto	l2668
  2253                           
  2254                           ;main.c: 442: {
  2255                           ;main.c: 443: chrgPwmStop();
  2256  0038  2676               	fcall	_chrgPwmStop
  2257                           
  2258                           ;main.c: 444: if(prePwStep < 99 && protectFlag == 1)
  2259  0039  3063               	movlw	99
  2260  003A  0279               	subwf	_prePwStep,w
  2261  003B  1803               	skipnc
  2262  003C  2848               	goto	l2664
  2263  003D  0B4D               	decfsz	_protectFlag,w
  2264  003E  2848               	goto	l2664
  2265                           
  2266                           ;main.c: 445: {
  2267                           ;main.c: 446: if(++reChrgCount > 250)
  2268  003F  30FB               	movlw	251
  2269  0040  0AC4               	incf	_reChrgCount,f
  2270  0041  0244               	subwf	_reChrgCount,w
  2271  0042  1C03               	skipc
  2272  0043  0008               	return
  2273                           
  2274                           ;main.c: 447: {
  2275                           ;main.c: 448: reChrgCount = 0;
  2276  0044  01C4               	clrf	_reChrgCount
  2277                           
  2278                           ;main.c: 449: chrgFullFlag = 0;
  2279  0045  01D0               	clrf	_chrgFullFlag
  2280                           
  2281                           ;main.c: 450: protectFlag = 0;
  2282  0046  01CD               	clrf	_protectFlag
  2283  0047  0008               	return
  2284  0048                     l2664:	
  2285                           
  2286                           ;main.c: 453: else
  2287                           ;main.c: 454: {
  2288                           ;main.c: 455: reChrgCount = 0;
  2289  0048  01C4               	clrf	_reChrgCount
  2290  0049  0008               	return
  2291  004A                     l2668:	
  2292                           
  2293                           ;main.c: 458: }
  2294                           ;main.c: 459: if(batADValue < 1118)
  2295  004A  3004               	movlw	4
  2296  004B  022F               	subwf	_batADValue+1,w
  2297  004C  305E               	movlw	94
  2298  004D  1903               	skipnz
  2299  004E  022E               	subwf	_batADValue,w
  2300  004F  1803               	skipnc
  2301  0050  2854               	goto	l2674
  2302  0051  300F               	movlw	15
  2303                           
  2304                           ;main.c: 460: {
  2305                           ;main.c: 461: chrgMode = 0;
  2306  0052  01C2               	clrf	_chrgMode
  2307                           
  2308                           ;main.c: 462: chrgMaxAD = 15;
  2309  0053  286D               	goto	L9
  2310  0054                     l2674:	
  2311                           ;main.c: 463: }
  2312                           
  2313                           
  2314                           ;main.c: 464: else if(batADValue < 1530)
  2315  0054  3005               	movlw	5
  2316  0055  022F               	subwf	_batADValue+1,w
  2317  0056  30FA               	movlw	250
  2318  0057  1903               	skipnz
  2319  0058  022E               	subwf	_batADValue,w
  2320  0059  1803               	skipnc
  2321  005A  2861               	goto	l2682
  2322  005B  304D               	movlw	77
  2323                           
  2324                           ;main.c: 465: {
  2325                           ;main.c: 466: chrgMode = 1;
  2326  005C  01C2               	clrf	_chrgMode
  2327  005D  0AC2               	incf	_chrgMode,f
  2328                           
  2329                           ;main.c: 467: chrgMaxAD = 77;
  2330  005E  00C1               	movwf	_chrgMaxAD
  2331                           
  2332                           ;main.c: 468: lockCount = 0;
  2333  005F  01C0               	clrf	_lockCount
  2334                           
  2335                           ;main.c: 469: }
  2336  0060  286E               	goto	l2692
  2337  0061                     l2682:	
  2338                           
  2339                           ;main.c: 470: else if(count1s == 0)
  2340  0061  0853               	movf	_count1s,w
  2341  0062  1D03               	btfss	3,2
  2342  0063  286E               	goto	l2692
  2343                           
  2344                           ;main.c: 471: {
  2345                           ;main.c: 472: if(++lockCount > 200)
  2346  0064  30C9               	movlw	201
  2347  0065  0AC0               	incf	_lockCount,f
  2348  0066  0240               	subwf	_lockCount,w
  2349  0067  1C03               	skipc
  2350  0068  286C               	goto	l2690
  2351  0069  3002               	movlw	2
  2352                           
  2353                           ;main.c: 473: {
  2354                           ;main.c: 474: lockCount = 0;
  2355  006A  01C0               	clrf	_lockCount
  2356                           
  2357                           ;main.c: 475: chrgMode = 2;
  2358  006B  00C2               	movwf	_chrgMode
  2359  006C                     l2690:	
  2360                           
  2361                           ;main.c: 476: }
  2362                           ;main.c: 478: chrgMaxAD = 77;
  2363  006C  304D               	movlw	77
  2364  006D                     L9:	
  2365  006D  00C1               	movwf	_chrgMaxAD
  2366  006E                     l2692:	
  2367                           
  2368                           ;main.c: 479: }
  2369                           ;main.c: 480: if(chrgMode == 2 && outADValue < 8)
  2370  006E  3002               	movlw	2
  2371  006F  0642               	xorwf	_chrgMode,w
  2372  0070  1D03               	btfss	3,2
  2373  0071  2888               	goto	l2702
  2374  0072  3000               	movlw	0
  2375  0073  0231               	subwf	_outADValue+1,w
  2376  0074  3008               	movlw	8
  2377  0075  1903               	skipnz
  2378  0076  0230               	subwf	_outADValue,w
  2379  0077  1803               	skipnc
  2380  0078  2888               	goto	l2702
  2381                           
  2382                           ;main.c: 481: {
  2383                           ;main.c: 482: if(++fullCount >= 200)
  2384  0079  0AAA               	incf	_fullCount,f
  2385  007A  1903               	skipnz
  2386  007B  0AAB               	incf	_fullCount+1,f
  2387  007C  3000               	movlw	0
  2388  007D  022B               	subwf	_fullCount+1,w
  2389  007E  30C8               	movlw	200
  2390  007F  1903               	skipnz
  2391  0080  022A               	subwf	_fullCount,w
  2392  0081  1C03               	skipc
  2393  0082  288A               	goto	l2704
  2394                           
  2395                           ;main.c: 483: {
  2396                           ;main.c: 484: fullCount = 0;
  2397  0083  01AA               	clrf	_fullCount
  2398  0084  01AB               	clrf	_fullCount+1
  2399                           
  2400                           ;main.c: 485: chrgFullFlag = 1;
  2401  0085  01D0               	clrf	_chrgFullFlag
  2402  0086  0AD0               	incf	_chrgFullFlag,f
  2403  0087  288A               	goto	l2704
  2404  0088                     l2702:	
  2405                           
  2406                           ;main.c: 488: else
  2407                           ;main.c: 489: {
  2408                           ;main.c: 490: fullCount = 0;
  2409  0088  01AA               	clrf	_fullCount
  2410  0089  01AB               	clrf	_fullCount+1
  2411  008A                     l2704:	
  2412                           
  2413                           ;main.c: 491: }
  2414                           ;main.c: 492: if(chrgFullFlag)
  2415  008A  0850               	movf	_chrgFullFlag,w
  2416  008B  1903               	btfsc	3,2
  2417  008C  288E               	goto	l2708
  2418                           
  2419                           ;main.c: 493: {
  2420                           ;main.c: 494: chrgPwmStop();
  2421  008D  2E76               	ljmp	l2306
  2422  008E                     l2708:	
  2423                           ;main.c: 495: }
  2424                           
  2425                           
  2426                           ;main.c: 496: else
  2427                           ;main.c: 497: {
  2428                           ;main.c: 498: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  2429  008E  3006               	movlw	6
  2430  008F  022F               	subwf	_batADValue+1,w
  2431  0090  300F               	movlw	15
  2432  0091  1903               	skipnz
  2433  0092  022E               	subwf	_batADValue,w
  2434  0093  1803               	skipnc
  2435  0094  28A4               	goto	l2712
  2436  0095  0841               	movf	_chrgMaxAD,w
  2437  0096  3E02               	addlw	2
  2438  0097  00F3               	movwf	??_chrgCtr
  2439  0098  3000               	movlw	0
  2440  0099  1803               	skipnc
  2441  009A  3001               	movlw	1
  2442  009B  00F4               	movwf	??_chrgCtr+1
  2443  009C  0831               	movf	_outADValue+1,w
  2444  009D  0274               	subwf	??_chrgCtr+1,w
  2445  009E  1D03               	skipz
  2446  009F  28A2               	goto	u2485
  2447  00A0  0830               	movf	_outADValue,w
  2448  00A1  0273               	subwf	??_chrgCtr,w
  2449  00A2                     u2485:	
  2450  00A2  1803               	skipnc
  2451  00A3  28B3               	goto	l2724
  2452  00A4                     l2712:	
  2453                           
  2454                           ;main.c: 499: {
  2455                           ;main.c: 500: if(++subTime > chrgWaitTime)
  2456  00A4  0ABE               	incf	_subTime,f
  2457  00A5  083E               	movf	_subTime,w
  2458  00A6  023D               	subwf	_chrgWaitTime,w
  2459  00A7  1803               	skipnc
  2460  00A8  28B1               	goto	l2722
  2461                           
  2462                           ;main.c: 501: {
  2463                           ;main.c: 502: if(chrgMaxDuty > 1)
  2464  00A9  3002               	movlw	2
  2465  00AA  023C               	subwf	_chrgMaxDuty,w
  2466  00AB  1C03               	skipc
  2467  00AC  28AE               	goto	l2718
  2468                           
  2469                           ;main.c: 503: {
  2470                           ;main.c: 504: chrgMaxDuty--;
  2471  00AD  03BC               	decf	_chrgMaxDuty,f
  2472  00AE                     l2718:	
  2473  00AE  30FA               	movlw	250
  2474                           
  2475                           ;main.c: 505: }
  2476                           ;main.c: 506: subTime = 0;
  2477  00AF  01BE               	clrf	_subTime
  2478                           
  2479                           ;main.c: 507: chrgWaitTime = 250;
  2480  00B0  00BD               	movwf	_chrgWaitTime
  2481  00B1                     l2722:	
  2482                           
  2483                           ;main.c: 508: }
  2484                           ;main.c: 509: addTime = 0;
  2485  00B1  01BF               	clrf	_addTime
  2486                           
  2487                           ;main.c: 510: }
  2488  00B2  28D3               	goto	l2738
  2489  00B3                     l2724:	
  2490                           
  2491                           ;main.c: 511: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  2492  00B3  3006               	movlw	6
  2493  00B4  022F               	subwf	_batADValue+1,w
  2494  00B5  300E               	movlw	14
  2495  00B6  1903               	skipnz
  2496  00B7  022E               	subwf	_batADValue,w
  2497  00B8  1803               	skipnc
  2498  00B9  28D3               	goto	l2738
  2499  00BA  0841               	movf	_chrgMaxAD,w
  2500  00BB  3EFC               	addlw	252
  2501  00BC  00F3               	movwf	??_chrgCtr
  2502  00BD  30FF               	movlw	255
  2503  00BE  1803               	skipnc
  2504  00BF  3000               	movlw	0
  2505  00C0  00F4               	movwf	??_chrgCtr+1
  2506  00C1  0231               	subwf	_outADValue+1,w
  2507  00C2  1D03               	skipz
  2508  00C3  28C6               	goto	u2525
  2509  00C4  0873               	movf	??_chrgCtr,w
  2510  00C5  0230               	subwf	_outADValue,w
  2511  00C6                     u2525:	
  2512  00C6  1803               	skipnc
  2513  00C7  28D3               	goto	l2738
  2514                           
  2515                           ;main.c: 512: {
  2516                           ;main.c: 513: if(++addTime > chrgWaitTime)
  2517  00C8  0ABF               	incf	_addTime,f
  2518  00C9  083F               	movf	_addTime,w
  2519  00CA  023D               	subwf	_chrgWaitTime,w
  2520  00CB  1803               	skipnc
  2521  00CC  28D2               	goto	l2736
  2522  00CD  304B               	movlw	75
  2523                           
  2524                           ;main.c: 514: {
  2525                           ;main.c: 515: addTime = 0;
  2526  00CE  01BF               	clrf	_addTime
  2527                           
  2528                           ;main.c: 516: if(chrgMaxDuty < 75)
  2529  00CF  023C               	subwf	_chrgMaxDuty,w
  2530  00D0  1C03               	btfss	3,0
  2531                           
  2532                           ;main.c: 517: {
  2533                           ;main.c: 518: chrgMaxDuty++;
  2534  00D1  0ABC               	incf	_chrgMaxDuty,f
  2535  00D2                     l2736:	
  2536                           
  2537                           ;main.c: 519: }
  2538                           ;main.c: 520: }
  2539                           ;main.c: 521: subTime = 0;
  2540  00D2  01BE               	clrf	_subTime
  2541  00D3                     l2738:	
  2542                           
  2543                           ;main.c: 522: }
  2544                           ;main.c: 525: if(chrgPwmFlag == 0)
  2545  00D3  0838               	movf	_chrgPwmFlag,w
  2546  00D4  1D03               	btfss	3,2
  2547  00D5  28D7               	goto	l2742
  2548                           
  2549                           ;main.c: 526: {
  2550                           ;main.c: 527: chrgPwmInit();
  2551  00D6  262F               	fcall	_chrgPwmInit
  2552  00D7                     l2742:	
  2553                           
  2554                           ;main.c: 528: }
  2555                           ;main.c: 529: PWMD23H = 0X00;
  2556  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2557  00D8  019E               	clrf	30	;volatile
  2558                           
  2559                           ;main.c: 530: PWMD2L = chrgMaxDuty;
  2560  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2561  00DA  083C               	movf	_chrgMaxDuty,w
  2562  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  2563  00DC  009B               	movwf	27	;volatile
  2564  00DD  0008               	return
  2565  00DE                     l2746:	
  2566  00DE  3014               	movlw	20
  2567                           
  2568                           ;main.c: 536: chrgFlag = 0;
  2569  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2570  00E0  01D1               	clrf	_chrgFlag
  2571                           
  2572                           ;main.c: 537: chrgFullFlag = 0;
  2573  00E1  01D0               	clrf	_chrgFullFlag
  2574                           
  2575                           ;main.c: 538: protectFlag = 0;
  2576  00E2  01CD               	clrf	_protectFlag
  2577                           
  2578                           ;main.c: 539: chrgMode = 0;
  2579  00E3  01C2               	clrf	_chrgMode
  2580                           
  2581                           ;main.c: 540: chrgMaxAD = 0;
  2582  00E4  01C1               	clrf	_chrgMaxAD
  2583                           
  2584                           ;main.c: 541: chrgMaxDuty = 0;
  2585  00E5  01BC               	clrf	_chrgMaxDuty
  2586                           
  2587                           ;main.c: 543: lockLedStep = 0;
  2588  00E6  01C0               	clrf	_lockCount
  2589                           
  2590                           ;main.c: 544: chrgWaitTime = 20;
  2591  00E7  00BD               	movwf	_chrgWaitTime
  2592                           
  2593                           ;main.c: 545: chrgPwmStop();
  2594  00E8  2676               	fcall	_chrgPwmStop
  2595                           
  2596                           ;main.c: 546: if(prePwStep > 0 && prePwStep > pwStep)
  2597  00E9  0879               	movf	_prePwStep,w
  2598  00EA  1903               	btfsc	3,2
  2599  00EB  28F9               	goto	l2762
  2600  00EC  0879               	movf	_prePwStep,w
  2601  00ED  0245               	subwf	_pwStep,w
  2602  00EE  1803               	skipnc
  2603  00EF  28F9               	goto	l2762
  2604                           
  2605                           ;main.c: 547: {
  2606                           ;main.c: 548: if(++count50s > 3000)
  2607  00F0  20FC               	fcall	PL10	;call to abstracted procedure
  2608  00F1  1903               	skipnz
  2609  00F2  022C               	subwf	_count50s,w
  2610  00F3  1C03               	skipc
  2611  00F4  0008               	return
  2612                           
  2613                           ;main.c: 549: {
  2614                           ;main.c: 550: count50s = 0;
  2615  00F5  01AC               	clrf	_count50s
  2616  00F6  01AD               	clrf	_count50s+1
  2617                           
  2618                           ;main.c: 551: prePwStep--;
  2619  00F7  03F9               	decf	_prePwStep,f
  2620  00F8  0008               	return
  2621  00F9                     l2762:	
  2622                           
  2623                           ;main.c: 554: else
  2624                           ;main.c: 555: {
  2625                           ;main.c: 556: count50s = 0;
  2626  00F9  01AC               	clrf	_count50s
  2627  00FA  01AD               	clrf	_count50s+1
  2628  00FB  0008               	return
  2629  00FC                     __end_of_chrgCtr:	
  2630  00FC                     PL10:	
  2631  00FC  0AAC               	incf	_count50s,f
  2632  00FD  1903               	skipnz
  2633  00FE  0AAD               	incf	_count50s+1,f
  2634  00FF  300B               	movlw	11
  2635  0100  022D               	subwf	_count50s+1,w
  2636  0101  34B9               	retlw	185
  2637  0102                     __end_ofPL10:	
  2638                           
  2639                           	psect	text14
  2640  066F                     __ptext14:	
  2641 ;; *************** function _pwmStop *****************
  2642 ;; Defined at:
  2643 ;;		line 1087 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 100/0
  2654 ;;		On exit  : 100/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1
  2657 ;;      Params:         0       0       0
  2658 ;;      Locals:         0       0       0
  2659 ;;      Temps:          0       0       0
  2660 ;;      Totals:         0       0       0
  2661 ;;Total ram usage:        0 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    2
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_chrgCtr
  2668 ;;		_ctr7
  2669 ;;		_ctr8
  2670 ;;		_workCtr
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function _pwmStop
  2676  066F                     _pwmStop:	
  2677  066F                     l2232:	
  2678                           ;incstack = 0
  2679                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2680                           
  2681                           
  2682                           ;main.c: 1089: if(motorPwmFlag)
  2683  066F  0837               	movf	_motorPwmFlag,w
  2684  0670  1903               	btfsc	3,2
  2685  0671  0008               	return
  2686                           
  2687                           ;main.c: 1090: {
  2688                           ;main.c: 1091: motorPwmFlag = 0;
  2689  0672  01B7               	clrf	_motorPwmFlag
  2690                           
  2691                           ;main.c: 1092: PWMCON0 &= 0XF7;
  2692  0673  1195               	bcf	21,3	;volatile
  2693                           
  2694                           ;main.c: 1093: RB4 = 0;
  2695  0674  1206               	bcf	6,4	;volatile
  2696  0675  0008               	return
  2697  0676                     __end_of_pwmStop:	
  2698                           
  2699                           	psect	text15
  2700  0676                     __ptext15:	
  2701 ;; *************** function _chrgPwmStop *****************
  2702 ;; Defined at:
  2703 ;;		line 1059 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0
  2712 ;; Tracked objects:
  2713 ;;		On entry : 100/0
  2714 ;;		On exit  : 100/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1
  2717 ;;      Params:         0       0       0
  2718 ;;      Locals:         0       0       0
  2719 ;;      Temps:          0       0       0
  2720 ;;      Totals:         0       0       0
  2721 ;;Total ram usage:        0 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    2
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_chrgCtr
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function _chrgPwmStop
  2733  0676                     _chrgPwmStop:	
  2734  0676                     l2306:	
  2735                           ;incstack = 0
  2736                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2737                           
  2738                           
  2739                           ;main.c: 1061: if(chrgPwmFlag)
  2740  0676  0838               	movf	_chrgPwmFlag,w
  2741  0677  1903               	btfsc	3,2
  2742  0678  0008               	return
  2743                           
  2744                           ;main.c: 1062: {
  2745                           ;main.c: 1063: chrgPwmFlag = 0;
  2746  0679  01B8               	clrf	_chrgPwmFlag
  2747                           
  2748                           ;main.c: 1064: PWMCON0 &= 0xFB;
  2749  067A  1115               	bcf	21,2	;volatile
  2750                           
  2751                           ;main.c: 1065: RB3 = 0;
  2752  067B  1186               	bcf	6,3	;volatile
  2753  067C  0008               	return
  2754  067D                     __end_of_chrgPwmStop:	
  2755                           
  2756                           	psect	text16
  2757  062F                     __ptext16:	
  2758 ;; *************** function _chrgPwmInit *****************
  2759 ;; Defined at:
  2760 ;;		line 1040 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2
  2769 ;; Tracked objects:
  2770 ;;		On entry : 100/0
  2771 ;;		On exit  : 100/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMMON   BANK0   BANK1
  2774 ;;      Params:         0       0       0
  2775 ;;      Locals:         0       0       0
  2776 ;;      Temps:          0       0       0
  2777 ;;      Totals:         0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    2
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_chrgCtr
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           
  2789                           ;psect for function _chrgPwmInit
  2790  062F                     _chrgPwmInit:	
  2791                           
  2792                           ;main.c: 1042: chrgPwmFlag = 1;
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2796  062F  01B8               	clrf	_chrgPwmFlag
  2797  0630  0AB8               	incf	_chrgPwmFlag,f
  2798                           
  2799                           ;main.c: 1043: PWMCON1 = 0B00000000;
  2800  0631  0196               	clrf	22	;volatile
  2801                           
  2802                           ;main.c: 1045: PWMTH = 0X00;
  2803  0632  0198               	clrf	24	;volatile
  2804                           
  2805                           ;main.c: 1046: PWMTL = 100;
  2806  0633  3064               	movlw	100
  2807  0634  0097               	movwf	23	;volatile
  2808                           
  2809                           ;main.c: 1050: PWMD23H = 0;
  2810  0635  1683               	bsf	3,5	;RP0=1, select bank1
  2811  0636  019E               	clrf	30	;volatile
  2812                           
  2813                           ;main.c: 1051: PWMD2L = 10;
  2814  0637  300A               	movlw	10
  2815  0638  009B               	movwf	27	;volatile
  2816                           
  2817                           ;main.c: 1052: PWM23DT = 0X00;
  2818  0639  019D               	clrf	29	;volatile
  2819                           
  2820                           ;main.c: 1054: PWMCON0 = 0X04;
  2821  063A  3004               	movlw	4
  2822                           
  2823                           ;main.c: 1055: PWMCON2 =0X00;
  2824  063B  2E3C               	ljmp	PL14	;call to abstracted procedure
  2825  063C                     __end_of_chrgPwmInit:	
  2826  063C                     PL14:	
  2827  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2828  063D  0095               	movwf	21	;volatile
  2829  063E  019D               	clrf	29	;volatile
  2830  063F  0008               	return
  2831  0640                     __end_ofPL14:	
  2832                           
  2833                           	psect	text17
  2834  046B                     __ptext17:	
  2835 ;; *************** function _checkOutA *****************
  2836 ;; Defined at:
  2837 ;;		line 820 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, pclath, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 100/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1
  2851 ;;      Params:         0       0       0
  2852 ;;      Locals:         0       0       0
  2853 ;;      Temps:          1       0       0
  2854 ;;      Totals:         1       0       0
  2855 ;;Total ram usage:        1 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    3
  2858 ;; This function calls:
  2859 ;;		_ADC_Sample
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _checkOutA
  2867  046B                     _checkOutA:	
  2868                           
  2869                           ;main.c: 822: test_adc = ADC_Sample(0, 5);
  2870                           
  2871                           ;incstack = 0
  2872                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2873  046B  3005               	movlw	5
  2874  046C  00F3               	movwf	ADC_Sample@adldo
  2875  046D  3000               	movlw	0
  2876  046E  2102               	fcall	_ADC_Sample
  2877  046F  00D5               	movwf	_test_adc	;volatile
  2878                           
  2879                           ;main.c: 823: if (0xA5 == test_adc)
  2880  0470  30A5               	movlw	165
  2881  0471  0655               	xorwf	_test_adc,w	;volatile
  2882  0472  1D03               	btfss	3,2
  2883  0473  2CA0               	goto	l3296
  2884                           
  2885                           ;main.c: 824: {
  2886                           ;main.c: 825: if(chrgFlag && adresult > 210)
  2887  0474  0851               	movf	_chrgFlag,w
  2888  0475  1903               	btfsc	3,2
  2889  0476  2C87               	goto	l3282
  2890  0477  3000               	movlw	0
  2891  0478  0278               	subwf	_adresult+1,w	;volatile
  2892  0479  30D3               	movlw	211
  2893  047A  1903               	skipnz
  2894  047B  0277               	subwf	_adresult,w	;volatile
  2895  047C  1C03               	skipc
  2896  047D  2C87               	goto	l3282
  2897                           
  2898                           ;main.c: 826: {
  2899                           ;main.c: 827: if(++overChrgTime > 10)
  2900  047E  300B               	movlw	11
  2901  047F  0AC6               	incf	_overChrgTime,f
  2902  0480  0246               	subwf	_overChrgTime,w
  2903  0481  1C03               	skipc
  2904  0482  2C88               	goto	l3284
  2905  0483  3002               	movlw	2
  2906                           
  2907                           ;main.c: 828: {
  2908                           ;main.c: 829: overChrgTime = 0;
  2909  0484  01C6               	clrf	_overChrgTime
  2910                           
  2911                           ;main.c: 830: protectFlag = 2;
  2912  0485  00CD               	movwf	_protectFlag
  2913  0486  2C88               	goto	l3284
  2914  0487                     l3282:	
  2915                           
  2916                           ;main.c: 834: else
  2917                           ;main.c: 835: {
  2918                           ;main.c: 836: overChrgTime = 0;
  2919  0487  01C6               	clrf	_overChrgTime
  2920  0488                     l3284:	
  2921                           
  2922                           ;main.c: 837: }
  2923                           ;main.c: 838: outADValue = adresult;
  2924  0488  0878               	movf	_adresult+1,w	;volatile
  2925  0489  00B1               	movwf	_outADValue+1
  2926  048A  0877               	movf	_adresult,w	;volatile
  2927  048B  00B0               	movwf	_outADValue
  2928                           
  2929                           ;main.c: 840: if(workStep && (outADValue > 600))
  2930  048C  087A               	movf	_workStep,w
  2931  048D  1903               	btfsc	3,2
  2932  048E  2C9E               	goto	l3294
  2933  048F  3002               	movlw	2
  2934  0490  0231               	subwf	_outADValue+1,w
  2935  0491  3059               	movlw	89
  2936  0492  1903               	skipnz
  2937  0493  0230               	subwf	_outADValue,w
  2938  0494  1C03               	skipc
  2939  0495  2C9E               	goto	l3294
  2940                           
  2941                           ;main.c: 841: {
  2942                           ;main.c: 842: if(++workOverOutTime > 50)
  2943  0496  3033               	movlw	51
  2944  0497  0ACC               	incf	_workOverOutTime,f
  2945  0498  024C               	subwf	_workOverOutTime,w
  2946  0499  1C03               	skipc
  2947  049A  0008               	return
  2948                           
  2949                           ;main.c: 843: {
  2950                           ;main.c: 844: workOverOutTime = 0;
  2951  049B  01CC               	clrf	_workOverOutTime
  2952                           
  2953                           ;main.c: 845: workStep = 0;
  2954  049C  01FA               	clrf	_workStep
  2955  049D  0008               	return
  2956  049E                     l3294:	
  2957                           
  2958                           ;main.c: 848: else
  2959                           ;main.c: 849: {
  2960                           ;main.c: 850: workOverOutTime = 0;
  2961  049E  01CC               	clrf	_workOverOutTime
  2962  049F  0008               	return
  2963  04A0                     l3296:	
  2964                           
  2965                           ;main.c: 855: else
  2966                           ;main.c: 856: {
  2967                           ;main.c: 857: ADCON0 = 0;
  2968  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2969  04A1  0195               	clrf	21	;volatile
  2970                           
  2971                           ;main.c: 858: ADCON1 = 0;
  2972  04A2  0196               	clrf	22	;volatile
  2973                           
  2974                           ;main.c: 859: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2975  04A3  3085               	movlw	133
  2976  04A4  00F4               	movwf	??_checkOutA
  2977  04A5                     u3967:	
  2978  04A5  0BF4               	decfsz	??_checkOutA,f
  2979  04A6  2CA5               	goto	u3967
  2980  04A7  0008               	return
  2981  04A8                     __end_of_checkOutA:	
  2982                           
  2983                           	psect	text18
  2984  0290                     __ptext18:	
  2985 ;; *************** function _checkBatAD *****************
  2986 ;; Defined at:
  2987 ;;		line 863 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0, pclath, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1
  3001 ;;      Params:         0       0       0
  3002 ;;      Locals:         0       0       0
  3003 ;;      Temps:          2       0       0
  3004 ;;      Totals:         2       0       0
  3005 ;;Total ram usage:        2 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    3
  3008 ;; This function calls:
  3009 ;;		_ADC_Sample
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _checkBatAD
  3017  0290                     _checkBatAD:	
  3018                           
  3019                           ;main.c: 865: test_adc = ADC_Sample(2, 5);
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  3023  0290  3005               	movlw	5
  3024  0291  00F3               	movwf	ADC_Sample@adldo
  3025  0292  3002               	movlw	2
  3026  0293  2102               	fcall	_ADC_Sample
  3027  0294  00D5               	movwf	_test_adc	;volatile
  3028                           
  3029                           ;main.c: 866: if (0xA5 == test_adc)
  3030  0295  30A5               	movlw	165
  3031  0296  0655               	xorwf	_test_adc,w	;volatile
  3032  0297  1D03               	btfss	3,2
  3033  0298  2AF0               	goto	l3332
  3034                           
  3035                           ;main.c: 867: {
  3036                           ;main.c: 868: batADValue = adresult;
  3037  0299  0878               	movf	_adresult+1,w	;volatile
  3038  029A  00AF               	movwf	_batADValue+1
  3039  029B  0877               	movf	_adresult,w	;volatile
  3040  029C  00AE               	movwf	_batADValue
  3041                           
  3042                           ;main.c: 869: if(batADValue < 1117)
  3043  029D  3004               	movlw	4
  3044  029E  022F               	subwf	_batADValue+1,w
  3045  029F  305D               	movlw	93
  3046  02A0  1903               	skipnz
  3047  02A1  022E               	subwf	_batADValue,w
  3048  02A2  1803               	skipnc
  3049  02A3  2AB6               	goto	l3314
  3050                           
  3051                           ;main.c: 870: {
  3052                           ;main.c: 871: pwStep = 0;
  3053  02A4  01C5               	clrf	_pwStep
  3054                           
  3055                           ;main.c: 872: if(++count8s > 800)
  3056  02A5  0AA6               	incf	_count8s,f
  3057  02A6  1903               	skipnz
  3058  02A7  0AA7               	incf	_count8s+1,f
  3059  02A8  3003               	movlw	3
  3060  02A9  0227               	subwf	_count8s+1,w
  3061  02AA  3021               	movlw	33
  3062  02AB  1903               	skipnz
  3063  02AC  0226               	subwf	_count8s,w
  3064  02AD  1C03               	skipc
  3065  02AE  2AE3               	goto	l3326
  3066                           
  3067                           ;main.c: 873: {
  3068                           ;main.c: 874: count8s = 0;
  3069  02AF  01A6               	clrf	_count8s
  3070  02B0  01A7               	clrf	_count8s+1
  3071                           
  3072                           ;main.c: 875: lowBatFlag = 1;
  3073  02B1  01BA               	clrf	_lowBatFlag
  3074  02B2  0ABA               	incf	_lowBatFlag,f
  3075                           
  3076                           ;main.c: 876: prePwStep = 0;
  3077  02B3  01F9               	clrf	_prePwStep
  3078                           
  3079                           ;main.c: 877: workStep = 0;
  3080  02B4  01FA               	clrf	_workStep
  3081  02B5  2AE3               	goto	l3326
  3082  02B6                     l3314:	
  3083  02B6  3005               	movlw	5
  3084                           
  3085                           ;main.c: 880: else
  3086                           ;main.c: 881: {
  3087                           ;main.c: 882: count8s = 0;
  3088  02B7  01A6               	clrf	_count8s
  3089  02B8  01A7               	clrf	_count8s+1
  3090                           
  3091                           ;main.c: 883: if(batADValue >= 1340)
  3092  02B9  022F               	subwf	_batADValue+1,w
  3093  02BA  303C               	movlw	60
  3094  02BB  1903               	skipnz
  3095  02BC  022E               	subwf	_batADValue,w
  3096                           
  3097                           ;main.c: 884: {
  3098                           ;main.c: 885: pwStep = ((batADValue - 1340) /2) + 13;
  3099  02BD  082E               	movf	_batADValue,w
  3100  02BE  1C03               	skipc
  3101  02BF  2ACD               	goto	L11
  3102  02C0  3EC4               	addlw	196
  3103  02C1  00F4               	movwf	??_checkBatAD
  3104  02C2  082F               	movf	_batADValue+1,w
  3105  02C3  1803               	skipnc
  3106  02C4  3E01               	addlw	1
  3107  02C5  3EFA               	addlw	250
  3108  02C6  00F5               	movwf	??_checkBatAD+1
  3109  02C7  1003               	clrc
  3110  02C8  0CF5               	rrf	??_checkBatAD+1,f
  3111  02C9  0CF4               	rrf	??_checkBatAD,f
  3112  02CA  0874               	movf	??_checkBatAD,w
  3113  02CB  3E0D               	addlw	13
  3114  02CC  2ADC               	goto	L10
  3115  02CD                     L11:	
  3116                           ;main.c: 887: else
  3117                           ;main.c: 888: {
  3118                           ;main.c: 889: pwStep = (batADValue - 1117) / 16;
  3119                           
  3120                           ;main.c: 886: }
  3121                           
  3122  02CD  3EA3               	addlw	163
  3123  02CE  00F4               	movwf	??_checkBatAD
  3124  02CF  082F               	movf	_batADValue+1,w
  3125  02D0  1803               	skipnc
  3126  02D1  3E01               	addlw	1
  3127  02D2  3EFB               	addlw	251
  3128  02D3  00F5               	movwf	??_checkBatAD+1
  3129  02D4  3004               	movlw	4
  3130  02D5                     u3605:	
  3131  02D5  1003               	clrc
  3132  02D6  0CF5               	rrf	??_checkBatAD+1,f
  3133  02D7  0CF4               	rrf	??_checkBatAD,f
  3134  02D8  3EFF               	addlw	-1
  3135  02D9  1D03               	skipz
  3136  02DA  2AD5               	goto	u3605
  3137  02DB  0874               	movf	??_checkBatAD,w
  3138  02DC                     L10:	
  3139  02DC  00C5               	movwf	_pwStep
  3140                           
  3141                           ;main.c: 890: }
  3142                           ;main.c: 891: if(pwStep > 99)
  3143  02DD  3064               	movlw	100
  3144  02DE  0245               	subwf	_pwStep,w
  3145  02DF  1C03               	skipc
  3146  02E0  2AE3               	goto	l3326
  3147                           
  3148                           ;main.c: 892: {
  3149                           ;main.c: 893: pwStep = 99;
  3150  02E1  3063               	movlw	99
  3151  02E2  00C5               	movwf	_pwStep
  3152  02E3                     l3326:	
  3153                           
  3154                           ;main.c: 894: }
  3155                           ;main.c: 895: }
  3156                           ;main.c: 896: if(chrgFlag && batADValue > 1861)
  3157  02E3  0851               	movf	_chrgFlag,w
  3158  02E4  1903               	btfsc	3,2
  3159  02E5  2AF7               	goto	l3336
  3160  02E6  3007               	movlw	7
  3161  02E7  022F               	subwf	_batADValue+1,w
  3162  02E8  3046               	movlw	70
  3163  02E9  1903               	skipnz
  3164  02EA  022E               	subwf	_batADValue,w
  3165  02EB  1C03               	skipc
  3166  02EC  2AF7               	goto	l3336
  3167                           
  3168                           ;main.c: 897: {
  3169                           ;main.c: 898: protectFlag = 1;
  3170  02ED  01CD               	clrf	_protectFlag
  3171  02EE  0ACD               	incf	_protectFlag,f
  3172  02EF  2AF7               	goto	l3336
  3173  02F0                     l3332:	
  3174                           
  3175                           ;main.c: 901: else
  3176                           ;main.c: 902: {
  3177                           ;main.c: 903: ADCON0 = 0;
  3178  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  3179  02F1  0195               	clrf	21	;volatile
  3180                           
  3181                           ;main.c: 904: ADCON1 = 0;
  3182  02F2  0196               	clrf	22	;volatile
  3183                           
  3184                           ;main.c: 905: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3185  02F3  3085               	movlw	133
  3186  02F4  00F4               	movwf	??_checkBatAD
  3187  02F5                     u3977:	
  3188  02F5  0BF4               	decfsz	??_checkBatAD,f
  3189  02F6  2AF5               	goto	u3977
  3190  02F7                     l3336:	
  3191                           
  3192                           ;main.c: 906: }
  3193                           ;main.c: 908: test_adc = ADC_Sample(1, 5);
  3194  02F7  3005               	movlw	5
  3195  02F8  00F3               	movwf	ADC_Sample@adldo
  3196  02F9  3001               	movlw	1
  3197  02FA  2102               	fcall	_ADC_Sample
  3198  02FB  00D5               	movwf	_test_adc	;volatile
  3199                           
  3200                           ;main.c: 909: if (0xA5 == test_adc)
  3201  02FC  30A5               	movlw	165
  3202  02FD  0655               	xorwf	_test_adc,w	;volatile
  3203  02FE  1D03               	btfss	3,2
  3204  02FF  2B2B               	goto	l3356
  3205                           
  3206                           ;main.c: 910: {
  3207                           ;main.c: 911: if(chrgFlag && adresult > 100)
  3208  0300  0851               	movf	_chrgFlag,w
  3209  0301  1903               	btfsc	3,2
  3210  0302  0008               	return
  3211  0303  3000               	movlw	0
  3212  0304  0278               	subwf	_adresult+1,w	;volatile
  3213  0305  3065               	movlw	101
  3214  0306  1903               	skipnz
  3215  0307  0277               	subwf	_adresult,w	;volatile
  3216  0308  1C03               	skipc
  3217  0309  0008               	return
  3218                           
  3219                           ;main.c: 912: {
  3220                           ;main.c: 914: if(adresult > 810 || (batADValue - adresult) > 810)
  3221  030A  3003               	movlw	3
  3222  030B  0278               	subwf	_adresult+1,w	;volatile
  3223  030C  302B               	movlw	43
  3224  030D  1903               	skipnz
  3225  030E  0277               	subwf	_adresult,w	;volatile
  3226  030F  1803               	skipnc
  3227  0310  2B20               	goto	l3348
  3228  0311  0877               	movf	_adresult,w	;volatile
  3229  0312  022E               	subwf	_batADValue,w
  3230  0313  00F4               	movwf	??_checkBatAD
  3231  0314  0878               	movf	_adresult+1,w	;volatile
  3232  0315  1C03               	skipc
  3233  0316  0A78               	incf	_adresult+1,w	;volatile
  3234  0317  022F               	subwf	_batADValue+1,w
  3235  0318  00F5               	movwf	??_checkBatAD+1
  3236  0319  3003               	movlw	3
  3237  031A  0275               	subwf	??_checkBatAD+1,w
  3238  031B  302B               	movlw	43
  3239  031C  1903               	skipnz
  3240  031D  0274               	subwf	??_checkBatAD,w
  3241  031E  1C03               	skipc
  3242  031F  2B29               	goto	l3354
  3243  0320                     l3348:	
  3244                           
  3245                           ;main.c: 915: {
  3246                           ;main.c: 917: if(++countHalfFull > 250)
  3247  0320  30FB               	movlw	251
  3248  0321  0ACE               	incf	_countHalfFull,f
  3249  0322  024E               	subwf	_countHalfFull,w
  3250  0323  1C03               	skipc
  3251  0324  0008               	return
  3252  0325  3002               	movlw	2
  3253                           
  3254                           ;main.c: 918: {
  3255                           ;main.c: 919: countHalfFull = 0;
  3256  0326  01CE               	clrf	_countHalfFull
  3257                           
  3258                           ;main.c: 920: protectFlag = 2;
  3259  0327  00CD               	movwf	_protectFlag
  3260  0328  0008               	return
  3261  0329                     l3354:	
  3262                           
  3263                           ;main.c: 923: else
  3264                           ;main.c: 924: {
  3265                           ;main.c: 925: countHalfFull = 0;
  3266  0329  01CE               	clrf	_countHalfFull
  3267                           
  3268                           ;main.c: 926: }
  3269                           ;main.c: 927: }
  3270                           ;main.c: 928: }
  3271  032A  0008               	return
  3272  032B                     l3356:	
  3273                           
  3274                           ;main.c: 929: else
  3275                           ;main.c: 930: {
  3276                           ;main.c: 931: ADCON0 = 0;
  3277  032B  1683               	bsf	3,5	;RP0=1, select bank1
  3278  032C  0195               	clrf	21	;volatile
  3279                           
  3280                           ;main.c: 932: ADCON1 = 0;
  3281  032D  0196               	clrf	22	;volatile
  3282                           
  3283                           ;main.c: 933: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3284  032E  3085               	movlw	133
  3285  032F  00F4               	movwf	??_checkBatAD
  3286  0330                     u3987:	
  3287  0330  0BF4               	decfsz	??_checkBatAD,f
  3288  0331  2B30               	goto	u3987
  3289  0332  0008               	return
  3290  0333                     __end_of_checkBatAD:	
  3291                           
  3292                           	psect	text19
  3293  0102                     __ptext19:	
  3294 ;; *************** function _ADC_Sample *****************
  3295 ;; Defined at:
  3296 ;;		line 1182 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  adch            1    wreg     unsigned char 
  3299 ;;  adldo           1    3[COMMON] unsigned char 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  adch            1    5[BANK0 ] unsigned char 
  3302 ;;  j               1    4[BANK0 ] unsigned char 
  3303 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3304 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3305 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3306 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3307 ;;  i               1    6[BANK0 ] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      unsigned char 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 100/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1
  3317 ;;      Params:         1       0       0
  3318 ;;      Locals:         0      13       0
  3319 ;;      Temps:          0       4       0
  3320 ;;      Totals:         1      17       0
  3321 ;;Total ram usage:       18 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    2
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_checkOutA
  3328 ;;		_checkBatAD
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _ADC_Sample
  3334  0102                     _ADC_Sample:	
  3335                           
  3336                           ;incstack = 0
  3337                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3338                           ;ADC_Sample@adch stored from wreg
  3339  0102  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0103  00DB               	movwf	ADC_Sample@adch
  3341                           
  3342                           ;main.c: 1184: volatile unsigned long adsum = 0;
  3343                           
  3344                           ;main.c: 1185: volatile unsigned int admin = 0, admax = 0;
  3345  0104  21DD               	fcall	PL8	;call to abstracted procedure
  3346                           
  3347                           ;main.c: 1186: volatile unsigned int ad_temp = 0;
  3348  0105  01E5               	clrf	ADC_Sample@ad_temp	;volatile
  3349  0106  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3350                           
  3351                           ;main.c: 1188: if ((!LDO_EN) && (adldo & 0x04) )
  3352  0107  1683               	bsf	3,5	;RP0=1, select bank1
  3353  0108  1D16               	btfss	22,2	;volatile
  3354  0109  1D73               	btfss	ADC_Sample@adldo,2
  3355  010A  2914               	goto	l3188
  3356                           
  3357                           ;main.c: 1189: {
  3358                           ;main.c: 1191: ADCON1 = adldo;
  3359  010B  0873               	movf	ADC_Sample@adldo,w
  3360  010C  0096               	movwf	22	;volatile
  3361                           
  3362                           ;main.c: 1192: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3363  010D  3084               	movlw	132
  3364  010E  1283               	bcf	3,5	;RP0=0, select bank0
  3365  010F  00D6               	movwf	??_ADC_Sample
  3366  0110                     u3997:	
  3367  0110  0BD6               	decfsz	??_ADC_Sample,f
  3368  0111  2910               	goto	u3997
  3369  0112  2913               	nop2
  3370                           
  3371                           ;main.c: 1193: }
  3372  0113  2916               	goto	l3190
  3373  0114                     l3188:	
  3374                           
  3375                           ;main.c: 1194: else
  3376                           ;main.c: 1195: ADCON1 = adldo;
  3377  0114  0873               	movf	ADC_Sample@adldo,w
  3378  0115  0096               	movwf	22	;volatile
  3379  0116                     l3190:	
  3380                           
  3381                           ;main.c: 1197: if(adch & 0x10)
  3382  0116  1283               	bcf	3,5	;RP0=0, select bank0
  3383  0117  1E5B               	btfss	ADC_Sample@adch,4
  3384  0118  291E               	goto	l3198
  3385                           
  3386                           ;main.c: 1198: {
  3387                           ;main.c: 1199: CHS4 = 1;
  3388  0119  1683               	bsf	3,5	;RP0=1, select bank1
  3389  011A  1716               	bsf	22,6	;volatile
  3390                           
  3391                           ;main.c: 1200: adch &= 0x0f;
  3392  011B  300F               	movlw	15
  3393  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3394  011D  05DB               	andwf	ADC_Sample@adch,f
  3395  011E                     l3198:	
  3396                           
  3397                           ;main.c: 1203: for (i = 0; i < 10; i++)
  3398  011E  01DC               	clrf	ADC_Sample@i
  3399  011F                     l3204:	
  3400                           
  3401                           ;main.c: 1204: {
  3402                           ;main.c: 1205: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3403  011F  085B               	movf	ADC_Sample@adch,w
  3404  0120  00D6               	movwf	??_ADC_Sample
  3405  0121  3001               	movlw	1
  3406  0122  1003               	clrc
  3407  0123                     L12:	
  3408  0123  0DD6               	rlf	??_ADC_Sample,f
  3409  0124  3EFF               	addlw	-1
  3410  0125  1003               	clrc
  3411  0126  1D03               	skipz
  3412  0127  2923               	goto	L12
  3413  0128  0D56               	rlf	??_ADC_Sample,w
  3414  0129  3841               	iorlw	65
  3415  012A  1683               	bsf	3,5	;RP0=1, select bank1
  3416  012B  0095               	movwf	21	;volatile
  3417  012C  0000               	nop	;# 
  3418  012D  0000               	nop	;# 
  3419  012E  0000               	nop	;# 
  3420  012F  0000               	nop	;# 
  3421                           
  3422                           ;main.c: 1210: GODONE = 1;
  3423  0130  1683               	bsf	3,5	;RP0=1, select bank1
  3424  0131  1495               	bsf	21,1	;volatile
  3425                           
  3426                           ;main.c: 1212: unsigned char j = 0;
  3427  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0133  01DA               	clrf	ADC_Sample@j
  3429  0134                     l949:	
  3430                           ;main.c: 1213: while (GODONE)
  3431                           
  3432  0134  1683               	bsf	3,5	;RP0=1, select bank1
  3433  0135  1C95               	btfss	21,1	;volatile
  3434  0136  293F               	goto	l3214
  3435                           
  3436                           ;main.c: 1214: {
  3437                           ;main.c: 1215: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3438  0137  2938               	nop2	;2 cycle nop
  3439  0138  2939               	nop2	;2 cycle nop
  3440  0139  293A               	nop2	;2 cycle nop
  3441  013A  293B               	nop2	;2 cycle nop
  3442                           
  3443                           ;main.c: 1217: if (0 == (--j))
  3444  013B  1283               	bcf	3,5	;RP0=0, select bank0
  3445  013C  0BDA               	decfsz	ADC_Sample@j,f
  3446  013D  2934               	goto	l949
  3447                           
  3448                           ;main.c: 1218: return 0;
  3449  013E  3400               	retlw	0
  3450  013F                     l3214:	
  3451                           
  3452                           ;main.c: 1219: }
  3453                           ;main.c: 1221: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3454  013F  0819               	movf	25,w	;volatile
  3455  0140  1283               	bcf	3,5	;RP0=0, select bank0
  3456  0141  00E5               	movwf	ADC_Sample@ad_temp	;volatile
  3457  0142  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3458  0143  0EE5               	swapf	ADC_Sample@ad_temp,f	;volatile
  3459  0144  0EE6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3460  0145  30F0               	movlw	240
  3461  0146  05E6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3462  0147  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3463  0148  390F               	andlw	15
  3464  0149  04E6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3465  014A  30F0               	movlw	240
  3466  014B  05E5               	andwf	ADC_Sample@ad_temp,f	;volatile
  3467  014C  1683               	bsf	3,5	;RP0=1, select bank1
  3468  014D  0E18               	swapf	24,w	;volatile
  3469  014E  390F               	andlw	15
  3470  014F  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0150  07E5               	addwf	ADC_Sample@ad_temp,f	;volatile
  3472  0151  1803               	skipnc
  3473  0152  0AE6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3474                           
  3475                           ;main.c: 1223: if (0 == admax)
  3476  0153  0863               	movf	ADC_Sample@admax,w	;volatile
  3477  0154  0464               	iorwf	ADC_Sample@admax+1,w	;volatile
  3478  0155  1D03               	btfss	3,2
  3479  0156  2959               	goto	l3222
  3480                           
  3481                           ;main.c: 1224: {
  3482                           ;main.c: 1225: admax = ad_temp;
  3483  0157  21E6               	fcall	PL16	;call to abstracted procedure
  3484  0158  296B               	goto	l3228
  3485  0159                     l3222:	
  3486                           ;main.c: 1227: }
  3487                           
  3488                           ;main.c: 1226: admin = ad_temp;
  3489                           
  3490                           
  3491                           ;main.c: 1228: else if (ad_temp > admax)
  3492  0159  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3493  015A  0264               	subwf	ADC_Sample@admax+1,w	;volatile
  3494  015B  1D03               	skipz
  3495  015C  295F               	goto	u3385
  3496  015D  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3497  015E  0263               	subwf	ADC_Sample@admax,w	;volatile
  3498  015F                     u3385:	
  3499  015F  1803               	skipnc
  3500  0160  2963               	goto	l3226
  3501                           
  3502                           ;main.c: 1229: admax = ad_temp;
  3503  0161  21E6               	fcall	PL16	;call to abstracted procedure
  3504  0162  296F               	goto	l955
  3505  0163                     l3226:	
  3506                           
  3507                           ;main.c: 1230: else if (ad_temp < admin)
  3508  0163  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3509  0164  0266               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3510  0165  1D03               	skipz
  3511  0166  2969               	goto	u3395
  3512  0167  0861               	movf	ADC_Sample@admin,w	;volatile
  3513  0168  0265               	subwf	ADC_Sample@ad_temp,w	;volatile
  3514  0169                     u3395:	
  3515  0169  1803               	skipnc
  3516  016A  296F               	goto	l955
  3517  016B                     l3228:	
  3518                           
  3519                           ;main.c: 1231: admin = ad_temp;
  3520  016B  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3521  016C  00E2               	movwf	ADC_Sample@admin+1	;volatile
  3522  016D  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3523  016E  00E1               	movwf	ADC_Sample@admin	;volatile
  3524  016F                     l955:	
  3525                           
  3526                           ;main.c: 1233: adsum += ad_temp;
  3527  016F  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3528  0170  00D6               	movwf	??_ADC_Sample
  3529  0171  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3530  0172  00D7               	movwf	??_ADC_Sample+1
  3531  0173  01D8               	clrf	??_ADC_Sample+2
  3532  0174  01D9               	clrf	??_ADC_Sample+3
  3533  0175  0856               	movf	??_ADC_Sample,w
  3534  0176  07DD               	addwf	ADC_Sample@adsum,f	;volatile
  3535  0177  0857               	movf	??_ADC_Sample+1,w
  3536  0178  1103               	clrz
  3537  0179  1803               	skipnc
  3538  017A  3E01               	addlw	1
  3539  017B  1D03               	btfss	3,2
  3540  017C  07DE               	addwf	ADC_Sample@adsum+1,f	;volatile
  3541  017D  0858               	movf	??_ADC_Sample+2,w
  3542  017E  1103               	clrz
  3543  017F  1803               	skipnc
  3544  0180  3E01               	addlw	1
  3545  0181  1D03               	btfss	3,2
  3546  0182  07DF               	addwf	ADC_Sample@adsum+2,f	;volatile
  3547  0183  0859               	movf	??_ADC_Sample+3,w
  3548  0184  1103               	clrz
  3549  0185  1803               	skipnc
  3550  0186  3E01               	addlw	1
  3551  0187  1D03               	btfss	3,2
  3552  0188  07E0               	addwf	ADC_Sample@adsum+3,f	;volatile
  3553  0189  300A               	movlw	10
  3554  018A  0ADC               	incf	ADC_Sample@i,f
  3555  018B  025C               	subwf	ADC_Sample@i,w
  3556  018C  1C03               	skipc
  3557  018D  291F               	goto	l3204
  3558                           
  3559                           ;main.c: 1234: }
  3560                           ;main.c: 1235: adsum -= admax;
  3561  018E  0863               	movf	ADC_Sample@admax,w	;volatile
  3562  018F  00D6               	movwf	??_ADC_Sample
  3563  0190  0864               	movf	ADC_Sample@admax+1,w	;volatile
  3564  0191  21CE               	fcall	PL2	;call to abstracted procedure
  3565  0192  1C03               	skipc
  3566  0193  0F59               	incfsz	??_ADC_Sample+3,w
  3567  0194  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3568                           
  3569                           ;main.c: 1236: if (adsum >= admin)
  3570  0195  0861               	movf	ADC_Sample@admin,w	;volatile
  3571  0196  00D6               	movwf	??_ADC_Sample
  3572  0197  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3573  0198  00D7               	movwf	??_ADC_Sample+1
  3574  0199  01D8               	clrf	??_ADC_Sample+2
  3575  019A  01D9               	clrf	??_ADC_Sample+3
  3576  019B  0859               	movf	??_ADC_Sample+3,w
  3577  019C  0260               	subwf	ADC_Sample@adsum+3,w	;volatile
  3578  019D  1D03               	skipz
  3579  019E  29A9               	goto	u3435
  3580  019F  0858               	movf	??_ADC_Sample+2,w
  3581  01A0  025F               	subwf	ADC_Sample@adsum+2,w	;volatile
  3582  01A1  1D03               	skipz
  3583  01A2  29A9               	goto	u3435
  3584  01A3  0857               	movf	??_ADC_Sample+1,w
  3585  01A4  025E               	subwf	ADC_Sample@adsum+1,w	;volatile
  3586  01A5  1D03               	skipz
  3587  01A6  29A9               	goto	u3435
  3588  01A7  0856               	movf	??_ADC_Sample,w
  3589  01A8  025D               	subwf	ADC_Sample@adsum,w	;volatile
  3590  01A9                     u3435:	
  3591  01A9  1C03               	skipc
  3592  01AA  29B3               	goto	l959
  3593                           
  3594                           ;main.c: 1237: adsum -= admin;
  3595  01AB  0861               	movf	ADC_Sample@admin,w	;volatile
  3596  01AC  00D6               	movwf	??_ADC_Sample
  3597  01AD  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3598  01AE  21CE               	fcall	PL2	;call to abstracted procedure
  3599  01AF  1C03               	skipc
  3600  01B0  0F59               	incfsz	??_ADC_Sample+3,w
  3601  01B1  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3602  01B2  29B7               	goto	l3238
  3603  01B3                     l959:	
  3604                           
  3605                           ;main.c: 1238: else
  3606                           ;main.c: 1239: adsum = 0;
  3607  01B3  01DD               	clrf	ADC_Sample@adsum	;volatile
  3608  01B4  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3609  01B5  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3610  01B6  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3611  01B7                     l3238:	
  3612                           
  3613                           ;main.c: 1241: adresult = adsum >> 3;
  3614  01B7  085D               	movf	ADC_Sample@adsum,w	;volatile
  3615  01B8  00D6               	movwf	??_ADC_Sample
  3616  01B9  085E               	movf	ADC_Sample@adsum+1,w	;volatile
  3617  01BA  00D7               	movwf	??_ADC_Sample+1
  3618  01BB  085F               	movf	ADC_Sample@adsum+2,w	;volatile
  3619  01BC  00D8               	movwf	??_ADC_Sample+2
  3620  01BD  0860               	movf	ADC_Sample@adsum+3,w	;volatile
  3621  01BE  00D9               	movwf	??_ADC_Sample+3
  3622  01BF  3003               	movlw	3
  3623  01C0                     u3455:	
  3624  01C0  1003               	clrc
  3625  01C1  0CD9               	rrf	??_ADC_Sample+3,f
  3626  01C2  0CD8               	rrf	??_ADC_Sample+2,f
  3627  01C3  0CD7               	rrf	??_ADC_Sample+1,f
  3628  01C4  0CD6               	rrf	??_ADC_Sample,f
  3629  01C5  3EFF               	addlw	-1
  3630  01C6  1D03               	skipz
  3631  01C7  29C0               	goto	u3455
  3632  01C8  0857               	movf	??_ADC_Sample+1,w
  3633  01C9  00F8               	movwf	_adresult+1	;volatile
  3634  01CA  0856               	movf	??_ADC_Sample,w
  3635  01CB  00F7               	movwf	_adresult	;volatile
  3636                           
  3637                           ;main.c: 1243: adsum = 0;
  3638                           
  3639                           ;main.c: 1244: admin = 0;
  3640                           
  3641                           ;main.c: 1245: admax = 0;
  3642  01CC  21DD               	fcall	PL8	;call to abstracted procedure
  3643                           
  3644                           ;main.c: 1246: return 0xA5;
  3645  01CD  34A5               	retlw	165
  3646  01CE                     __end_of_ADC_Sample:	
  3647  01CE                     PL2:	
  3648  01CE  00D7               	movwf	??_ADC_Sample+1
  3649  01CF  01D8               	clrf	??_ADC_Sample+2
  3650  01D0  01D9               	clrf	??_ADC_Sample+3
  3651  01D1  0856               	movf	??_ADC_Sample,w
  3652  01D2  02DD               	subwf	ADC_Sample@adsum,f	;volatile
  3653  01D3  0857               	movf	??_ADC_Sample+1,w
  3654  01D4  1C03               	skipc
  3655  01D5  0F57               	incfsz	??_ADC_Sample+1,w
  3656  01D6  02DE               	subwf	ADC_Sample@adsum+1,f	;volatile
  3657  01D7  0858               	movf	??_ADC_Sample+2,w
  3658  01D8  1C03               	skipc
  3659  01D9  0F58               	incfsz	??_ADC_Sample+2,w
  3660  01DA  02DF               	subwf	ADC_Sample@adsum+2,f	;volatile
  3661  01DB  0859               	movf	??_ADC_Sample+3,w
  3662  01DC  0008               	return
  3663  01DD                     __end_ofPL2:	
  3664  01DD                     PL8:	
  3665  01DD  01DD               	clrf	ADC_Sample@adsum	;volatile
  3666  01DE  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3667  01DF  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3668  01E0  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3669  01E1  01E1               	clrf	ADC_Sample@admin	;volatile
  3670  01E2  01E2               	clrf	ADC_Sample@admin+1	;volatile
  3671  01E3  01E3               	clrf	ADC_Sample@admax	;volatile
  3672  01E4  01E4               	clrf	ADC_Sample@admax+1	;volatile
  3673  01E5  0008               	return
  3674  01E6                     __end_ofPL8:	
  3675  01E6                     PL16:	
  3676  01E6  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3677  01E7  00E4               	movwf	ADC_Sample@admax+1	;volatile
  3678  01E8  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3679  01E9  00E3               	movwf	ADC_Sample@admax	;volatile
  3680  01EA  0008               	return
  3681  01EB                     __end_ofPL16:	
  3682                           
  3683                           	psect	text20
  3684  03EC                     __ptext20:	
  3685 ;; *************** function _Sleep_Mode *****************
  3686 ;; Defined at:
  3687 ;;		line 1105 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, pclath, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 100/0
  3698 ;;		On exit  : 100/100
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1
  3701 ;;      Params:         0       0       0
  3702 ;;      Locals:         0       0       0
  3703 ;;      Temps:          0       0       0
  3704 ;;      Totals:         0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    3
  3708 ;; This function calls:
  3709 ;;		_AD_Init
  3710 ;;		_Init_System
  3711 ;; This function is called by:
  3712 ;;		_main
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _Sleep_Mode
  3718  03EC                     _Sleep_Mode:	
  3719                           
  3720                           ;main.c: 1107: INTCON = 0;
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3724  03EC  018B               	clrf	11	;volatile
  3725                           
  3726                           ;main.c: 1109: OPTION_REG = 0;
  3727  03ED  0181               	clrf	1	;volatile
  3728                           
  3729                           ;main.c: 1111: WPUA = 0B00000000;
  3730  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  3731  03EF  0188               	clrf	8	;volatile
  3732                           
  3733                           ;main.c: 1112: TRISA = 0x27;
  3734  03F0  3027               	movlw	39
  3735                           
  3736                           ;main.c: 1113: TRISB = 0x04;
  3737                           
  3738                           ;main.c: 1115: PORTA = 0X00;
  3739                           
  3740                           ;main.c: 1116: PORTB = 0X00;
  3741  03F1  2425               	fcall	PL6	;call to abstracted procedure
  3742                           
  3743                           ;main.c: 1117: WPUB = 0x04;
  3744  03F2  0088               	movwf	8	;volatile
  3745                           
  3746                           ;main.c: 1119: ADCON0 = 0;
  3747  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  3748  03F4  0195               	clrf	21	;volatile
  3749                           
  3750                           ;main.c: 1120: ADCON1 = 0;
  3751  03F5  0196               	clrf	22	;volatile
  3752                           
  3753                           ;main.c: 1122: PWMCON0 = 0;
  3754  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3755  03F7  0195               	clrf	21	;volatile
  3756                           
  3757                           ;main.c: 1124: OSCCON = 0X70;
  3758  03F8  3070               	movlw	112
  3759  03F9  0094               	movwf	20	;volatile
  3760                           
  3761                           ;main.c: 1126: IOCA = 0x20;
  3762  03FA  3020               	movlw	32
  3763  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  3764  03FC  0089               	movwf	9	;volatile
  3765                           
  3766                           ;main.c: 1127: IOCB = 0x04;
  3767  03FD  3004               	movlw	4
  3768  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  3769  03FF  0089               	movwf	9	;volatile
  3770                           
  3771                           ;main.c: 1129: RAIE = 1;
  3772  0400  158E               	bsf	14,3	;volatile
  3773                           
  3774                           ;main.c: 1130: PEIE = 1;
  3775  0401  170B               	bsf	11,6	;volatile
  3776                           
  3777                           ;main.c: 1131: RBIE = 1;
  3778  0402  158B               	bsf	11,3	;volatile
  3779                           
  3780                           ;main.c: 1132: GIE = 0;
  3781  0403  138B               	bcf	11,7	;volatile
  3782                           
  3783                           ;main.c: 1134: PIE1 &= 0X08;
  3784  0404  3008               	movlw	8
  3785  0405  058E               	andwf	14,f	;volatile
  3786                           
  3787                           ;main.c: 1135: PIR1 = 0;
  3788  0406  018D               	clrf	13	;volatile
  3789                           
  3790                           ;main.c: 1136: INTCON &= 0XC8;
  3791  0407  30C8               	movlw	200
  3792  0408  058B               	andwf	11,f	;volatile
  3793                           
  3794                           ;main.c: 1138: PORTA;
  3795  0409  1683               	bsf	3,5	;RP0=1, select bank1
  3796  040A  0806               	movf	6,w	;volatile
  3797                           
  3798                           ;main.c: 1139: RAIF = 0;
  3799  040B  1283               	bcf	3,5	;RP0=0, select bank0
  3800  040C  118D               	bcf	13,3	;volatile
  3801                           
  3802                           ;main.c: 1140: PORTB;
  3803  040D  0806               	movf	6,w	;volatile
  3804                           
  3805                           ;main.c: 1141: RBIF = 0;
  3806  040E  100B               	bcf	11,0	;volatile
  3807  040F  0064               	clrwdt	;# 
  3808  0410  0063               	sleep	;# 
  3809  0411  0000               	nop	;# 
  3810  0412  0064               	clrwdt	;# 
  3811  0413  0000               	nop	;# 
  3812  0414  0000               	nop	;# 
  3813  0415  0000               	nop	;# 
  3814  0416  0000               	nop	;# 
  3815  0417  0000               	nop	;# 
  3816                           
  3817                           ;main.c: 1153: if(RAIF) RAIF = 0;
  3818  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3819  0419  198D               	btfsc	13,3	;volatile
  3820  041A  118D               	bcf	13,3	;volatile
  3821                           
  3822                           ;main.c: 1154: if(RBIF) RBIF = 0;
  3823  041B  180B               	btfsc	11,0	;volatile
  3824  041C  100B               	bcf	11,0	;volatile
  3825                           
  3826                           ;main.c: 1155: if(TMR2IF) TMR2IF = 0;
  3827  041D  188D               	btfsc	13,1	;volatile
  3828  041E  108D               	bcf	13,1	;volatile
  3829                           
  3830                           ;main.c: 1156: IOCA = 0B00000000;
  3831  041F  1683               	bsf	3,5	;RP0=1, select bank1
  3832  0420  0189               	clrf	9	;volatile
  3833                           
  3834                           ;main.c: 1157: IOCB = 0B00000000;
  3835  0421  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0422  0189               	clrf	9	;volatile
  3837                           
  3838                           ;main.c: 1158: Init_System();
  3839  0423  2601               	fcall	_Init_System
  3840                           
  3841                           ;main.c: 1159: AD_Init();
  3842  0424  2E67               	ljmp	l2300
  3843  0425                     __end_of_Sleep_Mode:	
  3844  0425                     PL6:	
  3845  0425  0085               	movwf	5	;volatile
  3846  0426  3004               	movlw	4
  3847  0427  1283               	bcf	3,5	;RP0=0, select bank0
  3848  0428  0085               	movwf	5	;volatile
  3849  0429  1683               	bsf	3,5	;RP0=1, select bank1
  3850  042A  0186               	clrf	6	;volatile
  3851  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3852  042C  0186               	clrf	6	;volatile
  3853  042D  0008               	return
  3854  042E                     __end_ofPL6:	
  3855                           
  3856                           	psect	text21
  3857  0601                     __ptext21:	
  3858 ;; *************** function _Init_System *****************
  3859 ;; Defined at:
  3860 ;;		line 947 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;		None
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2
  3869 ;; Tracked objects:
  3870 ;;		On entry : 100/0
  3871 ;;		On exit  : 100/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1
  3874 ;;      Params:         0       0       0
  3875 ;;      Locals:         0       0       0
  3876 ;;      Temps:          0       0       0
  3877 ;;      Totals:         0       0       0
  3878 ;;Total ram usage:        0 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;;		_Sleep_Mode
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           
  3890                           ;psect for function _Init_System
  3891  0601                     _Init_System:	
  3892                           
  3893                           ;incstack = 0
  3894                           ; Regs used in _Init_System: [wreg+status,2]
  3895  0601  0000               	nop	;# 
  3896  0602  0064               	clrwdt	;# 
  3897                           
  3898                           ;main.c: 951: OPTION_REG = 0;
  3899  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3900  0604  0181               	clrf	1	;volatile
  3901  0605  0064               	clrwdt	;# 
  3902                           
  3903                           ;main.c: 953: OSCCON = 0X72;
  3904  0606  3072               	movlw	114
  3905  0607  1283               	bcf	3,5	;RP0=0, select bank0
  3906  0608  0094               	movwf	20	;volatile
  3907                           
  3908                           ;main.c: 955: WPUA = 0B00000000;
  3909  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3910  060A  0188               	clrf	8	;volatile
  3911                           
  3912                           ;main.c: 956: WPDA = 0x00;
  3913  060B  0187               	clrf	7	;volatile
  3914                           
  3915                           ;main.c: 957: WPUB = 0x04;
  3916  060C  3004               	movlw	4
  3917  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3918  060E  0088               	movwf	8	;volatile
  3919                           
  3920                           ;main.c: 959: TRISA = 0x27;
  3921  060F  3027               	movlw	39
  3922  0610  1683               	bsf	3,5	;RP0=1, select bank1
  3923                           
  3924                           ;main.c: 960: TRISB = 0x04;
  3925                           
  3926                           ;main.c: 962: PORTA = 0X00;
  3927                           
  3928                           ;main.c: 963: PORTB = 0X00;
  3929  0611  2425               	fcall	PL6	;call to abstracted procedure
  3930                           
  3931                           ;main.c: 967: PR2 = 249;
  3932  0612  30F9               	movlw	249
  3933  0613  0091               	movwf	17	;volatile
  3934                           
  3935                           ;main.c: 968: TMR2IF = 0;
  3936  0614  108D               	bcf	13,1	;volatile
  3937                           
  3938                           ;main.c: 969: TMR2IE = 1;
  3939  0615  148E               	bsf	14,1	;volatile
  3940                           
  3941                           ;main.c: 971: T2CON = 0B00000100;
  3942  0616  3004               	movlw	4
  3943  0617  0093               	movwf	19	;volatile
  3944                           
  3945                           ;main.c: 972: INTCON = 0XC0;
  3946  0618  30C0               	movlw	192
  3947  0619  008B               	movwf	11	;volatile
  3948  061A  0008               	return
  3949  061B                     __end_of_Init_System:	
  3950                           
  3951                           	psect	text22
  3952  0667                     __ptext22:	
  3953 ;; *************** function _AD_Init *****************
  3954 ;; Defined at:
  3955 ;;		line 984 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;		None
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2
  3964 ;; Tracked objects:
  3965 ;;		On entry : 100/0
  3966 ;;		On exit  : 100/100
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1
  3969 ;;      Params:         0       0       0
  3970 ;;      Locals:         0       0       0
  3971 ;;      Temps:          0       0       0
  3972 ;;      Totals:         0       0       0
  3973 ;;Total ram usage:        0 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    2
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_main
  3980 ;;		_Sleep_Mode
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function _AD_Init
  3986  0667                     _AD_Init:	
  3987  0667                     l2300:	
  3988                           ;incstack = 0
  3989                           ; Regs used in _AD_Init: [wreg+status,2]
  3990                           
  3991                           
  3992                           ;main.c: 1017: ADCON0 = 0X41;
  3993  0667  3041               	movlw	65
  3994  0668  1683               	bsf	3,5	;RP0=1, select bank1
  3995  0669  0095               	movwf	21	;volatile
  3996                           
  3997                           ;main.c: 1034: ADCON1 = 0;
  3998  066A  0196               	clrf	22	;volatile
  3999                           
  4000                           ;main.c: 1035: ANSEL0 = 0X07;
  4001  066B  3007               	movlw	7
  4002  066C  0093               	movwf	19	;volatile
  4003                           
  4004                           ;main.c: 1036: ANSEL1 = 0x00;
  4005  066D  0194               	clrf	20	;volatile
  4006  066E  0008               	return
  4007  066F                     __end_of_AD_Init:	
  4008                           
  4009                           	psect	text23
  4010  0591                     __ptext23:	
  4011 ;; *************** function _Isr_Timer *****************
  4012 ;; Defined at:
  4013 ;;		line 130 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 100/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMMON   BANK0   BANK1
  4027 ;;      Params:         0       0       0
  4028 ;;      Locals:         0       0       0
  4029 ;;      Temps:          3       0       0
  4030 ;;      Totals:         3       0       0
  4031 ;;Total ram usage:        3 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:    1
  4034 ;; This function calls:
  4035 ;;		_ledShow
  4036 ;; This function is called by:
  4037 ;;		Interrupt level 1
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           
  4042                           ;psect for function _Isr_Timer
  4043  0591                     _Isr_Timer:	
  4044                           
  4045                           ;main.c: 132: if(TMR2IF)
  4046  0591  1283               	bcf	3,5	;RP0=0, select bank0
  4047  0592  1C8D               	btfss	13,1	;volatile
  4048  0593  2DA5               	goto	i1l686
  4049                           
  4050                           ;main.c: 133: {
  4051                           ;main.c: 134: TMR2IF = 0;
  4052  0594  108D               	bcf	13,1	;volatile
  4053                           
  4054                           ;main.c: 135: if(++intCount >= 160)
  4055  0595  30A0               	movlw	160
  4056  0596  0AD4               	incf	_intCount,f
  4057  0597  0254               	subwf	_intCount,w
  4058  0598  1C03               	skipc
  4059  0599  2DA2               	goto	i1l3032
  4060  059A  3064               	movlw	100
  4061                           
  4062                           ;main.c: 136: {
  4063                           ;main.c: 137: intCount = 0;
  4064  059B  01D4               	clrf	_intCount
  4065                           
  4066                           ;main.c: 138: IntFlag = 1;
  4067  059C  01D2               	clrf	_IntFlag
  4068  059D  0AD2               	incf	_IntFlag,f
  4069                           
  4070                           ;main.c: 139: if(++count1s >= 100)
  4071  059E  0AD3               	incf	_count1s,f
  4072  059F  0253               	subwf	_count1s,w
  4073  05A0  1803               	btfsc	3,0
  4074                           
  4075                           ;main.c: 140: {
  4076                           ;main.c: 141: count1s = 0;
  4077  05A1  01D3               	clrf	_count1s
  4078  05A2                     i1l3032:	
  4079                           
  4080                           ;main.c: 142: }
  4081                           ;main.c: 143: }
  4082                           ;main.c: 144: ledShow();
  4083  05A2  21EB               	fcall	_ledShow
  4084                           
  4085                           ;main.c: 145: intCount10++;
  4086  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  4087  05A4  0ACF               	incf	_intCount10,f
  4088  05A5                     i1l686:	
  4089  05A5  0872               	movf	??_Isr_Timer+2,w
  4090  05A6  008A               	movwf	10
  4091  05A7  0871               	movf	??_Isr_Timer+1,w
  4092  05A8  0084               	movwf	4
  4093  05A9  0E70               	swapf	??_Isr_Timer^(0+-128),w
  4094  05AA  0083               	movwf	3
  4095  05AB  0EFE               	swapf	126,f
  4096  05AC  0E7E               	swapf	126,w
  4097  05AD  0009               	retfie
  4098  05AE                     __end_of_Isr_Timer:	
  4099                           
  4100                           	psect	intentry
  4101  0004                     __pintentry:	
  4102                           ;incstack = 0
  4103                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4104                           
  4105  0004                     interrupt_function:	
  4106  007E                     saved_w	set	btemp
  4107  0004  00FE               	movwf	btemp
  4108  0005  0E03               	swapf	3,w
  4109  0006  00F0               	movwf	??_Isr_Timer
  4110  0007  0804               	movf	4,w
  4111  0008  00F1               	movwf	??_Isr_Timer+1
  4112  0009  080A               	movf	10,w
  4113  000A  00F2               	movwf	??_Isr_Timer+2
  4114  000B  2D91               	ljmp	_Isr_Timer
  4115                           
  4116                           	psect	text24
  4117  01EB                     __ptext24:	
  4118 ;; *************** function _ledShow *****************
  4119 ;; Defined at:
  4120 ;;		line 206 in file "C:\mcuproject\scm\zdt\D212_062B_SOP14\main.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4129 ;; Tracked objects:
  4130 ;;		On entry : 100/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMMON   BANK0   BANK1
  4134 ;;      Params:         0       0       0
  4135 ;;      Locals:         0       0       0
  4136 ;;      Temps:          0       0       0
  4137 ;;      Totals:         0       0       0
  4138 ;;Total ram usage:        0 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_Isr_Timer
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           
  4148                           ;psect for function _ledShow
  4149  01EB                     _ledShow:	
  4150                           
  4151                           ;main.c: 208: if(++ledCntTime > 5)
  4152                           
  4153                           ;incstack = 0
  4154                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  4155  01EB  3006               	movlw	6
  4156  01EC  0ABB               	incf	_ledCntTime,f
  4157  01ED  023B               	subwf	_ledCntTime,w
  4158  01EE  1C03               	skipc
  4159  01EF  0008               	return
  4160  01F0  300F               	movlw	15
  4161                           
  4162                           ;main.c: 209: {
  4163                           ;main.c: 210: ledCntTime = 0;
  4164  01F1  01BB               	clrf	_ledCntTime
  4165                           
  4166                           ;main.c: 211: if(++ledCnt > 14)
  4167  01F2  0ACB               	incf	_ledCnt,f
  4168  01F3  024B               	subwf	_ledCnt,w
  4169  01F4  1803               	btfsc	3,0
  4170                           
  4171                           ;main.c: 212: {
  4172                           ;main.c: 213: ledCnt = 0;
  4173  01F5  01CB               	clrf	_ledCnt
  4174                           
  4175                           ;main.c: 214: }
  4176                           ;main.c: 215: PORTA &= 0xE7;
  4177  01F6  30E7               	movlw	231
  4178  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  4179  01F8  0586               	andwf	6,f	;volatile
  4180                           
  4181                           ;main.c: 216: PORTB &= 0xDC;
  4182  01F9  30DC               	movlw	220
  4183  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  4184  01FB  0586               	andwf	6,f	;volatile
  4185                           
  4186                           ;main.c: 217: TRISA |= 0x18;
  4187  01FC  3018               	movlw	24
  4188  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  4189  01FE  0485               	iorwf	5,f	;volatile
  4190                           
  4191                           ;main.c: 218: TRISB |= 0x23;
  4192  01FF  3023               	movlw	35
  4193  0200  1283               	bcf	3,5	;RP0=0, select bank0
  4194  0201  0485               	iorwf	5,f	;volatile
  4195                           
  4196                           ;main.c: 219: switch(ledCnt)
  4197  0202  2A84               	goto	i1l2590
  4198  0203                     i1l709:	
  4199                           ;main.c: 220: {
  4200                           ;main.c: 221: case 1:
  4201                           
  4202                           
  4203                           ;main.c: 222: if(shiweiNum & 0x01)
  4204  0203  1C68               	btfss	_shiweiNum,0
  4205  0204  0008               	return
  4206                           
  4207                           ;main.c: 223: {
  4208                           ;main.c: 224: TRISB &= 0xDF;
  4209  0205  1285               	bcf	5,5	;volatile
  4210                           
  4211                           ;main.c: 225: TRISB &= 0xFE;
  4212  0206  1005               	bcf	5,0	;volatile
  4213                           
  4214                           ;main.c: 226: RB5 = 1;
  4215  0207  1686               	bsf	6,5	;volatile
  4216                           
  4217                           ;main.c: 227: RB0 = 0;
  4218  0208  1006               	bcf	6,0	;volatile
  4219  0209  0008               	return
  4220  020A                     i1l712:	
  4221                           ;main.c: 230: case 2:
  4222                           
  4223                           
  4224                           ;main.c: 231: if(shiweiNum & 0x02)
  4225  020A  1CE8               	btfss	_shiweiNum,1
  4226  020B  0008               	return
  4227                           
  4228                           ;main.c: 232: {
  4229                           ;main.c: 233: TRISB &= 0xDF;
  4230  020C  1285               	bcf	5,5	;volatile
  4231                           
  4232                           ;main.c: 234: TRISB &= 0xFE;
  4233  020D  1005               	bcf	5,0	;volatile
  4234                           
  4235                           ;main.c: 235: RB0 = 1;
  4236  020E  1406               	bsf	6,0	;volatile
  4237                           
  4238                           ;main.c: 236: RB5 = 0;
  4239  020F  1286               	bcf	6,5	;volatile
  4240  0210  0008               	return
  4241  0211                     i1l714:	
  4242                           ;main.c: 239: case 3:
  4243                           
  4244                           
  4245                           ;main.c: 240: if(shiweiNum & 0x04)
  4246  0211  1D68               	btfss	_shiweiNum,2
  4247  0212  0008               	return
  4248                           
  4249                           ;main.c: 241: {
  4250                           ;main.c: 242: TRISB &= 0xDF;
  4251  0213  1285               	bcf	5,5	;volatile
  4252                           
  4253                           ;main.c: 243: TRISA &= 0xF7;
  4254  0214  1683               	bsf	3,5	;RP0=1, select bank1
  4255  0215  1185               	bcf	5,3	;volatile
  4256                           
  4257                           ;main.c: 244: RB5 = 1;
  4258  0216  1283               	bcf	3,5	;RP0=0, select bank0
  4259  0217  1686               	bsf	6,5	;volatile
  4260                           
  4261                           ;main.c: 245: RA3 = 0;
  4262  0218  1683               	bsf	3,5	;RP0=1, select bank1
  4263  0219  1186               	bcf	6,3	;volatile
  4264  021A  0008               	return
  4265  021B                     i1l716:	
  4266                           ;main.c: 248: case 4:
  4267                           
  4268                           
  4269                           ;main.c: 249: if(shiweiNum & 0x08)
  4270  021B  1DE8               	btfss	_shiweiNum,3
  4271  021C  0008               	return
  4272                           
  4273                           ;main.c: 250: {
  4274                           ;main.c: 251: TRISB &= 0xFE;
  4275  021D  1005               	bcf	5,0	;volatile
  4276                           
  4277                           ;main.c: 252: TRISA &= 0xF7;
  4278  021E  1683               	bsf	3,5	;RP0=1, select bank1
  4279  021F  1185               	bcf	5,3	;volatile
  4280                           
  4281                           ;main.c: 253: RB0 = 1;
  4282  0220  1283               	bcf	3,5	;RP0=0, select bank0
  4283  0221  1406               	bsf	6,0	;volatile
  4284                           
  4285                           ;main.c: 254: RA3 = 0;
  4286  0222  1683               	bsf	3,5	;RP0=1, select bank1
  4287  0223  1186               	bcf	6,3	;volatile
  4288  0224  0008               	return
  4289  0225                     i1l718:	
  4290                           ;main.c: 257: case 5:
  4291                           
  4292                           
  4293                           ;main.c: 258: if(shiweiNum & 0x10)
  4294  0225  1E68               	btfss	_shiweiNum,4
  4295  0226  0008               	return
  4296                           
  4297                           ;main.c: 259: {
  4298                           ;main.c: 260: TRISB &= 0xFE;
  4299  0227  1005               	bcf	5,0	;volatile
  4300                           
  4301                           ;main.c: 261: TRISA &= 0xEF;
  4302  0228  1683               	bsf	3,5	;RP0=1, select bank1
  4303  0229  1205               	bcf	5,4	;volatile
  4304                           
  4305                           ;main.c: 262: RB0 = 1;
  4306  022A  1283               	bcf	3,5	;RP0=0, select bank0
  4307  022B  1406               	bsf	6,0	;volatile
  4308                           
  4309                           ;main.c: 263: RA4 = 0;
  4310  022C  1683               	bsf	3,5	;RP0=1, select bank1
  4311  022D  1206               	bcf	6,4	;volatile
  4312  022E  0008               	return
  4313  022F                     i1l720:	
  4314                           ;main.c: 266: case 6:
  4315                           
  4316                           
  4317                           ;main.c: 267: if(shiweiNum & 0x20)
  4318  022F  1EE8               	btfss	_shiweiNum,5
  4319  0230  0008               	return
  4320                           
  4321                           ;main.c: 268: {
  4322                           ;main.c: 269: TRISB &= 0xDF;
  4323  0231  1285               	bcf	5,5	;volatile
  4324                           
  4325                           ;main.c: 270: TRISA &= 0xEF;
  4326  0232  1683               	bsf	3,5	;RP0=1, select bank1
  4327  0233  1205               	bcf	5,4	;volatile
  4328                           
  4329                           ;main.c: 271: RB5 = 1;
  4330  0234  1283               	bcf	3,5	;RP0=0, select bank0
  4331  0235  1686               	bsf	6,5	;volatile
  4332                           
  4333                           ;main.c: 272: RA4 = 0;
  4334  0236  1683               	bsf	3,5	;RP0=1, select bank1
  4335  0237  1206               	bcf	6,4	;volatile
  4336  0238  0008               	return
  4337  0239                     i1l722:	
  4338                           ;main.c: 275: case 7:
  4339                           
  4340                           
  4341                           ;main.c: 276: if(shiweiNum & 0x40)
  4342  0239  1F68               	btfss	_shiweiNum,6
  4343  023A  0008               	return
  4344                           
  4345                           ;main.c: 277: {
  4346                           ;main.c: 278: TRISA &= 0xF7;
  4347  023B  1683               	bsf	3,5	;RP0=1, select bank1
  4348  023C  1185               	bcf	5,3	;volatile
  4349                           
  4350                           ;main.c: 279: TRISA &= 0xEF;
  4351  023D  1205               	bcf	5,4	;volatile
  4352                           
  4353                           ;main.c: 280: RA3 = 1;
  4354  023E  1586               	bsf	6,3	;volatile
  4355                           
  4356                           ;main.c: 281: RA4 = 0;
  4357  023F  1206               	bcf	6,4	;volatile
  4358  0240  0008               	return
  4359  0241                     i1l724:	
  4360                           ;main.c: 284: case 8:
  4361                           
  4362                           
  4363                           ;main.c: 285: if(geweiNum & 0x01)
  4364  0241  1C67               	btfss	_geweiNum,0
  4365  0242  0008               	return
  4366                           
  4367                           ;main.c: 286: {
  4368                           ;main.c: 287: TRISB &= 0xFD;
  4369  0243  1085               	bcf	5,1	;volatile
  4370                           
  4371                           ;main.c: 288: TRISB &= 0xFE;
  4372  0244  1005               	bcf	5,0	;volatile
  4373                           
  4374                           ;main.c: 289: RB0 = 1;
  4375  0245  1406               	bsf	6,0	;volatile
  4376                           
  4377                           ;main.c: 290: RB1 = 0;
  4378  0246  1086               	bcf	6,1	;volatile
  4379  0247  0008               	return
  4380  0248                     i1l726:	
  4381                           ;main.c: 293: case 9:
  4382                           
  4383                           
  4384                           ;main.c: 294: if(geweiNum & 0x02)
  4385  0248  1CE7               	btfss	_geweiNum,1
  4386  0249  0008               	return
  4387                           
  4388                           ;main.c: 295: {
  4389                           ;main.c: 296: TRISB &= 0xFD;
  4390  024A  1085               	bcf	5,1	;volatile
  4391                           
  4392                           ;main.c: 297: TRISB &= 0xFE;
  4393  024B  1005               	bcf	5,0	;volatile
  4394                           
  4395                           ;main.c: 298: RB1 = 1;
  4396  024C  1486               	bsf	6,1	;volatile
  4397                           
  4398                           ;main.c: 299: RB0 = 0;
  4399  024D  1006               	bcf	6,0	;volatile
  4400  024E  0008               	return
  4401  024F                     i1l728:	
  4402                           ;main.c: 302: case 10:
  4403                           
  4404                           
  4405                           ;main.c: 303: if(geweiNum & 0x04)
  4406  024F  1D67               	btfss	_geweiNum,2
  4407  0250  0008               	return
  4408                           
  4409                           ;main.c: 304: {
  4410                           ;main.c: 305: TRISB &= 0xFD;
  4411  0251  1085               	bcf	5,1	;volatile
  4412                           
  4413                           ;main.c: 306: TRISB &= 0xDF;
  4414  0252  1285               	bcf	5,5	;volatile
  4415                           
  4416                           ;main.c: 307: RB5 = 1;
  4417  0253  1686               	bsf	6,5	;volatile
  4418                           
  4419                           ;main.c: 308: RB1 = 0;
  4420  0254  1086               	bcf	6,1	;volatile
  4421  0255  0008               	return
  4422  0256                     i1l730:	
  4423                           ;main.c: 311: case 11:
  4424                           
  4425                           
  4426                           ;main.c: 312: if(geweiNum & 0x08)
  4427  0256  1DE7               	btfss	_geweiNum,3
  4428  0257  0008               	return
  4429                           
  4430                           ;main.c: 313: {
  4431                           ;main.c: 314: TRISB &= 0xFD;
  4432  0258  1085               	bcf	5,1	;volatile
  4433                           
  4434                           ;main.c: 315: TRISB &= 0xDF;
  4435  0259  1285               	bcf	5,5	;volatile
  4436                           
  4437                           ;main.c: 316: RB1 = 1;
  4438  025A  1486               	bsf	6,1	;volatile
  4439                           
  4440                           ;main.c: 317: RB5 = 0;
  4441  025B  1286               	bcf	6,5	;volatile
  4442  025C  0008               	return
  4443  025D                     i1l732:	
  4444                           ;main.c: 320: case 12:
  4445                           
  4446                           
  4447                           ;main.c: 321: if(geweiNum & 0x10)
  4448  025D  1E67               	btfss	_geweiNum,4
  4449  025E  0008               	return
  4450                           
  4451                           ;main.c: 322: {
  4452                           ;main.c: 323: TRISB &= 0xFD;
  4453  025F  1085               	bcf	5,1	;volatile
  4454                           
  4455                           ;main.c: 324: TRISA &= 0xF7;
  4456  0260  1683               	bsf	3,5	;RP0=1, select bank1
  4457  0261  1185               	bcf	5,3	;volatile
  4458                           
  4459                           ;main.c: 325: RA3 = 1;
  4460  0262  1586               	bsf	6,3	;volatile
  4461                           
  4462                           ;main.c: 326: RB1 = 0;
  4463  0263  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0264  1086               	bcf	6,1	;volatile
  4465  0265  0008               	return
  4466  0266                     i1l734:	
  4467                           ;main.c: 329: case 13:
  4468                           
  4469                           
  4470                           ;main.c: 330: if(geweiNum & 0x20)
  4471  0266  1EE7               	btfss	_geweiNum,5
  4472  0267  0008               	return
  4473                           
  4474                           ;main.c: 331: {
  4475                           ;main.c: 332: TRISB &= 0xFD;
  4476  0268  1085               	bcf	5,1	;volatile
  4477                           
  4478                           ;main.c: 333: TRISA &= 0xF7;
  4479  0269  1683               	bsf	3,5	;RP0=1, select bank1
  4480  026A  1185               	bcf	5,3	;volatile
  4481                           
  4482                           ;main.c: 334: RB1 = 1;
  4483  026B  1283               	bcf	3,5	;RP0=0, select bank0
  4484  026C  1486               	bsf	6,1	;volatile
  4485                           
  4486                           ;main.c: 335: RA3 = 0;
  4487  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4488  026E  1186               	bcf	6,3	;volatile
  4489  026F  0008               	return
  4490  0270                     i1l736:	
  4491                           ;main.c: 338: case 0:
  4492                           
  4493                           
  4494                           ;main.c: 339: if(geweiNum & 0x40)
  4495  0270  1F67               	btfss	_geweiNum,6
  4496  0271  0008               	return
  4497                           
  4498                           ;main.c: 340: {
  4499                           ;main.c: 341: TRISB &= 0xFD;
  4500  0272  1085               	bcf	5,1	;volatile
  4501                           
  4502                           ;main.c: 342: TRISA &= 0xEF;
  4503  0273  1683               	bsf	3,5	;RP0=1, select bank1
  4504  0274  1205               	bcf	5,4	;volatile
  4505                           
  4506                           ;main.c: 343: RB1 = 1;
  4507  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4508  0276  1486               	bsf	6,1	;volatile
  4509                           
  4510                           ;main.c: 344: RA4 = 0;
  4511  0277  1683               	bsf	3,5	;RP0=1, select bank1
  4512  0278  1206               	bcf	6,4	;volatile
  4513  0279  0008               	return
  4514  027A                     i1l2584:	
  4515                           
  4516                           ;main.c: 348: if(workStep > 0)
  4517  027A  087A               	movf	_workStep,w
  4518  027B  1903               	btfsc	3,2
  4519  027C  0008               	return
  4520                           
  4521                           ;main.c: 349: {
  4522                           ;main.c: 350: TRISB &= 0xFE;
  4523  027D  1005               	bcf	5,0	;volatile
  4524                           
  4525                           ;main.c: 351: TRISA &= 0xF7;
  4526  027E  1683               	bsf	3,5	;RP0=1, select bank1
  4527  027F  1185               	bcf	5,3	;volatile
  4528                           
  4529                           ;main.c: 352: RA3 = 1;
  4530  0280  1586               	bsf	6,3	;volatile
  4531                           
  4532                           ;main.c: 353: RB0 = 0;
  4533  0281  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0282  1006               	bcf	6,0	;volatile
  4535  0283  0008               	return
  4536  0284                     i1l2590:	
  4537  0284  084B               	movf	_ledCnt,w
  4538                           
  4539                           ; Switch size 1, requested type "space"
  4540                           ; Number of cases is 15, Range of values is 0 to 14
  4541                           ; switch strategies available:
  4542                           ; Name         Instructions Cycles
  4543                           ; direct_byte           21     6 (fixed)
  4544                           ; simple_byte           46    24 (average)
  4545                           ; jumptable            260     6 (fixed)
  4546                           ;	Chosen strategy is direct_byte
  4547  0285  0084               	movwf	4
  4548  0286  300F               	movlw	15
  4549  0287  0204               	subwf	4,w
  4550  0288  1803               	skipnc
  4551  0289  0008               	return
  4552  028A  3006               	movlw	high i1S3504
  4553  028B  008A               	movwf	10
  4554  028C  3050               	movlw	low i1S3504
  4555  028D  0704               	addwf	4,w
  4556  028E  0082               	movwf	2
  4557  028F  0008               	return
  4558  0290                     __end_of_ledShow:	
  4559  007E                     btemp	set	126	;btemp
  4560  007E                     wtemp0	set	126
  4561                           
  4562                           	psect	swtext1
  4563  0650                     __pswtext1:	
  4564  0650                     i1S3504:	
  4565  0650  2A70               	ljmp	i1l736
  4566  0651  2A03               	ljmp	i1l709
  4567  0652  2A0A               	ljmp	i1l712
  4568  0653  2A11               	ljmp	i1l714
  4569  0654  2A1B               	ljmp	i1l716
  4570  0655  2A25               	ljmp	i1l718
  4571  0656  2A2F               	ljmp	i1l720
  4572  0657  2A39               	ljmp	i1l722
  4573  0658  2A41               	ljmp	i1l724
  4574  0659  2A48               	ljmp	i1l726
  4575  065A  2A4F               	ljmp	i1l728
  4576  065B  2A56               	ljmp	i1l730
  4577  065C  2A5D               	ljmp	i1l732
  4578  065D  2A66               	ljmp	i1l734
  4579  065E  2A7A               	ljmp	i1l2584


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         58
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     17      74
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ctr8->___lwmod
    _ctr7->___lwmod
    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _ctr8->___lwmod
    _ctr7->___lwmod
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3895
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
                           _workCtr2
 ---------------------------------------------------------------------------------
 (1) _workCtr2                                             0     0      0    1244
                               _ctr7
                               _ctr8
                               _ctr9
 ---------------------------------------------------------------------------------
 (2) _ctr9                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ctr8                                                 0     0      0     622
                            ___lwmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _ctr7                                                 0     0      0     622
                            ___lwmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     622
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     630
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
                            _pwmInit
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            1     1      0     977
                                              4 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (5) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
     _pwmInit
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop
   _workCtr2
     _ctr7
       ___lwmod
       _pwmInit
       _pwmStop
     _ctr8
       ___lwmod
       _pwmInit
       _pwmStop
     _ctr9

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     11      4A       4       92.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      55       7        0.0%
DATA                 0      0      55       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 15 10:49:16 2025

            _protectFlag 004D                        pc 0002                       PL2 01CE  
                     PL4 0529                       PL6 0425                       PL8 01DD  
                     fsr 0004                      PL10 00FC                      PL12 056E  
                    PL14 063C                      PL16 01E6                      PL18 038E  
                    l821 044E                      l827 0463                      l691 039D  
                    l955 016F                      l949 0134                      l959 01B3  
                    _GIE 005F                      _RB0 0030                      _RA3 0433  
                    _RB1 0031                      _RA4 0434                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 066F                     l1226 05F2                     l2300 0667  
                   l2232 066F                     l2306 0676                     l3130 053C  
                   l2402 04DB                     l3204 011F                     l2412 04EE  
                   l3222 0159                     l3214 013F                     l3142 0554  
                   l2422 0504                     l2352 058B                     l2504 05EC  
                   l3400 0363                     l2416 04F8                     l3226 0163  
                   l3314 02B6                     l3138 054F                     l3146 0568  
                   l3228 016B                     l3332 02F0                     l3412 037A  
                   l3148 0569                     l3156 050B                     l3238 01B7  
                   l3190 0116                     l3326 02E3                     l2702 0088  
                   l2518 05FF                     l3262 05E2                     l3254 05CE  
                   l3166 0521                     l3430 03A5                     l3336 02F7  
                   l2712 00A4                     l2704 008A                     l3416 038B  
                   l3408 0372                     l3168 0522                     l3354 0329  
                   l3282 0487                     l2722 00B1                     l2650 0033  
                   l3188 0114                     l3348 0320                     l3356 032B  
                   l3284 0488                     l2724 00B3                     l2708 008E  
                   l2652 0035                     l2900 04BC                     l3372 05C5  
                   l3364 05BB                     l3460 03CC                     l3452 03BD  
                   l3198 011E                     l3294 049E                     l2742 00D7  
                   l2718 00AE                     l2638 0023                     l3454 03BE  
                   l3296 04A0                     l2736 00D2                     l2664 0048  
                   l2840 0445                     l3392 0351                     l3384 033E  
                   l2904 04C2                     l3368 05C0                     l3448 03B7  
                   l2762 00F9                     l2738 00D3                     l2690 006C  
                   l2682 0061                     l2674 0054                     l2746 00DE  
                   l2850 0456                     l2834 043E                     l2914 04CE  
                   l2922 04D7                     l3482 03EA                     l2692 006E  
                   l2668 004A                     l2908 04C8                     l2846 0451  
                   l2854 045A                     l2892 04B2                     l2896 04B6  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3235 0542                     u2525 00C6                     _PIE1 000E  
                   u3435 01A9                     u3605 02D5                     u2485 00A2  
                   u3455 01C0                     u3385 015F                     u3705 05B7  
                   u3395 0169                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     _RBIE 005B                     _RBIF 0058  
                   _PIR1 000D                     u3967 04A5                     u3977 02F5  
                   u3987 0330                     u3997 0110                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _ctr7 0554  
                   _ctr8 050B                     _ctr9 04DB                     _main 0393  
                   btemp 007E                     start 000C            ??_Init_System 0073  
                  ?_ctr7 0070                    ?_ctr8 0070                    ?_ctr9 0070  
                  ?_main 0070          __end_of___lbdiv 0601          __end_of___lbmod 05E6  
                  _T2CON 0013          __end_of___lwmod 0554                    i1l720 022F  
                  i1l712 020A                    i1l730 0256                    i1l722 0239  
                  i1l714 0211                    i1l732 025D                    i1l724 0241  
                  i1l716 021B                    i1l709 0203                    i1l734 0266  
                  i1l726 0248                    i1l718 0225                    i1l736 0270  
                  i1l728 024F                    i1l686 05A5            _countHalfFull 004E  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 00FC          __end_of_ledShow 0290          __end_of_keyRead 0591  
                  pclath 000A          __end_of_pwmInit 0650          __end_of_pwmStop 0676  
                  status 0003                    wtemp0 007E          __end_of_workCtr 04DB  
        ___lbdiv@divisor 0073          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_ctr7 056E             __end_of_ctr8 0529             __end_of_ctr9 050B  
           __end_of_main 03EC     __size_of_chrgPwmInit 000D     __size_of_chrgPwmStop 0007  
                 ??_ctr7 0077                   ??_ctr8 0077                   ??_ctr9 0073  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 061B  
                 _ADCON0 0095                   _ADCON1 0096                   i1S3504 0650  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l3032 05A2  
                 i1l2590 0284                   i1l2584 027A                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B                   _PWMD3L 009C  
           ??_ADC_Sample 0056             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 03EC                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004B                   _ledCtr 0333                ??___lwmod 0077  
                 _keyCtr 042E                ??_chrgCtr 0073                   _pwStep 0045  
                 _result 0034                ??_ledShow 0070         __end_of_numArray 062F  
              ??_keyRead 0073       __end_of_ADC_Sample 01CE                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0073  
       ___lbdiv@dividend 0074         __end_of_workCtr2 05CA               _batADValue 002E  
        ___lbmod@divisor 0073  __end_of__initialization 0016          ___lbmod@counter 0057  
        _workOverOutTime 004C           __pcstackCOMMON 0070       __size_of_checkOutA 003D  
            _Init_System 0601               __end_ofPL2 01DD               __end_ofPL4 0530  
             __end_ofPL6 042E               __end_ofPL8 01E6         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 05AE               _checkBatAD 0290               __pbssBANK0 0020  
           _chrgFullFlag 0050              ?_Sleep_Mode 0070               __pmaintext 0393  
             __pintentry 0004                  ?_ledCtr 0070             _chrgWaitTime 003D  
                ?_keyCtr 0070               _ledCntTime 003B                  _AD_Init 0667  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D        __end_of_checkOutA 04A8  
             __stringtab 061B                  _IntFlag 0052               _intCount10 004F  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0063          ADC_Sample@admin 0061  
        ADC_Sample@adsum 005D                  ___lbdiv 05E6                  ___lbmod 05CA  
                _addTime 003F                  ___lwmod 0530          __size_of_ledCtr 005B  
        __size_of_keyCtr 003D                ?_workCtr2 0070                  _chrgCtr 0018  
             _lowBatFlag 003A                  __ptext1 05AE                  __ptext2 04DB  
                __ptext3 050B                  __ptext4 0554                  __ptext5 0530  
                __ptext6 04A8                  __ptext7 0333                  __ptext8 05CA  
                __ptext9 05E6                  _ledShow 01EB                  _curDuty 0036  
                _count1s 0053                  _count8s 0026                  _maxDuty 0048  
                _keyRead 0573      __size_of_Sleep_Mode 0039                  _pwmInit 0640  
                _subTime 003E              ?_checkBatAD 0070                  _pwmStop 066F  
                clrloop0 0660                  _workCtr 04A8               _outADValue 0030  
   end_of_initialization 0016            _longPressFlag 0049            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073               ??_workCtr2 0077         ___lbmod@dividend 0056  
            ___lbmod@rem 0058      __size_of_checkBatAD 00A3             ?_Init_System 0070  
         __end_of_ledCtr 038E           __end_of_keyCtr 046B      __end_of_chrgPwmInit 063C  
    __end_of_chrgPwmStop 067D              __end_ofPL10 0102              __end_ofPL12 0573  
            __end_ofPL14 0640              __end_ofPL16 01EB              __end_ofPL18 0393  
    start_initialization 000D                _Isr_Timer 0591             ??_Sleep_Mode 0073  
               ??_ledCtr 0077        ADC_Sample@ad_temp 0065                 ??_keyCtr 0074  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 0056       __end_of_Sleep_Mode 0425               ?_Isr_Timer 0070  
              _checkOutA 046B                __pnvBANK0 0067              _chrgMaxDuty 003C  
              _chrgMaxAD 0041              _chrgPwmFlag 0038              _chrgPwmInit 062F  
               ?___lbdiv 0073                 ?___lbmod 0073              _chrgPwmStop 0676  
               ?___lwmod 0073                 ?_chrgCtr 0070                __pstrings 061B  
              __pswtext1 0650                _count900s 0024                 ?_ledShow 0070  
               ?_keyRead 0070        __size_of_workCtr2 001C                _firstTime 0069  
         ADC_Sample@adch 005B                 ?_pwmInit 0070                _fullCount 002A  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 0040  
               ?_workCtr 0070              ADC_Sample@i 005C              ADC_Sample@j 005A  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 065F  
              _prePwStep 0079              _reChrgCount 0044                _sleepTime 0039  
              _shiweiNum 0068       __end_of_checkBatAD 0333              __stringbase 0620  
   __size_of_Init_System 001A                _startTime 0047         __size_of_AD_Init 0008  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0102  
            _maxWorkTime 0020         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwmod 0024       __end_of__stringtab 0621         __size_of_chrgCtr 00E4  
       __size_of_ledShow 00A5         __size_of_keyRead 001E                 _adresult 0077  
               _chrgFlag 0051                 _chrgMode 0042                 __ptext10 042E  
               __ptext11 0640                 __ptext20 03EC                 __ptext12 0573  
               __ptext21 0601                 __ptext13 0018                 __ptext22 0667  
               __ptext14 066F                 __ptext23 0591                 __ptext15 0676  
               __ptext24 01EB                 __ptext16 062F                 __ptext17 046B  
               __ptext18 0290                 __ptext19 0102         __size_of_pwmInit 0010  
       __size_of_pwmStop 0007                 _geweiNum 0067                 _count50s 002C  
       __size_of_workCtr 0033                 _keyCount 004A                 _intCount 0054  
          __size_of_ctr7 001A            __size_of_ctr8 001E            __size_of_ctr9 0030  
          __size_of_main 0059              ??_checkOutA 0074                 _numArray 0621  
               _test_adc 0055                 _power_ad 0032                 _workCtr2 05AE  
               _workTime 0022                 _workStep 007A             _overChrgTime 0046  
           _motorPwmFlag 0037                 intlevel1 0000         ___lwmod@dividend 0075  
            ?_ADC_Sample 0073                stringcode 061B             ?_chrgPwmInit 0070  
           _overWorkTime 0028             ?_chrgPwmStop 0070              _showBatTime 0043  
             _OPTION_REG 0001          ___lwmod@divisor 0073          ___lwmod@counter 0056  
               stringdir 061B                 stringtab 061B  
