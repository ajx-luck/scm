

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 12 15:14:19 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	nvBANK0
    73  006A                     __pnvBANK0:	
    74  006A                     _firstTime:	
    75  006A                     	ds	1
    76  001F                     _PWM01DT	set	31
    77  001E                     _PWMD01H	set	30
    78  001D                     _PWMCON2	set	29
    79  001A                     _PWMD1L	set	26
    80  0019                     _PWMD0L	set	25
    81  0018                     _PWMTH	set	24
    82  0017                     _PWMTL	set	23
    83  0016                     _PWMCON1	set	22
    84  0015                     _PWMCON0	set	21
    85  0014                     _OSCCON	set	20
    86  0013                     _T2CON	set	19
    87  0011                     _PR2	set	17
    88  000E                     _PIE1	set	14
    89  000D                     _PIR1	set	13
    90  000B                     _INTCON	set	11
    91  0009                     _IOCB	set	9
    92  0008                     _WPUB	set	8
    93  0006                     _PORTB	set	6
    94  0005                     _TRISB	set	5
    95  0001                     _OPTION_REG	set	1
    96  0071                     _TMR2IE	set	113
    97  0073                     _RAIE	set	115
    98  0069                     _TMR2IF	set	105
    99  006B                     _RAIF	set	107
   100  0058                     _RBIF	set	88
   101  005B                     _RBIE	set	91
   102  005E                     _PEIE	set	94
   103  005F                     _GIE	set	95
   104  0030                     _RB0	set	48
   105  0031                     _RB1	set	49
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0093                     _ANSEL0	set	147
   111  0089                     _IOCA	set	137
   112  0088                     _WPUA	set	136
   113  0087                     _WPDA	set	135
   114  0086                     _PORTA	set	134
   115  0085                     _TRISA	set	133
   116  04B2                     _LDO_EN	set	1202
   117  04B6                     _CHS4	set	1206
   118  04A9                     _GODONE	set	1193
   119                           
   120                           	psect	cinit
   121  000D                     start_initialization:	
   122                           ; #config settings
   123                           
   124  000D                     __initialization:	
   125                           
   126                           ; Clear objects allocated to COMMON
   127  000D  3077               	movlw	low __pbssCOMMON
   128  000E  0084               	movwf	4
   129  000F  307B               	movlw	low (__pbssCOMMON+4)
   130  0010  25BA               	fcall	clear_ram0
   131  0011  3020               	movlw	low __pbssBANK0
   132                           
   133                           ; Clear objects allocated to BANK0
   134  0012  1383               	bcf	3,7	;select IRP bank0
   135  0013  0084               	movwf	4
   136  0014  3057               	movlw	low (__pbssBANK0+55)
   137  0015  25BA               	fcall	clear_ram0
   138  0016                     end_of_initialization:	
   139                           ;End of C runtime variable initialization code
   140                           
   141  0016                     __end_of__initialization:	
   142  0016  0183               	clrf	3
   143  0017  2C4F               	ljmp	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMMON
   146  0077                     __pbssCOMMON:	
   147  0077                     _prePwStep:	
   148  0077                     	ds	1
   149  0078                     _ledStep:	
   150  0078                     	ds	1
   151  0079                     _workStep:	
   152  0079                     	ds	1
   153  007A                     _chrgFlag:	
   154  007A                     	ds	1
   155                           
   156                           	psect	bssBANK0
   157  0020                     __pbssBANK0:	
   158  0020                     _count900s:	
   159  0020                     	ds	2
   160  0022                     _count8s:	
   161  0022                     	ds	2
   162  0024                     _overWorkTime:	
   163  0024                     	ds	2
   164  0026                     _count5s:	
   165  0026                     	ds	2
   166  0028                     _fullCount:	
   167  0028                     	ds	2
   168  002A                     _count50s:	
   169  002A                     	ds	2
   170  002C                     _batADValue:	
   171  002C                     	ds	2
   172  002E                     _outADValue:	
   173  002E                     	ds	2
   174  0030                     _power_ad:	
   175  0030                     	ds	2
   176  0032                     _result:	
   177  0032                     	ds	2
   178  0034                     _adresult:	
   179  0034                     	ds	2
   180  0036                     _sleepTime:	
   181  0036                     	ds	1
   182  0037                     _lowBatFlag:	
   183  0037                     	ds	1
   184  0038                     _preLedStep:	
   185  0038                     	ds	1
   186  0039                     _ledCntTime:	
   187  0039                     	ds	1
   188  003A                     _chrgMaxDuty:	
   189  003A                     	ds	1
   190  003B                     _chrgWaitTime:	
   191  003B                     	ds	1
   192  003C                     _subTime:	
   193  003C                     	ds	1
   194  003D                     _addTime:	
   195  003D                     	ds	1
   196  003E                     _lockCount:	
   197  003E                     	ds	1
   198  003F                     _chrgMaxAD:	
   199  003F                     	ds	1
   200  0040                     _chrgMode:	
   201  0040                     	ds	1
   202  0041                     _showBatTime:	
   203  0041                     	ds	1
   204  0042                     _lockLedStep:	
   205  0042                     	ds	1
   206  0043                     _reChrgCount:	
   207  0043                     	ds	1
   208  0044                     _pwStep:	
   209  0044                     	ds	1
   210  0045                     _overChrgTime:	
   211  0045                     	ds	1
   212  0046                     _startTime:	
   213  0046                     	ds	1
   214  0047                     _tempDuty:	
   215  0047                     	ds	1
   216  0048                     _addPowerCount:	
   217  0048                     	ds	1
   218  0049                     _overCount:	
   219  0049                     	ds	1
   220  004A                     _maxDuty:	
   221  004A                     	ds	1
   222  004B                     _longPressFlag:	
   223  004B                     	ds	1
   224  004C                     _keyCount:	
   225  004C                     	ds	1
   226  004D                     _ledCnt:	
   227  004D                     	ds	1
   228  004E                     _workOverOutTime:	
   229  004E                     	ds	1
   230  004F                     _protectFlag:	
   231  004F                     	ds	1
   232  0050                     _countHalfFull:	
   233  0050                     	ds	1
   234  0051                     _intCount10:	
   235  0051                     	ds	1
   236  0052                     _chrgFullFlag:	
   237  0052                     	ds	1
   238  0053                     _IntFlag:	
   239  0053                     	ds	1
   240  0054                     _count1s:	
   241  0054                     	ds	1
   242  0055                     _intCount:	
   243  0055                     	ds	1
   244  0056                     _test_adc:	
   245  0056                     	ds	1
   246                           
   247                           	psect	clrtext
   248  05BA                     clear_ram0:	
   249                           ;	Called with FSR containing the base address, and
   250                           ;	W with the last address+1
   251                           
   252  05BA  0064               	clrwdt	;clear the watchdog before getting into this loop
   253  05BB                     clrloop0:	
   254  05BB  0180               	clrf	0	;clear RAM location pointed to by FSR
   255  05BC  0A84               	incf	4,f	;increment pointer
   256  05BD  0604               	xorwf	4,w	;XOR with final address
   257  05BE  1903               	btfsc	3,2	;have we reached the end yet?
   258  05BF  3400               	retlw	0	;all done for this memory range, return
   259  05C0  0604               	xorwf	4,w	;XOR again to restore value
   260  05C1  2DBB               	goto	clrloop0	;do the next byte
   261                           
   262                           	psect	cstackCOMMON
   263  0070                     __pcstackCOMMON:	
   264  0070                     ?_ledShow:	
   265  0070                     ??_ledShow:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Init_System:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_AD_Init:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_checkOutA:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_chrgCtr:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_checkBatAD:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_keyCtr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_workCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_ledCtr:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_Sleep_Mode:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_chrgPwmStop:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_chrgPwmInit:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_pwmInit:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_pwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Isr_Timer:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ??_Isr_Timer:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_keyRead:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321  0070                     	ds	3
   322  0073                     ??_Init_System:	
   323  0073                     ??_AD_Init:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ??_workCtr:	
   327                           ; 1 bytes @ 0x3
   328                           
   329  0073                     ??_Sleep_Mode:	
   330                           ; 1 bytes @ 0x3
   331                           
   332  0073                     ??_chrgPwmStop:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_chrgPwmInit:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_pwmInit:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_pwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ?_ADC_Sample:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_keyRead:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ?___lbdiv:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?___lbmod:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ?___lwmod:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     keyRead@keyStatus:	
   360                           ; 2 bytes @ 0x3
   361                           
   362  0073                     ADC_Sample@adldo:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ___lbdiv@divisor:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ___lbmod@divisor:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ___lwmod@divisor:	
   372                           ; 1 bytes @ 0x3
   373                           
   374                           
   375                           ; 2 bytes @ 0x3
   376  0073                     	ds	1
   377  0074                     ??_checkOutA:	
   378  0074                     ??_checkBatAD:	
   379                           ; 1 bytes @ 0x4
   380                           
   381  0074                     ??_keyCtr:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0074                     ??___lbdiv:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0074                     ??___lbmod:	
   388                           ; 1 bytes @ 0x4
   389                           
   390  0074                     keyCtr@kclick:	
   391                           ; 1 bytes @ 0x4
   392                           
   393  0074                     ___lbdiv@dividend:	
   394                           ; 1 bytes @ 0x4
   395                           
   396                           
   397                           ; 1 bytes @ 0x4
   398  0074                     	ds	1
   399  0075                     ___lbdiv@counter:	
   400  0075                     ___lwmod@dividend:	
   401                           ; 1 bytes @ 0x5
   402                           
   403                           
   404                           ; 2 bytes @ 0x5
   405  0075                     	ds	1
   406  0076                     ___lbdiv@quotient:	
   407                           
   408                           ; 1 bytes @ 0x6
   409  0076                     	ds	1
   410  0077                     ??_ledCtr:	
   411  0077                     ??_main:	
   412                           ; 1 bytes @ 0x7
   413                           
   414  0077                     ??___lwmod:	
   415                           ; 1 bytes @ 0x7
   416                           
   417                           
   418                           	psect	cstackBANK0
   419  0057                     __pcstackBANK0:	
   420                           ; 1 bytes @ 0x7
   421                           
   422  0057                     ??_chrgCtr:	
   423  0057                     ??_ADC_Sample:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0057                     ___lbmod@dividend:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0057                     ___lwmod@counter:	
   430                           ; 1 bytes @ 0x0
   431                           
   432                           
   433                           ; 1 bytes @ 0x0
   434  0057                     	ds	1
   435  0058                     ___lbmod@counter:	
   436                           
   437                           ; 1 bytes @ 0x1
   438  0058                     	ds	1
   439  0059                     ___lbmod@rem:	
   440                           
   441                           ; 1 bytes @ 0x2
   442  0059                     	ds	2
   443  005B                     ADC_Sample@j:	
   444                           
   445                           ; 1 bytes @ 0x4
   446  005B                     	ds	1
   447  005C                     ADC_Sample@adch:	
   448                           
   449                           ; 1 bytes @ 0x5
   450  005C                     	ds	1
   451  005D                     ADC_Sample@i:	
   452                           
   453                           ; 1 bytes @ 0x6
   454  005D                     	ds	1
   455  005E                     ADC_Sample@adsum:	
   456                           
   457                           ; 4 bytes @ 0x7
   458  005E                     	ds	4
   459  0062                     ADC_Sample@admin:	
   460                           
   461                           ; 2 bytes @ 0xB
   462  0062                     	ds	2
   463  0064                     ADC_Sample@admax:	
   464                           
   465                           ; 2 bytes @ 0xD
   466  0064                     	ds	2
   467  0066                     ADC_Sample@ad_temp:	
   468                           
   469                           ; 2 bytes @ 0xF
   470  0066                     	ds	3
   471  0069                     checkOutA@maxAout:	
   472                           
   473                           ; 1 bytes @ 0x12
   474  0069                     	ds	1
   475                           
   476                           	psect	maintext
   477  044F                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 100/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1
   497 ;;      Params:         0       0       0
   498 ;;      Locals:         0       0       0
   499 ;;      Temps:          0       0       0
   500 ;;      Totals:         0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels required when called:    4
   503 ;; This function calls:
   504 ;;		_AD_Init
   505 ;;		_Init_System
   506 ;;		_Sleep_Mode
   507 ;;		_checkBatAD
   508 ;;		_checkOutA
   509 ;;		_chrgCtr
   510 ;;		_keyCtr
   511 ;;		_ledCtr
   512 ;;		_workCtr
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           
   519                           ;psect for function _main
   520  044F                     _main:	
   521                           
   522                           ;main.c: 126: Init_System();
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   526  044F  2519               	fcall	_Init_System
   527                           
   528                           ;main.c: 127: AD_Init();
   529  0450  25CA               	fcall	_AD_Init
   530                           
   531                           ;main.c: 128: firstTime = 100;
   532  0451  3064               	movlw	100
   533  0452  1283               	bcf	3,5	;RP0=0, select bank0
   534  0453  00EA               	movwf	_firstTime
   535  0454                     l661:	
   536                           ;main.c: 129: while (1)
   537                           
   538  0454  0064               	clrwdt	;# 
   539                           
   540                           ;main.c: 132: if(intCount10 > 10)
   541  0455  300B               	movlw	11
   542  0456  1283               	bcf	3,5	;RP0=0, select bank0
   543  0457  0251               	subwf	_intCount10,w
   544  0458  1C03               	skipc
   545  0459  2C5C               	goto	l3487
   546                           
   547                           ;main.c: 133: {
   548                           ;main.c: 134: intCount10 = 0;
   549  045A  01D1               	clrf	_intCount10
   550                           
   551                           ;main.c: 135: checkOutA();
   552  045B  2205               	fcall	_checkOutA
   553  045C                     l3487:	
   554                           
   555                           ;main.c: 136: }
   556                           ;main.c: 137: if(!IntFlag)
   557  045C  1283               	bcf	3,5	;RP0=0, select bank0
   558  045D  0853               	movf	_IntFlag,w
   559  045E  1903               	btfsc	3,2
   560  045F  2C54               	goto	l661
   561                           
   562                           ;main.c: 139: IntFlag = 0;
   563  0460  01D3               	clrf	_IntFlag
   564                           
   565                           ;main.c: 140: chrgCtr();
   566  0461  2018               	fcall	_chrgCtr
   567                           
   568                           ;main.c: 141: checkBatAD();
   569  0462  22B5               	fcall	_checkBatAD
   570                           
   571                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   572  0463  087A               	movf	_chrgFlag,w
   573  0464  1D03               	btfss	3,2
   574  0465  2C6B               	goto	l665
   575  0466  1283               	bcf	3,5	;RP0=0, select bank0
   576  0467  0837               	movf	_lowBatFlag,w
   577  0468  1D03               	btfss	3,2
   578  0469  2C6B               	goto	l665
   579                           
   580                           ;main.c: 143: {
   581                           ;main.c: 144: keyCtr();
   582  046A  24C4               	fcall	_keyCtr
   583  046B                     l665:	
   584                           
   585                           ;main.c: 145: }
   586                           ;main.c: 146: workCtr();
   587  046B  248A               	fcall	_workCtr
   588                           
   589                           ;main.c: 147: ledCtr();
   590  046C  2360               	fcall	_ledCtr
   591                           
   592                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   593  046D  087A               	movf	_chrgFlag,w
   594  046E  1D03               	btfss	3,2
   595  046F  2C88               	goto	l3521
   596  0470  0879               	movf	_workStep,w
   597  0471  1D03               	btfss	3,2
   598  0472  2C88               	goto	l3521
   599  0473  084C               	movf	_keyCount,w
   600  0474  1D03               	btfss	3,2
   601  0475  2C88               	goto	l3521
   602  0476  086A               	movf	_firstTime,w
   603  0477  1D03               	btfss	3,2
   604  0478  2C88               	goto	l3521
   605  0479  0841               	movf	_showBatTime,w
   606  047A  1D03               	btfss	3,2
   607  047B  2C88               	goto	l3521
   608  047C  0824               	movf	_overWorkTime,w
   609  047D  0425               	iorwf	_overWorkTime+1,w
   610  047E  1D03               	btfss	3,2
   611  047F  2C88               	goto	l3521
   612                           
   613                           ;main.c: 149: {
   614                           ;main.c: 150: if(++sleepTime >= 200)
   615  0480  30C8               	movlw	200
   616  0481  0AB6               	incf	_sleepTime,f
   617  0482  0236               	subwf	_sleepTime,w
   618  0483  1C03               	skipc
   619  0484  2C54               	goto	l661
   620                           
   621                           ;main.c: 151: {
   622                           ;main.c: 152: sleepTime = 0;
   623  0485  01B6               	clrf	_sleepTime
   624                           
   625                           ;main.c: 153: Sleep_Mode();
   626  0486  2411               	fcall	_Sleep_Mode
   627  0487  2C54               	goto	l661
   628  0488                     l3521:	
   629                           
   630                           ;main.c: 156: else
   631                           ;main.c: 157: {
   632                           ;main.c: 158: sleepTime = 0;
   633  0488  01B6               	clrf	_sleepTime
   634  0489  2C54               	goto	l661
   635  048A                     __end_of_main:	
   636                           
   637                           	psect	text1
   638  048A                     __ptext1:	
   639 ;; *************** function _workCtr *****************
   640 ;; Defined at:
   641 ;;		line 539 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;		None
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0, pclath, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 100/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1
   655 ;;      Params:         0       0       0
   656 ;;      Locals:         0       0       0
   657 ;;      Temps:          0       0       0
   658 ;;      Totals:         0       0       0
   659 ;;Total ram usage:        0 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    3
   662 ;; This function calls:
   663 ;;		_pwmInit
   664 ;;		_pwmStop
   665 ;; This function is called by:
   666 ;;		_main
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _workCtr
   672  048A                     _workCtr:	
   673                           
   674                           ;main.c: 542: if(startTime > 0)
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   678  048A  1283               	bcf	3,5	;RP0=0, select bank0
   679  048B  0846               	movf	_startTime,w
   680  048C  1D03               	btfss	3,2
   681                           
   682                           ;main.c: 543: {
   683                           ;main.c: 544: startTime--;
   684  048D  03C6               	decf	_startTime,f
   685                           
   686                           ;main.c: 545: }
   687                           ;main.c: 546: if(workStep > 0)
   688  048E  0879               	movf	_workStep,w
   689  048F  1903               	btfsc	3,2
   690  0490  2CC0               	goto	l2797
   691                           
   692                           ;main.c: 547: {
   693                           ;main.c: 548: if((PWMCON0 & 0x02) == 0)
   694  0491  1895               	btfsc	21,1	;volatile
   695  0492  2C94               	goto	l2777
   696                           
   697                           ;main.c: 549: {
   698                           ;main.c: 550: pwmInit();
   699  0493  25C2               	fcall	_pwmInit
   700  0494                     l2777:	
   701                           
   702                           ;main.c: 551: }
   703                           ;main.c: 552: maxDuty = 43 + (workStep*2);
   704  0494  1003               	clrc
   705  0495  0D79               	rlf	_workStep,w
   706  0496  3E2B               	addlw	43
   707  0497  00CA               	movwf	_maxDuty
   708                           
   709                           ;main.c: 553: if(overCount >= 5)
   710  0498  3005               	movlw	5
   711  0499  0249               	subwf	_overCount,w
   712  049A  1C03               	skipc
   713  049B  2CB0               	goto	l2789
   714                           
   715                           ;main.c: 554: {
   716                           ;main.c: 555: if(++count5s > 500)
   717  049C  0AA6               	incf	_count5s,f
   718  049D  1903               	skipnz
   719  049E  0AA7               	incf	_count5s+1,f
   720  049F  3001               	movlw	1
   721  04A0  0227               	subwf	_count5s+1,w
   722  04A1  30F5               	movlw	245
   723  04A2  1903               	skipnz
   724  04A3  0226               	subwf	_count5s,w
   725  04A4  1C03               	skipc
   726  04A5  2CB2               	goto	l2791
   727  04A6  30E8               	movlw	232
   728                           
   729                           ;main.c: 556: {
   730                           ;main.c: 557: count5s = 0;
   731  04A7  01A6               	clrf	_count5s
   732  04A8  01A7               	clrf	_count5s+1
   733                           
   734                           ;main.c: 558: overWorkTime = 1000;
   735  04A9  00A4               	movwf	_overWorkTime
   736  04AA  3003               	movlw	3
   737  04AB  00A5               	movwf	_overWorkTime+1
   738                           
   739                           ;main.c: 559: preLedStep = workStep;
   740  04AC  0879               	movf	_workStep,w
   741  04AD  00B8               	movwf	_preLedStep
   742                           
   743                           ;main.c: 560: workStep = 0;
   744  04AE  01F9               	clrf	_workStep
   745  04AF  2CB2               	goto	l2791
   746  04B0                     l2789:	
   747                           
   748                           ;main.c: 564: else
   749                           ;main.c: 565: {
   750                           ;main.c: 566: count5s = 0;
   751  04B0  01A6               	clrf	_count5s
   752  04B1  01A7               	clrf	_count5s+1
   753  04B2                     l2791:	
   754                           
   755                           ;main.c: 567: }
   756                           ;main.c: 568: if(count1s == 0 && ++count900s >= 900)
   757  04B2  0854               	movf	_count1s,w
   758  04B3  1D03               	btfss	3,2
   759  04B4  0008               	return
   760  04B5  0AA0               	incf	_count900s,f
   761  04B6  1903               	skipnz
   762  04B7  0AA1               	incf	_count900s+1,f
   763  04B8  3003               	movlw	3
   764  04B9  0221               	subwf	_count900s+1,w
   765  04BA  3084               	movlw	132
   766  04BB  1903               	skipnz
   767  04BC  0220               	subwf	_count900s,w
   768  04BD  1803               	btfsc	3,0
   769                           
   770                           ;main.c: 569: {
   771                           ;main.c: 570: workStep = 0;
   772  04BE  01F9               	clrf	_workStep
   773  04BF  0008               	return
   774  04C0                     l2797:	
   775                           
   776                           ;main.c: 573: else
   777                           ;main.c: 574: {
   778                           ;main.c: 575: pwmStop();
   779  04C0  25D7               	fcall	_pwmStop
   780                           
   781                           ;main.c: 576: count900s = 0;
   782  04C1  01A0               	clrf	_count900s
   783  04C2  01A1               	clrf	_count900s+1
   784  04C3  0008               	return
   785  04C4                     __end_of_workCtr:	
   786                           
   787                           	psect	text2
   788  05D7                     __ptext2:	
   789 ;; *************** function _pwmStop *****************
   790 ;; Defined at:
   791 ;;		line 925 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		None
   800 ;; Tracked objects:
   801 ;;		On entry : 100/0
   802 ;;		On exit  : 100/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1
   805 ;;      Params:         0       0       0
   806 ;;      Locals:         0       0       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         0       0       0
   809 ;;Total ram usage:        0 bytes
   810 ;; Hardware stack levels used:    1
   811 ;; Hardware stack levels required when called:    2
   812 ;; This function calls:
   813 ;;		Nothing
   814 ;; This function is called by:
   815 ;;		_workCtr
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _pwmStop
   821  05D7                     _pwmStop:	
   822                           
   823                           ;main.c: 927: PWMCON0 &= 0XFD;
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _pwmStop: []
   827  05D7  1095               	bcf	21,1	;volatile
   828                           
   829                           ;main.c: 928: RB1 = 0;
   830  05D8  1086               	bcf	6,1	;volatile
   831  05D9  0008               	return
   832  05DA                     __end_of_pwmStop:	
   833                           
   834                           	psect	text3
   835  05C2                     __ptext3:	
   836 ;; *************** function _pwmInit *****************
   837 ;; Defined at:
   838 ;;		line 910 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2
   847 ;; Tracked objects:
   848 ;;		On entry : 100/0
   849 ;;		On exit  : 100/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1
   852 ;;      Params:         0       0       0
   853 ;;      Locals:         0       0       0
   854 ;;      Temps:          0       0       0
   855 ;;      Totals:         0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    2
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_workCtr
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _pwmInit
   868  05C2                     _pwmInit:	
   869                           
   870                           ;main.c: 912: PWMCON1 = 0B00000000;
   871                           
   872                           ;incstack = 0
   873                           ; Regs used in _pwmInit: [wreg+status,2]
   874                           
   875                           ;main.c: 913: PWMTH = 0X00;
   876                           
   877                           ;main.c: 914: PWMTL = 100;
   878                           
   879                           ;main.c: 917: PWMD01H = 0;
   880  05C2  25B4               	fcall	PL8	;call to abstracted procedure
   881                           
   882                           ;main.c: 918: PWMD1L = 50;
   883  05C3  3032               	movlw	50
   884  05C4  009A               	movwf	26	;volatile
   885                           
   886                           ;main.c: 919: PWM01DT = 0X00;
   887  05C5  019F               	clrf	31	;volatile
   888                           
   889                           ;main.c: 921: PWMCON0 = 0X62;
   890  05C6  3062               	movlw	98
   891  05C7  0095               	movwf	21	;volatile
   892                           
   893                           ;main.c: 922: PWMCON2 =0X00;
   894  05C8  019D               	clrf	29	;volatile
   895  05C9  0008               	return
   896  05CA                     __end_of_pwmInit:	
   897                           
   898                           	psect	text4
   899  0360                     __ptext4:	
   900 ;; *************** function _ledCtr *****************
   901 ;; Defined at:
   902 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0, pclath, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 100/0
   913 ;;		On exit  : 100/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         0       0       0
   917 ;;      Locals:         0       0       0
   918 ;;      Temps:          0       0       0
   919 ;;      Totals:         0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    3
   923 ;; This function calls:
   924 ;;		___lbdiv
   925 ;;		___lbmod
   926 ;;		___lwmod
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           
   933                           ;psect for function _ledCtr
   934  0360                     _ledCtr:	
   935                           
   936                           ;main.c: 233: if(firstTime > 0)
   937                           
   938                           ;incstack = 0
   939                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   940  0360  086A               	movf	_firstTime,w
   941  0361  1903               	btfsc	3,2
   942  0362  2B6D               	goto	l3435
   943  0363  3006               	movlw	6
   944                           
   945                           ;main.c: 234: {
   946                           ;main.c: 235: firstTime--;
   947  0364  03EA               	decf	_firstTime,f
   948                           
   949                           ;main.c: 236: ledStep = 6;
   950  0365  00F8               	movwf	_ledStep
   951                           
   952                           ;main.c: 237: if(prePwStep < pwStep)
   953  0366  0844               	movf	_pwStep,w
   954  0367  0277               	subwf	_prePwStep,w
   955  0368  1803               	skipnc
   956  0369  0008               	return
   957                           
   958                           ;main.c: 238: {
   959                           ;main.c: 239: prePwStep = pwStep;
   960  036A  0844               	movf	_pwStep,w
   961  036B  00F7               	movwf	_prePwStep
   962  036C  0008               	return
   963  036D                     l3435:	
   964                           
   965                           ;main.c: 242: else if(overWorkTime > 0)
   966  036D  0824               	movf	_overWorkTime,w
   967  036E  0425               	iorwf	_overWorkTime+1,w
   968  036F  1903               	btfsc	3,2
   969  0370  2B8B               	goto	l3445
   970                           
   971                           ;main.c: 243: {
   972                           ;main.c: 244: overWorkTime--;
   973  0371  3001               	movlw	1
   974  0372  02A4               	subwf	_overWorkTime,f
   975  0373  3000               	movlw	0
   976  0374  1C03               	skipc
   977  0375  03A5               	decf	_overWorkTime+1,f
   978  0376  02A5               	subwf	_overWorkTime+1,f
   979                           
   980                           ;main.c: 245: if(overWorkTime % 40 < 20)
   981  0377  3028               	movlw	40
   982  0378  00F3               	movwf	___lwmod@divisor
   983  0379  01F4               	clrf	___lwmod@divisor+1
   984  037A  0825               	movf	_overWorkTime+1,w
   985  037B  00F6               	movwf	___lwmod@dividend+1
   986  037C  0824               	movf	_overWorkTime,w
   987  037D  00F5               	movwf	___lwmod@dividend
   988  037E  24F5               	fcall	___lwmod
   989  037F  3000               	movlw	0
   990  0380  0274               	subwf	?___lwmod+1,w
   991  0381  3014               	movlw	20
   992  0382  1903               	skipnz
   993  0383  0273               	subwf	?___lwmod,w
   994  0384  1803               	skipnc
   995  0385  2B89               	goto	l3443
   996                           
   997                           ;main.c: 246: {
   998                           ;main.c: 247: ledStep = preLedStep;
   999  0386  0838               	movf	_preLedStep,w
  1000  0387  00F8               	movwf	_ledStep
  1001                           
  1002                           ;main.c: 248: }
  1003  0388  0008               	return
  1004  0389                     l3443:	
  1005                           
  1006                           ;main.c: 249: else
  1007                           ;main.c: 250: {
  1008                           ;main.c: 251: ledStep = 0;
  1009  0389  01F8               	clrf	_ledStep
  1010  038A  0008               	return
  1011  038B                     l3445:	
  1012                           
  1013                           ;main.c: 254: else if(showBatTime > 0)
  1014  038B  0841               	movf	_showBatTime,w
  1015  038C  1903               	btfsc	3,2
  1016  038D  2BA5               	goto	l3463
  1017  038E  300E               	movlw	14
  1018                           
  1019                           ;main.c: 255: {
  1020                           ;main.c: 256: showBatTime--;
  1021  038F  03C1               	decf	_showBatTime,f
  1022                           
  1023                           ;main.c: 257: if(prePwStep >= 14)
  1024  0390  0277               	subwf	_prePwStep,w
  1025  0391  1C03               	skipc
  1026  0392  2B99               	goto	l3453
  1027                           
  1028                           ;main.c: 258: {
  1029                           ;main.c: 259: ledStep = prePwStep/14;
  1030  0393  300E               	movlw	14
  1031  0394  00F3               	movwf	___lbdiv@divisor
  1032  0395  0877               	movf	_prePwStep,w
  1033  0396  2592               	fcall	___lbdiv
  1034  0397  00F8               	movwf	_ledStep
  1035                           
  1036                           ;main.c: 260: }
  1037  0398  0008               	return
  1038  0399                     l3453:	
  1039                           
  1040                           ;main.c: 261: else if(prePwStep > 5)
  1041  0399  3006               	movlw	6
  1042  039A  0277               	subwf	_prePwStep,w
  1043  039B  1C03               	skipc
  1044  039C  2BA0               	goto	l3457
  1045  039D                     l3455:	
  1046                           
  1047                           ;main.c: 262: {
  1048                           ;main.c: 263: ledStep = 1;
  1049  039D  01F8               	clrf	_ledStep
  1050  039E  0AF8               	incf	_ledStep,f
  1051                           
  1052                           ;main.c: 264: }
  1053  039F  0008               	return
  1054  03A0                     l3457:	
  1055                           
  1056                           ;main.c: 265: else
  1057                           ;main.c: 266: {
  1058                           ;main.c: 267: if(count1s < 50)
  1059  03A0  3032               	movlw	50
  1060  03A1  0254               	subwf	_count1s,w
  1061  03A2  1C03               	btfss	3,0
  1062  03A3  2B9D               	goto	l3455
  1063  03A4  2B89               	goto	l3443
  1064  03A5                     l3463:	
  1065                           ;main.c: 274: }
  1066                           ;main.c: 275: }
  1067                           ;main.c: 276: }
  1068                           
  1069                           
  1070                           ;main.c: 277: else if(workStep > 0)
  1071  03A5  0879               	movf	_workStep,w
  1072  03A6  1903               	btfsc	3,2
  1073  03A7  2BAB               	goto	l3467
  1074                           
  1075                           ;main.c: 278: {
  1076                           ;main.c: 279: ledStep = workStep;
  1077  03A8  0879               	movf	_workStep,w
  1078  03A9  00F8               	movwf	_ledStep
  1079                           
  1080                           ;main.c: 280: }
  1081  03AA  0008               	return
  1082  03AB                     l3467:	
  1083                           
  1084                           ;main.c: 281: else if(chrgFlag)
  1085  03AB  087A               	movf	_chrgFlag,w
  1086  03AC  1903               	btfsc	3,2
  1087  03AD  2B89               	goto	l3443
  1088                           
  1089                           ;main.c: 282: {
  1090                           ;main.c: 283: if(count1s % 50 == 0)
  1091  03AE  3032               	movlw	50
  1092  03AF  00F3               	movwf	___lbmod@divisor
  1093  03B0  0854               	movf	_count1s,w
  1094  03B1  2576               	fcall	___lbmod
  1095  03B2  3A00               	xorlw	0
  1096  03B3  1D03               	skipz
  1097  03B4  0008               	return
  1098                           
  1099                           ;main.c: 284: {
  1100                           ;main.c: 285: if(++ledStep > 6)
  1101  03B5  3007               	movlw	7
  1102  03B6  0AF8               	incf	_ledStep,f
  1103  03B7  0278               	subwf	_ledStep,w
  1104  03B8  1C03               	skipc
  1105  03B9  0008               	return
  1106                           
  1107                           ;main.c: 286: {
  1108                           ;main.c: 287: ledStep = lockLedStep;
  1109  03BA  0842               	movf	_lockLedStep,w
  1110  03BB  00F8               	movwf	_ledStep
  1111  03BC  0008               	return
  1112  03BD                     __end_of_ledCtr:	
  1113                           
  1114                           	psect	text5
  1115  04F5                     __ptext5:	
  1116 ;; *************** function ___lwmod *****************
  1117 ;; Defined at:
  1118 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  divisor         2    3[COMMON] unsigned int 
  1121 ;;  dividend        2    5[COMMON] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  counter         1    0[BANK0 ] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2    3[COMMON] unsigned int 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 100/0
  1130 ;;		On exit  : 100/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1
  1133 ;;      Params:         4       0       0
  1134 ;;      Locals:         0       1       0
  1135 ;;      Temps:          0       0       0
  1136 ;;      Totals:         4       1       0
  1137 ;;Total ram usage:        5 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    2
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_ledCtr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function ___lwmod
  1149  04F5                     ___lwmod:	
  1150                           
  1151                           ;incstack = 0
  1152                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1153  04F5  0873               	movf	___lwmod@divisor,w
  1154  04F6  0474               	iorwf	___lwmod@divisor+1,w
  1155  04F7  1903               	btfsc	3,2
  1156  04F8  2D14               	goto	l3097
  1157  04F9  01D7               	clrf	___lwmod@counter
  1158  04FA                     L1:	
  1159  04FA  0AD7               	incf	___lwmod@counter,f
  1160  04FB  1BF4               	btfsc	___lwmod@divisor+1,7
  1161  04FC  2D01               	goto	l3089
  1162  04FD  1003               	clrc
  1163  04FE  0DF3               	rlf	___lwmod@divisor,f
  1164  04FF  0DF4               	rlf	___lwmod@divisor+1,f
  1165  0500  2CFA               	goto	L1
  1166  0501                     l3089:	
  1167  0501  0874               	movf	___lwmod@divisor+1,w
  1168  0502  0276               	subwf	___lwmod@dividend+1,w
  1169  0503  1D03               	skipz
  1170  0504  2D07               	goto	u3255
  1171  0505  0873               	movf	___lwmod@divisor,w
  1172  0506  0275               	subwf	___lwmod@dividend,w
  1173  0507                     u3255:	
  1174  0507  1C03               	skipc
  1175  0508  2D10               	goto	L2
  1176  0509  0873               	movf	___lwmod@divisor,w
  1177  050A  02F5               	subwf	___lwmod@dividend,f
  1178  050B  0874               	movf	___lwmod@divisor+1,w
  1179  050C  1C03               	skipc
  1180  050D  03F6               	decf	___lwmod@dividend+1,f
  1181  050E  02F6               	subwf	___lwmod@dividend+1,f
  1182  050F  1003               	clrc
  1183  0510                     L2:	
  1184  0510  0CF4               	rrf	___lwmod@divisor+1,f
  1185  0511  0CF3               	rrf	___lwmod@divisor,f
  1186  0512  0BD7               	decfsz	___lwmod@counter,f
  1187  0513  2D01               	goto	l3089
  1188  0514                     l3097:	
  1189  0514  0876               	movf	___lwmod@dividend+1,w
  1190  0515  00F4               	movwf	?___lwmod+1
  1191  0516  0875               	movf	___lwmod@dividend,w
  1192  0517  00F3               	movwf	?___lwmod
  1193  0518  0008               	return
  1194  0519                     __end_of___lwmod:	
  1195                           
  1196                           	psect	text6
  1197  0576                     __ptext6:	
  1198 ;; *************** function ___lbmod *****************
  1199 ;; Defined at:
  1200 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  dividend        1    wreg     unsigned char 
  1203 ;;  divisor         1    3[COMMON] unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  dividend        1    0[BANK0 ] unsigned char 
  1206 ;;  rem             1    2[BANK0 ] unsigned char 
  1207 ;;  counter         1    1[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      unsigned char 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 100/0
  1214 ;;		On exit  : 100/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1
  1217 ;;      Params:         1       0       0
  1218 ;;      Locals:         0       3       0
  1219 ;;      Temps:          1       0       0
  1220 ;;      Totals:         2       3       0
  1221 ;;Total ram usage:        5 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_ledCtr
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function ___lbmod
  1233  0576                     ___lbmod:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1237                           ;___lbmod@dividend stored from wreg
  1238  0576  00D7               	movwf	___lbmod@dividend
  1239  0577  3008               	movlw	8
  1240  0578  00D8               	movwf	___lbmod@counter
  1241  0579  01D9               	clrf	___lbmod@rem
  1242  057A                     l3067:	
  1243  057A  0857               	movf	___lbmod@dividend,w
  1244  057B  00F4               	movwf	??___lbmod
  1245  057C  3007               	movlw	7
  1246  057D  1003               	clrc
  1247  057E                     L3:	
  1248  057E  0CF4               	rrf	??___lbmod,f
  1249  057F  3EFF               	addlw	-1
  1250  0580  1003               	clrc
  1251  0581  1D03               	skipz
  1252  0582  2D7E               	goto	L3
  1253  0583  0D59               	rlf	___lbmod@rem,w
  1254  0584  0474               	iorwf	??___lbmod,w
  1255  0585  00D9               	movwf	___lbmod@rem
  1256  0586  1003               	clrc
  1257  0587  0DD7               	rlf	___lbmod@dividend,f
  1258  0588  0873               	movf	___lbmod@divisor,w
  1259  0589  0259               	subwf	___lbmod@rem,w
  1260  058A  1C03               	skipc
  1261  058B  2D8E               	goto	l3075
  1262  058C  0873               	movf	___lbmod@divisor,w
  1263  058D  02D9               	subwf	___lbmod@rem,f
  1264  058E                     l3075:	
  1265  058E  0BD8               	decfsz	___lbmod@counter,f
  1266  058F  2D7A               	goto	l3067
  1267  0590  0859               	movf	___lbmod@rem,w
  1268  0591  0008               	return
  1269  0592                     __end_of___lbmod:	
  1270                           
  1271                           	psect	text7
  1272  04C4                     __ptext7:	
  1273 ;; *************** function _keyCtr *****************
  1274 ;; Defined at:
  1275 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  kclick          1    4[COMMON] unsigned char 
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 100/0
  1286 ;;		On exit  : 100/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1
  1289 ;;      Params:         0       0       0
  1290 ;;      Locals:         1       0       0
  1291 ;;      Temps:          0       0       0
  1292 ;;      Totals:         1       0       0
  1293 ;;Total ram usage:        1 bytes
  1294 ;; Hardware stack levels used:    1
  1295 ;; Hardware stack levels required when called:    3
  1296 ;; This function calls:
  1297 ;;		_keyRead
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _keyCtr
  1305  04C4                     _keyCtr:	
  1306                           
  1307                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1311  04C4  0906               	comf	6,w	;volatile
  1312  04C5  3904               	andlw	4
  1313  04C6  253B               	fcall	_keyRead
  1314  04C7  00F4               	movwf	keyCtr@kclick
  1315                           
  1316                           ;main.c: 500: if(kclick == 1)
  1317  04C8  0B74               	decfsz	keyCtr@kclick,w
  1318  04C9  2CE7               	goto	l2757
  1319                           
  1320                           ;main.c: 501: {
  1321                           ;main.c: 502: if(workStep > 0)
  1322  04CA  0879               	movf	_workStep,w
  1323  04CB  1903               	btfsc	3,2
  1324  04CC  2CD5               	goto	l2743
  1325                           
  1326                           ;main.c: 503: {
  1327                           ;main.c: 504: if(++workStep > 6)
  1328  04CD  3007               	movlw	7
  1329  04CE  0AF9               	incf	_workStep,f
  1330  04CF  0279               	subwf	_workStep,w
  1331  04D0  1C03               	skipc
  1332  04D1  0008               	return
  1333                           
  1334                           ;main.c: 505: {
  1335                           ;main.c: 506: workStep = 1;
  1336  04D2  01F9               	clrf	_workStep
  1337  04D3  0AF9               	incf	_workStep,f
  1338  04D4  0008               	return
  1339  04D5                     l2743:	
  1340                           
  1341                           ;main.c: 509: else if(overWorkTime > 0)
  1342  04D5  0824               	movf	_overWorkTime,w
  1343  04D6  0425               	iorwf	_overWorkTime+1,w
  1344  04D7  1903               	btfsc	3,2
  1345  04D8  2CDE               	goto	l2749
  1346                           
  1347                           ;main.c: 510: {
  1348                           ;main.c: 511: overWorkTime = 0;
  1349  04D9  01A4               	clrf	_overWorkTime
  1350  04DA  01A5               	clrf	_overWorkTime+1
  1351                           
  1352                           ;main.c: 512: workStep = preLedStep;
  1353  04DB  0838               	movf	_preLedStep,w
  1354  04DC  00F9               	movwf	_workStep
  1355                           
  1356                           ;main.c: 513: }
  1357  04DD  0008               	return
  1358  04DE                     l2749:	
  1359                           
  1360                           ;main.c: 514: else if(showBatTime > 0)
  1361  04DE  0841               	movf	_showBatTime,w
  1362  04DF  1903               	btfsc	3,2
  1363  04E0  2CE3               	goto	l2753
  1364  04E1                     l2751:	
  1365                           
  1366                           ;main.c: 515: {
  1367                           ;main.c: 516: showBatTime = 0;
  1368  04E1  01C1               	clrf	_showBatTime
  1369                           
  1370                           ;main.c: 517: }
  1371  04E2  0008               	return
  1372  04E3                     l2753:	
  1373                           
  1374                           ;main.c: 518: else
  1375                           ;main.c: 519: {
  1376                           ;main.c: 520: showBatTime = 200;
  1377  04E3  30C8               	movlw	200
  1378  04E4  00C1               	movwf	_showBatTime
  1379                           
  1380                           ;main.c: 521: count1s = 0;
  1381  04E5  01D4               	clrf	_count1s
  1382  04E6  0008               	return
  1383  04E7                     l2757:	
  1384                           
  1385                           ;main.c: 524: else if(kclick == 2)
  1386  04E7  3002               	movlw	2
  1387  04E8  0674               	xorwf	keyCtr@kclick,w
  1388  04E9  1D03               	btfss	3,2
  1389  04EA  0008               	return
  1390                           
  1391                           ;main.c: 525: {
  1392                           ;main.c: 526: if(workStep > 0)
  1393  04EB  0879               	movf	_workStep,w
  1394  04EC  1903               	btfsc	3,2
  1395  04ED  2CF0               	goto	l778
  1396                           
  1397                           ;main.c: 527: {
  1398                           ;main.c: 528: workStep = 0;
  1399  04EE  01F9               	clrf	_workStep
  1400                           
  1401                           ;main.c: 529: }
  1402  04EF  0008               	return
  1403  04F0                     l778:	
  1404  04F0  301E               	movlw	30
  1405                           
  1406                           ;main.c: 530: else
  1407                           ;main.c: 531: {
  1408                           ;main.c: 532: workStep = 1;
  1409  04F1  01F9               	clrf	_workStep
  1410  04F2  0AF9               	incf	_workStep,f
  1411                           
  1412                           ;main.c: 533: startTime = 30;
  1413  04F3  00C6               	movwf	_startTime
  1414  04F4  2CE1               	goto	l2751
  1415  04F5                     __end_of_keyCtr:	
  1416                           
  1417                           	psect	text8
  1418  053B                     __ptext8:	
  1419 ;; *************** function _keyRead *****************
  1420 ;; Defined at:
  1421 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  keyStatus       1    wreg     unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  keyStatus       1    3[COMMON] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      unsigned char 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 100/0
  1432 ;;		On exit  : 100/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMMON   BANK0   BANK1
  1435 ;;      Params:         0       0       0
  1436 ;;      Locals:         1       0       0
  1437 ;;      Temps:          0       0       0
  1438 ;;      Totals:         1       0       0
  1439 ;;Total ram usage:        1 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    2
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_keyCtr
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           
  1450                           ;psect for function _keyRead
  1451  053B                     _keyRead:	
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1455                           ;keyRead@keyStatus stored from wreg
  1456  053B  00F3               	movwf	keyRead@keyStatus
  1457                           
  1458                           ;main.c: 466: if(keyStatus)
  1459  053C  0873               	movf	keyRead@keyStatus,w
  1460  053D  3064               	movlw	100
  1461  053E  1903               	btfsc	3,2
  1462  053F  2D4D               	goto	L5
  1463                           
  1464                           ;main.c: 467: {
  1465                           ;main.c: 468: keyCount++;
  1466  0540  0ACC               	incf	_keyCount,f
  1467                           
  1468                           ;main.c: 469: if(keyCount >= 100)
  1469  0541  024C               	subwf	_keyCount,w
  1470  0542  1C03               	skipc
  1471  0543  3400               	retlw	0
  1472                           
  1473                           ;main.c: 470: {
  1474                           ;main.c: 471: keyCount = 100;
  1475  0544  3064               	movlw	100
  1476  0545  00CC               	movwf	_keyCount
  1477                           
  1478                           ;main.c: 472: if(!longPressFlag)
  1479  0546  084B               	movf	_longPressFlag,w
  1480  0547  1D03               	btfss	3,2
  1481  0548  3400               	retlw	0
  1482  0549  3002               	movlw	2
  1483                           
  1484                           ;main.c: 473: {
  1485                           ;main.c: 474: longPressFlag = 1;
  1486  054A  01CB               	clrf	_longPressFlag
  1487  054B  0ACB               	incf	_longPressFlag,f
  1488                           
  1489                           ;main.c: 475: return 2;
  1490  054C  0008               	return
  1491  054D                     L5:	
  1492                           ;main.c: 479: else
  1493                           ;main.c: 480: {
  1494                           ;main.c: 481: if(keyCount >= 100)
  1495                           
  1496  054D  024C               	subwf	_keyCount,w
  1497  054E  1C03               	skipc
  1498  054F  2D53               	goto	l2193
  1499                           
  1500                           ;main.c: 482: {
  1501                           ;main.c: 483: keyCount = 0;
  1502  0550  01CC               	clrf	_keyCount
  1503                           
  1504                           ;main.c: 484: longPressFlag = 0;
  1505  0551  01CB               	clrf	_longPressFlag
  1506                           
  1507                           ;main.c: 485: return 0;
  1508  0552  3400               	retlw	0
  1509  0553                     l2193:	
  1510                           
  1511                           ;main.c: 487: else if(keyCount >= 6)
  1512  0553  3006               	movlw	6
  1513  0554  024C               	subwf	_keyCount,w
  1514                           
  1515                           ;main.c: 488: {
  1516                           ;main.c: 489: keyCount = 0;
  1517  0555  01CC               	clrf	_keyCount
  1518  0556  1803               	btfsc	3,0
  1519                           
  1520                           ;main.c: 490: return 1;
  1521  0557  3401               	retlw	1
  1522  0558  3400               	retlw	0
  1523  0559                     __end_of_keyRead:	
  1524                           ;main.c: 491: }
  1525                           ;main.c: 492: keyCount = 0;
  1526                           
  1527                           
  1528                           	psect	text9
  1529  0018                     __ptext9:	
  1530 ;; *************** function _chrgCtr *****************
  1531 ;; Defined at:
  1532 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0, pclath, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 100/0
  1543 ;;		On exit  : 100/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1
  1546 ;;      Params:         0       0       0
  1547 ;;      Locals:         0       0       0
  1548 ;;      Temps:          0       2       0
  1549 ;;      Totals:         0       2       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    3
  1553 ;; This function calls:
  1554 ;;		___lbdiv
  1555 ;;		_chrgPwmInit
  1556 ;;		_chrgPwmStop
  1557 ;; This function is called by:
  1558 ;;		_main
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function _chrgCtr
  1564  0018                     _chrgCtr:	
  1565                           
  1566                           ;main.c: 301: if(PORTA & 0x02)
  1567                           
  1568                           ;incstack = 0
  1569                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1570  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0019  1C86               	btfss	6,1	;volatile
  1572  001A  28F7               	goto	l3339
  1573                           
  1574                           ;main.c: 302: {
  1575                           ;main.c: 303: if(chrgFlag == 0)
  1576  001B  087A               	movf	_chrgFlag,w
  1577  001C  1D03               	btfss	3,2
  1578  001D  2824               	goto	l3215
  1579                           
  1580                           ;main.c: 304: {
  1581                           ;main.c: 305: chrgFlag = 1;
  1582  001E  01FA               	clrf	_chrgFlag
  1583  001F  0AFA               	incf	_chrgFlag,f
  1584                           
  1585                           ;main.c: 306: ledStep = 0;
  1586  0020  01F8               	clrf	_ledStep
  1587                           
  1588                           ;main.c: 307: chrgMaxDuty = 0;
  1589  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0022  01BA               	clrf	_chrgMaxDuty
  1591                           
  1592                           ;main.c: 308: chrgPwmStop();
  1593  0023  25DA               	fcall	_chrgPwmStop
  1594  0024                     l3215:	
  1595                           
  1596                           ;main.c: 309: }
  1597                           ;main.c: 310: workStep = 0;
  1598  0024  01F9               	clrf	_workStep
  1599                           
  1600                           ;main.c: 311: lowBatFlag = 0;
  1601  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1602  0026  01B7               	clrf	_lowBatFlag
  1603                           
  1604                           ;main.c: 312: if(prePwStep < pwStep)
  1605  0027  0844               	movf	_pwStep,w
  1606  0028  0277               	subwf	_prePwStep,w
  1607  0029  1803               	skipnc
  1608  002A  2834               	goto	l3227
  1609                           
  1610                           ;main.c: 313: {
  1611                           ;main.c: 314: if(++count50s > 2000)
  1612  002B  2116               	fcall	PL6	;call to abstracted procedure
  1613  002C  1903               	skipnz
  1614  002D  022A               	subwf	_count50s,w
  1615  002E  1C03               	skipc
  1616  002F  2836               	goto	l3229
  1617                           
  1618                           ;main.c: 315: {
  1619                           ;main.c: 316: count50s = 0;
  1620  0030  01AA               	clrf	_count50s
  1621  0031  01AB               	clrf	_count50s+1
  1622                           
  1623                           ;main.c: 317: prePwStep++;
  1624  0032  0AF7               	incf	_prePwStep,f
  1625  0033  2836               	goto	l3229
  1626  0034                     l3227:	
  1627                           
  1628                           ;main.c: 320: else
  1629                           ;main.c: 321: {
  1630                           ;main.c: 322: count50s = 0;
  1631  0034  01AA               	clrf	_count50s
  1632  0035  01AB               	clrf	_count50s+1
  1633  0036                     l3229:	
  1634                           
  1635                           ;main.c: 323: }
  1636                           ;main.c: 324: if(protectFlag)
  1637  0036  084F               	movf	_protectFlag,w
  1638  0037  1903               	btfsc	3,2
  1639  0038  2859               	goto	l3253
  1640                           
  1641                           ;main.c: 325: {
  1642                           ;main.c: 326: chrgPwmStop();
  1643  0039  25DA               	fcall	_chrgPwmStop
  1644                           
  1645                           ;main.c: 327: ledStep = 6;
  1646  003A  3006               	movlw	6
  1647  003B  00F8               	movwf	_ledStep
  1648                           
  1649                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1650  003C  3063               	movlw	99
  1651  003D  0277               	subwf	_prePwStep,w
  1652  003E  1803               	skipnc
  1653  003F  2857               	goto	l3249
  1654  0040  0B4F               	decfsz	_protectFlag,w
  1655  0041  2857               	goto	l3249
  1656                           
  1657                           ;main.c: 329: {
  1658                           ;main.c: 330: if(++reChrgCount > 250)
  1659  0042  30FB               	movlw	251
  1660  0043  0AC3               	incf	_reChrgCount,f
  1661  0044  0243               	subwf	_reChrgCount,w
  1662  0045  1C03               	skipc
  1663  0046  0008               	return
  1664  0047  300F               	movlw	15
  1665                           
  1666                           ;main.c: 331: {
  1667                           ;main.c: 332: reChrgCount = 0;
  1668  0048  01C3               	clrf	_reChrgCount
  1669                           
  1670                           ;main.c: 333: chrgFullFlag = 0;
  1671  0049  01D2               	clrf	_chrgFullFlag
  1672                           
  1673                           ;main.c: 334: protectFlag = 0;
  1674  004A  01CF               	clrf	_protectFlag
  1675                           
  1676                           ;main.c: 335: if(prePwStep > 14)
  1677  004B  0277               	subwf	_prePwStep,w
  1678  004C  1C03               	skipc
  1679  004D  2855               	goto	l3247
  1680                           
  1681                           ;main.c: 336: {
  1682                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1683  004E  300E               	movlw	14
  1684  004F  00F3               	movwf	___lbdiv@divisor
  1685  0050  0877               	movf	_prePwStep,w
  1686  0051  2592               	fcall	___lbdiv
  1687  0052  3EFF               	addlw	255
  1688  0053  00C2               	movwf	_lockLedStep
  1689                           
  1690                           ;main.c: 338: }
  1691  0054  0008               	return
  1692  0055                     l3247:	
  1693                           
  1694                           ;main.c: 339: else
  1695                           ;main.c: 340: {
  1696                           ;main.c: 341: lockLedStep = 0;
  1697  0055  01C2               	clrf	_lockLedStep
  1698  0056  0008               	return
  1699  0057                     l3249:	
  1700                           
  1701                           ;main.c: 345: else
  1702                           ;main.c: 346: {
  1703                           ;main.c: 347: reChrgCount = 0;
  1704  0057  01C3               	clrf	_reChrgCount
  1705  0058  0008               	return
  1706  0059                     l3253:	
  1707                           
  1708                           ;main.c: 350: }
  1709                           ;main.c: 351: if(batADValue < 1118)
  1710  0059  3004               	movlw	4
  1711  005A  022D               	subwf	_batADValue+1,w
  1712  005B  305E               	movlw	94
  1713  005C  1903               	skipnz
  1714  005D  022C               	subwf	_batADValue,w
  1715  005E  1803               	skipnc
  1716  005F  2863               	goto	l3259
  1717  0060  300F               	movlw	15
  1718                           
  1719                           ;main.c: 352: {
  1720                           ;main.c: 353: chrgMode = 0;
  1721  0061  01C0               	clrf	_chrgMode
  1722                           
  1723                           ;main.c: 354: chrgMaxAD = 15;
  1724  0062  287C               	goto	L6
  1725  0063                     l3259:	
  1726                           ;main.c: 355: }
  1727                           
  1728                           
  1729                           ;main.c: 356: else if(batADValue < 1530)
  1730  0063  3005               	movlw	5
  1731  0064  022D               	subwf	_batADValue+1,w
  1732  0065  30FA               	movlw	250
  1733  0066  1903               	skipnz
  1734  0067  022C               	subwf	_batADValue,w
  1735  0068  1803               	skipnc
  1736  0069  2870               	goto	l3267
  1737  006A  3028               	movlw	40
  1738                           
  1739                           ;main.c: 357: {
  1740                           ;main.c: 358: chrgMode = 1;
  1741  006B  01C0               	clrf	_chrgMode
  1742  006C  0AC0               	incf	_chrgMode,f
  1743                           
  1744                           ;main.c: 359: chrgMaxAD = 40;
  1745  006D  00BF               	movwf	_chrgMaxAD
  1746                           
  1747                           ;main.c: 360: lockCount = 0;
  1748  006E  01BE               	clrf	_lockCount
  1749                           
  1750                           ;main.c: 361: }
  1751  006F  287D               	goto	l3277
  1752  0070                     l3267:	
  1753                           
  1754                           ;main.c: 362: else if(count1s == 0)
  1755  0070  0854               	movf	_count1s,w
  1756  0071  1D03               	btfss	3,2
  1757  0072  287D               	goto	l3277
  1758                           
  1759                           ;main.c: 363: {
  1760                           ;main.c: 364: if(++lockCount > 200)
  1761  0073  30C9               	movlw	201
  1762  0074  0ABE               	incf	_lockCount,f
  1763  0075  023E               	subwf	_lockCount,w
  1764  0076  1C03               	skipc
  1765  0077  287B               	goto	l3275
  1766  0078  3002               	movlw	2
  1767                           
  1768                           ;main.c: 365: {
  1769                           ;main.c: 366: lockCount = 0;
  1770  0079  01BE               	clrf	_lockCount
  1771                           
  1772                           ;main.c: 367: chrgMode = 2;
  1773  007A  00C0               	movwf	_chrgMode
  1774  007B                     l3275:	
  1775                           
  1776                           ;main.c: 368: }
  1777                           ;main.c: 370: chrgMaxAD = 40;
  1778  007B  3028               	movlw	40
  1779  007C                     L6:	
  1780  007C  00BF               	movwf	_chrgMaxAD
  1781  007D                     l3277:	
  1782                           
  1783                           ;main.c: 371: }
  1784                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1785  007D  3002               	movlw	2
  1786  007E  0640               	xorwf	_chrgMode,w
  1787  007F  1D03               	btfss	3,2
  1788  0080  2897               	goto	l3287
  1789  0081  3000               	movlw	0
  1790  0082  022F               	subwf	_outADValue+1,w
  1791  0083  3005               	movlw	5
  1792  0084  1903               	skipnz
  1793  0085  022E               	subwf	_outADValue,w
  1794  0086  1803               	skipnc
  1795  0087  2897               	goto	l3287
  1796                           
  1797                           ;main.c: 373: {
  1798                           ;main.c: 374: if(++fullCount >= 200)
  1799  0088  0AA8               	incf	_fullCount,f
  1800  0089  1903               	skipnz
  1801  008A  0AA9               	incf	_fullCount+1,f
  1802  008B  3000               	movlw	0
  1803  008C  0229               	subwf	_fullCount+1,w
  1804  008D  30C8               	movlw	200
  1805  008E  1903               	skipnz
  1806  008F  0228               	subwf	_fullCount,w
  1807  0090  1C03               	skipc
  1808  0091  2899               	goto	l3289
  1809                           
  1810                           ;main.c: 375: {
  1811                           ;main.c: 376: fullCount = 0;
  1812  0092  01A8               	clrf	_fullCount
  1813  0093  01A9               	clrf	_fullCount+1
  1814                           
  1815                           ;main.c: 377: chrgFullFlag = 1;
  1816  0094  01D2               	clrf	_chrgFullFlag
  1817  0095  0AD2               	incf	_chrgFullFlag,f
  1818  0096  2899               	goto	l3289
  1819  0097                     l3287:	
  1820                           
  1821                           ;main.c: 380: else
  1822                           ;main.c: 381: {
  1823                           ;main.c: 382: fullCount = 0;
  1824  0097  01A8               	clrf	_fullCount
  1825  0098  01A9               	clrf	_fullCount+1
  1826  0099                     l3289:	
  1827                           
  1828                           ;main.c: 383: }
  1829                           ;main.c: 384: if(chrgFullFlag)
  1830  0099  0852               	movf	_chrgFullFlag,w
  1831  009A  1903               	btfsc	3,2
  1832  009B  289F               	goto	l3295
  1833                           
  1834                           ;main.c: 385: {
  1835                           ;main.c: 386: lockLedStep = 6;
  1836  009C  3006               	movlw	6
  1837  009D  00C2               	movwf	_lockLedStep
  1838                           
  1839                           ;main.c: 387: chrgPwmStop();
  1840  009E  2DDA               	ljmp	l2155
  1841  009F                     l3295:	
  1842                           ;main.c: 388: }
  1843                           
  1844                           
  1845                           ;main.c: 389: else
  1846                           ;main.c: 390: {
  1847                           ;main.c: 391: if(prePwStep < 15)
  1848  009F  300F               	movlw	15
  1849  00A0  0277               	subwf	_prePwStep,w
  1850  00A1  1803               	skipnc
  1851  00A2  28A5               	goto	l3299
  1852                           
  1853                           ;main.c: 392: {
  1854                           ;main.c: 393: lockLedStep = 0;
  1855  00A3  01C2               	clrf	_lockLedStep
  1856                           
  1857                           ;main.c: 394: }
  1858  00A4  28AB               	goto	l3301
  1859  00A5                     l3299:	
  1860                           
  1861                           ;main.c: 395: else
  1862                           ;main.c: 396: {
  1863                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1864  00A5  300E               	movlw	14
  1865  00A6  00F3               	movwf	___lbdiv@divisor
  1866  00A7  0877               	movf	_prePwStep,w
  1867  00A8  2592               	fcall	___lbdiv
  1868  00A9  3EFF               	addlw	255
  1869  00AA  00C2               	movwf	_lockLedStep
  1870  00AB                     l3301:	
  1871                           
  1872                           ;main.c: 398: }
  1873                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1874  00AB  3006               	movlw	6
  1875  00AC  022D               	subwf	_batADValue+1,w
  1876  00AD  300A               	movlw	10
  1877  00AE  1903               	skipnz
  1878  00AF  022C               	subwf	_batADValue,w
  1879  00B0  1803               	skipnc
  1880  00B1  28C1               	goto	l3305
  1881  00B2  083F               	movf	_chrgMaxAD,w
  1882  00B3  3E02               	addlw	2
  1883  00B4  00D7               	movwf	??_chrgCtr
  1884  00B5  3000               	movlw	0
  1885  00B6  1803               	skipnc
  1886  00B7  3001               	movlw	1
  1887  00B8  00D8               	movwf	??_chrgCtr+1
  1888  00B9  082F               	movf	_outADValue+1,w
  1889  00BA  0258               	subwf	??_chrgCtr+1,w
  1890  00BB  1D03               	skipz
  1891  00BC  28BF               	goto	u3715
  1892  00BD  082E               	movf	_outADValue,w
  1893  00BE  0257               	subwf	??_chrgCtr,w
  1894  00BF                     u3715:	
  1895  00BF  1803               	skipnc
  1896  00C0  28D0               	goto	l3317
  1897  00C1                     l3305:	
  1898                           
  1899                           ;main.c: 400: {
  1900                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1901  00C1  0ABC               	incf	_subTime,f
  1902  00C2  083C               	movf	_subTime,w
  1903  00C3  023B               	subwf	_chrgWaitTime,w
  1904  00C4  1803               	skipnc
  1905  00C5  28CE               	goto	l3315
  1906                           
  1907                           ;main.c: 402: {
  1908                           ;main.c: 403: if(chrgMaxDuty > 1)
  1909  00C6  3002               	movlw	2
  1910  00C7  023A               	subwf	_chrgMaxDuty,w
  1911  00C8  1C03               	skipc
  1912  00C9  28CB               	goto	l3311
  1913                           
  1914                           ;main.c: 404: {
  1915                           ;main.c: 405: chrgMaxDuty--;
  1916  00CA  03BA               	decf	_chrgMaxDuty,f
  1917  00CB                     l3311:	
  1918  00CB  3032               	movlw	50
  1919                           
  1920                           ;main.c: 406: }
  1921                           ;main.c: 407: subTime = 0;
  1922  00CC  01BC               	clrf	_subTime
  1923                           
  1924                           ;main.c: 408: chrgWaitTime = 50;
  1925  00CD  00BB               	movwf	_chrgWaitTime
  1926  00CE                     l3315:	
  1927                           
  1928                           ;main.c: 409: }
  1929                           ;main.c: 410: addTime = 0;
  1930  00CE  01BD               	clrf	_addTime
  1931                           
  1932                           ;main.c: 411: }
  1933  00CF  28F0               	goto	l3331
  1934  00D0                     l3317:	
  1935                           
  1936                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1937  00D0  3006               	movlw	6
  1938  00D1  022D               	subwf	_batADValue+1,w
  1939  00D2  3009               	movlw	9
  1940  00D3  1903               	skipnz
  1941  00D4  022C               	subwf	_batADValue,w
  1942  00D5  1803               	skipnc
  1943  00D6  28F0               	goto	l3331
  1944  00D7  083F               	movf	_chrgMaxAD,w
  1945  00D8  3EFC               	addlw	252
  1946  00D9  00D7               	movwf	??_chrgCtr
  1947  00DA  30FF               	movlw	255
  1948  00DB  1803               	skipnc
  1949  00DC  3000               	movlw	0
  1950  00DD  00D8               	movwf	??_chrgCtr+1
  1951  00DE  022F               	subwf	_outADValue+1,w
  1952  00DF  1D03               	skipz
  1953  00E0  28E3               	goto	u3755
  1954  00E1  0857               	movf	??_chrgCtr,w
  1955  00E2  022E               	subwf	_outADValue,w
  1956  00E3                     u3755:	
  1957  00E3  1803               	skipnc
  1958  00E4  28F0               	goto	l3331
  1959                           
  1960                           ;main.c: 413: {
  1961                           ;main.c: 414: if(++addTime > chrgWaitTime)
  1962  00E5  0ABD               	incf	_addTime,f
  1963  00E6  083D               	movf	_addTime,w
  1964  00E7  023B               	subwf	_chrgWaitTime,w
  1965  00E8  1803               	skipnc
  1966  00E9  28EF               	goto	l3329
  1967  00EA  304B               	movlw	75
  1968                           
  1969                           ;main.c: 415: {
  1970                           ;main.c: 416: addTime = 0;
  1971  00EB  01BD               	clrf	_addTime
  1972                           
  1973                           ;main.c: 417: if(chrgMaxDuty < 75)
  1974  00EC  023A               	subwf	_chrgMaxDuty,w
  1975  00ED  1C03               	btfss	3,0
  1976                           
  1977                           ;main.c: 418: {
  1978                           ;main.c: 419: chrgMaxDuty++;
  1979  00EE  0ABA               	incf	_chrgMaxDuty,f
  1980  00EF                     l3329:	
  1981                           
  1982                           ;main.c: 420: }
  1983                           ;main.c: 421: }
  1984                           ;main.c: 422: subTime = 0;
  1985  00EF  01BC               	clrf	_subTime
  1986  00F0                     l3331:	
  1987                           
  1988                           ;main.c: 423: }
  1989                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  1990  00F0  1815               	btfsc	21,0	;volatile
  1991  00F1  28F3               	goto	l3335
  1992                           
  1993                           ;main.c: 427: {
  1994                           ;main.c: 428: chrgPwmInit();
  1995  00F2  25AD               	fcall	_chrgPwmInit
  1996  00F3                     l3335:	
  1997                           
  1998                           ;main.c: 429: }
  1999                           ;main.c: 430: PWMD01H = 0X00;
  2000  00F3  019E               	clrf	30	;volatile
  2001                           
  2002                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  2003  00F4  083A               	movf	_chrgMaxDuty,w
  2004  00F5  0099               	movwf	25	;volatile
  2005  00F6  0008               	return
  2006  00F7                     l3339:	
  2007  00F7  3014               	movlw	20
  2008                           
  2009                           ;main.c: 437: chrgFlag = 0;
  2010  00F8  01FA               	clrf	_chrgFlag
  2011                           
  2012                           ;main.c: 438: chrgFullFlag = 0;
  2013  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  2014  00FA  01D2               	clrf	_chrgFullFlag
  2015                           
  2016                           ;main.c: 439: protectFlag = 0;
  2017  00FB  01CF               	clrf	_protectFlag
  2018                           
  2019                           ;main.c: 440: chrgMode = 0;
  2020  00FC  01C0               	clrf	_chrgMode
  2021                           
  2022                           ;main.c: 441: chrgMaxAD = 0;
  2023  00FD  01BF               	clrf	_chrgMaxAD
  2024                           
  2025                           ;main.c: 442: chrgMaxDuty = 0;
  2026  00FE  01BA               	clrf	_chrgMaxDuty
  2027                           
  2028                           ;main.c: 443: lockCount = 0;
  2029  00FF  01BE               	clrf	_lockCount
  2030                           
  2031                           ;main.c: 444: lockLedStep = 0;
  2032  0100  01C2               	clrf	_lockLedStep
  2033                           
  2034                           ;main.c: 445: chrgWaitTime = 20;
  2035  0101  00BB               	movwf	_chrgWaitTime
  2036                           
  2037                           ;main.c: 446: chrgPwmStop();
  2038  0102  25DA               	fcall	_chrgPwmStop
  2039                           
  2040                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  2041  0103  0877               	movf	_prePwStep,w
  2042  0104  1903               	btfsc	3,2
  2043  0105  2913               	goto	l3355
  2044  0106  0877               	movf	_prePwStep,w
  2045  0107  0244               	subwf	_pwStep,w
  2046  0108  1803               	skipnc
  2047  0109  2913               	goto	l3355
  2048                           
  2049                           ;main.c: 448: {
  2050                           ;main.c: 449: if(++count50s > 2000)
  2051  010A  2116               	fcall	PL6	;call to abstracted procedure
  2052  010B  1903               	skipnz
  2053  010C  022A               	subwf	_count50s,w
  2054  010D  1C03               	skipc
  2055  010E  0008               	return
  2056                           
  2057                           ;main.c: 450: {
  2058                           ;main.c: 451: count50s = 0;
  2059  010F  01AA               	clrf	_count50s
  2060  0110  01AB               	clrf	_count50s+1
  2061                           
  2062                           ;main.c: 452: prePwStep--;
  2063  0111  03F7               	decf	_prePwStep,f
  2064  0112  0008               	return
  2065  0113                     l3355:	
  2066                           
  2067                           ;main.c: 455: else
  2068                           ;main.c: 456: {
  2069                           ;main.c: 457: count50s = 0;
  2070  0113  01AA               	clrf	_count50s
  2071  0114  01AB               	clrf	_count50s+1
  2072  0115  0008               	return
  2073  0116                     __end_of_chrgCtr:	
  2074  0116                     PL6:	
  2075  0116  0AAA               	incf	_count50s,f
  2076  0117  1903               	skipnz
  2077  0118  0AAB               	incf	_count50s+1,f
  2078  0119  3007               	movlw	7
  2079  011A  022B               	subwf	_count50s+1,w
  2080  011B  34D1               	retlw	209
  2081  011C                     __end_ofPL6:	
  2082                           
  2083                           	psect	text10
  2084  05DA                     __ptext10:	
  2085 ;; *************** function _chrgPwmStop *****************
  2086 ;; Defined at:
  2087 ;;		line 904 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		None
  2096 ;; Tracked objects:
  2097 ;;		On entry : 100/0
  2098 ;;		On exit  : 100/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1
  2101 ;;      Params:         0       0       0
  2102 ;;      Locals:         0       0       0
  2103 ;;      Temps:          0       0       0
  2104 ;;      Totals:         0       0       0
  2105 ;;Total ram usage:        0 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    2
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_chrgCtr
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _chrgPwmStop
  2117  05DA                     _chrgPwmStop:	
  2118  05DA                     l2155:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _chrgPwmStop: []
  2121                           
  2122                           
  2123                           ;main.c: 906: PWMCON0 &= 0xFE;
  2124  05DA  1015               	bcf	21,0	;volatile
  2125                           
  2126                           ;main.c: 907: RB0 = 0;
  2127  05DB  1006               	bcf	6,0	;volatile
  2128  05DC  0008               	return
  2129  05DD                     __end_of_chrgPwmStop:	
  2130                           
  2131                           	psect	text11
  2132  05AD                     __ptext11:	
  2133 ;; *************** function _chrgPwmInit *****************
  2134 ;; Defined at:
  2135 ;;		line 887 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2
  2144 ;; Tracked objects:
  2145 ;;		On entry : 100/0
  2146 ;;		On exit  : 100/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1
  2149 ;;      Params:         0       0       0
  2150 ;;      Locals:         0       0       0
  2151 ;;      Temps:          0       0       0
  2152 ;;      Totals:         0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    2
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_chrgCtr
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           
  2164                           ;psect for function _chrgPwmInit
  2165  05AD                     _chrgPwmInit:	
  2166                           
  2167                           ;main.c: 889: PWMCON1 = 0B00000000;
  2168                           
  2169                           ;incstack = 0
  2170                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2171                           
  2172                           ;main.c: 891: PWMTH = 0X00;
  2173                           
  2174                           ;main.c: 892: PWMTL = 100;
  2175                           
  2176                           ;main.c: 896: PWMD01H = 0;
  2177  05AD  25B4               	fcall	PL8	;call to abstracted procedure
  2178                           
  2179                           ;main.c: 897: PWMD0L = 1;
  2180  05AE  3001               	movlw	1
  2181  05AF  0099               	movwf	25	;volatile
  2182                           
  2183                           ;main.c: 898: PWM01DT = 0X00;
  2184  05B0  019F               	clrf	31	;volatile
  2185                           
  2186                           ;main.c: 900: PWMCON0 = 0X01;
  2187  05B1  0095               	movwf	21	;volatile
  2188                           
  2189                           ;main.c: 901: PWMCON2 =0X00;
  2190  05B2  019D               	clrf	29	;volatile
  2191  05B3  0008               	return
  2192  05B4                     __end_of_chrgPwmInit:	
  2193  05B4                     PL8:	
  2194  05B4  0196               	clrf	22	;volatile
  2195  05B5  0198               	clrf	24	;volatile
  2196  05B6  3064               	movlw	100
  2197  05B7  0097               	movwf	23	;volatile
  2198  05B8  019E               	clrf	30	;volatile
  2199  05B9  0008               	return
  2200  05BA                     __end_ofPL8:	
  2201                           
  2202                           	psect	text12
  2203  0592                     __ptext12:	
  2204 ;; *************** function ___lbdiv *****************
  2205 ;; Defined at:
  2206 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  dividend        1    wreg     unsigned char 
  2209 ;;  divisor         1    3[COMMON] unsigned char 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  dividend        1    4[COMMON] unsigned char 
  2212 ;;  quotient        1    6[COMMON] unsigned char 
  2213 ;;  counter         1    5[COMMON] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      unsigned char 
  2216 ;; Registers used:
  2217 ;;		wreg, status,2, status,0
  2218 ;; Tracked objects:
  2219 ;;		On entry : 100/0
  2220 ;;		On exit  : 100/0
  2221 ;;		Unchanged: 100/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1
  2223 ;;      Params:         1       0       0
  2224 ;;      Locals:         3       0       0
  2225 ;;      Temps:          0       0       0
  2226 ;;      Totals:         4       0       0
  2227 ;;Total ram usage:        4 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    2
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_ledCtr
  2234 ;;		_chrgCtr
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           
  2239                           ;psect for function ___lbdiv
  2240  0592                     ___lbdiv:	
  2241                           
  2242                           ;incstack = 0
  2243                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2244                           ;___lbdiv@dividend stored from wreg
  2245  0592  00F4               	movwf	___lbdiv@dividend
  2246  0593  01F6               	clrf	___lbdiv@quotient
  2247  0594  0873               	movf	___lbdiv@divisor,w
  2248  0595  1903               	btfsc	3,2
  2249  0596  2DAB               	goto	l2311
  2250  0597  01F5               	clrf	___lbdiv@counter
  2251  0598                     l2297:	
  2252  0598  0AF5               	incf	___lbdiv@counter,f
  2253  0599  1BF3               	btfsc	___lbdiv@divisor,7
  2254  059A  2D9E               	goto	l1159
  2255  059B  1003               	clrc
  2256  059C  0DF3               	rlf	___lbdiv@divisor,f
  2257  059D  2D98               	goto	l2297
  2258  059E                     l1159:	
  2259  059E  1003               	clrc
  2260  059F  0DF6               	rlf	___lbdiv@quotient,f
  2261  05A0  0873               	movf	___lbdiv@divisor,w
  2262  05A1  0274               	subwf	___lbdiv@dividend,w
  2263  05A2  1C03               	skipc
  2264  05A3  2DA8               	goto	L7
  2265  05A4  0873               	movf	___lbdiv@divisor,w
  2266  05A5  02F4               	subwf	___lbdiv@dividend,f
  2267  05A6  1476               	bsf	___lbdiv@quotient,0
  2268  05A7  1003               	clrc
  2269  05A8                     L7:	
  2270  05A8  0CF3               	rrf	___lbdiv@divisor,f
  2271  05A9  0BF5               	decfsz	___lbdiv@counter,f
  2272  05AA  2D9E               	goto	l1159
  2273  05AB                     l2311:	
  2274  05AB  0876               	movf	___lbdiv@quotient,w
  2275  05AC  0008               	return
  2276  05AD                     __end_of___lbdiv:	
  2277                           
  2278                           	psect	text13
  2279  0205                     __ptext13:	
  2280 ;; *************** function _checkOutA *****************
  2281 ;; Defined at:
  2282 ;;		line 580 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2287 ;;  maxtempV        1    0        unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0, pclath, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 100/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1
  2297 ;;      Params:         0       0       0
  2298 ;;      Locals:         0       2       0
  2299 ;;      Temps:          2       0       0
  2300 ;;      Totals:         2       2       0
  2301 ;;Total ram usage:        4 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    3
  2304 ;; This function calls:
  2305 ;;		_ADC_Sample
  2306 ;; This function is called by:
  2307 ;;		_main
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           
  2312                           ;psect for function _checkOutA
  2313  0205                     _checkOutA:	
  2314                           
  2315                           ;main.c: 582: if(chrgFlag)
  2316                           
  2317                           ;incstack = 0
  2318                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2319  0205  087A               	movf	_chrgFlag,w
  2320                           
  2321                           ;main.c: 583: {
  2322                           ;main.c: 584: test_adc = ADC_Sample(4, 5);
  2323  0206  3005               	movlw	5
  2324  0207  00F3               	movwf	ADC_Sample@adldo
  2325  0208  1903               	btfsc	3,2
  2326  0209  2A0C               	goto	L16
  2327  020A  3004               	movlw	4
  2328  020B  2A0D               	goto	L9
  2329  020C                     L16:	
  2330                           ;main.c: 586: else
  2331                           ;main.c: 587: {
  2332                           ;main.c: 588: test_adc = ADC_Sample(0, 5);
  2333                           
  2334                           ;main.c: 585: }
  2335                           
  2336  020C  3000               	movlw	0
  2337  020D                     L9:	
  2338  020D  211C               	fcall	_ADC_Sample
  2339  020E  00D6               	movwf	_test_adc	;volatile
  2340                           
  2341                           ;main.c: 589: }
  2342                           ;main.c: 590: if (0xA5 == test_adc)
  2343  020F  30A5               	movlw	165
  2344  0210  0656               	xorwf	_test_adc,w	;volatile
  2345  0211  1D03               	btfss	3,2
  2346  0212  2AAD               	goto	l3201
  2347                           
  2348                           ;main.c: 591: {
  2349                           ;main.c: 592: if(chrgFlag && adresult > 210)
  2350  0213  087A               	movf	_chrgFlag,w
  2351  0214  1903               	btfsc	3,2
  2352  0215  2A26               	goto	l3119
  2353  0216  3000               	movlw	0
  2354  0217  0235               	subwf	_adresult+1,w	;volatile
  2355  0218  30D3               	movlw	211
  2356  0219  1903               	skipnz
  2357  021A  0234               	subwf	_adresult,w	;volatile
  2358  021B  1C03               	skipc
  2359  021C  2A26               	goto	l3119
  2360                           
  2361                           ;main.c: 593: {
  2362                           ;main.c: 594: if(++overChrgTime > 10)
  2363  021D  300B               	movlw	11
  2364  021E  0AC5               	incf	_overChrgTime,f
  2365  021F  0245               	subwf	_overChrgTime,w
  2366  0220  1C03               	skipc
  2367  0221  2A27               	goto	l3121
  2368  0222  3002               	movlw	2
  2369                           
  2370                           ;main.c: 595: {
  2371                           ;main.c: 596: overChrgTime = 0;
  2372  0223  01C5               	clrf	_overChrgTime
  2373                           
  2374                           ;main.c: 597: protectFlag = 2;
  2375  0224  00CF               	movwf	_protectFlag
  2376  0225  2A27               	goto	l3121
  2377  0226                     l3119:	
  2378                           
  2379                           ;main.c: 601: else
  2380                           ;main.c: 602: {
  2381                           ;main.c: 603: overChrgTime = 0;
  2382  0226  01C5               	clrf	_overChrgTime
  2383  0227                     l3121:	
  2384                           
  2385                           ;main.c: 604: }
  2386                           ;main.c: 605: outADValue = adresult;
  2387  0227  0835               	movf	_adresult+1,w	;volatile
  2388  0228  00AF               	movwf	_outADValue+1
  2389  0229  0834               	movf	_adresult,w	;volatile
  2390  022A  00AE               	movwf	_outADValue
  2391                           
  2392                           ;main.c: 607: if(workStep && (outADValue > 220))
  2393  022B  0879               	movf	_workStep,w
  2394  022C  1903               	btfsc	3,2
  2395  022D  2A3D               	goto	l3131
  2396  022E  3000               	movlw	0
  2397  022F  022F               	subwf	_outADValue+1,w
  2398  0230  30DD               	movlw	221
  2399  0231  1903               	skipnz
  2400  0232  022E               	subwf	_outADValue,w
  2401  0233  1C03               	skipc
  2402  0234  2A3D               	goto	l3131
  2403                           
  2404                           ;main.c: 608: {
  2405                           ;main.c: 609: if(++workOverOutTime > 50)
  2406  0235  3033               	movlw	51
  2407  0236  0ACE               	incf	_workOverOutTime,f
  2408  0237  024E               	subwf	_workOverOutTime,w
  2409  0238  1C03               	skipc
  2410  0239  2A3E               	goto	l3135
  2411                           
  2412                           ;main.c: 610: {
  2413                           ;main.c: 611: workOverOutTime = 0;
  2414  023A  01CE               	clrf	_workOverOutTime
  2415                           
  2416                           ;main.c: 612: workStep = 0;
  2417  023B  01F9               	clrf	_workStep
  2418  023C  2A3E               	goto	l3135
  2419  023D                     l3131:	
  2420                           
  2421                           ;main.c: 615: else
  2422                           ;main.c: 616: {
  2423                           ;main.c: 617: workOverOutTime = 0;
  2424  023D  01CE               	clrf	_workOverOutTime
  2425  023E                     l3135:	
  2426                           
  2427                           ;main.c: 620: if(workStep < 6 && outADValue > maxtempV)
  2428  023E  3006               	movlw	6
  2429  023F  0279               	subwf	_workStep,w
  2430  0240  3000               	movlw	0
  2431  0241  1803               	skipnc
  2432  0242  2A52               	goto	L17
  2433  0243  022F               	subwf	_outADValue+1,w
  2434  0244  3029               	movlw	41
  2435  0245  1903               	skipnz
  2436  0246  022E               	subwf	_outADValue,w
  2437  0247  1C03               	skipc
  2438  0248  2A51               	goto	l3143
  2439  0249                     l3139:	
  2440                           
  2441                           ;main.c: 621: {
  2442                           ;main.c: 622: if(++overCount > 5)
  2443  0249  3006               	movlw	6
  2444  024A  0AC9               	incf	_overCount,f
  2445  024B  0249               	subwf	_overCount,w
  2446  024C  1C03               	skipc
  2447  024D  2AA9               	goto	l3197
  2448                           
  2449                           ;main.c: 623: {
  2450                           ;main.c: 624: overCount = 5;
  2451  024E  3005               	movlw	5
  2452  024F  00C9               	movwf	_overCount
  2453  0250  2AA9               	goto	l3197
  2454  0251                     l3143:	
  2455                           
  2456                           ;main.c: 627: else if(outADValue > (maxtempV+3))
  2457  0251  3000               	movlw	0
  2458  0252                     L17:	
  2459  0252  022F               	subwf	_outADValue+1,w
  2460  0253  302C               	movlw	44
  2461  0254  1903               	skipnz
  2462  0255  022E               	subwf	_outADValue,w
  2463  0256  1803               	btfsc	3,0
  2464  0257  2A49               	goto	l3139
  2465                           
  2466                           ;main.c: 634: else
  2467                           ;main.c: 635: {
  2468                           ;main.c: 636: unsigned char maxAout = 11;
  2469                           
  2470                           ;main.c: 628: {
  2471                           ;main.c: 629: if(++overCount > 5)
  2472  0258  300B               	movlw	11
  2473  0259  00E9               	movwf	checkOutA@maxAout
  2474                           
  2475                           ;main.c: 637: if(workStep == 1)
  2476  025A  0B79               	decfsz	_workStep,w
  2477  025B  2A5E               	goto	l3155
  2478                           
  2479                           ;main.c: 638: {
  2480                           ;main.c: 639: maxAout = maxAout + 5;
  2481  025C  3005               	movlw	5
  2482  025D  2A7B               	goto	L14
  2483  025E                     l3155:	
  2484                           ;main.c: 640: }
  2485                           
  2486                           
  2487                           ;main.c: 641: else if(workStep == 2)
  2488  025E  3002               	movlw	2
  2489  025F  0679               	xorwf	_workStep,w
  2490  0260  1D03               	btfss	3,2
  2491  0261  2A64               	goto	l3159
  2492                           
  2493                           ;main.c: 642: {
  2494                           ;main.c: 643: maxAout = maxAout + 6;
  2495  0262  3006               	movlw	6
  2496  0263  2A7B               	goto	L14
  2497  0264                     l3159:	
  2498                           ;main.c: 644: }
  2499                           
  2500                           
  2501                           ;main.c: 645: else if(workStep == 3)
  2502  0264  3003               	movlw	3
  2503  0265  0679               	xorwf	_workStep,w
  2504  0266  1D03               	btfss	3,2
  2505  0267  2A6A               	goto	l3163
  2506                           
  2507                           ;main.c: 646: {
  2508                           ;main.c: 647: maxAout = maxAout + 7;
  2509  0268  3007               	movlw	7
  2510  0269  2A7B               	goto	L14
  2511  026A                     l3163:	
  2512                           ;main.c: 648: }
  2513                           
  2514                           
  2515                           ;main.c: 649: else if(workStep == 4)
  2516  026A  3004               	movlw	4
  2517  026B  0679               	xorwf	_workStep,w
  2518  026C  1D03               	btfss	3,2
  2519  026D  2A70               	goto	l3167
  2520                           
  2521                           ;main.c: 650: {
  2522                           ;main.c: 651: maxAout = maxAout + 8;
  2523  026E  3008               	movlw	8
  2524  026F  2A7B               	goto	L14
  2525  0270                     l3167:	
  2526                           ;main.c: 652: }
  2527                           
  2528                           
  2529                           ;main.c: 653: else if(workStep == 5)
  2530  0270  3005               	movlw	5
  2531  0271  0679               	xorwf	_workStep,w
  2532  0272  1D03               	btfss	3,2
  2533  0273  2A76               	goto	l3171
  2534                           
  2535                           ;main.c: 654: {
  2536                           ;main.c: 655: maxAout = maxAout + 9;
  2537  0274  3009               	movlw	9
  2538  0275  2A7B               	goto	L14
  2539  0276                     l3171:	
  2540                           ;main.c: 656: }
  2541                           
  2542                           
  2543                           ;main.c: 657: else if(workStep == 6)
  2544  0276  3006               	movlw	6
  2545  0277  0679               	xorwf	_workStep,w
  2546  0278  1D03               	btfss	3,2
  2547  0279  2A7C               	goto	l810
  2548                           
  2549                           ;main.c: 658: {
  2550                           ;main.c: 659: maxAout = maxAout + 10;
  2551  027A  300A               	movlw	10
  2552  027B                     L14:	
  2553  027B  07E9               	addwf	checkOutA@maxAout,f
  2554  027C                     l810:	
  2555                           
  2556                           ;main.c: 660: }
  2557                           ;main.c: 661: if(overCount > 0)
  2558  027C  0849               	movf	_overCount,w
  2559  027D  1D03               	btfss	3,2
  2560                           
  2561                           ;main.c: 662: {
  2562                           ;main.c: 663: overCount--;
  2563  027E  03C9               	decf	_overCount,f
  2564                           
  2565                           ;main.c: 664: }
  2566                           ;main.c: 665: if(outADValue > maxAout)
  2567  027F  0869               	movf	checkOutA@maxAout,w
  2568  0280  00F4               	movwf	??_checkOutA
  2569  0281  01F5               	clrf	??_checkOutA+1
  2570  0282  082F               	movf	_outADValue+1,w
  2571  0283  0275               	subwf	??_checkOutA+1,w
  2572  0284  1D03               	skipz
  2573  0285  2A88               	goto	u3475
  2574  0286  082E               	movf	_outADValue,w
  2575  0287  0274               	subwf	??_checkOutA,w
  2576  0288                     u3475:	
  2577  0288  1803               	skipnc
  2578  0289  2AA3               	goto	l3189
  2579                           
  2580                           ;main.c: 666: {
  2581                           ;main.c: 667: if(++addPowerCount > 3)
  2582  028A  3004               	movlw	4
  2583  028B  0AC8               	incf	_addPowerCount,f
  2584  028C  0248               	subwf	_addPowerCount,w
  2585  028D  1C03               	skipc
  2586  028E  2AA9               	goto	l3197
  2587                           
  2588                           ;main.c: 668: {
  2589                           ;main.c: 669: addPowerCount = 3;
  2590  028F  3003               	movlw	3
  2591  0290  00C8               	movwf	_addPowerCount
  2592                           
  2593                           ;main.c: 670: if(startTime == 0)
  2594  0291  0846               	movf	_startTime,w
  2595  0292  1D03               	btfss	3,2
  2596  0293  2AA0               	goto	l3187
  2597                           
  2598                           ;main.c: 671: {
  2599                           ;main.c: 672: tempDuty = 72 + (workStep*4);
  2600  0294  0879               	movf	_workStep,w
  2601  0295  00F4               	movwf	??_checkOutA
  2602  0296  3001               	movlw	1
  2603  0297  1003               	clrc
  2604  0298                     L8:	
  2605  0298  0DF4               	rlf	??_checkOutA,f
  2606  0299  3EFF               	addlw	-1
  2607  029A  1003               	clrc
  2608  029B  1D03               	skipz
  2609  029C  2A98               	goto	L8
  2610  029D  0D74               	rlf	??_checkOutA,w
  2611  029E  3E48               	addlw	72
  2612  029F  2AA1               	goto	L15
  2613  02A0                     l3187:	
  2614                           ;main.c: 674: }
  2615                           
  2616                           
  2617                           ;main.c: 675: else
  2618                           ;main.c: 676: {
  2619                           ;main.c: 677: tempDuty = maxDuty;
  2620  02A0  084A               	movf	_maxDuty,w
  2621  02A1                     L15:	
  2622  02A1  00C7               	movwf	_tempDuty
  2623  02A2  2AA9               	goto	l3197
  2624  02A3                     l3189:	
  2625                           
  2626                           ;main.c: 682: else
  2627                           ;main.c: 683: {
  2628                           ;main.c: 684: addPowerCount = 0;
  2629  02A3  01C8               	clrf	_addPowerCount
  2630                           
  2631                           ;main.c: 685: if(tempDuty > maxDuty)
  2632  02A4  0847               	movf	_tempDuty,w
  2633  02A5  024A               	subwf	_maxDuty,w
  2634  02A6  1803               	skipnc
  2635  02A7  2AA0               	goto	l3187
  2636                           
  2637                           ;main.c: 686: {
  2638                           ;main.c: 687: tempDuty--;
  2639  02A8  03C7               	decf	_tempDuty,f
  2640  02A9                     l3197:	
  2641                           ;main.c: 688: }
  2642                           
  2643                           
  2644                           ;main.c: 692: }
  2645                           ;main.c: 694: }
  2646                           ;main.c: 696: }
  2647                           ;main.c: 697: PWMD01H = 0X00;
  2648  02A9  019E               	clrf	30	;volatile
  2649                           
  2650                           ;main.c: 698: PWMD1L = tempDuty;
  2651  02AA  0847               	movf	_tempDuty,w
  2652  02AB  009A               	movwf	26	;volatile
  2653                           
  2654                           ;main.c: 699: }
  2655  02AC  0008               	return
  2656  02AD                     l3201:	
  2657                           
  2658                           ;main.c: 700: else
  2659                           ;main.c: 701: {
  2660                           ;main.c: 702: ADCON0 = 0;
  2661  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2662  02AE  0195               	clrf	21	;volatile
  2663                           
  2664                           ;main.c: 703: ADCON1 = 0;
  2665  02AF  0196               	clrf	22	;volatile
  2666                           
  2667                           ;main.c: 704: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2668  02B0  3085               	movlw	133
  2669  02B1  00F4               	movwf	??_checkOutA
  2670  02B2                     u4207:	
  2671  02B2  0BF4               	decfsz	??_checkOutA,f
  2672  02B3  2AB2               	goto	u4207
  2673  02B4  0008               	return
  2674  02B5                     __end_of_checkOutA:	
  2675                           
  2676                           	psect	text14
  2677  02B5                     __ptext14:	
  2678 ;; *************** function _checkBatAD *****************
  2679 ;; Defined at:
  2680 ;;		line 708 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0, pclath, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 100/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1
  2694 ;;      Params:         0       0       0
  2695 ;;      Locals:         0       0       0
  2696 ;;      Temps:          2       0       0
  2697 ;;      Totals:         2       0       0
  2698 ;;Total ram usage:        2 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    3
  2701 ;; This function calls:
  2702 ;;		_ADC_Sample
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           
  2709                           ;psect for function _checkBatAD
  2710  02B5                     _checkBatAD:	
  2711                           
  2712                           ;main.c: 710: test_adc = ADC_Sample(2, 5);
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2716  02B5  3005               	movlw	5
  2717  02B6  00F3               	movwf	ADC_Sample@adldo
  2718  02B7  3002               	movlw	2
  2719  02B8  211C               	fcall	_ADC_Sample
  2720  02B9  00D6               	movwf	_test_adc	;volatile
  2721                           
  2722                           ;main.c: 711: if (0xA5 == test_adc)
  2723  02BA  30A5               	movlw	165
  2724  02BB  0656               	xorwf	_test_adc,w	;volatile
  2725  02BC  1D03               	btfss	3,2
  2726  02BD  2B1D               	goto	l3397
  2727                           
  2728                           ;main.c: 712: {
  2729                           ;main.c: 713: batADValue = adresult;
  2730  02BE  0835               	movf	_adresult+1,w	;volatile
  2731  02BF  00AD               	movwf	_batADValue+1
  2732  02C0  0834               	movf	_adresult,w	;volatile
  2733  02C1  00AC               	movwf	_batADValue
  2734                           
  2735                           ;main.c: 714: if(batADValue < 1117)
  2736  02C2  3004               	movlw	4
  2737  02C3  022D               	subwf	_batADValue+1,w
  2738  02C4  305D               	movlw	93
  2739  02C5  1903               	skipnz
  2740  02C6  022C               	subwf	_batADValue,w
  2741  02C7  1803               	skipnc
  2742  02C8  2AE3               	goto	l3379
  2743                           
  2744                           ;main.c: 715: {
  2745                           ;main.c: 716: pwStep = 0;
  2746  02C9  01C4               	clrf	_pwStep
  2747                           
  2748                           ;main.c: 717: if(++count8s > 800)
  2749  02CA  0AA2               	incf	_count8s,f
  2750  02CB  1903               	skipnz
  2751  02CC  0AA3               	incf	_count8s+1,f
  2752  02CD  3003               	movlw	3
  2753  02CE  0223               	subwf	_count8s+1,w
  2754  02CF  3021               	movlw	33
  2755  02D0  1903               	skipnz
  2756  02D1  0222               	subwf	_count8s,w
  2757  02D2  1C03               	skipc
  2758  02D3  2B10               	goto	l3391
  2759                           
  2760                           ;main.c: 718: {
  2761                           ;main.c: 719: count8s = 0;
  2762  02D4  01A2               	clrf	_count8s
  2763  02D5  01A3               	clrf	_count8s+1
  2764                           
  2765                           ;main.c: 720: lowBatFlag = 1;
  2766  02D6  01B7               	clrf	_lowBatFlag
  2767  02D7  0AB7               	incf	_lowBatFlag,f
  2768                           
  2769                           ;main.c: 721: if(workStep > 0)
  2770  02D8  0879               	movf	_workStep,w
  2771  02D9  1903               	btfsc	3,2
  2772  02DA  2AE0               	goto	l3375
  2773                           
  2774                           ;main.c: 722: {
  2775                           ;main.c: 723: overWorkTime = 120;
  2776  02DB  3078               	movlw	120
  2777  02DC  00A4               	movwf	_overWorkTime
  2778  02DD  01A5               	clrf	_overWorkTime+1
  2779                           
  2780                           ;main.c: 724: preLedStep = workStep;
  2781  02DE  0879               	movf	_workStep,w
  2782  02DF  00B8               	movwf	_preLedStep
  2783  02E0                     l3375:	
  2784                           
  2785                           ;main.c: 725: }
  2786                           ;main.c: 726: prePwStep = 0;
  2787  02E0  01F7               	clrf	_prePwStep
  2788                           
  2789                           ;main.c: 727: workStep = 0;
  2790  02E1  01F9               	clrf	_workStep
  2791  02E2  2B10               	goto	l3391
  2792  02E3                     l3379:	
  2793  02E3  3005               	movlw	5
  2794                           
  2795                           ;main.c: 730: else
  2796                           ;main.c: 731: {
  2797                           ;main.c: 732: count8s = 0;
  2798  02E4  01A2               	clrf	_count8s
  2799  02E5  01A3               	clrf	_count8s+1
  2800                           
  2801                           ;main.c: 733: if(batADValue >= 1340)
  2802  02E6  022D               	subwf	_batADValue+1,w
  2803  02E7  303C               	movlw	60
  2804  02E8  1903               	skipnz
  2805  02E9  022C               	subwf	_batADValue,w
  2806                           
  2807                           ;main.c: 734: {
  2808                           ;main.c: 735: pwStep = ((batADValue - 1340) /2) + 13;
  2809  02EA  082C               	movf	_batADValue,w
  2810  02EB  1C03               	skipc
  2811  02EC  2AFA               	goto	L19
  2812  02ED  3EC4               	addlw	196
  2813  02EE  00F4               	movwf	??_checkBatAD
  2814  02EF  082D               	movf	_batADValue+1,w
  2815  02F0  1803               	skipnc
  2816  02F1  3E01               	addlw	1
  2817  02F2  3EFA               	addlw	250
  2818  02F3  00F5               	movwf	??_checkBatAD+1
  2819  02F4  1003               	clrc
  2820  02F5  0CF5               	rrf	??_checkBatAD+1,f
  2821  02F6  0CF4               	rrf	??_checkBatAD,f
  2822  02F7  0874               	movf	??_checkBatAD,w
  2823  02F8  3E0D               	addlw	13
  2824  02F9  2B09               	goto	L18
  2825  02FA                     L19:	
  2826                           ;main.c: 737: else
  2827                           ;main.c: 738: {
  2828                           ;main.c: 739: pwStep = (batADValue - 1117) / 16;
  2829                           
  2830                           ;main.c: 736: }
  2831                           
  2832  02FA  3EA3               	addlw	163
  2833  02FB  00F4               	movwf	??_checkBatAD
  2834  02FC  082D               	movf	_batADValue+1,w
  2835  02FD  1803               	skipnc
  2836  02FE  3E01               	addlw	1
  2837  02FF  3EFB               	addlw	251
  2838  0300  00F5               	movwf	??_checkBatAD+1
  2839  0301  3004               	movlw	4
  2840  0302                     u3875:	
  2841  0302  1003               	clrc
  2842  0303  0CF5               	rrf	??_checkBatAD+1,f
  2843  0304  0CF4               	rrf	??_checkBatAD,f
  2844  0305  3EFF               	addlw	-1
  2845  0306  1D03               	skipz
  2846  0307  2B02               	goto	u3875
  2847  0308  0874               	movf	??_checkBatAD,w
  2848  0309                     L18:	
  2849  0309  00C4               	movwf	_pwStep
  2850                           
  2851                           ;main.c: 740: }
  2852                           ;main.c: 741: if(pwStep > 99)
  2853  030A  3064               	movlw	100
  2854  030B  0244               	subwf	_pwStep,w
  2855  030C  1C03               	skipc
  2856  030D  2B10               	goto	l3391
  2857                           
  2858                           ;main.c: 742: {
  2859                           ;main.c: 743: pwStep = 99;
  2860  030E  3063               	movlw	99
  2861  030F  00C4               	movwf	_pwStep
  2862  0310                     l3391:	
  2863                           
  2864                           ;main.c: 744: }
  2865                           ;main.c: 745: }
  2866                           ;main.c: 746: if(chrgFlag && batADValue > 1861)
  2867  0310  087A               	movf	_chrgFlag,w
  2868  0311  1903               	btfsc	3,2
  2869  0312  2B24               	goto	l3401
  2870  0313  3007               	movlw	7
  2871  0314  022D               	subwf	_batADValue+1,w
  2872  0315  3046               	movlw	70
  2873  0316  1903               	skipnz
  2874  0317  022C               	subwf	_batADValue,w
  2875  0318  1C03               	skipc
  2876  0319  2B24               	goto	l3401
  2877                           
  2878                           ;main.c: 747: {
  2879                           ;main.c: 748: protectFlag = 1;
  2880  031A  01CF               	clrf	_protectFlag
  2881  031B  0ACF               	incf	_protectFlag,f
  2882  031C  2B24               	goto	l3401
  2883  031D                     l3397:	
  2884                           
  2885                           ;main.c: 751: else
  2886                           ;main.c: 752: {
  2887                           ;main.c: 753: ADCON0 = 0;
  2888  031D  1683               	bsf	3,5	;RP0=1, select bank1
  2889  031E  0195               	clrf	21	;volatile
  2890                           
  2891                           ;main.c: 754: ADCON1 = 0;
  2892  031F  0196               	clrf	22	;volatile
  2893                           
  2894                           ;main.c: 755: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2895  0320  3085               	movlw	133
  2896  0321  00F4               	movwf	??_checkBatAD
  2897  0322                     u4217:	
  2898  0322  0BF4               	decfsz	??_checkBatAD,f
  2899  0323  2B22               	goto	u4217
  2900  0324                     l3401:	
  2901                           
  2902                           ;main.c: 756: }
  2903                           ;main.c: 757: test_adc = ADC_Sample(3, 5);
  2904  0324  3005               	movlw	5
  2905  0325  00F3               	movwf	ADC_Sample@adldo
  2906  0326  3003               	movlw	3
  2907  0327  211C               	fcall	_ADC_Sample
  2908  0328  00D6               	movwf	_test_adc	;volatile
  2909                           
  2910                           ;main.c: 758: if (0xA5 == test_adc)
  2911  0329  30A5               	movlw	165
  2912  032A  0656               	xorwf	_test_adc,w	;volatile
  2913  032B  1D03               	btfss	3,2
  2914  032C  2B58               	goto	l3421
  2915                           
  2916                           ;main.c: 759: {
  2917                           ;main.c: 760: if(chrgFlag && adresult > 100)
  2918  032D  087A               	movf	_chrgFlag,w
  2919  032E  1903               	btfsc	3,2
  2920  032F  0008               	return
  2921  0330  3000               	movlw	0
  2922  0331  0235               	subwf	_adresult+1,w	;volatile
  2923  0332  3065               	movlw	101
  2924  0333  1903               	skipnz
  2925  0334  0234               	subwf	_adresult,w	;volatile
  2926  0335  1C03               	skipc
  2927  0336  0008               	return
  2928                           
  2929                           ;main.c: 761: {
  2930                           ;main.c: 763: if(adresult > 810 || (batADValue - adresult) > 810)
  2931  0337  3003               	movlw	3
  2932  0338  0235               	subwf	_adresult+1,w	;volatile
  2933  0339  302B               	movlw	43
  2934  033A  1903               	skipnz
  2935  033B  0234               	subwf	_adresult,w	;volatile
  2936  033C  1803               	skipnc
  2937  033D  2B4D               	goto	l3413
  2938  033E  0834               	movf	_adresult,w	;volatile
  2939  033F  022C               	subwf	_batADValue,w
  2940  0340  00F4               	movwf	??_checkBatAD
  2941  0341  0835               	movf	_adresult+1,w	;volatile
  2942  0342  1C03               	skipc
  2943  0343  0A35               	incf	_adresult+1,w	;volatile
  2944  0344  022D               	subwf	_batADValue+1,w
  2945  0345  00F5               	movwf	??_checkBatAD+1
  2946  0346  3003               	movlw	3
  2947  0347  0275               	subwf	??_checkBatAD+1,w
  2948  0348  302B               	movlw	43
  2949  0349  1903               	skipnz
  2950  034A  0274               	subwf	??_checkBatAD,w
  2951  034B  1C03               	skipc
  2952  034C  2B56               	goto	l3419
  2953  034D                     l3413:	
  2954                           
  2955                           ;main.c: 764: {
  2956                           ;main.c: 766: if(++countHalfFull > 250)
  2957  034D  30FB               	movlw	251
  2958  034E  0AD0               	incf	_countHalfFull,f
  2959  034F  0250               	subwf	_countHalfFull,w
  2960  0350  1C03               	skipc
  2961  0351  0008               	return
  2962  0352  3002               	movlw	2
  2963                           
  2964                           ;main.c: 767: {
  2965                           ;main.c: 768: countHalfFull = 0;
  2966  0353  01D0               	clrf	_countHalfFull
  2967                           
  2968                           ;main.c: 769: protectFlag = 2;
  2969  0354  00CF               	movwf	_protectFlag
  2970  0355  0008               	return
  2971  0356                     l3419:	
  2972                           
  2973                           ;main.c: 772: else
  2974                           ;main.c: 773: {
  2975                           ;main.c: 774: countHalfFull = 0;
  2976  0356  01D0               	clrf	_countHalfFull
  2977                           
  2978                           ;main.c: 775: }
  2979                           ;main.c: 776: }
  2980                           ;main.c: 777: }
  2981  0357  0008               	return
  2982  0358                     l3421:	
  2983                           
  2984                           ;main.c: 778: else
  2985                           ;main.c: 779: {
  2986                           ;main.c: 780: ADCON0 = 0;
  2987  0358  1683               	bsf	3,5	;RP0=1, select bank1
  2988  0359  0195               	clrf	21	;volatile
  2989                           
  2990                           ;main.c: 781: ADCON1 = 0;
  2991  035A  0196               	clrf	22	;volatile
  2992                           
  2993                           ;main.c: 782: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2994  035B  3085               	movlw	133
  2995  035C  00F4               	movwf	??_checkBatAD
  2996  035D                     u4227:	
  2997  035D  0BF4               	decfsz	??_checkBatAD,f
  2998  035E  2B5D               	goto	u4227
  2999  035F  0008               	return
  3000  0360                     __end_of_checkBatAD:	
  3001                           
  3002                           	psect	text15
  3003  011C                     __ptext15:	
  3004 ;; *************** function _ADC_Sample *****************
  3005 ;; Defined at:
  3006 ;;		line 1015 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  adch            1    wreg     unsigned char 
  3009 ;;  adldo           1    3[COMMON] unsigned char 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  adch            1    5[BANK0 ] unsigned char 
  3012 ;;  j               1    4[BANK0 ] unsigned char 
  3013 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3014 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3015 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3016 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3017 ;;  i               1    6[BANK0 ] unsigned char 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      unsigned char 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 100/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1
  3027 ;;      Params:         1       0       0
  3028 ;;      Locals:         0      13       0
  3029 ;;      Temps:          0       4       0
  3030 ;;      Totals:         1      17       0
  3031 ;;Total ram usage:       18 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    2
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_checkOutA
  3038 ;;		_checkBatAD
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           
  3043                           ;psect for function _ADC_Sample
  3044  011C                     _ADC_Sample:	
  3045                           
  3046                           ;incstack = 0
  3047                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3048                           ;ADC_Sample@adch stored from wreg
  3049  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3050  011D  00DC               	movwf	ADC_Sample@adch
  3051                           
  3052                           ;main.c: 1017: volatile unsigned long adsum = 0;
  3053                           
  3054                           ;main.c: 1018: volatile unsigned int admin = 0, admax = 0;
  3055  011E  21F7               	fcall	PL4	;call to abstracted procedure
  3056                           
  3057                           ;main.c: 1019: volatile unsigned int ad_temp = 0;
  3058  011F  01E6               	clrf	ADC_Sample@ad_temp	;volatile
  3059  0120  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3060                           
  3061                           ;main.c: 1021: if ((!LDO_EN) && (adldo & 0x04) )
  3062  0121  1683               	bsf	3,5	;RP0=1, select bank1
  3063  0122  1D16               	btfss	22,2	;volatile
  3064  0123  1D73               	btfss	ADC_Sample@adldo,2
  3065  0124  292E               	goto	l3001
  3066                           
  3067                           ;main.c: 1022: {
  3068                           ;main.c: 1024: ADCON1 = adldo;
  3069  0125  0873               	movf	ADC_Sample@adldo,w
  3070  0126  0096               	movwf	22	;volatile
  3071                           
  3072                           ;main.c: 1025: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3073  0127  3084               	movlw	132
  3074  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0129  00D7               	movwf	??_ADC_Sample
  3076  012A                     u4237:	
  3077  012A  0BD7               	decfsz	??_ADC_Sample,f
  3078  012B  292A               	goto	u4237
  3079  012C  292D               	nop2
  3080                           
  3081                           ;main.c: 1026: }
  3082  012D  2930               	goto	l3003
  3083  012E                     l3001:	
  3084                           
  3085                           ;main.c: 1027: else
  3086                           ;main.c: 1028: ADCON1 = adldo;
  3087  012E  0873               	movf	ADC_Sample@adldo,w
  3088  012F  0096               	movwf	22	;volatile
  3089  0130                     l3003:	
  3090                           
  3091                           ;main.c: 1030: if(adch & 0x10)
  3092  0130  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0131  1E5C               	btfss	ADC_Sample@adch,4
  3094  0132  2938               	goto	l3011
  3095                           
  3096                           ;main.c: 1031: {
  3097                           ;main.c: 1032: CHS4 = 1;
  3098  0133  1683               	bsf	3,5	;RP0=1, select bank1
  3099  0134  1716               	bsf	22,6	;volatile
  3100                           
  3101                           ;main.c: 1033: adch &= 0x0f;
  3102  0135  300F               	movlw	15
  3103  0136  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0137  05DC               	andwf	ADC_Sample@adch,f
  3105  0138                     l3011:	
  3106                           
  3107                           ;main.c: 1036: for (i = 0; i < 10; i++)
  3108  0138  01DD               	clrf	ADC_Sample@i
  3109  0139                     l3017:	
  3110                           
  3111                           ;main.c: 1037: {
  3112                           ;main.c: 1038: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3113  0139  085C               	movf	ADC_Sample@adch,w
  3114  013A  00D7               	movwf	??_ADC_Sample
  3115  013B  3001               	movlw	1
  3116  013C  1003               	clrc
  3117  013D                     L20:	
  3118  013D  0DD7               	rlf	??_ADC_Sample,f
  3119  013E  3EFF               	addlw	-1
  3120  013F  1003               	clrc
  3121  0140  1D03               	skipz
  3122  0141  293D               	goto	L20
  3123  0142  0D57               	rlf	??_ADC_Sample,w
  3124  0143  3841               	iorlw	65
  3125  0144  1683               	bsf	3,5	;RP0=1, select bank1
  3126  0145  0095               	movwf	21	;volatile
  3127  0146  0000               	nop	;# 
  3128  0147  0000               	nop	;# 
  3129  0148  0000               	nop	;# 
  3130  0149  0000               	nop	;# 
  3131                           
  3132                           ;main.c: 1043: GODONE = 1;
  3133  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3134  014B  1495               	bsf	21,1	;volatile
  3135                           
  3136                           ;main.c: 1045: unsigned char j = 0;
  3137  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3138  014D  01DB               	clrf	ADC_Sample@j
  3139  014E                     l882:	
  3140                           ;main.c: 1046: while (GODONE)
  3141                           
  3142  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3143  014F  1C95               	btfss	21,1	;volatile
  3144  0150  2959               	goto	l3027
  3145                           
  3146                           ;main.c: 1047: {
  3147                           ;main.c: 1048: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3148  0151  2952               	nop2	;2 cycle nop
  3149  0152  2953               	nop2	;2 cycle nop
  3150  0153  2954               	nop2	;2 cycle nop
  3151  0154  2955               	nop2	;2 cycle nop
  3152                           
  3153                           ;main.c: 1050: if (0 == (--j))
  3154  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0156  0BDB               	decfsz	ADC_Sample@j,f
  3156  0157  294E               	goto	l882
  3157                           
  3158                           ;main.c: 1051: return 0;
  3159  0158  3400               	retlw	0
  3160  0159                     l3027:	
  3161                           
  3162                           ;main.c: 1052: }
  3163                           ;main.c: 1054: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3164  0159  0819               	movf	25,w	;volatile
  3165  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3166  015B  00E6               	movwf	ADC_Sample@ad_temp	;volatile
  3167  015C  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3168  015D  0EE6               	swapf	ADC_Sample@ad_temp,f	;volatile
  3169  015E  0EE7               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3170  015F  30F0               	movlw	240
  3171  0160  05E7               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3172  0161  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3173  0162  390F               	andlw	15
  3174  0163  04E7               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3175  0164  30F0               	movlw	240
  3176  0165  05E6               	andwf	ADC_Sample@ad_temp,f	;volatile
  3177  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3178  0167  0E18               	swapf	24,w	;volatile
  3179  0168  390F               	andlw	15
  3180  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3181  016A  07E6               	addwf	ADC_Sample@ad_temp,f	;volatile
  3182  016B  1803               	skipnc
  3183  016C  0AE7               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3184                           
  3185                           ;main.c: 1056: if (0 == admax)
  3186  016D  0864               	movf	ADC_Sample@admax,w	;volatile
  3187  016E  0465               	iorwf	ADC_Sample@admax+1,w	;volatile
  3188  016F  1D03               	btfss	3,2
  3189  0170  2973               	goto	l3035
  3190                           
  3191                           ;main.c: 1057: {
  3192                           ;main.c: 1058: admax = ad_temp;
  3193  0171  2200               	fcall	PL10	;call to abstracted procedure
  3194  0172  2985               	goto	l3041
  3195  0173                     l3035:	
  3196                           ;main.c: 1060: }
  3197                           
  3198                           ;main.c: 1059: admin = ad_temp;
  3199                           
  3200                           
  3201                           ;main.c: 1061: else if (ad_temp > admax)
  3202  0173  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3203  0174  0265               	subwf	ADC_Sample@admax+1,w	;volatile
  3204  0175  1D03               	skipz
  3205  0176  2979               	goto	u3125
  3206  0177  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3207  0178  0264               	subwf	ADC_Sample@admax,w	;volatile
  3208  0179                     u3125:	
  3209  0179  1803               	skipnc
  3210  017A  297D               	goto	l3039
  3211                           
  3212                           ;main.c: 1062: admax = ad_temp;
  3213  017B  2200               	fcall	PL10	;call to abstracted procedure
  3214  017C  2989               	goto	l888
  3215  017D                     l3039:	
  3216                           
  3217                           ;main.c: 1063: else if (ad_temp < admin)
  3218  017D  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3219  017E  0267               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3220  017F  1D03               	skipz
  3221  0180  2983               	goto	u3135
  3222  0181  0862               	movf	ADC_Sample@admin,w	;volatile
  3223  0182  0266               	subwf	ADC_Sample@ad_temp,w	;volatile
  3224  0183                     u3135:	
  3225  0183  1803               	skipnc
  3226  0184  2989               	goto	l888
  3227  0185                     l3041:	
  3228                           
  3229                           ;main.c: 1064: admin = ad_temp;
  3230  0185  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3231  0186  00E3               	movwf	ADC_Sample@admin+1	;volatile
  3232  0187  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3233  0188  00E2               	movwf	ADC_Sample@admin	;volatile
  3234  0189                     l888:	
  3235                           
  3236                           ;main.c: 1066: adsum += ad_temp;
  3237  0189  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3238  018A  00D7               	movwf	??_ADC_Sample
  3239  018B  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3240  018C  00D8               	movwf	??_ADC_Sample+1
  3241  018D  01D9               	clrf	??_ADC_Sample+2
  3242  018E  01DA               	clrf	??_ADC_Sample+3
  3243  018F  0857               	movf	??_ADC_Sample,w
  3244  0190  07DE               	addwf	ADC_Sample@adsum,f	;volatile
  3245  0191  0858               	movf	??_ADC_Sample+1,w
  3246  0192  1103               	clrz
  3247  0193  1803               	skipnc
  3248  0194  3E01               	addlw	1
  3249  0195  1D03               	btfss	3,2
  3250  0196  07DF               	addwf	ADC_Sample@adsum+1,f	;volatile
  3251  0197  0859               	movf	??_ADC_Sample+2,w
  3252  0198  1103               	clrz
  3253  0199  1803               	skipnc
  3254  019A  3E01               	addlw	1
  3255  019B  1D03               	btfss	3,2
  3256  019C  07E0               	addwf	ADC_Sample@adsum+2,f	;volatile
  3257  019D  085A               	movf	??_ADC_Sample+3,w
  3258  019E  1103               	clrz
  3259  019F  1803               	skipnc
  3260  01A0  3E01               	addlw	1
  3261  01A1  1D03               	btfss	3,2
  3262  01A2  07E1               	addwf	ADC_Sample@adsum+3,f	;volatile
  3263  01A3  300A               	movlw	10
  3264  01A4  0ADD               	incf	ADC_Sample@i,f
  3265  01A5  025D               	subwf	ADC_Sample@i,w
  3266  01A6  1C03               	skipc
  3267  01A7  2939               	goto	l3017
  3268                           
  3269                           ;main.c: 1067: }
  3270                           ;main.c: 1068: adsum -= admax;
  3271  01A8  0864               	movf	ADC_Sample@admax,w	;volatile
  3272  01A9  00D7               	movwf	??_ADC_Sample
  3273  01AA  0865               	movf	ADC_Sample@admax+1,w	;volatile
  3274  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3275  01AC  1C03               	skipc
  3276  01AD  0F5A               	incfsz	??_ADC_Sample+3,w
  3277  01AE  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3278                           
  3279                           ;main.c: 1069: if (adsum >= admin)
  3280  01AF  0862               	movf	ADC_Sample@admin,w	;volatile
  3281  01B0  00D7               	movwf	??_ADC_Sample
  3282  01B1  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3283  01B2  00D8               	movwf	??_ADC_Sample+1
  3284  01B3  01D9               	clrf	??_ADC_Sample+2
  3285  01B4  01DA               	clrf	??_ADC_Sample+3
  3286  01B5  085A               	movf	??_ADC_Sample+3,w
  3287  01B6  0261               	subwf	ADC_Sample@adsum+3,w	;volatile
  3288  01B7  1D03               	skipz
  3289  01B8  29C3               	goto	u3175
  3290  01B9  0859               	movf	??_ADC_Sample+2,w
  3291  01BA  0260               	subwf	ADC_Sample@adsum+2,w	;volatile
  3292  01BB  1D03               	skipz
  3293  01BC  29C3               	goto	u3175
  3294  01BD  0858               	movf	??_ADC_Sample+1,w
  3295  01BE  025F               	subwf	ADC_Sample@adsum+1,w	;volatile
  3296  01BF  1D03               	skipz
  3297  01C0  29C3               	goto	u3175
  3298  01C1  0857               	movf	??_ADC_Sample,w
  3299  01C2  025E               	subwf	ADC_Sample@adsum,w	;volatile
  3300  01C3                     u3175:	
  3301  01C3  1C03               	skipc
  3302  01C4  29CD               	goto	l892
  3303                           
  3304                           ;main.c: 1070: adsum -= admin;
  3305  01C5  0862               	movf	ADC_Sample@admin,w	;volatile
  3306  01C6  00D7               	movwf	??_ADC_Sample
  3307  01C7  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3308  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3309  01C9  1C03               	skipc
  3310  01CA  0F5A               	incfsz	??_ADC_Sample+3,w
  3311  01CB  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3312  01CC  29D1               	goto	l3051
  3313  01CD                     l892:	
  3314                           
  3315                           ;main.c: 1071: else
  3316                           ;main.c: 1072: adsum = 0;
  3317  01CD  01DE               	clrf	ADC_Sample@adsum	;volatile
  3318  01CE  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3319  01CF  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3320  01D0  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3321  01D1                     l3051:	
  3322                           
  3323                           ;main.c: 1074: adresult = adsum >> 3;
  3324  01D1  085E               	movf	ADC_Sample@adsum,w	;volatile
  3325  01D2  00D7               	movwf	??_ADC_Sample
  3326  01D3  085F               	movf	ADC_Sample@adsum+1,w	;volatile
  3327  01D4  00D8               	movwf	??_ADC_Sample+1
  3328  01D5  0860               	movf	ADC_Sample@adsum+2,w	;volatile
  3329  01D6  00D9               	movwf	??_ADC_Sample+2
  3330  01D7  0861               	movf	ADC_Sample@adsum+3,w	;volatile
  3331  01D8  00DA               	movwf	??_ADC_Sample+3
  3332  01D9  3003               	movlw	3
  3333  01DA                     u3195:	
  3334  01DA  1003               	clrc
  3335  01DB  0CDA               	rrf	??_ADC_Sample+3,f
  3336  01DC  0CD9               	rrf	??_ADC_Sample+2,f
  3337  01DD  0CD8               	rrf	??_ADC_Sample+1,f
  3338  01DE  0CD7               	rrf	??_ADC_Sample,f
  3339  01DF  3EFF               	addlw	-1
  3340  01E0  1D03               	skipz
  3341  01E1  29DA               	goto	u3195
  3342  01E2  0858               	movf	??_ADC_Sample+1,w
  3343  01E3  00B5               	movwf	_adresult+1	;volatile
  3344  01E4  0857               	movf	??_ADC_Sample,w
  3345  01E5  00B4               	movwf	_adresult	;volatile
  3346                           
  3347                           ;main.c: 1076: adsum = 0;
  3348                           
  3349                           ;main.c: 1077: admin = 0;
  3350                           
  3351                           ;main.c: 1078: admax = 0;
  3352  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3353                           
  3354                           ;main.c: 1079: return 0xA5;
  3355  01E7  34A5               	retlw	165
  3356  01E8                     __end_of_ADC_Sample:	
  3357  01E8                     PL2:	
  3358  01E8  00D8               	movwf	??_ADC_Sample+1
  3359  01E9  01D9               	clrf	??_ADC_Sample+2
  3360  01EA  01DA               	clrf	??_ADC_Sample+3
  3361  01EB  0857               	movf	??_ADC_Sample,w
  3362  01EC  02DE               	subwf	ADC_Sample@adsum,f	;volatile
  3363  01ED  0858               	movf	??_ADC_Sample+1,w
  3364  01EE  1C03               	skipc
  3365  01EF  0F58               	incfsz	??_ADC_Sample+1,w
  3366  01F0  02DF               	subwf	ADC_Sample@adsum+1,f	;volatile
  3367  01F1  0859               	movf	??_ADC_Sample+2,w
  3368  01F2  1C03               	skipc
  3369  01F3  0F59               	incfsz	??_ADC_Sample+2,w
  3370  01F4  02E0               	subwf	ADC_Sample@adsum+2,f	;volatile
  3371  01F5  085A               	movf	??_ADC_Sample+3,w
  3372  01F6  0008               	return
  3373  01F7                     __end_ofPL2:	
  3374  01F7                     PL4:	
  3375  01F7  01DE               	clrf	ADC_Sample@adsum	;volatile
  3376  01F8  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3377  01F9  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3378  01FA  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3379  01FB  01E2               	clrf	ADC_Sample@admin	;volatile
  3380  01FC  01E3               	clrf	ADC_Sample@admin+1	;volatile
  3381  01FD  01E4               	clrf	ADC_Sample@admax	;volatile
  3382  01FE  01E5               	clrf	ADC_Sample@admax+1	;volatile
  3383  01FF  0008               	return
  3384  0200                     __end_ofPL4:	
  3385  0200                     PL10:	
  3386  0200  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3387  0201  00E5               	movwf	ADC_Sample@admax+1	;volatile
  3388  0202  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3389  0203  00E4               	movwf	ADC_Sample@admax	;volatile
  3390  0204  0008               	return
  3391  0205                     __end_ofPL10:	
  3392                           
  3393                           	psect	text16
  3394  0411                     __ptext16:	
  3395 ;; *************** function _Sleep_Mode *****************
  3396 ;; Defined at:
  3397 ;;		line 939 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, pclath, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 100/0
  3408 ;;		On exit  : 100/100
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1
  3411 ;;      Params:         0       0       0
  3412 ;;      Locals:         0       0       0
  3413 ;;      Temps:          0       0       0
  3414 ;;      Totals:         0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    3
  3418 ;; This function calls:
  3419 ;;		_AD_Init
  3420 ;;		_Init_System
  3421 ;; This function is called by:
  3422 ;;		_main
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _Sleep_Mode
  3428  0411                     _Sleep_Mode:	
  3429                           
  3430                           ;main.c: 941: INTCON = 0;
  3431                           
  3432                           ;incstack = 0
  3433                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3434  0411  018B               	clrf	11	;volatile
  3435                           
  3436                           ;main.c: 943: OPTION_REG = 0;
  3437  0412  0181               	clrf	1	;volatile
  3438                           
  3439                           ;main.c: 945: TRISA = 0x1F;
  3440  0413  301F               	movlw	31
  3441  0414  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0415  0085               	movwf	5	;volatile
  3443                           
  3444                           ;main.c: 946: WPUA = 0B00000000;
  3445  0416  0188               	clrf	8	;volatile
  3446                           
  3447                           ;main.c: 947: PORTA = 0x00;
  3448  0417  0186               	clrf	6	;volatile
  3449                           
  3450                           ;main.c: 948: TRISB = 0B00000100;
  3451  0418  3004               	movlw	4
  3452  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3453  041A  0085               	movwf	5	;volatile
  3454                           
  3455                           ;main.c: 949: PORTB = 0B00000000;
  3456  041B  0186               	clrf	6	;volatile
  3457                           
  3458                           ;main.c: 950: WPUB = 0B00000100;
  3459  041C  0088               	movwf	8	;volatile
  3460                           
  3461                           ;main.c: 952: ADCON0 = 0;
  3462  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3463  041E  0195               	clrf	21	;volatile
  3464                           
  3465                           ;main.c: 953: ADCON1 = 0;
  3466  041F  0196               	clrf	22	;volatile
  3467                           
  3468                           ;main.c: 955: PWMCON0 = 0;
  3469  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0421  0195               	clrf	21	;volatile
  3471                           
  3472                           ;main.c: 957: OSCCON = 0X70;
  3473  0422  3070               	movlw	112
  3474  0423  0094               	movwf	20	;volatile
  3475                           
  3476                           ;main.c: 959: IOCA = 0B00000010;
  3477  0424  3002               	movlw	2
  3478  0425  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0426  0089               	movwf	9	;volatile
  3480                           
  3481                           ;main.c: 960: IOCB = 0B00000100;
  3482  0427  3004               	movlw	4
  3483  0428  1283               	bcf	3,5	;RP0=0, select bank0
  3484  0429  0089               	movwf	9	;volatile
  3485                           
  3486                           ;main.c: 962: RAIE = 1;
  3487  042A  158E               	bsf	14,3	;volatile
  3488                           
  3489                           ;main.c: 963: PEIE = 1;
  3490  042B  170B               	bsf	11,6	;volatile
  3491                           
  3492                           ;main.c: 964: RBIE = 1;
  3493  042C  158B               	bsf	11,3	;volatile
  3494                           
  3495                           ;main.c: 965: GIE = 0;
  3496  042D  138B               	bcf	11,7	;volatile
  3497                           
  3498                           ;main.c: 967: PIE1 &= 0X08;
  3499  042E  3008               	movlw	8
  3500  042F  058E               	andwf	14,f	;volatile
  3501                           
  3502                           ;main.c: 968: PIR1 = 0;
  3503  0430  018D               	clrf	13	;volatile
  3504                           
  3505                           ;main.c: 969: INTCON &= 0XC8;
  3506  0431  30C8               	movlw	200
  3507  0432  058B               	andwf	11,f	;volatile
  3508                           
  3509                           ;main.c: 971: PORTA;
  3510  0433  1683               	bsf	3,5	;RP0=1, select bank1
  3511  0434  0806               	movf	6,w	;volatile
  3512                           
  3513                           ;main.c: 972: RAIF = 0;
  3514  0435  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0436  118D               	bcf	13,3	;volatile
  3516                           
  3517                           ;main.c: 973: PORTB;
  3518  0437  0806               	movf	6,w	;volatile
  3519                           
  3520                           ;main.c: 974: RBIF = 0;
  3521  0438  100B               	bcf	11,0	;volatile
  3522  0439  0064               	clrwdt	;# 
  3523  043A  0063               	sleep	;# 
  3524  043B  0000               	nop	;# 
  3525  043C  0064               	clrwdt	;# 
  3526  043D  0000               	nop	;# 
  3527  043E  0000               	nop	;# 
  3528  043F  0000               	nop	;# 
  3529  0440  0000               	nop	;# 
  3530  0441  0000               	nop	;# 
  3531                           
  3532                           ;main.c: 986: if(RAIF) RAIF = 0;
  3533  0442  1283               	bcf	3,5	;RP0=0, select bank0
  3534  0443  198D               	btfsc	13,3	;volatile
  3535  0444  118D               	bcf	13,3	;volatile
  3536                           
  3537                           ;main.c: 987: if(RBIF) RBIF = 0;
  3538  0445  180B               	btfsc	11,0	;volatile
  3539  0446  100B               	bcf	11,0	;volatile
  3540                           
  3541                           ;main.c: 988: if(TMR2IF) TMR2IF = 0;
  3542  0447  188D               	btfsc	13,1	;volatile
  3543  0448  108D               	bcf	13,1	;volatile
  3544                           
  3545                           ;main.c: 989: IOCA = 0B00000000;
  3546  0449  1683               	bsf	3,5	;RP0=1, select bank1
  3547  044A  0189               	clrf	9	;volatile
  3548                           
  3549                           ;main.c: 990: IOCB = 0B00000000;
  3550  044B  1283               	bcf	3,5	;RP0=0, select bank0
  3551  044C  0189               	clrf	9	;volatile
  3552                           
  3553                           ;main.c: 991: Init_System();
  3554  044D  2519               	fcall	_Init_System
  3555                           
  3556                           ;main.c: 992: AD_Init();
  3557  044E  2DCA               	ljmp	l2149
  3558  044F                     __end_of_Sleep_Mode:	
  3559                           
  3560                           	psect	text17
  3561  0519                     __ptext17:	
  3562 ;; *************** function _Init_System *****************
  3563 ;; Defined at:
  3564 ;;		line 795 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2
  3573 ;; Tracked objects:
  3574 ;;		On entry : 100/0
  3575 ;;		On exit  : 100/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1
  3578 ;;      Params:         0       0       0
  3579 ;;      Locals:         0       0       0
  3580 ;;      Temps:          0       0       0
  3581 ;;      Totals:         0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    2
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;;		_Sleep_Mode
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           
  3594                           ;psect for function _Init_System
  3595  0519                     _Init_System:	
  3596                           
  3597                           ;incstack = 0
  3598                           ; Regs used in _Init_System: [wreg+status,2]
  3599  0519  0000               	nop	;# 
  3600  051A  0064               	clrwdt	;# 
  3601                           
  3602                           ;main.c: 799: OPTION_REG = 0;
  3603  051B  1283               	bcf	3,5	;RP0=0, select bank0
  3604  051C  0181               	clrf	1	;volatile
  3605  051D  0064               	clrwdt	;# 
  3606                           
  3607                           ;main.c: 801: OSCCON = 0X72;
  3608  051E  3072               	movlw	114
  3609  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3610  0520  0094               	movwf	20	;volatile
  3611                           
  3612                           ;main.c: 803: WPUA = 0B00000000;
  3613  0521  1683               	bsf	3,5	;RP0=1, select bank1
  3614  0522  0188               	clrf	8	;volatile
  3615                           
  3616                           ;main.c: 804: WPDA = 0x02;
  3617  0523  3002               	movlw	2
  3618  0524  0087               	movwf	7	;volatile
  3619                           
  3620                           ;main.c: 805: WPUB = 0B00000100;
  3621  0525  3004               	movlw	4
  3622  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3623  0527  0088               	movwf	8	;volatile
  3624                           
  3625                           ;main.c: 807: TRISA = 0x1F;
  3626  0528  301F               	movlw	31
  3627  0529  1683               	bsf	3,5	;RP0=1, select bank1
  3628  052A  0085               	movwf	5	;volatile
  3629                           
  3630                           ;main.c: 808: TRISB = 0B00000100;
  3631  052B  3004               	movlw	4
  3632  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3633  052D  0085               	movwf	5	;volatile
  3634                           
  3635                           ;main.c: 810: PORTA = 0X00;
  3636  052E  1683               	bsf	3,5	;RP0=1, select bank1
  3637  052F  0186               	clrf	6	;volatile
  3638                           
  3639                           ;main.c: 811: PORTB = 0X00;
  3640  0530  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0531  0186               	clrf	6	;volatile
  3642                           
  3643                           ;main.c: 815: PR2 = 249;
  3644  0532  30F9               	movlw	249
  3645  0533  0091               	movwf	17	;volatile
  3646                           
  3647                           ;main.c: 816: TMR2IF = 0;
  3648  0534  108D               	bcf	13,1	;volatile
  3649                           
  3650                           ;main.c: 817: TMR2IE = 1;
  3651  0535  148E               	bsf	14,1	;volatile
  3652                           
  3653                           ;main.c: 819: T2CON = 0B00000100;
  3654  0536  3004               	movlw	4
  3655  0537  0093               	movwf	19	;volatile
  3656                           
  3657                           ;main.c: 820: INTCON = 0XC0;
  3658  0538  30C0               	movlw	192
  3659  0539  008B               	movwf	11	;volatile
  3660  053A  0008               	return
  3661  053B                     __end_of_Init_System:	
  3662                           
  3663                           	psect	text18
  3664  05CA                     __ptext18:	
  3665 ;; *************** function _AD_Init *****************
  3666 ;; Defined at:
  3667 ;;		line 832 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2
  3676 ;; Tracked objects:
  3677 ;;		On entry : 100/0
  3678 ;;		On exit  : 100/100
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1
  3681 ;;      Params:         0       0       0
  3682 ;;      Locals:         0       0       0
  3683 ;;      Temps:          0       0       0
  3684 ;;      Totals:         0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    2
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_main
  3692 ;;		_Sleep_Mode
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _AD_Init
  3698  05CA                     _AD_Init:	
  3699  05CA                     l2149:	
  3700                           ;incstack = 0
  3701                           ; Regs used in _AD_Init: [wreg+status,2]
  3702                           
  3703                           
  3704                           ;main.c: 865: ADCON0 = 0X41;
  3705  05CA  3041               	movlw	65
  3706  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  3707  05CC  0095               	movwf	21	;volatile
  3708                           
  3709                           ;main.c: 882: ADCON1 = 0;
  3710  05CD  0196               	clrf	22	;volatile
  3711                           
  3712                           ;main.c: 883: ANSEL0 = 0X1D;
  3713  05CE  301D               	movlw	29
  3714  05CF  0093               	movwf	19	;volatile
  3715  05D0  0008               	return
  3716  05D1                     __end_of_AD_Init:	
  3717                           
  3718                           	psect	text19
  3719  0559                     __ptext19:	
  3720 ;; *************** function _Isr_Timer *****************
  3721 ;; Defined at:
  3722 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 100/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1
  3736 ;;      Params:         0       0       0
  3737 ;;      Locals:         0       0       0
  3738 ;;      Temps:          3       0       0
  3739 ;;      Totals:         3       0       0
  3740 ;;Total ram usage:        3 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    1
  3743 ;; This function calls:
  3744 ;;		_ledShow
  3745 ;; This function is called by:
  3746 ;;		Interrupt level 1
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _Isr_Timer
  3752  0559                     _Isr_Timer:	
  3753                           
  3754                           ;main.c: 102: if(TMR2IF)
  3755  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3756  055A  1C8D               	btfss	13,1	;volatile
  3757  055B  2D6D               	goto	i1l656
  3758                           
  3759                           ;main.c: 103: {
  3760                           ;main.c: 104: TMR2IF = 0;
  3761  055C  108D               	bcf	13,1	;volatile
  3762                           
  3763                           ;main.c: 105: if(++intCount >= 160)
  3764  055D  30A0               	movlw	160
  3765  055E  0AD5               	incf	_intCount,f
  3766  055F  0255               	subwf	_intCount,w
  3767  0560  1C03               	skipc
  3768  0561  2D6A               	goto	i1l2921
  3769  0562  3064               	movlw	100
  3770                           
  3771                           ;main.c: 106: {
  3772                           ;main.c: 107: intCount = 0;
  3773  0563  01D5               	clrf	_intCount
  3774                           
  3775                           ;main.c: 108: IntFlag = 1;
  3776  0564  01D3               	clrf	_IntFlag
  3777  0565  0AD3               	incf	_IntFlag,f
  3778                           
  3779                           ;main.c: 109: if(++count1s >= 100)
  3780  0566  0AD4               	incf	_count1s,f
  3781  0567  0254               	subwf	_count1s,w
  3782  0568  1803               	btfsc	3,0
  3783                           
  3784                           ;main.c: 110: {
  3785                           ;main.c: 111: count1s = 0;
  3786  0569  01D4               	clrf	_count1s
  3787  056A                     i1l2921:	
  3788                           
  3789                           ;main.c: 112: }
  3790                           ;main.c: 113: }
  3791                           ;main.c: 114: ledShow();
  3792  056A  23BD               	fcall	_ledShow
  3793                           
  3794                           ;main.c: 115: intCount10++;
  3795  056B  1283               	bcf	3,5	;RP0=0, select bank0
  3796  056C  0AD1               	incf	_intCount10,f
  3797  056D                     i1l656:	
  3798  056D  0872               	movf	??_Isr_Timer+2,w
  3799  056E  008A               	movwf	10
  3800  056F  0871               	movf	??_Isr_Timer+1,w
  3801  0570  0084               	movwf	4
  3802  0571  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3803  0572  0083               	movwf	3
  3804  0573  0EFE               	swapf	126,f
  3805  0574  0E7E               	swapf	126,w
  3806  0575  0009               	retfie
  3807  0576                     __end_of_Isr_Timer:	
  3808                           
  3809                           	psect	intentry
  3810  0004                     __pintentry:	
  3811                           ;incstack = 0
  3812                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3813                           
  3814  0004                     interrupt_function:	
  3815  007E                     saved_w	set	btemp
  3816  0004  00FE               	movwf	btemp
  3817  0005  0E03               	swapf	3,w
  3818  0006  00F0               	movwf	??_Isr_Timer
  3819  0007  0804               	movf	4,w
  3820  0008  00F1               	movwf	??_Isr_Timer+1
  3821  0009  080A               	movf	10,w
  3822  000A  00F2               	movwf	??_Isr_Timer+2
  3823  000B  2D59               	ljmp	_Isr_Timer
  3824                           
  3825                           	psect	text20
  3826  03BD                     __ptext20:	
  3827 ;; *************** function _ledShow *****************
  3828 ;; Defined at:
  3829 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë\main.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;		None
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;		None
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      void 
  3836 ;; Registers used:
  3837 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3838 ;; Tracked objects:
  3839 ;;		On entry : 100/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1
  3843 ;;      Params:         0       0       0
  3844 ;;      Locals:         0       0       0
  3845 ;;      Temps:          0       0       0
  3846 ;;      Totals:         0       0       0
  3847 ;;Total ram usage:        0 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_Isr_Timer
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _ledShow
  3858  03BD                     _ledShow:	
  3859                           
  3860                           ;main.c: 165: if(++ledCntTime > 30)
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3864  03BD  301F               	movlw	31
  3865  03BE  0AB9               	incf	_ledCntTime,f
  3866  03BF  0239               	subwf	_ledCntTime,w
  3867  03C0  1C03               	skipc
  3868  03C1  0008               	return
  3869  03C2  3006               	movlw	6
  3870                           
  3871                           ;main.c: 166: {
  3872                           ;main.c: 167: ledCntTime = 0;
  3873  03C3  01B9               	clrf	_ledCntTime
  3874                           
  3875                           ;main.c: 168: if(++ledCnt > 5)
  3876  03C4  0ACD               	incf	_ledCnt,f
  3877  03C5  024D               	subwf	_ledCnt,w
  3878  03C6  1803               	btfsc	3,0
  3879                           
  3880                           ;main.c: 169: {
  3881                           ;main.c: 170: ledCnt = 0;
  3882  03C7  01CD               	clrf	_ledCnt
  3883                           
  3884                           ;main.c: 171: }
  3885                           ;main.c: 172: PORTA &= 0xDF;
  3886  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  3887  03C9  1286               	bcf	6,5	;volatile
  3888                           
  3889                           ;main.c: 173: PORTB &= 0xC7;
  3890  03CA  30C7               	movlw	199
  3891  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  3892  03CC  0586               	andwf	6,f	;volatile
  3893                           
  3894                           ;main.c: 174: TRISA |= 0x20;
  3895  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  3896  03CE  1685               	bsf	5,5	;volatile
  3897                           
  3898                           ;main.c: 175: TRISB |= 0x38;
  3899  03CF  3038               	movlw	56
  3900  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  3901  03D1  0485               	iorwf	5,f	;volatile
  3902                           
  3903                           ;main.c: 176: switch(ledCnt)
  3904  03D2  2C05               	goto	i1l2403
  3905  03D3                     i1l2369:	
  3906                           
  3907                           ;main.c: 179: if(ledStep > 0)
  3908  03D3  0878               	movf	_ledStep,w
  3909  03D4  1903               	btfsc	3,2
  3910  03D5  0008               	return
  3911                           
  3912                           ;main.c: 180: {
  3913                           ;main.c: 181: TRISB &= 0xE7;
  3914  03D6  30E7               	movlw	231
  3915  03D7                     L21:	
  3916  03D7  0585               	andwf	5,f	;volatile
  3917                           
  3918                           ;main.c: 182: PORTB |= 0x10;
  3919  03D8  1606               	bsf	6,4	;volatile
  3920  03D9  0008               	return
  3921  03DA                     i1l2375:	
  3922                           
  3923                           ;main.c: 186: if(ledStep > 1)
  3924  03DA  3002               	movlw	2
  3925  03DB  0278               	subwf	_ledStep,w
  3926  03DC  1C03               	skipc
  3927  03DD  0008               	return
  3928                           
  3929                           ;main.c: 187: {
  3930                           ;main.c: 188: TRISB &= 0xCF;
  3931  03DE  30CF               	movlw	207
  3932  03DF  0585               	andwf	5,f	;volatile
  3933                           
  3934                           ;main.c: 189: PORTB |= 0x20;
  3935  03E0  1686               	bsf	6,5	;volatile
  3936  03E1  0008               	return
  3937  03E2                     i1l2381:	
  3938                           
  3939                           ;main.c: 193: if(ledStep > 2)
  3940  03E2  3003               	movlw	3
  3941  03E3  0278               	subwf	_ledStep,w
  3942  03E4  1C03               	skipc
  3943  03E5  0008               	return
  3944                           
  3945                           ;main.c: 194: {
  3946                           ;main.c: 195: TRISB &= 0xE7;
  3947  03E6  30E7               	movlw	231
  3948  03E7  0585               	andwf	5,f	;volatile
  3949                           
  3950                           ;main.c: 196: PORTB |= 0x08;
  3951  03E8  1586               	bsf	6,3	;volatile
  3952  03E9  0008               	return
  3953  03EA                     i1l2387:	
  3954                           
  3955                           ;main.c: 200: if(ledStep > 3)
  3956  03EA  3004               	movlw	4
  3957  03EB  0278               	subwf	_ledStep,w
  3958  03EC  1C03               	skipc
  3959  03ED  0008               	return
  3960                           
  3961                           ;main.c: 201: {
  3962                           ;main.c: 202: TRISB &= 0xCF;
  3963  03EE  30CF               	movlw	207
  3964  03EF  2BD7               	goto	L21
  3965  03F0                     i1l2393:	
  3966                           
  3967                           ;main.c: 207: if(ledStep > 4)
  3968  03F0  3005               	movlw	5
  3969  03F1  0278               	subwf	_ledStep,w
  3970  03F2  1C03               	skipc
  3971  03F3  0008               	return
  3972                           
  3973                           ;main.c: 208: {
  3974                           ;main.c: 209: TRISA &= 0xDF;
  3975  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  3976  03F5  1285               	bcf	5,5	;volatile
  3977                           
  3978                           ;main.c: 210: TRISB &= 0xDF;
  3979  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3980  03F7  1285               	bcf	5,5	;volatile
  3981                           
  3982                           ;main.c: 211: PORTB |= 0x20;
  3983  03F8  1686               	bsf	6,5	;volatile
  3984  03F9  0008               	return
  3985  03FA                     i1l2397:	
  3986                           
  3987                           ;main.c: 215: if(ledStep > 5)
  3988  03FA  3006               	movlw	6
  3989  03FB  0278               	subwf	_ledStep,w
  3990  03FC  1C03               	skipc
  3991  03FD  0008               	return
  3992                           
  3993                           ;main.c: 216: {
  3994                           ;main.c: 217: TRISA &= 0xDF;
  3995  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  3996  03FF  1285               	bcf	5,5	;volatile
  3997                           
  3998                           ;main.c: 218: TRISB &= 0xDF;
  3999  0400  1283               	bcf	3,5	;RP0=0, select bank0
  4000  0401  1285               	bcf	5,5	;volatile
  4001                           
  4002                           ;main.c: 219: PORTA |= 0x20;
  4003  0402  1683               	bsf	3,5	;RP0=1, select bank1
  4004  0403  1686               	bsf	6,5	;volatile
  4005  0404  0008               	return
  4006  0405                     i1l2403:	
  4007  0405  084D               	movf	_ledCnt,w
  4008                           
  4009                           ; Switch size 1, requested type "space"
  4010                           ; Number of cases is 6, Range of values is 0 to 5
  4011                           ; switch strategies available:
  4012                           ; Name         Instructions Cycles
  4013                           ; direct_byte           12     6 (fixed)
  4014                           ; simple_byte           19    10 (average)
  4015                           ; jumptable            260     6 (fixed)
  4016                           ;	Chosen strategy is direct_byte
  4017  0406  0084               	movwf	4
  4018  0407  3006               	movlw	6
  4019  0408  0204               	subwf	4,w
  4020  0409  1803               	skipnc
  4021  040A  0008               	return
  4022  040B  3005               	movlw	high i1S3543
  4023  040C  008A               	movwf	10
  4024  040D  30D1               	movlw	low i1S3543
  4025  040E  0704               	addwf	4,w
  4026  040F  0082               	movwf	2
  4027  0410  0008               	return
  4028  0411                     __end_of_ledShow:	
  4029  007E                     btemp	set	126	;btemp
  4030  007E                     wtemp0	set	126
  4031                           
  4032                           	psect	swtext1
  4033  05D1                     __pswtext1:	
  4034  05D1                     i1S3543:	
  4035  05D1  2BFA               	ljmp	i1l2397
  4036  05D2  2BD3               	ljmp	i1l2369
  4037  05D3  2BDA               	ljmp	i1l2375
  4038  05D4  2BE2               	ljmp	i1l2381
  4039  05D5  2BEA               	ljmp	i1l2387
  4040  05D6  2BF0               	ljmp	i1l2393


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         59
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      75
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3569
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4B       4       93.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      56       7        0.0%
DATA                 0      0      56       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 12 15:14:19 2025

            _protectFlag 004F                        pc 0002                       PL2 01E8  
                     PL4 01F7                       PL6 0116                       PL8 05B4  
                     fsr 0004                      PL10 0200                      l810 027C  
                    l661 0454                      l665 046B                      l882 014E  
                    l778 04F0                      l892 01CD                      l888 0189  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05D1                     l3001 012E  
                   l3011 0138                     l3003 0130                     l1159 059E  
                   l2311 05AB                     l3041 0185                     l3017 0139  
                   l3121 0227                     l3201 02AD                     l3051 01D1  
                   l3035 0173                     l3027 0159                     l3131 023D  
                   l2155 05DA                     l2149 05CA                     l3301 00AB  
                   l3039 017D                     l3143 0251                     l3135 023E  
                   l3119 0226                     l3311 00CB                     l3215 0024  
                   l3401 0324                     l3305 00C1                     l2193 0553  
                   l3171 0276                     l3163 026A                     l3155 025E  
                   l3139 0249                     l3331 00F0                     l3315 00CE  
                   l3227 0034                     l3075 058E                     l3067 057A  
                   l3413 034D                     l3421 0358                     l3317 00D0  
                   l3253 0059                     l3229 0036                     l3167 0270  
                   l3159 0264                     l3335 00F3                     l3247 0055  
                   l2297 0598                     l3329 00EF                     l3249 0057  
                   l3089 0501                     l3097 0514                     l3521 0488  
                   l3419 0356                     l3187 02A0                     l3355 0113  
                   l3275 007B                     l3267 0070                     l3259 0063  
                   l3339 00F7                     l3443 0389                     l3435 036D  
                   l3189 02A3                     l3197 02A9                     l3277 007D  
                   l3453 0399                     l3445 038B                     l3375 02E0  
                   l3391 0310                     l3295 009F                     l3287 0097  
                   l2751 04E1                     l2743 04D5                     l3455 039D  
                   l3463 03A5                     l3289 0099                     l2753 04E3  
                   l3457 03A0                     l3379 02E3                     l3299 00A5  
                   l3467 03AB                     l3397 031D                     l2749 04DE  
                   l2757 04E7                     l2791 04B2                     l3487 045C  
                   l2777 0494                     l2789 04B0                     l2797 04C0  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3125 0179                     u3135 0183                     u3175 01C3  
                   u4207 02B2                     u3255 0507                     _PIE1 000E  
                   u4217 0322                     u3195 01DA                     u4227 035D  
                   u4237 012A                     u3475 0288                     u3715 00BF  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3755 00E3  
                   _PIR1 000D                     u3875 0302                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 044F  
                   btemp 007E                     start 000C            ??_Init_System 0073  
                  ?_main 0070          __end_of___lbdiv 05AD          __end_of___lbmod 0592  
                  _T2CON 0013          __end_of___lwmod 0519                    i1l656 056D  
          _countHalfFull 0050                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0116          __end_of_ledShow 0411  
        __end_of_keyRead 0559                    pclath 000A          __end_of_pwmInit 05CA  
        __end_of_pwmStop 05DA                    status 0003                    wtemp0 007E  
        __end_of_workCtr 04C4          ___lbdiv@divisor 0073            _addPowerCount 0048  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 048A  
   __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 053B                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3543 05D1                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _GODONE 04A9  
                 i1l2403 0405                   i1l2381 03E2                   i1l2375 03DA  
                 i1l2393 03F0                   i1l2369 03D3                   i1l2387 03EA  
                 i1l2397 03FA                   i1l2921 056A                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD0L 0019                   _PWMD1L 001A  
           ??_ADC_Sample 0057             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 0411                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004D                   _ledCtr 0360                ??___lwmod 0077  
                 _keyCtr 04C4                ??_chrgCtr 0057                   _pwStep 0044  
                 _result 0032                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01E8                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 002C          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 0058          _workOverOutTime 004E           __pcstackCOMMON 0070  
     __size_of_checkOutA 00B0              _Init_System 0519               __end_ofPL2 01F7  
             __end_ofPL4 0200               __end_ofPL6 011C               __end_ofPL8 05BA  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 0576               _checkBatAD 02B5  
             __pbssBANK0 0020             _chrgFullFlag 0052              ?_Sleep_Mode 0070  
             __pmaintext 044F               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003B                  ?_keyCtr 0070               _ledCntTime 0039  
                _AD_Init 05CA                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 02B5                  _IntFlag 0053               _intCount10 0051  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0064          ADC_Sample@admin 0062  
        ADC_Sample@adsum 005E                  ___lbdiv 0592                  ___lbmod 0576  
                _addTime 003D                  ___lwmod 04F5          __size_of_ledCtr 005D  
        __size_of_keyCtr 0031                  _chrgCtr 0018               _lowBatFlag 0037  
                __ptext1 048A                  __ptext2 05D7                  __ptext3 05C2  
                __ptext4 0360                  __ptext5 04F5                  __ptext6 0576  
                __ptext7 04C4                  __ptext8 053B                  __ptext9 0018  
                _ledShow 03BD                  _ledStep 0078                  _count1s 0054  
                _count5s 0026                  _count8s 0022                  _maxDuty 004A  
                _keyRead 053B      __size_of_Sleep_Mode 003E                  _pwmInit 05C2  
                _subTime 003C              ?_checkBatAD 0070                  _pwmStop 05D7  
             _preLedStep 0038                  clrloop0 05BB                  _workCtr 048A  
             _outADValue 002E     end_of_initialization 0016            _longPressFlag 004B  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0057  
            ___lbmod@rem 0059      __size_of_checkBatAD 00AB             ?_Init_System 0070  
         __end_of_ledCtr 03BD           __end_of_keyCtr 04F5      __end_of_chrgPwmInit 05B4  
    __end_of_chrgPwmStop 05DD              __end_ofPL10 0205      start_initialization 000D  
              _Isr_Timer 0559             ??_Sleep_Mode 0073                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0066                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0057  
     __end_of_Sleep_Mode 044F               ?_Isr_Timer 0070                _checkOutA 0205  
              __pnvBANK0 006A              _chrgMaxDuty 003A                _chrgMaxAD 003F  
            _chrgPwmInit 05AD                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05DA                 ?___lwmod 0073                 ?_chrgCtr 0070  
              __pswtext1 05D1                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 006A           ADC_Sample@adch 005C  
               ?_pwmInit 0070                _fullCount 0028             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003E                 ?_workCtr 0070  
            ADC_Sample@i 005D              ADC_Sample@j 005B        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 05BA                _prePwStep 0077  
            _reChrgCount 0043                _sleepTime 0036                _overCount 0049  
     __end_of_checkBatAD 0360     __size_of_Init_System 0022                _startTime 0046  
       __size_of_AD_Init 0007         keyRead@keyStatus 0073              ??_Isr_Timer 0070  
             _ADC_Sample 011C         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwmod 0024              _lockLedStep 0042         __size_of_chrgCtr 00FE  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0034  
               _chrgFlag 007A                 _chrgMode 0040                 __ptext10 05DA  
               __ptext11 05AD                 __ptext20 03BD                 __ptext12 0592  
               __ptext13 0205                 __ptext14 02B5                 __ptext15 011C  
               __ptext16 0411                 __ptext17 0519                 __ptext18 05CA  
               __ptext19 0559         __size_of_pwmInit 0008         __size_of_pwmStop 0003  
               _count50s 002A         __size_of_workCtr 003A                 _keyCount 004C  
               _intCount 0055            __size_of_main 003B              ??_checkOutA 0074  
       checkOutA@maxAout 0069                 _tempDuty 0047                 _test_adc 0056  
               _power_ad 0030                 _workStep 0079             _overChrgTime 0045  
               intlevel1 0000         ___lwmod@dividend 0075              ?_ADC_Sample 0073  
           ?_chrgPwmInit 0070             _overWorkTime 0024             ?_chrgPwmStop 0070  
            _showBatTime 0041               _OPTION_REG 0001          ___lwmod@divisor 0073  
        ___lwmod@counter 0057  
