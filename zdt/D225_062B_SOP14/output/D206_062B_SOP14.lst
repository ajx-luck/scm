

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 09 15:18:10 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	nvBANK0
    74  006E                     __pnvBANK0:	
    75  006E                     _firstTime:	
    76  006E                     	ds	1
    77  001D                     _PWMCON2	set	29
    78  0018                     _PWMTH	set	24
    79  0017                     _PWMTL	set	23
    80  0016                     _PWMCON1	set	22
    81  0015                     _PWMCON0	set	21
    82  0014                     _OSCCON	set	20
    83  0013                     _T2CON	set	19
    84  0011                     _PR2	set	17
    85  000E                     _PIE1	set	14
    86  000D                     _PIR1	set	13
    87  000B                     _INTCON	set	11
    88  0009                     _IOCB	set	9
    89  0008                     _WPUB	set	8
    90  0006                     _PORTB	set	6
    91  0005                     _TRISB	set	5
    92  0001                     _OPTION_REG	set	1
    93  0071                     _TMR2IE	set	113
    94  0073                     _RAIE	set	115
    95  0069                     _TMR2IF	set	105
    96  006B                     _RAIF	set	107
    97  0058                     _RBIF	set	88
    98  005B                     _RBIE	set	91
    99  005E                     _PEIE	set	94
   100  005F                     _GIE	set	95
   101  0030                     _RB0	set	48
   102  0031                     _RB1	set	49
   103  0033                     _RB3	set	51
   104  0034                     _RB4	set	52
   105  0035                     _RB5	set	53
   106  009E                     _PWMD23H	set	158
   107  009D                     _PWM23DT	set	157
   108  009C                     _PWMD3L	set	156
   109  009B                     _PWMD2L	set	155
   110  0099                     _ADRESH	set	153
   111  0098                     _ADRESL	set	152
   112  0096                     _ADCON1	set	150
   113  0095                     _ADCON0	set	149
   114  0094                     _ANSEL1	set	148
   115  0093                     _ANSEL0	set	147
   116  0089                     _IOCA	set	137
   117  0088                     _WPUA	set	136
   118  0087                     _WPDA	set	135
   119  0086                     _PORTA	set	134
   120  0085                     _TRISA	set	133
   121  04B2                     _LDO_EN	set	1202
   122  04B6                     _CHS4	set	1206
   123  04A9                     _GODONE	set	1193
   124                           
   125                           	psect	cinit
   126  000D                     start_initialization:	
   127                           ; #config settings
   128                           
   129  000D                     __initialization:	
   130                           
   131                           ; Clear objects allocated to COMMON
   132  000D  3077               	movlw	low __pbssCOMMON
   133  000E  0084               	movwf	4
   134  000F  307B               	movlw	low (__pbssCOMMON+4)
   135  0010  25C3               	fcall	clear_ram0
   136  0011  3020               	movlw	low __pbssBANK0
   137                           
   138                           ; Clear objects allocated to BANK0
   139  0012  1383               	bcf	3,7	;select IRP bank0
   140  0013  0084               	movwf	4
   141  0014  3059               	movlw	low (__pbssBANK0+57)
   142  0015  25C3               	fcall	clear_ram0
   143  0016                     end_of_initialization:	
   144                           ;End of C runtime variable initialization code
   145                           
   146  0016                     __end_of__initialization:	
   147  0016  0183               	clrf	3
   148  0017  2C4D               	ljmp	_main	;jump to C main() function
   149                           
   150                           	psect	bssCOMMON
   151  0077                     __pbssCOMMON:	
   152  0077                     _batADValue:	
   153  0077                     	ds	2
   154  0079                     _prePwStep:	
   155  0079                     	ds	1
   156  007A                     _workStep:	
   157  007A                     	ds	1
   158                           
   159                           	psect	bssBANK0
   160  0020                     __pbssBANK0:	
   161  0020                     _count900s:	
   162  0020                     	ds	2
   163  0022                     _count8s:	
   164  0022                     	ds	2
   165  0024                     _overWorkTime:	
   166  0024                     	ds	2
   167  0026                     _count5s:	
   168  0026                     	ds	2
   169  0028                     _fullCount:	
   170  0028                     	ds	2
   171  002A                     _count50s:	
   172  002A                     	ds	2
   173  002C                     _outADValue:	
   174  002C                     	ds	2
   175  002E                     _power_ad:	
   176  002E                     	ds	2
   177  0030                     _result:	
   178  0030                     	ds	2
   179  0032                     _adresult:	
   180  0032                     	ds	2
   181  0034                     _motorPwmFlag:	
   182  0034                     	ds	1
   183  0035                     _chrgPwmFlag:	
   184  0035                     	ds	1
   185  0036                     _preWorkStep:	
   186  0036                     	ds	1
   187  0037                     _jrStep:	
   188  0037                     	ds	1
   189  0038                     _sleepTime:	
   190  0038                     	ds	1
   191  0039                     _lowBatFlag:	
   192  0039                     	ds	1
   193  003A                     _ledCntTime:	
   194  003A                     	ds	1
   195  003B                     _chrgMaxDuty:	
   196  003B                     	ds	1
   197  003C                     _chrgWaitTime:	
   198  003C                     	ds	1
   199  003D                     _subTime:	
   200  003D                     	ds	1
   201  003E                     _addTime:	
   202  003E                     	ds	1
   203  003F                     _lockCount:	
   204  003F                     	ds	1
   205  0040                     _chrgMaxAD:	
   206  0040                     	ds	1
   207  0041                     _chrgMode:	
   208  0041                     	ds	1
   209  0042                     _showBatTime:	
   210  0042                     	ds	1
   211  0043                     _lockLedStep:	
   212  0043                     	ds	1
   213  0044                     _reChrgCount:	
   214  0044                     	ds	1
   215  0045                     _pwStep:	
   216  0045                     	ds	1
   217  0046                     _overChrgTime:	
   218  0046                     	ds	1
   219  0047                     _startTime:	
   220  0047                     	ds	1
   221  0048                     _tempDuty:	
   222  0048                     	ds	1
   223  0049                     _overCount:	
   224  0049                     	ds	1
   225  004A                     _maxDuty:	
   226  004A                     	ds	1
   227  004B                     _longPressFlag:	
   228  004B                     	ds	1
   229  004C                     _keyCount:	
   230  004C                     	ds	1
   231  004D                     _ledStep:	
   232  004D                     	ds	1
   233  004E                     _ledCnt:	
   234  004E                     	ds	1
   235  004F                     _workOverOutTime:	
   236  004F                     	ds	1
   237  0050                     _protectFlag:	
   238  0050                     	ds	1
   239  0051                     _countHalfFull:	
   240  0051                     	ds	1
   241  0052                     _intCount10:	
   242  0052                     	ds	1
   243  0053                     _chrgFullFlag:	
   244  0053                     	ds	1
   245  0054                     _chrgFlag:	
   246  0054                     	ds	1
   247  0055                     _IntFlag:	
   248  0055                     	ds	1
   249  0056                     _count1s:	
   250  0056                     	ds	1
   251  0057                     _intCount:	
   252  0057                     	ds	1
   253  0058                     _test_adc:	
   254  0058                     	ds	1
   255                           
   256                           	psect	clrtext
   257  05C3                     clear_ram0:	
   258                           ;	Called with FSR containing the base address, and
   259                           ;	W with the last address+1
   260                           
   261  05C3  0064               	clrwdt	;clear the watchdog before getting into this loop
   262  05C4                     clrloop0:	
   263  05C4  0180               	clrf	0	;clear RAM location pointed to by FSR
   264  05C5  0A84               	incf	4,f	;increment pointer
   265  05C6  0604               	xorwf	4,w	;XOR with final address
   266  05C7  1903               	btfsc	3,2	;have we reached the end yet?
   267  05C8  3400               	retlw	0	;all done for this memory range, return
   268  05C9  0604               	xorwf	4,w	;XOR again to restore value
   269  05CA  2DC4               	goto	clrloop0	;do the next byte
   270                           
   271                           	psect	cstackCOMMON
   272  0070                     __pcstackCOMMON:	
   273  0070                     ?_ledShow:	
   274  0070                     ??_ledShow:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Init_System:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_AD_Init:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_checkOutA:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_chrgCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_checkBatAD:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_keyCtr:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_workCtr:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_ledCtr:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_Sleep_Mode:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_chrgPwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_pwmStop:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_chrgPwmInit:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_pwmInit:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_Isr_Timer:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ??_Isr_Timer:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_keyRead:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330  0070                     	ds	3
   331  0073                     ??_Init_System:	
   332  0073                     ??_AD_Init:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_workCtr:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_Sleep_Mode:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_chrgPwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ??_pwmStop:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_chrgPwmInit:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ??_pwmInit:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?_ADC_Sample:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ??_keyRead:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     ?___bmul:	
   360                           ; 1 bytes @ 0x3
   361                           
   362  0073                     ?___lbdiv:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ?___lbmod:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ?___lwmod:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     keyRead@keyStatus:	
   372                           ; 2 bytes @ 0x3
   373                           
   374  0073                     ADC_Sample@adldo:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ___bmul@multiplicand:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ___lbdiv@divisor:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ___lbmod@divisor:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ___lwmod@divisor:	
   387                           ; 1 bytes @ 0x3
   388                           
   389                           
   390                           ; 2 bytes @ 0x3
   391  0073                     	ds	1
   392  0074                     ??_checkBatAD:	
   393  0074                     ??_keyCtr:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ??___bmul:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     ??___lbdiv:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     ??___lbmod:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     keyCtr@kclick:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0074                     ___bmul@product:	
   409                           ; 1 bytes @ 0x4
   410                           
   411  0074                     ___lbdiv@dividend:	
   412                           ; 1 bytes @ 0x4
   413                           
   414                           
   415                           ; 1 bytes @ 0x4
   416  0074                     	ds	1
   417  0075                     ___bmul@multiplier:	
   418  0075                     ___lbdiv@counter:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0075                     ___lwmod@dividend:	
   422                           ; 1 bytes @ 0x5
   423                           
   424                           
   425                           ; 2 bytes @ 0x5
   426  0075                     	ds	1
   427  0076                     ___lbdiv@quotient:	
   428                           
   429                           ; 1 bytes @ 0x6
   430  0076                     	ds	1
   431  0077                     ??_ledCtr:	
   432  0077                     ??_main:	
   433                           ; 1 bytes @ 0x7
   434                           
   435  0077                     ??___lwmod:	
   436                           ; 1 bytes @ 0x7
   437                           
   438                           
   439                           	psect	cstackBANK0
   440  0059                     __pcstackBANK0:	
   441                           ; 1 bytes @ 0x7
   442                           
   443  0059                     ??_chrgCtr:	
   444  0059                     ??_ADC_Sample:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0059                     ___lbmod@dividend:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0059                     ___lwmod@counter:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 1 bytes @ 0x0
   455  0059                     	ds	1
   456  005A                     ___lbmod@counter:	
   457                           
   458                           ; 1 bytes @ 0x1
   459  005A                     	ds	1
   460  005B                     ___lbmod@rem:	
   461                           
   462                           ; 1 bytes @ 0x2
   463  005B                     	ds	2
   464  005D                     ADC_Sample@j:	
   465                           
   466                           ; 1 bytes @ 0x4
   467  005D                     	ds	1
   468  005E                     ADC_Sample@adch:	
   469                           
   470                           ; 1 bytes @ 0x5
   471  005E                     	ds	1
   472  005F                     ADC_Sample@i:	
   473                           
   474                           ; 1 bytes @ 0x6
   475  005F                     	ds	1
   476  0060                     ADC_Sample@adsum:	
   477                           
   478                           ; 4 bytes @ 0x7
   479  0060                     	ds	4
   480  0064                     ADC_Sample@admin:	
   481                           
   482                           ; 2 bytes @ 0xB
   483  0064                     	ds	2
   484  0066                     ADC_Sample@admax:	
   485                           
   486                           ; 2 bytes @ 0xD
   487  0066                     	ds	2
   488  0068                     ADC_Sample@ad_temp:	
   489                           
   490                           ; 2 bytes @ 0xF
   491  0068                     	ds	2
   492  006A                     ??_checkOutA:	
   493                           
   494                           ; 1 bytes @ 0x11
   495  006A                     	ds	2
   496  006C                     checkOutA@maxtempV:	
   497                           
   498                           ; 1 bytes @ 0x13
   499  006C                     	ds	1
   500  006D                     checkOutA@maxAout:	
   501                           
   502                           ; 1 bytes @ 0x14
   503  006D                     	ds	1
   504                           
   505                           	psect	maintext
   506  044D                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 152 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 100/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1
   526 ;;      Params:         0       0       0
   527 ;;      Locals:         0       0       0
   528 ;;      Temps:          0       0       0
   529 ;;      Totals:         0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    4
   532 ;; This function calls:
   533 ;;		_AD_Init
   534 ;;		_Init_System
   535 ;;		_Sleep_Mode
   536 ;;		_checkBatAD
   537 ;;		_checkOutA
   538 ;;		_chrgCtr
   539 ;;		_keyCtr
   540 ;;		_ledCtr
   541 ;;		_workCtr
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _main
   549  044D                     _main:	
   550                           
   551                           ;main.c: 154: Init_System();
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   555  044D  2588               	fcall	_Init_System
   556                           
   557                           ;main.c: 155: AD_Init();
   558  044E  25D3               	fcall	_AD_Init
   559                           
   560                           ;main.c: 156: firstTime = 200;
   561  044F  30C8               	movlw	200
   562  0450  1283               	bcf	3,5	;RP0=0, select bank0
   563  0451  00EE               	movwf	_firstTime
   564  0452                     l691:	
   565                           ;main.c: 157: while (1)
   566                           
   567  0452  0064               	clrwdt	;# 
   568                           
   569                           ;main.c: 160: if(intCount10 > 10)
   570  0453  300B               	movlw	11
   571  0454  1283               	bcf	3,5	;RP0=0, select bank0
   572  0455  0252               	subwf	_intCount10,w
   573  0456  1C03               	skipc
   574  0457  2C5A               	goto	l3538
   575                           
   576                           ;main.c: 161: {
   577                           ;main.c: 162: intCount10 = 0;
   578  0458  01D2               	clrf	_intCount10
   579                           
   580                           ;main.c: 163: checkOutA();
   581  0459  2207               	fcall	_checkOutA
   582  045A                     l3538:	
   583                           
   584                           ;main.c: 164: }
   585                           ;main.c: 165: if(!IntFlag)
   586  045A  1283               	bcf	3,5	;RP0=0, select bank0
   587  045B  0855               	movf	_IntFlag,w
   588  045C  1903               	btfsc	3,2
   589  045D  2C52               	goto	l691
   590                           
   591                           ;main.c: 167: IntFlag = 0;
   592  045E  01D5               	clrf	_IntFlag
   593                           
   594                           ;main.c: 168: chrgCtr();
   595  045F  2018               	fcall	_chrgCtr
   596                           
   597                           ;main.c: 169: checkBatAD();
   598  0460  22B9               	fcall	_checkBatAD
   599                           
   600                           ;main.c: 170: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   601  0461  1283               	bcf	3,5	;RP0=0, select bank0
   602  0462  0854               	movf	_chrgFlag,w
   603  0463  1D03               	btfss	3,2
   604  0464  2C6C               	goto	l695
   605  0465  0839               	movf	_lowBatFlag,w
   606  0466  1D03               	btfss	3,2
   607  0467  2C6C               	goto	l695
   608  0468  086E               	movf	_firstTime,w
   609  0469  1D03               	btfss	3,2
   610  046A  2C6C               	goto	l695
   611                           
   612                           ;main.c: 171: {
   613                           ;main.c: 172: keyCtr();
   614  046B  24C8               	fcall	_keyCtr
   615  046C                     l695:	
   616                           
   617                           ;main.c: 173: }
   618                           ;main.c: 174: workCtr();
   619  046C  248B               	fcall	_workCtr
   620                           
   621                           ;main.c: 175: ledCtr();
   622  046D  235D               	fcall	_ledCtr
   623                           
   624                           ;main.c: 176: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   625  046E  0854               	movf	_chrgFlag,w
   626  046F  1D03               	btfss	3,2
   627  0470  2C89               	goto	l3574
   628  0471  087A               	movf	_workStep,w
   629  0472  1D03               	btfss	3,2
   630  0473  2C89               	goto	l3574
   631  0474  084C               	movf	_keyCount,w
   632  0475  1D03               	btfss	3,2
   633  0476  2C89               	goto	l3574
   634  0477  086E               	movf	_firstTime,w
   635  0478  1D03               	btfss	3,2
   636  0479  2C89               	goto	l3574
   637  047A  0842               	movf	_showBatTime,w
   638  047B  1D03               	btfss	3,2
   639  047C  2C89               	goto	l3574
   640                           
   641                           ;main.c: 177: {
   642                           ;main.c: 178: shiweiNum = geweiNum = 0;
   643  047D  0824               	movf	_overWorkTime,w
   644  047E  0425               	iorwf	_overWorkTime+1,w
   645  047F  1D03               	btfss	3,2
   646  0480  2C89               	goto	l3574
   647                           
   648                           ;main.c: 179: if(++sleepTime >= 200)
   649  0481  30C8               	movlw	200
   650  0482  0AB8               	incf	_sleepTime,f
   651  0483  0238               	subwf	_sleepTime,w
   652  0484  1C03               	skipc
   653  0485  2C52               	goto	l691
   654                           
   655                           ;main.c: 180: {
   656                           ;main.c: 181: sleepTime = 0;
   657  0486  01B8               	clrf	_sleepTime
   658                           
   659                           ;main.c: 182: Sleep_Mode();
   660  0487  240B               	fcall	_Sleep_Mode
   661  0488  2C52               	goto	l691
   662  0489                     l3574:	
   663                           
   664                           ;main.c: 185: else
   665                           ;main.c: 186: {
   666                           ;main.c: 187: sleepTime = 0;
   667  0489  01B8               	clrf	_sleepTime
   668  048A  2C52               	goto	l691
   669  048B                     __end_of_main:	
   670                           
   671                           	psect	text1
   672  048B                     __ptext1:	
   673 ;; *************** function _workCtr *****************
   674 ;; Defined at:
   675 ;;		line 607 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 100/0
   686 ;;		On exit  : 100/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1
   689 ;;      Params:         0       0       0
   690 ;;      Locals:         0       0       0
   691 ;;      Temps:          0       0       0
   692 ;;      Totals:         0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    3
   696 ;; This function calls:
   697 ;;		_pwmInit
   698 ;;		_pwmStop
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           
   705                           ;psect for function _workCtr
   706  048B                     _workCtr:	
   707                           
   708                           ;main.c: 610: if(startTime > 0)
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   712  048B  0847               	movf	_startTime,w
   713  048C  1D03               	btfss	3,2
   714                           
   715                           ;main.c: 611: {
   716                           ;main.c: 612: startTime--;
   717  048D  03C7               	decf	_startTime,f
   718                           
   719                           ;main.c: 613: }
   720                           ;main.c: 614: if(workStep > 0)
   721  048E  087A               	movf	_workStep,w
   722  048F  1903               	btfsc	3,2
   723  0490  2CC4               	goto	l2860
   724                           
   725                           ;main.c: 615: {
   726                           ;main.c: 616: if(motorPwmFlag == 0)
   727  0491  0834               	movf	_motorPwmFlag,w
   728  0492  1D03               	btfss	3,2
   729  0493  2C95               	goto	l2840
   730                           
   731                           ;main.c: 617: {
   732                           ;main.c: 618: pwmInit();
   733  0494  25CB               	fcall	_pwmInit
   734  0495                     l2840:	
   735                           
   736                           ;main.c: 620: }
   737                           ;main.c: 621: maxDuty = 36 + (workStep*2);
   738  0495  1003               	clrc
   739  0496  0D7A               	rlf	_workStep,w
   740  0497  3E24               	addlw	36
   741  0498  00CA               	movwf	_maxDuty
   742                           
   743                           ;main.c: 622: if(overCount >= 5)
   744  0499  3005               	movlw	5
   745  049A  0249               	subwf	_overCount,w
   746  049B  1C03               	skipc
   747  049C  2CB2               	goto	l2852
   748                           
   749                           ;main.c: 623: {
   750                           ;main.c: 624: if(++count5s > 600)
   751  049D  0AA6               	incf	_count5s,f
   752  049E  1903               	skipnz
   753  049F  0AA7               	incf	_count5s+1,f
   754  04A0  3002               	movlw	2
   755  04A1  0227               	subwf	_count5s+1,w
   756  04A2  3059               	movlw	89
   757  04A3  1903               	skipnz
   758  04A4  0226               	subwf	_count5s,w
   759  04A5  1C03               	skipc
   760  04A6  2CB4               	goto	l2854
   761  04A7  302C               	movlw	44
   762                           
   763                           ;main.c: 625: {
   764                           ;main.c: 626: count5s = 0;
   765  04A8  01A6               	clrf	_count5s
   766  04A9  01A7               	clrf	_count5s+1
   767                           
   768                           ;main.c: 627: overWorkTime = 300;
   769  04AA  00A4               	movwf	_overWorkTime
   770  04AB  3001               	movlw	1
   771  04AC  00A5               	movwf	_overWorkTime+1
   772                           
   773                           ;main.c: 629: prejrStep = jrStep;
   774  04AD  087A               	movf	_workStep,w
   775  04AE  00B6               	movwf	_preWorkStep
   776                           
   777                           ;main.c: 630: workStep = 0;
   778  04AF  01FA               	clrf	_workStep
   779                           
   780                           ;main.c: 631: jrStep = 0;
   781  04B0  01B7               	clrf	_jrStep
   782  04B1  2CB4               	goto	l2854
   783  04B2                     l2852:	
   784                           
   785                           ;main.c: 634: else
   786                           ;main.c: 635: {
   787                           ;main.c: 636: count5s = 0;
   788  04B2  01A6               	clrf	_count5s
   789  04B3  01A7               	clrf	_count5s+1
   790  04B4                     l2854:	
   791                           
   792                           ;main.c: 637: }
   793                           ;main.c: 638: if(count1s == 0 && ++count900s >= 900)
   794  04B4  0856               	movf	_count1s,w
   795  04B5  1D03               	btfss	3,2
   796  04B6  0008               	return
   797  04B7  0AA0               	incf	_count900s,f
   798  04B8  1903               	skipnz
   799  04B9  0AA1               	incf	_count900s+1,f
   800  04BA  3003               	movlw	3
   801  04BB  0221               	subwf	_count900s+1,w
   802  04BC  3084               	movlw	132
   803  04BD  1903               	skipnz
   804  04BE  0220               	subwf	_count900s,w
   805  04BF  1C03               	skipc
   806  04C0  0008               	return
   807                           
   808                           ;main.c: 639: {
   809                           ;main.c: 640: workStep = 0;
   810  04C1  01FA               	clrf	_workStep
   811                           
   812                           ;main.c: 641: jrStep = 0;
   813  04C2  01B7               	clrf	_jrStep
   814  04C3  0008               	return
   815  04C4                     l2860:	
   816                           
   817                           ;main.c: 644: else
   818                           ;main.c: 645: {
   819                           ;main.c: 646: pwmStop();
   820  04C4  25DB               	fcall	_pwmStop
   821                           
   822                           ;main.c: 647: count900s = 0;
   823  04C5  01A0               	clrf	_count900s
   824  04C6  01A1               	clrf	_count900s+1
   825  04C7  0008               	return
   826  04C8                     __end_of_workCtr:	
   827                           
   828                           	psect	text2
   829  05CB                     __ptext2:	
   830 ;; *************** function _pwmInit *****************
   831 ;; Defined at:
   832 ;;		line 986 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;		None
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, status,2
   841 ;; Tracked objects:
   842 ;;		On entry : 100/0
   843 ;;		On exit  : 100/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1
   846 ;;      Params:         0       0       0
   847 ;;      Locals:         0       0       0
   848 ;;      Temps:          0       0       0
   849 ;;      Totals:         0       0       0
   850 ;;Total ram usage:        0 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    2
   853 ;; This function calls:
   854 ;;		Nothing
   855 ;; This function is called by:
   856 ;;		_workCtr
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           
   861                           ;psect for function _pwmInit
   862  05CB                     _pwmInit:	
   863                           
   864                           ;main.c: 988: motorPwmFlag = 1;
   865                           
   866                           ;incstack = 0
   867                           ; Regs used in _pwmInit: [wreg+status,2]
   868  05CB  01B4               	clrf	_motorPwmFlag
   869  05CC  0AB4               	incf	_motorPwmFlag,f
   870                           
   871                           ;main.c: 989: PWMCON1 = 0B00000000;
   872                           
   873                           ;main.c: 990: PWMTH = 0X00;
   874                           
   875                           ;main.c: 991: PWMTL = 100;
   876                           
   877                           ;main.c: 994: PWMD23H = 0;
   878  05CD  25AA               	fcall	PL10	;call to abstracted procedure
   879                           
   880                           ;main.c: 995: PWMD3L = 43;
   881  05CE  302B               	movlw	43
   882  05CF  009C               	movwf	28	;volatile
   883                           
   884                           ;main.c: 996: PWM23DT = 0X00;
   885  05D0  019D               	clrf	29	;volatile
   886                           
   887                           ;main.c: 998: PWMCON0 = 0X68;
   888  05D1  3068               	movlw	104
   889                           
   890                           ;main.c: 999: PWMCON2 =0X00;
   891  05D2  2DB1               	ljmp	PL12	;call to abstracted procedure
   892  05D3                     __end_of_pwmInit:	
   893                           
   894                           	psect	text3
   895  035D                     __ptext3:	
   896 ;; *************** function _ledCtr *****************
   897 ;; Defined at:
   898 ;;		line 268 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;		None
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      void 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, pclath, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 100/0
   909 ;;		On exit  : 100/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1
   912 ;;      Params:         0       0       0
   913 ;;      Locals:         0       0       0
   914 ;;      Temps:          0       0       0
   915 ;;      Totals:         0       0       0
   916 ;;Total ram usage:        0 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    3
   919 ;; This function calls:
   920 ;;		___lbdiv
   921 ;;		___lbmod
   922 ;;		___lwmod
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           
   929                           ;psect for function _ledCtr
   930  035D                     _ledCtr:	
   931                           
   932                           ;main.c: 270: if(firstTime > 0)
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   936  035D  086E               	movf	_firstTime,w
   937  035E  1903               	btfsc	3,2
   938  035F  2B6A               	goto	l3486
   939  0360  3006               	movlw	6
   940                           
   941                           ;main.c: 271: {
   942                           ;main.c: 272: firstTime--;
   943  0361  03EE               	decf	_firstTime,f
   944                           
   945                           ;main.c: 273: ledStep = 6;
   946  0362  00CD               	movwf	_ledStep
   947                           
   948                           ;main.c: 274: if(prePwStep < pwStep)
   949  0363  0845               	movf	_pwStep,w
   950  0364  0279               	subwf	_prePwStep,w
   951  0365  1803               	skipnc
   952  0366  0008               	return
   953                           
   954                           ;main.c: 275: {
   955                           ;main.c: 276: prePwStep = pwStep;
   956  0367  0845               	movf	_pwStep,w
   957  0368  00F9               	movwf	_prePwStep
   958  0369  0008               	return
   959  036A                     l3486:	
   960                           
   961                           ;main.c: 279: else if(overWorkTime > 0)
   962  036A  0824               	movf	_overWorkTime,w
   963  036B  0425               	iorwf	_overWorkTime+1,w
   964  036C  1903               	btfsc	3,2
   965  036D  2B88               	goto	l3496
   966                           
   967                           ;main.c: 280: {
   968                           ;main.c: 281: overWorkTime--;
   969  036E  3001               	movlw	1
   970  036F  02A4               	subwf	_overWorkTime,f
   971  0370  3000               	movlw	0
   972  0371  1C03               	skipc
   973  0372  03A5               	decf	_overWorkTime+1,f
   974  0373  02A5               	subwf	_overWorkTime+1,f
   975                           
   976                           ;main.c: 282: if(overWorkTime % 60 < 30)
   977  0374  303C               	movlw	60
   978  0375  00F3               	movwf	___lwmod@divisor
   979  0376  01F4               	clrf	___lwmod@divisor+1
   980  0377  0825               	movf	_overWorkTime+1,w
   981  0378  00F6               	movwf	___lwmod@dividend+1
   982  0379  0824               	movf	_overWorkTime,w
   983  037A  00F5               	movwf	___lwmod@dividend
   984  037B  24F3               	fcall	___lwmod
   985  037C  3000               	movlw	0
   986  037D  0274               	subwf	?___lwmod+1,w
   987  037E  301E               	movlw	30
   988  037F  1903               	skipnz
   989  0380  0273               	subwf	?___lwmod,w
   990  0381  1803               	skipnc
   991  0382  2B86               	goto	l3494
   992                           
   993                           ;main.c: 283: {
   994                           ;main.c: 284: ledStep = preWorkStep;
   995  0383  0836               	movf	_preWorkStep,w
   996  0384  00CD               	movwf	_ledStep
   997                           
   998                           ;main.c: 285: }
   999  0385  0008               	return
  1000  0386                     l3494:	
  1001                           
  1002                           ;main.c: 286: else
  1003                           ;main.c: 287: {
  1004                           ;main.c: 288: ledStep = 0;
  1005  0386  01CD               	clrf	_ledStep
  1006  0387  0008               	return
  1007  0388                     l3496:	
  1008                           
  1009                           ;main.c: 291: else if(showBatTime > 0)
  1010  0388  0842               	movf	_showBatTime,w
  1011  0389  1903               	btfsc	3,2
  1012  038A  2BA2               	goto	l3514
  1013  038B  300E               	movlw	14
  1014                           
  1015                           ;main.c: 292: {
  1016                           ;main.c: 293: showBatTime--;
  1017  038C  03C2               	decf	_showBatTime,f
  1018                           
  1019                           ;main.c: 294: if(prePwStep >= 14)
  1020  038D  0279               	subwf	_prePwStep,w
  1021  038E  1C03               	skipc
  1022  038F  2B96               	goto	l3504
  1023                           
  1024                           ;main.c: 295: {
  1025                           ;main.c: 296: ledStep = prePwStep/14;
  1026  0390  300E               	movlw	14
  1027  0391  00F3               	movwf	___lbdiv@divisor
  1028  0392  0879               	movf	_prePwStep,w
  1029  0393  256D               	fcall	___lbdiv
  1030  0394  00CD               	movwf	_ledStep
  1031                           
  1032                           ;main.c: 297: }
  1033  0395  0008               	return
  1034  0396                     l3504:	
  1035                           
  1036                           ;main.c: 298: else if(prePwStep > 5)
  1037  0396  3006               	movlw	6
  1038  0397  0279               	subwf	_prePwStep,w
  1039  0398  1C03               	skipc
  1040  0399  2B9D               	goto	l3508
  1041  039A                     l3506:	
  1042                           
  1043                           ;main.c: 299: {
  1044                           ;main.c: 300: ledStep = 1;
  1045  039A  01CD               	clrf	_ledStep
  1046  039B  0ACD               	incf	_ledStep,f
  1047                           
  1048                           ;main.c: 301: }
  1049  039C  0008               	return
  1050  039D                     l3508:	
  1051                           
  1052                           ;main.c: 302: else
  1053                           ;main.c: 303: {
  1054                           ;main.c: 304: if(count1s < 50)
  1055  039D  3032               	movlw	50
  1056  039E  0256               	subwf	_count1s,w
  1057  039F  1C03               	btfss	3,0
  1058  03A0  2B9A               	goto	l3506
  1059  03A1  2B86               	goto	l3494
  1060  03A2                     l3514:	
  1061                           ;main.c: 311: }
  1062                           ;main.c: 312: }
  1063                           ;main.c: 313: }
  1064                           
  1065                           
  1066                           ;main.c: 314: else if(workStep > 0)
  1067  03A2  087A               	movf	_workStep,w
  1068  03A3  1903               	btfsc	3,2
  1069  03A4  2BA8               	goto	l3518
  1070                           
  1071                           ;main.c: 315: {
  1072                           ;main.c: 316: ledStep = workStep;
  1073  03A5  087A               	movf	_workStep,w
  1074  03A6  00CD               	movwf	_ledStep
  1075                           
  1076                           ;main.c: 317: }
  1077  03A7  0008               	return
  1078  03A8                     l3518:	
  1079                           
  1080                           ;main.c: 318: else if(chrgFlag)
  1081  03A8  0854               	movf	_chrgFlag,w
  1082  03A9  1903               	btfsc	3,2
  1083  03AA  2B86               	goto	l3494
  1084                           
  1085                           ;main.c: 319: {
  1086                           ;main.c: 320: if(count1s % 50 == 0)
  1087  03AB  3032               	movlw	50
  1088  03AC  00F3               	movwf	___lbmod@divisor
  1089  03AD  0856               	movf	_count1s,w
  1090  03AE  2535               	fcall	___lbmod
  1091  03AF  3A00               	xorlw	0
  1092  03B0  1D03               	skipz
  1093  03B1  0008               	return
  1094                           
  1095                           ;main.c: 321: {
  1096                           ;main.c: 322: if(++ledStep > 6)
  1097  03B2  3007               	movlw	7
  1098  03B3  0ACD               	incf	_ledStep,f
  1099  03B4  024D               	subwf	_ledStep,w
  1100  03B5  1C03               	skipc
  1101  03B6  0008               	return
  1102                           
  1103                           ;main.c: 323: {
  1104                           ;main.c: 324: ledStep = lockLedStep;
  1105  03B7  0843               	movf	_lockLedStep,w
  1106  03B8  00CD               	movwf	_ledStep
  1107  03B9  0008               	return
  1108  03BA                     __end_of_ledCtr:	
  1109                           
  1110                           	psect	text4
  1111  04F3                     __ptext4:	
  1112 ;; *************** function ___lwmod *****************
  1113 ;; Defined at:
  1114 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  divisor         2    3[COMMON] unsigned int 
  1117 ;;  dividend        2    5[COMMON] unsigned int 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  counter         1    0[BANK0 ] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  2    3[COMMON] unsigned int 
  1122 ;; Registers used:
  1123 ;;		wreg, status,2, status,0
  1124 ;; Tracked objects:
  1125 ;;		On entry : 100/0
  1126 ;;		On exit  : 100/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1
  1129 ;;      Params:         4       0       0
  1130 ;;      Locals:         0       1       0
  1131 ;;      Temps:          0       0       0
  1132 ;;      Totals:         4       1       0
  1133 ;;Total ram usage:        5 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    2
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_ledCtr
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           
  1144                           ;psect for function ___lwmod
  1145  04F3                     ___lwmod:	
  1146                           
  1147                           ;incstack = 0
  1148                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1149  04F3  0873               	movf	___lwmod@divisor,w
  1150  04F4  0474               	iorwf	___lwmod@divisor+1,w
  1151  04F5  1903               	btfsc	3,2
  1152  04F6  2D12               	goto	l3158
  1153  04F7  01D9               	clrf	___lwmod@counter
  1154  04F8                     L1:	
  1155  04F8  0AD9               	incf	___lwmod@counter,f
  1156  04F9  1BF4               	btfsc	___lwmod@divisor+1,7
  1157  04FA  2CFF               	goto	l3150
  1158  04FB  1003               	clrc
  1159  04FC  0DF3               	rlf	___lwmod@divisor,f
  1160  04FD  0DF4               	rlf	___lwmod@divisor+1,f
  1161  04FE  2CF8               	goto	L1
  1162  04FF                     l3150:	
  1163  04FF  0874               	movf	___lwmod@divisor+1,w
  1164  0500  0276               	subwf	___lwmod@dividend+1,w
  1165  0501  1D03               	skipz
  1166  0502  2D05               	goto	u3275
  1167  0503  0873               	movf	___lwmod@divisor,w
  1168  0504  0275               	subwf	___lwmod@dividend,w
  1169  0505                     u3275:	
  1170  0505  1C03               	skipc
  1171  0506  2D0E               	goto	L2
  1172  0507  0873               	movf	___lwmod@divisor,w
  1173  0508  02F5               	subwf	___lwmod@dividend,f
  1174  0509  0874               	movf	___lwmod@divisor+1,w
  1175  050A  1C03               	skipc
  1176  050B  03F6               	decf	___lwmod@dividend+1,f
  1177  050C  02F6               	subwf	___lwmod@dividend+1,f
  1178  050D  1003               	clrc
  1179  050E                     L2:	
  1180  050E  0CF4               	rrf	___lwmod@divisor+1,f
  1181  050F  0CF3               	rrf	___lwmod@divisor,f
  1182  0510  0BD9               	decfsz	___lwmod@counter,f
  1183  0511  2CFF               	goto	l3150
  1184  0512                     l3158:	
  1185  0512  0876               	movf	___lwmod@dividend+1,w
  1186  0513  00F4               	movwf	?___lwmod+1
  1187  0514  0875               	movf	___lwmod@dividend,w
  1188  0515  00F3               	movwf	?___lwmod
  1189  0516  0008               	return
  1190  0517                     __end_of___lwmod:	
  1191                           
  1192                           	psect	text5
  1193  0535                     __ptext5:	
  1194 ;; *************** function ___lbmod *****************
  1195 ;; Defined at:
  1196 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  dividend        1    wreg     unsigned char 
  1199 ;;  divisor         1    3[COMMON] unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  dividend        1    0[BANK0 ] unsigned char 
  1202 ;;  rem             1    2[BANK0 ] unsigned char 
  1203 ;;  counter         1    1[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      unsigned char 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 100/0
  1210 ;;		On exit  : 100/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1
  1213 ;;      Params:         1       0       0
  1214 ;;      Locals:         0       3       0
  1215 ;;      Temps:          1       0       0
  1216 ;;      Totals:         2       3       0
  1217 ;;Total ram usage:        5 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    2
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_ledCtr
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function ___lbmod
  1229  0535                     ___lbmod:	
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1233                           ;___lbmod@dividend stored from wreg
  1234  0535  00D9               	movwf	___lbmod@dividend
  1235  0536  3008               	movlw	8
  1236  0537  00DA               	movwf	___lbmod@counter
  1237  0538  01DB               	clrf	___lbmod@rem
  1238  0539                     l3128:	
  1239  0539  0859               	movf	___lbmod@dividend,w
  1240  053A  00F4               	movwf	??___lbmod
  1241  053B  3007               	movlw	7
  1242  053C  1003               	clrc
  1243  053D                     L3:	
  1244  053D  0CF4               	rrf	??___lbmod,f
  1245  053E  3EFF               	addlw	-1
  1246  053F  1003               	clrc
  1247  0540  1D03               	skipz
  1248  0541  2D3D               	goto	L3
  1249  0542  0D5B               	rlf	___lbmod@rem,w
  1250  0543  0474               	iorwf	??___lbmod,w
  1251  0544  00DB               	movwf	___lbmod@rem
  1252  0545  1003               	clrc
  1253  0546  0DD9               	rlf	___lbmod@dividend,f
  1254  0547  0873               	movf	___lbmod@divisor,w
  1255  0548  025B               	subwf	___lbmod@rem,w
  1256  0549  1C03               	skipc
  1257  054A  2D4D               	goto	l3136
  1258  054B  0873               	movf	___lbmod@divisor,w
  1259  054C  02DB               	subwf	___lbmod@rem,f
  1260  054D                     l3136:	
  1261  054D  0BDA               	decfsz	___lbmod@counter,f
  1262  054E  2D39               	goto	l3128
  1263  054F  085B               	movf	___lbmod@rem,w
  1264  0550  0008               	return
  1265  0551                     __end_of___lbmod:	
  1266                           
  1267                           	psect	text6
  1268  04C8                     __ptext6:	
  1269 ;; *************** function _keyCtr *****************
  1270 ;; Defined at:
  1271 ;;		line 569 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  kclick          1    4[COMMON] unsigned char 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, status,2, status,0, pclath, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 100/0
  1282 ;;		On exit  : 100/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1
  1285 ;;      Params:         0       0       0
  1286 ;;      Locals:         1       0       0
  1287 ;;      Temps:          0       0       0
  1288 ;;      Totals:         1       0       0
  1289 ;;Total ram usage:        1 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    3
  1292 ;; This function calls:
  1293 ;;		_keyRead
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;; This function uses a non-reentrant model
  1297 ;;
  1298                           
  1299                           
  1300                           ;psect for function _keyCtr
  1301  04C8                     _keyCtr:	
  1302                           
  1303                           ;main.c: 571: char kclick = keyRead(0x04 & (~PORTB));
  1304                           
  1305                           ;incstack = 0
  1306                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1307  04C8  0906               	comf	6,w	;volatile
  1308  04C9  3904               	andlw	4
  1309  04CA  2517               	fcall	_keyRead
  1310  04CB  00F4               	movwf	keyCtr@kclick
  1311                           
  1312                           ;main.c: 572: if(kclick == 1)
  1313  04CC  0B74               	decfsz	keyCtr@kclick,w
  1314  04CD  2CE2               	goto	l2818
  1315                           
  1316                           ;main.c: 573: {
  1317                           ;main.c: 574: if(workStep > 0)
  1318  04CE  087A               	movf	_workStep,w
  1319  04CF  1903               	btfsc	3,2
  1320  04D0  2CD9               	goto	l2810
  1321                           
  1322                           ;main.c: 575: {
  1323                           ;main.c: 576: if(++workStep > 6)
  1324  04D1  3007               	movlw	7
  1325  04D2  0AFA               	incf	_workStep,f
  1326  04D3  027A               	subwf	_workStep,w
  1327  04D4  1C03               	skipc
  1328  04D5  0008               	return
  1329                           
  1330                           ;main.c: 577: {
  1331                           ;main.c: 578: workStep = 1;
  1332  04D6  01FA               	clrf	_workStep
  1333  04D7  0AFA               	incf	_workStep,f
  1334  04D8  0008               	return
  1335  04D9                     l2810:	
  1336                           
  1337                           ;main.c: 581: else if(showBatTime > 0)
  1338  04D9  0842               	movf	_showBatTime,w
  1339  04DA  1903               	btfsc	3,2
  1340  04DB  2CDE               	goto	l2814
  1341                           
  1342                           ;main.c: 582: {
  1343                           ;main.c: 583: showBatTime = 0;
  1344  04DC  01C2               	clrf	_showBatTime
  1345                           
  1346                           ;main.c: 584: }
  1347  04DD  0008               	return
  1348  04DE                     l2814:	
  1349                           
  1350                           ;main.c: 585: else
  1351                           ;main.c: 586: {
  1352                           ;main.c: 587: showBatTime = 200;
  1353  04DE  30C8               	movlw	200
  1354  04DF  00C2               	movwf	_showBatTime
  1355                           
  1356                           ;main.c: 588: count1s = 0;
  1357  04E0  01D6               	clrf	_count1s
  1358  04E1  0008               	return
  1359  04E2                     l2818:	
  1360                           
  1361                           ;main.c: 591: else if(kclick == 2)
  1362  04E2  3002               	movlw	2
  1363  04E3  0674               	xorwf	keyCtr@kclick,w
  1364  04E4  1D03               	btfss	3,2
  1365  04E5  0008               	return
  1366                           
  1367                           ;main.c: 592: {
  1368                           ;main.c: 593: if(workStep > 0)
  1369  04E6  087A               	movf	_workStep,w
  1370  04E7  1903               	btfsc	3,2
  1371  04E8  2CEB               	goto	l816
  1372                           
  1373                           ;main.c: 594: {
  1374                           ;main.c: 595: workStep = 0;
  1375  04E9  01FA               	clrf	_workStep
  1376                           
  1377                           ;main.c: 596: }
  1378  04EA  0008               	return
  1379  04EB                     l816:	
  1380  04EB  301E               	movlw	30
  1381                           
  1382                           ;main.c: 597: else
  1383                           ;main.c: 598: {
  1384                           ;main.c: 599: workStep = 1;
  1385  04EC  01FA               	clrf	_workStep
  1386  04ED  0AFA               	incf	_workStep,f
  1387                           
  1388                           ;main.c: 600: startTime = 30;
  1389  04EE  00C7               	movwf	_startTime
  1390                           
  1391                           ;main.c: 601: showBatTime = 0;
  1392  04EF  01C2               	clrf	_showBatTime
  1393                           
  1394                           ;main.c: 602: overWorkTime = 0;
  1395  04F0  01A4               	clrf	_overWorkTime
  1396  04F1  01A5               	clrf	_overWorkTime+1
  1397  04F2  0008               	return
  1398  04F3                     __end_of_keyCtr:	
  1399                           
  1400                           	psect	text7
  1401  0517                     __ptext7:	
  1402 ;; *************** function _keyRead *****************
  1403 ;; Defined at:
  1404 ;;		line 501 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  keyStatus       1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  keyStatus       1    3[COMMON] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      unsigned char 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 100/0
  1415 ;;		On exit  : 100/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1
  1418 ;;      Params:         0       0       0
  1419 ;;      Locals:         1       0       0
  1420 ;;      Temps:          0       0       0
  1421 ;;      Totals:         1       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    2
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_keyCtr
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _keyRead
  1434  0517                     _keyRead:	
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1438                           ;keyRead@keyStatus stored from wreg
  1439  0517  00F3               	movwf	keyRead@keyStatus
  1440                           
  1441                           ;main.c: 503: if(keyStatus)
  1442  0518  0873               	movf	keyRead@keyStatus,w
  1443  0519  3064               	movlw	100
  1444  051A  1903               	btfsc	3,2
  1445  051B  2D29               	goto	L5
  1446                           
  1447                           ;main.c: 504: {
  1448                           ;main.c: 505: keyCount++;
  1449  051C  0ACC               	incf	_keyCount,f
  1450                           
  1451                           ;main.c: 506: if(keyCount >= 100)
  1452  051D  024C               	subwf	_keyCount,w
  1453  051E  1C03               	skipc
  1454  051F  3400               	retlw	0
  1455                           
  1456                           ;main.c: 507: {
  1457                           ;main.c: 508: keyCount = 100;
  1458  0520  3064               	movlw	100
  1459  0521  00CC               	movwf	_keyCount
  1460                           
  1461                           ;main.c: 509: if(!longPressFlag)
  1462  0522  084B               	movf	_longPressFlag,w
  1463  0523  1D03               	btfss	3,2
  1464  0524  3400               	retlw	0
  1465  0525  3002               	movlw	2
  1466                           
  1467                           ;main.c: 510: {
  1468                           ;main.c: 511: longPressFlag = 1;
  1469  0526  01CB               	clrf	_longPressFlag
  1470  0527  0ACB               	incf	_longPressFlag,f
  1471                           
  1472                           ;main.c: 512: return 2;
  1473  0528  0008               	return
  1474  0529                     L5:	
  1475                           ;main.c: 516: else
  1476                           ;main.c: 517: {
  1477                           ;main.c: 518: if(keyCount >= 100)
  1478                           
  1479  0529  024C               	subwf	_keyCount,w
  1480  052A  1C03               	skipc
  1481  052B  2D2F               	goto	l2268
  1482                           
  1483                           ;main.c: 519: {
  1484                           ;main.c: 520: keyCount = 0;
  1485  052C  01CC               	clrf	_keyCount
  1486                           
  1487                           ;main.c: 521: longPressFlag = 0;
  1488  052D  01CB               	clrf	_longPressFlag
  1489                           
  1490                           ;main.c: 522: return 0;
  1491  052E  3400               	retlw	0
  1492  052F                     l2268:	
  1493                           
  1494                           ;main.c: 524: else if(keyCount >= 6)
  1495  052F  3006               	movlw	6
  1496  0530  024C               	subwf	_keyCount,w
  1497                           
  1498                           ;main.c: 525: {
  1499                           ;main.c: 526: keyCount = 0;
  1500  0531  01CC               	clrf	_keyCount
  1501  0532  1803               	btfsc	3,0
  1502                           
  1503                           ;main.c: 527: return 1;
  1504  0533  3401               	retlw	1
  1505  0534  3400               	retlw	0
  1506  0535                     __end_of_keyRead:	
  1507                           ;main.c: 528: }
  1508                           ;main.c: 529: keyCount = 0;
  1509                           
  1510                           
  1511                           	psect	text8
  1512  0018                     __ptext8:	
  1513 ;; *************** function _chrgCtr *****************
  1514 ;; Defined at:
  1515 ;;		line 336 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0, pclath, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 100/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMMON   BANK0   BANK1
  1529 ;;      Params:         0       0       0
  1530 ;;      Locals:         0       0       0
  1531 ;;      Temps:          0       2       0
  1532 ;;      Totals:         0       2       0
  1533 ;;Total ram usage:        2 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    3
  1536 ;; This function calls:
  1537 ;;		___lbdiv
  1538 ;;		_chrgPwmInit
  1539 ;;		_chrgPwmStop
  1540 ;;		_pwmStop
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _chrgCtr
  1548  0018                     _chrgCtr:	
  1549                           
  1550                           ;main.c: 338: if(PORTA & 0x02)
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1554  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1555  0019  1C86               	btfss	6,1	;volatile
  1556  001A  28F9               	goto	l3398
  1557                           
  1558                           ;main.c: 339: {
  1559                           ;main.c: 340: if(chrgFlag == 0)
  1560  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1561  001C  0854               	movf	_chrgFlag,w
  1562  001D  1D03               	btfss	3,2
  1563  001E  2823               	goto	l3274
  1564                           
  1565                           ;main.c: 341: {
  1566                           ;main.c: 342: chrgFlag = 1;
  1567  001F  01D4               	clrf	_chrgFlag
  1568  0020  0AD4               	incf	_chrgFlag,f
  1569                           
  1570                           ;main.c: 343: chrgMaxDuty = 0;
  1571  0021  01BB               	clrf	_chrgMaxDuty
  1572                           
  1573                           ;main.c: 344: chrgPwmStop();
  1574  0022  25E2               	fcall	_chrgPwmStop
  1575  0023                     l3274:	
  1576                           
  1577                           ;main.c: 345: }
  1578                           ;main.c: 346: jrStep = 0;
  1579  0023  01B7               	clrf	_jrStep
  1580                           
  1581                           ;main.c: 347: workStep = 0;
  1582  0024  01FA               	clrf	_workStep
  1583                           
  1584                           ;main.c: 348: pwmStop();
  1585  0025  25DB               	fcall	_pwmStop
  1586                           
  1587                           ;main.c: 349: lowBatFlag = 0;
  1588  0026  01B9               	clrf	_lowBatFlag
  1589                           
  1590                           ;main.c: 350: if(prePwStep < pwStep)
  1591  0027  0845               	movf	_pwStep,w
  1592  0028  0279               	subwf	_prePwStep,w
  1593  0029  1803               	skipnc
  1594  002A  2834               	goto	l3288
  1595                           
  1596                           ;main.c: 351: {
  1597                           ;main.c: 352: if(++count50s > 3000)
  1598  002B  2118               	fcall	PL8	;call to abstracted procedure
  1599  002C  1903               	skipnz
  1600  002D  022A               	subwf	_count50s,w
  1601  002E  1C03               	skipc
  1602  002F  2836               	goto	l3290
  1603                           
  1604                           ;main.c: 353: {
  1605                           ;main.c: 354: count50s = 0;
  1606  0030  01AA               	clrf	_count50s
  1607  0031  01AB               	clrf	_count50s+1
  1608                           
  1609                           ;main.c: 355: prePwStep++;
  1610  0032  0AF9               	incf	_prePwStep,f
  1611  0033  2836               	goto	l3290
  1612  0034                     l3288:	
  1613                           
  1614                           ;main.c: 358: else
  1615                           ;main.c: 359: {
  1616                           ;main.c: 360: count50s = 0;
  1617  0034  01AA               	clrf	_count50s
  1618  0035  01AB               	clrf	_count50s+1
  1619  0036                     l3290:	
  1620                           
  1621                           ;main.c: 361: }
  1622                           ;main.c: 362: if(protectFlag)
  1623  0036  0850               	movf	_protectFlag,w
  1624  0037  1903               	btfsc	3,2
  1625  0038  2857               	goto	l3312
  1626                           
  1627                           ;main.c: 363: {
  1628                           ;main.c: 364: chrgPwmStop();
  1629  0039  25E2               	fcall	_chrgPwmStop
  1630                           
  1631                           ;main.c: 365: if(prePwStep < 99 && protectFlag == 1)
  1632  003A  3063               	movlw	99
  1633  003B  0279               	subwf	_prePwStep,w
  1634  003C  1803               	skipnc
  1635  003D  2855               	goto	l3308
  1636  003E  0B50               	decfsz	_protectFlag,w
  1637  003F  2855               	goto	l3308
  1638                           
  1639                           ;main.c: 366: {
  1640                           ;main.c: 367: if(++reChrgCount > 250)
  1641  0040  30FB               	movlw	251
  1642  0041  0AC4               	incf	_reChrgCount,f
  1643  0042  0244               	subwf	_reChrgCount,w
  1644  0043  1C03               	skipc
  1645  0044  0008               	return
  1646  0045  300F               	movlw	15
  1647                           
  1648                           ;main.c: 368: {
  1649                           ;main.c: 369: reChrgCount = 0;
  1650  0046  01C4               	clrf	_reChrgCount
  1651                           
  1652                           ;main.c: 370: chrgFullFlag = 0;
  1653  0047  01D3               	clrf	_chrgFullFlag
  1654                           
  1655                           ;main.c: 371: protectFlag = 0;
  1656  0048  01D0               	clrf	_protectFlag
  1657                           
  1658                           ;main.c: 372: if(prePwStep > 14)
  1659  0049  0279               	subwf	_prePwStep,w
  1660  004A  1C03               	skipc
  1661  004B  2853               	goto	l3306
  1662                           
  1663                           ;main.c: 373: {
  1664                           ;main.c: 374: lockLedStep = (prePwStep/14) - 1;
  1665  004C  300E               	movlw	14
  1666  004D  00F3               	movwf	___lbdiv@divisor
  1667  004E  0879               	movf	_prePwStep,w
  1668  004F  256D               	fcall	___lbdiv
  1669  0050  3EFF               	addlw	255
  1670  0051  00C3               	movwf	_lockLedStep
  1671                           
  1672                           ;main.c: 375: }
  1673  0052  0008               	return
  1674  0053                     l3306:	
  1675                           
  1676                           ;main.c: 376: else
  1677                           ;main.c: 377: {
  1678                           ;main.c: 378: lockLedStep = 0;
  1679  0053  01C3               	clrf	_lockLedStep
  1680  0054  0008               	return
  1681  0055                     l3308:	
  1682                           
  1683                           ;main.c: 382: else
  1684                           ;main.c: 383: {
  1685                           ;main.c: 384: reChrgCount = 0;
  1686  0055  01C4               	clrf	_reChrgCount
  1687  0056  0008               	return
  1688  0057                     l3312:	
  1689                           
  1690                           ;main.c: 387: }
  1691                           ;main.c: 388: if(batADValue < 1118)
  1692  0057  3004               	movlw	4
  1693  0058  0278               	subwf	_batADValue+1,w
  1694  0059  305E               	movlw	94
  1695  005A  1903               	skipnz
  1696  005B  0277               	subwf	_batADValue,w
  1697  005C  1803               	skipnc
  1698  005D  2861               	goto	l3318
  1699  005E  300F               	movlw	15
  1700                           
  1701                           ;main.c: 389: {
  1702                           ;main.c: 390: chrgMode = 0;
  1703  005F  01C1               	clrf	_chrgMode
  1704                           
  1705                           ;main.c: 391: chrgMaxAD = 15;
  1706  0060  287A               	goto	L6
  1707  0061                     l3318:	
  1708                           ;main.c: 392: }
  1709                           
  1710                           
  1711                           ;main.c: 393: else if(batADValue < 1530)
  1712  0061  3005               	movlw	5
  1713  0062  0278               	subwf	_batADValue+1,w
  1714  0063  30FA               	movlw	250
  1715  0064  1903               	skipnz
  1716  0065  0277               	subwf	_batADValue,w
  1717  0066  1803               	skipnc
  1718  0067  286E               	goto	l3326
  1719  0068  303C               	movlw	60
  1720                           
  1721                           ;main.c: 394: {
  1722                           ;main.c: 395: chrgMode = 1;
  1723  0069  01C1               	clrf	_chrgMode
  1724  006A  0AC1               	incf	_chrgMode,f
  1725                           
  1726                           ;main.c: 396: chrgMaxAD = 60;
  1727  006B  00C0               	movwf	_chrgMaxAD
  1728                           
  1729                           ;main.c: 397: lockCount = 0;
  1730  006C  01BF               	clrf	_lockCount
  1731                           
  1732                           ;main.c: 398: }
  1733  006D  287B               	goto	l3336
  1734  006E                     l3326:	
  1735                           
  1736                           ;main.c: 399: else if(count1s == 0)
  1737  006E  0856               	movf	_count1s,w
  1738  006F  1D03               	btfss	3,2
  1739  0070  287B               	goto	l3336
  1740                           
  1741                           ;main.c: 400: {
  1742                           ;main.c: 401: if(++lockCount > 200)
  1743  0071  30C9               	movlw	201
  1744  0072  0ABF               	incf	_lockCount,f
  1745  0073  023F               	subwf	_lockCount,w
  1746  0074  1C03               	skipc
  1747  0075  2879               	goto	l3334
  1748  0076  3002               	movlw	2
  1749                           
  1750                           ;main.c: 402: {
  1751                           ;main.c: 403: lockCount = 0;
  1752  0077  01BF               	clrf	_lockCount
  1753                           
  1754                           ;main.c: 404: chrgMode = 2;
  1755  0078  00C1               	movwf	_chrgMode
  1756  0079                     l3334:	
  1757                           
  1758                           ;main.c: 405: }
  1759                           ;main.c: 407: chrgMaxAD = 60;
  1760  0079  303C               	movlw	60
  1761  007A                     L6:	
  1762  007A  00C0               	movwf	_chrgMaxAD
  1763  007B                     l3336:	
  1764                           
  1765                           ;main.c: 408: }
  1766                           ;main.c: 409: if(chrgMode == 2 && outADValue < 8)
  1767  007B  3002               	movlw	2
  1768  007C  0641               	xorwf	_chrgMode,w
  1769  007D  1D03               	btfss	3,2
  1770  007E  2895               	goto	l3346
  1771  007F  3000               	movlw	0
  1772  0080  022D               	subwf	_outADValue+1,w
  1773  0081  3008               	movlw	8
  1774  0082  1903               	skipnz
  1775  0083  022C               	subwf	_outADValue,w
  1776  0084  1803               	skipnc
  1777  0085  2895               	goto	l3346
  1778                           
  1779                           ;main.c: 410: {
  1780                           ;main.c: 411: if(++fullCount >= 200)
  1781  0086  0AA8               	incf	_fullCount,f
  1782  0087  1903               	skipnz
  1783  0088  0AA9               	incf	_fullCount+1,f
  1784  0089  3000               	movlw	0
  1785  008A  0229               	subwf	_fullCount+1,w
  1786  008B  30C8               	movlw	200
  1787  008C  1903               	skipnz
  1788  008D  0228               	subwf	_fullCount,w
  1789  008E  1C03               	skipc
  1790  008F  2897               	goto	l3348
  1791                           
  1792                           ;main.c: 412: {
  1793                           ;main.c: 413: fullCount = 0;
  1794  0090  01A8               	clrf	_fullCount
  1795  0091  01A9               	clrf	_fullCount+1
  1796                           
  1797                           ;main.c: 414: chrgFullFlag = 1;
  1798  0092  01D3               	clrf	_chrgFullFlag
  1799  0093  0AD3               	incf	_chrgFullFlag,f
  1800  0094  2897               	goto	l3348
  1801  0095                     l3346:	
  1802                           
  1803                           ;main.c: 417: else
  1804                           ;main.c: 418: {
  1805                           ;main.c: 419: fullCount = 0;
  1806  0095  01A8               	clrf	_fullCount
  1807  0096  01A9               	clrf	_fullCount+1
  1808  0097                     l3348:	
  1809                           
  1810                           ;main.c: 420: }
  1811                           ;main.c: 421: if(chrgFullFlag)
  1812  0097  0853               	movf	_chrgFullFlag,w
  1813  0098  1903               	btfsc	3,2
  1814  0099  289D               	goto	l3354
  1815                           
  1816                           ;main.c: 422: {
  1817                           ;main.c: 423: lockLedStep = 6;
  1818  009A  3006               	movlw	6
  1819  009B  00C3               	movwf	_lockLedStep
  1820                           
  1821                           ;main.c: 424: chrgPwmStop();
  1822  009C  2DE2               	ljmp	l2214
  1823  009D                     l3354:	
  1824                           ;main.c: 425: }
  1825                           
  1826                           
  1827                           ;main.c: 426: else
  1828                           ;main.c: 427: {
  1829                           ;main.c: 428: if(prePwStep < 15)
  1830  009D  300F               	movlw	15
  1831  009E  0279               	subwf	_prePwStep,w
  1832  009F  1803               	skipnc
  1833  00A0  28A3               	goto	l3358
  1834                           
  1835                           ;main.c: 429: {
  1836                           ;main.c: 430: lockLedStep = 0;
  1837  00A1  01C3               	clrf	_lockLedStep
  1838                           
  1839                           ;main.c: 431: }
  1840  00A2  28A9               	goto	l3360
  1841  00A3                     l3358:	
  1842                           
  1843                           ;main.c: 432: else
  1844                           ;main.c: 433: {
  1845                           ;main.c: 434: lockLedStep = (prePwStep/14) - 1;
  1846  00A3  300E               	movlw	14
  1847  00A4  00F3               	movwf	___lbdiv@divisor
  1848  00A5  0879               	movf	_prePwStep,w
  1849  00A6  256D               	fcall	___lbdiv
  1850  00A7  3EFF               	addlw	255
  1851  00A8  00C3               	movwf	_lockLedStep
  1852  00A9                     l3360:	
  1853                           
  1854                           ;main.c: 435: }
  1855                           ;main.c: 436: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  1856  00A9  3006               	movlw	6
  1857  00AA  0278               	subwf	_batADValue+1,w
  1858  00AB  300F               	movlw	15
  1859  00AC  1903               	skipnz
  1860  00AD  0277               	subwf	_batADValue,w
  1861  00AE  1803               	skipnc
  1862  00AF  28BF               	goto	l3364
  1863  00B0  0840               	movf	_chrgMaxAD,w
  1864  00B1  3E02               	addlw	2
  1865  00B2  00D9               	movwf	??_chrgCtr
  1866  00B3  3000               	movlw	0
  1867  00B4  1803               	skipnc
  1868  00B5  3001               	movlw	1
  1869  00B6  00DA               	movwf	??_chrgCtr+1
  1870  00B7  082D               	movf	_outADValue+1,w
  1871  00B8  025A               	subwf	??_chrgCtr+1,w
  1872  00B9  1D03               	skipz
  1873  00BA  28BD               	goto	u3715
  1874  00BB  082C               	movf	_outADValue,w
  1875  00BC  0259               	subwf	??_chrgCtr,w
  1876  00BD                     u3715:	
  1877  00BD  1803               	skipnc
  1878  00BE  28CE               	goto	l3376
  1879  00BF                     l3364:	
  1880                           
  1881                           ;main.c: 437: {
  1882                           ;main.c: 438: if(++subTime > chrgWaitTime)
  1883  00BF  0ABD               	incf	_subTime,f
  1884  00C0  083D               	movf	_subTime,w
  1885  00C1  023C               	subwf	_chrgWaitTime,w
  1886  00C2  1803               	skipnc
  1887  00C3  28CC               	goto	l3374
  1888                           
  1889                           ;main.c: 439: {
  1890                           ;main.c: 440: if(chrgMaxDuty > 1)
  1891  00C4  3002               	movlw	2
  1892  00C5  023B               	subwf	_chrgMaxDuty,w
  1893  00C6  1C03               	skipc
  1894  00C7  28C9               	goto	l3370
  1895                           
  1896                           ;main.c: 441: {
  1897                           ;main.c: 442: chrgMaxDuty--;
  1898  00C8  03BB               	decf	_chrgMaxDuty,f
  1899  00C9                     l3370:	
  1900  00C9  3032               	movlw	50
  1901                           
  1902                           ;main.c: 443: }
  1903                           ;main.c: 444: subTime = 0;
  1904  00CA  01BD               	clrf	_subTime
  1905                           
  1906                           ;main.c: 445: chrgWaitTime = 50;
  1907  00CB  00BC               	movwf	_chrgWaitTime
  1908  00CC                     l3374:	
  1909                           
  1910                           ;main.c: 446: }
  1911                           ;main.c: 447: addTime = 0;
  1912  00CC  01BE               	clrf	_addTime
  1913                           
  1914                           ;main.c: 448: }
  1915  00CD  28EE               	goto	l3390
  1916  00CE                     l3376:	
  1917                           
  1918                           ;main.c: 449: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1919  00CE  3006               	movlw	6
  1920  00CF  0278               	subwf	_batADValue+1,w
  1921  00D0  300E               	movlw	14
  1922  00D1  1903               	skipnz
  1923  00D2  0277               	subwf	_batADValue,w
  1924  00D3  1803               	skipnc
  1925  00D4  28EE               	goto	l3390
  1926  00D5  0840               	movf	_chrgMaxAD,w
  1927  00D6  3EFC               	addlw	252
  1928  00D7  00D9               	movwf	??_chrgCtr
  1929  00D8  30FF               	movlw	255
  1930  00D9  1803               	skipnc
  1931  00DA  3000               	movlw	0
  1932  00DB  00DA               	movwf	??_chrgCtr+1
  1933  00DC  022D               	subwf	_outADValue+1,w
  1934  00DD  1D03               	skipz
  1935  00DE  28E1               	goto	u3755
  1936  00DF  0859               	movf	??_chrgCtr,w
  1937  00E0  022C               	subwf	_outADValue,w
  1938  00E1                     u3755:	
  1939  00E1  1803               	skipnc
  1940  00E2  28EE               	goto	l3390
  1941                           
  1942                           ;main.c: 450: {
  1943                           ;main.c: 451: if(++addTime > chrgWaitTime)
  1944  00E3  0ABE               	incf	_addTime,f
  1945  00E4  083E               	movf	_addTime,w
  1946  00E5  023C               	subwf	_chrgWaitTime,w
  1947  00E6  1803               	skipnc
  1948  00E7  28ED               	goto	l3388
  1949  00E8  304B               	movlw	75
  1950                           
  1951                           ;main.c: 452: {
  1952                           ;main.c: 453: addTime = 0;
  1953  00E9  01BE               	clrf	_addTime
  1954                           
  1955                           ;main.c: 454: if(chrgMaxDuty < 75)
  1956  00EA  023B               	subwf	_chrgMaxDuty,w
  1957  00EB  1C03               	btfss	3,0
  1958                           
  1959                           ;main.c: 455: {
  1960                           ;main.c: 456: chrgMaxDuty++;
  1961  00EC  0ABB               	incf	_chrgMaxDuty,f
  1962  00ED                     l3388:	
  1963                           
  1964                           ;main.c: 457: }
  1965                           ;main.c: 458: }
  1966                           ;main.c: 459: subTime = 0;
  1967  00ED  01BD               	clrf	_subTime
  1968  00EE                     l3390:	
  1969                           
  1970                           ;main.c: 460: }
  1971                           ;main.c: 463: if(chrgPwmFlag == 0)
  1972  00EE  0835               	movf	_chrgPwmFlag,w
  1973  00EF  1D03               	btfss	3,2
  1974  00F0  28F2               	goto	l3394
  1975                           
  1976                           ;main.c: 464: {
  1977                           ;main.c: 465: chrgPwmInit();
  1978  00F1  25A2               	fcall	_chrgPwmInit
  1979  00F2                     l3394:	
  1980                           
  1981                           ;main.c: 466: }
  1982                           ;main.c: 467: PWMD23H = 0X00;
  1983  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1984  00F3  019E               	clrf	30	;volatile
  1985                           
  1986                           ;main.c: 468: PWMD2L = chrgMaxDuty;
  1987  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1988  00F5  083B               	movf	_chrgMaxDuty,w
  1989  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1990  00F7  009B               	movwf	27	;volatile
  1991  00F8  0008               	return
  1992  00F9                     l3398:	
  1993  00F9  3014               	movlw	20
  1994                           
  1995                           ;main.c: 474: chrgFlag = 0;
  1996  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1997  00FB  01D4               	clrf	_chrgFlag
  1998                           
  1999                           ;main.c: 475: chrgFullFlag = 0;
  2000  00FC  01D3               	clrf	_chrgFullFlag
  2001                           
  2002                           ;main.c: 476: protectFlag = 0;
  2003  00FD  01D0               	clrf	_protectFlag
  2004                           
  2005                           ;main.c: 477: chrgMode = 0;
  2006  00FE  01C1               	clrf	_chrgMode
  2007                           
  2008                           ;main.c: 478: chrgMaxAD = 0;
  2009  00FF  01C0               	clrf	_chrgMaxAD
  2010                           
  2011                           ;main.c: 479: chrgMaxDuty = 0;
  2012  0100  01BB               	clrf	_chrgMaxDuty
  2013                           
  2014                           ;main.c: 480: lockCount = 0;
  2015  0101  01BF               	clrf	_lockCount
  2016                           
  2017                           ;main.c: 481: lockLedStep = 0;
  2018  0102  01C3               	clrf	_lockLedStep
  2019                           
  2020                           ;main.c: 482: chrgWaitTime = 20;
  2021  0103  00BC               	movwf	_chrgWaitTime
  2022                           
  2023                           ;main.c: 483: chrgPwmStop();
  2024  0104  25E2               	fcall	_chrgPwmStop
  2025                           
  2026                           ;main.c: 484: if(prePwStep > 0 && prePwStep > pwStep)
  2027  0105  0879               	movf	_prePwStep,w
  2028  0106  1903               	btfsc	3,2
  2029  0107  2915               	goto	l3414
  2030  0108  0879               	movf	_prePwStep,w
  2031  0109  0245               	subwf	_pwStep,w
  2032  010A  1803               	skipnc
  2033  010B  2915               	goto	l3414
  2034                           
  2035                           ;main.c: 485: {
  2036                           ;main.c: 486: if(++count50s > 3000)
  2037  010C  2118               	fcall	PL8	;call to abstracted procedure
  2038  010D  1903               	skipnz
  2039  010E  022A               	subwf	_count50s,w
  2040  010F  1C03               	skipc
  2041  0110  0008               	return
  2042                           
  2043                           ;main.c: 487: {
  2044                           ;main.c: 488: count50s = 0;
  2045  0111  01AA               	clrf	_count50s
  2046  0112  01AB               	clrf	_count50s+1
  2047                           
  2048                           ;main.c: 489: prePwStep--;
  2049  0113  03F9               	decf	_prePwStep,f
  2050  0114  0008               	return
  2051  0115                     l3414:	
  2052                           
  2053                           ;main.c: 492: else
  2054                           ;main.c: 493: {
  2055                           ;main.c: 494: count50s = 0;
  2056  0115  01AA               	clrf	_count50s
  2057  0116  01AB               	clrf	_count50s+1
  2058  0117  0008               	return
  2059  0118                     __end_of_chrgCtr:	
  2060  0118                     PL8:	
  2061  0118  0AAA               	incf	_count50s,f
  2062  0119  1903               	skipnz
  2063  011A  0AAB               	incf	_count50s+1,f
  2064  011B  300B               	movlw	11
  2065  011C  022B               	subwf	_count50s+1,w
  2066  011D  34B9               	retlw	185
  2067  011E                     __end_ofPL8:	
  2068                           
  2069                           	psect	text9
  2070  05DB                     __ptext9:	
  2071 ;; *************** function _pwmStop *****************
  2072 ;; Defined at:
  2073 ;;		line 1002 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 100/0
  2084 ;;		On exit  : 100/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1
  2087 ;;      Params:         0       0       0
  2088 ;;      Locals:         0       0       0
  2089 ;;      Temps:          0       0       0
  2090 ;;      Totals:         0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    2
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_chrgCtr
  2098 ;;		_workCtr
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function _pwmStop
  2104  05DB                     _pwmStop:	
  2105                           
  2106                           ;main.c: 1004: if(motorPwmFlag)
  2107                           
  2108                           ;incstack = 0
  2109                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2110  05DB  0834               	movf	_motorPwmFlag,w
  2111  05DC  1903               	btfsc	3,2
  2112  05DD  0008               	return
  2113                           
  2114                           ;main.c: 1005: {
  2115                           ;main.c: 1006: motorPwmFlag = 0;
  2116  05DE  01B4               	clrf	_motorPwmFlag
  2117                           
  2118                           ;main.c: 1007: PWMCON0 &= 0XF7;
  2119  05DF  1195               	bcf	21,3	;volatile
  2120                           
  2121                           ;main.c: 1008: RB4 = 0;
  2122  05E0  1206               	bcf	6,4	;volatile
  2123  05E1  0008               	return
  2124  05E2                     __end_of_pwmStop:	
  2125                           
  2126                           	psect	text10
  2127  05E2                     __ptext10:	
  2128 ;; *************** function _chrgPwmStop *****************
  2129 ;; Defined at:
  2130 ;;		line 976 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;		None
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;		None
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0
  2139 ;; Tracked objects:
  2140 ;;		On entry : 100/0
  2141 ;;		On exit  : 100/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1
  2144 ;;      Params:         0       0       0
  2145 ;;      Locals:         0       0       0
  2146 ;;      Temps:          0       0       0
  2147 ;;      Totals:         0       0       0
  2148 ;;Total ram usage:        0 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    2
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_chrgCtr
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _chrgPwmStop
  2160  05E2                     _chrgPwmStop:	
  2161  05E2                     l2214:	
  2162                           ;incstack = 0
  2163                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2164                           
  2165                           
  2166                           ;main.c: 978: if(chrgPwmFlag)
  2167  05E2  0835               	movf	_chrgPwmFlag,w
  2168  05E3  1903               	btfsc	3,2
  2169  05E4  0008               	return
  2170                           
  2171                           ;main.c: 979: {
  2172                           ;main.c: 980: chrgPwmFlag = 0;
  2173  05E5  01B5               	clrf	_chrgPwmFlag
  2174                           
  2175                           ;main.c: 981: PWMCON0 &= 0xFB;
  2176  05E6  1115               	bcf	21,2	;volatile
  2177                           
  2178                           ;main.c: 982: RB3 = 0;
  2179  05E7  1186               	bcf	6,3	;volatile
  2180  05E8  0008               	return
  2181  05E9                     __end_of_chrgPwmStop:	
  2182                           
  2183                           	psect	text11
  2184  05A2                     __ptext11:	
  2185 ;; *************** function _chrgPwmInit *****************
  2186 ;; Defined at:
  2187 ;;		line 958 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2
  2196 ;; Tracked objects:
  2197 ;;		On entry : 100/0
  2198 ;;		On exit  : 100/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1
  2201 ;;      Params:         0       0       0
  2202 ;;      Locals:         0       0       0
  2203 ;;      Temps:          0       0       0
  2204 ;;      Totals:         0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    2
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_chrgCtr
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _chrgPwmInit
  2217  05A2                     _chrgPwmInit:	
  2218                           
  2219                           ;main.c: 960: chrgPwmFlag = 1;
  2220                           
  2221                           ;incstack = 0
  2222                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2223  05A2  01B5               	clrf	_chrgPwmFlag
  2224  05A3  0AB5               	incf	_chrgPwmFlag,f
  2225                           
  2226                           ;main.c: 961: PWMCON1 = 0B00000000;
  2227                           
  2228                           ;main.c: 963: PWMTH = 0X00;
  2229                           
  2230                           ;main.c: 964: PWMTL = 100;
  2231                           
  2232                           ;main.c: 968: PWMD23H = 0;
  2233  05A4  25AA               	fcall	PL10	;call to abstracted procedure
  2234                           
  2235                           ;main.c: 969: PWMD2L = 10;
  2236  05A5  300A               	movlw	10
  2237  05A6  009B               	movwf	27	;volatile
  2238                           
  2239                           ;main.c: 970: PWM23DT = 0X00;
  2240  05A7  019D               	clrf	29	;volatile
  2241                           
  2242                           ;main.c: 972: PWMCON0 = 0X04;
  2243  05A8  3004               	movlw	4
  2244                           
  2245                           ;main.c: 973: PWMCON2 =0X00;
  2246  05A9  2DB1               	ljmp	PL12	;call to abstracted procedure
  2247  05AA                     __end_of_chrgPwmInit:	
  2248  05AA                     PL10:	
  2249  05AA  0196               	clrf	22	;volatile
  2250  05AB  0198               	clrf	24	;volatile
  2251  05AC  3064               	movlw	100
  2252  05AD  0097               	movwf	23	;volatile
  2253  05AE  1683               	bsf	3,5	;RP0=1, select bank1
  2254  05AF  019E               	clrf	30	;volatile
  2255  05B0  0008               	return
  2256  05B1                     __end_ofPL10:	
  2257  05B1                     PL12:	
  2258  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  2259  05B2  0095               	movwf	21	;volatile
  2260  05B3  019D               	clrf	29	;volatile
  2261  05B4  0008               	return
  2262  05B5                     __end_ofPL12:	
  2263                           
  2264                           	psect	text12
  2265  056D                     __ptext12:	
  2266 ;; *************** function ___lbdiv *****************
  2267 ;; Defined at:
  2268 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;  dividend        1    wreg     unsigned char 
  2271 ;;  divisor         1    3[COMMON] unsigned char 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  dividend        1    4[COMMON] unsigned char 
  2274 ;;  quotient        1    6[COMMON] unsigned char 
  2275 ;;  counter         1    5[COMMON] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      unsigned char 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 100/0
  2282 ;;		On exit  : 100/0
  2283 ;;		Unchanged: 100/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1
  2285 ;;      Params:         1       0       0
  2286 ;;      Locals:         3       0       0
  2287 ;;      Temps:          0       0       0
  2288 ;;      Totals:         4       0       0
  2289 ;;Total ram usage:        4 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_ledCtr
  2296 ;;		_chrgCtr
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           
  2301                           ;psect for function ___lbdiv
  2302  056D                     ___lbdiv:	
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2306                           ;___lbdiv@dividend stored from wreg
  2307  056D  00F4               	movwf	___lbdiv@dividend
  2308  056E  01F6               	clrf	___lbdiv@quotient
  2309  056F  0873               	movf	___lbdiv@divisor,w
  2310  0570  1903               	btfsc	3,2
  2311  0571  2D86               	goto	l2400
  2312  0572  01F5               	clrf	___lbdiv@counter
  2313  0573                     l2386:	
  2314  0573  0AF5               	incf	___lbdiv@counter,f
  2315  0574  1BF3               	btfsc	___lbdiv@divisor,7
  2316  0575  2D79               	goto	l1196
  2317  0576  1003               	clrc
  2318  0577  0DF3               	rlf	___lbdiv@divisor,f
  2319  0578  2D73               	goto	l2386
  2320  0579                     l1196:	
  2321  0579  1003               	clrc
  2322  057A  0DF6               	rlf	___lbdiv@quotient,f
  2323  057B  0873               	movf	___lbdiv@divisor,w
  2324  057C  0274               	subwf	___lbdiv@dividend,w
  2325  057D  1C03               	skipc
  2326  057E  2D83               	goto	L7
  2327  057F  0873               	movf	___lbdiv@divisor,w
  2328  0580  02F4               	subwf	___lbdiv@dividend,f
  2329  0581  1476               	bsf	___lbdiv@quotient,0
  2330  0582  1003               	clrc
  2331  0583                     L7:	
  2332  0583  0CF3               	rrf	___lbdiv@divisor,f
  2333  0584  0BF5               	decfsz	___lbdiv@counter,f
  2334  0585  2D79               	goto	l1196
  2335  0586                     l2400:	
  2336  0586  0876               	movf	___lbdiv@quotient,w
  2337  0587  0008               	return
  2338  0588                     __end_of___lbdiv:	
  2339                           
  2340                           	psect	text13
  2341  0207                     __ptext13:	
  2342 ;; *************** function _checkOutA *****************
  2343 ;; Defined at:
  2344 ;;		line 652 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  maxAout         1   20[BANK0 ] unsigned char 
  2349 ;;  maxtempV        1   19[BANK0 ] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0, pclath, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 100/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMMON   BANK0   BANK1
  2359 ;;      Params:         0       0       0
  2360 ;;      Locals:         0       2       0
  2361 ;;      Temps:          0       2       0
  2362 ;;      Totals:         0       4       0
  2363 ;;Total ram usage:        4 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    3
  2366 ;; This function calls:
  2367 ;;		_ADC_Sample
  2368 ;;		___bmul
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           
  2375                           ;psect for function _checkOutA
  2376  0207                     _checkOutA:	
  2377                           
  2378                           ;main.c: 654: test_adc = ADC_Sample(0, 5);
  2379                           
  2380                           ;incstack = 0
  2381                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2382  0207  3005               	movlw	5
  2383  0208  00F3               	movwf	ADC_Sample@adldo
  2384  0209  3000               	movlw	0
  2385  020A  211E               	fcall	_ADC_Sample
  2386  020B  00D8               	movwf	_test_adc	;volatile
  2387                           
  2388                           ;main.c: 655: if (0xA5 == test_adc)
  2389  020C  30A5               	movlw	165
  2390  020D  0658               	xorwf	_test_adc,w	;volatile
  2391  020E  1D03               	btfss	3,2
  2392  020F  2AAF               	goto	l3260
  2393                           
  2394                           ;main.c: 656: {
  2395                           ;main.c: 657: if(chrgFlag && adresult > 210)
  2396  0210  0854               	movf	_chrgFlag,w
  2397  0211  1903               	btfsc	3,2
  2398  0212  2A23               	goto	l3176
  2399  0213  3000               	movlw	0
  2400  0214  0233               	subwf	_adresult+1,w	;volatile
  2401  0215  30D3               	movlw	211
  2402  0216  1903               	skipnz
  2403  0217  0232               	subwf	_adresult,w	;volatile
  2404  0218  1C03               	skipc
  2405  0219  2A23               	goto	l3176
  2406                           
  2407                           ;main.c: 658: {
  2408                           ;main.c: 659: if(++overChrgTime > 10)
  2409  021A  300B               	movlw	11
  2410  021B  0AC6               	incf	_overChrgTime,f
  2411  021C  0246               	subwf	_overChrgTime,w
  2412  021D  1C03               	skipc
  2413  021E  2A24               	goto	l3178
  2414  021F  3002               	movlw	2
  2415                           
  2416                           ;main.c: 660: {
  2417                           ;main.c: 661: overChrgTime = 0;
  2418  0220  01C6               	clrf	_overChrgTime
  2419                           
  2420                           ;main.c: 662: protectFlag = 2;
  2421  0221  00D0               	movwf	_protectFlag
  2422  0222  2A24               	goto	l3178
  2423  0223                     l3176:	
  2424                           
  2425                           ;main.c: 666: else
  2426                           ;main.c: 667: {
  2427                           ;main.c: 668: overChrgTime = 0;
  2428  0223  01C6               	clrf	_overChrgTime
  2429  0224                     l3178:	
  2430                           
  2431                           ;main.c: 669: }
  2432                           ;main.c: 670: outADValue = adresult;
  2433  0224  0833               	movf	_adresult+1,w	;volatile
  2434  0225  00AD               	movwf	_outADValue+1
  2435  0226  0832               	movf	_adresult,w	;volatile
  2436  0227  00AC               	movwf	_outADValue
  2437                           
  2438                           ;main.c: 672: if(workStep && (outADValue > 600))
  2439  0228  087A               	movf	_workStep,w
  2440  0229  1903               	btfsc	3,2
  2441  022A  2A3A               	goto	l3188
  2442  022B  3002               	movlw	2
  2443  022C  022D               	subwf	_outADValue+1,w
  2444  022D  3059               	movlw	89
  2445  022E  1903               	skipnz
  2446  022F  022C               	subwf	_outADValue,w
  2447  0230  1C03               	skipc
  2448  0231  2A3A               	goto	l3188
  2449                           
  2450                           ;main.c: 673: {
  2451                           ;main.c: 674: if(++workOverOutTime > 50)
  2452  0232  3033               	movlw	51
  2453  0233  0ACF               	incf	_workOverOutTime,f
  2454  0234  024F               	subwf	_workOverOutTime,w
  2455  0235  1C03               	skipc
  2456  0236  2A3B               	goto	l3190
  2457                           
  2458                           ;main.c: 675: {
  2459                           ;main.c: 676: workOverOutTime = 0;
  2460  0237  01CF               	clrf	_workOverOutTime
  2461                           
  2462                           ;main.c: 677: workStep = 0;
  2463  0238  01FA               	clrf	_workStep
  2464  0239  2A3B               	goto	l3190
  2465  023A                     l3188:	
  2466                           
  2467                           ;main.c: 680: else
  2468                           ;main.c: 681: {
  2469                           ;main.c: 682: workOverOutTime = 0;
  2470  023A  01CF               	clrf	_workOverOutTime
  2471  023B                     l3190:	
  2472                           
  2473                           ;main.c: 683: }
  2474                           ;main.c: 684: unsigned char maxtempV = 130 + (workStep * 10);
  2475  023B  300A               	movlw	10
  2476  023C  00F3               	movwf	___bmul@multiplicand
  2477  023D  087A               	movf	_workStep,w
  2478  023E  25B5               	fcall	___bmul
  2479  023F  3E82               	addlw	130
  2480  0240  00EC               	movwf	checkOutA@maxtempV
  2481                           
  2482                           ;main.c: 685: if(jrStep > 0)
  2483  0241  0837               	movf	_jrStep,w
  2484  0242  1903               	btfsc	3,2
  2485  0243  2A4C               	goto	l3200
  2486                           
  2487                           ;main.c: 686: {
  2488                           ;main.c: 687: maxtempV = maxtempV - 40;
  2489  0244  30D8               	movlw	216
  2490  0245  07EC               	addwf	checkOutA@maxtempV,f
  2491                           
  2492                           ;main.c: 688: if(workStep < 5)
  2493  0246  3005               	movlw	5
  2494  0247  027A               	subwf	_workStep,w
  2495  0248  1803               	skipnc
  2496  0249  2A4C               	goto	l3200
  2497                           
  2498                           ;main.c: 689: {
  2499                           ;main.c: 690: maxtempV = maxtempV - 30;
  2500  024A  30E2               	movlw	226
  2501  024B  07EC               	addwf	checkOutA@maxtempV,f
  2502  024C                     l3200:	
  2503                           
  2504                           ;main.c: 691: }
  2505                           ;main.c: 692: }
  2506                           ;main.c: 693: if(outADValue > maxtempV)
  2507  024C  086C               	movf	checkOutA@maxtempV,w
  2508  024D  00EA               	movwf	??_checkOutA
  2509  024E  01EB               	clrf	??_checkOutA+1
  2510  024F  082D               	movf	_outADValue+1,w
  2511  0250  026B               	subwf	??_checkOutA+1,w
  2512  0251  1D03               	skipz
  2513  0252  2A55               	goto	u3385
  2514  0253  082C               	movf	_outADValue,w
  2515  0254  026A               	subwf	??_checkOutA,w
  2516  0255                     u3385:	
  2517  0255  1803               	skipnc
  2518  0256  2A5F               	goto	l3206
  2519                           
  2520                           ;main.c: 694: {
  2521                           ;main.c: 695: if(++overCount > 5)
  2522  0257  3006               	movlw	6
  2523  0258  0AC9               	incf	_overCount,f
  2524  0259  0249               	subwf	_overCount,w
  2525  025A  1C03               	skipc
  2526  025B  2AA8               	goto	l3256
  2527                           
  2528                           ;main.c: 696: {
  2529                           ;main.c: 697: overCount = 5;
  2530  025C  3005               	movlw	5
  2531  025D  00C9               	movwf	_overCount
  2532  025E  2AA8               	goto	l3256
  2533  025F                     l3206:	
  2534                           
  2535                           ;main.c: 700: else
  2536                           ;main.c: 701: {
  2537                           ;main.c: 703: if(overCount > 0)
  2538  025F  0849               	movf	_overCount,w
  2539  0260  1903               	btfsc	3,2
  2540  0261  2A63               	goto	l3210
  2541                           
  2542                           ;main.c: 704: {
  2543                           ;main.c: 705: overCount--;
  2544  0262  03C9               	decf	_overCount,f
  2545  0263                     l3210:	
  2546                           
  2547                           ;main.c: 706: }
  2548                           ;main.c: 707: unsigned char maxAout = 40;
  2549  0263  3028               	movlw	40
  2550  0264  00ED               	movwf	checkOutA@maxAout
  2551                           
  2552                           ;main.c: 708: if(pwStep < 40)
  2553  0265  0245               	subwf	_pwStep,w
  2554  0266  1803               	skipnc
  2555  0267  2A6A               	goto	l3216
  2556                           
  2557                           ;main.c: 709: {
  2558                           ;main.c: 710: maxAout = 37;
  2559  0268  3025               	movlw	37
  2560  0269  00ED               	movwf	checkOutA@maxAout
  2561  026A                     l3216:	
  2562                           
  2563                           ;main.c: 711: }
  2564                           ;main.c: 712: if(workStep == 1)
  2565  026A  0B7A               	decfsz	_workStep,w
  2566  026B  2A6E               	goto	l3220
  2567                           
  2568                           ;main.c: 713: {
  2569                           ;main.c: 714: maxAout = maxAout + 1;
  2570  026C  0AED               	incf	checkOutA@maxAout,f
  2571                           
  2572                           ;main.c: 715: }
  2573  026D  2A8A               	goto	l847
  2574  026E                     l3220:	
  2575                           
  2576                           ;main.c: 716: else if(workStep == 2)
  2577  026E  3002               	movlw	2
  2578  026F  067A               	xorwf	_workStep,w
  2579                           
  2580                           ;main.c: 717: {
  2581                           ;main.c: 718: maxAout = maxAout + 3;
  2582  0270  3003               	movlw	3
  2583  0271  1903               	btfsc	3,2
  2584  0272  2A89               	goto	L11
  2585                           
  2586                           ;main.c: 720: else if(workStep == 3)
  2587                           
  2588                           ;main.c: 719: }
  2589  0273  067A               	xorwf	_workStep,w
  2590  0274  1D03               	btfss	3,2
  2591  0275  2A78               	goto	l3228
  2592                           
  2593                           ;main.c: 721: {
  2594                           ;main.c: 722: maxAout = maxAout + 5;
  2595  0276  3005               	movlw	5
  2596  0277  2A89               	goto	L11
  2597  0278                     l3228:	
  2598                           ;main.c: 723: }
  2599                           
  2600                           
  2601                           ;main.c: 724: else if(workStep == 4)
  2602  0278  3004               	movlw	4
  2603  0279  067A               	xorwf	_workStep,w
  2604  027A  1D03               	btfss	3,2
  2605  027B  2A7E               	goto	l3232
  2606                           
  2607                           ;main.c: 725: {
  2608                           ;main.c: 726: maxAout = maxAout + 7;
  2609  027C  3007               	movlw	7
  2610  027D  2A89               	goto	L11
  2611  027E                     l3232:	
  2612                           ;main.c: 727: }
  2613                           
  2614                           
  2615                           ;main.c: 728: else if(workStep == 5)
  2616  027E  3005               	movlw	5
  2617  027F  067A               	xorwf	_workStep,w
  2618  0280  1D03               	btfss	3,2
  2619  0281  2A84               	goto	l3236
  2620                           
  2621                           ;main.c: 729: {
  2622                           ;main.c: 730: maxAout = maxAout + 9;
  2623  0282  3009               	movlw	9
  2624  0283  2A89               	goto	L11
  2625  0284                     l3236:	
  2626                           ;main.c: 731: }
  2627                           
  2628                           
  2629                           ;main.c: 732: else if(workStep == 6)
  2630  0284  3006               	movlw	6
  2631  0285  067A               	xorwf	_workStep,w
  2632  0286  1D03               	btfss	3,2
  2633  0287  2A8A               	goto	l847
  2634                           
  2635                           ;main.c: 733: {
  2636                           ;main.c: 734: maxAout = maxAout + 12;
  2637  0288  300C               	movlw	12
  2638  0289                     L11:	
  2639  0289  07ED               	addwf	checkOutA@maxAout,f
  2640  028A                     l847:	
  2641                           
  2642                           ;main.c: 735: }
  2643                           ;main.c: 736: if(overCount > 0)
  2644  028A  0849               	movf	_overCount,w
  2645  028B  1D03               	btfss	3,2
  2646                           
  2647                           ;main.c: 737: {
  2648                           ;main.c: 738: overCount--;
  2649  028C  03C9               	decf	_overCount,f
  2650                           
  2651                           ;main.c: 739: }
  2652                           ;main.c: 740: if(outADValue > maxAout)
  2653  028D  086D               	movf	checkOutA@maxAout,w
  2654  028E  00EA               	movwf	??_checkOutA
  2655  028F  01EB               	clrf	??_checkOutA+1
  2656  0290  082D               	movf	_outADValue+1,w
  2657  0291  026B               	subwf	??_checkOutA+1,w
  2658  0292  1D03               	skipz
  2659  0293  2A96               	goto	u3495
  2660  0294  082C               	movf	_outADValue,w
  2661  0295  026A               	subwf	??_checkOutA,w
  2662  0296                     u3495:	
  2663  0296  1803               	skipnc
  2664  0297  2AA3               	goto	l3250
  2665                           
  2666                           ;main.c: 741: {
  2667                           ;main.c: 743: if(startTime == 0)
  2668  0298  0847               	movf	_startTime,w
  2669  0299  1D03               	btfss	3,2
  2670  029A  2AA0               	goto	l3248
  2671                           
  2672                           ;main.c: 744: {
  2673                           ;main.c: 745: tempDuty = 81 + (workStep*3);
  2674  029B  087A               	movf	_workStep,w
  2675  029C  077A               	addwf	_workStep,w
  2676  029D  077A               	addwf	_workStep,w
  2677  029E  3E51               	addlw	81
  2678  029F  2AA1               	goto	L12
  2679  02A0                     l3248:	
  2680                           ;main.c: 746: }
  2681                           
  2682                           
  2683                           ;main.c: 747: else
  2684                           ;main.c: 748: {
  2685                           ;main.c: 749: tempDuty = maxDuty;
  2686  02A0  084A               	movf	_maxDuty,w
  2687  02A1                     L12:	
  2688  02A1  00C8               	movwf	_tempDuty
  2689  02A2  2AA8               	goto	l3256
  2690  02A3                     l3250:	
  2691                           
  2692                           ;main.c: 757: if(tempDuty > maxDuty)
  2693  02A3  0848               	movf	_tempDuty,w
  2694  02A4  024A               	subwf	_maxDuty,w
  2695  02A5  1803               	skipnc
  2696  02A6  2AA0               	goto	l3248
  2697                           
  2698                           ;main.c: 758: {
  2699                           ;main.c: 759: tempDuty--;
  2700  02A7  03C8               	decf	_tempDuty,f
  2701  02A8                     l3256:	
  2702                           ;main.c: 760: }
  2703                           
  2704                           
  2705                           ;main.c: 764: }
  2706                           ;main.c: 766: }
  2707                           ;main.c: 768: }
  2708                           ;main.c: 769: PWMD23H = 0X00;
  2709  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2710  02A9  019E               	clrf	30	;volatile
  2711                           
  2712                           ;main.c: 770: PWMD3L = tempDuty;
  2713  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2714  02AB  0848               	movf	_tempDuty,w
  2715  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  2716  02AD  009C               	movwf	28	;volatile
  2717                           
  2718                           ;main.c: 771: }
  2719  02AE  0008               	return
  2720  02AF                     l3260:	
  2721                           
  2722                           ;main.c: 772: else
  2723                           ;main.c: 773: {
  2724                           ;main.c: 774: ADCON0 = 0;
  2725  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  2726  02B0  0195               	clrf	21	;volatile
  2727                           
  2728                           ;main.c: 775: ADCON1 = 0;
  2729  02B1  0196               	clrf	22	;volatile
  2730                           
  2731                           ;main.c: 776: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2732  02B2  3084               	movlw	132
  2733  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2734  02B4  00EA               	movwf	??_checkOutA
  2735  02B5                     u4207:	
  2736  02B5  0BEA               	decfsz	??_checkOutA,f
  2737  02B6  2AB5               	goto	u4207
  2738  02B7  2AB8               	nop2
  2739  02B8  0008               	return
  2740  02B9                     __end_of_checkOutA:	
  2741                           
  2742                           	psect	text14
  2743  05B5                     __ptext14:	
  2744 ;; *************** function ___bmul *****************
  2745 ;; Defined at:
  2746 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  multiplier      1    wreg     unsigned char 
  2749 ;;  multiplicand    1    3[COMMON] unsigned char 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  multiplier      1    5[COMMON] unsigned char 
  2752 ;;  product         1    4[COMMON] unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      unsigned char 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 100/0
  2759 ;;		On exit  : 100/0
  2760 ;;		Unchanged: 100/0
  2761 ;; Data sizes:     COMMON   BANK0   BANK1
  2762 ;;      Params:         1       0       0
  2763 ;;      Locals:         2       0       0
  2764 ;;      Temps:          0       0       0
  2765 ;;      Totals:         3       0       0
  2766 ;;Total ram usage:        3 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    2
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_checkOutA
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function ___bmul
  2778  05B5                     ___bmul:	
  2779                           
  2780                           ;incstack = 0
  2781                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2782                           ;___bmul@multiplier stored from wreg
  2783  05B5  00F5               	movwf	___bmul@multiplier
  2784  05B6  01F4               	clrf	___bmul@product
  2785  05B7                     l2368:	
  2786  05B7  0873               	movf	___bmul@multiplicand,w
  2787  05B8  1875               	btfsc	___bmul@multiplier,0
  2788  05B9  07F4               	addwf	___bmul@product,f
  2789  05BA  1003               	clrc
  2790  05BB  0DF3               	rlf	___bmul@multiplicand,f
  2791  05BC  1003               	clrc
  2792  05BD  0CF5               	rrf	___bmul@multiplier,f
  2793  05BE  0875               	movf	___bmul@multiplier,w
  2794  05BF  1D03               	btfss	3,2
  2795  05C0  2DB7               	goto	l2368
  2796  05C1  0874               	movf	___bmul@product,w
  2797  05C2  0008               	return
  2798  05C3                     __end_of___bmul:	
  2799                           
  2800                           	psect	text15
  2801  02B9                     __ptext15:	
  2802 ;; *************** function _checkBatAD *****************
  2803 ;; Defined at:
  2804 ;;		line 780 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;		None
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0, pclath, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMMON   BANK0   BANK1
  2818 ;;      Params:         0       0       0
  2819 ;;      Locals:         0       0       0
  2820 ;;      Temps:          2       0       0
  2821 ;;      Totals:         2       0       0
  2822 ;;Total ram usage:        2 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    3
  2825 ;; This function calls:
  2826 ;;		_ADC_Sample
  2827 ;; This function is called by:
  2828 ;;		_main
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function _checkBatAD
  2834  02B9                     _checkBatAD:	
  2835                           
  2836                           ;main.c: 782: test_adc = ADC_Sample(2, 5);
  2837                           
  2838                           ;incstack = 0
  2839                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2840  02B9  3005               	movlw	5
  2841  02BA  00F3               	movwf	ADC_Sample@adldo
  2842  02BB  3002               	movlw	2
  2843  02BC  211E               	fcall	_ADC_Sample
  2844  02BD  00D8               	movwf	_test_adc	;volatile
  2845                           
  2846                           ;main.c: 783: if (0xA5 == test_adc)
  2847  02BE  30A5               	movlw	165
  2848  02BF  0658               	xorwf	_test_adc,w	;volatile
  2849  02C0  1D03               	btfss	3,2
  2850  02C1  2B1A               	goto	l3448
  2851                           
  2852                           ;main.c: 784: {
  2853                           ;main.c: 785: batADValue = adresult;
  2854  02C2  0833               	movf	_adresult+1,w	;volatile
  2855  02C3  00F8               	movwf	_batADValue+1
  2856  02C4  0832               	movf	_adresult,w	;volatile
  2857  02C5  00F7               	movwf	_batADValue
  2858                           
  2859                           ;main.c: 786: if(batADValue < 1117)
  2860  02C6  3004               	movlw	4
  2861  02C7  0278               	subwf	_batADValue+1,w
  2862  02C8  305D               	movlw	93
  2863  02C9  1903               	skipnz
  2864  02CA  0277               	subwf	_batADValue,w
  2865  02CB  1803               	skipnc
  2866  02CC  2AE0               	goto	l3430
  2867                           
  2868                           ;main.c: 787: {
  2869                           ;main.c: 788: pwStep = 0;
  2870  02CD  01C5               	clrf	_pwStep
  2871                           
  2872                           ;main.c: 789: if(++count8s > 800)
  2873  02CE  0AA2               	incf	_count8s,f
  2874  02CF  1903               	skipnz
  2875  02D0  0AA3               	incf	_count8s+1,f
  2876  02D1  3003               	movlw	3
  2877  02D2  0223               	subwf	_count8s+1,w
  2878  02D3  3021               	movlw	33
  2879  02D4  1903               	skipnz
  2880  02D5  0222               	subwf	_count8s,w
  2881  02D6  1C03               	skipc
  2882  02D7  2B0D               	goto	l3442
  2883                           
  2884                           ;main.c: 790: {
  2885                           ;main.c: 791: count8s = 0;
  2886  02D8  01A2               	clrf	_count8s
  2887  02D9  01A3               	clrf	_count8s+1
  2888                           
  2889                           ;main.c: 792: lowBatFlag = 1;
  2890  02DA  01B9               	clrf	_lowBatFlag
  2891  02DB  0AB9               	incf	_lowBatFlag,f
  2892                           
  2893                           ;main.c: 793: prePwStep = 0;
  2894  02DC  01F9               	clrf	_prePwStep
  2895                           
  2896                           ;main.c: 794: workStep = 0;
  2897  02DD  01FA               	clrf	_workStep
  2898                           
  2899                           ;main.c: 795: jrStep = 0;
  2900  02DE  01B7               	clrf	_jrStep
  2901  02DF  2B0D               	goto	l3442
  2902  02E0                     l3430:	
  2903  02E0  3005               	movlw	5
  2904                           
  2905                           ;main.c: 798: else
  2906                           ;main.c: 799: {
  2907                           ;main.c: 800: count8s = 0;
  2908  02E1  01A2               	clrf	_count8s
  2909  02E2  01A3               	clrf	_count8s+1
  2910                           
  2911                           ;main.c: 801: if(batADValue >= 1340)
  2912  02E3  0278               	subwf	_batADValue+1,w
  2913  02E4  303C               	movlw	60
  2914  02E5  1903               	skipnz
  2915  02E6  0277               	subwf	_batADValue,w
  2916                           
  2917                           ;main.c: 802: {
  2918                           ;main.c: 803: pwStep = ((batADValue - 1340) /2) + 13;
  2919  02E7  0877               	movf	_batADValue,w
  2920  02E8  1C03               	skipc
  2921  02E9  2AF7               	goto	L15
  2922  02EA  3EC4               	addlw	196
  2923  02EB  00F4               	movwf	??_checkBatAD
  2924  02EC  0878               	movf	_batADValue+1,w
  2925  02ED  1803               	skipnc
  2926  02EE  3E01               	addlw	1
  2927  02EF  3EFA               	addlw	250
  2928  02F0  00F5               	movwf	??_checkBatAD+1
  2929  02F1  1003               	clrc
  2930  02F2  0CF5               	rrf	??_checkBatAD+1,f
  2931  02F3  0CF4               	rrf	??_checkBatAD,f
  2932  02F4  0874               	movf	??_checkBatAD,w
  2933  02F5  3E0D               	addlw	13
  2934  02F6  2B06               	goto	L14
  2935  02F7                     L15:	
  2936                           ;main.c: 805: else
  2937                           ;main.c: 806: {
  2938                           ;main.c: 807: pwStep = (batADValue - 1117) / 16;
  2939                           
  2940                           ;main.c: 804: }
  2941                           
  2942  02F7  3EA3               	addlw	163
  2943  02F8  00F4               	movwf	??_checkBatAD
  2944  02F9  0878               	movf	_batADValue+1,w
  2945  02FA  1803               	skipnc
  2946  02FB  3E01               	addlw	1
  2947  02FC  3EFB               	addlw	251
  2948  02FD  00F5               	movwf	??_checkBatAD+1
  2949  02FE  3004               	movlw	4
  2950  02FF                     u3865:	
  2951  02FF  1003               	clrc
  2952  0300  0CF5               	rrf	??_checkBatAD+1,f
  2953  0301  0CF4               	rrf	??_checkBatAD,f
  2954  0302  3EFF               	addlw	-1
  2955  0303  1D03               	skipz
  2956  0304  2AFF               	goto	u3865
  2957  0305  0874               	movf	??_checkBatAD,w
  2958  0306                     L14:	
  2959  0306  00C5               	movwf	_pwStep
  2960                           
  2961                           ;main.c: 808: }
  2962                           ;main.c: 809: if(pwStep > 99)
  2963  0307  3064               	movlw	100
  2964  0308  0245               	subwf	_pwStep,w
  2965  0309  1C03               	skipc
  2966  030A  2B0D               	goto	l3442
  2967                           
  2968                           ;main.c: 810: {
  2969                           ;main.c: 811: pwStep = 99;
  2970  030B  3063               	movlw	99
  2971  030C  00C5               	movwf	_pwStep
  2972  030D                     l3442:	
  2973                           
  2974                           ;main.c: 812: }
  2975                           ;main.c: 813: }
  2976                           ;main.c: 814: if(chrgFlag && batADValue > 1861)
  2977  030D  0854               	movf	_chrgFlag,w
  2978  030E  1903               	btfsc	3,2
  2979  030F  2B21               	goto	l3452
  2980  0310  3007               	movlw	7
  2981  0311  0278               	subwf	_batADValue+1,w
  2982  0312  3046               	movlw	70
  2983  0313  1903               	skipnz
  2984  0314  0277               	subwf	_batADValue,w
  2985  0315  1C03               	skipc
  2986  0316  2B21               	goto	l3452
  2987                           
  2988                           ;main.c: 815: {
  2989                           ;main.c: 816: protectFlag = 1;
  2990  0317  01D0               	clrf	_protectFlag
  2991  0318  0AD0               	incf	_protectFlag,f
  2992  0319  2B21               	goto	l3452
  2993  031A                     l3448:	
  2994                           
  2995                           ;main.c: 819: else
  2996                           ;main.c: 820: {
  2997                           ;main.c: 821: ADCON0 = 0;
  2998  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2999  031B  0195               	clrf	21	;volatile
  3000                           
  3001                           ;main.c: 822: ADCON1 = 0;
  3002  031C  0196               	clrf	22	;volatile
  3003                           
  3004                           ;main.c: 823: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3005  031D  3085               	movlw	133
  3006  031E  00F4               	movwf	??_checkBatAD
  3007  031F                     u4217:	
  3008  031F  0BF4               	decfsz	??_checkBatAD,f
  3009  0320  2B1F               	goto	u4217
  3010  0321                     l3452:	
  3011                           
  3012                           ;main.c: 824: }
  3013                           ;main.c: 826: test_adc = ADC_Sample(3, 5);
  3014  0321  3005               	movlw	5
  3015  0322  00F3               	movwf	ADC_Sample@adldo
  3016  0323  3003               	movlw	3
  3017  0324  211E               	fcall	_ADC_Sample
  3018  0325  00D8               	movwf	_test_adc	;volatile
  3019                           
  3020                           ;main.c: 827: if (0xA5 == test_adc)
  3021  0326  30A5               	movlw	165
  3022  0327  0658               	xorwf	_test_adc,w	;volatile
  3023  0328  1D03               	btfss	3,2
  3024  0329  2B55               	goto	l3472
  3025                           
  3026                           ;main.c: 828: {
  3027                           ;main.c: 829: if(chrgFlag && adresult > 100)
  3028  032A  0854               	movf	_chrgFlag,w
  3029  032B  1903               	btfsc	3,2
  3030  032C  0008               	return
  3031  032D  3000               	movlw	0
  3032  032E  0233               	subwf	_adresult+1,w	;volatile
  3033  032F  3065               	movlw	101
  3034  0330  1903               	skipnz
  3035  0331  0232               	subwf	_adresult,w	;volatile
  3036  0332  1C03               	skipc
  3037  0333  0008               	return
  3038                           
  3039                           ;main.c: 830: {
  3040                           ;main.c: 832: if(adresult > 810 || (batADValue - adresult) > 810)
  3041  0334  3003               	movlw	3
  3042  0335  0233               	subwf	_adresult+1,w	;volatile
  3043  0336  302B               	movlw	43
  3044  0337  1903               	skipnz
  3045  0338  0232               	subwf	_adresult,w	;volatile
  3046  0339  1803               	skipnc
  3047  033A  2B4A               	goto	l3464
  3048  033B  0832               	movf	_adresult,w	;volatile
  3049  033C  0277               	subwf	_batADValue,w
  3050  033D  00F4               	movwf	??_checkBatAD
  3051  033E  0833               	movf	_adresult+1,w	;volatile
  3052  033F  1C03               	skipc
  3053  0340  0A33               	incf	_adresult+1,w	;volatile
  3054  0341  0278               	subwf	_batADValue+1,w
  3055  0342  00F5               	movwf	??_checkBatAD+1
  3056  0343  3003               	movlw	3
  3057  0344  0275               	subwf	??_checkBatAD+1,w
  3058  0345  302B               	movlw	43
  3059  0346  1903               	skipnz
  3060  0347  0274               	subwf	??_checkBatAD,w
  3061  0348  1C03               	skipc
  3062  0349  2B53               	goto	l3470
  3063  034A                     l3464:	
  3064                           
  3065                           ;main.c: 833: {
  3066                           ;main.c: 835: if(++countHalfFull > 250)
  3067  034A  30FB               	movlw	251
  3068  034B  0AD1               	incf	_countHalfFull,f
  3069  034C  0251               	subwf	_countHalfFull,w
  3070  034D  1C03               	skipc
  3071  034E  0008               	return
  3072  034F  3002               	movlw	2
  3073                           
  3074                           ;main.c: 836: {
  3075                           ;main.c: 837: countHalfFull = 0;
  3076  0350  01D1               	clrf	_countHalfFull
  3077                           
  3078                           ;main.c: 838: protectFlag = 2;
  3079  0351  00D0               	movwf	_protectFlag
  3080  0352  0008               	return
  3081  0353                     l3470:	
  3082                           
  3083                           ;main.c: 841: else
  3084                           ;main.c: 842: {
  3085                           ;main.c: 843: countHalfFull = 0;
  3086  0353  01D1               	clrf	_countHalfFull
  3087                           
  3088                           ;main.c: 844: }
  3089                           ;main.c: 845: }
  3090                           ;main.c: 846: }
  3091  0354  0008               	return
  3092  0355                     l3472:	
  3093                           
  3094                           ;main.c: 847: else
  3095                           ;main.c: 848: {
  3096                           ;main.c: 849: ADCON0 = 0;
  3097  0355  1683               	bsf	3,5	;RP0=1, select bank1
  3098  0356  0195               	clrf	21	;volatile
  3099                           
  3100                           ;main.c: 850: ADCON1 = 0;
  3101  0357  0196               	clrf	22	;volatile
  3102                           
  3103                           ;main.c: 851: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3104  0358  3085               	movlw	133
  3105  0359  00F4               	movwf	??_checkBatAD
  3106  035A                     u4227:	
  3107  035A  0BF4               	decfsz	??_checkBatAD,f
  3108  035B  2B5A               	goto	u4227
  3109  035C  0008               	return
  3110  035D                     __end_of_checkBatAD:	
  3111                           
  3112                           	psect	text16
  3113  011E                     __ptext16:	
  3114 ;; *************** function _ADC_Sample *****************
  3115 ;; Defined at:
  3116 ;;		line 1097 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  adch            1    wreg     unsigned char 
  3119 ;;  adldo           1    3[COMMON] unsigned char 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  adch            1    5[BANK0 ] unsigned char 
  3122 ;;  j               1    4[BANK0 ] unsigned char 
  3123 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3124 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3125 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3126 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3127 ;;  i               1    6[BANK0 ] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  1    wreg      unsigned char 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 100/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMMON   BANK0   BANK1
  3137 ;;      Params:         1       0       0
  3138 ;;      Locals:         0      13       0
  3139 ;;      Temps:          0       4       0
  3140 ;;      Totals:         1      17       0
  3141 ;;Total ram usage:       18 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    2
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_checkOutA
  3148 ;;		_checkBatAD
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _ADC_Sample
  3154  011E                     _ADC_Sample:	
  3155                           
  3156                           ;incstack = 0
  3157                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3158                           ;ADC_Sample@adch stored from wreg
  3159  011E  1283               	bcf	3,5	;RP0=0, select bank0
  3160  011F  00DE               	movwf	ADC_Sample@adch
  3161                           
  3162                           ;main.c: 1099: volatile unsigned long adsum = 0;
  3163                           
  3164                           ;main.c: 1100: volatile unsigned int admin = 0, admax = 0;
  3165  0120  21F9               	fcall	PL4	;call to abstracted procedure
  3166                           
  3167                           ;main.c: 1101: volatile unsigned int ad_temp = 0;
  3168  0121  01E8               	clrf	ADC_Sample@ad_temp	;volatile
  3169  0122  01E9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3170                           
  3171                           ;main.c: 1103: if ((!LDO_EN) && (adldo & 0x04) )
  3172  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3173  0124  1D16               	btfss	22,2	;volatile
  3174  0125  1D73               	btfss	ADC_Sample@adldo,2
  3175  0126  2930               	goto	l3062
  3176                           
  3177                           ;main.c: 1104: {
  3178                           ;main.c: 1106: ADCON1 = adldo;
  3179  0127  0873               	movf	ADC_Sample@adldo,w
  3180  0128  0096               	movwf	22	;volatile
  3181                           
  3182                           ;main.c: 1107: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3183  0129  3084               	movlw	132
  3184  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3185  012B  00D9               	movwf	??_ADC_Sample
  3186  012C                     u4237:	
  3187  012C  0BD9               	decfsz	??_ADC_Sample,f
  3188  012D  292C               	goto	u4237
  3189  012E  292F               	nop2
  3190                           
  3191                           ;main.c: 1108: }
  3192  012F  2932               	goto	l3064
  3193  0130                     l3062:	
  3194                           
  3195                           ;main.c: 1109: else
  3196                           ;main.c: 1110: ADCON1 = adldo;
  3197  0130  0873               	movf	ADC_Sample@adldo,w
  3198  0131  0096               	movwf	22	;volatile
  3199  0132                     l3064:	
  3200                           
  3201                           ;main.c: 1112: if(adch & 0x10)
  3202  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3203  0133  1E5E               	btfss	ADC_Sample@adch,4
  3204  0134  293A               	goto	l3072
  3205                           
  3206                           ;main.c: 1113: {
  3207                           ;main.c: 1114: CHS4 = 1;
  3208  0135  1683               	bsf	3,5	;RP0=1, select bank1
  3209  0136  1716               	bsf	22,6	;volatile
  3210                           
  3211                           ;main.c: 1115: adch &= 0x0f;
  3212  0137  300F               	movlw	15
  3213  0138  1283               	bcf	3,5	;RP0=0, select bank0
  3214  0139  05DE               	andwf	ADC_Sample@adch,f
  3215  013A                     l3072:	
  3216                           
  3217                           ;main.c: 1118: for (i = 0; i < 10; i++)
  3218  013A  01DF               	clrf	ADC_Sample@i
  3219  013B                     l3078:	
  3220                           
  3221                           ;main.c: 1119: {
  3222                           ;main.c: 1120: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3223  013B  085E               	movf	ADC_Sample@adch,w
  3224  013C  00D9               	movwf	??_ADC_Sample
  3225  013D  3001               	movlw	1
  3226  013E  1003               	clrc
  3227  013F                     L16:	
  3228  013F  0DD9               	rlf	??_ADC_Sample,f
  3229  0140  3EFF               	addlw	-1
  3230  0141  1003               	clrc
  3231  0142  1D03               	skipz
  3232  0143  293F               	goto	L16
  3233  0144  0D59               	rlf	??_ADC_Sample,w
  3234  0145  3841               	iorlw	65
  3235  0146  1683               	bsf	3,5	;RP0=1, select bank1
  3236  0147  0095               	movwf	21	;volatile
  3237  0148  0000               	nop	;# 
  3238  0149  0000               	nop	;# 
  3239  014A  0000               	nop	;# 
  3240  014B  0000               	nop	;# 
  3241                           
  3242                           ;main.c: 1125: GODONE = 1;
  3243  014C  1683               	bsf	3,5	;RP0=1, select bank1
  3244  014D  1495               	bsf	21,1	;volatile
  3245                           
  3246                           ;main.c: 1127: unsigned char j = 0;
  3247  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3248  014F  01DD               	clrf	ADC_Sample@j
  3249  0150                     l919:	
  3250                           ;main.c: 1128: while (GODONE)
  3251                           
  3252  0150  1683               	bsf	3,5	;RP0=1, select bank1
  3253  0151  1C95               	btfss	21,1	;volatile
  3254  0152  295B               	goto	l3088
  3255                           
  3256                           ;main.c: 1129: {
  3257                           ;main.c: 1130: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3258  0153  2954               	nop2	;2 cycle nop
  3259  0154  2955               	nop2	;2 cycle nop
  3260  0155  2956               	nop2	;2 cycle nop
  3261  0156  2957               	nop2	;2 cycle nop
  3262                           
  3263                           ;main.c: 1132: if (0 == (--j))
  3264  0157  1283               	bcf	3,5	;RP0=0, select bank0
  3265  0158  0BDD               	decfsz	ADC_Sample@j,f
  3266  0159  2950               	goto	l919
  3267                           
  3268                           ;main.c: 1133: return 0;
  3269  015A  3400               	retlw	0
  3270  015B                     l3088:	
  3271                           
  3272                           ;main.c: 1134: }
  3273                           ;main.c: 1136: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3274  015B  0819               	movf	25,w	;volatile
  3275  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3276  015D  00E8               	movwf	ADC_Sample@ad_temp	;volatile
  3277  015E  01E9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3278  015F  0EE8               	swapf	ADC_Sample@ad_temp,f	;volatile
  3279  0160  0EE9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3280  0161  30F0               	movlw	240
  3281  0162  05E9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3282  0163  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3283  0164  390F               	andlw	15
  3284  0165  04E9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3285  0166  30F0               	movlw	240
  3286  0167  05E8               	andwf	ADC_Sample@ad_temp,f	;volatile
  3287  0168  1683               	bsf	3,5	;RP0=1, select bank1
  3288  0169  0E18               	swapf	24,w	;volatile
  3289  016A  390F               	andlw	15
  3290  016B  1283               	bcf	3,5	;RP0=0, select bank0
  3291  016C  07E8               	addwf	ADC_Sample@ad_temp,f	;volatile
  3292  016D  1803               	skipnc
  3293  016E  0AE9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3294                           
  3295                           ;main.c: 1138: if (0 == admax)
  3296  016F  0866               	movf	ADC_Sample@admax,w	;volatile
  3297  0170  0467               	iorwf	ADC_Sample@admax+1,w	;volatile
  3298  0171  1D03               	btfss	3,2
  3299  0172  2975               	goto	l3096
  3300                           
  3301                           ;main.c: 1139: {
  3302                           ;main.c: 1140: admax = ad_temp;
  3303  0173  2202               	fcall	PL14	;call to abstracted procedure
  3304  0174  2987               	goto	l3102
  3305  0175                     l3096:	
  3306                           ;main.c: 1142: }
  3307                           
  3308                           ;main.c: 1141: admin = ad_temp;
  3309                           
  3310                           
  3311                           ;main.c: 1143: else if (ad_temp > admax)
  3312  0175  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3313  0176  0267               	subwf	ADC_Sample@admax+1,w	;volatile
  3314  0177  1D03               	skipz
  3315  0178  297B               	goto	u3145
  3316  0179  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3317  017A  0266               	subwf	ADC_Sample@admax,w	;volatile
  3318  017B                     u3145:	
  3319  017B  1803               	skipnc
  3320  017C  297F               	goto	l3100
  3321                           
  3322                           ;main.c: 1144: admax = ad_temp;
  3323  017D  2202               	fcall	PL14	;call to abstracted procedure
  3324  017E  298B               	goto	l925
  3325  017F                     l3100:	
  3326                           
  3327                           ;main.c: 1145: else if (ad_temp < admin)
  3328  017F  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3329  0180  0269               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3330  0181  1D03               	skipz
  3331  0182  2985               	goto	u3155
  3332  0183  0864               	movf	ADC_Sample@admin,w	;volatile
  3333  0184  0268               	subwf	ADC_Sample@ad_temp,w	;volatile
  3334  0185                     u3155:	
  3335  0185  1803               	skipnc
  3336  0186  298B               	goto	l925
  3337  0187                     l3102:	
  3338                           
  3339                           ;main.c: 1146: admin = ad_temp;
  3340  0187  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3341  0188  00E5               	movwf	ADC_Sample@admin+1	;volatile
  3342  0189  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3343  018A  00E4               	movwf	ADC_Sample@admin	;volatile
  3344  018B                     l925:	
  3345                           
  3346                           ;main.c: 1148: adsum += ad_temp;
  3347  018B  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3348  018C  00D9               	movwf	??_ADC_Sample
  3349  018D  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3350  018E  00DA               	movwf	??_ADC_Sample+1
  3351  018F  01DB               	clrf	??_ADC_Sample+2
  3352  0190  01DC               	clrf	??_ADC_Sample+3
  3353  0191  0859               	movf	??_ADC_Sample,w
  3354  0192  07E0               	addwf	ADC_Sample@adsum,f	;volatile
  3355  0193  085A               	movf	??_ADC_Sample+1,w
  3356  0194  1103               	clrz
  3357  0195  1803               	skipnc
  3358  0196  3E01               	addlw	1
  3359  0197  1D03               	btfss	3,2
  3360  0198  07E1               	addwf	ADC_Sample@adsum+1,f	;volatile
  3361  0199  085B               	movf	??_ADC_Sample+2,w
  3362  019A  1103               	clrz
  3363  019B  1803               	skipnc
  3364  019C  3E01               	addlw	1
  3365  019D  1D03               	btfss	3,2
  3366  019E  07E2               	addwf	ADC_Sample@adsum+2,f	;volatile
  3367  019F  085C               	movf	??_ADC_Sample+3,w
  3368  01A0  1103               	clrz
  3369  01A1  1803               	skipnc
  3370  01A2  3E01               	addlw	1
  3371  01A3  1D03               	btfss	3,2
  3372  01A4  07E3               	addwf	ADC_Sample@adsum+3,f	;volatile
  3373  01A5  300A               	movlw	10
  3374  01A6  0ADF               	incf	ADC_Sample@i,f
  3375  01A7  025F               	subwf	ADC_Sample@i,w
  3376  01A8  1C03               	skipc
  3377  01A9  293B               	goto	l3078
  3378                           
  3379                           ;main.c: 1149: }
  3380                           ;main.c: 1150: adsum -= admax;
  3381  01AA  0866               	movf	ADC_Sample@admax,w	;volatile
  3382  01AB  00D9               	movwf	??_ADC_Sample
  3383  01AC  0867               	movf	ADC_Sample@admax+1,w	;volatile
  3384  01AD  21EA               	fcall	PL2	;call to abstracted procedure
  3385  01AE  1C03               	skipc
  3386  01AF  0F5C               	incfsz	??_ADC_Sample+3,w
  3387  01B0  02E3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3388                           
  3389                           ;main.c: 1151: if (adsum >= admin)
  3390  01B1  0864               	movf	ADC_Sample@admin,w	;volatile
  3391  01B2  00D9               	movwf	??_ADC_Sample
  3392  01B3  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3393  01B4  00DA               	movwf	??_ADC_Sample+1
  3394  01B5  01DB               	clrf	??_ADC_Sample+2
  3395  01B6  01DC               	clrf	??_ADC_Sample+3
  3396  01B7  085C               	movf	??_ADC_Sample+3,w
  3397  01B8  0263               	subwf	ADC_Sample@adsum+3,w	;volatile
  3398  01B9  1D03               	skipz
  3399  01BA  29C5               	goto	u3195
  3400  01BB  085B               	movf	??_ADC_Sample+2,w
  3401  01BC  0262               	subwf	ADC_Sample@adsum+2,w	;volatile
  3402  01BD  1D03               	skipz
  3403  01BE  29C5               	goto	u3195
  3404  01BF  085A               	movf	??_ADC_Sample+1,w
  3405  01C0  0261               	subwf	ADC_Sample@adsum+1,w	;volatile
  3406  01C1  1D03               	skipz
  3407  01C2  29C5               	goto	u3195
  3408  01C3  0859               	movf	??_ADC_Sample,w
  3409  01C4  0260               	subwf	ADC_Sample@adsum,w	;volatile
  3410  01C5                     u3195:	
  3411  01C5  1C03               	skipc
  3412  01C6  29CF               	goto	l929
  3413                           
  3414                           ;main.c: 1152: adsum -= admin;
  3415  01C7  0864               	movf	ADC_Sample@admin,w	;volatile
  3416  01C8  00D9               	movwf	??_ADC_Sample
  3417  01C9  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3418  01CA  21EA               	fcall	PL2	;call to abstracted procedure
  3419  01CB  1C03               	skipc
  3420  01CC  0F5C               	incfsz	??_ADC_Sample+3,w
  3421  01CD  02E3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3422  01CE  29D3               	goto	l3112
  3423  01CF                     l929:	
  3424                           
  3425                           ;main.c: 1153: else
  3426                           ;main.c: 1154: adsum = 0;
  3427  01CF  01E0               	clrf	ADC_Sample@adsum	;volatile
  3428  01D0  01E1               	clrf	ADC_Sample@adsum+1	;volatile
  3429  01D1  01E2               	clrf	ADC_Sample@adsum+2	;volatile
  3430  01D2  01E3               	clrf	ADC_Sample@adsum+3	;volatile
  3431  01D3                     l3112:	
  3432                           
  3433                           ;main.c: 1156: adresult = adsum >> 3;
  3434  01D3  0860               	movf	ADC_Sample@adsum,w	;volatile
  3435  01D4  00D9               	movwf	??_ADC_Sample
  3436  01D5  0861               	movf	ADC_Sample@adsum+1,w	;volatile
  3437  01D6  00DA               	movwf	??_ADC_Sample+1
  3438  01D7  0862               	movf	ADC_Sample@adsum+2,w	;volatile
  3439  01D8  00DB               	movwf	??_ADC_Sample+2
  3440  01D9  0863               	movf	ADC_Sample@adsum+3,w	;volatile
  3441  01DA  00DC               	movwf	??_ADC_Sample+3
  3442  01DB  3003               	movlw	3
  3443  01DC                     u3215:	
  3444  01DC  1003               	clrc
  3445  01DD  0CDC               	rrf	??_ADC_Sample+3,f
  3446  01DE  0CDB               	rrf	??_ADC_Sample+2,f
  3447  01DF  0CDA               	rrf	??_ADC_Sample+1,f
  3448  01E0  0CD9               	rrf	??_ADC_Sample,f
  3449  01E1  3EFF               	addlw	-1
  3450  01E2  1D03               	skipz
  3451  01E3  29DC               	goto	u3215
  3452  01E4  085A               	movf	??_ADC_Sample+1,w
  3453  01E5  00B3               	movwf	_adresult+1	;volatile
  3454  01E6  0859               	movf	??_ADC_Sample,w
  3455  01E7  00B2               	movwf	_adresult	;volatile
  3456                           
  3457                           ;main.c: 1158: adsum = 0;
  3458                           
  3459                           ;main.c: 1159: admin = 0;
  3460                           
  3461                           ;main.c: 1160: admax = 0;
  3462  01E8  21F9               	fcall	PL4	;call to abstracted procedure
  3463                           
  3464                           ;main.c: 1161: return 0xA5;
  3465  01E9  34A5               	retlw	165
  3466  01EA                     __end_of_ADC_Sample:	
  3467  01EA                     PL2:	
  3468  01EA  00DA               	movwf	??_ADC_Sample+1
  3469  01EB  01DB               	clrf	??_ADC_Sample+2
  3470  01EC  01DC               	clrf	??_ADC_Sample+3
  3471  01ED  0859               	movf	??_ADC_Sample,w
  3472  01EE  02E0               	subwf	ADC_Sample@adsum,f	;volatile
  3473  01EF  085A               	movf	??_ADC_Sample+1,w
  3474  01F0  1C03               	skipc
  3475  01F1  0F5A               	incfsz	??_ADC_Sample+1,w
  3476  01F2  02E1               	subwf	ADC_Sample@adsum+1,f	;volatile
  3477  01F3  085B               	movf	??_ADC_Sample+2,w
  3478  01F4  1C03               	skipc
  3479  01F5  0F5B               	incfsz	??_ADC_Sample+2,w
  3480  01F6  02E2               	subwf	ADC_Sample@adsum+2,f	;volatile
  3481  01F7  085C               	movf	??_ADC_Sample+3,w
  3482  01F8  0008               	return
  3483  01F9                     __end_ofPL2:	
  3484  01F9                     PL4:	
  3485  01F9  01E0               	clrf	ADC_Sample@adsum	;volatile
  3486  01FA  01E1               	clrf	ADC_Sample@adsum+1	;volatile
  3487  01FB  01E2               	clrf	ADC_Sample@adsum+2	;volatile
  3488  01FC  01E3               	clrf	ADC_Sample@adsum+3	;volatile
  3489  01FD  01E4               	clrf	ADC_Sample@admin	;volatile
  3490  01FE  01E5               	clrf	ADC_Sample@admin+1	;volatile
  3491  01FF  01E6               	clrf	ADC_Sample@admax	;volatile
  3492  0200  01E7               	clrf	ADC_Sample@admax+1	;volatile
  3493  0201  0008               	return
  3494  0202                     __end_ofPL4:	
  3495  0202                     PL14:	
  3496  0202  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3497  0203  00E7               	movwf	ADC_Sample@admax+1	;volatile
  3498  0204  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3499  0205  00E6               	movwf	ADC_Sample@admax	;volatile
  3500  0206  0008               	return
  3501  0207                     __end_ofPL14:	
  3502                           
  3503                           	psect	text17
  3504  040B                     __ptext17:	
  3505 ;; *************** function _Sleep_Mode *****************
  3506 ;; Defined at:
  3507 ;;		line 1020 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;		None
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0, pclath, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 100/0
  3518 ;;		On exit  : 100/100
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMMON   BANK0   BANK1
  3521 ;;      Params:         0       0       0
  3522 ;;      Locals:         0       0       0
  3523 ;;      Temps:          0       0       0
  3524 ;;      Totals:         0       0       0
  3525 ;;Total ram usage:        0 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    3
  3528 ;; This function calls:
  3529 ;;		_AD_Init
  3530 ;;		_Init_System
  3531 ;; This function is called by:
  3532 ;;		_main
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _Sleep_Mode
  3538  040B                     _Sleep_Mode:	
  3539                           
  3540                           ;main.c: 1022: INTCON = 0;
  3541                           
  3542                           ;incstack = 0
  3543                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3544  040B  018B               	clrf	11	;volatile
  3545                           
  3546                           ;main.c: 1024: OPTION_REG = 0;
  3547  040C  0181               	clrf	1	;volatile
  3548                           
  3549                           ;main.c: 1026: WPUA = 0B00000000;
  3550  040D  1683               	bsf	3,5	;RP0=1, select bank1
  3551  040E  0188               	clrf	8	;volatile
  3552                           
  3553                           ;main.c: 1027: TRISA = 0x0F;
  3554  040F  300F               	movlw	15
  3555                           
  3556                           ;main.c: 1028: TRISB = 0x04;
  3557                           
  3558                           ;main.c: 1030: PORTA = 0X00;
  3559                           
  3560                           ;main.c: 1031: PORTB = 0X00;
  3561  0410  2444               	fcall	PL6	;call to abstracted procedure
  3562                           
  3563                           ;main.c: 1032: WPUB = 0x04;
  3564  0411  0088               	movwf	8	;volatile
  3565                           
  3566                           ;main.c: 1034: ADCON0 = 0;
  3567  0412  1683               	bsf	3,5	;RP0=1, select bank1
  3568  0413  0195               	clrf	21	;volatile
  3569                           
  3570                           ;main.c: 1035: ADCON1 = 0;
  3571  0414  0196               	clrf	22	;volatile
  3572                           
  3573                           ;main.c: 1037: PWMCON0 = 0;
  3574  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3575  0416  0195               	clrf	21	;volatile
  3576                           
  3577                           ;main.c: 1039: OSCCON = 0X70;
  3578  0417  3070               	movlw	112
  3579  0418  0094               	movwf	20	;volatile
  3580                           
  3581                           ;main.c: 1041: IOCA = 0x02;
  3582  0419  3002               	movlw	2
  3583  041A  1683               	bsf	3,5	;RP0=1, select bank1
  3584  041B  0089               	movwf	9	;volatile
  3585                           
  3586                           ;main.c: 1042: IOCB = 0x04;
  3587  041C  3004               	movlw	4
  3588  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3589  041E  0089               	movwf	9	;volatile
  3590                           
  3591                           ;main.c: 1044: RAIE = 1;
  3592  041F  158E               	bsf	14,3	;volatile
  3593                           
  3594                           ;main.c: 1045: PEIE = 1;
  3595  0420  170B               	bsf	11,6	;volatile
  3596                           
  3597                           ;main.c: 1046: RBIE = 1;
  3598  0421  158B               	bsf	11,3	;volatile
  3599                           
  3600                           ;main.c: 1047: GIE = 0;
  3601  0422  138B               	bcf	11,7	;volatile
  3602                           
  3603                           ;main.c: 1049: PIE1 &= 0X08;
  3604  0423  3008               	movlw	8
  3605  0424  058E               	andwf	14,f	;volatile
  3606                           
  3607                           ;main.c: 1050: PIR1 = 0;
  3608  0425  018D               	clrf	13	;volatile
  3609                           
  3610                           ;main.c: 1051: INTCON &= 0XC8;
  3611  0426  30C8               	movlw	200
  3612  0427  058B               	andwf	11,f	;volatile
  3613                           
  3614                           ;main.c: 1053: PORTA;
  3615  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3616  0429  0806               	movf	6,w	;volatile
  3617                           
  3618                           ;main.c: 1054: RAIF = 0;
  3619  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3620  042B  118D               	bcf	13,3	;volatile
  3621                           
  3622                           ;main.c: 1055: PORTB;
  3623  042C  0806               	movf	6,w	;volatile
  3624                           
  3625                           ;main.c: 1056: RBIF = 0;
  3626  042D  100B               	bcf	11,0	;volatile
  3627  042E  0064               	clrwdt	;# 
  3628  042F  0063               	sleep	;# 
  3629  0430  0000               	nop	;# 
  3630  0431  0064               	clrwdt	;# 
  3631  0432  0000               	nop	;# 
  3632  0433  0000               	nop	;# 
  3633  0434  0000               	nop	;# 
  3634  0435  0000               	nop	;# 
  3635  0436  0000               	nop	;# 
  3636                           
  3637                           ;main.c: 1068: if(RAIF) RAIF = 0;
  3638  0437  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0438  198D               	btfsc	13,3	;volatile
  3640  0439  118D               	bcf	13,3	;volatile
  3641                           
  3642                           ;main.c: 1069: if(RBIF) RBIF = 0;
  3643  043A  180B               	btfsc	11,0	;volatile
  3644  043B  100B               	bcf	11,0	;volatile
  3645                           
  3646                           ;main.c: 1070: if(TMR2IF) TMR2IF = 0;
  3647  043C  188D               	btfsc	13,1	;volatile
  3648  043D  108D               	bcf	13,1	;volatile
  3649                           
  3650                           ;main.c: 1071: IOCA = 0B00000000;
  3651  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3652  043F  0189               	clrf	9	;volatile
  3653                           
  3654                           ;main.c: 1072: IOCB = 0B00000000;
  3655  0440  1283               	bcf	3,5	;RP0=0, select bank0
  3656  0441  0189               	clrf	9	;volatile
  3657                           
  3658                           ;main.c: 1073: Init_System();
  3659  0442  2588               	fcall	_Init_System
  3660                           
  3661                           ;main.c: 1074: AD_Init();
  3662  0443  2DD3               	ljmp	l2208
  3663  0444                     __end_of_Sleep_Mode:	
  3664  0444                     PL6:	
  3665  0444  0085               	movwf	5	;volatile
  3666  0445  3004               	movlw	4
  3667  0446  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0447  0085               	movwf	5	;volatile
  3669  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3670  0449  0186               	clrf	6	;volatile
  3671  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3672  044B  0186               	clrf	6	;volatile
  3673  044C  0008               	return
  3674  044D                     __end_ofPL6:	
  3675                           
  3676                           	psect	text18
  3677  0588                     __ptext18:	
  3678 ;; *************** function _Init_System *****************
  3679 ;; Defined at:
  3680 ;;		line 865 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      void 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 100/0
  3691 ;;		On exit  : 100/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1
  3694 ;;      Params:         0       0       0
  3695 ;;      Locals:         0       0       0
  3696 ;;      Temps:          0       0       0
  3697 ;;      Totals:         0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    2
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_main
  3705 ;;		_Sleep_Mode
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _Init_System
  3711  0588                     _Init_System:	
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _Init_System: [wreg+status,2]
  3715  0588  0000               	nop	;# 
  3716  0589  0064               	clrwdt	;# 
  3717                           
  3718                           ;main.c: 869: OPTION_REG = 0;
  3719  058A  1283               	bcf	3,5	;RP0=0, select bank0
  3720  058B  0181               	clrf	1	;volatile
  3721  058C  0064               	clrwdt	;# 
  3722                           
  3723                           ;main.c: 871: OSCCON = 0X72;
  3724  058D  3072               	movlw	114
  3725  058E  1283               	bcf	3,5	;RP0=0, select bank0
  3726  058F  0094               	movwf	20	;volatile
  3727                           
  3728                           ;main.c: 873: WPUA = 0B00000000;
  3729  0590  1683               	bsf	3,5	;RP0=1, select bank1
  3730  0591  0188               	clrf	8	;volatile
  3731                           
  3732                           ;main.c: 874: WPDA = 0x00;
  3733  0592  0187               	clrf	7	;volatile
  3734                           
  3735                           ;main.c: 875: WPUB = 0x04;
  3736  0593  3004               	movlw	4
  3737  0594  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0595  0088               	movwf	8	;volatile
  3739                           
  3740                           ;main.c: 877: TRISA = 0x0F;
  3741  0596  300F               	movlw	15
  3742  0597  1683               	bsf	3,5	;RP0=1, select bank1
  3743                           
  3744                           ;main.c: 878: TRISB = 0x04;
  3745                           
  3746                           ;main.c: 880: PORTA = 0X00;
  3747                           
  3748                           ;main.c: 881: PORTB = 0X00;
  3749  0598  2444               	fcall	PL6	;call to abstracted procedure
  3750                           
  3751                           ;main.c: 885: PR2 = 249;
  3752  0599  30F9               	movlw	249
  3753  059A  0091               	movwf	17	;volatile
  3754                           
  3755                           ;main.c: 886: TMR2IF = 0;
  3756  059B  108D               	bcf	13,1	;volatile
  3757                           
  3758                           ;main.c: 887: TMR2IE = 1;
  3759  059C  148E               	bsf	14,1	;volatile
  3760                           
  3761                           ;main.c: 889: T2CON = 0B00000100;
  3762  059D  3004               	movlw	4
  3763  059E  0093               	movwf	19	;volatile
  3764                           
  3765                           ;main.c: 890: INTCON = 0XC0;
  3766  059F  30C0               	movlw	192
  3767  05A0  008B               	movwf	11	;volatile
  3768  05A1  0008               	return
  3769  05A2                     __end_of_Init_System:	
  3770                           
  3771                           	psect	text19
  3772  05D3                     __ptext19:	
  3773 ;; *************** function _AD_Init *****************
  3774 ;; Defined at:
  3775 ;;		line 902 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2
  3784 ;; Tracked objects:
  3785 ;;		On entry : 100/0
  3786 ;;		On exit  : 100/100
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1
  3789 ;;      Params:         0       0       0
  3790 ;;      Locals:         0       0       0
  3791 ;;      Temps:          0       0       0
  3792 ;;      Totals:         0       0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    2
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_main
  3800 ;;		_Sleep_Mode
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           
  3805                           ;psect for function _AD_Init
  3806  05D3                     _AD_Init:	
  3807  05D3                     l2208:	
  3808                           ;incstack = 0
  3809                           ; Regs used in _AD_Init: [wreg+status,2]
  3810                           
  3811                           
  3812                           ;main.c: 935: ADCON0 = 0X41;
  3813  05D3  3041               	movlw	65
  3814  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  3815  05D5  0095               	movwf	21	;volatile
  3816                           
  3817                           ;main.c: 952: ADCON1 = 0;
  3818  05D6  0196               	clrf	22	;volatile
  3819                           
  3820                           ;main.c: 953: ANSEL0 = 0X0D;
  3821  05D7  300D               	movlw	13
  3822  05D8  0093               	movwf	19	;volatile
  3823                           
  3824                           ;main.c: 954: ANSEL1 = 0x00;
  3825  05D9  0194               	clrf	20	;volatile
  3826  05DA  0008               	return
  3827  05DB                     __end_of_AD_Init:	
  3828                           
  3829                           	psect	text20
  3830  0551                     __ptext20:	
  3831 ;; *************** function _Isr_Timer *****************
  3832 ;; Defined at:
  3833 ;;		line 128 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 100/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1
  3847 ;;      Params:         0       0       0
  3848 ;;      Locals:         0       0       0
  3849 ;;      Temps:          3       0       0
  3850 ;;      Totals:         3       0       0
  3851 ;;Total ram usage:        3 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    1
  3854 ;; This function calls:
  3855 ;;		_ledShow
  3856 ;; This function is called by:
  3857 ;;		Interrupt level 1
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           
  3862                           ;psect for function _Isr_Timer
  3863  0551                     _Isr_Timer:	
  3864                           
  3865                           ;main.c: 130: if(TMR2IF)
  3866  0551  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0552  1C8D               	btfss	13,1	;volatile
  3868  0553  2D64               	goto	i1l686
  3869                           
  3870                           ;main.c: 131: {
  3871                           ;main.c: 132: TMR2IF = 0;
  3872  0554  108D               	bcf	13,1	;volatile
  3873                           
  3874                           ;main.c: 133: if(++intCount >= 160)
  3875  0555  30A0               	movlw	160
  3876  0556  0AD7               	incf	_intCount,f
  3877  0557  0257               	subwf	_intCount,w
  3878  0558  1C03               	skipc
  3879  0559  2D62               	goto	i1l2980
  3880  055A  3064               	movlw	100
  3881                           
  3882                           ;main.c: 134: {
  3883                           ;main.c: 135: intCount = 0;
  3884  055B  01D7               	clrf	_intCount
  3885                           
  3886                           ;main.c: 136: IntFlag = 1;
  3887  055C  01D5               	clrf	_IntFlag
  3888  055D  0AD5               	incf	_IntFlag,f
  3889                           
  3890                           ;main.c: 137: if(++count1s >= 100)
  3891  055E  0AD6               	incf	_count1s,f
  3892  055F  0256               	subwf	_count1s,w
  3893  0560  1803               	btfsc	3,0
  3894                           
  3895                           ;main.c: 138: {
  3896                           ;main.c: 139: count1s = 0;
  3897  0561  01D6               	clrf	_count1s
  3898  0562                     i1l2980:	
  3899                           
  3900                           ;main.c: 140: }
  3901                           ;main.c: 141: }
  3902                           ;main.c: 142: ledShow();
  3903  0562  23BA               	fcall	_ledShow
  3904                           
  3905                           ;main.c: 143: intCount10++;
  3906  0563  0AD2               	incf	_intCount10,f
  3907  0564                     i1l686:	
  3908  0564  0872               	movf	??_Isr_Timer+2,w
  3909  0565  008A               	movwf	10
  3910  0566  0871               	movf	??_Isr_Timer+1,w
  3911  0567  0084               	movwf	4
  3912  0568  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3913  0569  0083               	movwf	3
  3914  056A  0EFE               	swapf	126,f
  3915  056B  0E7E               	swapf	126,w
  3916  056C  0009               	retfie
  3917  056D                     __end_of_Isr_Timer:	
  3918                           
  3919                           	psect	intentry
  3920  0004                     __pintentry:	
  3921                           ;incstack = 0
  3922                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3923                           
  3924  0004                     interrupt_function:	
  3925  007E                     saved_w	set	btemp
  3926  0004  00FE               	movwf	btemp
  3927  0005  0E03               	swapf	3,w
  3928  0006  00F0               	movwf	??_Isr_Timer
  3929  0007  0804               	movf	4,w
  3930  0008  00F1               	movwf	??_Isr_Timer+1
  3931  0009  080A               	movf	10,w
  3932  000A  00F2               	movwf	??_Isr_Timer+2
  3933  000B  2D51               	ljmp	_Isr_Timer
  3934                           
  3935                           	psect	text21
  3936  03BA                     __ptext21:	
  3937 ;; *************** function _ledShow *****************
  3938 ;; Defined at:
  3939 ;;		line 192 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3948 ;; Tracked objects:
  3949 ;;		On entry : 100/0
  3950 ;;		On exit  : 100/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMMON   BANK0   BANK1
  3953 ;;      Params:         0       0       0
  3954 ;;      Locals:         0       0       0
  3955 ;;      Temps:          0       0       0
  3956 ;;      Totals:         0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_Isr_Timer
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _ledShow
  3968  03BA                     _ledShow:	
  3969                           
  3970                           ;main.c: 194: if(++ledCntTime > 5)
  3971                           
  3972                           ;incstack = 0
  3973                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3974  03BA  3006               	movlw	6
  3975  03BB  0ABA               	incf	_ledCntTime,f
  3976  03BC  023A               	subwf	_ledCntTime,w
  3977  03BD  1C03               	skipc
  3978  03BE  0008               	return
  3979  03BF  3006               	movlw	6
  3980                           
  3981                           ;main.c: 195: {
  3982                           ;main.c: 196: ledCntTime = 0;
  3983  03C0  01BA               	clrf	_ledCntTime
  3984                           
  3985                           ;main.c: 197: if(++ledCnt > 5)
  3986  03C1  0ACE               	incf	_ledCnt,f
  3987  03C2  024E               	subwf	_ledCnt,w
  3988  03C3  1803               	btfsc	3,0
  3989                           
  3990                           ;main.c: 198: {
  3991                           ;main.c: 199: ledCnt = 0;
  3992  03C4  01CE               	clrf	_ledCnt
  3993                           
  3994                           ;main.c: 200: }
  3995                           ;main.c: 201: PORTB &= 0xDC;
  3996  03C5  30DC               	movlw	220
  3997  03C6  0586               	andwf	6,f	;volatile
  3998                           
  3999                           ;main.c: 202: TRISB |= 0x23;
  4000  03C7  3023               	movlw	35
  4001  03C8  0485               	iorwf	5,f	;volatile
  4002                           
  4003                           ;main.c: 203: switch(ledCnt)
  4004  03C9  2BFF               	goto	i1l2480
  4005  03CA                     i1l2454:	
  4006                           
  4007                           ;main.c: 206: if(ledStep > 1)
  4008  03CA  3002               	movlw	2
  4009  03CB  024D               	subwf	_ledStep,w
  4010  03CC  1C03               	skipc
  4011  03CD  0008               	return
  4012                           
  4013                           ;main.c: 207: {
  4014                           ;main.c: 208: TRISB &= 0xFE;
  4015  03CE  1005               	bcf	5,0	;volatile
  4016                           
  4017                           ;main.c: 209: TRISB &= 0xDF;
  4018  03CF  1285               	bcf	5,5	;volatile
  4019                           
  4020                           ;main.c: 210: RB0 = 1;
  4021  03D0  1406               	bsf	6,0	;volatile
  4022                           
  4023                           ;main.c: 211: RB5 = 0;
  4024  03D1  1286               	bcf	6,5	;volatile
  4025  03D2  0008               	return
  4026  03D3                     i1l2458:	
  4027                           
  4028                           ;main.c: 215: if(ledStep > 2)
  4029  03D3  3003               	movlw	3
  4030  03D4  024D               	subwf	_ledStep,w
  4031  03D5  1C03               	skipc
  4032  03D6  0008               	return
  4033                           
  4034                           ;main.c: 216: {
  4035                           ;main.c: 217: TRISB &= 0xFE;
  4036  03D7  1005               	bcf	5,0	;volatile
  4037                           
  4038                           ;main.c: 218: TRISB &= 0xFD;
  4039  03D8  1085               	bcf	5,1	;volatile
  4040                           
  4041                           ;main.c: 219: RB1 = 1;
  4042  03D9  1486               	bsf	6,1	;volatile
  4043                           
  4044                           ;main.c: 220: RB0 = 0;
  4045  03DA  1006               	bcf	6,0	;volatile
  4046  03DB  0008               	return
  4047  03DC                     i1l2462:	
  4048                           
  4049                           ;main.c: 224: if(ledStep > 3)
  4050  03DC  3004               	movlw	4
  4051  03DD  024D               	subwf	_ledStep,w
  4052  03DE  1C03               	skipc
  4053  03DF  0008               	return
  4054                           
  4055                           ;main.c: 225: {
  4056                           ;main.c: 226: TRISB &= 0xDF;
  4057  03E0  1285               	bcf	5,5	;volatile
  4058                           
  4059                           ;main.c: 227: TRISB &= 0xFD;
  4060  03E1  1085               	bcf	5,1	;volatile
  4061                           
  4062                           ;main.c: 228: RB1 = 1;
  4063  03E2  1486               	bsf	6,1	;volatile
  4064                           
  4065                           ;main.c: 229: RB5 = 0;
  4066  03E3  1286               	bcf	6,5	;volatile
  4067  03E4  0008               	return
  4068  03E5                     i1l2466:	
  4069                           
  4070                           ;main.c: 233: if(ledStep > 4)
  4071  03E5  3005               	movlw	5
  4072  03E6  024D               	subwf	_ledStep,w
  4073  03E7  1C03               	skipc
  4074  03E8  0008               	return
  4075                           
  4076                           ;main.c: 234: {
  4077                           ;main.c: 235: TRISB &= 0xDF;
  4078  03E9  1285               	bcf	5,5	;volatile
  4079                           
  4080                           ;main.c: 236: TRISB &= 0xFE;
  4081  03EA  1005               	bcf	5,0	;volatile
  4082                           
  4083                           ;main.c: 237: RB5 = 1;
  4084  03EB  1686               	bsf	6,5	;volatile
  4085                           
  4086                           ;main.c: 238: RB0 = 0;
  4087  03EC  1006               	bcf	6,0	;volatile
  4088  03ED  0008               	return
  4089  03EE                     i1l2470:	
  4090                           
  4091                           ;main.c: 242: if(ledStep > 5)
  4092  03EE  3006               	movlw	6
  4093  03EF  024D               	subwf	_ledStep,w
  4094  03F0  1C03               	skipc
  4095  03F1  0008               	return
  4096                           
  4097                           ;main.c: 243: {
  4098                           ;main.c: 244: TRISB &= 0xDF;
  4099  03F2  1285               	bcf	5,5	;volatile
  4100                           
  4101                           ;main.c: 245: TRISB &= 0xFD;
  4102  03F3  1085               	bcf	5,1	;volatile
  4103                           
  4104                           ;main.c: 246: RB5 = 1;
  4105  03F4  1686               	bsf	6,5	;volatile
  4106                           
  4107                           ;main.c: 247: RB1 = 0;
  4108  03F5  1086               	bcf	6,1	;volatile
  4109  03F6  0008               	return
  4110  03F7                     i1l2474:	
  4111                           
  4112                           ;main.c: 251: if(ledStep > 0)
  4113  03F7  084D               	movf	_ledStep,w
  4114  03F8  1903               	btfsc	3,2
  4115  03F9  0008               	return
  4116                           
  4117                           ;main.c: 252: {
  4118                           ;main.c: 253: TRISB &= 0xFE;
  4119  03FA  1005               	bcf	5,0	;volatile
  4120                           
  4121                           ;main.c: 254: TRISB &= 0xFD;
  4122  03FB  1085               	bcf	5,1	;volatile
  4123                           
  4124                           ;main.c: 255: RB0 = 1;
  4125  03FC  1406               	bsf	6,0	;volatile
  4126                           
  4127                           ;main.c: 256: RB1 = 0;
  4128  03FD  1086               	bcf	6,1	;volatile
  4129  03FE  0008               	return
  4130  03FF                     i1l2480:	
  4131  03FF  084E               	movf	_ledCnt,w
  4132                           
  4133                           ; Switch size 1, requested type "space"
  4134                           ; Number of cases is 6, Range of values is 0 to 5
  4135                           ; switch strategies available:
  4136                           ; Name         Instructions Cycles
  4137                           ; direct_byte           12     6 (fixed)
  4138                           ; simple_byte           19    10 (average)
  4139                           ; jumptable            260     6 (fixed)
  4140                           ;	Chosen strategy is direct_byte
  4141  0400  0084               	movwf	4
  4142  0401  3006               	movlw	6
  4143  0402  0204               	subwf	4,w
  4144  0403  1803               	skipnc
  4145  0404  0008               	return
  4146  0405  3005               	movlw	high i1S3596
  4147  0406  008A               	movwf	10
  4148  0407  30E9               	movlw	low i1S3596
  4149  0408  0704               	addwf	4,w
  4150  0409  0082               	movwf	2
  4151  040A  0008               	return
  4152  040B                     __end_of_ledShow:	
  4153  007E                     btemp	set	126	;btemp
  4154  007E                     wtemp0	set	126
  4155                           
  4156                           	psect	swtext1
  4157  05E9                     __pswtext1:	
  4158  05E9                     i1S3596:	
  4159  05E9  2BF7               	ljmp	i1l2474
  4160  05EA  2BCA               	ljmp	i1l2454
  4161  05EB  2BD3               	ljmp	i1l2458
  4162  05EC  2BDC               	ljmp	i1l2462
  4163  05ED  2BE5               	ljmp	i1l2466
  4164  05EE  2BEE               	ljmp	i1l2470


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         61
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     21      79
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->___bmul
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3562
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1217
                                             17 BANK0      4     4      0
                         _ADC_Sample
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
     ___bmul
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     15      4F       4       98.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      5A       7        0.0%
DATA                 0      0      5A       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 09 15:18:10 2025

            _protectFlag 0050                        pc 0002           ___bmul@product 0074  
                     PL2 01EA                       PL4 01F9                       PL6 0444  
                     PL8 0118                       fsr 0004                      PL10 05AA  
                    PL12 05B1                      PL14 0202                      l816 04EB  
                    l691 0452                      l925 018B                      l919 0150  
                    l847 028A                      l695 046C                      l929 01CF  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05DB                     l3100 017F  
                   l3102 0187                     l2214 05E2                     l2208 05D3  
                   l3112 01D3                     l3200 024C                     l2400 0586  
                   l3210 0263                     l3220 026E                     l1196 0579  
                   l3062 0130                     l3206 025F                     l3150 04FF  
                   l3072 013A                     l3064 0132                     l3232 027E  
                   l3216 026A                     l3312 0057                     l3136 054D  
                   l3128 0539                     l3250 02A3                     l3306 0053  
                   l3236 0284                     l3228 0278                     l3260 02AF  
                   l3308 0055                     l2268 052F                     l3078 013B  
                   l3430 02E0                     l3190 023B                     l3414 0115  
                   l3334 0079                     l3326 006E                     l3318 0061  
                   l3158 0512                     l3096 0175                     l3088 015B  
                   l2368 05B7                     l3248 02A0                     l3256 02A8  
                   l3176 0223                     l3360 00A9                     l3336 007B  
                   l3504 0396                     l3442 030D                     l3178 0224  
                   l2386 0573                     l3370 00C9                     l3354 009D  
                   l3346 0095                     l3290 0036                     l3274 0023  
                   l2810 04D9                     l3506 039A                     l3514 03A2  
                   l3452 0321                     l3188 023A                     l3364 00BF  
                   l3348 0097                     l3508 039D                     l3470 0353  
                   l3390 00EE                     l3374 00CC                     l3358 00A3  
                   l2814 04DE                     l3518 03A8                     l3464 034A  
                   l3472 0355                     l3448 031A                     l3376 00CE  
                   l3288 0034                     l2840 0495                     l3394 00F2  
                   l2818 04E2                     l3538 045A                     l3388 00ED  
                   l2852 04B2                     l2860 04C4                     l3398 00F9  
                   l3494 0386                     l3486 036A                     l2854 04B4  
                   l3574 0489                     l3496 0388                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u3215 01DC  
                   u3145 017B                     u3155 0185                     u4207 02B5  
                   _PIE1 000E                     u4217 031F                     u3195 01C5  
                   u4227 035A                     u3275 0505                     u4237 012C  
                   u3385 0255                     u3715 00BD                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     u3495 0296  
                   _RBIE 005B                     _RBIF 0058                     u3755 00E1  
                   u3865 02FF                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 044D  
                   btemp 007E                     start 000C        ___bmul@multiplier 0075  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 0588  
        __end_of___lbmod 0551                    _T2CON 0013          __end_of___lwmod 0517  
                  i1l686 0564            _countHalfFull 0051                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0118  
        __end_of_ledShow 040B          __end_of_keyRead 0535                    pclath 000A  
        __end_of_pwmInit 05D3          __end_of_pwmStop 05E2                    status 0003  
                  wtemp0 007E          __end_of_workCtr 04C8          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 048B  
   __size_of_chrgPwmInit 0008     __size_of_chrgPwmStop 0007                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 05A2                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3596 05E9                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
                 _GODONE 04A9                   i1l2470 03EE                   i1l2462 03DC  
                 i1l2454 03CA                   i1l2480 03FF                   i1l2474 03F7  
                 i1l2466 03E5                   i1l2458 03D3                   i1l2980 0562  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
                 _PWMD3L 009C             ??_ADC_Sample 0059             keyCtr@kclick 0074  
     __size_of_Isr_Timer 001C               _Sleep_Mode 040B                   ___bmul 05B5  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 004E  
                 _ledCtr 035D                ??___lwmod 0077                   _keyCtr 04C8  
                 _jrStep 0037                ??_chrgCtr 0059                   _pwStep 0045  
                 _result 0030                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01EA                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 0077          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 005A      ___bmul@multiplicand 0073          _workOverOutTime 004F  
         __pcstackCOMMON 0070       __size_of_checkOutA 00B2              _Init_System 0588  
             __end_ofPL2 01F9               __end_ofPL4 0202               __end_ofPL6 044D  
             __end_ofPL8 011E         ___lbdiv@quotient 0076        __end_of_Isr_Timer 056D  
             _checkBatAD 02B9               __pbssBANK0 0020             _chrgFullFlag 0053  
            ?_Sleep_Mode 0070               __pmaintext 044D                  ?___bmul 0073  
             __pintentry 0004                  ?_ledCtr 0070             _chrgWaitTime 003C  
                ?_keyCtr 0070               _ledCntTime 003A                  _AD_Init 05D3  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D        __end_of_checkOutA 02B9  
                _IntFlag 0055               _intCount10 0052          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0066          ADC_Sample@admin 0064          ADC_Sample@adsum 0060  
        __size_of___bmul 000E                  ___lbdiv 056D                  ___lbmod 0535  
                _addTime 003E                  ___lwmod 04F3          __size_of_ledCtr 005D  
        __size_of_keyCtr 002B                  _chrgCtr 0018               _lowBatFlag 0039  
                __ptext1 048B                  __ptext2 05CB                  __ptext3 035D  
                __ptext4 04F3                  __ptext5 0535                  __ptext6 04C8  
                __ptext7 0517                  __ptext8 0018                  __ptext9 05DB  
                _ledShow 03BA                  _ledStep 004D                  _count1s 0056  
                _count5s 0026                  _count8s 0022                  _maxDuty 004A  
                _keyRead 0517      __size_of_Sleep_Mode 0039                  _pwmInit 05CB  
                _subTime 003D              ?_checkBatAD 0070                  _pwmStop 05DB  
                clrloop0 05C4                  _workCtr 048B               _outADValue 002C  
   end_of_initialization 0016            _longPressFlag 004B            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0059              ___lbmod@rem 005B  
    __size_of_checkBatAD 00A4           __end_of___bmul 05C3             ?_Init_System 0070  
         __end_of_ledCtr 03BA           __end_of_keyCtr 04F3      __end_of_chrgPwmInit 05AA  
    __end_of_chrgPwmStop 05E9              __end_ofPL10 05B1              __end_ofPL12 05B5  
            __end_ofPL14 0207      start_initialization 000D                _Isr_Timer 0551  
           ??_Sleep_Mode 0073                 ??___bmul 0074                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0068                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0059  
     __end_of_Sleep_Mode 0444               ?_Isr_Timer 0070                _checkOutA 0207  
              __pnvBANK0 006E              _chrgMaxDuty 003B                _chrgMaxAD 0040  
            _chrgPwmFlag 0035              _chrgPwmInit 05A2                 ?___lbdiv 0073  
               ?___lbmod 0073              _chrgPwmStop 05E2                 ?___lwmod 0073  
               ?_chrgCtr 0070                __pswtext1 05E9                _count900s 0020  
               ?_ledShow 0070                 ?_keyRead 0070                _firstTime 006E  
         ADC_Sample@adch 005E                 ?_pwmInit 0070                _fullCount 0028  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 003F  
               ?_workCtr 0070              ADC_Sample@i 005F              ADC_Sample@j 005D  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 05C3  
              _prePwStep 0079              _reChrgCount 0044                _sleepTime 0038  
              _overCount 0049        checkOutA@maxtempV 006C       __end_of_checkBatAD 035D  
   __size_of_Init_System 001A                _startTime 0047         __size_of_AD_Init 0008  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 011E  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lwmod 0024  
            _lockLedStep 0043         __size_of_chrgCtr 0100         __size_of_ledShow 0051  
       __size_of_keyRead 001E                 _adresult 0032                 _chrgFlag 0054  
               _chrgMode 0041                 __ptext10 05E2                 __ptext11 05A2  
               __ptext20 0551                 __ptext12 056D                 __ptext21 03BA  
               __ptext13 0207                 __ptext14 05B5                 __ptext15 02B9  
               __ptext16 011E                 __ptext17 040B                 __ptext18 0588  
               __ptext19 05D3         __size_of_pwmInit 0008         __size_of_pwmStop 0007  
               _count50s 002A         __size_of_workCtr 003D                 _keyCount 004C  
               _intCount 0057            __size_of_main 003E              ??_checkOutA 006A  
       checkOutA@maxAout 006D                 _tempDuty 0048                 _test_adc 0058  
               _power_ad 002E                 _workStep 007A             _overChrgTime 0046  
           _motorPwmFlag 0034                 intlevel1 0000         ___lwmod@dividend 0075  
            ?_ADC_Sample 0073              _preWorkStep 0036             ?_chrgPwmInit 0070  
           _overWorkTime 0024             ?_chrgPwmStop 0070              _showBatTime 0042  
             _OPTION_REG 0001          ___lwmod@divisor 0073          ___lwmod@counter 0059  
