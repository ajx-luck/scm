

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 09 16:14:55 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	nvBANK0
    74  006D                     __pnvBANK0:	
    75  006D                     _firstTime:	
    76  006D                     	ds	1
    77  001D                     _PWMCON2	set	29
    78  0018                     _PWMTH	set	24
    79  0017                     _PWMTL	set	23
    80  0016                     _PWMCON1	set	22
    81  0015                     _PWMCON0	set	21
    82  0014                     _OSCCON	set	20
    83  0013                     _T2CON	set	19
    84  0011                     _PR2	set	17
    85  000E                     _PIE1	set	14
    86  000D                     _PIR1	set	13
    87  000B                     _INTCON	set	11
    88  0009                     _IOCB	set	9
    89  0008                     _WPUB	set	8
    90  0006                     _PORTB	set	6
    91  0005                     _TRISB	set	5
    92  0001                     _OPTION_REG	set	1
    93  0071                     _TMR2IE	set	113
    94  0073                     _RAIE	set	115
    95  0069                     _TMR2IF	set	105
    96  006B                     _RAIF	set	107
    97  0058                     _RBIF	set	88
    98  005B                     _RBIE	set	91
    99  005E                     _PEIE	set	94
   100  005F                     _GIE	set	95
   101  0030                     _RB0	set	48
   102  0031                     _RB1	set	49
   103  0033                     _RB3	set	51
   104  0034                     _RB4	set	52
   105  0035                     _RB5	set	53
   106  009E                     _PWMD23H	set	158
   107  009D                     _PWM23DT	set	157
   108  009C                     _PWMD3L	set	156
   109  009B                     _PWMD2L	set	155
   110  0099                     _ADRESH	set	153
   111  0098                     _ADRESL	set	152
   112  0096                     _ADCON1	set	150
   113  0095                     _ADCON0	set	149
   114  0094                     _ANSEL1	set	148
   115  0093                     _ANSEL0	set	147
   116  0089                     _IOCA	set	137
   117  0088                     _WPUA	set	136
   118  0087                     _WPDA	set	135
   119  0086                     _PORTA	set	134
   120  0085                     _TRISA	set	133
   121  04B2                     _LDO_EN	set	1202
   122  04B6                     _CHS4	set	1206
   123  04A9                     _GODONE	set	1193
   124  0434                     _RA4	set	1076
   125  0435                     _RA5	set	1077
   126                           
   127                           	psect	cinit
   128  000D                     start_initialization:	
   129                           ; #config settings
   130                           
   131  000D                     __initialization:	
   132                           
   133                           ; Clear objects allocated to COMMON
   134  000D  3077               	movlw	low __pbssCOMMON
   135  000E  0084               	movwf	4
   136  000F  307B               	movlw	low (__pbssCOMMON+4)
   137  0010  259E               	fcall	clear_ram0
   138  0011  3020               	movlw	low __pbssBANK0
   139                           
   140                           ; Clear objects allocated to BANK0
   141  0012  1383               	bcf	3,7	;select IRP bank0
   142  0013  0084               	movwf	4
   143  0014  3058               	movlw	low (__pbssBANK0+56)
   144  0015  259E               	fcall	clear_ram0
   145  0016                     end_of_initialization:	
   146                           ;End of C runtime variable initialization code
   147                           
   148  0016                     __end_of__initialization:	
   149  0016  0183               	clrf	3
   150  0017  2C26               	ljmp	_main	;jump to C main() function
   151                           
   152                           	psect	bssCOMMON
   153  0077                     __pbssCOMMON:	
   154  0077                     _prePwStep:	
   155  0077                     	ds	1
   156  0078                     _ledStep:	
   157  0078                     	ds	1
   158  0079                     _workStep:	
   159  0079                     	ds	1
   160  007A                     _chrgFlag:	
   161  007A                     	ds	1
   162                           
   163                           	psect	bssBANK0
   164  0020                     __pbssBANK0:	
   165  0020                     _count900s:	
   166  0020                     	ds	2
   167  0022                     _count8s:	
   168  0022                     	ds	2
   169  0024                     _overWorkTime:	
   170  0024                     	ds	2
   171  0026                     _count5s:	
   172  0026                     	ds	2
   173  0028                     _fullCount:	
   174  0028                     	ds	2
   175  002A                     _count50s:	
   176  002A                     	ds	2
   177  002C                     _batADValue:	
   178  002C                     	ds	2
   179  002E                     _outADValue:	
   180  002E                     	ds	2
   181  0030                     _power_ad:	
   182  0030                     	ds	2
   183  0032                     _result:	
   184  0032                     	ds	2
   185  0034                     _adresult:	
   186  0034                     	ds	2
   187  0036                     _motorPwmFlag:	
   188  0036                     	ds	1
   189  0037                     _chrgPwmFlag:	
   190  0037                     	ds	1
   191  0038                     _preWorkStep:	
   192  0038                     	ds	1
   193  0039                     _jrStep:	
   194  0039                     	ds	1
   195  003A                     _sleepTime:	
   196  003A                     	ds	1
   197  003B                     _lowBatFlag:	
   198  003B                     	ds	1
   199  003C                     _ledCntTime:	
   200  003C                     	ds	1
   201  003D                     _chrgMaxDuty:	
   202  003D                     	ds	1
   203  003E                     _chrgWaitTime:	
   204  003E                     	ds	1
   205  003F                     _subTime:	
   206  003F                     	ds	1
   207  0040                     _addTime:	
   208  0040                     	ds	1
   209  0041                     _lockCount:	
   210  0041                     	ds	1
   211  0042                     _chrgMaxAD:	
   212  0042                     	ds	1
   213  0043                     _chrgMode:	
   214  0043                     	ds	1
   215  0044                     _showBatTime:	
   216  0044                     	ds	1
   217  0045                     _lockLedStep:	
   218  0045                     	ds	1
   219  0046                     _reChrgCount:	
   220  0046                     	ds	1
   221  0047                     _pwStep:	
   222  0047                     	ds	1
   223  0048                     _overChrgTime:	
   224  0048                     	ds	1
   225  0049                     _startTime:	
   226  0049                     	ds	1
   227  004A                     _tempDuty:	
   228  004A                     	ds	1
   229  004B                     _overCount:	
   230  004B                     	ds	1
   231  004C                     _maxDuty:	
   232  004C                     	ds	1
   233  004D                     _longPressFlag:	
   234  004D                     	ds	1
   235  004E                     _keyCount:	
   236  004E                     	ds	1
   237  004F                     _ledCnt:	
   238  004F                     	ds	1
   239  0050                     _workOverOutTime:	
   240  0050                     	ds	1
   241  0051                     _protectFlag:	
   242  0051                     	ds	1
   243  0052                     _intCount10:	
   244  0052                     	ds	1
   245  0053                     _chrgFullFlag:	
   246  0053                     	ds	1
   247  0054                     _IntFlag:	
   248  0054                     	ds	1
   249  0055                     _count1s:	
   250  0055                     	ds	1
   251  0056                     _intCount:	
   252  0056                     	ds	1
   253  0057                     _test_adc:	
   254  0057                     	ds	1
   255                           
   256                           	psect	clrtext
   257  059E                     clear_ram0:	
   258                           ;	Called with FSR containing the base address, and
   259                           ;	W with the last address+1
   260                           
   261  059E  0064               	clrwdt	;clear the watchdog before getting into this loop
   262  059F                     clrloop0:	
   263  059F  0180               	clrf	0	;clear RAM location pointed to by FSR
   264  05A0  0A84               	incf	4,f	;increment pointer
   265  05A1  0604               	xorwf	4,w	;XOR with final address
   266  05A2  1903               	btfsc	3,2	;have we reached the end yet?
   267  05A3  3400               	retlw	0	;all done for this memory range, return
   268  05A4  0604               	xorwf	4,w	;XOR again to restore value
   269  05A5  2D9F               	goto	clrloop0	;do the next byte
   270                           
   271                           	psect	cstackCOMMON
   272  0070                     __pcstackCOMMON:	
   273  0070                     ?_ledShow:	
   274  0070                     ??_ledShow:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Init_System:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_AD_Init:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_checkOutA:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_chrgCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_checkBatAD:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_keyCtr:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_workCtr:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_ledCtr:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_Sleep_Mode:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_chrgPwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_pwmStop:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_chrgPwmInit:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_pwmInit:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_Isr_Timer:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ??_Isr_Timer:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_keyRead:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330  0070                     	ds	3
   331  0073                     ??_Init_System:	
   332  0073                     ??_AD_Init:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_workCtr:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_Sleep_Mode:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_chrgPwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ??_pwmStop:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_chrgPwmInit:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ??_pwmInit:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?_ADC_Sample:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ??_keyRead:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     ?___bmul:	
   360                           ; 1 bytes @ 0x3
   361                           
   362  0073                     ?___lbdiv:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ?___lbmod:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ?___lwmod:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     keyRead@keyStatus:	
   372                           ; 2 bytes @ 0x3
   373                           
   374  0073                     ADC_Sample@adldo:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ___bmul@multiplicand:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ___lbdiv@divisor:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ___lbmod@divisor:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ___lwmod@divisor:	
   387                           ; 1 bytes @ 0x3
   388                           
   389                           
   390                           ; 2 bytes @ 0x3
   391  0073                     	ds	1
   392  0074                     ??_checkBatAD:	
   393  0074                     ??_keyCtr:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ??___bmul:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     ??___lbdiv:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     ??___lbmod:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     keyCtr@kclick:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0074                     ___bmul@product:	
   409                           ; 1 bytes @ 0x4
   410                           
   411  0074                     ___lbdiv@dividend:	
   412                           ; 1 bytes @ 0x4
   413                           
   414                           
   415                           ; 1 bytes @ 0x4
   416  0074                     	ds	1
   417  0075                     ___bmul@multiplier:	
   418  0075                     ___lbdiv@counter:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0075                     ___lwmod@dividend:	
   422                           ; 1 bytes @ 0x5
   423                           
   424                           
   425                           ; 2 bytes @ 0x5
   426  0075                     	ds	1
   427  0076                     ___lbdiv@quotient:	
   428                           
   429                           ; 1 bytes @ 0x6
   430  0076                     	ds	1
   431  0077                     ??_ledCtr:	
   432  0077                     ??_main:	
   433                           ; 1 bytes @ 0x7
   434                           
   435  0077                     ??___lwmod:	
   436                           ; 1 bytes @ 0x7
   437                           
   438                           
   439                           	psect	cstackBANK0
   440  0058                     __pcstackBANK0:	
   441                           ; 1 bytes @ 0x7
   442                           
   443  0058                     ??_chrgCtr:	
   444  0058                     ??_ADC_Sample:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0058                     ___lbmod@dividend:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0058                     ___lwmod@counter:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 1 bytes @ 0x0
   455  0058                     	ds	1
   456  0059                     ___lbmod@counter:	
   457                           
   458                           ; 1 bytes @ 0x1
   459  0059                     	ds	1
   460  005A                     ___lbmod@rem:	
   461                           
   462                           ; 1 bytes @ 0x2
   463  005A                     	ds	2
   464  005C                     ADC_Sample@j:	
   465                           
   466                           ; 1 bytes @ 0x4
   467  005C                     	ds	1
   468  005D                     ADC_Sample@adch:	
   469                           
   470                           ; 1 bytes @ 0x5
   471  005D                     	ds	1
   472  005E                     ADC_Sample@i:	
   473                           
   474                           ; 1 bytes @ 0x6
   475  005E                     	ds	1
   476  005F                     ADC_Sample@adsum:	
   477                           
   478                           ; 4 bytes @ 0x7
   479  005F                     	ds	4
   480  0063                     ADC_Sample@admin:	
   481                           
   482                           ; 2 bytes @ 0xB
   483  0063                     	ds	2
   484  0065                     ADC_Sample@admax:	
   485                           
   486                           ; 2 bytes @ 0xD
   487  0065                     	ds	2
   488  0067                     ADC_Sample@ad_temp:	
   489                           
   490                           ; 2 bytes @ 0xF
   491  0067                     	ds	2
   492  0069                     ??_checkOutA:	
   493                           
   494                           ; 1 bytes @ 0x11
   495  0069                     	ds	2
   496  006B                     checkOutA@maxtempV:	
   497                           
   498                           ; 1 bytes @ 0x13
   499  006B                     	ds	1
   500  006C                     checkOutA@maxAout:	
   501                           
   502                           ; 1 bytes @ 0x14
   503  006C                     	ds	1
   504                           
   505                           	psect	maintext
   506  0426                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 152 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 100/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1
   526 ;;      Params:         0       0       0
   527 ;;      Locals:         0       0       0
   528 ;;      Temps:          0       0       0
   529 ;;      Totals:         0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    4
   532 ;; This function calls:
   533 ;;		_AD_Init
   534 ;;		_Init_System
   535 ;;		_Sleep_Mode
   536 ;;		_checkBatAD
   537 ;;		_checkOutA
   538 ;;		_chrgCtr
   539 ;;		_keyCtr
   540 ;;		_ledCtr
   541 ;;		_workCtr
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _main
   549  0426                     _main:	
   550                           
   551                           ;main.c: 154: Init_System();
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   555  0426  2563               	fcall	_Init_System
   556                           
   557                           ;main.c: 155: AD_Init();
   558  0427  25AE               	fcall	_AD_Init
   559                           
   560                           ;main.c: 156: firstTime = 200;
   561  0428  30C8               	movlw	200
   562  0429  1283               	bcf	3,5	;RP0=0, select bank0
   563  042A  00ED               	movwf	_firstTime
   564  042B                     l691:	
   565                           ;main.c: 157: while (1)
   566                           
   567  042B  0064               	clrwdt	;# 
   568                           
   569                           ;main.c: 160: if(intCount10 > 10)
   570  042C  300B               	movlw	11
   571  042D  1283               	bcf	3,5	;RP0=0, select bank0
   572  042E  0252               	subwf	_intCount10,w
   573  042F  1C03               	skipc
   574  0430  2C33               	goto	l3482
   575                           
   576                           ;main.c: 161: {
   577                           ;main.c: 162: intCount10 = 0;
   578  0431  01D2               	clrf	_intCount10
   579                           
   580                           ;main.c: 163: checkOutA();
   581  0432  2206               	fcall	_checkOutA
   582  0433                     l3482:	
   583                           
   584                           ;main.c: 164: }
   585                           ;main.c: 165: if(!IntFlag)
   586  0433  1283               	bcf	3,5	;RP0=0, select bank0
   587  0434  0854               	movf	_IntFlag,w
   588  0435  1903               	btfsc	3,2
   589  0436  2C2B               	goto	l691
   590                           
   591                           ;main.c: 167: IntFlag = 0;
   592  0437  01D4               	clrf	_IntFlag
   593                           
   594                           ;main.c: 168: chrgCtr();
   595  0438  2018               	fcall	_chrgCtr
   596                           
   597                           ;main.c: 169: checkBatAD();
   598  0439  22B9               	fcall	_checkBatAD
   599                           
   600                           ;main.c: 170: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   601  043A  087A               	movf	_chrgFlag,w
   602  043B  1D03               	btfss	3,2
   603  043C  2C45               	goto	l695
   604  043D  1283               	bcf	3,5	;RP0=0, select bank0
   605  043E  083B               	movf	_lowBatFlag,w
   606  043F  1D03               	btfss	3,2
   607  0440  2C45               	goto	l695
   608  0441  086D               	movf	_firstTime,w
   609  0442  1D03               	btfss	3,2
   610  0443  2C45               	goto	l695
   611                           
   612                           ;main.c: 171: {
   613                           ;main.c: 172: keyCtr();
   614  0444  24A2               	fcall	_keyCtr
   615  0445                     l695:	
   616                           
   617                           ;main.c: 173: }
   618                           ;main.c: 174: workCtr();
   619  0445  2464               	fcall	_workCtr
   620                           
   621                           ;main.c: 175: ledCtr();
   622  0446  2387               	fcall	_ledCtr
   623                           
   624                           ;main.c: 176: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   625  0447  087A               	movf	_chrgFlag,w
   626  0448  1D03               	btfss	3,2
   627  0449  2C62               	goto	l3518
   628  044A  0879               	movf	_workStep,w
   629  044B  1D03               	btfss	3,2
   630  044C  2C62               	goto	l3518
   631  044D  084E               	movf	_keyCount,w
   632  044E  1D03               	btfss	3,2
   633  044F  2C62               	goto	l3518
   634  0450  086D               	movf	_firstTime,w
   635  0451  1D03               	btfss	3,2
   636  0452  2C62               	goto	l3518
   637  0453  0844               	movf	_showBatTime,w
   638  0454  1D03               	btfss	3,2
   639  0455  2C62               	goto	l3518
   640                           
   641                           ;main.c: 177: {
   642                           ;main.c: 178: shiweiNum = geweiNum = 0;
   643  0456  0824               	movf	_overWorkTime,w
   644  0457  0425               	iorwf	_overWorkTime+1,w
   645  0458  1D03               	btfss	3,2
   646  0459  2C62               	goto	l3518
   647                           
   648                           ;main.c: 179: if(++sleepTime >= 200)
   649  045A  30C8               	movlw	200
   650  045B  0ABA               	incf	_sleepTime,f
   651  045C  023A               	subwf	_sleepTime,w
   652  045D  1C03               	skipc
   653  045E  2C2B               	goto	l691
   654                           
   655                           ;main.c: 180: {
   656                           ;main.c: 181: sleepTime = 0;
   657  045F  01BA               	clrf	_sleepTime
   658                           
   659                           ;main.c: 182: Sleep_Mode();
   660  0460  23E4               	fcall	_Sleep_Mode
   661  0461  2C2B               	goto	l691
   662  0462                     l3518:	
   663                           
   664                           ;main.c: 185: else
   665                           ;main.c: 186: {
   666                           ;main.c: 187: sleepTime = 0;
   667  0462  01BA               	clrf	_sleepTime
   668  0463  2C2B               	goto	l691
   669  0464                     __end_of_main:	
   670                           
   671                           	psect	text1
   672  0464                     __ptext1:	
   673 ;; *************** function _workCtr *****************
   674 ;; Defined at:
   675 ;;		line 611 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 100/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1
   689 ;;      Params:         0       0       0
   690 ;;      Locals:         0       0       0
   691 ;;      Temps:          0       0       0
   692 ;;      Totals:         0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    3
   696 ;; This function calls:
   697 ;;		_pwmInit
   698 ;;		_pwmStop
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           
   705                           ;psect for function _workCtr
   706  0464                     _workCtr:	
   707                           
   708                           ;main.c: 614: if(startTime > 0)
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   712  0464  1283               	bcf	3,5	;RP0=0, select bank0
   713  0465  0849               	movf	_startTime,w
   714  0466  1D03               	btfss	3,2
   715                           
   716                           ;main.c: 615: {
   717                           ;main.c: 616: startTime--;
   718  0467  03C9               	decf	_startTime,f
   719                           
   720                           ;main.c: 617: }
   721                           ;main.c: 618: if(workStep > 0)
   722  0468  0879               	movf	_workStep,w
   723  0469  1903               	btfsc	3,2
   724  046A  2C9E               	goto	l2826
   725                           
   726                           ;main.c: 619: {
   727                           ;main.c: 620: if(motorPwmFlag == 0)
   728  046B  0836               	movf	_motorPwmFlag,w
   729  046C  1D03               	btfss	3,2
   730  046D  2C6F               	goto	l2806
   731                           
   732                           ;main.c: 621: {
   733                           ;main.c: 622: pwmInit();
   734  046E  25A6               	fcall	_pwmInit
   735  046F                     l2806:	
   736                           
   737                           ;main.c: 624: }
   738                           ;main.c: 625: maxDuty = 36 + (workStep*2);
   739  046F  1003               	clrc
   740  0470  0D79               	rlf	_workStep,w
   741  0471  3E24               	addlw	36
   742  0472  00CC               	movwf	_maxDuty
   743                           
   744                           ;main.c: 626: if(overCount >= 5)
   745  0473  3005               	movlw	5
   746  0474  024B               	subwf	_overCount,w
   747  0475  1C03               	skipc
   748  0476  2C8C               	goto	l2818
   749                           
   750                           ;main.c: 627: {
   751                           ;main.c: 628: if(++count5s > 600)
   752  0477  0AA6               	incf	_count5s,f
   753  0478  1903               	skipnz
   754  0479  0AA7               	incf	_count5s+1,f
   755  047A  3002               	movlw	2
   756  047B  0227               	subwf	_count5s+1,w
   757  047C  3059               	movlw	89
   758  047D  1903               	skipnz
   759  047E  0226               	subwf	_count5s,w
   760  047F  1C03               	skipc
   761  0480  2C8E               	goto	l2820
   762  0481  302C               	movlw	44
   763                           
   764                           ;main.c: 629: {
   765                           ;main.c: 630: count5s = 0;
   766  0482  01A6               	clrf	_count5s
   767  0483  01A7               	clrf	_count5s+1
   768                           
   769                           ;main.c: 631: overWorkTime = 300;
   770  0484  00A4               	movwf	_overWorkTime
   771  0485  3001               	movlw	1
   772  0486  00A5               	movwf	_overWorkTime+1
   773                           
   774                           ;main.c: 633: prejrStep = jrStep;
   775  0487  0879               	movf	_workStep,w
   776  0488  00B8               	movwf	_preWorkStep
   777                           
   778                           ;main.c: 634: workStep = 0;
   779  0489  01F9               	clrf	_workStep
   780                           
   781                           ;main.c: 635: jrStep = 0;
   782  048A  01B9               	clrf	_jrStep
   783  048B  2C8E               	goto	l2820
   784  048C                     l2818:	
   785                           
   786                           ;main.c: 638: else
   787                           ;main.c: 639: {
   788                           ;main.c: 640: count5s = 0;
   789  048C  01A6               	clrf	_count5s
   790  048D  01A7               	clrf	_count5s+1
   791  048E                     l2820:	
   792                           
   793                           ;main.c: 641: }
   794                           ;main.c: 642: if(count1s == 0 && ++count900s >= 900)
   795  048E  0855               	movf	_count1s,w
   796  048F  1D03               	btfss	3,2
   797  0490  0008               	return
   798  0491  0AA0               	incf	_count900s,f
   799  0492  1903               	skipnz
   800  0493  0AA1               	incf	_count900s+1,f
   801  0494  3003               	movlw	3
   802  0495  0221               	subwf	_count900s+1,w
   803  0496  3084               	movlw	132
   804  0497  1903               	skipnz
   805  0498  0220               	subwf	_count900s,w
   806  0499  1C03               	skipc
   807  049A  0008               	return
   808                           
   809                           ;main.c: 643: {
   810                           ;main.c: 644: workStep = 0;
   811  049B  01F9               	clrf	_workStep
   812                           
   813                           ;main.c: 645: jrStep = 0;
   814  049C  01B9               	clrf	_jrStep
   815  049D  0008               	return
   816  049E                     l2826:	
   817                           
   818                           ;main.c: 648: else
   819                           ;main.c: 649: {
   820                           ;main.c: 650: pwmStop();
   821  049E  25B6               	fcall	_pwmStop
   822                           
   823                           ;main.c: 651: count900s = 0;
   824  049F  01A0               	clrf	_count900s
   825  04A0  01A1               	clrf	_count900s+1
   826  04A1  0008               	return
   827  04A2                     __end_of_workCtr:	
   828                           
   829                           	psect	text2
   830  05A6                     __ptext2:	
   831 ;; *************** function _pwmInit *****************
   832 ;; Defined at:
   833 ;;		line 990 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2
   842 ;; Tracked objects:
   843 ;;		On entry : 100/0
   844 ;;		On exit  : 100/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1
   847 ;;      Params:         0       0       0
   848 ;;      Locals:         0       0       0
   849 ;;      Temps:          0       0       0
   850 ;;      Totals:         0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    2
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		_workCtr
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           
   862                           ;psect for function _pwmInit
   863  05A6                     _pwmInit:	
   864                           
   865                           ;main.c: 992: motorPwmFlag = 1;
   866                           
   867                           ;incstack = 0
   868                           ; Regs used in _pwmInit: [wreg+status,2]
   869  05A6  01B6               	clrf	_motorPwmFlag
   870  05A7  0AB6               	incf	_motorPwmFlag,f
   871                           
   872                           ;main.c: 993: PWMCON1 = 0B00000000;
   873                           
   874                           ;main.c: 994: PWMTH = 0X00;
   875                           
   876                           ;main.c: 995: PWMTL = 100;
   877                           
   878                           ;main.c: 998: PWMD23H = 0;
   879  05A8  2585               	fcall	PL10	;call to abstracted procedure
   880                           
   881                           ;main.c: 999: PWMD3L = 43;
   882  05A9  302B               	movlw	43
   883  05AA  009C               	movwf	28	;volatile
   884                           
   885                           ;main.c: 1000: PWM23DT = 0X00;
   886  05AB  019D               	clrf	29	;volatile
   887                           
   888                           ;main.c: 1002: PWMCON0 = 0X68;
   889  05AC  3068               	movlw	104
   890                           
   891                           ;main.c: 1003: PWMCON2 =0X00;
   892  05AD  2D8C               	ljmp	PL14	;call to abstracted procedure
   893  05AE                     __end_of_pwmInit:	
   894                           
   895                           	psect	text3
   896  0387                     __ptext3:	
   897 ;; *************** function _ledCtr *****************
   898 ;; Defined at:
   899 ;;		line 270 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 100/0
   910 ;;		On exit  : 100/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1
   913 ;;      Params:         0       0       0
   914 ;;      Locals:         0       0       0
   915 ;;      Temps:          0       0       0
   916 ;;      Totals:         0       0       0
   917 ;;Total ram usage:        0 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    3
   920 ;; This function calls:
   921 ;;		___lbdiv
   922 ;;		___lbmod
   923 ;;		___lwmod
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _ledCtr
   931  0387                     _ledCtr:	
   932                           
   933                           ;main.c: 272: if(firstTime > 0)
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   937  0387  086D               	movf	_firstTime,w
   938  0388  1903               	btfsc	3,2
   939  0389  2B94               	goto	l3430
   940  038A  3006               	movlw	6
   941                           
   942                           ;main.c: 273: {
   943                           ;main.c: 274: firstTime--;
   944  038B  03ED               	decf	_firstTime,f
   945                           
   946                           ;main.c: 275: ledStep = 6;
   947  038C  00F8               	movwf	_ledStep
   948                           
   949                           ;main.c: 276: if(prePwStep < pwStep)
   950  038D  0847               	movf	_pwStep,w
   951  038E  0277               	subwf	_prePwStep,w
   952  038F  1803               	skipnc
   953  0390  0008               	return
   954                           
   955                           ;main.c: 277: {
   956                           ;main.c: 278: prePwStep = pwStep;
   957  0391  0847               	movf	_pwStep,w
   958  0392  00F7               	movwf	_prePwStep
   959  0393  0008               	return
   960  0394                     l3430:	
   961                           
   962                           ;main.c: 281: else if(overWorkTime > 0)
   963  0394  0824               	movf	_overWorkTime,w
   964  0395  0425               	iorwf	_overWorkTime+1,w
   965  0396  1903               	btfsc	3,2
   966  0397  2BB2               	goto	l3440
   967                           
   968                           ;main.c: 282: {
   969                           ;main.c: 283: overWorkTime--;
   970  0398  3001               	movlw	1
   971  0399  02A4               	subwf	_overWorkTime,f
   972  039A  3000               	movlw	0
   973  039B  1C03               	skipc
   974  039C  03A5               	decf	_overWorkTime+1,f
   975  039D  02A5               	subwf	_overWorkTime+1,f
   976                           
   977                           ;main.c: 284: if(overWorkTime % 60 < 30)
   978  039E  303C               	movlw	60
   979  039F  00F3               	movwf	___lwmod@divisor
   980  03A0  01F4               	clrf	___lwmod@divisor+1
   981  03A1  0825               	movf	_overWorkTime+1,w
   982  03A2  00F6               	movwf	___lwmod@dividend+1
   983  03A3  0824               	movf	_overWorkTime,w
   984  03A4  00F5               	movwf	___lwmod@dividend
   985  03A5  24CD               	fcall	___lwmod
   986  03A6  3000               	movlw	0
   987  03A7  0274               	subwf	?___lwmod+1,w
   988  03A8  301E               	movlw	30
   989  03A9  1903               	skipnz
   990  03AA  0273               	subwf	?___lwmod,w
   991  03AB  1803               	skipnc
   992  03AC  2BB0               	goto	l3438
   993                           
   994                           ;main.c: 285: {
   995                           ;main.c: 286: ledStep = preWorkStep;
   996  03AD  0838               	movf	_preWorkStep,w
   997  03AE  00F8               	movwf	_ledStep
   998                           
   999                           ;main.c: 287: }
  1000  03AF  0008               	return
  1001  03B0                     l3438:	
  1002                           
  1003                           ;main.c: 288: else
  1004                           ;main.c: 289: {
  1005                           ;main.c: 290: ledStep = 0;
  1006  03B0  01F8               	clrf	_ledStep
  1007  03B1  0008               	return
  1008  03B2                     l3440:	
  1009                           
  1010                           ;main.c: 293: else if(showBatTime > 0)
  1011  03B2  0844               	movf	_showBatTime,w
  1012  03B3  1903               	btfsc	3,2
  1013  03B4  2BCC               	goto	l3458
  1014  03B5  300E               	movlw	14
  1015                           
  1016                           ;main.c: 294: {
  1017                           ;main.c: 295: showBatTime--;
  1018  03B6  03C4               	decf	_showBatTime,f
  1019                           
  1020                           ;main.c: 296: if(prePwStep >= 14)
  1021  03B7  0277               	subwf	_prePwStep,w
  1022  03B8  1C03               	skipc
  1023  03B9  2BC0               	goto	l3448
  1024                           
  1025                           ;main.c: 297: {
  1026                           ;main.c: 298: ledStep = prePwStep/14;
  1027  03BA  300E               	movlw	14
  1028  03BB  00F3               	movwf	___lbdiv@divisor
  1029  03BC  0877               	movf	_prePwStep,w
  1030  03BD  2548               	fcall	___lbdiv
  1031  03BE  00F8               	movwf	_ledStep
  1032                           
  1033                           ;main.c: 299: }
  1034  03BF  0008               	return
  1035  03C0                     l3448:	
  1036                           
  1037                           ;main.c: 300: else if(prePwStep > 5)
  1038  03C0  3006               	movlw	6
  1039  03C1  0277               	subwf	_prePwStep,w
  1040  03C2  1C03               	skipc
  1041  03C3  2BC7               	goto	l3452
  1042  03C4                     l3450:	
  1043                           
  1044                           ;main.c: 301: {
  1045                           ;main.c: 302: ledStep = 1;
  1046  03C4  01F8               	clrf	_ledStep
  1047  03C5  0AF8               	incf	_ledStep,f
  1048                           
  1049                           ;main.c: 303: }
  1050  03C6  0008               	return
  1051  03C7                     l3452:	
  1052                           
  1053                           ;main.c: 304: else
  1054                           ;main.c: 305: {
  1055                           ;main.c: 306: if(count1s < 50)
  1056  03C7  3032               	movlw	50
  1057  03C8  0255               	subwf	_count1s,w
  1058  03C9  1C03               	btfss	3,0
  1059  03CA  2BC4               	goto	l3450
  1060  03CB  2BB0               	goto	l3438
  1061  03CC                     l3458:	
  1062                           ;main.c: 313: }
  1063                           ;main.c: 314: }
  1064                           ;main.c: 315: }
  1065                           
  1066                           
  1067                           ;main.c: 316: else if(workStep > 0)
  1068  03CC  0879               	movf	_workStep,w
  1069  03CD  1903               	btfsc	3,2
  1070  03CE  2BD2               	goto	l3462
  1071                           
  1072                           ;main.c: 317: {
  1073                           ;main.c: 318: ledStep = workStep;
  1074  03CF  0879               	movf	_workStep,w
  1075  03D0  00F8               	movwf	_ledStep
  1076                           
  1077                           ;main.c: 319: }
  1078  03D1  0008               	return
  1079  03D2                     l3462:	
  1080                           
  1081                           ;main.c: 320: else if(chrgFlag)
  1082  03D2  087A               	movf	_chrgFlag,w
  1083  03D3  1903               	btfsc	3,2
  1084  03D4  2BB0               	goto	l3438
  1085                           
  1086                           ;main.c: 321: {
  1087                           ;main.c: 322: if(count1s % 50 == 0)
  1088  03D5  3032               	movlw	50
  1089  03D6  00F3               	movwf	___lbmod@divisor
  1090  03D7  0855               	movf	_count1s,w
  1091  03D8  252C               	fcall	___lbmod
  1092  03D9  3A00               	xorlw	0
  1093  03DA  1D03               	skipz
  1094  03DB  0008               	return
  1095                           
  1096                           ;main.c: 323: {
  1097                           ;main.c: 324: if(++ledStep > 6)
  1098  03DC  3007               	movlw	7
  1099  03DD  0AF8               	incf	_ledStep,f
  1100  03DE  0278               	subwf	_ledStep,w
  1101  03DF  1C03               	skipc
  1102  03E0  0008               	return
  1103                           
  1104                           ;main.c: 325: {
  1105                           ;main.c: 326: ledStep = lockLedStep;
  1106  03E1  0845               	movf	_lockLedStep,w
  1107  03E2  00F8               	movwf	_ledStep
  1108  03E3  0008               	return
  1109  03E4                     __end_of_ledCtr:	
  1110                           
  1111                           	psect	text4
  1112  04CD                     __ptext4:	
  1113 ;; *************** function ___lwmod *****************
  1114 ;; Defined at:
  1115 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  divisor         2    3[COMMON] unsigned int 
  1118 ;;  dividend        2    5[COMMON] unsigned int 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  counter         1    0[BANK0 ] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  2    3[COMMON] unsigned int 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0
  1125 ;; Tracked objects:
  1126 ;;		On entry : 100/0
  1127 ;;		On exit  : 100/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1
  1130 ;;      Params:         4       0       0
  1131 ;;      Locals:         0       1       0
  1132 ;;      Temps:          0       0       0
  1133 ;;      Totals:         4       1       0
  1134 ;;Total ram usage:        5 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    2
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_ledCtr
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function ___lwmod
  1146  04CD                     ___lwmod:	
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1150  04CD  0873               	movf	___lwmod@divisor,w
  1151  04CE  0474               	iorwf	___lwmod@divisor+1,w
  1152  04CF  1903               	btfsc	3,2
  1153  04D0  2CEC               	goto	l3124
  1154  04D1  01D8               	clrf	___lwmod@counter
  1155  04D2                     L1:	
  1156  04D2  0AD8               	incf	___lwmod@counter,f
  1157  04D3  1BF4               	btfsc	___lwmod@divisor+1,7
  1158  04D4  2CD9               	goto	l3116
  1159  04D5  1003               	clrc
  1160  04D6  0DF3               	rlf	___lwmod@divisor,f
  1161  04D7  0DF4               	rlf	___lwmod@divisor+1,f
  1162  04D8  2CD2               	goto	L1
  1163  04D9                     l3116:	
  1164  04D9  0874               	movf	___lwmod@divisor+1,w
  1165  04DA  0276               	subwf	___lwmod@dividend+1,w
  1166  04DB  1D03               	skipz
  1167  04DC  2CDF               	goto	u3155
  1168  04DD  0873               	movf	___lwmod@divisor,w
  1169  04DE  0275               	subwf	___lwmod@dividend,w
  1170  04DF                     u3155:	
  1171  04DF  1C03               	skipc
  1172  04E0  2CE8               	goto	L2
  1173  04E1  0873               	movf	___lwmod@divisor,w
  1174  04E2  02F5               	subwf	___lwmod@dividend,f
  1175  04E3  0874               	movf	___lwmod@divisor+1,w
  1176  04E4  1C03               	skipc
  1177  04E5  03F6               	decf	___lwmod@dividend+1,f
  1178  04E6  02F6               	subwf	___lwmod@dividend+1,f
  1179  04E7  1003               	clrc
  1180  04E8                     L2:	
  1181  04E8  0CF4               	rrf	___lwmod@divisor+1,f
  1182  04E9  0CF3               	rrf	___lwmod@divisor,f
  1183  04EA  0BD8               	decfsz	___lwmod@counter,f
  1184  04EB  2CD9               	goto	l3116
  1185  04EC                     l3124:	
  1186  04EC  0876               	movf	___lwmod@dividend+1,w
  1187  04ED  00F4               	movwf	?___lwmod+1
  1188  04EE  0875               	movf	___lwmod@dividend,w
  1189  04EF  00F3               	movwf	?___lwmod
  1190  04F0  0008               	return
  1191  04F1                     __end_of___lwmod:	
  1192                           
  1193                           	psect	text5
  1194  052C                     __ptext5:	
  1195 ;; *************** function ___lbmod *****************
  1196 ;; Defined at:
  1197 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  dividend        1    wreg     unsigned char 
  1200 ;;  divisor         1    3[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  dividend        1    0[BANK0 ] unsigned char 
  1203 ;;  rem             1    2[BANK0 ] unsigned char 
  1204 ;;  counter         1    1[BANK0 ] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      unsigned char 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 100/0
  1211 ;;		On exit  : 100/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1
  1214 ;;      Params:         1       0       0
  1215 ;;      Locals:         0       3       0
  1216 ;;      Temps:          1       0       0
  1217 ;;      Totals:         2       3       0
  1218 ;;Total ram usage:        5 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_ledCtr
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function ___lbmod
  1230  052C                     ___lbmod:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1234                           ;___lbmod@dividend stored from wreg
  1235  052C  00D8               	movwf	___lbmod@dividend
  1236  052D  3008               	movlw	8
  1237  052E  00D9               	movwf	___lbmod@counter
  1238  052F  01DA               	clrf	___lbmod@rem
  1239  0530                     l3094:	
  1240  0530  0858               	movf	___lbmod@dividend,w
  1241  0531  00F4               	movwf	??___lbmod
  1242  0532  3007               	movlw	7
  1243  0533  1003               	clrc
  1244  0534                     L3:	
  1245  0534  0CF4               	rrf	??___lbmod,f
  1246  0535  3EFF               	addlw	-1
  1247  0536  1003               	clrc
  1248  0537  1D03               	skipz
  1249  0538  2D34               	goto	L3
  1250  0539  0D5A               	rlf	___lbmod@rem,w
  1251  053A  0474               	iorwf	??___lbmod,w
  1252  053B  00DA               	movwf	___lbmod@rem
  1253  053C  1003               	clrc
  1254  053D  0DD8               	rlf	___lbmod@dividend,f
  1255  053E  0873               	movf	___lbmod@divisor,w
  1256  053F  025A               	subwf	___lbmod@rem,w
  1257  0540  1C03               	skipc
  1258  0541  2D44               	goto	l3102
  1259  0542  0873               	movf	___lbmod@divisor,w
  1260  0543  02DA               	subwf	___lbmod@rem,f
  1261  0544                     l3102:	
  1262  0544  0BD9               	decfsz	___lbmod@counter,f
  1263  0545  2D30               	goto	l3094
  1264  0546  085A               	movf	___lbmod@rem,w
  1265  0547  0008               	return
  1266  0548                     __end_of___lbmod:	
  1267                           
  1268                           	psect	text6
  1269  04A2                     __ptext6:	
  1270 ;; *************** function _keyCtr *****************
  1271 ;; Defined at:
  1272 ;;		line 573 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  kclick          1    4[COMMON] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 100/0
  1283 ;;		On exit  : 100/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1
  1286 ;;      Params:         0       0       0
  1287 ;;      Locals:         1       0       0
  1288 ;;      Temps:          0       0       0
  1289 ;;      Totals:         1       0       0
  1290 ;;Total ram usage:        1 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    3
  1293 ;; This function calls:
  1294 ;;		_keyRead
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _keyCtr
  1302  04A2                     _keyCtr:	
  1303                           
  1304                           ;main.c: 575: char kclick = keyRead(0x04 & (~PORTB));
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1308  04A2  0906               	comf	6,w	;volatile
  1309  04A3  3904               	andlw	4
  1310  04A4  24F1               	fcall	_keyRead
  1311  04A5  00F4               	movwf	keyCtr@kclick
  1312                           
  1313                           ;main.c: 576: if(kclick == 1)
  1314  04A6  0B74               	decfsz	keyCtr@kclick,w
  1315  04A7  2CBC               	goto	l2784
  1316                           
  1317                           ;main.c: 577: {
  1318                           ;main.c: 578: if(workStep > 0)
  1319  04A8  0879               	movf	_workStep,w
  1320  04A9  1903               	btfsc	3,2
  1321  04AA  2CB3               	goto	l2776
  1322                           
  1323                           ;main.c: 579: {
  1324                           ;main.c: 580: if(++workStep > 6)
  1325  04AB  3007               	movlw	7
  1326  04AC  0AF9               	incf	_workStep,f
  1327  04AD  0279               	subwf	_workStep,w
  1328  04AE  1C03               	skipc
  1329  04AF  0008               	return
  1330                           
  1331                           ;main.c: 581: {
  1332                           ;main.c: 582: workStep = 1;
  1333  04B0  01F9               	clrf	_workStep
  1334  04B1  0AF9               	incf	_workStep,f
  1335  04B2  0008               	return
  1336  04B3                     l2776:	
  1337                           
  1338                           ;main.c: 585: else if(showBatTime > 0)
  1339  04B3  0844               	movf	_showBatTime,w
  1340  04B4  1903               	btfsc	3,2
  1341  04B5  2CB8               	goto	l2780
  1342                           
  1343                           ;main.c: 586: {
  1344                           ;main.c: 587: showBatTime = 0;
  1345  04B6  01C4               	clrf	_showBatTime
  1346                           
  1347                           ;main.c: 588: }
  1348  04B7  0008               	return
  1349  04B8                     l2780:	
  1350                           
  1351                           ;main.c: 589: else
  1352                           ;main.c: 590: {
  1353                           ;main.c: 591: showBatTime = 200;
  1354  04B8  30C8               	movlw	200
  1355  04B9  00C4               	movwf	_showBatTime
  1356                           
  1357                           ;main.c: 592: count1s = 0;
  1358  04BA  01D5               	clrf	_count1s
  1359  04BB  0008               	return
  1360  04BC                     l2784:	
  1361                           
  1362                           ;main.c: 595: else if(kclick == 2)
  1363  04BC  3002               	movlw	2
  1364  04BD  0674               	xorwf	keyCtr@kclick,w
  1365  04BE  1D03               	btfss	3,2
  1366  04BF  0008               	return
  1367                           
  1368                           ;main.c: 596: {
  1369                           ;main.c: 597: if(workStep > 0)
  1370  04C0  0879               	movf	_workStep,w
  1371  04C1  1903               	btfsc	3,2
  1372  04C2  2CC5               	goto	l816
  1373                           
  1374                           ;main.c: 598: {
  1375                           ;main.c: 599: workStep = 0;
  1376  04C3  01F9               	clrf	_workStep
  1377                           
  1378                           ;main.c: 600: }
  1379  04C4  0008               	return
  1380  04C5                     l816:	
  1381  04C5  301E               	movlw	30
  1382                           
  1383                           ;main.c: 601: else
  1384                           ;main.c: 602: {
  1385                           ;main.c: 603: workStep = 1;
  1386  04C6  01F9               	clrf	_workStep
  1387  04C7  0AF9               	incf	_workStep,f
  1388                           
  1389                           ;main.c: 604: startTime = 30;
  1390  04C8  00C9               	movwf	_startTime
  1391                           
  1392                           ;main.c: 605: showBatTime = 0;
  1393  04C9  01C4               	clrf	_showBatTime
  1394                           
  1395                           ;main.c: 606: overWorkTime = 0;
  1396  04CA  01A4               	clrf	_overWorkTime
  1397  04CB  01A5               	clrf	_overWorkTime+1
  1398  04CC  0008               	return
  1399  04CD                     __end_of_keyCtr:	
  1400                           
  1401                           	psect	text7
  1402  04F1                     __ptext7:	
  1403 ;; *************** function _keyRead *****************
  1404 ;; Defined at:
  1405 ;;		line 505 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  keyStatus       1    wreg     unsigned char 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  keyStatus       1    3[COMMON] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 100/0
  1416 ;;		On exit  : 100/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1
  1419 ;;      Params:         0       0       0
  1420 ;;      Locals:         1       0       0
  1421 ;;      Temps:          0       0       0
  1422 ;;      Totals:         1       0       0
  1423 ;;Total ram usage:        1 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    2
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_keyCtr
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _keyRead
  1435  04F1                     _keyRead:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1439                           ;keyRead@keyStatus stored from wreg
  1440  04F1  00F3               	movwf	keyRead@keyStatus
  1441                           
  1442                           ;main.c: 507: if(keyStatus)
  1443  04F2  0873               	movf	keyRead@keyStatus,w
  1444  04F3  3064               	movlw	100
  1445  04F4  1903               	btfsc	3,2
  1446  04F5  2D03               	goto	L5
  1447                           
  1448                           ;main.c: 508: {
  1449                           ;main.c: 509: keyCount++;
  1450  04F6  0ACE               	incf	_keyCount,f
  1451                           
  1452                           ;main.c: 510: if(keyCount >= 100)
  1453  04F7  024E               	subwf	_keyCount,w
  1454  04F8  1C03               	skipc
  1455  04F9  3400               	retlw	0
  1456                           
  1457                           ;main.c: 511: {
  1458                           ;main.c: 512: keyCount = 100;
  1459  04FA  3064               	movlw	100
  1460  04FB  00CE               	movwf	_keyCount
  1461                           
  1462                           ;main.c: 513: if(!longPressFlag)
  1463  04FC  084D               	movf	_longPressFlag,w
  1464  04FD  1D03               	btfss	3,2
  1465  04FE  3400               	retlw	0
  1466  04FF  3002               	movlw	2
  1467                           
  1468                           ;main.c: 514: {
  1469                           ;main.c: 515: longPressFlag = 1;
  1470  0500  01CD               	clrf	_longPressFlag
  1471  0501  0ACD               	incf	_longPressFlag,f
  1472                           
  1473                           ;main.c: 516: return 2;
  1474  0502  0008               	return
  1475  0503                     L5:	
  1476                           ;main.c: 520: else
  1477                           ;main.c: 521: {
  1478                           ;main.c: 522: if(keyCount >= 100)
  1479                           
  1480  0503  024E               	subwf	_keyCount,w
  1481  0504  1C03               	skipc
  1482  0505  2D09               	goto	l2252
  1483                           
  1484                           ;main.c: 523: {
  1485                           ;main.c: 524: keyCount = 0;
  1486  0506  01CE               	clrf	_keyCount
  1487                           
  1488                           ;main.c: 525: longPressFlag = 0;
  1489  0507  01CD               	clrf	_longPressFlag
  1490                           
  1491                           ;main.c: 526: return 0;
  1492  0508  3400               	retlw	0
  1493  0509                     l2252:	
  1494                           
  1495                           ;main.c: 528: else if(keyCount >= 6)
  1496  0509  3006               	movlw	6
  1497  050A  024E               	subwf	_keyCount,w
  1498                           
  1499                           ;main.c: 529: {
  1500                           ;main.c: 530: keyCount = 0;
  1501  050B  01CE               	clrf	_keyCount
  1502  050C  1803               	btfsc	3,0
  1503                           
  1504                           ;main.c: 531: return 1;
  1505  050D  3401               	retlw	1
  1506  050E  3400               	retlw	0
  1507  050F                     __end_of_keyRead:	
  1508                           ;main.c: 532: }
  1509                           ;main.c: 533: keyCount = 0;
  1510                           
  1511                           
  1512                           	psect	text8
  1513  0018                     __ptext8:	
  1514 ;; *************** function _chrgCtr *****************
  1515 ;; Defined at:
  1516 ;;		line 338 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 100/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1
  1530 ;;      Params:         0       0       0
  1531 ;;      Locals:         0       0       0
  1532 ;;      Temps:          0       2       0
  1533 ;;      Totals:         0       2       0
  1534 ;;Total ram usage:        2 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    3
  1537 ;; This function calls:
  1538 ;;		___lbdiv
  1539 ;;		_chrgPwmInit
  1540 ;;		_chrgPwmStop
  1541 ;;		_pwmStop
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function _chrgCtr
  1549  0018                     _chrgCtr:	
  1550                           
  1551                           ;main.c: 340: if(PORTA & 0x02)
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1555  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1556  0019  1C86               	btfss	6,1	;volatile
  1557  001A  28F7               	goto	l747
  1558                           
  1559                           ;main.c: 341: {
  1560                           ;main.c: 342: if(chrgFlag == 0)
  1561  001B  087A               	movf	_chrgFlag,w
  1562  001C  1D03               	btfss	3,2
  1563  001D  2823               	goto	l3240
  1564                           
  1565                           ;main.c: 343: {
  1566                           ;main.c: 344: chrgFlag = 1;
  1567  001E  01FA               	clrf	_chrgFlag
  1568  001F  0AFA               	incf	_chrgFlag,f
  1569                           
  1570                           ;main.c: 345: chrgMaxDuty = 0;
  1571  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1572  0021  01BD               	clrf	_chrgMaxDuty
  1573                           
  1574                           ;main.c: 346: chrgPwmStop();
  1575  0022  25BD               	fcall	_chrgPwmStop
  1576  0023                     l3240:	
  1577                           
  1578                           ;main.c: 347: }
  1579                           ;main.c: 348: RB1 = 1;
  1580  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0024  1486               	bsf	6,1	;volatile
  1582                           
  1583                           ;main.c: 349: jrStep = 0;
  1584  0025  01B9               	clrf	_jrStep
  1585                           
  1586                           ;main.c: 350: workStep = 0;
  1587  0026  01F9               	clrf	_workStep
  1588                           
  1589                           ;main.c: 351: pwmStop();
  1590  0027  25B6               	fcall	_pwmStop
  1591                           
  1592                           ;main.c: 352: lowBatFlag = 0;
  1593  0028  01BB               	clrf	_lowBatFlag
  1594                           
  1595                           ;main.c: 353: if(prePwStep < pwStep)
  1596  0029  0847               	movf	_pwStep,w
  1597  002A  0277               	subwf	_prePwStep,w
  1598  002B  1803               	skipnc
  1599  002C  2836               	goto	l3256
  1600                           
  1601                           ;main.c: 354: {
  1602                           ;main.c: 355: if(++count50s > 3000)
  1603  002D  2117               	fcall	PL8	;call to abstracted procedure
  1604  002E  1903               	skipnz
  1605  002F  022A               	subwf	_count50s,w
  1606  0030  1C03               	skipc
  1607  0031  2838               	goto	l3258
  1608                           
  1609                           ;main.c: 356: {
  1610                           ;main.c: 357: count50s = 0;
  1611  0032  01AA               	clrf	_count50s
  1612  0033  01AB               	clrf	_count50s+1
  1613                           
  1614                           ;main.c: 358: prePwStep++;
  1615  0034  0AF7               	incf	_prePwStep,f
  1616  0035  2838               	goto	l3258
  1617  0036                     l3256:	
  1618                           
  1619                           ;main.c: 361: else
  1620                           ;main.c: 362: {
  1621                           ;main.c: 363: count50s = 0;
  1622  0036  01AA               	clrf	_count50s
  1623  0037  01AB               	clrf	_count50s+1
  1624  0038                     l3258:	
  1625                           
  1626                           ;main.c: 364: }
  1627                           ;main.c: 365: if(protectFlag)
  1628  0038  0851               	movf	_protectFlag,w
  1629  0039  1903               	btfsc	3,2
  1630  003A  2859               	goto	l3280
  1631                           
  1632                           ;main.c: 366: {
  1633                           ;main.c: 367: chrgPwmStop();
  1634  003B  25BD               	fcall	_chrgPwmStop
  1635                           
  1636                           ;main.c: 368: if(prePwStep < 99 && protectFlag == 1)
  1637  003C  3063               	movlw	99
  1638  003D  0277               	subwf	_prePwStep,w
  1639  003E  1803               	skipnc
  1640  003F  2857               	goto	l3276
  1641  0040  0B51               	decfsz	_protectFlag,w
  1642  0041  2857               	goto	l3276
  1643                           
  1644                           ;main.c: 369: {
  1645                           ;main.c: 370: if(++reChrgCount > 250)
  1646  0042  30FB               	movlw	251
  1647  0043  0AC6               	incf	_reChrgCount,f
  1648  0044  0246               	subwf	_reChrgCount,w
  1649  0045  1C03               	skipc
  1650  0046  0008               	return
  1651  0047  300F               	movlw	15
  1652                           
  1653                           ;main.c: 371: {
  1654                           ;main.c: 372: reChrgCount = 0;
  1655  0048  01C6               	clrf	_reChrgCount
  1656                           
  1657                           ;main.c: 373: chrgFullFlag = 0;
  1658  0049  01D3               	clrf	_chrgFullFlag
  1659                           
  1660                           ;main.c: 374: protectFlag = 0;
  1661  004A  01D1               	clrf	_protectFlag
  1662                           
  1663                           ;main.c: 375: if(prePwStep > 14)
  1664  004B  0277               	subwf	_prePwStep,w
  1665  004C  1C03               	skipc
  1666  004D  2855               	goto	l3274
  1667                           
  1668                           ;main.c: 376: {
  1669                           ;main.c: 377: lockLedStep = (prePwStep/14) - 1;
  1670  004E  300E               	movlw	14
  1671  004F  00F3               	movwf	___lbdiv@divisor
  1672  0050  0877               	movf	_prePwStep,w
  1673  0051  2548               	fcall	___lbdiv
  1674  0052  3EFF               	addlw	255
  1675  0053  00C5               	movwf	_lockLedStep
  1676                           
  1677                           ;main.c: 378: }
  1678  0054  0008               	return
  1679  0055                     l3274:	
  1680                           
  1681                           ;main.c: 379: else
  1682                           ;main.c: 380: {
  1683                           ;main.c: 381: lockLedStep = 0;
  1684  0055  01C5               	clrf	_lockLedStep
  1685  0056  0008               	return
  1686  0057                     l3276:	
  1687                           
  1688                           ;main.c: 385: else
  1689                           ;main.c: 386: {
  1690                           ;main.c: 387: reChrgCount = 0;
  1691  0057  01C6               	clrf	_reChrgCount
  1692  0058  0008               	return
  1693  0059                     l3280:	
  1694                           
  1695                           ;main.c: 390: }
  1696                           ;main.c: 391: if(batADValue < 1118)
  1697  0059  3004               	movlw	4
  1698  005A  022D               	subwf	_batADValue+1,w
  1699  005B  305E               	movlw	94
  1700  005C  1903               	skipnz
  1701  005D  022C               	subwf	_batADValue,w
  1702  005E  1803               	skipnc
  1703  005F  2863               	goto	l3286
  1704  0060  3008               	movlw	8
  1705                           
  1706                           ;main.c: 392: {
  1707                           ;main.c: 393: chrgMode = 0;
  1708  0061  01C3               	clrf	_chrgMode
  1709                           
  1710                           ;main.c: 394: chrgMaxAD = 8;
  1711  0062  287C               	goto	L6
  1712  0063                     l3286:	
  1713                           ;main.c: 395: }
  1714                           
  1715                           
  1716                           ;main.c: 396: else if(batADValue < 1530)
  1717  0063  3005               	movlw	5
  1718  0064  022D               	subwf	_batADValue+1,w
  1719  0065  30FA               	movlw	250
  1720  0066  1903               	skipnz
  1721  0067  022C               	subwf	_batADValue,w
  1722  0068  1803               	skipnc
  1723  0069  2870               	goto	l3294
  1724  006A  301D               	movlw	29
  1725                           
  1726                           ;main.c: 397: {
  1727                           ;main.c: 398: chrgMode = 1;
  1728  006B  01C3               	clrf	_chrgMode
  1729  006C  0AC3               	incf	_chrgMode,f
  1730                           
  1731                           ;main.c: 399: chrgMaxAD = 29;
  1732  006D  00C2               	movwf	_chrgMaxAD
  1733                           
  1734                           ;main.c: 400: lockCount = 0;
  1735  006E  01C1               	clrf	_lockCount
  1736                           
  1737                           ;main.c: 401: }
  1738  006F  287D               	goto	l3304
  1739  0070                     l3294:	
  1740                           
  1741                           ;main.c: 402: else if(count1s == 0)
  1742  0070  0855               	movf	_count1s,w
  1743  0071  1D03               	btfss	3,2
  1744  0072  287D               	goto	l3304
  1745                           
  1746                           ;main.c: 403: {
  1747                           ;main.c: 404: if(++lockCount > 200)
  1748  0073  30C9               	movlw	201
  1749  0074  0AC1               	incf	_lockCount,f
  1750  0075  0241               	subwf	_lockCount,w
  1751  0076  1C03               	skipc
  1752  0077  287B               	goto	l3302
  1753  0078  3002               	movlw	2
  1754                           
  1755                           ;main.c: 405: {
  1756                           ;main.c: 406: lockCount = 0;
  1757  0079  01C1               	clrf	_lockCount
  1758                           
  1759                           ;main.c: 407: chrgMode = 2;
  1760  007A  00C3               	movwf	_chrgMode
  1761  007B                     l3302:	
  1762                           
  1763                           ;main.c: 408: }
  1764                           ;main.c: 410: chrgMaxAD = 60;
  1765  007B  303C               	movlw	60
  1766  007C                     L6:	
  1767  007C  00C2               	movwf	_chrgMaxAD
  1768  007D                     l3304:	
  1769                           
  1770                           ;main.c: 411: }
  1771                           ;main.c: 412: if(chrgMode == 2 && outADValue < 5)
  1772  007D  3002               	movlw	2
  1773  007E  0643               	xorwf	_chrgMode,w
  1774  007F  1D03               	btfss	3,2
  1775  0080  2897               	goto	l3314
  1776  0081  3000               	movlw	0
  1777  0082  022F               	subwf	_outADValue+1,w
  1778  0083  3005               	movlw	5
  1779  0084  1903               	skipnz
  1780  0085  022E               	subwf	_outADValue,w
  1781  0086  1803               	skipnc
  1782  0087  2897               	goto	l3314
  1783                           
  1784                           ;main.c: 413: {
  1785                           ;main.c: 414: if(++fullCount >= 200)
  1786  0088  0AA8               	incf	_fullCount,f
  1787  0089  1903               	skipnz
  1788  008A  0AA9               	incf	_fullCount+1,f
  1789  008B  3000               	movlw	0
  1790  008C  0229               	subwf	_fullCount+1,w
  1791  008D  30C8               	movlw	200
  1792  008E  1903               	skipnz
  1793  008F  0228               	subwf	_fullCount,w
  1794  0090  1C03               	skipc
  1795  0091  2899               	goto	l3316
  1796                           
  1797                           ;main.c: 415: {
  1798                           ;main.c: 416: fullCount = 0;
  1799  0092  01A8               	clrf	_fullCount
  1800  0093  01A9               	clrf	_fullCount+1
  1801                           
  1802                           ;main.c: 417: chrgFullFlag = 1;
  1803  0094  01D3               	clrf	_chrgFullFlag
  1804  0095  0AD3               	incf	_chrgFullFlag,f
  1805  0096  2899               	goto	l3316
  1806  0097                     l3314:	
  1807                           
  1808                           ;main.c: 420: else
  1809                           ;main.c: 421: {
  1810                           ;main.c: 422: fullCount = 0;
  1811  0097  01A8               	clrf	_fullCount
  1812  0098  01A9               	clrf	_fullCount+1
  1813  0099                     l3316:	
  1814                           
  1815                           ;main.c: 423: }
  1816                           ;main.c: 424: if(chrgFullFlag)
  1817  0099  0853               	movf	_chrgFullFlag,w
  1818  009A  1903               	btfsc	3,2
  1819  009B  289F               	goto	l3322
  1820                           
  1821                           ;main.c: 425: {
  1822                           ;main.c: 426: lockLedStep = 6;
  1823  009C  3006               	movlw	6
  1824  009D  00C5               	movwf	_lockLedStep
  1825                           
  1826                           ;main.c: 427: chrgPwmStop();
  1827  009E  2DBD               	ljmp	l2198
  1828  009F                     l3322:	
  1829                           ;main.c: 428: }
  1830                           
  1831                           
  1832                           ;main.c: 429: else
  1833                           ;main.c: 430: {
  1834                           ;main.c: 431: if(prePwStep < 15)
  1835  009F  300F               	movlw	15
  1836  00A0  0277               	subwf	_prePwStep,w
  1837  00A1  1803               	skipnc
  1838  00A2  28A5               	goto	l3326
  1839                           
  1840                           ;main.c: 432: {
  1841                           ;main.c: 433: lockLedStep = 0;
  1842  00A3  01C5               	clrf	_lockLedStep
  1843                           
  1844                           ;main.c: 434: }
  1845  00A4  28AB               	goto	l3328
  1846  00A5                     l3326:	
  1847                           
  1848                           ;main.c: 435: else
  1849                           ;main.c: 436: {
  1850                           ;main.c: 437: lockLedStep = (prePwStep/14) - 1;
  1851  00A5  300E               	movlw	14
  1852  00A6  00F3               	movwf	___lbdiv@divisor
  1853  00A7  0877               	movf	_prePwStep,w
  1854  00A8  2548               	fcall	___lbdiv
  1855  00A9  3EFF               	addlw	255
  1856  00AA  00C5               	movwf	_lockLedStep
  1857  00AB                     l3328:	
  1858                           
  1859                           ;main.c: 438: }
  1860                           ;main.c: 439: if(batADValue > 1550 || outADValue > chrgMaxAD)
  1861  00AB  3006               	movlw	6
  1862  00AC  022D               	subwf	_batADValue+1,w
  1863  00AD  300F               	movlw	15
  1864  00AE  1903               	skipnz
  1865  00AF  022C               	subwf	_batADValue,w
  1866  00B0  1803               	skipnc
  1867  00B1  28BD               	goto	l3332
  1868  00B2  0842               	movf	_chrgMaxAD,w
  1869  00B3  00D8               	movwf	??_chrgCtr
  1870  00B4  01D9               	clrf	??_chrgCtr+1
  1871  00B5  082F               	movf	_outADValue+1,w
  1872  00B6  0259               	subwf	??_chrgCtr+1,w
  1873  00B7  1D03               	skipz
  1874  00B8  28BB               	goto	u3595
  1875  00B9  082E               	movf	_outADValue,w
  1876  00BA  0258               	subwf	??_chrgCtr,w
  1877  00BB                     u3595:	
  1878  00BB  1803               	skipnc
  1879  00BC  28CC               	goto	l3344
  1880  00BD                     l3332:	
  1881                           
  1882                           ;main.c: 440: {
  1883                           ;main.c: 441: if(++subTime > chrgWaitTime)
  1884  00BD  0ABF               	incf	_subTime,f
  1885  00BE  083F               	movf	_subTime,w
  1886  00BF  023E               	subwf	_chrgWaitTime,w
  1887  00C0  1803               	skipnc
  1888  00C1  28CA               	goto	l3342
  1889                           
  1890                           ;main.c: 442: {
  1891                           ;main.c: 443: if(chrgMaxDuty > 1)
  1892  00C2  3002               	movlw	2
  1893  00C3  023D               	subwf	_chrgMaxDuty,w
  1894  00C4  1C03               	skipc
  1895  00C5  28C7               	goto	l3338
  1896                           
  1897                           ;main.c: 444: {
  1898                           ;main.c: 445: chrgMaxDuty--;
  1899  00C6  03BD               	decf	_chrgMaxDuty,f
  1900  00C7                     l3338:	
  1901  00C7  3032               	movlw	50
  1902                           
  1903                           ;main.c: 446: }
  1904                           ;main.c: 447: subTime = 0;
  1905  00C8  01BF               	clrf	_subTime
  1906                           
  1907                           ;main.c: 448: chrgWaitTime = 50;
  1908  00C9  00BE               	movwf	_chrgWaitTime
  1909  00CA                     l3342:	
  1910                           
  1911                           ;main.c: 449: }
  1912                           ;main.c: 450: addTime = 0;
  1913  00CA  01C0               	clrf	_addTime
  1914                           
  1915                           ;main.c: 451: }
  1916  00CB  28EC               	goto	l3358
  1917  00CC                     l3344:	
  1918                           
  1919                           ;main.c: 452: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1920  00CC  3006               	movlw	6
  1921  00CD  022D               	subwf	_batADValue+1,w
  1922  00CE  300E               	movlw	14
  1923  00CF  1903               	skipnz
  1924  00D0  022C               	subwf	_batADValue,w
  1925  00D1  1803               	skipnc
  1926  00D2  28EC               	goto	l3358
  1927  00D3  0842               	movf	_chrgMaxAD,w
  1928  00D4  3EFC               	addlw	252
  1929  00D5  00D8               	movwf	??_chrgCtr
  1930  00D6  30FF               	movlw	255
  1931  00D7  1803               	skipnc
  1932  00D8  3000               	movlw	0
  1933  00D9  00D9               	movwf	??_chrgCtr+1
  1934  00DA  022F               	subwf	_outADValue+1,w
  1935  00DB  1D03               	skipz
  1936  00DC  28DF               	goto	u3635
  1937  00DD  0858               	movf	??_chrgCtr,w
  1938  00DE  022E               	subwf	_outADValue,w
  1939  00DF                     u3635:	
  1940  00DF  1803               	skipnc
  1941  00E0  28EC               	goto	l3358
  1942                           
  1943                           ;main.c: 453: {
  1944                           ;main.c: 454: if(++addTime > chrgWaitTime)
  1945  00E1  0AC0               	incf	_addTime,f
  1946  00E2  0840               	movf	_addTime,w
  1947  00E3  023E               	subwf	_chrgWaitTime,w
  1948  00E4  1803               	skipnc
  1949  00E5  28EB               	goto	l3356
  1950  00E6  304B               	movlw	75
  1951                           
  1952                           ;main.c: 455: {
  1953                           ;main.c: 456: addTime = 0;
  1954  00E7  01C0               	clrf	_addTime
  1955                           
  1956                           ;main.c: 457: if(chrgMaxDuty < 75)
  1957  00E8  023D               	subwf	_chrgMaxDuty,w
  1958  00E9  1C03               	btfss	3,0
  1959                           
  1960                           ;main.c: 458: {
  1961                           ;main.c: 459: chrgMaxDuty++;
  1962  00EA  0ABD               	incf	_chrgMaxDuty,f
  1963  00EB                     l3356:	
  1964                           
  1965                           ;main.c: 460: }
  1966                           ;main.c: 461: }
  1967                           ;main.c: 462: subTime = 0;
  1968  00EB  01BF               	clrf	_subTime
  1969  00EC                     l3358:	
  1970                           
  1971                           ;main.c: 463: }
  1972                           ;main.c: 466: if(chrgPwmFlag == 0)
  1973  00EC  0837               	movf	_chrgPwmFlag,w
  1974  00ED  1D03               	btfss	3,2
  1975  00EE  28F0               	goto	l3362
  1976                           
  1977                           ;main.c: 467: {
  1978                           ;main.c: 468: chrgPwmInit();
  1979  00EF  257D               	fcall	_chrgPwmInit
  1980  00F0                     l3362:	
  1981                           
  1982                           ;main.c: 469: }
  1983                           ;main.c: 470: PWMD23H = 0X00;
  1984  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1985  00F1  019E               	clrf	30	;volatile
  1986                           
  1987                           ;main.c: 471: PWMD2L = chrgMaxDuty;
  1988  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1989  00F3  083D               	movf	_chrgMaxDuty,w
  1990  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  1991  00F5  009B               	movwf	27	;volatile
  1992  00F6  0008               	return
  1993  00F7                     l747:	
  1994                           
  1995                           ;main.c: 477: startChrgTime = 0;
  1996  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1997  00F8  1086               	bcf	6,1	;volatile
  1998  00F9  3014               	movlw	20
  1999                           
  2000                           ;main.c: 478: chrgFlag = 0;
  2001  00FA  01FA               	clrf	_chrgFlag
  2002                           
  2003                           ;main.c: 479: chrgFullFlag = 0;
  2004  00FB  01D3               	clrf	_chrgFullFlag
  2005                           
  2006                           ;main.c: 480: protectFlag = 0;
  2007  00FC  01D1               	clrf	_protectFlag
  2008                           
  2009                           ;main.c: 481: chrgMode = 0;
  2010  00FD  01C3               	clrf	_chrgMode
  2011                           
  2012                           ;main.c: 482: chrgMaxAD = 0;
  2013  00FE  01C2               	clrf	_chrgMaxAD
  2014                           
  2015                           ;main.c: 483: chrgMaxDuty = 0;
  2016  00FF  01BD               	clrf	_chrgMaxDuty
  2017                           
  2018                           ;main.c: 484: lockCount = 0;
  2019  0100  01C1               	clrf	_lockCount
  2020                           
  2021                           ;main.c: 485: lockLedStep = 0;
  2022  0101  01C5               	clrf	_lockLedStep
  2023                           
  2024                           ;main.c: 486: chrgWaitTime = 20;
  2025  0102  00BE               	movwf	_chrgWaitTime
  2026                           
  2027                           ;main.c: 487: chrgPwmStop();
  2028  0103  25BD               	fcall	_chrgPwmStop
  2029                           
  2030                           ;main.c: 488: if(prePwStep > 0 && prePwStep > pwStep)
  2031  0104  0877               	movf	_prePwStep,w
  2032  0105  1903               	btfsc	3,2
  2033  0106  2914               	goto	l3382
  2034  0107  0877               	movf	_prePwStep,w
  2035  0108  0247               	subwf	_pwStep,w
  2036  0109  1803               	skipnc
  2037  010A  2914               	goto	l3382
  2038                           
  2039                           ;main.c: 489: {
  2040                           ;main.c: 490: if(++count50s > 3000)
  2041  010B  2117               	fcall	PL8	;call to abstracted procedure
  2042  010C  1903               	skipnz
  2043  010D  022A               	subwf	_count50s,w
  2044  010E  1C03               	skipc
  2045  010F  0008               	return
  2046                           
  2047                           ;main.c: 491: {
  2048                           ;main.c: 492: count50s = 0;
  2049  0110  01AA               	clrf	_count50s
  2050  0111  01AB               	clrf	_count50s+1
  2051                           
  2052                           ;main.c: 493: prePwStep--;
  2053  0112  03F7               	decf	_prePwStep,f
  2054  0113  0008               	return
  2055  0114                     l3382:	
  2056                           
  2057                           ;main.c: 496: else
  2058                           ;main.c: 497: {
  2059                           ;main.c: 498: count50s = 0;
  2060  0114  01AA               	clrf	_count50s
  2061  0115  01AB               	clrf	_count50s+1
  2062  0116  0008               	return
  2063  0117                     __end_of_chrgCtr:	
  2064  0117                     PL8:	
  2065  0117  0AAA               	incf	_count50s,f
  2066  0118  1903               	skipnz
  2067  0119  0AAB               	incf	_count50s+1,f
  2068  011A  300B               	movlw	11
  2069  011B  022B               	subwf	_count50s+1,w
  2070  011C  34B9               	retlw	185
  2071  011D                     __end_ofPL8:	
  2072                           
  2073                           	psect	text9
  2074  05B6                     __ptext9:	
  2075 ;; *************** function _pwmStop *****************
  2076 ;; Defined at:
  2077 ;;		line 1006 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0
  2086 ;; Tracked objects:
  2087 ;;		On entry : 100/0
  2088 ;;		On exit  : 100/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1
  2091 ;;      Params:         0       0       0
  2092 ;;      Locals:         0       0       0
  2093 ;;      Temps:          0       0       0
  2094 ;;      Totals:         0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    2
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_chrgCtr
  2102 ;;		_workCtr
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _pwmStop
  2108  05B6                     _pwmStop:	
  2109                           
  2110                           ;main.c: 1008: if(motorPwmFlag)
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2114  05B6  0836               	movf	_motorPwmFlag,w
  2115  05B7  1903               	btfsc	3,2
  2116  05B8  0008               	return
  2117                           
  2118                           ;main.c: 1009: {
  2119                           ;main.c: 1010: motorPwmFlag = 0;
  2120  05B9  01B6               	clrf	_motorPwmFlag
  2121                           
  2122                           ;main.c: 1011: PWMCON0 &= 0XF7;
  2123  05BA  1195               	bcf	21,3	;volatile
  2124                           
  2125                           ;main.c: 1012: RB4 = 0;
  2126  05BB  1206               	bcf	6,4	;volatile
  2127  05BC  0008               	return
  2128  05BD                     __end_of_pwmStop:	
  2129                           
  2130                           	psect	text10
  2131  05BD                     __ptext10:	
  2132 ;; *************** function _chrgPwmStop *****************
  2133 ;; Defined at:
  2134 ;;		line 980 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0
  2143 ;; Tracked objects:
  2144 ;;		On entry : 100/0
  2145 ;;		On exit  : 100/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1
  2148 ;;      Params:         0       0       0
  2149 ;;      Locals:         0       0       0
  2150 ;;      Temps:          0       0       0
  2151 ;;      Totals:         0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    2
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_chrgCtr
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           
  2163                           ;psect for function _chrgPwmStop
  2164  05BD                     _chrgPwmStop:	
  2165  05BD                     l2198:	
  2166                           ;incstack = 0
  2167                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2168                           
  2169                           
  2170                           ;main.c: 982: if(chrgPwmFlag)
  2171  05BD  0837               	movf	_chrgPwmFlag,w
  2172  05BE  1903               	btfsc	3,2
  2173  05BF  0008               	return
  2174                           
  2175                           ;main.c: 983: {
  2176                           ;main.c: 984: chrgPwmFlag = 0;
  2177  05C0  01B7               	clrf	_chrgPwmFlag
  2178                           
  2179                           ;main.c: 985: PWMCON0 &= 0xFB;
  2180  05C1  1115               	bcf	21,2	;volatile
  2181                           
  2182                           ;main.c: 986: RB3 = 0;
  2183  05C2  1186               	bcf	6,3	;volatile
  2184  05C3  0008               	return
  2185  05C4                     __end_of_chrgPwmStop:	
  2186                           
  2187                           	psect	text11
  2188  057D                     __ptext11:	
  2189 ;; *************** function _chrgPwmInit *****************
  2190 ;; Defined at:
  2191 ;;		line 962 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg, status,2
  2200 ;; Tracked objects:
  2201 ;;		On entry : 100/0
  2202 ;;		On exit  : 100/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1
  2205 ;;      Params:         0       0       0
  2206 ;;      Locals:         0       0       0
  2207 ;;      Temps:          0       0       0
  2208 ;;      Totals:         0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    2
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_chrgCtr
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           
  2220                           ;psect for function _chrgPwmInit
  2221  057D                     _chrgPwmInit:	
  2222                           
  2223                           ;main.c: 964: chrgPwmFlag = 1;
  2224                           
  2225                           ;incstack = 0
  2226                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2227  057D  01B7               	clrf	_chrgPwmFlag
  2228  057E  0AB7               	incf	_chrgPwmFlag,f
  2229                           
  2230                           ;main.c: 965: PWMCON1 = 0B00000000;
  2231                           
  2232                           ;main.c: 967: PWMTH = 0X00;
  2233                           
  2234                           ;main.c: 968: PWMTL = 100;
  2235                           
  2236                           ;main.c: 972: PWMD23H = 0;
  2237  057F  2585               	fcall	PL10	;call to abstracted procedure
  2238                           
  2239                           ;main.c: 973: PWMD2L = 10;
  2240  0580  300A               	movlw	10
  2241  0581  009B               	movwf	27	;volatile
  2242                           
  2243                           ;main.c: 974: PWM23DT = 0X00;
  2244  0582  019D               	clrf	29	;volatile
  2245                           
  2246                           ;main.c: 976: PWMCON0 = 0X04;
  2247  0583  3004               	movlw	4
  2248                           
  2249                           ;main.c: 977: PWMCON2 =0X00;
  2250  0584  2D8C               	ljmp	PL14	;call to abstracted procedure
  2251  0585                     __end_of_chrgPwmInit:	
  2252  0585                     PL10:	
  2253  0585  0196               	clrf	22	;volatile
  2254  0586  0198               	clrf	24	;volatile
  2255  0587  3064               	movlw	100
  2256  0588  0097               	movwf	23	;volatile
  2257  0589  1683               	bsf	3,5	;RP0=1, select bank1
  2258  058A  019E               	clrf	30	;volatile
  2259  058B  0008               	return
  2260  058C                     __end_ofPL10:	
  2261  058C                     PL14:	
  2262  058C  1283               	bcf	3,5	;RP0=0, select bank0
  2263  058D  0095               	movwf	21	;volatile
  2264  058E  019D               	clrf	29	;volatile
  2265  058F  0008               	return
  2266  0590                     __end_ofPL14:	
  2267                           
  2268                           	psect	text12
  2269  0548                     __ptext12:	
  2270 ;; *************** function ___lbdiv *****************
  2271 ;; Defined at:
  2272 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  dividend        1    wreg     unsigned char 
  2275 ;;  divisor         1    3[COMMON] unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  dividend        1    4[COMMON] unsigned char 
  2278 ;;  quotient        1    6[COMMON] unsigned char 
  2279 ;;  counter         1    5[COMMON] unsigned char 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      unsigned char 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0
  2284 ;; Tracked objects:
  2285 ;;		On entry : 100/0
  2286 ;;		On exit  : 100/0
  2287 ;;		Unchanged: 100/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1
  2289 ;;      Params:         1       0       0
  2290 ;;      Locals:         3       0       0
  2291 ;;      Temps:          0       0       0
  2292 ;;      Totals:         4       0       0
  2293 ;;Total ram usage:        4 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    2
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_ledCtr
  2300 ;;		_chrgCtr
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function ___lbdiv
  2306  0548                     ___lbdiv:	
  2307                           
  2308                           ;incstack = 0
  2309                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2310                           ;___lbdiv@dividend stored from wreg
  2311  0548  00F4               	movwf	___lbdiv@dividend
  2312  0549  01F6               	clrf	___lbdiv@quotient
  2313  054A  0873               	movf	___lbdiv@divisor,w
  2314  054B  1903               	btfsc	3,2
  2315  054C  2D61               	goto	l2384
  2316  054D  01F5               	clrf	___lbdiv@counter
  2317  054E                     l2370:	
  2318  054E  0AF5               	incf	___lbdiv@counter,f
  2319  054F  1BF3               	btfsc	___lbdiv@divisor,7
  2320  0550  2D54               	goto	l1188
  2321  0551  1003               	clrc
  2322  0552  0DF3               	rlf	___lbdiv@divisor,f
  2323  0553  2D4E               	goto	l2370
  2324  0554                     l1188:	
  2325  0554  1003               	clrc
  2326  0555  0DF6               	rlf	___lbdiv@quotient,f
  2327  0556  0873               	movf	___lbdiv@divisor,w
  2328  0557  0274               	subwf	___lbdiv@dividend,w
  2329  0558  1C03               	skipc
  2330  0559  2D5E               	goto	L7
  2331  055A  0873               	movf	___lbdiv@divisor,w
  2332  055B  02F4               	subwf	___lbdiv@dividend,f
  2333  055C  1476               	bsf	___lbdiv@quotient,0
  2334  055D  1003               	clrc
  2335  055E                     L7:	
  2336  055E  0CF3               	rrf	___lbdiv@divisor,f
  2337  055F  0BF5               	decfsz	___lbdiv@counter,f
  2338  0560  2D54               	goto	l1188
  2339  0561                     l2384:	
  2340  0561  0876               	movf	___lbdiv@quotient,w
  2341  0562  0008               	return
  2342  0563                     __end_of___lbdiv:	
  2343                           
  2344                           	psect	text13
  2345  0206                     __ptext13:	
  2346 ;; *************** function _checkOutA *****************
  2347 ;; Defined at:
  2348 ;;		line 656 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  maxAout         1   20[BANK0 ] unsigned char 
  2353 ;;  maxtempV        1   19[BANK0 ] unsigned char 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      void 
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0, pclath, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 100/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1
  2363 ;;      Params:         0       0       0
  2364 ;;      Locals:         0       2       0
  2365 ;;      Temps:          0       2       0
  2366 ;;      Totals:         0       4       0
  2367 ;;Total ram usage:        4 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    3
  2370 ;; This function calls:
  2371 ;;		_ADC_Sample
  2372 ;;		___bmul
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           
  2379                           ;psect for function _checkOutA
  2380  0206                     _checkOutA:	
  2381                           
  2382                           ;main.c: 658: test_adc = ADC_Sample(0, 5);
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2386  0206  3005               	movlw	5
  2387  0207  00F3               	movwf	ADC_Sample@adldo
  2388  0208  3000               	movlw	0
  2389  0209  211D               	fcall	_ADC_Sample
  2390  020A  00D7               	movwf	_test_adc	;volatile
  2391                           
  2392                           ;main.c: 659: if (0xA5 == test_adc)
  2393  020B  30A5               	movlw	165
  2394  020C  0657               	xorwf	_test_adc,w	;volatile
  2395  020D  1D03               	btfss	3,2
  2396  020E  2AAF               	goto	l3226
  2397                           
  2398                           ;main.c: 660: {
  2399                           ;main.c: 661: if(chrgFlag && adresult > 100)
  2400  020F  087A               	movf	_chrgFlag,w
  2401  0210  1903               	btfsc	3,2
  2402  0211  2A22               	goto	l3142
  2403  0212  3000               	movlw	0
  2404  0213  0235               	subwf	_adresult+1,w	;volatile
  2405  0214  3065               	movlw	101
  2406  0215  1903               	skipnz
  2407  0216  0234               	subwf	_adresult,w	;volatile
  2408  0217  1C03               	skipc
  2409  0218  2A22               	goto	l3142
  2410                           
  2411                           ;main.c: 662: {
  2412                           ;main.c: 663: if(++overChrgTime > 10)
  2413  0219  300B               	movlw	11
  2414  021A  0AC8               	incf	_overChrgTime,f
  2415  021B  0248               	subwf	_overChrgTime,w
  2416  021C  1C03               	skipc
  2417  021D  2A23               	goto	l3144
  2418  021E  3002               	movlw	2
  2419                           
  2420                           ;main.c: 664: {
  2421                           ;main.c: 665: overChrgTime = 0;
  2422  021F  01C8               	clrf	_overChrgTime
  2423                           
  2424                           ;main.c: 666: protectFlag = 2;
  2425  0220  00D1               	movwf	_protectFlag
  2426  0221  2A23               	goto	l3144
  2427  0222                     l3142:	
  2428                           
  2429                           ;main.c: 670: else
  2430                           ;main.c: 671: {
  2431                           ;main.c: 672: overChrgTime = 0;
  2432  0222  01C8               	clrf	_overChrgTime
  2433  0223                     l3144:	
  2434                           
  2435                           ;main.c: 673: }
  2436                           ;main.c: 674: outADValue = adresult;
  2437  0223  0835               	movf	_adresult+1,w	;volatile
  2438  0224  00AF               	movwf	_outADValue+1
  2439  0225  0834               	movf	_adresult,w	;volatile
  2440  0226  00AE               	movwf	_outADValue
  2441                           
  2442                           ;main.c: 676: if(workStep && (outADValue > 600))
  2443  0227  0879               	movf	_workStep,w
  2444  0228  1903               	btfsc	3,2
  2445  0229  2A39               	goto	l3154
  2446  022A  3002               	movlw	2
  2447  022B  022F               	subwf	_outADValue+1,w
  2448  022C  3059               	movlw	89
  2449  022D  1903               	skipnz
  2450  022E  022E               	subwf	_outADValue,w
  2451  022F  1C03               	skipc
  2452  0230  2A39               	goto	l3154
  2453                           
  2454                           ;main.c: 677: {
  2455                           ;main.c: 678: if(++workOverOutTime > 50)
  2456  0231  3033               	movlw	51
  2457  0232  0AD0               	incf	_workOverOutTime,f
  2458  0233  0250               	subwf	_workOverOutTime,w
  2459  0234  1C03               	skipc
  2460  0235  2A3A               	goto	l3156
  2461                           
  2462                           ;main.c: 679: {
  2463                           ;main.c: 680: workOverOutTime = 0;
  2464  0236  01D0               	clrf	_workOverOutTime
  2465                           
  2466                           ;main.c: 681: workStep = 0;
  2467  0237  01F9               	clrf	_workStep
  2468  0238  2A3A               	goto	l3156
  2469  0239                     l3154:	
  2470                           
  2471                           ;main.c: 684: else
  2472                           ;main.c: 685: {
  2473                           ;main.c: 686: workOverOutTime = 0;
  2474  0239  01D0               	clrf	_workOverOutTime
  2475  023A                     l3156:	
  2476                           
  2477                           ;main.c: 687: }
  2478                           ;main.c: 688: unsigned char maxtempV = 130 + (workStep * 10);
  2479  023A  300A               	movlw	10
  2480  023B  00F3               	movwf	___bmul@multiplicand
  2481  023C  0879               	movf	_workStep,w
  2482  023D  2590               	fcall	___bmul
  2483  023E  3E82               	addlw	130
  2484  023F  00EB               	movwf	checkOutA@maxtempV
  2485                           
  2486                           ;main.c: 689: if(jrStep > 0)
  2487  0240  0839               	movf	_jrStep,w
  2488  0241  1903               	btfsc	3,2
  2489  0242  2A4B               	goto	l3166
  2490                           
  2491                           ;main.c: 690: {
  2492                           ;main.c: 691: maxtempV = maxtempV - 40;
  2493  0243  30D8               	movlw	216
  2494  0244  07EB               	addwf	checkOutA@maxtempV,f
  2495                           
  2496                           ;main.c: 692: if(workStep < 5)
  2497  0245  3005               	movlw	5
  2498  0246  0279               	subwf	_workStep,w
  2499  0247  1803               	skipnc
  2500  0248  2A4B               	goto	l3166
  2501                           
  2502                           ;main.c: 693: {
  2503                           ;main.c: 694: maxtempV = maxtempV - 30;
  2504  0249  30E2               	movlw	226
  2505  024A  07EB               	addwf	checkOutA@maxtempV,f
  2506  024B                     l3166:	
  2507                           
  2508                           ;main.c: 695: }
  2509                           ;main.c: 696: }
  2510                           ;main.c: 697: if(outADValue > maxtempV)
  2511  024B  086B               	movf	checkOutA@maxtempV,w
  2512  024C  00E9               	movwf	??_checkOutA
  2513  024D  01EA               	clrf	??_checkOutA+1
  2514  024E  082F               	movf	_outADValue+1,w
  2515  024F  026A               	subwf	??_checkOutA+1,w
  2516  0250  1D03               	skipz
  2517  0251  2A54               	goto	u3265
  2518  0252  082E               	movf	_outADValue,w
  2519  0253  0269               	subwf	??_checkOutA,w
  2520  0254                     u3265:	
  2521  0254  1803               	skipnc
  2522  0255  2A5E               	goto	l3172
  2523                           
  2524                           ;main.c: 698: {
  2525                           ;main.c: 699: if(++overCount > 5)
  2526  0256  3006               	movlw	6
  2527  0257  0ACB               	incf	_overCount,f
  2528  0258  024B               	subwf	_overCount,w
  2529  0259  1C03               	skipc
  2530  025A  2AA8               	goto	l3222
  2531                           
  2532                           ;main.c: 700: {
  2533                           ;main.c: 701: overCount = 5;
  2534  025B  3005               	movlw	5
  2535  025C  00CB               	movwf	_overCount
  2536  025D  2AA8               	goto	l3222
  2537  025E                     l3172:	
  2538                           
  2539                           ;main.c: 704: else
  2540                           ;main.c: 705: {
  2541                           ;main.c: 707: if(overCount > 0)
  2542  025E  084B               	movf	_overCount,w
  2543  025F  1903               	btfsc	3,2
  2544  0260  2A62               	goto	l3176
  2545                           
  2546                           ;main.c: 708: {
  2547                           ;main.c: 709: overCount--;
  2548  0261  03CB               	decf	_overCount,f
  2549  0262                     l3176:	
  2550                           
  2551                           ;main.c: 710: }
  2552                           ;main.c: 711: unsigned char maxAout = 32;
  2553  0262  3020               	movlw	32
  2554  0263  00EC               	movwf	checkOutA@maxAout
  2555                           
  2556                           ;main.c: 712: if(pwStep < 40)
  2557  0264  3028               	movlw	40
  2558  0265  0247               	subwf	_pwStep,w
  2559  0266  1803               	skipnc
  2560  0267  2A6A               	goto	l3182
  2561                           
  2562                           ;main.c: 713: {
  2563                           ;main.c: 714: maxAout = 30;
  2564  0268  301E               	movlw	30
  2565  0269  00EC               	movwf	checkOutA@maxAout
  2566  026A                     l3182:	
  2567                           
  2568                           ;main.c: 715: }
  2569                           ;main.c: 716: if(workStep == 1)
  2570  026A  0B79               	decfsz	_workStep,w
  2571  026B  2A6E               	goto	l3186
  2572                           
  2573                           ;main.c: 717: {
  2574                           ;main.c: 718: maxAout = maxAout + 1;
  2575  026C  0AEC               	incf	checkOutA@maxAout,f
  2576                           
  2577                           ;main.c: 719: }
  2578  026D  2A8A               	goto	l847
  2579  026E                     l3186:	
  2580                           
  2581                           ;main.c: 720: else if(workStep == 2)
  2582  026E  3002               	movlw	2
  2583  026F  0679               	xorwf	_workStep,w
  2584                           
  2585                           ;main.c: 721: {
  2586                           ;main.c: 722: maxAout = maxAout + 3;
  2587  0270  3003               	movlw	3
  2588  0271  1903               	btfsc	3,2
  2589  0272  2A89               	goto	L11
  2590                           
  2591                           ;main.c: 724: else if(workStep == 3)
  2592                           
  2593                           ;main.c: 723: }
  2594  0273  0679               	xorwf	_workStep,w
  2595  0274  1D03               	btfss	3,2
  2596  0275  2A78               	goto	l3194
  2597                           
  2598                           ;main.c: 725: {
  2599                           ;main.c: 726: maxAout = maxAout + 5;
  2600  0276  3005               	movlw	5
  2601  0277  2A89               	goto	L11
  2602  0278                     l3194:	
  2603                           ;main.c: 727: }
  2604                           
  2605                           
  2606                           ;main.c: 728: else if(workStep == 4)
  2607  0278  3004               	movlw	4
  2608  0279  0679               	xorwf	_workStep,w
  2609  027A  1D03               	btfss	3,2
  2610  027B  2A7E               	goto	l3198
  2611                           
  2612                           ;main.c: 729: {
  2613                           ;main.c: 730: maxAout = maxAout + 7;
  2614  027C  3007               	movlw	7
  2615  027D  2A89               	goto	L11
  2616  027E                     l3198:	
  2617                           ;main.c: 731: }
  2618                           
  2619                           
  2620                           ;main.c: 732: else if(workStep == 5)
  2621  027E  3005               	movlw	5
  2622  027F  0679               	xorwf	_workStep,w
  2623  0280  1D03               	btfss	3,2
  2624  0281  2A84               	goto	l3202
  2625                           
  2626                           ;main.c: 733: {
  2627                           ;main.c: 734: maxAout = maxAout + 9;
  2628  0282  3009               	movlw	9
  2629  0283  2A89               	goto	L11
  2630  0284                     l3202:	
  2631                           ;main.c: 735: }
  2632                           
  2633                           
  2634                           ;main.c: 736: else if(workStep == 6)
  2635  0284  3006               	movlw	6
  2636  0285  0679               	xorwf	_workStep,w
  2637  0286  1D03               	btfss	3,2
  2638  0287  2A8A               	goto	l847
  2639                           
  2640                           ;main.c: 737: {
  2641                           ;main.c: 738: maxAout = maxAout + 12;
  2642  0288  300C               	movlw	12
  2643  0289                     L11:	
  2644  0289  07EC               	addwf	checkOutA@maxAout,f
  2645  028A                     l847:	
  2646                           
  2647                           ;main.c: 739: }
  2648                           ;main.c: 740: if(overCount > 0)
  2649  028A  084B               	movf	_overCount,w
  2650  028B  1D03               	btfss	3,2
  2651                           
  2652                           ;main.c: 741: {
  2653                           ;main.c: 742: overCount--;
  2654  028C  03CB               	decf	_overCount,f
  2655                           
  2656                           ;main.c: 743: }
  2657                           ;main.c: 744: if(outADValue > maxAout)
  2658  028D  086C               	movf	checkOutA@maxAout,w
  2659  028E  00E9               	movwf	??_checkOutA
  2660  028F  01EA               	clrf	??_checkOutA+1
  2661  0290  082F               	movf	_outADValue+1,w
  2662  0291  026A               	subwf	??_checkOutA+1,w
  2663  0292  1D03               	skipz
  2664  0293  2A96               	goto	u3375
  2665  0294  082E               	movf	_outADValue,w
  2666  0295  0269               	subwf	??_checkOutA,w
  2667  0296                     u3375:	
  2668  0296  1803               	skipnc
  2669  0297  2AA3               	goto	l3216
  2670                           
  2671                           ;main.c: 745: {
  2672                           ;main.c: 747: if(startTime == 0)
  2673  0298  0849               	movf	_startTime,w
  2674  0299  1D03               	btfss	3,2
  2675  029A  2AA0               	goto	l3214
  2676                           
  2677                           ;main.c: 748: {
  2678                           ;main.c: 749: tempDuty = 81 + (workStep*3);
  2679  029B  0879               	movf	_workStep,w
  2680  029C  0779               	addwf	_workStep,w
  2681  029D  0779               	addwf	_workStep,w
  2682  029E  3E51               	addlw	81
  2683  029F  2AA1               	goto	L12
  2684  02A0                     l3214:	
  2685                           ;main.c: 750: }
  2686                           
  2687                           
  2688                           ;main.c: 751: else
  2689                           ;main.c: 752: {
  2690                           ;main.c: 753: tempDuty = maxDuty;
  2691  02A0  084C               	movf	_maxDuty,w
  2692  02A1                     L12:	
  2693  02A1  00CA               	movwf	_tempDuty
  2694  02A2  2AA8               	goto	l3222
  2695  02A3                     l3216:	
  2696                           
  2697                           ;main.c: 761: if(tempDuty > maxDuty)
  2698  02A3  084A               	movf	_tempDuty,w
  2699  02A4  024C               	subwf	_maxDuty,w
  2700  02A5  1803               	skipnc
  2701  02A6  2AA0               	goto	l3214
  2702                           
  2703                           ;main.c: 762: {
  2704                           ;main.c: 763: tempDuty--;
  2705  02A7  03CA               	decf	_tempDuty,f
  2706  02A8                     l3222:	
  2707                           ;main.c: 764: }
  2708                           
  2709                           
  2710                           ;main.c: 768: }
  2711                           ;main.c: 770: }
  2712                           ;main.c: 772: }
  2713                           ;main.c: 773: PWMD23H = 0X00;
  2714  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2715  02A9  019E               	clrf	30	;volatile
  2716                           
  2717                           ;main.c: 774: PWMD3L = tempDuty;
  2718  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2719  02AB  084A               	movf	_tempDuty,w
  2720  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  2721  02AD  009C               	movwf	28	;volatile
  2722                           
  2723                           ;main.c: 775: }
  2724  02AE  0008               	return
  2725  02AF                     l3226:	
  2726                           
  2727                           ;main.c: 776: else
  2728                           ;main.c: 777: {
  2729                           ;main.c: 778: ADCON0 = 0;
  2730  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  2731  02B0  0195               	clrf	21	;volatile
  2732                           
  2733                           ;main.c: 779: ADCON1 = 0;
  2734  02B1  0196               	clrf	22	;volatile
  2735                           
  2736                           ;main.c: 780: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2737  02B2  3084               	movlw	132
  2738  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2739  02B4  00E9               	movwf	??_checkOutA
  2740  02B5                     u4027:	
  2741  02B5  0BE9               	decfsz	??_checkOutA,f
  2742  02B6  2AB5               	goto	u4027
  2743  02B7  2AB8               	nop2
  2744  02B8  0008               	return
  2745  02B9                     __end_of_checkOutA:	
  2746                           
  2747                           	psect	text14
  2748  0590                     __ptext14:	
  2749 ;; *************** function ___bmul *****************
  2750 ;; Defined at:
  2751 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  multiplier      1    wreg     unsigned char 
  2754 ;;  multiplicand    1    3[COMMON] unsigned char 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  multiplier      1    5[COMMON] unsigned char 
  2757 ;;  product         1    4[COMMON] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      unsigned char 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0
  2762 ;; Tracked objects:
  2763 ;;		On entry : 100/0
  2764 ;;		On exit  : 100/0
  2765 ;;		Unchanged: 100/0
  2766 ;; Data sizes:     COMMON   BANK0   BANK1
  2767 ;;      Params:         1       0       0
  2768 ;;      Locals:         2       0       0
  2769 ;;      Temps:          0       0       0
  2770 ;;      Totals:         3       0       0
  2771 ;;Total ram usage:        3 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    2
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_checkOutA
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           
  2782                           ;psect for function ___bmul
  2783  0590                     ___bmul:	
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2787                           ;___bmul@multiplier stored from wreg
  2788  0590  00F5               	movwf	___bmul@multiplier
  2789  0591  01F4               	clrf	___bmul@product
  2790  0592                     l2352:	
  2791  0592  0873               	movf	___bmul@multiplicand,w
  2792  0593  1875               	btfsc	___bmul@multiplier,0
  2793  0594  07F4               	addwf	___bmul@product,f
  2794  0595  1003               	clrc
  2795  0596  0DF3               	rlf	___bmul@multiplicand,f
  2796  0597  1003               	clrc
  2797  0598  0CF5               	rrf	___bmul@multiplier,f
  2798  0599  0875               	movf	___bmul@multiplier,w
  2799  059A  1D03               	btfss	3,2
  2800  059B  2D92               	goto	l2352
  2801  059C  0874               	movf	___bmul@product,w
  2802  059D  0008               	return
  2803  059E                     __end_of___bmul:	
  2804                           
  2805                           	psect	text15
  2806  02B9                     __ptext15:	
  2807 ;; *************** function _checkBatAD *****************
  2808 ;; Defined at:
  2809 ;;		line 784 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1
  2823 ;;      Params:         0       0       0
  2824 ;;      Locals:         0       0       0
  2825 ;;      Temps:          2       0       0
  2826 ;;      Totals:         2       0       0
  2827 ;;Total ram usage:        2 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		_ADC_Sample
  2832 ;; This function is called by:
  2833 ;;		_main
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           
  2838                           ;psect for function _checkBatAD
  2839  02B9                     _checkBatAD:	
  2840                           
  2841                           ;main.c: 786: test_adc = ADC_Sample(2, 5);
  2842                           
  2843                           ;incstack = 0
  2844                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2845  02B9  3005               	movlw	5
  2846  02BA  00F3               	movwf	ADC_Sample@adldo
  2847  02BB  3002               	movlw	2
  2848  02BC  211D               	fcall	_ADC_Sample
  2849  02BD  00D7               	movwf	_test_adc	;volatile
  2850                           
  2851                           ;main.c: 787: if (0xA5 == test_adc)
  2852  02BE  30A5               	movlw	165
  2853  02BF  0657               	xorwf	_test_adc,w	;volatile
  2854  02C0  1D03               	btfss	3,2
  2855  02C1  2B1A               	goto	l3416
  2856                           
  2857                           ;main.c: 788: {
  2858                           ;main.c: 789: batADValue = adresult;
  2859  02C2  0835               	movf	_adresult+1,w	;volatile
  2860  02C3  00AD               	movwf	_batADValue+1
  2861  02C4  0834               	movf	_adresult,w	;volatile
  2862  02C5  00AC               	movwf	_batADValue
  2863                           
  2864                           ;main.c: 790: if(batADValue < 1117)
  2865  02C6  3004               	movlw	4
  2866  02C7  022D               	subwf	_batADValue+1,w
  2867  02C8  305D               	movlw	93
  2868  02C9  1903               	skipnz
  2869  02CA  022C               	subwf	_batADValue,w
  2870  02CB  1803               	skipnc
  2871  02CC  2AE0               	goto	l3398
  2872                           
  2873                           ;main.c: 791: {
  2874                           ;main.c: 792: pwStep = 0;
  2875  02CD  01C7               	clrf	_pwStep
  2876                           
  2877                           ;main.c: 793: if(++count8s > 800)
  2878  02CE  0AA2               	incf	_count8s,f
  2879  02CF  1903               	skipnz
  2880  02D0  0AA3               	incf	_count8s+1,f
  2881  02D1  3003               	movlw	3
  2882  02D2  0223               	subwf	_count8s+1,w
  2883  02D3  3021               	movlw	33
  2884  02D4  1903               	skipnz
  2885  02D5  0222               	subwf	_count8s,w
  2886  02D6  1C03               	skipc
  2887  02D7  2B0D               	goto	l3410
  2888                           
  2889                           ;main.c: 794: {
  2890                           ;main.c: 795: count8s = 0;
  2891  02D8  01A2               	clrf	_count8s
  2892  02D9  01A3               	clrf	_count8s+1
  2893                           
  2894                           ;main.c: 796: lowBatFlag = 1;
  2895  02DA  01BB               	clrf	_lowBatFlag
  2896  02DB  0ABB               	incf	_lowBatFlag,f
  2897                           
  2898                           ;main.c: 797: prePwStep = 0;
  2899  02DC  01F7               	clrf	_prePwStep
  2900                           
  2901                           ;main.c: 798: workStep = 0;
  2902  02DD  01F9               	clrf	_workStep
  2903                           
  2904                           ;main.c: 799: jrStep = 0;
  2905  02DE  01B9               	clrf	_jrStep
  2906  02DF  2B0D               	goto	l3410
  2907  02E0                     l3398:	
  2908  02E0  3005               	movlw	5
  2909                           
  2910                           ;main.c: 802: else
  2911                           ;main.c: 803: {
  2912                           ;main.c: 804: count8s = 0;
  2913  02E1  01A2               	clrf	_count8s
  2914  02E2  01A3               	clrf	_count8s+1
  2915                           
  2916                           ;main.c: 805: if(batADValue >= 1340)
  2917  02E3  022D               	subwf	_batADValue+1,w
  2918  02E4  303C               	movlw	60
  2919  02E5  1903               	skipnz
  2920  02E6  022C               	subwf	_batADValue,w
  2921                           
  2922                           ;main.c: 806: {
  2923                           ;main.c: 807: pwStep = ((batADValue - 1340) /2) + 13;
  2924  02E7  082C               	movf	_batADValue,w
  2925  02E8  1C03               	skipc
  2926  02E9  2AF7               	goto	L15
  2927  02EA  3EC4               	addlw	196
  2928  02EB  00F4               	movwf	??_checkBatAD
  2929  02EC  082D               	movf	_batADValue+1,w
  2930  02ED  1803               	skipnc
  2931  02EE  3E01               	addlw	1
  2932  02EF  3EFA               	addlw	250
  2933  02F0  00F5               	movwf	??_checkBatAD+1
  2934  02F1  1003               	clrc
  2935  02F2  0CF5               	rrf	??_checkBatAD+1,f
  2936  02F3  0CF4               	rrf	??_checkBatAD,f
  2937  02F4  0874               	movf	??_checkBatAD,w
  2938  02F5  3E0D               	addlw	13
  2939  02F6  2B06               	goto	L14
  2940  02F7                     L15:	
  2941                           ;main.c: 809: else
  2942                           ;main.c: 810: {
  2943                           ;main.c: 811: pwStep = (batADValue - 1117) / 16;
  2944                           
  2945                           ;main.c: 808: }
  2946                           
  2947  02F7  3EA3               	addlw	163
  2948  02F8  00F4               	movwf	??_checkBatAD
  2949  02F9  082D               	movf	_batADValue+1,w
  2950  02FA  1803               	skipnc
  2951  02FB  3E01               	addlw	1
  2952  02FC  3EFB               	addlw	251
  2953  02FD  00F5               	movwf	??_checkBatAD+1
  2954  02FE  3004               	movlw	4
  2955  02FF                     u3745:	
  2956  02FF  1003               	clrc
  2957  0300  0CF5               	rrf	??_checkBatAD+1,f
  2958  0301  0CF4               	rrf	??_checkBatAD,f
  2959  0302  3EFF               	addlw	-1
  2960  0303  1D03               	skipz
  2961  0304  2AFF               	goto	u3745
  2962  0305  0874               	movf	??_checkBatAD,w
  2963  0306                     L14:	
  2964  0306  00C7               	movwf	_pwStep
  2965                           
  2966                           ;main.c: 812: }
  2967                           ;main.c: 813: if(pwStep > 99)
  2968  0307  3064               	movlw	100
  2969  0308  0247               	subwf	_pwStep,w
  2970  0309  1C03               	skipc
  2971  030A  2B0D               	goto	l3410
  2972                           
  2973                           ;main.c: 814: {
  2974                           ;main.c: 815: pwStep = 99;
  2975  030B  3063               	movlw	99
  2976  030C  00C7               	movwf	_pwStep
  2977  030D                     l3410:	
  2978                           
  2979                           ;main.c: 816: }
  2980                           ;main.c: 817: }
  2981                           ;main.c: 818: if(chrgFlag && batADValue > 1861)
  2982  030D  087A               	movf	_chrgFlag,w
  2983  030E  1903               	btfsc	3,2
  2984  030F  0008               	return
  2985  0310  3007               	movlw	7
  2986  0311  022D               	subwf	_batADValue+1,w
  2987  0312  3046               	movlw	70
  2988  0313  1903               	skipnz
  2989  0314  022C               	subwf	_batADValue,w
  2990  0315  1C03               	skipc
  2991  0316  0008               	return
  2992                           
  2993                           ;main.c: 819: {
  2994                           ;main.c: 820: protectFlag = 1;
  2995  0317  01D1               	clrf	_protectFlag
  2996  0318  0AD1               	incf	_protectFlag,f
  2997  0319  0008               	return
  2998  031A                     l3416:	
  2999                           
  3000                           ;main.c: 823: else
  3001                           ;main.c: 824: {
  3002                           ;main.c: 825: ADCON0 = 0;
  3003  031A  1683               	bsf	3,5	;RP0=1, select bank1
  3004  031B  0195               	clrf	21	;volatile
  3005                           
  3006                           ;main.c: 826: ADCON1 = 0;
  3007  031C  0196               	clrf	22	;volatile
  3008                           
  3009                           ;main.c: 827: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3010  031D  3085               	movlw	133
  3011  031E  00F4               	movwf	??_checkBatAD
  3012  031F                     u4037:	
  3013  031F  0BF4               	decfsz	??_checkBatAD,f
  3014  0320  2B1F               	goto	u4037
  3015  0321  0008               	return
  3016  0322                     __end_of_checkBatAD:	
  3017                           
  3018                           	psect	text16
  3019  011D                     __ptext16:	
  3020 ;; *************** function _ADC_Sample *****************
  3021 ;; Defined at:
  3022 ;;		line 1101 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  adch            1    wreg     unsigned char 
  3025 ;;  adldo           1    3[COMMON] unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  adch            1    5[BANK0 ] unsigned char 
  3028 ;;  j               1    4[BANK0 ] unsigned char 
  3029 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3030 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3031 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3032 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3033 ;;  i               1    6[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      unsigned char 
  3036 ;; Registers used:
  3037 ;;		wreg, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 100/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1
  3043 ;;      Params:         1       0       0
  3044 ;;      Locals:         0      13       0
  3045 ;;      Temps:          0       4       0
  3046 ;;      Totals:         1      17       0
  3047 ;;Total ram usage:       18 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    2
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_checkOutA
  3054 ;;		_checkBatAD
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function _ADC_Sample
  3060  011D                     _ADC_Sample:	
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3064                           ;ADC_Sample@adch stored from wreg
  3065  011D  1283               	bcf	3,5	;RP0=0, select bank0
  3066  011E  00DD               	movwf	ADC_Sample@adch
  3067                           
  3068                           ;main.c: 1103: volatile unsigned long adsum = 0;
  3069                           
  3070                           ;main.c: 1104: volatile unsigned int admin = 0, admax = 0;
  3071  011F  21F8               	fcall	PL6	;call to abstracted procedure
  3072                           
  3073                           ;main.c: 1105: volatile unsigned int ad_temp = 0;
  3074  0120  01E7               	clrf	ADC_Sample@ad_temp	;volatile
  3075  0121  01E8               	clrf	ADC_Sample@ad_temp+1	;volatile
  3076                           
  3077                           ;main.c: 1107: if ((!LDO_EN) && (adldo & 0x04) )
  3078  0122  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0123  1D16               	btfss	22,2	;volatile
  3080  0124  1D73               	btfss	ADC_Sample@adldo,2
  3081  0125  292F               	goto	l3028
  3082                           
  3083                           ;main.c: 1108: {
  3084                           ;main.c: 1110: ADCON1 = adldo;
  3085  0126  0873               	movf	ADC_Sample@adldo,w
  3086  0127  0096               	movwf	22	;volatile
  3087                           
  3088                           ;main.c: 1111: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3089  0128  3084               	movlw	132
  3090  0129  1283               	bcf	3,5	;RP0=0, select bank0
  3091  012A  00D8               	movwf	??_ADC_Sample
  3092  012B                     u4047:	
  3093  012B  0BD8               	decfsz	??_ADC_Sample,f
  3094  012C  292B               	goto	u4047
  3095  012D  292E               	nop2
  3096                           
  3097                           ;main.c: 1112: }
  3098  012E  2931               	goto	l3030
  3099  012F                     l3028:	
  3100                           
  3101                           ;main.c: 1113: else
  3102                           ;main.c: 1114: ADCON1 = adldo;
  3103  012F  0873               	movf	ADC_Sample@adldo,w
  3104  0130  0096               	movwf	22	;volatile
  3105  0131                     l3030:	
  3106                           
  3107                           ;main.c: 1116: if(adch & 0x10)
  3108  0131  1283               	bcf	3,5	;RP0=0, select bank0
  3109  0132  1E5D               	btfss	ADC_Sample@adch,4
  3110  0133  2939               	goto	l3038
  3111                           
  3112                           ;main.c: 1117: {
  3113                           ;main.c: 1118: CHS4 = 1;
  3114  0134  1683               	bsf	3,5	;RP0=1, select bank1
  3115  0135  1716               	bsf	22,6	;volatile
  3116                           
  3117                           ;main.c: 1119: adch &= 0x0f;
  3118  0136  300F               	movlw	15
  3119  0137  1283               	bcf	3,5	;RP0=0, select bank0
  3120  0138  05DD               	andwf	ADC_Sample@adch,f
  3121  0139                     l3038:	
  3122                           
  3123                           ;main.c: 1122: for (i = 0; i < 10; i++)
  3124  0139  01DE               	clrf	ADC_Sample@i
  3125  013A                     l3044:	
  3126                           
  3127                           ;main.c: 1123: {
  3128                           ;main.c: 1124: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3129  013A  085D               	movf	ADC_Sample@adch,w
  3130  013B  00D8               	movwf	??_ADC_Sample
  3131  013C  3001               	movlw	1
  3132  013D  1003               	clrc
  3133  013E                     L16:	
  3134  013E  0DD8               	rlf	??_ADC_Sample,f
  3135  013F  3EFF               	addlw	-1
  3136  0140  1003               	clrc
  3137  0141  1D03               	skipz
  3138  0142  293E               	goto	L16
  3139  0143  0D58               	rlf	??_ADC_Sample,w
  3140  0144  3841               	iorlw	65
  3141  0145  1683               	bsf	3,5	;RP0=1, select bank1
  3142  0146  0095               	movwf	21	;volatile
  3143  0147  0000               	nop	;# 
  3144  0148  0000               	nop	;# 
  3145  0149  0000               	nop	;# 
  3146  014A  0000               	nop	;# 
  3147                           
  3148                           ;main.c: 1129: GODONE = 1;
  3149  014B  1683               	bsf	3,5	;RP0=1, select bank1
  3150  014C  1495               	bsf	21,1	;volatile
  3151                           
  3152                           ;main.c: 1131: unsigned char j = 0;
  3153  014D  1283               	bcf	3,5	;RP0=0, select bank0
  3154  014E  01DC               	clrf	ADC_Sample@j
  3155  014F                     l911:	
  3156                           ;main.c: 1132: while (GODONE)
  3157                           
  3158  014F  1683               	bsf	3,5	;RP0=1, select bank1
  3159  0150  1C95               	btfss	21,1	;volatile
  3160  0151  295A               	goto	l3054
  3161                           
  3162                           ;main.c: 1133: {
  3163                           ;main.c: 1134: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3164  0152  2953               	nop2	;2 cycle nop
  3165  0153  2954               	nop2	;2 cycle nop
  3166  0154  2955               	nop2	;2 cycle nop
  3167  0155  2956               	nop2	;2 cycle nop
  3168                           
  3169                           ;main.c: 1136: if (0 == (--j))
  3170  0156  1283               	bcf	3,5	;RP0=0, select bank0
  3171  0157  0BDC               	decfsz	ADC_Sample@j,f
  3172  0158  294F               	goto	l911
  3173                           
  3174                           ;main.c: 1137: return 0;
  3175  0159  3400               	retlw	0
  3176  015A                     l3054:	
  3177                           
  3178                           ;main.c: 1138: }
  3179                           ;main.c: 1140: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3180  015A  0819               	movf	25,w	;volatile
  3181  015B  1283               	bcf	3,5	;RP0=0, select bank0
  3182  015C  00E7               	movwf	ADC_Sample@ad_temp	;volatile
  3183  015D  01E8               	clrf	ADC_Sample@ad_temp+1	;volatile
  3184  015E  0EE7               	swapf	ADC_Sample@ad_temp,f	;volatile
  3185  015F  0EE8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3186  0160  30F0               	movlw	240
  3187  0161  05E8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3188  0162  0867               	movf	ADC_Sample@ad_temp,w	;volatile
  3189  0163  390F               	andlw	15
  3190  0164  04E8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3191  0165  30F0               	movlw	240
  3192  0166  05E7               	andwf	ADC_Sample@ad_temp,f	;volatile
  3193  0167  1683               	bsf	3,5	;RP0=1, select bank1
  3194  0168  0E18               	swapf	24,w	;volatile
  3195  0169  390F               	andlw	15
  3196  016A  1283               	bcf	3,5	;RP0=0, select bank0
  3197  016B  07E7               	addwf	ADC_Sample@ad_temp,f	;volatile
  3198  016C  1803               	skipnc
  3199  016D  0AE8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3200                           
  3201                           ;main.c: 1142: if (0 == admax)
  3202  016E  0865               	movf	ADC_Sample@admax,w	;volatile
  3203  016F  0466               	iorwf	ADC_Sample@admax+1,w	;volatile
  3204  0170  1D03               	btfss	3,2
  3205  0171  2974               	goto	l3062
  3206                           
  3207                           ;main.c: 1143: {
  3208                           ;main.c: 1144: admax = ad_temp;
  3209  0172  2201               	fcall	PL12	;call to abstracted procedure
  3210  0173  2986               	goto	l3068
  3211  0174                     l3062:	
  3212                           ;main.c: 1146: }
  3213                           
  3214                           ;main.c: 1145: admin = ad_temp;
  3215                           
  3216                           
  3217                           ;main.c: 1147: else if (ad_temp > admax)
  3218  0174  0868               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3219  0175  0266               	subwf	ADC_Sample@admax+1,w	;volatile
  3220  0176  1D03               	skipz
  3221  0177  297A               	goto	u3025
  3222  0178  0867               	movf	ADC_Sample@ad_temp,w	;volatile
  3223  0179  0265               	subwf	ADC_Sample@admax,w	;volatile
  3224  017A                     u3025:	
  3225  017A  1803               	skipnc
  3226  017B  297E               	goto	l3066
  3227                           
  3228                           ;main.c: 1148: admax = ad_temp;
  3229  017C  2201               	fcall	PL12	;call to abstracted procedure
  3230  017D  298A               	goto	l917
  3231  017E                     l3066:	
  3232                           
  3233                           ;main.c: 1149: else if (ad_temp < admin)
  3234  017E  0864               	movf	ADC_Sample@admin+1,w	;volatile
  3235  017F  0268               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3236  0180  1D03               	skipz
  3237  0181  2984               	goto	u3035
  3238  0182  0863               	movf	ADC_Sample@admin,w	;volatile
  3239  0183  0267               	subwf	ADC_Sample@ad_temp,w	;volatile
  3240  0184                     u3035:	
  3241  0184  1803               	skipnc
  3242  0185  298A               	goto	l917
  3243  0186                     l3068:	
  3244                           
  3245                           ;main.c: 1150: admin = ad_temp;
  3246  0186  0868               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3247  0187  00E4               	movwf	ADC_Sample@admin+1	;volatile
  3248  0188  0867               	movf	ADC_Sample@ad_temp,w	;volatile
  3249  0189  00E3               	movwf	ADC_Sample@admin	;volatile
  3250  018A                     l917:	
  3251                           
  3252                           ;main.c: 1152: adsum += ad_temp;
  3253  018A  0867               	movf	ADC_Sample@ad_temp,w	;volatile
  3254  018B  00D8               	movwf	??_ADC_Sample
  3255  018C  0868               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3256  018D  00D9               	movwf	??_ADC_Sample+1
  3257  018E  01DA               	clrf	??_ADC_Sample+2
  3258  018F  01DB               	clrf	??_ADC_Sample+3
  3259  0190  0858               	movf	??_ADC_Sample,w
  3260  0191  07DF               	addwf	ADC_Sample@adsum,f	;volatile
  3261  0192  0859               	movf	??_ADC_Sample+1,w
  3262  0193  1103               	clrz
  3263  0194  1803               	skipnc
  3264  0195  3E01               	addlw	1
  3265  0196  1D03               	btfss	3,2
  3266  0197  07E0               	addwf	ADC_Sample@adsum+1,f	;volatile
  3267  0198  085A               	movf	??_ADC_Sample+2,w
  3268  0199  1103               	clrz
  3269  019A  1803               	skipnc
  3270  019B  3E01               	addlw	1
  3271  019C  1D03               	btfss	3,2
  3272  019D  07E1               	addwf	ADC_Sample@adsum+2,f	;volatile
  3273  019E  085B               	movf	??_ADC_Sample+3,w
  3274  019F  1103               	clrz
  3275  01A0  1803               	skipnc
  3276  01A1  3E01               	addlw	1
  3277  01A2  1D03               	btfss	3,2
  3278  01A3  07E2               	addwf	ADC_Sample@adsum+3,f	;volatile
  3279  01A4  300A               	movlw	10
  3280  01A5  0ADE               	incf	ADC_Sample@i,f
  3281  01A6  025E               	subwf	ADC_Sample@i,w
  3282  01A7  1C03               	skipc
  3283  01A8  293A               	goto	l3044
  3284                           
  3285                           ;main.c: 1153: }
  3286                           ;main.c: 1154: adsum -= admax;
  3287  01A9  0865               	movf	ADC_Sample@admax,w	;volatile
  3288  01AA  00D8               	movwf	??_ADC_Sample
  3289  01AB  0866               	movf	ADC_Sample@admax+1,w	;volatile
  3290  01AC  21E9               	fcall	PL2	;call to abstracted procedure
  3291  01AD  1C03               	skipc
  3292  01AE  0F5B               	incfsz	??_ADC_Sample+3,w
  3293  01AF  02E2               	subwf	ADC_Sample@adsum+3,f	;volatile
  3294                           
  3295                           ;main.c: 1155: if (adsum >= admin)
  3296  01B0  0863               	movf	ADC_Sample@admin,w	;volatile
  3297  01B1  00D8               	movwf	??_ADC_Sample
  3298  01B2  0864               	movf	ADC_Sample@admin+1,w	;volatile
  3299  01B3  00D9               	movwf	??_ADC_Sample+1
  3300  01B4  01DA               	clrf	??_ADC_Sample+2
  3301  01B5  01DB               	clrf	??_ADC_Sample+3
  3302  01B6  085B               	movf	??_ADC_Sample+3,w
  3303  01B7  0262               	subwf	ADC_Sample@adsum+3,w	;volatile
  3304  01B8  1D03               	skipz
  3305  01B9  29C4               	goto	u3075
  3306  01BA  085A               	movf	??_ADC_Sample+2,w
  3307  01BB  0261               	subwf	ADC_Sample@adsum+2,w	;volatile
  3308  01BC  1D03               	skipz
  3309  01BD  29C4               	goto	u3075
  3310  01BE  0859               	movf	??_ADC_Sample+1,w
  3311  01BF  0260               	subwf	ADC_Sample@adsum+1,w	;volatile
  3312  01C0  1D03               	skipz
  3313  01C1  29C4               	goto	u3075
  3314  01C2  0858               	movf	??_ADC_Sample,w
  3315  01C3  025F               	subwf	ADC_Sample@adsum,w	;volatile
  3316  01C4                     u3075:	
  3317  01C4  1C03               	skipc
  3318  01C5  29CE               	goto	l921
  3319                           
  3320                           ;main.c: 1156: adsum -= admin;
  3321  01C6  0863               	movf	ADC_Sample@admin,w	;volatile
  3322  01C7  00D8               	movwf	??_ADC_Sample
  3323  01C8  0864               	movf	ADC_Sample@admin+1,w	;volatile
  3324  01C9  21E9               	fcall	PL2	;call to abstracted procedure
  3325  01CA  1C03               	skipc
  3326  01CB  0F5B               	incfsz	??_ADC_Sample+3,w
  3327  01CC  02E2               	subwf	ADC_Sample@adsum+3,f	;volatile
  3328  01CD  29D2               	goto	l3078
  3329  01CE                     l921:	
  3330                           
  3331                           ;main.c: 1157: else
  3332                           ;main.c: 1158: adsum = 0;
  3333  01CE  01DF               	clrf	ADC_Sample@adsum	;volatile
  3334  01CF  01E0               	clrf	ADC_Sample@adsum+1	;volatile
  3335  01D0  01E1               	clrf	ADC_Sample@adsum+2	;volatile
  3336  01D1  01E2               	clrf	ADC_Sample@adsum+3	;volatile
  3337  01D2                     l3078:	
  3338                           
  3339                           ;main.c: 1160: adresult = adsum >> 3;
  3340  01D2  085F               	movf	ADC_Sample@adsum,w	;volatile
  3341  01D3  00D8               	movwf	??_ADC_Sample
  3342  01D4  0860               	movf	ADC_Sample@adsum+1,w	;volatile
  3343  01D5  00D9               	movwf	??_ADC_Sample+1
  3344  01D6  0861               	movf	ADC_Sample@adsum+2,w	;volatile
  3345  01D7  00DA               	movwf	??_ADC_Sample+2
  3346  01D8  0862               	movf	ADC_Sample@adsum+3,w	;volatile
  3347  01D9  00DB               	movwf	??_ADC_Sample+3
  3348  01DA  3003               	movlw	3
  3349  01DB                     u3095:	
  3350  01DB  1003               	clrc
  3351  01DC  0CDB               	rrf	??_ADC_Sample+3,f
  3352  01DD  0CDA               	rrf	??_ADC_Sample+2,f
  3353  01DE  0CD9               	rrf	??_ADC_Sample+1,f
  3354  01DF  0CD8               	rrf	??_ADC_Sample,f
  3355  01E0  3EFF               	addlw	-1
  3356  01E1  1D03               	skipz
  3357  01E2  29DB               	goto	u3095
  3358  01E3  0859               	movf	??_ADC_Sample+1,w
  3359  01E4  00B5               	movwf	_adresult+1	;volatile
  3360  01E5  0858               	movf	??_ADC_Sample,w
  3361  01E6  00B4               	movwf	_adresult	;volatile
  3362                           
  3363                           ;main.c: 1162: adsum = 0;
  3364                           
  3365                           ;main.c: 1163: admin = 0;
  3366                           
  3367                           ;main.c: 1164: admax = 0;
  3368  01E7  21F8               	fcall	PL6	;call to abstracted procedure
  3369                           
  3370                           ;main.c: 1165: return 0xA5;
  3371  01E8  34A5               	retlw	165
  3372  01E9                     __end_of_ADC_Sample:	
  3373  01E9                     PL2:	
  3374  01E9  00D9               	movwf	??_ADC_Sample+1
  3375  01EA  01DA               	clrf	??_ADC_Sample+2
  3376  01EB  01DB               	clrf	??_ADC_Sample+3
  3377  01EC  0858               	movf	??_ADC_Sample,w
  3378  01ED  02DF               	subwf	ADC_Sample@adsum,f	;volatile
  3379  01EE  0859               	movf	??_ADC_Sample+1,w
  3380  01EF  1C03               	skipc
  3381  01F0  0F59               	incfsz	??_ADC_Sample+1,w
  3382  01F1  02E0               	subwf	ADC_Sample@adsum+1,f	;volatile
  3383  01F2  085A               	movf	??_ADC_Sample+2,w
  3384  01F3  1C03               	skipc
  3385  01F4  0F5A               	incfsz	??_ADC_Sample+2,w
  3386  01F5  02E1               	subwf	ADC_Sample@adsum+2,f	;volatile
  3387  01F6  085B               	movf	??_ADC_Sample+3,w
  3388  01F7  0008               	return
  3389  01F8                     __end_ofPL2:	
  3390  01F8                     PL6:	
  3391  01F8  01DF               	clrf	ADC_Sample@adsum	;volatile
  3392  01F9  01E0               	clrf	ADC_Sample@adsum+1	;volatile
  3393  01FA  01E1               	clrf	ADC_Sample@adsum+2	;volatile
  3394  01FB  01E2               	clrf	ADC_Sample@adsum+3	;volatile
  3395  01FC  01E3               	clrf	ADC_Sample@admin	;volatile
  3396  01FD  01E4               	clrf	ADC_Sample@admin+1	;volatile
  3397  01FE  01E5               	clrf	ADC_Sample@admax	;volatile
  3398  01FF  01E6               	clrf	ADC_Sample@admax+1	;volatile
  3399  0200  0008               	return
  3400  0201                     __end_ofPL6:	
  3401  0201                     PL12:	
  3402  0201  0868               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3403  0202  00E6               	movwf	ADC_Sample@admax+1	;volatile
  3404  0203  0867               	movf	ADC_Sample@ad_temp,w	;volatile
  3405  0204  00E5               	movwf	ADC_Sample@admax	;volatile
  3406  0205  0008               	return
  3407  0206                     __end_ofPL12:	
  3408                           
  3409                           	psect	text17
  3410  03E4                     __ptext17:	
  3411 ;; *************** function _Sleep_Mode *****************
  3412 ;; Defined at:
  3413 ;;		line 1024 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 100/0
  3424 ;;		On exit  : 100/100
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1
  3427 ;;      Params:         0       0       0
  3428 ;;      Locals:         0       0       0
  3429 ;;      Temps:          0       0       0
  3430 ;;      Totals:         0       0       0
  3431 ;;Total ram usage:        0 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    3
  3434 ;; This function calls:
  3435 ;;		_AD_Init
  3436 ;;		_Init_System
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           
  3443                           ;psect for function _Sleep_Mode
  3444  03E4                     _Sleep_Mode:	
  3445                           
  3446                           ;main.c: 1026: INTCON = 0;
  3447                           
  3448                           ;incstack = 0
  3449                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3450  03E4  018B               	clrf	11	;volatile
  3451                           
  3452                           ;main.c: 1028: OPTION_REG = 0;
  3453  03E5  0181               	clrf	1	;volatile
  3454                           
  3455                           ;main.c: 1030: WPUA = 0B00000000;
  3456  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  3457  03E7  0188               	clrf	8	;volatile
  3458                           
  3459                           ;main.c: 1031: TRISA = 0x07;
  3460  03E8  3007               	movlw	7
  3461                           
  3462                           ;main.c: 1032: TRISB = 0x04;
  3463                           
  3464                           ;main.c: 1034: PORTA = 0X00;
  3465                           
  3466                           ;main.c: 1035: PORTB = 0X00;
  3467  03E9  241D               	fcall	PL4	;call to abstracted procedure
  3468                           
  3469                           ;main.c: 1036: WPUB = 0x04;
  3470  03EA  0088               	movwf	8	;volatile
  3471                           
  3472                           ;main.c: 1038: ADCON0 = 0;
  3473  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  3474  03EC  0195               	clrf	21	;volatile
  3475                           
  3476                           ;main.c: 1039: ADCON1 = 0;
  3477  03ED  0196               	clrf	22	;volatile
  3478                           
  3479                           ;main.c: 1041: PWMCON0 = 0;
  3480  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  3481  03EF  0195               	clrf	21	;volatile
  3482                           
  3483                           ;main.c: 1043: OSCCON = 0X70;
  3484  03F0  3070               	movlw	112
  3485  03F1  0094               	movwf	20	;volatile
  3486                           
  3487                           ;main.c: 1045: IOCA = 0x02;
  3488  03F2  3002               	movlw	2
  3489  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  3490  03F4  0089               	movwf	9	;volatile
  3491                           
  3492                           ;main.c: 1046: IOCB = 0x04;
  3493  03F5  3004               	movlw	4
  3494  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  3495  03F7  0089               	movwf	9	;volatile
  3496                           
  3497                           ;main.c: 1048: RAIE = 1;
  3498  03F8  158E               	bsf	14,3	;volatile
  3499                           
  3500                           ;main.c: 1049: PEIE = 1;
  3501  03F9  170B               	bsf	11,6	;volatile
  3502                           
  3503                           ;main.c: 1050: RBIE = 1;
  3504  03FA  158B               	bsf	11,3	;volatile
  3505                           
  3506                           ;main.c: 1051: GIE = 0;
  3507  03FB  138B               	bcf	11,7	;volatile
  3508                           
  3509                           ;main.c: 1053: PIE1 &= 0X08;
  3510  03FC  3008               	movlw	8
  3511  03FD  058E               	andwf	14,f	;volatile
  3512                           
  3513                           ;main.c: 1054: PIR1 = 0;
  3514  03FE  018D               	clrf	13	;volatile
  3515                           
  3516                           ;main.c: 1055: INTCON &= 0XC8;
  3517  03FF  30C8               	movlw	200
  3518  0400  058B               	andwf	11,f	;volatile
  3519                           
  3520                           ;main.c: 1057: PORTA;
  3521  0401  1683               	bsf	3,5	;RP0=1, select bank1
  3522  0402  0806               	movf	6,w	;volatile
  3523                           
  3524                           ;main.c: 1058: RAIF = 0;
  3525  0403  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0404  118D               	bcf	13,3	;volatile
  3527                           
  3528                           ;main.c: 1059: PORTB;
  3529  0405  0806               	movf	6,w	;volatile
  3530                           
  3531                           ;main.c: 1060: RBIF = 0;
  3532  0406  100B               	bcf	11,0	;volatile
  3533  0407  0064               	clrwdt	;# 
  3534  0408  0063               	sleep	;# 
  3535  0409  0000               	nop	;# 
  3536  040A  0064               	clrwdt	;# 
  3537  040B  0000               	nop	;# 
  3538  040C  0000               	nop	;# 
  3539  040D  0000               	nop	;# 
  3540  040E  0000               	nop	;# 
  3541  040F  0000               	nop	;# 
  3542                           
  3543                           ;main.c: 1072: if(RAIF) RAIF = 0;
  3544  0410  1283               	bcf	3,5	;RP0=0, select bank0
  3545  0411  198D               	btfsc	13,3	;volatile
  3546  0412  118D               	bcf	13,3	;volatile
  3547                           
  3548                           ;main.c: 1073: if(RBIF) RBIF = 0;
  3549  0413  180B               	btfsc	11,0	;volatile
  3550  0414  100B               	bcf	11,0	;volatile
  3551                           
  3552                           ;main.c: 1074: if(TMR2IF) TMR2IF = 0;
  3553  0415  188D               	btfsc	13,1	;volatile
  3554  0416  108D               	bcf	13,1	;volatile
  3555                           
  3556                           ;main.c: 1075: IOCA = 0B00000000;
  3557  0417  1683               	bsf	3,5	;RP0=1, select bank1
  3558  0418  0189               	clrf	9	;volatile
  3559                           
  3560                           ;main.c: 1076: IOCB = 0B00000000;
  3561  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3562  041A  0189               	clrf	9	;volatile
  3563                           
  3564                           ;main.c: 1077: Init_System();
  3565  041B  2563               	fcall	_Init_System
  3566                           
  3567                           ;main.c: 1078: AD_Init();
  3568  041C  2DAE               	ljmp	l2192
  3569  041D                     __end_of_Sleep_Mode:	
  3570  041D                     PL4:	
  3571  041D  0085               	movwf	5	;volatile
  3572  041E  3004               	movlw	4
  3573  041F  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0420  0085               	movwf	5	;volatile
  3575  0421  1683               	bsf	3,5	;RP0=1, select bank1
  3576  0422  0186               	clrf	6	;volatile
  3577  0423  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0424  0186               	clrf	6	;volatile
  3579  0425  0008               	return
  3580  0426                     __end_ofPL4:	
  3581                           
  3582                           	psect	text18
  3583  0563                     __ptext18:	
  3584 ;; *************** function _Init_System *****************
  3585 ;; Defined at:
  3586 ;;		line 869 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2
  3595 ;; Tracked objects:
  3596 ;;		On entry : 100/0
  3597 ;;		On exit  : 100/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1
  3600 ;;      Params:         0       0       0
  3601 ;;      Locals:         0       0       0
  3602 ;;      Temps:          0       0       0
  3603 ;;      Totals:         0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    2
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;;		_Sleep_Mode
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _Init_System
  3617  0563                     _Init_System:	
  3618                           
  3619                           ;incstack = 0
  3620                           ; Regs used in _Init_System: [wreg+status,2]
  3621  0563  0000               	nop	;# 
  3622  0564  0064               	clrwdt	;# 
  3623                           
  3624                           ;main.c: 873: OPTION_REG = 0;
  3625  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3626  0566  0181               	clrf	1	;volatile
  3627  0567  0064               	clrwdt	;# 
  3628                           
  3629                           ;main.c: 875: OSCCON = 0X72;
  3630  0568  3072               	movlw	114
  3631  0569  1283               	bcf	3,5	;RP0=0, select bank0
  3632  056A  0094               	movwf	20	;volatile
  3633                           
  3634                           ;main.c: 877: WPUA = 0B00000000;
  3635  056B  1683               	bsf	3,5	;RP0=1, select bank1
  3636  056C  0188               	clrf	8	;volatile
  3637                           
  3638                           ;main.c: 878: WPDA = 0x00;
  3639  056D  0187               	clrf	7	;volatile
  3640                           
  3641                           ;main.c: 879: WPUB = 0x04;
  3642  056E  3004               	movlw	4
  3643  056F  1283               	bcf	3,5	;RP0=0, select bank0
  3644  0570  0088               	movwf	8	;volatile
  3645                           
  3646                           ;main.c: 881: TRISA = 0x07;
  3647  0571  3007               	movlw	7
  3648  0572  1683               	bsf	3,5	;RP0=1, select bank1
  3649                           
  3650                           ;main.c: 882: TRISB = 0x04;
  3651                           
  3652                           ;main.c: 884: PORTA = 0X00;
  3653                           
  3654                           ;main.c: 885: PORTB = 0X00;
  3655  0573  241D               	fcall	PL4	;call to abstracted procedure
  3656                           
  3657                           ;main.c: 889: PR2 = 249;
  3658  0574  30F9               	movlw	249
  3659  0575  0091               	movwf	17	;volatile
  3660                           
  3661                           ;main.c: 890: TMR2IF = 0;
  3662  0576  108D               	bcf	13,1	;volatile
  3663                           
  3664                           ;main.c: 891: TMR2IE = 1;
  3665  0577  148E               	bsf	14,1	;volatile
  3666                           
  3667                           ;main.c: 893: T2CON = 0B00000100;
  3668  0578  3004               	movlw	4
  3669  0579  0093               	movwf	19	;volatile
  3670                           
  3671                           ;main.c: 894: INTCON = 0XC0;
  3672  057A  30C0               	movlw	192
  3673  057B  008B               	movwf	11	;volatile
  3674  057C  0008               	return
  3675  057D                     __end_of_Init_System:	
  3676                           
  3677                           	psect	text19
  3678  05AE                     __ptext19:	
  3679 ;; *************** function _AD_Init *****************
  3680 ;; Defined at:
  3681 ;;		line 906 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 100/0
  3692 ;;		On exit  : 100/100
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         0       0       0
  3697 ;;      Temps:          0       0       0
  3698 ;;      Totals:         0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;;		_Sleep_Mode
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _AD_Init
  3712  05AE                     _AD_Init:	
  3713  05AE                     l2192:	
  3714                           ;incstack = 0
  3715                           ; Regs used in _AD_Init: [wreg+status,2]
  3716                           
  3717                           
  3718                           ;main.c: 939: ADCON0 = 0X41;
  3719  05AE  3041               	movlw	65
  3720  05AF  1683               	bsf	3,5	;RP0=1, select bank1
  3721  05B0  0095               	movwf	21	;volatile
  3722                           
  3723                           ;main.c: 956: ADCON1 = 0;
  3724  05B1  0196               	clrf	22	;volatile
  3725                           
  3726                           ;main.c: 957: ANSEL0 = 0X05;
  3727  05B2  3005               	movlw	5
  3728  05B3  0093               	movwf	19	;volatile
  3729                           
  3730                           ;main.c: 958: ANSEL1 = 0x00;
  3731  05B4  0194               	clrf	20	;volatile
  3732  05B5  0008               	return
  3733  05B6                     __end_of_AD_Init:	
  3734                           
  3735                           	psect	text20
  3736  050F                     __ptext20:	
  3737 ;; *************** function _Isr_Timer *****************
  3738 ;; Defined at:
  3739 ;;		line 128 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 100/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1
  3753 ;;      Params:         0       0       0
  3754 ;;      Locals:         0       0       0
  3755 ;;      Temps:          3       0       0
  3756 ;;      Totals:         3       0       0
  3757 ;;Total ram usage:        3 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    1
  3760 ;; This function calls:
  3761 ;;		_ledShow
  3762 ;; This function is called by:
  3763 ;;		Interrupt level 1
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _Isr_Timer
  3769  050F                     _Isr_Timer:	
  3770                           
  3771                           ;main.c: 130: if(TMR2IF)
  3772  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3773  0510  1C8D               	btfss	13,1	;volatile
  3774  0511  2D23               	goto	i1l686
  3775                           
  3776                           ;main.c: 131: {
  3777                           ;main.c: 132: TMR2IF = 0;
  3778  0512  108D               	bcf	13,1	;volatile
  3779                           
  3780                           ;main.c: 133: if(++intCount >= 160)
  3781  0513  30A0               	movlw	160
  3782  0514  0AD6               	incf	_intCount,f
  3783  0515  0256               	subwf	_intCount,w
  3784  0516  1C03               	skipc
  3785  0517  2D20               	goto	i1l2946
  3786  0518  3064               	movlw	100
  3787                           
  3788                           ;main.c: 134: {
  3789                           ;main.c: 135: intCount = 0;
  3790  0519  01D6               	clrf	_intCount
  3791                           
  3792                           ;main.c: 136: IntFlag = 1;
  3793  051A  01D4               	clrf	_IntFlag
  3794  051B  0AD4               	incf	_IntFlag,f
  3795                           
  3796                           ;main.c: 137: if(++count1s >= 100)
  3797  051C  0AD5               	incf	_count1s,f
  3798  051D  0255               	subwf	_count1s,w
  3799  051E  1803               	btfsc	3,0
  3800                           
  3801                           ;main.c: 138: {
  3802                           ;main.c: 139: count1s = 0;
  3803  051F  01D5               	clrf	_count1s
  3804  0520                     i1l2946:	
  3805                           
  3806                           ;main.c: 140: }
  3807                           ;main.c: 141: }
  3808                           ;main.c: 142: ledShow();
  3809  0520  2322               	fcall	_ledShow
  3810                           
  3811                           ;main.c: 143: intCount10++;
  3812  0521  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0522  0AD2               	incf	_intCount10,f
  3814  0523                     i1l686:	
  3815  0523  0872               	movf	??_Isr_Timer+2,w
  3816  0524  008A               	movwf	10
  3817  0525  0871               	movf	??_Isr_Timer+1,w
  3818  0526  0084               	movwf	4
  3819  0527  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3820  0528  0083               	movwf	3
  3821  0529  0EFE               	swapf	126,f
  3822  052A  0E7E               	swapf	126,w
  3823  052B  0009               	retfie
  3824  052C                     __end_of_Isr_Timer:	
  3825                           
  3826                           	psect	intentry
  3827  0004                     __pintentry:	
  3828                           ;incstack = 0
  3829                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3830                           
  3831  0004                     interrupt_function:	
  3832  007E                     saved_w	set	btemp
  3833  0004  00FE               	movwf	btemp
  3834  0005  0E03               	swapf	3,w
  3835  0006  00F0               	movwf	??_Isr_Timer
  3836  0007  0804               	movf	4,w
  3837  0008  00F1               	movwf	??_Isr_Timer+1
  3838  0009  080A               	movf	10,w
  3839  000A  00F2               	movwf	??_Isr_Timer+2
  3840  000B  2D0F               	ljmp	_Isr_Timer
  3841                           
  3842                           	psect	text21
  3843  0322                     __ptext21:	
  3844 ;; *************** function _ledShow *****************
  3845 ;; Defined at:
  3846 ;;		line 192 in file "C:\mcuproject\scm\zdt\D225_062B_SOP14\main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3855 ;; Tracked objects:
  3856 ;;		On entry : 100/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1
  3860 ;;      Params:         0       0       0
  3861 ;;      Locals:         0       0       0
  3862 ;;      Temps:          0       0       0
  3863 ;;      Totals:         0       0       0
  3864 ;;Total ram usage:        0 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_Isr_Timer
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function _ledShow
  3875  0322                     _ledShow:	
  3876                           
  3877                           ;main.c: 194: if(++ledCntTime > 5)
  3878                           
  3879                           ;incstack = 0
  3880                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3881  0322  3006               	movlw	6
  3882  0323  0ABC               	incf	_ledCntTime,f
  3883  0324  023C               	subwf	_ledCntTime,w
  3884  0325  1C03               	skipc
  3885  0326  0008               	return
  3886  0327  3006               	movlw	6
  3887                           
  3888                           ;main.c: 195: {
  3889                           ;main.c: 196: ledCntTime = 0;
  3890  0328  01BC               	clrf	_ledCntTime
  3891                           
  3892                           ;main.c: 197: if(++ledCnt > 5)
  3893  0329  0ACF               	incf	_ledCnt,f
  3894  032A  024F               	subwf	_ledCnt,w
  3895  032B  1803               	btfsc	3,0
  3896                           
  3897                           ;main.c: 198: {
  3898                           ;main.c: 199: ledCnt = 0;
  3899  032C  01CF               	clrf	_ledCnt
  3900                           
  3901                           ;main.c: 200: }
  3902                           ;main.c: 201: PORTB &= 0xDE;
  3903  032D  30DE               	movlw	222
  3904  032E  0586               	andwf	6,f	;volatile
  3905                           
  3906                           ;main.c: 202: TRISB |= 0x21;
  3907  032F  3021               	movlw	33
  3908  0330  0485               	iorwf	5,f	;volatile
  3909                           
  3910                           ;main.c: 203: PORTA &= 0xCF;
  3911  0331  30CF               	movlw	207
  3912  0332  1683               	bsf	3,5	;RP0=1, select bank1
  3913  0333  0586               	andwf	6,f	;volatile
  3914                           
  3915                           ;main.c: 204: TRISA |= 0x30;
  3916  0334  3030               	movlw	48
  3917  0335  0485               	iorwf	5,f	;volatile
  3918                           
  3919                           ;main.c: 205: switch(ledCnt)
  3920  0336  2B7A               	goto	i1l2468
  3921  0337                     i1l2442:	
  3922                           
  3923                           ;main.c: 208: if(ledStep > 1)
  3924  0337  3002               	movlw	2
  3925  0338  0278               	subwf	_ledStep,w
  3926  0339  1C03               	skipc
  3927  033A  0008               	return
  3928                           
  3929                           ;main.c: 209: {
  3930                           ;main.c: 210: TRISB &= 0xDF;
  3931  033B  1285               	bcf	5,5	;volatile
  3932                           
  3933                           ;main.c: 211: TRISA &= 0xEF;
  3934  033C  1683               	bsf	3,5	;RP0=1, select bank1
  3935  033D  1205               	bcf	5,4	;volatile
  3936                           
  3937                           ;main.c: 212: RA4 = 1;
  3938  033E  1606               	bsf	6,4	;volatile
  3939                           
  3940                           ;main.c: 213: RB5 = 0;
  3941  033F  1283               	bcf	3,5	;RP0=0, select bank0
  3942  0340  1286               	bcf	6,5	;volatile
  3943  0341  0008               	return
  3944  0342                     i1l2446:	
  3945                           
  3946                           ;main.c: 217: if(ledStep > 2)
  3947  0342  3003               	movlw	3
  3948  0343  0278               	subwf	_ledStep,w
  3949  0344  1C03               	skipc
  3950  0345  0008               	return
  3951                           
  3952                           ;main.c: 218: {
  3953                           ;main.c: 219: TRISA &= 0xDF;
  3954  0346  1683               	bsf	3,5	;RP0=1, select bank1
  3955  0347  1285               	bcf	5,5	;volatile
  3956                           
  3957                           ;main.c: 220: TRISA &= 0xEF;
  3958  0348  1205               	bcf	5,4	;volatile
  3959                           
  3960                           ;main.c: 221: RA5 = 1;
  3961  0349  1686               	bsf	6,5	;volatile
  3962                           
  3963                           ;main.c: 222: RA4 = 0;
  3964  034A  1206               	bcf	6,4	;volatile
  3965  034B  0008               	return
  3966  034C                     i1l2450:	
  3967                           
  3968                           ;main.c: 226: if(ledStep > 3)
  3969  034C  3004               	movlw	4
  3970  034D  0278               	subwf	_ledStep,w
  3971  034E  1C03               	skipc
  3972  034F  0008               	return
  3973                           
  3974                           ;main.c: 227: {
  3975                           ;main.c: 228: TRISA &= 0xDF;
  3976  0350  1683               	bsf	3,5	;RP0=1, select bank1
  3977  0351  1285               	bcf	5,5	;volatile
  3978                           
  3979                           ;main.c: 229: TRISB &= 0xFE;
  3980  0352  1283               	bcf	3,5	;RP0=0, select bank0
  3981  0353  1005               	bcf	5,0	;volatile
  3982                           
  3983                           ;main.c: 230: RB0 = 1;
  3984  0354  1406               	bsf	6,0	;volatile
  3985                           
  3986                           ;main.c: 231: RA5 = 0;
  3987  0355  1683               	bsf	3,5	;RP0=1, select bank1
  3988  0356  1286               	bcf	6,5	;volatile
  3989  0357  0008               	return
  3990  0358                     i1l2454:	
  3991                           
  3992                           ;main.c: 235: if(ledStep > 4)
  3993  0358  3005               	movlw	5
  3994  0359  0278               	subwf	_ledStep,w
  3995  035A  1C03               	skipc
  3996  035B  0008               	return
  3997                           
  3998                           ;main.c: 236: {
  3999                           ;main.c: 237: TRISA &= 0xDF;
  4000  035C  1683               	bsf	3,5	;RP0=1, select bank1
  4001  035D  1285               	bcf	5,5	;volatile
  4002                           
  4003                           ;main.c: 238: TRISA &= 0xEF;
  4004  035E  1205               	bcf	5,4	;volatile
  4005                           
  4006                           ;main.c: 239: RA4 = 1;
  4007  035F  1606               	bsf	6,4	;volatile
  4008                           
  4009                           ;main.c: 240: RA5 = 0;
  4010  0360  1286               	bcf	6,5	;volatile
  4011  0361  0008               	return
  4012  0362                     i1l2458:	
  4013                           
  4014                           ;main.c: 244: if(ledStep > 5)
  4015  0362  3006               	movlw	6
  4016  0363  0278               	subwf	_ledStep,w
  4017  0364  1C03               	skipc
  4018  0365  0008               	return
  4019                           
  4020                           ;main.c: 245: {
  4021                           ;main.c: 246: TRISA &= 0xDF;
  4022  0366  1683               	bsf	3,5	;RP0=1, select bank1
  4023  0367  1285               	bcf	5,5	;volatile
  4024                           
  4025                           ;main.c: 247: TRISB &= 0xFE;
  4026  0368  1283               	bcf	3,5	;RP0=0, select bank0
  4027  0369  1005               	bcf	5,0	;volatile
  4028                           
  4029                           ;main.c: 248: RA5 = 1;
  4030  036A  1683               	bsf	3,5	;RP0=1, select bank1
  4031  036B  1686               	bsf	6,5	;volatile
  4032                           
  4033                           ;main.c: 249: RB0 = 0;
  4034  036C  1283               	bcf	3,5	;RP0=0, select bank0
  4035  036D  1006               	bcf	6,0	;volatile
  4036  036E  0008               	return
  4037  036F                     i1l2462:	
  4038                           
  4039                           ;main.c: 253: if(ledStep > 0)
  4040  036F  0878               	movf	_ledStep,w
  4041  0370  1903               	btfsc	3,2
  4042  0371  0008               	return
  4043                           
  4044                           ;main.c: 254: {
  4045                           ;main.c: 255: TRISB &= 0xDF;
  4046  0372  1285               	bcf	5,5	;volatile
  4047                           
  4048                           ;main.c: 256: TRISA &= 0xEF;
  4049  0373  1683               	bsf	3,5	;RP0=1, select bank1
  4050  0374  1205               	bcf	5,4	;volatile
  4051                           
  4052                           ;main.c: 257: RB5 = 1;
  4053  0375  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0376  1686               	bsf	6,5	;volatile
  4055                           
  4056                           ;main.c: 258: RA4 = 0;
  4057  0377  1683               	bsf	3,5	;RP0=1, select bank1
  4058  0378  1206               	bcf	6,4	;volatile
  4059  0379  0008               	return
  4060  037A                     i1l2468:	
  4061  037A  1283               	bcf	3,5	;RP0=0, select bank0
  4062  037B  084F               	movf	_ledCnt,w
  4063                           
  4064                           ; Switch size 1, requested type "space"
  4065                           ; Number of cases is 6, Range of values is 0 to 5
  4066                           ; switch strategies available:
  4067                           ; Name         Instructions Cycles
  4068                           ; direct_byte           12     6 (fixed)
  4069                           ; simple_byte           19    10 (average)
  4070                           ; jumptable            260     6 (fixed)
  4071                           ;	Chosen strategy is direct_byte
  4072  037C  0084               	movwf	4
  4073  037D  3006               	movlw	6
  4074  037E  0204               	subwf	4,w
  4075  037F  1803               	skipnc
  4076  0380  0008               	return
  4077  0381  3005               	movlw	high i1S3540
  4078  0382  008A               	movwf	10
  4079  0383  30C4               	movlw	low i1S3540
  4080  0384  0704               	addwf	4,w
  4081  0385  0082               	movwf	2
  4082  0386  0008               	return
  4083  0387                     __end_of_ledShow:	
  4084  007E                     btemp	set	126	;btemp
  4085  007E                     wtemp0	set	126
  4086                           
  4087                           	psect	swtext1
  4088  05C4                     __pswtext1:	
  4089  05C4                     i1S3540:	
  4090  05C4  2B6F               	ljmp	i1l2462
  4091  05C5  2B37               	ljmp	i1l2442
  4092  05C6  2B42               	ljmp	i1l2446
  4093  05C7  2B4C               	ljmp	i1l2450
  4094  05C8  2B58               	ljmp	i1l2454
  4095  05C9  2B62               	ljmp	i1l2458


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         60
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     21      78
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->___bmul
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3432
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1152
                                             17 BANK0      4     4      0
                         _ADC_Sample
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     912
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     912
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
     ___bmul
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     15      4E       4       97.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      59       7        0.0%
DATA                 0      0      59       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 09 16:14:55 2025

            _protectFlag 0051                        pc 0002           ___bmul@product 0074  
                     PL2 01E9                       PL4 041D                       PL6 01F8  
                     PL8 0117                       fsr 0004                      PL10 0585  
                    PL12 0201                      PL14 058C                      l911 014F  
                    l816 04C5                      l921 01CE                      l747 00F7  
                    l691 042B                      l917 018A                      l847 028A  
                    l695 0445                      _GIE 005F                      _RB0 0030  
                    _RB1 0031                      _RA4 0434                      _RA5 0435  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05B6                     l3030 0131  
                   l3102 0544                     l3202 0284                     l3044 013A  
                   l3028 012F                     l1188 0554                     l2252 0509  
                   l3116 04D9                     l3124 04EC                     l3062 0174  
                   l3054 015A                     l3038 0139                     l3214 02A0  
                   l3222 02A8                     l3142 0222                     l3302 007B  
                   l2192 05AE                     l2352 0592                     l3216 02A3  
                   l3144 0223                     l3304 007D                     l3240 0023  
                   l3066 017E                     l3410 030D                     l3154 0239  
                   l3226 02AF                     l2370 054E                     l3322 009F  
                   l3314 0097                     l3068 0186                     l3172 025E  
                   l3156 023A                     l3332 00BD                     l3316 0099  
                   l3078 01D2                     l3182 026A                     l3166 024B  
                   l2198 05BD                     l3342 00CA                     l3326 00A5  
                   l3094 0530                     l3430 0394                     l3416 031A  
                   l3176 0262                     l2384 0561                     l3344 00CC  
                   l3328 00AB                     l3280 0059                     l3256 0036  
                   l3440 03B2                     l3194 0278                     l3186 026E  
                   l3362 00F0                     l3338 00C7                     l3274 0055  
                   l3258 0038                     l3450 03C4                     l3356 00EB  
                   l3276 0057                     l3452 03C7                     l2820 048E  
                   l3198 027E                     l3382 0114                     l3358 00EC  
                   l3294 0070                     l3286 0063                     l3462 03D2  
                   l3438 03B0                     l2806 046F                     l3518 0462  
                   l3448 03C0                     l3458 03CC                     l2818 048C  
                   l2826 049E                     l3482 0433                     l2780 04B8  
                   l3398 02E0                     l2776 04B3                     l2784 04BC  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3025 017A                     u3035 0184                     u3075 01C4  
                   u4027 02B5                     u3155 04DF                     u4037 031F  
                   u3095 01DB                     u4047 012B                     _PIE1 000E  
                   u3265 0254                     u3375 0296                     u3635 00DF  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3745 02FF  
                   u3595 00BB                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 0426  
                   btemp 007E                     start 000C        ___bmul@multiplier 0075  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 0563  
        __end_of___lbmod 0548                    _T2CON 0013          __end_of___lwmod 04F1  
                  i1l686 0523                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0117          __end_of_ledShow 0387  
        __end_of_keyRead 050F                    pclath 000A          __end_of_pwmInit 05AE  
        __end_of_pwmStop 05BD                    status 0003                    wtemp0 007E  
        __end_of_workCtr 04A2          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 0464     __size_of_chrgPwmInit 0008  
   __size_of_chrgPwmStop 0007                   ??_main 0077                ??_AD_Init 0073  
    __end_of_Init_System 057D                   _ADCON0 0095                   _ADCON1 0096  
                 i1S3540 05C4                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _ANSEL1 0094                   _GODONE 04A9  
                 i1l2450 034C                   i1l2442 0337                   i1l2462 036F  
                 i1l2454 0358                   i1l2446 0342                   i1l2458 0362  
                 i1l2468 037A                   i1l2946 0520                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD2L 009B                   _PWMD3L 009C  
           ??_ADC_Sample 0058             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 03E4                   ___bmul 0590                ??___lbdiv 0074  
              ??___lbmod 0074                   _ledCnt 004F                   _ledCtr 0387  
              ??___lwmod 0077                   _keyCtr 04A2                   _jrStep 0039  
              ??_chrgCtr 0058                   _pwStep 0047                   _result 0032  
              ??_ledShow 0070                ??_keyRead 0073       __end_of_ADC_Sample 01E9  
                 saved_w 007E                ??_pwmInit 0073                ??_pwmStop 0073  
              ??_workCtr 0073         ___lbdiv@dividend 0074               _batADValue 002C  
        ___lbmod@divisor 0073  __end_of__initialization 0016          ___lbmod@counter 0059  
    ___bmul@multiplicand 0073          _workOverOutTime 0050           __pcstackCOMMON 0070  
     __size_of_checkOutA 00B3              _Init_System 0563               __end_ofPL2 01F8  
             __end_ofPL4 0426               __end_ofPL6 0201               __end_ofPL8 011D  
       ___lbdiv@quotient 0076        __end_of_Isr_Timer 052C               _checkBatAD 02B9  
             __pbssBANK0 0020             _chrgFullFlag 0053              ?_Sleep_Mode 0070  
             __pmaintext 0426                  ?___bmul 0073               __pintentry 0004  
                ?_ledCtr 0070             _chrgWaitTime 003E                  ?_keyCtr 0070  
             _ledCntTime 003C                  _AD_Init 05AE                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D        __end_of_checkOutA 02B9                  _IntFlag 0054  
             _intCount10 0052          ADC_Sample@adldo 0073          ADC_Sample@admax 0065  
        ADC_Sample@admin 0063          ADC_Sample@adsum 005F          __size_of___bmul 000E  
                ___lbdiv 0548                  ___lbmod 052C                  _addTime 0040  
                ___lwmod 04CD          __size_of_ledCtr 005D          __size_of_keyCtr 002B  
                _chrgCtr 0018               _lowBatFlag 003B                  __ptext1 0464  
                __ptext2 05A6                  __ptext3 0387                  __ptext4 04CD  
                __ptext5 052C                  __ptext6 04A2                  __ptext7 04F1  
                __ptext8 0018                  __ptext9 05B6                  _ledShow 0322  
                _ledStep 0078                  _count1s 0055                  _count5s 0026  
                _count8s 0022                  _maxDuty 004C                  _keyRead 04F1  
    __size_of_Sleep_Mode 0039                  _pwmInit 05A6                  _subTime 003F  
            ?_checkBatAD 0070                  _pwmStop 05B6                  clrloop0 059F  
                _workCtr 0464               _outADValue 002E     end_of_initialization 0016  
          _longPressFlag 004D            ??_chrgPwmInit 0073            ??_chrgPwmStop 0073  
       ___lbmod@dividend 0058              ___lbmod@rem 005A      __size_of_checkBatAD 0069  
         __end_of___bmul 059E             ?_Init_System 0070           __end_of_ledCtr 03E4  
         __end_of_keyCtr 04CD      __end_of_chrgPwmInit 0585      __end_of_chrgPwmStop 05C4  
            __end_ofPL10 058C              __end_ofPL12 0206              __end_ofPL14 0590  
    start_initialization 000D                _Isr_Timer 050F             ??_Sleep_Mode 0073  
               ??___bmul 0074                 ??_ledCtr 0077        ADC_Sample@ad_temp 0067  
               ??_keyCtr 0074                 ?_AD_Init 0070              __pbssCOMMON 0077  
              ___latbits 0000            __pcstackBANK0 0058       __end_of_Sleep_Mode 041D  
             ?_Isr_Timer 0070                _checkOutA 0206                __pnvBANK0 006D  
            _chrgMaxDuty 003D                _chrgMaxAD 0042              _chrgPwmFlag 0037  
            _chrgPwmInit 057D                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05BD                 ?___lwmod 0073                 ?_chrgCtr 0070  
              __pswtext1 05C4                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 006D           ADC_Sample@adch 005D  
               ?_pwmInit 0070                _fullCount 0028             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 0041                 ?_workCtr 0070  
            ADC_Sample@i 005E              ADC_Sample@j 005C        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 059E                _prePwStep 0077  
            _reChrgCount 0046                _sleepTime 003A                _overCount 004B  
      checkOutA@maxtempV 006B       __end_of_checkBatAD 0322     __size_of_Init_System 001A  
              _startTime 0049         __size_of_AD_Init 0008         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 011D         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwmod 0024              _lockLedStep 0045  
       __size_of_chrgCtr 00FF         __size_of_ledShow 0065         __size_of_keyRead 001E  
               _adresult 0034                 _chrgFlag 007A                 _chrgMode 0043  
               __ptext10 05BD                 __ptext11 057D                 __ptext20 050F  
               __ptext12 0548                 __ptext21 0322                 __ptext13 0206  
               __ptext14 0590                 __ptext15 02B9                 __ptext16 011D  
               __ptext17 03E4                 __ptext18 0563                 __ptext19 05AE  
       __size_of_pwmInit 0008         __size_of_pwmStop 0007                 _count50s 002A  
       __size_of_workCtr 003E                 _keyCount 004E                 _intCount 0056  
          __size_of_main 003E              ??_checkOutA 0069         checkOutA@maxAout 006C  
               _tempDuty 004A                 _test_adc 0057                 _power_ad 0030  
               _workStep 0079             _overChrgTime 0048             _motorPwmFlag 0036  
               intlevel1 0000         ___lwmod@dividend 0075              ?_ADC_Sample 0073  
            _preWorkStep 0038             ?_chrgPwmInit 0070             _overWorkTime 0024  
           ?_chrgPwmStop 0070              _showBatTime 0044               _OPTION_REG 0001  
        ___lwmod@divisor 0073          ___lwmod@counter 0058  
