
# 1 "C:\mcuproject\scm\zdt\SU005_8122_SOP8_\SU005_SC8P8122_sop8_\main.c"

# 26 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 5 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc8p8122ad.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char OPTION_REG @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char TRISB @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char WPDB @ 0x07;
volatile unsigned char WPUB @ 0x08;
volatile unsigned char IOCB @ 0x09;
volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0D;
volatile unsigned char PIE1 @ 0x0E;
volatile unsigned char CMPCON0 @ 0x0F;
volatile unsigned char CMPCON1 @ 0x10;
volatile unsigned char PR2 @ 0x11;
volatile unsigned char TMR2 @ 0x12;
volatile unsigned char T2CON @ 0x13;
volatile unsigned char OSCCON @ 0x14;
volatile unsigned char PWMCON0 @ 0x15;
volatile unsigned char PWMCON1 @ 0x16;
volatile unsigned char PWMTL @ 0x17;
volatile unsigned char PWMTH @ 0x18;
volatile unsigned char PWMD0L @ 0x19;
volatile unsigned char PWMD1L @ 0x1A;
volatile unsigned char PWMD4L @ 0x1B;
volatile unsigned char PWMT4L @ 0x1C;
volatile unsigned char PWMCON2 @ 0x1D;
volatile unsigned char PWMD01H @ 0x1E;
volatile unsigned char PWM01DT @ 0x1F;
volatile unsigned char TMR0 @ 0x81;
volatile unsigned char PWMD2L @ 0x9B;
volatile unsigned char PWMD3L @ 0x9C;
volatile unsigned char PWM23DT @ 0x9D;
volatile unsigned char PWMD23H @ 0x9E;
volatile unsigned char PIR2 @ 0x10F;
volatile unsigned char PIE2 @ 0x110;
volatile unsigned char KEYCON0 @ 0x111;
volatile unsigned char KEYCON1 @ 0x112;
volatile unsigned char KEYCON2 @ 0x113;
volatile unsigned char KEYDATAL @ 0x116;
volatile unsigned char KEYDATAH @ 0x117;

volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;


volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit C @ ((unsigned)&STATUS*8)+0;


volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;


volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB0 @ ((unsigned)&PORTB*8)+0;


volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
volatile bit WPDB2 @ ((unsigned)&WPDB*8)+2;
volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;


volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;


volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;


volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit RBIF @ ((unsigned)&INTCON*8)+0;


volatile bit CMPIF @ ((unsigned)&PIR1*8)+5;
volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;


volatile bit CMPIE @ ((unsigned)&PIE1*8)+5;
volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;


volatile bit CMPEN @ ((unsigned)&CMPCON0*8)+7;
volatile bit CMPPS @ ((unsigned)&CMPCON0*8)+6;
volatile bit CMPNS2 @ ((unsigned)&CMPCON0*8)+5;
volatile bit CMPNS1 @ ((unsigned)&CMPCON0*8)+4;
volatile bit CMPNS0 @ ((unsigned)&CMPCON0*8)+3;
volatile bit CMPNV @ ((unsigned)&CMPCON0*8)+2;
volatile bit CMPOUT @ ((unsigned)&CMPCON0*8)+1;
volatile bit CMPOEN @ ((unsigned)&CMPCON0*8)+0;


volatile bit CMPIM @ ((unsigned)&CMPCON1*8)+7;
volatile bit AN_EN @ ((unsigned)&CMPCON1*8)+6;
volatile bit RBIAS_H @ ((unsigned)&CMPCON1*8)+5;
volatile bit RBIAS_L @ ((unsigned)&CMPCON1*8)+4;
volatile bit LVDS3 @ ((unsigned)&CMPCON1*8)+3;
volatile bit LVDS2 @ ((unsigned)&CMPCON1*8)+2;
volatile bit LVDS1 @ ((unsigned)&CMPCON1*8)+1;
volatile bit LVDS0 @ ((unsigned)&CMPCON1*8)+0;


volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;


volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;


volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;


volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;


volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;


volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;


volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;


volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;


volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;


volatile bit TKIF @ ((unsigned)&PIR2*8)+6;


volatile bit TKIE @ ((unsigned)&PIE2*8)+6;


volatile bit KDONE @ ((unsigned)&KEYCON0*8)+7;
volatile bit KTOUT @ ((unsigned)&KEYCON0*8)+2;
volatile bit KCAP @ ((unsigned)&KEYCON0*8)+1;
volatile bit KEN @ ((unsigned)&KEYCON0*8)+0;


volatile bit KVREF1 @ ((unsigned)&KEYCON1*8)+7;
volatile bit KVREF0 @ ((unsigned)&KEYCON1*8)+6;
volatile bit KCLK1 @ ((unsigned)&KEYCON1*8)+5;
volatile bit KCLK0 @ ((unsigned)&KEYCON1*8)+4;
volatile bit KCHS3 @ ((unsigned)&KEYCON1*8)+3;
volatile bit KCHS2 @ ((unsigned)&KEYCON1*8)+2;
volatile bit KCHS1 @ ((unsigned)&KEYCON1*8)+1;
volatile bit KCHS0 @ ((unsigned)&KEYCON1*8)+0;


volatile bit CAP_LVBO2 @ ((unsigned)&KEYCON2*8)+7;
volatile bit CAP_LVBO1 @ ((unsigned)&KEYCON2*8)+6;
volatile bit CAP_LVBO0 @ ((unsigned)&KEYCON2*8)+5;
volatile bit TP_EN @ ((unsigned)&KEYCON2*8)+4;
volatile bit TKLDOEN @ ((unsigned)&KEYCON2*8)+3;
volatile bit TKEN @ ((unsigned)&KEYCON2*8)+0;


# 27 "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;


# 12 "C:\mcuproject\scm\zdt\SU005_8122_SOP8_\SU005_SC8P8122_sop8_\Touch_Kscan_Library.h"
#pragma warning disable 752,759

# 5 "C:\mcuproject\scm\zdt\SU005_8122_SOP8_\SU005_SC8P8122_sop8_\TouchKeyConst.h"
const unsigned char C_OPTION_REG_ = 0x0B;

# 18 "C:\mcuproject\scm\zdt\SU005_8122_SOP8_\SU005_SC8P8122_sop8_\Touch_Kscan_Library.h"
extern void CheckTouchKey(void);
extern void SystemEnterSleep();
extern volatile bit b_kerr;

# 26
extern volatile unsigned char KeyFlag[2];

# 63
const unsigned char Table_KeyChannel[] = {
0x40|0x00|0x00
};



const unsigned char Table_KeyDown[] = {
10
};

# 81
unsigned int KeyResSum[1];
unsigned int KeyOldValue0[1];
unsigned int KeyOldValue1[1];
unsigned int KeyOldValue2[1];
unsigned int KeyReference[1];
unsigned char KeyUpShake[1];

const unsigned int KeyValidTime = 60*(1000/4);
const unsigned char KeyTotalNumber = 1;
const unsigned char KeyShakeCounter = 2;
const unsigned char KeyValidNumber = 1;

const unsigned int KeyWakeUpEn = 0x0001;

const unsigned char KeyTPLDO = 0X60|0X10|0X08|0X00|0X01;


const unsigned char WaterModeSel = 1;

# 8 "C:\mcuproject\scm\zdt\SU005_8122_SOP8_\SU005_SC8P8122_sop8_\main.c"
volatile unsigned char MainTime;
volatile bit B_MainLoop,B_OnOff;
unsigned char workStep = 0;
unsigned char sleepTime = 0;
unsigned char closeTime = 0;
unsigned char ledDuty = 50;
unsigned char led1Duty = 50;
unsigned char led2Duty = 50;
unsigned char led3Duty = 50;
unsigned int keyCount = 0;
unsigned char modeStep = 0;
unsigned int count1s = 0;
unsigned int count300s = 0;
unsigned char lvdTime = 0;
unsigned char doubleKeyTime = 0;

void pwm1Init();
void pwm3Init();
void pwm13Init();
void pwm1Stop();
void pwm3Stop();
void pwm13Stop();
void checkLvd();


void Init_System()
{
asm("nop");
asm("clrwdt");
INTCON = 0;
OSCCON = 0X72;
OPTION_REG = 0;




TRISB = 0x00;
PORTB = 0;

PIE1 = 2;
PR2 = 250;
T2CON = 4;

INTCON = 0XC0;
}

# 62
void Refurbish_Sfr()
{

PIE1 = 2;
PR2 = 250;
INTCON = 0XC0;
if (4 != T2CON)
T2CON = 4;
}

# 76
void KeyServer()
{
static unsigned char KeyOldFlag = 0;
if (KeyFlag[0])
{
if ((KeyFlag[0] & 0x1))
{
keyCount++;

if(keyCount >= 250 && keyCount % 10 == 0 && workStep > 0)
{
if(modeStep == 0 && ledDuty < 90)
{
ledDuty++;
}
if(modeStep == 1 && ledDuty > 10)
{
ledDuty--;
}
PWMD23H = 0;
PWMD3L = ledDuty;
PWMD01H = 0;
PWMD1L = ledDuty;
}
B_OnOff = !B_OnOff;
}
}
else
{
KeyOldFlag = 0;
if(keyCount > 0 && keyCount < 250)
{
if(doubleKeyTime > 0)
{
if(count300s > 0)
{
count300s = 0;
}
else
{
count300s = 200;
}
doubleKeyTime = 0;
}
else
{
doubleKeyTime = 250;
}


}
if(keyCount > 250)
{
if(workStep > 0)
{
if(modeStep > 0)
{
modeStep = 0;
}
else
{
modeStep = 1;
}
}
}
keyCount = 0;
}
}

void pwm3Init()
{

TRISB |= 0x10;
PWMCON1 = 0B00000000;
PWMTH = 0X00;

PWMTL = 100;
PWMD23H = 0;
PWMD3L = ledDuty;
PWM23DT = 0X00;

PWMCON0 = 0X68;
PWMCON2 =0X00;
TRISB &= 0xEF;

}

void pwm3Stop()
{
PWMCON0 &= 0XF7;
RB4 = 0;


}

void pwm1Init()
{
TRISB |= 0x02;
PWMCON1 = 0B00000000;
PWMTH = 0X00;
PWMTL = 100;


PWMD01H = 0;
PWMD1L = ledDuty;
PWM01DT = 0X00;

PWMCON0 = 0X62;
PWMCON2 =0X00;
TRISB &= 0xFD;

}

void pwm1Stop()
{
PWMCON0 &= 0XFD;
RB1 = 0;

}

void pwm13Init()
{
TRISB |= 0x05;
PWMCON1 = 0B00000000;
PWMTH = 0X00;
PWMTL = 100;


PWMD23H = 0;
PWMD3L = ledDuty;
PWM23DT = 0X00;

PWMD01H = 0;
PWMD1L = ledDuty;
PWM01DT = 0X00;

PWMCON0 = 0X6A;
PWMCON2 =0X00;
TRISB &= 0xFA;

}

void pwm13Stop()
{
PWMCON0 &= 0XF5;
PORTB &= 0xED;

}

void checkLvd()
{
CMPCON1 = 0x28;
CMPCON0 = 0xA8;

}

# 236
void interrupt Isr_Timer()
{
if(TMR2IF)
{
TMR2IF = 0;
if(++MainTime >= 32)
{
MainTime = 0;
B_MainLoop = 1;
}
}
else
{
PIR1 = 0;
}

}

void WorkSleep()
{

static unsigned char time;



if(++time >= 125)
{
time = 0;
INTCON = 0;
PIE1 = 0;
PIE2 = 0;
PIR1 = 0;
PIR2 = 0;
T2CON = 0;



TRISB = 0x00;
PORTB = 0;
CMPCON1 = 0x00;
CMPCON0 = 0x00;

# 288
SystemEnterSleep();
if(RBIF)
{
RBIF = 0;
PORTB;
}

Refurbish_Sfr();
checkLvd();
}

}

void keyCtr()
{
if(doubleKeyTime > 0)
{
if(--doubleKeyTime == 0)
{
if(++workStep > 3)
{
workStep = 0;
}
if(workStep == 1)
{
ledDuty = led1Duty;
}
else if(workStep == 2)
{
ledDuty = led2Duty;
}
else if(workStep == 3)
{
ledDuty = led3Duty;
}
}
}
}

void workCtr()
{
if(++count1s >= 500)
{
count1s = 0;
if(count300s > 0)
{
count300s--;
}
}
if(count300s > 0)
{
RB2 = 1;
}
else
{
RB2 = 0;
}

if(workStep == 0)
{
pwm13Stop();
}
else if(workStep == 1)
{
pwm1Init();
pwm3Stop();
led1Duty = ledDuty;
}
else if(workStep == 2)
{
pwm3Init();
pwm1Stop();
led2Duty = ledDuty;
}
else if(workStep == 3)
{
pwm13Init();
led3Duty = ledDuty;

}
}

# 373
void main()
{
Init_System();
ledDuty = 50;
checkLvd();
while(1)
{
if(B_MainLoop)
{
B_MainLoop = 0;
asm("clrwdt");

CheckTouchKey();

Refurbish_Sfr();
KeyServer();
keyCtr();
workCtr();
if(workStep == 0 && keyCount == 0 && count300s == 0 && doubleKeyTime == 0)
{

pwm13Stop();
WorkSleep();
}
else
{
if(CMPCON0 & 0x02)
{
lvdTime = 0;
}
else
{
if(++lvdTime > 200)
{
lvdTime = 0;
workStep = 0;
}
}
}

}
}
}
