

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 12 16:32:00 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text16,local,class=CODE,merge=1,delta=2
    18                           	psect	text20,local,class=CODE,merge=1,delta=2
    19                           	psect	text21,local,class=CODE,merge=1,delta=2
    20                           	psect	text34,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	strings
    61  0800                     __pstrings:	
    62  0800                     stringtab:	
    63  0800                     __stringtab:	
    64  0800                     stringcode:	
    65                           ;	String table - string pointers are 1 byte each
    66                           
    67  0800                     stringdir:	
    68  0800  3008               	movlw	high stringdir
    69  0801  008A               	movwf	10
    70  0802  0804               	movf	4,w
    71  0803  0A84               	incf	4,f
    72  0804  0782               	addwf	2,f
    73  0805                     __stringbase:	
    74  0805  3400               	retlw	0
    75  0806                     __end_of__stringtab:	
    76  0806                     _Table_KeyFalg:	
    77  0806  3401               	retlw	1
    78  0807  3402               	retlw	2
    79  0808  3404               	retlw	4
    80  0809  3408               	retlw	8
    81  080A  3410               	retlw	16
    82  080B  3420               	retlw	32
    83  080C  3440               	retlw	64
    84  080D  3480               	retlw	128
    85  080E                     __end_of_Table_KeyFalg:	
    86  080E                     _Table_KeyDown:	
    87  080E  340A               	retlw	10
    88  080F  340A               	retlw	10
    89  0810                     __end_of_Table_KeyDown:	
    90  0810                     _Table_KeyCap:	
    91  0810  3402               	retlw	2
    92  0811  3402               	retlw	2
    93  0812                     __end_of_Table_KeyCap:	
    94  0812                     _Table_KeyChannel:	
    95  0812  3442               	retlw	66
    96  0813  3443               	retlw	67
    97  0814                     __end_of_Table_KeyChannel:	
    98                           
    99                           	psect	nvBANK1
   100  00B8                     __pnvBANK1:	
   101  00B8                     _firstLock:	
   102  00B8                     	ds	1
   103  00B9                     _firstTime:	
   104  00B9                     	ds	1
   105  001E                     _PWMD01H	set	30
   106  001D                     _PWMCON2	set	29
   107  001A                     _PWMD1L	set	26
   108  0019                     _PWMD0L	set	25
   109  0018                     _PWMTH	set	24
   110  0017                     _PWMTL	set	23
   111  0016                     _PWMCON1	set	22
   112  0015                     _PWMCON0	set	21
   113  0014                     _OSCCON	set	20
   114  0013                     _T2CON	set	19
   115  0011                     _PR2	set	17
   116  000E                     _PIE1	set	14
   117  000D                     _PIR1	set	13
   118  000B                     _INTCON	set	11
   119  0008                     _WPUB	set	8
   120  0006                     _PORTB	set	6
   121  0005                     _TRISB	set	5
   122  0001                     _OPTION_REG	set	1
   123  0069                     _TMR2IF	set	105
   124  006B                     _RAIF	set	107
   125  0058                     _RBIF	set	88
   126  0059                     _INTF	set	89
   127  005B                     _RBIE	set	91
   128  0048                     _IOCB0	set	72
   129  0036                     _RB6	set	54
   130  0028                     _TRISB0	set	40
   131  002E                     _TRISB6	set	46
   132  0099                     _ADRESH	set	153
   133  0098                     _ADRESL	set	152
   134  0096                     _ADCON1	set	150
   135  0095                     _ADCON0	set	149
   136  0086                     _PORTA	set	134
   137  0085                     _TRISA	set	133
   138  0081                     _TMR0	set	129
   139  04B2                     _LDO_EN	set	1202
   140  04B6                     _CHS4	set	1206
   141  04A8                     _ADON	set	1192
   142  04A9                     _GODONE	set	1193
   143  0431                     _RA1	set	1073
   144  0117                     _KEYDATAH	set	279
   145  0116                     _KEYDATAL	set	278
   146  0113                     _KEYCON2	set	275
   147  0112                     _KEYCON1	set	274
   148  0111                     _KEYCON0	set	273
   149  0110                     _PIE2	set	272
   150  010F                     _PIR2	set	271
   151  0106                     _PORTC	set	262
   152  0105                     _TRISC	set	261
   153                           
   154                           	psect	cinit
   155  000D                     start_initialization:	
   156                           ; #config settings
   157                           
   158  000D                     __initialization:	
   159  000D  3020               	movlw	low __pbssBANK0
   160                           
   161                           ; Clear objects allocated to BITCOMMON
   162  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   163                           
   164                           ; Clear objects allocated to COMMON
   165  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   166  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   167  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0012  1383               	bcf	3,7	;select IRP bank0
   171  0013  0084               	movwf	4
   172  0014  304D               	movlw	low (__pbssBANK0+45)
   173  0015  158A  271F  118A   	fcall	clear_ram0
   174                           
   175                           ; Clear objects allocated to BANK1
   176  0018  30A0               	movlw	low __pbssBANK1
   177  0019  0084               	movwf	4
   178  001A  30B4               	movlw	low (__pbssBANK1+20)
   179  001B  158A  271F         	fcall	clear_ram0
   180  001D                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  001D                     __end_of__initialization:	
   184  001D  0183               	clrf	3
   185  001E  158A  2F6D         	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	bitbssCOMMON
   188  03C0                     __pbitbssCOMMON:	
   189  03C0                     _b_ksleep:	
   190  03C0                     	ds	1
   191  03C1                     _b_kerr:	
   192  03C1                     	ds	1
   193  03C2                     _b_kclr:	
   194  03C2                     	ds	1
   195  03C3                     _b_kover1:	
   196  03C3                     	ds	1
   197  03C4                     _b_kover:	
   198  03C4                     	ds	1
   199  03C5                     _B_OnOff:	
   200  03C5                     	ds	1
   201  03C6                     _B_MainLoop:	
   202  03C6                     	ds	1
   203                           
   204                           	psect	bssCOMMON
   205  0079                     __pbssCOMMON:	
   206  0079                     _KeyData:	
   207  0079                     	ds	2
   208  007B                     _workStep:	
   209  007B                     	ds	1
   210                           
   211                           	psect	bssBANK0
   212  0020                     __pbssBANK0:	
   213  0020                     _KeyOldValue2:	
   214  0020                     	ds	4
   215  0024                     _KeyOldValue1:	
   216  0024                     	ds	4
   217  0028                     _KeyOldValue0:	
   218  0028                     	ds	4
   219  002C                     _KeyResSum:	
   220  002C                     	ds	4
   221  0030                     _KeyOldData:	
   222  0030                     	ds	2
   223  0032                     _power_ad:	
   224  0032                     	ds	2
   225  0034                     _shanshuoTime2:	
   226  0034                     	ds	2
   227  0036                     _shanshuoTime:	
   228  0036                     	ds	2
   229  0038                     _KeyFlag:	
   230  0038                     	ds	2
   231  003A                     TurnKeyFlags@F84:	
   232  003A                     	ds	1
   233  003B                     TurnKeyFlags@F83:	
   234  003B                     	ds	1
   235  003C                     CheckKeyOldValue@F77:	
   236  003C                     	ds	1
   237  003D                     _KeyMaxSub:	
   238  003D                     	ds	1
   239  003E                     _KeyCounter:	
   240  003E                     	ds	1
   241  003F                     KeyServer@KeyOldFlag:	
   242  003F                     	ds	1
   243  0040                     _test_adc:	
   244  0040                     	ds	1
   245  0041                     _lowBatLock:	
   246  0041                     	ds	1
   247  0042                     _chrgFullTime:	
   248  0042                     	ds	1
   249  0043                     _chrgFullFlag:	
   250  0043                     	ds	1
   251  0044                     _chrgFlag:	
   252  0044                     	ds	1
   253  0045                     _fanOverTime:	
   254  0045                     	ds	1
   255  0046                     _count10s:	
   256  0046                     	ds	1
   257  0047                     _fanDuty:	
   258  0047                     	ds	1
   259  0048                     _wuhuaFlag:	
   260  0048                     	ds	1
   261  0049                     _count1s:	
   262  0049                     	ds	1
   263  004A                     _MainTime:	
   264  004A                     	ds	1
   265  004B                     _adresult:	
   266  004B                     	ds	2
   267                           
   268                           	psect	bssBANK1
   269  00A0                     __pbssBANK1:	
   270  00A0                     _KeyReference:	
   271  00A0                     	ds	4
   272  00A4                     CheckValidTime@F87:	
   273  00A4                     	ds	2
   274  00A6                     _time:	
   275  00A6                     	ds	2
   276  00A8                     _result:	
   277  00A8                     	ds	2
   278  00AA                     _lowFanTime:	
   279  00AA                     	ds	2
   280  00AC                     _lowBatTime:	
   281  00AC                     	ds	2
   282  00AE                     _wuhuaValue:	
   283  00AE                     	ds	2
   284  00B0                     _fanValue:	
   285  00B0                     	ds	2
   286  00B2                     _KeyUpShake:	
   287  00B2                     	ds	2
   288                           
   289                           	psect	clrtext
   290  0F1F                     clear_ram0:	
   291                           ;	Called with FSR containing the base address, and
   292                           ;	W with the last address+1
   293                           
   294  0F1F  0064               	clrwdt	;clear the watchdog before getting into this loop
   295  0F20                     clrloop0:	
   296  0F20  0180               	clrf	0	;clear RAM location pointed to by FSR
   297  0F21  0A84               	incf	4,f	;increment pointer
   298  0F22  0604               	xorwf	4,w	;XOR with final address
   299  0F23  1903               	btfsc	3,2	;have we reached the end yet?
   300  0F24  3400               	retlw	0	;all done for this memory range, return
   301  0F25  0604               	xorwf	4,w	;XOR again to restore value
   302  0F26  2F20               	goto	clrloop0	;do the next byte
   303                           
   304                           	psect	cstackBANK1
   305  00B4                     __pcstackBANK1:	
   306  00B4                     workCtr@power_temp:	
   307                           
   308                           ; 4 bytes @ 0x0
   309  00B4                     	ds	4
   310                           
   311                           	psect	cstackCOMMON
   312  0070                     __pcstackCOMMON:	
   313  0070                     ?_SystemEnterSleep:	
   314  0070                     ?_CheckTouchKey:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_Init_System:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_Refurbish_Sfr:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_KeyServer:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_Isr_Timer:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ??_Isr_Timer:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_WorkSleep:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_chrgCtr:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_keyLedCtr:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_pwmInit:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_pwmStop:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_fanInit:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_fanStop:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_fanCtr:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_wuhuaCtr:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_workCtr:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_main:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_KeyIsIn:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_KeyClearOne:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_KeyClearIn:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_KeyStopClear:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_ClearResSum:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_GetTouchKeyValue:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_CheckOnceResult:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_CheckKeyOldValue:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_TurnKeyFlags:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_CheckValidTime:	
   393                           ; 1 bytes @ 0x0
   394                           
   395                           
   396                           ; 1 bytes @ 0x0
   397  0070                     	ds	2
   398  0072                     ??_Init_System:	
   399  0072                     ??_Refurbish_Sfr:	
   400                           ; 1 bytes @ 0x2
   401                           
   402  0072                     ??_KeyServer:	
   403                           ; 1 bytes @ 0x2
   404                           
   405  0072                     ?_ADC_Sample:	
   406                           ; 1 bytes @ 0x2
   407                           
   408  0072                     ??_chrgCtr:	
   409                           ; 1 bytes @ 0x2
   410                           
   411  0072                     ??_pwmInit:	
   412                           ; 1 bytes @ 0x2
   413                           
   414  0072                     ??_pwmStop:	
   415                           ; 1 bytes @ 0x2
   416                           
   417  0072                     ??_fanInit:	
   418                           ; 1 bytes @ 0x2
   419                           
   420  0072                     ??_fanStop:	
   421                           ; 1 bytes @ 0x2
   422                           
   423  0072                     ??_KeyIsIn:	
   424                           ; 1 bytes @ 0x2
   425                           
   426  0072                     ??_KeyClearOne:	
   427                           ; 1 bytes @ 0x2
   428                           
   429  0072                     ??_ClearResSum:	
   430                           ; 1 bytes @ 0x2
   431                           
   432  0072                     ?_KeyHave:	
   433                           ; 1 bytes @ 0x2
   434                           
   435  0072                     ??_CheckValidTime:	
   436                           ; 1 bytes @ 0x2
   437                           
   438  0072                     ??___lmul:	
   439                           ; 1 bytes @ 0x2
   440                           
   441  0072                     ?___lwmod:	
   442                           ; 1 bytes @ 0x2
   443                           
   444  0072                     ?___ftpack:	
   445                           ; 2 bytes @ 0x2
   446                           
   447  0072                     ADC_Sample@adldo:	
   448                           ; 3 bytes @ 0x2
   449                           
   450  0072                     KeyIsIn@46:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     KeyClearOne@49:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ClearResSum@56:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     KeyHave@59:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     ___lwmod@divisor:	
   463                           ; 2 bytes @ 0x2
   464                           
   465  0072                     ___ftpack@arg:	
   466                           ; 2 bytes @ 0x2
   467                           
   468  0072                     ___lmul@product:	
   469                           ; 3 bytes @ 0x2
   470                           
   471                           
   472                           ; 4 bytes @ 0x2
   473  0072                     	ds	1
   474  0073                     ??_ADC_Sample:	
   475  0073                     ??_KeyStopClear:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     ??_GetTouchKeyValue:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     KeyIsIn@45:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     KeyStopClear@53:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     GetTouchKeyValue@64:	
   488                           ; 1 bytes @ 0x3
   489                           
   490                           
   491                           ; 2 bytes @ 0x3
   492  0073                     	ds	1
   493  0074                     ??_KeyClearIn:	
   494  0074                     ??_KeyHave:	
   495                           ; 1 bytes @ 0x4
   496                           
   497  0074                     ??_CheckKeyOldValue:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0074                     KeyClearIn@51:	
   501                           ; 1 bytes @ 0x4
   502                           
   503  0074                     KeyHave@58:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0074                     ___lwmod@dividend:	
   507                           ; 1 bytes @ 0x4
   508                           
   509                           
   510                           ; 2 bytes @ 0x4
   511  0074                     	ds	1
   512  0075                     ??_TurnKeyFlags:	
   513  0075                     ___ftpack@exp:	
   514                           ; 1 bytes @ 0x5
   515                           
   516  0075                     GetTouchKeyValue@63:	
   517                           ; 1 bytes @ 0x5
   518                           
   519                           
   520                           ; 2 bytes @ 0x5
   521  0075                     	ds	1
   522  0076                     ??___lwmod:	
   523  0076                     ___ftpack@sign:	
   524                           ; 1 bytes @ 0x6
   525                           
   526  0076                     ___lwmod@counter:	
   527                           ; 1 bytes @ 0x6
   528                           
   529                           
   530                           ; 1 bytes @ 0x6
   531  0076                     	ds	1
   532  0077                     ??_keyLedCtr:	
   533  0077                     ??_fanCtr:	
   534                           ; 1 bytes @ 0x7
   535                           
   536  0077                     ??_wuhuaCtr:	
   537                           ; 1 bytes @ 0x7
   538                           
   539  0077                     ??_workCtr:	
   540                           ; 1 bytes @ 0x7
   541                           
   542  0077                     ??___lwtoft:	
   543                           ; 1 bytes @ 0x7
   544                           
   545  0077                     GetTouchKeyValue@62:	
   546                           ; 1 bytes @ 0x7
   547                           
   548                           
   549                           ; 1 bytes @ 0x7
   550  0077                     	ds	1
   551  0078                     ??_CheckTouchKey:	
   552  0078                     ??_WorkSleep:	
   553                           ; 1 bytes @ 0x8
   554                           
   555  0078                     ??_main:	
   556                           ; 1 bytes @ 0x8
   557                           
   558                           
   559                           	psect	cstackBANK0
   560  004D                     __pcstackBANK0:	
   561                           ; 1 bytes @ 0x8
   562                           
   563  004D                     ??_SystemEnterSleep:	
   564  004D                     ??___ftpack:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  004D                     ??_CheckOnceResult:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  004D                     ?___lmul:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  004D                     ADC_Sample@j:	
   574                           ; 4 bytes @ 0x0
   575                           
   576  004D                     CheckKeyOldValue@79:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  004D                     ___lmul@multiplier:	
   580                           ; 2 bytes @ 0x0
   581                           
   582                           
   583                           ; 4 bytes @ 0x0
   584  004D                     	ds	1
   585  004E                     ADC_Sample@adch:	
   586                           
   587                           ; 1 bytes @ 0x1
   588  004E                     	ds	1
   589  004F                     ADC_Sample@i:	
   590  004F                     CheckKeyOldValue@80:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  004F                     SystemEnterSleep@94:	
   594                           ; 2 bytes @ 0x2
   595                           
   596                           
   597                           ; 2 bytes @ 0x2
   598  004F                     	ds	1
   599  0050                     ?___lwtoft:	
   600  0050                     ___lwtoft@c:	
   601                           ; 3 bytes @ 0x3
   602                           
   603  0050                     ADC_Sample@adsum:	
   604                           ; 2 bytes @ 0x3
   605                           
   606                           
   607                           ; 4 bytes @ 0x3
   608  0050                     	ds	1
   609  0051                     CheckKeyOldValue@78:	
   610  0051                     CheckOnceResult@73:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0051                     SystemEnterSleep@93:	
   614                           ; 2 bytes @ 0x4
   615                           
   616  0051                     ___lmul@multiplicand:	
   617                           ; 2 bytes @ 0x4
   618                           
   619                           
   620                           ; 4 bytes @ 0x4
   621  0051                     	ds	2
   622  0053                     ?___ftdiv:	
   623  0053                     CheckOnceResult@70:	
   624                           ; 3 bytes @ 0x6
   625                           
   626  0053                     SystemEnterSleep@92:	
   627                           ; 1 bytes @ 0x6
   628                           
   629  0053                     ___ftdiv@f2:	
   630                           ; 2 bytes @ 0x6
   631                           
   632                           
   633                           ; 3 bytes @ 0x6
   634  0053                     	ds	1
   635  0054                     ADC_Sample@admin:	
   636  0054                     CheckOnceResult@72:	
   637                           ; 2 bytes @ 0x7
   638                           
   639                           
   640                           ; 2 bytes @ 0x7
   641  0054                     	ds	1
   642  0055                     SystemEnterSleep@91:	
   643                           
   644                           ; 1 bytes @ 0x8
   645  0055                     	ds	1
   646  0056                     CheckOnceResult@69:	
   647  0056                     ADC_Sample@admax:	
   648                           ; 1 bytes @ 0x9
   649                           
   650  0056                     ___ftdiv@f1:	
   651                           ; 2 bytes @ 0x9
   652                           
   653                           
   654                           ; 3 bytes @ 0x9
   655  0056                     	ds	1
   656  0057                     CheckOnceResult@71:	
   657                           
   658                           ; 2 bytes @ 0xA
   659  0057                     	ds	1
   660  0058                     ADC_Sample@ad_temp:	
   661                           
   662                           ; 2 bytes @ 0xB
   663  0058                     	ds	1
   664  0059                     ??___ftdiv:	
   665  0059                     CheckOnceResult@68:	
   666                           ; 1 bytes @ 0xC
   667                           
   668                           
   669                           ; 1 bytes @ 0xC
   670  0059                     	ds	1
   671  005A                     fanCtr@maxFanValue:	
   672  005A                     wuhuaCtr@wuhua_temp:	
   673                           ; 1 bytes @ 0xD
   674                           
   675                           
   676                           ; 4 bytes @ 0xD
   677  005A                     	ds	1
   678  005B                     fanCtr@fan_temp:	
   679                           
   680                           ; 4 bytes @ 0xE
   681  005B                     	ds	1
   682  005C                     ___ftdiv@cntr:	
   683                           
   684                           ; 1 bytes @ 0xF
   685  005C                     	ds	1
   686  005D                     ___ftdiv@f3:	
   687                           
   688                           ; 3 bytes @ 0x10
   689  005D                     	ds	3
   690  0060                     ___ftdiv@exp:	
   691                           
   692                           ; 1 bytes @ 0x13
   693  0060                     	ds	1
   694  0061                     ___ftdiv@sign:	
   695                           
   696                           ; 1 bytes @ 0x14
   697  0061                     	ds	1
   698  0062                     ?___fttol:	
   699  0062                     ___fttol@f1:	
   700                           ; 4 bytes @ 0x15
   701                           
   702                           
   703                           ; 3 bytes @ 0x15
   704  0062                     	ds	4
   705  0066                     ??___fttol:	
   706                           
   707                           ; 1 bytes @ 0x19
   708  0066                     	ds	3
   709  0069                     ___fttol@sign1:	
   710                           
   711                           ; 1 bytes @ 0x1C
   712  0069                     	ds	1
   713  006A                     ___fttol@lval:	
   714                           
   715                           ; 4 bytes @ 0x1D
   716  006A                     	ds	4
   717  006E                     ___fttol@exp1:	
   718                           
   719                           ; 1 bytes @ 0x21
   720  006E                     	ds	1
   721                           
   722                           	psect	maintext
   723  0F6D                     __pmaintext:	
   724 ;;
   725 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   726 ;;
   727 ;; *************** function _main *****************
   728 ;; Defined at:
   729 ;;		line 611 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : B00/0
   740 ;;		On exit  : 300/100
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   743 ;;      Params:         0       0       0       0
   744 ;;      Locals:         0       0       0       0
   745 ;;      Temps:          0       0       0       0
   746 ;;      Totals:         0       0       0       0
   747 ;;Total ram usage:        0 bytes
   748 ;; Hardware stack levels required when called:    6
   749 ;; This function calls:
   750 ;;		_CheckTouchKey
   751 ;;		_Init_System
   752 ;;		_KeyServer
   753 ;;		_Refurbish_Sfr
   754 ;;		_WorkSleep
   755 ;;		_chrgCtr
   756 ;;		_workCtr
   757 ;; This function is called by:
   758 ;;		Startup code after reset
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           
   763                           ;psect for function _main
   764  0F6D                     _main:	
   765                           
   766                           ;main.c: 613: Init_System();
   767                           
   768                           ;incstack = 0
   769                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   770  0F6D  118A  241D  158A   	fcall	_Init_System
   771  0F70  30C8               	movlw	200
   772                           
   773                           ;main.c: 614: firstLock = 1;
   774  0F71  01B8               	clrf	_firstLock^(0+128)
   775  0F72  0AB8               	incf	_firstLock^(0+128),f
   776                           
   777                           ;main.c: 615: firstTime = 200;
   778  0F73  00B9               	movwf	_firstTime^(0+128)
   779  0F74                     l4300:	
   780                           
   781                           ;main.c: 617: {
   782                           ;main.c: 618: if(B_MainLoop)
   783  0F74  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   784  0F75  2F74               	goto	l4300
   785                           
   786                           ;main.c: 619: {
   787                           ;main.c: 620: B_MainLoop = 0;
   788  0F76  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   789  0F77  0064               	clrwdt	;# 
   790                           
   791                           ;main.c: 623: CheckTouchKey();
   792  0F78  118A  2473  158A   	fcall	_CheckTouchKey
   793                           
   794                           ;main.c: 624: chrgCtr();
   795  0F7B  158A  2742  158A   	fcall	_chrgCtr
   796                           
   797                           ;main.c: 625: Refurbish_Sfr();
   798  0F7E  118A  278A  158A   	fcall	_Refurbish_Sfr
   799                           
   800                           ;main.c: 626: KeyServer();
   801  0F81  158A  27A5  158A   	fcall	_KeyServer
   802                           
   803                           ;main.c: 627: workCtr();
   804  0F84  118A  20F7  158A   	fcall	_workCtr
   805                           
   806                           ;main.c: 628: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   807  0F87  1683               	bsf	3,5	;RP0=1, select bank1
   808  0F88  0839               	movf	_firstTime^(0+128),w
   809  0F89  1D03               	btfss	3,2
   810  0F8A  2FA1               	goto	l4328
   811  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
   812  0F8C  0844               	movf	_chrgFlag,w
   813  0F8D  1D03               	btfss	3,2
   814  0F8E  2FA1               	goto	l4328
   815  0F8F  087B               	movf	_workStep,w
   816  0F90  1D03               	btfss	3,2
   817  0F91  2FA1               	goto	l4328
   818  0F92  0848               	movf	_wuhuaFlag,w
   819  0F93  1D03               	btfss	3,2
   820  0F94  2FA1               	goto	l4328
   821  0F95  0836               	movf	_shanshuoTime,w
   822  0F96  0437               	iorwf	_shanshuoTime+1,w
   823  0F97  1D03               	btfss	3,2
   824  0F98  2FA1               	goto	l4328
   825  0F99  0834               	movf	_shanshuoTime2,w
   826  0F9A  0435               	iorwf	_shanshuoTime2+1,w
   827  0F9B  1D03               	btfss	3,2
   828  0F9C  2FA1               	goto	l4328
   829                           
   830                           ;main.c: 629: {
   831                           ;main.c: 630: WorkSleep();
   832  0F9D  118A  243C  158A   	fcall	_WorkSleep
   833                           
   834                           ;main.c: 631: }
   835  0FA0  2F74               	goto	l4300
   836  0FA1                     l4328:	
   837                           
   838                           ;main.c: 632: else
   839                           ;main.c: 633: {
   840                           ;main.c: 634: time = 0;
   841  0FA1  1683               	bsf	3,5	;RP0=1, select bank1
   842  0FA2  01A6               	clrf	_time^(0+128)
   843  0FA3  01A7               	clrf	(_time+1)^(0+128)
   844  0FA4  2F74               	goto	l4300
   845  0FA5                     __end_of_main:	
   846                           
   847                           	psect	text2
   848  0020                     __ptext2:	
   849 ;; *************** function _wuhuaCtr *****************
   850 ;; Defined at:
   851 ;;		line 510 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  wuhua_temp      4   13[BANK0 ] volatile unsigned long 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 200/100
   862 ;;		On exit  : 200/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   865 ;;      Params:         0       0       0       0
   866 ;;      Locals:         0       4       0       0
   867 ;;      Temps:          0       0       0       0
   868 ;;      Totals:         0       4       0       0
   869 ;;Total ram usage:        4 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    2
   872 ;; This function calls:
   873 ;;		_ADC_Sample
   874 ;;		___lmul
   875 ;;		_pwmInit
   876 ;;		_pwmStop
   877 ;; This function is called by:
   878 ;;		_workCtr
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _wuhuaCtr
   884  0020                     _wuhuaCtr:	
   885  0020                     l3996:	
   886                           ;incstack = 0
   887                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
   888                           
   889                           
   890                           ;main.c: 512: if(count1s == 0)
   891  0020  1283               	bcf	3,5	;RP0=0, select bank0
   892  0021  0849               	movf	_count1s,w
   893  0022  1D03               	btfss	3,2
   894  0023  2829               	goto	l4002
   895                           
   896                           ;main.c: 513: {
   897                           ;main.c: 514: if(++count10s >= 10)
   898  0024  300A               	movlw	10
   899  0025  0AC6               	incf	_count10s,f
   900  0026  0246               	subwf	_count10s,w
   901  0027  1803               	btfsc	3,0
   902                           
   903                           ;main.c: 515: {
   904                           ;main.c: 516: count10s = 0;
   905  0028  01C6               	clrf	_count10s
   906  0029                     l4002:	
   907                           
   908                           ;main.c: 517: }
   909                           ;main.c: 518: }
   910                           ;main.c: 519: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
   911  0029  0348               	decf	_wuhuaFlag,w
   912  002A  1903               	btfsc	3,2
   913  002B  2834               	goto	l4008
   914  002C  3002               	movlw	2
   915  002D  0648               	xorwf	_wuhuaFlag,w
   916  002E  1D03               	btfss	3,2
   917  002F  2860               	goto	l4022
   918  0030  3005               	movlw	5
   919  0031  0246               	subwf	_count10s,w
   920  0032  1803               	skipnc
   921  0033  2860               	goto	l4022
   922  0034                     l4008:	
   923                           
   924                           ;main.c: 520: {
   925                           ;main.c: 521: pwmInit();
   926  0034  23C1  118A         	fcall	_pwmInit
   927  0036  3003               	movlw	3
   928                           
   929                           ;main.c: 535: test_adc = ADC_Sample(3, 0);
   930  0037  01F2               	clrf	ADC_Sample@adldo
   931  0038  2285  118A         	fcall	_ADC_Sample
   932  003A  00C0               	movwf	_test_adc	;volatile
   933                           
   934                           ;main.c: 536: if (0xA5 == test_adc)
   935  003B  30A5               	movlw	165
   936  003C  0640               	xorwf	_test_adc,w	;volatile
   937  003D  1D03               	btfss	3,2
   938  003E  0008               	return
   939                           
   940                           ;main.c: 537: {
   941                           ;main.c: 538: volatile unsigned long wuhua_temp;
   942                           ;main.c: 539: if(power_ad > 0)
   943  003F  0832               	movf	_power_ad,w	;volatile
   944  0040  0433               	iorwf	_power_ad+1,w	;volatile
   945  0041  1903               	btfsc	3,2
   946  0042  0008               	return
   947                           
   948                           ;main.c: 540: {
   949                           ;main.c: 541: wuhua_temp = (unsigned long)(1UL*adresult * power_ad)/4096;
   950  0043  23DC  118A         	fcall	PL10	;call to abstracted procedure
   951  0045  20C4  118A         	fcall	___lmul
   952  0047  0850               	movf	?___lmul+3,w
   953  0048  00DD               	movwf	wuhuaCtr@wuhua_temp+3	;volatile
   954  0049  084F               	movf	?___lmul+2,w
   955  004A  00DC               	movwf	wuhuaCtr@wuhua_temp+2	;volatile
   956  004B  084E               	movf	?___lmul+1,w
   957  004C  00DB               	movwf	wuhuaCtr@wuhua_temp+1	;volatile
   958  004D  084D               	movf	?___lmul,w
   959  004E  00DA               	movwf	wuhuaCtr@wuhua_temp	;volatile
   960  004F  300C               	movlw	12
   961  0050                     u3865:	
   962  0050  1003               	clrc
   963  0051  0CDD               	rrf	wuhuaCtr@wuhua_temp+3,f	;volatile
   964  0052  0CDC               	rrf	wuhuaCtr@wuhua_temp+2,f	;volatile
   965  0053  0CDB               	rrf	wuhuaCtr@wuhua_temp+1,f	;volatile
   966  0054  0CDA               	rrf	wuhuaCtr@wuhua_temp,f	;volatile
   967  0055  3EFF               	addlw	-1
   968  0056  1D03               	skipz
   969  0057  2850               	goto	u3865
   970                           
   971                           ;main.c: 542: wuhuaValue = (unsigned int)(wuhua_temp);
   972  0058  085B               	movf	wuhuaCtr@wuhua_temp+1,w	;volatile
   973  0059  1683               	bsf	3,5	;RP0=1, select bank1
   974  005A  00AF               	movwf	(_wuhuaValue+1)^(0+128)
   975  005B  1283               	bcf	3,5	;RP0=0, select bank0
   976  005C  085A               	movf	wuhuaCtr@wuhua_temp,w	;volatile
   977  005D  1683               	bsf	3,5	;RP0=1, select bank1
   978  005E  00AE               	movwf	_wuhuaValue^(0+128)
   979                           
   980                           ;main.c: 548: }
   981                           ;main.c: 549: }
   982  005F  0008               	return
   983  0060                     l4022:	
   984                           
   985                           ;main.c: 550: else
   986                           ;main.c: 551: {
   987                           ;main.c: 552: pwmStop();
   988  0060  2C18               	ljmp	l3758
   989  0061                     __end_of_wuhuaCtr:	
   990  0061                     __ptext7:	
   991 ;; *************** function _fanCtr *****************
   992 ;; Defined at:
   993 ;;		line 459 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
   998 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, status,2, status,0, pclath, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : 300/100
  1005 ;;		On exit  : 200/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1008 ;;      Params:         0       0       0       0
  1009 ;;      Locals:         0       5       0       0
  1010 ;;      Temps:          0       0       0       0
  1011 ;;      Totals:         0       5       0       0
  1012 ;;Total ram usage:        5 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    2
  1015 ;; This function calls:
  1016 ;;		_ADC_Sample
  1017 ;;		___lmul
  1018 ;;		_fanInit
  1019 ;;		_fanStop
  1020 ;; This function is called by:
  1021 ;;		_workCtr
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _fanCtr
  1027  0061                     _fanCtr:	
  1028                           
  1029                           ;main.c: 461: if(workStep > 0)
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1033  0061  087B               	movf	_workStep,w
  1034  0062  1903               	btfsc	3,2
  1035  0063  28BF               	goto	l3990
  1036                           
  1037                           ;main.c: 462: {
  1038                           ;main.c: 463: PORTA |= 0x04;
  1039  0064  1506               	bsf	6,2	;volatile
  1040                           
  1041                           ;main.c: 464: unsigned char maxFanValue = 48;
  1042  0065  3030               	movlw	48
  1043  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1044  0067  00DA               	movwf	fanCtr@maxFanValue
  1045                           
  1046                           ;main.c: 465: if(workStep == 1 || power_ad < 3350)
  1047  0068  037B               	decf	_workStep,w
  1048  0069  1903               	btfsc	3,2
  1049  006A  2872               	goto	l3956
  1050  006B  300D               	movlw	13
  1051  006C  0233               	subwf	_power_ad+1,w	;volatile
  1052  006D  3016               	movlw	22
  1053  006E  1903               	skipnz
  1054  006F  0232               	subwf	_power_ad,w	;volatile
  1055  0070  1803               	skipnc
  1056  0071  2874               	goto	l3958
  1057  0072                     l3956:	
  1058                           
  1059                           ;main.c: 466: {
  1060                           ;main.c: 467: maxFanValue = 32;
  1061  0072  3020               	movlw	32
  1062  0073  00DA               	movwf	fanCtr@maxFanValue
  1063  0074                     l3958:	
  1064  0074  300D               	movlw	13
  1065                           
  1066                           ;main.c: 468: }
  1067                           ;main.c: 469: test_adc = ADC_Sample(13, 0);
  1068  0075  01F2               	clrf	ADC_Sample@adldo
  1069  0076  2285  118A         	fcall	_ADC_Sample
  1070  0078  00C0               	movwf	_test_adc	;volatile
  1071                           
  1072                           ;main.c: 470: if (0xA5 == test_adc)
  1073  0079  30A5               	movlw	165
  1074  007A  0640               	xorwf	_test_adc,w	;volatile
  1075  007B  1D03               	btfss	3,2
  1076  007C  289D               	goto	l3970
  1077                           
  1078                           ;main.c: 471: {
  1079                           ;main.c: 472: volatile unsigned long fan_temp;
  1080                           ;main.c: 473: if(power_ad > 0)
  1081  007D  0832               	movf	_power_ad,w	;volatile
  1082  007E  0433               	iorwf	_power_ad+1,w	;volatile
  1083  007F  1903               	btfsc	3,2
  1084  0080  289D               	goto	l3970
  1085                           
  1086                           ;main.c: 474: {
  1087                           ;main.c: 475: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1088  0081  23DC  118A         	fcall	PL10	;call to abstracted procedure
  1089  0083  20C4  118A         	fcall	___lmul
  1090  0085  0850               	movf	?___lmul+3,w
  1091  0086  00DE               	movwf	fanCtr@fan_temp+3	;volatile
  1092  0087  084F               	movf	?___lmul+2,w
  1093  0088  00DD               	movwf	fanCtr@fan_temp+2	;volatile
  1094  0089  084E               	movf	?___lmul+1,w
  1095  008A  00DC               	movwf	fanCtr@fan_temp+1	;volatile
  1096  008B  084D               	movf	?___lmul,w
  1097  008C  00DB               	movwf	fanCtr@fan_temp	;volatile
  1098  008D  300C               	movlw	12
  1099  008E                     u3745:	
  1100  008E  1003               	clrc
  1101  008F  0CDE               	rrf	fanCtr@fan_temp+3,f	;volatile
  1102  0090  0CDD               	rrf	fanCtr@fan_temp+2,f	;volatile
  1103  0091  0CDC               	rrf	fanCtr@fan_temp+1,f	;volatile
  1104  0092  0CDB               	rrf	fanCtr@fan_temp,f	;volatile
  1105  0093  3EFF               	addlw	-1
  1106  0094  1D03               	skipz
  1107  0095  288E               	goto	u3745
  1108                           
  1109                           ;main.c: 476: fanValue = (unsigned int)(fan_temp);
  1110  0096  085C               	movf	fanCtr@fan_temp+1,w	;volatile
  1111  0097  1683               	bsf	3,5	;RP0=1, select bank1
  1112  0098  00B1               	movwf	(_fanValue+1)^(0+128)
  1113  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1114  009A  085B               	movf	fanCtr@fan_temp,w	;volatile
  1115  009B  1683               	bsf	3,5	;RP0=1, select bank1
  1116  009C  00B0               	movwf	_fanValue^(0+128)
  1117  009D                     l3970:	
  1118                           
  1119                           ;main.c: 477: }
  1120                           ;main.c: 478: }
  1121                           ;main.c: 479: if(fanValue > 1300)
  1122  009D  3005               	movlw	5
  1123  009E  1683               	bsf	3,5	;RP0=1, select bank1
  1124  009F  0231               	subwf	(_fanValue+1)^(0+128),w
  1125  00A0  3015               	movlw	21
  1126  00A1  1903               	skipnz
  1127  00A2  0230               	subwf	_fanValue^(0+128),w
  1128  00A3  1C03               	skipc
  1129  00A4  28B2               	goto	l3978
  1130                           
  1131                           ;main.c: 480: {
  1132                           ;main.c: 481: if(++fanOverTime > 50)
  1133  00A5  3033               	movlw	51
  1134  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1135  00A7  0AC5               	incf	_fanOverTime,f
  1136  00A8  0245               	subwf	_fanOverTime,w
  1137  00A9  1C03               	skipc
  1138  00AA  28B4               	goto	l3980
  1139  00AB  30C2               	movlw	194
  1140                           
  1141                           ;main.c: 482: {
  1142                           ;main.c: 483: fanOverTime = 0;
  1143  00AC  01C5               	clrf	_fanOverTime
  1144                           
  1145                           ;main.c: 484: workStep = 0;
  1146  00AD  01FB               	clrf	_workStep
  1147                           
  1148                           ;main.c: 485: shanshuoTime = 450;
  1149  00AE  00B6               	movwf	_shanshuoTime
  1150  00AF  3001               	movlw	1
  1151  00B0  00B7               	movwf	_shanshuoTime+1
  1152  00B1  28B4               	goto	l3980
  1153  00B2                     l3978:	
  1154                           
  1155                           ;main.c: 488: else
  1156                           ;main.c: 489: {
  1157                           ;main.c: 490: fanOverTime = 0;
  1158  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1159  00B3  01C5               	clrf	_fanOverTime
  1160  00B4                     l3980:	
  1161                           
  1162                           ;main.c: 491: }
  1163                           ;main.c: 492: if(fanDuty < maxFanValue)
  1164  00B4  085A               	movf	fanCtr@maxFanValue,w
  1165  00B5  0247               	subwf	_fanDuty,w
  1166  00B6  1803               	skipnc
  1167  00B7  28BA               	goto	l3984
  1168                           
  1169                           ;main.c: 493: {
  1170                           ;main.c: 494: fanDuty++;
  1171  00B8  0AC7               	incf	_fanDuty,f
  1172                           
  1173                           ;main.c: 495: }
  1174  00B9  28BE               	goto	l3988
  1175  00BA                     l3984:	
  1176                           
  1177                           ;main.c: 496: else if(fanDuty > maxFanValue)
  1178  00BA  0847               	movf	_fanDuty,w
  1179  00BB  025A               	subwf	fanCtr@maxFanValue,w
  1180  00BC  1C03               	btfss	3,0
  1181                           
  1182                           ;main.c: 497: {
  1183                           ;main.c: 498: fanDuty--;
  1184  00BD  03C7               	decf	_fanDuty,f
  1185  00BE                     l3988:	
  1186                           
  1187                           ;main.c: 499: }
  1188                           ;main.c: 500: fanInit();
  1189  00BE  2C07               	ljmp	l3764
  1190  00BF                     l3990:	
  1191                           ;main.c: 501: }
  1192                           
  1193                           
  1194                           ;main.c: 502: else
  1195                           ;main.c: 503: {
  1196                           ;main.c: 504: fanStop();
  1197  00BF  2413               	fcall	_fanStop
  1198                           
  1199                           ;main.c: 505: fanDuty = 0;
  1200  00C0  01C7               	clrf	_fanDuty
  1201                           
  1202                           ;main.c: 506: PORTA &= 0xFB;
  1203  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  1204  00C2  1106               	bcf	6,2	;volatile
  1205  00C3  0008               	return
  1206  00C4                     __end_of_fanCtr:	
  1207  00C4                     __ptext10:	
  1208 ;; *************** function ___lmul *****************
  1209 ;; Defined at:
  1210 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1213 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  product         4    2[COMMON] unsigned long 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  4    0[BANK0 ] unsigned long 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2, status,0
  1220 ;; Tracked objects:
  1221 ;;		On entry : 300/0
  1222 ;;		On exit  : 300/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1225 ;;      Params:         0       8       0       0
  1226 ;;      Locals:         4       0       0       0
  1227 ;;      Temps:          0       0       0       0
  1228 ;;      Totals:         4       8       0       0
  1229 ;;Total ram usage:       12 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_fanCtr
  1236 ;;		_wuhuaCtr
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function ___lmul
  1242  00C4                     ___lmul:	
  1243                           
  1244                           ;incstack = 0
  1245                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1246  00C4  01F2               	clrf	___lmul@product
  1247  00C5  01F3               	clrf	___lmul@product+1
  1248  00C6  01F4               	clrf	___lmul@product+2
  1249  00C7  01F5               	clrf	___lmul@product+3
  1250  00C8                     l1311:	
  1251  00C8  1C4D               	btfss	___lmul@multiplier,0
  1252  00C9  28DE               	goto	l3784
  1253  00CA  0851               	movf	___lmul@multiplicand,w
  1254  00CB  07F2               	addwf	___lmul@product,f
  1255  00CC  0852               	movf	___lmul@multiplicand+1,w
  1256  00CD  1103               	clrz
  1257  00CE  1803               	skipnc
  1258  00CF  3E01               	addlw	1
  1259  00D0  1D03               	btfss	3,2
  1260  00D1  07F3               	addwf	___lmul@product+1,f
  1261  00D2  0853               	movf	___lmul@multiplicand+2,w
  1262  00D3  1103               	clrz
  1263  00D4  1803               	skipnc
  1264  00D5  3E01               	addlw	1
  1265  00D6  1D03               	btfss	3,2
  1266  00D7  07F4               	addwf	___lmul@product+2,f
  1267  00D8  0854               	movf	___lmul@multiplicand+3,w
  1268  00D9  1103               	clrz
  1269  00DA  1803               	skipnc
  1270  00DB  3E01               	addlw	1
  1271  00DC  1D03               	btfss	3,2
  1272  00DD  07F5               	addwf	___lmul@product+3,f
  1273  00DE                     l3784:	
  1274  00DE  1003               	clrc
  1275  00DF  0DD1               	rlf	___lmul@multiplicand,f
  1276  00E0  0DD2               	rlf	___lmul@multiplicand+1,f
  1277  00E1  0DD3               	rlf	___lmul@multiplicand+2,f
  1278  00E2  0DD4               	rlf	___lmul@multiplicand+3,f
  1279  00E3  1003               	clrc
  1280  00E4  0CD0               	rrf	___lmul@multiplier+3,f
  1281  00E5  0CCF               	rrf	___lmul@multiplier+2,f
  1282  00E6  0CCE               	rrf	___lmul@multiplier+1,f
  1283  00E7  0CCD               	rrf	___lmul@multiplier,f
  1284  00E8  0850               	movf	___lmul@multiplier+3,w
  1285  00E9  044F               	iorwf	___lmul@multiplier+2,w
  1286  00EA  044E               	iorwf	___lmul@multiplier+1,w
  1287  00EB  044D               	iorwf	___lmul@multiplier,w
  1288  00EC  1D03               	skipz
  1289  00ED  28C8               	goto	l1311
  1290  00EE  0875               	movf	___lmul@product+3,w
  1291  00EF  00D0               	movwf	?___lmul+3
  1292  00F0  0874               	movf	___lmul@product+2,w
  1293  00F1  00CF               	movwf	?___lmul+2
  1294  00F2  0873               	movf	___lmul@product+1,w
  1295  00F3  00CE               	movwf	?___lmul+1
  1296  00F4  0872               	movf	___lmul@product,w
  1297  00F5  00CD               	movwf	?___lmul
  1298  00F6  0008               	return
  1299  00F7                     __end_of___lmul:	
  1300  00F7                     __ptext1:	
  1301 ;; *************** function _workCtr *****************
  1302 ;; Defined at:
  1303 ;;		line 557 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0, pclath, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 300/0
  1314 ;;		On exit  : 200/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1317 ;;      Params:         0       0       0       0
  1318 ;;      Locals:         0       0       4       0
  1319 ;;      Temps:          0       0       0       0
  1320 ;;      Totals:         0       0       4       0
  1321 ;;Total ram usage:        4 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    3
  1324 ;; This function calls:
  1325 ;;		_ADC_Sample
  1326 ;;		___ftdiv
  1327 ;;		___fttol
  1328 ;;		___lwtoft
  1329 ;;		_fanCtr
  1330 ;;		_keyLedCtr
  1331 ;;		_wuhuaCtr
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           
  1338                           ;psect for function _workCtr
  1339  00F7                     _workCtr:	
  1340                           
  1341                           ;incstack = 0
  1342                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1343  00F7  301F               	movlw	31
  1344                           
  1345                           ;main.c: 559: test_adc = ADC_Sample(31, 0);
  1346  00F8  01F2               	clrf	ADC_Sample@adldo
  1347  00F9  2285  118A         	fcall	_ADC_Sample
  1348  00FB  00C0               	movwf	_test_adc	;volatile
  1349                           
  1350                           ;main.c: 560: if (0xA5 == test_adc)
  1351  00FC  30A5               	movlw	165
  1352  00FD  0640               	xorwf	_test_adc,w	;volatile
  1353  00FE  1D03               	btfss	3,2
  1354  00FF  2931               	goto	l4226
  1355                           
  1356                           ;main.c: 561: {
  1357                           ;main.c: 562: volatile unsigned long power_temp;
  1358                           ;main.c: 564: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1359  0100  3096               	movlw	150
  1360  0101  01D6               	clrf	___ftdiv@f1
  1361  0102  00D7               	movwf	___ftdiv@f1+1
  1362  0103  304A               	movlw	74
  1363  0104  00D8               	movwf	___ftdiv@f1+2
  1364  0105  084C               	movf	_adresult+1,w	;volatile
  1365  0106  00D1               	movwf	___lwtoft@c+1
  1366  0107  084B               	movf	_adresult,w	;volatile
  1367  0108  00D0               	movwf	___lwtoft@c
  1368  0109  2237  118A         	fcall	___lwtoft
  1369  010B  0850               	movf	?___lwtoft,w
  1370  010C  00D3               	movwf	___ftdiv@f2
  1371  010D  0851               	movf	?___lwtoft+1,w
  1372  010E  00D4               	movwf	___ftdiv@f2+1
  1373  010F  0852               	movf	?___lwtoft+2,w
  1374  0110  00D5               	movwf	___ftdiv@f2+2
  1375  0111  217C  118A         	fcall	___ftdiv
  1376  0113  0853               	movf	?___ftdiv,w
  1377  0114  00E2               	movwf	___fttol@f1
  1378  0115  0854               	movf	?___ftdiv+1,w
  1379  0116  00E3               	movwf	___fttol@f1+1
  1380  0117  0855               	movf	?___ftdiv+2,w
  1381  0118  00E4               	movwf	___fttol@f1+2
  1382  0119  21DE  118A         	fcall	___fttol
  1383  011B  0865               	movf	?___fttol+3,w
  1384  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1385  011D  00B7               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1386  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1387  011F  0864               	movf	?___fttol+2,w
  1388  0120  1683               	bsf	3,5	;RP0=1, select bank1
  1389  0121  00B6               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1390  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0123  0863               	movf	?___fttol+1,w
  1392  0124  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0125  00B5               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1394  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0127  0862               	movf	?___fttol,w
  1396  0128  1683               	bsf	3,5	;RP0=1, select bank1
  1397  0129  00B4               	movwf	workCtr@power_temp^(0+128)	;volatile
  1398                           
  1399                           ;main.c: 565: power_ad = (unsigned int)(power_temp);
  1400  012A  0835               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1401  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1402  012C  00B3               	movwf	_power_ad+1	;volatile
  1403  012D  1683               	bsf	3,5	;RP0=1, select bank1
  1404  012E  0834               	movf	workCtr@power_temp^(0+128),w	;volatile
  1405  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1406  0130  00B2               	movwf	_power_ad	;volatile
  1407  0131                     l4226:	
  1408                           
  1409                           ;main.c: 566: }
  1410                           ;main.c: 567: if(workStep == 2 && power_ad < 3550)
  1411  0131  3002               	movlw	2
  1412  0132  067B               	xorwf	_workStep,w
  1413  0133  1D03               	btfss	3,2
  1414  0134  294C               	goto	l4236
  1415  0135  300D               	movlw	13
  1416  0136  0233               	subwf	_power_ad+1,w	;volatile
  1417  0137  30DE               	movlw	222
  1418  0138  1903               	skipnz
  1419  0139  0232               	subwf	_power_ad,w	;volatile
  1420  013A  1803               	skipnc
  1421  013B  294C               	goto	l4236
  1422                           
  1423                           ;main.c: 568: {
  1424                           ;main.c: 569: if(++lowFanTime > 1000)
  1425  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1426  013D  0AAA               	incf	_lowFanTime^(0+128),f
  1427  013E  1903               	skipnz
  1428  013F  0AAB               	incf	(_lowFanTime+1)^(0+128),f
  1429  0140  3003               	movlw	3
  1430  0141  022B               	subwf	(_lowFanTime+1)^(0+128),w
  1431  0142  30E9               	movlw	233
  1432  0143  1903               	skipnz
  1433  0144  022A               	subwf	_lowFanTime^(0+128),w
  1434  0145  1C03               	skipc
  1435  0146  294F               	goto	l4238
  1436                           
  1437                           ;main.c: 570: {
  1438                           ;main.c: 571: lowFanTime = 0;
  1439  0147  01AA               	clrf	_lowFanTime^(0+128)
  1440  0148  01AB               	clrf	(_lowFanTime+1)^(0+128)
  1441                           
  1442                           ;main.c: 572: workStep = 1;
  1443  0149  01FB               	clrf	_workStep
  1444  014A  0AFB               	incf	_workStep,f
  1445  014B  294F               	goto	l4238
  1446  014C                     l4236:	
  1447                           
  1448                           ;main.c: 575: else
  1449                           ;main.c: 576: {
  1450                           ;main.c: 577: lowFanTime = 0;
  1451  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1452  014D  01AA               	clrf	_lowFanTime^(0+128)
  1453  014E  01AB               	clrf	(_lowFanTime+1)^(0+128)
  1454  014F                     l4238:	
  1455                           
  1456                           ;main.c: 578: }
  1457                           ;main.c: 579: if(power_ad < 2900)
  1458  014F  300B               	movlw	11
  1459  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0151  0233               	subwf	_power_ad+1,w	;volatile
  1461  0152  3054               	movlw	84
  1462  0153  1903               	skipnz
  1463  0154  0232               	subwf	_power_ad,w	;volatile
  1464  0155  1803               	skipnc
  1465  0156  296A               	goto	l4246
  1466                           
  1467                           ;main.c: 580: {
  1468                           ;main.c: 581: if(++lowBatTime > 1000)
  1469  0157  1683               	bsf	3,5	;RP0=1, select bank1
  1470  0158  0AAC               	incf	_lowBatTime^(0+128),f
  1471  0159  1903               	skipnz
  1472  015A  0AAD               	incf	(_lowBatTime+1)^(0+128),f
  1473  015B  3003               	movlw	3
  1474  015C  022D               	subwf	(_lowBatTime+1)^(0+128),w
  1475  015D  30E9               	movlw	233
  1476  015E  1903               	skipnz
  1477  015F  022C               	subwf	_lowBatTime^(0+128),w
  1478  0160  1C03               	skipc
  1479  0161  296D               	goto	l4248
  1480                           
  1481                           ;main.c: 582: {
  1482                           ;main.c: 583: lowBatTime = 0;
  1483  0162  01AC               	clrf	_lowBatTime^(0+128)
  1484  0163  01AD               	clrf	(_lowBatTime+1)^(0+128)
  1485                           
  1486                           ;main.c: 584: lowBatLock = 1;
  1487  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0165  01C1               	clrf	_lowBatLock
  1489  0166  0AC1               	incf	_lowBatLock,f
  1490                           
  1491                           ;main.c: 585: workStep = 0;
  1492  0167  01FB               	clrf	_workStep
  1493                           
  1494                           ;main.c: 586: wuhuaFlag = 0;
  1495  0168  01C8               	clrf	_wuhuaFlag
  1496  0169  296D               	goto	l4248
  1497  016A                     l4246:	
  1498                           
  1499                           ;main.c: 589: else
  1500                           ;main.c: 590: {
  1501                           ;main.c: 591: lowBatTime = 0;
  1502  016A  1683               	bsf	3,5	;RP0=1, select bank1
  1503  016B  01AC               	clrf	_lowBatTime^(0+128)
  1504  016C  01AD               	clrf	(_lowBatTime+1)^(0+128)
  1505  016D                     l4248:	
  1506                           
  1507                           ;main.c: 592: }
  1508                           ;main.c: 593: if(firstTime > 0)
  1509  016D  1683               	bsf	3,5	;RP0=1, select bank1
  1510  016E  0839               	movf	_firstTime^(0+128),w
  1511  016F  1903               	btfsc	3,2
  1512  0170  2977               	goto	l4256
  1513                           
  1514                           ;main.c: 594: {
  1515                           ;main.c: 595: firstTime--;
  1516  0171  03B9               	decf	_firstTime^(0+128),f
  1517                           
  1518                           ;main.c: 596: PORTB = 0x00;
  1519  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0173  0186               	clrf	6	;volatile
  1521                           
  1522                           ;main.c: 597: PORTA = 0x00;
  1523  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1524  0175  0186               	clrf	6	;volatile
  1525                           
  1526                           ;main.c: 598: }
  1527  0176  0008               	return
  1528  0177                     l4256:	
  1529                           
  1530                           ;main.c: 599: else
  1531                           ;main.c: 600: {
  1532                           ;main.c: 601: keyLedCtr();
  1533  0177  2355  118A         	fcall	_keyLedCtr
  1534                           
  1535                           ;main.c: 602: fanCtr();
  1536  0179  2061  118A         	fcall	_fanCtr
  1537                           
  1538                           ;main.c: 603: wuhuaCtr();
  1539  017B  2820               	ljmp	l3996
  1540  017C                     __end_of_workCtr:	
  1541  017C                     __ptext14:	
  1542 ;; *************** function ___ftdiv *****************
  1543 ;; Defined at:
  1544 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  f2              3    6[BANK0 ] float 
  1547 ;;  f1              3    9[BANK0 ] float 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  f3              3   16[BANK0 ] float 
  1550 ;;  sign            1   20[BANK0 ] unsigned char 
  1551 ;;  exp             1   19[BANK0 ] unsigned char 
  1552 ;;  cntr            1   15[BANK0 ] unsigned char 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  3    6[BANK0 ] float 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 300/0
  1559 ;;		On exit  : 300/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1562 ;;      Params:         0       6       0       0
  1563 ;;      Locals:         0       6       0       0
  1564 ;;      Temps:          0       3       0       0
  1565 ;;      Totals:         0      15       0       0
  1566 ;;Total ram usage:       15 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    2
  1569 ;; This function calls:
  1570 ;;		___ftpack
  1571 ;; This function is called by:
  1572 ;;		_workCtr
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function ___ftdiv
  1578  017C                     ___ftdiv:	
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1582  017C  0856               	movf	___ftdiv@f1,w
  1583  017D  00D9               	movwf	??___ftdiv
  1584  017E  0857               	movf	___ftdiv@f1+1,w
  1585  017F  00DA               	movwf	??___ftdiv+1
  1586  0180  0858               	movf	___ftdiv@f1+2,w
  1587  0181  00DB               	movwf	??___ftdiv+2
  1588  0182  1003               	clrc
  1589  0183  0D5A               	rlf	??___ftdiv+1,w
  1590  0184  0D5B               	rlf	??___ftdiv+2,w
  1591  0185  00E0               	movwf	___ftdiv@exp
  1592  0186  0860               	movf	___ftdiv@exp,w
  1593  0187  1D03               	btfss	3,2
  1594  0188  298A               	goto	l4098
  1595  0189  2C03               	ljmp	PL40	;call to abstracted procedure
  1596  018A                     l4098:	
  1597  018A  0853               	movf	___ftdiv@f2,w
  1598  018B  00D9               	movwf	??___ftdiv
  1599  018C  0854               	movf	___ftdiv@f2+1,w
  1600  018D  00DA               	movwf	??___ftdiv+1
  1601  018E  0855               	movf	___ftdiv@f2+2,w
  1602  018F  00DB               	movwf	??___ftdiv+2
  1603  0190  1003               	clrc
  1604  0191  0D5A               	rlf	??___ftdiv+1,w
  1605  0192  0D5B               	rlf	??___ftdiv+2,w
  1606  0193  00E1               	movwf	___ftdiv@sign
  1607  0194  0861               	movf	___ftdiv@sign,w
  1608  0195  1D03               	btfss	3,2
  1609  0196  2998               	goto	l1510
  1610  0197  2C03               	ljmp	PL40	;call to abstracted procedure
  1611  0198                     l1510:	
  1612  0198  3089               	movlw	137
  1613  0199  01DD               	clrf	___ftdiv@f3
  1614  019A  01DE               	clrf	___ftdiv@f3+1
  1615  019B  01DF               	clrf	___ftdiv@f3+2
  1616  019C  0761               	addwf	___ftdiv@sign,w
  1617  019D  00D9               	movwf	??___ftdiv
  1618  019E  02E0               	subwf	___ftdiv@exp,f
  1619  019F  0858               	movf	___ftdiv@f1+2,w
  1620  01A0  00E1               	movwf	___ftdiv@sign
  1621  01A1  0855               	movf	___ftdiv@f2+2,w
  1622  01A2  06E1               	xorwf	___ftdiv@sign,f
  1623  01A3  3080               	movlw	128
  1624  01A4  05E1               	andwf	___ftdiv@sign,f
  1625  01A5  3018               	movlw	24
  1626  01A6  17D7               	bsf	___ftdiv@f1+1,7
  1627  01A7  01D8               	clrf	___ftdiv@f1+2
  1628  01A8  17D4               	bsf	___ftdiv@f2+1,7
  1629  01A9  01D5               	clrf	___ftdiv@f2+2
  1630  01AA  00DC               	movwf	___ftdiv@cntr
  1631  01AB                     l4120:	
  1632  01AB  1003               	clrc
  1633  01AC  0DDD               	rlf	___ftdiv@f3,f
  1634  01AD  0DDE               	rlf	___ftdiv@f3+1,f
  1635  01AE  0DDF               	rlf	___ftdiv@f3+2,f
  1636  01AF  0855               	movf	___ftdiv@f2+2,w
  1637  01B0  0258               	subwf	___ftdiv@f1+2,w
  1638  01B1  1D03               	skipz
  1639  01B2  29B9               	goto	u4025
  1640  01B3  0854               	movf	___ftdiv@f2+1,w
  1641  01B4  0257               	subwf	___ftdiv@f1+1,w
  1642  01B5  1D03               	skipz
  1643  01B6  29B9               	goto	u4025
  1644  01B7  0853               	movf	___ftdiv@f2,w
  1645  01B8  0256               	subwf	___ftdiv@f1,w
  1646  01B9                     u4025:	
  1647  01B9  1C03               	skipc
  1648  01BA  29C7               	goto	L4
  1649  01BB  0853               	movf	___ftdiv@f2,w
  1650  01BC  02D6               	subwf	___ftdiv@f1,f
  1651  01BD  0854               	movf	___ftdiv@f2+1,w
  1652  01BE  1C03               	skipc
  1653  01BF  0F54               	incfsz	___ftdiv@f2+1,w
  1654  01C0  02D7               	subwf	___ftdiv@f1+1,f
  1655  01C1  0855               	movf	___ftdiv@f2+2,w
  1656  01C2  1C03               	skipc
  1657  01C3  0A55               	incf	___ftdiv@f2+2,w
  1658  01C4  02D8               	subwf	___ftdiv@f1+2,f
  1659  01C5  145D               	bsf	___ftdiv@f3,0
  1660  01C6  1003               	clrc
  1661  01C7                     L4:	
  1662  01C7  0DD6               	rlf	___ftdiv@f1,f
  1663  01C8  0DD7               	rlf	___ftdiv@f1+1,f
  1664  01C9  0DD8               	rlf	___ftdiv@f1+2,f
  1665  01CA  0BDC               	decfsz	___ftdiv@cntr,f
  1666  01CB  29AB               	goto	l4120
  1667  01CC  085D               	movf	___ftdiv@f3,w
  1668  01CD  00F2               	movwf	___ftpack@arg
  1669  01CE  085E               	movf	___ftdiv@f3+1,w
  1670  01CF  00F3               	movwf	___ftpack@arg+1
  1671  01D0  085F               	movf	___ftdiv@f3+2,w
  1672  01D1  00F4               	movwf	___ftpack@arg+2
  1673  01D2  0860               	movf	___ftdiv@exp,w
  1674  01D3  00F5               	movwf	___ftpack@exp
  1675  01D4  0861               	movf	___ftdiv@sign,w
  1676  01D5  00F6               	movwf	___ftpack@sign
  1677  01D6  2247               	fcall	___ftpack
  1678  01D7  0872               	movf	?___ftpack,w
  1679  01D8  00D3               	movwf	?___ftdiv
  1680  01D9  0873               	movf	?___ftpack+1,w
  1681  01DA  00D4               	movwf	?___ftdiv+1
  1682  01DB  0874               	movf	?___ftpack+2,w
  1683  01DC  00D5               	movwf	?___ftdiv+2
  1684  01DD  0008               	return
  1685  01DE                     __end_of___ftdiv:	
  1686  01DE                     __ptext13:	
  1687 ;; *************** function ___fttol *****************
  1688 ;; Defined at:
  1689 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  f1              3   21[BANK0 ] float 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;  lval            4   29[BANK0 ] unsigned long 
  1694 ;;  exp1            1   33[BANK0 ] unsigned char 
  1695 ;;  sign1           1   28[BANK0 ] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  4   21[BANK0 ] long 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0
  1700 ;; Tracked objects:
  1701 ;;		On entry : 300/0
  1702 ;;		On exit  : 300/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1705 ;;      Params:         0       4       0       0
  1706 ;;      Locals:         0       6       0       0
  1707 ;;      Temps:          0       3       0       0
  1708 ;;      Totals:         0      13       0       0
  1709 ;;Total ram usage:       13 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_workCtr
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           
  1720                           ;psect for function ___fttol
  1721  01DE                     ___fttol:	
  1722                           
  1723                           ;incstack = 0
  1724                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1725  01DE  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1726  01E0  1003               	clrc
  1727  01E1  0D67               	rlf	??___fttol+1,w
  1728  01E2  0D68               	rlf	??___fttol+2,w
  1729  01E3  00EE               	movwf	___fttol@exp1
  1730  01E4  086E               	movf	___fttol@exp1,w
  1731  01E5  1D03               	btfss	3,2
  1732  01E6  29EC               	goto	l4138
  1733  01E7                     l4136:	
  1734  01E7  01E2               	clrf	?___fttol
  1735  01E8  01E3               	clrf	?___fttol+1
  1736  01E9  01E4               	clrf	?___fttol+2
  1737  01EA  01E5               	clrf	?___fttol+3
  1738  01EB  0008               	return
  1739  01EC                     l4138:	
  1740  01EC  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1741  01EE  3017               	movlw	23
  1742  01EF                     u4055:	
  1743  01EF  1003               	clrc
  1744  01F0  0CE8               	rrf	??___fttol+2,f
  1745  01F1  0CE7               	rrf	??___fttol+1,f
  1746  01F2  0CE6               	rrf	??___fttol,f
  1747  01F3  3EFF               	addlw	-1
  1748  01F4  1D03               	skipz
  1749  01F5  29EF               	goto	u4055
  1750  01F6  0866               	movf	??___fttol,w
  1751  01F7  00E9               	movwf	___fttol@sign1
  1752  01F8  17E3               	bsf	___fttol@f1+1,7
  1753  01F9  01E4               	clrf	___fttol@f1+2
  1754  01FA  0862               	movf	___fttol@f1,w
  1755  01FB  00EA               	movwf	___fttol@lval
  1756  01FC  0863               	movf	___fttol@f1+1,w
  1757  01FD  00EB               	movwf	___fttol@lval+1
  1758  01FE  0864               	movf	___fttol@f1+2,w
  1759  01FF  00EC               	movwf	___fttol@lval+2
  1760  0200  308E               	movlw	142
  1761  0201  01ED               	clrf	___fttol@lval+3
  1762  0202  02EE               	subwf	___fttol@exp1,f
  1763  0203  1FEE               	btfss	___fttol@exp1,7
  1764  0204  2A12               	goto	l4158
  1765  0205  086E               	movf	___fttol@exp1,w
  1766  0206  3A80               	xorlw	128
  1767  0207  3E8F               	addlw	143
  1768  0208  1C03               	btfss	3,0
  1769  0209  29E7               	goto	l4136
  1770  020A                     l4154:	
  1771  020A  1003               	clrc
  1772  020B  0CED               	rrf	___fttol@lval+3,f
  1773  020C  0CEC               	rrf	___fttol@lval+2,f
  1774  020D  0CEB               	rrf	___fttol@lval+1,f
  1775  020E  0CEA               	rrf	___fttol@lval,f
  1776  020F  0FEE               	incfsz	___fttol@exp1,f
  1777  0210  2A0A               	goto	l4154
  1778  0211  2A20               	goto	l4166
  1779  0212                     l4158:	
  1780  0212  3018               	movlw	24
  1781  0213  026E               	subwf	___fttol@exp1,w
  1782  0214  1803               	btfsc	3,0
  1783  0215  29E7               	goto	l4136
  1784  0216                     l4164:	
  1785  0216  086E               	movf	___fttol@exp1,w
  1786  0217  1903               	btfsc	3,2
  1787  0218  2A20               	goto	l4166
  1788  0219  1003               	clrc
  1789  021A  0DEA               	rlf	___fttol@lval,f
  1790  021B  0DEB               	rlf	___fttol@lval+1,f
  1791  021C  0DEC               	rlf	___fttol@lval+2,f
  1792  021D  0DED               	rlf	___fttol@lval+3,f
  1793  021E  03EE               	decf	___fttol@exp1,f
  1794  021F  2A16               	goto	l4164
  1795  0220                     l4166:	
  1796  0220  0869               	movf	___fttol@sign1,w
  1797  0221  1903               	btfsc	3,2
  1798  0222  2A2E               	goto	l4170
  1799  0223  09EA               	comf	___fttol@lval,f
  1800  0224  09EB               	comf	___fttol@lval+1,f
  1801  0225  09EC               	comf	___fttol@lval+2,f
  1802  0226  09ED               	comf	___fttol@lval+3,f
  1803  0227  0AEA               	incf	___fttol@lval,f
  1804  0228  1903               	skipnz
  1805  0229  0AEB               	incf	___fttol@lval+1,f
  1806  022A  1903               	skipnz
  1807  022B  0AEC               	incf	___fttol@lval+2,f
  1808  022C  1903               	skipnz
  1809  022D  0AED               	incf	___fttol@lval+3,f
  1810  022E                     l4170:	
  1811  022E  086D               	movf	___fttol@lval+3,w
  1812  022F  00E5               	movwf	?___fttol+3
  1813  0230  086C               	movf	___fttol@lval+2,w
  1814  0231  00E4               	movwf	?___fttol+2
  1815  0232  086B               	movf	___fttol@lval+1,w
  1816  0233  00E3               	movwf	?___fttol+1
  1817  0234  086A               	movf	___fttol@lval,w
  1818  0235  00E2               	movwf	?___fttol
  1819  0236  0008               	return
  1820  0237                     __end_of___fttol:	
  1821  0237                     __ptext12:	
  1822 ;; *************** function ___lwtoft *****************
  1823 ;; Defined at:
  1824 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  c               2    3[BANK0 ] unsigned int 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;		None
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  3    3[BANK0 ] float 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0, pclath, cstack
  1833 ;; Tracked objects:
  1834 ;;		On entry : 300/0
  1835 ;;		On exit  : 300/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1838 ;;      Params:         0       3       0       0
  1839 ;;      Locals:         0       0       0       0
  1840 ;;      Temps:          0       0       0       0
  1841 ;;      Totals:         0       3       0       0
  1842 ;;Total ram usage:        3 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    2
  1845 ;; This function calls:
  1846 ;;		___ftpack
  1847 ;; This function is called by:
  1848 ;;		_workCtr
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           
  1853                           ;psect for function ___lwtoft
  1854  0237                     ___lwtoft:	
  1855                           
  1856                           ;incstack = 0
  1857                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1858  0237  0850               	movf	___lwtoft@c,w
  1859  0238  00F2               	movwf	___ftpack@arg
  1860  0239  0851               	movf	___lwtoft@c+1,w
  1861  023A  00F3               	movwf	___ftpack@arg+1
  1862  023B  308E               	movlw	142
  1863  023C  01F4               	clrf	___ftpack@arg+2
  1864  023D  00F5               	movwf	___ftpack@exp
  1865  023E  01F6               	clrf	___ftpack@sign
  1866  023F  2247               	fcall	___ftpack
  1867  0240  0872               	movf	?___ftpack,w
  1868  0241  00D0               	movwf	?___lwtoft
  1869  0242  0873               	movf	?___ftpack+1,w
  1870  0243  00D1               	movwf	?___lwtoft+1
  1871  0244  0874               	movf	?___ftpack+2,w
  1872  0245  00D2               	movwf	?___lwtoft+2
  1873  0246  0008               	return
  1874  0247                     __end_of___lwtoft:	
  1875  0247                     __ptext15:	
  1876 ;; *************** function ___ftpack *****************
  1877 ;; Defined at:
  1878 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  arg             3    2[COMMON] unsigned um
  1881 ;;  exp             1    5[COMMON] unsigned char 
  1882 ;;  sign            1    6[COMMON] unsigned char 
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  3    2[COMMON] float 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2, status,0
  1889 ;; Tracked objects:
  1890 ;;		On entry : 300/0
  1891 ;;		On exit  : 300/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1894 ;;      Params:         5       0       0       0
  1895 ;;      Locals:         0       0       0       0
  1896 ;;      Temps:          0       3       0       0
  1897 ;;      Totals:         5       3       0       0
  1898 ;;Total ram usage:        8 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		___ftdiv
  1905 ;;		___lwtoft
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function ___ftpack
  1911  0247                     ___ftpack:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1915  0247  0875               	movf	___ftpack@exp,w
  1916  0248  1903               	btfsc	3,2
  1917  0249  2A4F               	goto	l1456
  1918  024A  0874               	movf	___ftpack@arg+2,w
  1919  024B  0473               	iorwf	___ftpack@arg+1,w
  1920  024C  0472               	iorwf	___ftpack@arg,w
  1921  024D  1D03               	skipz
  1922  024E  2A56               	goto	l3798
  1923  024F                     l1456:	
  1924  024F  01F2               	clrf	?___ftpack
  1925  0250  01F3               	clrf	?___ftpack+1
  1926  0251  01F4               	clrf	?___ftpack+2
  1927  0252  0008               	return
  1928  0253                     l3796:	
  1929  0253  0AF5               	incf	___ftpack@exp,f
  1930  0254  23F9  118A         	fcall	PL34	;call to abstracted procedure
  1931  0256                     l3798:	
  1932  0256  30FE               	movlw	254
  1933  0257  0574               	andwf	___ftpack@arg+2,w
  1934  0258  1903               	btfsc	3,2
  1935  0259  2A63               	goto	l3802
  1936  025A  2A53               	goto	l3796
  1937  025B                     l3800:	
  1938  025B  0AF5               	incf	___ftpack@exp,f
  1939  025C  0AF2               	incf	___ftpack@arg,f
  1940  025D  1903               	skipnz
  1941  025E  0AF3               	incf	___ftpack@arg+1,f
  1942  025F  1903               	skipnz
  1943  0260  0AF4               	incf	___ftpack@arg+2,f
  1944  0261  23F9  118A         	fcall	PL34	;call to abstracted procedure
  1945  0263                     l3802:	
  1946  0263  30FF               	movlw	255
  1947  0264  0574               	andwf	___ftpack@arg+2,w
  1948  0265  1903               	btfsc	3,2
  1949  0266  2A71               	goto	l3806
  1950  0267  2A5B               	goto	l3800
  1951  0268                     l3808:	
  1952  0268  3002               	movlw	2
  1953  0269  0275               	subwf	___ftpack@exp,w
  1954  026A  1C03               	btfss	3,0
  1955  026B  2A73               	goto	l1468
  1956  026C  03F5               	decf	___ftpack@exp,f
  1957  026D  1003               	clrc
  1958  026E  0DF2               	rlf	___ftpack@arg,f
  1959  026F  0DF3               	rlf	___ftpack@arg+1,f
  1960  0270  0DF4               	rlf	___ftpack@arg+2,f
  1961  0271                     l3806:	
  1962  0271  1FF3               	btfss	___ftpack@arg+1,7
  1963  0272  2A68               	goto	l3808
  1964  0273                     l1468:	
  1965  0273  1C75               	btfss	___ftpack@exp,0
  1966  0274  13F3               	bcf	___ftpack@arg+1,7
  1967  0275  1003               	clrc
  1968  0276  0CF5               	rrf	___ftpack@exp,f
  1969  0277  0875               	movf	___ftpack@exp,w
  1970  0278  00CF               	movwf	??___ftpack+2
  1971  0279  01CE               	clrf	??___ftpack+1
  1972  027A  01CD               	clrf	??___ftpack
  1973  027B  084D               	movf	??___ftpack,w
  1974  027C  04F2               	iorwf	___ftpack@arg,f
  1975  027D  084E               	movf	??___ftpack+1,w
  1976  027E  04F3               	iorwf	___ftpack@arg+1,f
  1977  027F  084F               	movf	??___ftpack+2,w
  1978  0280  04F4               	iorwf	___ftpack@arg+2,f
  1979  0281  0876               	movf	___ftpack@sign,w
  1980  0282  1D03               	btfss	3,2
  1981  0283  17F4               	bsf	___ftpack@arg+2,7
  1982  0284  0008               	return
  1983  0285                     __end_of___ftpack:	
  1984  0285                     __ptext11:	
  1985 ;; *************** function _ADC_Sample *****************
  1986 ;; Defined at:
  1987 ;;		line 268 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  adch            1    wreg     unsigned char 
  1990 ;;  adldo           1    2[COMMON] unsigned char 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  adch            1    1[BANK0 ] unsigned char 
  1993 ;;  j               1    0[BANK0 ] unsigned char 
  1994 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1995 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1996 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1997 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1998 ;;  i               1    2[BANK0 ] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      unsigned char 
  2001 ;; Registers used:
  2002 ;;		wreg, status,2, status,0
  2003 ;; Tracked objects:
  2004 ;;		On entry : 300/0
  2005 ;;		On exit  : 300/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2008 ;;      Params:         1       0       0       0
  2009 ;;      Locals:         0      13       0       0
  2010 ;;      Temps:          4       0       0       0
  2011 ;;      Totals:         5      13       0       0
  2012 ;;Total ram usage:       18 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    1
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_fanCtr
  2019 ;;		_wuhuaCtr
  2020 ;;		_workCtr
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           
  2025                           ;psect for function _ADC_Sample
  2026  0285                     _ADC_Sample:	
  2027                           
  2028                           ;incstack = 0
  2029                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2030                           ;ADC_Sample@adch stored from wreg
  2031  0285  00CE               	movwf	ADC_Sample@adch
  2032                           
  2033                           ;main.c: 270: volatile unsigned long adsum = 0;
  2034                           
  2035                           ;main.c: 271: volatile unsigned int admin = 0, admax = 0;
  2036  0286  23E9  118A         	fcall	PL18	;call to abstracted procedure
  2037                           
  2038                           ;main.c: 272: volatile unsigned int ad_temp = 0;
  2039  0288  01D8               	clrf	ADC_Sample@ad_temp	;volatile
  2040  0289  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  2041                           
  2042                           ;main.c: 274: if ((!LDO_EN) && (adldo & 0x04) )
  2043  028A  1683               	bsf	3,5	;RP0=1, select bank1
  2044  028B  1D16               	btfss	22,2	;volatile
  2045  028C  1D72               	btfss	ADC_Sample@adldo,2
  2046  028D  2A96               	goto	l3686
  2047                           
  2048                           ;main.c: 275: {
  2049                           ;main.c: 277: ADCON1 = adldo;
  2050  028E  0872               	movf	ADC_Sample@adldo,w
  2051  028F  0096               	movwf	22	;volatile
  2052                           
  2053                           ;main.c: 278: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2054  0290  3042               	movlw	66
  2055  0291  00F3               	movwf	??_ADC_Sample
  2056  0292                     u4347:	
  2057  0292  0BF3               	decfsz	??_ADC_Sample,f
  2058  0293  2A92               	goto	u4347
  2059  0294  0000               	nop
  2060                           
  2061                           ;main.c: 279: }
  2062  0295  2A98               	goto	l3688
  2063  0296                     l3686:	
  2064                           
  2065                           ;main.c: 280: else
  2066                           ;main.c: 281: ADCON1 = adldo;
  2067  0296  0872               	movf	ADC_Sample@adldo,w
  2068  0297  0096               	movwf	22	;volatile
  2069  0298                     l3688:	
  2070                           
  2071                           ;main.c: 283: if(adch & 0x10)
  2072  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2073  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2074  029A  1E4E               	btfss	ADC_Sample@adch,4
  2075  029B  2AA1               	goto	l3696
  2076                           
  2077                           ;main.c: 284: {
  2078                           ;main.c: 285: CHS4 = 1;
  2079  029C  1683               	bsf	3,5	;RP0=1, select bank1
  2080  029D  1716               	bsf	22,6	;volatile
  2081                           
  2082                           ;main.c: 286: adch &= 0x0f;
  2083  029E  300F               	movlw	15
  2084  029F  1283               	bcf	3,5	;RP0=0, select bank0
  2085  02A0  05CE               	andwf	ADC_Sample@adch,f
  2086  02A1                     l3696:	
  2087                           
  2088                           ;main.c: 289: for (i = 0; i < 10; i++)
  2089  02A1  01CF               	clrf	ADC_Sample@i
  2090  02A2                     l3702:	
  2091                           
  2092                           ;main.c: 290: {
  2093                           ;main.c: 291: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2094  02A2  084E               	movf	ADC_Sample@adch,w
  2095  02A3  00F3               	movwf	??_ADC_Sample
  2096  02A4  3001               	movlw	1
  2097  02A5  1003               	clrc
  2098  02A6                     L3:	
  2099  02A6  0DF3               	rlf	??_ADC_Sample,f
  2100  02A7  3EFF               	addlw	-1
  2101  02A8  1003               	clrc
  2102  02A9  1D03               	skipz
  2103  02AA  2AA6               	goto	L3
  2104  02AB  0D73               	rlf	??_ADC_Sample,w
  2105  02AC  3841               	iorlw	65
  2106  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2107  02AE  0095               	movwf	21	;volatile
  2108  02AF  0000               	nop	;# 
  2109  02B0  0000               	nop	;# 
  2110  02B1  0000               	nop	;# 
  2111  02B2  0000               	nop	;# 
  2112                           
  2113                           ;main.c: 296: GODONE = 1;
  2114  02B3  1683               	bsf	3,5	;RP0=1, select bank1
  2115  02B4  1303               	bcf	3,6	;RP1=0, select bank1
  2116  02B5  1495               	bsf	21,1	;volatile
  2117                           
  2118                           ;main.c: 298: unsigned char j = 0;
  2119  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  2120  02B7  01CD               	clrf	ADC_Sample@j
  2121  02B8                     l969:	
  2122                           ;main.c: 299: while (GODONE)
  2123                           
  2124  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2125  02B9  1C95               	btfss	21,1	;volatile
  2126  02BA  2AC2               	goto	l3712
  2127                           
  2128                           ;main.c: 300: {
  2129                           ;main.c: 301: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2130  02BB  2ABC               	nop2	;2 cycle nop
  2131  02BC  2ABD               	nop2	;2 cycle nop
  2132                           
  2133                           ;main.c: 303: if (0 == (--j))
  2134  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  2135  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  2136  02BF  0BCD               	decfsz	ADC_Sample@j,f
  2137  02C0  2AB8               	goto	l969
  2138                           
  2139                           ;main.c: 304: return 0;
  2140  02C1  3400               	retlw	0
  2141  02C2                     l3712:	
  2142                           
  2143                           ;main.c: 305: }
  2144                           ;main.c: 307: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2145  02C2  0819               	movf	25,w	;volatile
  2146  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2147  02C4  00D8               	movwf	ADC_Sample@ad_temp	;volatile
  2148  02C5  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  2149  02C6  0ED8               	swapf	ADC_Sample@ad_temp,f	;volatile
  2150  02C7  0ED9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2151  02C8  30F0               	movlw	240
  2152  02C9  05D9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2153  02CA  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2154  02CB  390F               	andlw	15
  2155  02CC  04D9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2156  02CD  30F0               	movlw	240
  2157  02CE  05D8               	andwf	ADC_Sample@ad_temp,f	;volatile
  2158  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2159  02D0  0E18               	swapf	24,w	;volatile
  2160  02D1  390F               	andlw	15
  2161  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2162  02D3  07D8               	addwf	ADC_Sample@ad_temp,f	;volatile
  2163  02D4  1803               	skipnc
  2164  02D5  0AD9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2165                           
  2166                           ;main.c: 309: if (0 == admax)
  2167  02D6  0856               	movf	ADC_Sample@admax,w	;volatile
  2168  02D7  0457               	iorwf	ADC_Sample@admax+1,w	;volatile
  2169  02D8  1D03               	btfss	3,2
  2170  02D9  2ADD               	goto	l3720
  2171                           
  2172                           ;main.c: 310: {
  2173                           ;main.c: 311: admax = ad_temp;
  2174  02DA  23FE  118A         	fcall	PL38	;call to abstracted procedure
  2175  02DC  2AF0               	goto	l3726
  2176  02DD                     l3720:	
  2177                           ;main.c: 313: }
  2178                           
  2179                           ;main.c: 312: admin = ad_temp;
  2180                           
  2181                           
  2182                           ;main.c: 314: else if (ad_temp > admax)
  2183  02DD  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2184  02DE  0257               	subwf	ADC_Sample@admax+1,w	;volatile
  2185  02DF  1D03               	skipz
  2186  02E0  2AE3               	goto	u3315
  2187  02E1  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2188  02E2  0256               	subwf	ADC_Sample@admax,w	;volatile
  2189  02E3                     u3315:	
  2190  02E3  1803               	skipnc
  2191  02E4  2AE8               	goto	l3724
  2192                           
  2193                           ;main.c: 315: admax = ad_temp;
  2194  02E5  23FE  118A         	fcall	PL38	;call to abstracted procedure
  2195  02E7  2AF4               	goto	l975
  2196  02E8                     l3724:	
  2197                           
  2198                           ;main.c: 316: else if (ad_temp < admin)
  2199  02E8  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2200  02E9  0259               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2201  02EA  1D03               	skipz
  2202  02EB  2AEE               	goto	u3325
  2203  02EC  0854               	movf	ADC_Sample@admin,w	;volatile
  2204  02ED  0258               	subwf	ADC_Sample@ad_temp,w	;volatile
  2205  02EE                     u3325:	
  2206  02EE  1803               	skipnc
  2207  02EF  2AF4               	goto	l975
  2208  02F0                     l3726:	
  2209                           
  2210                           ;main.c: 317: admin = ad_temp;
  2211  02F0  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2212  02F1  00D5               	movwf	ADC_Sample@admin+1	;volatile
  2213  02F2  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2214  02F3  00D4               	movwf	ADC_Sample@admin	;volatile
  2215  02F4                     l975:	
  2216                           
  2217                           ;main.c: 319: adsum += ad_temp;
  2218  02F4  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2219  02F5  00F3               	movwf	??_ADC_Sample
  2220  02F6  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2221  02F7  00F4               	movwf	??_ADC_Sample+1
  2222  02F8  01F5               	clrf	??_ADC_Sample+2
  2223  02F9  01F6               	clrf	??_ADC_Sample+3
  2224  02FA  0873               	movf	??_ADC_Sample,w
  2225  02FB  07D0               	addwf	ADC_Sample@adsum,f	;volatile
  2226  02FC  0874               	movf	??_ADC_Sample+1,w
  2227  02FD  1103               	clrz
  2228  02FE  1803               	skipnc
  2229  02FF  3E01               	addlw	1
  2230  0300  1D03               	btfss	3,2
  2231  0301  07D1               	addwf	ADC_Sample@adsum+1,f	;volatile
  2232  0302  0875               	movf	??_ADC_Sample+2,w
  2233  0303  1103               	clrz
  2234  0304  1803               	skipnc
  2235  0305  3E01               	addlw	1
  2236  0306  1D03               	btfss	3,2
  2237  0307  07D2               	addwf	ADC_Sample@adsum+2,f	;volatile
  2238  0308  0876               	movf	??_ADC_Sample+3,w
  2239  0309  1103               	clrz
  2240  030A  1803               	skipnc
  2241  030B  3E01               	addlw	1
  2242  030C  1D03               	btfss	3,2
  2243  030D  07D3               	addwf	ADC_Sample@adsum+3,f	;volatile
  2244  030E  300A               	movlw	10
  2245  030F  0ACF               	incf	ADC_Sample@i,f
  2246  0310  024F               	subwf	ADC_Sample@i,w
  2247  0311  1C03               	skipc
  2248  0312  2AA2               	goto	l3702
  2249                           
  2250                           ;main.c: 320: }
  2251                           ;main.c: 321: adsum -= admax;
  2252  0313  0856               	movf	ADC_Sample@admax,w	;volatile
  2253  0314  00F3               	movwf	??_ADC_Sample
  2254  0315  0857               	movf	ADC_Sample@admax+1,w	;volatile
  2255  0316  23CD  118A         	fcall	PL6	;call to abstracted procedure
  2256  0318  1C03               	skipc
  2257  0319  0F76               	incfsz	??_ADC_Sample+3,w
  2258  031A  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  2259                           
  2260                           ;main.c: 322: if (adsum >= admin)
  2261  031B  0854               	movf	ADC_Sample@admin,w	;volatile
  2262  031C  00F3               	movwf	??_ADC_Sample
  2263  031D  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2264  031E  00F4               	movwf	??_ADC_Sample+1
  2265  031F  01F5               	clrf	??_ADC_Sample+2
  2266  0320  01F6               	clrf	??_ADC_Sample+3
  2267  0321  0876               	movf	??_ADC_Sample+3,w
  2268  0322  0253               	subwf	ADC_Sample@adsum+3,w	;volatile
  2269  0323  1D03               	skipz
  2270  0324  2B2F               	goto	u3365
  2271  0325  0875               	movf	??_ADC_Sample+2,w
  2272  0326  0252               	subwf	ADC_Sample@adsum+2,w	;volatile
  2273  0327  1D03               	skipz
  2274  0328  2B2F               	goto	u3365
  2275  0329  0874               	movf	??_ADC_Sample+1,w
  2276  032A  0251               	subwf	ADC_Sample@adsum+1,w	;volatile
  2277  032B  1D03               	skipz
  2278  032C  2B2F               	goto	u3365
  2279  032D  0873               	movf	??_ADC_Sample,w
  2280  032E  0250               	subwf	ADC_Sample@adsum,w	;volatile
  2281  032F                     u3365:	
  2282  032F  1C03               	skipc
  2283  0330  2B3A               	goto	l979
  2284                           
  2285                           ;main.c: 323: adsum -= admin;
  2286  0331  0854               	movf	ADC_Sample@admin,w	;volatile
  2287  0332  00F3               	movwf	??_ADC_Sample
  2288  0333  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2289  0334  23CD  118A         	fcall	PL6	;call to abstracted procedure
  2290  0336  1C03               	skipc
  2291  0337  0F76               	incfsz	??_ADC_Sample+3,w
  2292  0338  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  2293  0339  2B3E               	goto	l3736
  2294  033A                     l979:	
  2295                           
  2296                           ;main.c: 324: else
  2297                           ;main.c: 325: adsum = 0;
  2298  033A  01D0               	clrf	ADC_Sample@adsum	;volatile
  2299  033B  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  2300  033C  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  2301  033D  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  2302  033E                     l3736:	
  2303                           
  2304                           ;main.c: 327: adresult = adsum >> 3;
  2305  033E  0850               	movf	ADC_Sample@adsum,w	;volatile
  2306  033F  00F3               	movwf	??_ADC_Sample
  2307  0340  0851               	movf	ADC_Sample@adsum+1,w	;volatile
  2308  0341  00F4               	movwf	??_ADC_Sample+1
  2309  0342  0852               	movf	ADC_Sample@adsum+2,w	;volatile
  2310  0343  00F5               	movwf	??_ADC_Sample+2
  2311  0344  0853               	movf	ADC_Sample@adsum+3,w	;volatile
  2312  0345  00F6               	movwf	??_ADC_Sample+3
  2313  0346  3003               	movlw	3
  2314  0347                     u3385:	
  2315  0347  1003               	clrc
  2316  0348  0CF6               	rrf	??_ADC_Sample+3,f
  2317  0349  0CF5               	rrf	??_ADC_Sample+2,f
  2318  034A  0CF4               	rrf	??_ADC_Sample+1,f
  2319  034B  0CF3               	rrf	??_ADC_Sample,f
  2320  034C  3EFF               	addlw	-1
  2321  034D  1D03               	skipz
  2322  034E  2B47               	goto	u3385
  2323  034F  0874               	movf	??_ADC_Sample+1,w
  2324  0350  00CC               	movwf	_adresult+1	;volatile
  2325  0351  0873               	movf	??_ADC_Sample,w
  2326  0352  00CB               	movwf	_adresult	;volatile
  2327                           
  2328                           ;main.c: 329: adsum = 0;
  2329                           
  2330                           ;main.c: 330: admin = 0;
  2331                           
  2332                           ;main.c: 331: admax = 0;
  2333  0353  23E9               	fcall	PL18	;call to abstracted procedure
  2334                           
  2335                           ;main.c: 332: return 0xA5;
  2336  0354  34A5               	retlw	165
  2337  0355                     __end_of_ADC_Sample:	
  2338  0355                     __ptext5:	
  2339 ;; *************** function _keyLedCtr *****************
  2340 ;; Defined at:
  2341 ;;		line 375 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 300/100
  2352 ;;		On exit  : 300/100
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2355 ;;      Params:         0       0       0       0
  2356 ;;      Locals:         0       0       0       0
  2357 ;;      Temps:          0       0       0       0
  2358 ;;      Totals:         0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    2
  2362 ;; This function calls:
  2363 ;;		___lwmod
  2364 ;; This function is called by:
  2365 ;;		_workCtr
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _keyLedCtr
  2371  0355                     _keyLedCtr:	
  2372                           
  2373                           ;main.c: 377: if(shanshuoTime > 0)
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2377  0355  1283               	bcf	3,5	;RP0=0, select bank0
  2378  0356  0836               	movf	_shanshuoTime,w
  2379  0357  0437               	iorwf	_shanshuoTime+1,w
  2380  0358  1903               	btfsc	3,2
  2381  0359  2B73               	goto	l3930
  2382                           
  2383                           ;main.c: 378: {
  2384                           ;main.c: 379: shanshuoTime--;
  2385  035A  3001               	movlw	1
  2386  035B  02B6               	subwf	_shanshuoTime,f
  2387  035C  3000               	movlw	0
  2388  035D  1C03               	skipc
  2389  035E  03B7               	decf	_shanshuoTime+1,f
  2390  035F  02B7               	subwf	_shanshuoTime+1,f
  2391                           
  2392                           ;main.c: 380: if((shanshuoTime % 150) < 75)
  2393  0360  3096               	movlw	150
  2394  0361  00F2               	movwf	___lwmod@divisor
  2395  0362  01F3               	clrf	___lwmod@divisor+1
  2396  0363  0837               	movf	_shanshuoTime+1,w
  2397  0364  00F5               	movwf	___lwmod@dividend+1
  2398  0365  0836               	movf	_shanshuoTime,w
  2399  0366  00F4               	movwf	___lwmod@dividend
  2400  0367  239D  118A         	fcall	___lwmod
  2401  0369  3000               	movlw	0
  2402  036A  0273               	subwf	?___lwmod+1,w
  2403  036B  304B               	movlw	75
  2404  036C  1903               	skipnz
  2405  036D  0272               	subwf	?___lwmod,w
  2406  036E  1803               	skipnc
  2407  036F  2B76               	goto	l997
  2408  0370                     l3928:	
  2409                           
  2410                           ;main.c: 381: {
  2411                           ;main.c: 382: PORTA |= 0x01;
  2412  0370  1683               	bsf	3,5	;RP0=1, select bank1
  2413  0371  1406               	bsf	6,0	;volatile
  2414                           
  2415                           ;main.c: 383: }
  2416  0372  2B78               	goto	l3934
  2417  0373                     l3930:	
  2418                           
  2419                           ;main.c: 389: else if(workStep > 0)
  2420  0373  087B               	movf	_workStep,w
  2421  0374  1903               	btfsc	3,2
  2422  0375  2B70               	goto	l3928
  2423  0376                     l997:	
  2424                           
  2425                           ;main.c: 384: else
  2426                           ;main.c: 385: {
  2427                           ;main.c: 386: PORTA &= 0xFE;
  2428  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2429  0377  1006               	bcf	6,0	;volatile
  2430  0378                     l3934:	
  2431                           
  2432                           ;main.c: 396: }
  2433                           ;main.c: 398: if(shanshuoTime2 > 0)
  2434  0378  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0379  0834               	movf	_shanshuoTime2,w
  2436  037A  0435               	iorwf	_shanshuoTime2+1,w
  2437  037B  1903               	btfsc	3,2
  2438  037C  2B99               	goto	l3942
  2439                           
  2440                           ;main.c: 399: {
  2441                           ;main.c: 400: shanshuoTime2--;
  2442  037D  3001               	movlw	1
  2443  037E  02B4               	subwf	_shanshuoTime2,f
  2444  037F  3000               	movlw	0
  2445  0380  1C03               	skipc
  2446  0381  03B5               	decf	_shanshuoTime2+1,f
  2447  0382  02B5               	subwf	_shanshuoTime2+1,f
  2448                           
  2449                           ;main.c: 401: if((shanshuoTime2 % 150) < 75)
  2450  0383  3096               	movlw	150
  2451  0384  00F2               	movwf	___lwmod@divisor
  2452  0385  01F3               	clrf	___lwmod@divisor+1
  2453  0386  0835               	movf	_shanshuoTime2+1,w
  2454  0387  00F5               	movwf	___lwmod@dividend+1
  2455  0388  0834               	movf	_shanshuoTime2,w
  2456  0389  00F4               	movwf	___lwmod@dividend
  2457  038A  239D  118A         	fcall	___lwmod
  2458  038C  3000               	movlw	0
  2459  038D  0273               	subwf	?___lwmod+1,w
  2460  038E  304B               	movlw	75
  2461  038F  1903               	skipnz
  2462  0390  0272               	subwf	?___lwmod,w
  2463  0391  1803               	skipnc
  2464  0392  2B96               	goto	l1003
  2465  0393                     l3940:	
  2466                           
  2467                           ;main.c: 402: {
  2468                           ;main.c: 403: PORTA |= 0x10;
  2469  0393  1683               	bsf	3,5	;RP0=1, select bank1
  2470  0394  1606               	bsf	6,4	;volatile
  2471                           
  2472                           ;main.c: 404: }
  2473  0395  0008               	return
  2474  0396                     l1003:	
  2475                           
  2476                           ;main.c: 405: else
  2477                           ;main.c: 406: {
  2478                           ;main.c: 407: PORTA &= 0xEF;
  2479  0396  1683               	bsf	3,5	;RP0=1, select bank1
  2480  0397  1206               	bcf	6,4	;volatile
  2481  0398  0008               	return
  2482  0399                     l3942:	
  2483                           
  2484                           ;main.c: 410: else if(wuhuaFlag > 0)
  2485  0399  0848               	movf	_wuhuaFlag,w
  2486  039A  1D03               	btfss	3,2
  2487  039B  2B96               	goto	l1003
  2488  039C  2B93               	goto	l3940
  2489  039D                     __end_of_keyLedCtr:	
  2490  039D                     __ptext6:	
  2491 ;; *************** function ___lwmod *****************
  2492 ;; Defined at:
  2493 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  divisor         2    2[COMMON] unsigned int 
  2496 ;;  dividend        2    4[COMMON] unsigned int 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  counter         1    6[COMMON] unsigned char 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  2    2[COMMON] unsigned int 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0
  2503 ;; Tracked objects:
  2504 ;;		On entry : 300/0
  2505 ;;		On exit  : 300/0
  2506 ;;		Unchanged: 300/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2508 ;;      Params:         4       0       0       0
  2509 ;;      Locals:         1       0       0       0
  2510 ;;      Temps:          0       0       0       0
  2511 ;;      Totals:         5       0       0       0
  2512 ;;Total ram usage:        5 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    1
  2515 ;; This function calls:
  2516 ;;		Nothing
  2517 ;; This function is called by:
  2518 ;;		_keyLedCtr
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function ___lwmod
  2524  039D                     ___lwmod:	
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2528  039D  0872               	movf	___lwmod@divisor,w
  2529  039E  0473               	iorwf	___lwmod@divisor+1,w
  2530  039F  1903               	btfsc	3,2
  2531  03A0  2BBC               	goto	l3832
  2532  03A1  01F6               	clrf	___lwmod@counter
  2533  03A2                     L1:	
  2534  03A2  0AF6               	incf	___lwmod@counter,f
  2535  03A3  1BF3               	btfsc	___lwmod@divisor+1,7
  2536  03A4  2BA9               	goto	l3824
  2537  03A5  1003               	clrc
  2538  03A6  0DF2               	rlf	___lwmod@divisor,f
  2539  03A7  0DF3               	rlf	___lwmod@divisor+1,f
  2540  03A8  2BA2               	goto	L1
  2541  03A9                     l3824:	
  2542  03A9  0873               	movf	___lwmod@divisor+1,w
  2543  03AA  0275               	subwf	___lwmod@dividend+1,w
  2544  03AB  1D03               	skipz
  2545  03AC  2BAF               	goto	u3525
  2546  03AD  0872               	movf	___lwmod@divisor,w
  2547  03AE  0274               	subwf	___lwmod@dividend,w
  2548  03AF                     u3525:	
  2549  03AF  1C03               	skipc
  2550  03B0  2BB8               	goto	L2
  2551  03B1  0872               	movf	___lwmod@divisor,w
  2552  03B2  02F4               	subwf	___lwmod@dividend,f
  2553  03B3  0873               	movf	___lwmod@divisor+1,w
  2554  03B4  1C03               	skipc
  2555  03B5  03F5               	decf	___lwmod@dividend+1,f
  2556  03B6  02F5               	subwf	___lwmod@dividend+1,f
  2557  03B7  1003               	clrc
  2558  03B8                     L2:	
  2559  03B8  0CF3               	rrf	___lwmod@divisor+1,f
  2560  03B9  0CF2               	rrf	___lwmod@divisor,f
  2561  03BA  0BF6               	decfsz	___lwmod@counter,f
  2562  03BB  2BA9               	goto	l3824
  2563  03BC                     l3832:	
  2564  03BC  0875               	movf	___lwmod@dividend+1,w
  2565  03BD  00F3               	movwf	?___lwmod+1
  2566  03BE  0874               	movf	___lwmod@dividend,w
  2567  03BF  00F2               	movwf	?___lwmod
  2568  03C0  0008               	return
  2569  03C1                     __end_of___lwmod:	
  2570  03C1                     __ptext4:	
  2571 ;; *************** function _pwmInit *****************
  2572 ;; Defined at:
  2573 ;;		line 421 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;		None
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;		None
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0
  2582 ;; Tracked objects:
  2583 ;;		On entry : 300/0
  2584 ;;		On exit  : 300/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2587 ;;      Params:         0       0       0       0
  2588 ;;      Locals:         0       0       0       0
  2589 ;;      Temps:          0       0       0       0
  2590 ;;      Totals:         0       0       0       0
  2591 ;;Total ram usage:        0 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    1
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_wuhuaCtr
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           
  2602                           ;psect for function _pwmInit
  2603  03C1                     _pwmInit:	
  2604                           
  2605                           ;main.c: 424: PWMTH = 0x00;
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2609  03C1  0198               	clrf	24	;volatile
  2610                           
  2611                           ;main.c: 425: PWMTL = 73;
  2612  03C2  3049               	movlw	73
  2613  03C3  0097               	movwf	23	;volatile
  2614                           
  2615                           ;main.c: 426: PWMD01H = 0x00;
  2616  03C4  019E               	clrf	30	;volatile
  2617                           
  2618                           ;main.c: 427: PWMD0L = 32;
  2619  03C5  3020               	movlw	32
  2620  03C6  0099               	movwf	25	;volatile
  2621                           
  2622                           ;main.c: 428: PWMCON1 = 0x40;
  2623  03C7  3040               	movlw	64
  2624  03C8  0096               	movwf	22	;volatile
  2625                           
  2626                           ;main.c: 429: PWMCON2 = 0x00;
  2627  03C9  019D               	clrf	29	;volatile
  2628                           
  2629                           ;main.c: 430: PWMCON0 |= 0x21;
  2630  03CA  3021               	movlw	33
  2631  03CB  0495               	iorwf	21,f	;volatile
  2632  03CC  0008               	return
  2633  03CD                     __end_of_pwmInit:	
  2634  03CD                     PL6:	
  2635  03CD  00F4               	movwf	??_ADC_Sample+1
  2636  03CE  01F5               	clrf	??_ADC_Sample+2
  2637  03CF  01F6               	clrf	??_ADC_Sample+3
  2638  03D0  0873               	movf	??_ADC_Sample,w
  2639  03D1  02D0               	subwf	ADC_Sample@adsum,f	;volatile
  2640  03D2  0874               	movf	??_ADC_Sample+1,w
  2641  03D3  1C03               	skipc
  2642  03D4  0F74               	incfsz	??_ADC_Sample+1,w
  2643  03D5  02D1               	subwf	ADC_Sample@adsum+1,f	;volatile
  2644  03D6  0875               	movf	??_ADC_Sample+2,w
  2645  03D7  1C03               	skipc
  2646  03D8  0F75               	incfsz	??_ADC_Sample+2,w
  2647  03D9  02D2               	subwf	ADC_Sample@adsum+2,f	;volatile
  2648  03DA  0876               	movf	??_ADC_Sample+3,w
  2649  03DB  0008               	return
  2650  03DC                     __end_ofPL6:	
  2651  03DC                     PL10:	
  2652  03DC  084B               	movf	_adresult,w	;volatile
  2653  03DD  00CD               	movwf	___lmul@multiplier
  2654  03DE  084C               	movf	_adresult+1,w	;volatile
  2655  03DF  00CE               	movwf	___lmul@multiplier+1
  2656  03E0  01CF               	clrf	___lmul@multiplier+2
  2657  03E1  01D0               	clrf	___lmul@multiplier+3
  2658  03E2  0832               	movf	_power_ad,w	;volatile
  2659  03E3  00D1               	movwf	___lmul@multiplicand
  2660  03E4  0833               	movf	_power_ad+1,w	;volatile
  2661  03E5  00D2               	movwf	___lmul@multiplicand+1
  2662  03E6  01D3               	clrf	___lmul@multiplicand+2
  2663  03E7  01D4               	clrf	___lmul@multiplicand+3
  2664  03E8  0008               	return
  2665  03E9                     __end_ofPL10:	
  2666  03E9                     PL18:	
  2667  03E9  01D0               	clrf	ADC_Sample@adsum	;volatile
  2668  03EA  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  2669  03EB  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  2670  03EC  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  2671  03ED  01D4               	clrf	ADC_Sample@admin	;volatile
  2672  03EE  01D5               	clrf	ADC_Sample@admin+1	;volatile
  2673  03EF  01D6               	clrf	ADC_Sample@admax	;volatile
  2674  03F0  01D7               	clrf	ADC_Sample@admax+1	;volatile
  2675  03F1  0008               	return
  2676  03F2                     __end_ofPL18:	
  2677  03F2                     PL24:	
  2678  03F2  0862               	movf	___fttol@f1,w
  2679  03F3  00E6               	movwf	??___fttol
  2680  03F4  0863               	movf	___fttol@f1+1,w
  2681  03F5  00E7               	movwf	??___fttol+1
  2682  03F6  0864               	movf	___fttol@f1+2,w
  2683  03F7  00E8               	movwf	??___fttol+2
  2684  03F8  0008               	return
  2685  03F9                     __end_ofPL24:	
  2686  03F9                     PL34:	
  2687  03F9  1003               	clrc
  2688  03FA  0CF4               	rrf	___ftpack@arg+2,f
  2689  03FB  0CF3               	rrf	___ftpack@arg+1,f
  2690  03FC  0CF2               	rrf	___ftpack@arg,f
  2691  03FD  0008               	return
  2692  03FE                     __end_ofPL34:	
  2693  03FE                     PL38:	
  2694  03FE  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2695  03FF  00D7               	movwf	ADC_Sample@admax+1	;volatile
  2696  0400  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2697  0401  00D6               	movwf	ADC_Sample@admax	;volatile
  2698  0402  0008               	return
  2699  0403                     __end_ofPL38:	
  2700  0403                     PL40:	
  2701  0403  01D3               	clrf	?___ftdiv
  2702  0404  01D4               	clrf	?___ftdiv+1
  2703  0405  01D5               	clrf	?___ftdiv+2
  2704  0406  0008               	return
  2705  0407                     __end_ofPL40:	
  2706  0407                     __ptext9:	
  2707 ;; *************** function _fanInit *****************
  2708 ;; Defined at:
  2709 ;;		line 440 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 300/0
  2720 ;;		On exit  : 300/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       0       0       0
  2724 ;;      Locals:         0       0       0       0
  2725 ;;      Temps:          0       0       0       0
  2726 ;;      Totals:         0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    1
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_fanCtr
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           
  2738                           ;psect for function _fanInit
  2739  0407                     _fanInit:	
  2740  0407                     l3764:	
  2741                           ;incstack = 0
  2742                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2743                           
  2744                           
  2745                           ;main.c: 443: PWMTH = 0x00;
  2746  0407  0198               	clrf	24	;volatile
  2747                           
  2748                           ;main.c: 444: PWMTL = 73;
  2749  0408  3049               	movlw	73
  2750  0409  0097               	movwf	23	;volatile
  2751                           
  2752                           ;main.c: 445: PWMD01H = 0x00;
  2753  040A  019E               	clrf	30	;volatile
  2754                           
  2755                           ;main.c: 446: PWMD1L = fanDuty;
  2756  040B  0847               	movf	_fanDuty,w
  2757  040C  009A               	movwf	26	;volatile
  2758                           
  2759                           ;main.c: 447: PWMCON1 = 0x40;
  2760  040D  3040               	movlw	64
  2761  040E  0096               	movwf	22	;volatile
  2762                           
  2763                           ;main.c: 448: PWMCON2 = 0x00;
  2764  040F  019D               	clrf	29	;volatile
  2765                           
  2766                           ;main.c: 449: PWMCON0 |= 0x22;
  2767  0410  3022               	movlw	34
  2768  0411  0495               	iorwf	21,f	;volatile
  2769  0412  0008               	return
  2770  0413                     __end_of_fanInit:	
  2771  0413                     __ptext8:	
  2772 ;; *************** function _fanStop *****************
  2773 ;; Defined at:
  2774 ;;		line 452 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		status,2
  2783 ;; Tracked objects:
  2784 ;;		On entry : 300/100
  2785 ;;		On exit  : 300/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2788 ;;      Params:         0       0       0       0
  2789 ;;      Locals:         0       0       0       0
  2790 ;;      Temps:          0       0       0       0
  2791 ;;      Totals:         0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    1
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_fanCtr
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           
  2803                           ;psect for function _fanStop
  2804  0413                     _fanStop:	
  2805                           
  2806                           ;main.c: 454: PWMD1L = 0;
  2807                           
  2808                           ;incstack = 0
  2809                           ; Regs used in _fanStop: [status,2]
  2810  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0414  019A               	clrf	26	;volatile
  2812                           
  2813                           ;main.c: 455: PWMCON0 &= 0xFD;
  2814  0415  1095               	bcf	21,1	;volatile
  2815                           
  2816                           ;main.c: 456: PORTB &= 0x7F;
  2817  0416  1386               	bcf	6,7	;volatile
  2818  0417  0008               	return
  2819  0418                     __end_of_fanStop:	
  2820  0418                     __ptext3:	
  2821 ;; *************** function _pwmStop *****************
  2822 ;; Defined at:
  2823 ;;		line 433 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      void 
  2830 ;; Registers used:
  2831 ;;		status,2
  2832 ;; Tracked objects:
  2833 ;;		On entry : 300/0
  2834 ;;		On exit  : 300/100
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2837 ;;      Params:         0       0       0       0
  2838 ;;      Locals:         0       0       0       0
  2839 ;;      Temps:          0       0       0       0
  2840 ;;      Totals:         0       0       0       0
  2841 ;;Total ram usage:        0 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_wuhuaCtr
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           
  2852                           ;psect for function _pwmStop
  2853  0418                     _pwmStop:	
  2854  0418                     l3758:	
  2855                           ;incstack = 0
  2856                           ; Regs used in _pwmStop: [status,2]
  2857                           
  2858                           
  2859                           ;main.c: 435: PWMD0L = 0;
  2860  0418  0199               	clrf	25	;volatile
  2861                           
  2862                           ;main.c: 436: PWMCON0 &= 0xFE;
  2863  0419  1015               	bcf	21,0	;volatile
  2864                           
  2865                           ;main.c: 437: PORTA &= 0xDF;
  2866  041A  1683               	bsf	3,5	;RP0=1, select bank1
  2867  041B  1286               	bcf	6,5	;volatile
  2868  041C  0008               	return
  2869  041D                     __end_of_pwmStop:	
  2870                           
  2871                           	psect	text16
  2872  0F42                     __ptext16:	
  2873 ;; *************** function _chrgCtr *****************
  2874 ;; Defined at:
  2875 ;;		line 337 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/100
  2886 ;;		On exit  : 300/100
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2889 ;;      Params:         0       0       0       0
  2890 ;;      Locals:         0       0       0       0
  2891 ;;      Temps:          0       0       0       0
  2892 ;;      Totals:         0       0       0       0
  2893 ;;Total ram usage:        0 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    1
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _chrgCtr
  2905  0F42                     _chrgCtr:	
  2906                           
  2907                           ;main.c: 339: if(PORTB & 0x01)
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2911  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  2913  0F44  1C06               	btfss	6,0	;volatile
  2914  0F45  2F65               	goto	l3542
  2915                           
  2916                           ;main.c: 340: {
  2917                           ;main.c: 341: chrgFlag = 1;
  2918  0F46  01C4               	clrf	_chrgFlag
  2919  0F47  0AC4               	incf	_chrgFlag,f
  2920                           
  2921                           ;main.c: 342: firstLock = 0;
  2922  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  2923  0F49  01B8               	clrf	_firstLock^(0+128)
  2924                           
  2925                           ;main.c: 343: lowBatLock = 0;
  2926  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0F4B  01C1               	clrf	_lowBatLock
  2928                           
  2929                           ;main.c: 344: if(PORTB & 0x10)
  2930  0F4C  1E06               	btfss	6,4	;volatile
  2931  0F4D  2F57               	goto	l3536
  2932                           
  2933                           ;main.c: 345: {
  2934                           ;main.c: 346: if(++chrgFullTime > 200)
  2935  0F4E  30C9               	movlw	201
  2936  0F4F  0AC2               	incf	_chrgFullTime,f
  2937  0F50  0242               	subwf	_chrgFullTime,w
  2938  0F51  1C03               	skipc
  2939  0F52  2F58               	goto	l3538
  2940                           
  2941                           ;main.c: 347: {
  2942                           ;main.c: 348: chrgFullTime = 0;
  2943  0F53  01C2               	clrf	_chrgFullTime
  2944                           
  2945                           ;main.c: 349: chrgFullFlag = 1;
  2946  0F54  01C3               	clrf	_chrgFullFlag
  2947  0F55  0AC3               	incf	_chrgFullFlag,f
  2948  0F56  2F58               	goto	l3538
  2949  0F57                     l3536:	
  2950                           
  2951                           ;main.c: 352: else
  2952                           ;main.c: 353: {
  2953                           ;main.c: 354: chrgFullTime = 0;
  2954  0F57  01C2               	clrf	_chrgFullTime
  2955  0F58                     l3538:	
  2956                           
  2957                           ;main.c: 355: }
  2958                           ;main.c: 356: if(chrgFullFlag || count1s < 125)
  2959  0F58  0843               	movf	_chrgFullFlag,w
  2960  0F59  1D03               	btfss	3,2
  2961  0F5A  2F5F               	goto	l989
  2962  0F5B  307D               	movlw	125
  2963  0F5C  0249               	subwf	_count1s,w
  2964  0F5D  1803               	skipnc
  2965  0F5E  2F62               	goto	l987
  2966  0F5F                     l989:	
  2967                           
  2968                           ;main.c: 357: {
  2969                           ;main.c: 358: RA1 = 0;
  2970  0F5F  1683               	bsf	3,5	;RP0=1, select bank1
  2971  0F60  1086               	bcf	6,1	;volatile
  2972                           
  2973                           ;main.c: 359: }
  2974  0F61  0008               	return
  2975  0F62                     l987:	
  2976                           
  2977                           ;main.c: 360: else
  2978                           ;main.c: 361: {
  2979                           ;main.c: 362: RA1 = 1;
  2980  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  2981  0F63  1486               	bsf	6,1	;volatile
  2982  0F64  0008               	return
  2983  0F65                     l3542:	
  2984                           
  2985                           ;main.c: 365: else
  2986                           ;main.c: 366: {
  2987                           ;main.c: 367: chrgFlag = 0;
  2988  0F65  01C4               	clrf	_chrgFlag
  2989                           
  2990                           ;main.c: 368: chrgFullTime = 0;
  2991  0F66  01C2               	clrf	_chrgFullTime
  2992                           
  2993                           ;main.c: 369: chrgFullFlag = 0;
  2994  0F67  01C3               	clrf	_chrgFullFlag
  2995                           
  2996                           ;main.c: 370: if(firstTime == 0)
  2997  0F68  1683               	bsf	3,5	;RP0=1, select bank1
  2998  0F69  0839               	movf	_firstTime^(0+128),w
  2999  0F6A  1D03               	btfss	3,2
  3000  0F6B  0008               	return
  3001  0F6C  2F62               	goto	l987
  3002  0F6D                     __end_of_chrgCtr:	
  3003                           
  3004                           	psect	text20
  3005  0FA5                     __ptext20:	
  3006 ;; *************** function _KeyServer *****************
  3007 ;; Defined at:
  3008 ;;		line 100 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;		None
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;		None
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0
  3017 ;; Tracked objects:
  3018 ;;		On entry : 300/0
  3019 ;;		On exit  : 300/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3022 ;;      Params:         0       0       0       0
  3023 ;;      Locals:         0       0       0       0
  3024 ;;      Temps:          0       0       0       0
  3025 ;;      Totals:         0       0       0       0
  3026 ;;Total ram usage:        0 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    1
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function _KeyServer
  3038  0FA5                     _KeyServer:	
  3039                           
  3040                           ;main.c: 102: static unsigned char KeyOldFlag = 0;
  3041                           ;main.c: 103: if (KeyFlag[0])
  3042                           
  3043                           ;incstack = 0
  3044                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3045  0FA5  0838               	movf	_KeyFlag,w	;volatile
  3046  0FA6  1903               	btfsc	3,2
  3047  0FA7  2FF9               	goto	l3480
  3048                           
  3049                           ;main.c: 104: {
  3050                           ;main.c: 105: if (KeyFlag[0] != KeyOldFlag)
  3051  0FA8  0838               	movf	_KeyFlag,w	;volatile
  3052  0FA9  063F               	xorwf	KeyServer@KeyOldFlag,w
  3053  0FAA  1903               	skipnz
  3054  0FAB  0008               	return
  3055                           
  3056                           ;main.c: 106: {
  3057                           ;main.c: 108: KeyOldFlag ^= KeyFlag[0];
  3058  0FAC  0838               	movf	_KeyFlag,w	;volatile
  3059  0FAD  06BF               	xorwf	KeyServer@KeyOldFlag,f
  3060                           
  3061                           ;main.c: 109: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3062  0FAE  183F               	btfsc	KeyServer@KeyOldFlag,0
  3063  0FAF  1C38               	btfss	_KeyFlag,0	;volatile
  3064  0FB0  2FD4               	goto	l3456
  3065  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  3066  0FB2  0838               	movf	_firstLock^(0+128),w
  3067  0FB3  1D03               	btfss	3,2
  3068  0FB4  2FD4               	goto	l3456
  3069                           
  3070                           ;main.c: 110: {
  3071                           ;main.c: 112: if(lowBatLock == 1)
  3072  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0FB6  0B41               	decfsz	_lowBatLock,w
  3074  0FB7  2FBB               	goto	l3440
  3075                           
  3076                           ;main.c: 113: {
  3077                           ;main.c: 114: shanshuoTime = 450;
  3078  0FB8  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3079                           
  3080                           ;main.c: 115: }
  3081  0FBA  2FC0               	goto	l3444
  3082  0FBB                     l3440:	
  3083                           
  3084                           ;main.c: 116: else if(++workStep > 2)
  3085  0FBB  3003               	movlw	3
  3086  0FBC  0AFB               	incf	_workStep,f
  3087  0FBD  027B               	subwf	_workStep,w
  3088  0FBE  1803               	btfsc	3,0
  3089                           
  3090                           ;main.c: 117: {
  3091                           ;main.c: 118: workStep = 0;
  3092  0FBF  01FB               	clrf	_workStep
  3093  0FC0                     l3444:	
  3094                           
  3095                           ;main.c: 119: }
  3096                           ;main.c: 120: if(power_ad < 3350 && workStep == 2)
  3097  0FC0  300D               	movlw	13
  3098  0FC1  0233               	subwf	_power_ad+1,w	;volatile
  3099  0FC2  3016               	movlw	22
  3100  0FC3  1903               	skipnz
  3101  0FC4  0232               	subwf	_power_ad,w	;volatile
  3102  0FC5  3002               	movlw	2
  3103  0FC6  067B               	xorwf	_workStep,w
  3104  0FC7  1803               	skipnc
  3105  0FC8  2FCD               	goto	L8
  3106  0FC9  1903               	btfsc	3,2
  3107                           
  3108                           ;main.c: 121: {
  3109                           ;main.c: 122: workStep = 0;
  3110  0FCA  01FB               	clrf	_workStep
  3111                           
  3112                           ;main.c: 123: }
  3113                           ;main.c: 124: if(workStep == 2)
  3114  0FCB  3002               	movlw	2
  3115  0FCC  067B               	xorwf	_workStep,w
  3116  0FCD                     L8:	
  3117  0FCD  1D03               	btfss	3,2
  3118  0FCE  2FD2               	goto	l3454
  3119                           
  3120                           ;main.c: 125: {
  3121                           ;main.c: 126: shanshuoTime = 450;
  3122  0FCF  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3123                           
  3124                           ;main.c: 127: }
  3125  0FD1  2FD4               	goto	l3456
  3126  0FD2                     l3454:	
  3127                           
  3128                           ;main.c: 128: else
  3129                           ;main.c: 129: {
  3130                           ;main.c: 130: shanshuoTime = 0;
  3131  0FD2  01B6               	clrf	_shanshuoTime
  3132  0FD3  01B7               	clrf	_shanshuoTime+1
  3133  0FD4                     l3456:	
  3134                           
  3135                           ;main.c: 131: }
  3136                           ;main.c: 132: }
  3137                           ;main.c: 133: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3138  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0FD5  18BF               	btfsc	KeyServer@KeyOldFlag,1
  3140  0FD6  1CB8               	btfss	_KeyFlag,1	;volatile
  3141  0FD7  2FF5               	goto	l3478
  3142  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  3143  0FD9  0838               	movf	_firstLock^(0+128),w
  3144  0FDA  1D03               	btfss	3,2
  3145  0FDB  2FF5               	goto	l3478
  3146                           
  3147                           ;main.c: 134: {
  3148                           ;main.c: 136: if(lowBatLock == 1)
  3149  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0FDD  0B41               	decfsz	_lowBatLock,w
  3151  0FDE  2FE4               	goto	l3466
  3152                           
  3153                           ;main.c: 137: {
  3154                           ;main.c: 138: shanshuoTime2 = 450;
  3155  0FDF  30C2               	movlw	194
  3156  0FE0  00B4               	movwf	_shanshuoTime2
  3157  0FE1  3001               	movlw	1
  3158  0FE2  00B5               	movwf	_shanshuoTime2+1
  3159                           
  3160                           ;main.c: 139: }
  3161  0FE3  2FE9               	goto	l3470
  3162  0FE4                     l3466:	
  3163                           
  3164                           ;main.c: 140: else if(++wuhuaFlag > 2)
  3165  0FE4  3003               	movlw	3
  3166  0FE5  0AC8               	incf	_wuhuaFlag,f
  3167  0FE6  0248               	subwf	_wuhuaFlag,w
  3168  0FE7  1803               	btfsc	3,0
  3169                           
  3170                           ;main.c: 141: {
  3171                           ;main.c: 142: wuhuaFlag = 0;
  3172  0FE8  01C8               	clrf	_wuhuaFlag
  3173  0FE9                     l3470:	
  3174                           
  3175                           ;main.c: 143: }
  3176                           ;main.c: 144: if(wuhuaFlag == 2)
  3177  0FE9  3002               	movlw	2
  3178  0FEA  0648               	xorwf	_wuhuaFlag,w
  3179  0FEB  1D03               	btfss	3,2
  3180  0FEC  2FF3               	goto	l3476
  3181                           
  3182                           ;main.c: 145: {
  3183                           ;main.c: 146: shanshuoTime2 = 450;
  3184  0FED  30C2               	movlw	194
  3185  0FEE  00B4               	movwf	_shanshuoTime2
  3186  0FEF  3001               	movlw	1
  3187  0FF0  00B5               	movwf	_shanshuoTime2+1
  3188                           
  3189                           ;main.c: 147: count10s = 0;
  3190  0FF1  01C6               	clrf	_count10s
  3191                           
  3192                           ;main.c: 148: }
  3193  0FF2  2FF5               	goto	l3478
  3194  0FF3                     l3476:	
  3195                           
  3196                           ;main.c: 149: else
  3197                           ;main.c: 150: {
  3198                           ;main.c: 151: shanshuoTime2 = 0;
  3199  0FF3  01B4               	clrf	_shanshuoTime2
  3200  0FF4  01B5               	clrf	_shanshuoTime2+1
  3201  0FF5                     l3478:	
  3202                           
  3203                           ;main.c: 152: }
  3204                           ;main.c: 153: }
  3205                           ;main.c: 156: KeyOldFlag = KeyFlag[0];
  3206  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0FF6  0838               	movf	_KeyFlag,w	;volatile
  3208  0FF7  00BF               	movwf	KeyServer@KeyOldFlag
  3209  0FF8  0008               	return
  3210  0FF9                     l3480:	
  3211                           
  3212                           ;main.c: 159: else
  3213                           ;main.c: 160: {
  3214                           ;main.c: 161: KeyOldFlag = 0;
  3215  0FF9  01BF               	clrf	KeyServer@KeyOldFlag
  3216  0FFA  0008               	return
  3217  0FFB                     __end_of_KeyServer:	
  3218  0FFB                     PL36:	
  3219  0FFB  30C2               	movlw	194
  3220  0FFC  00B6               	movwf	_shanshuoTime
  3221  0FFD  3001               	movlw	1
  3222  0FFE  00B7               	movwf	_shanshuoTime+1
  3223  0FFF  0008               	return
  3224  1000                     __end_ofPL36:	
  3225                           
  3226                           	psect	text21
  3227  041D                     __ptext21:	
  3228 ;; *************** function _Init_System *****************
  3229 ;; Defined at:
  3230 ;;		line 49 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;		None
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  1    wreg      void 
  3237 ;; Registers used:
  3238 ;;		wreg, status,2
  3239 ;; Tracked objects:
  3240 ;;		On entry : B00/0
  3241 ;;		On exit  : 300/100
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3244 ;;      Params:         0       0       0       0
  3245 ;;      Locals:         0       0       0       0
  3246 ;;      Temps:          0       0       0       0
  3247 ;;      Totals:         0       0       0       0
  3248 ;;Total ram usage:        0 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:    1
  3251 ;; This function calls:
  3252 ;;		Nothing
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _Init_System
  3260  041D                     _Init_System:	
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _Init_System: [wreg+status,2]
  3264  041D  0000               	nop	;# 
  3265  041E  0064               	clrwdt	;# 
  3266                           
  3267                           ;main.c: 53: INTCON = 0;
  3268  041F  018B               	clrf	11	;volatile
  3269                           
  3270                           ;main.c: 54: OSCCON = 0X72;
  3271  0420  3072               	movlw	114
  3272  0421  1283               	bcf	3,5	;RP0=0, select bank0
  3273  0422  1303               	bcf	3,6	;RP1=0, select bank0
  3274  0423  0094               	movwf	20	;volatile
  3275                           
  3276                           ;main.c: 55: OPTION_REG = 0;
  3277  0424  0181               	clrf	1	;volatile
  3278                           
  3279                           ;main.c: 60: TRISA = 0x08;
  3280  0425  3008               	movlw	8
  3281  0426  1683               	bsf	3,5	;RP0=1, select bank1
  3282  0427  0085               	movwf	5	;volatile
  3283                           
  3284                           ;main.c: 61: PORTA = 0;
  3285  0428  0186               	clrf	6	;volatile
  3286                           
  3287                           ;main.c: 62: TRISB = 0x31;
  3288  0429  3031               	movlw	49
  3289  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3290  042B  0085               	movwf	5	;volatile
  3291                           
  3292                           ;main.c: 63: PORTB = 0;
  3293  042C  0186               	clrf	6	;volatile
  3294                           
  3295                           ;main.c: 64: WPUB = 0x10;
  3296  042D  3010               	movlw	16
  3297  042E  0088               	movwf	8	;volatile
  3298                           
  3299                           ;main.c: 65: TRISC = 0;
  3300  042F  1703               	bsf	3,6	;RP1=1, select bank2
  3301  0430  0185               	clrf	5	;volatile
  3302                           
  3303                           ;main.c: 66: PORTC = 0;
  3304  0431  0186               	clrf	6	;volatile
  3305                           
  3306                           ;main.c: 68: PIE1 = 2;
  3307  0432  3002               	movlw	2
  3308  0433  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0434  008E               	movwf	14	;volatile
  3310                           
  3311                           ;main.c: 69: PR2 = 250;
  3312  0435  30FA               	movlw	250
  3313  0436  0091               	movwf	17	;volatile
  3314                           
  3315                           ;main.c: 70: T2CON = 4;
  3316  0437  3004               	movlw	4
  3317  0438  0093               	movwf	19	;volatile
  3318                           
  3319                           ;main.c: 72: INTCON = 0XC0;
  3320  0439  30C0               	movlw	192
  3321  043A  008B               	movwf	11	;volatile
  3322                           
  3323                           ;main.c: 73: ADCON0 = 0X41;
  3324                           
  3325                           ;main.c: 74: ADON = 1;
  3326                           
  3327                           ;main.c: 75: ADCON1 = 0x00;
  3328  043B  2FEA               	ljmp	PL26	;call to abstracted procedure
  3329  043C                     __end_of_Init_System:	
  3330  043C                     __ptext17:	
  3331 ;; *************** function _WorkSleep *****************
  3332 ;; Defined at:
  3333 ;;		line 191 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      void 
  3340 ;; Registers used:
  3341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : 300/0
  3344 ;;		On exit  : 300/100
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3347 ;;      Params:         0       0       0       0
  3348 ;;      Locals:         0       0       0       0
  3349 ;;      Temps:          0       0       0       0
  3350 ;;      Totals:         0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    4
  3354 ;; This function calls:
  3355 ;;		_Refurbish_Sfr
  3356 ;;		_SystemEnterSleep
  3357 ;; This function is called by:
  3358 ;;		_main
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _WorkSleep
  3364  043C                     _WorkSleep:	
  3365                           
  3366                           ;main.c: 195: if(B_OnOff)time = 0;
  3367                           
  3368                           ;incstack = 0
  3369                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3370  043C  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3371  043D  2C41               	goto	l4182
  3372  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3373  043F  01A6               	clrf	_time^(0+128)
  3374  0440  01A7               	clrf	(_time+1)^(0+128)
  3375  0441                     l4182:	
  3376                           
  3377                           ;main.c: 197: if(++time >= 2000)
  3378  0441  1683               	bsf	3,5	;RP0=1, select bank1
  3379  0442  0AA6               	incf	_time^(0+128),f
  3380  0443  1903               	skipnz
  3381  0444  0AA7               	incf	(_time+1)^(0+128),f
  3382  0445  3007               	movlw	7
  3383  0446  0227               	subwf	(_time+1)^(0+128),w
  3384  0447  30D0               	movlw	208
  3385  0448  1903               	skipnz
  3386  0449  0226               	subwf	_time^(0+128),w
  3387  044A  1C03               	skipc
  3388  044B  0008               	return
  3389                           
  3390                           ;main.c: 198: {
  3391                           ;main.c: 199: time = 0;
  3392  044C  01A6               	clrf	_time^(0+128)
  3393  044D  01A7               	clrf	(_time+1)^(0+128)
  3394                           
  3395                           ;main.c: 200: INTCON = 0;
  3396  044E  018B               	clrf	11	;volatile
  3397                           
  3398                           ;main.c: 201: PIE1 = 0;
  3399  044F  1283               	bcf	3,5	;RP0=0, select bank0
  3400  0450  018E               	clrf	14	;volatile
  3401                           
  3402                           ;main.c: 202: PIE2 = 0;
  3403  0451  1703               	bsf	3,6	;RP1=1, select bank2
  3404  0452  0190               	clrf	16	;volatile
  3405                           
  3406                           ;main.c: 203: PIR1 = 0;
  3407  0453  1303               	bcf	3,6	;RP1=0, select bank0
  3408  0454  018D               	clrf	13	;volatile
  3409                           
  3410                           ;main.c: 204: PIR2 = 0;
  3411  0455  1703               	bsf	3,6	;RP1=1, select bank2
  3412  0456  018F               	clrf	15	;volatile
  3413                           
  3414                           ;main.c: 205: T2CON = 0;
  3415  0457  1303               	bcf	3,6	;RP1=0, select bank0
  3416  0458  0193               	clrf	19	;volatile
  3417                           
  3418                           ;main.c: 206: ADCON1 = 0;
  3419  0459  1683               	bsf	3,5	;RP0=1, select bank1
  3420  045A  0196               	clrf	22	;volatile
  3421                           
  3422                           ;main.c: 209: ADCON0 = 0;
  3423  045B  0195               	clrf	21	;volatile
  3424                           
  3425                           ;main.c: 212: PORTA = 0x13;
  3426  045C  3013               	movlw	19
  3427  045D  0086               	movwf	6	;volatile
  3428                           
  3429                           ;main.c: 213: PORTB = 0x00;
  3430  045E  1283               	bcf	3,5	;RP0=0, select bank0
  3431  045F  0186               	clrf	6	;volatile
  3432                           
  3433                           ;main.c: 214: TRISC = 0;
  3434  0460  1703               	bsf	3,6	;RP1=1, select bank2
  3435  0461  0185               	clrf	5	;volatile
  3436                           
  3437                           ;main.c: 215: PORTC = 0;
  3438  0462  0186               	clrf	6	;volatile
  3439                           
  3440                           ;main.c: 217: TRISB0 =1;
  3441  0463  1303               	bcf	3,6	;RP1=0, select bank0
  3442  0464  1405               	bsf	5,0	;volatile
  3443                           
  3444                           ;main.c: 219: RBIF = 0;
  3445  0465  100B               	bcf	11,0	;volatile
  3446                           
  3447                           ;main.c: 220: RBIE = 1;
  3448  0466  158B               	bsf	11,3	;volatile
  3449                           
  3450                           ;main.c: 221: IOCB0= 1;
  3451  0467  1409               	bsf	9,0	;volatile
  3452                           
  3453                           ;main.c: 222: PORTB;
  3454  0468  0806               	movf	6,w	;volatile
  3455                           
  3456                           ;main.c: 234: SystemEnterSleep();
  3457  0469  24A0  118A         	fcall	_SystemEnterSleep
  3458                           
  3459                           ;main.c: 235: if(RAIF)
  3460  046B  1D8D               	btfss	13,3	;volatile
  3461  046C  2C70               	goto	l4210
  3462                           
  3463                           ;main.c: 236: {
  3464                           ;main.c: 237: RAIF = 0;
  3465  046D  118D               	bcf	13,3	;volatile
  3466                           
  3467                           ;main.c: 238: PORTA;
  3468  046E  1683               	bsf	3,5	;RP0=1, select bank1
  3469  046F  0806               	movf	6,w	;volatile
  3470  0470                     l4210:	
  3471                           
  3472                           ;main.c: 239: }
  3473                           ;main.c: 241: Refurbish_Sfr();
  3474  0470  278A  118A         	fcall	_Refurbish_Sfr
  3475                           
  3476                           ;main.c: 242: ADCON0 = 0X41;
  3477                           
  3478                           ;main.c: 243: ADON = 1;
  3479                           
  3480                           ;main.c: 244: ADCON1 = 0x00;
  3481  0472  2FEA               	ljmp	PL26	;call to abstracted procedure
  3482  0473                     __end_of_WorkSleep:	
  3483  0473                     __ptext22:	
  3484 ;; *************** function _CheckTouchKey *****************
  3485 ;; Defined at:
  3486 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/100
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3500 ;;      Params:         0       0       0       0
  3501 ;;      Locals:         0       0       0       0
  3502 ;;      Temps:          0       0       0       0
  3503 ;;      Totals:         0       0       0       0
  3504 ;;Total ram usage:        0 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    5
  3507 ;; This function calls:
  3508 ;;		_CheckKeyOldValue
  3509 ;;		_CheckOnceResult
  3510 ;;		_CheckValidTime
  3511 ;;		_ClearResSum
  3512 ;;		_GetTouchKeyValue
  3513 ;;		_KeyStopClear
  3514 ;;		_TurnKeyFlags
  3515 ;; This function is called by:
  3516 ;;		_main
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           
  3521                           ;psect for function _CheckTouchKey
  3522  0473                     _CheckTouchKey:	
  3523                           
  3524                           ;incstack = 0
  3525                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3526  0473  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3527  0474  2C81               	goto	l1269
  3528  0475  2530  118A         	fcall	_GetTouchKeyValue
  3529  0477  3008               	movlw	8
  3530  0478  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0479  1303               	bcf	3,6	;RP1=0, select bank0
  3532  047A  0ABE               	incf	_KeyCounter,f
  3533  047B  023E               	subwf	_KeyCounter,w
  3534  047C  1C03               	skipc
  3535  047D  2C9F               	goto	l4292
  3536  047E  01BE               	clrf	_KeyCounter
  3537  047F  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3538  0480  2C9F               	goto	l4292
  3539  0481                     l1269:	
  3540  0481  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3541  0482  2C99               	goto	l4286
  3542  0483  259F  118A         	fcall	_CheckOnceResult
  3543  0485  2731  118A         	fcall	_TurnKeyFlags
  3544  0487  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3545  0488  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3546  0489  2C90               	goto	l4276
  3547  048A  3003               	movlw	3
  3548  048B  1283               	bcf	3,5	;RP0=0, select bank0
  3549  048C  1303               	bcf	3,6	;RP1=0, select bank0
  3550  048D  023E               	subwf	_KeyCounter,w
  3551  048E  1C03               	skipc
  3552  048F  2C95               	goto	l4284
  3553  0490                     l4276:	
  3554  0490  271B  118A         	fcall	_KeyStopClear
  3555  0492  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3556  0493  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3557  0494  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3558  0495                     l4284:	
  3559  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0497  01BE               	clrf	_KeyCounter
  3562  0498  2C9F               	goto	l4292
  3563  0499                     l4286:	
  3564  0499  26B7  118A         	fcall	_CheckKeyOldValue
  3565  049B  2590  118A         	fcall	_ClearResSum
  3566  049D  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3567  049E  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3568  049F                     l4292:	
  3569  049F  2F64               	ljmp	l3300	;# 
  3570  04A0                     __end_of_CheckTouchKey:	
  3571  04A0                     __ptext18:	
  3572 ;; *************** function _SystemEnterSleep *****************
  3573 ;; Defined at:
  3574 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  92              2    6[BANK0 ] unsigned int 
  3579 ;;  93              2    4[BANK0 ] unsigned int 
  3580 ;;  94              2    2[BANK0 ] unsigned int 
  3581 ;;  91              1    8[BANK0 ] unsigned char 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 300/0
  3588 ;;		On exit  : 300/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3591 ;;      Params:         0       0       0       0
  3592 ;;      Locals:         0       7       0       0
  3593 ;;      Temps:          0       2       0       0
  3594 ;;      Totals:         0       9       0       0
  3595 ;;Total ram usage:        9 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    3
  3598 ;; This function calls:
  3599 ;;		_ClearResSum
  3600 ;;		_GetTouchKeyValue
  3601 ;;		_KeyClearOne
  3602 ;; This function is called by:
  3603 ;;		_WorkSleep
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           
  3608                           ;psect for function _SystemEnterSleep
  3609  04A0                     _SystemEnterSleep:	
  3610  04A0                     l1281:	
  3611                           ;incstack = 0
  3612                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3613                           
  3614  04A0  0064               	clrwdt	;# 
  3615  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  3616  04A2  1303               	bcf	3,6	;RP1=0, select bank1
  3617  04A3  0181               	clrf	1	;volatile
  3618  04A4  3007               	movlw	7
  3619  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3620  04A6  0481               	iorwf	1,f	;volatile
  3621  04A7  1581               	bsf	1,3	;volatile
  3622  04A8  0064               	clrwdt	;# 
  3623  04A9  300A               	movlw	10
  3624  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3625  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  3626  04AC  0081               	movwf	1	;volatile
  3627  04AD  0064               	clrwdt	;# 
  3628  04AE  1283               	bcf	3,5	;RP0=0, select bank2
  3629  04AF  1703               	bsf	3,6	;RP1=1, select bank2
  3630  04B0  0191               	clrf	17	;volatile
  3631  04B1  0193               	clrf	19	;volatile
  3632  04B2  3002               	movlw	2
  3633  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  3634  04B4  0094               	movwf	20	;volatile
  3635  04B5  0063               	sleep	;# 
  3636  04B6  0000               	nop	;# 
  3637  04B7  0064               	clrwdt	;# 
  3638  04B8  3072               	movlw	114
  3639  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3640  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  3641  04BB  0094               	movwf	20	;volatile
  3642  04BC  3079               	movlw	121
  3643  04BD  1703               	bsf	3,6	;RP1=1, select bank2
  3644  04BE  0093               	movwf	19	;volatile
  3645  04BF  2590  118A         	fcall	_ClearResSum
  3646  04C1  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3647  04C2  2530  118A         	fcall	_GetTouchKeyValue
  3648  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  3649  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  3650  04C6  27F6  118A         	fcall	PL30	;call to abstracted procedure
  3651  04C8  1C0B               	btfss	11,0	;volatile
  3652  04C9  188B               	btfsc	11,1	;volatile
  3653  04CA  2CCD               	goto	l3872
  3654  04CB  1D8D               	btfss	13,3	;volatile
  3655  04CC  2CD4               	goto	l3884
  3656  04CD                     l3872:	
  3657  04CD  2590               	fcall	_ClearResSum
  3658  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3659  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3660  04D0  01BE               	clrf	_KeyCounter
  3661  04D1  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3662  04D2  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3663  04D3  0008               	return
  3664  04D4                     l3884:	
  3665  04D4  0853               	movf	SystemEnterSleep@92,w
  3666  04D5  3903               	andlw	3
  3667  04D6  1003               	clrc
  3668  04D7  1903               	btfsc	3,2
  3669  04D8  2D2A               	goto	L7
  3670  04D9  0D55               	rlf	SystemEnterSleep@91,w
  3671  04DA  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  3672  04DB  0084               	movwf	4
  3673  04DC  1383               	bcf	3,7	;select IRP bank0
  3674  04DD  0800               	movf	0,w
  3675  04DE  00D1               	movwf	SystemEnterSleep@93
  3676  04DF  0A84               	incf	4,f
  3677  04E0  0800               	movf	0,w
  3678  04E1  00D2               	movwf	SystemEnterSleep@93+1
  3679  04E2  00D0               	movwf	SystemEnterSleep@94+1
  3680  04E3  0851               	movf	SystemEnterSleep@93,w
  3681  04E4  00CF               	movwf	SystemEnterSleep@94
  3682  04E5  0851               	movf	SystemEnterSleep@93,w
  3683  04E6  0452               	iorwf	SystemEnterSleep@93+1,w
  3684  04E7  1903               	btfsc	3,2
  3685  04E8  2D29               	goto	l3918
  3686  04E9  0855               	movf	SystemEnterSleep@91,w
  3687  04EA  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3688  04EB  0084               	movwf	4
  3689  04EC  158A  2000  118A   	fcall	stringdir
  3690  04EF  07CF               	addwf	SystemEnterSleep@94,f
  3691  04F0  1803               	skipnc
  3692  04F1  0AD0               	incf	SystemEnterSleep@94+1,f
  3693  04F2  1003               	clrc
  3694  04F3  0D55               	rlf	SystemEnterSleep@91,w
  3695  04F4  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3696  04F5  27D5  118A         	fcall	PL16	;call to abstracted procedure
  3697  04F7  0850               	movf	SystemEnterSleep@94+1,w
  3698  04F8  024E               	subwf	??_SystemEnterSleep+1,w
  3699  04F9  1D03               	skipz
  3700  04FA  2CFD               	goto	u3595
  3701  04FB  084F               	movf	SystemEnterSleep@94,w
  3702  04FC  024D               	subwf	??_SystemEnterSleep,w
  3703  04FD                     u3595:	
  3704  04FD  1C03               	skipc
  3705  04FE  2D11               	goto	L6
  3706  04FF  27F6  118A         	fcall	PL30	;call to abstracted procedure
  3707  0501                     l3898:	
  3708  0501  0853               	movf	SystemEnterSleep@92,w
  3709  0502  3903               	andlw	3
  3710  0503  1D03               	btfss	3,2
  3711  0504  2D08               	goto	l3902
  3712  0505  0855               	movf	SystemEnterSleep@91,w
  3713  0506  2694  118A         	fcall	_KeyClearOne
  3714  0508                     l3902:	
  3715  0508  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0509  3002               	movlw	2
  3717  050A  1303               	bcf	3,6	;RP1=0, select bank0
  3718  050B  1003               	clrc
  3719  050C  27FB  118A         	fcall	PL32	;call to abstracted procedure
  3720  050E  1803               	btfsc	3,0
  3721  050F  2CCD               	goto	l3872
  3722  0510  2D01               	goto	l3898
  3723  0511                     L6:	
  3724  0511  0D55               	rlf	SystemEnterSleep@91,w
  3725  0512  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3726  0513  27D5  118A         	fcall	PL16	;call to abstracted procedure
  3727  0515  1003               	clrc
  3728  0516  0D55               	rlf	SystemEnterSleep@91,w
  3729  0517  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3730  0518  27BF  118A         	fcall	PL12	;call to abstracted procedure
  3731  051A  0800               	movf	0,w
  3732  051B  00CD               	movwf	??_SystemEnterSleep
  3733  051C  0A84               	incf	4,f
  3734  051D  0800               	movf	0,w
  3735  051E  00CE               	movwf	??_SystemEnterSleep+1
  3736  051F  1003               	clrc
  3737  0520  0D55               	rlf	SystemEnterSleep@91,w
  3738  0521  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3739  0522  27BF  118A         	fcall	PL12	;call to abstracted procedure
  3740  0524  0851               	movf	SystemEnterSleep@93,w
  3741  0525  0080               	movwf	0
  3742  0526  0A84               	incf	4,f
  3743  0527  0852               	movf	SystemEnterSleep@93+1,w
  3744  0528  0080               	movwf	0
  3745  0529                     l3918:	
  3746  0529  1003               	clrc
  3747  052A                     L7:	
  3748  052A  3002               	movlw	2
  3749  052B  27FB  118A         	fcall	PL32	;call to abstracted procedure
  3750  052D  1803               	btfsc	3,0
  3751  052E  2CA0               	goto	l1281
  3752  052F  2CD4               	goto	l3884
  3753  0530                     __end_of_SystemEnterSleep:	
  3754  0530                     __ptext26:	
  3755 ;; *************** function _GetTouchKeyValue *****************
  3756 ;; Defined at:
  3757 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  63              2    5[COMMON] unsigned int 
  3762 ;;  64              2    3[COMMON] unsigned int 
  3763 ;;  62              1    7[COMMON] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/200
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3773 ;;      Params:         0       0       0       0
  3774 ;;      Locals:         5       0       0       0
  3775 ;;      Temps:          0       0       0       0
  3776 ;;      Totals:         5       0       0       0
  3777 ;;Total ram usage:        5 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    2
  3780 ;; This function calls:
  3781 ;;		_ClearResSum
  3782 ;; This function is called by:
  3783 ;;		_CheckTouchKey
  3784 ;;		_SystemEnterSleep
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function _GetTouchKeyValue
  3790  0530                     _GetTouchKeyValue:	
  3791                           
  3792                           ;incstack = 0
  3793                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3794  0530  01F7               	clrf	GetTouchKeyValue@62
  3795  0531  01F5               	clrf	GetTouchKeyValue@63
  3796  0532  0AF5               	incf	GetTouchKeyValue@63,f
  3797  0533  01F6               	clrf	GetTouchKeyValue@63+1
  3798  0534                     l2848:	
  3799  0534  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3800  0535  2D3A               	goto	l2852
  3801  0536  0875               	movf	GetTouchKeyValue@63,w
  3802  0537  3903               	andlw	3
  3803  0538  1903               	btfsc	3,2
  3804  0539  2D86               	goto	l2880
  3805  053A                     l2852:	
  3806  053A  1283               	bcf	3,5	;RP0=0, select bank2
  3807  053B  1703               	bsf	3,6	;RP1=1, select bank2
  3808  053C  0191               	clrf	17	;volatile
  3809  053D  0192               	clrf	18	;volatile
  3810  053E  3079               	movlw	121
  3811  053F  0093               	movwf	19	;volatile
  3812  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3813  0541  1305               	bcf	5,6	;volatile
  3814  0542  1306               	bcf	6,6	;volatile
  3815  0543  0000               	nop	;# 
  3816  0544  0000               	nop	;# 
  3817  0545  0000               	nop	;# 
  3818  0546  0000               	nop	;# 
  3819  0547  0000               	nop	;# 
  3820  0548  0000               	nop	;# 
  3821  0549  0000               	nop	;# 
  3822  054A  0000               	nop	;# 
  3823  054B  1283               	bcf	3,5	;RP0=0, select bank0
  3824  054C  1303               	bcf	3,6	;RP1=0, select bank0
  3825  054D  1705               	bsf	5,6	;volatile
  3826  054E  0877               	movf	GetTouchKeyValue@62,w
  3827  054F  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3828  0550  0084               	movwf	4
  3829  0551  158A  2000  118A   	fcall	stringdir
  3830  0554  1703               	bsf	3,6	;RP1=1, select bank2
  3831  0555  0091               	movwf	17	;volatile
  3832  0556  0877               	movf	GetTouchKeyValue@62,w
  3833  0557  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3834  0558  0084               	movwf	4
  3835  0559  158A  2000  118A   	fcall	stringdir
  3836  055C  0092               	movwf	18	;volatile
  3837  055D  0000               	nop	;# 
  3838  055E  0000               	nop	;# 
  3839  055F  0000               	nop	;# 
  3840  0560  0000               	nop	;# 
  3841  0561  1283               	bcf	3,5	;RP0=0, select bank2
  3842  0562  1703               	bsf	3,6	;RP1=1, select bank2
  3843  0563  1411               	bsf	17,0	;volatile
  3844  0564  30D0               	movlw	208
  3845  0565  00F3               	movwf	GetTouchKeyValue@64
  3846  0566  3007               	movlw	7
  3847  0567  00F4               	movwf	GetTouchKeyValue@64+1
  3848  0568                     l1191:	
  3849  0568  1B91               	btfsc	17,7	;volatile
  3850  0569  2D76               	goto	l2878
  3851  056A  3001               	movlw	1
  3852  056B  02F3               	subwf	GetTouchKeyValue@64,f
  3853  056C  1C03               	skipc
  3854  056D  03F4               	decf	GetTouchKeyValue@64+1,f
  3855  056E  0873               	movf	GetTouchKeyValue@64,w
  3856  056F  0474               	iorwf	GetTouchKeyValue@64+1,w
  3857  0570  1D03               	btfss	3,2
  3858  0571  2D68               	goto	l1191
  3859  0572  30FF               	movlw	255
  3860  0573  1303               	bcf	3,6	;RP1=0, select bank0
  3861  0574  00BE               	movwf	_KeyCounter
  3862  0575  2D90               	ljmp	l2698
  3863  0576                     l2878:	
  3864  0576  1003               	clrc
  3865  0577  0D77               	rlf	GetTouchKeyValue@62,w
  3866  0578  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  3867  0579  0084               	movwf	4
  3868  057A  0816               	movf	22,w	;volatile
  3869  057B  1383               	bcf	3,7	;select IRP bank0
  3870  057C  0780               	addwf	0,f
  3871  057D  0F84               	incfsz	4,f
  3872  057E  0800               	movf	0,w
  3873  057F  1803               	skipnc
  3874  0580  0A00               	incf	0,w
  3875  0581  00FF               	movwf	127
  3876  0582  0817               	movf	23,w	;volatile
  3877  0583  077F               	addwf	127,w
  3878  0584  0080               	movwf	0
  3879  0585  0384               	decf	4,f
  3880  0586                     l2880:	
  3881  0586  3002               	movlw	2
  3882  0587  1003               	clrc
  3883  0588  0DF5               	rlf	GetTouchKeyValue@63,f
  3884  0589  0DF6               	rlf	GetTouchKeyValue@63+1,f
  3885  058A  0AF7               	incf	GetTouchKeyValue@62,f
  3886  058B  0277               	subwf	GetTouchKeyValue@62,w
  3887  058C  1C03               	skipc
  3888  058D  2D34               	goto	l2848
  3889  058E  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  3890  058F  0008               	return
  3891  0590                     __end_of_GetTouchKeyValue:	
  3892  0590                     __ptext27:	
  3893 ;; *************** function _ClearResSum *****************
  3894 ;; Defined at:
  3895 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  56              1    2[COMMON] unsigned char 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;                  1    wreg      void 
  3902 ;; Registers used:
  3903 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/200
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3909 ;;      Params:         0       0       0       0
  3910 ;;      Locals:         1       0       0       0
  3911 ;;      Temps:          0       0       0       0
  3912 ;;      Totals:         1       0       0       0
  3913 ;;Total ram usage:        1 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    1
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_GetTouchKeyValue
  3920 ;;		_CheckTouchKey
  3921 ;;		_SystemEnterSleep
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           
  3926                           ;psect for function _ClearResSum
  3927  0590                     _ClearResSum:	
  3928  0590                     l2698:	
  3929                           ;incstack = 0
  3930                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3931                           
  3932  0590  01F2               	clrf	ClearResSum@56
  3933  0591                     l2700:	
  3934  0591  1003               	clrc
  3935  0592  0D72               	rlf	ClearResSum@56,w
  3936  0593  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  3937  0594  0084               	movwf	4
  3938  0595  3002               	movlw	2
  3939  0596  1383               	bcf	3,7	;select IRP bank0
  3940  0597  0180               	clrf	0
  3941  0598  0A84               	incf	4,f
  3942  0599  0180               	clrf	0
  3943  059A  0AF2               	incf	ClearResSum@56,f
  3944  059B  0272               	subwf	ClearResSum@56,w
  3945  059C  1803               	btfsc	3,0
  3946  059D  0008               	return
  3947  059E  2D91               	goto	l2700
  3948  059F                     __end_of_ClearResSum:	
  3949  059F                     __ptext29:	
  3950 ;; *************** function _CheckOnceResult *****************
  3951 ;; Defined at:
  3952 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  71              2   10[BANK0 ] unsigned int 
  3957 ;;  72              2    7[BANK0 ] unsigned int 
  3958 ;;  73              2    4[BANK0 ] unsigned int 
  3959 ;;  68              1   12[BANK0 ] unsigned char 
  3960 ;;  69              1    9[BANK0 ] unsigned char 
  3961 ;;  70              1    6[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/100
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3971 ;;      Params:         0       0       0       0
  3972 ;;      Locals:         0       9       0       0
  3973 ;;      Temps:          0       4       0       0
  3974 ;;      Totals:         0      13       0       0
  3975 ;;Total ram usage:       13 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    3
  3978 ;; This function calls:
  3979 ;;		_KeyClearOne
  3980 ;;		_KeyHave
  3981 ;;		_KeyIsIn
  3982 ;; This function is called by:
  3983 ;;		_CheckTouchKey
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           
  3988                           ;psect for function _CheckOnceResult
  3989  059F                     _CheckOnceResult:	
  3990                           
  3991                           ;incstack = 0
  3992                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3993  059F  1283               	bcf	3,5	;RP0=0, select bank0
  3994  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  3995  05A1  01D9               	clrf	CheckOnceResult@68
  3996  05A2  01F9               	clrf	_KeyData	;volatile
  3997  05A3  01FA               	clrf	_KeyData+1	;volatile
  3998  05A4  01BD               	clrf	_KeyMaxSub
  3999  05A5                     l4028:	
  4000  05A5  0859               	movf	CheckOnceResult@68,w
  4001  05A6  3907               	andlw	7
  4002  05A7  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4003  05A8  0084               	movwf	4
  4004  05A9  158A  2000  118A   	fcall	stringdir
  4005  05AC  00D3               	movwf	CheckOnceResult@70
  4006  05AD  1003               	clrc
  4007  05AE  0D59               	rlf	CheckOnceResult@68,w
  4008  05AF  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4009  05B0  0084               	movwf	4
  4010  05B1  3003               	movlw	3
  4011  05B2                     u3875:	
  4012  05B2  0A84               	incf	4,f
  4013  05B3  1003               	clrc
  4014  05B4  1383               	bcf	3,7	;select IRP bank0
  4015  05B5  0C80               	rrf	0,f
  4016  05B6  0384               	decf	4,f
  4017  05B7  0C80               	rrf	0,f
  4018  05B8  3EFF               	addlw	-1
  4019  05B9  1D03               	skipz
  4020  05BA  2DB2               	goto	u3875
  4021  05BB  1003               	clrc
  4022  05BC  0D59               	rlf	CheckOnceResult@68,w
  4023  05BD  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4024  05BE  0084               	movwf	4
  4025  05BF  0800               	movf	0,w
  4026  05C0  00D7               	movwf	CheckOnceResult@71
  4027  05C1  0A84               	incf	4,f
  4028  05C2  0800               	movf	0,w
  4029  05C3  00D8               	movwf	CheckOnceResult@71+1
  4030  05C4  0859               	movf	CheckOnceResult@68,w
  4031  05C5  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4032  05C6  0084               	movwf	4
  4033  05C7  158A  2000  118A   	fcall	stringdir
  4034  05CA  00D6               	movwf	CheckOnceResult@69
  4035  05CB  00D4               	movwf	CheckOnceResult@72
  4036  05CC  01D5               	clrf	CheckOnceResult@72+1
  4037  05CD  0857               	movf	CheckOnceResult@71,w
  4038  05CE  07D4               	addwf	CheckOnceResult@72,f
  4039  05CF  1803               	skipnc
  4040  05D0  0AD5               	incf	CheckOnceResult@72+1,f
  4041  05D1  0858               	movf	CheckOnceResult@71+1,w
  4042  05D2  07D5               	addwf	CheckOnceResult@72+1,f
  4043  05D3  0859               	movf	CheckOnceResult@68,w
  4044  05D4  2680  118A         	fcall	_KeyIsIn
  4045  05D6  3A00               	xorlw	0
  4046  05D7  1003               	clrc
  4047  05D8  1D03               	skipz
  4048  05D9  2E34               	goto	L11
  4049  05DA  0D59               	rlf	CheckOnceResult@68,w
  4050  05DB  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4051  05DC  0084               	movwf	4
  4052  05DD  1383               	bcf	3,7	;select IRP bank0
  4053  05DE  0800               	movf	0,w
  4054  05DF  00D1               	movwf	CheckOnceResult@73
  4055  05E0  0A84               	incf	4,f
  4056  05E1  0800               	movf	0,w
  4057  05E2  00D2               	movwf	CheckOnceResult@73+1
  4058  05E3  1003               	clrc
  4059  05E4  0D59               	rlf	CheckOnceResult@68,w
  4060  05E5  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4061  05E6  27B8  118A         	fcall	PL8	;call to abstracted procedure
  4062  05E8  0255               	subwf	CheckOnceResult@72+1,w
  4063  05E9  1D03               	skipz
  4064  05EA  2DED               	goto	u3895
  4065  05EB  084D               	movf	??_CheckOnceResult,w
  4066  05EC  0254               	subwf	CheckOnceResult@72,w
  4067  05ED                     u3895:	
  4068  05ED  1803               	skipnc
  4069  05EE  2DFC               	goto	l4046
  4070  05EF  1003               	clrc
  4071  05F0  0D59               	rlf	CheckOnceResult@68,w
  4072  05F1  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4073  05F2  27B8  118A         	fcall	PL8	;call to abstracted procedure
  4074  05F4  0857               	movf	CheckOnceResult@71,w
  4075  05F5  024D               	subwf	??_CheckOnceResult,w
  4076  05F6  00D7               	movwf	CheckOnceResult@71
  4077  05F7  0858               	movf	CheckOnceResult@71+1,w
  4078  05F8  1C03               	skipc
  4079  05F9  0A58               	incf	CheckOnceResult@71+1,w
  4080  05FA  024E               	subwf	??_CheckOnceResult+1,w
  4081  05FB  2E20               	goto	L9
  4082  05FC                     l4046:	
  4083  05FC  0852               	movf	CheckOnceResult@73+1,w
  4084  05FD  0255               	subwf	CheckOnceResult@72+1,w
  4085  05FE  1D03               	skipz
  4086  05FF  2E02               	goto	u3905
  4087  0600  0851               	movf	CheckOnceResult@73,w
  4088  0601  0254               	subwf	CheckOnceResult@72,w
  4089  0602                     u3905:	
  4090  0602  1803               	skipnc
  4091  0603  2E78               	goto	l4092
  4092  0604  1003               	clrc
  4093  0605  0D59               	rlf	CheckOnceResult@68,w
  4094  0606  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4095  0607  27B8  118A         	fcall	PL8	;call to abstracted procedure
  4096  0609  0255               	subwf	CheckOnceResult@72+1,w
  4097  060A  1D03               	skipz
  4098  060B  2E0E               	goto	u3915
  4099  060C  084D               	movf	??_CheckOnceResult,w
  4100  060D  0254               	subwf	CheckOnceResult@72,w
  4101  060E                     u3915:	
  4102  060E  1803               	skipnc
  4103  060F  2E78               	goto	l4092
  4104  0610  1003               	clrc
  4105  0611  0D59               	rlf	CheckOnceResult@68,w
  4106  0612  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4107  0613  0084               	movwf	4
  4108  0614  0851               	movf	CheckOnceResult@73,w
  4109  0615  0080               	movwf	0
  4110  0616  0A84               	incf	4,f
  4111  0617  0852               	movf	CheckOnceResult@73+1,w
  4112  0618  0080               	movwf	0
  4113  0619  0857               	movf	CheckOnceResult@71,w
  4114  061A  0251               	subwf	CheckOnceResult@73,w
  4115  061B  00D7               	movwf	CheckOnceResult@71
  4116  061C  0858               	movf	CheckOnceResult@71+1,w
  4117  061D  1C03               	skipc
  4118  061E  0A58               	incf	CheckOnceResult@71+1,w
  4119  061F  0252               	subwf	CheckOnceResult@73+1,w
  4120  0620                     L9:	
  4121  0620  00D8               	movwf	CheckOnceResult@71+1
  4122  0621  0859               	movf	CheckOnceResult@68,w
  4123  0622  3EB2               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4124  0623  0084               	movwf	4
  4125  0624  0180               	clrf	0
  4126  0625  0858               	movf	CheckOnceResult@71+1,w
  4127  0626  1903               	btfsc	3,2
  4128  0627  2E2A               	goto	l4060
  4129  0628  30FF               	movlw	255
  4130  0629  2E2B               	goto	L10
  4131  062A                     l4060:	
  4132  062A  0857               	movf	CheckOnceResult@71,w
  4133  062B                     L10:	
  4134  062B  00D6               	movwf	CheckOnceResult@69
  4135  062C  023D               	subwf	_KeyMaxSub,w
  4136  062D  1803               	skipnc
  4137  062E  2E32               	goto	l4066
  4138  062F  0856               	movf	CheckOnceResult@69,w
  4139  0630  00BD               	movwf	_KeyMaxSub
  4140  0631  2E72               	goto	l4090
  4141  0632                     l4066:	
  4142  0632  0ABE               	incf	_KeyCounter,f
  4143  0633  2E78               	goto	l4092
  4144  0634                     L11:	
  4145  0634  0D59               	rlf	CheckOnceResult@68,w
  4146  0635  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4147  0636  0084               	movwf	4
  4148  0637  1383               	bcf	3,7	;select IRP bank1
  4149  0638  0800               	movf	0,w
  4150  0639  00CD               	movwf	??_CheckOnceResult
  4151  063A  0A84               	incf	4,f
  4152  063B  0800               	movf	0,w
  4153  063C  00CE               	movwf	??_CheckOnceResult+1
  4154  063D  084D               	movf	??_CheckOnceResult,w
  4155  063E  3E01               	addlw	1
  4156  063F  00CF               	movwf	??_CheckOnceResult+2
  4157  0640  084E               	movf	??_CheckOnceResult+1,w
  4158  0641  1803               	skipnc
  4159  0642  3E01               	addlw	1
  4160  0643  00D0               	movwf	??_CheckOnceResult+3
  4161  0644  0855               	movf	CheckOnceResult@72+1,w
  4162  0645  0250               	subwf	??_CheckOnceResult+3,w
  4163  0646  1D03               	skipz
  4164  0647  2E4A               	goto	u3945
  4165  0648  0854               	movf	CheckOnceResult@72,w
  4166  0649  024F               	subwf	??_CheckOnceResult+2,w
  4167  064A                     u3945:	
  4168  064A  1C03               	btfss	3,0
  4169  064B  2E78               	goto	l4092
  4170  064C  1003               	clrc
  4171  064D  0D59               	rlf	CheckOnceResult@68,w
  4172  064E  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4173  064F  0084               	movwf	4
  4174  0650  0800               	movf	0,w
  4175  0651  27A6  118A         	fcall	PL4	;call to abstracted procedure
  4176  0653  1C03               	skipc
  4177  0654  2E5E               	goto	l4080
  4178  0655  1003               	clrc
  4179  0656  0D59               	rlf	CheckOnceResult@68,w
  4180  0657  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4181  0658  0084               	movwf	4
  4182  0659  0800               	movf	0,w
  4183  065A  27A6  118A         	fcall	PL4	;call to abstracted procedure
  4184  065C  1803               	skipnc
  4185  065D  2E6A               	goto	l4084
  4186  065E                     l4080:	
  4187  065E  0859               	movf	CheckOnceResult@68,w
  4188  065F  3EB2               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4189  0660  0084               	movwf	4
  4190  0661  3009               	movlw	9
  4191  0662  0A80               	incf	0,f
  4192  0663  0200               	subwf	0,w
  4193  0664  1C03               	skipc
  4194  0665  2E6E               	goto	l4088
  4195  0666  0859               	movf	CheckOnceResult@68,w
  4196  0667  2694  118A         	fcall	_KeyClearOne
  4197  0669  2E78               	goto	l4092
  4198  066A                     l4084:	
  4199  066A  0859               	movf	CheckOnceResult@68,w
  4200  066B  3EB2               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4201  066C  0084               	movwf	4
  4202  066D  0180               	clrf	0
  4203  066E                     l4088:	
  4204  066E  087A               	movf	_KeyData+1,w	;volatile
  4205  066F  0479               	iorwf	_KeyData,w	;volatile
  4206  0670  1D03               	btfss	3,2
  4207  0671  2E78               	goto	l4092
  4208  0672                     l4090:	
  4209  0672  0853               	movf	CheckOnceResult@70,w
  4210  0673  00F2               	movwf	KeyHave@59
  4211  0674  01F3               	clrf	KeyHave@59+1
  4212  0675  0859               	movf	CheckOnceResult@68,w
  4213  0676  26A9  118A         	fcall	_KeyHave
  4214  0678                     l4092:	
  4215  0678  3002               	movlw	2
  4216  0679  1283               	bcf	3,5	;RP0=0, select bank0
  4217  067A  1303               	bcf	3,6	;RP1=0, select bank0
  4218  067B  0AD9               	incf	CheckOnceResult@68,f
  4219  067C  0259               	subwf	CheckOnceResult@68,w
  4220  067D  1803               	btfsc	3,0
  4221  067E  0008               	return
  4222  067F  2DA5               	goto	l4028
  4223  0680                     __end_of_CheckOnceResult:	
  4224  0680                     __ptext33:	
  4225 ;; *************** function _KeyIsIn *****************
  4226 ;; Defined at:
  4227 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  45              1    wreg     unsigned char 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  45              1    3[COMMON] unsigned char 
  4232 ;;  46              1    2[COMMON] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      unsigned char 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 300/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4242 ;;      Params:         0       0       0       0
  4243 ;;      Locals:         2       0       0       0
  4244 ;;      Temps:          0       0       0       0
  4245 ;;      Totals:         2       0       0       0
  4246 ;;Total ram usage:        2 bytes
  4247 ;; Hardware stack levels used:    2
  4248 ;; Hardware stack levels required when called:    1
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_KeyClearIn
  4253 ;;		_CheckOnceResult
  4254 ;;		_CheckKeyOldValue
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _KeyIsIn
  4260  0680                     _KeyIsIn:	
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4264                           ;KeyIsIn@45 stored from wreg
  4265  0680  00F3               	movwf	KeyIsIn@45
  4266  0681  3907               	andlw	7
  4267  0682  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4268  0683  0084               	movwf	4
  4269  0684  158A  2000  118A   	fcall	stringdir
  4270  0687  00F2               	movwf	KeyIsIn@46
  4271  0688  1DF3               	btfss	KeyIsIn@45,3
  4272  0689  2E8E               	goto	l2684
  4273  068A  1283               	bcf	3,5	;RP0=0, select bank0
  4274  068B  1303               	bcf	3,6	;RP1=0, select bank0
  4275  068C  0839               	movf	_KeyFlag+1,w	;volatile
  4276  068D  2E91               	goto	L16
  4277  068E                     l2684:	
  4278  068E  1283               	bcf	3,5	;RP0=0, select bank0
  4279  068F  1303               	bcf	3,6	;RP1=0, select bank0
  4280  0690  0838               	movf	_KeyFlag,w	;volatile
  4281  0691                     L16:	
  4282  0691  05F2               	andwf	KeyIsIn@46,f
  4283  0692  0872               	movf	KeyIsIn@46,w
  4284  0693  0008               	return
  4285  0694                     __end_of_KeyIsIn:	
  4286  0694                     __ptext31:	
  4287 ;; *************** function _KeyClearOne *****************
  4288 ;; Defined at:
  4289 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  49              1    wreg     unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  49              1    2[COMMON] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4303 ;;      Params:         0       0       0       0
  4304 ;;      Locals:         1       0       0       0
  4305 ;;      Temps:          0       0       0       0
  4306 ;;      Totals:         1       0       0       0
  4307 ;;Total ram usage:        1 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    1
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_KeyClearIn
  4314 ;;		_KeyStopClear
  4315 ;;		_CheckOnceResult
  4316 ;;		_SystemEnterSleep
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _KeyClearOne
  4322  0694                     _KeyClearOne:	
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4326                           ;KeyClearOne@49 stored from wreg
  4327  0694  00F2               	movwf	KeyClearOne@49
  4328  0695  1003               	clrc
  4329  0696  0D72               	rlf	KeyClearOne@49,w
  4330  0697  3E28               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4331  0698  0084               	movwf	4
  4332  0699  1383               	bcf	3,7	;select IRP bank0
  4333  069A  27E4  118A         	fcall	PL22	;call to abstracted procedure
  4334  069C  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4335  069D  0084               	movwf	4
  4336  069E  27E4  118A         	fcall	PL22	;call to abstracted procedure
  4337  06A0  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4338  06A1  0084               	movwf	4
  4339  06A2  27E4               	fcall	PL22	;call to abstracted procedure
  4340  06A3  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4341  06A4  0084               	movwf	4
  4342  06A5  0180               	clrf	0
  4343  06A6  0A84               	incf	4,f
  4344  06A7  0180               	clrf	0	;# 
  4345  06A8  0008               	return
  4346  06A9                     __end_of_KeyClearOne:	
  4347  06A9                     __ptext30:	
  4348 ;; *************** function _KeyHave *****************
  4349 ;; Defined at:
  4350 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  58              1    wreg     unsigned char 
  4353 ;;  59              2    2[COMMON] unsigned int 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  58              1    4[COMMON] unsigned char 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : B00/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4365 ;;      Params:         2       0       0       0
  4366 ;;      Locals:         1       0       0       0
  4367 ;;      Temps:          0       0       0       0
  4368 ;;      Totals:         3       0       0       0
  4369 ;;Total ram usage:        3 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    1
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_CheckOnceResult
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           
  4380                           ;psect for function _KeyHave
  4381  06A9                     _KeyHave:	
  4382                           
  4383                           ;incstack = 0
  4384                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4385                           ;KeyHave@58 stored from wreg
  4386  06A9  00F4               	movwf	KeyHave@58
  4387  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  4388  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  4389  06AC  0ABE               	incf	_KeyCounter,f
  4390  06AD  01F9               	clrf	_KeyData	;volatile
  4391  06AE  01FA               	clrf	_KeyData+1	;volatile
  4392  06AF  1DF4               	btfss	KeyHave@58,3
  4393  06B0  2EB4               	goto	l2836
  4394  06B1  0872               	movf	KeyHave@59,w
  4395  06B2  00FA               	movwf	_KeyData+1	;volatile
  4396  06B3  0008               	return
  4397  06B4                     l2836:	
  4398  06B4  0872               	movf	KeyHave@59,w
  4399  06B5  00F9               	movwf	_KeyData	;volatile
  4400  06B6  0008               	return
  4401  06B7                     __end_of_KeyHave:	
  4402  06B7                     __ptext32:	
  4403 ;; *************** function _CheckKeyOldValue *****************
  4404 ;; Defined at:
  4405 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;		None
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  80              2    2[BANK0 ] unsigned int 
  4410 ;;  79              2    0[BANK0 ] unsigned int 
  4411 ;;  78              1    4[BANK0 ] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/100
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4421 ;;      Params:         0       0       0       0
  4422 ;;      Locals:         0       5       0       0
  4423 ;;      Temps:          2       0       0       0
  4424 ;;      Totals:         2       5       0       0
  4425 ;;Total ram usage:        7 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    3
  4428 ;; This function calls:
  4429 ;;		_KeyIsIn
  4430 ;; This function is called by:
  4431 ;;		_CheckTouchKey
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           
  4436                           ;psect for function _CheckKeyOldValue
  4437  06B7                     _CheckKeyOldValue:	
  4438                           
  4439                           ;incstack = 0
  4440                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4441  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  4442  06B8  3004               	movlw	4
  4443  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  4444  06BA  01D1               	clrf	CheckKeyOldValue@78
  4445  06BB  0ABC               	incf	CheckKeyOldValue@F77,f
  4446  06BC  023C               	subwf	CheckKeyOldValue@F77,w
  4447  06BD  1C03               	btfss	3,0
  4448  06BE  0008               	return
  4449  06BF  01BC               	clrf	CheckKeyOldValue@F77
  4450  06C0                     l3230:	
  4451  06C0  1003               	clrc
  4452  06C1  0D51               	rlf	CheckKeyOldValue@78,w
  4453  06C2  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4454  06C3  0084               	movwf	4
  4455  06C4  1383               	bcf	3,7	;select IRP bank0
  4456  06C5  0800               	movf	0,w
  4457  06C6  00CD               	movwf	CheckKeyOldValue@79
  4458  06C7  0A84               	incf	4,f
  4459  06C8  0800               	movf	0,w
  4460  06C9  00CE               	movwf	CheckKeyOldValue@79+1
  4461  06CA  0851               	movf	CheckKeyOldValue@78,w
  4462  06CB  2680  118A         	fcall	_KeyIsIn
  4463  06CD  3A00               	xorlw	0
  4464  06CE  1003               	clrc
  4465  06CF  1D03               	skipz
  4466  06D0  2F05               	goto	L15
  4467  06D1  0D51               	rlf	CheckKeyOldValue@78,w
  4468  06D2  3E28               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4469  06D3  0084               	movwf	4
  4470  06D4  1383               	bcf	3,7	;select IRP bank0
  4471  06D5  2798  118A         	fcall	PL2	;call to abstracted procedure
  4472  06D7  1903               	skipnz
  4473  06D8  024F               	subwf	CheckKeyOldValue@80,w
  4474  06D9  1C03               	skipc
  4475  06DA  2EE1               	goto	L12
  4476  06DB  0F4F               	incfsz	CheckKeyOldValue@80,w
  4477  06DC  2F04               	goto	l1232
  4478  06DD  0A50               	incf	CheckKeyOldValue@80+1,w
  4479  06DE  1003               	clrc
  4480  06DF  1D03               	btfss	3,2
  4481  06E0  2F05               	goto	L15
  4482  06E1                     L12:	
  4483  06E1  0D51               	rlf	CheckKeyOldValue@78,w
  4484  06E2  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4485  06E3  0084               	movwf	4
  4486  06E4  2798  118A         	fcall	PL2	;call to abstracted procedure
  4487  06E6  1903               	skipnz
  4488  06E7  024F               	subwf	CheckKeyOldValue@80,w
  4489  06E8  1C03               	skipc
  4490  06E9  2EF0               	goto	L13
  4491  06EA  0F4F               	incfsz	CheckKeyOldValue@80,w
  4492  06EB  2F04               	goto	l1232
  4493  06EC  0A50               	incf	CheckKeyOldValue@80+1,w
  4494  06ED  1003               	clrc
  4495  06EE  1D03               	btfss	3,2
  4496  06EF  2F05               	goto	L15
  4497  06F0                     L13:	
  4498  06F0  0D51               	rlf	CheckKeyOldValue@78,w
  4499  06F1  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4500  06F2  0084               	movwf	4
  4501  06F3  2798  118A         	fcall	PL2	;call to abstracted procedure
  4502  06F5  1903               	skipnz
  4503  06F6  024F               	subwf	CheckKeyOldValue@80,w
  4504  06F7  1C03               	skipc
  4505  06F8  2EFF               	goto	L14
  4506  06F9  0F4F               	incfsz	CheckKeyOldValue@80,w
  4507  06FA  2F04               	goto	l1232
  4508  06FB  0A50               	incf	CheckKeyOldValue@80+1,w
  4509  06FC  1003               	clrc
  4510  06FD  1D03               	btfss	3,2
  4511  06FE  2F05               	goto	L15
  4512  06FF                     L14:	
  4513  06FF  0D51               	rlf	CheckKeyOldValue@78,w
  4514  0700  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4515  0701  0084               	movwf	4
  4516  0702  27F0  118A         	fcall	PL28	;call to abstracted procedure
  4517  0704                     l1232:	
  4518  0704  1003               	clrc
  4519  0705                     L15:	
  4520  0705  0D51               	rlf	CheckKeyOldValue@78,w
  4521  0706  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4522  0707  0084               	movwf	4
  4523  0708  1383               	bcf	3,7	;select IRP bank0
  4524  0709  27DC  118A         	fcall	PL20	;call to abstracted procedure
  4525  070B  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4526  070C  27CA  118A         	fcall	PL14	;call to abstracted procedure
  4527  070E  27DC  118A         	fcall	PL20	;call to abstracted procedure
  4528  0710  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4529  0711  27CA  118A         	fcall	PL14	;call to abstracted procedure
  4530  0713  27F0  118A         	fcall	PL28	;call to abstracted procedure
  4531  0715  3002               	movlw	2
  4532  0716  0AD1               	incf	CheckKeyOldValue@78,f
  4533  0717  0251               	subwf	CheckKeyOldValue@78,w
  4534  0718  1803               	btfsc	3,0
  4535  0719  0008               	return
  4536  071A  2EC0               	goto	l3230
  4537  071B                     __end_of_CheckKeyOldValue:	
  4538  071B                     __ptext25:	
  4539 ;; *************** function _KeyStopClear *****************
  4540 ;; Defined at:
  4541 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  53              1    3[COMMON] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/100
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4555 ;;      Params:         0       0       0       0
  4556 ;;      Locals:         1       0       0       0
  4557 ;;      Temps:          0       0       0       0
  4558 ;;      Totals:         1       0       0       0
  4559 ;;Total ram usage:        1 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    2
  4562 ;; This function calls:
  4563 ;;		_KeyClearOne
  4564 ;; This function is called by:
  4565 ;;		_CheckTouchKey
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function _KeyStopClear
  4571  071B                     _KeyStopClear:	
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4575  071B  1283               	bcf	3,5	;RP0=0, select bank0
  4576  071C  1303               	bcf	3,6	;RP1=0, select bank0
  4577  071D  01B8               	clrf	_KeyFlag	;volatile
  4578  071E  01B9               	clrf	_KeyFlag+1	;volatile
  4579  071F  01F3               	clrf	KeyStopClear@53
  4580  0720                     l3142:	
  4581  0720  1003               	clrc
  4582  0721  0D73               	rlf	KeyStopClear@53,w
  4583  0722  3E2C               	addlw	(low (_KeyResSum| 0))& (0+255)
  4584  0723  0084               	movwf	4
  4585  0724  1383               	bcf	3,7	;select IRP bank0
  4586  0725  0180               	clrf	0
  4587  0726  0A84               	incf	4,f
  4588  0727  0180               	clrf	0
  4589  0728  0873               	movf	KeyStopClear@53,w
  4590  0729  2694  118A         	fcall	_KeyClearOne
  4591  072B  3002               	movlw	2
  4592  072C  0AF3               	incf	KeyStopClear@53,f
  4593  072D  0273               	subwf	KeyStopClear@53,w
  4594  072E  1803               	btfsc	3,0
  4595  072F  0008               	return
  4596  0730  2F20               	goto	l3142
  4597  0731                     __end_of_KeyStopClear:	
  4598  0731                     __ptext23:	
  4599 ;; *************** function _TurnKeyFlags *****************
  4600 ;; Defined at:
  4601 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/100
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4615 ;;      Params:         0       0       0       0
  4616 ;;      Locals:         0       0       0       0
  4617 ;;      Temps:          0       0       0       0
  4618 ;;      Totals:         0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		_KeyClearIn
  4624 ;; This function is called by:
  4625 ;;		_CheckTouchKey
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _TurnKeyFlags
  4631  0731                     _TurnKeyFlags:	
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4635  0731  087A               	movf	_KeyData+1,w	;volatile
  4636  0732  0479               	iorwf	_KeyData,w	;volatile
  4637  0733  1903               	btfsc	3,2
  4638  0734  2F55               	goto	l3290
  4639  0735  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0736  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0737  01BA               	clrf	TurnKeyFlags@F84
  4642  0738  0879               	movf	_KeyData,w	;volatile
  4643  0739  0630               	xorwf	_KeyOldData,w	;volatile
  4644  073A  1D03               	skipz
  4645  073B  2F4E               	goto	l1250
  4646  073C  087A               	movf	_KeyData+1,w	;volatile
  4647  073D  0631               	xorwf	_KeyOldData+1,w	;volatile
  4648  073E  1D03               	skipz
  4649  073F  2F4E               	goto	l1250
  4650  0740  3002               	movlw	2
  4651  0741  0ABB               	incf	TurnKeyFlags@F83,f
  4652  0742  023B               	subwf	TurnKeyFlags@F83,w
  4653  0743  1C03               	skipc
  4654  0744  0008               	return
  4655  0745  01BB               	clrf	TurnKeyFlags@F83
  4656  0746  0879               	movf	_KeyData,w	;volatile
  4657  0747  00B8               	movwf	_KeyFlag	;volatile
  4658  0748  087A               	movf	_KeyData+1,w	;volatile
  4659  0749  00B9               	movwf	_KeyFlag+1	;volatile
  4660  074A  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4661  074B  0008               	return
  4662  074C  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4663  074D  2F7A               	ljmp	l2810
  4664  074E                     l1250:	
  4665  074E  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4666  074F  0879               	movf	_KeyData,w	;volatile
  4667  0750  00B0               	movwf	_KeyOldData	;volatile
  4668  0751  087A               	movf	_KeyData+1,w	;volatile
  4669  0752  00B1               	movwf	_KeyOldData+1	;volatile
  4670  0753  01BB               	clrf	TurnKeyFlags@F83
  4671  0754  0008               	return
  4672  0755                     l3290:	
  4673  0755  1283               	bcf	3,5	;RP0=0, select bank0
  4674  0756  1303               	bcf	3,6	;RP1=0, select bank0
  4675  0757  01BB               	clrf	TurnKeyFlags@F83
  4676  0758  01B0               	clrf	_KeyOldData	;volatile
  4677  0759  01B1               	clrf	_KeyOldData+1	;volatile
  4678  075A  3002               	movlw	2
  4679  075B  0ABA               	incf	TurnKeyFlags@F84,f
  4680  075C  023A               	subwf	TurnKeyFlags@F84,w
  4681  075D  1C03               	skipc
  4682  075E  0008               	return
  4683  075F  01BA               	clrf	TurnKeyFlags@F84
  4684  0760  01B8               	clrf	_KeyFlag	;volatile
  4685  0761  01B9               	clrf	_KeyFlag+1	;volatile
  4686  0762  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4687  0763  0008               	return
  4688  0764                     __end_of_TurnKeyFlags:	
  4689  0764                     __ptext28:	
  4690 ;; *************** function _CheckValidTime *****************
  4691 ;; Defined at:
  4692 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      void 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4706 ;;      Params:         0       0       0       0
  4707 ;;      Locals:         0       0       0       0
  4708 ;;      Temps:          0       0       0       0
  4709 ;;      Totals:         0       0       0       0
  4710 ;;Total ram usage:        0 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    1
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_CheckTouchKey
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           
  4721                           ;psect for function _CheckValidTime
  4722  0764                     _CheckValidTime:	
  4723  0764                     l3300:	
  4724                           ;incstack = 0
  4725                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4726                           
  4727  0764  1283               	bcf	3,5	;RP0=0, select bank0
  4728  0765  1303               	bcf	3,6	;RP1=0, select bank0
  4729  0766  0839               	movf	_KeyFlag+1,w	;volatile
  4730  0767  0438               	iorwf	_KeyFlag,w	;volatile
  4731  0768  1903               	btfsc	3,2
  4732  0769  2F76               	goto	l3306
  4733  076A  1683               	bsf	3,5	;RP0=1, select bank1
  4734  076B  0AA4               	incf	CheckValidTime@F87^(0+128),f
  4735  076C  1903               	skipnz
  4736  076D  0AA5               	incf	(CheckValidTime@F87+1)^(0+128),f
  4737  076E  303A               	movlw	58
  4738  076F  0225               	subwf	(CheckValidTime@F87+1)^(0+128),w
  4739  0770  3098               	movlw	152
  4740  0771  1903               	skipnz
  4741  0772  0224               	subwf	CheckValidTime@F87^(0+128),w
  4742  0773  1C03               	skipc
  4743  0774  0008               	return
  4744  0775  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4745  0776                     l3306:	
  4746  0776  1683               	bsf	3,5	;RP0=1, select bank1
  4747  0777  01A4               	clrf	CheckValidTime@F87^(0+128)
  4748  0778  01A5               	clrf	(CheckValidTime@F87+1)^(0+128)
  4749  0779  0008               	return
  4750  077A                     __end_of_CheckValidTime:	
  4751  077A                     __ptext24:	
  4752 ;; *************** function _KeyClearIn *****************
  4753 ;; Defined at:
  4754 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  51              1    4[COMMON] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 300/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4768 ;;      Params:         0       0       0       0
  4769 ;;      Locals:         1       0       0       0
  4770 ;;      Temps:          0       0       0       0
  4771 ;;      Totals:         1       0       0       0
  4772 ;;Total ram usage:        1 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    3
  4775 ;; This function calls:
  4776 ;;		_KeyClearOne
  4777 ;;		_KeyIsIn
  4778 ;; This function is called by:
  4779 ;;		_TurnKeyFlags
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function _KeyClearIn
  4785  077A                     _KeyClearIn:	
  4786  077A                     l2810:	
  4787                           ;incstack = 0
  4788                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4789                           
  4790  077A  01F4               	clrf	KeyClearIn@51
  4791  077B                     l2816:	
  4792  077B  0874               	movf	KeyClearIn@51,w
  4793  077C  2680  118A         	fcall	_KeyIsIn
  4794  077E  3A00               	xorlw	0
  4795  077F  1D03               	skipz
  4796  0780  2F84               	goto	l2820
  4797  0781  0874               	movf	KeyClearIn@51,w
  4798  0782  2694  118A         	fcall	_KeyClearOne
  4799  0784                     l2820:	
  4800  0784  3002               	movlw	2
  4801  0785  0AF4               	incf	KeyClearIn@51,f
  4802  0786  0274               	subwf	KeyClearIn@51,w
  4803  0787  1803               	btfsc	3,0
  4804  0788  0008               	return
  4805  0789  2F7B               	goto	l2816
  4806  078A                     __end_of_KeyClearIn:	
  4807  078A                     __ptext19:	
  4808 ;; *************** function _Refurbish_Sfr *****************
  4809 ;; Defined at:
  4810 ;;		line 86 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1    wreg      void 
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0
  4819 ;; Tracked objects:
  4820 ;;		On entry : 200/100
  4821 ;;		On exit  : 300/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4824 ;;      Params:         0       0       0       0
  4825 ;;      Locals:         0       0       0       0
  4826 ;;      Temps:          0       0       0       0
  4827 ;;      Totals:         0       0       0       0
  4828 ;;Total ram usage:        0 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    1
  4831 ;; This function calls:
  4832 ;;		Nothing
  4833 ;; This function is called by:
  4834 ;;		_WorkSleep
  4835 ;;		_main
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _Refurbish_Sfr
  4841  078A                     _Refurbish_Sfr:	
  4842                           
  4843                           ;main.c: 89: PIE1 = 2;
  4844                           
  4845                           ;incstack = 0
  4846                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4847  078A  3002               	movlw	2
  4848  078B  1283               	bcf	3,5	;RP0=0, select bank0
  4849  078C  008E               	movwf	14	;volatile
  4850                           
  4851                           ;main.c: 90: PR2 = 250;
  4852  078D  30FA               	movlw	250
  4853  078E  0091               	movwf	17	;volatile
  4854                           
  4855                           ;main.c: 91: INTCON = 0XC0;
  4856  078F  30C0               	movlw	192
  4857  0790  008B               	movwf	11	;volatile
  4858                           
  4859                           ;main.c: 92: if (4 != T2CON)
  4860  0791  3004               	movlw	4
  4861  0792  0613               	xorwf	19,w	;volatile
  4862  0793  1903               	btfsc	3,2
  4863  0794  0008               	return
  4864                           
  4865                           ;main.c: 93: T2CON = 4;
  4866  0795  3004               	movlw	4
  4867  0796  0093               	movwf	19	;volatile
  4868  0797  0008               	return
  4869  0798                     __end_of_Refurbish_Sfr:	
  4870  0798                     PL2:	
  4871  0798  0800               	movf	0,w
  4872  0799  00CF               	movwf	CheckKeyOldValue@80
  4873  079A  0A84               	incf	4,f
  4874  079B  0800               	movf	0,w
  4875  079C  00D0               	movwf	CheckKeyOldValue@80+1
  4876  079D  084D               	movf	CheckKeyOldValue@79,w
  4877  079E  02CF               	subwf	CheckKeyOldValue@80,f
  4878  079F  084E               	movf	CheckKeyOldValue@79+1,w
  4879  07A0  1C03               	skipc
  4880  07A1  03D0               	decf	CheckKeyOldValue@80+1,f
  4881  07A2  02D0               	subwf	CheckKeyOldValue@80+1,f
  4882  07A3  3000               	movlw	0
  4883  07A4  0250               	subwf	CheckKeyOldValue@80+1,w
  4884  07A5  3402               	retlw	2
  4885  07A6                     __end_ofPL2:	
  4886  07A6                     PL4:	
  4887  07A6  00CD               	movwf	??_CheckOnceResult
  4888  07A7  0A84               	incf	4,f
  4889  07A8  0800               	movf	0,w
  4890  07A9  00CE               	movwf	??_CheckOnceResult+1
  4891  07AA  0856               	movf	CheckOnceResult@69,w
  4892  07AB  074D               	addwf	??_CheckOnceResult,w
  4893  07AC  00CF               	movwf	??_CheckOnceResult+2
  4894  07AD  084E               	movf	??_CheckOnceResult+1,w
  4895  07AE  1803               	skipnc
  4896  07AF  0A4E               	incf	??_CheckOnceResult+1,w
  4897  07B0  00D0               	movwf	??_CheckOnceResult+3
  4898  07B1  0858               	movf	CheckOnceResult@71+1,w
  4899  07B2  0250               	subwf	??_CheckOnceResult+3,w
  4900  07B3  1D03               	skipz
  4901  07B4  0008               	return
  4902  07B5  0857               	movf	CheckOnceResult@71,w
  4903  07B6  024F               	subwf	??_CheckOnceResult+2,w
  4904  07B7  0008               	return
  4905  07B8                     __end_ofPL4:	
  4906  07B8                     PL8:	
  4907  07B8  0084               	movwf	4
  4908  07B9  0800               	movf	0,w
  4909  07BA  00CD               	movwf	??_CheckOnceResult
  4910  07BB  0A84               	incf	4,f
  4911  07BC  0800               	movf	0,w
  4912  07BD  00CE               	movwf	??_CheckOnceResult+1
  4913  07BE  0008               	return
  4914  07BF                     __end_ofPL8:	
  4915  07BF                     PL12:	
  4916  07BF  0084               	movwf	4
  4917  07C0  084D               	movf	??_SystemEnterSleep,w
  4918  07C1  0080               	movwf	0
  4919  07C2  0A84               	incf	4,f
  4920  07C3  084E               	movf	??_SystemEnterSleep+1,w
  4921  07C4  0080               	movwf	0
  4922  07C5  1003               	clrc
  4923  07C6  0D55               	rlf	SystemEnterSleep@91,w
  4924  07C7  3E28               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4925  07C8  0084               	movwf	4
  4926  07C9  0008               	return
  4927  07CA                     __end_ofPL12:	
  4928  07CA                     PL14:	
  4929  07CA  0084               	movwf	4
  4930  07CB  0874               	movf	??_CheckKeyOldValue,w
  4931  07CC  0080               	movwf	0
  4932  07CD  0A84               	incf	4,f
  4933  07CE  0875               	movf	??_CheckKeyOldValue+1,w
  4934  07CF  0080               	movwf	0
  4935  07D0  1003               	clrc
  4936  07D1  0D51               	rlf	CheckKeyOldValue@78,w
  4937  07D2  3E28               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4938  07D3  0084               	movwf	4
  4939  07D4  0008               	return
  4940  07D5                     __end_ofPL14:	
  4941  07D5                     PL16:	
  4942  07D5  0084               	movwf	4
  4943  07D6  0800               	movf	0,w
  4944  07D7  00CD               	movwf	??_SystemEnterSleep
  4945  07D8  0A84               	incf	4,f
  4946  07D9  0800               	movf	0,w
  4947  07DA  00CE               	movwf	??_SystemEnterSleep+1
  4948  07DB  0008               	return
  4949  07DC                     __end_ofPL16:	
  4950  07DC                     PL20:	
  4951  07DC  0800               	movf	0,w
  4952  07DD  00F4               	movwf	??_CheckKeyOldValue
  4953  07DE  0A84               	incf	4,f
  4954  07DF  0800               	movf	0,w
  4955  07E0  00F5               	movwf	??_CheckKeyOldValue+1
  4956  07E1  1003               	clrc
  4957  07E2  0D51               	rlf	CheckKeyOldValue@78,w
  4958  07E3  0008               	return
  4959  07E4                     __end_ofPL20:	
  4960  07E4                     PL22:	
  4961  07E4  0180               	clrf	0
  4962  07E5  0A84               	incf	4,f
  4963  07E6  0180               	clrf	0
  4964  07E7  1003               	clrc
  4965  07E8  0D72               	rlf	KeyClearOne@49,w
  4966  07E9  0008               	return
  4967  07EA                     __end_ofPL22:	
  4968  07EA                     PL26:	
  4969  07EA  3041               	movlw	65
  4970  07EB  1683               	bsf	3,5	;RP0=1, select bank1
  4971  07EC  0095               	movwf	21	;volatile
  4972  07ED  1415               	bsf	21,0	;volatile
  4973  07EE  0196               	clrf	22	;volatile
  4974  07EF  0008               	return
  4975  07F0                     __end_ofPL26:	
  4976  07F0                     PL28:	
  4977  07F0  084D               	movf	CheckKeyOldValue@79,w
  4978  07F1  0080               	movwf	0
  4979  07F2  0A84               	incf	4,f
  4980  07F3  084E               	movf	CheckKeyOldValue@79+1,w
  4981  07F4  0080               	movwf	0
  4982  07F5  0008               	return
  4983  07F6                     __end_ofPL28:	
  4984  07F6                     PL30:	
  4985  07F6  01D5               	clrf	SystemEnterSleep@91
  4986  07F7  01D3               	clrf	SystemEnterSleep@92
  4987  07F8  0AD3               	incf	SystemEnterSleep@92,f
  4988  07F9  01D4               	clrf	SystemEnterSleep@92+1
  4989  07FA  0008               	return
  4990  07FB                     __end_ofPL30:	
  4991  07FB                     PL32:	
  4992  07FB  0DD3               	rlf	SystemEnterSleep@92,f
  4993  07FC  0DD4               	rlf	SystemEnterSleep@92+1,f
  4994  07FD  0AD5               	incf	SystemEnterSleep@91,f
  4995  07FE  0255               	subwf	SystemEnterSleep@91,w
  4996  07FF  0008               	return
  4997  0800                     __end_ofPL32:	
  4998                           
  4999                           	psect	text34
  5000  0F27                     __ptext34:	
  5001 ;; *************** function _Isr_Timer *****************
  5002 ;; Defined at:
  5003 ;;		line 169 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;		None
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      void 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2, status,0
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 300/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5017 ;;      Params:         0       0       0       0
  5018 ;;      Locals:         0       0       0       0
  5019 ;;      Temps:          2       0       0       0
  5020 ;;      Totals:         2       0       0       0
  5021 ;;Total ram usage:        2 bytes
  5022 ;; Hardware stack levels used:    1
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		Interrupt level 1
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _Isr_Timer
  5032  0F27                     _Isr_Timer:	
  5033                           
  5034                           ;main.c: 171: if(TMR2IF)
  5035  0F27  1283               	bcf	3,5	;RP0=0, select bank0
  5036  0F28  1303               	bcf	3,6	;RP1=0, select bank0
  5037  0F29  1C8D               	btfss	13,1	;volatile
  5038  0F2A  2F3A               	goto	i1l3638
  5039                           
  5040                           ;main.c: 172: {
  5041                           ;main.c: 173: TMR2IF = 0;
  5042  0F2B  108D               	bcf	13,1	;volatile
  5043                           
  5044                           ;main.c: 174: if(++MainTime >= 32)
  5045  0F2C  3020               	movlw	32
  5046  0F2D  0ACA               	incf	_MainTime,f	;volatile
  5047  0F2E  024A               	subwf	_MainTime,w	;volatile
  5048  0F2F  1C03               	skipc
  5049  0F30  2F3B               	goto	i1l955
  5050                           
  5051                           ;main.c: 175: {
  5052                           ;main.c: 176: MainTime = 0;
  5053  0F31  01CA               	clrf	_MainTime	;volatile
  5054                           
  5055                           ;main.c: 177: B_MainLoop = 1;
  5056  0F32  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5057                           
  5058                           ;main.c: 178: if(++count1s >= 250)
  5059  0F33  30FA               	movlw	250
  5060  0F34  0AC9               	incf	_count1s,f
  5061  0F35  0249               	subwf	_count1s,w
  5062  0F36  1C03               	skipc
  5063  0F37  2F3B               	goto	i1l955
  5064                           
  5065                           ;main.c: 179: {
  5066                           ;main.c: 180: count1s = 0;
  5067  0F38  01C9               	clrf	_count1s
  5068  0F39  2F3B               	goto	i1l955
  5069  0F3A                     i1l3638:	
  5070                           
  5071                           ;main.c: 184: else
  5072                           ;main.c: 185: {
  5073                           ;main.c: 186: PIR1 = 0;
  5074  0F3A  018D               	clrf	13	;volatile
  5075  0F3B                     i1l955:	
  5076  0F3B  0871               	movf	??_Isr_Timer+1,w
  5077  0F3C  008A               	movwf	10
  5078  0F3D  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5079  0F3E  0083               	movwf	3
  5080  0F3F  0EFE               	swapf	126,f
  5081  0F40  0E7E               	swapf	126,w
  5082  0F41  0009               	retfie
  5083  0F42                     __end_of_Isr_Timer:	
  5084  007E                     btemp	set	126	;btemp
  5085  007E                     wtemp0	set	126
  5086                           
  5087                           	psect	intentry
  5088  0004                     __pintentry:	
  5089                           ;incstack = 0
  5090                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5091                           
  5092  0004                     interrupt_function:	
  5093  007E                     saved_w	set	btemp
  5094  0004  00FE               	movwf	btemp
  5095  0005  0E03               	swapf	3,w
  5096  0006  00F0               	movwf	??_Isr_Timer
  5097  0007  080A               	movf	10,w
  5098  0008  00F1               	movwf	??_Isr_Timer+1
  5099  0009  158A  2F27         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         68
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      26
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _wuhuaCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _wuhuaCtr->_ADC_Sample
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13378
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    9375
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             4     4      0    1410
                                             13 BANK0      4     4      0
                         _ADC_Sample
                             ___lmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1478
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     977
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _ADC_Sample
       ___lmul
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      1A       6       32.5%
BANK2               50      0       0       7        0.0%
ABS                  0      0      75       8        0.0%
DATA                 0      0      75       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 12 16:32:00 2025

                        pc 0002                         PL2 0798                         PL4 07A6  
                       PL6 03CD                         PL8 07B8              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03DC                        PL20 07DC                        PL12 07BF  
                      PL30 07F6                        PL22 07E4                        PL14 07CA  
                      PL40 0403                        PL32 07FB                        PL24 03F2  
                      PL16 07D5                        PL34 03F9                        PL26 07EA  
                      PL18 03E9                        PL36 0FFB                        PL28 07F0  
                      PL38 03FE                        l975 02F4                        l969 02B8  
                      l987 0F62                        l979 033A                        l989 0F5F  
                      l997 0376                        _RA1 0431                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0814  
       ??_GetTouchKeyValue 0073               ___ftdiv@cntr 005C               ___ftdiv@sign 0061  
                     l1003 0396                       l1311 00C8                       l1232 0704  
                     l1250 074E                       l1510 0198                       l1191 0568  
                     l1281 04A0                       l4002 0029                       l3300 0764  
                     l1269 0481                       l3230 06C0                       l3142 0720  
                     l4022 0060                       l1456 024F                       l4120 01AB  
                     l4008 0034                       l3306 0776                       l4210 0470  
                     l4060 062A                       l4028 05A5                       l2700 0591  
                     l1468 0273                       l4300 0F74                       l4046 05FC  
                     l4080 065E                       l3440 0FBB                       l4136 01E7  
                     l4090 0672                       l4066 0632                       l2810 077A  
                     l3290 0755                       l4170 022E                       l4154 020A  
                     l4138 01EC                       l4226 0131                       l4084 066A  
                     l4092 0678                       l2820 0784                       l3444 0FC0  
                     l4164 0216                       l4236 014C                       l3470 0FE9  
                     l3454 0FD2                       l4182 0441                       l3542 0F65  
                     l4166 0220                       l4158 0212                       l3702 02A2  
                     l4246 016A                       l4238 014F                       l4088 066E  
                     l2816 077B                       l3456 0FD4                       l3480 0FF9  
                     l3536 0F57                       l3800 025B                       l3720 02DD  
                     l3712 02C2                       l4256 0177                       l4248 016D  
                     l4328 0FA1                       l3466 0FE4                       l3538 0F58  
                     l3802 0263                       l4098 018A                       l2684 068E  
                     l2836 06B4                       l2852 053A                       l4284 0495  
                     l4276 0490                       l4292 049F                       l3476 0FF3  
                     l3724 02E8                       l4286 0499                       l3478 0FF5  
                     l3902 0508                       l3806 0271                       l3726 02F0  
                     l2880 0586                       l2848 0534                       l3808 0268  
                     l3736 033E                       l3824 03A9                       l3832 03BC  
                     l2698 0590                       l3930 0373                       l3764 0407  
                     l3940 0393                       l2878 0576                       l3918 0529  
                     l3686 0296                       l3942 0399                       l3934 0378  
                     l3758 0418                       l3872 04CD                       l3696 02A1  
                     l3688 0298                       l3784 00DE                       l3928 0370  
                     l3970 009D                       l3884 04D4                       l3796 0253  
                     l3980 00B4                       l3956 0072                       l3798 0256  
                     l3958 0074                       l3990 00BF                       l3984 00BA  
                     l3898 0501                       l3978 00B2                       l3988 00BE  
                     l3996 0020                       _ADON 04A8                       _CHS4 04B6  
                     u4025 01B9                       u3315 02E3                       u3325 02EE  
                     u4055 01EF                       _PIE1 000E                       _PIE2 0110  
                     u3365 032F                       u3525 03AF                       u3385 0347  
                     u4347 0292                       _RAIF 006B                       _INTF 0059  
                     _RBIE 005B                       _RBIF 0058                       u3905 0602  
                     u3745 008E                       u3915 060E                       u3595 04FD  
                     u3945 064A                       u3865 0050                       _PIR1 000D  
                     _PIR2 010F                       u3875 05B2                       u3895 05ED  
                     _TMR0 0081                       _WPUB 0008                       _main 0F6D  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       _time 00A6  
                     btemp 007E              ?_KeyStopClear 0070                       start 000B  
             _TurnKeyFlags 0731            __end_of_KeyIsIn 0694            __end_of_KeyHave 06B7  
             ___fttol@exp1 006E              ??_Init_System 0072               ___fttol@lval 006A  
          TurnKeyFlags@F83 003B            TurnKeyFlags@F84 003A                      ?_main 0070  
          __end_of___ftdiv 01DE            __end_of___fttol 0237                      _IOCB0 0048  
                    _T2CON 0013   __end_of_SystemEnterSleep 0530            __end_of___lwmod 03C1  
                    i1l955 0F3B                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 0413                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 0418            __end_of_chrgCtr 0F6D  
      ___lmul@multiplicand 0051        __end_of_KeyClearOne 06A9                 _KeyClearIn 077A  
           fanCtr@fan_temp 005B              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 03CD                _ClearResSum 0590  
               _KeyCounter 003E                 _KeyOldData 0030            __end_of_pwmStop 041D  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 017C                 _KeyUpShake 00B2            __initialization 000D  
             __end_of_main 0FA5                     ??_main 0078              ___fttol@sign1 0069  
      __end_of_Init_System 043C                     _ADCON0 0095                     _ADCON1 0096  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 0285  
                   _GODONE 04A9                     i1l3638 0F3A                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 0247         __size_of_KeyServer 0056  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD0L 0019  
                   _PWMD1L 001A               ??_ADC_Sample 0073                     _TRISB0 0028  
                   _TRISB6 002E                  ??_KeyIsIn 0072                  ??_KeyHave 0074  
            ClearResSum@56 0072         __size_of_Isr_Timer 001B  __size_of_CheckKeyOldValue 0064  
                   ___lmul 00C4                     _b_kclr 03C2                     _b_kerr 03C1  
                   _fanCtr 0061                  ??___ftdiv 0059                  ??___fttol 0066  
                ??___lwmod 0076                  ??_fanInit 0072                  ??_fanStop 0072  
              _KeyClearOne 0694                  ??_chrgCtr 0072                     _result 00A8  
            _Table_KeyFalg 0806              _Table_KeyDown 080E         __end_of_ADC_Sample 0355  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0072  
                ??_pwmStop 0072                ?_KeyClearIn 0070                  ??_workCtr 0077  
          _CheckOnceResult 059F           __end_of_wuhuaCtr 0061    __end_of__initialization 001D  
       __size_of_WorkSleep 0037          CheckOnceResult@70 0053          CheckOnceResult@71 0057  
        CheckOnceResult@72 0054          CheckOnceResult@73 0051          CheckOnceResult@68 0059  
        CheckOnceResult@69 0056                 ___ftdiv@f1 0056                 ___ftdiv@f2 0053  
               ___ftdiv@f3 005D                 ___fttol@f1 0062             __pcstackCOMMON 0070  
              _Init_System 041D                 __end_ofPL2 07A6                 __end_ofPL4 07B8  
               __end_ofPL6 03DC                 __end_ofPL8 07BF          __end_of_KeyServer 0FFB  
               ___lwtoft@c 0050       __end_of_KeyStopClear 0731          __end_of_Isr_Timer 0F42  
       __size_of_keyLedCtr 0048                 __pbssBANK0 0020                 __pbssBANK1 00A0  
             _chrgFullFlag 0043  __size_of_GetTouchKeyValue 0060               _chrgFullTime 0042  
       wuhuaCtr@wuhua_temp 005A              _CheckTouchKey 0473                 __pmaintext 0F6D  
                  ?___lmul 004D                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0473                  ?___lwtoft 0050          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0680                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 004D                    _B_OnOff 03C5  
                  _PWMD01H 001E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D       __end_of_Table_KeyCap 0812  
               __stringtab 0800               ?_ClearResSum 0070                    _KeyData 0079  
                  _KeyFlag 0038                    _KeyIsIn 0680                    _KeyHave 06A9  
           ?_CheckTouchKey 0070            ADC_Sample@adldo 0072            ADC_Sample@admax 0056  
          ADC_Sample@admin 0054            ADC_Sample@adsum 0050           _CheckKeyOldValue 06B7  
          __size_of___lmul 0033                    ___ftdiv 017C            __size_of_fanCtr 0063  
                  ___fttol 01DE                    ___lwmod 039D          __end_of_keyLedCtr 039D  
                  _b_kover 03C4                    _fanInit 0407                    _fanDuty 0047  
                  _fanStop 0413                 ??___ftpack 004D                    _chrgCtr 0F42  
                  __ptext1 00F7                    __ptext2 0020                    __ptext3 0418  
                  __ptext4 03C1                    __ptext5 0355                    __ptext6 039D  
                  __ptext7 0061                    __ptext8 0413                    __ptext9 0407  
               _lowBatLock 0041                 _lowBatTime 00AC                  ?_wuhuaCtr 0070  
               ??___lwtoft 0077                    _count1s 0049                 _lowFanTime 00AA  
                  _pwmInit 03C1                    _pwmStop 0418    __size_of_CheckValidTime 0016  
                  clrloop0 0F20                    _workCtr 00F7       end_of_initialization 001D  
            _Refurbish_Sfr 078A               _KeyOldValue0 0028               _KeyOldValue1 0024  
             _KeyOldValue2 0020      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0055  
       SystemEnterSleep@92 0053         SystemEnterSleep@93 0051         SystemEnterSleep@94 004F  
             ?_KeyClearOne 0070               _KeyReference 00A0                 ??_wuhuaCtr 0077  
        CheckValidTime@F87 00A4           ?_CheckOnceResult 0070                  KeyIsIn@45 0073  
                KeyIsIn@46 0072                  KeyHave@58 0074                  KeyHave@59 0072  
             ??_KeyClearIn 0074                ___ftdiv@exp 0060            ??_CheckTouchKey 0078  
             _KeyStopClear 071B           _GetTouchKeyValue 0530             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 00F7             __end_of_fanCtr 00C4  
       __end_of_KeyClearIn 078A                 _wuhuaValue 00AE                  _KeyMaxSub 003D  
                _KeyResSum 002C                __end_ofPL10 03E9                __end_ofPL20 07E4  
              __end_ofPL12 07CA                __end_ofPL30 07FB                __end_ofPL22 07EA  
              __end_ofPL14 07D5                __end_ofPL40 0407                __end_ofPL32 0800  
              __end_ofPL24 03F9                __end_ofPL16 07DC                __end_ofPL34 03FE  
              __end_ofPL26 07F0                __end_ofPL18 03F2                __end_ofPL36 1000  
              __end_ofPL28 07F6                __end_ofPL38 0403        start_initialization 000D  
                _KeyServer 0FA5                  _Isr_Timer 0F27          workCtr@power_temp 00B4  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0058               _Table_KeyCap 0810  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0045  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004D              __pcstackBANK1 00B4                  _WorkSleep 043C  
           _CheckValidTime 0764   __end_of_CheckKeyOldValue 071B                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 003F                   ?_KeyIsIn 0070                   ?_KeyHave 0072  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075  
                __pnvBANK1 00B8                   ?___ftdiv 0053                   ?___fttol 0062  
                 ?___lwmod 0072                   ?_fanInit 0070                   ?_fanStop 0070  
                 ?_chrgCtr 0070              _shanshuoTime2 0034                  __pstrings 0800  
     __size_of_KeyClearOne 0015                  _keyLedCtr 0355                  _firstLock 00B8  
   __end_of_CheckValidTime 077A                  _firstTime 00B9          __size_of_wuhuaCtr 0041  
               ?_WorkSleep 0070             ADC_Sample@adch 004E                   ?_pwmInit 0070  
                 ?_pwmStop 0070                   ?_workCtr 0070                ADC_Sample@i 004F  
              ADC_Sample@j 004D                   _KEYDATAH 0117                   _KEYDATAL 0116  
        interrupt_function 0004                  clear_ram0 0F1F             KeyStopClear@53 0073  
      CheckKeyOldValue@F77 003C                __stringbase 0805       __size_of_Init_System 001F  
    __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0810                 ?_keyLedCtr 0070  
 __end_of_GetTouchKeyValue 0590            ?_CheckValidTime 0070                ??_KeyServer 0072  
        ___lmul@multiplier 004D                  _wuhuaFlag 0048                ??_Isr_Timer 0070  
                 _MainTime 004A                 _ADC_Sample 0285           __size_of_KeyIsIn 0014  
         __size_of_KeyHave 000E           _Table_KeyChannel 0812           __size_of___ftdiv 0062  
         __size_of___fttol 0059           __size_of___lwmod 0024                   ___ftpack 0247  
         __size_of_fanInit 000C         __end_of__stringtab 0806           __size_of_fanStop 0005  
         __size_of_chrgCtr 002B                   ___lwtoft 0237                   _b_kover1 03C3  
                 _b_ksleep 03C0       __end_of_TurnKeyFlags 0764                   _fanValue 00B0  
                 _adresult 004B                   _chrgFlag 0044                ??_WorkSleep 0078  
                 __ptext10 00C4                   __ptext11 0285                   __ptext20 0FA5  
                 __ptext12 0237                   __ptext21 041D                   __ptext13 01DE  
                 __ptext30 06A9                   __ptext22 0473                   __ptext14 017C  
                 __ptext31 0694                   __ptext23 0731                   __ptext15 0247  
                 __ptext32 06B7                   __ptext24 077A                   __ptext16 0F42  
                 __ptext33 0680                   __ptext25 071B                   __ptext17 043C  
                 __ptext34 0F27                   __ptext26 0530                   __ptext18 04A0  
                 __ptext27 0590                   __ptext19 078A                   __ptext28 0764  
                 __ptext29 059F           __size_of_pwmInit 000C           __size_of_pwmStop 0005  
             _shanshuoTime 0036                   _count10s 0046           __size_of_workCtr 0085  
 __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075  
       GetTouchKeyValue@64 0073              __size_of_main 0038           _SystemEnterSleep 04A0  
    __end_of_CheckTouchKey 04A0         CheckKeyOldValue@80 004F         CheckKeyOldValue@78 0051  
       CheckKeyOldValue@79 004D                   _test_adc 0040                   _power_ad 0032  
                 _workStep 007B                   _wuhuaCtr 0020                ??_keyLedCtr 0077  
        ?_CheckKeyOldValue 0070                   intlevel1 0000              ??_ClearResSum 0072  
       ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074                ?_ADC_Sample 0072  
                stringcode 0800                 _B_MainLoop 03C6          fanCtr@maxFanValue 005A  
               _OPTION_REG 0001            ___lwmod@divisor 0072            ___lwmod@counter 0076  
                 stringdir 0800                   stringtab 0800              KeyClearOne@49 0072  
             KeyClearIn@51 0074      __end_of_Refurbish_Sfr 0798        __end_of_ClearResSum 059F  
        ??_CheckOnceResult 004D  
