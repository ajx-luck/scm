

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 30 14:24:56 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text20,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2
    21                           	psect	text34,local,class=CODE,merge=1,delta=2
    22                           	psect	intentry,global,class=CODE,delta=2
    23                           	psect	pa_nodes0,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	strings
    62  0800                     __pstrings:	
    63  0800                     stringtab:	
    64  0800                     __stringtab:	
    65  0800                     stringcode:	
    66                           ;	String table - string pointers are 1 byte each
    67                           
    68  0800                     stringdir:	
    69  0800  3008               	movlw	high stringdir
    70  0801  008A               	movwf	10
    71  0802  0804               	movf	4,w
    72  0803  0A84               	incf	4,f
    73  0804  0782               	addwf	2,f
    74  0805                     __stringbase:	
    75  0805  3400               	retlw	0
    76  0806                     __end_of__stringtab:	
    77  0806                     _Table_KeyFalg:	
    78  0806  3401               	retlw	1
    79  0807  3402               	retlw	2
    80  0808  3404               	retlw	4
    81  0809  3408               	retlw	8
    82  080A  3410               	retlw	16
    83  080B  3420               	retlw	32
    84  080C  3440               	retlw	64
    85  080D  3480               	retlw	128
    86  080E                     __end_of_Table_KeyFalg:	
    87  080E                     _Table_KeyDown:	
    88  080E  340A               	retlw	10
    89  080F  340A               	retlw	10
    90  0810                     __end_of_Table_KeyDown:	
    91  0810                     _Table_KeyCap:	
    92  0810  3402               	retlw	2
    93  0811  3402               	retlw	2
    94  0812                     __end_of_Table_KeyCap:	
    95  0812                     _Table_KeyChannel:	
    96  0812  3442               	retlw	66
    97  0813  3443               	retlw	67
    98  0814                     __end_of_Table_KeyChannel:	
    99                           
   100                           	psect	nvBANK0
   101  006E                     __pnvBANK0:	
   102  006E                     _firstTime:	
   103  006E                     	ds	1
   104                           
   105                           	psect	nvBANK1
   106  00B8                     __pnvBANK1:	
   107  00B8                     _firstLock:	
   108  00B8                     	ds	1
   109  001E                     _PWMD01H	set	30
   110  001D                     _PWMCON2	set	29
   111  001A                     _PWMD1L	set	26
   112  0019                     _PWMD0L	set	25
   113  0018                     _PWMTH	set	24
   114  0017                     _PWMTL	set	23
   115  0016                     _PWMCON1	set	22
   116  0015                     _PWMCON0	set	21
   117  0014                     _OSCCON	set	20
   118  0013                     _T2CON	set	19
   119  0011                     _PR2	set	17
   120  000E                     _PIE1	set	14
   121  000D                     _PIR1	set	13
   122  000B                     _INTCON	set	11
   123  0008                     _WPUB	set	8
   124  0006                     _PORTB	set	6
   125  0005                     _TRISB	set	5
   126  0001                     _OPTION_REG	set	1
   127  0069                     _TMR2IF	set	105
   128  006B                     _RAIF	set	107
   129  0058                     _RBIF	set	88
   130  0059                     _INTF	set	89
   131  005B                     _RBIE	set	91
   132  0048                     _IOCB0	set	72
   133  0036                     _RB6	set	54
   134  0028                     _TRISB0	set	40
   135  002E                     _TRISB6	set	46
   136  0099                     _ADRESH	set	153
   137  0098                     _ADRESL	set	152
   138  0096                     _ADCON1	set	150
   139  0095                     _ADCON0	set	149
   140  0086                     _PORTA	set	134
   141  0085                     _TRISA	set	133
   142  0081                     _TMR0	set	129
   143  04B2                     _LDO_EN	set	1202
   144  04B6                     _CHS4	set	1206
   145  04A8                     _ADON	set	1192
   146  04A9                     _GODONE	set	1193
   147  0431                     _RA1	set	1073
   148  0117                     _KEYDATAH	set	279
   149  0116                     _KEYDATAL	set	278
   150  0113                     _KEYCON2	set	275
   151  0112                     _KEYCON1	set	274
   152  0111                     _KEYCON0	set	273
   153  0110                     _PIE2	set	272
   154  010F                     _PIR2	set	271
   155  0106                     _PORTC	set	262
   156  0105                     _TRISC	set	261
   157                           
   158                           	psect	cinit
   159  000D                     start_initialization:	
   160                           ; #config settings
   161                           
   162  000D                     __initialization:	
   163  000D  3020               	movlw	low __pbssBANK0
   164                           
   165                           ; Clear objects allocated to BITCOMMON
   166  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   167                           
   168                           ; Clear objects allocated to COMMON
   169  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   170  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   171  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   172                           
   173                           ; Clear objects allocated to BANK0
   174  0012  1383               	bcf	3,7	;select IRP bank0
   175  0013  0084               	movwf	4
   176  0014  304C               	movlw	low (__pbssBANK0+44)
   177  0015  118A  27F4  118A   	fcall	clear_ram0
   178                           
   179                           ; Clear objects allocated to BANK1
   180  0018  30A0               	movlw	low __pbssBANK1
   181  0019  0084               	movwf	4
   182  001A  30B4               	movlw	low (__pbssBANK1+20)
   183  001B  118A  27F4         	fcall	clear_ram0
   184  001D                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  001D                     __end_of__initialization:	
   188  001D  0183               	clrf	3
   189  001E  158A  2F78         	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bitbssCOMMON
   192  03C0                     __pbitbssCOMMON:	
   193  03C0                     _b_ksleep:	
   194  03C0                     	ds	1
   195  03C1                     _b_kerr:	
   196  03C1                     	ds	1
   197  03C2                     _b_kclr:	
   198  03C2                     	ds	1
   199  03C3                     _b_kover1:	
   200  03C3                     	ds	1
   201  03C4                     _b_kover:	
   202  03C4                     	ds	1
   203  03C5                     _B_OnOff:	
   204  03C5                     	ds	1
   205  03C6                     _B_MainLoop:	
   206  03C6                     	ds	1
   207                           
   208                           	psect	bssCOMMON
   209  0079                     __pbssCOMMON:	
   210  0079                     _KeyData:	
   211  0079                     	ds	2
   212  007B                     _workStep:	
   213  007B                     	ds	1
   214                           
   215                           	psect	bssBANK0
   216  0020                     __pbssBANK0:	
   217  0020                     _KeyOldValue2:	
   218  0020                     	ds	4
   219  0024                     _KeyOldValue1:	
   220  0024                     	ds	4
   221  0028                     _KeyResSum:	
   222  0028                     	ds	4
   223  002C                     _KeyOldData:	
   224  002C                     	ds	2
   225  002E                     _power_ad:	
   226  002E                     	ds	2
   227  0030                     _shanshuoTime2:	
   228  0030                     	ds	2
   229  0032                     _shanshuoTime:	
   230  0032                     	ds	2
   231  0034                     _KeyUpShake:	
   232  0034                     	ds	2
   233  0036                     _KeyFlag:	
   234  0036                     	ds	2
   235  0038                     TurnKeyFlags@F84:	
   236  0038                     	ds	1
   237  0039                     TurnKeyFlags@F83:	
   238  0039                     	ds	1
   239  003A                     CheckKeyOldValue@F77:	
   240  003A                     	ds	1
   241  003B                     _KeyMaxSub:	
   242  003B                     	ds	1
   243  003C                     _KeyCounter:	
   244  003C                     	ds	1
   245  003D                     KeyServer@KeyOldFlag:	
   246  003D                     	ds	1
   247  003E                     _test_adc:	
   248  003E                     	ds	1
   249  003F                     _lowFanTime:	
   250  003F                     	ds	1
   251  0040                     _lowBatLock:	
   252  0040                     	ds	1
   253  0041                     _chrgFullTime:	
   254  0041                     	ds	1
   255  0042                     _chrgFullFlag:	
   256  0042                     	ds	1
   257  0043                     _chrgFlag:	
   258  0043                     	ds	1
   259  0044                     _fanOverTime:	
   260  0044                     	ds	1
   261  0045                     _count10s:	
   262  0045                     	ds	1
   263  0046                     _fanDuty:	
   264  0046                     	ds	1
   265  0047                     _wuhuaFlag:	
   266  0047                     	ds	1
   267  0048                     _count1s:	
   268  0048                     	ds	1
   269  0049                     _MainTime:	
   270  0049                     	ds	1
   271  004A                     _adresult:	
   272  004A                     	ds	2
   273                           
   274                           	psect	bssBANK1
   275  00A0                     __pbssBANK1:	
   276  00A0                     _KeyReference:	
   277  00A0                     	ds	4
   278  00A4                     _KeyOldValue0:	
   279  00A4                     	ds	4
   280  00A8                     CheckValidTime@F87:	
   281  00A8                     	ds	2
   282  00AA                     _time:	
   283  00AA                     	ds	2
   284  00AC                     _result:	
   285  00AC                     	ds	2
   286  00AE                     _lowBatTime:	
   287  00AE                     	ds	2
   288  00B0                     _wuhuaValue:	
   289  00B0                     	ds	2
   290  00B2                     _fanValue:	
   291  00B2                     	ds	2
   292                           
   293                           	psect	clrtext
   294  07F4                     clear_ram0:	
   295                           ;	Called with FSR containing the base address, and
   296                           ;	W with the last address+1
   297                           
   298  07F4  0064               	clrwdt	;clear the watchdog before getting into this loop
   299  07F5                     clrloop0:	
   300  07F5  0180               	clrf	0	;clear RAM location pointed to by FSR
   301  07F6  0A84               	incf	4,f	;increment pointer
   302  07F7  0604               	xorwf	4,w	;XOR with final address
   303  07F8  1903               	btfsc	3,2	;have we reached the end yet?
   304  07F9  3400               	retlw	0	;all done for this memory range, return
   305  07FA  0604               	xorwf	4,w	;XOR again to restore value
   306  07FB  2FF5               	goto	clrloop0	;do the next byte
   307                           
   308                           	psect	cstackBANK1
   309  00B4                     __pcstackBANK1:	
   310  00B4                     workCtr@power_temp:	
   311                           
   312                           ; 4 bytes @ 0x0
   313  00B4                     	ds	4
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:	
   317  0070                     ?_SystemEnterSleep:	
   318  0070                     ?_CheckTouchKey:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_Init_System:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_Refurbish_Sfr:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_KeyServer:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Isr_Timer:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ??_Isr_Timer:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_WorkSleep:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_chrgCtr:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_keyLedCtr:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_pwmInit:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_pwmStop:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_fanInit:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_fanStop:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_fanCtr:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_wuhuaCtr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_workCtr:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_KeyIsIn:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_KeyClearOne:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_KeyClearIn:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_KeyStopClear:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_ClearResSum:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_GetTouchKeyValue:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_CheckOnceResult:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_CheckKeyOldValue:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_TurnKeyFlags:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_CheckValidTime:	
   397                           ; 1 bytes @ 0x0
   398                           
   399                           
   400                           ; 1 bytes @ 0x0
   401  0070                     	ds	2
   402  0072                     ??_Init_System:	
   403  0072                     ??_Refurbish_Sfr:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     ??_KeyServer:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     ?_ADC_Sample:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0072                     ??_chrgCtr:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     ??_pwmInit:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     ??_pwmStop:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ??_fanInit:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0072                     ??_fanStop:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0072                     ??_KeyIsIn:	
   428                           ; 1 bytes @ 0x2
   429                           
   430  0072                     ??_KeyClearOne:	
   431                           ; 1 bytes @ 0x2
   432                           
   433  0072                     ??_ClearResSum:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0072                     ?_KeyHave:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0072                     ??_CheckValidTime:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0072                     ??___lmul:	
   443                           ; 1 bytes @ 0x2
   444                           
   445  0072                     ?___lwmod:	
   446                           ; 1 bytes @ 0x2
   447                           
   448  0072                     ?___ftpack:	
   449                           ; 2 bytes @ 0x2
   450                           
   451  0072                     ADC_Sample@adldo:	
   452                           ; 3 bytes @ 0x2
   453                           
   454  0072                     KeyIsIn@46:	
   455                           ; 1 bytes @ 0x2
   456                           
   457  0072                     KeyClearOne@49:	
   458                           ; 1 bytes @ 0x2
   459                           
   460  0072                     ClearResSum@56:	
   461                           ; 1 bytes @ 0x2
   462                           
   463  0072                     KeyHave@59:	
   464                           ; 1 bytes @ 0x2
   465                           
   466  0072                     ___lwmod@divisor:	
   467                           ; 2 bytes @ 0x2
   468                           
   469  0072                     ___ftpack@arg:	
   470                           ; 2 bytes @ 0x2
   471                           
   472  0072                     ___lmul@product:	
   473                           ; 3 bytes @ 0x2
   474                           
   475                           
   476                           ; 4 bytes @ 0x2
   477  0072                     	ds	1
   478  0073                     ??_ADC_Sample:	
   479  0073                     ??_KeyStopClear:	
   480                           ; 1 bytes @ 0x3
   481                           
   482  0073                     ??_GetTouchKeyValue:	
   483                           ; 1 bytes @ 0x3
   484                           
   485  0073                     KeyIsIn@45:	
   486                           ; 1 bytes @ 0x3
   487                           
   488  0073                     KeyStopClear@53:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     GetTouchKeyValue@64:	
   492                           ; 1 bytes @ 0x3
   493                           
   494                           
   495                           ; 2 bytes @ 0x3
   496  0073                     	ds	1
   497  0074                     ??_KeyClearIn:	
   498  0074                     ??_KeyHave:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0074                     ??_CheckKeyOldValue:	
   502                           ; 1 bytes @ 0x4
   503                           
   504  0074                     KeyClearIn@51:	
   505                           ; 1 bytes @ 0x4
   506                           
   507  0074                     KeyHave@58:	
   508                           ; 1 bytes @ 0x4
   509                           
   510  0074                     ___lwmod@dividend:	
   511                           ; 1 bytes @ 0x4
   512                           
   513                           
   514                           ; 2 bytes @ 0x4
   515  0074                     	ds	1
   516  0075                     ??_TurnKeyFlags:	
   517  0075                     ___ftpack@exp:	
   518                           ; 1 bytes @ 0x5
   519                           
   520  0075                     GetTouchKeyValue@63:	
   521                           ; 1 bytes @ 0x5
   522                           
   523                           
   524                           ; 2 bytes @ 0x5
   525  0075                     	ds	1
   526  0076                     ??___lwmod:	
   527  0076                     ___ftpack@sign:	
   528                           ; 1 bytes @ 0x6
   529                           
   530  0076                     ___lwmod@counter:	
   531                           ; 1 bytes @ 0x6
   532                           
   533                           
   534                           ; 1 bytes @ 0x6
   535  0076                     	ds	1
   536  0077                     ??_keyLedCtr:	
   537  0077                     ??_fanCtr:	
   538                           ; 1 bytes @ 0x7
   539                           
   540  0077                     ??_wuhuaCtr:	
   541                           ; 1 bytes @ 0x7
   542                           
   543  0077                     ??_workCtr:	
   544                           ; 1 bytes @ 0x7
   545                           
   546  0077                     ??___lwtoft:	
   547                           ; 1 bytes @ 0x7
   548                           
   549  0077                     GetTouchKeyValue@62:	
   550                           ; 1 bytes @ 0x7
   551                           
   552                           
   553                           ; 1 bytes @ 0x7
   554  0077                     	ds	1
   555  0078                     ??_CheckTouchKey:	
   556  0078                     ??_WorkSleep:	
   557                           ; 1 bytes @ 0x8
   558                           
   559  0078                     ??_main:	
   560                           ; 1 bytes @ 0x8
   561                           
   562                           
   563                           	psect	cstackBANK0
   564  004C                     __pcstackBANK0:	
   565                           ; 1 bytes @ 0x8
   566                           
   567  004C                     ??_SystemEnterSleep:	
   568  004C                     ??___ftpack:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  004C                     ??_CheckOnceResult:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  004C                     ?___lmul:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  004C                     ADC_Sample@j:	
   578                           ; 4 bytes @ 0x0
   579                           
   580  004C                     CheckKeyOldValue@79:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  004C                     ___lmul@multiplier:	
   584                           ; 2 bytes @ 0x0
   585                           
   586                           
   587                           ; 4 bytes @ 0x0
   588  004C                     	ds	1
   589  004D                     ADC_Sample@adch:	
   590                           
   591                           ; 1 bytes @ 0x1
   592  004D                     	ds	1
   593  004E                     ADC_Sample@i:	
   594  004E                     CheckKeyOldValue@80:	
   595                           ; 1 bytes @ 0x2
   596                           
   597  004E                     SystemEnterSleep@94:	
   598                           ; 2 bytes @ 0x2
   599                           
   600                           
   601                           ; 2 bytes @ 0x2
   602  004E                     	ds	1
   603  004F                     ?___lwtoft:	
   604  004F                     ___lwtoft@c:	
   605                           ; 3 bytes @ 0x3
   606                           
   607  004F                     ADC_Sample@adsum:	
   608                           ; 2 bytes @ 0x3
   609                           
   610                           
   611                           ; 4 bytes @ 0x3
   612  004F                     	ds	1
   613  0050                     CheckKeyOldValue@78:	
   614  0050                     CheckOnceResult@73:	
   615                           ; 1 bytes @ 0x4
   616                           
   617  0050                     SystemEnterSleep@93:	
   618                           ; 2 bytes @ 0x4
   619                           
   620  0050                     ___lmul@multiplicand:	
   621                           ; 2 bytes @ 0x4
   622                           
   623                           
   624                           ; 4 bytes @ 0x4
   625  0050                     	ds	2
   626  0052                     ?___ftdiv:	
   627  0052                     CheckOnceResult@70:	
   628                           ; 3 bytes @ 0x6
   629                           
   630  0052                     SystemEnterSleep@92:	
   631                           ; 1 bytes @ 0x6
   632                           
   633  0052                     ___ftdiv@f2:	
   634                           ; 2 bytes @ 0x6
   635                           
   636                           
   637                           ; 3 bytes @ 0x6
   638  0052                     	ds	1
   639  0053                     ADC_Sample@admin:	
   640  0053                     CheckOnceResult@72:	
   641                           ; 2 bytes @ 0x7
   642                           
   643                           
   644                           ; 2 bytes @ 0x7
   645  0053                     	ds	1
   646  0054                     SystemEnterSleep@91:	
   647                           
   648                           ; 1 bytes @ 0x8
   649  0054                     	ds	1
   650  0055                     CheckOnceResult@69:	
   651  0055                     ADC_Sample@admax:	
   652                           ; 1 bytes @ 0x9
   653                           
   654  0055                     ___ftdiv@f1:	
   655                           ; 2 bytes @ 0x9
   656                           
   657                           
   658                           ; 3 bytes @ 0x9
   659  0055                     	ds	1
   660  0056                     CheckOnceResult@71:	
   661                           
   662                           ; 2 bytes @ 0xA
   663  0056                     	ds	1
   664  0057                     ADC_Sample@ad_temp:	
   665                           
   666                           ; 2 bytes @ 0xB
   667  0057                     	ds	1
   668  0058                     ??___ftdiv:	
   669  0058                     CheckOnceResult@68:	
   670                           ; 1 bytes @ 0xC
   671                           
   672                           
   673                           ; 1 bytes @ 0xC
   674  0058                     	ds	1
   675  0059                     fanCtr@maxFanValue:	
   676  0059                     wuhuaCtr@wuhua_temp:	
   677                           ; 1 bytes @ 0xD
   678                           
   679                           
   680                           ; 4 bytes @ 0xD
   681  0059                     	ds	1
   682  005A                     fanCtr@fan_temp:	
   683                           
   684                           ; 4 bytes @ 0xE
   685  005A                     	ds	1
   686  005B                     ___ftdiv@cntr:	
   687                           
   688                           ; 1 bytes @ 0xF
   689  005B                     	ds	1
   690  005C                     ___ftdiv@f3:	
   691                           
   692                           ; 3 bytes @ 0x10
   693  005C                     	ds	3
   694  005F                     ___ftdiv@exp:	
   695                           
   696                           ; 1 bytes @ 0x13
   697  005F                     	ds	1
   698  0060                     ___ftdiv@sign:	
   699                           
   700                           ; 1 bytes @ 0x14
   701  0060                     	ds	1
   702  0061                     ?___fttol:	
   703  0061                     ___fttol@f1:	
   704                           ; 4 bytes @ 0x15
   705                           
   706                           
   707                           ; 3 bytes @ 0x15
   708  0061                     	ds	4
   709  0065                     ??___fttol:	
   710                           
   711                           ; 1 bytes @ 0x19
   712  0065                     	ds	3
   713  0068                     ___fttol@sign1:	
   714                           
   715                           ; 1 bytes @ 0x1C
   716  0068                     	ds	1
   717  0069                     ___fttol@lval:	
   718                           
   719                           ; 4 bytes @ 0x1D
   720  0069                     	ds	4
   721  006D                     ___fttol@exp1:	
   722                           
   723                           ; 1 bytes @ 0x21
   724  006D                     	ds	1
   725                           
   726                           	psect	maintext
   727  0F78                     __pmaintext:	
   728 ;;
   729 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   730 ;;
   731 ;; *************** function _main *****************
   732 ;; Defined at:
   733 ;;		line 607 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : B00/0
   744 ;;		On exit  : 300/100
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   747 ;;      Params:         0       0       0       0
   748 ;;      Locals:         0       0       0       0
   749 ;;      Temps:          0       0       0       0
   750 ;;      Totals:         0       0       0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels required when called:    6
   753 ;; This function calls:
   754 ;;		_CheckTouchKey
   755 ;;		_Init_System
   756 ;;		_KeyServer
   757 ;;		_Refurbish_Sfr
   758 ;;		_WorkSleep
   759 ;;		_chrgCtr
   760 ;;		_workCtr
   761 ;; This function is called by:
   762 ;;		Startup code after reset
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function _main
   768  0F78                     _main:	
   769                           
   770                           ;main.c: 609: Init_System();
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   774  0F78  118A  2411  158A   	fcall	_Init_System
   775  0F7B  30C8               	movlw	200
   776                           
   777                           ;main.c: 610: firstLock = 1;
   778  0F7C  01B8               	clrf	_firstLock^(0+128)
   779  0F7D  0AB8               	incf	_firstLock^(0+128),f
   780                           
   781                           ;main.c: 611: firstTime = 200;
   782  0F7E  1283               	bcf	3,5	;RP0=0, select bank0
   783  0F7F  00EE               	movwf	_firstTime
   784  0F80                     l4287:	
   785                           
   786                           ;main.c: 613: {
   787                           ;main.c: 614: if(B_MainLoop)
   788  0F80  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   789  0F81  2F80               	goto	l4287
   790                           
   791                           ;main.c: 615: {
   792                           ;main.c: 616: B_MainLoop = 0;
   793  0F82  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   794  0F83  0064               	clrwdt	;# 
   795                           
   796                           ;main.c: 619: CheckTouchKey();
   797  0F84  118A  2467  158A   	fcall	_CheckTouchKey
   798                           
   799                           ;main.c: 620: chrgCtr();
   800  0F87  158A  274E  158A   	fcall	_chrgCtr
   801                           
   802                           ;main.c: 621: Refurbish_Sfr();
   803  0F8A  118A  277E  158A   	fcall	_Refurbish_Sfr
   804                           
   805                           ;main.c: 622: KeyServer();
   806  0F8D  158A  27B0  158A   	fcall	_KeyServer
   807                           
   808                           ;main.c: 623: workCtr();
   809  0F90  118A  20F7  158A   	fcall	_workCtr
   810                           
   811                           ;main.c: 624: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   812  0F93  1283               	bcf	3,5	;RP0=0, select bank0
   813  0F94  086E               	movf	_firstTime,w
   814  0F95  1D03               	btfss	3,2
   815  0F96  2FAC               	goto	l4315
   816  0F97  0843               	movf	_chrgFlag,w
   817  0F98  1D03               	btfss	3,2
   818  0F99  2FAC               	goto	l4315
   819  0F9A  087B               	movf	_workStep,w
   820  0F9B  1D03               	btfss	3,2
   821  0F9C  2FAC               	goto	l4315
   822  0F9D  0847               	movf	_wuhuaFlag,w
   823  0F9E  1D03               	btfss	3,2
   824  0F9F  2FAC               	goto	l4315
   825  0FA0  0832               	movf	_shanshuoTime,w
   826  0FA1  0433               	iorwf	_shanshuoTime+1,w
   827  0FA2  1D03               	btfss	3,2
   828  0FA3  2FAC               	goto	l4315
   829  0FA4  0830               	movf	_shanshuoTime2,w
   830  0FA5  0431               	iorwf	_shanshuoTime2+1,w
   831  0FA6  1D03               	btfss	3,2
   832  0FA7  2FAC               	goto	l4315
   833                           
   834                           ;main.c: 625: {
   835                           ;main.c: 626: WorkSleep();
   836  0FA8  118A  2430  158A   	fcall	_WorkSleep
   837                           
   838                           ;main.c: 627: }
   839  0FAB  2F80               	goto	l4287
   840  0FAC                     l4315:	
   841                           
   842                           ;main.c: 628: else
   843                           ;main.c: 629: {
   844                           ;main.c: 630: time = 0;
   845  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
   846  0FAD  01AA               	clrf	_time^(0+128)
   847  0FAE  01AB               	clrf	(_time+1)^(0+128)
   848  0FAF  2F80               	goto	l4287
   849  0FB0                     __end_of_main:	
   850                           
   851                           	psect	text2
   852  0020                     __ptext2:	
   853 ;; *************** function _wuhuaCtr *****************
   854 ;; Defined at:
   855 ;;		line 506 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  wuhua_temp      4   13[BANK0 ] volatile unsigned long 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, pclath, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 200/100
   866 ;;		On exit  : 200/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   869 ;;      Params:         0       0       0       0
   870 ;;      Locals:         0       4       0       0
   871 ;;      Temps:          0       0       0       0
   872 ;;      Totals:         0       4       0       0
   873 ;;Total ram usage:        4 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    2
   876 ;; This function calls:
   877 ;;		_ADC_Sample
   878 ;;		___lmul
   879 ;;		_pwmInit
   880 ;;		_pwmStop
   881 ;; This function is called by:
   882 ;;		_workCtr
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           
   887                           ;psect for function _wuhuaCtr
   888  0020                     _wuhuaCtr:	
   889  0020                     l3983:	
   890                           ;incstack = 0
   891                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
   892                           
   893                           
   894                           ;main.c: 508: if(count1s == 0)
   895  0020  1283               	bcf	3,5	;RP0=0, select bank0
   896  0021  0848               	movf	_count1s,w
   897  0022  1D03               	btfss	3,2
   898  0023  2829               	goto	l3989
   899                           
   900                           ;main.c: 509: {
   901                           ;main.c: 510: if(++count10s >= 10)
   902  0024  300A               	movlw	10
   903  0025  0AC5               	incf	_count10s,f
   904  0026  0245               	subwf	_count10s,w
   905  0027  1803               	btfsc	3,0
   906                           
   907                           ;main.c: 511: {
   908                           ;main.c: 512: count10s = 0;
   909  0028  01C5               	clrf	_count10s
   910  0029                     l3989:	
   911                           
   912                           ;main.c: 513: }
   913                           ;main.c: 514: }
   914                           ;main.c: 515: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
   915  0029  0347               	decf	_wuhuaFlag,w
   916  002A  1903               	btfsc	3,2
   917  002B  2834               	goto	l3995
   918  002C  3002               	movlw	2
   919  002D  0647               	xorwf	_wuhuaFlag,w
   920  002E  1D03               	btfss	3,2
   921  002F  2860               	goto	l4009
   922  0030  3005               	movlw	5
   923  0031  0245               	subwf	_count10s,w
   924  0032  1803               	skipnc
   925  0033  2860               	goto	l4009
   926  0034                     l3995:	
   927                           
   928                           ;main.c: 516: {
   929                           ;main.c: 517: pwmInit();
   930  0034  23B5  118A         	fcall	_pwmInit
   931  0036  3003               	movlw	3
   932                           
   933                           ;main.c: 531: test_adc = ADC_Sample(3, 0);
   934  0037  01F2               	clrf	ADC_Sample@adldo
   935  0038  227A  118A         	fcall	_ADC_Sample
   936  003A  00BE               	movwf	_test_adc	;volatile
   937                           
   938                           ;main.c: 532: if (0xA5 == test_adc)
   939  003B  30A5               	movlw	165
   940  003C  063E               	xorwf	_test_adc,w	;volatile
   941  003D  1D03               	btfss	3,2
   942  003E  0008               	return
   943                           
   944                           ;main.c: 533: {
   945                           ;main.c: 534: volatile unsigned long wuhua_temp;
   946                           ;main.c: 535: if(power_ad > 0)
   947  003F  082E               	movf	_power_ad,w	;volatile
   948  0040  042F               	iorwf	_power_ad+1,w	;volatile
   949  0041  1903               	btfsc	3,2
   950  0042  0008               	return
   951                           
   952                           ;main.c: 536: {
   953                           ;main.c: 537: wuhua_temp = (unsigned long)(1UL*adresult * power_ad)/4096;
   954  0043  23DC  118A         	fcall	PL10	;call to abstracted procedure
   955  0045  20C4  118A         	fcall	___lmul
   956  0047  084F               	movf	?___lmul+3,w
   957  0048  00DC               	movwf	wuhuaCtr@wuhua_temp+3	;volatile
   958  0049  084E               	movf	?___lmul+2,w
   959  004A  00DB               	movwf	wuhuaCtr@wuhua_temp+2	;volatile
   960  004B  084D               	movf	?___lmul+1,w
   961  004C  00DA               	movwf	wuhuaCtr@wuhua_temp+1	;volatile
   962  004D  084C               	movf	?___lmul,w
   963  004E  00D9               	movwf	wuhuaCtr@wuhua_temp	;volatile
   964  004F  300C               	movlw	12
   965  0050                     u3825:	
   966  0050  1003               	clrc
   967  0051  0CDC               	rrf	wuhuaCtr@wuhua_temp+3,f	;volatile
   968  0052  0CDB               	rrf	wuhuaCtr@wuhua_temp+2,f	;volatile
   969  0053  0CDA               	rrf	wuhuaCtr@wuhua_temp+1,f	;volatile
   970  0054  0CD9               	rrf	wuhuaCtr@wuhua_temp,f	;volatile
   971  0055  3EFF               	addlw	-1
   972  0056  1D03               	skipz
   973  0057  2850               	goto	u3825
   974                           
   975                           ;main.c: 538: wuhuaValue = (unsigned int)(wuhua_temp);
   976  0058  085A               	movf	wuhuaCtr@wuhua_temp+1,w	;volatile
   977  0059  1683               	bsf	3,5	;RP0=1, select bank1
   978  005A  00B1               	movwf	(_wuhuaValue+1)^(0+128)
   979  005B  1283               	bcf	3,5	;RP0=0, select bank0
   980  005C  0859               	movf	wuhuaCtr@wuhua_temp,w	;volatile
   981  005D  1683               	bsf	3,5	;RP0=1, select bank1
   982  005E  00B0               	movwf	_wuhuaValue^(0+128)
   983                           
   984                           ;main.c: 544: }
   985                           ;main.c: 545: }
   986  005F  0008               	return
   987  0060                     l4009:	
   988                           
   989                           ;main.c: 546: else
   990                           ;main.c: 547: {
   991                           ;main.c: 548: pwmStop();
   992  0060  2C0C               	ljmp	l3745
   993  0061                     __end_of_wuhuaCtr:	
   994  0061                     __ptext7:	
   995 ;; *************** function _fanCtr *****************
   996 ;; Defined at:
   997 ;;		line 455 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
  1002 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, pclath, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 300/100
  1009 ;;		On exit  : 200/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1012 ;;      Params:         0       0       0       0
  1013 ;;      Locals:         0       5       0       0
  1014 ;;      Temps:          0       0       0       0
  1015 ;;      Totals:         0       5       0       0
  1016 ;;Total ram usage:        5 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    2
  1019 ;; This function calls:
  1020 ;;		_ADC_Sample
  1021 ;;		___lmul
  1022 ;;		_fanInit
  1023 ;;		_fanStop
  1024 ;; This function is called by:
  1025 ;;		_workCtr
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _fanCtr
  1031  0061                     _fanCtr:	
  1032                           
  1033                           ;main.c: 457: if(workStep > 0)
  1034                           
  1035                           ;incstack = 0
  1036                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1037  0061  087B               	movf	_workStep,w
  1038  0062  1903               	btfsc	3,2
  1039  0063  28BF               	goto	l3977
  1040                           
  1041                           ;main.c: 458: {
  1042                           ;main.c: 459: PORTA |= 0x04;
  1043  0064  1506               	bsf	6,2	;volatile
  1044                           
  1045                           ;main.c: 460: unsigned char maxFanValue = 48;
  1046  0065  3030               	movlw	48
  1047  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0067  00D9               	movwf	fanCtr@maxFanValue
  1049                           
  1050                           ;main.c: 461: if(workStep == 1 || power_ad < 3350)
  1051  0068  037B               	decf	_workStep,w
  1052  0069  1903               	btfsc	3,2
  1053  006A  2872               	goto	l3943
  1054  006B  300D               	movlw	13
  1055  006C  022F               	subwf	_power_ad+1,w	;volatile
  1056  006D  3016               	movlw	22
  1057  006E  1903               	skipnz
  1058  006F  022E               	subwf	_power_ad,w	;volatile
  1059  0070  1803               	skipnc
  1060  0071  2874               	goto	l3945
  1061  0072                     l3943:	
  1062                           
  1063                           ;main.c: 462: {
  1064                           ;main.c: 463: maxFanValue = 33;
  1065  0072  3021               	movlw	33
  1066  0073  00D9               	movwf	fanCtr@maxFanValue
  1067  0074                     l3945:	
  1068  0074  300D               	movlw	13
  1069                           
  1070                           ;main.c: 464: }
  1071                           ;main.c: 465: test_adc = ADC_Sample(13, 0);
  1072  0075  01F2               	clrf	ADC_Sample@adldo
  1073  0076  227A  118A         	fcall	_ADC_Sample
  1074  0078  00BE               	movwf	_test_adc	;volatile
  1075                           
  1076                           ;main.c: 466: if (0xA5 == test_adc)
  1077  0079  30A5               	movlw	165
  1078  007A  063E               	xorwf	_test_adc,w	;volatile
  1079  007B  1D03               	btfss	3,2
  1080  007C  289D               	goto	l3957
  1081                           
  1082                           ;main.c: 467: {
  1083                           ;main.c: 468: volatile unsigned long fan_temp;
  1084                           ;main.c: 469: if(power_ad > 0)
  1085  007D  082E               	movf	_power_ad,w	;volatile
  1086  007E  042F               	iorwf	_power_ad+1,w	;volatile
  1087  007F  1903               	btfsc	3,2
  1088  0080  289D               	goto	l3957
  1089                           
  1090                           ;main.c: 470: {
  1091                           ;main.c: 471: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1092  0081  23DC  118A         	fcall	PL10	;call to abstracted procedure
  1093  0083  20C4  118A         	fcall	___lmul
  1094  0085  084F               	movf	?___lmul+3,w
  1095  0086  00DD               	movwf	fanCtr@fan_temp+3	;volatile
  1096  0087  084E               	movf	?___lmul+2,w
  1097  0088  00DC               	movwf	fanCtr@fan_temp+2	;volatile
  1098  0089  084D               	movf	?___lmul+1,w
  1099  008A  00DB               	movwf	fanCtr@fan_temp+1	;volatile
  1100  008B  084C               	movf	?___lmul,w
  1101  008C  00DA               	movwf	fanCtr@fan_temp	;volatile
  1102  008D  300C               	movlw	12
  1103  008E                     u3705:	
  1104  008E  1003               	clrc
  1105  008F  0CDD               	rrf	fanCtr@fan_temp+3,f	;volatile
  1106  0090  0CDC               	rrf	fanCtr@fan_temp+2,f	;volatile
  1107  0091  0CDB               	rrf	fanCtr@fan_temp+1,f	;volatile
  1108  0092  0CDA               	rrf	fanCtr@fan_temp,f	;volatile
  1109  0093  3EFF               	addlw	-1
  1110  0094  1D03               	skipz
  1111  0095  288E               	goto	u3705
  1112                           
  1113                           ;main.c: 472: fanValue = (unsigned int)(fan_temp);
  1114  0096  085B               	movf	fanCtr@fan_temp+1,w	;volatile
  1115  0097  1683               	bsf	3,5	;RP0=1, select bank1
  1116  0098  00B3               	movwf	(_fanValue+1)^(0+128)
  1117  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1118  009A  085A               	movf	fanCtr@fan_temp,w	;volatile
  1119  009B  1683               	bsf	3,5	;RP0=1, select bank1
  1120  009C  00B2               	movwf	_fanValue^(0+128)
  1121  009D                     l3957:	
  1122                           
  1123                           ;main.c: 473: }
  1124                           ;main.c: 474: }
  1125                           ;main.c: 475: if(fanValue > 1300)
  1126  009D  3005               	movlw	5
  1127  009E  1683               	bsf	3,5	;RP0=1, select bank1
  1128  009F  0233               	subwf	(_fanValue+1)^(0+128),w
  1129  00A0  3015               	movlw	21
  1130  00A1  1903               	skipnz
  1131  00A2  0232               	subwf	_fanValue^(0+128),w
  1132  00A3  1C03               	skipc
  1133  00A4  28B2               	goto	l3965
  1134                           
  1135                           ;main.c: 476: {
  1136                           ;main.c: 477: if(++fanOverTime > 50)
  1137  00A5  3033               	movlw	51
  1138  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1139  00A7  0AC4               	incf	_fanOverTime,f
  1140  00A8  0244               	subwf	_fanOverTime,w
  1141  00A9  1C03               	skipc
  1142  00AA  28B4               	goto	l3967
  1143  00AB  30C2               	movlw	194
  1144                           
  1145                           ;main.c: 478: {
  1146                           ;main.c: 479: fanOverTime = 0;
  1147  00AC  01C4               	clrf	_fanOverTime
  1148                           
  1149                           ;main.c: 480: workStep = 0;
  1150  00AD  01FB               	clrf	_workStep
  1151                           
  1152                           ;main.c: 481: shanshuoTime = 450;
  1153  00AE  00B2               	movwf	_shanshuoTime
  1154  00AF  3001               	movlw	1
  1155  00B0  00B3               	movwf	_shanshuoTime+1
  1156  00B1  28B4               	goto	l3967
  1157  00B2                     l3965:	
  1158                           
  1159                           ;main.c: 484: else
  1160                           ;main.c: 485: {
  1161                           ;main.c: 486: fanOverTime = 0;
  1162  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1163  00B3  01C4               	clrf	_fanOverTime
  1164  00B4                     l3967:	
  1165                           
  1166                           ;main.c: 487: }
  1167                           ;main.c: 488: if(fanDuty < maxFanValue)
  1168  00B4  0859               	movf	fanCtr@maxFanValue,w
  1169  00B5  0246               	subwf	_fanDuty,w
  1170  00B6  1803               	skipnc
  1171  00B7  28BA               	goto	l3971
  1172                           
  1173                           ;main.c: 489: {
  1174                           ;main.c: 490: fanDuty++;
  1175  00B8  0AC6               	incf	_fanDuty,f
  1176                           
  1177                           ;main.c: 491: }
  1178  00B9  28BE               	goto	l3975
  1179  00BA                     l3971:	
  1180                           
  1181                           ;main.c: 492: else if(fanDuty > maxFanValue)
  1182  00BA  0846               	movf	_fanDuty,w
  1183  00BB  0259               	subwf	fanCtr@maxFanValue,w
  1184  00BC  1C03               	btfss	3,0
  1185                           
  1186                           ;main.c: 493: {
  1187                           ;main.c: 494: fanDuty--;
  1188  00BD  03C6               	decf	_fanDuty,f
  1189  00BE                     l3975:	
  1190                           
  1191                           ;main.c: 495: }
  1192                           ;main.c: 496: fanInit();
  1193  00BE  2BC1               	ljmp	l3751
  1194  00BF                     l3977:	
  1195                           ;main.c: 497: }
  1196                           
  1197                           
  1198                           ;main.c: 498: else
  1199                           ;main.c: 499: {
  1200                           ;main.c: 500: fanStop();
  1201  00BF  2407               	fcall	_fanStop
  1202                           
  1203                           ;main.c: 501: fanDuty = 0;
  1204  00C0  01C6               	clrf	_fanDuty
  1205                           
  1206                           ;main.c: 502: PORTA &= 0xFB;
  1207  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  1208  00C2  1106               	bcf	6,2	;volatile
  1209  00C3  0008               	return
  1210  00C4                     __end_of_fanCtr:	
  1211  00C4                     __ptext10:	
  1212 ;; *************** function ___lmul *****************
  1213 ;; Defined at:
  1214 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1217 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  product         4    2[COMMON] unsigned long 
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  4    0[BANK0 ] unsigned long 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 300/0
  1226 ;;		On exit  : 300/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1229 ;;      Params:         0       8       0       0
  1230 ;;      Locals:         4       0       0       0
  1231 ;;      Temps:          0       0       0       0
  1232 ;;      Totals:         4       8       0       0
  1233 ;;Total ram usage:       12 bytes
  1234 ;; Hardware stack levels used:    1
  1235 ;; Hardware stack levels required when called:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_fanCtr
  1240 ;;		_wuhuaCtr
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function ___lmul
  1246  00C4                     ___lmul:	
  1247                           
  1248                           ;incstack = 0
  1249                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1250  00C4  01F2               	clrf	___lmul@product
  1251  00C5  01F3               	clrf	___lmul@product+1
  1252  00C6  01F4               	clrf	___lmul@product+2
  1253  00C7  01F5               	clrf	___lmul@product+3
  1254  00C8                     l1310:	
  1255  00C8  1C4C               	btfss	___lmul@multiplier,0
  1256  00C9  28DE               	goto	l3771
  1257  00CA  0850               	movf	___lmul@multiplicand,w
  1258  00CB  07F2               	addwf	___lmul@product,f
  1259  00CC  0851               	movf	___lmul@multiplicand+1,w
  1260  00CD  1103               	clrz
  1261  00CE  1803               	skipnc
  1262  00CF  3E01               	addlw	1
  1263  00D0  1D03               	btfss	3,2
  1264  00D1  07F3               	addwf	___lmul@product+1,f
  1265  00D2  0852               	movf	___lmul@multiplicand+2,w
  1266  00D3  1103               	clrz
  1267  00D4  1803               	skipnc
  1268  00D5  3E01               	addlw	1
  1269  00D6  1D03               	btfss	3,2
  1270  00D7  07F4               	addwf	___lmul@product+2,f
  1271  00D8  0853               	movf	___lmul@multiplicand+3,w
  1272  00D9  1103               	clrz
  1273  00DA  1803               	skipnc
  1274  00DB  3E01               	addlw	1
  1275  00DC  1D03               	btfss	3,2
  1276  00DD  07F5               	addwf	___lmul@product+3,f
  1277  00DE                     l3771:	
  1278  00DE  1003               	clrc
  1279  00DF  0DD0               	rlf	___lmul@multiplicand,f
  1280  00E0  0DD1               	rlf	___lmul@multiplicand+1,f
  1281  00E1  0DD2               	rlf	___lmul@multiplicand+2,f
  1282  00E2  0DD3               	rlf	___lmul@multiplicand+3,f
  1283  00E3  1003               	clrc
  1284  00E4  0CCF               	rrf	___lmul@multiplier+3,f
  1285  00E5  0CCE               	rrf	___lmul@multiplier+2,f
  1286  00E6  0CCD               	rrf	___lmul@multiplier+1,f
  1287  00E7  0CCC               	rrf	___lmul@multiplier,f
  1288  00E8  084F               	movf	___lmul@multiplier+3,w
  1289  00E9  044E               	iorwf	___lmul@multiplier+2,w
  1290  00EA  044D               	iorwf	___lmul@multiplier+1,w
  1291  00EB  044C               	iorwf	___lmul@multiplier,w
  1292  00EC  1D03               	skipz
  1293  00ED  28C8               	goto	l1310
  1294  00EE  0875               	movf	___lmul@product+3,w
  1295  00EF  00CF               	movwf	?___lmul+3
  1296  00F0  0874               	movf	___lmul@product+2,w
  1297  00F1  00CE               	movwf	?___lmul+2
  1298  00F2  0873               	movf	___lmul@product+1,w
  1299  00F3  00CD               	movwf	?___lmul+1
  1300  00F4  0872               	movf	___lmul@product,w
  1301  00F5  00CC               	movwf	?___lmul
  1302  00F6  0008               	return
  1303  00F7                     __end_of___lmul:	
  1304  00F7                     __ptext1:	
  1305 ;; *************** function _workCtr *****************
  1306 ;; Defined at:
  1307 ;;		line 553 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 300/0
  1318 ;;		On exit  : 200/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1321 ;;      Params:         0       0       0       0
  1322 ;;      Locals:         0       0       4       0
  1323 ;;      Temps:          0       0       0       0
  1324 ;;      Totals:         0       0       4       0
  1325 ;;Total ram usage:        4 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    3
  1328 ;; This function calls:
  1329 ;;		_ADC_Sample
  1330 ;;		___ftdiv
  1331 ;;		___fttol
  1332 ;;		___lwtoft
  1333 ;;		_fanCtr
  1334 ;;		_keyLedCtr
  1335 ;;		_wuhuaCtr
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _workCtr
  1343  00F7                     _workCtr:	
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1347  00F7  301F               	movlw	31
  1348                           
  1349                           ;main.c: 555: test_adc = ADC_Sample(31, 0);
  1350  00F8  01F2               	clrf	ADC_Sample@adldo
  1351  00F9  227A  118A         	fcall	_ADC_Sample
  1352  00FB  00BE               	movwf	_test_adc	;volatile
  1353                           
  1354                           ;main.c: 556: if (0xA5 == test_adc)
  1355  00FC  30A5               	movlw	165
  1356  00FD  063E               	xorwf	_test_adc,w	;volatile
  1357  00FE  1D03               	btfss	3,2
  1358  00FF  2931               	goto	l4213
  1359                           
  1360                           ;main.c: 557: {
  1361                           ;main.c: 558: volatile unsigned long power_temp;
  1362                           ;main.c: 560: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1363  0100  3096               	movlw	150
  1364  0101  01D5               	clrf	___ftdiv@f1
  1365  0102  00D6               	movwf	___ftdiv@f1+1
  1366  0103  304A               	movlw	74
  1367  0104  00D7               	movwf	___ftdiv@f1+2
  1368  0105  084B               	movf	_adresult+1,w	;volatile
  1369  0106  00D0               	movwf	___lwtoft@c+1
  1370  0107  084A               	movf	_adresult,w	;volatile
  1371  0108  00CF               	movwf	___lwtoft@c
  1372  0109  222C  118A         	fcall	___lwtoft
  1373  010B  084F               	movf	?___lwtoft,w
  1374  010C  00D2               	movwf	___ftdiv@f2
  1375  010D  0850               	movf	?___lwtoft+1,w
  1376  010E  00D3               	movwf	___ftdiv@f2+1
  1377  010F  0851               	movf	?___lwtoft+2,w
  1378  0110  00D4               	movwf	___ftdiv@f2+2
  1379  0111  2171  118A         	fcall	___ftdiv
  1380  0113  0852               	movf	?___ftdiv,w
  1381  0114  00E1               	movwf	___fttol@f1
  1382  0115  0853               	movf	?___ftdiv+1,w
  1383  0116  00E2               	movwf	___fttol@f1+1
  1384  0117  0854               	movf	?___ftdiv+2,w
  1385  0118  00E3               	movwf	___fttol@f1+2
  1386  0119  21D3  118A         	fcall	___fttol
  1387  011B  0864               	movf	?___fttol+3,w
  1388  011C  1683               	bsf	3,5	;RP0=1, select bank1
  1389  011D  00B7               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1390  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1391  011F  0863               	movf	?___fttol+2,w
  1392  0120  1683               	bsf	3,5	;RP0=1, select bank1
  1393  0121  00B6               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1394  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0123  0862               	movf	?___fttol+1,w
  1396  0124  1683               	bsf	3,5	;RP0=1, select bank1
  1397  0125  00B5               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1398  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0127  0861               	movf	?___fttol,w
  1400  0128  1683               	bsf	3,5	;RP0=1, select bank1
  1401  0129  00B4               	movwf	workCtr@power_temp^(0+128)	;volatile
  1402                           
  1403                           ;main.c: 561: power_ad = (unsigned int)(power_temp);
  1404  012A  0835               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1405  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1406  012C  00AF               	movwf	_power_ad+1	;volatile
  1407  012D  1683               	bsf	3,5	;RP0=1, select bank1
  1408  012E  0834               	movf	workCtr@power_temp^(0+128),w	;volatile
  1409  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0130  00AE               	movwf	_power_ad	;volatile
  1411  0131                     l4213:	
  1412                           
  1413                           ;main.c: 562: }
  1414                           ;main.c: 563: if(workStep == 2 && power_ad < 3300)
  1415  0131  3002               	movlw	2
  1416  0132  067B               	xorwf	_workStep,w
  1417  0133  1D03               	btfss	3,2
  1418  0134  2945               	goto	l4223
  1419  0135  300C               	movlw	12
  1420  0136  022F               	subwf	_power_ad+1,w	;volatile
  1421  0137  30E4               	movlw	228
  1422  0138  1903               	skipnz
  1423  0139  022E               	subwf	_power_ad,w	;volatile
  1424  013A  1803               	skipnc
  1425  013B  2945               	goto	l4223
  1426                           
  1427                           ;main.c: 564: {
  1428                           ;main.c: 565: if(++lowFanTime > 200)
  1429  013C  30C9               	movlw	201
  1430  013D  0ABF               	incf	_lowFanTime,f
  1431  013E  023F               	subwf	_lowFanTime,w
  1432  013F  1C03               	skipc
  1433  0140  2946               	goto	l4225
  1434                           
  1435                           ;main.c: 566: {
  1436                           ;main.c: 567: lowFanTime = 0;
  1437  0141  01BF               	clrf	_lowFanTime
  1438                           
  1439                           ;main.c: 568: workStep = 1;
  1440  0142  01FB               	clrf	_workStep
  1441  0143  0AFB               	incf	_workStep,f
  1442  0144  2946               	goto	l4225
  1443  0145                     l4223:	
  1444                           
  1445                           ;main.c: 571: else
  1446                           ;main.c: 572: {
  1447                           ;main.c: 573: lowFanTime = 0;
  1448  0145  01BF               	clrf	_lowFanTime
  1449  0146                     l4225:	
  1450                           
  1451                           ;main.c: 574: }
  1452                           ;main.c: 575: if(power_ad < 2900)
  1453  0146  300B               	movlw	11
  1454  0147  022F               	subwf	_power_ad+1,w	;volatile
  1455  0148  3054               	movlw	84
  1456  0149  1903               	skipnz
  1457  014A  022E               	subwf	_power_ad,w	;volatile
  1458  014B  1803               	skipnc
  1459  014C  2960               	goto	l4233
  1460                           
  1461                           ;main.c: 576: {
  1462                           ;main.c: 577: if(++lowBatTime > 1000)
  1463  014D  1683               	bsf	3,5	;RP0=1, select bank1
  1464  014E  0AAE               	incf	_lowBatTime^(0+128),f
  1465  014F  1903               	skipnz
  1466  0150  0AAF               	incf	(_lowBatTime+1)^(0+128),f
  1467  0151  3003               	movlw	3
  1468  0152  022F               	subwf	(_lowBatTime+1)^(0+128),w
  1469  0153  30E9               	movlw	233
  1470  0154  1903               	skipnz
  1471  0155  022E               	subwf	_lowBatTime^(0+128),w
  1472  0156  1C03               	skipc
  1473  0157  2963               	goto	l4235
  1474                           
  1475                           ;main.c: 578: {
  1476                           ;main.c: 579: lowBatTime = 0;
  1477  0158  01AE               	clrf	_lowBatTime^(0+128)
  1478  0159  01AF               	clrf	(_lowBatTime+1)^(0+128)
  1479                           
  1480                           ;main.c: 580: lowBatLock = 1;
  1481  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1482  015B  01C0               	clrf	_lowBatLock
  1483  015C  0AC0               	incf	_lowBatLock,f
  1484                           
  1485                           ;main.c: 581: workStep = 0;
  1486  015D  01FB               	clrf	_workStep
  1487                           
  1488                           ;main.c: 582: wuhuaFlag = 0;
  1489  015E  01C7               	clrf	_wuhuaFlag
  1490  015F  2963               	goto	l4235
  1491  0160                     l4233:	
  1492                           
  1493                           ;main.c: 585: else
  1494                           ;main.c: 586: {
  1495                           ;main.c: 587: lowBatTime = 0;
  1496  0160  1683               	bsf	3,5	;RP0=1, select bank1
  1497  0161  01AE               	clrf	_lowBatTime^(0+128)
  1498  0162  01AF               	clrf	(_lowBatTime+1)^(0+128)
  1499  0163                     l4235:	
  1500                           
  1501                           ;main.c: 588: }
  1502                           ;main.c: 589: if(firstTime > 0)
  1503  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0164  086E               	movf	_firstTime,w
  1505  0165  1903               	btfsc	3,2
  1506  0166  296C               	goto	l4243
  1507                           
  1508                           ;main.c: 590: {
  1509                           ;main.c: 591: firstTime--;
  1510  0167  03EE               	decf	_firstTime,f
  1511                           
  1512                           ;main.c: 592: PORTB = 0x00;
  1513  0168  0186               	clrf	6	;volatile
  1514                           
  1515                           ;main.c: 593: PORTA = 0x00;
  1516  0169  1683               	bsf	3,5	;RP0=1, select bank1
  1517  016A  0186               	clrf	6	;volatile
  1518                           
  1519                           ;main.c: 594: }
  1520  016B  0008               	return
  1521  016C                     l4243:	
  1522                           
  1523                           ;main.c: 595: else
  1524                           ;main.c: 596: {
  1525                           ;main.c: 597: keyLedCtr();
  1526  016C  234A  118A         	fcall	_keyLedCtr
  1527                           
  1528                           ;main.c: 598: fanCtr();
  1529  016E  2061  118A         	fcall	_fanCtr
  1530                           
  1531                           ;main.c: 599: wuhuaCtr();
  1532  0170  2820               	ljmp	l3983
  1533  0171                     __end_of_workCtr:	
  1534  0171                     __ptext14:	
  1535 ;; *************** function ___ftdiv *****************
  1536 ;; Defined at:
  1537 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  f2              3    6[BANK0 ] float 
  1540 ;;  f1              3    9[BANK0 ] float 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  f3              3   16[BANK0 ] float 
  1543 ;;  sign            1   20[BANK0 ] unsigned char 
  1544 ;;  exp             1   19[BANK0 ] unsigned char 
  1545 ;;  cntr            1   15[BANK0 ] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  3    6[BANK0 ] float 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0, pclath, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 300/0
  1552 ;;		On exit  : 300/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1555 ;;      Params:         0       6       0       0
  1556 ;;      Locals:         0       6       0       0
  1557 ;;      Temps:          0       3       0       0
  1558 ;;      Totals:         0      15       0       0
  1559 ;;Total ram usage:       15 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    2
  1562 ;; This function calls:
  1563 ;;		___ftpack
  1564 ;; This function is called by:
  1565 ;;		_workCtr
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           
  1570                           ;psect for function ___ftdiv
  1571  0171                     ___ftdiv:	
  1572                           
  1573                           ;incstack = 0
  1574                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1575  0171  0855               	movf	___ftdiv@f1,w
  1576  0172  00D8               	movwf	??___ftdiv
  1577  0173  0856               	movf	___ftdiv@f1+1,w
  1578  0174  00D9               	movwf	??___ftdiv+1
  1579  0175  0857               	movf	___ftdiv@f1+2,w
  1580  0176  00DA               	movwf	??___ftdiv+2
  1581  0177  1003               	clrc
  1582  0178  0D59               	rlf	??___ftdiv+1,w
  1583  0179  0D5A               	rlf	??___ftdiv+2,w
  1584  017A  00DF               	movwf	___ftdiv@exp
  1585  017B  085F               	movf	___ftdiv@exp,w
  1586  017C  1D03               	btfss	3,2
  1587  017D  297F               	goto	l4085
  1588  017E  2C03               	ljmp	PL40	;call to abstracted procedure
  1589  017F                     l4085:	
  1590  017F  0852               	movf	___ftdiv@f2,w
  1591  0180  00D8               	movwf	??___ftdiv
  1592  0181  0853               	movf	___ftdiv@f2+1,w
  1593  0182  00D9               	movwf	??___ftdiv+1
  1594  0183  0854               	movf	___ftdiv@f2+2,w
  1595  0184  00DA               	movwf	??___ftdiv+2
  1596  0185  1003               	clrc
  1597  0186  0D59               	rlf	??___ftdiv+1,w
  1598  0187  0D5A               	rlf	??___ftdiv+2,w
  1599  0188  00E0               	movwf	___ftdiv@sign
  1600  0189  0860               	movf	___ftdiv@sign,w
  1601  018A  1D03               	btfss	3,2
  1602  018B  298D               	goto	l1509
  1603  018C  2C03               	ljmp	PL40	;call to abstracted procedure
  1604  018D                     l1509:	
  1605  018D  3089               	movlw	137
  1606  018E  01DC               	clrf	___ftdiv@f3
  1607  018F  01DD               	clrf	___ftdiv@f3+1
  1608  0190  01DE               	clrf	___ftdiv@f3+2
  1609  0191  0760               	addwf	___ftdiv@sign,w
  1610  0192  00D8               	movwf	??___ftdiv
  1611  0193  02DF               	subwf	___ftdiv@exp,f
  1612  0194  0857               	movf	___ftdiv@f1+2,w
  1613  0195  00E0               	movwf	___ftdiv@sign
  1614  0196  0854               	movf	___ftdiv@f2+2,w
  1615  0197  06E0               	xorwf	___ftdiv@sign,f
  1616  0198  3080               	movlw	128
  1617  0199  05E0               	andwf	___ftdiv@sign,f
  1618  019A  3018               	movlw	24
  1619  019B  17D6               	bsf	___ftdiv@f1+1,7
  1620  019C  01D7               	clrf	___ftdiv@f1+2
  1621  019D  17D3               	bsf	___ftdiv@f2+1,7
  1622  019E  01D4               	clrf	___ftdiv@f2+2
  1623  019F  00DB               	movwf	___ftdiv@cntr
  1624  01A0                     l4107:	
  1625  01A0  1003               	clrc
  1626  01A1  0DDC               	rlf	___ftdiv@f3,f
  1627  01A2  0DDD               	rlf	___ftdiv@f3+1,f
  1628  01A3  0DDE               	rlf	___ftdiv@f3+2,f
  1629  01A4  0854               	movf	___ftdiv@f2+2,w
  1630  01A5  0257               	subwf	___ftdiv@f1+2,w
  1631  01A6  1D03               	skipz
  1632  01A7  29AE               	goto	u3985
  1633  01A8  0853               	movf	___ftdiv@f2+1,w
  1634  01A9  0256               	subwf	___ftdiv@f1+1,w
  1635  01AA  1D03               	skipz
  1636  01AB  29AE               	goto	u3985
  1637  01AC  0852               	movf	___ftdiv@f2,w
  1638  01AD  0255               	subwf	___ftdiv@f1,w
  1639  01AE                     u3985:	
  1640  01AE  1C03               	skipc
  1641  01AF  29BC               	goto	L4
  1642  01B0  0852               	movf	___ftdiv@f2,w
  1643  01B1  02D5               	subwf	___ftdiv@f1,f
  1644  01B2  0853               	movf	___ftdiv@f2+1,w
  1645  01B3  1C03               	skipc
  1646  01B4  0F53               	incfsz	___ftdiv@f2+1,w
  1647  01B5  02D6               	subwf	___ftdiv@f1+1,f
  1648  01B6  0854               	movf	___ftdiv@f2+2,w
  1649  01B7  1C03               	skipc
  1650  01B8  0A54               	incf	___ftdiv@f2+2,w
  1651  01B9  02D7               	subwf	___ftdiv@f1+2,f
  1652  01BA  145C               	bsf	___ftdiv@f3,0
  1653  01BB  1003               	clrc
  1654  01BC                     L4:	
  1655  01BC  0DD5               	rlf	___ftdiv@f1,f
  1656  01BD  0DD6               	rlf	___ftdiv@f1+1,f
  1657  01BE  0DD7               	rlf	___ftdiv@f1+2,f
  1658  01BF  0BDB               	decfsz	___ftdiv@cntr,f
  1659  01C0  29A0               	goto	l4107
  1660  01C1  085C               	movf	___ftdiv@f3,w
  1661  01C2  00F2               	movwf	___ftpack@arg
  1662  01C3  085D               	movf	___ftdiv@f3+1,w
  1663  01C4  00F3               	movwf	___ftpack@arg+1
  1664  01C5  085E               	movf	___ftdiv@f3+2,w
  1665  01C6  00F4               	movwf	___ftpack@arg+2
  1666  01C7  085F               	movf	___ftdiv@exp,w
  1667  01C8  00F5               	movwf	___ftpack@exp
  1668  01C9  0860               	movf	___ftdiv@sign,w
  1669  01CA  00F6               	movwf	___ftpack@sign
  1670  01CB  223C               	fcall	___ftpack
  1671  01CC  0872               	movf	?___ftpack,w
  1672  01CD  00D2               	movwf	?___ftdiv
  1673  01CE  0873               	movf	?___ftpack+1,w
  1674  01CF  00D3               	movwf	?___ftdiv+1
  1675  01D0  0874               	movf	?___ftpack+2,w
  1676  01D1  00D4               	movwf	?___ftdiv+2
  1677  01D2  0008               	return
  1678  01D3                     __end_of___ftdiv:	
  1679  01D3                     __ptext13:	
  1680 ;; *************** function ___fttol *****************
  1681 ;; Defined at:
  1682 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  f1              3   21[BANK0 ] float 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  lval            4   29[BANK0 ] unsigned long 
  1687 ;;  exp1            1   33[BANK0 ] unsigned char 
  1688 ;;  sign1           1   28[BANK0 ] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  4   21[BANK0 ] long 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0
  1693 ;; Tracked objects:
  1694 ;;		On entry : 300/0
  1695 ;;		On exit  : 300/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1698 ;;      Params:         0       4       0       0
  1699 ;;      Locals:         0       6       0       0
  1700 ;;      Temps:          0       3       0       0
  1701 ;;      Totals:         0      13       0       0
  1702 ;;Total ram usage:       13 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    1
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_workCtr
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           
  1713                           ;psect for function ___fttol
  1714  01D3                     ___fttol:	
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1718  01D3  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1719  01D5  1003               	clrc
  1720  01D6  0D66               	rlf	??___fttol+1,w
  1721  01D7  0D67               	rlf	??___fttol+2,w
  1722  01D8  00ED               	movwf	___fttol@exp1
  1723  01D9  086D               	movf	___fttol@exp1,w
  1724  01DA  1D03               	btfss	3,2
  1725  01DB  29E1               	goto	l4125
  1726  01DC                     l4123:	
  1727  01DC  01E1               	clrf	?___fttol
  1728  01DD  01E2               	clrf	?___fttol+1
  1729  01DE  01E3               	clrf	?___fttol+2
  1730  01DF  01E4               	clrf	?___fttol+3
  1731  01E0  0008               	return
  1732  01E1                     l4125:	
  1733  01E1  23F2  118A         	fcall	PL24	;call to abstracted procedure
  1734  01E3  3017               	movlw	23
  1735  01E4                     u4015:	
  1736  01E4  1003               	clrc
  1737  01E5  0CE7               	rrf	??___fttol+2,f
  1738  01E6  0CE6               	rrf	??___fttol+1,f
  1739  01E7  0CE5               	rrf	??___fttol,f
  1740  01E8  3EFF               	addlw	-1
  1741  01E9  1D03               	skipz
  1742  01EA  29E4               	goto	u4015
  1743  01EB  0865               	movf	??___fttol,w
  1744  01EC  00E8               	movwf	___fttol@sign1
  1745  01ED  17E2               	bsf	___fttol@f1+1,7
  1746  01EE  01E3               	clrf	___fttol@f1+2
  1747  01EF  0861               	movf	___fttol@f1,w
  1748  01F0  00E9               	movwf	___fttol@lval
  1749  01F1  0862               	movf	___fttol@f1+1,w
  1750  01F2  00EA               	movwf	___fttol@lval+1
  1751  01F3  0863               	movf	___fttol@f1+2,w
  1752  01F4  00EB               	movwf	___fttol@lval+2
  1753  01F5  308E               	movlw	142
  1754  01F6  01EC               	clrf	___fttol@lval+3
  1755  01F7  02ED               	subwf	___fttol@exp1,f
  1756  01F8  1FED               	btfss	___fttol@exp1,7
  1757  01F9  2A07               	goto	l4145
  1758  01FA  086D               	movf	___fttol@exp1,w
  1759  01FB  3A80               	xorlw	128
  1760  01FC  3E8F               	addlw	143
  1761  01FD  1C03               	btfss	3,0
  1762  01FE  29DC               	goto	l4123
  1763  01FF                     l4141:	
  1764  01FF  1003               	clrc
  1765  0200  0CEC               	rrf	___fttol@lval+3,f
  1766  0201  0CEB               	rrf	___fttol@lval+2,f
  1767  0202  0CEA               	rrf	___fttol@lval+1,f
  1768  0203  0CE9               	rrf	___fttol@lval,f
  1769  0204  0FED               	incfsz	___fttol@exp1,f
  1770  0205  29FF               	goto	l4141
  1771  0206  2A15               	goto	l4153
  1772  0207                     l4145:	
  1773  0207  3018               	movlw	24
  1774  0208  026D               	subwf	___fttol@exp1,w
  1775  0209  1803               	btfsc	3,0
  1776  020A  29DC               	goto	l4123
  1777  020B                     l4151:	
  1778  020B  086D               	movf	___fttol@exp1,w
  1779  020C  1903               	btfsc	3,2
  1780  020D  2A15               	goto	l4153
  1781  020E  1003               	clrc
  1782  020F  0DE9               	rlf	___fttol@lval,f
  1783  0210  0DEA               	rlf	___fttol@lval+1,f
  1784  0211  0DEB               	rlf	___fttol@lval+2,f
  1785  0212  0DEC               	rlf	___fttol@lval+3,f
  1786  0213  03ED               	decf	___fttol@exp1,f
  1787  0214  2A0B               	goto	l4151
  1788  0215                     l4153:	
  1789  0215  0868               	movf	___fttol@sign1,w
  1790  0216  1903               	btfsc	3,2
  1791  0217  2A23               	goto	l4157
  1792  0218  09E9               	comf	___fttol@lval,f
  1793  0219  09EA               	comf	___fttol@lval+1,f
  1794  021A  09EB               	comf	___fttol@lval+2,f
  1795  021B  09EC               	comf	___fttol@lval+3,f
  1796  021C  0AE9               	incf	___fttol@lval,f
  1797  021D  1903               	skipnz
  1798  021E  0AEA               	incf	___fttol@lval+1,f
  1799  021F  1903               	skipnz
  1800  0220  0AEB               	incf	___fttol@lval+2,f
  1801  0221  1903               	skipnz
  1802  0222  0AEC               	incf	___fttol@lval+3,f
  1803  0223                     l4157:	
  1804  0223  086C               	movf	___fttol@lval+3,w
  1805  0224  00E4               	movwf	?___fttol+3
  1806  0225  086B               	movf	___fttol@lval+2,w
  1807  0226  00E3               	movwf	?___fttol+2
  1808  0227  086A               	movf	___fttol@lval+1,w
  1809  0228  00E2               	movwf	?___fttol+1
  1810  0229  0869               	movf	___fttol@lval,w
  1811  022A  00E1               	movwf	?___fttol
  1812  022B  0008               	return
  1813  022C                     __end_of___fttol:	
  1814  022C                     __ptext12:	
  1815 ;; *************** function ___lwtoft *****************
  1816 ;; Defined at:
  1817 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  c               2    3[BANK0 ] unsigned int 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  3    3[BANK0 ] float 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 300/0
  1828 ;;		On exit  : 300/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1831 ;;      Params:         0       3       0       0
  1832 ;;      Locals:         0       0       0       0
  1833 ;;      Temps:          0       0       0       0
  1834 ;;      Totals:         0       3       0       0
  1835 ;;Total ram usage:        3 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    2
  1838 ;; This function calls:
  1839 ;;		___ftpack
  1840 ;; This function is called by:
  1841 ;;		_workCtr
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function ___lwtoft
  1847  022C                     ___lwtoft:	
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1851  022C  084F               	movf	___lwtoft@c,w
  1852  022D  00F2               	movwf	___ftpack@arg
  1853  022E  0850               	movf	___lwtoft@c+1,w
  1854  022F  00F3               	movwf	___ftpack@arg+1
  1855  0230  308E               	movlw	142
  1856  0231  01F4               	clrf	___ftpack@arg+2
  1857  0232  00F5               	movwf	___ftpack@exp
  1858  0233  01F6               	clrf	___ftpack@sign
  1859  0234  223C               	fcall	___ftpack
  1860  0235  0872               	movf	?___ftpack,w
  1861  0236  00CF               	movwf	?___lwtoft
  1862  0237  0873               	movf	?___ftpack+1,w
  1863  0238  00D0               	movwf	?___lwtoft+1
  1864  0239  0874               	movf	?___ftpack+2,w
  1865  023A  00D1               	movwf	?___lwtoft+2
  1866  023B  0008               	return
  1867  023C                     __end_of___lwtoft:	
  1868  023C                     __ptext15:	
  1869 ;; *************** function ___ftpack *****************
  1870 ;; Defined at:
  1871 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  arg             3    2[COMMON] unsigned um
  1874 ;;  exp             1    5[COMMON] unsigned char 
  1875 ;;  sign            1    6[COMMON] unsigned char 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  3    2[COMMON] float 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0
  1882 ;; Tracked objects:
  1883 ;;		On entry : 300/0
  1884 ;;		On exit  : 300/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1887 ;;      Params:         5       0       0       0
  1888 ;;      Locals:         0       0       0       0
  1889 ;;      Temps:          0       3       0       0
  1890 ;;      Totals:         5       3       0       0
  1891 ;;Total ram usage:        8 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    1
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		___ftdiv
  1898 ;;		___lwtoft
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function ___ftpack
  1904  023C                     ___ftpack:	
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1908  023C  0875               	movf	___ftpack@exp,w
  1909  023D  1903               	btfsc	3,2
  1910  023E  2A44               	goto	l1455
  1911  023F  0874               	movf	___ftpack@arg+2,w
  1912  0240  0473               	iorwf	___ftpack@arg+1,w
  1913  0241  0472               	iorwf	___ftpack@arg,w
  1914  0242  1D03               	skipz
  1915  0243  2A4B               	goto	l3785
  1916  0244                     l1455:	
  1917  0244  01F2               	clrf	?___ftpack
  1918  0245  01F3               	clrf	?___ftpack+1
  1919  0246  01F4               	clrf	?___ftpack+2
  1920  0247  0008               	return
  1921  0248                     l3783:	
  1922  0248  0AF5               	incf	___ftpack@exp,f
  1923  0249  23F9  118A         	fcall	PL34	;call to abstracted procedure
  1924  024B                     l3785:	
  1925  024B  30FE               	movlw	254
  1926  024C  0574               	andwf	___ftpack@arg+2,w
  1927  024D  1903               	btfsc	3,2
  1928  024E  2A58               	goto	l3789
  1929  024F  2A48               	goto	l3783
  1930  0250                     l3787:	
  1931  0250  0AF5               	incf	___ftpack@exp,f
  1932  0251  0AF2               	incf	___ftpack@arg,f
  1933  0252  1903               	skipnz
  1934  0253  0AF3               	incf	___ftpack@arg+1,f
  1935  0254  1903               	skipnz
  1936  0255  0AF4               	incf	___ftpack@arg+2,f
  1937  0256  23F9  118A         	fcall	PL34	;call to abstracted procedure
  1938  0258                     l3789:	
  1939  0258  30FF               	movlw	255
  1940  0259  0574               	andwf	___ftpack@arg+2,w
  1941  025A  1903               	btfsc	3,2
  1942  025B  2A66               	goto	l3793
  1943  025C  2A50               	goto	l3787
  1944  025D                     l3795:	
  1945  025D  3002               	movlw	2
  1946  025E  0275               	subwf	___ftpack@exp,w
  1947  025F  1C03               	btfss	3,0
  1948  0260  2A68               	goto	l1467
  1949  0261  03F5               	decf	___ftpack@exp,f
  1950  0262  1003               	clrc
  1951  0263  0DF2               	rlf	___ftpack@arg,f
  1952  0264  0DF3               	rlf	___ftpack@arg+1,f
  1953  0265  0DF4               	rlf	___ftpack@arg+2,f
  1954  0266                     l3793:	
  1955  0266  1FF3               	btfss	___ftpack@arg+1,7
  1956  0267  2A5D               	goto	l3795
  1957  0268                     l1467:	
  1958  0268  1C75               	btfss	___ftpack@exp,0
  1959  0269  13F3               	bcf	___ftpack@arg+1,7
  1960  026A  1003               	clrc
  1961  026B  0CF5               	rrf	___ftpack@exp,f
  1962  026C  0875               	movf	___ftpack@exp,w
  1963  026D  00CE               	movwf	??___ftpack+2
  1964  026E  01CD               	clrf	??___ftpack+1
  1965  026F  01CC               	clrf	??___ftpack
  1966  0270  084C               	movf	??___ftpack,w
  1967  0271  04F2               	iorwf	___ftpack@arg,f
  1968  0272  084D               	movf	??___ftpack+1,w
  1969  0273  04F3               	iorwf	___ftpack@arg+1,f
  1970  0274  084E               	movf	??___ftpack+2,w
  1971  0275  04F4               	iorwf	___ftpack@arg+2,f
  1972  0276  0876               	movf	___ftpack@sign,w
  1973  0277  1D03               	btfss	3,2
  1974  0278  17F4               	bsf	___ftpack@arg+2,7
  1975  0279  0008               	return
  1976  027A                     __end_of___ftpack:	
  1977  027A                     __ptext11:	
  1978 ;; *************** function _ADC_Sample *****************
  1979 ;; Defined at:
  1980 ;;		line 264 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  adch            1    wreg     unsigned char 
  1983 ;;  adldo           1    2[COMMON] unsigned char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  adch            1    1[BANK0 ] unsigned char 
  1986 ;;  j               1    0[BANK0 ] unsigned char 
  1987 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1988 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1989 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1990 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1991 ;;  i               1    2[BANK0 ] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      unsigned char 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0
  1996 ;; Tracked objects:
  1997 ;;		On entry : 300/0
  1998 ;;		On exit  : 300/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2001 ;;      Params:         1       0       0       0
  2002 ;;      Locals:         0      13       0       0
  2003 ;;      Temps:          4       0       0       0
  2004 ;;      Totals:         5      13       0       0
  2005 ;;Total ram usage:       18 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    1
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_fanCtr
  2012 ;;		_wuhuaCtr
  2013 ;;		_workCtr
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _ADC_Sample
  2019  027A                     _ADC_Sample:	
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2023                           ;ADC_Sample@adch stored from wreg
  2024  027A  00CD               	movwf	ADC_Sample@adch
  2025                           
  2026                           ;main.c: 266: volatile unsigned long adsum = 0;
  2027                           
  2028                           ;main.c: 267: volatile unsigned int admin = 0, admax = 0;
  2029  027B  23E9  118A         	fcall	PL18	;call to abstracted procedure
  2030                           
  2031                           ;main.c: 268: volatile unsigned int ad_temp = 0;
  2032  027D  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  2033  027E  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2034                           
  2035                           ;main.c: 270: if ((!LDO_EN) && (adldo & 0x04) )
  2036  027F  1683               	bsf	3,5	;RP0=1, select bank1
  2037  0280  1D16               	btfss	22,2	;volatile
  2038  0281  1D72               	btfss	ADC_Sample@adldo,2
  2039  0282  2A8B               	goto	l3673
  2040                           
  2041                           ;main.c: 271: {
  2042                           ;main.c: 273: ADCON1 = adldo;
  2043  0283  0872               	movf	ADC_Sample@adldo,w
  2044  0284  0096               	movwf	22	;volatile
  2045                           
  2046                           ;main.c: 274: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2047  0285  3042               	movlw	66
  2048  0286  00F3               	movwf	??_ADC_Sample
  2049  0287                     u4307:	
  2050  0287  0BF3               	decfsz	??_ADC_Sample,f
  2051  0288  2A87               	goto	u4307
  2052  0289  0000               	nop
  2053                           
  2054                           ;main.c: 275: }
  2055  028A  2A8D               	goto	l3675
  2056  028B                     l3673:	
  2057                           
  2058                           ;main.c: 276: else
  2059                           ;main.c: 277: ADCON1 = adldo;
  2060  028B  0872               	movf	ADC_Sample@adldo,w
  2061  028C  0096               	movwf	22	;volatile
  2062  028D                     l3675:	
  2063                           
  2064                           ;main.c: 279: if(adch & 0x10)
  2065  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2066  028E  1303               	bcf	3,6	;RP1=0, select bank0
  2067  028F  1E4D               	btfss	ADC_Sample@adch,4
  2068  0290  2A96               	goto	l3683
  2069                           
  2070                           ;main.c: 280: {
  2071                           ;main.c: 281: CHS4 = 1;
  2072  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2073  0292  1716               	bsf	22,6	;volatile
  2074                           
  2075                           ;main.c: 282: adch &= 0x0f;
  2076  0293  300F               	movlw	15
  2077  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0295  05CD               	andwf	ADC_Sample@adch,f
  2079  0296                     l3683:	
  2080                           
  2081                           ;main.c: 285: for (i = 0; i < 10; i++)
  2082  0296  01CE               	clrf	ADC_Sample@i
  2083  0297                     l3689:	
  2084                           
  2085                           ;main.c: 286: {
  2086                           ;main.c: 287: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2087  0297  084D               	movf	ADC_Sample@adch,w
  2088  0298  00F3               	movwf	??_ADC_Sample
  2089  0299  3001               	movlw	1
  2090  029A  1003               	clrc
  2091  029B                     L3:	
  2092  029B  0DF3               	rlf	??_ADC_Sample,f
  2093  029C  3EFF               	addlw	-1
  2094  029D  1003               	clrc
  2095  029E  1D03               	skipz
  2096  029F  2A9B               	goto	L3
  2097  02A0  0D73               	rlf	??_ADC_Sample,w
  2098  02A1  3841               	iorlw	65
  2099  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2100  02A3  0095               	movwf	21	;volatile
  2101  02A4  0000               	nop	;# 
  2102  02A5  0000               	nop	;# 
  2103  02A6  0000               	nop	;# 
  2104  02A7  0000               	nop	;# 
  2105                           
  2106                           ;main.c: 292: GODONE = 1;
  2107  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2108  02A9  1303               	bcf	3,6	;RP1=0, select bank1
  2109  02AA  1495               	bsf	21,1	;volatile
  2110                           
  2111                           ;main.c: 294: unsigned char j = 0;
  2112  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2113  02AC  01CC               	clrf	ADC_Sample@j
  2114  02AD                     l968:	
  2115                           ;main.c: 295: while (GODONE)
  2116                           
  2117  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2118  02AE  1C95               	btfss	21,1	;volatile
  2119  02AF  2AB7               	goto	l3699
  2120                           
  2121                           ;main.c: 296: {
  2122                           ;main.c: 297: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2123  02B0  2AB1               	nop2	;2 cycle nop
  2124  02B1  2AB2               	nop2	;2 cycle nop
  2125                           
  2126                           ;main.c: 299: if (0 == (--j))
  2127  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  2128  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  2129  02B4  0BCC               	decfsz	ADC_Sample@j,f
  2130  02B5  2AAD               	goto	l968
  2131                           
  2132                           ;main.c: 300: return 0;
  2133  02B6  3400               	retlw	0
  2134  02B7                     l3699:	
  2135                           
  2136                           ;main.c: 301: }
  2137                           ;main.c: 303: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2138  02B7  0819               	movf	25,w	;volatile
  2139  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2140  02B9  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  2141  02BA  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  2142  02BB  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  2143  02BC  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2144  02BD  30F0               	movlw	240
  2145  02BE  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2146  02BF  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2147  02C0  390F               	andlw	15
  2148  02C1  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2149  02C2  30F0               	movlw	240
  2150  02C3  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  2151  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2152  02C5  0E18               	swapf	24,w	;volatile
  2153  02C6  390F               	andlw	15
  2154  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2155  02C8  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  2156  02C9  1803               	skipnc
  2157  02CA  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2158                           
  2159                           ;main.c: 305: if (0 == admax)
  2160  02CB  0855               	movf	ADC_Sample@admax,w	;volatile
  2161  02CC  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  2162  02CD  1D03               	btfss	3,2
  2163  02CE  2AD2               	goto	l3707
  2164                           
  2165                           ;main.c: 306: {
  2166                           ;main.c: 307: admax = ad_temp;
  2167  02CF  23FE  118A         	fcall	PL38	;call to abstracted procedure
  2168  02D1  2AE5               	goto	l3713
  2169  02D2                     l3707:	
  2170                           ;main.c: 309: }
  2171                           
  2172                           ;main.c: 308: admin = ad_temp;
  2173                           
  2174                           
  2175                           ;main.c: 310: else if (ad_temp > admax)
  2176  02D2  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2177  02D3  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  2178  02D4  1D03               	skipz
  2179  02D5  2AD8               	goto	u3275
  2180  02D6  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2181  02D7  0255               	subwf	ADC_Sample@admax,w	;volatile
  2182  02D8                     u3275:	
  2183  02D8  1803               	skipnc
  2184  02D9  2ADD               	goto	l3711
  2185                           
  2186                           ;main.c: 311: admax = ad_temp;
  2187  02DA  23FE  118A         	fcall	PL38	;call to abstracted procedure
  2188  02DC  2AE9               	goto	l974
  2189  02DD                     l3711:	
  2190                           
  2191                           ;main.c: 312: else if (ad_temp < admin)
  2192  02DD  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2193  02DE  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2194  02DF  1D03               	skipz
  2195  02E0  2AE3               	goto	u3285
  2196  02E1  0853               	movf	ADC_Sample@admin,w	;volatile
  2197  02E2  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  2198  02E3                     u3285:	
  2199  02E3  1803               	skipnc
  2200  02E4  2AE9               	goto	l974
  2201  02E5                     l3713:	
  2202                           
  2203                           ;main.c: 313: admin = ad_temp;
  2204  02E5  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2205  02E6  00D4               	movwf	ADC_Sample@admin+1	;volatile
  2206  02E7  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2207  02E8  00D3               	movwf	ADC_Sample@admin	;volatile
  2208  02E9                     l974:	
  2209                           
  2210                           ;main.c: 315: adsum += ad_temp;
  2211  02E9  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2212  02EA  00F3               	movwf	??_ADC_Sample
  2213  02EB  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2214  02EC  00F4               	movwf	??_ADC_Sample+1
  2215  02ED  01F5               	clrf	??_ADC_Sample+2
  2216  02EE  01F6               	clrf	??_ADC_Sample+3
  2217  02EF  0873               	movf	??_ADC_Sample,w
  2218  02F0  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  2219  02F1  0874               	movf	??_ADC_Sample+1,w
  2220  02F2  1103               	clrz
  2221  02F3  1803               	skipnc
  2222  02F4  3E01               	addlw	1
  2223  02F5  1D03               	btfss	3,2
  2224  02F6  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  2225  02F7  0875               	movf	??_ADC_Sample+2,w
  2226  02F8  1103               	clrz
  2227  02F9  1803               	skipnc
  2228  02FA  3E01               	addlw	1
  2229  02FB  1D03               	btfss	3,2
  2230  02FC  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  2231  02FD  0876               	movf	??_ADC_Sample+3,w
  2232  02FE  1103               	clrz
  2233  02FF  1803               	skipnc
  2234  0300  3E01               	addlw	1
  2235  0301  1D03               	btfss	3,2
  2236  0302  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  2237  0303  300A               	movlw	10
  2238  0304  0ACE               	incf	ADC_Sample@i,f
  2239  0305  024E               	subwf	ADC_Sample@i,w
  2240  0306  1C03               	skipc
  2241  0307  2A97               	goto	l3689
  2242                           
  2243                           ;main.c: 316: }
  2244                           ;main.c: 317: adsum -= admax;
  2245  0308  0855               	movf	ADC_Sample@admax,w	;volatile
  2246  0309  00F3               	movwf	??_ADC_Sample
  2247  030A  0856               	movf	ADC_Sample@admax+1,w	;volatile
  2248  030B  23CD  118A         	fcall	PL6	;call to abstracted procedure
  2249  030D  1C03               	skipc
  2250  030E  0F76               	incfsz	??_ADC_Sample+3,w
  2251  030F  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2252                           
  2253                           ;main.c: 318: if (adsum >= admin)
  2254  0310  0853               	movf	ADC_Sample@admin,w	;volatile
  2255  0311  00F3               	movwf	??_ADC_Sample
  2256  0312  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2257  0313  00F4               	movwf	??_ADC_Sample+1
  2258  0314  01F5               	clrf	??_ADC_Sample+2
  2259  0315  01F6               	clrf	??_ADC_Sample+3
  2260  0316  0876               	movf	??_ADC_Sample+3,w
  2261  0317  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  2262  0318  1D03               	skipz
  2263  0319  2B24               	goto	u3325
  2264  031A  0875               	movf	??_ADC_Sample+2,w
  2265  031B  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  2266  031C  1D03               	skipz
  2267  031D  2B24               	goto	u3325
  2268  031E  0874               	movf	??_ADC_Sample+1,w
  2269  031F  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  2270  0320  1D03               	skipz
  2271  0321  2B24               	goto	u3325
  2272  0322  0873               	movf	??_ADC_Sample,w
  2273  0323  024F               	subwf	ADC_Sample@adsum,w	;volatile
  2274  0324                     u3325:	
  2275  0324  1C03               	skipc
  2276  0325  2B2F               	goto	l978
  2277                           
  2278                           ;main.c: 319: adsum -= admin;
  2279  0326  0853               	movf	ADC_Sample@admin,w	;volatile
  2280  0327  00F3               	movwf	??_ADC_Sample
  2281  0328  0854               	movf	ADC_Sample@admin+1,w	;volatile
  2282  0329  23CD  118A         	fcall	PL6	;call to abstracted procedure
  2283  032B  1C03               	skipc
  2284  032C  0F76               	incfsz	??_ADC_Sample+3,w
  2285  032D  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  2286  032E  2B33               	goto	l3723
  2287  032F                     l978:	
  2288                           
  2289                           ;main.c: 320: else
  2290                           ;main.c: 321: adsum = 0;
  2291  032F  01CF               	clrf	ADC_Sample@adsum	;volatile
  2292  0330  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2293  0331  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2294  0332  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2295  0333                     l3723:	
  2296                           
  2297                           ;main.c: 323: adresult = adsum >> 3;
  2298  0333  084F               	movf	ADC_Sample@adsum,w	;volatile
  2299  0334  00F3               	movwf	??_ADC_Sample
  2300  0335  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  2301  0336  00F4               	movwf	??_ADC_Sample+1
  2302  0337  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  2303  0338  00F5               	movwf	??_ADC_Sample+2
  2304  0339  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  2305  033A  00F6               	movwf	??_ADC_Sample+3
  2306  033B  3003               	movlw	3
  2307  033C                     u3345:	
  2308  033C  1003               	clrc
  2309  033D  0CF6               	rrf	??_ADC_Sample+3,f
  2310  033E  0CF5               	rrf	??_ADC_Sample+2,f
  2311  033F  0CF4               	rrf	??_ADC_Sample+1,f
  2312  0340  0CF3               	rrf	??_ADC_Sample,f
  2313  0341  3EFF               	addlw	-1
  2314  0342  1D03               	skipz
  2315  0343  2B3C               	goto	u3345
  2316  0344  0874               	movf	??_ADC_Sample+1,w
  2317  0345  00CB               	movwf	_adresult+1	;volatile
  2318  0346  0873               	movf	??_ADC_Sample,w
  2319  0347  00CA               	movwf	_adresult	;volatile
  2320                           
  2321                           ;main.c: 325: adsum = 0;
  2322                           
  2323                           ;main.c: 326: admin = 0;
  2324                           
  2325                           ;main.c: 327: admax = 0;
  2326  0348  23E9               	fcall	PL18	;call to abstracted procedure
  2327                           
  2328                           ;main.c: 328: return 0xA5;
  2329  0349  34A5               	retlw	165
  2330  034A                     __end_of_ADC_Sample:	
  2331  034A                     __ptext5:	
  2332 ;; *************** function _keyLedCtr *****************
  2333 ;; Defined at:
  2334 ;;		line 371 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;		None
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;		None
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, pclath, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 300/0
  2345 ;;		On exit  : 300/100
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2348 ;;      Params:         0       0       0       0
  2349 ;;      Locals:         0       0       0       0
  2350 ;;      Temps:          0       0       0       0
  2351 ;;      Totals:         0       0       0       0
  2352 ;;Total ram usage:        0 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		___lwmod
  2357 ;; This function is called by:
  2358 ;;		_workCtr
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           
  2363                           ;psect for function _keyLedCtr
  2364  034A                     _keyLedCtr:	
  2365                           
  2366                           ;main.c: 373: if(shanshuoTime > 0)
  2367                           
  2368                           ;incstack = 0
  2369                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2370  034A  0832               	movf	_shanshuoTime,w
  2371  034B  0433               	iorwf	_shanshuoTime+1,w
  2372  034C  1903               	btfsc	3,2
  2373  034D  2B67               	goto	l3917
  2374                           
  2375                           ;main.c: 374: {
  2376                           ;main.c: 375: shanshuoTime--;
  2377  034E  3001               	movlw	1
  2378  034F  02B2               	subwf	_shanshuoTime,f
  2379  0350  3000               	movlw	0
  2380  0351  1C03               	skipc
  2381  0352  03B3               	decf	_shanshuoTime+1,f
  2382  0353  02B3               	subwf	_shanshuoTime+1,f
  2383                           
  2384                           ;main.c: 376: if((shanshuoTime % 150) < 75)
  2385  0354  3096               	movlw	150
  2386  0355  00F2               	movwf	___lwmod@divisor
  2387  0356  01F3               	clrf	___lwmod@divisor+1
  2388  0357  0833               	movf	_shanshuoTime+1,w
  2389  0358  00F5               	movwf	___lwmod@dividend+1
  2390  0359  0832               	movf	_shanshuoTime,w
  2391  035A  00F4               	movwf	___lwmod@dividend
  2392  035B  2391  118A         	fcall	___lwmod
  2393  035D  3000               	movlw	0
  2394  035E  0273               	subwf	?___lwmod+1,w
  2395  035F  304B               	movlw	75
  2396  0360  1903               	skipnz
  2397  0361  0272               	subwf	?___lwmod,w
  2398  0362  1803               	skipnc
  2399  0363  2B6A               	goto	l996
  2400  0364                     l3915:	
  2401                           
  2402                           ;main.c: 377: {
  2403                           ;main.c: 378: PORTA |= 0x01;
  2404  0364  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0365  1406               	bsf	6,0	;volatile
  2406                           
  2407                           ;main.c: 379: }
  2408  0366  2B6C               	goto	l3921
  2409  0367                     l3917:	
  2410                           
  2411                           ;main.c: 385: else if(workStep > 0)
  2412  0367  087B               	movf	_workStep,w
  2413  0368  1903               	btfsc	3,2
  2414  0369  2B64               	goto	l3915
  2415  036A                     l996:	
  2416                           
  2417                           ;main.c: 380: else
  2418                           ;main.c: 381: {
  2419                           ;main.c: 382: PORTA &= 0xFE;
  2420  036A  1683               	bsf	3,5	;RP0=1, select bank1
  2421  036B  1006               	bcf	6,0	;volatile
  2422  036C                     l3921:	
  2423                           
  2424                           ;main.c: 392: }
  2425                           ;main.c: 394: if(shanshuoTime2 > 0)
  2426  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2427  036D  0830               	movf	_shanshuoTime2,w
  2428  036E  0431               	iorwf	_shanshuoTime2+1,w
  2429  036F  1903               	btfsc	3,2
  2430  0370  2B8D               	goto	l3929
  2431                           
  2432                           ;main.c: 395: {
  2433                           ;main.c: 396: shanshuoTime2--;
  2434  0371  3001               	movlw	1
  2435  0372  02B0               	subwf	_shanshuoTime2,f
  2436  0373  3000               	movlw	0
  2437  0374  1C03               	skipc
  2438  0375  03B1               	decf	_shanshuoTime2+1,f
  2439  0376  02B1               	subwf	_shanshuoTime2+1,f
  2440                           
  2441                           ;main.c: 397: if((shanshuoTime2 % 150) < 75)
  2442  0377  3096               	movlw	150
  2443  0378  00F2               	movwf	___lwmod@divisor
  2444  0379  01F3               	clrf	___lwmod@divisor+1
  2445  037A  0831               	movf	_shanshuoTime2+1,w
  2446  037B  00F5               	movwf	___lwmod@dividend+1
  2447  037C  0830               	movf	_shanshuoTime2,w
  2448  037D  00F4               	movwf	___lwmod@dividend
  2449  037E  2391  118A         	fcall	___lwmod
  2450  0380  3000               	movlw	0
  2451  0381  0273               	subwf	?___lwmod+1,w
  2452  0382  304B               	movlw	75
  2453  0383  1903               	skipnz
  2454  0384  0272               	subwf	?___lwmod,w
  2455  0385  1803               	skipnc
  2456  0386  2B8A               	goto	l1002
  2457  0387                     l3927:	
  2458                           
  2459                           ;main.c: 398: {
  2460                           ;main.c: 399: PORTA |= 0x10;
  2461  0387  1683               	bsf	3,5	;RP0=1, select bank1
  2462  0388  1606               	bsf	6,4	;volatile
  2463                           
  2464                           ;main.c: 400: }
  2465  0389  0008               	return
  2466  038A                     l1002:	
  2467                           
  2468                           ;main.c: 401: else
  2469                           ;main.c: 402: {
  2470                           ;main.c: 403: PORTA &= 0xEF;
  2471  038A  1683               	bsf	3,5	;RP0=1, select bank1
  2472  038B  1206               	bcf	6,4	;volatile
  2473  038C  0008               	return
  2474  038D                     l3929:	
  2475                           
  2476                           ;main.c: 406: else if(wuhuaFlag > 0)
  2477  038D  0847               	movf	_wuhuaFlag,w
  2478  038E  1D03               	btfss	3,2
  2479  038F  2B8A               	goto	l1002
  2480  0390  2B87               	goto	l3927
  2481  0391                     __end_of_keyLedCtr:	
  2482  0391                     __ptext6:	
  2483 ;; *************** function ___lwmod *****************
  2484 ;; Defined at:
  2485 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  divisor         2    2[COMMON] unsigned int 
  2488 ;;  dividend        2    4[COMMON] unsigned int 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  counter         1    6[COMMON] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2    2[COMMON] unsigned int 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0
  2495 ;; Tracked objects:
  2496 ;;		On entry : 300/0
  2497 ;;		On exit  : 300/0
  2498 ;;		Unchanged: 300/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2500 ;;      Params:         4       0       0       0
  2501 ;;      Locals:         1       0       0       0
  2502 ;;      Temps:          0       0       0       0
  2503 ;;      Totals:         5       0       0       0
  2504 ;;Total ram usage:        5 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_keyLedCtr
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           
  2515                           ;psect for function ___lwmod
  2516  0391                     ___lwmod:	
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2520  0391  0872               	movf	___lwmod@divisor,w
  2521  0392  0473               	iorwf	___lwmod@divisor+1,w
  2522  0393  1903               	btfsc	3,2
  2523  0394  2BB0               	goto	l3819
  2524  0395  01F6               	clrf	___lwmod@counter
  2525  0396                     L1:	
  2526  0396  0AF6               	incf	___lwmod@counter,f
  2527  0397  1BF3               	btfsc	___lwmod@divisor+1,7
  2528  0398  2B9D               	goto	l3811
  2529  0399  1003               	clrc
  2530  039A  0DF2               	rlf	___lwmod@divisor,f
  2531  039B  0DF3               	rlf	___lwmod@divisor+1,f
  2532  039C  2B96               	goto	L1
  2533  039D                     l3811:	
  2534  039D  0873               	movf	___lwmod@divisor+1,w
  2535  039E  0275               	subwf	___lwmod@dividend+1,w
  2536  039F  1D03               	skipz
  2537  03A0  2BA3               	goto	u3485
  2538  03A1  0872               	movf	___lwmod@divisor,w
  2539  03A2  0274               	subwf	___lwmod@dividend,w
  2540  03A3                     u3485:	
  2541  03A3  1C03               	skipc
  2542  03A4  2BAC               	goto	L2
  2543  03A5  0872               	movf	___lwmod@divisor,w
  2544  03A6  02F4               	subwf	___lwmod@dividend,f
  2545  03A7  0873               	movf	___lwmod@divisor+1,w
  2546  03A8  1C03               	skipc
  2547  03A9  03F5               	decf	___lwmod@dividend+1,f
  2548  03AA  02F5               	subwf	___lwmod@dividend+1,f
  2549  03AB  1003               	clrc
  2550  03AC                     L2:	
  2551  03AC  0CF3               	rrf	___lwmod@divisor+1,f
  2552  03AD  0CF2               	rrf	___lwmod@divisor,f
  2553  03AE  0BF6               	decfsz	___lwmod@counter,f
  2554  03AF  2B9D               	goto	l3811
  2555  03B0                     l3819:	
  2556  03B0  0875               	movf	___lwmod@dividend+1,w
  2557  03B1  00F3               	movwf	?___lwmod+1
  2558  03B2  0874               	movf	___lwmod@dividend,w
  2559  03B3  00F2               	movwf	?___lwmod
  2560  03B4  0008               	return
  2561  03B5                     __end_of___lwmod:	
  2562  03B5                     __ptext4:	
  2563 ;; *************** function _pwmInit *****************
  2564 ;; Defined at:
  2565 ;;		line 417 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;		None
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;		None
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 300/0
  2576 ;;		On exit  : 300/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2579 ;;      Params:         0       0       0       0
  2580 ;;      Locals:         0       0       0       0
  2581 ;;      Temps:          0       0       0       0
  2582 ;;      Totals:         0       0       0       0
  2583 ;;Total ram usage:        0 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    1
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_wuhuaCtr
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function _pwmInit
  2595  03B5                     _pwmInit:	
  2596                           
  2597                           ;main.c: 420: PWMTH = 0x00;
  2598                           
  2599                           ;incstack = 0
  2600                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2601  03B5  0198               	clrf	24	;volatile
  2602                           
  2603                           ;main.c: 421: PWMTL = 73;
  2604  03B6  3049               	movlw	73
  2605  03B7  0097               	movwf	23	;volatile
  2606                           
  2607                           ;main.c: 422: PWMD01H = 0x00;
  2608  03B8  019E               	clrf	30	;volatile
  2609                           
  2610                           ;main.c: 423: PWMD0L = 32;
  2611  03B9  3020               	movlw	32
  2612  03BA  0099               	movwf	25	;volatile
  2613                           
  2614                           ;main.c: 424: PWMCON1 = 0x40;
  2615  03BB  3040               	movlw	64
  2616  03BC  0096               	movwf	22	;volatile
  2617                           
  2618                           ;main.c: 425: PWMCON2 = 0x00;
  2619  03BD  019D               	clrf	29	;volatile
  2620                           
  2621                           ;main.c: 426: PWMCON0 |= 0x21;
  2622  03BE  3021               	movlw	33
  2623  03BF  0495               	iorwf	21,f	;volatile
  2624  03C0  0008               	return
  2625  03C1                     __end_of_pwmInit:	
  2626  03C1                     __ptext9:	
  2627 ;; *************** function _fanInit *****************
  2628 ;; Defined at:
  2629 ;;		line 436 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0
  2638 ;; Tracked objects:
  2639 ;;		On entry : 300/0
  2640 ;;		On exit  : 300/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         0       0       0       0
  2644 ;;      Locals:         0       0       0       0
  2645 ;;      Temps:          0       0       0       0
  2646 ;;      Totals:         0       0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    1
  2650 ;; This function calls:
  2651 ;;		Nothing
  2652 ;; This function is called by:
  2653 ;;		_fanCtr
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _fanInit
  2659  03C1                     _fanInit:	
  2660  03C1                     l3751:	
  2661                           ;incstack = 0
  2662                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2663                           
  2664                           
  2665                           ;main.c: 439: PWMTH = 0x00;
  2666  03C1  0198               	clrf	24	;volatile
  2667                           
  2668                           ;main.c: 440: PWMTL = 73;
  2669  03C2  3049               	movlw	73
  2670  03C3  0097               	movwf	23	;volatile
  2671                           
  2672                           ;main.c: 441: PWMD01H = 0x00;
  2673  03C4  019E               	clrf	30	;volatile
  2674                           
  2675                           ;main.c: 442: PWMD1L = fanDuty;
  2676  03C5  0846               	movf	_fanDuty,w
  2677  03C6  009A               	movwf	26	;volatile
  2678                           
  2679                           ;main.c: 443: PWMCON1 = 0x40;
  2680  03C7  3040               	movlw	64
  2681  03C8  0096               	movwf	22	;volatile
  2682                           
  2683                           ;main.c: 444: PWMCON2 = 0x00;
  2684  03C9  019D               	clrf	29	;volatile
  2685                           
  2686                           ;main.c: 445: PWMCON0 |= 0x22;
  2687  03CA  3022               	movlw	34
  2688  03CB  0495               	iorwf	21,f	;volatile
  2689  03CC  0008               	return
  2690  03CD                     __end_of_fanInit:	
  2691  03CD                     PL6:	
  2692  03CD  00F4               	movwf	??_ADC_Sample+1
  2693  03CE  01F5               	clrf	??_ADC_Sample+2
  2694  03CF  01F6               	clrf	??_ADC_Sample+3
  2695  03D0  0873               	movf	??_ADC_Sample,w
  2696  03D1  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  2697  03D2  0874               	movf	??_ADC_Sample+1,w
  2698  03D3  1C03               	skipc
  2699  03D4  0F74               	incfsz	??_ADC_Sample+1,w
  2700  03D5  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  2701  03D6  0875               	movf	??_ADC_Sample+2,w
  2702  03D7  1C03               	skipc
  2703  03D8  0F75               	incfsz	??_ADC_Sample+2,w
  2704  03D9  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  2705  03DA  0876               	movf	??_ADC_Sample+3,w
  2706  03DB  0008               	return
  2707  03DC                     __end_ofPL6:	
  2708  03DC                     PL10:	
  2709  03DC  084A               	movf	_adresult,w	;volatile
  2710  03DD  00CC               	movwf	___lmul@multiplier
  2711  03DE  084B               	movf	_adresult+1,w	;volatile
  2712  03DF  00CD               	movwf	___lmul@multiplier+1
  2713  03E0  01CE               	clrf	___lmul@multiplier+2
  2714  03E1  01CF               	clrf	___lmul@multiplier+3
  2715  03E2  082E               	movf	_power_ad,w	;volatile
  2716  03E3  00D0               	movwf	___lmul@multiplicand
  2717  03E4  082F               	movf	_power_ad+1,w	;volatile
  2718  03E5  00D1               	movwf	___lmul@multiplicand+1
  2719  03E6  01D2               	clrf	___lmul@multiplicand+2
  2720  03E7  01D3               	clrf	___lmul@multiplicand+3
  2721  03E8  0008               	return
  2722  03E9                     __end_ofPL10:	
  2723  03E9                     PL18:	
  2724  03E9  01CF               	clrf	ADC_Sample@adsum	;volatile
  2725  03EA  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  2726  03EB  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  2727  03EC  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  2728  03ED  01D3               	clrf	ADC_Sample@admin	;volatile
  2729  03EE  01D4               	clrf	ADC_Sample@admin+1	;volatile
  2730  03EF  01D5               	clrf	ADC_Sample@admax	;volatile
  2731  03F0  01D6               	clrf	ADC_Sample@admax+1	;volatile
  2732  03F1  0008               	return
  2733  03F2                     __end_ofPL18:	
  2734  03F2                     PL24:	
  2735  03F2  0861               	movf	___fttol@f1,w
  2736  03F3  00E5               	movwf	??___fttol
  2737  03F4  0862               	movf	___fttol@f1+1,w
  2738  03F5  00E6               	movwf	??___fttol+1
  2739  03F6  0863               	movf	___fttol@f1+2,w
  2740  03F7  00E7               	movwf	??___fttol+2
  2741  03F8  0008               	return
  2742  03F9                     __end_ofPL24:	
  2743  03F9                     PL34:	
  2744  03F9  1003               	clrc
  2745  03FA  0CF4               	rrf	___ftpack@arg+2,f
  2746  03FB  0CF3               	rrf	___ftpack@arg+1,f
  2747  03FC  0CF2               	rrf	___ftpack@arg,f
  2748  03FD  0008               	return
  2749  03FE                     __end_ofPL34:	
  2750  03FE                     PL38:	
  2751  03FE  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2752  03FF  00D6               	movwf	ADC_Sample@admax+1	;volatile
  2753  0400  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  2754  0401  00D5               	movwf	ADC_Sample@admax	;volatile
  2755  0402  0008               	return
  2756  0403                     __end_ofPL38:	
  2757  0403                     PL40:	
  2758  0403  01D2               	clrf	?___ftdiv
  2759  0404  01D3               	clrf	?___ftdiv+1
  2760  0405  01D4               	clrf	?___ftdiv+2
  2761  0406  0008               	return
  2762  0407                     __end_ofPL40:	
  2763  0407                     __ptext8:	
  2764 ;; *************** function _fanStop *****************
  2765 ;; Defined at:
  2766 ;;		line 448 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		status,2
  2775 ;; Tracked objects:
  2776 ;;		On entry : 300/100
  2777 ;;		On exit  : 300/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       0       0       0
  2781 ;;      Locals:         0       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         0       0       0       0
  2784 ;;Total ram usage:        0 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_fanCtr
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _fanStop
  2796  0407                     _fanStop:	
  2797                           
  2798                           ;main.c: 450: PWMD1L = 0;
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _fanStop: [status,2]
  2802  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2803  0408  019A               	clrf	26	;volatile
  2804                           
  2805                           ;main.c: 451: PWMCON0 &= 0xFD;
  2806  0409  1095               	bcf	21,1	;volatile
  2807                           
  2808                           ;main.c: 452: PORTB &= 0x7F;
  2809  040A  1386               	bcf	6,7	;volatile
  2810  040B  0008               	return
  2811  040C                     __end_of_fanStop:	
  2812  040C                     __ptext3:	
  2813 ;; *************** function _pwmStop *****************
  2814 ;; Defined at:
  2815 ;;		line 429 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;		None
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;		None
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		status,2
  2824 ;; Tracked objects:
  2825 ;;		On entry : 300/0
  2826 ;;		On exit  : 300/100
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2829 ;;      Params:         0       0       0       0
  2830 ;;      Locals:         0       0       0       0
  2831 ;;      Temps:          0       0       0       0
  2832 ;;      Totals:         0       0       0       0
  2833 ;;Total ram usage:        0 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    1
  2836 ;; This function calls:
  2837 ;;		Nothing
  2838 ;; This function is called by:
  2839 ;;		_wuhuaCtr
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           
  2844                           ;psect for function _pwmStop
  2845  040C                     _pwmStop:	
  2846  040C                     l3745:	
  2847                           ;incstack = 0
  2848                           ; Regs used in _pwmStop: [status,2]
  2849                           
  2850                           
  2851                           ;main.c: 431: PWMD0L = 0;
  2852  040C  0199               	clrf	25	;volatile
  2853                           
  2854                           ;main.c: 432: PWMCON0 &= 0xFE;
  2855  040D  1015               	bcf	21,0	;volatile
  2856                           
  2857                           ;main.c: 433: PORTA &= 0xDF;
  2858  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2859  040F  1286               	bcf	6,5	;volatile
  2860  0410  0008               	return
  2861  0411                     __end_of_pwmStop:	
  2862                           
  2863                           	psect	text16
  2864  0F4E                     __ptext16:	
  2865 ;; *************** function _chrgCtr *****************
  2866 ;; Defined at:
  2867 ;;		line 333 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 200/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2881 ;;      Params:         0       0       0       0
  2882 ;;      Locals:         0       0       0       0
  2883 ;;      Temps:          0       0       0       0
  2884 ;;      Totals:         0       0       0       0
  2885 ;;Total ram usage:        0 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    1
  2888 ;; This function calls:
  2889 ;;		Nothing
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _chrgCtr
  2897  0F4E                     _chrgCtr:	
  2898                           
  2899                           ;main.c: 335: if(PORTB & 0x01)
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2903  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  2904  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  2905  0F50  1C06               	btfss	6,0	;volatile
  2906  0F51  2F71               	goto	l3529
  2907                           
  2908                           ;main.c: 336: {
  2909                           ;main.c: 337: chrgFlag = 1;
  2910  0F52  01C3               	clrf	_chrgFlag
  2911  0F53  0AC3               	incf	_chrgFlag,f
  2912                           
  2913                           ;main.c: 338: firstLock = 0;
  2914  0F54  1683               	bsf	3,5	;RP0=1, select bank1
  2915  0F55  01B8               	clrf	_firstLock^(0+128)
  2916                           
  2917                           ;main.c: 339: lowBatLock = 0;
  2918  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0F57  01C0               	clrf	_lowBatLock
  2920                           
  2921                           ;main.c: 340: if(PORTB & 0x10)
  2922  0F58  1E06               	btfss	6,4	;volatile
  2923  0F59  2F63               	goto	l3523
  2924                           
  2925                           ;main.c: 341: {
  2926                           ;main.c: 342: if(++chrgFullTime > 200)
  2927  0F5A  30C9               	movlw	201
  2928  0F5B  0AC1               	incf	_chrgFullTime,f
  2929  0F5C  0241               	subwf	_chrgFullTime,w
  2930  0F5D  1C03               	skipc
  2931  0F5E  2F64               	goto	l3525
  2932                           
  2933                           ;main.c: 343: {
  2934                           ;main.c: 344: chrgFullTime = 0;
  2935  0F5F  01C1               	clrf	_chrgFullTime
  2936                           
  2937                           ;main.c: 345: chrgFullFlag = 1;
  2938  0F60  01C2               	clrf	_chrgFullFlag
  2939  0F61  0AC2               	incf	_chrgFullFlag,f
  2940  0F62  2F64               	goto	l3525
  2941  0F63                     l3523:	
  2942                           
  2943                           ;main.c: 348: else
  2944                           ;main.c: 349: {
  2945                           ;main.c: 350: chrgFullTime = 0;
  2946  0F63  01C1               	clrf	_chrgFullTime
  2947  0F64                     l3525:	
  2948                           
  2949                           ;main.c: 351: }
  2950                           ;main.c: 352: if(chrgFullFlag || count1s < 125)
  2951  0F64  0842               	movf	_chrgFullFlag,w
  2952  0F65  1D03               	btfss	3,2
  2953  0F66  2F6B               	goto	l988
  2954  0F67  307D               	movlw	125
  2955  0F68  0248               	subwf	_count1s,w
  2956  0F69  1803               	skipnc
  2957  0F6A  2F6E               	goto	l986
  2958  0F6B                     l988:	
  2959                           
  2960                           ;main.c: 353: {
  2961                           ;main.c: 354: RA1 = 0;
  2962  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  2963  0F6C  1086               	bcf	6,1	;volatile
  2964                           
  2965                           ;main.c: 355: }
  2966  0F6D  0008               	return
  2967  0F6E                     l986:	
  2968                           
  2969                           ;main.c: 356: else
  2970                           ;main.c: 357: {
  2971                           ;main.c: 358: RA1 = 1;
  2972  0F6E  1683               	bsf	3,5	;RP0=1, select bank1
  2973  0F6F  1486               	bsf	6,1	;volatile
  2974  0F70  0008               	return
  2975  0F71                     l3529:	
  2976                           
  2977                           ;main.c: 361: else
  2978                           ;main.c: 362: {
  2979                           ;main.c: 363: chrgFlag = 0;
  2980  0F71  01C3               	clrf	_chrgFlag
  2981                           
  2982                           ;main.c: 364: chrgFullTime = 0;
  2983  0F72  01C1               	clrf	_chrgFullTime
  2984                           
  2985                           ;main.c: 365: chrgFullFlag = 0;
  2986  0F73  01C2               	clrf	_chrgFullFlag
  2987                           
  2988                           ;main.c: 366: if(firstTime == 0)
  2989  0F74  086E               	movf	_firstTime,w
  2990  0F75  1D03               	btfss	3,2
  2991  0F76  0008               	return
  2992  0F77  2F6E               	goto	l986
  2993  0F78                     __end_of_chrgCtr:	
  2994                           
  2995                           	psect	text20
  2996  0FB0                     __ptext20:	
  2997 ;; *************** function _KeyServer *****************
  2998 ;; Defined at:
  2999 ;;		line 100 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 300/0
  3010 ;;		On exit  : 300/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3013 ;;      Params:         0       0       0       0
  3014 ;;      Locals:         0       0       0       0
  3015 ;;      Temps:          0       0       0       0
  3016 ;;      Totals:         0       0       0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function _KeyServer
  3029  0FB0                     _KeyServer:	
  3030                           
  3031                           ;main.c: 102: static unsigned char KeyOldFlag = 0;
  3032                           ;main.c: 103: if (KeyFlag[0])
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3036  0FB0  0836               	movf	_KeyFlag,w	;volatile
  3037  0FB1  1903               	btfsc	3,2
  3038  0FB2  2FF9               	goto	l3467
  3039                           
  3040                           ;main.c: 104: {
  3041                           ;main.c: 105: if (KeyFlag[0] != KeyOldFlag)
  3042  0FB3  0836               	movf	_KeyFlag,w	;volatile
  3043  0FB4  063D               	xorwf	KeyServer@KeyOldFlag,w
  3044  0FB5  1903               	skipnz
  3045  0FB6  0008               	return
  3046                           
  3047                           ;main.c: 106: {
  3048                           ;main.c: 108: KeyOldFlag ^= KeyFlag[0];
  3049  0FB7  0836               	movf	_KeyFlag,w	;volatile
  3050  0FB8  06BD               	xorwf	KeyServer@KeyOldFlag,f
  3051                           
  3052                           ;main.c: 109: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3053  0FB9  183D               	btfsc	KeyServer@KeyOldFlag,0
  3054  0FBA  1C36               	btfss	_KeyFlag,0	;volatile
  3055  0FBB  2FD4               	goto	l3443
  3056  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  3057  0FBD  0838               	movf	_firstLock^(0+128),w
  3058  0FBE  1D03               	btfss	3,2
  3059  0FBF  2FD4               	goto	l3443
  3060                           
  3061                           ;main.c: 110: {
  3062                           ;main.c: 112: if(lowBatLock == 1)
  3063  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0FC1  0B40               	decfsz	_lowBatLock,w
  3065  0FC2  2FC6               	goto	l3433
  3066                           
  3067                           ;main.c: 113: {
  3068                           ;main.c: 114: shanshuoTime = 450;
  3069  0FC3  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3070                           
  3071                           ;main.c: 115: }
  3072  0FC5  2FCB               	goto	l3437
  3073  0FC6                     l3433:	
  3074                           
  3075                           ;main.c: 116: else if(++workStep > 2)
  3076  0FC6  3003               	movlw	3
  3077  0FC7  0AFB               	incf	_workStep,f
  3078  0FC8  027B               	subwf	_workStep,w
  3079  0FC9  1803               	btfsc	3,0
  3080                           
  3081                           ;main.c: 117: {
  3082                           ;main.c: 118: workStep = 0;
  3083  0FCA  01FB               	clrf	_workStep
  3084  0FCB                     l3437:	
  3085                           
  3086                           ;main.c: 119: }
  3087                           ;main.c: 120: if(workStep == 2)
  3088  0FCB  3002               	movlw	2
  3089  0FCC  067B               	xorwf	_workStep,w
  3090  0FCD  1D03               	btfss	3,2
  3091  0FCE  2FD2               	goto	l3441
  3092                           
  3093                           ;main.c: 121: {
  3094                           ;main.c: 122: shanshuoTime = 450;
  3095  0FCF  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3096                           
  3097                           ;main.c: 123: }
  3098  0FD1  2FD4               	goto	l3443
  3099  0FD2                     l3441:	
  3100                           
  3101                           ;main.c: 124: else
  3102                           ;main.c: 125: {
  3103                           ;main.c: 126: shanshuoTime = 0;
  3104  0FD2  01B2               	clrf	_shanshuoTime
  3105  0FD3  01B3               	clrf	_shanshuoTime+1
  3106  0FD4                     l3443:	
  3107                           
  3108                           ;main.c: 127: }
  3109                           ;main.c: 128: }
  3110                           ;main.c: 129: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3111  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3112  0FD5  18BD               	btfsc	KeyServer@KeyOldFlag,1
  3113  0FD6  1CB6               	btfss	_KeyFlag,1	;volatile
  3114  0FD7  2FF5               	goto	l3465
  3115  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  3116  0FD9  0838               	movf	_firstLock^(0+128),w
  3117  0FDA  1D03               	btfss	3,2
  3118  0FDB  2FF5               	goto	l3465
  3119                           
  3120                           ;main.c: 130: {
  3121                           ;main.c: 132: if(lowBatLock == 1)
  3122  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0FDD  0B40               	decfsz	_lowBatLock,w
  3124  0FDE  2FE4               	goto	l3453
  3125                           
  3126                           ;main.c: 133: {
  3127                           ;main.c: 134: shanshuoTime2 = 450;
  3128  0FDF  30C2               	movlw	194
  3129  0FE0  00B0               	movwf	_shanshuoTime2
  3130  0FE1  3001               	movlw	1
  3131  0FE2  00B1               	movwf	_shanshuoTime2+1
  3132                           
  3133                           ;main.c: 135: }
  3134  0FE3  2FE9               	goto	l3457
  3135  0FE4                     l3453:	
  3136                           
  3137                           ;main.c: 136: else if(++wuhuaFlag > 2)
  3138  0FE4  3003               	movlw	3
  3139  0FE5  0AC7               	incf	_wuhuaFlag,f
  3140  0FE6  0247               	subwf	_wuhuaFlag,w
  3141  0FE7  1803               	btfsc	3,0
  3142                           
  3143                           ;main.c: 137: {
  3144                           ;main.c: 138: wuhuaFlag = 0;
  3145  0FE8  01C7               	clrf	_wuhuaFlag
  3146  0FE9                     l3457:	
  3147                           
  3148                           ;main.c: 139: }
  3149                           ;main.c: 140: if(wuhuaFlag == 2)
  3150  0FE9  3002               	movlw	2
  3151  0FEA  0647               	xorwf	_wuhuaFlag,w
  3152  0FEB  1D03               	btfss	3,2
  3153  0FEC  2FF3               	goto	l3463
  3154                           
  3155                           ;main.c: 141: {
  3156                           ;main.c: 142: shanshuoTime2 = 450;
  3157  0FED  30C2               	movlw	194
  3158  0FEE  00B0               	movwf	_shanshuoTime2
  3159  0FEF  3001               	movlw	1
  3160  0FF0  00B1               	movwf	_shanshuoTime2+1
  3161                           
  3162                           ;main.c: 143: count10s = 0;
  3163  0FF1  01C5               	clrf	_count10s
  3164                           
  3165                           ;main.c: 144: }
  3166  0FF2  2FF5               	goto	l3465
  3167  0FF3                     l3463:	
  3168                           
  3169                           ;main.c: 145: else
  3170                           ;main.c: 146: {
  3171                           ;main.c: 147: shanshuoTime2 = 0;
  3172  0FF3  01B0               	clrf	_shanshuoTime2
  3173  0FF4  01B1               	clrf	_shanshuoTime2+1
  3174  0FF5                     l3465:	
  3175                           
  3176                           ;main.c: 148: }
  3177                           ;main.c: 149: }
  3178                           ;main.c: 152: KeyOldFlag = KeyFlag[0];
  3179  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3180  0FF6  0836               	movf	_KeyFlag,w	;volatile
  3181  0FF7  00BD               	movwf	KeyServer@KeyOldFlag
  3182  0FF8  0008               	return
  3183  0FF9                     l3467:	
  3184                           
  3185                           ;main.c: 155: else
  3186                           ;main.c: 156: {
  3187                           ;main.c: 157: KeyOldFlag = 0;
  3188  0FF9  01BD               	clrf	KeyServer@KeyOldFlag
  3189  0FFA  0008               	return
  3190  0FFB                     __end_of_KeyServer:	
  3191  0FFB                     PL36:	
  3192  0FFB  30C2               	movlw	194
  3193  0FFC  00B2               	movwf	_shanshuoTime
  3194  0FFD  3001               	movlw	1
  3195  0FFE  00B3               	movwf	_shanshuoTime+1
  3196  0FFF  0008               	return
  3197  1000                     __end_ofPL36:	
  3198                           
  3199                           	psect	text21
  3200  0411                     __ptext21:	
  3201 ;; *************** function _Init_System *****************
  3202 ;; Defined at:
  3203 ;;		line 49 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      void 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2
  3212 ;; Tracked objects:
  3213 ;;		On entry : B00/0
  3214 ;;		On exit  : 300/100
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3217 ;;      Params:         0       0       0       0
  3218 ;;      Locals:         0       0       0       0
  3219 ;;      Temps:          0       0       0       0
  3220 ;;      Totals:         0       0       0       0
  3221 ;;Total ram usage:        0 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    1
  3224 ;; This function calls:
  3225 ;;		Nothing
  3226 ;; This function is called by:
  3227 ;;		_main
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _Init_System
  3233  0411                     _Init_System:	
  3234                           
  3235                           ;incstack = 0
  3236                           ; Regs used in _Init_System: [wreg+status,2]
  3237  0411  0000               	nop	;# 
  3238  0412  0064               	clrwdt	;# 
  3239                           
  3240                           ;main.c: 53: INTCON = 0;
  3241  0413  018B               	clrf	11	;volatile
  3242                           
  3243                           ;main.c: 54: OSCCON = 0X72;
  3244  0414  3072               	movlw	114
  3245  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3246  0416  1303               	bcf	3,6	;RP1=0, select bank0
  3247  0417  0094               	movwf	20	;volatile
  3248                           
  3249                           ;main.c: 55: OPTION_REG = 0;
  3250  0418  0181               	clrf	1	;volatile
  3251                           
  3252                           ;main.c: 60: TRISA = 0x08;
  3253  0419  3008               	movlw	8
  3254  041A  1683               	bsf	3,5	;RP0=1, select bank1
  3255  041B  0085               	movwf	5	;volatile
  3256                           
  3257                           ;main.c: 61: PORTA = 0;
  3258  041C  0186               	clrf	6	;volatile
  3259                           
  3260                           ;main.c: 62: TRISB = 0x31;
  3261  041D  3031               	movlw	49
  3262  041E  1283               	bcf	3,5	;RP0=0, select bank0
  3263  041F  0085               	movwf	5	;volatile
  3264                           
  3265                           ;main.c: 63: PORTB = 0;
  3266  0420  0186               	clrf	6	;volatile
  3267                           
  3268                           ;main.c: 64: WPUB = 0x10;
  3269  0421  3010               	movlw	16
  3270  0422  0088               	movwf	8	;volatile
  3271                           
  3272                           ;main.c: 65: TRISC = 0;
  3273  0423  1703               	bsf	3,6	;RP1=1, select bank2
  3274  0424  0185               	clrf	5	;volatile
  3275                           
  3276                           ;main.c: 66: PORTC = 0;
  3277  0425  0186               	clrf	6	;volatile
  3278                           
  3279                           ;main.c: 68: PIE1 = 2;
  3280  0426  3002               	movlw	2
  3281  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0428  008E               	movwf	14	;volatile
  3283                           
  3284                           ;main.c: 69: PR2 = 250;
  3285  0429  30FA               	movlw	250
  3286  042A  0091               	movwf	17	;volatile
  3287                           
  3288                           ;main.c: 70: T2CON = 4;
  3289  042B  3004               	movlw	4
  3290  042C  0093               	movwf	19	;volatile
  3291                           
  3292                           ;main.c: 72: INTCON = 0XC0;
  3293  042D  30C0               	movlw	192
  3294  042E  008B               	movwf	11	;volatile
  3295                           
  3296                           ;main.c: 73: ADCON0 = 0X41;
  3297                           
  3298                           ;main.c: 74: ADON = 1;
  3299                           
  3300                           ;main.c: 75: ADCON1 = 0x00;
  3301  042F  2FDE               	ljmp	PL26	;call to abstracted procedure
  3302  0430                     __end_of_Init_System:	
  3303  0430                     __ptext17:	
  3304 ;; *************** function _WorkSleep *****************
  3305 ;; Defined at:
  3306 ;;		line 187 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;		None
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;		None
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 300/0
  3317 ;;		On exit  : 300/100
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3320 ;;      Params:         0       0       0       0
  3321 ;;      Locals:         0       0       0       0
  3322 ;;      Temps:          0       0       0       0
  3323 ;;      Totals:         0       0       0       0
  3324 ;;Total ram usage:        0 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    4
  3327 ;; This function calls:
  3328 ;;		_Refurbish_Sfr
  3329 ;;		_SystemEnterSleep
  3330 ;; This function is called by:
  3331 ;;		_main
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _WorkSleep
  3337  0430                     _WorkSleep:	
  3338                           
  3339                           ;main.c: 191: if(B_OnOff)time = 0;
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3343  0430  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3344  0431  2C35               	goto	l4169
  3345  0432  1683               	bsf	3,5	;RP0=1, select bank1
  3346  0433  01AA               	clrf	_time^(0+128)
  3347  0434  01AB               	clrf	(_time+1)^(0+128)
  3348  0435                     l4169:	
  3349                           
  3350                           ;main.c: 193: if(++time >= 2000)
  3351  0435  1683               	bsf	3,5	;RP0=1, select bank1
  3352  0436  0AAA               	incf	_time^(0+128),f
  3353  0437  1903               	skipnz
  3354  0438  0AAB               	incf	(_time+1)^(0+128),f
  3355  0439  3007               	movlw	7
  3356  043A  022B               	subwf	(_time+1)^(0+128),w
  3357  043B  30D0               	movlw	208
  3358  043C  1903               	skipnz
  3359  043D  022A               	subwf	_time^(0+128),w
  3360  043E  1C03               	skipc
  3361  043F  0008               	return
  3362                           
  3363                           ;main.c: 194: {
  3364                           ;main.c: 195: time = 0;
  3365  0440  01AA               	clrf	_time^(0+128)
  3366  0441  01AB               	clrf	(_time+1)^(0+128)
  3367                           
  3368                           ;main.c: 196: INTCON = 0;
  3369  0442  018B               	clrf	11	;volatile
  3370                           
  3371                           ;main.c: 197: PIE1 = 0;
  3372  0443  1283               	bcf	3,5	;RP0=0, select bank0
  3373  0444  018E               	clrf	14	;volatile
  3374                           
  3375                           ;main.c: 198: PIE2 = 0;
  3376  0445  1703               	bsf	3,6	;RP1=1, select bank2
  3377  0446  0190               	clrf	16	;volatile
  3378                           
  3379                           ;main.c: 199: PIR1 = 0;
  3380  0447  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0448  018D               	clrf	13	;volatile
  3382                           
  3383                           ;main.c: 200: PIR2 = 0;
  3384  0449  1703               	bsf	3,6	;RP1=1, select bank2
  3385  044A  018F               	clrf	15	;volatile
  3386                           
  3387                           ;main.c: 201: T2CON = 0;
  3388  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3389  044C  0193               	clrf	19	;volatile
  3390                           
  3391                           ;main.c: 202: ADCON1 = 0;
  3392  044D  1683               	bsf	3,5	;RP0=1, select bank1
  3393  044E  0196               	clrf	22	;volatile
  3394                           
  3395                           ;main.c: 205: ADCON0 = 0;
  3396  044F  0195               	clrf	21	;volatile
  3397                           
  3398                           ;main.c: 208: PORTA = 0x13;
  3399  0450  3013               	movlw	19
  3400  0451  0086               	movwf	6	;volatile
  3401                           
  3402                           ;main.c: 209: PORTB = 0x00;
  3403  0452  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0453  0186               	clrf	6	;volatile
  3405                           
  3406                           ;main.c: 210: TRISC = 0;
  3407  0454  1703               	bsf	3,6	;RP1=1, select bank2
  3408  0455  0185               	clrf	5	;volatile
  3409                           
  3410                           ;main.c: 211: PORTC = 0;
  3411  0456  0186               	clrf	6	;volatile
  3412                           
  3413                           ;main.c: 213: TRISB0 =1;
  3414  0457  1303               	bcf	3,6	;RP1=0, select bank0
  3415  0458  1405               	bsf	5,0	;volatile
  3416                           
  3417                           ;main.c: 215: RBIF = 0;
  3418  0459  100B               	bcf	11,0	;volatile
  3419                           
  3420                           ;main.c: 216: RBIE = 1;
  3421  045A  158B               	bsf	11,3	;volatile
  3422                           
  3423                           ;main.c: 217: IOCB0= 1;
  3424  045B  1409               	bsf	9,0	;volatile
  3425                           
  3426                           ;main.c: 218: PORTB;
  3427  045C  0806               	movf	6,w	;volatile
  3428                           
  3429                           ;main.c: 230: SystemEnterSleep();
  3430  045D  2494  118A         	fcall	_SystemEnterSleep
  3431                           
  3432                           ;main.c: 231: if(RAIF)
  3433  045F  1D8D               	btfss	13,3	;volatile
  3434  0460  2C64               	goto	l4197
  3435                           
  3436                           ;main.c: 232: {
  3437                           ;main.c: 233: RAIF = 0;
  3438  0461  118D               	bcf	13,3	;volatile
  3439                           
  3440                           ;main.c: 234: PORTA;
  3441  0462  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0463  0806               	movf	6,w	;volatile
  3443  0464                     l4197:	
  3444                           
  3445                           ;main.c: 235: }
  3446                           ;main.c: 237: Refurbish_Sfr();
  3447  0464  277E  118A         	fcall	_Refurbish_Sfr
  3448                           
  3449                           ;main.c: 238: ADCON0 = 0X41;
  3450                           
  3451                           ;main.c: 239: ADON = 1;
  3452                           
  3453                           ;main.c: 240: ADCON1 = 0x00;
  3454  0466  2FDE               	ljmp	PL26	;call to abstracted procedure
  3455  0467                     __end_of_WorkSleep:	
  3456  0467                     __ptext22:	
  3457 ;; *************** function _CheckTouchKey *****************
  3458 ;; Defined at:
  3459 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;		None
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3473 ;;      Params:         0       0       0       0
  3474 ;;      Locals:         0       0       0       0
  3475 ;;      Temps:          0       0       0       0
  3476 ;;      Totals:         0       0       0       0
  3477 ;;Total ram usage:        0 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    5
  3480 ;; This function calls:
  3481 ;;		_CheckKeyOldValue
  3482 ;;		_CheckOnceResult
  3483 ;;		_CheckValidTime
  3484 ;;		_ClearResSum
  3485 ;;		_GetTouchKeyValue
  3486 ;;		_KeyStopClear
  3487 ;;		_TurnKeyFlags
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           
  3494                           ;psect for function _CheckTouchKey
  3495  0467                     _CheckTouchKey:	
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3499  0467  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3500  0468  2C75               	goto	l1268
  3501  0469  2524  118A         	fcall	_GetTouchKeyValue
  3502  046B  3008               	movlw	8
  3503  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3504  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3505  046E  0ABC               	incf	_KeyCounter,f
  3506  046F  023C               	subwf	_KeyCounter,w
  3507  0470  1C03               	skipc
  3508  0471  2C93               	goto	l4279
  3509  0472  01BC               	clrf	_KeyCounter
  3510  0473  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3511  0474  2C93               	goto	l4279
  3512  0475                     l1268:	
  3513  0475  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3514  0476  2C8D               	goto	l4273
  3515  0477  2593  118A         	fcall	_CheckOnceResult
  3516  0479  2725  118A         	fcall	_TurnKeyFlags
  3517  047B  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3518  047C  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3519  047D  2C84               	goto	l4263
  3520  047E  3003               	movlw	3
  3521  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3522  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3523  0481  023C               	subwf	_KeyCounter,w
  3524  0482  1C03               	skipc
  3525  0483  2C89               	goto	l4271
  3526  0484                     l4263:	
  3527  0484  270F  118A         	fcall	_KeyStopClear
  3528  0486  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3529  0487  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3530  0488  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3531  0489                     l4271:	
  3532  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3533  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3534  048B  01BC               	clrf	_KeyCounter
  3535  048C  2C93               	goto	l4279
  3536  048D                     l4273:	
  3537  048D  26AB  118A         	fcall	_CheckKeyOldValue
  3538  048F  2584  118A         	fcall	_ClearResSum
  3539  0491  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3540  0492  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3541  0493                     l4279:	
  3542  0493  2F58               	ljmp	l3293	;# 
  3543  0494                     __end_of_CheckTouchKey:	
  3544  0494                     __ptext18:	
  3545 ;; *************** function _SystemEnterSleep *****************
  3546 ;; Defined at:
  3547 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  92              2    6[BANK0 ] unsigned int 
  3552 ;;  93              2    4[BANK0 ] unsigned int 
  3553 ;;  94              2    2[BANK0 ] unsigned int 
  3554 ;;  91              1    8[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 300/0
  3561 ;;		On exit  : 300/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3564 ;;      Params:         0       0       0       0
  3565 ;;      Locals:         0       7       0       0
  3566 ;;      Temps:          0       2       0       0
  3567 ;;      Totals:         0       9       0       0
  3568 ;;Total ram usage:        9 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    3
  3571 ;; This function calls:
  3572 ;;		_ClearResSum
  3573 ;;		_GetTouchKeyValue
  3574 ;;		_KeyClearOne
  3575 ;; This function is called by:
  3576 ;;		_WorkSleep
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           
  3581                           ;psect for function _SystemEnterSleep
  3582  0494                     _SystemEnterSleep:	
  3583  0494                     l1280:	
  3584                           ;incstack = 0
  3585                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3586                           
  3587  0494  0064               	clrwdt	;# 
  3588  0495  1683               	bsf	3,5	;RP0=1, select bank1
  3589  0496  1303               	bcf	3,6	;RP1=0, select bank1
  3590  0497  0181               	clrf	1	;volatile
  3591  0498  3007               	movlw	7
  3592  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3593  049A  0481               	iorwf	1,f	;volatile
  3594  049B  1581               	bsf	1,3	;volatile
  3595  049C  0064               	clrwdt	;# 
  3596  049D  300A               	movlw	10
  3597  049E  1283               	bcf	3,5	;RP0=0, select bank0
  3598  049F  1303               	bcf	3,6	;RP1=0, select bank0
  3599  04A0  0081               	movwf	1	;volatile
  3600  04A1  0064               	clrwdt	;# 
  3601  04A2  1283               	bcf	3,5	;RP0=0, select bank2
  3602  04A3  1703               	bsf	3,6	;RP1=1, select bank2
  3603  04A4  0191               	clrf	17	;volatile
  3604  04A5  0193               	clrf	19	;volatile
  3605  04A6  3002               	movlw	2
  3606  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  3607  04A8  0094               	movwf	20	;volatile
  3608  04A9  0063               	sleep	;# 
  3609  04AA  0000               	nop	;# 
  3610  04AB  0064               	clrwdt	;# 
  3611  04AC  3072               	movlw	114
  3612  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3613  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3614  04AF  0094               	movwf	20	;volatile
  3615  04B0  3079               	movlw	121
  3616  04B1  1703               	bsf	3,6	;RP1=1, select bank2
  3617  04B2  0093               	movwf	19	;volatile
  3618  04B3  2584  118A         	fcall	_ClearResSum
  3619  04B5  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3620  04B6  2524  118A         	fcall	_GetTouchKeyValue
  3621  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  3622  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  3623  04BA  27EA  118A         	fcall	PL30	;call to abstracted procedure
  3624  04BC  1C0B               	btfss	11,0	;volatile
  3625  04BD  188B               	btfsc	11,1	;volatile
  3626  04BE  2CC1               	goto	l3859
  3627  04BF  1D8D               	btfss	13,3	;volatile
  3628  04C0  2CC8               	goto	l3871
  3629  04C1                     l3859:	
  3630  04C1  2584               	fcall	_ClearResSum
  3631  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  3632  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  3633  04C4  01BC               	clrf	_KeyCounter
  3634  04C5  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3635  04C6  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3636  04C7  0008               	return
  3637  04C8                     l3871:	
  3638  04C8  0852               	movf	SystemEnterSleep@92,w
  3639  04C9  3903               	andlw	3
  3640  04CA  1003               	clrc
  3641  04CB  1903               	btfsc	3,2
  3642  04CC  2D1E               	goto	L7
  3643  04CD  0D54               	rlf	SystemEnterSleep@91,w
  3644  04CE  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3645  04CF  0084               	movwf	4
  3646  04D0  1383               	bcf	3,7	;select IRP bank0
  3647  04D1  0800               	movf	0,w
  3648  04D2  00D0               	movwf	SystemEnterSleep@93
  3649  04D3  0A84               	incf	4,f
  3650  04D4  0800               	movf	0,w
  3651  04D5  00D1               	movwf	SystemEnterSleep@93+1
  3652  04D6  00CF               	movwf	SystemEnterSleep@94+1
  3653  04D7  0850               	movf	SystemEnterSleep@93,w
  3654  04D8  00CE               	movwf	SystemEnterSleep@94
  3655  04D9  0850               	movf	SystemEnterSleep@93,w
  3656  04DA  0451               	iorwf	SystemEnterSleep@93+1,w
  3657  04DB  1903               	btfsc	3,2
  3658  04DC  2D1D               	goto	l3905
  3659  04DD  0854               	movf	SystemEnterSleep@91,w
  3660  04DE  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3661  04DF  0084               	movwf	4
  3662  04E0  158A  2000  118A   	fcall	stringdir
  3663  04E3  07CE               	addwf	SystemEnterSleep@94,f
  3664  04E4  1803               	skipnc
  3665  04E5  0ACF               	incf	SystemEnterSleep@94+1,f
  3666  04E6  1003               	clrc
  3667  04E7  0D54               	rlf	SystemEnterSleep@91,w
  3668  04E8  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3669  04E9  27C9  118A         	fcall	PL16	;call to abstracted procedure
  3670  04EB  084F               	movf	SystemEnterSleep@94+1,w
  3671  04EC  024D               	subwf	??_SystemEnterSleep+1,w
  3672  04ED  1D03               	skipz
  3673  04EE  2CF1               	goto	u3555
  3674  04EF  084E               	movf	SystemEnterSleep@94,w
  3675  04F0  024C               	subwf	??_SystemEnterSleep,w
  3676  04F1                     u3555:	
  3677  04F1  1C03               	skipc
  3678  04F2  2D05               	goto	L6
  3679  04F3  27EA  118A         	fcall	PL30	;call to abstracted procedure
  3680  04F5                     l3885:	
  3681  04F5  0852               	movf	SystemEnterSleep@92,w
  3682  04F6  3903               	andlw	3
  3683  04F7  1D03               	btfss	3,2
  3684  04F8  2CFC               	goto	l3889
  3685  04F9  0854               	movf	SystemEnterSleep@91,w
  3686  04FA  2688  118A         	fcall	_KeyClearOne
  3687  04FC                     l3889:	
  3688  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  3689  04FD  3002               	movlw	2
  3690  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  3691  04FF  1003               	clrc
  3692  0500  27EF  118A         	fcall	PL32	;call to abstracted procedure
  3693  0502  1803               	btfsc	3,0
  3694  0503  2CC1               	goto	l3859
  3695  0504  2CF5               	goto	l3885
  3696  0505                     L6:	
  3697  0505  0D54               	rlf	SystemEnterSleep@91,w
  3698  0506  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3699  0507  27C9  118A         	fcall	PL16	;call to abstracted procedure
  3700  0509  1003               	clrc
  3701  050A  0D54               	rlf	SystemEnterSleep@91,w
  3702  050B  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3703  050C  27BE  118A         	fcall	PL14	;call to abstracted procedure
  3704  050E  0800               	movf	0,w
  3705  050F  00CC               	movwf	??_SystemEnterSleep
  3706  0510  0A84               	incf	4,f
  3707  0511  0800               	movf	0,w
  3708  0512  00CD               	movwf	??_SystemEnterSleep+1
  3709  0513  1003               	clrc
  3710  0514  0D54               	rlf	SystemEnterSleep@91,w
  3711  0515  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3712  0516  27BE  118A         	fcall	PL14	;call to abstracted procedure
  3713  0518  0850               	movf	SystemEnterSleep@93,w
  3714  0519  0080               	movwf	0
  3715  051A  0A84               	incf	4,f
  3716  051B  0851               	movf	SystemEnterSleep@93+1,w
  3717  051C  0080               	movwf	0
  3718  051D                     l3905:	
  3719  051D  1003               	clrc
  3720  051E                     L7:	
  3721  051E  3002               	movlw	2
  3722  051F  27EF  118A         	fcall	PL32	;call to abstracted procedure
  3723  0521  1803               	btfsc	3,0
  3724  0522  2C94               	goto	l1280
  3725  0523  2CC8               	goto	l3871
  3726  0524                     __end_of_SystemEnterSleep:	
  3727  0524                     __ptext26:	
  3728 ;; *************** function _GetTouchKeyValue *****************
  3729 ;; Defined at:
  3730 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  63              2    5[COMMON] unsigned int 
  3735 ;;  64              2    3[COMMON] unsigned int 
  3736 ;;  62              1    7[COMMON] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/200
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3746 ;;      Params:         0       0       0       0
  3747 ;;      Locals:         5       0       0       0
  3748 ;;      Temps:          0       0       0       0
  3749 ;;      Totals:         5       0       0       0
  3750 ;;Total ram usage:        5 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    2
  3753 ;; This function calls:
  3754 ;;		_ClearResSum
  3755 ;; This function is called by:
  3756 ;;		_CheckTouchKey
  3757 ;;		_SystemEnterSleep
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _GetTouchKeyValue
  3763  0524                     _GetTouchKeyValue:	
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3767  0524  01F7               	clrf	GetTouchKeyValue@62
  3768  0525  01F5               	clrf	GetTouchKeyValue@63
  3769  0526  0AF5               	incf	GetTouchKeyValue@63,f
  3770  0527  01F6               	clrf	GetTouchKeyValue@63+1
  3771  0528                     l2841:	
  3772  0528  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3773  0529  2D2E               	goto	l2845
  3774  052A  0875               	movf	GetTouchKeyValue@63,w
  3775  052B  3903               	andlw	3
  3776  052C  1903               	btfsc	3,2
  3777  052D  2D7A               	goto	l2873
  3778  052E                     l2845:	
  3779  052E  1283               	bcf	3,5	;RP0=0, select bank2
  3780  052F  1703               	bsf	3,6	;RP1=1, select bank2
  3781  0530  0191               	clrf	17	;volatile
  3782  0531  0192               	clrf	18	;volatile
  3783  0532  3079               	movlw	121
  3784  0533  0093               	movwf	19	;volatile
  3785  0534  1303               	bcf	3,6	;RP1=0, select bank0
  3786  0535  1305               	bcf	5,6	;volatile
  3787  0536  1306               	bcf	6,6	;volatile
  3788  0537  0000               	nop	;# 
  3789  0538  0000               	nop	;# 
  3790  0539  0000               	nop	;# 
  3791  053A  0000               	nop	;# 
  3792  053B  0000               	nop	;# 
  3793  053C  0000               	nop	;# 
  3794  053D  0000               	nop	;# 
  3795  053E  0000               	nop	;# 
  3796  053F  1283               	bcf	3,5	;RP0=0, select bank0
  3797  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3798  0541  1705               	bsf	5,6	;volatile
  3799  0542  0877               	movf	GetTouchKeyValue@62,w
  3800  0543  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3801  0544  0084               	movwf	4
  3802  0545  158A  2000  118A   	fcall	stringdir
  3803  0548  1703               	bsf	3,6	;RP1=1, select bank2
  3804  0549  0091               	movwf	17	;volatile
  3805  054A  0877               	movf	GetTouchKeyValue@62,w
  3806  054B  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3807  054C  0084               	movwf	4
  3808  054D  158A  2000  118A   	fcall	stringdir
  3809  0550  0092               	movwf	18	;volatile
  3810  0551  0000               	nop	;# 
  3811  0552  0000               	nop	;# 
  3812  0553  0000               	nop	;# 
  3813  0554  0000               	nop	;# 
  3814  0555  1283               	bcf	3,5	;RP0=0, select bank2
  3815  0556  1703               	bsf	3,6	;RP1=1, select bank2
  3816  0557  1411               	bsf	17,0	;volatile
  3817  0558  30D0               	movlw	208
  3818  0559  00F3               	movwf	GetTouchKeyValue@64
  3819  055A  3007               	movlw	7
  3820  055B  00F4               	movwf	GetTouchKeyValue@64+1
  3821  055C                     l1190:	
  3822  055C  1B91               	btfsc	17,7	;volatile
  3823  055D  2D6A               	goto	l2871
  3824  055E  3001               	movlw	1
  3825  055F  02F3               	subwf	GetTouchKeyValue@64,f
  3826  0560  1C03               	skipc
  3827  0561  03F4               	decf	GetTouchKeyValue@64+1,f
  3828  0562  0873               	movf	GetTouchKeyValue@64,w
  3829  0563  0474               	iorwf	GetTouchKeyValue@64+1,w
  3830  0564  1D03               	btfss	3,2
  3831  0565  2D5C               	goto	l1190
  3832  0566  30FF               	movlw	255
  3833  0567  1303               	bcf	3,6	;RP1=0, select bank0
  3834  0568  00BC               	movwf	_KeyCounter
  3835  0569  2D84               	ljmp	l2691
  3836  056A                     l2871:	
  3837  056A  1003               	clrc
  3838  056B  0D77               	rlf	GetTouchKeyValue@62,w
  3839  056C  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3840  056D  0084               	movwf	4
  3841  056E  0816               	movf	22,w	;volatile
  3842  056F  1383               	bcf	3,7	;select IRP bank0
  3843  0570  0780               	addwf	0,f
  3844  0571  0F84               	incfsz	4,f
  3845  0572  0800               	movf	0,w
  3846  0573  1803               	skipnc
  3847  0574  0A00               	incf	0,w
  3848  0575  00FF               	movwf	127
  3849  0576  0817               	movf	23,w	;volatile
  3850  0577  077F               	addwf	127,w
  3851  0578  0080               	movwf	0
  3852  0579  0384               	decf	4,f
  3853  057A                     l2873:	
  3854  057A  3002               	movlw	2
  3855  057B  1003               	clrc
  3856  057C  0DF5               	rlf	GetTouchKeyValue@63,f
  3857  057D  0DF6               	rlf	GetTouchKeyValue@63+1,f
  3858  057E  0AF7               	incf	GetTouchKeyValue@62,f
  3859  057F  0277               	subwf	GetTouchKeyValue@62,w
  3860  0580  1C03               	skipc
  3861  0581  2D28               	goto	l2841
  3862  0582  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  3863  0583  0008               	return
  3864  0584                     __end_of_GetTouchKeyValue:	
  3865  0584                     __ptext27:	
  3866 ;; *************** function _ClearResSum *****************
  3867 ;; Defined at:
  3868 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;  56              1    2[COMMON] unsigned char 
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/200
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3882 ;;      Params:         0       0       0       0
  3883 ;;      Locals:         1       0       0       0
  3884 ;;      Temps:          0       0       0       0
  3885 ;;      Totals:         1       0       0       0
  3886 ;;Total ram usage:        1 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    1
  3889 ;; This function calls:
  3890 ;;		Nothing
  3891 ;; This function is called by:
  3892 ;;		_GetTouchKeyValue
  3893 ;;		_CheckTouchKey
  3894 ;;		_SystemEnterSleep
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _ClearResSum
  3900  0584                     _ClearResSum:	
  3901  0584                     l2691:	
  3902                           ;incstack = 0
  3903                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3904                           
  3905  0584  01F2               	clrf	ClearResSum@56
  3906  0585                     l2693:	
  3907  0585  1003               	clrc
  3908  0586  0D72               	rlf	ClearResSum@56,w
  3909  0587  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3910  0588  0084               	movwf	4
  3911  0589  3002               	movlw	2
  3912  058A  1383               	bcf	3,7	;select IRP bank0
  3913  058B  0180               	clrf	0
  3914  058C  0A84               	incf	4,f
  3915  058D  0180               	clrf	0
  3916  058E  0AF2               	incf	ClearResSum@56,f
  3917  058F  0272               	subwf	ClearResSum@56,w
  3918  0590  1803               	btfsc	3,0
  3919  0591  0008               	return
  3920  0592  2D85               	goto	l2693
  3921  0593                     __end_of_ClearResSum:	
  3922  0593                     __ptext29:	
  3923 ;; *************** function _CheckOnceResult *****************
  3924 ;; Defined at:
  3925 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  71              2   10[BANK0 ] unsigned int 
  3930 ;;  72              2    7[BANK0 ] unsigned int 
  3931 ;;  73              2    4[BANK0 ] unsigned int 
  3932 ;;  68              1   12[BANK0 ] unsigned char 
  3933 ;;  69              1    9[BANK0 ] unsigned char 
  3934 ;;  70              1    6[BANK0 ] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3944 ;;      Params:         0       0       0       0
  3945 ;;      Locals:         0       9       0       0
  3946 ;;      Temps:          0       4       0       0
  3947 ;;      Totals:         0      13       0       0
  3948 ;;Total ram usage:       13 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    3
  3951 ;; This function calls:
  3952 ;;		_KeyClearOne
  3953 ;;		_KeyHave
  3954 ;;		_KeyIsIn
  3955 ;; This function is called by:
  3956 ;;		_CheckTouchKey
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _CheckOnceResult
  3962  0593                     _CheckOnceResult:	
  3963                           
  3964                           ;incstack = 0
  3965                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3966  0593  1283               	bcf	3,5	;RP0=0, select bank0
  3967  0594  1303               	bcf	3,6	;RP1=0, select bank0
  3968  0595  01D8               	clrf	CheckOnceResult@68
  3969  0596  01F9               	clrf	_KeyData	;volatile
  3970  0597  01FA               	clrf	_KeyData+1	;volatile
  3971  0598  01BB               	clrf	_KeyMaxSub
  3972  0599                     l4015:	
  3973  0599  0858               	movf	CheckOnceResult@68,w
  3974  059A  3907               	andlw	7
  3975  059B  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3976  059C  0084               	movwf	4
  3977  059D  158A  2000  118A   	fcall	stringdir
  3978  05A0  00D2               	movwf	CheckOnceResult@70
  3979  05A1  1003               	clrc
  3980  05A2  0D58               	rlf	CheckOnceResult@68,w
  3981  05A3  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3982  05A4  0084               	movwf	4
  3983  05A5  3003               	movlw	3
  3984  05A6                     u3835:	
  3985  05A6  0A84               	incf	4,f
  3986  05A7  1003               	clrc
  3987  05A8  1383               	bcf	3,7	;select IRP bank0
  3988  05A9  0C80               	rrf	0,f
  3989  05AA  0384               	decf	4,f
  3990  05AB  0C80               	rrf	0,f
  3991  05AC  3EFF               	addlw	-1
  3992  05AD  1D03               	skipz
  3993  05AE  2DA6               	goto	u3835
  3994  05AF  1003               	clrc
  3995  05B0  0D58               	rlf	CheckOnceResult@68,w
  3996  05B1  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3997  05B2  0084               	movwf	4
  3998  05B3  0800               	movf	0,w
  3999  05B4  00D6               	movwf	CheckOnceResult@71
  4000  05B5  0A84               	incf	4,f
  4001  05B6  0800               	movf	0,w
  4002  05B7  00D7               	movwf	CheckOnceResult@71+1
  4003  05B8  0858               	movf	CheckOnceResult@68,w
  4004  05B9  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  4005  05BA  0084               	movwf	4
  4006  05BB  158A  2000  118A   	fcall	stringdir
  4007  05BE  00D5               	movwf	CheckOnceResult@69
  4008  05BF  00D3               	movwf	CheckOnceResult@72
  4009  05C0  01D4               	clrf	CheckOnceResult@72+1
  4010  05C1  0856               	movf	CheckOnceResult@71,w
  4011  05C2  07D3               	addwf	CheckOnceResult@72,f
  4012  05C3  1803               	skipnc
  4013  05C4  0AD4               	incf	CheckOnceResult@72+1,f
  4014  05C5  0857               	movf	CheckOnceResult@71+1,w
  4015  05C6  07D4               	addwf	CheckOnceResult@72+1,f
  4016  05C7  0858               	movf	CheckOnceResult@68,w
  4017  05C8  2674  118A         	fcall	_KeyIsIn
  4018  05CA  3A00               	xorlw	0
  4019  05CB  1003               	clrc
  4020  05CC  1D03               	skipz
  4021  05CD  2E28               	goto	L10
  4022  05CE  0D58               	rlf	CheckOnceResult@68,w
  4023  05CF  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4024  05D0  0084               	movwf	4
  4025  05D1  1383               	bcf	3,7	;select IRP bank0
  4026  05D2  0800               	movf	0,w
  4027  05D3  00D0               	movwf	CheckOnceResult@73
  4028  05D4  0A84               	incf	4,f
  4029  05D5  0800               	movf	0,w
  4030  05D6  00D1               	movwf	CheckOnceResult@73+1
  4031  05D7  1003               	clrc
  4032  05D8  0D58               	rlf	CheckOnceResult@68,w
  4033  05D9  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4034  05DA  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4035  05DC  0254               	subwf	CheckOnceResult@72+1,w
  4036  05DD  1D03               	skipz
  4037  05DE  2DE1               	goto	u3855
  4038  05DF  084C               	movf	??_CheckOnceResult,w
  4039  05E0  0253               	subwf	CheckOnceResult@72,w
  4040  05E1                     u3855:	
  4041  05E1  1803               	skipnc
  4042  05E2  2DF0               	goto	l4033
  4043  05E3  1003               	clrc
  4044  05E4  0D58               	rlf	CheckOnceResult@68,w
  4045  05E5  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4046  05E6  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4047  05E8  0856               	movf	CheckOnceResult@71,w
  4048  05E9  024C               	subwf	??_CheckOnceResult,w
  4049  05EA  00D6               	movwf	CheckOnceResult@71
  4050  05EB  0857               	movf	CheckOnceResult@71+1,w
  4051  05EC  1C03               	skipc
  4052  05ED  0A57               	incf	CheckOnceResult@71+1,w
  4053  05EE  024D               	subwf	??_CheckOnceResult+1,w
  4054  05EF  2E14               	goto	L8
  4055  05F0                     l4033:	
  4056  05F0  0851               	movf	CheckOnceResult@73+1,w
  4057  05F1  0254               	subwf	CheckOnceResult@72+1,w
  4058  05F2  1D03               	skipz
  4059  05F3  2DF6               	goto	u3865
  4060  05F4  0850               	movf	CheckOnceResult@73,w
  4061  05F5  0253               	subwf	CheckOnceResult@72,w
  4062  05F6                     u3865:	
  4063  05F6  1803               	skipnc
  4064  05F7  2E6C               	goto	l4079
  4065  05F8  1003               	clrc
  4066  05F9  0D58               	rlf	CheckOnceResult@68,w
  4067  05FA  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4068  05FB  27AC  118A         	fcall	PL8	;call to abstracted procedure
  4069  05FD  0254               	subwf	CheckOnceResult@72+1,w
  4070  05FE  1D03               	skipz
  4071  05FF  2E02               	goto	u3875
  4072  0600  084C               	movf	??_CheckOnceResult,w
  4073  0601  0253               	subwf	CheckOnceResult@72,w
  4074  0602                     u3875:	
  4075  0602  1803               	skipnc
  4076  0603  2E6C               	goto	l4079
  4077  0604  1003               	clrc
  4078  0605  0D58               	rlf	CheckOnceResult@68,w
  4079  0606  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4080  0607  0084               	movwf	4
  4081  0608  0850               	movf	CheckOnceResult@73,w
  4082  0609  0080               	movwf	0
  4083  060A  0A84               	incf	4,f
  4084  060B  0851               	movf	CheckOnceResult@73+1,w
  4085  060C  0080               	movwf	0
  4086  060D  0856               	movf	CheckOnceResult@71,w
  4087  060E  0250               	subwf	CheckOnceResult@73,w
  4088  060F  00D6               	movwf	CheckOnceResult@71
  4089  0610  0857               	movf	CheckOnceResult@71+1,w
  4090  0611  1C03               	skipc
  4091  0612  0A57               	incf	CheckOnceResult@71+1,w
  4092  0613  0251               	subwf	CheckOnceResult@73+1,w
  4093  0614                     L8:	
  4094  0614  00D7               	movwf	CheckOnceResult@71+1
  4095  0615  0858               	movf	CheckOnceResult@68,w
  4096  0616  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4097  0617  0084               	movwf	4
  4098  0618  0180               	clrf	0
  4099  0619  0857               	movf	CheckOnceResult@71+1,w
  4100  061A  1903               	btfsc	3,2
  4101  061B  2E1E               	goto	l4047
  4102  061C  30FF               	movlw	255
  4103  061D  2E1F               	goto	L9
  4104  061E                     l4047:	
  4105  061E  0856               	movf	CheckOnceResult@71,w
  4106  061F                     L9:	
  4107  061F  00D5               	movwf	CheckOnceResult@69
  4108  0620  023B               	subwf	_KeyMaxSub,w
  4109  0621  1803               	skipnc
  4110  0622  2E26               	goto	l4053
  4111  0623  0855               	movf	CheckOnceResult@69,w
  4112  0624  00BB               	movwf	_KeyMaxSub
  4113  0625  2E66               	goto	l4077
  4114  0626                     l4053:	
  4115  0626  0ABC               	incf	_KeyCounter,f
  4116  0627  2E6C               	goto	l4079
  4117  0628                     L10:	
  4118  0628  0D58               	rlf	CheckOnceResult@68,w
  4119  0629  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4120  062A  0084               	movwf	4
  4121  062B  1383               	bcf	3,7	;select IRP bank1
  4122  062C  0800               	movf	0,w
  4123  062D  00CC               	movwf	??_CheckOnceResult
  4124  062E  0A84               	incf	4,f
  4125  062F  0800               	movf	0,w
  4126  0630  00CD               	movwf	??_CheckOnceResult+1
  4127  0631  084C               	movf	??_CheckOnceResult,w
  4128  0632  3E01               	addlw	1
  4129  0633  00CE               	movwf	??_CheckOnceResult+2
  4130  0634  084D               	movf	??_CheckOnceResult+1,w
  4131  0635  1803               	skipnc
  4132  0636  3E01               	addlw	1
  4133  0637  00CF               	movwf	??_CheckOnceResult+3
  4134  0638  0854               	movf	CheckOnceResult@72+1,w
  4135  0639  024F               	subwf	??_CheckOnceResult+3,w
  4136  063A  1D03               	skipz
  4137  063B  2E3E               	goto	u3905
  4138  063C  0853               	movf	CheckOnceResult@72,w
  4139  063D  024E               	subwf	??_CheckOnceResult+2,w
  4140  063E                     u3905:	
  4141  063E  1C03               	btfss	3,0
  4142  063F  2E6C               	goto	l4079
  4143  0640  1003               	clrc
  4144  0641  0D58               	rlf	CheckOnceResult@68,w
  4145  0642  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4146  0643  0084               	movwf	4
  4147  0644  0800               	movf	0,w
  4148  0645  279A  118A         	fcall	PL4	;call to abstracted procedure
  4149  0647  1C03               	skipc
  4150  0648  2E52               	goto	l4067
  4151  0649  1003               	clrc
  4152  064A  0D58               	rlf	CheckOnceResult@68,w
  4153  064B  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4154  064C  0084               	movwf	4
  4155  064D  0800               	movf	0,w
  4156  064E  279A  118A         	fcall	PL4	;call to abstracted procedure
  4157  0650  1803               	skipnc
  4158  0651  2E5E               	goto	l4071
  4159  0652                     l4067:	
  4160  0652  0858               	movf	CheckOnceResult@68,w
  4161  0653  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4162  0654  0084               	movwf	4
  4163  0655  3009               	movlw	9
  4164  0656  0A80               	incf	0,f
  4165  0657  0200               	subwf	0,w
  4166  0658  1C03               	skipc
  4167  0659  2E62               	goto	l4075
  4168  065A  0858               	movf	CheckOnceResult@68,w
  4169  065B  2688  118A         	fcall	_KeyClearOne
  4170  065D  2E6C               	goto	l4079
  4171  065E                     l4071:	
  4172  065E  0858               	movf	CheckOnceResult@68,w
  4173  065F  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4174  0660  0084               	movwf	4
  4175  0661  0180               	clrf	0
  4176  0662                     l4075:	
  4177  0662  087A               	movf	_KeyData+1,w	;volatile
  4178  0663  0479               	iorwf	_KeyData,w	;volatile
  4179  0664  1D03               	btfss	3,2
  4180  0665  2E6C               	goto	l4079
  4181  0666                     l4077:	
  4182  0666  0852               	movf	CheckOnceResult@70,w
  4183  0667  00F2               	movwf	KeyHave@59
  4184  0668  01F3               	clrf	KeyHave@59+1
  4185  0669  0858               	movf	CheckOnceResult@68,w
  4186  066A  269D  118A         	fcall	_KeyHave
  4187  066C                     l4079:	
  4188  066C  3002               	movlw	2
  4189  066D  1283               	bcf	3,5	;RP0=0, select bank0
  4190  066E  1303               	bcf	3,6	;RP1=0, select bank0
  4191  066F  0AD8               	incf	CheckOnceResult@68,f
  4192  0670  0258               	subwf	CheckOnceResult@68,w
  4193  0671  1803               	btfsc	3,0
  4194  0672  0008               	return
  4195  0673  2D99               	goto	l4015
  4196  0674                     __end_of_CheckOnceResult:	
  4197  0674                     __ptext33:	
  4198 ;; *************** function _KeyIsIn *****************
  4199 ;; Defined at:
  4200 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  45              1    wreg     unsigned char 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  45              1    3[COMMON] unsigned char 
  4205 ;;  46              1    2[COMMON] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  1    wreg      unsigned char 
  4208 ;; Registers used:
  4209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 300/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4215 ;;      Params:         0       0       0       0
  4216 ;;      Locals:         2       0       0       0
  4217 ;;      Temps:          0       0       0       0
  4218 ;;      Totals:         2       0       0       0
  4219 ;;Total ram usage:        2 bytes
  4220 ;; Hardware stack levels used:    2
  4221 ;; Hardware stack levels required when called:    1
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_KeyClearIn
  4226 ;;		_CheckOnceResult
  4227 ;;		_CheckKeyOldValue
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _KeyIsIn
  4233  0674                     _KeyIsIn:	
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4237                           ;KeyIsIn@45 stored from wreg
  4238  0674  00F3               	movwf	KeyIsIn@45
  4239  0675  3907               	andlw	7
  4240  0676  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4241  0677  0084               	movwf	4
  4242  0678  158A  2000  118A   	fcall	stringdir
  4243  067B  00F2               	movwf	KeyIsIn@46
  4244  067C  1DF3               	btfss	KeyIsIn@45,3
  4245  067D  2E82               	goto	l2677
  4246  067E  1283               	bcf	3,5	;RP0=0, select bank0
  4247  067F  1303               	bcf	3,6	;RP1=0, select bank0
  4248  0680  0837               	movf	_KeyFlag+1,w	;volatile
  4249  0681  2E85               	goto	L15
  4250  0682                     l2677:	
  4251  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0683  1303               	bcf	3,6	;RP1=0, select bank0
  4253  0684  0836               	movf	_KeyFlag,w	;volatile
  4254  0685                     L15:	
  4255  0685  05F2               	andwf	KeyIsIn@46,f
  4256  0686  0872               	movf	KeyIsIn@46,w
  4257  0687  0008               	return
  4258  0688                     __end_of_KeyIsIn:	
  4259  0688                     __ptext31:	
  4260 ;; *************** function _KeyClearOne *****************
  4261 ;; Defined at:
  4262 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  49              1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  49              1    2[COMMON] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4276 ;;      Params:         0       0       0       0
  4277 ;;      Locals:         1       0       0       0
  4278 ;;      Temps:          0       0       0       0
  4279 ;;      Totals:         1       0       0       0
  4280 ;;Total ram usage:        1 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    1
  4283 ;; This function calls:
  4284 ;;		Nothing
  4285 ;; This function is called by:
  4286 ;;		_KeyClearIn
  4287 ;;		_KeyStopClear
  4288 ;;		_CheckOnceResult
  4289 ;;		_SystemEnterSleep
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _KeyClearOne
  4295  0688                     _KeyClearOne:	
  4296                           
  4297                           ;incstack = 0
  4298                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4299                           ;KeyClearOne@49 stored from wreg
  4300  0688  00F2               	movwf	KeyClearOne@49
  4301  0689  1003               	clrc
  4302  068A  0D72               	rlf	KeyClearOne@49,w
  4303  068B  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4304  068C  0084               	movwf	4
  4305  068D  1383               	bcf	3,7	;select IRP bank1
  4306  068E  27D8  118A         	fcall	PL22	;call to abstracted procedure
  4307  0690  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4308  0691  0084               	movwf	4
  4309  0692  27D8  118A         	fcall	PL22	;call to abstracted procedure
  4310  0694  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4311  0695  0084               	movwf	4
  4312  0696  27D8               	fcall	PL22	;call to abstracted procedure
  4313  0697  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4314  0698  0084               	movwf	4
  4315  0699  0180               	clrf	0
  4316  069A  0A84               	incf	4,f
  4317  069B  0180               	clrf	0	;# 
  4318  069C  0008               	return
  4319  069D                     __end_of_KeyClearOne:	
  4320  069D                     __ptext30:	
  4321 ;; *************** function _KeyHave *****************
  4322 ;; Defined at:
  4323 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  58              1    wreg     unsigned char 
  4326 ;;  59              2    2[COMMON] unsigned int 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  58              1    4[COMMON] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2, status,0
  4333 ;; Tracked objects:
  4334 ;;		On entry : B00/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4338 ;;      Params:         2       0       0       0
  4339 ;;      Locals:         1       0       0       0
  4340 ;;      Temps:          0       0       0       0
  4341 ;;      Totals:         3       0       0       0
  4342 ;;Total ram usage:        3 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    1
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		_CheckOnceResult
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           
  4353                           ;psect for function _KeyHave
  4354  069D                     _KeyHave:	
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4358                           ;KeyHave@58 stored from wreg
  4359  069D  00F4               	movwf	KeyHave@58
  4360  069E  1283               	bcf	3,5	;RP0=0, select bank0
  4361  069F  1303               	bcf	3,6	;RP1=0, select bank0
  4362  06A0  0ABC               	incf	_KeyCounter,f
  4363  06A1  01F9               	clrf	_KeyData	;volatile
  4364  06A2  01FA               	clrf	_KeyData+1	;volatile
  4365  06A3  1DF4               	btfss	KeyHave@58,3
  4366  06A4  2EA8               	goto	l2829
  4367  06A5  0872               	movf	KeyHave@59,w
  4368  06A6  00FA               	movwf	_KeyData+1	;volatile
  4369  06A7  0008               	return
  4370  06A8                     l2829:	
  4371  06A8  0872               	movf	KeyHave@59,w
  4372  06A9  00F9               	movwf	_KeyData	;volatile
  4373  06AA  0008               	return
  4374  06AB                     __end_of_KeyHave:	
  4375  06AB                     __ptext32:	
  4376 ;; *************** function _CheckKeyOldValue *****************
  4377 ;; Defined at:
  4378 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  80              2    2[BANK0 ] unsigned int 
  4383 ;;  79              2    0[BANK0 ] unsigned int 
  4384 ;;  78              1    4[BANK0 ] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4394 ;;      Params:         0       0       0       0
  4395 ;;      Locals:         0       5       0       0
  4396 ;;      Temps:          2       0       0       0
  4397 ;;      Totals:         2       5       0       0
  4398 ;;Total ram usage:        7 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    3
  4401 ;; This function calls:
  4402 ;;		_KeyIsIn
  4403 ;; This function is called by:
  4404 ;;		_CheckTouchKey
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _CheckKeyOldValue
  4410  06AB                     _CheckKeyOldValue:	
  4411                           
  4412                           ;incstack = 0
  4413                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4414  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  4415  06AC  3004               	movlw	4
  4416  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  4417  06AE  01D0               	clrf	CheckKeyOldValue@78
  4418  06AF  0ABA               	incf	CheckKeyOldValue@F77,f
  4419  06B0  023A               	subwf	CheckKeyOldValue@F77,w
  4420  06B1  1C03               	btfss	3,0
  4421  06B2  0008               	return
  4422  06B3  01BA               	clrf	CheckKeyOldValue@F77
  4423  06B4                     l3223:	
  4424  06B4  1003               	clrc
  4425  06B5  0D50               	rlf	CheckKeyOldValue@78,w
  4426  06B6  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4427  06B7  0084               	movwf	4
  4428  06B8  1383               	bcf	3,7	;select IRP bank0
  4429  06B9  0800               	movf	0,w
  4430  06BA  00CC               	movwf	CheckKeyOldValue@79
  4431  06BB  0A84               	incf	4,f
  4432  06BC  0800               	movf	0,w
  4433  06BD  00CD               	movwf	CheckKeyOldValue@79+1
  4434  06BE  0850               	movf	CheckKeyOldValue@78,w
  4435  06BF  2674  118A         	fcall	_KeyIsIn
  4436  06C1  3A00               	xorlw	0
  4437  06C2  1003               	clrc
  4438  06C3  1D03               	skipz
  4439  06C4  2EF9               	goto	L14
  4440  06C5  0D50               	rlf	CheckKeyOldValue@78,w
  4441  06C6  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4442  06C7  0084               	movwf	4
  4443  06C8  1383               	bcf	3,7	;select IRP bank1
  4444  06C9  278C  118A         	fcall	PL2	;call to abstracted procedure
  4445  06CB  1903               	skipnz
  4446  06CC  024E               	subwf	CheckKeyOldValue@80,w
  4447  06CD  1C03               	skipc
  4448  06CE  2ED5               	goto	L11
  4449  06CF  0F4E               	incfsz	CheckKeyOldValue@80,w
  4450  06D0  2EF8               	goto	l1231
  4451  06D1  0A4F               	incf	CheckKeyOldValue@80+1,w
  4452  06D2  1003               	clrc
  4453  06D3  1D03               	btfss	3,2
  4454  06D4  2EF9               	goto	L14
  4455  06D5                     L11:	
  4456  06D5  0D50               	rlf	CheckKeyOldValue@78,w
  4457  06D6  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4458  06D7  0084               	movwf	4
  4459  06D8  278C  118A         	fcall	PL2	;call to abstracted procedure
  4460  06DA  1903               	skipnz
  4461  06DB  024E               	subwf	CheckKeyOldValue@80,w
  4462  06DC  1C03               	skipc
  4463  06DD  2EE4               	goto	L12
  4464  06DE  0F4E               	incfsz	CheckKeyOldValue@80,w
  4465  06DF  2EF8               	goto	l1231
  4466  06E0  0A4F               	incf	CheckKeyOldValue@80+1,w
  4467  06E1  1003               	clrc
  4468  06E2  1D03               	btfss	3,2
  4469  06E3  2EF9               	goto	L14
  4470  06E4                     L12:	
  4471  06E4  0D50               	rlf	CheckKeyOldValue@78,w
  4472  06E5  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4473  06E6  0084               	movwf	4
  4474  06E7  278C  118A         	fcall	PL2	;call to abstracted procedure
  4475  06E9  1903               	skipnz
  4476  06EA  024E               	subwf	CheckKeyOldValue@80,w
  4477  06EB  1C03               	skipc
  4478  06EC  2EF3               	goto	L13
  4479  06ED  0F4E               	incfsz	CheckKeyOldValue@80,w
  4480  06EE  2EF8               	goto	l1231
  4481  06EF  0A4F               	incf	CheckKeyOldValue@80+1,w
  4482  06F0  1003               	clrc
  4483  06F1  1D03               	btfss	3,2
  4484  06F2  2EF9               	goto	L14
  4485  06F3                     L13:	
  4486  06F3  0D50               	rlf	CheckKeyOldValue@78,w
  4487  06F4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4488  06F5  0084               	movwf	4
  4489  06F6  27E4  118A         	fcall	PL28	;call to abstracted procedure
  4490  06F8                     l1231:	
  4491  06F8  1003               	clrc
  4492  06F9                     L14:	
  4493  06F9  0D50               	rlf	CheckKeyOldValue@78,w
  4494  06FA  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4495  06FB  0084               	movwf	4
  4496  06FC  1383               	bcf	3,7	;select IRP bank0
  4497  06FD  27D0  118A         	fcall	PL20	;call to abstracted procedure
  4498  06FF  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4499  0700  27B3  118A         	fcall	PL12	;call to abstracted procedure
  4500  0702  27D0  118A         	fcall	PL20	;call to abstracted procedure
  4501  0704  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4502  0705  27B3  118A         	fcall	PL12	;call to abstracted procedure
  4503  0707  27E4  118A         	fcall	PL28	;call to abstracted procedure
  4504  0709  3002               	movlw	2
  4505  070A  0AD0               	incf	CheckKeyOldValue@78,f
  4506  070B  0250               	subwf	CheckKeyOldValue@78,w
  4507  070C  1803               	btfsc	3,0
  4508  070D  0008               	return
  4509  070E  2EB4               	goto	l3223
  4510  070F                     __end_of_CheckKeyOldValue:	
  4511  070F                     __ptext25:	
  4512 ;; *************** function _KeyStopClear *****************
  4513 ;; Defined at:
  4514 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  53              1    3[COMMON] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4528 ;;      Params:         0       0       0       0
  4529 ;;      Locals:         1       0       0       0
  4530 ;;      Temps:          0       0       0       0
  4531 ;;      Totals:         1       0       0       0
  4532 ;;Total ram usage:        1 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    2
  4535 ;; This function calls:
  4536 ;;		_KeyClearOne
  4537 ;; This function is called by:
  4538 ;;		_CheckTouchKey
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _KeyStopClear
  4544  070F                     _KeyStopClear:	
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4548  070F  1283               	bcf	3,5	;RP0=0, select bank0
  4549  0710  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0711  01B6               	clrf	_KeyFlag	;volatile
  4551  0712  01B7               	clrf	_KeyFlag+1	;volatile
  4552  0713  01F3               	clrf	KeyStopClear@53
  4553  0714                     l3135:	
  4554  0714  1003               	clrc
  4555  0715  0D73               	rlf	KeyStopClear@53,w
  4556  0716  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4557  0717  0084               	movwf	4
  4558  0718  1383               	bcf	3,7	;select IRP bank0
  4559  0719  0180               	clrf	0
  4560  071A  0A84               	incf	4,f
  4561  071B  0180               	clrf	0
  4562  071C  0873               	movf	KeyStopClear@53,w
  4563  071D  2688  118A         	fcall	_KeyClearOne
  4564  071F  3002               	movlw	2
  4565  0720  0AF3               	incf	KeyStopClear@53,f
  4566  0721  0273               	subwf	KeyStopClear@53,w
  4567  0722  1803               	btfsc	3,0
  4568  0723  0008               	return
  4569  0724  2F14               	goto	l3135
  4570  0725                     __end_of_KeyStopClear:	
  4571  0725                     __ptext23:	
  4572 ;; *************** function _TurnKeyFlags *****************
  4573 ;; Defined at:
  4574 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;		None
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4588 ;;      Params:         0       0       0       0
  4589 ;;      Locals:         0       0       0       0
  4590 ;;      Temps:          0       0       0       0
  4591 ;;      Totals:         0       0       0       0
  4592 ;;Total ram usage:        0 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    4
  4595 ;; This function calls:
  4596 ;;		_KeyClearIn
  4597 ;; This function is called by:
  4598 ;;		_CheckTouchKey
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           
  4603                           ;psect for function _TurnKeyFlags
  4604  0725                     _TurnKeyFlags:	
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4608  0725  087A               	movf	_KeyData+1,w	;volatile
  4609  0726  0479               	iorwf	_KeyData,w	;volatile
  4610  0727  1903               	btfsc	3,2
  4611  0728  2F49               	goto	l3283
  4612  0729  1283               	bcf	3,5	;RP0=0, select bank0
  4613  072A  1303               	bcf	3,6	;RP1=0, select bank0
  4614  072B  01B8               	clrf	TurnKeyFlags@F84
  4615  072C  0879               	movf	_KeyData,w	;volatile
  4616  072D  062C               	xorwf	_KeyOldData,w	;volatile
  4617  072E  1D03               	skipz
  4618  072F  2F42               	goto	l1249
  4619  0730  087A               	movf	_KeyData+1,w	;volatile
  4620  0731  062D               	xorwf	_KeyOldData+1,w	;volatile
  4621  0732  1D03               	skipz
  4622  0733  2F42               	goto	l1249
  4623  0734  3002               	movlw	2
  4624  0735  0AB9               	incf	TurnKeyFlags@F83,f
  4625  0736  0239               	subwf	TurnKeyFlags@F83,w
  4626  0737  1C03               	skipc
  4627  0738  0008               	return
  4628  0739  01B9               	clrf	TurnKeyFlags@F83
  4629  073A  0879               	movf	_KeyData,w	;volatile
  4630  073B  00B6               	movwf	_KeyFlag	;volatile
  4631  073C  087A               	movf	_KeyData+1,w	;volatile
  4632  073D  00B7               	movwf	_KeyFlag+1	;volatile
  4633  073E  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4634  073F  0008               	return
  4635  0740  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4636  0741  2F6E               	ljmp	l2803
  4637  0742                     l1249:	
  4638  0742  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4639  0743  0879               	movf	_KeyData,w	;volatile
  4640  0744  00AC               	movwf	_KeyOldData	;volatile
  4641  0745  087A               	movf	_KeyData+1,w	;volatile
  4642  0746  00AD               	movwf	_KeyOldData+1	;volatile
  4643  0747  01B9               	clrf	TurnKeyFlags@F83
  4644  0748  0008               	return
  4645  0749                     l3283:	
  4646  0749  1283               	bcf	3,5	;RP0=0, select bank0
  4647  074A  1303               	bcf	3,6	;RP1=0, select bank0
  4648  074B  01B9               	clrf	TurnKeyFlags@F83
  4649  074C  01AC               	clrf	_KeyOldData	;volatile
  4650  074D  01AD               	clrf	_KeyOldData+1	;volatile
  4651  074E  3002               	movlw	2
  4652  074F  0AB8               	incf	TurnKeyFlags@F84,f
  4653  0750  0238               	subwf	TurnKeyFlags@F84,w
  4654  0751  1C03               	skipc
  4655  0752  0008               	return
  4656  0753  01B8               	clrf	TurnKeyFlags@F84
  4657  0754  01B6               	clrf	_KeyFlag	;volatile
  4658  0755  01B7               	clrf	_KeyFlag+1	;volatile
  4659  0756  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4660  0757  0008               	return
  4661  0758                     __end_of_TurnKeyFlags:	
  4662  0758                     __ptext28:	
  4663 ;; *************** function _CheckValidTime *****************
  4664 ;; Defined at:
  4665 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;		None
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4679 ;;      Params:         0       0       0       0
  4680 ;;      Locals:         0       0       0       0
  4681 ;;      Temps:          0       0       0       0
  4682 ;;      Totals:         0       0       0       0
  4683 ;;Total ram usage:        0 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    1
  4686 ;; This function calls:
  4687 ;;		Nothing
  4688 ;; This function is called by:
  4689 ;;		_CheckTouchKey
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function _CheckValidTime
  4695  0758                     _CheckValidTime:	
  4696  0758                     l3293:	
  4697                           ;incstack = 0
  4698                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4699                           
  4700  0758  1283               	bcf	3,5	;RP0=0, select bank0
  4701  0759  1303               	bcf	3,6	;RP1=0, select bank0
  4702  075A  0837               	movf	_KeyFlag+1,w	;volatile
  4703  075B  0436               	iorwf	_KeyFlag,w	;volatile
  4704  075C  1903               	btfsc	3,2
  4705  075D  2F6A               	goto	l3299
  4706  075E  1683               	bsf	3,5	;RP0=1, select bank1
  4707  075F  0AA8               	incf	CheckValidTime@F87^(0+128),f
  4708  0760  1903               	skipnz
  4709  0761  0AA9               	incf	(CheckValidTime@F87+1)^(0+128),f
  4710  0762  303A               	movlw	58
  4711  0763  0229               	subwf	(CheckValidTime@F87+1)^(0+128),w
  4712  0764  3098               	movlw	152
  4713  0765  1903               	skipnz
  4714  0766  0228               	subwf	CheckValidTime@F87^(0+128),w
  4715  0767  1C03               	skipc
  4716  0768  0008               	return
  4717  0769  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4718  076A                     l3299:	
  4719  076A  1683               	bsf	3,5	;RP0=1, select bank1
  4720  076B  01A8               	clrf	CheckValidTime@F87^(0+128)
  4721  076C  01A9               	clrf	(CheckValidTime@F87+1)^(0+128)
  4722  076D  0008               	return
  4723  076E                     __end_of_CheckValidTime:	
  4724  076E                     __ptext24:	
  4725 ;; *************** function _KeyClearIn *****************
  4726 ;; Defined at:
  4727 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;		None
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  51              1    4[COMMON] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      void 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 300/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4741 ;;      Params:         0       0       0       0
  4742 ;;      Locals:         1       0       0       0
  4743 ;;      Temps:          0       0       0       0
  4744 ;;      Totals:         1       0       0       0
  4745 ;;Total ram usage:        1 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    3
  4748 ;; This function calls:
  4749 ;;		_KeyClearOne
  4750 ;;		_KeyIsIn
  4751 ;; This function is called by:
  4752 ;;		_TurnKeyFlags
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _KeyClearIn
  4758  076E                     _KeyClearIn:	
  4759  076E                     l2803:	
  4760                           ;incstack = 0
  4761                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4762                           
  4763  076E  01F4               	clrf	KeyClearIn@51
  4764  076F                     l2809:	
  4765  076F  0874               	movf	KeyClearIn@51,w
  4766  0770  2674  118A         	fcall	_KeyIsIn
  4767  0772  3A00               	xorlw	0
  4768  0773  1D03               	skipz
  4769  0774  2F78               	goto	l2813
  4770  0775  0874               	movf	KeyClearIn@51,w
  4771  0776  2688  118A         	fcall	_KeyClearOne
  4772  0778                     l2813:	
  4773  0778  3002               	movlw	2
  4774  0779  0AF4               	incf	KeyClearIn@51,f
  4775  077A  0274               	subwf	KeyClearIn@51,w
  4776  077B  1803               	btfsc	3,0
  4777  077C  0008               	return
  4778  077D  2F6F               	goto	l2809
  4779  077E                     __end_of_KeyClearIn:	
  4780  077E                     __ptext19:	
  4781 ;; *************** function _Refurbish_Sfr *****************
  4782 ;; Defined at:
  4783 ;;		line 86 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;		None
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;		None
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0
  4792 ;; Tracked objects:
  4793 ;;		On entry : 200/0
  4794 ;;		On exit  : 300/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4797 ;;      Params:         0       0       0       0
  4798 ;;      Locals:         0       0       0       0
  4799 ;;      Temps:          0       0       0       0
  4800 ;;      Totals:         0       0       0       0
  4801 ;;Total ram usage:        0 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_WorkSleep
  4808 ;;		_main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _Refurbish_Sfr
  4814  077E                     _Refurbish_Sfr:	
  4815                           
  4816                           ;main.c: 89: PIE1 = 2;
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4820  077E  3002               	movlw	2
  4821  077F  1283               	bcf	3,5	;RP0=0, select bank0
  4822  0780  008E               	movwf	14	;volatile
  4823                           
  4824                           ;main.c: 90: PR2 = 250;
  4825  0781  30FA               	movlw	250
  4826  0782  0091               	movwf	17	;volatile
  4827                           
  4828                           ;main.c: 91: INTCON = 0XC0;
  4829  0783  30C0               	movlw	192
  4830  0784  008B               	movwf	11	;volatile
  4831                           
  4832                           ;main.c: 92: if (4 != T2CON)
  4833  0785  3004               	movlw	4
  4834  0786  0613               	xorwf	19,w	;volatile
  4835  0787  1903               	btfsc	3,2
  4836  0788  0008               	return
  4837                           
  4838                           ;main.c: 93: T2CON = 4;
  4839  0789  3004               	movlw	4
  4840  078A  0093               	movwf	19	;volatile
  4841  078B  0008               	return
  4842  078C                     __end_of_Refurbish_Sfr:	
  4843  078C                     PL2:	
  4844  078C  0800               	movf	0,w
  4845  078D  00CE               	movwf	CheckKeyOldValue@80
  4846  078E  0A84               	incf	4,f
  4847  078F  0800               	movf	0,w
  4848  0790  00CF               	movwf	CheckKeyOldValue@80+1
  4849  0791  084C               	movf	CheckKeyOldValue@79,w
  4850  0792  02CE               	subwf	CheckKeyOldValue@80,f
  4851  0793  084D               	movf	CheckKeyOldValue@79+1,w
  4852  0794  1C03               	skipc
  4853  0795  03CF               	decf	CheckKeyOldValue@80+1,f
  4854  0796  02CF               	subwf	CheckKeyOldValue@80+1,f
  4855  0797  3000               	movlw	0
  4856  0798  024F               	subwf	CheckKeyOldValue@80+1,w
  4857  0799  3402               	retlw	2
  4858  079A                     __end_ofPL2:	
  4859  079A                     PL4:	
  4860  079A  00CC               	movwf	??_CheckOnceResult
  4861  079B  0A84               	incf	4,f
  4862  079C  0800               	movf	0,w
  4863  079D  00CD               	movwf	??_CheckOnceResult+1
  4864  079E  0855               	movf	CheckOnceResult@69,w
  4865  079F  074C               	addwf	??_CheckOnceResult,w
  4866  07A0  00CE               	movwf	??_CheckOnceResult+2
  4867  07A1  084D               	movf	??_CheckOnceResult+1,w
  4868  07A2  1803               	skipnc
  4869  07A3  0A4D               	incf	??_CheckOnceResult+1,w
  4870  07A4  00CF               	movwf	??_CheckOnceResult+3
  4871  07A5  0857               	movf	CheckOnceResult@71+1,w
  4872  07A6  024F               	subwf	??_CheckOnceResult+3,w
  4873  07A7  1D03               	skipz
  4874  07A8  0008               	return
  4875  07A9  0856               	movf	CheckOnceResult@71,w
  4876  07AA  024E               	subwf	??_CheckOnceResult+2,w
  4877  07AB  0008               	return
  4878  07AC                     __end_ofPL4:	
  4879  07AC                     PL8:	
  4880  07AC  0084               	movwf	4
  4881  07AD  0800               	movf	0,w
  4882  07AE  00CC               	movwf	??_CheckOnceResult
  4883  07AF  0A84               	incf	4,f
  4884  07B0  0800               	movf	0,w
  4885  07B1  00CD               	movwf	??_CheckOnceResult+1
  4886  07B2  0008               	return
  4887  07B3                     __end_ofPL8:	
  4888  07B3                     PL12:	
  4889  07B3  0084               	movwf	4
  4890  07B4  0874               	movf	??_CheckKeyOldValue,w
  4891  07B5  0080               	movwf	0
  4892  07B6  0A84               	incf	4,f
  4893  07B7  0875               	movf	??_CheckKeyOldValue+1,w
  4894  07B8  0080               	movwf	0
  4895  07B9  1003               	clrc
  4896  07BA  0D50               	rlf	CheckKeyOldValue@78,w
  4897  07BB  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4898  07BC  0084               	movwf	4
  4899  07BD  0008               	return
  4900  07BE                     __end_ofPL12:	
  4901  07BE                     PL14:	
  4902  07BE  0084               	movwf	4
  4903  07BF  084C               	movf	??_SystemEnterSleep,w
  4904  07C0  0080               	movwf	0
  4905  07C1  0A84               	incf	4,f
  4906  07C2  084D               	movf	??_SystemEnterSleep+1,w
  4907  07C3  0080               	movwf	0
  4908  07C4  1003               	clrc
  4909  07C5  0D54               	rlf	SystemEnterSleep@91,w
  4910  07C6  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4911  07C7  0084               	movwf	4
  4912  07C8  0008               	return
  4913  07C9                     __end_ofPL14:	
  4914  07C9                     PL16:	
  4915  07C9  0084               	movwf	4
  4916  07CA  0800               	movf	0,w
  4917  07CB  00CC               	movwf	??_SystemEnterSleep
  4918  07CC  0A84               	incf	4,f
  4919  07CD  0800               	movf	0,w
  4920  07CE  00CD               	movwf	??_SystemEnterSleep+1
  4921  07CF  0008               	return
  4922  07D0                     __end_ofPL16:	
  4923  07D0                     PL20:	
  4924  07D0  0800               	movf	0,w
  4925  07D1  00F4               	movwf	??_CheckKeyOldValue
  4926  07D2  0A84               	incf	4,f
  4927  07D3  0800               	movf	0,w
  4928  07D4  00F5               	movwf	??_CheckKeyOldValue+1
  4929  07D5  1003               	clrc
  4930  07D6  0D50               	rlf	CheckKeyOldValue@78,w
  4931  07D7  0008               	return
  4932  07D8                     __end_ofPL20:	
  4933  07D8                     PL22:	
  4934  07D8  0180               	clrf	0
  4935  07D9  0A84               	incf	4,f
  4936  07DA  0180               	clrf	0
  4937  07DB  1003               	clrc
  4938  07DC  0D72               	rlf	KeyClearOne@49,w
  4939  07DD  0008               	return
  4940  07DE                     __end_ofPL22:	
  4941  07DE                     PL26:	
  4942  07DE  3041               	movlw	65
  4943  07DF  1683               	bsf	3,5	;RP0=1, select bank1
  4944  07E0  0095               	movwf	21	;volatile
  4945  07E1  1415               	bsf	21,0	;volatile
  4946  07E2  0196               	clrf	22	;volatile
  4947  07E3  0008               	return
  4948  07E4                     __end_ofPL26:	
  4949  07E4                     PL28:	
  4950  07E4  084C               	movf	CheckKeyOldValue@79,w
  4951  07E5  0080               	movwf	0
  4952  07E6  0A84               	incf	4,f
  4953  07E7  084D               	movf	CheckKeyOldValue@79+1,w
  4954  07E8  0080               	movwf	0
  4955  07E9  0008               	return
  4956  07EA                     __end_ofPL28:	
  4957  07EA                     PL30:	
  4958  07EA  01D4               	clrf	SystemEnterSleep@91
  4959  07EB  01D2               	clrf	SystemEnterSleep@92
  4960  07EC  0AD2               	incf	SystemEnterSleep@92,f
  4961  07ED  01D3               	clrf	SystemEnterSleep@92+1
  4962  07EE  0008               	return
  4963  07EF                     __end_ofPL30:	
  4964  07EF                     PL32:	
  4965  07EF  0DD2               	rlf	SystemEnterSleep@92,f
  4966  07F0  0DD3               	rlf	SystemEnterSleep@92+1,f
  4967  07F1  0AD4               	incf	SystemEnterSleep@91,f
  4968  07F2  0254               	subwf	SystemEnterSleep@91,w
  4969  07F3  0008               	return
  4970  07F4                     __end_ofPL32:	
  4971                           
  4972                           	psect	text34
  4973  0F33                     __ptext34:	
  4974 ;; *************** function _Isr_Timer *****************
  4975 ;; Defined at:
  4976 ;;		line 165 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      void 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 300/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4990 ;;      Params:         0       0       0       0
  4991 ;;      Locals:         0       0       0       0
  4992 ;;      Temps:          2       0       0       0
  4993 ;;      Totals:         2       0       0       0
  4994 ;;Total ram usage:        2 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		Interrupt level 1
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _Isr_Timer
  5005  0F33                     _Isr_Timer:	
  5006                           
  5007                           ;main.c: 167: if(TMR2IF)
  5008  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  5009  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  5010  0F35  1C8D               	btfss	13,1	;volatile
  5011  0F36  2F46               	goto	i1l3625
  5012                           
  5013                           ;main.c: 168: {
  5014                           ;main.c: 169: TMR2IF = 0;
  5015  0F37  108D               	bcf	13,1	;volatile
  5016                           
  5017                           ;main.c: 170: if(++MainTime >= 32)
  5018  0F38  3020               	movlw	32
  5019  0F39  0AC9               	incf	_MainTime,f	;volatile
  5020  0F3A  0249               	subwf	_MainTime,w	;volatile
  5021  0F3B  1C03               	skipc
  5022  0F3C  2F47               	goto	i1l954
  5023                           
  5024                           ;main.c: 171: {
  5025                           ;main.c: 172: MainTime = 0;
  5026  0F3D  01C9               	clrf	_MainTime	;volatile
  5027                           
  5028                           ;main.c: 173: B_MainLoop = 1;
  5029  0F3E  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5030                           
  5031                           ;main.c: 174: if(++count1s >= 250)
  5032  0F3F  30FA               	movlw	250
  5033  0F40  0AC8               	incf	_count1s,f
  5034  0F41  0248               	subwf	_count1s,w
  5035  0F42  1C03               	skipc
  5036  0F43  2F47               	goto	i1l954
  5037                           
  5038                           ;main.c: 175: {
  5039                           ;main.c: 176: count1s = 0;
  5040  0F44  01C8               	clrf	_count1s
  5041  0F45  2F47               	goto	i1l954
  5042  0F46                     i1l3625:	
  5043                           
  5044                           ;main.c: 180: else
  5045                           ;main.c: 181: {
  5046                           ;main.c: 182: PIR1 = 0;
  5047  0F46  018D               	clrf	13	;volatile
  5048  0F47                     i1l954:	
  5049  0F47  0871               	movf	??_Isr_Timer+1,w
  5050  0F48  008A               	movwf	10
  5051  0F49  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5052  0F4A  0083               	movwf	3
  5053  0F4B  0EFE               	swapf	126,f
  5054  0F4C  0E7E               	swapf	126,w
  5055  0F4D  0009               	retfie
  5056  0F4E                     __end_of_Isr_Timer:	
  5057  007E                     btemp	set	126	;btemp
  5058  007E                     wtemp0	set	126
  5059                           
  5060                           	psect	intentry
  5061  0004                     __pintentry:	
  5062                           ;incstack = 0
  5063                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5064                           
  5065  0004                     interrupt_function:	
  5066  007E                     saved_w	set	btemp
  5067  0004  00FE               	movwf	btemp
  5068  0005  0E03               	swapf	3,w
  5069  0006  00F0               	movwf	??_Isr_Timer
  5070  0007  080A               	movf	10,w
  5071  0008  00F1               	movwf	??_Isr_Timer+1
  5072  0009  158A  2F33         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         67
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      25
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _wuhuaCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _wuhuaCtr->_ADC_Sample
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13378
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    9375
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             4     4      0    1410
                                             13 BANK0      4     4      0
                         _ADC_Sample
                             ___lmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1478
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     977
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _ADC_Sample
       ___lmul
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      19       6       31.3%
BANK2               50      0       0       7        0.0%
ABS                  0      0      74       8        0.0%
DATA                 0      0      74       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 30 14:24:56 2025

                        pc 0002                         PL2 078C                         PL4 079A  
                       PL6 03CD                         PL8 07AC              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 03DC                        PL20 07D0                        PL12 07B3  
                      PL30 07EA                        PL22 07D8                        PL14 07BE  
                      PL40 0403                        PL32 07EF                        PL24 03F2  
                      PL16 07C9                        PL34 03F9                        PL26 07DE  
                      PL18 03E9                        PL36 0FFB                        PL28 07E4  
                      PL38 03FE                        l974 02E9                        l968 02AD  
                      l986 0F6E                        l978 032F                        l988 0F6B  
                      l996 036A                        _RA1 0431                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0814  
       ??_GetTouchKeyValue 0073               ___ftdiv@cntr 005B               ___ftdiv@sign 0060  
                     l1002 038A                       l1310 00C8                       l1231 06F8  
                     l1190 055C                       l1280 0494                       l1249 0742  
                     l1268 0475                       l1509 018D                       l3223 06B4  
                     l4015 0599                       l3135 0714                       l1455 0244  
                     l4033 05F0                       l4009 0060                       l1467 0268  
                     l4107 01A0                       l4123 01DC                       l4053 0626  
                     l4141 01FF                       l4125 01E1                       l4213 0131  
                     l4071 065E                       l4047 061E                       l4151 020B  
                     l4223 0145                       l3441 0FD2                       l3433 0FC6  
                     l4153 0215                       l4145 0207                       l4233 0160  
                     l4225 0146                       l4075 0662                       l4067 0652  
                     l2803 076E                       l3283 0749                       l3443 0FD4  
                     l3523 0F63                       l4243 016C                       l4235 0163  
                     l4315 0FAC                       l4077 0666                       l3293 0758  
                     l2813 0778                       l3453 0FE4                       l3437 0FCB  
                     l3525 0F64                       l4085 017F                       l4157 0223  
                     l4079 066C                       l4271 0489                       l4263 0484  
                     l3463 0FF3                       l3711 02DD                       l2841 0528  
                     l2809 076F                       l4273 048D                       l3457 0FE9  
                     l3465 0FF5                       l4169 0435                       l3529 0F71  
                     l3713 02E5                       l3299 076A                       l2691 0584  
                     l3467 0FF9                       l3723 0333                       l3707 02D2  
                     l3811 039D                       l2677 0682                       l2829 06A8  
                     l2693 0585                       l2845 052E                       l4197 0464  
                     l2871 056A                       l4279 0493                       l3751 03C1  
                     l4287 0F80                       l2873 057A                       l3905 051D  
                     l3673 028B                       l3921 036C                       l3745 040C  
                     l3683 0296                       l3675 028D                       l3771 00DE  
                     l3819 03B0                       l3915 0364                       l3917 0367  
                     l3871 04C8                       l3783 0248                       l3943 0072  
                     l3927 0387                       l3793 0266                       l3785 024B  
                     l3689 0297                       l3945 0074                       l3929 038D  
                     l3859 04C1                       l3795 025D                       l3787 0250  
                     l3699 02B7                       l3971 00BA                       l3885 04F5  
                     l3789 0258                       l3965 00B2                       l3957 009D  
                     l3975 00BE                       l3967 00B4                       l3983 0020  
                     l3889 04FC                       l3977 00BF                       l3995 0034  
                     l3989 0029                       _ADON 04A8                       _CHS4 04B6  
                     u4015 01E4                       u3325 0324                       _PIE1 000E  
                     _PIE2 0110                       u3345 033C                       u3275 02D8  
                     u4307 0287                       u3285 02E3                       u3705 008E  
                     u3555 04F1                       _RAIF 006B                       u3485 03A3  
                     _INTF 0059                       _RBIE 005B                       _RBIF 0058  
                     u3905 063E                       u3825 0050                       u3835 05A6  
                     u3855 05E1                       u3865 05F6                       _PIR1 000D  
                     _PIR2 010F                       u3875 0602                       u3985 01AE  
                     _TMR0 0081                       _WPUB 0008                       _main 0F78  
             ___ftpack@arg 0072               ___ftpack@exp 0075                       _time 00AA  
                     btemp 007E              ?_KeyStopClear 0070                       start 000B  
             _TurnKeyFlags 0725            __end_of_KeyIsIn 0688            __end_of_KeyHave 06AB  
             ___fttol@exp1 006D              ??_Init_System 0072               ___fttol@lval 0069  
          TurnKeyFlags@F83 0039            TurnKeyFlags@F84 0038                      ?_main 0070  
          __end_of___ftdiv 01D3            __end_of___fttol 022C                      _IOCB0 0048  
                    _T2CON 0013   __end_of_SystemEnterSleep 0524            __end_of___lwmod 03B5  
                    i1l954 0F47                      _PORTA 0086                      _PORTB 0006  
                    _PORTC 0106            __end_of_fanInit 03CD                      _TRISA 0085  
                    _TRISB 0005                      _PWMTH 0018                      _TRISC 0105  
                    _PWMTL 0017            __end_of_fanStop 040C            __end_of_chrgCtr 0F78  
      ___lmul@multiplicand 0050        __end_of_KeyClearOne 069D                 _KeyClearIn 076E  
           fanCtr@fan_temp 005A              ___ftpack@sign 0076             __pbitbssCOMMON 03C0  
                    pclath 000A            __end_of_pwmInit 03C1                _ClearResSum 0584  
               _KeyCounter 003C                 _KeyOldData 002C            __end_of_pwmStop 0411  
           ??_KeyStopClear 0073                      status 0003                      wtemp0 007E  
          __end_of_workCtr 0171                 _KeyUpShake 0034            __initialization 000D  
             __end_of_main 0FB0                     ??_main 0078              ___fttol@sign1 0068  
      __end_of_Init_System 0430                     _ADCON0 0095                     _ADCON1 0096  
                   _ADRESH 0099                     _ADRESL 0098           __end_of___ftpack 027A  
                   _GODONE 04A9                     i1l3625 0F46                     _LDO_EN 04B2  
                   _INTCON 000B           __end_of___lwtoft 023C         __size_of_KeyServer 004B  
                   _OSCCON 0014                     _TMR2IF 0069                     _PWMD0L 0019  
                   _PWMD1L 001A               ??_ADC_Sample 0073                     _TRISB0 0028  
                   _TRISB6 002E                  ??_KeyIsIn 0072                  ??_KeyHave 0074  
            ClearResSum@56 0072         __size_of_Isr_Timer 001B  __size_of_CheckKeyOldValue 0064  
                   ___lmul 00C4                     _b_kclr 03C2                     _b_kerr 03C1  
                   _fanCtr 0061                  ??___ftdiv 0058                  ??___fttol 0065  
                ??___lwmod 0076                  ??_fanInit 0072                  ??_fanStop 0072  
              _KeyClearOne 0688                  ??_chrgCtr 0072                     _result 00AC  
            _Table_KeyFalg 0806              _Table_KeyDown 080E         __end_of_ADC_Sample 034A  
                   saved_w 007E     __size_of_CheckTouchKey 002D                  ??_pwmInit 0072  
                ??_pwmStop 0072                ?_KeyClearIn 0070                  ??_workCtr 0077  
          _CheckOnceResult 0593           __end_of_wuhuaCtr 0061    __end_of__initialization 001D  
       __size_of_WorkSleep 0037          CheckOnceResult@70 0052          CheckOnceResult@71 0056  
        CheckOnceResult@72 0053          CheckOnceResult@73 0050          CheckOnceResult@68 0058  
        CheckOnceResult@69 0055                 ___ftdiv@f1 0055                 ___ftdiv@f2 0052  
               ___ftdiv@f3 005C                 ___fttol@f1 0061             __pcstackCOMMON 0070  
              _Init_System 0411                 __end_ofPL2 079A                 __end_ofPL4 07AC  
               __end_ofPL6 03DC                 __end_ofPL8 07B3          __end_of_KeyServer 0FFB  
               ___lwtoft@c 004F       __end_of_KeyStopClear 0725          __end_of_Isr_Timer 0F4E  
       __size_of_keyLedCtr 0047                 __pbssBANK0 0020                 __pbssBANK1 00A0  
             _chrgFullFlag 0042  __size_of_GetTouchKeyValue 0060               _chrgFullTime 0041  
       wuhuaCtr@wuhua_temp 0059              _CheckTouchKey 0467                 __pmaintext 0F78  
                  ?___lmul 004C                    ?_fanCtr 0070                 __pintentry 0004  
      __size_of_KeyClearIn 0010             ___lmul@product 0072                  ?___ftpack 0072  
        __end_of_WorkSleep 0467                  ?___lwtoft 004F          ?_SystemEnterSleep 0070  
  __end_of_CheckOnceResult 0674                    _KEYCON0 0111                    _KEYCON1 0112  
                  _KEYCON2 0113         ??_SystemEnterSleep 004C                    _B_OnOff 03C5  
                  _PWMD01H 001E     __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015  
                  _PWMCON1 0016                    _PWMCON2 001D       __end_of_Table_KeyCap 0812  
               __stringtab 0800               ?_ClearResSum 0070                    _KeyData 0079  
                  _KeyFlag 0036                    _KeyIsIn 0674                    _KeyHave 069D  
           ?_CheckTouchKey 0070            ADC_Sample@adldo 0072            ADC_Sample@admax 0055  
          ADC_Sample@admin 0053            ADC_Sample@adsum 004F           _CheckKeyOldValue 06AB  
          __size_of___lmul 0033                    ___ftdiv 0171            __size_of_fanCtr 0063  
                  ___fttol 01D3                    ___lwmod 0391          __end_of_keyLedCtr 0391  
                  _b_kover 03C4                    _fanInit 03C1                    _fanDuty 0046  
                  _fanStop 0407                 ??___ftpack 004C                    _chrgCtr 0F4E  
                  __ptext1 00F7                    __ptext2 0020                    __ptext3 040C  
                  __ptext4 03B5                    __ptext5 034A                    __ptext6 0391  
                  __ptext7 0061                    __ptext8 0407                    __ptext9 03C1  
               _lowBatLock 0040                 _lowBatTime 00AE                  ?_wuhuaCtr 0070  
               ??___lwtoft 0077                    _count1s 0048                 _lowFanTime 003F  
                  _pwmInit 03B5                    _pwmStop 040C    __size_of_CheckValidTime 0016  
                  clrloop0 07F5                    _workCtr 00F7       end_of_initialization 001D  
            _Refurbish_Sfr 077E               _KeyOldValue0 00A4               _KeyOldValue1 0024  
             _KeyOldValue2 0020      __size_of_KeyStopClear 0016         SystemEnterSleep@91 0054  
       SystemEnterSleep@92 0052         SystemEnterSleep@93 0050         SystemEnterSleep@94 004E  
             ?_KeyClearOne 0070               _KeyReference 00A0                 ??_wuhuaCtr 0077  
        CheckValidTime@F87 00A8           ?_CheckOnceResult 0070                  KeyIsIn@45 0073  
                KeyIsIn@46 0072                  KeyHave@58 0074                  KeyHave@59 0072  
             ??_KeyClearIn 0074                ___ftdiv@exp 005F            ??_CheckTouchKey 0078  
             _KeyStopClear 070F           _GetTouchKeyValue 0524             ?_Refurbish_Sfr 0070  
             ?_Init_System 0070             __end_of___lmul 00F7             __end_of_fanCtr 00C4  
       __end_of_KeyClearIn 077E                 _wuhuaValue 00B0                  _KeyMaxSub 003B  
                _KeyResSum 0028                __end_ofPL10 03E9                __end_ofPL20 07D8  
              __end_ofPL12 07BE                __end_ofPL30 07EF                __end_ofPL22 07DE  
              __end_ofPL14 07C9                __end_ofPL40 0407                __end_ofPL32 07F4  
              __end_ofPL24 03F9                __end_ofPL16 07D0                __end_ofPL34 03FE  
              __end_ofPL26 07E4                __end_ofPL18 03F2                __end_ofPL36 1000  
              __end_ofPL28 07EA                __end_ofPL38 0403        start_initialization 000D  
                _KeyServer 0FB0                  _Isr_Timer 0F33          workCtr@power_temp 00B4  
     __size_of_ClearResSum 000F              ?_TurnKeyFlags 0070                   ??___lmul 0072  
                 ??_fanCtr 0077          ADC_Sample@ad_temp 0057               _Table_KeyCap 0810  
        __size_of___ftpack 003E                __pbssCOMMON 0079                _fanOverTime 0044  
               ?_KeyServer 0070                  ___latbits 0001          __size_of___lwtoft 0010  
            __pcstackBANK0 004C              __pcstackBANK1 00B4                  _WorkSleep 0430  
           _CheckValidTime 0758   __end_of_CheckKeyOldValue 070F                 ?_Isr_Timer 0070  
      KeyServer@KeyOldFlag 003D                   ?_KeyIsIn 0070                   ?_KeyHave 0072  
__size_of_SystemEnterSleep 0090            ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075  
                __pnvBANK0 006E                  __pnvBANK1 00B8                   ?___ftdiv 0052  
                 ?___fttol 0061                   ?___lwmod 0072                   ?_fanInit 0070  
                 ?_fanStop 0070                   ?_chrgCtr 0070              _shanshuoTime2 0030  
                __pstrings 0800       __size_of_KeyClearOne 0015                  _keyLedCtr 034A  
                _firstLock 00B8     __end_of_CheckValidTime 076E                  _firstTime 006E  
        __size_of_wuhuaCtr 0041                 ?_WorkSleep 0070             ADC_Sample@adch 004D  
                 ?_pwmInit 0070                   ?_pwmStop 0070                   ?_workCtr 0070  
              ADC_Sample@i 004E                ADC_Sample@j 004C                   _KEYDATAH 0117  
                 _KEYDATAL 0116          interrupt_function 0004                  clear_ram0 07F4  
           KeyStopClear@53 0073        CheckKeyOldValue@F77 003A                __stringbase 0805  
     __size_of_Init_System 001F      __end_of_Table_KeyFalg 080E      __end_of_Table_KeyDown 0810  
               ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0584            ?_CheckValidTime 0070  
              ??_KeyServer 0072          ___lmul@multiplier 004C                  _wuhuaFlag 0047  
              ??_Isr_Timer 0070                   _MainTime 0049                 _ADC_Sample 027A  
         __size_of_KeyIsIn 0014           __size_of_KeyHave 000E           _Table_KeyChannel 0812  
         __size_of___ftdiv 0062           __size_of___fttol 0059           __size_of___lwmod 0024  
                 ___ftpack 023C           __size_of_fanInit 000C         __end_of__stringtab 0806  
         __size_of_fanStop 0005           __size_of_chrgCtr 002A                   ___lwtoft 022C  
                 _b_kover1 03C3                   _b_ksleep 03C0       __end_of_TurnKeyFlags 0758  
                 _fanValue 00B2                   _adresult 004A                   _chrgFlag 0043  
              ??_WorkSleep 0078                   __ptext10 00C4                   __ptext11 027A  
                 __ptext20 0FB0                   __ptext12 022C                   __ptext21 0411  
                 __ptext13 01D3                   __ptext30 069D                   __ptext22 0467  
                 __ptext14 0171                   __ptext31 0688                   __ptext23 0725  
                 __ptext15 023C                   __ptext32 06AB                   __ptext24 076E  
                 __ptext16 0F4E                   __ptext33 0674                   __ptext25 070F  
                 __ptext17 0430                   __ptext34 0F33                   __ptext26 0524  
                 __ptext18 0494                   __ptext27 0584                   __ptext19 077E  
                 __ptext28 0758                   __ptext29 0593           __size_of_pwmInit 000C  
         __size_of_pwmStop 0005               _shanshuoTime 0032                   _count10s 0045  
         __size_of_workCtr 007A   __size_of_CheckOnceResult 00E1         GetTouchKeyValue@62 0077  
       GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073              __size_of_main 0038  
         _SystemEnterSleep 0494      __end_of_CheckTouchKey 0494         CheckKeyOldValue@80 004E  
       CheckKeyOldValue@78 0050         CheckKeyOldValue@79 004C                   _test_adc 003E  
                 _power_ad 002E                   _workStep 007B                   _wuhuaCtr 0020  
              ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070                   intlevel1 0000  
            ??_ClearResSum 0072         ??_CheckKeyOldValue 0074           ___lwmod@dividend 0074  
              ?_ADC_Sample 0072                  stringcode 0800                 _B_MainLoop 03C6  
        fanCtr@maxFanValue 0059                 _OPTION_REG 0001            ___lwmod@divisor 0072  
          ___lwmod@counter 0076                   stringdir 0800                   stringtab 0800  
            KeyClearOne@49 0072               KeyClearIn@51 0074      __end_of_Refurbish_Sfr 078C  
      __end_of_ClearResSum 0593          ??_CheckOnceResult 004C  
