

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 18 16:37:33 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text16,local,class=CODE,merge=1,delta=2
    18                           	psect	text20,local,class=CODE,merge=1,delta=2
    19                           	psect	text21,local,class=CODE,merge=1,delta=2
    20                           	psect	text34,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.45
    26                           ; Generated 16/11/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F887 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	strings
    61  0800                     __pstrings:	
    62  0800                     stringtab:	
    63  0800                     __stringtab:	
    64  0800                     stringcode:	
    65                           ;	String table - string pointers are 1 byte each
    66                           
    67  0800                     stringdir:	
    68  0800  3008               	movlw	high stringdir
    69  0801  008A               	movwf	10
    70  0802  0804               	movf	4,w
    71  0803  0A84               	incf	4,f
    72  0804  0782               	addwf	2,f
    73  0805                     __stringbase:	
    74  0805  3400               	retlw	0
    75  0806                     __end_of__stringtab:	
    76  0806                     _Table_KeyFalg:	
    77  0806  3401               	retlw	1
    78  0807  3402               	retlw	2
    79  0808  3404               	retlw	4
    80  0809  3408               	retlw	8
    81  080A  3410               	retlw	16
    82  080B  3420               	retlw	32
    83  080C  3440               	retlw	64
    84  080D  3480               	retlw	128
    85  080E                     __end_of_Table_KeyFalg:	
    86  080E                     _Table_KeyDown:	
    87  080E  340A               	retlw	10
    88  080F  340A               	retlw	10
    89  0810                     __end_of_Table_KeyDown:	
    90  0810                     _Table_KeyCap:	
    91  0810  3402               	retlw	2
    92  0811  3402               	retlw	2
    93  0812                     __end_of_Table_KeyCap:	
    94  0812                     _Table_KeyChannel:	
    95  0812  3442               	retlw	66
    96  0813  3443               	retlw	67
    97  0814                     __end_of_Table_KeyChannel:	
    98                           
    99                           	psect	nvBANK1
   100  00B6                     __pnvBANK1:	
   101  00B6                     _firstLock:	
   102  00B6                     	ds	1
   103  00B7                     _firstTime:	
   104  00B7                     	ds	1
   105  001E                     _PWMD01H	set	30
   106  001D                     _PWMCON2	set	29
   107  001A                     _PWMD1L	set	26
   108  0019                     _PWMD0L	set	25
   109  0018                     _PWMTH	set	24
   110  0017                     _PWMTL	set	23
   111  0016                     _PWMCON1	set	22
   112  0015                     _PWMCON0	set	21
   113  0014                     _OSCCON	set	20
   114  0013                     _T2CON	set	19
   115  0011                     _PR2	set	17
   116  000E                     _PIE1	set	14
   117  000D                     _PIR1	set	13
   118  000B                     _INTCON	set	11
   119  0008                     _WPUB	set	8
   120  0006                     _PORTB	set	6
   121  0005                     _TRISB	set	5
   122  0001                     _OPTION_REG	set	1
   123  0069                     _TMR2IF	set	105
   124  006B                     _RAIF	set	107
   125  0058                     _RBIF	set	88
   126  0059                     _INTF	set	89
   127  005B                     _RBIE	set	91
   128  0048                     _IOCB0	set	72
   129  0036                     _RB6	set	54
   130  0028                     _TRISB0	set	40
   131  002E                     _TRISB6	set	46
   132  0099                     _ADRESH	set	153
   133  0098                     _ADRESL	set	152
   134  0096                     _ADCON1	set	150
   135  0095                     _ADCON0	set	149
   136  0086                     _PORTA	set	134
   137  0085                     _TRISA	set	133
   138  0081                     _TMR0	set	129
   139  04B2                     _LDO_EN	set	1202
   140  04B6                     _CHS4	set	1206
   141  04A8                     _ADON	set	1192
   142  04A9                     _GODONE	set	1193
   143  0431                     _RA1	set	1073
   144  0117                     _KEYDATAH	set	279
   145  0116                     _KEYDATAL	set	278
   146  0113                     _KEYCON2	set	275
   147  0112                     _KEYCON1	set	274
   148  0111                     _KEYCON0	set	273
   149  0110                     _PIE2	set	272
   150  010F                     _PIR2	set	271
   151  0106                     _PORTC	set	262
   152  0105                     _TRISC	set	261
   153                           
   154                           	psect	cinit
   155  000D                     start_initialization:	
   156                           ; #config settings
   157                           
   158  000D                     __initialization:	
   159  000D  3020               	movlw	low __pbssBANK0
   160                           
   161                           ; Clear objects allocated to BITCOMMON
   162  000E  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   163                           
   164                           ; Clear objects allocated to COMMON
   165  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   166  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   167  0011  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   168                           
   169                           ; Clear objects allocated to BANK0
   170  0012  1383               	bcf	3,7	;select IRP bank0
   171  0013  0084               	movwf	4
   172  0014  304D               	movlw	low (__pbssBANK0+45)
   173  0015  158A  2745  118A   	fcall	clear_ram0
   174                           
   175                           ; Clear objects allocated to BANK1
   176  0018  30A0               	movlw	low __pbssBANK1
   177  0019  0084               	movwf	4
   178  001A  30B2               	movlw	low (__pbssBANK1+18)
   179  001B  158A  2745         	fcall	clear_ram0
   180  001D                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  001D                     __end_of__initialization:	
   184  001D  0183               	clrf	3
   185  001E  158A  2F78         	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	bitbssCOMMON
   188  03C0                     __pbitbssCOMMON:	
   189  03C0                     _b_ksleep:	
   190  03C0                     	ds	1
   191  03C1                     _b_kerr:	
   192  03C1                     	ds	1
   193  03C2                     _b_kclr:	
   194  03C2                     	ds	1
   195  03C3                     _b_kover1:	
   196  03C3                     	ds	1
   197  03C4                     _b_kover:	
   198  03C4                     	ds	1
   199  03C5                     _B_OnOff:	
   200  03C5                     	ds	1
   201  03C6                     _B_MainLoop:	
   202  03C6                     	ds	1
   203                           
   204                           	psect	bssCOMMON
   205  0079                     __pbssCOMMON:	
   206  0079                     _KeyData:	
   207  0079                     	ds	2
   208  007B                     _workStep:	
   209  007B                     	ds	1
   210                           
   211                           	psect	bssBANK0
   212  0020                     __pbssBANK0:	
   213  0020                     _KeyOldValue2:	
   214  0020                     	ds	4
   215  0024                     _KeyOldValue1:	
   216  0024                     	ds	4
   217  0028                     _KeyResSum:	
   218  0028                     	ds	4
   219  002C                     _KeyOldData:	
   220  002C                     	ds	2
   221  002E                     _power_ad:	
   222  002E                     	ds	2
   223  0030                     _shanshuoTime2:	
   224  0030                     	ds	2
   225  0032                     _shanshuoTime:	
   226  0032                     	ds	2
   227  0034                     _KeyUpShake:	
   228  0034                     	ds	2
   229  0036                     _KeyFlag:	
   230  0036                     	ds	2
   231  0038                     TurnKeyFlags@F84:	
   232  0038                     	ds	1
   233  0039                     TurnKeyFlags@F83:	
   234  0039                     	ds	1
   235  003A                     CheckKeyOldValue@F77:	
   236  003A                     	ds	1
   237  003B                     _KeyMaxSub:	
   238  003B                     	ds	1
   239  003C                     _KeyCounter:	
   240  003C                     	ds	1
   241  003D                     KeyServer@KeyOldFlag:	
   242  003D                     	ds	1
   243  003E                     _test_adc:	
   244  003E                     	ds	1
   245  003F                     _lowFanTime:	
   246  003F                     	ds	1
   247  0040                     _lowBatTime:	
   248  0040                     	ds	1
   249  0041                     _lowBatLock:	
   250  0041                     	ds	1
   251  0042                     _chrgFullTime:	
   252  0042                     	ds	1
   253  0043                     _chrgFullFlag:	
   254  0043                     	ds	1
   255  0044                     _chrgFlag:	
   256  0044                     	ds	1
   257  0045                     _fanOverTime:	
   258  0045                     	ds	1
   259  0046                     _count10s:	
   260  0046                     	ds	1
   261  0047                     _fanDuty:	
   262  0047                     	ds	1
   263  0048                     _wuhuaFlag:	
   264  0048                     	ds	1
   265  0049                     _count1s:	
   266  0049                     	ds	1
   267  004A                     _MainTime:	
   268  004A                     	ds	1
   269  004B                     _adresult:	
   270  004B                     	ds	2
   271                           
   272                           	psect	bssBANK1
   273  00A0                     __pbssBANK1:	
   274  00A0                     _KeyReference:	
   275  00A0                     	ds	4
   276  00A4                     _KeyOldValue0:	
   277  00A4                     	ds	4
   278  00A8                     CheckValidTime@F87:	
   279  00A8                     	ds	2
   280  00AA                     _time:	
   281  00AA                     	ds	2
   282  00AC                     _result:	
   283  00AC                     	ds	2
   284  00AE                     _wuhuaValue:	
   285  00AE                     	ds	2
   286  00B0                     _fanValue:	
   287  00B0                     	ds	2
   288                           
   289                           	psect	clrtext
   290  0F45                     clear_ram0:	
   291                           ;	Called with FSR containing the base address, and
   292                           ;	W with the last address+1
   293                           
   294  0F45  0064               	clrwdt	;clear the watchdog before getting into this loop
   295  0F46                     clrloop0:	
   296  0F46  0180               	clrf	0	;clear RAM location pointed to by FSR
   297  0F47  0A84               	incf	4,f	;increment pointer
   298  0F48  0604               	xorwf	4,w	;XOR with final address
   299  0F49  1903               	btfsc	3,2	;have we reached the end yet?
   300  0F4A  3400               	retlw	0	;all done for this memory range, return
   301  0F4B  0604               	xorwf	4,w	;XOR again to restore value
   302  0F4C  2F46               	goto	clrloop0	;do the next byte
   303                           
   304                           	psect	cstackBANK1
   305  00B2                     __pcstackBANK1:	
   306  00B2                     workCtr@power_temp:	
   307                           
   308                           ; 4 bytes @ 0x0
   309  00B2                     	ds	4
   310                           
   311                           	psect	cstackCOMMON
   312  0070                     __pcstackCOMMON:	
   313  0070                     ?_SystemEnterSleep:	
   314  0070                     ?_CheckTouchKey:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_Init_System:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_Refurbish_Sfr:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_KeyServer:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_Isr_Timer:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ??_Isr_Timer:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_WorkSleep:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_chrgCtr:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_keyLedCtr:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_pwmInit:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_pwmStop:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_fanInit:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_fanStop:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_fanCtr:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_wuhuaCtr:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_workCtr:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_main:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_KeyIsIn:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_KeyClearOne:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_KeyClearIn:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_KeyStopClear:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_ClearResSum:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_GetTouchKeyValue:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_CheckOnceResult:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_CheckKeyOldValue:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_TurnKeyFlags:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_CheckValidTime:	
   393                           ; 1 bytes @ 0x0
   394                           
   395                           
   396                           ; 1 bytes @ 0x0
   397  0070                     	ds	2
   398  0072                     ??_Init_System:	
   399  0072                     ??_Refurbish_Sfr:	
   400                           ; 1 bytes @ 0x2
   401                           
   402  0072                     ??_KeyServer:	
   403                           ; 1 bytes @ 0x2
   404                           
   405  0072                     ?_ADC_Sample:	
   406                           ; 1 bytes @ 0x2
   407                           
   408  0072                     ??_chrgCtr:	
   409                           ; 1 bytes @ 0x2
   410                           
   411  0072                     ??_pwmInit:	
   412                           ; 1 bytes @ 0x2
   413                           
   414  0072                     ??_pwmStop:	
   415                           ; 1 bytes @ 0x2
   416                           
   417  0072                     ??_fanInit:	
   418                           ; 1 bytes @ 0x2
   419                           
   420  0072                     ??_fanStop:	
   421                           ; 1 bytes @ 0x2
   422                           
   423  0072                     ??_KeyIsIn:	
   424                           ; 1 bytes @ 0x2
   425                           
   426  0072                     ??_KeyClearOne:	
   427                           ; 1 bytes @ 0x2
   428                           
   429  0072                     ??_ClearResSum:	
   430                           ; 1 bytes @ 0x2
   431                           
   432  0072                     ?_KeyHave:	
   433                           ; 1 bytes @ 0x2
   434                           
   435  0072                     ??_CheckValidTime:	
   436                           ; 1 bytes @ 0x2
   437                           
   438  0072                     ??___lmul:	
   439                           ; 1 bytes @ 0x2
   440                           
   441  0072                     ?___lwmod:	
   442                           ; 1 bytes @ 0x2
   443                           
   444  0072                     ?___ftpack:	
   445                           ; 2 bytes @ 0x2
   446                           
   447  0072                     ADC_Sample@adldo:	
   448                           ; 3 bytes @ 0x2
   449                           
   450  0072                     KeyIsIn@46:	
   451                           ; 1 bytes @ 0x2
   452                           
   453  0072                     KeyClearOne@49:	
   454                           ; 1 bytes @ 0x2
   455                           
   456  0072                     ClearResSum@56:	
   457                           ; 1 bytes @ 0x2
   458                           
   459  0072                     KeyHave@59:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     ___lwmod@divisor:	
   463                           ; 2 bytes @ 0x2
   464                           
   465  0072                     ___ftpack@arg:	
   466                           ; 2 bytes @ 0x2
   467                           
   468  0072                     ___lmul@product:	
   469                           ; 3 bytes @ 0x2
   470                           
   471                           
   472                           ; 4 bytes @ 0x2
   473  0072                     	ds	1
   474  0073                     ??_ADC_Sample:	
   475  0073                     ??_KeyStopClear:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     ??_GetTouchKeyValue:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     KeyIsIn@45:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     KeyStopClear@53:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     GetTouchKeyValue@64:	
   488                           ; 1 bytes @ 0x3
   489                           
   490                           
   491                           ; 2 bytes @ 0x3
   492  0073                     	ds	1
   493  0074                     ??_KeyClearIn:	
   494  0074                     ??_KeyHave:	
   495                           ; 1 bytes @ 0x4
   496                           
   497  0074                     ??_CheckKeyOldValue:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0074                     KeyClearIn@51:	
   501                           ; 1 bytes @ 0x4
   502                           
   503  0074                     KeyHave@58:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0074                     ___lwmod@dividend:	
   507                           ; 1 bytes @ 0x4
   508                           
   509                           
   510                           ; 2 bytes @ 0x4
   511  0074                     	ds	1
   512  0075                     ??_TurnKeyFlags:	
   513  0075                     ___ftpack@exp:	
   514                           ; 1 bytes @ 0x5
   515                           
   516  0075                     GetTouchKeyValue@63:	
   517                           ; 1 bytes @ 0x5
   518                           
   519                           
   520                           ; 2 bytes @ 0x5
   521  0075                     	ds	1
   522  0076                     ??___lwmod:	
   523  0076                     ___ftpack@sign:	
   524                           ; 1 bytes @ 0x6
   525                           
   526  0076                     ___lwmod@counter:	
   527                           ; 1 bytes @ 0x6
   528                           
   529                           
   530                           ; 1 bytes @ 0x6
   531  0076                     	ds	1
   532  0077                     ??_keyLedCtr:	
   533  0077                     ??_fanCtr:	
   534                           ; 1 bytes @ 0x7
   535                           
   536  0077                     ??_wuhuaCtr:	
   537                           ; 1 bytes @ 0x7
   538                           
   539  0077                     ??_workCtr:	
   540                           ; 1 bytes @ 0x7
   541                           
   542  0077                     ??___lwtoft:	
   543                           ; 1 bytes @ 0x7
   544                           
   545  0077                     GetTouchKeyValue@62:	
   546                           ; 1 bytes @ 0x7
   547                           
   548                           
   549                           ; 1 bytes @ 0x7
   550  0077                     	ds	1
   551  0078                     ??_CheckTouchKey:	
   552  0078                     ??_WorkSleep:	
   553                           ; 1 bytes @ 0x8
   554                           
   555  0078                     ??_main:	
   556                           ; 1 bytes @ 0x8
   557                           
   558                           
   559                           	psect	cstackBANK0
   560  004D                     __pcstackBANK0:	
   561                           ; 1 bytes @ 0x8
   562                           
   563  004D                     ??_SystemEnterSleep:	
   564  004D                     ??___ftpack:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  004D                     ??_CheckOnceResult:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  004D                     ?___lmul:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  004D                     ADC_Sample@j:	
   574                           ; 4 bytes @ 0x0
   575                           
   576  004D                     CheckKeyOldValue@79:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  004D                     ___lmul@multiplier:	
   580                           ; 2 bytes @ 0x0
   581                           
   582                           
   583                           ; 4 bytes @ 0x0
   584  004D                     	ds	1
   585  004E                     ADC_Sample@adch:	
   586                           
   587                           ; 1 bytes @ 0x1
   588  004E                     	ds	1
   589  004F                     ADC_Sample@i:	
   590  004F                     CheckKeyOldValue@80:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  004F                     SystemEnterSleep@94:	
   594                           ; 2 bytes @ 0x2
   595                           
   596                           
   597                           ; 2 bytes @ 0x2
   598  004F                     	ds	1
   599  0050                     ?___lwtoft:	
   600  0050                     ___lwtoft@c:	
   601                           ; 3 bytes @ 0x3
   602                           
   603  0050                     ADC_Sample@adsum:	
   604                           ; 2 bytes @ 0x3
   605                           
   606                           
   607                           ; 4 bytes @ 0x3
   608  0050                     	ds	1
   609  0051                     CheckKeyOldValue@78:	
   610  0051                     CheckOnceResult@73:	
   611                           ; 1 bytes @ 0x4
   612                           
   613  0051                     SystemEnterSleep@93:	
   614                           ; 2 bytes @ 0x4
   615                           
   616  0051                     ___lmul@multiplicand:	
   617                           ; 2 bytes @ 0x4
   618                           
   619                           
   620                           ; 4 bytes @ 0x4
   621  0051                     	ds	2
   622  0053                     ?___ftdiv:	
   623  0053                     CheckOnceResult@70:	
   624                           ; 3 bytes @ 0x6
   625                           
   626  0053                     SystemEnterSleep@92:	
   627                           ; 1 bytes @ 0x6
   628                           
   629  0053                     ___ftdiv@f2:	
   630                           ; 2 bytes @ 0x6
   631                           
   632                           
   633                           ; 3 bytes @ 0x6
   634  0053                     	ds	1
   635  0054                     ADC_Sample@admin:	
   636  0054                     CheckOnceResult@72:	
   637                           ; 2 bytes @ 0x7
   638                           
   639                           
   640                           ; 2 bytes @ 0x7
   641  0054                     	ds	1
   642  0055                     SystemEnterSleep@91:	
   643                           
   644                           ; 1 bytes @ 0x8
   645  0055                     	ds	1
   646  0056                     CheckOnceResult@69:	
   647  0056                     ADC_Sample@admax:	
   648                           ; 1 bytes @ 0x9
   649                           
   650  0056                     ___ftdiv@f1:	
   651                           ; 2 bytes @ 0x9
   652                           
   653                           
   654                           ; 3 bytes @ 0x9
   655  0056                     	ds	1
   656  0057                     CheckOnceResult@71:	
   657                           
   658                           ; 2 bytes @ 0xA
   659  0057                     	ds	1
   660  0058                     ADC_Sample@ad_temp:	
   661                           
   662                           ; 2 bytes @ 0xB
   663  0058                     	ds	1
   664  0059                     ??___ftdiv:	
   665  0059                     CheckOnceResult@68:	
   666                           ; 1 bytes @ 0xC
   667                           
   668                           
   669                           ; 1 bytes @ 0xC
   670  0059                     	ds	1
   671  005A                     fanCtr@maxFanValue:	
   672  005A                     wuhuaCtr@wuhua_temp:	
   673                           ; 1 bytes @ 0xD
   674                           
   675                           
   676                           ; 4 bytes @ 0xD
   677  005A                     	ds	1
   678  005B                     fanCtr@fan_temp:	
   679                           
   680                           ; 4 bytes @ 0xE
   681  005B                     	ds	1
   682  005C                     ___ftdiv@cntr:	
   683                           
   684                           ; 1 bytes @ 0xF
   685  005C                     	ds	1
   686  005D                     ___ftdiv@f3:	
   687                           
   688                           ; 3 bytes @ 0x10
   689  005D                     	ds	3
   690  0060                     ___ftdiv@exp:	
   691                           
   692                           ; 1 bytes @ 0x13
   693  0060                     	ds	1
   694  0061                     ___ftdiv@sign:	
   695                           
   696                           ; 1 bytes @ 0x14
   697  0061                     	ds	1
   698  0062                     ?___fttol:	
   699  0062                     ___fttol@f1:	
   700                           ; 4 bytes @ 0x15
   701                           
   702                           
   703                           ; 3 bytes @ 0x15
   704  0062                     	ds	4
   705  0066                     ??___fttol:	
   706                           
   707                           ; 1 bytes @ 0x19
   708  0066                     	ds	3
   709  0069                     ___fttol@sign1:	
   710                           
   711                           ; 1 bytes @ 0x1C
   712  0069                     	ds	1
   713  006A                     ___fttol@lval:	
   714                           
   715                           ; 4 bytes @ 0x1D
   716  006A                     	ds	4
   717  006E                     ___fttol@exp1:	
   718                           
   719                           ; 1 bytes @ 0x21
   720  006E                     	ds	1
   721                           
   722                           	psect	maintext
   723  0F78                     __pmaintext:	
   724 ;;
   725 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   726 ;;
   727 ;; *************** function _main *****************
   728 ;; Defined at:
   729 ;;		line 607 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : B00/0
   740 ;;		On exit  : 300/100
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   743 ;;      Params:         0       0       0       0
   744 ;;      Locals:         0       0       0       0
   745 ;;      Temps:          0       0       0       0
   746 ;;      Totals:         0       0       0       0
   747 ;;Total ram usage:        0 bytes
   748 ;; Hardware stack levels required when called:    6
   749 ;; This function calls:
   750 ;;		_CheckTouchKey
   751 ;;		_Init_System
   752 ;;		_KeyServer
   753 ;;		_Refurbish_Sfr
   754 ;;		_WorkSleep
   755 ;;		_chrgCtr
   756 ;;		_workCtr
   757 ;; This function is called by:
   758 ;;		Startup code after reset
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           
   763                           ;psect for function _main
   764  0F78                     _main:	
   765                           
   766                           ;main.c: 609: Init_System();
   767                           
   768                           ;incstack = 0
   769                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   770  0F78  118A  2020  158A   	fcall	_Init_System
   771  0F7B  30C8               	movlw	200
   772                           
   773                           ;main.c: 610: firstLock = 1;
   774  0F7C  01B6               	clrf	_firstLock^(0+128)
   775  0F7D  0AB6               	incf	_firstLock^(0+128),f
   776                           
   777                           ;main.c: 611: firstTime = 200;
   778  0F7E  00B7               	movwf	_firstTime^(0+128)
   779  0F7F                     l4279:	
   780                           
   781                           ;main.c: 613: {
   782                           ;main.c: 614: if(B_MainLoop)
   783  0F7F  1F78               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   784  0F80  2F7F               	goto	l4279
   785                           
   786                           ;main.c: 615: {
   787                           ;main.c: 616: B_MainLoop = 0;
   788  0F81  1378               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   789  0F82  0064               	clrwdt	;# 
   790                           
   791                           ;main.c: 619: CheckTouchKey();
   792  0F83  118A  2076  158A   	fcall	_CheckTouchKey
   793                           
   794                           ;main.c: 620: chrgCtr();
   795  0F86  158A  274D  158A   	fcall	_chrgCtr
   796                           
   797                           ;main.c: 621: Refurbish_Sfr();
   798  0F89  118A  238D  158A   	fcall	_Refurbish_Sfr
   799                           
   800                           ;main.c: 622: KeyServer();
   801  0F8C  158A  27B0  158A   	fcall	_KeyServer
   802                           
   803                           ;main.c: 623: workCtr();
   804  0F8F  118A  24D2  158A   	fcall	_workCtr
   805                           
   806                           ;main.c: 624: if(firstTime == 0 && chrgFlag == 0 && workStep == 0 && wuhuaFlag == 0 && s
      +                          hanshuoTime == 0 && shanshuoTime2 == 0)
   807  0F92  1683               	bsf	3,5	;RP0=1, select bank1
   808  0F93  0837               	movf	_firstTime^(0+128),w
   809  0F94  1D03               	btfss	3,2
   810  0F95  2FAC               	goto	l4307
   811  0F96  1283               	bcf	3,5	;RP0=0, select bank0
   812  0F97  0844               	movf	_chrgFlag,w
   813  0F98  1D03               	btfss	3,2
   814  0F99  2FAC               	goto	l4307
   815  0F9A  087B               	movf	_workStep,w
   816  0F9B  1D03               	btfss	3,2
   817  0F9C  2FAC               	goto	l4307
   818  0F9D  0848               	movf	_wuhuaFlag,w
   819  0F9E  1D03               	btfss	3,2
   820  0F9F  2FAC               	goto	l4307
   821  0FA0  0832               	movf	_shanshuoTime,w
   822  0FA1  0433               	iorwf	_shanshuoTime+1,w
   823  0FA2  1D03               	btfss	3,2
   824  0FA3  2FAC               	goto	l4307
   825  0FA4  0830               	movf	_shanshuoTime2,w
   826  0FA5  0431               	iorwf	_shanshuoTime2+1,w
   827  0FA6  1D03               	btfss	3,2
   828  0FA7  2FAC               	goto	l4307
   829                           
   830                           ;main.c: 625: {
   831                           ;main.c: 626: WorkSleep();
   832  0FA8  118A  203F  158A   	fcall	_WorkSleep
   833                           
   834                           ;main.c: 627: }
   835  0FAB  2F7F               	goto	l4279
   836  0FAC                     l4307:	
   837                           
   838                           ;main.c: 628: else
   839                           ;main.c: 629: {
   840                           ;main.c: 630: time = 0;
   841  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
   842  0FAD  01AA               	clrf	_time^(0+128)
   843  0FAE  01AB               	clrf	(_time+1)^(0+128)
   844  0FAF  2F7F               	goto	l4279
   845  0FB0                     __end_of_main:	
   846                           
   847                           	psect	text2
   848  0403                     __ptext2:	
   849 ;; *************** function _wuhuaCtr *****************
   850 ;; Defined at:
   851 ;;		line 506 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  wuhua_temp      4   13[BANK0 ] volatile unsigned long 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 200/100
   862 ;;		On exit  : 200/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   865 ;;      Params:         0       0       0       0
   866 ;;      Locals:         0       4       0       0
   867 ;;      Temps:          0       0       0       0
   868 ;;      Totals:         0       4       0       0
   869 ;;Total ram usage:        4 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    2
   872 ;; This function calls:
   873 ;;		_ADC_Sample
   874 ;;		___lmul
   875 ;;		_pwmInit
   876 ;;		_pwmStop
   877 ;; This function is called by:
   878 ;;		_workCtr
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _wuhuaCtr
   884  0403                     _wuhuaCtr:	
   885  0403                     l3975:	
   886                           ;incstack = 0
   887                           ; Regs used in _wuhuaCtr: [wreg+status,2+status,0+pclath+cstack]
   888                           
   889                           
   890                           ;main.c: 508: if(count1s == 0)
   891  0403  1283               	bcf	3,5	;RP0=0, select bank0
   892  0404  0849               	movf	_count1s,w
   893  0405  1D03               	btfss	3,2
   894  0406  2C0C               	goto	l3981
   895                           
   896                           ;main.c: 509: {
   897                           ;main.c: 510: if(++count10s >= 10)
   898  0407  300A               	movlw	10
   899  0408  0AC6               	incf	_count10s,f
   900  0409  0246               	subwf	_count10s,w
   901  040A  1803               	btfsc	3,0
   902                           
   903                           ;main.c: 511: {
   904                           ;main.c: 512: count10s = 0;
   905  040B  01C6               	clrf	_count10s
   906  040C                     l3981:	
   907                           
   908                           ;main.c: 513: }
   909                           ;main.c: 514: }
   910                           ;main.c: 515: if(wuhuaFlag == 1 || (wuhuaFlag == 2 && count10s < 5))
   911  040C  0348               	decf	_wuhuaFlag,w
   912  040D  1903               	btfsc	3,2
   913  040E  2C17               	goto	l3987
   914  040F  3002               	movlw	2
   915  0410  0648               	xorwf	_wuhuaFlag,w
   916  0411  1D03               	btfss	3,2
   917  0412  2C43               	goto	l4001
   918  0413  3005               	movlw	5
   919  0414  0246               	subwf	_count10s,w
   920  0415  1803               	skipnc
   921  0416  2C43               	goto	l4001
   922  0417                     l3987:	
   923                           
   924                           ;main.c: 516: {
   925                           ;main.c: 517: pwmInit();
   926  0417  2788  118A         	fcall	_pwmInit
   927  0419  3003               	movlw	3
   928                           
   929                           ;main.c: 531: test_adc = ADC_Sample(3, 0);
   930  041A  01F2               	clrf	ADC_Sample@adldo
   931  041B  264C  118A         	fcall	_ADC_Sample
   932  041D  00BE               	movwf	_test_adc	;volatile
   933                           
   934                           ;main.c: 532: if (0xA5 == test_adc)
   935  041E  30A5               	movlw	165
   936  041F  063E               	xorwf	_test_adc,w	;volatile
   937  0420  1D03               	btfss	3,2
   938  0421  0008               	return
   939                           
   940                           ;main.c: 533: {
   941                           ;main.c: 534: volatile unsigned long wuhua_temp;
   942                           ;main.c: 535: if(power_ad > 0)
   943  0422  082E               	movf	_power_ad,w	;volatile
   944  0423  042F               	iorwf	_power_ad+1,w	;volatile
   945  0424  1903               	btfsc	3,2
   946  0425  0008               	return
   947                           
   948                           ;main.c: 536: {
   949                           ;main.c: 537: wuhua_temp = (unsigned long)(1UL*adresult * power_ad)/4096;
   950  0426  27B9  118A         	fcall	PL10	;call to abstracted procedure
   951  0428  249F  118A         	fcall	___lmul
   952  042A  0850               	movf	?___lmul+3,w
   953  042B  00DD               	movwf	wuhuaCtr@wuhua_temp+3	;volatile
   954  042C  084F               	movf	?___lmul+2,w
   955  042D  00DC               	movwf	wuhuaCtr@wuhua_temp+2	;volatile
   956  042E  084E               	movf	?___lmul+1,w
   957  042F  00DB               	movwf	wuhuaCtr@wuhua_temp+1	;volatile
   958  0430  084D               	movf	?___lmul,w
   959  0431  00DA               	movwf	wuhuaCtr@wuhua_temp	;volatile
   960  0432  300C               	movlw	12
   961  0433                     u3795:	
   962  0433  1003               	clrc
   963  0434  0CDD               	rrf	wuhuaCtr@wuhua_temp+3,f	;volatile
   964  0435  0CDC               	rrf	wuhuaCtr@wuhua_temp+2,f	;volatile
   965  0436  0CDB               	rrf	wuhuaCtr@wuhua_temp+1,f	;volatile
   966  0437  0CDA               	rrf	wuhuaCtr@wuhua_temp,f	;volatile
   967  0438  3EFF               	addlw	-1
   968  0439  1D03               	skipz
   969  043A  2C33               	goto	u3795
   970                           
   971                           ;main.c: 538: wuhuaValue = (unsigned int)(wuhua_temp);
   972  043B  085B               	movf	wuhuaCtr@wuhua_temp+1,w	;volatile
   973  043C  1683               	bsf	3,5	;RP0=1, select bank1
   974  043D  00AF               	movwf	(_wuhuaValue+1)^(0+128)
   975  043E  1283               	bcf	3,5	;RP0=0, select bank0
   976  043F  085A               	movf	wuhuaCtr@wuhua_temp,w	;volatile
   977  0440  1683               	bsf	3,5	;RP0=1, select bank1
   978  0441  00AE               	movwf	_wuhuaValue^(0+128)
   979                           
   980                           ;main.c: 544: }
   981                           ;main.c: 545: }
   982  0442  0008               	return
   983  0443                     l4001:	
   984                           
   985                           ;main.c: 546: else
   986                           ;main.c: 547: {
   987                           ;main.c: 548: pwmStop();
   988  0443  2FA5               	ljmp	l3739
   989  0444                     __end_of_wuhuaCtr:	
   990  0444                     __ptext7:	
   991 ;; *************** function _fanCtr *****************
   992 ;; Defined at:
   993 ;;		line 455 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  fan_temp        4   14[BANK0 ] volatile unsigned long 
   998 ;;  maxFanValue     1   13[BANK0 ] unsigned char 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, status,2, status,0, pclath, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : 300/100
  1005 ;;		On exit  : 200/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1008 ;;      Params:         0       0       0       0
  1009 ;;      Locals:         0       5       0       0
  1010 ;;      Temps:          0       0       0       0
  1011 ;;      Totals:         0       5       0       0
  1012 ;;Total ram usage:        5 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    2
  1015 ;; This function calls:
  1016 ;;		_ADC_Sample
  1017 ;;		___lmul
  1018 ;;		_fanInit
  1019 ;;		_fanStop
  1020 ;; This function is called by:
  1021 ;;		_workCtr
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _fanCtr
  1027  0444                     _fanCtr:	
  1028                           
  1029                           ;main.c: 457: if(workStep > 0)
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _fanCtr: [wreg+status,2+status,0+pclath+cstack]
  1033  0444  087B               	movf	_workStep,w
  1034  0445  1903               	btfsc	3,2
  1035  0446  2C9A               	goto	l3969
  1036                           
  1037                           ;main.c: 458: {
  1038                           ;main.c: 459: PORTA |= 0x04;
  1039  0447  1506               	bsf	6,2	;volatile
  1040                           
  1041                           ;main.c: 460: unsigned char maxFanValue = 52;
  1042  0448  3034               	movlw	52
  1043  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1044  044A  00DA               	movwf	fanCtr@maxFanValue
  1045                           
  1046                           ;main.c: 461: if(workStep == 1)
  1047  044B  0B7B               	decfsz	_workStep,w
  1048  044C  2C4F               	goto	l3937
  1049                           
  1050                           ;main.c: 462: {
  1051                           ;main.c: 463: maxFanValue = 40;
  1052  044D  3028               	movlw	40
  1053  044E  00DA               	movwf	fanCtr@maxFanValue
  1054  044F                     l3937:	
  1055  044F  300D               	movlw	13
  1056                           
  1057                           ;main.c: 464: }
  1058                           ;main.c: 465: test_adc = ADC_Sample(13, 0);
  1059  0450  01F2               	clrf	ADC_Sample@adldo
  1060  0451  264C  118A         	fcall	_ADC_Sample
  1061  0453  00BE               	movwf	_test_adc	;volatile
  1062                           
  1063                           ;main.c: 466: if (0xA5 == test_adc)
  1064  0454  30A5               	movlw	165
  1065  0455  063E               	xorwf	_test_adc,w	;volatile
  1066  0456  1D03               	btfss	3,2
  1067  0457  2C78               	goto	l3949
  1068                           
  1069                           ;main.c: 467: {
  1070                           ;main.c: 468: volatile unsigned long fan_temp;
  1071                           ;main.c: 469: if(power_ad > 0)
  1072  0458  082E               	movf	_power_ad,w	;volatile
  1073  0459  042F               	iorwf	_power_ad+1,w	;volatile
  1074  045A  1903               	btfsc	3,2
  1075  045B  2C78               	goto	l3949
  1076                           
  1077                           ;main.c: 470: {
  1078                           ;main.c: 471: fan_temp = ((unsigned long)1UL*adresult * power_ad)/4096;
  1079  045C  27B9  118A         	fcall	PL10	;call to abstracted procedure
  1080  045E  249F  118A         	fcall	___lmul
  1081  0460  0850               	movf	?___lmul+3,w
  1082  0461  00DE               	movwf	fanCtr@fan_temp+3	;volatile
  1083  0462  084F               	movf	?___lmul+2,w
  1084  0463  00DD               	movwf	fanCtr@fan_temp+2	;volatile
  1085  0464  084E               	movf	?___lmul+1,w
  1086  0465  00DC               	movwf	fanCtr@fan_temp+1	;volatile
  1087  0466  084D               	movf	?___lmul,w
  1088  0467  00DB               	movwf	fanCtr@fan_temp	;volatile
  1089  0468  300C               	movlw	12
  1090  0469                     u3675:	
  1091  0469  1003               	clrc
  1092  046A  0CDE               	rrf	fanCtr@fan_temp+3,f	;volatile
  1093  046B  0CDD               	rrf	fanCtr@fan_temp+2,f	;volatile
  1094  046C  0CDC               	rrf	fanCtr@fan_temp+1,f	;volatile
  1095  046D  0CDB               	rrf	fanCtr@fan_temp,f	;volatile
  1096  046E  3EFF               	addlw	-1
  1097  046F  1D03               	skipz
  1098  0470  2C69               	goto	u3675
  1099                           
  1100                           ;main.c: 472: fanValue = (unsigned int)(fan_temp);
  1101  0471  085C               	movf	fanCtr@fan_temp+1,w	;volatile
  1102  0472  1683               	bsf	3,5	;RP0=1, select bank1
  1103  0473  00B1               	movwf	(_fanValue+1)^(0+128)
  1104  0474  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0475  085B               	movf	fanCtr@fan_temp,w	;volatile
  1106  0476  1683               	bsf	3,5	;RP0=1, select bank1
  1107  0477  00B0               	movwf	_fanValue^(0+128)
  1108  0478                     l3949:	
  1109                           
  1110                           ;main.c: 473: }
  1111                           ;main.c: 474: }
  1112                           ;main.c: 475: if(fanValue > 1300)
  1113  0478  3005               	movlw	5
  1114  0479  1683               	bsf	3,5	;RP0=1, select bank1
  1115  047A  0231               	subwf	(_fanValue+1)^(0+128),w
  1116  047B  3015               	movlw	21
  1117  047C  1903               	skipnz
  1118  047D  0230               	subwf	_fanValue^(0+128),w
  1119  047E  1C03               	skipc
  1120  047F  2C8D               	goto	l3957
  1121                           
  1122                           ;main.c: 476: {
  1123                           ;main.c: 477: if(++fanOverTime > 50)
  1124  0480  3033               	movlw	51
  1125  0481  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0482  0AC5               	incf	_fanOverTime,f
  1127  0483  0245               	subwf	_fanOverTime,w
  1128  0484  1C03               	skipc
  1129  0485  2C8F               	goto	l3959
  1130  0486  30C2               	movlw	194
  1131                           
  1132                           ;main.c: 478: {
  1133                           ;main.c: 479: fanOverTime = 0;
  1134  0487  01C5               	clrf	_fanOverTime
  1135                           
  1136                           ;main.c: 480: workStep = 0;
  1137  0488  01FB               	clrf	_workStep
  1138                           
  1139                           ;main.c: 481: shanshuoTime = 450;
  1140  0489  00B2               	movwf	_shanshuoTime
  1141  048A  3001               	movlw	1
  1142  048B  00B3               	movwf	_shanshuoTime+1
  1143  048C  2C8F               	goto	l3959
  1144  048D                     l3957:	
  1145                           
  1146                           ;main.c: 484: else
  1147                           ;main.c: 485: {
  1148                           ;main.c: 486: fanOverTime = 0;
  1149  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1150  048E  01C5               	clrf	_fanOverTime
  1151  048F                     l3959:	
  1152                           
  1153                           ;main.c: 487: }
  1154                           ;main.c: 488: if(fanDuty < maxFanValue)
  1155  048F  085A               	movf	fanCtr@maxFanValue,w
  1156  0490  0247               	subwf	_fanDuty,w
  1157  0491  1803               	skipnc
  1158  0492  2C95               	goto	l3963
  1159                           
  1160                           ;main.c: 489: {
  1161                           ;main.c: 490: fanDuty++;
  1162  0493  0AC7               	incf	_fanDuty,f
  1163                           
  1164                           ;main.c: 491: }
  1165  0494  2C99               	goto	l3967
  1166  0495                     l3963:	
  1167                           
  1168                           ;main.c: 492: else if(fanDuty > maxFanValue)
  1169  0495  0847               	movf	_fanDuty,w
  1170  0496  025A               	subwf	fanCtr@maxFanValue,w
  1171  0497  1C03               	btfss	3,0
  1172                           
  1173                           ;main.c: 493: {
  1174                           ;main.c: 494: fanDuty--;
  1175  0498  03C7               	decf	_fanDuty,f
  1176  0499                     l3967:	
  1177                           
  1178                           ;main.c: 495: }
  1179                           ;main.c: 496: fanInit();
  1180  0499  2F94               	ljmp	l3745
  1181  049A                     l3969:	
  1182                           ;main.c: 497: }
  1183                           
  1184                           
  1185                           ;main.c: 498: else
  1186                           ;main.c: 499: {
  1187                           ;main.c: 500: fanStop();
  1188  049A  27A0               	fcall	_fanStop
  1189                           
  1190                           ;main.c: 501: fanDuty = 0;
  1191  049B  01C7               	clrf	_fanDuty
  1192                           
  1193                           ;main.c: 502: PORTA &= 0xFB;
  1194  049C  1683               	bsf	3,5	;RP0=1, select bank1
  1195  049D  1106               	bcf	6,2	;volatile
  1196  049E  0008               	return
  1197  049F                     __end_of_fanCtr:	
  1198  049F                     __ptext10:	
  1199 ;; *************** function ___lmul *****************
  1200 ;; Defined at:
  1201 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul32.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1204 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  product         4    2[COMMON] unsigned long 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  4    0[BANK0 ] unsigned long 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 300/0
  1213 ;;		On exit  : 300/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1216 ;;      Params:         0       8       0       0
  1217 ;;      Locals:         4       0       0       0
  1218 ;;      Temps:          0       0       0       0
  1219 ;;      Totals:         4       8       0       0
  1220 ;;Total ram usage:       12 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_fanCtr
  1227 ;;		_wuhuaCtr
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function ___lmul
  1233  049F                     ___lmul:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1237  049F  01F2               	clrf	___lmul@product
  1238  04A0  01F3               	clrf	___lmul@product+1
  1239  04A1  01F4               	clrf	___lmul@product+2
  1240  04A2  01F5               	clrf	___lmul@product+3
  1241  04A3                     l1308:	
  1242  04A3  1C4D               	btfss	___lmul@multiplier,0
  1243  04A4  2CB9               	goto	l3765
  1244  04A5  0851               	movf	___lmul@multiplicand,w
  1245  04A6  07F2               	addwf	___lmul@product,f
  1246  04A7  0852               	movf	___lmul@multiplicand+1,w
  1247  04A8  1103               	clrz
  1248  04A9  1803               	skipnc
  1249  04AA  3E01               	addlw	1
  1250  04AB  1D03               	btfss	3,2
  1251  04AC  07F3               	addwf	___lmul@product+1,f
  1252  04AD  0853               	movf	___lmul@multiplicand+2,w
  1253  04AE  1103               	clrz
  1254  04AF  1803               	skipnc
  1255  04B0  3E01               	addlw	1
  1256  04B1  1D03               	btfss	3,2
  1257  04B2  07F4               	addwf	___lmul@product+2,f
  1258  04B3  0854               	movf	___lmul@multiplicand+3,w
  1259  04B4  1103               	clrz
  1260  04B5  1803               	skipnc
  1261  04B6  3E01               	addlw	1
  1262  04B7  1D03               	btfss	3,2
  1263  04B8  07F5               	addwf	___lmul@product+3,f
  1264  04B9                     l3765:	
  1265  04B9  1003               	clrc
  1266  04BA  0DD1               	rlf	___lmul@multiplicand,f
  1267  04BB  0DD2               	rlf	___lmul@multiplicand+1,f
  1268  04BC  0DD3               	rlf	___lmul@multiplicand+2,f
  1269  04BD  0DD4               	rlf	___lmul@multiplicand+3,f
  1270  04BE  1003               	clrc
  1271  04BF  0CD0               	rrf	___lmul@multiplier+3,f
  1272  04C0  0CCF               	rrf	___lmul@multiplier+2,f
  1273  04C1  0CCE               	rrf	___lmul@multiplier+1,f
  1274  04C2  0CCD               	rrf	___lmul@multiplier,f
  1275  04C3  0850               	movf	___lmul@multiplier+3,w
  1276  04C4  044F               	iorwf	___lmul@multiplier+2,w
  1277  04C5  044E               	iorwf	___lmul@multiplier+1,w
  1278  04C6  044D               	iorwf	___lmul@multiplier,w
  1279  04C7  1D03               	skipz
  1280  04C8  2CA3               	goto	l1308
  1281  04C9  0875               	movf	___lmul@product+3,w
  1282  04CA  00D0               	movwf	?___lmul+3
  1283  04CB  0874               	movf	___lmul@product+2,w
  1284  04CC  00CF               	movwf	?___lmul+2
  1285  04CD  0873               	movf	___lmul@product+1,w
  1286  04CE  00CE               	movwf	?___lmul+1
  1287  04CF  0872               	movf	___lmul@product,w
  1288  04D0  00CD               	movwf	?___lmul
  1289  04D1  0008               	return
  1290  04D2                     __end_of___lmul:	
  1291  04D2                     __ptext1:	
  1292 ;; *************** function _workCtr *****************
  1293 ;; Defined at:
  1294 ;;		line 553 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  power_temp      4    0[BANK1 ] volatile unsigned long 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0, pclath, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 300/0
  1305 ;;		On exit  : 200/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1308 ;;      Params:         0       0       0       0
  1309 ;;      Locals:         0       0       4       0
  1310 ;;      Temps:          0       0       0       0
  1311 ;;      Totals:         0       0       4       0
  1312 ;;Total ram usage:        4 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    3
  1315 ;; This function calls:
  1316 ;;		_ADC_Sample
  1317 ;;		___ftdiv
  1318 ;;		___fttol
  1319 ;;		___lwtoft
  1320 ;;		_fanCtr
  1321 ;;		_keyLedCtr
  1322 ;;		_wuhuaCtr
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           
  1329                           ;psect for function _workCtr
  1330  04D2                     _workCtr:	
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
  1334  04D2  301F               	movlw	31
  1335                           
  1336                           ;main.c: 555: test_adc = ADC_Sample(31, 0);
  1337  04D3  01F2               	clrf	ADC_Sample@adldo
  1338  04D4  264C  118A         	fcall	_ADC_Sample
  1339  04D6  00BE               	movwf	_test_adc	;volatile
  1340                           
  1341                           ;main.c: 556: if (0xA5 == test_adc)
  1342  04D7  30A5               	movlw	165
  1343  04D8  063E               	xorwf	_test_adc,w	;volatile
  1344  04D9  1D03               	btfss	3,2
  1345  04DA  2D0C               	goto	l4205
  1346                           
  1347                           ;main.c: 557: {
  1348                           ;main.c: 558: volatile unsigned long power_temp;
  1349                           ;main.c: 560: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1350  04DB  3096               	movlw	150
  1351  04DC  01D6               	clrf	___ftdiv@f1
  1352  04DD  00D7               	movwf	___ftdiv@f1+1
  1353  04DE  304A               	movlw	74
  1354  04DF  00D8               	movwf	___ftdiv@f1+2
  1355  04E0  084C               	movf	_adresult+1,w	;volatile
  1356  04E1  00D1               	movwf	___lwtoft@c+1
  1357  04E2  084B               	movf	_adresult,w	;volatile
  1358  04E3  00D0               	movwf	___lwtoft@c
  1359  04E4  25FE  118A         	fcall	___lwtoft
  1360  04E6  0850               	movf	?___lwtoft,w
  1361  04E7  00D3               	movwf	___ftdiv@f2
  1362  04E8  0851               	movf	?___lwtoft+1,w
  1363  04E9  00D4               	movwf	___ftdiv@f2+1
  1364  04EA  0852               	movf	?___lwtoft+2,w
  1365  04EB  00D5               	movwf	___ftdiv@f2+2
  1366  04EC  2543  118A         	fcall	___ftdiv
  1367  04EE  0853               	movf	?___ftdiv,w
  1368  04EF  00E2               	movwf	___fttol@f1
  1369  04F0  0854               	movf	?___ftdiv+1,w
  1370  04F1  00E3               	movwf	___fttol@f1+1
  1371  04F2  0855               	movf	?___ftdiv+2,w
  1372  04F3  00E4               	movwf	___fttol@f1+2
  1373  04F4  25A5  118A         	fcall	___fttol
  1374  04F6  0865               	movf	?___fttol+3,w
  1375  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  1376  04F8  00B5               	movwf	(workCtr@power_temp+3)^(0+128)	;volatile
  1377  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  1378  04FA  0864               	movf	?___fttol+2,w
  1379  04FB  1683               	bsf	3,5	;RP0=1, select bank1
  1380  04FC  00B4               	movwf	(workCtr@power_temp+2)^(0+128)	;volatile
  1381  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  1382  04FE  0863               	movf	?___fttol+1,w
  1383  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  1384  0500  00B3               	movwf	(workCtr@power_temp+1)^(0+128)	;volatile
  1385  0501  1283               	bcf	3,5	;RP0=0, select bank0
  1386  0502  0862               	movf	?___fttol,w
  1387  0503  1683               	bsf	3,5	;RP0=1, select bank1
  1388  0504  00B2               	movwf	workCtr@power_temp^(0+128)	;volatile
  1389                           
  1390                           ;main.c: 561: power_ad = (unsigned int)(power_temp);
  1391  0505  0833               	movf	(workCtr@power_temp+1)^(0+128),w	;volatile
  1392  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0507  00AF               	movwf	_power_ad+1	;volatile
  1394  0508  1683               	bsf	3,5	;RP0=1, select bank1
  1395  0509  0832               	movf	workCtr@power_temp^(0+128),w	;volatile
  1396  050A  1283               	bcf	3,5	;RP0=0, select bank0
  1397  050B  00AE               	movwf	_power_ad	;volatile
  1398  050C                     l4205:	
  1399                           
  1400                           ;main.c: 562: }
  1401                           ;main.c: 563: if(workStep == 2 && power_ad < 2900)
  1402  050C  3002               	movlw	2
  1403  050D  067B               	xorwf	_workStep,w
  1404  050E  1D03               	btfss	3,2
  1405  050F  2D20               	goto	l4215
  1406  0510  300B               	movlw	11
  1407  0511  022F               	subwf	_power_ad+1,w	;volatile
  1408  0512  3054               	movlw	84
  1409  0513  1903               	skipnz
  1410  0514  022E               	subwf	_power_ad,w	;volatile
  1411  0515  1803               	skipnc
  1412  0516  2D20               	goto	l4215
  1413                           
  1414                           ;main.c: 564: {
  1415                           ;main.c: 565: if(++lowFanTime > 200)
  1416  0517  30C9               	movlw	201
  1417  0518  0ABF               	incf	_lowFanTime,f
  1418  0519  023F               	subwf	_lowFanTime,w
  1419  051A  1C03               	skipc
  1420  051B  2D21               	goto	l4217
  1421                           
  1422                           ;main.c: 566: {
  1423                           ;main.c: 567: lowFanTime = 0;
  1424  051C  01BF               	clrf	_lowFanTime
  1425                           
  1426                           ;main.c: 568: workStep = 1;
  1427  051D  01FB               	clrf	_workStep
  1428  051E  0AFB               	incf	_workStep,f
  1429  051F  2D21               	goto	l4217
  1430  0520                     l4215:	
  1431                           
  1432                           ;main.c: 571: else
  1433                           ;main.c: 572: {
  1434                           ;main.c: 573: lowFanTime = 0;
  1435  0520  01BF               	clrf	_lowFanTime
  1436  0521                     l4217:	
  1437                           
  1438                           ;main.c: 574: }
  1439                           ;main.c: 575: if(power_ad < 2700)
  1440  0521  300A               	movlw	10
  1441  0522  022F               	subwf	_power_ad+1,w	;volatile
  1442  0523  308C               	movlw	140
  1443  0524  1903               	skipnz
  1444  0525  022E               	subwf	_power_ad,w	;volatile
  1445  0526  1803               	skipnc
  1446  0527  2D33               	goto	l4225
  1447                           
  1448                           ;main.c: 576: {
  1449                           ;main.c: 577: if(++lowBatTime > 200)
  1450  0528  30C9               	movlw	201
  1451  0529  0AC0               	incf	_lowBatTime,f
  1452  052A  0240               	subwf	_lowBatTime,w
  1453  052B  1C03               	skipc
  1454  052C  2D34               	goto	l4227
  1455                           
  1456                           ;main.c: 578: {
  1457                           ;main.c: 579: lowBatTime = 0;
  1458  052D  01C0               	clrf	_lowBatTime
  1459                           
  1460                           ;main.c: 580: lowBatLock = 1;
  1461  052E  01C1               	clrf	_lowBatLock
  1462  052F  0AC1               	incf	_lowBatLock,f
  1463                           
  1464                           ;main.c: 581: workStep = 0;
  1465  0530  01FB               	clrf	_workStep
  1466                           
  1467                           ;main.c: 582: wuhuaFlag = 0;
  1468  0531  01C8               	clrf	_wuhuaFlag
  1469  0532  2D34               	goto	l4227
  1470  0533                     l4225:	
  1471                           
  1472                           ;main.c: 585: else
  1473                           ;main.c: 586: {
  1474                           ;main.c: 587: lowBatTime = 0;
  1475  0533  01C0               	clrf	_lowBatTime
  1476  0534                     l4227:	
  1477                           
  1478                           ;main.c: 588: }
  1479                           ;main.c: 589: if(firstTime > 0)
  1480  0534  1683               	bsf	3,5	;RP0=1, select bank1
  1481  0535  0837               	movf	_firstTime^(0+128),w
  1482  0536  1903               	btfsc	3,2
  1483  0537  2D3E               	goto	l4235
  1484                           
  1485                           ;main.c: 590: {
  1486                           ;main.c: 591: firstTime--;
  1487  0538  03B7               	decf	_firstTime^(0+128),f
  1488                           
  1489                           ;main.c: 592: PORTB = 0x00;
  1490  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1491  053A  0186               	clrf	6	;volatile
  1492                           
  1493                           ;main.c: 593: PORTA = 0x00;
  1494  053B  1683               	bsf	3,5	;RP0=1, select bank1
  1495  053C  0186               	clrf	6	;volatile
  1496                           
  1497                           ;main.c: 594: }
  1498  053D  0008               	return
  1499  053E                     l4235:	
  1500                           
  1501                           ;main.c: 595: else
  1502                           ;main.c: 596: {
  1503                           ;main.c: 597: keyLedCtr();
  1504  053E  271C  118A         	fcall	_keyLedCtr
  1505                           
  1506                           ;main.c: 598: fanCtr();
  1507  0540  2444  118A         	fcall	_fanCtr
  1508                           
  1509                           ;main.c: 599: wuhuaCtr();
  1510  0542  2C03               	ljmp	l3975
  1511  0543                     __end_of_workCtr:	
  1512  0543                     __ptext14:	
  1513 ;; *************** function ___ftdiv *****************
  1514 ;; Defined at:
  1515 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;  f2              3    6[BANK0 ] float 
  1518 ;;  f1              3    9[BANK0 ] float 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  f3              3   16[BANK0 ] float 
  1521 ;;  sign            1   20[BANK0 ] unsigned char 
  1522 ;;  exp             1   19[BANK0 ] unsigned char 
  1523 ;;  cntr            1   15[BANK0 ] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  3    6[BANK0 ] float 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 300/0
  1530 ;;		On exit  : 300/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1533 ;;      Params:         0       6       0       0
  1534 ;;      Locals:         0       6       0       0
  1535 ;;      Temps:          0       3       0       0
  1536 ;;      Totals:         0      15       0       0
  1537 ;;Total ram usage:       15 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    2
  1540 ;; This function calls:
  1541 ;;		___ftpack
  1542 ;; This function is called by:
  1543 ;;		_workCtr
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function ___ftdiv
  1549  0543                     ___ftdiv:	
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1553  0543  0856               	movf	___ftdiv@f1,w
  1554  0544  00D9               	movwf	??___ftdiv
  1555  0545  0857               	movf	___ftdiv@f1+1,w
  1556  0546  00DA               	movwf	??___ftdiv+1
  1557  0547  0858               	movf	___ftdiv@f1+2,w
  1558  0548  00DB               	movwf	??___ftdiv+2
  1559  0549  1003               	clrc
  1560  054A  0D5A               	rlf	??___ftdiv+1,w
  1561  054B  0D5B               	rlf	??___ftdiv+2,w
  1562  054C  00E0               	movwf	___ftdiv@exp
  1563  054D  0860               	movf	___ftdiv@exp,w
  1564  054E  1D03               	btfss	3,2
  1565  054F  2D51               	goto	l4077
  1566  0550  2FE0               	ljmp	PL40	;call to abstracted procedure
  1567  0551                     l4077:	
  1568  0551  0853               	movf	___ftdiv@f2,w
  1569  0552  00D9               	movwf	??___ftdiv
  1570  0553  0854               	movf	___ftdiv@f2+1,w
  1571  0554  00DA               	movwf	??___ftdiv+1
  1572  0555  0855               	movf	___ftdiv@f2+2,w
  1573  0556  00DB               	movwf	??___ftdiv+2
  1574  0557  1003               	clrc
  1575  0558  0D5A               	rlf	??___ftdiv+1,w
  1576  0559  0D5B               	rlf	??___ftdiv+2,w
  1577  055A  00E1               	movwf	___ftdiv@sign
  1578  055B  0861               	movf	___ftdiv@sign,w
  1579  055C  1D03               	btfss	3,2
  1580  055D  2D5F               	goto	l1507
  1581  055E  2FE0               	ljmp	PL40	;call to abstracted procedure
  1582  055F                     l1507:	
  1583  055F  3089               	movlw	137
  1584  0560  01DD               	clrf	___ftdiv@f3
  1585  0561  01DE               	clrf	___ftdiv@f3+1
  1586  0562  01DF               	clrf	___ftdiv@f3+2
  1587  0563  0761               	addwf	___ftdiv@sign,w
  1588  0564  00D9               	movwf	??___ftdiv
  1589  0565  02E0               	subwf	___ftdiv@exp,f
  1590  0566  0858               	movf	___ftdiv@f1+2,w
  1591  0567  00E1               	movwf	___ftdiv@sign
  1592  0568  0855               	movf	___ftdiv@f2+2,w
  1593  0569  06E1               	xorwf	___ftdiv@sign,f
  1594  056A  3080               	movlw	128
  1595  056B  05E1               	andwf	___ftdiv@sign,f
  1596  056C  3018               	movlw	24
  1597  056D  17D7               	bsf	___ftdiv@f1+1,7
  1598  056E  01D8               	clrf	___ftdiv@f1+2
  1599  056F  17D4               	bsf	___ftdiv@f2+1,7
  1600  0570  01D5               	clrf	___ftdiv@f2+2
  1601  0571  00DC               	movwf	___ftdiv@cntr
  1602  0572                     l4099:	
  1603  0572  1003               	clrc
  1604  0573  0DDD               	rlf	___ftdiv@f3,f
  1605  0574  0DDE               	rlf	___ftdiv@f3+1,f
  1606  0575  0DDF               	rlf	___ftdiv@f3+2,f
  1607  0576  0855               	movf	___ftdiv@f2+2,w
  1608  0577  0258               	subwf	___ftdiv@f1+2,w
  1609  0578  1D03               	skipz
  1610  0579  2D80               	goto	u3955
  1611  057A  0854               	movf	___ftdiv@f2+1,w
  1612  057B  0257               	subwf	___ftdiv@f1+1,w
  1613  057C  1D03               	skipz
  1614  057D  2D80               	goto	u3955
  1615  057E  0853               	movf	___ftdiv@f2,w
  1616  057F  0256               	subwf	___ftdiv@f1,w
  1617  0580                     u3955:	
  1618  0580  1C03               	skipc
  1619  0581  2D8E               	goto	L4
  1620  0582  0853               	movf	___ftdiv@f2,w
  1621  0583  02D6               	subwf	___ftdiv@f1,f
  1622  0584  0854               	movf	___ftdiv@f2+1,w
  1623  0585  1C03               	skipc
  1624  0586  0F54               	incfsz	___ftdiv@f2+1,w
  1625  0587  02D7               	subwf	___ftdiv@f1+1,f
  1626  0588  0855               	movf	___ftdiv@f2+2,w
  1627  0589  1C03               	skipc
  1628  058A  0A55               	incf	___ftdiv@f2+2,w
  1629  058B  02D8               	subwf	___ftdiv@f1+2,f
  1630  058C  145D               	bsf	___ftdiv@f3,0
  1631  058D  1003               	clrc
  1632  058E                     L4:	
  1633  058E  0DD6               	rlf	___ftdiv@f1,f
  1634  058F  0DD7               	rlf	___ftdiv@f1+1,f
  1635  0590  0DD8               	rlf	___ftdiv@f1+2,f
  1636  0591  0BDC               	decfsz	___ftdiv@cntr,f
  1637  0592  2D72               	goto	l4099
  1638  0593  085D               	movf	___ftdiv@f3,w
  1639  0594  00F2               	movwf	___ftpack@arg
  1640  0595  085E               	movf	___ftdiv@f3+1,w
  1641  0596  00F3               	movwf	___ftpack@arg+1
  1642  0597  085F               	movf	___ftdiv@f3+2,w
  1643  0598  00F4               	movwf	___ftpack@arg+2
  1644  0599  0860               	movf	___ftdiv@exp,w
  1645  059A  00F5               	movwf	___ftpack@exp
  1646  059B  0861               	movf	___ftdiv@sign,w
  1647  059C  00F6               	movwf	___ftpack@sign
  1648  059D  260E               	fcall	___ftpack
  1649  059E  0872               	movf	?___ftpack,w
  1650  059F  00D3               	movwf	?___ftdiv
  1651  05A0  0873               	movf	?___ftpack+1,w
  1652  05A1  00D4               	movwf	?___ftdiv+1
  1653  05A2  0874               	movf	?___ftpack+2,w
  1654  05A3  00D5               	movwf	?___ftdiv+2
  1655  05A4  0008               	return
  1656  05A5                     __end_of___ftdiv:	
  1657  05A5                     __ptext13:	
  1658 ;; *************** function ___fttol *****************
  1659 ;; Defined at:
  1660 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  f1              3   21[BANK0 ] float 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  lval            4   29[BANK0 ] unsigned long 
  1665 ;;  exp1            1   33[BANK0 ] unsigned char 
  1666 ;;  sign1           1   28[BANK0 ] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  4   21[BANK0 ] long 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, status,0
  1671 ;; Tracked objects:
  1672 ;;		On entry : 300/0
  1673 ;;		On exit  : 300/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1676 ;;      Params:         0       4       0       0
  1677 ;;      Locals:         0       6       0       0
  1678 ;;      Temps:          0       3       0       0
  1679 ;;      Totals:         0      13       0       0
  1680 ;;Total ram usage:       13 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_workCtr
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           
  1691                           ;psect for function ___fttol
  1692  05A5                     ___fttol:	
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1696  05A5  27CF  118A         	fcall	PL26	;call to abstracted procedure
  1697  05A7  1003               	clrc
  1698  05A8  0D67               	rlf	??___fttol+1,w
  1699  05A9  0D68               	rlf	??___fttol+2,w
  1700  05AA  00EE               	movwf	___fttol@exp1
  1701  05AB  086E               	movf	___fttol@exp1,w
  1702  05AC  1D03               	btfss	3,2
  1703  05AD  2DB3               	goto	l4117
  1704  05AE                     l4115:	
  1705  05AE  01E2               	clrf	?___fttol
  1706  05AF  01E3               	clrf	?___fttol+1
  1707  05B0  01E4               	clrf	?___fttol+2
  1708  05B1  01E5               	clrf	?___fttol+3
  1709  05B2  0008               	return
  1710  05B3                     l4117:	
  1711  05B3  27CF  118A         	fcall	PL26	;call to abstracted procedure
  1712  05B5  3017               	movlw	23
  1713  05B6                     u3985:	
  1714  05B6  1003               	clrc
  1715  05B7  0CE8               	rrf	??___fttol+2,f
  1716  05B8  0CE7               	rrf	??___fttol+1,f
  1717  05B9  0CE6               	rrf	??___fttol,f
  1718  05BA  3EFF               	addlw	-1
  1719  05BB  1D03               	skipz
  1720  05BC  2DB6               	goto	u3985
  1721  05BD  0866               	movf	??___fttol,w
  1722  05BE  00E9               	movwf	___fttol@sign1
  1723  05BF  17E3               	bsf	___fttol@f1+1,7
  1724  05C0  01E4               	clrf	___fttol@f1+2
  1725  05C1  0862               	movf	___fttol@f1,w
  1726  05C2  00EA               	movwf	___fttol@lval
  1727  05C3  0863               	movf	___fttol@f1+1,w
  1728  05C4  00EB               	movwf	___fttol@lval+1
  1729  05C5  0864               	movf	___fttol@f1+2,w
  1730  05C6  00EC               	movwf	___fttol@lval+2
  1731  05C7  308E               	movlw	142
  1732  05C8  01ED               	clrf	___fttol@lval+3
  1733  05C9  02EE               	subwf	___fttol@exp1,f
  1734  05CA  1FEE               	btfss	___fttol@exp1,7
  1735  05CB  2DD9               	goto	l4137
  1736  05CC  086E               	movf	___fttol@exp1,w
  1737  05CD  3A80               	xorlw	128
  1738  05CE  3E8F               	addlw	143
  1739  05CF  1C03               	btfss	3,0
  1740  05D0  2DAE               	goto	l4115
  1741  05D1                     l4133:	
  1742  05D1  1003               	clrc
  1743  05D2  0CED               	rrf	___fttol@lval+3,f
  1744  05D3  0CEC               	rrf	___fttol@lval+2,f
  1745  05D4  0CEB               	rrf	___fttol@lval+1,f
  1746  05D5  0CEA               	rrf	___fttol@lval,f
  1747  05D6  0FEE               	incfsz	___fttol@exp1,f
  1748  05D7  2DD1               	goto	l4133
  1749  05D8  2DE7               	goto	l4145
  1750  05D9                     l4137:	
  1751  05D9  3018               	movlw	24
  1752  05DA  026E               	subwf	___fttol@exp1,w
  1753  05DB  1803               	btfsc	3,0
  1754  05DC  2DAE               	goto	l4115
  1755  05DD                     l4143:	
  1756  05DD  086E               	movf	___fttol@exp1,w
  1757  05DE  1903               	btfsc	3,2
  1758  05DF  2DE7               	goto	l4145
  1759  05E0  1003               	clrc
  1760  05E1  0DEA               	rlf	___fttol@lval,f
  1761  05E2  0DEB               	rlf	___fttol@lval+1,f
  1762  05E3  0DEC               	rlf	___fttol@lval+2,f
  1763  05E4  0DED               	rlf	___fttol@lval+3,f
  1764  05E5  03EE               	decf	___fttol@exp1,f
  1765  05E6  2DDD               	goto	l4143
  1766  05E7                     l4145:	
  1767  05E7  0869               	movf	___fttol@sign1,w
  1768  05E8  1903               	btfsc	3,2
  1769  05E9  2DF5               	goto	l4149
  1770  05EA  09EA               	comf	___fttol@lval,f
  1771  05EB  09EB               	comf	___fttol@lval+1,f
  1772  05EC  09EC               	comf	___fttol@lval+2,f
  1773  05ED  09ED               	comf	___fttol@lval+3,f
  1774  05EE  0AEA               	incf	___fttol@lval,f
  1775  05EF  1903               	skipnz
  1776  05F0  0AEB               	incf	___fttol@lval+1,f
  1777  05F1  1903               	skipnz
  1778  05F2  0AEC               	incf	___fttol@lval+2,f
  1779  05F3  1903               	skipnz
  1780  05F4  0AED               	incf	___fttol@lval+3,f
  1781  05F5                     l4149:	
  1782  05F5  086D               	movf	___fttol@lval+3,w
  1783  05F6  00E5               	movwf	?___fttol+3
  1784  05F7  086C               	movf	___fttol@lval+2,w
  1785  05F8  00E4               	movwf	?___fttol+2
  1786  05F9  086B               	movf	___fttol@lval+1,w
  1787  05FA  00E3               	movwf	?___fttol+1
  1788  05FB  086A               	movf	___fttol@lval,w
  1789  05FC  00E2               	movwf	?___fttol
  1790  05FD  0008               	return
  1791  05FE                     __end_of___fttol:	
  1792  05FE                     __ptext12:	
  1793 ;; *************** function ___lwtoft *****************
  1794 ;; Defined at:
  1795 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  c               2    3[BANK0 ] unsigned int 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  3    3[BANK0 ] float 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, status,0, pclath, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 300/0
  1806 ;;		On exit  : 300/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1809 ;;      Params:         0       3       0       0
  1810 ;;      Locals:         0       0       0       0
  1811 ;;      Temps:          0       0       0       0
  1812 ;;      Totals:         0       3       0       0
  1813 ;;Total ram usage:        3 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    2
  1816 ;; This function calls:
  1817 ;;		___ftpack
  1818 ;; This function is called by:
  1819 ;;		_workCtr
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function ___lwtoft
  1825  05FE                     ___lwtoft:	
  1826                           
  1827                           ;incstack = 0
  1828                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1829  05FE  0850               	movf	___lwtoft@c,w
  1830  05FF  00F2               	movwf	___ftpack@arg
  1831  0600  0851               	movf	___lwtoft@c+1,w
  1832  0601  00F3               	movwf	___ftpack@arg+1
  1833  0602  308E               	movlw	142
  1834  0603  01F4               	clrf	___ftpack@arg+2
  1835  0604  00F5               	movwf	___ftpack@exp
  1836  0605  01F6               	clrf	___ftpack@sign
  1837  0606  260E               	fcall	___ftpack
  1838  0607  0872               	movf	?___ftpack,w
  1839  0608  00D0               	movwf	?___lwtoft
  1840  0609  0873               	movf	?___ftpack+1,w
  1841  060A  00D1               	movwf	?___lwtoft+1
  1842  060B  0874               	movf	?___ftpack+2,w
  1843  060C  00D2               	movwf	?___lwtoft+2
  1844  060D  0008               	return
  1845  060E                     __end_of___lwtoft:	
  1846  060E                     __ptext15:	
  1847 ;; *************** function ___ftpack *****************
  1848 ;; Defined at:
  1849 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  arg             3    2[COMMON] unsigned um
  1852 ;;  exp             1    5[COMMON] unsigned char 
  1853 ;;  sign            1    6[COMMON] unsigned char 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  3    2[COMMON] float 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0
  1860 ;; Tracked objects:
  1861 ;;		On entry : 300/0
  1862 ;;		On exit  : 300/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1865 ;;      Params:         5       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       3       0       0
  1868 ;;      Totals:         5       3       0       0
  1869 ;;Total ram usage:        8 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		___ftdiv
  1876 ;;		___lwtoft
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function ___ftpack
  1882  060E                     ___ftpack:	
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1886  060E  0875               	movf	___ftpack@exp,w
  1887  060F  1903               	btfsc	3,2
  1888  0610  2E16               	goto	l1453
  1889  0611  0874               	movf	___ftpack@arg+2,w
  1890  0612  0473               	iorwf	___ftpack@arg+1,w
  1891  0613  0472               	iorwf	___ftpack@arg,w
  1892  0614  1D03               	skipz
  1893  0615  2E1D               	goto	l3779
  1894  0616                     l1453:	
  1895  0616  01F2               	clrf	?___ftpack
  1896  0617  01F3               	clrf	?___ftpack+1
  1897  0618  01F4               	clrf	?___ftpack+2
  1898  0619  0008               	return
  1899  061A                     l3777:	
  1900  061A  0AF5               	incf	___ftpack@exp,f
  1901  061B  27D6  118A         	fcall	PL34	;call to abstracted procedure
  1902  061D                     l3779:	
  1903  061D  30FE               	movlw	254
  1904  061E  0574               	andwf	___ftpack@arg+2,w
  1905  061F  1903               	btfsc	3,2
  1906  0620  2E2A               	goto	l3783
  1907  0621  2E1A               	goto	l3777
  1908  0622                     l3781:	
  1909  0622  0AF5               	incf	___ftpack@exp,f
  1910  0623  0AF2               	incf	___ftpack@arg,f
  1911  0624  1903               	skipnz
  1912  0625  0AF3               	incf	___ftpack@arg+1,f
  1913  0626  1903               	skipnz
  1914  0627  0AF4               	incf	___ftpack@arg+2,f
  1915  0628  27D6  118A         	fcall	PL34	;call to abstracted procedure
  1916  062A                     l3783:	
  1917  062A  30FF               	movlw	255
  1918  062B  0574               	andwf	___ftpack@arg+2,w
  1919  062C  1903               	btfsc	3,2
  1920  062D  2E38               	goto	l3787
  1921  062E  2E22               	goto	l3781
  1922  062F                     l3789:	
  1923  062F  3002               	movlw	2
  1924  0630  0275               	subwf	___ftpack@exp,w
  1925  0631  1C03               	btfss	3,0
  1926  0632  2E3A               	goto	l1465
  1927  0633  03F5               	decf	___ftpack@exp,f
  1928  0634  1003               	clrc
  1929  0635  0DF2               	rlf	___ftpack@arg,f
  1930  0636  0DF3               	rlf	___ftpack@arg+1,f
  1931  0637  0DF4               	rlf	___ftpack@arg+2,f
  1932  0638                     l3787:	
  1933  0638  1FF3               	btfss	___ftpack@arg+1,7
  1934  0639  2E2F               	goto	l3789
  1935  063A                     l1465:	
  1936  063A  1C75               	btfss	___ftpack@exp,0
  1937  063B  13F3               	bcf	___ftpack@arg+1,7
  1938  063C  1003               	clrc
  1939  063D  0CF5               	rrf	___ftpack@exp,f
  1940  063E  0875               	movf	___ftpack@exp,w
  1941  063F  00CF               	movwf	??___ftpack+2
  1942  0640  01CE               	clrf	??___ftpack+1
  1943  0641  01CD               	clrf	??___ftpack
  1944  0642  084D               	movf	??___ftpack,w
  1945  0643  04F2               	iorwf	___ftpack@arg,f
  1946  0644  084E               	movf	??___ftpack+1,w
  1947  0645  04F3               	iorwf	___ftpack@arg+1,f
  1948  0646  084F               	movf	??___ftpack+2,w
  1949  0647  04F4               	iorwf	___ftpack@arg+2,f
  1950  0648  0876               	movf	___ftpack@sign,w
  1951  0649  1D03               	btfss	3,2
  1952  064A  17F4               	bsf	___ftpack@arg+2,7
  1953  064B  0008               	return
  1954  064C                     __end_of___ftpack:	
  1955  064C                     __ptext11:	
  1956 ;; *************** function _ADC_Sample *****************
  1957 ;; Defined at:
  1958 ;;		line 264 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  adch            1    wreg     unsigned char 
  1961 ;;  adldo           1    2[COMMON] unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  adch            1    1[BANK0 ] unsigned char 
  1964 ;;  j               1    0[BANK0 ] unsigned char 
  1965 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1966 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1967 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1968 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1969 ;;  i               1    2[BANK0 ] unsigned char 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      unsigned char 
  1972 ;; Registers used:
  1973 ;;		wreg, status,2, status,0
  1974 ;; Tracked objects:
  1975 ;;		On entry : 300/0
  1976 ;;		On exit  : 300/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1979 ;;      Params:         1       0       0       0
  1980 ;;      Locals:         0      13       0       0
  1981 ;;      Temps:          4       0       0       0
  1982 ;;      Totals:         5      13       0       0
  1983 ;;Total ram usage:       18 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_fanCtr
  1990 ;;		_wuhuaCtr
  1991 ;;		_workCtr
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _ADC_Sample
  1997  064C                     _ADC_Sample:	
  1998                           
  1999                           ;incstack = 0
  2000                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2001                           ;ADC_Sample@adch stored from wreg
  2002  064C  00CE               	movwf	ADC_Sample@adch
  2003                           
  2004                           ;main.c: 266: volatile unsigned long adsum = 0;
  2005                           
  2006                           ;main.c: 267: volatile unsigned int admin = 0, admax = 0;
  2007  064D  27C6  118A         	fcall	PL18	;call to abstracted procedure
  2008                           
  2009                           ;main.c: 268: volatile unsigned int ad_temp = 0;
  2010  064F  01D8               	clrf	ADC_Sample@ad_temp	;volatile
  2011  0650  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  2012                           
  2013                           ;main.c: 270: if ((!LDO_EN) && (adldo & 0x04) )
  2014  0651  1683               	bsf	3,5	;RP0=1, select bank1
  2015  0652  1D16               	btfss	22,2	;volatile
  2016  0653  1D72               	btfss	ADC_Sample@adldo,2
  2017  0654  2E5D               	goto	l3667
  2018                           
  2019                           ;main.c: 271: {
  2020                           ;main.c: 273: ADCON1 = adldo;
  2021  0655  0872               	movf	ADC_Sample@adldo,w
  2022  0656  0096               	movwf	22	;volatile
  2023                           
  2024                           ;main.c: 274: _delay((unsigned long)((100)*(8000000/4000000.0)));
  2025  0657  3042               	movlw	66
  2026  0658  00F3               	movwf	??_ADC_Sample
  2027  0659                     u4277:	
  2028  0659  0BF3               	decfsz	??_ADC_Sample,f
  2029  065A  2E59               	goto	u4277
  2030  065B  0000               	nop
  2031                           
  2032                           ;main.c: 275: }
  2033  065C  2E5F               	goto	l3669
  2034  065D                     l3667:	
  2035                           
  2036                           ;main.c: 276: else
  2037                           ;main.c: 277: ADCON1 = adldo;
  2038  065D  0872               	movf	ADC_Sample@adldo,w
  2039  065E  0096               	movwf	22	;volatile
  2040  065F                     l3669:	
  2041                           
  2042                           ;main.c: 279: if(adch & 0x10)
  2043  065F  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0660  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0661  1E4E               	btfss	ADC_Sample@adch,4
  2046  0662  2E68               	goto	l3677
  2047                           
  2048                           ;main.c: 280: {
  2049                           ;main.c: 281: CHS4 = 1;
  2050  0663  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0664  1716               	bsf	22,6	;volatile
  2052                           
  2053                           ;main.c: 282: adch &= 0x0f;
  2054  0665  300F               	movlw	15
  2055  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0667  05CE               	andwf	ADC_Sample@adch,f
  2057  0668                     l3677:	
  2058                           
  2059                           ;main.c: 285: for (i = 0; i < 10; i++)
  2060  0668  01CF               	clrf	ADC_Sample@i
  2061  0669                     l3683:	
  2062                           
  2063                           ;main.c: 286: {
  2064                           ;main.c: 287: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2065  0669  084E               	movf	ADC_Sample@adch,w
  2066  066A  00F3               	movwf	??_ADC_Sample
  2067  066B  3001               	movlw	1
  2068  066C  1003               	clrc
  2069  066D                     L3:	
  2070  066D  0DF3               	rlf	??_ADC_Sample,f
  2071  066E  3EFF               	addlw	-1
  2072  066F  1003               	clrc
  2073  0670  1D03               	skipz
  2074  0671  2E6D               	goto	L3
  2075  0672  0D73               	rlf	??_ADC_Sample,w
  2076  0673  3841               	iorlw	65
  2077  0674  1683               	bsf	3,5	;RP0=1, select bank1
  2078  0675  0095               	movwf	21	;volatile
  2079  0676  0000               	nop	;# 
  2080  0677  0000               	nop	;# 
  2081  0678  0000               	nop	;# 
  2082  0679  0000               	nop	;# 
  2083                           
  2084                           ;main.c: 292: GODONE = 1;
  2085  067A  1683               	bsf	3,5	;RP0=1, select bank1
  2086  067B  1303               	bcf	3,6	;RP1=0, select bank1
  2087  067C  1495               	bsf	21,1	;volatile
  2088                           
  2089                           ;main.c: 294: unsigned char j = 0;
  2090  067D  1283               	bcf	3,5	;RP0=0, select bank0
  2091  067E  01CD               	clrf	ADC_Sample@j
  2092  067F                     l968:	
  2093                           ;main.c: 295: while (GODONE)
  2094                           
  2095  067F  1683               	bsf	3,5	;RP0=1, select bank1
  2096  0680  1C95               	btfss	21,1	;volatile
  2097  0681  2E89               	goto	l3693
  2098                           
  2099                           ;main.c: 296: {
  2100                           ;main.c: 297: _delay((unsigned long)((2)*(8000000/4000000.0)));
  2101  0682  2E83               	nop2	;2 cycle nop
  2102  0683  2E84               	nop2	;2 cycle nop
  2103                           
  2104                           ;main.c: 299: if (0 == (--j))
  2105  0684  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0685  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0686  0BCD               	decfsz	ADC_Sample@j,f
  2108  0687  2E7F               	goto	l968
  2109                           
  2110                           ;main.c: 300: return 0;
  2111  0688  3400               	retlw	0
  2112  0689                     l3693:	
  2113                           
  2114                           ;main.c: 301: }
  2115                           ;main.c: 303: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2116  0689  0819               	movf	25,w	;volatile
  2117  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2118  068B  00D8               	movwf	ADC_Sample@ad_temp	;volatile
  2119  068C  01D9               	clrf	ADC_Sample@ad_temp+1	;volatile
  2120  068D  0ED8               	swapf	ADC_Sample@ad_temp,f	;volatile
  2121  068E  0ED9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2122  068F  30F0               	movlw	240
  2123  0690  05D9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2124  0691  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2125  0692  390F               	andlw	15
  2126  0693  04D9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2127  0694  30F0               	movlw	240
  2128  0695  05D8               	andwf	ADC_Sample@ad_temp,f	;volatile
  2129  0696  1683               	bsf	3,5	;RP0=1, select bank1
  2130  0697  0E18               	swapf	24,w	;volatile
  2131  0698  390F               	andlw	15
  2132  0699  1283               	bcf	3,5	;RP0=0, select bank0
  2133  069A  07D8               	addwf	ADC_Sample@ad_temp,f	;volatile
  2134  069B  1803               	skipnc
  2135  069C  0AD9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2136                           
  2137                           ;main.c: 305: if (0 == admax)
  2138  069D  0856               	movf	ADC_Sample@admax,w	;volatile
  2139  069E  0457               	iorwf	ADC_Sample@admax+1,w	;volatile
  2140  069F  1D03               	btfss	3,2
  2141  06A0  2EA4               	goto	l3701
  2142                           
  2143                           ;main.c: 306: {
  2144                           ;main.c: 307: admax = ad_temp;
  2145  06A1  27DB  118A         	fcall	PL38	;call to abstracted procedure
  2146  06A3  2EB7               	goto	l3707
  2147  06A4                     l3701:	
  2148                           ;main.c: 309: }
  2149                           
  2150                           ;main.c: 308: admin = ad_temp;
  2151                           
  2152                           
  2153                           ;main.c: 310: else if (ad_temp > admax)
  2154  06A4  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2155  06A5  0257               	subwf	ADC_Sample@admax+1,w	;volatile
  2156  06A6  1D03               	skipz
  2157  06A7  2EAA               	goto	u3255
  2158  06A8  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2159  06A9  0256               	subwf	ADC_Sample@admax,w	;volatile
  2160  06AA                     u3255:	
  2161  06AA  1803               	skipnc
  2162  06AB  2EAF               	goto	l3705
  2163                           
  2164                           ;main.c: 311: admax = ad_temp;
  2165  06AC  27DB  118A         	fcall	PL38	;call to abstracted procedure
  2166  06AE  2EBB               	goto	l974
  2167  06AF                     l3705:	
  2168                           
  2169                           ;main.c: 312: else if (ad_temp < admin)
  2170  06AF  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2171  06B0  0259               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2172  06B1  1D03               	skipz
  2173  06B2  2EB5               	goto	u3265
  2174  06B3  0854               	movf	ADC_Sample@admin,w	;volatile
  2175  06B4  0258               	subwf	ADC_Sample@ad_temp,w	;volatile
  2176  06B5                     u3265:	
  2177  06B5  1803               	skipnc
  2178  06B6  2EBB               	goto	l974
  2179  06B7                     l3707:	
  2180                           
  2181                           ;main.c: 313: admin = ad_temp;
  2182  06B7  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2183  06B8  00D5               	movwf	ADC_Sample@admin+1	;volatile
  2184  06B9  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2185  06BA  00D4               	movwf	ADC_Sample@admin	;volatile
  2186  06BB                     l974:	
  2187                           
  2188                           ;main.c: 315: adsum += ad_temp;
  2189  06BB  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2190  06BC  00F3               	movwf	??_ADC_Sample
  2191  06BD  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2192  06BE  00F4               	movwf	??_ADC_Sample+1
  2193  06BF  01F5               	clrf	??_ADC_Sample+2
  2194  06C0  01F6               	clrf	??_ADC_Sample+3
  2195  06C1  0873               	movf	??_ADC_Sample,w
  2196  06C2  07D0               	addwf	ADC_Sample@adsum,f	;volatile
  2197  06C3  0874               	movf	??_ADC_Sample+1,w
  2198  06C4  1103               	clrz
  2199  06C5  1803               	skipnc
  2200  06C6  3E01               	addlw	1
  2201  06C7  1D03               	btfss	3,2
  2202  06C8  07D1               	addwf	ADC_Sample@adsum+1,f	;volatile
  2203  06C9  0875               	movf	??_ADC_Sample+2,w
  2204  06CA  1103               	clrz
  2205  06CB  1803               	skipnc
  2206  06CC  3E01               	addlw	1
  2207  06CD  1D03               	btfss	3,2
  2208  06CE  07D2               	addwf	ADC_Sample@adsum+2,f	;volatile
  2209  06CF  0876               	movf	??_ADC_Sample+3,w
  2210  06D0  1103               	clrz
  2211  06D1  1803               	skipnc
  2212  06D2  3E01               	addlw	1
  2213  06D3  1D03               	btfss	3,2
  2214  06D4  07D3               	addwf	ADC_Sample@adsum+3,f	;volatile
  2215  06D5  300A               	movlw	10
  2216  06D6  0ACF               	incf	ADC_Sample@i,f
  2217  06D7  024F               	subwf	ADC_Sample@i,w
  2218  06D8  1C03               	skipc
  2219  06D9  2E69               	goto	l3683
  2220                           
  2221                           ;main.c: 316: }
  2222                           ;main.c: 317: adsum -= admax;
  2223  06DA  0856               	movf	ADC_Sample@admax,w	;volatile
  2224  06DB  00F3               	movwf	??_ADC_Sample
  2225  06DC  0857               	movf	ADC_Sample@admax+1,w	;volatile
  2226  06DD  27AA  118A         	fcall	PL6	;call to abstracted procedure
  2227  06DF  1C03               	skipc
  2228  06E0  0F76               	incfsz	??_ADC_Sample+3,w
  2229  06E1  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  2230                           
  2231                           ;main.c: 318: if (adsum >= admin)
  2232  06E2  0854               	movf	ADC_Sample@admin,w	;volatile
  2233  06E3  00F3               	movwf	??_ADC_Sample
  2234  06E4  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2235  06E5  00F4               	movwf	??_ADC_Sample+1
  2236  06E6  01F5               	clrf	??_ADC_Sample+2
  2237  06E7  01F6               	clrf	??_ADC_Sample+3
  2238  06E8  0876               	movf	??_ADC_Sample+3,w
  2239  06E9  0253               	subwf	ADC_Sample@adsum+3,w	;volatile
  2240  06EA  1D03               	skipz
  2241  06EB  2EF6               	goto	u3305
  2242  06EC  0875               	movf	??_ADC_Sample+2,w
  2243  06ED  0252               	subwf	ADC_Sample@adsum+2,w	;volatile
  2244  06EE  1D03               	skipz
  2245  06EF  2EF6               	goto	u3305
  2246  06F0  0874               	movf	??_ADC_Sample+1,w
  2247  06F1  0251               	subwf	ADC_Sample@adsum+1,w	;volatile
  2248  06F2  1D03               	skipz
  2249  06F3  2EF6               	goto	u3305
  2250  06F4  0873               	movf	??_ADC_Sample,w
  2251  06F5  0250               	subwf	ADC_Sample@adsum,w	;volatile
  2252  06F6                     u3305:	
  2253  06F6  1C03               	skipc
  2254  06F7  2F01               	goto	l978
  2255                           
  2256                           ;main.c: 319: adsum -= admin;
  2257  06F8  0854               	movf	ADC_Sample@admin,w	;volatile
  2258  06F9  00F3               	movwf	??_ADC_Sample
  2259  06FA  0855               	movf	ADC_Sample@admin+1,w	;volatile
  2260  06FB  27AA  118A         	fcall	PL6	;call to abstracted procedure
  2261  06FD  1C03               	skipc
  2262  06FE  0F76               	incfsz	??_ADC_Sample+3,w
  2263  06FF  02D3               	subwf	ADC_Sample@adsum+3,f	;volatile
  2264  0700  2F05               	goto	l3717
  2265  0701                     l978:	
  2266                           
  2267                           ;main.c: 320: else
  2268                           ;main.c: 321: adsum = 0;
  2269  0701  01D0               	clrf	ADC_Sample@adsum	;volatile
  2270  0702  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  2271  0703  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  2272  0704  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  2273  0705                     l3717:	
  2274                           
  2275                           ;main.c: 323: adresult = adsum >> 3;
  2276  0705  0850               	movf	ADC_Sample@adsum,w	;volatile
  2277  0706  00F3               	movwf	??_ADC_Sample
  2278  0707  0851               	movf	ADC_Sample@adsum+1,w	;volatile
  2279  0708  00F4               	movwf	??_ADC_Sample+1
  2280  0709  0852               	movf	ADC_Sample@adsum+2,w	;volatile
  2281  070A  00F5               	movwf	??_ADC_Sample+2
  2282  070B  0853               	movf	ADC_Sample@adsum+3,w	;volatile
  2283  070C  00F6               	movwf	??_ADC_Sample+3
  2284  070D  3003               	movlw	3
  2285  070E                     u3325:	
  2286  070E  1003               	clrc
  2287  070F  0CF6               	rrf	??_ADC_Sample+3,f
  2288  0710  0CF5               	rrf	??_ADC_Sample+2,f
  2289  0711  0CF4               	rrf	??_ADC_Sample+1,f
  2290  0712  0CF3               	rrf	??_ADC_Sample,f
  2291  0713  3EFF               	addlw	-1
  2292  0714  1D03               	skipz
  2293  0715  2F0E               	goto	u3325
  2294  0716  0874               	movf	??_ADC_Sample+1,w
  2295  0717  00CC               	movwf	_adresult+1	;volatile
  2296  0718  0873               	movf	??_ADC_Sample,w
  2297  0719  00CB               	movwf	_adresult	;volatile
  2298                           
  2299                           ;main.c: 325: adsum = 0;
  2300                           
  2301                           ;main.c: 326: admin = 0;
  2302                           
  2303                           ;main.c: 327: admax = 0;
  2304  071A  27C6               	fcall	PL18	;call to abstracted procedure
  2305                           
  2306                           ;main.c: 328: return 0xA5;
  2307  071B  34A5               	retlw	165
  2308  071C                     __end_of_ADC_Sample:	
  2309  071C                     __ptext5:	
  2310 ;; *************** function _keyLedCtr *****************
  2311 ;; Defined at:
  2312 ;;		line 371 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0, pclath, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 300/100
  2323 ;;		On exit  : 300/100
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2326 ;;      Params:         0       0       0       0
  2327 ;;      Locals:         0       0       0       0
  2328 ;;      Temps:          0       0       0       0
  2329 ;;      Totals:         0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    2
  2333 ;; This function calls:
  2334 ;;		___lwmod
  2335 ;; This function is called by:
  2336 ;;		_workCtr
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           
  2341                           ;psect for function _keyLedCtr
  2342  071C                     _keyLedCtr:	
  2343                           
  2344                           ;main.c: 373: if(shanshuoTime > 0)
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in _keyLedCtr: [wreg+status,2+status,0+pclath+cstack]
  2348  071C  1283               	bcf	3,5	;RP0=0, select bank0
  2349  071D  0832               	movf	_shanshuoTime,w
  2350  071E  0433               	iorwf	_shanshuoTime+1,w
  2351  071F  1903               	btfsc	3,2
  2352  0720  2F3A               	goto	l3911
  2353                           
  2354                           ;main.c: 374: {
  2355                           ;main.c: 375: shanshuoTime--;
  2356  0721  3001               	movlw	1
  2357  0722  02B2               	subwf	_shanshuoTime,f
  2358  0723  3000               	movlw	0
  2359  0724  1C03               	skipc
  2360  0725  03B3               	decf	_shanshuoTime+1,f
  2361  0726  02B3               	subwf	_shanshuoTime+1,f
  2362                           
  2363                           ;main.c: 376: if((shanshuoTime % 150) < 75)
  2364  0727  3096               	movlw	150
  2365  0728  00F2               	movwf	___lwmod@divisor
  2366  0729  01F3               	clrf	___lwmod@divisor+1
  2367  072A  0833               	movf	_shanshuoTime+1,w
  2368  072B  00F5               	movwf	___lwmod@dividend+1
  2369  072C  0832               	movf	_shanshuoTime,w
  2370  072D  00F4               	movwf	___lwmod@dividend
  2371  072E  2764  118A         	fcall	___lwmod
  2372  0730  3000               	movlw	0
  2373  0731  0273               	subwf	?___lwmod+1,w
  2374  0732  304B               	movlw	75
  2375  0733  1903               	skipnz
  2376  0734  0272               	subwf	?___lwmod,w
  2377  0735  1803               	skipnc
  2378  0736  2F3D               	goto	l996
  2379  0737                     l3909:	
  2380                           
  2381                           ;main.c: 377: {
  2382                           ;main.c: 378: PORTA |= 0x01;
  2383  0737  1683               	bsf	3,5	;RP0=1, select bank1
  2384  0738  1406               	bsf	6,0	;volatile
  2385                           
  2386                           ;main.c: 379: }
  2387  0739  2F3F               	goto	l3915
  2388  073A                     l3911:	
  2389                           
  2390                           ;main.c: 385: else if(workStep > 0)
  2391  073A  087B               	movf	_workStep,w
  2392  073B  1903               	btfsc	3,2
  2393  073C  2F37               	goto	l3909
  2394  073D                     l996:	
  2395                           
  2396                           ;main.c: 380: else
  2397                           ;main.c: 381: {
  2398                           ;main.c: 382: PORTA &= 0xFE;
  2399  073D  1683               	bsf	3,5	;RP0=1, select bank1
  2400  073E  1006               	bcf	6,0	;volatile
  2401  073F                     l3915:	
  2402                           
  2403                           ;main.c: 392: }
  2404                           ;main.c: 394: if(shanshuoTime2 > 0)
  2405  073F  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0740  0830               	movf	_shanshuoTime2,w
  2407  0741  0431               	iorwf	_shanshuoTime2+1,w
  2408  0742  1903               	btfsc	3,2
  2409  0743  2F60               	goto	l3923
  2410                           
  2411                           ;main.c: 395: {
  2412                           ;main.c: 396: shanshuoTime2--;
  2413  0744  3001               	movlw	1
  2414  0745  02B0               	subwf	_shanshuoTime2,f
  2415  0746  3000               	movlw	0
  2416  0747  1C03               	skipc
  2417  0748  03B1               	decf	_shanshuoTime2+1,f
  2418  0749  02B1               	subwf	_shanshuoTime2+1,f
  2419                           
  2420                           ;main.c: 397: if((shanshuoTime2 % 150) < 75)
  2421  074A  3096               	movlw	150
  2422  074B  00F2               	movwf	___lwmod@divisor
  2423  074C  01F3               	clrf	___lwmod@divisor+1
  2424  074D  0831               	movf	_shanshuoTime2+1,w
  2425  074E  00F5               	movwf	___lwmod@dividend+1
  2426  074F  0830               	movf	_shanshuoTime2,w
  2427  0750  00F4               	movwf	___lwmod@dividend
  2428  0751  2764  118A         	fcall	___lwmod
  2429  0753  3000               	movlw	0
  2430  0754  0273               	subwf	?___lwmod+1,w
  2431  0755  304B               	movlw	75
  2432  0756  1903               	skipnz
  2433  0757  0272               	subwf	?___lwmod,w
  2434  0758  1803               	skipnc
  2435  0759  2F5D               	goto	l1002
  2436  075A                     l3921:	
  2437                           
  2438                           ;main.c: 398: {
  2439                           ;main.c: 399: PORTA |= 0x10;
  2440  075A  1683               	bsf	3,5	;RP0=1, select bank1
  2441  075B  1606               	bsf	6,4	;volatile
  2442                           
  2443                           ;main.c: 400: }
  2444  075C  0008               	return
  2445  075D                     l1002:	
  2446                           
  2447                           ;main.c: 401: else
  2448                           ;main.c: 402: {
  2449                           ;main.c: 403: PORTA &= 0xEF;
  2450  075D  1683               	bsf	3,5	;RP0=1, select bank1
  2451  075E  1206               	bcf	6,4	;volatile
  2452  075F  0008               	return
  2453  0760                     l3923:	
  2454                           
  2455                           ;main.c: 406: else if(wuhuaFlag > 0)
  2456  0760  0848               	movf	_wuhuaFlag,w
  2457  0761  1D03               	btfss	3,2
  2458  0762  2F5D               	goto	l1002
  2459  0763  2F5A               	goto	l3921
  2460  0764                     __end_of_keyLedCtr:	
  2461  0764                     __ptext6:	
  2462 ;; *************** function ___lwmod *****************
  2463 ;; Defined at:
  2464 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  divisor         2    2[COMMON] unsigned int 
  2467 ;;  dividend        2    4[COMMON] unsigned int 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  counter         1    6[COMMON] unsigned char 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  2    2[COMMON] unsigned int 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0
  2474 ;; Tracked objects:
  2475 ;;		On entry : 300/0
  2476 ;;		On exit  : 300/0
  2477 ;;		Unchanged: 300/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2479 ;;      Params:         4       0       0       0
  2480 ;;      Locals:         1       0       0       0
  2481 ;;      Temps:          0       0       0       0
  2482 ;;      Totals:         5       0       0       0
  2483 ;;Total ram usage:        5 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    1
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_keyLedCtr
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function ___lwmod
  2495  0764                     ___lwmod:	
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2499  0764  0872               	movf	___lwmod@divisor,w
  2500  0765  0473               	iorwf	___lwmod@divisor+1,w
  2501  0766  1903               	btfsc	3,2
  2502  0767  2F83               	goto	l3813
  2503  0768  01F6               	clrf	___lwmod@counter
  2504  0769                     L1:	
  2505  0769  0AF6               	incf	___lwmod@counter,f
  2506  076A  1BF3               	btfsc	___lwmod@divisor+1,7
  2507  076B  2F70               	goto	l3805
  2508  076C  1003               	clrc
  2509  076D  0DF2               	rlf	___lwmod@divisor,f
  2510  076E  0DF3               	rlf	___lwmod@divisor+1,f
  2511  076F  2F69               	goto	L1
  2512  0770                     l3805:	
  2513  0770  0873               	movf	___lwmod@divisor+1,w
  2514  0771  0275               	subwf	___lwmod@dividend+1,w
  2515  0772  1D03               	skipz
  2516  0773  2F76               	goto	u3465
  2517  0774  0872               	movf	___lwmod@divisor,w
  2518  0775  0274               	subwf	___lwmod@dividend,w
  2519  0776                     u3465:	
  2520  0776  1C03               	skipc
  2521  0777  2F7F               	goto	L2
  2522  0778  0872               	movf	___lwmod@divisor,w
  2523  0779  02F4               	subwf	___lwmod@dividend,f
  2524  077A  0873               	movf	___lwmod@divisor+1,w
  2525  077B  1C03               	skipc
  2526  077C  03F5               	decf	___lwmod@dividend+1,f
  2527  077D  02F5               	subwf	___lwmod@dividend+1,f
  2528  077E  1003               	clrc
  2529  077F                     L2:	
  2530  077F  0CF3               	rrf	___lwmod@divisor+1,f
  2531  0780  0CF2               	rrf	___lwmod@divisor,f
  2532  0781  0BF6               	decfsz	___lwmod@counter,f
  2533  0782  2F70               	goto	l3805
  2534  0783                     l3813:	
  2535  0783  0875               	movf	___lwmod@dividend+1,w
  2536  0784  00F3               	movwf	?___lwmod+1
  2537  0785  0874               	movf	___lwmod@dividend,w
  2538  0786  00F2               	movwf	?___lwmod
  2539  0787  0008               	return
  2540  0788                     __end_of___lwmod:	
  2541  0788                     __ptext4:	
  2542 ;; *************** function _pwmInit *****************
  2543 ;; Defined at:
  2544 ;;		line 417 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0
  2553 ;; Tracked objects:
  2554 ;;		On entry : 300/0
  2555 ;;		On exit  : 300/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2558 ;;      Params:         0       0       0       0
  2559 ;;      Locals:         0       0       0       0
  2560 ;;      Temps:          0       0       0       0
  2561 ;;      Totals:         0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_wuhuaCtr
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _pwmInit
  2574  0788                     _pwmInit:	
  2575                           
  2576                           ;main.c: 420: PWMTH = 0x00;
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  2580  0788  0198               	clrf	24	;volatile
  2581                           
  2582                           ;main.c: 421: PWMTL = 73;
  2583  0789  3049               	movlw	73
  2584  078A  0097               	movwf	23	;volatile
  2585                           
  2586                           ;main.c: 422: PWMD01H = 0x00;
  2587  078B  019E               	clrf	30	;volatile
  2588                           
  2589                           ;main.c: 423: PWMD0L = 32;
  2590  078C  3020               	movlw	32
  2591  078D  0099               	movwf	25	;volatile
  2592                           
  2593                           ;main.c: 424: PWMCON1 = 0x40;
  2594  078E  3040               	movlw	64
  2595  078F  0096               	movwf	22	;volatile
  2596                           
  2597                           ;main.c: 425: PWMCON2 = 0x00;
  2598  0790  019D               	clrf	29	;volatile
  2599                           
  2600                           ;main.c: 426: PWMCON0 |= 0x21;
  2601  0791  3021               	movlw	33
  2602  0792  0495               	iorwf	21,f	;volatile
  2603  0793  0008               	return
  2604  0794                     __end_of_pwmInit:	
  2605  0794                     __ptext9:	
  2606 ;; *************** function _fanInit *****************
  2607 ;; Defined at:
  2608 ;;		line 436 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0
  2617 ;; Tracked objects:
  2618 ;;		On entry : 300/0
  2619 ;;		On exit  : 300/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2622 ;;      Params:         0       0       0       0
  2623 ;;      Locals:         0       0       0       0
  2624 ;;      Temps:          0       0       0       0
  2625 ;;      Totals:         0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_fanCtr
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           
  2637                           ;psect for function _fanInit
  2638  0794                     _fanInit:	
  2639  0794                     l3745:	
  2640                           ;incstack = 0
  2641                           ; Regs used in _fanInit: [wreg+status,2+status,0]
  2642                           
  2643                           
  2644                           ;main.c: 439: PWMTH = 0x00;
  2645  0794  0198               	clrf	24	;volatile
  2646                           
  2647                           ;main.c: 440: PWMTL = 73;
  2648  0795  3049               	movlw	73
  2649  0796  0097               	movwf	23	;volatile
  2650                           
  2651                           ;main.c: 441: PWMD01H = 0x00;
  2652  0797  019E               	clrf	30	;volatile
  2653                           
  2654                           ;main.c: 442: PWMD1L = fanDuty;
  2655  0798  0847               	movf	_fanDuty,w
  2656  0799  009A               	movwf	26	;volatile
  2657                           
  2658                           ;main.c: 443: PWMCON1 = 0x40;
  2659  079A  3040               	movlw	64
  2660  079B  0096               	movwf	22	;volatile
  2661                           
  2662                           ;main.c: 444: PWMCON2 = 0x00;
  2663  079C  019D               	clrf	29	;volatile
  2664                           
  2665                           ;main.c: 445: PWMCON0 |= 0x22;
  2666  079D  3022               	movlw	34
  2667  079E  0495               	iorwf	21,f	;volatile
  2668  079F  0008               	return
  2669  07A0                     __end_of_fanInit:	
  2670  07A0                     __ptext8:	
  2671 ;; *************** function _fanStop *****************
  2672 ;; Defined at:
  2673 ;;		line 448 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		status,2
  2682 ;; Tracked objects:
  2683 ;;		On entry : 300/100
  2684 ;;		On exit  : 300/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2687 ;;      Params:         0       0       0       0
  2688 ;;      Locals:         0       0       0       0
  2689 ;;      Temps:          0       0       0       0
  2690 ;;      Totals:         0       0       0       0
  2691 ;;Total ram usage:        0 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    1
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_fanCtr
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _fanStop
  2703  07A0                     _fanStop:	
  2704                           
  2705                           ;main.c: 450: PWMD1L = 0;
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _fanStop: [status,2]
  2709  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  2710  07A1  019A               	clrf	26	;volatile
  2711                           
  2712                           ;main.c: 451: PWMCON0 &= 0xFD;
  2713  07A2  1095               	bcf	21,1	;volatile
  2714                           
  2715                           ;main.c: 452: PORTB &= 0x7F;
  2716  07A3  1386               	bcf	6,7	;volatile
  2717  07A4  0008               	return
  2718  07A5                     __end_of_fanStop:	
  2719  07A5                     __ptext3:	
  2720 ;; *************** function _pwmStop *****************
  2721 ;; Defined at:
  2722 ;;		line 429 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		status,2
  2731 ;; Tracked objects:
  2732 ;;		On entry : 300/0
  2733 ;;		On exit  : 300/100
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2736 ;;      Params:         0       0       0       0
  2737 ;;      Locals:         0       0       0       0
  2738 ;;      Temps:          0       0       0       0
  2739 ;;      Totals:         0       0       0       0
  2740 ;;Total ram usage:        0 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    1
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_wuhuaCtr
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           
  2751                           ;psect for function _pwmStop
  2752  07A5                     _pwmStop:	
  2753  07A5                     l3739:	
  2754                           ;incstack = 0
  2755                           ; Regs used in _pwmStop: [status,2]
  2756                           
  2757                           
  2758                           ;main.c: 431: PWMD0L = 0;
  2759  07A5  0199               	clrf	25	;volatile
  2760                           
  2761                           ;main.c: 432: PWMCON0 &= 0xFE;
  2762  07A6  1015               	bcf	21,0	;volatile
  2763                           
  2764                           ;main.c: 433: PORTA &= 0xDF;
  2765  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  2766  07A8  1286               	bcf	6,5	;volatile
  2767  07A9  0008               	return
  2768  07AA                     __end_of_pwmStop:	
  2769  07AA                     PL6:	
  2770  07AA  00F4               	movwf	??_ADC_Sample+1
  2771  07AB  01F5               	clrf	??_ADC_Sample+2
  2772  07AC  01F6               	clrf	??_ADC_Sample+3
  2773  07AD  0873               	movf	??_ADC_Sample,w
  2774  07AE  02D0               	subwf	ADC_Sample@adsum,f	;volatile
  2775  07AF  0874               	movf	??_ADC_Sample+1,w
  2776  07B0  1C03               	skipc
  2777  07B1  0F74               	incfsz	??_ADC_Sample+1,w
  2778  07B2  02D1               	subwf	ADC_Sample@adsum+1,f	;volatile
  2779  07B3  0875               	movf	??_ADC_Sample+2,w
  2780  07B4  1C03               	skipc
  2781  07B5  0F75               	incfsz	??_ADC_Sample+2,w
  2782  07B6  02D2               	subwf	ADC_Sample@adsum+2,f	;volatile
  2783  07B7  0876               	movf	??_ADC_Sample+3,w
  2784  07B8  0008               	return
  2785  07B9                     __end_ofPL6:	
  2786  07B9                     PL10:	
  2787  07B9  084B               	movf	_adresult,w	;volatile
  2788  07BA  00CD               	movwf	___lmul@multiplier
  2789  07BB  084C               	movf	_adresult+1,w	;volatile
  2790  07BC  00CE               	movwf	___lmul@multiplier+1
  2791  07BD  01CF               	clrf	___lmul@multiplier+2
  2792  07BE  01D0               	clrf	___lmul@multiplier+3
  2793  07BF  082E               	movf	_power_ad,w	;volatile
  2794  07C0  00D1               	movwf	___lmul@multiplicand
  2795  07C1  082F               	movf	_power_ad+1,w	;volatile
  2796  07C2  00D2               	movwf	___lmul@multiplicand+1
  2797  07C3  01D3               	clrf	___lmul@multiplicand+2
  2798  07C4  01D4               	clrf	___lmul@multiplicand+3
  2799  07C5  0008               	return
  2800  07C6                     __end_ofPL10:	
  2801  07C6                     PL18:	
  2802  07C6  01D0               	clrf	ADC_Sample@adsum	;volatile
  2803  07C7  01D1               	clrf	ADC_Sample@adsum+1	;volatile
  2804  07C8  01D2               	clrf	ADC_Sample@adsum+2	;volatile
  2805  07C9  01D3               	clrf	ADC_Sample@adsum+3	;volatile
  2806  07CA  01D4               	clrf	ADC_Sample@admin	;volatile
  2807  07CB  01D5               	clrf	ADC_Sample@admin+1	;volatile
  2808  07CC  01D6               	clrf	ADC_Sample@admax	;volatile
  2809  07CD  01D7               	clrf	ADC_Sample@admax+1	;volatile
  2810  07CE  0008               	return
  2811  07CF                     __end_ofPL18:	
  2812  07CF                     PL26:	
  2813  07CF  0862               	movf	___fttol@f1,w
  2814  07D0  00E6               	movwf	??___fttol
  2815  07D1  0863               	movf	___fttol@f1+1,w
  2816  07D2  00E7               	movwf	??___fttol+1
  2817  07D3  0864               	movf	___fttol@f1+2,w
  2818  07D4  00E8               	movwf	??___fttol+2
  2819  07D5  0008               	return
  2820  07D6                     __end_ofPL26:	
  2821  07D6                     PL34:	
  2822  07D6  1003               	clrc
  2823  07D7  0CF4               	rrf	___ftpack@arg+2,f
  2824  07D8  0CF3               	rrf	___ftpack@arg+1,f
  2825  07D9  0CF2               	rrf	___ftpack@arg,f
  2826  07DA  0008               	return
  2827  07DB                     __end_ofPL34:	
  2828  07DB                     PL38:	
  2829  07DB  0859               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2830  07DC  00D7               	movwf	ADC_Sample@admax+1	;volatile
  2831  07DD  0858               	movf	ADC_Sample@ad_temp,w	;volatile
  2832  07DE  00D6               	movwf	ADC_Sample@admax	;volatile
  2833  07DF  0008               	return
  2834  07E0                     __end_ofPL38:	
  2835  07E0                     PL40:	
  2836  07E0  01D3               	clrf	?___ftdiv
  2837  07E1  01D4               	clrf	?___ftdiv+1
  2838  07E2  01D5               	clrf	?___ftdiv+2
  2839  07E3  0008               	return
  2840  07E4                     __end_ofPL40:	
  2841                           
  2842                           	psect	text16
  2843  0F4D                     __ptext16:	
  2844 ;; *************** function _chrgCtr *****************
  2845 ;; Defined at:
  2846 ;;		line 333 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/100
  2857 ;;		On exit  : 300/100
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2860 ;;      Params:         0       0       0       0
  2861 ;;      Locals:         0       0       0       0
  2862 ;;      Temps:          0       0       0       0
  2863 ;;      Totals:         0       0       0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    1
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_main
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           
  2875                           ;psect for function _chrgCtr
  2876  0F4D                     _chrgCtr:	
  2877                           
  2878                           ;main.c: 335: if(PORTB & 0x01)
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2882  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  2884  0F4F  1C06               	btfss	6,0	;volatile
  2885  0F50  2F70               	goto	l3523
  2886                           
  2887                           ;main.c: 336: {
  2888                           ;main.c: 337: chrgFlag = 1;
  2889  0F51  01C4               	clrf	_chrgFlag
  2890  0F52  0AC4               	incf	_chrgFlag,f
  2891                           
  2892                           ;main.c: 338: firstLock = 0;
  2893  0F53  1683               	bsf	3,5	;RP0=1, select bank1
  2894  0F54  01B6               	clrf	_firstLock^(0+128)
  2895                           
  2896                           ;main.c: 339: lowBatLock = 0;
  2897  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  2898  0F56  01C1               	clrf	_lowBatLock
  2899                           
  2900                           ;main.c: 340: if(PORTB & 0x10)
  2901  0F57  1E06               	btfss	6,4	;volatile
  2902  0F58  2F62               	goto	l3517
  2903                           
  2904                           ;main.c: 341: {
  2905                           ;main.c: 342: if(++chrgFullTime > 200)
  2906  0F59  30C9               	movlw	201
  2907  0F5A  0AC2               	incf	_chrgFullTime,f
  2908  0F5B  0242               	subwf	_chrgFullTime,w
  2909  0F5C  1C03               	skipc
  2910  0F5D  2F63               	goto	l3519
  2911                           
  2912                           ;main.c: 343: {
  2913                           ;main.c: 344: chrgFullTime = 0;
  2914  0F5E  01C2               	clrf	_chrgFullTime
  2915                           
  2916                           ;main.c: 345: chrgFullFlag = 1;
  2917  0F5F  01C3               	clrf	_chrgFullFlag
  2918  0F60  0AC3               	incf	_chrgFullFlag,f
  2919  0F61  2F63               	goto	l3519
  2920  0F62                     l3517:	
  2921                           
  2922                           ;main.c: 348: else
  2923                           ;main.c: 349: {
  2924                           ;main.c: 350: chrgFullTime = 0;
  2925  0F62  01C2               	clrf	_chrgFullTime
  2926  0F63                     l3519:	
  2927                           
  2928                           ;main.c: 351: }
  2929                           ;main.c: 352: if(chrgFullFlag || count1s < 125)
  2930  0F63  0843               	movf	_chrgFullFlag,w
  2931  0F64  1D03               	btfss	3,2
  2932  0F65  2F6A               	goto	l988
  2933  0F66  307D               	movlw	125
  2934  0F67  0249               	subwf	_count1s,w
  2935  0F68  1803               	skipnc
  2936  0F69  2F6D               	goto	l986
  2937  0F6A                     l988:	
  2938                           
  2939                           ;main.c: 353: {
  2940                           ;main.c: 354: RA1 = 0;
  2941  0F6A  1683               	bsf	3,5	;RP0=1, select bank1
  2942  0F6B  1086               	bcf	6,1	;volatile
  2943                           
  2944                           ;main.c: 355: }
  2945  0F6C  0008               	return
  2946  0F6D                     l986:	
  2947                           
  2948                           ;main.c: 356: else
  2949                           ;main.c: 357: {
  2950                           ;main.c: 358: RA1 = 1;
  2951  0F6D  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0F6E  1486               	bsf	6,1	;volatile
  2953  0F6F  0008               	return
  2954  0F70                     l3523:	
  2955                           
  2956                           ;main.c: 361: else
  2957                           ;main.c: 362: {
  2958                           ;main.c: 363: chrgFlag = 0;
  2959  0F70  01C4               	clrf	_chrgFlag
  2960                           
  2961                           ;main.c: 364: chrgFullTime = 0;
  2962  0F71  01C2               	clrf	_chrgFullTime
  2963                           
  2964                           ;main.c: 365: chrgFullFlag = 0;
  2965  0F72  01C3               	clrf	_chrgFullFlag
  2966                           
  2967                           ;main.c: 366: if(firstTime == 0)
  2968  0F73  1683               	bsf	3,5	;RP0=1, select bank1
  2969  0F74  0837               	movf	_firstTime^(0+128),w
  2970  0F75  1D03               	btfss	3,2
  2971  0F76  0008               	return
  2972  0F77  2F6D               	goto	l986
  2973  0F78                     __end_of_chrgCtr:	
  2974                           
  2975                           	psect	text20
  2976  0FB0                     __ptext20:	
  2977 ;; *************** function _KeyServer *****************
  2978 ;; Defined at:
  2979 ;;		line 100 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, status,2, status,0
  2988 ;; Tracked objects:
  2989 ;;		On entry : 300/0
  2990 ;;		On exit  : 300/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2993 ;;      Params:         0       0       0       0
  2994 ;;      Locals:         0       0       0       0
  2995 ;;      Temps:          0       0       0       0
  2996 ;;      Totals:         0       0       0       0
  2997 ;;Total ram usage:        0 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    1
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _KeyServer
  3009  0FB0                     _KeyServer:	
  3010                           
  3011                           ;main.c: 102: static unsigned char KeyOldFlag = 0;
  3012                           ;main.c: 103: if (KeyFlag[0])
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _KeyServer: [wreg+status,2+status,0]
  3016  0FB0  0836               	movf	_KeyFlag,w	;volatile
  3017  0FB1  1903               	btfsc	3,2
  3018  0FB2  2FF9               	goto	l3461
  3019                           
  3020                           ;main.c: 104: {
  3021                           ;main.c: 105: if (KeyFlag[0] != KeyOldFlag)
  3022  0FB3  0836               	movf	_KeyFlag,w	;volatile
  3023  0FB4  063D               	xorwf	KeyServer@KeyOldFlag,w
  3024  0FB5  1903               	skipnz
  3025  0FB6  0008               	return
  3026                           
  3027                           ;main.c: 106: {
  3028                           ;main.c: 108: KeyOldFlag ^= KeyFlag[0];
  3029  0FB7  0836               	movf	_KeyFlag,w	;volatile
  3030  0FB8  06BD               	xorwf	KeyServer@KeyOldFlag,f
  3031                           
  3032                           ;main.c: 109: if ((KeyOldFlag & 0x1) && (KeyFlag[0] & 0x1) && firstLock == 0)
  3033  0FB9  183D               	btfsc	KeyServer@KeyOldFlag,0
  3034  0FBA  1C36               	btfss	_KeyFlag,0	;volatile
  3035  0FBB  2FD4               	goto	l3437
  3036  0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  3037  0FBD  0836               	movf	_firstLock^(0+128),w
  3038  0FBE  1D03               	btfss	3,2
  3039  0FBF  2FD4               	goto	l3437
  3040                           
  3041                           ;main.c: 110: {
  3042                           ;main.c: 112: if(lowBatLock == 1)
  3043  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0FC1  0B41               	decfsz	_lowBatLock,w
  3045  0FC2  2FC6               	goto	l3427
  3046                           
  3047                           ;main.c: 113: {
  3048                           ;main.c: 114: shanshuoTime = 450;
  3049  0FC3  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3050                           
  3051                           ;main.c: 115: }
  3052  0FC5  2FCB               	goto	l3431
  3053  0FC6                     l3427:	
  3054                           
  3055                           ;main.c: 116: else if(++workStep > 2)
  3056  0FC6  3003               	movlw	3
  3057  0FC7  0AFB               	incf	_workStep,f
  3058  0FC8  027B               	subwf	_workStep,w
  3059  0FC9  1803               	btfsc	3,0
  3060                           
  3061                           ;main.c: 117: {
  3062                           ;main.c: 118: workStep = 0;
  3063  0FCA  01FB               	clrf	_workStep
  3064  0FCB                     l3431:	
  3065                           
  3066                           ;main.c: 119: }
  3067                           ;main.c: 120: if(workStep == 2)
  3068  0FCB  3002               	movlw	2
  3069  0FCC  067B               	xorwf	_workStep,w
  3070  0FCD  1D03               	btfss	3,2
  3071  0FCE  2FD2               	goto	l3435
  3072                           
  3073                           ;main.c: 121: {
  3074                           ;main.c: 122: shanshuoTime = 450;
  3075  0FCF  27FB  158A         	fcall	PL36	;call to abstracted procedure
  3076                           
  3077                           ;main.c: 123: }
  3078  0FD1  2FD4               	goto	l3437
  3079  0FD2                     l3435:	
  3080                           
  3081                           ;main.c: 124: else
  3082                           ;main.c: 125: {
  3083                           ;main.c: 126: shanshuoTime = 0;
  3084  0FD2  01B2               	clrf	_shanshuoTime
  3085  0FD3  01B3               	clrf	_shanshuoTime+1
  3086  0FD4                     l3437:	
  3087                           
  3088                           ;main.c: 127: }
  3089                           ;main.c: 128: }
  3090                           ;main.c: 129: if ((KeyOldFlag & 0x2) && (KeyFlag[0] & 0x2) && firstLock == 0)
  3091  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0FD5  18BD               	btfsc	KeyServer@KeyOldFlag,1
  3093  0FD6  1CB6               	btfss	_KeyFlag,1	;volatile
  3094  0FD7  2FF5               	goto	l3459
  3095  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  3096  0FD9  0836               	movf	_firstLock^(0+128),w
  3097  0FDA  1D03               	btfss	3,2
  3098  0FDB  2FF5               	goto	l3459
  3099                           
  3100                           ;main.c: 130: {
  3101                           ;main.c: 132: if(lowBatLock == 1)
  3102  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  3103  0FDD  0B41               	decfsz	_lowBatLock,w
  3104  0FDE  2FE4               	goto	l3447
  3105                           
  3106                           ;main.c: 133: {
  3107                           ;main.c: 134: shanshuoTime2 = 450;
  3108  0FDF  30C2               	movlw	194
  3109  0FE0  00B0               	movwf	_shanshuoTime2
  3110  0FE1  3001               	movlw	1
  3111  0FE2  00B1               	movwf	_shanshuoTime2+1
  3112                           
  3113                           ;main.c: 135: }
  3114  0FE3  2FE9               	goto	l3451
  3115  0FE4                     l3447:	
  3116                           
  3117                           ;main.c: 136: else if(++wuhuaFlag > 2)
  3118  0FE4  3003               	movlw	3
  3119  0FE5  0AC8               	incf	_wuhuaFlag,f
  3120  0FE6  0248               	subwf	_wuhuaFlag,w
  3121  0FE7  1803               	btfsc	3,0
  3122                           
  3123                           ;main.c: 137: {
  3124                           ;main.c: 138: wuhuaFlag = 0;
  3125  0FE8  01C8               	clrf	_wuhuaFlag
  3126  0FE9                     l3451:	
  3127                           
  3128                           ;main.c: 139: }
  3129                           ;main.c: 140: if(wuhuaFlag == 2)
  3130  0FE9  3002               	movlw	2
  3131  0FEA  0648               	xorwf	_wuhuaFlag,w
  3132  0FEB  1D03               	btfss	3,2
  3133  0FEC  2FF3               	goto	l3457
  3134                           
  3135                           ;main.c: 141: {
  3136                           ;main.c: 142: shanshuoTime2 = 450;
  3137  0FED  30C2               	movlw	194
  3138  0FEE  00B0               	movwf	_shanshuoTime2
  3139  0FEF  3001               	movlw	1
  3140  0FF0  00B1               	movwf	_shanshuoTime2+1
  3141                           
  3142                           ;main.c: 143: count10s = 0;
  3143  0FF1  01C6               	clrf	_count10s
  3144                           
  3145                           ;main.c: 144: }
  3146  0FF2  2FF5               	goto	l3459
  3147  0FF3                     l3457:	
  3148                           
  3149                           ;main.c: 145: else
  3150                           ;main.c: 146: {
  3151                           ;main.c: 147: shanshuoTime2 = 0;
  3152  0FF3  01B0               	clrf	_shanshuoTime2
  3153  0FF4  01B1               	clrf	_shanshuoTime2+1
  3154  0FF5                     l3459:	
  3155                           
  3156                           ;main.c: 148: }
  3157                           ;main.c: 149: }
  3158                           ;main.c: 152: KeyOldFlag = KeyFlag[0];
  3159  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0FF6  0836               	movf	_KeyFlag,w	;volatile
  3161  0FF7  00BD               	movwf	KeyServer@KeyOldFlag
  3162  0FF8  0008               	return
  3163  0FF9                     l3461:	
  3164                           
  3165                           ;main.c: 155: else
  3166                           ;main.c: 156: {
  3167                           ;main.c: 157: KeyOldFlag = 0;
  3168  0FF9  01BD               	clrf	KeyServer@KeyOldFlag
  3169  0FFA  0008               	return
  3170  0FFB                     __end_of_KeyServer:	
  3171  0FFB                     PL36:	
  3172  0FFB  30C2               	movlw	194
  3173  0FFC  00B2               	movwf	_shanshuoTime
  3174  0FFD  3001               	movlw	1
  3175  0FFE  00B3               	movwf	_shanshuoTime+1
  3176  0FFF  0008               	return
  3177  1000                     __end_ofPL36:	
  3178                           
  3179                           	psect	text21
  3180  0020                     __ptext21:	
  3181 ;; *************** function _Init_System *****************
  3182 ;; Defined at:
  3183 ;;		line 49 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;		None
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;		None
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2
  3192 ;; Tracked objects:
  3193 ;;		On entry : B00/0
  3194 ;;		On exit  : 300/100
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3197 ;;      Params:         0       0       0       0
  3198 ;;      Locals:         0       0       0       0
  3199 ;;      Temps:          0       0       0       0
  3200 ;;      Totals:         0       0       0       0
  3201 ;;Total ram usage:        0 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           
  3212                           ;psect for function _Init_System
  3213  0020                     _Init_System:	
  3214                           
  3215                           ;incstack = 0
  3216                           ; Regs used in _Init_System: [wreg+status,2]
  3217  0020  0000               	nop	;# 
  3218  0021  0064               	clrwdt	;# 
  3219                           
  3220                           ;main.c: 53: INTCON = 0;
  3221  0022  018B               	clrf	11	;volatile
  3222                           
  3223                           ;main.c: 54: OSCCON = 0X72;
  3224  0023  3072               	movlw	114
  3225  0024  1283               	bcf	3,5	;RP0=0, select bank0
  3226  0025  1303               	bcf	3,6	;RP1=0, select bank0
  3227  0026  0094               	movwf	20	;volatile
  3228                           
  3229                           ;main.c: 55: OPTION_REG = 0;
  3230  0027  0181               	clrf	1	;volatile
  3231                           
  3232                           ;main.c: 60: TRISA = 0x08;
  3233  0028  3008               	movlw	8
  3234  0029  1683               	bsf	3,5	;RP0=1, select bank1
  3235  002A  0085               	movwf	5	;volatile
  3236                           
  3237                           ;main.c: 61: PORTA = 0;
  3238  002B  0186               	clrf	6	;volatile
  3239                           
  3240                           ;main.c: 62: TRISB = 0x31;
  3241  002C  3031               	movlw	49
  3242  002D  1283               	bcf	3,5	;RP0=0, select bank0
  3243  002E  0085               	movwf	5	;volatile
  3244                           
  3245                           ;main.c: 63: PORTB = 0;
  3246  002F  0186               	clrf	6	;volatile
  3247                           
  3248                           ;main.c: 64: WPUB = 0x10;
  3249  0030  3010               	movlw	16
  3250  0031  0088               	movwf	8	;volatile
  3251                           
  3252                           ;main.c: 65: TRISC = 0;
  3253  0032  1703               	bsf	3,6	;RP1=1, select bank2
  3254  0033  0185               	clrf	5	;volatile
  3255                           
  3256                           ;main.c: 66: PORTC = 0;
  3257  0034  0186               	clrf	6	;volatile
  3258                           
  3259                           ;main.c: 68: PIE1 = 2;
  3260  0035  3002               	movlw	2
  3261  0036  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0037  008E               	movwf	14	;volatile
  3263                           
  3264                           ;main.c: 69: PR2 = 250;
  3265  0038  30FA               	movlw	250
  3266  0039  0091               	movwf	17	;volatile
  3267                           
  3268                           ;main.c: 70: T2CON = 4;
  3269  003A  3004               	movlw	4
  3270  003B  0093               	movwf	19	;volatile
  3271                           
  3272                           ;main.c: 72: INTCON = 0XC0;
  3273  003C  30C0               	movlw	192
  3274  003D  008B               	movwf	11	;volatile
  3275                           
  3276                           ;main.c: 73: ADCON0 = 0X41;
  3277                           
  3278                           ;main.c: 74: ADON = 1;
  3279                           
  3280                           ;main.c: 75: ADCON1 = 0x00;
  3281  003E  2BED               	ljmp	PL24	;call to abstracted procedure
  3282  003F                     __end_of_Init_System:	
  3283  003F                     __ptext17:	
  3284 ;; *************** function _WorkSleep *****************
  3285 ;; Defined at:
  3286 ;;		line 187 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 300/0
  3297 ;;		On exit  : 300/100
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       0       0       0
  3301 ;;      Locals:         0       0       0       0
  3302 ;;      Temps:          0       0       0       0
  3303 ;;      Totals:         0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    4
  3307 ;; This function calls:
  3308 ;;		_Refurbish_Sfr
  3309 ;;		_SystemEnterSleep
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           
  3316                           ;psect for function _WorkSleep
  3317  003F                     _WorkSleep:	
  3318                           
  3319                           ;main.c: 191: if(B_OnOff)time = 0;
  3320                           
  3321                           ;incstack = 0
  3322                           ; Regs used in _WorkSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3323  003F  1EF8               	btfss	_B_OnOff/(0+8),_B_OnOff& (0+7)	;volatile
  3324  0040  2844               	goto	l4161
  3325  0041  1683               	bsf	3,5	;RP0=1, select bank1
  3326  0042  01AA               	clrf	_time^(0+128)
  3327  0043  01AB               	clrf	(_time+1)^(0+128)
  3328  0044                     l4161:	
  3329                           
  3330                           ;main.c: 193: if(++time >= 2000)
  3331  0044  1683               	bsf	3,5	;RP0=1, select bank1
  3332  0045  0AAA               	incf	_time^(0+128),f
  3333  0046  1903               	skipnz
  3334  0047  0AAB               	incf	(_time+1)^(0+128),f
  3335  0048  3007               	movlw	7
  3336  0049  022B               	subwf	(_time+1)^(0+128),w
  3337  004A  30D0               	movlw	208
  3338  004B  1903               	skipnz
  3339  004C  022A               	subwf	_time^(0+128),w
  3340  004D  1C03               	skipc
  3341  004E  0008               	return
  3342                           
  3343                           ;main.c: 194: {
  3344                           ;main.c: 195: time = 0;
  3345  004F  01AA               	clrf	_time^(0+128)
  3346  0050  01AB               	clrf	(_time+1)^(0+128)
  3347                           
  3348                           ;main.c: 196: INTCON = 0;
  3349  0051  018B               	clrf	11	;volatile
  3350                           
  3351                           ;main.c: 197: PIE1 = 0;
  3352  0052  1283               	bcf	3,5	;RP0=0, select bank0
  3353  0053  018E               	clrf	14	;volatile
  3354                           
  3355                           ;main.c: 198: PIE2 = 0;
  3356  0054  1703               	bsf	3,6	;RP1=1, select bank2
  3357  0055  0190               	clrf	16	;volatile
  3358                           
  3359                           ;main.c: 199: PIR1 = 0;
  3360  0056  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0057  018D               	clrf	13	;volatile
  3362                           
  3363                           ;main.c: 200: PIR2 = 0;
  3364  0058  1703               	bsf	3,6	;RP1=1, select bank2
  3365  0059  018F               	clrf	15	;volatile
  3366                           
  3367                           ;main.c: 201: T2CON = 0;
  3368  005A  1303               	bcf	3,6	;RP1=0, select bank0
  3369  005B  0193               	clrf	19	;volatile
  3370                           
  3371                           ;main.c: 202: ADCON1 = 0;
  3372  005C  1683               	bsf	3,5	;RP0=1, select bank1
  3373  005D  0196               	clrf	22	;volatile
  3374                           
  3375                           ;main.c: 205: ADCON0 = 0;
  3376  005E  0195               	clrf	21	;volatile
  3377                           
  3378                           ;main.c: 208: PORTA = 0x13;
  3379  005F  3013               	movlw	19
  3380  0060  0086               	movwf	6	;volatile
  3381                           
  3382                           ;main.c: 209: PORTB = 0x00;
  3383  0061  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0062  0186               	clrf	6	;volatile
  3385                           
  3386                           ;main.c: 210: TRISC = 0;
  3387  0063  1703               	bsf	3,6	;RP1=1, select bank2
  3388  0064  0185               	clrf	5	;volatile
  3389                           
  3390                           ;main.c: 211: PORTC = 0;
  3391  0065  0186               	clrf	6	;volatile
  3392                           
  3393                           ;main.c: 213: TRISB0 =1;
  3394  0066  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0067  1405               	bsf	5,0	;volatile
  3396                           
  3397                           ;main.c: 215: RBIF = 0;
  3398  0068  100B               	bcf	11,0	;volatile
  3399                           
  3400                           ;main.c: 216: RBIE = 1;
  3401  0069  158B               	bsf	11,3	;volatile
  3402                           
  3403                           ;main.c: 217: IOCB0= 1;
  3404  006A  1409               	bsf	9,0	;volatile
  3405                           
  3406                           ;main.c: 218: PORTB;
  3407  006B  0806               	movf	6,w	;volatile
  3408                           
  3409                           ;main.c: 230: SystemEnterSleep();
  3410  006C  20A3  118A         	fcall	_SystemEnterSleep
  3411                           
  3412                           ;main.c: 231: if(RAIF)
  3413  006E  1D8D               	btfss	13,3	;volatile
  3414  006F  2873               	goto	l4189
  3415                           
  3416                           ;main.c: 232: {
  3417                           ;main.c: 233: RAIF = 0;
  3418  0070  118D               	bcf	13,3	;volatile
  3419                           
  3420                           ;main.c: 234: PORTA;
  3421  0071  1683               	bsf	3,5	;RP0=1, select bank1
  3422  0072  0806               	movf	6,w	;volatile
  3423  0073                     l4189:	
  3424                           
  3425                           ;main.c: 235: }
  3426                           ;main.c: 237: Refurbish_Sfr();
  3427  0073  238D  118A         	fcall	_Refurbish_Sfr
  3428                           
  3429                           ;main.c: 238: ADCON0 = 0X41;
  3430                           
  3431                           ;main.c: 239: ADON = 1;
  3432                           
  3433                           ;main.c: 240: ADCON1 = 0x00;
  3434  0075  2BED               	ljmp	PL24	;call to abstracted procedure
  3435  0076                     __end_of_WorkSleep:	
  3436  0076                     __ptext22:	
  3437 ;; *************** function _CheckTouchKey *****************
  3438 ;; Defined at:
  3439 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/100
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3453 ;;      Params:         0       0       0       0
  3454 ;;      Locals:         0       0       0       0
  3455 ;;      Temps:          0       0       0       0
  3456 ;;      Totals:         0       0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    5
  3460 ;; This function calls:
  3461 ;;		_CheckKeyOldValue
  3462 ;;		_CheckOnceResult
  3463 ;;		_CheckValidTime
  3464 ;;		_ClearResSum
  3465 ;;		_GetTouchKeyValue
  3466 ;;		_KeyStopClear
  3467 ;;		_TurnKeyFlags
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _CheckTouchKey
  3475  0076                     _CheckTouchKey:	
  3476                           
  3477                           ;incstack = 0
  3478                           ; Regs used in _CheckTouchKey: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3479  0076  1A78               	btfsc	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3480  0077  2884               	goto	l1266
  3481  0078  2133  118A         	fcall	_GetTouchKeyValue
  3482  007A  3008               	movlw	8
  3483  007B  1283               	bcf	3,5	;RP0=0, select bank0
  3484  007C  1303               	bcf	3,6	;RP1=0, select bank0
  3485  007D  0ABC               	incf	_KeyCounter,f
  3486  007E  023C               	subwf	_KeyCounter,w
  3487  007F  1C03               	skipc
  3488  0080  28A2               	goto	l4271
  3489  0081  01BC               	clrf	_KeyCounter
  3490  0082  1678               	bsf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3491  0083  28A2               	goto	l4271
  3492  0084                     l1266:	
  3493  0084  19F8               	btfsc	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3494  0085  289C               	goto	l4265
  3495  0086  21A2  118A         	fcall	_CheckOnceResult
  3496  0088  2334  118A         	fcall	_TurnKeyFlags
  3497  008A  15F8               	bsf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3498  008B  18F8               	btfsc	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3499  008C  2893               	goto	l4255
  3500  008D  3003               	movlw	3
  3501  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3502  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3503  0090  023C               	subwf	_KeyCounter,w
  3504  0091  1C03               	skipc
  3505  0092  2898               	goto	l4263
  3506  0093                     l4255:	
  3507  0093  231E  118A         	fcall	_KeyStopClear
  3508  0095  10F8               	bcf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  3509  0096  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3510  0097  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3511  0098                     l4263:	
  3512  0098  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0099  1303               	bcf	3,6	;RP1=0, select bank0
  3514  009A  01BC               	clrf	_KeyCounter
  3515  009B  28A2               	goto	l4271
  3516  009C                     l4265:	
  3517  009C  22BA  118A         	fcall	_CheckKeyOldValue
  3518  009E  2193  118A         	fcall	_ClearResSum
  3519  00A0  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3520  00A1  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3521  00A2                     l4271:	
  3522  00A2  2B67               	ljmp	l3287	;# 
  3523  00A3                     __end_of_CheckTouchKey:	
  3524  00A3                     __ptext18:	
  3525 ;; *************** function _SystemEnterSleep *****************
  3526 ;; Defined at:
  3527 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  92              2    6[BANK0 ] unsigned int 
  3532 ;;  93              2    4[BANK0 ] unsigned int 
  3533 ;;  94              2    2[BANK0 ] unsigned int 
  3534 ;;  91              1    8[BANK0 ] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      void 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 300/0
  3541 ;;		On exit  : 300/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3544 ;;      Params:         0       0       0       0
  3545 ;;      Locals:         0       7       0       0
  3546 ;;      Temps:          0       2       0       0
  3547 ;;      Totals:         0       9       0       0
  3548 ;;Total ram usage:        9 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    3
  3551 ;; This function calls:
  3552 ;;		_ClearResSum
  3553 ;;		_GetTouchKeyValue
  3554 ;;		_KeyClearOne
  3555 ;; This function is called by:
  3556 ;;		_WorkSleep
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           
  3561                           ;psect for function _SystemEnterSleep
  3562  00A3                     _SystemEnterSleep:	
  3563  00A3                     l1278:	
  3564                           ;incstack = 0
  3565                           ; Regs used in _SystemEnterSleep: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3566                           
  3567  00A3  0064               	clrwdt	;# 
  3568  00A4  1683               	bsf	3,5	;RP0=1, select bank1
  3569  00A5  1303               	bcf	3,6	;RP1=0, select bank1
  3570  00A6  0181               	clrf	1	;volatile
  3571  00A7  3007               	movlw	7
  3572  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  3573  00A9  0481               	iorwf	1,f	;volatile
  3574  00AA  1581               	bsf	1,3	;volatile
  3575  00AB  0064               	clrwdt	;# 
  3576  00AC  300A               	movlw	10
  3577  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  3578  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  3579  00AF  0081               	movwf	1	;volatile
  3580  00B0  0064               	clrwdt	;# 
  3581  00B1  1283               	bcf	3,5	;RP0=0, select bank2
  3582  00B2  1703               	bsf	3,6	;RP1=1, select bank2
  3583  00B3  0191               	clrf	17	;volatile
  3584  00B4  0193               	clrf	19	;volatile
  3585  00B5  3002               	movlw	2
  3586  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  3587  00B7  0094               	movwf	20	;volatile
  3588  00B8  0063               	sleep	;# 
  3589  00B9  0000               	nop	;# 
  3590  00BA  0064               	clrwdt	;# 
  3591  00BB  3072               	movlw	114
  3592  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  3593  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  3594  00BE  0094               	movwf	20	;volatile
  3595  00BF  3079               	movlw	121
  3596  00C0  1703               	bsf	3,6	;RP1=1, select bank2
  3597  00C1  0093               	movwf	19	;volatile
  3598  00C2  2193  118A         	fcall	_ClearResSum
  3599  00C4  1478               	bsf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3600  00C5  2133  118A         	fcall	_GetTouchKeyValue
  3601  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  3602  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  3603  00C9  23F9  118A         	fcall	PL30	;call to abstracted procedure
  3604  00CB  1C0B               	btfss	11,0	;volatile
  3605  00CC  188B               	btfsc	11,1	;volatile
  3606  00CD  28D0               	goto	l3853
  3607  00CE  1D8D               	btfss	13,3	;volatile
  3608  00CF  28D7               	goto	l3865
  3609  00D0                     l3853:	
  3610  00D0  2193               	fcall	_ClearResSum
  3611  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3612  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3613  00D3  01BC               	clrf	_KeyCounter
  3614  00D4  1278               	bcf	_b_kover/(0+8),_b_kover& (0+7)	;volatile
  3615  00D5  11F8               	bcf	_b_kover1/(0+8),_b_kover1& (0+7)	;volatile
  3616  00D6  0008               	return
  3617  00D7                     l3865:	
  3618  00D7  0853               	movf	SystemEnterSleep@92,w
  3619  00D8  3903               	andlw	3
  3620  00D9  1003               	clrc
  3621  00DA  1903               	btfsc	3,2
  3622  00DB  292D               	goto	L7
  3623  00DC  0D55               	rlf	SystemEnterSleep@91,w
  3624  00DD  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3625  00DE  0084               	movwf	4
  3626  00DF  1383               	bcf	3,7	;select IRP bank0
  3627  00E0  0800               	movf	0,w
  3628  00E1  00D1               	movwf	SystemEnterSleep@93
  3629  00E2  0A84               	incf	4,f
  3630  00E3  0800               	movf	0,w
  3631  00E4  00D2               	movwf	SystemEnterSleep@93+1
  3632  00E5  00D0               	movwf	SystemEnterSleep@94+1
  3633  00E6  0851               	movf	SystemEnterSleep@93,w
  3634  00E7  00CF               	movwf	SystemEnterSleep@94
  3635  00E8  0851               	movf	SystemEnterSleep@93,w
  3636  00E9  0452               	iorwf	SystemEnterSleep@93+1,w
  3637  00EA  1903               	btfsc	3,2
  3638  00EB  292C               	goto	l3899
  3639  00EC  0855               	movf	SystemEnterSleep@91,w
  3640  00ED  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3641  00EE  0084               	movwf	4
  3642  00EF  158A  2000  118A   	fcall	stringdir
  3643  00F2  07CF               	addwf	SystemEnterSleep@94,f
  3644  00F3  1803               	skipnc
  3645  00F4  0AD0               	incf	SystemEnterSleep@94+1,f
  3646  00F5  1003               	clrc
  3647  00F6  0D55               	rlf	SystemEnterSleep@91,w
  3648  00F7  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3649  00F8  23D8  118A         	fcall	PL16	;call to abstracted procedure
  3650  00FA  0850               	movf	SystemEnterSleep@94+1,w
  3651  00FB  024E               	subwf	??_SystemEnterSleep+1,w
  3652  00FC  1D03               	skipz
  3653  00FD  2900               	goto	u3535
  3654  00FE  084F               	movf	SystemEnterSleep@94,w
  3655  00FF  024D               	subwf	??_SystemEnterSleep,w
  3656  0100                     u3535:	
  3657  0100  1C03               	skipc
  3658  0101  2914               	goto	L6
  3659  0102  23F9  118A         	fcall	PL30	;call to abstracted procedure
  3660  0104                     l3879:	
  3661  0104  0853               	movf	SystemEnterSleep@92,w
  3662  0105  3903               	andlw	3
  3663  0106  1D03               	btfss	3,2
  3664  0107  290B               	goto	l3883
  3665  0108  0855               	movf	SystemEnterSleep@91,w
  3666  0109  2297  118A         	fcall	_KeyClearOne
  3667  010B                     l3883:	
  3668  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3669  010C  3002               	movlw	2
  3670  010D  1303               	bcf	3,6	;RP1=0, select bank0
  3671  010E  1003               	clrc
  3672  010F  23FE  118A         	fcall	PL32	;call to abstracted procedure
  3673  0111  1803               	btfsc	3,0
  3674  0112  28D0               	goto	l3853
  3675  0113  2904               	goto	l3879
  3676  0114                     L6:	
  3677  0114  0D55               	rlf	SystemEnterSleep@91,w
  3678  0115  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3679  0116  23D8  118A         	fcall	PL16	;call to abstracted procedure
  3680  0118  1003               	clrc
  3681  0119  0D55               	rlf	SystemEnterSleep@91,w
  3682  011A  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  3683  011B  23C2  118A         	fcall	PL12	;call to abstracted procedure
  3684  011D  0800               	movf	0,w
  3685  011E  00CD               	movwf	??_SystemEnterSleep
  3686  011F  0A84               	incf	4,f
  3687  0120  0800               	movf	0,w
  3688  0121  00CE               	movwf	??_SystemEnterSleep+1
  3689  0122  1003               	clrc
  3690  0123  0D55               	rlf	SystemEnterSleep@91,w
  3691  0124  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  3692  0125  23C2  118A         	fcall	PL12	;call to abstracted procedure
  3693  0127  0851               	movf	SystemEnterSleep@93,w
  3694  0128  0080               	movwf	0
  3695  0129  0A84               	incf	4,f
  3696  012A  0852               	movf	SystemEnterSleep@93+1,w
  3697  012B  0080               	movwf	0
  3698  012C                     l3899:	
  3699  012C  1003               	clrc
  3700  012D                     L7:	
  3701  012D  3002               	movlw	2
  3702  012E  23FE  118A         	fcall	PL32	;call to abstracted procedure
  3703  0130  1803               	btfsc	3,0
  3704  0131  28A3               	goto	l1278
  3705  0132  28D7               	goto	l3865
  3706  0133                     __end_of_SystemEnterSleep:	
  3707  0133                     __ptext26:	
  3708 ;; *************** function _GetTouchKeyValue *****************
  3709 ;; Defined at:
  3710 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  63              2    5[COMMON] unsigned int 
  3715 ;;  64              2    3[COMMON] unsigned int 
  3716 ;;  62              1    7[COMMON] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/200
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3726 ;;      Params:         0       0       0       0
  3727 ;;      Locals:         5       0       0       0
  3728 ;;      Temps:          0       0       0       0
  3729 ;;      Totals:         5       0       0       0
  3730 ;;Total ram usage:        5 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    2
  3733 ;; This function calls:
  3734 ;;		_ClearResSum
  3735 ;; This function is called by:
  3736 ;;		_CheckTouchKey
  3737 ;;		_SystemEnterSleep
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           
  3742                           ;psect for function _GetTouchKeyValue
  3743  0133                     _GetTouchKeyValue:	
  3744                           
  3745                           ;incstack = 0
  3746                           ; Regs used in _GetTouchKeyValue: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3747  0133  01F7               	clrf	GetTouchKeyValue@62
  3748  0134  01F5               	clrf	GetTouchKeyValue@63
  3749  0135  0AF5               	incf	GetTouchKeyValue@63,f
  3750  0136  01F6               	clrf	GetTouchKeyValue@63+1
  3751  0137                     l2837:	
  3752  0137  1C78               	btfss	_b_ksleep/(0+8),_b_ksleep& (0+7)	;volatile
  3753  0138  293D               	goto	l2841
  3754  0139  0875               	movf	GetTouchKeyValue@63,w
  3755  013A  3903               	andlw	3
  3756  013B  1903               	btfsc	3,2
  3757  013C  2989               	goto	l2869
  3758  013D                     l2841:	
  3759  013D  1283               	bcf	3,5	;RP0=0, select bank2
  3760  013E  1703               	bsf	3,6	;RP1=1, select bank2
  3761  013F  0191               	clrf	17	;volatile
  3762  0140  0192               	clrf	18	;volatile
  3763  0141  3079               	movlw	121
  3764  0142  0093               	movwf	19	;volatile
  3765  0143  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0144  1305               	bcf	5,6	;volatile
  3767  0145  1306               	bcf	6,6	;volatile
  3768  0146  0000               	nop	;# 
  3769  0147  0000               	nop	;# 
  3770  0148  0000               	nop	;# 
  3771  0149  0000               	nop	;# 
  3772  014A  0000               	nop	;# 
  3773  014B  0000               	nop	;# 
  3774  014C  0000               	nop	;# 
  3775  014D  0000               	nop	;# 
  3776  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3777  014F  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0150  1705               	bsf	5,6	;volatile
  3779  0151  0877               	movf	GetTouchKeyValue@62,w
  3780  0152  3E0B               	addlw	low ((_Table_KeyCap-__stringbase)| (0+32768))
  3781  0153  0084               	movwf	4
  3782  0154  158A  2000  118A   	fcall	stringdir
  3783  0157  1703               	bsf	3,6	;RP1=1, select bank2
  3784  0158  0091               	movwf	17	;volatile
  3785  0159  0877               	movf	GetTouchKeyValue@62,w
  3786  015A  3E0D               	addlw	low ((_Table_KeyChannel-__stringbase)| (0+32768))
  3787  015B  0084               	movwf	4
  3788  015C  158A  2000  118A   	fcall	stringdir
  3789  015F  0092               	movwf	18	;volatile
  3790  0160  0000               	nop	;# 
  3791  0161  0000               	nop	;# 
  3792  0162  0000               	nop	;# 
  3793  0163  0000               	nop	;# 
  3794  0164  1283               	bcf	3,5	;RP0=0, select bank2
  3795  0165  1703               	bsf	3,6	;RP1=1, select bank2
  3796  0166  1411               	bsf	17,0	;volatile
  3797  0167  30D0               	movlw	208
  3798  0168  00F3               	movwf	GetTouchKeyValue@64
  3799  0169  3007               	movlw	7
  3800  016A  00F4               	movwf	GetTouchKeyValue@64+1
  3801  016B                     l1188:	
  3802  016B  1B91               	btfsc	17,7	;volatile
  3803  016C  2979               	goto	l2867
  3804  016D  3001               	movlw	1
  3805  016E  02F3               	subwf	GetTouchKeyValue@64,f
  3806  016F  1C03               	skipc
  3807  0170  03F4               	decf	GetTouchKeyValue@64+1,f
  3808  0171  0873               	movf	GetTouchKeyValue@64,w
  3809  0172  0474               	iorwf	GetTouchKeyValue@64+1,w
  3810  0173  1D03               	btfss	3,2
  3811  0174  296B               	goto	l1188
  3812  0175  30FF               	movlw	255
  3813  0176  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0177  00BC               	movwf	_KeyCounter
  3815  0178  2993               	ljmp	l2687
  3816  0179                     l2867:	
  3817  0179  1003               	clrc
  3818  017A  0D77               	rlf	GetTouchKeyValue@62,w
  3819  017B  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3820  017C  0084               	movwf	4
  3821  017D  0816               	movf	22,w	;volatile
  3822  017E  1383               	bcf	3,7	;select IRP bank0
  3823  017F  0780               	addwf	0,f
  3824  0180  0F84               	incfsz	4,f
  3825  0181  0800               	movf	0,w
  3826  0182  1803               	skipnc
  3827  0183  0A00               	incf	0,w
  3828  0184  00FF               	movwf	127
  3829  0185  0817               	movf	23,w	;volatile
  3830  0186  077F               	addwf	127,w
  3831  0187  0080               	movwf	0
  3832  0188  0384               	decf	4,f
  3833  0189                     l2869:	
  3834  0189  3002               	movlw	2
  3835  018A  1003               	clrc
  3836  018B  0DF5               	rlf	GetTouchKeyValue@63,f
  3837  018C  0DF6               	rlf	GetTouchKeyValue@63+1,f
  3838  018D  0AF7               	incf	GetTouchKeyValue@62,f
  3839  018E  0277               	subwf	GetTouchKeyValue@62,w
  3840  018F  1C03               	skipc
  3841  0190  2937               	goto	l2837
  3842  0191  1078               	bcf	_b_ksleep/(0+8),_b_ksleep& (0+7)	;# 
  3843  0192  0008               	return
  3844  0193                     __end_of_GetTouchKeyValue:	
  3845  0193                     __ptext27:	
  3846 ;; *************** function _ClearResSum *****************
  3847 ;; Defined at:
  3848 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  56              1    2[COMMON] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/200
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3862 ;;      Params:         0       0       0       0
  3863 ;;      Locals:         1       0       0       0
  3864 ;;      Temps:          0       0       0       0
  3865 ;;      Totals:         1       0       0       0
  3866 ;;Total ram usage:        1 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    1
  3869 ;; This function calls:
  3870 ;;		Nothing
  3871 ;; This function is called by:
  3872 ;;		_GetTouchKeyValue
  3873 ;;		_CheckTouchKey
  3874 ;;		_SystemEnterSleep
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           
  3879                           ;psect for function _ClearResSum
  3880  0193                     _ClearResSum:	
  3881  0193                     l2687:	
  3882                           ;incstack = 0
  3883                           ; Regs used in _ClearResSum: [wreg-fsr0h+status,2+status,0]
  3884                           
  3885  0193  01F2               	clrf	ClearResSum@56
  3886  0194                     l2689:	
  3887  0194  1003               	clrc
  3888  0195  0D72               	rlf	ClearResSum@56,w
  3889  0196  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3890  0197  0084               	movwf	4
  3891  0198  3002               	movlw	2
  3892  0199  1383               	bcf	3,7	;select IRP bank0
  3893  019A  0180               	clrf	0
  3894  019B  0A84               	incf	4,f
  3895  019C  0180               	clrf	0
  3896  019D  0AF2               	incf	ClearResSum@56,f
  3897  019E  0272               	subwf	ClearResSum@56,w
  3898  019F  1803               	btfsc	3,0
  3899  01A0  0008               	return
  3900  01A1  2994               	goto	l2689
  3901  01A2                     __end_of_ClearResSum:	
  3902  01A2                     __ptext29:	
  3903 ;; *************** function _CheckOnceResult *****************
  3904 ;; Defined at:
  3905 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;  71              2   10[BANK0 ] unsigned int 
  3910 ;;  72              2    7[BANK0 ] unsigned int 
  3911 ;;  73              2    4[BANK0 ] unsigned int 
  3912 ;;  68              1   12[BANK0 ] unsigned char 
  3913 ;;  69              1    9[BANK0 ] unsigned char 
  3914 ;;  70              1    6[BANK0 ] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/100
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3924 ;;      Params:         0       0       0       0
  3925 ;;      Locals:         0       9       0       0
  3926 ;;      Temps:          0       4       0       0
  3927 ;;      Totals:         0      13       0       0
  3928 ;;Total ram usage:       13 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    3
  3931 ;; This function calls:
  3932 ;;		_KeyClearOne
  3933 ;;		_KeyHave
  3934 ;;		_KeyIsIn
  3935 ;; This function is called by:
  3936 ;;		_CheckTouchKey
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function _CheckOnceResult
  3942  01A2                     _CheckOnceResult:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _CheckOnceResult: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3946  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3947  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3948  01A4  01D9               	clrf	CheckOnceResult@68
  3949  01A5  01F9               	clrf	_KeyData	;volatile
  3950  01A6  01FA               	clrf	_KeyData+1	;volatile
  3951  01A7  01BB               	clrf	_KeyMaxSub
  3952  01A8                     l4007:	
  3953  01A8  0859               	movf	CheckOnceResult@68,w
  3954  01A9  3907               	andlw	7
  3955  01AA  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  3956  01AB  0084               	movwf	4
  3957  01AC  158A  2000  118A   	fcall	stringdir
  3958  01AF  00D3               	movwf	CheckOnceResult@70
  3959  01B0  1003               	clrc
  3960  01B1  0D59               	rlf	CheckOnceResult@68,w
  3961  01B2  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3962  01B3  0084               	movwf	4
  3963  01B4  3003               	movlw	3
  3964  01B5                     u3805:	
  3965  01B5  0A84               	incf	4,f
  3966  01B6  1003               	clrc
  3967  01B7  1383               	bcf	3,7	;select IRP bank0
  3968  01B8  0C80               	rrf	0,f
  3969  01B9  0384               	decf	4,f
  3970  01BA  0C80               	rrf	0,f
  3971  01BB  3EFF               	addlw	-1
  3972  01BC  1D03               	skipz
  3973  01BD  29B5               	goto	u3805
  3974  01BE  1003               	clrc
  3975  01BF  0D59               	rlf	CheckOnceResult@68,w
  3976  01C0  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  3977  01C1  0084               	movwf	4
  3978  01C2  0800               	movf	0,w
  3979  01C3  00D7               	movwf	CheckOnceResult@71
  3980  01C4  0A84               	incf	4,f
  3981  01C5  0800               	movf	0,w
  3982  01C6  00D8               	movwf	CheckOnceResult@71+1
  3983  01C7  0859               	movf	CheckOnceResult@68,w
  3984  01C8  3E09               	addlw	low ((_Table_KeyDown-__stringbase)| (0+32768))
  3985  01C9  0084               	movwf	4
  3986  01CA  158A  2000  118A   	fcall	stringdir
  3987  01CD  00D6               	movwf	CheckOnceResult@69
  3988  01CE  00D4               	movwf	CheckOnceResult@72
  3989  01CF  01D5               	clrf	CheckOnceResult@72+1
  3990  01D0  0857               	movf	CheckOnceResult@71,w
  3991  01D1  07D4               	addwf	CheckOnceResult@72,f
  3992  01D2  1803               	skipnc
  3993  01D3  0AD5               	incf	CheckOnceResult@72+1,f
  3994  01D4  0858               	movf	CheckOnceResult@71+1,w
  3995  01D5  07D5               	addwf	CheckOnceResult@72+1,f
  3996  01D6  0859               	movf	CheckOnceResult@68,w
  3997  01D7  2283  118A         	fcall	_KeyIsIn
  3998  01D9  3A00               	xorlw	0
  3999  01DA  1003               	clrc
  4000  01DB  1D03               	skipz
  4001  01DC  2A37               	goto	L10
  4002  01DD  0D59               	rlf	CheckOnceResult@68,w
  4003  01DE  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4004  01DF  0084               	movwf	4
  4005  01E0  1383               	bcf	3,7	;select IRP bank0
  4006  01E1  0800               	movf	0,w
  4007  01E2  00D1               	movwf	CheckOnceResult@73
  4008  01E3  0A84               	incf	4,f
  4009  01E4  0800               	movf	0,w
  4010  01E5  00D2               	movwf	CheckOnceResult@73+1
  4011  01E6  1003               	clrc
  4012  01E7  0D59               	rlf	CheckOnceResult@68,w
  4013  01E8  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4014  01E9  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4015  01EB  0255               	subwf	CheckOnceResult@72+1,w
  4016  01EC  1D03               	skipz
  4017  01ED  29F0               	goto	u3825
  4018  01EE  084D               	movf	??_CheckOnceResult,w
  4019  01EF  0254               	subwf	CheckOnceResult@72,w
  4020  01F0                     u3825:	
  4021  01F0  1803               	skipnc
  4022  01F1  29FF               	goto	l4025
  4023  01F2  1003               	clrc
  4024  01F3  0D59               	rlf	CheckOnceResult@68,w
  4025  01F4  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4026  01F5  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4027  01F7  0857               	movf	CheckOnceResult@71,w
  4028  01F8  024D               	subwf	??_CheckOnceResult,w
  4029  01F9  00D7               	movwf	CheckOnceResult@71
  4030  01FA  0858               	movf	CheckOnceResult@71+1,w
  4031  01FB  1C03               	skipc
  4032  01FC  0A58               	incf	CheckOnceResult@71+1,w
  4033  01FD  024E               	subwf	??_CheckOnceResult+1,w
  4034  01FE  2A23               	goto	L8
  4035  01FF                     l4025:	
  4036  01FF  0852               	movf	CheckOnceResult@73+1,w
  4037  0200  0255               	subwf	CheckOnceResult@72+1,w
  4038  0201  1D03               	skipz
  4039  0202  2A05               	goto	u3835
  4040  0203  0851               	movf	CheckOnceResult@73,w
  4041  0204  0254               	subwf	CheckOnceResult@72,w
  4042  0205                     u3835:	
  4043  0205  1803               	skipnc
  4044  0206  2A7B               	goto	l4071
  4045  0207  1003               	clrc
  4046  0208  0D59               	rlf	CheckOnceResult@68,w
  4047  0209  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4048  020A  23BB  118A         	fcall	PL8	;call to abstracted procedure
  4049  020C  0255               	subwf	CheckOnceResult@72+1,w
  4050  020D  1D03               	skipz
  4051  020E  2A11               	goto	u3845
  4052  020F  084D               	movf	??_CheckOnceResult,w
  4053  0210  0254               	subwf	CheckOnceResult@72,w
  4054  0211                     u3845:	
  4055  0211  1803               	skipnc
  4056  0212  2A7B               	goto	l4071
  4057  0213  1003               	clrc
  4058  0214  0D59               	rlf	CheckOnceResult@68,w
  4059  0215  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4060  0216  0084               	movwf	4
  4061  0217  0851               	movf	CheckOnceResult@73,w
  4062  0218  0080               	movwf	0
  4063  0219  0A84               	incf	4,f
  4064  021A  0852               	movf	CheckOnceResult@73+1,w
  4065  021B  0080               	movwf	0
  4066  021C  0857               	movf	CheckOnceResult@71,w
  4067  021D  0251               	subwf	CheckOnceResult@73,w
  4068  021E  00D7               	movwf	CheckOnceResult@71
  4069  021F  0858               	movf	CheckOnceResult@71+1,w
  4070  0220  1C03               	skipc
  4071  0221  0A58               	incf	CheckOnceResult@71+1,w
  4072  0222  0252               	subwf	CheckOnceResult@73+1,w
  4073  0223                     L8:	
  4074  0223  00D8               	movwf	CheckOnceResult@71+1
  4075  0224  0859               	movf	CheckOnceResult@68,w
  4076  0225  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4077  0226  0084               	movwf	4
  4078  0227  0180               	clrf	0
  4079  0228  0858               	movf	CheckOnceResult@71+1,w
  4080  0229  1903               	btfsc	3,2
  4081  022A  2A2D               	goto	l4039
  4082  022B  30FF               	movlw	255
  4083  022C  2A2E               	goto	L9
  4084  022D                     l4039:	
  4085  022D  0857               	movf	CheckOnceResult@71,w
  4086  022E                     L9:	
  4087  022E  00D6               	movwf	CheckOnceResult@69
  4088  022F  023B               	subwf	_KeyMaxSub,w
  4089  0230  1803               	skipnc
  4090  0231  2A35               	goto	l4045
  4091  0232  0856               	movf	CheckOnceResult@69,w
  4092  0233  00BB               	movwf	_KeyMaxSub
  4093  0234  2A75               	goto	l4069
  4094  0235                     l4045:	
  4095  0235  0ABC               	incf	_KeyCounter,f
  4096  0236  2A7B               	goto	l4071
  4097  0237                     L10:	
  4098  0237  0D59               	rlf	CheckOnceResult@68,w
  4099  0238  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4100  0239  0084               	movwf	4
  4101  023A  1383               	bcf	3,7	;select IRP bank1
  4102  023B  0800               	movf	0,w
  4103  023C  00CD               	movwf	??_CheckOnceResult
  4104  023D  0A84               	incf	4,f
  4105  023E  0800               	movf	0,w
  4106  023F  00CE               	movwf	??_CheckOnceResult+1
  4107  0240  084D               	movf	??_CheckOnceResult,w
  4108  0241  3E01               	addlw	1
  4109  0242  00CF               	movwf	??_CheckOnceResult+2
  4110  0243  084E               	movf	??_CheckOnceResult+1,w
  4111  0244  1803               	skipnc
  4112  0245  3E01               	addlw	1
  4113  0246  00D0               	movwf	??_CheckOnceResult+3
  4114  0247  0855               	movf	CheckOnceResult@72+1,w
  4115  0248  0250               	subwf	??_CheckOnceResult+3,w
  4116  0249  1D03               	skipz
  4117  024A  2A4D               	goto	u3875
  4118  024B  0854               	movf	CheckOnceResult@72,w
  4119  024C  024F               	subwf	??_CheckOnceResult+2,w
  4120  024D                     u3875:	
  4121  024D  1C03               	btfss	3,0
  4122  024E  2A7B               	goto	l4071
  4123  024F  1003               	clrc
  4124  0250  0D59               	rlf	CheckOnceResult@68,w
  4125  0251  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4126  0252  0084               	movwf	4
  4127  0253  0800               	movf	0,w
  4128  0254  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4129  0256  1C03               	skipc
  4130  0257  2A61               	goto	l4059
  4131  0258  1003               	clrc
  4132  0259  0D59               	rlf	CheckOnceResult@68,w
  4133  025A  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4134  025B  0084               	movwf	4
  4135  025C  0800               	movf	0,w
  4136  025D  23A9  118A         	fcall	PL4	;call to abstracted procedure
  4137  025F  1803               	skipnc
  4138  0260  2A6D               	goto	l4063
  4139  0261                     l4059:	
  4140  0261  0859               	movf	CheckOnceResult@68,w
  4141  0262  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4142  0263  0084               	movwf	4
  4143  0264  3009               	movlw	9
  4144  0265  0A80               	incf	0,f
  4145  0266  0200               	subwf	0,w
  4146  0267  1C03               	skipc
  4147  0268  2A71               	goto	l4067
  4148  0269  0859               	movf	CheckOnceResult@68,w
  4149  026A  2297  118A         	fcall	_KeyClearOne
  4150  026C  2A7B               	goto	l4071
  4151  026D                     l4063:	
  4152  026D  0859               	movf	CheckOnceResult@68,w
  4153  026E  3E34               	addlw	(low (_KeyUpShake| 0))& (0+255)
  4154  026F  0084               	movwf	4
  4155  0270  0180               	clrf	0
  4156  0271                     l4067:	
  4157  0271  087A               	movf	_KeyData+1,w	;volatile
  4158  0272  0479               	iorwf	_KeyData,w	;volatile
  4159  0273  1D03               	btfss	3,2
  4160  0274  2A7B               	goto	l4071
  4161  0275                     l4069:	
  4162  0275  0853               	movf	CheckOnceResult@70,w
  4163  0276  00F2               	movwf	KeyHave@59
  4164  0277  01F3               	clrf	KeyHave@59+1
  4165  0278  0859               	movf	CheckOnceResult@68,w
  4166  0279  22AC  118A         	fcall	_KeyHave
  4167  027B                     l4071:	
  4168  027B  3002               	movlw	2
  4169  027C  1283               	bcf	3,5	;RP0=0, select bank0
  4170  027D  1303               	bcf	3,6	;RP1=0, select bank0
  4171  027E  0AD9               	incf	CheckOnceResult@68,f
  4172  027F  0259               	subwf	CheckOnceResult@68,w
  4173  0280  1803               	btfsc	3,0
  4174  0281  0008               	return
  4175  0282  29A8               	goto	l4007
  4176  0283                     __end_of_CheckOnceResult:	
  4177  0283                     __ptext33:	
  4178 ;; *************** function _KeyIsIn *****************
  4179 ;; Defined at:
  4180 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  45              1    wreg     unsigned char 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  45              1    3[COMMON] unsigned char 
  4185 ;;  46              1    2[COMMON] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      unsigned char 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 300/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4195 ;;      Params:         0       0       0       0
  4196 ;;      Locals:         2       0       0       0
  4197 ;;      Temps:          0       0       0       0
  4198 ;;      Totals:         2       0       0       0
  4199 ;;Total ram usage:        2 bytes
  4200 ;; Hardware stack levels used:    2
  4201 ;; Hardware stack levels required when called:    1
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_KeyClearIn
  4206 ;;		_CheckOnceResult
  4207 ;;		_CheckKeyOldValue
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _KeyIsIn
  4213  0283                     _KeyIsIn:	
  4214                           
  4215                           ;incstack = 0
  4216                           ; Regs used in _KeyIsIn: [wreg-fsr0h+status,2+status,0+pclath]
  4217                           ;KeyIsIn@45 stored from wreg
  4218  0283  00F3               	movwf	KeyIsIn@45
  4219  0284  3907               	andlw	7
  4220  0285  3E01               	addlw	low ((_Table_KeyFalg-__stringbase)| (0+32768))
  4221  0286  0084               	movwf	4
  4222  0287  158A  2000  118A   	fcall	stringdir
  4223  028A  00F2               	movwf	KeyIsIn@46
  4224  028B  1DF3               	btfss	KeyIsIn@45,3
  4225  028C  2A91               	goto	l2673
  4226  028D  1283               	bcf	3,5	;RP0=0, select bank0
  4227  028E  1303               	bcf	3,6	;RP1=0, select bank0
  4228  028F  0837               	movf	_KeyFlag+1,w	;volatile
  4229  0290  2A94               	goto	L15
  4230  0291                     l2673:	
  4231  0291  1283               	bcf	3,5	;RP0=0, select bank0
  4232  0292  1303               	bcf	3,6	;RP1=0, select bank0
  4233  0293  0836               	movf	_KeyFlag,w	;volatile
  4234  0294                     L15:	
  4235  0294  05F2               	andwf	KeyIsIn@46,f
  4236  0295  0872               	movf	KeyIsIn@46,w
  4237  0296  0008               	return
  4238  0297                     __end_of_KeyIsIn:	
  4239  0297                     __ptext31:	
  4240 ;; *************** function _KeyClearOne *****************
  4241 ;; Defined at:
  4242 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  49              1    wreg     unsigned char 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  49              1    2[COMMON] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4256 ;;      Params:         0       0       0       0
  4257 ;;      Locals:         1       0       0       0
  4258 ;;      Temps:          0       0       0       0
  4259 ;;      Totals:         1       0       0       0
  4260 ;;Total ram usage:        1 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    1
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_KeyClearIn
  4267 ;;		_KeyStopClear
  4268 ;;		_CheckOnceResult
  4269 ;;		_SystemEnterSleep
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _KeyClearOne
  4275  0297                     _KeyClearOne:	
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _KeyClearOne: [wreg-fsr0h+status,2+status,0]
  4279                           ;KeyClearOne@49 stored from wreg
  4280  0297  00F2               	movwf	KeyClearOne@49
  4281  0298  1003               	clrc
  4282  0299  0D72               	rlf	KeyClearOne@49,w
  4283  029A  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4284  029B  0084               	movwf	4
  4285  029C  1383               	bcf	3,7	;select IRP bank1
  4286  029D  23E7  118A         	fcall	PL22	;call to abstracted procedure
  4287  029F  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4288  02A0  0084               	movwf	4
  4289  02A1  23E7  118A         	fcall	PL22	;call to abstracted procedure
  4290  02A3  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4291  02A4  0084               	movwf	4
  4292  02A5  23E7               	fcall	PL22	;call to abstracted procedure
  4293  02A6  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4294  02A7  0084               	movwf	4
  4295  02A8  0180               	clrf	0
  4296  02A9  0A84               	incf	4,f
  4297  02AA  0180               	clrf	0	;# 
  4298  02AB  0008               	return
  4299  02AC                     __end_of_KeyClearOne:	
  4300  02AC                     __ptext30:	
  4301 ;; *************** function _KeyHave *****************
  4302 ;; Defined at:
  4303 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  58              1    wreg     unsigned char 
  4306 ;;  59              2    2[COMMON] unsigned int 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  58              1    4[COMMON] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, status,0
  4313 ;; Tracked objects:
  4314 ;;		On entry : B00/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4318 ;;      Params:         2       0       0       0
  4319 ;;      Locals:         1       0       0       0
  4320 ;;      Temps:          0       0       0       0
  4321 ;;      Totals:         3       0       0       0
  4322 ;;Total ram usage:        3 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    1
  4325 ;; This function calls:
  4326 ;;		Nothing
  4327 ;; This function is called by:
  4328 ;;		_CheckOnceResult
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function _KeyHave
  4334  02AC                     _KeyHave:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in _KeyHave: [wreg+status,2+status,0]
  4338                           ;KeyHave@58 stored from wreg
  4339  02AC  00F4               	movwf	KeyHave@58
  4340  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  4341  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  4342  02AF  0ABC               	incf	_KeyCounter,f
  4343  02B0  01F9               	clrf	_KeyData	;volatile
  4344  02B1  01FA               	clrf	_KeyData+1	;volatile
  4345  02B2  1DF4               	btfss	KeyHave@58,3
  4346  02B3  2AB7               	goto	l2825
  4347  02B4  0872               	movf	KeyHave@59,w
  4348  02B5  00FA               	movwf	_KeyData+1	;volatile
  4349  02B6  0008               	return
  4350  02B7                     l2825:	
  4351  02B7  0872               	movf	KeyHave@59,w
  4352  02B8  00F9               	movwf	_KeyData	;volatile
  4353  02B9  0008               	return
  4354  02BA                     __end_of_KeyHave:	
  4355  02BA                     __ptext32:	
  4356 ;; *************** function _CheckKeyOldValue *****************
  4357 ;; Defined at:
  4358 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;		None
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  80              2    2[BANK0 ] unsigned int 
  4363 ;;  79              2    0[BANK0 ] unsigned int 
  4364 ;;  78              1    4[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/100
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4374 ;;      Params:         0       0       0       0
  4375 ;;      Locals:         0       5       0       0
  4376 ;;      Temps:          2       0       0       0
  4377 ;;      Totals:         2       5       0       0
  4378 ;;Total ram usage:        7 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    3
  4381 ;; This function calls:
  4382 ;;		_KeyIsIn
  4383 ;; This function is called by:
  4384 ;;		_CheckTouchKey
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _CheckKeyOldValue
  4390  02BA                     _CheckKeyOldValue:	
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _CheckKeyOldValue: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4394  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  4395  02BB  3004               	movlw	4
  4396  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  4397  02BD  01D1               	clrf	CheckKeyOldValue@78
  4398  02BE  0ABA               	incf	CheckKeyOldValue@F77,f
  4399  02BF  023A               	subwf	CheckKeyOldValue@F77,w
  4400  02C0  1C03               	btfss	3,0
  4401  02C1  0008               	return
  4402  02C2  01BA               	clrf	CheckKeyOldValue@F77
  4403  02C3                     l3217:	
  4404  02C3  1003               	clrc
  4405  02C4  0D51               	rlf	CheckKeyOldValue@78,w
  4406  02C5  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4407  02C6  0084               	movwf	4
  4408  02C7  1383               	bcf	3,7	;select IRP bank0
  4409  02C8  0800               	movf	0,w
  4410  02C9  00CD               	movwf	CheckKeyOldValue@79
  4411  02CA  0A84               	incf	4,f
  4412  02CB  0800               	movf	0,w
  4413  02CC  00CE               	movwf	CheckKeyOldValue@79+1
  4414  02CD  0851               	movf	CheckKeyOldValue@78,w
  4415  02CE  2283  118A         	fcall	_KeyIsIn
  4416  02D0  3A00               	xorlw	0
  4417  02D1  1003               	clrc
  4418  02D2  1D03               	skipz
  4419  02D3  2B08               	goto	L14
  4420  02D4  0D51               	rlf	CheckKeyOldValue@78,w
  4421  02D5  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4422  02D6  0084               	movwf	4
  4423  02D7  1383               	bcf	3,7	;select IRP bank1
  4424  02D8  239B  118A         	fcall	PL2	;call to abstracted procedure
  4425  02DA  1903               	skipnz
  4426  02DB  024F               	subwf	CheckKeyOldValue@80,w
  4427  02DC  1C03               	skipc
  4428  02DD  2AE4               	goto	L11
  4429  02DE  0F4F               	incfsz	CheckKeyOldValue@80,w
  4430  02DF  2B07               	goto	l1229
  4431  02E0  0A50               	incf	CheckKeyOldValue@80+1,w
  4432  02E1  1003               	clrc
  4433  02E2  1D03               	btfss	3,2
  4434  02E3  2B08               	goto	L14
  4435  02E4                     L11:	
  4436  02E4  0D51               	rlf	CheckKeyOldValue@78,w
  4437  02E5  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4438  02E6  0084               	movwf	4
  4439  02E7  239B  118A         	fcall	PL2	;call to abstracted procedure
  4440  02E9  1903               	skipnz
  4441  02EA  024F               	subwf	CheckKeyOldValue@80,w
  4442  02EB  1C03               	skipc
  4443  02EC  2AF3               	goto	L12
  4444  02ED  0F4F               	incfsz	CheckKeyOldValue@80,w
  4445  02EE  2B07               	goto	l1229
  4446  02EF  0A50               	incf	CheckKeyOldValue@80+1,w
  4447  02F0  1003               	clrc
  4448  02F1  1D03               	btfss	3,2
  4449  02F2  2B08               	goto	L14
  4450  02F3                     L12:	
  4451  02F3  0D51               	rlf	CheckKeyOldValue@78,w
  4452  02F4  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4453  02F5  0084               	movwf	4
  4454  02F6  239B  118A         	fcall	PL2	;call to abstracted procedure
  4455  02F8  1903               	skipnz
  4456  02F9  024F               	subwf	CheckKeyOldValue@80,w
  4457  02FA  1C03               	skipc
  4458  02FB  2B02               	goto	L13
  4459  02FC  0F4F               	incfsz	CheckKeyOldValue@80,w
  4460  02FD  2B07               	goto	l1229
  4461  02FE  0A50               	incf	CheckKeyOldValue@80+1,w
  4462  02FF  1003               	clrc
  4463  0300  1D03               	btfss	3,2
  4464  0301  2B08               	goto	L14
  4465  0302                     L13:	
  4466  0302  0D51               	rlf	CheckKeyOldValue@78,w
  4467  0303  3EA0               	addlw	(low (_KeyReference| 0))& (0+255)
  4468  0304  0084               	movwf	4
  4469  0305  23F3  118A         	fcall	PL28	;call to abstracted procedure
  4470  0307                     l1229:	
  4471  0307  1003               	clrc
  4472  0308                     L14:	
  4473  0308  0D51               	rlf	CheckKeyOldValue@78,w
  4474  0309  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4475  030A  0084               	movwf	4
  4476  030B  1383               	bcf	3,7	;select IRP bank0
  4477  030C  23DF  118A         	fcall	PL20	;call to abstracted procedure
  4478  030E  3E20               	addlw	(low (_KeyOldValue2| 0))& (0+255)
  4479  030F  23CD  118A         	fcall	PL14	;call to abstracted procedure
  4480  0311  23DF  118A         	fcall	PL20	;call to abstracted procedure
  4481  0313  3E24               	addlw	(low (_KeyOldValue1| 0))& (0+255)
  4482  0314  23CD  118A         	fcall	PL14	;call to abstracted procedure
  4483  0316  23F3  118A         	fcall	PL28	;call to abstracted procedure
  4484  0318  3002               	movlw	2
  4485  0319  0AD1               	incf	CheckKeyOldValue@78,f
  4486  031A  0251               	subwf	CheckKeyOldValue@78,w
  4487  031B  1803               	btfsc	3,0
  4488  031C  0008               	return
  4489  031D  2AC3               	goto	l3217
  4490  031E                     __end_of_CheckKeyOldValue:	
  4491  031E                     __ptext25:	
  4492 ;; *************** function _KeyStopClear *****************
  4493 ;; Defined at:
  4494 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  53              1    3[COMMON] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/100
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4508 ;;      Params:         0       0       0       0
  4509 ;;      Locals:         1       0       0       0
  4510 ;;      Temps:          0       0       0       0
  4511 ;;      Totals:         1       0       0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    2
  4515 ;; This function calls:
  4516 ;;		_KeyClearOne
  4517 ;; This function is called by:
  4518 ;;		_CheckTouchKey
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _KeyStopClear
  4524  031E                     _KeyStopClear:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _KeyStopClear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4528  031E  1283               	bcf	3,5	;RP0=0, select bank0
  4529  031F  1303               	bcf	3,6	;RP1=0, select bank0
  4530  0320  01B6               	clrf	_KeyFlag	;volatile
  4531  0321  01B7               	clrf	_KeyFlag+1	;volatile
  4532  0322  01F3               	clrf	KeyStopClear@53
  4533  0323                     l3129:	
  4534  0323  1003               	clrc
  4535  0324  0D73               	rlf	KeyStopClear@53,w
  4536  0325  3E28               	addlw	(low (_KeyResSum| 0))& (0+255)
  4537  0326  0084               	movwf	4
  4538  0327  1383               	bcf	3,7	;select IRP bank0
  4539  0328  0180               	clrf	0
  4540  0329  0A84               	incf	4,f
  4541  032A  0180               	clrf	0
  4542  032B  0873               	movf	KeyStopClear@53,w
  4543  032C  2297  118A         	fcall	_KeyClearOne
  4544  032E  3002               	movlw	2
  4545  032F  0AF3               	incf	KeyStopClear@53,f
  4546  0330  0273               	subwf	KeyStopClear@53,w
  4547  0331  1803               	btfsc	3,0
  4548  0332  0008               	return
  4549  0333  2B23               	goto	l3129
  4550  0334                     __end_of_KeyStopClear:	
  4551  0334                     __ptext23:	
  4552 ;; *************** function _TurnKeyFlags *****************
  4553 ;; Defined at:
  4554 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/100
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4568 ;;      Params:         0       0       0       0
  4569 ;;      Locals:         0       0       0       0
  4570 ;;      Temps:          0       0       0       0
  4571 ;;      Totals:         0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    4
  4575 ;; This function calls:
  4576 ;;		_KeyClearIn
  4577 ;; This function is called by:
  4578 ;;		_CheckTouchKey
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _TurnKeyFlags
  4584  0334                     _TurnKeyFlags:	
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _TurnKeyFlags: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4588  0334  087A               	movf	_KeyData+1,w	;volatile
  4589  0335  0479               	iorwf	_KeyData,w	;volatile
  4590  0336  1903               	btfsc	3,2
  4591  0337  2B58               	goto	l3277
  4592  0338  1283               	bcf	3,5	;RP0=0, select bank0
  4593  0339  1303               	bcf	3,6	;RP1=0, select bank0
  4594  033A  01B8               	clrf	TurnKeyFlags@F84
  4595  033B  0879               	movf	_KeyData,w	;volatile
  4596  033C  062C               	xorwf	_KeyOldData,w	;volatile
  4597  033D  1D03               	skipz
  4598  033E  2B51               	goto	l1247
  4599  033F  087A               	movf	_KeyData+1,w	;volatile
  4600  0340  062D               	xorwf	_KeyOldData+1,w	;volatile
  4601  0341  1D03               	skipz
  4602  0342  2B51               	goto	l1247
  4603  0343  3002               	movlw	2
  4604  0344  0AB9               	incf	TurnKeyFlags@F83,f
  4605  0345  0239               	subwf	TurnKeyFlags@F83,w
  4606  0346  1C03               	skipc
  4607  0347  0008               	return
  4608  0348  01B9               	clrf	TurnKeyFlags@F83
  4609  0349  0879               	movf	_KeyData,w	;volatile
  4610  034A  00B6               	movwf	_KeyFlag	;volatile
  4611  034B  087A               	movf	_KeyData+1,w	;volatile
  4612  034C  00B7               	movwf	_KeyFlag+1	;volatile
  4613  034D  1978               	btfsc	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4614  034E  0008               	return
  4615  034F  1578               	bsf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4616  0350  2B7D               	ljmp	l2799
  4617  0351                     l1247:	
  4618  0351  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4619  0352  0879               	movf	_KeyData,w	;volatile
  4620  0353  00AC               	movwf	_KeyOldData	;volatile
  4621  0354  087A               	movf	_KeyData+1,w	;volatile
  4622  0355  00AD               	movwf	_KeyOldData+1	;volatile
  4623  0356  01B9               	clrf	TurnKeyFlags@F83
  4624  0357  0008               	return
  4625  0358                     l3277:	
  4626  0358  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0359  1303               	bcf	3,6	;RP1=0, select bank0
  4628  035A  01B9               	clrf	TurnKeyFlags@F83
  4629  035B  01AC               	clrf	_KeyOldData	;volatile
  4630  035C  01AD               	clrf	_KeyOldData+1	;volatile
  4631  035D  3002               	movlw	2
  4632  035E  0AB8               	incf	TurnKeyFlags@F84,f
  4633  035F  0238               	subwf	TurnKeyFlags@F84,w
  4634  0360  1C03               	skipc
  4635  0361  0008               	return
  4636  0362  01B8               	clrf	TurnKeyFlags@F84
  4637  0363  01B6               	clrf	_KeyFlag	;volatile
  4638  0364  01B7               	clrf	_KeyFlag+1	;volatile
  4639  0365  1178               	bcf	_b_kclr/(0+8),_b_kclr& (0+7)	;volatile
  4640  0366  0008               	return
  4641  0367                     __end_of_TurnKeyFlags:	
  4642  0367                     __ptext28:	
  4643 ;; *************** function _CheckValidTime *****************
  4644 ;; Defined at:
  4645 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4659 ;;      Params:         0       0       0       0
  4660 ;;      Locals:         0       0       0       0
  4661 ;;      Temps:          0       0       0       0
  4662 ;;      Totals:         0       0       0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_CheckTouchKey
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           
  4674                           ;psect for function _CheckValidTime
  4675  0367                     _CheckValidTime:	
  4676  0367                     l3287:	
  4677                           ;incstack = 0
  4678                           ; Regs used in _CheckValidTime: [wreg+status,2+status,0]
  4679                           
  4680  0367  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0368  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0369  0837               	movf	_KeyFlag+1,w	;volatile
  4683  036A  0436               	iorwf	_KeyFlag,w	;volatile
  4684  036B  1903               	btfsc	3,2
  4685  036C  2B79               	goto	l3293
  4686  036D  1683               	bsf	3,5	;RP0=1, select bank1
  4687  036E  0AA8               	incf	CheckValidTime@F87^(0+128),f
  4688  036F  1903               	skipnz
  4689  0370  0AA9               	incf	(CheckValidTime@F87+1)^(0+128),f
  4690  0371  303A               	movlw	58
  4691  0372  0229               	subwf	(CheckValidTime@F87+1)^(0+128),w
  4692  0373  3098               	movlw	152
  4693  0374  1903               	skipnz
  4694  0375  0228               	subwf	CheckValidTime@F87^(0+128),w
  4695  0376  1C03               	skipc
  4696  0377  0008               	return
  4697  0378  14F8               	bsf	_b_kerr/(0+8),_b_kerr& (0+7)	;volatile
  4698  0379                     l3293:	
  4699  0379  1683               	bsf	3,5	;RP0=1, select bank1
  4700  037A  01A8               	clrf	CheckValidTime@F87^(0+128)
  4701  037B  01A9               	clrf	(CheckValidTime@F87+1)^(0+128)
  4702  037C  0008               	return
  4703  037D                     __end_of_CheckValidTime:	
  4704  037D                     __ptext24:	
  4705 ;; *************** function _KeyClearIn *****************
  4706 ;; Defined at:
  4707 ;;		line 1 in file "D:\TOOL_PUBLISH\SCMCU\SCMCU_IDE_V2\SCTouch_lib\Sleep\XC8\81A1\CheckTouchKey.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  51              1    4[COMMON] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 300/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4721 ;;      Params:         0       0       0       0
  4722 ;;      Locals:         1       0       0       0
  4723 ;;      Temps:          0       0       0       0
  4724 ;;      Totals:         1       0       0       0
  4725 ;;Total ram usage:        1 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    3
  4728 ;; This function calls:
  4729 ;;		_KeyClearOne
  4730 ;;		_KeyIsIn
  4731 ;; This function is called by:
  4732 ;;		_TurnKeyFlags
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           
  4737                           ;psect for function _KeyClearIn
  4738  037D                     _KeyClearIn:	
  4739  037D                     l2799:	
  4740                           ;incstack = 0
  4741                           ; Regs used in _KeyClearIn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4742                           
  4743  037D  01F4               	clrf	KeyClearIn@51
  4744  037E                     l2805:	
  4745  037E  0874               	movf	KeyClearIn@51,w
  4746  037F  2283  118A         	fcall	_KeyIsIn
  4747  0381  3A00               	xorlw	0
  4748  0382  1D03               	skipz
  4749  0383  2B87               	goto	l2809
  4750  0384  0874               	movf	KeyClearIn@51,w
  4751  0385  2297  118A         	fcall	_KeyClearOne
  4752  0387                     l2809:	
  4753  0387  3002               	movlw	2
  4754  0388  0AF4               	incf	KeyClearIn@51,f
  4755  0389  0274               	subwf	KeyClearIn@51,w
  4756  038A  1803               	btfsc	3,0
  4757  038B  0008               	return
  4758  038C  2B7E               	goto	l2805
  4759  038D                     __end_of_KeyClearIn:	
  4760  038D                     __ptext19:	
  4761 ;; *************** function _Refurbish_Sfr *****************
  4762 ;; Defined at:
  4763 ;;		line 86 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 200/100
  4774 ;;		On exit  : 300/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4777 ;;      Params:         0       0       0       0
  4778 ;;      Locals:         0       0       0       0
  4779 ;;      Temps:          0       0       0       0
  4780 ;;      Totals:         0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    1
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_WorkSleep
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _Refurbish_Sfr
  4794  038D                     _Refurbish_Sfr:	
  4795                           
  4796                           ;main.c: 89: PIE1 = 2;
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _Refurbish_Sfr: [wreg+status,2+status,0]
  4800  038D  3002               	movlw	2
  4801  038E  1283               	bcf	3,5	;RP0=0, select bank0
  4802  038F  008E               	movwf	14	;volatile
  4803                           
  4804                           ;main.c: 90: PR2 = 250;
  4805  0390  30FA               	movlw	250
  4806  0391  0091               	movwf	17	;volatile
  4807                           
  4808                           ;main.c: 91: INTCON = 0XC0;
  4809  0392  30C0               	movlw	192
  4810  0393  008B               	movwf	11	;volatile
  4811                           
  4812                           ;main.c: 92: if (4 != T2CON)
  4813  0394  3004               	movlw	4
  4814  0395  0613               	xorwf	19,w	;volatile
  4815  0396  1903               	btfsc	3,2
  4816  0397  0008               	return
  4817                           
  4818                           ;main.c: 93: T2CON = 4;
  4819  0398  3004               	movlw	4
  4820  0399  0093               	movwf	19	;volatile
  4821  039A  0008               	return
  4822  039B                     __end_of_Refurbish_Sfr:	
  4823  039B                     PL2:	
  4824  039B  0800               	movf	0,w
  4825  039C  00CF               	movwf	CheckKeyOldValue@80
  4826  039D  0A84               	incf	4,f
  4827  039E  0800               	movf	0,w
  4828  039F  00D0               	movwf	CheckKeyOldValue@80+1
  4829  03A0  084D               	movf	CheckKeyOldValue@79,w
  4830  03A1  02CF               	subwf	CheckKeyOldValue@80,f
  4831  03A2  084E               	movf	CheckKeyOldValue@79+1,w
  4832  03A3  1C03               	skipc
  4833  03A4  03D0               	decf	CheckKeyOldValue@80+1,f
  4834  03A5  02D0               	subwf	CheckKeyOldValue@80+1,f
  4835  03A6  3000               	movlw	0
  4836  03A7  0250               	subwf	CheckKeyOldValue@80+1,w
  4837  03A8  3402               	retlw	2
  4838  03A9                     __end_ofPL2:	
  4839  03A9                     PL4:	
  4840  03A9  00CD               	movwf	??_CheckOnceResult
  4841  03AA  0A84               	incf	4,f
  4842  03AB  0800               	movf	0,w
  4843  03AC  00CE               	movwf	??_CheckOnceResult+1
  4844  03AD  0856               	movf	CheckOnceResult@69,w
  4845  03AE  074D               	addwf	??_CheckOnceResult,w
  4846  03AF  00CF               	movwf	??_CheckOnceResult+2
  4847  03B0  084E               	movf	??_CheckOnceResult+1,w
  4848  03B1  1803               	skipnc
  4849  03B2  0A4E               	incf	??_CheckOnceResult+1,w
  4850  03B3  00D0               	movwf	??_CheckOnceResult+3
  4851  03B4  0858               	movf	CheckOnceResult@71+1,w
  4852  03B5  0250               	subwf	??_CheckOnceResult+3,w
  4853  03B6  1D03               	skipz
  4854  03B7  0008               	return
  4855  03B8  0857               	movf	CheckOnceResult@71,w
  4856  03B9  024F               	subwf	??_CheckOnceResult+2,w
  4857  03BA  0008               	return
  4858  03BB                     __end_ofPL4:	
  4859  03BB                     PL8:	
  4860  03BB  0084               	movwf	4
  4861  03BC  0800               	movf	0,w
  4862  03BD  00CD               	movwf	??_CheckOnceResult
  4863  03BE  0A84               	incf	4,f
  4864  03BF  0800               	movf	0,w
  4865  03C0  00CE               	movwf	??_CheckOnceResult+1
  4866  03C1  0008               	return
  4867  03C2                     __end_ofPL8:	
  4868  03C2                     PL12:	
  4869  03C2  0084               	movwf	4
  4870  03C3  084D               	movf	??_SystemEnterSleep,w
  4871  03C4  0080               	movwf	0
  4872  03C5  0A84               	incf	4,f
  4873  03C6  084E               	movf	??_SystemEnterSleep+1,w
  4874  03C7  0080               	movwf	0
  4875  03C8  1003               	clrc
  4876  03C9  0D55               	rlf	SystemEnterSleep@91,w
  4877  03CA  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4878  03CB  0084               	movwf	4
  4879  03CC  0008               	return
  4880  03CD                     __end_ofPL12:	
  4881  03CD                     PL14:	
  4882  03CD  0084               	movwf	4
  4883  03CE  0874               	movf	??_CheckKeyOldValue,w
  4884  03CF  0080               	movwf	0
  4885  03D0  0A84               	incf	4,f
  4886  03D1  0875               	movf	??_CheckKeyOldValue+1,w
  4887  03D2  0080               	movwf	0
  4888  03D3  1003               	clrc
  4889  03D4  0D51               	rlf	CheckKeyOldValue@78,w
  4890  03D5  3EA4               	addlw	(low (_KeyOldValue0| 0))& (0+255)
  4891  03D6  0084               	movwf	4
  4892  03D7  0008               	return
  4893  03D8                     __end_ofPL14:	
  4894  03D8                     PL16:	
  4895  03D8  0084               	movwf	4
  4896  03D9  0800               	movf	0,w
  4897  03DA  00CD               	movwf	??_SystemEnterSleep
  4898  03DB  0A84               	incf	4,f
  4899  03DC  0800               	movf	0,w
  4900  03DD  00CE               	movwf	??_SystemEnterSleep+1
  4901  03DE  0008               	return
  4902  03DF                     __end_ofPL16:	
  4903  03DF                     PL20:	
  4904  03DF  0800               	movf	0,w
  4905  03E0  00F4               	movwf	??_CheckKeyOldValue
  4906  03E1  0A84               	incf	4,f
  4907  03E2  0800               	movf	0,w
  4908  03E3  00F5               	movwf	??_CheckKeyOldValue+1
  4909  03E4  1003               	clrc
  4910  03E5  0D51               	rlf	CheckKeyOldValue@78,w
  4911  03E6  0008               	return
  4912  03E7                     __end_ofPL20:	
  4913  03E7                     PL22:	
  4914  03E7  0180               	clrf	0
  4915  03E8  0A84               	incf	4,f
  4916  03E9  0180               	clrf	0
  4917  03EA  1003               	clrc
  4918  03EB  0D72               	rlf	KeyClearOne@49,w
  4919  03EC  0008               	return
  4920  03ED                     __end_ofPL22:	
  4921  03ED                     PL24:	
  4922  03ED  3041               	movlw	65
  4923  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  4924  03EF  0095               	movwf	21	;volatile
  4925  03F0  1415               	bsf	21,0	;volatile
  4926  03F1  0196               	clrf	22	;volatile
  4927  03F2  0008               	return
  4928  03F3                     __end_ofPL24:	
  4929  03F3                     PL28:	
  4930  03F3  084D               	movf	CheckKeyOldValue@79,w
  4931  03F4  0080               	movwf	0
  4932  03F5  0A84               	incf	4,f
  4933  03F6  084E               	movf	CheckKeyOldValue@79+1,w
  4934  03F7  0080               	movwf	0
  4935  03F8  0008               	return
  4936  03F9                     __end_ofPL28:	
  4937  03F9                     PL30:	
  4938  03F9  01D5               	clrf	SystemEnterSleep@91
  4939  03FA  01D3               	clrf	SystemEnterSleep@92
  4940  03FB  0AD3               	incf	SystemEnterSleep@92,f
  4941  03FC  01D4               	clrf	SystemEnterSleep@92+1
  4942  03FD  0008               	return
  4943  03FE                     __end_ofPL30:	
  4944  03FE                     PL32:	
  4945  03FE  0DD3               	rlf	SystemEnterSleep@92,f
  4946  03FF  0DD4               	rlf	SystemEnterSleep@92+1,f
  4947  0400  0AD5               	incf	SystemEnterSleep@91,f
  4948  0401  0255               	subwf	SystemEnterSleep@91,w
  4949  0402  0008               	return
  4950  0403                     __end_ofPL32:	
  4951                           
  4952                           	psect	text34
  4953  07E4                     __ptext34:	
  4954 ;; *************** function _Isr_Timer *****************
  4955 ;; Defined at:
  4956 ;;		line 165 in file "C:\mcuproject\scm\zdt\C16_8F083_SOP16_\C16_SC8F083_SOP16\main.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 300/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4970 ;;      Params:         0       0       0       0
  4971 ;;      Locals:         0       0       0       0
  4972 ;;      Temps:          2       0       0       0
  4973 ;;      Totals:         2       0       0       0
  4974 ;;Total ram usage:        2 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		Interrupt level 1
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function _Isr_Timer
  4985  07E4                     _Isr_Timer:	
  4986                           
  4987                           ;main.c: 167: if(TMR2IF)
  4988  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  4989  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  4990  07E6  1C8D               	btfss	13,1	;volatile
  4991  07E7  2FF7               	goto	i1l3619
  4992                           
  4993                           ;main.c: 168: {
  4994                           ;main.c: 169: TMR2IF = 0;
  4995  07E8  108D               	bcf	13,1	;volatile
  4996                           
  4997                           ;main.c: 170: if(++MainTime >= 32)
  4998  07E9  3020               	movlw	32
  4999  07EA  0ACA               	incf	_MainTime,f	;volatile
  5000  07EB  024A               	subwf	_MainTime,w	;volatile
  5001  07EC  1C03               	skipc
  5002  07ED  2FF8               	goto	i1l954
  5003                           
  5004                           ;main.c: 171: {
  5005                           ;main.c: 172: MainTime = 0;
  5006  07EE  01CA               	clrf	_MainTime	;volatile
  5007                           
  5008                           ;main.c: 173: B_MainLoop = 1;
  5009  07EF  1778               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  5010                           
  5011                           ;main.c: 174: if(++count1s >= 250)
  5012  07F0  30FA               	movlw	250
  5013  07F1  0AC9               	incf	_count1s,f
  5014  07F2  0249               	subwf	_count1s,w
  5015  07F3  1C03               	skipc
  5016  07F4  2FF8               	goto	i1l954
  5017                           
  5018                           ;main.c: 175: {
  5019                           ;main.c: 176: count1s = 0;
  5020  07F5  01C9               	clrf	_count1s
  5021  07F6  2FF8               	goto	i1l954
  5022  07F7                     i1l3619:	
  5023                           
  5024                           ;main.c: 180: else
  5025                           ;main.c: 181: {
  5026                           ;main.c: 182: PIR1 = 0;
  5027  07F7  018D               	clrf	13	;volatile
  5028  07F8                     i1l954:	
  5029  07F8  0871               	movf	??_Isr_Timer+1,w
  5030  07F9  008A               	movwf	10
  5031  07FA  0E70               	swapf	??_Isr_Timer^(0+-128),w
  5032  07FB  0083               	movwf	3
  5033  07FC  0EFE               	swapf	126,f
  5034  07FD  0E7E               	swapf	126,w
  5035  07FE  0009               	retfie
  5036  07FF                     __end_of_Isr_Timer:	
  5037  007E                     btemp	set	126	;btemp
  5038  007E                     wtemp0	set	126
  5039                           
  5040                           	psect	intentry
  5041  0004                     __pintentry:	
  5042                           ;incstack = 0
  5043                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  5044                           
  5045  0004                     interrupt_function:	
  5046  007E                     saved_w	set	btemp
  5047  0004  00FE               	movwf	btemp
  5048  0005  0E03               	swapf	3,w
  5049  0006  00F0               	movwf	??_Isr_Timer
  5050  0007  080A               	movf	10,w
  5051  0008  00F1               	movwf	??_Isr_Timer+1
  5052  0009  118A  2FE4         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         66
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     34      79
    BANK1            80      4      24
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->_ADC_Sample
    _wuhuaCtr->_ADC_Sample
    _keyLedCtr->___lwmod
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _SystemEnterSleep->_GetTouchKeyValue
    _CheckTouchKey->_GetTouchKeyValue
    _TurnKeyFlags->_KeyClearIn
    _KeyClearIn->_KeyIsIn
    _KeyStopClear->_KeyClearOne
    _GetTouchKeyValue->_ClearResSum
    _CheckOnceResult->_KeyHave
    _CheckKeyOldValue->_KeyIsIn

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___fttol
    _wuhuaCtr->_ADC_Sample
    _fanCtr->_ADC_Sample
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft
    _WorkSleep->_SystemEnterSleep
    _CheckTouchKey->_CheckOnceResult

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_workCtr

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13378
                      _CheckTouchKey
                        _Init_System
                          _KeyServer
                      _Refurbish_Sfr
                          _WorkSleep
                            _chrgCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              4     4      0    9375
                                              0 BANK1      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             _fanCtr
                          _keyLedCtr
                           _wuhuaCtr
 ---------------------------------------------------------------------------------
 (2) _wuhuaCtr                                             4     4      0    1410
                                             13 BANK0      4     4      0
                         _ADC_Sample
                             ___lmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (3) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _keyLedCtr                                            0     0      0     492
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     492
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _fanCtr                                               5     5      0    1478
                                             13 BANK0      5     5      0
                         _ADC_Sample
                             ___lmul
                            _fanInit
                            _fanStop
 ---------------------------------------------------------------------------------
 (3) _fanStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _fanInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              2 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _ADC_Sample                                          18    17      1     977
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     436
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WorkSleep                                            0     0      0     837
                      _Refurbish_Sfr
                   _SystemEnterSleep
 ---------------------------------------------------------------------------------
 (2) _SystemEnterSleep                                     9     9      0     837
                                              0 BANK0      9     9      0
                        _ClearResSum
                   _GetTouchKeyValue
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (2) _Refurbish_Sfr                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _KeyServer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckTouchKey                                        0     0      0    3166
                   _CheckKeyOldValue
                    _CheckOnceResult
                     _CheckValidTime
                        _ClearResSum
                   _GetTouchKeyValue
                       _KeyStopClear
                       _TurnKeyFlags
 ---------------------------------------------------------------------------------
 (2) _TurnKeyFlags                                         0     0      0     247
                         _KeyClearIn
 ---------------------------------------------------------------------------------
 (3) _KeyClearIn                                           1     1      0     247
                                              4 COMMON     1     1      0
                        _KeyClearOne
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (2) _KeyStopClear                                         1     1      0     178
                                              3 COMMON     1     1      0
                        _KeyClearOne
 ---------------------------------------------------------------------------------
 (3) _GetTouchKeyValue                                     5     5      0     181
                                              3 COMMON     5     5      0
                        _ClearResSum
 ---------------------------------------------------------------------------------
 (4) _ClearResSum                                          1     1      0      45
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckValidTime                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CheckOnceResult                                     13    13      0    1932
                                              0 BANK0     13    13      0
                        _KeyClearOne
                            _KeyHave
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (3) _KeyHave                                              3     1      2     344
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _KeyClearOne                                          1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CheckKeyOldValue                                     7     7      0     583
                                              4 COMMON     2     2      0
                                              0 BANK0      5     5      0
                            _KeyIsIn
 ---------------------------------------------------------------------------------
 (5) _KeyIsIn                                              2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckTouchKey
     _CheckKeyOldValue
       _KeyIsIn
     _CheckOnceResult
       _KeyClearOne
       _KeyHave
       _KeyIsIn
     _CheckValidTime
     _ClearResSum
     _GetTouchKeyValue
       _ClearResSum
     _KeyStopClear
       _KeyClearOne
     _TurnKeyFlags
       _KeyClearIn
         _KeyClearOne
         _KeyIsIn
   _Init_System
   _KeyServer
   _Refurbish_Sfr
   _WorkSleep
     _Refurbish_Sfr
     _SystemEnterSleep
       _ClearResSum
       _GetTouchKeyValue
         _ClearResSum
       _KeyClearOne
   _chrgCtr
   _workCtr
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _fanCtr
       _ADC_Sample
       ___lmul
       _fanInit
       _fanStop
     _keyLedCtr
       ___lwmod
     _wuhuaCtr
       _ADC_Sample
       ___lmul
       _pwmInit
       _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     22      4F       4       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               50      4      18       6       30.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      73       8        0.0%
DATA                 0      0      73       9        0.0%
BITBANK2            50      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 18 16:37:33 2025

                        pc 0002                         PL2 039B                         PL4 03A9  
                       PL6 07AA                         PL8 03BB              ??_KeyClearOne 0072  
    __size_of_TurnKeyFlags 0033                         fsr 0004           ??_CheckValidTime 0072  
                      PL10 07B9                        PL20 03DF                        PL12 03C2  
                      PL30 03F9                        PL22 03E7                        PL14 03CD  
                      PL40 07E0                        PL32 03FE                        PL24 03ED  
                      PL16 03D8                        PL34 07D6                        PL26 07CF  
                      PL18 07C6                        PL36 0FFB                        PL28 03F3  
                      PL38 07DB                        l974 06BB                        l968 067F  
                      l986 0F6D                        l978 0701                        l988 0F6A  
                      l996 073D                        _RA1 0431                        _RB6 0036  
                      _PR2 0011        __size_of_ADC_Sample 00D0                        fsr0 0004  
                      indf 0000          ?_GetTouchKeyValue 0070   __end_of_Table_KeyChannel 0814  
       ??_GetTouchKeyValue 0073               ___ftdiv@cntr 005C               ___ftdiv@sign 0061  
                     l1002 075D                       l1308 04A3                       l1229 0307  
                     l1247 0351                       l4001 0443                       l1266 0084  
                     l1507 055F                       l1188 016B                       l1453 0616  
                     l1278 00A3                       l4007 01A8                       l3217 02C3  
                     l4025 01FF                       l3129 0323                       l1465 063A  
                     l4115 05AE                       l4045 0235                       l4133 05D1  
                     l4117 05B3                       l4205 050C                       l4063 026D  
                     l4039 022D                       l4071 027B                       l3431 0FCB  
                     l4143 05DD                       l4215 0520                       l4161 0044  
                     l4145 05E7                       l4137 05D9                       l4225 0533  
                     l4217 0521                       l4067 0271                       l4059 0261  
                     l3451 0FE9                       l3435 0FD2                       l3427 0FC6  
                     l3523 0F70                       l4235 053E                       l4227 0534  
                     l4307 0FAC                       l4069 0275                       l3293 0379  
                     l2805 037E                       l3277 0358                       l3437 0FD4  
                     l3461 0FF9                       l3517 0F62                       l4077 0551  
                     l4149 05F5                       l3701 06A4                       l3287 0367  
                     l4263 0098                       l4255 0093                       l4271 00A2  
                     l3447 0FE4                       l3519 0F63                       l2673 0291  
                     l2825 02B7                       l2841 013D                       l2809 0387  
                     l4265 009C                       l3457 0FF3                       l3705 06AF  
                     l3459 0FF5                       l4099 0572                       l3707 06B7  
                     l2837 0137                       l4189 0073                       l3717 0705  
                     l3805 0770                       l3813 0783                       l2687 0193  
                     l3911 073A                       l4279 0F7F                       l2689 0194  
                     l3745 0794                       l3921 075A                       l2867 0179  
                     l3683 0669                       l3667 065D                       l3923 0760  
                     l3915 073F                       l3739 07A5                       l2869 0189  
                     l3853 00D0                       l3781 0622                       l3693 0689  
                     l3677 0668                       l3669 065F                       l3765 04B9  
                     l3909 0737                       l2799 037D                       l3783 062A  
                     l3865 00D7                       l3777 061A                       l3937 044F  
                     l3883 010B                       l3787 0638                       l3779 061D  
                     l3963 0495                       l3789 062F                       l3957 048D  
                     l3949 0478                       l3981 040C                       l3879 0104  
                     l3967 0499                       l3959 048F                       l3975 0403  
                     l3969 049A                       l3899 012C                       l3987 0417  
                     _ADON 04A8                       _CHS4 04B6                       u3305 06F6  
                     u3325 070E                       u3255 06AA                       _PIE1 000E  
                     _PIE2 0110                       u3265 06B5                       u3535 0100  
                     u3465 0776                       _RAIF 006B                       u3805 01B5  
                     u4277 0659                       _INTF 0059                       _RBIE 005B  
                     _RBIF 0058                       u3825 01F0                       u3835 0205  
                     u3675 0469                       u3845 0211                       _PIR1 000D  
                     _PIR2 010F                       u3875 024D                       u3955 0580  
                     u3795 0433                       u3985 05B6                       _TMR0 0081  
                     _WPUB 0008                       _main 0F78               ___ftpack@arg 0072  
             ___ftpack@exp 0075                       _time 00AA                       btemp 007E  
            ?_KeyStopClear 0070                       start 000B               _TurnKeyFlags 0334  
          __end_of_KeyIsIn 0297            __end_of_KeyHave 02BA               ___fttol@exp1 006E  
            ??_Init_System 0072               ___fttol@lval 006A            TurnKeyFlags@F83 0039  
          TurnKeyFlags@F84 0038                      ?_main 0070            __end_of___ftdiv 05A5  
          __end_of___fttol 05FE                      _IOCB0 0048                      _T2CON 0013  
 __end_of_SystemEnterSleep 0133            __end_of___lwmod 0788                      i1l954 07F8  
                    _PORTA 0086                      _PORTB 0006                      _PORTC 0106  
          __end_of_fanInit 07A0                      _TRISA 0085                      _TRISB 0005  
                    _PWMTH 0018                      _TRISC 0105                      _PWMTL 0017  
          __end_of_fanStop 07A5            __end_of_chrgCtr 0F78        ___lmul@multiplicand 0051  
      __end_of_KeyClearOne 02AC                 _KeyClearIn 037D             fanCtr@fan_temp 005B  
            ___ftpack@sign 0076             __pbitbssCOMMON 03C0                      pclath 000A  
          __end_of_pwmInit 0794                _ClearResSum 0193                 _KeyCounter 003C  
               _KeyOldData 002C            __end_of_pwmStop 07AA             ??_KeyStopClear 0073  
                    status 0003                      wtemp0 007E            __end_of_workCtr 0543  
               _KeyUpShake 0034            __initialization 000D               __end_of_main 0FB0  
                   ??_main 0078              ___fttol@sign1 0069        __end_of_Init_System 003F  
                   _ADCON0 0095                     _ADCON1 0096                     _ADRESH 0099  
                   _ADRESL 0098           __end_of___ftpack 064C                     _GODONE 04A9  
                   i1l3619 07F7                     _LDO_EN 04B2                     _INTCON 000B  
         __end_of___lwtoft 060E         __size_of_KeyServer 004B                     _OSCCON 0014  
                   _TMR2IF 0069                     _PWMD0L 0019                     _PWMD1L 001A  
             ??_ADC_Sample 0073                     _TRISB0 0028                     _TRISB6 002E  
                ??_KeyIsIn 0072                  ??_KeyHave 0074              ClearResSum@56 0072  
       __size_of_Isr_Timer 001B  __size_of_CheckKeyOldValue 0064                     ___lmul 049F  
                   _b_kclr 03C2                     _b_kerr 03C1                     _fanCtr 0444  
                ??___ftdiv 0059                  ??___fttol 0066                  ??___lwmod 0076  
                ??_fanInit 0072                  ??_fanStop 0072                _KeyClearOne 0297  
                ??_chrgCtr 0072                     _result 00AC              _Table_KeyFalg 0806  
            _Table_KeyDown 080E         __end_of_ADC_Sample 071C                     saved_w 007E  
   __size_of_CheckTouchKey 002D                  ??_pwmInit 0072                  ??_pwmStop 0072  
              ?_KeyClearIn 0070                  ??_workCtr 0077            _CheckOnceResult 01A2  
         __end_of_wuhuaCtr 0444    __end_of__initialization 001D         __size_of_WorkSleep 0037  
        CheckOnceResult@70 0053          CheckOnceResult@71 0057          CheckOnceResult@72 0054  
        CheckOnceResult@73 0051          CheckOnceResult@68 0059          CheckOnceResult@69 0056  
               ___ftdiv@f1 0056                 ___ftdiv@f2 0053                 ___ftdiv@f3 005D  
               ___fttol@f1 0062             __pcstackCOMMON 0070                _Init_System 0020  
               __end_ofPL2 03A9                 __end_ofPL4 03BB                 __end_ofPL6 07B9  
               __end_ofPL8 03C2          __end_of_KeyServer 0FFB                 ___lwtoft@c 0050  
     __end_of_KeyStopClear 0334          __end_of_Isr_Timer 07FF         __size_of_keyLedCtr 0048  
               __pbssBANK0 0020                 __pbssBANK1 00A0               _chrgFullFlag 0043  
__size_of_GetTouchKeyValue 0060               _chrgFullTime 0042         wuhuaCtr@wuhua_temp 005A  
            _CheckTouchKey 0076                 __pmaintext 0F78                    ?___lmul 004D  
                  ?_fanCtr 0070                 __pintentry 0004        __size_of_KeyClearIn 0010  
           ___lmul@product 0072                  ?___ftpack 0072          __end_of_WorkSleep 0076  
                ?___lwtoft 0050          ?_SystemEnterSleep 0070    __end_of_CheckOnceResult 0283  
                  _KEYCON0 0111                    _KEYCON1 0112                    _KEYCON2 0113  
       ??_SystemEnterSleep 004D                    _B_OnOff 03C5                    _PWMD01H 001E  
   __size_of_Refurbish_Sfr 000E                    _PWMCON0 0015                    _PWMCON1 0016  
                  _PWMCON2 001D       __end_of_Table_KeyCap 0812                 __stringtab 0800  
             ?_ClearResSum 0070                    _KeyData 0079                    _KeyFlag 0036  
                  _KeyIsIn 0283                    _KeyHave 02AC             ?_CheckTouchKey 0070  
          ADC_Sample@adldo 0072            ADC_Sample@admax 0056            ADC_Sample@admin 0054  
          ADC_Sample@adsum 0050           _CheckKeyOldValue 02BA            __size_of___lmul 0033  
                  ___ftdiv 0543            __size_of_fanCtr 005B                    ___fttol 05A5  
                  ___lwmod 0764          __end_of_keyLedCtr 0764                    _b_kover 03C4  
                  _fanInit 0794                    _fanDuty 0047                    _fanStop 07A0  
               ??___ftpack 004D                    _chrgCtr 0F4D                    __ptext1 04D2  
                  __ptext2 0403                    __ptext3 07A5                    __ptext4 0788  
                  __ptext5 071C                    __ptext6 0764                    __ptext7 0444  
                  __ptext8 07A0                    __ptext9 0794                 _lowBatLock 0041  
               _lowBatTime 0040                  ?_wuhuaCtr 0070                 ??___lwtoft 0077  
                  _count1s 0049                 _lowFanTime 003F                    _pwmInit 0788  
                  _pwmStop 07A5    __size_of_CheckValidTime 0016                    clrloop0 0F46  
                  _workCtr 04D2       end_of_initialization 001D              _Refurbish_Sfr 038D  
             _KeyOldValue0 00A4               _KeyOldValue1 0024               _KeyOldValue2 0020  
    __size_of_KeyStopClear 0016         SystemEnterSleep@91 0055         SystemEnterSleep@92 0053  
       SystemEnterSleep@93 0051         SystemEnterSleep@94 004F               ?_KeyClearOne 0070  
             _KeyReference 00A0                 ??_wuhuaCtr 0077          CheckValidTime@F87 00A8  
         ?_CheckOnceResult 0070                  KeyIsIn@45 0073                  KeyIsIn@46 0072  
                KeyHave@58 0074                  KeyHave@59 0072               ??_KeyClearIn 0074  
              ___ftdiv@exp 0060            ??_CheckTouchKey 0078               _KeyStopClear 031E  
         _GetTouchKeyValue 0133             ?_Refurbish_Sfr 0070               ?_Init_System 0070  
           __end_of___lmul 04D2             __end_of_fanCtr 049F         __end_of_KeyClearIn 038D  
               _wuhuaValue 00AE                  _KeyMaxSub 003B                  _KeyResSum 0028  
              __end_ofPL10 07C6                __end_ofPL20 03E7                __end_ofPL12 03CD  
              __end_ofPL30 03FE                __end_ofPL22 03ED                __end_ofPL14 03D8  
              __end_ofPL40 07E4                __end_ofPL32 0403                __end_ofPL24 03F3  
              __end_ofPL16 03DF                __end_ofPL34 07DB                __end_ofPL26 07D6  
              __end_ofPL18 07CF                __end_ofPL36 1000                __end_ofPL28 03F9  
              __end_ofPL38 07E0        start_initialization 000D                  _KeyServer 0FB0  
                _Isr_Timer 07E4          workCtr@power_temp 00B2       __size_of_ClearResSum 000F  
            ?_TurnKeyFlags 0070                   ??___lmul 0072                   ??_fanCtr 0077  
        ADC_Sample@ad_temp 0058               _Table_KeyCap 0810          __size_of___ftpack 003E  
              __pbssCOMMON 0079                _fanOverTime 0045                 ?_KeyServer 0070  
                ___latbits 0001          __size_of___lwtoft 0010              __pcstackBANK0 004D  
            __pcstackBANK1 00B2                  _WorkSleep 003F             _CheckValidTime 0367  
 __end_of_CheckKeyOldValue 031E                 ?_Isr_Timer 0070        KeyServer@KeyOldFlag 003D  
                 ?_KeyIsIn 0070                   ?_KeyHave 0072  __size_of_SystemEnterSleep 0090  
          ??_Refurbish_Sfr 0072             ??_TurnKeyFlags 0075                  __pnvBANK1 00B6  
                 ?___ftdiv 0053                   ?___fttol 0062                   ?___lwmod 0072  
                 ?_fanInit 0070                   ?_fanStop 0070                   ?_chrgCtr 0070  
            _shanshuoTime2 0030                  __pstrings 0800       __size_of_KeyClearOne 0015  
                _keyLedCtr 071C                  _firstLock 00B6     __end_of_CheckValidTime 037D  
                _firstTime 00B7          __size_of_wuhuaCtr 0041                 ?_WorkSleep 0070  
           ADC_Sample@adch 004E                   ?_pwmInit 0070                   ?_pwmStop 0070  
                 ?_workCtr 0070                ADC_Sample@i 004F                ADC_Sample@j 004D  
                 _KEYDATAH 0117                   _KEYDATAL 0116          interrupt_function 0004  
                clear_ram0 0F45             KeyStopClear@53 0073        CheckKeyOldValue@F77 003A  
              __stringbase 0805       __size_of_Init_System 001F      __end_of_Table_KeyFalg 080E  
    __end_of_Table_KeyDown 0810                 ?_keyLedCtr 0070   __end_of_GetTouchKeyValue 0193  
          ?_CheckValidTime 0070                ??_KeyServer 0072          ___lmul@multiplier 004D  
                _wuhuaFlag 0048                ??_Isr_Timer 0070                   _MainTime 004A  
               _ADC_Sample 064C           __size_of_KeyIsIn 0014           __size_of_KeyHave 000E  
         _Table_KeyChannel 0812           __size_of___ftdiv 0062           __size_of___fttol 0059  
         __size_of___lwmod 0024                   ___ftpack 060E           __size_of_fanInit 000C  
       __end_of__stringtab 0806           __size_of_fanStop 0005           __size_of_chrgCtr 002B  
                 ___lwtoft 05FE                   _b_kover1 03C3                   _b_ksleep 03C0  
     __end_of_TurnKeyFlags 0367                   _fanValue 00B0                   _adresult 004B  
                 _chrgFlag 0044                ??_WorkSleep 0078                   __ptext10 049F  
                 __ptext11 064C                   __ptext20 0FB0                   __ptext12 05FE  
                 __ptext21 0020                   __ptext13 05A5                   __ptext30 02AC  
                 __ptext22 0076                   __ptext14 0543                   __ptext31 0297  
                 __ptext23 0334                   __ptext15 060E                   __ptext32 02BA  
                 __ptext24 037D                   __ptext16 0F4D                   __ptext33 0283  
                 __ptext25 031E                   __ptext17 003F                   __ptext34 07E4  
                 __ptext26 0133                   __ptext18 00A3                   __ptext27 0193  
                 __ptext19 038D                   __ptext28 0367                   __ptext29 01A2  
         __size_of_pwmInit 000C           __size_of_pwmStop 0005               _shanshuoTime 0032  
                 _count10s 0046           __size_of_workCtr 0071   __size_of_CheckOnceResult 00E1  
       GetTouchKeyValue@62 0077         GetTouchKeyValue@63 0075         GetTouchKeyValue@64 0073  
            __size_of_main 0038           _SystemEnterSleep 00A3      __end_of_CheckTouchKey 00A3  
       CheckKeyOldValue@80 004F         CheckKeyOldValue@78 0051         CheckKeyOldValue@79 004D  
                 _test_adc 003E                   _power_ad 002E                   _workStep 007B  
                 _wuhuaCtr 0403                ??_keyLedCtr 0077          ?_CheckKeyOldValue 0070  
                 intlevel1 0000              ??_ClearResSum 0072         ??_CheckKeyOldValue 0074  
         ___lwmod@dividend 0074                ?_ADC_Sample 0072                  stringcode 0800  
               _B_MainLoop 03C6          fanCtr@maxFanValue 005A                 _OPTION_REG 0001  
          ___lwmod@divisor 0072            ___lwmod@counter 0076                   stringdir 0800  
                 stringtab 0800              KeyClearOne@49 0072               KeyClearIn@51 0074  
    __end_of_Refurbish_Sfr 039B        __end_of_ClearResSum 01A2          ??_CheckOnceResult 004D  
