

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 03 11:02:42 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	swtext1,local,class=CONST,delta=2
    36                           	psect	pa_nodes0,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F887 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	strings
    75  05B5                     __pstrings:	
    76  05B5                     stringtab:	
    77  05B5                     __stringtab:	
    78  05B5                     stringcode:	
    79                           ;	String table - string pointers are 1 byte each
    80                           
    81  05B5                     stringdir:	
    82  05B5  3005               	movlw	high stringdir
    83  05B6  008A               	movwf	10
    84  05B7  0804               	movf	4,w
    85  05B8  0A84               	incf	4,f
    86  05B9  0782               	addwf	2,f
    87  05BA                     __stringbase:	
    88  05BA  3400               	retlw	0
    89  05BB                     __end_of__stringtab:	
    90  05BB                     _numArray:	
    91  05BB  343F               	retlw	63
    92  05BC  3406               	retlw	6
    93  05BD  345B               	retlw	91
    94  05BE  344F               	retlw	79
    95  05BF  3466               	retlw	102
    96  05C0  346D               	retlw	109
    97  05C1  347D               	retlw	125
    98  05C2  3407               	retlw	7
    99  05C3  347F               	retlw	127
   100  05C4  346F               	retlw	111
   101  05C5  3471               	retlw	113
   102  05C6  3479               	retlw	121
   103  05C7  3450               	retlw	80
   104  05C8  3476               	retlw	118
   105  05C9                     __end_of_numArray:	
   106                           
   107                           	psect	nvBANK0
   108  0062                     __pnvBANK0:	
   109  0062                     _baiweiNum:	
   110  0062                     	ds	1
   111  0063                     _geweiNum:	
   112  0063                     	ds	1
   113  0064                     _shiweiNum:	
   114  0064                     	ds	1
   115  0065                     _firstTime:	
   116  0065                     	ds	1
   117  001D                     _PWMCON2	set	29
   118  0018                     _PWMTH	set	24
   119  0017                     _PWMTL	set	23
   120  0016                     _PWMCON1	set	22
   121  0015                     _PWMCON0	set	21
   122  0014                     _OSCCON	set	20
   123  0013                     _T2CON	set	19
   124  0011                     _PR2	set	17
   125  000E                     _PIE1	set	14
   126  000D                     _PIR1	set	13
   127  000B                     _INTCON	set	11
   128  0009                     _IOCB	set	9
   129  0008                     _WPUB	set	8
   130  0006                     _PORTB	set	6
   131  0005                     _TRISB	set	5
   132  0001                     _OPTION_REG	set	1
   133  0071                     _TMR2IE	set	113
   134  0073                     _RAIE	set	115
   135  0069                     _TMR2IF	set	105
   136  006B                     _RAIF	set	107
   137  0058                     _RBIF	set	88
   138  005B                     _RBIE	set	91
   139  005E                     _PEIE	set	94
   140  005F                     _GIE	set	95
   141  0030                     _RB0	set	48
   142  0031                     _RB1	set	49
   143  0033                     _RB3	set	51
   144  0034                     _RB4	set	52
   145  009E                     _PWMD23H	set	158
   146  009D                     _PWM23DT	set	157
   147  009B                     _PWMD2L	set	155
   148  0099                     _ADRESH	set	153
   149  0098                     _ADRESL	set	152
   150  0096                     _ADCON1	set	150
   151  0095                     _ADCON0	set	149
   152  0094                     _ANSEL1	set	148
   153  0093                     _ANSEL0	set	147
   154  0089                     _IOCA	set	137
   155  0088                     _WPUA	set	136
   156  0087                     _WPDA	set	135
   157  0086                     _PORTA	set	134
   158  0085                     _TRISA	set	133
   159  04B2                     _LDO_EN	set	1202
   160  04B6                     _CHS4	set	1206
   161  04A9                     _GODONE	set	1193
   162  0432                     _RA2	set	1074
   163  0433                     _RA3	set	1075
   164  0434                     _RA4	set	1076
   165  0435                     _RA5	set	1077
   166                           
   167                           	psect	cinit
   168  000D                     start_initialization:	
   169                           ; #config settings
   170                           
   171  000D                     __initialization:	
   172  000D  3047               	movlw	low __pbssBANK0
   173                           
   174                           ; Clear objects allocated to COMMON
   175  000E  01F8               	clrf	__pbssCOMMON& (0+127)
   176  000F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   177  0010  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   178                           
   179                           ; Clear objects allocated to BANK0
   180  0011  1383               	bcf	3,7	;select IRP bank0
   181  0012  0084               	movwf	4
   182  0013  3062               	movlw	low (__pbssBANK0+27)
   183  0014  25FA               	fcall	clear_ram0
   184  0015                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187  0015                     __end_of__initialization:	
   188  0015  0183               	clrf	3
   189  0016  2BF6               	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssCOMMON
   192  0078                     __pbssCOMMON:	
   193  0078                     _showBatStep:	
   194  0078                     	ds	1
   195  0079                     _workStep:	
   196  0079                     	ds	1
   197  007A                     _chrgFlag:	
   198  007A                     	ds	1
   199                           
   200                           	psect	bssBANK0
   201  0047                     __pbssBANK0:	
   202  0047                     _count30s:	
   203  0047                     	ds	2
   204  0049                     _count900s:	
   205  0049                     	ds	2
   206  004B                     _lowShanTime:	
   207  004B                     	ds	2
   208  004D                     _power_ad:	
   209  004D                     	ds	2
   210  004F                     _result:	
   211  004F                     	ds	2
   212  0051                     _lowBatTime:	
   213  0051                     	ds	1
   214  0052                     _curBatStep:	
   215  0052                     	ds	1
   216  0053                     _motorPwmFlag:	
   217  0053                     	ds	1
   218  0054                     _sleepTime:	
   219  0054                     	ds	1
   220  0055                     _lowBatFlag:	
   221  0055                     	ds	1
   222  0056                     _ledCntTime:	
   223  0056                     	ds	1
   224  0057                     _showBatTime:	
   225  0057                     	ds	1
   226  0058                     _longPressFlag:	
   227  0058                     	ds	1
   228  0059                     _keyCount:	
   229  0059                     	ds	1
   230  005A                     _ledCnt:	
   231  005A                     	ds	1
   232  005B                     _intCount10:	
   233  005B                     	ds	1
   234  005C                     _IntFlag:	
   235  005C                     	ds	1
   236  005D                     _count1s:	
   237  005D                     	ds	1
   238  005E                     _intCount:	
   239  005E                     	ds	1
   240  005F                     _test_adc:	
   241  005F                     	ds	1
   242  0060                     _adresult:	
   243  0060                     	ds	2
   244                           
   245                           	psect	clrtext
   246  05FA                     clear_ram0:	
   247                           ;	Called with FSR containing the base address, and
   248                           ;	W with the last address+1
   249                           
   250  05FA  0064               	clrwdt	;clear the watchdog before getting into this loop
   251  05FB                     clrloop0:	
   252  05FB  0180               	clrf	0	;clear RAM location pointed to by FSR
   253  05FC  0A84               	incf	4,f	;increment pointer
   254  05FD  0604               	xorwf	4,w	;XOR with final address
   255  05FE  1903               	btfsc	3,2	;have we reached the end yet?
   256  05FF  3400               	retlw	0	;all done for this memory range, return
   257  0600  0604               	xorwf	4,w	;XOR again to restore value
   258  0601  2DFB               	goto	clrloop0	;do the next byte
   259                           
   260                           	psect	cstackCOMMON
   261  0070                     __pcstackCOMMON:	
   262  0070                     ?_ledShow:	
   263  0070                     ??_ledShow:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_Init_System:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_AD_Init:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_chrgCtr:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_checkBatAD:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_setBatStep:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_keyCtr:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_workCtr:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_Sleep_Mode:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_pwmStop:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_pwmInit:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_Isr_Timer:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ??_Isr_Timer:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_main:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_keyRead:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310  0070                     	ds	3
   311  0073                     ??_Init_System:	
   312  0073                     ??_AD_Init:	
   313                           ; 1 bytes @ 0x3
   314                           
   315  0073                     ??_chrgCtr:	
   316                           ; 1 bytes @ 0x3
   317                           
   318  0073                     ??_Sleep_Mode:	
   319                           ; 1 bytes @ 0x3
   320                           
   321  0073                     ??_pwmStop:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ??_pwmInit:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ?_ADC_Sample:	
   328                           ; 1 bytes @ 0x3
   329                           
   330  0073                     ??_keyRead:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ?___lbdiv:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ?___lbmod:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ?___lwdiv:	
   340                           ; 1 bytes @ 0x3
   341                           
   342  0073                     ?___ftpack:	
   343                           ; 2 bytes @ 0x3
   344                           
   345  0073                     keyRead@keyStatus:	
   346                           ; 3 bytes @ 0x3
   347                           
   348  0073                     ADC_Sample@adldo:	
   349                           ; 1 bytes @ 0x3
   350                           
   351  0073                     ___lbdiv@divisor:	
   352                           ; 1 bytes @ 0x3
   353                           
   354  0073                     ___lbmod@divisor:	
   355                           ; 1 bytes @ 0x3
   356                           
   357  0073                     ___lwdiv@divisor:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     ___ftpack@arg:	
   361                           ; 2 bytes @ 0x3
   362                           
   363                           
   364                           ; 3 bytes @ 0x3
   365  0073                     	ds	1
   366  0074                     ??_keyCtr:	
   367  0074                     ??_ADC_Sample:	
   368                           ; 1 bytes @ 0x4
   369                           
   370  0074                     ??___lbdiv:	
   371                           ; 1 bytes @ 0x4
   372                           
   373  0074                     ??___lbmod:	
   374                           ; 1 bytes @ 0x4
   375                           
   376  0074                     keyCtr@kclick:	
   377                           ; 1 bytes @ 0x4
   378                           
   379  0074                     ___lbdiv@dividend:	
   380                           ; 1 bytes @ 0x4
   381                           
   382                           
   383                           ; 1 bytes @ 0x4
   384  0074                     	ds	1
   385  0075                     ___lbdiv@counter:	
   386  0075                     ___lbmod@dividend:	
   387                           ; 1 bytes @ 0x5
   388                           
   389  0075                     ___lwdiv@dividend:	
   390                           ; 1 bytes @ 0x5
   391                           
   392                           
   393                           ; 2 bytes @ 0x5
   394  0075                     	ds	1
   395  0076                     ___ftpack@exp:	
   396  0076                     ___lbdiv@quotient:	
   397                           ; 1 bytes @ 0x6
   398                           
   399  0076                     ___lbmod@counter:	
   400                           ; 1 bytes @ 0x6
   401                           
   402                           
   403                           ; 1 bytes @ 0x6
   404  0076                     	ds	1
   405  0077                     ??_setBatStep:	
   406  0077                     ??___lwdiv:	
   407                           ; 1 bytes @ 0x7
   408                           
   409  0077                     ___ftpack@sign:	
   410                           ; 1 bytes @ 0x7
   411                           
   412  0077                     ___lbmod@rem:	
   413                           ; 1 bytes @ 0x7
   414                           
   415                           
   416                           ; 1 bytes @ 0x7
   417  0077                     	ds	1
   418  0078                     ??_workCtr:	
   419  0078                     ??_main:	
   420                           ; 1 bytes @ 0x8
   421                           
   422  0078                     ??___lwtoft:	
   423                           ; 1 bytes @ 0x8
   424                           
   425                           
   426                           	psect	cstackBANK0
   427  0020                     __pcstackBANK0:	
   428                           ; 1 bytes @ 0x8
   429                           
   430  0020                     ??___ftpack:	
   431  0020                     ADC_Sample@j:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0020                     ___lwdiv@counter:	
   435                           ; 1 bytes @ 0x0
   436                           
   437                           
   438                           ; 1 bytes @ 0x0
   439  0020                     	ds	1
   440  0021                     ADC_Sample@adch:	
   441  0021                     ___lwdiv@quotient:	
   442                           ; 1 bytes @ 0x1
   443                           
   444                           
   445                           ; 2 bytes @ 0x1
   446  0021                     	ds	1
   447  0022                     ADC_Sample@i:	
   448                           
   449                           ; 1 bytes @ 0x2
   450  0022                     	ds	1
   451  0023                     ?___lwtoft:	
   452  0023                     ___lwtoft@c:	
   453                           ; 3 bytes @ 0x3
   454                           
   455  0023                     ADC_Sample@adsum:	
   456                           ; 2 bytes @ 0x3
   457                           
   458                           
   459                           ; 4 bytes @ 0x3
   460  0023                     	ds	3
   461  0026                     ?___ftdiv:	
   462  0026                     ___ftdiv@f2:	
   463                           ; 3 bytes @ 0x6
   464                           
   465                           
   466                           ; 3 bytes @ 0x6
   467  0026                     	ds	1
   468  0027                     ADC_Sample@admin:	
   469                           
   470                           ; 2 bytes @ 0x7
   471  0027                     	ds	2
   472  0029                     ADC_Sample@admax:	
   473  0029                     ___ftdiv@f1:	
   474                           ; 2 bytes @ 0x9
   475                           
   476                           
   477                           ; 3 bytes @ 0x9
   478  0029                     	ds	2
   479  002B                     ADC_Sample@ad_temp:	
   480                           
   481                           ; 2 bytes @ 0xB
   482  002B                     	ds	1
   483  002C                     ??___ftdiv:	
   484                           
   485                           ; 1 bytes @ 0xC
   486  002C                     	ds	3
   487  002F                     ___ftdiv@cntr:	
   488                           
   489                           ; 1 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     ___ftdiv@f3:	
   492                           
   493                           ; 3 bytes @ 0x10
   494  0030                     	ds	3
   495  0033                     ___ftdiv@exp:	
   496                           
   497                           ; 1 bytes @ 0x13
   498  0033                     	ds	1
   499  0034                     ___ftdiv@sign:	
   500                           
   501                           ; 1 bytes @ 0x14
   502  0034                     	ds	1
   503  0035                     ?___fttol:	
   504  0035                     ___fttol@f1:	
   505                           ; 4 bytes @ 0x15
   506                           
   507                           
   508                           ; 3 bytes @ 0x15
   509  0035                     	ds	4
   510  0039                     ??___fttol:	
   511                           
   512                           ; 1 bytes @ 0x19
   513  0039                     	ds	3
   514  003C                     ___fttol@sign1:	
   515                           
   516                           ; 1 bytes @ 0x1C
   517  003C                     	ds	1
   518  003D                     ___fttol@lval:	
   519                           
   520                           ; 4 bytes @ 0x1D
   521  003D                     	ds	4
   522  0041                     ___fttol@exp1:	
   523                           
   524                           ; 1 bytes @ 0x21
   525  0041                     	ds	1
   526  0042                     ??_checkBatAD:	
   527                           
   528                           ; 1 bytes @ 0x22
   529  0042                     	ds	1
   530  0043                     checkBatAD@power_temp:	
   531                           
   532                           ; 4 bytes @ 0x23
   533  0043                     	ds	4
   534                           
   535                           	psect	maintext
   536  03F6                     __pmaintext:	
   537 ;;
   538 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   539 ;;
   540 ;; *************** function _main *****************
   541 ;; Defined at:
   542 ;;		line 118 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : B00/0
   553 ;;		On exit  : 100/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1
   556 ;;      Params:         0       0       0
   557 ;;      Locals:         0       0       0
   558 ;;      Temps:          0       0       0
   559 ;;      Totals:         0       0       0
   560 ;;Total ram usage:        0 bytes
   561 ;; Hardware stack levels required when called:    5
   562 ;; This function calls:
   563 ;;		_AD_Init
   564 ;;		_Init_System
   565 ;;		_Sleep_Mode
   566 ;;		_checkBatAD
   567 ;;		_chrgCtr
   568 ;;		_keyCtr
   569 ;;		_setBatStep
   570 ;;		_workCtr
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _main
   578  03F6                     _main:	
   579                           
   580                           ;main.c: 120: Init_System();
   581                           
   582                           ;incstack = 0
   583                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   584  03F6  259A               	fcall	_Init_System
   585                           
   586                           ;main.c: 121: AD_Init();
   587  03F7  260A               	fcall	_AD_Init
   588                           
   589                           ;main.c: 122: shiweiNum = geweiNum = numArray[8];
   590  03F8  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   591  03F9  0084               	movwf	4
   592  03FA  25B5               	fcall	stringdir
   593  03FB  1283               	bcf	3,5	;RP0=0, select bank0
   594  03FC  00E3               	movwf	_geweiNum
   595  03FD  00E4               	movwf	_shiweiNum
   596  03FE  30C8               	movlw	200
   597                           
   598                           ;main.c: 123: baiweiNum = 1;
   599  03FF  01E2               	clrf	_baiweiNum
   600  0400  0AE2               	incf	_baiweiNum,f
   601                           
   602                           ;main.c: 124: firstTime = 200;
   603  0401  00E5               	movwf	_firstTime
   604  0402                     l619:	
   605                           ;main.c: 125: while (1)
   606                           
   607  0402  0064               	clrwdt	;# 
   608                           
   609                           ;main.c: 128: if(intCount10 > 10)
   610  0403  300B               	movlw	11
   611  0404  1283               	bcf	3,5	;RP0=0, select bank0
   612  0405  025B               	subwf	_intCount10,w
   613  0406  1803               	btfsc	3,0
   614                           
   615                           ;main.c: 129: {
   616                           ;main.c: 130: intCount10 = 0;
   617  0407  01DB               	clrf	_intCount10
   618                           
   619                           ;main.c: 131: }
   620                           ;main.c: 132: if(!IntFlag)
   621  0408  085C               	movf	_IntFlag,w
   622  0409  1903               	btfsc	3,2
   623  040A  2C02               	goto	l619
   624                           
   625                           ;main.c: 134: IntFlag = 0;
   626  040B  01DC               	clrf	_IntFlag
   627                           
   628                           ;main.c: 135: chrgCtr();
   629  040C  2503               	fcall	_chrgCtr
   630                           
   631                           ;main.c: 136: checkBatAD();
   632  040D  2479               	fcall	_checkBatAD
   633                           
   634                           ;main.c: 137: setBatStep();
   635  040E  226B               	fcall	_setBatStep
   636                           
   637                           ;main.c: 138: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   638  040F  087A               	movf	_chrgFlag,w
   639  0410  1D03               	btfss	3,2
   640  0411  2C19               	goto	l2898
   641  0412  0855               	movf	_lowBatFlag,w
   642  0413  1D03               	btfss	3,2
   643  0414  2C19               	goto	l2898
   644  0415  0865               	movf	_firstTime,w
   645  0416  1D03               	btfss	3,2
   646  0417  2C19               	goto	l2898
   647                           
   648                           ;main.c: 139: {
   649                           ;main.c: 140: keyCtr();
   650  0418  24DA               	fcall	_keyCtr
   651  0419                     l2898:	
   652                           
   653                           ;main.c: 141: }
   654                           ;main.c: 142: workCtr();
   655  0419  20FD               	fcall	_workCtr
   656                           
   657                           ;main.c: 143: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 )
   658  041A  087A               	movf	_chrgFlag,w
   659  041B  1D03               	btfss	3,2
   660  041C  2C35               	goto	l2918
   661  041D  0879               	movf	_workStep,w
   662  041E  1283               	bcf	3,5	;RP0=0, select bank0
   663  041F  1D03               	btfss	3,2
   664  0420  2C36               	goto	L1
   665  0421  0859               	movf	_keyCount,w
   666  0422  1D03               	btfss	3,2
   667  0423  2C35               	goto	l2918
   668  0424  0865               	movf	_firstTime,w
   669  0425  1D03               	btfss	3,2
   670  0426  2C35               	goto	l2918
   671  0427  0857               	movf	_showBatTime,w
   672  0428  1D03               	btfss	3,2
   673  0429  2C35               	goto	l2918
   674  042A  30C8               	movlw	200
   675                           
   676                           ;main.c: 144: {
   677                           ;main.c: 145: baiweiNum = 0;
   678  042B  01E2               	clrf	_baiweiNum
   679                           
   680                           ;main.c: 146: shiweiNum = geweiNum = 0;
   681  042C  01E3               	clrf	_geweiNum
   682  042D  01E4               	clrf	_shiweiNum
   683                           
   684                           ;main.c: 147: if(++sleepTime >= 200)
   685  042E  0AD4               	incf	_sleepTime,f
   686  042F  0254               	subwf	_sleepTime,w
   687  0430  1C03               	skipc
   688  0431  2C02               	goto	l619
   689                           
   690                           ;main.c: 148: {
   691                           ;main.c: 149: sleepTime = 0;
   692  0432  01D4               	clrf	_sleepTime
   693                           
   694                           ;main.c: 150: Sleep_Mode();
   695  0433  23B3               	fcall	_Sleep_Mode
   696  0434  2C02               	goto	l619
   697  0435                     l2918:	
   698                           
   699                           ;main.c: 153: else
   700                           ;main.c: 154: {
   701                           ;main.c: 155: sleepTime = 0;
   702  0435  1283               	bcf	3,5	;RP0=0, select bank0
   703  0436                     L1:	
   704  0436  01D4               	clrf	_sleepTime
   705  0437  2C02               	goto	l619
   706  0438                     __end_of_main:	
   707                           
   708                           	psect	text1
   709  00FD                     __ptext1:	
   710 ;; *************** function _workCtr *****************
   711 ;; Defined at:
   712 ;;		line 447 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 100/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1
   726 ;;      Params:         0       0       0
   727 ;;      Locals:         0       0       0
   728 ;;      Temps:          0       0       0
   729 ;;      Totals:         0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    3
   733 ;; This function calls:
   734 ;;		___lbdiv
   735 ;;		___lbmod
   736 ;;		_pwmInit
   737 ;;		_pwmStop
   738 ;; This function is called by:
   739 ;;		_main
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           
   744                           ;psect for function _workCtr
   745  00FD                     _workCtr:	
   746                           
   747                           ;main.c: 449: if(workStep > 0 && count1s == 0 && ++count900s >= 900)
   748                           
   749                           ;incstack = 0
   750                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   751  00FD  0879               	movf	_workStep,w
   752  00FE  1903               	btfsc	3,2
   753  00FF  2910               	goto	l2464
   754  0100  085D               	movf	_count1s,w
   755  0101  1D03               	btfss	3,2
   756  0102  2910               	goto	l2464
   757  0103  0AC9               	incf	_count900s,f
   758  0104  1903               	skipnz
   759  0105  0ACA               	incf	_count900s+1,f
   760  0106  3003               	movlw	3
   761  0107  024A               	subwf	_count900s+1,w
   762  0108  3084               	movlw	132
   763  0109  1903               	skipnz
   764  010A  0249               	subwf	_count900s,w
   765  010B  1C03               	skipc
   766  010C  2910               	goto	l2464
   767                           
   768                           ;main.c: 450: {
   769                           ;main.c: 451: count900s = 0;
   770  010D  01C9               	clrf	_count900s
   771  010E  01CA               	clrf	_count900s+1
   772                           
   773                           ;main.c: 452: workStep = 0;
   774  010F  01F9               	clrf	_workStep
   775  0110                     l2464:	
   776                           
   777                           ;main.c: 453: }
   778                           ;main.c: 454: if(lowShanTime > 0)
   779  0110  084B               	movf	_lowShanTime,w
   780  0111  044C               	iorwf	_lowShanTime+1,w
   781  0112  1903               	btfsc	3,2
   782  0113  291E               	goto	l2470
   783                           
   784                           ;main.c: 455: {
   785                           ;main.c: 456: if(--lowShanTime == 0)
   786  0114  3001               	movlw	1
   787  0115  02CB               	subwf	_lowShanTime,f
   788  0116  3000               	movlw	0
   789  0117  1C03               	skipc
   790  0118  03CC               	decf	_lowShanTime+1,f
   791  0119  02CC               	subwf	_lowShanTime+1,f
   792  011A  084B               	movf	_lowShanTime,w
   793  011B  044C               	iorwf	_lowShanTime+1,w
   794  011C  1903               	btfsc	3,2
   795                           
   796                           ;main.c: 457: {
   797                           ;main.c: 458: workStep = 0;
   798  011D  01F9               	clrf	_workStep
   799  011E                     l2470:	
   800                           
   801                           ;main.c: 459: }
   802                           ;main.c: 460: }
   803                           ;main.c: 461: if(showBatTime > 0)
   804  011E  0857               	movf	_showBatTime,w
   805  011F  1D03               	btfss	3,2
   806                           
   807                           ;main.c: 462: {
   808                           ;main.c: 463: showBatTime--;
   809  0120  03D7               	decf	_showBatTime,f
   810                           
   811                           ;main.c: 464: }
   812                           ;main.c: 465: if(firstTime > 0)
   813  0121  0865               	movf	_firstTime,w
   814  0122  1903               	btfsc	3,2
   815  0123  2937               	goto	l2488
   816                           
   817                           ;main.c: 466: {
   818                           ;main.c: 467: firstTime--;
   819  0124  03E5               	decf	_firstTime,f
   820                           
   821                           ;main.c: 468: if(showBatStep < curBatStep)
   822  0125  0852               	movf	_curBatStep,w
   823  0126  0278               	subwf	_showBatStep,w
   824  0127  1803               	skipnc
   825  0128  292B               	goto	l2482
   826                           
   827                           ;main.c: 469: {
   828                           ;main.c: 470: showBatStep = curBatStep;
   829  0129  0852               	movf	_curBatStep,w
   830  012A  00F8               	movwf	_showBatStep
   831  012B                     l2482:	
   832                           
   833                           ;main.c: 471: }
   834                           ;main.c: 472: shiweiNum = numArray[8];
   835  012B  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   836  012C  0084               	movwf	4
   837  012D  25B5               	fcall	stringdir
   838  012E  00E4               	movwf	_shiweiNum
   839                           
   840                           ;main.c: 473: geweiNum = numArray[8];
   841  012F  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   842  0130  0084               	movwf	4
   843  0131  25B5               	fcall	stringdir
   844  0132  00E3               	movwf	_geweiNum
   845  0133                     l2486:	
   846                           
   847                           ;main.c: 474: baiweiNum = 1;
   848  0133  1283               	bcf	3,5	;RP0=0, select bank0
   849  0134  01E2               	clrf	_baiweiNum
   850  0135  0AE2               	incf	_baiweiNum,f
   851                           
   852                           ;main.c: 475: }
   853  0136  0008               	return
   854  0137                     l2488:	
   855                           
   856                           ;main.c: 476: else if(chrgFlag || showBatTime > 0)
   857  0137  087A               	movf	_chrgFlag,w
   858  0138  1903               	btfsc	3,2
   859  0139  0857               	movf	_showBatTime,w
   860  013A  1903               	btfsc	3,2
   861  013B  296A               	goto	l2508
   862                           
   863                           ;main.c: 477: {
   864                           ;main.c: 478: if(showBatStep > 99)
   865  013C  3064               	movlw	100
   866  013D  0278               	subwf	_showBatStep,w
   867  013E  1C03               	skipc
   868  013F  294D               	goto	l2496
   869                           
   870                           ;main.c: 479: {
   871                           ;main.c: 480: baiweiNum = numArray[1];
   872  0140  3002               	movlw	low (((_numArray+1)-__stringbase)| (0+32768))
   873  0141  0084               	movwf	4
   874  0142  25B5               	fcall	stringdir
   875  0143  00E2               	movwf	_baiweiNum
   876                           
   877                           ;main.c: 481: shiweiNum = numArray[0];
   878  0144  3001               	movlw	low (_numArray-__stringbase)
   879  0145  0084               	movwf	4
   880  0146  25B5               	fcall	stringdir
   881  0147  00E4               	movwf	_shiweiNum
   882                           
   883                           ;main.c: 482: geweiNum = numArray[0];
   884  0148  3001               	movlw	low (_numArray-__stringbase)
   885  0149  0084               	movwf	4
   886  014A  25B5               	fcall	stringdir
   887  014B  00E3               	movwf	_geweiNum
   888                           
   889                           ;main.c: 483: }
   890  014C  0008               	return
   891  014D                     l2496:	
   892                           
   893                           ;main.c: 484: else if(showBatStep > 9)
   894  014D  300A               	movlw	10
   895  014E  0278               	subwf	_showBatStep,w
   896                           
   897                           ;main.c: 485: {
   898                           ;main.c: 486: baiweiNum = 0;
   899  014F  01E2               	clrf	_baiweiNum
   900  0150  1C03               	skipc
   901  0151  2963               	goto	L2
   902                           
   903                           ;main.c: 487: shiweiNum = numArray[showBatStep/10];
   904  0152  300A               	movlw	10
   905  0153  00F3               	movwf	___lbdiv@divisor
   906  0154  0878               	movf	_showBatStep,w
   907  0155  257F               	fcall	___lbdiv
   908  0156  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   909  0157  0084               	movwf	4
   910  0158  25B5               	fcall	stringdir
   911  0159  00E4               	movwf	_shiweiNum
   912                           
   913                           ;main.c: 488: geweiNum = numArray[showBatStep%10];
   914  015A  300A               	movlw	10
   915  015B  00F3               	movwf	___lbmod@divisor
   916  015C  0878               	movf	_showBatStep,w
   917  015D  2563               	fcall	___lbmod
   918  015E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   919  015F  0084               	movwf	4
   920  0160  25B5               	fcall	stringdir
   921  0161  00E3               	movwf	_geweiNum
   922                           
   923                           ;main.c: 489: }
   924  0162  0008               	return
   925  0163                     L2:	
   926                           ;main.c: 490: else
   927                           ;main.c: 491: {
   928                           ;main.c: 492: baiweiNum = 0;
   929                           
   930                           
   931                           ;main.c: 493: shiweiNum = 0;
   932  0163  01E4               	clrf	_shiweiNum
   933                           
   934                           ;main.c: 494: geweiNum = numArray[showBatStep];
   935  0164  0878               	movf	_showBatStep,w
   936  0165  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
   937  0166  0084               	movwf	4
   938  0167  25B5               	fcall	stringdir
   939  0168  00E3               	movwf	_geweiNum
   940                           
   941                           ;main.c: 495: }
   942                           ;main.c: 496: }
   943  0169  0008               	return
   944  016A                     l2508:	
   945                           
   946                           ;main.c: 497: else if(workStep == 0 || (lowShanTime > 0 && count1s < 50))
   947  016A  0879               	movf	_workStep,w
   948  016B  1903               	btfsc	3,2
   949  016C  2975               	goto	l2514
   950  016D  084B               	movf	_lowShanTime,w
   951  016E  044C               	iorwf	_lowShanTime+1,w
   952  016F  1903               	btfsc	3,2
   953  0170  297D               	goto	l2520
   954  0171  3032               	movlw	50
   955  0172  025D               	subwf	_count1s,w
   956  0173  1803               	skipnc
   957  0174  297D               	goto	l2520
   958  0175                     l2514:	
   959                           
   960                           ;main.c: 498: {
   961                           ;main.c: 499: shiweiNum = 0;
   962  0175  01E4               	clrf	_shiweiNum
   963                           
   964                           ;main.c: 500: geweiNum = 0;
   965  0176  01E3               	clrf	_geweiNum
   966                           
   967                           ;main.c: 501: baiweiNum = 0;
   968  0177  01E2               	clrf	_baiweiNum
   969                           
   970                           ;main.c: 502: pwmStop();
   971  0178  2602               	fcall	_pwmStop
   972                           
   973                           ;main.c: 503: count900s = 0;
   974  0179  1283               	bcf	3,5	;RP0=0, select bank0
   975  017A  01C9               	clrf	_count900s
   976  017B  01CA               	clrf	_count900s+1
   977                           
   978                           ;main.c: 504: }
   979  017C  0008               	return
   980  017D                     l2520:	
   981                           
   982                           ;main.c: 505: else if(workStep == 1)
   983  017D  0B79               	decfsz	_workStep,w
   984  017E  2992               	goto	l2534
   985                           
   986                           ;main.c: 506: {
   987                           ;main.c: 507: shiweiNum = numArray[4];
   988  017F  3005               	movlw	low (((_numArray+4)-__stringbase)| (0+32768))
   989  0180  0084               	movwf	4
   990  0181  25B5               	fcall	stringdir
   991  0182  00E4               	movwf	_shiweiNum
   992                           
   993                           ;main.c: 508: geweiNum = numArray[0];
   994  0183  3001               	movlw	low (_numArray-__stringbase)
   995  0184  0084               	movwf	4
   996  0185  25B5               	fcall	stringdir
   997  0186  00E3               	movwf	_geweiNum
   998                           
   999                           ;main.c: 509: baiweiNum = 1;
  1000  0187  01E2               	clrf	_baiweiNum
  1001  0188  0AE2               	incf	_baiweiNum,f
  1002                           
  1003                           ;main.c: 510: if(motorPwmFlag == 0)
  1004  0189  0853               	movf	_motorPwmFlag,w
  1005  018A  1D03               	btfss	3,2
  1006  018B  298D               	goto	l2530
  1007                           
  1008                           ;main.c: 511: {
  1009                           ;main.c: 512: pwmInit();
  1010  018C  25C9               	fcall	_pwmInit
  1011  018D                     l2530:	
  1012                           
  1013                           ;main.c: 513: }
  1014                           ;main.c: 514: PWMD23H = 0X00;
  1015  018D  1683               	bsf	3,5	;RP0=1, select bank1
  1016  018E  019E               	clrf	30	;volatile
  1017                           
  1018                           ;main.c: 515: PWMD2L = 95;
  1019  018F  305F               	movlw	95
  1020  0190  009B               	movwf	27	;volatile
  1021                           
  1022                           ;main.c: 516: }
  1023  0191  0008               	return
  1024  0192                     l2534:	
  1025                           
  1026                           ;main.c: 517: else if(workStep == 2)
  1027  0192  3002               	movlw	2
  1028  0193  0679               	xorwf	_workStep,w
  1029  0194  1D03               	btfss	3,2
  1030  0195  29A7               	goto	l2548
  1031                           
  1032                           ;main.c: 518: {
  1033                           ;main.c: 519: shiweiNum = numArray[6];
  1034  0196  3007               	movlw	low (((_numArray+6)-__stringbase)| (0+32768))
  1035  0197  0084               	movwf	4
  1036  0198  25B5               	fcall	stringdir
  1037  0199  00E4               	movwf	_shiweiNum
  1038                           
  1039                           ;main.c: 520: geweiNum = numArray[0];
  1040  019A  3001               	movlw	low (_numArray-__stringbase)
  1041  019B  0084               	movwf	4
  1042  019C  25B5               	fcall	stringdir
  1043  019D  00E3               	movwf	_geweiNum
  1044                           
  1045                           ;main.c: 521: if(motorPwmFlag == 0)
  1046  019E  0853               	movf	_motorPwmFlag,w
  1047  019F  1D03               	btfss	3,2
  1048  01A0  29A2               	goto	l2542
  1049                           
  1050                           ;main.c: 522: {
  1051                           ;main.c: 523: pwmInit();
  1052  01A1  25C9               	fcall	_pwmInit
  1053  01A2                     l2542:	
  1054                           
  1055                           ;main.c: 524: }
  1056                           ;main.c: 525: PWMD23H = 0X00;
  1057  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  1058  01A3  019E               	clrf	30	;volatile
  1059                           
  1060                           ;main.c: 526: PWMD2L = 97;
  1061  01A4  3061               	movlw	97
  1062  01A5  009B               	movwf	27	;volatile
  1063  01A6  2933               	goto	l2486
  1064  01A7                     l2548:	
  1065                           
  1066                           ;main.c: 529: else if(workStep == 3)
  1067  01A7  3003               	movlw	3
  1068  01A8  0679               	xorwf	_workStep,w
  1069  01A9  1D03               	btfss	3,2
  1070  01AA  0008               	return
  1071  01AB  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
  1072                           
  1073                           ;main.c: 530: {
  1074                           ;main.c: 531: baiweiNum = 1;
  1075  01AC  01E2               	clrf	_baiweiNum
  1076  01AD  0AE2               	incf	_baiweiNum,f
  1077                           
  1078                           ;main.c: 532: shiweiNum = numArray[8];
  1079  01AE  0084               	movwf	4
  1080  01AF  25B5               	fcall	stringdir
  1081  01B0  00E4               	movwf	_shiweiNum
  1082                           
  1083                           ;main.c: 533: geweiNum = numArray[0];
  1084  01B1  3001               	movlw	low (_numArray-__stringbase)
  1085  01B2  0084               	movwf	4
  1086  01B3  25B5               	fcall	stringdir
  1087  01B4  00E3               	movwf	_geweiNum
  1088                           
  1089                           ;main.c: 534: if(motorPwmFlag == 0)
  1090  01B5  0853               	movf	_motorPwmFlag,w
  1091  01B6  1D03               	btfss	3,2
  1092  01B7  29B9               	goto	l2558
  1093                           
  1094                           ;main.c: 535: {
  1095                           ;main.c: 536: pwmInit();
  1096  01B8  25C9               	fcall	_pwmInit
  1097  01B9                     l2558:	
  1098                           
  1099                           ;main.c: 537: }
  1100                           ;main.c: 538: PWMD23H = 0X00;
  1101  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1102  01BA  019E               	clrf	30	;volatile
  1103                           
  1104                           ;main.c: 539: PWMD2L = 99;
  1105  01BB  3063               	movlw	99
  1106  01BC  009B               	movwf	27	;volatile
  1107  01BD  0008               	return
  1108  01BE                     __end_of_workCtr:	
  1109                           
  1110                           	psect	text2
  1111  0602                     __ptext2:	
  1112 ;; *************** function _pwmStop *****************
  1113 ;; Defined at:
  1114 ;;		line 758 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;		None
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0
  1123 ;; Tracked objects:
  1124 ;;		On entry : 100/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1
  1128 ;;      Params:         0       0       0
  1129 ;;      Locals:         0       0       0
  1130 ;;      Temps:          0       0       0
  1131 ;;      Totals:         0       0       0
  1132 ;;Total ram usage:        0 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    2
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_workCtr
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           
  1143                           ;psect for function _pwmStop
  1144  0602                     _pwmStop:	
  1145                           
  1146                           ;main.c: 760: if(motorPwmFlag)
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  1150  0602  0853               	movf	_motorPwmFlag,w
  1151  0603  1903               	btfsc	3,2
  1152  0604  0008               	return
  1153                           
  1154                           ;main.c: 761: {
  1155                           ;main.c: 762: motorPwmFlag = 0;
  1156  0605  01D3               	clrf	_motorPwmFlag
  1157                           
  1158                           ;main.c: 763: PWMCON0 &= 0XFB;
  1159  0606  1115               	bcf	21,2	;volatile
  1160                           
  1161                           ;main.c: 764: RA2 = 0;
  1162  0607  1683               	bsf	3,5	;RP0=1, select bank1
  1163  0608  1106               	bcf	6,2	;volatile
  1164  0609  0008               	return
  1165  060A                     __end_of_pwmStop:	
  1166                           
  1167                           	psect	text3
  1168  05C9                     __ptext3:	
  1169 ;; *************** function _pwmInit *****************
  1170 ;; Defined at:
  1171 ;;		line 742 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2
  1180 ;; Tracked objects:
  1181 ;;		On entry : 100/0
  1182 ;;		On exit  : 100/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1
  1185 ;;      Params:         0       0       0
  1186 ;;      Locals:         0       0       0
  1187 ;;      Temps:          0       0       0
  1188 ;;      Totals:         0       0       0
  1189 ;;Total ram usage:        0 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    2
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		_workCtr
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           
  1200                           ;psect for function _pwmInit
  1201  05C9                     _pwmInit:	
  1202  05C9  30C0               	movlw	192
  1203                           
  1204                           ;main.c: 744: motorPwmFlag = 1;
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _pwmInit: [wreg+status,2]
  1208  05CA  01D3               	clrf	_motorPwmFlag
  1209  05CB  0AD3               	incf	_motorPwmFlag,f
  1210                           
  1211                           ;main.c: 745: PWMCON1 = 0B11000000;
  1212  05CC  0096               	movwf	22	;volatile
  1213                           
  1214                           ;main.c: 746: PWMTH = 0X00;
  1215  05CD  0198               	clrf	24	;volatile
  1216                           
  1217                           ;main.c: 747: PWMTL = 100;
  1218  05CE  3064               	movlw	100
  1219  05CF  0097               	movwf	23	;volatile
  1220                           
  1221                           ;main.c: 750: PWMD23H = 0;
  1222  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1223  05D1  019E               	clrf	30	;volatile
  1224                           
  1225                           ;main.c: 751: PWMD2L = 50;
  1226  05D2  3032               	movlw	50
  1227  05D3  009B               	movwf	27	;volatile
  1228                           
  1229                           ;main.c: 752: PWM23DT = 0X00;
  1230  05D4  019D               	clrf	29	;volatile
  1231                           
  1232                           ;main.c: 754: PWMCON0 = 0X44;
  1233  05D5  3044               	movlw	68
  1234  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1235  05D7  0095               	movwf	21	;volatile
  1236                           
  1237                           ;main.c: 755: PWMCON2 =0X00;
  1238  05D8  019D               	clrf	29	;volatile
  1239  05D9  0008               	return
  1240  05DA                     __end_of_pwmInit:	
  1241                           
  1242                           	psect	text4
  1243  0563                     __ptext4:	
  1244 ;; *************** function ___lbmod *****************
  1245 ;; Defined at:
  1246 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  dividend        1    wreg     unsigned char 
  1249 ;;  divisor         1    3[COMMON] unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  dividend        1    5[COMMON] unsigned char 
  1252 ;;  rem             1    7[COMMON] unsigned char 
  1253 ;;  counter         1    6[COMMON] unsigned char 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  1    wreg      unsigned char 
  1256 ;; Registers used:
  1257 ;;		wreg, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 100/0
  1260 ;;		On exit  : 100/0
  1261 ;;		Unchanged: 100/0
  1262 ;; Data sizes:     COMMON   BANK0   BANK1
  1263 ;;      Params:         1       0       0
  1264 ;;      Locals:         3       0       0
  1265 ;;      Temps:          1       0       0
  1266 ;;      Totals:         5       0       0
  1267 ;;Total ram usage:        5 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    2
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_workCtr
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function ___lbmod
  1279  0563                     ___lbmod:	
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1283                           ;___lbmod@dividend stored from wreg
  1284  0563  00F5               	movwf	___lbmod@dividend
  1285  0564  3008               	movlw	8
  1286  0565  00F6               	movwf	___lbmod@counter
  1287  0566  01F7               	clrf	___lbmod@rem
  1288  0567                     l2236:	
  1289  0567  0875               	movf	___lbmod@dividend,w
  1290  0568  00F4               	movwf	??___lbmod
  1291  0569  3007               	movlw	7
  1292  056A  1003               	clrc
  1293  056B                     L3:	
  1294  056B  0CF4               	rrf	??___lbmod,f
  1295  056C  3EFF               	addlw	-1
  1296  056D  1003               	clrc
  1297  056E  1D03               	skipz
  1298  056F  2D6B               	goto	L3
  1299  0570  0D77               	rlf	___lbmod@rem,w
  1300  0571  0474               	iorwf	??___lbmod,w
  1301  0572  00F7               	movwf	___lbmod@rem
  1302  0573  1003               	clrc
  1303  0574  0DF5               	rlf	___lbmod@dividend,f
  1304  0575  0873               	movf	___lbmod@divisor,w
  1305  0576  0277               	subwf	___lbmod@rem,w
  1306  0577  1C03               	skipc
  1307  0578  2D7B               	goto	l2244
  1308  0579  0873               	movf	___lbmod@divisor,w
  1309  057A  02F7               	subwf	___lbmod@rem,f
  1310  057B                     l2244:	
  1311  057B  0BF6               	decfsz	___lbmod@counter,f
  1312  057C  2D67               	goto	l2236
  1313  057D  0877               	movf	___lbmod@rem,w
  1314  057E  0008               	return
  1315  057F                     __end_of___lbmod:	
  1316                           
  1317                           	psect	text5
  1318  057F                     __ptext5:	
  1319 ;; *************** function ___lbdiv *****************
  1320 ;; Defined at:
  1321 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;  dividend        1    wreg     unsigned char 
  1324 ;;  divisor         1    3[COMMON] unsigned char 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  dividend        1    4[COMMON] unsigned char 
  1327 ;;  quotient        1    6[COMMON] unsigned char 
  1328 ;;  counter         1    5[COMMON] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      unsigned char 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0
  1333 ;; Tracked objects:
  1334 ;;		On entry : 100/0
  1335 ;;		On exit  : 100/0
  1336 ;;		Unchanged: 100/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1
  1338 ;;      Params:         1       0       0
  1339 ;;      Locals:         3       0       0
  1340 ;;      Temps:          0       0       0
  1341 ;;      Totals:         4       0       0
  1342 ;;Total ram usage:        4 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    2
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_workCtr
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           
  1353                           ;psect for function ___lbdiv
  1354  057F                     ___lbdiv:	
  1355                           
  1356                           ;incstack = 0
  1357                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1358                           ;___lbdiv@dividend stored from wreg
  1359  057F  00F4               	movwf	___lbdiv@dividend
  1360  0580  01F6               	clrf	___lbdiv@quotient
  1361  0581  0873               	movf	___lbdiv@divisor,w
  1362  0582  1903               	btfsc	3,2
  1363  0583  2D98               	goto	l2228
  1364  0584  01F5               	clrf	___lbdiv@counter
  1365  0585                     l2214:	
  1366  0585  0AF5               	incf	___lbdiv@counter,f
  1367  0586  1BF3               	btfsc	___lbdiv@divisor,7
  1368  0587  2D8B               	goto	l1062
  1369  0588  1003               	clrc
  1370  0589  0DF3               	rlf	___lbdiv@divisor,f
  1371  058A  2D85               	goto	l2214
  1372  058B                     l1062:	
  1373  058B  1003               	clrc
  1374  058C  0DF6               	rlf	___lbdiv@quotient,f
  1375  058D  0873               	movf	___lbdiv@divisor,w
  1376  058E  0274               	subwf	___lbdiv@dividend,w
  1377  058F  1C03               	skipc
  1378  0590  2D95               	goto	L4
  1379  0591  0873               	movf	___lbdiv@divisor,w
  1380  0592  02F4               	subwf	___lbdiv@dividend,f
  1381  0593  1476               	bsf	___lbdiv@quotient,0
  1382  0594  1003               	clrc
  1383  0595                     L4:	
  1384  0595  0CF3               	rrf	___lbdiv@divisor,f
  1385  0596  0BF5               	decfsz	___lbdiv@counter,f
  1386  0597  2D8B               	goto	l1062
  1387  0598                     l2228:	
  1388  0598  0876               	movf	___lbdiv@quotient,w
  1389  0599  0008               	return
  1390  059A                     __end_of___lbdiv:	
  1391                           
  1392                           	psect	text6
  1393  026B                     __ptext6:	
  1394 ;; *************** function _setBatStep *****************
  1395 ;; Defined at:
  1396 ;;		line 545 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;		None
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 100/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1
  1410 ;;      Params:         0       0       0
  1411 ;;      Locals:         0       0       0
  1412 ;;      Temps:          0       0       0
  1413 ;;      Totals:         0       0       0
  1414 ;;Total ram usage:        0 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    3
  1417 ;; This function calls:
  1418 ;;		___lwdiv
  1419 ;; This function is called by:
  1420 ;;		_main
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424                           
  1425                           ;psect for function _setBatStep
  1426  026B                     _setBatStep:	
  1427                           
  1428                           ;main.c: 547: if(lowBatFlag == 1)
  1429                           
  1430                           ;incstack = 0
  1431                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
  1432  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1433  026C  0B55               	decfsz	_lowBatFlag,w
  1434  026D  2A75               	goto	l2818
  1435  026E  302C               	movlw	44
  1436                           
  1437                           ;main.c: 548: {
  1438                           ;main.c: 549: showBatStep = 0;
  1439  026F  01F8               	clrf	_showBatStep
  1440                           
  1441                           ;main.c: 550: curBatStep = 0;
  1442  0270  01D2               	clrf	_curBatStep
  1443                           
  1444                           ;main.c: 551: lowShanTime = 300;
  1445  0271  00CB               	movwf	_lowShanTime
  1446  0272  3001               	movlw	1
  1447  0273  00CC               	movwf	_lowShanTime+1
  1448                           
  1449                           ;main.c: 552: }
  1450  0274  0008               	return
  1451  0275                     l2818:	
  1452                           
  1453                           ;main.c: 553: else if(power_ad < 2800)
  1454  0275  300A               	movlw	10
  1455  0276  024E               	subwf	_power_ad+1,w	;volatile
  1456  0277  30F0               	movlw	240
  1457  0278  1903               	skipnz
  1458  0279  024D               	subwf	_power_ad,w	;volatile
  1459  027A  1803               	skipnc
  1460  027B  2A8F               	goto	l2828
  1461                           
  1462                           ;main.c: 554: {
  1463                           ;main.c: 555: if(count1s == 0)
  1464  027C  085D               	movf	_count1s,w
  1465  027D  1D03               	btfss	3,2
  1466  027E  2A8C               	goto	l737
  1467                           
  1468                           ;main.c: 556: {
  1469                           ;main.c: 557: if(showBatStep > 1)
  1470  027F  3002               	movlw	2
  1471  0280  0278               	subwf	_showBatStep,w
  1472  0281  1C03               	skipc
  1473  0282  2A88               	goto	l738
  1474                           
  1475                           ;main.c: 558: {
  1476                           ;main.c: 559: if(chrgFlag == 0)
  1477  0283  087A               	movf	_chrgFlag,w
  1478  0284  1D03               	btfss	3,2
  1479  0285  2A8A               	goto	l740
  1480                           
  1481                           ;main.c: 560: showBatStep--;
  1482  0286  03F8               	decf	_showBatStep,f
  1483  0287  2A8A               	goto	l740
  1484  0288                     l738:	
  1485                           
  1486                           ;main.c: 562: else
  1487                           ;main.c: 563: {
  1488                           ;main.c: 564: showBatStep = 1;
  1489  0288  01F8               	clrf	_showBatStep
  1490  0289  0AF8               	incf	_showBatStep,f
  1491  028A                     l740:	
  1492                           
  1493                           ;main.c: 565: }
  1494                           ;main.c: 566: curBatStep = 1;
  1495  028A  01D2               	clrf	_curBatStep
  1496  028B  0AD2               	incf	_curBatStep,f
  1497  028C                     l737:	
  1498                           
  1499                           ;main.c: 567: }
  1500                           ;main.c: 568: curBatStep = 1;
  1501  028C  01D2               	clrf	_curBatStep
  1502  028D  0AD2               	incf	_curBatStep,f
  1503                           
  1504                           ;main.c: 569: }
  1505  028E  0008               	return
  1506  028F                     l2828:	
  1507                           
  1508                           ;main.c: 570: else
  1509                           ;main.c: 571: {
  1510                           ;main.c: 572: if(power_ad < 3600)
  1511  028F  300E               	movlw	14
  1512  0290  024E               	subwf	_power_ad+1,w	;volatile
  1513  0291  3010               	movlw	16
  1514  0292  1903               	skipnz
  1515  0293  024D               	subwf	_power_ad,w	;volatile
  1516  0294  1803               	skipnc
  1517  0295  2AA4               	goto	l2832
  1518                           
  1519                           ;main.c: 573: {
  1520                           ;main.c: 574: curBatStep = (power_ad - 2800)/40;
  1521  0296  3028               	movlw	40
  1522  0297  00F3               	movwf	___lwdiv@divisor
  1523  0298  01F4               	clrf	___lwdiv@divisor+1
  1524  0299  084D               	movf	_power_ad,w	;volatile
  1525  029A  3E10               	addlw	16
  1526  029B  00F5               	movwf	___lwdiv@dividend
  1527  029C  084E               	movf	_power_ad+1,w	;volatile
  1528  029D  1803               	skipnc
  1529  029E  3E01               	addlw	1
  1530  029F  3EF5               	addlw	245
  1531  02A0  00F6               	movwf	___lwdiv@dividend+1
  1532  02A1  24B0               	fcall	___lwdiv
  1533  02A2  0873               	movf	?___lwdiv,w
  1534  02A3  2AB2               	goto	L5
  1535  02A4                     l2832:	
  1536                           ;main.c: 575: }
  1537                           
  1538                           
  1539                           ;main.c: 576: else
  1540                           ;main.c: 577: {
  1541                           ;main.c: 578: curBatStep = 20 + ((power_ad - 3600)/6);
  1542  02A4  3006               	movlw	6
  1543  02A5  00F3               	movwf	___lwdiv@divisor
  1544  02A6  01F4               	clrf	___lwdiv@divisor+1
  1545  02A7  084D               	movf	_power_ad,w	;volatile
  1546  02A8  3EF0               	addlw	240
  1547  02A9  00F5               	movwf	___lwdiv@dividend
  1548  02AA  084E               	movf	_power_ad+1,w	;volatile
  1549  02AB  1803               	skipnc
  1550  02AC  3E01               	addlw	1
  1551  02AD  3EF1               	addlw	241
  1552  02AE  00F6               	movwf	___lwdiv@dividend+1
  1553  02AF  24B0               	fcall	___lwdiv
  1554  02B0  0873               	movf	?___lwdiv,w
  1555  02B1  3E14               	addlw	20
  1556  02B2                     L5:	
  1557  02B2  00D2               	movwf	_curBatStep
  1558                           
  1559                           ;main.c: 579: }
  1560                           ;main.c: 580: if(curBatStep > 100)
  1561  02B3  3065               	movlw	101
  1562  02B4  0252               	subwf	_curBatStep,w
  1563  02B5  1C03               	skipc
  1564  02B6  2AB9               	goto	l2838
  1565                           
  1566                           ;main.c: 581: {
  1567                           ;main.c: 582: curBatStep = 100;
  1568  02B7  3064               	movlw	100
  1569  02B8  00D2               	movwf	_curBatStep
  1570  02B9                     l2838:	
  1571                           
  1572                           ;main.c: 583: }
  1573                           ;main.c: 585: if(chrgFlag)
  1574  02B9  087A               	movf	_chrgFlag,w
  1575  02BA  1903               	btfsc	3,2
  1576  02BB  2AD5               	goto	l2852
  1577                           
  1578                           ;main.c: 586: {
  1579                           ;main.c: 587: if(curBatStep > showBatStep)
  1580  02BC  0852               	movf	_curBatStep,w
  1581  02BD  0278               	subwf	_showBatStep,w
  1582  02BE  1803               	skipnc
  1583  02BF  2AD2               	goto	l2850
  1584                           
  1585                           ;main.c: 588: {
  1586                           ;main.c: 589: if(++count30s >= 10000 && showBatStep < 100)
  1587  02C0  0AC7               	incf	_count30s,f
  1588  02C1  1903               	skipnz
  1589  02C2  0AC8               	incf	_count30s+1,f
  1590  02C3  3027               	movlw	39
  1591  02C4  0248               	subwf	_count30s+1,w
  1592  02C5  3010               	movlw	16
  1593  02C6  1903               	skipnz
  1594  02C7  0247               	subwf	_count30s,w
  1595  02C8  1C03               	skipc
  1596  02C9  0008               	return
  1597  02CA  3064               	movlw	100
  1598  02CB  0278               	subwf	_showBatStep,w
  1599  02CC  1803               	skipnc
  1600  02CD  0008               	return
  1601                           
  1602                           ;main.c: 590: {
  1603                           ;main.c: 591: count30s = 0;
  1604  02CE  01C7               	clrf	_count30s
  1605  02CF  01C8               	clrf	_count30s+1
  1606                           
  1607                           ;main.c: 592: showBatStep++;
  1608  02D0  0AF8               	incf	_showBatStep,f
  1609  02D1  0008               	return
  1610  02D2                     l2850:	
  1611                           
  1612                           ;main.c: 596: else
  1613                           ;main.c: 597: {
  1614                           ;main.c: 598: count30s = 0;
  1615  02D2  01C7               	clrf	_count30s
  1616  02D3  01C8               	clrf	_count30s+1
  1617  02D4  0008               	return
  1618  02D5                     l2852:	
  1619                           
  1620                           ;main.c: 601: else
  1621                           ;main.c: 602: {
  1622                           ;main.c: 603: if(curBatStep < showBatStep && showBatStep > 1)
  1623  02D5  0878               	movf	_showBatStep,w
  1624  02D6  0252               	subwf	_curBatStep,w
  1625  02D7  1803               	skipnc
  1626  02D8  2AD2               	goto	l2850
  1627  02D9  3002               	movlw	2
  1628  02DA  0278               	subwf	_showBatStep,w
  1629  02DB  1C03               	skipc
  1630  02DC  2AD2               	goto	l2850
  1631                           
  1632                           ;main.c: 604: {
  1633                           ;main.c: 605: if(++count30s >= 1500 && showBatStep > 1)
  1634  02DD  0AC7               	incf	_count30s,f
  1635  02DE  1903               	skipnz
  1636  02DF  0AC8               	incf	_count30s+1,f
  1637  02E0  3005               	movlw	5
  1638  02E1  0248               	subwf	_count30s+1,w
  1639  02E2  30DC               	movlw	220
  1640  02E3  1903               	skipnz
  1641  02E4  0247               	subwf	_count30s,w
  1642  02E5  1C03               	skipc
  1643  02E6  0008               	return
  1644  02E7  3002               	movlw	2
  1645  02E8  0278               	subwf	_showBatStep,w
  1646  02E9  1C03               	skipc
  1647  02EA  0008               	return
  1648                           
  1649                           ;main.c: 606: {
  1650                           ;main.c: 607: count30s = 0;
  1651  02EB  01C7               	clrf	_count30s
  1652  02EC  01C8               	clrf	_count30s+1
  1653                           
  1654                           ;main.c: 608: showBatStep--;
  1655  02ED  03F8               	decf	_showBatStep,f
  1656  02EE  0008               	return
  1657  02EF                     __end_of_setBatStep:	
  1658                           
  1659                           	psect	text7
  1660  04B0                     __ptext7:	
  1661 ;; *************** function ___lwdiv *****************
  1662 ;; Defined at:
  1663 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  divisor         2    3[COMMON] unsigned int 
  1666 ;;  dividend        2    5[COMMON] unsigned int 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  quotient        2    1[BANK0 ] unsigned int 
  1669 ;;  counter         1    0[BANK0 ] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  2    3[COMMON] unsigned int 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0
  1674 ;; Tracked objects:
  1675 ;;		On entry : 100/0
  1676 ;;		On exit  : 100/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1
  1679 ;;      Params:         4       0       0
  1680 ;;      Locals:         0       3       0
  1681 ;;      Temps:          0       0       0
  1682 ;;      Totals:         4       3       0
  1683 ;;Total ram usage:        7 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    2
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_setBatStep
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function ___lwdiv
  1695  04B0                     ___lwdiv:	
  1696                           
  1697                           ;incstack = 0
  1698                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1699  04B0  01A1               	clrf	___lwdiv@quotient
  1700  04B1  01A2               	clrf	___lwdiv@quotient+1
  1701  04B2  0873               	movf	___lwdiv@divisor,w
  1702  04B3  0474               	iorwf	___lwdiv@divisor+1,w
  1703  04B4  1903               	btfsc	3,2
  1704  04B5  2CD5               	goto	l2792
  1705  04B6  01A0               	clrf	___lwdiv@counter
  1706  04B7                     L6:	
  1707  04B7  0AA0               	incf	___lwdiv@counter,f
  1708  04B8  1BF4               	btfsc	___lwdiv@divisor+1,7
  1709  04B9  2CBE               	goto	l2780
  1710  04BA  1003               	clrc
  1711  04BB  0DF3               	rlf	___lwdiv@divisor,f
  1712  04BC  0DF4               	rlf	___lwdiv@divisor+1,f
  1713  04BD  2CB7               	goto	L6
  1714  04BE                     l2780:	
  1715  04BE  1003               	clrc
  1716  04BF  0DA1               	rlf	___lwdiv@quotient,f
  1717  04C0  0DA2               	rlf	___lwdiv@quotient+1,f
  1718  04C1  0874               	movf	___lwdiv@divisor+1,w
  1719  04C2  0276               	subwf	___lwdiv@dividend+1,w
  1720  04C3  1D03               	skipz
  1721  04C4  2CC7               	goto	u2835
  1722  04C5  0873               	movf	___lwdiv@divisor,w
  1723  04C6  0275               	subwf	___lwdiv@dividend,w
  1724  04C7                     u2835:	
  1725  04C7  1C03               	skipc
  1726  04C8  2CD1               	goto	L7
  1727  04C9  0873               	movf	___lwdiv@divisor,w
  1728  04CA  02F5               	subwf	___lwdiv@dividend,f
  1729  04CB  0874               	movf	___lwdiv@divisor+1,w
  1730  04CC  1C03               	skipc
  1731  04CD  03F6               	decf	___lwdiv@dividend+1,f
  1732  04CE  02F6               	subwf	___lwdiv@dividend+1,f
  1733  04CF  1421               	bsf	___lwdiv@quotient,0
  1734  04D0  1003               	clrc
  1735  04D1                     L7:	
  1736  04D1  0CF4               	rrf	___lwdiv@divisor+1,f
  1737  04D2  0CF3               	rrf	___lwdiv@divisor,f
  1738  04D3  0BA0               	decfsz	___lwdiv@counter,f
  1739  04D4  2CBE               	goto	l2780
  1740  04D5                     l2792:	
  1741  04D5  0822               	movf	___lwdiv@quotient+1,w
  1742  04D6  00F4               	movwf	?___lwdiv+1
  1743  04D7  0821               	movf	___lwdiv@quotient,w
  1744  04D8  00F3               	movwf	?___lwdiv
  1745  04D9  0008               	return
  1746  04DA                     __end_of___lwdiv:	
  1747                           
  1748                           	psect	text8
  1749  04DA                     __ptext8:	
  1750 ;; *************** function _keyCtr *****************
  1751 ;; Defined at:
  1752 ;;		line 408 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;  kclick          1    4[COMMON] unsigned char 
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, status,2, status,0, pclath, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 100/0
  1763 ;;		On exit  : 100/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1
  1766 ;;      Params:         0       0       0
  1767 ;;      Locals:         1       0       0
  1768 ;;      Temps:          0       0       0
  1769 ;;      Totals:         1       0       0
  1770 ;;Total ram usage:        1 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    3
  1773 ;; This function calls:
  1774 ;;		_keyRead
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           
  1781                           ;psect for function _keyCtr
  1782  04DA                     _keyCtr:	
  1783                           
  1784                           ;main.c: 410: char kclick = keyRead(0x20 & (~PORTB));
  1785                           
  1786                           ;incstack = 0
  1787                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1788  04DA  0906               	comf	6,w	;volatile
  1789  04DB  3920               	andlw	32
  1790  04DC  2528               	fcall	_keyRead
  1791  04DD  00F4               	movwf	keyCtr@kclick
  1792                           
  1793                           ;main.c: 411: if(kclick == 1)
  1794  04DE  0B74               	decfsz	keyCtr@kclick,w
  1795  04DF  2CF4               	goto	l2448
  1796                           
  1797                           ;main.c: 412: {
  1798                           ;main.c: 413: if(workStep > 0)
  1799  04E0  0879               	movf	_workStep,w
  1800  04E1  1903               	btfsc	3,2
  1801  04E2  2CEB               	goto	l2440
  1802                           
  1803                           ;main.c: 414: {
  1804                           ;main.c: 415: if(++workStep > 3)
  1805  04E3  3004               	movlw	4
  1806  04E4  0AF9               	incf	_workStep,f
  1807  04E5  0279               	subwf	_workStep,w
  1808  04E6  1C03               	skipc
  1809  04E7  0008               	return
  1810                           
  1811                           ;main.c: 416: {
  1812                           ;main.c: 417: workStep = 1;
  1813  04E8  01F9               	clrf	_workStep
  1814  04E9  0AF9               	incf	_workStep,f
  1815  04EA  0008               	return
  1816  04EB                     l2440:	
  1817                           
  1818                           ;main.c: 420: else if(showBatTime > 0)
  1819  04EB  0857               	movf	_showBatTime,w
  1820  04EC  1903               	btfsc	3,2
  1821  04ED  2CF0               	goto	l2444
  1822                           
  1823                           ;main.c: 421: {
  1824                           ;main.c: 422: showBatTime = 0;
  1825  04EE  01D7               	clrf	_showBatTime
  1826                           
  1827                           ;main.c: 423: }
  1828  04EF  0008               	return
  1829  04F0                     l2444:	
  1830                           
  1831                           ;main.c: 424: else
  1832                           ;main.c: 425: {
  1833                           ;main.c: 426: showBatTime = 200;
  1834  04F0  30C8               	movlw	200
  1835  04F1  00D7               	movwf	_showBatTime
  1836                           
  1837                           ;main.c: 427: count1s = 0;
  1838  04F2  01DD               	clrf	_count1s
  1839  04F3  0008               	return
  1840  04F4                     l2448:	
  1841                           
  1842                           ;main.c: 430: else if(kclick == 2)
  1843  04F4  3002               	movlw	2
  1844  04F5  0674               	xorwf	keyCtr@kclick,w
  1845  04F6  1D03               	btfss	3,2
  1846  04F7  0008               	return
  1847                           
  1848                           ;main.c: 431: {
  1849                           ;main.c: 432: if(workStep > 0)
  1850  04F8  0879               	movf	_workStep,w
  1851  04F9  1903               	btfsc	3,2
  1852  04FA  2CFD               	goto	l699
  1853                           
  1854                           ;main.c: 433: {
  1855                           ;main.c: 434: workStep = 0;
  1856  04FB  01F9               	clrf	_workStep
  1857                           
  1858                           ;main.c: 435: }
  1859  04FC  0008               	return
  1860  04FD                     l699:	
  1861                           
  1862                           ;main.c: 436: else
  1863                           ;main.c: 437: {
  1864                           ;main.c: 438: workStep = 1;
  1865  04FD  01F9               	clrf	_workStep
  1866  04FE  0AF9               	incf	_workStep,f
  1867                           
  1868                           ;main.c: 439: showBatTime = 0;
  1869  04FF  01D7               	clrf	_showBatTime
  1870                           
  1871                           ;main.c: 440: count900s = 0;
  1872  0500  01C9               	clrf	_count900s
  1873  0501  01CA               	clrf	_count900s+1
  1874  0502  0008               	return
  1875  0503                     __end_of_keyCtr:	
  1876                           
  1877                           	psect	text9
  1878  0528                     __ptext9:	
  1879 ;; *************** function _keyRead *****************
  1880 ;; Defined at:
  1881 ;;		line 373 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  keyStatus       1    wreg     unsigned char 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  keyStatus       1    3[COMMON] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      unsigned char 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 100/0
  1892 ;;		On exit  : 100/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1
  1895 ;;      Params:         0       0       0
  1896 ;;      Locals:         1       0       0
  1897 ;;      Temps:          0       0       0
  1898 ;;      Totals:         1       0       0
  1899 ;;Total ram usage:        1 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    2
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_keyCtr
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _keyRead
  1911  0528                     _keyRead:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1915                           ;keyRead@keyStatus stored from wreg
  1916  0528  00F3               	movwf	keyRead@keyStatus
  1917                           
  1918                           ;main.c: 375: if(keyStatus)
  1919  0529  0873               	movf	keyRead@keyStatus,w
  1920  052A  3064               	movlw	100
  1921  052B  1903               	btfsc	3,2
  1922  052C  2D3A               	goto	L9
  1923                           
  1924                           ;main.c: 376: {
  1925                           ;main.c: 377: keyCount++;
  1926  052D  0AD9               	incf	_keyCount,f
  1927                           
  1928                           ;main.c: 378: if(keyCount >= 100)
  1929  052E  0259               	subwf	_keyCount,w
  1930  052F  1C03               	skipc
  1931  0530  3400               	retlw	0
  1932                           
  1933                           ;main.c: 379: {
  1934                           ;main.c: 380: keyCount = 100;
  1935  0531  3064               	movlw	100
  1936  0532  00D9               	movwf	_keyCount
  1937                           
  1938                           ;main.c: 381: if(!longPressFlag)
  1939  0533  0858               	movf	_longPressFlag,w
  1940  0534  1D03               	btfss	3,2
  1941  0535  3400               	retlw	0
  1942  0536  3002               	movlw	2
  1943                           
  1944                           ;main.c: 382: {
  1945                           ;main.c: 383: longPressFlag = 1;
  1946  0537  01D8               	clrf	_longPressFlag
  1947  0538  0AD8               	incf	_longPressFlag,f
  1948                           
  1949                           ;main.c: 384: return 2;
  1950  0539  0008               	return
  1951  053A                     L9:	
  1952                           ;main.c: 388: else
  1953                           ;main.c: 389: {
  1954                           ;main.c: 390: if(keyCount >= 100)
  1955                           
  1956  053A  0259               	subwf	_keyCount,w
  1957  053B  1C03               	skipc
  1958  053C  2D40               	goto	l2020
  1959                           
  1960                           ;main.c: 391: {
  1961                           ;main.c: 392: keyCount = 0;
  1962  053D  01D9               	clrf	_keyCount
  1963                           
  1964                           ;main.c: 393: longPressFlag = 0;
  1965  053E  01D8               	clrf	_longPressFlag
  1966                           
  1967                           ;main.c: 394: return 0;
  1968  053F  3400               	retlw	0
  1969  0540                     l2020:	
  1970                           
  1971                           ;main.c: 396: else if(keyCount >= 6)
  1972  0540  3006               	movlw	6
  1973  0541  0259               	subwf	_keyCount,w
  1974                           
  1975                           ;main.c: 397: {
  1976                           ;main.c: 398: keyCount = 0;
  1977  0542  01D9               	clrf	_keyCount
  1978  0543  1803               	btfsc	3,0
  1979                           
  1980                           ;main.c: 399: return 1;
  1981  0544  3401               	retlw	1
  1982  0545  3400               	retlw	0
  1983  0546                     __end_of_keyRead:	
  1984                           ;main.c: 400: }
  1985                           ;main.c: 401: keyCount = 0;
  1986                           
  1987                           
  1988                           	psect	text10
  1989  0503                     __ptext10:	
  1990 ;; *************** function _chrgCtr *****************
  1991 ;; Defined at:
  1992 ;;		line 332 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 100/0
  2003 ;;		On exit  : 100/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1
  2006 ;;      Params:         0       0       0
  2007 ;;      Locals:         0       0       0
  2008 ;;      Temps:          0       0       0
  2009 ;;      Totals:         0       0       0
  2010 ;;Total ram usage:        0 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    2
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           
  2021                           ;psect for function _chrgCtr
  2022  0503                     _chrgCtr:	
  2023                           
  2024                           ;main.c: 334: if(PORTB & 0x04)
  2025                           
  2026                           ;incstack = 0
  2027                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2028  0503  1D06               	btfss	6,2	;volatile
  2029  0504  2D13               	goto	l2350
  2030  0505  3064               	movlw	100
  2031                           
  2032                           ;main.c: 335: {
  2033                           ;main.c: 336: chrgFlag = 1;
  2034  0506  01FA               	clrf	_chrgFlag
  2035  0507  0AFA               	incf	_chrgFlag,f
  2036                           
  2037                           ;main.c: 337: workStep = 0;
  2038  0508  01F9               	clrf	_workStep
  2039                           
  2040                           ;main.c: 338: lowBatFlag = 0;
  2041  0509  01D5               	clrf	_lowBatFlag
  2042                           
  2043                           ;main.c: 339: if(showBatStep >= 100)
  2044  050A  0278               	subwf	_showBatStep,w
  2045  050B  1C03               	skipc
  2046  050C  2D10               	goto	l672
  2047                           
  2048                           ;main.c: 340: {
  2049                           ;main.c: 341: RB0 = 1;
  2050  050D  1406               	bsf	6,0	;volatile
  2051                           
  2052                           ;main.c: 342: RB1 = 0;
  2053  050E  1086               	bcf	6,1	;volatile
  2054                           
  2055                           ;main.c: 343: }
  2056  050F  0008               	return
  2057  0510                     l672:	
  2058                           
  2059                           ;main.c: 344: else
  2060                           ;main.c: 345: {
  2061                           ;main.c: 346: RB0 = 0;
  2062  0510  1006               	bcf	6,0	;volatile
  2063                           
  2064                           ;main.c: 347: RB1 = 1;
  2065  0511  1486               	bsf	6,1	;volatile
  2066  0512  0008               	return
  2067  0513                     l2350:	
  2068  0513  3003               	movlw	3
  2069                           
  2070                           ;main.c: 354: chrgFullTime = 0;
  2071  0514  01FA               	clrf	_chrgFlag
  2072                           
  2073                           ;main.c: 355: PORTB |= 0x03;
  2074  0515  0486               	iorwf	6,f	;volatile
  2075                           
  2076                           ;main.c: 356: if(power_ad < 2500)
  2077  0516  3009               	movlw	9
  2078  0517  024E               	subwf	_power_ad+1,w	;volatile
  2079  0518  30C4               	movlw	196
  2080  0519  1903               	skipnz
  2081  051A  024D               	subwf	_power_ad,w	;volatile
  2082  051B  1803               	skipnc
  2083  051C  2D26               	goto	l2362
  2084                           
  2085                           ;main.c: 357: {
  2086                           ;main.c: 358: if(++lowBatTime > 200)
  2087  051D  30C9               	movlw	201
  2088  051E  0AD1               	incf	_lowBatTime,f
  2089  051F  0251               	subwf	_lowBatTime,w
  2090  0520  1C03               	skipc
  2091  0521  0008               	return
  2092                           
  2093                           ;main.c: 359: {
  2094                           ;main.c: 360: lowBatTime = 0;
  2095  0522  01D1               	clrf	_lowBatTime
  2096                           
  2097                           ;main.c: 361: lowBatFlag = 1;
  2098  0523  01D5               	clrf	_lowBatFlag
  2099  0524  0AD5               	incf	_lowBatFlag,f
  2100  0525  0008               	return
  2101  0526                     l2362:	
  2102                           
  2103                           ;main.c: 364: else
  2104                           ;main.c: 365: {
  2105                           ;main.c: 366: lowBatTime = 0;
  2106  0526  01D1               	clrf	_lowBatTime
  2107  0527  0008               	return
  2108  0528                     __end_of_chrgCtr:	
  2109                           
  2110                           	psect	text11
  2111  0479                     __ptext11:	
  2112 ;; *************** function _checkBatAD *****************
  2113 ;; Defined at:
  2114 ;;		line 621 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  power_temp      4   35[BANK0 ] volatile unsigned long 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, status,2, status,0, pclath, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 100/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMMON   BANK0   BANK1
  2128 ;;      Params:         0       0       0
  2129 ;;      Locals:         0       4       0
  2130 ;;      Temps:          0       1       0
  2131 ;;      Totals:         0       5       0
  2132 ;;Total ram usage:        5 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    4
  2135 ;; This function calls:
  2136 ;;		_ADC_Sample
  2137 ;;		___ftdiv
  2138 ;;		___fttol
  2139 ;;		___lwtoft
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           
  2146                           ;psect for function _checkBatAD
  2147  0479                     _checkBatAD:	
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2151  0479  301F               	movlw	31
  2152                           
  2153                           ;main.c: 623: test_adc = ADC_Sample(31, 0);
  2154  047A  01F3               	clrf	ADC_Sample@adldo
  2155  047B  2017               	fcall	_ADC_Sample
  2156  047C  00DF               	movwf	_test_adc	;volatile
  2157                           
  2158                           ;main.c: 624: if (0xA5 == test_adc)
  2159  047D  30A5               	movlw	165
  2160  047E  065F               	xorwf	_test_adc,w	;volatile
  2161  047F  1D03               	btfss	3,2
  2162  0480  2CA6               	goto	l2808
  2163                           
  2164                           ;main.c: 625: {
  2165                           ;main.c: 626: volatile unsigned long power_temp;
  2166                           ;main.c: 628: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2167  0481  3096               	movlw	150
  2168  0482  01A9               	clrf	___ftdiv@f1
  2169  0483  00AA               	movwf	___ftdiv@f1+1
  2170  0484  304A               	movlw	74
  2171  0485  00AB               	movwf	___ftdiv@f1+2
  2172  0486  0861               	movf	_adresult+1,w	;volatile
  2173  0487  00A4               	movwf	___lwtoft@c+1
  2174  0488  0860               	movf	_adresult,w	;volatile
  2175  0489  00A3               	movwf	___lwtoft@c
  2176  048A  25DA               	fcall	___lwtoft
  2177  048B  0823               	movf	?___lwtoft,w
  2178  048C  00A6               	movwf	___ftdiv@f2
  2179  048D  0824               	movf	?___lwtoft+1,w
  2180  048E  00A7               	movwf	___ftdiv@f2+1
  2181  048F  0825               	movf	?___lwtoft+2,w
  2182  0490  00A8               	movwf	___ftdiv@f2+2
  2183  0491  22EF               	fcall	___ftdiv
  2184  0492  0826               	movf	?___ftdiv,w
  2185  0493  00B5               	movwf	___fttol@f1
  2186  0494  0827               	movf	?___ftdiv+1,w
  2187  0495  00B6               	movwf	___fttol@f1+1
  2188  0496  0828               	movf	?___ftdiv+2,w
  2189  0497  00B7               	movwf	___fttol@f1+2
  2190  0498  2355               	fcall	___fttol
  2191  0499  0838               	movf	?___fttol+3,w
  2192  049A  00C6               	movwf	checkBatAD@power_temp+3	;volatile
  2193  049B  0837               	movf	?___fttol+2,w
  2194  049C  00C5               	movwf	checkBatAD@power_temp+2	;volatile
  2195  049D  0836               	movf	?___fttol+1,w
  2196  049E  00C4               	movwf	checkBatAD@power_temp+1	;volatile
  2197  049F  0835               	movf	?___fttol,w
  2198  04A0  00C3               	movwf	checkBatAD@power_temp	;volatile
  2199                           
  2200                           ;main.c: 629: power_ad = (unsigned int)(power_temp);
  2201  04A1  0844               	movf	checkBatAD@power_temp+1,w	;volatile
  2202  04A2  00CE               	movwf	_power_ad+1	;volatile
  2203  04A3  0843               	movf	checkBatAD@power_temp,w	;volatile
  2204  04A4  00CD               	movwf	_power_ad	;volatile
  2205                           
  2206                           ;main.c: 630: }
  2207  04A5  0008               	return
  2208  04A6                     l2808:	
  2209                           
  2210                           ;main.c: 631: else
  2211                           ;main.c: 632: {
  2212                           ;main.c: 633: ADCON0 = 0;
  2213  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  2214  04A7  0195               	clrf	21	;volatile
  2215                           
  2216                           ;main.c: 634: ADCON1 = 0;
  2217  04A8  0196               	clrf	22	;volatile
  2218                           
  2219                           ;main.c: 635: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2220  04A9  3084               	movlw	132
  2221  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  2222  04AB  00C2               	movwf	??_checkBatAD
  2223  04AC                     u3127:	
  2224  04AC  0BC2               	decfsz	??_checkBatAD,f
  2225  04AD  2CAC               	goto	u3127
  2226  04AE  2CAF               	nop2
  2227  04AF  0008               	return
  2228  04B0                     __end_of_checkBatAD:	
  2229                           
  2230                           	psect	text12
  2231  05DA                     __ptext12:	
  2232 ;; *************** function ___lwtoft *****************
  2233 ;; Defined at:
  2234 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  c               2    3[BANK0 ] unsigned int 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  3    3[BANK0 ] float 
  2241 ;; Registers used:
  2242 ;;		wreg, status,2, status,0, pclath, cstack
  2243 ;; Tracked objects:
  2244 ;;		On entry : 100/0
  2245 ;;		On exit  : 100/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMMON   BANK0   BANK1
  2248 ;;      Params:         0       3       0
  2249 ;;      Locals:         0       0       0
  2250 ;;      Temps:          0       0       0
  2251 ;;      Totals:         0       3       0
  2252 ;;Total ram usage:        3 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; Hardware stack levels required when called:    3
  2255 ;; This function calls:
  2256 ;;		___ftpack
  2257 ;; This function is called by:
  2258 ;;		_checkBatAD
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function ___lwtoft
  2264  05DA                     ___lwtoft:	
  2265                           
  2266                           ;incstack = 0
  2267                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2268  05DA  0823               	movf	___lwtoft@c,w
  2269  05DB  00F3               	movwf	___ftpack@arg
  2270  05DC  0824               	movf	___lwtoft@c+1,w
  2271  05DD  00F4               	movwf	___ftpack@arg+1
  2272  05DE  308E               	movlw	142
  2273  05DF  01F5               	clrf	___ftpack@arg+2
  2274  05E0  00F6               	movwf	___ftpack@exp
  2275  05E1  01F7               	clrf	___ftpack@sign
  2276  05E2  2438               	fcall	___ftpack
  2277  05E3  0873               	movf	?___ftpack,w
  2278  05E4  00A3               	movwf	?___lwtoft
  2279  05E5  0874               	movf	?___ftpack+1,w
  2280  05E6  00A4               	movwf	?___lwtoft+1
  2281  05E7  0875               	movf	?___ftpack+2,w
  2282  05E8  00A5               	movwf	?___lwtoft+2
  2283  05E9  0008               	return
  2284  05EA                     __end_of___lwtoft:	
  2285                           
  2286                           	psect	text13
  2287  0355                     __ptext13:	
  2288 ;; *************** function ___fttol *****************
  2289 ;; Defined at:
  2290 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  f1              3   21[BANK0 ] float 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  lval            4   29[BANK0 ] unsigned long 
  2295 ;;  exp1            1   33[BANK0 ] unsigned char 
  2296 ;;  sign1           1   28[BANK0 ] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  4   21[BANK0 ] long 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0
  2301 ;; Tracked objects:
  2302 ;;		On entry : 100/0
  2303 ;;		On exit  : 100/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1
  2306 ;;      Params:         0       4       0
  2307 ;;      Locals:         0       6       0
  2308 ;;      Temps:          0       3       0
  2309 ;;      Totals:         0      13       0
  2310 ;;Total ram usage:       13 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    2
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_checkBatAD
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           
  2321                           ;psect for function ___fttol
  2322  0355                     ___fttol:	
  2323                           
  2324                           ;incstack = 0
  2325                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2326  0355  23AC               	fcall	PL8	;call to abstracted procedure
  2327  0356  1003               	clrc
  2328  0357  0D3A               	rlf	??___fttol+1,w
  2329  0358  0D3B               	rlf	??___fttol+2,w
  2330  0359  00C1               	movwf	___fttol@exp1
  2331  035A  0841               	movf	___fttol@exp1,w
  2332  035B  1D03               	btfss	3,2
  2333  035C  2B62               	goto	l2172
  2334  035D                     l2170:	
  2335  035D  01B5               	clrf	?___fttol
  2336  035E  01B6               	clrf	?___fttol+1
  2337  035F  01B7               	clrf	?___fttol+2
  2338  0360  01B8               	clrf	?___fttol+3
  2339  0361  0008               	return
  2340  0362                     l2172:	
  2341  0362  23AC               	fcall	PL8	;call to abstracted procedure
  2342  0363  3017               	movlw	23
  2343  0364                     u1695:	
  2344  0364  1003               	clrc
  2345  0365  0CBB               	rrf	??___fttol+2,f
  2346  0366  0CBA               	rrf	??___fttol+1,f
  2347  0367  0CB9               	rrf	??___fttol,f
  2348  0368  3EFF               	addlw	-1
  2349  0369  1D03               	skipz
  2350  036A  2B64               	goto	u1695
  2351  036B  0839               	movf	??___fttol,w
  2352  036C  00BC               	movwf	___fttol@sign1
  2353  036D  17B6               	bsf	___fttol@f1+1,7
  2354  036E  01B7               	clrf	___fttol@f1+2
  2355  036F  0835               	movf	___fttol@f1,w
  2356  0370  00BD               	movwf	___fttol@lval
  2357  0371  0836               	movf	___fttol@f1+1,w
  2358  0372  00BE               	movwf	___fttol@lval+1
  2359  0373  0837               	movf	___fttol@f1+2,w
  2360  0374  00BF               	movwf	___fttol@lval+2
  2361  0375  308E               	movlw	142
  2362  0376  01C0               	clrf	___fttol@lval+3
  2363  0377  02C1               	subwf	___fttol@exp1,f
  2364  0378  1FC1               	btfss	___fttol@exp1,7
  2365  0379  2B87               	goto	l2192
  2366  037A  0841               	movf	___fttol@exp1,w
  2367  037B  3A80               	xorlw	128
  2368  037C  3E8F               	addlw	143
  2369  037D  1C03               	btfss	3,0
  2370  037E  2B5D               	goto	l2170
  2371  037F                     l2188:	
  2372  037F  1003               	clrc
  2373  0380  0CC0               	rrf	___fttol@lval+3,f
  2374  0381  0CBF               	rrf	___fttol@lval+2,f
  2375  0382  0CBE               	rrf	___fttol@lval+1,f
  2376  0383  0CBD               	rrf	___fttol@lval,f
  2377  0384  0FC1               	incfsz	___fttol@exp1,f
  2378  0385  2B7F               	goto	l2188
  2379  0386  2B95               	goto	l2200
  2380  0387                     l2192:	
  2381  0387  3018               	movlw	24
  2382  0388  0241               	subwf	___fttol@exp1,w
  2383  0389  1803               	btfsc	3,0
  2384  038A  2B5D               	goto	l2170
  2385  038B                     l2198:	
  2386  038B  0841               	movf	___fttol@exp1,w
  2387  038C  1903               	btfsc	3,2
  2388  038D  2B95               	goto	l2200
  2389  038E  1003               	clrc
  2390  038F  0DBD               	rlf	___fttol@lval,f
  2391  0390  0DBE               	rlf	___fttol@lval+1,f
  2392  0391  0DBF               	rlf	___fttol@lval+2,f
  2393  0392  0DC0               	rlf	___fttol@lval+3,f
  2394  0393  03C1               	decf	___fttol@exp1,f
  2395  0394  2B8B               	goto	l2198
  2396  0395                     l2200:	
  2397  0395  083C               	movf	___fttol@sign1,w
  2398  0396  1903               	btfsc	3,2
  2399  0397  2BA3               	goto	l2204
  2400  0398  09BD               	comf	___fttol@lval,f
  2401  0399  09BE               	comf	___fttol@lval+1,f
  2402  039A  09BF               	comf	___fttol@lval+2,f
  2403  039B  09C0               	comf	___fttol@lval+3,f
  2404  039C  0ABD               	incf	___fttol@lval,f
  2405  039D  1903               	skipnz
  2406  039E  0ABE               	incf	___fttol@lval+1,f
  2407  039F  1903               	skipnz
  2408  03A0  0ABF               	incf	___fttol@lval+2,f
  2409  03A1  1903               	skipnz
  2410  03A2  0AC0               	incf	___fttol@lval+3,f
  2411  03A3                     l2204:	
  2412  03A3  0840               	movf	___fttol@lval+3,w
  2413  03A4  00B8               	movwf	?___fttol+3
  2414  03A5  083F               	movf	___fttol@lval+2,w
  2415  03A6  00B7               	movwf	?___fttol+2
  2416  03A7  083E               	movf	___fttol@lval+1,w
  2417  03A8  00B6               	movwf	?___fttol+1
  2418  03A9  083D               	movf	___fttol@lval,w
  2419  03AA  00B5               	movwf	?___fttol
  2420  03AB  0008               	return
  2421  03AC                     __end_of___fttol:	
  2422  03AC                     PL8:	
  2423  03AC  0835               	movf	___fttol@f1,w
  2424  03AD  00B9               	movwf	??___fttol
  2425  03AE  0836               	movf	___fttol@f1+1,w
  2426  03AF  00BA               	movwf	??___fttol+1
  2427  03B0  0837               	movf	___fttol@f1+2,w
  2428  03B1  00BB               	movwf	??___fttol+2
  2429  03B2  0008               	return
  2430  03B3                     __end_ofPL8:	
  2431                           
  2432                           	psect	text14
  2433  02EF                     __ptext14:	
  2434 ;; *************** function ___ftdiv *****************
  2435 ;; Defined at:
  2436 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  f2              3    6[BANK0 ] float 
  2439 ;;  f1              3    9[BANK0 ] float 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  f3              3   16[BANK0 ] float 
  2442 ;;  sign            1   20[BANK0 ] unsigned char 
  2443 ;;  exp             1   19[BANK0 ] unsigned char 
  2444 ;;  cntr            1   15[BANK0 ] unsigned char 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  3    6[BANK0 ] float 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, pclath, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 100/0
  2451 ;;		On exit  : 100/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1
  2454 ;;      Params:         0       6       0
  2455 ;;      Locals:         0       6       0
  2456 ;;      Temps:          0       3       0
  2457 ;;      Totals:         0      15       0
  2458 ;;Total ram usage:       15 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    3
  2461 ;; This function calls:
  2462 ;;		___ftpack
  2463 ;; This function is called by:
  2464 ;;		_checkBatAD
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function ___ftdiv
  2470  02EF                     ___ftdiv:	
  2471                           
  2472                           ;incstack = 0
  2473                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2474  02EF  0829               	movf	___ftdiv@f1,w
  2475  02F0  00AC               	movwf	??___ftdiv
  2476  02F1  082A               	movf	___ftdiv@f1+1,w
  2477  02F2  00AD               	movwf	??___ftdiv+1
  2478  02F3  082B               	movf	___ftdiv@f1+2,w
  2479  02F4  00AE               	movwf	??___ftdiv+2
  2480  02F5  1003               	clrc
  2481  02F6  0D2D               	rlf	??___ftdiv+1,w
  2482  02F7  0D2E               	rlf	??___ftdiv+2,w
  2483  02F8  00B3               	movwf	___ftdiv@exp
  2484  02F9  0833               	movf	___ftdiv@exp,w
  2485  02FA  1D03               	btfss	3,2
  2486  02FB  2AFD               	goto	l2734
  2487  02FC  2B51               	ljmp	PL18	;call to abstracted procedure
  2488  02FD                     l2734:	
  2489  02FD  0826               	movf	___ftdiv@f2,w
  2490  02FE  00AC               	movwf	??___ftdiv
  2491  02FF  0827               	movf	___ftdiv@f2+1,w
  2492  0300  00AD               	movwf	??___ftdiv+1
  2493  0301  0828               	movf	___ftdiv@f2+2,w
  2494  0302  00AE               	movwf	??___ftdiv+2
  2495  0303  1003               	clrc
  2496  0304  0D2D               	rlf	??___ftdiv+1,w
  2497  0305  0D2E               	rlf	??___ftdiv+2,w
  2498  0306  00B4               	movwf	___ftdiv@sign
  2499  0307  0834               	movf	___ftdiv@sign,w
  2500  0308  1D03               	btfss	3,2
  2501  0309  2B0B               	goto	l1010
  2502  030A  2B51               	ljmp	PL18	;call to abstracted procedure
  2503  030B                     l1010:	
  2504  030B  3089               	movlw	137
  2505  030C  01B0               	clrf	___ftdiv@f3
  2506  030D  01B1               	clrf	___ftdiv@f3+1
  2507  030E  01B2               	clrf	___ftdiv@f3+2
  2508  030F  0734               	addwf	___ftdiv@sign,w
  2509  0310  00AC               	movwf	??___ftdiv
  2510  0311  02B3               	subwf	___ftdiv@exp,f
  2511  0312  082B               	movf	___ftdiv@f1+2,w
  2512  0313  00B4               	movwf	___ftdiv@sign
  2513  0314  0828               	movf	___ftdiv@f2+2,w
  2514  0315  06B4               	xorwf	___ftdiv@sign,f
  2515  0316  3080               	movlw	128
  2516  0317  05B4               	andwf	___ftdiv@sign,f
  2517  0318  3018               	movlw	24
  2518  0319  17AA               	bsf	___ftdiv@f1+1,7
  2519  031A  01AB               	clrf	___ftdiv@f1+2
  2520  031B  17A7               	bsf	___ftdiv@f2+1,7
  2521  031C  01A8               	clrf	___ftdiv@f2+2
  2522  031D  00AF               	movwf	___ftdiv@cntr
  2523  031E                     l2756:	
  2524  031E  1003               	clrc
  2525  031F  0DB0               	rlf	___ftdiv@f3,f
  2526  0320  0DB1               	rlf	___ftdiv@f3+1,f
  2527  0321  0DB2               	rlf	___ftdiv@f3+2,f
  2528  0322  0828               	movf	___ftdiv@f2+2,w
  2529  0323  022B               	subwf	___ftdiv@f1+2,w
  2530  0324  1D03               	skipz
  2531  0325  2B2C               	goto	u2795
  2532  0326  0827               	movf	___ftdiv@f2+1,w
  2533  0327  022A               	subwf	___ftdiv@f1+1,w
  2534  0328  1D03               	skipz
  2535  0329  2B2C               	goto	u2795
  2536  032A  0826               	movf	___ftdiv@f2,w
  2537  032B  0229               	subwf	___ftdiv@f1,w
  2538  032C                     u2795:	
  2539  032C  1C03               	skipc
  2540  032D  2B3A               	goto	L10
  2541  032E  0826               	movf	___ftdiv@f2,w
  2542  032F  02A9               	subwf	___ftdiv@f1,f
  2543  0330  0827               	movf	___ftdiv@f2+1,w
  2544  0331  1C03               	skipc
  2545  0332  0F27               	incfsz	___ftdiv@f2+1,w
  2546  0333  02AA               	subwf	___ftdiv@f1+1,f
  2547  0334  0828               	movf	___ftdiv@f2+2,w
  2548  0335  1C03               	skipc
  2549  0336  0A28               	incf	___ftdiv@f2+2,w
  2550  0337  02AB               	subwf	___ftdiv@f1+2,f
  2551  0338  1430               	bsf	___ftdiv@f3,0
  2552  0339  1003               	clrc
  2553  033A                     L10:	
  2554  033A  0DA9               	rlf	___ftdiv@f1,f
  2555  033B  0DAA               	rlf	___ftdiv@f1+1,f
  2556  033C  0DAB               	rlf	___ftdiv@f1+2,f
  2557  033D  0BAF               	decfsz	___ftdiv@cntr,f
  2558  033E  2B1E               	goto	l2756
  2559  033F  0830               	movf	___ftdiv@f3,w
  2560  0340  00F3               	movwf	___ftpack@arg
  2561  0341  0831               	movf	___ftdiv@f3+1,w
  2562  0342  00F4               	movwf	___ftpack@arg+1
  2563  0343  0832               	movf	___ftdiv@f3+2,w
  2564  0344  00F5               	movwf	___ftpack@arg+2
  2565  0345  0833               	movf	___ftdiv@exp,w
  2566  0346  00F6               	movwf	___ftpack@exp
  2567  0347  0834               	movf	___ftdiv@sign,w
  2568  0348  00F7               	movwf	___ftpack@sign
  2569  0349  2438               	fcall	___ftpack
  2570  034A  0873               	movf	?___ftpack,w
  2571  034B  00A6               	movwf	?___ftdiv
  2572  034C  0874               	movf	?___ftpack+1,w
  2573  034D  00A7               	movwf	?___ftdiv+1
  2574  034E  0875               	movf	?___ftpack+2,w
  2575  034F  00A8               	movwf	?___ftdiv+2
  2576  0350  0008               	return
  2577  0351                     __end_of___ftdiv:	
  2578  0351                     PL18:	
  2579  0351  01A6               	clrf	?___ftdiv
  2580  0352  01A7               	clrf	?___ftdiv+1
  2581  0353  01A8               	clrf	?___ftdiv+2
  2582  0354  0008               	return
  2583  0355                     __end_ofPL18:	
  2584                           
  2585                           	psect	text15
  2586  0438                     __ptext15:	
  2587 ;; *************** function ___ftpack *****************
  2588 ;; Defined at:
  2589 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  arg             3    3[COMMON] unsigned um
  2592 ;;  exp             1    6[COMMON] unsigned char 
  2593 ;;  sign            1    7[COMMON] unsigned char 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  3    3[COMMON] float 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0
  2600 ;; Tracked objects:
  2601 ;;		On entry : 100/0
  2602 ;;		On exit  : 100/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1
  2605 ;;      Params:         5       0       0
  2606 ;;      Locals:         0       0       0
  2607 ;;      Temps:          0       3       0
  2608 ;;      Totals:         5       3       0
  2609 ;;Total ram usage:        8 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    2
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		___ftdiv
  2616 ;;		___lwtoft
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function ___ftpack
  2622  0438                     ___ftpack:	
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2626  0438  0876               	movf	___ftpack@exp,w
  2627  0439  1903               	btfsc	3,2
  2628  043A  2C40               	goto	l956
  2629  043B  0875               	movf	___ftpack@arg+2,w
  2630  043C  0474               	iorwf	___ftpack@arg+1,w
  2631  043D  0473               	iorwf	___ftpack@arg,w
  2632  043E  1D03               	skipz
  2633  043F  2C46               	goto	l2712
  2634  0440                     l956:	
  2635  0440  01F3               	clrf	?___ftpack
  2636  0441  01F4               	clrf	?___ftpack+1
  2637  0442  01F5               	clrf	?___ftpack+2
  2638  0443  0008               	return
  2639  0444                     l2710:	
  2640  0444  0AF6               	incf	___ftpack@exp,f
  2641  0445  2474               	fcall	PL14	;call to abstracted procedure
  2642  0446                     l2712:	
  2643  0446  30FE               	movlw	254
  2644  0447  0575               	andwf	___ftpack@arg+2,w
  2645  0448  1903               	btfsc	3,2
  2646  0449  2C52               	goto	l2716
  2647  044A  2C44               	goto	l2710
  2648  044B                     l2714:	
  2649  044B  0AF6               	incf	___ftpack@exp,f
  2650  044C  0AF3               	incf	___ftpack@arg,f
  2651  044D  1903               	skipnz
  2652  044E  0AF4               	incf	___ftpack@arg+1,f
  2653  044F  1903               	skipnz
  2654  0450  0AF5               	incf	___ftpack@arg+2,f
  2655  0451  2474               	fcall	PL14	;call to abstracted procedure
  2656  0452                     l2716:	
  2657  0452  30FF               	movlw	255
  2658  0453  0575               	andwf	___ftpack@arg+2,w
  2659  0454  1903               	btfsc	3,2
  2660  0455  2C60               	goto	l2720
  2661  0456  2C4B               	goto	l2714
  2662  0457                     l2722:	
  2663  0457  3002               	movlw	2
  2664  0458  0276               	subwf	___ftpack@exp,w
  2665  0459  1C03               	btfss	3,0
  2666  045A  2C62               	goto	l968
  2667  045B  03F6               	decf	___ftpack@exp,f
  2668  045C  1003               	clrc
  2669  045D  0DF3               	rlf	___ftpack@arg,f
  2670  045E  0DF4               	rlf	___ftpack@arg+1,f
  2671  045F  0DF5               	rlf	___ftpack@arg+2,f
  2672  0460                     l2720:	
  2673  0460  1FF4               	btfss	___ftpack@arg+1,7
  2674  0461  2C57               	goto	l2722
  2675  0462                     l968:	
  2676  0462  1C76               	btfss	___ftpack@exp,0
  2677  0463  13F4               	bcf	___ftpack@arg+1,7
  2678  0464  1003               	clrc
  2679  0465  0CF6               	rrf	___ftpack@exp,f
  2680  0466  0876               	movf	___ftpack@exp,w
  2681  0467  00A2               	movwf	??___ftpack+2
  2682  0468  01A1               	clrf	??___ftpack+1
  2683  0469  01A0               	clrf	??___ftpack
  2684  046A  0820               	movf	??___ftpack,w
  2685  046B  04F3               	iorwf	___ftpack@arg,f
  2686  046C  0821               	movf	??___ftpack+1,w
  2687  046D  04F4               	iorwf	___ftpack@arg+1,f
  2688  046E  0822               	movf	??___ftpack+2,w
  2689  046F  04F5               	iorwf	___ftpack@arg+2,f
  2690  0470  0877               	movf	___ftpack@sign,w
  2691  0471  1D03               	btfss	3,2
  2692  0472  17F5               	bsf	___ftpack@arg+2,7
  2693  0473  0008               	return
  2694  0474                     __end_of___ftpack:	
  2695  0474                     PL14:	
  2696  0474  1003               	clrc
  2697  0475  0CF5               	rrf	___ftpack@arg+2,f
  2698  0476  0CF4               	rrf	___ftpack@arg+1,f
  2699  0477  0CF3               	rrf	___ftpack@arg,f
  2700  0478  0008               	return
  2701  0479                     __end_ofPL14:	
  2702                           
  2703                           	psect	text16
  2704  0017                     __ptext16:	
  2705 ;; *************** function _ADC_Sample *****************
  2706 ;; Defined at:
  2707 ;;		line 853 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  adch            1    wreg     unsigned char 
  2710 ;;  adldo           1    3[COMMON] unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  adch            1    1[BANK0 ] unsigned char 
  2713 ;;  j               1    0[BANK0 ] unsigned char 
  2714 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2715 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2716 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2717 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2718 ;;  i               1    2[BANK0 ] unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      unsigned char 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0
  2723 ;; Tracked objects:
  2724 ;;		On entry : 100/0
  2725 ;;		On exit  : 100/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1
  2728 ;;      Params:         1       0       0
  2729 ;;      Locals:         0      13       0
  2730 ;;      Temps:          4       0       0
  2731 ;;      Totals:         5      13       0
  2732 ;;Total ram usage:       18 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    2
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_checkBatAD
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function _ADC_Sample
  2744  0017                     _ADC_Sample:	
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2748                           ;ADC_Sample@adch stored from wreg
  2749  0017  00A1               	movwf	ADC_Sample@adch
  2750                           
  2751                           ;main.c: 855: volatile unsigned long adsum = 0;
  2752                           
  2753                           ;main.c: 856: volatile unsigned int admin = 0, admax = 0;
  2754  0018  20EF               	fcall	PL6	;call to abstracted procedure
  2755                           
  2756                           ;main.c: 857: volatile unsigned int ad_temp = 0;
  2757  0019  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  2758  001A  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2759                           
  2760                           ;main.c: 859: if ((!LDO_EN) && (adldo & 0x04) )
  2761  001B  1683               	bsf	3,5	;RP0=1, select bank1
  2762  001C  1D16               	btfss	22,2	;volatile
  2763  001D  1D73               	btfss	ADC_Sample@adldo,2
  2764  001E  2826               	goto	l2066
  2765                           
  2766                           ;main.c: 860: {
  2767                           ;main.c: 862: ADCON1 = adldo;
  2768  001F  0873               	movf	ADC_Sample@adldo,w
  2769  0020  0096               	movwf	22	;volatile
  2770                           
  2771                           ;main.c: 863: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2772  0021  3085               	movlw	133
  2773  0022  00F4               	movwf	??_ADC_Sample
  2774  0023                     u3137:	
  2775  0023  0BF4               	decfsz	??_ADC_Sample,f
  2776  0024  2823               	goto	u3137
  2777                           
  2778                           ;main.c: 864: }
  2779  0025  2828               	goto	l2068
  2780  0026                     l2066:	
  2781                           
  2782                           ;main.c: 865: else
  2783                           ;main.c: 866: ADCON1 = adldo;
  2784  0026  0873               	movf	ADC_Sample@adldo,w
  2785  0027  0096               	movwf	22	;volatile
  2786  0028                     l2068:	
  2787                           
  2788                           ;main.c: 868: if(adch & 0x10)
  2789  0028  1283               	bcf	3,5	;RP0=0, select bank0
  2790  0029  1E21               	btfss	ADC_Sample@adch,4
  2791  002A  2830               	goto	l2076
  2792                           
  2793                           ;main.c: 869: {
  2794                           ;main.c: 870: CHS4 = 1;
  2795  002B  1683               	bsf	3,5	;RP0=1, select bank1
  2796  002C  1716               	bsf	22,6	;volatile
  2797                           
  2798                           ;main.c: 871: adch &= 0x0f;
  2799  002D  300F               	movlw	15
  2800  002E  1283               	bcf	3,5	;RP0=0, select bank0
  2801  002F  05A1               	andwf	ADC_Sample@adch,f
  2802  0030                     l2076:	
  2803                           
  2804                           ;main.c: 874: for (i = 0; i < 10; i++)
  2805  0030  01A2               	clrf	ADC_Sample@i
  2806  0031                     l2082:	
  2807                           
  2808                           ;main.c: 875: {
  2809                           ;main.c: 876: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2810  0031  0821               	movf	ADC_Sample@adch,w
  2811  0032  00F4               	movwf	??_ADC_Sample
  2812  0033  3001               	movlw	1
  2813  0034  1003               	clrc
  2814  0035                     L11:	
  2815  0035  0DF4               	rlf	??_ADC_Sample,f
  2816  0036  3EFF               	addlw	-1
  2817  0037  1003               	clrc
  2818  0038  1D03               	skipz
  2819  0039  2835               	goto	L11
  2820  003A  0D74               	rlf	??_ADC_Sample,w
  2821  003B  3841               	iorlw	65
  2822  003C  1683               	bsf	3,5	;RP0=1, select bank1
  2823  003D  0095               	movwf	21	;volatile
  2824  003E  0000               	nop	;# 
  2825  003F  0000               	nop	;# 
  2826  0040  0000               	nop	;# 
  2827  0041  0000               	nop	;# 
  2828                           
  2829                           ;main.c: 881: GODONE = 1;
  2830  0042  1683               	bsf	3,5	;RP0=1, select bank1
  2831  0043  1495               	bsf	21,1	;volatile
  2832                           
  2833                           ;main.c: 883: unsigned char j = 0;
  2834  0044  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0045  01A0               	clrf	ADC_Sample@j
  2836  0046                     l785:	
  2837                           ;main.c: 884: while (GODONE)
  2838                           
  2839  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2840  0047  1C95               	btfss	21,1	;volatile
  2841  0048  2851               	goto	l2092
  2842                           
  2843                           ;main.c: 885: {
  2844                           ;main.c: 886: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2845  0049  284A               	nop2	;2 cycle nop
  2846  004A  284B               	nop2	;2 cycle nop
  2847  004B  284C               	nop2	;2 cycle nop
  2848  004C  284D               	nop2	;2 cycle nop
  2849                           
  2850                           ;main.c: 888: if (0 == (--j))
  2851  004D  1283               	bcf	3,5	;RP0=0, select bank0
  2852  004E  0BA0               	decfsz	ADC_Sample@j,f
  2853  004F  2846               	goto	l785
  2854                           
  2855                           ;main.c: 889: return 0;
  2856  0050  3400               	retlw	0
  2857  0051                     l2092:	
  2858                           
  2859                           ;main.c: 890: }
  2860                           ;main.c: 892: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2861  0051  0819               	movf	25,w	;volatile
  2862  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0053  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  2864  0054  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2865  0055  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  2866  0056  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2867  0057  30F0               	movlw	240
  2868  0058  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2869  0059  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2870  005A  390F               	andlw	15
  2871  005B  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2872  005C  30F0               	movlw	240
  2873  005D  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  2874  005E  1683               	bsf	3,5	;RP0=1, select bank1
  2875  005F  0E18               	swapf	24,w	;volatile
  2876  0060  390F               	andlw	15
  2877  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2878  0062  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  2879  0063  1803               	skipnc
  2880  0064  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2881                           
  2882                           ;main.c: 894: if (0 == admax)
  2883  0065  0829               	movf	ADC_Sample@admax,w	;volatile
  2884  0066  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  2885  0067  1D03               	btfss	3,2
  2886  0068  286B               	goto	l2100
  2887                           
  2888                           ;main.c: 895: {
  2889                           ;main.c: 896: admax = ad_temp;
  2890  0069  20F8               	fcall	PL16	;call to abstracted procedure
  2891  006A  287D               	goto	l2106
  2892  006B                     l2100:	
  2893                           ;main.c: 898: }
  2894                           
  2895                           ;main.c: 897: admin = ad_temp;
  2896                           
  2897                           
  2898                           ;main.c: 899: else if (ad_temp > admax)
  2899  006B  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2900  006C  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  2901  006D  1D03               	skipz
  2902  006E  2871               	goto	u1565
  2903  006F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2904  0070  0229               	subwf	ADC_Sample@admax,w	;volatile
  2905  0071                     u1565:	
  2906  0071  1803               	skipnc
  2907  0072  2875               	goto	l2104
  2908                           
  2909                           ;main.c: 900: admax = ad_temp;
  2910  0073  20F8               	fcall	PL16	;call to abstracted procedure
  2911  0074  2881               	goto	l791
  2912  0075                     l2104:	
  2913                           
  2914                           ;main.c: 901: else if (ad_temp < admin)
  2915  0075  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2916  0076  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2917  0077  1D03               	skipz
  2918  0078  287B               	goto	u1575
  2919  0079  0827               	movf	ADC_Sample@admin,w	;volatile
  2920  007A  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  2921  007B                     u1575:	
  2922  007B  1803               	skipnc
  2923  007C  2881               	goto	l791
  2924  007D                     l2106:	
  2925                           
  2926                           ;main.c: 902: admin = ad_temp;
  2927  007D  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2928  007E  00A8               	movwf	ADC_Sample@admin+1	;volatile
  2929  007F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2930  0080  00A7               	movwf	ADC_Sample@admin	;volatile
  2931  0081                     l791:	
  2932                           
  2933                           ;main.c: 904: adsum += ad_temp;
  2934  0081  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2935  0082  00F4               	movwf	??_ADC_Sample
  2936  0083  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2937  0084  00F5               	movwf	??_ADC_Sample+1
  2938  0085  01F6               	clrf	??_ADC_Sample+2
  2939  0086  01F7               	clrf	??_ADC_Sample+3
  2940  0087  0874               	movf	??_ADC_Sample,w
  2941  0088  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  2942  0089  0875               	movf	??_ADC_Sample+1,w
  2943  008A  1103               	clrz
  2944  008B  1803               	skipnc
  2945  008C  3E01               	addlw	1
  2946  008D  1D03               	btfss	3,2
  2947  008E  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  2948  008F  0876               	movf	??_ADC_Sample+2,w
  2949  0090  1103               	clrz
  2950  0091  1803               	skipnc
  2951  0092  3E01               	addlw	1
  2952  0093  1D03               	btfss	3,2
  2953  0094  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  2954  0095  0877               	movf	??_ADC_Sample+3,w
  2955  0096  1103               	clrz
  2956  0097  1803               	skipnc
  2957  0098  3E01               	addlw	1
  2958  0099  1D03               	btfss	3,2
  2959  009A  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  2960  009B  300A               	movlw	10
  2961  009C  0AA2               	incf	ADC_Sample@i,f
  2962  009D  0222               	subwf	ADC_Sample@i,w
  2963  009E  1C03               	skipc
  2964  009F  2831               	goto	l2082
  2965                           
  2966                           ;main.c: 905: }
  2967                           ;main.c: 906: adsum -= admax;
  2968  00A0  0829               	movf	ADC_Sample@admax,w	;volatile
  2969  00A1  00F4               	movwf	??_ADC_Sample
  2970  00A2  082A               	movf	ADC_Sample@admax+1,w	;volatile
  2971  00A3  20E0               	fcall	PL2	;call to abstracted procedure
  2972  00A4  1C03               	skipc
  2973  00A5  0F77               	incfsz	??_ADC_Sample+3,w
  2974  00A6  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  2975                           
  2976                           ;main.c: 907: if (adsum >= admin)
  2977  00A7  0827               	movf	ADC_Sample@admin,w	;volatile
  2978  00A8  00F4               	movwf	??_ADC_Sample
  2979  00A9  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2980  00AA  00F5               	movwf	??_ADC_Sample+1
  2981  00AB  01F6               	clrf	??_ADC_Sample+2
  2982  00AC  01F7               	clrf	??_ADC_Sample+3
  2983  00AD  0877               	movf	??_ADC_Sample+3,w
  2984  00AE  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  2985  00AF  1D03               	skipz
  2986  00B0  28BB               	goto	u1615
  2987  00B1  0876               	movf	??_ADC_Sample+2,w
  2988  00B2  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  2989  00B3  1D03               	skipz
  2990  00B4  28BB               	goto	u1615
  2991  00B5  0875               	movf	??_ADC_Sample+1,w
  2992  00B6  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  2993  00B7  1D03               	skipz
  2994  00B8  28BB               	goto	u1615
  2995  00B9  0874               	movf	??_ADC_Sample,w
  2996  00BA  0223               	subwf	ADC_Sample@adsum,w	;volatile
  2997  00BB                     u1615:	
  2998  00BB  1C03               	skipc
  2999  00BC  28C5               	goto	l795
  3000                           
  3001                           ;main.c: 908: adsum -= admin;
  3002  00BD  0827               	movf	ADC_Sample@admin,w	;volatile
  3003  00BE  00F4               	movwf	??_ADC_Sample
  3004  00BF  0828               	movf	ADC_Sample@admin+1,w	;volatile
  3005  00C0  20E0               	fcall	PL2	;call to abstracted procedure
  3006  00C1  1C03               	skipc
  3007  00C2  0F77               	incfsz	??_ADC_Sample+3,w
  3008  00C3  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3009  00C4  28C9               	goto	l2116
  3010  00C5                     l795:	
  3011                           
  3012                           ;main.c: 909: else
  3013                           ;main.c: 910: adsum = 0;
  3014  00C5  01A3               	clrf	ADC_Sample@adsum	;volatile
  3015  00C6  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3016  00C7  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3017  00C8  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3018  00C9                     l2116:	
  3019                           
  3020                           ;main.c: 912: adresult = adsum >> 3;
  3021  00C9  0823               	movf	ADC_Sample@adsum,w	;volatile
  3022  00CA  00F4               	movwf	??_ADC_Sample
  3023  00CB  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  3024  00CC  00F5               	movwf	??_ADC_Sample+1
  3025  00CD  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  3026  00CE  00F6               	movwf	??_ADC_Sample+2
  3027  00CF  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  3028  00D0  00F7               	movwf	??_ADC_Sample+3
  3029  00D1  3003               	movlw	3
  3030  00D2                     u1635:	
  3031  00D2  1003               	clrc
  3032  00D3  0CF7               	rrf	??_ADC_Sample+3,f
  3033  00D4  0CF6               	rrf	??_ADC_Sample+2,f
  3034  00D5  0CF5               	rrf	??_ADC_Sample+1,f
  3035  00D6  0CF4               	rrf	??_ADC_Sample,f
  3036  00D7  3EFF               	addlw	-1
  3037  00D8  1D03               	skipz
  3038  00D9  28D2               	goto	u1635
  3039  00DA  0875               	movf	??_ADC_Sample+1,w
  3040  00DB  00E1               	movwf	_adresult+1	;volatile
  3041  00DC  0874               	movf	??_ADC_Sample,w
  3042  00DD  00E0               	movwf	_adresult	;volatile
  3043                           
  3044                           ;main.c: 914: adsum = 0;
  3045                           
  3046                           ;main.c: 915: admin = 0;
  3047                           
  3048                           ;main.c: 916: admax = 0;
  3049  00DE  20EF               	fcall	PL6	;call to abstracted procedure
  3050                           
  3051                           ;main.c: 917: return 0xA5;
  3052  00DF  34A5               	retlw	165
  3053  00E0                     __end_of_ADC_Sample:	
  3054  00E0                     PL2:	
  3055  00E0  00F5               	movwf	??_ADC_Sample+1
  3056  00E1  01F6               	clrf	??_ADC_Sample+2
  3057  00E2  01F7               	clrf	??_ADC_Sample+3
  3058  00E3  0874               	movf	??_ADC_Sample,w
  3059  00E4  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  3060  00E5  0875               	movf	??_ADC_Sample+1,w
  3061  00E6  1C03               	skipc
  3062  00E7  0F75               	incfsz	??_ADC_Sample+1,w
  3063  00E8  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  3064  00E9  0876               	movf	??_ADC_Sample+2,w
  3065  00EA  1C03               	skipc
  3066  00EB  0F76               	incfsz	??_ADC_Sample+2,w
  3067  00EC  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  3068  00ED  0877               	movf	??_ADC_Sample+3,w
  3069  00EE  0008               	return
  3070  00EF                     __end_ofPL2:	
  3071  00EF                     PL6:	
  3072  00EF  01A3               	clrf	ADC_Sample@adsum	;volatile
  3073  00F0  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3074  00F1  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3075  00F2  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3076  00F3  01A7               	clrf	ADC_Sample@admin	;volatile
  3077  00F4  01A8               	clrf	ADC_Sample@admin+1	;volatile
  3078  00F5  01A9               	clrf	ADC_Sample@admax	;volatile
  3079  00F6  01AA               	clrf	ADC_Sample@admax+1	;volatile
  3080  00F7  0008               	return
  3081  00F8                     __end_ofPL6:	
  3082  00F8                     PL16:	
  3083  00F8  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3084  00F9  00AA               	movwf	ADC_Sample@admax+1	;volatile
  3085  00FA  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  3086  00FB  00A9               	movwf	ADC_Sample@admax	;volatile
  3087  00FC  0008               	return
  3088  00FD                     __end_ofPL16:	
  3089                           
  3090                           	psect	text17
  3091  03B3                     __ptext17:	
  3092 ;; *************** function _Sleep_Mode *****************
  3093 ;; Defined at:
  3094 ;;		line 776 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, pclath, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 100/0
  3105 ;;		On exit  : 100/100
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMMON   BANK0   BANK1
  3108 ;;      Params:         0       0       0
  3109 ;;      Locals:         0       0       0
  3110 ;;      Temps:          0       0       0
  3111 ;;      Totals:         0       0       0
  3112 ;;Total ram usage:        0 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    3
  3115 ;; This function calls:
  3116 ;;		_AD_Init
  3117 ;;		_Init_System
  3118 ;; This function is called by:
  3119 ;;		_main
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           
  3124                           ;psect for function _Sleep_Mode
  3125  03B3                     _Sleep_Mode:	
  3126                           
  3127                           ;main.c: 778: INTCON = 0;
  3128                           
  3129                           ;incstack = 0
  3130                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3131  03B3  018B               	clrf	11	;volatile
  3132                           
  3133                           ;main.c: 780: OPTION_REG = 0;
  3134  03B4  0181               	clrf	1	;volatile
  3135                           
  3136                           ;main.c: 782: WPUA = 0x01;
  3137  03B5  3001               	movlw	1
  3138  03B6  1683               	bsf	3,5	;RP0=1, select bank1
  3139  03B7  0088               	movwf	8	;volatile
  3140                           
  3141                           ;main.c: 783: TRISA = 0x01;
  3142                           
  3143                           ;main.c: 784: TRISB = 0x24;
  3144                           
  3145                           ;main.c: 786: PORTA = 0X00;
  3146                           
  3147                           ;main.c: 787: PORTB = 0X03;
  3148  03B8  23EC               	fcall	PL4	;call to abstracted procedure
  3149                           
  3150                           ;main.c: 788: WPUB = 0x20;
  3151  03B9  3020               	movlw	32
  3152  03BA  0088               	movwf	8	;volatile
  3153                           
  3154                           ;main.c: 790: ADCON0 = 0;
  3155  03BB  1683               	bsf	3,5	;RP0=1, select bank1
  3156  03BC  0195               	clrf	21	;volatile
  3157                           
  3158                           ;main.c: 791: ADCON1 = 0;
  3159  03BD  0196               	clrf	22	;volatile
  3160                           
  3161                           ;main.c: 793: PWMCON0 = 0;
  3162  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3163  03BF  0195               	clrf	21	;volatile
  3164                           
  3165                           ;main.c: 795: OSCCON = 0X70;
  3166  03C0  3070               	movlw	112
  3167  03C1  0094               	movwf	20	;volatile
  3168                           
  3169                           ;main.c: 797: IOCA = 0B00000000;
  3170  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  3171  03C3  0189               	clrf	9	;volatile
  3172                           
  3173                           ;main.c: 798: IOCB = 0B00100100;
  3174  03C4  3024               	movlw	36
  3175  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  3176  03C6  0089               	movwf	9	;volatile
  3177                           
  3178                           ;main.c: 800: RAIE = 1;
  3179  03C7  158E               	bsf	14,3	;volatile
  3180                           
  3181                           ;main.c: 801: PEIE = 1;
  3182  03C8  170B               	bsf	11,6	;volatile
  3183                           
  3184                           ;main.c: 802: RBIE = 1;
  3185  03C9  158B               	bsf	11,3	;volatile
  3186                           
  3187                           ;main.c: 803: GIE = 0;
  3188  03CA  138B               	bcf	11,7	;volatile
  3189                           
  3190                           ;main.c: 805: PIE1 &= 0X08;
  3191  03CB  3008               	movlw	8
  3192  03CC  058E               	andwf	14,f	;volatile
  3193                           
  3194                           ;main.c: 806: PIR1 = 0;
  3195  03CD  018D               	clrf	13	;volatile
  3196                           
  3197                           ;main.c: 807: INTCON &= 0XC8;
  3198  03CE  30C8               	movlw	200
  3199  03CF  058B               	andwf	11,f	;volatile
  3200                           
  3201                           ;main.c: 809: PORTA;
  3202  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  3203  03D1  0806               	movf	6,w	;volatile
  3204                           
  3205                           ;main.c: 810: RAIF = 0;
  3206  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  3207  03D3  118D               	bcf	13,3	;volatile
  3208                           
  3209                           ;main.c: 811: PORTB;
  3210  03D4  0806               	movf	6,w	;volatile
  3211                           
  3212                           ;main.c: 812: RBIF = 0;
  3213  03D5  100B               	bcf	11,0	;volatile
  3214  03D6  0064               	clrwdt	;# 
  3215  03D7  0063               	sleep	;# 
  3216  03D8  0000               	nop	;# 
  3217  03D9  0064               	clrwdt	;# 
  3218  03DA  0000               	nop	;# 
  3219  03DB  0000               	nop	;# 
  3220  03DC  0000               	nop	;# 
  3221  03DD  0000               	nop	;# 
  3222  03DE  0000               	nop	;# 
  3223                           
  3224                           ;main.c: 824: if(RAIF) RAIF = 0;
  3225  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  3226  03E0  198D               	btfsc	13,3	;volatile
  3227  03E1  118D               	bcf	13,3	;volatile
  3228                           
  3229                           ;main.c: 825: if(RBIF) RBIF = 0;
  3230  03E2  180B               	btfsc	11,0	;volatile
  3231  03E3  100B               	bcf	11,0	;volatile
  3232                           
  3233                           ;main.c: 826: if(TMR2IF) TMR2IF = 0;
  3234  03E4  188D               	btfsc	13,1	;volatile
  3235  03E5  108D               	bcf	13,1	;volatile
  3236                           
  3237                           ;main.c: 827: IOCA = 0B00000000;
  3238  03E6  1683               	bsf	3,5	;RP0=1, select bank1
  3239  03E7  0189               	clrf	9	;volatile
  3240                           
  3241                           ;main.c: 828: IOCB = 0B00000000;
  3242  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3243  03E9  0189               	clrf	9	;volatile
  3244                           
  3245                           ;main.c: 829: Init_System();
  3246  03EA  259A               	fcall	_Init_System
  3247                           
  3248                           ;main.c: 830: AD_Init();
  3249  03EB  2E0A               	ljmp	l1986
  3250  03EC                     __end_of_Sleep_Mode:	
  3251  03EC                     PL4:	
  3252  03EC  0085               	movwf	5	;volatile
  3253  03ED  3024               	movlw	36
  3254  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  3255  03EF  0085               	movwf	5	;volatile
  3256  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  3257  03F1  0186               	clrf	6	;volatile
  3258  03F2  3003               	movlw	3
  3259  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  3260  03F4  0086               	movwf	6	;volatile
  3261  03F5  0008               	return
  3262  03F6                     __end_ofPL4:	
  3263                           
  3264                           	psect	text18
  3265  059A                     __ptext18:	
  3266 ;; *************** function _Init_System *****************
  3267 ;; Defined at:
  3268 ;;		line 649 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;		None
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2
  3277 ;; Tracked objects:
  3278 ;;		On entry : 100/0
  3279 ;;		On exit  : 100/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1
  3282 ;;      Params:         0       0       0
  3283 ;;      Locals:         0       0       0
  3284 ;;      Temps:          0       0       0
  3285 ;;      Totals:         0       0       0
  3286 ;;Total ram usage:        0 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    2
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;;		_Sleep_Mode
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           
  3298                           ;psect for function _Init_System
  3299  059A                     _Init_System:	
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in _Init_System: [wreg+status,2]
  3303  059A  0000               	nop	;# 
  3304  059B  0064               	clrwdt	;# 
  3305                           
  3306                           ;main.c: 653: OPTION_REG = 0;
  3307  059C  1283               	bcf	3,5	;RP0=0, select bank0
  3308  059D  0181               	clrf	1	;volatile
  3309  059E  0064               	clrwdt	;# 
  3310                           
  3311                           ;main.c: 655: OSCCON = 0X72;
  3312  059F  3072               	movlw	114
  3313  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3314  05A1  0094               	movwf	20	;volatile
  3315                           
  3316                           ;main.c: 657: WPUA = 0x01;
  3317  05A2  3001               	movlw	1
  3318  05A3  1683               	bsf	3,5	;RP0=1, select bank1
  3319  05A4  0088               	movwf	8	;volatile
  3320                           
  3321                           ;main.c: 658: WPDA = 0x00;
  3322  05A5  0187               	clrf	7	;volatile
  3323                           
  3324                           ;main.c: 659: WPUB = 0x20;
  3325  05A6  3020               	movlw	32
  3326  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  3327  05A8  0088               	movwf	8	;volatile
  3328                           
  3329                           ;main.c: 661: TRISA = 0x01;
  3330  05A9  3001               	movlw	1
  3331  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  3332                           
  3333                           ;main.c: 662: TRISB = 0x24;
  3334                           
  3335                           ;main.c: 664: PORTA = 0X00;
  3336                           
  3337                           ;main.c: 665: PORTB = 0X03;
  3338  05AB  23EC               	fcall	PL4	;call to abstracted procedure
  3339                           
  3340                           ;main.c: 669: PR2 = 249;
  3341  05AC  30F9               	movlw	249
  3342  05AD  0091               	movwf	17	;volatile
  3343                           
  3344                           ;main.c: 670: TMR2IF = 0;
  3345  05AE  108D               	bcf	13,1	;volatile
  3346                           
  3347                           ;main.c: 671: TMR2IE = 1;
  3348  05AF  148E               	bsf	14,1	;volatile
  3349                           
  3350                           ;main.c: 673: T2CON = 0B00000100;
  3351  05B0  3004               	movlw	4
  3352  05B1  0093               	movwf	19	;volatile
  3353                           
  3354                           ;main.c: 674: INTCON = 0XC0;
  3355  05B2  30C0               	movlw	192
  3356  05B3  008B               	movwf	11	;volatile
  3357  05B4  0008               	return
  3358  05B5                     __end_of_Init_System:	
  3359                           
  3360                           	psect	text19
  3361  060A                     __ptext19:	
  3362 ;; *************** function _AD_Init *****************
  3363 ;; Defined at:
  3364 ;;		line 686 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2
  3373 ;; Tracked objects:
  3374 ;;		On entry : 100/0
  3375 ;;		On exit  : 100/100
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMMON   BANK0   BANK1
  3378 ;;      Params:         0       0       0
  3379 ;;      Locals:         0       0       0
  3380 ;;      Temps:          0       0       0
  3381 ;;      Totals:         0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    2
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;;		_Sleep_Mode
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _AD_Init
  3395  060A                     _AD_Init:	
  3396  060A                     l1986:	
  3397                           ;incstack = 0
  3398                           ; Regs used in _AD_Init: [wreg+status,2]
  3399                           
  3400                           
  3401                           ;main.c: 719: ADCON0 = 0X41;
  3402  060A  3041               	movlw	65
  3403  060B  1683               	bsf	3,5	;RP0=1, select bank1
  3404  060C  0095               	movwf	21	;volatile
  3405                           
  3406                           ;main.c: 736: ADCON1 = 0;
  3407  060D  0196               	clrf	22	;volatile
  3408                           
  3409                           ;main.c: 737: ANSEL0 = 0X00;
  3410  060E  0193               	clrf	19	;volatile
  3411                           
  3412                           ;main.c: 738: ANSEL1 = 0x00;
  3413  060F  0194               	clrf	20	;volatile
  3414  0610  0008               	return
  3415  0611                     __end_of_AD_Init:	
  3416                           
  3417                           	psect	text20
  3418  0546                     __ptext20:	
  3419 ;; *************** function _Isr_Timer *****************
  3420 ;; Defined at:
  3421 ;;		line 94 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 100/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1
  3435 ;;      Params:         0       0       0
  3436 ;;      Locals:         0       0       0
  3437 ;;      Temps:          3       0       0
  3438 ;;      Totals:         3       0       0
  3439 ;;Total ram usage:        3 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    1
  3442 ;; This function calls:
  3443 ;;		_ledShow
  3444 ;; This function is called by:
  3445 ;;		Interrupt level 1
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _Isr_Timer
  3451  0546                     _Isr_Timer:	
  3452                           
  3453                           ;main.c: 96: if(TMR2IF)
  3454  0546  1283               	bcf	3,5	;RP0=0, select bank0
  3455  0547  1C8D               	btfss	13,1	;volatile
  3456  0548  2D5A               	goto	i1l614
  3457                           
  3458                           ;main.c: 97: {
  3459                           ;main.c: 98: TMR2IF = 0;
  3460  0549  108D               	bcf	13,1	;volatile
  3461                           
  3462                           ;main.c: 99: if(++intCount >= 160)
  3463  054A  30A0               	movlw	160
  3464  054B  0ADE               	incf	_intCount,f
  3465  054C  025E               	subwf	_intCount,w
  3466  054D  1C03               	skipc
  3467  054E  2D57               	goto	i1l2628
  3468  054F  3064               	movlw	100
  3469                           
  3470                           ;main.c: 100: {
  3471                           ;main.c: 101: intCount = 0;
  3472  0550  01DE               	clrf	_intCount
  3473                           
  3474                           ;main.c: 102: IntFlag = 1;
  3475  0551  01DC               	clrf	_IntFlag
  3476  0552  0ADC               	incf	_IntFlag,f
  3477                           
  3478                           ;main.c: 103: if(++count1s >= 100)
  3479  0553  0ADD               	incf	_count1s,f
  3480  0554  025D               	subwf	_count1s,w
  3481  0555  1803               	btfsc	3,0
  3482                           
  3483                           ;main.c: 104: {
  3484                           ;main.c: 105: count1s = 0;
  3485  0556  01DD               	clrf	_count1s
  3486  0557                     i1l2628:	
  3487                           
  3488                           ;main.c: 106: }
  3489                           ;main.c: 107: }
  3490                           ;main.c: 108: ledShow();
  3491  0557  21BE               	fcall	_ledShow
  3492                           
  3493                           ;main.c: 109: intCount10++;
  3494  0558  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0559  0ADB               	incf	_intCount10,f
  3496  055A                     i1l614:	
  3497  055A  0872               	movf	??_Isr_Timer+2,w
  3498  055B  008A               	movwf	10
  3499  055C  0871               	movf	??_Isr_Timer+1,w
  3500  055D  0084               	movwf	4
  3501  055E  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3502  055F  0083               	movwf	3
  3503  0560  0EFE               	swapf	126,f
  3504  0561  0E7E               	swapf	126,w
  3505  0562  0009               	retfie
  3506  0563                     __end_of_Isr_Timer:	
  3507                           
  3508                           	psect	intentry
  3509  0004                     __pintentry:	
  3510                           ;incstack = 0
  3511                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3512                           
  3513  0004                     interrupt_function:	
  3514  007E                     saved_w	set	btemp
  3515  0004  00FE               	movwf	btemp
  3516  0005  0E03               	swapf	3,w
  3517  0006  00F0               	movwf	??_Isr_Timer
  3518  0007  0804               	movf	4,w
  3519  0008  00F1               	movwf	??_Isr_Timer+1
  3520  0009  080A               	movf	10,w
  3521  000A  00F2               	movwf	??_Isr_Timer+2
  3522  000B  2D46               	ljmp	_Isr_Timer
  3523                           
  3524                           	psect	text21
  3525  01BE                     __ptext21:	
  3526 ;; *************** function _ledShow *****************
  3527 ;; Defined at:
  3528 ;;		line 160 in file "C:\mcuproject\scm\zdt\D30_062B_SOP14\main.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3537 ;; Tracked objects:
  3538 ;;		On entry : 100/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMMON   BANK0   BANK1
  3542 ;;      Params:         0       0       0
  3543 ;;      Locals:         0       0       0
  3544 ;;      Temps:          0       0       0
  3545 ;;      Totals:         0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used:    1
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_Isr_Timer
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _ledShow
  3557  01BE                     _ledShow:	
  3558                           
  3559                           ;main.c: 162: if(++ledCntTime > 5)
  3560                           
  3561                           ;incstack = 0
  3562                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3563  01BE  3006               	movlw	6
  3564  01BF  0AD6               	incf	_ledCntTime,f
  3565  01C0  0256               	subwf	_ledCntTime,w
  3566  01C1  1C03               	skipc
  3567  01C2  0008               	return
  3568  01C3  3010               	movlw	16
  3569                           
  3570                           ;main.c: 163: {
  3571                           ;main.c: 164: ledCntTime = 0;
  3572  01C4  01D6               	clrf	_ledCntTime
  3573                           
  3574                           ;main.c: 165: if(++ledCnt > 15)
  3575  01C5  0ADA               	incf	_ledCnt,f
  3576  01C6  025A               	subwf	_ledCnt,w
  3577  01C7  1803               	btfsc	3,0
  3578                           
  3579                           ;main.c: 166: {
  3580                           ;main.c: 167: ledCnt = 0;
  3581  01C8  01DA               	clrf	_ledCnt
  3582                           
  3583                           ;main.c: 168: }
  3584                           ;main.c: 169: PORTA &= 0xC7;
  3585  01C9  30C7               	movlw	199
  3586  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  3587  01CB  0586               	andwf	6,f	;volatile
  3588                           
  3589                           ;main.c: 170: PORTB &= 0xE7;
  3590  01CC  30E7               	movlw	231
  3591  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  3592  01CE  0586               	andwf	6,f	;volatile
  3593                           
  3594                           ;main.c: 171: TRISA |= 0x38;
  3595  01CF  3038               	movlw	56
  3596  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  3597  01D1  0485               	iorwf	5,f	;volatile
  3598                           
  3599                           ;main.c: 172: TRISB |= 0x18;
  3600  01D2  3018               	movlw	24
  3601  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3602  01D4  0485               	iorwf	5,f	;volatile
  3603                           
  3604                           ;main.c: 173: switch(ledCnt)
  3605  01D5  085A               	movf	_ledCnt,w
  3606                           
  3607                           ; Switch size 1, requested type "space"
  3608                           ; Number of cases is 16, Range of values is 0 to 15
  3609                           ; switch strategies available:
  3610                           ; Name         Instructions Cycles
  3611                           ; direct_byte           22     6 (fixed)
  3612                           ; simple_byte           49    25 (average)
  3613                           ; jumptable            260     6 (fixed)
  3614                           ;	Chosen strategy is direct_byte
  3615  01D6  0084               	movwf	4
  3616  01D7  3010               	movlw	16
  3617  01D8  0204               	subwf	4,w
  3618  01D9  1803               	skipnc
  3619  01DA  0008               	return
  3620  01DB  3005               	movlw	high i1S2940
  3621  01DC  008A               	movwf	10
  3622  01DD  30EA               	movlw	low i1S2940
  3623  01DE  0704               	addwf	4,w
  3624  01DF  0082               	movwf	2
  3625  01E0  0008               	return
  3626  01E1                     i1l634:	
  3627                           ;main.c: 174: {
  3628                           ;main.c: 175: case 1:
  3629                           
  3630                           
  3631                           ;main.c: 176: if(shiweiNum & 0x01)
  3632  01E1  1C64               	btfss	_shiweiNum,0
  3633  01E2  0008               	return
  3634                           
  3635                           ;main.c: 177: {
  3636                           ;main.c: 178: TRISA &= 0xF7;
  3637  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  3638  01E4  1185               	bcf	5,3	;volatile
  3639                           
  3640                           ;main.c: 179: TRISB &= 0xEF;
  3641  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3642  01E6  1205               	bcf	5,4	;volatile
  3643                           
  3644                           ;main.c: 180: RB4 = 1;
  3645  01E7  1606               	bsf	6,4	;volatile
  3646                           
  3647                           ;main.c: 181: RA3 = 0;
  3648  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  3649  01E9  1186               	bcf	6,3	;volatile
  3650  01EA  0008               	return
  3651  01EB                     i1l637:	
  3652                           ;main.c: 184: case 2:
  3653                           
  3654                           
  3655                           ;main.c: 185: if(shiweiNum & 0x02)
  3656  01EB  1CE4               	btfss	_shiweiNum,1
  3657  01EC  0008               	return
  3658                           
  3659                           ;main.c: 186: {
  3660                           ;main.c: 187: TRISA &= 0xF7;
  3661  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  3662  01EE  1185               	bcf	5,3	;volatile
  3663                           
  3664                           ;main.c: 188: TRISB &= 0xEF;
  3665  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3666  01F0  1205               	bcf	5,4	;volatile
  3667                           
  3668                           ;main.c: 189: RA3 = 1;
  3669  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  3670  01F2  1586               	bsf	6,3	;volatile
  3671                           
  3672                           ;main.c: 190: RB4 = 0;
  3673  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3674  01F4  1206               	bcf	6,4	;volatile
  3675  01F5  0008               	return
  3676  01F6                     i1l639:	
  3677                           ;main.c: 193: case 3:
  3678                           
  3679                           
  3680                           ;main.c: 194: if(shiweiNum & 0x04)
  3681  01F6  1D64               	btfss	_shiweiNum,2
  3682  01F7  0008               	return
  3683                           
  3684                           ;main.c: 195: {
  3685                           ;main.c: 196: TRISA &= 0xF7;
  3686  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  3687                           
  3688                           ;main.c: 197: TRISA &= 0xEF;
  3689                           
  3690                           ;main.c: 198: RA4 = 1;
  3691                           
  3692                           ;main.c: 199: RA3 = 0;
  3693  01F9  2A66               	ljmp	PL12	;call to abstracted procedure
  3694  01FA                     i1l641:	
  3695                           ;main.c: 202: case 4:
  3696                           
  3697                           
  3698                           ;main.c: 203: if(shiweiNum & 0x08)
  3699  01FA  1DE4               	btfss	_shiweiNum,3
  3700  01FB  0008               	return
  3701                           
  3702                           ;main.c: 204: {
  3703                           ;main.c: 205: TRISB &= 0xEF;
  3704  01FC  1205               	bcf	5,4	;volatile
  3705                           
  3706                           ;main.c: 206: TRISA &= 0xEF;
  3707  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  3708  01FE  1205               	bcf	5,4	;volatile
  3709                           
  3710                           ;main.c: 207: RA4 = 1;
  3711  01FF  1606               	bsf	6,4	;volatile
  3712                           
  3713                           ;main.c: 208: RB4 = 0;
  3714  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3715  0201  1206               	bcf	6,4	;volatile
  3716  0202  0008               	return
  3717  0203                     i1l643:	
  3718                           ;main.c: 211: case 5:
  3719                           
  3720                           
  3721                           ;main.c: 212: if(shiweiNum & 0x10)
  3722  0203  1E64               	btfss	_shiweiNum,4
  3723  0204  0008               	return
  3724                           
  3725                           ;main.c: 213: {
  3726                           ;main.c: 214: TRISB &= 0xEF;
  3727  0205  1205               	bcf	5,4	;volatile
  3728                           
  3729                           ;main.c: 215: TRISA &= 0xDF;
  3730  0206  1683               	bsf	3,5	;RP0=1, select bank1
  3731  0207  1285               	bcf	5,5	;volatile
  3732                           
  3733                           ;main.c: 216: RA5 = 1;
  3734  0208  1686               	bsf	6,5	;volatile
  3735                           
  3736                           ;main.c: 217: RB4 = 0;
  3737  0209  1283               	bcf	3,5	;RP0=0, select bank0
  3738  020A  1206               	bcf	6,4	;volatile
  3739  020B  0008               	return
  3740  020C                     i1l645:	
  3741                           ;main.c: 220: case 6:
  3742                           
  3743                           
  3744                           ;main.c: 221: if(shiweiNum & 0x20)
  3745  020C  1EE4               	btfss	_shiweiNum,5
  3746  020D  0008               	return
  3747                           
  3748                           ;main.c: 222: {
  3749                           ;main.c: 223: TRISA &= 0xF7;
  3750  020E  1683               	bsf	3,5	;RP0=1, select bank1
  3751  020F  1185               	bcf	5,3	;volatile
  3752                           
  3753                           ;main.c: 224: TRISA &= 0xDF;
  3754  0210  1285               	bcf	5,5	;volatile
  3755                           
  3756                           ;main.c: 225: RA5 = 1;
  3757  0211  1686               	bsf	6,5	;volatile
  3758                           
  3759                           ;main.c: 226: RA3 = 0;
  3760  0212  1186               	bcf	6,3	;volatile
  3761  0213  0008               	return
  3762  0214                     i1l647:	
  3763                           ;main.c: 229: case 7:
  3764                           
  3765                           
  3766                           ;main.c: 230: if(shiweiNum & 0x40)
  3767  0214  1F64               	btfss	_shiweiNum,6
  3768  0215  0008               	return
  3769                           
  3770                           ;main.c: 231: {
  3771                           ;main.c: 232: TRISA &= 0xEF;
  3772  0216  1683               	bsf	3,5	;RP0=1, select bank1
  3773  0217  1205               	bcf	5,4	;volatile
  3774                           
  3775                           ;main.c: 233: TRISA &= 0xDF;
  3776  0218  1285               	bcf	5,5	;volatile
  3777                           
  3778                           ;main.c: 234: RA5 = 1;
  3779  0219  1686               	bsf	6,5	;volatile
  3780                           
  3781                           ;main.c: 235: RA4 = 0;
  3782  021A  1206               	bcf	6,4	;volatile
  3783  021B  0008               	return
  3784  021C                     i1l649:	
  3785                           ;main.c: 238: case 8:
  3786                           
  3787                           
  3788                           ;main.c: 239: if(geweiNum & 0x01)
  3789  021C  1C63               	btfss	_geweiNum,0
  3790  021D  0008               	return
  3791                           
  3792                           ;main.c: 240: {
  3793                           ;main.c: 241: TRISB &= 0xF7;
  3794                           
  3795                           ;main.c: 242: TRISB &= 0xEF;
  3796                           
  3797                           ;main.c: 243: RB3 = 1;
  3798                           
  3799                           ;main.c: 244: RB4 = 0;
  3800  021E  2A61               	ljmp	PL10	;call to abstracted procedure
  3801  021F                     i1l651:	
  3802                           ;main.c: 247: case 9:
  3803                           
  3804                           
  3805                           ;main.c: 248: if(geweiNum & 0x02)
  3806  021F  1CE3               	btfss	_geweiNum,1
  3807  0220  0008               	return
  3808                           
  3809                           ;main.c: 249: {
  3810                           ;main.c: 250: TRISB &= 0xF7;
  3811                           
  3812                           ;main.c: 251: TRISB &= 0xEF;
  3813                           
  3814                           ;main.c: 252: RB4 = 1;
  3815                           
  3816                           ;main.c: 253: RB3 = 0;
  3817  0221  2A66               	ljmp	PL12	;call to abstracted procedure
  3818  0222                     i1l653:	
  3819                           ;main.c: 256: case 10:
  3820                           
  3821                           
  3822                           ;main.c: 257: if(geweiNum & 0x04)
  3823  0222  1D63               	btfss	_geweiNum,2
  3824  0223  0008               	return
  3825                           
  3826                           ;main.c: 258: {
  3827                           ;main.c: 259: TRISB &= 0xF7;
  3828  0224  1185               	bcf	5,3	;volatile
  3829                           
  3830                           ;main.c: 260: TRISA &= 0xF7;
  3831  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3832  0226  1185               	bcf	5,3	;volatile
  3833                           
  3834                           ;main.c: 261: RB3 = 1;
  3835  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0228  1586               	bsf	6,3	;volatile
  3837                           
  3838                           ;main.c: 262: RA3 = 0;
  3839  0229  1683               	bsf	3,5	;RP0=1, select bank1
  3840  022A  1186               	bcf	6,3	;volatile
  3841  022B  0008               	return
  3842  022C                     i1l655:	
  3843                           ;main.c: 265: case 11:
  3844                           
  3845                           
  3846                           ;main.c: 266: if(geweiNum & 0x08)
  3847  022C  1DE3               	btfss	_geweiNum,3
  3848  022D  0008               	return
  3849                           
  3850                           ;main.c: 267: {
  3851                           ;main.c: 268: TRISB &= 0xF7;
  3852  022E  1185               	bcf	5,3	;volatile
  3853                           
  3854                           ;main.c: 269: TRISA &= 0xF7;
  3855  022F  1683               	bsf	3,5	;RP0=1, select bank1
  3856  0230  1185               	bcf	5,3	;volatile
  3857                           
  3858                           ;main.c: 270: RA3 = 1;
  3859  0231  1586               	bsf	6,3	;volatile
  3860                           
  3861                           ;main.c: 271: RB3 = 0;
  3862  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3863  0233  1186               	bcf	6,3	;volatile
  3864  0234  0008               	return
  3865  0235                     i1l657:	
  3866                           ;main.c: 274: case 12:
  3867                           
  3868                           
  3869                           ;main.c: 275: if(geweiNum & 0x10)
  3870  0235  1E63               	btfss	_geweiNum,4
  3871  0236  0008               	return
  3872                           
  3873                           ;main.c: 276: {
  3874                           ;main.c: 277: TRISB &= 0xF7;
  3875  0237  1185               	bcf	5,3	;volatile
  3876                           
  3877                           ;main.c: 278: TRISA &= 0xEF;
  3878  0238  1683               	bsf	3,5	;RP0=1, select bank1
  3879  0239  1205               	bcf	5,4	;volatile
  3880                           
  3881                           ;main.c: 279: RB3 = 1;
  3882  023A  1283               	bcf	3,5	;RP0=0, select bank0
  3883  023B  1586               	bsf	6,3	;volatile
  3884                           
  3885                           ;main.c: 280: RA4 = 0;
  3886  023C  1683               	bsf	3,5	;RP0=1, select bank1
  3887  023D  1206               	bcf	6,4	;volatile
  3888  023E  0008               	return
  3889  023F                     i1l659:	
  3890                           ;main.c: 283: case 13:
  3891                           
  3892                           
  3893                           ;main.c: 284: if(geweiNum & 0x20)
  3894  023F  1EE3               	btfss	_geweiNum,5
  3895  0240  0008               	return
  3896                           
  3897                           ;main.c: 285: {
  3898                           ;main.c: 286: TRISB &= 0xF7;
  3899  0241  1185               	bcf	5,3	;volatile
  3900                           
  3901                           ;main.c: 287: TRISA &= 0xEF;
  3902  0242  1683               	bsf	3,5	;RP0=1, select bank1
  3903  0243  1205               	bcf	5,4	;volatile
  3904                           
  3905                           ;main.c: 288: RA4 = 1;
  3906  0244  1606               	bsf	6,4	;volatile
  3907                           
  3908                           ;main.c: 289: RB3 = 0;
  3909  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3910  0246  1186               	bcf	6,3	;volatile
  3911  0247  0008               	return
  3912  0248                     i1l661:	
  3913                           ;main.c: 292: case 14:
  3914                           
  3915                           
  3916                           ;main.c: 293: if(geweiNum & 0x40)
  3917  0248  1F63               	btfss	_geweiNum,6
  3918  0249  0008               	return
  3919                           
  3920                           ;main.c: 294: {
  3921                           ;main.c: 295: TRISB &= 0xF7;
  3922  024A  1185               	bcf	5,3	;volatile
  3923                           
  3924                           ;main.c: 296: TRISA &= 0xDF;
  3925  024B  1683               	bsf	3,5	;RP0=1, select bank1
  3926  024C  1285               	bcf	5,5	;volatile
  3927                           
  3928                           ;main.c: 297: RA5 = 1;
  3929  024D  1686               	bsf	6,5	;volatile
  3930                           
  3931                           ;main.c: 298: RB3 = 0;
  3932  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3933  024F  1186               	bcf	6,3	;volatile
  3934  0250  0008               	return
  3935  0251                     i1l2324:	
  3936                           
  3937                           ;main.c: 302: if(baiweiNum > 0)
  3938  0251  0862               	movf	_baiweiNum,w
  3939  0252  1903               	btfsc	3,2
  3940  0253  0008               	return
  3941                           
  3942                           ;main.c: 303: {
  3943                           ;main.c: 304: TRISB &= 0xEF;
  3944  0254  1205               	bcf	5,4	;volatile
  3945                           
  3946                           ;main.c: 305: TRISA &= 0xEF;
  3947  0255  1683               	bsf	3,5	;RP0=1, select bank1
  3948  0256  1205               	bcf	5,4	;volatile
  3949                           
  3950                           ;main.c: 306: RB4 = 1;
  3951  0257  1283               	bcf	3,5	;RP0=0, select bank0
  3952  0258  1606               	bsf	6,4	;volatile
  3953                           
  3954                           ;main.c: 307: RA4 = 0;
  3955  0259  1683               	bsf	3,5	;RP0=1, select bank1
  3956  025A  1206               	bcf	6,4	;volatile
  3957  025B  0008               	return
  3958  025C                     i1l2328:	
  3959                           
  3960                           ;main.c: 311: if(baiweiNum > 0)
  3961  025C  0862               	movf	_baiweiNum,w
  3962  025D  1903               	btfsc	3,2
  3963  025E  0008               	return
  3964                           
  3965                           ;main.c: 312: {
  3966                           ;main.c: 313: TRISA &= 0xF7;
  3967  025F  1683               	bsf	3,5	;RP0=1, select bank1
  3968                           
  3969                           ;main.c: 314: TRISA &= 0xEF;
  3970                           
  3971                           ;main.c: 315: RA3 = 1;
  3972                           
  3973                           ;main.c: 316: RA4 = 0;
  3974  0260  2A61               	ljmp	PL10	;call to abstracted procedure
  3975  0261                     __end_of_ledShow:	
  3976  007E                     btemp	set	126	;btemp
  3977  007E                     wtemp0	set	126
  3978  0261                     PL10:	
  3979  0261  1185               	bcf	5,3	;volatile
  3980  0262  1205               	bcf	5,4	;volatile
  3981  0263  1586               	bsf	6,3	;volatile
  3982  0264  1206               	bcf	6,4	;volatile
  3983  0265  0008               	return
  3984  0266                     __end_ofPL10:	
  3985  0266                     PL12:	
  3986  0266  1185               	bcf	5,3	;volatile
  3987  0267  1205               	bcf	5,4	;volatile
  3988  0268  1606               	bsf	6,4	;volatile
  3989  0269  1186               	bcf	6,3	;volatile
  3990  026A  0008               	return
  3991  026B                     __end_ofPL12:	
  3992                           
  3993                           	psect	swtext1
  3994  05EA                     __pswtext1:	
  3995  05EA                     i1S2940:	
  3996  05EA  2A5C               	ljmp	i1l2328
  3997  05EB  29E1               	ljmp	i1l634
  3998  05EC  29EB               	ljmp	i1l637
  3999  05ED  29F6               	ljmp	i1l639
  4000  05EE  29FA               	ljmp	i1l641
  4001  05EF  2A03               	ljmp	i1l643
  4002  05F0  2A0C               	ljmp	i1l645
  4003  05F1  2A14               	ljmp	i1l647
  4004  05F2  2A1C               	ljmp	i1l649
  4005  05F3  2A1F               	ljmp	i1l651
  4006  05F4  2A22               	ljmp	i1l653
  4007  05F5  2A2C               	ljmp	i1l655
  4008  05F6  2A35               	ljmp	i1l657
  4009  05F7  2A3F               	ljmp	i1l659
  4010  05F8  2A48               	ljmp	i1l661
  4011  05F9  2A51               	ljmp	i1l2324


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         30
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     39      70
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lbmod
    _setBatStep->___lwdiv
    _keyCtr->_keyRead
    _checkBatAD->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _setBatStep->___lwdiv
    _checkBatAD->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6464
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     427
                            ___lbdiv
                            ___lbmod
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     212
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     215
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           0     0      0     501
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0    5469
                                             34 BANK0      5     5      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     582
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (5) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _chrgCtr
   _keyCtr
     _keyRead
   _setBatStep
     ___lwdiv
   _workCtr
     ___lbdiv
     ___lbmod
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     27      46       4       87.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      51       7        0.0%
DATA                 0      0      51       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 03 11:02:42 2025

                      pc 0002                       PL2 00E0                       PL4 03EC  
                     PL6 00EF                       PL8 03AC                       fsr 0004  
                    PL10 0261                      PL12 0266                      PL14 0474  
                    PL16 00F8                      PL18 0351                      l619 0402  
                    l740 028A                      l672 0510                      l737 028C  
                    l738 0288                      l791 0081                      l785 0046  
                    l795 00C5                      l699 04FD                      l956 0440  
                    l968 0462                      _GIE 005F                      _RA2 0432  
                    _RB0 0030                      _RA3 0433                      _RB1 0031  
                    _RA4 0434                      _RA5 0435                      _RB3 0033  
                    _RB4 0034                      _PR2 0011      __size_of_ADC_Sample 00C9  
                    fsr0 0004                      indf 0000          __end_of_AD_Init 0611  
           ___ftdiv@cntr 002F             ___ftdiv@sign 0034                     l1010 030B  
                   l2100 006B                     l2020 0540                     l1062 058B  
                   l2104 0075                     l2200 0395                     l2106 007D  
                   l2116 00C9                     l2204 03A3                     l2214 0585  
                   l2082 0031                     l2066 0026                     l2170 035D  
                   l2092 0051                     l2076 0030                     l2068 0028  
                   l2172 0362                     l2228 0598                     l2244 057B  
                   l2236 0567                     l2350 0513                     l2192 0387  
                   l2440 04EB                     l2520 017D                     l2362 0526  
                   l2530 018D                     l2514 0175                     l2188 037F  
                   l2444 04F0                     l2508 016A                     l2710 0444  
                   l2198 038B                     l2542 01A2                     l2534 0192  
                   l2470 011E                     l2720 0460                     l2712 0446  
                   l2448 04F4                     l2464 0110                     l2722 0457  
                   l2714 044B                     l2482 012B                     l2716 0452  
                   l2548 01A7                     l2734 02FD                     l2558 01B9  
                   l2486 0133                     l2808 04A6                     l2832 02A4  
                   l2496 014D                     l2488 0137                     l2850 02D2  
                   l2818 0275                     l2756 031E                     l2780 04BE  
                   l2852 02D5                     l2828 028F                     l2838 02B9  
                   l2918 0435                     l2792 04D5                     l1986 060A  
                   l2898 0419                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u1615 00BB                     u3127 04AC  
                   u3137 0023                     u1635 00D2                     u1565 0071  
                   u1575 007B                     _PIE1 000E                     u1695 0364  
                   u2835 04C7                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     _RBIE 005B                     _RBIF 0058  
                   u2795 032C                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 03F6  
           ___ftpack@arg 0073             ___ftpack@exp 0076                     btemp 007E  
                   start 000C             ___fttol@exp1 0041            ??_Init_System 0073  
           ___fttol@lval 003D                    ?_main 0070          __end_of___lbdiv 059A  
        __end_of___lbmod 057F          __end_of___ftdiv 0351          __end_of___fttol 03AC  
                  _T2CON 0013          __end_of___lwdiv 04DA                    i1l614 055A  
                  i1l641 01FA                    i1l634 01E1                    i1l651 021F  
                  i1l643 0203                    i1l661 0248                    i1l653 0222  
                  i1l645 020C                    i1l637 01EB                    i1l655 022C  
                  i1l647 0214                    i1l639 01F6                    i1l657 0235  
                  i1l649 021C                    i1l659 023F                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0528  
        __end_of_ledShow 0261          __end_of_keyRead 0546            ___ftpack@sign 0077  
                  pclath 000A          __end_of_pwmInit 05DA          __end_of_pwmStop 060A  
                  status 0003                    wtemp0 007E          __end_of_workCtr 01BE  
        ___lbdiv@divisor 0073          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_main 0438                   ??_main 0078            ___fttol@sign1 003C  
              ??_AD_Init 0073      __end_of_Init_System 05B5                   _ADCON0 0095  
                 _ADCON1 0096                   i1S2940 05EA                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
       __end_of___ftpack 0474                   _GODONE 04A9                   i1l2324 0251  
                 i1l2328 025C                   i1l2628 0557                   _LDO_EN 04B2  
                 _INTCON 000B         __end_of___lwtoft 05EA                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
           ??_ADC_Sample 0074             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 03B3                ??___lbdiv 0074                ??___lbmod 0074  
              ??___ftdiv 002C                ??___fttol 0039                   _ledCnt 005A  
              ??___lwdiv 0077                   _keyCtr 04DA                ??_chrgCtr 0073  
                 _result 004F                ??_ledShow 0070         __end_of_numArray 05C9  
              ??_keyRead 0073       __end_of_ADC_Sample 00E0                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0078  
       ___lbdiv@dividend 0074          ___lbmod@divisor 0073  __end_of__initialization 0015  
        ___lbmod@counter 0076               ___ftdiv@f1 0029               ___ftdiv@f2 0026  
             ___ftdiv@f3 0030               ___fttol@f1 0035           __pcstackCOMMON 0070  
            _Init_System 059A               __end_ofPL2 00EF               __end_ofPL4 03F6  
             __end_ofPL6 00F8               __end_ofPL8 03B3         ___lbdiv@quotient 0076  
             ___lwtoft@c 0023        __end_of_Isr_Timer 0563               _checkBatAD 0479  
             __pbssBANK0 0047              ?_Sleep_Mode 0070               __pmaintext 03F6  
             __pintentry 0004                  ?_keyCtr 0070               _ledCntTime 0056  
              ?___ftpack 0073                  _AD_Init 060A                ?___lwtoft 0023  
             _curBatStep 0052                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
             __stringtab 05B5                  _IntFlag 005C               _intCount10 005B  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0029          ADC_Sample@admin 0027  
        ADC_Sample@adsum 0023                  ___lbdiv 057F                  ___lbmod 0563  
                ___ftdiv 02EF                  ___fttol 0355                  ___lwdiv 04B0  
        __size_of_keyCtr 0029               ??___ftpack 0020                  _chrgCtr 0503  
             _lowBatFlag 0055                  __ptext1 00FD                  __ptext2 0602  
                __ptext3 05C9                  __ptext4 0563                  __ptext5 057F  
                __ptext6 026B                  __ptext7 04B0                  __ptext8 04DA  
                __ptext9 0528                  _ledShow 01BE               _lowBatTime 0051  
             ??___lwtoft 0078                  _count1s 005D                  _keyRead 0528  
             _setBatStep 026B      __size_of_Sleep_Mode 0039                  _pwmInit 05C9  
            ?_checkBatAD 0070                  _pwmStop 0602                  clrloop0 05FB  
                _workCtr 00FD     end_of_initialization 0015            _longPressFlag 0058  
       ___lbmod@dividend 0075              ___lbmod@rem 0077              ___ftdiv@exp 0033  
    __size_of_checkBatAD 0037             ?_Init_System 0070           __end_of_keyCtr 0503  
            __end_ofPL10 0266              __end_ofPL12 026B              __end_ofPL14 0479  
            __end_ofPL16 00FD              __end_ofPL18 0355      start_initialization 000D  
            ?_setBatStep 0070                _Isr_Timer 0546             ??_Sleep_Mode 0073  
      ADC_Sample@ad_temp 002B                 ??_keyCtr 0074                 ?_AD_Init 0070  
      __size_of___ftpack 003C              __pbssCOMMON 0078                ___latbits 0000  
      __size_of___lwtoft 0010            __pcstackBANK0 0020       __end_of_Sleep_Mode 03EC  
             ?_Isr_Timer 0070                _baiweiNum 0062                __pnvBANK0 0062  
       ___lwdiv@dividend 0075      __size_of_setBatStep 0084                 ?___lbdiv 0073  
               ?___lbmod 0073                 ?___ftdiv 0026                 ?___fttol 0035  
               ?___lwdiv 0073                 ?_chrgCtr 0070                __pstrings 05B5  
              __pswtext1 05EA                _count900s 0049                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 0065           ADC_Sample@adch 0021  
               ?_pwmInit 0070             ??_checkBatAD 0042                 ?_pwmStop 0070  
       ___lwdiv@quotient 0021                 ?_workCtr 0070              ADC_Sample@i 0022  
            ADC_Sample@j 0020        interrupt_function 0004                clear_ram0 05FA  
              _sleepTime 0054                _shiweiNum 0064       __end_of_checkBatAD 04B0  
            __stringbase 05BA     __size_of_Init_System 001B         __size_of_AD_Init 0007  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0017  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___ftdiv 0062  
       __size_of___fttol 0057         __size_of___lwdiv 002A                 ___ftpack 0438  
     __end_of__stringtab 05BB         __size_of_chrgCtr 0025                 ___lwtoft 05DA  
       __size_of_ledShow 00A3         __size_of_keyRead 001E                 _adresult 0060  
           ??_setBatStep 0077                 _chrgFlag 007A          ___lwdiv@divisor 0073  
        ___lwdiv@counter 0020                 __ptext10 0503                 __ptext11 0479  
               __ptext20 0546                 __ptext12 05DA                 __ptext21 01BE  
               __ptext13 0355                 __ptext14 02EF                 __ptext15 0438  
               __ptext16 0017                 __ptext17 03B3                 __ptext18 059A  
               __ptext19 060A         __size_of_pwmInit 0011         __size_of_pwmStop 0008  
               _geweiNum 0063                 _count30s 0047         __size_of_workCtr 00C1  
               _keyCount 0059                 _intCount 005E            __size_of_main 0042  
               _numArray 05BB                 _test_adc 005F       __end_of_setBatStep 02EF  
               _power_ad 004D              _lowShanTime 004B                 _workStep 0079  
           _motorPwmFlag 0053                 intlevel1 0000              ?_ADC_Sample 0073  
   checkBatAD@power_temp 0043                stringcode 05B5              _showBatTime 0057  
            _showBatStep 0078               _OPTION_REG 0001                 stringdir 05B5  
               stringtab 05B5  
