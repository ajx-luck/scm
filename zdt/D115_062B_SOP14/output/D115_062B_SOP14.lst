

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 03 15:40:04 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	pa_nodes0,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.45
    33                           ; Generated 16/11/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     
    67                           	psect	nvBANK0
    68  0055                     __pnvBANK0:	
    69  0055                     _firstTime:	
    70  0055                     	ds	1
    71  001D                     _PWMCON2	set	29
    72  0018                     _PWMTH	set	24
    73  0017                     _PWMTL	set	23
    74  0016                     _PWMCON1	set	22
    75  0015                     _PWMCON0	set	21
    76  0014                     _OSCCON	set	20
    77  0013                     _T2CON	set	19
    78  0011                     _PR2	set	17
    79  000E                     _PIE1	set	14
    80  000D                     _PIR1	set	13
    81  000B                     _INTCON	set	11
    82  0009                     _IOCB	set	9
    83  0008                     _WPUB	set	8
    84  0006                     _PORTB	set	6
    85  0005                     _TRISB	set	5
    86  0001                     _OPTION_REG	set	1
    87  0071                     _TMR2IE	set	113
    88  0073                     _RAIE	set	115
    89  0069                     _TMR2IF	set	105
    90  006B                     _RAIF	set	107
    91  0058                     _RBIF	set	88
    92  005B                     _RBIE	set	91
    93  005E                     _PEIE	set	94
    94  005F                     _GIE	set	95
    95  0033                     _RB3	set	51
    96  009E                     _PWMD23H	set	158
    97  009D                     _PWM23DT	set	157
    98  009B                     _PWMD2L	set	155
    99  0099                     _ADRESH	set	153
   100  0098                     _ADRESL	set	152
   101  0096                     _ADCON1	set	150
   102  0095                     _ADCON0	set	149
   103  0093                     _ANSEL0	set	147
   104  0089                     _IOCA	set	137
   105  0088                     _WPUA	set	136
   106  0087                     _WPDA	set	135
   107  0086                     _PORTA	set	134
   108  0085                     _TRISA	set	133
   109  04B2                     _LDO_EN	set	1202
   110  04B6                     _CHS4	set	1206
   111  04A9                     _GODONE	set	1193
   112                           
   113                           	psect	cinit
   114  000B                     start_initialization:	
   115                           ; #config settings
   116                           
   117  000B                     __initialization:	
   118  000B  3020               	movlw	low __pbssBANK0
   119                           
   120                           ; Clear objects allocated to COMMON
   121  000C  01F9               	clrf	__pbssCOMMON& (0+127)
   122  000D  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   123  000E  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   124                           
   125                           ; Clear objects allocated to BANK0
   126  000F  1383               	bcf	3,7	;select IRP bank0
   127  0010  0084               	movwf	4
   128  0011  3046               	movlw	low (__pbssBANK0+38)
   129  0012  2433               	fcall	clear_ram0
   130  0013                     end_of_initialization:	
   131                           ;End of C runtime variable initialization code
   132                           
   133  0013                     __end_of__initialization:	
   134  0013  0183               	clrf	3
   135  0014  2AFC               	ljmp	_main	;jump to C main() function
   136                           
   137                           	psect	bssCOMMON
   138  0079                     __pbssCOMMON:	
   139  0079                     _prePwStep:	
   140  0079                     	ds	1
   141  007A                     _ledStep:	
   142  007A                     	ds	1
   143  007B                     _workStep:	
   144  007B                     	ds	1
   145                           
   146                           	psect	bssBANK0
   147  0020                     __pbssBANK0:	
   148  0020                     _count900s:	
   149  0020                     	ds	2
   150  0022                     _count8s:	
   151  0022                     	ds	2
   152  0024                     _count5s:	
   153  0024                     	ds	2
   154  0026                     _count50s:	
   155  0026                     	ds	2
   156  0028                     _batADValue:	
   157  0028                     	ds	2
   158  002A                     _outADValue:	
   159  002A                     	ds	2
   160  002C                     _power_ad:	
   161  002C                     	ds	2
   162  002E                     _result:	
   163  002E                     	ds	2
   164  0030                     _adresult:	
   165  0030                     	ds	2
   166  0032                     _sleepTime:	
   167  0032                     	ds	1
   168  0033                     _lowBatFlag:	
   169  0033                     	ds	1
   170  0034                     _preLedStep:	
   171  0034                     	ds	1
   172  0035                     _overWorkTime:	
   173  0035                     	ds	1
   174  0036                     _showBatTime:	
   175  0036                     	ds	1
   176  0037                     _lockLedStep:	
   177  0037                     	ds	1
   178  0038                     _pwStep:	
   179  0038                     	ds	1
   180  0039                     _startTime:	
   181  0039                     	ds	1
   182  003A                     _tempDuty:	
   183  003A                     	ds	1
   184  003B                     _overCount:	
   185  003B                     	ds	1
   186  003C                     _maxDuty:	
   187  003C                     	ds	1
   188  003D                     _longPressFlag:	
   189  003D                     	ds	1
   190  003E                     _keyCount:	
   191  003E                     	ds	1
   192  003F                     _workOverOutTime:	
   193  003F                     	ds	1
   194  0040                     _intCount10:	
   195  0040                     	ds	1
   196  0041                     _chrgFlag:	
   197  0041                     	ds	1
   198  0042                     _IntFlag:	
   199  0042                     	ds	1
   200  0043                     _count1s:	
   201  0043                     	ds	1
   202  0044                     _intCount:	
   203  0044                     	ds	1
   204  0045                     _test_adc:	
   205  0045                     	ds	1
   206                           
   207                           	psect	clrtext
   208  0433                     clear_ram0:	
   209                           ;	Called with FSR containing the base address, and
   210                           ;	W with the last address+1
   211                           
   212  0433  0064               	clrwdt	;clear the watchdog before getting into this loop
   213  0434                     clrloop0:	
   214  0434  0180               	clrf	0	;clear RAM location pointed to by FSR
   215  0435  0A84               	incf	4,f	;increment pointer
   216  0436  0604               	xorwf	4,w	;XOR with final address
   217  0437  1903               	btfsc	3,2	;have we reached the end yet?
   218  0438  3400               	retlw	0	;all done for this memory range, return
   219  0439  0604               	xorwf	4,w	;XOR again to restore value
   220  043A  2C34               	goto	clrloop0	;do the next byte
   221                           
   222                           	psect	cstackCOMMON
   223  0070                     __pcstackCOMMON:	
   224  0070                     ?_Init_System:	
   225  0070                     ?_AD_Init:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_checkOutA:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ?_chrgCtr:	
   232                           ; 1 bytes @ 0x0
   233                           
   234  0070                     ?_checkBatAD:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_keyCtr:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ?_workCtr:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_ledCtr:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_Sleep_Mode:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_pwmInit:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_pwmStop:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_Isr_Timer:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ??_Isr_Timer:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_main:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_keyRead:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269  0070                     	ds	2
   270  0072                     ??_Init_System:	
   271  0072                     ??_AD_Init:	
   272                           ; 1 bytes @ 0x2
   273                           
   274  0072                     ??_workCtr:	
   275                           ; 1 bytes @ 0x2
   276                           
   277  0072                     ??_Sleep_Mode:	
   278                           ; 1 bytes @ 0x2
   279                           
   280  0072                     ??_pwmInit:	
   281                           ; 1 bytes @ 0x2
   282                           
   283  0072                     ??_pwmStop:	
   284                           ; 1 bytes @ 0x2
   285                           
   286  0072                     ?_ADC_Sample:	
   287                           ; 1 bytes @ 0x2
   288                           
   289  0072                     ??_keyRead:	
   290                           ; 1 bytes @ 0x2
   291                           
   292  0072                     ?___lbdiv:	
   293                           ; 1 bytes @ 0x2
   294                           
   295  0072                     ?___lbmod:	
   296                           ; 1 bytes @ 0x2
   297                           
   298  0072                     keyRead@keyStatus:	
   299                           ; 1 bytes @ 0x2
   300                           
   301  0072                     ADC_Sample@adldo:	
   302                           ; 1 bytes @ 0x2
   303                           
   304  0072                     ___lbdiv@divisor:	
   305                           ; 1 bytes @ 0x2
   306                           
   307  0072                     ___lbmod@divisor:	
   308                           ; 1 bytes @ 0x2
   309                           
   310                           
   311                           ; 1 bytes @ 0x2
   312  0072                     	ds	1
   313  0073                     ??_keyCtr:	
   314  0073                     ??_ADC_Sample:	
   315                           ; 1 bytes @ 0x3
   316                           
   317  0073                     ??___lbdiv:	
   318                           ; 1 bytes @ 0x3
   319                           
   320  0073                     ??___lbmod:	
   321                           ; 1 bytes @ 0x3
   322                           
   323  0073                     keyCtr@kclick:	
   324                           ; 1 bytes @ 0x3
   325                           
   326  0073                     ___lbdiv@dividend:	
   327                           ; 1 bytes @ 0x3
   328                           
   329                           
   330                           ; 1 bytes @ 0x3
   331  0073                     	ds	1
   332  0074                     ___lbdiv@counter:	
   333  0074                     ___lbmod@dividend:	
   334                           ; 1 bytes @ 0x4
   335                           
   336                           
   337                           ; 1 bytes @ 0x4
   338  0074                     	ds	1
   339  0075                     ___lbdiv@quotient:	
   340  0075                     ___lbmod@counter:	
   341                           ; 1 bytes @ 0x5
   342                           
   343                           
   344                           ; 1 bytes @ 0x5
   345  0075                     	ds	1
   346  0076                     ??_chrgCtr:	
   347  0076                     ___lbmod@rem:	
   348                           ; 1 bytes @ 0x6
   349                           
   350                           
   351                           ; 1 bytes @ 0x6
   352  0076                     	ds	1
   353  0077                     ??_checkOutA:	
   354  0077                     ??_checkBatAD:	
   355                           ; 1 bytes @ 0x7
   356                           
   357  0077                     ??_ledCtr:	
   358                           ; 1 bytes @ 0x7
   359                           
   360                           
   361                           ; 1 bytes @ 0x7
   362  0077                     	ds	2
   363  0079                     ??_main:	
   364                           
   365                           	psect	cstackBANK0
   366  0046                     __pcstackBANK0:	
   367                           ; 1 bytes @ 0x9
   368                           
   369  0046                     ADC_Sample@j:	
   370                           
   371                           ; 1 bytes @ 0x0
   372  0046                     	ds	1
   373  0047                     ADC_Sample@adch:	
   374                           
   375                           ; 1 bytes @ 0x1
   376  0047                     	ds	1
   377  0048                     ADC_Sample@i:	
   378                           
   379                           ; 1 bytes @ 0x2
   380  0048                     	ds	1
   381  0049                     ADC_Sample@adsum:	
   382                           
   383                           ; 4 bytes @ 0x3
   384  0049                     	ds	4
   385  004D                     ADC_Sample@admin:	
   386                           
   387                           ; 2 bytes @ 0x7
   388  004D                     	ds	2
   389  004F                     ADC_Sample@admax:	
   390                           
   391                           ; 2 bytes @ 0x9
   392  004F                     	ds	2
   393  0051                     ADC_Sample@ad_temp:	
   394                           
   395                           ; 2 bytes @ 0xB
   396  0051                     	ds	3
   397  0054                     checkOutA@maxAout:	
   398                           
   399                           ; 1 bytes @ 0xE
   400  0054                     	ds	1
   401                           
   402                           	psect	maintext
   403  02FC                     __pmaintext:	
   404 ;;
   405 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   406 ;;
   407 ;; *************** function _main *****************
   408 ;; Defined at:
   409 ;;		line 135 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2, status,0, pclath, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : B00/0
   420 ;;		On exit  : 100/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1
   423 ;;      Params:         0       0       0
   424 ;;      Locals:         0       0       0
   425 ;;      Temps:          0       0       0
   426 ;;      Totals:         0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels required when called:    3
   429 ;; This function calls:
   430 ;;		_AD_Init
   431 ;;		_Init_System
   432 ;;		_Sleep_Mode
   433 ;;		_checkBatAD
   434 ;;		_checkOutA
   435 ;;		_chrgCtr
   436 ;;		_keyCtr
   437 ;;		_ledCtr
   438 ;;		_workCtr
   439 ;; This function is called by:
   440 ;;		Startup code after reset
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           
   445                           ;psect for function _main
   446  02FC                     _main:	
   447                           
   448                           ;main.c: 137: Init_System();
   449                           
   450                           ;incstack = 0
   451                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   452  02FC  2394               	fcall	_Init_System
   453                           
   454                           ;main.c: 138: AD_Init();
   455  02FD  243B               	fcall	_AD_Init
   456                           
   457                           ;main.c: 139: firstTime = 100;
   458  02FE  3064               	movlw	100
   459  02FF  1283               	bcf	3,5	;RP0=0, select bank0
   460  0300  00D5               	movwf	_firstTime
   461  0301                     l661:	
   462                           ;main.c: 140: while (1)
   463                           
   464  0301  0064               	clrwdt	;# 
   465                           
   466                           ;main.c: 143: if(intCount10 > 10)
   467  0302  300B               	movlw	11
   468  0303  1283               	bcf	3,5	;RP0=0, select bank0
   469  0304  0240               	subwf	_intCount10,w
   470  0305  1C03               	skipc
   471  0306  2B09               	goto	l2660
   472                           
   473                           ;main.c: 144: {
   474                           ;main.c: 145: intCount10 = 0;
   475  0307  01C0               	clrf	_intCount10
   476                           
   477                           ;main.c: 146: checkOutA();
   478  0308  20FB               	fcall	_checkOutA
   479  0309                     l2660:	
   480                           
   481                           ;main.c: 147: }
   482                           ;main.c: 148: if(!IntFlag)
   483  0309  1283               	bcf	3,5	;RP0=0, select bank0
   484  030A  0842               	movf	_IntFlag,w
   485  030B  1903               	btfsc	3,2
   486  030C  2B01               	goto	l661
   487                           
   488                           ;main.c: 150: IntFlag = 0;
   489  030D  01C2               	clrf	_IntFlag
   490                           
   491                           ;main.c: 151: chrgCtr();
   492  030E  2277               	fcall	_chrgCtr
   493                           
   494                           ;main.c: 152: checkBatAD();
   495  030F  2214               	fcall	_checkBatAD
   496                           
   497                           ;main.c: 153: if(chrgFlag == 0 && lowBatFlag == 0)
   498  0310  1283               	bcf	3,5	;RP0=0, select bank0
   499  0311  0841               	movf	_chrgFlag,w
   500  0312  1D03               	btfss	3,2
   501  0313  2B18               	goto	l665
   502  0314  0833               	movf	_lowBatFlag,w
   503  0315  1D03               	btfss	3,2
   504  0316  2B18               	goto	l665
   505                           
   506                           ;main.c: 154: {
   507                           ;main.c: 155: keyCtr();
   508  0317  236C               	fcall	_keyCtr
   509  0318                     l665:	
   510                           
   511                           ;main.c: 156: }
   512                           ;main.c: 157: workCtr();
   513  0318  2334               	fcall	_workCtr
   514                           
   515                           ;main.c: 158: ledCtr();
   516  0319  2189               	fcall	_ledCtr
   517                           
   518                           ;main.c: 159: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0)
   519  031A  1283               	bcf	3,5	;RP0=0, select bank0
   520  031B  0841               	movf	_chrgFlag,w
   521  031C  1D03               	btfss	3,2
   522  031D  2B32               	goto	l2692
   523  031E  087B               	movf	_workStep,w
   524  031F  1D03               	btfss	3,2
   525  0320  2B32               	goto	l2692
   526  0321  083E               	movf	_keyCount,w
   527  0322  1D03               	btfss	3,2
   528  0323  2B32               	goto	l2692
   529  0324  0855               	movf	_firstTime,w
   530  0325  1D03               	btfss	3,2
   531  0326  2B32               	goto	l2692
   532  0327  0836               	movf	_showBatTime,w
   533  0328  1D03               	btfss	3,2
   534  0329  2B32               	goto	l2692
   535                           
   536                           ;main.c: 160: {
   537                           ;main.c: 161: if(++sleepTime >= 200)
   538  032A  30C8               	movlw	200
   539  032B  0AB2               	incf	_sleepTime,f
   540  032C  0232               	subwf	_sleepTime,w
   541  032D  1C03               	skipc
   542  032E  2B01               	goto	l661
   543                           
   544                           ;main.c: 162: {
   545                           ;main.c: 163: sleepTime = 0;
   546  032F  01B2               	clrf	_sleepTime
   547                           
   548                           ;main.c: 164: Sleep_Mode();
   549  0330  22BC               	fcall	_Sleep_Mode
   550  0331  2B01               	goto	l661
   551  0332                     l2692:	
   552                           
   553                           ;main.c: 167: else
   554                           ;main.c: 168: {
   555                           ;main.c: 169: sleepTime = 0;
   556  0332  01B2               	clrf	_sleepTime
   557  0333  2B01               	goto	l661
   558  0334                     __end_of_main:	
   559                           
   560                           	psect	text1
   561  0334                     __ptext1:	
   562 ;; *************** function _workCtr *****************
   563 ;; Defined at:
   564 ;;		line 407 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, status,2, status,0, pclath, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 100/0
   575 ;;		On exit  : 100/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMMON   BANK0   BANK1
   578 ;;      Params:         0       0       0
   579 ;;      Locals:         0       0       0
   580 ;;      Temps:          0       0       0
   581 ;;      Totals:         0       0       0
   582 ;;Total ram usage:        0 bytes
   583 ;; Hardware stack levels used:    1
   584 ;; Hardware stack levels required when called:    2
   585 ;; This function calls:
   586 ;;		_pwmInit
   587 ;;		_pwmStop
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _workCtr
   595  0334                     _workCtr:	
   596                           
   597                           ;main.c: 410: if(startTime > 0)
   598                           
   599                           ;incstack = 0
   600                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   601  0334  0839               	movf	_startTime,w
   602  0335  1D03               	btfss	3,2
   603                           
   604                           ;main.c: 411: {
   605                           ;main.c: 412: startTime--;
   606  0336  03B9               	decf	_startTime,f
   607                           
   608                           ;main.c: 413: }
   609                           ;main.c: 414: if(workStep > 0)
   610  0337  087B               	movf	_workStep,w
   611  0338  1903               	btfsc	3,2
   612  0339  2B68               	goto	l2258
   613                           
   614                           ;main.c: 415: {
   615                           ;main.c: 416: if((PWMCON0 & 0x04) == 0)
   616  033A  1915               	btfsc	21,2	;volatile
   617  033B  2B3D               	goto	l2238
   618                           
   619                           ;main.c: 417: {
   620                           ;main.c: 418: pwmInit();
   621  033C  2425               	fcall	_pwmInit
   622  033D                     l2238:	
   623                           
   624                           ;main.c: 419: }
   625                           ;main.c: 420: maxDuty = 40 + (workStep*3);
   626  033D  087B               	movf	_workStep,w
   627  033E  077B               	addwf	_workStep,w
   628  033F  077B               	addwf	_workStep,w
   629  0340  3E28               	addlw	40
   630  0341  00BC               	movwf	_maxDuty
   631                           
   632                           ;main.c: 421: if(overCount >= 5)
   633  0342  3005               	movlw	5
   634  0343  023B               	subwf	_overCount,w
   635  0344  1C03               	skipc
   636  0345  2B58               	goto	l2250
   637                           
   638                           ;main.c: 422: {
   639                           ;main.c: 423: if(++count5s > 500)
   640  0346  0AA4               	incf	_count5s,f
   641  0347  1903               	skipnz
   642  0348  0AA5               	incf	_count5s+1,f
   643  0349  3001               	movlw	1
   644  034A  0225               	subwf	_count5s+1,w
   645  034B  30F5               	movlw	245
   646  034C  1903               	skipnz
   647  034D  0224               	subwf	_count5s,w
   648  034E  1C03               	skipc
   649  034F  2B5A               	goto	l2252
   650  0350  30B4               	movlw	180
   651                           
   652                           ;main.c: 424: {
   653                           ;main.c: 425: count5s = 0;
   654  0351  01A4               	clrf	_count5s
   655  0352  01A5               	clrf	_count5s+1
   656                           
   657                           ;main.c: 426: overWorkTime = 180;
   658  0353  00B5               	movwf	_overWorkTime
   659                           
   660                           ;main.c: 427: preLedStep = workStep;
   661  0354  087B               	movf	_workStep,w
   662  0355  00B4               	movwf	_preLedStep
   663                           
   664                           ;main.c: 428: workStep = 0;
   665  0356  01FB               	clrf	_workStep
   666  0357  2B5A               	goto	l2252
   667  0358                     l2250:	
   668                           
   669                           ;main.c: 432: else
   670                           ;main.c: 433: {
   671                           ;main.c: 434: count5s = 0;
   672  0358  01A4               	clrf	_count5s
   673  0359  01A5               	clrf	_count5s+1
   674  035A                     l2252:	
   675                           
   676                           ;main.c: 435: }
   677                           ;main.c: 436: if(count1s == 0 && ++count900s >= 900)
   678  035A  0843               	movf	_count1s,w
   679  035B  1D03               	btfss	3,2
   680  035C  0008               	return
   681  035D  0AA0               	incf	_count900s,f
   682  035E  1903               	skipnz
   683  035F  0AA1               	incf	_count900s+1,f
   684  0360  3003               	movlw	3
   685  0361  0221               	subwf	_count900s+1,w
   686  0362  3084               	movlw	132
   687  0363  1903               	skipnz
   688  0364  0220               	subwf	_count900s,w
   689  0365  1803               	btfsc	3,0
   690                           
   691                           ;main.c: 437: {
   692                           ;main.c: 438: workStep = 0;
   693  0366  01FB               	clrf	_workStep
   694  0367  0008               	return
   695  0368                     l2258:	
   696                           
   697                           ;main.c: 441: else
   698                           ;main.c: 442: {
   699                           ;main.c: 443: pwmStop();
   700  0368  2442               	fcall	_pwmStop
   701                           
   702                           ;main.c: 444: count900s = 0;
   703  0369  01A0               	clrf	_count900s
   704  036A  01A1               	clrf	_count900s+1
   705  036B  0008               	return
   706  036C                     __end_of_workCtr:	
   707                           
   708                           	psect	text2
   709  0442                     __ptext2:	
   710 ;; *************** function _pwmStop *****************
   711 ;; Defined at:
   712 ;;		line 726 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		None
   721 ;; Tracked objects:
   722 ;;		On entry : 100/0
   723 ;;		On exit  : 100/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1
   726 ;;      Params:         0       0       0
   727 ;;      Locals:         0       0       0
   728 ;;      Temps:          0       0       0
   729 ;;      Totals:         0       0       0
   730 ;;Total ram usage:        0 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; Hardware stack levels required when called:    1
   733 ;; This function calls:
   734 ;;		Nothing
   735 ;; This function is called by:
   736 ;;		_workCtr
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           
   741                           ;psect for function _pwmStop
   742  0442                     _pwmStop:	
   743                           
   744                           ;main.c: 728: PWMCON0 &= 0XFB;
   745                           
   746                           ;incstack = 0
   747                           ; Regs used in _pwmStop: []
   748  0442  1115               	bcf	21,2	;volatile
   749                           
   750                           ;main.c: 729: RB3 = 0;
   751  0443  1186               	bcf	6,3	;volatile
   752  0444  0008               	return
   753  0445                     __end_of_pwmStop:	
   754                           
   755                           	psect	text3
   756  0425                     __ptext3:	
   757 ;; *************** function _pwmInit *****************
   758 ;; Defined at:
   759 ;;		line 711 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, status,2
   768 ;; Tracked objects:
   769 ;;		On entry : 100/0
   770 ;;		On exit  : 100/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1
   773 ;;      Params:         0       0       0
   774 ;;      Locals:         0       0       0
   775 ;;      Temps:          0       0       0
   776 ;;      Totals:         0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_workCtr
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _pwmInit
   789  0425                     _pwmInit:	
   790                           
   791                           ;main.c: 713: PWMCON1 = 0B00000000;
   792                           
   793                           ;incstack = 0
   794                           ; Regs used in _pwmInit: [wreg+status,2]
   795  0425  0196               	clrf	22	;volatile
   796                           
   797                           ;main.c: 714: PWMTH = 0X00;
   798  0426  0198               	clrf	24	;volatile
   799                           
   800                           ;main.c: 715: PWMTL = 100;
   801  0427  3064               	movlw	100
   802  0428  0097               	movwf	23	;volatile
   803                           
   804                           ;main.c: 718: PWMD23H = 0;
   805  0429  1683               	bsf	3,5	;RP0=1, select bank1
   806  042A  019E               	clrf	30	;volatile
   807                           
   808                           ;main.c: 719: PWMD2L = 50;
   809  042B  3032               	movlw	50
   810  042C  009B               	movwf	27	;volatile
   811                           
   812                           ;main.c: 720: PWM23DT = 0X00;
   813  042D  019D               	clrf	29	;volatile
   814                           
   815                           ;main.c: 722: PWMCON0 = 0X64;
   816  042E  3064               	movlw	100
   817  042F  1283               	bcf	3,5	;RP0=0, select bank0
   818  0430  0095               	movwf	21	;volatile
   819                           
   820                           ;main.c: 723: PWMCON2 =0X00;
   821  0431  019D               	clrf	29	;volatile
   822  0432  0008               	return
   823  0433                     __end_of_pwmInit:	
   824                           
   825                           	psect	text4
   826  0189                     __ptext4:	
   827 ;; *************** function _ledCtr *****************
   828 ;; Defined at:
   829 ;;		line 176 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
   830 ;; Parameters:    Size  Location     Type
   831 ;;		None
   832 ;; Auto vars:     Size  Location     Type
   833 ;;		None
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, status,2, status,0, pclath, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 100/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMMON   BANK0   BANK1
   843 ;;      Params:         0       0       0
   844 ;;      Locals:         0       0       0
   845 ;;      Temps:          1       0       0
   846 ;;      Totals:         1       0       0
   847 ;;Total ram usage:        1 bytes
   848 ;; Hardware stack levels used:    1
   849 ;; Hardware stack levels required when called:    2
   850 ;; This function calls:
   851 ;;		___lbdiv
   852 ;;		___lbmod
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           
   859                           ;psect for function _ledCtr
   860  0189                     _ledCtr:	
   861                           
   862                           ;main.c: 178: if(firstTime > 0)
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   866  0189  0855               	movf	_firstTime,w
   867  018A  1903               	btfsc	3,2
   868  018B  2996               	goto	l2272
   869  018C  3006               	movlw	6
   870                           
   871                           ;main.c: 179: {
   872                           ;main.c: 180: firstTime--;
   873  018D  03D5               	decf	_firstTime,f
   874                           
   875                           ;main.c: 181: ledStep = 6;
   876  018E  00FA               	movwf	_ledStep
   877                           
   878                           ;main.c: 182: if(prePwStep < pwStep)
   879  018F  0838               	movf	_pwStep,w
   880  0190  0279               	subwf	_prePwStep,w
   881  0191  1803               	skipnc
   882  0192  29D6               	goto	l2314
   883                           
   884                           ;main.c: 183: {
   885                           ;main.c: 184: prePwStep = pwStep;
   886  0193  0838               	movf	_pwStep,w
   887  0194  00F9               	movwf	_prePwStep
   888  0195  29D6               	goto	l2314
   889  0196                     l2272:	
   890                           
   891                           ;main.c: 187: else if(overWorkTime > 0)
   892  0196  0835               	movf	_overWorkTime,w
   893  0197  1903               	btfsc	3,2
   894  0198  29A7               	goto	l2282
   895  0199  303C               	movlw	60
   896                           
   897                           ;main.c: 188: {
   898                           ;main.c: 189: overWorkTime--;
   899  019A  03B5               	decf	_overWorkTime,f
   900                           
   901                           ;main.c: 190: if(overWorkTime % 60 < 30)
   902  019B  00F2               	movwf	___lbmod@divisor
   903  019C  0835               	movf	_overWorkTime,w
   904  019D  23D5               	fcall	___lbmod
   905  019E  00F7               	movwf	??_ledCtr
   906  019F  301E               	movlw	30
   907  01A0  0277               	subwf	??_ledCtr,w
   908  01A1  1803               	skipnc
   909  01A2  29A5               	goto	l2280
   910                           
   911                           ;main.c: 191: {
   912                           ;main.c: 192: ledStep = preLedStep;
   913  01A3  0834               	movf	_preLedStep,w
   914  01A4  29D5               	goto	L1
   915  01A5                     l2280:	
   916                           ;main.c: 193: }
   917                           
   918                           
   919                           ;main.c: 194: else
   920                           ;main.c: 195: {
   921                           ;main.c: 196: ledStep = 0;
   922  01A5  01FA               	clrf	_ledStep
   923  01A6  29D6               	goto	l2314
   924  01A7                     l2282:	
   925                           
   926                           ;main.c: 199: else if(showBatTime > 0)
   927  01A7  0836               	movf	_showBatTime,w
   928  01A8  1903               	btfsc	3,2
   929  01A9  29C0               	goto	l2300
   930  01AA  300E               	movlw	14
   931                           
   932                           ;main.c: 200: {
   933                           ;main.c: 201: showBatTime--;
   934  01AB  03B6               	decf	_showBatTime,f
   935                           
   936                           ;main.c: 202: if(prePwStep >= 14)
   937  01AC  0279               	subwf	_prePwStep,w
   938  01AD  1C03               	skipc
   939  01AE  29B4               	goto	l2290
   940                           
   941                           ;main.c: 203: {
   942                           ;main.c: 204: ledStep = prePwStep/14;
   943  01AF  300E               	movlw	14
   944  01B0  00F2               	movwf	___lbdiv@divisor
   945  01B1  0879               	movf	_prePwStep,w
   946  01B2  23F1               	fcall	___lbdiv
   947  01B3  29D5               	goto	L1
   948  01B4                     l2290:	
   949                           ;main.c: 205: }
   950                           
   951                           
   952                           ;main.c: 206: else if(prePwStep > 5)
   953  01B4  3006               	movlw	6
   954  01B5  0279               	subwf	_prePwStep,w
   955  01B6  1C03               	skipc
   956  01B7  29BB               	goto	l2294
   957  01B8                     l2292:	
   958                           
   959                           ;main.c: 207: {
   960                           ;main.c: 208: ledStep = 1;
   961  01B8  01FA               	clrf	_ledStep
   962  01B9  0AFA               	incf	_ledStep,f
   963                           
   964                           ;main.c: 209: }
   965  01BA  29D6               	goto	l2314
   966  01BB                     l2294:	
   967                           
   968                           ;main.c: 210: else
   969                           ;main.c: 211: {
   970                           ;main.c: 212: if(count1s < 50)
   971  01BB  3032               	movlw	50
   972  01BC  0243               	subwf	_count1s,w
   973  01BD  1C03               	btfss	3,0
   974  01BE  29B8               	goto	l2292
   975  01BF  29A5               	goto	l2280
   976  01C0                     l2300:	
   977                           ;main.c: 219: }
   978                           ;main.c: 220: }
   979                           ;main.c: 221: }
   980                           
   981                           
   982                           ;main.c: 222: else if(workStep > 0)
   983  01C0  087B               	movf	_workStep,w
   984  01C1  1903               	btfsc	3,2
   985  01C2  29C5               	goto	l2304
   986                           
   987                           ;main.c: 223: {
   988                           ;main.c: 224: ledStep = workStep;
   989  01C3  087B               	movf	_workStep,w
   990  01C4  29D5               	goto	L1
   991  01C5                     l2304:	
   992                           ;main.c: 225: }
   993                           
   994                           
   995                           ;main.c: 226: else if(chrgFlag)
   996  01C5  0841               	movf	_chrgFlag,w
   997  01C6  1903               	btfsc	3,2
   998  01C7  29A5               	goto	l2280
   999                           
  1000                           ;main.c: 227: {
  1001                           ;main.c: 228: if(count1s % 50 == 0)
  1002  01C8  3032               	movlw	50
  1003  01C9  00F2               	movwf	___lbmod@divisor
  1004  01CA  0843               	movf	_count1s,w
  1005  01CB  23D5               	fcall	___lbmod
  1006  01CC  3A00               	xorlw	0
  1007  01CD  1D03               	skipz
  1008  01CE  29D6               	goto	l2314
  1009                           
  1010                           ;main.c: 229: {
  1011                           ;main.c: 230: if(++ledStep > 6)
  1012  01CF  3007               	movlw	7
  1013  01D0  0AFA               	incf	_ledStep,f
  1014  01D1  027A               	subwf	_ledStep,w
  1015  01D2  1C03               	skipc
  1016  01D3  29D6               	goto	l2314
  1017                           
  1018                           ;main.c: 231: {
  1019                           ;main.c: 232: ledStep = lockLedStep;
  1020  01D4  0837               	movf	_lockLedStep,w
  1021  01D5                     L1:	
  1022  01D5  00FA               	movwf	_ledStep
  1023  01D6                     l2314:	
  1024                           
  1025                           ;main.c: 239: }
  1026                           ;main.c: 240: PORTB |= 0x03;
  1027  01D6  3003               	movlw	3
  1028  01D7  0486               	iorwf	6,f	;volatile
  1029                           
  1030                           ;main.c: 241: PORTA |= 0x3C;
  1031  01D8  303C               	movlw	60
  1032  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  1033  01DA  0486               	iorwf	6,f	;volatile
  1034                           
  1035                           ;main.c: 242: if(ledStep > 5)
  1036  01DB  3006               	movlw	6
  1037  01DC  027A               	subwf	_ledStep,w
  1038  01DD  1C03               	skipc
  1039  01DE  29E6               	goto	l2322
  1040                           
  1041                           ;main.c: 243: {
  1042                           ;main.c: 244: PORTB &= 0xFC;
  1043  01DF  30FC               	movlw	252
  1044  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1045  01E1  0586               	andwf	6,f	;volatile
  1046                           
  1047                           ;main.c: 245: PORTA &= 0xC3;
  1048  01E2  30C3               	movlw	195
  1049  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  1050  01E4  0586               	andwf	6,f	;volatile
  1051                           
  1052                           ;main.c: 246: }
  1053  01E5  0008               	return
  1054  01E6                     l2322:	
  1055                           
  1056                           ;main.c: 247: else if(ledStep > 4)
  1057  01E6  3005               	movlw	5
  1058  01E7  027A               	subwf	_ledStep,w
  1059  01E8  1C03               	skipc
  1060  01E9  29F1               	goto	l2326
  1061                           
  1062                           ;main.c: 248: {
  1063                           ;main.c: 249: PORTB &= 0xFC;
  1064  01EA  30FC               	movlw	252
  1065  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1066  01EC  0586               	andwf	6,f	;volatile
  1067                           
  1068                           ;main.c: 250: PORTA &= 0xE3;
  1069  01ED  30E3               	movlw	227
  1070  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1071  01EF  0586               	andwf	6,f	;volatile
  1072                           
  1073                           ;main.c: 251: }
  1074  01F0  0008               	return
  1075  01F1                     l2326:	
  1076                           
  1077                           ;main.c: 252: else if(ledStep > 3)
  1078  01F1  3004               	movlw	4
  1079  01F2  027A               	subwf	_ledStep,w
  1080  01F3  1C03               	skipc
  1081  01F4  29FC               	goto	l2330
  1082                           
  1083                           ;main.c: 253: {
  1084                           ;main.c: 254: PORTB &= 0xFC;
  1085  01F5  30FC               	movlw	252
  1086  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1087  01F7  0586               	andwf	6,f	;volatile
  1088                           
  1089                           ;main.c: 255: PORTA &= 0xF3;
  1090  01F8  30F3               	movlw	243
  1091  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  1092  01FA  0586               	andwf	6,f	;volatile
  1093                           
  1094                           ;main.c: 256: }
  1095  01FB  0008               	return
  1096  01FC                     l2330:	
  1097                           
  1098                           ;main.c: 257: else if(ledStep > 2)
  1099  01FC  3003               	movlw	3
  1100  01FD  027A               	subwf	_ledStep,w
  1101  01FE  1C03               	skipc
  1102  01FF  2A06               	goto	l2336
  1103                           
  1104                           ;main.c: 258: {
  1105                           ;main.c: 259: PORTB &= 0xFC;
  1106  0200  30FC               	movlw	252
  1107  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0202  0586               	andwf	6,f	;volatile
  1109                           
  1110                           ;main.c: 260: PORTA &= 0xFB;
  1111  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1112  0204  1106               	bcf	6,2	;volatile
  1113                           
  1114                           ;main.c: 261: }
  1115  0205  0008               	return
  1116  0206                     l2336:	
  1117                           
  1118                           ;main.c: 262: else if(ledStep > 1)
  1119  0206  3002               	movlw	2
  1120  0207  027A               	subwf	_ledStep,w
  1121  0208  1C03               	skipc
  1122  0209  2A0E               	goto	l2340
  1123                           
  1124                           ;main.c: 263: {
  1125                           ;main.c: 264: PORTB &= 0xFC;
  1126  020A  30FC               	movlw	252
  1127  020B  1283               	bcf	3,5	;RP0=0, select bank0
  1128  020C  0586               	andwf	6,f	;volatile
  1129                           
  1130                           ;main.c: 265: }
  1131  020D  0008               	return
  1132  020E                     l2340:	
  1133                           
  1134                           ;main.c: 266: else if(ledStep > 0)
  1135  020E  087A               	movf	_ledStep,w
  1136  020F  1903               	btfsc	3,2
  1137  0210  0008               	return
  1138                           
  1139                           ;main.c: 267: {
  1140                           ;main.c: 268: PORTB &= 0xFE;
  1141  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1142  0212  1006               	bcf	6,0	;volatile
  1143  0213  0008               	return
  1144  0214                     __end_of_ledCtr:	
  1145                           
  1146                           	psect	text5
  1147  03D5                     __ptext5:	
  1148 ;; *************** function ___lbmod *****************
  1149 ;; Defined at:
  1150 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  dividend        1    wreg     unsigned char 
  1153 ;;  divisor         1    2[COMMON] unsigned char 
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;  dividend        1    4[COMMON] unsigned char 
  1156 ;;  rem             1    6[COMMON] unsigned char 
  1157 ;;  counter         1    5[COMMON] unsigned char 
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      unsigned char 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2, status,0
  1162 ;; Tracked objects:
  1163 ;;		On entry : 100/0
  1164 ;;		On exit  : 100/0
  1165 ;;		Unchanged: 100/0
  1166 ;; Data sizes:     COMMON   BANK0   BANK1
  1167 ;;      Params:         1       0       0
  1168 ;;      Locals:         3       0       0
  1169 ;;      Temps:          1       0       0
  1170 ;;      Totals:         5       0       0
  1171 ;;Total ram usage:        5 bytes
  1172 ;; Hardware stack levels used:    1
  1173 ;; Hardware stack levels required when called:    1
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_ledCtr
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           
  1182                           ;psect for function ___lbmod
  1183  03D5                     ___lbmod:	
  1184                           
  1185                           ;incstack = 0
  1186                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1187                           ;___lbmod@dividend stored from wreg
  1188  03D5  00F4               	movwf	___lbmod@dividend
  1189  03D6  3008               	movlw	8
  1190  03D7  00F5               	movwf	___lbmod@counter
  1191  03D8  01F6               	clrf	___lbmod@rem
  1192  03D9                     l2022:	
  1193  03D9  0874               	movf	___lbmod@dividend,w
  1194  03DA  00F3               	movwf	??___lbmod
  1195  03DB  3007               	movlw	7
  1196  03DC  1003               	clrc
  1197  03DD                     L2:	
  1198  03DD  0CF3               	rrf	??___lbmod,f
  1199  03DE  3EFF               	addlw	-1
  1200  03DF  1003               	clrc
  1201  03E0  1D03               	skipz
  1202  03E1  2BDD               	goto	L2
  1203  03E2  0D76               	rlf	___lbmod@rem,w
  1204  03E3  0473               	iorwf	??___lbmod,w
  1205  03E4  00F6               	movwf	___lbmod@rem
  1206  03E5  1003               	clrc
  1207  03E6  0DF4               	rlf	___lbmod@dividend,f
  1208  03E7  0872               	movf	___lbmod@divisor,w
  1209  03E8  0276               	subwf	___lbmod@rem,w
  1210  03E9  1C03               	skipc
  1211  03EA  2BED               	goto	l2030
  1212  03EB  0872               	movf	___lbmod@divisor,w
  1213  03EC  02F6               	subwf	___lbmod@rem,f
  1214  03ED                     l2030:	
  1215  03ED  0BF5               	decfsz	___lbmod@counter,f
  1216  03EE  2BD9               	goto	l2022
  1217  03EF  0876               	movf	___lbmod@rem,w
  1218  03F0  0008               	return
  1219  03F1                     __end_of___lbmod:	
  1220                           
  1221                           	psect	text6
  1222  036C                     __ptext6:	
  1223 ;; *************** function _keyCtr *****************
  1224 ;; Defined at:
  1225 ;;		line 370 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;		None
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;  kclick          1    3[COMMON] unsigned char 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0, pclath, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 100/0
  1236 ;;		On exit  : 100/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMMON   BANK0   BANK1
  1239 ;;      Params:         0       0       0
  1240 ;;      Locals:         1       0       0
  1241 ;;      Temps:          0       0       0
  1242 ;;      Totals:         1       0       0
  1243 ;;Total ram usage:        1 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    2
  1246 ;; This function calls:
  1247 ;;		_keyRead
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _keyCtr
  1255  036C                     _keyCtr:	
  1256                           
  1257                           ;main.c: 372: char kclick = keyRead(0x10 & (~PORTB));
  1258                           
  1259                           ;incstack = 0
  1260                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1261  036C  0906               	comf	6,w	;volatile
  1262  036D  3910               	andlw	16
  1263  036E  23B7               	fcall	_keyRead
  1264  036F  00F3               	movwf	keyCtr@kclick
  1265                           
  1266                           ;main.c: 373: if(kclick == 1)
  1267  0370  0B73               	decfsz	keyCtr@kclick,w
  1268  0371  2B86               	goto	l2218
  1269                           
  1270                           ;main.c: 374: {
  1271                           ;main.c: 375: if(workStep > 0)
  1272  0372  087B               	movf	_workStep,w
  1273  0373  1903               	btfsc	3,2
  1274  0374  2B7D               	goto	l2210
  1275                           
  1276                           ;main.c: 376: {
  1277                           ;main.c: 377: if(++workStep > 6)
  1278  0375  3007               	movlw	7
  1279  0376  0AFB               	incf	_workStep,f
  1280  0377  027B               	subwf	_workStep,w
  1281  0378  1C03               	skipc
  1282  0379  0008               	return
  1283                           
  1284                           ;main.c: 378: {
  1285                           ;main.c: 379: workStep = 1;
  1286  037A  01FB               	clrf	_workStep
  1287  037B  0AFB               	incf	_workStep,f
  1288  037C  0008               	return
  1289  037D                     l2210:	
  1290                           
  1291                           ;main.c: 382: else if(showBatTime > 0)
  1292  037D  0836               	movf	_showBatTime,w
  1293  037E  1903               	btfsc	3,2
  1294  037F  2B82               	goto	l2214
  1295  0380                     l2212:	
  1296                           
  1297                           ;main.c: 383: {
  1298                           ;main.c: 384: showBatTime = 0;
  1299  0380  01B6               	clrf	_showBatTime
  1300                           
  1301                           ;main.c: 385: }
  1302  0381  0008               	return
  1303  0382                     l2214:	
  1304                           
  1305                           ;main.c: 386: else
  1306                           ;main.c: 387: {
  1307                           ;main.c: 388: showBatTime = 200;
  1308  0382  30C8               	movlw	200
  1309  0383  00B6               	movwf	_showBatTime
  1310                           
  1311                           ;main.c: 389: count1s = 0;
  1312  0384  01C3               	clrf	_count1s
  1313  0385  0008               	return
  1314  0386                     l2218:	
  1315                           
  1316                           ;main.c: 392: else if(kclick == 2)
  1317  0386  3002               	movlw	2
  1318  0387  0673               	xorwf	keyCtr@kclick,w
  1319  0388  1D03               	btfss	3,2
  1320  0389  0008               	return
  1321                           
  1322                           ;main.c: 393: {
  1323                           ;main.c: 394: if(workStep > 0)
  1324  038A  087B               	movf	_workStep,w
  1325  038B  1903               	btfsc	3,2
  1326  038C  2B8F               	goto	l740
  1327                           
  1328                           ;main.c: 395: {
  1329                           ;main.c: 396: workStep = 0;
  1330  038D  01FB               	clrf	_workStep
  1331                           
  1332                           ;main.c: 397: }
  1333  038E  0008               	return
  1334  038F                     l740:	
  1335  038F  301E               	movlw	30
  1336                           
  1337                           ;main.c: 398: else
  1338                           ;main.c: 399: {
  1339                           ;main.c: 400: workStep = 1;
  1340  0390  01FB               	clrf	_workStep
  1341  0391  0AFB               	incf	_workStep,f
  1342                           
  1343                           ;main.c: 401: startTime = 30;
  1344  0392  00B9               	movwf	_startTime
  1345  0393  2B80               	goto	l2212
  1346  0394                     __end_of_keyCtr:	
  1347                           
  1348                           	psect	text7
  1349  03B7                     __ptext7:	
  1350 ;; *************** function _keyRead *****************
  1351 ;; Defined at:
  1352 ;;		line 337 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  keyStatus       1    wreg     unsigned char 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  keyStatus       1    2[COMMON] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      unsigned char 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 100/0
  1363 ;;		On exit  : 100/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1
  1366 ;;      Params:         0       0       0
  1367 ;;      Locals:         1       0       0
  1368 ;;      Temps:          0       0       0
  1369 ;;      Totals:         1       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    1
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_keyCtr
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           
  1381                           ;psect for function _keyRead
  1382  03B7                     _keyRead:	
  1383                           
  1384                           ;incstack = 0
  1385                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1386                           ;keyRead@keyStatus stored from wreg
  1387  03B7  00F2               	movwf	keyRead@keyStatus
  1388                           
  1389                           ;main.c: 339: if(keyStatus)
  1390  03B8  0872               	movf	keyRead@keyStatus,w
  1391  03B9  3064               	movlw	100
  1392  03BA  1903               	btfsc	3,2
  1393  03BB  2BC9               	goto	L4
  1394                           
  1395                           ;main.c: 340: {
  1396                           ;main.c: 341: keyCount++;
  1397  03BC  0ABE               	incf	_keyCount,f
  1398                           
  1399                           ;main.c: 342: if(keyCount >= 100)
  1400  03BD  023E               	subwf	_keyCount,w
  1401  03BE  1C03               	skipc
  1402  03BF  3400               	retlw	0
  1403                           
  1404                           ;main.c: 343: {
  1405                           ;main.c: 344: keyCount = 100;
  1406  03C0  3064               	movlw	100
  1407  03C1  00BE               	movwf	_keyCount
  1408                           
  1409                           ;main.c: 345: if(!longPressFlag)
  1410  03C2  083D               	movf	_longPressFlag,w
  1411  03C3  1D03               	btfss	3,2
  1412  03C4  3400               	retlw	0
  1413  03C5  3002               	movlw	2
  1414                           
  1415                           ;main.c: 346: {
  1416                           ;main.c: 347: longPressFlag = 1;
  1417  03C6  01BD               	clrf	_longPressFlag
  1418  03C7  0ABD               	incf	_longPressFlag,f
  1419                           
  1420                           ;main.c: 348: return 2;
  1421  03C8  0008               	return
  1422  03C9                     L4:	
  1423                           ;main.c: 352: else
  1424                           ;main.c: 353: {
  1425                           ;main.c: 354: if(keyCount >= 100)
  1426                           
  1427  03C9  023E               	subwf	_keyCount,w
  1428  03CA  1C03               	skipc
  1429  03CB  2BCF               	goto	l1896
  1430                           
  1431                           ;main.c: 355: {
  1432                           ;main.c: 356: keyCount = 0;
  1433  03CC  01BE               	clrf	_keyCount
  1434                           
  1435                           ;main.c: 357: longPressFlag = 0;
  1436  03CD  01BD               	clrf	_longPressFlag
  1437                           
  1438                           ;main.c: 358: return 0;
  1439  03CE  3400               	retlw	0
  1440  03CF                     l1896:	
  1441                           
  1442                           ;main.c: 360: else if(keyCount >= 6)
  1443  03CF  3006               	movlw	6
  1444  03D0  023E               	subwf	_keyCount,w
  1445                           
  1446                           ;main.c: 361: {
  1447                           ;main.c: 362: keyCount = 0;
  1448  03D1  01BE               	clrf	_keyCount
  1449  03D2  1803               	btfsc	3,0
  1450                           
  1451                           ;main.c: 363: return 1;
  1452  03D3  3401               	retlw	1
  1453  03D4  3400               	retlw	0
  1454  03D5                     __end_of_keyRead:	
  1455                           ;main.c: 364: }
  1456                           ;main.c: 365: keyCount = 0;
  1457                           
  1458                           
  1459                           	psect	text8
  1460  0277                     __ptext8:	
  1461 ;; *************** function _chrgCtr *****************
  1462 ;; Defined at:
  1463 ;;		line 275 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;                  1    wreg      void 
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, status,0, pclath, cstack
  1472 ;; Tracked objects:
  1473 ;;		On entry : 100/0
  1474 ;;		On exit  : 100/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMMON   BANK0   BANK1
  1477 ;;      Params:         0       0       0
  1478 ;;      Locals:         0       0       0
  1479 ;;      Temps:          0       0       0
  1480 ;;      Totals:         0       0       0
  1481 ;;Total ram usage:        0 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; Hardware stack levels required when called:    2
  1484 ;; This function calls:
  1485 ;;		___lbdiv
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _chrgCtr
  1493  0277                     _chrgCtr:	
  1494                           
  1495                           ;main.c: 277: if(PORTB & 0x04)
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1499  0277  1D06               	btfss	6,2	;volatile
  1500  0278  2AA2               	goto	l2144
  1501                           
  1502                           ;main.c: 278: {
  1503                           ;main.c: 279: if(chrgFlag == 0)
  1504  0279  0841               	movf	_chrgFlag,w
  1505  027A  1D03               	btfss	3,2
  1506  027B  2A7F               	goto	l709
  1507                           
  1508                           ;main.c: 280: {
  1509                           ;main.c: 281: chrgFlag = 1;
  1510  027C  01C1               	clrf	_chrgFlag
  1511  027D  0AC1               	incf	_chrgFlag,f
  1512                           
  1513                           ;main.c: 283: chrgMaxDuty = 0;
  1514  027E  01FA               	clrf	_ledStep
  1515  027F                     l709:	
  1516                           
  1517                           ;main.c: 284: }
  1518                           ;main.c: 285: workStep = 0;
  1519  027F  01FB               	clrf	_workStep
  1520                           
  1521                           ;main.c: 286: lowBatFlag = 0;
  1522  0280  01B3               	clrf	_lowBatFlag
  1523                           
  1524                           ;main.c: 287: if(prePwStep < pwStep)
  1525  0281  0838               	movf	_pwStep,w
  1526  0282  0279               	subwf	_prePwStep,w
  1527  0283  1803               	skipnc
  1528  0284  2A93               	goto	l2136
  1529                           
  1530                           ;main.c: 288: {
  1531                           ;main.c: 289: if(++count50s > 7200)
  1532  0285  0AA6               	incf	_count50s,f
  1533  0286  1903               	skipnz
  1534  0287  0AA7               	incf	_count50s+1,f
  1535  0288  301C               	movlw	28
  1536  0289  0227               	subwf	_count50s+1,w
  1537  028A  3021               	movlw	33
  1538  028B  1903               	skipnz
  1539  028C  0226               	subwf	_count50s,w
  1540  028D  1C03               	skipc
  1541  028E  2A95               	goto	l2138
  1542                           
  1543                           ;main.c: 290: {
  1544                           ;main.c: 291: count50s = 0;
  1545  028F  01A6               	clrf	_count50s
  1546  0290  01A7               	clrf	_count50s+1
  1547                           
  1548                           ;main.c: 292: prePwStep++;
  1549  0291  0AF9               	incf	_prePwStep,f
  1550  0292  2A95               	goto	l2138
  1551  0293                     l2136:	
  1552                           
  1553                           ;main.c: 295: else
  1554                           ;main.c: 296: {
  1555                           ;main.c: 297: count50s = 0;
  1556  0293  01A6               	clrf	_count50s
  1557  0294  01A7               	clrf	_count50s+1
  1558  0295                     l2138:	
  1559                           
  1560                           ;main.c: 298: }
  1561                           ;main.c: 299: if(prePwStep < 15)
  1562  0295  300F               	movlw	15
  1563  0296  0279               	subwf	_prePwStep,w
  1564  0297  1803               	skipnc
  1565  0298  2A9B               	goto	l2142
  1566                           
  1567                           ;main.c: 300: {
  1568                           ;main.c: 301: lockLedStep = 0;
  1569  0299  01B7               	clrf	_lockLedStep
  1570                           
  1571                           ;main.c: 302: }
  1572  029A  0008               	return
  1573  029B                     l2142:	
  1574                           
  1575                           ;main.c: 303: else
  1576                           ;main.c: 304: {
  1577                           ;main.c: 305: lockLedStep = (prePwStep/14) - 1;
  1578  029B  300E               	movlw	14
  1579  029C  00F2               	movwf	___lbdiv@divisor
  1580  029D  0879               	movf	_prePwStep,w
  1581  029E  23F1               	fcall	___lbdiv
  1582  029F  3EFF               	addlw	255
  1583  02A0  00B7               	movwf	_lockLedStep
  1584  02A1  0008               	return
  1585  02A2                     l2144:	
  1586                           
  1587                           ;main.c: 317: lockCount = 0;
  1588  02A2  01C1               	clrf	_chrgFlag
  1589                           
  1590                           ;main.c: 319: chrgWaitTime = 20;
  1591  02A3  01B7               	clrf	_lockLedStep
  1592                           
  1593                           ;main.c: 320: if(prePwStep > 0 && prePwStep > pwStep)
  1594  02A4  0879               	movf	_prePwStep,w
  1595  02A5  1903               	btfsc	3,2
  1596  02A6  2AB9               	goto	l2156
  1597  02A7  0879               	movf	_prePwStep,w
  1598  02A8  0238               	subwf	_pwStep,w
  1599  02A9  1803               	skipnc
  1600  02AA  2AB9               	goto	l2156
  1601                           
  1602                           ;main.c: 321: {
  1603                           ;main.c: 322: if(++count50s > 2000)
  1604  02AB  0AA6               	incf	_count50s,f
  1605  02AC  1903               	skipnz
  1606  02AD  0AA7               	incf	_count50s+1,f
  1607  02AE  3007               	movlw	7
  1608  02AF  0227               	subwf	_count50s+1,w
  1609  02B0  30D1               	movlw	209
  1610  02B1  1903               	skipnz
  1611  02B2  0226               	subwf	_count50s,w
  1612  02B3  1C03               	skipc
  1613  02B4  0008               	return
  1614                           
  1615                           ;main.c: 323: {
  1616                           ;main.c: 324: count50s = 0;
  1617  02B5  01A6               	clrf	_count50s
  1618  02B6  01A7               	clrf	_count50s+1
  1619                           
  1620                           ;main.c: 325: prePwStep--;
  1621  02B7  03F9               	decf	_prePwStep,f
  1622  02B8  0008               	return
  1623  02B9                     l2156:	
  1624                           
  1625                           ;main.c: 328: else
  1626                           ;main.c: 329: {
  1627                           ;main.c: 330: count50s = 0;
  1628  02B9  01A6               	clrf	_count50s
  1629  02BA  01A7               	clrf	_count50s+1
  1630  02BB  0008               	return
  1631  02BC                     __end_of_chrgCtr:	
  1632                           
  1633                           	psect	text9
  1634  03F1                     __ptext9:	
  1635 ;; *************** function ___lbdiv *****************
  1636 ;; Defined at:
  1637 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  dividend        1    wreg     unsigned char 
  1640 ;;  divisor         1    2[COMMON] unsigned char 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  dividend        1    3[COMMON] unsigned char 
  1643 ;;  quotient        1    5[COMMON] unsigned char 
  1644 ;;  counter         1    4[COMMON] unsigned char 
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      unsigned char 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, status,0
  1649 ;; Tracked objects:
  1650 ;;		On entry : 100/0
  1651 ;;		On exit  : 100/0
  1652 ;;		Unchanged: 100/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1
  1654 ;;      Params:         1       0       0
  1655 ;;      Locals:         3       0       0
  1656 ;;      Temps:          0       0       0
  1657 ;;      Totals:         4       0       0
  1658 ;;Total ram usage:        4 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    1
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_ledCtr
  1665 ;;		_chrgCtr
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function ___lbdiv
  1671  03F1                     ___lbdiv:	
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1675                           ;___lbdiv@dividend stored from wreg
  1676  03F1  00F3               	movwf	___lbdiv@dividend
  1677  03F2  01F5               	clrf	___lbdiv@quotient
  1678  03F3  0872               	movf	___lbdiv@divisor,w
  1679  03F4  1903               	btfsc	3,2
  1680  03F5  2C0A               	goto	l2014
  1681  03F6  01F4               	clrf	___lbdiv@counter
  1682  03F7                     l2000:	
  1683  03F7  0AF4               	incf	___lbdiv@counter,f
  1684  03F8  1BF2               	btfsc	___lbdiv@divisor,7
  1685  03F9  2BFD               	goto	l1102
  1686  03FA  1003               	clrc
  1687  03FB  0DF2               	rlf	___lbdiv@divisor,f
  1688  03FC  2BF7               	goto	l2000
  1689  03FD                     l1102:	
  1690  03FD  1003               	clrc
  1691  03FE  0DF5               	rlf	___lbdiv@quotient,f
  1692  03FF  0872               	movf	___lbdiv@divisor,w
  1693  0400  0273               	subwf	___lbdiv@dividend,w
  1694  0401  1C03               	skipc
  1695  0402  2C07               	goto	L5
  1696  0403  0872               	movf	___lbdiv@divisor,w
  1697  0404  02F3               	subwf	___lbdiv@dividend,f
  1698  0405  1475               	bsf	___lbdiv@quotient,0
  1699  0406  1003               	clrc
  1700  0407                     L5:	
  1701  0407  0CF2               	rrf	___lbdiv@divisor,f
  1702  0408  0BF4               	decfsz	___lbdiv@counter,f
  1703  0409  2BFD               	goto	l1102
  1704  040A                     l2014:	
  1705  040A  0875               	movf	___lbdiv@quotient,w
  1706  040B  0008               	return
  1707  040C                     __end_of___lbdiv:	
  1708                           
  1709                           	psect	text10
  1710  00FB                     __ptext10:	
  1711 ;; *************** function _checkOutA *****************
  1712 ;; Defined at:
  1713 ;;		line 448 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;		None
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  maxAout         1   14[BANK0 ] unsigned char 
  1718 ;;  maxtempV        1    0        unsigned char 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,2, status,0, pclath, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 100/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMMON   BANK0   BANK1
  1728 ;;      Params:         0       0       0
  1729 ;;      Locals:         0       2       0
  1730 ;;      Temps:          2       0       0
  1731 ;;      Totals:         2       2       0
  1732 ;;Total ram usage:        4 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    2
  1735 ;; This function calls:
  1736 ;;		_ADC_Sample
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           
  1743                           ;psect for function _checkOutA
  1744  00FB                     _checkOutA:	
  1745                           
  1746                           ;main.c: 450: test_adc = ADC_Sample(0, 5);
  1747                           
  1748                           ;incstack = 0
  1749                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  1750  00FB  3005               	movlw	5
  1751  00FC  00F2               	movwf	ADC_Sample@adldo
  1752  00FD  3000               	movlw	0
  1753  00FE  2015               	fcall	_ADC_Sample
  1754  00FF  00C5               	movwf	_test_adc	;volatile
  1755                           
  1756                           ;main.c: 451: if (0xA5 == test_adc)
  1757  0100  30A5               	movlw	165
  1758  0101  0645               	xorwf	_test_adc,w	;volatile
  1759  0102  1D03               	btfss	3,2
  1760  0103  2981               	goto	l2604
  1761                           
  1762                           ;main.c: 452: {
  1763                           ;main.c: 454: outADValue = adresult;
  1764  0104  0831               	movf	_adresult+1,w	;volatile
  1765  0105  00AB               	movwf	_outADValue+1
  1766  0106  0830               	movf	_adresult,w	;volatile
  1767  0107  00AA               	movwf	_outADValue
  1768                           
  1769                           ;main.c: 456: if(workStep && (outADValue > 800))
  1770  0108  087B               	movf	_workStep,w
  1771  0109  1903               	btfsc	3,2
  1772  010A  291A               	goto	l2538
  1773  010B  3003               	movlw	3
  1774  010C  022B               	subwf	_outADValue+1,w
  1775  010D  3021               	movlw	33
  1776  010E  1903               	skipnz
  1777  010F  022A               	subwf	_outADValue,w
  1778  0110  1C03               	skipc
  1779  0111  291A               	goto	l2538
  1780                           
  1781                           ;main.c: 457: {
  1782                           ;main.c: 458: if(++workOverOutTime > 50)
  1783  0112  3033               	movlw	51
  1784  0113  0ABF               	incf	_workOverOutTime,f
  1785  0114  023F               	subwf	_workOverOutTime,w
  1786  0115  1C03               	skipc
  1787  0116  291B               	goto	l2542
  1788                           
  1789                           ;main.c: 459: {
  1790                           ;main.c: 460: workOverOutTime = 0;
  1791  0117  01BF               	clrf	_workOverOutTime
  1792                           
  1793                           ;main.c: 461: workStep = 0;
  1794  0118  01FB               	clrf	_workStep
  1795  0119  291B               	goto	l2542
  1796  011A                     l2538:	
  1797                           
  1798                           ;main.c: 464: else
  1799                           ;main.c: 465: {
  1800                           ;main.c: 466: workOverOutTime = 0;
  1801  011A  01BF               	clrf	_workOverOutTime
  1802  011B                     l2542:	
  1803                           
  1804                           ;main.c: 469: if(workStep < 6 && outADValue > maxtempV)
  1805  011B  3006               	movlw	6
  1806  011C  027B               	subwf	_workStep,w
  1807  011D  1803               	skipnc
  1808  011E  292E               	goto	l2550
  1809  011F  3000               	movlw	0
  1810  0120  022B               	subwf	_outADValue+1,w
  1811  0121  30C9               	movlw	201
  1812  0122  1903               	skipnz
  1813  0123  022A               	subwf	_outADValue,w
  1814  0124  1C03               	skipc
  1815  0125  292E               	goto	l2550
  1816  0126                     l2546:	
  1817                           
  1818                           ;main.c: 470: {
  1819                           ;main.c: 471: if(++overCount > 5)
  1820  0126  3006               	movlw	6
  1821  0127  0ABB               	incf	_overCount,f
  1822  0128  023B               	subwf	_overCount,w
  1823  0129  1C03               	skipc
  1824  012A  297A               	goto	l2600
  1825                           
  1826                           ;main.c: 472: {
  1827                           ;main.c: 473: overCount = 5;
  1828  012B  3005               	movlw	5
  1829  012C  00BB               	movwf	_overCount
  1830  012D  297A               	goto	l2600
  1831  012E                     l2550:	
  1832                           
  1833                           ;main.c: 476: else if(outADValue > (maxtempV+100))
  1834  012E  3001               	movlw	1
  1835  012F  022B               	subwf	_outADValue+1,w
  1836  0130  302D               	movlw	45
  1837  0131  1903               	skipnz
  1838  0132  022A               	subwf	_outADValue,w
  1839  0133  1803               	btfsc	3,0
  1840  0134  2926               	goto	l2546
  1841                           
  1842                           ;main.c: 483: else
  1843                           ;main.c: 484: {
  1844                           ;main.c: 485: unsigned char maxAout = 40;
  1845                           
  1846                           ;main.c: 477: {
  1847                           ;main.c: 478: if(++overCount > 5)
  1848  0135  3028               	movlw	40
  1849  0136  00D4               	movwf	checkOutA@maxAout
  1850                           
  1851                           ;main.c: 486: if(pwStep < 40)
  1852  0137  0238               	subwf	_pwStep,w
  1853  0138  1803               	skipnc
  1854  0139  293C               	goto	l2560
  1855                           
  1856                           ;main.c: 487: {
  1857                           ;main.c: 488: maxAout = 37;
  1858  013A  3025               	movlw	37
  1859  013B  00D4               	movwf	checkOutA@maxAout
  1860  013C                     l2560:	
  1861                           
  1862                           ;main.c: 489: }
  1863                           ;main.c: 490: if(workStep == 1)
  1864  013C  0B7B               	decfsz	_workStep,w
  1865  013D  2940               	goto	l2564
  1866                           
  1867                           ;main.c: 491: {
  1868                           ;main.c: 492: maxAout = maxAout + 1;
  1869  013E  0AD4               	incf	checkOutA@maxAout,f
  1870                           
  1871                           ;main.c: 493: }
  1872  013F  295C               	goto	l768
  1873  0140                     l2564:	
  1874                           
  1875                           ;main.c: 494: else if(workStep == 2)
  1876  0140  3002               	movlw	2
  1877  0141  067B               	xorwf	_workStep,w
  1878                           
  1879                           ;main.c: 495: {
  1880                           ;main.c: 496: maxAout = maxAout + 3;
  1881  0142  3003               	movlw	3
  1882  0143  1903               	btfsc	3,2
  1883  0144  295B               	goto	L9
  1884                           
  1885                           ;main.c: 498: else if(workStep == 3)
  1886                           
  1887                           ;main.c: 497: }
  1888  0145  067B               	xorwf	_workStep,w
  1889  0146  1D03               	btfss	3,2
  1890  0147  294A               	goto	l2572
  1891                           
  1892                           ;main.c: 499: {
  1893                           ;main.c: 500: maxAout = maxAout + 5;
  1894  0148  3005               	movlw	5
  1895  0149  295B               	goto	L9
  1896  014A                     l2572:	
  1897                           ;main.c: 501: }
  1898                           
  1899                           
  1900                           ;main.c: 502: else if(workStep == 4)
  1901  014A  3004               	movlw	4
  1902  014B  067B               	xorwf	_workStep,w
  1903  014C  1D03               	btfss	3,2
  1904  014D  2950               	goto	l2576
  1905                           
  1906                           ;main.c: 503: {
  1907                           ;main.c: 504: maxAout = maxAout + 7;
  1908  014E  3007               	movlw	7
  1909  014F  295B               	goto	L9
  1910  0150                     l2576:	
  1911                           ;main.c: 505: }
  1912                           
  1913                           
  1914                           ;main.c: 506: else if(workStep == 5)
  1915  0150  3005               	movlw	5
  1916  0151  067B               	xorwf	_workStep,w
  1917  0152  1D03               	btfss	3,2
  1918  0153  2956               	goto	l2580
  1919                           
  1920                           ;main.c: 507: {
  1921                           ;main.c: 508: maxAout = maxAout + 9;
  1922  0154  3009               	movlw	9
  1923  0155  295B               	goto	L9
  1924  0156                     l2580:	
  1925                           ;main.c: 509: }
  1926                           
  1927                           
  1928                           ;main.c: 510: else if(workStep == 6)
  1929  0156  3006               	movlw	6
  1930  0157  067B               	xorwf	_workStep,w
  1931  0158  1D03               	btfss	3,2
  1932  0159  295C               	goto	l768
  1933                           
  1934                           ;main.c: 511: {
  1935                           ;main.c: 512: maxAout = maxAout + 12;
  1936  015A  300C               	movlw	12
  1937  015B                     L9:	
  1938  015B  07D4               	addwf	checkOutA@maxAout,f
  1939  015C                     l768:	
  1940                           
  1941                           ;main.c: 513: }
  1942                           ;main.c: 514: if(overCount > 0)
  1943  015C  083B               	movf	_overCount,w
  1944  015D  1D03               	btfss	3,2
  1945                           
  1946                           ;main.c: 515: {
  1947                           ;main.c: 516: overCount--;
  1948  015E  03BB               	decf	_overCount,f
  1949                           
  1950                           ;main.c: 517: }
  1951                           ;main.c: 518: if(outADValue > maxAout)
  1952  015F  0854               	movf	checkOutA@maxAout,w
  1953  0160  00F7               	movwf	??_checkOutA
  1954  0161  01F8               	clrf	??_checkOutA+1
  1955  0162  082B               	movf	_outADValue+1,w
  1956  0163  0278               	subwf	??_checkOutA+1,w
  1957  0164  1D03               	skipz
  1958  0165  2968               	goto	u2515
  1959  0166  082A               	movf	_outADValue,w
  1960  0167  0277               	subwf	??_checkOutA,w
  1961  0168                     u2515:	
  1962  0168  1803               	skipnc
  1963  0169  2975               	goto	l2594
  1964                           
  1965                           ;main.c: 519: {
  1966                           ;main.c: 521: if(startTime == 0)
  1967  016A  0839               	movf	_startTime,w
  1968  016B  1D03               	btfss	3,2
  1969  016C  2972               	goto	l2592
  1970                           
  1971                           ;main.c: 522: {
  1972                           ;main.c: 523: tempDuty = 81 + (workStep*3);
  1973  016D  087B               	movf	_workStep,w
  1974  016E  077B               	addwf	_workStep,w
  1975  016F  077B               	addwf	_workStep,w
  1976  0170  3E51               	addlw	81
  1977  0171  2973               	goto	L10
  1978  0172                     l2592:	
  1979                           ;main.c: 524: }
  1980                           
  1981                           
  1982                           ;main.c: 525: else
  1983                           ;main.c: 526: {
  1984                           ;main.c: 527: tempDuty = maxDuty;
  1985  0172  083C               	movf	_maxDuty,w
  1986  0173                     L10:	
  1987  0173  00BA               	movwf	_tempDuty
  1988  0174  297A               	goto	l2600
  1989  0175                     l2594:	
  1990                           
  1991                           ;main.c: 535: if(tempDuty > maxDuty)
  1992  0175  083A               	movf	_tempDuty,w
  1993  0176  023C               	subwf	_maxDuty,w
  1994  0177  1803               	skipnc
  1995  0178  2972               	goto	l2592
  1996                           
  1997                           ;main.c: 536: {
  1998                           ;main.c: 537: tempDuty--;
  1999  0179  03BA               	decf	_tempDuty,f
  2000  017A                     l2600:	
  2001                           ;main.c: 538: }
  2002                           
  2003                           
  2004                           ;main.c: 542: }
  2005                           ;main.c: 544: }
  2006                           ;main.c: 546: }
  2007                           ;main.c: 547: PWMD23H = 0X00;
  2008  017A  1683               	bsf	3,5	;RP0=1, select bank1
  2009  017B  019E               	clrf	30	;volatile
  2010                           
  2011                           ;main.c: 548: PWMD2L = tempDuty;
  2012  017C  1283               	bcf	3,5	;RP0=0, select bank0
  2013  017D  083A               	movf	_tempDuty,w
  2014  017E  1683               	bsf	3,5	;RP0=1, select bank1
  2015  017F  009B               	movwf	27	;volatile
  2016                           
  2017                           ;main.c: 549: }
  2018  0180  0008               	return
  2019  0181                     l2604:	
  2020                           
  2021                           ;main.c: 550: else
  2022                           ;main.c: 551: {
  2023                           ;main.c: 552: ADCON0 = 0;
  2024  0181  1683               	bsf	3,5	;RP0=1, select bank1
  2025  0182  0195               	clrf	21	;volatile
  2026                           
  2027                           ;main.c: 553: ADCON1 = 0;
  2028  0183  0196               	clrf	22	;volatile
  2029                           
  2030                           ;main.c: 554: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2031  0184  3085               	movlw	133
  2032  0185  00F7               	movwf	??_checkOutA
  2033  0186                     u2717:	
  2034  0186  0BF7               	decfsz	??_checkOutA,f
  2035  0187  2986               	goto	u2717
  2036  0188  0008               	return
  2037  0189                     __end_of_checkOutA:	
  2038                           
  2039                           	psect	text11
  2040  0214                     __ptext11:	
  2041 ;; *************** function _checkBatAD *****************
  2042 ;; Defined at:
  2043 ;;		line 558 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0, pclath, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 100/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1
  2057 ;;      Params:         0       0       0
  2058 ;;      Locals:         0       0       0
  2059 ;;      Temps:          2       0       0
  2060 ;;      Totals:         2       0       0
  2061 ;;Total ram usage:        2 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    2
  2064 ;; This function calls:
  2065 ;;		_ADC_Sample
  2066 ;; This function is called by:
  2067 ;;		_main
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           
  2072                           ;psect for function _checkBatAD
  2073  0214                     _checkBatAD:	
  2074                           
  2075                           ;main.c: 560: test_adc = ADC_Sample(1, 5);
  2076                           
  2077                           ;incstack = 0
  2078                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2079  0214  3005               	movlw	5
  2080  0215  00F2               	movwf	ADC_Sample@adldo
  2081  0216  3001               	movlw	1
  2082  0217  2015               	fcall	_ADC_Sample
  2083  0218  00C5               	movwf	_test_adc	;volatile
  2084                           
  2085                           ;main.c: 561: if (0xA5 == test_adc)
  2086  0219  30A5               	movlw	165
  2087  021A  0645               	xorwf	_test_adc,w	;volatile
  2088  021B  1D03               	btfss	3,2
  2089  021C  2A6F               	goto	l2646
  2090                           
  2091                           ;main.c: 562: {
  2092                           ;main.c: 563: batADValue = adresult;
  2093  021D  0831               	movf	_adresult+1,w	;volatile
  2094  021E  00A9               	movwf	_batADValue+1
  2095  021F  0830               	movf	_adresult,w	;volatile
  2096  0220  00A8               	movwf	_batADValue
  2097                           
  2098                           ;main.c: 564: if(batADValue < 1117)
  2099  0221  3004               	movlw	4
  2100  0222  0229               	subwf	_batADValue+1,w
  2101  0223  305D               	movlw	93
  2102  0224  1903               	skipnz
  2103  0225  0228               	subwf	_batADValue,w
  2104  0226  1803               	skipnc
  2105  0227  2A41               	goto	l2630
  2106                           
  2107                           ;main.c: 565: {
  2108                           ;main.c: 566: pwStep = 0;
  2109  0228  01B8               	clrf	_pwStep
  2110                           
  2111                           ;main.c: 567: if(++count8s > 800)
  2112  0229  0AA2               	incf	_count8s,f
  2113  022A  1903               	skipnz
  2114  022B  0AA3               	incf	_count8s+1,f
  2115  022C  3003               	movlw	3
  2116  022D  0223               	subwf	_count8s+1,w
  2117  022E  3021               	movlw	33
  2118  022F  1903               	skipnz
  2119  0230  0222               	subwf	_count8s,w
  2120  0231  1C03               	skipc
  2121  0232  0008               	return
  2122                           
  2123                           ;main.c: 568: {
  2124                           ;main.c: 569: count8s = 0;
  2125  0233  01A2               	clrf	_count8s
  2126  0234  01A3               	clrf	_count8s+1
  2127                           
  2128                           ;main.c: 570: lowBatFlag = 1;
  2129  0235  01B3               	clrf	_lowBatFlag
  2130  0236  0AB3               	incf	_lowBatFlag,f
  2131                           
  2132                           ;main.c: 571: if(workStep > 0)
  2133  0237  087B               	movf	_workStep,w
  2134  0238  1903               	btfsc	3,2
  2135  0239  2A3E               	goto	l2626
  2136                           
  2137                           ;main.c: 572: {
  2138                           ;main.c: 573: overWorkTime = 180;
  2139  023A  30B4               	movlw	180
  2140  023B  00B5               	movwf	_overWorkTime
  2141                           
  2142                           ;main.c: 574: preLedStep = workStep;
  2143  023C  087B               	movf	_workStep,w
  2144  023D  00B4               	movwf	_preLedStep
  2145  023E                     l2626:	
  2146                           
  2147                           ;main.c: 575: }
  2148                           ;main.c: 576: prePwStep = 0;
  2149  023E  01F9               	clrf	_prePwStep
  2150                           
  2151                           ;main.c: 577: workStep = 0;
  2152  023F  01FB               	clrf	_workStep
  2153  0240  0008               	return
  2154  0241                     l2630:	
  2155  0241  3005               	movlw	5
  2156                           
  2157                           ;main.c: 580: else
  2158                           ;main.c: 581: {
  2159                           ;main.c: 582: count8s = 0;
  2160  0242  01A2               	clrf	_count8s
  2161  0243  01A3               	clrf	_count8s+1
  2162                           
  2163                           ;main.c: 583: if(batADValue >= 1340)
  2164  0244  0229               	subwf	_batADValue+1,w
  2165  0245  303C               	movlw	60
  2166  0246  1903               	skipnz
  2167  0247  0228               	subwf	_batADValue,w
  2168                           
  2169                           ;main.c: 584: {
  2170                           ;main.c: 585: pwStep = ((batADValue - 1340) /2) + 13;
  2171  0248  0828               	movf	_batADValue,w
  2172  0249  1C03               	skipc
  2173  024A  2A58               	goto	L13
  2174  024B  3EC4               	addlw	196
  2175  024C  00F7               	movwf	??_checkBatAD
  2176  024D  0829               	movf	_batADValue+1,w
  2177  024E  1803               	skipnc
  2178  024F  3E01               	addlw	1
  2179  0250  3EFA               	addlw	250
  2180  0251  00F8               	movwf	??_checkBatAD+1
  2181  0252  1003               	clrc
  2182  0253  0CF8               	rrf	??_checkBatAD+1,f
  2183  0254  0CF7               	rrf	??_checkBatAD,f
  2184  0255  0877               	movf	??_checkBatAD,w
  2185  0256  3E0D               	addlw	13
  2186  0257  2A67               	goto	L12
  2187  0258                     L13:	
  2188                           ;main.c: 587: else
  2189                           ;main.c: 588: {
  2190                           ;main.c: 589: pwStep = (batADValue - 1117) / 16;
  2191                           
  2192                           ;main.c: 586: }
  2193                           
  2194  0258  3EA3               	addlw	163
  2195  0259  00F7               	movwf	??_checkBatAD
  2196  025A  0829               	movf	_batADValue+1,w
  2197  025B  1803               	skipnc
  2198  025C  3E01               	addlw	1
  2199  025D  3EFB               	addlw	251
  2200  025E  00F8               	movwf	??_checkBatAD+1
  2201  025F  3004               	movlw	4
  2202  0260                     u2595:	
  2203  0260  1003               	clrc
  2204  0261  0CF8               	rrf	??_checkBatAD+1,f
  2205  0262  0CF7               	rrf	??_checkBatAD,f
  2206  0263  3EFF               	addlw	-1
  2207  0264  1D03               	skipz
  2208  0265  2A60               	goto	u2595
  2209  0266  0877               	movf	??_checkBatAD,w
  2210  0267                     L12:	
  2211  0267  00B8               	movwf	_pwStep
  2212                           
  2213                           ;main.c: 590: }
  2214                           ;main.c: 591: if(pwStep > 99)
  2215  0268  3064               	movlw	100
  2216  0269  0238               	subwf	_pwStep,w
  2217  026A  1C03               	skipc
  2218  026B  0008               	return
  2219                           
  2220                           ;main.c: 592: {
  2221                           ;main.c: 593: pwStep = 99;
  2222  026C  3063               	movlw	99
  2223  026D  00B8               	movwf	_pwStep
  2224  026E  0008               	return
  2225  026F                     l2646:	
  2226                           
  2227                           ;main.c: 601: else
  2228                           ;main.c: 602: {
  2229                           ;main.c: 603: ADCON0 = 0;
  2230  026F  1683               	bsf	3,5	;RP0=1, select bank1
  2231  0270  0195               	clrf	21	;volatile
  2232                           
  2233                           ;main.c: 604: ADCON1 = 0;
  2234  0271  0196               	clrf	22	;volatile
  2235                           
  2236                           ;main.c: 605: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2237  0272  3085               	movlw	133
  2238  0273  00F7               	movwf	??_checkBatAD
  2239  0274                     u2727:	
  2240  0274  0BF7               	decfsz	??_checkBatAD,f
  2241  0275  2A74               	goto	u2727
  2242  0276  0008               	return
  2243  0277                     __end_of_checkBatAD:	
  2244                           
  2245                           	psect	text12
  2246  0015                     __ptext12:	
  2247 ;; *************** function _ADC_Sample *****************
  2248 ;; Defined at:
  2249 ;;		line 816 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  adch            1    wreg     unsigned char 
  2252 ;;  adldo           1    2[COMMON] unsigned char 
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  adch            1    1[BANK0 ] unsigned char 
  2255 ;;  j               1    0[BANK0 ] unsigned char 
  2256 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2257 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2258 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2259 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2260 ;;  i               1    2[BANK0 ] unsigned char 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  1    wreg      unsigned char 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0
  2265 ;; Tracked objects:
  2266 ;;		On entry : 100/0
  2267 ;;		On exit  : 100/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1
  2270 ;;      Params:         1       0       0
  2271 ;;      Locals:         0      13       0
  2272 ;;      Temps:          4       0       0
  2273 ;;      Totals:         5      13       0
  2274 ;;Total ram usage:       18 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_checkOutA
  2281 ;;		_checkBatAD
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _ADC_Sample
  2287  0015                     _ADC_Sample:	
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2291                           ;ADC_Sample@adch stored from wreg
  2292  0015  00C7               	movwf	ADC_Sample@adch
  2293                           
  2294                           ;main.c: 818: volatile unsigned long adsum = 0;
  2295                           
  2296                           ;main.c: 819: volatile unsigned int admin = 0, admax = 0;
  2297  0016  20ED               	fcall	PL4	;call to abstracted procedure
  2298                           
  2299                           ;main.c: 820: volatile unsigned int ad_temp = 0;
  2300  0017  01D1               	clrf	ADC_Sample@ad_temp	;volatile
  2301  0018  01D2               	clrf	ADC_Sample@ad_temp+1	;volatile
  2302                           
  2303                           ;main.c: 822: if ((!LDO_EN) && (adldo & 0x04) )
  2304  0019  1683               	bsf	3,5	;RP0=1, select bank1
  2305  001A  1D16               	btfss	22,2	;volatile
  2306  001B  1D72               	btfss	ADC_Sample@adldo,2
  2307  001C  2824               	goto	l2462
  2308                           
  2309                           ;main.c: 823: {
  2310                           ;main.c: 825: ADCON1 = adldo;
  2311  001D  0872               	movf	ADC_Sample@adldo,w
  2312  001E  0096               	movwf	22	;volatile
  2313                           
  2314                           ;main.c: 826: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2315  001F  3085               	movlw	133
  2316  0020  00F3               	movwf	??_ADC_Sample
  2317  0021                     u2737:	
  2318  0021  0BF3               	decfsz	??_ADC_Sample,f
  2319  0022  2821               	goto	u2737
  2320                           
  2321                           ;main.c: 827: }
  2322  0023  2826               	goto	l2464
  2323  0024                     l2462:	
  2324                           
  2325                           ;main.c: 828: else
  2326                           ;main.c: 829: ADCON1 = adldo;
  2327  0024  0872               	movf	ADC_Sample@adldo,w
  2328  0025  0096               	movwf	22	;volatile
  2329  0026                     l2464:	
  2330                           
  2331                           ;main.c: 831: if(adch & 0x10)
  2332  0026  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0027  1E47               	btfss	ADC_Sample@adch,4
  2334  0028  282E               	goto	l2472
  2335                           
  2336                           ;main.c: 832: {
  2337                           ;main.c: 833: CHS4 = 1;
  2338  0029  1683               	bsf	3,5	;RP0=1, select bank1
  2339  002A  1716               	bsf	22,6	;volatile
  2340                           
  2341                           ;main.c: 834: adch &= 0x0f;
  2342  002B  300F               	movlw	15
  2343  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2344  002D  05C7               	andwf	ADC_Sample@adch,f
  2345  002E                     l2472:	
  2346                           
  2347                           ;main.c: 837: for (i = 0; i < 10; i++)
  2348  002E  01C8               	clrf	ADC_Sample@i
  2349  002F                     l2478:	
  2350                           
  2351                           ;main.c: 838: {
  2352                           ;main.c: 839: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2353  002F  0847               	movf	ADC_Sample@adch,w
  2354  0030  00F3               	movwf	??_ADC_Sample
  2355  0031  3001               	movlw	1
  2356  0032  1003               	clrc
  2357  0033                     L14:	
  2358  0033  0DF3               	rlf	??_ADC_Sample,f
  2359  0034  3EFF               	addlw	-1
  2360  0035  1003               	clrc
  2361  0036  1D03               	skipz
  2362  0037  2833               	goto	L14
  2363  0038  0D73               	rlf	??_ADC_Sample,w
  2364  0039  3841               	iorlw	65
  2365  003A  1683               	bsf	3,5	;RP0=1, select bank1
  2366  003B  0095               	movwf	21	;volatile
  2367  003C  0000               	nop	;# 
  2368  003D  0000               	nop	;# 
  2369  003E  0000               	nop	;# 
  2370  003F  0000               	nop	;# 
  2371                           
  2372                           ;main.c: 844: GODONE = 1;
  2373  0040  1683               	bsf	3,5	;RP0=1, select bank1
  2374  0041  1495               	bsf	21,1	;volatile
  2375                           
  2376                           ;main.c: 846: unsigned char j = 0;
  2377  0042  1283               	bcf	3,5	;RP0=0, select bank0
  2378  0043  01C6               	clrf	ADC_Sample@j
  2379  0044                     l825:	
  2380                           ;main.c: 847: while (GODONE)
  2381                           
  2382  0044  1683               	bsf	3,5	;RP0=1, select bank1
  2383  0045  1C95               	btfss	21,1	;volatile
  2384  0046  284F               	goto	l2488
  2385                           
  2386                           ;main.c: 848: {
  2387                           ;main.c: 849: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2388  0047  2848               	nop2	;2 cycle nop
  2389  0048  2849               	nop2	;2 cycle nop
  2390  0049  284A               	nop2	;2 cycle nop
  2391  004A  284B               	nop2	;2 cycle nop
  2392                           
  2393                           ;main.c: 851: if (0 == (--j))
  2394  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2395  004C  0BC6               	decfsz	ADC_Sample@j,f
  2396  004D  2844               	goto	l825
  2397                           
  2398                           ;main.c: 852: return 0;
  2399  004E  3400               	retlw	0
  2400  004F                     l2488:	
  2401                           
  2402                           ;main.c: 853: }
  2403                           ;main.c: 855: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2404  004F  0819               	movf	25,w	;volatile
  2405  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2406  0051  00D1               	movwf	ADC_Sample@ad_temp	;volatile
  2407  0052  01D2               	clrf	ADC_Sample@ad_temp+1	;volatile
  2408  0053  0ED1               	swapf	ADC_Sample@ad_temp,f	;volatile
  2409  0054  0ED2               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2410  0055  30F0               	movlw	240
  2411  0056  05D2               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2412  0057  0851               	movf	ADC_Sample@ad_temp,w	;volatile
  2413  0058  390F               	andlw	15
  2414  0059  04D2               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2415  005A  30F0               	movlw	240
  2416  005B  05D1               	andwf	ADC_Sample@ad_temp,f	;volatile
  2417  005C  1683               	bsf	3,5	;RP0=1, select bank1
  2418  005D  0E18               	swapf	24,w	;volatile
  2419  005E  390F               	andlw	15
  2420  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0060  07D1               	addwf	ADC_Sample@ad_temp,f	;volatile
  2422  0061  1803               	skipnc
  2423  0062  0AD2               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2424                           
  2425                           ;main.c: 857: if (0 == admax)
  2426  0063  084F               	movf	ADC_Sample@admax,w	;volatile
  2427  0064  0450               	iorwf	ADC_Sample@admax+1,w	;volatile
  2428  0065  1D03               	btfss	3,2
  2429  0066  2869               	goto	l2496
  2430                           
  2431                           ;main.c: 858: {
  2432                           ;main.c: 859: admax = ad_temp;
  2433  0067  20F6               	fcall	PL6	;call to abstracted procedure
  2434  0068  287B               	goto	l2502
  2435  0069                     l2496:	
  2436                           ;main.c: 861: }
  2437                           
  2438                           ;main.c: 860: admin = ad_temp;
  2439                           
  2440                           
  2441                           ;main.c: 862: else if (ad_temp > admax)
  2442  0069  0852               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2443  006A  0250               	subwf	ADC_Sample@admax+1,w	;volatile
  2444  006B  1D03               	skipz
  2445  006C  286F               	goto	u2265
  2446  006D  0851               	movf	ADC_Sample@ad_temp,w	;volatile
  2447  006E  024F               	subwf	ADC_Sample@admax,w	;volatile
  2448  006F                     u2265:	
  2449  006F  1803               	skipnc
  2450  0070  2873               	goto	l2500
  2451                           
  2452                           ;main.c: 863: admax = ad_temp;
  2453  0071  20F6               	fcall	PL6	;call to abstracted procedure
  2454  0072  287F               	goto	l831
  2455  0073                     l2500:	
  2456                           
  2457                           ;main.c: 864: else if (ad_temp < admin)
  2458  0073  084E               	movf	ADC_Sample@admin+1,w	;volatile
  2459  0074  0252               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2460  0075  1D03               	skipz
  2461  0076  2879               	goto	u2275
  2462  0077  084D               	movf	ADC_Sample@admin,w	;volatile
  2463  0078  0251               	subwf	ADC_Sample@ad_temp,w	;volatile
  2464  0079                     u2275:	
  2465  0079  1803               	skipnc
  2466  007A  287F               	goto	l831
  2467  007B                     l2502:	
  2468                           
  2469                           ;main.c: 865: admin = ad_temp;
  2470  007B  0852               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2471  007C  00CE               	movwf	ADC_Sample@admin+1	;volatile
  2472  007D  0851               	movf	ADC_Sample@ad_temp,w	;volatile
  2473  007E  00CD               	movwf	ADC_Sample@admin	;volatile
  2474  007F                     l831:	
  2475                           
  2476                           ;main.c: 867: adsum += ad_temp;
  2477  007F  0851               	movf	ADC_Sample@ad_temp,w	;volatile
  2478  0080  00F3               	movwf	??_ADC_Sample
  2479  0081  0852               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2480  0082  00F4               	movwf	??_ADC_Sample+1
  2481  0083  01F5               	clrf	??_ADC_Sample+2
  2482  0084  01F6               	clrf	??_ADC_Sample+3
  2483  0085  0873               	movf	??_ADC_Sample,w
  2484  0086  07C9               	addwf	ADC_Sample@adsum,f	;volatile
  2485  0087  0874               	movf	??_ADC_Sample+1,w
  2486  0088  1103               	clrz
  2487  0089  1803               	skipnc
  2488  008A  3E01               	addlw	1
  2489  008B  1D03               	btfss	3,2
  2490  008C  07CA               	addwf	ADC_Sample@adsum+1,f	;volatile
  2491  008D  0875               	movf	??_ADC_Sample+2,w
  2492  008E  1103               	clrz
  2493  008F  1803               	skipnc
  2494  0090  3E01               	addlw	1
  2495  0091  1D03               	btfss	3,2
  2496  0092  07CB               	addwf	ADC_Sample@adsum+2,f	;volatile
  2497  0093  0876               	movf	??_ADC_Sample+3,w
  2498  0094  1103               	clrz
  2499  0095  1803               	skipnc
  2500  0096  3E01               	addlw	1
  2501  0097  1D03               	btfss	3,2
  2502  0098  07CC               	addwf	ADC_Sample@adsum+3,f	;volatile
  2503  0099  300A               	movlw	10
  2504  009A  0AC8               	incf	ADC_Sample@i,f
  2505  009B  0248               	subwf	ADC_Sample@i,w
  2506  009C  1C03               	skipc
  2507  009D  282F               	goto	l2478
  2508                           
  2509                           ;main.c: 868: }
  2510                           ;main.c: 869: adsum -= admax;
  2511  009E  084F               	movf	ADC_Sample@admax,w	;volatile
  2512  009F  00F3               	movwf	??_ADC_Sample
  2513  00A0  0850               	movf	ADC_Sample@admax+1,w	;volatile
  2514  00A1  20DE               	fcall	PL2	;call to abstracted procedure
  2515  00A2  1C03               	skipc
  2516  00A3  0F76               	incfsz	??_ADC_Sample+3,w
  2517  00A4  02CC               	subwf	ADC_Sample@adsum+3,f	;volatile
  2518                           
  2519                           ;main.c: 870: if (adsum >= admin)
  2520  00A5  084D               	movf	ADC_Sample@admin,w	;volatile
  2521  00A6  00F3               	movwf	??_ADC_Sample
  2522  00A7  084E               	movf	ADC_Sample@admin+1,w	;volatile
  2523  00A8  00F4               	movwf	??_ADC_Sample+1
  2524  00A9  01F5               	clrf	??_ADC_Sample+2
  2525  00AA  01F6               	clrf	??_ADC_Sample+3
  2526  00AB  0876               	movf	??_ADC_Sample+3,w
  2527  00AC  024C               	subwf	ADC_Sample@adsum+3,w	;volatile
  2528  00AD  1D03               	skipz
  2529  00AE  28B9               	goto	u2315
  2530  00AF  0875               	movf	??_ADC_Sample+2,w
  2531  00B0  024B               	subwf	ADC_Sample@adsum+2,w	;volatile
  2532  00B1  1D03               	skipz
  2533  00B2  28B9               	goto	u2315
  2534  00B3  0874               	movf	??_ADC_Sample+1,w
  2535  00B4  024A               	subwf	ADC_Sample@adsum+1,w	;volatile
  2536  00B5  1D03               	skipz
  2537  00B6  28B9               	goto	u2315
  2538  00B7  0873               	movf	??_ADC_Sample,w
  2539  00B8  0249               	subwf	ADC_Sample@adsum,w	;volatile
  2540  00B9                     u2315:	
  2541  00B9  1C03               	skipc
  2542  00BA  28C3               	goto	l835
  2543                           
  2544                           ;main.c: 871: adsum -= admin;
  2545  00BB  084D               	movf	ADC_Sample@admin,w	;volatile
  2546  00BC  00F3               	movwf	??_ADC_Sample
  2547  00BD  084E               	movf	ADC_Sample@admin+1,w	;volatile
  2548  00BE  20DE               	fcall	PL2	;call to abstracted procedure
  2549  00BF  1C03               	skipc
  2550  00C0  0F76               	incfsz	??_ADC_Sample+3,w
  2551  00C1  02CC               	subwf	ADC_Sample@adsum+3,f	;volatile
  2552  00C2  28C7               	goto	l2512
  2553  00C3                     l835:	
  2554                           
  2555                           ;main.c: 872: else
  2556                           ;main.c: 873: adsum = 0;
  2557  00C3  01C9               	clrf	ADC_Sample@adsum	;volatile
  2558  00C4  01CA               	clrf	ADC_Sample@adsum+1	;volatile
  2559  00C5  01CB               	clrf	ADC_Sample@adsum+2	;volatile
  2560  00C6  01CC               	clrf	ADC_Sample@adsum+3	;volatile
  2561  00C7                     l2512:	
  2562                           
  2563                           ;main.c: 875: adresult = adsum >> 3;
  2564  00C7  0849               	movf	ADC_Sample@adsum,w	;volatile
  2565  00C8  00F3               	movwf	??_ADC_Sample
  2566  00C9  084A               	movf	ADC_Sample@adsum+1,w	;volatile
  2567  00CA  00F4               	movwf	??_ADC_Sample+1
  2568  00CB  084B               	movf	ADC_Sample@adsum+2,w	;volatile
  2569  00CC  00F5               	movwf	??_ADC_Sample+2
  2570  00CD  084C               	movf	ADC_Sample@adsum+3,w	;volatile
  2571  00CE  00F6               	movwf	??_ADC_Sample+3
  2572  00CF  3003               	movlw	3
  2573  00D0                     u2335:	
  2574  00D0  1003               	clrc
  2575  00D1  0CF6               	rrf	??_ADC_Sample+3,f
  2576  00D2  0CF5               	rrf	??_ADC_Sample+2,f
  2577  00D3  0CF4               	rrf	??_ADC_Sample+1,f
  2578  00D4  0CF3               	rrf	??_ADC_Sample,f
  2579  00D5  3EFF               	addlw	-1
  2580  00D6  1D03               	skipz
  2581  00D7  28D0               	goto	u2335
  2582  00D8  0874               	movf	??_ADC_Sample+1,w
  2583  00D9  00B1               	movwf	_adresult+1	;volatile
  2584  00DA  0873               	movf	??_ADC_Sample,w
  2585  00DB  00B0               	movwf	_adresult	;volatile
  2586                           
  2587                           ;main.c: 877: adsum = 0;
  2588                           
  2589                           ;main.c: 878: admin = 0;
  2590                           
  2591                           ;main.c: 879: admax = 0;
  2592  00DC  20ED               	fcall	PL4	;call to abstracted procedure
  2593                           
  2594                           ;main.c: 880: return 0xA5;
  2595  00DD  34A5               	retlw	165
  2596  00DE                     __end_of_ADC_Sample:	
  2597  00DE                     PL2:	
  2598  00DE  00F4               	movwf	??_ADC_Sample+1
  2599  00DF  01F5               	clrf	??_ADC_Sample+2
  2600  00E0  01F6               	clrf	??_ADC_Sample+3
  2601  00E1  0873               	movf	??_ADC_Sample,w
  2602  00E2  02C9               	subwf	ADC_Sample@adsum,f	;volatile
  2603  00E3  0874               	movf	??_ADC_Sample+1,w
  2604  00E4  1C03               	skipc
  2605  00E5  0F74               	incfsz	??_ADC_Sample+1,w
  2606  00E6  02CA               	subwf	ADC_Sample@adsum+1,f	;volatile
  2607  00E7  0875               	movf	??_ADC_Sample+2,w
  2608  00E8  1C03               	skipc
  2609  00E9  0F75               	incfsz	??_ADC_Sample+2,w
  2610  00EA  02CB               	subwf	ADC_Sample@adsum+2,f	;volatile
  2611  00EB  0876               	movf	??_ADC_Sample+3,w
  2612  00EC  0008               	return
  2613  00ED                     __end_ofPL2:	
  2614  00ED                     PL4:	
  2615  00ED  01C9               	clrf	ADC_Sample@adsum	;volatile
  2616  00EE  01CA               	clrf	ADC_Sample@adsum+1	;volatile
  2617  00EF  01CB               	clrf	ADC_Sample@adsum+2	;volatile
  2618  00F0  01CC               	clrf	ADC_Sample@adsum+3	;volatile
  2619  00F1  01CD               	clrf	ADC_Sample@admin	;volatile
  2620  00F2  01CE               	clrf	ADC_Sample@admin+1	;volatile
  2621  00F3  01CF               	clrf	ADC_Sample@admax	;volatile
  2622  00F4  01D0               	clrf	ADC_Sample@admax+1	;volatile
  2623  00F5  0008               	return
  2624  00F6                     __end_ofPL4:	
  2625  00F6                     PL6:	
  2626  00F6  0852               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2627  00F7  00D0               	movwf	ADC_Sample@admax+1	;volatile
  2628  00F8  0851               	movf	ADC_Sample@ad_temp,w	;volatile
  2629  00F9  00CF               	movwf	ADC_Sample@admax	;volatile
  2630  00FA  0008               	return
  2631  00FB                     __end_ofPL6:	
  2632                           
  2633                           	psect	text13
  2634  02BC                     __ptext13:	
  2635 ;; *************** function _Sleep_Mode *****************
  2636 ;; Defined at:
  2637 ;;		line 740 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 100/0
  2648 ;;		On exit  : 100/100
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1
  2651 ;;      Params:         0       0       0
  2652 ;;      Locals:         0       0       0
  2653 ;;      Temps:          0       0       0
  2654 ;;      Totals:         0       0       0
  2655 ;;Total ram usage:        0 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    2
  2658 ;; This function calls:
  2659 ;;		_AD_Init
  2660 ;;		_Init_System
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _Sleep_Mode
  2668  02BC                     _Sleep_Mode:	
  2669                           
  2670                           ;main.c: 742: INTCON = 0;
  2671                           
  2672                           ;incstack = 0
  2673                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2674  02BC  018B               	clrf	11	;volatile
  2675                           
  2676                           ;main.c: 744: OPTION_REG = 0;
  2677  02BD  0181               	clrf	1	;volatile
  2678                           
  2679                           ;main.c: 746: TRISA = 0x03;
  2680  02BE  3003               	movlw	3
  2681  02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2682  02C0  0085               	movwf	5	;volatile
  2683                           
  2684                           ;main.c: 747: WPUA = 0B00000000;
  2685  02C1  0188               	clrf	8	;volatile
  2686                           
  2687                           ;main.c: 748: PORTA = 0x3C;
  2688  02C2  303C               	movlw	60
  2689  02C3  0086               	movwf	6	;volatile
  2690                           
  2691                           ;main.c: 749: TRISB = 0x14;
  2692  02C4  3014               	movlw	20
  2693  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2694  02C6  0085               	movwf	5	;volatile
  2695                           
  2696                           ;main.c: 750: PORTB = 0x03;
  2697  02C7  3003               	movlw	3
  2698  02C8  0086               	movwf	6	;volatile
  2699                           
  2700                           ;main.c: 751: WPUB = 0x10;
  2701  02C9  3010               	movlw	16
  2702  02CA  0088               	movwf	8	;volatile
  2703                           
  2704                           ;main.c: 753: ADCON0 = 0;
  2705  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2706  02CC  0195               	clrf	21	;volatile
  2707                           
  2708                           ;main.c: 754: ADCON1 = 0;
  2709  02CD  0196               	clrf	22	;volatile
  2710                           
  2711                           ;main.c: 756: PWMCON0 = 0;
  2712  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  2713  02CF  0195               	clrf	21	;volatile
  2714                           
  2715                           ;main.c: 758: OSCCON = 0X70;
  2716  02D0  3070               	movlw	112
  2717  02D1  0094               	movwf	20	;volatile
  2718                           
  2719                           ;main.c: 760: IOCA = 0B00000000;
  2720  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2721  02D3  0189               	clrf	9	;volatile
  2722                           
  2723                           ;main.c: 761: IOCB = 0x14;
  2724  02D4  3014               	movlw	20
  2725  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2726  02D6  0089               	movwf	9	;volatile
  2727                           
  2728                           ;main.c: 763: RAIE = 1;
  2729  02D7  158E               	bsf	14,3	;volatile
  2730                           
  2731                           ;main.c: 764: PEIE = 1;
  2732  02D8  170B               	bsf	11,6	;volatile
  2733                           
  2734                           ;main.c: 765: RBIE = 1;
  2735  02D9  158B               	bsf	11,3	;volatile
  2736                           
  2737                           ;main.c: 766: GIE = 0;
  2738  02DA  138B               	bcf	11,7	;volatile
  2739                           
  2740                           ;main.c: 768: PIE1 &= 0X08;
  2741  02DB  3008               	movlw	8
  2742  02DC  058E               	andwf	14,f	;volatile
  2743                           
  2744                           ;main.c: 769: PIR1 = 0;
  2745  02DD  018D               	clrf	13	;volatile
  2746                           
  2747                           ;main.c: 770: INTCON &= 0XC8;
  2748  02DE  30C8               	movlw	200
  2749  02DF  058B               	andwf	11,f	;volatile
  2750                           
  2751                           ;main.c: 772: PORTA;
  2752  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  2753  02E1  0806               	movf	6,w	;volatile
  2754                           
  2755                           ;main.c: 773: RAIF = 0;
  2756  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2757  02E3  118D               	bcf	13,3	;volatile
  2758                           
  2759                           ;main.c: 774: PORTB;
  2760  02E4  0806               	movf	6,w	;volatile
  2761                           
  2762                           ;main.c: 775: RBIF = 0;
  2763  02E5  100B               	bcf	11,0	;volatile
  2764  02E6  0064               	clrwdt	;# 
  2765  02E7  0063               	sleep	;# 
  2766  02E8  0000               	nop	;# 
  2767  02E9  0064               	clrwdt	;# 
  2768  02EA  0000               	nop	;# 
  2769  02EB  0000               	nop	;# 
  2770  02EC  0000               	nop	;# 
  2771  02ED  0000               	nop	;# 
  2772  02EE  0000               	nop	;# 
  2773                           
  2774                           ;main.c: 787: if(RAIF) RAIF = 0;
  2775  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2776  02F0  198D               	btfsc	13,3	;volatile
  2777  02F1  118D               	bcf	13,3	;volatile
  2778                           
  2779                           ;main.c: 788: if(RBIF) RBIF = 0;
  2780  02F2  180B               	btfsc	11,0	;volatile
  2781  02F3  100B               	bcf	11,0	;volatile
  2782                           
  2783                           ;main.c: 789: if(TMR2IF) TMR2IF = 0;
  2784  02F4  188D               	btfsc	13,1	;volatile
  2785  02F5  108D               	bcf	13,1	;volatile
  2786                           
  2787                           ;main.c: 790: IOCA = 0B00000000;
  2788  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2789  02F7  0189               	clrf	9	;volatile
  2790                           
  2791                           ;main.c: 791: IOCB = 0B00000000;
  2792  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2793  02F9  0189               	clrf	9	;volatile
  2794                           
  2795                           ;main.c: 792: Init_System();
  2796  02FA  2394               	fcall	_Init_System
  2797                           
  2798                           ;main.c: 793: AD_Init();
  2799  02FB  2C3B               	ljmp	l1864
  2800  02FC                     __end_of_Sleep_Mode:	
  2801                           
  2802                           	psect	text14
  2803  0394                     __ptext14:	
  2804 ;; *************** function _Init_System *****************
  2805 ;; Defined at:
  2806 ;;		line 619 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2
  2815 ;; Tracked objects:
  2816 ;;		On entry : 100/0
  2817 ;;		On exit  : 100/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1
  2820 ;;      Params:         0       0       0
  2821 ;;      Locals:         0       0       0
  2822 ;;      Temps:          0       0       0
  2823 ;;      Totals:         0       0       0
  2824 ;;Total ram usage:        0 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;;		_Sleep_Mode
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _Init_System
  2837  0394                     _Init_System:	
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _Init_System: [wreg+status,2]
  2841  0394  0000               	nop	;# 
  2842  0395  0064               	clrwdt	;# 
  2843                           
  2844                           ;main.c: 623: OPTION_REG = 0;
  2845  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2846  0397  0181               	clrf	1	;volatile
  2847  0398  0064               	clrwdt	;# 
  2848                           
  2849                           ;main.c: 625: OSCCON = 0X72;
  2850  0399  3072               	movlw	114
  2851  039A  1283               	bcf	3,5	;RP0=0, select bank0
  2852  039B  0094               	movwf	20	;volatile
  2853                           
  2854                           ;main.c: 627: WPUA = 0B00000000;
  2855  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2856  039D  0188               	clrf	8	;volatile
  2857                           
  2858                           ;main.c: 628: WPDA = 0x00;
  2859  039E  0187               	clrf	7	;volatile
  2860                           
  2861                           ;main.c: 629: WPUB = 0x10;
  2862  039F  3010               	movlw	16
  2863  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2864  03A1  0088               	movwf	8	;volatile
  2865                           
  2866                           ;main.c: 631: TRISA = 0x03;
  2867  03A2  3003               	movlw	3
  2868  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  2869  03A4  0085               	movwf	5	;volatile
  2870                           
  2871                           ;main.c: 632: TRISB = 0x14;
  2872  03A5  3014               	movlw	20
  2873  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2874  03A7  0085               	movwf	5	;volatile
  2875                           
  2876                           ;main.c: 634: PORTA = 0X3C;
  2877  03A8  303C               	movlw	60
  2878  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  2879  03AA  0086               	movwf	6	;volatile
  2880                           
  2881                           ;main.c: 635: PORTB = 0X03;
  2882  03AB  3003               	movlw	3
  2883  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2884  03AD  0086               	movwf	6	;volatile
  2885                           
  2886                           ;main.c: 639: PR2 = 249;
  2887  03AE  30F9               	movlw	249
  2888  03AF  0091               	movwf	17	;volatile
  2889                           
  2890                           ;main.c: 640: TMR2IF = 0;
  2891  03B0  108D               	bcf	13,1	;volatile
  2892                           
  2893                           ;main.c: 641: TMR2IE = 1;
  2894  03B1  148E               	bsf	14,1	;volatile
  2895                           
  2896                           ;main.c: 643: T2CON = 0B00000100;
  2897  03B2  3004               	movlw	4
  2898  03B3  0093               	movwf	19	;volatile
  2899                           
  2900                           ;main.c: 644: INTCON = 0XC0;
  2901  03B4  30C0               	movlw	192
  2902  03B5  008B               	movwf	11	;volatile
  2903  03B6  0008               	return
  2904  03B7                     __end_of_Init_System:	
  2905                           
  2906                           	psect	text15
  2907  043B                     __ptext15:	
  2908 ;; *************** function _AD_Init *****************
  2909 ;; Defined at:
  2910 ;;		line 656 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, status,2
  2919 ;; Tracked objects:
  2920 ;;		On entry : 100/0
  2921 ;;		On exit  : 100/100
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1
  2924 ;;      Params:         0       0       0
  2925 ;;      Locals:         0       0       0
  2926 ;;      Temps:          0       0       0
  2927 ;;      Totals:         0       0       0
  2928 ;;Total ram usage:        0 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    1
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;;		_Sleep_Mode
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _AD_Init
  2941  043B                     _AD_Init:	
  2942  043B                     l1864:	
  2943                           ;incstack = 0
  2944                           ; Regs used in _AD_Init: [wreg+status,2]
  2945                           
  2946                           
  2947                           ;main.c: 689: ADCON0 = 0X41;
  2948  043B  3041               	movlw	65
  2949  043C  1683               	bsf	3,5	;RP0=1, select bank1
  2950  043D  0095               	movwf	21	;volatile
  2951                           
  2952                           ;main.c: 706: ADCON1 = 0;
  2953  043E  0196               	clrf	22	;volatile
  2954                           
  2955                           ;main.c: 707: ANSEL0 = 0X03;
  2956  043F  3003               	movlw	3
  2957  0440  0093               	movwf	19	;volatile
  2958  0441  0008               	return
  2959  0442                     __end_of_AD_Init:	
  2960                           
  2961                           	psect	text16
  2962  040C                     __ptext16:	
  2963 ;; *************** function _Isr_Timer *****************
  2964 ;; Defined at:
  2965 ;;		line 112 in file "C:\mcuproject\scm\zdt\D115_062B_SOP14\main.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 100/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMMON   BANK0   BANK1
  2979 ;;      Params:         0       0       0
  2980 ;;      Locals:         0       0       0
  2981 ;;      Temps:          2       0       0
  2982 ;;      Totals:         2       0       0
  2983 ;;Total ram usage:        2 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		Interrupt level 1
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           
  2993                           ;psect for function _Isr_Timer
  2994  040C                     _Isr_Timer:	
  2995                           
  2996                           ;main.c: 114: if(TMR2IF)
  2997  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2998  040D  1C8D               	btfss	13,1	;volatile
  2999  040E  2C1E               	goto	i1l656
  3000                           
  3001                           ;main.c: 115: {
  3002                           ;main.c: 116: TMR2IF = 0;
  3003  040F  108D               	bcf	13,1	;volatile
  3004                           
  3005                           ;main.c: 117: if(++intCount >= 160)
  3006  0410  30A0               	movlw	160
  3007  0411  0AC4               	incf	_intCount,f
  3008  0412  0244               	subwf	_intCount,w
  3009  0413  1C03               	skipc
  3010  0414  2C1D               	goto	i1l2406
  3011  0415  3064               	movlw	100
  3012                           
  3013                           ;main.c: 118: {
  3014                           ;main.c: 119: intCount = 0;
  3015  0416  01C4               	clrf	_intCount
  3016                           
  3017                           ;main.c: 120: IntFlag = 1;
  3018  0417  01C2               	clrf	_IntFlag
  3019  0418  0AC2               	incf	_IntFlag,f
  3020                           
  3021                           ;main.c: 121: if(++count1s >= 100)
  3022  0419  0AC3               	incf	_count1s,f
  3023  041A  0243               	subwf	_count1s,w
  3024  041B  1803               	btfsc	3,0
  3025                           
  3026                           ;main.c: 122: {
  3027                           ;main.c: 123: count1s = 0;
  3028  041C  01C3               	clrf	_count1s
  3029  041D                     i1l2406:	
  3030                           
  3031                           ;main.c: 124: }
  3032                           ;main.c: 125: }
  3033                           ;main.c: 126: intCount10++;
  3034  041D  0AC0               	incf	_intCount10,f
  3035  041E                     i1l656:	
  3036  041E  0871               	movf	??_Isr_Timer+1,w
  3037  041F  008A               	movwf	10
  3038  0420  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3039  0421  0083               	movwf	3
  3040  0422  0EFE               	swapf	126,f
  3041  0423  0E7E               	swapf	126,w
  3042  0424  0009               	retfie
  3043  0425                     __end_of_Isr_Timer:	
  3044  007E                     btemp	set	126	;btemp
  3045  007E                     wtemp0	set	126
  3046                           
  3047                           	psect	intentry
  3048  0004                     __pintentry:	
  3049                           ;incstack = 0
  3050                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3051                           
  3052  0004                     interrupt_function:	
  3053  007E                     saved_w	set	btemp
  3054  0004  00FE               	movwf	btemp
  3055  0005  0E03               	swapf	3,w
  3056  0006  00F0               	movwf	??_Isr_Timer
  3057  0007  080A               	movf	10,w
  3058  0008  00F1               	movwf	??_Isr_Timer+1
  3059  0009  2C0C               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         41
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     15      54
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkBatAD
    _main->_checkOutA
    _ledCtr->___lbmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2812
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     533
                                              7 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     265
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              3 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0     268
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1032
                                              7 COMMON     2     2      0
                                             13 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     912
                                              7 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     912
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      F      36       4       67.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      42       7        0.0%
DATA                 0      0      42       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 03 15:40:04 2025

                     PL2 00DE                       PL4 00ED                       PL6 00F6  
                     fsr 0004                      l740 038F                      l709 027F  
                    l661 0301                      l831 007F                      l825 0044  
                    l665 0318                      l835 00C3                      l768 015C  
                    _GIE 005F                      _RB3 0033                      _PR2 0011  
    __size_of_ADC_Sample 00C9                      indf 0000          __end_of_AD_Init 0442  
                   l1102 03FD                     l2000 03F7                     l2014 040A  
                   l2030 03ED                     l2022 03D9                     l2210 037D  
                   l2212 0380                     l2300 01C0                     l2142 029B  
                   l2214 0382                     l2136 0293                     l2144 02A2  
                   l2304 01C5                     l2138 0295                     l2218 0386  
                   l2330 01FC                     l2322 01E6                     l2314 01D6  
                   l2250 0358                     l2500 0073                     l2156 02B9  
                   l2340 020E                     l2252 035A                     l2502 007B  
                   l2326 01F1                     l2238 033D                     l2512 00C7  
                   l2600 017A                     l2336 0206                     l2280 01A5  
                   l2272 0196                     l2290 01B4                     l2282 01A7  
                   l2258 0368                     l2604 0181                     l2292 01B8  
                   l2462 0024                     l2630 0241                     l2550 012E  
                   l2542 011B                     l2294 01BB                     l2472 002E  
                   l2464 0026                     l2560 013C                     l2626 023E  
                   l2546 0126                     l2538 011A                     l2580 0156  
                   l2572 014A                     l2564 0140                     l2660 0309  
                   l2478 002F                     l2646 026F                     l1864 043B  
                   l2496 0069                     l2488 004F                     l2592 0172  
                   l2576 0150                     l2594 0175                     l2692 0332  
                   l1896 03CF                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u2315 00B9                     u2335 00D0  
                   u2265 006F                     u2275 0079                     u2515 0168  
                   _PIE1 000E                     u2717 0186                     u2727 0274  
                   u2737 0021                     u2595 0260                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 02FC  
                   btemp 007E                     start 000A            ??_Init_System 0072  
                  ?_main 0070          __end_of___lbdiv 040C          __end_of___lbmod 03F1  
                  _T2CON 0013                    i1l656 041E                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 02BC  
        __end_of_keyRead 03D5                    pclath 000A          __end_of_pwmInit 0433  
        __end_of_pwmStop 0445                    status 0003                    wtemp0 007E  
        __end_of_workCtr 036C          ___lbdiv@divisor 0072          ___lbdiv@counter 0074  
        __initialization 000B             __end_of_main 0334                   ??_main 0079  
              ??_AD_Init 0072      __end_of_Init_System 03B7                   _ADCON0 0095  
                 _ADCON1 0096                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _GODONE 04A9                   i1l2406 041D  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
           ??_ADC_Sample 0073             keyCtr@kclick 0073       __size_of_Isr_Timer 0019  
             _Sleep_Mode 02BC                ??___lbdiv 0073                ??___lbmod 0073  
                 _ledCtr 0189                   _keyCtr 036C                ??_chrgCtr 0076  
                 _pwStep 0038                   _result 002E                ??_keyRead 0072  
     __end_of_ADC_Sample 00DE                   saved_w 007E                ??_pwmInit 0072  
              ??_pwmStop 0072                ??_workCtr 0072         ___lbdiv@dividend 0073  
             _batADValue 0028          ___lbmod@divisor 0072  __end_of__initialization 0013  
        ___lbmod@counter 0075          _workOverOutTime 003F           __pcstackCOMMON 0070  
     __size_of_checkOutA 008E              _Init_System 0394               __end_ofPL2 00ED  
             __end_ofPL4 00F6               __end_ofPL6 00FB         ___lbdiv@quotient 0075  
      __end_of_Isr_Timer 0425               _checkBatAD 0214               __pbssBANK0 0020  
            ?_Sleep_Mode 0070               __pmaintext 02FC               __pintentry 0004  
                ?_ledCtr 0070                  ?_keyCtr 0070                  _AD_Init 043B  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D        __end_of_checkOutA 0189  
                _IntFlag 0042               _intCount10 0040          ADC_Sample@adldo 0072  
        ADC_Sample@admax 004F          ADC_Sample@admin 004D          ADC_Sample@adsum 0049  
                ___lbdiv 03F1                  ___lbmod 03D5          __size_of_ledCtr 008B  
        __size_of_keyCtr 0028                  _chrgCtr 0277               _lowBatFlag 0033  
                __ptext1 0334                  __ptext2 0442                  __ptext3 0425  
                __ptext4 0189                  __ptext5 03D5                  __ptext6 036C  
                __ptext7 03B7                  __ptext8 0277                  __ptext9 03F1  
                _ledStep 007A                  _count1s 0043                  _count5s 0024  
                _count8s 0022                  _maxDuty 003C                  _keyRead 03B7  
    __size_of_Sleep_Mode 0040                  _pwmInit 0425              ?_checkBatAD 0070  
                _pwmStop 0442               _preLedStep 0034                  clrloop0 0434  
                _workCtr 0334               _outADValue 002A     end_of_initialization 0013  
          _longPressFlag 003D         ___lbmod@dividend 0074              ___lbmod@rem 0076  
    __size_of_checkBatAD 0063             ?_Init_System 0070           __end_of_ledCtr 0214  
         __end_of_keyCtr 0394      start_initialization 000B                _Isr_Timer 040C  
           ??_Sleep_Mode 0072                 ??_ledCtr 0077        ADC_Sample@ad_temp 0051  
               ??_keyCtr 0073                 ?_AD_Init 0070              __pbssCOMMON 0079  
              ___latbits 0000            __pcstackBANK0 0046       __end_of_Sleep_Mode 02FC  
             ?_Isr_Timer 0070                _checkOutA 00FB                __pnvBANK0 0055  
               ?___lbdiv 0072                 ?___lbmod 0072                 ?_chrgCtr 0070  
              _count900s 0020                 ?_keyRead 0070                _firstTime 0055  
         ADC_Sample@adch 0047                 ?_pwmInit 0070             ??_checkBatAD 0077  
               ?_pwmStop 0070                 ?_workCtr 0070              ADC_Sample@i 0048  
            ADC_Sample@j 0046        interrupt_function 0004               ?_checkOutA 0070  
              clear_ram0 0433                _prePwStep 0079                _sleepTime 0032  
              _overCount 003B       __end_of_checkBatAD 0277     __size_of_Init_System 0023  
              _startTime 0039         __size_of_AD_Init 0007         keyRead@keyStatus 0072  
            ??_Isr_Timer 0070               _ADC_Sample 0015         __size_of___lbdiv 001B  
       __size_of___lbmod 001C              _lockLedStep 0037         __size_of_chrgCtr 0045  
       __size_of_keyRead 001E                 _adresult 0030                 _chrgFlag 0041  
               __ptext10 00FB                 __ptext11 0214                 __ptext12 0015  
               __ptext13 02BC                 __ptext14 0394                 __ptext15 043B  
               __ptext16 040C         __size_of_pwmInit 000E         __size_of_pwmStop 0003  
               _count50s 0026         __size_of_workCtr 0038                 _keyCount 003E  
               _intCount 0044            __size_of_main 0038              ??_checkOutA 0077  
       checkOutA@maxAout 0054                 _tempDuty 003A                 _test_adc 0045  
               _power_ad 002C                 _workStep 007B                 intlevel1 0000  
            ?_ADC_Sample 0072             _overWorkTime 0035              _showBatTime 0036  
             _OPTION_REG 0001  
