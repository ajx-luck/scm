

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 06 16:03:24 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	pa_nodes0,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.45
    34                           ; Generated 16/11/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F887 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	nvBANK0
    69  005F                     __pnvBANK0:	
    70  005F                     _firstTime:	
    71  005F                     	ds	1
    72  0015                     _PWMCON0	set	21
    73  0014                     _OSCCON	set	20
    74  0013                     _T2CON	set	19
    75  0011                     _PR2	set	17
    76  000E                     _PIE1	set	14
    77  000D                     _PIR1	set	13
    78  000B                     _INTCON	set	11
    79  0009                     _IOCB	set	9
    80  0008                     _WPUB	set	8
    81  0006                     _PORTB	set	6
    82  0005                     _TRISB	set	5
    83  0001                     _OPTION_REG	set	1
    84  0071                     _TMR2IE	set	113
    85  0073                     _RAIE	set	115
    86  0069                     _TMR2IF	set	105
    87  006B                     _RAIF	set	107
    88  0058                     _RBIF	set	88
    89  005B                     _RBIE	set	91
    90  005E                     _PEIE	set	94
    91  005F                     _GIE	set	95
    92  0033                     _RB3	set	51
    93  0099                     _ADRESH	set	153
    94  0098                     _ADRESL	set	152
    95  0096                     _ADCON1	set	150
    96  0095                     _ADCON0	set	149
    97  0093                     _ANSEL0	set	147
    98  0089                     _IOCA	set	137
    99  0088                     _WPUA	set	136
   100  0087                     _WPDA	set	135
   101  0086                     _PORTA	set	134
   102  0085                     _TRISA	set	133
   103  04B2                     _LDO_EN	set	1202
   104  04B6                     _CHS4	set	1206
   105  04A9                     _GODONE	set	1193
   106                           
   107                           	psect	cinit
   108  000B                     start_initialization:	
   109                           ; #config settings
   110                           
   111  000B                     __initialization:	
   112  000B  3046               	movlw	low __pbssBANK0
   113                           
   114                           ; Clear objects allocated to COMMON
   115  000C  01F8               	clrf	__pbssCOMMON& (0+127)
   116  000D  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   117  000E  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   118                           
   119                           ; Clear objects allocated to BANK0
   120  000F  1383               	bcf	3,7	;select IRP bank0
   121  0010  0084               	movwf	4
   122  0011  305F               	movlw	low (__pbssBANK0+25)
   123  0012  2418               	fcall	clear_ram0
   124  0013                     end_of_initialization:	
   125                           ;End of C runtime variable initialization code
   126                           
   127  0013                     __end_of__initialization:	
   128  0013  0183               	clrf	3
   129  0014  2AF8               	ljmp	_main	;jump to C main() function
   130                           
   131                           	psect	bssCOMMON
   132  0078                     __pbssCOMMON:	
   133  0078                     _keyCount:	
   134  0078                     	ds	1
   135  0079                     _ledStep:	
   136  0079                     	ds	1
   137  007A                     _workStep:	
   138  007A                     	ds	1
   139                           
   140                           	psect	bssBANK0
   141  0046                     __pbssBANK0:	
   142  0046                     _fullCount:	
   143  0046                     	ds	2
   144  0048                     _power_ad:	
   145  0048                     	ds	2
   146  004A                     _result:	
   147  004A                     	ds	2
   148  004C                     _lowBatTime:	
   149  004C                     	ds	1
   150  004D                     _count500ms:	
   151  004D                     	ds	1
   152  004E                     _preStep:	
   153  004E                     	ds	1
   154  004F                     _motorMaxCount:	
   155  004F                     	ds	1
   156  0050                     _motorCount:	
   157  0050                     	ds	1
   158  0051                     _motorDuty:	
   159  0051                     	ds	1
   160  0052                     _shanshuoTime:	
   161  0052                     	ds	1
   162  0053                     _sleepTime:	
   163  0053                     	ds	1
   164  0054                     _lowBatFlag:	
   165  0054                     	ds	1
   166  0055                     _showBatTime:	
   167  0055                     	ds	1
   168  0056                     _longPressFlag:	
   169  0056                     	ds	1
   170  0057                     _chrgFullFlag:	
   171  0057                     	ds	1
   172  0058                     _chrgFlag:	
   173  0058                     	ds	1
   174  0059                     _IntFlag:	
   175  0059                     	ds	1
   176  005A                     _count1s:	
   177  005A                     	ds	1
   178  005B                     _intCount:	
   179  005B                     	ds	1
   180  005C                     _test_adc:	
   181  005C                     	ds	1
   182  005D                     _adresult:	
   183  005D                     	ds	2
   184                           
   185                           	psect	clrtext
   186  0418                     clear_ram0:	
   187                           ;	Called with FSR containing the base address, and
   188                           ;	W with the last address+1
   189                           
   190  0418  0064               	clrwdt	;clear the watchdog before getting into this loop
   191  0419                     clrloop0:	
   192  0419  0180               	clrf	0	;clear RAM location pointed to by FSR
   193  041A  0A84               	incf	4,f	;increment pointer
   194  041B  0604               	xorwf	4,w	;XOR with final address
   195  041C  1903               	btfsc	3,2	;have we reached the end yet?
   196  041D  3400               	retlw	0	;all done for this memory range, return
   197  041E  0604               	xorwf	4,w	;XOR again to restore value
   198  041F  2C19               	goto	clrloop0	;do the next byte
   199                           
   200                           	psect	cstackCOMMON
   201  0070                     __pcstackCOMMON:	
   202  0070                     ?_Init_System:	
   203  0070                     ?_AD_Init:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?_pwmCtr:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     ?_chrgCtr:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0070                     ?_checkBatAD:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_keyCtr:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_workCtr:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?_ledCtr:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_Sleep_Mode:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_Isr_Timer:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ??_Isr_Timer:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_keyRead:	
   237                           ; 1 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241  0070                     	ds	2
   242  0072                     ??_Init_System:	
   243  0072                     ??_AD_Init:	
   244                           ; 1 bytes @ 0x2
   245                           
   246  0072                     ??_pwmCtr:	
   247                           ; 1 bytes @ 0x2
   248                           
   249  0072                     ??_chrgCtr:	
   250                           ; 1 bytes @ 0x2
   251                           
   252  0072                     ??_workCtr:	
   253                           ; 1 bytes @ 0x2
   254                           
   255  0072                     ??_Sleep_Mode:	
   256                           ; 1 bytes @ 0x2
   257                           
   258  0072                     ?_ADC_Sample:	
   259                           ; 1 bytes @ 0x2
   260                           
   261  0072                     ??_keyRead:	
   262                           ; 1 bytes @ 0x2
   263                           
   264  0072                     ?___lbmod:	
   265                           ; 1 bytes @ 0x2
   266                           
   267  0072                     ?___ftpack:	
   268                           ; 1 bytes @ 0x2
   269                           
   270  0072                     keyRead@keyStatus:	
   271                           ; 3 bytes @ 0x2
   272                           
   273  0072                     ADC_Sample@adldo:	
   274                           ; 1 bytes @ 0x2
   275                           
   276  0072                     ___lbmod@divisor:	
   277                           ; 1 bytes @ 0x2
   278                           
   279  0072                     ___ftpack@arg:	
   280                           ; 1 bytes @ 0x2
   281                           
   282                           
   283                           ; 3 bytes @ 0x2
   284  0072                     	ds	1
   285  0073                     ??_keyCtr:	
   286  0073                     ??_ADC_Sample:	
   287                           ; 1 bytes @ 0x3
   288                           
   289  0073                     ??___lbmod:	
   290                           ; 1 bytes @ 0x3
   291                           
   292  0073                     keyCtr@kclick:	
   293                           ; 1 bytes @ 0x3
   294                           
   295                           
   296                           ; 1 bytes @ 0x3
   297  0073                     	ds	1
   298  0074                     ___lbmod@dividend:	
   299                           
   300                           ; 1 bytes @ 0x4
   301  0074                     	ds	1
   302  0075                     ___ftpack@exp:	
   303  0075                     ___lbmod@counter:	
   304                           ; 1 bytes @ 0x5
   305                           
   306                           
   307                           ; 1 bytes @ 0x5
   308  0075                     	ds	1
   309  0076                     ___ftpack@sign:	
   310  0076                     ___lbmod@rem:	
   311                           ; 1 bytes @ 0x6
   312                           
   313                           
   314                           ; 1 bytes @ 0x6
   315  0076                     	ds	1
   316  0077                     ??_checkBatAD:	
   317  0077                     ??_ledCtr:	
   318                           ; 1 bytes @ 0x7
   319                           
   320  0077                     ??___lwtoft:	
   321                           ; 1 bytes @ 0x7
   322                           
   323                           
   324                           ; 1 bytes @ 0x7
   325  0077                     	ds	1
   326  0078                     ??_main:	
   327                           
   328                           	psect	cstackBANK0
   329  0020                     __pcstackBANK0:	
   330                           ; 1 bytes @ 0x8
   331                           
   332  0020                     ??___ftpack:	
   333  0020                     ADC_Sample@j:	
   334                           ; 1 bytes @ 0x0
   335                           
   336                           
   337                           ; 1 bytes @ 0x0
   338  0020                     	ds	1
   339  0021                     ADC_Sample@adch:	
   340                           
   341                           ; 1 bytes @ 0x1
   342  0021                     	ds	1
   343  0022                     ADC_Sample@i:	
   344                           
   345                           ; 1 bytes @ 0x2
   346  0022                     	ds	1
   347  0023                     ?___lwtoft:	
   348  0023                     ___lwtoft@c:	
   349                           ; 3 bytes @ 0x3
   350                           
   351  0023                     ADC_Sample@adsum:	
   352                           ; 2 bytes @ 0x3
   353                           
   354                           
   355                           ; 4 bytes @ 0x3
   356  0023                     	ds	3
   357  0026                     ?___ftdiv:	
   358  0026                     ___ftdiv@f2:	
   359                           ; 3 bytes @ 0x6
   360                           
   361                           
   362                           ; 3 bytes @ 0x6
   363  0026                     	ds	1
   364  0027                     ADC_Sample@admin:	
   365                           
   366                           ; 2 bytes @ 0x7
   367  0027                     	ds	2
   368  0029                     ADC_Sample@admax:	
   369  0029                     ___ftdiv@f1:	
   370                           ; 2 bytes @ 0x9
   371                           
   372                           
   373                           ; 3 bytes @ 0x9
   374  0029                     	ds	2
   375  002B                     ADC_Sample@ad_temp:	
   376                           
   377                           ; 2 bytes @ 0xB
   378  002B                     	ds	1
   379  002C                     ??___ftdiv:	
   380                           
   381                           ; 1 bytes @ 0xC
   382  002C                     	ds	3
   383  002F                     ___ftdiv@cntr:	
   384                           
   385                           ; 1 bytes @ 0xF
   386  002F                     	ds	1
   387  0030                     ___ftdiv@f3:	
   388                           
   389                           ; 3 bytes @ 0x10
   390  0030                     	ds	3
   391  0033                     ___ftdiv@exp:	
   392                           
   393                           ; 1 bytes @ 0x13
   394  0033                     	ds	1
   395  0034                     ___ftdiv@sign:	
   396                           
   397                           ; 1 bytes @ 0x14
   398  0034                     	ds	1
   399  0035                     ?___fttol:	
   400  0035                     ___fttol@f1:	
   401                           ; 4 bytes @ 0x15
   402                           
   403                           
   404                           ; 3 bytes @ 0x15
   405  0035                     	ds	4
   406  0039                     ??___fttol:	
   407                           
   408                           ; 1 bytes @ 0x19
   409  0039                     	ds	3
   410  003C                     ___fttol@sign1:	
   411                           
   412                           ; 1 bytes @ 0x1C
   413  003C                     	ds	1
   414  003D                     ___fttol@lval:	
   415                           
   416                           ; 4 bytes @ 0x1D
   417  003D                     	ds	4
   418  0041                     ___fttol@exp1:	
   419                           
   420                           ; 1 bytes @ 0x21
   421  0041                     	ds	1
   422  0042                     checkBatAD@power_temp:	
   423                           
   424                           ; 4 bytes @ 0x22
   425  0042                     	ds	4
   426                           
   427                           	psect	maintext
   428  02F8                     __pmaintext:	
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 101 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, status,2, status,0, pclath, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : B00/0
   445 ;;		On exit  : 100/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMMON   BANK0   BANK1
   448 ;;      Params:         0       0       0
   449 ;;      Locals:         0       0       0
   450 ;;      Temps:          0       0       0
   451 ;;      Totals:         0       0       0
   452 ;;Total ram usage:        0 bytes
   453 ;; Hardware stack levels required when called:    4
   454 ;; This function calls:
   455 ;;		_AD_Init
   456 ;;		_Init_System
   457 ;;		_Sleep_Mode
   458 ;;		_checkBatAD
   459 ;;		_chrgCtr
   460 ;;		_keyCtr
   461 ;;		_ledCtr
   462 ;;		_pwmCtr
   463 ;;		_workCtr
   464 ;; This function is called by:
   465 ;;		Startup code after reset
   466 ;; This function uses a non-reentrant model
   467 ;;
   468                           
   469                           
   470                           ;psect for function _main
   471  02F8                     _main:	
   472                           
   473                           ;main.c: 103: Init_System();
   474                           
   475                           ;incstack = 0
   476                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   477  02F8  23D8               	fcall	_Init_System
   478                           
   479                           ;main.c: 104: AD_Init();
   480  02F9  2420               	fcall	_AD_Init
   481                           
   482                           ;main.c: 105: firstTime = 200;
   483  02FA  30C8               	movlw	200
   484  02FB  1283               	bcf	3,5	;RP0=0, select bank0
   485  02FC  00DF               	movwf	_firstTime
   486  02FD                     l605:	
   487                           ;main.c: 106: while (1)
   488                           
   489  02FD  0064               	clrwdt	;# 
   490                           
   491                           ;main.c: 109: if(workStep > 0)
   492  02FE  087A               	movf	_workStep,w
   493  02FF  1903               	btfsc	3,2
   494  0300  2B02               	goto	l2263
   495                           
   496                           ;main.c: 110: {
   497                           ;main.c: 111: pwmCtr();
   498  0301  239F               	fcall	_pwmCtr
   499  0302                     l2263:	
   500                           
   501                           ;main.c: 112: }
   502                           ;main.c: 113: if(!IntFlag)
   503  0302  1283               	bcf	3,5	;RP0=0, select bank0
   504  0303  0859               	movf	_IntFlag,w
   505  0304  1903               	btfsc	3,2
   506  0305  2AFD               	goto	l605
   507                           
   508                           ;main.c: 115: IntFlag = 0;
   509  0306  01D9               	clrf	_IntFlag
   510                           
   511                           ;main.c: 116: chrgCtr();
   512  0307  2286               	fcall	_chrgCtr
   513                           
   514                           ;main.c: 117: checkBatAD();
   515  0308  22C3               	fcall	_checkBatAD
   516                           
   517                           ;main.c: 118: if(chrgFlag == 0)
   518  0309  1283               	bcf	3,5	;RP0=0, select bank0
   519  030A  0858               	movf	_chrgFlag,w
   520  030B  1D03               	btfss	3,2
   521  030C  2B0E               	goto	l609
   522                           
   523                           ;main.c: 119: {
   524                           ;main.c: 120: keyCtr();
   525  030D  232A               	fcall	_keyCtr
   526  030E                     l609:	
   527                           
   528                           ;main.c: 121: }
   529                           ;main.c: 122: workCtr();
   530  030E  235C               	fcall	_workCtr
   531                           
   532                           ;main.c: 123: ledCtr();
   533  030F  21BF               	fcall	_ledCtr
   534                           
   535                           ;main.c: 124: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          anshuoTime == 0)
   536  0310  1283               	bcf	3,5	;RP0=0, select bank0
   537  0311  0858               	movf	_chrgFlag,w
   538  0312  1D03               	btfss	3,2
   539  0313  2B28               	goto	l2293
   540  0314  087A               	movf	_workStep,w
   541  0315  1D03               	btfss	3,2
   542  0316  2B28               	goto	l2293
   543  0317  0878               	movf	_keyCount,w
   544  0318  1D03               	btfss	3,2
   545  0319  2B28               	goto	l2293
   546  031A  085F               	movf	_firstTime,w
   547  031B  1D03               	btfss	3,2
   548  031C  2B28               	goto	l2293
   549  031D  0852               	movf	_shanshuoTime,w
   550  031E  1D03               	btfss	3,2
   551  031F  2B28               	goto	l2293
   552                           
   553                           ;main.c: 125: {
   554                           ;main.c: 126: if(++sleepTime >= 200)
   555  0320  30C8               	movlw	200
   556  0321  0AD3               	incf	_sleepTime,f
   557  0322  0253               	subwf	_sleepTime,w
   558  0323  1C03               	skipc
   559  0324  2AFD               	goto	l605
   560                           
   561                           ;main.c: 127: {
   562                           ;main.c: 128: sleepTime = 0;
   563  0325  01D3               	clrf	_sleepTime
   564                           
   565                           ;main.c: 129: Sleep_Mode();
   566  0326  2247               	fcall	_Sleep_Mode
   567  0327  2AFD               	goto	l605
   568  0328                     l2293:	
   569                           
   570                           ;main.c: 132: else
   571                           ;main.c: 133: {
   572                           ;main.c: 134: sleepTime = 0;
   573  0328  01D3               	clrf	_sleepTime
   574  0329  2AFD               	goto	l605
   575  032A                     __end_of_main:	
   576                           
   577                           	psect	text1
   578  035C                     __ptext1:	
   579 ;; *************** function _workCtr *****************
   580 ;; Defined at:
   581 ;;		line 361 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;		None
   584 ;; Auto vars:     Size  Location     Type
   585 ;;		None
   586 ;; Return value:  Size  Location     Type
   587 ;;                  1    wreg      void 
   588 ;; Registers used:
   589 ;;		wreg, status,2, status,0
   590 ;; Tracked objects:
   591 ;;		On entry : 100/0
   592 ;;		On exit  : 100/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMMON   BANK0   BANK1
   595 ;;      Params:         0       0       0
   596 ;;      Locals:         0       0       0
   597 ;;      Temps:          0       0       0
   598 ;;      Totals:         0       0       0
   599 ;;Total ram usage:        0 bytes
   600 ;; Hardware stack levels used:    1
   601 ;; Hardware stack levels required when called:    1
   602 ;; This function calls:
   603 ;;		Nothing
   604 ;; This function is called by:
   605 ;;		_main
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           
   610                           ;psect for function _workCtr
   611  035C                     _workCtr:	
   612                           
   613                           ;main.c: 364: if(workStep == 1)
   614                           
   615                           ;incstack = 0
   616                           ; Regs used in _workCtr: [wreg+status,2+status,0]
   617  035C  0B7A               	decfsz	_workStep,w
   618  035D  2B67               	goto	l2013
   619                           
   620                           ;main.c: 365: {
   621                           ;main.c: 366: PORTA = 0x0C;
   622  035E  300C               	movlw	12
   623  035F  1683               	bsf	3,5	;RP0=1, select bank1
   624  0360  0086               	movwf	6	;volatile
   625                           
   626                           ;main.c: 367: motorMaxCount = 10;
   627  0361  300A               	movlw	10
   628  0362  1283               	bcf	3,5	;RP0=0, select bank0
   629  0363  00CF               	movwf	_motorMaxCount
   630                           
   631                           ;main.c: 368: motorDuty = 8;
   632  0364  3008               	movlw	8
   633  0365  00D1               	movwf	_motorDuty
   634                           
   635                           ;main.c: 369: }
   636  0366  0008               	return
   637  0367                     l2013:	
   638                           
   639                           ;main.c: 370: else if(workStep == 2)
   640  0367  3002               	movlw	2
   641  0368  067A               	xorwf	_workStep,w
   642  0369  1D03               	btfss	3,2
   643  036A  2B73               	goto	l2017
   644                           
   645                           ;main.c: 371: {
   646                           ;main.c: 372: PORTA = 0x0A;
   647  036B  300A               	movlw	10
   648  036C  1683               	bsf	3,5	;RP0=1, select bank1
   649  036D  0086               	movwf	6	;volatile
   650                           
   651                           ;main.c: 373: motorMaxCount = 10;
   652  036E  1283               	bcf	3,5	;RP0=0, select bank0
   653  036F  00CF               	movwf	_motorMaxCount
   654                           
   655                           ;main.c: 374: motorDuty = 9;
   656  0370  3009               	movlw	9
   657  0371  00D1               	movwf	_motorDuty
   658                           
   659                           ;main.c: 375: }
   660  0372  0008               	return
   661  0373                     l2017:	
   662                           
   663                           ;main.c: 376: else if(workStep == 3)
   664  0373  3003               	movlw	3
   665  0374  067A               	xorwf	_workStep,w
   666  0375  1D03               	btfss	3,2
   667  0376  2B7F               	goto	l2021
   668                           
   669                           ;main.c: 377: {
   670                           ;main.c: 378: PORTA = 0x06;
   671  0377  3006               	movlw	6
   672  0378  1683               	bsf	3,5	;RP0=1, select bank1
   673  0379  0086               	movwf	6	;volatile
   674                           
   675                           ;main.c: 379: motorMaxCount = 10;
   676  037A  300A               	movlw	10
   677  037B  1283               	bcf	3,5	;RP0=0, select bank0
   678  037C  00CF               	movwf	_motorMaxCount
   679                           
   680                           ;main.c: 380: motorDuty = 10;
   681  037D  00D1               	movwf	_motorDuty
   682                           
   683                           ;main.c: 381: }
   684  037E  0008               	return
   685  037F                     l2021:	
   686                           
   687                           ;main.c: 382: else
   688                           ;main.c: 383: {
   689                           ;main.c: 384: PORTB = 0x00;
   690  037F  0186               	clrf	6	;volatile
   691  0380  0008               	return
   692  0381                     __end_of_workCtr:	
   693                           
   694                           	psect	text2
   695  039F                     __ptext2:	
   696 ;; *************** function _pwmCtr *****************
   697 ;; Defined at:
   698 ;;		line 345 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1
   712 ;;      Params:         0       0       0
   713 ;;      Locals:         0       0       0
   714 ;;      Temps:          3       0       0
   715 ;;      Totals:         3       0       0
   716 ;;Total ram usage:        3 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    1
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           
   727                           ;psect for function _pwmCtr
   728  039F                     _pwmCtr:	
   729                           
   730                           ;main.c: 347: if(motorDuty > motorCount)
   731                           
   732                           ;incstack = 0
   733                           ; Regs used in _pwmCtr: [wreg+status,2+status,0]
   734  039F  1283               	bcf	3,5	;RP0=0, select bank0
   735  03A0  0851               	movf	_motorDuty,w
   736  03A1  0250               	subwf	_motorCount,w
   737  03A2  1803               	skipnc
   738  03A3  2BA6               	goto	l683
   739                           
   740                           ;main.c: 348: {
   741                           ;main.c: 349: RB3 = 1;
   742  03A4  1586               	bsf	6,3	;volatile
   743                           
   744                           ;main.c: 350: }
   745  03A5  2BA7               	goto	l1917
   746  03A6                     l683:	
   747                           
   748                           ;main.c: 351: else
   749                           ;main.c: 352: {
   750                           ;main.c: 353: RB3 = 0;
   751  03A6  1186               	bcf	6,3	;volatile
   752  03A7                     l1917:	
   753                           
   754                           ;main.c: 354: }
   755                           ;main.c: 355: if(++motorCount > (motorMaxCount - 1))
   756  03A7  0AD0               	incf	_motorCount,f
   757  03A8  084F               	movf	_motorMaxCount,w
   758  03A9  3EFF               	addlw	255
   759  03AA  00F2               	movwf	??_pwmCtr
   760  03AB  30FF               	movlw	255
   761  03AC  1803               	skipnc
   762  03AD  3000               	movlw	0
   763  03AE  00F3               	movwf	??_pwmCtr+1
   764  03AF  3A80               	xorlw	128
   765  03B0  00F4               	movwf	??_pwmCtr+2
   766  03B1  3080               	movlw	128
   767  03B2  0274               	subwf	??_pwmCtr+2,w
   768  03B3  1D03               	skipz
   769  03B4  2BB7               	goto	u1375
   770  03B5  0850               	movf	_motorCount,w
   771  03B6  0272               	subwf	??_pwmCtr,w
   772  03B7                     u1375:	
   773  03B7  1803               	skipnc
   774  03B8  0008               	return
   775                           
   776                           ;main.c: 356: {
   777                           ;main.c: 357: motorCount = 0;
   778  03B9  1283               	bcf	3,5	;RP0=0, select bank0
   779  03BA  01D0               	clrf	_motorCount
   780  03BB  0008               	return
   781  03BC                     __end_of_pwmCtr:	
   782                           
   783                           	psect	text3
   784  01BF                     __ptext3:	
   785 ;; *************** function _ledCtr *****************
   786 ;; Defined at:
   787 ;;		line 141 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 100/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1
   801 ;;      Params:         0       0       0
   802 ;;      Locals:         0       0       0
   803 ;;      Temps:          1       0       0
   804 ;;      Totals:         1       0       0
   805 ;;Total ram usage:        1 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    2
   808 ;; This function calls:
   809 ;;		___lbmod
   810 ;; This function is called by:
   811 ;;		_main
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           
   816                           ;psect for function _ledCtr
   817  01BF                     _ledCtr:	
   818                           
   819                           ;main.c: 143: if(firstTime > 0)
   820                           
   821                           ;incstack = 0
   822                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   823  01BF  085F               	movf	_firstTime,w
   824  01C0  1903               	btfsc	3,2
   825  01C1  29C6               	goto	l2029
   826                           
   827                           ;main.c: 144: {
   828                           ;main.c: 145: firstTime--;
   829  01C2  03DF               	decf	_firstTime,f
   830  01C3                     l2027:	
   831                           
   832                           ;main.c: 146: PORTA = 0x00;
   833  01C3  1683               	bsf	3,5	;RP0=1, select bank1
   834  01C4  0186               	clrf	6	;volatile
   835                           
   836                           ;main.c: 147: }
   837  01C5  0008               	return
   838  01C6                     l2029:	
   839                           
   840                           ;main.c: 148: else if(shanshuoTime > 0)
   841  01C6  0852               	movf	_shanshuoTime,w
   842  01C7  1903               	btfsc	3,2
   843  01C8  29D7               	goto	l2039
   844  01C9  3032               	movlw	50
   845                           
   846                           ;main.c: 149: {
   847                           ;main.c: 150: shanshuoTime--;
   848  01CA  03D2               	decf	_shanshuoTime,f
   849                           
   850                           ;main.c: 151: if(shanshuoTime % 50 < 25)
   851  01CB  00F2               	movwf	___lbmod@divisor
   852  01CC  0852               	movf	_shanshuoTime,w
   853  01CD  23BC               	fcall	___lbmod
   854  01CE  00F7               	movwf	??_ledCtr
   855  01CF  3019               	movlw	25
   856  01D0  0277               	subwf	??_ledCtr,w
   857  01D1  1803               	skipnc
   858  01D2  29C3               	goto	l2027
   859  01D3                     l2035:	
   860                           
   861                           ;main.c: 152: {
   862                           ;main.c: 153: PORTA = 0x0E;
   863  01D3  300E               	movlw	14
   864  01D4  1683               	bsf	3,5	;RP0=1, select bank1
   865  01D5  0086               	movwf	6	;volatile
   866                           
   867                           ;main.c: 154: }
   868  01D6  0008               	return
   869  01D7                     l2039:	
   870                           
   871                           ;main.c: 160: else if(workStep > 0)
   872  01D7  087A               	movf	_workStep,w
   873  01D8  1903               	btfsc	3,2
   874  01D9  29DD               	goto	l2043
   875                           
   876                           ;main.c: 161: {
   877                           ;main.c: 162: preStep = workStep;
   878  01DA  087A               	movf	_workStep,w
   879  01DB  00CE               	movwf	_preStep
   880                           
   881                           ;main.c: 163: }
   882  01DC  0008               	return
   883  01DD                     l2043:	
   884                           
   885                           ;main.c: 164: else if(chrgFlag)
   886  01DD  0858               	movf	_chrgFlag,w
   887  01DE  1903               	btfsc	3,2
   888  01DF  29D3               	goto	l2035
   889                           
   890                           ;main.c: 165: {
   891                           ;main.c: 166: if(chrgFullFlag)
   892  01E0  0857               	movf	_chrgFullFlag,w
   893  01E1  1D03               	btfss	3,2
   894  01E2  29C3               	goto	l2027
   895                           
   896                           ;main.c: 171: else
   897                           ;main.c: 172: {
   898                           ;main.c: 174: if(++count500ms > 50)
   899  01E3  3033               	movlw	51
   900  01E4  0ACD               	incf	_count500ms,f
   901  01E5  024D               	subwf	_count500ms,w
   902  01E6  1C03               	skipc
   903  01E7  29F0               	goto	l2057
   904  01E8  3004               	movlw	4
   905                           
   906                           ;main.c: 175: {
   907                           ;main.c: 176: count500ms = 0;
   908  01E9  01CD               	clrf	_count500ms
   909                           
   910                           ;main.c: 177: if(++ledStep > 3)
   911  01EA  0AF9               	incf	_ledStep,f
   912  01EB  0279               	subwf	_ledStep,w
   913  01EC  1C03               	skipc
   914  01ED  29F0               	goto	l2057
   915                           
   916                           ;main.c: 178: {
   917                           ;main.c: 179: ledStep = 1;
   918  01EE  01F9               	clrf	_ledStep
   919  01EF  0AF9               	incf	_ledStep,f
   920  01F0                     l2057:	
   921                           
   922                           ;main.c: 180: }
   923                           ;main.c: 181: }
   924                           ;main.c: 182: if(ledStep == 3)
   925  01F0  3003               	movlw	3
   926  01F1  0679               	xorwf	_ledStep,w
   927  01F2  1903               	btfsc	3,2
   928  01F3  29C3               	goto	l2027
   929                           
   930                           ;main.c: 186: else if(ledStep == 2)
   931  01F4  3002               	movlw	2
   932  01F5  0679               	xorwf	_ledStep,w
   933  01F6  1D03               	btfss	3,2
   934  01F7  29FC               	goto	l2065
   935                           
   936                           ;main.c: 187: {
   937                           ;main.c: 188: PORTA = 0x08;
   938  01F8  3008               	movlw	8
   939  01F9  1683               	bsf	3,5	;RP0=1, select bank1
   940  01FA  0086               	movwf	6	;volatile
   941                           
   942                           ;main.c: 189: }
   943  01FB  0008               	return
   944  01FC                     l2065:	
   945                           
   946                           ;main.c: 190: else if(ledStep == 1)
   947  01FC  0B79               	decfsz	_ledStep,w
   948  01FD  2A02               	goto	l2069
   949                           
   950                           ;main.c: 191: {
   951                           ;main.c: 192: PORTA = 0x0C;
   952  01FE  300C               	movlw	12
   953  01FF  1683               	bsf	3,5	;RP0=1, select bank1
   954  0200  0086               	movwf	6	;volatile
   955                           
   956                           ;main.c: 193: }
   957  0201  0008               	return
   958  0202                     l2069:	
   959                           
   960                           ;main.c: 194: else if(ledStep == 0)
   961  0202  0879               	movf	_ledStep,w
   962  0203  1D03               	btfss	3,2
   963  0204  0008               	return
   964  0205  29D3               	goto	l2035
   965  0206                     __end_of_ledCtr:	
   966                           
   967                           	psect	text4
   968  03BC                     __ptext4:	
   969 ;; *************** function ___lbmod *****************
   970 ;; Defined at:
   971 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  dividend        1    wreg     unsigned char 
   974 ;;  divisor         1    2[COMMON] unsigned char 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  dividend        1    4[COMMON] unsigned char 
   977 ;;  rem             1    6[COMMON] unsigned char 
   978 ;;  counter         1    5[COMMON] unsigned char 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      unsigned char 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0
   983 ;; Tracked objects:
   984 ;;		On entry : 100/0
   985 ;;		On exit  : 100/0
   986 ;;		Unchanged: 100/0
   987 ;; Data sizes:     COMMON   BANK0   BANK1
   988 ;;      Params:         1       0       0
   989 ;;      Locals:         3       0       0
   990 ;;      Temps:          1       0       0
   991 ;;      Totals:         5       0       0
   992 ;;Total ram usage:        5 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_ledCtr
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
  1003                           ;psect for function ___lbmod
  1004  03BC                     ___lbmod:	
  1005                           
  1006                           ;incstack = 0
  1007                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1008                           ;___lbmod@dividend stored from wreg
  1009  03BC  00F4               	movwf	___lbmod@dividend
  1010  03BD  3008               	movlw	8
  1011  03BE  00F5               	movwf	___lbmod@counter
  1012  03BF  01F6               	clrf	___lbmod@rem
  1013  03C0                     l1895:	
  1014  03C0  0874               	movf	___lbmod@dividend,w
  1015  03C1  00F3               	movwf	??___lbmod
  1016  03C2  3007               	movlw	7
  1017  03C3  1003               	clrc
  1018  03C4                     L1:	
  1019  03C4  0CF3               	rrf	??___lbmod,f
  1020  03C5  3EFF               	addlw	-1
  1021  03C6  1003               	clrc
  1022  03C7  1D03               	skipz
  1023  03C8  2BC4               	goto	L1
  1024  03C9  0D76               	rlf	___lbmod@rem,w
  1025  03CA  0473               	iorwf	??___lbmod,w
  1026  03CB  00F6               	movwf	___lbmod@rem
  1027  03CC  1003               	clrc
  1028  03CD  0DF4               	rlf	___lbmod@dividend,f
  1029  03CE  0872               	movf	___lbmod@divisor,w
  1030  03CF  0276               	subwf	___lbmod@rem,w
  1031  03D0  1C03               	skipc
  1032  03D1  2BD4               	goto	l1903
  1033  03D2  0872               	movf	___lbmod@divisor,w
  1034  03D3  02F6               	subwf	___lbmod@rem,f
  1035  03D4                     l1903:	
  1036  03D4  0BF5               	decfsz	___lbmod@counter,f
  1037  03D5  2BC0               	goto	l1895
  1038  03D6  0876               	movf	___lbmod@rem,w
  1039  03D7  0008               	return
  1040  03D8                     __end_of___lbmod:	
  1041                           
  1042                           	psect	text5
  1043  032A                     __ptext5:	
  1044 ;; *************** function _keyCtr *****************
  1045 ;; Defined at:
  1046 ;;		line 297 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;		None
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  kclick          1    3[COMMON] unsigned char 
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  1    wreg      void 
  1053 ;; Registers used:
  1054 ;;		wreg, status,2, status,0, pclath, cstack
  1055 ;; Tracked objects:
  1056 ;;		On entry : 100/0
  1057 ;;		On exit  : 100/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMMON   BANK0   BANK1
  1060 ;;      Params:         0       0       0
  1061 ;;      Locals:         1       0       0
  1062 ;;      Temps:          0       0       0
  1063 ;;      Totals:         1       0       0
  1064 ;;Total ram usage:        1 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    2
  1067 ;; This function calls:
  1068 ;;		_keyRead
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           
  1075                           ;psect for function _keyCtr
  1076  032A                     _keyCtr:	
  1077                           
  1078                           ;main.c: 299: char kclick = keyRead(0x04 & (~PORTB));
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1082  032A  0906               	comf	6,w	;volatile
  1083  032B  3904               	andlw	4
  1084  032C  2381               	fcall	_keyRead
  1085  032D  00F3               	movwf	keyCtr@kclick
  1086                           
  1087                           ;main.c: 300: if(kclick == 1)
  1088  032E  0B73               	decfsz	keyCtr@kclick,w
  1089  032F  2B44               	goto	l1993
  1090                           
  1091                           ;main.c: 301: {
  1092                           ;main.c: 302: if(workStep > 0)
  1093  0330  087A               	movf	_workStep,w
  1094  0331  1903               	btfsc	3,2
  1095  0332  2B3B               	goto	l1985
  1096                           
  1097                           ;main.c: 303: {
  1098                           ;main.c: 304: if(++workStep > 3)
  1099  0333  3004               	movlw	4
  1100  0334  0AFA               	incf	_workStep,f
  1101  0335  027A               	subwf	_workStep,w
  1102  0336  1C03               	skipc
  1103  0337  0008               	return
  1104                           
  1105                           ;main.c: 305: {
  1106                           ;main.c: 306: workStep = 1;
  1107  0338  01FA               	clrf	_workStep
  1108  0339  0AFA               	incf	_workStep,f
  1109  033A  0008               	return
  1110  033B                     l1985:	
  1111                           
  1112                           ;main.c: 309: else if(showBatTime > 0)
  1113  033B  0855               	movf	_showBatTime,w
  1114  033C  1903               	btfsc	3,2
  1115  033D  2B40               	goto	l1989
  1116  033E                     l1987:	
  1117                           
  1118                           ;main.c: 310: {
  1119                           ;main.c: 311: showBatTime = 0;
  1120  033E  01D5               	clrf	_showBatTime
  1121                           
  1122                           ;main.c: 312: }
  1123  033F  0008               	return
  1124  0340                     l1989:	
  1125                           
  1126                           ;main.c: 313: else
  1127                           ;main.c: 314: {
  1128                           ;main.c: 315: showBatTime = 200;
  1129  0340  30C8               	movlw	200
  1130  0341  00D5               	movwf	_showBatTime
  1131                           
  1132                           ;main.c: 316: count1s = 0;
  1133  0342  01DA               	clrf	_count1s
  1134  0343  0008               	return
  1135  0344                     l1993:	
  1136                           
  1137                           ;main.c: 319: else if(kclick == 2)
  1138  0344  3002               	movlw	2
  1139  0345  0673               	xorwf	keyCtr@kclick,w
  1140  0346  1D03               	btfss	3,2
  1141  0347  0008               	return
  1142                           
  1143                           ;main.c: 320: {
  1144                           ;main.c: 321: if(workStep > 0)
  1145  0348  087A               	movf	_workStep,w
  1146  0349  1903               	btfsc	3,2
  1147  034A  2B4D               	goto	l1999
  1148                           
  1149                           ;main.c: 322: {
  1150                           ;main.c: 323: workStep = 0;
  1151  034B  01FA               	clrf	_workStep
  1152                           
  1153                           ;main.c: 324: }
  1154  034C  0008               	return
  1155  034D                     l1999:	
  1156                           
  1157                           ;main.c: 325: else if(lowBatFlag)
  1158  034D  0854               	movf	_lowBatFlag,w
  1159  034E  1903               	btfsc	3,2
  1160  034F  2B53               	goto	l2003
  1161                           
  1162                           ;main.c: 326: {
  1163                           ;main.c: 327: shanshuoTime = 250;
  1164  0350  30FA               	movlw	250
  1165  0351  00D2               	movwf	_shanshuoTime
  1166                           
  1167                           ;main.c: 328: }
  1168  0352  0008               	return
  1169  0353                     l2003:	
  1170                           
  1171                           ;main.c: 329: else
  1172                           ;main.c: 330: {
  1173                           ;main.c: 331: if(preStep > 0)
  1174  0353  084E               	movf	_preStep,w
  1175  0354  1903               	btfsc	3,2
  1176  0355  2B59               	goto	l678
  1177                           
  1178                           ;main.c: 332: {
  1179                           ;main.c: 333: workStep = preStep;
  1180  0356  084E               	movf	_preStep,w
  1181  0357  00FA               	movwf	_workStep
  1182                           
  1183                           ;main.c: 334: }
  1184  0358  2B3E               	goto	l1987
  1185  0359                     l678:	
  1186                           
  1187                           ;main.c: 335: else
  1188                           ;main.c: 336: {
  1189                           ;main.c: 337: workStep = 1;
  1190  0359  01FA               	clrf	_workStep
  1191  035A  0AFA               	incf	_workStep,f
  1192  035B  2B3E               	goto	l1987
  1193  035C                     __end_of_keyCtr:	
  1194                           
  1195                           	psect	text6
  1196  0381                     __ptext6:	
  1197 ;; *************** function _keyRead *****************
  1198 ;; Defined at:
  1199 ;;		line 264 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  keyStatus       1    wreg     unsigned char 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  keyStatus       1    2[COMMON] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      unsigned char 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 100/0
  1210 ;;		On exit  : 100/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1
  1213 ;;      Params:         0       0       0
  1214 ;;      Locals:         1       0       0
  1215 ;;      Temps:          0       0       0
  1216 ;;      Totals:         1       0       0
  1217 ;;Total ram usage:        1 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_keyCtr
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _keyRead
  1229  0381                     _keyRead:	
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1233                           ;keyRead@keyStatus stored from wreg
  1234  0381  00F2               	movwf	keyRead@keyStatus
  1235                           
  1236                           ;main.c: 266: if(keyStatus)
  1237  0382  0872               	movf	keyRead@keyStatus,w
  1238  0383  3064               	movlw	100
  1239  0384  1903               	btfsc	3,2
  1240  0385  2B93               	goto	L3
  1241                           
  1242                           ;main.c: 267: {
  1243                           ;main.c: 268: keyCount++;
  1244  0386  0AF8               	incf	_keyCount,f
  1245                           
  1246                           ;main.c: 269: if(keyCount >= 100)
  1247  0387  0278               	subwf	_keyCount,w
  1248  0388  1C03               	skipc
  1249  0389  3400               	retlw	0
  1250                           
  1251                           ;main.c: 270: {
  1252                           ;main.c: 271: keyCount = 100;
  1253  038A  3064               	movlw	100
  1254  038B  00F8               	movwf	_keyCount
  1255                           
  1256                           ;main.c: 272: if(!longPressFlag)
  1257  038C  0856               	movf	_longPressFlag,w
  1258  038D  1D03               	btfss	3,2
  1259  038E  3400               	retlw	0
  1260  038F  3002               	movlw	2
  1261                           
  1262                           ;main.c: 273: {
  1263                           ;main.c: 274: longPressFlag = 1;
  1264  0390  01D6               	clrf	_longPressFlag
  1265  0391  0AD6               	incf	_longPressFlag,f
  1266                           
  1267                           ;main.c: 275: return 2;
  1268  0392  0008               	return
  1269  0393                     L3:	
  1270                           ;main.c: 279: else
  1271                           ;main.c: 280: {
  1272                           ;main.c: 281: if(keyCount >= 100)
  1273                           
  1274  0393  0278               	subwf	_keyCount,w
  1275  0394  1C03               	skipc
  1276  0395  2B99               	goto	l1725
  1277                           
  1278                           ;main.c: 282: {
  1279                           ;main.c: 283: keyCount = 0;
  1280  0396  01F8               	clrf	_keyCount
  1281                           
  1282                           ;main.c: 284: longPressFlag = 0;
  1283  0397  01D6               	clrf	_longPressFlag
  1284                           
  1285                           ;main.c: 285: return 0;
  1286  0398  3400               	retlw	0
  1287  0399                     l1725:	
  1288                           
  1289                           ;main.c: 287: else if(keyCount >= 6)
  1290  0399  3006               	movlw	6
  1291  039A  0278               	subwf	_keyCount,w
  1292                           
  1293                           ;main.c: 288: {
  1294                           ;main.c: 289: keyCount = 0;
  1295  039B  01F8               	clrf	_keyCount
  1296  039C  1803               	btfsc	3,0
  1297                           
  1298                           ;main.c: 290: return 1;
  1299  039D  3401               	retlw	1
  1300  039E  3400               	retlw	0
  1301  039F                     __end_of_keyRead:	
  1302                           ;main.c: 291: }
  1303                           ;main.c: 292: keyCount = 0;
  1304                           
  1305                           
  1306                           	psect	text7
  1307  0286                     __ptext7:	
  1308 ;; *************** function _chrgCtr *****************
  1309 ;; Defined at:
  1310 ;;		line 209 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;		None
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0
  1319 ;; Tracked objects:
  1320 ;;		On entry : 100/0
  1321 ;;		On exit  : 100/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1
  1324 ;;      Params:         0       0       0
  1325 ;;      Locals:         0       0       0
  1326 ;;      Temps:          0       0       0
  1327 ;;      Totals:         0       0       0
  1328 ;;Total ram usage:        0 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function _chrgCtr
  1340  0286                     _chrgCtr:	
  1341                           
  1342                           ;main.c: 211: if(PORTB & 0x20)
  1343                           
  1344                           ;incstack = 0
  1345                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  1346  0286  1E86               	btfss	6,5	;volatile
  1347  0287  2AA7               	goto	l1945
  1348                           
  1349                           ;main.c: 212: {
  1350                           ;main.c: 213: chrgFlag = 1;
  1351  0288  01D8               	clrf	_chrgFlag
  1352  0289  0AD8               	incf	_chrgFlag,f
  1353                           
  1354                           ;main.c: 214: workStep = 0;
  1355  028A  01FA               	clrf	_workStep
  1356                           
  1357                           ;main.c: 215: lowBatFlag = 0;
  1358  028B  01D4               	clrf	_lowBatFlag
  1359                           
  1360                           ;main.c: 216: if(PORTB & 0x10)
  1361  028C  1E06               	btfss	6,4	;volatile
  1362  028D  2A9D               	goto	l1935
  1363  028E                     l1937:	
  1364                           ;main.c: 217: {
  1365                           ;main.c: 218: if(++fullCount > 200)
  1366                           
  1367                           
  1368                           ;main.c: 225: {
  1369                           ;main.c: 226: if(++fullCount > 200)
  1370  028E  0AC6               	incf	_fullCount,f
  1371  028F  1903               	skipnz
  1372  0290  0AC7               	incf	_fullCount+1,f
  1373  0291  3000               	movlw	0
  1374  0292  0247               	subwf	_fullCount+1,w
  1375  0293  30C9               	movlw	201
  1376  0294  1903               	skipnz
  1377  0295  0246               	subwf	_fullCount,w
  1378  0296  1C03               	skipc
  1379  0297  0008               	return
  1380                           
  1381                           ;main.c: 219: {
  1382                           ;main.c: 220: fullCount = 0;
  1383  0298  01C6               	clrf	_fullCount
  1384  0299  01C7               	clrf	_fullCount+1
  1385                           
  1386                           ;main.c: 221: chrgFullFlag = 1;
  1387  029A  01D7               	clrf	_chrgFullFlag
  1388  029B  0AD7               	incf	_chrgFullFlag,f
  1389  029C  0008               	return
  1390  029D                     l1935:	
  1391                           
  1392                           ;main.c: 224: else if(power_ad > 4180)
  1393  029D  3010               	movlw	16
  1394  029E  0249               	subwf	_power_ad+1,w	;volatile
  1395  029F  3055               	movlw	85
  1396  02A0  1903               	skipnz
  1397  02A1  0248               	subwf	_power_ad,w	;volatile
  1398  02A2  1803               	btfsc	3,0
  1399  02A3  2A8E               	goto	l1937
  1400                           
  1401                           ;main.c: 232: else
  1402                           ;main.c: 233: {
  1403                           ;main.c: 234: fullCount = 0;
  1404  02A4  01C6               	clrf	_fullCount
  1405  02A5  01C7               	clrf	_fullCount+1
  1406                           
  1407                           ;main.c: 235: }
  1408                           ;main.c: 236: }
  1409  02A6  0008               	return
  1410  02A7                     l1945:	
  1411  02A7  300A               	movlw	10
  1412                           
  1413                           ;main.c: 237: else
  1414                           ;main.c: 238: {
  1415                           ;main.c: 239: chrgFlag = 0;
  1416  02A8  01D8               	clrf	_chrgFlag
  1417                           
  1418                           ;main.c: 240: chrgFullFlag = 0;
  1419  02A9  01D7               	clrf	_chrgFullFlag
  1420                           
  1421                           ;main.c: 241: fullCount = 0;
  1422  02AA  01C6               	clrf	_fullCount
  1423  02AB  01C7               	clrf	_fullCount+1
  1424                           
  1425                           ;main.c: 242: if(power_ad < 2800)
  1426  02AC  0249               	subwf	_power_ad+1,w	;volatile
  1427  02AD  30F0               	movlw	240
  1428  02AE  1903               	skipnz
  1429  02AF  0248               	subwf	_power_ad,w	;volatile
  1430  02B0  1803               	skipnc
  1431  02B1  2AC1               	goto	l1961
  1432                           
  1433                           ;main.c: 243: {
  1434                           ;main.c: 244: if(++lowBatTime >= 200)
  1435  02B2  30C8               	movlw	200
  1436  02B3  0ACC               	incf	_lowBatTime,f
  1437  02B4  024C               	subwf	_lowBatTime,w
  1438  02B5  1C03               	skipc
  1439  02B6  0008               	return
  1440                           
  1441                           ;main.c: 245: {
  1442                           ;main.c: 246: lowBatTime = 0;
  1443  02B7  01CC               	clrf	_lowBatTime
  1444                           
  1445                           ;main.c: 247: if(workStep > 0)
  1446  02B8  087A               	movf	_workStep,w
  1447  02B9  1903               	btfsc	3,2
  1448  02BA  0008               	return
  1449  02BB  30FA               	movlw	250
  1450                           
  1451                           ;main.c: 248: {
  1452                           ;main.c: 249: workStep = 0;
  1453  02BC  01FA               	clrf	_workStep
  1454                           
  1455                           ;main.c: 250: lowBatFlag = 1;
  1456  02BD  01D4               	clrf	_lowBatFlag
  1457  02BE  0AD4               	incf	_lowBatFlag,f
  1458                           
  1459                           ;main.c: 251: shanshuoTime = 250;
  1460  02BF  00D2               	movwf	_shanshuoTime
  1461  02C0  0008               	return
  1462  02C1                     l1961:	
  1463                           
  1464                           ;main.c: 255: else
  1465                           ;main.c: 256: {
  1466                           ;main.c: 257: lowBatTime = 0;
  1467  02C1  01CC               	clrf	_lowBatTime
  1468  02C2  0008               	return
  1469  02C3                     __end_of_chrgCtr:	
  1470                           
  1471                           	psect	text8
  1472  02C3                     __ptext8:	
  1473 ;; *************** function _checkBatAD *****************
  1474 ;; Defined at:
  1475 ;;		line 389 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  power_temp      4   34[BANK0 ] volatile unsigned long 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 100/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1
  1489 ;;      Params:         0       0       0
  1490 ;;      Locals:         0       4       0
  1491 ;;      Temps:          1       0       0
  1492 ;;      Totals:         1       4       0
  1493 ;;Total ram usage:        5 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    3
  1496 ;; This function calls:
  1497 ;;		_ADC_Sample
  1498 ;;		___ftdiv
  1499 ;;		___fttol
  1500 ;;		___lwtoft
  1501 ;; This function is called by:
  1502 ;;		_main
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function _checkBatAD
  1508  02C3                     _checkBatAD:	
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  1512  02C3  301F               	movlw	31
  1513                           
  1514                           ;main.c: 391: test_adc = ADC_Sample(31, 0);
  1515  02C4  01F2               	clrf	ADC_Sample@adldo
  1516  02C5  2015               	fcall	_ADC_Sample
  1517  02C6  00DC               	movwf	_test_adc	;volatile
  1518                           
  1519                           ;main.c: 392: if (0xA5 == test_adc)
  1520  02C7  30A5               	movlw	165
  1521  02C8  065C               	xorwf	_test_adc,w	;volatile
  1522  02C9  1D03               	btfss	3,2
  1523  02CA  2AF0               	goto	l2251
  1524                           
  1525                           ;main.c: 393: {
  1526                           ;main.c: 394: volatile unsigned long power_temp;
  1527                           ;main.c: 396: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  1528  02CB  3096               	movlw	150
  1529  02CC  01A9               	clrf	___ftdiv@f1
  1530  02CD  00AA               	movwf	___ftdiv@f1+1
  1531  02CE  304A               	movlw	74
  1532  02CF  00AB               	movwf	___ftdiv@f1+2
  1533  02D0  085E               	movf	_adresult+1,w	;volatile
  1534  02D1  00A4               	movwf	___lwtoft@c+1
  1535  02D2  085D               	movf	_adresult,w	;volatile
  1536  02D3  00A3               	movwf	___lwtoft@c
  1537  02D4  2408               	fcall	___lwtoft
  1538  02D5  0823               	movf	?___lwtoft,w
  1539  02D6  00A6               	movwf	___ftdiv@f2
  1540  02D7  0824               	movf	?___lwtoft+1,w
  1541  02D8  00A7               	movwf	___ftdiv@f2+1
  1542  02D9  0825               	movf	?___lwtoft+2,w
  1543  02DA  00A8               	movwf	___ftdiv@f2+2
  1544  02DB  20FB               	fcall	___ftdiv
  1545  02DC  0826               	movf	?___ftdiv,w
  1546  02DD  00B5               	movwf	___fttol@f1
  1547  02DE  0827               	movf	?___ftdiv+1,w
  1548  02DF  00B6               	movwf	___fttol@f1+1
  1549  02E0  0828               	movf	?___ftdiv+2,w
  1550  02E1  00B7               	movwf	___fttol@f1+2
  1551  02E2  2161               	fcall	___fttol
  1552  02E3  0838               	movf	?___fttol+3,w
  1553  02E4  00C5               	movwf	checkBatAD@power_temp+3	;volatile
  1554  02E5  0837               	movf	?___fttol+2,w
  1555  02E6  00C4               	movwf	checkBatAD@power_temp+2	;volatile
  1556  02E7  0836               	movf	?___fttol+1,w
  1557  02E8  00C3               	movwf	checkBatAD@power_temp+1	;volatile
  1558  02E9  0835               	movf	?___fttol,w
  1559  02EA  00C2               	movwf	checkBatAD@power_temp	;volatile
  1560                           
  1561                           ;main.c: 397: power_ad = (unsigned int)(power_temp);
  1562  02EB  0843               	movf	checkBatAD@power_temp+1,w	;volatile
  1563  02EC  00C9               	movwf	_power_ad+1	;volatile
  1564  02ED  0842               	movf	checkBatAD@power_temp,w	;volatile
  1565  02EE  00C8               	movwf	_power_ad	;volatile
  1566                           
  1567                           ;main.c: 398: }
  1568  02EF  0008               	return
  1569  02F0                     l2251:	
  1570                           
  1571                           ;main.c: 399: else
  1572                           ;main.c: 400: {
  1573                           ;main.c: 401: ADCON0 = 0;
  1574  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  1575  02F1  0195               	clrf	21	;volatile
  1576                           
  1577                           ;main.c: 402: ADCON1 = 0;
  1578  02F2  0196               	clrf	22	;volatile
  1579                           
  1580                           ;main.c: 403: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1581  02F3  3085               	movlw	133
  1582  02F4  00F7               	movwf	??_checkBatAD
  1583  02F5                     u2077:	
  1584  02F5  0BF7               	decfsz	??_checkBatAD,f
  1585  02F6  2AF5               	goto	u2077
  1586  02F7  0008               	return
  1587  02F8                     __end_of_checkBatAD:	
  1588                           
  1589                           	psect	text9
  1590  0408                     __ptext9:	
  1591 ;; *************** function ___lwtoft *****************
  1592 ;; Defined at:
  1593 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  c               2    3[BANK0 ] unsigned int 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  3    3[BANK0 ] float 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, status,0, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 100/0
  1604 ;;		On exit  : 100/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1
  1607 ;;      Params:         0       3       0
  1608 ;;      Locals:         0       0       0
  1609 ;;      Temps:          0       0       0
  1610 ;;      Totals:         0       3       0
  1611 ;;Total ram usage:        3 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    2
  1614 ;; This function calls:
  1615 ;;		___ftpack
  1616 ;; This function is called by:
  1617 ;;		_checkBatAD
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function ___lwtoft
  1623  0408                     ___lwtoft:	
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  1627  0408  0823               	movf	___lwtoft@c,w
  1628  0409  00F2               	movwf	___ftpack@arg
  1629  040A  0824               	movf	___lwtoft@c+1,w
  1630  040B  00F3               	movwf	___ftpack@arg+1
  1631  040C  308E               	movlw	142
  1632  040D  01F4               	clrf	___ftpack@arg+2
  1633  040E  00F5               	movwf	___ftpack@exp
  1634  040F  01F6               	clrf	___ftpack@sign
  1635  0410  2206               	fcall	___ftpack
  1636  0411  0872               	movf	?___ftpack,w
  1637  0412  00A3               	movwf	?___lwtoft
  1638  0413  0873               	movf	?___ftpack+1,w
  1639  0414  00A4               	movwf	?___lwtoft+1
  1640  0415  0874               	movf	?___ftpack+2,w
  1641  0416  00A5               	movwf	?___lwtoft+2
  1642  0417  0008               	return
  1643  0418                     __end_of___lwtoft:	
  1644                           
  1645                           	psect	text10
  1646  0161                     __ptext10:	
  1647 ;; *************** function ___fttol *****************
  1648 ;; Defined at:
  1649 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  f1              3   21[BANK0 ] float 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  lval            4   29[BANK0 ] unsigned long 
  1654 ;;  exp1            1   33[BANK0 ] unsigned char 
  1655 ;;  sign1           1   28[BANK0 ] unsigned char 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  4   21[BANK0 ] long 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0
  1660 ;; Tracked objects:
  1661 ;;		On entry : 100/0
  1662 ;;		On exit  : 100/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1
  1665 ;;      Params:         0       4       0
  1666 ;;      Locals:         0       6       0
  1667 ;;      Temps:          0       3       0
  1668 ;;      Totals:         0      13       0
  1669 ;;Total ram usage:       13 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_checkBatAD
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function ___fttol
  1681  0161                     ___fttol:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1685  0161  21B8               	fcall	PL8	;call to abstracted procedure
  1686  0162  1003               	clrc
  1687  0163  0D3A               	rlf	??___fttol+1,w
  1688  0164  0D3B               	rlf	??___fttol+2,w
  1689  0165  00C1               	movwf	___fttol@exp1
  1690  0166  0841               	movf	___fttol@exp1,w
  1691  0167  1D03               	btfss	3,2
  1692  0168  296E               	goto	l1855
  1693  0169                     l1853:	
  1694  0169  01B5               	clrf	?___fttol
  1695  016A  01B6               	clrf	?___fttol+1
  1696  016B  01B7               	clrf	?___fttol+2
  1697  016C  01B8               	clrf	?___fttol+3
  1698  016D  0008               	return
  1699  016E                     l1855:	
  1700  016E  21B8               	fcall	PL8	;call to abstracted procedure
  1701  016F  3017               	movlw	23
  1702  0170                     u1265:	
  1703  0170  1003               	clrc
  1704  0171  0CBB               	rrf	??___fttol+2,f
  1705  0172  0CBA               	rrf	??___fttol+1,f
  1706  0173  0CB9               	rrf	??___fttol,f
  1707  0174  3EFF               	addlw	-1
  1708  0175  1D03               	skipz
  1709  0176  2970               	goto	u1265
  1710  0177  0839               	movf	??___fttol,w
  1711  0178  00BC               	movwf	___fttol@sign1
  1712  0179  17B6               	bsf	___fttol@f1+1,7
  1713  017A  01B7               	clrf	___fttol@f1+2
  1714  017B  0835               	movf	___fttol@f1,w
  1715  017C  00BD               	movwf	___fttol@lval
  1716  017D  0836               	movf	___fttol@f1+1,w
  1717  017E  00BE               	movwf	___fttol@lval+1
  1718  017F  0837               	movf	___fttol@f1+2,w
  1719  0180  00BF               	movwf	___fttol@lval+2
  1720  0181  308E               	movlw	142
  1721  0182  01C0               	clrf	___fttol@lval+3
  1722  0183  02C1               	subwf	___fttol@exp1,f
  1723  0184  1FC1               	btfss	___fttol@exp1,7
  1724  0185  2993               	goto	l1875
  1725  0186  0841               	movf	___fttol@exp1,w
  1726  0187  3A80               	xorlw	128
  1727  0188  3E8F               	addlw	143
  1728  0189  1C03               	btfss	3,0
  1729  018A  2969               	goto	l1853
  1730  018B                     l1871:	
  1731  018B  1003               	clrc
  1732  018C  0CC0               	rrf	___fttol@lval+3,f
  1733  018D  0CBF               	rrf	___fttol@lval+2,f
  1734  018E  0CBE               	rrf	___fttol@lval+1,f
  1735  018F  0CBD               	rrf	___fttol@lval,f
  1736  0190  0FC1               	incfsz	___fttol@exp1,f
  1737  0191  298B               	goto	l1871
  1738  0192  29A1               	goto	l1883
  1739  0193                     l1875:	
  1740  0193  3018               	movlw	24
  1741  0194  0241               	subwf	___fttol@exp1,w
  1742  0195  1803               	btfsc	3,0
  1743  0196  2969               	goto	l1853
  1744  0197                     l1881:	
  1745  0197  0841               	movf	___fttol@exp1,w
  1746  0198  1903               	btfsc	3,2
  1747  0199  29A1               	goto	l1883
  1748  019A  1003               	clrc
  1749  019B  0DBD               	rlf	___fttol@lval,f
  1750  019C  0DBE               	rlf	___fttol@lval+1,f
  1751  019D  0DBF               	rlf	___fttol@lval+2,f
  1752  019E  0DC0               	rlf	___fttol@lval+3,f
  1753  019F  03C1               	decf	___fttol@exp1,f
  1754  01A0  2997               	goto	l1881
  1755  01A1                     l1883:	
  1756  01A1  083C               	movf	___fttol@sign1,w
  1757  01A2  1903               	btfsc	3,2
  1758  01A3  29AF               	goto	l1887
  1759  01A4  09BD               	comf	___fttol@lval,f
  1760  01A5  09BE               	comf	___fttol@lval+1,f
  1761  01A6  09BF               	comf	___fttol@lval+2,f
  1762  01A7  09C0               	comf	___fttol@lval+3,f
  1763  01A8  0ABD               	incf	___fttol@lval,f
  1764  01A9  1903               	skipnz
  1765  01AA  0ABE               	incf	___fttol@lval+1,f
  1766  01AB  1903               	skipnz
  1767  01AC  0ABF               	incf	___fttol@lval+2,f
  1768  01AD  1903               	skipnz
  1769  01AE  0AC0               	incf	___fttol@lval+3,f
  1770  01AF                     l1887:	
  1771  01AF  0840               	movf	___fttol@lval+3,w
  1772  01B0  00B8               	movwf	?___fttol+3
  1773  01B1  083F               	movf	___fttol@lval+2,w
  1774  01B2  00B7               	movwf	?___fttol+2
  1775  01B3  083E               	movf	___fttol@lval+1,w
  1776  01B4  00B6               	movwf	?___fttol+1
  1777  01B5  083D               	movf	___fttol@lval,w
  1778  01B6  00B5               	movwf	?___fttol
  1779  01B7  0008               	return
  1780  01B8                     __end_of___fttol:	
  1781  01B8                     PL8:	
  1782  01B8  0835               	movf	___fttol@f1,w
  1783  01B9  00B9               	movwf	??___fttol
  1784  01BA  0836               	movf	___fttol@f1+1,w
  1785  01BB  00BA               	movwf	??___fttol+1
  1786  01BC  0837               	movf	___fttol@f1+2,w
  1787  01BD  00BB               	movwf	??___fttol+2
  1788  01BE  0008               	return
  1789  01BF                     __end_ofPL8:	
  1790                           
  1791                           	psect	text11
  1792  00FB                     __ptext11:	
  1793 ;; *************** function ___ftdiv *****************
  1794 ;; Defined at:
  1795 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  f2              3    6[BANK0 ] float 
  1798 ;;  f1              3    9[BANK0 ] float 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  f3              3   16[BANK0 ] float 
  1801 ;;  sign            1   20[BANK0 ] unsigned char 
  1802 ;;  exp             1   19[BANK0 ] unsigned char 
  1803 ;;  cntr            1   15[BANK0 ] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  3    6[BANK0 ] float 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0, pclath, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 100/0
  1810 ;;		On exit  : 100/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMMON   BANK0   BANK1
  1813 ;;      Params:         0       6       0
  1814 ;;      Locals:         0       6       0
  1815 ;;      Temps:          0       3       0
  1816 ;;      Totals:         0      15       0
  1817 ;;Total ram usage:       15 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    2
  1820 ;; This function calls:
  1821 ;;		___ftpack
  1822 ;; This function is called by:
  1823 ;;		_checkBatAD
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           
  1828                           ;psect for function ___ftdiv
  1829  00FB                     ___ftdiv:	
  1830                           
  1831                           ;incstack = 0
  1832                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1833  00FB  0829               	movf	___ftdiv@f1,w
  1834  00FC  00AC               	movwf	??___ftdiv
  1835  00FD  082A               	movf	___ftdiv@f1+1,w
  1836  00FE  00AD               	movwf	??___ftdiv+1
  1837  00FF  082B               	movf	___ftdiv@f1+2,w
  1838  0100  00AE               	movwf	??___ftdiv+2
  1839  0101  1003               	clrc
  1840  0102  0D2D               	rlf	??___ftdiv+1,w
  1841  0103  0D2E               	rlf	??___ftdiv+2,w
  1842  0104  00B3               	movwf	___ftdiv@exp
  1843  0105  0833               	movf	___ftdiv@exp,w
  1844  0106  1D03               	btfss	3,2
  1845  0107  2909               	goto	l2203
  1846  0108  295D               	ljmp	PL10	;call to abstracted procedure
  1847  0109                     l2203:	
  1848  0109  0826               	movf	___ftdiv@f2,w
  1849  010A  00AC               	movwf	??___ftdiv
  1850  010B  0827               	movf	___ftdiv@f2+1,w
  1851  010C  00AD               	movwf	??___ftdiv+1
  1852  010D  0828               	movf	___ftdiv@f2+2,w
  1853  010E  00AE               	movwf	??___ftdiv+2
  1854  010F  1003               	clrc
  1855  0110  0D2D               	rlf	??___ftdiv+1,w
  1856  0111  0D2E               	rlf	??___ftdiv+2,w
  1857  0112  00B4               	movwf	___ftdiv@sign
  1858  0113  0834               	movf	___ftdiv@sign,w
  1859  0114  1D03               	btfss	3,2
  1860  0115  2917               	goto	l945
  1861  0116  295D               	ljmp	PL10	;call to abstracted procedure
  1862  0117                     l945:	
  1863  0117  3089               	movlw	137
  1864  0118  01B0               	clrf	___ftdiv@f3
  1865  0119  01B1               	clrf	___ftdiv@f3+1
  1866  011A  01B2               	clrf	___ftdiv@f3+2
  1867  011B  0734               	addwf	___ftdiv@sign,w
  1868  011C  00AC               	movwf	??___ftdiv
  1869  011D  02B3               	subwf	___ftdiv@exp,f
  1870  011E  082B               	movf	___ftdiv@f1+2,w
  1871  011F  00B4               	movwf	___ftdiv@sign
  1872  0120  0828               	movf	___ftdiv@f2+2,w
  1873  0121  06B4               	xorwf	___ftdiv@sign,f
  1874  0122  3080               	movlw	128
  1875  0123  05B4               	andwf	___ftdiv@sign,f
  1876  0124  3018               	movlw	24
  1877  0125  17AA               	bsf	___ftdiv@f1+1,7
  1878  0126  01AB               	clrf	___ftdiv@f1+2
  1879  0127  17A7               	bsf	___ftdiv@f2+1,7
  1880  0128  01A8               	clrf	___ftdiv@f2+2
  1881  0129  00AF               	movwf	___ftdiv@cntr
  1882  012A                     l2225:	
  1883  012A  1003               	clrc
  1884  012B  0DB0               	rlf	___ftdiv@f3,f
  1885  012C  0DB1               	rlf	___ftdiv@f3+1,f
  1886  012D  0DB2               	rlf	___ftdiv@f3+2,f
  1887  012E  0828               	movf	___ftdiv@f2+2,w
  1888  012F  022B               	subwf	___ftdiv@f1+2,w
  1889  0130  1D03               	skipz
  1890  0131  2938               	goto	u1955
  1891  0132  0827               	movf	___ftdiv@f2+1,w
  1892  0133  022A               	subwf	___ftdiv@f1+1,w
  1893  0134  1D03               	skipz
  1894  0135  2938               	goto	u1955
  1895  0136  0826               	movf	___ftdiv@f2,w
  1896  0137  0229               	subwf	___ftdiv@f1,w
  1897  0138                     u1955:	
  1898  0138  1C03               	skipc
  1899  0139  2946               	goto	L4
  1900  013A  0826               	movf	___ftdiv@f2,w
  1901  013B  02A9               	subwf	___ftdiv@f1,f
  1902  013C  0827               	movf	___ftdiv@f2+1,w
  1903  013D  1C03               	skipc
  1904  013E  0F27               	incfsz	___ftdiv@f2+1,w
  1905  013F  02AA               	subwf	___ftdiv@f1+1,f
  1906  0140  0828               	movf	___ftdiv@f2+2,w
  1907  0141  1C03               	skipc
  1908  0142  0A28               	incf	___ftdiv@f2+2,w
  1909  0143  02AB               	subwf	___ftdiv@f1+2,f
  1910  0144  1430               	bsf	___ftdiv@f3,0
  1911  0145  1003               	clrc
  1912  0146                     L4:	
  1913  0146  0DA9               	rlf	___ftdiv@f1,f
  1914  0147  0DAA               	rlf	___ftdiv@f1+1,f
  1915  0148  0DAB               	rlf	___ftdiv@f1+2,f
  1916  0149  0BAF               	decfsz	___ftdiv@cntr,f
  1917  014A  292A               	goto	l2225
  1918  014B  0830               	movf	___ftdiv@f3,w
  1919  014C  00F2               	movwf	___ftpack@arg
  1920  014D  0831               	movf	___ftdiv@f3+1,w
  1921  014E  00F3               	movwf	___ftpack@arg+1
  1922  014F  0832               	movf	___ftdiv@f3+2,w
  1923  0150  00F4               	movwf	___ftpack@arg+2
  1924  0151  0833               	movf	___ftdiv@exp,w
  1925  0152  00F5               	movwf	___ftpack@exp
  1926  0153  0834               	movf	___ftdiv@sign,w
  1927  0154  00F6               	movwf	___ftpack@sign
  1928  0155  2206               	fcall	___ftpack
  1929  0156  0872               	movf	?___ftpack,w
  1930  0157  00A6               	movwf	?___ftdiv
  1931  0158  0873               	movf	?___ftpack+1,w
  1932  0159  00A7               	movwf	?___ftdiv+1
  1933  015A  0874               	movf	?___ftpack+2,w
  1934  015B  00A8               	movwf	?___ftdiv+2
  1935  015C  0008               	return
  1936  015D                     __end_of___ftdiv:	
  1937  015D                     PL10:	
  1938  015D  01A6               	clrf	?___ftdiv
  1939  015E  01A7               	clrf	?___ftdiv+1
  1940  015F  01A8               	clrf	?___ftdiv+2
  1941  0160  0008               	return
  1942  0161                     __end_ofPL10:	
  1943                           
  1944                           	psect	text12
  1945  0206                     __ptext12:	
  1946 ;; *************** function ___ftpack *****************
  1947 ;; Defined at:
  1948 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  arg             3    2[COMMON] unsigned um
  1951 ;;  exp             1    5[COMMON] unsigned char 
  1952 ;;  sign            1    6[COMMON] unsigned char 
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  3    2[COMMON] float 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, status,0
  1959 ;; Tracked objects:
  1960 ;;		On entry : 100/0
  1961 ;;		On exit  : 100/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1
  1964 ;;      Params:         5       0       0
  1965 ;;      Locals:         0       0       0
  1966 ;;      Temps:          0       3       0
  1967 ;;      Totals:         5       3       0
  1968 ;;Total ram usage:        8 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    1
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		___ftdiv
  1975 ;;		___lwtoft
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           
  1980                           ;psect for function ___ftpack
  1981  0206                     ___ftpack:	
  1982                           
  1983                           ;incstack = 0
  1984                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1985  0206  0875               	movf	___ftpack@exp,w
  1986  0207  1903               	btfsc	3,2
  1987  0208  2A0E               	goto	l891
  1988  0209  0874               	movf	___ftpack@arg+2,w
  1989  020A  0473               	iorwf	___ftpack@arg+1,w
  1990  020B  0472               	iorwf	___ftpack@arg,w
  1991  020C  1D03               	skipz
  1992  020D  2A14               	goto	l2181
  1993  020E                     l891:	
  1994  020E  01F2               	clrf	?___ftpack
  1995  020F  01F3               	clrf	?___ftpack+1
  1996  0210  01F4               	clrf	?___ftpack+2
  1997  0211  0008               	return
  1998  0212                     l2179:	
  1999  0212  0AF5               	incf	___ftpack@exp,f
  2000  0213  2242               	fcall	PL12	;call to abstracted procedure
  2001  0214                     l2181:	
  2002  0214  30FE               	movlw	254
  2003  0215  0574               	andwf	___ftpack@arg+2,w
  2004  0216  1903               	btfsc	3,2
  2005  0217  2A20               	goto	l2185
  2006  0218  2A12               	goto	l2179
  2007  0219                     l2183:	
  2008  0219  0AF5               	incf	___ftpack@exp,f
  2009  021A  0AF2               	incf	___ftpack@arg,f
  2010  021B  1903               	skipnz
  2011  021C  0AF3               	incf	___ftpack@arg+1,f
  2012  021D  1903               	skipnz
  2013  021E  0AF4               	incf	___ftpack@arg+2,f
  2014  021F  2242               	fcall	PL12	;call to abstracted procedure
  2015  0220                     l2185:	
  2016  0220  30FF               	movlw	255
  2017  0221  0574               	andwf	___ftpack@arg+2,w
  2018  0222  1903               	btfsc	3,2
  2019  0223  2A2E               	goto	l2189
  2020  0224  2A19               	goto	l2183
  2021  0225                     l2191:	
  2022  0225  3002               	movlw	2
  2023  0226  0275               	subwf	___ftpack@exp,w
  2024  0227  1C03               	btfss	3,0
  2025  0228  2A30               	goto	l903
  2026  0229  03F5               	decf	___ftpack@exp,f
  2027  022A  1003               	clrc
  2028  022B  0DF2               	rlf	___ftpack@arg,f
  2029  022C  0DF3               	rlf	___ftpack@arg+1,f
  2030  022D  0DF4               	rlf	___ftpack@arg+2,f
  2031  022E                     l2189:	
  2032  022E  1FF3               	btfss	___ftpack@arg+1,7
  2033  022F  2A25               	goto	l2191
  2034  0230                     l903:	
  2035  0230  1C75               	btfss	___ftpack@exp,0
  2036  0231  13F3               	bcf	___ftpack@arg+1,7
  2037  0232  1003               	clrc
  2038  0233  0CF5               	rrf	___ftpack@exp,f
  2039  0234  0875               	movf	___ftpack@exp,w
  2040  0235  00A2               	movwf	??___ftpack+2
  2041  0236  01A1               	clrf	??___ftpack+1
  2042  0237  01A0               	clrf	??___ftpack
  2043  0238  0820               	movf	??___ftpack,w
  2044  0239  04F2               	iorwf	___ftpack@arg,f
  2045  023A  0821               	movf	??___ftpack+1,w
  2046  023B  04F3               	iorwf	___ftpack@arg+1,f
  2047  023C  0822               	movf	??___ftpack+2,w
  2048  023D  04F4               	iorwf	___ftpack@arg+2,f
  2049  023E  0876               	movf	___ftpack@sign,w
  2050  023F  1D03               	btfss	3,2
  2051  0240  17F4               	bsf	___ftpack@arg+2,7
  2052  0241  0008               	return
  2053  0242                     __end_of___ftpack:	
  2054  0242                     PL12:	
  2055  0242  1003               	clrc
  2056  0243  0CF4               	rrf	___ftpack@arg+2,f
  2057  0244  0CF3               	rrf	___ftpack@arg+1,f
  2058  0245  0CF2               	rrf	___ftpack@arg,f
  2059  0246  0008               	return
  2060  0247                     __end_ofPL12:	
  2061                           
  2062                           	psect	text13
  2063  0015                     __ptext13:	
  2064 ;; *************** function _ADC_Sample *****************
  2065 ;; Defined at:
  2066 ;;		line 591 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  adch            1    wreg     unsigned char 
  2069 ;;  adldo           1    2[COMMON] unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  adch            1    1[BANK0 ] unsigned char 
  2072 ;;  j               1    0[BANK0 ] unsigned char 
  2073 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2074 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2075 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2076 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2077 ;;  i               1    2[BANK0 ] unsigned char 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      unsigned char 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 100/0
  2084 ;;		On exit  : 100/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1
  2087 ;;      Params:         1       0       0
  2088 ;;      Locals:         0      13       0
  2089 ;;      Temps:          4       0       0
  2090 ;;      Totals:         5      13       0
  2091 ;;Total ram usage:       18 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    1
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_checkBatAD
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           
  2102                           ;psect for function _ADC_Sample
  2103  0015                     _ADC_Sample:	
  2104                           
  2105                           ;incstack = 0
  2106                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2107                           ;ADC_Sample@adch stored from wreg
  2108  0015  00A1               	movwf	ADC_Sample@adch
  2109                           
  2110                           ;main.c: 593: volatile unsigned long adsum = 0;
  2111                           
  2112                           ;main.c: 594: volatile unsigned int admin = 0, admax = 0;
  2113  0016  20ED               	fcall	PL6	;call to abstracted procedure
  2114                           
  2115                           ;main.c: 595: volatile unsigned int ad_temp = 0;
  2116  0017  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  2117  0018  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2118                           
  2119                           ;main.c: 597: if ((!LDO_EN) && (adldo & 0x04) )
  2120  0019  1683               	bsf	3,5	;RP0=1, select bank1
  2121  001A  1D16               	btfss	22,2	;volatile
  2122  001B  1D72               	btfss	ADC_Sample@adldo,2
  2123  001C  2824               	goto	l1749
  2124                           
  2125                           ;main.c: 598: {
  2126                           ;main.c: 600: ADCON1 = adldo;
  2127  001D  0872               	movf	ADC_Sample@adldo,w
  2128  001E  0096               	movwf	22	;volatile
  2129                           
  2130                           ;main.c: 601: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2131  001F  3085               	movlw	133
  2132  0020  00F3               	movwf	??_ADC_Sample
  2133  0021                     u2087:	
  2134  0021  0BF3               	decfsz	??_ADC_Sample,f
  2135  0022  2821               	goto	u2087
  2136                           
  2137                           ;main.c: 602: }
  2138  0023  2826               	goto	l1751
  2139  0024                     l1749:	
  2140                           
  2141                           ;main.c: 603: else
  2142                           ;main.c: 604: ADCON1 = adldo;
  2143  0024  0872               	movf	ADC_Sample@adldo,w
  2144  0025  0096               	movwf	22	;volatile
  2145  0026                     l1751:	
  2146                           
  2147                           ;main.c: 606: if(adch & 0x10)
  2148  0026  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0027  1E21               	btfss	ADC_Sample@adch,4
  2150  0028  282E               	goto	l1759
  2151                           
  2152                           ;main.c: 607: {
  2153                           ;main.c: 608: CHS4 = 1;
  2154  0029  1683               	bsf	3,5	;RP0=1, select bank1
  2155  002A  1716               	bsf	22,6	;volatile
  2156                           
  2157                           ;main.c: 609: adch &= 0x0f;
  2158  002B  300F               	movlw	15
  2159  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2160  002D  05A1               	andwf	ADC_Sample@adch,f
  2161  002E                     l1759:	
  2162                           
  2163                           ;main.c: 612: for (i = 0; i < 10; i++)
  2164  002E  01A2               	clrf	ADC_Sample@i
  2165  002F                     l1765:	
  2166                           
  2167                           ;main.c: 613: {
  2168                           ;main.c: 614: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2169  002F  0821               	movf	ADC_Sample@adch,w
  2170  0030  00F3               	movwf	??_ADC_Sample
  2171  0031  3001               	movlw	1
  2172  0032  1003               	clrc
  2173  0033                     L5:	
  2174  0033  0DF3               	rlf	??_ADC_Sample,f
  2175  0034  3EFF               	addlw	-1
  2176  0035  1003               	clrc
  2177  0036  1D03               	skipz
  2178  0037  2833               	goto	L5
  2179  0038  0D73               	rlf	??_ADC_Sample,w
  2180  0039  3841               	iorlw	65
  2181  003A  1683               	bsf	3,5	;RP0=1, select bank1
  2182  003B  0095               	movwf	21	;volatile
  2183  003C  0000               	nop	;# 
  2184  003D  0000               	nop	;# 
  2185  003E  0000               	nop	;# 
  2186  003F  0000               	nop	;# 
  2187                           
  2188                           ;main.c: 619: GODONE = 1;
  2189  0040  1683               	bsf	3,5	;RP0=1, select bank1
  2190  0041  1495               	bsf	21,1	;volatile
  2191                           
  2192                           ;main.c: 621: unsigned char j = 0;
  2193  0042  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0043  01A0               	clrf	ADC_Sample@j
  2195  0044                     l720:	
  2196                           ;main.c: 622: while (GODONE)
  2197                           
  2198  0044  1683               	bsf	3,5	;RP0=1, select bank1
  2199  0045  1C95               	btfss	21,1	;volatile
  2200  0046  284F               	goto	l1775
  2201                           
  2202                           ;main.c: 623: {
  2203                           ;main.c: 624: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2204  0047  2848               	nop2	;2 cycle nop
  2205  0048  2849               	nop2	;2 cycle nop
  2206  0049  284A               	nop2	;2 cycle nop
  2207  004A  284B               	nop2	;2 cycle nop
  2208                           
  2209                           ;main.c: 626: if (0 == (--j))
  2210  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2211  004C  0BA0               	decfsz	ADC_Sample@j,f
  2212  004D  2844               	goto	l720
  2213                           
  2214                           ;main.c: 627: return 0;
  2215  004E  3400               	retlw	0
  2216  004F                     l1775:	
  2217                           
  2218                           ;main.c: 628: }
  2219                           ;main.c: 630: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2220  004F  0819               	movf	25,w	;volatile
  2221  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0051  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  2223  0052  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2224  0053  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  2225  0054  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2226  0055  30F0               	movlw	240
  2227  0056  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2228  0057  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2229  0058  390F               	andlw	15
  2230  0059  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2231  005A  30F0               	movlw	240
  2232  005B  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  2233  005C  1683               	bsf	3,5	;RP0=1, select bank1
  2234  005D  0E18               	swapf	24,w	;volatile
  2235  005E  390F               	andlw	15
  2236  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0060  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  2238  0061  1803               	skipnc
  2239  0062  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2240                           
  2241                           ;main.c: 632: if (0 == admax)
  2242  0063  0829               	movf	ADC_Sample@admax,w	;volatile
  2243  0064  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  2244  0065  1D03               	btfss	3,2
  2245  0066  2869               	goto	l1783
  2246                           
  2247                           ;main.c: 633: {
  2248                           ;main.c: 634: admax = ad_temp;
  2249  0067  20F6               	fcall	PL14	;call to abstracted procedure
  2250  0068  287B               	goto	l1789
  2251  0069                     l1783:	
  2252                           ;main.c: 636: }
  2253                           
  2254                           ;main.c: 635: admin = ad_temp;
  2255                           
  2256                           
  2257                           ;main.c: 637: else if (ad_temp > admax)
  2258  0069  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2259  006A  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  2260  006B  1D03               	skipz
  2261  006C  286F               	goto	u1135
  2262  006D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2263  006E  0229               	subwf	ADC_Sample@admax,w	;volatile
  2264  006F                     u1135:	
  2265  006F  1803               	skipnc
  2266  0070  2873               	goto	l1787
  2267                           
  2268                           ;main.c: 638: admax = ad_temp;
  2269  0071  20F6               	fcall	PL14	;call to abstracted procedure
  2270  0072  287F               	goto	l726
  2271  0073                     l1787:	
  2272                           
  2273                           ;main.c: 639: else if (ad_temp < admin)
  2274  0073  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2275  0074  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2276  0075  1D03               	skipz
  2277  0076  2879               	goto	u1145
  2278  0077  0827               	movf	ADC_Sample@admin,w	;volatile
  2279  0078  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  2280  0079                     u1145:	
  2281  0079  1803               	skipnc
  2282  007A  287F               	goto	l726
  2283  007B                     l1789:	
  2284                           
  2285                           ;main.c: 640: admin = ad_temp;
  2286  007B  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2287  007C  00A8               	movwf	ADC_Sample@admin+1	;volatile
  2288  007D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2289  007E  00A7               	movwf	ADC_Sample@admin	;volatile
  2290  007F                     l726:	
  2291                           
  2292                           ;main.c: 642: adsum += ad_temp;
  2293  007F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2294  0080  00F3               	movwf	??_ADC_Sample
  2295  0081  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2296  0082  00F4               	movwf	??_ADC_Sample+1
  2297  0083  01F5               	clrf	??_ADC_Sample+2
  2298  0084  01F6               	clrf	??_ADC_Sample+3
  2299  0085  0873               	movf	??_ADC_Sample,w
  2300  0086  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  2301  0087  0874               	movf	??_ADC_Sample+1,w
  2302  0088  1103               	clrz
  2303  0089  1803               	skipnc
  2304  008A  3E01               	addlw	1
  2305  008B  1D03               	btfss	3,2
  2306  008C  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  2307  008D  0875               	movf	??_ADC_Sample+2,w
  2308  008E  1103               	clrz
  2309  008F  1803               	skipnc
  2310  0090  3E01               	addlw	1
  2311  0091  1D03               	btfss	3,2
  2312  0092  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  2313  0093  0876               	movf	??_ADC_Sample+3,w
  2314  0094  1103               	clrz
  2315  0095  1803               	skipnc
  2316  0096  3E01               	addlw	1
  2317  0097  1D03               	btfss	3,2
  2318  0098  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  2319  0099  300A               	movlw	10
  2320  009A  0AA2               	incf	ADC_Sample@i,f
  2321  009B  0222               	subwf	ADC_Sample@i,w
  2322  009C  1C03               	skipc
  2323  009D  282F               	goto	l1765
  2324                           
  2325                           ;main.c: 643: }
  2326                           ;main.c: 644: adsum -= admax;
  2327  009E  0829               	movf	ADC_Sample@admax,w	;volatile
  2328  009F  00F3               	movwf	??_ADC_Sample
  2329  00A0  082A               	movf	ADC_Sample@admax+1,w	;volatile
  2330  00A1  20DE               	fcall	PL2	;call to abstracted procedure
  2331  00A2  1C03               	skipc
  2332  00A3  0F76               	incfsz	??_ADC_Sample+3,w
  2333  00A4  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  2334                           
  2335                           ;main.c: 645: if (adsum >= admin)
  2336  00A5  0827               	movf	ADC_Sample@admin,w	;volatile
  2337  00A6  00F3               	movwf	??_ADC_Sample
  2338  00A7  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2339  00A8  00F4               	movwf	??_ADC_Sample+1
  2340  00A9  01F5               	clrf	??_ADC_Sample+2
  2341  00AA  01F6               	clrf	??_ADC_Sample+3
  2342  00AB  0876               	movf	??_ADC_Sample+3,w
  2343  00AC  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  2344  00AD  1D03               	skipz
  2345  00AE  28B9               	goto	u1185
  2346  00AF  0875               	movf	??_ADC_Sample+2,w
  2347  00B0  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  2348  00B1  1D03               	skipz
  2349  00B2  28B9               	goto	u1185
  2350  00B3  0874               	movf	??_ADC_Sample+1,w
  2351  00B4  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  2352  00B5  1D03               	skipz
  2353  00B6  28B9               	goto	u1185
  2354  00B7  0873               	movf	??_ADC_Sample,w
  2355  00B8  0223               	subwf	ADC_Sample@adsum,w	;volatile
  2356  00B9                     u1185:	
  2357  00B9  1C03               	skipc
  2358  00BA  28C3               	goto	l730
  2359                           
  2360                           ;main.c: 646: adsum -= admin;
  2361  00BB  0827               	movf	ADC_Sample@admin,w	;volatile
  2362  00BC  00F3               	movwf	??_ADC_Sample
  2363  00BD  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2364  00BE  20DE               	fcall	PL2	;call to abstracted procedure
  2365  00BF  1C03               	skipc
  2366  00C0  0F76               	incfsz	??_ADC_Sample+3,w
  2367  00C1  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  2368  00C2  28C7               	goto	l1799
  2369  00C3                     l730:	
  2370                           
  2371                           ;main.c: 647: else
  2372                           ;main.c: 648: adsum = 0;
  2373  00C3  01A3               	clrf	ADC_Sample@adsum	;volatile
  2374  00C4  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  2375  00C5  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  2376  00C6  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  2377  00C7                     l1799:	
  2378                           
  2379                           ;main.c: 650: adresult = adsum >> 3;
  2380  00C7  0823               	movf	ADC_Sample@adsum,w	;volatile
  2381  00C8  00F3               	movwf	??_ADC_Sample
  2382  00C9  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  2383  00CA  00F4               	movwf	??_ADC_Sample+1
  2384  00CB  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  2385  00CC  00F5               	movwf	??_ADC_Sample+2
  2386  00CD  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  2387  00CE  00F6               	movwf	??_ADC_Sample+3
  2388  00CF  3003               	movlw	3
  2389  00D0                     u1205:	
  2390  00D0  1003               	clrc
  2391  00D1  0CF6               	rrf	??_ADC_Sample+3,f
  2392  00D2  0CF5               	rrf	??_ADC_Sample+2,f
  2393  00D3  0CF4               	rrf	??_ADC_Sample+1,f
  2394  00D4  0CF3               	rrf	??_ADC_Sample,f
  2395  00D5  3EFF               	addlw	-1
  2396  00D6  1D03               	skipz
  2397  00D7  28D0               	goto	u1205
  2398  00D8  0874               	movf	??_ADC_Sample+1,w
  2399  00D9  00DE               	movwf	_adresult+1	;volatile
  2400  00DA  0873               	movf	??_ADC_Sample,w
  2401  00DB  00DD               	movwf	_adresult	;volatile
  2402                           
  2403                           ;main.c: 652: adsum = 0;
  2404                           
  2405                           ;main.c: 653: admin = 0;
  2406                           
  2407                           ;main.c: 654: admax = 0;
  2408  00DC  20ED               	fcall	PL6	;call to abstracted procedure
  2409                           
  2410                           ;main.c: 655: return 0xA5;
  2411  00DD  34A5               	retlw	165
  2412  00DE                     __end_of_ADC_Sample:	
  2413  00DE                     PL2:	
  2414  00DE  00F4               	movwf	??_ADC_Sample+1
  2415  00DF  01F5               	clrf	??_ADC_Sample+2
  2416  00E0  01F6               	clrf	??_ADC_Sample+3
  2417  00E1  0873               	movf	??_ADC_Sample,w
  2418  00E2  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  2419  00E3  0874               	movf	??_ADC_Sample+1,w
  2420  00E4  1C03               	skipc
  2421  00E5  0F74               	incfsz	??_ADC_Sample+1,w
  2422  00E6  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  2423  00E7  0875               	movf	??_ADC_Sample+2,w
  2424  00E8  1C03               	skipc
  2425  00E9  0F75               	incfsz	??_ADC_Sample+2,w
  2426  00EA  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  2427  00EB  0876               	movf	??_ADC_Sample+3,w
  2428  00EC  0008               	return
  2429  00ED                     __end_ofPL2:	
  2430  00ED                     PL6:	
  2431  00ED  01A3               	clrf	ADC_Sample@adsum	;volatile
  2432  00EE  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  2433  00EF  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  2434  00F0  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  2435  00F1  01A7               	clrf	ADC_Sample@admin	;volatile
  2436  00F2  01A8               	clrf	ADC_Sample@admin+1	;volatile
  2437  00F3  01A9               	clrf	ADC_Sample@admax	;volatile
  2438  00F4  01AA               	clrf	ADC_Sample@admax+1	;volatile
  2439  00F5  0008               	return
  2440  00F6                     __end_ofPL6:	
  2441  00F6                     PL14:	
  2442  00F6  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2443  00F7  00AA               	movwf	ADC_Sample@admax+1	;volatile
  2444  00F8  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2445  00F9  00A9               	movwf	ADC_Sample@admax	;volatile
  2446  00FA  0008               	return
  2447  00FB                     __end_ofPL14:	
  2448                           
  2449                           	psect	text14
  2450  0247                     __ptext14:	
  2451 ;; *************** function _Sleep_Mode *****************
  2452 ;; Defined at:
  2453 ;;		line 516 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;		None
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;		None
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, pclath, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 100/0
  2464 ;;		On exit  : 100/100
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1
  2467 ;;      Params:         0       0       0
  2468 ;;      Locals:         0       0       0
  2469 ;;      Temps:          0       0       0
  2470 ;;      Totals:         0       0       0
  2471 ;;Total ram usage:        0 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    2
  2474 ;; This function calls:
  2475 ;;		_AD_Init
  2476 ;;		_Init_System
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           
  2483                           ;psect for function _Sleep_Mode
  2484  0247                     _Sleep_Mode:	
  2485                           
  2486                           ;main.c: 518: INTCON = 0;
  2487                           
  2488                           ;incstack = 0
  2489                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  2490  0247  018B               	clrf	11	;volatile
  2491                           
  2492                           ;main.c: 520: OPTION_REG = 0;
  2493  0248  0181               	clrf	1	;volatile
  2494                           
  2495                           ;main.c: 522: TRISA = 0x00;
  2496                           
  2497                           ;main.c: 523: TRISB = 0x34;
  2498                           
  2499                           ;main.c: 525: PORTA = 0X0E;
  2500                           
  2501                           ;main.c: 526: PORTB = 0X00;
  2502  0249  227B               	fcall	PL4	;call to abstracted procedure
  2503                           
  2504                           ;main.c: 528: ADCON0 = 0;
  2505  024A  1683               	bsf	3,5	;RP0=1, select bank1
  2506  024B  0195               	clrf	21	;volatile
  2507                           
  2508                           ;main.c: 529: ADCON1 = 0;
  2509  024C  0196               	clrf	22	;volatile
  2510                           
  2511                           ;main.c: 531: PWMCON0 = 0;
  2512  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2513  024E  0195               	clrf	21	;volatile
  2514                           
  2515                           ;main.c: 533: OSCCON = 0X70;
  2516  024F  3070               	movlw	112
  2517  0250  0094               	movwf	20	;volatile
  2518                           
  2519                           ;main.c: 535: IOCA = 0B00000000;
  2520  0251  1683               	bsf	3,5	;RP0=1, select bank1
  2521  0252  0189               	clrf	9	;volatile
  2522                           
  2523                           ;main.c: 536: IOCB = 0x24;
  2524  0253  3024               	movlw	36
  2525  0254  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0255  0089               	movwf	9	;volatile
  2527                           
  2528                           ;main.c: 538: RAIE = 1;
  2529  0256  158E               	bsf	14,3	;volatile
  2530                           
  2531                           ;main.c: 539: PEIE = 1;
  2532  0257  170B               	bsf	11,6	;volatile
  2533                           
  2534                           ;main.c: 540: RBIE = 1;
  2535  0258  158B               	bsf	11,3	;volatile
  2536                           
  2537                           ;main.c: 541: GIE = 0;
  2538  0259  138B               	bcf	11,7	;volatile
  2539                           
  2540                           ;main.c: 543: PIE1 &= 0X08;
  2541  025A  3008               	movlw	8
  2542  025B  058E               	andwf	14,f	;volatile
  2543                           
  2544                           ;main.c: 544: PIR1 = 0;
  2545  025C  018D               	clrf	13	;volatile
  2546                           
  2547                           ;main.c: 545: INTCON &= 0XC8;
  2548  025D  30C8               	movlw	200
  2549  025E  058B               	andwf	11,f	;volatile
  2550                           
  2551                           ;main.c: 547: PORTA;
  2552  025F  1683               	bsf	3,5	;RP0=1, select bank1
  2553  0260  0806               	movf	6,w	;volatile
  2554                           
  2555                           ;main.c: 548: RAIF = 0;
  2556  0261  1283               	bcf	3,5	;RP0=0, select bank0
  2557  0262  118D               	bcf	13,3	;volatile
  2558                           
  2559                           ;main.c: 549: PORTB;
  2560  0263  0806               	movf	6,w	;volatile
  2561                           
  2562                           ;main.c: 550: RBIF = 0;
  2563  0264  100B               	bcf	11,0	;volatile
  2564  0265  0064               	clrwdt	;# 
  2565  0266  0063               	sleep	;# 
  2566  0267  0000               	nop	;# 
  2567  0268  0064               	clrwdt	;# 
  2568  0269  0000               	nop	;# 
  2569  026A  0000               	nop	;# 
  2570  026B  0000               	nop	;# 
  2571  026C  0000               	nop	;# 
  2572  026D  0000               	nop	;# 
  2573                           
  2574                           ;main.c: 562: if(RAIF) RAIF = 0;
  2575  026E  1283               	bcf	3,5	;RP0=0, select bank0
  2576  026F  198D               	btfsc	13,3	;volatile
  2577  0270  118D               	bcf	13,3	;volatile
  2578                           
  2579                           ;main.c: 563: if(RBIF) RBIF = 0;
  2580  0271  180B               	btfsc	11,0	;volatile
  2581  0272  100B               	bcf	11,0	;volatile
  2582                           
  2583                           ;main.c: 564: if(TMR2IF) TMR2IF = 0;
  2584  0273  188D               	btfsc	13,1	;volatile
  2585  0274  108D               	bcf	13,1	;volatile
  2586                           
  2587                           ;main.c: 565: IOCA = 0B00000000;
  2588  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0276  0189               	clrf	9	;volatile
  2590                           
  2591                           ;main.c: 566: IOCB = 0B00000000;
  2592  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2593  0278  0189               	clrf	9	;volatile
  2594                           
  2595                           ;main.c: 567: Init_System();
  2596  0279  23D8               	fcall	_Init_System
  2597                           
  2598                           ;main.c: 568: AD_Init();
  2599  027A  2C20               	ljmp	l1693
  2600  027B                     __end_of_Sleep_Mode:	
  2601  027B                     PL4:	
  2602  027B  1683               	bsf	3,5	;RP0=1, select bank1
  2603  027C  0185               	clrf	5	;volatile
  2604  027D  3034               	movlw	52
  2605  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2606  027F  0085               	movwf	5	;volatile
  2607  0280  300E               	movlw	14
  2608  0281  1683               	bsf	3,5	;RP0=1, select bank1
  2609  0282  0086               	movwf	6	;volatile
  2610  0283  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0284  0186               	clrf	6	;volatile
  2612  0285  0008               	return
  2613  0286                     __end_ofPL4:	
  2614                           
  2615                           	psect	text15
  2616  03D8                     __ptext15:	
  2617 ;; *************** function _Init_System *****************
  2618 ;; Defined at:
  2619 ;;		line 417 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;		None
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;		None
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2
  2628 ;; Tracked objects:
  2629 ;;		On entry : 100/0
  2630 ;;		On exit  : 100/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1
  2633 ;;      Params:         0       0       0
  2634 ;;      Locals:         0       0       0
  2635 ;;      Temps:          0       0       0
  2636 ;;      Totals:         0       0       0
  2637 ;;Total ram usage:        0 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_main
  2644 ;;		_Sleep_Mode
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function _Init_System
  2650  03D8                     _Init_System:	
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _Init_System: [wreg+status,2]
  2654  03D8  0000               	nop	;# 
  2655  03D9  0064               	clrwdt	;# 
  2656                           
  2657                           ;main.c: 421: OPTION_REG = 0;
  2658  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2659  03DB  0181               	clrf	1	;volatile
  2660  03DC  0064               	clrwdt	;# 
  2661                           
  2662                           ;main.c: 423: OSCCON = 0X72;
  2663  03DD  3072               	movlw	114
  2664  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2665  03DF  0094               	movwf	20	;volatile
  2666                           
  2667                           ;main.c: 425: WPUA = 0B00000000;
  2668  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2669  03E1  0188               	clrf	8	;volatile
  2670                           
  2671                           ;main.c: 426: WPDA = 0x00;
  2672  03E2  0187               	clrf	7	;volatile
  2673                           
  2674                           ;main.c: 427: WPUB = 0x14;
  2675  03E3  3014               	movlw	20
  2676  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2677  03E5  0088               	movwf	8	;volatile
  2678                           
  2679                           ;main.c: 429: TRISA = 0x00;
  2680                           
  2681                           ;main.c: 430: TRISB = 0x34;
  2682                           
  2683                           ;main.c: 432: PORTA = 0X0E;
  2684                           
  2685                           ;main.c: 433: PORTB = 0X00;
  2686  03E6  227B               	fcall	PL4	;call to abstracted procedure
  2687                           
  2688                           ;main.c: 437: PR2 = 249;
  2689  03E7  30F9               	movlw	249
  2690  03E8  0091               	movwf	17	;volatile
  2691                           
  2692                           ;main.c: 438: TMR2IF = 0;
  2693  03E9  108D               	bcf	13,1	;volatile
  2694                           
  2695                           ;main.c: 439: TMR2IE = 1;
  2696  03EA  148E               	bsf	14,1	;volatile
  2697                           
  2698                           ;main.c: 441: T2CON = 0B00000100;
  2699  03EB  3004               	movlw	4
  2700  03EC  0093               	movwf	19	;volatile
  2701                           
  2702                           ;main.c: 442: INTCON = 0XC0;
  2703  03ED  30C0               	movlw	192
  2704  03EE  008B               	movwf	11	;volatile
  2705  03EF  0008               	return
  2706  03F0                     __end_of_Init_System:	
  2707                           
  2708                           	psect	text16
  2709  0420                     __ptext16:	
  2710 ;; *************** function _AD_Init *****************
  2711 ;; Defined at:
  2712 ;;		line 454 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 100/0
  2723 ;;		On exit  : 100/100
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1
  2726 ;;      Params:         0       0       0
  2727 ;;      Locals:         0       0       0
  2728 ;;      Temps:          0       0       0
  2729 ;;      Totals:         0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    1
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;;		_Sleep_Mode
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _AD_Init
  2743  0420                     _AD_Init:	
  2744  0420                     l1693:	
  2745                           ;incstack = 0
  2746                           ; Regs used in _AD_Init: [wreg+status,2]
  2747                           
  2748                           
  2749                           ;main.c: 487: ADCON0 = 0X41;
  2750  0420  3041               	movlw	65
  2751  0421  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0422  0095               	movwf	21	;volatile
  2753                           
  2754                           ;main.c: 504: ADCON1 = 0;
  2755  0423  0196               	clrf	22	;volatile
  2756                           
  2757                           ;main.c: 505: ANSEL0 = 0X00;
  2758  0424  0193               	clrf	19	;volatile
  2759  0425  0008               	return
  2760  0426                     __end_of_AD_Init:	
  2761                           
  2762                           	psect	text17
  2763  03F0                     __ptext17:	
  2764 ;; *************** function _Isr_Timer *****************
  2765 ;; Defined at:
  2766 ;;		line 78 in file "C:\mcuproject\scm\zdt\D118_062B_SOP14\main.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 100/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1
  2780 ;;      Params:         0       0       0
  2781 ;;      Locals:         0       0       0
  2782 ;;      Temps:          2       0       0
  2783 ;;      Totals:         2       0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		Interrupt level 1
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           
  2794                           ;psect for function _Isr_Timer
  2795  03F0                     _Isr_Timer:	
  2796                           
  2797                           ;main.c: 80: if(TMR2IF)
  2798  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2799  03F1  1C8D               	btfss	13,1	;volatile
  2800  03F2  2C01               	goto	i1l600
  2801                           
  2802                           ;main.c: 81: {
  2803                           ;main.c: 82: TMR2IF = 0;
  2804  03F3  108D               	bcf	13,1	;volatile
  2805                           
  2806                           ;main.c: 83: if(++intCount >= 160)
  2807  03F4  30A0               	movlw	160
  2808  03F5  0ADB               	incf	_intCount,f
  2809  03F6  025B               	subwf	_intCount,w
  2810  03F7  1C03               	skipc
  2811  03F8  2C01               	goto	i1l600
  2812  03F9  3064               	movlw	100
  2813                           
  2814                           ;main.c: 84: {
  2815                           ;main.c: 85: intCount = 0;
  2816  03FA  01DB               	clrf	_intCount
  2817                           
  2818                           ;main.c: 86: IntFlag = 1;
  2819  03FB  01D9               	clrf	_IntFlag
  2820  03FC  0AD9               	incf	_IntFlag,f
  2821                           
  2822                           ;main.c: 87: if(++count1s >= 100)
  2823  03FD  0ADA               	incf	_count1s,f
  2824  03FE  025A               	subwf	_count1s,w
  2825  03FF  1803               	btfsc	3,0
  2826                           
  2827                           ;main.c: 88: {
  2828                           ;main.c: 89: count1s = 0;
  2829  0400  01DA               	clrf	_count1s
  2830  0401                     i1l600:	
  2831  0401  0871               	movf	??_Isr_Timer+1,w
  2832  0402  008A               	movwf	10
  2833  0403  0E70               	swapf	??_Isr_Timer^(0+-128),w
  2834  0404  0083               	movwf	3
  2835  0405  0EFE               	swapf	126,f
  2836  0406  0E7E               	swapf	126,w
  2837  0407  0009               	retfie
  2838  0408                     __end_of_Isr_Timer:	
  2839  007E                     btemp	set	126	;btemp
  2840  007E                     wtemp0	set	126
  2841                           
  2842                           	psect	intentry
  2843  0004                     __pintentry:	
  2844                           ;incstack = 0
  2845                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  2846                           
  2847  0004                     interrupt_function:	
  2848  007E                     saved_w	set	btemp
  2849  0004  00FE               	movwf	btemp
  2850  0005  0E03               	swapf	3,w
  2851  0006  00F0               	movwf	??_Isr_Timer
  2852  0007  080A               	movf	10,w
  2853  0008  00F1               	movwf	??_Isr_Timer+1
  2854  0009  2BF0               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         28
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     38      64
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_checkBatAD
    _main->_ledCtr
    _ledCtr->___lbmod
    _keyCtr->_keyRead
    _checkBatAD->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _checkBatAD->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5748
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                             _pwmCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwmCtr                                               3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     212
                                              7 COMMON     1     1      0
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     212
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              3 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0    5469
                                              7 COMMON     1     1      0
                                             34 BANK0      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     582
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _chrgCtr
   _keyCtr
     _keyRead
   _ledCtr
     ___lbmod
   _pwmCtr
   _workCtr

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     26      40       4       80.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      4B       7        0.0%
DATA                 0      0      4B       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 06 16:03:24 2025

                     PL2 00DE                       PL4 027B                       PL6 00ED  
                     PL8 01B8                       fsr 0004                      PL10 015D  
                    PL12 0242                      PL14 00F6                      l605 02FD  
                    l720 0044                      l609 030E                      l730 00C3  
                    l726 007F                      l903 0230                      l683 03A6  
                    l678 0359                      l945 0117                      l891 020E  
                    _GIE 005F                      _RB3 0033                      _PR2 0011  
    __size_of_ADC_Sample 00C9                      indf 0000          __end_of_AD_Init 0426  
           ___ftdiv@cntr 002F             ___ftdiv@sign 0034                     l2003 0353  
                   l2021 037F                     l2013 0367                     l2017 0373  
                   l2203 0109                     l2043 01DD                     l2035 01D3  
                   l2027 01C3                     l2029 01C6                     l2039 01D7  
                   l2225 012A                     l2065 01FC                     l2057 01F0  
                   l2251 02F0                     l2181 0214                     l2069 0202  
                   l2191 0225                     l2183 0219                     l2263 0302  
                   l2185 0220                     l2179 0212                     l2189 022E  
                   l1725 0399                     l2293 0328                     l1751 0026  
                   l1903 03D4                     l1693 0420                     l1765 002F  
                   l1749 0024                     l1853 0169                     l1917 03A7  
                   l1783 0069                     l1775 004F                     l1759 002E  
                   l1871 018B                     l1855 016E                     l1935 029D  
                   l1881 0197                     l1961 02C1                     l1937 028E  
                   l1945 02A7                     l1787 0073                     l1883 01A1  
                   l1875 0193                     l1789 007B                     l1799 00C7  
                   l1887 01AF                     l1895 03C0                     l1985 033B  
                   l1993 0344                     l1987 033E                     l1989 0340  
                   l1999 034D                     _CHS4 04B6                     u1205 00D0  
                   u1135 006F                     u1145 0079                     _IOCA 0089  
                   _IOCB 0009                     u1185 00B9                     u1265 0170  
                   u2077 02F5                     u2087 0021                     u1375 03B7  
                   _PIE1 000E                     u1955 0138                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 02F8  
           ___ftpack@arg 0072             ___ftpack@exp 0075                     btemp 007E  
                   start 000A             ___fttol@exp1 0041            ??_Init_System 0072  
           ___fttol@lval 003D                    ?_main 0070          __end_of___lbmod 03D8  
        __end_of___ftdiv 015D          __end_of___fttol 01B8                    _T2CON 0013  
                  i1l600 0401                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005          __end_of_chrgCtr 02C3  
        __end_of_keyRead 039F            ___ftpack@sign 0076                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_workCtr 0381  
        __initialization 000B             __end_of_main 032A                   ??_main 0078  
          ___fttol@sign1 003C                ??_AD_Init 0072      __end_of_Init_System 03F0  
                 _ADCON0 0095                   _ADCON1 0096                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093         __end_of___ftpack 0242  
                 _GODONE 04A9                   _LDO_EN 04B2                   _INTCON 000B  
       __end_of___lwtoft 0418                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069             ??_ADC_Sample 0073             keyCtr@kclick 0073  
     __size_of_Isr_Timer 0018               _Sleep_Mode 0247                ??___lbmod 0073  
              ??___ftdiv 002C                ??___fttol 0039                   _ledCtr 01BF  
                 _keyCtr 032A                ??_chrgCtr 0072                   _pwmCtr 039F  
                 _result 004A                ??_keyRead 0072       __end_of_ADC_Sample 00DE  
                 saved_w 007E                ??_workCtr 0072          ___lbmod@divisor 0072  
__end_of__initialization 0013          ___lbmod@counter 0075               ___ftdiv@f1 0029  
             ___ftdiv@f2 0026               ___ftdiv@f3 0030               ___fttol@f1 0035  
         __pcstackCOMMON 0070              _Init_System 03D8               __end_ofPL2 00ED  
             __end_ofPL4 0286               __end_ofPL6 00F6               __end_ofPL8 01BF  
             ___lwtoft@c 0023        __end_of_Isr_Timer 0408               _checkBatAD 02C3  
             __pbssBANK0 0046             _chrgFullFlag 0057              ?_Sleep_Mode 0070  
             __pmaintext 02F8               __pintentry 0004                  ?_ledCtr 0070  
                ?_keyCtr 0070                ?___ftpack 0072                  ?_pwmCtr 0070  
                _AD_Init 0420                ?___lwtoft 0023                  _PWMCON0 0015  
             _count500ms 004D                  _IntFlag 0059          ADC_Sample@adldo 0072  
        ADC_Sample@admax 0029          ADC_Sample@admin 0027          ADC_Sample@adsum 0023  
                ___lbmod 03BC                  ___ftdiv 00FB                  ___fttol 0161  
        __size_of_ledCtr 0047          __size_of_keyCtr 0032               ??___ftpack 0020  
                _chrgCtr 0286               _lowBatFlag 0054                  __ptext1 035C  
                __ptext2 039F                  __ptext3 01BF                  __ptext4 03BC  
                __ptext5 032A                  __ptext6 0381                  __ptext7 0286  
                __ptext8 02C3                  __ptext9 0408          __size_of_pwmCtr 001D  
             _lowBatTime 004C                  _ledStep 0079               ??___lwtoft 0077  
                _count1s 005A                  _keyRead 0381                  _preStep 004E  
    __size_of_Sleep_Mode 0034              ?_checkBatAD 0070                  clrloop0 0419  
                _workCtr 035C     end_of_initialization 0013            _longPressFlag 0056  
             _motorCount 0050         ___lbmod@dividend 0074              ___lbmod@rem 0076  
            ___ftdiv@exp 0033      __size_of_checkBatAD 0035             ?_Init_System 0070  
         __end_of_ledCtr 0206           __end_of_keyCtr 035C           __end_of_pwmCtr 03BC  
            __end_ofPL10 0161              __end_ofPL12 0247              __end_ofPL14 00FB  
    start_initialization 000B                _Isr_Timer 03F0             ??_Sleep_Mode 0072  
               ??_ledCtr 0077        ADC_Sample@ad_temp 002B                 ??_keyCtr 0073  
               ??_pwmCtr 0072                 ?_AD_Init 0070        __size_of___ftpack 003C  
            __pbssCOMMON 0078                ___latbits 0000        __size_of___lwtoft 0010  
          __pcstackBANK0 0020       __end_of_Sleep_Mode 027B               ?_Isr_Timer 0070  
              __pnvBANK0 005F                 ?___lbmod 0072                 ?___ftdiv 0026  
               ?___fttol 0035                 ?_chrgCtr 0070                 ?_keyRead 0070  
              _firstTime 005F           ADC_Sample@adch 0021                _fullCount 0046  
           ??_checkBatAD 0077                 ?_workCtr 0070              ADC_Sample@i 0022  
            ADC_Sample@j 0020        interrupt_function 0004                clear_ram0 0418  
              _sleepTime 0053                _motorDuty 0051       __end_of_checkBatAD 02F8  
   __size_of_Init_System 0018         __size_of_AD_Init 0006         keyRead@keyStatus 0072  
          _motorMaxCount 004F              ??_Isr_Timer 0070               _ADC_Sample 0015  
       __size_of___lbmod 001C         __size_of___ftdiv 0062         __size_of___fttol 0057  
               ___ftpack 0206         __size_of_chrgCtr 003D                 ___lwtoft 0408  
       __size_of_keyRead 001E                 _adresult 005D                 _chrgFlag 0058  
               __ptext10 0161                 __ptext11 00FB                 __ptext12 0206  
               __ptext13 0015                 __ptext14 0247                 __ptext15 03D8  
               __ptext16 0420                 __ptext17 03F0             _shanshuoTime 0052  
       __size_of_workCtr 0025                 _keyCount 0078                 _intCount 005B  
          __size_of_main 0032                 _test_adc 005C                 _power_ad 0048  
               _workStep 007A                 intlevel1 0000              ?_ADC_Sample 0072  
   checkBatAD@power_temp 0042              _showBatTime 0055               _OPTION_REG 0001  
