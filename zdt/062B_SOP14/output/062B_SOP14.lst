

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Dec 10 17:50:30 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	pa_nodes0,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	text0
    60  0000                     __ptext0:	
    61  001F                     _PWM01DT	set	31
    62  001E                     _PWMD01H	set	30
    63  001D                     _PWMCON2	set	29
    64  001C                     _PWMT4L	set	28
    65  001B                     _PWMD4L	set	27
    66  001A                     _PWMD1L	set	26
    67  0019                     _PWMD0L	set	25
    68  0018                     _PWMTH	set	24
    69  0017                     _PWMTL	set	23
    70  0016                     _PWMCON1	set	22
    71  0015                     _PWMCON0	set	21
    72  0014                     _OSCCON	set	20
    73  0013                     _T2CON	set	19
    74  0011                     _PR2	set	17
    75  000B                     _INTCON	set	11
    76  0008                     _WPUB	set	8
    77  0006                     _PORTB	set	6
    78  0005                     _TRISB	set	5
    79  0001                     _OPTION_REG	set	1
    80  0071                     _TMR2IE	set	113
    81  0069                     _TMR2IF	set	105
    82  002F                     _TRISB7	set	47
    83  009E                     _PWMD23H	set	158
    84  009C                     _PWMD3L	set	156
    85  009B                     _PWMD2L	set	155
    86  0099                     _ADRESH	set	153
    87  0098                     _ADRESL	set	152
    88  0096                     _ADCON1	set	150
    89  0095                     _ADCON0	set	149
    90  0094                     _ANSEL1	set	148
    91  0088                     _WPUA	set	136
    92  0086                     _PORTA	set	134
    93  0085                     _TRISA	set	133
    94  04B2                     _LDO_EN	set	1202
    95  04B6                     _CHS4	set	1206
    96  04A9                     _GODONE	set	1193
    97                           
    98                           	psect	cinit
    99  000B                     start_initialization:	
   100                           ; #config settings
   101                           
   102  000B                     __initialization:	
   103                           
   104                           ; Clear objects allocated to COMMON
   105  000B  01FA               	clrf	__pbssCOMMON& (0+127)
   106  000C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   107                           
   108                           ; Clear objects allocated to BANK0
   109  000D  1283               	bcf	3,5	;RP0=0, select bank0
   110  000E  01C4               	clrf	__pbssBANK0& (0+127)
   111  000F  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   112  0010  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   113  0011  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   114  0012  01C8               	clrf	(__pbssBANK0+4)& (0+127)
   115  0013  01C9               	clrf	(__pbssBANK0+5)& (0+127)
   116  0014  01CA               	clrf	(__pbssBANK0+6)& (0+127)
   117  0015  01CB               	clrf	(__pbssBANK0+7)& (0+127)
   118  0016                     end_of_initialization:	
   119                           ;End of C runtime variable initialization code
   120                           
   121  0016                     __end_of__initialization:	
   122  0016  0183               	clrf	3
   123  0017  29C3               	ljmp	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMMON
   126  007A                     __pbssCOMMON:	
   127  007A                     _count1s:	
   128  007A                     	ds	1
   129  007B                     _intCount:	
   130  007B                     	ds	1
   131                           
   132                           	psect	bssBANK0
   133  0044                     __pbssBANK0:	
   134  0044                     _power_ad:	
   135  0044                     	ds	2
   136  0046                     _result:	
   137  0046                     	ds	2
   138  0048                     _IntFlag:	
   139  0048                     	ds	1
   140  0049                     _test_adc:	
   141  0049                     	ds	1
   142  004A                     _adresult:	
   143  004A                     	ds	2
   144                           
   145                           	psect	cstackCOMMON
   146  0070                     __pcstackCOMMON:	
   147  0070                     ?_Init_System:	
   148  0070                     ?_AD_Init:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0070                     ?_pwmInit:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0070                     ?_main:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0070                     ?_Isr_Timer:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0070                     ??_Isr_Timer:	
   161                           ; 1 bytes @ 0x0
   162                           
   163                           
   164                           ; 1 bytes @ 0x0
   165  0070                     	ds	2
   166  0072                     ??_Init_System:	
   167  0072                     ??_AD_Init:	
   168                           ; 1 bytes @ 0x2
   169                           
   170  0072                     ??_pwmInit:	
   171                           ; 1 bytes @ 0x2
   172                           
   173  0072                     ?_ADC_Sample:	
   174                           ; 1 bytes @ 0x2
   175                           
   176  0072                     ?___ftpack:	
   177                           ; 1 bytes @ 0x2
   178                           
   179  0072                     ADC_Sample@adldo:	
   180                           ; 3 bytes @ 0x2
   181                           
   182  0072                     ___ftpack@arg:	
   183                           ; 1 bytes @ 0x2
   184                           
   185                           
   186                           ; 3 bytes @ 0x2
   187  0072                     	ds	1
   188  0073                     ??_ADC_Sample:	
   189                           
   190                           ; 1 bytes @ 0x3
   191  0073                     	ds	2
   192  0075                     ___ftpack@exp:	
   193                           
   194                           ; 1 bytes @ 0x5
   195  0075                     	ds	1
   196  0076                     ___ftpack@sign:	
   197                           
   198                           ; 1 bytes @ 0x6
   199  0076                     	ds	1
   200  0077                     ??___ftpack:	
   201                           
   202                           ; 1 bytes @ 0x7
   203  0077                     	ds	3
   204  007A                     ??___lwtoft:	
   205                           
   206                           	psect	cstackBANK0
   207  0020                     __pcstackBANK0:	
   208                           ; 1 bytes @ 0xA
   209                           
   210  0020                     ?___lwtoft:	
   211  0020                     ADC_Sample@j:	
   212                           ; 3 bytes @ 0x0
   213                           
   214  0020                     ___lwtoft@c:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 2 bytes @ 0x0
   219  0020                     	ds	1
   220  0021                     ADC_Sample@adch:	
   221                           
   222                           ; 1 bytes @ 0x1
   223  0021                     	ds	1
   224  0022                     ADC_Sample@i:	
   225                           
   226                           ; 1 bytes @ 0x2
   227  0022                     	ds	1
   228  0023                     ?___ftdiv:	
   229  0023                     ___ftdiv@f2:	
   230                           ; 3 bytes @ 0x3
   231                           
   232  0023                     ADC_Sample@adsum:	
   233                           ; 3 bytes @ 0x3
   234                           
   235                           
   236                           ; 4 bytes @ 0x3
   237  0023                     	ds	3
   238  0026                     ___ftdiv@f1:	
   239                           
   240                           ; 3 bytes @ 0x6
   241  0026                     	ds	1
   242  0027                     ADC_Sample@admin:	
   243                           
   244                           ; 2 bytes @ 0x7
   245  0027                     	ds	2
   246  0029                     ??___ftdiv:	
   247  0029                     ADC_Sample@admax:	
   248                           ; 1 bytes @ 0x9
   249                           
   250                           
   251                           ; 2 bytes @ 0x9
   252  0029                     	ds	2
   253  002B                     ADC_Sample@ad_temp:	
   254                           
   255                           ; 2 bytes @ 0xB
   256  002B                     	ds	1
   257  002C                     ___ftdiv@cntr:	
   258                           
   259                           ; 1 bytes @ 0xC
   260  002C                     	ds	1
   261  002D                     ___ftdiv@f3:	
   262                           
   263                           ; 3 bytes @ 0xD
   264  002D                     	ds	3
   265  0030                     ___ftdiv@exp:	
   266                           
   267                           ; 1 bytes @ 0x10
   268  0030                     	ds	1
   269  0031                     ___ftdiv@sign:	
   270                           
   271                           ; 1 bytes @ 0x11
   272  0031                     	ds	1
   273  0032                     ?___fttol:	
   274  0032                     ___fttol@f1:	
   275                           ; 4 bytes @ 0x12
   276                           
   277                           
   278                           ; 3 bytes @ 0x12
   279  0032                     	ds	4
   280  0036                     ??___fttol:	
   281                           
   282                           ; 1 bytes @ 0x16
   283  0036                     	ds	3
   284  0039                     ___fttol@sign1:	
   285                           
   286                           ; 1 bytes @ 0x19
   287  0039                     	ds	1
   288  003A                     ___fttol@lval:	
   289                           
   290                           ; 4 bytes @ 0x1A
   291  003A                     	ds	4
   292  003E                     ___fttol@exp1:	
   293                           
   294                           ; 1 bytes @ 0x1E
   295  003E                     	ds	1
   296  003F                     ??_main:	
   297                           
   298                           ; 1 bytes @ 0x1F
   299  003F                     	ds	1
   300  0040                     main@power_temp:	
   301                           
   302                           ; 4 bytes @ 0x20
   303  0040                     	ds	4
   304                           
   305                           	psect	maintext
   306  01C3                     __pmaintext:	
   307 ;;
   308 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   309 ;;
   310 ;; *************** function _main *****************
   311 ;; Defined at:
   312 ;;		line 126 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;  power_temp      4   32[BANK0 ] volatile unsigned long 
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0, pclath, cstack
   321 ;; Tracked objects:
   322 ;;		On entry : B00/0
   323 ;;		On exit  : 100/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMMON   BANK0   BANK1
   326 ;;      Params:         0       0       0
   327 ;;      Locals:         0       4       0
   328 ;;      Temps:          0       1       0
   329 ;;      Totals:         0       5       0
   330 ;;Total ram usage:        5 bytes
   331 ;; Hardware stack levels required when called:    3
   332 ;; This function calls:
   333 ;;		_ADC_Sample
   334 ;;		_AD_Init
   335 ;;		_Init_System
   336 ;;		___ftdiv
   337 ;;		___fttol
   338 ;;		___lwtoft
   339 ;;		_pwmInit
   340 ;; This function is called by:
   341 ;;		Startup code after reset
   342 ;; This function uses a non-reentrant model
   343 ;;
   344                           
   345                           
   346                           ;psect for function _main
   347  01C3                     _main:	
   348                           
   349                           ;main.c: 128: Init_System();
   350                           
   351                           ;incstack = 0
   352                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   353  01C3  228C               	fcall	_Init_System
   354                           
   355                           ;main.c: 129: AD_Init();
   356  01C4  22B9               	fcall	_AD_Init
   357  01C5                     l562:	
   358                           ;main.c: 130: while (1)
   359                           
   360  01C5  0064               	clrwdt	;# 
   361                           
   362                           ;main.c: 133: if(!IntFlag)
   363  01C6  1283               	bcf	3,5	;RP0=0, select bank0
   364  01C7  0848               	movf	_IntFlag,w
   365  01C8  1903               	btfsc	3,2
   366  01C9  29C5               	goto	l562
   367                           
   368                           ;main.c: 135: IntFlag = 0;
   369  01CA  01C8               	clrf	_IntFlag
   370                           
   371                           ;main.c: 136: pwmInit();
   372  01CB  224F               	fcall	_pwmInit
   373                           
   374                           ;main.c: 138: TRISB7 = 1;
   375  01CC  1785               	bsf	5,7	;volatile
   376                           
   377                           ;main.c: 139: ANSEL1 |= 0X80;
   378  01CD  1683               	bsf	3,5	;RP0=1, select bank1
   379  01CE  1794               	bsf	20,7	;volatile
   380                           
   381                           ;main.c: 140: test_adc = ADC_Sample(15, 7);
   382  01CF  3007               	movlw	7
   383  01D0  00F2               	movwf	ADC_Sample@adldo
   384  01D1  300F               	movlw	15
   385  01D2  2018               	fcall	_ADC_Sample
   386  01D3  00C9               	movwf	_test_adc	;volatile
   387                           
   388                           ;main.c: 141: if (0xA5 == test_adc)
   389  01D4  30A5               	movlw	165
   390  01D5  0649               	xorwf	_test_adc,w	;volatile
   391  01D6  1903               	btfsc	3,2
   392  01D7  29E1               	goto	l1551
   393                           
   394                           ;main.c: 145: else
   395                           ;main.c: 146: {
   396                           ;main.c: 147: ADCON0 = 0;
   397  01D8  1683               	bsf	3,5	;RP0=1, select bank1
   398  01D9  0195               	clrf	21	;volatile
   399                           
   400                           ;main.c: 148: ADCON1 = 0;
   401  01DA  0196               	clrf	22	;volatile
   402                           
   403                           ;main.c: 149: _delay((unsigned long)((100)*(16000000/4000000.0)));
   404  01DB  3084               	movlw	132
   405  01DC  1283               	bcf	3,5	;RP0=0, select bank0
   406  01DD  00BF               	movwf	??_main
   407  01DE                     u867:	
   408  01DE  0BBF               	decfsz	??_main,f
   409  01DF  29DE               	goto	u867
   410  01E0  29E1               	nop2
   411  01E1                     l1551:	
   412  01E1  301F               	movlw	31
   413                           
   414                           ;main.c: 150: }
   415                           ;main.c: 152: test_adc = ADC_Sample(31, 0);
   416  01E2  01F2               	clrf	ADC_Sample@adldo
   417  01E3  2018               	fcall	_ADC_Sample
   418  01E4  00C9               	movwf	_test_adc	;volatile
   419                           
   420                           ;main.c: 153: if (0xA5 == test_adc)
   421  01E5  30A5               	movlw	165
   422  01E6  0649               	xorwf	_test_adc,w	;volatile
   423  01E7  1D03               	btfss	3,2
   424  01E8  29C5               	goto	l562
   425                           
   426                           ;main.c: 154: {
   427                           ;main.c: 155: volatile unsigned long power_temp;
   428                           ;main.c: 157: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
   429  01E9  3096               	movlw	150
   430  01EA  01A6               	clrf	___ftdiv@f1
   431  01EB  00A7               	movwf	___ftdiv@f1+1
   432  01EC  304A               	movlw	74
   433  01ED  00A8               	movwf	___ftdiv@f1+2
   434  01EE  084B               	movf	_adresult+1,w	;volatile
   435  01EF  00A1               	movwf	___lwtoft@c+1
   436  01F0  084A               	movf	_adresult,w	;volatile
   437  01F1  00A0               	movwf	___lwtoft@c
   438  01F2  22A9               	fcall	___lwtoft
   439  01F3  0820               	movf	?___lwtoft,w
   440  01F4  00A3               	movwf	___ftdiv@f2
   441  01F5  0821               	movf	?___lwtoft+1,w
   442  01F6  00A4               	movwf	___ftdiv@f2+1
   443  01F7  0822               	movf	?___lwtoft+2,w
   444  01F8  00A5               	movwf	___ftdiv@f2+2
   445  01F9  20FF               	fcall	___ftdiv
   446  01FA  0823               	movf	?___ftdiv,w
   447  01FB  00B2               	movwf	___fttol@f1
   448  01FC  0824               	movf	?___ftdiv+1,w
   449  01FD  00B3               	movwf	___fttol@f1+1
   450  01FE  0825               	movf	?___ftdiv+2,w
   451  01FF  00B4               	movwf	___fttol@f1+2
   452  0200  2165               	fcall	___fttol
   453  0201  0835               	movf	?___fttol+3,w
   454  0202  00C3               	movwf	main@power_temp+3	;volatile
   455  0203  0834               	movf	?___fttol+2,w
   456  0204  00C2               	movwf	main@power_temp+2	;volatile
   457  0205  0833               	movf	?___fttol+1,w
   458  0206  00C1               	movwf	main@power_temp+1	;volatile
   459  0207  0832               	movf	?___fttol,w
   460  0208  00C0               	movwf	main@power_temp	;volatile
   461                           
   462                           ;main.c: 158: power_ad = (unsigned int)(power_temp);
   463  0209  0841               	movf	main@power_temp+1,w	;volatile
   464  020A  00C5               	movwf	_power_ad+1	;volatile
   465  020B  0840               	movf	main@power_temp,w	;volatile
   466  020C  00C4               	movwf	_power_ad	;volatile
   467  020D  29C5               	goto	l562
   468  020E                     __end_of_main:	
   469                           
   470                           	psect	text1
   471  024F                     __ptext1:	
   472 ;; *************** function _pwmInit *****************
   473 ;; Defined at:
   474 ;;		line 290 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;		None
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, status,2
   483 ;; Tracked objects:
   484 ;;		On entry : 100/0
   485 ;;		On exit  : 100/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMMON   BANK0   BANK1
   488 ;;      Params:         0       0       0
   489 ;;      Locals:         0       0       0
   490 ;;      Temps:          0       0       0
   491 ;;      Totals:         0       0       0
   492 ;;Total ram usage:        0 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    1
   495 ;; This function calls:
   496 ;;		Nothing
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           
   503                           ;psect for function _pwmInit
   504  024F                     _pwmInit:	
   505                           
   506                           ;main.c: 312: PWMCON1 = 0B11010010;
   507                           
   508                           ;incstack = 0
   509                           ; Regs used in _pwmInit: [wreg+status,2]
   510  024F  30D2               	movlw	210
   511  0250  0096               	movwf	22	;volatile
   512                           
   513                           ;main.c: 314: TRISA = 0B00011111;
   514  0251  301F               	movlw	31
   515  0252  1683               	bsf	3,5	;RP0=1, select bank1
   516  0253  0085               	movwf	5	;volatile
   517                           
   518                           ;main.c: 315: PWMTL = 0XFF;
   519  0254  30FF               	movlw	255
   520  0255  1283               	bcf	3,5	;RP0=0, select bank0
   521  0256  0097               	movwf	23	;volatile
   522                           
   523                           ;main.c: 316: PWMT4L = 0XFF;
   524  0257  009C               	movwf	28	;volatile
   525                           
   526                           ;main.c: 317: PWMTH = 0X0C;
   527  0258  300C               	movlw	12
   528  0259  0098               	movwf	24	;volatile
   529                           
   530                           ;main.c: 320: PWMD0L = 0X1F;
   531  025A  301F               	movlw	31
   532  025B  0099               	movwf	25	;volatile
   533                           
   534                           ;main.c: 323: PWMD1L = 0X7F;
   535  025C  307F               	movlw	127
   536  025D  009A               	movwf	26	;volatile
   537                           
   538                           ;main.c: 324: PWMD01H = 0;
   539  025E  019E               	clrf	30	;volatile
   540                           
   541                           ;main.c: 326: PWM01DT = 0X03;
   542  025F  3003               	movlw	3
   543  0260  009F               	movwf	31	;volatile
   544                           
   545                           ;main.c: 329: PWMD2L = 0X3F;
   546  0261  303F               	movlw	63
   547  0262  1683               	bsf	3,5	;RP0=1, select bank1
   548  0263  009B               	movwf	27	;volatile
   549                           
   550                           ;main.c: 330: PWMD3L = 0X7F;
   551  0264  307F               	movlw	127
   552  0265  009C               	movwf	28	;volatile
   553                           
   554                           ;main.c: 331: PWMD23H = 0;
   555  0266  019E               	clrf	30	;volatile
   556                           
   557                           ;main.c: 333: PWMD4L = 0X1F;
   558  0267  301F               	movlw	31
   559  0268  1283               	bcf	3,5	;RP0=0, select bank0
   560  0269  009B               	movwf	27	;volatile
   561                           
   562                           ;main.c: 349: PWMCON0 = 0X1F;
   563  026A  0095               	movwf	21	;volatile
   564                           
   565                           ;main.c: 350: PWMCON2 =0X10;
   566  026B  3010               	movlw	16
   567  026C  009D               	movwf	29	;volatile
   568  026D  0008               	return
   569  026E                     __end_of_pwmInit:	
   570                           
   571                           	psect	text2
   572  02A9                     __ptext2:	
   573 ;; *************** function ___lwtoft *****************
   574 ;; Defined at:
   575 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  c               2    0[BANK0 ] unsigned int 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  3    0[BANK0 ] float 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 100/0
   586 ;;		On exit  : 100/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1
   589 ;;      Params:         0       3       0
   590 ;;      Locals:         0       0       0
   591 ;;      Temps:          0       0       0
   592 ;;      Totals:         0       3       0
   593 ;;Total ram usage:        3 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    2
   596 ;; This function calls:
   597 ;;		___ftpack
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           
   604                           ;psect for function ___lwtoft
   605  02A9                     ___lwtoft:	
   606                           
   607                           ;incstack = 0
   608                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
   609  02A9  0820               	movf	___lwtoft@c,w
   610  02AA  00F2               	movwf	___ftpack@arg
   611  02AB  0821               	movf	___lwtoft@c+1,w
   612  02AC  00F3               	movwf	___ftpack@arg+1
   613  02AD  308E               	movlw	142
   614  02AE  01F4               	clrf	___ftpack@arg+2
   615  02AF  00F5               	movwf	___ftpack@exp
   616  02B0  01F6               	clrf	___ftpack@sign
   617  02B1  220E               	fcall	___ftpack
   618  02B2  0872               	movf	?___ftpack,w
   619  02B3  00A0               	movwf	?___lwtoft
   620  02B4  0873               	movf	?___ftpack+1,w
   621  02B5  00A1               	movwf	?___lwtoft+1
   622  02B6  0874               	movf	?___ftpack+2,w
   623  02B7  00A2               	movwf	?___lwtoft+2
   624  02B8  0008               	return
   625  02B9                     __end_of___lwtoft:	
   626                           
   627                           	psect	text3
   628  0165                     __ptext3:	
   629 ;; *************** function ___fttol *****************
   630 ;; Defined at:
   631 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  f1              3   18[BANK0 ] float 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  lval            4   26[BANK0 ] unsigned long 
   636 ;;  exp1            1   30[BANK0 ] unsigned char 
   637 ;;  sign1           1   25[BANK0 ] unsigned char 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  4   18[BANK0 ] long 
   640 ;; Registers used:
   641 ;;		wreg, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 100/0
   644 ;;		On exit  : 100/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1
   647 ;;      Params:         0       4       0
   648 ;;      Locals:         0       6       0
   649 ;;      Temps:          0       3       0
   650 ;;      Totals:         0      13       0
   651 ;;Total ram usage:       13 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; Hardware stack levels required when called:    1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function ___fttol
   663  0165                     ___fttol:	
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   667  0165  21BC               	fcall	PL6	;call to abstracted procedure
   668  0166  1003               	clrc
   669  0167  0D37               	rlf	??___fttol+1,w
   670  0168  0D38               	rlf	??___fttol+2,w
   671  0169  00BE               	movwf	___fttol@exp1
   672  016A  083E               	movf	___fttol@exp1,w
   673  016B  1D03               	btfss	3,2
   674  016C  2972               	goto	l1437
   675  016D                     l1435:	
   676  016D  01B2               	clrf	?___fttol
   677  016E  01B3               	clrf	?___fttol+1
   678  016F  01B4               	clrf	?___fttol+2
   679  0170  01B5               	clrf	?___fttol+3
   680  0171  0008               	return
   681  0172                     l1437:	
   682  0172  21BC               	fcall	PL6	;call to abstracted procedure
   683  0173  3017               	movlw	23
   684  0174                     u705:	
   685  0174  1003               	clrc
   686  0175  0CB8               	rrf	??___fttol+2,f
   687  0176  0CB7               	rrf	??___fttol+1,f
   688  0177  0CB6               	rrf	??___fttol,f
   689  0178  3EFF               	addlw	-1
   690  0179  1D03               	skipz
   691  017A  2974               	goto	u705
   692  017B  0836               	movf	??___fttol,w
   693  017C  00B9               	movwf	___fttol@sign1
   694  017D  17B3               	bsf	___fttol@f1+1,7
   695  017E  01B4               	clrf	___fttol@f1+2
   696  017F  0832               	movf	___fttol@f1,w
   697  0180  00BA               	movwf	___fttol@lval
   698  0181  0833               	movf	___fttol@f1+1,w
   699  0182  00BB               	movwf	___fttol@lval+1
   700  0183  0834               	movf	___fttol@f1+2,w
   701  0184  00BC               	movwf	___fttol@lval+2
   702  0185  308E               	movlw	142
   703  0186  01BD               	clrf	___fttol@lval+3
   704  0187  02BE               	subwf	___fttol@exp1,f
   705  0188  1FBE               	btfss	___fttol@exp1,7
   706  0189  2997               	goto	l1457
   707  018A  083E               	movf	___fttol@exp1,w
   708  018B  3A80               	xorlw	128
   709  018C  3E8F               	addlw	143
   710  018D  1C03               	btfss	3,0
   711  018E  296D               	goto	l1435
   712  018F                     l1453:	
   713  018F  1003               	clrc
   714  0190  0CBD               	rrf	___fttol@lval+3,f
   715  0191  0CBC               	rrf	___fttol@lval+2,f
   716  0192  0CBB               	rrf	___fttol@lval+1,f
   717  0193  0CBA               	rrf	___fttol@lval,f
   718  0194  0FBE               	incfsz	___fttol@exp1,f
   719  0195  298F               	goto	l1453
   720  0196  29A5               	goto	l1465
   721  0197                     l1457:	
   722  0197  3018               	movlw	24
   723  0198  023E               	subwf	___fttol@exp1,w
   724  0199  1803               	btfsc	3,0
   725  019A  296D               	goto	l1435
   726  019B                     l1463:	
   727  019B  083E               	movf	___fttol@exp1,w
   728  019C  1903               	btfsc	3,2
   729  019D  29A5               	goto	l1465
   730  019E  1003               	clrc
   731  019F  0DBA               	rlf	___fttol@lval,f
   732  01A0  0DBB               	rlf	___fttol@lval+1,f
   733  01A1  0DBC               	rlf	___fttol@lval+2,f
   734  01A2  0DBD               	rlf	___fttol@lval+3,f
   735  01A3  03BE               	decf	___fttol@exp1,f
   736  01A4  299B               	goto	l1463
   737  01A5                     l1465:	
   738  01A5  0839               	movf	___fttol@sign1,w
   739  01A6  1903               	btfsc	3,2
   740  01A7  29B3               	goto	l1469
   741  01A8  09BA               	comf	___fttol@lval,f
   742  01A9  09BB               	comf	___fttol@lval+1,f
   743  01AA  09BC               	comf	___fttol@lval+2,f
   744  01AB  09BD               	comf	___fttol@lval+3,f
   745  01AC  0ABA               	incf	___fttol@lval,f
   746  01AD  1903               	skipnz
   747  01AE  0ABB               	incf	___fttol@lval+1,f
   748  01AF  1903               	skipnz
   749  01B0  0ABC               	incf	___fttol@lval+2,f
   750  01B1  1903               	skipnz
   751  01B2  0ABD               	incf	___fttol@lval+3,f
   752  01B3                     l1469:	
   753  01B3  083D               	movf	___fttol@lval+3,w
   754  01B4  00B5               	movwf	?___fttol+3
   755  01B5  083C               	movf	___fttol@lval+2,w
   756  01B6  00B4               	movwf	?___fttol+2
   757  01B7  083B               	movf	___fttol@lval+1,w
   758  01B8  00B3               	movwf	?___fttol+1
   759  01B9  083A               	movf	___fttol@lval,w
   760  01BA  00B2               	movwf	?___fttol
   761  01BB  0008               	return
   762  01BC                     __end_of___fttol:	
   763  01BC                     PL6:	
   764  01BC  0832               	movf	___fttol@f1,w
   765  01BD  00B6               	movwf	??___fttol
   766  01BE  0833               	movf	___fttol@f1+1,w
   767  01BF  00B7               	movwf	??___fttol+1
   768  01C0  0834               	movf	___fttol@f1+2,w
   769  01C1  00B8               	movwf	??___fttol+2
   770  01C2  0008               	return
   771  01C3                     __end_ofPL6:	
   772                           
   773                           	psect	text4
   774  00FF                     __ptext4:	
   775 ;; *************** function ___ftdiv *****************
   776 ;; Defined at:
   777 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  f2              3    3[BANK0 ] float 
   780 ;;  f1              3    6[BANK0 ] float 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  f3              3   13[BANK0 ] float 
   783 ;;  sign            1   17[BANK0 ] unsigned char 
   784 ;;  exp             1   16[BANK0 ] unsigned char 
   785 ;;  cntr            1   12[BANK0 ] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  3    3[BANK0 ] float 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0, pclath, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 100/0
   792 ;;		On exit  : 100/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1
   795 ;;      Params:         0       6       0
   796 ;;      Locals:         0       6       0
   797 ;;      Temps:          0       3       0
   798 ;;      Totals:         0      15       0
   799 ;;Total ram usage:       15 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    2
   802 ;; This function calls:
   803 ;;		___ftpack
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           
   810                           ;psect for function ___ftdiv
   811  00FF                     ___ftdiv:	
   812                           
   813                           ;incstack = 0
   814                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
   815  00FF  0826               	movf	___ftdiv@f1,w
   816  0100  00A9               	movwf	??___ftdiv
   817  0101  0827               	movf	___ftdiv@f1+1,w
   818  0102  00AA               	movwf	??___ftdiv+1
   819  0103  0828               	movf	___ftdiv@f1+2,w
   820  0104  00AB               	movwf	??___ftdiv+2
   821  0105  1003               	clrc
   822  0106  0D2A               	rlf	??___ftdiv+1,w
   823  0107  0D2B               	rlf	??___ftdiv+2,w
   824  0108  00B0               	movwf	___ftdiv@exp
   825  0109  0830               	movf	___ftdiv@exp,w
   826  010A  1D03               	btfss	3,2
   827  010B  290D               	goto	l1397
   828  010C  2961               	ljmp	PL10	;call to abstracted procedure
   829  010D                     l1397:	
   830  010D  0823               	movf	___ftdiv@f2,w
   831  010E  00A9               	movwf	??___ftdiv
   832  010F  0824               	movf	___ftdiv@f2+1,w
   833  0110  00AA               	movwf	??___ftdiv+1
   834  0111  0825               	movf	___ftdiv@f2+2,w
   835  0112  00AB               	movwf	??___ftdiv+2
   836  0113  1003               	clrc
   837  0114  0D2A               	rlf	??___ftdiv+1,w
   838  0115  0D2B               	rlf	??___ftdiv+2,w
   839  0116  00B1               	movwf	___ftdiv@sign
   840  0117  0831               	movf	___ftdiv@sign,w
   841  0118  1D03               	btfss	3,2
   842  0119  291B               	goto	l805
   843  011A  2961               	ljmp	PL10	;call to abstracted procedure
   844  011B                     l805:	
   845  011B  3089               	movlw	137
   846  011C  01AD               	clrf	___ftdiv@f3
   847  011D  01AE               	clrf	___ftdiv@f3+1
   848  011E  01AF               	clrf	___ftdiv@f3+2
   849  011F  0731               	addwf	___ftdiv@sign,w
   850  0120  00A9               	movwf	??___ftdiv
   851  0121  02B0               	subwf	___ftdiv@exp,f
   852  0122  0828               	movf	___ftdiv@f1+2,w
   853  0123  00B1               	movwf	___ftdiv@sign
   854  0124  0825               	movf	___ftdiv@f2+2,w
   855  0125  06B1               	xorwf	___ftdiv@sign,f
   856  0126  3080               	movlw	128
   857  0127  05B1               	andwf	___ftdiv@sign,f
   858  0128  3018               	movlw	24
   859  0129  17A7               	bsf	___ftdiv@f1+1,7
   860  012A  01A8               	clrf	___ftdiv@f1+2
   861  012B  17A4               	bsf	___ftdiv@f2+1,7
   862  012C  01A5               	clrf	___ftdiv@f2+2
   863  012D  00AC               	movwf	___ftdiv@cntr
   864  012E                     l1419:	
   865  012E  1003               	clrc
   866  012F  0DAD               	rlf	___ftdiv@f3,f
   867  0130  0DAE               	rlf	___ftdiv@f3+1,f
   868  0131  0DAF               	rlf	___ftdiv@f3+2,f
   869  0132  0825               	movf	___ftdiv@f2+2,w
   870  0133  0228               	subwf	___ftdiv@f1+2,w
   871  0134  1D03               	skipz
   872  0135  293C               	goto	u675
   873  0136  0824               	movf	___ftdiv@f2+1,w
   874  0137  0227               	subwf	___ftdiv@f1+1,w
   875  0138  1D03               	skipz
   876  0139  293C               	goto	u675
   877  013A  0823               	movf	___ftdiv@f2,w
   878  013B  0226               	subwf	___ftdiv@f1,w
   879  013C                     u675:	
   880  013C  1C03               	skipc
   881  013D  294A               	goto	L1
   882  013E  0823               	movf	___ftdiv@f2,w
   883  013F  02A6               	subwf	___ftdiv@f1,f
   884  0140  0824               	movf	___ftdiv@f2+1,w
   885  0141  1C03               	skipc
   886  0142  0F24               	incfsz	___ftdiv@f2+1,w
   887  0143  02A7               	subwf	___ftdiv@f1+1,f
   888  0144  0825               	movf	___ftdiv@f2+2,w
   889  0145  1C03               	skipc
   890  0146  0A25               	incf	___ftdiv@f2+2,w
   891  0147  02A8               	subwf	___ftdiv@f1+2,f
   892  0148  142D               	bsf	___ftdiv@f3,0
   893  0149  1003               	clrc
   894  014A                     L1:	
   895  014A  0DA6               	rlf	___ftdiv@f1,f
   896  014B  0DA7               	rlf	___ftdiv@f1+1,f
   897  014C  0DA8               	rlf	___ftdiv@f1+2,f
   898  014D  0BAC               	decfsz	___ftdiv@cntr,f
   899  014E  292E               	goto	l1419
   900  014F  082D               	movf	___ftdiv@f3,w
   901  0150  00F2               	movwf	___ftpack@arg
   902  0151  082E               	movf	___ftdiv@f3+1,w
   903  0152  00F3               	movwf	___ftpack@arg+1
   904  0153  082F               	movf	___ftdiv@f3+2,w
   905  0154  00F4               	movwf	___ftpack@arg+2
   906  0155  0830               	movf	___ftdiv@exp,w
   907  0156  00F5               	movwf	___ftpack@exp
   908  0157  0831               	movf	___ftdiv@sign,w
   909  0158  00F6               	movwf	___ftpack@sign
   910  0159  220E               	fcall	___ftpack
   911  015A  0872               	movf	?___ftpack,w
   912  015B  00A3               	movwf	?___ftdiv
   913  015C  0873               	movf	?___ftpack+1,w
   914  015D  00A4               	movwf	?___ftdiv+1
   915  015E  0874               	movf	?___ftpack+2,w
   916  015F  00A5               	movwf	?___ftdiv+2
   917  0160  0008               	return
   918  0161                     __end_of___ftdiv:	
   919  0161                     PL10:	
   920  0161  01A3               	clrf	?___ftdiv
   921  0162  01A4               	clrf	?___ftdiv+1
   922  0163  01A5               	clrf	?___ftdiv+2
   923  0164  0008               	return
   924  0165                     __end_ofPL10:	
   925                           
   926                           	psect	text5
   927  020E                     __ptext5:	
   928 ;; *************** function ___ftpack *****************
   929 ;; Defined at:
   930 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  arg             3    2[COMMON] unsigned um
   933 ;;  exp             1    5[COMMON] unsigned char 
   934 ;;  sign            1    6[COMMON] unsigned char 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;                  3    2[COMMON] float 
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0
   941 ;; Tracked objects:
   942 ;;		On entry : 100/0
   943 ;;		On exit  : 100/0
   944 ;;		Unchanged: 100/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1
   946 ;;      Params:         5       0       0
   947 ;;      Locals:         0       0       0
   948 ;;      Temps:          3       0       0
   949 ;;      Totals:         8       0       0
   950 ;;Total ram usage:        8 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    1
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		___ftdiv
   957 ;;		___lwtoft
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           
   962                           ;psect for function ___ftpack
   963  020E                     ___ftpack:	
   964                           
   965                           ;incstack = 0
   966                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
   967  020E  0875               	movf	___ftpack@exp,w
   968  020F  1903               	btfsc	3,2
   969  0210  2A16               	goto	l751
   970  0211  0874               	movf	___ftpack@arg+2,w
   971  0212  0473               	iorwf	___ftpack@arg+1,w
   972  0213  0472               	iorwf	___ftpack@arg,w
   973  0214  1D03               	skipz
   974  0215  2A1C               	goto	l1255
   975  0216                     l751:	
   976  0216  01F2               	clrf	?___ftpack
   977  0217  01F3               	clrf	?___ftpack+1
   978  0218  01F4               	clrf	?___ftpack+2
   979  0219  0008               	return
   980  021A                     l1253:	
   981  021A  0AF5               	incf	___ftpack@exp,f
   982  021B  224A               	fcall	PL12	;call to abstracted procedure
   983  021C                     l1255:	
   984  021C  30FE               	movlw	254
   985  021D  0574               	andwf	___ftpack@arg+2,w
   986  021E  1903               	btfsc	3,2
   987  021F  2A28               	goto	l1259
   988  0220  2A1A               	goto	l1253
   989  0221                     l1257:	
   990  0221  0AF5               	incf	___ftpack@exp,f
   991  0222  0AF2               	incf	___ftpack@arg,f
   992  0223  1903               	skipnz
   993  0224  0AF3               	incf	___ftpack@arg+1,f
   994  0225  1903               	skipnz
   995  0226  0AF4               	incf	___ftpack@arg+2,f
   996  0227  224A               	fcall	PL12	;call to abstracted procedure
   997  0228                     l1259:	
   998  0228  30FF               	movlw	255
   999  0229  0574               	andwf	___ftpack@arg+2,w
  1000  022A  1903               	btfsc	3,2
  1001  022B  2A36               	goto	l1263
  1002  022C  2A21               	goto	l1257
  1003  022D                     l1265:	
  1004  022D  3002               	movlw	2
  1005  022E  0275               	subwf	___ftpack@exp,w
  1006  022F  1C03               	btfss	3,0
  1007  0230  2A38               	goto	l763
  1008  0231  03F5               	decf	___ftpack@exp,f
  1009  0232  1003               	clrc
  1010  0233  0DF2               	rlf	___ftpack@arg,f
  1011  0234  0DF3               	rlf	___ftpack@arg+1,f
  1012  0235  0DF4               	rlf	___ftpack@arg+2,f
  1013  0236                     l1263:	
  1014  0236  1FF3               	btfss	___ftpack@arg+1,7
  1015  0237  2A2D               	goto	l1265
  1016  0238                     l763:	
  1017  0238  1C75               	btfss	___ftpack@exp,0
  1018  0239  13F3               	bcf	___ftpack@arg+1,7
  1019  023A  1003               	clrc
  1020  023B  0CF5               	rrf	___ftpack@exp,f
  1021  023C  0875               	movf	___ftpack@exp,w
  1022  023D  00F9               	movwf	??___ftpack+2
  1023  023E  01F8               	clrf	??___ftpack+1
  1024  023F  01F7               	clrf	??___ftpack
  1025  0240  0877               	movf	??___ftpack,w
  1026  0241  04F2               	iorwf	___ftpack@arg,f
  1027  0242  0878               	movf	??___ftpack+1,w
  1028  0243  04F3               	iorwf	___ftpack@arg+1,f
  1029  0244  0879               	movf	??___ftpack+2,w
  1030  0245  04F4               	iorwf	___ftpack@arg+2,f
  1031  0246  0876               	movf	___ftpack@sign,w
  1032  0247  1D03               	btfss	3,2
  1033  0248  17F4               	bsf	___ftpack@arg+2,7
  1034  0249  0008               	return
  1035  024A                     __end_of___ftpack:	
  1036  024A                     PL12:	
  1037  024A  1003               	clrc
  1038  024B  0CF4               	rrf	___ftpack@arg+2,f
  1039  024C  0CF3               	rrf	___ftpack@arg+1,f
  1040  024D  0CF2               	rrf	___ftpack@arg,f
  1041  024E  0008               	return
  1042  024F                     __end_ofPL12:	
  1043                           
  1044                           	psect	text6
  1045  028C                     __ptext6:	
  1046 ;; *************** function _Init_System *****************
  1047 ;; Defined at:
  1048 ;;		line 172 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2
  1057 ;; Tracked objects:
  1058 ;;		On entry : B00/0
  1059 ;;		On exit  : 100/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMMON   BANK0   BANK1
  1062 ;;      Params:         0       0       0
  1063 ;;      Locals:         0       0       0
  1064 ;;      Temps:          0       0       0
  1065 ;;      Totals:         0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           
  1077                           ;psect for function _Init_System
  1078  028C                     _Init_System:	
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _Init_System: [wreg+status,2]
  1082  028C  0000               	nop	;# 
  1083  028D  0064               	clrwdt	;# 
  1084                           
  1085                           ;main.c: 176: OPTION_REG = 0;
  1086  028E  1283               	bcf	3,5	;RP0=0, select bank0
  1087  028F  0181               	clrf	1	;volatile
  1088  0290  0064               	clrwdt	;# 
  1089                           
  1090                           ;main.c: 178: OSCCON = 0X70;
  1091  0291  3070               	movlw	112
  1092  0292  1283               	bcf	3,5	;RP0=0, select bank0
  1093  0293  0094               	movwf	20	;volatile
  1094                           
  1095                           ;main.c: 180: WPUA = 0B00000000;
  1096  0294  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0295  0188               	clrf	8	;volatile
  1098                           
  1099                           ;main.c: 181: WPUB = 0B00000000;
  1100  0296  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0297  0188               	clrf	8	;volatile
  1102                           
  1103                           ;main.c: 183: TRISA = 0B00000000;
  1104  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1105  0299  0185               	clrf	5	;volatile
  1106                           
  1107                           ;main.c: 184: TRISB = 0B00000000;
  1108  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1109  029B  0185               	clrf	5	;volatile
  1110                           
  1111                           ;main.c: 186: PORTA = 0X00;
  1112  029C  1683               	bsf	3,5	;RP0=1, select bank1
  1113  029D  0186               	clrf	6	;volatile
  1114                           
  1115                           ;main.c: 187: PORTB = 0X00;
  1116  029E  1283               	bcf	3,5	;RP0=0, select bank0
  1117  029F  0186               	clrf	6	;volatile
  1118                           
  1119                           ;main.c: 191: PR2 = 249;
  1120  02A0  30F9               	movlw	249
  1121  02A1  0091               	movwf	17	;volatile
  1122                           
  1123                           ;main.c: 192: TMR2IF = 0;
  1124  02A2  108D               	bcf	13,1	;volatile
  1125                           
  1126                           ;main.c: 193: TMR2IE = 1;
  1127  02A3  148E               	bsf	14,1	;volatile
  1128                           
  1129                           ;main.c: 195: T2CON = 0B00000100;
  1130  02A4  3004               	movlw	4
  1131  02A5  0093               	movwf	19	;volatile
  1132                           
  1133                           ;main.c: 196: INTCON = 0XC0;
  1134  02A6  30C0               	movlw	192
  1135  02A7  008B               	movwf	11	;volatile
  1136  02A8  0008               	return
  1137  02A9                     __end_of_Init_System:	
  1138                           
  1139                           	psect	text7
  1140  02B9                     __ptext7:	
  1141 ;; *************** function _AD_Init *****************
  1142 ;; Defined at:
  1143 ;;		line 237 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, status,2
  1152 ;; Tracked objects:
  1153 ;;		On entry : 100/0
  1154 ;;		On exit  : 100/100
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1
  1157 ;;      Params:         0       0       0
  1158 ;;      Locals:         0       0       0
  1159 ;;      Temps:          0       0       0
  1160 ;;      Totals:         0       0       0
  1161 ;;Total ram usage:        0 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _AD_Init
  1173  02B9                     _AD_Init:	
  1174                           
  1175                           ;main.c: 270: ADCON0 = 0X41;
  1176                           
  1177                           ;incstack = 0
  1178                           ; Regs used in _AD_Init: [wreg+status,2]
  1179  02B9  3041               	movlw	65
  1180  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  1181  02BB  0095               	movwf	21	;volatile
  1182                           
  1183                           ;main.c: 287: ADCON1 = 0;
  1184  02BC  0196               	clrf	22	;volatile
  1185  02BD  0008               	return
  1186  02BE                     __end_of_AD_Init:	
  1187                           
  1188                           	psect	text8
  1189  0018                     __ptext8:	
  1190 ;; *************** function _ADC_Sample *****************
  1191 ;; Defined at:
  1192 ;;		line 54 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  adch            1    wreg     unsigned char 
  1195 ;;  adldo           1    2[COMMON] unsigned char 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  adch            1    1[BANK0 ] unsigned char 
  1198 ;;  j               1    0[BANK0 ] unsigned char 
  1199 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  1200 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  1201 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  1202 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  1203 ;;  i               1    2[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      unsigned char 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/100
  1210 ;;		On exit  : 100/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1
  1213 ;;      Params:         1       0       0
  1214 ;;      Locals:         0      13       0
  1215 ;;      Temps:          4       0       0
  1216 ;;      Totals:         5      13       0
  1217 ;;Total ram usage:       18 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _ADC_Sample
  1229  0018                     _ADC_Sample:	
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  1233                           ;ADC_Sample@adch stored from wreg
  1234  0018  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0019  00A1               	movwf	ADC_Sample@adch
  1236                           
  1237                           ;main.c: 56: volatile unsigned long adsum = 0;
  1238                           
  1239                           ;main.c: 57: volatile unsigned int admin = 0, admax = 0;
  1240  001A  20F1               	fcall	PL4	;call to abstracted procedure
  1241                           
  1242                           ;main.c: 58: volatile unsigned int ad_temp = 0;
  1243  001B  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  1244  001C  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1245                           
  1246                           ;main.c: 60: if ((!LDO_EN) && (adldo & 0x04) )
  1247  001D  1683               	bsf	3,5	;RP0=1, select bank1
  1248  001E  1D16               	btfss	22,2	;volatile
  1249  001F  1D72               	btfss	ADC_Sample@adldo,2
  1250  0020  2828               	goto	l1283
  1251                           
  1252                           ;main.c: 61: {
  1253                           ;main.c: 63: ADCON1 = adldo;
  1254  0021  0872               	movf	ADC_Sample@adldo,w
  1255  0022  0096               	movwf	22	;volatile
  1256                           
  1257                           ;main.c: 64: _delay((unsigned long)((100)*(16000000/4000000.0)));
  1258  0023  3085               	movlw	133
  1259  0024  00F3               	movwf	??_ADC_Sample
  1260  0025                     u877:	
  1261  0025  0BF3               	decfsz	??_ADC_Sample,f
  1262  0026  2825               	goto	u877
  1263                           
  1264                           ;main.c: 65: }
  1265  0027  282A               	goto	l1285
  1266  0028                     l1283:	
  1267                           
  1268                           ;main.c: 66: else
  1269                           ;main.c: 67: ADCON1 = adldo;
  1270  0028  0872               	movf	ADC_Sample@adldo,w
  1271  0029  0096               	movwf	22	;volatile
  1272  002A                     l1285:	
  1273                           
  1274                           ;main.c: 69: if(adch & 0x10)
  1275  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1276  002B  1E21               	btfss	ADC_Sample@adch,4
  1277  002C  2832               	goto	l1293
  1278                           
  1279                           ;main.c: 70: {
  1280                           ;main.c: 71: CHS4 = 1;
  1281  002D  1683               	bsf	3,5	;RP0=1, select bank1
  1282  002E  1716               	bsf	22,6	;volatile
  1283                           
  1284                           ;main.c: 72: adch &= 0x0f;
  1285  002F  300F               	movlw	15
  1286  0030  1283               	bcf	3,5	;RP0=0, select bank0
  1287  0031  05A1               	andwf	ADC_Sample@adch,f
  1288  0032                     l1293:	
  1289                           
  1290                           ;main.c: 75: for (i = 0; i < 10; i++)
  1291  0032  01A2               	clrf	ADC_Sample@i
  1292  0033                     l1299:	
  1293                           
  1294                           ;main.c: 76: {
  1295                           ;main.c: 77: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  1296  0033  0821               	movf	ADC_Sample@adch,w
  1297  0034  00F3               	movwf	??_ADC_Sample
  1298  0035  3001               	movlw	1
  1299  0036  1003               	clrc
  1300  0037                     L2:	
  1301  0037  0DF3               	rlf	??_ADC_Sample,f
  1302  0038  3EFF               	addlw	-1
  1303  0039  1003               	clrc
  1304  003A  1D03               	skipz
  1305  003B  2837               	goto	L2
  1306  003C  0D73               	rlf	??_ADC_Sample,w
  1307  003D  3841               	iorlw	65
  1308  003E  1683               	bsf	3,5	;RP0=1, select bank1
  1309  003F  0095               	movwf	21	;volatile
  1310  0040  0000               	nop	;# 
  1311  0041  0000               	nop	;# 
  1312  0042  0000               	nop	;# 
  1313  0043  0000               	nop	;# 
  1314                           
  1315                           ;main.c: 82: GODONE = 1;
  1316  0044  1683               	bsf	3,5	;RP0=1, select bank1
  1317  0045  1495               	bsf	21,1	;volatile
  1318                           
  1319                           ;main.c: 84: unsigned char j = 0;
  1320  0046  1283               	bcf	3,5	;RP0=0, select bank0
  1321  0047  01A0               	clrf	ADC_Sample@j
  1322  0048                     l546:	
  1323                           ;main.c: 85: while (GODONE)
  1324                           
  1325  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1326  0049  1C95               	btfss	21,1	;volatile
  1327  004A  2853               	goto	l1309
  1328                           
  1329                           ;main.c: 86: {
  1330                           ;main.c: 87: _delay((unsigned long)((2)*(16000000/4000000.0)));
  1331  004B  284C               	nop2	;2 cycle nop
  1332  004C  284D               	nop2	;2 cycle nop
  1333  004D  284E               	nop2	;2 cycle nop
  1334  004E  284F               	nop2	;2 cycle nop
  1335                           
  1336                           ;main.c: 89: if (0 == (--j))
  1337  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0050  0BA0               	decfsz	ADC_Sample@j,f
  1339  0051  2848               	goto	l546
  1340                           
  1341                           ;main.c: 90: return 0;
  1342  0052  3400               	retlw	0
  1343  0053                     l1309:	
  1344                           
  1345                           ;main.c: 91: }
  1346                           ;main.c: 93: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  1347  0053  0819               	movf	25,w	;volatile
  1348  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0055  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  1350  0056  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  1351  0057  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  1352  0058  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  1353  0059  30F0               	movlw	240
  1354  005A  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  1355  005B  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1356  005C  390F               	andlw	15
  1357  005D  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  1358  005E  30F0               	movlw	240
  1359  005F  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  1360  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1361  0061  0E18               	swapf	24,w	;volatile
  1362  0062  390F               	andlw	15
  1363  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0064  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  1365  0065  1803               	skipnc
  1366  0066  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  1367                           
  1368                           ;main.c: 95: if (0 == admax)
  1369  0067  0829               	movf	ADC_Sample@admax,w	;volatile
  1370  0068  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  1371  0069  1D03               	btfss	3,2
  1372  006A  286D               	goto	l1317
  1373                           
  1374                           ;main.c: 96: {
  1375                           ;main.c: 97: admax = ad_temp;
  1376  006B  20FA               	fcall	PL8	;call to abstracted procedure
  1377  006C  287F               	goto	l1323
  1378  006D                     l1317:	
  1379                           ;main.c: 99: }
  1380                           
  1381                           ;main.c: 98: admin = ad_temp;
  1382                           
  1383                           
  1384                           ;main.c: 100: else if (ad_temp > admax)
  1385  006D  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1386  006E  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  1387  006F  1D03               	skipz
  1388  0070  2873               	goto	u575
  1389  0071  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1390  0072  0229               	subwf	ADC_Sample@admax,w	;volatile
  1391  0073                     u575:	
  1392  0073  1803               	skipnc
  1393  0074  2877               	goto	l1321
  1394                           
  1395                           ;main.c: 101: admax = ad_temp;
  1396  0075  20FA               	fcall	PL8	;call to abstracted procedure
  1397  0076  2883               	goto	l552
  1398  0077                     l1321:	
  1399                           
  1400                           ;main.c: 102: else if (ad_temp < admin)
  1401  0077  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1402  0078  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  1403  0079  1D03               	skipz
  1404  007A  287D               	goto	u585
  1405  007B  0827               	movf	ADC_Sample@admin,w	;volatile
  1406  007C  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  1407  007D                     u585:	
  1408  007D  1803               	skipnc
  1409  007E  2883               	goto	l552
  1410  007F                     l1323:	
  1411                           
  1412                           ;main.c: 103: admin = ad_temp;
  1413  007F  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1414  0080  00A8               	movwf	ADC_Sample@admin+1	;volatile
  1415  0081  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1416  0082  00A7               	movwf	ADC_Sample@admin	;volatile
  1417  0083                     l552:	
  1418                           
  1419                           ;main.c: 105: adsum += ad_temp;
  1420  0083  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1421  0084  00F3               	movwf	??_ADC_Sample
  1422  0085  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1423  0086  00F4               	movwf	??_ADC_Sample+1
  1424  0087  01F5               	clrf	??_ADC_Sample+2
  1425  0088  01F6               	clrf	??_ADC_Sample+3
  1426  0089  0873               	movf	??_ADC_Sample,w
  1427  008A  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  1428  008B  0874               	movf	??_ADC_Sample+1,w
  1429  008C  1103               	clrz
  1430  008D  1803               	skipnc
  1431  008E  3E01               	addlw	1
  1432  008F  1D03               	btfss	3,2
  1433  0090  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  1434  0091  0875               	movf	??_ADC_Sample+2,w
  1435  0092  1103               	clrz
  1436  0093  1803               	skipnc
  1437  0094  3E01               	addlw	1
  1438  0095  1D03               	btfss	3,2
  1439  0096  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  1440  0097  0876               	movf	??_ADC_Sample+3,w
  1441  0098  1103               	clrz
  1442  0099  1803               	skipnc
  1443  009A  3E01               	addlw	1
  1444  009B  1D03               	btfss	3,2
  1445  009C  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  1446  009D  300A               	movlw	10
  1447  009E  0AA2               	incf	ADC_Sample@i,f
  1448  009F  0222               	subwf	ADC_Sample@i,w
  1449  00A0  1C03               	skipc
  1450  00A1  2833               	goto	l1299
  1451                           
  1452                           ;main.c: 106: }
  1453                           ;main.c: 107: adsum -= admax;
  1454  00A2  0829               	movf	ADC_Sample@admax,w	;volatile
  1455  00A3  00F3               	movwf	??_ADC_Sample
  1456  00A4  082A               	movf	ADC_Sample@admax+1,w	;volatile
  1457  00A5  20E2               	fcall	PL2	;call to abstracted procedure
  1458  00A6  1C03               	skipc
  1459  00A7  0F76               	incfsz	??_ADC_Sample+3,w
  1460  00A8  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1461                           
  1462                           ;main.c: 108: if (adsum >= admin)
  1463  00A9  0827               	movf	ADC_Sample@admin,w	;volatile
  1464  00AA  00F3               	movwf	??_ADC_Sample
  1465  00AB  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1466  00AC  00F4               	movwf	??_ADC_Sample+1
  1467  00AD  01F5               	clrf	??_ADC_Sample+2
  1468  00AE  01F6               	clrf	??_ADC_Sample+3
  1469  00AF  0876               	movf	??_ADC_Sample+3,w
  1470  00B0  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  1471  00B1  1D03               	skipz
  1472  00B2  28BD               	goto	u625
  1473  00B3  0875               	movf	??_ADC_Sample+2,w
  1474  00B4  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  1475  00B5  1D03               	skipz
  1476  00B6  28BD               	goto	u625
  1477  00B7  0874               	movf	??_ADC_Sample+1,w
  1478  00B8  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  1479  00B9  1D03               	skipz
  1480  00BA  28BD               	goto	u625
  1481  00BB  0873               	movf	??_ADC_Sample,w
  1482  00BC  0223               	subwf	ADC_Sample@adsum,w	;volatile
  1483  00BD                     u625:	
  1484  00BD  1C03               	skipc
  1485  00BE  28C7               	goto	l556
  1486                           
  1487                           ;main.c: 109: adsum -= admin;
  1488  00BF  0827               	movf	ADC_Sample@admin,w	;volatile
  1489  00C0  00F3               	movwf	??_ADC_Sample
  1490  00C1  0828               	movf	ADC_Sample@admin+1,w	;volatile
  1491  00C2  20E2               	fcall	PL2	;call to abstracted procedure
  1492  00C3  1C03               	skipc
  1493  00C4  0F76               	incfsz	??_ADC_Sample+3,w
  1494  00C5  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  1495  00C6  28CB               	goto	l1333
  1496  00C7                     l556:	
  1497                           
  1498                           ;main.c: 110: else
  1499                           ;main.c: 111: adsum = 0;
  1500  00C7  01A3               	clrf	ADC_Sample@adsum	;volatile
  1501  00C8  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1502  00C9  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1503  00CA  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1504  00CB                     l1333:	
  1505                           
  1506                           ;main.c: 113: adresult = adsum >> 3;
  1507  00CB  0823               	movf	ADC_Sample@adsum,w	;volatile
  1508  00CC  00F3               	movwf	??_ADC_Sample
  1509  00CD  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  1510  00CE  00F4               	movwf	??_ADC_Sample+1
  1511  00CF  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  1512  00D0  00F5               	movwf	??_ADC_Sample+2
  1513  00D1  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  1514  00D2  00F6               	movwf	??_ADC_Sample+3
  1515  00D3  3003               	movlw	3
  1516  00D4                     u645:	
  1517  00D4  1003               	clrc
  1518  00D5  0CF6               	rrf	??_ADC_Sample+3,f
  1519  00D6  0CF5               	rrf	??_ADC_Sample+2,f
  1520  00D7  0CF4               	rrf	??_ADC_Sample+1,f
  1521  00D8  0CF3               	rrf	??_ADC_Sample,f
  1522  00D9  3EFF               	addlw	-1
  1523  00DA  1D03               	skipz
  1524  00DB  28D4               	goto	u645
  1525  00DC  0874               	movf	??_ADC_Sample+1,w
  1526  00DD  00CB               	movwf	_adresult+1	;volatile
  1527  00DE  0873               	movf	??_ADC_Sample,w
  1528  00DF  00CA               	movwf	_adresult	;volatile
  1529                           
  1530                           ;main.c: 115: adsum = 0;
  1531                           
  1532                           ;main.c: 116: admin = 0;
  1533                           
  1534                           ;main.c: 117: admax = 0;
  1535  00E0  20F1               	fcall	PL4	;call to abstracted procedure
  1536                           
  1537                           ;main.c: 118: return 0xA5;
  1538  00E1  34A5               	retlw	165
  1539  00E2                     __end_of_ADC_Sample:	
  1540  00E2                     PL2:	
  1541  00E2  00F4               	movwf	??_ADC_Sample+1
  1542  00E3  01F5               	clrf	??_ADC_Sample+2
  1543  00E4  01F6               	clrf	??_ADC_Sample+3
  1544  00E5  0873               	movf	??_ADC_Sample,w
  1545  00E6  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  1546  00E7  0874               	movf	??_ADC_Sample+1,w
  1547  00E8  1C03               	skipc
  1548  00E9  0F74               	incfsz	??_ADC_Sample+1,w
  1549  00EA  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  1550  00EB  0875               	movf	??_ADC_Sample+2,w
  1551  00EC  1C03               	skipc
  1552  00ED  0F75               	incfsz	??_ADC_Sample+2,w
  1553  00EE  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  1554  00EF  0876               	movf	??_ADC_Sample+3,w
  1555  00F0  0008               	return
  1556  00F1                     __end_ofPL2:	
  1557  00F1                     PL4:	
  1558  00F1  01A3               	clrf	ADC_Sample@adsum	;volatile
  1559  00F2  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  1560  00F3  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  1561  00F4  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  1562  00F5  01A7               	clrf	ADC_Sample@admin	;volatile
  1563  00F6  01A8               	clrf	ADC_Sample@admin+1	;volatile
  1564  00F7  01A9               	clrf	ADC_Sample@admax	;volatile
  1565  00F8  01AA               	clrf	ADC_Sample@admax+1	;volatile
  1566  00F9  0008               	return
  1567  00FA                     __end_ofPL4:	
  1568  00FA                     PL8:	
  1569  00FA  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  1570  00FB  00AA               	movwf	ADC_Sample@admax+1	;volatile
  1571  00FC  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  1572  00FD  00A9               	movwf	ADC_Sample@admax	;volatile
  1573  00FE  0008               	return
  1574  00FF                     __end_ofPL8:	
  1575                           
  1576                           	psect	text9
  1577  026E                     __ptext9:	
  1578 ;; *************** function _Isr_Timer *****************
  1579 ;; Defined at:
  1580 ;;		line 208 in file "C:\mcuproject\scm\zdt\062B_SOP14\main.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;		None
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1
  1594 ;;      Params:         0       0       0
  1595 ;;      Locals:         0       0       0
  1596 ;;      Temps:          2       0       0
  1597 ;;      Totals:         2       0       0
  1598 ;;Total ram usage:        2 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		Interrupt level 1
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function _Isr_Timer
  1609  026E                     _Isr_Timer:	
  1610                           
  1611                           ;main.c: 210: if (TMR2IF)
  1612  026E  1283               	bcf	3,5	;RP0=0, select bank0
  1613  026F  1C8D               	btfss	13,1	;volatile
  1614  0270  2A85               	goto	i1l580
  1615                           
  1616                           ;main.c: 211: {
  1617                           ;main.c: 212: TMR2IF = 0;
  1618  0271  108D               	bcf	13,1	;volatile
  1619                           
  1620                           ;main.c: 213: if(++intCount >= 160)
  1621  0272  30A0               	movlw	160
  1622  0273  0AFB               	incf	_intCount,f
  1623  0274  027B               	subwf	_intCount,w
  1624  0275  1C03               	skipc
  1625  0276  2A85               	goto	i1l580
  1626  0277  3001               	movlw	1
  1627                           
  1628                           ;main.c: 214: {
  1629                           ;main.c: 215: intCount = 0;
  1630  0278  01FB               	clrf	_intCount
  1631                           
  1632                           ;main.c: 216: IntFlag = 1;
  1633  0279  01C8               	clrf	_IntFlag
  1634  027A  0AC8               	incf	_IntFlag,f
  1635                           
  1636                           ;main.c: 217: PORTA ^= 0x01;
  1637  027B  1683               	bsf	3,5	;RP0=1, select bank1
  1638  027C  0686               	xorwf	6,f	;volatile
  1639                           
  1640                           ;main.c: 218: if(++count1s >= 100)
  1641  027D  3064               	movlw	100
  1642  027E  0AFA               	incf	_count1s,f
  1643  027F  027A               	subwf	_count1s,w
  1644  0280  1C03               	skipc
  1645  0281  2A85               	goto	i1l580
  1646  0282  3002               	movlw	2
  1647                           
  1648                           ;main.c: 219: {
  1649                           ;main.c: 220: count1s = 0;
  1650  0283  01FA               	clrf	_count1s
  1651                           
  1652                           ;main.c: 221: PORTA ^= 0x02;
  1653  0284  0686               	xorwf	6,f	;volatile
  1654  0285                     i1l580:	
  1655  0285  0871               	movf	??_Isr_Timer+1,w
  1656  0286  008A               	movwf	10
  1657  0287  0E70               	swapf	??_Isr_Timer^(0+-128),w
  1658  0288  0083               	movwf	3
  1659  0289  0EFE               	swapf	126,f
  1660  028A  0E7E               	swapf	126,w
  1661  028B  0009               	retfie
  1662  028C                     __end_of_Isr_Timer:	
  1663  007E                     btemp	set	126	;btemp
  1664  007E                     wtemp0	set	126
  1665                           
  1666                           	psect	intentry
  1667  0004                     __pintentry:	
  1668                           ;incstack = 0
  1669                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  1670                           
  1671  0004                     interrupt_function:	
  1672  007E                     saved_w	set	btemp
  1673  0004  00FE               	movwf	btemp
  1674  0005  0E03               	swapf	3,w
  1675  0006  00F0               	movwf	??_Isr_Timer
  1676  0007  080A               	movf	10,w
  1677  0008  00F1               	movwf	??_Isr_Timer+1
  1678  0009  2A6E               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     36      44
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4695
                                             31 BANK0      5     5      0
                         _ADC_Sample
                            _AD_Init
                        _Init_System
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                            _pwmInit
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1704
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     305
                                             18 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2017
                                              3 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Sample                                          18    17      1     635
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Sample
   _AD_Init
   _Init_System
   ___ftdiv
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
   _pwmInit

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     24      2C       4       55.0%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      38       7        0.0%
DATA                 0      0      38       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Dec 10 17:50:30 2024

                     PL2 00E2                       PL4 00F1                       PL6 01BC  
                     PL8 00FA                      PL10 0161                      PL12 024A  
                    l552 0083                      l546 0048                      l562 01C5  
                    l556 00C7                      l805 011B                      l751 0216  
                    l763 0238                      _PR2 0011                      u625 00BD  
                    u705 0174                      u645 00D4                      u575 0073  
                    u585 007D                      u675 013C                      u867 01DE  
                    u877 0025      __size_of_ADC_Sample 00CA          __end_of_AD_Init 02BE  
           ___ftdiv@cntr 002C             ___ftdiv@sign 0031                     l1321 0077  
                   l1323 007F                     l1333 00CB                     l1317 006D  
                   l1309 0053                     l1253 021A                     l1263 0236  
                   l1255 021C                     l1265 022D                     l1257 0221  
                   l1283 0028                     l1259 0228                     l1419 012E  
                   l1435 016D                     l1293 0032                     l1285 002A  
                   l1453 018F                     l1437 0172                     l1463 019B  
                   l1551 01E1                     l1465 01A5                     l1457 0197  
                   l1299 0033                     l1397 010D                     l1469 01B3  
                   _CHS4 04B6                     _WPUA 0088                     _WPUB 0008  
                   _main 01C3             ___ftpack@arg 0072             ___ftpack@exp 0075  
                   btemp 007E                     start 000A             ___fttol@exp1 003E  
          ??_Init_System 0072             ___fttol@lval 003A                    ?_main 0070  
        __end_of___ftdiv 0161          __end_of___fttol 01BC                    _T2CON 0013  
                  i1l580 0285                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017            ___ftpack@sign 0076                    pclath 000A  
        __end_of_pwmInit 026E                    status 0003                    wtemp0 007E  
        __initialization 000B             __end_of_main 020E                   ??_main 003F  
          ___fttol@sign1 0039                ??_AD_Init 0072      __end_of_Init_System 02A9  
                 _ADCON0 0095                   _ADCON1 0096                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL1 0094         __end_of___ftpack 024A  
                 _GODONE 04A9                   _LDO_EN 04B2                   _INTCON 000B  
       __end_of___lwtoft 02B9                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD0L 0019                   _PWMD1L 001A  
                 _PWMD2L 009B                   _PWMD3L 009C                   _PWMD4L 001B  
           ??_ADC_Sample 0073                   _PWMT4L 001C                   _TRISB7 002F  
     __size_of_Isr_Timer 001E                ??___ftdiv 0029                ??___fttol 0036  
                 _result 0046       __end_of_ADC_Sample 00E2                   saved_w 007E  
              ??_pwmInit 0072  __end_of__initialization 0016               ___ftdiv@f1 0026  
             ___ftdiv@f2 0023               ___ftdiv@f3 002D               ___fttol@f1 0032  
         __pcstackCOMMON 0070              _Init_System 028C               __end_ofPL2 00F1  
             __end_ofPL4 00FA               __end_ofPL6 01C3               __end_ofPL8 00FF  
             ___lwtoft@c 0020        __end_of_Isr_Timer 028C               __pbssBANK0 0044  
             __pmaintext 01C3               __pintentry 0004                ?___ftpack 0072  
                _AD_Init 02B9                ?___lwtoft 0020                  _PWM01DT 001F  
                _PWMD01H 001E                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D                  _IntFlag 0048  
        ADC_Sample@adldo 0072          ADC_Sample@admax 0029          ADC_Sample@admin 0027  
        ADC_Sample@adsum 0023                  ___ftdiv 00FF                  ___fttol 0165  
             ??___ftpack 0077                  __ptext0 0000                  __ptext1 024F  
                __ptext2 02A9                  __ptext3 0165                  __ptext4 00FF  
                __ptext5 020E                  __ptext6 028C                  __ptext7 02B9  
                __ptext8 0018                  __ptext9 026E               ??___lwtoft 007A  
                _count1s 007A                  _pwmInit 024F     end_of_initialization 0016  
         main@power_temp 0040              ___ftdiv@exp 0030             ?_Init_System 0070  
            __end_ofPL10 0165              __end_ofPL12 024F      start_initialization 000B  
              _Isr_Timer 026E        ADC_Sample@ad_temp 002B                 ?_AD_Init 0070  
      __size_of___ftpack 003C              __pbssCOMMON 007A                ___latbits 0000  
      __size_of___lwtoft 0010            __pcstackBANK0 0020               ?_Isr_Timer 0070  
               ?___ftdiv 0023                 ?___fttol 0032           ADC_Sample@adch 0021  
               ?_pwmInit 0070              ADC_Sample@i 0022              ADC_Sample@j 0020  
      interrupt_function 0004     __size_of_Init_System 001D         __size_of_AD_Init 0005  
            ??_Isr_Timer 0070               _ADC_Sample 0018         __size_of___ftdiv 0062  
       __size_of___fttol 0057                 ___ftpack 020E                 ___lwtoft 02A9  
               _adresult 004A         __size_of_pwmInit 001F                 _intCount 007B  
          __size_of_main 004B                 _test_adc 0049                 _power_ad 0044  
               intlevel1 0000              ?_ADC_Sample 0072               _OPTION_REG 0001  
