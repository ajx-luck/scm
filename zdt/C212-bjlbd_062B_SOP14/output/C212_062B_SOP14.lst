

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Sep 25 13:17:39 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	nvBANK0
    74  006A                     __pnvBANK0:	
    75  006A                     _firstTime:	
    76  006A                     	ds	1
    77  001F                     _PWM01DT	set	31
    78  001E                     _PWMD01H	set	30
    79  001D                     _PWMCON2	set	29
    80  001A                     _PWMD1L	set	26
    81  0019                     _PWMD0L	set	25
    82  0018                     _PWMTH	set	24
    83  0017                     _PWMTL	set	23
    84  0016                     _PWMCON1	set	22
    85  0015                     _PWMCON0	set	21
    86  0014                     _OSCCON	set	20
    87  0013                     _T2CON	set	19
    88  0011                     _PR2	set	17
    89  000E                     _PIE1	set	14
    90  000D                     _PIR1	set	13
    91  000B                     _INTCON	set	11
    92  0009                     _IOCB	set	9
    93  0008                     _WPUB	set	8
    94  0006                     _PORTB	set	6
    95  0005                     _TRISB	set	5
    96  0001                     _OPTION_REG	set	1
    97  0071                     _TMR2IE	set	113
    98  0073                     _RAIE	set	115
    99  0069                     _TMR2IF	set	105
   100  006B                     _RAIF	set	107
   101  0058                     _RBIF	set	88
   102  005B                     _RBIE	set	91
   103  005E                     _PEIE	set	94
   104  005F                     _GIE	set	95
   105  0030                     _RB0	set	48
   106  0031                     _RB1	set	49
   107  0099                     _ADRESH	set	153
   108  0098                     _ADRESL	set	152
   109  0096                     _ADCON1	set	150
   110  0095                     _ADCON0	set	149
   111  0093                     _ANSEL0	set	147
   112  0089                     _IOCA	set	137
   113  0088                     _WPUA	set	136
   114  0087                     _WPDA	set	135
   115  0086                     _PORTA	set	134
   116  0085                     _TRISA	set	133
   117  04B2                     _LDO_EN	set	1202
   118  04B6                     _CHS4	set	1206
   119  04A9                     _GODONE	set	1193
   120                           
   121                           	psect	cinit
   122  000D                     start_initialization:	
   123                           ; #config settings
   124                           
   125  000D                     __initialization:	
   126                           
   127                           ; Clear objects allocated to COMMON
   128  000D  3077               	movlw	low __pbssCOMMON
   129  000E  0084               	movwf	4
   130  000F  307B               	movlw	low (__pbssCOMMON+4)
   131  0010  25C2               	fcall	clear_ram0
   132  0011  3020               	movlw	low __pbssBANK0
   133                           
   134                           ; Clear objects allocated to BANK0
   135  0012  1383               	bcf	3,7	;select IRP bank0
   136  0013  0084               	movwf	4
   137  0014  3057               	movlw	low (__pbssBANK0+55)
   138  0015  25C2               	fcall	clear_ram0
   139  0016                     end_of_initialization:	
   140                           ;End of C runtime variable initialization code
   141                           
   142  0016                     __end_of__initialization:	
   143  0016  0183               	clrf	3
   144  0017  2C83               	ljmp	_main	;jump to C main() function
   145                           
   146                           	psect	bssCOMMON
   147  0077                     __pbssCOMMON:	
   148  0077                     _prePwStep:	
   149  0077                     	ds	1
   150  0078                     _ledStep:	
   151  0078                     	ds	1
   152  0079                     _workStep:	
   153  0079                     	ds	1
   154  007A                     _chrgFlag:	
   155  007A                     	ds	1
   156                           
   157                           	psect	bssBANK0
   158  0020                     __pbssBANK0:	
   159  0020                     _count900s:	
   160  0020                     	ds	2
   161  0022                     _count8s:	
   162  0022                     	ds	2
   163  0024                     _overWorkTime:	
   164  0024                     	ds	2
   165  0026                     _count5s:	
   166  0026                     	ds	2
   167  0028                     _fullCount:	
   168  0028                     	ds	2
   169  002A                     _count50s:	
   170  002A                     	ds	2
   171  002C                     _batADValue:	
   172  002C                     	ds	2
   173  002E                     _outADValue:	
   174  002E                     	ds	2
   175  0030                     _power_ad:	
   176  0030                     	ds	2
   177  0032                     _result:	
   178  0032                     	ds	2
   179  0034                     _adresult:	
   180  0034                     	ds	2
   181  0036                     _sleepTime:	
   182  0036                     	ds	1
   183  0037                     _lowBatFlag:	
   184  0037                     	ds	1
   185  0038                     _preLedStep:	
   186  0038                     	ds	1
   187  0039                     _ledCntTime:	
   188  0039                     	ds	1
   189  003A                     _chrgMaxDuty:	
   190  003A                     	ds	1
   191  003B                     _chrgWaitTime:	
   192  003B                     	ds	1
   193  003C                     _subTime:	
   194  003C                     	ds	1
   195  003D                     _addTime:	
   196  003D                     	ds	1
   197  003E                     _lockCount:	
   198  003E                     	ds	1
   199  003F                     _chrgMaxAD:	
   200  003F                     	ds	1
   201  0040                     _chrgMode:	
   202  0040                     	ds	1
   203  0041                     _showBatTime:	
   204  0041                     	ds	1
   205  0042                     _lockLedStep:	
   206  0042                     	ds	1
   207  0043                     _reChrgCount:	
   208  0043                     	ds	1
   209  0044                     _pwStep:	
   210  0044                     	ds	1
   211  0045                     _overChrgTime:	
   212  0045                     	ds	1
   213  0046                     _startTime:	
   214  0046                     	ds	1
   215  0047                     _tempDuty:	
   216  0047                     	ds	1
   217  0048                     _addPowerCount:	
   218  0048                     	ds	1
   219  0049                     _overCount:	
   220  0049                     	ds	1
   221  004A                     _maxDuty:	
   222  004A                     	ds	1
   223  004B                     _longPressFlag:	
   224  004B                     	ds	1
   225  004C                     _keyCount:	
   226  004C                     	ds	1
   227  004D                     _ledCnt:	
   228  004D                     	ds	1
   229  004E                     _workOverOutTime:	
   230  004E                     	ds	1
   231  004F                     _protectFlag:	
   232  004F                     	ds	1
   233  0050                     _countHalfFull:	
   234  0050                     	ds	1
   235  0051                     _intCount10:	
   236  0051                     	ds	1
   237  0052                     _chrgFullFlag:	
   238  0052                     	ds	1
   239  0053                     _IntFlag:	
   240  0053                     	ds	1
   241  0054                     _count1s:	
   242  0054                     	ds	1
   243  0055                     _intCount:	
   244  0055                     	ds	1
   245  0056                     _test_adc:	
   246  0056                     	ds	1
   247                           
   248                           	psect	clrtext
   249  05C2                     clear_ram0:	
   250                           ;	Called with FSR containing the base address, and
   251                           ;	W with the last address+1
   252                           
   253  05C2  0064               	clrwdt	;clear the watchdog before getting into this loop
   254  05C3                     clrloop0:	
   255  05C3  0180               	clrf	0	;clear RAM location pointed to by FSR
   256  05C4  0A84               	incf	4,f	;increment pointer
   257  05C5  0604               	xorwf	4,w	;XOR with final address
   258  05C6  1903               	btfsc	3,2	;have we reached the end yet?
   259  05C7  3400               	retlw	0	;all done for this memory range, return
   260  05C8  0604               	xorwf	4,w	;XOR again to restore value
   261  05C9  2DC3               	goto	clrloop0	;do the next byte
   262                           
   263                           	psect	cstackCOMMON
   264  0070                     __pcstackCOMMON:	
   265  0070                     ?_ledShow:	
   266  0070                     ??_ledShow:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ?_Init_System:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_AD_Init:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_checkOutA:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_chrgCtr:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_checkBatAD:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_keyCtr:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_workCtr:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_ledCtr:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_Sleep_Mode:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_chrgPwmStop:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_chrgPwmInit:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_pwmInit:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_pwmStop:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_Isr_Timer:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ??_Isr_Timer:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_main:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_keyRead:	
   318                           ; 1 bytes @ 0x0
   319                           
   320                           
   321                           ; 1 bytes @ 0x0
   322  0070                     	ds	3
   323  0073                     ??_Init_System:	
   324  0073                     ??_AD_Init:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ??_Sleep_Mode:	
   328                           ; 1 bytes @ 0x3
   329                           
   330  0073                     ??_chrgPwmStop:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ??_chrgPwmInit:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ??_pwmInit:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ??_pwmStop:	
   340                           ; 1 bytes @ 0x3
   341                           
   342  0073                     ?_ADC_Sample:	
   343                           ; 1 bytes @ 0x3
   344                           
   345  0073                     ??_keyRead:	
   346                           ; 1 bytes @ 0x3
   347                           
   348  0073                     ?___bmul:	
   349                           ; 1 bytes @ 0x3
   350                           
   351  0073                     ?___lbdiv:	
   352                           ; 1 bytes @ 0x3
   353                           
   354  0073                     ?___lbmod:	
   355                           ; 1 bytes @ 0x3
   356                           
   357  0073                     ?___lwmod:	
   358                           ; 1 bytes @ 0x3
   359                           
   360  0073                     keyRead@keyStatus:	
   361                           ; 2 bytes @ 0x3
   362                           
   363  0073                     ADC_Sample@adldo:	
   364                           ; 1 bytes @ 0x3
   365                           
   366  0073                     ___bmul@multiplicand:	
   367                           ; 1 bytes @ 0x3
   368                           
   369  0073                     ___lbdiv@divisor:	
   370                           ; 1 bytes @ 0x3
   371                           
   372  0073                     ___lbmod@divisor:	
   373                           ; 1 bytes @ 0x3
   374                           
   375  0073                     ___lwmod@divisor:	
   376                           ; 1 bytes @ 0x3
   377                           
   378                           
   379                           ; 2 bytes @ 0x3
   380  0073                     	ds	1
   381  0074                     ??_checkOutA:	
   382  0074                     ??_checkBatAD:	
   383                           ; 1 bytes @ 0x4
   384                           
   385  0074                     ??_keyCtr:	
   386                           ; 1 bytes @ 0x4
   387                           
   388  0074                     ??___bmul:	
   389                           ; 1 bytes @ 0x4
   390                           
   391  0074                     ??___lbdiv:	
   392                           ; 1 bytes @ 0x4
   393                           
   394  0074                     ??___lbmod:	
   395                           ; 1 bytes @ 0x4
   396                           
   397  0074                     keyCtr@kclick:	
   398                           ; 1 bytes @ 0x4
   399                           
   400  0074                     ___bmul@product:	
   401                           ; 1 bytes @ 0x4
   402                           
   403  0074                     ___lbdiv@dividend:	
   404                           ; 1 bytes @ 0x4
   405                           
   406                           
   407                           ; 1 bytes @ 0x4
   408  0074                     	ds	1
   409  0075                     ___bmul@multiplier:	
   410  0075                     ___lbdiv@counter:	
   411                           ; 1 bytes @ 0x5
   412                           
   413  0075                     ___lwmod@dividend:	
   414                           ; 1 bytes @ 0x5
   415                           
   416                           
   417                           ; 2 bytes @ 0x5
   418  0075                     	ds	1
   419  0076                     ??_workCtr:	
   420  0076                     ___lbdiv@quotient:	
   421                           ; 1 bytes @ 0x6
   422                           
   423                           
   424                           ; 1 bytes @ 0x6
   425  0076                     	ds	1
   426  0077                     ??_ledCtr:	
   427  0077                     ??_main:	
   428                           ; 1 bytes @ 0x7
   429                           
   430  0077                     ??___lwmod:	
   431                           ; 1 bytes @ 0x7
   432                           
   433                           
   434                           	psect	cstackBANK0
   435  0057                     __pcstackBANK0:	
   436                           ; 1 bytes @ 0x7
   437                           
   438  0057                     ??_chrgCtr:	
   439  0057                     ??_ADC_Sample:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0057                     ___lbmod@dividend:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0057                     ___lwmod@counter:	
   446                           ; 1 bytes @ 0x0
   447                           
   448                           
   449                           ; 1 bytes @ 0x0
   450  0057                     	ds	1
   451  0058                     ___lbmod@counter:	
   452                           
   453                           ; 1 bytes @ 0x1
   454  0058                     	ds	1
   455  0059                     ___lbmod@rem:	
   456                           
   457                           ; 1 bytes @ 0x2
   458  0059                     	ds	2
   459  005B                     ADC_Sample@j:	
   460                           
   461                           ; 1 bytes @ 0x4
   462  005B                     	ds	1
   463  005C                     ADC_Sample@adch:	
   464                           
   465                           ; 1 bytes @ 0x5
   466  005C                     	ds	1
   467  005D                     ADC_Sample@i:	
   468                           
   469                           ; 1 bytes @ 0x6
   470  005D                     	ds	1
   471  005E                     ADC_Sample@adsum:	
   472                           
   473                           ; 4 bytes @ 0x7
   474  005E                     	ds	4
   475  0062                     ADC_Sample@admin:	
   476                           
   477                           ; 2 bytes @ 0xB
   478  0062                     	ds	2
   479  0064                     ADC_Sample@admax:	
   480                           
   481                           ; 2 bytes @ 0xD
   482  0064                     	ds	2
   483  0066                     ADC_Sample@ad_temp:	
   484                           
   485                           ; 2 bytes @ 0xF
   486  0066                     	ds	3
   487  0069                     checkOutA@maxAout:	
   488                           
   489                           ; 1 bytes @ 0x12
   490  0069                     	ds	1
   491                           
   492                           	psect	maintext
   493  0483                     __pmaintext:	
   494 ;;
   495 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   496 ;;
   497 ;; *************** function _main *****************
   498 ;; Defined at:
   499 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, status,2, status,0, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : B00/0
   510 ;;		On exit  : 100/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1
   513 ;;      Params:         0       0       0
   514 ;;      Locals:         0       0       0
   515 ;;      Temps:          0       0       0
   516 ;;      Totals:         0       0       0
   517 ;;Total ram usage:        0 bytes
   518 ;; Hardware stack levels required when called:    4
   519 ;; This function calls:
   520 ;;		_AD_Init
   521 ;;		_Init_System
   522 ;;		_Sleep_Mode
   523 ;;		_checkBatAD
   524 ;;		_checkOutA
   525 ;;		_chrgCtr
   526 ;;		_keyCtr
   527 ;;		_ledCtr
   528 ;;		_workCtr
   529 ;; This function is called by:
   530 ;;		Startup code after reset
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _main
   536  0483                     _main:	
   537                           
   538                           ;main.c: 126: Init_System();
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   542  0483  2513               	fcall	_Init_System
   543                           
   544                           ;main.c: 127: AD_Init();
   545  0484  25D2               	fcall	_AD_Init
   546                           
   547                           ;main.c: 128: firstTime = 100;
   548  0485  3064               	movlw	100
   549  0486  1283               	bcf	3,5	;RP0=0, select bank0
   550  0487  00EA               	movwf	_firstTime
   551  0488                     l661:	
   552                           ;main.c: 129: while (1)
   553                           
   554  0488  0064               	clrwdt	;# 
   555                           
   556                           ;main.c: 132: if(intCount10 > 10)
   557  0489  300B               	movlw	11
   558  048A  1283               	bcf	3,5	;RP0=0, select bank0
   559  048B  0251               	subwf	_intCount10,w
   560  048C  1C03               	skipc
   561  048D  2C90               	goto	l3511
   562                           
   563                           ;main.c: 133: {
   564                           ;main.c: 134: intCount10 = 0;
   565  048E  01D1               	clrf	_intCount10
   566                           
   567                           ;main.c: 135: checkOutA();
   568  048F  22B0               	fcall	_checkOutA
   569  0490                     l3511:	
   570                           
   571                           ;main.c: 136: }
   572                           ;main.c: 137: if(!IntFlag)
   573  0490  1283               	bcf	3,5	;RP0=0, select bank0
   574  0491  0853               	movf	_IntFlag,w
   575  0492  1903               	btfsc	3,2
   576  0493  2C88               	goto	l661
   577                           
   578                           ;main.c: 139: IntFlag = 0;
   579  0494  01D3               	clrf	_IntFlag
   580                           
   581                           ;main.c: 140: chrgCtr();
   582  0495  2018               	fcall	_chrgCtr
   583                           
   584                           ;main.c: 141: checkBatAD();
   585  0496  2205               	fcall	_checkBatAD
   586                           
   587                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   588  0497  087A               	movf	_chrgFlag,w
   589  0498  1D03               	btfss	3,2
   590  0499  2C9F               	goto	l665
   591  049A  1283               	bcf	3,5	;RP0=0, select bank0
   592  049B  0837               	movf	_lowBatFlag,w
   593  049C  1D03               	btfss	3,2
   594  049D  2C9F               	goto	l665
   595                           
   596                           ;main.c: 143: {
   597                           ;main.c: 144: keyCtr();
   598  049E  24BE               	fcall	_keyCtr
   599  049F                     l665:	
   600                           
   601                           ;main.c: 145: }
   602                           ;main.c: 146: workCtr();
   603  049F  2447               	fcall	_workCtr
   604                           
   605                           ;main.c: 147: ledCtr();
   606  04A0  2358               	fcall	_ledCtr
   607                           
   608                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   609  04A1  087A               	movf	_chrgFlag,w
   610  04A2  1D03               	btfss	3,2
   611  04A3  2CBC               	goto	l3545
   612  04A4  0879               	movf	_workStep,w
   613  04A5  1D03               	btfss	3,2
   614  04A6  2CBC               	goto	l3545
   615  04A7  084C               	movf	_keyCount,w
   616  04A8  1D03               	btfss	3,2
   617  04A9  2CBC               	goto	l3545
   618  04AA  086A               	movf	_firstTime,w
   619  04AB  1D03               	btfss	3,2
   620  04AC  2CBC               	goto	l3545
   621  04AD  0841               	movf	_showBatTime,w
   622  04AE  1D03               	btfss	3,2
   623  04AF  2CBC               	goto	l3545
   624  04B0  0824               	movf	_overWorkTime,w
   625  04B1  0425               	iorwf	_overWorkTime+1,w
   626  04B2  1D03               	btfss	3,2
   627  04B3  2CBC               	goto	l3545
   628                           
   629                           ;main.c: 149: {
   630                           ;main.c: 150: if(++sleepTime >= 200)
   631  04B4  30C8               	movlw	200
   632  04B5  0AB6               	incf	_sleepTime,f
   633  04B6  0236               	subwf	_sleepTime,w
   634  04B7  1C03               	skipc
   635  04B8  2C88               	goto	l661
   636                           
   637                           ;main.c: 151: {
   638                           ;main.c: 152: sleepTime = 0;
   639  04B9  01B6               	clrf	_sleepTime
   640                           
   641                           ;main.c: 153: Sleep_Mode();
   642  04BA  2409               	fcall	_Sleep_Mode
   643  04BB  2C88               	goto	l661
   644  04BC                     l3545:	
   645                           
   646                           ;main.c: 156: else
   647                           ;main.c: 157: {
   648                           ;main.c: 158: sleepTime = 0;
   649  04BC  01B6               	clrf	_sleepTime
   650  04BD  2C88               	goto	l661
   651  04BE                     __end_of_main:	
   652                           
   653                           	psect	text1
   654  0447                     __ptext1:	
   655 ;; *************** function _workCtr *****************
   656 ;; Defined at:
   657 ;;		line 539 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;		None
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, status,2, status,0, pclath, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 100/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0   BANK1
   671 ;;      Params:         0       0       0
   672 ;;      Locals:         0       0       0
   673 ;;      Temps:          0       0       0
   674 ;;      Totals:         0       0       0
   675 ;;Total ram usage:        0 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    3
   678 ;; This function calls:
   679 ;;		___bmul
   680 ;;		_pwmInit
   681 ;;		_pwmStop
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _workCtr
   689  0447                     _workCtr:	
   690                           
   691                           ;main.c: 542: if(startTime > 0)
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   695  0447  1283               	bcf	3,5	;RP0=0, select bank0
   696  0448  0846               	movf	_startTime,w
   697  0449  1D03               	btfss	3,2
   698                           
   699                           ;main.c: 543: {
   700                           ;main.c: 544: startTime--;
   701  044A  03C6               	decf	_startTime,f
   702                           
   703                           ;main.c: 545: }
   704                           ;main.c: 546: if(workStep > 0)
   705  044B  0879               	movf	_workStep,w
   706  044C  1903               	btfsc	3,2
   707  044D  2C7F               	goto	l2821
   708                           
   709                           ;main.c: 547: {
   710                           ;main.c: 548: if((PWMCON0 & 0x02) == 0)
   711  044E  1895               	btfsc	21,1	;volatile
   712  044F  2C51               	goto	l785
   713                           
   714                           ;main.c: 549: {
   715                           ;main.c: 550: pwmInit();
   716  0450  25CA               	fcall	_pwmInit
   717  0451                     l785:	
   718                           
   719                           ;main.c: 551: }
   720                           ;main.c: 552: maxDuty = 63 + (workStep*6);
   721  0451  3006               	movlw	6
   722  0452  00F3               	movwf	___bmul@multiplicand
   723  0453  0879               	movf	_workStep,w
   724  0454  25A7               	fcall	___bmul
   725  0455  3E3F               	addlw	63
   726  0456  00CA               	movwf	_maxDuty
   727                           
   728                           ;main.c: 553: if(overCount >= 5)
   729  0457  3005               	movlw	5
   730  0458  0249               	subwf	_overCount,w
   731  0459  1C03               	skipc
   732  045A  2C6F               	goto	l2813
   733                           
   734                           ;main.c: 554: {
   735                           ;main.c: 555: if(++count5s > 500)
   736  045B  0AA6               	incf	_count5s,f
   737  045C  1903               	skipnz
   738  045D  0AA7               	incf	_count5s+1,f
   739  045E  3001               	movlw	1
   740  045F  0227               	subwf	_count5s+1,w
   741  0460  30F5               	movlw	245
   742  0461  1903               	skipnz
   743  0462  0226               	subwf	_count5s,w
   744  0463  1C03               	skipc
   745  0464  2C71               	goto	l2815
   746  0465  30E8               	movlw	232
   747                           
   748                           ;main.c: 556: {
   749                           ;main.c: 557: count5s = 0;
   750  0466  01A6               	clrf	_count5s
   751  0467  01A7               	clrf	_count5s+1
   752                           
   753                           ;main.c: 558: overWorkTime = 1000;
   754  0468  00A4               	movwf	_overWorkTime
   755  0469  3003               	movlw	3
   756  046A  00A5               	movwf	_overWorkTime+1
   757                           
   758                           ;main.c: 559: preLedStep = workStep;
   759  046B  0879               	movf	_workStep,w
   760  046C  00B8               	movwf	_preLedStep
   761                           
   762                           ;main.c: 560: workStep = 0;
   763  046D  01F9               	clrf	_workStep
   764  046E  2C71               	goto	l2815
   765  046F                     l2813:	
   766                           
   767                           ;main.c: 564: else
   768                           ;main.c: 565: {
   769                           ;main.c: 566: count5s = 0;
   770  046F  01A6               	clrf	_count5s
   771  0470  01A7               	clrf	_count5s+1
   772  0471                     l2815:	
   773                           
   774                           ;main.c: 567: }
   775                           ;main.c: 568: if(count1s == 0 && ++count900s >= 900)
   776  0471  0854               	movf	_count1s,w
   777  0472  1D03               	btfss	3,2
   778  0473  0008               	return
   779  0474  0AA0               	incf	_count900s,f
   780  0475  1903               	skipnz
   781  0476  0AA1               	incf	_count900s+1,f
   782  0477  3003               	movlw	3
   783  0478  0221               	subwf	_count900s+1,w
   784  0479  3084               	movlw	132
   785  047A  1903               	skipnz
   786  047B  0220               	subwf	_count900s,w
   787  047C  1803               	btfsc	3,0
   788                           
   789                           ;main.c: 569: {
   790                           ;main.c: 570: workStep = 0;
   791  047D  01F9               	clrf	_workStep
   792  047E  0008               	return
   793  047F                     l2821:	
   794                           
   795                           ;main.c: 573: else
   796                           ;main.c: 574: {
   797                           ;main.c: 575: pwmStop();
   798  047F  25DF               	fcall	_pwmStop
   799                           
   800                           ;main.c: 576: count900s = 0;
   801  0480  01A0               	clrf	_count900s
   802  0481  01A1               	clrf	_count900s+1
   803  0482  0008               	return
   804  0483                     __end_of_workCtr:	
   805                           
   806                           	psect	text2
   807  05DF                     __ptext2:	
   808 ;; *************** function _pwmStop *****************
   809 ;; Defined at:
   810 ;;		line 925 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		None
   819 ;; Tracked objects:
   820 ;;		On entry : 100/0
   821 ;;		On exit  : 100/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1
   824 ;;      Params:         0       0       0
   825 ;;      Locals:         0       0       0
   826 ;;      Temps:          0       0       0
   827 ;;      Totals:         0       0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    2
   831 ;; This function calls:
   832 ;;		Nothing
   833 ;; This function is called by:
   834 ;;		_workCtr
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _pwmStop
   840  05DF                     _pwmStop:	
   841                           
   842                           ;main.c: 927: PWMCON0 &= 0XFD;
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _pwmStop: []
   846  05DF  1095               	bcf	21,1	;volatile
   847                           
   848                           ;main.c: 928: RB1 = 0;
   849  05E0  1086               	bcf	6,1	;volatile
   850  05E1  0008               	return
   851  05E2                     __end_of_pwmStop:	
   852                           
   853                           	psect	text3
   854  05CA                     __ptext3:	
   855 ;; *************** function _pwmInit *****************
   856 ;; Defined at:
   857 ;;		line 910 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;		None
   860 ;; Auto vars:     Size  Location     Type
   861 ;;		None
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, status,2
   866 ;; Tracked objects:
   867 ;;		On entry : 100/0
   868 ;;		On exit  : 100/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMMON   BANK0   BANK1
   871 ;;      Params:         0       0       0
   872 ;;      Locals:         0       0       0
   873 ;;      Temps:          0       0       0
   874 ;;      Totals:         0       0       0
   875 ;;Total ram usage:        0 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    2
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_workCtr
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _pwmInit
   887  05CA                     _pwmInit:	
   888                           
   889                           ;main.c: 912: PWMCON1 = 0B00000000;
   890                           
   891                           ;incstack = 0
   892                           ; Regs used in _pwmInit: [wreg+status,2]
   893                           
   894                           ;main.c: 913: PWMTH = 0X00;
   895                           
   896                           ;main.c: 914: PWMTL = 100;
   897                           
   898                           ;main.c: 917: PWMD01H = 0;
   899  05CA  25BC               	fcall	PL8	;call to abstracted procedure
   900                           
   901                           ;main.c: 918: PWMD1L = 50;
   902  05CB  3032               	movlw	50
   903  05CC  009A               	movwf	26	;volatile
   904                           
   905                           ;main.c: 919: PWM01DT = 0X00;
   906  05CD  019F               	clrf	31	;volatile
   907                           
   908                           ;main.c: 921: PWMCON0 = 0X62;
   909  05CE  3062               	movlw	98
   910  05CF  0095               	movwf	21	;volatile
   911                           
   912                           ;main.c: 922: PWMCON2 =0X00;
   913  05D0  019D               	clrf	29	;volatile
   914  05D1  0008               	return
   915  05D2                     __end_of_pwmInit:	
   916                           
   917                           	psect	text4
   918  05A7                     __ptext4:	
   919 ;; *************** function ___bmul *****************
   920 ;; Defined at:
   921 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  multiplier      1    wreg     unsigned char 
   924 ;;  multiplicand    1    3[COMMON] unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  multiplier      1    5[COMMON] unsigned char 
   927 ;;  product         1    4[COMMON] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      unsigned char 
   930 ;; Registers used:
   931 ;;		wreg, status,2, status,0
   932 ;; Tracked objects:
   933 ;;		On entry : 100/0
   934 ;;		On exit  : 100/0
   935 ;;		Unchanged: 100/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1
   937 ;;      Params:         1       0       0
   938 ;;      Locals:         2       0       0
   939 ;;      Temps:          0       0       0
   940 ;;      Totals:         3       0       0
   941 ;;Total ram usage:        3 bytes
   942 ;; Hardware stack levels used:    1
   943 ;; Hardware stack levels required when called:    2
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_workCtr
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           
   952                           ;psect for function ___bmul
   953  05A7                     ___bmul:	
   954                           
   955                           ;incstack = 0
   956                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   957                           ;___bmul@multiplier stored from wreg
   958  05A7  00F5               	movwf	___bmul@multiplier
   959  05A8  01F4               	clrf	___bmul@product
   960  05A9                     l2305:	
   961  05A9  0873               	movf	___bmul@multiplicand,w
   962  05AA  1875               	btfsc	___bmul@multiplier,0
   963  05AB  07F4               	addwf	___bmul@product,f
   964  05AC  1003               	clrc
   965  05AD  0DF3               	rlf	___bmul@multiplicand,f
   966  05AE  1003               	clrc
   967  05AF  0CF5               	rrf	___bmul@multiplier,f
   968  05B0  0875               	movf	___bmul@multiplier,w
   969  05B1  1D03               	btfss	3,2
   970  05B2  2DA9               	goto	l2305
   971  05B3  0874               	movf	___bmul@product,w
   972  05B4  0008               	return
   973  05B5                     __end_of___bmul:	
   974                           
   975                           	psect	text5
   976  0358                     __ptext5:	
   977 ;; *************** function _ledCtr *****************
   978 ;; Defined at:
   979 ;;		line 231 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 100/0
   990 ;;		On exit  : 100/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1
   993 ;;      Params:         0       0       0
   994 ;;      Locals:         0       0       0
   995 ;;      Temps:          0       0       0
   996 ;;      Totals:         0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    3
  1000 ;; This function calls:
  1001 ;;		___lbdiv
  1002 ;;		___lbmod
  1003 ;;		___lwmod
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _ledCtr
  1011  0358                     _ledCtr:	
  1012                           
  1013                           ;main.c: 233: if(firstTime > 0)
  1014                           
  1015                           ;incstack = 0
  1016                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
  1017  0358  086A               	movf	_firstTime,w
  1018  0359  1903               	btfsc	3,2
  1019  035A  2B65               	goto	l3459
  1020  035B  3006               	movlw	6
  1021                           
  1022                           ;main.c: 234: {
  1023                           ;main.c: 235: firstTime--;
  1024  035C  03EA               	decf	_firstTime,f
  1025                           
  1026                           ;main.c: 236: ledStep = 6;
  1027  035D  00F8               	movwf	_ledStep
  1028                           
  1029                           ;main.c: 237: if(prePwStep < pwStep)
  1030  035E  0844               	movf	_pwStep,w
  1031  035F  0277               	subwf	_prePwStep,w
  1032  0360  1803               	skipnc
  1033  0361  0008               	return
  1034                           
  1035                           ;main.c: 238: {
  1036                           ;main.c: 239: prePwStep = pwStep;
  1037  0362  0844               	movf	_pwStep,w
  1038  0363  00F7               	movwf	_prePwStep
  1039  0364  0008               	return
  1040  0365                     l3459:	
  1041                           
  1042                           ;main.c: 242: else if(overWorkTime > 0)
  1043  0365  0824               	movf	_overWorkTime,w
  1044  0366  0425               	iorwf	_overWorkTime+1,w
  1045  0367  1903               	btfsc	3,2
  1046  0368  2B83               	goto	l3469
  1047                           
  1048                           ;main.c: 243: {
  1049                           ;main.c: 244: overWorkTime--;
  1050  0369  3001               	movlw	1
  1051  036A  02A4               	subwf	_overWorkTime,f
  1052  036B  3000               	movlw	0
  1053  036C  1C03               	skipc
  1054  036D  03A5               	decf	_overWorkTime+1,f
  1055  036E  02A5               	subwf	_overWorkTime+1,f
  1056                           
  1057                           ;main.c: 245: if(overWorkTime % 40 < 20)
  1058  036F  3028               	movlw	40
  1059  0370  00F3               	movwf	___lwmod@divisor
  1060  0371  01F4               	clrf	___lwmod@divisor+1
  1061  0372  0825               	movf	_overWorkTime+1,w
  1062  0373  00F6               	movwf	___lwmod@dividend+1
  1063  0374  0824               	movf	_overWorkTime,w
  1064  0375  00F5               	movwf	___lwmod@dividend
  1065  0376  24EF               	fcall	___lwmod
  1066  0377  3000               	movlw	0
  1067  0378  0274               	subwf	?___lwmod+1,w
  1068  0379  3014               	movlw	20
  1069  037A  1903               	skipnz
  1070  037B  0273               	subwf	?___lwmod,w
  1071  037C  1803               	skipnc
  1072  037D  2B81               	goto	l3467
  1073                           
  1074                           ;main.c: 246: {
  1075                           ;main.c: 247: ledStep = preLedStep;
  1076  037E  0838               	movf	_preLedStep,w
  1077  037F  00F8               	movwf	_ledStep
  1078                           
  1079                           ;main.c: 248: }
  1080  0380  0008               	return
  1081  0381                     l3467:	
  1082                           
  1083                           ;main.c: 249: else
  1084                           ;main.c: 250: {
  1085                           ;main.c: 251: ledStep = 0;
  1086  0381  01F8               	clrf	_ledStep
  1087  0382  0008               	return
  1088  0383                     l3469:	
  1089                           
  1090                           ;main.c: 254: else if(showBatTime > 0)
  1091  0383  0841               	movf	_showBatTime,w
  1092  0384  1903               	btfsc	3,2
  1093  0385  2B9D               	goto	l3487
  1094  0386  300E               	movlw	14
  1095                           
  1096                           ;main.c: 255: {
  1097                           ;main.c: 256: showBatTime--;
  1098  0387  03C1               	decf	_showBatTime,f
  1099                           
  1100                           ;main.c: 257: if(prePwStep >= 14)
  1101  0388  0277               	subwf	_prePwStep,w
  1102  0389  1C03               	skipc
  1103  038A  2B91               	goto	l3477
  1104                           
  1105                           ;main.c: 258: {
  1106                           ;main.c: 259: ledStep = prePwStep/14;
  1107  038B  300E               	movlw	14
  1108  038C  00F3               	movwf	___lbdiv@divisor
  1109  038D  0877               	movf	_prePwStep,w
  1110  038E  258C               	fcall	___lbdiv
  1111  038F  00F8               	movwf	_ledStep
  1112                           
  1113                           ;main.c: 260: }
  1114  0390  0008               	return
  1115  0391                     l3477:	
  1116                           
  1117                           ;main.c: 261: else if(prePwStep > 5)
  1118  0391  3006               	movlw	6
  1119  0392  0277               	subwf	_prePwStep,w
  1120  0393  1C03               	skipc
  1121  0394  2B98               	goto	l3481
  1122  0395                     l3479:	
  1123                           
  1124                           ;main.c: 262: {
  1125                           ;main.c: 263: ledStep = 1;
  1126  0395  01F8               	clrf	_ledStep
  1127  0396  0AF8               	incf	_ledStep,f
  1128                           
  1129                           ;main.c: 264: }
  1130  0397  0008               	return
  1131  0398                     l3481:	
  1132                           
  1133                           ;main.c: 265: else
  1134                           ;main.c: 266: {
  1135                           ;main.c: 267: if(count1s < 50)
  1136  0398  3032               	movlw	50
  1137  0399  0254               	subwf	_count1s,w
  1138  039A  1C03               	btfss	3,0
  1139  039B  2B95               	goto	l3479
  1140  039C  2B81               	goto	l3467
  1141  039D                     l3487:	
  1142                           ;main.c: 274: }
  1143                           ;main.c: 275: }
  1144                           ;main.c: 276: }
  1145                           
  1146                           
  1147                           ;main.c: 277: else if(workStep > 0)
  1148  039D  0879               	movf	_workStep,w
  1149  039E  1903               	btfsc	3,2
  1150  039F  2BA3               	goto	l3491
  1151                           
  1152                           ;main.c: 278: {
  1153                           ;main.c: 279: ledStep = workStep;
  1154  03A0  0879               	movf	_workStep,w
  1155  03A1  00F8               	movwf	_ledStep
  1156                           
  1157                           ;main.c: 280: }
  1158  03A2  0008               	return
  1159  03A3                     l3491:	
  1160                           
  1161                           ;main.c: 281: else if(chrgFlag)
  1162  03A3  087A               	movf	_chrgFlag,w
  1163  03A4  1903               	btfsc	3,2
  1164  03A5  2B81               	goto	l3467
  1165                           
  1166                           ;main.c: 282: {
  1167                           ;main.c: 283: if(count1s % 50 == 0)
  1168  03A6  3032               	movlw	50
  1169  03A7  00F3               	movwf	___lbmod@divisor
  1170  03A8  0854               	movf	_count1s,w
  1171  03A9  2570               	fcall	___lbmod
  1172  03AA  3A00               	xorlw	0
  1173  03AB  1D03               	skipz
  1174  03AC  0008               	return
  1175                           
  1176                           ;main.c: 284: {
  1177                           ;main.c: 285: if(++ledStep > 6)
  1178  03AD  3007               	movlw	7
  1179  03AE  0AF8               	incf	_ledStep,f
  1180  03AF  0278               	subwf	_ledStep,w
  1181  03B0  1C03               	skipc
  1182  03B1  0008               	return
  1183                           
  1184                           ;main.c: 286: {
  1185                           ;main.c: 287: ledStep = lockLedStep;
  1186  03B2  0842               	movf	_lockLedStep,w
  1187  03B3  00F8               	movwf	_ledStep
  1188  03B4  0008               	return
  1189  03B5                     __end_of_ledCtr:	
  1190                           
  1191                           	psect	text6
  1192  04EF                     __ptext6:	
  1193 ;; *************** function ___lwmod *****************
  1194 ;; Defined at:
  1195 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  divisor         2    3[COMMON] unsigned int 
  1198 ;;  dividend        2    5[COMMON] unsigned int 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  counter         1    0[BANK0 ] unsigned char 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  2    3[COMMON] unsigned int 
  1203 ;; Registers used:
  1204 ;;		wreg, status,2, status,0
  1205 ;; Tracked objects:
  1206 ;;		On entry : 100/0
  1207 ;;		On exit  : 100/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMMON   BANK0   BANK1
  1210 ;;      Params:         4       0       0
  1211 ;;      Locals:         0       1       0
  1212 ;;      Temps:          0       0       0
  1213 ;;      Totals:         4       1       0
  1214 ;;Total ram usage:        5 bytes
  1215 ;; Hardware stack levels used:    1
  1216 ;; Hardware stack levels required when called:    2
  1217 ;; This function calls:
  1218 ;;		Nothing
  1219 ;; This function is called by:
  1220 ;;		_ledCtr
  1221 ;; This function uses a non-reentrant model
  1222 ;;
  1223                           
  1224                           
  1225                           ;psect for function ___lwmod
  1226  04EF                     ___lwmod:	
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1230  04EF  0873               	movf	___lwmod@divisor,w
  1231  04F0  0474               	iorwf	___lwmod@divisor+1,w
  1232  04F1  1903               	btfsc	3,2
  1233  04F2  2D0E               	goto	l3121
  1234  04F3  01D7               	clrf	___lwmod@counter
  1235  04F4                     L1:	
  1236  04F4  0AD7               	incf	___lwmod@counter,f
  1237  04F5  1BF4               	btfsc	___lwmod@divisor+1,7
  1238  04F6  2CFB               	goto	l3113
  1239  04F7  1003               	clrc
  1240  04F8  0DF3               	rlf	___lwmod@divisor,f
  1241  04F9  0DF4               	rlf	___lwmod@divisor+1,f
  1242  04FA  2CF4               	goto	L1
  1243  04FB                     l3113:	
  1244  04FB  0874               	movf	___lwmod@divisor+1,w
  1245  04FC  0276               	subwf	___lwmod@dividend+1,w
  1246  04FD  1D03               	skipz
  1247  04FE  2D01               	goto	u3275
  1248  04FF  0873               	movf	___lwmod@divisor,w
  1249  0500  0275               	subwf	___lwmod@dividend,w
  1250  0501                     u3275:	
  1251  0501  1C03               	skipc
  1252  0502  2D0A               	goto	L2
  1253  0503  0873               	movf	___lwmod@divisor,w
  1254  0504  02F5               	subwf	___lwmod@dividend,f
  1255  0505  0874               	movf	___lwmod@divisor+1,w
  1256  0506  1C03               	skipc
  1257  0507  03F6               	decf	___lwmod@dividend+1,f
  1258  0508  02F6               	subwf	___lwmod@dividend+1,f
  1259  0509  1003               	clrc
  1260  050A                     L2:	
  1261  050A  0CF4               	rrf	___lwmod@divisor+1,f
  1262  050B  0CF3               	rrf	___lwmod@divisor,f
  1263  050C  0BD7               	decfsz	___lwmod@counter,f
  1264  050D  2CFB               	goto	l3113
  1265  050E                     l3121:	
  1266  050E  0876               	movf	___lwmod@dividend+1,w
  1267  050F  00F4               	movwf	?___lwmod+1
  1268  0510  0875               	movf	___lwmod@dividend,w
  1269  0511  00F3               	movwf	?___lwmod
  1270  0512  0008               	return
  1271  0513                     __end_of___lwmod:	
  1272                           
  1273                           	psect	text7
  1274  0570                     __ptext7:	
  1275 ;; *************** function ___lbmod *****************
  1276 ;; Defined at:
  1277 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  dividend        1    wreg     unsigned char 
  1280 ;;  divisor         1    3[COMMON] unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  dividend        1    0[BANK0 ] unsigned char 
  1283 ;;  rem             1    2[BANK0 ] unsigned char 
  1284 ;;  counter         1    1[BANK0 ] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      unsigned char 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0
  1289 ;; Tracked objects:
  1290 ;;		On entry : 100/0
  1291 ;;		On exit  : 100/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1
  1294 ;;      Params:         1       0       0
  1295 ;;      Locals:         0       3       0
  1296 ;;      Temps:          1       0       0
  1297 ;;      Totals:         2       3       0
  1298 ;;Total ram usage:        5 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_ledCtr
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           
  1309                           ;psect for function ___lbmod
  1310  0570                     ___lbmod:	
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1314                           ;___lbmod@dividend stored from wreg
  1315  0570  00D7               	movwf	___lbmod@dividend
  1316  0571  3008               	movlw	8
  1317  0572  00D8               	movwf	___lbmod@counter
  1318  0573  01D9               	clrf	___lbmod@rem
  1319  0574                     l3091:	
  1320  0574  0857               	movf	___lbmod@dividend,w
  1321  0575  00F4               	movwf	??___lbmod
  1322  0576  3007               	movlw	7
  1323  0577  1003               	clrc
  1324  0578                     L3:	
  1325  0578  0CF4               	rrf	??___lbmod,f
  1326  0579  3EFF               	addlw	-1
  1327  057A  1003               	clrc
  1328  057B  1D03               	skipz
  1329  057C  2D78               	goto	L3
  1330  057D  0D59               	rlf	___lbmod@rem,w
  1331  057E  0474               	iorwf	??___lbmod,w
  1332  057F  00D9               	movwf	___lbmod@rem
  1333  0580  1003               	clrc
  1334  0581  0DD7               	rlf	___lbmod@dividend,f
  1335  0582  0873               	movf	___lbmod@divisor,w
  1336  0583  0259               	subwf	___lbmod@rem,w
  1337  0584  1C03               	skipc
  1338  0585  2D88               	goto	l3099
  1339  0586  0873               	movf	___lbmod@divisor,w
  1340  0587  02D9               	subwf	___lbmod@rem,f
  1341  0588                     l3099:	
  1342  0588  0BD8               	decfsz	___lbmod@counter,f
  1343  0589  2D74               	goto	l3091
  1344  058A  0859               	movf	___lbmod@rem,w
  1345  058B  0008               	return
  1346  058C                     __end_of___lbmod:	
  1347                           
  1348                           	psect	text8
  1349  04BE                     __ptext8:	
  1350 ;; *************** function _keyCtr *****************
  1351 ;; Defined at:
  1352 ;;		line 497 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  kclick          1    4[COMMON] unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, status,2, status,0, pclath, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 100/0
  1363 ;;		On exit  : 100/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMMON   BANK0   BANK1
  1366 ;;      Params:         0       0       0
  1367 ;;      Locals:         1       0       0
  1368 ;;      Temps:          0       0       0
  1369 ;;      Totals:         1       0       0
  1370 ;;Total ram usage:        1 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    3
  1373 ;; This function calls:
  1374 ;;		_keyRead
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           
  1381                           ;psect for function _keyCtr
  1382  04BE                     _keyCtr:	
  1383                           
  1384                           ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1388  04BE  0906               	comf	6,w	;volatile
  1389  04BF  3904               	andlw	4
  1390  04C0  2535               	fcall	_keyRead
  1391  04C1  00F4               	movwf	keyCtr@kclick
  1392                           
  1393                           ;main.c: 500: if(kclick == 1)
  1394  04C2  0B74               	decfsz	keyCtr@kclick,w
  1395  04C3  2CE1               	goto	l2783
  1396                           
  1397                           ;main.c: 501: {
  1398                           ;main.c: 502: if(workStep > 0)
  1399  04C4  0879               	movf	_workStep,w
  1400  04C5  1903               	btfsc	3,2
  1401  04C6  2CCF               	goto	l2769
  1402                           
  1403                           ;main.c: 503: {
  1404                           ;main.c: 504: if(++workStep > 6)
  1405  04C7  3007               	movlw	7
  1406  04C8  0AF9               	incf	_workStep,f
  1407  04C9  0279               	subwf	_workStep,w
  1408  04CA  1C03               	skipc
  1409  04CB  0008               	return
  1410                           
  1411                           ;main.c: 505: {
  1412                           ;main.c: 506: workStep = 1;
  1413  04CC  01F9               	clrf	_workStep
  1414  04CD  0AF9               	incf	_workStep,f
  1415  04CE  0008               	return
  1416  04CF                     l2769:	
  1417                           
  1418                           ;main.c: 509: else if(overWorkTime > 0)
  1419  04CF  0824               	movf	_overWorkTime,w
  1420  04D0  0425               	iorwf	_overWorkTime+1,w
  1421  04D1  1903               	btfsc	3,2
  1422  04D2  2CD8               	goto	l2775
  1423                           
  1424                           ;main.c: 510: {
  1425                           ;main.c: 511: overWorkTime = 0;
  1426  04D3  01A4               	clrf	_overWorkTime
  1427  04D4  01A5               	clrf	_overWorkTime+1
  1428                           
  1429                           ;main.c: 512: workStep = preLedStep;
  1430  04D5  0838               	movf	_preLedStep,w
  1431  04D6  00F9               	movwf	_workStep
  1432                           
  1433                           ;main.c: 513: }
  1434  04D7  0008               	return
  1435  04D8                     l2775:	
  1436                           
  1437                           ;main.c: 514: else if(showBatTime > 0)
  1438  04D8  0841               	movf	_showBatTime,w
  1439  04D9  1903               	btfsc	3,2
  1440  04DA  2CDD               	goto	l2779
  1441  04DB                     l2777:	
  1442                           
  1443                           ;main.c: 515: {
  1444                           ;main.c: 516: showBatTime = 0;
  1445  04DB  01C1               	clrf	_showBatTime
  1446                           
  1447                           ;main.c: 517: }
  1448  04DC  0008               	return
  1449  04DD                     l2779:	
  1450                           
  1451                           ;main.c: 518: else
  1452                           ;main.c: 519: {
  1453                           ;main.c: 520: showBatTime = 200;
  1454  04DD  30C8               	movlw	200
  1455  04DE  00C1               	movwf	_showBatTime
  1456                           
  1457                           ;main.c: 521: count1s = 0;
  1458  04DF  01D4               	clrf	_count1s
  1459  04E0  0008               	return
  1460  04E1                     l2783:	
  1461                           
  1462                           ;main.c: 524: else if(kclick == 2)
  1463  04E1  3002               	movlw	2
  1464  04E2  0674               	xorwf	keyCtr@kclick,w
  1465  04E3  1D03               	btfss	3,2
  1466  04E4  0008               	return
  1467                           
  1468                           ;main.c: 525: {
  1469                           ;main.c: 526: if(workStep > 0)
  1470  04E5  0879               	movf	_workStep,w
  1471  04E6  1903               	btfsc	3,2
  1472  04E7  2CEA               	goto	l778
  1473                           
  1474                           ;main.c: 527: {
  1475                           ;main.c: 528: workStep = 0;
  1476  04E8  01F9               	clrf	_workStep
  1477                           
  1478                           ;main.c: 529: }
  1479  04E9  0008               	return
  1480  04EA                     l778:	
  1481  04EA  301E               	movlw	30
  1482                           
  1483                           ;main.c: 530: else
  1484                           ;main.c: 531: {
  1485                           ;main.c: 532: workStep = 1;
  1486  04EB  01F9               	clrf	_workStep
  1487  04EC  0AF9               	incf	_workStep,f
  1488                           
  1489                           ;main.c: 533: startTime = 30;
  1490  04ED  00C6               	movwf	_startTime
  1491  04EE  2CDB               	goto	l2777
  1492  04EF                     __end_of_keyCtr:	
  1493                           
  1494                           	psect	text9
  1495  0535                     __ptext9:	
  1496 ;; *************** function _keyRead *****************
  1497 ;; Defined at:
  1498 ;;		line 464 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;  keyStatus       1    wreg     unsigned char 
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  keyStatus       1    3[COMMON] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      unsigned char 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0
  1507 ;; Tracked objects:
  1508 ;;		On entry : 100/0
  1509 ;;		On exit  : 100/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0   BANK1
  1512 ;;      Params:         0       0       0
  1513 ;;      Locals:         1       0       0
  1514 ;;      Temps:          0       0       0
  1515 ;;      Totals:         1       0       0
  1516 ;;Total ram usage:        1 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    2
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_keyCtr
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           
  1527                           ;psect for function _keyRead
  1528  0535                     _keyRead:	
  1529                           
  1530                           ;incstack = 0
  1531                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1532                           ;keyRead@keyStatus stored from wreg
  1533  0535  00F3               	movwf	keyRead@keyStatus
  1534                           
  1535                           ;main.c: 466: if(keyStatus)
  1536  0536  0873               	movf	keyRead@keyStatus,w
  1537  0537  3064               	movlw	100
  1538  0538  1903               	btfsc	3,2
  1539  0539  2D47               	goto	L5
  1540                           
  1541                           ;main.c: 467: {
  1542                           ;main.c: 468: keyCount++;
  1543  053A  0ACC               	incf	_keyCount,f
  1544                           
  1545                           ;main.c: 469: if(keyCount >= 100)
  1546  053B  024C               	subwf	_keyCount,w
  1547  053C  1C03               	skipc
  1548  053D  3400               	retlw	0
  1549                           
  1550                           ;main.c: 470: {
  1551                           ;main.c: 471: keyCount = 100;
  1552  053E  3064               	movlw	100
  1553  053F  00CC               	movwf	_keyCount
  1554                           
  1555                           ;main.c: 472: if(!longPressFlag)
  1556  0540  084B               	movf	_longPressFlag,w
  1557  0541  1D03               	btfss	3,2
  1558  0542  3400               	retlw	0
  1559  0543  3002               	movlw	2
  1560                           
  1561                           ;main.c: 473: {
  1562                           ;main.c: 474: longPressFlag = 1;
  1563  0544  01CB               	clrf	_longPressFlag
  1564  0545  0ACB               	incf	_longPressFlag,f
  1565                           
  1566                           ;main.c: 475: return 2;
  1567  0546  0008               	return
  1568  0547                     L5:	
  1569                           ;main.c: 479: else
  1570                           ;main.c: 480: {
  1571                           ;main.c: 481: if(keyCount >= 100)
  1572                           
  1573  0547  024C               	subwf	_keyCount,w
  1574  0548  1C03               	skipc
  1575  0549  2D4D               	goto	l2205
  1576                           
  1577                           ;main.c: 482: {
  1578                           ;main.c: 483: keyCount = 0;
  1579  054A  01CC               	clrf	_keyCount
  1580                           
  1581                           ;main.c: 484: longPressFlag = 0;
  1582  054B  01CB               	clrf	_longPressFlag
  1583                           
  1584                           ;main.c: 485: return 0;
  1585  054C  3400               	retlw	0
  1586  054D                     l2205:	
  1587                           
  1588                           ;main.c: 487: else if(keyCount >= 6)
  1589  054D  3006               	movlw	6
  1590  054E  024C               	subwf	_keyCount,w
  1591                           
  1592                           ;main.c: 488: {
  1593                           ;main.c: 489: keyCount = 0;
  1594  054F  01CC               	clrf	_keyCount
  1595  0550  1803               	btfsc	3,0
  1596                           
  1597                           ;main.c: 490: return 1;
  1598  0551  3401               	retlw	1
  1599  0552  3400               	retlw	0
  1600  0553                     __end_of_keyRead:	
  1601                           ;main.c: 491: }
  1602                           ;main.c: 492: keyCount = 0;
  1603                           
  1604                           
  1605                           	psect	text10
  1606  0018                     __ptext10:	
  1607 ;; *************** function _chrgCtr *****************
  1608 ;; Defined at:
  1609 ;;		line 299 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 100/0
  1620 ;;		On exit  : 100/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1
  1623 ;;      Params:         0       0       0
  1624 ;;      Locals:         0       0       0
  1625 ;;      Temps:          0       2       0
  1626 ;;      Totals:         0       2       0
  1627 ;;Total ram usage:        2 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    3
  1630 ;; This function calls:
  1631 ;;		___lbdiv
  1632 ;;		_chrgPwmInit
  1633 ;;		_chrgPwmStop
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           
  1640                           ;psect for function _chrgCtr
  1641  0018                     _chrgCtr:	
  1642                           
  1643                           ;main.c: 301: if(PORTA & 0x02)
  1644                           
  1645                           ;incstack = 0
  1646                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1647  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1648  0019  1C86               	btfss	6,1	;volatile
  1649  001A  28F7               	goto	l3363
  1650                           
  1651                           ;main.c: 302: {
  1652                           ;main.c: 303: if(chrgFlag == 0)
  1653  001B  087A               	movf	_chrgFlag,w
  1654  001C  1D03               	btfss	3,2
  1655  001D  2824               	goto	l3239
  1656                           
  1657                           ;main.c: 304: {
  1658                           ;main.c: 305: chrgFlag = 1;
  1659  001E  01FA               	clrf	_chrgFlag
  1660  001F  0AFA               	incf	_chrgFlag,f
  1661                           
  1662                           ;main.c: 306: ledStep = 0;
  1663  0020  01F8               	clrf	_ledStep
  1664                           
  1665                           ;main.c: 307: chrgMaxDuty = 0;
  1666  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1667  0022  01BA               	clrf	_chrgMaxDuty
  1668                           
  1669                           ;main.c: 308: chrgPwmStop();
  1670  0023  25E2               	fcall	_chrgPwmStop
  1671  0024                     l3239:	
  1672                           
  1673                           ;main.c: 309: }
  1674                           ;main.c: 310: workStep = 0;
  1675  0024  01F9               	clrf	_workStep
  1676                           
  1677                           ;main.c: 311: lowBatFlag = 0;
  1678  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0026  01B7               	clrf	_lowBatFlag
  1680                           
  1681                           ;main.c: 312: if(prePwStep < pwStep)
  1682  0027  0844               	movf	_pwStep,w
  1683  0028  0277               	subwf	_prePwStep,w
  1684  0029  1803               	skipnc
  1685  002A  2834               	goto	l3251
  1686                           
  1687                           ;main.c: 313: {
  1688                           ;main.c: 314: if(++count50s > 2000)
  1689  002B  2116               	fcall	PL6	;call to abstracted procedure
  1690  002C  1903               	skipnz
  1691  002D  022A               	subwf	_count50s,w
  1692  002E  1C03               	skipc
  1693  002F  2836               	goto	l3253
  1694                           
  1695                           ;main.c: 315: {
  1696                           ;main.c: 316: count50s = 0;
  1697  0030  01AA               	clrf	_count50s
  1698  0031  01AB               	clrf	_count50s+1
  1699                           
  1700                           ;main.c: 317: prePwStep++;
  1701  0032  0AF7               	incf	_prePwStep,f
  1702  0033  2836               	goto	l3253
  1703  0034                     l3251:	
  1704                           
  1705                           ;main.c: 320: else
  1706                           ;main.c: 321: {
  1707                           ;main.c: 322: count50s = 0;
  1708  0034  01AA               	clrf	_count50s
  1709  0035  01AB               	clrf	_count50s+1
  1710  0036                     l3253:	
  1711                           
  1712                           ;main.c: 323: }
  1713                           ;main.c: 324: if(protectFlag)
  1714  0036  084F               	movf	_protectFlag,w
  1715  0037  1903               	btfsc	3,2
  1716  0038  2859               	goto	l3277
  1717                           
  1718                           ;main.c: 325: {
  1719                           ;main.c: 326: chrgPwmStop();
  1720  0039  25E2               	fcall	_chrgPwmStop
  1721                           
  1722                           ;main.c: 327: ledStep = 6;
  1723  003A  3006               	movlw	6
  1724  003B  00F8               	movwf	_ledStep
  1725                           
  1726                           ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
  1727  003C  3063               	movlw	99
  1728  003D  0277               	subwf	_prePwStep,w
  1729  003E  1803               	skipnc
  1730  003F  2857               	goto	l3273
  1731  0040  0B4F               	decfsz	_protectFlag,w
  1732  0041  2857               	goto	l3273
  1733                           
  1734                           ;main.c: 329: {
  1735                           ;main.c: 330: if(++reChrgCount > 250)
  1736  0042  30FB               	movlw	251
  1737  0043  0AC3               	incf	_reChrgCount,f
  1738  0044  0243               	subwf	_reChrgCount,w
  1739  0045  1C03               	skipc
  1740  0046  0008               	return
  1741  0047  300F               	movlw	15
  1742                           
  1743                           ;main.c: 331: {
  1744                           ;main.c: 332: reChrgCount = 0;
  1745  0048  01C3               	clrf	_reChrgCount
  1746                           
  1747                           ;main.c: 333: chrgFullFlag = 0;
  1748  0049  01D2               	clrf	_chrgFullFlag
  1749                           
  1750                           ;main.c: 334: protectFlag = 0;
  1751  004A  01CF               	clrf	_protectFlag
  1752                           
  1753                           ;main.c: 335: if(prePwStep > 14)
  1754  004B  0277               	subwf	_prePwStep,w
  1755  004C  1C03               	skipc
  1756  004D  2855               	goto	l3271
  1757                           
  1758                           ;main.c: 336: {
  1759                           ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
  1760  004E  300E               	movlw	14
  1761  004F  00F3               	movwf	___lbdiv@divisor
  1762  0050  0877               	movf	_prePwStep,w
  1763  0051  258C               	fcall	___lbdiv
  1764  0052  3EFF               	addlw	255
  1765  0053  00C2               	movwf	_lockLedStep
  1766                           
  1767                           ;main.c: 338: }
  1768  0054  0008               	return
  1769  0055                     l3271:	
  1770                           
  1771                           ;main.c: 339: else
  1772                           ;main.c: 340: {
  1773                           ;main.c: 341: lockLedStep = 0;
  1774  0055  01C2               	clrf	_lockLedStep
  1775  0056  0008               	return
  1776  0057                     l3273:	
  1777                           
  1778                           ;main.c: 345: else
  1779                           ;main.c: 346: {
  1780                           ;main.c: 347: reChrgCount = 0;
  1781  0057  01C3               	clrf	_reChrgCount
  1782  0058  0008               	return
  1783  0059                     l3277:	
  1784                           
  1785                           ;main.c: 350: }
  1786                           ;main.c: 351: if(batADValue < 1118)
  1787  0059  3004               	movlw	4
  1788  005A  022D               	subwf	_batADValue+1,w
  1789  005B  305E               	movlw	94
  1790  005C  1903               	skipnz
  1791  005D  022C               	subwf	_batADValue,w
  1792  005E  1803               	skipnc
  1793  005F  2863               	goto	l3283
  1794  0060  300F               	movlw	15
  1795                           
  1796                           ;main.c: 352: {
  1797                           ;main.c: 353: chrgMode = 0;
  1798  0061  01C0               	clrf	_chrgMode
  1799                           
  1800                           ;main.c: 354: chrgMaxAD = 15;
  1801  0062  287C               	goto	L6
  1802  0063                     l3283:	
  1803                           ;main.c: 355: }
  1804                           
  1805                           
  1806                           ;main.c: 356: else if(batADValue < 1530)
  1807  0063  3005               	movlw	5
  1808  0064  022D               	subwf	_batADValue+1,w
  1809  0065  30FA               	movlw	250
  1810  0066  1903               	skipnz
  1811  0067  022C               	subwf	_batADValue,w
  1812  0068  1803               	skipnc
  1813  0069  2870               	goto	l3291
  1814  006A  3028               	movlw	40
  1815                           
  1816                           ;main.c: 357: {
  1817                           ;main.c: 358: chrgMode = 1;
  1818  006B  01C0               	clrf	_chrgMode
  1819  006C  0AC0               	incf	_chrgMode,f
  1820                           
  1821                           ;main.c: 359: chrgMaxAD = 40;
  1822  006D  00BF               	movwf	_chrgMaxAD
  1823                           
  1824                           ;main.c: 360: lockCount = 0;
  1825  006E  01BE               	clrf	_lockCount
  1826                           
  1827                           ;main.c: 361: }
  1828  006F  287D               	goto	l3301
  1829  0070                     l3291:	
  1830                           
  1831                           ;main.c: 362: else if(count1s == 0)
  1832  0070  0854               	movf	_count1s,w
  1833  0071  1D03               	btfss	3,2
  1834  0072  287D               	goto	l3301
  1835                           
  1836                           ;main.c: 363: {
  1837                           ;main.c: 364: if(++lockCount > 200)
  1838  0073  30C9               	movlw	201
  1839  0074  0ABE               	incf	_lockCount,f
  1840  0075  023E               	subwf	_lockCount,w
  1841  0076  1C03               	skipc
  1842  0077  287B               	goto	l3299
  1843  0078  3002               	movlw	2
  1844                           
  1845                           ;main.c: 365: {
  1846                           ;main.c: 366: lockCount = 0;
  1847  0079  01BE               	clrf	_lockCount
  1848                           
  1849                           ;main.c: 367: chrgMode = 2;
  1850  007A  00C0               	movwf	_chrgMode
  1851  007B                     l3299:	
  1852                           
  1853                           ;main.c: 368: }
  1854                           ;main.c: 370: chrgMaxAD = 40;
  1855  007B  3028               	movlw	40
  1856  007C                     L6:	
  1857  007C  00BF               	movwf	_chrgMaxAD
  1858  007D                     l3301:	
  1859                           
  1860                           ;main.c: 371: }
  1861                           ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
  1862  007D  3002               	movlw	2
  1863  007E  0640               	xorwf	_chrgMode,w
  1864  007F  1D03               	btfss	3,2
  1865  0080  2897               	goto	l3311
  1866  0081  3000               	movlw	0
  1867  0082  022F               	subwf	_outADValue+1,w
  1868  0083  3005               	movlw	5
  1869  0084  1903               	skipnz
  1870  0085  022E               	subwf	_outADValue,w
  1871  0086  1803               	skipnc
  1872  0087  2897               	goto	l3311
  1873                           
  1874                           ;main.c: 373: {
  1875                           ;main.c: 374: if(++fullCount >= 200)
  1876  0088  0AA8               	incf	_fullCount,f
  1877  0089  1903               	skipnz
  1878  008A  0AA9               	incf	_fullCount+1,f
  1879  008B  3000               	movlw	0
  1880  008C  0229               	subwf	_fullCount+1,w
  1881  008D  30C8               	movlw	200
  1882  008E  1903               	skipnz
  1883  008F  0228               	subwf	_fullCount,w
  1884  0090  1C03               	skipc
  1885  0091  2899               	goto	l3313
  1886                           
  1887                           ;main.c: 375: {
  1888                           ;main.c: 376: fullCount = 0;
  1889  0092  01A8               	clrf	_fullCount
  1890  0093  01A9               	clrf	_fullCount+1
  1891                           
  1892                           ;main.c: 377: chrgFullFlag = 1;
  1893  0094  01D2               	clrf	_chrgFullFlag
  1894  0095  0AD2               	incf	_chrgFullFlag,f
  1895  0096  2899               	goto	l3313
  1896  0097                     l3311:	
  1897                           
  1898                           ;main.c: 380: else
  1899                           ;main.c: 381: {
  1900                           ;main.c: 382: fullCount = 0;
  1901  0097  01A8               	clrf	_fullCount
  1902  0098  01A9               	clrf	_fullCount+1
  1903  0099                     l3313:	
  1904                           
  1905                           ;main.c: 383: }
  1906                           ;main.c: 384: if(chrgFullFlag)
  1907  0099  0852               	movf	_chrgFullFlag,w
  1908  009A  1903               	btfsc	3,2
  1909  009B  289F               	goto	l3319
  1910                           
  1911                           ;main.c: 385: {
  1912                           ;main.c: 386: lockLedStep = 6;
  1913  009C  3006               	movlw	6
  1914  009D  00C2               	movwf	_lockLedStep
  1915                           
  1916                           ;main.c: 387: chrgPwmStop();
  1917  009E  2DE2               	ljmp	l2167
  1918  009F                     l3319:	
  1919                           ;main.c: 388: }
  1920                           
  1921                           
  1922                           ;main.c: 389: else
  1923                           ;main.c: 390: {
  1924                           ;main.c: 391: if(prePwStep < 15)
  1925  009F  300F               	movlw	15
  1926  00A0  0277               	subwf	_prePwStep,w
  1927  00A1  1803               	skipnc
  1928  00A2  28A5               	goto	l3323
  1929                           
  1930                           ;main.c: 392: {
  1931                           ;main.c: 393: lockLedStep = 0;
  1932  00A3  01C2               	clrf	_lockLedStep
  1933                           
  1934                           ;main.c: 394: }
  1935  00A4  28AB               	goto	l3325
  1936  00A5                     l3323:	
  1937                           
  1938                           ;main.c: 395: else
  1939                           ;main.c: 396: {
  1940                           ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
  1941  00A5  300E               	movlw	14
  1942  00A6  00F3               	movwf	___lbdiv@divisor
  1943  00A7  0877               	movf	_prePwStep,w
  1944  00A8  258C               	fcall	___lbdiv
  1945  00A9  3EFF               	addlw	255
  1946  00AA  00C2               	movwf	_lockLedStep
  1947  00AB                     l3325:	
  1948                           
  1949                           ;main.c: 398: }
  1950                           ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1951  00AB  3006               	movlw	6
  1952  00AC  022D               	subwf	_batADValue+1,w
  1953  00AD  300A               	movlw	10
  1954  00AE  1903               	skipnz
  1955  00AF  022C               	subwf	_batADValue,w
  1956  00B0  1803               	skipnc
  1957  00B1  28C1               	goto	l3329
  1958  00B2  083F               	movf	_chrgMaxAD,w
  1959  00B3  3E02               	addlw	2
  1960  00B4  00D7               	movwf	??_chrgCtr
  1961  00B5  3000               	movlw	0
  1962  00B6  1803               	skipnc
  1963  00B7  3001               	movlw	1
  1964  00B8  00D8               	movwf	??_chrgCtr+1
  1965  00B9  082F               	movf	_outADValue+1,w
  1966  00BA  0258               	subwf	??_chrgCtr+1,w
  1967  00BB  1D03               	skipz
  1968  00BC  28BF               	goto	u3725
  1969  00BD  082E               	movf	_outADValue,w
  1970  00BE  0257               	subwf	??_chrgCtr,w
  1971  00BF                     u3725:	
  1972  00BF  1803               	skipnc
  1973  00C0  28D0               	goto	l3341
  1974  00C1                     l3329:	
  1975                           
  1976                           ;main.c: 400: {
  1977                           ;main.c: 401: if(++subTime > chrgWaitTime)
  1978  00C1  0ABC               	incf	_subTime,f
  1979  00C2  083C               	movf	_subTime,w
  1980  00C3  023B               	subwf	_chrgWaitTime,w
  1981  00C4  1803               	skipnc
  1982  00C5  28CE               	goto	l3339
  1983                           
  1984                           ;main.c: 402: {
  1985                           ;main.c: 403: if(chrgMaxDuty > 1)
  1986  00C6  3002               	movlw	2
  1987  00C7  023A               	subwf	_chrgMaxDuty,w
  1988  00C8  1C03               	skipc
  1989  00C9  28CB               	goto	l3335
  1990                           
  1991                           ;main.c: 404: {
  1992                           ;main.c: 405: chrgMaxDuty--;
  1993  00CA  03BA               	decf	_chrgMaxDuty,f
  1994  00CB                     l3335:	
  1995  00CB  3032               	movlw	50
  1996                           
  1997                           ;main.c: 406: }
  1998                           ;main.c: 407: subTime = 0;
  1999  00CC  01BC               	clrf	_subTime
  2000                           
  2001                           ;main.c: 408: chrgWaitTime = 50;
  2002  00CD  00BB               	movwf	_chrgWaitTime
  2003  00CE                     l3339:	
  2004                           
  2005                           ;main.c: 409: }
  2006                           ;main.c: 410: addTime = 0;
  2007  00CE  01BD               	clrf	_addTime
  2008                           
  2009                           ;main.c: 411: }
  2010  00CF  28F0               	goto	l3355
  2011  00D0                     l3341:	
  2012                           
  2013                           ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  2014  00D0  3006               	movlw	6
  2015  00D1  022D               	subwf	_batADValue+1,w
  2016  00D2  3009               	movlw	9
  2017  00D3  1903               	skipnz
  2018  00D4  022C               	subwf	_batADValue,w
  2019  00D5  1803               	skipnc
  2020  00D6  28F0               	goto	l3355
  2021  00D7  083F               	movf	_chrgMaxAD,w
  2022  00D8  3EFC               	addlw	252
  2023  00D9  00D7               	movwf	??_chrgCtr
  2024  00DA  30FF               	movlw	255
  2025  00DB  1803               	skipnc
  2026  00DC  3000               	movlw	0
  2027  00DD  00D8               	movwf	??_chrgCtr+1
  2028  00DE  022F               	subwf	_outADValue+1,w
  2029  00DF  1D03               	skipz
  2030  00E0  28E3               	goto	u3765
  2031  00E1  0857               	movf	??_chrgCtr,w
  2032  00E2  022E               	subwf	_outADValue,w
  2033  00E3                     u3765:	
  2034  00E3  1803               	skipnc
  2035  00E4  28F0               	goto	l3355
  2036                           
  2037                           ;main.c: 413: {
  2038                           ;main.c: 414: if(++addTime > chrgWaitTime)
  2039  00E5  0ABD               	incf	_addTime,f
  2040  00E6  083D               	movf	_addTime,w
  2041  00E7  023B               	subwf	_chrgWaitTime,w
  2042  00E8  1803               	skipnc
  2043  00E9  28EF               	goto	l3353
  2044  00EA  304B               	movlw	75
  2045                           
  2046                           ;main.c: 415: {
  2047                           ;main.c: 416: addTime = 0;
  2048  00EB  01BD               	clrf	_addTime
  2049                           
  2050                           ;main.c: 417: if(chrgMaxDuty < 75)
  2051  00EC  023A               	subwf	_chrgMaxDuty,w
  2052  00ED  1C03               	btfss	3,0
  2053                           
  2054                           ;main.c: 418: {
  2055                           ;main.c: 419: chrgMaxDuty++;
  2056  00EE  0ABA               	incf	_chrgMaxDuty,f
  2057  00EF                     l3353:	
  2058                           
  2059                           ;main.c: 420: }
  2060                           ;main.c: 421: }
  2061                           ;main.c: 422: subTime = 0;
  2062  00EF  01BC               	clrf	_subTime
  2063  00F0                     l3355:	
  2064                           
  2065                           ;main.c: 423: }
  2066                           ;main.c: 426: if((PWMCON0 & 0x01) == 0)
  2067  00F0  1815               	btfsc	21,0	;volatile
  2068  00F1  28F3               	goto	l3359
  2069                           
  2070                           ;main.c: 427: {
  2071                           ;main.c: 428: chrgPwmInit();
  2072  00F2  25B5               	fcall	_chrgPwmInit
  2073  00F3                     l3359:	
  2074                           
  2075                           ;main.c: 429: }
  2076                           ;main.c: 430: PWMD01H = 0X00;
  2077  00F3  019E               	clrf	30	;volatile
  2078                           
  2079                           ;main.c: 431: PWMD0L = chrgMaxDuty;
  2080  00F4  083A               	movf	_chrgMaxDuty,w
  2081  00F5  0099               	movwf	25	;volatile
  2082  00F6  0008               	return
  2083  00F7                     l3363:	
  2084  00F7  3014               	movlw	20
  2085                           
  2086                           ;main.c: 437: chrgFlag = 0;
  2087  00F8  01FA               	clrf	_chrgFlag
  2088                           
  2089                           ;main.c: 438: chrgFullFlag = 0;
  2090  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  2091  00FA  01D2               	clrf	_chrgFullFlag
  2092                           
  2093                           ;main.c: 439: protectFlag = 0;
  2094  00FB  01CF               	clrf	_protectFlag
  2095                           
  2096                           ;main.c: 440: chrgMode = 0;
  2097  00FC  01C0               	clrf	_chrgMode
  2098                           
  2099                           ;main.c: 441: chrgMaxAD = 0;
  2100  00FD  01BF               	clrf	_chrgMaxAD
  2101                           
  2102                           ;main.c: 442: chrgMaxDuty = 0;
  2103  00FE  01BA               	clrf	_chrgMaxDuty
  2104                           
  2105                           ;main.c: 443: lockCount = 0;
  2106  00FF  01BE               	clrf	_lockCount
  2107                           
  2108                           ;main.c: 444: lockLedStep = 0;
  2109  0100  01C2               	clrf	_lockLedStep
  2110                           
  2111                           ;main.c: 445: chrgWaitTime = 20;
  2112  0101  00BB               	movwf	_chrgWaitTime
  2113                           
  2114                           ;main.c: 446: chrgPwmStop();
  2115  0102  25E2               	fcall	_chrgPwmStop
  2116                           
  2117                           ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
  2118  0103  0877               	movf	_prePwStep,w
  2119  0104  1903               	btfsc	3,2
  2120  0105  2913               	goto	l3379
  2121  0106  0877               	movf	_prePwStep,w
  2122  0107  0244               	subwf	_pwStep,w
  2123  0108  1803               	skipnc
  2124  0109  2913               	goto	l3379
  2125                           
  2126                           ;main.c: 448: {
  2127                           ;main.c: 449: if(++count50s > 2000)
  2128  010A  2116               	fcall	PL6	;call to abstracted procedure
  2129  010B  1903               	skipnz
  2130  010C  022A               	subwf	_count50s,w
  2131  010D  1C03               	skipc
  2132  010E  0008               	return
  2133                           
  2134                           ;main.c: 450: {
  2135                           ;main.c: 451: count50s = 0;
  2136  010F  01AA               	clrf	_count50s
  2137  0110  01AB               	clrf	_count50s+1
  2138                           
  2139                           ;main.c: 452: prePwStep--;
  2140  0111  03F7               	decf	_prePwStep,f
  2141  0112  0008               	return
  2142  0113                     l3379:	
  2143                           
  2144                           ;main.c: 455: else
  2145                           ;main.c: 456: {
  2146                           ;main.c: 457: count50s = 0;
  2147  0113  01AA               	clrf	_count50s
  2148  0114  01AB               	clrf	_count50s+1
  2149  0115  0008               	return
  2150  0116                     __end_of_chrgCtr:	
  2151  0116                     PL6:	
  2152  0116  0AAA               	incf	_count50s,f
  2153  0117  1903               	skipnz
  2154  0118  0AAB               	incf	_count50s+1,f
  2155  0119  3007               	movlw	7
  2156  011A  022B               	subwf	_count50s+1,w
  2157  011B  34D1               	retlw	209
  2158  011C                     __end_ofPL6:	
  2159                           
  2160                           	psect	text11
  2161  05E2                     __ptext11:	
  2162 ;; *************** function _chrgPwmStop *****************
  2163 ;; Defined at:
  2164 ;;		line 904 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		None
  2173 ;; Tracked objects:
  2174 ;;		On entry : 100/0
  2175 ;;		On exit  : 100/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1
  2178 ;;      Params:         0       0       0
  2179 ;;      Locals:         0       0       0
  2180 ;;      Temps:          0       0       0
  2181 ;;      Totals:         0       0       0
  2182 ;;Total ram usage:        0 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    2
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_chrgCtr
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function _chrgPwmStop
  2194  05E2                     _chrgPwmStop:	
  2195  05E2                     l2167:	
  2196                           ;incstack = 0
  2197                           ; Regs used in _chrgPwmStop: []
  2198                           
  2199                           
  2200                           ;main.c: 906: PWMCON0 &= 0xFE;
  2201  05E2  1015               	bcf	21,0	;volatile
  2202                           
  2203                           ;main.c: 907: RB0 = 0;
  2204  05E3  1006               	bcf	6,0	;volatile
  2205  05E4  0008               	return
  2206  05E5                     __end_of_chrgPwmStop:	
  2207                           
  2208                           	psect	text12
  2209  05B5                     __ptext12:	
  2210 ;; *************** function _chrgPwmInit *****************
  2211 ;; Defined at:
  2212 ;;		line 887 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      void 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2
  2221 ;; Tracked objects:
  2222 ;;		On entry : 100/0
  2223 ;;		On exit  : 100/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMMON   BANK0   BANK1
  2226 ;;      Params:         0       0       0
  2227 ;;      Locals:         0       0       0
  2228 ;;      Temps:          0       0       0
  2229 ;;      Totals:         0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    2
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_chrgCtr
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           
  2241                           ;psect for function _chrgPwmInit
  2242  05B5                     _chrgPwmInit:	
  2243                           
  2244                           ;main.c: 889: PWMCON1 = 0B00000000;
  2245                           
  2246                           ;incstack = 0
  2247                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2248                           
  2249                           ;main.c: 891: PWMTH = 0X00;
  2250                           
  2251                           ;main.c: 892: PWMTL = 100;
  2252                           
  2253                           ;main.c: 896: PWMD01H = 0;
  2254  05B5  25BC               	fcall	PL8	;call to abstracted procedure
  2255                           
  2256                           ;main.c: 897: PWMD0L = 1;
  2257  05B6  3001               	movlw	1
  2258  05B7  0099               	movwf	25	;volatile
  2259                           
  2260                           ;main.c: 898: PWM01DT = 0X00;
  2261  05B8  019F               	clrf	31	;volatile
  2262                           
  2263                           ;main.c: 900: PWMCON0 = 0X01;
  2264  05B9  0095               	movwf	21	;volatile
  2265                           
  2266                           ;main.c: 901: PWMCON2 =0X00;
  2267  05BA  019D               	clrf	29	;volatile
  2268  05BB  0008               	return
  2269  05BC                     __end_of_chrgPwmInit:	
  2270  05BC                     PL8:	
  2271  05BC  0196               	clrf	22	;volatile
  2272  05BD  0198               	clrf	24	;volatile
  2273  05BE  3064               	movlw	100
  2274  05BF  0097               	movwf	23	;volatile
  2275  05C0  019E               	clrf	30	;volatile
  2276  05C1  0008               	return
  2277  05C2                     __end_ofPL8:	
  2278                           
  2279                           	psect	text13
  2280  058C                     __ptext13:	
  2281 ;; *************** function ___lbdiv *****************
  2282 ;; Defined at:
  2283 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  dividend        1    wreg     unsigned char 
  2286 ;;  divisor         1    3[COMMON] unsigned char 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  dividend        1    4[COMMON] unsigned char 
  2289 ;;  quotient        1    6[COMMON] unsigned char 
  2290 ;;  counter         1    5[COMMON] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      unsigned char 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0
  2295 ;; Tracked objects:
  2296 ;;		On entry : 100/0
  2297 ;;		On exit  : 100/0
  2298 ;;		Unchanged: 100/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1
  2300 ;;      Params:         1       0       0
  2301 ;;      Locals:         3       0       0
  2302 ;;      Temps:          0       0       0
  2303 ;;      Totals:         4       0       0
  2304 ;;Total ram usage:        4 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    2
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_ledCtr
  2311 ;;		_chrgCtr
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function ___lbdiv
  2317  058C                     ___lbdiv:	
  2318                           
  2319                           ;incstack = 0
  2320                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2321                           ;___lbdiv@dividend stored from wreg
  2322  058C  00F4               	movwf	___lbdiv@dividend
  2323  058D  01F6               	clrf	___lbdiv@quotient
  2324  058E  0873               	movf	___lbdiv@divisor,w
  2325  058F  1903               	btfsc	3,2
  2326  0590  2DA5               	goto	l2337
  2327  0591  01F5               	clrf	___lbdiv@counter
  2328  0592                     l2323:	
  2329  0592  0AF5               	incf	___lbdiv@counter,f
  2330  0593  1BF3               	btfsc	___lbdiv@divisor,7
  2331  0594  2D98               	goto	l1159
  2332  0595  1003               	clrc
  2333  0596  0DF3               	rlf	___lbdiv@divisor,f
  2334  0597  2D92               	goto	l2323
  2335  0598                     l1159:	
  2336  0598  1003               	clrc
  2337  0599  0DF6               	rlf	___lbdiv@quotient,f
  2338  059A  0873               	movf	___lbdiv@divisor,w
  2339  059B  0274               	subwf	___lbdiv@dividend,w
  2340  059C  1C03               	skipc
  2341  059D  2DA2               	goto	L7
  2342  059E  0873               	movf	___lbdiv@divisor,w
  2343  059F  02F4               	subwf	___lbdiv@dividend,f
  2344  05A0  1476               	bsf	___lbdiv@quotient,0
  2345  05A1  1003               	clrc
  2346  05A2                     L7:	
  2347  05A2  0CF3               	rrf	___lbdiv@divisor,f
  2348  05A3  0BF5               	decfsz	___lbdiv@counter,f
  2349  05A4  2D98               	goto	l1159
  2350  05A5                     l2337:	
  2351  05A5  0876               	movf	___lbdiv@quotient,w
  2352  05A6  0008               	return
  2353  05A7                     __end_of___lbdiv:	
  2354                           
  2355                           	psect	text14
  2356  02B0                     __ptext14:	
  2357 ;; *************** function _checkOutA *****************
  2358 ;; Defined at:
  2359 ;;		line 580 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2364 ;;  maxtempV        1    0        unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0, pclath, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 100/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1
  2374 ;;      Params:         0       0       0
  2375 ;;      Locals:         0       2       0
  2376 ;;      Temps:          2       0       0
  2377 ;;      Totals:         2       2       0
  2378 ;;Total ram usage:        4 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    3
  2381 ;; This function calls:
  2382 ;;		_ADC_Sample
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _checkOutA
  2390  02B0                     _checkOutA:	
  2391                           
  2392                           ;main.c: 582: if(chrgFlag)
  2393                           
  2394                           ;incstack = 0
  2395                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2396  02B0  087A               	movf	_chrgFlag,w
  2397                           
  2398                           ;main.c: 583: {
  2399                           ;main.c: 584: test_adc = ADC_Sample(4, 5);
  2400  02B1  3005               	movlw	5
  2401  02B2  00F3               	movwf	ADC_Sample@adldo
  2402  02B3  1903               	btfsc	3,2
  2403  02B4  2AB7               	goto	L15
  2404  02B5  3004               	movlw	4
  2405  02B6  2AB8               	goto	L8
  2406  02B7                     L15:	
  2407                           ;main.c: 586: else
  2408                           ;main.c: 587: {
  2409                           ;main.c: 588: test_adc = ADC_Sample(0, 5);
  2410                           
  2411                           ;main.c: 585: }
  2412                           
  2413  02B7  3000               	movlw	0
  2414  02B8                     L8:	
  2415  02B8  211C               	fcall	_ADC_Sample
  2416  02B9  00D6               	movwf	_test_adc	;volatile
  2417                           
  2418                           ;main.c: 589: }
  2419                           ;main.c: 590: if (0xA5 == test_adc)
  2420  02BA  30A5               	movlw	165
  2421  02BB  0656               	xorwf	_test_adc,w	;volatile
  2422  02BC  1D03               	btfss	3,2
  2423  02BD  2B50               	goto	l3225
  2424                           
  2425                           ;main.c: 591: {
  2426                           ;main.c: 592: if(chrgFlag && adresult > 210)
  2427  02BE  087A               	movf	_chrgFlag,w
  2428  02BF  1903               	btfsc	3,2
  2429  02C0  2AD1               	goto	l3143
  2430  02C1  3000               	movlw	0
  2431  02C2  0235               	subwf	_adresult+1,w	;volatile
  2432  02C3  30D3               	movlw	211
  2433  02C4  1903               	skipnz
  2434  02C5  0234               	subwf	_adresult,w	;volatile
  2435  02C6  1C03               	skipc
  2436  02C7  2AD1               	goto	l3143
  2437                           
  2438                           ;main.c: 593: {
  2439                           ;main.c: 594: if(++overChrgTime > 10)
  2440  02C8  300B               	movlw	11
  2441  02C9  0AC5               	incf	_overChrgTime,f
  2442  02CA  0245               	subwf	_overChrgTime,w
  2443  02CB  1C03               	skipc
  2444  02CC  2AD2               	goto	l3145
  2445  02CD  3002               	movlw	2
  2446                           
  2447                           ;main.c: 595: {
  2448                           ;main.c: 596: overChrgTime = 0;
  2449  02CE  01C5               	clrf	_overChrgTime
  2450                           
  2451                           ;main.c: 597: protectFlag = 2;
  2452  02CF  00CF               	movwf	_protectFlag
  2453  02D0  2AD2               	goto	l3145
  2454  02D1                     l3143:	
  2455                           
  2456                           ;main.c: 601: else
  2457                           ;main.c: 602: {
  2458                           ;main.c: 603: overChrgTime = 0;
  2459  02D1  01C5               	clrf	_overChrgTime
  2460  02D2                     l3145:	
  2461                           
  2462                           ;main.c: 604: }
  2463                           ;main.c: 605: outADValue = adresult;
  2464  02D2  0835               	movf	_adresult+1,w	;volatile
  2465  02D3  00AF               	movwf	_outADValue+1
  2466  02D4  0834               	movf	_adresult,w	;volatile
  2467  02D5  00AE               	movwf	_outADValue
  2468                           
  2469                           ;main.c: 607: if(workStep && (outADValue > 220))
  2470  02D6  0879               	movf	_workStep,w
  2471  02D7  1903               	btfsc	3,2
  2472  02D8  2AE8               	goto	l3155
  2473  02D9  3000               	movlw	0
  2474  02DA  022F               	subwf	_outADValue+1,w
  2475  02DB  30DD               	movlw	221
  2476  02DC  1903               	skipnz
  2477  02DD  022E               	subwf	_outADValue,w
  2478  02DE  1C03               	skipc
  2479  02DF  2AE8               	goto	l3155
  2480                           
  2481                           ;main.c: 608: {
  2482                           ;main.c: 609: if(++workOverOutTime > 50)
  2483  02E0  3033               	movlw	51
  2484  02E1  0ACE               	incf	_workOverOutTime,f
  2485  02E2  024E               	subwf	_workOverOutTime,w
  2486  02E3  1C03               	skipc
  2487  02E4  2AE9               	goto	l3159
  2488                           
  2489                           ;main.c: 610: {
  2490                           ;main.c: 611: workOverOutTime = 0;
  2491  02E5  01CE               	clrf	_workOverOutTime
  2492                           
  2493                           ;main.c: 612: workStep = 0;
  2494  02E6  01F9               	clrf	_workStep
  2495  02E7  2AE9               	goto	l3159
  2496  02E8                     l3155:	
  2497                           
  2498                           ;main.c: 615: else
  2499                           ;main.c: 616: {
  2500                           ;main.c: 617: workOverOutTime = 0;
  2501  02E8  01CE               	clrf	_workOverOutTime
  2502  02E9                     l3159:	
  2503                           
  2504                           ;main.c: 620: if(workStep < 6 && outADValue > maxtempV)
  2505  02E9  3006               	movlw	6
  2506  02EA  0279               	subwf	_workStep,w
  2507  02EB  3000               	movlw	0
  2508  02EC  1803               	skipnc
  2509  02ED  2AFD               	goto	L16
  2510  02EE  022F               	subwf	_outADValue+1,w
  2511  02EF  3029               	movlw	41
  2512  02F0  1903               	skipnz
  2513  02F1  022E               	subwf	_outADValue,w
  2514  02F2  1C03               	skipc
  2515  02F3  2AFC               	goto	l3167
  2516  02F4                     l3163:	
  2517                           
  2518                           ;main.c: 621: {
  2519                           ;main.c: 622: if(++overCount > 5)
  2520  02F4  3006               	movlw	6
  2521  02F5  0AC9               	incf	_overCount,f
  2522  02F6  0249               	subwf	_overCount,w
  2523  02F7  1C03               	skipc
  2524  02F8  2B4C               	goto	l3221
  2525                           
  2526                           ;main.c: 623: {
  2527                           ;main.c: 624: overCount = 5;
  2528  02F9  3005               	movlw	5
  2529  02FA  00C9               	movwf	_overCount
  2530  02FB  2B4C               	goto	l3221
  2531  02FC                     l3167:	
  2532                           
  2533                           ;main.c: 627: else if(outADValue > (maxtempV+3))
  2534  02FC  3000               	movlw	0
  2535  02FD                     L16:	
  2536  02FD  022F               	subwf	_outADValue+1,w
  2537  02FE  302C               	movlw	44
  2538  02FF  1903               	skipnz
  2539  0300  022E               	subwf	_outADValue,w
  2540  0301  1803               	btfsc	3,0
  2541  0302  2AF4               	goto	l3163
  2542                           
  2543                           ;main.c: 634: else
  2544                           ;main.c: 635: {
  2545                           ;main.c: 636: unsigned char maxAout = 11;
  2546                           
  2547                           ;main.c: 628: {
  2548                           ;main.c: 629: if(++overCount > 5)
  2549  0303  300B               	movlw	11
  2550  0304  00E9               	movwf	checkOutA@maxAout
  2551                           
  2552                           ;main.c: 637: if(workStep == 1)
  2553  0305  0B79               	decfsz	_workStep,w
  2554  0306  2B09               	goto	l3179
  2555                           
  2556                           ;main.c: 638: {
  2557                           ;main.c: 639: maxAout = maxAout + 5;
  2558  0307  3005               	movlw	5
  2559  0308  2B26               	goto	L13
  2560  0309                     l3179:	
  2561                           ;main.c: 640: }
  2562                           
  2563                           
  2564                           ;main.c: 641: else if(workStep == 2)
  2565  0309  3002               	movlw	2
  2566  030A  0679               	xorwf	_workStep,w
  2567  030B  1D03               	btfss	3,2
  2568  030C  2B0F               	goto	l3183
  2569                           
  2570                           ;main.c: 642: {
  2571                           ;main.c: 643: maxAout = maxAout + 6;
  2572  030D  3006               	movlw	6
  2573  030E  2B26               	goto	L13
  2574  030F                     l3183:	
  2575                           ;main.c: 644: }
  2576                           
  2577                           
  2578                           ;main.c: 645: else if(workStep == 3)
  2579  030F  3003               	movlw	3
  2580  0310  0679               	xorwf	_workStep,w
  2581  0311  1D03               	btfss	3,2
  2582  0312  2B15               	goto	l3187
  2583                           
  2584                           ;main.c: 646: {
  2585                           ;main.c: 647: maxAout = maxAout + 7;
  2586  0313  3007               	movlw	7
  2587  0314  2B26               	goto	L13
  2588  0315                     l3187:	
  2589                           ;main.c: 648: }
  2590                           
  2591                           
  2592                           ;main.c: 649: else if(workStep == 4)
  2593  0315  3004               	movlw	4
  2594  0316  0679               	xorwf	_workStep,w
  2595  0317  1D03               	btfss	3,2
  2596  0318  2B1B               	goto	l3191
  2597                           
  2598                           ;main.c: 650: {
  2599                           ;main.c: 651: maxAout = maxAout + 8;
  2600  0319  3008               	movlw	8
  2601  031A  2B26               	goto	L13
  2602  031B                     l3191:	
  2603                           ;main.c: 652: }
  2604                           
  2605                           
  2606                           ;main.c: 653: else if(workStep == 5)
  2607  031B  3005               	movlw	5
  2608  031C  0679               	xorwf	_workStep,w
  2609  031D  1D03               	btfss	3,2
  2610  031E  2B21               	goto	l3195
  2611                           
  2612                           ;main.c: 654: {
  2613                           ;main.c: 655: maxAout = maxAout + 9;
  2614  031F  3009               	movlw	9
  2615  0320  2B26               	goto	L13
  2616  0321                     l3195:	
  2617                           ;main.c: 656: }
  2618                           
  2619                           
  2620                           ;main.c: 657: else if(workStep == 6)
  2621  0321  3006               	movlw	6
  2622  0322  0679               	xorwf	_workStep,w
  2623  0323  1D03               	btfss	3,2
  2624  0324  2B27               	goto	l810
  2625                           
  2626                           ;main.c: 658: {
  2627                           ;main.c: 659: maxAout = maxAout + 10;
  2628  0325  300A               	movlw	10
  2629  0326                     L13:	
  2630  0326  07E9               	addwf	checkOutA@maxAout,f
  2631  0327                     l810:	
  2632                           
  2633                           ;main.c: 660: }
  2634                           ;main.c: 661: if(overCount > 0)
  2635  0327  0849               	movf	_overCount,w
  2636  0328  1D03               	btfss	3,2
  2637                           
  2638                           ;main.c: 662: {
  2639                           ;main.c: 663: overCount--;
  2640  0329  03C9               	decf	_overCount,f
  2641                           
  2642                           ;main.c: 664: }
  2643                           ;main.c: 665: if(outADValue > maxAout)
  2644  032A  0869               	movf	checkOutA@maxAout,w
  2645  032B  00F4               	movwf	??_checkOutA
  2646  032C  01F5               	clrf	??_checkOutA+1
  2647  032D  082F               	movf	_outADValue+1,w
  2648  032E  0275               	subwf	??_checkOutA+1,w
  2649  032F  1D03               	skipz
  2650  0330  2B33               	goto	u3495
  2651  0331  082E               	movf	_outADValue,w
  2652  0332  0274               	subwf	??_checkOutA,w
  2653  0333                     u3495:	
  2654  0333  1803               	skipnc
  2655  0334  2B46               	goto	l3213
  2656                           
  2657                           ;main.c: 666: {
  2658                           ;main.c: 667: if(++addPowerCount > 3)
  2659  0335  3004               	movlw	4
  2660  0336  0AC8               	incf	_addPowerCount,f
  2661  0337  0248               	subwf	_addPowerCount,w
  2662  0338  1C03               	skipc
  2663  0339  2B4C               	goto	l3221
  2664                           
  2665                           ;main.c: 668: {
  2666                           ;main.c: 669: addPowerCount = 3;
  2667  033A  3003               	movlw	3
  2668  033B  00C8               	movwf	_addPowerCount
  2669                           
  2670                           ;main.c: 670: if(startTime == 0)
  2671  033C  0846               	movf	_startTime,w
  2672  033D  1D03               	btfss	3,2
  2673  033E  2B43               	goto	l3211
  2674                           
  2675                           ;main.c: 671: {
  2676                           ;main.c: 672: tempDuty = 87 + (workStep*2);
  2677  033F  1003               	clrc
  2678  0340  0D79               	rlf	_workStep,w
  2679  0341  3E57               	addlw	87
  2680  0342  2B44               	goto	L14
  2681  0343                     l3211:	
  2682                           ;main.c: 674: }
  2683                           
  2684                           
  2685                           ;main.c: 675: else
  2686                           ;main.c: 676: {
  2687                           ;main.c: 677: tempDuty = maxDuty;
  2688  0343  084A               	movf	_maxDuty,w
  2689  0344                     L14:	
  2690  0344  00C7               	movwf	_tempDuty
  2691  0345  2B4C               	goto	l3221
  2692  0346                     l3213:	
  2693                           
  2694                           ;main.c: 682: else
  2695                           ;main.c: 683: {
  2696                           ;main.c: 684: addPowerCount = 0;
  2697  0346  01C8               	clrf	_addPowerCount
  2698                           
  2699                           ;main.c: 685: if(tempDuty > maxDuty)
  2700  0347  0847               	movf	_tempDuty,w
  2701  0348  024A               	subwf	_maxDuty,w
  2702  0349  1803               	skipnc
  2703  034A  2B43               	goto	l3211
  2704                           
  2705                           ;main.c: 686: {
  2706                           ;main.c: 687: tempDuty--;
  2707  034B  03C7               	decf	_tempDuty,f
  2708  034C                     l3221:	
  2709                           ;main.c: 688: }
  2710                           
  2711                           
  2712                           ;main.c: 692: }
  2713                           ;main.c: 694: }
  2714                           ;main.c: 696: }
  2715                           ;main.c: 697: PWMD01H = 0X00;
  2716  034C  019E               	clrf	30	;volatile
  2717                           
  2718                           ;main.c: 698: PWMD1L = maxDuty;
  2719  034D  084A               	movf	_maxDuty,w
  2720  034E  009A               	movwf	26	;volatile
  2721                           
  2722                           ;main.c: 699: }
  2723  034F  0008               	return
  2724  0350                     l3225:	
  2725                           
  2726                           ;main.c: 700: else
  2727                           ;main.c: 701: {
  2728                           ;main.c: 702: ADCON0 = 0;
  2729  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2730  0351  0195               	clrf	21	;volatile
  2731                           
  2732                           ;main.c: 703: ADCON1 = 0;
  2733  0352  0196               	clrf	22	;volatile
  2734                           
  2735                           ;main.c: 704: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2736  0353  3085               	movlw	133
  2737  0354  00F4               	movwf	??_checkOutA
  2738  0355                     u4217:	
  2739  0355  0BF4               	decfsz	??_checkOutA,f
  2740  0356  2B55               	goto	u4217
  2741  0357  0008               	return
  2742  0358                     __end_of_checkOutA:	
  2743                           
  2744                           	psect	text15
  2745  0205                     __ptext15:	
  2746 ;; *************** function _checkBatAD *****************
  2747 ;; Defined at:
  2748 ;;		line 708 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;		None
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;		None
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0, pclath, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 100/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMMON   BANK0   BANK1
  2762 ;;      Params:         0       0       0
  2763 ;;      Locals:         0       0       0
  2764 ;;      Temps:          2       0       0
  2765 ;;      Totals:         2       0       0
  2766 ;;Total ram usage:        2 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    3
  2769 ;; This function calls:
  2770 ;;		_ADC_Sample
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function _checkBatAD
  2778  0205                     _checkBatAD:	
  2779                           
  2780                           ;main.c: 710: test_adc = ADC_Sample(2, 5);
  2781                           
  2782                           ;incstack = 0
  2783                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2784  0205  3005               	movlw	5
  2785  0206  00F3               	movwf	ADC_Sample@adldo
  2786  0207  3002               	movlw	2
  2787  0208  211C               	fcall	_ADC_Sample
  2788  0209  00D6               	movwf	_test_adc	;volatile
  2789                           
  2790                           ;main.c: 711: if (0xA5 == test_adc)
  2791  020A  30A5               	movlw	165
  2792  020B  0656               	xorwf	_test_adc,w	;volatile
  2793  020C  1D03               	btfss	3,2
  2794  020D  2A6D               	goto	l3421
  2795                           
  2796                           ;main.c: 712: {
  2797                           ;main.c: 713: batADValue = adresult;
  2798  020E  0835               	movf	_adresult+1,w	;volatile
  2799  020F  00AD               	movwf	_batADValue+1
  2800  0210  0834               	movf	_adresult,w	;volatile
  2801  0211  00AC               	movwf	_batADValue
  2802                           
  2803                           ;main.c: 714: if(batADValue < 1117)
  2804  0212  3004               	movlw	4
  2805  0213  022D               	subwf	_batADValue+1,w
  2806  0214  305D               	movlw	93
  2807  0215  1903               	skipnz
  2808  0216  022C               	subwf	_batADValue,w
  2809  0217  1803               	skipnc
  2810  0218  2A33               	goto	l3403
  2811                           
  2812                           ;main.c: 715: {
  2813                           ;main.c: 716: pwStep = 0;
  2814  0219  01C4               	clrf	_pwStep
  2815                           
  2816                           ;main.c: 717: if(++count8s > 800)
  2817  021A  0AA2               	incf	_count8s,f
  2818  021B  1903               	skipnz
  2819  021C  0AA3               	incf	_count8s+1,f
  2820  021D  3003               	movlw	3
  2821  021E  0223               	subwf	_count8s+1,w
  2822  021F  3021               	movlw	33
  2823  0220  1903               	skipnz
  2824  0221  0222               	subwf	_count8s,w
  2825  0222  1C03               	skipc
  2826  0223  2A60               	goto	l3415
  2827                           
  2828                           ;main.c: 718: {
  2829                           ;main.c: 719: count8s = 0;
  2830  0224  01A2               	clrf	_count8s
  2831  0225  01A3               	clrf	_count8s+1
  2832                           
  2833                           ;main.c: 720: lowBatFlag = 1;
  2834  0226  01B7               	clrf	_lowBatFlag
  2835  0227  0AB7               	incf	_lowBatFlag,f
  2836                           
  2837                           ;main.c: 721: if(workStep > 0)
  2838  0228  0879               	movf	_workStep,w
  2839  0229  1903               	btfsc	3,2
  2840  022A  2A30               	goto	l3399
  2841                           
  2842                           ;main.c: 722: {
  2843                           ;main.c: 723: overWorkTime = 120;
  2844  022B  3078               	movlw	120
  2845  022C  00A4               	movwf	_overWorkTime
  2846  022D  01A5               	clrf	_overWorkTime+1
  2847                           
  2848                           ;main.c: 724: preLedStep = workStep;
  2849  022E  0879               	movf	_workStep,w
  2850  022F  00B8               	movwf	_preLedStep
  2851  0230                     l3399:	
  2852                           
  2853                           ;main.c: 725: }
  2854                           ;main.c: 726: prePwStep = 0;
  2855  0230  01F7               	clrf	_prePwStep
  2856                           
  2857                           ;main.c: 727: workStep = 0;
  2858  0231  01F9               	clrf	_workStep
  2859  0232  2A60               	goto	l3415
  2860  0233                     l3403:	
  2861  0233  3005               	movlw	5
  2862                           
  2863                           ;main.c: 730: else
  2864                           ;main.c: 731: {
  2865                           ;main.c: 732: count8s = 0;
  2866  0234  01A2               	clrf	_count8s
  2867  0235  01A3               	clrf	_count8s+1
  2868                           
  2869                           ;main.c: 733: if(batADValue >= 1340)
  2870  0236  022D               	subwf	_batADValue+1,w
  2871  0237  303C               	movlw	60
  2872  0238  1903               	skipnz
  2873  0239  022C               	subwf	_batADValue,w
  2874                           
  2875                           ;main.c: 734: {
  2876                           ;main.c: 735: pwStep = ((batADValue - 1340) /2) + 13;
  2877  023A  082C               	movf	_batADValue,w
  2878  023B  1C03               	skipc
  2879  023C  2A4A               	goto	L18
  2880  023D  3EC4               	addlw	196
  2881  023E  00F4               	movwf	??_checkBatAD
  2882  023F  082D               	movf	_batADValue+1,w
  2883  0240  1803               	skipnc
  2884  0241  3E01               	addlw	1
  2885  0242  3EFA               	addlw	250
  2886  0243  00F5               	movwf	??_checkBatAD+1
  2887  0244  1003               	clrc
  2888  0245  0CF5               	rrf	??_checkBatAD+1,f
  2889  0246  0CF4               	rrf	??_checkBatAD,f
  2890  0247  0874               	movf	??_checkBatAD,w
  2891  0248  3E0D               	addlw	13
  2892  0249  2A59               	goto	L17
  2893  024A                     L18:	
  2894                           ;main.c: 737: else
  2895                           ;main.c: 738: {
  2896                           ;main.c: 739: pwStep = (batADValue - 1117) / 16;
  2897                           
  2898                           ;main.c: 736: }
  2899                           
  2900  024A  3EA3               	addlw	163
  2901  024B  00F4               	movwf	??_checkBatAD
  2902  024C  082D               	movf	_batADValue+1,w
  2903  024D  1803               	skipnc
  2904  024E  3E01               	addlw	1
  2905  024F  3EFB               	addlw	251
  2906  0250  00F5               	movwf	??_checkBatAD+1
  2907  0251  3004               	movlw	4
  2908  0252                     u3885:	
  2909  0252  1003               	clrc
  2910  0253  0CF5               	rrf	??_checkBatAD+1,f
  2911  0254  0CF4               	rrf	??_checkBatAD,f
  2912  0255  3EFF               	addlw	-1
  2913  0256  1D03               	skipz
  2914  0257  2A52               	goto	u3885
  2915  0258  0874               	movf	??_checkBatAD,w
  2916  0259                     L17:	
  2917  0259  00C4               	movwf	_pwStep
  2918                           
  2919                           ;main.c: 740: }
  2920                           ;main.c: 741: if(pwStep > 99)
  2921  025A  3064               	movlw	100
  2922  025B  0244               	subwf	_pwStep,w
  2923  025C  1C03               	skipc
  2924  025D  2A60               	goto	l3415
  2925                           
  2926                           ;main.c: 742: {
  2927                           ;main.c: 743: pwStep = 99;
  2928  025E  3063               	movlw	99
  2929  025F  00C4               	movwf	_pwStep
  2930  0260                     l3415:	
  2931                           
  2932                           ;main.c: 744: }
  2933                           ;main.c: 745: }
  2934                           ;main.c: 746: if(chrgFlag && batADValue > 1861)
  2935  0260  087A               	movf	_chrgFlag,w
  2936  0261  1903               	btfsc	3,2
  2937  0262  2A74               	goto	l3425
  2938  0263  3007               	movlw	7
  2939  0264  022D               	subwf	_batADValue+1,w
  2940  0265  3046               	movlw	70
  2941  0266  1903               	skipnz
  2942  0267  022C               	subwf	_batADValue,w
  2943  0268  1C03               	skipc
  2944  0269  2A74               	goto	l3425
  2945                           
  2946                           ;main.c: 747: {
  2947                           ;main.c: 748: protectFlag = 1;
  2948  026A  01CF               	clrf	_protectFlag
  2949  026B  0ACF               	incf	_protectFlag,f
  2950  026C  2A74               	goto	l3425
  2951  026D                     l3421:	
  2952                           
  2953                           ;main.c: 751: else
  2954                           ;main.c: 752: {
  2955                           ;main.c: 753: ADCON0 = 0;
  2956  026D  1683               	bsf	3,5	;RP0=1, select bank1
  2957  026E  0195               	clrf	21	;volatile
  2958                           
  2959                           ;main.c: 754: ADCON1 = 0;
  2960  026F  0196               	clrf	22	;volatile
  2961                           
  2962                           ;main.c: 755: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2963  0270  3085               	movlw	133
  2964  0271  00F4               	movwf	??_checkBatAD
  2965  0272                     u4227:	
  2966  0272  0BF4               	decfsz	??_checkBatAD,f
  2967  0273  2A72               	goto	u4227
  2968  0274                     l3425:	
  2969                           
  2970                           ;main.c: 756: }
  2971                           ;main.c: 757: test_adc = ADC_Sample(3, 5);
  2972  0274  3005               	movlw	5
  2973  0275  00F3               	movwf	ADC_Sample@adldo
  2974  0276  3003               	movlw	3
  2975  0277  211C               	fcall	_ADC_Sample
  2976  0278  00D6               	movwf	_test_adc	;volatile
  2977                           
  2978                           ;main.c: 758: if (0xA5 == test_adc)
  2979  0279  30A5               	movlw	165
  2980  027A  0656               	xorwf	_test_adc,w	;volatile
  2981  027B  1D03               	btfss	3,2
  2982  027C  2AA8               	goto	l3445
  2983                           
  2984                           ;main.c: 759: {
  2985                           ;main.c: 760: if(chrgFlag && adresult > 100)
  2986  027D  087A               	movf	_chrgFlag,w
  2987  027E  1903               	btfsc	3,2
  2988  027F  0008               	return
  2989  0280  3000               	movlw	0
  2990  0281  0235               	subwf	_adresult+1,w	;volatile
  2991  0282  3065               	movlw	101
  2992  0283  1903               	skipnz
  2993  0284  0234               	subwf	_adresult,w	;volatile
  2994  0285  1C03               	skipc
  2995  0286  0008               	return
  2996                           
  2997                           ;main.c: 761: {
  2998                           ;main.c: 763: if(adresult > 810 || (batADValue - adresult) > 810)
  2999  0287  3003               	movlw	3
  3000  0288  0235               	subwf	_adresult+1,w	;volatile
  3001  0289  302B               	movlw	43
  3002  028A  1903               	skipnz
  3003  028B  0234               	subwf	_adresult,w	;volatile
  3004  028C  1803               	skipnc
  3005  028D  2A9D               	goto	l3437
  3006  028E  0834               	movf	_adresult,w	;volatile
  3007  028F  022C               	subwf	_batADValue,w
  3008  0290  00F4               	movwf	??_checkBatAD
  3009  0291  0835               	movf	_adresult+1,w	;volatile
  3010  0292  1C03               	skipc
  3011  0293  0A35               	incf	_adresult+1,w	;volatile
  3012  0294  022D               	subwf	_batADValue+1,w
  3013  0295  00F5               	movwf	??_checkBatAD+1
  3014  0296  3003               	movlw	3
  3015  0297  0275               	subwf	??_checkBatAD+1,w
  3016  0298  302B               	movlw	43
  3017  0299  1903               	skipnz
  3018  029A  0274               	subwf	??_checkBatAD,w
  3019  029B  1C03               	skipc
  3020  029C  2AA6               	goto	l3443
  3021  029D                     l3437:	
  3022                           
  3023                           ;main.c: 764: {
  3024                           ;main.c: 766: if(++countHalfFull > 250)
  3025  029D  30FB               	movlw	251
  3026  029E  0AD0               	incf	_countHalfFull,f
  3027  029F  0250               	subwf	_countHalfFull,w
  3028  02A0  1C03               	skipc
  3029  02A1  0008               	return
  3030  02A2  3002               	movlw	2
  3031                           
  3032                           ;main.c: 767: {
  3033                           ;main.c: 768: countHalfFull = 0;
  3034  02A3  01D0               	clrf	_countHalfFull
  3035                           
  3036                           ;main.c: 769: protectFlag = 2;
  3037  02A4  00CF               	movwf	_protectFlag
  3038  02A5  0008               	return
  3039  02A6                     l3443:	
  3040                           
  3041                           ;main.c: 772: else
  3042                           ;main.c: 773: {
  3043                           ;main.c: 774: countHalfFull = 0;
  3044  02A6  01D0               	clrf	_countHalfFull
  3045                           
  3046                           ;main.c: 775: }
  3047                           ;main.c: 776: }
  3048                           ;main.c: 777: }
  3049  02A7  0008               	return
  3050  02A8                     l3445:	
  3051                           
  3052                           ;main.c: 778: else
  3053                           ;main.c: 779: {
  3054                           ;main.c: 780: ADCON0 = 0;
  3055  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  3056  02A9  0195               	clrf	21	;volatile
  3057                           
  3058                           ;main.c: 781: ADCON1 = 0;
  3059  02AA  0196               	clrf	22	;volatile
  3060                           
  3061                           ;main.c: 782: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3062  02AB  3085               	movlw	133
  3063  02AC  00F4               	movwf	??_checkBatAD
  3064  02AD                     u4237:	
  3065  02AD  0BF4               	decfsz	??_checkBatAD,f
  3066  02AE  2AAD               	goto	u4237
  3067  02AF  0008               	return
  3068  02B0                     __end_of_checkBatAD:	
  3069                           
  3070                           	psect	text16
  3071  011C                     __ptext16:	
  3072 ;; *************** function _ADC_Sample *****************
  3073 ;; Defined at:
  3074 ;;		line 1015 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  adch            1    wreg     unsigned char 
  3077 ;;  adldo           1    3[COMMON] unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  adch            1    5[BANK0 ] unsigned char 
  3080 ;;  j               1    4[BANK0 ] unsigned char 
  3081 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3082 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3083 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3084 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3085 ;;  i               1    6[BANK0 ] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      unsigned char 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 100/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1
  3095 ;;      Params:         1       0       0
  3096 ;;      Locals:         0      13       0
  3097 ;;      Temps:          0       4       0
  3098 ;;      Totals:         1      17       0
  3099 ;;Total ram usage:       18 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    2
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_checkOutA
  3106 ;;		_checkBatAD
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _ADC_Sample
  3112  011C                     _ADC_Sample:	
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3116                           ;ADC_Sample@adch stored from wreg
  3117  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3118  011D  00DC               	movwf	ADC_Sample@adch
  3119                           
  3120                           ;main.c: 1017: volatile unsigned long adsum = 0;
  3121                           
  3122                           ;main.c: 1018: volatile unsigned int admin = 0, admax = 0;
  3123  011E  21F7               	fcall	PL4	;call to abstracted procedure
  3124                           
  3125                           ;main.c: 1019: volatile unsigned int ad_temp = 0;
  3126  011F  01E6               	clrf	ADC_Sample@ad_temp	;volatile
  3127  0120  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3128                           
  3129                           ;main.c: 1021: if ((!LDO_EN) && (adldo & 0x04) )
  3130  0121  1683               	bsf	3,5	;RP0=1, select bank1
  3131  0122  1D16               	btfss	22,2	;volatile
  3132  0123  1D73               	btfss	ADC_Sample@adldo,2
  3133  0124  292E               	goto	l3025
  3134                           
  3135                           ;main.c: 1022: {
  3136                           ;main.c: 1024: ADCON1 = adldo;
  3137  0125  0873               	movf	ADC_Sample@adldo,w
  3138  0126  0096               	movwf	22	;volatile
  3139                           
  3140                           ;main.c: 1025: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3141  0127  3084               	movlw	132
  3142  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3143  0129  00D7               	movwf	??_ADC_Sample
  3144  012A                     u4247:	
  3145  012A  0BD7               	decfsz	??_ADC_Sample,f
  3146  012B  292A               	goto	u4247
  3147  012C  292D               	nop2
  3148                           
  3149                           ;main.c: 1026: }
  3150  012D  2930               	goto	l3027
  3151  012E                     l3025:	
  3152                           
  3153                           ;main.c: 1027: else
  3154                           ;main.c: 1028: ADCON1 = adldo;
  3155  012E  0873               	movf	ADC_Sample@adldo,w
  3156  012F  0096               	movwf	22	;volatile
  3157  0130                     l3027:	
  3158                           
  3159                           ;main.c: 1030: if(adch & 0x10)
  3160  0130  1283               	bcf	3,5	;RP0=0, select bank0
  3161  0131  1E5C               	btfss	ADC_Sample@adch,4
  3162  0132  2938               	goto	l3035
  3163                           
  3164                           ;main.c: 1031: {
  3165                           ;main.c: 1032: CHS4 = 1;
  3166  0133  1683               	bsf	3,5	;RP0=1, select bank1
  3167  0134  1716               	bsf	22,6	;volatile
  3168                           
  3169                           ;main.c: 1033: adch &= 0x0f;
  3170  0135  300F               	movlw	15
  3171  0136  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0137  05DC               	andwf	ADC_Sample@adch,f
  3173  0138                     l3035:	
  3174                           
  3175                           ;main.c: 1036: for (i = 0; i < 10; i++)
  3176  0138  01DD               	clrf	ADC_Sample@i
  3177  0139                     l3041:	
  3178                           
  3179                           ;main.c: 1037: {
  3180                           ;main.c: 1038: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3181  0139  085C               	movf	ADC_Sample@adch,w
  3182  013A  00D7               	movwf	??_ADC_Sample
  3183  013B  3001               	movlw	1
  3184  013C  1003               	clrc
  3185  013D                     L19:	
  3186  013D  0DD7               	rlf	??_ADC_Sample,f
  3187  013E  3EFF               	addlw	-1
  3188  013F  1003               	clrc
  3189  0140  1D03               	skipz
  3190  0141  293D               	goto	L19
  3191  0142  0D57               	rlf	??_ADC_Sample,w
  3192  0143  3841               	iorlw	65
  3193  0144  1683               	bsf	3,5	;RP0=1, select bank1
  3194  0145  0095               	movwf	21	;volatile
  3195  0146  0000               	nop	;# 
  3196  0147  0000               	nop	;# 
  3197  0148  0000               	nop	;# 
  3198  0149  0000               	nop	;# 
  3199                           
  3200                           ;main.c: 1043: GODONE = 1;
  3201  014A  1683               	bsf	3,5	;RP0=1, select bank1
  3202  014B  1495               	bsf	21,1	;volatile
  3203                           
  3204                           ;main.c: 1045: unsigned char j = 0;
  3205  014C  1283               	bcf	3,5	;RP0=0, select bank0
  3206  014D  01DB               	clrf	ADC_Sample@j
  3207  014E                     l882:	
  3208                           ;main.c: 1046: while (GODONE)
  3209                           
  3210  014E  1683               	bsf	3,5	;RP0=1, select bank1
  3211  014F  1C95               	btfss	21,1	;volatile
  3212  0150  2959               	goto	l3051
  3213                           
  3214                           ;main.c: 1047: {
  3215                           ;main.c: 1048: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3216  0151  2952               	nop2	;2 cycle nop
  3217  0152  2953               	nop2	;2 cycle nop
  3218  0153  2954               	nop2	;2 cycle nop
  3219  0154  2955               	nop2	;2 cycle nop
  3220                           
  3221                           ;main.c: 1050: if (0 == (--j))
  3222  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3223  0156  0BDB               	decfsz	ADC_Sample@j,f
  3224  0157  294E               	goto	l882
  3225                           
  3226                           ;main.c: 1051: return 0;
  3227  0158  3400               	retlw	0
  3228  0159                     l3051:	
  3229                           
  3230                           ;main.c: 1052: }
  3231                           ;main.c: 1054: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3232  0159  0819               	movf	25,w	;volatile
  3233  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3234  015B  00E6               	movwf	ADC_Sample@ad_temp	;volatile
  3235  015C  01E7               	clrf	ADC_Sample@ad_temp+1	;volatile
  3236  015D  0EE6               	swapf	ADC_Sample@ad_temp,f	;volatile
  3237  015E  0EE7               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3238  015F  30F0               	movlw	240
  3239  0160  05E7               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3240  0161  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3241  0162  390F               	andlw	15
  3242  0163  04E7               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3243  0164  30F0               	movlw	240
  3244  0165  05E6               	andwf	ADC_Sample@ad_temp,f	;volatile
  3245  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3246  0167  0E18               	swapf	24,w	;volatile
  3247  0168  390F               	andlw	15
  3248  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3249  016A  07E6               	addwf	ADC_Sample@ad_temp,f	;volatile
  3250  016B  1803               	skipnc
  3251  016C  0AE7               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3252                           
  3253                           ;main.c: 1056: if (0 == admax)
  3254  016D  0864               	movf	ADC_Sample@admax,w	;volatile
  3255  016E  0465               	iorwf	ADC_Sample@admax+1,w	;volatile
  3256  016F  1D03               	btfss	3,2
  3257  0170  2973               	goto	l3059
  3258                           
  3259                           ;main.c: 1057: {
  3260                           ;main.c: 1058: admax = ad_temp;
  3261  0171  2200               	fcall	PL10	;call to abstracted procedure
  3262  0172  2985               	goto	l3065
  3263  0173                     l3059:	
  3264                           ;main.c: 1060: }
  3265                           
  3266                           ;main.c: 1059: admin = ad_temp;
  3267                           
  3268                           
  3269                           ;main.c: 1061: else if (ad_temp > admax)
  3270  0173  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3271  0174  0265               	subwf	ADC_Sample@admax+1,w	;volatile
  3272  0175  1D03               	skipz
  3273  0176  2979               	goto	u3145
  3274  0177  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3275  0178  0264               	subwf	ADC_Sample@admax,w	;volatile
  3276  0179                     u3145:	
  3277  0179  1803               	skipnc
  3278  017A  297D               	goto	l3063
  3279                           
  3280                           ;main.c: 1062: admax = ad_temp;
  3281  017B  2200               	fcall	PL10	;call to abstracted procedure
  3282  017C  2989               	goto	l888
  3283  017D                     l3063:	
  3284                           
  3285                           ;main.c: 1063: else if (ad_temp < admin)
  3286  017D  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3287  017E  0267               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3288  017F  1D03               	skipz
  3289  0180  2983               	goto	u3155
  3290  0181  0862               	movf	ADC_Sample@admin,w	;volatile
  3291  0182  0266               	subwf	ADC_Sample@ad_temp,w	;volatile
  3292  0183                     u3155:	
  3293  0183  1803               	skipnc
  3294  0184  2989               	goto	l888
  3295  0185                     l3065:	
  3296                           
  3297                           ;main.c: 1064: admin = ad_temp;
  3298  0185  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3299  0186  00E3               	movwf	ADC_Sample@admin+1	;volatile
  3300  0187  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3301  0188  00E2               	movwf	ADC_Sample@admin	;volatile
  3302  0189                     l888:	
  3303                           
  3304                           ;main.c: 1066: adsum += ad_temp;
  3305  0189  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3306  018A  00D7               	movwf	??_ADC_Sample
  3307  018B  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3308  018C  00D8               	movwf	??_ADC_Sample+1
  3309  018D  01D9               	clrf	??_ADC_Sample+2
  3310  018E  01DA               	clrf	??_ADC_Sample+3
  3311  018F  0857               	movf	??_ADC_Sample,w
  3312  0190  07DE               	addwf	ADC_Sample@adsum,f	;volatile
  3313  0191  0858               	movf	??_ADC_Sample+1,w
  3314  0192  1103               	clrz
  3315  0193  1803               	skipnc
  3316  0194  3E01               	addlw	1
  3317  0195  1D03               	btfss	3,2
  3318  0196  07DF               	addwf	ADC_Sample@adsum+1,f	;volatile
  3319  0197  0859               	movf	??_ADC_Sample+2,w
  3320  0198  1103               	clrz
  3321  0199  1803               	skipnc
  3322  019A  3E01               	addlw	1
  3323  019B  1D03               	btfss	3,2
  3324  019C  07E0               	addwf	ADC_Sample@adsum+2,f	;volatile
  3325  019D  085A               	movf	??_ADC_Sample+3,w
  3326  019E  1103               	clrz
  3327  019F  1803               	skipnc
  3328  01A0  3E01               	addlw	1
  3329  01A1  1D03               	btfss	3,2
  3330  01A2  07E1               	addwf	ADC_Sample@adsum+3,f	;volatile
  3331  01A3  300A               	movlw	10
  3332  01A4  0ADD               	incf	ADC_Sample@i,f
  3333  01A5  025D               	subwf	ADC_Sample@i,w
  3334  01A6  1C03               	skipc
  3335  01A7  2939               	goto	l3041
  3336                           
  3337                           ;main.c: 1067: }
  3338                           ;main.c: 1068: adsum -= admax;
  3339  01A8  0864               	movf	ADC_Sample@admax,w	;volatile
  3340  01A9  00D7               	movwf	??_ADC_Sample
  3341  01AA  0865               	movf	ADC_Sample@admax+1,w	;volatile
  3342  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3343  01AC  1C03               	skipc
  3344  01AD  0F5A               	incfsz	??_ADC_Sample+3,w
  3345  01AE  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3346                           
  3347                           ;main.c: 1069: if (adsum >= admin)
  3348  01AF  0862               	movf	ADC_Sample@admin,w	;volatile
  3349  01B0  00D7               	movwf	??_ADC_Sample
  3350  01B1  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3351  01B2  00D8               	movwf	??_ADC_Sample+1
  3352  01B3  01D9               	clrf	??_ADC_Sample+2
  3353  01B4  01DA               	clrf	??_ADC_Sample+3
  3354  01B5  085A               	movf	??_ADC_Sample+3,w
  3355  01B6  0261               	subwf	ADC_Sample@adsum+3,w	;volatile
  3356  01B7  1D03               	skipz
  3357  01B8  29C3               	goto	u3195
  3358  01B9  0859               	movf	??_ADC_Sample+2,w
  3359  01BA  0260               	subwf	ADC_Sample@adsum+2,w	;volatile
  3360  01BB  1D03               	skipz
  3361  01BC  29C3               	goto	u3195
  3362  01BD  0858               	movf	??_ADC_Sample+1,w
  3363  01BE  025F               	subwf	ADC_Sample@adsum+1,w	;volatile
  3364  01BF  1D03               	skipz
  3365  01C0  29C3               	goto	u3195
  3366  01C1  0857               	movf	??_ADC_Sample,w
  3367  01C2  025E               	subwf	ADC_Sample@adsum,w	;volatile
  3368  01C3                     u3195:	
  3369  01C3  1C03               	skipc
  3370  01C4  29CD               	goto	l892
  3371                           
  3372                           ;main.c: 1070: adsum -= admin;
  3373  01C5  0862               	movf	ADC_Sample@admin,w	;volatile
  3374  01C6  00D7               	movwf	??_ADC_Sample
  3375  01C7  0863               	movf	ADC_Sample@admin+1,w	;volatile
  3376  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3377  01C9  1C03               	skipc
  3378  01CA  0F5A               	incfsz	??_ADC_Sample+3,w
  3379  01CB  02E1               	subwf	ADC_Sample@adsum+3,f	;volatile
  3380  01CC  29D1               	goto	l3075
  3381  01CD                     l892:	
  3382                           
  3383                           ;main.c: 1071: else
  3384                           ;main.c: 1072: adsum = 0;
  3385  01CD  01DE               	clrf	ADC_Sample@adsum	;volatile
  3386  01CE  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3387  01CF  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3388  01D0  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3389  01D1                     l3075:	
  3390                           
  3391                           ;main.c: 1074: adresult = adsum >> 3;
  3392  01D1  085E               	movf	ADC_Sample@adsum,w	;volatile
  3393  01D2  00D7               	movwf	??_ADC_Sample
  3394  01D3  085F               	movf	ADC_Sample@adsum+1,w	;volatile
  3395  01D4  00D8               	movwf	??_ADC_Sample+1
  3396  01D5  0860               	movf	ADC_Sample@adsum+2,w	;volatile
  3397  01D6  00D9               	movwf	??_ADC_Sample+2
  3398  01D7  0861               	movf	ADC_Sample@adsum+3,w	;volatile
  3399  01D8  00DA               	movwf	??_ADC_Sample+3
  3400  01D9  3003               	movlw	3
  3401  01DA                     u3215:	
  3402  01DA  1003               	clrc
  3403  01DB  0CDA               	rrf	??_ADC_Sample+3,f
  3404  01DC  0CD9               	rrf	??_ADC_Sample+2,f
  3405  01DD  0CD8               	rrf	??_ADC_Sample+1,f
  3406  01DE  0CD7               	rrf	??_ADC_Sample,f
  3407  01DF  3EFF               	addlw	-1
  3408  01E0  1D03               	skipz
  3409  01E1  29DA               	goto	u3215
  3410  01E2  0858               	movf	??_ADC_Sample+1,w
  3411  01E3  00B5               	movwf	_adresult+1	;volatile
  3412  01E4  0857               	movf	??_ADC_Sample,w
  3413  01E5  00B4               	movwf	_adresult	;volatile
  3414                           
  3415                           ;main.c: 1076: adsum = 0;
  3416                           
  3417                           ;main.c: 1077: admin = 0;
  3418                           
  3419                           ;main.c: 1078: admax = 0;
  3420  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3421                           
  3422                           ;main.c: 1079: return 0xA5;
  3423  01E7  34A5               	retlw	165
  3424  01E8                     __end_of_ADC_Sample:	
  3425  01E8                     PL2:	
  3426  01E8  00D8               	movwf	??_ADC_Sample+1
  3427  01E9  01D9               	clrf	??_ADC_Sample+2
  3428  01EA  01DA               	clrf	??_ADC_Sample+3
  3429  01EB  0857               	movf	??_ADC_Sample,w
  3430  01EC  02DE               	subwf	ADC_Sample@adsum,f	;volatile
  3431  01ED  0858               	movf	??_ADC_Sample+1,w
  3432  01EE  1C03               	skipc
  3433  01EF  0F58               	incfsz	??_ADC_Sample+1,w
  3434  01F0  02DF               	subwf	ADC_Sample@adsum+1,f	;volatile
  3435  01F1  0859               	movf	??_ADC_Sample+2,w
  3436  01F2  1C03               	skipc
  3437  01F3  0F59               	incfsz	??_ADC_Sample+2,w
  3438  01F4  02E0               	subwf	ADC_Sample@adsum+2,f	;volatile
  3439  01F5  085A               	movf	??_ADC_Sample+3,w
  3440  01F6  0008               	return
  3441  01F7                     __end_ofPL2:	
  3442  01F7                     PL4:	
  3443  01F7  01DE               	clrf	ADC_Sample@adsum	;volatile
  3444  01F8  01DF               	clrf	ADC_Sample@adsum+1	;volatile
  3445  01F9  01E0               	clrf	ADC_Sample@adsum+2	;volatile
  3446  01FA  01E1               	clrf	ADC_Sample@adsum+3	;volatile
  3447  01FB  01E2               	clrf	ADC_Sample@admin	;volatile
  3448  01FC  01E3               	clrf	ADC_Sample@admin+1	;volatile
  3449  01FD  01E4               	clrf	ADC_Sample@admax	;volatile
  3450  01FE  01E5               	clrf	ADC_Sample@admax+1	;volatile
  3451  01FF  0008               	return
  3452  0200                     __end_ofPL4:	
  3453  0200                     PL10:	
  3454  0200  0867               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3455  0201  00E5               	movwf	ADC_Sample@admax+1	;volatile
  3456  0202  0866               	movf	ADC_Sample@ad_temp,w	;volatile
  3457  0203  00E4               	movwf	ADC_Sample@admax	;volatile
  3458  0204  0008               	return
  3459  0205                     __end_ofPL10:	
  3460                           
  3461                           	psect	text17
  3462  0409                     __ptext17:	
  3463 ;; *************** function _Sleep_Mode *****************
  3464 ;; Defined at:
  3465 ;;		line 939 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0, pclath, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 100/0
  3476 ;;		On exit  : 100/100
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1
  3479 ;;      Params:         0       0       0
  3480 ;;      Locals:         0       0       0
  3481 ;;      Temps:          0       0       0
  3482 ;;      Totals:         0       0       0
  3483 ;;Total ram usage:        0 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    3
  3486 ;; This function calls:
  3487 ;;		_AD_Init
  3488 ;;		_Init_System
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _Sleep_Mode
  3496  0409                     _Sleep_Mode:	
  3497                           
  3498                           ;main.c: 941: INTCON = 0;
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3502  0409  018B               	clrf	11	;volatile
  3503                           
  3504                           ;main.c: 943: OPTION_REG = 0;
  3505  040A  0181               	clrf	1	;volatile
  3506                           
  3507                           ;main.c: 945: TRISA = 0x1F;
  3508  040B  301F               	movlw	31
  3509  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3510  040D  0085               	movwf	5	;volatile
  3511                           
  3512                           ;main.c: 946: WPUA = 0B00000000;
  3513  040E  0188               	clrf	8	;volatile
  3514                           
  3515                           ;main.c: 947: PORTA = 0x00;
  3516  040F  0186               	clrf	6	;volatile
  3517                           
  3518                           ;main.c: 948: TRISB = 0B00000100;
  3519  0410  3004               	movlw	4
  3520  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0412  0085               	movwf	5	;volatile
  3522                           
  3523                           ;main.c: 949: PORTB = 0B00000000;
  3524  0413  0186               	clrf	6	;volatile
  3525                           
  3526                           ;main.c: 950: WPUB = 0B00000100;
  3527  0414  0088               	movwf	8	;volatile
  3528                           
  3529                           ;main.c: 952: ADCON0 = 0;
  3530  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3531  0416  0195               	clrf	21	;volatile
  3532                           
  3533                           ;main.c: 953: ADCON1 = 0;
  3534  0417  0196               	clrf	22	;volatile
  3535                           
  3536                           ;main.c: 955: PWMCON0 = 0;
  3537  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3538  0419  0195               	clrf	21	;volatile
  3539                           
  3540                           ;main.c: 957: OSCCON = 0X70;
  3541  041A  3070               	movlw	112
  3542  041B  0094               	movwf	20	;volatile
  3543                           
  3544                           ;main.c: 959: IOCA = 0B00000010;
  3545  041C  3002               	movlw	2
  3546  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3547  041E  0089               	movwf	9	;volatile
  3548                           
  3549                           ;main.c: 960: IOCB = 0B00000100;
  3550  041F  3004               	movlw	4
  3551  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0421  0089               	movwf	9	;volatile
  3553                           
  3554                           ;main.c: 962: RAIE = 1;
  3555  0422  158E               	bsf	14,3	;volatile
  3556                           
  3557                           ;main.c: 963: PEIE = 1;
  3558  0423  170B               	bsf	11,6	;volatile
  3559                           
  3560                           ;main.c: 964: RBIE = 1;
  3561  0424  158B               	bsf	11,3	;volatile
  3562                           
  3563                           ;main.c: 965: GIE = 0;
  3564  0425  138B               	bcf	11,7	;volatile
  3565                           
  3566                           ;main.c: 967: PIE1 &= 0X08;
  3567  0426  3008               	movlw	8
  3568  0427  058E               	andwf	14,f	;volatile
  3569                           
  3570                           ;main.c: 968: PIR1 = 0;
  3571  0428  018D               	clrf	13	;volatile
  3572                           
  3573                           ;main.c: 969: INTCON &= 0XC8;
  3574  0429  30C8               	movlw	200
  3575  042A  058B               	andwf	11,f	;volatile
  3576                           
  3577                           ;main.c: 971: PORTA;
  3578  042B  1683               	bsf	3,5	;RP0=1, select bank1
  3579  042C  0806               	movf	6,w	;volatile
  3580                           
  3581                           ;main.c: 972: RAIF = 0;
  3582  042D  1283               	bcf	3,5	;RP0=0, select bank0
  3583  042E  118D               	bcf	13,3	;volatile
  3584                           
  3585                           ;main.c: 973: PORTB;
  3586  042F  0806               	movf	6,w	;volatile
  3587                           
  3588                           ;main.c: 974: RBIF = 0;
  3589  0430  100B               	bcf	11,0	;volatile
  3590  0431  0064               	clrwdt	;# 
  3591  0432  0063               	sleep	;# 
  3592  0433  0000               	nop	;# 
  3593  0434  0064               	clrwdt	;# 
  3594  0435  0000               	nop	;# 
  3595  0436  0000               	nop	;# 
  3596  0437  0000               	nop	;# 
  3597  0438  0000               	nop	;# 
  3598  0439  0000               	nop	;# 
  3599                           
  3600                           ;main.c: 986: if(RAIF) RAIF = 0;
  3601  043A  1283               	bcf	3,5	;RP0=0, select bank0
  3602  043B  198D               	btfsc	13,3	;volatile
  3603  043C  118D               	bcf	13,3	;volatile
  3604                           
  3605                           ;main.c: 987: if(RBIF) RBIF = 0;
  3606  043D  180B               	btfsc	11,0	;volatile
  3607  043E  100B               	bcf	11,0	;volatile
  3608                           
  3609                           ;main.c: 988: if(TMR2IF) TMR2IF = 0;
  3610  043F  188D               	btfsc	13,1	;volatile
  3611  0440  108D               	bcf	13,1	;volatile
  3612                           
  3613                           ;main.c: 989: IOCA = 0B00000000;
  3614  0441  1683               	bsf	3,5	;RP0=1, select bank1
  3615  0442  0189               	clrf	9	;volatile
  3616                           
  3617                           ;main.c: 990: IOCB = 0B00000000;
  3618  0443  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0444  0189               	clrf	9	;volatile
  3620                           
  3621                           ;main.c: 991: Init_System();
  3622  0445  2513               	fcall	_Init_System
  3623                           
  3624                           ;main.c: 992: AD_Init();
  3625  0446  2DD2               	ljmp	l2161
  3626  0447                     __end_of_Sleep_Mode:	
  3627                           
  3628                           	psect	text18
  3629  0513                     __ptext18:	
  3630 ;; *************** function _Init_System *****************
  3631 ;; Defined at:
  3632 ;;		line 795 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, status,2
  3641 ;; Tracked objects:
  3642 ;;		On entry : 100/0
  3643 ;;		On exit  : 100/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1
  3646 ;;      Params:         0       0       0
  3647 ;;      Locals:         0       0       0
  3648 ;;      Temps:          0       0       0
  3649 ;;      Totals:         0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    2
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;;		_Sleep_Mode
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _Init_System
  3663  0513                     _Init_System:	
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _Init_System: [wreg+status,2]
  3667  0513  0000               	nop	;# 
  3668  0514  0064               	clrwdt	;# 
  3669                           
  3670                           ;main.c: 799: OPTION_REG = 0;
  3671  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3672  0516  0181               	clrf	1	;volatile
  3673  0517  0064               	clrwdt	;# 
  3674                           
  3675                           ;main.c: 801: OSCCON = 0X72;
  3676  0518  3072               	movlw	114
  3677  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3678  051A  0094               	movwf	20	;volatile
  3679                           
  3680                           ;main.c: 803: WPUA = 0B00000000;
  3681  051B  1683               	bsf	3,5	;RP0=1, select bank1
  3682  051C  0188               	clrf	8	;volatile
  3683                           
  3684                           ;main.c: 804: WPDA = 0x02;
  3685  051D  3002               	movlw	2
  3686  051E  0087               	movwf	7	;volatile
  3687                           
  3688                           ;main.c: 805: WPUB = 0B00000100;
  3689  051F  3004               	movlw	4
  3690  0520  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0521  0088               	movwf	8	;volatile
  3692                           
  3693                           ;main.c: 807: TRISA = 0x1F;
  3694  0522  301F               	movlw	31
  3695  0523  1683               	bsf	3,5	;RP0=1, select bank1
  3696  0524  0085               	movwf	5	;volatile
  3697                           
  3698                           ;main.c: 808: TRISB = 0B00000100;
  3699  0525  3004               	movlw	4
  3700  0526  1283               	bcf	3,5	;RP0=0, select bank0
  3701  0527  0085               	movwf	5	;volatile
  3702                           
  3703                           ;main.c: 810: PORTA = 0X00;
  3704  0528  1683               	bsf	3,5	;RP0=1, select bank1
  3705  0529  0186               	clrf	6	;volatile
  3706                           
  3707                           ;main.c: 811: PORTB = 0X00;
  3708  052A  1283               	bcf	3,5	;RP0=0, select bank0
  3709  052B  0186               	clrf	6	;volatile
  3710                           
  3711                           ;main.c: 815: PR2 = 249;
  3712  052C  30F9               	movlw	249
  3713  052D  0091               	movwf	17	;volatile
  3714                           
  3715                           ;main.c: 816: TMR2IF = 0;
  3716  052E  108D               	bcf	13,1	;volatile
  3717                           
  3718                           ;main.c: 817: TMR2IE = 1;
  3719  052F  148E               	bsf	14,1	;volatile
  3720                           
  3721                           ;main.c: 819: T2CON = 0B00000100;
  3722  0530  3004               	movlw	4
  3723  0531  0093               	movwf	19	;volatile
  3724                           
  3725                           ;main.c: 820: INTCON = 0XC0;
  3726  0532  30C0               	movlw	192
  3727  0533  008B               	movwf	11	;volatile
  3728  0534  0008               	return
  3729  0535                     __end_of_Init_System:	
  3730                           
  3731                           	psect	text19
  3732  05D2                     __ptext19:	
  3733 ;; *************** function _AD_Init *****************
  3734 ;; Defined at:
  3735 ;;		line 832 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3736 ;; Parameters:    Size  Location     Type
  3737 ;;		None
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;		None
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  1    wreg      void 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2
  3744 ;; Tracked objects:
  3745 ;;		On entry : 100/0
  3746 ;;		On exit  : 100/100
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMMON   BANK0   BANK1
  3749 ;;      Params:         0       0       0
  3750 ;;      Locals:         0       0       0
  3751 ;;      Temps:          0       0       0
  3752 ;;      Totals:         0       0       0
  3753 ;;Total ram usage:        0 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; Hardware stack levels required when called:    2
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_main
  3760 ;;		_Sleep_Mode
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _AD_Init
  3766  05D2                     _AD_Init:	
  3767  05D2                     l2161:	
  3768                           ;incstack = 0
  3769                           ; Regs used in _AD_Init: [wreg+status,2]
  3770                           
  3771                           
  3772                           ;main.c: 865: ADCON0 = 0X41;
  3773  05D2  3041               	movlw	65
  3774  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  3775  05D4  0095               	movwf	21	;volatile
  3776                           
  3777                           ;main.c: 882: ADCON1 = 0;
  3778  05D5  0196               	clrf	22	;volatile
  3779                           
  3780                           ;main.c: 883: ANSEL0 = 0X1D;
  3781  05D6  301D               	movlw	29
  3782  05D7  0093               	movwf	19	;volatile
  3783  05D8  0008               	return
  3784  05D9                     __end_of_AD_Init:	
  3785                           
  3786                           	psect	text20
  3787  0553                     __ptext20:	
  3788 ;; *************** function _Isr_Timer *****************
  3789 ;; Defined at:
  3790 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 100/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1
  3804 ;;      Params:         0       0       0
  3805 ;;      Locals:         0       0       0
  3806 ;;      Temps:          3       0       0
  3807 ;;      Totals:         3       0       0
  3808 ;;Total ram usage:        3 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    1
  3811 ;; This function calls:
  3812 ;;		_ledShow
  3813 ;; This function is called by:
  3814 ;;		Interrupt level 1
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _Isr_Timer
  3820  0553                     _Isr_Timer:	
  3821                           
  3822                           ;main.c: 102: if(TMR2IF)
  3823  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0554  1C8D               	btfss	13,1	;volatile
  3825  0555  2D67               	goto	i1l656
  3826                           
  3827                           ;main.c: 103: {
  3828                           ;main.c: 104: TMR2IF = 0;
  3829  0556  108D               	bcf	13,1	;volatile
  3830                           
  3831                           ;main.c: 105: if(++intCount >= 160)
  3832  0557  30A0               	movlw	160
  3833  0558  0AD5               	incf	_intCount,f
  3834  0559  0255               	subwf	_intCount,w
  3835  055A  1C03               	skipc
  3836  055B  2D64               	goto	i1l2945
  3837  055C  3064               	movlw	100
  3838                           
  3839                           ;main.c: 106: {
  3840                           ;main.c: 107: intCount = 0;
  3841  055D  01D5               	clrf	_intCount
  3842                           
  3843                           ;main.c: 108: IntFlag = 1;
  3844  055E  01D3               	clrf	_IntFlag
  3845  055F  0AD3               	incf	_IntFlag,f
  3846                           
  3847                           ;main.c: 109: if(++count1s >= 100)
  3848  0560  0AD4               	incf	_count1s,f
  3849  0561  0254               	subwf	_count1s,w
  3850  0562  1803               	btfsc	3,0
  3851                           
  3852                           ;main.c: 110: {
  3853                           ;main.c: 111: count1s = 0;
  3854  0563  01D4               	clrf	_count1s
  3855  0564                     i1l2945:	
  3856                           
  3857                           ;main.c: 112: }
  3858                           ;main.c: 113: }
  3859                           ;main.c: 114: ledShow();
  3860  0564  23B5               	fcall	_ledShow
  3861                           
  3862                           ;main.c: 115: intCount10++;
  3863  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0566  0AD1               	incf	_intCount10,f
  3865  0567                     i1l656:	
  3866  0567  0872               	movf	??_Isr_Timer+2,w
  3867  0568  008A               	movwf	10
  3868  0569  0871               	movf	??_Isr_Timer+1,w
  3869  056A  0084               	movwf	4
  3870  056B  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3871  056C  0083               	movwf	3
  3872  056D  0EFE               	swapf	126,f
  3873  056E  0E7E               	swapf	126,w
  3874  056F  0009               	retfie
  3875  0570                     __end_of_Isr_Timer:	
  3876                           
  3877                           	psect	intentry
  3878  0004                     __pintentry:	
  3879                           ;incstack = 0
  3880                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3881                           
  3882  0004                     interrupt_function:	
  3883  007E                     saved_w	set	btemp
  3884  0004  00FE               	movwf	btemp
  3885  0005  0E03               	swapf	3,w
  3886  0006  00F0               	movwf	??_Isr_Timer
  3887  0007  0804               	movf	4,w
  3888  0008  00F1               	movwf	??_Isr_Timer+1
  3889  0009  080A               	movf	10,w
  3890  000A  00F2               	movwf	??_Isr_Timer+2
  3891  000B  2D53               	ljmp	_Isr_Timer
  3892                           
  3893                           	psect	text21
  3894  03B5                     __ptext21:	
  3895 ;; *************** function _ledShow *****************
  3896 ;; Defined at:
  3897 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14--¶Â×ªÉÁË¸10Ãë_²»¼ÓÁ¦\main.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 100/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1
  3911 ;;      Params:         0       0       0
  3912 ;;      Locals:         0       0       0
  3913 ;;      Temps:          0       0       0
  3914 ;;      Totals:         0       0       0
  3915 ;;Total ram usage:        0 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_Isr_Timer
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _ledShow
  3926  03B5                     _ledShow:	
  3927                           
  3928                           ;main.c: 165: if(++ledCntTime > 30)
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3932  03B5  301F               	movlw	31
  3933  03B6  0AB9               	incf	_ledCntTime,f
  3934  03B7  0239               	subwf	_ledCntTime,w
  3935  03B8  1C03               	skipc
  3936  03B9  0008               	return
  3937  03BA  3006               	movlw	6
  3938                           
  3939                           ;main.c: 166: {
  3940                           ;main.c: 167: ledCntTime = 0;
  3941  03BB  01B9               	clrf	_ledCntTime
  3942                           
  3943                           ;main.c: 168: if(++ledCnt > 5)
  3944  03BC  0ACD               	incf	_ledCnt,f
  3945  03BD  024D               	subwf	_ledCnt,w
  3946  03BE  1803               	btfsc	3,0
  3947                           
  3948                           ;main.c: 169: {
  3949                           ;main.c: 170: ledCnt = 0;
  3950  03BF  01CD               	clrf	_ledCnt
  3951                           
  3952                           ;main.c: 171: }
  3953                           ;main.c: 172: PORTA &= 0xDF;
  3954  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  3955  03C1  1286               	bcf	6,5	;volatile
  3956                           
  3957                           ;main.c: 173: PORTB &= 0xC7;
  3958  03C2  30C7               	movlw	199
  3959  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  3960  03C4  0586               	andwf	6,f	;volatile
  3961                           
  3962                           ;main.c: 174: TRISA |= 0x20;
  3963  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  3964  03C6  1685               	bsf	5,5	;volatile
  3965                           
  3966                           ;main.c: 175: TRISB |= 0x38;
  3967  03C7  3038               	movlw	56
  3968  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  3969  03C9  0485               	iorwf	5,f	;volatile
  3970                           
  3971                           ;main.c: 176: switch(ledCnt)
  3972  03CA  2BFD               	goto	i1l2429
  3973  03CB                     i1l2395:	
  3974                           
  3975                           ;main.c: 179: if(ledStep > 0)
  3976  03CB  0878               	movf	_ledStep,w
  3977  03CC  1903               	btfsc	3,2
  3978  03CD  0008               	return
  3979                           
  3980                           ;main.c: 180: {
  3981                           ;main.c: 181: TRISB &= 0xE7;
  3982  03CE  30E7               	movlw	231
  3983  03CF                     L20:	
  3984  03CF  0585               	andwf	5,f	;volatile
  3985                           
  3986                           ;main.c: 182: PORTB |= 0x10;
  3987  03D0  1606               	bsf	6,4	;volatile
  3988  03D1  0008               	return
  3989  03D2                     i1l2401:	
  3990                           
  3991                           ;main.c: 186: if(ledStep > 1)
  3992  03D2  3002               	movlw	2
  3993  03D3  0278               	subwf	_ledStep,w
  3994  03D4  1C03               	skipc
  3995  03D5  0008               	return
  3996                           
  3997                           ;main.c: 187: {
  3998                           ;main.c: 188: TRISB &= 0xCF;
  3999  03D6  30CF               	movlw	207
  4000  03D7  0585               	andwf	5,f	;volatile
  4001                           
  4002                           ;main.c: 189: PORTB |= 0x20;
  4003  03D8  1686               	bsf	6,5	;volatile
  4004  03D9  0008               	return
  4005  03DA                     i1l2407:	
  4006                           
  4007                           ;main.c: 193: if(ledStep > 2)
  4008  03DA  3003               	movlw	3
  4009  03DB  0278               	subwf	_ledStep,w
  4010  03DC  1C03               	skipc
  4011  03DD  0008               	return
  4012                           
  4013                           ;main.c: 194: {
  4014                           ;main.c: 195: TRISB &= 0xE7;
  4015  03DE  30E7               	movlw	231
  4016  03DF  0585               	andwf	5,f	;volatile
  4017                           
  4018                           ;main.c: 196: PORTB |= 0x08;
  4019  03E0  1586               	bsf	6,3	;volatile
  4020  03E1  0008               	return
  4021  03E2                     i1l2413:	
  4022                           
  4023                           ;main.c: 200: if(ledStep > 3)
  4024  03E2  3004               	movlw	4
  4025  03E3  0278               	subwf	_ledStep,w
  4026  03E4  1C03               	skipc
  4027  03E5  0008               	return
  4028                           
  4029                           ;main.c: 201: {
  4030                           ;main.c: 202: TRISB &= 0xCF;
  4031  03E6  30CF               	movlw	207
  4032  03E7  2BCF               	goto	L20
  4033  03E8                     i1l2419:	
  4034                           
  4035                           ;main.c: 207: if(ledStep > 4)
  4036  03E8  3005               	movlw	5
  4037  03E9  0278               	subwf	_ledStep,w
  4038  03EA  1C03               	skipc
  4039  03EB  0008               	return
  4040                           
  4041                           ;main.c: 208: {
  4042                           ;main.c: 209: TRISA &= 0xDF;
  4043  03EC  1683               	bsf	3,5	;RP0=1, select bank1
  4044  03ED  1285               	bcf	5,5	;volatile
  4045                           
  4046                           ;main.c: 210: TRISB &= 0xDF;
  4047  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  4048  03EF  1285               	bcf	5,5	;volatile
  4049                           
  4050                           ;main.c: 211: PORTB |= 0x20;
  4051  03F0  1686               	bsf	6,5	;volatile
  4052  03F1  0008               	return
  4053  03F2                     i1l2423:	
  4054                           
  4055                           ;main.c: 215: if(ledStep > 5)
  4056  03F2  3006               	movlw	6
  4057  03F3  0278               	subwf	_ledStep,w
  4058  03F4  1C03               	skipc
  4059  03F5  0008               	return
  4060                           
  4061                           ;main.c: 216: {
  4062                           ;main.c: 217: TRISA &= 0xDF;
  4063  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  4064  03F7  1285               	bcf	5,5	;volatile
  4065                           
  4066                           ;main.c: 218: TRISB &= 0xDF;
  4067  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  4068  03F9  1285               	bcf	5,5	;volatile
  4069                           
  4070                           ;main.c: 219: PORTA |= 0x20;
  4071  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  4072  03FB  1686               	bsf	6,5	;volatile
  4073  03FC  0008               	return
  4074  03FD                     i1l2429:	
  4075  03FD  084D               	movf	_ledCnt,w
  4076                           
  4077                           ; Switch size 1, requested type "space"
  4078                           ; Number of cases is 6, Range of values is 0 to 5
  4079                           ; switch strategies available:
  4080                           ; Name         Instructions Cycles
  4081                           ; direct_byte           12     6 (fixed)
  4082                           ; simple_byte           19    10 (average)
  4083                           ; jumptable            260     6 (fixed)
  4084                           ;	Chosen strategy is direct_byte
  4085  03FE  0084               	movwf	4
  4086  03FF  3006               	movlw	6
  4087  0400  0204               	subwf	4,w
  4088  0401  1803               	skipnc
  4089  0402  0008               	return
  4090  0403  3005               	movlw	high i1S3567
  4091  0404  008A               	movwf	10
  4092  0405  30D9               	movlw	low i1S3567
  4093  0406  0704               	addwf	4,w
  4094  0407  0082               	movwf	2
  4095  0408  0008               	return
  4096  0409                     __end_of_ledShow:	
  4097  007E                     btemp	set	126	;btemp
  4098  007E                     wtemp0	set	126
  4099                           
  4100                           	psect	swtext1
  4101  05D9                     __pswtext1:	
  4102  05D9                     i1S3567:	
  4103  05D9  2BF2               	ljmp	i1l2423
  4104  05DA  2BCB               	ljmp	i1l2395
  4105  05DB  2BD2               	ljmp	i1l2401
  4106  05DC  2BDA               	ljmp	i1l2407
  4107  05DD  2BE2               	ljmp	i1l2413
  4108  05DE  2BE8               	ljmp	i1l2419


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         59
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      75
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___bmul
    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3714
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     145
                             ___bmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     ___bmul
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4B       4       93.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      56       7        0.0%
DATA                 0      0      56       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Sep 25 13:17:39 2025

            _protectFlag 004F                        pc 0002           ___bmul@product 0074  
                     PL2 01E8                       PL4 01F7                       PL6 0116  
                     PL8 05BC                       fsr 0004                      PL10 0200  
                    l810 0327                      l661 0488                      l665 049F  
                    l785 0451                      l882 014E                      l778 04EA  
                    l892 01CD                      l888 0189                      _GIE 005F  
                    _RB0 0030                      _RB1 0031                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 05D9                     l2205 054D                     l1159 0598  
                   l2161 05D2                     l3041 0139                     l3025 012E  
                   l3113 04FB                     l3121 050E                     l2305 05A9  
                   l3051 0159                     l3035 0138                     l3027 0130  
                   l3211 0343                     l2323 0592                     l3213 0346  
                   l3221 034C                     l3301 007D                     l3063 017D  
                   l3143 02D1                     l2167 05E2                     l3311 0097  
                   l3065 0185                     l3145 02D2                     l3225 0350  
                   l2337 05A5                     l3313 0099                     l3075 01D1  
                   l3059 0173                     l3403 0233                     l3163 02F4  
                   l3155 02E8                     l3323 00A5                     l3251 0034  
                   l3091 0574                     l3421 026D                     l3341 00D0  
                   l3325 00AB                     l3253 0036                     l3415 0260  
                   l3191 031B                     l3183 030F                     l3167 02FC  
                   l3159 02E9                     l3335 00CB                     l3319 009F  
                   l3271 0055                     l3239 0024                     l3511 0490  
                   l3425 0274                     l3353 00EF                     l3329 00C1  
                   l3273 0057                     l3443 02A6                     l3195 0321  
                   l3187 0315                     l3179 0309                     l3355 00F0  
                   l3339 00CE                     l3291 0070                     l3283 0063  
                   l3363 00F7                     l3099 0588                     l3437 029D  
                   l3445 02A8                     l3277 0059                     l2813 046F  
                   l2821 047F                     l3359 00F3                     l2815 0471  
                   l3481 0398                     l3545 04BC                     l3379 0113  
                   l3299 007B                     l3491 03A3                     l3467 0381  
                   l3459 0365                     l3477 0391                     l3469 0383  
                   l3399 0230                     l2775 04D8                     l2783 04E1  
                   l3479 0395                     l3487 039D                     l2777 04DB  
                   l2769 04CF                     l2779 04DD                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u3215 01DA  
                   u3145 0179                     u3155 0183                     _PIE1 000E  
                   u4217 0355                     u3195 01C3                     u4227 0272  
                   u3275 0501                     u4237 02AD                     u4247 012A  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   u3725 00BF                     u3495 0333                     _RBIE 005B  
                   _RBIF 0058                     u3765 00E3                     _PIR1 000D  
                   u3885 0252                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 0483                     btemp 007E  
                   start 000C        ___bmul@multiplier 0075            ??_Init_System 0073  
                  ?_main 0070          __end_of___lbdiv 05A7          __end_of___lbmod 058C  
                  _T2CON 0013          __end_of___lwmod 0513                    i1l656 0567  
          _countHalfFull 0050                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 0116          __end_of_ledShow 0409  
        __end_of_keyRead 0553                    pclath 000A          __end_of_pwmInit 05D2  
        __end_of_pwmStop 05E2                    status 0003                    wtemp0 007E  
        __end_of_workCtr 0483          ___lbdiv@divisor 0073            _addPowerCount 0048  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 04BE  
   __size_of_chrgPwmInit 0007     __size_of_chrgPwmStop 0003                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 0535                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3567 05D9                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _GODONE 04A9  
                 i1l2401 03D2                   i1l2413 03E2                   i1l2423 03F2  
                 i1l2407 03DA                   i1l2419 03E8                   i1l2429 03FD  
                 i1l2395 03CB                   i1l2945 0564                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IE 0071  
                 _TMR2IF 0069                   _PWMD0L 0019                   _PWMD1L 001A  
           ??_ADC_Sample 0057             keyCtr@kclick 0074       __size_of_Isr_Timer 001D  
             _Sleep_Mode 0409                   ___bmul 05A7                ??___lbdiv 0074  
              ??___lbmod 0074                   _ledCnt 004D                   _ledCtr 0358  
              ??___lwmod 0077                   _keyCtr 04BE                ??_chrgCtr 0057  
                 _pwStep 0044                   _result 0032                ??_ledShow 0070  
              ??_keyRead 0073       __end_of_ADC_Sample 01E8                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0076  
       ___lbdiv@dividend 0074               _batADValue 002C          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0058      ___bmul@multiplicand 0073  
        _workOverOutTime 004E           __pcstackCOMMON 0070       __size_of_checkOutA 00A8  
            _Init_System 0513               __end_ofPL2 01F7               __end_ofPL4 0200  
             __end_ofPL6 011C               __end_ofPL8 05C2         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 0570               _checkBatAD 0205               __pbssBANK0 0020  
           _chrgFullFlag 0052              ?_Sleep_Mode 0070               __pmaintext 0483  
                ?___bmul 0073               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003B                  ?_keyCtr 0070               _ledCntTime 0039  
                _AD_Init 05D2                  _PWM01DT 001F                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 0358                  _IntFlag 0053               _intCount10 0051  
        ADC_Sample@adldo 0073          ADC_Sample@admax 0064          ADC_Sample@admin 0062  
        ADC_Sample@adsum 005E          __size_of___bmul 000E                  ___lbdiv 058C  
                ___lbmod 0570                  _addTime 003D                  ___lwmod 04EF  
        __size_of_ledCtr 005D          __size_of_keyCtr 0031                  _chrgCtr 0018  
             _lowBatFlag 0037                  __ptext1 0447                  __ptext2 05DF  
                __ptext3 05CA                  __ptext4 05A7                  __ptext5 0358  
                __ptext6 04EF                  __ptext7 0570                  __ptext8 04BE  
                __ptext9 0535                  _ledShow 03B5                  _ledStep 0078  
                _count1s 0054                  _count5s 0026                  _count8s 0022  
                _maxDuty 004A                  _keyRead 0535      __size_of_Sleep_Mode 003E  
                _pwmInit 05CA                  _subTime 003C              ?_checkBatAD 0070  
                _pwmStop 05DF               _preLedStep 0038                  clrloop0 05C3  
                _workCtr 0447               _outADValue 002E     end_of_initialization 0016  
          _longPressFlag 004B            ??_chrgPwmInit 0073            ??_chrgPwmStop 0073  
       ___lbmod@dividend 0057              ___lbmod@rem 0059      __size_of_checkBatAD 00AB  
         __end_of___bmul 05B5             ?_Init_System 0070           __end_of_ledCtr 03B5  
         __end_of_keyCtr 04EF      __end_of_chrgPwmInit 05BC      __end_of_chrgPwmStop 05E5  
            __end_ofPL10 0205      start_initialization 000D                _Isr_Timer 0553  
           ??_Sleep_Mode 0073                 ??___bmul 0074                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0066                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0057  
     __end_of_Sleep_Mode 0447               ?_Isr_Timer 0070                _checkOutA 02B0  
              __pnvBANK0 006A              _chrgMaxDuty 003A                _chrgMaxAD 003F  
            _chrgPwmInit 05B5                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 05E2                 ?___lwmod 0073                 ?_chrgCtr 0070  
              __pswtext1 05D9                _count900s 0020                 ?_ledShow 0070  
               ?_keyRead 0070                _firstTime 006A           ADC_Sample@adch 005C  
               ?_pwmInit 0070                _fullCount 0028             ??_checkBatAD 0074  
               ?_pwmStop 0070                _lockCount 003E                 ?_workCtr 0070  
            ADC_Sample@i 005D              ADC_Sample@j 005B        interrupt_function 0004  
             ?_checkOutA 0070                clear_ram0 05C2                _prePwStep 0077  
            _reChrgCount 0043                _sleepTime 0036                _overCount 0049  
     __end_of_checkBatAD 02B0     __size_of_Init_System 0022                _startTime 0046  
       __size_of_AD_Init 0007         keyRead@keyStatus 0073              ??_Isr_Timer 0070  
             _ADC_Sample 011C         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lwmod 0024              _lockLedStep 0042         __size_of_chrgCtr 00FE  
       __size_of_ledShow 0054         __size_of_keyRead 001E                 _adresult 0034  
               _chrgFlag 007A                 _chrgMode 0040                 __ptext10 0018  
               __ptext11 05E2                 __ptext20 0553                 __ptext12 05B5  
               __ptext21 03B5                 __ptext13 058C                 __ptext14 02B0  
               __ptext15 0205                 __ptext16 011C                 __ptext17 0409  
               __ptext18 0513                 __ptext19 05D2         __size_of_pwmInit 0008  
       __size_of_pwmStop 0003                 _count50s 002A         __size_of_workCtr 003C  
               _keyCount 004C                 _intCount 0055            __size_of_main 003B  
            ??_checkOutA 0074         checkOutA@maxAout 0069                 _tempDuty 0047  
               _test_adc 0056                 _power_ad 0030                 _workStep 0079  
           _overChrgTime 0045                 intlevel1 0000         ___lwmod@dividend 0075  
            ?_ADC_Sample 0073             ?_chrgPwmInit 0070             _overWorkTime 0024  
           ?_chrgPwmStop 0070              _showBatTime 0041               _OPTION_REG 0001  
        ___lwmod@divisor 0073          ___lwmod@counter 0057  
