

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 31 16:09:22 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	nvBANK0
    74  006E                     __pnvBANK0:	
    75  006E                     _firstTime:	
    76  006E                     	ds	1
    77  001D                     _PWMCON2	set	29
    78  0018                     _PWMTH	set	24
    79  0017                     _PWMTL	set	23
    80  0016                     _PWMCON1	set	22
    81  0015                     _PWMCON0	set	21
    82  0014                     _OSCCON	set	20
    83  0013                     _T2CON	set	19
    84  0011                     _PR2	set	17
    85  000E                     _PIE1	set	14
    86  000D                     _PIR1	set	13
    87  000B                     _INTCON	set	11
    88  0009                     _IOCB	set	9
    89  0008                     _WPUB	set	8
    90  0006                     _PORTB	set	6
    91  0005                     _TRISB	set	5
    92  0001                     _OPTION_REG	set	1
    93  0071                     _TMR2IE	set	113
    94  0073                     _RAIE	set	115
    95  0069                     _TMR2IF	set	105
    96  006B                     _RAIF	set	107
    97  0058                     _RBIF	set	88
    98  005B                     _RBIE	set	91
    99  005E                     _PEIE	set	94
   100  005F                     _GIE	set	95
   101  0030                     _RB0	set	48
   102  0031                     _RB1	set	49
   103  0033                     _RB3	set	51
   104  0034                     _RB4	set	52
   105  0035                     _RB5	set	53
   106  009E                     _PWMD23H	set	158
   107  009D                     _PWM23DT	set	157
   108  009C                     _PWMD3L	set	156
   109  009B                     _PWMD2L	set	155
   110  0099                     _ADRESH	set	153
   111  0098                     _ADRESL	set	152
   112  0096                     _ADCON1	set	150
   113  0095                     _ADCON0	set	149
   114  0094                     _ANSEL1	set	148
   115  0093                     _ANSEL0	set	147
   116  0089                     _IOCA	set	137
   117  0088                     _WPUA	set	136
   118  0087                     _WPDA	set	135
   119  0086                     _PORTA	set	134
   120  0085                     _TRISA	set	133
   121  04B2                     _LDO_EN	set	1202
   122  04B6                     _CHS4	set	1206
   123  04A9                     _GODONE	set	1193
   124                           
   125                           	psect	cinit
   126  000D                     start_initialization:	
   127                           ; #config settings
   128                           
   129  000D                     __initialization:	
   130                           
   131                           ; Clear objects allocated to COMMON
   132  000D  3077               	movlw	low __pbssCOMMON
   133  000E  0084               	movwf	4
   134  000F  307B               	movlw	low (__pbssCOMMON+4)
   135  0010  25C4               	fcall	clear_ram0
   136  0011  3020               	movlw	low __pbssBANK0
   137                           
   138                           ; Clear objects allocated to BANK0
   139  0012  1383               	bcf	3,7	;select IRP bank0
   140  0013  0084               	movwf	4
   141  0014  3059               	movlw	low (__pbssBANK0+57)
   142  0015  25C4               	fcall	clear_ram0
   143  0016                     end_of_initialization:	
   144                           ;End of C runtime variable initialization code
   145                           
   146  0016                     __end_of__initialization:	
   147  0016  0183               	clrf	3
   148  0017  2C4D               	ljmp	_main	;jump to C main() function
   149                           
   150                           	psect	bssCOMMON
   151  0077                     __pbssCOMMON:	
   152  0077                     _batADValue:	
   153  0077                     	ds	2
   154  0079                     _prePwStep:	
   155  0079                     	ds	1
   156  007A                     _workStep:	
   157  007A                     	ds	1
   158                           
   159                           	psect	bssBANK0
   160  0020                     __pbssBANK0:	
   161  0020                     _count900s:	
   162  0020                     	ds	2
   163  0022                     _count8s:	
   164  0022                     	ds	2
   165  0024                     _overWorkTime:	
   166  0024                     	ds	2
   167  0026                     _count5s:	
   168  0026                     	ds	2
   169  0028                     _fullCount:	
   170  0028                     	ds	2
   171  002A                     _count50s:	
   172  002A                     	ds	2
   173  002C                     _outADValue:	
   174  002C                     	ds	2
   175  002E                     _power_ad:	
   176  002E                     	ds	2
   177  0030                     _result:	
   178  0030                     	ds	2
   179  0032                     _adresult:	
   180  0032                     	ds	2
   181  0034                     _motorPwmFlag:	
   182  0034                     	ds	1
   183  0035                     _chrgPwmFlag:	
   184  0035                     	ds	1
   185  0036                     _preWorkStep:	
   186  0036                     	ds	1
   187  0037                     _jrStep:	
   188  0037                     	ds	1
   189  0038                     _sleepTime:	
   190  0038                     	ds	1
   191  0039                     _lowBatFlag:	
   192  0039                     	ds	1
   193  003A                     _ledCntTime:	
   194  003A                     	ds	1
   195  003B                     _chrgMaxDuty:	
   196  003B                     	ds	1
   197  003C                     _chrgWaitTime:	
   198  003C                     	ds	1
   199  003D                     _subTime:	
   200  003D                     	ds	1
   201  003E                     _addTime:	
   202  003E                     	ds	1
   203  003F                     _lockCount:	
   204  003F                     	ds	1
   205  0040                     _chrgMaxAD:	
   206  0040                     	ds	1
   207  0041                     _chrgMode:	
   208  0041                     	ds	1
   209  0042                     _showBatTime:	
   210  0042                     	ds	1
   211  0043                     _lockLedStep:	
   212  0043                     	ds	1
   213  0044                     _reChrgCount:	
   214  0044                     	ds	1
   215  0045                     _pwStep:	
   216  0045                     	ds	1
   217  0046                     _overChrgTime:	
   218  0046                     	ds	1
   219  0047                     _startTime:	
   220  0047                     	ds	1
   221  0048                     _tempDuty:	
   222  0048                     	ds	1
   223  0049                     _overCount:	
   224  0049                     	ds	1
   225  004A                     _maxDuty:	
   226  004A                     	ds	1
   227  004B                     _longPressFlag:	
   228  004B                     	ds	1
   229  004C                     _keyCount:	
   230  004C                     	ds	1
   231  004D                     _ledStep:	
   232  004D                     	ds	1
   233  004E                     _ledCnt:	
   234  004E                     	ds	1
   235  004F                     _workOverOutTime:	
   236  004F                     	ds	1
   237  0050                     _protectFlag:	
   238  0050                     	ds	1
   239  0051                     _countHalfFull:	
   240  0051                     	ds	1
   241  0052                     _intCount10:	
   242  0052                     	ds	1
   243  0053                     _chrgFullFlag:	
   244  0053                     	ds	1
   245  0054                     _chrgFlag:	
   246  0054                     	ds	1
   247  0055                     _IntFlag:	
   248  0055                     	ds	1
   249  0056                     _count1s:	
   250  0056                     	ds	1
   251  0057                     _intCount:	
   252  0057                     	ds	1
   253  0058                     _test_adc:	
   254  0058                     	ds	1
   255                           
   256                           	psect	clrtext
   257  05C4                     clear_ram0:	
   258                           ;	Called with FSR containing the base address, and
   259                           ;	W with the last address+1
   260                           
   261  05C4  0064               	clrwdt	;clear the watchdog before getting into this loop
   262  05C5                     clrloop0:	
   263  05C5  0180               	clrf	0	;clear RAM location pointed to by FSR
   264  05C6  0A84               	incf	4,f	;increment pointer
   265  05C7  0604               	xorwf	4,w	;XOR with final address
   266  05C8  1903               	btfsc	3,2	;have we reached the end yet?
   267  05C9  3400               	retlw	0	;all done for this memory range, return
   268  05CA  0604               	xorwf	4,w	;XOR again to restore value
   269  05CB  2DC5               	goto	clrloop0	;do the next byte
   270                           
   271                           	psect	cstackCOMMON
   272  0070                     __pcstackCOMMON:	
   273  0070                     ?_ledShow:	
   274  0070                     ??_ledShow:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Init_System:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_AD_Init:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_checkOutA:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_chrgCtr:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_checkBatAD:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_keyCtr:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_workCtr:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_ledCtr:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_Sleep_Mode:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_chrgPwmStop:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_pwmStop:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_chrgPwmInit:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_pwmInit:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_Isr_Timer:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ??_Isr_Timer:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_keyRead:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330  0070                     	ds	3
   331  0073                     ??_Init_System:	
   332  0073                     ??_AD_Init:	
   333                           ; 1 bytes @ 0x3
   334                           
   335  0073                     ??_workCtr:	
   336                           ; 1 bytes @ 0x3
   337                           
   338  0073                     ??_Sleep_Mode:	
   339                           ; 1 bytes @ 0x3
   340                           
   341  0073                     ??_chrgPwmStop:	
   342                           ; 1 bytes @ 0x3
   343                           
   344  0073                     ??_pwmStop:	
   345                           ; 1 bytes @ 0x3
   346                           
   347  0073                     ??_chrgPwmInit:	
   348                           ; 1 bytes @ 0x3
   349                           
   350  0073                     ??_pwmInit:	
   351                           ; 1 bytes @ 0x3
   352                           
   353  0073                     ?_ADC_Sample:	
   354                           ; 1 bytes @ 0x3
   355                           
   356  0073                     ??_keyRead:	
   357                           ; 1 bytes @ 0x3
   358                           
   359  0073                     ?___bmul:	
   360                           ; 1 bytes @ 0x3
   361                           
   362  0073                     ?___lbdiv:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ?___lbmod:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ?___lwmod:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     keyRead@keyStatus:	
   372                           ; 2 bytes @ 0x3
   373                           
   374  0073                     ADC_Sample@adldo:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ___bmul@multiplicand:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ___lbdiv@divisor:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ___lbmod@divisor:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ___lwmod@divisor:	
   387                           ; 1 bytes @ 0x3
   388                           
   389                           
   390                           ; 2 bytes @ 0x3
   391  0073                     	ds	1
   392  0074                     ??_checkBatAD:	
   393  0074                     ??_keyCtr:	
   394                           ; 1 bytes @ 0x4
   395                           
   396  0074                     ??___bmul:	
   397                           ; 1 bytes @ 0x4
   398                           
   399  0074                     ??___lbdiv:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     ??___lbmod:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     keyCtr@kclick:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0074                     ___bmul@product:	
   409                           ; 1 bytes @ 0x4
   410                           
   411  0074                     ___lbdiv@dividend:	
   412                           ; 1 bytes @ 0x4
   413                           
   414                           
   415                           ; 1 bytes @ 0x4
   416  0074                     	ds	1
   417  0075                     ___bmul@multiplier:	
   418  0075                     ___lbdiv@counter:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0075                     ___lwmod@dividend:	
   422                           ; 1 bytes @ 0x5
   423                           
   424                           
   425                           ; 2 bytes @ 0x5
   426  0075                     	ds	1
   427  0076                     ___lbdiv@quotient:	
   428                           
   429                           ; 1 bytes @ 0x6
   430  0076                     	ds	1
   431  0077                     ??_ledCtr:	
   432  0077                     ??_main:	
   433                           ; 1 bytes @ 0x7
   434                           
   435  0077                     ??___lwmod:	
   436                           ; 1 bytes @ 0x7
   437                           
   438                           
   439                           	psect	cstackBANK0
   440  0059                     __pcstackBANK0:	
   441                           ; 1 bytes @ 0x7
   442                           
   443  0059                     ??_chrgCtr:	
   444  0059                     ??_ADC_Sample:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0059                     ___lbmod@dividend:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0059                     ___lwmod@counter:	
   451                           ; 1 bytes @ 0x0
   452                           
   453                           
   454                           ; 1 bytes @ 0x0
   455  0059                     	ds	1
   456  005A                     ___lbmod@counter:	
   457                           
   458                           ; 1 bytes @ 0x1
   459  005A                     	ds	1
   460  005B                     ___lbmod@rem:	
   461                           
   462                           ; 1 bytes @ 0x2
   463  005B                     	ds	2
   464  005D                     ADC_Sample@j:	
   465                           
   466                           ; 1 bytes @ 0x4
   467  005D                     	ds	1
   468  005E                     ADC_Sample@adch:	
   469                           
   470                           ; 1 bytes @ 0x5
   471  005E                     	ds	1
   472  005F                     ADC_Sample@i:	
   473                           
   474                           ; 1 bytes @ 0x6
   475  005F                     	ds	1
   476  0060                     ADC_Sample@adsum:	
   477                           
   478                           ; 4 bytes @ 0x7
   479  0060                     	ds	4
   480  0064                     ADC_Sample@admin:	
   481                           
   482                           ; 2 bytes @ 0xB
   483  0064                     	ds	2
   484  0066                     ADC_Sample@admax:	
   485                           
   486                           ; 2 bytes @ 0xD
   487  0066                     	ds	2
   488  0068                     ADC_Sample@ad_temp:	
   489                           
   490                           ; 2 bytes @ 0xF
   491  0068                     	ds	2
   492  006A                     ??_checkOutA:	
   493                           
   494                           ; 1 bytes @ 0x11
   495  006A                     	ds	2
   496  006C                     checkOutA@maxtempV:	
   497                           
   498                           ; 1 bytes @ 0x13
   499  006C                     	ds	1
   500  006D                     checkOutA@maxAout:	
   501                           
   502                           ; 1 bytes @ 0x14
   503  006D                     	ds	1
   504                           
   505                           	psect	maintext
   506  044D                     __pmaintext:	
   507 ;;
   508 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   509 ;;
   510 ;; *************** function _main *****************
   511 ;; Defined at:
   512 ;;		line 152 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;		None
   515 ;; Auto vars:     Size  Location     Type
   516 ;;		None
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, pclath, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : B00/0
   523 ;;		On exit  : 100/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMMON   BANK0   BANK1
   526 ;;      Params:         0       0       0
   527 ;;      Locals:         0       0       0
   528 ;;      Temps:          0       0       0
   529 ;;      Totals:         0       0       0
   530 ;;Total ram usage:        0 bytes
   531 ;; Hardware stack levels required when called:    4
   532 ;; This function calls:
   533 ;;		_AD_Init
   534 ;;		_Init_System
   535 ;;		_Sleep_Mode
   536 ;;		_checkBatAD
   537 ;;		_checkOutA
   538 ;;		_chrgCtr
   539 ;;		_keyCtr
   540 ;;		_ledCtr
   541 ;;		_workCtr
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _main
   549  044D                     _main:	
   550                           
   551                           ;main.c: 154: Init_System();
   552                           
   553                           ;incstack = 0
   554                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   555  044D  2589               	fcall	_Init_System
   556                           
   557                           ;main.c: 155: AD_Init();
   558  044E  25D4               	fcall	_AD_Init
   559                           
   560                           ;main.c: 156: firstTime = 200;
   561  044F  30C8               	movlw	200
   562  0450  1283               	bcf	3,5	;RP0=0, select bank0
   563  0451  00EE               	movwf	_firstTime
   564  0452                     l691:	
   565                           ;main.c: 157: while (1)
   566                           
   567  0452  0064               	clrwdt	;# 
   568                           
   569                           ;main.c: 160: if(intCount10 > 10)
   570  0453  300B               	movlw	11
   571  0454  1283               	bcf	3,5	;RP0=0, select bank0
   572  0455  0252               	subwf	_intCount10,w
   573  0456  1C03               	skipc
   574  0457  2C5A               	goto	l3538
   575                           
   576                           ;main.c: 161: {
   577                           ;main.c: 162: intCount10 = 0;
   578  0458  01D2               	clrf	_intCount10
   579                           
   580                           ;main.c: 163: checkOutA();
   581  0459  2207               	fcall	_checkOutA
   582  045A                     l3538:	
   583                           
   584                           ;main.c: 164: }
   585                           ;main.c: 165: if(!IntFlag)
   586  045A  1283               	bcf	3,5	;RP0=0, select bank0
   587  045B  0855               	movf	_IntFlag,w
   588  045C  1903               	btfsc	3,2
   589  045D  2C52               	goto	l691
   590                           
   591                           ;main.c: 167: IntFlag = 0;
   592  045E  01D5               	clrf	_IntFlag
   593                           
   594                           ;main.c: 168: chrgCtr();
   595  045F  2018               	fcall	_chrgCtr
   596                           
   597                           ;main.c: 169: checkBatAD();
   598  0460  22B9               	fcall	_checkBatAD
   599                           
   600                           ;main.c: 170: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   601  0461  1283               	bcf	3,5	;RP0=0, select bank0
   602  0462  0854               	movf	_chrgFlag,w
   603  0463  1D03               	btfss	3,2
   604  0464  2C6C               	goto	l695
   605  0465  0839               	movf	_lowBatFlag,w
   606  0466  1D03               	btfss	3,2
   607  0467  2C6C               	goto	l695
   608  0468  086E               	movf	_firstTime,w
   609  0469  1D03               	btfss	3,2
   610  046A  2C6C               	goto	l695
   611                           
   612                           ;main.c: 171: {
   613                           ;main.c: 172: keyCtr();
   614  046B  24C9               	fcall	_keyCtr
   615  046C                     l695:	
   616                           
   617                           ;main.c: 173: }
   618                           ;main.c: 174: workCtr();
   619  046C  248B               	fcall	_workCtr
   620                           
   621                           ;main.c: 175: ledCtr();
   622  046D  235D               	fcall	_ledCtr
   623                           
   624                           ;main.c: 176: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   625  046E  0854               	movf	_chrgFlag,w
   626  046F  1D03               	btfss	3,2
   627  0470  2C89               	goto	l3574
   628  0471  087A               	movf	_workStep,w
   629  0472  1D03               	btfss	3,2
   630  0473  2C89               	goto	l3574
   631  0474  084C               	movf	_keyCount,w
   632  0475  1D03               	btfss	3,2
   633  0476  2C89               	goto	l3574
   634  0477  086E               	movf	_firstTime,w
   635  0478  1D03               	btfss	3,2
   636  0479  2C89               	goto	l3574
   637  047A  0842               	movf	_showBatTime,w
   638  047B  1D03               	btfss	3,2
   639  047C  2C89               	goto	l3574
   640                           
   641                           ;main.c: 177: {
   642                           ;main.c: 178: shiweiNum = geweiNum = 0;
   643  047D  0824               	movf	_overWorkTime,w
   644  047E  0425               	iorwf	_overWorkTime+1,w
   645  047F  1D03               	btfss	3,2
   646  0480  2C89               	goto	l3574
   647                           
   648                           ;main.c: 179: if(++sleepTime >= 200)
   649  0481  30C8               	movlw	200
   650  0482  0AB8               	incf	_sleepTime,f
   651  0483  0238               	subwf	_sleepTime,w
   652  0484  1C03               	skipc
   653  0485  2C52               	goto	l691
   654                           
   655                           ;main.c: 180: {
   656                           ;main.c: 181: sleepTime = 0;
   657  0486  01B8               	clrf	_sleepTime
   658                           
   659                           ;main.c: 182: Sleep_Mode();
   660  0487  240B               	fcall	_Sleep_Mode
   661  0488  2C52               	goto	l691
   662  0489                     l3574:	
   663                           
   664                           ;main.c: 185: else
   665                           ;main.c: 186: {
   666                           ;main.c: 187: sleepTime = 0;
   667  0489  01B8               	clrf	_sleepTime
   668  048A  2C52               	goto	l691
   669  048B                     __end_of_main:	
   670                           
   671                           	psect	text1
   672  048B                     __ptext1:	
   673 ;; *************** function _workCtr *****************
   674 ;; Defined at:
   675 ;;		line 607 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 100/0
   686 ;;		On exit  : 100/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1
   689 ;;      Params:         0       0       0
   690 ;;      Locals:         0       0       0
   691 ;;      Temps:          0       0       0
   692 ;;      Totals:         0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    3
   696 ;; This function calls:
   697 ;;		_pwmInit
   698 ;;		_pwmStop
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           
   705                           ;psect for function _workCtr
   706  048B                     _workCtr:	
   707                           
   708                           ;main.c: 610: if(startTime > 0)
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   712  048B  0847               	movf	_startTime,w
   713  048C  1D03               	btfss	3,2
   714                           
   715                           ;main.c: 611: {
   716                           ;main.c: 612: startTime--;
   717  048D  03C7               	decf	_startTime,f
   718                           
   719                           ;main.c: 613: }
   720                           ;main.c: 614: if(workStep > 0)
   721  048E  087A               	movf	_workStep,w
   722  048F  1903               	btfsc	3,2
   723  0490  2CC5               	goto	l2860
   724                           
   725                           ;main.c: 615: {
   726                           ;main.c: 616: if(motorPwmFlag == 0)
   727  0491  0834               	movf	_motorPwmFlag,w
   728  0492  1D03               	btfss	3,2
   729  0493  2C95               	goto	l2840
   730                           
   731                           ;main.c: 617: {
   732                           ;main.c: 618: pwmInit();
   733  0494  25CC               	fcall	_pwmInit
   734  0495                     l2840:	
   735                           
   736                           ;main.c: 620: }
   737                           ;main.c: 621: maxDuty = 40 + (workStep*3);
   738  0495  087A               	movf	_workStep,w
   739  0496  077A               	addwf	_workStep,w
   740  0497  077A               	addwf	_workStep,w
   741  0498  3E28               	addlw	40
   742  0499  00CA               	movwf	_maxDuty
   743                           
   744                           ;main.c: 622: if(overCount >= 5)
   745  049A  3005               	movlw	5
   746  049B  0249               	subwf	_overCount,w
   747  049C  1C03               	skipc
   748  049D  2CB3               	goto	l2852
   749                           
   750                           ;main.c: 623: {
   751                           ;main.c: 624: if(++count5s > 300)
   752  049E  0AA6               	incf	_count5s,f
   753  049F  1903               	skipnz
   754  04A0  0AA7               	incf	_count5s+1,f
   755  04A1  3001               	movlw	1
   756  04A2  0227               	subwf	_count5s+1,w
   757  04A3  302D               	movlw	45
   758  04A4  1903               	skipnz
   759  04A5  0226               	subwf	_count5s,w
   760  04A6  1C03               	skipc
   761  04A7  2CB5               	goto	l2854
   762  04A8  30E8               	movlw	232
   763                           
   764                           ;main.c: 625: {
   765                           ;main.c: 626: count5s = 0;
   766  04A9  01A6               	clrf	_count5s
   767  04AA  01A7               	clrf	_count5s+1
   768                           
   769                           ;main.c: 627: overWorkTime = 1000;
   770  04AB  00A4               	movwf	_overWorkTime
   771  04AC  3003               	movlw	3
   772  04AD  00A5               	movwf	_overWorkTime+1
   773                           
   774                           ;main.c: 629: prejrStep = jrStep;
   775  04AE  087A               	movf	_workStep,w
   776  04AF  00B6               	movwf	_preWorkStep
   777                           
   778                           ;main.c: 630: workStep = 0;
   779  04B0  01FA               	clrf	_workStep
   780                           
   781                           ;main.c: 631: jrStep = 0;
   782  04B1  01B7               	clrf	_jrStep
   783  04B2  2CB5               	goto	l2854
   784  04B3                     l2852:	
   785                           
   786                           ;main.c: 634: else
   787                           ;main.c: 635: {
   788                           ;main.c: 636: count5s = 0;
   789  04B3  01A6               	clrf	_count5s
   790  04B4  01A7               	clrf	_count5s+1
   791  04B5                     l2854:	
   792                           
   793                           ;main.c: 637: }
   794                           ;main.c: 638: if(count1s == 0 && ++count900s >= 900)
   795  04B5  0856               	movf	_count1s,w
   796  04B6  1D03               	btfss	3,2
   797  04B7  0008               	return
   798  04B8  0AA0               	incf	_count900s,f
   799  04B9  1903               	skipnz
   800  04BA  0AA1               	incf	_count900s+1,f
   801  04BB  3003               	movlw	3
   802  04BC  0221               	subwf	_count900s+1,w
   803  04BD  3084               	movlw	132
   804  04BE  1903               	skipnz
   805  04BF  0220               	subwf	_count900s,w
   806  04C0  1C03               	skipc
   807  04C1  0008               	return
   808                           
   809                           ;main.c: 639: {
   810                           ;main.c: 640: workStep = 0;
   811  04C2  01FA               	clrf	_workStep
   812                           
   813                           ;main.c: 641: jrStep = 0;
   814  04C3  01B7               	clrf	_jrStep
   815  04C4  0008               	return
   816  04C5                     l2860:	
   817                           
   818                           ;main.c: 644: else
   819                           ;main.c: 645: {
   820                           ;main.c: 646: pwmStop();
   821  04C5  25DC               	fcall	_pwmStop
   822                           
   823                           ;main.c: 647: count900s = 0;
   824  04C6  01A0               	clrf	_count900s
   825  04C7  01A1               	clrf	_count900s+1
   826  04C8  0008               	return
   827  04C9                     __end_of_workCtr:	
   828                           
   829                           	psect	text2
   830  05CC                     __ptext2:	
   831 ;; *************** function _pwmInit *****************
   832 ;; Defined at:
   833 ;;		line 986 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2
   842 ;; Tracked objects:
   843 ;;		On entry : 100/0
   844 ;;		On exit  : 100/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1
   847 ;;      Params:         0       0       0
   848 ;;      Locals:         0       0       0
   849 ;;      Temps:          0       0       0
   850 ;;      Totals:         0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    2
   854 ;; This function calls:
   855 ;;		Nothing
   856 ;; This function is called by:
   857 ;;		_workCtr
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           
   862                           ;psect for function _pwmInit
   863  05CC                     _pwmInit:	
   864                           
   865                           ;main.c: 988: motorPwmFlag = 1;
   866                           
   867                           ;incstack = 0
   868                           ; Regs used in _pwmInit: [wreg+status,2]
   869  05CC  01B4               	clrf	_motorPwmFlag
   870  05CD  0AB4               	incf	_motorPwmFlag,f
   871                           
   872                           ;main.c: 989: PWMCON1 = 0B00000000;
   873                           
   874                           ;main.c: 990: PWMTH = 0X00;
   875                           
   876                           ;main.c: 991: PWMTL = 100;
   877                           
   878                           ;main.c: 994: PWMD23H = 0;
   879  05CE  25AB               	fcall	PL10	;call to abstracted procedure
   880                           
   881                           ;main.c: 995: PWMD3L = 43;
   882  05CF  302B               	movlw	43
   883  05D0  009C               	movwf	28	;volatile
   884                           
   885                           ;main.c: 996: PWM23DT = 0X00;
   886  05D1  019D               	clrf	29	;volatile
   887                           
   888                           ;main.c: 998: PWMCON0 = 0X68;
   889  05D2  3068               	movlw	104
   890                           
   891                           ;main.c: 999: PWMCON2 =0X00;
   892  05D3  2DB2               	ljmp	PL12	;call to abstracted procedure
   893  05D4                     __end_of_pwmInit:	
   894                           
   895                           	psect	text3
   896  035D                     __ptext3:	
   897 ;; *************** function _ledCtr *****************
   898 ;; Defined at:
   899 ;;		line 268 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 100/0
   910 ;;		On exit  : 100/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1
   913 ;;      Params:         0       0       0
   914 ;;      Locals:         0       0       0
   915 ;;      Temps:          0       0       0
   916 ;;      Totals:         0       0       0
   917 ;;Total ram usage:        0 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    3
   920 ;; This function calls:
   921 ;;		___lbdiv
   922 ;;		___lbmod
   923 ;;		___lwmod
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _ledCtr
   931  035D                     _ledCtr:	
   932                           
   933                           ;main.c: 270: if(firstTime > 0)
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   937  035D  086E               	movf	_firstTime,w
   938  035E  1903               	btfsc	3,2
   939  035F  2B6A               	goto	l3486
   940  0360  3006               	movlw	6
   941                           
   942                           ;main.c: 271: {
   943                           ;main.c: 272: firstTime--;
   944  0361  03EE               	decf	_firstTime,f
   945                           
   946                           ;main.c: 273: ledStep = 6;
   947  0362  00CD               	movwf	_ledStep
   948                           
   949                           ;main.c: 274: if(prePwStep < pwStep)
   950  0363  0845               	movf	_pwStep,w
   951  0364  0279               	subwf	_prePwStep,w
   952  0365  1803               	skipnc
   953  0366  0008               	return
   954                           
   955                           ;main.c: 275: {
   956                           ;main.c: 276: prePwStep = pwStep;
   957  0367  0845               	movf	_pwStep,w
   958  0368  00F9               	movwf	_prePwStep
   959  0369  0008               	return
   960  036A                     l3486:	
   961                           
   962                           ;main.c: 279: else if(overWorkTime > 0)
   963  036A  0824               	movf	_overWorkTime,w
   964  036B  0425               	iorwf	_overWorkTime+1,w
   965  036C  1903               	btfsc	3,2
   966  036D  2B88               	goto	l3496
   967                           
   968                           ;main.c: 280: {
   969                           ;main.c: 281: overWorkTime--;
   970  036E  3001               	movlw	1
   971  036F  02A4               	subwf	_overWorkTime,f
   972  0370  3000               	movlw	0
   973  0371  1C03               	skipc
   974  0372  03A5               	decf	_overWorkTime+1,f
   975  0373  02A5               	subwf	_overWorkTime+1,f
   976                           
   977                           ;main.c: 282: if(overWorkTime % 60 < 30)
   978  0374  303C               	movlw	60
   979  0375  00F3               	movwf	___lwmod@divisor
   980  0376  01F4               	clrf	___lwmod@divisor+1
   981  0377  0825               	movf	_overWorkTime+1,w
   982  0378  00F6               	movwf	___lwmod@dividend+1
   983  0379  0824               	movf	_overWorkTime,w
   984  037A  00F5               	movwf	___lwmod@dividend
   985  037B  24F4               	fcall	___lwmod
   986  037C  3000               	movlw	0
   987  037D  0274               	subwf	?___lwmod+1,w
   988  037E  301E               	movlw	30
   989  037F  1903               	skipnz
   990  0380  0273               	subwf	?___lwmod,w
   991  0381  1803               	skipnc
   992  0382  2B86               	goto	l3494
   993                           
   994                           ;main.c: 283: {
   995                           ;main.c: 284: ledStep = preWorkStep;
   996  0383  0836               	movf	_preWorkStep,w
   997  0384  00CD               	movwf	_ledStep
   998                           
   999                           ;main.c: 285: }
  1000  0385  0008               	return
  1001  0386                     l3494:	
  1002                           
  1003                           ;main.c: 286: else
  1004                           ;main.c: 287: {
  1005                           ;main.c: 288: ledStep = 0;
  1006  0386  01CD               	clrf	_ledStep
  1007  0387  0008               	return
  1008  0388                     l3496:	
  1009                           
  1010                           ;main.c: 291: else if(showBatTime > 0)
  1011  0388  0842               	movf	_showBatTime,w
  1012  0389  1903               	btfsc	3,2
  1013  038A  2BA2               	goto	l3514
  1014  038B  300E               	movlw	14
  1015                           
  1016                           ;main.c: 292: {
  1017                           ;main.c: 293: showBatTime--;
  1018  038C  03C2               	decf	_showBatTime,f
  1019                           
  1020                           ;main.c: 294: if(prePwStep >= 14)
  1021  038D  0279               	subwf	_prePwStep,w
  1022  038E  1C03               	skipc
  1023  038F  2B96               	goto	l3504
  1024                           
  1025                           ;main.c: 295: {
  1026                           ;main.c: 296: ledStep = prePwStep/14;
  1027  0390  300E               	movlw	14
  1028  0391  00F3               	movwf	___lbdiv@divisor
  1029  0392  0879               	movf	_prePwStep,w
  1030  0393  256E               	fcall	___lbdiv
  1031  0394  00CD               	movwf	_ledStep
  1032                           
  1033                           ;main.c: 297: }
  1034  0395  0008               	return
  1035  0396                     l3504:	
  1036                           
  1037                           ;main.c: 298: else if(prePwStep > 5)
  1038  0396  3006               	movlw	6
  1039  0397  0279               	subwf	_prePwStep,w
  1040  0398  1C03               	skipc
  1041  0399  2B9D               	goto	l3508
  1042  039A                     l3506:	
  1043                           
  1044                           ;main.c: 299: {
  1045                           ;main.c: 300: ledStep = 1;
  1046  039A  01CD               	clrf	_ledStep
  1047  039B  0ACD               	incf	_ledStep,f
  1048                           
  1049                           ;main.c: 301: }
  1050  039C  0008               	return
  1051  039D                     l3508:	
  1052                           
  1053                           ;main.c: 302: else
  1054                           ;main.c: 303: {
  1055                           ;main.c: 304: if(count1s < 50)
  1056  039D  3032               	movlw	50
  1057  039E  0256               	subwf	_count1s,w
  1058  039F  1C03               	btfss	3,0
  1059  03A0  2B9A               	goto	l3506
  1060  03A1  2B86               	goto	l3494
  1061  03A2                     l3514:	
  1062                           ;main.c: 311: }
  1063                           ;main.c: 312: }
  1064                           ;main.c: 313: }
  1065                           
  1066                           
  1067                           ;main.c: 314: else if(workStep > 0)
  1068  03A2  087A               	movf	_workStep,w
  1069  03A3  1903               	btfsc	3,2
  1070  03A4  2BA8               	goto	l3518
  1071                           
  1072                           ;main.c: 315: {
  1073                           ;main.c: 316: ledStep = workStep;
  1074  03A5  087A               	movf	_workStep,w
  1075  03A6  00CD               	movwf	_ledStep
  1076                           
  1077                           ;main.c: 317: }
  1078  03A7  0008               	return
  1079  03A8                     l3518:	
  1080                           
  1081                           ;main.c: 318: else if(chrgFlag)
  1082  03A8  0854               	movf	_chrgFlag,w
  1083  03A9  1903               	btfsc	3,2
  1084  03AA  2B86               	goto	l3494
  1085                           
  1086                           ;main.c: 319: {
  1087                           ;main.c: 320: if(count1s % 50 == 0)
  1088  03AB  3032               	movlw	50
  1089  03AC  00F3               	movwf	___lbmod@divisor
  1090  03AD  0856               	movf	_count1s,w
  1091  03AE  2536               	fcall	___lbmod
  1092  03AF  3A00               	xorlw	0
  1093  03B0  1D03               	skipz
  1094  03B1  0008               	return
  1095                           
  1096                           ;main.c: 321: {
  1097                           ;main.c: 322: if(++ledStep > 6)
  1098  03B2  3007               	movlw	7
  1099  03B3  0ACD               	incf	_ledStep,f
  1100  03B4  024D               	subwf	_ledStep,w
  1101  03B5  1C03               	skipc
  1102  03B6  0008               	return
  1103                           
  1104                           ;main.c: 323: {
  1105                           ;main.c: 324: ledStep = lockLedStep;
  1106  03B7  0843               	movf	_lockLedStep,w
  1107  03B8  00CD               	movwf	_ledStep
  1108  03B9  0008               	return
  1109  03BA                     __end_of_ledCtr:	
  1110                           
  1111                           	psect	text4
  1112  04F4                     __ptext4:	
  1113 ;; *************** function ___lwmod *****************
  1114 ;; Defined at:
  1115 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  divisor         2    3[COMMON] unsigned int 
  1118 ;;  dividend        2    5[COMMON] unsigned int 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  counter         1    0[BANK0 ] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  2    3[COMMON] unsigned int 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0
  1125 ;; Tracked objects:
  1126 ;;		On entry : 100/0
  1127 ;;		On exit  : 100/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1
  1130 ;;      Params:         4       0       0
  1131 ;;      Locals:         0       1       0
  1132 ;;      Temps:          0       0       0
  1133 ;;      Totals:         4       1       0
  1134 ;;Total ram usage:        5 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    2
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_ledCtr
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function ___lwmod
  1146  04F4                     ___lwmod:	
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1150  04F4  0873               	movf	___lwmod@divisor,w
  1151  04F5  0474               	iorwf	___lwmod@divisor+1,w
  1152  04F6  1903               	btfsc	3,2
  1153  04F7  2D13               	goto	l3158
  1154  04F8  01D9               	clrf	___lwmod@counter
  1155  04F9                     L1:	
  1156  04F9  0AD9               	incf	___lwmod@counter,f
  1157  04FA  1BF4               	btfsc	___lwmod@divisor+1,7
  1158  04FB  2D00               	goto	l3150
  1159  04FC  1003               	clrc
  1160  04FD  0DF3               	rlf	___lwmod@divisor,f
  1161  04FE  0DF4               	rlf	___lwmod@divisor+1,f
  1162  04FF  2CF9               	goto	L1
  1163  0500                     l3150:	
  1164  0500  0874               	movf	___lwmod@divisor+1,w
  1165  0501  0276               	subwf	___lwmod@dividend+1,w
  1166  0502  1D03               	skipz
  1167  0503  2D06               	goto	u3275
  1168  0504  0873               	movf	___lwmod@divisor,w
  1169  0505  0275               	subwf	___lwmod@dividend,w
  1170  0506                     u3275:	
  1171  0506  1C03               	skipc
  1172  0507  2D0F               	goto	L2
  1173  0508  0873               	movf	___lwmod@divisor,w
  1174  0509  02F5               	subwf	___lwmod@dividend,f
  1175  050A  0874               	movf	___lwmod@divisor+1,w
  1176  050B  1C03               	skipc
  1177  050C  03F6               	decf	___lwmod@dividend+1,f
  1178  050D  02F6               	subwf	___lwmod@dividend+1,f
  1179  050E  1003               	clrc
  1180  050F                     L2:	
  1181  050F  0CF4               	rrf	___lwmod@divisor+1,f
  1182  0510  0CF3               	rrf	___lwmod@divisor,f
  1183  0511  0BD9               	decfsz	___lwmod@counter,f
  1184  0512  2D00               	goto	l3150
  1185  0513                     l3158:	
  1186  0513  0876               	movf	___lwmod@dividend+1,w
  1187  0514  00F4               	movwf	?___lwmod+1
  1188  0515  0875               	movf	___lwmod@dividend,w
  1189  0516  00F3               	movwf	?___lwmod
  1190  0517  0008               	return
  1191  0518                     __end_of___lwmod:	
  1192                           
  1193                           	psect	text5
  1194  0536                     __ptext5:	
  1195 ;; *************** function ___lbmod *****************
  1196 ;; Defined at:
  1197 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  dividend        1    wreg     unsigned char 
  1200 ;;  divisor         1    3[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  dividend        1    0[BANK0 ] unsigned char 
  1203 ;;  rem             1    2[BANK0 ] unsigned char 
  1204 ;;  counter         1    1[BANK0 ] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      unsigned char 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 100/0
  1211 ;;		On exit  : 100/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1
  1214 ;;      Params:         1       0       0
  1215 ;;      Locals:         0       3       0
  1216 ;;      Temps:          1       0       0
  1217 ;;      Totals:         2       3       0
  1218 ;;Total ram usage:        5 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_ledCtr
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function ___lbmod
  1230  0536                     ___lbmod:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1234                           ;___lbmod@dividend stored from wreg
  1235  0536  00D9               	movwf	___lbmod@dividend
  1236  0537  3008               	movlw	8
  1237  0538  00DA               	movwf	___lbmod@counter
  1238  0539  01DB               	clrf	___lbmod@rem
  1239  053A                     l3128:	
  1240  053A  0859               	movf	___lbmod@dividend,w
  1241  053B  00F4               	movwf	??___lbmod
  1242  053C  3007               	movlw	7
  1243  053D  1003               	clrc
  1244  053E                     L3:	
  1245  053E  0CF4               	rrf	??___lbmod,f
  1246  053F  3EFF               	addlw	-1
  1247  0540  1003               	clrc
  1248  0541  1D03               	skipz
  1249  0542  2D3E               	goto	L3
  1250  0543  0D5B               	rlf	___lbmod@rem,w
  1251  0544  0474               	iorwf	??___lbmod,w
  1252  0545  00DB               	movwf	___lbmod@rem
  1253  0546  1003               	clrc
  1254  0547  0DD9               	rlf	___lbmod@dividend,f
  1255  0548  0873               	movf	___lbmod@divisor,w
  1256  0549  025B               	subwf	___lbmod@rem,w
  1257  054A  1C03               	skipc
  1258  054B  2D4E               	goto	l3136
  1259  054C  0873               	movf	___lbmod@divisor,w
  1260  054D  02DB               	subwf	___lbmod@rem,f
  1261  054E                     l3136:	
  1262  054E  0BDA               	decfsz	___lbmod@counter,f
  1263  054F  2D3A               	goto	l3128
  1264  0550  085B               	movf	___lbmod@rem,w
  1265  0551  0008               	return
  1266  0552                     __end_of___lbmod:	
  1267                           
  1268                           	psect	text6
  1269  04C9                     __ptext6:	
  1270 ;; *************** function _keyCtr *****************
  1271 ;; Defined at:
  1272 ;;		line 569 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  kclick          1    4[COMMON] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 100/0
  1283 ;;		On exit  : 100/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1
  1286 ;;      Params:         0       0       0
  1287 ;;      Locals:         1       0       0
  1288 ;;      Temps:          0       0       0
  1289 ;;      Totals:         1       0       0
  1290 ;;Total ram usage:        1 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    3
  1293 ;; This function calls:
  1294 ;;		_keyRead
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _keyCtr
  1302  04C9                     _keyCtr:	
  1303                           
  1304                           ;main.c: 571: char kclick = keyRead(0x04 & (~PORTB));
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1308  04C9  0906               	comf	6,w	;volatile
  1309  04CA  3904               	andlw	4
  1310  04CB  2518               	fcall	_keyRead
  1311  04CC  00F4               	movwf	keyCtr@kclick
  1312                           
  1313                           ;main.c: 572: if(kclick == 1)
  1314  04CD  0B74               	decfsz	keyCtr@kclick,w
  1315  04CE  2CE3               	goto	l2818
  1316                           
  1317                           ;main.c: 573: {
  1318                           ;main.c: 574: if(workStep > 0)
  1319  04CF  087A               	movf	_workStep,w
  1320  04D0  1903               	btfsc	3,2
  1321  04D1  2CDA               	goto	l2810
  1322                           
  1323                           ;main.c: 575: {
  1324                           ;main.c: 576: if(++workStep > 6)
  1325  04D2  3007               	movlw	7
  1326  04D3  0AFA               	incf	_workStep,f
  1327  04D4  027A               	subwf	_workStep,w
  1328  04D5  1C03               	skipc
  1329  04D6  0008               	return
  1330                           
  1331                           ;main.c: 577: {
  1332                           ;main.c: 578: workStep = 1;
  1333  04D7  01FA               	clrf	_workStep
  1334  04D8  0AFA               	incf	_workStep,f
  1335  04D9  0008               	return
  1336  04DA                     l2810:	
  1337                           
  1338                           ;main.c: 581: else if(showBatTime > 0)
  1339  04DA  0842               	movf	_showBatTime,w
  1340  04DB  1903               	btfsc	3,2
  1341  04DC  2CDF               	goto	l2814
  1342                           
  1343                           ;main.c: 582: {
  1344                           ;main.c: 583: showBatTime = 0;
  1345  04DD  01C2               	clrf	_showBatTime
  1346                           
  1347                           ;main.c: 584: }
  1348  04DE  0008               	return
  1349  04DF                     l2814:	
  1350                           
  1351                           ;main.c: 585: else
  1352                           ;main.c: 586: {
  1353                           ;main.c: 587: showBatTime = 200;
  1354  04DF  30C8               	movlw	200
  1355  04E0  00C2               	movwf	_showBatTime
  1356                           
  1357                           ;main.c: 588: count1s = 0;
  1358  04E1  01D6               	clrf	_count1s
  1359  04E2  0008               	return
  1360  04E3                     l2818:	
  1361                           
  1362                           ;main.c: 591: else if(kclick == 2)
  1363  04E3  3002               	movlw	2
  1364  04E4  0674               	xorwf	keyCtr@kclick,w
  1365  04E5  1D03               	btfss	3,2
  1366  04E6  0008               	return
  1367                           
  1368                           ;main.c: 592: {
  1369                           ;main.c: 593: if(workStep > 0)
  1370  04E7  087A               	movf	_workStep,w
  1371  04E8  1903               	btfsc	3,2
  1372  04E9  2CEC               	goto	l816
  1373                           
  1374                           ;main.c: 594: {
  1375                           ;main.c: 595: workStep = 0;
  1376  04EA  01FA               	clrf	_workStep
  1377                           
  1378                           ;main.c: 596: }
  1379  04EB  0008               	return
  1380  04EC                     l816:	
  1381  04EC  301E               	movlw	30
  1382                           
  1383                           ;main.c: 597: else
  1384                           ;main.c: 598: {
  1385                           ;main.c: 599: workStep = 1;
  1386  04ED  01FA               	clrf	_workStep
  1387  04EE  0AFA               	incf	_workStep,f
  1388                           
  1389                           ;main.c: 600: startTime = 30;
  1390  04EF  00C7               	movwf	_startTime
  1391                           
  1392                           ;main.c: 601: showBatTime = 0;
  1393  04F0  01C2               	clrf	_showBatTime
  1394                           
  1395                           ;main.c: 602: overWorkTime = 0;
  1396  04F1  01A4               	clrf	_overWorkTime
  1397  04F2  01A5               	clrf	_overWorkTime+1
  1398  04F3  0008               	return
  1399  04F4                     __end_of_keyCtr:	
  1400                           
  1401                           	psect	text7
  1402  0518                     __ptext7:	
  1403 ;; *************** function _keyRead *****************
  1404 ;; Defined at:
  1405 ;;		line 501 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  keyStatus       1    wreg     unsigned char 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  keyStatus       1    3[COMMON] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 100/0
  1416 ;;		On exit  : 100/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1
  1419 ;;      Params:         0       0       0
  1420 ;;      Locals:         1       0       0
  1421 ;;      Temps:          0       0       0
  1422 ;;      Totals:         1       0       0
  1423 ;;Total ram usage:        1 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    2
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_keyCtr
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _keyRead
  1435  0518                     _keyRead:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1439                           ;keyRead@keyStatus stored from wreg
  1440  0518  00F3               	movwf	keyRead@keyStatus
  1441                           
  1442                           ;main.c: 503: if(keyStatus)
  1443  0519  0873               	movf	keyRead@keyStatus,w
  1444  051A  3064               	movlw	100
  1445  051B  1903               	btfsc	3,2
  1446  051C  2D2A               	goto	L5
  1447                           
  1448                           ;main.c: 504: {
  1449                           ;main.c: 505: keyCount++;
  1450  051D  0ACC               	incf	_keyCount,f
  1451                           
  1452                           ;main.c: 506: if(keyCount >= 100)
  1453  051E  024C               	subwf	_keyCount,w
  1454  051F  1C03               	skipc
  1455  0520  3400               	retlw	0
  1456                           
  1457                           ;main.c: 507: {
  1458                           ;main.c: 508: keyCount = 100;
  1459  0521  3064               	movlw	100
  1460  0522  00CC               	movwf	_keyCount
  1461                           
  1462                           ;main.c: 509: if(!longPressFlag)
  1463  0523  084B               	movf	_longPressFlag,w
  1464  0524  1D03               	btfss	3,2
  1465  0525  3400               	retlw	0
  1466  0526  3002               	movlw	2
  1467                           
  1468                           ;main.c: 510: {
  1469                           ;main.c: 511: longPressFlag = 1;
  1470  0527  01CB               	clrf	_longPressFlag
  1471  0528  0ACB               	incf	_longPressFlag,f
  1472                           
  1473                           ;main.c: 512: return 2;
  1474  0529  0008               	return
  1475  052A                     L5:	
  1476                           ;main.c: 516: else
  1477                           ;main.c: 517: {
  1478                           ;main.c: 518: if(keyCount >= 100)
  1479                           
  1480  052A  024C               	subwf	_keyCount,w
  1481  052B  1C03               	skipc
  1482  052C  2D30               	goto	l2268
  1483                           
  1484                           ;main.c: 519: {
  1485                           ;main.c: 520: keyCount = 0;
  1486  052D  01CC               	clrf	_keyCount
  1487                           
  1488                           ;main.c: 521: longPressFlag = 0;
  1489  052E  01CB               	clrf	_longPressFlag
  1490                           
  1491                           ;main.c: 522: return 0;
  1492  052F  3400               	retlw	0
  1493  0530                     l2268:	
  1494                           
  1495                           ;main.c: 524: else if(keyCount >= 6)
  1496  0530  3006               	movlw	6
  1497  0531  024C               	subwf	_keyCount,w
  1498                           
  1499                           ;main.c: 525: {
  1500                           ;main.c: 526: keyCount = 0;
  1501  0532  01CC               	clrf	_keyCount
  1502  0533  1803               	btfsc	3,0
  1503                           
  1504                           ;main.c: 527: return 1;
  1505  0534  3401               	retlw	1
  1506  0535  3400               	retlw	0
  1507  0536                     __end_of_keyRead:	
  1508                           ;main.c: 528: }
  1509                           ;main.c: 529: keyCount = 0;
  1510                           
  1511                           
  1512                           	psect	text8
  1513  0018                     __ptext8:	
  1514 ;; *************** function _chrgCtr *****************
  1515 ;; Defined at:
  1516 ;;		line 336 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 100/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1
  1530 ;;      Params:         0       0       0
  1531 ;;      Locals:         0       0       0
  1532 ;;      Temps:          0       2       0
  1533 ;;      Totals:         0       2       0
  1534 ;;Total ram usage:        2 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    3
  1537 ;; This function calls:
  1538 ;;		___lbdiv
  1539 ;;		_chrgPwmInit
  1540 ;;		_chrgPwmStop
  1541 ;;		_pwmStop
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function _chrgCtr
  1549  0018                     _chrgCtr:	
  1550                           
  1551                           ;main.c: 338: if(PORTA & 0x02)
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1555  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1556  0019  1C86               	btfss	6,1	;volatile
  1557  001A  28F9               	goto	l3398
  1558                           
  1559                           ;main.c: 339: {
  1560                           ;main.c: 340: if(chrgFlag == 0)
  1561  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1562  001C  0854               	movf	_chrgFlag,w
  1563  001D  1D03               	btfss	3,2
  1564  001E  2823               	goto	l3274
  1565                           
  1566                           ;main.c: 341: {
  1567                           ;main.c: 342: chrgFlag = 1;
  1568  001F  01D4               	clrf	_chrgFlag
  1569  0020  0AD4               	incf	_chrgFlag,f
  1570                           
  1571                           ;main.c: 343: chrgMaxDuty = 0;
  1572  0021  01BB               	clrf	_chrgMaxDuty
  1573                           
  1574                           ;main.c: 344: chrgPwmStop();
  1575  0022  25E3               	fcall	_chrgPwmStop
  1576  0023                     l3274:	
  1577                           
  1578                           ;main.c: 345: }
  1579                           ;main.c: 346: jrStep = 0;
  1580  0023  01B7               	clrf	_jrStep
  1581                           
  1582                           ;main.c: 347: workStep = 0;
  1583  0024  01FA               	clrf	_workStep
  1584                           
  1585                           ;main.c: 348: pwmStop();
  1586  0025  25DC               	fcall	_pwmStop
  1587                           
  1588                           ;main.c: 349: lowBatFlag = 0;
  1589  0026  01B9               	clrf	_lowBatFlag
  1590                           
  1591                           ;main.c: 350: if(prePwStep < pwStep)
  1592  0027  0845               	movf	_pwStep,w
  1593  0028  0279               	subwf	_prePwStep,w
  1594  0029  1803               	skipnc
  1595  002A  2834               	goto	l3288
  1596                           
  1597                           ;main.c: 351: {
  1598                           ;main.c: 352: if(++count50s > 3000)
  1599  002B  2118               	fcall	PL8	;call to abstracted procedure
  1600  002C  1903               	skipnz
  1601  002D  022A               	subwf	_count50s,w
  1602  002E  1C03               	skipc
  1603  002F  2836               	goto	l3290
  1604                           
  1605                           ;main.c: 353: {
  1606                           ;main.c: 354: count50s = 0;
  1607  0030  01AA               	clrf	_count50s
  1608  0031  01AB               	clrf	_count50s+1
  1609                           
  1610                           ;main.c: 355: prePwStep++;
  1611  0032  0AF9               	incf	_prePwStep,f
  1612  0033  2836               	goto	l3290
  1613  0034                     l3288:	
  1614                           
  1615                           ;main.c: 358: else
  1616                           ;main.c: 359: {
  1617                           ;main.c: 360: count50s = 0;
  1618  0034  01AA               	clrf	_count50s
  1619  0035  01AB               	clrf	_count50s+1
  1620  0036                     l3290:	
  1621                           
  1622                           ;main.c: 361: }
  1623                           ;main.c: 362: if(protectFlag)
  1624  0036  0850               	movf	_protectFlag,w
  1625  0037  1903               	btfsc	3,2
  1626  0038  2857               	goto	l3312
  1627                           
  1628                           ;main.c: 363: {
  1629                           ;main.c: 364: chrgPwmStop();
  1630  0039  25E3               	fcall	_chrgPwmStop
  1631                           
  1632                           ;main.c: 365: if(prePwStep < 99 && protectFlag == 1)
  1633  003A  3063               	movlw	99
  1634  003B  0279               	subwf	_prePwStep,w
  1635  003C  1803               	skipnc
  1636  003D  2855               	goto	l3308
  1637  003E  0B50               	decfsz	_protectFlag,w
  1638  003F  2855               	goto	l3308
  1639                           
  1640                           ;main.c: 366: {
  1641                           ;main.c: 367: if(++reChrgCount > 250)
  1642  0040  30FB               	movlw	251
  1643  0041  0AC4               	incf	_reChrgCount,f
  1644  0042  0244               	subwf	_reChrgCount,w
  1645  0043  1C03               	skipc
  1646  0044  0008               	return
  1647  0045  300F               	movlw	15
  1648                           
  1649                           ;main.c: 368: {
  1650                           ;main.c: 369: reChrgCount = 0;
  1651  0046  01C4               	clrf	_reChrgCount
  1652                           
  1653                           ;main.c: 370: chrgFullFlag = 0;
  1654  0047  01D3               	clrf	_chrgFullFlag
  1655                           
  1656                           ;main.c: 371: protectFlag = 0;
  1657  0048  01D0               	clrf	_protectFlag
  1658                           
  1659                           ;main.c: 372: if(prePwStep > 14)
  1660  0049  0279               	subwf	_prePwStep,w
  1661  004A  1C03               	skipc
  1662  004B  2853               	goto	l3306
  1663                           
  1664                           ;main.c: 373: {
  1665                           ;main.c: 374: lockLedStep = (prePwStep/14) - 1;
  1666  004C  300E               	movlw	14
  1667  004D  00F3               	movwf	___lbdiv@divisor
  1668  004E  0879               	movf	_prePwStep,w
  1669  004F  256E               	fcall	___lbdiv
  1670  0050  3EFF               	addlw	255
  1671  0051  00C3               	movwf	_lockLedStep
  1672                           
  1673                           ;main.c: 375: }
  1674  0052  0008               	return
  1675  0053                     l3306:	
  1676                           
  1677                           ;main.c: 376: else
  1678                           ;main.c: 377: {
  1679                           ;main.c: 378: lockLedStep = 0;
  1680  0053  01C3               	clrf	_lockLedStep
  1681  0054  0008               	return
  1682  0055                     l3308:	
  1683                           
  1684                           ;main.c: 382: else
  1685                           ;main.c: 383: {
  1686                           ;main.c: 384: reChrgCount = 0;
  1687  0055  01C4               	clrf	_reChrgCount
  1688  0056  0008               	return
  1689  0057                     l3312:	
  1690                           
  1691                           ;main.c: 387: }
  1692                           ;main.c: 388: if(batADValue < 1118)
  1693  0057  3004               	movlw	4
  1694  0058  0278               	subwf	_batADValue+1,w
  1695  0059  305E               	movlw	94
  1696  005A  1903               	skipnz
  1697  005B  0277               	subwf	_batADValue,w
  1698  005C  1803               	skipnc
  1699  005D  2861               	goto	l3318
  1700  005E  300F               	movlw	15
  1701                           
  1702                           ;main.c: 389: {
  1703                           ;main.c: 390: chrgMode = 0;
  1704  005F  01C1               	clrf	_chrgMode
  1705                           
  1706                           ;main.c: 391: chrgMaxAD = 15;
  1707  0060  287A               	goto	L6
  1708  0061                     l3318:	
  1709                           ;main.c: 392: }
  1710                           
  1711                           
  1712                           ;main.c: 393: else if(batADValue < 1530)
  1713  0061  3005               	movlw	5
  1714  0062  0278               	subwf	_batADValue+1,w
  1715  0063  30FA               	movlw	250
  1716  0064  1903               	skipnz
  1717  0065  0277               	subwf	_batADValue,w
  1718  0066  1803               	skipnc
  1719  0067  286E               	goto	l3326
  1720  0068  303C               	movlw	60
  1721                           
  1722                           ;main.c: 394: {
  1723                           ;main.c: 395: chrgMode = 1;
  1724  0069  01C1               	clrf	_chrgMode
  1725  006A  0AC1               	incf	_chrgMode,f
  1726                           
  1727                           ;main.c: 396: chrgMaxAD = 60;
  1728  006B  00C0               	movwf	_chrgMaxAD
  1729                           
  1730                           ;main.c: 397: lockCount = 0;
  1731  006C  01BF               	clrf	_lockCount
  1732                           
  1733                           ;main.c: 398: }
  1734  006D  287B               	goto	l3336
  1735  006E                     l3326:	
  1736                           
  1737                           ;main.c: 399: else if(count1s == 0)
  1738  006E  0856               	movf	_count1s,w
  1739  006F  1D03               	btfss	3,2
  1740  0070  287B               	goto	l3336
  1741                           
  1742                           ;main.c: 400: {
  1743                           ;main.c: 401: if(++lockCount > 200)
  1744  0071  30C9               	movlw	201
  1745  0072  0ABF               	incf	_lockCount,f
  1746  0073  023F               	subwf	_lockCount,w
  1747  0074  1C03               	skipc
  1748  0075  2879               	goto	l3334
  1749  0076  3002               	movlw	2
  1750                           
  1751                           ;main.c: 402: {
  1752                           ;main.c: 403: lockCount = 0;
  1753  0077  01BF               	clrf	_lockCount
  1754                           
  1755                           ;main.c: 404: chrgMode = 2;
  1756  0078  00C1               	movwf	_chrgMode
  1757  0079                     l3334:	
  1758                           
  1759                           ;main.c: 405: }
  1760                           ;main.c: 407: chrgMaxAD = 60;
  1761  0079  303C               	movlw	60
  1762  007A                     L6:	
  1763  007A  00C0               	movwf	_chrgMaxAD
  1764  007B                     l3336:	
  1765                           
  1766                           ;main.c: 408: }
  1767                           ;main.c: 409: if(chrgMode == 2 && outADValue < 8)
  1768  007B  3002               	movlw	2
  1769  007C  0641               	xorwf	_chrgMode,w
  1770  007D  1D03               	btfss	3,2
  1771  007E  2895               	goto	l3346
  1772  007F  3000               	movlw	0
  1773  0080  022D               	subwf	_outADValue+1,w
  1774  0081  3008               	movlw	8
  1775  0082  1903               	skipnz
  1776  0083  022C               	subwf	_outADValue,w
  1777  0084  1803               	skipnc
  1778  0085  2895               	goto	l3346
  1779                           
  1780                           ;main.c: 410: {
  1781                           ;main.c: 411: if(++fullCount >= 200)
  1782  0086  0AA8               	incf	_fullCount,f
  1783  0087  1903               	skipnz
  1784  0088  0AA9               	incf	_fullCount+1,f
  1785  0089  3000               	movlw	0
  1786  008A  0229               	subwf	_fullCount+1,w
  1787  008B  30C8               	movlw	200
  1788  008C  1903               	skipnz
  1789  008D  0228               	subwf	_fullCount,w
  1790  008E  1C03               	skipc
  1791  008F  2897               	goto	l3348
  1792                           
  1793                           ;main.c: 412: {
  1794                           ;main.c: 413: fullCount = 0;
  1795  0090  01A8               	clrf	_fullCount
  1796  0091  01A9               	clrf	_fullCount+1
  1797                           
  1798                           ;main.c: 414: chrgFullFlag = 1;
  1799  0092  01D3               	clrf	_chrgFullFlag
  1800  0093  0AD3               	incf	_chrgFullFlag,f
  1801  0094  2897               	goto	l3348
  1802  0095                     l3346:	
  1803                           
  1804                           ;main.c: 417: else
  1805                           ;main.c: 418: {
  1806                           ;main.c: 419: fullCount = 0;
  1807  0095  01A8               	clrf	_fullCount
  1808  0096  01A9               	clrf	_fullCount+1
  1809  0097                     l3348:	
  1810                           
  1811                           ;main.c: 420: }
  1812                           ;main.c: 421: if(chrgFullFlag)
  1813  0097  0853               	movf	_chrgFullFlag,w
  1814  0098  1903               	btfsc	3,2
  1815  0099  289D               	goto	l3354
  1816                           
  1817                           ;main.c: 422: {
  1818                           ;main.c: 423: lockLedStep = 6;
  1819  009A  3006               	movlw	6
  1820  009B  00C3               	movwf	_lockLedStep
  1821                           
  1822                           ;main.c: 424: chrgPwmStop();
  1823  009C  2DE3               	ljmp	l2214
  1824  009D                     l3354:	
  1825                           ;main.c: 425: }
  1826                           
  1827                           
  1828                           ;main.c: 426: else
  1829                           ;main.c: 427: {
  1830                           ;main.c: 428: if(prePwStep < 15)
  1831  009D  300F               	movlw	15
  1832  009E  0279               	subwf	_prePwStep,w
  1833  009F  1803               	skipnc
  1834  00A0  28A3               	goto	l3358
  1835                           
  1836                           ;main.c: 429: {
  1837                           ;main.c: 430: lockLedStep = 0;
  1838  00A1  01C3               	clrf	_lockLedStep
  1839                           
  1840                           ;main.c: 431: }
  1841  00A2  28A9               	goto	l3360
  1842  00A3                     l3358:	
  1843                           
  1844                           ;main.c: 432: else
  1845                           ;main.c: 433: {
  1846                           ;main.c: 434: lockLedStep = (prePwStep/14) - 1;
  1847  00A3  300E               	movlw	14
  1848  00A4  00F3               	movwf	___lbdiv@divisor
  1849  00A5  0879               	movf	_prePwStep,w
  1850  00A6  256E               	fcall	___lbdiv
  1851  00A7  3EFF               	addlw	255
  1852  00A8  00C3               	movwf	_lockLedStep
  1853  00A9                     l3360:	
  1854                           
  1855                           ;main.c: 435: }
  1856                           ;main.c: 436: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  1857  00A9  3006               	movlw	6
  1858  00AA  0278               	subwf	_batADValue+1,w
  1859  00AB  300F               	movlw	15
  1860  00AC  1903               	skipnz
  1861  00AD  0277               	subwf	_batADValue,w
  1862  00AE  1803               	skipnc
  1863  00AF  28BF               	goto	l3364
  1864  00B0  0840               	movf	_chrgMaxAD,w
  1865  00B1  3E02               	addlw	2
  1866  00B2  00D9               	movwf	??_chrgCtr
  1867  00B3  3000               	movlw	0
  1868  00B4  1803               	skipnc
  1869  00B5  3001               	movlw	1
  1870  00B6  00DA               	movwf	??_chrgCtr+1
  1871  00B7  082D               	movf	_outADValue+1,w
  1872  00B8  025A               	subwf	??_chrgCtr+1,w
  1873  00B9  1D03               	skipz
  1874  00BA  28BD               	goto	u3715
  1875  00BB  082C               	movf	_outADValue,w
  1876  00BC  0259               	subwf	??_chrgCtr,w
  1877  00BD                     u3715:	
  1878  00BD  1803               	skipnc
  1879  00BE  28CE               	goto	l3376
  1880  00BF                     l3364:	
  1881                           
  1882                           ;main.c: 437: {
  1883                           ;main.c: 438: if(++subTime > chrgWaitTime)
  1884  00BF  0ABD               	incf	_subTime,f
  1885  00C0  083D               	movf	_subTime,w
  1886  00C1  023C               	subwf	_chrgWaitTime,w
  1887  00C2  1803               	skipnc
  1888  00C3  28CC               	goto	l3374
  1889                           
  1890                           ;main.c: 439: {
  1891                           ;main.c: 440: if(chrgMaxDuty > 1)
  1892  00C4  3002               	movlw	2
  1893  00C5  023B               	subwf	_chrgMaxDuty,w
  1894  00C6  1C03               	skipc
  1895  00C7  28C9               	goto	l3370
  1896                           
  1897                           ;main.c: 441: {
  1898                           ;main.c: 442: chrgMaxDuty--;
  1899  00C8  03BB               	decf	_chrgMaxDuty,f
  1900  00C9                     l3370:	
  1901  00C9  3032               	movlw	50
  1902                           
  1903                           ;main.c: 443: }
  1904                           ;main.c: 444: subTime = 0;
  1905  00CA  01BD               	clrf	_subTime
  1906                           
  1907                           ;main.c: 445: chrgWaitTime = 50;
  1908  00CB  00BC               	movwf	_chrgWaitTime
  1909  00CC                     l3374:	
  1910                           
  1911                           ;main.c: 446: }
  1912                           ;main.c: 447: addTime = 0;
  1913  00CC  01BE               	clrf	_addTime
  1914                           
  1915                           ;main.c: 448: }
  1916  00CD  28EE               	goto	l3390
  1917  00CE                     l3376:	
  1918                           
  1919                           ;main.c: 449: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1920  00CE  3006               	movlw	6
  1921  00CF  0278               	subwf	_batADValue+1,w
  1922  00D0  300E               	movlw	14
  1923  00D1  1903               	skipnz
  1924  00D2  0277               	subwf	_batADValue,w
  1925  00D3  1803               	skipnc
  1926  00D4  28EE               	goto	l3390
  1927  00D5  0840               	movf	_chrgMaxAD,w
  1928  00D6  3EFC               	addlw	252
  1929  00D7  00D9               	movwf	??_chrgCtr
  1930  00D8  30FF               	movlw	255
  1931  00D9  1803               	skipnc
  1932  00DA  3000               	movlw	0
  1933  00DB  00DA               	movwf	??_chrgCtr+1
  1934  00DC  022D               	subwf	_outADValue+1,w
  1935  00DD  1D03               	skipz
  1936  00DE  28E1               	goto	u3755
  1937  00DF  0859               	movf	??_chrgCtr,w
  1938  00E0  022C               	subwf	_outADValue,w
  1939  00E1                     u3755:	
  1940  00E1  1803               	skipnc
  1941  00E2  28EE               	goto	l3390
  1942                           
  1943                           ;main.c: 450: {
  1944                           ;main.c: 451: if(++addTime > chrgWaitTime)
  1945  00E3  0ABE               	incf	_addTime,f
  1946  00E4  083E               	movf	_addTime,w
  1947  00E5  023C               	subwf	_chrgWaitTime,w
  1948  00E6  1803               	skipnc
  1949  00E7  28ED               	goto	l3388
  1950  00E8  304B               	movlw	75
  1951                           
  1952                           ;main.c: 452: {
  1953                           ;main.c: 453: addTime = 0;
  1954  00E9  01BE               	clrf	_addTime
  1955                           
  1956                           ;main.c: 454: if(chrgMaxDuty < 75)
  1957  00EA  023B               	subwf	_chrgMaxDuty,w
  1958  00EB  1C03               	btfss	3,0
  1959                           
  1960                           ;main.c: 455: {
  1961                           ;main.c: 456: chrgMaxDuty++;
  1962  00EC  0ABB               	incf	_chrgMaxDuty,f
  1963  00ED                     l3388:	
  1964                           
  1965                           ;main.c: 457: }
  1966                           ;main.c: 458: }
  1967                           ;main.c: 459: subTime = 0;
  1968  00ED  01BD               	clrf	_subTime
  1969  00EE                     l3390:	
  1970                           
  1971                           ;main.c: 460: }
  1972                           ;main.c: 463: if(chrgPwmFlag == 0)
  1973  00EE  0835               	movf	_chrgPwmFlag,w
  1974  00EF  1D03               	btfss	3,2
  1975  00F0  28F2               	goto	l3394
  1976                           
  1977                           ;main.c: 464: {
  1978                           ;main.c: 465: chrgPwmInit();
  1979  00F1  25A3               	fcall	_chrgPwmInit
  1980  00F2                     l3394:	
  1981                           
  1982                           ;main.c: 466: }
  1983                           ;main.c: 467: PWMD23H = 0X00;
  1984  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1985  00F3  019E               	clrf	30	;volatile
  1986                           
  1987                           ;main.c: 468: PWMD2L = chrgMaxDuty;
  1988  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1989  00F5  083B               	movf	_chrgMaxDuty,w
  1990  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1991  00F7  009B               	movwf	27	;volatile
  1992  00F8  0008               	return
  1993  00F9                     l3398:	
  1994  00F9  3014               	movlw	20
  1995                           
  1996                           ;main.c: 474: chrgFlag = 0;
  1997  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1998  00FB  01D4               	clrf	_chrgFlag
  1999                           
  2000                           ;main.c: 475: chrgFullFlag = 0;
  2001  00FC  01D3               	clrf	_chrgFullFlag
  2002                           
  2003                           ;main.c: 476: protectFlag = 0;
  2004  00FD  01D0               	clrf	_protectFlag
  2005                           
  2006                           ;main.c: 477: chrgMode = 0;
  2007  00FE  01C1               	clrf	_chrgMode
  2008                           
  2009                           ;main.c: 478: chrgMaxAD = 0;
  2010  00FF  01C0               	clrf	_chrgMaxAD
  2011                           
  2012                           ;main.c: 479: chrgMaxDuty = 0;
  2013  0100  01BB               	clrf	_chrgMaxDuty
  2014                           
  2015                           ;main.c: 480: lockCount = 0;
  2016  0101  01BF               	clrf	_lockCount
  2017                           
  2018                           ;main.c: 481: lockLedStep = 0;
  2019  0102  01C3               	clrf	_lockLedStep
  2020                           
  2021                           ;main.c: 482: chrgWaitTime = 20;
  2022  0103  00BC               	movwf	_chrgWaitTime
  2023                           
  2024                           ;main.c: 483: chrgPwmStop();
  2025  0104  25E3               	fcall	_chrgPwmStop
  2026                           
  2027                           ;main.c: 484: if(prePwStep > 0 && prePwStep > pwStep)
  2028  0105  0879               	movf	_prePwStep,w
  2029  0106  1903               	btfsc	3,2
  2030  0107  2915               	goto	l3414
  2031  0108  0879               	movf	_prePwStep,w
  2032  0109  0245               	subwf	_pwStep,w
  2033  010A  1803               	skipnc
  2034  010B  2915               	goto	l3414
  2035                           
  2036                           ;main.c: 485: {
  2037                           ;main.c: 486: if(++count50s > 3000)
  2038  010C  2118               	fcall	PL8	;call to abstracted procedure
  2039  010D  1903               	skipnz
  2040  010E  022A               	subwf	_count50s,w
  2041  010F  1C03               	skipc
  2042  0110  0008               	return
  2043                           
  2044                           ;main.c: 487: {
  2045                           ;main.c: 488: count50s = 0;
  2046  0111  01AA               	clrf	_count50s
  2047  0112  01AB               	clrf	_count50s+1
  2048                           
  2049                           ;main.c: 489: prePwStep--;
  2050  0113  03F9               	decf	_prePwStep,f
  2051  0114  0008               	return
  2052  0115                     l3414:	
  2053                           
  2054                           ;main.c: 492: else
  2055                           ;main.c: 493: {
  2056                           ;main.c: 494: count50s = 0;
  2057  0115  01AA               	clrf	_count50s
  2058  0116  01AB               	clrf	_count50s+1
  2059  0117  0008               	return
  2060  0118                     __end_of_chrgCtr:	
  2061  0118                     PL8:	
  2062  0118  0AAA               	incf	_count50s,f
  2063  0119  1903               	skipnz
  2064  011A  0AAB               	incf	_count50s+1,f
  2065  011B  300B               	movlw	11
  2066  011C  022B               	subwf	_count50s+1,w
  2067  011D  34B9               	retlw	185
  2068  011E                     __end_ofPL8:	
  2069                           
  2070                           	psect	text9
  2071  05DC                     __ptext9:	
  2072 ;; *************** function _pwmStop *****************
  2073 ;; Defined at:
  2074 ;;		line 1002 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 100/0
  2085 ;;		On exit  : 100/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1
  2088 ;;      Params:         0       0       0
  2089 ;;      Locals:         0       0       0
  2090 ;;      Temps:          0       0       0
  2091 ;;      Totals:         0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    2
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_chrgCtr
  2099 ;;		_workCtr
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function _pwmStop
  2105  05DC                     _pwmStop:	
  2106                           
  2107                           ;main.c: 1004: if(motorPwmFlag)
  2108                           
  2109                           ;incstack = 0
  2110                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2111  05DC  0834               	movf	_motorPwmFlag,w
  2112  05DD  1903               	btfsc	3,2
  2113  05DE  0008               	return
  2114                           
  2115                           ;main.c: 1005: {
  2116                           ;main.c: 1006: motorPwmFlag = 0;
  2117  05DF  01B4               	clrf	_motorPwmFlag
  2118                           
  2119                           ;main.c: 1007: PWMCON0 &= 0XF7;
  2120  05E0  1195               	bcf	21,3	;volatile
  2121                           
  2122                           ;main.c: 1008: RB4 = 0;
  2123  05E1  1206               	bcf	6,4	;volatile
  2124  05E2  0008               	return
  2125  05E3                     __end_of_pwmStop:	
  2126                           
  2127                           	psect	text10
  2128  05E3                     __ptext10:	
  2129 ;; *************** function _chrgPwmStop *****************
  2130 ;; Defined at:
  2131 ;;		line 976 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0
  2140 ;; Tracked objects:
  2141 ;;		On entry : 100/0
  2142 ;;		On exit  : 100/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1
  2145 ;;      Params:         0       0       0
  2146 ;;      Locals:         0       0       0
  2147 ;;      Temps:          0       0       0
  2148 ;;      Totals:         0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    2
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_chrgCtr
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _chrgPwmStop
  2161  05E3                     _chrgPwmStop:	
  2162  05E3                     l2214:	
  2163                           ;incstack = 0
  2164                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2165                           
  2166                           
  2167                           ;main.c: 978: if(chrgPwmFlag)
  2168  05E3  0835               	movf	_chrgPwmFlag,w
  2169  05E4  1903               	btfsc	3,2
  2170  05E5  0008               	return
  2171                           
  2172                           ;main.c: 979: {
  2173                           ;main.c: 980: chrgPwmFlag = 0;
  2174  05E6  01B5               	clrf	_chrgPwmFlag
  2175                           
  2176                           ;main.c: 981: PWMCON0 &= 0xFB;
  2177  05E7  1115               	bcf	21,2	;volatile
  2178                           
  2179                           ;main.c: 982: RB3 = 0;
  2180  05E8  1186               	bcf	6,3	;volatile
  2181  05E9  0008               	return
  2182  05EA                     __end_of_chrgPwmStop:	
  2183                           
  2184                           	psect	text11
  2185  05A3                     __ptext11:	
  2186 ;; *************** function _chrgPwmInit *****************
  2187 ;; Defined at:
  2188 ;;		line 958 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, status,2
  2197 ;; Tracked objects:
  2198 ;;		On entry : 100/0
  2199 ;;		On exit  : 100/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1
  2202 ;;      Params:         0       0       0
  2203 ;;      Locals:         0       0       0
  2204 ;;      Temps:          0       0       0
  2205 ;;      Totals:         0       0       0
  2206 ;;Total ram usage:        0 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    2
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		_chrgCtr
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           
  2217                           ;psect for function _chrgPwmInit
  2218  05A3                     _chrgPwmInit:	
  2219                           
  2220                           ;main.c: 960: chrgPwmFlag = 1;
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2224  05A3  01B5               	clrf	_chrgPwmFlag
  2225  05A4  0AB5               	incf	_chrgPwmFlag,f
  2226                           
  2227                           ;main.c: 961: PWMCON1 = 0B00000000;
  2228                           
  2229                           ;main.c: 963: PWMTH = 0X00;
  2230                           
  2231                           ;main.c: 964: PWMTL = 100;
  2232                           
  2233                           ;main.c: 968: PWMD23H = 0;
  2234  05A5  25AB               	fcall	PL10	;call to abstracted procedure
  2235                           
  2236                           ;main.c: 969: PWMD2L = 10;
  2237  05A6  300A               	movlw	10
  2238  05A7  009B               	movwf	27	;volatile
  2239                           
  2240                           ;main.c: 970: PWM23DT = 0X00;
  2241  05A8  019D               	clrf	29	;volatile
  2242                           
  2243                           ;main.c: 972: PWMCON0 = 0X04;
  2244  05A9  3004               	movlw	4
  2245                           
  2246                           ;main.c: 973: PWMCON2 =0X00;
  2247  05AA  2DB2               	ljmp	PL12	;call to abstracted procedure
  2248  05AB                     __end_of_chrgPwmInit:	
  2249  05AB                     PL10:	
  2250  05AB  0196               	clrf	22	;volatile
  2251  05AC  0198               	clrf	24	;volatile
  2252  05AD  3064               	movlw	100
  2253  05AE  0097               	movwf	23	;volatile
  2254  05AF  1683               	bsf	3,5	;RP0=1, select bank1
  2255  05B0  019E               	clrf	30	;volatile
  2256  05B1  0008               	return
  2257  05B2                     __end_ofPL10:	
  2258  05B2                     PL12:	
  2259  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  2260  05B3  0095               	movwf	21	;volatile
  2261  05B4  019D               	clrf	29	;volatile
  2262  05B5  0008               	return
  2263  05B6                     __end_ofPL12:	
  2264                           
  2265                           	psect	text12
  2266  056E                     __ptext12:	
  2267 ;; *************** function ___lbdiv *****************
  2268 ;; Defined at:
  2269 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  dividend        1    wreg     unsigned char 
  2272 ;;  divisor         1    3[COMMON] unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  dividend        1    4[COMMON] unsigned char 
  2275 ;;  quotient        1    6[COMMON] unsigned char 
  2276 ;;  counter         1    5[COMMON] unsigned char 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      unsigned char 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0
  2281 ;; Tracked objects:
  2282 ;;		On entry : 100/0
  2283 ;;		On exit  : 100/0
  2284 ;;		Unchanged: 100/0
  2285 ;; Data sizes:     COMMON   BANK0   BANK1
  2286 ;;      Params:         1       0       0
  2287 ;;      Locals:         3       0       0
  2288 ;;      Temps:          0       0       0
  2289 ;;      Totals:         4       0       0
  2290 ;;Total ram usage:        4 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    2
  2293 ;; This function calls:
  2294 ;;		Nothing
  2295 ;; This function is called by:
  2296 ;;		_ledCtr
  2297 ;;		_chrgCtr
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           
  2302                           ;psect for function ___lbdiv
  2303  056E                     ___lbdiv:	
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2307                           ;___lbdiv@dividend stored from wreg
  2308  056E  00F4               	movwf	___lbdiv@dividend
  2309  056F  01F6               	clrf	___lbdiv@quotient
  2310  0570  0873               	movf	___lbdiv@divisor,w
  2311  0571  1903               	btfsc	3,2
  2312  0572  2D87               	goto	l2400
  2313  0573  01F5               	clrf	___lbdiv@counter
  2314  0574                     l2386:	
  2315  0574  0AF5               	incf	___lbdiv@counter,f
  2316  0575  1BF3               	btfsc	___lbdiv@divisor,7
  2317  0576  2D7A               	goto	l1196
  2318  0577  1003               	clrc
  2319  0578  0DF3               	rlf	___lbdiv@divisor,f
  2320  0579  2D74               	goto	l2386
  2321  057A                     l1196:	
  2322  057A  1003               	clrc
  2323  057B  0DF6               	rlf	___lbdiv@quotient,f
  2324  057C  0873               	movf	___lbdiv@divisor,w
  2325  057D  0274               	subwf	___lbdiv@dividend,w
  2326  057E  1C03               	skipc
  2327  057F  2D84               	goto	L7
  2328  0580  0873               	movf	___lbdiv@divisor,w
  2329  0581  02F4               	subwf	___lbdiv@dividend,f
  2330  0582  1476               	bsf	___lbdiv@quotient,0
  2331  0583  1003               	clrc
  2332  0584                     L7:	
  2333  0584  0CF3               	rrf	___lbdiv@divisor,f
  2334  0585  0BF5               	decfsz	___lbdiv@counter,f
  2335  0586  2D7A               	goto	l1196
  2336  0587                     l2400:	
  2337  0587  0876               	movf	___lbdiv@quotient,w
  2338  0588  0008               	return
  2339  0589                     __end_of___lbdiv:	
  2340                           
  2341                           	psect	text13
  2342  0207                     __ptext13:	
  2343 ;; *************** function _checkOutA *****************
  2344 ;; Defined at:
  2345 ;;		line 652 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;		None
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  maxAout         1   20[BANK0 ] unsigned char 
  2350 ;;  maxtempV        1   19[BANK0 ] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0, pclath, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 100/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1
  2360 ;;      Params:         0       0       0
  2361 ;;      Locals:         0       2       0
  2362 ;;      Temps:          0       2       0
  2363 ;;      Totals:         0       4       0
  2364 ;;Total ram usage:        4 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    3
  2367 ;; This function calls:
  2368 ;;		_ADC_Sample
  2369 ;;		___bmul
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _checkOutA
  2377  0207                     _checkOutA:	
  2378                           
  2379                           ;main.c: 654: test_adc = ADC_Sample(0, 5);
  2380                           
  2381                           ;incstack = 0
  2382                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2383  0207  3005               	movlw	5
  2384  0208  00F3               	movwf	ADC_Sample@adldo
  2385  0209  3000               	movlw	0
  2386  020A  211E               	fcall	_ADC_Sample
  2387  020B  00D8               	movwf	_test_adc	;volatile
  2388                           
  2389                           ;main.c: 655: if (0xA5 == test_adc)
  2390  020C  30A5               	movlw	165
  2391  020D  0658               	xorwf	_test_adc,w	;volatile
  2392  020E  1D03               	btfss	3,2
  2393  020F  2AAF               	goto	l3260
  2394                           
  2395                           ;main.c: 656: {
  2396                           ;main.c: 657: if(chrgFlag && adresult > 210)
  2397  0210  0854               	movf	_chrgFlag,w
  2398  0211  1903               	btfsc	3,2
  2399  0212  2A23               	goto	l3176
  2400  0213  3000               	movlw	0
  2401  0214  0233               	subwf	_adresult+1,w	;volatile
  2402  0215  30D3               	movlw	211
  2403  0216  1903               	skipnz
  2404  0217  0232               	subwf	_adresult,w	;volatile
  2405  0218  1C03               	skipc
  2406  0219  2A23               	goto	l3176
  2407                           
  2408                           ;main.c: 658: {
  2409                           ;main.c: 659: if(++overChrgTime > 10)
  2410  021A  300B               	movlw	11
  2411  021B  0AC6               	incf	_overChrgTime,f
  2412  021C  0246               	subwf	_overChrgTime,w
  2413  021D  1C03               	skipc
  2414  021E  2A24               	goto	l3178
  2415  021F  3002               	movlw	2
  2416                           
  2417                           ;main.c: 660: {
  2418                           ;main.c: 661: overChrgTime = 0;
  2419  0220  01C6               	clrf	_overChrgTime
  2420                           
  2421                           ;main.c: 662: protectFlag = 2;
  2422  0221  00D0               	movwf	_protectFlag
  2423  0222  2A24               	goto	l3178
  2424  0223                     l3176:	
  2425                           
  2426                           ;main.c: 666: else
  2427                           ;main.c: 667: {
  2428                           ;main.c: 668: overChrgTime = 0;
  2429  0223  01C6               	clrf	_overChrgTime
  2430  0224                     l3178:	
  2431                           
  2432                           ;main.c: 669: }
  2433                           ;main.c: 670: outADValue = adresult;
  2434  0224  0833               	movf	_adresult+1,w	;volatile
  2435  0225  00AD               	movwf	_outADValue+1
  2436  0226  0832               	movf	_adresult,w	;volatile
  2437  0227  00AC               	movwf	_outADValue
  2438                           
  2439                           ;main.c: 672: if(workStep && (outADValue > 600))
  2440  0228  087A               	movf	_workStep,w
  2441  0229  1903               	btfsc	3,2
  2442  022A  2A3A               	goto	l3188
  2443  022B  3002               	movlw	2
  2444  022C  022D               	subwf	_outADValue+1,w
  2445  022D  3059               	movlw	89
  2446  022E  1903               	skipnz
  2447  022F  022C               	subwf	_outADValue,w
  2448  0230  1C03               	skipc
  2449  0231  2A3A               	goto	l3188
  2450                           
  2451                           ;main.c: 673: {
  2452                           ;main.c: 674: if(++workOverOutTime > 50)
  2453  0232  3033               	movlw	51
  2454  0233  0ACF               	incf	_workOverOutTime,f
  2455  0234  024F               	subwf	_workOverOutTime,w
  2456  0235  1C03               	skipc
  2457  0236  2A3B               	goto	l3190
  2458                           
  2459                           ;main.c: 675: {
  2460                           ;main.c: 676: workOverOutTime = 0;
  2461  0237  01CF               	clrf	_workOverOutTime
  2462                           
  2463                           ;main.c: 677: workStep = 0;
  2464  0238  01FA               	clrf	_workStep
  2465  0239  2A3B               	goto	l3190
  2466  023A                     l3188:	
  2467                           
  2468                           ;main.c: 680: else
  2469                           ;main.c: 681: {
  2470                           ;main.c: 682: workOverOutTime = 0;
  2471  023A  01CF               	clrf	_workOverOutTime
  2472  023B                     l3190:	
  2473                           
  2474                           ;main.c: 683: }
  2475                           ;main.c: 684: unsigned char maxtempV = 130 + (workStep * 10);
  2476  023B  300A               	movlw	10
  2477  023C  00F3               	movwf	___bmul@multiplicand
  2478  023D  087A               	movf	_workStep,w
  2479  023E  25B6               	fcall	___bmul
  2480  023F  3E82               	addlw	130
  2481  0240  00EC               	movwf	checkOutA@maxtempV
  2482                           
  2483                           ;main.c: 685: if(jrStep > 0)
  2484  0241  0837               	movf	_jrStep,w
  2485  0242  1903               	btfsc	3,2
  2486  0243  2A4C               	goto	l3200
  2487                           
  2488                           ;main.c: 686: {
  2489                           ;main.c: 687: maxtempV = maxtempV - 40;
  2490  0244  30D8               	movlw	216
  2491  0245  07EC               	addwf	checkOutA@maxtempV,f
  2492                           
  2493                           ;main.c: 688: if(workStep < 5)
  2494  0246  3005               	movlw	5
  2495  0247  027A               	subwf	_workStep,w
  2496  0248  1803               	skipnc
  2497  0249  2A4C               	goto	l3200
  2498                           
  2499                           ;main.c: 689: {
  2500                           ;main.c: 690: maxtempV = maxtempV - 30;
  2501  024A  30E2               	movlw	226
  2502  024B  07EC               	addwf	checkOutA@maxtempV,f
  2503  024C                     l3200:	
  2504                           
  2505                           ;main.c: 691: }
  2506                           ;main.c: 692: }
  2507                           ;main.c: 693: if(outADValue > maxtempV)
  2508  024C  086C               	movf	checkOutA@maxtempV,w
  2509  024D  00EA               	movwf	??_checkOutA
  2510  024E  01EB               	clrf	??_checkOutA+1
  2511  024F  082D               	movf	_outADValue+1,w
  2512  0250  026B               	subwf	??_checkOutA+1,w
  2513  0251  1D03               	skipz
  2514  0252  2A55               	goto	u3385
  2515  0253  082C               	movf	_outADValue,w
  2516  0254  026A               	subwf	??_checkOutA,w
  2517  0255                     u3385:	
  2518  0255  1803               	skipnc
  2519  0256  2A5F               	goto	l3206
  2520                           
  2521                           ;main.c: 694: {
  2522                           ;main.c: 695: if(++overCount > 5)
  2523  0257  3006               	movlw	6
  2524  0258  0AC9               	incf	_overCount,f
  2525  0259  0249               	subwf	_overCount,w
  2526  025A  1C03               	skipc
  2527  025B  2AA8               	goto	l3256
  2528                           
  2529                           ;main.c: 696: {
  2530                           ;main.c: 697: overCount = 5;
  2531  025C  3005               	movlw	5
  2532  025D  00C9               	movwf	_overCount
  2533  025E  2AA8               	goto	l3256
  2534  025F                     l3206:	
  2535                           
  2536                           ;main.c: 700: else
  2537                           ;main.c: 701: {
  2538                           ;main.c: 703: if(overCount > 0)
  2539  025F  0849               	movf	_overCount,w
  2540  0260  1903               	btfsc	3,2
  2541  0261  2A63               	goto	l3210
  2542                           
  2543                           ;main.c: 704: {
  2544                           ;main.c: 705: overCount--;
  2545  0262  03C9               	decf	_overCount,f
  2546  0263                     l3210:	
  2547                           
  2548                           ;main.c: 706: }
  2549                           ;main.c: 707: unsigned char maxAout = 40;
  2550  0263  3028               	movlw	40
  2551  0264  00ED               	movwf	checkOutA@maxAout
  2552                           
  2553                           ;main.c: 708: if(pwStep < 40)
  2554  0265  0245               	subwf	_pwStep,w
  2555  0266  1803               	skipnc
  2556  0267  2A6A               	goto	l3216
  2557                           
  2558                           ;main.c: 709: {
  2559                           ;main.c: 710: maxAout = 37;
  2560  0268  3025               	movlw	37
  2561  0269  00ED               	movwf	checkOutA@maxAout
  2562  026A                     l3216:	
  2563                           
  2564                           ;main.c: 711: }
  2565                           ;main.c: 712: if(workStep == 1)
  2566  026A  0B7A               	decfsz	_workStep,w
  2567  026B  2A6E               	goto	l3220
  2568                           
  2569                           ;main.c: 713: {
  2570                           ;main.c: 714: maxAout = maxAout + 1;
  2571  026C  0AED               	incf	checkOutA@maxAout,f
  2572                           
  2573                           ;main.c: 715: }
  2574  026D  2A8A               	goto	l847
  2575  026E                     l3220:	
  2576                           
  2577                           ;main.c: 716: else if(workStep == 2)
  2578  026E  3002               	movlw	2
  2579  026F  067A               	xorwf	_workStep,w
  2580                           
  2581                           ;main.c: 717: {
  2582                           ;main.c: 718: maxAout = maxAout + 3;
  2583  0270  3003               	movlw	3
  2584  0271  1903               	btfsc	3,2
  2585  0272  2A89               	goto	L11
  2586                           
  2587                           ;main.c: 720: else if(workStep == 3)
  2588                           
  2589                           ;main.c: 719: }
  2590  0273  067A               	xorwf	_workStep,w
  2591  0274  1D03               	btfss	3,2
  2592  0275  2A78               	goto	l3228
  2593                           
  2594                           ;main.c: 721: {
  2595                           ;main.c: 722: maxAout = maxAout + 5;
  2596  0276  3005               	movlw	5
  2597  0277  2A89               	goto	L11
  2598  0278                     l3228:	
  2599                           ;main.c: 723: }
  2600                           
  2601                           
  2602                           ;main.c: 724: else if(workStep == 4)
  2603  0278  3004               	movlw	4
  2604  0279  067A               	xorwf	_workStep,w
  2605  027A  1D03               	btfss	3,2
  2606  027B  2A7E               	goto	l3232
  2607                           
  2608                           ;main.c: 725: {
  2609                           ;main.c: 726: maxAout = maxAout + 7;
  2610  027C  3007               	movlw	7
  2611  027D  2A89               	goto	L11
  2612  027E                     l3232:	
  2613                           ;main.c: 727: }
  2614                           
  2615                           
  2616                           ;main.c: 728: else if(workStep == 5)
  2617  027E  3005               	movlw	5
  2618  027F  067A               	xorwf	_workStep,w
  2619  0280  1D03               	btfss	3,2
  2620  0281  2A84               	goto	l3236
  2621                           
  2622                           ;main.c: 729: {
  2623                           ;main.c: 730: maxAout = maxAout + 9;
  2624  0282  3009               	movlw	9
  2625  0283  2A89               	goto	L11
  2626  0284                     l3236:	
  2627                           ;main.c: 731: }
  2628                           
  2629                           
  2630                           ;main.c: 732: else if(workStep == 6)
  2631  0284  3006               	movlw	6
  2632  0285  067A               	xorwf	_workStep,w
  2633  0286  1D03               	btfss	3,2
  2634  0287  2A8A               	goto	l847
  2635                           
  2636                           ;main.c: 733: {
  2637                           ;main.c: 734: maxAout = maxAout + 12;
  2638  0288  300C               	movlw	12
  2639  0289                     L11:	
  2640  0289  07ED               	addwf	checkOutA@maxAout,f
  2641  028A                     l847:	
  2642                           
  2643                           ;main.c: 735: }
  2644                           ;main.c: 736: if(overCount > 0)
  2645  028A  0849               	movf	_overCount,w
  2646  028B  1D03               	btfss	3,2
  2647                           
  2648                           ;main.c: 737: {
  2649                           ;main.c: 738: overCount--;
  2650  028C  03C9               	decf	_overCount,f
  2651                           
  2652                           ;main.c: 739: }
  2653                           ;main.c: 740: if(outADValue > maxAout)
  2654  028D  086D               	movf	checkOutA@maxAout,w
  2655  028E  00EA               	movwf	??_checkOutA
  2656  028F  01EB               	clrf	??_checkOutA+1
  2657  0290  082D               	movf	_outADValue+1,w
  2658  0291  026B               	subwf	??_checkOutA+1,w
  2659  0292  1D03               	skipz
  2660  0293  2A96               	goto	u3495
  2661  0294  082C               	movf	_outADValue,w
  2662  0295  026A               	subwf	??_checkOutA,w
  2663  0296                     u3495:	
  2664  0296  1803               	skipnc
  2665  0297  2AA3               	goto	l3250
  2666                           
  2667                           ;main.c: 741: {
  2668                           ;main.c: 743: if(startTime == 0)
  2669  0298  0847               	movf	_startTime,w
  2670  0299  1D03               	btfss	3,2
  2671  029A  2AA0               	goto	l3248
  2672                           
  2673                           ;main.c: 744: {
  2674                           ;main.c: 745: tempDuty = 81 + (workStep*3);
  2675  029B  087A               	movf	_workStep,w
  2676  029C  077A               	addwf	_workStep,w
  2677  029D  077A               	addwf	_workStep,w
  2678  029E  3E51               	addlw	81
  2679  029F  2AA1               	goto	L12
  2680  02A0                     l3248:	
  2681                           ;main.c: 746: }
  2682                           
  2683                           
  2684                           ;main.c: 747: else
  2685                           ;main.c: 748: {
  2686                           ;main.c: 749: tempDuty = maxDuty;
  2687  02A0  084A               	movf	_maxDuty,w
  2688  02A1                     L12:	
  2689  02A1  00C8               	movwf	_tempDuty
  2690  02A2  2AA8               	goto	l3256
  2691  02A3                     l3250:	
  2692                           
  2693                           ;main.c: 757: if(tempDuty > maxDuty)
  2694  02A3  0848               	movf	_tempDuty,w
  2695  02A4  024A               	subwf	_maxDuty,w
  2696  02A5  1803               	skipnc
  2697  02A6  2AA0               	goto	l3248
  2698                           
  2699                           ;main.c: 758: {
  2700                           ;main.c: 759: tempDuty--;
  2701  02A7  03C8               	decf	_tempDuty,f
  2702  02A8                     l3256:	
  2703                           ;main.c: 760: }
  2704                           
  2705                           
  2706                           ;main.c: 764: }
  2707                           ;main.c: 766: }
  2708                           ;main.c: 768: }
  2709                           ;main.c: 769: PWMD23H = 0X00;
  2710  02A8  1683               	bsf	3,5	;RP0=1, select bank1
  2711  02A9  019E               	clrf	30	;volatile
  2712                           
  2713                           ;main.c: 770: PWMD3L = tempDuty;
  2714  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2715  02AB  0848               	movf	_tempDuty,w
  2716  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  2717  02AD  009C               	movwf	28	;volatile
  2718                           
  2719                           ;main.c: 771: }
  2720  02AE  0008               	return
  2721  02AF                     l3260:	
  2722                           
  2723                           ;main.c: 772: else
  2724                           ;main.c: 773: {
  2725                           ;main.c: 774: ADCON0 = 0;
  2726  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  2727  02B0  0195               	clrf	21	;volatile
  2728                           
  2729                           ;main.c: 775: ADCON1 = 0;
  2730  02B1  0196               	clrf	22	;volatile
  2731                           
  2732                           ;main.c: 776: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2733  02B2  3084               	movlw	132
  2734  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2735  02B4  00EA               	movwf	??_checkOutA
  2736  02B5                     u4207:	
  2737  02B5  0BEA               	decfsz	??_checkOutA,f
  2738  02B6  2AB5               	goto	u4207
  2739  02B7  2AB8               	nop2
  2740  02B8  0008               	return
  2741  02B9                     __end_of_checkOutA:	
  2742                           
  2743                           	psect	text14
  2744  05B6                     __ptext14:	
  2745 ;; *************** function ___bmul *****************
  2746 ;; Defined at:
  2747 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  multiplier      1    wreg     unsigned char 
  2750 ;;  multiplicand    1    3[COMMON] unsigned char 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  multiplier      1    5[COMMON] unsigned char 
  2753 ;;  product         1    4[COMMON] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      unsigned char 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 100/0
  2760 ;;		On exit  : 100/0
  2761 ;;		Unchanged: 100/0
  2762 ;; Data sizes:     COMMON   BANK0   BANK1
  2763 ;;      Params:         1       0       0
  2764 ;;      Locals:         2       0       0
  2765 ;;      Temps:          0       0       0
  2766 ;;      Totals:         3       0       0
  2767 ;;Total ram usage:        3 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    2
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_checkOutA
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           
  2778                           ;psect for function ___bmul
  2779  05B6                     ___bmul:	
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2783                           ;___bmul@multiplier stored from wreg
  2784  05B6  00F5               	movwf	___bmul@multiplier
  2785  05B7  01F4               	clrf	___bmul@product
  2786  05B8                     l2368:	
  2787  05B8  0873               	movf	___bmul@multiplicand,w
  2788  05B9  1875               	btfsc	___bmul@multiplier,0
  2789  05BA  07F4               	addwf	___bmul@product,f
  2790  05BB  1003               	clrc
  2791  05BC  0DF3               	rlf	___bmul@multiplicand,f
  2792  05BD  1003               	clrc
  2793  05BE  0CF5               	rrf	___bmul@multiplier,f
  2794  05BF  0875               	movf	___bmul@multiplier,w
  2795  05C0  1D03               	btfss	3,2
  2796  05C1  2DB8               	goto	l2368
  2797  05C2  0874               	movf	___bmul@product,w
  2798  05C3  0008               	return
  2799  05C4                     __end_of___bmul:	
  2800                           
  2801                           	psect	text15
  2802  02B9                     __ptext15:	
  2803 ;; *************** function _checkBatAD *****************
  2804 ;; Defined at:
  2805 ;;		line 780 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0, pclath, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1
  2819 ;;      Params:         0       0       0
  2820 ;;      Locals:         0       0       0
  2821 ;;      Temps:          2       0       0
  2822 ;;      Totals:         2       0       0
  2823 ;;Total ram usage:        2 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    3
  2826 ;; This function calls:
  2827 ;;		_ADC_Sample
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           
  2834                           ;psect for function _checkBatAD
  2835  02B9                     _checkBatAD:	
  2836                           
  2837                           ;main.c: 782: test_adc = ADC_Sample(2, 5);
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2841  02B9  3005               	movlw	5
  2842  02BA  00F3               	movwf	ADC_Sample@adldo
  2843  02BB  3002               	movlw	2
  2844  02BC  211E               	fcall	_ADC_Sample
  2845  02BD  00D8               	movwf	_test_adc	;volatile
  2846                           
  2847                           ;main.c: 783: if (0xA5 == test_adc)
  2848  02BE  30A5               	movlw	165
  2849  02BF  0658               	xorwf	_test_adc,w	;volatile
  2850  02C0  1D03               	btfss	3,2
  2851  02C1  2B1A               	goto	l3448
  2852                           
  2853                           ;main.c: 784: {
  2854                           ;main.c: 785: batADValue = adresult;
  2855  02C2  0833               	movf	_adresult+1,w	;volatile
  2856  02C3  00F8               	movwf	_batADValue+1
  2857  02C4  0832               	movf	_adresult,w	;volatile
  2858  02C5  00F7               	movwf	_batADValue
  2859                           
  2860                           ;main.c: 786: if(batADValue < 1117)
  2861  02C6  3004               	movlw	4
  2862  02C7  0278               	subwf	_batADValue+1,w
  2863  02C8  305D               	movlw	93
  2864  02C9  1903               	skipnz
  2865  02CA  0277               	subwf	_batADValue,w
  2866  02CB  1803               	skipnc
  2867  02CC  2AE0               	goto	l3430
  2868                           
  2869                           ;main.c: 787: {
  2870                           ;main.c: 788: pwStep = 0;
  2871  02CD  01C5               	clrf	_pwStep
  2872                           
  2873                           ;main.c: 789: if(++count8s > 800)
  2874  02CE  0AA2               	incf	_count8s,f
  2875  02CF  1903               	skipnz
  2876  02D0  0AA3               	incf	_count8s+1,f
  2877  02D1  3003               	movlw	3
  2878  02D2  0223               	subwf	_count8s+1,w
  2879  02D3  3021               	movlw	33
  2880  02D4  1903               	skipnz
  2881  02D5  0222               	subwf	_count8s,w
  2882  02D6  1C03               	skipc
  2883  02D7  2B0D               	goto	l3442
  2884                           
  2885                           ;main.c: 790: {
  2886                           ;main.c: 791: count8s = 0;
  2887  02D8  01A2               	clrf	_count8s
  2888  02D9  01A3               	clrf	_count8s+1
  2889                           
  2890                           ;main.c: 792: lowBatFlag = 1;
  2891  02DA  01B9               	clrf	_lowBatFlag
  2892  02DB  0AB9               	incf	_lowBatFlag,f
  2893                           
  2894                           ;main.c: 793: prePwStep = 0;
  2895  02DC  01F9               	clrf	_prePwStep
  2896                           
  2897                           ;main.c: 794: workStep = 0;
  2898  02DD  01FA               	clrf	_workStep
  2899                           
  2900                           ;main.c: 795: jrStep = 0;
  2901  02DE  01B7               	clrf	_jrStep
  2902  02DF  2B0D               	goto	l3442
  2903  02E0                     l3430:	
  2904  02E0  3005               	movlw	5
  2905                           
  2906                           ;main.c: 798: else
  2907                           ;main.c: 799: {
  2908                           ;main.c: 800: count8s = 0;
  2909  02E1  01A2               	clrf	_count8s
  2910  02E2  01A3               	clrf	_count8s+1
  2911                           
  2912                           ;main.c: 801: if(batADValue >= 1340)
  2913  02E3  0278               	subwf	_batADValue+1,w
  2914  02E4  303C               	movlw	60
  2915  02E5  1903               	skipnz
  2916  02E6  0277               	subwf	_batADValue,w
  2917                           
  2918                           ;main.c: 802: {
  2919                           ;main.c: 803: pwStep = ((batADValue - 1340) /2) + 13;
  2920  02E7  0877               	movf	_batADValue,w
  2921  02E8  1C03               	skipc
  2922  02E9  2AF7               	goto	L15
  2923  02EA  3EC4               	addlw	196
  2924  02EB  00F4               	movwf	??_checkBatAD
  2925  02EC  0878               	movf	_batADValue+1,w
  2926  02ED  1803               	skipnc
  2927  02EE  3E01               	addlw	1
  2928  02EF  3EFA               	addlw	250
  2929  02F0  00F5               	movwf	??_checkBatAD+1
  2930  02F1  1003               	clrc
  2931  02F2  0CF5               	rrf	??_checkBatAD+1,f
  2932  02F3  0CF4               	rrf	??_checkBatAD,f
  2933  02F4  0874               	movf	??_checkBatAD,w
  2934  02F5  3E0D               	addlw	13
  2935  02F6  2B06               	goto	L14
  2936  02F7                     L15:	
  2937                           ;main.c: 805: else
  2938                           ;main.c: 806: {
  2939                           ;main.c: 807: pwStep = (batADValue - 1117) / 16;
  2940                           
  2941                           ;main.c: 804: }
  2942                           
  2943  02F7  3EA3               	addlw	163
  2944  02F8  00F4               	movwf	??_checkBatAD
  2945  02F9  0878               	movf	_batADValue+1,w
  2946  02FA  1803               	skipnc
  2947  02FB  3E01               	addlw	1
  2948  02FC  3EFB               	addlw	251
  2949  02FD  00F5               	movwf	??_checkBatAD+1
  2950  02FE  3004               	movlw	4
  2951  02FF                     u3865:	
  2952  02FF  1003               	clrc
  2953  0300  0CF5               	rrf	??_checkBatAD+1,f
  2954  0301  0CF4               	rrf	??_checkBatAD,f
  2955  0302  3EFF               	addlw	-1
  2956  0303  1D03               	skipz
  2957  0304  2AFF               	goto	u3865
  2958  0305  0874               	movf	??_checkBatAD,w
  2959  0306                     L14:	
  2960  0306  00C5               	movwf	_pwStep
  2961                           
  2962                           ;main.c: 808: }
  2963                           ;main.c: 809: if(pwStep > 99)
  2964  0307  3064               	movlw	100
  2965  0308  0245               	subwf	_pwStep,w
  2966  0309  1C03               	skipc
  2967  030A  2B0D               	goto	l3442
  2968                           
  2969                           ;main.c: 810: {
  2970                           ;main.c: 811: pwStep = 99;
  2971  030B  3063               	movlw	99
  2972  030C  00C5               	movwf	_pwStep
  2973  030D                     l3442:	
  2974                           
  2975                           ;main.c: 812: }
  2976                           ;main.c: 813: }
  2977                           ;main.c: 814: if(chrgFlag && batADValue > 1861)
  2978  030D  0854               	movf	_chrgFlag,w
  2979  030E  1903               	btfsc	3,2
  2980  030F  2B21               	goto	l3452
  2981  0310  3007               	movlw	7
  2982  0311  0278               	subwf	_batADValue+1,w
  2983  0312  3046               	movlw	70
  2984  0313  1903               	skipnz
  2985  0314  0277               	subwf	_batADValue,w
  2986  0315  1C03               	skipc
  2987  0316  2B21               	goto	l3452
  2988                           
  2989                           ;main.c: 815: {
  2990                           ;main.c: 816: protectFlag = 1;
  2991  0317  01D0               	clrf	_protectFlag
  2992  0318  0AD0               	incf	_protectFlag,f
  2993  0319  2B21               	goto	l3452
  2994  031A                     l3448:	
  2995                           
  2996                           ;main.c: 819: else
  2997                           ;main.c: 820: {
  2998                           ;main.c: 821: ADCON0 = 0;
  2999  031A  1683               	bsf	3,5	;RP0=1, select bank1
  3000  031B  0195               	clrf	21	;volatile
  3001                           
  3002                           ;main.c: 822: ADCON1 = 0;
  3003  031C  0196               	clrf	22	;volatile
  3004                           
  3005                           ;main.c: 823: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3006  031D  3085               	movlw	133
  3007  031E  00F4               	movwf	??_checkBatAD
  3008  031F                     u4217:	
  3009  031F  0BF4               	decfsz	??_checkBatAD,f
  3010  0320  2B1F               	goto	u4217
  3011  0321                     l3452:	
  3012                           
  3013                           ;main.c: 824: }
  3014                           ;main.c: 826: test_adc = ADC_Sample(3, 5);
  3015  0321  3005               	movlw	5
  3016  0322  00F3               	movwf	ADC_Sample@adldo
  3017  0323  3003               	movlw	3
  3018  0324  211E               	fcall	_ADC_Sample
  3019  0325  00D8               	movwf	_test_adc	;volatile
  3020                           
  3021                           ;main.c: 827: if (0xA5 == test_adc)
  3022  0326  30A5               	movlw	165
  3023  0327  0658               	xorwf	_test_adc,w	;volatile
  3024  0328  1D03               	btfss	3,2
  3025  0329  2B55               	goto	l3472
  3026                           
  3027                           ;main.c: 828: {
  3028                           ;main.c: 829: if(chrgFlag && adresult > 100)
  3029  032A  0854               	movf	_chrgFlag,w
  3030  032B  1903               	btfsc	3,2
  3031  032C  0008               	return
  3032  032D  3000               	movlw	0
  3033  032E  0233               	subwf	_adresult+1,w	;volatile
  3034  032F  3065               	movlw	101
  3035  0330  1903               	skipnz
  3036  0331  0232               	subwf	_adresult,w	;volatile
  3037  0332  1C03               	skipc
  3038  0333  0008               	return
  3039                           
  3040                           ;main.c: 830: {
  3041                           ;main.c: 832: if(adresult > 810 || (batADValue - adresult) > 810)
  3042  0334  3003               	movlw	3
  3043  0335  0233               	subwf	_adresult+1,w	;volatile
  3044  0336  302B               	movlw	43
  3045  0337  1903               	skipnz
  3046  0338  0232               	subwf	_adresult,w	;volatile
  3047  0339  1803               	skipnc
  3048  033A  2B4A               	goto	l3464
  3049  033B  0832               	movf	_adresult,w	;volatile
  3050  033C  0277               	subwf	_batADValue,w
  3051  033D  00F4               	movwf	??_checkBatAD
  3052  033E  0833               	movf	_adresult+1,w	;volatile
  3053  033F  1C03               	skipc
  3054  0340  0A33               	incf	_adresult+1,w	;volatile
  3055  0341  0278               	subwf	_batADValue+1,w
  3056  0342  00F5               	movwf	??_checkBatAD+1
  3057  0343  3003               	movlw	3
  3058  0344  0275               	subwf	??_checkBatAD+1,w
  3059  0345  302B               	movlw	43
  3060  0346  1903               	skipnz
  3061  0347  0274               	subwf	??_checkBatAD,w
  3062  0348  1C03               	skipc
  3063  0349  2B53               	goto	l3470
  3064  034A                     l3464:	
  3065                           
  3066                           ;main.c: 833: {
  3067                           ;main.c: 835: if(++countHalfFull > 250)
  3068  034A  30FB               	movlw	251
  3069  034B  0AD1               	incf	_countHalfFull,f
  3070  034C  0251               	subwf	_countHalfFull,w
  3071  034D  1C03               	skipc
  3072  034E  0008               	return
  3073  034F  3002               	movlw	2
  3074                           
  3075                           ;main.c: 836: {
  3076                           ;main.c: 837: countHalfFull = 0;
  3077  0350  01D1               	clrf	_countHalfFull
  3078                           
  3079                           ;main.c: 838: protectFlag = 2;
  3080  0351  00D0               	movwf	_protectFlag
  3081  0352  0008               	return
  3082  0353                     l3470:	
  3083                           
  3084                           ;main.c: 841: else
  3085                           ;main.c: 842: {
  3086                           ;main.c: 843: countHalfFull = 0;
  3087  0353  01D1               	clrf	_countHalfFull
  3088                           
  3089                           ;main.c: 844: }
  3090                           ;main.c: 845: }
  3091                           ;main.c: 846: }
  3092  0354  0008               	return
  3093  0355                     l3472:	
  3094                           
  3095                           ;main.c: 847: else
  3096                           ;main.c: 848: {
  3097                           ;main.c: 849: ADCON0 = 0;
  3098  0355  1683               	bsf	3,5	;RP0=1, select bank1
  3099  0356  0195               	clrf	21	;volatile
  3100                           
  3101                           ;main.c: 850: ADCON1 = 0;
  3102  0357  0196               	clrf	22	;volatile
  3103                           
  3104                           ;main.c: 851: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3105  0358  3085               	movlw	133
  3106  0359  00F4               	movwf	??_checkBatAD
  3107  035A                     u4227:	
  3108  035A  0BF4               	decfsz	??_checkBatAD,f
  3109  035B  2B5A               	goto	u4227
  3110  035C  0008               	return
  3111  035D                     __end_of_checkBatAD:	
  3112                           
  3113                           	psect	text16
  3114  011E                     __ptext16:	
  3115 ;; *************** function _ADC_Sample *****************
  3116 ;; Defined at:
  3117 ;;		line 1097 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  adch            1    wreg     unsigned char 
  3120 ;;  adldo           1    3[COMMON] unsigned char 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  adch            1    5[BANK0 ] unsigned char 
  3123 ;;  j               1    4[BANK0 ] unsigned char 
  3124 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  3125 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  3126 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  3127 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  3128 ;;  i               1    6[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      unsigned char 
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, status,0
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 100/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1
  3138 ;;      Params:         1       0       0
  3139 ;;      Locals:         0      13       0
  3140 ;;      Temps:          0       4       0
  3141 ;;      Totals:         1      17       0
  3142 ;;Total ram usage:       18 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    2
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_checkOutA
  3149 ;;		_checkBatAD
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _ADC_Sample
  3155  011E                     _ADC_Sample:	
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3159                           ;ADC_Sample@adch stored from wreg
  3160  011E  1283               	bcf	3,5	;RP0=0, select bank0
  3161  011F  00DE               	movwf	ADC_Sample@adch
  3162                           
  3163                           ;main.c: 1099: volatile unsigned long adsum = 0;
  3164                           
  3165                           ;main.c: 1100: volatile unsigned int admin = 0, admax = 0;
  3166  0120  21F9               	fcall	PL4	;call to abstracted procedure
  3167                           
  3168                           ;main.c: 1101: volatile unsigned int ad_temp = 0;
  3169  0121  01E8               	clrf	ADC_Sample@ad_temp	;volatile
  3170  0122  01E9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3171                           
  3172                           ;main.c: 1103: if ((!LDO_EN) && (adldo & 0x04) )
  3173  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3174  0124  1D16               	btfss	22,2	;volatile
  3175  0125  1D73               	btfss	ADC_Sample@adldo,2
  3176  0126  2930               	goto	l3062
  3177                           
  3178                           ;main.c: 1104: {
  3179                           ;main.c: 1106: ADCON1 = adldo;
  3180  0127  0873               	movf	ADC_Sample@adldo,w
  3181  0128  0096               	movwf	22	;volatile
  3182                           
  3183                           ;main.c: 1107: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3184  0129  3084               	movlw	132
  3185  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3186  012B  00D9               	movwf	??_ADC_Sample
  3187  012C                     u4237:	
  3188  012C  0BD9               	decfsz	??_ADC_Sample,f
  3189  012D  292C               	goto	u4237
  3190  012E  292F               	nop2
  3191                           
  3192                           ;main.c: 1108: }
  3193  012F  2932               	goto	l3064
  3194  0130                     l3062:	
  3195                           
  3196                           ;main.c: 1109: else
  3197                           ;main.c: 1110: ADCON1 = adldo;
  3198  0130  0873               	movf	ADC_Sample@adldo,w
  3199  0131  0096               	movwf	22	;volatile
  3200  0132                     l3064:	
  3201                           
  3202                           ;main.c: 1112: if(adch & 0x10)
  3203  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0133  1E5E               	btfss	ADC_Sample@adch,4
  3205  0134  293A               	goto	l3072
  3206                           
  3207                           ;main.c: 1113: {
  3208                           ;main.c: 1114: CHS4 = 1;
  3209  0135  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0136  1716               	bsf	22,6	;volatile
  3211                           
  3212                           ;main.c: 1115: adch &= 0x0f;
  3213  0137  300F               	movlw	15
  3214  0138  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0139  05DE               	andwf	ADC_Sample@adch,f
  3216  013A                     l3072:	
  3217                           
  3218                           ;main.c: 1118: for (i = 0; i < 10; i++)
  3219  013A  01DF               	clrf	ADC_Sample@i
  3220  013B                     l3078:	
  3221                           
  3222                           ;main.c: 1119: {
  3223                           ;main.c: 1120: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3224  013B  085E               	movf	ADC_Sample@adch,w
  3225  013C  00D9               	movwf	??_ADC_Sample
  3226  013D  3001               	movlw	1
  3227  013E  1003               	clrc
  3228  013F                     L16:	
  3229  013F  0DD9               	rlf	??_ADC_Sample,f
  3230  0140  3EFF               	addlw	-1
  3231  0141  1003               	clrc
  3232  0142  1D03               	skipz
  3233  0143  293F               	goto	L16
  3234  0144  0D59               	rlf	??_ADC_Sample,w
  3235  0145  3841               	iorlw	65
  3236  0146  1683               	bsf	3,5	;RP0=1, select bank1
  3237  0147  0095               	movwf	21	;volatile
  3238  0148  0000               	nop	;# 
  3239  0149  0000               	nop	;# 
  3240  014A  0000               	nop	;# 
  3241  014B  0000               	nop	;# 
  3242                           
  3243                           ;main.c: 1125: GODONE = 1;
  3244  014C  1683               	bsf	3,5	;RP0=1, select bank1
  3245  014D  1495               	bsf	21,1	;volatile
  3246                           
  3247                           ;main.c: 1127: unsigned char j = 0;
  3248  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3249  014F  01DD               	clrf	ADC_Sample@j
  3250  0150                     l919:	
  3251                           ;main.c: 1128: while (GODONE)
  3252                           
  3253  0150  1683               	bsf	3,5	;RP0=1, select bank1
  3254  0151  1C95               	btfss	21,1	;volatile
  3255  0152  295B               	goto	l3088
  3256                           
  3257                           ;main.c: 1129: {
  3258                           ;main.c: 1130: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3259  0153  2954               	nop2	;2 cycle nop
  3260  0154  2955               	nop2	;2 cycle nop
  3261  0155  2956               	nop2	;2 cycle nop
  3262  0156  2957               	nop2	;2 cycle nop
  3263                           
  3264                           ;main.c: 1132: if (0 == (--j))
  3265  0157  1283               	bcf	3,5	;RP0=0, select bank0
  3266  0158  0BDD               	decfsz	ADC_Sample@j,f
  3267  0159  2950               	goto	l919
  3268                           
  3269                           ;main.c: 1133: return 0;
  3270  015A  3400               	retlw	0
  3271  015B                     l3088:	
  3272                           
  3273                           ;main.c: 1134: }
  3274                           ;main.c: 1136: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3275  015B  0819               	movf	25,w	;volatile
  3276  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3277  015D  00E8               	movwf	ADC_Sample@ad_temp	;volatile
  3278  015E  01E9               	clrf	ADC_Sample@ad_temp+1	;volatile
  3279  015F  0EE8               	swapf	ADC_Sample@ad_temp,f	;volatile
  3280  0160  0EE9               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3281  0161  30F0               	movlw	240
  3282  0162  05E9               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3283  0163  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3284  0164  390F               	andlw	15
  3285  0165  04E9               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3286  0166  30F0               	movlw	240
  3287  0167  05E8               	andwf	ADC_Sample@ad_temp,f	;volatile
  3288  0168  1683               	bsf	3,5	;RP0=1, select bank1
  3289  0169  0E18               	swapf	24,w	;volatile
  3290  016A  390F               	andlw	15
  3291  016B  1283               	bcf	3,5	;RP0=0, select bank0
  3292  016C  07E8               	addwf	ADC_Sample@ad_temp,f	;volatile
  3293  016D  1803               	skipnc
  3294  016E  0AE9               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3295                           
  3296                           ;main.c: 1138: if (0 == admax)
  3297  016F  0866               	movf	ADC_Sample@admax,w	;volatile
  3298  0170  0467               	iorwf	ADC_Sample@admax+1,w	;volatile
  3299  0171  1D03               	btfss	3,2
  3300  0172  2975               	goto	l3096
  3301                           
  3302                           ;main.c: 1139: {
  3303                           ;main.c: 1140: admax = ad_temp;
  3304  0173  2202               	fcall	PL14	;call to abstracted procedure
  3305  0174  2987               	goto	l3102
  3306  0175                     l3096:	
  3307                           ;main.c: 1142: }
  3308                           
  3309                           ;main.c: 1141: admin = ad_temp;
  3310                           
  3311                           
  3312                           ;main.c: 1143: else if (ad_temp > admax)
  3313  0175  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3314  0176  0267               	subwf	ADC_Sample@admax+1,w	;volatile
  3315  0177  1D03               	skipz
  3316  0178  297B               	goto	u3145
  3317  0179  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3318  017A  0266               	subwf	ADC_Sample@admax,w	;volatile
  3319  017B                     u3145:	
  3320  017B  1803               	skipnc
  3321  017C  297F               	goto	l3100
  3322                           
  3323                           ;main.c: 1144: admax = ad_temp;
  3324  017D  2202               	fcall	PL14	;call to abstracted procedure
  3325  017E  298B               	goto	l925
  3326  017F                     l3100:	
  3327                           
  3328                           ;main.c: 1145: else if (ad_temp < admin)
  3329  017F  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3330  0180  0269               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3331  0181  1D03               	skipz
  3332  0182  2985               	goto	u3155
  3333  0183  0864               	movf	ADC_Sample@admin,w	;volatile
  3334  0184  0268               	subwf	ADC_Sample@ad_temp,w	;volatile
  3335  0185                     u3155:	
  3336  0185  1803               	skipnc
  3337  0186  298B               	goto	l925
  3338  0187                     l3102:	
  3339                           
  3340                           ;main.c: 1146: admin = ad_temp;
  3341  0187  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3342  0188  00E5               	movwf	ADC_Sample@admin+1	;volatile
  3343  0189  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3344  018A  00E4               	movwf	ADC_Sample@admin	;volatile
  3345  018B                     l925:	
  3346                           
  3347                           ;main.c: 1148: adsum += ad_temp;
  3348  018B  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3349  018C  00D9               	movwf	??_ADC_Sample
  3350  018D  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3351  018E  00DA               	movwf	??_ADC_Sample+1
  3352  018F  01DB               	clrf	??_ADC_Sample+2
  3353  0190  01DC               	clrf	??_ADC_Sample+3
  3354  0191  0859               	movf	??_ADC_Sample,w
  3355  0192  07E0               	addwf	ADC_Sample@adsum,f	;volatile
  3356  0193  085A               	movf	??_ADC_Sample+1,w
  3357  0194  1103               	clrz
  3358  0195  1803               	skipnc
  3359  0196  3E01               	addlw	1
  3360  0197  1D03               	btfss	3,2
  3361  0198  07E1               	addwf	ADC_Sample@adsum+1,f	;volatile
  3362  0199  085B               	movf	??_ADC_Sample+2,w
  3363  019A  1103               	clrz
  3364  019B  1803               	skipnc
  3365  019C  3E01               	addlw	1
  3366  019D  1D03               	btfss	3,2
  3367  019E  07E2               	addwf	ADC_Sample@adsum+2,f	;volatile
  3368  019F  085C               	movf	??_ADC_Sample+3,w
  3369  01A0  1103               	clrz
  3370  01A1  1803               	skipnc
  3371  01A2  3E01               	addlw	1
  3372  01A3  1D03               	btfss	3,2
  3373  01A4  07E3               	addwf	ADC_Sample@adsum+3,f	;volatile
  3374  01A5  300A               	movlw	10
  3375  01A6  0ADF               	incf	ADC_Sample@i,f
  3376  01A7  025F               	subwf	ADC_Sample@i,w
  3377  01A8  1C03               	skipc
  3378  01A9  293B               	goto	l3078
  3379                           
  3380                           ;main.c: 1149: }
  3381                           ;main.c: 1150: adsum -= admax;
  3382  01AA  0866               	movf	ADC_Sample@admax,w	;volatile
  3383  01AB  00D9               	movwf	??_ADC_Sample
  3384  01AC  0867               	movf	ADC_Sample@admax+1,w	;volatile
  3385  01AD  21EA               	fcall	PL2	;call to abstracted procedure
  3386  01AE  1C03               	skipc
  3387  01AF  0F5C               	incfsz	??_ADC_Sample+3,w
  3388  01B0  02E3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3389                           
  3390                           ;main.c: 1151: if (adsum >= admin)
  3391  01B1  0864               	movf	ADC_Sample@admin,w	;volatile
  3392  01B2  00D9               	movwf	??_ADC_Sample
  3393  01B3  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3394  01B4  00DA               	movwf	??_ADC_Sample+1
  3395  01B5  01DB               	clrf	??_ADC_Sample+2
  3396  01B6  01DC               	clrf	??_ADC_Sample+3
  3397  01B7  085C               	movf	??_ADC_Sample+3,w
  3398  01B8  0263               	subwf	ADC_Sample@adsum+3,w	;volatile
  3399  01B9  1D03               	skipz
  3400  01BA  29C5               	goto	u3195
  3401  01BB  085B               	movf	??_ADC_Sample+2,w
  3402  01BC  0262               	subwf	ADC_Sample@adsum+2,w	;volatile
  3403  01BD  1D03               	skipz
  3404  01BE  29C5               	goto	u3195
  3405  01BF  085A               	movf	??_ADC_Sample+1,w
  3406  01C0  0261               	subwf	ADC_Sample@adsum+1,w	;volatile
  3407  01C1  1D03               	skipz
  3408  01C2  29C5               	goto	u3195
  3409  01C3  0859               	movf	??_ADC_Sample,w
  3410  01C4  0260               	subwf	ADC_Sample@adsum,w	;volatile
  3411  01C5                     u3195:	
  3412  01C5  1C03               	skipc
  3413  01C6  29CF               	goto	l929
  3414                           
  3415                           ;main.c: 1152: adsum -= admin;
  3416  01C7  0864               	movf	ADC_Sample@admin,w	;volatile
  3417  01C8  00D9               	movwf	??_ADC_Sample
  3418  01C9  0865               	movf	ADC_Sample@admin+1,w	;volatile
  3419  01CA  21EA               	fcall	PL2	;call to abstracted procedure
  3420  01CB  1C03               	skipc
  3421  01CC  0F5C               	incfsz	??_ADC_Sample+3,w
  3422  01CD  02E3               	subwf	ADC_Sample@adsum+3,f	;volatile
  3423  01CE  29D3               	goto	l3112
  3424  01CF                     l929:	
  3425                           
  3426                           ;main.c: 1153: else
  3427                           ;main.c: 1154: adsum = 0;
  3428  01CF  01E0               	clrf	ADC_Sample@adsum	;volatile
  3429  01D0  01E1               	clrf	ADC_Sample@adsum+1	;volatile
  3430  01D1  01E2               	clrf	ADC_Sample@adsum+2	;volatile
  3431  01D2  01E3               	clrf	ADC_Sample@adsum+3	;volatile
  3432  01D3                     l3112:	
  3433                           
  3434                           ;main.c: 1156: adresult = adsum >> 3;
  3435  01D3  0860               	movf	ADC_Sample@adsum,w	;volatile
  3436  01D4  00D9               	movwf	??_ADC_Sample
  3437  01D5  0861               	movf	ADC_Sample@adsum+1,w	;volatile
  3438  01D6  00DA               	movwf	??_ADC_Sample+1
  3439  01D7  0862               	movf	ADC_Sample@adsum+2,w	;volatile
  3440  01D8  00DB               	movwf	??_ADC_Sample+2
  3441  01D9  0863               	movf	ADC_Sample@adsum+3,w	;volatile
  3442  01DA  00DC               	movwf	??_ADC_Sample+3
  3443  01DB  3003               	movlw	3
  3444  01DC                     u3215:	
  3445  01DC  1003               	clrc
  3446  01DD  0CDC               	rrf	??_ADC_Sample+3,f
  3447  01DE  0CDB               	rrf	??_ADC_Sample+2,f
  3448  01DF  0CDA               	rrf	??_ADC_Sample+1,f
  3449  01E0  0CD9               	rrf	??_ADC_Sample,f
  3450  01E1  3EFF               	addlw	-1
  3451  01E2  1D03               	skipz
  3452  01E3  29DC               	goto	u3215
  3453  01E4  085A               	movf	??_ADC_Sample+1,w
  3454  01E5  00B3               	movwf	_adresult+1	;volatile
  3455  01E6  0859               	movf	??_ADC_Sample,w
  3456  01E7  00B2               	movwf	_adresult	;volatile
  3457                           
  3458                           ;main.c: 1158: adsum = 0;
  3459                           
  3460                           ;main.c: 1159: admin = 0;
  3461                           
  3462                           ;main.c: 1160: admax = 0;
  3463  01E8  21F9               	fcall	PL4	;call to abstracted procedure
  3464                           
  3465                           ;main.c: 1161: return 0xA5;
  3466  01E9  34A5               	retlw	165
  3467  01EA                     __end_of_ADC_Sample:	
  3468  01EA                     PL2:	
  3469  01EA  00DA               	movwf	??_ADC_Sample+1
  3470  01EB  01DB               	clrf	??_ADC_Sample+2
  3471  01EC  01DC               	clrf	??_ADC_Sample+3
  3472  01ED  0859               	movf	??_ADC_Sample,w
  3473  01EE  02E0               	subwf	ADC_Sample@adsum,f	;volatile
  3474  01EF  085A               	movf	??_ADC_Sample+1,w
  3475  01F0  1C03               	skipc
  3476  01F1  0F5A               	incfsz	??_ADC_Sample+1,w
  3477  01F2  02E1               	subwf	ADC_Sample@adsum+1,f	;volatile
  3478  01F3  085B               	movf	??_ADC_Sample+2,w
  3479  01F4  1C03               	skipc
  3480  01F5  0F5B               	incfsz	??_ADC_Sample+2,w
  3481  01F6  02E2               	subwf	ADC_Sample@adsum+2,f	;volatile
  3482  01F7  085C               	movf	??_ADC_Sample+3,w
  3483  01F8  0008               	return
  3484  01F9                     __end_ofPL2:	
  3485  01F9                     PL4:	
  3486  01F9  01E0               	clrf	ADC_Sample@adsum	;volatile
  3487  01FA  01E1               	clrf	ADC_Sample@adsum+1	;volatile
  3488  01FB  01E2               	clrf	ADC_Sample@adsum+2	;volatile
  3489  01FC  01E3               	clrf	ADC_Sample@adsum+3	;volatile
  3490  01FD  01E4               	clrf	ADC_Sample@admin	;volatile
  3491  01FE  01E5               	clrf	ADC_Sample@admin+1	;volatile
  3492  01FF  01E6               	clrf	ADC_Sample@admax	;volatile
  3493  0200  01E7               	clrf	ADC_Sample@admax+1	;volatile
  3494  0201  0008               	return
  3495  0202                     __end_ofPL4:	
  3496  0202                     PL14:	
  3497  0202  0869               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3498  0203  00E7               	movwf	ADC_Sample@admax+1	;volatile
  3499  0204  0868               	movf	ADC_Sample@ad_temp,w	;volatile
  3500  0205  00E6               	movwf	ADC_Sample@admax	;volatile
  3501  0206  0008               	return
  3502  0207                     __end_ofPL14:	
  3503                           
  3504                           	psect	text17
  3505  040B                     __ptext17:	
  3506 ;; *************** function _Sleep_Mode *****************
  3507 ;; Defined at:
  3508 ;;		line 1020 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, pclath, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 100/0
  3519 ;;		On exit  : 100/100
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1
  3522 ;;      Params:         0       0       0
  3523 ;;      Locals:         0       0       0
  3524 ;;      Temps:          0       0       0
  3525 ;;      Totals:         0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		_AD_Init
  3531 ;;		_Init_System
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _Sleep_Mode
  3539  040B                     _Sleep_Mode:	
  3540                           
  3541                           ;main.c: 1022: INTCON = 0;
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3545  040B  018B               	clrf	11	;volatile
  3546                           
  3547                           ;main.c: 1024: OPTION_REG = 0;
  3548  040C  0181               	clrf	1	;volatile
  3549                           
  3550                           ;main.c: 1026: WPUA = 0B00000000;
  3551  040D  1683               	bsf	3,5	;RP0=1, select bank1
  3552  040E  0188               	clrf	8	;volatile
  3553                           
  3554                           ;main.c: 1027: TRISA = 0x0F;
  3555  040F  300F               	movlw	15
  3556                           
  3557                           ;main.c: 1028: TRISB = 0x04;
  3558                           
  3559                           ;main.c: 1030: PORTA = 0X00;
  3560                           
  3561                           ;main.c: 1031: PORTB = 0X00;
  3562  0410  2444               	fcall	PL6	;call to abstracted procedure
  3563                           
  3564                           ;main.c: 1032: WPUB = 0x04;
  3565  0411  0088               	movwf	8	;volatile
  3566                           
  3567                           ;main.c: 1034: ADCON0 = 0;
  3568  0412  1683               	bsf	3,5	;RP0=1, select bank1
  3569  0413  0195               	clrf	21	;volatile
  3570                           
  3571                           ;main.c: 1035: ADCON1 = 0;
  3572  0414  0196               	clrf	22	;volatile
  3573                           
  3574                           ;main.c: 1037: PWMCON0 = 0;
  3575  0415  1283               	bcf	3,5	;RP0=0, select bank0
  3576  0416  0195               	clrf	21	;volatile
  3577                           
  3578                           ;main.c: 1039: OSCCON = 0X70;
  3579  0417  3070               	movlw	112
  3580  0418  0094               	movwf	20	;volatile
  3581                           
  3582                           ;main.c: 1041: IOCA = 0x02;
  3583  0419  3002               	movlw	2
  3584  041A  1683               	bsf	3,5	;RP0=1, select bank1
  3585  041B  0089               	movwf	9	;volatile
  3586                           
  3587                           ;main.c: 1042: IOCB = 0x04;
  3588  041C  3004               	movlw	4
  3589  041D  1283               	bcf	3,5	;RP0=0, select bank0
  3590  041E  0089               	movwf	9	;volatile
  3591                           
  3592                           ;main.c: 1044: RAIE = 1;
  3593  041F  158E               	bsf	14,3	;volatile
  3594                           
  3595                           ;main.c: 1045: PEIE = 1;
  3596  0420  170B               	bsf	11,6	;volatile
  3597                           
  3598                           ;main.c: 1046: RBIE = 1;
  3599  0421  158B               	bsf	11,3	;volatile
  3600                           
  3601                           ;main.c: 1047: GIE = 0;
  3602  0422  138B               	bcf	11,7	;volatile
  3603                           
  3604                           ;main.c: 1049: PIE1 &= 0X08;
  3605  0423  3008               	movlw	8
  3606  0424  058E               	andwf	14,f	;volatile
  3607                           
  3608                           ;main.c: 1050: PIR1 = 0;
  3609  0425  018D               	clrf	13	;volatile
  3610                           
  3611                           ;main.c: 1051: INTCON &= 0XC8;
  3612  0426  30C8               	movlw	200
  3613  0427  058B               	andwf	11,f	;volatile
  3614                           
  3615                           ;main.c: 1053: PORTA;
  3616  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3617  0429  0806               	movf	6,w	;volatile
  3618                           
  3619                           ;main.c: 1054: RAIF = 0;
  3620  042A  1283               	bcf	3,5	;RP0=0, select bank0
  3621  042B  118D               	bcf	13,3	;volatile
  3622                           
  3623                           ;main.c: 1055: PORTB;
  3624  042C  0806               	movf	6,w	;volatile
  3625                           
  3626                           ;main.c: 1056: RBIF = 0;
  3627  042D  100B               	bcf	11,0	;volatile
  3628  042E  0064               	clrwdt	;# 
  3629  042F  0063               	sleep	;# 
  3630  0430  0000               	nop	;# 
  3631  0431  0064               	clrwdt	;# 
  3632  0432  0000               	nop	;# 
  3633  0433  0000               	nop	;# 
  3634  0434  0000               	nop	;# 
  3635  0435  0000               	nop	;# 
  3636  0436  0000               	nop	;# 
  3637                           
  3638                           ;main.c: 1068: if(RAIF) RAIF = 0;
  3639  0437  1283               	bcf	3,5	;RP0=0, select bank0
  3640  0438  198D               	btfsc	13,3	;volatile
  3641  0439  118D               	bcf	13,3	;volatile
  3642                           
  3643                           ;main.c: 1069: if(RBIF) RBIF = 0;
  3644  043A  180B               	btfsc	11,0	;volatile
  3645  043B  100B               	bcf	11,0	;volatile
  3646                           
  3647                           ;main.c: 1070: if(TMR2IF) TMR2IF = 0;
  3648  043C  188D               	btfsc	13,1	;volatile
  3649  043D  108D               	bcf	13,1	;volatile
  3650                           
  3651                           ;main.c: 1071: IOCA = 0B00000000;
  3652  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3653  043F  0189               	clrf	9	;volatile
  3654                           
  3655                           ;main.c: 1072: IOCB = 0B00000000;
  3656  0440  1283               	bcf	3,5	;RP0=0, select bank0
  3657  0441  0189               	clrf	9	;volatile
  3658                           
  3659                           ;main.c: 1073: Init_System();
  3660  0442  2589               	fcall	_Init_System
  3661                           
  3662                           ;main.c: 1074: AD_Init();
  3663  0443  2DD4               	ljmp	l2208
  3664  0444                     __end_of_Sleep_Mode:	
  3665  0444                     PL6:	
  3666  0444  0085               	movwf	5	;volatile
  3667  0445  3004               	movlw	4
  3668  0446  1283               	bcf	3,5	;RP0=0, select bank0
  3669  0447  0085               	movwf	5	;volatile
  3670  0448  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0449  0186               	clrf	6	;volatile
  3672  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3673  044B  0186               	clrf	6	;volatile
  3674  044C  0008               	return
  3675  044D                     __end_ofPL6:	
  3676                           
  3677                           	psect	text18
  3678  0589                     __ptext18:	
  3679 ;; *************** function _Init_System *****************
  3680 ;; Defined at:
  3681 ;;		line 865 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 100/0
  3692 ;;		On exit  : 100/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         0       0       0
  3697 ;;      Temps:          0       0       0
  3698 ;;      Totals:         0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;;		_Sleep_Mode
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _Init_System
  3712  0589                     _Init_System:	
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _Init_System: [wreg+status,2]
  3716  0589  0000               	nop	;# 
  3717  058A  0064               	clrwdt	;# 
  3718                           
  3719                           ;main.c: 869: OPTION_REG = 0;
  3720  058B  1283               	bcf	3,5	;RP0=0, select bank0
  3721  058C  0181               	clrf	1	;volatile
  3722  058D  0064               	clrwdt	;# 
  3723                           
  3724                           ;main.c: 871: OSCCON = 0X72;
  3725  058E  3072               	movlw	114
  3726  058F  1283               	bcf	3,5	;RP0=0, select bank0
  3727  0590  0094               	movwf	20	;volatile
  3728                           
  3729                           ;main.c: 873: WPUA = 0B00000000;
  3730  0591  1683               	bsf	3,5	;RP0=1, select bank1
  3731  0592  0188               	clrf	8	;volatile
  3732                           
  3733                           ;main.c: 874: WPDA = 0x00;
  3734  0593  0187               	clrf	7	;volatile
  3735                           
  3736                           ;main.c: 875: WPUB = 0x04;
  3737  0594  3004               	movlw	4
  3738  0595  1283               	bcf	3,5	;RP0=0, select bank0
  3739  0596  0088               	movwf	8	;volatile
  3740                           
  3741                           ;main.c: 877: TRISA = 0x0F;
  3742  0597  300F               	movlw	15
  3743  0598  1683               	bsf	3,5	;RP0=1, select bank1
  3744                           
  3745                           ;main.c: 878: TRISB = 0x04;
  3746                           
  3747                           ;main.c: 880: PORTA = 0X00;
  3748                           
  3749                           ;main.c: 881: PORTB = 0X00;
  3750  0599  2444               	fcall	PL6	;call to abstracted procedure
  3751                           
  3752                           ;main.c: 885: PR2 = 249;
  3753  059A  30F9               	movlw	249
  3754  059B  0091               	movwf	17	;volatile
  3755                           
  3756                           ;main.c: 886: TMR2IF = 0;
  3757  059C  108D               	bcf	13,1	;volatile
  3758                           
  3759                           ;main.c: 887: TMR2IE = 1;
  3760  059D  148E               	bsf	14,1	;volatile
  3761                           
  3762                           ;main.c: 889: T2CON = 0B00000100;
  3763  059E  3004               	movlw	4
  3764  059F  0093               	movwf	19	;volatile
  3765                           
  3766                           ;main.c: 890: INTCON = 0XC0;
  3767  05A0  30C0               	movlw	192
  3768  05A1  008B               	movwf	11	;volatile
  3769  05A2  0008               	return
  3770  05A3                     __end_of_Init_System:	
  3771                           
  3772                           	psect	text19
  3773  05D4                     __ptext19:	
  3774 ;; *************** function _AD_Init *****************
  3775 ;; Defined at:
  3776 ;;		line 902 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2
  3785 ;; Tracked objects:
  3786 ;;		On entry : 100/0
  3787 ;;		On exit  : 100/100
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMMON   BANK0   BANK1
  3790 ;;      Params:         0       0       0
  3791 ;;      Locals:         0       0       0
  3792 ;;      Temps:          0       0       0
  3793 ;;      Totals:         0       0       0
  3794 ;;Total ram usage:        0 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    2
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_main
  3801 ;;		_Sleep_Mode
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _AD_Init
  3807  05D4                     _AD_Init:	
  3808  05D4                     l2208:	
  3809                           ;incstack = 0
  3810                           ; Regs used in _AD_Init: [wreg+status,2]
  3811                           
  3812                           
  3813                           ;main.c: 935: ADCON0 = 0X41;
  3814  05D4  3041               	movlw	65
  3815  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  3816  05D6  0095               	movwf	21	;volatile
  3817                           
  3818                           ;main.c: 952: ADCON1 = 0;
  3819  05D7  0196               	clrf	22	;volatile
  3820                           
  3821                           ;main.c: 953: ANSEL0 = 0X0D;
  3822  05D8  300D               	movlw	13
  3823  05D9  0093               	movwf	19	;volatile
  3824                           
  3825                           ;main.c: 954: ANSEL1 = 0x00;
  3826  05DA  0194               	clrf	20	;volatile
  3827  05DB  0008               	return
  3828  05DC                     __end_of_AD_Init:	
  3829                           
  3830                           	psect	text20
  3831  0552                     __ptext20:	
  3832 ;; *************** function _Isr_Timer *****************
  3833 ;; Defined at:
  3834 ;;		line 128 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;		None
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;		None
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      void 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 100/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1
  3848 ;;      Params:         0       0       0
  3849 ;;      Locals:         0       0       0
  3850 ;;      Temps:          3       0       0
  3851 ;;      Totals:         3       0       0
  3852 ;;Total ram usage:        3 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    1
  3855 ;; This function calls:
  3856 ;;		_ledShow
  3857 ;; This function is called by:
  3858 ;;		Interrupt level 1
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _Isr_Timer
  3864  0552                     _Isr_Timer:	
  3865                           
  3866                           ;main.c: 130: if(TMR2IF)
  3867  0552  1283               	bcf	3,5	;RP0=0, select bank0
  3868  0553  1C8D               	btfss	13,1	;volatile
  3869  0554  2D65               	goto	i1l686
  3870                           
  3871                           ;main.c: 131: {
  3872                           ;main.c: 132: TMR2IF = 0;
  3873  0555  108D               	bcf	13,1	;volatile
  3874                           
  3875                           ;main.c: 133: if(++intCount >= 160)
  3876  0556  30A0               	movlw	160
  3877  0557  0AD7               	incf	_intCount,f
  3878  0558  0257               	subwf	_intCount,w
  3879  0559  1C03               	skipc
  3880  055A  2D63               	goto	i1l2980
  3881  055B  3064               	movlw	100
  3882                           
  3883                           ;main.c: 134: {
  3884                           ;main.c: 135: intCount = 0;
  3885  055C  01D7               	clrf	_intCount
  3886                           
  3887                           ;main.c: 136: IntFlag = 1;
  3888  055D  01D5               	clrf	_IntFlag
  3889  055E  0AD5               	incf	_IntFlag,f
  3890                           
  3891                           ;main.c: 137: if(++count1s >= 100)
  3892  055F  0AD6               	incf	_count1s,f
  3893  0560  0256               	subwf	_count1s,w
  3894  0561  1803               	btfsc	3,0
  3895                           
  3896                           ;main.c: 138: {
  3897                           ;main.c: 139: count1s = 0;
  3898  0562  01D6               	clrf	_count1s
  3899  0563                     i1l2980:	
  3900                           
  3901                           ;main.c: 140: }
  3902                           ;main.c: 141: }
  3903                           ;main.c: 142: ledShow();
  3904  0563  23BA               	fcall	_ledShow
  3905                           
  3906                           ;main.c: 143: intCount10++;
  3907  0564  0AD2               	incf	_intCount10,f
  3908  0565                     i1l686:	
  3909  0565  0872               	movf	??_Isr_Timer+2,w
  3910  0566  008A               	movwf	10
  3911  0567  0871               	movf	??_Isr_Timer+1,w
  3912  0568  0084               	movwf	4
  3913  0569  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3914  056A  0083               	movwf	3
  3915  056B  0EFE               	swapf	126,f
  3916  056C  0E7E               	swapf	126,w
  3917  056D  0009               	retfie
  3918  056E                     __end_of_Isr_Timer:	
  3919                           
  3920                           	psect	intentry
  3921  0004                     __pintentry:	
  3922                           ;incstack = 0
  3923                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3924                           
  3925  0004                     interrupt_function:	
  3926  007E                     saved_w	set	btemp
  3927  0004  00FE               	movwf	btemp
  3928  0005  0E03               	swapf	3,w
  3929  0006  00F0               	movwf	??_Isr_Timer
  3930  0007  0804               	movf	4,w
  3931  0008  00F1               	movwf	??_Isr_Timer+1
  3932  0009  080A               	movf	10,w
  3933  000A  00F2               	movwf	??_Isr_Timer+2
  3934  000B  2D52               	ljmp	_Isr_Timer
  3935                           
  3936                           	psect	text21
  3937  03BA                     __ptext21:	
  3938 ;; *************** function _ledShow *****************
  3939 ;; Defined at:
  3940 ;;		line 192 in file "C:\mcuproject\scm\zdt\D206_062B_SOP14\main.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3949 ;; Tracked objects:
  3950 ;;		On entry : 100/0
  3951 ;;		On exit  : 100/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1
  3954 ;;      Params:         0       0       0
  3955 ;;      Locals:         0       0       0
  3956 ;;      Temps:          0       0       0
  3957 ;;      Totals:         0       0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_Isr_Timer
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           
  3968                           ;psect for function _ledShow
  3969  03BA                     _ledShow:	
  3970                           
  3971                           ;main.c: 194: if(++ledCntTime > 5)
  3972                           
  3973                           ;incstack = 0
  3974                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3975  03BA  3006               	movlw	6
  3976  03BB  0ABA               	incf	_ledCntTime,f
  3977  03BC  023A               	subwf	_ledCntTime,w
  3978  03BD  1C03               	skipc
  3979  03BE  0008               	return
  3980  03BF  3006               	movlw	6
  3981                           
  3982                           ;main.c: 195: {
  3983                           ;main.c: 196: ledCntTime = 0;
  3984  03C0  01BA               	clrf	_ledCntTime
  3985                           
  3986                           ;main.c: 197: if(++ledCnt > 5)
  3987  03C1  0ACE               	incf	_ledCnt,f
  3988  03C2  024E               	subwf	_ledCnt,w
  3989  03C3  1803               	btfsc	3,0
  3990                           
  3991                           ;main.c: 198: {
  3992                           ;main.c: 199: ledCnt = 0;
  3993  03C4  01CE               	clrf	_ledCnt
  3994                           
  3995                           ;main.c: 200: }
  3996                           ;main.c: 201: PORTB &= 0xDC;
  3997  03C5  30DC               	movlw	220
  3998  03C6  0586               	andwf	6,f	;volatile
  3999                           
  4000                           ;main.c: 202: TRISB |= 0x23;
  4001  03C7  3023               	movlw	35
  4002  03C8  0485               	iorwf	5,f	;volatile
  4003                           
  4004                           ;main.c: 203: switch(ledCnt)
  4005  03C9  2BFF               	goto	i1l2480
  4006  03CA                     i1l2454:	
  4007                           
  4008                           ;main.c: 206: if(ledStep > 1)
  4009  03CA  3002               	movlw	2
  4010  03CB  024D               	subwf	_ledStep,w
  4011  03CC  1C03               	skipc
  4012  03CD  0008               	return
  4013                           
  4014                           ;main.c: 207: {
  4015                           ;main.c: 208: TRISB &= 0xFE;
  4016  03CE  1005               	bcf	5,0	;volatile
  4017                           
  4018                           ;main.c: 209: TRISB &= 0xDF;
  4019  03CF  1285               	bcf	5,5	;volatile
  4020                           
  4021                           ;main.c: 210: RB0 = 1;
  4022  03D0  1406               	bsf	6,0	;volatile
  4023                           
  4024                           ;main.c: 211: RB5 = 0;
  4025  03D1  1286               	bcf	6,5	;volatile
  4026  03D2  0008               	return
  4027  03D3                     i1l2458:	
  4028                           
  4029                           ;main.c: 215: if(ledStep > 2)
  4030  03D3  3003               	movlw	3
  4031  03D4  024D               	subwf	_ledStep,w
  4032  03D5  1C03               	skipc
  4033  03D6  0008               	return
  4034                           
  4035                           ;main.c: 216: {
  4036                           ;main.c: 217: TRISB &= 0xFE;
  4037  03D7  1005               	bcf	5,0	;volatile
  4038                           
  4039                           ;main.c: 218: TRISB &= 0xFD;
  4040  03D8  1085               	bcf	5,1	;volatile
  4041                           
  4042                           ;main.c: 219: RB1 = 1;
  4043  03D9  1486               	bsf	6,1	;volatile
  4044                           
  4045                           ;main.c: 220: RB0 = 0;
  4046  03DA  1006               	bcf	6,0	;volatile
  4047  03DB  0008               	return
  4048  03DC                     i1l2462:	
  4049                           
  4050                           ;main.c: 224: if(ledStep > 3)
  4051  03DC  3004               	movlw	4
  4052  03DD  024D               	subwf	_ledStep,w
  4053  03DE  1C03               	skipc
  4054  03DF  0008               	return
  4055                           
  4056                           ;main.c: 225: {
  4057                           ;main.c: 226: TRISB &= 0xDF;
  4058  03E0  1285               	bcf	5,5	;volatile
  4059                           
  4060                           ;main.c: 227: TRISB &= 0xFD;
  4061  03E1  1085               	bcf	5,1	;volatile
  4062                           
  4063                           ;main.c: 228: RB1 = 1;
  4064  03E2  1486               	bsf	6,1	;volatile
  4065                           
  4066                           ;main.c: 229: RB5 = 0;
  4067  03E3  1286               	bcf	6,5	;volatile
  4068  03E4  0008               	return
  4069  03E5                     i1l2466:	
  4070                           
  4071                           ;main.c: 233: if(ledStep > 4)
  4072  03E5  3005               	movlw	5
  4073  03E6  024D               	subwf	_ledStep,w
  4074  03E7  1C03               	skipc
  4075  03E8  0008               	return
  4076                           
  4077                           ;main.c: 234: {
  4078                           ;main.c: 235: TRISB &= 0xDF;
  4079  03E9  1285               	bcf	5,5	;volatile
  4080                           
  4081                           ;main.c: 236: TRISB &= 0xFE;
  4082  03EA  1005               	bcf	5,0	;volatile
  4083                           
  4084                           ;main.c: 237: RB5 = 1;
  4085  03EB  1686               	bsf	6,5	;volatile
  4086                           
  4087                           ;main.c: 238: RB0 = 0;
  4088  03EC  1006               	bcf	6,0	;volatile
  4089  03ED  0008               	return
  4090  03EE                     i1l2470:	
  4091                           
  4092                           ;main.c: 242: if(ledStep > 5)
  4093  03EE  3006               	movlw	6
  4094  03EF  024D               	subwf	_ledStep,w
  4095  03F0  1C03               	skipc
  4096  03F1  0008               	return
  4097                           
  4098                           ;main.c: 243: {
  4099                           ;main.c: 244: TRISB &= 0xDF;
  4100  03F2  1285               	bcf	5,5	;volatile
  4101                           
  4102                           ;main.c: 245: TRISB &= 0xFD;
  4103  03F3  1085               	bcf	5,1	;volatile
  4104                           
  4105                           ;main.c: 246: RB5 = 1;
  4106  03F4  1686               	bsf	6,5	;volatile
  4107                           
  4108                           ;main.c: 247: RB1 = 0;
  4109  03F5  1086               	bcf	6,1	;volatile
  4110  03F6  0008               	return
  4111  03F7                     i1l2474:	
  4112                           
  4113                           ;main.c: 251: if(ledStep > 0)
  4114  03F7  084D               	movf	_ledStep,w
  4115  03F8  1903               	btfsc	3,2
  4116  03F9  0008               	return
  4117                           
  4118                           ;main.c: 252: {
  4119                           ;main.c: 253: TRISB &= 0xFE;
  4120  03FA  1005               	bcf	5,0	;volatile
  4121                           
  4122                           ;main.c: 254: TRISB &= 0xFD;
  4123  03FB  1085               	bcf	5,1	;volatile
  4124                           
  4125                           ;main.c: 255: RB0 = 1;
  4126  03FC  1406               	bsf	6,0	;volatile
  4127                           
  4128                           ;main.c: 256: RB1 = 0;
  4129  03FD  1086               	bcf	6,1	;volatile
  4130  03FE  0008               	return
  4131  03FF                     i1l2480:	
  4132  03FF  084E               	movf	_ledCnt,w
  4133                           
  4134                           ; Switch size 1, requested type "space"
  4135                           ; Number of cases is 6, Range of values is 0 to 5
  4136                           ; switch strategies available:
  4137                           ; Name         Instructions Cycles
  4138                           ; direct_byte           12     6 (fixed)
  4139                           ; simple_byte           19    10 (average)
  4140                           ; jumptable            260     6 (fixed)
  4141                           ;	Chosen strategy is direct_byte
  4142  0400  0084               	movwf	4
  4143  0401  3006               	movlw	6
  4144  0402  0204               	subwf	4,w
  4145  0403  1803               	skipnc
  4146  0404  0008               	return
  4147  0405  3005               	movlw	high i1S3596
  4148  0406  008A               	movwf	10
  4149  0407  30EA               	movlw	low i1S3596
  4150  0408  0704               	addwf	4,w
  4151  0409  0082               	movwf	2
  4152  040A  0008               	return
  4153  040B                     __end_of_ledShow:	
  4154  007E                     btemp	set	126	;btemp
  4155  007E                     wtemp0	set	126
  4156                           
  4157                           	psect	swtext1
  4158  05EA                     __pswtext1:	
  4159  05EA                     i1S3596:	
  4160  05EA  2BF7               	ljmp	i1l2474
  4161  05EB  2BCA               	ljmp	i1l2454
  4162  05EC  2BD3               	ljmp	i1l2458
  4163  05ED  2BDC               	ljmp	i1l2462
  4164  05EE  2BE5               	ljmp	i1l2466
  4165  05EF  2BEE               	ljmp	i1l2470


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         61
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     21      79
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->___bmul
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3562
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     980
                            ___lbdiv
                            ___lbmod
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                              3 COMMON     4     0      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     297
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1217
                                             17 BANK0      4     4      0
                         _ADC_Sample
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
     ___bmul
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
     ___lwmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     15      4F       4       98.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      5A       7        0.0%
DATA                 0      0      5A       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 31 16:09:22 2025

            _protectFlag 0050                        pc 0002           ___bmul@product 0074  
                     PL2 01EA                       PL4 01F9                       PL6 0444  
                     PL8 0118                       fsr 0004                      PL10 05AB  
                    PL12 05B2                      PL14 0202                      l816 04EC  
                    l691 0452                      l925 018B                      l919 0150  
                    l847 028A                      l695 046C                      l929 01CF  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 05DC                     l3100 017F  
                   l3102 0187                     l2214 05E3                     l2208 05D4  
                   l3112 01D3                     l3200 024C                     l2400 0587  
                   l3210 0263                     l3220 026E                     l1196 057A  
                   l3062 0130                     l3206 025F                     l3150 0500  
                   l3072 013A                     l3064 0132                     l3232 027E  
                   l3216 026A                     l3312 0057                     l3136 054E  
                   l3128 053A                     l3250 02A3                     l3306 0053  
                   l3236 0284                     l3228 0278                     l3260 02AF  
                   l3308 0055                     l2268 0530                     l3078 013B  
                   l3430 02E0                     l3190 023B                     l3414 0115  
                   l3334 0079                     l3326 006E                     l3318 0061  
                   l3158 0513                     l3096 0175                     l3088 015B  
                   l2368 05B8                     l3248 02A0                     l3256 02A8  
                   l3176 0223                     l3360 00A9                     l3336 007B  
                   l3504 0396                     l3442 030D                     l3178 0224  
                   l2386 0574                     l3370 00C9                     l3354 009D  
                   l3346 0095                     l3290 0036                     l3274 0023  
                   l2810 04DA                     l3506 039A                     l3514 03A2  
                   l3452 0321                     l3188 023A                     l3364 00BF  
                   l3348 0097                     l3508 039D                     l3470 0353  
                   l3390 00EE                     l3374 00CC                     l3358 00A3  
                   l2814 04DF                     l3518 03A8                     l3464 034A  
                   l3472 0355                     l3448 031A                     l3376 00CE  
                   l3288 0034                     l2840 0495                     l3394 00F2  
                   l2818 04E3                     l3538 045A                     l3388 00ED  
                   l2852 04B3                     l2860 04C5                     l3398 00F9  
                   l3494 0386                     l3486 036A                     l2854 04B5  
                   l3574 0489                     l3496 0388                     _CHS4 04B6  
                   _IOCA 0089                     _IOCB 0009                     u3215 01DC  
                   u3145 017B                     u3155 0185                     u4207 02B5  
                   _PIE1 000E                     u4217 031F                     u3195 01C5  
                   u4227 035A                     u3275 0506                     u4237 012C  
                   u3385 0255                     u3715 00BD                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     u3495 0296  
                   _RBIE 005B                     _RBIF 0058                     u3755 00E1  
                   u3865 02FF                     _PIR1 000D                     _WPDA 0087  
                   _WPUA 0088                     _WPUB 0008                     _main 044D  
                   btemp 007E                     start 000C        ___bmul@multiplier 0075  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 0589  
        __end_of___lbmod 0552                    _T2CON 0013          __end_of___lwmod 0518  
                  i1l686 0565            _countHalfFull 0051                    _PORTA 0086  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0005  
                  _PWMTH 0018                    _PWMTL 0017          __end_of_chrgCtr 0118  
        __end_of_ledShow 040B          __end_of_keyRead 0536                    pclath 000A  
        __end_of_pwmInit 05D4          __end_of_pwmStop 05E3                    status 0003  
                  wtemp0 007E          __end_of_workCtr 04C9          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000D             __end_of_main 048B  
   __size_of_chrgPwmInit 0008     __size_of_chrgPwmStop 0007                   ??_main 0077  
              ??_AD_Init 0073      __end_of_Init_System 05A3                   _ADCON0 0095  
                 _ADCON1 0096                   i1S3596 05EA                   _ADRESH 0099  
                 _ADRESL 0098                   _ANSEL0 0093                   _ANSEL1 0094  
                 _GODONE 04A9                   i1l2470 03EE                   i1l2462 03DC  
                 i1l2454 03CA                   i1l2480 03FF                   i1l2474 03F7  
                 i1l2466 03E5                   i1l2458 03D3                   i1l2980 0563  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
                 _PWMD3L 009C             ??_ADC_Sample 0059             keyCtr@kclick 0074  
     __size_of_Isr_Timer 001C               _Sleep_Mode 040B                   ___bmul 05B6  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 004E  
                 _ledCtr 035D                ??___lwmod 0077                   _keyCtr 04C9  
                 _jrStep 0037                ??_chrgCtr 0059                   _pwStep 0045  
                 _result 0030                ??_ledShow 0070                ??_keyRead 0073  
     __end_of_ADC_Sample 01EA                   saved_w 007E                ??_pwmInit 0073  
              ??_pwmStop 0073                ??_workCtr 0073         ___lbdiv@dividend 0074  
             _batADValue 0077          ___lbmod@divisor 0073  __end_of__initialization 0016  
        ___lbmod@counter 005A      ___bmul@multiplicand 0073          _workOverOutTime 004F  
         __pcstackCOMMON 0070       __size_of_checkOutA 00B2              _Init_System 0589  
             __end_ofPL2 01F9               __end_ofPL4 0202               __end_ofPL6 044D  
             __end_ofPL8 011E         ___lbdiv@quotient 0076        __end_of_Isr_Timer 056E  
             _checkBatAD 02B9               __pbssBANK0 0020             _chrgFullFlag 0053  
            ?_Sleep_Mode 0070               __pmaintext 044D                  ?___bmul 0073  
             __pintentry 0004                  ?_ledCtr 0070             _chrgWaitTime 003C  
                ?_keyCtr 0070               _ledCntTime 003A                  _AD_Init 05D4  
                _PWM23DT 009D                  _PWMD23H 009E                  _PWMCON0 0015  
                _PWMCON1 0016                  _PWMCON2 001D        __end_of_checkOutA 02B9  
                _IntFlag 0055               _intCount10 0052          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0066          ADC_Sample@admin 0064          ADC_Sample@adsum 0060  
        __size_of___bmul 000E                  ___lbdiv 056E                  ___lbmod 0536  
                _addTime 003E                  ___lwmod 04F4          __size_of_ledCtr 005D  
        __size_of_keyCtr 002B                  _chrgCtr 0018               _lowBatFlag 0039  
                __ptext1 048B                  __ptext2 05CC                  __ptext3 035D  
                __ptext4 04F4                  __ptext5 0536                  __ptext6 04C9  
                __ptext7 0518                  __ptext8 0018                  __ptext9 05DC  
                _ledShow 03BA                  _ledStep 004D                  _count1s 0056  
                _count5s 0026                  _count8s 0022                  _maxDuty 004A  
                _keyRead 0518      __size_of_Sleep_Mode 0039                  _pwmInit 05CC  
                _subTime 003D              ?_checkBatAD 0070                  _pwmStop 05DC  
                clrloop0 05C5                  _workCtr 048B               _outADValue 002C  
   end_of_initialization 0016            _longPressFlag 004B            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0059              ___lbmod@rem 005B  
    __size_of_checkBatAD 00A4           __end_of___bmul 05C4             ?_Init_System 0070  
         __end_of_ledCtr 03BA           __end_of_keyCtr 04F4      __end_of_chrgPwmInit 05AB  
    __end_of_chrgPwmStop 05EA              __end_ofPL10 05B2              __end_ofPL12 05B6  
            __end_ofPL14 0207      start_initialization 000D                _Isr_Timer 0552  
           ??_Sleep_Mode 0073                 ??___bmul 0074                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0068                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0059  
     __end_of_Sleep_Mode 0444               ?_Isr_Timer 0070                _checkOutA 0207  
              __pnvBANK0 006E              _chrgMaxDuty 003B                _chrgMaxAD 0040  
            _chrgPwmFlag 0035              _chrgPwmInit 05A3                 ?___lbdiv 0073  
               ?___lbmod 0073              _chrgPwmStop 05E3                 ?___lwmod 0073  
               ?_chrgCtr 0070                __pswtext1 05EA                _count900s 0020  
               ?_ledShow 0070                 ?_keyRead 0070                _firstTime 006E  
         ADC_Sample@adch 005E                 ?_pwmInit 0070                _fullCount 0028  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 003F  
               ?_workCtr 0070              ADC_Sample@i 005F              ADC_Sample@j 005D  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 05C4  
              _prePwStep 0079              _reChrgCount 0044                _sleepTime 0038  
              _overCount 0049        checkOutA@maxtempV 006C       __end_of_checkBatAD 035D  
   __size_of_Init_System 001A                _startTime 0047         __size_of_AD_Init 0008  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 011E  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lwmod 0024  
            _lockLedStep 0043         __size_of_chrgCtr 0100         __size_of_ledShow 0051  
       __size_of_keyRead 001E                 _adresult 0032                 _chrgFlag 0054  
               _chrgMode 0041                 __ptext10 05E3                 __ptext11 05A3  
               __ptext20 0552                 __ptext12 056E                 __ptext21 03BA  
               __ptext13 0207                 __ptext14 05B6                 __ptext15 02B9  
               __ptext16 011E                 __ptext17 040B                 __ptext18 0589  
               __ptext19 05D4         __size_of_pwmInit 0008         __size_of_pwmStop 0007  
               _count50s 002A         __size_of_workCtr 003E                 _keyCount 004C  
               _intCount 0057            __size_of_main 003E              ??_checkOutA 006A  
       checkOutA@maxAout 006D                 _tempDuty 0048                 _test_adc 0058  
               _power_ad 002E                 _workStep 007A             _overChrgTime 0046  
           _motorPwmFlag 0034                 intlevel1 0000         ___lwmod@dividend 0075  
            ?_ADC_Sample 0073              _preWorkStep 0036             ?_chrgPwmInit 0070  
           _overWorkTime 0024             ?_chrgPwmStop 0070              _showBatTime 0042  
             _OPTION_REG 0001          ___lwmod@divisor 0073          ___lwmod@counter 0059  
