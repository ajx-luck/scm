

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 03 16:17:06 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	nvBANK0
    74  0064                     __pnvBANK0:	
    75  0064                     _firstTime:	
    76  0064                     	ds	1
    77  001D                     _PWMCON2	set	29
    78  0018                     _PWMTH	set	24
    79  0017                     _PWMTL	set	23
    80  0016                     _PWMCON1	set	22
    81  0015                     _PWMCON0	set	21
    82  0014                     _OSCCON	set	20
    83  0013                     _T2CON	set	19
    84  0011                     _PR2	set	17
    85  000E                     _PIE1	set	14
    86  000D                     _PIR1	set	13
    87  000B                     _INTCON	set	11
    88  0009                     _IOCB	set	9
    89  0008                     _WPUB	set	8
    90  0006                     _PORTB	set	6
    91  0005                     _TRISB	set	5
    92  0001                     _OPTION_REG	set	1
    93  0071                     _TMR2IE	set	113
    94  0073                     _RAIE	set	115
    95  0069                     _TMR2IF	set	105
    96  006B                     _RAIF	set	107
    97  0058                     _RBIF	set	88
    98  005B                     _RBIE	set	91
    99  005E                     _PEIE	set	94
   100  005F                     _GIE	set	95
   101  0033                     _RB3	set	51
   102  0034                     _RB4	set	52
   103  009E                     _PWMD23H	set	158
   104  009D                     _PWM23DT	set	157
   105  009C                     _PWMD3L	set	156
   106  0099                     _ADRESH	set	153
   107  0098                     _ADRESL	set	152
   108  0096                     _ADCON1	set	150
   109  0095                     _ADCON0	set	149
   110  0094                     _ANSEL1	set	148
   111  0093                     _ANSEL0	set	147
   112  0089                     _IOCA	set	137
   113  0088                     _WPUA	set	136
   114  0087                     _WPDA	set	135
   115  0086                     _PORTA	set	134
   116  0085                     _TRISA	set	133
   117  04B2                     _LDO_EN	set	1202
   118  04B6                     _CHS4	set	1206
   119  04A9                     _GODONE	set	1193
   120  0432                     _RA2	set	1074
   121  0433                     _RA3	set	1075
   122  0434                     _RA4	set	1076
   123                           
   124                           	psect	cinit
   125  000B                     start_initialization:	
   126                           ; #config settings
   127                           
   128  000B                     __initialization:	
   129  000B  3046               	movlw	low __pbssBANK0
   130                           
   131                           ; Clear objects allocated to COMMON
   132  000C  01F9               	clrf	__pbssCOMMON& (0+127)
   133  000D  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   134  000E  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   135                           
   136                           ; Clear objects allocated to BANK0
   137  000F  1383               	bcf	3,7	;select IRP bank0
   138  0010  0084               	movwf	4
   139  0011  3064               	movlw	low (__pbssBANK0+30)
   140  0012  250B               	fcall	clear_ram0
   141  0013                     end_of_initialization:	
   142                           ;End of C runtime variable initialization code
   143                           
   144  0013                     __end_of__initialization:	
   145  0013  0183               	clrf	3
   146  0014  2B86               	ljmp	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMMON
   149  0079                     __pbssCOMMON:	
   150  0079                     _prePwStep:	
   151  0079                     	ds	1
   152  007A                     _workStep:	
   153  007A                     	ds	1
   154  007B                     _chrgFlag:	
   155  007B                     	ds	1
   156                           
   157                           	psect	bssBANK0
   158  0046                     __pbssBANK0:	
   159  0046                     _count15s:	
   160  0046                     	ds	2
   161  0048                     _count30s:	
   162  0048                     	ds	2
   163  004A                     _overWorkTime:	
   164  004A                     	ds	2
   165  004C                     _power_ad:	
   166  004C                     	ds	2
   167  004E                     _result:	
   168  004E                     	ds	2
   169  0050                     _lowBatTime:	
   170  0050                     	ds	1
   171  0051                     _lowBatLock:	
   172  0051                     	ds	1
   173  0052                     _motorPwmFlag:	
   174  0052                     	ds	1
   175  0053                     _fanOverTime:	
   176  0053                     	ds	1
   177  0054                     _sleepTime:	
   178  0054                     	ds	1
   179  0055                     _lowBatFlag:	
   180  0055                     	ds	1
   181  0056                     _fanDuty:	
   182  0056                     	ds	1
   183  0057                     _pwStep:	
   184  0057                     	ds	1
   185  0058                     _maxDuty:	
   186  0058                     	ds	1
   187  0059                     _longPressFlag:	
   188  0059                     	ds	1
   189  005A                     _keyCount:	
   190  005A                     	ds	1
   191  005B                     _ledStep:	
   192  005B                     	ds	1
   193  005C                     _intCount10:	
   194  005C                     	ds	1
   195  005D                     _chrgFullFlag:	
   196  005D                     	ds	1
   197  005E                     _IntFlag:	
   198  005E                     	ds	1
   199  005F                     _count1s:	
   200  005F                     	ds	1
   201  0060                     _intCount:	
   202  0060                     	ds	1
   203  0061                     _test_adc:	
   204  0061                     	ds	1
   205  0062                     _adresult:	
   206  0062                     	ds	2
   207                           
   208                           	psect	clrtext
   209  050B                     clear_ram0:	
   210                           ;	Called with FSR containing the base address, and
   211                           ;	W with the last address+1
   212                           
   213  050B  0064               	clrwdt	;clear the watchdog before getting into this loop
   214  050C                     clrloop0:	
   215  050C  0180               	clrf	0	;clear RAM location pointed to by FSR
   216  050D  0A84               	incf	4,f	;increment pointer
   217  050E  0604               	xorwf	4,w	;XOR with final address
   218  050F  1903               	btfsc	3,2	;have we reached the end yet?
   219  0510  3400               	retlw	0	;all done for this memory range, return
   220  0511  0604               	xorwf	4,w	;XOR again to restore value
   221  0512  2D0C               	goto	clrloop0	;do the next byte
   222                           
   223                           	psect	cstackCOMMON
   224  0070                     __pcstackCOMMON:	
   225  0070                     ?_Init_System:	
   226  0070                     ?_AD_Init:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_checkOutA:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_chrgCtr:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_checkBatAD:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_setBatStep:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_keyCtr:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_workCtr:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_ledCtr:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_Sleep_Mode:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_pwmStop:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_pwmInit:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_Isr_Timer:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ??_Isr_Timer:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_main:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_keyRead:	
   269                           ; 1 bytes @ 0x0
   270                           
   271                           
   272                           ; 1 bytes @ 0x0
   273  0070                     	ds	2
   274  0072                     ??_Init_System:	
   275  0072                     ??_AD_Init:	
   276                           ; 1 bytes @ 0x2
   277                           
   278  0072                     ??_chrgCtr:	
   279                           ; 1 bytes @ 0x2
   280                           
   281  0072                     ??_Sleep_Mode:	
   282                           ; 1 bytes @ 0x2
   283                           
   284  0072                     ??_pwmStop:	
   285                           ; 1 bytes @ 0x2
   286                           
   287  0072                     ??_pwmInit:	
   288                           ; 1 bytes @ 0x2
   289                           
   290  0072                     ?_ADC_Sample:	
   291                           ; 1 bytes @ 0x2
   292                           
   293  0072                     ??_keyRead:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0072                     ?___bmul:	
   297                           ; 1 bytes @ 0x2
   298                           
   299  0072                     ?___lwdiv:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ?___lwmod:	
   303                           ; 2 bytes @ 0x2
   304                           
   305  0072                     ?___ftpack:	
   306                           ; 2 bytes @ 0x2
   307                           
   308  0072                     keyRead@keyStatus:	
   309                           ; 3 bytes @ 0x2
   310                           
   311  0072                     ADC_Sample@adldo:	
   312                           ; 1 bytes @ 0x2
   313                           
   314  0072                     ___bmul@multiplicand:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ___lwdiv@divisor:	
   318                           ; 1 bytes @ 0x2
   319                           
   320  0072                     ___lwmod@divisor:	
   321                           ; 2 bytes @ 0x2
   322                           
   323  0072                     ___ftpack@arg:	
   324                           ; 2 bytes @ 0x2
   325                           
   326                           
   327                           ; 3 bytes @ 0x2
   328  0072                     	ds	1
   329  0073                     ??_keyCtr:	
   330  0073                     ??_ADC_Sample:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ??___bmul:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     keyCtr@kclick:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ___bmul@product:	
   340                           ; 1 bytes @ 0x3
   341                           
   342                           
   343                           ; 1 bytes @ 0x3
   344  0073                     	ds	1
   345  0074                     ___bmul@multiplier:	
   346  0074                     ___lwdiv@dividend:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ___lwmod@dividend:	
   350                           ; 2 bytes @ 0x4
   351                           
   352                           
   353                           ; 2 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ??_workCtr:	
   356  0075                     ___ftpack@exp:	
   357                           ; 1 bytes @ 0x5
   358                           
   359                           
   360                           ; 1 bytes @ 0x5
   361  0075                     	ds	1
   362  0076                     ??___lwdiv:	
   363  0076                     ??___lwmod:	
   364                           ; 1 bytes @ 0x6
   365                           
   366  0076                     ___ftpack@sign:	
   367                           ; 1 bytes @ 0x6
   368                           
   369  0076                     ___lwdiv@counter:	
   370                           ; 1 bytes @ 0x6
   371                           
   372  0076                     ___lwmod@counter:	
   373                           ; 1 bytes @ 0x6
   374                           
   375                           
   376                           ; 1 bytes @ 0x6
   377  0076                     	ds	1
   378  0077                     ??_checkOutA:	
   379  0077                     ??_checkBatAD:	
   380                           ; 1 bytes @ 0x7
   381                           
   382  0077                     ??_ledCtr:	
   383                           ; 1 bytes @ 0x7
   384                           
   385  0077                     ??___lwtoft:	
   386                           ; 1 bytes @ 0x7
   387                           
   388  0077                     ___lwdiv@quotient:	
   389                           ; 1 bytes @ 0x7
   390                           
   391                           
   392                           ; 2 bytes @ 0x7
   393  0077                     	ds	2
   394  0079                     ??_setBatStep:	
   395  0079                     ??_main:	
   396                           ; 1 bytes @ 0x9
   397                           
   398                           
   399                           	psect	cstackBANK0
   400  0020                     __pcstackBANK0:	
   401                           ; 1 bytes @ 0x9
   402                           
   403  0020                     ??___ftpack:	
   404  0020                     ADC_Sample@j:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0020                     setBatStep@tempSubBatTime:	
   408                           ; 1 bytes @ 0x0
   409                           
   410                           
   411                           ; 2 bytes @ 0x0
   412  0020                     	ds	1
   413  0021                     ADC_Sample@adch:	
   414                           
   415                           ; 1 bytes @ 0x1
   416  0021                     	ds	1
   417  0022                     ADC_Sample@i:	
   418                           
   419                           ; 1 bytes @ 0x2
   420  0022                     	ds	1
   421  0023                     ?___lwtoft:	
   422  0023                     ___lwtoft@c:	
   423                           ; 3 bytes @ 0x3
   424                           
   425  0023                     ADC_Sample@adsum:	
   426                           ; 2 bytes @ 0x3
   427                           
   428                           
   429                           ; 4 bytes @ 0x3
   430  0023                     	ds	3
   431  0026                     ?___ftdiv:	
   432  0026                     ___ftdiv@f2:	
   433                           ; 3 bytes @ 0x6
   434                           
   435                           
   436                           ; 3 bytes @ 0x6
   437  0026                     	ds	1
   438  0027                     ADC_Sample@admin:	
   439                           
   440                           ; 2 bytes @ 0x7
   441  0027                     	ds	2
   442  0029                     ADC_Sample@admax:	
   443  0029                     ___ftdiv@f1:	
   444                           ; 2 bytes @ 0x9
   445                           
   446                           
   447                           ; 3 bytes @ 0x9
   448  0029                     	ds	2
   449  002B                     ADC_Sample@ad_temp:	
   450                           
   451                           ; 2 bytes @ 0xB
   452  002B                     	ds	1
   453  002C                     ??___ftdiv:	
   454                           
   455                           ; 1 bytes @ 0xC
   456  002C                     	ds	3
   457  002F                     ___ftdiv@cntr:	
   458                           
   459                           ; 1 bytes @ 0xF
   460  002F                     	ds	1
   461  0030                     ___ftdiv@f3:	
   462                           
   463                           ; 3 bytes @ 0x10
   464  0030                     	ds	3
   465  0033                     ___ftdiv@exp:	
   466                           
   467                           ; 1 bytes @ 0x13
   468  0033                     	ds	1
   469  0034                     ___ftdiv@sign:	
   470                           
   471                           ; 1 bytes @ 0x14
   472  0034                     	ds	1
   473  0035                     ?___fttol:	
   474  0035                     ___fttol@f1:	
   475                           ; 4 bytes @ 0x15
   476                           
   477                           
   478                           ; 3 bytes @ 0x15
   479  0035                     	ds	4
   480  0039                     ??___fttol:	
   481                           
   482                           ; 1 bytes @ 0x19
   483  0039                     	ds	3
   484  003C                     ___fttol@sign1:	
   485                           
   486                           ; 1 bytes @ 0x1C
   487  003C                     	ds	1
   488  003D                     ___fttol@lval:	
   489                           
   490                           ; 4 bytes @ 0x1D
   491  003D                     	ds	4
   492  0041                     ___fttol@exp1:	
   493                           
   494                           ; 1 bytes @ 0x21
   495  0041                     	ds	1
   496  0042                     checkBatAD@power_temp:	
   497                           
   498                           ; 4 bytes @ 0x22
   499  0042                     	ds	4
   500                           
   501                           	psect	maintext
   502  0386                     __pmaintext:	
   503 ;;
   504 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   505 ;;
   506 ;; *************** function _main *****************
   507 ;; Defined at:
   508 ;;		line 148 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, status,2, status,0, pclath, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : B00/0
   519 ;;		On exit  : 100/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1
   522 ;;      Params:         0       0       0
   523 ;;      Locals:         0       0       0
   524 ;;      Temps:          0       0       0
   525 ;;      Totals:         0       0       0
   526 ;;Total ram usage:        0 bytes
   527 ;; Hardware stack levels required when called:    4
   528 ;; This function calls:
   529 ;;		_AD_Init
   530 ;;		_Init_System
   531 ;;		_Sleep_Mode
   532 ;;		_checkBatAD
   533 ;;		_checkOutA
   534 ;;		_chrgCtr
   535 ;;		_keyCtr
   536 ;;		_ledCtr
   537 ;;		_setBatStep
   538 ;;		_workCtr
   539 ;; This function is called by:
   540 ;;		Startup code after reset
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _main
   546  0386                     _main:	
   547                           
   548                           ;main.c: 150: Init_System();
   549                           
   550                           ;incstack = 0
   551                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   552  0386  249D               	fcall	_Init_System
   553                           
   554                           ;main.c: 151: AD_Init();
   555  0387  2513               	fcall	_AD_Init
   556                           
   557                           ;main.c: 152: firstTime = 200;
   558  0388  30C8               	movlw	200
   559  0389  1283               	bcf	3,5	;RP0=0, select bank0
   560  038A  00E4               	movwf	_firstTime
   561  038B                     l681:	
   562                           ;main.c: 153: while (1)
   563                           
   564  038B  0064               	clrwdt	;# 
   565                           
   566                           ;main.c: 156: if(workStep > 0 && intCount10 > 10)
   567  038C  087A               	movf	_workStep,w
   568  038D  1903               	btfsc	3,2
   569  038E  2B96               	goto	l2733
   570  038F  300B               	movlw	11
   571  0390  1283               	bcf	3,5	;RP0=0, select bank0
   572  0391  025C               	subwf	_intCount10,w
   573  0392  1C03               	skipc
   574  0393  2B96               	goto	l2733
   575                           
   576                           ;main.c: 157: {
   577                           ;main.c: 158: intCount10 = 0;
   578  0394  01DC               	clrf	_intCount10
   579                           
   580                           ;main.c: 159: checkOutA();
   581  0395  23F0               	fcall	_checkOutA
   582  0396                     l2733:	
   583                           
   584                           ;main.c: 160: }
   585                           ;main.c: 161: if(!IntFlag)
   586  0396  1283               	bcf	3,5	;RP0=0, select bank0
   587  0397  085E               	movf	_IntFlag,w
   588  0398  1903               	btfsc	3,2
   589  0399  2B8B               	goto	l681
   590                           
   591                           ;main.c: 163: IntFlag = 0;
   592  039A  01DE               	clrf	_IntFlag
   593                           
   594                           ;main.c: 164: chrgCtr();
   595  039B  2500               	fcall	_chrgCtr
   596                           
   597                           ;main.c: 165: checkBatAD();
   598  039C  22BB               	fcall	_checkBatAD
   599                           
   600                           ;main.c: 166: setBatStep();
   601  039D  20FB               	fcall	_setBatStep
   602                           
   603                           ;main.c: 167: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   604  039E  087B               	movf	_chrgFlag,w
   605  039F  1D03               	btfss	3,2
   606  03A0  2BA8               	goto	l685
   607  03A1  0855               	movf	_lowBatFlag,w
   608  03A2  1D03               	btfss	3,2
   609  03A3  2BA8               	goto	l685
   610  03A4  0864               	movf	_firstTime,w
   611  03A5  1D03               	btfss	3,2
   612  03A6  2BA8               	goto	l685
   613                           
   614                           ;main.c: 168: {
   615                           ;main.c: 169: keyCtr();
   616  03A7  245E               	fcall	_keyCtr
   617  03A8                     l685:	
   618                           
   619                           ;main.c: 170: }
   620                           ;main.c: 171: workCtr();
   621  03A8  2416               	fcall	_workCtr
   622                           
   623                           ;main.c: 172: ledCtr();
   624  03A9  2262               	fcall	_ledCtr
   625                           
   626                           ;main.c: 173: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && ov
      +                          erWorkTime == 0)
   627  03AA  087B               	movf	_chrgFlag,w
   628  03AB  1D03               	btfss	3,2
   629  03AC  2BC3               	goto	l2769
   630  03AD  087A               	movf	_workStep,w
   631  03AE  1283               	bcf	3,5	;RP0=0, select bank0
   632  03AF  1D03               	btfss	3,2
   633  03B0  2BC4               	goto	L1
   634  03B1  085A               	movf	_keyCount,w
   635  03B2  1D03               	btfss	3,2
   636  03B3  2BC3               	goto	l2769
   637  03B4  0864               	movf	_firstTime,w
   638  03B5  1D03               	btfss	3,2
   639  03B6  2BC3               	goto	l2769
   640                           
   641                           ;main.c: 174: {
   642                           ;main.c: 175: shiweiNum = geweiNum = 0;
   643  03B7  084A               	movf	_overWorkTime,w
   644  03B8  044B               	iorwf	_overWorkTime+1,w
   645  03B9  1D03               	btfss	3,2
   646  03BA  2BC3               	goto	l2769
   647                           
   648                           ;main.c: 176: if(++sleepTime >= 200)
   649  03BB  30C8               	movlw	200
   650  03BC  0AD4               	incf	_sleepTime,f
   651  03BD  0254               	subwf	_sleepTime,w
   652  03BE  1C03               	skipc
   653  03BF  2B8B               	goto	l681
   654                           
   655                           ;main.c: 177: {
   656                           ;main.c: 178: sleepTime = 0;
   657  03C0  01D4               	clrf	_sleepTime
   658                           
   659                           ;main.c: 179: Sleep_Mode();
   660  03C1  2303               	fcall	_Sleep_Mode
   661  03C2  2B8B               	goto	l681
   662  03C3                     l2769:	
   663                           
   664                           ;main.c: 182: else
   665                           ;main.c: 183: {
   666                           ;main.c: 184: sleepTime = 0;
   667  03C3  1283               	bcf	3,5	;RP0=0, select bank0
   668  03C4                     L1:	
   669  03C4  01D4               	clrf	_sleepTime
   670  03C5  2B8B               	goto	l681
   671  03C6                     __end_of_main:	
   672                           
   673                           	psect	text1
   674  0416                     __ptext1:	
   675 ;; *************** function _workCtr *****************
   676 ;; Defined at:
   677 ;;		line 465 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;                  1    wreg      void 
   684 ;; Registers used:
   685 ;;		wreg, status,2, status,0, pclath, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 100/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMMON   BANK0   BANK1
   691 ;;      Params:         0       0       0
   692 ;;      Locals:         0       0       0
   693 ;;      Temps:          0       0       0
   694 ;;      Totals:         0       0       0
   695 ;;Total ram usage:        0 bytes
   696 ;; Hardware stack levels used:    1
   697 ;; Hardware stack levels required when called:    2
   698 ;; This function calls:
   699 ;;		___bmul
   700 ;;		_pwmInit
   701 ;;		_pwmStop
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _workCtr
   709  0416                     _workCtr:	
   710                           
   711                           ;main.c: 468: if(workStep > 0)
   712                           
   713                           ;incstack = 0
   714                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   715  0416  087A               	movf	_workStep,w
   716  0417  1903               	btfsc	3,2
   717  0418  2C32               	goto	l2363
   718                           
   719                           ;main.c: 469: {
   720                           ;main.c: 470: RB3 = 1;
   721  0419  1586               	bsf	6,3	;volatile
   722                           
   723                           ;main.c: 471: if(motorPwmFlag == 0)
   724  041A  0852               	movf	_motorPwmFlag,w
   725  041B  1D03               	btfss	3,2
   726  041C  2C1E               	goto	l2351
   727                           
   728                           ;main.c: 472: {
   729                           ;main.c: 473: pwmInit();
   730  041D  24D0               	fcall	_pwmInit
   731  041E                     l2351:	
   732                           
   733                           ;main.c: 475: }
   734                           ;main.c: 476: if(fanDuty < maxDuty)
   735  041E  0858               	movf	_maxDuty,w
   736  041F  0256               	subwf	_fanDuty,w
   737  0420  1803               	skipnc
   738  0421  2C24               	goto	l2355
   739                           
   740                           ;main.c: 477: {
   741                           ;main.c: 478: fanDuty++;
   742  0422  0AD6               	incf	_fanDuty,f
   743                           
   744                           ;main.c: 479: }
   745  0423  2C28               	goto	l2359
   746  0424                     l2355:	
   747                           
   748                           ;main.c: 480: else if(fanDuty > maxDuty)
   749  0424  0856               	movf	_fanDuty,w
   750  0425  0258               	subwf	_maxDuty,w
   751  0426  1C03               	btfss	3,0
   752                           
   753                           ;main.c: 481: {
   754                           ;main.c: 482: fanDuty--;
   755  0427  03D6               	decf	_fanDuty,f
   756  0428                     l2359:	
   757                           
   758                           ;main.c: 483: }
   759                           ;main.c: 484: maxDuty = 34 + (workStep*6);
   760  0428  3006               	movlw	6
   761  0429  00F2               	movwf	___bmul@multiplicand
   762  042A  087A               	movf	_workStep,w
   763  042B  24F2               	fcall	___bmul
   764  042C  3E22               	addlw	34
   765  042D  00D8               	movwf	_maxDuty
   766                           
   767                           ;main.c: 485: PWMD3L = fanDuty;
   768  042E  0856               	movf	_fanDuty,w
   769  042F  1683               	bsf	3,5	;RP0=1, select bank1
   770  0430  009C               	movwf	28	;volatile
   771                           
   772                           ;main.c: 486: }
   773  0431  0008               	return
   774  0432                     l2363:	
   775                           
   776                           ;main.c: 487: else
   777                           ;main.c: 488: {
   778                           ;main.c: 489: if(fanDuty > 0)
   779  0432  0856               	movf	_fanDuty,w
   780  0433  1903               	btfsc	3,2
   781  0434  2C37               	goto	l2367
   782                           
   783                           ;main.c: 490: {
   784                           ;main.c: 491: fanDuty--;
   785  0435  03D6               	decf	_fanDuty,f
   786                           
   787                           ;main.c: 492: }
   788  0436  0008               	return
   789  0437                     l2367:	
   790                           
   791                           ;main.c: 493: else
   792                           ;main.c: 494: {
   793                           ;main.c: 495: pwmStop();
   794  0437  251B               	fcall	_pwmStop
   795                           
   796                           ;main.c: 496: RB3 = 0;
   797  0438  1186               	bcf	6,3	;volatile
   798  0439  0008               	return
   799  043A                     __end_of_workCtr:	
   800                           
   801                           	psect	text2
   802  04D0                     __ptext2:	
   803 ;; *************** function _pwmInit *****************
   804 ;; Defined at:
   805 ;;		line 665 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2
   814 ;; Tracked objects:
   815 ;;		On entry : 100/0
   816 ;;		On exit  : 100/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMMON   BANK0   BANK1
   819 ;;      Params:         0       0       0
   820 ;;      Locals:         0       0       0
   821 ;;      Temps:          0       0       0
   822 ;;      Totals:         0       0       0
   823 ;;Total ram usage:        0 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_workCtr
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           
   834                           ;psect for function _pwmInit
   835  04D0                     _pwmInit:	
   836                           
   837                           ;main.c: 667: motorPwmFlag = 1;
   838                           
   839                           ;incstack = 0
   840                           ; Regs used in _pwmInit: [wreg+status,2]
   841  04D0  01D2               	clrf	_motorPwmFlag
   842  04D1  0AD2               	incf	_motorPwmFlag,f
   843                           
   844                           ;main.c: 668: PWMCON1 = 0B00000000;
   845  04D2  0196               	clrf	22	;volatile
   846                           
   847                           ;main.c: 669: PWMTH = 0X00;
   848  04D3  0198               	clrf	24	;volatile
   849                           
   850                           ;main.c: 670: PWMTL = 73;
   851  04D4  3049               	movlw	73
   852  04D5  0097               	movwf	23	;volatile
   853                           
   854                           ;main.c: 673: PWMD23H = 0;
   855  04D6  1683               	bsf	3,5	;RP0=1, select bank1
   856  04D7  019E               	clrf	30	;volatile
   857                           
   858                           ;main.c: 674: PWMD3L = fanDuty;
   859  04D8  1283               	bcf	3,5	;RP0=0, select bank0
   860  04D9  0856               	movf	_fanDuty,w
   861  04DA  1683               	bsf	3,5	;RP0=1, select bank1
   862  04DB  009C               	movwf	28	;volatile
   863                           
   864                           ;main.c: 675: PWM23DT = 0X00;
   865  04DC  019D               	clrf	29	;volatile
   866                           
   867                           ;main.c: 677: PWMCON0 = 0X08;
   868  04DD  3008               	movlw	8
   869  04DE  1283               	bcf	3,5	;RP0=0, select bank0
   870  04DF  0095               	movwf	21	;volatile
   871                           
   872                           ;main.c: 678: PWMCON2 =0X00;
   873  04E0  019D               	clrf	29	;volatile
   874  04E1  0008               	return
   875  04E2                     __end_of_pwmInit:	
   876                           
   877                           	psect	text3
   878  04F2                     __ptext3:	
   879 ;; *************** function ___bmul *****************
   880 ;; Defined at:
   881 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  multiplier      1    wreg     unsigned char 
   884 ;;  multiplicand    1    2[COMMON] unsigned char 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  multiplier      1    4[COMMON] unsigned char 
   887 ;;  product         1    3[COMMON] unsigned char 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      unsigned char 
   890 ;; Registers used:
   891 ;;		wreg, status,2, status,0
   892 ;; Tracked objects:
   893 ;;		On entry : 100/0
   894 ;;		On exit  : 100/0
   895 ;;		Unchanged: 100/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1
   897 ;;      Params:         1       0       0
   898 ;;      Locals:         2       0       0
   899 ;;      Temps:          0       0       0
   900 ;;      Totals:         3       0       0
   901 ;;Total ram usage:        3 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    1
   904 ;; This function calls:
   905 ;;		Nothing
   906 ;; This function is called by:
   907 ;;		_workCtr
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           
   912                           ;psect for function ___bmul
   913  04F2                     ___bmul:	
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   917                           ;___bmul@multiplier stored from wreg
   918  04F2  00F4               	movwf	___bmul@multiplier
   919  04F3  01F3               	clrf	___bmul@product
   920  04F4                     l2065:	
   921  04F4  0872               	movf	___bmul@multiplicand,w
   922  04F5  1874               	btfsc	___bmul@multiplier,0
   923  04F6  07F3               	addwf	___bmul@product,f
   924  04F7  1003               	clrc
   925  04F8  0DF2               	rlf	___bmul@multiplicand,f
   926  04F9  1003               	clrc
   927  04FA  0CF4               	rrf	___bmul@multiplier,f
   928  04FB  0874               	movf	___bmul@multiplier,w
   929  04FC  1D03               	btfss	3,2
   930  04FD  2CF4               	goto	l2065
   931  04FE  0873               	movf	___bmul@product,w
   932  04FF  0008               	return
   933  0500                     __end_of___bmul:	
   934                           
   935                           	psect	text4
   936  00FB                     __ptext4:	
   937 ;; *************** function _setBatStep *****************
   938 ;; Defined at:
   939 ;;		line 258 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  tempSubBatTi    2    0[BANK0 ] unsigned int 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  1    wreg      void 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0, pclath, cstack
   948 ;; Tracked objects:
   949 ;;		On entry : 100/0
   950 ;;		On exit  : 100/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMMON   BANK0   BANK1
   953 ;;      Params:         0       0       0
   954 ;;      Locals:         0       2       0
   955 ;;      Temps:          0       0       0
   956 ;;      Totals:         0       2       0
   957 ;;Total ram usage:        2 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; Hardware stack levels required when called:    2
   960 ;; This function calls:
   961 ;;		___lwdiv
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _setBatStep
   969  00FB                     _setBatStep:	
   970                           
   971                           ;main.c: 260: if(lowBatLock == 1)
   972                           
   973                           ;incstack = 0
   974                           ; Regs used in _setBatStep: [wreg+status,2+status,0+pclath+cstack]
   975  00FB  0B51               	decfsz	_lowBatLock,w
   976  00FC  2900               	goto	l2659
   977                           
   978                           ;main.c: 261: {
   979                           ;main.c: 262: prePwStep = 0;
   980  00FD  01F9               	clrf	_prePwStep
   981                           
   982                           ;main.c: 263: pwStep = 0;
   983  00FE  01D7               	clrf	_pwStep
   984                           
   985                           ;main.c: 264: }
   986  00FF  0008               	return
   987  0100                     l2659:	
   988                           
   989                           ;main.c: 265: else if(power_ad < 2800)
   990  0100  300A               	movlw	10
   991  0101  024D               	subwf	_power_ad+1,w	;volatile
   992  0102  30F0               	movlw	240
   993  0103  1903               	skipnz
   994  0104  024C               	subwf	_power_ad,w	;volatile
   995  0105  1803               	skipnc
   996  0106  291A               	goto	l2669
   997                           
   998                           ;main.c: 266: {
   999                           ;main.c: 267: if(count1s == 0)
  1000  0107  085F               	movf	_count1s,w
  1001  0108  1D03               	btfss	3,2
  1002  0109  2917               	goto	l719
  1003                           
  1004                           ;main.c: 268: {
  1005                           ;main.c: 269: if(prePwStep > 1)
  1006  010A  3002               	movlw	2
  1007  010B  0279               	subwf	_prePwStep,w
  1008  010C  1C03               	skipc
  1009  010D  2913               	goto	l720
  1010                           
  1011                           ;main.c: 270: {
  1012                           ;main.c: 271: if(chrgFlag == 0)
  1013  010E  087B               	movf	_chrgFlag,w
  1014  010F  1D03               	btfss	3,2
  1015  0110  2915               	goto	l722
  1016                           
  1017                           ;main.c: 272: prePwStep--;
  1018  0111  03F9               	decf	_prePwStep,f
  1019  0112  2915               	goto	l722
  1020  0113                     l720:	
  1021                           
  1022                           ;main.c: 274: else
  1023                           ;main.c: 275: {
  1024                           ;main.c: 276: prePwStep = 1;
  1025  0113  01F9               	clrf	_prePwStep
  1026  0114  0AF9               	incf	_prePwStep,f
  1027  0115                     l722:	
  1028                           
  1029                           ;main.c: 277: }
  1030                           ;main.c: 278: pwStep = 1;
  1031  0115  01D7               	clrf	_pwStep
  1032  0116  0AD7               	incf	_pwStep,f
  1033  0117                     l719:	
  1034                           
  1035                           ;main.c: 279: }
  1036                           ;main.c: 280: pwStep = 1;
  1037  0117  01D7               	clrf	_pwStep
  1038  0118  0AD7               	incf	_pwStep,f
  1039                           
  1040                           ;main.c: 281: }
  1041  0119  0008               	return
  1042  011A                     l2669:	
  1043                           
  1044                           ;main.c: 282: else
  1045                           ;main.c: 283: {
  1046                           ;main.c: 284: if(power_ad < 3600)
  1047  011A  300E               	movlw	14
  1048  011B  024D               	subwf	_power_ad+1,w	;volatile
  1049  011C  3010               	movlw	16
  1050  011D  1903               	skipnz
  1051  011E  024C               	subwf	_power_ad,w	;volatile
  1052  011F  1803               	skipnc
  1053  0120  292F               	goto	l2673
  1054                           
  1055                           ;main.c: 285: {
  1056                           ;main.c: 286: pwStep = (power_ad - 2800)/80;
  1057  0121  3050               	movlw	80
  1058  0122  00F2               	movwf	___lwdiv@divisor
  1059  0123  01F3               	clrf	___lwdiv@divisor+1
  1060  0124  084C               	movf	_power_ad,w	;volatile
  1061  0125  3E10               	addlw	16
  1062  0126  00F4               	movwf	___lwdiv@dividend
  1063  0127  084D               	movf	_power_ad+1,w	;volatile
  1064  0128  1803               	skipnc
  1065  0129  3E01               	addlw	1
  1066  012A  3EF5               	addlw	245
  1067  012B  00F5               	movwf	___lwdiv@dividend+1
  1068  012C  23C6               	fcall	___lwdiv
  1069  012D  0872               	movf	?___lwdiv,w
  1070  012E  293D               	goto	L2
  1071  012F                     l2673:	
  1072                           ;main.c: 287: }
  1073                           
  1074                           
  1075                           ;main.c: 288: else
  1076                           ;main.c: 289: {
  1077                           ;main.c: 290: pwStep = 20 + ((power_ad - 3600)/6);
  1078  012F  3006               	movlw	6
  1079  0130  00F2               	movwf	___lwdiv@divisor
  1080  0131  01F3               	clrf	___lwdiv@divisor+1
  1081  0132  084C               	movf	_power_ad,w	;volatile
  1082  0133  3EF0               	addlw	240
  1083  0134  00F4               	movwf	___lwdiv@dividend
  1084  0135  084D               	movf	_power_ad+1,w	;volatile
  1085  0136  1803               	skipnc
  1086  0137  3E01               	addlw	1
  1087  0138  3EF1               	addlw	241
  1088  0139  00F5               	movwf	___lwdiv@dividend+1
  1089  013A  23C6               	fcall	___lwdiv
  1090  013B  0872               	movf	?___lwdiv,w
  1091  013C  3E14               	addlw	20
  1092  013D                     L2:	
  1093  013D  00D7               	movwf	_pwStep
  1094                           
  1095                           ;main.c: 291: }
  1096                           ;main.c: 292: if(pwStep > 99)
  1097  013E  3064               	movlw	100
  1098  013F  0257               	subwf	_pwStep,w
  1099  0140  1C03               	skipc
  1100  0141  2944               	goto	l2679
  1101                           
  1102                           ;main.c: 293: {
  1103                           ;main.c: 294: pwStep = 99;
  1104  0142  3063               	movlw	99
  1105  0143  00D7               	movwf	_pwStep
  1106  0144                     l2679:	
  1107                           
  1108                           ;main.c: 295: }
  1109                           ;main.c: 297: if(chrgFlag)
  1110  0144  087B               	movf	_chrgFlag,w
  1111  0145  1903               	btfsc	3,2
  1112  0146  2977               	goto	l2705
  1113                           
  1114                           ;main.c: 298: {
  1115                           ;main.c: 299: if(chrgFullFlag && prePwStep < 99)
  1116  0147  085D               	movf	_chrgFullFlag,w
  1117  0148  1903               	btfsc	3,2
  1118  0149  295C               	goto	l2691
  1119  014A  3063               	movlw	99
  1120  014B  0279               	subwf	_prePwStep,w
  1121  014C  1803               	skipnc
  1122  014D  295C               	goto	l2691
  1123                           
  1124                           ;main.c: 300: {
  1125                           ;main.c: 301: if(++count15s >= 7500)
  1126  014E  0AC6               	incf	_count15s,f
  1127  014F  1903               	skipnz
  1128  0150  0AC7               	incf	_count15s+1,f
  1129  0151  301D               	movlw	29
  1130  0152  0247               	subwf	_count15s+1,w
  1131  0153  304C               	movlw	76
  1132  0154  1903               	skipnz
  1133  0155  0246               	subwf	_count15s,w
  1134  0156  1C03               	skipc
  1135  0157  295E               	goto	l2693
  1136                           
  1137                           ;main.c: 302: {
  1138                           ;main.c: 303: count15s = 0;
  1139  0158  01C6               	clrf	_count15s
  1140  0159  01C7               	clrf	_count15s+1
  1141                           
  1142                           ;main.c: 304: prePwStep++;
  1143  015A  0AF9               	incf	_prePwStep,f
  1144  015B  295E               	goto	l2693
  1145  015C                     l2691:	
  1146                           
  1147                           ;main.c: 307: else
  1148                           ;main.c: 308: {
  1149                           ;main.c: 309: count15s = 0;
  1150  015C  01C6               	clrf	_count15s
  1151  015D  01C7               	clrf	_count15s+1
  1152  015E                     l2693:	
  1153                           
  1154                           ;main.c: 310: }
  1155                           ;main.c: 311: if(pwStep > prePwStep)
  1156  015E  0857               	movf	_pwStep,w
  1157  015F  0279               	subwf	_prePwStep,w
  1158  0160  1803               	skipnc
  1159  0161  2974               	goto	l2703
  1160                           
  1161                           ;main.c: 312: {
  1162                           ;main.c: 313: if(++count30s >= 15000 && prePwStep < 99)
  1163  0162  0AC8               	incf	_count30s,f
  1164  0163  1903               	skipnz
  1165  0164  0AC9               	incf	_count30s+1,f
  1166  0165  303A               	movlw	58
  1167  0166  0249               	subwf	_count30s+1,w
  1168  0167  3098               	movlw	152
  1169  0168  1903               	skipnz
  1170  0169  0248               	subwf	_count30s,w
  1171  016A  1C03               	skipc
  1172  016B  0008               	return
  1173  016C  3063               	movlw	99
  1174  016D  0279               	subwf	_prePwStep,w
  1175  016E  1803               	skipnc
  1176  016F  0008               	return
  1177                           
  1178                           ;main.c: 314: {
  1179                           ;main.c: 315: count30s = 0;
  1180  0170  01C8               	clrf	_count30s
  1181  0171  01C9               	clrf	_count30s+1
  1182                           
  1183                           ;main.c: 316: prePwStep++;
  1184  0172  0AF9               	incf	_prePwStep,f
  1185  0173  0008               	return
  1186  0174                     l2703:	
  1187                           
  1188                           ;main.c: 320: else
  1189                           ;main.c: 321: {
  1190                           ;main.c: 322: count30s = 0;
  1191  0174  01C8               	clrf	_count30s
  1192  0175  01C9               	clrf	_count30s+1
  1193  0176  0008               	return
  1194  0177                     l2705:	
  1195                           
  1196                           ;main.c: 325: else
  1197                           ;main.c: 326: {
  1198                           ;main.c: 327: unsigned int tempSubBatTime = 15000;
  1199  0177  3098               	movlw	152
  1200  0178  00A0               	movwf	setBatStep@tempSubBatTime
  1201  0179  303A               	movlw	58
  1202  017A  00A1               	movwf	setBatStep@tempSubBatTime+1
  1203                           
  1204                           ;main.c: 328: if(prePwStep < 40)
  1205  017B  3028               	movlw	40
  1206  017C  0279               	subwf	_prePwStep,w
  1207  017D  1803               	skipnc
  1208  017E  2983               	goto	l735
  1209                           
  1210                           ;main.c: 329: {
  1211                           ;main.c: 330: tempSubBatTime = 8000;
  1212  017F  3040               	movlw	64
  1213  0180  00A0               	movwf	setBatStep@tempSubBatTime
  1214  0181  301F               	movlw	31
  1215  0182  00A1               	movwf	setBatStep@tempSubBatTime+1
  1216  0183                     l735:	
  1217                           
  1218                           ;main.c: 331: }
  1219                           ;main.c: 332: if(pwStep < prePwStep && prePwStep > 1)
  1220  0183  0879               	movf	_prePwStep,w
  1221  0184  0257               	subwf	_pwStep,w
  1222  0185  1803               	skipnc
  1223  0186  2974               	goto	l2703
  1224  0187  3002               	movlw	2
  1225  0188  0279               	subwf	_prePwStep,w
  1226  0189  1C03               	skipc
  1227  018A  2974               	goto	l2703
  1228                           
  1229                           ;main.c: 333: {
  1230                           ;main.c: 334: if(++count30s >= tempSubBatTime && prePwStep > 1)
  1231  018B  0AC8               	incf	_count30s,f
  1232  018C  1903               	skipnz
  1233  018D  0AC9               	incf	_count30s+1,f
  1234  018E  0821               	movf	setBatStep@tempSubBatTime+1,w
  1235  018F  0249               	subwf	_count30s+1,w
  1236  0190  1D03               	skipz
  1237  0191  2994               	goto	u2695
  1238  0192  0820               	movf	setBatStep@tempSubBatTime,w
  1239  0193  0248               	subwf	_count30s,w
  1240  0194                     u2695:	
  1241  0194  1C03               	skipc
  1242  0195  0008               	return
  1243  0196  3002               	movlw	2
  1244  0197  0279               	subwf	_prePwStep,w
  1245  0198  1C03               	skipc
  1246  0199  0008               	return
  1247                           
  1248                           ;main.c: 335: {
  1249                           ;main.c: 336: count30s = 0;
  1250  019A  01C8               	clrf	_count30s
  1251  019B  01C9               	clrf	_count30s+1
  1252                           
  1253                           ;main.c: 337: prePwStep--;
  1254  019C  03F9               	decf	_prePwStep,f
  1255  019D  0008               	return
  1256  019E                     __end_of_setBatStep:	
  1257                           
  1258                           	psect	text5
  1259  03C6                     __ptext5:	
  1260 ;; *************** function ___lwdiv *****************
  1261 ;; Defined at:
  1262 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  divisor         2    2[COMMON] unsigned int 
  1265 ;;  dividend        2    4[COMMON] unsigned int 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  quotient        2    7[COMMON] unsigned int 
  1268 ;;  counter         1    6[COMMON] unsigned char 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  2    2[COMMON] unsigned int 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0
  1273 ;; Tracked objects:
  1274 ;;		On entry : 100/0
  1275 ;;		On exit  : 100/0
  1276 ;;		Unchanged: 100/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1
  1278 ;;      Params:         4       0       0
  1279 ;;      Locals:         3       0       0
  1280 ;;      Temps:          0       0       0
  1281 ;;      Totals:         7       0       0
  1282 ;;Total ram usage:        7 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    1
  1285 ;; This function calls:
  1286 ;;		Nothing
  1287 ;; This function is called by:
  1288 ;;		_setBatStep
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           
  1293                           ;psect for function ___lwdiv
  1294  03C6                     ___lwdiv:	
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1298  03C6  01F7               	clrf	___lwdiv@quotient
  1299  03C7  01F8               	clrf	___lwdiv@quotient+1
  1300  03C8  0872               	movf	___lwdiv@divisor,w
  1301  03C9  0473               	iorwf	___lwdiv@divisor+1,w
  1302  03CA  1903               	btfsc	3,2
  1303  03CB  2BEB               	goto	l2625
  1304  03CC  01F6               	clrf	___lwdiv@counter
  1305  03CD                     L3:	
  1306  03CD  0AF6               	incf	___lwdiv@counter,f
  1307  03CE  1BF3               	btfsc	___lwdiv@divisor+1,7
  1308  03CF  2BD4               	goto	l2613
  1309  03D0  1003               	clrc
  1310  03D1  0DF2               	rlf	___lwdiv@divisor,f
  1311  03D2  0DF3               	rlf	___lwdiv@divisor+1,f
  1312  03D3  2BCD               	goto	L3
  1313  03D4                     l2613:	
  1314  03D4  1003               	clrc
  1315  03D5  0DF7               	rlf	___lwdiv@quotient,f
  1316  03D6  0DF8               	rlf	___lwdiv@quotient+1,f
  1317  03D7  0873               	movf	___lwdiv@divisor+1,w
  1318  03D8  0275               	subwf	___lwdiv@dividend+1,w
  1319  03D9  1D03               	skipz
  1320  03DA  2BDD               	goto	u2475
  1321  03DB  0872               	movf	___lwdiv@divisor,w
  1322  03DC  0274               	subwf	___lwdiv@dividend,w
  1323  03DD                     u2475:	
  1324  03DD  1C03               	skipc
  1325  03DE  2BE7               	goto	L4
  1326  03DF  0872               	movf	___lwdiv@divisor,w
  1327  03E0  02F4               	subwf	___lwdiv@dividend,f
  1328  03E1  0873               	movf	___lwdiv@divisor+1,w
  1329  03E2  1C03               	skipc
  1330  03E3  03F5               	decf	___lwdiv@dividend+1,f
  1331  03E4  02F5               	subwf	___lwdiv@dividend+1,f
  1332  03E5  1477               	bsf	___lwdiv@quotient,0
  1333  03E6  1003               	clrc
  1334  03E7                     L4:	
  1335  03E7  0CF3               	rrf	___lwdiv@divisor+1,f
  1336  03E8  0CF2               	rrf	___lwdiv@divisor,f
  1337  03E9  0BF6               	decfsz	___lwdiv@counter,f
  1338  03EA  2BD4               	goto	l2613
  1339  03EB                     l2625:	
  1340  03EB  0878               	movf	___lwdiv@quotient+1,w
  1341  03EC  00F3               	movwf	?___lwdiv+1
  1342  03ED  0877               	movf	___lwdiv@quotient,w
  1343  03EE  00F2               	movwf	?___lwdiv
  1344  03EF  0008               	return
  1345  03F0                     __end_of___lwdiv:	
  1346                           
  1347                           	psect	text6
  1348  0262                     __ptext6:	
  1349 ;; *************** function _ledCtr *****************
  1350 ;; Defined at:
  1351 ;;		line 191 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;		None
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;		None
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0, pclath, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1
  1365 ;;      Params:         0       0       0
  1366 ;;      Locals:         0       0       0
  1367 ;;      Temps:          0       0       0
  1368 ;;      Totals:         0       0       0
  1369 ;;Total ram usage:        0 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    2
  1372 ;; This function calls:
  1373 ;;		___lwmod
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           
  1380                           ;psect for function _ledCtr
  1381  0262                     _ledCtr:	
  1382                           
  1383                           ;main.c: 193: if(firstTime > 0)
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
  1387  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0263  0864               	movf	_firstTime,w
  1389  0264  1903               	btfsc	3,2
  1390  0265  2A6F               	goto	l2381
  1391                           
  1392                           ;main.c: 194: {
  1393                           ;main.c: 195: firstTime--;
  1394  0266  03E4               	decf	_firstTime,f
  1395                           
  1396                           ;main.c: 196: ledStep = 0;
  1397  0267  01DB               	clrf	_ledStep
  1398                           
  1399                           ;main.c: 197: if(prePwStep < pwStep)
  1400  0268  0857               	movf	_pwStep,w
  1401  0269  0279               	subwf	_prePwStep,w
  1402  026A  1803               	skipnc
  1403  026B  2A9B               	goto	l2403
  1404                           
  1405                           ;main.c: 198: {
  1406                           ;main.c: 199: prePwStep = pwStep;
  1407  026C  0857               	movf	_pwStep,w
  1408  026D  00F9               	movwf	_prePwStep
  1409  026E  2A9B               	goto	l2403
  1410  026F                     l2381:	
  1411                           
  1412                           ;main.c: 202: else if(overWorkTime > 0)
  1413  026F  084A               	movf	_overWorkTime,w
  1414  0270  044B               	iorwf	_overWorkTime+1,w
  1415  0271  1903               	btfsc	3,2
  1416  0272  2A8D               	goto	l2391
  1417                           
  1418                           ;main.c: 203: {
  1419                           ;main.c: 204: overWorkTime--;
  1420  0273  3001               	movlw	1
  1421  0274  02CA               	subwf	_overWorkTime,f
  1422  0275  3000               	movlw	0
  1423  0276  1C03               	skipc
  1424  0277  03CB               	decf	_overWorkTime+1,f
  1425  0278  02CB               	subwf	_overWorkTime+1,f
  1426                           
  1427                           ;main.c: 205: if(overWorkTime % 60 < 30)
  1428  0279  303C               	movlw	60
  1429  027A  00F2               	movwf	___lwmod@divisor
  1430  027B  01F3               	clrf	___lwmod@divisor+1
  1431  027C  084B               	movf	_overWorkTime+1,w
  1432  027D  00F5               	movwf	___lwmod@dividend+1
  1433  027E  084A               	movf	_overWorkTime,w
  1434  027F  00F4               	movwf	___lwmod@dividend
  1435  0280  243A               	fcall	___lwmod
  1436  0281  3000               	movlw	0
  1437  0282  0273               	subwf	?___lwmod+1,w
  1438  0283  301E               	movlw	30
  1439  0284  1903               	skipnz
  1440  0285  0272               	subwf	?___lwmod,w
  1441  0286  1803               	skipnc
  1442  0287  2A8B               	goto	l2389
  1443  0288                     l2387:	
  1444                           
  1445                           ;main.c: 206: {
  1446                           ;main.c: 207: ledStep = 1;
  1447  0288  01DB               	clrf	_ledStep
  1448  0289  0ADB               	incf	_ledStep,f
  1449                           
  1450                           ;main.c: 208: }
  1451  028A  2A9B               	goto	l2403
  1452  028B                     l2389:	
  1453                           
  1454                           ;main.c: 209: else
  1455                           ;main.c: 210: {
  1456                           ;main.c: 211: ledStep = 0;
  1457  028B  01DB               	clrf	_ledStep
  1458  028C  2A9B               	goto	l2403
  1459  028D                     l2391:	
  1460                           
  1461                           ;main.c: 214: else if(workStep > 0)
  1462  028D  087A               	movf	_workStep,w
  1463  028E  1903               	btfsc	3,2
  1464  028F  2A92               	goto	l2395
  1465                           
  1466                           ;main.c: 215: {
  1467                           ;main.c: 216: ledStep = 3;
  1468  0290  3003               	movlw	3
  1469  0291  2A9A               	goto	L5
  1470  0292                     l2395:	
  1471                           ;main.c: 217: }
  1472                           
  1473                           
  1474                           ;main.c: 218: else if(chrgFlag)
  1475  0292  087B               	movf	_chrgFlag,w
  1476  0293  1903               	btfsc	3,2
  1477  0294  2A8B               	goto	l2389
  1478                           
  1479                           ;main.c: 219: {
  1480                           ;main.c: 220: if(prePwStep >= 99)
  1481  0295  3063               	movlw	99
  1482  0296  0279               	subwf	_prePwStep,w
  1483  0297  1C03               	skipc
  1484  0298  2A88               	goto	l2387
  1485                           
  1486                           ;main.c: 221: {
  1487                           ;main.c: 222: ledStep = 2;
  1488  0299  3002               	movlw	2
  1489  029A                     L5:	
  1490  029A  00DB               	movwf	_ledStep
  1491  029B                     l2403:	
  1492                           ;main.c: 223: }
  1493                           
  1494                           
  1495                           ;main.c: 232: }
  1496                           ;main.c: 233: if(ledStep == 0)
  1497  029B  085B               	movf	_ledStep,w
  1498  029C  1D03               	btfss	3,2
  1499  029D  2AA2               	goto	l2407
  1500                           
  1501                           ;main.c: 234: {
  1502                           ;main.c: 235: PORTA &= 0xE3;
  1503  029E  30E3               	movlw	227
  1504  029F  1683               	bsf	3,5	;RP0=1, select bank1
  1505  02A0  0586               	andwf	6,f	;volatile
  1506                           
  1507                           ;main.c: 236: }
  1508  02A1  0008               	return
  1509  02A2                     l2407:	
  1510                           
  1511                           ;main.c: 237: else if(ledStep == 1)
  1512  02A2  0B5B               	decfsz	_ledStep,w
  1513  02A3  2AA9               	goto	l2411
  1514                           
  1515                           ;main.c: 238: {
  1516                           ;main.c: 239: RA4 = 1;
  1517  02A4  1683               	bsf	3,5	;RP0=1, select bank1
  1518  02A5  1606               	bsf	6,4	;volatile
  1519                           
  1520                           ;main.c: 240: RA3 = 0;
  1521  02A6  1186               	bcf	6,3	;volatile
  1522                           
  1523                           ;main.c: 241: RA2 = 0;
  1524  02A7  1106               	bcf	6,2	;volatile
  1525                           
  1526                           ;main.c: 242: }
  1527  02A8  0008               	return
  1528  02A9                     l2411:	
  1529                           
  1530                           ;main.c: 243: else if(ledStep == 2)
  1531  02A9  3002               	movlw	2
  1532  02AA  065B               	xorwf	_ledStep,w
  1533  02AB  1D03               	btfss	3,2
  1534  02AC  2AB2               	goto	l2415
  1535                           
  1536                           ;main.c: 244: {
  1537                           ;main.c: 245: RA4 = 0;
  1538  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  1539  02AE  1206               	bcf	6,4	;volatile
  1540                           
  1541                           ;main.c: 246: RA3 = 1;
  1542  02AF  1586               	bsf	6,3	;volatile
  1543                           
  1544                           ;main.c: 247: RA2 = 0;
  1545  02B0  1106               	bcf	6,2	;volatile
  1546                           
  1547                           ;main.c: 248: }
  1548  02B1  0008               	return
  1549  02B2                     l2415:	
  1550                           
  1551                           ;main.c: 249: else if(ledStep == 3)
  1552  02B2  3003               	movlw	3
  1553  02B3  065B               	xorwf	_ledStep,w
  1554  02B4  1D03               	btfss	3,2
  1555  02B5  0008               	return
  1556                           
  1557                           ;main.c: 250: {
  1558                           ;main.c: 251: RA4 = 0;
  1559  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1560  02B7  1206               	bcf	6,4	;volatile
  1561                           
  1562                           ;main.c: 252: RA3 = 0;
  1563  02B8  1186               	bcf	6,3	;volatile
  1564                           
  1565                           ;main.c: 253: RA2 = 1;
  1566  02B9  1506               	bsf	6,2	;volatile
  1567  02BA  0008               	return
  1568  02BB                     __end_of_ledCtr:	
  1569                           
  1570                           	psect	text7
  1571  043A                     __ptext7:	
  1572 ;; *************** function ___lwmod *****************
  1573 ;; Defined at:
  1574 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  divisor         2    2[COMMON] unsigned int 
  1577 ;;  dividend        2    4[COMMON] unsigned int 
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  counter         1    6[COMMON] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  2    2[COMMON] unsigned int 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 100/0
  1586 ;;		On exit  : 100/0
  1587 ;;		Unchanged: 100/0
  1588 ;; Data sizes:     COMMON   BANK0   BANK1
  1589 ;;      Params:         4       0       0
  1590 ;;      Locals:         1       0       0
  1591 ;;      Temps:          0       0       0
  1592 ;;      Totals:         5       0       0
  1593 ;;Total ram usage:        5 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		_ledCtr
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           
  1604                           ;psect for function ___lwmod
  1605  043A                     ___lwmod:	
  1606                           
  1607                           ;incstack = 0
  1608                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1609  043A  0872               	movf	___lwmod@divisor,w
  1610  043B  0473               	iorwf	___lwmod@divisor+1,w
  1611  043C  1903               	btfsc	3,2
  1612  043D  2C59               	goto	l2199
  1613  043E  01F6               	clrf	___lwmod@counter
  1614  043F                     L6:	
  1615  043F  0AF6               	incf	___lwmod@counter,f
  1616  0440  1BF3               	btfsc	___lwmod@divisor+1,7
  1617  0441  2C46               	goto	l2191
  1618  0442  1003               	clrc
  1619  0443  0DF2               	rlf	___lwmod@divisor,f
  1620  0444  0DF3               	rlf	___lwmod@divisor+1,f
  1621  0445  2C3F               	goto	L6
  1622  0446                     l2191:	
  1623  0446  0873               	movf	___lwmod@divisor+1,w
  1624  0447  0275               	subwf	___lwmod@dividend+1,w
  1625  0448  1D03               	skipz
  1626  0449  2C4C               	goto	u1665
  1627  044A  0872               	movf	___lwmod@divisor,w
  1628  044B  0274               	subwf	___lwmod@dividend,w
  1629  044C                     u1665:	
  1630  044C  1C03               	skipc
  1631  044D  2C55               	goto	L7
  1632  044E  0872               	movf	___lwmod@divisor,w
  1633  044F  02F4               	subwf	___lwmod@dividend,f
  1634  0450  0873               	movf	___lwmod@divisor+1,w
  1635  0451  1C03               	skipc
  1636  0452  03F5               	decf	___lwmod@dividend+1,f
  1637  0453  02F5               	subwf	___lwmod@dividend+1,f
  1638  0454  1003               	clrc
  1639  0455                     L7:	
  1640  0455  0CF3               	rrf	___lwmod@divisor+1,f
  1641  0456  0CF2               	rrf	___lwmod@divisor,f
  1642  0457  0BF6               	decfsz	___lwmod@counter,f
  1643  0458  2C46               	goto	l2191
  1644  0459                     l2199:	
  1645  0459  0875               	movf	___lwmod@dividend+1,w
  1646  045A  00F3               	movwf	?___lwmod+1
  1647  045B  0874               	movf	___lwmod@dividend,w
  1648  045C  00F2               	movwf	?___lwmod
  1649  045D  0008               	return
  1650  045E                     __end_of___lwmod:	
  1651                           
  1652                           	psect	text8
  1653  045E                     __ptext8:	
  1654 ;; *************** function _keyCtr *****************
  1655 ;; Defined at:
  1656 ;;		line 438 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  kclick          1    3[COMMON] unsigned char 
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0, pclath, cstack
  1665 ;; Tracked objects:
  1666 ;;		On entry : 100/0
  1667 ;;		On exit  : 100/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1
  1670 ;;      Params:         0       0       0
  1671 ;;      Locals:         1       0       0
  1672 ;;      Temps:          0       0       0
  1673 ;;      Totals:         1       0       0
  1674 ;;Total ram usage:        1 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    2
  1677 ;; This function calls:
  1678 ;;		_keyRead
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           
  1685                           ;psect for function _keyCtr
  1686  045E                     _keyCtr:	
  1687                           
  1688                           ;main.c: 440: char kclick = keyRead(0x02 & (~PORTA));
  1689                           
  1690                           ;incstack = 0
  1691                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1692  045E  1683               	bsf	3,5	;RP0=1, select bank1
  1693  045F  0906               	comf	6,w	;volatile
  1694  0460  3902               	andlw	2
  1695  0461  247E               	fcall	_keyRead
  1696  0462  00F3               	movwf	keyCtr@kclick
  1697                           
  1698                           ;main.c: 441: if(kclick == 1)
  1699  0463  0B73               	decfsz	keyCtr@kclick,w
  1700  0464  2C70               	goto	l2335
  1701                           
  1702                           ;main.c: 442: {
  1703                           ;main.c: 443: if(workStep > 0)
  1704  0465  087A               	movf	_workStep,w
  1705  0466  1903               	btfsc	3,2
  1706  0467  0008               	return
  1707                           
  1708                           ;main.c: 444: {
  1709                           ;main.c: 445: if(++workStep > 3)
  1710  0468  3004               	movlw	4
  1711  0469  0AFA               	incf	_workStep,f
  1712  046A  027A               	subwf	_workStep,w
  1713  046B  1C03               	skipc
  1714  046C  0008               	return
  1715                           
  1716                           ;main.c: 446: {
  1717                           ;main.c: 447: workStep = 1;
  1718  046D  01FA               	clrf	_workStep
  1719  046E  0AFA               	incf	_workStep,f
  1720  046F  0008               	return
  1721  0470                     l2335:	
  1722                           
  1723                           ;main.c: 451: else if(kclick == 2)
  1724  0470  3002               	movlw	2
  1725  0471  0673               	xorwf	keyCtr@kclick,w
  1726  0472  1D03               	btfss	3,2
  1727  0473  0008               	return
  1728                           
  1729                           ;main.c: 452: {
  1730                           ;main.c: 453: if(workStep > 0)
  1731  0474  087A               	movf	_workStep,w
  1732  0475  1903               	btfsc	3,2
  1733  0476  2C79               	goto	l772
  1734                           
  1735                           ;main.c: 454: {
  1736                           ;main.c: 455: workStep = 0;
  1737  0477  01FA               	clrf	_workStep
  1738                           
  1739                           ;main.c: 456: }
  1740  0478  0008               	return
  1741  0479                     l772:	
  1742                           
  1743                           ;main.c: 457: else
  1744                           ;main.c: 458: {
  1745                           ;main.c: 459: workStep = 1;
  1746  0479  01FA               	clrf	_workStep
  1747  047A  0AFA               	incf	_workStep,f
  1748                           
  1749                           ;main.c: 460: overWorkTime = 0;
  1750  047B  01CA               	clrf	_overWorkTime
  1751  047C  01CB               	clrf	_overWorkTime+1
  1752  047D  0008               	return
  1753  047E                     __end_of_keyCtr:	
  1754                           
  1755                           	psect	text9
  1756  047E                     __ptext9:	
  1757 ;; *************** function _keyRead *****************
  1758 ;; Defined at:
  1759 ;;		line 370 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  keyStatus       1    wreg     unsigned char 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  keyStatus       1    2[COMMON] unsigned char 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      unsigned char 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0
  1768 ;; Tracked objects:
  1769 ;;		On entry : 100/100
  1770 ;;		On exit  : 100/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1
  1773 ;;      Params:         0       0       0
  1774 ;;      Locals:         1       0       0
  1775 ;;      Temps:          0       0       0
  1776 ;;      Totals:         1       0       0
  1777 ;;Total ram usage:        1 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    1
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_keyCtr
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           
  1788                           ;psect for function _keyRead
  1789  047E                     _keyRead:	
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1793                           ;keyRead@keyStatus stored from wreg
  1794  047E  00F2               	movwf	keyRead@keyStatus
  1795                           
  1796                           ;main.c: 372: if(keyStatus)
  1797  047F  0872               	movf	keyRead@keyStatus,w
  1798  0480  3064               	movlw	100
  1799                           
  1800                           ;main.c: 373: {
  1801                           ;main.c: 374: keyCount++;
  1802  0481  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0482  1903               	btfsc	3,2
  1804  0483  2C91               	goto	L9
  1805  0484  0ADA               	incf	_keyCount,f
  1806                           
  1807                           ;main.c: 375: if(keyCount >= 100)
  1808  0485  025A               	subwf	_keyCount,w
  1809  0486  1C03               	skipc
  1810  0487  3400               	retlw	0
  1811                           
  1812                           ;main.c: 376: {
  1813                           ;main.c: 377: keyCount = 100;
  1814  0488  3064               	movlw	100
  1815  0489  00DA               	movwf	_keyCount
  1816                           
  1817                           ;main.c: 378: if(!longPressFlag)
  1818  048A  0859               	movf	_longPressFlag,w
  1819  048B  1D03               	btfss	3,2
  1820  048C  3400               	retlw	0
  1821  048D  3002               	movlw	2
  1822                           
  1823                           ;main.c: 379: {
  1824                           ;main.c: 380: longPressFlag = 1;
  1825  048E  01D9               	clrf	_longPressFlag
  1826  048F  0AD9               	incf	_longPressFlag,f
  1827                           
  1828                           ;main.c: 381: return 2;
  1829  0490  0008               	return
  1830  0491                     L9:	
  1831                           ;main.c: 385: else
  1832                           ;main.c: 386: {
  1833                           ;main.c: 387: if(keyCount >= 100)
  1834                           
  1835  0491  025A               	subwf	_keyCount,w
  1836  0492  1C03               	skipc
  1837  0493  2C97               	goto	l1965
  1838                           
  1839                           ;main.c: 388: {
  1840                           ;main.c: 389: keyCount = 0;
  1841  0494  01DA               	clrf	_keyCount
  1842                           
  1843                           ;main.c: 390: longPressFlag = 0;
  1844  0495  01D9               	clrf	_longPressFlag
  1845                           
  1846                           ;main.c: 391: return 0;
  1847  0496  3400               	retlw	0
  1848  0497                     l1965:	
  1849                           
  1850                           ;main.c: 393: else if(keyCount >= 6)
  1851  0497  3006               	movlw	6
  1852  0498  025A               	subwf	_keyCount,w
  1853                           
  1854                           ;main.c: 394: {
  1855                           ;main.c: 395: keyCount = 0;
  1856  0499  01DA               	clrf	_keyCount
  1857  049A  1803               	btfsc	3,0
  1858                           
  1859                           ;main.c: 396: return 1;
  1860  049B  3401               	retlw	1
  1861  049C  3400               	retlw	0
  1862  049D                     __end_of_keyRead:	
  1863                           ;main.c: 397: }
  1864                           ;main.c: 398: keyCount = 0;
  1865                           
  1866                           
  1867                           	psect	text10
  1868  0500                     __ptext10:	
  1869 ;; *************** function _chrgCtr *****************
  1870 ;; Defined at:
  1871 ;;		line 350 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  1    wreg      void 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0, pclath, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 100/0
  1882 ;;		On exit  : 100/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMMON   BANK0   BANK1
  1885 ;;      Params:         0       0       0
  1886 ;;      Locals:         0       0       0
  1887 ;;      Temps:          0       0       0
  1888 ;;      Totals:         0       0       0
  1889 ;;Total ram usage:        0 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    2
  1892 ;; This function calls:
  1893 ;;		_pwmStop
  1894 ;; This function is called by:
  1895 ;;		_main
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           
  1900                           ;psect for function _chrgCtr
  1901  0500                     _chrgCtr:	
  1902                           
  1903                           ;main.c: 352: if(PORTB & 0x01)
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1907  0500  1C06               	btfss	6,0	;volatile
  1908  0501  2D08               	goto	l2235
  1909                           
  1910                           ;main.c: 353: {
  1911                           ;main.c: 354: chrgFlag = 1;
  1912  0502  01FB               	clrf	_chrgFlag
  1913  0503  0AFB               	incf	_chrgFlag,f
  1914                           
  1915                           ;main.c: 355: workStep = 0;
  1916  0504  01FA               	clrf	_workStep
  1917                           
  1918                           ;main.c: 356: pwmStop();
  1919  0505  251B               	fcall	_pwmStop
  1920                           
  1921                           ;main.c: 357: lowBatFlag = 0;
  1922  0506  01D5               	clrf	_lowBatFlag
  1923                           
  1924                           ;main.c: 359: }
  1925  0507  0008               	return
  1926  0508                     l2235:	
  1927                           
  1928                           ;main.c: 360: else
  1929                           ;main.c: 361: {
  1930                           ;main.c: 362: chrgFlag = 0;
  1931  0508  01FB               	clrf	_chrgFlag
  1932                           
  1933                           ;main.c: 363: chrgFullFlag = 0;
  1934  0509  01DD               	clrf	_chrgFullFlag
  1935  050A  0008               	return
  1936  050B                     __end_of_chrgCtr:	
  1937                           
  1938                           	psect	text11
  1939  051B                     __ptext11:	
  1940 ;; *************** function _pwmStop *****************
  1941 ;; Defined at:
  1942 ;;		line 681 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 100/0
  1953 ;;		On exit  : 100/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMMON   BANK0   BANK1
  1956 ;;      Params:         0       0       0
  1957 ;;      Locals:         0       0       0
  1958 ;;      Temps:          0       0       0
  1959 ;;      Totals:         0       0       0
  1960 ;;Total ram usage:        0 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    1
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_chrgCtr
  1967 ;;		_workCtr
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           
  1972                           ;psect for function _pwmStop
  1973  051B                     _pwmStop:	
  1974                           
  1975                           ;main.c: 683: if(motorPwmFlag)
  1976                           
  1977                           ;incstack = 0
  1978                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  1979  051B  0852               	movf	_motorPwmFlag,w
  1980  051C  1903               	btfsc	3,2
  1981  051D  0008               	return
  1982                           
  1983                           ;main.c: 684: {
  1984                           ;main.c: 685: motorPwmFlag = 0;
  1985  051E  01D2               	clrf	_motorPwmFlag
  1986                           
  1987                           ;main.c: 686: PWMCON0 &= 0XF7;
  1988  051F  1195               	bcf	21,3	;volatile
  1989                           
  1990                           ;main.c: 687: RB4 = 0;
  1991  0520  1206               	bcf	6,4	;volatile
  1992  0521  0008               	return
  1993  0522                     __end_of_pwmStop:	
  1994                           
  1995                           	psect	text12
  1996  03F0                     __ptext12:	
  1997 ;; *************** function _checkOutA *****************
  1998 ;; Defined at:
  1999 ;;		line 502 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;		None
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;		None
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0, pclath, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 100/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMMON   BANK0   BANK1
  2013 ;;      Params:         0       0       0
  2014 ;;      Locals:         0       0       0
  2015 ;;      Temps:          1       0       0
  2016 ;;      Totals:         1       0       0
  2017 ;;Total ram usage:        1 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    2
  2020 ;; This function calls:
  2021 ;;		_ADC_Sample
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function _checkOutA
  2029  03F0                     _checkOutA:	
  2030                           
  2031                           ;main.c: 504: test_adc = ADC_Sample(0, 5);
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2035  03F0  3005               	movlw	5
  2036  03F1  00F2               	movwf	ADC_Sample@adldo
  2037  03F2  3000               	movlw	0
  2038  03F3  2015               	fcall	_ADC_Sample
  2039  03F4  00E1               	movwf	_test_adc	;volatile
  2040                           
  2041                           ;main.c: 505: if (0xA5 == test_adc)
  2042  03F5  30A5               	movlw	165
  2043  03F6  0661               	xorwf	_test_adc,w	;volatile
  2044  03F7  1D03               	btfss	3,2
  2045  03F8  2C0E               	goto	l2221
  2046                           
  2047                           ;main.c: 506: {
  2048                           ;main.c: 507: if(adresult > 2662)
  2049  03F9  300A               	movlw	10
  2050  03FA  0263               	subwf	_adresult+1,w	;volatile
  2051  03FB  3067               	movlw	103
  2052  03FC  1903               	skipnz
  2053  03FD  0262               	subwf	_adresult,w	;volatile
  2054  03FE  1C03               	skipc
  2055  03FF  2C0C               	goto	l2219
  2056                           
  2057                           ;main.c: 508: {
  2058                           ;main.c: 509: if(++fanOverTime > 50)
  2059  0400  3033               	movlw	51
  2060  0401  0AD3               	incf	_fanOverTime,f
  2061  0402  0253               	subwf	_fanOverTime,w
  2062  0403  1C03               	skipc
  2063  0404  0008               	return
  2064  0405  302C               	movlw	44
  2065                           
  2066                           ;main.c: 512: preWorkStep = workStep;
  2067  0406  01D3               	clrf	_fanOverTime
  2068                           
  2069                           ;main.c: 513: workStep = 0;
  2070  0407  01FA               	clrf	_workStep
  2071                           
  2072                           ;main.c: 514: overWorkTime = 300;
  2073  0408  00CA               	movwf	_overWorkTime
  2074  0409  3001               	movlw	1
  2075  040A  00CB               	movwf	_overWorkTime+1
  2076  040B  0008               	return
  2077  040C                     l2219:	
  2078                           
  2079                           ;main.c: 517: else
  2080                           ;main.c: 518: {
  2081                           ;main.c: 519: fanOverTime = 0;
  2082  040C  01D3               	clrf	_fanOverTime
  2083  040D  0008               	return
  2084  040E                     l2221:	
  2085                           
  2086                           ;main.c: 522: else
  2087                           ;main.c: 523: {
  2088                           ;main.c: 524: ADCON0 = 0;
  2089  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2090  040F  0195               	clrf	21	;volatile
  2091                           
  2092                           ;main.c: 525: ADCON1 = 0;
  2093  0410  0196               	clrf	22	;volatile
  2094                           
  2095                           ;main.c: 526: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2096  0411  3085               	movlw	133
  2097  0412  00F7               	movwf	??_checkOutA
  2098  0413                     u2837:	
  2099  0413  0BF7               	decfsz	??_checkOutA,f
  2100  0414  2C13               	goto	u2837
  2101  0415  0008               	return
  2102  0416                     __end_of_checkOutA:	
  2103                           
  2104                           	psect	text13
  2105  02BB                     __ptext13:	
  2106 ;; *************** function _checkBatAD *****************
  2107 ;; Defined at:
  2108 ;;		line 530 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  power_temp      4   34[BANK0 ] volatile unsigned long 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0, pclath, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 100/0
  2119 ;;		On exit  : 100/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1
  2122 ;;      Params:         0       0       0
  2123 ;;      Locals:         0       4       0
  2124 ;;      Temps:          1       0       0
  2125 ;;      Totals:         1       4       0
  2126 ;;Total ram usage:        5 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		_ADC_Sample
  2131 ;;		___ftdiv
  2132 ;;		___fttol
  2133 ;;		___lwtoft
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _checkBatAD
  2141  02BB                     _checkBatAD:	
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2145  02BB  301F               	movlw	31
  2146                           
  2147                           ;main.c: 532: test_adc = ADC_Sample(31, 0);
  2148  02BC  01F2               	clrf	ADC_Sample@adldo
  2149  02BD  2015               	fcall	_ADC_Sample
  2150  02BE  00E1               	movwf	_test_adc	;volatile
  2151                           
  2152                           ;main.c: 533: if (0xA5 == test_adc)
  2153  02BF  30A5               	movlw	165
  2154  02C0  0661               	xorwf	_test_adc,w	;volatile
  2155  02C1  1D03               	btfss	3,2
  2156  02C2  2AE8               	goto	l2641
  2157                           
  2158                           ;main.c: 534: {
  2159                           ;main.c: 535: volatile unsigned long power_temp;
  2160                           ;main.c: 537: power_temp = (unsigned long)(((4096UL*1.2*1000))/adresult);
  2161  02C3  3096               	movlw	150
  2162  02C4  01A9               	clrf	___ftdiv@f1
  2163  02C5  00AA               	movwf	___ftdiv@f1+1
  2164  02C6  304A               	movlw	74
  2165  02C7  00AB               	movwf	___ftdiv@f1+2
  2166  02C8  0863               	movf	_adresult+1,w	;volatile
  2167  02C9  00A4               	movwf	___lwtoft@c+1
  2168  02CA  0862               	movf	_adresult,w	;volatile
  2169  02CB  00A3               	movwf	___lwtoft@c
  2170  02CC  24E2               	fcall	___lwtoft
  2171  02CD  0823               	movf	?___lwtoft,w
  2172  02CE  00A6               	movwf	___ftdiv@f2
  2173  02CF  0824               	movf	?___lwtoft+1,w
  2174  02D0  00A7               	movwf	___ftdiv@f2+1
  2175  02D1  0825               	movf	?___lwtoft+2,w
  2176  02D2  00A8               	movwf	___ftdiv@f2+2
  2177  02D3  219E               	fcall	___ftdiv
  2178  02D4  0826               	movf	?___ftdiv,w
  2179  02D5  00B5               	movwf	___fttol@f1
  2180  02D6  0827               	movf	?___ftdiv+1,w
  2181  02D7  00B6               	movwf	___fttol@f1+1
  2182  02D8  0828               	movf	?___ftdiv+2,w
  2183  02D9  00B7               	movwf	___fttol@f1+2
  2184  02DA  2204               	fcall	___fttol
  2185  02DB  0838               	movf	?___fttol+3,w
  2186  02DC  00C5               	movwf	checkBatAD@power_temp+3	;volatile
  2187  02DD  0837               	movf	?___fttol+2,w
  2188  02DE  00C4               	movwf	checkBatAD@power_temp+2	;volatile
  2189  02DF  0836               	movf	?___fttol+1,w
  2190  02E0  00C3               	movwf	checkBatAD@power_temp+1	;volatile
  2191  02E1  0835               	movf	?___fttol,w
  2192  02E2  00C2               	movwf	checkBatAD@power_temp	;volatile
  2193                           
  2194                           ;main.c: 538: power_ad = (unsigned int)(power_temp);
  2195  02E3  0843               	movf	checkBatAD@power_temp+1,w	;volatile
  2196  02E4  00CD               	movwf	_power_ad+1	;volatile
  2197  02E5  0842               	movf	checkBatAD@power_temp,w	;volatile
  2198  02E6  00CC               	movwf	_power_ad	;volatile
  2199                           
  2200                           ;main.c: 539: }
  2201  02E7  2AEF               	goto	l2645
  2202  02E8                     l2641:	
  2203                           
  2204                           ;main.c: 540: else
  2205                           ;main.c: 541: {
  2206                           ;main.c: 542: ADCON0 = 0;
  2207  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2208  02E9  0195               	clrf	21	;volatile
  2209                           
  2210                           ;main.c: 543: ADCON1 = 0;
  2211  02EA  0196               	clrf	22	;volatile
  2212                           
  2213                           ;main.c: 544: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2214  02EB  3085               	movlw	133
  2215  02EC  00F7               	movwf	??_checkBatAD
  2216  02ED                     u2847:	
  2217  02ED  0BF7               	decfsz	??_checkBatAD,f
  2218  02EE  2AED               	goto	u2847
  2219  02EF                     l2645:	
  2220                           
  2221                           ;main.c: 545: }
  2222                           ;main.c: 547: if(power_ad < 2800)
  2223  02EF  300A               	movlw	10
  2224  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2225  02F1  024D               	subwf	_power_ad+1,w	;volatile
  2226  02F2  30F0               	movlw	240
  2227  02F3  1903               	skipnz
  2228  02F4  024C               	subwf	_power_ad,w	;volatile
  2229  02F5  1803               	skipnc
  2230  02F6  2B01               	goto	l2653
  2231                           
  2232                           ;main.c: 548: {
  2233                           ;main.c: 549: if(++lowBatTime > 200)
  2234  02F7  30C9               	movlw	201
  2235  02F8  0AD0               	incf	_lowBatTime,f
  2236  02F9  0250               	subwf	_lowBatTime,w
  2237  02FA  1C03               	skipc
  2238  02FB  0008               	return
  2239                           
  2240                           ;main.c: 550: {
  2241                           ;main.c: 551: lowBatTime = 0;
  2242  02FC  01D0               	clrf	_lowBatTime
  2243                           
  2244                           ;main.c: 552: lowBatLock = 1;
  2245  02FD  01D1               	clrf	_lowBatLock
  2246  02FE  0AD1               	incf	_lowBatLock,f
  2247                           
  2248                           ;main.c: 553: workStep = 0;
  2249  02FF  01FA               	clrf	_workStep
  2250  0300  0008               	return
  2251  0301                     l2653:	
  2252                           
  2253                           ;main.c: 556: else
  2254                           ;main.c: 557: {
  2255                           ;main.c: 558: lowBatTime = 0;
  2256  0301  01D0               	clrf	_lowBatTime
  2257  0302  0008               	return
  2258  0303                     __end_of_checkBatAD:	
  2259                           
  2260                           	psect	text14
  2261  04E2                     __ptext14:	
  2262 ;; *************** function ___lwtoft *****************
  2263 ;; Defined at:
  2264 ;;		line 28 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwtoft.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  c               2    3[BANK0 ] unsigned int 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  3    3[BANK0 ] float 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 100/0
  2275 ;;		On exit  : 100/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1
  2278 ;;      Params:         0       3       0
  2279 ;;      Locals:         0       0       0
  2280 ;;      Temps:          0       0       0
  2281 ;;      Totals:         0       3       0
  2282 ;;Total ram usage:        3 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    2
  2285 ;; This function calls:
  2286 ;;		___ftpack
  2287 ;; This function is called by:
  2288 ;;		_checkBatAD
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function ___lwtoft
  2294  04E2                     ___lwtoft:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  2298  04E2  0823               	movf	___lwtoft@c,w
  2299  04E3  00F2               	movwf	___ftpack@arg
  2300  04E4  0824               	movf	___lwtoft@c+1,w
  2301  04E5  00F3               	movwf	___ftpack@arg+1
  2302  04E6  308E               	movlw	142
  2303  04E7  01F4               	clrf	___ftpack@arg+2
  2304  04E8  00F5               	movwf	___ftpack@exp
  2305  04E9  01F6               	clrf	___ftpack@sign
  2306  04EA  2345               	fcall	___ftpack
  2307  04EB  0872               	movf	?___ftpack,w
  2308  04EC  00A3               	movwf	?___lwtoft
  2309  04ED  0873               	movf	?___ftpack+1,w
  2310  04EE  00A4               	movwf	?___lwtoft+1
  2311  04EF  0874               	movf	?___ftpack+2,w
  2312  04F0  00A5               	movwf	?___lwtoft+2
  2313  04F1  0008               	return
  2314  04F2                     __end_of___lwtoft:	
  2315                           
  2316                           	psect	text15
  2317  0204                     __ptext15:	
  2318 ;; *************** function ___fttol *****************
  2319 ;; Defined at:
  2320 ;;		line 44 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\fttol.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  f1              3   21[BANK0 ] float 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  lval            4   29[BANK0 ] unsigned long 
  2325 ;;  exp1            1   33[BANK0 ] unsigned char 
  2326 ;;  sign1           1   28[BANK0 ] unsigned char 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  4   21[BANK0 ] long 
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0
  2331 ;; Tracked objects:
  2332 ;;		On entry : 100/0
  2333 ;;		On exit  : 100/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMMON   BANK0   BANK1
  2336 ;;      Params:         0       4       0
  2337 ;;      Locals:         0       6       0
  2338 ;;      Temps:          0       3       0
  2339 ;;      Totals:         0      13       0
  2340 ;;Total ram usage:       13 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    1
  2343 ;; This function calls:
  2344 ;;		Nothing
  2345 ;; This function is called by:
  2346 ;;		_checkBatAD
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           
  2351                           ;psect for function ___fttol
  2352  0204                     ___fttol:	
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2356  0204  225B               	fcall	PL8	;call to abstracted procedure
  2357  0205  1003               	clrc
  2358  0206  0D3A               	rlf	??___fttol+1,w
  2359  0207  0D3B               	rlf	??___fttol+2,w
  2360  0208  00C1               	movwf	___fttol@exp1
  2361  0209  0841               	movf	___fttol@exp1,w
  2362  020A  1D03               	btfss	3,2
  2363  020B  2A11               	goto	l2121
  2364  020C                     l2119:	
  2365  020C  01B5               	clrf	?___fttol
  2366  020D  01B6               	clrf	?___fttol+1
  2367  020E  01B7               	clrf	?___fttol+2
  2368  020F  01B8               	clrf	?___fttol+3
  2369  0210  0008               	return
  2370  0211                     l2121:	
  2371  0211  225B               	fcall	PL8	;call to abstracted procedure
  2372  0212  3017               	movlw	23
  2373  0213                     u1535:	
  2374  0213  1003               	clrc
  2375  0214  0CBB               	rrf	??___fttol+2,f
  2376  0215  0CBA               	rrf	??___fttol+1,f
  2377  0216  0CB9               	rrf	??___fttol,f
  2378  0217  3EFF               	addlw	-1
  2379  0218  1D03               	skipz
  2380  0219  2A13               	goto	u1535
  2381  021A  0839               	movf	??___fttol,w
  2382  021B  00BC               	movwf	___fttol@sign1
  2383  021C  17B6               	bsf	___fttol@f1+1,7
  2384  021D  01B7               	clrf	___fttol@f1+2
  2385  021E  0835               	movf	___fttol@f1,w
  2386  021F  00BD               	movwf	___fttol@lval
  2387  0220  0836               	movf	___fttol@f1+1,w
  2388  0221  00BE               	movwf	___fttol@lval+1
  2389  0222  0837               	movf	___fttol@f1+2,w
  2390  0223  00BF               	movwf	___fttol@lval+2
  2391  0224  308E               	movlw	142
  2392  0225  01C0               	clrf	___fttol@lval+3
  2393  0226  02C1               	subwf	___fttol@exp1,f
  2394  0227  1FC1               	btfss	___fttol@exp1,7
  2395  0228  2A36               	goto	l2141
  2396  0229  0841               	movf	___fttol@exp1,w
  2397  022A  3A80               	xorlw	128
  2398  022B  3E8F               	addlw	143
  2399  022C  1C03               	btfss	3,0
  2400  022D  2A0C               	goto	l2119
  2401  022E                     l2137:	
  2402  022E  1003               	clrc
  2403  022F  0CC0               	rrf	___fttol@lval+3,f
  2404  0230  0CBF               	rrf	___fttol@lval+2,f
  2405  0231  0CBE               	rrf	___fttol@lval+1,f
  2406  0232  0CBD               	rrf	___fttol@lval,f
  2407  0233  0FC1               	incfsz	___fttol@exp1,f
  2408  0234  2A2E               	goto	l2137
  2409  0235  2A44               	goto	l2149
  2410  0236                     l2141:	
  2411  0236  3018               	movlw	24
  2412  0237  0241               	subwf	___fttol@exp1,w
  2413  0238  1803               	btfsc	3,0
  2414  0239  2A0C               	goto	l2119
  2415  023A                     l2147:	
  2416  023A  0841               	movf	___fttol@exp1,w
  2417  023B  1903               	btfsc	3,2
  2418  023C  2A44               	goto	l2149
  2419  023D  1003               	clrc
  2420  023E  0DBD               	rlf	___fttol@lval,f
  2421  023F  0DBE               	rlf	___fttol@lval+1,f
  2422  0240  0DBF               	rlf	___fttol@lval+2,f
  2423  0241  0DC0               	rlf	___fttol@lval+3,f
  2424  0242  03C1               	decf	___fttol@exp1,f
  2425  0243  2A3A               	goto	l2147
  2426  0244                     l2149:	
  2427  0244  083C               	movf	___fttol@sign1,w
  2428  0245  1903               	btfsc	3,2
  2429  0246  2A52               	goto	l2153
  2430  0247  09BD               	comf	___fttol@lval,f
  2431  0248  09BE               	comf	___fttol@lval+1,f
  2432  0249  09BF               	comf	___fttol@lval+2,f
  2433  024A  09C0               	comf	___fttol@lval+3,f
  2434  024B  0ABD               	incf	___fttol@lval,f
  2435  024C  1903               	skipnz
  2436  024D  0ABE               	incf	___fttol@lval+1,f
  2437  024E  1903               	skipnz
  2438  024F  0ABF               	incf	___fttol@lval+2,f
  2439  0250  1903               	skipnz
  2440  0251  0AC0               	incf	___fttol@lval+3,f
  2441  0252                     l2153:	
  2442  0252  0840               	movf	___fttol@lval+3,w
  2443  0253  00B8               	movwf	?___fttol+3
  2444  0254  083F               	movf	___fttol@lval+2,w
  2445  0255  00B7               	movwf	?___fttol+2
  2446  0256  083E               	movf	___fttol@lval+1,w
  2447  0257  00B6               	movwf	?___fttol+1
  2448  0258  083D               	movf	___fttol@lval,w
  2449  0259  00B5               	movwf	?___fttol
  2450  025A  0008               	return
  2451  025B                     __end_of___fttol:	
  2452  025B                     PL8:	
  2453  025B  0835               	movf	___fttol@f1,w
  2454  025C  00B9               	movwf	??___fttol
  2455  025D  0836               	movf	___fttol@f1+1,w
  2456  025E  00BA               	movwf	??___fttol+1
  2457  025F  0837               	movf	___fttol@f1+2,w
  2458  0260  00BB               	movwf	??___fttol+2
  2459  0261  0008               	return
  2460  0262                     __end_ofPL8:	
  2461                           
  2462                           	psect	text16
  2463  019E                     __ptext16:	
  2464 ;; *************** function ___ftdiv *****************
  2465 ;; Defined at:
  2466 ;;		line 56 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\ftdiv.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  f2              3    6[BANK0 ] float 
  2469 ;;  f1              3    9[BANK0 ] float 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  f3              3   16[BANK0 ] float 
  2472 ;;  sign            1   20[BANK0 ] unsigned char 
  2473 ;;  exp             1   19[BANK0 ] unsigned char 
  2474 ;;  cntr            1   15[BANK0 ] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  3    6[BANK0 ] float 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0, pclath, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 100/0
  2481 ;;		On exit  : 100/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMMON   BANK0   BANK1
  2484 ;;      Params:         0       6       0
  2485 ;;      Locals:         0       6       0
  2486 ;;      Temps:          0       3       0
  2487 ;;      Totals:         0      15       0
  2488 ;;Total ram usage:       15 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    2
  2491 ;; This function calls:
  2492 ;;		___ftpack
  2493 ;; This function is called by:
  2494 ;;		_checkBatAD
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           
  2499                           ;psect for function ___ftdiv
  2500  019E                     ___ftdiv:	
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2504  019E  0829               	movf	___ftdiv@f1,w
  2505  019F  00AC               	movwf	??___ftdiv
  2506  01A0  082A               	movf	___ftdiv@f1+1,w
  2507  01A1  00AD               	movwf	??___ftdiv+1
  2508  01A2  082B               	movf	___ftdiv@f1+2,w
  2509  01A3  00AE               	movwf	??___ftdiv+2
  2510  01A4  1003               	clrc
  2511  01A5  0D2D               	rlf	??___ftdiv+1,w
  2512  01A6  0D2E               	rlf	??___ftdiv+2,w
  2513  01A7  00B3               	movwf	___ftdiv@exp
  2514  01A8  0833               	movf	___ftdiv@exp,w
  2515  01A9  1D03               	btfss	3,2
  2516  01AA  29AC               	goto	l2567
  2517  01AB  2A00               	ljmp	PL14	;call to abstracted procedure
  2518  01AC                     l2567:	
  2519  01AC  0826               	movf	___ftdiv@f2,w
  2520  01AD  00AC               	movwf	??___ftdiv
  2521  01AE  0827               	movf	___ftdiv@f2+1,w
  2522  01AF  00AD               	movwf	??___ftdiv+1
  2523  01B0  0828               	movf	___ftdiv@f2+2,w
  2524  01B1  00AE               	movwf	??___ftdiv+2
  2525  01B2  1003               	clrc
  2526  01B3  0D2D               	rlf	??___ftdiv+1,w
  2527  01B4  0D2E               	rlf	??___ftdiv+2,w
  2528  01B5  00B4               	movwf	___ftdiv@sign
  2529  01B6  0834               	movf	___ftdiv@sign,w
  2530  01B7  1D03               	btfss	3,2
  2531  01B8  29BA               	goto	l1053
  2532  01B9  2A00               	ljmp	PL14	;call to abstracted procedure
  2533  01BA                     l1053:	
  2534  01BA  3089               	movlw	137
  2535  01BB  01B0               	clrf	___ftdiv@f3
  2536  01BC  01B1               	clrf	___ftdiv@f3+1
  2537  01BD  01B2               	clrf	___ftdiv@f3+2
  2538  01BE  0734               	addwf	___ftdiv@sign,w
  2539  01BF  00AC               	movwf	??___ftdiv
  2540  01C0  02B3               	subwf	___ftdiv@exp,f
  2541  01C1  082B               	movf	___ftdiv@f1+2,w
  2542  01C2  00B4               	movwf	___ftdiv@sign
  2543  01C3  0828               	movf	___ftdiv@f2+2,w
  2544  01C4  06B4               	xorwf	___ftdiv@sign,f
  2545  01C5  3080               	movlw	128
  2546  01C6  05B4               	andwf	___ftdiv@sign,f
  2547  01C7  3018               	movlw	24
  2548  01C8  17AA               	bsf	___ftdiv@f1+1,7
  2549  01C9  01AB               	clrf	___ftdiv@f1+2
  2550  01CA  17A7               	bsf	___ftdiv@f2+1,7
  2551  01CB  01A8               	clrf	___ftdiv@f2+2
  2552  01CC  00AF               	movwf	___ftdiv@cntr
  2553  01CD                     l2589:	
  2554  01CD  1003               	clrc
  2555  01CE  0DB0               	rlf	___ftdiv@f3,f
  2556  01CF  0DB1               	rlf	___ftdiv@f3+1,f
  2557  01D0  0DB2               	rlf	___ftdiv@f3+2,f
  2558  01D1  0828               	movf	___ftdiv@f2+2,w
  2559  01D2  022B               	subwf	___ftdiv@f1+2,w
  2560  01D3  1D03               	skipz
  2561  01D4  29DB               	goto	u2435
  2562  01D5  0827               	movf	___ftdiv@f2+1,w
  2563  01D6  022A               	subwf	___ftdiv@f1+1,w
  2564  01D7  1D03               	skipz
  2565  01D8  29DB               	goto	u2435
  2566  01D9  0826               	movf	___ftdiv@f2,w
  2567  01DA  0229               	subwf	___ftdiv@f1,w
  2568  01DB                     u2435:	
  2569  01DB  1C03               	skipc
  2570  01DC  29E9               	goto	L10
  2571  01DD  0826               	movf	___ftdiv@f2,w
  2572  01DE  02A9               	subwf	___ftdiv@f1,f
  2573  01DF  0827               	movf	___ftdiv@f2+1,w
  2574  01E0  1C03               	skipc
  2575  01E1  0F27               	incfsz	___ftdiv@f2+1,w
  2576  01E2  02AA               	subwf	___ftdiv@f1+1,f
  2577  01E3  0828               	movf	___ftdiv@f2+2,w
  2578  01E4  1C03               	skipc
  2579  01E5  0A28               	incf	___ftdiv@f2+2,w
  2580  01E6  02AB               	subwf	___ftdiv@f1+2,f
  2581  01E7  1430               	bsf	___ftdiv@f3,0
  2582  01E8  1003               	clrc
  2583  01E9                     L10:	
  2584  01E9  0DA9               	rlf	___ftdiv@f1,f
  2585  01EA  0DAA               	rlf	___ftdiv@f1+1,f
  2586  01EB  0DAB               	rlf	___ftdiv@f1+2,f
  2587  01EC  0BAF               	decfsz	___ftdiv@cntr,f
  2588  01ED  29CD               	goto	l2589
  2589  01EE  0830               	movf	___ftdiv@f3,w
  2590  01EF  00F2               	movwf	___ftpack@arg
  2591  01F0  0831               	movf	___ftdiv@f3+1,w
  2592  01F1  00F3               	movwf	___ftpack@arg+1
  2593  01F2  0832               	movf	___ftdiv@f3+2,w
  2594  01F3  00F4               	movwf	___ftpack@arg+2
  2595  01F4  0833               	movf	___ftdiv@exp,w
  2596  01F5  00F5               	movwf	___ftpack@exp
  2597  01F6  0834               	movf	___ftdiv@sign,w
  2598  01F7  00F6               	movwf	___ftpack@sign
  2599  01F8  2345               	fcall	___ftpack
  2600  01F9  0872               	movf	?___ftpack,w
  2601  01FA  00A6               	movwf	?___ftdiv
  2602  01FB  0873               	movf	?___ftpack+1,w
  2603  01FC  00A7               	movwf	?___ftdiv+1
  2604  01FD  0874               	movf	?___ftpack+2,w
  2605  01FE  00A8               	movwf	?___ftdiv+2
  2606  01FF  0008               	return
  2607  0200                     __end_of___ftdiv:	
  2608  0200                     PL14:	
  2609  0200  01A6               	clrf	?___ftdiv
  2610  0201  01A7               	clrf	?___ftdiv+1
  2611  0202  01A8               	clrf	?___ftdiv+2
  2612  0203  0008               	return
  2613  0204                     __end_ofPL14:	
  2614                           
  2615                           	psect	text17
  2616  0345                     __ptext17:	
  2617 ;; *************** function ___ftpack *****************
  2618 ;; Defined at:
  2619 ;;		line 62 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\float.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  arg             3    2[COMMON] unsigned um
  2622 ;;  exp             1    5[COMMON] unsigned char 
  2623 ;;  sign            1    6[COMMON] unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  3    2[COMMON] float 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2, status,0
  2630 ;; Tracked objects:
  2631 ;;		On entry : 100/0
  2632 ;;		On exit  : 100/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMMON   BANK0   BANK1
  2635 ;;      Params:         5       0       0
  2636 ;;      Locals:         0       0       0
  2637 ;;      Temps:          0       3       0
  2638 ;;      Totals:         5       3       0
  2639 ;;Total ram usage:        8 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    1
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		___ftdiv
  2646 ;;		___lwtoft
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function ___ftpack
  2652  0345                     ___ftpack:	
  2653                           
  2654                           ;incstack = 0
  2655                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2656  0345  0875               	movf	___ftpack@exp,w
  2657  0346  1903               	btfsc	3,2
  2658  0347  2B4D               	goto	l999
  2659  0348  0874               	movf	___ftpack@arg+2,w
  2660  0349  0473               	iorwf	___ftpack@arg+1,w
  2661  034A  0472               	iorwf	___ftpack@arg,w
  2662  034B  1D03               	skipz
  2663  034C  2B53               	goto	l2545
  2664  034D                     l999:	
  2665  034D  01F2               	clrf	?___ftpack
  2666  034E  01F3               	clrf	?___ftpack+1
  2667  034F  01F4               	clrf	?___ftpack+2
  2668  0350  0008               	return
  2669  0351                     l2543:	
  2670  0351  0AF5               	incf	___ftpack@exp,f
  2671  0352  2381               	fcall	PL10	;call to abstracted procedure
  2672  0353                     l2545:	
  2673  0353  30FE               	movlw	254
  2674  0354  0574               	andwf	___ftpack@arg+2,w
  2675  0355  1903               	btfsc	3,2
  2676  0356  2B5F               	goto	l2549
  2677  0357  2B51               	goto	l2543
  2678  0358                     l2547:	
  2679  0358  0AF5               	incf	___ftpack@exp,f
  2680  0359  0AF2               	incf	___ftpack@arg,f
  2681  035A  1903               	skipnz
  2682  035B  0AF3               	incf	___ftpack@arg+1,f
  2683  035C  1903               	skipnz
  2684  035D  0AF4               	incf	___ftpack@arg+2,f
  2685  035E  2381               	fcall	PL10	;call to abstracted procedure
  2686  035F                     l2549:	
  2687  035F  30FF               	movlw	255
  2688  0360  0574               	andwf	___ftpack@arg+2,w
  2689  0361  1903               	btfsc	3,2
  2690  0362  2B6D               	goto	l2553
  2691  0363  2B58               	goto	l2547
  2692  0364                     l2555:	
  2693  0364  3002               	movlw	2
  2694  0365  0275               	subwf	___ftpack@exp,w
  2695  0366  1C03               	btfss	3,0
  2696  0367  2B6F               	goto	l1011
  2697  0368  03F5               	decf	___ftpack@exp,f
  2698  0369  1003               	clrc
  2699  036A  0DF2               	rlf	___ftpack@arg,f
  2700  036B  0DF3               	rlf	___ftpack@arg+1,f
  2701  036C  0DF4               	rlf	___ftpack@arg+2,f
  2702  036D                     l2553:	
  2703  036D  1FF3               	btfss	___ftpack@arg+1,7
  2704  036E  2B64               	goto	l2555
  2705  036F                     l1011:	
  2706  036F  1C75               	btfss	___ftpack@exp,0
  2707  0370  13F3               	bcf	___ftpack@arg+1,7
  2708  0371  1003               	clrc
  2709  0372  0CF5               	rrf	___ftpack@exp,f
  2710  0373  0875               	movf	___ftpack@exp,w
  2711  0374  00A2               	movwf	??___ftpack+2
  2712  0375  01A1               	clrf	??___ftpack+1
  2713  0376  01A0               	clrf	??___ftpack
  2714  0377  0820               	movf	??___ftpack,w
  2715  0378  04F2               	iorwf	___ftpack@arg,f
  2716  0379  0821               	movf	??___ftpack+1,w
  2717  037A  04F3               	iorwf	___ftpack@arg+1,f
  2718  037B  0822               	movf	??___ftpack+2,w
  2719  037C  04F4               	iorwf	___ftpack@arg+2,f
  2720  037D  0876               	movf	___ftpack@sign,w
  2721  037E  1D03               	btfss	3,2
  2722  037F  17F4               	bsf	___ftpack@arg+2,7
  2723  0380  0008               	return
  2724  0381                     __end_of___ftpack:	
  2725  0381                     PL10:	
  2726  0381  1003               	clrc
  2727  0382  0CF4               	rrf	___ftpack@arg+2,f
  2728  0383  0CF3               	rrf	___ftpack@arg+1,f
  2729  0384  0CF2               	rrf	___ftpack@arg,f
  2730  0385  0008               	return
  2731  0386                     __end_ofPL10:	
  2732                           
  2733                           	psect	text18
  2734  0015                     __ptext18:	
  2735 ;; *************** function _ADC_Sample *****************
  2736 ;; Defined at:
  2737 ;;		line 776 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  adch            1    wreg     unsigned char 
  2740 ;;  adldo           1    2[COMMON] unsigned char 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  adch            1    1[BANK0 ] unsigned char 
  2743 ;;  j               1    0[BANK0 ] unsigned char 
  2744 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  2745 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  2746 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  2747 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  2748 ;;  i               1    2[BANK0 ] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      unsigned char 
  2751 ;; Registers used:
  2752 ;;		wreg, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 100/0
  2755 ;;		On exit  : 100/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMMON   BANK0   BANK1
  2758 ;;      Params:         1       0       0
  2759 ;;      Locals:         0      13       0
  2760 ;;      Temps:          4       0       0
  2761 ;;      Totals:         5      13       0
  2762 ;;Total ram usage:       18 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_checkOutA
  2769 ;;		_checkBatAD
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _ADC_Sample
  2775  0015                     _ADC_Sample:	
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2779                           ;ADC_Sample@adch stored from wreg
  2780  0015  00A1               	movwf	ADC_Sample@adch
  2781                           
  2782                           ;main.c: 778: volatile unsigned long adsum = 0;
  2783                           
  2784                           ;main.c: 779: volatile unsigned int admin = 0, admax = 0;
  2785  0016  20ED               	fcall	PL6	;call to abstracted procedure
  2786                           
  2787                           ;main.c: 780: volatile unsigned int ad_temp = 0;
  2788  0017  01AB               	clrf	ADC_Sample@ad_temp	;volatile
  2789  0018  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2790                           
  2791                           ;main.c: 782: if ((!LDO_EN) && (adldo & 0x04) )
  2792  0019  1683               	bsf	3,5	;RP0=1, select bank1
  2793  001A  1D16               	btfss	22,2	;volatile
  2794  001B  1D72               	btfss	ADC_Sample@adldo,2
  2795  001C  2824               	goto	l2001
  2796                           
  2797                           ;main.c: 783: {
  2798                           ;main.c: 785: ADCON1 = adldo;
  2799  001D  0872               	movf	ADC_Sample@adldo,w
  2800  001E  0096               	movwf	22	;volatile
  2801                           
  2802                           ;main.c: 786: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2803  001F  3085               	movlw	133
  2804  0020  00F3               	movwf	??_ADC_Sample
  2805  0021                     u2857:	
  2806  0021  0BF3               	decfsz	??_ADC_Sample,f
  2807  0022  2821               	goto	u2857
  2808                           
  2809                           ;main.c: 787: }
  2810  0023  2826               	goto	l2003
  2811  0024                     l2001:	
  2812                           
  2813                           ;main.c: 788: else
  2814                           ;main.c: 789: ADCON1 = adldo;
  2815  0024  0872               	movf	ADC_Sample@adldo,w
  2816  0025  0096               	movwf	22	;volatile
  2817  0026                     l2003:	
  2818                           
  2819                           ;main.c: 791: if(adch & 0x10)
  2820  0026  1283               	bcf	3,5	;RP0=0, select bank0
  2821  0027  1E21               	btfss	ADC_Sample@adch,4
  2822  0028  282E               	goto	l2011
  2823                           
  2824                           ;main.c: 792: {
  2825                           ;main.c: 793: CHS4 = 1;
  2826  0029  1683               	bsf	3,5	;RP0=1, select bank1
  2827  002A  1716               	bsf	22,6	;volatile
  2828                           
  2829                           ;main.c: 794: adch &= 0x0f;
  2830  002B  300F               	movlw	15
  2831  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2832  002D  05A1               	andwf	ADC_Sample@adch,f
  2833  002E                     l2011:	
  2834                           
  2835                           ;main.c: 797: for (i = 0; i < 10; i++)
  2836  002E  01A2               	clrf	ADC_Sample@i
  2837  002F                     l2017:	
  2838                           
  2839                           ;main.c: 798: {
  2840                           ;main.c: 799: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2841  002F  0821               	movf	ADC_Sample@adch,w
  2842  0030  00F3               	movwf	??_ADC_Sample
  2843  0031  3001               	movlw	1
  2844  0032  1003               	clrc
  2845  0033                     L11:	
  2846  0033  0DF3               	rlf	??_ADC_Sample,f
  2847  0034  3EFF               	addlw	-1
  2848  0035  1003               	clrc
  2849  0036  1D03               	skipz
  2850  0037  2833               	goto	L11
  2851  0038  0D73               	rlf	??_ADC_Sample,w
  2852  0039  3841               	iorlw	65
  2853  003A  1683               	bsf	3,5	;RP0=1, select bank1
  2854  003B  0095               	movwf	21	;volatile
  2855  003C  0000               	nop	;# 
  2856  003D  0000               	nop	;# 
  2857  003E  0000               	nop	;# 
  2858  003F  0000               	nop	;# 
  2859                           
  2860                           ;main.c: 804: GODONE = 1;
  2861  0040  1683               	bsf	3,5	;RP0=1, select bank1
  2862  0041  1495               	bsf	21,1	;volatile
  2863                           
  2864                           ;main.c: 806: unsigned char j = 0;
  2865  0042  1283               	bcf	3,5	;RP0=0, select bank0
  2866  0043  01A0               	clrf	ADC_Sample@j
  2867  0044                     l828:	
  2868                           ;main.c: 807: while (GODONE)
  2869                           
  2870  0044  1683               	bsf	3,5	;RP0=1, select bank1
  2871  0045  1C95               	btfss	21,1	;volatile
  2872  0046  284F               	goto	l2027
  2873                           
  2874                           ;main.c: 808: {
  2875                           ;main.c: 809: _delay((unsigned long)((2)*(16000000/4000000.0)));
  2876  0047  2848               	nop2	;2 cycle nop
  2877  0048  2849               	nop2	;2 cycle nop
  2878  0049  284A               	nop2	;2 cycle nop
  2879  004A  284B               	nop2	;2 cycle nop
  2880                           
  2881                           ;main.c: 811: if (0 == (--j))
  2882  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2883  004C  0BA0               	decfsz	ADC_Sample@j,f
  2884  004D  2844               	goto	l828
  2885                           
  2886                           ;main.c: 812: return 0;
  2887  004E  3400               	retlw	0
  2888  004F                     l2027:	
  2889                           
  2890                           ;main.c: 813: }
  2891                           ;main.c: 815: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  2892  004F  0819               	movf	25,w	;volatile
  2893  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2894  0051  00AB               	movwf	ADC_Sample@ad_temp	;volatile
  2895  0052  01AC               	clrf	ADC_Sample@ad_temp+1	;volatile
  2896  0053  0EAB               	swapf	ADC_Sample@ad_temp,f	;volatile
  2897  0054  0EAC               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  2898  0055  30F0               	movlw	240
  2899  0056  05AC               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  2900  0057  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2901  0058  390F               	andlw	15
  2902  0059  04AC               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  2903  005A  30F0               	movlw	240
  2904  005B  05AB               	andwf	ADC_Sample@ad_temp,f	;volatile
  2905  005C  1683               	bsf	3,5	;RP0=1, select bank1
  2906  005D  0E18               	swapf	24,w	;volatile
  2907  005E  390F               	andlw	15
  2908  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0060  07AB               	addwf	ADC_Sample@ad_temp,f	;volatile
  2910  0061  1803               	skipnc
  2911  0062  0AAC               	incf	ADC_Sample@ad_temp+1,f	;volatile
  2912                           
  2913                           ;main.c: 817: if (0 == admax)
  2914  0063  0829               	movf	ADC_Sample@admax,w	;volatile
  2915  0064  042A               	iorwf	ADC_Sample@admax+1,w	;volatile
  2916  0065  1D03               	btfss	3,2
  2917  0066  2869               	goto	l2035
  2918                           
  2919                           ;main.c: 818: {
  2920                           ;main.c: 819: admax = ad_temp;
  2921  0067  20F6               	fcall	PL12	;call to abstracted procedure
  2922  0068  287B               	goto	l2041
  2923  0069                     l2035:	
  2924                           ;main.c: 821: }
  2925                           
  2926                           ;main.c: 820: admin = ad_temp;
  2927                           
  2928                           
  2929                           ;main.c: 822: else if (ad_temp > admax)
  2930  0069  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2931  006A  022A               	subwf	ADC_Sample@admax+1,w	;volatile
  2932  006B  1D03               	skipz
  2933  006C  286F               	goto	u1385
  2934  006D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2935  006E  0229               	subwf	ADC_Sample@admax,w	;volatile
  2936  006F                     u1385:	
  2937  006F  1803               	skipnc
  2938  0070  2873               	goto	l2039
  2939                           
  2940                           ;main.c: 823: admax = ad_temp;
  2941  0071  20F6               	fcall	PL12	;call to abstracted procedure
  2942  0072  287F               	goto	l834
  2943  0073                     l2039:	
  2944                           
  2945                           ;main.c: 824: else if (ad_temp < admin)
  2946  0073  0828               	movf	ADC_Sample@admin+1,w	;volatile
  2947  0074  022C               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  2948  0075  1D03               	skipz
  2949  0076  2879               	goto	u1395
  2950  0077  0827               	movf	ADC_Sample@admin,w	;volatile
  2951  0078  022B               	subwf	ADC_Sample@ad_temp,w	;volatile
  2952  0079                     u1395:	
  2953  0079  1803               	skipnc
  2954  007A  287F               	goto	l834
  2955  007B                     l2041:	
  2956                           
  2957                           ;main.c: 825: admin = ad_temp;
  2958  007B  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2959  007C  00A8               	movwf	ADC_Sample@admin+1	;volatile
  2960  007D  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2961  007E  00A7               	movwf	ADC_Sample@admin	;volatile
  2962  007F                     l834:	
  2963                           
  2964                           ;main.c: 827: adsum += ad_temp;
  2965  007F  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  2966  0080  00F3               	movwf	??_ADC_Sample
  2967  0081  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  2968  0082  00F4               	movwf	??_ADC_Sample+1
  2969  0083  01F5               	clrf	??_ADC_Sample+2
  2970  0084  01F6               	clrf	??_ADC_Sample+3
  2971  0085  0873               	movf	??_ADC_Sample,w
  2972  0086  07A3               	addwf	ADC_Sample@adsum,f	;volatile
  2973  0087  0874               	movf	??_ADC_Sample+1,w
  2974  0088  1103               	clrz
  2975  0089  1803               	skipnc
  2976  008A  3E01               	addlw	1
  2977  008B  1D03               	btfss	3,2
  2978  008C  07A4               	addwf	ADC_Sample@adsum+1,f	;volatile
  2979  008D  0875               	movf	??_ADC_Sample+2,w
  2980  008E  1103               	clrz
  2981  008F  1803               	skipnc
  2982  0090  3E01               	addlw	1
  2983  0091  1D03               	btfss	3,2
  2984  0092  07A5               	addwf	ADC_Sample@adsum+2,f	;volatile
  2985  0093  0876               	movf	??_ADC_Sample+3,w
  2986  0094  1103               	clrz
  2987  0095  1803               	skipnc
  2988  0096  3E01               	addlw	1
  2989  0097  1D03               	btfss	3,2
  2990  0098  07A6               	addwf	ADC_Sample@adsum+3,f	;volatile
  2991  0099  300A               	movlw	10
  2992  009A  0AA2               	incf	ADC_Sample@i,f
  2993  009B  0222               	subwf	ADC_Sample@i,w
  2994  009C  1C03               	skipc
  2995  009D  282F               	goto	l2017
  2996                           
  2997                           ;main.c: 828: }
  2998                           ;main.c: 829: adsum -= admax;
  2999  009E  0829               	movf	ADC_Sample@admax,w	;volatile
  3000  009F  00F3               	movwf	??_ADC_Sample
  3001  00A0  082A               	movf	ADC_Sample@admax+1,w	;volatile
  3002  00A1  20DE               	fcall	PL2	;call to abstracted procedure
  3003  00A2  1C03               	skipc
  3004  00A3  0F76               	incfsz	??_ADC_Sample+3,w
  3005  00A4  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3006                           
  3007                           ;main.c: 830: if (adsum >= admin)
  3008  00A5  0827               	movf	ADC_Sample@admin,w	;volatile
  3009  00A6  00F3               	movwf	??_ADC_Sample
  3010  00A7  0828               	movf	ADC_Sample@admin+1,w	;volatile
  3011  00A8  00F4               	movwf	??_ADC_Sample+1
  3012  00A9  01F5               	clrf	??_ADC_Sample+2
  3013  00AA  01F6               	clrf	??_ADC_Sample+3
  3014  00AB  0876               	movf	??_ADC_Sample+3,w
  3015  00AC  0226               	subwf	ADC_Sample@adsum+3,w	;volatile
  3016  00AD  1D03               	skipz
  3017  00AE  28B9               	goto	u1435
  3018  00AF  0875               	movf	??_ADC_Sample+2,w
  3019  00B0  0225               	subwf	ADC_Sample@adsum+2,w	;volatile
  3020  00B1  1D03               	skipz
  3021  00B2  28B9               	goto	u1435
  3022  00B3  0874               	movf	??_ADC_Sample+1,w
  3023  00B4  0224               	subwf	ADC_Sample@adsum+1,w	;volatile
  3024  00B5  1D03               	skipz
  3025  00B6  28B9               	goto	u1435
  3026  00B7  0873               	movf	??_ADC_Sample,w
  3027  00B8  0223               	subwf	ADC_Sample@adsum,w	;volatile
  3028  00B9                     u1435:	
  3029  00B9  1C03               	skipc
  3030  00BA  28C3               	goto	l838
  3031                           
  3032                           ;main.c: 831: adsum -= admin;
  3033  00BB  0827               	movf	ADC_Sample@admin,w	;volatile
  3034  00BC  00F3               	movwf	??_ADC_Sample
  3035  00BD  0828               	movf	ADC_Sample@admin+1,w	;volatile
  3036  00BE  20DE               	fcall	PL2	;call to abstracted procedure
  3037  00BF  1C03               	skipc
  3038  00C0  0F76               	incfsz	??_ADC_Sample+3,w
  3039  00C1  02A6               	subwf	ADC_Sample@adsum+3,f	;volatile
  3040  00C2  28C7               	goto	l2051
  3041  00C3                     l838:	
  3042                           
  3043                           ;main.c: 832: else
  3044                           ;main.c: 833: adsum = 0;
  3045  00C3  01A3               	clrf	ADC_Sample@adsum	;volatile
  3046  00C4  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3047  00C5  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3048  00C6  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3049  00C7                     l2051:	
  3050                           
  3051                           ;main.c: 835: adresult = adsum >> 3;
  3052  00C7  0823               	movf	ADC_Sample@adsum,w	;volatile
  3053  00C8  00F3               	movwf	??_ADC_Sample
  3054  00C9  0824               	movf	ADC_Sample@adsum+1,w	;volatile
  3055  00CA  00F4               	movwf	??_ADC_Sample+1
  3056  00CB  0825               	movf	ADC_Sample@adsum+2,w	;volatile
  3057  00CC  00F5               	movwf	??_ADC_Sample+2
  3058  00CD  0826               	movf	ADC_Sample@adsum+3,w	;volatile
  3059  00CE  00F6               	movwf	??_ADC_Sample+3
  3060  00CF  3003               	movlw	3
  3061  00D0                     u1455:	
  3062  00D0  1003               	clrc
  3063  00D1  0CF6               	rrf	??_ADC_Sample+3,f
  3064  00D2  0CF5               	rrf	??_ADC_Sample+2,f
  3065  00D3  0CF4               	rrf	??_ADC_Sample+1,f
  3066  00D4  0CF3               	rrf	??_ADC_Sample,f
  3067  00D5  3EFF               	addlw	-1
  3068  00D6  1D03               	skipz
  3069  00D7  28D0               	goto	u1455
  3070  00D8  0874               	movf	??_ADC_Sample+1,w
  3071  00D9  00E3               	movwf	_adresult+1	;volatile
  3072  00DA  0873               	movf	??_ADC_Sample,w
  3073  00DB  00E2               	movwf	_adresult	;volatile
  3074                           
  3075                           ;main.c: 837: adsum = 0;
  3076                           
  3077                           ;main.c: 838: admin = 0;
  3078                           
  3079                           ;main.c: 839: admax = 0;
  3080  00DC  20ED               	fcall	PL6	;call to abstracted procedure
  3081                           
  3082                           ;main.c: 840: return 0xA5;
  3083  00DD  34A5               	retlw	165
  3084  00DE                     __end_of_ADC_Sample:	
  3085  00DE                     PL2:	
  3086  00DE  00F4               	movwf	??_ADC_Sample+1
  3087  00DF  01F5               	clrf	??_ADC_Sample+2
  3088  00E0  01F6               	clrf	??_ADC_Sample+3
  3089  00E1  0873               	movf	??_ADC_Sample,w
  3090  00E2  02A3               	subwf	ADC_Sample@adsum,f	;volatile
  3091  00E3  0874               	movf	??_ADC_Sample+1,w
  3092  00E4  1C03               	skipc
  3093  00E5  0F74               	incfsz	??_ADC_Sample+1,w
  3094  00E6  02A4               	subwf	ADC_Sample@adsum+1,f	;volatile
  3095  00E7  0875               	movf	??_ADC_Sample+2,w
  3096  00E8  1C03               	skipc
  3097  00E9  0F75               	incfsz	??_ADC_Sample+2,w
  3098  00EA  02A5               	subwf	ADC_Sample@adsum+2,f	;volatile
  3099  00EB  0876               	movf	??_ADC_Sample+3,w
  3100  00EC  0008               	return
  3101  00ED                     __end_ofPL2:	
  3102  00ED                     PL6:	
  3103  00ED  01A3               	clrf	ADC_Sample@adsum	;volatile
  3104  00EE  01A4               	clrf	ADC_Sample@adsum+1	;volatile
  3105  00EF  01A5               	clrf	ADC_Sample@adsum+2	;volatile
  3106  00F0  01A6               	clrf	ADC_Sample@adsum+3	;volatile
  3107  00F1  01A7               	clrf	ADC_Sample@admin	;volatile
  3108  00F2  01A8               	clrf	ADC_Sample@admin+1	;volatile
  3109  00F3  01A9               	clrf	ADC_Sample@admax	;volatile
  3110  00F4  01AA               	clrf	ADC_Sample@admax+1	;volatile
  3111  00F5  0008               	return
  3112  00F6                     __end_ofPL6:	
  3113  00F6                     PL12:	
  3114  00F6  082C               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3115  00F7  00AA               	movwf	ADC_Sample@admax+1	;volatile
  3116  00F8  082B               	movf	ADC_Sample@ad_temp,w	;volatile
  3117  00F9  00A9               	movwf	ADC_Sample@admax	;volatile
  3118  00FA  0008               	return
  3119  00FB                     __end_ofPL12:	
  3120                           
  3121                           	psect	text19
  3122  0303                     __ptext19:	
  3123 ;; *************** function _Sleep_Mode *****************
  3124 ;; Defined at:
  3125 ;;		line 699 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 100/0
  3136 ;;		On exit  : 100/100
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1
  3139 ;;      Params:         0       0       0
  3140 ;;      Locals:         0       0       0
  3141 ;;      Temps:          0       0       0
  3142 ;;      Totals:         0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    2
  3146 ;; This function calls:
  3147 ;;		_AD_Init
  3148 ;;		_Init_System
  3149 ;; This function is called by:
  3150 ;;		_main
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           
  3155                           ;psect for function _Sleep_Mode
  3156  0303                     _Sleep_Mode:	
  3157                           
  3158                           ;main.c: 701: INTCON = 0;
  3159                           
  3160                           ;incstack = 0
  3161                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3162  0303  018B               	clrf	11	;volatile
  3163                           
  3164                           ;main.c: 703: OPTION_REG = 0;
  3165  0304  0181               	clrf	1	;volatile
  3166                           
  3167                           ;main.c: 705: WPUA = 0x02;
  3168  0305  3002               	movlw	2
  3169  0306  1683               	bsf	3,5	;RP0=1, select bank1
  3170  0307  0088               	movwf	8	;volatile
  3171                           
  3172                           ;main.c: 706: TRISA = 0x03;
  3173  0308  3003               	movlw	3
  3174                           
  3175                           ;main.c: 707: TRISB = 0x01;
  3176                           
  3177                           ;main.c: 709: PORTA = 0X00;
  3178                           
  3179                           ;main.c: 710: PORTB = 0X00;
  3180  0309  233C               	fcall	PL4	;call to abstracted procedure
  3181                           
  3182                           ;main.c: 713: ADCON0 = 0;
  3183  030A  1683               	bsf	3,5	;RP0=1, select bank1
  3184  030B  0195               	clrf	21	;volatile
  3185                           
  3186                           ;main.c: 714: ADCON1 = 0;
  3187  030C  0196               	clrf	22	;volatile
  3188                           
  3189                           ;main.c: 716: PWMCON0 = 0;
  3190  030D  1283               	bcf	3,5	;RP0=0, select bank0
  3191  030E  0195               	clrf	21	;volatile
  3192                           
  3193                           ;main.c: 718: OSCCON = 0X70;
  3194  030F  3070               	movlw	112
  3195  0310  0094               	movwf	20	;volatile
  3196                           
  3197                           ;main.c: 720: IOCA = 0x02;
  3198  0311  3002               	movlw	2
  3199  0312  1683               	bsf	3,5	;RP0=1, select bank1
  3200  0313  0089               	movwf	9	;volatile
  3201                           
  3202                           ;main.c: 721: IOCB = 0x01;
  3203  0314  3001               	movlw	1
  3204  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3205  0316  0089               	movwf	9	;volatile
  3206                           
  3207                           ;main.c: 723: RAIE = 1;
  3208  0317  158E               	bsf	14,3	;volatile
  3209                           
  3210                           ;main.c: 724: PEIE = 1;
  3211  0318  170B               	bsf	11,6	;volatile
  3212                           
  3213                           ;main.c: 725: RBIE = 1;
  3214  0319  158B               	bsf	11,3	;volatile
  3215                           
  3216                           ;main.c: 726: GIE = 0;
  3217  031A  138B               	bcf	11,7	;volatile
  3218                           
  3219                           ;main.c: 728: PIE1 &= 0X08;
  3220  031B  3008               	movlw	8
  3221  031C  058E               	andwf	14,f	;volatile
  3222                           
  3223                           ;main.c: 729: PIR1 = 0;
  3224  031D  018D               	clrf	13	;volatile
  3225                           
  3226                           ;main.c: 730: INTCON &= 0XC8;
  3227  031E  30C8               	movlw	200
  3228  031F  058B               	andwf	11,f	;volatile
  3229                           
  3230                           ;main.c: 732: PORTA;
  3231  0320  1683               	bsf	3,5	;RP0=1, select bank1
  3232  0321  0806               	movf	6,w	;volatile
  3233                           
  3234                           ;main.c: 733: RAIF = 0;
  3235  0322  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0323  118D               	bcf	13,3	;volatile
  3237                           
  3238                           ;main.c: 734: PORTB;
  3239  0324  0806               	movf	6,w	;volatile
  3240                           
  3241                           ;main.c: 735: RBIF = 0;
  3242  0325  100B               	bcf	11,0	;volatile
  3243  0326  0064               	clrwdt	;# 
  3244  0327  0063               	sleep	;# 
  3245  0328  0000               	nop	;# 
  3246  0329  0064               	clrwdt	;# 
  3247  032A  0000               	nop	;# 
  3248  032B  0000               	nop	;# 
  3249  032C  0000               	nop	;# 
  3250  032D  0000               	nop	;# 
  3251  032E  0000               	nop	;# 
  3252                           
  3253                           ;main.c: 747: if(RAIF) RAIF = 0;
  3254  032F  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0330  198D               	btfsc	13,3	;volatile
  3256  0331  118D               	bcf	13,3	;volatile
  3257                           
  3258                           ;main.c: 748: if(RBIF) RBIF = 0;
  3259  0332  180B               	btfsc	11,0	;volatile
  3260  0333  100B               	bcf	11,0	;volatile
  3261                           
  3262                           ;main.c: 749: if(TMR2IF) TMR2IF = 0;
  3263  0334  188D               	btfsc	13,1	;volatile
  3264  0335  108D               	bcf	13,1	;volatile
  3265                           
  3266                           ;main.c: 750: IOCA = 0B00000000;
  3267  0336  1683               	bsf	3,5	;RP0=1, select bank1
  3268  0337  0189               	clrf	9	;volatile
  3269                           
  3270                           ;main.c: 751: IOCB = 0B00000000;
  3271  0338  1283               	bcf	3,5	;RP0=0, select bank0
  3272  0339  0189               	clrf	9	;volatile
  3273                           
  3274                           ;main.c: 752: Init_System();
  3275  033A  249D               	fcall	_Init_System
  3276                           
  3277                           ;main.c: 753: AD_Init();
  3278  033B  2D13               	ljmp	l1925
  3279  033C                     __end_of_Sleep_Mode:	
  3280  033C                     PL4:	
  3281  033C  0085               	movwf	5	;volatile
  3282  033D  3001               	movlw	1
  3283  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3284  033F  0085               	movwf	5	;volatile
  3285  0340  1683               	bsf	3,5	;RP0=1, select bank1
  3286  0341  0186               	clrf	6	;volatile
  3287  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3288  0343  0186               	clrf	6	;volatile
  3289  0344  0008               	return
  3290  0345                     __end_ofPL4:	
  3291                           
  3292                           	psect	text20
  3293  049D                     __ptext20:	
  3294 ;; *************** function _Init_System *****************
  3295 ;; Defined at:
  3296 ;;		line 572 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;		None
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2
  3305 ;; Tracked objects:
  3306 ;;		On entry : 100/0
  3307 ;;		On exit  : 100/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1
  3310 ;;      Params:         0       0       0
  3311 ;;      Locals:         0       0       0
  3312 ;;      Temps:          0       0       0
  3313 ;;      Totals:         0       0       0
  3314 ;;Total ram usage:        0 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_main
  3321 ;;		_Sleep_Mode
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           
  3326                           ;psect for function _Init_System
  3327  049D                     _Init_System:	
  3328                           
  3329                           ;incstack = 0
  3330                           ; Regs used in _Init_System: [wreg+status,2]
  3331  049D  0000               	nop	;# 
  3332  049E  0064               	clrwdt	;# 
  3333                           
  3334                           ;main.c: 576: OPTION_REG = 0;
  3335  049F  1283               	bcf	3,5	;RP0=0, select bank0
  3336  04A0  0181               	clrf	1	;volatile
  3337  04A1  0064               	clrwdt	;# 
  3338                           
  3339                           ;main.c: 578: OSCCON = 0X72;
  3340  04A2  3072               	movlw	114
  3341  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  3342  04A4  0094               	movwf	20	;volatile
  3343                           
  3344                           ;main.c: 580: WPUA = 0x02;
  3345  04A5  3002               	movlw	2
  3346  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  3347  04A7  0088               	movwf	8	;volatile
  3348                           
  3349                           ;main.c: 581: WPDA = 0x00;
  3350  04A8  0187               	clrf	7	;volatile
  3351                           
  3352                           ;main.c: 582: WPUB = 0x00;
  3353  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3354  04AA  0188               	clrf	8	;volatile
  3355                           
  3356                           ;main.c: 584: TRISA = 0x03;
  3357  04AB  3003               	movlw	3
  3358  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3359                           
  3360                           ;main.c: 585: TRISB = 0x01;
  3361                           
  3362                           ;main.c: 587: PORTA = 0X00;
  3363                           
  3364                           ;main.c: 588: PORTB = 0X00;
  3365  04AD  233C               	fcall	PL4	;call to abstracted procedure
  3366                           
  3367                           ;main.c: 592: PR2 = 249;
  3368  04AE  30F9               	movlw	249
  3369  04AF  0091               	movwf	17	;volatile
  3370                           
  3371                           ;main.c: 593: TMR2IF = 0;
  3372  04B0  108D               	bcf	13,1	;volatile
  3373                           
  3374                           ;main.c: 594: TMR2IE = 1;
  3375  04B1  148E               	bsf	14,1	;volatile
  3376                           
  3377                           ;main.c: 596: T2CON = 0B00000100;
  3378  04B2  3004               	movlw	4
  3379  04B3  0093               	movwf	19	;volatile
  3380                           
  3381                           ;main.c: 597: INTCON = 0XC0;
  3382  04B4  30C0               	movlw	192
  3383  04B5  008B               	movwf	11	;volatile
  3384  04B6  0008               	return
  3385  04B7                     __end_of_Init_System:	
  3386                           
  3387                           	psect	text21
  3388  0513                     __ptext21:	
  3389 ;; *************** function _AD_Init *****************
  3390 ;; Defined at:
  3391 ;;		line 609 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2
  3400 ;; Tracked objects:
  3401 ;;		On entry : 100/0
  3402 ;;		On exit  : 100/100
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1
  3405 ;;      Params:         0       0       0
  3406 ;;      Locals:         0       0       0
  3407 ;;      Temps:          0       0       0
  3408 ;;      Totals:         0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    1
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_main
  3416 ;;		_Sleep_Mode
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _AD_Init
  3422  0513                     _AD_Init:	
  3423  0513                     l1925:	
  3424                           ;incstack = 0
  3425                           ; Regs used in _AD_Init: [wreg+status,2]
  3426                           
  3427                           
  3428                           ;main.c: 642: ADCON0 = 0X41;
  3429  0513  3041               	movlw	65
  3430  0514  1683               	bsf	3,5	;RP0=1, select bank1
  3431  0515  0095               	movwf	21	;volatile
  3432                           
  3433                           ;main.c: 659: ADCON1 = 0;
  3434  0516  0196               	clrf	22	;volatile
  3435                           
  3436                           ;main.c: 660: ANSEL0 = 0X01;
  3437  0517  3001               	movlw	1
  3438  0518  0093               	movwf	19	;volatile
  3439                           
  3440                           ;main.c: 661: ANSEL1 = 0x00;
  3441  0519  0194               	clrf	20	;volatile
  3442  051A  0008               	return
  3443  051B                     __end_of_AD_Init:	
  3444                           
  3445                           	psect	text22
  3446  04B7                     __ptext22:	
  3447 ;; *************** function _Isr_Timer *****************
  3448 ;; Defined at:
  3449 ;;		line 125 in file "C:\mcuproject\scm\zdt\D209_062B_SOP14\main.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 100/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMMON   BANK0   BANK1
  3463 ;;      Params:         0       0       0
  3464 ;;      Locals:         0       0       0
  3465 ;;      Temps:          2       0       0
  3466 ;;      Totals:         2       0       0
  3467 ;;Total ram usage:        2 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		Interrupt level 1
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           
  3477                           ;psect for function _Isr_Timer
  3478  04B7                     _Isr_Timer:	
  3479                           
  3480                           ;main.c: 127: if(TMR2IF)
  3481  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  3482  04B8  1C8D               	btfss	13,1	;volatile
  3483  04B9  2CC9               	goto	i1l676
  3484                           
  3485                           ;main.c: 128: {
  3486                           ;main.c: 129: TMR2IF = 0;
  3487  04BA  108D               	bcf	13,1	;volatile
  3488                           
  3489                           ;main.c: 130: if(++intCount >= 160)
  3490  04BB  30A0               	movlw	160
  3491  04BC  0AE0               	incf	_intCount,f
  3492  04BD  0260               	subwf	_intCount,w
  3493  04BE  1C03               	skipc
  3494  04BF  2CC8               	goto	i1l2487
  3495  04C0  3064               	movlw	100
  3496                           
  3497                           ;main.c: 131: {
  3498                           ;main.c: 132: intCount = 0;
  3499  04C1  01E0               	clrf	_intCount
  3500                           
  3501                           ;main.c: 133: IntFlag = 1;
  3502  04C2  01DE               	clrf	_IntFlag
  3503  04C3  0ADE               	incf	_IntFlag,f
  3504                           
  3505                           ;main.c: 134: if(++count1s >= 100)
  3506  04C4  0ADF               	incf	_count1s,f
  3507  04C5  025F               	subwf	_count1s,w
  3508  04C6  1803               	btfsc	3,0
  3509                           
  3510                           ;main.c: 135: {
  3511                           ;main.c: 136: count1s = 0;
  3512  04C7  01DF               	clrf	_count1s
  3513  04C8                     i1l2487:	
  3514                           
  3515                           ;main.c: 137: }
  3516                           ;main.c: 138: }
  3517                           ;main.c: 139: intCount10++;
  3518  04C8  0ADC               	incf	_intCount10,f
  3519  04C9                     i1l676:	
  3520  04C9  0871               	movf	??_Isr_Timer+1,w
  3521  04CA  008A               	movwf	10
  3522  04CB  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3523  04CC  0083               	movwf	3
  3524  04CD  0EFE               	swapf	126,f
  3525  04CE  0E7E               	swapf	126,w
  3526  04CF  0009               	retfie
  3527  04D0                     __end_of_Isr_Timer:	
  3528  007E                     btemp	set	126	;btemp
  3529  007E                     wtemp0	set	126
  3530                           
  3531                           	psect	intentry
  3532  0004                     __pintentry:	
  3533                           ;incstack = 0
  3534                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  3535                           
  3536  0004                     interrupt_function:	
  3537  007E                     saved_w	set	btemp
  3538  0004  00FE               	movwf	btemp
  3539  0005  0E03               	swapf	3,w
  3540  0006  00F0               	movwf	??_Isr_Timer
  3541  0007  080A               	movf	10,w
  3542  0008  00F1               	movwf	??_Isr_Timer+1
  3543  0009  2CB7               	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         33
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     38      69
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___bmul
    _setBatStep->___lwdiv
    _ledCtr->___lwmod
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkBatAD
    _checkOutA->_ADC_Sample
    _checkBatAD->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7172
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                         _setBatStep
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0     145
                             ___bmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _setBatStep                                           2     2      0     538
                                              0 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     265
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                              2 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              3 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            1     1      0     635
                                              7 COMMON     1     1      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           5     5      0    5522
                                              7 COMMON     1     1      0
                                             34 BANK0      4     4      0
                         _ADC_Sample
                            ___ftdiv
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2044
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     305
                                             21 BANK0     13     9      4
                            ___ftdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2504
                                              6 BANK0     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1948
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     635
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lwmod
   _setBatStep
     ___lwdiv
   _workCtr
     ___bmul
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     26      45       4       86.3%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      51       7        0.0%
DATA                 0      0      51       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 03 16:17:06 2025

          ___bmul@product 0073                        PL2 00DE                        PL4 033C  
                      PL6 00ED                        PL8 025B                        fsr 0004  
                     PL10 0381                       PL12 00F6                       PL14 0200  
                     l720 0113                       l722 0115                       l735 0183  
                     l719 0117                       l681 038B                       l834 007F  
                     l828 0044                       l772 0479                       l685 03A8  
                     l838 00C3                       _GIE 005F                       l999 034D  
                     _RA2 0432                       _RA3 0433                       _RA4 0434  
                     _RB3 0033                       _RB4 0034                       _PR2 0011  
     __size_of_ADC_Sample 00C9                       indf 0000           __end_of_AD_Init 051B  
            ___ftdiv@cntr 002F              ___ftdiv@sign 0034                      l1011 036F  
                    l2001 0024                      l2011 002E                      l2003 0026  
                    l1053 01BA                      l2041 007B                      l2017 002F  
                    l2121 0211                      l2051 00C7                      l2035 0069  
                    l2027 004F                      l2141 0236                      l2221 040E  
                    l2039 0073                      l2119 020C                      l2153 0252  
                    l2137 022E                      l2065 04F4                      l2147 023A  
                    l2219 040C                      l2235 0508                      l2411 02A9  
                    l2403 029B                      l2149 0244                      l2335 0470  
                    l2191 0446                      l2415 02B2                      l2407 02A2  
                    l2351 041E                      l2355 0424                      l2363 0432  
                    l2381 026F                      l2613 03D4                      l2543 0351  
                    l2199 0459                      l2391 028D                      l2703 0174  
                    l2367 0437                      l2359 0428                      l2553 036D  
                    l2545 0353                      l2641 02E8                      l2625 03EB  
                    l2705 0177                      l2555 0364                      l2547 0358  
                    l2395 0292                      l2387 0288                      l1925 0513  
                    l2549 035F                      l2653 0301                      l2645 02EF  
                    l2389 028B                      l2733 0396                      l2567 01AC  
                    l2673 012F                      l2691 015C                      l2659 0100  
                    l2589 01CD                      l1965 0497                      l2693 015E  
                    l2669 011A                      l2679 0144                      l2769 03C3  
                    _CHS4 04B6                      _IOCA 0089                      _IOCB 0009  
                    u1435 00B9                      u1455 00D0                      u1535 0213  
                    u1385 006F                      u1395 0079                      u2435 01DB  
                    _PIE1 000E                      u1665 044C                      u2475 03DD  
                    _PEIE 005E                      _RAIE 0073                      _RAIF 006B  
                    u2837 0413                      u2847 02ED                      u2695 0194  
                    _RBIE 005B                      _RBIF 0058                      u2857 0021  
                    _PIR1 000D                      _WPDA 0087                      _WPUA 0088  
                    _WPUB 0008                      _main 0386              ___ftpack@arg 0072  
            ___ftpack@exp 0075                      btemp 007E                      start 000A  
       ___bmul@multiplier 0074              ___fttol@exp1 0041             ??_Init_System 0072  
            ___fttol@lval 003D                     ?_main 0070           __end_of___ftdiv 0200  
         __end_of___fttol 025B                     _T2CON 0013           __end_of___lwdiv 03F0  
         __end_of___lwmod 045E                     i1l676 04C9                     _PORTA 0086  
                   _PORTB 0006                     _TRISA 0085                     _TRISB 0005  
                   _PWMTH 0018                     _PWMTL 0017           __end_of_chrgCtr 050B  
         __end_of_keyRead 049D             ___ftpack@sign 0076                     pclath 000A  
         __end_of_pwmInit 04E2           __end_of_pwmStop 0522                     status 0003  
                   wtemp0 007E           __end_of_workCtr 043A           __initialization 000B  
            __end_of_main 03C6                    ??_main 0079             ___fttol@sign1 003C  
               ??_AD_Init 0072       __end_of_Init_System 04B7                    _ADCON0 0095  
                  _ADCON1 0096                    _ADRESH 0099                    _ADRESL 0098  
                  _ANSEL0 0093                    _ANSEL1 0094          __end_of___ftpack 0381  
                  _GODONE 04A9                    i1l2487 04C8                    _LDO_EN 04B2  
                  _INTCON 000B          __end_of___lwtoft 04F2                    _OSCCON 0014  
                  _TMR2IE 0071                    _TMR2IF 0069                    _PWMD3L 009C  
            ??_ADC_Sample 0073              keyCtr@kclick 0073        __size_of_Isr_Timer 0019  
              _Sleep_Mode 0303                    ___bmul 04F2                 ??___ftdiv 002C  
               ??___fttol 0039                    _ledCtr 0262                 ??___lwdiv 0076  
               ??___lwmod 0076                    _keyCtr 045E                 ??_chrgCtr 0072  
                  _pwStep 0057                    _result 004E                 ??_keyRead 0072  
      __end_of_ADC_Sample 00DE                    saved_w 007E                 ??_pwmInit 0072  
               ??_pwmStop 0072                 ??_workCtr 0075   __end_of__initialization 0013  
              ___ftdiv@f1 0029                ___ftdiv@f2 0026                ___ftdiv@f3 0030  
     ___bmul@multiplicand 0072                ___fttol@f1 0035            __pcstackCOMMON 0070  
      __size_of_checkOutA 0026               _Init_System 049D                __end_ofPL2 00ED  
              __end_ofPL4 0345                __end_ofPL6 00F6                __end_ofPL8 0262  
              ___lwtoft@c 0023         __end_of_Isr_Timer 04D0                _checkBatAD 02BB  
              __pbssBANK0 0046              _chrgFullFlag 005D               ?_Sleep_Mode 0070  
              __pmaintext 0386                   ?___bmul 0072                __pintentry 0004  
                 ?_ledCtr 0070                   ?_keyCtr 0070                 ?___ftpack 0072  
                 _AD_Init 0513                 ?___lwtoft 0023                   _PWM23DT 009D  
                 _PWMD23H 009E                   _PWMCON0 0015                   _PWMCON1 0016  
                 _PWMCON2 001D         __end_of_checkOutA 0416                   _IntFlag 005E  
              _intCount10 005C           ADC_Sample@adldo 0072           ADC_Sample@admax 0029  
         ADC_Sample@admin 0027           ADC_Sample@adsum 0023           __size_of___bmul 000E  
                 ___ftdiv 019E                   ___fttol 0204                   ___lwdiv 03C6  
                 ___lwmod 043A           __size_of_ledCtr 0059                   _fanDuty 0056  
         __size_of_keyCtr 0020                ??___ftpack 0020                   _chrgCtr 0500  
              _lowBatFlag 0055                   __ptext1 0416                   __ptext2 04D0  
                 __ptext3 04F2                   __ptext4 00FB                   __ptext5 03C6  
                 __ptext6 0262                   __ptext7 043A                   __ptext8 045E  
                 __ptext9 047E                _lowBatLock 0051                _lowBatTime 0050  
                 _ledStep 005B                ??___lwtoft 0077                   _count1s 005F  
                 _maxDuty 0058                   _keyRead 047E                _setBatStep 00FB  
     __size_of_Sleep_Mode 0039                   _pwmInit 04D0               ?_checkBatAD 0070  
                 _pwmStop 051B                   clrloop0 050C                   _workCtr 0416  
    end_of_initialization 0013             _longPressFlag 0059               ___ftdiv@exp 0033  
     __size_of_checkBatAD 0048            __end_of___bmul 0500              ?_Init_System 0070  
          __end_of_ledCtr 02BB            __end_of_keyCtr 047E               __end_ofPL10 0386  
             __end_ofPL12 00FB               __end_ofPL14 0204       start_initialization 000B  
             ?_setBatStep 0070                 _Isr_Timer 04B7              ??_Sleep_Mode 0072  
                ??___bmul 0073                  ??_ledCtr 0077         ADC_Sample@ad_temp 002B  
                ??_keyCtr 0073                  ?_AD_Init 0070         __size_of___ftpack 003C  
             __pbssCOMMON 0079               _fanOverTime 0053                 ___latbits 0000  
       __size_of___lwtoft 0010             __pcstackBANK0 0020        __end_of_Sleep_Mode 033C  
              ?_Isr_Timer 0070                 _checkOutA 03F0                 __pnvBANK0 0064  
        ___lwdiv@dividend 0074       __size_of_setBatStep 00A3                  ?___ftdiv 0026  
                ?___fttol 0035                  ?___lwdiv 0072                  ?___lwmod 0072  
                ?_chrgCtr 0070                  ?_keyRead 0070                 _firstTime 0064  
          ADC_Sample@adch 0021                  ?_pwmInit 0070              ??_checkBatAD 0077  
                ?_pwmStop 0070          ___lwdiv@quotient 0077                  ?_workCtr 0070  
             ADC_Sample@i 0022               ADC_Sample@j 0020         interrupt_function 0004  
              ?_checkOutA 0070                 clear_ram0 050B                 _prePwStep 0079  
               _sleepTime 0054        __end_of_checkBatAD 0303      __size_of_Init_System 001A  
        __size_of_AD_Init 0008          keyRead@keyStatus 0072               ??_Isr_Timer 0070  
              _ADC_Sample 0015          __size_of___ftdiv 0062          __size_of___fttol 0057  
        __size_of___lwdiv 002A          __size_of___lwmod 0024                  ___ftpack 0345  
        __size_of_chrgCtr 000B                  ___lwtoft 04E2          __size_of_keyRead 001F  
                _adresult 0062              ??_setBatStep 0079                  _chrgFlag 007B  
         ___lwdiv@divisor 0072           ___lwdiv@counter 0076                  __ptext10 0500  
                __ptext11 051B                  __ptext20 049D                  __ptext12 03F0  
                __ptext21 0513                  __ptext13 02BB                  __ptext22 04B7  
                __ptext14 04E2                  __ptext15 0204                  __ptext16 019E  
                __ptext17 0345                  __ptext18 0015                  __ptext19 0303  
        __size_of_pwmInit 0012          __size_of_pwmStop 0007                  _count30s 0048  
                _count15s 0046          __size_of_workCtr 0024                  _keyCount 005A  
                _intCount 0060             __size_of_main 0040               ??_checkOutA 0077  
                _test_adc 0061        __end_of_setBatStep 019E                  _power_ad 004C  
setBatStep@tempSubBatTime 0020                  _workStep 007A              _motorPwmFlag 0052  
                intlevel1 0000          ___lwmod@dividend 0074               ?_ADC_Sample 0072  
    checkBatAD@power_temp 0042              _overWorkTime 004A                _OPTION_REG 0001  
         ___lwmod@divisor 0072           ___lwmod@counter 0076  
