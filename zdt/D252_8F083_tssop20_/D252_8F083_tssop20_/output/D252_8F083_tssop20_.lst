

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Sep 16 15:14:14 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text9,local,class=CODE,merge=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text12,local,class=CODE,merge=1,delta=2
    19                           	psect	text16,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text21,local,class=CODE,merge=1,delta=2
    22                           	psect	text23,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	pa_nodes0,global,class=CODE,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 1.45
    28                           ; Generated 16/11/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataBANK0
    63  0000                     __pidataBANK0:	
    64                           
    65                           	psect	strings
    66  076E                     __pstrings:	
    67  076E                     stringtab:	
    68  076E                     __stringtab:	
    69  076E                     stringcode:	
    70                           ;	String table - string pointers are 1 byte each
    71                           
    72  076E                     stringdir:	
    73  076E  3007               	movlw	high stringdir
    74  076F  008A               	movwf	10
    75  0770  0804               	movf	4,w
    76  0771  0A84               	incf	4,f
    77  0772  0782               	addwf	2,f
    78  0773                     __stringbase:	
    79  0773  3400               	retlw	0
    80  0774                     __end_of__stringtab:	
    81  0774                     _numArray:	
    82  0774  343F               	retlw	63
    83  0775  3406               	retlw	6
    84  0776  345B               	retlw	91
    85  0777  344F               	retlw	79
    86  0778  3466               	retlw	102
    87  0779  346D               	retlw	109
    88  077A  347D               	retlw	125
    89  077B  3407               	retlw	7
    90  077C  347F               	retlw	127
    91  077D  346F               	retlw	111
    92  077E  3471               	retlw	113
    93  077F  3479               	retlw	121
    94  0780  3450               	retlw	80
    95  0781                     __end_of_numArray:	
    96                           
    97                           	psect	nvBANK0
    98  005E                     __pnvBANK0:	
    99  005E                     _firstTime:	
   100  005E                     	ds	1
   101  0015                     _PWMCON0	set	21
   102  0014                     _OSCCON	set	20
   103  0013                     _T2CON	set	19
   104  0011                     _PR2	set	17
   105  000E                     _PIE1	set	14
   106  000D                     _PIR1	set	13
   107  000B                     _INTCON	set	11
   108  0009                     _IOCB	set	9
   109  0008                     _WPUB	set	8
   110  0006                     _PORTB	set	6
   111  0005                     _TRISB	set	5
   112  0001                     _OPTION_REG	set	1
   113  0073                     _RAIE	set	115
   114  0069                     _TMR2IF	set	105
   115  006B                     _RAIF	set	107
   116  0058                     _RBIF	set	88
   117  005B                     _RBIE	set	91
   118  005E                     _PEIE	set	94
   119  005F                     _GIE	set	95
   120  0031                     _RB1	set	49
   121  0032                     _RB2	set	50
   122  0033                     _RB3	set	51
   123  0034                     _RB4	set	52
   124  0035                     _RB5	set	53
   125  0036                     _RB6	set	54
   126  0099                     _ADRESH	set	153
   127  0098                     _ADRESL	set	152
   128  0096                     _ADCON1	set	150
   129  0095                     _ADCON0	set	149
   130  0089                     _IOCA	set	137
   131  0088                     _WPUA	set	136
   132  0086                     _PORTA	set	134
   133  0085                     _TRISA	set	133
   134  04B2                     _LDO_EN	set	1202
   135  04B6                     _CHS4	set	1206
   136  04A8                     _ADON	set	1192
   137  04A9                     _GODONE	set	1193
   138  0432                     _RA2	set	1074
   139  0106                     _PORTC	set	262
   140  0105                     _TRISC	set	261
   141                           
   142                           	psect	cinit
   143  000D                     start_initialization:	
   144                           ; #config settings
   145                           
   146  000D                     __initialization:	
   147                           
   148                           ;initializer for _showMaxTemp
   149  000D  30A0               	movlw	160
   150  000E  00D9               	movwf	__pdataBANK0& (0+127)
   151                           
   152                           ;initializer for _showNumBShi
   153  000F  307F               	movlw	127
   154  0010  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   155                           
   156                           ;initializer for _showNumAge
   157  0011  00DB               	movwf	(__pdataBANK0+2)& (0+127)
   158                           
   159                           ;initializer for _showNumAShi
   160  0012  00DC               	movwf	(__pdataBANK0+3)& (0+127)
   161                           
   162                           ;initializer for _showNumBat
   163  0013  00DD               	movwf	(__pdataBANK0+4)& (0+127)
   164  0014  3020               	movlw	low __pbssBANK0
   165                           
   166                           ; Clear objects allocated to BANK0
   167  0015  1383               	bcf	3,7	;select IRP bank0
   168  0016  0084               	movwf	4
   169  0017  304C               	movlw	low (__pbssBANK0+44)
   170  0018  118A  2781         	fcall	clear_ram0
   171                           
   172                           ; Clear objects allocated to COMMON
   173  001A  01FB               	clrf	__pbssCOMMON& (0+127)
   174                           
   175                           ; Clear objects allocated to BITCOMMON
   176  001B  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   177  001C                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  001C                     __end_of__initialization:	
   181  001C  0183               	clrf	3
   182  001D  118A  2ED4         	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	bitbssCOMMON
   185  03D0                     __pbitbssCOMMON:	
   186  03D0                     _B_OnOff:	
   187  03D0                     	ds	1
   188  03D1                     _B_MainLoop:	
   189  03D1                     	ds	1
   190                           
   191                           	psect	bssCOMMON
   192  007B                     __pbssCOMMON:	
   193  007B                     _showBatStep:	
   194  007B                     	ds	1
   195                           
   196                           	psect	bssBANK0
   197  0020                     __pbssBANK0:	
   198  0020                     _power_ad:	
   199  0020                     	ds	2
   200  0022                     _result:	
   201  0022                     	ds	2
   202  0024                     _adresult:	
   203  0024                     	ds	2
   204  0026                     _motorTime:	
   205  0026                     	ds	2
   206  0028                     _count1200s:	
   207  0028                     	ds	2
   208  002A                     _temValue:	
   209  002A                     	ds	2
   210  002C                     _chanceBatTime:	
   211  002C                     	ds	2
   212  002E                     _batValue:	
   213  002E                     	ds	2
   214  0030                     _sleepTime:	
   215  0030                     	ds	2
   216  0032                     _ledCnt:	
   217  0032                     	ds	1
   218  0033                     _test_adc:	
   219  0033                     	ds	1
   220  0034                     _chrgFlag:	
   221  0034                     	ds	1
   222  0035                     _beepFlag:	
   223  0035                     	ds	1
   224  0036                     _beepTime:	
   225  0036                     	ds	1
   226  0037                     _zfStep:	
   227  0037                     	ds	1
   228  0038                     _firstShowBatTime:	
   229  0038                     	ds	1
   230  0039                     _lowBatFlag:	
   231  0039                     	ds	1
   232  003A                     _showOffTime:	
   233  003A                     	ds	1
   234  003B                     _tempCheckTime:	
   235  003B                     	ds	1
   236  003C                     _lowBatTime:	
   237  003C                     	ds	1
   238  003D                     _showWorkStepTime:	
   239  003D                     	ds	1
   240  003E                     _chanceTempNumTime:	
   241  003E                     	ds	1
   242  003F                     _showTmepNum:	
   243  003F                     	ds	1
   244  0040                     _maxTempNum:	
   245  0040                     	ds	1
   246  0041                     _tempNum:	
   247  0041                     	ds	1
   248  0042                     _batLedStep:	
   249  0042                     	ds	1
   250  0043                     _batStep:	
   251  0043                     	ds	1
   252  0044                     _longPressFlag:	
   253  0044                     	ds	1
   254  0045                     _keyCount3:	
   255  0045                     	ds	1
   256  0046                     _keyCount2:	
   257  0046                     	ds	1
   258  0047                     _keyCount:	
   259  0047                     	ds	1
   260  0048                     _workStep:	
   261  0048                     	ds	1
   262  0049                     _intCount10:	
   263  0049                     	ds	1
   264  004A                     _count1s:	
   265  004A                     	ds	1
   266  004B                     _MainTime:	
   267  004B                     	ds	1
   268                           
   269                           	psect	dataBANK0
   270  0059                     __pdataBANK0:	
   271  0059                     _showMaxTemp:	
   272  0059                     	ds	1
   273  005A                     _showNumBShi:	
   274  005A                     	ds	1
   275  005B                     _showNumAge:	
   276  005B                     	ds	1
   277  005C                     _showNumAShi:	
   278  005C                     	ds	1
   279  005D                     _showNumBat:	
   280  005D                     	ds	1
   281                           
   282                           	psect	clrtext
   283  0781                     clear_ram0:	
   284                           ;	Called with FSR containing the base address, and
   285                           ;	W with the last address+1
   286                           
   287  0781  0064               	clrwdt	;clear the watchdog before getting into this loop
   288  0782                     clrloop0:	
   289  0782  0180               	clrf	0	;clear RAM location pointed to by FSR
   290  0783  0A84               	incf	4,f	;increment pointer
   291  0784  0604               	xorwf	4,w	;XOR with final address
   292  0785  1903               	btfsc	3,2	;have we reached the end yet?
   293  0786  3400               	retlw	0	;all done for this memory range, return
   294  0787  0604               	xorwf	4,w	;XOR again to restore value
   295  0788  2F82               	goto	clrloop0	;do the next byte
   296                           
   297                           	psect	cstackCOMMON
   298  0070                     __pcstackCOMMON:	
   299  0070                     ?_pwm1Stop:	
   300  0070                     ?_pwm1Init:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_refreshLed:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_DelayUs:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_Init_System:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_Isr_Timer:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ??_Isr_Timer:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?_Sleep_Mode:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_checkTemAD:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_checkBatAD:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_setBatLed:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_setTempLed:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_chrgCtr:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_updateTemp:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_workCtr:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_keyRead:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?_keyRead2:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_keyRead3:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_keyCtr:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_main:	
   355                           ; 1 bytes @ 0x0
   356                           
   357                           
   358                           ; 1 bytes @ 0x0
   359  0070                     	ds	2
   360  0072                     ??_pwm1Stop:	
   361  0072                     ??_pwm1Init:	
   362                           ; 1 bytes @ 0x2
   363                           
   364  0072                     ??_DelayUs:	
   365                           ; 1 bytes @ 0x2
   366                           
   367  0072                     ??_Init_System:	
   368                           ; 1 bytes @ 0x2
   369                           
   370  0072                     ??_Sleep_Mode:	
   371                           ; 1 bytes @ 0x2
   372                           
   373  0072                     ?_ADC_Sample:	
   374                           ; 1 bytes @ 0x2
   375                           
   376  0072                     ??_setBatLed:	
   377                           ; 1 bytes @ 0x2
   378                           
   379  0072                     ??_keyRead:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0072                     ??_keyRead2:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0072                     ??_keyRead3:	
   386                           ; 1 bytes @ 0x2
   387                           
   388  0072                     ?_ledOpen:	
   389                           ; 1 bytes @ 0x2
   390                           
   391  0072                     ?___lbmod:	
   392                           ; 1 bytes @ 0x2
   393                           
   394  0072                     ?___lwdiv:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0072                     ADC_Sample@adldo:	
   398                           ; 2 bytes @ 0x2
   399                           
   400  0072                     setBatLed@ledStep:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0072                     keyRead@keyStatus:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     keyRead2@keyStatus:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     keyRead3@keyStatus:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0072                     ledOpen@low:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     DelayUs@Time:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     ___lbmod@divisor:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ___lwdiv@divisor:	
   422                           ; 1 bytes @ 0x2
   423                           
   424                           
   425                           ; 2 bytes @ 0x2
   426  0072                     	ds	1
   427  0073                     ??_ADC_Sample:	
   428  0073                     ??_chrgCtr:	
   429                           ; 1 bytes @ 0x3
   430                           
   431  0073                     ??_keyCtr:	
   432                           ; 1 bytes @ 0x3
   433                           
   434  0073                     ??_ledOpen:	
   435                           ; 1 bytes @ 0x3
   436                           
   437  0073                     ??___lbmod:	
   438                           ; 1 bytes @ 0x3
   439                           
   440  0073                     keyCtr@kclick:	
   441                           ; 1 bytes @ 0x3
   442                           
   443  0073                     ledOpen@hight:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0073                     DelayUs@a:	
   447                           ; 1 bytes @ 0x3
   448                           
   449                           
   450                           ; 1 bytes @ 0x3
   451  0073                     	ds	1
   452  0074                     ??_refreshLed:	
   453  0074                     ___lbmod@dividend:	
   454                           ; 1 bytes @ 0x4
   455                           
   456  0074                     ___lwdiv@dividend:	
   457                           ; 1 bytes @ 0x4
   458                           
   459                           
   460                           ; 2 bytes @ 0x4
   461  0074                     	ds	1
   462  0075                     ___lbmod@counter:	
   463                           
   464                           ; 1 bytes @ 0x5
   465  0075                     	ds	1
   466  0076                     ??___lwdiv:	
   467  0076                     ___lbmod@rem:	
   468                           ; 1 bytes @ 0x6
   469                           
   470  0076                     ___lwdiv@quotient:	
   471                           ; 1 bytes @ 0x6
   472                           
   473                           
   474                           ; 2 bytes @ 0x6
   475  0076                     	ds	1
   476  0077                     ??_checkBatAD:	
   477  0077                     ?___lbdiv:	
   478                           ; 1 bytes @ 0x7
   479                           
   480  0077                     ___lbdiv@divisor:	
   481                           ; 1 bytes @ 0x7
   482                           
   483                           
   484                           ; 1 bytes @ 0x7
   485  0077                     	ds	1
   486  0078                     ??_setTempLed:	
   487  0078                     ??___lbdiv:	
   488                           ; 1 bytes @ 0x8
   489                           
   490  0078                     setTempLed@tempLed:	
   491                           ; 1 bytes @ 0x8
   492                           
   493  0078                     ___lwdiv@counter:	
   494                           ; 1 bytes @ 0x8
   495                           
   496                           
   497                           ; 1 bytes @ 0x8
   498  0078                     	ds	1
   499  0079                     ??_checkTemAD:	
   500  0079                     ??_updateTemp:	
   501                           ; 1 bytes @ 0x9
   502                           
   503  0079                     ??_workCtr:	
   504                           ; 1 bytes @ 0x9
   505                           
   506                           
   507                           ; 1 bytes @ 0x9
   508  0079                     	ds	1
   509  007A                     ??_main:	
   510                           
   511                           	psect	cstackBANK0
   512  004C                     __pcstackBANK0:	
   513                           ; 1 bytes @ 0xA
   514                           
   515  004C                     ADC_Sample@j:	
   516  004C                     ___lbdiv@dividend:	
   517                           ; 1 bytes @ 0x0
   518                           
   519                           
   520                           ; 1 bytes @ 0x0
   521  004C                     	ds	1
   522  004D                     ADC_Sample@adch:	
   523  004D                     ___lbdiv@counter:	
   524                           ; 1 bytes @ 0x1
   525                           
   526                           
   527                           ; 1 bytes @ 0x1
   528  004D                     	ds	1
   529  004E                     ADC_Sample@i:	
   530  004E                     ___lbdiv@quotient:	
   531                           ; 1 bytes @ 0x2
   532                           
   533                           
   534                           ; 1 bytes @ 0x2
   535  004E                     	ds	1
   536  004F                     ADC_Sample@adsum:	
   537                           
   538                           ; 4 bytes @ 0x3
   539  004F                     	ds	4
   540  0053                     ADC_Sample@admin:	
   541                           
   542                           ; 2 bytes @ 0x7
   543  0053                     	ds	2
   544  0055                     ADC_Sample@admax:	
   545                           
   546                           ; 2 bytes @ 0x9
   547  0055                     	ds	2
   548  0057                     ADC_Sample@ad_temp:	
   549                           
   550                           ; 2 bytes @ 0xB
   551  0057                     	ds	2
   552                           
   553                           	psect	maintext
   554  06D4                     __pmaintext:	
   555 ;;
   556 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   557 ;;
   558 ;; *************** function _main *****************
   559 ;; Defined at:
   560 ;;		line 1018 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : B00/0
   571 ;;		On exit  : 300/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   574 ;;      Params:         0       0       0       0
   575 ;;      Locals:         0       0       0       0
   576 ;;      Temps:          0       0       0       0
   577 ;;      Totals:         0       0       0       0
   578 ;;Total ram usage:        0 bytes
   579 ;; Hardware stack levels required when called:    5
   580 ;; This function calls:
   581 ;;		_Init_System
   582 ;;		_Sleep_Mode
   583 ;;		_checkBatAD
   584 ;;		_chrgCtr
   585 ;;		_keyCtr
   586 ;;		_refreshLed
   587 ;;		_workCtr
   588 ;; This function is called by:
   589 ;;		Startup code after reset
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _main
   595  06D4                     _main:	
   596                           
   597                           ;main.c: 1021: Init_System();
   598                           
   599                           ;incstack = 0
   600                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   601  06D4  118A  26AD  118A   	fcall	_Init_System
   602                           
   603                           ;main.c: 1023: firstTime = 200;
   604  06D7  30C8               	movlw	200
   605  06D8  1283               	bcf	3,5	;RP0=0, select bank0
   606  06D9  00DE               	movwf	_firstTime
   607  06DA                     l4626:	
   608                           
   609                           ;main.c: 1025: {
   610                           ;main.c: 1026: refreshLed();
   611  06DA  118A  23FF  118A   	fcall	_refreshLed
   612                           
   613                           ;main.c: 1027: if(B_MainLoop)
   614  06DD  1CFA               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   615  06DE  2EDA               	goto	l4626
   616                           
   617                           ;main.c: 1028: {
   618                           ;main.c: 1029: B_MainLoop = 0;
   619  06DF  10FA               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   620  06E0  0064               	clrwdt	;# 
   621                           
   622                           ;main.c: 1031: keyCtr();
   623  06E1  118A  254F  118A   	fcall	_keyCtr
   624                           
   625                           ;main.c: 1032: workCtr();
   626  06E4  118A  2079  118A   	fcall	_workCtr
   627                           
   628                           ;main.c: 1033: chrgCtr();
   629  06E7  118A  201F  118A   	fcall	_chrgCtr
   630                           
   631                           ;main.c: 1034: checkBatAD();
   632  06EA  118A  2612  118A   	fcall	_checkBatAD
   633                           
   634                           ;main.c: 1035: if(workStep == 0 && keyCount == 0 && chrgFlag == 0 && firstTime == 0 && s
      +                          howOffTime == 0)
   635  06ED  0848               	movf	_workStep,w
   636  06EE  1D03               	btfss	3,2
   637  06EF  2F0A               	goto	l4654
   638  06F0  0847               	movf	_keyCount,w
   639  06F1  1D03               	btfss	3,2
   640  06F2  2F0A               	goto	l4654
   641  06F3  0834               	movf	_chrgFlag,w
   642  06F4  1D03               	btfss	3,2
   643  06F5  2F0A               	goto	l4654
   644  06F6  085E               	movf	_firstTime,w
   645  06F7  1D03               	btfss	3,2
   646  06F8  2F0A               	goto	l4654
   647  06F9  083A               	movf	_showOffTime,w
   648  06FA  1D03               	btfss	3,2
   649  06FB  2F0A               	goto	l4654
   650                           
   651                           ;main.c: 1036: {
   652                           ;main.c: 1038: if(++sleepTime > 200)
   653  06FC  0AB0               	incf	_sleepTime,f
   654  06FD  1903               	skipnz
   655  06FE  0AB1               	incf	_sleepTime+1,f
   656  06FF  3000               	movlw	0
   657  0700  0231               	subwf	_sleepTime+1,w
   658  0701  30C9               	movlw	201
   659  0702  1903               	skipnz
   660  0703  0230               	subwf	_sleepTime,w
   661  0704  1C03               	skipc
   662  0705  2EDA               	goto	l4626
   663                           
   664                           ;main.c: 1039: {
   665                           ;main.c: 1040: Sleep_Mode();
   666  0706  118A  2688  118A   	fcall	_Sleep_Mode
   667  0709  2EDA               	goto	l4626
   668  070A                     l4654:	
   669                           
   670                           ;main.c: 1043: else
   671                           ;main.c: 1044: {
   672                           ;main.c: 1045: sleepTime = 0;
   673  070A  01B0               	clrf	_sleepTime
   674  070B  01B1               	clrf	_sleepTime+1
   675  070C  2EDA               	goto	l4626
   676  070D                     __end_of_main:	
   677                           
   678                           	psect	text9
   679  03FF                     __ptext9:	
   680 ;; *************** function _refreshLed *****************
   681 ;; Defined at:
   682 ;;		line 77 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\number.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 200/0
   693 ;;		On exit  : 300/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   696 ;;      Params:         0       0       0       0
   697 ;;      Locals:         0       0       0       0
   698 ;;      Temps:          0       0       0       0
   699 ;;      Totals:         0       0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    2
   703 ;; This function calls:
   704 ;;		_DelayUs
   705 ;;		_ledOpen
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _refreshLed
   713  03FF                     _refreshLed:	
   714                           
   715                           ;number.c: 81: TRISB |= 0x7E;
   716                           
   717                           ;incstack = 0
   718                           ; Regs used in _refreshLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   719  03FF  307E               	movlw	126
   720  0400  1283               	bcf	3,5	;RP0=0, select bank0
   721  0401  0485               	iorwf	5,f	;volatile
   722                           
   723                           ;number.c: 82: PORTB &= 0x81;
   724  0402  3081               	movlw	129
   725  0403  0586               	andwf	6,f	;volatile
   726                           
   727                           ;number.c: 84: switch(ledCnt)
   728  0404  2CDD               	goto	l4298
   729  0405                     l2065:	
   730                           ;number.c: 85: {
   731                           ;number.c: 86: case 0:
   732                           
   733                           
   734                           ;number.c: 87: if(showNumAShi & 0x01)
   735  0405  1C5C               	btfss	_showNumAShi,0
   736  0406  2CE9               	goto	l4300
   737                           
   738                           ;number.c: 88: {
   739                           ;number.c: 89: ledOpen(1,2);
   740  0407  3002               	movlw	2
   741  0408  00F2               	movwf	ledOpen@low
   742  0409  3001               	movlw	1
   743  040A  24F7  118A         	fcall	_ledOpen
   744  040C  2CE9               	goto	l4300
   745  040D                     l2068:	
   746                           ;number.c: 92: case 1:
   747                           
   748                           
   749                           ;number.c: 93: if(showNumAShi & 0x02)
   750  040D  1CDC               	btfss	_showNumAShi,1
   751  040E  2CE9               	goto	l4300
   752                           
   753                           ;number.c: 94: {
   754                           ;number.c: 95: ledOpen(1,3);
   755  040F  3003               	movlw	3
   756  0410  00F2               	movwf	ledOpen@low
   757  0411  3001               	movlw	1
   758  0412  24F7  118A         	fcall	_ledOpen
   759  0414  2CE9               	goto	l4300
   760  0415                     l2070:	
   761                           ;number.c: 98: case 2:
   762                           
   763                           
   764                           ;number.c: 99: if(showNumAShi & 0x04)
   765  0415  1D5C               	btfss	_showNumAShi,2
   766  0416  2CE9               	goto	l4300
   767                           
   768                           ;number.c: 100: {
   769                           ;number.c: 101: ledOpen(1,4);
   770  0417  3004               	movlw	4
   771  0418  00F2               	movwf	ledOpen@low
   772  0419  3001               	movlw	1
   773  041A  24F7  118A         	fcall	_ledOpen
   774  041C  2CE9               	goto	l4300
   775  041D                     l2072:	
   776                           ;number.c: 104: case 3:
   777                           
   778                           
   779                           ;number.c: 105: if(showNumAShi & 0x08)
   780  041D  1DDC               	btfss	_showNumAShi,3
   781  041E  2CE9               	goto	l4300
   782                           
   783                           ;number.c: 106: {
   784                           ;number.c: 107: ledOpen(1,5);
   785  041F  3005               	movlw	5
   786  0420  00F2               	movwf	ledOpen@low
   787  0421  3001               	movlw	1
   788  0422  24F7  118A         	fcall	_ledOpen
   789  0424  2CE9               	goto	l4300
   790  0425                     l2074:	
   791                           ;number.c: 110: case 4:
   792                           
   793                           
   794                           ;number.c: 111: if(showNumAShi & 0x10)
   795  0425  1E5C               	btfss	_showNumAShi,4
   796  0426  2CE9               	goto	l4300
   797                           
   798                           ;number.c: 112: {
   799                           ;number.c: 113: ledOpen(1,6);
   800  0427  3006               	movlw	6
   801  0428  00F2               	movwf	ledOpen@low
   802  0429  3001               	movlw	1
   803  042A  24F7  118A         	fcall	_ledOpen
   804  042C  2CE9               	goto	l4300
   805  042D                     l2076:	
   806                           ;number.c: 116: case 5:
   807                           
   808                           
   809                           ;number.c: 117: if(showNumAShi & 0x20)
   810  042D  1EDC               	btfss	_showNumAShi,5
   811  042E  2CE9               	goto	l4300
   812  042F  3002               	movlw	2
   813                           
   814                           ;number.c: 118: {
   815                           ;number.c: 119: ledOpen(2,1);
   816  0430  01F2               	clrf	ledOpen@low
   817  0431  0AF2               	incf	ledOpen@low,f
   818  0432  24F7  118A         	fcall	_ledOpen
   819  0434  2CE9               	goto	l4300
   820  0435                     l2078:	
   821                           ;number.c: 122: case 6:
   822                           
   823                           
   824                           ;number.c: 123: if(showNumAShi & 0x40)
   825  0435  1F5C               	btfss	_showNumAShi,6
   826  0436  2CE9               	goto	l4300
   827                           
   828                           ;number.c: 124: {
   829                           ;number.c: 125: ledOpen(2,3);
   830  0437  3003               	movlw	3
   831  0438  00F2               	movwf	ledOpen@low
   832  0439  3002               	movlw	2
   833  043A  24F7  118A         	fcall	_ledOpen
   834  043C  2CE9               	goto	l4300
   835  043D                     l2080:	
   836                           ;number.c: 128: case 7:
   837                           
   838                           
   839                           ;number.c: 129: if(showNumAge & 0x01)
   840  043D  1C5B               	btfss	_showNumAge,0
   841  043E  2CE9               	goto	l4300
   842                           
   843                           ;number.c: 130: {
   844                           ;number.c: 131: ledOpen(2,4);
   845  043F  3004               	movlw	4
   846  0440  00F2               	movwf	ledOpen@low
   847  0441  3002               	movlw	2
   848  0442  24F7  118A         	fcall	_ledOpen
   849  0444  2CE9               	goto	l4300
   850  0445                     l2082:	
   851                           ;number.c: 134: case 8:
   852                           
   853                           
   854                           ;number.c: 135: if(showNumAge & 0x02)
   855  0445  1CDB               	btfss	_showNumAge,1
   856  0446  2CE9               	goto	l4300
   857                           
   858                           ;number.c: 136: {
   859                           ;number.c: 137: ledOpen(2,5);
   860  0447  3005               	movlw	5
   861  0448  00F2               	movwf	ledOpen@low
   862  0449  3002               	movlw	2
   863  044A  24F7  118A         	fcall	_ledOpen
   864  044C  2CE9               	goto	l4300
   865  044D                     l2084:	
   866                           ;number.c: 140: case 9:
   867                           
   868                           
   869                           ;number.c: 141: if(showNumAge & 0x04)
   870  044D  1D5B               	btfss	_showNumAge,2
   871  044E  2CE9               	goto	l4300
   872                           
   873                           ;number.c: 142: {
   874                           ;number.c: 143: ledOpen(2,6);
   875  044F  3006               	movlw	6
   876  0450  00F2               	movwf	ledOpen@low
   877  0451  3002               	movlw	2
   878  0452  24F7  118A         	fcall	_ledOpen
   879  0454  2CE9               	goto	l4300
   880  0455                     l2086:	
   881                           ;number.c: 146: case 10:
   882                           
   883                           
   884                           ;number.c: 147: if(showNumAge & 0x08)
   885  0455  1DDB               	btfss	_showNumAge,3
   886  0456  2CE9               	goto	l4300
   887  0457  3003               	movlw	3
   888                           
   889                           ;number.c: 148: {
   890                           ;number.c: 149: ledOpen(3,1);
   891  0458  01F2               	clrf	ledOpen@low
   892  0459  0AF2               	incf	ledOpen@low,f
   893  045A  24F7  118A         	fcall	_ledOpen
   894  045C  2CE9               	goto	l4300
   895  045D                     l2088:	
   896                           ;number.c: 152: case 11:
   897                           
   898                           
   899                           ;number.c: 153: if(showNumAge & 0x10)
   900  045D  1E5B               	btfss	_showNumAge,4
   901  045E  2CE9               	goto	l4300
   902                           
   903                           ;number.c: 154: {
   904                           ;number.c: 155: ledOpen(3,2);
   905  045F  3002               	movlw	2
   906  0460  00F2               	movwf	ledOpen@low
   907  0461  3003               	movlw	3
   908  0462  24F7  118A         	fcall	_ledOpen
   909  0464  2CE9               	goto	l4300
   910  0465                     l2090:	
   911                           ;number.c: 158: case 12:
   912                           
   913                           
   914                           ;number.c: 159: if(showNumAge & 0x20)
   915  0465  1EDB               	btfss	_showNumAge,5
   916  0466  2CE9               	goto	l4300
   917                           
   918                           ;number.c: 160: {
   919                           ;number.c: 161: ledOpen(3,4);
   920  0467  3004               	movlw	4
   921  0468  00F2               	movwf	ledOpen@low
   922  0469  3003               	movlw	3
   923  046A  24F7  118A         	fcall	_ledOpen
   924  046C  2CE9               	goto	l4300
   925  046D                     l2092:	
   926                           ;number.c: 164: case 13:
   927                           
   928                           
   929                           ;number.c: 165: if(showNumAge & 0x40)
   930  046D  1F5B               	btfss	_showNumAge,6
   931  046E  2CE9               	goto	l4300
   932                           
   933                           ;number.c: 166: {
   934                           ;number.c: 167: ledOpen(3,5);
   935  046F  3005               	movlw	5
   936  0470  00F2               	movwf	ledOpen@low
   937  0471  3003               	movlw	3
   938  0472  24F7  118A         	fcall	_ledOpen
   939  0474  2CE9               	goto	l4300
   940  0475                     l2094:	
   941                           ;number.c: 170: case 14:
   942                           
   943                           
   944                           ;number.c: 171: if(showNumBShi & 0x01)
   945  0475  1C5A               	btfss	_showNumBShi,0
   946  0476  2CE9               	goto	l4300
   947  0477  3004               	movlw	4
   948                           
   949                           ;number.c: 172: {
   950                           ;number.c: 173: ledOpen(4,1);
   951  0478  01F2               	clrf	ledOpen@low
   952  0479  0AF2               	incf	ledOpen@low,f
   953  047A  24F7  118A         	fcall	_ledOpen
   954  047C  2CE9               	goto	l4300
   955  047D                     l2096:	
   956                           ;number.c: 176: case 15:
   957                           
   958                           
   959                           ;number.c: 177: if(showNumBShi & 0x02)
   960  047D  1CDA               	btfss	_showNumBShi,1
   961  047E  2CE9               	goto	l4300
   962                           
   963                           ;number.c: 178: {
   964                           ;number.c: 179: ledOpen(4,2);
   965  047F  3002               	movlw	2
   966  0480  00F2               	movwf	ledOpen@low
   967  0481  3004               	movlw	4
   968  0482  24F7  118A         	fcall	_ledOpen
   969  0484  2CE9               	goto	l4300
   970  0485                     l2098:	
   971                           ;number.c: 182: case 16:
   972                           
   973                           
   974                           ;number.c: 183: if(showNumBShi & 0x04)
   975  0485  1D5A               	btfss	_showNumBShi,2
   976  0486  2CE9               	goto	l4300
   977                           
   978                           ;number.c: 184: {
   979                           ;number.c: 185: ledOpen(4,3);
   980  0487  3003               	movlw	3
   981  0488  00F2               	movwf	ledOpen@low
   982  0489  3004               	movlw	4
   983  048A  24F7  118A         	fcall	_ledOpen
   984  048C  2CE9               	goto	l4300
   985  048D                     l2100:	
   986                           ;number.c: 188: case 17:
   987                           
   988                           
   989                           ;number.c: 189: if(showNumBShi & 0x08)
   990  048D  1DDA               	btfss	_showNumBShi,3
   991  048E  2CE9               	goto	l4300
   992                           
   993                           ;number.c: 190: {
   994                           ;number.c: 191: ledOpen(4,5);
   995  048F  3005               	movlw	5
   996  0490  00F2               	movwf	ledOpen@low
   997  0491  3004               	movlw	4
   998  0492  24F7  118A         	fcall	_ledOpen
   999  0494  2CE9               	goto	l4300
  1000  0495                     l2102:	
  1001                           ;number.c: 194: case 18:
  1002                           
  1003                           
  1004                           ;number.c: 195: if(showNumBShi & 0x10)
  1005  0495  1E5A               	btfss	_showNumBShi,4
  1006  0496  2CE9               	goto	l4300
  1007                           
  1008                           ;number.c: 196: {
  1009                           ;number.c: 197: ledOpen(4,6);
  1010  0497  3006               	movlw	6
  1011  0498  00F2               	movwf	ledOpen@low
  1012  0499  3004               	movlw	4
  1013  049A  24F7  118A         	fcall	_ledOpen
  1014  049C  2CE9               	goto	l4300
  1015  049D                     l2104:	
  1016                           ;number.c: 200: case 19:
  1017                           
  1018                           
  1019                           ;number.c: 201: if(showNumBShi & 0x20)
  1020  049D  1EDA               	btfss	_showNumBShi,5
  1021  049E  2CE9               	goto	l4300
  1022  049F  3005               	movlw	5
  1023                           
  1024                           ;number.c: 202: {
  1025                           ;number.c: 203: ledOpen(5,1);
  1026  04A0  01F2               	clrf	ledOpen@low
  1027  04A1  0AF2               	incf	ledOpen@low,f
  1028  04A2  24F7  118A         	fcall	_ledOpen
  1029  04A4  2CE9               	goto	l4300
  1030  04A5                     l2106:	
  1031                           ;number.c: 206: case 20:
  1032                           
  1033                           
  1034                           ;number.c: 207: if(showNumBShi & 0x40)
  1035  04A5  1F5A               	btfss	_showNumBShi,6
  1036  04A6  2CE9               	goto	l4300
  1037                           
  1038                           ;number.c: 208: {
  1039                           ;number.c: 209: ledOpen(5,2);
  1040  04A7  3002               	movlw	2
  1041  04A8  00F2               	movwf	ledOpen@low
  1042  04A9  3005               	movlw	5
  1043  04AA  24F7  118A         	fcall	_ledOpen
  1044  04AC  2CE9               	goto	l4300
  1045  04AD                     l2108:	
  1046                           ;number.c: 212: case 21:
  1047                           
  1048                           
  1049                           ;number.c: 213: if(showNumBat & 0x01)
  1050  04AD  1C5D               	btfss	_showNumBat,0
  1051  04AE  2CE9               	goto	l4300
  1052                           
  1053                           ;number.c: 214: {
  1054                           ;number.c: 215: ledOpen(5,4);
  1055  04AF  3004               	movlw	4
  1056  04B0  00F2               	movwf	ledOpen@low
  1057  04B1  3005               	movlw	5
  1058  04B2  24F7  118A         	fcall	_ledOpen
  1059  04B4  2CE9               	goto	l4300
  1060  04B5                     l2110:	
  1061                           ;number.c: 218: case 22:
  1062                           
  1063                           
  1064                           ;number.c: 219: if(showNumBat & 0x02)
  1065  04B5  1CDD               	btfss	_showNumBat,1
  1066  04B6  2CE9               	goto	l4300
  1067                           
  1068                           ;number.c: 220: {
  1069                           ;number.c: 221: ledOpen(5,6);
  1070  04B7  3006               	movlw	6
  1071  04B8  00F2               	movwf	ledOpen@low
  1072  04B9  3005               	movlw	5
  1073  04BA  24F7  118A         	fcall	_ledOpen
  1074  04BC  2CE9               	goto	l4300
  1075  04BD                     l2112:	
  1076                           ;number.c: 224: case 23:
  1077                           
  1078                           
  1079                           ;number.c: 225: if(showNumBat & 0x04)
  1080  04BD  1D5D               	btfss	_showNumBat,2
  1081  04BE  2CE9               	goto	l4300
  1082  04BF  3006               	movlw	6
  1083                           
  1084                           ;number.c: 226: {
  1085                           ;number.c: 227: ledOpen(6,1);
  1086  04C0  01F2               	clrf	ledOpen@low
  1087  04C1  0AF2               	incf	ledOpen@low,f
  1088  04C2  24F7  118A         	fcall	_ledOpen
  1089  04C4  2CE9               	goto	l4300
  1090  04C5                     l2114:	
  1091                           ;number.c: 230: case 24:
  1092                           
  1093                           
  1094                           ;number.c: 231: if(showNumBat & 0x08)
  1095  04C5  1DDD               	btfss	_showNumBat,3
  1096  04C6  2CE9               	goto	l4300
  1097                           
  1098                           ;number.c: 232: {
  1099                           ;number.c: 233: ledOpen(6,2);
  1100  04C7  3002               	movlw	2
  1101  04C8  00F2               	movwf	ledOpen@low
  1102  04C9  3006               	movlw	6
  1103  04CA  24F7  118A         	fcall	_ledOpen
  1104  04CC  2CE9               	goto	l4300
  1105  04CD                     l2116:	
  1106                           ;number.c: 236: case 25:
  1107                           
  1108                           
  1109                           ;number.c: 237: if(showNumBat & 0x10)
  1110  04CD  1E5D               	btfss	_showNumBat,4
  1111  04CE  2CE9               	goto	l4300
  1112                           
  1113                           ;number.c: 238: {
  1114                           ;number.c: 239: ledOpen(6,3);
  1115  04CF  3003               	movlw	3
  1116  04D0  00F2               	movwf	ledOpen@low
  1117  04D1  3006               	movlw	6
  1118  04D2  24F7  118A         	fcall	_ledOpen
  1119  04D4  2CE9               	goto	l4300
  1120  04D5                     l2118:	
  1121                           ;number.c: 242: case 26:
  1122                           
  1123                           
  1124                           ;number.c: 243: if(showNumBat & 0x20)
  1125  04D5  1EDD               	btfss	_showNumBat,5
  1126  04D6  2CE9               	goto	l4300
  1127                           
  1128                           ;number.c: 244: {
  1129                           ;number.c: 245: ledOpen(6,4);
  1130  04D7  3004               	movlw	4
  1131  04D8  00F2               	movwf	ledOpen@low
  1132  04D9  3006               	movlw	6
  1133  04DA  24F7  118A         	fcall	_ledOpen
  1134  04DC  2CE9               	goto	l4300
  1135  04DD                     l4298:	
  1136  04DD  0832               	movf	_ledCnt,w
  1137                           
  1138                           ; Switch size 1, requested type "space"
  1139                           ; Number of cases is 27, Range of values is 0 to 26
  1140                           ; switch strategies available:
  1141                           ; Name         Instructions Cycles
  1142                           ; direct_byte           61     7 (fixed)
  1143                           ; simple_byte           82    42 (average)
  1144                           ; jumptable            260     6 (fixed)
  1145                           ;	Chosen strategy is direct_byte
  1146  04DE  0084               	movwf	4
  1147  04DF  301B               	movlw	27
  1148  04E0  0204               	subwf	4,w
  1149  04E1  1803               	skipnc
  1150  04E2  2CE9               	goto	l4300
  1151  04E3  3007               	movlw	high S4676
  1152  04E4  008A               	movwf	10
  1153  04E5  1003               	clrc
  1154  04E6  0D04               	rlf	4,w
  1155  04E7  3E0D               	addlw	low S4676
  1156  04E8  0082               	movwf	2
  1157  04E9                     l4300:	
  1158                           
  1159                           ;number.c: 252: DelayUs(50);
  1160  04E9  3032               	movlw	50
  1161  04EA  2546               	fcall	_DelayUs
  1162                           
  1163                           ;number.c: 253: TRISB |= 0x7E;
  1164  04EB  307E               	movlw	126
  1165  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1166  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1167  04EE  0485               	iorwf	5,f	;volatile
  1168                           
  1169                           ;number.c: 254: PORTB &= 0x81;
  1170  04EF  3081               	movlw	129
  1171  04F0  0586               	andwf	6,f	;volatile
  1172                           
  1173                           ;number.c: 255: if(++ledCnt >= 27)
  1174  04F1  301B               	movlw	27
  1175  04F2  0AB2               	incf	_ledCnt,f
  1176  04F3  0232               	subwf	_ledCnt,w
  1177  04F4  1803               	btfsc	3,0
  1178                           
  1179                           ;number.c: 256: {
  1180                           ;number.c: 257: ledCnt = 0;
  1181  04F5  01B2               	clrf	_ledCnt
  1182  04F6  0008               	return
  1183  04F7                     __end_of_refreshLed:	
  1184  04F7                     __ptext10:	
  1185 ;; *************** function _ledOpen *****************
  1186 ;; Defined at:
  1187 ;;		line 12 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\number.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  hight           1    wreg     unsigned char 
  1190 ;;  low             1    2[COMMON] unsigned char 
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  hight           1    3[COMMON] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1197 ;; Tracked objects:
  1198 ;;		On entry : 300/0
  1199 ;;		On exit  : 300/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1202 ;;      Params:         1       0       0       0
  1203 ;;      Locals:         1       0       0       0
  1204 ;;      Temps:          0       0       0       0
  1205 ;;      Totals:         2       0       0       0
  1206 ;;Total ram usage:        2 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    1
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_refreshLed
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           
  1217                           ;psect for function _ledOpen
  1218  04F7                     _ledOpen:	
  1219                           
  1220                           ;incstack = 0
  1221                           ; Regs used in _ledOpen: [wreg-fsr0h+status,2+status,0]
  1222                           ;ledOpen@hight stored from wreg
  1223  04F7  00F3               	movwf	ledOpen@hight
  1224                           
  1225                           ;number.c: 14: switch(hight)
  1226  04F8  2D0B               	goto	l3826
  1227  04F9                     l2044:	
  1228                           ;number.c: 15: {
  1229                           ;number.c: 16: case 1:
  1230                           
  1231                           
  1232                           ;number.c: 17: TRISB &= 0xFD;
  1233  04F9  1085               	bcf	5,1	;volatile
  1234                           
  1235                           ;number.c: 18: RB1 = 1;
  1236  04FA  1486               	bsf	6,1	;volatile
  1237                           
  1238                           ;number.c: 19: break;
  1239  04FB  2D31               	goto	l3830
  1240  04FC                     l2046:	
  1241                           ;number.c: 20: case 2:
  1242                           
  1243                           
  1244                           ;number.c: 21: TRISB &= 0xFB;
  1245  04FC  1105               	bcf	5,2	;volatile
  1246                           
  1247                           ;number.c: 22: RB2 = 1;
  1248  04FD  1506               	bsf	6,2	;volatile
  1249                           
  1250                           ;number.c: 23: break;
  1251  04FE  2D31               	goto	l3830
  1252  04FF                     l2047:	
  1253                           ;number.c: 24: case 3:
  1254                           
  1255                           
  1256                           ;number.c: 25: TRISB &= 0xF7;
  1257  04FF  1185               	bcf	5,3	;volatile
  1258                           
  1259                           ;number.c: 26: RB3 = 1;
  1260  0500  1586               	bsf	6,3	;volatile
  1261                           
  1262                           ;number.c: 27: break;
  1263  0501  2D31               	goto	l3830
  1264  0502                     l2048:	
  1265                           ;number.c: 28: case 4:
  1266                           
  1267                           
  1268                           ;number.c: 29: TRISB &= 0xEF;
  1269  0502  1205               	bcf	5,4	;volatile
  1270                           
  1271                           ;number.c: 30: RB4 = 1;
  1272  0503  1606               	bsf	6,4	;volatile
  1273                           
  1274                           ;number.c: 31: break;
  1275  0504  2D31               	goto	l3830
  1276  0505                     l2049:	
  1277                           ;number.c: 32: case 5:
  1278                           
  1279                           
  1280                           ;number.c: 33: TRISB &= 0xDF;
  1281  0505  1285               	bcf	5,5	;volatile
  1282                           
  1283                           ;number.c: 34: RB5 = 1;
  1284  0506  1686               	bsf	6,5	;volatile
  1285                           
  1286                           ;number.c: 35: break;
  1287  0507  2D31               	goto	l3830
  1288  0508                     l2050:	
  1289                           ;number.c: 36: case 6:
  1290                           
  1291                           
  1292                           ;number.c: 37: TRISB &= 0xBF;
  1293  0508  1305               	bcf	5,6	;volatile
  1294                           
  1295                           ;number.c: 38: RB6 = 1;
  1296  0509  1706               	bsf	6,6	;volatile
  1297                           
  1298                           ;number.c: 39: break;
  1299  050A  2D31               	goto	l3830
  1300  050B                     l3826:	
  1301  050B  0873               	movf	ledOpen@hight,w
  1302                           
  1303                           ; Switch size 1, requested type "space"
  1304                           ; Number of cases is 6, Range of values is 1 to 6
  1305                           ; switch strategies available:
  1306                           ; Name         Instructions Cycles
  1307                           ; simple_byte           19    10 (average)
  1308                           ; direct_byte           22    10 (fixed)
  1309                           ; jumptable            263     9 (fixed)
  1310                           ;	Chosen strategy is simple_byte
  1311  050C  3A01               	xorlw	1	; case 1
  1312  050D  1903               	skipnz
  1313  050E  2CF9               	goto	l2044
  1314  050F  3A03               	xorlw	3	; case 2
  1315  0510  1903               	skipnz
  1316  0511  2CFC               	goto	l2046
  1317  0512  3A01               	xorlw	1	; case 3
  1318  0513  1903               	skipnz
  1319  0514  2CFF               	goto	l2047
  1320  0515  3A07               	xorlw	7	; case 4
  1321  0516  1903               	skipnz
  1322  0517  2D02               	goto	l2048
  1323  0518  3A01               	xorlw	1	; case 5
  1324  0519  1903               	skipnz
  1325  051A  2D05               	goto	l2049
  1326  051B  3A03               	xorlw	3	; case 6
  1327  051C  1903               	skipnz
  1328  051D  2D08               	goto	l2050
  1329  051E  2D31               	goto	l3830
  1330  051F                     l2053:	
  1331                           ;number.c: 44: {
  1332                           ;number.c: 45: case 1:
  1333                           
  1334                           
  1335                           ;number.c: 46: TRISB &= 0xFD;
  1336  051F  1085               	bcf	5,1	;volatile
  1337                           
  1338                           ;number.c: 47: RB1 = 0;
  1339  0520  1086               	bcf	6,1	;volatile
  1340                           
  1341                           ;number.c: 48: break;
  1342  0521  0008               	return
  1343  0522                     l2055:	
  1344                           ;number.c: 49: case 2:
  1345                           
  1346                           
  1347                           ;number.c: 50: TRISB &= 0xFB;
  1348  0522  1105               	bcf	5,2	;volatile
  1349                           
  1350                           ;number.c: 51: RB2 = 0;
  1351  0523  1106               	bcf	6,2	;volatile
  1352                           
  1353                           ;number.c: 52: break;
  1354  0524  0008               	return
  1355  0525                     l2056:	
  1356                           ;number.c: 53: case 3:
  1357                           
  1358                           
  1359                           ;number.c: 54: TRISB &= 0xF7;
  1360  0525  1185               	bcf	5,3	;volatile
  1361                           
  1362                           ;number.c: 55: RB3 = 0;
  1363  0526  1186               	bcf	6,3	;volatile
  1364                           
  1365                           ;number.c: 56: break;
  1366  0527  0008               	return
  1367  0528                     l2057:	
  1368                           ;number.c: 57: case 4:
  1369                           
  1370                           
  1371                           ;number.c: 58: TRISB &= 0xEF;
  1372  0528  1205               	bcf	5,4	;volatile
  1373                           
  1374                           ;number.c: 59: RB4 = 0;
  1375  0529  1206               	bcf	6,4	;volatile
  1376                           
  1377                           ;number.c: 60: break;
  1378  052A  0008               	return
  1379  052B                     l2058:	
  1380                           ;number.c: 61: case 5:
  1381                           
  1382                           
  1383                           ;number.c: 62: TRISB &= 0xDF;
  1384  052B  1285               	bcf	5,5	;volatile
  1385                           
  1386                           ;number.c: 63: RB5 = 0;
  1387  052C  1286               	bcf	6,5	;volatile
  1388                           
  1389                           ;number.c: 64: break;
  1390  052D  0008               	return
  1391  052E                     l2059:	
  1392                           ;number.c: 65: case 6:
  1393                           
  1394                           
  1395                           ;number.c: 66: TRISB &= 0xBF;
  1396  052E  1305               	bcf	5,6	;volatile
  1397                           
  1398                           ;number.c: 67: RB6 = 0;
  1399  052F  1306               	bcf	6,6	;volatile
  1400                           
  1401                           ;number.c: 68: break;
  1402  0530  0008               	return
  1403  0531                     l3830:	
  1404  0531  0872               	movf	ledOpen@low,w
  1405                           
  1406                           ; Switch size 1, requested type "space"
  1407                           ; Number of cases is 6, Range of values is 1 to 6
  1408                           ; switch strategies available:
  1409                           ; Name         Instructions Cycles
  1410                           ; simple_byte           19    10 (average)
  1411                           ; direct_byte           22    10 (fixed)
  1412                           ; jumptable            263     9 (fixed)
  1413                           ;	Chosen strategy is simple_byte
  1414  0532  3A01               	xorlw	1	; case 1
  1415  0533  1903               	skipnz
  1416  0534  2D1F               	goto	l2053
  1417  0535  3A03               	xorlw	3	; case 2
  1418  0536  1903               	skipnz
  1419  0537  2D22               	goto	l2055
  1420  0538  3A01               	xorlw	1	; case 3
  1421  0539  1903               	skipnz
  1422  053A  2D25               	goto	l2056
  1423  053B  3A07               	xorlw	7	; case 4
  1424  053C  1903               	skipnz
  1425  053D  2D28               	goto	l2057
  1426  053E  3A01               	xorlw	1	; case 5
  1427  053F  1903               	skipnz
  1428  0540  2D2B               	goto	l2058
  1429  0541  3A03               	xorlw	3	; case 6
  1430  0542  1903               	skipnz
  1431  0543  2D2E               	goto	l2059
  1432  0544  2D45               	goto	l2061
  1433  0545                     l2061:	
  1434  0545  0008               	return
  1435  0546                     __end_of_ledOpen:	
  1436  0546                     __ptext11:	
  1437 ;; *************** function _DelayUs *****************
  1438 ;; Defined at:
  1439 ;;		line 267 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\number.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;  Time            1    wreg     unsigned char 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  Time            1    2[COMMON] unsigned char 
  1444 ;;  a               1    3[COMMON] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  1    wreg      void 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0
  1449 ;; Tracked objects:
  1450 ;;		On entry : 300/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1454 ;;      Params:         0       0       0       0
  1455 ;;      Locals:         2       0       0       0
  1456 ;;      Temps:          0       0       0       0
  1457 ;;      Totals:         2       0       0       0
  1458 ;;Total ram usage:        2 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    1
  1461 ;; This function calls:
  1462 ;;		Nothing
  1463 ;; This function is called by:
  1464 ;;		_refreshLed
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           
  1469                           ;psect for function _DelayUs
  1470  0546                     _DelayUs:	
  1471                           
  1472                           ;incstack = 0
  1473                           ; Regs used in _DelayUs: [wreg+status,2+status,0]
  1474                           ;DelayUs@Time stored from wreg
  1475  0546  00F2               	movwf	DelayUs@Time
  1476                           
  1477                           ;number.c: 269: unsigned char a;
  1478                           ;number.c: 270: for(a=0;a<Time;a++)
  1479  0547  01F3               	clrf	DelayUs@a
  1480  0548                     l3836:	
  1481  0548  0872               	movf	DelayUs@Time,w
  1482  0549  0273               	subwf	DelayUs@a,w
  1483  054A  1803               	btfsc	3,0
  1484  054B  0008               	return
  1485                           
  1486                           ;number.c: 271: {
  1487                           ;number.c: 272: __nop();
  1488  054C  0000               	nop
  1489  054D  0AF3               	incf	DelayUs@a,f
  1490  054E  2D48               	goto	l3836
  1491  054F                     __end_of_DelayUs:	
  1492                           
  1493                           	psect	swtext1
  1494  070D                     __pswtext1:	
  1495  070D                     S4676:	
  1496  070D  118A  2C05         	ljmp	l2065
  1497  070F  118A  2C0D         	ljmp	l2068
  1498  0711  118A  2C15         	ljmp	l2070
  1499  0713  118A  2C1D         	ljmp	l2072
  1500  0715  118A  2C25         	ljmp	l2074
  1501  0717  118A  2C2D         	ljmp	l2076
  1502  0719  118A  2C35         	ljmp	l2078
  1503  071B  118A  2C3D         	ljmp	l2080
  1504  071D  118A  2C45         	ljmp	l2082
  1505  071F  118A  2C4D         	ljmp	l2084
  1506  0721  118A  2C55         	ljmp	l2086
  1507  0723  118A  2C5D         	ljmp	l2088
  1508  0725  118A  2C65         	ljmp	l2090
  1509  0727  118A  2C6D         	ljmp	l2092
  1510  0729  118A  2C75         	ljmp	l2094
  1511  072B  118A  2C7D         	ljmp	l2096
  1512  072D  118A  2C85         	ljmp	l2098
  1513  072F  118A  2C8D         	ljmp	l2100
  1514  0731  118A  2C95         	ljmp	l2102
  1515  0733  118A  2C9D         	ljmp	l2104
  1516  0735  118A  2CA5         	ljmp	l2106
  1517  0737  118A  2CAD         	ljmp	l2108
  1518  0739  118A  2CB5         	ljmp	l2110
  1519  073B  118A  2CBD         	ljmp	l2112
  1520  073D  118A  2CC5         	ljmp	l2114
  1521  073F  118A  2CCD         	ljmp	l2116
  1522  0741  118A  2CD5         	ljmp	l2118
  1523                           
  1524                           	psect	text12
  1525  054F                     __ptext12:	
  1526 ;; *************** function _keyCtr *****************
  1527 ;; Defined at:
  1528 ;;		line 926 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  kclick          1    3[COMMON] unsigned char 
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0, pclath, cstack
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 300/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1542 ;;      Params:         0       0       0       0
  1543 ;;      Locals:         1       0       0       0
  1544 ;;      Temps:          0       0       0       0
  1545 ;;      Totals:         1       0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    2
  1549 ;; This function calls:
  1550 ;;		_keyRead
  1551 ;;		_keyRead2
  1552 ;;		_keyRead3
  1553 ;;		_pwm1Stop
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           
  1560                           ;psect for function _keyCtr
  1561  054F                     _keyCtr:	
  1562                           
  1563                           ;main.c: 928: char kclick = keyRead(0x01 & (~PORTB));
  1564                           
  1565                           ;incstack = 0
  1566                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1567  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1568  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1569  0551  0906               	comf	6,w	;volatile
  1570  0552  3901               	andlw	1
  1571  0553  25C1  118A         	fcall	_keyRead
  1572  0555  00F3               	movwf	keyCtr@kclick
  1573                           
  1574                           ;main.c: 929: if(kclick == 2)
  1575  0556  3A02               	xorlw	2
  1576  0557  1D03               	btfss	3,2
  1577  0558  2D7B               	goto	l4194
  1578                           
  1579                           ;main.c: 930: {
  1580                           ;main.c: 931: if(workStep > 0)
  1581  0559  0848               	movf	_workStep,w
  1582  055A  1903               	btfsc	3,2
  1583  055B  2D6A               	goto	l4180
  1584                           
  1585                           ;main.c: 932: {
  1586                           ;main.c: 933: count1200s = 0;
  1587                           
  1588                           ;main.c: 934: workStep = 0;
  1589                           
  1590                           ;main.c: 935: showWorkStepTime = 0;
  1591  055C  260D               	fcall	PL16	;call to abstracted procedure
  1592                           
  1593                           ;main.c: 936: pwm1Stop();
  1594  055D  118A  2206  118A   	fcall	_pwm1Stop
  1595                           
  1596                           ;main.c: 937: PORTA &= 0xE3;
  1597  0560  30E3               	movlw	227
  1598  0561  0586               	andwf	6,f	;volatile
  1599                           
  1600                           ;main.c: 938: PORTC &= 0xFE;
  1601  0562  1283               	bcf	3,5	;RP0=0, select bank2
  1602  0563  1703               	bsf	3,6	;RP1=1, select bank2
  1603  0564  1006               	bcf	6,0	;volatile
  1604  0565  301E               	movlw	30
  1605                           
  1606                           ;main.c: 939: motorTime = 0;
  1607  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1608  0567  01A6               	clrf	_motorTime
  1609  0568  01A7               	clrf	_motorTime+1
  1610                           
  1611                           ;main.c: 940: beepTime = 30;
  1612  0569  2D75               	goto	L13
  1613  056A                     l4180:	
  1614                           ;main.c: 941: }
  1615                           
  1616                           
  1617                           ;main.c: 942: else if(lowBatFlag == 0)
  1618  056A  0839               	movf	_lowBatFlag,w
  1619  056B  1D03               	btfss	3,2
  1620  056C  2D77               	goto	l4190
  1621  056D  30C8               	movlw	200
  1622                           
  1623                           ;main.c: 943: {
  1624                           ;main.c: 944: workStep = 1;
  1625  056E  01C8               	clrf	_workStep
  1626  056F  0AC8               	incf	_workStep,f
  1627                           
  1628                           ;main.c: 945: showWorkStepTime = 200;
  1629  0570  00BD               	movwf	_showWorkStepTime
  1630  0571  301E               	movlw	30
  1631                           
  1632                           ;main.c: 946: showOffTime = 0;
  1633  0572  01BA               	clrf	_showOffTime
  1634  0573  01A8               	clrf	_count1200s
  1635  0574  01A9               	clrf	_count1200s+1
  1636  0575                     L13:	
  1637                           
  1638                           ;main.c: 948: beepTime = 30;
  1639  0575  00B6               	movwf	_beepTime
  1640                           
  1641                           ;main.c: 949: }
  1642  0576  2D8A               	goto	l4208
  1643  0577                     l4190:	
  1644                           
  1645                           ;main.c: 950: else
  1646                           ;main.c: 951: {
  1647                           ;main.c: 952: showBatStep = 0;
  1648  0577  01FB               	clrf	_showBatStep
  1649  0578                     l4192:	
  1650                           
  1651                           ;main.c: 953: showOffTime = 200;
  1652  0578  30C8               	movlw	200
  1653  0579  00BA               	movwf	_showOffTime
  1654  057A  2D8A               	goto	l4208
  1655  057B                     l4194:	
  1656                           
  1657                           ;main.c: 956: else if(kclick == 1)
  1658  057B  0B73               	decfsz	keyCtr@kclick,w
  1659  057C  2D8A               	goto	l4208
  1660                           
  1661                           ;main.c: 957: {
  1662                           ;main.c: 958: if(workStep > 0)
  1663  057D  0848               	movf	_workStep,w
  1664  057E  1903               	btfsc	3,2
  1665  057F  2D78               	goto	l4192
  1666                           
  1667                           ;main.c: 959: {
  1668                           ;main.c: 960: if(++workStep > 3)
  1669  0580  3004               	movlw	4
  1670  0581  0AC8               	incf	_workStep,f
  1671  0582  0248               	subwf	_workStep,w
  1672  0583  1C03               	skipc
  1673  0584  2D87               	goto	l4202
  1674                           
  1675                           ;main.c: 961: {
  1676                           ;main.c: 962: workStep = 1;
  1677  0585  01C8               	clrf	_workStep
  1678  0586  0AC8               	incf	_workStep,f
  1679  0587                     l4202:	
  1680                           
  1681                           ;main.c: 963: }
  1682                           ;main.c: 964: showWorkStepTime = 200;
  1683  0587  30C8               	movlw	200
  1684  0588  00BD               	movwf	_showWorkStepTime
  1685                           
  1686                           ;main.c: 965: tempCheckTime = 0;
  1687  0589  01BB               	clrf	_tempCheckTime
  1688  058A                     l4208:	
  1689                           ;main.c: 966: }
  1690                           
  1691                           
  1692                           ;main.c: 970: }
  1693                           ;main.c: 971: }
  1694                           ;main.c: 972: kclick = keyRead2(0x80 & (~PORTA));
  1695  058A  1683               	bsf	3,5	;RP0=1, select bank1
  1696  058B  0906               	comf	6,w	;volatile
  1697  058C  3980               	andlw	128
  1698  058D  25DF  118A         	fcall	_keyRead2
  1699  058F  00F3               	movwf	keyCtr@kclick
  1700                           
  1701                           ;main.c: 973: if(kclick == 1 && workStep > 0)
  1702  0590  0B73               	decfsz	keyCtr@kclick,w
  1703  0591  2DA5               	goto	l4224
  1704  0592  0848               	movf	_workStep,w
  1705  0593  1903               	btfsc	3,2
  1706  0594  2DA5               	goto	l4224
  1707  0595  30E7               	movlw	231
  1708                           
  1709                           ;main.c: 974: {
  1710                           ;main.c: 975: zfStep = 1;
  1711  0596  01B7               	clrf	_zfStep
  1712  0597  0AB7               	incf	_zfStep,f
  1713                           
  1714                           ;main.c: 976: PORTA &= 0xE7;
  1715                           
  1716                           ;main.c: 977: if(motorTime < 800)
  1717  0598  2607  118A         	fcall	PL10	;call to abstracted procedure
  1718  059A  1903               	skipnz
  1719  059B  0226               	subwf	_motorTime,w
  1720  059C  1803               	skipnc
  1721  059D  2DA3               	goto	l4222
  1722                           
  1723                           ;main.c: 978: {
  1724                           ;main.c: 979: motorTime = 1610;
  1725  059E  304A               	movlw	74
  1726  059F  00A6               	movwf	_motorTime
  1727  05A0  3006               	movlw	6
  1728  05A1  00A7               	movwf	_motorTime+1
  1729                           
  1730                           ;main.c: 980: }
  1731  05A2  2DA5               	goto	l4224
  1732  05A3                     l4222:	
  1733                           
  1734                           ;main.c: 981: else
  1735                           ;main.c: 982: {
  1736                           ;main.c: 983: motorTime = 0;
  1737  05A3  01A6               	clrf	_motorTime
  1738  05A4  01A7               	clrf	_motorTime+1
  1739  05A5                     l4224:	
  1740                           
  1741                           ;main.c: 985: }
  1742                           ;main.c: 986: }
  1743                           ;main.c: 987: kclick = keyRead3(0x01 & (~PORTA));
  1744  05A5  1683               	bsf	3,5	;RP0=1, select bank1
  1745  05A6  0906               	comf	6,w	;volatile
  1746  05A7  3901               	andlw	1
  1747  05A8  25F3  118A         	fcall	_keyRead3
  1748  05AA  00F3               	movwf	keyCtr@kclick
  1749                           
  1750                           ;main.c: 988: if(kclick == 1 && workStep > 0)
  1751  05AB  0B73               	decfsz	keyCtr@kclick,w
  1752  05AC  0008               	return
  1753  05AD  0848               	movf	_workStep,w
  1754  05AE  1903               	btfsc	3,2
  1755  05AF  0008               	return
  1756                           
  1757                           ;main.c: 989: {
  1758                           ;main.c: 990: zfStep = 2;
  1759  05B0  3002               	movlw	2
  1760  05B1  00B7               	movwf	_zfStep
  1761                           
  1762                           ;main.c: 991: PORTA &= 0xE7;
  1763  05B2  30E7               	movlw	231
  1764                           
  1765                           ;main.c: 992: if(motorTime < 800)
  1766  05B3  2607  118A         	fcall	PL10	;call to abstracted procedure
  1767  05B5  1903               	skipnz
  1768  05B6  0226               	subwf	_motorTime,w
  1769  05B7  1803               	skipnc
  1770  05B8  2DBE               	goto	l4238
  1771                           
  1772                           ;main.c: 993: {
  1773                           ;main.c: 994: motorTime = 1610;
  1774  05B9  304A               	movlw	74
  1775  05BA  00A6               	movwf	_motorTime
  1776  05BB  3006               	movlw	6
  1777  05BC  00A7               	movwf	_motorTime+1
  1778                           
  1779                           ;main.c: 995: }
  1780  05BD  0008               	return
  1781  05BE                     l4238:	
  1782                           
  1783                           ;main.c: 996: else
  1784                           ;main.c: 997: {
  1785                           ;main.c: 998: motorTime = 0;
  1786  05BE  01A6               	clrf	_motorTime
  1787  05BF  01A7               	clrf	_motorTime+1
  1788  05C0  0008               	return
  1789  05C1                     __end_of_keyCtr:	
  1790  05C1                     __ptext15:	
  1791 ;; *************** function _keyRead *****************
  1792 ;; Defined at:
  1793 ;;		line 848 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  keyStatus       1    wreg     unsigned char 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  keyStatus       1    2[COMMON] unsigned char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      unsigned char 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0
  1802 ;; Tracked objects:
  1803 ;;		On entry : 300/0
  1804 ;;		On exit  : 300/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1807 ;;      Params:         0       0       0       0
  1808 ;;      Locals:         1       0       0       0
  1809 ;;      Temps:          0       0       0       0
  1810 ;;      Totals:         1       0       0       0
  1811 ;;Total ram usage:        1 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    1
  1814 ;; This function calls:
  1815 ;;		Nothing
  1816 ;; This function is called by:
  1817 ;;		_keyCtr
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function _keyRead
  1823  05C1                     _keyRead:	
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1827                           ;keyRead@keyStatus stored from wreg
  1828  05C1  00F2               	movwf	keyRead@keyStatus
  1829                           
  1830                           ;main.c: 850: if(keyStatus)
  1831  05C2  0872               	movf	keyRead@keyStatus,w
  1832  05C3  3078               	movlw	120
  1833  05C4  1903               	btfsc	3,2
  1834  05C5  2DD3               	goto	L15
  1835                           
  1836                           ;main.c: 851: {
  1837                           ;main.c: 852: keyCount++;
  1838  05C6  0AC7               	incf	_keyCount,f
  1839                           
  1840                           ;main.c: 853: if(keyCount >= 120)
  1841  05C7  0247               	subwf	_keyCount,w
  1842  05C8  1C03               	skipc
  1843  05C9  3400               	retlw	0
  1844                           
  1845                           ;main.c: 854: {
  1846                           ;main.c: 855: keyCount = 120;
  1847  05CA  3078               	movlw	120
  1848  05CB  00C7               	movwf	_keyCount
  1849                           
  1850                           ;main.c: 856: if(longPressFlag == 0)
  1851  05CC  0844               	movf	_longPressFlag,w
  1852  05CD  1D03               	btfss	3,2
  1853  05CE  3400               	retlw	0
  1854  05CF  3002               	movlw	2
  1855                           
  1856                           ;main.c: 857: {
  1857                           ;main.c: 858: longPressFlag = 1;
  1858  05D0  01C4               	clrf	_longPressFlag
  1859  05D1  0AC4               	incf	_longPressFlag,f
  1860                           
  1861                           ;main.c: 859: return 2;
  1862  05D2  0008               	return
  1863  05D3                     L15:	
  1864                           ;main.c: 863: else
  1865                           ;main.c: 864: {
  1866                           ;main.c: 865: if(keyCount >= 120)
  1867                           
  1868  05D3  0247               	subwf	_keyCount,w
  1869  05D4  1C03               	skipc
  1870  05D5  2DD9               	goto	l3764
  1871                           
  1872                           ;main.c: 866: {
  1873                           ;main.c: 867: keyCount = 0;
  1874  05D6  01C7               	clrf	_keyCount
  1875  05D7                     L14:	
  1876                           
  1877                           ;main.c: 868: longPressFlag = 0;
  1878  05D7  01C4               	clrf	_longPressFlag
  1879                           
  1880                           ;main.c: 869: return 0;
  1881  05D8  3400               	retlw	0
  1882  05D9                     l3764:	
  1883                           
  1884                           ;main.c: 871: else if(keyCount >= 5)
  1885  05D9  3005               	movlw	5
  1886  05DA  0247               	subwf	_keyCount,w
  1887                           
  1888                           ;main.c: 872: {
  1889                           ;main.c: 873: keyCount = 0;
  1890  05DB  01C7               	clrf	_keyCount
  1891  05DC  1803               	btfsc	3,0
  1892                           
  1893                           ;main.c: 874: return 1;
  1894  05DD  3401               	retlw	1
  1895  05DE  2DD7               	goto	L14
  1896  05DF                     __end_of_keyRead:	
  1897  05DF                     __ptext14:	
  1898 ;; *************** function _keyRead2 *****************
  1899 ;; Defined at:
  1900 ;;		line 882 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  keyStatus       1    wreg     unsigned char 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  keyStatus       1    2[COMMON] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      unsigned char 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 300/100
  1911 ;;		On exit  : 300/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1914 ;;      Params:         0       0       0       0
  1915 ;;      Locals:         1       0       0       0
  1916 ;;      Temps:          0       0       0       0
  1917 ;;      Totals:         1       0       0       0
  1918 ;;Total ram usage:        1 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    1
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_keyCtr
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _keyRead2
  1930  05DF                     _keyRead2:	
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _keyRead2: [wreg+status,2+status,0]
  1934                           ;keyRead2@keyStatus stored from wreg
  1935  05DF  00F2               	movwf	keyRead2@keyStatus
  1936                           
  1937                           ;main.c: 884: if(keyStatus)
  1938  05E0  0872               	movf	keyRead2@keyStatus,w
  1939  05E1  1903               	btfsc	3,2
  1940  05E2  2DEC               	goto	l3786
  1941                           
  1942                           ;main.c: 885: {
  1943                           ;main.c: 886: keyCount2++;
  1944  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  1945  05E4  3078               	movlw	120
  1946  05E5  0AC6               	incf	_keyCount2,f
  1947                           
  1948                           ;main.c: 887: if(keyCount2 >= 120)
  1949  05E6  0246               	subwf	_keyCount2,w
  1950  05E7  1C03               	skipc
  1951  05E8  3400               	retlw	0
  1952                           
  1953                           ;main.c: 888: {
  1954                           ;main.c: 889: keyCount2 = 120;
  1955  05E9  3078               	movlw	120
  1956  05EA  00C6               	movwf	_keyCount2
  1957  05EB  3400               	retlw	0
  1958  05EC                     l3786:	
  1959                           
  1960                           ;main.c: 892: else
  1961                           ;main.c: 893: {
  1962                           ;main.c: 894: if(keyCount2 >= 5)
  1963  05EC  3005               	movlw	5
  1964  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1965  05EE  0246               	subwf	_keyCount2,w
  1966                           
  1967                           ;main.c: 895: {
  1968                           ;main.c: 896: keyCount2 = 0;
  1969  05EF  01C6               	clrf	_keyCount2
  1970  05F0  1803               	btfsc	3,0
  1971                           
  1972                           ;main.c: 897: return 1;
  1973  05F1  3401               	retlw	1
  1974  05F2  3400               	retlw	0
  1975  05F3                     __end_of_keyRead2:	
  1976                           ;main.c: 900: }
  1977                           ;main.c: 901: return 0;
  1978                           
  1979                           ;main.c: 898: }
  1980                           ;main.c: 899: keyCount2 = 0;
  1981                           
  1982  05F3                     __ptext13:	
  1983 ;; *************** function _keyRead3 *****************
  1984 ;; Defined at:
  1985 ;;		line 904 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  keyStatus       1    wreg     unsigned char 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  keyStatus       1    2[COMMON] unsigned char 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      unsigned char 
  1992 ;; Registers used:
  1993 ;;		wreg, status,2, status,0
  1994 ;; Tracked objects:
  1995 ;;		On entry : 300/100
  1996 ;;		On exit  : 300/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1999 ;;      Params:         0       0       0       0
  2000 ;;      Locals:         1       0       0       0
  2001 ;;      Temps:          0       0       0       0
  2002 ;;      Totals:         1       0       0       0
  2003 ;;Total ram usage:        1 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    1
  2006 ;; This function calls:
  2007 ;;		Nothing
  2008 ;; This function is called by:
  2009 ;;		_keyCtr
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _keyRead3
  2015  05F3                     _keyRead3:	
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _keyRead3: [wreg+status,2+status,0]
  2019                           ;keyRead3@keyStatus stored from wreg
  2020  05F3  00F2               	movwf	keyRead3@keyStatus
  2021                           
  2022                           ;main.c: 906: if(keyStatus)
  2023  05F4  0872               	movf	keyRead3@keyStatus,w
  2024  05F5  1903               	btfsc	3,2
  2025  05F6  2E00               	goto	l3808
  2026                           
  2027                           ;main.c: 907: {
  2028                           ;main.c: 908: keyCount3++;
  2029  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  2030  05F8  3078               	movlw	120
  2031  05F9  0AC5               	incf	_keyCount3,f
  2032                           
  2033                           ;main.c: 909: if(keyCount3 >= 120)
  2034  05FA  0245               	subwf	_keyCount3,w
  2035  05FB  1C03               	skipc
  2036  05FC  3400               	retlw	0
  2037                           
  2038                           ;main.c: 910: {
  2039                           ;main.c: 911: keyCount3 = 120;
  2040  05FD  3078               	movlw	120
  2041  05FE  00C5               	movwf	_keyCount3
  2042  05FF  3400               	retlw	0
  2043  0600                     l3808:	
  2044                           
  2045                           ;main.c: 914: else
  2046                           ;main.c: 915: {
  2047                           ;main.c: 916: if(keyCount3 >= 5)
  2048  0600  3005               	movlw	5
  2049  0601  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0602  0245               	subwf	_keyCount3,w
  2051                           
  2052                           ;main.c: 917: {
  2053                           ;main.c: 918: keyCount3 = 0;
  2054  0603  01C5               	clrf	_keyCount3
  2055  0604  1803               	btfsc	3,0
  2056                           
  2057                           ;main.c: 919: return 1;
  2058  0605  3401               	retlw	1
  2059  0606  3400               	retlw	0
  2060  0607                     __end_of_keyRead3:	
  2061                           ;main.c: 922: }
  2062                           ;main.c: 923: return 0;
  2063                           
  2064                           ;main.c: 920: }
  2065                           ;main.c: 921: keyCount3 = 0;
  2066                           
  2067  0607                     PL10:	
  2068  0607  1683               	bsf	3,5	;RP0=1, select bank1
  2069  0608  0586               	andwf	6,f	;volatile
  2070  0609  3003               	movlw	3
  2071  060A  1283               	bcf	3,5	;RP0=0, select bank0
  2072  060B  0227               	subwf	_motorTime+1,w
  2073  060C  3420               	retlw	32
  2074  060D                     __end_ofPL10:	
  2075  060D                     PL16:	
  2076  060D  01A8               	clrf	_count1200s
  2077  060E  01A9               	clrf	_count1200s+1
  2078  060F  01C8               	clrf	_workStep
  2079  0610  01BD               	clrf	_showWorkStepTime
  2080  0611  0008               	return
  2081  0612                     __end_ofPL16:	
  2082                           
  2083                           	psect	text16
  2084  001F                     __ptext16:	
  2085 ;; *************** function _chrgCtr *****************
  2086 ;; Defined at:
  2087 ;;		line 524 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0, pclath, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 300/0
  2098 ;;		On exit  : 300/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2101 ;;      Params:         0       0       0       0
  2102 ;;      Locals:         0       0       0       0
  2103 ;;      Temps:          0       0       0       0
  2104 ;;      Totals:         0       0       0       0
  2105 ;;Total ram usage:        0 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    2
  2108 ;; This function calls:
  2109 ;;		_pwm1Stop
  2110 ;;		_setBatLed
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _chrgCtr
  2118  001F                     _chrgCtr:	
  2119                           
  2120                           ;main.c: 526: if(0x02 & PORTA)
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  2124  001F  1683               	bsf	3,5	;RP0=1, select bank1
  2125  0020  1C86               	btfss	6,1	;volatile
  2126  0021  2861               	goto	l3974
  2127                           
  2128                           ;main.c: 527: {
  2129                           ;main.c: 528: chrgFlag = 1;
  2130  0022  1283               	bcf	3,5	;RP0=0, select bank0
  2131  0023  01B4               	clrf	_chrgFlag
  2132  0024  0AB4               	incf	_chrgFlag,f
  2133                           
  2134                           ;main.c: 529: workStep = 0;
  2135  0025  01C8               	clrf	_workStep
  2136                           
  2137                           ;main.c: 530: lowBatFlag = 0;
  2138  0026  01B9               	clrf	_lowBatFlag
  2139                           
  2140                           ;main.c: 531: pwm1Stop();
  2141  0027  2206  118A         	fcall	_pwm1Stop
  2142                           
  2143                           ;main.c: 532: showNumBat &= 0x0F;
  2144  0029  300F               	movlw	15
  2145  002A  1283               	bcf	3,5	;RP0=0, select bank0
  2146  002B  05DD               	andwf	_showNumBat,f
  2147  002C  3005               	movlw	5
  2148                           
  2149                           ;main.c: 533: firstTime = 0;
  2150  002D  01DE               	clrf	_firstTime
  2151                           
  2152                           ;main.c: 534: if(showBatStep > 4)
  2153  002E  027B               	subwf	_showBatStep,w
  2154  002F  1C03               	skipc
  2155  0030  2833               	goto	l3950
  2156                           
  2157                           ;main.c: 535: {
  2158                           ;main.c: 536: batLedStep = 4;
  2159  0031  3004               	movlw	4
  2160  0032  2843               	goto	L17
  2161  0033                     l3950:	
  2162                           ;main.c: 537: }
  2163                           
  2164                           
  2165                           ;main.c: 538: else if(count1s < 50)
  2166  0033  3032               	movlw	50
  2167  0034  024A               	subwf	_count1s,w
  2168                           
  2169                           ;main.c: 539: {
  2170                           ;main.c: 540: if(showBatStep > 0)
  2171  0035  087B               	movf	_showBatStep,w
  2172  0036  1803               	skipnc
  2173  0037  283F               	goto	L18
  2174  0038  1903               	btfsc	3,2
  2175  0039  283C               	goto	l1068
  2176                           
  2177                           ;main.c: 541: {
  2178                           ;main.c: 542: batLedStep = showBatStep;
  2179  003A  087B               	movf	_showBatStep,w
  2180  003B  2843               	goto	L17
  2181  003C                     l1068:	
  2182                           ;main.c: 543: }
  2183                           
  2184                           
  2185                           ;main.c: 544: else
  2186                           ;main.c: 545: {
  2187                           ;main.c: 546: batLedStep = 1;
  2188  003C  01C2               	clrf	_batLedStep
  2189  003D  0AC2               	incf	_batLedStep,f
  2190  003E  2846               	goto	l1066
  2191  003F                     L18:	
  2192                           ;main.c: 549: else
  2193                           ;main.c: 550: {
  2194                           ;main.c: 551: if(showBatStep > 0)
  2195                           
  2196  003F  1903               	btfsc	3,2
  2197  0040  2845               	goto	l3960
  2198                           
  2199                           ;main.c: 552: {
  2200                           ;main.c: 553: batLedStep = showBatStep - 1;
  2201  0041  087B               	movf	_showBatStep,w
  2202  0042  3EFF               	addlw	255
  2203  0043                     L17:	
  2204  0043  00C2               	movwf	_batLedStep
  2205                           
  2206                           ;main.c: 554: }
  2207  0044  2846               	goto	l1066
  2208  0045                     l3960:	
  2209                           
  2210                           ;main.c: 555: else
  2211                           ;main.c: 556: {
  2212                           ;main.c: 557: batLedStep = 0;
  2213  0045  01C2               	clrf	_batLedStep
  2214  0046                     l1066:	
  2215                           
  2216                           ;main.c: 558: }
  2217                           ;main.c: 559: }
  2218                           ;main.c: 560: showNumAShi = 0;
  2219  0046  01DC               	clrf	_showNumAShi
  2220                           
  2221                           ;main.c: 561: showNumAge = 0;
  2222  0047  01DB               	clrf	_showNumAge
  2223                           
  2224                           ;main.c: 562: showNumBShi = 0;
  2225  0048  01DA               	clrf	_showNumBShi
  2226                           
  2227                           ;main.c: 563: setBatLed(batLedStep);
  2228  0049  0842               	movf	_batLedStep,w
  2229  004A  21CF  118A         	fcall	_setBatLed
  2230                           
  2231                           ;main.c: 564: if(showBatStep < batStep)
  2232  004C  0843               	movf	_batStep,w
  2233  004D  027B               	subwf	_showBatStep,w
  2234  004E  1803               	skipnc
  2235  004F  285E               	goto	l3972
  2236                           
  2237                           ;main.c: 565: {
  2238                           ;main.c: 566: if(++chanceBatTime > 10000)
  2239  0050  0AAC               	incf	_chanceBatTime,f
  2240  0051  1903               	skipnz
  2241  0052  0AAD               	incf	_chanceBatTime+1,f
  2242  0053  3027               	movlw	39
  2243  0054  022D               	subwf	_chanceBatTime+1,w
  2244  0055  3011               	movlw	17
  2245  0056  1903               	skipnz
  2246  0057  022C               	subwf	_chanceBatTime,w
  2247  0058  1C03               	skipc
  2248  0059  0008               	return
  2249                           
  2250                           ;main.c: 567: {
  2251                           ;main.c: 568: chanceBatTime = 0;
  2252  005A  01AC               	clrf	_chanceBatTime
  2253  005B  01AD               	clrf	_chanceBatTime+1
  2254                           
  2255                           ;main.c: 569: showBatStep++;
  2256  005C  0AFB               	incf	_showBatStep,f
  2257  005D  0008               	return
  2258  005E                     l3972:	
  2259                           
  2260                           ;main.c: 572: else
  2261                           ;main.c: 573: {
  2262                           ;main.c: 574: chanceBatTime = 0;
  2263  005E  01AC               	clrf	_chanceBatTime
  2264  005F  01AD               	clrf	_chanceBatTime+1
  2265  0060  0008               	return
  2266  0061                     l3974:	
  2267                           
  2268                           ;main.c: 577: else
  2269                           ;main.c: 578: {
  2270                           ;main.c: 579: chrgFlag = 0;
  2271  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0062  3002               	movlw	2
  2273  0063  01B4               	clrf	_chrgFlag
  2274                           
  2275                           ;main.c: 580: if(showBatStep > 1 && showBatStep > batStep)
  2276  0064  027B               	subwf	_showBatStep,w
  2277  0065  1C03               	skipc
  2278  0066  285E               	goto	l3972
  2279  0067  087B               	movf	_showBatStep,w
  2280  0068  0243               	subwf	_batStep,w
  2281  0069  1803               	skipnc
  2282  006A  285E               	goto	l3972
  2283                           
  2284                           ;main.c: 581: {
  2285                           ;main.c: 582: if(++chanceBatTime > 30000)
  2286  006B  0AAC               	incf	_chanceBatTime,f
  2287  006C  1903               	skipnz
  2288  006D  0AAD               	incf	_chanceBatTime+1,f
  2289  006E  3075               	movlw	117
  2290  006F  022D               	subwf	_chanceBatTime+1,w
  2291  0070  3031               	movlw	49
  2292  0071  1903               	skipnz
  2293  0072  022C               	subwf	_chanceBatTime,w
  2294  0073  1C03               	skipc
  2295  0074  0008               	return
  2296                           
  2297                           ;main.c: 583: {
  2298                           ;main.c: 584: chanceBatTime = 0;
  2299  0075  01AC               	clrf	_chanceBatTime
  2300  0076  01AD               	clrf	_chanceBatTime+1
  2301                           
  2302                           ;main.c: 585: showBatStep--;
  2303  0077  03FB               	decf	_showBatStep,f
  2304  0078  0008               	return
  2305  0079                     __end_of_chrgCtr:	
  2306  0079                     __ptext1:	
  2307 ;; *************** function _workCtr *****************
  2308 ;; Defined at:
  2309 ;;		line 631 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2318 ;; Tracked objects:
  2319 ;;		On entry : 300/0
  2320 ;;		On exit  : 300/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2323 ;;      Params:         0       0       0       0
  2324 ;;      Locals:         0       0       0       0
  2325 ;;      Temps:          1       0       0       0
  2326 ;;      Totals:         1       0       0       0
  2327 ;;Total ram usage:        1 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    4
  2330 ;; This function calls:
  2331 ;;		___lbmod
  2332 ;;		_pwm1Init
  2333 ;;		_pwm1Stop
  2334 ;;		_setBatLed
  2335 ;;		_setTempLed
  2336 ;;		_updateTemp
  2337 ;; This function is called by:
  2338 ;;		_main
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           
  2343                           ;psect for function _workCtr
  2344  0079                     _workCtr:	
  2345                           
  2346                           ;main.c: 633: if(count1200s >= 1200)
  2347                           
  2348                           ;incstack = 0
  2349                           ; Regs used in _workCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2350  0079  3004               	movlw	4
  2351  007A  0229               	subwf	_count1200s+1,w
  2352  007B  30B0               	movlw	176
  2353  007C  1903               	skipnz
  2354  007D  0228               	subwf	_count1200s,w
  2355  007E  1C03               	skipc
  2356  007F  2888               	goto	l4456
  2357                           
  2358                           ;main.c: 634: {
  2359                           ;main.c: 635: count1200s = 0;
  2360                           
  2361                           ;main.c: 636: workStep = 0;
  2362                           
  2363                           ;main.c: 637: showWorkStepTime = 0;
  2364  0080  118A  260D  118A   	fcall	PL16	;call to abstracted procedure
  2365                           
  2366                           ;main.c: 638: pwm1Stop();
  2367  0083  2206  118A         	fcall	_pwm1Stop
  2368                           
  2369                           ;main.c: 639: PORTB &= 0xF0;
  2370  0085  30F0               	movlw	240
  2371  0086  1283               	bcf	3,5	;RP0=0, select bank0
  2372  0087  0586               	andwf	6,f	;volatile
  2373  0088                     l4456:	
  2374                           
  2375                           ;main.c: 640: }
  2376                           ;main.c: 641: if(motorTime > 0)
  2377  0088  0826               	movf	_motorTime,w
  2378  0089  0427               	iorwf	_motorTime+1,w
  2379  008A  1903               	btfsc	3,2
  2380  008B  28BB               	goto	l4474
  2381                           
  2382                           ;main.c: 642: {
  2383                           ;main.c: 643: if(motorTime >= 800 && motorTime < 1580)
  2384  008C  3003               	movlw	3
  2385  008D  0227               	subwf	_motorTime+1,w
  2386  008E  3020               	movlw	32
  2387  008F  1903               	skipnz
  2388  0090  0226               	subwf	_motorTime,w
  2389  0091  1C03               	skipc
  2390  0092  28A6               	goto	l4470
  2391  0093  3006               	movlw	6
  2392  0094  0227               	subwf	_motorTime+1,w
  2393  0095  302C               	movlw	44
  2394  0096  1903               	skipnz
  2395  0097  0226               	subwf	_motorTime,w
  2396  0098  1803               	skipnc
  2397  0099  28A6               	goto	l4470
  2398                           
  2399                           ;main.c: 644: {
  2400                           ;main.c: 645: if(zfStep == 1)
  2401  009A  0B37               	decfsz	_zfStep,w
  2402  009B  289F               	goto	l4466
  2403                           
  2404                           ;main.c: 646: {
  2405                           ;main.c: 647: PORTA |= 0x08;
  2406  009C  1683               	bsf	3,5	;RP0=1, select bank1
  2407  009D  1586               	bsf	6,3	;volatile
  2408                           
  2409                           ;main.c: 648: }
  2410  009E  28A9               	goto	l1100
  2411  009F                     l4466:	
  2412                           
  2413                           ;main.c: 649: else if(zfStep == 2)
  2414  009F  3002               	movlw	2
  2415  00A0  0637               	xorwf	_zfStep,w
  2416  00A1  1D03               	btfss	3,2
  2417  00A2  28A9               	goto	l1100
  2418                           
  2419                           ;main.c: 650: {
  2420                           ;main.c: 651: PORTA |= 0x10;
  2421  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  2422  00A4  1606               	bsf	6,4	;volatile
  2423  00A5  28A9               	goto	l1100
  2424  00A6                     l4470:	
  2425                           
  2426                           ;main.c: 654: else
  2427                           ;main.c: 655: {
  2428                           ;main.c: 656: PORTA &= 0xE7;
  2429  00A6  30E7               	movlw	231
  2430  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  2431  00A8  0586               	andwf	6,f	;volatile
  2432  00A9                     l1100:	
  2433                           
  2434                           ;main.c: 657: }
  2435                           ;main.c: 658: if(--motorTime == 0)
  2436  00A9  3001               	movlw	1
  2437  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  2438  00AB  02A6               	subwf	_motorTime,f
  2439  00AC  1C03               	skipc
  2440  00AD  03A7               	decf	_motorTime+1,f
  2441  00AE  0826               	movf	_motorTime,w
  2442  00AF  0427               	iorwf	_motorTime+1,w
  2443  00B0  1D03               	btfss	3,2
  2444  00B1  28B4               	goto	l1101
  2445                           
  2446                           ;main.c: 659: {
  2447                           ;main.c: 660: beepTime = 180;
  2448  00B2  30B4               	movlw	180
  2449  00B3  00B6               	movwf	_beepTime
  2450  00B4                     l1101:	
  2451                           
  2452                           ;main.c: 661: }
  2453                           ;main.c: 662: if(motorTime < 800)
  2454  00B4  3003               	movlw	3
  2455  00B5  0227               	subwf	_motorTime+1,w
  2456  00B6  3020               	movlw	32
  2457  00B7  1903               	skipnz
  2458  00B8  0226               	subwf	_motorTime,w
  2459  00B9  1803               	skipnc
  2460  00BA  28BE               	goto	l1103
  2461  00BB                     l4474:	
  2462                           
  2463                           ;main.c: 663: {
  2464                           ;main.c: 664: PORTA &= 0xE7;
  2465  00BB  30E7               	movlw	231
  2466  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  2467  00BD  0586               	andwf	6,f	;volatile
  2468  00BE                     l1103:	
  2469                           
  2470                           ;main.c: 671: }
  2471                           ;main.c: 672: if(beepTime > 0)
  2472  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  2473  00BF  0836               	movf	_beepTime,w
  2474  00C0  1903               	btfsc	3,2
  2475  00C1  28D0               	goto	l4484
  2476  00C2  303C               	movlw	60
  2477                           
  2478                           ;main.c: 673: {
  2479                           ;main.c: 674: beepTime--;
  2480  00C3  03B6               	decf	_beepTime,f
  2481                           
  2482                           ;main.c: 675: if(beepTime % 60 < 30)
  2483  00C4  00F2               	movwf	___lbmod@divisor
  2484  00C5  0836               	movf	_beepTime,w
  2485  00C6  21B3  118A         	fcall	___lbmod
  2486  00C8  00F9               	movwf	??_workCtr
  2487  00C9  301E               	movlw	30
  2488  00CA  0279               	subwf	??_workCtr,w
  2489                           
  2490                           ;main.c: 676: {
  2491                           ;main.c: 677: beepFlag = 1;
  2492  00CB  01B5               	clrf	_beepFlag
  2493  00CC  1803               	skipnc
  2494  00CD  28D1               	goto	l4488
  2495  00CE  0AB5               	incf	_beepFlag,f
  2496                           
  2497                           ;main.c: 678: }
  2498  00CF  28D1               	goto	l4488
  2499  00D0                     l4484:	
  2500                           
  2501                           ;main.c: 679: else
  2502                           ;main.c: 680: {
  2503                           ;main.c: 681: beepFlag = 0;
  2504  00D0  01B5               	clrf	_beepFlag
  2505  00D1                     l4488:	
  2506                           
  2507                           ;main.c: 687: }
  2508                           ;main.c: 688: updateTemp();
  2509  00D1  2209  118A         	fcall	_updateTemp
  2510                           
  2511                           ;main.c: 689: if(showWorkStepTime > 0)
  2512  00D3  083D               	movf	_showWorkStepTime,w
  2513  00D4  1D03               	btfss	3,2
  2514                           
  2515                           ;main.c: 690: {
  2516                           ;main.c: 691: showWorkStepTime--;
  2517  00D5  03BD               	decf	_showWorkStepTime,f
  2518                           
  2519                           ;main.c: 692: }
  2520                           ;main.c: 693: if(showOffTime > 0)
  2521  00D6  083A               	movf	_showOffTime,w
  2522  00D7  1D03               	btfss	3,2
  2523                           
  2524                           ;main.c: 694: {
  2525                           ;main.c: 695: showOffTime--;
  2526  00D8  03BA               	decf	_showOffTime,f
  2527                           
  2528                           ;main.c: 696: }
  2529                           ;main.c: 697: if(firstTime > 0)
  2530  00D9  085E               	movf	_firstTime,w
  2531  00DA  1903               	btfsc	3,2
  2532  00DB  28F4               	goto	l4518
  2533                           
  2534                           ;main.c: 698: {
  2535                           ;main.c: 699: firstTime--;
  2536  00DC  03DE               	decf	_firstTime,f
  2537                           
  2538                           ;main.c: 700: if(showBatStep < batStep)
  2539  00DD  0843               	movf	_batStep,w
  2540  00DE  027B               	subwf	_showBatStep,w
  2541  00DF  1803               	skipnc
  2542  00E0  28E6               	goto	l4506
  2543                           
  2544                           ;main.c: 701: {
  2545                           ;main.c: 702: if(++firstShowBatTime > 5)
  2546  00E1  3006               	movlw	6
  2547  00E2  0AB8               	incf	_firstShowBatTime,f
  2548  00E3  0238               	subwf	_firstShowBatTime,w
  2549  00E4  1C03               	skipc
  2550  00E5  28E8               	goto	l4510
  2551  00E6                     l4506:	
  2552                           
  2553                           ;main.c: 703: {
  2554                           ;main.c: 704: showBatStep = batStep;
  2555  00E6  0843               	movf	_batStep,w
  2556  00E7  00FB               	movwf	_showBatStep
  2557  00E8                     l4510:	
  2558                           
  2559                           ;main.c: 710: }
  2560                           ;main.c: 711: if(showBatStep < 1)
  2561  00E8  087B               	movf	_showBatStep,w
  2562  00E9  1D03               	btfss	3,2
  2563  00EA  28ED               	goto	l4514
  2564                           
  2565                           ;main.c: 712: {
  2566                           ;main.c: 713: showBatStep = 1;
  2567  00EB  01FB               	clrf	_showBatStep
  2568  00EC  0AFB               	incf	_showBatStep,f
  2569  00ED                     l4514:	
  2570                           
  2571                           ;main.c: 714: }
  2572                           ;main.c: 715: if(showTmepNum < tempNum)
  2573  00ED  0841               	movf	_tempNum,w
  2574  00EE  023F               	subwf	_showTmepNum,w
  2575  00EF  1803               	skipnc
  2576  00F0  0008               	return
  2577                           
  2578                           ;main.c: 716: showTmepNum = tempNum;
  2579  00F1  0841               	movf	_tempNum,w
  2580  00F2  00BF               	movwf	_showTmepNum
  2581                           
  2582                           ;main.c: 717: }
  2583  00F3  0008               	return
  2584  00F4                     l4518:	
  2585                           
  2586                           ;main.c: 718: else if(workStep == 1)
  2587  00F4  0B48               	decfsz	_workStep,w
  2588  00F5  2912               	goto	l4544
  2589                           
  2590                           ;main.c: 719: {
  2591                           ;main.c: 720: showMaxTemp = 160;
  2592  00F6  30A0               	movlw	160
  2593  00F7  00D9               	movwf	_showMaxTemp
  2594                           
  2595                           ;main.c: 721: if(showWorkStepTime > 0)
  2596  00F8  083D               	movf	_showWorkStepTime,w
  2597                           
  2598                           ;main.c: 722: {
  2599                           ;main.c: 723: setTempLed(160);
  2600  00F9  30A0               	movlw	160
  2601  00FA  1903               	btfsc	3,2
  2602  00FB  2901               	goto	L4
  2603  00FC  217E  118A         	fcall	_setTempLed
  2604                           
  2605                           ;main.c: 724: maxTempNum = showTmepNum;
  2606  00FE  083F               	movf	_showTmepNum,w
  2607  00FF  00C0               	movwf	_maxTempNum
  2608                           
  2609                           ;main.c: 725: }
  2610  0100  290D               	goto	l4538
  2611  0101                     L4:	
  2612                           ;main.c: 726: else
  2613                           ;main.c: 727: {
  2614                           ;main.c: 728: if(maxTempNum < 160)
  2615                           
  2616  0101  0240               	subwf	_maxTempNum,w
  2617  0102  1803               	skipnc
  2618  0103  2906               	goto	l4532
  2619                           
  2620                           ;main.c: 729: {
  2621                           ;main.c: 730: setTempLed(maxTempNum);
  2622  0104  0840               	movf	_maxTempNum,w
  2623  0105  2907               	goto	L1
  2624  0106                     l4532:	
  2625                           ;main.c: 731: }
  2626                           
  2627                           
  2628                           ;main.c: 732: else
  2629                           ;main.c: 733: {
  2630                           ;main.c: 734: setTempLed(160);
  2631  0106  30A0               	movlw	160
  2632  0107                     L1:	
  2633  0107  217E  118A         	fcall	_setTempLed
  2634                           
  2635                           ;main.c: 735: }
  2636                           ;main.c: 736: if(maxTempNum < showTmepNum)
  2637  0109  083F               	movf	_showTmepNum,w
  2638  010A  0240               	subwf	_maxTempNum,w
  2639  010B  1C03               	btfss	3,0
  2640                           
  2641                           ;main.c: 737: {
  2642                           ;main.c: 738: maxTempNum++;
  2643  010C  0AC0               	incf	_maxTempNum,f
  2644  010D                     l4538:	
  2645                           
  2646                           ;main.c: 739: }
  2647                           ;main.c: 740: }
  2648                           ;main.c: 741: pwm1Init();
  2649  010D  21B0  118A         	fcall	_pwm1Init
  2650                           
  2651                           ;main.c: 750: showNumBat = 0x30;
  2652                           
  2653                           ;main.c: 751: setBatLed(showBatStep);
  2654  010F  23F5  118A         	fcall	PL12	;call to abstracted procedure
  2655  0111  29CF               	ljmp	_setBatLed
  2656  0112                     l4544:	
  2657                           ;main.c: 752: }
  2658                           
  2659                           
  2660                           ;main.c: 753: else if(workStep == 2)
  2661  0112  3002               	movlw	2
  2662  0113  0648               	xorwf	_workStep,w
  2663  0114  1D03               	btfss	3,2
  2664  0115  2932               	goto	l4570
  2665                           
  2666                           ;main.c: 754: {
  2667                           ;main.c: 755: showMaxTemp = 180;
  2668  0116  30B4               	movlw	180
  2669  0117  00D9               	movwf	_showMaxTemp
  2670                           
  2671                           ;main.c: 756: if(showWorkStepTime > 0)
  2672  0118  083D               	movf	_showWorkStepTime,w
  2673                           
  2674                           ;main.c: 757: {
  2675                           ;main.c: 758: setTempLed(180);
  2676  0119  30B4               	movlw	180
  2677  011A  1903               	btfsc	3,2
  2678  011B  2921               	goto	L5
  2679  011C  217E  118A         	fcall	_setTempLed
  2680                           
  2681                           ;main.c: 759: maxTempNum = showTmepNum;
  2682  011E  083F               	movf	_showTmepNum,w
  2683  011F  00C0               	movwf	_maxTempNum
  2684                           
  2685                           ;main.c: 760: }
  2686  0120  292D               	goto	l4564
  2687  0121                     L5:	
  2688                           ;main.c: 761: else
  2689                           ;main.c: 762: {
  2690                           ;main.c: 763: if(maxTempNum < 180)
  2691                           
  2692  0121  0240               	subwf	_maxTempNum,w
  2693  0122  1803               	skipnc
  2694  0123  2926               	goto	l4558
  2695                           
  2696                           ;main.c: 764: {
  2697                           ;main.c: 765: setTempLed(maxTempNum);
  2698  0124  0840               	movf	_maxTempNum,w
  2699  0125  2927               	goto	L2
  2700  0126                     l4558:	
  2701                           ;main.c: 766: }
  2702                           
  2703                           
  2704                           ;main.c: 767: else
  2705                           ;main.c: 768: {
  2706                           ;main.c: 769: setTempLed(180);
  2707  0126  30B4               	movlw	180
  2708  0127                     L2:	
  2709  0127  217E  118A         	fcall	_setTempLed
  2710                           
  2711                           ;main.c: 770: }
  2712                           ;main.c: 771: if(maxTempNum < showTmepNum)
  2713  0129  083F               	movf	_showTmepNum,w
  2714  012A  0240               	subwf	_maxTempNum,w
  2715  012B  1C03               	btfss	3,0
  2716                           
  2717                           ;main.c: 772: {
  2718                           ;main.c: 773: maxTempNum++;
  2719  012C  0AC0               	incf	_maxTempNum,f
  2720  012D                     l4564:	
  2721                           
  2722                           ;main.c: 774: }
  2723                           ;main.c: 775: }
  2724                           ;main.c: 776: pwm1Init();
  2725  012D  21B0  118A         	fcall	_pwm1Init
  2726                           
  2727                           ;main.c: 785: showNumBat = 0x30;
  2728                           
  2729                           ;main.c: 786: setBatLed(showBatStep);
  2730  012F  23F5  118A         	fcall	PL12	;call to abstracted procedure
  2731  0131  29CF               	ljmp	_setBatLed
  2732  0132                     l4570:	
  2733                           ;main.c: 787: }
  2734                           
  2735                           
  2736                           ;main.c: 788: else if(workStep == 3)
  2737  0132  3003               	movlw	3
  2738  0133  0648               	xorwf	_workStep,w
  2739  0134  1D03               	btfss	3,2
  2740  0135  2952               	goto	l4596
  2741                           
  2742                           ;main.c: 789: {
  2743                           ;main.c: 790: showMaxTemp = 200;
  2744  0136  30C8               	movlw	200
  2745  0137  00D9               	movwf	_showMaxTemp
  2746                           
  2747                           ;main.c: 791: if(showWorkStepTime > 0)
  2748  0138  083D               	movf	_showWorkStepTime,w
  2749                           
  2750                           ;main.c: 792: {
  2751                           ;main.c: 793: setTempLed(200);
  2752  0139  30C8               	movlw	200
  2753  013A  1903               	btfsc	3,2
  2754  013B  2941               	goto	L6
  2755  013C  217E  118A         	fcall	_setTempLed
  2756                           
  2757                           ;main.c: 794: maxTempNum = showTmepNum;
  2758  013E  083F               	movf	_showTmepNum,w
  2759  013F  00C0               	movwf	_maxTempNum
  2760                           
  2761                           ;main.c: 795: }
  2762  0140  294D               	goto	l4590
  2763  0141                     L6:	
  2764                           ;main.c: 796: else
  2765                           ;main.c: 797: {
  2766                           ;main.c: 798: if(maxTempNum < 200)
  2767                           
  2768  0141  0240               	subwf	_maxTempNum,w
  2769  0142  1803               	skipnc
  2770  0143  2946               	goto	l4584
  2771                           
  2772                           ;main.c: 799: {
  2773                           ;main.c: 800: setTempLed(maxTempNum);
  2774  0144  0840               	movf	_maxTempNum,w
  2775  0145  2947               	goto	L3
  2776  0146                     l4584:	
  2777                           ;main.c: 801: }
  2778                           
  2779                           
  2780                           ;main.c: 802: else
  2781                           ;main.c: 803: {
  2782                           ;main.c: 804: setTempLed(200);
  2783  0146  30C8               	movlw	200
  2784  0147                     L3:	
  2785  0147  217E  118A         	fcall	_setTempLed
  2786                           
  2787                           ;main.c: 805: }
  2788                           ;main.c: 806: if(maxTempNum < showTmepNum)
  2789  0149  083F               	movf	_showTmepNum,w
  2790  014A  0240               	subwf	_maxTempNum,w
  2791  014B  1C03               	btfss	3,0
  2792                           
  2793                           ;main.c: 807: {
  2794                           ;main.c: 808: maxTempNum++;
  2795  014C  0AC0               	incf	_maxTempNum,f
  2796  014D                     l4590:	
  2797                           
  2798                           ;main.c: 809: }
  2799                           ;main.c: 810: }
  2800                           ;main.c: 811: pwm1Init();
  2801  014D  21B0  118A         	fcall	_pwm1Init
  2802                           
  2803                           ;main.c: 820: showNumBat = 0x30;
  2804                           
  2805                           ;main.c: 821: setBatLed(showBatStep);
  2806  014F  23F5  118A         	fcall	PL12	;call to abstracted procedure
  2807  0151  29CF               	ljmp	_setBatLed
  2808  0152                     l4596:	
  2809                           ;main.c: 822: }
  2810                           
  2811                           
  2812                           ;main.c: 823: else if(showOffTime > 0)
  2813  0152  083A               	movf	_showOffTime,w
  2814  0153  1903               	btfsc	3,2
  2815  0154  2971               	goto	l4608
  2816                           
  2817                           ;main.c: 824: {
  2818                           ;main.c: 825: showNumAShi = numArray[0];
  2819  0155  3001               	movlw	low (_numArray-__stringbase)
  2820  0156  0084               	movwf	4
  2821  0157  118A  276E  118A   	fcall	stringdir
  2822  015A  00DC               	movwf	_showNumAShi
  2823                           
  2824                           ;main.c: 826: showNumAge = numArray[10];
  2825  015B  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
  2826  015C  0084               	movwf	4
  2827  015D  118A  276E  118A   	fcall	stringdir
  2828  0160  00DB               	movwf	_showNumAge
  2829                           
  2830                           ;main.c: 827: showNumBShi = numArray[10];
  2831  0161  300B               	movlw	low (((_numArray+10)-__stringbase)| (0+32768))
  2832  0162  0084               	movwf	4
  2833  0163  118A  276E  118A   	fcall	stringdir
  2834  0166  00DA               	movwf	_showNumBShi
  2835                           
  2836                           ;main.c: 828: if(lowBatFlag == 1 && count1s < 50)
  2837  0167  0B39               	decfsz	_lowBatFlag,w
  2838  0168  296F               	goto	l4606
  2839  0169  3032               	movlw	50
  2840  016A  024A               	subwf	_count1s,w
  2841  016B  1803               	skipnc
  2842  016C  296F               	goto	l4606
  2843                           
  2844                           ;main.c: 829: {
  2845                           ;main.c: 830: setBatLed(1);
  2846  016D  3001               	movlw	1
  2847  016E  29CF               	ljmp	_setBatLed
  2848  016F                     l4606:	
  2849                           ;main.c: 831: }
  2850                           
  2851                           
  2852                           ;main.c: 832: else
  2853                           ;main.c: 833: {
  2854                           ;main.c: 834: setBatLed(showBatStep);
  2855  016F  087B               	movf	_showBatStep,w
  2856  0170  29CF               	ljmp	_setBatLed
  2857  0171                     l4608:	
  2858                           
  2859                           ;main.c: 837: else if(firstTime == 0 && chrgFlag == 0)
  2860  0171  085E               	movf	_firstTime,w
  2861  0172  1D03               	btfss	3,2
  2862  0173  0008               	return
  2863  0174  0834               	movf	_chrgFlag,w
  2864  0175  1D03               	btfss	3,2
  2865  0176  0008               	return
  2866                           
  2867                           ;main.c: 838: {
  2868                           ;main.c: 839: pwm1Stop();
  2869  0177  2206               	fcall	_pwm1Stop
  2870                           
  2871                           ;main.c: 840: showNumAShi = 0;
  2872  0178  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0179  01DC               	clrf	_showNumAShi
  2874                           
  2875                           ;main.c: 841: showNumAge = 0;
  2876  017A  01DB               	clrf	_showNumAge
  2877                           
  2878                           ;main.c: 842: showNumBShi = 0;
  2879  017B  01DA               	clrf	_showNumBShi
  2880                           
  2881                           ;main.c: 843: showNumBat = 0;
  2882  017C  01DD               	clrf	_showNumBat
  2883  017D  0008               	return
  2884  017E                     __end_of_workCtr:	
  2885  017E                     __ptext5:	
  2886 ;; *************** function _setTempLed *****************
  2887 ;; Defined at:
  2888 ;;		line 501 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;  tempLed         1    wreg     unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  tempLed         1    8[COMMON] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 300/0
  2899 ;;		On exit  : 300/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2902 ;;      Params:         0       0       0       0
  2903 ;;      Locals:         1       0       0       0
  2904 ;;      Temps:          0       0       0       0
  2905 ;;      Totals:         1       0       0       0
  2906 ;;Total ram usage:        1 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    2
  2909 ;; This function calls:
  2910 ;;		___lbdiv
  2911 ;;		___lbmod
  2912 ;; This function is called by:
  2913 ;;		_workCtr
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function _setTempLed
  2919  017E                     _setTempLed:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in _setTempLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2923                           ;setTempLed@tempLed stored from wreg
  2924  017E  00F8               	movwf	setTempLed@tempLed
  2925                           
  2926                           ;main.c: 504: if(tempLed >= 100)
  2927  017F  3064               	movlw	100
  2928  0180  0278               	subwf	setTempLed@tempLed,w
  2929  0181  1C03               	skipc
  2930  0182  2995               	goto	l4438
  2931                           
  2932                           ;main.c: 505: {
  2933                           ;main.c: 506: showNumAShi = numArray[tempLed/100];
  2934  0183  3064               	movlw	100
  2935  0184  00F7               	movwf	___lbdiv@divisor
  2936  0185  0878               	movf	setTempLed@tempLed,w
  2937  0186  21EB               	fcall	___lbdiv
  2938  0187  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2939  0188  0084               	movwf	4
  2940  0189  118A  276E  118A   	fcall	stringdir
  2941  018C  00DC               	movwf	_showNumAShi
  2942                           
  2943                           ;main.c: 507: showNumAge = numArray[(tempLed%100)/10];
  2944  018D  300A               	movlw	10
  2945  018E  00F7               	movwf	___lbdiv@divisor
  2946  018F  3064               	movlw	100
  2947  0190  00F2               	movwf	___lbmod@divisor
  2948  0191  0878               	movf	setTempLed@tempLed,w
  2949  0192  21B3  118A         	fcall	___lbmod
  2950  0194  299D               	goto	L10
  2951  0195                     l4438:	
  2952                           ;main.c: 508: }
  2953                           
  2954  0195  300A               	movlw	10
  2955                           
  2956                           ;main.c: 509: else
  2957                           ;main.c: 510: {
  2958                           ;main.c: 511: showNumAShi = 0;
  2959  0196  01DC               	clrf	_showNumAShi
  2960                           
  2961                           ;main.c: 512: if(tempLed >= 10)
  2962  0197  0278               	subwf	setTempLed@tempLed,w
  2963  0198  1C03               	skipc
  2964  0199  29A5               	goto	l4444
  2965                           
  2966                           ;main.c: 513: {
  2967                           ;main.c: 514: showNumAge = numArray[tempLed/10];
  2968  019A  300A               	movlw	10
  2969  019B  00F7               	movwf	___lbdiv@divisor
  2970  019C  0878               	movf	setTempLed@tempLed,w
  2971  019D                     L10:	
  2972  019D  21EB               	fcall	___lbdiv
  2973  019E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2974  019F  0084               	movwf	4
  2975  01A0  118A  276E  118A   	fcall	stringdir
  2976  01A3  00DB               	movwf	_showNumAge
  2977                           
  2978                           ;main.c: 515: }
  2979  01A4  29A6               	goto	l4446
  2980  01A5                     l4444:	
  2981                           
  2982                           ;main.c: 516: else
  2983                           ;main.c: 517: {
  2984                           ;main.c: 518: showNumAge = 0;
  2985  01A5  01DB               	clrf	_showNumAge
  2986  01A6                     l4446:	
  2987                           
  2988                           ;main.c: 519: }
  2989                           ;main.c: 520: }
  2990                           ;main.c: 521: showNumBShi = numArray[tempLed%10];
  2991  01A6  300A               	movlw	10
  2992  01A7  00F2               	movwf	___lbmod@divisor
  2993  01A8  0878               	movf	setTempLed@tempLed,w
  2994  01A9  21B3               	fcall	___lbmod
  2995  01AA  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2996  01AB  0084               	movwf	4
  2997  01AC  118A  276E         	fcall	stringdir
  2998  01AE  00DA               	movwf	_showNumBShi
  2999  01AF  0008               	return
  3000  01B0                     __end_of_setTempLed:	
  3001  01B0                     __ptext8:	
  3002 ;; *************** function _pwm1Init *****************
  3003 ;; Defined at:
  3004 ;;		line 1004 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;		None
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;		None
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  1    wreg      void 
  3011 ;; Registers used:
  3012 ;;		None
  3013 ;; Tracked objects:
  3014 ;;		On entry : 300/0
  3015 ;;		On exit  : 300/100
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3018 ;;      Params:         0       0       0       0
  3019 ;;      Locals:         0       0       0       0
  3020 ;;      Temps:          0       0       0       0
  3021 ;;      Totals:         0       0       0       0
  3022 ;;Total ram usage:        0 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    1
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_workCtr
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _pwm1Init
  3034  01B0                     _pwm1Init:	
  3035                           
  3036                           ;main.c: 1006: RA2 = 1;
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _pwm1Init: []
  3040  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  3041  01B1  1506               	bsf	6,2	;volatile
  3042  01B2  0008               	return
  3043  01B3                     __end_of_pwm1Init:	
  3044  01B3                     __ptext6:	
  3045 ;; *************** function ___lbmod *****************
  3046 ;; Defined at:
  3047 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  dividend        1    wreg     unsigned char 
  3050 ;;  divisor         1    2[COMMON] unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  dividend        1    4[COMMON] unsigned char 
  3053 ;;  rem             1    6[COMMON] unsigned char 
  3054 ;;  counter         1    5[COMMON] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      unsigned char 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 300/0
  3061 ;;		On exit  : 300/0
  3062 ;;		Unchanged: 300/0
  3063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3064 ;;      Params:         1       0       0       0
  3065 ;;      Locals:         3       0       0       0
  3066 ;;      Temps:          1       0       0       0
  3067 ;;      Totals:         5       0       0       0
  3068 ;;Total ram usage:        5 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_setTempLed
  3075 ;;		_workCtr
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           
  3080                           ;psect for function ___lbmod
  3081  01B3                     ___lbmod:	
  3082                           
  3083                           ;incstack = 0
  3084                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3085                           ;___lbmod@dividend stored from wreg
  3086  01B3  00F4               	movwf	___lbmod@dividend
  3087  01B4  3008               	movlw	8
  3088  01B5  00F5               	movwf	___lbmod@counter
  3089  01B6  01F6               	clrf	___lbmod@rem
  3090  01B7                     l4420:	
  3091  01B7  0874               	movf	___lbmod@dividend,w
  3092  01B8  00F3               	movwf	??___lbmod
  3093  01B9  3007               	movlw	7
  3094  01BA  1003               	clrc
  3095  01BB                     L11:	
  3096  01BB  0CF3               	rrf	??___lbmod,f
  3097  01BC  3EFF               	addlw	-1
  3098  01BD  1003               	clrc
  3099  01BE  1D03               	skipz
  3100  01BF  29BB               	goto	L11
  3101  01C0  0D76               	rlf	___lbmod@rem,w
  3102  01C1  0473               	iorwf	??___lbmod,w
  3103  01C2  00F6               	movwf	___lbmod@rem
  3104  01C3  1003               	clrc
  3105  01C4  0DF4               	rlf	___lbmod@dividend,f
  3106  01C5  0872               	movf	___lbmod@divisor,w
  3107  01C6  0276               	subwf	___lbmod@rem,w
  3108  01C7  1C03               	skipc
  3109  01C8  29CB               	goto	l4428
  3110  01C9  0872               	movf	___lbmod@divisor,w
  3111  01CA  02F6               	subwf	___lbmod@rem,f
  3112  01CB                     l4428:	
  3113  01CB  0BF5               	decfsz	___lbmod@counter,f
  3114  01CC  29B7               	goto	l4420
  3115  01CD  0876               	movf	___lbmod@rem,w
  3116  01CE  0008               	return
  3117  01CF                     __end_of___lbmod:	
  3118  01CF                     __ptext17:	
  3119 ;; *************** function _setBatLed *****************
  3120 ;; Defined at:
  3121 ;;		line 480 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  ledStep         1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  ledStep         1    2[COMMON] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0
  3130 ;; Tracked objects:
  3131 ;;		On entry : 300/0
  3132 ;;		On exit  : 300/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3135 ;;      Params:         0       0       0       0
  3136 ;;      Locals:         1       0       0       0
  3137 ;;      Temps:          0       0       0       0
  3138 ;;      Totals:         1       0       0       0
  3139 ;;Total ram usage:        1 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    1
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_chrgCtr
  3146 ;;		_workCtr
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           
  3151                           ;psect for function _setBatLed
  3152  01CF                     _setBatLed:	
  3153                           
  3154                           ;incstack = 0
  3155                           ; Regs used in _setBatLed: [wreg+status,2+status,0]
  3156                           ;setBatLed@ledStep stored from wreg
  3157  01CF  00F2               	movwf	setBatLed@ledStep
  3158                           
  3159                           ;main.c: 482: showNumBat &= 0xF0;
  3160  01D0  30F0               	movlw	240
  3161  01D1  05DD               	andwf	_showNumBat,f
  3162                           
  3163                           ;main.c: 483: if(ledStep == 1)
  3164  01D2  0B72               	decfsz	setBatLed@ledStep,w
  3165  01D3  29D6               	goto	l3682
  3166                           
  3167                           ;main.c: 484: {
  3168                           ;main.c: 485: showNumBat |= 0x08;
  3169  01D4  15DD               	bsf	_showNumBat,3
  3170                           
  3171                           ;main.c: 486: }
  3172  01D5  0008               	return
  3173  01D6                     l3682:	
  3174                           
  3175                           ;main.c: 487: else if(ledStep == 2)
  3176  01D6  3002               	movlw	2
  3177  01D7  0672               	xorwf	setBatLed@ledStep,w
  3178  01D8  1D03               	btfss	3,2
  3179  01D9  29DD               	goto	l3686
  3180                           
  3181                           ;main.c: 488: {
  3182                           ;main.c: 489: showNumBat |= 0x0C;
  3183  01DA  300C               	movlw	12
  3184  01DB  04DD               	iorwf	_showNumBat,f
  3185                           
  3186                           ;main.c: 490: }
  3187  01DC  0008               	return
  3188  01DD                     l3686:	
  3189                           
  3190                           ;main.c: 491: else if(ledStep == 3)
  3191  01DD  3003               	movlw	3
  3192  01DE  0672               	xorwf	setBatLed@ledStep,w
  3193  01DF  1D03               	btfss	3,2
  3194  01E0  29E4               	goto	l3690
  3195                           
  3196                           ;main.c: 492: {
  3197                           ;main.c: 493: showNumBat |= 0x0E;
  3198  01E1  300E               	movlw	14
  3199  01E2  04DD               	iorwf	_showNumBat,f
  3200                           
  3201                           ;main.c: 494: }
  3202  01E3  0008               	return
  3203  01E4                     l3690:	
  3204                           
  3205                           ;main.c: 495: else if(ledStep >= 4)
  3206  01E4  3004               	movlw	4
  3207  01E5  0272               	subwf	setBatLed@ledStep,w
  3208  01E6  1C03               	skipc
  3209  01E7  0008               	return
  3210                           
  3211                           ;main.c: 496: {
  3212                           ;main.c: 497: showNumBat |= 0x0F;
  3213  01E8  300F               	movlw	15
  3214  01E9  04DD               	iorwf	_showNumBat,f
  3215  01EA  0008               	return
  3216  01EB                     __end_of_setBatLed:	
  3217  01EB                     __ptext7:	
  3218 ;; *************** function ___lbdiv *****************
  3219 ;; Defined at:
  3220 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  dividend        1    wreg     unsigned char 
  3223 ;;  divisor         1    7[COMMON] unsigned char 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  dividend        1    0[BANK0 ] unsigned char 
  3226 ;;  quotient        1    2[BANK0 ] unsigned char 
  3227 ;;  counter         1    1[BANK0 ] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  1    wreg      unsigned char 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0
  3232 ;; Tracked objects:
  3233 ;;		On entry : 300/0
  3234 ;;		On exit  : 300/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3237 ;;      Params:         1       0       0       0
  3238 ;;      Locals:         0       3       0       0
  3239 ;;      Temps:          0       0       0       0
  3240 ;;      Totals:         1       3       0       0
  3241 ;;Total ram usage:        4 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    1
  3244 ;; This function calls:
  3245 ;;		Nothing
  3246 ;; This function is called by:
  3247 ;;		_setTempLed
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           
  3252                           ;psect for function ___lbdiv
  3253  01EB                     ___lbdiv:	
  3254                           
  3255                           ;incstack = 0
  3256                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3257                           ;___lbdiv@dividend stored from wreg
  3258  01EB  00CC               	movwf	___lbdiv@dividend
  3259  01EC  01CE               	clrf	___lbdiv@quotient
  3260  01ED  0877               	movf	___lbdiv@divisor,w
  3261  01EE  1903               	btfsc	3,2
  3262  01EF  2A04               	goto	l4412
  3263  01F0  01CD               	clrf	___lbdiv@counter
  3264  01F1                     l4398:	
  3265  01F1  0ACD               	incf	___lbdiv@counter,f
  3266  01F2  1BF7               	btfsc	___lbdiv@divisor,7
  3267  01F3  29F7               	goto	l2410
  3268  01F4  1003               	clrc
  3269  01F5  0DF7               	rlf	___lbdiv@divisor,f
  3270  01F6  29F1               	goto	l4398
  3271  01F7                     l2410:	
  3272  01F7  1003               	clrc
  3273  01F8  0DCE               	rlf	___lbdiv@quotient,f
  3274  01F9  0877               	movf	___lbdiv@divisor,w
  3275  01FA  024C               	subwf	___lbdiv@dividend,w
  3276  01FB  1C03               	skipc
  3277  01FC  2A01               	goto	L12
  3278  01FD  0877               	movf	___lbdiv@divisor,w
  3279  01FE  02CC               	subwf	___lbdiv@dividend,f
  3280  01FF  144E               	bsf	___lbdiv@quotient,0
  3281  0200  1003               	clrc
  3282  0201                     L12:	
  3283  0201  0CF7               	rrf	___lbdiv@divisor,f
  3284  0202  0BCD               	decfsz	___lbdiv@counter,f
  3285  0203  29F7               	goto	l2410
  3286  0204                     l4412:	
  3287  0204  084E               	movf	___lbdiv@quotient,w
  3288  0205  0008               	return
  3289  0206                     __end_of___lbdiv:	
  3290  0206                     __ptext19:	
  3291 ;; *************** function _pwm1Stop *****************
  3292 ;; Defined at:
  3293 ;;		line 1008 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		None
  3302 ;; Tracked objects:
  3303 ;;		On entry : 300/0
  3304 ;;		On exit  : 300/100
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3307 ;;      Params:         0       0       0       0
  3308 ;;      Locals:         0       0       0       0
  3309 ;;      Temps:          0       0       0       0
  3310 ;;      Totals:         0       0       0       0
  3311 ;;Total ram usage:        0 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    1
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_checkBatAD
  3318 ;;		_chrgCtr
  3319 ;;		_workCtr
  3320 ;;		_keyCtr
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _pwm1Stop
  3326  0206                     _pwm1Stop:	
  3327                           
  3328                           ;main.c: 1010: RA2 = 0;
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _pwm1Stop: []
  3332  0206  1683               	bsf	3,5	;RP0=1, select bank1
  3333  0207  1106               	bcf	6,2	;volatile
  3334  0208  0008               	return
  3335  0209                     __end_of_pwm1Stop:	
  3336  0209                     __ptext2:	
  3337 ;; *************** function _updateTemp *****************
  3338 ;; Defined at:
  3339 ;;		line 596 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;		None
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, status,2, status,0, pclath, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 300/0
  3350 ;;		On exit  : 300/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3353 ;;      Params:         0       0       0       0
  3354 ;;      Locals:         0       0       0       0
  3355 ;;      Temps:          0       0       0       0
  3356 ;;      Totals:         0       0       0       0
  3357 ;;Total ram usage:        0 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    3
  3360 ;; This function calls:
  3361 ;;		_checkTemAD
  3362 ;; This function is called by:
  3363 ;;		_workCtr
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _updateTemp
  3369  0209                     _updateTemp:	
  3370                           
  3371                           ;main.c: 598: if(workStep > 0)
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _updateTemp: [wreg+status,2+status,0+pclath+cstack]
  3375  0209  0848               	movf	_workStep,w
  3376  020A  1903               	btfsc	3,2
  3377  020B  2A23               	goto	l3726
  3378                           
  3379                           ;main.c: 599: {
  3380                           ;main.c: 600: if(++tempCheckTime > 250)
  3381  020C  30FB               	movlw	251
  3382  020D  0ABB               	incf	_tempCheckTime,f
  3383  020E  023B               	subwf	_tempCheckTime,w
  3384  020F  1803               	btfsc	3,0
  3385                           
  3386                           ;main.c: 601: {
  3387                           ;main.c: 602: tempCheckTime = 0;
  3388  0210  01BB               	clrf	_tempCheckTime
  3389                           
  3390                           ;main.c: 603: }
  3391                           ;main.c: 604: if(tempCheckTime < 20)
  3392  0211  3014               	movlw	20
  3393  0212  023B               	subwf	_tempCheckTime,w
  3394  0213  1803               	skipnc
  3395  0214  2A17               	goto	l3718
  3396                           
  3397                           ;main.c: 605: {
  3398                           ;main.c: 606: checkTemAD();
  3399  0215  2231  118A         	fcall	_checkTemAD
  3400  0217                     l3718:	
  3401                           
  3402                           ;main.c: 607: }
  3403                           ;main.c: 608: if(showTmepNum < showMaxTemp)
  3404  0217  0859               	movf	_showMaxTemp,w
  3405  0218  023F               	subwf	_showTmepNum,w
  3406  0219  1803               	skipnc
  3407  021A  0008               	return
  3408                           
  3409                           ;main.c: 609: {
  3410                           ;main.c: 610: if(++chanceTempNumTime >= 75)
  3411  021B  304B               	movlw	75
  3412  021C  0ABE               	incf	_chanceTempNumTime,f
  3413  021D  023E               	subwf	_chanceTempNumTime,w
  3414  021E  1C03               	skipc
  3415  021F  0008               	return
  3416                           
  3417                           ;main.c: 611: {
  3418                           ;main.c: 612: chanceTempNumTime = 0;
  3419  0220  01BE               	clrf	_chanceTempNumTime
  3420                           
  3421                           ;main.c: 613: showTmepNum++;
  3422  0221  0ABF               	incf	_showTmepNum,f
  3423  0222  0008               	return
  3424  0223                     l3726:	
  3425                           
  3426                           ;main.c: 617: else
  3427                           ;main.c: 618: {
  3428                           ;main.c: 619: if(firstTime == 0)
  3429  0223  085E               	movf	_firstTime,w
  3430  0224  1D03               	btfss	3,2
  3431  0225  2A28               	goto	l3730
  3432                           
  3433                           ;main.c: 620: {
  3434                           ;main.c: 621: checkTemAD();
  3435  0226  2231  118A         	fcall	_checkTemAD
  3436  0228                     l3730:	
  3437                           
  3438                           ;main.c: 622: }
  3439                           ;main.c: 623: if(++chanceTempNumTime > 40)
  3440  0228  3029               	movlw	41
  3441  0229  0ABE               	incf	_chanceTempNumTime,f
  3442  022A  023E               	subwf	_chanceTempNumTime,w
  3443  022B  1C03               	skipc
  3444  022C  0008               	return
  3445                           
  3446                           ;main.c: 624: {
  3447                           ;main.c: 625: chanceTempNumTime = 0;
  3448  022D  01BE               	clrf	_chanceTempNumTime
  3449                           
  3450                           ;main.c: 626: showTmepNum = tempNum;
  3451  022E  0841               	movf	_tempNum,w
  3452  022F  00BF               	movwf	_showTmepNum
  3453  0230  0008               	return
  3454  0231                     __end_of_updateTemp:	
  3455  0231                     __ptext3:	
  3456 ;; *************** function _checkTemAD *****************
  3457 ;; Defined at:
  3458 ;;		line 332 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;                  1    wreg      void 
  3465 ;; Registers used:
  3466 ;;		wreg, status,2, status,0, pclath, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 300/0
  3469 ;;		On exit  : 300/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3472 ;;      Params:         0       0       0       0
  3473 ;;      Locals:         0       0       0       0
  3474 ;;      Temps:          0       0       0       0
  3475 ;;      Totals:         0       0       0       0
  3476 ;;Total ram usage:        0 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    2
  3479 ;; This function calls:
  3480 ;;		_ADC_Sample
  3481 ;;		___lwdiv
  3482 ;; This function is called by:
  3483 ;;		_updateTemp
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _checkTemAD
  3489  0231                     _checkTemAD:	
  3490                           
  3491                           ;main.c: 334: test_adc = ADC_Sample(5, 5);
  3492                           
  3493                           ;incstack = 0
  3494                           ; Regs used in _checkTemAD: [wreg+status,2+status,0+pclath+cstack]
  3495  0231  3005               	movlw	5
  3496  0232  00F2               	movwf	ADC_Sample@adldo
  3497  0233  2306  118A         	fcall	_ADC_Sample
  3498  0235  00B3               	movwf	_test_adc	;volatile
  3499                           
  3500                           ;main.c: 335: if (0xA5 == test_adc)
  3501  0236  30A5               	movlw	165
  3502  0237  0633               	xorwf	_test_adc,w	;volatile
  3503  0238  1D03               	btfss	3,2
  3504  0239  0008               	return
  3505                           
  3506                           ;main.c: 336: {
  3507                           ;main.c: 337: temValue = adresult;
  3508  023A  0825               	movf	_adresult+1,w	;volatile
  3509  023B  00AB               	movwf	_temValue+1
  3510  023C  0824               	movf	_adresult,w	;volatile
  3511  023D  00AA               	movwf	_temValue
  3512                           
  3513                           ;main.c: 338: if(temValue > 4090)
  3514  023E  300F               	movlw	15
  3515  023F  022B               	subwf	_temValue+1,w
  3516  0240  30FB               	movlw	251
  3517  0241  1903               	skipnz
  3518  0242  022A               	subwf	_temValue,w
  3519  0243  1C03               	skipc
  3520  0244  2A47               	goto	l3568
  3521                           
  3522                           ;main.c: 339: {
  3523                           ;main.c: 340: tempNum = 0;
  3524  0245  01C1               	clrf	_tempNum
  3525                           
  3526                           ;main.c: 341: }
  3527  0246  0008               	return
  3528  0247                     l3568:	
  3529                           
  3530                           ;main.c: 342: else if(temValue > 2015)
  3531  0247  3007               	movlw	7
  3532  0248  022B               	subwf	_temValue+1,w
  3533  0249  30E0               	movlw	224
  3534  024A  1903               	skipnz
  3535  024B  022A               	subwf	_temValue,w
  3536  024C  1C03               	skipc
  3537  024D  2A5E               	goto	l3572
  3538                           
  3539                           ;main.c: 343: {
  3540                           ;main.c: 345: tempNum = 20 - ((temValue - 2015)/104);
  3541  024E  3068               	movlw	104
  3542  024F  00F2               	movwf	___lwdiv@divisor
  3543  0250  01F3               	clrf	___lwdiv@divisor+1
  3544  0251  082A               	movf	_temValue,w
  3545  0252  3E21               	addlw	33
  3546  0253  00F4               	movwf	___lwdiv@dividend
  3547  0254  082B               	movf	_temValue+1,w
  3548  0255  1803               	skipnc
  3549  0256  3E01               	addlw	1
  3550  0257  3EF8               	addlw	248
  3551  0258  00F5               	movwf	___lwdiv@dividend+1
  3552  0259  22DC               	fcall	___lwdiv
  3553  025A  0872               	movf	?___lwdiv,w
  3554  025B  3C14               	sublw	20
  3555  025C  00C1               	movwf	_tempNum
  3556                           
  3557                           ;main.c: 346: }
  3558  025D  0008               	return
  3559  025E                     l3572:	
  3560                           
  3561                           ;main.c: 347: else if(temValue > 964)
  3562  025E  3003               	movlw	3
  3563  025F  022B               	subwf	_temValue+1,w
  3564  0260  30C5               	movlw	197
  3565  0261  1903               	skipnz
  3566  0262  022A               	subwf	_temValue,w
  3567  0263  1C03               	skipc
  3568  0264  2A75               	goto	l3576
  3569                           
  3570                           ;main.c: 348: {
  3571                           ;main.c: 350: tempNum = 40 - ((temValue - 964)/52);
  3572  0265  3034               	movlw	52
  3573  0266  00F2               	movwf	___lwdiv@divisor
  3574  0267  01F3               	clrf	___lwdiv@divisor+1
  3575  0268  082A               	movf	_temValue,w
  3576  0269  3E3C               	addlw	60
  3577  026A  00F4               	movwf	___lwdiv@dividend
  3578  026B  082B               	movf	_temValue+1,w
  3579  026C  1803               	skipnc
  3580  026D  3E01               	addlw	1
  3581  026E  3EFC               	addlw	252
  3582  026F  00F5               	movwf	___lwdiv@dividend+1
  3583  0270  22DC               	fcall	___lwdiv
  3584  0271  0872               	movf	?___lwdiv,w
  3585  0272  3C28               	sublw	40
  3586  0273  00C1               	movwf	_tempNum
  3587                           
  3588                           ;main.c: 351: }
  3589  0274  0008               	return
  3590  0275                     l3576:	
  3591                           
  3592                           ;main.c: 352: else if(temValue > 474)
  3593  0275  3001               	movlw	1
  3594  0276  022B               	subwf	_temValue+1,w
  3595  0277  30DB               	movlw	219
  3596  0278  1903               	skipnz
  3597  0279  022A               	subwf	_temValue,w
  3598  027A  1C03               	skipc
  3599  027B  2A8C               	goto	l3580
  3600                           
  3601                           ;main.c: 353: {
  3602                           ;main.c: 355: tempNum = 60 - ((temValue - 474)/25);
  3603  027C  3019               	movlw	25
  3604  027D  00F2               	movwf	___lwdiv@divisor
  3605  027E  01F3               	clrf	___lwdiv@divisor+1
  3606  027F  082A               	movf	_temValue,w
  3607  0280  3E26               	addlw	38
  3608  0281  00F4               	movwf	___lwdiv@dividend
  3609  0282  082B               	movf	_temValue+1,w
  3610  0283  1803               	skipnc
  3611  0284  3E01               	addlw	1
  3612  0285  3EFE               	addlw	254
  3613  0286  00F5               	movwf	___lwdiv@dividend+1
  3614  0287  22DC               	fcall	___lwdiv
  3615  0288  0872               	movf	?___lwdiv,w
  3616  0289  3C3C               	sublw	60
  3617  028A  00C1               	movwf	_tempNum
  3618                           
  3619                           ;main.c: 356: }
  3620  028B  0008               	return
  3621  028C                     l3580:	
  3622                           
  3623                           ;main.c: 357: else if(temValue > 244)
  3624  028C  3000               	movlw	0
  3625  028D  022B               	subwf	_temValue+1,w
  3626  028E  30F5               	movlw	245
  3627  028F  1903               	skipnz
  3628  0290  022A               	subwf	_temValue,w
  3629  0291  1C03               	skipc
  3630  0292  2A9F               	goto	l3584
  3631                           
  3632                           ;main.c: 358: {
  3633                           ;main.c: 360: tempNum = 80 - ((temValue - 244)/12);
  3634  0293  300C               	movlw	12
  3635  0294  00F2               	movwf	___lwdiv@divisor
  3636  0295  01F3               	clrf	___lwdiv@divisor+1
  3637  0296  082A               	movf	_temValue,w
  3638  0297  3E0C               	addlw	12
  3639  0298  23EE  118A         	fcall	PL8	;call to abstracted procedure
  3640  029A  22DC               	fcall	___lwdiv
  3641  029B  0872               	movf	?___lwdiv,w
  3642  029C  3C50               	sublw	80
  3643  029D  00C1               	movwf	_tempNum
  3644                           
  3645                           ;main.c: 361: }
  3646  029E  0008               	return
  3647  029F                     l3584:	
  3648                           
  3649                           ;main.c: 362: else if(temValue > 132)
  3650  029F  3000               	movlw	0
  3651  02A0  022B               	subwf	_temValue+1,w
  3652  02A1  3085               	movlw	133
  3653  02A2  1903               	skipnz
  3654  02A3  022A               	subwf	_temValue,w
  3655  02A4  1C03               	skipc
  3656  02A5  2AB2               	goto	l3588
  3657                           
  3658                           ;main.c: 363: {
  3659                           ;main.c: 365: tempNum = 100 - ((temValue - 132)/6);
  3660  02A6  3006               	movlw	6
  3661  02A7  00F2               	movwf	___lwdiv@divisor
  3662  02A8  01F3               	clrf	___lwdiv@divisor+1
  3663  02A9  082A               	movf	_temValue,w
  3664  02AA  3E7C               	addlw	124
  3665  02AB  23EE  118A         	fcall	PL8	;call to abstracted procedure
  3666  02AD  22DC               	fcall	___lwdiv
  3667  02AE  0872               	movf	?___lwdiv,w
  3668  02AF  3C64               	sublw	100
  3669  02B0  00C1               	movwf	_tempNum
  3670                           
  3671                           ;main.c: 366: }
  3672  02B1  0008               	return
  3673  02B2                     l3588:	
  3674                           
  3675                           ;main.c: 367: else if(temValue > 102)
  3676  02B2  3000               	movlw	0
  3677  02B3  022B               	subwf	_temValue+1,w
  3678  02B4  3067               	movlw	103
  3679  02B5  1903               	skipnz
  3680  02B6  022A               	subwf	_temValue,w
  3681  02B7  1C03               	skipc
  3682  02B8  2ABD               	goto	l3592
  3683  02B9                     l3590:	
  3684                           
  3685                           ;main.c: 368: {
  3686                           ;main.c: 370: tempNum = 140 - (temValue - 102);
  3687  02B9  082A               	movf	_temValue,w
  3688  02BA  3CF2               	sublw	242
  3689  02BB  00C1               	movwf	_tempNum
  3690                           
  3691                           ;main.c: 371: }
  3692  02BC  0008               	return
  3693  02BD                     l3592:	
  3694                           
  3695                           ;main.c: 372: else if(temValue >= 82)
  3696  02BD  3000               	movlw	0
  3697  02BE  022B               	subwf	_temValue+1,w
  3698  02BF  3052               	movlw	82
  3699  02C0  1903               	skipnz
  3700  02C1  022A               	subwf	_temValue,w
  3701  02C2  1803               	btfsc	3,0
  3702  02C3  2AB9               	goto	l3590
  3703                           
  3704                           ;main.c: 377: else if(temValue >= 62)
  3705  02C4  3000               	movlw	0
  3706  02C5  022B               	subwf	_temValue+1,w
  3707  02C6  303E               	movlw	62
  3708  02C7  1903               	skipnz
  3709  02C8  022A               	subwf	_temValue,w
  3710  02C9  1803               	btfsc	3,0
  3711  02CA  2AB9               	goto	l3590
  3712                           
  3713                           ;main.c: 381: else if(temValue >= 52)
  3714  02CB  3000               	movlw	0
  3715  02CC  022B               	subwf	_temValue+1,w
  3716  02CD  3034               	movlw	52
  3717  02CE  1903               	skipnz
  3718  02CF  022A               	subwf	_temValue,w
  3719  02D0  1803               	btfsc	3,0
  3720  02D1  2AB9               	goto	l3590
  3721                           
  3722                           ;main.c: 385: else if(temValue >= 42)
  3723  02D2  3000               	movlw	0
  3724  02D3  022B               	subwf	_temValue+1,w
  3725  02D4  302A               	movlw	42
  3726  02D5  1903               	skipnz
  3727  02D6  022A               	subwf	_temValue,w
  3728  02D7  1803               	btfsc	3,0
  3729  02D8  2AB9               	goto	l3590
  3730                           
  3731                           ;main.c: 389: else
  3732                           ;main.c: 390: {
  3733                           ;main.c: 391: tempNum = 201;
  3734  02D9  30C9               	movlw	201
  3735  02DA  00C1               	movwf	_tempNum
  3736  02DB  0008               	return
  3737  02DC                     __end_of_checkTemAD:	
  3738  02DC                     __ptext4:	
  3739 ;; *************** function ___lwdiv *****************
  3740 ;; Defined at:
  3741 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  divisor         2    2[COMMON] unsigned int 
  3744 ;;  dividend        2    4[COMMON] unsigned int 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  quotient        2    6[COMMON] unsigned int 
  3747 ;;  counter         1    8[COMMON] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  2    2[COMMON] unsigned int 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 300/0
  3754 ;;		On exit  : 300/0
  3755 ;;		Unchanged: 300/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3757 ;;      Params:         4       0       0       0
  3758 ;;      Locals:         3       0       0       0
  3759 ;;      Temps:          0       0       0       0
  3760 ;;      Totals:         7       0       0       0
  3761 ;;Total ram usage:        7 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    1
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_checkTemAD
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           
  3772                           ;psect for function ___lwdiv
  3773  02DC                     ___lwdiv:	
  3774                           
  3775                           ;incstack = 0
  3776                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3777  02DC  01F6               	clrf	___lwdiv@quotient
  3778  02DD  01F7               	clrf	___lwdiv@quotient+1
  3779  02DE  0872               	movf	___lwdiv@divisor,w
  3780  02DF  0473               	iorwf	___lwdiv@divisor+1,w
  3781  02E0  1903               	btfsc	3,2
  3782  02E1  2B01               	goto	l3556
  3783  02E2  01F8               	clrf	___lwdiv@counter
  3784  02E3                     L7:	
  3785  02E3  0AF8               	incf	___lwdiv@counter,f
  3786  02E4  1BF3               	btfsc	___lwdiv@divisor+1,7
  3787  02E5  2AEA               	goto	l3544
  3788  02E6  1003               	clrc
  3789  02E7  0DF2               	rlf	___lwdiv@divisor,f
  3790  02E8  0DF3               	rlf	___lwdiv@divisor+1,f
  3791  02E9  2AE3               	goto	L7
  3792  02EA                     l3544:	
  3793  02EA  1003               	clrc
  3794  02EB  0DF6               	rlf	___lwdiv@quotient,f
  3795  02EC  0DF7               	rlf	___lwdiv@quotient+1,f
  3796  02ED  0873               	movf	___lwdiv@divisor+1,w
  3797  02EE  0275               	subwf	___lwdiv@dividend+1,w
  3798  02EF  1D03               	skipz
  3799  02F0  2AF3               	goto	u1655
  3800  02F1  0872               	movf	___lwdiv@divisor,w
  3801  02F2  0274               	subwf	___lwdiv@dividend,w
  3802  02F3                     u1655:	
  3803  02F3  1C03               	skipc
  3804  02F4  2AFD               	goto	L8
  3805  02F5  0872               	movf	___lwdiv@divisor,w
  3806  02F6  02F4               	subwf	___lwdiv@dividend,f
  3807  02F7  0873               	movf	___lwdiv@divisor+1,w
  3808  02F8  1C03               	skipc
  3809  02F9  03F5               	decf	___lwdiv@dividend+1,f
  3810  02FA  02F5               	subwf	___lwdiv@dividend+1,f
  3811  02FB  1476               	bsf	___lwdiv@quotient,0
  3812  02FC  1003               	clrc
  3813  02FD                     L8:	
  3814  02FD  0CF3               	rrf	___lwdiv@divisor+1,f
  3815  02FE  0CF2               	rrf	___lwdiv@divisor,f
  3816  02FF  0BF8               	decfsz	___lwdiv@counter,f
  3817  0300  2AEA               	goto	l3544
  3818  0301                     l3556:	
  3819  0301  0877               	movf	___lwdiv@quotient+1,w
  3820  0302  00F3               	movwf	?___lwdiv+1
  3821  0303  0876               	movf	___lwdiv@quotient,w
  3822  0304  00F2               	movwf	?___lwdiv
  3823  0305  0008               	return
  3824  0306                     __end_of___lwdiv:	
  3825  0306                     __ptext20:	
  3826 ;; *************** function _ADC_Sample *****************
  3827 ;; Defined at:
  3828 ;;		line 238 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  adch            1    wreg     unsigned char 
  3831 ;;  adldo           1    2[COMMON] unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  adch            1    1[BANK0 ] unsigned char 
  3834 ;;  j               1    0[BANK0 ] unsigned char 
  3835 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  3836 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  3837 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  3838 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  3839 ;;  i               1    2[BANK0 ] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      unsigned char 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0
  3844 ;; Tracked objects:
  3845 ;;		On entry : 300/0
  3846 ;;		On exit  : 300/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3849 ;;      Params:         1       0       0       0
  3850 ;;      Locals:         0      13       0       0
  3851 ;;      Temps:          4       0       0       0
  3852 ;;      Totals:         5      13       0       0
  3853 ;;Total ram usage:       18 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    1
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_checkTemAD
  3860 ;;		_checkBatAD
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           
  3865                           ;psect for function _ADC_Sample
  3866  0306                     _ADC_Sample:	
  3867                           
  3868                           ;incstack = 0
  3869                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3870                           ;ADC_Sample@adch stored from wreg
  3871  0306  00CD               	movwf	ADC_Sample@adch
  3872                           
  3873                           ;main.c: 240: volatile unsigned long adsum = 0;
  3874                           
  3875                           ;main.c: 241: volatile unsigned int admin = 0, admax = 0;
  3876  0307  23E5  118A         	fcall	PL6	;call to abstracted procedure
  3877                           
  3878                           ;main.c: 242: volatile unsigned int ad_temp = 0;
  3879  0309  01D7               	clrf	ADC_Sample@ad_temp	;volatile
  3880  030A  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  3881                           
  3882                           ;main.c: 244: if ((!LDO_EN) && (adldo & 0x04) )
  3883  030B  1683               	bsf	3,5	;RP0=1, select bank1
  3884  030C  1D16               	btfss	22,2	;volatile
  3885  030D  1D72               	btfss	ADC_Sample@adldo,2
  3886  030E  2B17               	goto	l3472
  3887                           
  3888                           ;main.c: 245: {
  3889                           ;main.c: 247: ADCON1 = adldo;
  3890  030F  0872               	movf	ADC_Sample@adldo,w
  3891  0310  0096               	movwf	22	;volatile
  3892                           
  3893                           ;main.c: 248: _delay((unsigned long)((100)*(8000000/4000000.0)));
  3894  0311  3042               	movlw	66
  3895  0312  00F3               	movwf	??_ADC_Sample
  3896  0313                     u3727:	
  3897  0313  0BF3               	decfsz	??_ADC_Sample,f
  3898  0314  2B13               	goto	u3727
  3899  0315  0000               	nop
  3900                           
  3901                           ;main.c: 249: }
  3902  0316  2B19               	goto	l3474
  3903  0317                     l3472:	
  3904                           
  3905                           ;main.c: 250: else
  3906                           ;main.c: 251: ADCON1 = adldo;
  3907  0317  0872               	movf	ADC_Sample@adldo,w
  3908  0318  0096               	movwf	22	;volatile
  3909  0319                     l3474:	
  3910                           
  3911                           ;main.c: 253: if(adch & 0x10)
  3912  0319  1283               	bcf	3,5	;RP0=0, select bank0
  3913  031A  1303               	bcf	3,6	;RP1=0, select bank0
  3914  031B  1E4D               	btfss	ADC_Sample@adch,4
  3915  031C  2B22               	goto	l3482
  3916                           
  3917                           ;main.c: 254: {
  3918                           ;main.c: 255: CHS4 = 1;
  3919  031D  1683               	bsf	3,5	;RP0=1, select bank1
  3920  031E  1716               	bsf	22,6	;volatile
  3921                           
  3922                           ;main.c: 256: adch &= 0x0f;
  3923  031F  300F               	movlw	15
  3924  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0321  05CD               	andwf	ADC_Sample@adch,f
  3926  0322                     l3482:	
  3927                           
  3928                           ;main.c: 259: for (i = 0; i < 10; i++)
  3929  0322  01CE               	clrf	ADC_Sample@i
  3930  0323                     l3488:	
  3931                           
  3932                           ;main.c: 260: {
  3933                           ;main.c: 261: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3934  0323  084D               	movf	ADC_Sample@adch,w
  3935  0324  00F3               	movwf	??_ADC_Sample
  3936  0325  3001               	movlw	1
  3937  0326  1003               	clrc
  3938  0327                     L26:	
  3939  0327  0DF3               	rlf	??_ADC_Sample,f
  3940  0328  3EFF               	addlw	-1
  3941  0329  1003               	clrc
  3942  032A  1D03               	skipz
  3943  032B  2B27               	goto	L26
  3944  032C  0D73               	rlf	??_ADC_Sample,w
  3945  032D  3841               	iorlw	65
  3946  032E  1683               	bsf	3,5	;RP0=1, select bank1
  3947  032F  0095               	movwf	21	;volatile
  3948  0330  0000               	nop	;# 
  3949  0331  0000               	nop	;# 
  3950  0332  0000               	nop	;# 
  3951  0333  0000               	nop	;# 
  3952                           
  3953                           ;main.c: 266: GODONE = 1;
  3954  0334  1683               	bsf	3,5	;RP0=1, select bank1
  3955  0335  1303               	bcf	3,6	;RP1=0, select bank1
  3956  0336  1495               	bsf	21,1	;volatile
  3957                           
  3958                           ;main.c: 268: unsigned char j = 0;
  3959  0337  1283               	bcf	3,5	;RP0=0, select bank0
  3960  0338  01CC               	clrf	ADC_Sample@j
  3961  0339                     l971:	
  3962                           ;main.c: 269: while (GODONE)
  3963                           
  3964  0339  1683               	bsf	3,5	;RP0=1, select bank1
  3965  033A  1C95               	btfss	21,1	;volatile
  3966  033B  2B43               	goto	l3498
  3967                           
  3968                           ;main.c: 270: {
  3969                           ;main.c: 271: _delay((unsigned long)((2)*(8000000/4000000.0)));
  3970  033C  2B3D               	nop2	;2 cycle nop
  3971  033D  2B3E               	nop2	;2 cycle nop
  3972                           
  3973                           ;main.c: 273: if (0 == (--j))
  3974  033E  1283               	bcf	3,5	;RP0=0, select bank0
  3975  033F  1303               	bcf	3,6	;RP1=0, select bank0
  3976  0340  0BCC               	decfsz	ADC_Sample@j,f
  3977  0341  2B39               	goto	l971
  3978                           
  3979                           ;main.c: 274: return 0;
  3980  0342  3400               	retlw	0
  3981  0343                     l3498:	
  3982                           
  3983                           ;main.c: 275: }
  3984                           ;main.c: 277: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3985  0343  0819               	movf	25,w	;volatile
  3986  0344  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0345  00D7               	movwf	ADC_Sample@ad_temp	;volatile
  3988  0346  01D8               	clrf	ADC_Sample@ad_temp+1	;volatile
  3989  0347  0ED7               	swapf	ADC_Sample@ad_temp,f	;volatile
  3990  0348  0ED8               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3991  0349  30F0               	movlw	240
  3992  034A  05D8               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3993  034B  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  3994  034C  390F               	andlw	15
  3995  034D  04D8               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3996  034E  30F0               	movlw	240
  3997  034F  05D7               	andwf	ADC_Sample@ad_temp,f	;volatile
  3998  0350  1683               	bsf	3,5	;RP0=1, select bank1
  3999  0351  0E18               	swapf	24,w	;volatile
  4000  0352  390F               	andlw	15
  4001  0353  1283               	bcf	3,5	;RP0=0, select bank0
  4002  0354  07D7               	addwf	ADC_Sample@ad_temp,f	;volatile
  4003  0355  1803               	skipnc
  4004  0356  0AD8               	incf	ADC_Sample@ad_temp+1,f	;volatile
  4005                           
  4006                           ;main.c: 279: if (0 == admax)
  4007  0357  0855               	movf	ADC_Sample@admax,w	;volatile
  4008  0358  0456               	iorwf	ADC_Sample@admax+1,w	;volatile
  4009  0359  1D03               	btfss	3,2
  4010  035A  2B5E               	goto	l3506
  4011                           
  4012                           ;main.c: 280: {
  4013                           ;main.c: 281: admax = ad_temp;
  4014  035B  23FA  118A         	fcall	PL14	;call to abstracted procedure
  4015  035D  2B71               	goto	l3512
  4016  035E                     l3506:	
  4017                           ;main.c: 283: }
  4018                           
  4019                           ;main.c: 282: admin = ad_temp;
  4020                           
  4021                           
  4022                           ;main.c: 284: else if (ad_temp > admax)
  4023  035E  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  4024  035F  0256               	subwf	ADC_Sample@admax+1,w	;volatile
  4025  0360  1D03               	skipz
  4026  0361  2B64               	goto	u1555
  4027  0362  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  4028  0363  0255               	subwf	ADC_Sample@admax,w	;volatile
  4029  0364                     u1555:	
  4030  0364  1803               	skipnc
  4031  0365  2B69               	goto	l3510
  4032                           
  4033                           ;main.c: 285: admax = ad_temp;
  4034  0366  23FA  118A         	fcall	PL14	;call to abstracted procedure
  4035  0368  2B75               	goto	l977
  4036  0369                     l3510:	
  4037                           
  4038                           ;main.c: 286: else if (ad_temp < admin)
  4039  0369  0854               	movf	ADC_Sample@admin+1,w	;volatile
  4040  036A  0258               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  4041  036B  1D03               	skipz
  4042  036C  2B6F               	goto	u1565
  4043  036D  0853               	movf	ADC_Sample@admin,w	;volatile
  4044  036E  0257               	subwf	ADC_Sample@ad_temp,w	;volatile
  4045  036F                     u1565:	
  4046  036F  1803               	skipnc
  4047  0370  2B75               	goto	l977
  4048  0371                     l3512:	
  4049                           
  4050                           ;main.c: 287: admin = ad_temp;
  4051  0371  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  4052  0372  00D4               	movwf	ADC_Sample@admin+1	;volatile
  4053  0373  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  4054  0374  00D3               	movwf	ADC_Sample@admin	;volatile
  4055  0375                     l977:	
  4056                           
  4057                           ;main.c: 289: adsum += ad_temp;
  4058  0375  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  4059  0376  00F3               	movwf	??_ADC_Sample
  4060  0377  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  4061  0378  00F4               	movwf	??_ADC_Sample+1
  4062  0379  01F5               	clrf	??_ADC_Sample+2
  4063  037A  01F6               	clrf	??_ADC_Sample+3
  4064  037B  0873               	movf	??_ADC_Sample,w
  4065  037C  07CF               	addwf	ADC_Sample@adsum,f	;volatile
  4066  037D  0874               	movf	??_ADC_Sample+1,w
  4067  037E  1103               	clrz
  4068  037F  1803               	skipnc
  4069  0380  3E01               	addlw	1
  4070  0381  1D03               	btfss	3,2
  4071  0382  07D0               	addwf	ADC_Sample@adsum+1,f	;volatile
  4072  0383  0875               	movf	??_ADC_Sample+2,w
  4073  0384  1103               	clrz
  4074  0385  1803               	skipnc
  4075  0386  3E01               	addlw	1
  4076  0387  1D03               	btfss	3,2
  4077  0388  07D1               	addwf	ADC_Sample@adsum+2,f	;volatile
  4078  0389  0876               	movf	??_ADC_Sample+3,w
  4079  038A  1103               	clrz
  4080  038B  1803               	skipnc
  4081  038C  3E01               	addlw	1
  4082  038D  1D03               	btfss	3,2
  4083  038E  07D2               	addwf	ADC_Sample@adsum+3,f	;volatile
  4084  038F  300A               	movlw	10
  4085  0390  0ACE               	incf	ADC_Sample@i,f
  4086  0391  024E               	subwf	ADC_Sample@i,w
  4087  0392  1C03               	skipc
  4088  0393  2B23               	goto	l3488
  4089                           
  4090                           ;main.c: 290: }
  4091                           ;main.c: 291: adsum -= admax;
  4092  0394  0855               	movf	ADC_Sample@admax,w	;volatile
  4093  0395  00F3               	movwf	??_ADC_Sample
  4094  0396  0856               	movf	ADC_Sample@admax+1,w	;volatile
  4095  0397  23D6  118A         	fcall	PL4	;call to abstracted procedure
  4096  0399  1C03               	skipc
  4097  039A  0F76               	incfsz	??_ADC_Sample+3,w
  4098  039B  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  4099                           
  4100                           ;main.c: 292: if (adsum >= admin)
  4101  039C  0853               	movf	ADC_Sample@admin,w	;volatile
  4102  039D  00F3               	movwf	??_ADC_Sample
  4103  039E  0854               	movf	ADC_Sample@admin+1,w	;volatile
  4104  039F  00F4               	movwf	??_ADC_Sample+1
  4105  03A0  01F5               	clrf	??_ADC_Sample+2
  4106  03A1  01F6               	clrf	??_ADC_Sample+3
  4107  03A2  0876               	movf	??_ADC_Sample+3,w
  4108  03A3  0252               	subwf	ADC_Sample@adsum+3,w	;volatile
  4109  03A4  1D03               	skipz
  4110  03A5  2BB0               	goto	u1605
  4111  03A6  0875               	movf	??_ADC_Sample+2,w
  4112  03A7  0251               	subwf	ADC_Sample@adsum+2,w	;volatile
  4113  03A8  1D03               	skipz
  4114  03A9  2BB0               	goto	u1605
  4115  03AA  0874               	movf	??_ADC_Sample+1,w
  4116  03AB  0250               	subwf	ADC_Sample@adsum+1,w	;volatile
  4117  03AC  1D03               	skipz
  4118  03AD  2BB0               	goto	u1605
  4119  03AE  0873               	movf	??_ADC_Sample,w
  4120  03AF  024F               	subwf	ADC_Sample@adsum,w	;volatile
  4121  03B0                     u1605:	
  4122  03B0  1C03               	skipc
  4123  03B1  2BBB               	goto	l981
  4124                           
  4125                           ;main.c: 293: adsum -= admin;
  4126  03B2  0853               	movf	ADC_Sample@admin,w	;volatile
  4127  03B3  00F3               	movwf	??_ADC_Sample
  4128  03B4  0854               	movf	ADC_Sample@admin+1,w	;volatile
  4129  03B5  23D6  118A         	fcall	PL4	;call to abstracted procedure
  4130  03B7  1C03               	skipc
  4131  03B8  0F76               	incfsz	??_ADC_Sample+3,w
  4132  03B9  02D2               	subwf	ADC_Sample@adsum+3,f	;volatile
  4133  03BA  2BBF               	goto	l3522
  4134  03BB                     l981:	
  4135                           
  4136                           ;main.c: 294: else
  4137                           ;main.c: 295: adsum = 0;
  4138  03BB  01CF               	clrf	ADC_Sample@adsum	;volatile
  4139  03BC  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  4140  03BD  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  4141  03BE  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  4142  03BF                     l3522:	
  4143                           
  4144                           ;main.c: 297: adresult = adsum >> 3;
  4145  03BF  084F               	movf	ADC_Sample@adsum,w	;volatile
  4146  03C0  00F3               	movwf	??_ADC_Sample
  4147  03C1  0850               	movf	ADC_Sample@adsum+1,w	;volatile
  4148  03C2  00F4               	movwf	??_ADC_Sample+1
  4149  03C3  0851               	movf	ADC_Sample@adsum+2,w	;volatile
  4150  03C4  00F5               	movwf	??_ADC_Sample+2
  4151  03C5  0852               	movf	ADC_Sample@adsum+3,w	;volatile
  4152  03C6  00F6               	movwf	??_ADC_Sample+3
  4153  03C7  3003               	movlw	3
  4154  03C8                     u1625:	
  4155  03C8  1003               	clrc
  4156  03C9  0CF6               	rrf	??_ADC_Sample+3,f
  4157  03CA  0CF5               	rrf	??_ADC_Sample+2,f
  4158  03CB  0CF4               	rrf	??_ADC_Sample+1,f
  4159  03CC  0CF3               	rrf	??_ADC_Sample,f
  4160  03CD  3EFF               	addlw	-1
  4161  03CE  1D03               	skipz
  4162  03CF  2BC8               	goto	u1625
  4163  03D0  0874               	movf	??_ADC_Sample+1,w
  4164  03D1  00A5               	movwf	_adresult+1	;volatile
  4165  03D2  0873               	movf	??_ADC_Sample,w
  4166  03D3  00A4               	movwf	_adresult	;volatile
  4167                           
  4168                           ;main.c: 299: adsum = 0;
  4169                           
  4170                           ;main.c: 300: admin = 0;
  4171                           
  4172                           ;main.c: 301: admax = 0;
  4173  03D4  23E5               	fcall	PL6	;call to abstracted procedure
  4174                           
  4175                           ;main.c: 302: return 0xA5;
  4176  03D5  34A5               	retlw	165
  4177  03D6                     __end_of_ADC_Sample:	
  4178  03D6                     PL4:	
  4179  03D6  00F4               	movwf	??_ADC_Sample+1
  4180  03D7  01F5               	clrf	??_ADC_Sample+2
  4181  03D8  01F6               	clrf	??_ADC_Sample+3
  4182  03D9  0873               	movf	??_ADC_Sample,w
  4183  03DA  02CF               	subwf	ADC_Sample@adsum,f	;volatile
  4184  03DB  0874               	movf	??_ADC_Sample+1,w
  4185  03DC  1C03               	skipc
  4186  03DD  0F74               	incfsz	??_ADC_Sample+1,w
  4187  03DE  02D0               	subwf	ADC_Sample@adsum+1,f	;volatile
  4188  03DF  0875               	movf	??_ADC_Sample+2,w
  4189  03E0  1C03               	skipc
  4190  03E1  0F75               	incfsz	??_ADC_Sample+2,w
  4191  03E2  02D1               	subwf	ADC_Sample@adsum+2,f	;volatile
  4192  03E3  0876               	movf	??_ADC_Sample+3,w
  4193  03E4  0008               	return
  4194  03E5                     __end_ofPL4:	
  4195  03E5                     PL6:	
  4196  03E5  01CF               	clrf	ADC_Sample@adsum	;volatile
  4197  03E6  01D0               	clrf	ADC_Sample@adsum+1	;volatile
  4198  03E7  01D1               	clrf	ADC_Sample@adsum+2	;volatile
  4199  03E8  01D2               	clrf	ADC_Sample@adsum+3	;volatile
  4200  03E9  01D3               	clrf	ADC_Sample@admin	;volatile
  4201  03EA  01D4               	clrf	ADC_Sample@admin+1	;volatile
  4202  03EB  01D5               	clrf	ADC_Sample@admax	;volatile
  4203  03EC  01D6               	clrf	ADC_Sample@admax+1	;volatile
  4204  03ED  0008               	return
  4205  03EE                     __end_ofPL6:	
  4206  03EE                     PL8:	
  4207  03EE  00F4               	movwf	___lwdiv@dividend
  4208  03EF  082B               	movf	_temValue+1,w
  4209  03F0  1803               	skipnc
  4210  03F1  3E01               	addlw	1
  4211  03F2  3EFF               	addlw	255
  4212  03F3  00F5               	movwf	___lwdiv@dividend+1
  4213  03F4  0008               	return
  4214  03F5                     __end_ofPL8:	
  4215  03F5                     PL12:	
  4216  03F5  3030               	movlw	48
  4217  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  4218  03F7  00DD               	movwf	_showNumBat
  4219  03F8  087B               	movf	_showBatStep,w
  4220  03F9  0008               	return
  4221  03FA                     __end_ofPL12:	
  4222  03FA                     PL14:	
  4223  03FA  0858               	movf	ADC_Sample@ad_temp+1,w	;volatile
  4224  03FB  00D6               	movwf	ADC_Sample@admax+1	;volatile
  4225  03FC  0857               	movf	ADC_Sample@ad_temp,w	;volatile
  4226  03FD  00D5               	movwf	ADC_Sample@admax	;volatile
  4227  03FE  0008               	return
  4228  03FF                     __end_ofPL14:	
  4229                           
  4230                           	psect	text18
  4231  0612                     __ptext18:	
  4232 ;; *************** function _checkBatAD *****************
  4233 ;; Defined at:
  4234 ;;		line 398 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0, pclath, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 300/0
  4245 ;;		On exit  : 300/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4248 ;;      Params:         0       0       0       0
  4249 ;;      Locals:         0       0       0       0
  4250 ;;      Temps:          0       0       0       0
  4251 ;;      Totals:         0       0       0       0
  4252 ;;Total ram usage:        0 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    2
  4255 ;; This function calls:
  4256 ;;		_ADC_Sample
  4257 ;;		_pwm1Stop
  4258 ;; This function is called by:
  4259 ;;		_main
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _checkBatAD
  4265  0612                     _checkBatAD:	
  4266                           
  4267                           ;main.c: 401: test_adc = ADC_Sample(15, 5);
  4268                           
  4269                           ;incstack = 0
  4270                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  4271  0612  3005               	movlw	5
  4272  0613  00F2               	movwf	ADC_Sample@adldo
  4273  0614  300F               	movlw	15
  4274  0615  118A  2306  118A   	fcall	_ADC_Sample
  4275  0618  00B3               	movwf	_test_adc	;volatile
  4276                           
  4277                           ;main.c: 402: if (0xA5 == test_adc)
  4278  0619  30A5               	movlw	165
  4279  061A  0633               	xorwf	_test_adc,w	;volatile
  4280  061B  1D03               	btfss	3,2
  4281  061C  0008               	return
  4282                           
  4283                           ;main.c: 403: {
  4284                           ;main.c: 404: batValue = adresult;
  4285  061D  0825               	movf	_adresult+1,w	;volatile
  4286  061E  00AF               	movwf	_batValue+1
  4287  061F  0824               	movf	_adresult,w	;volatile
  4288  0620  00AE               	movwf	_batValue
  4289                           
  4290                           ;main.c: 405: if(chrgFlag)
  4291  0621  0834               	movf	_chrgFlag,w
  4292  0622  1903               	btfsc	3,2
  4293  0623  2E50               	goto	l3900
  4294                           
  4295                           ;main.c: 406: {
  4296                           ;main.c: 407: if(batValue > 1540)
  4297  0624  3006               	movlw	6
  4298  0625  022F               	subwf	_batValue+1,w
  4299  0626  3005               	movlw	5
  4300  0627  1903               	skipnz
  4301  0628  022E               	subwf	_batValue,w
  4302                           
  4303                           ;main.c: 408: {
  4304                           ;main.c: 409: batStep = 5;
  4305  0629  3005               	movlw	5
  4306  062A  1803               	btfsc	3,0
  4307  062B  2E45               	goto	L21
  4308                           
  4309                           ;main.c: 411: else if(batValue > 1530)
  4310                           
  4311                           ;main.c: 410: }
  4312  062C  022F               	subwf	_batValue+1,w
  4313  062D  30FB               	movlw	251
  4314  062E  1903               	skipnz
  4315  062F  022E               	subwf	_batValue,w
  4316  0630  1C03               	skipc
  4317  0631  2E34               	goto	l3886
  4318  0632                     l3884:	
  4319                           
  4320                           ;main.c: 412: {
  4321                           ;main.c: 413: batStep = 4;
  4322  0632  3004               	movlw	4
  4323  0633  2E45               	goto	L21
  4324  0634                     l3886:	
  4325                           ;main.c: 414: }
  4326                           
  4327                           
  4328                           ;main.c: 415: else if(batValue > 1480)
  4329  0634  3005               	movlw	5
  4330  0635  022F               	subwf	_batValue+1,w
  4331  0636  30C9               	movlw	201
  4332  0637  1903               	skipnz
  4333  0638  022E               	subwf	_batValue,w
  4334  0639  1C03               	skipc
  4335  063A  2E3D               	goto	l3890
  4336  063B                     l3888:	
  4337                           
  4338                           ;main.c: 416: {
  4339                           ;main.c: 417: batStep = 3;
  4340  063B  3003               	movlw	3
  4341  063C  2E45               	goto	L21
  4342  063D                     l3890:	
  4343                           ;main.c: 418: }
  4344                           
  4345                           
  4346                           ;main.c: 419: else if(batValue > 1420)
  4347  063D  3005               	movlw	5
  4348  063E  022F               	subwf	_batValue+1,w
  4349  063F  308D               	movlw	141
  4350  0640  1903               	skipnz
  4351  0641  022E               	subwf	_batValue,w
  4352  0642  1C03               	skipc
  4353  0643  2E47               	goto	l3894
  4354  0644                     l3892:	
  4355                           
  4356                           ;main.c: 420: {
  4357                           ;main.c: 421: batStep = 2;
  4358  0644  3002               	movlw	2
  4359  0645                     L21:	
  4360  0645  00C3               	movwf	_batStep
  4361                           
  4362                           ;main.c: 422: }
  4363  0646  2E71               	goto	l3922
  4364  0647                     l3894:	
  4365                           
  4366                           ;main.c: 423: else if(batValue > 1266)
  4367  0647  3004               	movlw	4
  4368  0648  022F               	subwf	_batValue+1,w
  4369  0649  30F3               	movlw	243
  4370  064A                     L22:	
  4371  064A  1903               	skipnz
  4372  064B  022E               	subwf	_batValue,w
  4373                           
  4374                           ;main.c: 427: else
  4375                           ;main.c: 428: {
  4376                           ;main.c: 429: batStep = 0;
  4377                           
  4378                           ;main.c: 426: }
  4379  064C  01C3               	clrf	_batStep
  4380  064D  1803               	btfsc	3,0
  4381  064E  2E70               	goto	L23
  4382  064F  2E71               	goto	l3922
  4383  0650                     l3900:	
  4384                           
  4385                           ;main.c: 432: else
  4386                           ;main.c: 433: {
  4387                           ;main.c: 434: if(batValue > 1530)
  4388  0650  3005               	movlw	5
  4389  0651  022F               	subwf	_batValue+1,w
  4390  0652  30FB               	movlw	251
  4391  0653  1903               	skipnz
  4392  0654  022E               	subwf	_batValue,w
  4393                           
  4394                           ;main.c: 438: else if(batValue > 1480)
  4395  0655  3005               	movlw	5
  4396  0656  1803               	btfsc	3,0
  4397  0657  2E45               	goto	L21
  4398  0658  022F               	subwf	_batValue+1,w
  4399  0659  30C9               	movlw	201
  4400  065A  1903               	skipnz
  4401  065B  022E               	subwf	_batValue,w
  4402  065C  1803               	btfsc	3,0
  4403  065D  2E32               	goto	l3884
  4404                           
  4405                           ;main.c: 442: else if(batValue > 1460)
  4406  065E  3005               	movlw	5
  4407  065F  022F               	subwf	_batValue+1,w
  4408  0660  30B5               	movlw	181
  4409  0661  1903               	skipnz
  4410  0662  022E               	subwf	_batValue,w
  4411  0663  1803               	btfsc	3,0
  4412  0664  2E3B               	goto	l3888
  4413                           
  4414                           ;main.c: 446: else if(batValue > 1420)
  4415  0665  3005               	movlw	5
  4416  0666  022F               	subwf	_batValue+1,w
  4417  0667  308D               	movlw	141
  4418  0668  1903               	skipnz
  4419  0669  022E               	subwf	_batValue,w
  4420  066A  1803               	btfsc	3,0
  4421  066B  2E44               	goto	l3892
  4422                           
  4423                           ;main.c: 450: else if(batValue > 1380)
  4424  066C  3005               	movlw	5
  4425  066D  022F               	subwf	_batValue+1,w
  4426  066E  3065               	movlw	101
  4427  066F  2E4A               	goto	L22
  4428  0670                     L23:	
  4429                           ;main.c: 424: {
  4430                           ;main.c: 425: batStep = 1;
  4431                           
  4432  0670  0AC3               	incf	_batStep,f
  4433  0671                     l3922:	
  4434                           
  4435                           ;main.c: 457: }
  4436                           ;main.c: 458: }
  4437                           ;main.c: 459: if(batValue < 931)
  4438  0671  3003               	movlw	3
  4439  0672  022F               	subwf	_batValue+1,w
  4440  0673  30A3               	movlw	163
  4441  0674  1903               	skipnz
  4442  0675  022E               	subwf	_batValue,w
  4443  0676  1803               	skipnc
  4444  0677  2E86               	goto	l3932
  4445                           
  4446                           ;main.c: 460: {
  4447                           ;main.c: 461: if(++lowBatTime > 5)
  4448  0678  3006               	movlw	6
  4449  0679  0ABC               	incf	_lowBatTime,f
  4450  067A  023C               	subwf	_lowBatTime,w
  4451  067B  1C03               	skipc
  4452  067C  0008               	return
  4453                           
  4454                           ;main.c: 462: {
  4455                           ;main.c: 463: showBatStep = 0;
  4456  067D  01FB               	clrf	_showBatStep
  4457                           
  4458                           ;main.c: 464: lowBatTime = 0;
  4459  067E  01BC               	clrf	_lowBatTime
  4460                           
  4461                           ;main.c: 465: workStep = 0;
  4462  067F  01C8               	clrf	_workStep
  4463                           
  4464                           ;main.c: 466: pwm1Stop();
  4465  0680  118A  2206         	fcall	_pwm1Stop
  4466                           
  4467                           ;main.c: 467: lowBatFlag = 1;
  4468  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4469  0683  01B9               	clrf	_lowBatFlag
  4470  0684  0AB9               	incf	_lowBatFlag,f
  4471  0685  0008               	return
  4472  0686                     l3932:	
  4473                           
  4474                           ;main.c: 470: else
  4475                           ;main.c: 471: {
  4476                           ;main.c: 472: lowBatTime = 0;
  4477  0686  01BC               	clrf	_lowBatTime
  4478  0687  0008               	return
  4479  0688                     __end_of_checkBatAD:	
  4480                           
  4481                           	psect	text21
  4482  0688                     __ptext21:	
  4483 ;; *************** function _Sleep_Mode *****************
  4484 ;; Defined at:
  4485 ;;		line 170 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0, pclath, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 300/0
  4496 ;;		On exit  : 300/100
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4499 ;;      Params:         0       0       0       0
  4500 ;;      Locals:         0       0       0       0
  4501 ;;      Temps:          0       0       0       0
  4502 ;;      Totals:         0       0       0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    2
  4506 ;; This function calls:
  4507 ;;		_Init_System
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           
  4514                           ;psect for function _Sleep_Mode
  4515  0688                     _Sleep_Mode:	
  4516                           
  4517                           ;main.c: 172: INTCON = 0;
  4518                           
  4519                           ;incstack = 0
  4520                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  4521  0688  018B               	clrf	11	;volatile
  4522                           
  4523                           ;main.c: 174: OPTION_REG = 0;
  4524                           
  4525                           ;main.c: 176: TRISA = 0xE3;
  4526                           
  4527                           ;main.c: 177: PORTA = 0x00;
  4528                           
  4529                           ;main.c: 178: WPUA = 0x81;
  4530                           
  4531                           ;main.c: 179: TRISB = 0x81;
  4532                           
  4533                           ;main.c: 180: PORTB = 0;
  4534                           
  4535                           ;main.c: 181: WPUB = 0x01;
  4536                           
  4537                           ;main.c: 182: TRISC = 0x00;
  4538                           
  4539                           ;main.c: 183: PORTC = 0;
  4540  0689  26C4  118A         	fcall	PL2	;call to abstracted procedure
  4541                           
  4542                           ;main.c: 185: ADCON0 = 0;
  4543  068B  1683               	bsf	3,5	;RP0=1, select bank1
  4544  068C  1303               	bcf	3,6	;RP1=0, select bank1
  4545  068D  0195               	clrf	21	;volatile
  4546                           
  4547                           ;main.c: 186: ADCON1 = 0;
  4548  068E  0196               	clrf	22	;volatile
  4549                           
  4550                           ;main.c: 188: PWMCON0 = 0;
  4551  068F  1283               	bcf	3,5	;RP0=0, select bank0
  4552  0690  0195               	clrf	21	;volatile
  4553                           
  4554                           ;main.c: 190: OSCCON = 0X70;
  4555  0691  3070               	movlw	112
  4556  0692  0094               	movwf	20	;volatile
  4557                           
  4558                           ;main.c: 191: T2CON = 0;
  4559  0693  0193               	clrf	19	;volatile
  4560                           
  4561                           ;main.c: 192: IOCA = 0B00000010;
  4562  0694  3002               	movlw	2
  4563  0695  1683               	bsf	3,5	;RP0=1, select bank1
  4564  0696  0089               	movwf	9	;volatile
  4565                           
  4566                           ;main.c: 193: IOCB = 0B00000001;
  4567  0697  3001               	movlw	1
  4568  0698  1283               	bcf	3,5	;RP0=0, select bank0
  4569  0699  0089               	movwf	9	;volatile
  4570                           
  4571                           ;main.c: 195: RAIE = 1;
  4572  069A  158E               	bsf	14,3	;volatile
  4573                           
  4574                           ;main.c: 196: RBIE = 1;
  4575  069B  158B               	bsf	11,3	;volatile
  4576                           
  4577                           ;main.c: 197: PEIE = 1;
  4578  069C  170B               	bsf	11,6	;volatile
  4579                           
  4580                           ;main.c: 199: GIE = 0;
  4581  069D  138B               	bcf	11,7	;volatile
  4582                           
  4583                           ;main.c: 202: PORTA;
  4584  069E  1683               	bsf	3,5	;RP0=1, select bank1
  4585  069F  0806               	movf	6,w	;volatile
  4586                           
  4587                           ;main.c: 203: RAIF = 0;
  4588  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  4589  06A1  118D               	bcf	13,3	;volatile
  4590                           
  4591                           ;main.c: 204: RBIF = 0;
  4592  06A2  100B               	bcf	11,0	;volatile
  4593                           
  4594                           ;main.c: 205: PORTB;
  4595  06A3  0806               	movf	6,w	;volatile
  4596  06A4  0064               	clrwdt	;# 
  4597  06A5  0063               	sleep	;# 
  4598  06A6  0000               	nop	;# 
  4599  06A7  0064               	clrwdt	;# 
  4600                           
  4601                           ;main.c: 213: if(RAIF) RAIF = 0;
  4602  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  4603  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  4604  06AA  198D               	btfsc	13,3	;volatile
  4605  06AB  118D               	bcf	13,3	;volatile
  4606                           
  4607                           ;main.c: 215: Init_System();
  4608  06AC  2EAD               	ljmp	l3652
  4609  06AD                     __end_of_Sleep_Mode:	
  4610  06AD                     __ptext22:	
  4611 ;; *************** function _Init_System *****************
  4612 ;; Defined at:
  4613 ;;		line 77 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      void 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2
  4622 ;; Tracked objects:
  4623 ;;		On entry : 300/0
  4624 ;;		On exit  : 300/100
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4627 ;;      Params:         0       0       0       0
  4628 ;;      Locals:         0       0       0       0
  4629 ;;      Temps:          0       0       0       0
  4630 ;;      Totals:         0       0       0       0
  4631 ;;Total ram usage:        0 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    1
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_Sleep_Mode
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _Init_System
  4644  06AD                     _Init_System:	
  4645  06AD                     l3652:	
  4646                           ;incstack = 0
  4647                           ; Regs used in _Init_System: [wreg+status,2]
  4648                           
  4649  06AD  0000               	nop	;# 
  4650  06AE  0064               	clrwdt	;# 
  4651                           
  4652                           ;main.c: 81: INTCON = 0;
  4653  06AF  018B               	clrf	11	;volatile
  4654                           
  4655                           ;main.c: 82: OSCCON = 0X72;
  4656  06B0  3072               	movlw	114
  4657  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  4658  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  4659  06B3  0094               	movwf	20	;volatile
  4660                           
  4661                           ;main.c: 83: OPTION_REG = 0;
  4662                           
  4663                           ;main.c: 88: TRISA = 0xE3;
  4664                           
  4665                           ;main.c: 89: PORTA = 0x00;
  4666                           
  4667                           ;main.c: 90: WPUA = 0x81;
  4668                           
  4669                           ;main.c: 91: TRISB = 0x81;
  4670                           
  4671                           ;main.c: 92: PORTB = 0;
  4672                           
  4673                           ;main.c: 93: WPUB = 0x01;
  4674                           
  4675                           ;main.c: 94: TRISC = 0x00;
  4676                           
  4677                           ;main.c: 95: PORTC = 0;
  4678  06B4  26C4               	fcall	PL2	;call to abstracted procedure
  4679                           
  4680                           ;main.c: 97: PIE1 = 2;
  4681  06B5  3002               	movlw	2
  4682  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  4683  06B7  008E               	movwf	14	;volatile
  4684                           
  4685                           ;main.c: 98: PR2 = 250;
  4686  06B8  30FA               	movlw	250
  4687  06B9  0091               	movwf	17	;volatile
  4688                           
  4689                           ;main.c: 99: T2CON = 4;
  4690  06BA  3004               	movlw	4
  4691  06BB  0093               	movwf	19	;volatile
  4692                           
  4693                           ;main.c: 101: INTCON = 0XC0;
  4694  06BC  30C0               	movlw	192
  4695  06BD  008B               	movwf	11	;volatile
  4696                           
  4697                           ;main.c: 102: ADCON0 = 0X41;
  4698  06BE  3041               	movlw	65
  4699  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  4700  06C0  0095               	movwf	21	;volatile
  4701                           
  4702                           ;main.c: 103: ADON = 1;
  4703  06C1  1415               	bsf	21,0	;volatile
  4704                           
  4705                           ;main.c: 104: ADCON1 = 0x00;
  4706  06C2  0196               	clrf	22	;volatile
  4707  06C3  0008               	return
  4708  06C4                     __end_of_Init_System:	
  4709  06C4                     PL2:	
  4710  06C4  0181               	clrf	1	;volatile
  4711  06C5  30E3               	movlw	227
  4712  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  4713  06C7  0085               	movwf	5	;volatile
  4714  06C8  0186               	clrf	6	;volatile
  4715  06C9  3081               	movlw	129
  4716  06CA  0088               	movwf	8	;volatile
  4717  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  4718  06CC  0085               	movwf	5	;volatile
  4719  06CD  0186               	clrf	6	;volatile
  4720  06CE  3001               	movlw	1
  4721  06CF  0088               	movwf	8	;volatile
  4722  06D0  1703               	bsf	3,6	;RP1=1, select bank2
  4723  06D1  0185               	clrf	5	;volatile
  4724  06D2  0186               	clrf	6	;volatile
  4725  06D3  0008               	return
  4726  06D4                     __end_ofPL2:	
  4727                           
  4728                           	psect	text23
  4729  0743                     __ptext23:	
  4730 ;; *************** function _Isr_Timer *****************
  4731 ;; Defined at:
  4732 ;;		line 129 in file "C:\mcuproject\scm\zdt\D252_8F083_tssop20_\D252_8F083_tssop20_\main.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;		None
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;		None
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, status,2, status,0
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 300/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4746 ;;      Params:         0       0       0       0
  4747 ;;      Locals:         0       0       0       0
  4748 ;;      Temps:          2       0       0       0
  4749 ;;      Totals:         2       0       0       0
  4750 ;;Total ram usage:        2 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		Interrupt level 1
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _Isr_Timer
  4761  0743                     _Isr_Timer:	
  4762                           
  4763                           ;main.c: 131: if(TMR2IF)
  4764  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0745  1C8D               	btfss	13,1	;volatile
  4767  0746  2F66               	goto	i1l4336
  4768                           
  4769                           ;main.c: 132: {
  4770                           ;main.c: 133: TMR2IF = 0;
  4771  0747  108D               	bcf	13,1	;volatile
  4772                           
  4773                           ;main.c: 134: if(++intCount10 > 3)
  4774  0748  3004               	movlw	4
  4775  0749  0AC9               	incf	_intCount10,f
  4776  074A  0249               	subwf	_intCount10,w
  4777  074B  1C03               	skipc
  4778  074C  2F57               	goto	i1l4326
  4779                           
  4780                           ;main.c: 135: {
  4781                           ;main.c: 136: intCount10 = 0;
  4782  074D  01C9               	clrf	_intCount10
  4783                           
  4784                           ;main.c: 137: if(beepFlag)
  4785  074E  0835               	movf	_beepFlag,w
  4786  074F  1903               	btfsc	3,2
  4787  0750  2F55               	goto	i1l954
  4788                           
  4789                           ;main.c: 138: {
  4790                           ;main.c: 139: PORTC ^= 0x02;
  4791  0751  3002               	movlw	2
  4792  0752  1703               	bsf	3,6	;RP1=1, select bank2
  4793  0753  0686               	xorwf	6,f	;volatile
  4794                           
  4795                           ;main.c: 140: }
  4796  0754  2F57               	goto	i1l4326
  4797  0755                     i1l954:	
  4798                           
  4799                           ;main.c: 141: else
  4800                           ;main.c: 142: {
  4801                           ;main.c: 143: PORTC &= 0xFD;
  4802  0755  1703               	bsf	3,6	;RP1=1, select bank2
  4803  0756  1086               	bcf	6,1	;volatile
  4804  0757                     i1l4326:	
  4805                           
  4806                           ;main.c: 144: }
  4807                           ;main.c: 145: }
  4808                           ;main.c: 146: if(++MainTime >= 158)
  4809  0757  309E               	movlw	158
  4810  0758  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0759  0ACB               	incf	_MainTime,f	;volatile
  4812  075A  024B               	subwf	_MainTime,w	;volatile
  4813  075B  1C03               	skipc
  4814  075C  2F67               	goto	i1l959
  4815                           
  4816                           ;main.c: 147: {
  4817                           ;main.c: 148: MainTime = 0;
  4818  075D  01CB               	clrf	_MainTime	;volatile
  4819                           
  4820                           ;main.c: 149: B_MainLoop = 1;
  4821  075E  14FA               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  4822                           
  4823                           ;main.c: 150: if(++count1s >= 100)
  4824  075F  3064               	movlw	100
  4825  0760  0ACA               	incf	_count1s,f
  4826  0761  024A               	subwf	_count1s,w
  4827  0762  1C03               	skipc
  4828  0763  2F67               	goto	i1l959
  4829                           
  4830                           ;main.c: 151: {
  4831                           ;main.c: 152: count1s = 0;
  4832  0764  01CA               	clrf	_count1s
  4833  0765  2F67               	goto	i1l959
  4834  0766                     i1l4336:	
  4835                           
  4836                           ;main.c: 156: else
  4837                           ;main.c: 157: {
  4838                           ;main.c: 158: PIR1 = 0;
  4839  0766  018D               	clrf	13	;volatile
  4840  0767                     i1l959:	
  4841  0767  0871               	movf	??_Isr_Timer+1,w
  4842  0768  008A               	movwf	10
  4843  0769  0E70               	swapf	??_Isr_Timer^(0+-128),w
  4844  076A  0083               	movwf	3
  4845  076B  0EFE               	swapf	126,f
  4846  076C  0E7E               	swapf	126,w
  4847  076D  0009               	retfie
  4848  076E                     __end_of_Isr_Timer:	
  4849  007E                     btemp	set	126	;btemp
  4850  007E                     wtemp0	set	126
  4851                           
  4852                           	psect	intentry
  4853  0004                     __pintentry:	
  4854                           ;incstack = 0
  4855                           ; Regs used in _Isr_Timer: [wreg+status,2+status,0]
  4856                           
  4857  0004                     interrupt_function:	
  4858  007E                     saved_w	set	btemp
  4859  0004  00FE               	movwf	btemp
  4860  0005  0E03               	swapf	3,w
  4861  0006  00F0               	movwf	??_Isr_Timer
  4862  0007  080A               	movf	10,w
  4863  0008  00F1               	movwf	??_Isr_Timer+1
  4864  0009  118A  2F43         	ljmp	_Isr_Timer


Data Sizes:
    Strings     0
    Constant    13
    Data        5
    BSS         45
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     13      63
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_workCtr
    _workCtr->_setTempLed
    _checkTemAD->___lwdiv
    _setTempLed->___lbdiv
    ___lbdiv->___lbmod
    _refreshLed->_DelayUs
    _refreshLed->_ledOpen
    _keyCtr->_keyRead
    _keyCtr->_keyRead2
    _keyCtr->_keyRead3
    _chrgCtr->_setBatLed
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _checkTemAD->_ADC_Sample
    _setTempLed->___lbdiv
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5372
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                            _chrgCtr
                             _keyCtr
                         _refreshLed
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              1     1      0    2931
                                              9 COMMON     1     1      0
                            ___lbmod
                           _pwm1Init
                           _pwm1Stop
                          _setBatLed
                         _setTempLed
                         _updateTemp
 ---------------------------------------------------------------------------------
 (2) _updateTemp                                           0     0      0    1367
                         _checkTemAD
 ---------------------------------------------------------------------------------
 (3) _checkTemAD                                           0     0      0    1367
                         _ADC_Sample
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     692
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _setTempLed                                           1     1      0    1049
                                              8 COMMON     1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     427
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     436
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _pwm1Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _refreshLed                                           0     0      0    1521
                            _DelayUs
                            _ledOpen
 ---------------------------------------------------------------------------------
 (2) _ledOpen                                              2     1      1    1475
                                              2 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _DelayUs                                              2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0     157
                                              3 COMMON     1     1      0
                            _keyRead
                           _keyRead2
                           _keyRead3
                           _pwm1Stop
 ---------------------------------------------------------------------------------
 (2) _keyRead3                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead2                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0      88
                           _pwm1Stop
                          _setBatLed
 ---------------------------------------------------------------------------------
 (2) _setBatLed                                            1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           0     0      0     675
                         _ADC_Sample
                           _pwm1Stop
 ---------------------------------------------------------------------------------
 (2) _pwm1Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Sample                                          18    17      1     675
                                              2 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _Sleep_Mode
     _Init_System
   _checkBatAD
     _ADC_Sample
     _pwm1Stop
   _chrgCtr
     _pwm1Stop
     _setBatLed
   _keyCtr
     _keyRead
     _keyRead2
     _keyRead3
     _pwm1Stop
   _refreshLed
     _DelayUs
     _ledOpen
   _workCtr
     ___lbmod
     _pwm1Init
     _pwm1Stop
     _setBatLed
     _setTempLed
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _updateTemp
       _checkTemAD
         _ADC_Sample
         ___lwdiv

 _Isr_Timer (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      3F       4       78.8%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B       9        0.0%
ABS                  0      0      4B       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Sep 16 15:14:14 2025

                      pc 0002                       PL2 06C4                       PL4 03D6  
                     PL6 03E5                       PL8 03EE                       fsr 0004  
                    PL10 0607                      PL12 03F5                      PL14 03FA  
                    PL16 060D                      l971 0339                      l981 03BB  
                    l977 0375                      _GIE 005F                      _RA2 0432  
                    _RB1 0031                      _RB2 0032                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _RB6 0036  
                    _PR2 0011      __size_of_ADC_Sample 00D0                      fsr0 0004  
                    indf 0000                     S4676 070D                     l1100 00A9  
                   l1101 00B4                     l1103 00BE                     l2100 048D  
                   l2110 04B5                     l2102 0495                     l2112 04BD  
                   l2104 049D                     l1066 0046                     l2050 0508  
                   l2114 04C5                     l2106 04A5                     l1068 003C  
                   l2044 04F9                     l2116 04CD                     l2108 04AD  
                   l2061 0545                     l2053 051F                     l2046 04FC  
                   l2118 04D5                     l2070 0415                     l2055 0522  
                   l2047 04FF                     l2056 0525                     l2048 0502  
                   l2080 043D                     l2072 041D                     l2057 0528  
                   l2049 0505                     l2065 0405                     l2058 052B  
                   l2090 0465                     l2082 0445                     l2074 0425  
                   l2410 01F7                     l2059 052E                     l2092 046D  
                   l2084 044D                     l2076 042D                     l2068 040D  
                   l2094 0475                     l2086 0455                     l2078 0435  
                   l2096 047D                     l2088 045D                     l4202 0587  
                   l2098 0485                     l4300 04E9                     l3510 0369  
                   l4222 05A3                     l3512 0371                     l4224 05A5  
                   l4208 058A                     l3522 03BF                     l3506 035E  
                   l4180 056A                     l4412 0204                     l4420 01B7  
                   l4238 05BE                     l4190 0577                     l4510 00E8  
                   l3472 0317                     l4192 0578                     l3544 02EA  
                   l3482 0322                     l3474 0319                     l4194 057B  
                   l3730 0228                     l4514 00ED                     l4506 00E6  
                   l3652 06AD                     l3900 0650                     l4428 01CB  
                   l4444 01A5                     l3556 0301                     l3580 028C  
                   l3572 025E                     l4532 0106                     l3830 0531  
                   l4446 01A6                     l4438 0195                     l3590 02B9  
                   l3718 0217                     l3726 0223                     l4606 016F  
                   l4518 00F4                     l4470 00A6                     l3488 0323  
                   l3808 0600                     l3592 02BD                     l3584 029F  
                   l3576 0275                     l3568 0247                     l4608 0171  
                   l4544 0112                     l4456 0088                     l3498 0343  
                   l3922 0671                     l3690 01E4                     l3682 01D6  
                   l3826 050B                     l4298 04DD                     l4570 0132  
                   l4538 010D                     l4466 009F                     l4474 00BB  
                   l4626 06DA                     l3932 0686                     l3764 05D9  
                   l3836 0548                     l3588 02B2                     l4564 012D  
                   l4484 00D0                     l3686 01DD                     l3950 0033  
                   l4398 01F1                     l4590 014D                     l4558 0126  
                   l4654 070A                     l3960 0045                     l4584 0146  
                   l4488 00D1                     l3890 063D                     l3786 05EC  
                   l3892 0644                     l3884 0632                     l3972 005E  
                   l4596 0152                     l3894 0647                     l3886 0634  
                   l3974 0061                     l3888 063B                     _ADON 04A8  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u1605 03B0                     u1625 03C8                     u1555 0364  
                   u1565 036F                     u1655 02F3                     _PIE1 000E  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   u3727 0313                     _RBIE 005B                     _RBIF 0058  
                   _PIR1 000D                     _WPUA 0088                     _WPUB 0008  
                   _main 06D4                     btemp 007E                     start 000B  
        __end_of_DelayUs 054F         setBatLed@ledStep 0072            ??_Init_System 0072  
                  ?_main 0070          __end_of___lbdiv 0206          __end_of___lbmod 01CF  
                  _T2CON 0013          __end_of___lwdiv 0306                    i1l954 0755  
                  i1l959 0767                    _PORTA 0086                    _PORTB 0006  
                  _PORTC 0106                    _TRISA 0085                    _TRISB 0005  
                  _TRISC 0105          __end_of_chrgCtr 0079          __end_of_ledOpen 0546  
        __end_of_keyRead 05DF           __pbitbssCOMMON 03D0                    pclath 000A  
       _showWorkStepTime 003D                    status 0003                    wtemp0 007E  
        __end_of_workCtr 017E          ___lbdiv@divisor 0077          ___lbdiv@counter 004D  
        __initialization 000D             __end_of_main 070D                   ??_main 007A  
    __end_of_Init_System 06C4                   _ADCON0 0095                   _ADCON1 0096  
                 _ADRESH 0099                   _ADRESL 0098                   _GODONE 04A9  
                 i1l4326 0757                   i1l4336 0766                   _LDO_EN 04B2  
                 _INTCON 000B                ??_DelayUs 0072                   _OSCCON 0014  
                 _TMR2IF 0069             ??_ADC_Sample 0073             keyCtr@kclick 0073  
     __size_of_Isr_Timer 002B               _Sleep_Mode 0688                ??___lbdiv 0078  
       __end_of_keyRead2 05F3         __end_of_keyRead3 0607                ??___lbmod 0073  
                 _ledCnt 0032                ??___lwdiv 0076                   _keyCtr 054F  
              ??_chrgCtr 0073                   _zfStep 0037                   _result 0022  
              ??_ledOpen 0073         __end_of_pwm1Init 01B3         __end_of_pwm1Stop 0209  
       __end_of_numArray 0781                ??_keyRead 0072       __end_of_ADC_Sample 03D6  
                 saved_w 007E                ??_workCtr 0079         ___lbdiv@dividend 004C  
        ___lbmod@divisor 0072  __end_of__initialization 001C          ___lbmod@counter 0075  
         __pcstackCOMMON 0070             __pidataBANK0 0000              _Init_System 06AD  
             _batLedStep 0042               __end_ofPL2 06D4               __end_ofPL4 03E5  
             __end_ofPL6 03EE               __end_ofPL8 03F5         ___lbdiv@quotient 004E  
      __end_of_Isr_Timer 076E               _checkBatAD 0612               _checkTemAD 0231  
             __pbssBANK0 0020              ?_Sleep_Mode 0070       __size_of_setBatLed 001C  
             __pmaintext 06D4               __pintentry 0004                  ?_keyCtr 0070  
                _B_OnOff 03D0               _count1200s 0028                  _PWMCON0 0015  
             __stringtab 076E                ?_keyRead2 0070                ?_keyRead3 0070  
                _DelayUs 0546                ?_pwm1Init 0070               _maxTempNum 0040  
              ?_pwm1Stop 0070               _intCount10 0049          ADC_Sample@adldo 0072  
        ADC_Sample@admax 0055          ADC_Sample@admin 0053          ADC_Sample@adsum 004F  
                ___lbdiv 01EB                  ___lbmod 01B3                  ___lwdiv 02DC  
                _batStep 0043          __size_of_keyCtr 0072                  _chrgCtr 001F  
             _lowBatFlag 0039                  __ptext1 0079                  __ptext2 0209  
                __ptext3 0231                  __ptext4 02DC                  __ptext5 017E  
                __ptext6 01B3                  __ptext7 01EB                  __ptext8 01B0  
                __ptext9 03FF                  _ledOpen 04F7               _lowBatTime 003C  
                _count1s 004A                  _keyRead 05C1                  _tempNum 0041  
    __size_of_Sleep_Mode 0025        __end_of_setBatLed 01EB              ?_checkBatAD 0070  
                clrloop0 0782                  _workCtr 0079              ?_checkTemAD 0070  
   end_of_initialization 001C               _refreshLed 03FF               ??_keyRead2 0072  
             ??_keyRead3 0072               _setTempLed 017E               ??_pwm1Init 0072  
             ??_pwm1Stop 0072            _longPressFlag 0044            _chanceBatTime 002C  
             _showNumAge 005B               _showNumBat 005D         ___lbmod@dividend 0074  
             ledOpen@low 0072               _updateTemp 0209              ___lbmod@rem 0076  
    __size_of_checkBatAD 0076             ?_Init_System 0070      __size_of_checkTemAD 00AB  
         __end_of_keyCtr 05C1              __end_ofPL10 060D              __end_ofPL12 03FA  
            __end_ofPL14 03FF              __end_ofPL16 0612      start_initialization 000D  
              _Isr_Timer 0743              ?_refreshLed 0070              ?_setTempLed 0070  
           ??_Sleep_Mode 0072        ADC_Sample@ad_temp 0057              __pdataBANK0 0059  
               ??_keyCtr 0073              __pbssCOMMON 007B                ___latbits 0001  
          __pcstackBANK0 004C              ?_updateTemp 0070       __end_of_Sleep_Mode 06AD  
             ?_Isr_Timer 0070            _tempCheckTime 003B                 ?_DelayUs 0070  
      __size_of_keyRead2 0014        __size_of_keyRead3 0014                __pnvBANK0 005E  
       ___lwdiv@dividend 0074        __size_of_pwm1Init 0003        __size_of_pwm1Stop 0003  
               ?___lbdiv 0077                 ?___lbmod 0072                 ?___lwdiv 0072  
               ?_chrgCtr 0070      __size_of_refreshLed 00F8                __pstrings 076E  
              __pswtext1 070D                 ?_ledOpen 0072      __size_of_setTempLed 0032  
               ?_keyRead 0070                _keyCount2 0046                _keyCount3 0045  
              _firstTime 005E           ADC_Sample@adch 004D             ??_checkBatAD 0077  
       ___lwdiv@quotient 0076             ??_checkTemAD 0079                 ?_workCtr 0070  
            ADC_Sample@i 004E              ADC_Sample@j 004C                _setBatLed 01CF  
      interrupt_function 0004                 DelayUs@a 0073                clear_ram0 0781  
              _sleepTime 0030                _motorTime 0026      __size_of_updateTemp 0028  
     __end_of_checkBatAD 0688       __end_of_checkTemAD 02DC              __stringbase 0773  
   __size_of_Init_System 0017         keyRead@keyStatus 0072              ??_Isr_Timer 0070  
               _MainTime 004B               ?_setBatLed 0070              DelayUs@Time 0072  
             _ADC_Sample 0306         __size_of_DelayUs 0009         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lwdiv 002A       __end_of__stringtab 0774  
       __size_of_chrgCtr 005A                 _beepFlag 0035                 _batValue 002E  
               _beepTime 0036         __size_of_ledOpen 004F         __size_of_keyRead 001E  
               _adresult 0024                 _chrgFlag 0034          ___lwdiv@divisor 0072  
        ___lwdiv@counter 0078                 __ptext10 04F7                 __ptext11 0546  
               __ptext20 0306                 __ptext12 054F                 __ptext21 0688  
               __ptext13 05F3                 __ptext22 06AD                 __ptext14 05DF  
               __ptext23 0743                 __ptext15 05C1                 __ptext16 001F  
               __ptext17 01CF                 __ptext18 0612                 __ptext19 0206  
           ??_refreshLed 0074         __size_of_workCtr 0105                 _keyRead2 05DF  
               _keyRead3 05F3                 _keyCount 0047             ??_setTempLed 0078  
          __size_of_main 0039                 _pwm1Init 01B0                 _pwm1Stop 0206  
               _temValue 002A                 _numArray 0774                 _test_adc 0033  
               _power_ad 0020                 _workStep 0048       __end_of_refreshLed 04F7  
      _chanceTempNumTime 003E       __end_of_setTempLed 01B0             ??_updateTemp 0079  
               intlevel1 0000              ??_setBatLed 0072              ?_ADC_Sample 0072  
      keyRead2@keyStatus 0072                stringcode 076E       __end_of_updateTemp 0231  
            _showBatStep 007B               _B_MainLoop 03D1         _firstShowBatTime 0038  
      keyRead3@keyStatus 0072              _showMaxTemp 0059              _showOffTime 003A  
             _OPTION_REG 0001              _showNumAShi 005C              _showNumBShi 005A  
      setTempLed@tempLed 0078                 stringdir 076E                 stringtab 076E  
            _showTmepNum 003F             ledOpen@hight 0073  
