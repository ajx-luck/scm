

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jun 27 17:26:36 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8F083
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	swtext1,local,class=CONST,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2
    22                           	psect	text19,local,class=CODE,merge=1,delta=2
    23                           	psect	text20,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext2,local,class=CONST,delta=2
    26                           	psect	pa_nodes0,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataBANK0
    65  0000                     __pidataBANK0:	
    66                           
    67                           	psect	strings
    68  0770                     __pstrings:	
    69  0770                     stringtab:	
    70  0770                     __stringtab:	
    71  0770                     stringcode:	
    72                           ;	String table - string pointers are 1 byte each
    73                           
    74  0770                     stringdir:	
    75  0770  3007               	movlw	high stringdir
    76  0771  008A               	movwf	10
    77  0772  0804               	movf	4,w
    78  0773  0A84               	incf	4,f
    79  0774  0782               	addwf	2,f
    80  0775                     __stringbase:	
    81  0775  3400               	retlw	0
    82  0776                     __end_of__stringtab:	
    83  0776                     _numArray:	
    84  0776  343F               	retlw	63
    85  0777  3406               	retlw	6
    86  0778  345B               	retlw	91
    87  0779  344F               	retlw	79
    88  077A  3466               	retlw	102
    89  077B  346D               	retlw	109
    90  077C  347D               	retlw	125
    91  077D  3407               	retlw	7
    92  077E  347F               	retlw	127
    93  077F  346F               	retlw	111
    94  0780  3400               	retlw	0
    95  0781  3471               	retlw	113
    96  0782                     __end_of_numArray:	
    97                           
    98                           	psect	nvBANK0
    99  0061                     __pnvBANK0:	
   100  0061                     _firstTime:	
   101  0061                     	ds	1
   102  001E                     _PWMD01H	set	30
   103  001D                     _PWMCON2	set	29
   104  001A                     _PWMD1L	set	26
   105  0018                     _PWMTH	set	24
   106  0017                     _PWMTL	set	23
   107  0016                     _PWMCON1	set	22
   108  0015                     _PWMCON0	set	21
   109  0014                     _OSCCON	set	20
   110  0013                     _T2CON	set	19
   111  0011                     _PR2	set	17
   112  000E                     _PIE1	set	14
   113  000D                     _PIR1	set	13
   114  000B                     _INTCON	set	11
   115  0009                     _IOCB	set	9
   116  0008                     _WPUB	set	8
   117  0006                     _PORTB	set	6
   118  0005                     _TRISB	set	5
   119  0001                     _OPTION_REG	set	1
   120  0073                     _RAIE	set	115
   121  0069                     _TMR2IF	set	105
   122  006B                     _RAIF	set	107
   123  005E                     _PEIE	set	94
   124  005F                     _GIE	set	95
   125  0030                     _RB0	set	48
   126  0031                     _RB1	set	49
   127  0032                     _RB2	set	50
   128  0033                     _RB3	set	51
   129  0034                     _RB4	set	52
   130  0035                     _RB5	set	53
   131  0036                     _RB6	set	54
   132  0037                     _RB7	set	55
   133  0028                     _TRISB0	set	40
   134  0029                     _TRISB1	set	41
   135  002A                     _TRISB2	set	42
   136  002B                     _TRISB3	set	43
   137  002C                     _TRISB4	set	44
   138  002D                     _TRISB5	set	45
   139  002E                     _TRISB6	set	46
   140  002F                     _TRISB7	set	47
   141  0099                     _ADRESH	set	153
   142  0098                     _ADRESL	set	152
   143  0096                     _ADCON1	set	150
   144  0095                     _ADCON0	set	149
   145  0089                     _IOCA	set	137
   146  0088                     _WPUA	set	136
   147  0085                     _TRISA	set	133
   148  0086                     _PORTA	set	134
   149  04B2                     _LDO_EN	set	1202
   150  04B6                     _CHS4	set	1206
   151  04A8                     _ADON	set	1192
   152  04A9                     _GODONE	set	1193
   153  0434                     _RA4	set	1076
   154  0435                     _RA5	set	1077
   155  0436                     _RA6	set	1078
   156  042D                     _TRISA5	set	1069
   157  042E                     _TRISA6	set	1070
   158  0106                     _PORTC	set	262
   159  0105                     _TRISC	set	261
   160                           
   161                           	psect	cinit
   162  000F                     start_initialization:	
   163                           ; #config settings
   164                           
   165  000F                     __initialization:	
   166                           
   167                           ;initializer for _batSubMaxTime
   168  000F  30B8               	movlw	184
   169  0010  00DB               	movwf	__pdataBANK0& (0+127)
   170  0011  300B               	movlw	11
   171  0012  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   172                           
   173                           ;initializer for _showNumBge
   174  0013  307F               	movlw	127
   175  0014  00DD               	movwf	(__pdataBANK0+2)& (0+127)
   176                           
   177                           ;initializer for _showNumBShi
   178  0015  00DE               	movwf	(__pdataBANK0+3)& (0+127)
   179                           
   180                           ;initializer for _showNumAge
   181  0016  00DF               	movwf	(__pdataBANK0+4)& (0+127)
   182                           
   183                           ;initializer for _showNumAShi
   184  0017  00E0               	movwf	(__pdataBANK0+5)& (0+127)
   185  0018  3020               	movlw	low __pbssBANK0
   186                           
   187                           ; Clear objects allocated to BANK0
   188  0019  1383               	bcf	3,7	;select IRP bank0
   189  001A  0084               	movwf	4
   190  001B  304E               	movlw	low (__pbssBANK0+46)
   191  001C  118A  2782         	fcall	clear_ram0
   192                           
   193                           ; Clear objects allocated to COMMON
   194  001E  01F9               	clrf	__pbssCOMMON& (0+127)
   195  001F  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   196                           
   197                           ; Clear objects allocated to BITCOMMON
   198  0020  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   199  0021                     end_of_initialization:	
   200                           ;End of C runtime variable initialization code
   201                           
   202  0021                     __end_of__initialization:	
   203  0021  0183               	clrf	3
   204  0022  118A  2F31         	ljmp	_main	;jump to C main() function
   205                           
   206                           	psect	bitbssCOMMON
   207  03C0                     __pbitbssCOMMON:	
   208  03C0                     _B_OnOff:	
   209  03C0                     	ds	1
   210  03C1                     _B_MainLoop:	
   211  03C1                     	ds	1
   212                           
   213                           	psect	bssCOMMON
   214  0079                     __pbssCOMMON:	
   215  0079                     _workStep:	
   216  0079                     	ds	1
   217  007A                     _modeStep:	
   218  007A                     	ds	1
   219                           
   220                           	psect	bssBANK0
   221  0020                     __pbssBANK0:	
   222  0020                     _power_ad:	
   223  0020                     	ds	2
   224  0022                     _result:	
   225  0022                     	ds	2
   226  0024                     _adresult:	
   227  0024                     	ds	2
   228  0026                     _chrgMaxData:	
   229  0026                     	ds	2
   230  0028                     _count30s:	
   231  0028                     	ds	2
   232  002A                     _batSubCount:	
   233  002A                     	ds	2
   234  002C                     _count10s:	
   235  002C                     	ds	2
   236  002E                     _sleepTime:	
   237  002E                     	ds	2
   238  0030                     _R_AIN6_DATA:	
   239  0030                     	ds	2
   240  0032                     _R_AIN2_DATA:	
   241  0032                     	ds	2
   242  0034                     _batValue:	
   243  0034                     	ds	2
   244  0036                     _wait30s:	
   245  0036                     	ds	2
   246  0038                     _count1s:	
   247  0038                     	ds	2
   248  003A                     _test_adc:	
   249  003A                     	ds	1
   250  003B                     _lowBatTime:	
   251  003B                     	ds	1
   252  003C                     _chrgTime:	
   253  003C                     	ds	1
   254  003D                     _showBatValueAddTime:	
   255  003D                     	ds	1
   256  003E                     _overTime:	
   257  003E                     	ds	1
   258  003F                     _lowBatFlag:	
   259  003F                     	ds	1
   260  0040                     _count900s:	
   261  0040                     	ds	1
   262  0041                     _chrgStep:	
   263  0041                     	ds	1
   264  0042                     _count2s:	
   265  0042                     	ds	1
   266  0043                     _keyTime:	
   267  0043                     	ds	1
   268  0044                     _showFlag:	
   269  0044                     	ds	1
   270  0045                     _showBatValue:	
   271  0045                     	ds	1
   272  0046                     _pwmDuty:	
   273  0046                     	ds	1
   274  0047                     _preKeyNum:	
   275  0047                     	ds	1
   276  0048                     _keyNum:	
   277  0048                     	ds	1
   278  0049                     _chrgFlag:	
   279  0049                     	ds	1
   280  004A                     _longPressFlag:	
   281  004A                     	ds	1
   282  004B                     _keyCount:	
   283  004B                     	ds	1
   284  004C                     _MainTime:	
   285  004C                     	ds	1
   286  004D                     _ledCnt:	
   287  004D                     	ds	1
   288                           
   289                           	psect	dataBANK0
   290  005B                     __pdataBANK0:	
   291  005B                     _batSubMaxTime:	
   292  005B                     	ds	2
   293  005D                     _showNumBge:	
   294  005D                     	ds	1
   295  005E                     _showNumBShi:	
   296  005E                     	ds	1
   297  005F                     _showNumAge:	
   298  005F                     	ds	1
   299  0060                     _showNumAShi:	
   300  0060                     	ds	1
   301                           
   302                           	psect	clrtext
   303  0782                     clear_ram0:	
   304                           ;	Called with FSR containing the base address, and
   305                           ;	W with the last address+1
   306                           
   307  0782  0064               	clrwdt	;clear the watchdog before getting into this loop
   308  0783                     clrloop0:	
   309  0783  0180               	clrf	0	;clear RAM location pointed to by FSR
   310  0784  0A84               	incf	4,f	;increment pointer
   311  0785  0604               	xorwf	4,w	;XOR with final address
   312  0786  1903               	btfsc	3,2	;have we reached the end yet?
   313  0787  3400               	retlw	0	;all done for this memory range, return
   314  0788  0604               	xorwf	4,w	;XOR again to restore value
   315  0789  2F83               	goto	clrloop0	;do the next byte
   316                           
   317                           	psect	cstackCOMMON
   318  0070                     __pcstackCOMMON:	
   319  0070                     ?_updateLed:	
   320  0070                     ??_updateLed:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_refreshLed:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ??_refreshLed:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_Init_System:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_Isr_Timer:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ??_Isr_Timer:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_Sleep_Mode:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_pwmInit:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_pwmStop:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_keyRead:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_keyCtr:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_workCtr:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_chrgCtr:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_showCtr:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_checkOutA:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_checkBatValue:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_taskSecond:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_batCtr:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_main:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_A1:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ??_A1:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_A2:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_A2:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_A3:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ??_A3:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_A4:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ??_A4:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ?_A5:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ??_A5:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_A6:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ??_A6:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_A7:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ??_A7:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_B1:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_B1:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_B2:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ??_B2:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_B3:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ??_B3:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_B4:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ??_B4:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_B5:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ??_B5:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_B6:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ??_B6:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?_B7:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ??_B7:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0070                     ?_C1:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     ??_C1:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_C2:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_C2:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_C3:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ??_C3:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_C4:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ??_C4:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_C5:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ??_C5:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_C6:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ??_C6:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_C7:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ??_C7:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_D1:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ??_D1:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_D2:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ??_D2:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_D3:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ??_D3:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     ?_D4:	
   522                           ; 1 bytes @ 0x0
   523                           
   524  0070                     ??_D4:	
   525                           ; 1 bytes @ 0x0
   526                           
   527  0070                     ?_D5:	
   528                           ; 1 bytes @ 0x0
   529                           
   530  0070                     ??_D5:	
   531                           ; 1 bytes @ 0x0
   532                           
   533  0070                     ?_D6:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ??_D6:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ?_D7:	
   540                           ; 1 bytes @ 0x0
   541                           
   542  0070                     ??_D7:	
   543                           ; 1 bytes @ 0x0
   544                           
   545  0070                     ?_led1:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ??_led1:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ?_led2:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ??_led2:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_led3:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ??_led3:	
   561                           ; 1 bytes @ 0x0
   562                           
   563                           
   564                           ; 1 bytes @ 0x0
   565  0070                     	ds	3
   566  0073                     ??_Init_System:	
   567  0073                     ??_Sleep_Mode:	
   568                           ; 1 bytes @ 0x3
   569                           
   570  0073                     ?_ADC_Sample:	
   571                           ; 1 bytes @ 0x3
   572                           
   573  0073                     ??_pwmInit:	
   574                           ; 1 bytes @ 0x3
   575                           
   576  0073                     ??_pwmStop:	
   577                           ; 1 bytes @ 0x3
   578                           
   579  0073                     ??_keyRead:	
   580                           ; 1 bytes @ 0x3
   581                           
   582  0073                     ??_chrgCtr:	
   583                           ; 1 bytes @ 0x3
   584                           
   585  0073                     ??_taskSecond:	
   586                           ; 1 bytes @ 0x3
   587                           
   588  0073                     ??_batCtr:	
   589                           ; 1 bytes @ 0x3
   590                           
   591  0073                     ?___lbdiv:	
   592                           ; 1 bytes @ 0x3
   593                           
   594  0073                     ?___lbmod:	
   595                           ; 1 bytes @ 0x3
   596                           
   597  0073                     ?___wmul:	
   598                           ; 1 bytes @ 0x3
   599                           
   600  0073                     ?___lwdiv:	
   601                           ; 2 bytes @ 0x3
   602                           
   603  0073                     ?___lwmod:	
   604                           ; 2 bytes @ 0x3
   605                           
   606  0073                     ADC_Sample@adldo:	
   607                           ; 2 bytes @ 0x3
   608                           
   609  0073                     keyRead@keyStatus:	
   610                           ; 1 bytes @ 0x3
   611                           
   612  0073                     ___lbdiv@divisor:	
   613                           ; 1 bytes @ 0x3
   614                           
   615  0073                     ___lbmod@divisor:	
   616                           ; 1 bytes @ 0x3
   617                           
   618  0073                     ___wmul@multiplier:	
   619                           ; 1 bytes @ 0x3
   620                           
   621  0073                     ___lwdiv@divisor:	
   622                           ; 2 bytes @ 0x3
   623                           
   624  0073                     ___lwmod@divisor:	
   625                           ; 2 bytes @ 0x3
   626                           
   627                           
   628                           ; 2 bytes @ 0x3
   629  0073                     	ds	1
   630  0074                     ??_ADC_Sample:	
   631  0074                     ??_keyCtr:	
   632                           ; 1 bytes @ 0x4
   633                           
   634  0074                     ??___lbdiv:	
   635                           ; 1 bytes @ 0x4
   636                           
   637  0074                     ??___lbmod:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0074                     ___lbdiv@dividend:	
   641                           ; 1 bytes @ 0x4
   642                           
   643                           
   644                           ; 1 bytes @ 0x4
   645  0074                     	ds	1
   646  0075                     keyCtr@keyStatus:	
   647  0075                     ___lbdiv@counter:	
   648                           ; 1 bytes @ 0x5
   649                           
   650  0075                     ___lbmod@dividend:	
   651                           ; 1 bytes @ 0x5
   652                           
   653  0075                     ___wmul@multiplicand:	
   654                           ; 1 bytes @ 0x5
   655                           
   656  0075                     ___lwdiv@dividend:	
   657                           ; 2 bytes @ 0x5
   658                           
   659  0075                     ___lwmod@dividend:	
   660                           ; 2 bytes @ 0x5
   661                           
   662                           
   663                           ; 2 bytes @ 0x5
   664  0075                     	ds	1
   665  0076                     keyCtr@keyClick:	
   666  0076                     ___lbdiv@quotient:	
   667                           ; 1 bytes @ 0x6
   668                           
   669  0076                     ___lbmod@counter:	
   670                           ; 1 bytes @ 0x6
   671                           
   672                           
   673                           ; 1 bytes @ 0x6
   674  0076                     	ds	1
   675  0077                     ??___wmul:	
   676  0077                     ??___lwdiv:	
   677                           ; 1 bytes @ 0x7
   678                           
   679  0077                     ??___lwmod:	
   680                           ; 1 bytes @ 0x7
   681                           
   682  0077                     ___lbmod@rem:	
   683                           ; 1 bytes @ 0x7
   684                           
   685  0077                     ___lwmod@counter:	
   686                           ; 1 bytes @ 0x7
   687                           
   688                           
   689                           ; 1 bytes @ 0x7
   690  0077                     	ds	1
   691  0078                     ??_showCtr:	
   692  0078                     ??_checkOutA:	
   693                           ; 1 bytes @ 0x8
   694                           
   695  0078                     ??_checkBatValue:	
   696                           ; 1 bytes @ 0x8
   697                           
   698  0078                     ??_main:	
   699                           ; 1 bytes @ 0x8
   700                           
   701                           
   702                           	psect	cstackBANK0
   703  004E                     __pcstackBANK0:	
   704                           ; 1 bytes @ 0x8
   705                           
   706  004E                     ADC_Sample@j:	
   707  004E                     ___lwdiv@counter:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  004E                     ___wmul@product:	
   711                           ; 1 bytes @ 0x0
   712                           
   713                           
   714                           ; 2 bytes @ 0x0
   715  004E                     	ds	1
   716  004F                     ADC_Sample@adch:	
   717  004F                     ___lwdiv@quotient:	
   718                           ; 1 bytes @ 0x1
   719                           
   720                           
   721                           ; 2 bytes @ 0x1
   722  004F                     	ds	1
   723  0050                     ??_workCtr:	
   724  0050                     ADC_Sample@i:	
   725                           ; 1 bytes @ 0x2
   726                           
   727                           
   728                           ; 1 bytes @ 0x2
   729  0050                     	ds	1
   730  0051                     ADC_Sample@adsum:	
   731                           
   732                           ; 4 bytes @ 0x3
   733  0051                     	ds	4
   734  0055                     ADC_Sample@admin:	
   735                           
   736                           ; 2 bytes @ 0x7
   737  0055                     	ds	2
   738  0057                     ADC_Sample@admax:	
   739                           
   740                           ; 2 bytes @ 0x9
   741  0057                     	ds	2
   742  0059                     ADC_Sample@ad_temp:	
   743                           
   744                           ; 2 bytes @ 0xB
   745  0059                     	ds	2
   746                           
   747                           	psect	maintext
   748  0731                     __pmaintext:	
   749 ;;
   750 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   751 ;;
   752 ;; *************** function _main *****************
   753 ;; Defined at:
   754 ;;		line 872 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : B00/0
   765 ;;		On exit  : 300/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   768 ;;      Params:         0       0       0       0
   769 ;;      Locals:         0       0       0       0
   770 ;;      Temps:          0       0       0       0
   771 ;;      Totals:         0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels required when called:    7
   774 ;; This function calls:
   775 ;;		_Init_System
   776 ;;		_batCtr
   777 ;;		_checkBatValue
   778 ;;		_checkOutA
   779 ;;		_chrgCtr
   780 ;;		_keyCtr
   781 ;;		_showCtr
   782 ;;		_taskSecond
   783 ;;		_workCtr
   784 ;; This function is called by:
   785 ;;		Startup code after reset
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           
   790                           ;psect for function _main
   791  0731                     _main:	
   792                           
   793                           ;main.c: 874: Init_System();
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   797  0731  118A  24F1  118A   	fcall	_Init_System
   798                           
   799                           ;main.c: 876: firstTime = 200;
   800  0734  30C8               	movlw	200
   801  0735  1283               	bcf	3,5	;RP0=0, select bank0
   802  0736  00E1               	movwf	_firstTime
   803  0737                     l4619:	
   804                           
   805                           ;main.c: 878: {
   806                           ;main.c: 880: if(B_MainLoop)
   807  0737  1CF8               	btfss	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   808  0738  2F37               	goto	l4619
   809                           
   810                           ;main.c: 881: {
   811                           ;main.c: 882: B_MainLoop = 0;
   812  0739  10F8               	bcf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
   813  073A  0064               	clrwdt	;# 
   814                           
   815                           ;main.c: 884: if(chrgFlag == 0)
   816  073B  1283               	bcf	3,5	;RP0=0, select bank0
   817  073C  1303               	bcf	3,6	;RP1=0, select bank0
   818  073D  0849               	movf	_chrgFlag,w
   819  073E  1D03               	btfss	3,2
   820  073F  2F43               	goto	l1153
   821                           
   822                           ;main.c: 885: {
   823                           ;main.c: 886: keyCtr();
   824  0740  118A  2520  118A   	fcall	_keyCtr
   825  0743                     l1153:	
   826                           
   827                           ;main.c: 887: }
   828                           ;main.c: 888: checkBatValue();
   829  0743  118A  2081  118A   	fcall	_checkBatValue
   830                           
   831                           ;main.c: 889: workCtr();
   832  0746  118A  23B2  118A   	fcall	_workCtr
   833                           
   834                           ;main.c: 890: chrgCtr();
   835  0749  118A  2689  118A   	fcall	_chrgCtr
   836                           
   837                           ;main.c: 891: batCtr();
   838  074C  118A  2024  118A   	fcall	_batCtr
   839                           
   840                           ;main.c: 892: taskSecond();
   841  074F  118A  26FB  118A   	fcall	_taskSecond
   842                           
   843                           ;main.c: 893: if(firstTime == 0)
   844  0752  0861               	movf	_firstTime,w
   845  0753  1D03               	btfss	3,2
   846  0754  2F58               	goto	l4631
   847                           
   848                           ;main.c: 894: {
   849                           ;main.c: 895: showCtr();
   850  0755  118A  25DE  118A   	fcall	_showCtr
   851  0758                     l4631:	
   852                           
   853                           ;main.c: 896: }
   854                           ;main.c: 897: checkOutA();
   855  0758  118A  2062  118A   	fcall	_checkOutA
   856  075B  2F37               	goto	l4619
   857  075C                     __end_of_main:	
   858                           
   859                           	psect	text1
   860  03B2                     __ptext1:	
   861 ;; *************** function _workCtr *****************
   862 ;; Defined at:
   863 ;;		line 470 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;		None
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2, status,0, pclath, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 300/0
   874 ;;		On exit  : 200/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   877 ;;      Params:         0       0       0       0
   878 ;;      Locals:         0       0       0       0
   879 ;;      Temps:          0       2       0       0
   880 ;;      Totals:         0       2       0       0
   881 ;;Total ram usage:        2 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    6
   884 ;; This function calls:
   885 ;;		_Sleep_Mode
   886 ;;		___lwmod
   887 ;;		___wmul
   888 ;;		_pwmInit
   889 ;;		_pwmStop
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           
   896                           ;psect for function _workCtr
   897  03B2                     _workCtr:	
   898                           
   899                           ;main.c: 472: if(firstTime > 0)
   900                           
   901                           ;incstack = 0
   902                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   903  03B2  0861               	movf	_firstTime,w
   904  03B3  1903               	btfsc	3,2
   905  03B4  2BCE               	goto	l4501
   906  03B5  3078               	movlw	120
   907                           
   908                           ;main.c: 473: {
   909                           ;main.c: 474: firstTime--;
   910  03B6  03E1               	decf	_firstTime,f
   911                           
   912                           ;main.c: 475: showFlag = 1;
   913  03B7  01C4               	clrf	_showFlag
   914  03B8  0AC4               	incf	_showFlag,f
   915                           
   916                           ;main.c: 476: lowBatFlag = 0;
   917  03B9  01BF               	clrf	_lowBatFlag
   918                           
   919                           ;main.c: 477: if(firstTime < 120 && showBatValue < batValue)
   920  03BA  0261               	subwf	_firstTime,w
   921  03BB  1803               	skipnc
   922  03BC  2BC8               	goto	l4493
   923  03BD  0845               	movf	_showBatValue,w
   924  03BE  00D0               	movwf	??_workCtr
   925  03BF  01D1               	clrf	??_workCtr+1
   926  03C0  0835               	movf	_batValue+1,w
   927  03C1  0251               	subwf	??_workCtr+1,w
   928  03C2  1D03               	skipz
   929  03C3  2BC6               	goto	u3295
   930  03C4  0834               	movf	_batValue,w
   931  03C5  0250               	subwf	??_workCtr,w
   932  03C6                     u3295:	
   933  03C6  1C03               	btfss	3,0
   934                           
   935                           ;main.c: 478: {
   936                           ;main.c: 479: showBatValue++;
   937  03C7  0AC5               	incf	_showBatValue,f
   938  03C8                     l4493:	
   939                           
   940                           ;main.c: 480: }
   941                           ;main.c: 481: showNumAShi = 0x7F;
   942  03C8  307F               	movlw	127
   943  03C9  00E0               	movwf	_showNumAShi
   944                           
   945                           ;main.c: 482: showNumAge = 0x7F;
   946  03CA  00DF               	movwf	_showNumAge
   947                           
   948                           ;main.c: 483: showNumBShi = 0x7F;
   949  03CB  00DE               	movwf	_showNumBShi
   950                           
   951                           ;main.c: 484: showNumBge = 0x7F;
   952  03CC  00DD               	movwf	_showNumBge
   953                           
   954                           ;main.c: 485: }
   955  03CD  0008               	return
   956  03CE                     l4501:	
   957                           
   958                           ;main.c: 486: else if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0)
   959  03CE  0849               	movf	_chrgFlag,w
   960  03CF  1D03               	btfss	3,2
   961  03D0  2BEF               	goto	l4521
   962  03D1  0879               	movf	_workStep,w
   963  03D2  1D03               	btfss	3,2
   964  03D3  2BEF               	goto	l4521
   965  03D4  084B               	movf	_keyCount,w
   966  03D5  1D03               	btfss	3,2
   967  03D6  2BEF               	goto	l4521
   968  03D7  0861               	movf	_firstTime,w
   969  03D8  1D03               	btfss	3,2
   970  03D9  2BEF               	goto	l4521
   971                           
   972                           ;main.c: 487: {
   973                           ;main.c: 488: showFlag = 0;
   974  03DA  01C4               	clrf	_showFlag
   975                           
   976                           ;main.c: 489: PORTA |= 0x10;
   977  03DB  1683               	bsf	3,5	;RP0=1, select bank1
   978  03DC  1606               	bsf	6,4	;volatile
   979                           
   980                           ;main.c: 490: count900s = 0;
   981  03DD  1283               	bcf	3,5	;RP0=0, select bank0
   982  03DE  01C0               	clrf	_count900s
   983                           
   984                           ;main.c: 491: pwmStop();
   985  03DF  247C  118A         	fcall	_pwmStop
   986                           
   987                           ;main.c: 492: if(++sleepTime > 200)
   988  03E1  1283               	bcf	3,5	;RP0=0, select bank0
   989  03E2  0AAE               	incf	_sleepTime,f
   990  03E3  1903               	skipnz
   991  03E4  0AAF               	incf	_sleepTime+1,f
   992  03E5  3000               	movlw	0
   993  03E6  022F               	subwf	_sleepTime+1,w
   994  03E7  30C9               	movlw	201
   995  03E8  1903               	skipnz
   996  03E9  022E               	subwf	_sleepTime,w
   997  03EA  1C03               	skipc
   998  03EB  0008               	return
   999                           
  1000                           ;main.c: 493: {
  1001                           ;main.c: 494: sleepTime = 0;
  1002  03EC  01AE               	clrf	_sleepTime
  1003  03ED  01AF               	clrf	_sleepTime+1
  1004                           
  1005                           ;main.c: 495: Sleep_Mode();
  1006  03EE  2CCC               	ljmp	l3609
  1007  03EF                     l4521:	
  1008                           ;main.c: 496: }
  1009                           ;main.c: 497: }
  1010                           
  1011                           
  1012                           ;main.c: 498: else
  1013                           ;main.c: 499: {
  1014                           ;main.c: 500: sleepTime = 0;
  1015  03EF  01AE               	clrf	_sleepTime
  1016  03F0  01AF               	clrf	_sleepTime+1
  1017                           
  1018                           ;main.c: 501: if(modeStep == 1)
  1019  03F1  0B7A               	decfsz	_modeStep,w
  1020  03F2  2BFC               	goto	l4531
  1021                           
  1022                           ;main.c: 502: {
  1023                           ;main.c: 503: showFlag = 1;
  1024  03F3  01C4               	clrf	_showFlag
  1025  03F4  0AC4               	incf	_showFlag,f
  1026                           
  1027                           ;main.c: 504: RA4 = 0;
  1028  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  1029  03F6  1206               	bcf	6,4	;volatile
  1030                           
  1031                           ;main.c: 505: pwmInit();
  1032  03F7  2481               	fcall	_pwmInit
  1033                           
  1034                           ;main.c: 506: PWMD1L= 99 + workStep;
  1035  03F8  0879               	movf	_workStep,w
  1036  03F9  3E63               	addlw	99
  1037  03FA  009A               	movwf	26	;volatile
  1038                           
  1039                           ;main.c: 507: }
  1040  03FB  0008               	return
  1041  03FC                     l4531:	
  1042                           
  1043                           ;main.c: 508: else if(modeStep == 2)
  1044  03FC  3002               	movlw	2
  1045  03FD  067A               	xorwf	_modeStep,w
  1046  03FE  1D03               	btfss	3,2
  1047  03FF  2C44               	goto	l4555
  1048                           
  1049                           ;main.c: 509: {
  1050                           ;main.c: 510: showFlag = 1;
  1051                           
  1052                           ;main.c: 511: RA4 = 0;
  1053                           
  1054                           ;main.c: 512: if(++count10s >= 600)
  1055  0400  2512  118A         	fcall	PL10	;call to abstracted procedure
  1056  0402  1903               	skipnz
  1057  0403  0AAD               	incf	_count10s+1,f
  1058  0404  3002               	movlw	2
  1059  0405  022D               	subwf	_count10s+1,w
  1060  0406  3058               	movlw	88
  1061  0407  1903               	skipnz
  1062  0408  022C               	subwf	_count10s,w
  1063  0409  1C03               	skipc
  1064  040A  2C0D               	goto	l4539
  1065                           
  1066                           ;main.c: 513: {
  1067                           ;main.c: 514: count10s = 0;
  1068  040B  01AC               	clrf	_count10s
  1069  040C  01AD               	clrf	_count10s+1
  1070  040D                     l4539:	
  1071                           
  1072                           ;main.c: 515: }
  1073                           ;main.c: 516: if(count10s % 3 == 0)
  1074  040D  3003               	movlw	3
  1075  040E  00F3               	movwf	___lwmod@divisor
  1076  040F  01F4               	clrf	___lwmod@divisor+1
  1077  0410  082D               	movf	_count10s+1,w
  1078  0411  00F6               	movwf	___lwmod@dividend+1
  1079  0412  082C               	movf	_count10s,w
  1080  0413  00F5               	movwf	___lwmod@dividend
  1081  0414  248F  118A         	fcall	___lwmod
  1082  0416  0873               	movf	?___lwmod,w
  1083  0417  0474               	iorwf	?___lwmod+1,w
  1084  0418  1D03               	btfss	3,2
  1085  0419  2C40               	goto	l4551
  1086                           
  1087                           ;main.c: 517: {
  1088                           ;main.c: 518: if(count10s < 400)
  1089  041A  3001               	movlw	1
  1090  041B  022D               	subwf	_count10s+1,w
  1091  041C  3090               	movlw	144
  1092  041D  1903               	skipnz
  1093  041E  022C               	subwf	_count10s,w
  1094  041F  1803               	skipnc
  1095  0420  2C3C               	goto	l4547
  1096                           
  1097                           ;main.c: 519: {
  1098                           ;main.c: 520: if(pwmDuty < (169 + (workStep*10)))
  1099  0421  0879               	movf	_workStep,w
  1100  0422  00F3               	movwf	___wmul@multiplier
  1101  0423  300A               	movlw	10
  1102  0424  01F4               	clrf	___wmul@multiplier+1
  1103  0425  00F5               	movwf	___wmul@multiplicand
  1104  0426  01F6               	clrf	___wmul@multiplicand+1
  1105  0427  24B3  118A         	fcall	___wmul
  1106  0429  0873               	movf	?___wmul,w
  1107  042A  3EA9               	addlw	169
  1108  042B  00D0               	movwf	??_workCtr
  1109  042C  0874               	movf	?___wmul+1,w
  1110  042D  1803               	skipnc
  1111  042E  3E01               	addlw	1
  1112  042F  00D1               	movwf	??_workCtr+1
  1113  0430  3A80               	xorlw	128
  1114  0431  3C80               	sublw	128
  1115  0432  1D03               	skipz
  1116  0433  2C36               	goto	u3405
  1117  0434  0850               	movf	??_workCtr,w
  1118  0435  0246               	subwf	_pwmDuty,w
  1119  0436                     u3405:	
  1120  0436  1803               	skipnc
  1121  0437  2C40               	goto	l4551
  1122                           
  1123                           ;main.c: 521: {
  1124                           ;main.c: 522: pwmDuty++;
  1125  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0439  1303               	bcf	3,6	;RP1=0, select bank0
  1127  043A  0AC6               	incf	_pwmDuty,f
  1128  043B  2C40               	goto	l4551
  1129  043C                     l4547:	
  1130                           
  1131                           ;main.c: 525: else
  1132                           ;main.c: 526: {
  1133                           ;main.c: 527: if(pwmDuty > 69)
  1134  043C  3046               	movlw	70
  1135  043D  0246               	subwf	_pwmDuty,w
  1136  043E  1803               	btfsc	3,0
  1137                           
  1138                           ;main.c: 528: {
  1139                           ;main.c: 529: pwmDuty--;
  1140  043F  03C6               	decf	_pwmDuty,f
  1141  0440                     l4551:	
  1142                           
  1143                           ;main.c: 530: }
  1144                           ;main.c: 531: }
  1145                           ;main.c: 532: }
  1146                           ;main.c: 533: pwmInit();
  1147  0440  2481               	fcall	_pwmInit
  1148                           
  1149                           ;main.c: 534: PWMD1L = pwmDuty;
  1150  0441  0846               	movf	_pwmDuty,w
  1151  0442  009A               	movwf	26	;volatile
  1152                           
  1153                           ;main.c: 535: }
  1154  0443  0008               	return
  1155  0444                     l4555:	
  1156                           
  1157                           ;main.c: 536: else if(modeStep == 3)
  1158  0444  3003               	movlw	3
  1159  0445  067A               	xorwf	_modeStep,w
  1160  0446  1D03               	btfss	3,2
  1161  0447  2C70               	goto	l4573
  1162                           
  1163                           ;main.c: 537: {
  1164                           ;main.c: 538: showFlag = 1;
  1165                           
  1166                           ;main.c: 539: RA4 = 0;
  1167                           
  1168                           ;main.c: 540: if(++count10s > 125)
  1169  0448  2512  118A         	fcall	PL10	;call to abstracted procedure
  1170  044A  1903               	skipnz
  1171  044B  0AAD               	incf	_count10s+1,f
  1172  044C  3000               	movlw	0
  1173  044D  022D               	subwf	_count10s+1,w
  1174  044E  307E               	movlw	126
  1175  044F  1903               	skipnz
  1176  0450  022C               	subwf	_count10s,w
  1177  0451  1C03               	skipc
  1178  0452  2C55               	goto	l4563
  1179                           
  1180                           ;main.c: 541: {
  1181                           ;main.c: 542: count10s = 0;
  1182  0453  01AC               	clrf	_count10s
  1183  0454  01AD               	clrf	_count10s+1
  1184  0455                     l4563:	
  1185                           
  1186                           ;main.c: 543: }
  1187                           ;main.c: 544: if(count10s < 100)
  1188  0455  3000               	movlw	0
  1189  0456  022D               	subwf	_count10s+1,w
  1190  0457  3064               	movlw	100
  1191  0458  1903               	skipnz
  1192  0459  022C               	subwf	_count10s,w
  1193  045A  1803               	skipnc
  1194  045B  2C68               	goto	l4569
  1195                           
  1196                           ;main.c: 545: {
  1197                           ;main.c: 546: pwmInit();
  1198  045C  2481               	fcall	_pwmInit
  1199                           
  1200                           ;main.c: 547: PWMD1L= 139 + (workStep*20);
  1201  045D  0E79               	swapf	_workStep,w
  1202  045E  39F0               	andlw	240
  1203  045F  00D0               	movwf	??_workCtr
  1204  0460  0879               	movf	_workStep,w
  1205  0461  0779               	addwf	_workStep,w
  1206  0462  07D0               	addwf	??_workCtr,f
  1207  0463  07D0               	addwf	??_workCtr,f
  1208  0464  0850               	movf	??_workCtr,w
  1209  0465  3E8B               	addlw	139
  1210  0466  009A               	movwf	26	;volatile
  1211                           
  1212                           ;main.c: 548: }
  1213  0467  0008               	return
  1214  0468                     l4569:	
  1215                           
  1216                           ;main.c: 549: else if(count10s < 125)
  1217  0468  3000               	movlw	0
  1218  0469  022D               	subwf	_count10s+1,w
  1219  046A  307D               	movlw	125
  1220  046B  1903               	skipnz
  1221  046C  022C               	subwf	_count10s,w
  1222  046D  1803               	skipnc
  1223  046E  0008               	return
  1224                           
  1225                           ;main.c: 550: {
  1226                           ;main.c: 551: pwmStop();
  1227  046F  2C7C               	ljmp	l3727
  1228  0470                     l4573:	
  1229                           
  1230                           ;main.c: 555: else
  1231                           ;main.c: 556: {
  1232                           ;main.c: 557: pwmStop();
  1233  0470  247C  118A         	fcall	_pwmStop
  1234                           
  1235                           ;main.c: 558: RA4 = 1;
  1236  0472  1606               	bsf	6,4	;volatile
  1237                           
  1238                           ;main.c: 559: if(chrgFlag)
  1239  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1240  0474  0849               	movf	_chrgFlag,w
  1241  0475  1903               	btfsc	3,2
  1242  0476  2C7A               	goto	l4581
  1243                           
  1244                           ;main.c: 560: {
  1245                           ;main.c: 561: showFlag = 1;
  1246  0477  01C4               	clrf	_showFlag
  1247  0478  0AC4               	incf	_showFlag,f
  1248                           
  1249                           ;main.c: 562: }
  1250  0479  0008               	return
  1251  047A                     l4581:	
  1252                           
  1253                           ;main.c: 563: else
  1254                           ;main.c: 564: {
  1255                           ;main.c: 565: showFlag = 0;
  1256  047A  01C4               	clrf	_showFlag
  1257  047B  0008               	return
  1258  047C                     __end_of_workCtr:	
  1259  047C                     __ptext2:	
  1260 ;; *************** function _pwmStop *****************
  1261 ;; Defined at:
  1262 ;;		line 306 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		status,2
  1271 ;; Tracked objects:
  1272 ;;		On entry : 300/0
  1273 ;;		On exit  : 300/100
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       0       0       0
  1277 ;;      Locals:         0       0       0       0
  1278 ;;      Temps:          0       0       0       0
  1279 ;;      Totals:         0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    4
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_workCtr
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function _pwmStop
  1292  047C                     _pwmStop:	
  1293  047C                     l3727:	
  1294                           ;incstack = 0
  1295                           ; Regs used in _pwmStop: [status,2]
  1296                           
  1297                           
  1298                           ;main.c: 308: PWMD1L = 0;
  1299  047C  019A               	clrf	26	;volatile
  1300                           
  1301                           ;main.c: 309: PWMCON0 &= 0xFD;
  1302  047D  1095               	bcf	21,1	;volatile
  1303                           
  1304                           ;main.c: 310: PORTA &= 0xFD;
  1305  047E  1683               	bsf	3,5	;RP0=1, select bank1
  1306  047F  1086               	bcf	6,1	;volatile
  1307  0480  0008               	return
  1308  0481                     __end_of_pwmStop:	
  1309  0481                     __ptext3:	
  1310 ;; *************** function _pwmInit *****************
  1311 ;; Defined at:
  1312 ;;		line 294 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;		None
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2, status,0
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/100
  1323 ;;		On exit  : 300/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1326 ;;      Params:         0       0       0       0
  1327 ;;      Locals:         0       0       0       0
  1328 ;;      Temps:          0       0       0       0
  1329 ;;      Totals:         0       0       0       0
  1330 ;;Total ram usage:        0 bytes
  1331 ;; Hardware stack levels used:    1
  1332 ;; Hardware stack levels required when called:    4
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_workCtr
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           
  1341                           ;psect for function _pwmInit
  1342  0481                     _pwmInit:	
  1343                           
  1344                           ;main.c: 297: PWMTH = 0x00;
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _pwmInit: [wreg+status,2+status,0]
  1348  0481  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0482  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0483  0198               	clrf	24	;volatile
  1351                           
  1352                           ;main.c: 298: PWMTL = 200;
  1353  0484  30C8               	movlw	200
  1354  0485  0097               	movwf	23	;volatile
  1355                           
  1356                           ;main.c: 299: PWMD01H = 0x00;
  1357  0486  019E               	clrf	30	;volatile
  1358                           
  1359                           ;main.c: 300: PWMD1L = 32;
  1360  0487  3020               	movlw	32
  1361  0488  009A               	movwf	26	;volatile
  1362                           
  1363                           ;main.c: 301: PWMCON1 = 0xC0;
  1364  0489  30C0               	movlw	192
  1365  048A  0096               	movwf	22	;volatile
  1366                           
  1367                           ;main.c: 302: PWMCON2 = 0x00;
  1368  048B  019D               	clrf	29	;volatile
  1369                           
  1370                           ;main.c: 303: PWMCON0 |= 0x62;
  1371  048C  3062               	movlw	98
  1372  048D  0495               	iorwf	21,f	;volatile
  1373  048E  0008               	return
  1374  048F                     __end_of_pwmInit:	
  1375  048F                     __ptext5:	
  1376 ;; *************** function ___lwmod *****************
  1377 ;; Defined at:
  1378 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwmod.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  divisor         2    3[COMMON] unsigned int 
  1381 ;;  dividend        2    5[COMMON] unsigned int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  counter         1    7[COMMON] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2    3[COMMON] unsigned int 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 300/0
  1390 ;;		On exit  : 300/0
  1391 ;;		Unchanged: 300/0
  1392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1393 ;;      Params:         4       0       0       0
  1394 ;;      Locals:         1       0       0       0
  1395 ;;      Temps:          0       0       0       0
  1396 ;;      Totals:         5       0       0       0
  1397 ;;Total ram usage:        5 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    4
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_workCtr
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function ___lwmod
  1409  048F                     ___lwmod:	
  1410                           
  1411                           ;incstack = 0
  1412                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1413  048F  0873               	movf	___lwmod@divisor,w
  1414  0490  0474               	iorwf	___lwmod@divisor+1,w
  1415  0491  1903               	btfsc	3,2
  1416  0492  2CAE               	goto	l3993
  1417  0493  01F7               	clrf	___lwmod@counter
  1418  0494                     L1:	
  1419  0494  0AF7               	incf	___lwmod@counter,f
  1420  0495  1BF4               	btfsc	___lwmod@divisor+1,7
  1421  0496  2C9B               	goto	l3985
  1422  0497  1003               	clrc
  1423  0498  0DF3               	rlf	___lwmod@divisor,f
  1424  0499  0DF4               	rlf	___lwmod@divisor+1,f
  1425  049A  2C94               	goto	L1
  1426  049B                     l3985:	
  1427  049B  0874               	movf	___lwmod@divisor+1,w
  1428  049C  0276               	subwf	___lwmod@dividend+1,w
  1429  049D  1D03               	skipz
  1430  049E  2CA1               	goto	u2375
  1431  049F  0873               	movf	___lwmod@divisor,w
  1432  04A0  0275               	subwf	___lwmod@dividend,w
  1433  04A1                     u2375:	
  1434  04A1  1C03               	skipc
  1435  04A2  2CAA               	goto	L2
  1436  04A3  0873               	movf	___lwmod@divisor,w
  1437  04A4  02F5               	subwf	___lwmod@dividend,f
  1438  04A5  0874               	movf	___lwmod@divisor+1,w
  1439  04A6  1C03               	skipc
  1440  04A7  03F6               	decf	___lwmod@dividend+1,f
  1441  04A8  02F6               	subwf	___lwmod@dividend+1,f
  1442  04A9  1003               	clrc
  1443  04AA                     L2:	
  1444  04AA  0CF4               	rrf	___lwmod@divisor+1,f
  1445  04AB  0CF3               	rrf	___lwmod@divisor,f
  1446  04AC  0BF7               	decfsz	___lwmod@counter,f
  1447  04AD  2C9B               	goto	l3985
  1448  04AE                     l3993:	
  1449  04AE  0876               	movf	___lwmod@dividend+1,w
  1450  04AF  00F4               	movwf	?___lwmod+1
  1451  04B0  0875               	movf	___lwmod@dividend,w
  1452  04B1  00F3               	movwf	?___lwmod
  1453  04B2  0008               	return
  1454  04B3                     __end_of___lwmod:	
  1455  04B3                     __ptext4:	
  1456 ;; *************** function ___wmul *****************
  1457 ;; Defined at:
  1458 ;;		line 15 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul16.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  multiplier      2    3[COMMON] unsigned int 
  1461 ;;  multiplicand    2    5[COMMON] unsigned int 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  product         2    0[BANK0 ] unsigned int 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  2    3[COMMON] unsigned int 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0
  1468 ;; Tracked objects:
  1469 ;;		On entry : 300/0
  1470 ;;		On exit  : 300/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1473 ;;      Params:         4       0       0       0
  1474 ;;      Locals:         0       2       0       0
  1475 ;;      Temps:          0       0       0       0
  1476 ;;      Totals:         4       2       0       0
  1477 ;;Total ram usage:        6 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    4
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_workCtr
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           
  1488                           ;psect for function ___wmul
  1489  04B3                     ___wmul:	
  1490                           
  1491                           ;incstack = 0
  1492                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1493  04B3  01CE               	clrf	___wmul@product
  1494  04B4  01CF               	clrf	___wmul@product+1
  1495  04B5                     l4439:	
  1496  04B5  1C73               	btfss	___wmul@multiplier,0
  1497  04B6  2CBD               	goto	l4443
  1498  04B7  0875               	movf	___wmul@multiplicand,w
  1499  04B8  07CE               	addwf	___wmul@product,f
  1500  04B9  1803               	skipnc
  1501  04BA  0ACF               	incf	___wmul@product+1,f
  1502  04BB  0876               	movf	___wmul@multiplicand+1,w
  1503  04BC  07CF               	addwf	___wmul@product+1,f
  1504  04BD                     l4443:	
  1505  04BD  1003               	clrc
  1506  04BE  0DF5               	rlf	___wmul@multiplicand,f
  1507  04BF  0DF6               	rlf	___wmul@multiplicand+1,f
  1508  04C0  1003               	clrc
  1509  04C1  0CF4               	rrf	___wmul@multiplier+1,f
  1510  04C2  0CF3               	rrf	___wmul@multiplier,f
  1511  04C3  0873               	movf	___wmul@multiplier,w
  1512  04C4  0474               	iorwf	___wmul@multiplier+1,w
  1513  04C5  1D03               	btfss	3,2
  1514  04C6  2CB5               	goto	l4439
  1515  04C7  084F               	movf	___wmul@product+1,w
  1516  04C8  00F4               	movwf	?___wmul+1
  1517  04C9  084E               	movf	___wmul@product,w
  1518  04CA  00F3               	movwf	?___wmul
  1519  04CB  0008               	return
  1520  04CC                     __end_of___wmul:	
  1521  04CC                     __ptext6:	
  1522 ;; *************** function _Sleep_Mode *****************
  1523 ;; Defined at:
  1524 ;;		line 156 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1525 ;; Parameters:    Size  Location     Type
  1526 ;;		None
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 300/0
  1535 ;;		On exit  : 300/100
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1538 ;;      Params:         0       0       0       0
  1539 ;;      Locals:         0       0       0       0
  1540 ;;      Temps:          0       0       0       0
  1541 ;;      Totals:         0       0       0       0
  1542 ;;Total ram usage:        0 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    5
  1545 ;; This function calls:
  1546 ;;		_Init_System
  1547 ;; This function is called by:
  1548 ;;		_workCtr
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _Sleep_Mode
  1554  04CC                     _Sleep_Mode:	
  1555  04CC                     l3609:	
  1556                           ;incstack = 0
  1557                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  1558                           
  1559                           
  1560                           ;main.c: 158: INTCON = 0;
  1561  04CC  018B               	clrf	11	;volatile
  1562                           
  1563                           ;main.c: 160: OPTION_REG = 0;
  1564                           
  1565                           ;main.c: 162: TRISA = 0B10001101;
  1566                           
  1567                           ;main.c: 163: PORTA = 0B00010000;
  1568  04CD  2519  118A         	fcall	PL14	;call to abstracted procedure
  1569                           
  1570                           ;main.c: 164: WPUA = 0B00000000;
  1571  04CF  0188               	clrf	8	;volatile
  1572                           
  1573                           ;main.c: 166: TRISB = 0B00000000;
  1574                           
  1575                           ;main.c: 167: PORTB = 0B00000000;
  1576                           
  1577                           ;main.c: 168: WPUB = 0B00000000;
  1578                           
  1579                           ;main.c: 170: TRISC = 0B00000010;
  1580                           
  1581                           ;main.c: 171: PORTC = 0B00000000;
  1582  04D0  2509  118A         	fcall	PL8	;call to abstracted procedure
  1583                           
  1584                           ;main.c: 173: ADCON0 = 0;
  1585  04D2  1683               	bsf	3,5	;RP0=1, select bank1
  1586  04D3  1303               	bcf	3,6	;RP1=0, select bank1
  1587  04D4  0195               	clrf	21	;volatile
  1588                           
  1589                           ;main.c: 174: ADCON1 = 0;
  1590  04D5  0196               	clrf	22	;volatile
  1591                           
  1592                           ;main.c: 176: PWMCON0 = 0;
  1593  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  1594  04D7  0195               	clrf	21	;volatile
  1595                           
  1596                           ;main.c: 178: OSCCON = 0X70;
  1597  04D8  3070               	movlw	112
  1598  04D9  0094               	movwf	20	;volatile
  1599                           
  1600                           ;main.c: 179: T2CON = 0;
  1601  04DA  0193               	clrf	19	;volatile
  1602                           
  1603                           ;main.c: 180: IOCA = 0B10000001;
  1604  04DB  3081               	movlw	129
  1605  04DC  1683               	bsf	3,5	;RP0=1, select bank1
  1606  04DD  0089               	movwf	9	;volatile
  1607                           
  1608                           ;main.c: 181: IOCB = 0B00000000;
  1609  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  1610  04DF  0189               	clrf	9	;volatile
  1611                           
  1612                           ;main.c: 183: RAIE = 1;
  1613  04E0  158E               	bsf	14,3	;volatile
  1614                           
  1615                           ;main.c: 184: PEIE = 1;
  1616  04E1  170B               	bsf	11,6	;volatile
  1617                           
  1618                           ;main.c: 186: GIE = 0;
  1619  04E2  138B               	bcf	11,7	;volatile
  1620                           
  1621                           ;main.c: 189: PORTA;
  1622  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  1623  04E4  0806               	movf	6,w	;volatile
  1624                           
  1625                           ;main.c: 190: RAIF = 0;
  1626  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1627  04E6  118D               	bcf	13,3	;volatile
  1628                           
  1629                           ;main.c: 191: PORTB;
  1630  04E7  0806               	movf	6,w	;volatile
  1631  04E8  0064               	clrwdt	;# 
  1632  04E9  0063               	sleep	;# 
  1633  04EA  0000               	nop	;# 
  1634  04EB  0064               	clrwdt	;# 
  1635                           
  1636                           ;main.c: 199: if(RAIF) RAIF = 0;
  1637  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1638  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1639  04EE  198D               	btfsc	13,3	;volatile
  1640  04EF  118D               	bcf	13,3	;volatile
  1641                           
  1642                           ;main.c: 201: Init_System();
  1643  04F0  2CF1               	ljmp	l3517
  1644  04F1                     __end_of_Sleep_Mode:	
  1645  04F1                     __ptext7:	
  1646 ;; *************** function _Init_System *****************
  1647 ;; Defined at:
  1648 ;;		line 74 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2
  1657 ;; Tracked objects:
  1658 ;;		On entry : 300/0
  1659 ;;		On exit  : 300/100
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1662 ;;      Params:         0       0       0       0
  1663 ;;      Locals:         0       0       0       0
  1664 ;;      Temps:          0       0       0       0
  1665 ;;      Totals:         0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    4
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_Sleep_Mode
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function _Init_System
  1679  04F1                     _Init_System:	
  1680  04F1                     l3517:	
  1681                           ;incstack = 0
  1682                           ; Regs used in _Init_System: [wreg+status,2]
  1683                           
  1684  04F1  0000               	nop	;# 
  1685  04F2  0064               	clrwdt	;# 
  1686                           
  1687                           ;main.c: 78: INTCON = 0;
  1688  04F3  018B               	clrf	11	;volatile
  1689                           
  1690                           ;main.c: 79: OSCCON = 0X72;
  1691  04F4  3072               	movlw	114
  1692  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1693  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1694  04F7  0094               	movwf	20	;volatile
  1695                           
  1696                           ;main.c: 80: OPTION_REG = 0;
  1697                           
  1698                           ;main.c: 85: TRISA = 0x8D;
  1699                           
  1700                           ;main.c: 86: PORTA = 0x10;
  1701  04F8  2519  118A         	fcall	PL14	;call to abstracted procedure
  1702                           
  1703                           ;main.c: 87: TRISB = 0x00;
  1704                           
  1705                           ;main.c: 88: PORTB = 0;
  1706                           
  1707                           ;main.c: 89: WPUB = 0x00;
  1708                           
  1709                           ;main.c: 90: TRISC = 0x02;
  1710                           
  1711                           ;main.c: 91: PORTC = 0;
  1712  04FA  2509               	fcall	PL8	;call to abstracted procedure
  1713                           
  1714                           ;main.c: 93: PIE1 = 2;
  1715  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1716  04FC  008E               	movwf	14	;volatile
  1717                           
  1718                           ;main.c: 94: PR2 = 250;
  1719  04FD  30FA               	movlw	250
  1720  04FE  0091               	movwf	17	;volatile
  1721                           
  1722                           ;main.c: 95: T2CON = 4;
  1723  04FF  3004               	movlw	4
  1724  0500  0093               	movwf	19	;volatile
  1725                           
  1726                           ;main.c: 97: INTCON = 0XC0;
  1727  0501  30C0               	movlw	192
  1728  0502  008B               	movwf	11	;volatile
  1729                           
  1730                           ;main.c: 98: ADCON0 = 0X41;
  1731  0503  3041               	movlw	65
  1732  0504  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0505  0095               	movwf	21	;volatile
  1734                           
  1735                           ;main.c: 99: ADON = 1;
  1736  0506  1415               	bsf	21,0	;volatile
  1737                           
  1738                           ;main.c: 100: ADCON1 = 0x00;
  1739  0507  0196               	clrf	22	;volatile
  1740  0508  0008               	return
  1741  0509                     __end_of_Init_System:	
  1742  0509                     PL8:	
  1743  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1744  050A  0185               	clrf	5	;volatile
  1745  050B  0186               	clrf	6	;volatile
  1746  050C  0188               	clrf	8	;volatile
  1747  050D  3002               	movlw	2
  1748  050E  1703               	bsf	3,6	;RP1=1, select bank2
  1749  050F  0085               	movwf	5	;volatile
  1750  0510  0186               	clrf	6	;volatile
  1751  0511  0008               	return
  1752  0512                     __end_ofPL8:	
  1753  0512                     PL10:	
  1754  0512  01C4               	clrf	_showFlag
  1755  0513  0AC4               	incf	_showFlag,f
  1756  0514  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0515  1206               	bcf	6,4	;volatile
  1758  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0517  0AAC               	incf	_count10s,f
  1760  0518  0008               	return
  1761  0519                     __end_ofPL10:	
  1762  0519                     PL14:	
  1763  0519  0181               	clrf	1	;volatile
  1764  051A  308D               	movlw	141
  1765  051B  1683               	bsf	3,5	;RP0=1, select bank1
  1766  051C  0085               	movwf	5	;volatile
  1767  051D  3010               	movlw	16
  1768  051E  0086               	movwf	6	;volatile
  1769  051F  0008               	return
  1770  0520                     __end_ofPL14:	
  1771                           
  1772                           	psect	text8
  1773  06FB                     __ptext8:	
  1774 ;; *************** function _taskSecond *****************
  1775 ;; Defined at:
  1776 ;;		line 780 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 300/0
  1787 ;;		On exit  : 300/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1790 ;;      Params:         0       0       0       0
  1791 ;;      Locals:         0       0       0       0
  1792 ;;      Temps:          2       0       0       0
  1793 ;;      Totals:         2       0       0       0
  1794 ;;Total ram usage:        2 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    4
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           
  1805                           ;psect for function _taskSecond
  1806  06FB                     _taskSecond:	
  1807                           
  1808                           ;main.c: 782: if(wait30s == 1)
  1809                           
  1810                           ;incstack = 0
  1811                           ; Regs used in _taskSecond: [wreg+status,2+status,0]
  1812  06FB  0336               	decf	_wait30s,w
  1813  06FC  0437               	iorwf	_wait30s+1,w
  1814  06FD  1D03               	btfss	3,2
  1815  06FE  0008               	return
  1816                           
  1817                           ;main.c: 783: {
  1818                           ;main.c: 784: wait30s = 0;
  1819  06FF  01B6               	clrf	_wait30s
  1820  0700  01B7               	clrf	_wait30s+1
  1821                           
  1822                           ;main.c: 785: if(modeStep > 0)
  1823  0701  087A               	movf	_modeStep,w
  1824  0702  1903               	btfsc	3,2
  1825  0703  2F0C               	goto	l4311
  1826                           
  1827                           ;main.c: 786: {
  1828                           ;main.c: 787: if(++count900s > 30)
  1829  0704  301F               	movlw	31
  1830  0705  0AC0               	incf	_count900s,f
  1831  0706  0240               	subwf	_count900s,w
  1832  0707  1C03               	skipc
  1833  0708  2F0D               	goto	l4313
  1834                           
  1835                           ;main.c: 788: {
  1836                           ;main.c: 789: count900s = 0;
  1837  0709  01C0               	clrf	_count900s
  1838                           
  1839                           ;main.c: 790: modeStep = 0;
  1840  070A  01FA               	clrf	_modeStep
  1841                           
  1842                           ;main.c: 791: workStep = 0;
  1843  070B  01F9               	clrf	_workStep
  1844  070C                     l4311:	
  1845                           ;main.c: 792: count900s = 0;
  1846                           
  1847                           
  1848                           ;main.c: 795: else
  1849                           ;main.c: 796: {
  1850                           ;main.c: 797: count900s = 0;
  1851  070C  01C0               	clrf	_count900s
  1852  070D                     l4313:	
  1853                           
  1854                           ;main.c: 798: }
  1855                           ;main.c: 800: if(chrgFlag)
  1856  070D  0849               	movf	_chrgFlag,w
  1857  070E  1903               	btfsc	3,2
  1858  070F  0008               	return
  1859                           
  1860                           ;main.c: 801: {
  1861                           ;main.c: 802: if(++showBatValueAddTime > 4 && showBatValue < 99)
  1862  0710  3005               	movlw	5
  1863  0711  0ABD               	incf	_showBatValueAddTime,f
  1864  0712  023D               	subwf	_showBatValueAddTime,w
  1865  0713  1C03               	skipc
  1866  0714  2F1B               	goto	l4323
  1867  0715  3063               	movlw	99
  1868  0716  0245               	subwf	_showBatValue,w
  1869  0717  1803               	skipnc
  1870  0718  2F1B               	goto	l4323
  1871                           
  1872                           ;main.c: 803: {
  1873                           ;main.c: 804: showBatValueAddTime = 0;
  1874  0719  01BD               	clrf	_showBatValueAddTime
  1875                           
  1876                           ;main.c: 805: showBatValue++;
  1877  071A  0AC5               	incf	_showBatValue,f
  1878  071B                     l4323:	
  1879                           
  1880                           ;main.c: 806: }
  1881                           ;main.c: 807: if(showBatValue < batValue)
  1882  071B  0845               	movf	_showBatValue,w
  1883  071C  00F3               	movwf	??_taskSecond
  1884  071D  01F4               	clrf	??_taskSecond+1
  1885  071E  0835               	movf	_batValue+1,w
  1886  071F  0274               	subwf	??_taskSecond+1,w
  1887  0720  1D03               	skipz
  1888  0721  2F24               	goto	u3075
  1889  0722  0834               	movf	_batValue,w
  1890  0723  0273               	subwf	??_taskSecond,w
  1891  0724                     u3075:	
  1892  0724  1803               	skipnc
  1893  0725  2F2F               	goto	l4331
  1894                           
  1895                           ;main.c: 808: {
  1896                           ;main.c: 809: if(++chrgTime > 3)
  1897  0726  3004               	movlw	4
  1898  0727  0ABC               	incf	_chrgTime,f
  1899  0728  023C               	subwf	_chrgTime,w
  1900  0729  1C03               	skipc
  1901  072A  0008               	return
  1902                           
  1903                           ;main.c: 810: {
  1904                           ;main.c: 811: chrgTime = 0;
  1905  072B  01BC               	clrf	_chrgTime
  1906                           
  1907                           ;main.c: 812: showBatValueAddTime = 0;
  1908  072C  01BD               	clrf	_showBatValueAddTime
  1909                           
  1910                           ;main.c: 813: showBatValue++;
  1911  072D  0AC5               	incf	_showBatValue,f
  1912  072E  0008               	return
  1913  072F                     l4331:	
  1914                           
  1915                           ;main.c: 817: else
  1916                           ;main.c: 818: {
  1917                           ;main.c: 819: chrgTime = 0;
  1918  072F  01BC               	clrf	_chrgTime
  1919  0730  0008               	return
  1920  0731                     __end_of_taskSecond:	
  1921                           
  1922                           	psect	text9
  1923  05DE                     __ptext9:	
  1924 ;; *************** function _showCtr *****************
  1925 ;; Defined at:
  1926 ;;		line 627 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;		None
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 300/0
  1937 ;;		On exit  : 300/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1940 ;;      Params:         0       0       0       0
  1941 ;;      Locals:         0       0       0       0
  1942 ;;      Temps:          0       0       0       0
  1943 ;;      Totals:         0       0       0       0
  1944 ;;Total ram usage:        0 bytes
  1945 ;; Hardware stack levels used:    1
  1946 ;; Hardware stack levels required when called:    5
  1947 ;; This function calls:
  1948 ;;		___lbdiv
  1949 ;;		___lbmod
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           
  1956                           ;psect for function _showCtr
  1957  05DE                     _showCtr:	
  1958                           
  1959                           ;main.c: 630: if(showBatValue >= 99)
  1960                           
  1961                           ;incstack = 0
  1962                           ; Regs used in _showCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1963  05DE  3063               	movlw	99
  1964  05DF  0245               	subwf	_showBatValue,w
  1965  05E0  1C03               	skipc
  1966  05E1  2DE5               	goto	l4213
  1967                           
  1968                           ;main.c: 631: {
  1969                           ;main.c: 632: showNumAShi = 0x6F;
  1970  05E2  306F               	movlw	111
  1971  05E3  00E0               	movwf	_showNumAShi
  1972  05E4  2DF8               	goto	L3
  1973  05E5                     l4213:	
  1974                           ;main.c: 634: }
  1975                           
  1976                           ;main.c: 633: showNumAge = 0x6F;
  1977                           
  1978                           
  1979                           ;main.c: 635: else
  1980                           ;main.c: 636: {
  1981                           ;main.c: 637: showNumAShi = numArray[(showBatValue / 10)];
  1982  05E5  300A               	movlw	10
  1983  05E6  00F3               	movwf	___lbdiv@divisor
  1984  05E7  0845               	movf	_showBatValue,w
  1985  05E8  264A               	fcall	___lbdiv
  1986  05E9  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1987  05EA  0084               	movwf	4
  1988  05EB  118A  2770  118A   	fcall	stringdir
  1989  05EE  00E0               	movwf	_showNumAShi
  1990                           
  1991                           ;main.c: 638: showNumAge = numArray[(showBatValue % 10)];
  1992  05EF  300A               	movlw	10
  1993  05F0  00F3               	movwf	___lbmod@divisor
  1994  05F1  0845               	movf	_showBatValue,w
  1995  05F2  2665               	fcall	___lbmod
  1996  05F3  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1997  05F4  0084               	movwf	4
  1998  05F5  118A  2770  118A   	fcall	stringdir
  1999  05F8                     L3:	
  2000  05F8  00DF               	movwf	_showNumAge
  2001                           
  2002                           ;main.c: 639: }
  2003                           ;main.c: 640: if(chrgFlag)
  2004  05F9  0849               	movf	_chrgFlag,w
  2005  05FA  1903               	btfsc	3,2
  2006  05FB  2E36               	goto	l4251
  2007                           
  2008                           ;main.c: 641: {
  2009                           ;main.c: 642: if(showBatValue >= 99)
  2010  05FC  3063               	movlw	99
  2011  05FD  0245               	subwf	_showBatValue,w
  2012  05FE  1C03               	skipc
  2013  05FF  2E02               	goto	l4221
  2014  0600                     l4219:	
  2015                           
  2016                           ;main.c: 643: {
  2017                           ;main.c: 644: showNumBShi = 0x39;
  2018  0600  3039               	movlw	57
  2019                           
  2020                           ;main.c: 645: showNumBge = 0x0F;
  2021                           
  2022                           ;main.c: 646: }
  2023  0601  2E81               	ljmp	PL16	;call to abstracted procedure
  2024  0602                     l4221:	
  2025                           
  2026                           ;main.c: 647: else
  2027                           ;main.c: 648: {
  2028                           ;main.c: 649: if(++count2s >= 50)
  2029  0602  3032               	movlw	50
  2030  0603  0AC2               	incf	_count2s,f
  2031  0604  0242               	subwf	_count2s,w
  2032  0605  1C03               	skipc
  2033  0606  2E29               	goto	l4249
  2034  0607  3008               	movlw	8
  2035                           
  2036                           ;main.c: 650: {
  2037                           ;main.c: 651: count2s = 0;
  2038  0608  01C2               	clrf	_count2s
  2039                           
  2040                           ;main.c: 652: if(++chrgStep >= 8)
  2041  0609  0AC1               	incf	_chrgStep,f
  2042  060A  0241               	subwf	_chrgStep,w
  2043  060B  1C03               	skipc
  2044  060C  2E29               	goto	l4249
  2045                           
  2046                           ;main.c: 653: {
  2047                           ;main.c: 654: chrgStep = 0;
  2048  060D  01C1               	clrf	_chrgStep
  2049  060E  2E29               	goto	l4249
  2050  060F                     l1090:	
  2051                           ;main.c: 658: {
  2052                           ;main.c: 659: case 0:
  2053                           
  2054                           
  2055                           ;main.c: 660: showNumBShi = 0x01;
  2056  060F  01DE               	clrf	_showNumBShi
  2057  0610  0ADE               	incf	_showNumBShi,f
  2058                           
  2059                           ;main.c: 661: showNumBge = 0x00;
  2060  0611  01DD               	clrf	_showNumBge
  2061                           
  2062                           ;main.c: 662: break;
  2063  0612  0008               	return
  2064  0613                     l1092:	
  2065                           ;main.c: 663: case 1:
  2066                           
  2067                           
  2068                           ;main.c: 664: showNumBShi = 0x01;
  2069  0613  01DE               	clrf	_showNumBShi
  2070  0614  0ADE               	incf	_showNumBShi,f
  2071                           
  2072                           ;main.c: 665: showNumBge = 0x01;
  2073  0615  01DD               	clrf	_showNumBge
  2074  0616  0ADD               	incf	_showNumBge,f
  2075                           
  2076                           ;main.c: 666: break;
  2077  0617  0008               	return
  2078  0618                     l1093:	
  2079                           ;main.c: 667: case 2:
  2080                           
  2081  0618  3003               	movlw	3
  2082                           
  2083                           ;main.c: 668: showNumBShi = 0x01;
  2084                           
  2085                           ;main.c: 669: showNumBge = 0x03;
  2086                           
  2087                           ;main.c: 670: break;
  2088  0619  2E85               	ljmp	PL18	;call to abstracted procedure
  2089  061A                     l1094:	
  2090                           ;main.c: 671: case 3:
  2091                           
  2092  061A  3007               	movlw	7
  2093                           
  2094                           ;main.c: 672: showNumBShi = 0x01;
  2095                           
  2096                           ;main.c: 673: showNumBge = 0x07;
  2097                           
  2098                           ;main.c: 674: break;
  2099  061B  2E85               	ljmp	PL18	;call to abstracted procedure
  2100  061C                     l1095:	
  2101                           ;main.c: 675: case 4:
  2102                           
  2103  061C  300F               	movlw	15
  2104                           
  2105                           ;main.c: 676: showNumBShi = 0x01;
  2106                           
  2107                           ;main.c: 677: showNumBge = 0x0F;
  2108                           
  2109                           ;main.c: 678: break;
  2110  061D  2E85               	ljmp	PL18	;call to abstracted procedure
  2111  061E                     l4237:	
  2112                           
  2113                           ;main.c: 680: showNumBShi = 0x09;
  2114  061E  3009               	movlw	9
  2115                           
  2116                           ;main.c: 681: showNumBge = 0x0F;
  2117                           
  2118                           ;main.c: 682: break;
  2119  061F  2E81               	ljmp	PL16	;call to abstracted procedure
  2120  0620                     l4239:	
  2121                           
  2122                           ;main.c: 684: showNumBShi = 0x19;
  2123  0620  3019               	movlw	25
  2124                           
  2125                           ;main.c: 685: showNumBge = 0x0F;
  2126                           
  2127                           ;main.c: 686: break;
  2128  0621  2E81               	ljmp	PL16	;call to abstracted procedure
  2129  0622                     l4243:	
  2130                           
  2131                           ;main.c: 692: showNumBShi = 0x79;
  2132  0622  3079               	movlw	121
  2133                           
  2134                           ;main.c: 693: showNumBge = 0x0F;
  2135                           
  2136                           ;main.c: 694: break;
  2137  0623  2E81               	ljmp	PL16	;call to abstracted procedure
  2138  0624                     l4245:	
  2139                           
  2140                           ;main.c: 696: showNumBShi = 0x79;
  2141  0624  3079               	movlw	121
  2142  0625  00DE               	movwf	_showNumBShi
  2143                           
  2144                           ;main.c: 697: showNumBge = 0x4F;
  2145  0626  304F               	movlw	79
  2146  0627  00DD               	movwf	_showNumBge
  2147                           
  2148                           ;main.c: 698: break;
  2149  0628  0008               	return
  2150  0629                     l4249:	
  2151  0629  0841               	movf	_chrgStep,w
  2152                           
  2153                           ; Switch size 1, requested type "space"
  2154                           ; Number of cases is 10, Range of values is 0 to 9
  2155                           ; switch strategies available:
  2156                           ; Name         Instructions Cycles
  2157                           ; direct_byte           27     7 (fixed)
  2158                           ; simple_byte           31    16 (average)
  2159                           ; jumptable            260     6 (fixed)
  2160                           ;	Chosen strategy is direct_byte
  2161  062A  0084               	movwf	4
  2162  062B  300A               	movlw	10
  2163  062C  0204               	subwf	4,w
  2164  062D  1803               	skipnc
  2165  062E  0008               	return
  2166  062F  3007               	movlw	high S4673
  2167  0630  008A               	movwf	10
  2168  0631  1003               	clrc
  2169  0632  0D04               	rlf	4,w
  2170  0633  3E5C               	addlw	low S4673
  2171  0634  0082               	movwf	2
  2172                           
  2173                           ;main.c: 703: }
  2174                           ;main.c: 705: }
  2175  0635  0008               	return
  2176  0636                     l4251:	
  2177                           
  2178                           ;main.c: 706: else
  2179                           ;main.c: 707: {
  2180                           ;main.c: 708: showNumBShi = numArray[workStep/10];
  2181  0636  300A               	movlw	10
  2182  0637  00F3               	movwf	___lbdiv@divisor
  2183  0638  0879               	movf	_workStep,w
  2184  0639  264A               	fcall	___lbdiv
  2185  063A  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2186  063B  0084               	movwf	4
  2187  063C  118A  2770  118A   	fcall	stringdir
  2188  063F  00DE               	movwf	_showNumBShi
  2189                           
  2190                           ;main.c: 709: showNumBge = numArray[workStep%10];
  2191  0640  300A               	movlw	10
  2192  0641  00F3               	movwf	___lbmod@divisor
  2193  0642  0879               	movf	_workStep,w
  2194  0643  2665               	fcall	___lbmod
  2195  0644  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  2196  0645  0084               	movwf	4
  2197  0646  118A  2770         	fcall	stringdir
  2198  0648  00DD               	movwf	_showNumBge
  2199  0649  0008               	return
  2200  064A                     __end_of_showCtr:	
  2201  064A                     __ptext11:	
  2202 ;; *************** function ___lbdiv *****************
  2203 ;; Defined at:
  2204 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;  dividend        1    wreg     unsigned char 
  2207 ;;  divisor         1    3[COMMON] unsigned char 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  dividend        1    4[COMMON] unsigned char 
  2210 ;;  quotient        1    6[COMMON] unsigned char 
  2211 ;;  counter         1    5[COMMON] unsigned char 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  1    wreg      unsigned char 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0
  2216 ;; Tracked objects:
  2217 ;;		On entry : 300/0
  2218 ;;		On exit  : 300/0
  2219 ;;		Unchanged: 300/0
  2220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2221 ;;      Params:         1       0       0       0
  2222 ;;      Locals:         3       0       0       0
  2223 ;;      Temps:          0       0       0       0
  2224 ;;      Totals:         4       0       0       0
  2225 ;;Total ram usage:        4 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    4
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_showCtr
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           
  2236                           ;psect for function ___lbdiv
  2237  064A                     ___lbdiv:	
  2238                           
  2239                           ;incstack = 0
  2240                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2241                           ;___lbdiv@dividend stored from wreg
  2242  064A  00F4               	movwf	___lbdiv@dividend
  2243  064B  01F6               	clrf	___lbdiv@quotient
  2244  064C  0873               	movf	___lbdiv@divisor,w
  2245  064D  1903               	btfsc	3,2
  2246  064E  2E63               	goto	l3929
  2247  064F  01F5               	clrf	___lbdiv@counter
  2248  0650                     l3915:	
  2249  0650  0AF5               	incf	___lbdiv@counter,f
  2250  0651  1BF3               	btfsc	___lbdiv@divisor,7
  2251  0652  2E56               	goto	l2467
  2252  0653  1003               	clrc
  2253  0654  0DF3               	rlf	___lbdiv@divisor,f
  2254  0655  2E50               	goto	l3915
  2255  0656                     l2467:	
  2256  0656  1003               	clrc
  2257  0657  0DF6               	rlf	___lbdiv@quotient,f
  2258  0658  0873               	movf	___lbdiv@divisor,w
  2259  0659  0274               	subwf	___lbdiv@dividend,w
  2260  065A  1C03               	skipc
  2261  065B  2E60               	goto	L5
  2262  065C  0873               	movf	___lbdiv@divisor,w
  2263  065D  02F4               	subwf	___lbdiv@dividend,f
  2264  065E  1476               	bsf	___lbdiv@quotient,0
  2265  065F  1003               	clrc
  2266  0660                     L5:	
  2267  0660  0CF3               	rrf	___lbdiv@divisor,f
  2268  0661  0BF5               	decfsz	___lbdiv@counter,f
  2269  0662  2E56               	goto	l2467
  2270  0663                     l3929:	
  2271  0663  0876               	movf	___lbdiv@quotient,w
  2272  0664  0008               	return
  2273  0665                     __end_of___lbdiv:	
  2274  0665                     __ptext10:	
  2275 ;; *************** function ___lbmod *****************
  2276 ;; Defined at:
  2277 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  dividend        1    wreg     unsigned char 
  2280 ;;  divisor         1    3[COMMON] unsigned char 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  dividend        1    5[COMMON] unsigned char 
  2283 ;;  rem             1    7[COMMON] unsigned char 
  2284 ;;  counter         1    6[COMMON] unsigned char 
  2285 ;; Return value:  Size  Location     Type
  2286 ;;                  1    wreg      unsigned char 
  2287 ;; Registers used:
  2288 ;;		wreg, status,2, status,0
  2289 ;; Tracked objects:
  2290 ;;		On entry : 300/0
  2291 ;;		On exit  : 300/0
  2292 ;;		Unchanged: 300/0
  2293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2294 ;;      Params:         1       0       0       0
  2295 ;;      Locals:         3       0       0       0
  2296 ;;      Temps:          1       0       0       0
  2297 ;;      Totals:         5       0       0       0
  2298 ;;Total ram usage:        5 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:    4
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_showCtr
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function ___lbmod
  2310  0665                     ___lbmod:	
  2311                           
  2312                           ;incstack = 0
  2313                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2314                           ;___lbmod@dividend stored from wreg
  2315  0665  00F5               	movwf	___lbmod@dividend
  2316  0666  3008               	movlw	8
  2317  0667  00F6               	movwf	___lbmod@counter
  2318  0668  01F7               	clrf	___lbmod@rem
  2319  0669                     l3937:	
  2320  0669  0875               	movf	___lbmod@dividend,w
  2321  066A  00F4               	movwf	??___lbmod
  2322  066B  3007               	movlw	7
  2323  066C  1003               	clrc
  2324  066D                     L4:	
  2325  066D  0CF4               	rrf	??___lbmod,f
  2326  066E  3EFF               	addlw	-1
  2327  066F  1003               	clrc
  2328  0670  1D03               	skipz
  2329  0671  2E6D               	goto	L4
  2330  0672  0D77               	rlf	___lbmod@rem,w
  2331  0673  0474               	iorwf	??___lbmod,w
  2332  0674  00F7               	movwf	___lbmod@rem
  2333  0675  1003               	clrc
  2334  0676  0DF5               	rlf	___lbmod@dividend,f
  2335  0677  0873               	movf	___lbmod@divisor,w
  2336  0678  0277               	subwf	___lbmod@rem,w
  2337  0679  1C03               	skipc
  2338  067A  2E7D               	goto	l3945
  2339  067B  0873               	movf	___lbmod@divisor,w
  2340  067C  02F7               	subwf	___lbmod@rem,f
  2341  067D                     l3945:	
  2342  067D  0BF6               	decfsz	___lbmod@counter,f
  2343  067E  2E69               	goto	l3937
  2344  067F  0877               	movf	___lbmod@rem,w
  2345  0680  0008               	return
  2346  0681                     __end_of___lbmod:	
  2347  0681                     PL16:	
  2348  0681  00DE               	movwf	_showNumBShi
  2349  0682  300F               	movlw	15
  2350  0683  00DD               	movwf	_showNumBge
  2351  0684  0008               	return
  2352  0685                     __end_ofPL16:	
  2353  0685                     PL18:	
  2354  0685  01DE               	clrf	_showNumBShi
  2355  0686  0ADE               	incf	_showNumBShi,f
  2356  0687  00DD               	movwf	_showNumBge
  2357  0688  0008               	return
  2358  0689                     __end_ofPL18:	
  2359                           
  2360                           	psect	swtext1
  2361  075C                     __pswtext1:	
  2362  075C                     S4673:	
  2363  075C  118A  2E0F         	ljmp	l1090
  2364  075E  118A  2E13         	ljmp	l1092
  2365  0760  118A  2E18         	ljmp	l1093
  2366  0762  118A  2E1A         	ljmp	l1094
  2367  0764  118A  2E1C         	ljmp	l1095
  2368  0766  118A  2E1E         	ljmp	l4237
  2369  0768  118A  2E20         	ljmp	l4239
  2370  076A  118A  2E00         	ljmp	l4219
  2371  076C  118A  2E22         	ljmp	l4243
  2372  076E  118A  2E24         	ljmp	l4245
  2373                           
  2374                           	psect	text12
  2375  0520                     __ptext12:	
  2376 ;; *************** function _keyCtr *****************
  2377 ;; Defined at:
  2378 ;;		line 377 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  keyClick        1    6[COMMON] unsigned char 
  2383 ;;  keyStatus       1    5[COMMON] unsigned char 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, pclath, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 300/0
  2390 ;;		On exit  : 300/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2393 ;;      Params:         0       0       0       0
  2394 ;;      Locals:         2       0       0       0
  2395 ;;      Temps:          1       0       0       0
  2396 ;;      Totals:         3       0       0       0
  2397 ;;Total ram usage:        3 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    5
  2400 ;; This function calls:
  2401 ;;		_keyRead
  2402 ;; This function is called by:
  2403 ;;		_main
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           
  2408                           ;psect for function _keyCtr
  2409  0520                     _keyCtr:	
  2410                           
  2411                           ;main.c: 379: unsigned char keyStatus = (0x01 & PORTA) | (0x02 & PORTC);
  2412                           
  2413                           ;incstack = 0
  2414                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  2415  0520  3002               	movlw	2
  2416  0521  1703               	bsf	3,6	;RP1=1, select bank2
  2417  0522  0506               	andwf	6,w	;volatile
  2418  0523  00F4               	movwf	??_keyCtr
  2419  0524  1683               	bsf	3,5	;RP0=1, select bank1
  2420  0525  1303               	bcf	3,6	;RP1=0, select bank1
  2421  0526  0806               	movf	6,w	;volatile
  2422  0527  3901               	andlw	1
  2423  0528  0474               	iorwf	??_keyCtr,w
  2424  0529  00F5               	movwf	keyCtr@keyStatus
  2425                           
  2426                           ;main.c: 380: unsigned char keyClick = keyRead(keyStatus);
  2427  052A  258C  118A         	fcall	_keyRead
  2428  052C  00F6               	movwf	keyCtr@keyClick
  2429                           
  2430                           ;main.c: 382: if(keyNum == 1)
  2431  052D  0B48               	decfsz	_keyNum,w
  2432  052E  2D50               	goto	l4039
  2433                           
  2434                           ;main.c: 383: {
  2435                           ;main.c: 384: if(keyClick == 1)
  2436  052F  0B76               	decfsz	keyCtr@keyClick,w
  2437  0530  2D4B               	goto	l4031
  2438                           
  2439                           ;main.c: 385: {
  2440                           ;main.c: 386: if(modeStep == 2 || modeStep == 3)
  2441  0531  3002               	movlw	2
  2442  0532  067A               	xorwf	_modeStep,w
  2443  0533  1903               	btfsc	3,2
  2444  0534  2D39               	goto	l4021
  2445  0535  3003               	movlw	3
  2446  0536  067A               	xorwf	_modeStep,w
  2447  0537  1D03               	btfss	3,2
  2448  0538  2D41               	goto	l4025
  2449  0539                     l4021:	
  2450                           
  2451                           ;main.c: 387: {
  2452                           ;main.c: 388: if(++workStep > 3)
  2453  0539  3004               	movlw	4
  2454  053A  0AF9               	incf	_workStep,f
  2455  053B  0279               	subwf	_workStep,w
  2456  053C  1C03               	skipc
  2457  053D  0008               	return
  2458                           
  2459                           ;main.c: 389: {
  2460                           ;main.c: 390: workStep = 3;
  2461  053E  3003               	movlw	3
  2462  053F  00F9               	movwf	_workStep
  2463  0540  0008               	return
  2464  0541                     l4025:	
  2465                           
  2466                           ;main.c: 393: else if(modeStep == 1)
  2467  0541  0B7A               	decfsz	_modeStep,w
  2468  0542  0008               	return
  2469                           
  2470                           ;main.c: 394: {
  2471                           ;main.c: 395: if(++workStep > 99)
  2472  0543  3064               	movlw	100
  2473  0544  0AF9               	incf	_workStep,f
  2474  0545  0279               	subwf	_workStep,w
  2475  0546  1C03               	skipc
  2476  0547  0008               	return
  2477                           
  2478                           ;main.c: 396: {
  2479                           ;main.c: 397: workStep = 99;
  2480  0548  3063               	movlw	99
  2481  0549  00F9               	movwf	_workStep
  2482  054A  0008               	return
  2483  054B                     l4031:	
  2484                           
  2485                           ;main.c: 401: else if(keyClick == 3 && modeStep == 1)
  2486  054B  3003               	movlw	3
  2487  054C  0676               	xorwf	keyCtr@keyClick,w
  2488  054D  1D03               	btfss	3,2
  2489  054E  0008               	return
  2490  054F  2D41               	goto	l4025
  2491  0550                     l4039:	
  2492                           ;main.c: 406: }
  2493                           ;main.c: 407: }
  2494                           ;main.c: 408: }
  2495                           
  2496                           ;main.c: 402: {
  2497                           ;main.c: 403: if(++workStep > 99)
  2498                           
  2499                           
  2500                           ;main.c: 409: else if(keyNum == 2)
  2501  0550  3002               	movlw	2
  2502  0551  0648               	xorwf	_keyNum,w
  2503  0552  1D03               	btfss	3,2
  2504  0553  2D7C               	goto	l4067
  2505                           
  2506                           ;main.c: 410: {
  2507                           ;main.c: 412: if(keyClick == 2)
  2508  0554  3002               	movlw	2
  2509  0555  0676               	xorwf	keyCtr@keyClick,w
  2510  0556  1D03               	btfss	3,2
  2511  0557  2D68               	goto	l4055
  2512                           
  2513                           ;main.c: 413: {
  2514                           ;main.c: 414: if(modeStep > 0)
  2515  0558  087A               	movf	_modeStep,w
  2516  0559  1903               	btfsc	3,2
  2517  055A  2D5F               	goto	l4047
  2518                           
  2519                           ;main.c: 415: {
  2520                           ;main.c: 416: modeStep = 0;
  2521  055B  01FA               	clrf	_modeStep
  2522                           
  2523                           ;main.c: 417: workStep = 0;
  2524  055C  01F9               	clrf	_workStep
  2525                           
  2526                           ;main.c: 418: count900s = 0;
  2527  055D  01C0               	clrf	_count900s
  2528                           
  2529                           ;main.c: 419: }
  2530  055E  0008               	return
  2531  055F                     l4047:	
  2532                           
  2533                           ;main.c: 420: else if(lowBatFlag == 0)
  2534  055F  083F               	movf	_lowBatFlag,w
  2535  0560  1D03               	btfss	3,2
  2536  0561  0008               	return
  2537  0562  3032               	movlw	50
  2538                           
  2539                           ;main.c: 421: {
  2540                           ;main.c: 422: modeStep = 1;
  2541  0563  01FA               	clrf	_modeStep
  2542  0564  0AFA               	incf	_modeStep,f
  2543                           
  2544                           ;main.c: 423: workStep = 50;
  2545  0565  00F9               	movwf	_workStep
  2546                           
  2547                           ;main.c: 424: count900s = 0;
  2548  0566  01C0               	clrf	_count900s
  2549  0567  0008               	return
  2550  0568                     l4055:	
  2551                           
  2552                           ;main.c: 427: else if(keyClick == 1 && workStep > 0)
  2553  0568  0B76               	decfsz	keyCtr@keyClick,w
  2554  0569  0008               	return
  2555  056A  0879               	movf	_workStep,w
  2556  056B  1903               	btfsc	3,2
  2557  056C  0008               	return
  2558                           
  2559                           ;main.c: 428: {
  2560                           ;main.c: 429: if(++modeStep > 3)
  2561  056D  3004               	movlw	4
  2562  056E  0AFA               	incf	_modeStep,f
  2563  056F  027A               	subwf	_modeStep,w
  2564  0570  1C03               	skipc
  2565  0571  2D77               	goto	l1028
  2566  0572  3032               	movlw	50
  2567                           
  2568                           ;main.c: 430: {
  2569                           ;main.c: 431: modeStep = 1;
  2570  0573  01FA               	clrf	_modeStep
  2571  0574  0AFA               	incf	_modeStep,f
  2572                           
  2573                           ;main.c: 432: workStep = 50;
  2574  0575  00F9               	movwf	_workStep
  2575                           
  2576                           ;main.c: 433: }
  2577  0576  0008               	return
  2578  0577                     l1028:	
  2579  0577  3045               	movlw	69
  2580                           
  2581                           ;main.c: 434: else
  2582                           ;main.c: 435: {
  2583                           ;main.c: 436: workStep = 1;
  2584  0578  01F9               	clrf	_workStep
  2585  0579  0AF9               	incf	_workStep,f
  2586                           
  2587                           ;main.c: 437: pwmDuty = 69;
  2588  057A  00C6               	movwf	_pwmDuty
  2589  057B  0008               	return
  2590  057C                     l4067:	
  2591                           
  2592                           ;main.c: 442: else if(keyNum == 3)
  2593  057C  3003               	movlw	3
  2594  057D  0648               	xorwf	_keyNum,w
  2595  057E  1D03               	btfss	3,2
  2596  057F  0008               	return
  2597                           
  2598                           ;main.c: 443: {
  2599                           ;main.c: 444: if((keyClick == 1 || keyClick == 3) && workStep > 1)
  2600  0580  0376               	decf	keyCtr@keyClick,w
  2601  0581  1903               	btfsc	3,2
  2602  0582  2D87               	goto	l4073
  2603  0583  3003               	movlw	3
  2604  0584  0676               	xorwf	keyCtr@keyClick,w
  2605  0585  1D03               	btfss	3,2
  2606  0586  0008               	return
  2607  0587                     l4073:	
  2608  0587  3002               	movlw	2
  2609  0588  0279               	subwf	_workStep,w
  2610  0589  1803               	btfsc	3,0
  2611                           
  2612                           ;main.c: 445: {
  2613                           ;main.c: 446: workStep--;
  2614  058A  03F9               	decf	_workStep,f
  2615  058B  0008               	return
  2616  058C                     __end_of_keyCtr:	
  2617  058C                     __ptext13:	
  2618 ;; *************** function _keyRead *****************
  2619 ;; Defined at:
  2620 ;;		line 314 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;  keyStatus       1    wreg     unsigned char 
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;  keyStatus       1    3[COMMON] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      unsigned char 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 300/100
  2631 ;;		On exit  : 300/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2634 ;;      Params:         0       0       0       0
  2635 ;;      Locals:         1       0       0       0
  2636 ;;      Temps:          0       0       0       0
  2637 ;;      Totals:         1       0       0       0
  2638 ;;Total ram usage:        1 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_keyCtr
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function _keyRead
  2650  058C                     _keyRead:	
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  2654                           ;keyRead@keyStatus stored from wreg
  2655  058C  00F3               	movwf	keyRead@keyStatus
  2656                           
  2657                           ;main.c: 317: if(keyStatus)
  2658  058D  0873               	movf	keyRead@keyStatus,w
  2659  058E  1903               	btfsc	3,2
  2660  058F  2DC7               	goto	l3779
  2661                           
  2662                           ;main.c: 318: {
  2663                           ;main.c: 319: keyCount++;
  2664  0590  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0591  3003               	movlw	3
  2666  0592  0ACB               	incf	_keyCount,f
  2667                           
  2668                           ;main.c: 320: if(keyStatus == 0x03)
  2669  0593  0673               	xorwf	keyRead@keyStatus,w
  2670  0594  1D03               	btfss	3,2
  2671  0595  2D98               	goto	l3741
  2672                           
  2673                           ;main.c: 321: {
  2674                           ;main.c: 322: keyNum = 3;
  2675  0596  3003               	movlw	3
  2676  0597  2D9B               	goto	L6
  2677  0598                     l3741:	
  2678                           ;main.c: 323: }
  2679                           
  2680                           
  2681                           ;main.c: 324: else if(keyStatus == 0x01)
  2682  0598  0B73               	decfsz	keyRead@keyStatus,w
  2683  0599  2D9D               	goto	l3745
  2684                           
  2685                           ;main.c: 325: {
  2686                           ;main.c: 326: keyNum = 2;
  2687  059A  3002               	movlw	2
  2688  059B                     L6:	
  2689  059B  00C8               	movwf	_keyNum
  2690                           
  2691                           ;main.c: 327: }
  2692  059C  2DA3               	goto	l3749
  2693  059D                     l3745:	
  2694                           
  2695                           ;main.c: 328: else if(keyStatus == 0x02)
  2696  059D  3002               	movlw	2
  2697  059E  0673               	xorwf	keyRead@keyStatus,w
  2698  059F  1D03               	btfss	3,2
  2699  05A0  2DA3               	goto	l3749
  2700                           
  2701                           ;main.c: 329: {
  2702                           ;main.c: 330: keyNum = 1;
  2703  05A1  01C8               	clrf	_keyNum
  2704  05A2  0AC8               	incf	_keyNum,f
  2705  05A3                     l3749:	
  2706                           
  2707                           ;main.c: 331: }
  2708                           ;main.c: 332: if(keyNum != preKeyNum)
  2709  05A3  0848               	movf	_keyNum,w
  2710  05A4  0647               	xorwf	_preKeyNum,w
  2711  05A5  1903               	skipnz
  2712  05A6  2DAA               	goto	l3755
  2713                           
  2714                           ;main.c: 333: {
  2715                           ;main.c: 334: preKeyNum = keyNum;
  2716  05A7  0848               	movf	_keyNum,w
  2717  05A8  00C7               	movwf	_preKeyNum
  2718                           
  2719                           ;main.c: 335: keyCount = 0;
  2720  05A9  01CB               	clrf	_keyCount
  2721  05AA                     l3755:	
  2722                           
  2723                           ;main.c: 336: }
  2724                           ;main.c: 338: if(keyCount >= 150)
  2725  05AA  3096               	movlw	150
  2726  05AB  024B               	subwf	_keyCount,w
  2727  05AC  1C03               	skipc
  2728  05AD  2DBB               	goto	l3769
  2729                           
  2730                           ;main.c: 339: {
  2731                           ;main.c: 340: keyCount = 150;
  2732  05AE  3096               	movlw	150
  2733  05AF  00CB               	movwf	_keyCount
  2734                           
  2735                           ;main.c: 341: if(keyNum == 2)
  2736  05B0  3002               	movlw	2
  2737  05B1  0648               	xorwf	_keyNum,w
  2738  05B2  1D03               	btfss	3,2
  2739  05B3  2DBB               	goto	l3769
  2740                           
  2741                           ;main.c: 342: {
  2742                           ;main.c: 343: if(!longPressFlag)
  2743  05B4  084A               	movf	_longPressFlag,w
  2744  05B5  1D03               	btfss	3,2
  2745  05B6  2DBB               	goto	l3769
  2746  05B7  3002               	movlw	2
  2747                           
  2748                           ;main.c: 344: {
  2749                           ;main.c: 345: longPressFlag = 1;
  2750  05B8  01CA               	clrf	_longPressFlag
  2751  05B9  0ACA               	incf	_longPressFlag,f
  2752                           
  2753                           ;main.c: 346: return 2;
  2754  05BA  0008               	return
  2755  05BB                     l3769:	
  2756                           
  2757                           ;main.c: 347: }
  2758                           ;main.c: 348: }
  2759                           ;main.c: 349: }
  2760                           ;main.c: 350: if(keyCount > 25 && (++keyTime) > 15)
  2761  05BB  301A               	movlw	26
  2762  05BC  024B               	subwf	_keyCount,w
  2763  05BD  1C03               	skipc
  2764  05BE  3400               	retlw	0
  2765  05BF  3010               	movlw	16
  2766  05C0  0AC3               	incf	_keyTime,f
  2767  05C1  0243               	subwf	_keyTime,w
  2768  05C2  1C03               	skipc
  2769  05C3  3400               	retlw	0
  2770  05C4  3003               	movlw	3
  2771                           
  2772                           ;main.c: 351: {
  2773                           ;main.c: 352: keyTime = 0;
  2774  05C5  01C3               	clrf	_keyTime
  2775                           
  2776                           ;main.c: 353: return 3;
  2777  05C6  0008               	return
  2778  05C7                     l3779:	
  2779                           
  2780                           ;main.c: 356: else
  2781                           ;main.c: 357: {
  2782                           ;main.c: 358: if(keyNum == 2 && keyCount >= 100)
  2783  05C7  3002               	movlw	2
  2784  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  2785  05C9  0648               	xorwf	_keyNum,w
  2786  05CA  1D03               	btfss	3,2
  2787  05CB  2DD3               	goto	l3791
  2788  05CC  3064               	movlw	100
  2789  05CD  024B               	subwf	_keyCount,w
  2790  05CE  1C03               	skipc
  2791  05CF  2DD3               	goto	l3791
  2792                           
  2793                           ;main.c: 359: {
  2794                           ;main.c: 360: keyCount = 0;
  2795  05D0  01CB               	clrf	_keyCount
  2796                           
  2797                           ;main.c: 361: longPressFlag = 0;
  2798  05D1  01CA               	clrf	_longPressFlag
  2799                           
  2800                           ;main.c: 362: return 0;
  2801  05D2  3400               	retlw	0
  2802  05D3                     l3791:	
  2803                           
  2804                           ;main.c: 364: else if(keyCount >= 4)
  2805  05D3  3004               	movlw	4
  2806  05D4  024B               	subwf	_keyCount,w
  2807  05D5  1C03               	skipc
  2808  05D6  2DDA               	goto	l3799
  2809  05D7  3001               	movlw	1
  2810                           
  2811                           ;main.c: 365: {
  2812                           ;main.c: 366: keyCount = 0;
  2813  05D8  01CB               	clrf	_keyCount
  2814                           
  2815                           ;main.c: 367: return 1;
  2816  05D9  0008               	return
  2817  05DA                     l3799:	
  2818                           
  2819                           ;main.c: 368: }
  2820                           ;main.c: 369: longPressFlag = 0;
  2821  05DA  01CA               	clrf	_longPressFlag
  2822                           
  2823                           ;main.c: 370: keyCount = 0;
  2824  05DB  01CB               	clrf	_keyCount
  2825                           
  2826                           ;main.c: 371: keyNum = 0;
  2827  05DC  01C8               	clrf	_keyNum
  2828  05DD  3400               	retlw	0
  2829  05DE                     __end_of_keyRead:	
  2830                           
  2831                           	psect	text14
  2832  0689                     __ptext14:	
  2833 ;; *************** function _chrgCtr *****************
  2834 ;; Defined at:
  2835 ;;		line 574 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0
  2844 ;; Tracked objects:
  2845 ;;		On entry : 200/0
  2846 ;;		On exit  : 300/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2849 ;;      Params:         0       0       0       0
  2850 ;;      Locals:         0       0       0       0
  2851 ;;      Temps:          0       0       0       0
  2852 ;;      Totals:         0       0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    4
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _chrgCtr
  2865  0689                     _chrgCtr:	
  2866                           
  2867                           ;main.c: 576: if(PORTA & 0X80)
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _chrgCtr: [wreg+status,2+status,0]
  2871  0689  1683               	bsf	3,5	;RP0=1, select bank1
  2872  068A  1F86               	btfss	6,7	;volatile
  2873  068B  2EBC               	goto	l4207
  2874                           
  2875                           ;main.c: 577: {
  2876                           ;main.c: 579: workStep = 0;
  2877  068C  01F9               	clrf	_workStep
  2878                           
  2879                           ;main.c: 580: modeStep = 0;
  2880  068D  01FA               	clrf	_modeStep
  2881                           
  2882                           ;main.c: 581: lowBatFlag = 0;
  2883  068E  1283               	bcf	3,5	;RP0=0, select bank0
  2884  068F  01BF               	clrf	_lowBatFlag
  2885                           
  2886                           ;main.c: 582: if(chrgFlag == 0)
  2887  0690  0849               	movf	_chrgFlag,w
  2888  0691  1D03               	btfss	3,2
  2889  0692  2E95               	goto	l4191
  2890                           
  2891                           ;main.c: 583: {
  2892                           ;main.c: 584: chrgFlag = 1;
  2893  0693  01C9               	clrf	_chrgFlag
  2894  0694  0AC9               	incf	_chrgFlag,f
  2895  0695                     l4191:	
  2896                           
  2897                           ;main.c: 590: }
  2898                           ;main.c: 591: if(R_AIN2_DATA > 1526)
  2899  0695  3005               	movlw	5
  2900  0696  0233               	subwf	_R_AIN2_DATA+1,w
  2901  0697  30F7               	movlw	247
  2902  0698  1903               	skipnz
  2903  0699  0232               	subwf	_R_AIN2_DATA,w
  2904  069A  1C03               	skipc
  2905  069B  0008               	return
  2906                           
  2907                           ;main.c: 592: {
  2908                           ;main.c: 593: if(chrgMaxData >= R_AIN2_DATA)
  2909  069C  0833               	movf	_R_AIN2_DATA+1,w
  2910  069D  0227               	subwf	_chrgMaxData+1,w
  2911  069E  1D03               	skipz
  2912  069F  2EA2               	goto	u2845
  2913  06A0  0832               	movf	_R_AIN2_DATA,w
  2914  06A1  0226               	subwf	_chrgMaxData,w
  2915  06A2                     u2845:	
  2916  06A2  1C03               	skipc
  2917  06A3  2EB5               	goto	l4203
  2918                           
  2919                           ;main.c: 594: {
  2920                           ;main.c: 595: if(++count30s > 3000)
  2921  06A4  0AA8               	incf	_count30s,f
  2922  06A5  1903               	skipnz
  2923  06A6  0AA9               	incf	_count30s+1,f
  2924  06A7  300B               	movlw	11
  2925  06A8  0229               	subwf	_count30s+1,w
  2926  06A9  30B9               	movlw	185
  2927  06AA  1903               	skipnz
  2928  06AB  0228               	subwf	_count30s,w
  2929  06AC  1C03               	skipc
  2930  06AD  0008               	return
  2931  06AE  3063               	movlw	99
  2932                           
  2933                           ;main.c: 596: {
  2934                           ;main.c: 597: count30s = 0;
  2935  06AF  01A8               	clrf	_count30s
  2936  06B0  01A9               	clrf	_count30s+1
  2937                           
  2938                           ;main.c: 598: if(showBatValue < 99)
  2939  06B1  0245               	subwf	_showBatValue,w
  2940  06B2  1C03               	btfss	3,0
  2941                           
  2942                           ;main.c: 599: {
  2943                           ;main.c: 600: showBatValue++;
  2944  06B3  0AC5               	incf	_showBatValue,f
  2945  06B4  0008               	return
  2946  06B5                     l4203:	
  2947                           
  2948                           ;main.c: 604: else
  2949                           ;main.c: 605: {
  2950                           ;main.c: 606: chrgMaxData = R_AIN2_DATA;
  2951  06B5  0833               	movf	_R_AIN2_DATA+1,w
  2952  06B6  00A7               	movwf	_chrgMaxData+1
  2953  06B7  0832               	movf	_R_AIN2_DATA,w
  2954  06B8  00A6               	movwf	_chrgMaxData
  2955                           
  2956                           ;main.c: 607: count30s = 0;
  2957  06B9  01A8               	clrf	_count30s
  2958  06BA  01A9               	clrf	_count30s+1
  2959                           
  2960                           ;main.c: 608: }
  2961                           ;main.c: 609: }
  2962                           ;main.c: 610: }
  2963  06BB  0008               	return
  2964  06BC                     l4207:	
  2965                           
  2966                           ;main.c: 611: else
  2967                           ;main.c: 612: {
  2968                           ;main.c: 613: chrgMaxData = 0;
  2969  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  2970  06BD  01A6               	clrf	_chrgMaxData
  2971  06BE  01A7               	clrf	_chrgMaxData+1
  2972                           
  2973                           ;main.c: 615: chrgFullFlag = 0;
  2974  06BF  01A8               	clrf	_count30s
  2975  06C0  01A9               	clrf	_count30s+1
  2976                           
  2977                           ;main.c: 616: chrgFlag = 0;
  2978  06C1  01C9               	clrf	_chrgFlag
  2979  06C2  0008               	return
  2980  06C3                     __end_of_chrgCtr:	
  2981                           
  2982                           	psect	text19
  2983  0024                     __ptext19:	
  2984 ;; *************** function _batCtr *****************
  2985 ;; Defined at:
  2986 ;;		line 826 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 300/0
  2997 ;;		On exit  : 300/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3000 ;;      Params:         0       0       0       0
  3001 ;;      Locals:         0       0       0       0
  3002 ;;      Temps:          2       0       0       0
  3003 ;;      Totals:         2       0       0       0
  3004 ;;Total ram usage:        2 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           
  3015                           ;psect for function _batCtr
  3016  0024                     _batCtr:	
  3017                           
  3018                           ;main.c: 828: if(chrgFlag == 0)
  3019                           
  3020                           ;incstack = 0
  3021                           ; Regs used in _batCtr: [wreg+status,2+status,0]
  3022  0024  0849               	movf	_chrgFlag,w
  3023  0025  1D03               	btfss	3,2
  3024  0026  0008               	return
  3025                           
  3026                           ;main.c: 829: {
  3027                           ;main.c: 830: if(batValue > 40)
  3028  0027  3000               	movlw	0
  3029  0028  0235               	subwf	_batValue+1,w
  3030  0029  3029               	movlw	41
  3031  002A  1903               	skipnz
  3032  002B  0234               	subwf	_batValue,w
  3033  002C  1C03               	skipc
  3034  002D  2832               	goto	l4339
  3035                           
  3036                           ;main.c: 831: {
  3037                           ;main.c: 832: batSubMaxTime = 4500;
  3038  002E  3094               	movlw	148
  3039  002F  00DB               	movwf	_batSubMaxTime
  3040  0030  3011               	movlw	17
  3041  0031  2840               	goto	L10
  3042  0032                     l4339:	
  3043                           ;main.c: 833: }
  3044                           
  3045                           
  3046                           ;main.c: 834: else if(batValue > 25)
  3047  0032  3000               	movlw	0
  3048  0033  0235               	subwf	_batValue+1,w
  3049  0034  301A               	movlw	26
  3050  0035  1903               	skipnz
  3051  0036  0234               	subwf	_batValue,w
  3052  0037  1C03               	skipc
  3053  0038  283D               	goto	l4343
  3054                           
  3055                           ;main.c: 835: {
  3056                           ;main.c: 836: batSubMaxTime = 2500;
  3057  0039  30C4               	movlw	196
  3058  003A  00DB               	movwf	_batSubMaxTime
  3059  003B  3009               	movlw	9
  3060  003C  2840               	goto	L10
  3061  003D                     l4343:	
  3062                           ;main.c: 837: }
  3063                           
  3064                           
  3065                           ;main.c: 838: else
  3066                           ;main.c: 839: {
  3067                           ;main.c: 840: batSubMaxTime = 1000;
  3068  003D  30E8               	movlw	232
  3069  003E  00DB               	movwf	_batSubMaxTime
  3070  003F  3003               	movlw	3
  3071  0040                     L10:	
  3072  0040  00DC               	movwf	_batSubMaxTime+1
  3073                           
  3074                           ;main.c: 841: }
  3075                           ;main.c: 842: if(showBatValue > batValue)
  3076  0041  0845               	movf	_showBatValue,w
  3077  0042  00F3               	movwf	??_batCtr
  3078  0043  01F4               	clrf	??_batCtr+1
  3079  0044  0874               	movf	??_batCtr+1,w
  3080  0045  0235               	subwf	_batValue+1,w
  3081  0046  1D03               	skipz
  3082  0047  284A               	goto	u3125
  3083  0048  0873               	movf	??_batCtr,w
  3084  0049  0234               	subwf	_batValue,w
  3085  004A                     u3125:	
  3086  004A  1803               	skipnc
  3087  004B  285B               	goto	l4351
  3088                           
  3089                           ;main.c: 843: {
  3090                           ;main.c: 844: if(++batSubCount > batSubMaxTime)
  3091  004C  0AAA               	incf	_batSubCount,f
  3092  004D  1903               	skipnz
  3093  004E  0AAB               	incf	_batSubCount+1,f
  3094  004F  082B               	movf	_batSubCount+1,w
  3095  0050  025C               	subwf	_batSubMaxTime+1,w
  3096  0051  1D03               	skipz
  3097  0052  2855               	goto	u3135
  3098  0053  082A               	movf	_batSubCount,w
  3099  0054  025B               	subwf	_batSubMaxTime,w
  3100  0055                     u3135:	
  3101  0055  1803               	skipnc
  3102  0056  285D               	goto	l4353
  3103                           
  3104                           ;main.c: 845: {
  3105                           ;main.c: 846: batSubCount = 0;
  3106  0057  01AA               	clrf	_batSubCount
  3107  0058  01AB               	clrf	_batSubCount+1
  3108                           
  3109                           ;main.c: 847: showBatValue--;
  3110  0059  03C5               	decf	_showBatValue,f
  3111  005A  285D               	goto	l4353
  3112  005B                     l4351:	
  3113                           
  3114                           ;main.c: 851: else
  3115                           ;main.c: 852: {
  3116                           ;main.c: 853: batSubCount = 0;
  3117  005B  01AA               	clrf	_batSubCount
  3118  005C  01AB               	clrf	_batSubCount+1
  3119  005D                     l4353:	
  3120                           
  3121                           ;main.c: 854: }
  3122                           ;main.c: 855: if(showBatValue == 0)
  3123  005D  0845               	movf	_showBatValue,w
  3124  005E  1D03               	btfss	3,2
  3125  005F  0008               	return
  3126                           
  3127                           ;main.c: 856: {
  3128                           ;main.c: 857: count900s = 0;
  3129                           
  3130                           ;main.c: 858: modeStep = 0;
  3131                           
  3132                           ;main.c: 859: workStep = 0;
  3133                           
  3134                           ;main.c: 860: count900s = 0;
  3135                           
  3136                           ;main.c: 861: lowBatFlag = 1;
  3137  0060  2202               	fcall	PL12	;call to abstracted procedure
  3138  0061  0008               	return
  3139  0062                     __end_of_batCtr:	
  3140  0062                     __ptext15:	
  3141 ;; *************** function _checkOutA *****************
  3142 ;; Defined at:
  3143 ;;		line 713 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0, pclath, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 300/0
  3154 ;;		On exit  : 300/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3157 ;;      Params:         0       0       0       0
  3158 ;;      Locals:         0       0       0       0
  3159 ;;      Temps:          0       0       0       0
  3160 ;;      Totals:         0       0       0       0
  3161 ;;Total ram usage:        0 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    5
  3164 ;; This function calls:
  3165 ;;		_ADC_Sample
  3166 ;; This function is called by:
  3167 ;;		_main
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           
  3172                           ;psect for function _checkOutA
  3173  0062                     _checkOutA:	
  3174                           
  3175                           ;main.c: 716: test_adc = ADC_Sample(3, 5);
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  3179  0062  3005               	movlw	5
  3180  0063  00F3               	movwf	ADC_Sample@adldo
  3181  0064  3003               	movlw	3
  3182  0065  20F0  118A         	fcall	_ADC_Sample
  3183  0067  00BA               	movwf	_test_adc	;volatile
  3184                           
  3185                           ;main.c: 717: if (0xA5 == test_adc)
  3186  0068  30A5               	movlw	165
  3187  0069  063A               	xorwf	_test_adc,w	;volatile
  3188  006A  1D03               	btfss	3,2
  3189  006B  0008               	return
  3190                           
  3191                           ;main.c: 718: {
  3192                           ;main.c: 719: R_AIN6_DATA = adresult;
  3193  006C  0825               	movf	_adresult+1,w	;volatile
  3194  006D  00B1               	movwf	_R_AIN6_DATA+1
  3195  006E  0824               	movf	_adresult,w	;volatile
  3196  006F  00B0               	movwf	_R_AIN6_DATA
  3197                           
  3198                           ;main.c: 720: if(R_AIN6_DATA > 1200)
  3199  0070  3004               	movlw	4
  3200  0071  0231               	subwf	_R_AIN6_DATA+1,w
  3201  0072  30B1               	movlw	177
  3202  0073  1903               	skipnz
  3203  0074  0230               	subwf	_R_AIN6_DATA,w
  3204  0075  1C03               	skipc
  3205  0076  287F               	goto	l4267
  3206                           
  3207                           ;main.c: 721: {
  3208                           ;main.c: 722: if(++overTime > 10)
  3209  0077  300B               	movlw	11
  3210  0078  0ABE               	incf	_overTime,f
  3211  0079  023E               	subwf	_overTime,w
  3212  007A  1C03               	skipc
  3213  007B  0008               	return
  3214                           
  3215                           ;main.c: 723: {
  3216                           ;main.c: 724: overTime = 0;
  3217  007C  01BE               	clrf	_overTime
  3218                           
  3219                           ;main.c: 725: workStep = 0;
  3220  007D  01F9               	clrf	_workStep
  3221  007E  0008               	return
  3222  007F                     l4267:	
  3223                           
  3224                           ;main.c: 728: else
  3225                           ;main.c: 729: {
  3226                           ;main.c: 730: overTime = 0;
  3227  007F  01BE               	clrf	_overTime
  3228  0080  0008               	return
  3229  0081                     __end_of_checkOutA:	
  3230  0081                     __ptext16:	
  3231 ;; *************** function _checkBatValue *****************
  3232 ;; Defined at:
  3233 ;;		line 736 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;		None
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;		None
  3238 ;; Return value:  Size  Location     Type
  3239 ;;                  1    wreg      void 
  3240 ;; Registers used:
  3241 ;;		wreg, status,2, status,0, pclath, cstack
  3242 ;; Tracked objects:
  3243 ;;		On entry : 300/0
  3244 ;;		On exit  : 300/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3247 ;;      Params:         0       0       0       0
  3248 ;;      Locals:         0       0       0       0
  3249 ;;      Temps:          0       0       0       0
  3250 ;;      Totals:         0       0       0       0
  3251 ;;Total ram usage:        0 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    5
  3254 ;; This function calls:
  3255 ;;		_ADC_Sample
  3256 ;;		___lwdiv
  3257 ;; This function is called by:
  3258 ;;		_main
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           
  3263                           ;psect for function _checkBatValue
  3264  0081                     _checkBatValue:	
  3265                           
  3266                           ;main.c: 739: test_adc = ADC_Sample(2, 5);
  3267                           
  3268                           ;incstack = 0
  3269                           ; Regs used in _checkBatValue: [wreg+status,2+status,0+pclath+cstack]
  3270  0081  3005               	movlw	5
  3271  0082  00F3               	movwf	ADC_Sample@adldo
  3272  0083  3002               	movlw	2
  3273  0084  20F0  118A         	fcall	_ADC_Sample
  3274  0086  00BA               	movwf	_test_adc	;volatile
  3275                           
  3276                           ;main.c: 740: if (0xA5 == test_adc)
  3277  0087  30A5               	movlw	165
  3278  0088  063A               	xorwf	_test_adc,w	;volatile
  3279  0089  1D03               	btfss	3,2
  3280  008A  0008               	return
  3281                           
  3282                           ;main.c: 741: {
  3283                           ;main.c: 742: R_AIN2_DATA = adresult;
  3284  008B  0825               	movf	_adresult+1,w	;volatile
  3285  008C  00B3               	movwf	_R_AIN2_DATA+1
  3286  008D  0824               	movf	_adresult,w	;volatile
  3287  008E  00B2               	movwf	_R_AIN2_DATA
  3288                           
  3289                           ;main.c: 743: if(R_AIN2_DATA < 1220)
  3290  008F  3004               	movlw	4
  3291  0090  0233               	subwf	_R_AIN2_DATA+1,w
  3292  0091  30C4               	movlw	196
  3293  0092  1903               	skipnz
  3294  0093  0232               	subwf	_R_AIN2_DATA,w
  3295  0094  1803               	skipnc
  3296  0095  28A1               	goto	l4597
  3297  0096  30C9               	movlw	201
  3298                           
  3299                           ;main.c: 744: {
  3300                           ;main.c: 745: batValue = 0;
  3301  0097  01B4               	clrf	_batValue
  3302  0098  01B5               	clrf	_batValue+1
  3303                           
  3304                           ;main.c: 746: if(++lowBatTime > 200)
  3305  0099  0ABB               	incf	_lowBatTime,f
  3306  009A  023B               	subwf	_lowBatTime,w
  3307  009B  1C03               	skipc
  3308  009C  0008               	return
  3309                           
  3310                           ;main.c: 747: {
  3311                           ;main.c: 748: lowBatTime = 0;
  3312  009D  01BB               	clrf	_lowBatTime
  3313                           
  3314                           ;main.c: 749: count900s = 0;
  3315                           
  3316                           ;main.c: 750: modeStep = 0;
  3317                           
  3318                           ;main.c: 751: workStep = 0;
  3319                           
  3320                           ;main.c: 752: count900s = 0;
  3321                           
  3322                           ;main.c: 753: lowBatFlag = 1;
  3323  009E  2202               	fcall	PL12	;call to abstracted procedure
  3324                           
  3325                           ;main.c: 754: showBatValue = 0;
  3326  009F  01C5               	clrf	_showBatValue
  3327  00A0  0008               	return
  3328  00A1                     l4597:	
  3329                           
  3330                           ;main.c: 757: else if(R_AIN2_DATA < 1330)
  3331  00A1  3005               	movlw	5
  3332  00A2  0233               	subwf	_R_AIN2_DATA+1,w
  3333  00A3  3032               	movlw	50
  3334  00A4  1903               	skipnz
  3335  00A5  0232               	subwf	_R_AIN2_DATA,w
  3336  00A6  1803               	skipnc
  3337  00A7  28BA               	goto	l4603
  3338                           
  3339                           ;main.c: 758: {
  3340                           ;main.c: 759: batValue = (R_AIN2_DATA - 1220)/11;
  3341  00A8  300B               	movlw	11
  3342  00A9  00F3               	movwf	___lwdiv@divisor
  3343  00AA  01F4               	clrf	___lwdiv@divisor+1
  3344  00AB  0832               	movf	_R_AIN2_DATA,w
  3345  00AC  3E3C               	addlw	60
  3346  00AD  00F5               	movwf	___lwdiv@dividend
  3347  00AE  0833               	movf	_R_AIN2_DATA+1,w
  3348  00AF  1803               	skipnc
  3349  00B0  3E01               	addlw	1
  3350  00B1  3EFB               	addlw	251
  3351  00B2  00F6               	movwf	___lwdiv@dividend+1
  3352  00B3  21C0               	fcall	___lwdiv
  3353  00B4  0874               	movf	?___lwdiv+1,w
  3354  00B5  00B5               	movwf	_batValue+1
  3355  00B6  0873               	movf	?___lwdiv,w
  3356  00B7  00B4               	movwf	_batValue
  3357                           
  3358                           ;main.c: 760: lowBatTime = 0;
  3359  00B8  01BB               	clrf	_lowBatTime
  3360                           
  3361                           ;main.c: 761: }
  3362  00B9  0008               	return
  3363  00BA                     l4603:	
  3364                           
  3365                           ;main.c: 762: else if(R_AIN2_DATA < 1390)
  3366  00BA  3005               	movlw	5
  3367  00BB  0233               	subwf	_R_AIN2_DATA+1,w
  3368  00BC  306E               	movlw	110
  3369  00BD  1903               	skipnz
  3370  00BE  0232               	subwf	_R_AIN2_DATA,w
  3371  00BF  1803               	skipnc
  3372  00C0  28D6               	goto	l4609
  3373                           
  3374                           ;main.c: 763: {
  3375                           ;main.c: 764: batValue = 10 + ((R_AIN2_DATA - 1330)/3);
  3376  00C1  3003               	movlw	3
  3377  00C2  00F3               	movwf	___lwdiv@divisor
  3378  00C3  01F4               	clrf	___lwdiv@divisor+1
  3379  00C4  0832               	movf	_R_AIN2_DATA,w
  3380  00C5  3ECE               	addlw	206
  3381  00C6  00F5               	movwf	___lwdiv@dividend
  3382  00C7  0833               	movf	_R_AIN2_DATA+1,w
  3383  00C8  1803               	skipnc
  3384  00C9  3E01               	addlw	1
  3385  00CA  3EFA               	addlw	250
  3386  00CB  00F6               	movwf	___lwdiv@dividend+1
  3387  00CC  21C0               	fcall	___lwdiv
  3388  00CD  0874               	movf	?___lwdiv+1,w
  3389  00CE  00B5               	movwf	_batValue+1
  3390  00CF  0873               	movf	?___lwdiv,w
  3391  00D0  00B4               	movwf	_batValue
  3392  00D1  300A               	movlw	10
  3393  00D2  07B4               	addwf	_batValue,f
  3394  00D3  1803               	skipnc
  3395  00D4  0AB5               	incf	_batValue+1,f
  3396                           
  3397                           ;main.c: 765: }
  3398  00D5  0008               	return
  3399  00D6                     l4609:	
  3400                           
  3401                           ;main.c: 766: else
  3402                           ;main.c: 767: {
  3403                           ;main.c: 768: batValue = 30 + ((R_AIN2_DATA - 1390)/2);
  3404  00D6  0832               	movf	_R_AIN2_DATA,w
  3405  00D7  3E92               	addlw	146
  3406  00D8  00B4               	movwf	_batValue
  3407  00D9  0833               	movf	_R_AIN2_DATA+1,w
  3408  00DA  1803               	skipnc
  3409  00DB  3E01               	addlw	1
  3410  00DC  3EFA               	addlw	250
  3411  00DD  00B5               	movwf	_batValue+1
  3412  00DE  301E               	movlw	30
  3413  00DF  1003               	clrc
  3414  00E0  0CB5               	rrf	_batValue+1,f
  3415  00E1  0CB4               	rrf	_batValue,f
  3416  00E2  07B4               	addwf	_batValue,f
  3417  00E3  1803               	skipnc
  3418  00E4  0AB5               	incf	_batValue+1,f
  3419                           
  3420                           ;main.c: 769: if(batValue >= 100)
  3421  00E5  3000               	movlw	0
  3422  00E6  0235               	subwf	_batValue+1,w
  3423  00E7  3064               	movlw	100
  3424  00E8  1903               	skipnz
  3425  00E9  0234               	subwf	_batValue,w
  3426  00EA  1C03               	skipc
  3427  00EB  0008               	return
  3428                           
  3429                           ;main.c: 770: {
  3430                           ;main.c: 771: batValue = 100;
  3431  00EC  3064               	movlw	100
  3432  00ED  00B4               	movwf	_batValue
  3433  00EE  01B5               	clrf	_batValue+1
  3434  00EF  0008               	return
  3435  00F0                     __end_of_checkBatValue:	
  3436  00F0                     __ptext18:	
  3437 ;; *************** function _ADC_Sample *****************
  3438 ;; Defined at:
  3439 ;;		line 224 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  adch            1    wreg     unsigned char 
  3442 ;;  adldo           1    3[COMMON] unsigned char 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  adch            1    1[BANK0 ] unsigned char 
  3445 ;;  j               1    0[BANK0 ] unsigned char 
  3446 ;;  adsum           4    3[BANK0 ] volatile unsigned long 
  3447 ;;  ad_temp         2   11[BANK0 ] volatile unsigned int 
  3448 ;;  admax           2    9[BANK0 ] volatile unsigned int 
  3449 ;;  admin           2    7[BANK0 ] volatile unsigned int 
  3450 ;;  i               1    2[BANK0 ] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      unsigned char 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0
  3455 ;; Tracked objects:
  3456 ;;		On entry : 300/0
  3457 ;;		On exit  : 300/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3460 ;;      Params:         1       0       0       0
  3461 ;;      Locals:         0      13       0       0
  3462 ;;      Temps:          4       0       0       0
  3463 ;;      Totals:         5      13       0       0
  3464 ;;Total ram usage:       18 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    4
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_checkOutA
  3471 ;;		_checkBatValue
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           
  3476                           ;psect for function _ADC_Sample
  3477  00F0                     _ADC_Sample:	
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3481                           ;ADC_Sample@adch stored from wreg
  3482  00F0  00CF               	movwf	ADC_Sample@adch
  3483                           
  3484                           ;main.c: 226: volatile unsigned long adsum = 0;
  3485                           
  3486                           ;main.c: 227: volatile unsigned int admin = 0, admax = 0;
  3487  00F1  21F9  118A         	fcall	PL6	;call to abstracted procedure
  3488                           
  3489                           ;main.c: 228: volatile unsigned int ad_temp = 0;
  3490  00F3  01D9               	clrf	ADC_Sample@ad_temp	;volatile
  3491  00F4  01DA               	clrf	ADC_Sample@ad_temp+1	;volatile
  3492                           
  3493                           ;main.c: 230: if ((!LDO_EN) && (adldo & 0x04) )
  3494  00F5  1683               	bsf	3,5	;RP0=1, select bank1
  3495  00F6  1D16               	btfss	22,2	;volatile
  3496  00F7  1D73               	btfss	ADC_Sample@adldo,2
  3497  00F8  2901               	goto	l3655
  3498                           
  3499                           ;main.c: 231: {
  3500                           ;main.c: 233: ADCON1 = adldo;
  3501  00F9  0873               	movf	ADC_Sample@adldo,w
  3502  00FA  0096               	movwf	22	;volatile
  3503                           
  3504                           ;main.c: 234: _delay((unsigned long)((100)*(8000000/4000000.0)));
  3505  00FB  3042               	movlw	66
  3506  00FC  00F4               	movwf	??_ADC_Sample
  3507  00FD                     u3567:	
  3508  00FD  0BF4               	decfsz	??_ADC_Sample,f
  3509  00FE  28FD               	goto	u3567
  3510  00FF  0000               	nop
  3511                           
  3512                           ;main.c: 235: }
  3513  0100  2903               	goto	l3657
  3514  0101                     l3655:	
  3515                           
  3516                           ;main.c: 236: else
  3517                           ;main.c: 237: ADCON1 = adldo;
  3518  0101  0873               	movf	ADC_Sample@adldo,w
  3519  0102  0096               	movwf	22	;volatile
  3520  0103                     l3657:	
  3521                           
  3522                           ;main.c: 239: if(adch & 0x10)
  3523  0103  1283               	bcf	3,5	;RP0=0, select bank0
  3524  0104  1303               	bcf	3,6	;RP1=0, select bank0
  3525  0105  1E4F               	btfss	ADC_Sample@adch,4
  3526  0106  290C               	goto	l3665
  3527                           
  3528                           ;main.c: 240: {
  3529                           ;main.c: 241: CHS4 = 1;
  3530  0107  1683               	bsf	3,5	;RP0=1, select bank1
  3531  0108  1716               	bsf	22,6	;volatile
  3532                           
  3533                           ;main.c: 242: adch &= 0x0f;
  3534  0109  300F               	movlw	15
  3535  010A  1283               	bcf	3,5	;RP0=0, select bank0
  3536  010B  05CF               	andwf	ADC_Sample@adch,f
  3537  010C                     l3665:	
  3538                           
  3539                           ;main.c: 245: for (i = 0; i < 10; i++)
  3540  010C  01D0               	clrf	ADC_Sample@i
  3541  010D                     l3671:	
  3542                           
  3543                           ;main.c: 246: {
  3544                           ;main.c: 247: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3545  010D  084F               	movf	ADC_Sample@adch,w
  3546  010E  00F4               	movwf	??_ADC_Sample
  3547  010F  3001               	movlw	1
  3548  0110  1003               	clrc
  3549  0111                     L9:	
  3550  0111  0DF4               	rlf	??_ADC_Sample,f
  3551  0112  3EFF               	addlw	-1
  3552  0113  1003               	clrc
  3553  0114  1D03               	skipz
  3554  0115  2911               	goto	L9
  3555  0116  0D74               	rlf	??_ADC_Sample,w
  3556  0117  3841               	iorlw	65
  3557  0118  1683               	bsf	3,5	;RP0=1, select bank1
  3558  0119  0095               	movwf	21	;volatile
  3559  011A  0000               	nop	;# 
  3560  011B  0000               	nop	;# 
  3561  011C  0000               	nop	;# 
  3562  011D  0000               	nop	;# 
  3563                           
  3564                           ;main.c: 252: GODONE = 1;
  3565  011E  1683               	bsf	3,5	;RP0=1, select bank1
  3566  011F  1303               	bcf	3,6	;RP1=0, select bank1
  3567  0120  1495               	bsf	21,1	;volatile
  3568                           
  3569                           ;main.c: 254: unsigned char j = 0;
  3570  0121  1283               	bcf	3,5	;RP0=0, select bank0
  3571  0122  01CE               	clrf	ADC_Sample@j
  3572  0123                     l970:	
  3573                           ;main.c: 255: while (GODONE)
  3574                           
  3575  0123  1683               	bsf	3,5	;RP0=1, select bank1
  3576  0124  1C95               	btfss	21,1	;volatile
  3577  0125  292D               	goto	l3681
  3578                           
  3579                           ;main.c: 256: {
  3580                           ;main.c: 257: _delay((unsigned long)((2)*(8000000/4000000.0)));
  3581  0126  2927               	nop2	;2 cycle nop
  3582  0127  2928               	nop2	;2 cycle nop
  3583                           
  3584                           ;main.c: 259: if (0 == (--j))
  3585  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3586  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3587  012A  0BCE               	decfsz	ADC_Sample@j,f
  3588  012B  2923               	goto	l970
  3589                           
  3590                           ;main.c: 260: return 0;
  3591  012C  3400               	retlw	0
  3592  012D                     l3681:	
  3593                           
  3594                           ;main.c: 261: }
  3595                           ;main.c: 263: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3596  012D  0819               	movf	25,w	;volatile
  3597  012E  1283               	bcf	3,5	;RP0=0, select bank0
  3598  012F  00D9               	movwf	ADC_Sample@ad_temp	;volatile
  3599  0130  01DA               	clrf	ADC_Sample@ad_temp+1	;volatile
  3600  0131  0ED9               	swapf	ADC_Sample@ad_temp,f	;volatile
  3601  0132  0EDA               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3602  0133  30F0               	movlw	240
  3603  0134  05DA               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3604  0135  0859               	movf	ADC_Sample@ad_temp,w	;volatile
  3605  0136  390F               	andlw	15
  3606  0137  04DA               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3607  0138  30F0               	movlw	240
  3608  0139  05D9               	andwf	ADC_Sample@ad_temp,f	;volatile
  3609  013A  1683               	bsf	3,5	;RP0=1, select bank1
  3610  013B  0E18               	swapf	24,w	;volatile
  3611  013C  390F               	andlw	15
  3612  013D  1283               	bcf	3,5	;RP0=0, select bank0
  3613  013E  07D9               	addwf	ADC_Sample@ad_temp,f	;volatile
  3614  013F  1803               	skipnc
  3615  0140  0ADA               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3616                           
  3617                           ;main.c: 265: if (0 == admax)
  3618  0141  0857               	movf	ADC_Sample@admax,w	;volatile
  3619  0142  0458               	iorwf	ADC_Sample@admax+1,w	;volatile
  3620  0143  1D03               	btfss	3,2
  3621  0144  2948               	goto	l3689
  3622                           
  3623                           ;main.c: 266: {
  3624                           ;main.c: 267: admax = ad_temp;
  3625  0145  2209  118A         	fcall	PL20	;call to abstracted procedure
  3626  0147  295B               	goto	l3695
  3627  0148                     l3689:	
  3628                           ;main.c: 269: }
  3629                           
  3630                           ;main.c: 268: admin = ad_temp;
  3631                           
  3632                           
  3633                           ;main.c: 270: else if (ad_temp > admax)
  3634  0148  085A               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3635  0149  0258               	subwf	ADC_Sample@admax+1,w	;volatile
  3636  014A  1D03               	skipz
  3637  014B  294E               	goto	u1695
  3638  014C  0859               	movf	ADC_Sample@ad_temp,w	;volatile
  3639  014D  0257               	subwf	ADC_Sample@admax,w	;volatile
  3640  014E                     u1695:	
  3641  014E  1803               	skipnc
  3642  014F  2953               	goto	l3693
  3643                           
  3644                           ;main.c: 271: admax = ad_temp;
  3645  0150  2209  118A         	fcall	PL20	;call to abstracted procedure
  3646  0152  295F               	goto	l976
  3647  0153                     l3693:	
  3648                           
  3649                           ;main.c: 272: else if (ad_temp < admin)
  3650  0153  0856               	movf	ADC_Sample@admin+1,w	;volatile
  3651  0154  025A               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3652  0155  1D03               	skipz
  3653  0156  2959               	goto	u1705
  3654  0157  0855               	movf	ADC_Sample@admin,w	;volatile
  3655  0158  0259               	subwf	ADC_Sample@ad_temp,w	;volatile
  3656  0159                     u1705:	
  3657  0159  1803               	skipnc
  3658  015A  295F               	goto	l976
  3659  015B                     l3695:	
  3660                           
  3661                           ;main.c: 273: admin = ad_temp;
  3662  015B  085A               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3663  015C  00D6               	movwf	ADC_Sample@admin+1	;volatile
  3664  015D  0859               	movf	ADC_Sample@ad_temp,w	;volatile
  3665  015E  00D5               	movwf	ADC_Sample@admin	;volatile
  3666  015F                     l976:	
  3667                           
  3668                           ;main.c: 275: adsum += ad_temp;
  3669  015F  0859               	movf	ADC_Sample@ad_temp,w	;volatile
  3670  0160  00F4               	movwf	??_ADC_Sample
  3671  0161  085A               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3672  0162  00F5               	movwf	??_ADC_Sample+1
  3673  0163  01F6               	clrf	??_ADC_Sample+2
  3674  0164  01F7               	clrf	??_ADC_Sample+3
  3675  0165  0874               	movf	??_ADC_Sample,w
  3676  0166  07D1               	addwf	ADC_Sample@adsum,f	;volatile
  3677  0167  0875               	movf	??_ADC_Sample+1,w
  3678  0168  1103               	clrz
  3679  0169  1803               	skipnc
  3680  016A  3E01               	addlw	1
  3681  016B  1D03               	btfss	3,2
  3682  016C  07D2               	addwf	ADC_Sample@adsum+1,f	;volatile
  3683  016D  0876               	movf	??_ADC_Sample+2,w
  3684  016E  1103               	clrz
  3685  016F  1803               	skipnc
  3686  0170  3E01               	addlw	1
  3687  0171  1D03               	btfss	3,2
  3688  0172  07D3               	addwf	ADC_Sample@adsum+2,f	;volatile
  3689  0173  0877               	movf	??_ADC_Sample+3,w
  3690  0174  1103               	clrz
  3691  0175  1803               	skipnc
  3692  0176  3E01               	addlw	1
  3693  0177  1D03               	btfss	3,2
  3694  0178  07D4               	addwf	ADC_Sample@adsum+3,f	;volatile
  3695  0179  300A               	movlw	10
  3696  017A  0AD0               	incf	ADC_Sample@i,f
  3697  017B  0250               	subwf	ADC_Sample@i,w
  3698  017C  1C03               	skipc
  3699  017D  290D               	goto	l3671
  3700                           
  3701                           ;main.c: 276: }
  3702                           ;main.c: 277: adsum -= admax;
  3703  017E  0857               	movf	ADC_Sample@admax,w	;volatile
  3704  017F  00F4               	movwf	??_ADC_Sample
  3705  0180  0858               	movf	ADC_Sample@admax+1,w	;volatile
  3706  0181  21EA  118A         	fcall	PL2	;call to abstracted procedure
  3707  0183  1C03               	skipc
  3708  0184  0F77               	incfsz	??_ADC_Sample+3,w
  3709  0185  02D4               	subwf	ADC_Sample@adsum+3,f	;volatile
  3710                           
  3711                           ;main.c: 278: if (adsum >= admin)
  3712  0186  0855               	movf	ADC_Sample@admin,w	;volatile
  3713  0187  00F4               	movwf	??_ADC_Sample
  3714  0188  0856               	movf	ADC_Sample@admin+1,w	;volatile
  3715  0189  00F5               	movwf	??_ADC_Sample+1
  3716  018A  01F6               	clrf	??_ADC_Sample+2
  3717  018B  01F7               	clrf	??_ADC_Sample+3
  3718  018C  0877               	movf	??_ADC_Sample+3,w
  3719  018D  0254               	subwf	ADC_Sample@adsum+3,w	;volatile
  3720  018E  1D03               	skipz
  3721  018F  299A               	goto	u1745
  3722  0190  0876               	movf	??_ADC_Sample+2,w
  3723  0191  0253               	subwf	ADC_Sample@adsum+2,w	;volatile
  3724  0192  1D03               	skipz
  3725  0193  299A               	goto	u1745
  3726  0194  0875               	movf	??_ADC_Sample+1,w
  3727  0195  0252               	subwf	ADC_Sample@adsum+1,w	;volatile
  3728  0196  1D03               	skipz
  3729  0197  299A               	goto	u1745
  3730  0198  0874               	movf	??_ADC_Sample,w
  3731  0199  0251               	subwf	ADC_Sample@adsum,w	;volatile
  3732  019A                     u1745:	
  3733  019A  1C03               	skipc
  3734  019B  29A5               	goto	l980
  3735                           
  3736                           ;main.c: 279: adsum -= admin;
  3737  019C  0855               	movf	ADC_Sample@admin,w	;volatile
  3738  019D  00F4               	movwf	??_ADC_Sample
  3739  019E  0856               	movf	ADC_Sample@admin+1,w	;volatile
  3740  019F  21EA  118A         	fcall	PL2	;call to abstracted procedure
  3741  01A1  1C03               	skipc
  3742  01A2  0F77               	incfsz	??_ADC_Sample+3,w
  3743  01A3  02D4               	subwf	ADC_Sample@adsum+3,f	;volatile
  3744  01A4  29A9               	goto	l3705
  3745  01A5                     l980:	
  3746                           
  3747                           ;main.c: 280: else
  3748                           ;main.c: 281: adsum = 0;
  3749  01A5  01D1               	clrf	ADC_Sample@adsum	;volatile
  3750  01A6  01D2               	clrf	ADC_Sample@adsum+1	;volatile
  3751  01A7  01D3               	clrf	ADC_Sample@adsum+2	;volatile
  3752  01A8  01D4               	clrf	ADC_Sample@adsum+3	;volatile
  3753  01A9                     l3705:	
  3754                           
  3755                           ;main.c: 283: adresult = adsum >> 3;
  3756  01A9  0851               	movf	ADC_Sample@adsum,w	;volatile
  3757  01AA  00F4               	movwf	??_ADC_Sample
  3758  01AB  0852               	movf	ADC_Sample@adsum+1,w	;volatile
  3759  01AC  00F5               	movwf	??_ADC_Sample+1
  3760  01AD  0853               	movf	ADC_Sample@adsum+2,w	;volatile
  3761  01AE  00F6               	movwf	??_ADC_Sample+2
  3762  01AF  0854               	movf	ADC_Sample@adsum+3,w	;volatile
  3763  01B0  00F7               	movwf	??_ADC_Sample+3
  3764  01B1  3003               	movlw	3
  3765  01B2                     u1765:	
  3766  01B2  1003               	clrc
  3767  01B3  0CF7               	rrf	??_ADC_Sample+3,f
  3768  01B4  0CF6               	rrf	??_ADC_Sample+2,f
  3769  01B5  0CF5               	rrf	??_ADC_Sample+1,f
  3770  01B6  0CF4               	rrf	??_ADC_Sample,f
  3771  01B7  3EFF               	addlw	-1
  3772  01B8  1D03               	skipz
  3773  01B9  29B2               	goto	u1765
  3774  01BA  0875               	movf	??_ADC_Sample+1,w
  3775  01BB  00A5               	movwf	_adresult+1	;volatile
  3776  01BC  0874               	movf	??_ADC_Sample,w
  3777  01BD  00A4               	movwf	_adresult	;volatile
  3778                           
  3779                           ;main.c: 285: adsum = 0;
  3780                           
  3781                           ;main.c: 286: admin = 0;
  3782                           
  3783                           ;main.c: 287: admax = 0;
  3784  01BE  21F9               	fcall	PL6	;call to abstracted procedure
  3785                           
  3786                           ;main.c: 288: return 0xA5;
  3787  01BF  34A5               	retlw	165
  3788  01C0                     __end_of_ADC_Sample:	
  3789  01C0                     __ptext17:	
  3790 ;; *************** function ___lwdiv *****************
  3791 ;; Defined at:
  3792 ;;		line 6 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lwdiv.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  divisor         2    3[COMMON] unsigned int 
  3795 ;;  dividend        2    5[COMMON] unsigned int 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  quotient        2    1[BANK0 ] unsigned int 
  3798 ;;  counter         1    0[BANK0 ] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  2    3[COMMON] unsigned int 
  3801 ;; Registers used:
  3802 ;;		wreg, status,2, status,0
  3803 ;; Tracked objects:
  3804 ;;		On entry : 300/0
  3805 ;;		On exit  : 300/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3808 ;;      Params:         4       0       0       0
  3809 ;;      Locals:         0       3       0       0
  3810 ;;      Temps:          0       0       0       0
  3811 ;;      Totals:         4       3       0       0
  3812 ;;Total ram usage:        7 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_checkBatValue
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function ___lwdiv
  3824  01C0                     ___lwdiv:	
  3825                           
  3826                           ;incstack = 0
  3827                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3828  01C0  01CF               	clrf	___lwdiv@quotient
  3829  01C1  01D0               	clrf	___lwdiv@quotient+1
  3830  01C2  0873               	movf	___lwdiv@divisor,w
  3831  01C3  0474               	iorwf	___lwdiv@divisor+1,w
  3832  01C4  1903               	btfsc	3,2
  3833  01C5  29E5               	goto	l4475
  3834  01C6  01CE               	clrf	___lwdiv@counter
  3835  01C7                     L7:	
  3836  01C7  0ACE               	incf	___lwdiv@counter,f
  3837  01C8  1BF4               	btfsc	___lwdiv@divisor+1,7
  3838  01C9  29CE               	goto	l4463
  3839  01CA  1003               	clrc
  3840  01CB  0DF3               	rlf	___lwdiv@divisor,f
  3841  01CC  0DF4               	rlf	___lwdiv@divisor+1,f
  3842  01CD  29C7               	goto	L7
  3843  01CE                     l4463:	
  3844  01CE  1003               	clrc
  3845  01CF  0DCF               	rlf	___lwdiv@quotient,f
  3846  01D0  0DD0               	rlf	___lwdiv@quotient+1,f
  3847  01D1  0874               	movf	___lwdiv@divisor+1,w
  3848  01D2  0276               	subwf	___lwdiv@dividend+1,w
  3849  01D3  1D03               	skipz
  3850  01D4  29D7               	goto	u3255
  3851  01D5  0873               	movf	___lwdiv@divisor,w
  3852  01D6  0275               	subwf	___lwdiv@dividend,w
  3853  01D7                     u3255:	
  3854  01D7  1C03               	skipc
  3855  01D8  29E1               	goto	L8
  3856  01D9  0873               	movf	___lwdiv@divisor,w
  3857  01DA  02F5               	subwf	___lwdiv@dividend,f
  3858  01DB  0874               	movf	___lwdiv@divisor+1,w
  3859  01DC  1C03               	skipc
  3860  01DD  03F6               	decf	___lwdiv@dividend+1,f
  3861  01DE  02F6               	subwf	___lwdiv@dividend+1,f
  3862  01DF  144F               	bsf	___lwdiv@quotient,0
  3863  01E0  1003               	clrc
  3864  01E1                     L8:	
  3865  01E1  0CF4               	rrf	___lwdiv@divisor+1,f
  3866  01E2  0CF3               	rrf	___lwdiv@divisor,f
  3867  01E3  0BCE               	decfsz	___lwdiv@counter,f
  3868  01E4  29CE               	goto	l4463
  3869  01E5                     l4475:	
  3870  01E5  0850               	movf	___lwdiv@quotient+1,w
  3871  01E6  00F4               	movwf	?___lwdiv+1
  3872  01E7  084F               	movf	___lwdiv@quotient,w
  3873  01E8  00F3               	movwf	?___lwdiv
  3874  01E9  0008               	return
  3875  01EA                     __end_of___lwdiv:	
  3876  01EA                     PL2:	
  3877  01EA  00F5               	movwf	??_ADC_Sample+1
  3878  01EB  01F6               	clrf	??_ADC_Sample+2
  3879  01EC  01F7               	clrf	??_ADC_Sample+3
  3880  01ED  0874               	movf	??_ADC_Sample,w
  3881  01EE  02D1               	subwf	ADC_Sample@adsum,f	;volatile
  3882  01EF  0875               	movf	??_ADC_Sample+1,w
  3883  01F0  1C03               	skipc
  3884  01F1  0F75               	incfsz	??_ADC_Sample+1,w
  3885  01F2  02D2               	subwf	ADC_Sample@adsum+1,f	;volatile
  3886  01F3  0876               	movf	??_ADC_Sample+2,w
  3887  01F4  1C03               	skipc
  3888  01F5  0F76               	incfsz	??_ADC_Sample+2,w
  3889  01F6  02D3               	subwf	ADC_Sample@adsum+2,f	;volatile
  3890  01F7  0877               	movf	??_ADC_Sample+3,w
  3891  01F8  0008               	return
  3892  01F9                     __end_ofPL2:	
  3893  01F9                     PL6:	
  3894  01F9  01D1               	clrf	ADC_Sample@adsum	;volatile
  3895  01FA  01D2               	clrf	ADC_Sample@adsum+1	;volatile
  3896  01FB  01D3               	clrf	ADC_Sample@adsum+2	;volatile
  3897  01FC  01D4               	clrf	ADC_Sample@adsum+3	;volatile
  3898  01FD  01D5               	clrf	ADC_Sample@admin	;volatile
  3899  01FE  01D6               	clrf	ADC_Sample@admin+1	;volatile
  3900  01FF  01D7               	clrf	ADC_Sample@admax	;volatile
  3901  0200  01D8               	clrf	ADC_Sample@admax+1	;volatile
  3902  0201  0008               	return
  3903  0202                     __end_ofPL6:	
  3904  0202                     PL12:	
  3905  0202  01C0               	clrf	_count900s
  3906  0203  01FA               	clrf	_modeStep
  3907  0204  01F9               	clrf	_workStep
  3908  0205  01C0               	clrf	_count900s
  3909  0206  01BF               	clrf	_lowBatFlag
  3910  0207  0ABF               	incf	_lowBatFlag,f
  3911  0208  0008               	return
  3912  0209                     __end_ofPL12:	
  3913  0209                     PL20:	
  3914  0209  085A               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3915  020A  00D8               	movwf	ADC_Sample@admax+1	;volatile
  3916  020B  0859               	movf	ADC_Sample@ad_temp,w	;volatile
  3917  020C  00D7               	movwf	ADC_Sample@admax	;volatile
  3918  020D  0008               	return
  3919  020E                     __end_ofPL20:	
  3920                           
  3921                           	psect	text20
  3922  020E                     __ptext20:	
  3923 ;; *************** function _Isr_Timer *****************
  3924 ;; Defined at:
  3925 ;;		line 125 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 300/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3939 ;;      Params:         0       0       0       0
  3940 ;;      Locals:         0       0       0       0
  3941 ;;      Temps:          3       0       0       0
  3942 ;;      Totals:         3       0       0       0
  3943 ;;Total ram usage:        3 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    3
  3946 ;; This function calls:
  3947 ;;		_updateLed
  3948 ;; This function is called by:
  3949 ;;		Interrupt level 1
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _Isr_Timer
  3955  020E                     _Isr_Timer:	
  3956                           
  3957                           ;main.c: 127: if(TMR2IF)
  3958  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3959  020F  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0210  1C8D               	btfss	13,1	;volatile
  3961  0211  2A2D               	goto	i1l4377
  3962                           
  3963                           ;main.c: 128: {
  3964                           ;main.c: 129: TMR2IF = 0;
  3965  0212  108D               	bcf	13,1	;volatile
  3966                           
  3967                           ;main.c: 130: updateLed();
  3968  0213  2237  118A         	fcall	_updateLed
  3969                           
  3970                           ;main.c: 131: if(++MainTime >= 158)
  3971  0215  309E               	movlw	158
  3972  0216  1283               	bcf	3,5	;RP0=0, select bank0
  3973  0217  0ACC               	incf	_MainTime,f	;volatile
  3974  0218  024C               	subwf	_MainTime,w	;volatile
  3975  0219  1C03               	skipc
  3976  021A  2A2E               	goto	i1l958
  3977                           
  3978                           ;main.c: 132: {
  3979                           ;main.c: 133: MainTime = 0;
  3980  021B  01CC               	clrf	_MainTime	;volatile
  3981                           
  3982                           ;main.c: 134: B_MainLoop = 1;
  3983  021C  14F8               	bsf	_B_MainLoop/(0+8),_B_MainLoop& (0+7)	;volatile
  3984                           
  3985                           ;main.c: 135: if(++count1s >= 3000)
  3986  021D  0AB8               	incf	_count1s,f
  3987  021E  1903               	skipnz
  3988  021F  0AB9               	incf	_count1s+1,f
  3989  0220  300B               	movlw	11
  3990  0221  0239               	subwf	_count1s+1,w
  3991  0222  30B8               	movlw	184
  3992  0223  1903               	skipnz
  3993  0224  0238               	subwf	_count1s,w
  3994  0225  1C03               	skipc
  3995  0226  2A2E               	goto	i1l958
  3996                           
  3997                           ;main.c: 136: {
  3998                           ;main.c: 137: count1s = 0;
  3999  0227  01B8               	clrf	_count1s
  4000  0228  01B9               	clrf	_count1s+1
  4001                           
  4002                           ;main.c: 138: wait30s = 1;
  4003  0229  01B6               	clrf	_wait30s
  4004  022A  0AB6               	incf	_wait30s,f
  4005  022B  01B7               	clrf	_wait30s+1
  4006  022C  2A2E               	goto	i1l958
  4007  022D                     i1l4377:	
  4008                           
  4009                           ;main.c: 142: else
  4010                           ;main.c: 143: {
  4011                           ;main.c: 144: PIR1 = 0;
  4012  022D  018D               	clrf	13	;volatile
  4013  022E                     i1l958:	
  4014  022E  0872               	movf	??_Isr_Timer+2,w
  4015  022F  008A               	movwf	10
  4016  0230  0871               	movf	??_Isr_Timer+1,w
  4017  0231  0084               	movwf	4
  4018  0232  0E70               	swapf	??_Isr_Timer^(0+-128),w
  4019  0233  0083               	movwf	3
  4020  0234  0EFE               	swapf	126,f
  4021  0235  0E7E               	swapf	126,w
  4022  0236  0009               	retfie
  4023  0237                     __end_of_Isr_Timer:	
  4024  0237                     __ptext21:	
  4025 ;; *************** function _updateLed *****************
  4026 ;; Defined at:
  4027 ;;		line 453 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\main.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 300/0
  4038 ;;		On exit  : 200/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4041 ;;      Params:         0       0       0       0
  4042 ;;      Locals:         0       0       0       0
  4043 ;;      Temps:          0       0       0       0
  4044 ;;      Totals:         0       0       0       0
  4045 ;;Total ram usage:        0 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    2
  4048 ;; This function calls:
  4049 ;;		_refreshLed
  4050 ;; This function is called by:
  4051 ;;		_Isr_Timer
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _updateLed
  4057  0237                     _updateLed:	
  4058                           
  4059                           ;main.c: 455: if(showFlag)
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _updateLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4063  0237  0844               	movf	_showFlag,w
  4064  0238  1903               	btfsc	3,2
  4065  0239  2A3B               	goto	i1l4001
  4066                           
  4067                           ;main.c: 456: {
  4068                           ;main.c: 457: refreshLed();
  4069  023A  2A3D               	ljmp	i1l3805
  4070  023B                     i1l4001:	
  4071                           ;main.c: 458: }
  4072                           
  4073                           
  4074                           ;main.c: 459: else
  4075                           ;main.c: 460: {
  4076                           ;main.c: 461: TRISB |= 0xFF;
  4077                           
  4078                           ;main.c: 462: TRISA |= 0x60;
  4079                           
  4080                           ;main.c: 463: PORTB &= 0x00;
  4081                           
  4082                           ;main.c: 464: PORTA &= 0x9F;
  4083  023B  23A7               	fcall	PL4	;call to abstracted procedure
  4084  023C  0008               	return
  4085  023D                     __end_of_updateLed:	
  4086  023D                     __ptext22:	
  4087 ;; *************** function _refreshLed *****************
  4088 ;; Defined at:
  4089 ;;		line 330 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 300/0
  4100 ;;		On exit  : 300/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4103 ;;      Params:         0       0       0       0
  4104 ;;      Locals:         0       0       0       0
  4105 ;;      Temps:          0       0       0       0
  4106 ;;      Totals:         0       0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    1
  4110 ;; This function calls:
  4111 ;;		_A1
  4112 ;;		_A2
  4113 ;;		_A3
  4114 ;;		_A4
  4115 ;;		_A5
  4116 ;;		_A6
  4117 ;;		_A7
  4118 ;;		_B1
  4119 ;;		_B2
  4120 ;;		_B3
  4121 ;;		_B4
  4122 ;;		_B5
  4123 ;;		_B6
  4124 ;;		_B7
  4125 ;;		_C1
  4126 ;;		_C2
  4127 ;;		_C3
  4128 ;;		_C4
  4129 ;;		_C5
  4130 ;;		_C6
  4131 ;;		_C7
  4132 ;;		_D1
  4133 ;;		_D2
  4134 ;;		_D3
  4135 ;;		_D4
  4136 ;;		_D5
  4137 ;;		_D6
  4138 ;;		_D7
  4139 ;;		_led1
  4140 ;;		_led2
  4141 ;;		_led3
  4142 ;; This function is called by:
  4143 ;;		_updateLed
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           
  4148                           ;psect for function _refreshLed
  4149  023D                     _refreshLed:	
  4150  023D                     i1l3805:	
  4151                           ;incstack = 0
  4152                           ; Regs used in _refreshLed: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4153                           
  4154                           
  4155                           ;number.c: 333: TRISB |= 0xFF;
  4156                           
  4157                           ;number.c: 334: TRISA |= 0x60;
  4158                           
  4159                           ;number.c: 335: PORTB &= 0x00;
  4160                           
  4161                           ;number.c: 336: PORTA &= 0x9F;
  4162  023D  23A7  118A         	fcall	PL4	;call to abstracted procedure
  4163                           
  4164                           ;number.c: 337: switch(ledCnt)
  4165  023F  2ADD               	goto	i1l3883
  4166  0240                     i1l2117:	
  4167                           ;number.c: 338: {
  4168                           ;number.c: 339: case 0:
  4169                           
  4170                           
  4171                           ;number.c: 340: if(showNumAShi & 0x01)
  4172  0240  1C60               	btfss	_showNumAShi,0
  4173  0241  2AEA               	goto	i1l3885
  4174                           
  4175                           ;number.c: 341: {
  4176                           ;number.c: 342: A1();
  4177  0242  22F1  118A         	fcall	_A1
  4178  0244  2AEA               	goto	i1l3885
  4179  0245                     i1l2120:	
  4180                           ;number.c: 345: case 1:
  4181                           
  4182                           
  4183                           ;number.c: 346: if(showNumAShi & 0x02)
  4184  0245  1CE0               	btfss	_showNumAShi,1
  4185  0246  2AEA               	goto	i1l3885
  4186                           
  4187                           ;number.c: 347: {
  4188                           ;number.c: 348: A2();
  4189  0247  22F6  118A         	fcall	_A2
  4190  0249  2AEA               	goto	i1l3885
  4191  024A                     i1l2122:	
  4192                           ;number.c: 351: case 2:
  4193                           
  4194                           
  4195                           ;number.c: 352: if(showNumAShi & 0x04)
  4196  024A  1D60               	btfss	_showNumAShi,2
  4197  024B  2AEA               	goto	i1l3885
  4198                           
  4199                           ;number.c: 353: {
  4200                           ;number.c: 354: A3();
  4201  024C  22FB  118A         	fcall	_A3
  4202  024E  2AEA               	goto	i1l3885
  4203  024F                     i1l2124:	
  4204                           ;number.c: 357: case 3:
  4205                           
  4206                           
  4207                           ;number.c: 358: if(showNumAShi & 0x08)
  4208  024F  1DE0               	btfss	_showNumAShi,3
  4209  0250  2AEA               	goto	i1l3885
  4210                           
  4211                           ;number.c: 359: {
  4212                           ;number.c: 360: A4();
  4213  0251  2300  118A         	fcall	_A4
  4214  0253  2AEA               	goto	i1l3885
  4215  0254                     i1l2126:	
  4216                           ;number.c: 363: case 4:
  4217                           
  4218                           
  4219                           ;number.c: 364: if(showNumAShi & 0x10)
  4220  0254  1E60               	btfss	_showNumAShi,4
  4221  0255  2AEA               	goto	i1l3885
  4222                           
  4223                           ;number.c: 365: {
  4224                           ;number.c: 366: A5();
  4225  0256  2305  118A         	fcall	_A5
  4226  0258  2AEA               	goto	i1l3885
  4227  0259                     i1l2128:	
  4228                           ;number.c: 369: case 5:
  4229                           
  4230                           
  4231                           ;number.c: 370: if(showNumAShi & 0x20)
  4232  0259  1EE0               	btfss	_showNumAShi,5
  4233  025A  2AEA               	goto	i1l3885
  4234                           
  4235                           ;number.c: 371: {
  4236                           ;number.c: 372: A6();
  4237  025B  230A  118A         	fcall	_A6
  4238  025D  2AEA               	goto	i1l3885
  4239  025E                     i1l2130:	
  4240                           ;number.c: 375: case 6:
  4241                           
  4242                           
  4243                           ;number.c: 376: if(showNumAShi & 0x40)
  4244  025E  1F60               	btfss	_showNumAShi,6
  4245  025F  2AEA               	goto	i1l3885
  4246                           
  4247                           ;number.c: 377: {
  4248                           ;number.c: 378: A7();
  4249  0260  230F  118A         	fcall	_A7
  4250  0262  2AEA               	goto	i1l3885
  4251  0263                     i1l2132:	
  4252                           ;number.c: 381: case 7:
  4253                           
  4254                           
  4255                           ;number.c: 382: if(showNumAge & 0x01)
  4256  0263  1C5F               	btfss	_showNumAge,0
  4257  0264  2AEA               	goto	i1l3885
  4258                           
  4259                           ;number.c: 383: {
  4260                           ;number.c: 384: B1();
  4261  0265  2314  118A         	fcall	_B1
  4262  0267  2AEA               	goto	i1l3885
  4263  0268                     i1l2134:	
  4264                           ;number.c: 387: case 8:
  4265                           
  4266                           
  4267                           ;number.c: 388: if(showNumAge & 0x02)
  4268  0268  1CDF               	btfss	_showNumAge,1
  4269  0269  2AEA               	goto	i1l3885
  4270                           
  4271                           ;number.c: 389: {
  4272                           ;number.c: 390: B2();
  4273  026A  2319  118A         	fcall	_B2
  4274  026C  2AEA               	goto	i1l3885
  4275  026D                     i1l2136:	
  4276                           ;number.c: 393: case 9:
  4277                           
  4278                           
  4279                           ;number.c: 394: if(showNumAge & 0x04)
  4280  026D  1D5F               	btfss	_showNumAge,2
  4281  026E  2AEA               	goto	i1l3885
  4282                           
  4283                           ;number.c: 395: {
  4284                           ;number.c: 396: B3();
  4285  026F  231E  118A         	fcall	_B3
  4286  0271  2AEA               	goto	i1l3885
  4287  0272                     i1l2138:	
  4288                           ;number.c: 399: case 10:
  4289                           
  4290                           
  4291                           ;number.c: 400: if(showNumAge & 0x08)
  4292  0272  1DDF               	btfss	_showNumAge,3
  4293  0273  2AEA               	goto	i1l3885
  4294                           
  4295                           ;number.c: 401: {
  4296                           ;number.c: 402: B4();
  4297  0274  2323  118A         	fcall	_B4
  4298  0276  2AEA               	goto	i1l3885
  4299  0277                     i1l2140:	
  4300                           ;number.c: 405: case 11:
  4301                           
  4302                           
  4303                           ;number.c: 406: if(showNumAge & 0x10)
  4304  0277  1E5F               	btfss	_showNumAge,4
  4305  0278  2AEA               	goto	i1l3885
  4306                           
  4307                           ;number.c: 407: {
  4308                           ;number.c: 408: B5();
  4309  0279  2328  118A         	fcall	_B5
  4310  027B  2AEA               	goto	i1l3885
  4311  027C                     i1l2142:	
  4312                           ;number.c: 411: case 12:
  4313                           
  4314                           
  4315                           ;number.c: 412: if(showNumAge & 0x20)
  4316  027C  1EDF               	btfss	_showNumAge,5
  4317  027D  2AEA               	goto	i1l3885
  4318                           
  4319                           ;number.c: 413: {
  4320                           ;number.c: 414: B6();
  4321  027E  232D  118A         	fcall	_B6
  4322  0280  2AEA               	goto	i1l3885
  4323  0281                     i1l2144:	
  4324                           ;number.c: 417: case 13:
  4325                           
  4326                           
  4327                           ;number.c: 418: if(showNumAge & 0x40)
  4328  0281  1F5F               	btfss	_showNumAge,6
  4329  0282  2AEA               	goto	i1l3885
  4330                           
  4331                           ;number.c: 419: {
  4332                           ;number.c: 420: B7();
  4333  0283  2332  118A         	fcall	_B7
  4334  0285  2AEA               	goto	i1l3885
  4335  0286                     i1l2146:	
  4336                           ;number.c: 423: case 14:
  4337                           
  4338                           
  4339                           ;number.c: 424: if(showNumBShi & 0x01)
  4340  0286  1C5E               	btfss	_showNumBShi,0
  4341  0287  2AEA               	goto	i1l3885
  4342                           
  4343                           ;number.c: 425: {
  4344                           ;number.c: 426: C1();
  4345  0288  2337  118A         	fcall	_C1
  4346  028A  2AEA               	goto	i1l3885
  4347  028B                     i1l2148:	
  4348                           ;number.c: 429: case 15:
  4349                           
  4350                           
  4351                           ;number.c: 430: if(showNumBShi & 0x02)
  4352  028B  1CDE               	btfss	_showNumBShi,1
  4353  028C  2AEA               	goto	i1l3885
  4354                           
  4355                           ;number.c: 431: {
  4356                           ;number.c: 432: C2();
  4357  028D  233C  118A         	fcall	_C2
  4358  028F  2AEA               	goto	i1l3885
  4359  0290                     i1l2150:	
  4360                           ;number.c: 435: case 16:
  4361                           
  4362                           
  4363                           ;number.c: 436: if(showNumBShi & 0x04)
  4364  0290  1D5E               	btfss	_showNumBShi,2
  4365  0291  2AEA               	goto	i1l3885
  4366                           
  4367                           ;number.c: 437: {
  4368                           ;number.c: 438: C3();
  4369  0292  2341  118A         	fcall	_C3
  4370  0294  2AEA               	goto	i1l3885
  4371  0295                     i1l2152:	
  4372                           ;number.c: 441: case 17:
  4373                           
  4374                           
  4375                           ;number.c: 442: if(showNumBShi & 0x08)
  4376  0295  1DDE               	btfss	_showNumBShi,3
  4377  0296  2AEA               	goto	i1l3885
  4378                           
  4379                           ;number.c: 443: {
  4380                           ;number.c: 444: C4();
  4381  0297  234A  118A         	fcall	_C4
  4382  0299  2AEA               	goto	i1l3885
  4383  029A                     i1l2154:	
  4384                           ;number.c: 447: case 18:
  4385                           
  4386                           
  4387                           ;number.c: 448: if(showNumBShi & 0x10)
  4388  029A  1E5E               	btfss	_showNumBShi,4
  4389  029B  2AEA               	goto	i1l3885
  4390                           
  4391                           ;number.c: 449: {
  4392                           ;number.c: 450: C5();
  4393  029C  2353  118A         	fcall	_C5
  4394  029E  2AEA               	goto	i1l3885
  4395  029F                     i1l2156:	
  4396                           ;number.c: 453: case 19:
  4397                           
  4398                           
  4399                           ;number.c: 454: if(showNumBShi & 0x20)
  4400  029F  1EDE               	btfss	_showNumBShi,5
  4401  02A0  2AEA               	goto	i1l3885
  4402                           
  4403                           ;number.c: 455: {
  4404                           ;number.c: 456: C6();
  4405  02A1  2358  118A         	fcall	_C6
  4406  02A3  2AEA               	goto	i1l3885
  4407  02A4                     i1l2158:	
  4408                           ;number.c: 459: case 20:
  4409                           
  4410                           
  4411                           ;number.c: 460: if(showNumBShi & 0x40)
  4412  02A4  1F5E               	btfss	_showNumBShi,6
  4413  02A5  2AEA               	goto	i1l3885
  4414                           
  4415                           ;number.c: 461: {
  4416                           ;number.c: 462: C7();
  4417  02A6  235D  118A         	fcall	_C7
  4418  02A8  2AEA               	goto	i1l3885
  4419  02A9                     i1l2160:	
  4420                           ;number.c: 465: case 21:
  4421                           
  4422                           
  4423                           ;number.c: 466: if(showNumBge & 0x01)
  4424  02A9  1C5D               	btfss	_showNumBge,0
  4425  02AA  2AEA               	goto	i1l3885
  4426                           
  4427                           ;number.c: 467: {
  4428                           ;number.c: 468: D1();
  4429  02AB  2365  118A         	fcall	_D1
  4430  02AD  2AEA               	goto	i1l3885
  4431  02AE                     i1l2162:	
  4432                           ;number.c: 471: case 22:
  4433                           
  4434                           
  4435                           ;number.c: 472: if(showNumBge & 0x02)
  4436  02AE  1CDD               	btfss	_showNumBge,1
  4437  02AF  2AEA               	goto	i1l3885
  4438                           
  4439                           ;number.c: 473: {
  4440                           ;number.c: 474: D2();
  4441  02B0  236C  118A         	fcall	_D2
  4442  02B2  2AEA               	goto	i1l3885
  4443  02B3                     i1l2164:	
  4444                           ;number.c: 477: case 23:
  4445                           
  4446                           
  4447                           ;number.c: 478: if(showNumBge & 0x04)
  4448  02B3  1D5D               	btfss	_showNumBge,2
  4449  02B4  2AEA               	goto	i1l3885
  4450                           
  4451                           ;number.c: 479: {
  4452                           ;number.c: 480: D3();
  4453  02B5  2373  118A         	fcall	_D3
  4454  02B7  2AEA               	goto	i1l3885
  4455  02B8                     i1l2166:	
  4456                           ;number.c: 483: case 24:
  4457                           
  4458                           
  4459                           ;number.c: 484: if(showNumBge & 0x08)
  4460  02B8  1DDD               	btfss	_showNumBge,3
  4461  02B9  2AEA               	goto	i1l3885
  4462                           
  4463                           ;number.c: 485: {
  4464                           ;number.c: 486: D4();
  4465  02BA  2378  118A         	fcall	_D4
  4466  02BC  2AEA               	goto	i1l3885
  4467  02BD                     i1l2168:	
  4468                           ;number.c: 489: case 25:
  4469                           
  4470                           
  4471                           ;number.c: 490: if(showNumBge & 0x10)
  4472  02BD  1E5D               	btfss	_showNumBge,4
  4473  02BE  2AEA               	goto	i1l3885
  4474                           
  4475                           ;number.c: 491: {
  4476                           ;number.c: 492: D5();
  4477  02BF  2380  118A         	fcall	_D5
  4478  02C1  2AEA               	goto	i1l3885
  4479  02C2                     i1l2170:	
  4480                           ;number.c: 495: case 26:
  4481                           
  4482                           
  4483                           ;number.c: 496: if(showNumBge & 0x20)
  4484  02C2  1EDD               	btfss	_showNumBge,5
  4485  02C3  2AEA               	goto	i1l3885
  4486                           
  4487                           ;number.c: 497: {
  4488                           ;number.c: 498: D6();
  4489  02C4  2388  118A         	fcall	_D6
  4490  02C6  2AEA               	goto	i1l3885
  4491  02C7                     i1l2172:	
  4492                           ;number.c: 501: case 27:
  4493                           
  4494                           
  4495                           ;number.c: 502: if(showNumBge & 0x40)
  4496  02C7  1F5D               	btfss	_showNumBge,6
  4497  02C8  2AEA               	goto	i1l3885
  4498                           
  4499                           ;number.c: 503: {
  4500                           ;number.c: 504: D7();
  4501  02C9  2390  118A         	fcall	_D7
  4502  02CB  2AEA               	goto	i1l3885
  4503  02CC                     i1l3869:	
  4504                           
  4505                           ;number.c: 508: if(modeStep == 1)
  4506  02CC  0B7A               	decfsz	_modeStep,w
  4507  02CD  2AD0               	goto	i1l3873
  4508                           
  4509                           ;number.c: 509: {
  4510                           ;number.c: 510: led1();
  4511  02CE  2398  118A         	fcall	_led1
  4512  02D0                     i1l3873:	
  4513                           
  4514                           ;number.c: 511: }
  4515                           ;number.c: 512: if(modeStep == 2)
  4516  02D0  3002               	movlw	2
  4517  02D1  067A               	xorwf	_modeStep,w
  4518  02D2  1D03               	btfss	3,2
  4519  02D3  2AD6               	goto	i1l3877
  4520                           
  4521                           ;number.c: 513: {
  4522                           ;number.c: 514: led2();
  4523  02D4  239D  118A         	fcall	_led2
  4524  02D6                     i1l3877:	
  4525                           
  4526                           ;number.c: 515: }
  4527                           ;number.c: 516: if(modeStep == 3)
  4528  02D6  3003               	movlw	3
  4529  02D7  067A               	xorwf	_modeStep,w
  4530  02D8  1D03               	btfss	3,2
  4531  02D9  2AEA               	goto	i1l3885
  4532                           
  4533                           ;number.c: 517: {
  4534                           ;number.c: 518: led3();
  4535  02DA  23A2  118A         	fcall	_led3
  4536  02DC  2AEA               	goto	i1l3885
  4537  02DD                     i1l3883:	
  4538  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  4539  02DE  084D               	movf	_ledCnt,w
  4540                           
  4541                           ; Switch size 1, requested type "space"
  4542                           ; Number of cases is 28, Range of values is 0 to 27
  4543                           ; switch strategies available:
  4544                           ; Name         Instructions Cycles
  4545                           ; direct_byte           63     7 (fixed)
  4546                           ; simple_byte           85    43 (average)
  4547                           ; jumptable            260     6 (fixed)
  4548                           ;	Chosen strategy is direct_byte
  4549  02DF  0084               	movwf	4
  4550  02E0  301C               	movlw	28
  4551  02E1  0204               	subwf	4,w
  4552  02E2  1803               	skipnc
  4553  02E3  2ACC               	goto	i1l3869
  4554  02E4  3006               	movlw	high i1S4675
  4555  02E5  008A               	movwf	10
  4556  02E6  1003               	clrc
  4557  02E7  0D04               	rlf	4,w
  4558  02E8  3EC3               	addlw	low i1S4675
  4559  02E9  0082               	movwf	2
  4560  02EA                     i1l3885:	
  4561                           
  4562                           ;number.c: 523: if(++ledCnt >= 40)
  4563  02EA  3028               	movlw	40
  4564  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  4565  02EC  0ACD               	incf	_ledCnt,f
  4566  02ED  024D               	subwf	_ledCnt,w
  4567  02EE  1803               	btfsc	3,0
  4568                           
  4569                           ;number.c: 524: {
  4570                           ;number.c: 525: ledCnt = 0;
  4571  02EF  01CD               	clrf	_ledCnt
  4572  02F0  0008               	return
  4573  02F1                     __end_of_refreshLed:	
  4574  02F1                     __ptext53:	
  4575 ;; *************** function _A1 *****************
  4576 ;; Defined at:
  4577 ;;		line 5 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		None
  4586 ;; Tracked objects:
  4587 ;;		On entry : 300/0
  4588 ;;		On exit  : 300/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4591 ;;      Params:         0       0       0       0
  4592 ;;      Locals:         0       0       0       0
  4593 ;;      Temps:          0       0       0       0
  4594 ;;      Totals:         0       0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_refreshLed
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           
  4605                           ;psect for function _A1
  4606  02F1                     _A1:	
  4607                           
  4608                           ;number.c: 7: TRISB2 = 0;
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in _A1: []
  4612  02F1  1105               	bcf	5,2	;volatile
  4613                           
  4614                           ;number.c: 8: TRISB1 = 0;
  4615  02F2  1085               	bcf	5,1	;volatile
  4616                           
  4617                           ;number.c: 9: RB2 = 1;
  4618  02F3  1506               	bsf	6,2	;volatile
  4619                           
  4620                           ;number.c: 10: RB1 = 0;
  4621  02F4  1086               	bcf	6,1	;volatile
  4622  02F5  0008               	return
  4623  02F6                     __end_of_A1:	
  4624  007E                     btemp	set	126	;btemp
  4625  007E                     wtemp0	set	126
  4626  02F6                     __ptext52:	
  4627 ;; *************** function _A2 *****************
  4628 ;; Defined at:
  4629 ;;		line 13 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;		None
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;		None
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  1    wreg      void 
  4636 ;; Registers used:
  4637 ;;		None
  4638 ;; Tracked objects:
  4639 ;;		On entry : 300/0
  4640 ;;		On exit  : 300/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4643 ;;      Params:         0       0       0       0
  4644 ;;      Locals:         0       0       0       0
  4645 ;;      Temps:          0       0       0       0
  4646 ;;      Totals:         0       0       0       0
  4647 ;;Total ram usage:        0 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_refreshLed
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _A2
  4658  02F6                     _A2:	
  4659                           
  4660                           ;number.c: 15: TRISB3 = 0;
  4661                           
  4662                           ;incstack = 0
  4663                           ; Regs used in _A2: []
  4664  02F6  1185               	bcf	5,3	;volatile
  4665                           
  4666                           ;number.c: 16: TRISB1 = 0;
  4667  02F7  1085               	bcf	5,1	;volatile
  4668                           
  4669                           ;number.c: 17: RB3 = 1;
  4670  02F8  1586               	bsf	6,3	;volatile
  4671                           
  4672                           ;number.c: 18: RB1 = 0;
  4673  02F9  1086               	bcf	6,1	;volatile
  4674  02FA  0008               	return
  4675  02FB                     __end_of_A2:	
  4676  02FB                     __ptext51:	
  4677 ;; *************** function _A3 *****************
  4678 ;; Defined at:
  4679 ;;		line 21 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		None
  4688 ;; Tracked objects:
  4689 ;;		On entry : 300/0
  4690 ;;		On exit  : 300/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4693 ;;      Params:         0       0       0       0
  4694 ;;      Locals:         0       0       0       0
  4695 ;;      Temps:          0       0       0       0
  4696 ;;      Totals:         0       0       0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_refreshLed
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _A3
  4708  02FB                     _A3:	
  4709                           
  4710                           ;number.c: 23: TRISB4 = 0;
  4711                           
  4712                           ;incstack = 0
  4713                           ; Regs used in _A3: []
  4714  02FB  1205               	bcf	5,4	;volatile
  4715                           
  4716                           ;number.c: 24: TRISB1 = 0;
  4717  02FC  1085               	bcf	5,1	;volatile
  4718                           
  4719                           ;number.c: 25: RB4 = 1;
  4720  02FD  1606               	bsf	6,4	;volatile
  4721                           
  4722                           ;number.c: 26: RB1 = 0;
  4723  02FE  1086               	bcf	6,1	;volatile
  4724  02FF  0008               	return
  4725  0300                     __end_of_A3:	
  4726  0300                     __ptext50:	
  4727 ;; *************** function _A4 *****************
  4728 ;; Defined at:
  4729 ;;		line 29 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		None
  4738 ;; Tracked objects:
  4739 ;;		On entry : 300/0
  4740 ;;		On exit  : 300/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4743 ;;      Params:         0       0       0       0
  4744 ;;      Locals:         0       0       0       0
  4745 ;;      Temps:          0       0       0       0
  4746 ;;      Totals:         0       0       0       0
  4747 ;;Total ram usage:        0 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_refreshLed
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _A4
  4758  0300                     _A4:	
  4759                           
  4760                           ;number.c: 31: TRISB5 = 0;
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _A4: []
  4764  0300  1285               	bcf	5,5	;volatile
  4765                           
  4766                           ;number.c: 32: TRISB1 = 0;
  4767  0301  1085               	bcf	5,1	;volatile
  4768                           
  4769                           ;number.c: 33: RB5 = 1;
  4770  0302  1686               	bsf	6,5	;volatile
  4771                           
  4772                           ;number.c: 34: RB1 = 0;
  4773  0303  1086               	bcf	6,1	;volatile
  4774  0304  0008               	return
  4775  0305                     __end_of_A4:	
  4776  0305                     __ptext49:	
  4777 ;; *************** function _A5 *****************
  4778 ;; Defined at:
  4779 ;;		line 37 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;		None
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		None
  4788 ;; Tracked objects:
  4789 ;;		On entry : 300/0
  4790 ;;		On exit  : 300/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4793 ;;      Params:         0       0       0       0
  4794 ;;      Locals:         0       0       0       0
  4795 ;;      Temps:          0       0       0       0
  4796 ;;      Totals:         0       0       0       0
  4797 ;;Total ram usage:        0 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_refreshLed
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _A5
  4808  0305                     _A5:	
  4809                           
  4810                           ;number.c: 39: TRISB1 = 0;
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _A5: []
  4814  0305  1085               	bcf	5,1	;volatile
  4815                           
  4816                           ;number.c: 40: TRISB2 = 0;
  4817  0306  1105               	bcf	5,2	;volatile
  4818                           
  4819                           ;number.c: 41: RB1 = 1;
  4820  0307  1486               	bsf	6,1	;volatile
  4821                           
  4822                           ;number.c: 42: RB2 = 0;
  4823  0308  1106               	bcf	6,2	;volatile
  4824  0309  0008               	return
  4825  030A                     __end_of_A5:	
  4826  030A                     __ptext48:	
  4827 ;; *************** function _A6 *****************
  4828 ;; Defined at:
  4829 ;;		line 45 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  1    wreg      void 
  4836 ;; Registers used:
  4837 ;;		None
  4838 ;; Tracked objects:
  4839 ;;		On entry : 300/0
  4840 ;;		On exit  : 300/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4843 ;;      Params:         0       0       0       0
  4844 ;;      Locals:         0       0       0       0
  4845 ;;      Temps:          0       0       0       0
  4846 ;;      Totals:         0       0       0       0
  4847 ;;Total ram usage:        0 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_refreshLed
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function _A6
  4858  030A                     _A6:	
  4859                           
  4860                           ;number.c: 47: TRISB1 = 0;
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in _A6: []
  4864  030A  1085               	bcf	5,1	;volatile
  4865                           
  4866                           ;number.c: 48: TRISB3 = 0;
  4867  030B  1185               	bcf	5,3	;volatile
  4868                           
  4869                           ;number.c: 49: RB1 = 1;
  4870  030C  1486               	bsf	6,1	;volatile
  4871                           
  4872                           ;number.c: 50: RB3 = 0;
  4873  030D  1186               	bcf	6,3	;volatile
  4874  030E  0008               	return
  4875  030F                     __end_of_A6:	
  4876  030F                     __ptext47:	
  4877 ;; *************** function _A7 *****************
  4878 ;; Defined at:
  4879 ;;		line 53 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;		None
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		None
  4888 ;; Tracked objects:
  4889 ;;		On entry : 300/0
  4890 ;;		On exit  : 300/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4893 ;;      Params:         0       0       0       0
  4894 ;;      Locals:         0       0       0       0
  4895 ;;      Temps:          0       0       0       0
  4896 ;;      Totals:         0       0       0       0
  4897 ;;Total ram usage:        0 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_refreshLed
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function _A7
  4908  030F                     _A7:	
  4909                           
  4910                           ;number.c: 55: TRISB1 = 0;
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _A7: []
  4914  030F  1085               	bcf	5,1	;volatile
  4915                           
  4916                           ;number.c: 56: TRISB4 = 0;
  4917  0310  1205               	bcf	5,4	;volatile
  4918                           
  4919                           ;number.c: 57: RB1 = 1;
  4920  0311  1486               	bsf	6,1	;volatile
  4921                           
  4922                           ;number.c: 58: RB4 = 0;
  4923  0312  1206               	bcf	6,4	;volatile
  4924  0313  0008               	return
  4925  0314                     __end_of_A7:	
  4926  0314                     __ptext46:	
  4927 ;; *************** function _B1 *****************
  4928 ;; Defined at:
  4929 ;;		line 61 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		None
  4938 ;; Tracked objects:
  4939 ;;		On entry : 300/0
  4940 ;;		On exit  : 300/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4943 ;;      Params:         0       0       0       0
  4944 ;;      Locals:         0       0       0       0
  4945 ;;      Temps:          0       0       0       0
  4946 ;;      Totals:         0       0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; This function calls:
  4950 ;;		Nothing
  4951 ;; This function is called by:
  4952 ;;		_refreshLed
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _B1
  4958  0314                     _B1:	
  4959                           
  4960                           ;number.c: 63: TRISB2 = 0;
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in _B1: []
  4964  0314  1105               	bcf	5,2	;volatile
  4965                           
  4966                           ;number.c: 64: TRISB4 = 0;
  4967  0315  1205               	bcf	5,4	;volatile
  4968                           
  4969                           ;number.c: 65: RB4 = 1;
  4970  0316  1606               	bsf	6,4	;volatile
  4971                           
  4972                           ;number.c: 66: RB2 = 0;
  4973  0317  1106               	bcf	6,2	;volatile
  4974  0318  0008               	return
  4975  0319                     __end_of_B1:	
  4976  0319                     __ptext45:	
  4977 ;; *************** function _B2 *****************
  4978 ;; Defined at:
  4979 ;;		line 69 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      void 
  4986 ;; Registers used:
  4987 ;;		None
  4988 ;; Tracked objects:
  4989 ;;		On entry : 300/0
  4990 ;;		On exit  : 300/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4993 ;;      Params:         0       0       0       0
  4994 ;;      Locals:         0       0       0       0
  4995 ;;      Temps:          0       0       0       0
  4996 ;;      Totals:         0       0       0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_refreshLed
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _B2
  5008  0319                     _B2:	
  5009                           
  5010                           ;number.c: 71: TRISB2 = 0;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _B2: []
  5014  0319  1105               	bcf	5,2	;volatile
  5015                           
  5016                           ;number.c: 72: TRISB5 = 0;
  5017  031A  1285               	bcf	5,5	;volatile
  5018                           
  5019                           ;number.c: 73: RB5 = 1;
  5020  031B  1686               	bsf	6,5	;volatile
  5021                           
  5022                           ;number.c: 74: RB2 = 0;
  5023  031C  1106               	bcf	6,2	;volatile
  5024  031D  0008               	return
  5025  031E                     __end_of_B2:	
  5026  031E                     __ptext44:	
  5027 ;; *************** function _B3 *****************
  5028 ;; Defined at:
  5029 ;;		line 77 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;		None
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;		None
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		None
  5038 ;; Tracked objects:
  5039 ;;		On entry : 300/0
  5040 ;;		On exit  : 300/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5043 ;;      Params:         0       0       0       0
  5044 ;;      Locals:         0       0       0       0
  5045 ;;      Temps:          0       0       0       0
  5046 ;;      Totals:         0       0       0       0
  5047 ;;Total ram usage:        0 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_refreshLed
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function _B3
  5058  031E                     _B3:	
  5059                           
  5060                           ;number.c: 79: TRISB2 = 0;
  5061                           
  5062                           ;incstack = 0
  5063                           ; Regs used in _B3: []
  5064  031E  1105               	bcf	5,2	;volatile
  5065                           
  5066                           ;number.c: 80: TRISB3 = 0;
  5067  031F  1185               	bcf	5,3	;volatile
  5068                           
  5069                           ;number.c: 81: RB2 = 1;
  5070  0320  1506               	bsf	6,2	;volatile
  5071                           
  5072                           ;number.c: 82: RB3 = 0;
  5073  0321  1186               	bcf	6,3	;volatile
  5074  0322  0008               	return
  5075  0323                     __end_of_B3:	
  5076  0323                     __ptext43:	
  5077 ;; *************** function _B4 *****************
  5078 ;; Defined at:
  5079 ;;		line 85 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;		None
  5084 ;; Return value:  Size  Location     Type
  5085 ;;                  1    wreg      void 
  5086 ;; Registers used:
  5087 ;;		None
  5088 ;; Tracked objects:
  5089 ;;		On entry : 300/0
  5090 ;;		On exit  : 300/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5093 ;;      Params:         0       0       0       0
  5094 ;;      Locals:         0       0       0       0
  5095 ;;      Temps:          0       0       0       0
  5096 ;;      Totals:         0       0       0       0
  5097 ;;Total ram usage:        0 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_refreshLed
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function _B4
  5108  0323                     _B4:	
  5109                           
  5110                           ;number.c: 87: TRISB2 = 0;
  5111                           
  5112                           ;incstack = 0
  5113                           ; Regs used in _B4: []
  5114  0323  1105               	bcf	5,2	;volatile
  5115                           
  5116                           ;number.c: 88: TRISB4 = 0;
  5117  0324  1205               	bcf	5,4	;volatile
  5118                           
  5119                           ;number.c: 89: RB2 = 1;
  5120  0325  1506               	bsf	6,2	;volatile
  5121                           
  5122                           ;number.c: 90: RB4 = 0;
  5123  0326  1206               	bcf	6,4	;volatile
  5124  0327  0008               	return
  5125  0328                     __end_of_B4:	
  5126  0328                     __ptext42:	
  5127 ;; *************** function _B5 *****************
  5128 ;; Defined at:
  5129 ;;		line 93 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;		None
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;		None
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  1    wreg      void 
  5136 ;; Registers used:
  5137 ;;		None
  5138 ;; Tracked objects:
  5139 ;;		On entry : 300/0
  5140 ;;		On exit  : 300/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5143 ;;      Params:         0       0       0       0
  5144 ;;      Locals:         0       0       0       0
  5145 ;;      Temps:          0       0       0       0
  5146 ;;      Totals:         0       0       0       0
  5147 ;;Total ram usage:        0 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_refreshLed
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _B5
  5158  0328                     _B5:	
  5159                           
  5160                           ;number.c: 95: TRISB2 = 0;
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _B5: []
  5164  0328  1105               	bcf	5,2	;volatile
  5165                           
  5166                           ;number.c: 96: TRISB5 = 0;
  5167  0329  1285               	bcf	5,5	;volatile
  5168                           
  5169                           ;number.c: 97: RB2 = 1;
  5170  032A  1506               	bsf	6,2	;volatile
  5171                           
  5172                           ;number.c: 98: RB5 = 0;
  5173  032B  1286               	bcf	6,5	;volatile
  5174  032C  0008               	return
  5175  032D                     __end_of_B5:	
  5176  032D                     __ptext41:	
  5177 ;; *************** function _B6 *****************
  5178 ;; Defined at:
  5179 ;;		line 102 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		None
  5188 ;; Tracked objects:
  5189 ;;		On entry : 300/0
  5190 ;;		On exit  : 300/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5193 ;;      Params:         0       0       0       0
  5194 ;;      Locals:         0       0       0       0
  5195 ;;      Temps:          0       0       0       0
  5196 ;;      Totals:         0       0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_refreshLed
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _B6
  5208  032D                     _B6:	
  5209                           
  5210                           ;number.c: 104: TRISB3 = 0;
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _B6: []
  5214  032D  1185               	bcf	5,3	;volatile
  5215                           
  5216                           ;number.c: 105: TRISB4 = 0;
  5217  032E  1205               	bcf	5,4	;volatile
  5218                           
  5219                           ;number.c: 106: RB3 = 1;
  5220  032F  1586               	bsf	6,3	;volatile
  5221                           
  5222                           ;number.c: 107: RB4 = 0;
  5223  0330  1206               	bcf	6,4	;volatile
  5224  0331  0008               	return
  5225  0332                     __end_of_B6:	
  5226  0332                     __ptext40:	
  5227 ;; *************** function _B7 *****************
  5228 ;; Defined at:
  5229 ;;		line 110 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		None
  5238 ;; Tracked objects:
  5239 ;;		On entry : 300/0
  5240 ;;		On exit  : 300/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5243 ;;      Params:         0       0       0       0
  5244 ;;      Locals:         0       0       0       0
  5245 ;;      Temps:          0       0       0       0
  5246 ;;      Totals:         0       0       0       0
  5247 ;;Total ram usage:        0 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_refreshLed
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           
  5257                           ;psect for function _B7
  5258  0332                     _B7:	
  5259                           
  5260                           ;number.c: 112: TRISB3 = 0;
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _B7: []
  5264  0332  1185               	bcf	5,3	;volatile
  5265                           
  5266                           ;number.c: 113: TRISB5 = 0;
  5267  0333  1285               	bcf	5,5	;volatile
  5268                           
  5269                           ;number.c: 114: RB3 = 1;
  5270  0334  1586               	bsf	6,3	;volatile
  5271                           
  5272                           ;number.c: 115: RB5 = 0;
  5273  0335  1286               	bcf	6,5	;volatile
  5274  0336  0008               	return
  5275  0337                     __end_of_B7:	
  5276  0337                     __ptext39:	
  5277 ;; *************** function _C1 *****************
  5278 ;; Defined at:
  5279 ;;		line 119 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;		None
  5282 ;; Auto vars:     Size  Location     Type
  5283 ;;		None
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  1    wreg      void 
  5286 ;; Registers used:
  5287 ;;		None
  5288 ;; Tracked objects:
  5289 ;;		On entry : 300/0
  5290 ;;		On exit  : 300/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5293 ;;      Params:         0       0       0       0
  5294 ;;      Locals:         0       0       0       0
  5295 ;;      Temps:          0       0       0       0
  5296 ;;      Totals:         0       0       0       0
  5297 ;;Total ram usage:        0 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; This function calls:
  5300 ;;		Nothing
  5301 ;; This function is called by:
  5302 ;;		_refreshLed
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           
  5307                           ;psect for function _C1
  5308  0337                     _C1:	
  5309                           
  5310                           ;number.c: 121: TRISB7 = 0;
  5311                           
  5312                           ;incstack = 0
  5313                           ; Regs used in _C1: []
  5314  0337  1385               	bcf	5,7	;volatile
  5315                           
  5316                           ;number.c: 122: TRISB6 = 0;
  5317  0338  1305               	bcf	5,6	;volatile
  5318                           
  5319                           ;number.c: 123: RB7 = 1;
  5320  0339  1786               	bsf	6,7	;volatile
  5321                           
  5322                           ;number.c: 124: RB6 = 0;
  5323  033A  1306               	bcf	6,6	;volatile
  5324  033B  0008               	return
  5325  033C                     __end_of_C1:	
  5326  033C                     __ptext38:	
  5327 ;; *************** function _C2 *****************
  5328 ;; Defined at:
  5329 ;;		line 127 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		None
  5338 ;; Tracked objects:
  5339 ;;		On entry : 300/0
  5340 ;;		On exit  : 300/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5343 ;;      Params:         0       0       0       0
  5344 ;;      Locals:         0       0       0       0
  5345 ;;      Temps:          0       0       0       0
  5346 ;;      Totals:         0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_refreshLed
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _C2
  5358  033C                     _C2:	
  5359                           
  5360                           ;number.c: 129: TRISB0 = 0;
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _C2: []
  5364  033C  1005               	bcf	5,0	;volatile
  5365                           
  5366                           ;number.c: 130: TRISB6 = 0;
  5367  033D  1305               	bcf	5,6	;volatile
  5368                           
  5369                           ;number.c: 131: RB0 = 1;
  5370  033E  1406               	bsf	6,0	;volatile
  5371                           
  5372                           ;number.c: 132: RB6 = 0;
  5373  033F  1306               	bcf	6,6	;volatile
  5374  0340  0008               	return
  5375  0341                     __end_of_C2:	
  5376  0341                     __ptext37:	
  5377 ;; *************** function _C3 *****************
  5378 ;; Defined at:
  5379 ;;		line 135 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		None
  5388 ;; Tracked objects:
  5389 ;;		On entry : 300/0
  5390 ;;		On exit  : 300/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5393 ;;      Params:         0       0       0       0
  5394 ;;      Locals:         0       0       0       0
  5395 ;;      Temps:          0       0       0       0
  5396 ;;      Totals:         0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_refreshLed
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _C3
  5408  0341                     _C3:	
  5409                           
  5410                           ;number.c: 137: TRISA6 = 0;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _C3: []
  5414  0341  1683               	bsf	3,5	;RP0=1, select bank1
  5415  0342  1305               	bcf	5,6	;volatile
  5416                           
  5417                           ;number.c: 138: TRISB6 = 0;
  5418  0343  1283               	bcf	3,5	;RP0=0, select bank0
  5419  0344  1305               	bcf	5,6	;volatile
  5420                           
  5421                           ;number.c: 139: RA6 = 1;
  5422  0345  1683               	bsf	3,5	;RP0=1, select bank1
  5423  0346  1706               	bsf	6,6	;volatile
  5424                           
  5425                           ;number.c: 140: RB6 = 0;
  5426  0347  1283               	bcf	3,5	;RP0=0, select bank0
  5427  0348  1306               	bcf	6,6	;volatile
  5428  0349  0008               	return
  5429  034A                     __end_of_C3:	
  5430  034A                     __ptext36:	
  5431 ;; *************** function _C4 *****************
  5432 ;; Defined at:
  5433 ;;		line 143 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		None
  5442 ;; Tracked objects:
  5443 ;;		On entry : 300/0
  5444 ;;		On exit  : 300/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5447 ;;      Params:         0       0       0       0
  5448 ;;      Locals:         0       0       0       0
  5449 ;;      Temps:          0       0       0       0
  5450 ;;      Totals:         0       0       0       0
  5451 ;;Total ram usage:        0 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_refreshLed
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _C4
  5462  034A                     _C4:	
  5463                           
  5464                           ;number.c: 145: TRISA5 = 0;
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _C4: []
  5468  034A  1683               	bsf	3,5	;RP0=1, select bank1
  5469  034B  1285               	bcf	5,5	;volatile
  5470                           
  5471                           ;number.c: 146: TRISB6 = 0;
  5472  034C  1283               	bcf	3,5	;RP0=0, select bank0
  5473  034D  1305               	bcf	5,6	;volatile
  5474                           
  5475                           ;number.c: 147: RA5 = 1;
  5476  034E  1683               	bsf	3,5	;RP0=1, select bank1
  5477  034F  1686               	bsf	6,5	;volatile
  5478                           
  5479                           ;number.c: 148: RB6 = 0;
  5480  0350  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0351  1306               	bcf	6,6	;volatile
  5482  0352  0008               	return
  5483  0353                     __end_of_C4:	
  5484  0353                     __ptext35:	
  5485 ;; *************** function _C5 *****************
  5486 ;; Defined at:
  5487 ;;		line 151 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		None
  5496 ;; Tracked objects:
  5497 ;;		On entry : 300/0
  5498 ;;		On exit  : 300/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5501 ;;      Params:         0       0       0       0
  5502 ;;      Locals:         0       0       0       0
  5503 ;;      Temps:          0       0       0       0
  5504 ;;      Totals:         0       0       0       0
  5505 ;;Total ram usage:        0 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_refreshLed
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function _C5
  5516  0353                     _C5:	
  5517                           
  5518                           ;number.c: 153: TRISB6 = 0;
  5519                           
  5520                           ;incstack = 0
  5521                           ; Regs used in _C5: []
  5522  0353  1305               	bcf	5,6	;volatile
  5523                           
  5524                           ;number.c: 154: TRISB7 = 0;
  5525  0354  1385               	bcf	5,7	;volatile
  5526                           
  5527                           ;number.c: 155: RB6 = 1;
  5528  0355  1706               	bsf	6,6	;volatile
  5529                           
  5530                           ;number.c: 156: RB7 = 0;
  5531  0356  1386               	bcf	6,7	;volatile
  5532  0357  0008               	return
  5533  0358                     __end_of_C5:	
  5534  0358                     __ptext34:	
  5535 ;; *************** function _C6 *****************
  5536 ;; Defined at:
  5537 ;;		line 159 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		None
  5546 ;; Tracked objects:
  5547 ;;		On entry : 300/0
  5548 ;;		On exit  : 300/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5551 ;;      Params:         0       0       0       0
  5552 ;;      Locals:         0       0       0       0
  5553 ;;      Temps:          0       0       0       0
  5554 ;;      Totals:         0       0       0       0
  5555 ;;Total ram usage:        0 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_refreshLed
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           
  5565                           ;psect for function _C6
  5566  0358                     _C6:	
  5567                           
  5568                           ;number.c: 161: TRISB6 = 0;
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _C6: []
  5572  0358  1305               	bcf	5,6	;volatile
  5573                           
  5574                           ;number.c: 162: TRISB0 = 0;
  5575  0359  1005               	bcf	5,0	;volatile
  5576                           
  5577                           ;number.c: 163: RB6 = 1;
  5578  035A  1706               	bsf	6,6	;volatile
  5579                           
  5580                           ;number.c: 164: RB0 = 0;
  5581  035B  1006               	bcf	6,0	;volatile
  5582  035C  0008               	return
  5583  035D                     __end_of_C6:	
  5584  035D                     __ptext33:	
  5585 ;; *************** function _C7 *****************
  5586 ;; Defined at:
  5587 ;;		line 167 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		None
  5596 ;; Tracked objects:
  5597 ;;		On entry : 300/0
  5598 ;;		On exit  : 300/100
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5601 ;;      Params:         0       0       0       0
  5602 ;;      Locals:         0       0       0       0
  5603 ;;      Temps:          0       0       0       0
  5604 ;;      Totals:         0       0       0       0
  5605 ;;Total ram usage:        0 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_refreshLed
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _C7
  5616  035D                     _C7:	
  5617                           
  5618                           ;number.c: 169: TRISB6 = 0;
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _C7: []
  5622  035D  1305               	bcf	5,6	;volatile
  5623                           
  5624                           ;number.c: 170: TRISA6 = 0;
  5625  035E  1683               	bsf	3,5	;RP0=1, select bank1
  5626  035F  1305               	bcf	5,6	;volatile
  5627                           
  5628                           ;number.c: 171: RB6 = 1;
  5629  0360  1283               	bcf	3,5	;RP0=0, select bank0
  5630  0361  1706               	bsf	6,6	;volatile
  5631                           
  5632                           ;number.c: 172: RA6 = 0;
  5633  0362  1683               	bsf	3,5	;RP0=1, select bank1
  5634  0363  1306               	bcf	6,6	;volatile
  5635  0364  0008               	return
  5636  0365                     __end_of_C7:	
  5637  0365                     __ptext32:	
  5638 ;; *************** function _D1 *****************
  5639 ;; Defined at:
  5640 ;;		line 175 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  1    wreg      void 
  5647 ;; Registers used:
  5648 ;;		None
  5649 ;; Tracked objects:
  5650 ;;		On entry : 300/0
  5651 ;;		On exit  : 300/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5654 ;;      Params:         0       0       0       0
  5655 ;;      Locals:         0       0       0       0
  5656 ;;      Temps:          0       0       0       0
  5657 ;;      Totals:         0       0       0       0
  5658 ;;Total ram usage:        0 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_refreshLed
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _D1
  5669  0365                     _D1:	
  5670                           
  5671                           ;number.c: 177: TRISB7 = 0;
  5672                           
  5673                           ;incstack = 0
  5674                           ; Regs used in _D1: []
  5675  0365  1385               	bcf	5,7	;volatile
  5676                           
  5677                           ;number.c: 178: TRISA6 = 0;
  5678  0366  1683               	bsf	3,5	;RP0=1, select bank1
  5679  0367  1305               	bcf	5,6	;volatile
  5680                           
  5681                           ;number.c: 179: RA6 = 1;
  5682  0368  1706               	bsf	6,6	;volatile
  5683                           
  5684                           ;number.c: 180: RB7 = 0;
  5685  0369  1283               	bcf	3,5	;RP0=0, select bank0
  5686  036A  1386               	bcf	6,7	;volatile
  5687  036B  0008               	return
  5688  036C                     __end_of_D1:	
  5689  036C                     __ptext31:	
  5690 ;; *************** function _D2 *****************
  5691 ;; Defined at:
  5692 ;;		line 183 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		None
  5701 ;; Tracked objects:
  5702 ;;		On entry : 300/0
  5703 ;;		On exit  : 300/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5706 ;;      Params:         0       0       0       0
  5707 ;;      Locals:         0       0       0       0
  5708 ;;      Temps:          0       0       0       0
  5709 ;;      Totals:         0       0       0       0
  5710 ;;Total ram usage:        0 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; This function calls:
  5713 ;;		Nothing
  5714 ;; This function is called by:
  5715 ;;		_refreshLed
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           
  5720                           ;psect for function _D2
  5721  036C                     _D2:	
  5722                           
  5723                           ;number.c: 185: TRISB7 = 0;
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _D2: []
  5727  036C  1385               	bcf	5,7	;volatile
  5728                           
  5729                           ;number.c: 186: TRISA5 = 0;
  5730  036D  1683               	bsf	3,5	;RP0=1, select bank1
  5731  036E  1285               	bcf	5,5	;volatile
  5732                           
  5733                           ;number.c: 187: RA5 = 1;
  5734  036F  1686               	bsf	6,5	;volatile
  5735                           
  5736                           ;number.c: 188: RB7 = 0;
  5737  0370  1283               	bcf	3,5	;RP0=0, select bank0
  5738  0371  1386               	bcf	6,7	;volatile
  5739  0372  0008               	return
  5740  0373                     __end_of_D2:	
  5741  0373                     __ptext30:	
  5742 ;; *************** function _D3 *****************
  5743 ;; Defined at:
  5744 ;;		line 191 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;		None
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		None
  5753 ;; Tracked objects:
  5754 ;;		On entry : 300/0
  5755 ;;		On exit  : 300/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5758 ;;      Params:         0       0       0       0
  5759 ;;      Locals:         0       0       0       0
  5760 ;;      Temps:          0       0       0       0
  5761 ;;      Totals:         0       0       0       0
  5762 ;;Total ram usage:        0 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_refreshLed
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _D3
  5773  0373                     _D3:	
  5774                           
  5775                           ;number.c: 193: TRISB7 = 0;
  5776                           
  5777                           ;incstack = 0
  5778                           ; Regs used in _D3: []
  5779  0373  1385               	bcf	5,7	;volatile
  5780                           
  5781                           ;number.c: 194: TRISB0 = 0;
  5782  0374  1005               	bcf	5,0	;volatile
  5783                           
  5784                           ;number.c: 195: RB7 = 1;
  5785  0375  1786               	bsf	6,7	;volatile
  5786                           
  5787                           ;number.c: 196: RB0 = 0;
  5788  0376  1006               	bcf	6,0	;volatile
  5789  0377  0008               	return
  5790  0378                     __end_of_D3:	
  5791  0378                     __ptext29:	
  5792 ;; *************** function _D4 *****************
  5793 ;; Defined at:
  5794 ;;		line 199 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		None
  5803 ;; Tracked objects:
  5804 ;;		On entry : 300/0
  5805 ;;		On exit  : 300/100
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5808 ;;      Params:         0       0       0       0
  5809 ;;      Locals:         0       0       0       0
  5810 ;;      Temps:          0       0       0       0
  5811 ;;      Totals:         0       0       0       0
  5812 ;;Total ram usage:        0 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_refreshLed
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function _D4
  5823  0378                     _D4:	
  5824                           
  5825                           ;number.c: 201: TRISB7 = 0;
  5826                           
  5827                           ;incstack = 0
  5828                           ; Regs used in _D4: []
  5829  0378  1385               	bcf	5,7	;volatile
  5830                           
  5831                           ;number.c: 202: TRISA6 = 0;
  5832  0379  1683               	bsf	3,5	;RP0=1, select bank1
  5833  037A  1305               	bcf	5,6	;volatile
  5834                           
  5835                           ;number.c: 203: RB7 = 1;
  5836  037B  1283               	bcf	3,5	;RP0=0, select bank0
  5837  037C  1786               	bsf	6,7	;volatile
  5838                           
  5839                           ;number.c: 204: RA6 = 0;
  5840  037D  1683               	bsf	3,5	;RP0=1, select bank1
  5841  037E  1306               	bcf	6,6	;volatile
  5842  037F  0008               	return
  5843  0380                     __end_of_D4:	
  5844  0380                     __ptext28:	
  5845 ;; *************** function _D5 *****************
  5846 ;; Defined at:
  5847 ;;		line 207 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;		None
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;		None
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		None
  5856 ;; Tracked objects:
  5857 ;;		On entry : 300/0
  5858 ;;		On exit  : 300/100
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5861 ;;      Params:         0       0       0       0
  5862 ;;      Locals:         0       0       0       0
  5863 ;;      Temps:          0       0       0       0
  5864 ;;      Totals:         0       0       0       0
  5865 ;;Total ram usage:        0 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; This function calls:
  5868 ;;		Nothing
  5869 ;; This function is called by:
  5870 ;;		_refreshLed
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function _D5
  5876  0380                     _D5:	
  5877                           
  5878                           ;number.c: 209: TRISB7 = 0;
  5879                           
  5880                           ;incstack = 0
  5881                           ; Regs used in _D5: []
  5882  0380  1385               	bcf	5,7	;volatile
  5883                           
  5884                           ;number.c: 210: TRISA5 = 0;
  5885  0381  1683               	bsf	3,5	;RP0=1, select bank1
  5886  0382  1285               	bcf	5,5	;volatile
  5887                           
  5888                           ;number.c: 211: RB7 = 1;
  5889  0383  1283               	bcf	3,5	;RP0=0, select bank0
  5890  0384  1786               	bsf	6,7	;volatile
  5891                           
  5892                           ;number.c: 212: RA5 = 0;
  5893  0385  1683               	bsf	3,5	;RP0=1, select bank1
  5894  0386  1286               	bcf	6,5	;volatile
  5895  0387  0008               	return
  5896  0388                     __end_of_D5:	
  5897  0388                     __ptext27:	
  5898 ;; *************** function _D6 *****************
  5899 ;; Defined at:
  5900 ;;		line 216 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		None
  5909 ;; Tracked objects:
  5910 ;;		On entry : 300/0
  5911 ;;		On exit  : 300/100
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5914 ;;      Params:         0       0       0       0
  5915 ;;      Locals:         0       0       0       0
  5916 ;;      Temps:          0       0       0       0
  5917 ;;      Totals:         0       0       0       0
  5918 ;;Total ram usage:        0 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_refreshLed
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function _D6
  5929  0388                     _D6:	
  5930                           
  5931                           ;number.c: 218: TRISB0 = 0;
  5932                           
  5933                           ;incstack = 0
  5934                           ; Regs used in _D6: []
  5935  0388  1005               	bcf	5,0	;volatile
  5936                           
  5937                           ;number.c: 219: TRISA6 = 0;
  5938  0389  1683               	bsf	3,5	;RP0=1, select bank1
  5939  038A  1305               	bcf	5,6	;volatile
  5940                           
  5941                           ;number.c: 220: RB0 = 1;
  5942  038B  1283               	bcf	3,5	;RP0=0, select bank0
  5943  038C  1406               	bsf	6,0	;volatile
  5944                           
  5945                           ;number.c: 221: RA6 = 0;
  5946  038D  1683               	bsf	3,5	;RP0=1, select bank1
  5947  038E  1306               	bcf	6,6	;volatile
  5948  038F  0008               	return
  5949  0390                     __end_of_D6:	
  5950  0390                     __ptext26:	
  5951 ;; *************** function _D7 *****************
  5952 ;; Defined at:
  5953 ;;		line 224 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		None
  5962 ;; Tracked objects:
  5963 ;;		On entry : 300/0
  5964 ;;		On exit  : 300/100
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5967 ;;      Params:         0       0       0       0
  5968 ;;      Locals:         0       0       0       0
  5969 ;;      Temps:          0       0       0       0
  5970 ;;      Totals:         0       0       0       0
  5971 ;;Total ram usage:        0 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; This function calls:
  5974 ;;		Nothing
  5975 ;; This function is called by:
  5976 ;;		_refreshLed
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _D7
  5982  0390                     _D7:	
  5983                           
  5984                           ;number.c: 226: TRISB0 = 0;
  5985                           
  5986                           ;incstack = 0
  5987                           ; Regs used in _D7: []
  5988  0390  1005               	bcf	5,0	;volatile
  5989                           
  5990                           ;number.c: 227: TRISA5 = 0;
  5991  0391  1683               	bsf	3,5	;RP0=1, select bank1
  5992  0392  1285               	bcf	5,5	;volatile
  5993                           
  5994                           ;number.c: 228: RB0 = 1;
  5995  0393  1283               	bcf	3,5	;RP0=0, select bank0
  5996  0394  1406               	bsf	6,0	;volatile
  5997                           
  5998                           ;number.c: 229: RA5 = 0;
  5999  0395  1683               	bsf	3,5	;RP0=1, select bank1
  6000  0396  1286               	bcf	6,5	;volatile
  6001  0397  0008               	return
  6002  0398                     __end_of_D7:	
  6003  0398                     __ptext25:	
  6004 ;; *************** function _led1 *****************
  6005 ;; Defined at:
  6006 ;;		line 232 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;		None
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  1    wreg      void 
  6013 ;; Registers used:
  6014 ;;		None
  6015 ;; Tracked objects:
  6016 ;;		On entry : 300/0
  6017 ;;		On exit  : 300/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6020 ;;      Params:         0       0       0       0
  6021 ;;      Locals:         0       0       0       0
  6022 ;;      Temps:          0       0       0       0
  6023 ;;      Totals:         0       0       0       0
  6024 ;;Total ram usage:        0 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_refreshLed
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           
  6034                           ;psect for function _led1
  6035  0398                     _led1:	
  6036                           
  6037                           ;number.c: 234: TRISB2 = 0;
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _led1: []
  6041  0398  1105               	bcf	5,2	;volatile
  6042                           
  6043                           ;number.c: 235: TRISB3 = 0;
  6044  0399  1185               	bcf	5,3	;volatile
  6045                           
  6046                           ;number.c: 236: RB3 = 1;
  6047  039A  1586               	bsf	6,3	;volatile
  6048                           
  6049                           ;number.c: 237: RB2 = 0;
  6050  039B  1106               	bcf	6,2	;volatile
  6051  039C  0008               	return
  6052  039D                     __end_of_led1:	
  6053  039D                     __ptext24:	
  6054 ;; *************** function _led2 *****************
  6055 ;; Defined at:
  6056 ;;		line 240 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		None
  6065 ;; Tracked objects:
  6066 ;;		On entry : 300/0
  6067 ;;		On exit  : 300/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6070 ;;      Params:         0       0       0       0
  6071 ;;      Locals:         0       0       0       0
  6072 ;;      Temps:          0       0       0       0
  6073 ;;      Totals:         0       0       0       0
  6074 ;;Total ram usage:        0 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_refreshLed
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _led2
  6085  039D                     _led2:	
  6086                           
  6087                           ;number.c: 242: TRISB4 = 0;
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _led2: []
  6091  039D  1205               	bcf	5,4	;volatile
  6092                           
  6093                           ;number.c: 243: TRISB3 = 0;
  6094  039E  1185               	bcf	5,3	;volatile
  6095                           
  6096                           ;number.c: 244: RB4 = 1;
  6097  039F  1606               	bsf	6,4	;volatile
  6098                           
  6099                           ;number.c: 245: RB3 = 0;
  6100  03A0  1186               	bcf	6,3	;volatile
  6101  03A1  0008               	return
  6102  03A2                     __end_of_led2:	
  6103  03A2                     __ptext23:	
  6104 ;; *************** function _led3 *****************
  6105 ;; Defined at:
  6106 ;;		line 248 in file "C:\mcuproject\scm\zdt\C103_8F083_tssop20_\C103_8F083_tssop20_\number.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  1    wreg      void 
  6113 ;; Registers used:
  6114 ;;		None
  6115 ;; Tracked objects:
  6116 ;;		On entry : 300/0
  6117 ;;		On exit  : 300/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6120 ;;      Params:         0       0       0       0
  6121 ;;      Locals:         0       0       0       0
  6122 ;;      Temps:          0       0       0       0
  6123 ;;      Totals:         0       0       0       0
  6124 ;;Total ram usage:        0 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; This function calls:
  6127 ;;		Nothing
  6128 ;; This function is called by:
  6129 ;;		_refreshLed
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           
  6134                           ;psect for function _led3
  6135  03A2                     _led3:	
  6136                           
  6137                           ;number.c: 250: TRISB5 = 0;
  6138                           
  6139                           ;incstack = 0
  6140                           ; Regs used in _led3: []
  6141  03A2  1285               	bcf	5,5	;volatile
  6142                           
  6143                           ;number.c: 251: TRISB3 = 0;
  6144  03A3  1185               	bcf	5,3	;volatile
  6145                           
  6146                           ;number.c: 252: RB5 = 1;
  6147  03A4  1686               	bsf	6,5	;volatile
  6148                           
  6149                           ;number.c: 253: RB3 = 0;
  6150  03A5  1186               	bcf	6,3	;volatile
  6151  03A6  0008               	return
  6152  03A7                     __end_of_led3:	
  6153  03A7                     PL4:	
  6154  03A7  30FF               	movlw	255
  6155  03A8  0085               	movwf	5	;volatile
  6156  03A9  3060               	movlw	96
  6157  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  6158  03AB  0485               	iorwf	5,f	;volatile
  6159  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  6160  03AD  0186               	clrf	6	;volatile
  6161  03AE  309F               	movlw	159
  6162  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  6163  03B0  0586               	andwf	6,f	;volatile
  6164  03B1  0008               	return
  6165  03B2                     __end_ofPL4:	
  6166                           
  6167                           	psect	intentry
  6168  0004                     __pintentry:	
  6169                           ;incstack = 0
  6170                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6171                           
  6172  0004                     interrupt_function:	
  6173  007E                     saved_w	set	btemp
  6174  0004  00FE               	movwf	btemp
  6175  0005  0E03               	swapf	3,w
  6176  0006  00F0               	movwf	??_Isr_Timer
  6177  0007  0804               	movf	4,w
  6178  0008  00F1               	movwf	??_Isr_Timer+1
  6179  0009  080A               	movf	10,w
  6180  000A  00F2               	movwf	??_Isr_Timer+2
  6181  000B  118A  2A0E         	ljmp	_Isr_Timer
  6182                           
  6183                           	psect	swtext2
  6184  06C3                     __pswtext2:	
  6185  06C3                     i1S4675:	
  6186  06C3  118A  2A40         	ljmp	i1l2117
  6187  06C5  118A  2A45         	ljmp	i1l2120
  6188  06C7  118A  2A4A         	ljmp	i1l2122
  6189  06C9  118A  2A4F         	ljmp	i1l2124
  6190  06CB  118A  2A54         	ljmp	i1l2126
  6191  06CD  118A  2A59         	ljmp	i1l2128
  6192  06CF  118A  2A5E         	ljmp	i1l2130
  6193  06D1  118A  2A63         	ljmp	i1l2132
  6194  06D3  118A  2A68         	ljmp	i1l2134
  6195  06D5  118A  2A6D         	ljmp	i1l2136
  6196  06D7  118A  2A72         	ljmp	i1l2138
  6197  06D9  118A  2A77         	ljmp	i1l2140
  6198  06DB  118A  2A7C         	ljmp	i1l2142
  6199  06DD  118A  2A81         	ljmp	i1l2144
  6200  06DF  118A  2A86         	ljmp	i1l2146
  6201  06E1  118A  2A8B         	ljmp	i1l2148
  6202  06E3  118A  2A90         	ljmp	i1l2150
  6203  06E5  118A  2A95         	ljmp	i1l2152
  6204  06E7  118A  2A9A         	ljmp	i1l2154
  6205  06E9  118A  2A9F         	ljmp	i1l2156
  6206  06EB  118A  2AA4         	ljmp	i1l2158
  6207  06ED  118A  2AA9         	ljmp	i1l2160
  6208  06EF  118A  2AAE         	ljmp	i1l2162
  6209  06F1  118A  2AB3         	ljmp	i1l2164
  6210  06F3  118A  2AB8         	ljmp	i1l2166
  6211  06F5  118A  2ABD         	ljmp	i1l2168
  6212  06F7  118A  2AC2         	ljmp	i1l2170
  6213  06F9  118A  2AC7         	ljmp	i1l2172


Data Sizes:
    Strings     0
    Constant    12
    Data        6
    BSS         48
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     13      66
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _workCtr->___lwmod
    _showCtr->___lbmod
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatValue->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _workCtr->___wmul
    _checkOutA->_ADC_Sample
    _checkBatValue->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Isr_Timer in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3079
                        _Init_System
                             _batCtr
                      _checkBatValue
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                            _showCtr
                         _taskSecond
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              2     2      0     531
                                              2 BANK0      2     2      0
                         _Sleep_Mode
                            ___lwmod
                             ___wmul
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     266
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                              3 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _Sleep_Mode                                           0     0      0       0
                        _Init_System
 ---------------------------------------------------------------------------------
 (3) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _taskSecond                                           2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _showCtr                                              0     0      0     533
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     265
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     268
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               3     3      0     244
                                              4 COMMON     3     3      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            0     0      0     635
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatValue                                        0     0      0    1136
                         _ADC_Sample
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     635
                                              3 COMMON     5     4      1
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _batCtr                                               2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                          _updateLed
 ---------------------------------------------------------------------------------
 (5) _updateLed                                            0     0      0       0
                         _refreshLed
 ---------------------------------------------------------------------------------
 (6) _refreshLed                                           0     0      0       0
                                 _A1
                                 _A2
                                 _A3
                                 _A4
                                 _A5
                                 _A6
                                 _A7
                                 _B1
                                 _B2
                                 _B3
                                 _B4
                                 _B5
                                 _B6
                                 _B7
                                 _C1
                                 _C2
                                 _C3
                                 _C4
                                 _C5
                                 _C6
                                 _C7
                                 _D1
                                 _D2
                                 _D3
                                 _D4
                                 _D5
                                 _D6
                                 _D7
                               _led1
                               _led2
                               _led3
 ---------------------------------------------------------------------------------
 (7) _led3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _led2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _led1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D7                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D6                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D5                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D4                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D2                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _D1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C7                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C6                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C5                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C4                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C2                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _C1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B7                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B6                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B5                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B4                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B2                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _B1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A7                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A6                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A5                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A4                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A3                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A2                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _A1                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_System
   _batCtr
   _checkBatValue
     _ADC_Sample
     ___lwdiv
   _checkOutA
     _ADC_Sample
   _chrgCtr
   _keyCtr
     _keyRead
   _showCtr
     ___lbdiv
     ___lbmod
   _taskSecond
   _workCtr
     _Sleep_Mode
       _Init_System
     ___lwmod
     ___wmul
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _updateLed
     _refreshLed
       _A1
       _A2
       _A3
       _A4
       _A5
       _A6
       _A7
       _B1
       _B2
       _B3
       _B4
       _B5
       _B6
       _B7
       _C1
       _C2
       _C3
       _C4
       _C5
       _C6
       _C7
       _D1
       _D2
       _D3
       _D4
       _D5
       _D6
       _D7
       _led1
       _led2
       _led3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
BITBANK1            50      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      42       4       82.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4D       9        0.0%
ABS                  0      0      4D       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jun 27 17:26:36 2025

                      pc 0002                       PL2 01EA                       PL4 03A7  
                     PL6 01F9                       PL8 0509                       _A1 02F1  
                     _A2 02F6                       _B1 0314                       _A3 02FB  
                     _B2 0319                       _A4 0300                       _C1 0337  
                     _B3 031E                       _A5 0305                       _C2 033C  
                     _B4 0323                       _A6 030A                       _D1 0365  
                     _C3 0341                       _B5 0328                       _A7 030F  
                     _D2 036C                       _C4 034A                       _B6 032D  
                     _D3 0373                       _C5 0353                       _B7 0332  
                     _D4 0378                       _C6 0358                       _D5 0380  
                     _C7 035D                       _D6 0388                       _D7 0390  
                     fsr 0004      ___wmul@multiplicand 0075                      ?_A1 0070  
                    ?_A2 0070                      ?_B1 0070                      ?_A3 0070  
                    ?_B2 0070                      ?_A4 0070                      ?_C1 0070  
                    ?_B3 0070                      ?_A5 0070                      ?_C2 0070  
                    ?_B4 0070                      ?_A6 0070                      ?_D1 0070  
                    ?_C3 0070                      ?_B5 0070                      ?_A7 0070  
                    ?_D2 0070                      ?_C4 0070                      ?_B6 0070  
                    ?_D3 0070                      ?_C5 0070                      ?_B7 0070  
                    ?_D4 0070                      ?_C6 0070                      ?_D5 0070  
                    ?_C7 0070                      ?_D6 0070                      ?_D7 0070  
                    PL10 0512                      PL20 0209                      PL12 0202  
                    PL14 0519                      PL16 0681                      PL18 0685  
                    l970 0123                      l980 01A5                      l976 015F  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _RA4 0434                      _RB2 0032                      _RA5 0435  
                    _RB3 0033                      _RA6 0436                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
                    _PR2 0011      __size_of_ADC_Sample 00D0                      fsr0 0004  
                    indf 0000                     ??_A1 0070                     ??_A2 0070  
                   ??_B1 0070                     ??_A3 0070                     ??_B2 0070  
                   ??_A4 0070                     ??_C1 0070                     ??_B3 0070  
                   ??_A5 0070                     ??_C2 0070                     ??_B4 0070  
                   ??_A6 0070                     ??_D1 0070                     ??_C3 0070  
                   ??_B5 0070                     ??_A7 0070                     ??_D2 0070  
                   ??_C4 0070                     ??_B6 0070                     ??_D3 0070  
                   ??_C5 0070                     ??_B7 0070                     ??_D4 0070  
                   ??_C6 0070                     ??_D5 0070                     ??_C7 0070  
                   ??_D6 0070                     ??_D7 0070                     S4673 075C  
                   l1028 0577                     l1153 0743                     l1090 060F  
                   l1092 0613                     l1093 0618                     l1094 061A  
                   l1095 061C                     l4021 0539                     l4031 054B  
                   l4025 0541                     l4203 06B5                     l4221 0602  
                   l4213 05E5                     l4207 06BC                     l4047 055F  
                   l4055 0568                     l4039 0550                     l4311 070C  
                   l4073 0587                     l4313 070D                     l4067 057C  
                   l2467 0656                     l4243 0622                     l4219 0600  
                   l4251 0636                     l4331 072F                     l4323 071B  
                   l4245 0624                     l4237 061E                     l3517 04F1  
                   l4501 03CE                     l4351 005B                     l4343 003D  
                   l4191 0695                     l4239 0620                     l4353 005D  
                   l3705 01A9                     l4249 0629                     l3609 04CC  
                   l4521 03EF                     l4339 0032                     l4603 00BA  
                   l4267 007F                     l4443 04BD                     l4531 03FC  
                   l3741 0598                     l3671 010D                     l3655 0101  
                   l4463 01CE                     l4439 04B5                     l3727 047C  
                   l4551 0440                     l4631 0758                     l3681 012D  
                   l3665 010C                     l3657 0103                     l4609 00D6  
                   l3745 059D                     l4475 01E5                     l3755 05AA  
                   l3915 0650                     l4563 0455                     l4547 043C  
                   l4539 040D                     l4555 0444                     l4619 0737  
                   l3693 0153                     l3749 05A3                     l4581 047A  
                   l4573 0470                     l4493 03C8                     l3695 015B  
                   l3791 05D3                     l3689 0148                     l3769 05BB  
                   l3929 0663                     l3945 067D                     l3937 0669  
                   l4569 0468                     l3779 05C7                     l4597 00A1  
                   l3799 05DA                     l3985 049B                     l3993 04AE  
                   _ADON 04A8                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3125 004A                     u3135 0055  
                   u1705 0159                     u3075 0724                     u3405 0436  
                   u3255 01D7                     u2375 04A1                     _PIE1 000E  
                   u1745 019A                     u1765 01B2                     u1695 014E  
                   u3295 03C6                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u2845 06A2                     u3567 00FD  
                   _PIR1 000D                     _WPUA 0088                     _WPUB 0008  
                   _led1 0398                     _led2 039D                     _led3 03A2  
                   _main 0731                     btemp 007E                     start 000D  
          ??_Init_System 0073                    ?_led1 0070                    ?_led2 0070  
                  ?_led3 0070                    ?_main 0070          __end_of___lbdiv 0665  
        __end_of___lbmod 0681                    _T2CON 0013          __end_of___lwdiv 01EA  
        __end_of___lwmod 04B3                    i1l958 022E                    _PORTA 0086  
                  _PORTB 0006                    _PORTC 0106                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _TRISC 0105  
                  _PWMTL 0017          __end_of_chrgCtr 06C3          __end_of_keyRead 05DE  
         __pbitbssCOMMON 03C0                    pclath 000A          __end_of_showCtr 064A  
        __end_of_pwmInit 048F          __end_of_pwmStop 0481                    status 0003  
                  wtemp0 007E          __end_of_workCtr 047C          ___lbdiv@divisor 0073  
        ___lbdiv@counter 0075          __initialization 000F             __end_of_led1 039D  
           __end_of_led2 03A2             __end_of_led3 03A7             __end_of_main 075C  
                 ??_led1 0070                   ??_led2 0070                   ??_led3 0070  
                 ??_main 0078      __end_of_Init_System 0509                   _ADCON0 0095  
                 _ADCON1 0096                   i1S4675 06C3                   _ADRESH 0099  
                 _ADRESL 0098                   _GODONE 04A9                   i1l2120 0245  
                 i1l2130 025E                   i1l2122 024A                   i1l2140 0277  
                 i1l2132 0263                   i1l2124 024F                   i1l2117 0240  
                 i1l2150 0290                   i1l2142 027C                   i1l2134 0268  
                 i1l2126 0254                   i1l2160 02A9                   i1l2152 0295  
                 i1l2144 0281                   i1l2136 026D                   i1l2128 0259  
                 i1l4001 023B                   i1l2170 02C2                   i1l2162 02AE  
                 i1l2154 029A                   i1l2146 0286                   i1l2138 0272  
                 i1l2172 02C7                   i1l2164 02B3                   i1l2156 029F  
                 i1l2148 028B                   i1l2166 02B8                   i1l2158 02A4  
                 i1l2168 02BD                   i1l3805 023D                   i1l4377 022D  
                 i1l3873 02D0                   i1l3883 02DD                   i1l3877 02D6  
                 i1l3869 02CC                   i1l3885 02EA                   _LDO_EN 04B2  
                 _INTCON 000B                   _OSCCON 0014                   _TMR2IF 0069  
                 _PWMD1L 001A             ??_ADC_Sample 0074                   _TRISB0 0028  
                 _TRISB1 0029                   _TRISB2 002A                   _TRISA5 042D  
                 _TRISB3 002B                   _TRISA6 042E                   _TRISB4 002C  
                 _TRISB5 002D                   _TRISB6 002E                   _TRISB7 002F  
     __size_of_Isr_Timer 0029               _Sleep_Mode 04CC                   _batCtr 0024  
                 ___wmul 04B3                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004D                ??___lwdiv 0077                ??___lwmod 0077  
                 _keyCtr 0520                   _keyNum 0048                ??_chrgCtr 0073  
                 _result 0022         __end_of_numArray 0782                ??_keyRead 0073  
     __end_of_ADC_Sample 01C0                   saved_w 007E                ??_showCtr 0078  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0050  
       ___lbdiv@dividend 0074          ___lbmod@divisor 0073  __end_of__initialization 0021  
        ___lbmod@counter 0076           __pcstackCOMMON 0070             __pidataBANK0 0000  
     __size_of_checkOutA 001F              _Init_System 04F1               __end_ofPL2 01F9  
             __end_ofPL4 03B2               __end_ofPL6 0202               __end_ofPL8 0512  
             __end_of_A1 02F6               __end_of_A2 02FB               __end_of_A3 0300  
             __end_of_B1 0319               __end_of_A4 0305               __end_of_B2 031E  
             __end_of_A5 030A               __end_of_B3 0323               __end_of_C1 033C  
             __end_of_A6 030F               __end_of_B4 0328               __end_of_C2 0341  
             __end_of_A7 0314               __end_of_B5 032D               __end_of_C3 034A  
             __end_of_D1 036C               __end_of_B6 0332               __end_of_C4 0353  
             __end_of_D2 0373               __end_of_B7 0337               __end_of_C5 0358  
             __end_of_D3 0378               __end_of_C6 035D               __end_of_D4 0380  
             __end_of_C7 0365               __end_of_D5 0388               __end_of_D6 0390  
             __end_of_D7 0398         ___lbdiv@quotient 0076        __end_of_Isr_Timer 0237  
             __pbssBANK0 0020              ?_Sleep_Mode 0070               __pmaintext 0731  
                ?_batCtr 0070                  ?___wmul 0073               __pintentry 0004  
          _batSubMaxTime 005B   __size_of_checkBatValue 006F                  ?_keyCtr 0070  
     __size_of_updateLed 0006                  _B_OnOff 03C0                  _PWMD01H 001E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 0081               __stringtab 0770          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0057          ADC_Sample@admin 0055          ADC_Sample@adsum 0051  
                ___lbdiv 064A                  ___lbmod 0665          __size_of_batCtr 003E  
        __size_of___wmul 0019                  ___lwdiv 01C0                  ___lwmod 048F  
        __size_of_keyCtr 006C                  _chrgCtr 0689               _lowBatFlag 003F  
                __ptext1 03B2                  __ptext2 047C                  __ptext3 0481  
                __ptext4 04B3                  __ptext5 048F                  __ptext6 04CC  
                __ptext7 04F1                  __ptext8 06FB                  __ptext9 05DE  
             _lowBatTime 003B                  _count1s 0038                  _count2s 0042  
                _keyRead 058C                  _keyTime 0043                  _wait30s 0036  
    __size_of_Sleep_Mode 0025                  _showCtr 05DE                  _pwmInit 0481  
                _pwmDuty 0046                  _pwmStop 047C                  clrloop0 0783  
                _workCtr 03B2            _checkBatValue 0081     end_of_initialization 0021  
             _refreshLed 023D               _taskSecond 06FB        __end_of_updateLed 023D  
          _longPressFlag 004A               _showNumAge 005F               _showNumBge 005D  
       ___lbmod@dividend 0075           ?_checkBatValue 0070              ___lbmod@rem 0077  
        keyCtr@keyStatus 0075             ?_Init_System 0070           __end_of_batCtr 0062  
         __end_of___wmul 04CC           __end_of_keyCtr 058C              __end_ofPL10 0519  
            __end_ofPL20 020E              __end_ofPL12 0209              __end_ofPL14 0520  
            __end_ofPL16 0685              __end_ofPL18 0689      start_initialization 000F  
              _Isr_Timer 020E              ?_refreshLed 0070              _batSubCount 002A  
            ?_taskSecond 0070             ??_Sleep_Mode 0073                 ??_batCtr 0073  
               ??___wmul 0077        ADC_Sample@ad_temp 0059              __pdataBANK0 005B  
               ??_keyCtr 0074              __pbssCOMMON 0079                ___latbits 0001  
          __pcstackBANK0 004E          ??_checkBatValue 0078       __end_of_Sleep_Mode 04F1  
             ?_Isr_Timer 0070                _checkOutA 0062                __pnvBANK0 0061  
            _chrgMaxData 0026         ___lwdiv@dividend 0075                 ?___lbdiv 0073  
               ?___lbmod 0073                 ?___lwdiv 0073                 ?___lwmod 0073  
               ?_chrgCtr 0070      __size_of_refreshLed 00B4                __pstrings 0770  
              __pswtext1 075C                __pswtext2 06C3                _count900s 0040  
               ?_keyRead 0070      __size_of_taskSecond 0036                _firstTime 0061  
         ADC_Sample@adch 004F                 ?_showCtr 0070                 ?_pwmInit 0070  
               ?_pwmStop 0070         ___lwdiv@quotient 004F                 ?_workCtr 0070  
            __size_of_A1 0005              __size_of_A2 0005              __size_of_A3 0005  
            __size_of_B1 0005              __size_of_A4 0005              __size_of_B2 0005  
            __size_of_A5 0005              __size_of_B3 0005              __size_of_C1 0005  
            __size_of_A6 0005              __size_of_B4 0005              __size_of_C2 0005  
            __size_of_A7 0005              __size_of_B5 0005              __size_of_C3 0009  
            __size_of_D1 0007              __size_of_B6 0005              __size_of_C4 0009  
            __size_of_D2 0007              __size_of_B7 0005              __size_of_C5 0005  
            __size_of_D3 0005              __size_of_C6 0005              __size_of_D4 0008  
            __size_of_C7 0008              __size_of_D5 0008              __size_of_D6 0008  
            __size_of_D7 0008              ADC_Sample@i 0050              ADC_Sample@j 004E  
      interrupt_function 0004           ___wmul@product 004E                _preKeyNum 0047  
             ?_checkOutA 0070                clear_ram0 0782                _sleepTime 002E  
              _updateLed 0237              __stringbase 0775        ___wmul@multiplier 0073  
   __size_of_Init_System 0018         keyRead@keyStatus 0073           keyCtr@keyClick 0076  
            ??_Isr_Timer 0070                 _MainTime 004C               _ADC_Sample 00F0  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lwdiv 002A  
       __size_of___lwmod 0024               ?_updateLed 0070       __end_of__stringtab 0776  
       __size_of_chrgCtr 003A                 _batValue 0034         __size_of_keyRead 0052  
               _adresult 0024                 _chrgFlag 0049          ___lwdiv@divisor 0073  
               _chrgTime 003C                 _chrgStep 0041          ___lwdiv@counter 004E  
               __ptext10 0665                 __ptext11 064A                 __ptext20 020E  
               __ptext12 0520                 __ptext21 0237                 __ptext13 058C  
               __ptext30 0373                 __ptext22 023D                 __ptext14 0689  
               __ptext31 036C                 __ptext23 03A2                 __ptext15 0062  
               __ptext40 0332                 __ptext32 0365                 __ptext24 039D  
               __ptext16 0081                 __ptext41 032D                 __ptext33 035D  
               __ptext25 0398                 __ptext17 01C0                 __ptext50 0300  
               __ptext42 0328                 __ptext34 0358                 __ptext26 0390  
               __ptext18 00F0                 __ptext51 02FB                 __ptext43 0323  
               __ptext35 0353                 __ptext27 0388                 __ptext19 0024  
               __ptext52 02F6                 __ptext44 031E                 __ptext36 034A  
               __ptext28 0380                 __ptext53 02F1                 __ptext45 0319  
               __ptext37 0341                 __ptext29 0378                 __ptext46 0314  
               __ptext38 033C                 __ptext47 030F                 __ptext39 0337  
               __ptext48 030A                 __ptext49 0305         __size_of_showCtr 006C  
       __size_of_pwmInit 000E         __size_of_pwmStop 0005                 _count10s 002C  
               _count30s 0028             ??_refreshLed 0070         __size_of_workCtr 00CA  
               _keyCount 004B            __size_of_led1 0005            __size_of_led2 0005  
          __size_of_led3 0005            __size_of_main 002B             ??_taskSecond 0073  
            ??_checkOutA 0078                 _modeStep 007A                 _numArray 0776  
               _showFlag 0044                 _overTime 003E                 _test_adc 003A  
               _power_ad 0020             _showBatValue 0045                 _workStep 0079  
     __end_of_refreshLed 02F1       __end_of_taskSecond 0731                 intlevel1 0000  
       ___lwmod@dividend 0075              ?_ADC_Sample 0073                stringcode 0770  
             _B_MainLoop 03C1              ??_updateLed 0070               _OPTION_REG 0001  
            _showNumAShi 0060              _showNumBShi 005E          ___lwmod@divisor 0073  
        ___lwmod@counter 0077                 stringdir 0770                 stringtab 0770  
  __end_of_checkBatValue 00F0      _showBatValueAddTime 003D              _R_AIN2_DATA 0032  
            _R_AIN6_DATA 0030  
