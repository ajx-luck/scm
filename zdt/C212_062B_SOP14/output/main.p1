Version 3.2 HI-TECH Software Intermediate Code
"81 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[v _ledShow `(v ~T0 @X0 0 ef ]
[p mainexit ]
"71
[v _Init_System `(v ~T0 @X0 0 ef ]
"72
[v _AD_Init `(v ~T0 @X0 0 ef ]
"79
[v _checkOutA `(v ~T0 @X0 0 ef ]
"78
[v _chrgCtr `(v ~T0 @X0 0 ef ]
"80
[v _checkBatAD `(v ~T0 @X0 0 ef ]
"82
[v _keyCtr `(v ~T0 @X0 0 ef ]
"83
[v _workCtr `(v ~T0 @X0 0 ef ]
"84
[v _ledCtr `(v ~T0 @X0 0 ef ]
"73
[v _Sleep_Mode `(v ~T0 @X0 0 ef ]
"77
[v _chrgPwmStop `(v ~T0 @X0 0 ef ]
"76
[v _chrgPwmInit `(v ~T0 @X0 0 ef ]
"74
[v _pwmInit `(v ~T0 @X0 0 ef ]
"75
[v _pwmStop `(v ~T0 @X0 0 ef ]
"68
[v _ADC_Sample `(uc ~T0 @X0 0 ef2`uc`uc ]
[v F479 `(v ~T0 @X0 1 tf1`ul ]
"150 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h
[v __delay `JF479 ~T0 @X0 0 e ]
[p i __delay ]
"4 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[p n 752 ]
"5
[p n 373 ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
"5 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\SC8P062BD.h
[v _INDF `Vuc ~T0 @X0 1 e@0 ]
[; ;SC8P062BD.h: 5: volatile unsigned char INDF @ 0x00;
"6
[v _OPTION_REG `Vuc ~T0 @X0 1 e@1 ]
[; ;SC8P062BD.h: 6: volatile unsigned char OPTION_REG @ 0x01;
"7
[v _PCL `Vuc ~T0 @X0 1 e@2 ]
[; ;SC8P062BD.h: 7: volatile unsigned char PCL @ 0x02;
"8
[v _STATUS `Vuc ~T0 @X0 1 e@3 ]
[; ;SC8P062BD.h: 8: volatile unsigned char STATUS @ 0x03;
"9
[v _FSR `Vuc ~T0 @X0 1 e@4 ]
[; ;SC8P062BD.h: 9: volatile unsigned char FSR @ 0x04;
"10
[v _TRISB `Vuc ~T0 @X0 1 e@5 ]
[; ;SC8P062BD.h: 10: volatile unsigned char TRISB @ 0x05;
"11
[v _PORTB `Vuc ~T0 @X0 1 e@6 ]
[; ;SC8P062BD.h: 11: volatile unsigned char PORTB @ 0x06;
"12
[v _WPDB `Vuc ~T0 @X0 1 e@7 ]
[; ;SC8P062BD.h: 12: volatile unsigned char WPDB @ 0x07;
"13
[v _WPUB `Vuc ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 13: volatile unsigned char WPUB @ 0x08;
"14
[v _IOCB `Vuc ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 14: volatile unsigned char IOCB @ 0x09;
"15
[v _PCLATH `Vuc ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 15: volatile unsigned char PCLATH @ 0x0A;
"16
[v _INTCON `Vuc ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 16: volatile unsigned char INTCON @ 0x0B;
"17
[v _ODCONB `Vuc ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 17: volatile unsigned char ODCONB @ 0x0C;
"18
[v _PIR1 `Vuc ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 18: volatile unsigned char PIR1 @ 0x0D;
"19
[v _PIE1 `Vuc ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 19: volatile unsigned char PIE1 @ 0x0E;
"20
[v _CMPCON0 `Vuc ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 20: volatile unsigned char CMPCON0 @ 0x0F;
"21
[v _CMPCON1 `Vuc ~T0 @X0 1 e@16 ]
[; ;SC8P062BD.h: 21: volatile unsigned char CMPCON1 @ 0x10;
"22
[v _PR2 `Vuc ~T0 @X0 1 e@17 ]
[; ;SC8P062BD.h: 22: volatile unsigned char PR2 @ 0x11;
"23
[v _TMR2 `Vuc ~T0 @X0 1 e@18 ]
[; ;SC8P062BD.h: 23: volatile unsigned char TMR2 @ 0x12;
"24
[v _T2CON `Vuc ~T0 @X0 1 e@19 ]
[; ;SC8P062BD.h: 24: volatile unsigned char T2CON @ 0x13;
"25
[v _OSCCON `Vuc ~T0 @X0 1 e@20 ]
[; ;SC8P062BD.h: 25: volatile unsigned char OSCCON @ 0x14;
"26
[v _PWMCON0 `Vuc ~T0 @X0 1 e@21 ]
[; ;SC8P062BD.h: 26: volatile unsigned char PWMCON0 @ 0x15;
"27
[v _PWMCON1 `Vuc ~T0 @X0 1 e@22 ]
[; ;SC8P062BD.h: 27: volatile unsigned char PWMCON1 @ 0x16;
"28
[v _PWMTL `Vuc ~T0 @X0 1 e@23 ]
[; ;SC8P062BD.h: 28: volatile unsigned char PWMTL @ 0x17;
"29
[v _PWMTH `Vuc ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 29: volatile unsigned char PWMTH @ 0x18;
"30
[v _PWMD0L `Vuc ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 30: volatile unsigned char PWMD0L @ 0x19;
"31
[v _PWMD1L `Vuc ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 31: volatile unsigned char PWMD1L @ 0x1A;
"32
[v _PWMD4L `Vuc ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 32: volatile unsigned char PWMD4L @ 0x1B;
"33
[v _PWMT4L `Vuc ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 33: volatile unsigned char PWMT4L @ 0x1C;
"34
[v _PWMCON2 `Vuc ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 34: volatile unsigned char PWMCON2 @ 0x1D;
"35
[v _PWMD01H `Vuc ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 35: volatile unsigned char PWMD01H @ 0x1E;
"36
[v _PWM01DT `Vuc ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 36: volatile unsigned char PWM01DT @ 0x1F;
"37
[v _TMR0 `Vuc ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 37: volatile unsigned char TMR0 @ 0x81;
"38
[v _TRISA `Vuc ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 38: volatile unsigned char TRISA @ 0x85;
"39
[v _PORTA `Vuc ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 39: volatile unsigned char PORTA @ 0x86;
"40
[v _WPDA `Vuc ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 40: volatile unsigned char WPDA @ 0x87;
"41
[v _WPUA `Vuc ~T0 @X0 1 e@136 ]
[; ;SC8P062BD.h: 41: volatile unsigned char WPUA @ 0x88;
"42
[v _IOCA `Vuc ~T0 @X0 1 e@137 ]
[; ;SC8P062BD.h: 42: volatile unsigned char IOCA @ 0x89;
"43
[v _ODCONA `Vuc ~T0 @X0 1 e@140 ]
[; ;SC8P062BD.h: 43: volatile unsigned char ODCONA @ 0x8C;
"44
[v _ANSEL0 `Vuc ~T0 @X0 1 e@147 ]
[; ;SC8P062BD.h: 44: volatile unsigned char ANSEL0 @ 0x93;
"45
[v _ANSEL1 `Vuc ~T0 @X0 1 e@148 ]
[; ;SC8P062BD.h: 45: volatile unsigned char ANSEL1 @ 0x94;
"46
[v _ADCON0 `Vuc ~T0 @X0 1 e@149 ]
[; ;SC8P062BD.h: 46: volatile unsigned char ADCON0 @ 0x95;
"47
[v _ADCON1 `Vuc ~T0 @X0 1 e@150 ]
[; ;SC8P062BD.h: 47: volatile unsigned char ADCON1 @ 0x96;
"48
[v _ADRESL `Vuc ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 48: volatile unsigned char ADRESL @ 0x98;
"49
[v _ADRESH `Vuc ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 49: volatile unsigned char ADRESH @ 0x99;
"50
[v _PWMD2L `Vuc ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 50: volatile unsigned char PWMD2L @ 0x9B;
"51
[v _PWMD3L `Vuc ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 51: volatile unsigned char PWMD3L @ 0x9C;
"52
[v _PWM23DT `Vuc ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 52: volatile unsigned char PWM23DT @ 0x9D;
"53
[v _PWMD23H `Vuc ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 53: volatile unsigned char PWMD23H @ 0x9E;
"55
[v _T0LSE_EN `Vb ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 55: volatile bit T0LSE_EN @ ((unsigned)&OPTION_REG*8)+7;
"56
[v _INTEDG `Vb ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 56: volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
"57
[v _T0CS `Vb ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 57: volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
"58
[v _T0SE `Vb ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 58: volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
"59
[v _PSA `Vb ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 59: volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
"60
[v _PS2 `Vb ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 60: volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
"61
[v _PS1 `Vb ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 61: volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
"62
[v _PS0 `Vb ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 62: volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
"65
[v _IRP `Vb ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 65: volatile bit IRP @ ((unsigned)&STATUS*8)+7;
"66
[v _RP1 `Vb ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 66: volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
"67
[v _RP0 `Vb ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 67: volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
"68
[v _TO `Vb ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 68: volatile bit TO @ ((unsigned)&STATUS*8)+4;
"69
[v _PD `Vb ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 69: volatile bit PD @ ((unsigned)&STATUS*8)+3;
"70
[v _Z `Vb ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 70: volatile bit Z @ ((unsigned)&STATUS*8)+2;
"71
[v _DC `Vb ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 71: volatile bit DC @ ((unsigned)&STATUS*8)+1;
"72
[v _C `Vb ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 72: volatile bit C @ ((unsigned)&STATUS*8)+0;
"75
[v _TRISB7 `Vb ~T0 @X0 1 e@47 ]
[; ;SC8P062BD.h: 75: volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
"76
[v _TRISB6 `Vb ~T0 @X0 1 e@46 ]
[; ;SC8P062BD.h: 76: volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
"77
[v _TRISB5 `Vb ~T0 @X0 1 e@45 ]
[; ;SC8P062BD.h: 77: volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
"78
[v _TRISB4 `Vb ~T0 @X0 1 e@44 ]
[; ;SC8P062BD.h: 78: volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
"79
[v _TRISB3 `Vb ~T0 @X0 1 e@43 ]
[; ;SC8P062BD.h: 79: volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
"80
[v _TRISB2 `Vb ~T0 @X0 1 e@42 ]
[; ;SC8P062BD.h: 80: volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
"81
[v _TRISB1 `Vb ~T0 @X0 1 e@41 ]
[; ;SC8P062BD.h: 81: volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
"82
[v _TRISB0 `Vb ~T0 @X0 1 e@40 ]
[; ;SC8P062BD.h: 82: volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
"85
[v _RB7 `Vb ~T0 @X0 1 e@55 ]
[; ;SC8P062BD.h: 85: volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
"86
[v _RB6 `Vb ~T0 @X0 1 e@54 ]
[; ;SC8P062BD.h: 86: volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
"87
[v _RB5 `Vb ~T0 @X0 1 e@53 ]
[; ;SC8P062BD.h: 87: volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
"88
[v _RB4 `Vb ~T0 @X0 1 e@52 ]
[; ;SC8P062BD.h: 88: volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
"89
[v _RB3 `Vb ~T0 @X0 1 e@51 ]
[; ;SC8P062BD.h: 89: volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
"90
[v _RB2 `Vb ~T0 @X0 1 e@50 ]
[; ;SC8P062BD.h: 90: volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
"91
[v _RB1 `Vb ~T0 @X0 1 e@49 ]
[; ;SC8P062BD.h: 91: volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
"92
[v _RB0 `Vb ~T0 @X0 1 e@48 ]
[; ;SC8P062BD.h: 92: volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
"95
[v _WPDB7 `Vb ~T0 @X0 1 e@63 ]
[; ;SC8P062BD.h: 95: volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
"96
[v _WPDB6 `Vb ~T0 @X0 1 e@62 ]
[; ;SC8P062BD.h: 96: volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
"97
[v _WPDB5 `Vb ~T0 @X0 1 e@61 ]
[; ;SC8P062BD.h: 97: volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
"98
[v _WPDB4 `Vb ~T0 @X0 1 e@60 ]
[; ;SC8P062BD.h: 98: volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
"99
[v _WPDB3 `Vb ~T0 @X0 1 e@59 ]
[; ;SC8P062BD.h: 99: volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
"100
[v _WPDB1 `Vb ~T0 @X0 1 e@57 ]
[; ;SC8P062BD.h: 100: volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
"101
[v _WPDB0 `Vb ~T0 @X0 1 e@56 ]
[; ;SC8P062BD.h: 101: volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;
"104
[v _WPUB7 `Vb ~T0 @X0 1 e@71 ]
[; ;SC8P062BD.h: 104: volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
"105
[v _WPUB6 `Vb ~T0 @X0 1 e@70 ]
[; ;SC8P062BD.h: 105: volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
"106
[v _WPUB5 `Vb ~T0 @X0 1 e@69 ]
[; ;SC8P062BD.h: 106: volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
"107
[v _WPUB4 `Vb ~T0 @X0 1 e@68 ]
[; ;SC8P062BD.h: 107: volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
"108
[v _WPUB3 `Vb ~T0 @X0 1 e@67 ]
[; ;SC8P062BD.h: 108: volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
"109
[v _WPUB2 `Vb ~T0 @X0 1 e@66 ]
[; ;SC8P062BD.h: 109: volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
"110
[v _WPUB1 `Vb ~T0 @X0 1 e@65 ]
[; ;SC8P062BD.h: 110: volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
"111
[v _WPUB0 `Vb ~T0 @X0 1 e@64 ]
[; ;SC8P062BD.h: 111: volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
"114
[v _IOCB7 `Vb ~T0 @X0 1 e@79 ]
[; ;SC8P062BD.h: 114: volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
"115
[v _IOCB6 `Vb ~T0 @X0 1 e@78 ]
[; ;SC8P062BD.h: 115: volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
"116
[v _IOCB5 `Vb ~T0 @X0 1 e@77 ]
[; ;SC8P062BD.h: 116: volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
"117
[v _IOCB4 `Vb ~T0 @X0 1 e@76 ]
[; ;SC8P062BD.h: 117: volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
"118
[v _IOCB3 `Vb ~T0 @X0 1 e@75 ]
[; ;SC8P062BD.h: 118: volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
"119
[v _IOCB2 `Vb ~T0 @X0 1 e@74 ]
[; ;SC8P062BD.h: 119: volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
"120
[v _IOCB1 `Vb ~T0 @X0 1 e@73 ]
[; ;SC8P062BD.h: 120: volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
"121
[v _IOCB0 `Vb ~T0 @X0 1 e@72 ]
[; ;SC8P062BD.h: 121: volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
"124
[v _GIE `Vb ~T0 @X0 1 e@95 ]
[; ;SC8P062BD.h: 124: volatile bit GIE @ ((unsigned)&INTCON*8)+7;
"125
[v _PEIE `Vb ~T0 @X0 1 e@94 ]
[; ;SC8P062BD.h: 125: volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
"126
[v _T0IE `Vb ~T0 @X0 1 e@93 ]
[; ;SC8P062BD.h: 126: volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
"127
[v _INTE `Vb ~T0 @X0 1 e@92 ]
[; ;SC8P062BD.h: 127: volatile bit INTE @ ((unsigned)&INTCON*8)+4;
"128
[v _RBIE `Vb ~T0 @X0 1 e@91 ]
[; ;SC8P062BD.h: 128: volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
"129
[v _T0IF `Vb ~T0 @X0 1 e@90 ]
[; ;SC8P062BD.h: 129: volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
"130
[v _INTF `Vb ~T0 @X0 1 e@89 ]
[; ;SC8P062BD.h: 130: volatile bit INTF @ ((unsigned)&INTCON*8)+1;
"131
[v _RBIF `Vb ~T0 @X0 1 e@88 ]
[; ;SC8P062BD.h: 131: volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
"134
[v _ODCONB7 `Vb ~T0 @X0 1 e@103 ]
[; ;SC8P062BD.h: 134: volatile bit ODCONB7 @ ((unsigned)&ODCONB*8)+7;
"135
[v _ODCONB6 `Vb ~T0 @X0 1 e@102 ]
[; ;SC8P062BD.h: 135: volatile bit ODCONB6 @ ((unsigned)&ODCONB*8)+6;
"136
[v _ODCONB5 `Vb ~T0 @X0 1 e@101 ]
[; ;SC8P062BD.h: 136: volatile bit ODCONB5 @ ((unsigned)&ODCONB*8)+5;
"137
[v _ODCONB4 `Vb ~T0 @X0 1 e@100 ]
[; ;SC8P062BD.h: 137: volatile bit ODCONB4 @ ((unsigned)&ODCONB*8)+4;
"138
[v _ODCONB3 `Vb ~T0 @X0 1 e@99 ]
[; ;SC8P062BD.h: 138: volatile bit ODCONB3 @ ((unsigned)&ODCONB*8)+3;
"139
[v _ODCONB1 `Vb ~T0 @X0 1 e@97 ]
[; ;SC8P062BD.h: 139: volatile bit ODCONB1 @ ((unsigned)&ODCONB*8)+1;
"140
[v _ODCONB0 `Vb ~T0 @X0 1 e@96 ]
[; ;SC8P062BD.h: 140: volatile bit ODCONB0 @ ((unsigned)&ODCONB*8)+0;
"143
[v _CMPIF `Vb ~T0 @X0 1 e@109 ]
[; ;SC8P062BD.h: 143: volatile bit CMPIF @ ((unsigned)&PIR1*8)+5;
"144
[v _PWMIF `Vb ~T0 @X0 1 e@108 ]
[; ;SC8P062BD.h: 144: volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
"145
[v _RAIF `Vb ~T0 @X0 1 e@107 ]
[; ;SC8P062BD.h: 145: volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
"146
[v _TMR2IF `Vb ~T0 @X0 1 e@105 ]
[; ;SC8P062BD.h: 146: volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
"147
[v _ADIF `Vb ~T0 @X0 1 e@104 ]
[; ;SC8P062BD.h: 147: volatile bit ADIF @ ((unsigned)&PIR1*8)+0;
"150
[v _CMPIE `Vb ~T0 @X0 1 e@117 ]
[; ;SC8P062BD.h: 150: volatile bit CMPIE @ ((unsigned)&PIE1*8)+5;
"151
[v _PWMIE `Vb ~T0 @X0 1 e@116 ]
[; ;SC8P062BD.h: 151: volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
"152
[v _RAIE `Vb ~T0 @X0 1 e@115 ]
[; ;SC8P062BD.h: 152: volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
"153
[v _TMR2IE `Vb ~T0 @X0 1 e@113 ]
[; ;SC8P062BD.h: 153: volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
"154
[v _ADIE `Vb ~T0 @X0 1 e@112 ]
[; ;SC8P062BD.h: 154: volatile bit ADIE @ ((unsigned)&PIE1*8)+0;
"157
[v _CMPEN `Vb ~T0 @X0 1 e@127 ]
[; ;SC8P062BD.h: 157: volatile bit CMPEN @ ((unsigned)&CMPCON0*8)+7;
"158
[v _CMPPS `Vb ~T0 @X0 1 e@126 ]
[; ;SC8P062BD.h: 158: volatile bit CMPPS @ ((unsigned)&CMPCON0*8)+6;
"159
[v _CMPNS2 `Vb ~T0 @X0 1 e@125 ]
[; ;SC8P062BD.h: 159: volatile bit CMPNS2 @ ((unsigned)&CMPCON0*8)+5;
"160
[v _CMPNS1 `Vb ~T0 @X0 1 e@124 ]
[; ;SC8P062BD.h: 160: volatile bit CMPNS1 @ ((unsigned)&CMPCON0*8)+4;
"161
[v _CMPNS0 `Vb ~T0 @X0 1 e@123 ]
[; ;SC8P062BD.h: 161: volatile bit CMPNS0 @ ((unsigned)&CMPCON0*8)+3;
"162
[v _CMPNV `Vb ~T0 @X0 1 e@122 ]
[; ;SC8P062BD.h: 162: volatile bit CMPNV @ ((unsigned)&CMPCON0*8)+2;
"163
[v _CMPOUT `Vb ~T0 @X0 1 e@121 ]
[; ;SC8P062BD.h: 163: volatile bit CMPOUT @ ((unsigned)&CMPCON0*8)+1;
"164
[v _CMPOEN `Vb ~T0 @X0 1 e@120 ]
[; ;SC8P062BD.h: 164: volatile bit CMPOEN @ ((unsigned)&CMPCON0*8)+0;
"167
[v _CMPIM `Vb ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 167: volatile bit CMPIM @ ((unsigned)&CMPCON1*8)+7;
"168
[v _AN_EN `Vb ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 168: volatile bit AN_EN @ ((unsigned)&CMPCON1*8)+6;
"169
[v _RBIAS_H `Vb ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 169: volatile bit RBIAS_H @ ((unsigned)&CMPCON1*8)+5;
"170
[v _RBIAS_L `Vb ~T0 @X0 1 e@132 ]
[; ;SC8P062BD.h: 170: volatile bit RBIAS_L @ ((unsigned)&CMPCON1*8)+4;
"171
[v _LVDS3 `Vb ~T0 @X0 1 e@131 ]
[; ;SC8P062BD.h: 171: volatile bit LVDS3 @ ((unsigned)&CMPCON1*8)+3;
"172
[v _LVDS2 `Vb ~T0 @X0 1 e@130 ]
[; ;SC8P062BD.h: 172: volatile bit LVDS2 @ ((unsigned)&CMPCON1*8)+2;
"173
[v _LVDS1 `Vb ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 173: volatile bit LVDS1 @ ((unsigned)&CMPCON1*8)+1;
"174
[v _LVDS0 `Vb ~T0 @X0 1 e@128 ]
[; ;SC8P062BD.h: 174: volatile bit LVDS0 @ ((unsigned)&CMPCON1*8)+0;
"177
[v _CLK_SEL `Vb ~T0 @X0 1 e@159 ]
[; ;SC8P062BD.h: 177: volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
"178
[v _TOUTPS3 `Vb ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 178: volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
"179
[v _TOUTPS2 `Vb ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 179: volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
"180
[v _TOUTPS1 `Vb ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 180: volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
"181
[v _TOUTPS0 `Vb ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 181: volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
"182
[v _TMR2ON `Vb ~T0 @X0 1 e@154 ]
[; ;SC8P062BD.h: 182: volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
"183
[v _T2CKPS1 `Vb ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 183: volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
"184
[v _T2CKPS0 `Vb ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 184: volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
"187
[v _IRCF2 `Vb ~T0 @X0 1 e@166 ]
[; ;SC8P062BD.h: 187: volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
"188
[v _IRCF1 `Vb ~T0 @X0 1 e@165 ]
[; ;SC8P062BD.h: 188: volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
"189
[v _IRCF0 `Vb ~T0 @X0 1 e@164 ]
[; ;SC8P062BD.h: 189: volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
"190
[v _SWDTEN `Vb ~T0 @X0 1 e@161 ]
[; ;SC8P062BD.h: 190: volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;
"193
[v _CLKDIV2 `Vb ~T0 @X0 1 e@175 ]
[; ;SC8P062BD.h: 193: volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
"194
[v _CLKDIV1 `Vb ~T0 @X0 1 e@174 ]
[; ;SC8P062BD.h: 194: volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
"195
[v _CLKDIV0 `Vb ~T0 @X0 1 e@173 ]
[; ;SC8P062BD.h: 195: volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
"196
[v _PWM4EN `Vb ~T0 @X0 1 e@172 ]
[; ;SC8P062BD.h: 196: volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
"197
[v _PWM3EN `Vb ~T0 @X0 1 e@171 ]
[; ;SC8P062BD.h: 197: volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
"198
[v _PWM2EN `Vb ~T0 @X0 1 e@170 ]
[; ;SC8P062BD.h: 198: volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
"199
[v _PWM1EN `Vb ~T0 @X0 1 e@169 ]
[; ;SC8P062BD.h: 199: volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
"200
[v _PWM0EN `Vb ~T0 @X0 1 e@168 ]
[; ;SC8P062BD.h: 200: volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;
"203
[v _PWMIO_SEL1 `Vb ~T0 @X0 1 e@183 ]
[; ;SC8P062BD.h: 203: volatile bit PWMIO_SEL1 @ ((unsigned)&PWMCON1*8)+7;
"204
[v _PWMIO_SEL0 `Vb ~T0 @X0 1 e@182 ]
[; ;SC8P062BD.h: 204: volatile bit PWMIO_SEL0 @ ((unsigned)&PWMCON1*8)+6;
"205
[v _PWM2DTEN `Vb ~T0 @X0 1 e@181 ]
[; ;SC8P062BD.h: 205: volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
"206
[v _PWM0DTEN `Vb ~T0 @X0 1 e@180 ]
[; ;SC8P062BD.h: 206: volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
"207
[v _DT_DIV1 `Vb ~T0 @X0 1 e@177 ]
[; ;SC8P062BD.h: 207: volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
"208
[v _DT_DIV0 `Vb ~T0 @X0 1 e@176 ]
[; ;SC8P062BD.h: 208: volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;
"211
[v _PWM4D9 `Vb ~T0 @X0 1 e@197 ]
[; ;SC8P062BD.h: 211: volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
"212
[v _PWM4D8 `Vb ~T0 @X0 1 e@196 ]
[; ;SC8P062BD.h: 212: volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
"213
[v _PWM4T9 `Vb ~T0 @X0 1 e@195 ]
[; ;SC8P062BD.h: 213: volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
"214
[v _PWM4T8 `Vb ~T0 @X0 1 e@194 ]
[; ;SC8P062BD.h: 214: volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
"215
[v _PWMT9 `Vb ~T0 @X0 1 e@193 ]
[; ;SC8P062BD.h: 215: volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
"216
[v _PWMT8 `Vb ~T0 @X0 1 e@192 ]
[; ;SC8P062BD.h: 216: volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;
"219
[v _PWM4DIR `Vb ~T0 @X0 1 e@236 ]
[; ;SC8P062BD.h: 219: volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
"220
[v _PWM3DIR `Vb ~T0 @X0 1 e@235 ]
[; ;SC8P062BD.h: 220: volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
"221
[v _PWM2DIR `Vb ~T0 @X0 1 e@234 ]
[; ;SC8P062BD.h: 221: volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
"222
[v _PWM1DIR `Vb ~T0 @X0 1 e@233 ]
[; ;SC8P062BD.h: 222: volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
"223
[v _PWM0DIR `Vb ~T0 @X0 1 e@232 ]
[; ;SC8P062BD.h: 223: volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;
"226
[v _PWMD19 `Vb ~T0 @X0 1 e@245 ]
[; ;SC8P062BD.h: 226: volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
"227
[v _PWMD18 `Vb ~T0 @X0 1 e@244 ]
[; ;SC8P062BD.h: 227: volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
"228
[v _PWMD09 `Vb ~T0 @X0 1 e@241 ]
[; ;SC8P062BD.h: 228: volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
"229
[v _PWMD08 `Vb ~T0 @X0 1 e@240 ]
[; ;SC8P062BD.h: 229: volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;
"232
[v _PWM01DT5 `Vb ~T0 @X0 1 e@253 ]
[; ;SC8P062BD.h: 232: volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
"233
[v _PWM01DT4 `Vb ~T0 @X0 1 e@252 ]
[; ;SC8P062BD.h: 233: volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
"234
[v _PWM01DT3 `Vb ~T0 @X0 1 e@251 ]
[; ;SC8P062BD.h: 234: volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
"235
[v _PWM01DT2 `Vb ~T0 @X0 1 e@250 ]
[; ;SC8P062BD.h: 235: volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
"236
[v _PWM01DT1 `Vb ~T0 @X0 1 e@249 ]
[; ;SC8P062BD.h: 236: volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
"237
[v _PWM01DT0 `Vb ~T0 @X0 1 e@248 ]
[; ;SC8P062BD.h: 237: volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;
"240
[v _TRISA5 `Vb ~T0 @X0 1 e@1069 ]
[; ;SC8P062BD.h: 240: volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
"241
[v _TRISA4 `Vb ~T0 @X0 1 e@1068 ]
[; ;SC8P062BD.h: 241: volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
"242
[v _TRISA3 `Vb ~T0 @X0 1 e@1067 ]
[; ;SC8P062BD.h: 242: volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
"243
[v _TRISA2 `Vb ~T0 @X0 1 e@1066 ]
[; ;SC8P062BD.h: 243: volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
"244
[v _TRISA1 `Vb ~T0 @X0 1 e@1065 ]
[; ;SC8P062BD.h: 244: volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
"245
[v _TRISA0 `Vb ~T0 @X0 1 e@1064 ]
[; ;SC8P062BD.h: 245: volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
"248
[v _RA5 `Vb ~T0 @X0 1 e@1077 ]
[; ;SC8P062BD.h: 248: volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
"249
[v _RA4 `Vb ~T0 @X0 1 e@1076 ]
[; ;SC8P062BD.h: 249: volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
"250
[v _RA3 `Vb ~T0 @X0 1 e@1075 ]
[; ;SC8P062BD.h: 250: volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
"251
[v _RA2 `Vb ~T0 @X0 1 e@1074 ]
[; ;SC8P062BD.h: 251: volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
"252
[v _RA1 `Vb ~T0 @X0 1 e@1073 ]
[; ;SC8P062BD.h: 252: volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
"253
[v _RA0 `Vb ~T0 @X0 1 e@1072 ]
[; ;SC8P062BD.h: 253: volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
"256
[v _WPDA5 `Vb ~T0 @X0 1 e@1085 ]
[; ;SC8P062BD.h: 256: volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
"257
[v _WPDA4 `Vb ~T0 @X0 1 e@1084 ]
[; ;SC8P062BD.h: 257: volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
"258
[v _WPDA3 `Vb ~T0 @X0 1 e@1083 ]
[; ;SC8P062BD.h: 258: volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
"259
[v _WPDA2 `Vb ~T0 @X0 1 e@1082 ]
[; ;SC8P062BD.h: 259: volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
"260
[v _WPDA1 `Vb ~T0 @X0 1 e@1081 ]
[; ;SC8P062BD.h: 260: volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
"261
[v _WPDA0 `Vb ~T0 @X0 1 e@1080 ]
[; ;SC8P062BD.h: 261: volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;
"264
[v _WPUA5 `Vb ~T0 @X0 1 e@1093 ]
[; ;SC8P062BD.h: 264: volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
"265
[v _WPUA4 `Vb ~T0 @X0 1 e@1092 ]
[; ;SC8P062BD.h: 265: volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
"266
[v _WPUA3 `Vb ~T0 @X0 1 e@1091 ]
[; ;SC8P062BD.h: 266: volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
"267
[v _WPUA2 `Vb ~T0 @X0 1 e@1090 ]
[; ;SC8P062BD.h: 267: volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
"268
[v _WPUA1 `Vb ~T0 @X0 1 e@1089 ]
[; ;SC8P062BD.h: 268: volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
"269
[v _WPUA0 `Vb ~T0 @X0 1 e@1088 ]
[; ;SC8P062BD.h: 269: volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
"272
[v _IOCA5 `Vb ~T0 @X0 1 e@1101 ]
[; ;SC8P062BD.h: 272: volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
"273
[v _IOCA4 `Vb ~T0 @X0 1 e@1100 ]
[; ;SC8P062BD.h: 273: volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
"274
[v _IOCA3 `Vb ~T0 @X0 1 e@1099 ]
[; ;SC8P062BD.h: 274: volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
"275
[v _IOCA2 `Vb ~T0 @X0 1 e@1098 ]
[; ;SC8P062BD.h: 275: volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
"276
[v _IOCA1 `Vb ~T0 @X0 1 e@1097 ]
[; ;SC8P062BD.h: 276: volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
"277
[v _IOCA0 `Vb ~T0 @X0 1 e@1096 ]
[; ;SC8P062BD.h: 277: volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;
"280
[v _ODCONA5 `Vb ~T0 @X0 1 e@1125 ]
[; ;SC8P062BD.h: 280: volatile bit ODCONA5 @ ((unsigned)&ODCONA*8)+5;
"281
[v _ODCONA4 `Vb ~T0 @X0 1 e@1124 ]
[; ;SC8P062BD.h: 281: volatile bit ODCONA4 @ ((unsigned)&ODCONA*8)+4;
"282
[v _ODCONA3 `Vb ~T0 @X0 1 e@1123 ]
[; ;SC8P062BD.h: 282: volatile bit ODCONA3 @ ((unsigned)&ODCONA*8)+3;
"283
[v _ODCONA2 `Vb ~T0 @X0 1 e@1122 ]
[; ;SC8P062BD.h: 283: volatile bit ODCONA2 @ ((unsigned)&ODCONA*8)+2;
"284
[v _ODCONA1 `Vb ~T0 @X0 1 e@1121 ]
[; ;SC8P062BD.h: 284: volatile bit ODCONA1 @ ((unsigned)&ODCONA*8)+1;
"285
[v _ODCONA0 `Vb ~T0 @X0 1 e@1120 ]
[; ;SC8P062BD.h: 285: volatile bit ODCONA0 @ ((unsigned)&ODCONA*8)+0;
"288
[v _ANS5 `Vb ~T0 @X0 1 e@1181 ]
[; ;SC8P062BD.h: 288: volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
"289
[v _ANS4 `Vb ~T0 @X0 1 e@1180 ]
[; ;SC8P062BD.h: 289: volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
"290
[v _ANS3 `Vb ~T0 @X0 1 e@1179 ]
[; ;SC8P062BD.h: 290: volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
"291
[v _ANS2 `Vb ~T0 @X0 1 e@1178 ]
[; ;SC8P062BD.h: 291: volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
"292
[v _ANS1 `Vb ~T0 @X0 1 e@1177 ]
[; ;SC8P062BD.h: 292: volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
"293
[v _ANS0 `Vb ~T0 @X0 1 e@1176 ]
[; ;SC8P062BD.h: 293: volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;
"296
[v _ANS15 `Vb ~T0 @X0 1 e@1191 ]
[; ;SC8P062BD.h: 296: volatile bit ANS15 @ ((unsigned)&ANSEL1*8)+7;
"297
[v _ANS14 `Vb ~T0 @X0 1 e@1190 ]
[; ;SC8P062BD.h: 297: volatile bit ANS14 @ ((unsigned)&ANSEL1*8)+6;
"298
[v _ANS13 `Vb ~T0 @X0 1 e@1189 ]
[; ;SC8P062BD.h: 298: volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
"299
[v _ANS12 `Vb ~T0 @X0 1 e@1188 ]
[; ;SC8P062BD.h: 299: volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
"300
[v _ANS11 `Vb ~T0 @X0 1 e@1187 ]
[; ;SC8P062BD.h: 300: volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
"301
[v _ANS9 `Vb ~T0 @X0 1 e@1185 ]
[; ;SC8P062BD.h: 301: volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
"302
[v _ANS8 `Vb ~T0 @X0 1 e@1184 ]
[; ;SC8P062BD.h: 302: volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;
"305
[v _ADCS1 `Vb ~T0 @X0 1 e@1199 ]
[; ;SC8P062BD.h: 305: volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
"306
[v _ADCS0 `Vb ~T0 @X0 1 e@1198 ]
[; ;SC8P062BD.h: 306: volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
"307
[v _CHS3 `Vb ~T0 @X0 1 e@1197 ]
[; ;SC8P062BD.h: 307: volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
"308
[v _CHS2 `Vb ~T0 @X0 1 e@1196 ]
[; ;SC8P062BD.h: 308: volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
"309
[v _CHS1 `Vb ~T0 @X0 1 e@1195 ]
[; ;SC8P062BD.h: 309: volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
"310
[v _CHS0 `Vb ~T0 @X0 1 e@1194 ]
[; ;SC8P062BD.h: 310: volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
"311
[v _GODONE `Vb ~T0 @X0 1 e@1193 ]
[; ;SC8P062BD.h: 311: volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
"312
[v _ADON `Vb ~T0 @X0 1 e@1192 ]
[; ;SC8P062BD.h: 312: volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
"315
[v _ADFM `Vb ~T0 @X0 1 e@1207 ]
[; ;SC8P062BD.h: 315: volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
"316
[v _CHS4 `Vb ~T0 @X0 1 e@1206 ]
[; ;SC8P062BD.h: 316: volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
"317
[v _LDO_EN `Vb ~T0 @X0 1 e@1202 ]
[; ;SC8P062BD.h: 317: volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
"318
[v _LDO_SEL1 `Vb ~T0 @X0 1 e@1201 ]
[; ;SC8P062BD.h: 318: volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
"319
[v _LDO_SEL0 `Vb ~T0 @X0 1 e@1200 ]
[; ;SC8P062BD.h: 319: volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;
"322
[v _PWMD39 `Vb ~T0 @X0 1 e@1269 ]
[; ;SC8P062BD.h: 322: volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
"323
[v _PWMD38 `Vb ~T0 @X0 1 e@1268 ]
[; ;SC8P062BD.h: 323: volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
"324
[v _PWMD29 `Vb ~T0 @X0 1 e@1265 ]
[; ;SC8P062BD.h: 324: volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
"325
[v _PWMD28 `Vb ~T0 @X0 1 e@1264 ]
[; ;SC8P062BD.h: 325: volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;
[; ;sc.h: 28: extern void __nop(void);
[; ;sc.h: 76: extern unsigned int flash_read(unsigned short addr);
[; ;sc.h: 150: extern __nonreentrant void _delay(unsigned long);
[; ;sc.h: 184: extern unsigned char __resetbits;
[; ;sc.h: 185: extern __bit __powerdown;
[; ;sc.h: 186: extern __bit __timeout;
"16 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[v _adresult `Vui ~T0 @X0 1 e ]
[; ;main.c: 16: volatile unsigned int adresult;
"17
[v _result `Vui ~T0 @X0 1 e ]
[; ;main.c: 17: volatile unsigned int result;
"18
[v _test_adc `Vuc ~T0 @X0 1 e ]
[; ;main.c: 18: volatile unsigned char test_adc;
"19
[v _power_ad `Vui ~T0 @X0 1 e ]
[; ;main.c: 19: volatile unsigned int power_ad;
"20
[v _intCount `uc ~T0 @X0 1 e ]
[; ;main.c: 20: unsigned char intCount;
"21
[v _count1s `uc ~T0 @X0 1 e ]
[; ;main.c: 21: unsigned char count1s;
"22
[v _IntFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 22: unsigned char IntFlag;
"23
[v _chrgFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 23: unsigned char chrgFlag;
"24
[v _chrgFullFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 24: unsigned char chrgFullFlag;
"25
[v _intCount10 `uc ~T0 @X0 1 e ]
[; ;main.c: 25: unsigned char intCount10;
"26
[v _outADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 26: unsigned int outADValue;
"27
[v _batADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 27: unsigned int batADValue;
"28
[v _countHalfFull `uc ~T0 @X0 1 e ]
[; ;main.c: 28: unsigned char countHalfFull;
"29
[v _protectFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 29: unsigned char protectFlag;
"30
[v _workOverOutTime `uc ~T0 @X0 1 e ]
[; ;main.c: 30: unsigned char workOverOutTime;
"31
[v _workStep `uc ~T0 @X0 1 e ]
[i _workStep
-> -> 0 `i `uc
]
[; ;main.c: 31: unsigned char workStep = 0;
"32
[v _ledCnt `uc ~T0 @X0 1 e ]
[; ;main.c: 32: unsigned char ledCnt;
"33
[v _ledStep `uc ~T0 @X0 1 e ]
[; ;main.c: 33: unsigned char ledStep;
"34
[v _keyCount `uc ~T0 @X0 1 e ]
[; ;main.c: 34: unsigned char keyCount;
"35
[v _longPressFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 35: unsigned char longPressFlag;
"36
[v _maxDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 36: unsigned char maxDuty;
"37
[v _overCount `uc ~T0 @X0 1 e ]
[; ;main.c: 37: unsigned char overCount;
"38
[v _addPowerCount `uc ~T0 @X0 1 e ]
[; ;main.c: 38: unsigned char addPowerCount;
"39
[v _tempDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 39: unsigned char tempDuty;
"40
[v _startTime `uc ~T0 @X0 1 e ]
[; ;main.c: 40: unsigned char startTime;
"41
[v _firstTime `uc ~T0 @X0 1 e ]
[; ;main.c: 41: unsigned char firstTime;
"42
[v _overChrgTime `uc ~T0 @X0 1 e ]
[; ;main.c: 42: unsigned char overChrgTime;
"43
[v _pwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 43: unsigned char pwStep;
"44
[v _prePwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 44: unsigned char prePwStep;
"45
[v _count50s `ui ~T0 @X0 1 e ]
[; ;main.c: 45: unsigned int count50s;
"46
[v _reChrgCount `uc ~T0 @X0 1 e ]
[; ;main.c: 46: unsigned char reChrgCount;
"47
[v _lockLedStep `uc ~T0 @X0 1 e ]
[; ;main.c: 47: unsigned char lockLedStep;
"48
[v _showBatTime `uc ~T0 @X0 1 e ]
[; ;main.c: 48: unsigned char showBatTime;
"49
[v _chrgMode `uc ~T0 @X0 1 e ]
[i _chrgMode
-> -> 0 `i `uc
]
[; ;main.c: 49: unsigned char chrgMode = 0;
"50
[v _chrgMaxAD `uc ~T0 @X0 1 e ]
[i _chrgMaxAD
-> -> 0 `i `uc
]
[; ;main.c: 50: unsigned char chrgMaxAD = 0;
"51
[v _lockCount `uc ~T0 @X0 1 e ]
[i _lockCount
-> -> 0 `i `uc
]
[; ;main.c: 51: unsigned char lockCount = 0;
"52
[v _fullCount `ui ~T0 @X0 1 e ]
[i _fullCount
-> -> 0 `i `ui
]
[; ;main.c: 52: unsigned int fullCount = 0;
"53
[v _addTime `uc ~T0 @X0 1 e ]
[; ;main.c: 53: unsigned char addTime;
"54
[v _subTime `uc ~T0 @X0 1 e ]
[; ;main.c: 54: unsigned char subTime;
"55
[v _chrgWaitTime `uc ~T0 @X0 1 e ]
[; ;main.c: 55: unsigned char chrgWaitTime;
"56
[v _chrgMaxDuty `uc ~T0 @X0 1 e ]
[i _chrgMaxDuty
-> -> 0 `i `uc
]
[; ;main.c: 56: unsigned char chrgMaxDuty = 0;
"57
[v _ledCntTime `uc ~T0 @X0 1 e ]
[; ;main.c: 57: unsigned char ledCntTime;
"58
[v _count5s `ui ~T0 @X0 1 e ]
[i _count5s
-> -> 0 `i `ui
]
[; ;main.c: 58: unsigned int count5s = 0;
"59
[v _overWorkTime `uc ~T0 @X0 1 e ]
[; ;main.c: 59: unsigned char overWorkTime;
"60
[v _preLedStep `uc ~T0 @X0 1 e ]
[; ;main.c: 60: unsigned char preLedStep;
"61
[v _count8s `ui ~T0 @X0 1 e ]
[; ;main.c: 61: unsigned int count8s;
"62
[v _count900s `ui ~T0 @X0 1 e ]
[; ;main.c: 62: unsigned int count900s;
"63
[v _lowBatFlag `uc ~T0 @X0 1 e ]
[i _lowBatFlag
-> -> 0 `i `uc
]
[; ;main.c: 63: unsigned char lowBatFlag = 0;
"64
[v _sleepTime `uc ~T0 @X0 1 e ]
[; ;main.c: 64: unsigned char sleepTime;
"65
[v _stopChrgTime `uc ~T0 @X0 1 e ]
[i _stopChrgTime
-> -> 0 `i `uc
]
[; ;main.c: 65: unsigned char stopChrgTime = 0;
[; ;main.c: 68: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
[; ;main.c: 69: void DelayXms(unsigned char x);
[; ;main.c: 70: unsigned char ADC_Result(unsigned char adch);
[; ;main.c: 71: void Init_System();
[; ;main.c: 72: void AD_Init();
[; ;main.c: 73: void Sleep_Mode();
[; ;main.c: 74: void pwmInit();
[; ;main.c: 75: void pwmStop();
[; ;main.c: 76: void chrgPwmInit();
[; ;main.c: 77: void chrgPwmStop();
[; ;main.c: 78: void chrgCtr();
[; ;main.c: 79: void checkOutA();
[; ;main.c: 80: void checkBatAD();
[; ;main.c: 81: void ledShow();
[; ;main.c: 82: void keyCtr();
[; ;main.c: 83: void workCtr();
[; ;main.c: 84: void ledCtr();
[; ;main.c: 85: char keyRead(char keyStatus);
[v $root$_Isr_Timer `(v ~T0 @X0 0 e ]
[v F557 `(v ~T0 @X0 1 tf ]
"100
[v _Isr_Timer `IF557 ~T0 @X0 1 e ]
"101
{
[; ;main.c: 100: void interrupt Isr_Timer()
[; ;main.c: 101: {
[e :U _Isr_Timer ]
[f ]
[; ;main.c: 102: if(TMR2IF)
"102
[e $ ! _TMR2IF 2  ]
[; ;main.c: 103: {
"103
{
[; ;main.c: 104: TMR2IF = 0;
"104
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 105: if(++intCount >= 160)
"105
[e $ ! >= -> =+ _intCount -> -> 1 `i `uc `i -> 160 `i 3  ]
[; ;main.c: 106: {
"106
{
[; ;main.c: 107: intCount = 0;
"107
[e = _intCount -> -> 0 `i `uc ]
[; ;main.c: 108: IntFlag = 1;
"108
[e = _IntFlag -> -> 1 `i `uc ]
[; ;main.c: 109: if(++count1s >= 100)
"109
[e $ ! >= -> =+ _count1s -> -> 1 `i `uc `i -> 100 `i 4  ]
[; ;main.c: 110: {
"110
{
[; ;main.c: 111: count1s = 0;
"111
[e = _count1s -> -> 0 `i `uc ]
"112
}
[e :U 4 ]
"113
}
[e :U 3 ]
[; ;main.c: 112: }
[; ;main.c: 113: }
[; ;main.c: 114: ledShow();
"114
[e ( _ledShow ..  ]
[; ;main.c: 115: intCount10++;
"115
[e ++ _intCount10 -> -> 1 `i `uc ]
"116
}
[e :U 2 ]
[; ;main.c: 116: }
[; ;main.c: 118: }
"118
[e :UE 1 ]
}
[v $root$_main `(v ~T0 @X0 0 e ]
"124
[v _main `(v ~T0 @X0 1 ef ]
"125
{
[; ;main.c: 124: void main()
[; ;main.c: 125: {
[e :U _main ]
[f ]
[; ;main.c: 126: Init_System();
"126
[e ( _Init_System ..  ]
[; ;main.c: 127: AD_Init();
"127
[e ( _AD_Init ..  ]
[; ;main.c: 128: firstTime = 100;
"128
[e = _firstTime -> -> 100 `i `uc ]
[; ;main.c: 129: while (1)
"129
[e :U 7 ]
[; ;main.c: 130: {
"130
{
[; ;main.c: 131: asm("clrwdt");
"131
[; <" clrwdt ;# ">
[; ;main.c: 132: if(intCount10 > 10)
"132
[e $ ! > -> _intCount10 `i -> 10 `i 9  ]
[; ;main.c: 133: {
"133
{
[; ;main.c: 134: intCount10 = 0;
"134
[e = _intCount10 -> -> 0 `i `uc ]
[; ;main.c: 135: checkOutA();
"135
[e ( _checkOutA ..  ]
"136
}
[e :U 9 ]
[; ;main.c: 136: }
[; ;main.c: 137: if(!IntFlag)
"137
[e $ ! ! != -> _IntFlag `i -> -> -> 0 `i `uc `i 10  ]
[; ;main.c: 138: continue;
"138
[e $U 6  ]
[e :U 10 ]
[; ;main.c: 139: IntFlag = 0;
"139
[e = _IntFlag -> -> 0 `i `uc ]
[; ;main.c: 140: chrgCtr();
"140
[e ( _chrgCtr ..  ]
[; ;main.c: 141: checkBatAD();
"141
[e ( _checkBatAD ..  ]
[; ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
"142
[e $ ! && == -> _chrgFlag `i -> 0 `i == -> _lowBatFlag `i -> 0 `i 11  ]
[; ;main.c: 143: {
"143
{
[; ;main.c: 144: keyCtr();
"144
[e ( _keyCtr ..  ]
"145
}
[e :U 11 ]
[; ;main.c: 145: }
[; ;main.c: 146: workCtr();
"146
[e ( _workCtr ..  ]
[; ;main.c: 147: ledCtr();
"147
[e ( _ledCtr ..  ]
[; ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && showBatTime == 0)
"148
[e $ ! && && && && == -> _chrgFlag `i -> 0 `i == -> _workStep `i -> 0 `i == -> _keyCount `i -> 0 `i == -> _firstTime `i -> 0 `i == -> _showBatTime `i -> 0 `i 12  ]
[; ;main.c: 149: {
"149
{
[; ;main.c: 150: if(++sleepTime >= 200)
"150
[e $ ! >= -> =+ _sleepTime -> -> 1 `i `uc `i -> 200 `i 13  ]
[; ;main.c: 151: {
"151
{
[; ;main.c: 152: sleepTime = 0;
"152
[e = _sleepTime -> -> 0 `i `uc ]
[; ;main.c: 153: Sleep_Mode();
"153
[e ( _Sleep_Mode ..  ]
"154
}
[e :U 13 ]
"155
}
[; ;main.c: 154: }
[; ;main.c: 155: }
[e $U 14  ]
"156
[e :U 12 ]
[; ;main.c: 156: else
[; ;main.c: 157: {
"157
{
[; ;main.c: 158: sleepTime = 0;
"158
[e = _sleepTime -> -> 0 `i `uc ]
"159
}
[e :U 14 ]
"160
}
[e :U 6 ]
"129
[e $U 7  ]
[e :U 8 ]
[; ;main.c: 159: }
[; ;main.c: 160: }
[; ;main.c: 161: }
"161
[e :UE 5 ]
}
"163
[v _ledShow `(v ~T0 @X0 1 ef ]
"164
{
[; ;main.c: 163: void ledShow()
[; ;main.c: 164: {
[e :U _ledShow ]
[f ]
[; ;main.c: 165: if(++ledCntTime > 30)
"165
[e $ ! > -> =+ _ledCntTime -> -> 1 `i `uc `i -> 30 `i 16  ]
[; ;main.c: 166: {
"166
{
[; ;main.c: 167: ledCntTime = 0;
"167
[e = _ledCntTime -> -> 0 `i `uc ]
[; ;main.c: 168: if(++ledCnt > 5)
"168
[e $ ! > -> =+ _ledCnt -> -> 1 `i `uc `i -> 5 `i 17  ]
[; ;main.c: 169: {
"169
{
[; ;main.c: 170: ledCnt = 0;
"170
[e = _ledCnt -> -> 0 `i `uc ]
"171
}
[e :U 17 ]
[; ;main.c: 171: }
[; ;main.c: 172: PORTA &= 0xDF;
"172
[e =& _PORTA -> -> 223 `i `uc ]
[; ;main.c: 173: PORTB &= 0xC7;
"173
[e =& _PORTB -> -> 199 `i `uc ]
[; ;main.c: 174: TRISA |= 0x20;
"174
[e =| _TRISA -> -> 32 `i `uc ]
[; ;main.c: 175: TRISB |= 0x38;
"175
[e =| _TRISB -> -> 56 `i `uc ]
[; ;main.c: 176: switch(ledCnt)
"176
[e $U 19  ]
[; ;main.c: 177: {
"177
{
[; ;main.c: 178: case 1:
"178
[e :U 20 ]
[; ;main.c: 179: if(ledStep > 0)
"179
[e $ ! > -> _ledStep `i -> 0 `i 21  ]
[; ;main.c: 180: {
"180
{
[; ;main.c: 181: TRISB &= 0xE7;
"181
[e =& _TRISB -> -> 231 `i `uc ]
[; ;main.c: 182: PORTB |= 0x10;
"182
[e =| _PORTB -> -> 16 `i `uc ]
"183
}
[e :U 21 ]
[; ;main.c: 183: }
[; ;main.c: 184: break;
"184
[e $U 18  ]
[; ;main.c: 185: case 2:
"185
[e :U 22 ]
[; ;main.c: 186: if(ledStep > 1)
"186
[e $ ! > -> _ledStep `i -> 1 `i 23  ]
[; ;main.c: 187: {
"187
{
[; ;main.c: 188: TRISB &= 0xCF;
"188
[e =& _TRISB -> -> 207 `i `uc ]
[; ;main.c: 189: PORTB |= 0x20;
"189
[e =| _PORTB -> -> 32 `i `uc ]
"190
}
[e :U 23 ]
[; ;main.c: 190: }
[; ;main.c: 191: break;
"191
[e $U 18  ]
[; ;main.c: 192: case 3:
"192
[e :U 24 ]
[; ;main.c: 193: if(ledStep > 2)
"193
[e $ ! > -> _ledStep `i -> 2 `i 25  ]
[; ;main.c: 194: {
"194
{
[; ;main.c: 195: TRISB &= 0xE7;
"195
[e =& _TRISB -> -> 231 `i `uc ]
[; ;main.c: 196: PORTB |= 0x08;
"196
[e =| _PORTB -> -> 8 `i `uc ]
"197
}
[e :U 25 ]
[; ;main.c: 197: }
[; ;main.c: 198: break;
"198
[e $U 18  ]
[; ;main.c: 199: case 4:
"199
[e :U 26 ]
[; ;main.c: 200: if(ledStep > 3)
"200
[e $ ! > -> _ledStep `i -> 3 `i 27  ]
[; ;main.c: 201: {
"201
{
[; ;main.c: 202: TRISB &= 0xCF;
"202
[e =& _TRISB -> -> 207 `i `uc ]
[; ;main.c: 203: PORTB |= 0x10;
"203
[e =| _PORTB -> -> 16 `i `uc ]
"204
}
[e :U 27 ]
[; ;main.c: 204: }
[; ;main.c: 205: break;
"205
[e $U 18  ]
[; ;main.c: 206: case 5:
"206
[e :U 28 ]
[; ;main.c: 207: if(ledStep > 4)
"207
[e $ ! > -> _ledStep `i -> 4 `i 29  ]
[; ;main.c: 208: {
"208
{
[; ;main.c: 209: TRISA &= 0xDF;
"209
[e =& _TRISA -> -> 223 `i `uc ]
[; ;main.c: 210: TRISB &= 0xDF;
"210
[e =& _TRISB -> -> 223 `i `uc ]
[; ;main.c: 211: PORTB |= 0x20;
"211
[e =| _PORTB -> -> 32 `i `uc ]
"212
}
[e :U 29 ]
[; ;main.c: 212: }
[; ;main.c: 213: break;
"213
[e $U 18  ]
[; ;main.c: 214: case 0:
"214
[e :U 30 ]
[; ;main.c: 215: if(ledStep > 5)
"215
[e $ ! > -> _ledStep `i -> 5 `i 31  ]
[; ;main.c: 216: {
"216
{
[; ;main.c: 217: TRISA &= 0xDF;
"217
[e =& _TRISA -> -> 223 `i `uc ]
[; ;main.c: 218: TRISB &= 0xDF;
"218
[e =& _TRISB -> -> 223 `i `uc ]
[; ;main.c: 219: PORTA |= 0x20;
"219
[e =| _PORTA -> -> 32 `i `uc ]
"220
}
[e :U 31 ]
[; ;main.c: 220: }
[; ;main.c: 221: break;
"221
[e $U 18  ]
[; ;main.c: 222: default:
"222
[e :U 32 ]
[; ;main.c: 223: break;
"223
[e $U 18  ]
"224
}
[; ;main.c: 224: }
[e $U 18  ]
"176
[e :U 19 ]
[e [\ _ledCnt , $ -> -> 1 `i `uc 20
 , $ -> -> 2 `i `uc 22
 , $ -> -> 3 `i `uc 24
 , $ -> -> 4 `i `uc 26
 , $ -> -> 5 `i `uc 28
 , $ -> -> 0 `i `uc 30
 32 ]
"224
[e :U 18 ]
"225
}
[e :U 16 ]
[; ;main.c: 225: }
[; ;main.c: 228: }
"228
[e :UE 15 ]
}
"231
[v _ledCtr `(v ~T0 @X0 1 ef ]
"232
{
[; ;main.c: 231: void ledCtr()
[; ;main.c: 232: {
[e :U _ledCtr ]
[f ]
[; ;main.c: 233: if(firstTime > 0)
"233
[e $ ! > -> _firstTime `i -> 0 `i 34  ]
[; ;main.c: 234: {
"234
{
[; ;main.c: 235: firstTime--;
"235
[e -- _firstTime -> -> 1 `i `uc ]
[; ;main.c: 236: ledStep = 6;
"236
[e = _ledStep -> -> 6 `i `uc ]
[; ;main.c: 237: if(prePwStep < pwStep)
"237
[e $ ! < -> _prePwStep `i -> _pwStep `i 35  ]
[; ;main.c: 238: {
"238
{
[; ;main.c: 239: prePwStep = pwStep;
"239
[e = _prePwStep _pwStep ]
"240
}
[e :U 35 ]
"241
}
[; ;main.c: 240: }
[; ;main.c: 241: }
[e $U 36  ]
"242
[e :U 34 ]
[; ;main.c: 242: else if(overWorkTime > 0)
[e $ ! > -> _overWorkTime `i -> 0 `i 37  ]
[; ;main.c: 243: {
"243
{
[; ;main.c: 244: overWorkTime--;
"244
[e -- _overWorkTime -> -> 1 `i `uc ]
[; ;main.c: 245: if(overWorkTime % 60 < 30)
"245
[e $ ! < % -> _overWorkTime `i -> 60 `i -> 30 `i 38  ]
[; ;main.c: 246: {
"246
{
[; ;main.c: 247: ledStep = preLedStep;
"247
[e = _ledStep _preLedStep ]
"248
}
[; ;main.c: 248: }
[e $U 39  ]
"249
[e :U 38 ]
[; ;main.c: 249: else
[; ;main.c: 250: {
"250
{
[; ;main.c: 251: ledStep = 0;
"251
[e = _ledStep -> -> 0 `i `uc ]
"252
}
[e :U 39 ]
"253
}
[; ;main.c: 252: }
[; ;main.c: 253: }
[e $U 40  ]
"254
[e :U 37 ]
[; ;main.c: 254: else if(showBatTime > 0)
[e $ ! > -> _showBatTime `i -> 0 `i 41  ]
[; ;main.c: 255: {
"255
{
[; ;main.c: 256: showBatTime--;
"256
[e -- _showBatTime -> -> 1 `i `uc ]
[; ;main.c: 257: if(prePwStep >= 14)
"257
[e $ ! >= -> _prePwStep `i -> 14 `i 42  ]
[; ;main.c: 258: {
"258
{
[; ;main.c: 259: ledStep = prePwStep/14;
"259
[e = _ledStep -> / -> _prePwStep `i -> 14 `i `uc ]
"260
}
[; ;main.c: 260: }
[e $U 43  ]
"261
[e :U 42 ]
[; ;main.c: 261: else if(prePwStep > 5)
[e $ ! > -> _prePwStep `i -> 5 `i 44  ]
[; ;main.c: 262: {
"262
{
[; ;main.c: 263: ledStep = 1;
"263
[e = _ledStep -> -> 1 `i `uc ]
"264
}
[; ;main.c: 264: }
[e $U 45  ]
"265
[e :U 44 ]
[; ;main.c: 265: else
[; ;main.c: 266: {
"266
{
[; ;main.c: 267: if(count1s < 50)
"267
[e $ ! < -> _count1s `i -> 50 `i 46  ]
[; ;main.c: 268: {
"268
{
[; ;main.c: 269: ledStep = 1;
"269
[e = _ledStep -> -> 1 `i `uc ]
"270
}
[; ;main.c: 270: }
[e $U 47  ]
"271
[e :U 46 ]
[; ;main.c: 271: else
[; ;main.c: 272: {
"272
{
[; ;main.c: 273: ledStep = 0;
"273
[e = _ledStep -> -> 0 `i `uc ]
"274
}
[e :U 47 ]
"275
}
[e :U 45 ]
[e :U 43 ]
"276
}
[; ;main.c: 274: }
[; ;main.c: 275: }
[; ;main.c: 276: }
[e $U 48  ]
"277
[e :U 41 ]
[; ;main.c: 277: else if(workStep > 0)
[e $ ! > -> _workStep `i -> 0 `i 49  ]
[; ;main.c: 278: {
"278
{
[; ;main.c: 279: ledStep = workStep;
"279
[e = _ledStep _workStep ]
"280
}
[; ;main.c: 280: }
[e $U 50  ]
"281
[e :U 49 ]
[; ;main.c: 281: else if(chrgFlag)
[e $ ! != -> _chrgFlag `i -> -> -> 0 `i `uc `i 51  ]
[; ;main.c: 282: {
"282
{
[; ;main.c: 283: if(count1s % 50 == 0)
"283
[e $ ! == % -> _count1s `i -> 50 `i -> 0 `i 52  ]
[; ;main.c: 284: {
"284
{
[; ;main.c: 285: if(++ledStep > 6)
"285
[e $ ! > -> =+ _ledStep -> -> 1 `i `uc `i -> 6 `i 53  ]
[; ;main.c: 286: {
"286
{
[; ;main.c: 287: ledStep = lockLedStep;
"287
[e = _ledStep _lockLedStep ]
"288
}
[e :U 53 ]
"289
}
[e :U 52 ]
"290
}
[; ;main.c: 288: }
[; ;main.c: 289: }
[; ;main.c: 290: }
[e $U 54  ]
"291
[e :U 51 ]
[; ;main.c: 291: else
[; ;main.c: 292: {
"292
{
[; ;main.c: 293: ledStep = 0;
"293
[e = _ledStep -> -> 0 `i `uc ]
"294
}
[e :U 54 ]
[e :U 50 ]
[e :U 48 ]
[e :U 40 ]
[e :U 36 ]
[; ;main.c: 294: }
[; ;main.c: 295: }
"295
[e :UE 33 ]
}
"299
[v _chrgCtr `(v ~T0 @X0 1 ef ]
"300
{
[; ;main.c: 299: void chrgCtr()
[; ;main.c: 300: {
[e :U _chrgCtr ]
[f ]
[; ;main.c: 301: if(PORTA & 0x02)
"301
[e $ ! != & -> _PORTA `i -> 2 `i -> 0 `i 56  ]
[; ;main.c: 302: {
"302
{
[; ;main.c: 303: if(chrgFlag == 0)
"303
[e $ ! == -> _chrgFlag `i -> 0 `i 57  ]
[; ;main.c: 304: {
"304
{
[; ;main.c: 305: chrgFlag = 1;
"305
[e = _chrgFlag -> -> 1 `i `uc ]
[; ;main.c: 306: ledStep = 0;
"306
[e = _ledStep -> -> 0 `i `uc ]
[; ;main.c: 307: chrgMaxDuty = 0;
"307
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 308: chrgPwmStop();
"308
[e ( _chrgPwmStop ..  ]
"309
}
[e :U 57 ]
[; ;main.c: 309: }
[; ;main.c: 310: workStep = 0;
"310
[e = _workStep -> -> 0 `i `uc ]
[; ;main.c: 311: lowBatFlag = 0;
"311
[e = _lowBatFlag -> -> 0 `i `uc ]
[; ;main.c: 312: if(prePwStep < pwStep)
"312
[e $ ! < -> _prePwStep `i -> _pwStep `i 58  ]
[; ;main.c: 313: {
"313
{
[; ;main.c: 314: if(++count50s > 2000)
"314
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 2000 `i `ui 59  ]
[; ;main.c: 315: {
"315
{
[; ;main.c: 316: count50s = 0;
"316
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 317: prePwStep++;
"317
[e ++ _prePwStep -> -> 1 `i `uc ]
"318
}
[e :U 59 ]
"319
}
[; ;main.c: 318: }
[; ;main.c: 319: }
[e $U 60  ]
"320
[e :U 58 ]
[; ;main.c: 320: else
[; ;main.c: 321: {
"321
{
[; ;main.c: 322: count50s = 0;
"322
[e = _count50s -> -> 0 `i `ui ]
"323
}
[e :U 60 ]
[; ;main.c: 323: }
[; ;main.c: 324: if(protectFlag)
"324
[e $ ! != -> _protectFlag `i -> -> -> 0 `i `uc `i 61  ]
[; ;main.c: 325: {
"325
{
[; ;main.c: 326: chrgPwmStop();
"326
[e ( _chrgPwmStop ..  ]
[; ;main.c: 327: ledStep = 6;
"327
[e = _ledStep -> -> 6 `i `uc ]
[; ;main.c: 328: if(prePwStep < 99 && protectFlag == 1)
"328
[e $ ! && < -> _prePwStep `i -> 99 `i == -> _protectFlag `i -> 1 `i 62  ]
[; ;main.c: 329: {
"329
{
[; ;main.c: 330: if(++reChrgCount > 250)
"330
[e $ ! > -> =+ _reChrgCount -> -> 1 `i `uc `i -> 250 `i 63  ]
[; ;main.c: 331: {
"331
{
[; ;main.c: 332: reChrgCount = 0;
"332
[e = _reChrgCount -> -> 0 `i `uc ]
[; ;main.c: 333: chrgFullFlag = 0;
"333
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 334: protectFlag = 0;
"334
[e = _protectFlag -> -> 0 `i `uc ]
[; ;main.c: 335: if(prePwStep > 14)
"335
[e $ ! > -> _prePwStep `i -> 14 `i 64  ]
[; ;main.c: 336: {
"336
{
[; ;main.c: 337: lockLedStep = (prePwStep/14) - 1;
"337
[e = _lockLedStep -> - / -> _prePwStep `i -> 14 `i -> 1 `i `uc ]
"338
}
[; ;main.c: 338: }
[e $U 65  ]
"339
[e :U 64 ]
[; ;main.c: 339: else
[; ;main.c: 340: {
"340
{
[; ;main.c: 341: lockLedStep = 0;
"341
[e = _lockLedStep -> -> 0 `i `uc ]
"342
}
[e :U 65 ]
"343
}
[e :U 63 ]
"344
}
[; ;main.c: 342: }
[; ;main.c: 343: }
[; ;main.c: 344: }
[e $U 66  ]
"345
[e :U 62 ]
[; ;main.c: 345: else
[; ;main.c: 346: {
"346
{
[; ;main.c: 347: reChrgCount = 0;
"347
[e = _reChrgCount -> -> 0 `i `uc ]
"348
}
[e :U 66 ]
[; ;main.c: 348: }
[; ;main.c: 349: return;
"349
[e $UE 55  ]
"350
}
[e :U 61 ]
[; ;main.c: 350: }
[; ;main.c: 351: if(batADValue < 1118)
"351
[e $ ! < _batADValue -> -> 1118 `i `ui 67  ]
[; ;main.c: 352: {
"352
{
[; ;main.c: 353: chrgMode = 0;
"353
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 354: chrgMaxAD = 15;
"354
[e = _chrgMaxAD -> -> 15 `i `uc ]
"355
}
[; ;main.c: 355: }
[e $U 68  ]
"356
[e :U 67 ]
[; ;main.c: 356: else if(batADValue < 1530)
[e $ ! < _batADValue -> -> 1530 `i `ui 69  ]
[; ;main.c: 357: {
"357
{
[; ;main.c: 358: chrgMode = 1;
"358
[e = _chrgMode -> -> 1 `i `uc ]
[; ;main.c: 359: chrgMaxAD = 40;
"359
[e = _chrgMaxAD -> -> 40 `i `uc ]
[; ;main.c: 360: lockCount = 0;
"360
[e = _lockCount -> -> 0 `i `uc ]
"361
}
[; ;main.c: 361: }
[e $U 70  ]
"362
[e :U 69 ]
[; ;main.c: 362: else if(count1s == 0)
[e $ ! == -> _count1s `i -> 0 `i 71  ]
[; ;main.c: 363: {
"363
{
[; ;main.c: 364: if(++lockCount > 200)
"364
[e $ ! > -> =+ _lockCount -> -> 1 `i `uc `i -> 200 `i 72  ]
[; ;main.c: 365: {
"365
{
[; ;main.c: 366: lockCount = 0;
"366
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 367: chrgMode = 2;
"367
[e = _chrgMode -> -> 2 `i `uc ]
"368
}
[e :U 72 ]
[; ;main.c: 368: }
[; ;main.c: 370: chrgMaxAD = 40;
"370
[e = _chrgMaxAD -> -> 40 `i `uc ]
"371
}
[e :U 71 ]
"372
[e :U 70 ]
[e :U 68 ]
[; ;main.c: 371: }
[; ;main.c: 372: if(chrgMode == 2 && outADValue < 5)
[e $ ! && == -> _chrgMode `i -> 2 `i < _outADValue -> -> 5 `i `ui 73  ]
[; ;main.c: 373: {
"373
{
[; ;main.c: 374: if(++fullCount >= 200)
"374
[e $ ! >= =+ _fullCount -> -> 1 `i `ui -> -> 200 `i `ui 74  ]
[; ;main.c: 375: {
"375
{
[; ;main.c: 376: fullCount = 0;
"376
[e = _fullCount -> -> 0 `i `ui ]
[; ;main.c: 377: chrgFullFlag = 1;
"377
[e = _chrgFullFlag -> -> 1 `i `uc ]
"378
}
[e :U 74 ]
"379
}
[; ;main.c: 378: }
[; ;main.c: 379: }
[e $U 75  ]
"380
[e :U 73 ]
[; ;main.c: 380: else
[; ;main.c: 381: {
"381
{
[; ;main.c: 382: fullCount = 0;
"382
[e = _fullCount -> -> 0 `i `ui ]
"383
}
[e :U 75 ]
[; ;main.c: 383: }
[; ;main.c: 384: if(chrgFullFlag)
"384
[e $ ! != -> _chrgFullFlag `i -> -> -> 0 `i `uc `i 76  ]
[; ;main.c: 385: {
"385
{
[; ;main.c: 386: lockLedStep = 6;
"386
[e = _lockLedStep -> -> 6 `i `uc ]
[; ;main.c: 387: chrgPwmStop();
"387
[e ( _chrgPwmStop ..  ]
"388
}
[; ;main.c: 388: }
[e $U 77  ]
"389
[e :U 76 ]
[; ;main.c: 389: else
[; ;main.c: 390: {
"390
{
[; ;main.c: 391: if(prePwStep < 15)
"391
[e $ ! < -> _prePwStep `i -> 15 `i 78  ]
[; ;main.c: 392: {
"392
{
[; ;main.c: 393: lockLedStep = 0;
"393
[e = _lockLedStep -> -> 0 `i `uc ]
"394
}
[; ;main.c: 394: }
[e $U 79  ]
"395
[e :U 78 ]
[; ;main.c: 395: else
[; ;main.c: 396: {
"396
{
[; ;main.c: 397: lockLedStep = (prePwStep/14) - 1;
"397
[e = _lockLedStep -> - / -> _prePwStep `i -> 14 `i -> 1 `i `uc ]
"398
}
[e :U 79 ]
[; ;main.c: 398: }
[; ;main.c: 399: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
"399
[e $ ! || > _batADValue -> -> 1545 `i `ui > _outADValue -> + -> _chrgMaxAD `i -> 2 `i `ui 80  ]
[; ;main.c: 400: {
"400
{
[; ;main.c: 401: if(++subTime > chrgWaitTime)
"401
[e $ ! > -> =+ _subTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 81  ]
[; ;main.c: 402: {
"402
{
[; ;main.c: 403: if(chrgMaxDuty > 1)
"403
[e $ ! > -> _chrgMaxDuty `i -> 1 `i 82  ]
[; ;main.c: 404: {
"404
{
[; ;main.c: 405: chrgMaxDuty--;
"405
[e -- _chrgMaxDuty -> -> 1 `i `uc ]
"406
}
[e :U 82 ]
[; ;main.c: 406: }
[; ;main.c: 407: subTime = 0;
"407
[e = _subTime -> -> 0 `i `uc ]
[; ;main.c: 408: chrgWaitTime = 50;
"408
[e = _chrgWaitTime -> -> 50 `i `uc ]
"409
}
[e :U 81 ]
[; ;main.c: 409: }
[; ;main.c: 410: addTime = 0;
"410
[e = _addTime -> -> 0 `i `uc ]
"411
}
[; ;main.c: 411: }
[e $U 83  ]
"412
[e :U 80 ]
[; ;main.c: 412: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
[e $ ! && < _batADValue -> -> 1545 `i `ui < _outADValue -> - -> _chrgMaxAD `i -> 4 `i `ui 84  ]
[; ;main.c: 413: {
"413
{
[; ;main.c: 414: if(++addTime > chrgWaitTime)
"414
[e $ ! > -> =+ _addTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 85  ]
[; ;main.c: 415: {
"415
{
[; ;main.c: 416: addTime = 0;
"416
[e = _addTime -> -> 0 `i `uc ]
[; ;main.c: 417: if(chrgMaxDuty < 75)
"417
[e $ ! < -> _chrgMaxDuty `i -> 75 `i 86  ]
[; ;main.c: 418: {
"418
{
[; ;main.c: 419: chrgMaxDuty++;
"419
[e ++ _chrgMaxDuty -> -> 1 `i `uc ]
"420
}
[e :U 86 ]
"421
}
[e :U 85 ]
[; ;main.c: 420: }
[; ;main.c: 421: }
[; ;main.c: 422: subTime = 0;
"422
[e = _subTime -> -> 0 `i `uc ]
"423
}
[e :U 84 ]
"426
[e :U 83 ]
[; ;main.c: 423: }
[; ;main.c: 426: if((PWMCON0 & 0x01) == 0)
[e $ ! == & -> _PWMCON0 `i -> 1 `i -> 0 `i 87  ]
[; ;main.c: 427: {
"427
{
[; ;main.c: 428: chrgPwmInit();
"428
[e ( _chrgPwmInit ..  ]
"429
}
[e :U 87 ]
[; ;main.c: 429: }
[; ;main.c: 430: PWMD01H = 0X00;
"430
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 431: PWMD0L = chrgMaxDuty;
"431
[e = _PWMD0L _chrgMaxDuty ]
"432
}
[e :U 77 ]
"434
}
[; ;main.c: 432: }
[; ;main.c: 434: }
[e $U 88  ]
"435
[e :U 56 ]
[; ;main.c: 435: else
[; ;main.c: 436: {
"436
{
[; ;main.c: 437: chrgFlag = 0;
"437
[e = _chrgFlag -> -> 0 `i `uc ]
[; ;main.c: 438: chrgFullFlag = 0;
"438
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 439: protectFlag = 0;
"439
[e = _protectFlag -> -> 0 `i `uc ]
[; ;main.c: 440: chrgMode = 0;
"440
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 441: chrgMaxAD = 0;
"441
[e = _chrgMaxAD -> -> 0 `i `uc ]
[; ;main.c: 442: chrgMaxDuty = 0;
"442
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 443: lockCount = 0;
"443
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 444: lockLedStep = 0;
"444
[e = _lockLedStep -> -> 0 `i `uc ]
[; ;main.c: 445: chrgWaitTime = 20;
"445
[e = _chrgWaitTime -> -> 20 `i `uc ]
[; ;main.c: 446: chrgPwmStop();
"446
[e ( _chrgPwmStop ..  ]
[; ;main.c: 447: if(prePwStep > 0 && prePwStep > pwStep)
"447
[e $ ! && > -> _prePwStep `i -> 0 `i > -> _prePwStep `i -> _pwStep `i 89  ]
[; ;main.c: 448: {
"448
{
[; ;main.c: 449: if(++count50s > 2000)
"449
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 2000 `i `ui 90  ]
[; ;main.c: 450: {
"450
{
[; ;main.c: 451: count50s = 0;
"451
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 452: prePwStep--;
"452
[e -- _prePwStep -> -> 1 `i `uc ]
"453
}
[e :U 90 ]
"454
}
[; ;main.c: 453: }
[; ;main.c: 454: }
[e $U 91  ]
"455
[e :U 89 ]
[; ;main.c: 455: else
[; ;main.c: 456: {
"456
{
[; ;main.c: 457: count50s = 0;
"457
[e = _count50s -> -> 0 `i `ui ]
"458
}
[e :U 91 ]
"459
}
[e :U 88 ]
[; ;main.c: 458: }
[; ;main.c: 459: }
[; ;main.c: 460: }
"460
[e :UE 55 ]
}
"464
[v _keyRead `(uc ~T0 @X0 1 ef1`uc ]
"465
{
[; ;main.c: 464: char keyRead(char keyStatus)
[; ;main.c: 465: {
[e :U _keyRead ]
"464
[v _keyStatus `uc ~T0 @X0 1 r1 ]
"465
[f ]
[; ;main.c: 466: if(keyStatus)
"466
[e $ ! != -> _keyStatus `i -> -> -> 0 `i `uc `i 93  ]
[; ;main.c: 467: {
"467
{
[; ;main.c: 468: keyCount++;
"468
[e ++ _keyCount -> -> 1 `i `uc ]
[; ;main.c: 469: if(keyCount >= 100)
"469
[e $ ! >= -> _keyCount `i -> 100 `i 94  ]
[; ;main.c: 470: {
"470
{
[; ;main.c: 471: keyCount = 100;
"471
[e = _keyCount -> -> 100 `i `uc ]
[; ;main.c: 472: if(!longPressFlag)
"472
[e $ ! ! != -> _longPressFlag `i -> -> -> 0 `i `uc `i 95  ]
[; ;main.c: 473: {
"473
{
[; ;main.c: 474: longPressFlag = 1;
"474
[e = _longPressFlag -> -> 1 `i `uc ]
[; ;main.c: 475: return 2;
"475
[e ) -> -> 2 `i `uc ]
[e $UE 92  ]
"476
}
[e :U 95 ]
"477
}
[e :U 94 ]
"478
}
[; ;main.c: 476: }
[; ;main.c: 477: }
[; ;main.c: 478: }
[e $U 96  ]
"479
[e :U 93 ]
[; ;main.c: 479: else
[; ;main.c: 480: {
"480
{
[; ;main.c: 481: if(keyCount >= 100)
"481
[e $ ! >= -> _keyCount `i -> 100 `i 97  ]
[; ;main.c: 482: {
"482
{
[; ;main.c: 483: keyCount = 0;
"483
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 484: longPressFlag = 0;
"484
[e = _longPressFlag -> -> 0 `i `uc ]
[; ;main.c: 485: return 0;
"485
[e ) -> -> 0 `i `uc ]
[e $UE 92  ]
"486
}
[; ;main.c: 486: }
[e $U 98  ]
"487
[e :U 97 ]
[; ;main.c: 487: else if(keyCount >= 6)
[e $ ! >= -> _keyCount `i -> 6 `i 99  ]
[; ;main.c: 488: {
"488
{
[; ;main.c: 489: keyCount = 0;
"489
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 490: return 1;
"490
[e ) -> -> 1 `i `uc ]
[e $UE 92  ]
"491
}
[e :U 99 ]
"492
[e :U 98 ]
[; ;main.c: 491: }
[; ;main.c: 492: keyCount = 0;
[e = _keyCount -> -> 0 `i `uc ]
"493
}
[e :U 96 ]
[; ;main.c: 493: }
[; ;main.c: 494: return 0;
"494
[e ) -> -> 0 `i `uc ]
[e $UE 92  ]
[; ;main.c: 495: }
"495
[e :UE 92 ]
}
"497
[v _keyCtr `(v ~T0 @X0 1 ef ]
"498
{
[; ;main.c: 497: void keyCtr()
[; ;main.c: 498: {
[e :U _keyCtr ]
[f ]
"499
[v _kclick `uc ~T0 @X0 1 a ]
[; ;main.c: 499: char kclick = keyRead(0x04 & (~PORTB));
[e = _kclick ( _keyRead (1 -> & -> 4 `i ~ -> _PORTB `i `uc ]
[; ;main.c: 500: if(kclick == 1)
"500
[e $ ! == -> _kclick `i -> 1 `i 101  ]
[; ;main.c: 501: {
"501
{
[; ;main.c: 502: if(workStep > 0)
"502
[e $ ! > -> _workStep `i -> 0 `i 102  ]
[; ;main.c: 503: {
"503
{
[; ;main.c: 504: if(++workStep > 6)
"504
[e $ ! > -> =+ _workStep -> -> 1 `i `uc `i -> 6 `i 103  ]
[; ;main.c: 505: {
"505
{
[; ;main.c: 506: workStep = 1;
"506
[e = _workStep -> -> 1 `i `uc ]
"507
}
[e :U 103 ]
"508
}
[; ;main.c: 507: }
[; ;main.c: 508: }
[e $U 104  ]
"509
[e :U 102 ]
[; ;main.c: 509: else if(showBatTime > 0)
[e $ ! > -> _showBatTime `i -> 0 `i 105  ]
[; ;main.c: 510: {
"510
{
[; ;main.c: 511: showBatTime = 0;
"511
[e = _showBatTime -> -> 0 `i `uc ]
"512
}
[; ;main.c: 512: }
[e $U 106  ]
"513
[e :U 105 ]
[; ;main.c: 513: else
[; ;main.c: 514: {
"514
{
[; ;main.c: 515: showBatTime = 200;
"515
[e = _showBatTime -> -> 200 `i `uc ]
[; ;main.c: 516: count1s = 0;
"516
[e = _count1s -> -> 0 `i `uc ]
"517
}
[e :U 106 ]
[e :U 104 ]
"518
}
[; ;main.c: 517: }
[; ;main.c: 518: }
[e $U 107  ]
"519
[e :U 101 ]
[; ;main.c: 519: else if(kclick == 2)
[e $ ! == -> _kclick `i -> 2 `i 108  ]
[; ;main.c: 520: {
"520
{
[; ;main.c: 521: if(workStep > 0)
"521
[e $ ! > -> _workStep `i -> 0 `i 109  ]
[; ;main.c: 522: {
"522
{
[; ;main.c: 523: workStep = 0;
"523
[e = _workStep -> -> 0 `i `uc ]
"524
}
[; ;main.c: 524: }
[e $U 110  ]
"525
[e :U 109 ]
[; ;main.c: 525: else
[; ;main.c: 526: {
"526
{
[; ;main.c: 527: workStep = 1;
"527
[e = _workStep -> -> 1 `i `uc ]
[; ;main.c: 528: startTime = 30;
"528
[e = _startTime -> -> 30 `i `uc ]
[; ;main.c: 529: showBatTime = 0;
"529
[e = _showBatTime -> -> 0 `i `uc ]
"530
}
[e :U 110 ]
"531
}
[e :U 108 ]
"532
[e :U 107 ]
[; ;main.c: 530: }
[; ;main.c: 531: }
[; ;main.c: 532: }
[e :UE 100 ]
}
"534
[v _workCtr `(v ~T0 @X0 1 ef ]
"535
{
[; ;main.c: 534: void workCtr()
[; ;main.c: 535: {
[e :U _workCtr ]
[f ]
[; ;main.c: 537: if(startTime > 0)
"537
[e $ ! > -> _startTime `i -> 0 `i 112  ]
[; ;main.c: 538: {
"538
{
[; ;main.c: 539: startTime--;
"539
[e -- _startTime -> -> 1 `i `uc ]
"540
}
[e :U 112 ]
[; ;main.c: 540: }
[; ;main.c: 541: if(workStep > 0)
"541
[e $ ! > -> _workStep `i -> 0 `i 113  ]
[; ;main.c: 542: {
"542
{
[; ;main.c: 543: if((PWMCON0 & 0x02) == 0)
"543
[e $ ! == & -> _PWMCON0 `i -> 2 `i -> 0 `i 114  ]
[; ;main.c: 544: {
"544
{
[; ;main.c: 545: pwmInit();
"545
[e ( _pwmInit ..  ]
"546
}
[e :U 114 ]
[; ;main.c: 546: }
[; ;main.c: 547: maxDuty = 43 + (workStep*2);
"547
[e = _maxDuty -> + -> 43 `i * -> _workStep `i -> 2 `i `uc ]
[; ;main.c: 548: if(overCount >= 5)
"548
[e $ ! >= -> _overCount `i -> 5 `i 115  ]
[; ;main.c: 549: {
"549
{
[; ;main.c: 550: if(++count5s > 500)
"550
[e $ ! > =+ _count5s -> -> 1 `i `ui -> -> 500 `i `ui 116  ]
[; ;main.c: 551: {
"551
{
[; ;main.c: 552: count5s = 0;
"552
[e = _count5s -> -> 0 `i `ui ]
[; ;main.c: 553: overWorkTime = 180;
"553
[e = _overWorkTime -> -> 180 `i `uc ]
[; ;main.c: 554: preLedStep = workStep;
"554
[e = _preLedStep _workStep ]
[; ;main.c: 555: workStep = 0;
"555
[e = _workStep -> -> 0 `i `uc ]
"557
}
[e :U 116 ]
"558
}
[; ;main.c: 557: }
[; ;main.c: 558: }
[e $U 117  ]
"559
[e :U 115 ]
[; ;main.c: 559: else
[; ;main.c: 560: {
"560
{
[; ;main.c: 561: count5s = 0;
"561
[e = _count5s -> -> 0 `i `ui ]
"562
}
[e :U 117 ]
[; ;main.c: 562: }
[; ;main.c: 563: if(count1s == 0 && ++count900s >= 900)
"563
[e $ ! && == -> _count1s `i -> 0 `i >= =+ _count900s -> -> 1 `i `ui -> -> 900 `i `ui 118  ]
[; ;main.c: 564: {
"564
{
[; ;main.c: 565: workStep = 0;
"565
[e = _workStep -> -> 0 `i `uc ]
"566
}
[e :U 118 ]
"567
}
[; ;main.c: 566: }
[; ;main.c: 567: }
[e $U 119  ]
"568
[e :U 113 ]
[; ;main.c: 568: else
[; ;main.c: 569: {
"569
{
[; ;main.c: 570: pwmStop();
"570
[e ( _pwmStop ..  ]
[; ;main.c: 571: count900s = 0;
"571
[e = _count900s -> -> 0 `i `ui ]
"572
}
[e :U 119 ]
[; ;main.c: 572: }
[; ;main.c: 573: }
"573
[e :UE 111 ]
}
"575
[v _checkOutA `(v ~T0 @X0 1 ef ]
"576
{
[; ;main.c: 575: void checkOutA()
[; ;main.c: 576: {
[e :U _checkOutA ]
[f ]
[; ;main.c: 577: if(chrgFlag)
"577
[e $ ! != -> _chrgFlag `i -> -> -> 0 `i `uc `i 121  ]
[; ;main.c: 578: {
"578
{
[; ;main.c: 579: test_adc = ADC_Sample(4, 5);
"579
[e = _test_adc ( _ADC_Sample (2 , -> -> 4 `i `uc -> -> 5 `i `uc ]
"580
}
[; ;main.c: 580: }
[e $U 122  ]
"581
[e :U 121 ]
[; ;main.c: 581: else
[; ;main.c: 582: {
"582
{
[; ;main.c: 583: test_adc = ADC_Sample(0, 5);
"583
[e = _test_adc ( _ADC_Sample (2 , -> -> 0 `i `uc -> -> 5 `i `uc ]
"584
}
[e :U 122 ]
[; ;main.c: 584: }
[; ;main.c: 585: if (0xA5 == test_adc)
"585
[e $ ! == -> 165 `i -> _test_adc `i 123  ]
[; ;main.c: 586: {
"586
{
[; ;main.c: 587: if(chrgFlag && adresult > 210)
"587
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 210 `i `ui 124  ]
[; ;main.c: 588: {
"588
{
[; ;main.c: 589: if(++overChrgTime > 10)
"589
[e $ ! > -> =+ _overChrgTime -> -> 1 `i `uc `i -> 10 `i 125  ]
[; ;main.c: 590: {
"590
{
[; ;main.c: 591: overChrgTime = 0;
"591
[e = _overChrgTime -> -> 0 `i `uc ]
[; ;main.c: 592: protectFlag = 2;
"592
[e = _protectFlag -> -> 2 `i `uc ]
"593
}
[e :U 125 ]
"595
}
[; ;main.c: 593: }
[; ;main.c: 595: }
[e $U 126  ]
"596
[e :U 124 ]
[; ;main.c: 596: else
[; ;main.c: 597: {
"597
{
[; ;main.c: 598: overChrgTime = 0;
"598
[e = _overChrgTime -> -> 0 `i `uc ]
"599
}
[e :U 126 ]
[; ;main.c: 599: }
[; ;main.c: 600: outADValue = adresult;
"600
[e = _outADValue _adresult ]
[; ;main.c: 602: if(workStep && (outADValue > 220))
"602
[e $ ! && != -> _workStep `i -> -> -> 0 `i `uc `i > _outADValue -> -> 220 `i `ui 127  ]
[; ;main.c: 603: {
"603
{
[; ;main.c: 604: if(++workOverOutTime > 50)
"604
[e $ ! > -> =+ _workOverOutTime -> -> 1 `i `uc `i -> 50 `i 128  ]
[; ;main.c: 605: {
"605
{
[; ;main.c: 606: workOverOutTime = 0;
"606
[e = _workOverOutTime -> -> 0 `i `uc ]
[; ;main.c: 607: workStep = 0;
"607
[e = _workStep -> -> 0 `i `uc ]
"608
}
[e :U 128 ]
"609
}
[; ;main.c: 608: }
[; ;main.c: 609: }
[e $U 129  ]
"610
[e :U 127 ]
[; ;main.c: 610: else
[; ;main.c: 611: {
"611
{
[; ;main.c: 612: workOverOutTime = 0;
"612
[e = _workOverOutTime -> -> 0 `i `uc ]
"613
}
[e :U 129 ]
"614
[v _maxtempV `uc ~T0 @X0 1 a ]
[; ;main.c: 613: }
[; ;main.c: 614: unsigned char maxtempV = 40;
[e = _maxtempV -> -> 40 `i `uc ]
[; ;main.c: 615: if(workStep < 6 && outADValue > maxtempV)
"615
[e $ ! && < -> _workStep `i -> 6 `i > _outADValue -> _maxtempV `ui 130  ]
[; ;main.c: 616: {
"616
{
[; ;main.c: 617: if(++overCount > 5)
"617
[e $ ! > -> =+ _overCount -> -> 1 `i `uc `i -> 5 `i 131  ]
[; ;main.c: 618: {
"618
{
[; ;main.c: 619: overCount = 5;
"619
[e = _overCount -> -> 5 `i `uc ]
"620
}
[e :U 131 ]
"621
}
[; ;main.c: 620: }
[; ;main.c: 621: }
[e $U 132  ]
"622
[e :U 130 ]
[; ;main.c: 622: else if(outADValue > (maxtempV+3))
[e $ ! > _outADValue -> + -> _maxtempV `i -> 3 `i `ui 133  ]
[; ;main.c: 623: {
"623
{
[; ;main.c: 624: if(++overCount > 5)
"624
[e $ ! > -> =+ _overCount -> -> 1 `i `uc `i -> 5 `i 134  ]
[; ;main.c: 625: {
"625
{
[; ;main.c: 626: overCount = 5;
"626
[e = _overCount -> -> 5 `i `uc ]
"627
}
[e :U 134 ]
"628
}
[; ;main.c: 627: }
[; ;main.c: 628: }
[e $U 135  ]
"629
[e :U 133 ]
[; ;main.c: 629: else
[; ;main.c: 630: {
"630
{
"631
[v _maxAout `uc ~T0 @X0 1 a ]
[; ;main.c: 631: unsigned char maxAout = 11;
[e = _maxAout -> -> 11 `i `uc ]
[; ;main.c: 632: if(workStep == 1)
"632
[e $ ! == -> _workStep `i -> 1 `i 136  ]
[; ;main.c: 633: {
"633
{
[; ;main.c: 634: maxAout = maxAout + 5;
"634
[e = _maxAout -> + -> _maxAout `i -> 5 `i `uc ]
"635
}
[; ;main.c: 635: }
[e $U 137  ]
"636
[e :U 136 ]
[; ;main.c: 636: else if(workStep == 2)
[e $ ! == -> _workStep `i -> 2 `i 138  ]
[; ;main.c: 637: {
"637
{
[; ;main.c: 638: maxAout = maxAout + 6;
"638
[e = _maxAout -> + -> _maxAout `i -> 6 `i `uc ]
"639
}
[; ;main.c: 639: }
[e $U 139  ]
"640
[e :U 138 ]
[; ;main.c: 640: else if(workStep == 3)
[e $ ! == -> _workStep `i -> 3 `i 140  ]
[; ;main.c: 641: {
"641
{
[; ;main.c: 642: maxAout = maxAout + 7;
"642
[e = _maxAout -> + -> _maxAout `i -> 7 `i `uc ]
"643
}
[; ;main.c: 643: }
[e $U 141  ]
"644
[e :U 140 ]
[; ;main.c: 644: else if(workStep == 4)
[e $ ! == -> _workStep `i -> 4 `i 142  ]
[; ;main.c: 645: {
"645
{
[; ;main.c: 646: maxAout = maxAout + 8;
"646
[e = _maxAout -> + -> _maxAout `i -> 8 `i `uc ]
"647
}
[; ;main.c: 647: }
[e $U 143  ]
"648
[e :U 142 ]
[; ;main.c: 648: else if(workStep == 5)
[e $ ! == -> _workStep `i -> 5 `i 144  ]
[; ;main.c: 649: {
"649
{
[; ;main.c: 650: maxAout = maxAout + 9;
"650
[e = _maxAout -> + -> _maxAout `i -> 9 `i `uc ]
"651
}
[; ;main.c: 651: }
[e $U 145  ]
"652
[e :U 144 ]
[; ;main.c: 652: else if(workStep == 6)
[e $ ! == -> _workStep `i -> 6 `i 146  ]
[; ;main.c: 653: {
"653
{
[; ;main.c: 654: maxAout = maxAout + 10;
"654
[e = _maxAout -> + -> _maxAout `i -> 10 `i `uc ]
"655
}
[e :U 146 ]
"656
[e :U 145 ]
[e :U 143 ]
[e :U 141 ]
[e :U 139 ]
[e :U 137 ]
[; ;main.c: 655: }
[; ;main.c: 656: if(overCount > 0)
[e $ ! > -> _overCount `i -> 0 `i 147  ]
[; ;main.c: 657: {
"657
{
[; ;main.c: 658: overCount--;
"658
[e -- _overCount -> -> 1 `i `uc ]
"659
}
[e :U 147 ]
[; ;main.c: 659: }
[; ;main.c: 660: if(outADValue > maxAout)
"660
[e $ ! > _outADValue -> _maxAout `ui 148  ]
[; ;main.c: 661: {
"661
{
[; ;main.c: 662: if(++addPowerCount > 3)
"662
[e $ ! > -> =+ _addPowerCount -> -> 1 `i `uc `i -> 3 `i 149  ]
[; ;main.c: 663: {
"663
{
[; ;main.c: 664: addPowerCount = 3;
"664
[e = _addPowerCount -> -> 3 `i `uc ]
[; ;main.c: 665: if(startTime == 0)
"665
[e $ ! == -> _startTime `i -> 0 `i 150  ]
[; ;main.c: 666: {
"666
{
[; ;main.c: 667: tempDuty = 72 + (workStep*4);
"667
[e = _tempDuty -> + -> 72 `i * -> _workStep `i -> 4 `i `uc ]
"669
}
[; ;main.c: 669: }
[e $U 151  ]
"670
[e :U 150 ]
[; ;main.c: 670: else
[; ;main.c: 671: {
"671
{
[; ;main.c: 672: tempDuty = maxDuty;
"672
[e = _tempDuty _maxDuty ]
"673
}
[e :U 151 ]
"674
}
[e :U 149 ]
"676
}
[; ;main.c: 673: }
[; ;main.c: 674: }
[; ;main.c: 676: }
[e $U 152  ]
"677
[e :U 148 ]
[; ;main.c: 677: else
[; ;main.c: 678: {
"678
{
[; ;main.c: 679: addPowerCount = 0;
"679
[e = _addPowerCount -> -> 0 `i `uc ]
[; ;main.c: 680: if(tempDuty > maxDuty)
"680
[e $ ! > -> _tempDuty `i -> _maxDuty `i 153  ]
[; ;main.c: 681: {
"681
{
[; ;main.c: 682: tempDuty--;
"682
[e -- _tempDuty -> -> 1 `i `uc ]
"683
}
[; ;main.c: 683: }
[e $U 154  ]
"684
[e :U 153 ]
[; ;main.c: 684: else
[; ;main.c: 685: {
"685
{
[; ;main.c: 686: tempDuty = maxDuty;
"686
[e = _tempDuty _maxDuty ]
"687
}
[e :U 154 ]
"689
}
[e :U 152 ]
"691
}
[e :U 135 ]
[e :U 132 ]
[; ;main.c: 687: }
[; ;main.c: 689: }
[; ;main.c: 691: }
[; ;main.c: 692: PWMD01H = 0X00;
"692
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 693: PWMD1L = tempDuty;
"693
[e = _PWMD1L _tempDuty ]
"694
}
[; ;main.c: 694: }
[e $U 155  ]
"695
[e :U 123 ]
[; ;main.c: 695: else
[; ;main.c: 696: {
"696
{
[; ;main.c: 697: ADCON0 = 0;
"697
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 698: ADCON1 = 0;
"698
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 699: _delay((unsigned long)((100)*(16000000/4000000.0)));
"699
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"700
}
[e :U 155 ]
[; ;main.c: 700: }
[; ;main.c: 701: }
"701
[e :UE 120 ]
}
"703
[v _checkBatAD `(v ~T0 @X0 1 ef ]
"704
{
[; ;main.c: 703: void checkBatAD()
[; ;main.c: 704: {
[e :U _checkBatAD ]
[f ]
[; ;main.c: 705: test_adc = ADC_Sample(2, 5);
"705
[e = _test_adc ( _ADC_Sample (2 , -> -> 2 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 706: if (0xA5 == test_adc)
"706
[e $ ! == -> 165 `i -> _test_adc `i 157  ]
[; ;main.c: 707: {
"707
{
[; ;main.c: 708: batADValue = adresult;
"708
[e = _batADValue _adresult ]
[; ;main.c: 709: if(batADValue < 1117)
"709
[e $ ! < _batADValue -> -> 1117 `i `ui 158  ]
[; ;main.c: 710: {
"710
{
[; ;main.c: 711: pwStep = 0;
"711
[e = _pwStep -> -> 0 `i `uc ]
[; ;main.c: 712: if(++count8s > 800)
"712
[e $ ! > =+ _count8s -> -> 1 `i `ui -> -> 800 `i `ui 159  ]
[; ;main.c: 713: {
"713
{
[; ;main.c: 714: count8s = 0;
"714
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 715: lowBatFlag = 1;
"715
[e = _lowBatFlag -> -> 1 `i `uc ]
[; ;main.c: 716: if(workStep > 0)
"716
[e $ ! > -> _workStep `i -> 0 `i 160  ]
[; ;main.c: 717: {
"717
{
[; ;main.c: 718: overWorkTime = 180;
"718
[e = _overWorkTime -> -> 180 `i `uc ]
[; ;main.c: 719: preLedStep = workStep;
"719
[e = _preLedStep _workStep ]
"720
}
[e :U 160 ]
[; ;main.c: 720: }
[; ;main.c: 721: prePwStep = 0;
"721
[e = _prePwStep -> -> 0 `i `uc ]
[; ;main.c: 722: workStep = 0;
"722
[e = _workStep -> -> 0 `i `uc ]
"723
}
[e :U 159 ]
"724
}
[; ;main.c: 723: }
[; ;main.c: 724: }
[e $U 161  ]
"725
[e :U 158 ]
[; ;main.c: 725: else
[; ;main.c: 726: {
"726
{
[; ;main.c: 727: count8s = 0;
"727
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 728: if(batADValue >= 1340)
"728
[e $ ! >= _batADValue -> -> 1340 `i `ui 162  ]
[; ;main.c: 729: {
"729
{
[; ;main.c: 730: pwStep = ((batADValue - 1340) /2) + 13;
"730
[e = _pwStep -> + / - _batADValue -> -> 1340 `i `ui -> -> 2 `i `ui -> -> 13 `i `ui `uc ]
"731
}
[; ;main.c: 731: }
[e $U 163  ]
"732
[e :U 162 ]
[; ;main.c: 732: else
[; ;main.c: 733: {
"733
{
[; ;main.c: 734: pwStep = (batADValue - 1117) / 16;
"734
[e = _pwStep -> / - _batADValue -> -> 1117 `i `ui -> -> 16 `i `ui `uc ]
"735
}
[e :U 163 ]
[; ;main.c: 735: }
[; ;main.c: 736: if(pwStep > 99)
"736
[e $ ! > -> _pwStep `i -> 99 `i 164  ]
[; ;main.c: 737: {
"737
{
[; ;main.c: 738: pwStep = 99;
"738
[e = _pwStep -> -> 99 `i `uc ]
"739
}
[e :U 164 ]
"740
}
[e :U 161 ]
[; ;main.c: 739: }
[; ;main.c: 740: }
[; ;main.c: 741: if(chrgFlag && batADValue > 1861)
"741
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _batADValue -> -> 1861 `i `ui 165  ]
[; ;main.c: 742: {
"742
{
[; ;main.c: 743: protectFlag = 1;
"743
[e = _protectFlag -> -> 1 `i `uc ]
"744
}
[e :U 165 ]
"745
}
[; ;main.c: 744: }
[; ;main.c: 745: }
[e $U 166  ]
"746
[e :U 157 ]
[; ;main.c: 746: else
[; ;main.c: 747: {
"747
{
[; ;main.c: 748: ADCON0 = 0;
"748
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 749: ADCON1 = 0;
"749
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 750: _delay((unsigned long)((100)*(16000000/4000000.0)));
"750
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"751
}
[e :U 166 ]
[; ;main.c: 751: }
[; ;main.c: 752: test_adc = ADC_Sample(3, 5);
"752
[e = _test_adc ( _ADC_Sample (2 , -> -> 3 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 753: if (0xA5 == test_adc)
"753
[e $ ! == -> 165 `i -> _test_adc `i 167  ]
[; ;main.c: 754: {
"754
{
[; ;main.c: 755: if(chrgFlag && adresult > 100)
"755
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 100 `i `ui 168  ]
[; ;main.c: 756: {
"756
{
[; ;main.c: 758: if(adresult > 810 || (batADValue - adresult) > 810)
"758
[e $ ! || > _adresult -> -> 810 `i `ui > - _batADValue _adresult -> -> 810 `i `ui 169  ]
[; ;main.c: 759: {
"759
{
[; ;main.c: 761: if(++countHalfFull > 250)
"761
[e $ ! > -> =+ _countHalfFull -> -> 1 `i `uc `i -> 250 `i 170  ]
[; ;main.c: 762: {
"762
{
[; ;main.c: 763: countHalfFull = 0;
"763
[e = _countHalfFull -> -> 0 `i `uc ]
[; ;main.c: 764: protectFlag = 2;
"764
[e = _protectFlag -> -> 2 `i `uc ]
"765
}
[e :U 170 ]
"766
}
[; ;main.c: 765: }
[; ;main.c: 766: }
[e $U 171  ]
"767
[e :U 169 ]
[; ;main.c: 767: else
[; ;main.c: 768: {
"768
{
[; ;main.c: 769: countHalfFull = 0;
"769
[e = _countHalfFull -> -> 0 `i `uc ]
"770
}
[e :U 171 ]
"771
}
[e :U 168 ]
"772
}
[; ;main.c: 770: }
[; ;main.c: 771: }
[; ;main.c: 772: }
[e $U 172  ]
"773
[e :U 167 ]
[; ;main.c: 773: else
[; ;main.c: 774: {
"774
{
[; ;main.c: 775: ADCON0 = 0;
"775
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 776: ADCON1 = 0;
"776
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 777: _delay((unsigned long)((100)*(16000000/4000000.0)));
"777
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"778
}
[e :U 172 ]
[; ;main.c: 778: }
[; ;main.c: 779: }
"779
[e :UE 156 ]
}
"790
[v _Init_System `(v ~T0 @X0 1 ef ]
"791
{
[; ;main.c: 790: void Init_System()
[; ;main.c: 791: {
[e :U _Init_System ]
[f ]
[; ;main.c: 792: asm("nop");
"792
[; <" nop ;# ">
[; ;main.c: 793: asm("clrwdt");
"793
[; <" clrwdt ;# ">
[; ;main.c: 794: OPTION_REG = 0;
"794
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 795: asm("clrwdt");
"795
[; <" clrwdt ;# ">
[; ;main.c: 796: OSCCON = 0X72;
"796
[e = _OSCCON -> -> 114 `i `uc ]
[; ;main.c: 798: WPUA = 0B00000000;
"798
[e = _WPUA -> -> 0 `i `uc ]
[; ;main.c: 799: WPDA = 0x02;
"799
[e = _WPDA -> -> 2 `i `uc ]
[; ;main.c: 800: WPUB = 0B00000100;
"800
[e = _WPUB -> -> 4 `i `uc ]
[; ;main.c: 802: TRISA = 0x1F;
"802
[e = _TRISA -> -> 31 `i `uc ]
[; ;main.c: 803: TRISB = 0B00000100;
"803
[e = _TRISB -> -> 4 `i `uc ]
[; ;main.c: 805: PORTA = 0X00;
"805
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 806: PORTB = 0X00;
"806
[e = _PORTB -> -> 0 `i `uc ]
[; ;main.c: 810: PR2 = 249;
"810
[e = _PR2 -> -> 249 `i `uc ]
[; ;main.c: 811: TMR2IF = 0;
"811
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 812: TMR2IE = 1;
"812
[e = _TMR2IE -> -> 1 `i `b ]
[; ;main.c: 814: T2CON = 0B00000100;
"814
[e = _T2CON -> -> 4 `i `uc ]
[; ;main.c: 815: INTCON = 0XC0;
"815
[e = _INTCON -> -> 192 `i `uc ]
[; ;main.c: 816: }
"816
[e :UE 173 ]
}
"827
[v _AD_Init `(v ~T0 @X0 1 ef ]
"828
{
[; ;main.c: 827: void AD_Init()
[; ;main.c: 828: {
[e :U _AD_Init ]
[f ]
[; ;main.c: 860: ADCON0 = 0X41;
"860
[e = _ADCON0 -> -> 65 `i `uc ]
[; ;main.c: 877: ADCON1 = 0;
"877
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 878: ANSEL0 = 0X1D;
"878
[e = _ANSEL0 -> -> 29 `i `uc ]
[; ;main.c: 879: }
"879
[e :UE 174 ]
}
"882
[v _chrgPwmInit `(v ~T0 @X0 1 ef ]
"883
{
[; ;main.c: 882: void chrgPwmInit()
[; ;main.c: 883: {
[e :U _chrgPwmInit ]
[f ]
[; ;main.c: 884: PWMCON1 = 0B00000000;
"884
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 886: PWMTH = 0X00;
"886
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 887: PWMTL = 100;
"887
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 891: PWMD01H = 0;
"891
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 892: PWMD0L = 1;
"892
[e = _PWMD0L -> -> 1 `i `uc ]
[; ;main.c: 893: PWM01DT = 0X00;
"893
[e = _PWM01DT -> -> 0 `i `uc ]
[; ;main.c: 895: PWMCON0 = 0X01;
"895
[e = _PWMCON0 -> -> 1 `i `uc ]
[; ;main.c: 896: PWMCON2 =0X00;
"896
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 897: }
"897
[e :UE 175 ]
}
"899
[v _chrgPwmStop `(v ~T0 @X0 1 ef ]
"900
{
[; ;main.c: 899: void chrgPwmStop()
[; ;main.c: 900: {
[e :U _chrgPwmStop ]
[f ]
[; ;main.c: 901: PWMCON0 &= 0xFE;
"901
[e =& _PWMCON0 -> -> 254 `i `uc ]
[; ;main.c: 902: RB0 = 0;
"902
[e = _RB0 -> -> 0 `i `b ]
[; ;main.c: 903: }
"903
[e :UE 176 ]
}
"905
[v _pwmInit `(v ~T0 @X0 1 ef ]
"906
{
[; ;main.c: 905: void pwmInit()
[; ;main.c: 906: {
[e :U _pwmInit ]
[f ]
[; ;main.c: 907: PWMCON1 = 0B00000000;
"907
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 908: PWMTH = 0X00;
"908
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 909: PWMTL = 100;
"909
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 912: PWMD01H = 0;
"912
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 913: PWMD1L = 50;
"913
[e = _PWMD1L -> -> 50 `i `uc ]
[; ;main.c: 914: PWM01DT = 0X00;
"914
[e = _PWM01DT -> -> 0 `i `uc ]
[; ;main.c: 916: PWMCON0 = 0X62;
"916
[e = _PWMCON0 -> -> 98 `i `uc ]
[; ;main.c: 917: PWMCON2 =0X00;
"917
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 918: }
"918
[e :UE 177 ]
}
"920
[v _pwmStop `(v ~T0 @X0 1 ef ]
"921
{
[; ;main.c: 920: void pwmStop()
[; ;main.c: 921: {
[e :U _pwmStop ]
[f ]
[; ;main.c: 922: PWMCON0 &= 0XFD;
"922
[e =& _PWMCON0 -> -> 253 `i `uc ]
[; ;main.c: 923: RB1 = 0;
"923
[e = _RB1 -> -> 0 `i `b ]
[; ;main.c: 924: }
"924
[e :UE 178 ]
}
"934
[v _Sleep_Mode `(v ~T0 @X0 1 ef ]
"935
{
[; ;main.c: 934: void Sleep_Mode()
[; ;main.c: 935: {
[e :U _Sleep_Mode ]
[f ]
[; ;main.c: 936: INTCON = 0;
"936
[e = _INTCON -> -> 0 `i `uc ]
[; ;main.c: 938: OPTION_REG = 0;
"938
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 940: TRISA = 0x1F;
"940
[e = _TRISA -> -> 31 `i `uc ]
[; ;main.c: 941: WPUA = 0B00000000;
"941
[e = _WPUA -> -> 0 `i `uc ]
[; ;main.c: 942: PORTA = 0x00;
"942
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 943: TRISB = 0B00000100;
"943
[e = _TRISB -> -> 4 `i `uc ]
[; ;main.c: 944: PORTB = 0B00000000;
"944
[e = _PORTB -> -> 0 `i `uc ]
[; ;main.c: 945: WPUB = 0B00000100;
"945
[e = _WPUB -> -> 4 `i `uc ]
[; ;main.c: 947: ADCON0 = 0;
"947
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 948: ADCON1 = 0;
"948
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 950: PWMCON0 = 0;
"950
[e = _PWMCON0 -> -> 0 `i `uc ]
[; ;main.c: 952: OSCCON = 0X70;
"952
[e = _OSCCON -> -> 112 `i `uc ]
[; ;main.c: 954: IOCA = 0B00000010;
"954
[e = _IOCA -> -> 2 `i `uc ]
[; ;main.c: 955: IOCB = 0B00000100;
"955
[e = _IOCB -> -> 4 `i `uc ]
[; ;main.c: 957: RAIE = 1;
"957
[e = _RAIE -> -> 1 `i `b ]
[; ;main.c: 958: PEIE = 1;
"958
[e = _PEIE -> -> 1 `i `b ]
[; ;main.c: 959: RBIE = 1;
"959
[e = _RBIE -> -> 1 `i `b ]
[; ;main.c: 960: GIE = 0;
"960
[e = _GIE -> -> 0 `i `b ]
[; ;main.c: 962: PIE1 &= 0X08;
"962
[e =& _PIE1 -> -> 8 `i `uc ]
[; ;main.c: 963: PIR1 = 0;
"963
[e = _PIR1 -> -> 0 `i `uc ]
[; ;main.c: 964: INTCON &= 0XC8;
"964
[e =& _INTCON -> -> 200 `i `uc ]
[; ;main.c: 966: PORTA;
"966
[e _PORTA ]
[; ;main.c: 967: RAIF = 0;
"967
[e = _RAIF -> -> 0 `i `b ]
[; ;main.c: 968: PORTB;
"968
[e _PORTB ]
[; ;main.c: 969: RBIF = 0;
"969
[e = _RBIF -> -> 0 `i `b ]
[; ;main.c: 970: asm("clrwdt");
"970
[; <" clrwdt ;# ">
[; ;main.c: 972: asm("sleep");
"972
[; <" sleep ;# ">
[; ;main.c: 974: asm("nop");
"974
[; <" nop ;# ">
[; ;main.c: 975: asm("clrwdt");
"975
[; <" clrwdt ;# ">
[; ;main.c: 976: asm("nop");
"976
[; <" nop ;# ">
[; ;main.c: 977: asm("nop");
"977
[; <" nop ;# ">
[; ;main.c: 978: asm("nop");
"978
[; <" nop ;# ">
[; ;main.c: 979: asm("nop");
"979
[; <" nop ;# ">
[; ;main.c: 980: asm("nop");
"980
[; <" nop ;# ">
[; ;main.c: 981: if(RAIF) RAIF = 0;
"981
[e $ ! _RAIF 180  ]
[e = _RAIF -> -> 0 `i `b ]
[e :U 180 ]
[; ;main.c: 982: if(RBIF) RBIF = 0;
"982
[e $ ! _RBIF 181  ]
[e = _RBIF -> -> 0 `i `b ]
[e :U 181 ]
[; ;main.c: 983: if(TMR2IF) TMR2IF = 0;
"983
[e $ ! _TMR2IF 182  ]
[e = _TMR2IF -> -> 0 `i `b ]
[e :U 182 ]
[; ;main.c: 984: IOCA = 0B00000000;
"984
[e = _IOCA -> -> 0 `i `uc ]
[; ;main.c: 985: IOCB = 0B00000000;
"985
[e = _IOCB -> -> 0 `i `uc ]
[; ;main.c: 986: Init_System();
"986
[e ( _Init_System ..  ]
[; ;main.c: 987: AD_Init();
"987
[e ( _AD_Init ..  ]
[; ;main.c: 988: }
"988
[e :UE 179 ]
}
"1010
[v _ADC_Sample `(uc ~T0 @X0 1 ef2`uc`uc ]
"1011
{
[; ;main.c: 1010: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo)
[; ;main.c: 1011: {
[e :U _ADC_Sample ]
"1010
[v _adch `uc ~T0 @X0 1 r1 ]
[v _adldo `uc ~T0 @X0 1 r2 ]
"1011
[f ]
"1012
[v _adsum `Vul ~T0 @X0 1 a ]
[; ;main.c: 1012: volatile unsigned long adsum = 0;
[e = _adsum -> -> -> 0 `i `l `ul ]
"1013
[v _admin `Vui ~T0 @X0 1 a ]
[; ;main.c: 1013: volatile unsigned int admin = 0, admax = 0;
[e = _admin -> -> 0 `i `ui ]
[v _admax `Vui ~T0 @X0 1 a ]
[e = _admax -> -> 0 `i `ui ]
"1014
[v _ad_temp `Vui ~T0 @X0 1 a ]
[; ;main.c: 1014: volatile unsigned int ad_temp = 0;
[e = _ad_temp -> -> 0 `i `ui ]
[; ;main.c: 1016: if ((!LDO_EN) && (adldo & 0x04) )
"1016
[e $ ! && ! _LDO_EN != & -> _adldo `i -> 4 `i -> 0 `i 184  ]
[; ;main.c: 1017: {
"1017
{
[; ;main.c: 1019: ADCON1 = adldo;
"1019
[e = _ADCON1 _adldo ]
[; ;main.c: 1020: _delay((unsigned long)((100)*(16000000/4000000.0)));
"1020
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"1021
}
[; ;main.c: 1021: }
[e $U 185  ]
"1022
[e :U 184 ]
[; ;main.c: 1022: else
[; ;main.c: 1023: ADCON1 = adldo;
"1023
[e = _ADCON1 _adldo ]
[e :U 185 ]
[; ;main.c: 1025: if(adch & 0x10)
"1025
[e $ ! != & -> _adch `i -> 16 `i -> 0 `i 186  ]
[; ;main.c: 1026: {
"1026
{
[; ;main.c: 1027: CHS4 = 1;
"1027
[e = _CHS4 -> -> 1 `i `b ]
[; ;main.c: 1028: adch &= 0x0f;
"1028
[e =& _adch -> -> 15 `i `uc ]
"1029
}
[e :U 186 ]
"1030
[v _i `uc ~T0 @X0 1 a ]
[; ;main.c: 1029: }
[; ;main.c: 1030: unsigned char i = 0;
[e = _i -> -> 0 `i `uc ]
[; ;main.c: 1031: for (i = 0; i < 10; i++)
"1031
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 10 `i 187  ]
[e $U 188  ]
"1032
[e :U 187 ]
[; ;main.c: 1032: {
{
[; ;main.c: 1033: ADCON0 = (unsigned char)(0X41 | (adch << 2));
"1033
[e = _ADCON0 -> | -> 65 `i << -> _adch `i -> 2 `i `uc ]
[; ;main.c: 1034: asm("nop");
"1034
[; <" nop ;# ">
[; ;main.c: 1035: asm("nop");
"1035
[; <" nop ;# ">
[; ;main.c: 1036: asm("nop");
"1036
[; <" nop ;# ">
[; ;main.c: 1037: asm("nop");
"1037
[; <" nop ;# ">
[; ;main.c: 1038: GODONE = 1;
"1038
[e = _GODONE -> -> 1 `i `b ]
"1040
[v _j `uc ~T0 @X0 1 a ]
[; ;main.c: 1040: unsigned char j = 0;
[e = _j -> -> 0 `i `uc ]
[; ;main.c: 1041: while (GODONE)
"1041
[e $U 190  ]
[e :U 191 ]
[; ;main.c: 1042: {
"1042
{
[; ;main.c: 1043: _delay((unsigned long)((2)*(16000000/4000000.0)));
"1043
[e ( __delay (1 -> * -> -> 2 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
[; ;main.c: 1045: if (0 == (--j))
"1045
[e $ ! == -> 0 `i -> =- _j -> -> 1 `i `uc `i 193  ]
[; ;main.c: 1046: return 0;
"1046
[e ) -> -> 0 `i `uc ]
[e $UE 183  ]
[e :U 193 ]
"1047
}
[e :U 190 ]
"1041
[e $ _GODONE 191  ]
[e :U 192 ]
[; ;main.c: 1047: }
[; ;main.c: 1049: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
"1049
[e = _ad_temp -> + << -> _ADRESH `i -> 4 `i >> -> _ADRESL `i -> 4 `i `ui ]
[; ;main.c: 1051: if (0 == admax)
"1051
[e $ ! == -> -> 0 `i `ui _admax 194  ]
[; ;main.c: 1052: {
"1052
{
[; ;main.c: 1053: admax = ad_temp;
"1053
[e = _admax _ad_temp ]
[; ;main.c: 1054: admin = ad_temp;
"1054
[e = _admin _ad_temp ]
"1055
}
[; ;main.c: 1055: }
[e $U 195  ]
"1056
[e :U 194 ]
[; ;main.c: 1056: else if (ad_temp > admax)
[e $ ! > _ad_temp _admax 196  ]
[; ;main.c: 1057: admax = ad_temp;
"1057
[e = _admax _ad_temp ]
[e $U 197  ]
"1058
[e :U 196 ]
[; ;main.c: 1058: else if (ad_temp < admin)
[e $ ! < _ad_temp _admin 198  ]
[; ;main.c: 1059: admin = ad_temp;
"1059
[e = _admin _ad_temp ]
[e :U 198 ]
"1061
[e :U 197 ]
[e :U 195 ]
[; ;main.c: 1061: adsum += ad_temp;
[e =+ _adsum -> _ad_temp `ul ]
"1062
}
"1031
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 10 `i 187  ]
[e :U 188 ]
"1062
}
[; ;main.c: 1062: }
[; ;main.c: 1063: adsum -= admax;
"1063
[e =- _adsum -> _admax `ul ]
[; ;main.c: 1064: if (adsum >= admin)
"1064
[e $ ! >= _adsum -> _admin `ul 199  ]
[; ;main.c: 1065: adsum -= admin;
"1065
[e =- _adsum -> _admin `ul ]
[e $U 200  ]
"1066
[e :U 199 ]
[; ;main.c: 1066: else
[; ;main.c: 1067: adsum = 0;
"1067
[e = _adsum -> -> -> 0 `i `l `ul ]
[e :U 200 ]
[; ;main.c: 1069: adresult = adsum >> 3;
"1069
[e = _adresult -> >> _adsum -> 3 `i `ui ]
[; ;main.c: 1071: adsum = 0;
"1071
[e = _adsum -> -> -> 0 `i `l `ul ]
[; ;main.c: 1072: admin = 0;
"1072
[e = _admin -> -> 0 `i `ui ]
[; ;main.c: 1073: admax = 0;
"1073
[e = _admax -> -> 0 `i `ui ]
[; ;main.c: 1074: return 0xA5;
"1074
[e ) -> -> 165 `i `uc ]
[e $UE 183  ]
[; ;main.c: 1076: }
"1076
[e :UE 183 ]
}
