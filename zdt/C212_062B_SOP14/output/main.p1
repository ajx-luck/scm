Version 3.2 HI-TECH Software Intermediate Code
"81 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[v _ledShow `(v ~T0 @X0 0 ef ]
[p mainexit ]
"71
[v _Init_System `(v ~T0 @X0 0 ef ]
"72
[v _AD_Init `(v ~T0 @X0 0 ef ]
"79
[v _checkOutA `(v ~T0 @X0 0 ef ]
"78
[v _chrgCtr `(v ~T0 @X0 0 ef ]
"80
[v _checkBatAD `(v ~T0 @X0 0 ef ]
"82
[v _keyCtr `(v ~T0 @X0 0 ef ]
"83
[v _workCtr `(v ~T0 @X0 0 ef ]
"84
[v _ledCtr `(v ~T0 @X0 0 ef ]
"73
[v _Sleep_Mode `(v ~T0 @X0 0 ef ]
"77
[v _chrgPwmStop `(v ~T0 @X0 0 ef ]
"76
[v _chrgPwmInit `(v ~T0 @X0 0 ef ]
"74
[v _pwmInit `(v ~T0 @X0 0 ef ]
"75
[v _pwmStop `(v ~T0 @X0 0 ef ]
"68
[v _ADC_Sample `(uc ~T0 @X0 0 ef2`uc`uc ]
[v F479 `(v ~T0 @X0 1 tf1`ul ]
"150 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\sc.h
[v __delay `JF479 ~T0 @X0 0 e ]
[p i __delay ]
"4 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[p n 752 ]
"5
[p n 373 ]
[; ;htc.h: 26: extern const char __xc8_OPTIM_SPEED;
[; ;htc.h: 28: extern double __fpnormalize(double);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
"5 C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\include\SC8P062BD.h
[v _INDF `Vuc ~T0 @X0 1 e@0 ]
[; ;SC8P062BD.h: 5: volatile unsigned char INDF @ 0x00;
"6
[v _OPTION_REG `Vuc ~T0 @X0 1 e@1 ]
[; ;SC8P062BD.h: 6: volatile unsigned char OPTION_REG @ 0x01;
"7
[v _PCL `Vuc ~T0 @X0 1 e@2 ]
[; ;SC8P062BD.h: 7: volatile unsigned char PCL @ 0x02;
"8
[v _STATUS `Vuc ~T0 @X0 1 e@3 ]
[; ;SC8P062BD.h: 8: volatile unsigned char STATUS @ 0x03;
"9
[v _FSR `Vuc ~T0 @X0 1 e@4 ]
[; ;SC8P062BD.h: 9: volatile unsigned char FSR @ 0x04;
"10
[v _TRISB `Vuc ~T0 @X0 1 e@5 ]
[; ;SC8P062BD.h: 10: volatile unsigned char TRISB @ 0x05;
"11
[v _PORTB `Vuc ~T0 @X0 1 e@6 ]
[; ;SC8P062BD.h: 11: volatile unsigned char PORTB @ 0x06;
"12
[v _WPDB `Vuc ~T0 @X0 1 e@7 ]
[; ;SC8P062BD.h: 12: volatile unsigned char WPDB @ 0x07;
"13
[v _WPUB `Vuc ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 13: volatile unsigned char WPUB @ 0x08;
"14
[v _IOCB `Vuc ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 14: volatile unsigned char IOCB @ 0x09;
"15
[v _PCLATH `Vuc ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 15: volatile unsigned char PCLATH @ 0x0A;
"16
[v _INTCON `Vuc ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 16: volatile unsigned char INTCON @ 0x0B;
"17
[v _ODCONB `Vuc ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 17: volatile unsigned char ODCONB @ 0x0C;
"18
[v _PIR1 `Vuc ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 18: volatile unsigned char PIR1 @ 0x0D;
"19
[v _PIE1 `Vuc ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 19: volatile unsigned char PIE1 @ 0x0E;
"20
[v _CMPCON0 `Vuc ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 20: volatile unsigned char CMPCON0 @ 0x0F;
"21
[v _CMPCON1 `Vuc ~T0 @X0 1 e@16 ]
[; ;SC8P062BD.h: 21: volatile unsigned char CMPCON1 @ 0x10;
"22
[v _PR2 `Vuc ~T0 @X0 1 e@17 ]
[; ;SC8P062BD.h: 22: volatile unsigned char PR2 @ 0x11;
"23
[v _TMR2 `Vuc ~T0 @X0 1 e@18 ]
[; ;SC8P062BD.h: 23: volatile unsigned char TMR2 @ 0x12;
"24
[v _T2CON `Vuc ~T0 @X0 1 e@19 ]
[; ;SC8P062BD.h: 24: volatile unsigned char T2CON @ 0x13;
"25
[v _OSCCON `Vuc ~T0 @X0 1 e@20 ]
[; ;SC8P062BD.h: 25: volatile unsigned char OSCCON @ 0x14;
"26
[v _PWMCON0 `Vuc ~T0 @X0 1 e@21 ]
[; ;SC8P062BD.h: 26: volatile unsigned char PWMCON0 @ 0x15;
"27
[v _PWMCON1 `Vuc ~T0 @X0 1 e@22 ]
[; ;SC8P062BD.h: 27: volatile unsigned char PWMCON1 @ 0x16;
"28
[v _PWMTL `Vuc ~T0 @X0 1 e@23 ]
[; ;SC8P062BD.h: 28: volatile unsigned char PWMTL @ 0x17;
"29
[v _PWMTH `Vuc ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 29: volatile unsigned char PWMTH @ 0x18;
"30
[v _PWMD0L `Vuc ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 30: volatile unsigned char PWMD0L @ 0x19;
"31
[v _PWMD1L `Vuc ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 31: volatile unsigned char PWMD1L @ 0x1A;
"32
[v _PWMD4L `Vuc ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 32: volatile unsigned char PWMD4L @ 0x1B;
"33
[v _PWMT4L `Vuc ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 33: volatile unsigned char PWMT4L @ 0x1C;
"34
[v _PWMCON2 `Vuc ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 34: volatile unsigned char PWMCON2 @ 0x1D;
"35
[v _PWMD01H `Vuc ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 35: volatile unsigned char PWMD01H @ 0x1E;
"36
[v _PWM01DT `Vuc ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 36: volatile unsigned char PWM01DT @ 0x1F;
"37
[v _TMR0 `Vuc ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 37: volatile unsigned char TMR0 @ 0x81;
"38
[v _TRISA `Vuc ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 38: volatile unsigned char TRISA @ 0x85;
"39
[v _PORTA `Vuc ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 39: volatile unsigned char PORTA @ 0x86;
"40
[v _WPDA `Vuc ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 40: volatile unsigned char WPDA @ 0x87;
"41
[v _WPUA `Vuc ~T0 @X0 1 e@136 ]
[; ;SC8P062BD.h: 41: volatile unsigned char WPUA @ 0x88;
"42
[v _IOCA `Vuc ~T0 @X0 1 e@137 ]
[; ;SC8P062BD.h: 42: volatile unsigned char IOCA @ 0x89;
"43
[v _ODCONA `Vuc ~T0 @X0 1 e@140 ]
[; ;SC8P062BD.h: 43: volatile unsigned char ODCONA @ 0x8C;
"44
[v _ANSEL0 `Vuc ~T0 @X0 1 e@147 ]
[; ;SC8P062BD.h: 44: volatile unsigned char ANSEL0 @ 0x93;
"45
[v _ANSEL1 `Vuc ~T0 @X0 1 e@148 ]
[; ;SC8P062BD.h: 45: volatile unsigned char ANSEL1 @ 0x94;
"46
[v _ADCON0 `Vuc ~T0 @X0 1 e@149 ]
[; ;SC8P062BD.h: 46: volatile unsigned char ADCON0 @ 0x95;
"47
[v _ADCON1 `Vuc ~T0 @X0 1 e@150 ]
[; ;SC8P062BD.h: 47: volatile unsigned char ADCON1 @ 0x96;
"48
[v _ADRESL `Vuc ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 48: volatile unsigned char ADRESL @ 0x98;
"49
[v _ADRESH `Vuc ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 49: volatile unsigned char ADRESH @ 0x99;
"50
[v _PWMD2L `Vuc ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 50: volatile unsigned char PWMD2L @ 0x9B;
"51
[v _PWMD3L `Vuc ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 51: volatile unsigned char PWMD3L @ 0x9C;
"52
[v _PWM23DT `Vuc ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 52: volatile unsigned char PWM23DT @ 0x9D;
"53
[v _PWMD23H `Vuc ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 53: volatile unsigned char PWMD23H @ 0x9E;
"55
[v _T0LSE_EN `Vb ~T0 @X0 1 e@15 ]
[; ;SC8P062BD.h: 55: volatile bit T0LSE_EN @ ((unsigned)&OPTION_REG*8)+7;
"56
[v _INTEDG `Vb ~T0 @X0 1 e@14 ]
[; ;SC8P062BD.h: 56: volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
"57
[v _T0CS `Vb ~T0 @X0 1 e@13 ]
[; ;SC8P062BD.h: 57: volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
"58
[v _T0SE `Vb ~T0 @X0 1 e@12 ]
[; ;SC8P062BD.h: 58: volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
"59
[v _PSA `Vb ~T0 @X0 1 e@11 ]
[; ;SC8P062BD.h: 59: volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
"60
[v _PS2 `Vb ~T0 @X0 1 e@10 ]
[; ;SC8P062BD.h: 60: volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
"61
[v _PS1 `Vb ~T0 @X0 1 e@9 ]
[; ;SC8P062BD.h: 61: volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
"62
[v _PS0 `Vb ~T0 @X0 1 e@8 ]
[; ;SC8P062BD.h: 62: volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
"65
[v _IRP `Vb ~T0 @X0 1 e@31 ]
[; ;SC8P062BD.h: 65: volatile bit IRP @ ((unsigned)&STATUS*8)+7;
"66
[v _RP1 `Vb ~T0 @X0 1 e@30 ]
[; ;SC8P062BD.h: 66: volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
"67
[v _RP0 `Vb ~T0 @X0 1 e@29 ]
[; ;SC8P062BD.h: 67: volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
"68
[v _TO `Vb ~T0 @X0 1 e@28 ]
[; ;SC8P062BD.h: 68: volatile bit TO @ ((unsigned)&STATUS*8)+4;
"69
[v _PD `Vb ~T0 @X0 1 e@27 ]
[; ;SC8P062BD.h: 69: volatile bit PD @ ((unsigned)&STATUS*8)+3;
"70
[v _Z `Vb ~T0 @X0 1 e@26 ]
[; ;SC8P062BD.h: 70: volatile bit Z @ ((unsigned)&STATUS*8)+2;
"71
[v _DC `Vb ~T0 @X0 1 e@25 ]
[; ;SC8P062BD.h: 71: volatile bit DC @ ((unsigned)&STATUS*8)+1;
"72
[v _C `Vb ~T0 @X0 1 e@24 ]
[; ;SC8P062BD.h: 72: volatile bit C @ ((unsigned)&STATUS*8)+0;
"75
[v _TRISB7 `Vb ~T0 @X0 1 e@47 ]
[; ;SC8P062BD.h: 75: volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;
"76
[v _TRISB6 `Vb ~T0 @X0 1 e@46 ]
[; ;SC8P062BD.h: 76: volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
"77
[v _TRISB5 `Vb ~T0 @X0 1 e@45 ]
[; ;SC8P062BD.h: 77: volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
"78
[v _TRISB4 `Vb ~T0 @X0 1 e@44 ]
[; ;SC8P062BD.h: 78: volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
"79
[v _TRISB3 `Vb ~T0 @X0 1 e@43 ]
[; ;SC8P062BD.h: 79: volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
"80
[v _TRISB2 `Vb ~T0 @X0 1 e@42 ]
[; ;SC8P062BD.h: 80: volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
"81
[v _TRISB1 `Vb ~T0 @X0 1 e@41 ]
[; ;SC8P062BD.h: 81: volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
"82
[v _TRISB0 `Vb ~T0 @X0 1 e@40 ]
[; ;SC8P062BD.h: 82: volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
"85
[v _RB7 `Vb ~T0 @X0 1 e@55 ]
[; ;SC8P062BD.h: 85: volatile bit RB7 @ ((unsigned)&PORTB*8)+7;
"86
[v _RB6 `Vb ~T0 @X0 1 e@54 ]
[; ;SC8P062BD.h: 86: volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
"87
[v _RB5 `Vb ~T0 @X0 1 e@53 ]
[; ;SC8P062BD.h: 87: volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
"88
[v _RB4 `Vb ~T0 @X0 1 e@52 ]
[; ;SC8P062BD.h: 88: volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
"89
[v _RB3 `Vb ~T0 @X0 1 e@51 ]
[; ;SC8P062BD.h: 89: volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
"90
[v _RB2 `Vb ~T0 @X0 1 e@50 ]
[; ;SC8P062BD.h: 90: volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
"91
[v _RB1 `Vb ~T0 @X0 1 e@49 ]
[; ;SC8P062BD.h: 91: volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
"92
[v _RB0 `Vb ~T0 @X0 1 e@48 ]
[; ;SC8P062BD.h: 92: volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
"95
[v _WPDB7 `Vb ~T0 @X0 1 e@63 ]
[; ;SC8P062BD.h: 95: volatile bit WPDB7 @ ((unsigned)&WPDB*8)+7;
"96
[v _WPDB6 `Vb ~T0 @X0 1 e@62 ]
[; ;SC8P062BD.h: 96: volatile bit WPDB6 @ ((unsigned)&WPDB*8)+6;
"97
[v _WPDB5 `Vb ~T0 @X0 1 e@61 ]
[; ;SC8P062BD.h: 97: volatile bit WPDB5 @ ((unsigned)&WPDB*8)+5;
"98
[v _WPDB4 `Vb ~T0 @X0 1 e@60 ]
[; ;SC8P062BD.h: 98: volatile bit WPDB4 @ ((unsigned)&WPDB*8)+4;
"99
[v _WPDB3 `Vb ~T0 @X0 1 e@59 ]
[; ;SC8P062BD.h: 99: volatile bit WPDB3 @ ((unsigned)&WPDB*8)+3;
"100
[v _WPDB1 `Vb ~T0 @X0 1 e@57 ]
[; ;SC8P062BD.h: 100: volatile bit WPDB1 @ ((unsigned)&WPDB*8)+1;
"101
[v _WPDB0 `Vb ~T0 @X0 1 e@56 ]
[; ;SC8P062BD.h: 101: volatile bit WPDB0 @ ((unsigned)&WPDB*8)+0;
"104
[v _WPUB7 `Vb ~T0 @X0 1 e@71 ]
[; ;SC8P062BD.h: 104: volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;
"105
[v _WPUB6 `Vb ~T0 @X0 1 e@70 ]
[; ;SC8P062BD.h: 105: volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
"106
[v _WPUB5 `Vb ~T0 @X0 1 e@69 ]
[; ;SC8P062BD.h: 106: volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
"107
[v _WPUB4 `Vb ~T0 @X0 1 e@68 ]
[; ;SC8P062BD.h: 107: volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
"108
[v _WPUB3 `Vb ~T0 @X0 1 e@67 ]
[; ;SC8P062BD.h: 108: volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
"109
[v _WPUB2 `Vb ~T0 @X0 1 e@66 ]
[; ;SC8P062BD.h: 109: volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
"110
[v _WPUB1 `Vb ~T0 @X0 1 e@65 ]
[; ;SC8P062BD.h: 110: volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
"111
[v _WPUB0 `Vb ~T0 @X0 1 e@64 ]
[; ;SC8P062BD.h: 111: volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
"114
[v _IOCB7 `Vb ~T0 @X0 1 e@79 ]
[; ;SC8P062BD.h: 114: volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;
"115
[v _IOCB6 `Vb ~T0 @X0 1 e@78 ]
[; ;SC8P062BD.h: 115: volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
"116
[v _IOCB5 `Vb ~T0 @X0 1 e@77 ]
[; ;SC8P062BD.h: 116: volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
"117
[v _IOCB4 `Vb ~T0 @X0 1 e@76 ]
[; ;SC8P062BD.h: 117: volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
"118
[v _IOCB3 `Vb ~T0 @X0 1 e@75 ]
[; ;SC8P062BD.h: 118: volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
"119
[v _IOCB2 `Vb ~T0 @X0 1 e@74 ]
[; ;SC8P062BD.h: 119: volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
"120
[v _IOCB1 `Vb ~T0 @X0 1 e@73 ]
[; ;SC8P062BD.h: 120: volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
"121
[v _IOCB0 `Vb ~T0 @X0 1 e@72 ]
[; ;SC8P062BD.h: 121: volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
"124
[v _GIE `Vb ~T0 @X0 1 e@95 ]
[; ;SC8P062BD.h: 124: volatile bit GIE @ ((unsigned)&INTCON*8)+7;
"125
[v _PEIE `Vb ~T0 @X0 1 e@94 ]
[; ;SC8P062BD.h: 125: volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
"126
[v _T0IE `Vb ~T0 @X0 1 e@93 ]
[; ;SC8P062BD.h: 126: volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
"127
[v _INTE `Vb ~T0 @X0 1 e@92 ]
[; ;SC8P062BD.h: 127: volatile bit INTE @ ((unsigned)&INTCON*8)+4;
"128
[v _RBIE `Vb ~T0 @X0 1 e@91 ]
[; ;SC8P062BD.h: 128: volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
"129
[v _T0IF `Vb ~T0 @X0 1 e@90 ]
[; ;SC8P062BD.h: 129: volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
"130
[v _INTF `Vb ~T0 @X0 1 e@89 ]
[; ;SC8P062BD.h: 130: volatile bit INTF @ ((unsigned)&INTCON*8)+1;
"131
[v _RBIF `Vb ~T0 @X0 1 e@88 ]
[; ;SC8P062BD.h: 131: volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
"134
[v _ODCONB7 `Vb ~T0 @X0 1 e@103 ]
[; ;SC8P062BD.h: 134: volatile bit ODCONB7 @ ((unsigned)&ODCONB*8)+7;
"135
[v _ODCONB6 `Vb ~T0 @X0 1 e@102 ]
[; ;SC8P062BD.h: 135: volatile bit ODCONB6 @ ((unsigned)&ODCONB*8)+6;
"136
[v _ODCONB5 `Vb ~T0 @X0 1 e@101 ]
[; ;SC8P062BD.h: 136: volatile bit ODCONB5 @ ((unsigned)&ODCONB*8)+5;
"137
[v _ODCONB4 `Vb ~T0 @X0 1 e@100 ]
[; ;SC8P062BD.h: 137: volatile bit ODCONB4 @ ((unsigned)&ODCONB*8)+4;
"138
[v _ODCONB3 `Vb ~T0 @X0 1 e@99 ]
[; ;SC8P062BD.h: 138: volatile bit ODCONB3 @ ((unsigned)&ODCONB*8)+3;
"139
[v _ODCONB1 `Vb ~T0 @X0 1 e@97 ]
[; ;SC8P062BD.h: 139: volatile bit ODCONB1 @ ((unsigned)&ODCONB*8)+1;
"140
[v _ODCONB0 `Vb ~T0 @X0 1 e@96 ]
[; ;SC8P062BD.h: 140: volatile bit ODCONB0 @ ((unsigned)&ODCONB*8)+0;
"143
[v _CMPIF `Vb ~T0 @X0 1 e@109 ]
[; ;SC8P062BD.h: 143: volatile bit CMPIF @ ((unsigned)&PIR1*8)+5;
"144
[v _PWMIF `Vb ~T0 @X0 1 e@108 ]
[; ;SC8P062BD.h: 144: volatile bit PWMIF @ ((unsigned)&PIR1*8)+4;
"145
[v _RAIF `Vb ~T0 @X0 1 e@107 ]
[; ;SC8P062BD.h: 145: volatile bit RAIF @ ((unsigned)&PIR1*8)+3;
"146
[v _TMR2IF `Vb ~T0 @X0 1 e@105 ]
[; ;SC8P062BD.h: 146: volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
"147
[v _ADIF `Vb ~T0 @X0 1 e@104 ]
[; ;SC8P062BD.h: 147: volatile bit ADIF @ ((unsigned)&PIR1*8)+0;
"150
[v _CMPIE `Vb ~T0 @X0 1 e@117 ]
[; ;SC8P062BD.h: 150: volatile bit CMPIE @ ((unsigned)&PIE1*8)+5;
"151
[v _PWMIE `Vb ~T0 @X0 1 e@116 ]
[; ;SC8P062BD.h: 151: volatile bit PWMIE @ ((unsigned)&PIE1*8)+4;
"152
[v _RAIE `Vb ~T0 @X0 1 e@115 ]
[; ;SC8P062BD.h: 152: volatile bit RAIE @ ((unsigned)&PIE1*8)+3;
"153
[v _TMR2IE `Vb ~T0 @X0 1 e@113 ]
[; ;SC8P062BD.h: 153: volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
"154
[v _ADIE `Vb ~T0 @X0 1 e@112 ]
[; ;SC8P062BD.h: 154: volatile bit ADIE @ ((unsigned)&PIE1*8)+0;
"157
[v _CMPEN `Vb ~T0 @X0 1 e@127 ]
[; ;SC8P062BD.h: 157: volatile bit CMPEN @ ((unsigned)&CMPCON0*8)+7;
"158
[v _CMPPS `Vb ~T0 @X0 1 e@126 ]
[; ;SC8P062BD.h: 158: volatile bit CMPPS @ ((unsigned)&CMPCON0*8)+6;
"159
[v _CMPNS2 `Vb ~T0 @X0 1 e@125 ]
[; ;SC8P062BD.h: 159: volatile bit CMPNS2 @ ((unsigned)&CMPCON0*8)+5;
"160
[v _CMPNS1 `Vb ~T0 @X0 1 e@124 ]
[; ;SC8P062BD.h: 160: volatile bit CMPNS1 @ ((unsigned)&CMPCON0*8)+4;
"161
[v _CMPNS0 `Vb ~T0 @X0 1 e@123 ]
[; ;SC8P062BD.h: 161: volatile bit CMPNS0 @ ((unsigned)&CMPCON0*8)+3;
"162
[v _CMPNV `Vb ~T0 @X0 1 e@122 ]
[; ;SC8P062BD.h: 162: volatile bit CMPNV @ ((unsigned)&CMPCON0*8)+2;
"163
[v _CMPOUT `Vb ~T0 @X0 1 e@121 ]
[; ;SC8P062BD.h: 163: volatile bit CMPOUT @ ((unsigned)&CMPCON0*8)+1;
"164
[v _CMPOEN `Vb ~T0 @X0 1 e@120 ]
[; ;SC8P062BD.h: 164: volatile bit CMPOEN @ ((unsigned)&CMPCON0*8)+0;
"167
[v _CMPIM `Vb ~T0 @X0 1 e@135 ]
[; ;SC8P062BD.h: 167: volatile bit CMPIM @ ((unsigned)&CMPCON1*8)+7;
"168
[v _AN_EN `Vb ~T0 @X0 1 e@134 ]
[; ;SC8P062BD.h: 168: volatile bit AN_EN @ ((unsigned)&CMPCON1*8)+6;
"169
[v _RBIAS_H `Vb ~T0 @X0 1 e@133 ]
[; ;SC8P062BD.h: 169: volatile bit RBIAS_H @ ((unsigned)&CMPCON1*8)+5;
"170
[v _RBIAS_L `Vb ~T0 @X0 1 e@132 ]
[; ;SC8P062BD.h: 170: volatile bit RBIAS_L @ ((unsigned)&CMPCON1*8)+4;
"171
[v _LVDS3 `Vb ~T0 @X0 1 e@131 ]
[; ;SC8P062BD.h: 171: volatile bit LVDS3 @ ((unsigned)&CMPCON1*8)+3;
"172
[v _LVDS2 `Vb ~T0 @X0 1 e@130 ]
[; ;SC8P062BD.h: 172: volatile bit LVDS2 @ ((unsigned)&CMPCON1*8)+2;
"173
[v _LVDS1 `Vb ~T0 @X0 1 e@129 ]
[; ;SC8P062BD.h: 173: volatile bit LVDS1 @ ((unsigned)&CMPCON1*8)+1;
"174
[v _LVDS0 `Vb ~T0 @X0 1 e@128 ]
[; ;SC8P062BD.h: 174: volatile bit LVDS0 @ ((unsigned)&CMPCON1*8)+0;
"177
[v _CLK_SEL `Vb ~T0 @X0 1 e@159 ]
[; ;SC8P062BD.h: 177: volatile bit CLK_SEL @ ((unsigned)&T2CON*8)+7;
"178
[v _TOUTPS3 `Vb ~T0 @X0 1 e@158 ]
[; ;SC8P062BD.h: 178: volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;
"179
[v _TOUTPS2 `Vb ~T0 @X0 1 e@157 ]
[; ;SC8P062BD.h: 179: volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
"180
[v _TOUTPS1 `Vb ~T0 @X0 1 e@156 ]
[; ;SC8P062BD.h: 180: volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
"181
[v _TOUTPS0 `Vb ~T0 @X0 1 e@155 ]
[; ;SC8P062BD.h: 181: volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
"182
[v _TMR2ON `Vb ~T0 @X0 1 e@154 ]
[; ;SC8P062BD.h: 182: volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
"183
[v _T2CKPS1 `Vb ~T0 @X0 1 e@153 ]
[; ;SC8P062BD.h: 183: volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
"184
[v _T2CKPS0 `Vb ~T0 @X0 1 e@152 ]
[; ;SC8P062BD.h: 184: volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
"187
[v _IRCF2 `Vb ~T0 @X0 1 e@166 ]
[; ;SC8P062BD.h: 187: volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
"188
[v _IRCF1 `Vb ~T0 @X0 1 e@165 ]
[; ;SC8P062BD.h: 188: volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
"189
[v _IRCF0 `Vb ~T0 @X0 1 e@164 ]
[; ;SC8P062BD.h: 189: volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
"190
[v _SWDTEN `Vb ~T0 @X0 1 e@161 ]
[; ;SC8P062BD.h: 190: volatile bit SWDTEN @ ((unsigned)&OSCCON*8)+1;
"193
[v _CLKDIV2 `Vb ~T0 @X0 1 e@175 ]
[; ;SC8P062BD.h: 193: volatile bit CLKDIV2 @ ((unsigned)&PWMCON0*8)+7;
"194
[v _CLKDIV1 `Vb ~T0 @X0 1 e@174 ]
[; ;SC8P062BD.h: 194: volatile bit CLKDIV1 @ ((unsigned)&PWMCON0*8)+6;
"195
[v _CLKDIV0 `Vb ~T0 @X0 1 e@173 ]
[; ;SC8P062BD.h: 195: volatile bit CLKDIV0 @ ((unsigned)&PWMCON0*8)+5;
"196
[v _PWM4EN `Vb ~T0 @X0 1 e@172 ]
[; ;SC8P062BD.h: 196: volatile bit PWM4EN @ ((unsigned)&PWMCON0*8)+4;
"197
[v _PWM3EN `Vb ~T0 @X0 1 e@171 ]
[; ;SC8P062BD.h: 197: volatile bit PWM3EN @ ((unsigned)&PWMCON0*8)+3;
"198
[v _PWM2EN `Vb ~T0 @X0 1 e@170 ]
[; ;SC8P062BD.h: 198: volatile bit PWM2EN @ ((unsigned)&PWMCON0*8)+2;
"199
[v _PWM1EN `Vb ~T0 @X0 1 e@169 ]
[; ;SC8P062BD.h: 199: volatile bit PWM1EN @ ((unsigned)&PWMCON0*8)+1;
"200
[v _PWM0EN `Vb ~T0 @X0 1 e@168 ]
[; ;SC8P062BD.h: 200: volatile bit PWM0EN @ ((unsigned)&PWMCON0*8)+0;
"203
[v _PWMIO_SEL1 `Vb ~T0 @X0 1 e@183 ]
[; ;SC8P062BD.h: 203: volatile bit PWMIO_SEL1 @ ((unsigned)&PWMCON1*8)+7;
"204
[v _PWMIO_SEL0 `Vb ~T0 @X0 1 e@182 ]
[; ;SC8P062BD.h: 204: volatile bit PWMIO_SEL0 @ ((unsigned)&PWMCON1*8)+6;
"205
[v _PWM2DTEN `Vb ~T0 @X0 1 e@181 ]
[; ;SC8P062BD.h: 205: volatile bit PWM2DTEN @ ((unsigned)&PWMCON1*8)+5;
"206
[v _PWM0DTEN `Vb ~T0 @X0 1 e@180 ]
[; ;SC8P062BD.h: 206: volatile bit PWM0DTEN @ ((unsigned)&PWMCON1*8)+4;
"207
[v _DT_DIV1 `Vb ~T0 @X0 1 e@177 ]
[; ;SC8P062BD.h: 207: volatile bit DT_DIV1 @ ((unsigned)&PWMCON1*8)+1;
"208
[v _DT_DIV0 `Vb ~T0 @X0 1 e@176 ]
[; ;SC8P062BD.h: 208: volatile bit DT_DIV0 @ ((unsigned)&PWMCON1*8)+0;
"211
[v _PWM4D9 `Vb ~T0 @X0 1 e@197 ]
[; ;SC8P062BD.h: 211: volatile bit PWM4D9 @ ((unsigned)&PWMTH*8)+5;
"212
[v _PWM4D8 `Vb ~T0 @X0 1 e@196 ]
[; ;SC8P062BD.h: 212: volatile bit PWM4D8 @ ((unsigned)&PWMTH*8)+4;
"213
[v _PWM4T9 `Vb ~T0 @X0 1 e@195 ]
[; ;SC8P062BD.h: 213: volatile bit PWM4T9 @ ((unsigned)&PWMTH*8)+3;
"214
[v _PWM4T8 `Vb ~T0 @X0 1 e@194 ]
[; ;SC8P062BD.h: 214: volatile bit PWM4T8 @ ((unsigned)&PWMTH*8)+2;
"215
[v _PWMT9 `Vb ~T0 @X0 1 e@193 ]
[; ;SC8P062BD.h: 215: volatile bit PWMT9 @ ((unsigned)&PWMTH*8)+1;
"216
[v _PWMT8 `Vb ~T0 @X0 1 e@192 ]
[; ;SC8P062BD.h: 216: volatile bit PWMT8 @ ((unsigned)&PWMTH*8)+0;
"219
[v _PWM4DIR `Vb ~T0 @X0 1 e@236 ]
[; ;SC8P062BD.h: 219: volatile bit PWM4DIR @ ((unsigned)&PWMCON2*8)+4;
"220
[v _PWM3DIR `Vb ~T0 @X0 1 e@235 ]
[; ;SC8P062BD.h: 220: volatile bit PWM3DIR @ ((unsigned)&PWMCON2*8)+3;
"221
[v _PWM2DIR `Vb ~T0 @X0 1 e@234 ]
[; ;SC8P062BD.h: 221: volatile bit PWM2DIR @ ((unsigned)&PWMCON2*8)+2;
"222
[v _PWM1DIR `Vb ~T0 @X0 1 e@233 ]
[; ;SC8P062BD.h: 222: volatile bit PWM1DIR @ ((unsigned)&PWMCON2*8)+1;
"223
[v _PWM0DIR `Vb ~T0 @X0 1 e@232 ]
[; ;SC8P062BD.h: 223: volatile bit PWM0DIR @ ((unsigned)&PWMCON2*8)+0;
"226
[v _PWMD19 `Vb ~T0 @X0 1 e@245 ]
[; ;SC8P062BD.h: 226: volatile bit PWMD19 @ ((unsigned)&PWMD01H*8)+5;
"227
[v _PWMD18 `Vb ~T0 @X0 1 e@244 ]
[; ;SC8P062BD.h: 227: volatile bit PWMD18 @ ((unsigned)&PWMD01H*8)+4;
"228
[v _PWMD09 `Vb ~T0 @X0 1 e@241 ]
[; ;SC8P062BD.h: 228: volatile bit PWMD09 @ ((unsigned)&PWMD01H*8)+1;
"229
[v _PWMD08 `Vb ~T0 @X0 1 e@240 ]
[; ;SC8P062BD.h: 229: volatile bit PWMD08 @ ((unsigned)&PWMD01H*8)+0;
"232
[v _PWM01DT5 `Vb ~T0 @X0 1 e@253 ]
[; ;SC8P062BD.h: 232: volatile bit PWM01DT5 @ ((unsigned)&PWM01DT*8)+5;
"233
[v _PWM01DT4 `Vb ~T0 @X0 1 e@252 ]
[; ;SC8P062BD.h: 233: volatile bit PWM01DT4 @ ((unsigned)&PWM01DT*8)+4;
"234
[v _PWM01DT3 `Vb ~T0 @X0 1 e@251 ]
[; ;SC8P062BD.h: 234: volatile bit PWM01DT3 @ ((unsigned)&PWM01DT*8)+3;
"235
[v _PWM01DT2 `Vb ~T0 @X0 1 e@250 ]
[; ;SC8P062BD.h: 235: volatile bit PWM01DT2 @ ((unsigned)&PWM01DT*8)+2;
"236
[v _PWM01DT1 `Vb ~T0 @X0 1 e@249 ]
[; ;SC8P062BD.h: 236: volatile bit PWM01DT1 @ ((unsigned)&PWM01DT*8)+1;
"237
[v _PWM01DT0 `Vb ~T0 @X0 1 e@248 ]
[; ;SC8P062BD.h: 237: volatile bit PWM01DT0 @ ((unsigned)&PWM01DT*8)+0;
"240
[v _TRISA5 `Vb ~T0 @X0 1 e@1069 ]
[; ;SC8P062BD.h: 240: volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
"241
[v _TRISA4 `Vb ~T0 @X0 1 e@1068 ]
[; ;SC8P062BD.h: 241: volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
"242
[v _TRISA3 `Vb ~T0 @X0 1 e@1067 ]
[; ;SC8P062BD.h: 242: volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
"243
[v _TRISA2 `Vb ~T0 @X0 1 e@1066 ]
[; ;SC8P062BD.h: 243: volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
"244
[v _TRISA1 `Vb ~T0 @X0 1 e@1065 ]
[; ;SC8P062BD.h: 244: volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
"245
[v _TRISA0 `Vb ~T0 @X0 1 e@1064 ]
[; ;SC8P062BD.h: 245: volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
"248
[v _RA5 `Vb ~T0 @X0 1 e@1077 ]
[; ;SC8P062BD.h: 248: volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
"249
[v _RA4 `Vb ~T0 @X0 1 e@1076 ]
[; ;SC8P062BD.h: 249: volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
"250
[v _RA3 `Vb ~T0 @X0 1 e@1075 ]
[; ;SC8P062BD.h: 250: volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
"251
[v _RA2 `Vb ~T0 @X0 1 e@1074 ]
[; ;SC8P062BD.h: 251: volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
"252
[v _RA1 `Vb ~T0 @X0 1 e@1073 ]
[; ;SC8P062BD.h: 252: volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
"253
[v _RA0 `Vb ~T0 @X0 1 e@1072 ]
[; ;SC8P062BD.h: 253: volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
"256
[v _WPDA5 `Vb ~T0 @X0 1 e@1085 ]
[; ;SC8P062BD.h: 256: volatile bit WPDA5 @ ((unsigned)&WPDA*8)+5;
"257
[v _WPDA4 `Vb ~T0 @X0 1 e@1084 ]
[; ;SC8P062BD.h: 257: volatile bit WPDA4 @ ((unsigned)&WPDA*8)+4;
"258
[v _WPDA3 `Vb ~T0 @X0 1 e@1083 ]
[; ;SC8P062BD.h: 258: volatile bit WPDA3 @ ((unsigned)&WPDA*8)+3;
"259
[v _WPDA2 `Vb ~T0 @X0 1 e@1082 ]
[; ;SC8P062BD.h: 259: volatile bit WPDA2 @ ((unsigned)&WPDA*8)+2;
"260
[v _WPDA1 `Vb ~T0 @X0 1 e@1081 ]
[; ;SC8P062BD.h: 260: volatile bit WPDA1 @ ((unsigned)&WPDA*8)+1;
"261
[v _WPDA0 `Vb ~T0 @X0 1 e@1080 ]
[; ;SC8P062BD.h: 261: volatile bit WPDA0 @ ((unsigned)&WPDA*8)+0;
"264
[v _WPUA5 `Vb ~T0 @X0 1 e@1093 ]
[; ;SC8P062BD.h: 264: volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
"265
[v _WPUA4 `Vb ~T0 @X0 1 e@1092 ]
[; ;SC8P062BD.h: 265: volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
"266
[v _WPUA3 `Vb ~T0 @X0 1 e@1091 ]
[; ;SC8P062BD.h: 266: volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
"267
[v _WPUA2 `Vb ~T0 @X0 1 e@1090 ]
[; ;SC8P062BD.h: 267: volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
"268
[v _WPUA1 `Vb ~T0 @X0 1 e@1089 ]
[; ;SC8P062BD.h: 268: volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
"269
[v _WPUA0 `Vb ~T0 @X0 1 e@1088 ]
[; ;SC8P062BD.h: 269: volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
"272
[v _IOCA5 `Vb ~T0 @X0 1 e@1101 ]
[; ;SC8P062BD.h: 272: volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;
"273
[v _IOCA4 `Vb ~T0 @X0 1 e@1100 ]
[; ;SC8P062BD.h: 273: volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
"274
[v _IOCA3 `Vb ~T0 @X0 1 e@1099 ]
[; ;SC8P062BD.h: 274: volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
"275
[v _IOCA2 `Vb ~T0 @X0 1 e@1098 ]
[; ;SC8P062BD.h: 275: volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
"276
[v _IOCA1 `Vb ~T0 @X0 1 e@1097 ]
[; ;SC8P062BD.h: 276: volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
"277
[v _IOCA0 `Vb ~T0 @X0 1 e@1096 ]
[; ;SC8P062BD.h: 277: volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;
"280
[v _ODCONA5 `Vb ~T0 @X0 1 e@1125 ]
[; ;SC8P062BD.h: 280: volatile bit ODCONA5 @ ((unsigned)&ODCONA*8)+5;
"281
[v _ODCONA4 `Vb ~T0 @X0 1 e@1124 ]
[; ;SC8P062BD.h: 281: volatile bit ODCONA4 @ ((unsigned)&ODCONA*8)+4;
"282
[v _ODCONA3 `Vb ~T0 @X0 1 e@1123 ]
[; ;SC8P062BD.h: 282: volatile bit ODCONA3 @ ((unsigned)&ODCONA*8)+3;
"283
[v _ODCONA2 `Vb ~T0 @X0 1 e@1122 ]
[; ;SC8P062BD.h: 283: volatile bit ODCONA2 @ ((unsigned)&ODCONA*8)+2;
"284
[v _ODCONA1 `Vb ~T0 @X0 1 e@1121 ]
[; ;SC8P062BD.h: 284: volatile bit ODCONA1 @ ((unsigned)&ODCONA*8)+1;
"285
[v _ODCONA0 `Vb ~T0 @X0 1 e@1120 ]
[; ;SC8P062BD.h: 285: volatile bit ODCONA0 @ ((unsigned)&ODCONA*8)+0;
"288
[v _ANS5 `Vb ~T0 @X0 1 e@1181 ]
[; ;SC8P062BD.h: 288: volatile bit ANS5 @ ((unsigned)&ANSEL0*8)+5;
"289
[v _ANS4 `Vb ~T0 @X0 1 e@1180 ]
[; ;SC8P062BD.h: 289: volatile bit ANS4 @ ((unsigned)&ANSEL0*8)+4;
"290
[v _ANS3 `Vb ~T0 @X0 1 e@1179 ]
[; ;SC8P062BD.h: 290: volatile bit ANS3 @ ((unsigned)&ANSEL0*8)+3;
"291
[v _ANS2 `Vb ~T0 @X0 1 e@1178 ]
[; ;SC8P062BD.h: 291: volatile bit ANS2 @ ((unsigned)&ANSEL0*8)+2;
"292
[v _ANS1 `Vb ~T0 @X0 1 e@1177 ]
[; ;SC8P062BD.h: 292: volatile bit ANS1 @ ((unsigned)&ANSEL0*8)+1;
"293
[v _ANS0 `Vb ~T0 @X0 1 e@1176 ]
[; ;SC8P062BD.h: 293: volatile bit ANS0 @ ((unsigned)&ANSEL0*8)+0;
"296
[v _ANS15 `Vb ~T0 @X0 1 e@1191 ]
[; ;SC8P062BD.h: 296: volatile bit ANS15 @ ((unsigned)&ANSEL1*8)+7;
"297
[v _ANS14 `Vb ~T0 @X0 1 e@1190 ]
[; ;SC8P062BD.h: 297: volatile bit ANS14 @ ((unsigned)&ANSEL1*8)+6;
"298
[v _ANS13 `Vb ~T0 @X0 1 e@1189 ]
[; ;SC8P062BD.h: 298: volatile bit ANS13 @ ((unsigned)&ANSEL1*8)+5;
"299
[v _ANS12 `Vb ~T0 @X0 1 e@1188 ]
[; ;SC8P062BD.h: 299: volatile bit ANS12 @ ((unsigned)&ANSEL1*8)+4;
"300
[v _ANS11 `Vb ~T0 @X0 1 e@1187 ]
[; ;SC8P062BD.h: 300: volatile bit ANS11 @ ((unsigned)&ANSEL1*8)+3;
"301
[v _ANS9 `Vb ~T0 @X0 1 e@1185 ]
[; ;SC8P062BD.h: 301: volatile bit ANS9 @ ((unsigned)&ANSEL1*8)+1;
"302
[v _ANS8 `Vb ~T0 @X0 1 e@1184 ]
[; ;SC8P062BD.h: 302: volatile bit ANS8 @ ((unsigned)&ANSEL1*8)+0;
"305
[v _ADCS1 `Vb ~T0 @X0 1 e@1199 ]
[; ;SC8P062BD.h: 305: volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
"306
[v _ADCS0 `Vb ~T0 @X0 1 e@1198 ]
[; ;SC8P062BD.h: 306: volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
"307
[v _CHS3 `Vb ~T0 @X0 1 e@1197 ]
[; ;SC8P062BD.h: 307: volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
"308
[v _CHS2 `Vb ~T0 @X0 1 e@1196 ]
[; ;SC8P062BD.h: 308: volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
"309
[v _CHS1 `Vb ~T0 @X0 1 e@1195 ]
[; ;SC8P062BD.h: 309: volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
"310
[v _CHS0 `Vb ~T0 @X0 1 e@1194 ]
[; ;SC8P062BD.h: 310: volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
"311
[v _GODONE `Vb ~T0 @X0 1 e@1193 ]
[; ;SC8P062BD.h: 311: volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
"312
[v _ADON `Vb ~T0 @X0 1 e@1192 ]
[; ;SC8P062BD.h: 312: volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
"315
[v _ADFM `Vb ~T0 @X0 1 e@1207 ]
[; ;SC8P062BD.h: 315: volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
"316
[v _CHS4 `Vb ~T0 @X0 1 e@1206 ]
[; ;SC8P062BD.h: 316: volatile bit CHS4 @ ((unsigned)&ADCON1*8)+6;
"317
[v _LDO_EN `Vb ~T0 @X0 1 e@1202 ]
[; ;SC8P062BD.h: 317: volatile bit LDO_EN @ ((unsigned)&ADCON1*8)+2;
"318
[v _LDO_SEL1 `Vb ~T0 @X0 1 e@1201 ]
[; ;SC8P062BD.h: 318: volatile bit LDO_SEL1 @ ((unsigned)&ADCON1*8)+1;
"319
[v _LDO_SEL0 `Vb ~T0 @X0 1 e@1200 ]
[; ;SC8P062BD.h: 319: volatile bit LDO_SEL0 @ ((unsigned)&ADCON1*8)+0;
"322
[v _PWMD39 `Vb ~T0 @X0 1 e@1269 ]
[; ;SC8P062BD.h: 322: volatile bit PWMD39 @ ((unsigned)&PWMD23H*8)+5;
"323
[v _PWMD38 `Vb ~T0 @X0 1 e@1268 ]
[; ;SC8P062BD.h: 323: volatile bit PWMD38 @ ((unsigned)&PWMD23H*8)+4;
"324
[v _PWMD29 `Vb ~T0 @X0 1 e@1265 ]
[; ;SC8P062BD.h: 324: volatile bit PWMD29 @ ((unsigned)&PWMD23H*8)+1;
"325
[v _PWMD28 `Vb ~T0 @X0 1 e@1264 ]
[; ;SC8P062BD.h: 325: volatile bit PWMD28 @ ((unsigned)&PWMD23H*8)+0;
[; ;sc.h: 28: extern void __nop(void);
[; ;sc.h: 76: extern unsigned int flash_read(unsigned short addr);
[; ;sc.h: 150: extern __nonreentrant void _delay(unsigned long);
[; ;sc.h: 184: extern unsigned char __resetbits;
[; ;sc.h: 185: extern __bit __powerdown;
[; ;sc.h: 186: extern __bit __timeout;
"16 C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c
[v _adresult `Vui ~T0 @X0 1 e ]
[; ;main.c: 16: volatile unsigned int adresult;
"17
[v _result `Vui ~T0 @X0 1 e ]
[; ;main.c: 17: volatile unsigned int result;
"18
[v _test_adc `Vuc ~T0 @X0 1 e ]
[; ;main.c: 18: volatile unsigned char test_adc;
"19
[v _power_ad `Vui ~T0 @X0 1 e ]
[; ;main.c: 19: volatile unsigned int power_ad;
"20
[v _intCount `uc ~T0 @X0 1 e ]
[; ;main.c: 20: unsigned char intCount;
"21
[v _count1s `uc ~T0 @X0 1 e ]
[; ;main.c: 21: unsigned char count1s;
"22
[v _IntFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 22: unsigned char IntFlag;
"23
[v _chrgFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 23: unsigned char chrgFlag;
"24
[v _chrgFullFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 24: unsigned char chrgFullFlag;
"25
[v _intCount10 `uc ~T0 @X0 1 e ]
[; ;main.c: 25: unsigned char intCount10;
"26
[v _outADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 26: unsigned int outADValue;
"27
[v _batADValue `ui ~T0 @X0 1 e ]
[; ;main.c: 27: unsigned int batADValue;
"28
[v _countHalfFull `uc ~T0 @X0 1 e ]
[; ;main.c: 28: unsigned char countHalfFull;
"29
[v _protectFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 29: unsigned char protectFlag;
"30
[v _workOverOutTime `uc ~T0 @X0 1 e ]
[; ;main.c: 30: unsigned char workOverOutTime;
"31
[v _workStep `uc ~T0 @X0 1 e ]
[i _workStep
-> -> 0 `i `uc
]
[; ;main.c: 31: unsigned char workStep = 0;
"32
[v _ledCnt `uc ~T0 @X0 1 e ]
[; ;main.c: 32: unsigned char ledCnt;
"33
[v _ledStep `uc ~T0 @X0 1 e ]
[; ;main.c: 33: unsigned char ledStep;
"34
[v _keyCount `uc ~T0 @X0 1 e ]
[; ;main.c: 34: unsigned char keyCount;
"35
[v _longPressFlag `uc ~T0 @X0 1 e ]
[; ;main.c: 35: unsigned char longPressFlag;
"36
[v _maxDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 36: unsigned char maxDuty;
"37
[v _overCount `uc ~T0 @X0 1 e ]
[; ;main.c: 37: unsigned char overCount;
"38
[v _addPowerCount `uc ~T0 @X0 1 e ]
[; ;main.c: 38: unsigned char addPowerCount;
"39
[v _tempDuty `uc ~T0 @X0 1 e ]
[; ;main.c: 39: unsigned char tempDuty;
"40
[v _startTime `uc ~T0 @X0 1 e ]
[; ;main.c: 40: unsigned char startTime;
"41
[v _firstTime `uc ~T0 @X0 1 e ]
[; ;main.c: 41: unsigned char firstTime;
"42
[v _overChrgTime `uc ~T0 @X0 1 e ]
[; ;main.c: 42: unsigned char overChrgTime;
"43
[v _pwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 43: unsigned char pwStep;
"44
[v _prePwStep `uc ~T0 @X0 1 e ]
[; ;main.c: 44: unsigned char prePwStep;
"45
[v _count50s `ui ~T0 @X0 1 e ]
[; ;main.c: 45: unsigned int count50s;
"46
[v _reChrgCount `uc ~T0 @X0 1 e ]
[; ;main.c: 46: unsigned char reChrgCount;
"47
[v _lockLedStep `uc ~T0 @X0 1 e ]
[; ;main.c: 47: unsigned char lockLedStep;
"48
[v _showBatTime `uc ~T0 @X0 1 e ]
[; ;main.c: 48: unsigned char showBatTime;
"49
[v _chrgMode `uc ~T0 @X0 1 e ]
[i _chrgMode
-> -> 0 `i `uc
]
[; ;main.c: 49: unsigned char chrgMode = 0;
"50
[v _chrgMaxAD `uc ~T0 @X0 1 e ]
[i _chrgMaxAD
-> -> 0 `i `uc
]
[; ;main.c: 50: unsigned char chrgMaxAD = 0;
"51
[v _lockCount `uc ~T0 @X0 1 e ]
[i _lockCount
-> -> 0 `i `uc
]
[; ;main.c: 51: unsigned char lockCount = 0;
"52
[v _fullCount `ui ~T0 @X0 1 e ]
[i _fullCount
-> -> 0 `i `ui
]
[; ;main.c: 52: unsigned int fullCount = 0;
"53
[v _addTime `uc ~T0 @X0 1 e ]
[; ;main.c: 53: unsigned char addTime;
"54
[v _subTime `uc ~T0 @X0 1 e ]
[; ;main.c: 54: unsigned char subTime;
"55
[v _chrgWaitTime `uc ~T0 @X0 1 e ]
[; ;main.c: 55: unsigned char chrgWaitTime;
"56
[v _chrgMaxDuty `uc ~T0 @X0 1 e ]
[i _chrgMaxDuty
-> -> 0 `i `uc
]
[; ;main.c: 56: unsigned char chrgMaxDuty = 0;
"57
[v _ledCntTime `uc ~T0 @X0 1 e ]
[; ;main.c: 57: unsigned char ledCntTime;
"58
[v _count5s `ui ~T0 @X0 1 e ]
[i _count5s
-> -> 0 `i `ui
]
[; ;main.c: 58: unsigned int count5s = 0;
"59
[v _overWorkTime `uc ~T0 @X0 1 e ]
[; ;main.c: 59: unsigned char overWorkTime;
"60
[v _preLedStep `uc ~T0 @X0 1 e ]
[; ;main.c: 60: unsigned char preLedStep;
"61
[v _count8s `ui ~T0 @X0 1 e ]
[; ;main.c: 61: unsigned int count8s;
"62
[v _count900s `ui ~T0 @X0 1 e ]
[; ;main.c: 62: unsigned int count900s;
"63
[v _lowBatFlag `uc ~T0 @X0 1 e ]
[i _lowBatFlag
-> -> 0 `i `uc
]
[; ;main.c: 63: unsigned char lowBatFlag = 0;
"64
[v _sleepTime `uc ~T0 @X0 1 e ]
[; ;main.c: 64: unsigned char sleepTime;
"65
[v _startChrgTime `uc ~T0 @X0 1 e ]
[i _startChrgTime
-> -> 0 `i `uc
]
[; ;main.c: 65: unsigned char startChrgTime = 0;
[; ;main.c: 68: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo);
[; ;main.c: 69: void DelayXms(unsigned char x);
[; ;main.c: 70: unsigned char ADC_Result(unsigned char adch);
[; ;main.c: 71: void Init_System();
[; ;main.c: 72: void AD_Init();
[; ;main.c: 73: void Sleep_Mode();
[; ;main.c: 74: void pwmInit();
[; ;main.c: 75: void pwmStop();
[; ;main.c: 76: void chrgPwmInit();
[; ;main.c: 77: void chrgPwmStop();
[; ;main.c: 78: void chrgCtr();
[; ;main.c: 79: void checkOutA();
[; ;main.c: 80: void checkBatAD();
[; ;main.c: 81: void ledShow();
[; ;main.c: 82: void keyCtr();
[; ;main.c: 83: void workCtr();
[; ;main.c: 84: void ledCtr();
[; ;main.c: 85: char keyRead(char keyStatus);
[v $root$_Isr_Timer `(v ~T0 @X0 0 e ]
[v F557 `(v ~T0 @X0 1 tf ]
"100
[v _Isr_Timer `IF557 ~T0 @X0 1 e ]
"101
{
[; ;main.c: 100: void interrupt Isr_Timer()
[; ;main.c: 101: {
[e :U _Isr_Timer ]
[f ]
[; ;main.c: 102: if(TMR2IF)
"102
[e $ ! _TMR2IF 2  ]
[; ;main.c: 103: {
"103
{
[; ;main.c: 104: TMR2IF = 0;
"104
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 105: if(++intCount >= 160)
"105
[e $ ! >= -> =+ _intCount -> -> 1 `i `uc `i -> 160 `i 3  ]
[; ;main.c: 106: {
"106
{
[; ;main.c: 107: intCount = 0;
"107
[e = _intCount -> -> 0 `i `uc ]
[; ;main.c: 108: IntFlag = 1;
"108
[e = _IntFlag -> -> 1 `i `uc ]
[; ;main.c: 109: if(++count1s >= 100)
"109
[e $ ! >= -> =+ _count1s -> -> 1 `i `uc `i -> 100 `i 4  ]
[; ;main.c: 110: {
"110
{
[; ;main.c: 111: count1s = 0;
"111
[e = _count1s -> -> 0 `i `uc ]
"112
}
[e :U 4 ]
"113
}
[e :U 3 ]
[; ;main.c: 112: }
[; ;main.c: 113: }
[; ;main.c: 114: ledShow();
"114
[e ( _ledShow ..  ]
[; ;main.c: 115: intCount10++;
"115
[e ++ _intCount10 -> -> 1 `i `uc ]
"116
}
[e :U 2 ]
[; ;main.c: 116: }
[; ;main.c: 118: }
"118
[e :UE 1 ]
}
[v $root$_main `(v ~T0 @X0 0 e ]
"124
[v _main `(v ~T0 @X0 1 ef ]
"125
{
[; ;main.c: 124: void main()
[; ;main.c: 125: {
[e :U _main ]
[f ]
[; ;main.c: 126: Init_System();
"126
[e ( _Init_System ..  ]
[; ;main.c: 127: AD_Init();
"127
[e ( _AD_Init ..  ]
[; ;main.c: 128: firstTime = 100;
"128
[e = _firstTime -> -> 100 `i `uc ]
[; ;main.c: 129: while (1)
"129
[e :U 7 ]
[; ;main.c: 130: {
"130
{
[; ;main.c: 131: asm("clrwdt");
"131
[; <" clrwdt ;# ">
[; ;main.c: 132: if(intCount10 > 10)
"132
[e $ ! > -> _intCount10 `i -> 10 `i 9  ]
[; ;main.c: 133: {
"133
{
[; ;main.c: 134: intCount10 = 0;
"134
[e = _intCount10 -> -> 0 `i `uc ]
[; ;main.c: 135: checkOutA();
"135
[e ( _checkOutA ..  ]
"136
}
[e :U 9 ]
[; ;main.c: 136: }
[; ;main.c: 137: if(!IntFlag)
"137
[e $ ! ! != -> _IntFlag `i -> -> -> 0 `i `uc `i 10  ]
[; ;main.c: 138: continue;
"138
[e $U 6  ]
[e :U 10 ]
[; ;main.c: 139: IntFlag = 0;
"139
[e = _IntFlag -> -> 0 `i `uc ]
[; ;main.c: 140: chrgCtr();
"140
[e ( _chrgCtr ..  ]
[; ;main.c: 141: checkBatAD();
"141
[e ( _checkBatAD ..  ]
[; ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
"142
[e $ ! && == -> _chrgFlag `i -> 0 `i == -> _lowBatFlag `i -> 0 `i 11  ]
[; ;main.c: 143: {
"143
{
[; ;main.c: 144: keyCtr();
"144
[e ( _keyCtr ..  ]
"145
}
[e :U 11 ]
[; ;main.c: 145: }
[; ;main.c: 146: workCtr();
"146
[e ( _workCtr ..  ]
[; ;main.c: 147: ledCtr();
"147
[e ( _ledCtr ..  ]
[; ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && showBatTime == 0)
"148
[e $ ! && && && && == -> _chrgFlag `i -> 0 `i == -> _workStep `i -> 0 `i == -> _keyCount `i -> 0 `i == -> _firstTime `i -> 0 `i == -> _showBatTime `i -> 0 `i 12  ]
[; ;main.c: 149: {
"149
{
[; ;main.c: 150: if(++sleepTime >= 200)
"150
[e $ ! >= -> =+ _sleepTime -> -> 1 `i `uc `i -> 200 `i 13  ]
[; ;main.c: 151: {
"151
{
[; ;main.c: 152: sleepTime = 0;
"152
[e = _sleepTime -> -> 0 `i `uc ]
[; ;main.c: 153: Sleep_Mode();
"153
[e ( _Sleep_Mode ..  ]
"154
}
[e :U 13 ]
"155
}
[; ;main.c: 154: }
[; ;main.c: 155: }
[e $U 14  ]
"156
[e :U 12 ]
[; ;main.c: 156: else
[; ;main.c: 157: {
"157
{
[; ;main.c: 158: sleepTime = 0;
"158
[e = _sleepTime -> -> 0 `i `uc ]
"159
}
[e :U 14 ]
"160
}
[e :U 6 ]
"129
[e $U 7  ]
[e :U 8 ]
[; ;main.c: 159: }
[; ;main.c: 160: }
[; ;main.c: 161: }
"161
[e :UE 5 ]
}
"163
[v _ledShow `(v ~T0 @X0 1 ef ]
"164
{
[; ;main.c: 163: void ledShow()
[; ;main.c: 164: {
[e :U _ledShow ]
[f ]
[; ;main.c: 165: if(++ledCntTime > 5)
"165
[e $ ! > -> =+ _ledCntTime -> -> 1 `i `uc `i -> 5 `i 16  ]
[; ;main.c: 166: {
"166
{
[; ;main.c: 167: ledCntTime = 0;
"167
[e = _ledCntTime -> -> 0 `i `uc ]
[; ;main.c: 168: if(++ledCnt > 6)
"168
[e $ ! > -> =+ _ledCnt -> -> 1 `i `uc `i -> 6 `i 17  ]
[; ;main.c: 169: {
"169
{
[; ;main.c: 170: ledCnt = 0;
"170
[e = _ledCnt -> -> 0 `i `uc ]
"171
}
[e :U 17 ]
[; ;main.c: 171: }
[; ;main.c: 172: PORTA &= 0xDF;
"172
[e =& _PORTA -> -> 223 `i `uc ]
[; ;main.c: 173: PORTB &= 0xC7;
"173
[e =& _PORTB -> -> 199 `i `uc ]
[; ;main.c: 174: TRISA |= 0x20;
"174
[e =| _TRISA -> -> 32 `i `uc ]
[; ;main.c: 175: TRISB |= 0x38;
"175
[e =| _TRISB -> -> 56 `i `uc ]
"176
}
[e :U 16 ]
[; ;main.c: 176: }
[; ;main.c: 178: switch(ledCnt)
"178
[e $U 19  ]
[; ;main.c: 179: {
"179
{
[; ;main.c: 180: case 0:
"180
[e :U 20 ]
[; ;main.c: 181: break;
"181
[e $U 18  ]
[; ;main.c: 182: case 1:
"182
[e :U 21 ]
[; ;main.c: 183: if(ledStep > 0)
"183
[e $ ! > -> _ledStep `i -> 0 `i 22  ]
[; ;main.c: 184: {
"184
{
[; ;main.c: 185: TRISB &= 0xE7;
"185
[e =& _TRISB -> -> 231 `i `uc ]
[; ;main.c: 186: PORTB |= 0x10;
"186
[e =| _PORTB -> -> 16 `i `uc ]
"187
}
[e :U 22 ]
[; ;main.c: 187: }
[; ;main.c: 188: break;
"188
[e $U 18  ]
[; ;main.c: 189: case 2:
"189
[e :U 23 ]
[; ;main.c: 190: if(ledStep > 1)
"190
[e $ ! > -> _ledStep `i -> 1 `i 24  ]
[; ;main.c: 191: {
"191
{
[; ;main.c: 192: TRISB &= 0xCF;
"192
[e =& _TRISB -> -> 207 `i `uc ]
[; ;main.c: 193: PORTB |= 0x20;
"193
[e =| _PORTB -> -> 32 `i `uc ]
"194
}
[e :U 24 ]
[; ;main.c: 194: }
[; ;main.c: 195: break;
"195
[e $U 18  ]
[; ;main.c: 196: case 3:
"196
[e :U 25 ]
[; ;main.c: 197: if(ledStep > 2)
"197
[e $ ! > -> _ledStep `i -> 2 `i 26  ]
[; ;main.c: 198: {
"198
{
[; ;main.c: 199: TRISB &= 0xE7;
"199
[e =& _TRISB -> -> 231 `i `uc ]
[; ;main.c: 200: PORTB |= 0x08;
"200
[e =| _PORTB -> -> 8 `i `uc ]
"201
}
[e :U 26 ]
[; ;main.c: 201: }
[; ;main.c: 202: break;
"202
[e $U 18  ]
[; ;main.c: 203: case 4:
"203
[e :U 27 ]
[; ;main.c: 204: if(ledStep > 3)
"204
[e $ ! > -> _ledStep `i -> 3 `i 28  ]
[; ;main.c: 205: {
"205
{
[; ;main.c: 206: TRISB &= 0xCF;
"206
[e =& _TRISB -> -> 207 `i `uc ]
[; ;main.c: 207: PORTB |= 0x10;
"207
[e =| _PORTB -> -> 16 `i `uc ]
"208
}
[e :U 28 ]
[; ;main.c: 208: }
[; ;main.c: 209: break;
"209
[e $U 18  ]
[; ;main.c: 210: case 5:
"210
[e :U 29 ]
[; ;main.c: 211: if(ledStep > 4)
"211
[e $ ! > -> _ledStep `i -> 4 `i 30  ]
[; ;main.c: 212: {
"212
{
[; ;main.c: 213: TRISA &= 0xDF;
"213
[e =& _TRISA -> -> 223 `i `uc ]
[; ;main.c: 214: TRISB &= 0xDF;
"214
[e =& _TRISB -> -> 223 `i `uc ]
[; ;main.c: 215: PORTB |= 0x20;
"215
[e =| _PORTB -> -> 32 `i `uc ]
"216
}
[e :U 30 ]
[; ;main.c: 216: }
[; ;main.c: 217: break;
"217
[e $U 18  ]
[; ;main.c: 218: case 6:
"218
[e :U 31 ]
[; ;main.c: 219: if(ledStep > 5)
"219
[e $ ! > -> _ledStep `i -> 5 `i 32  ]
[; ;main.c: 220: {
"220
{
[; ;main.c: 221: TRISA &= 0xDF;
"221
[e =& _TRISA -> -> 223 `i `uc ]
[; ;main.c: 222: TRISB &= 0xDF;
"222
[e =& _TRISB -> -> 223 `i `uc ]
[; ;main.c: 223: PORTA |= 0x20;
"223
[e =| _PORTA -> -> 32 `i `uc ]
"224
}
[e :U 32 ]
[; ;main.c: 224: }
[; ;main.c: 225: break;
"225
[e $U 18  ]
[; ;main.c: 226: default:
"226
[e :U 33 ]
[; ;main.c: 227: break;
"227
[e $U 18  ]
"228
}
[; ;main.c: 228: }
[e $U 18  ]
"178
[e :U 19 ]
[e [\ _ledCnt , $ -> -> 0 `i `uc 20
 , $ -> -> 1 `i `uc 21
 , $ -> -> 2 `i `uc 23
 , $ -> -> 3 `i `uc 25
 , $ -> -> 4 `i `uc 27
 , $ -> -> 5 `i `uc 29
 , $ -> -> 6 `i `uc 31
 33 ]
"228
[e :U 18 ]
[; ;main.c: 229: }
"229
[e :UE 15 ]
}
"232
[v _ledCtr `(v ~T0 @X0 1 ef ]
"233
{
[; ;main.c: 232: void ledCtr()
[; ;main.c: 233: {
[e :U _ledCtr ]
[f ]
[; ;main.c: 234: if(firstTime > 0)
"234
[e $ ! > -> _firstTime `i -> 0 `i 35  ]
[; ;main.c: 235: {
"235
{
[; ;main.c: 236: firstTime--;
"236
[e -- _firstTime -> -> 1 `i `uc ]
[; ;main.c: 237: ledStep = 6;
"237
[e = _ledStep -> -> 6 `i `uc ]
[; ;main.c: 238: if(prePwStep < pwStep)
"238
[e $ ! < -> _prePwStep `i -> _pwStep `i 36  ]
[; ;main.c: 239: {
"239
{
[; ;main.c: 240: prePwStep = pwStep;
"240
[e = _prePwStep _pwStep ]
"241
}
[e :U 36 ]
"242
}
[; ;main.c: 241: }
[; ;main.c: 242: }
[e $U 37  ]
"243
[e :U 35 ]
[; ;main.c: 243: else if(overWorkTime > 0)
[e $ ! > -> _overWorkTime `i -> 0 `i 38  ]
[; ;main.c: 244: {
"244
{
[; ;main.c: 245: overWorkTime--;
"245
[e -- _overWorkTime -> -> 1 `i `uc ]
[; ;main.c: 246: if(overWorkTime % 60 < 30)
"246
[e $ ! < % -> _overWorkTime `i -> 60 `i -> 30 `i 39  ]
[; ;main.c: 247: {
"247
{
[; ;main.c: 248: ledStep = preLedStep;
"248
[e = _ledStep _preLedStep ]
"249
}
[; ;main.c: 249: }
[e $U 40  ]
"250
[e :U 39 ]
[; ;main.c: 250: else
[; ;main.c: 251: {
"251
{
[; ;main.c: 252: ledStep = 0;
"252
[e = _ledStep -> -> 0 `i `uc ]
"253
}
[e :U 40 ]
"254
}
[; ;main.c: 253: }
[; ;main.c: 254: }
[e $U 41  ]
"255
[e :U 38 ]
[; ;main.c: 255: else if(showBatTime > 0)
[e $ ! > -> _showBatTime `i -> 0 `i 42  ]
[; ;main.c: 256: {
"256
{
[; ;main.c: 257: showBatTime--;
"257
[e -- _showBatTime -> -> 1 `i `uc ]
[; ;main.c: 258: if(prePwStep >= 14)
"258
[e $ ! >= -> _prePwStep `i -> 14 `i 43  ]
[; ;main.c: 259: {
"259
{
[; ;main.c: 260: ledStep = prePwStep/14;
"260
[e = _ledStep -> / -> _prePwStep `i -> 14 `i `uc ]
"261
}
[; ;main.c: 261: }
[e $U 44  ]
"262
[e :U 43 ]
[; ;main.c: 262: else if(prePwStep > 5)
[e $ ! > -> _prePwStep `i -> 5 `i 45  ]
[; ;main.c: 263: {
"263
{
[; ;main.c: 264: ledStep = 1;
"264
[e = _ledStep -> -> 1 `i `uc ]
"265
}
[; ;main.c: 265: }
[e $U 46  ]
"266
[e :U 45 ]
[; ;main.c: 266: else
[; ;main.c: 267: {
"267
{
[; ;main.c: 268: if(count1s < 50)
"268
[e $ ! < -> _count1s `i -> 50 `i 47  ]
[; ;main.c: 269: {
"269
{
[; ;main.c: 270: ledStep = 1;
"270
[e = _ledStep -> -> 1 `i `uc ]
"271
}
[; ;main.c: 271: }
[e $U 48  ]
"272
[e :U 47 ]
[; ;main.c: 272: else
[; ;main.c: 273: {
"273
{
[; ;main.c: 274: ledStep = 0;
"274
[e = _ledStep -> -> 0 `i `uc ]
"275
}
[e :U 48 ]
"276
}
[e :U 46 ]
[e :U 44 ]
"277
}
[; ;main.c: 275: }
[; ;main.c: 276: }
[; ;main.c: 277: }
[e $U 49  ]
"278
[e :U 42 ]
[; ;main.c: 278: else if(workStep > 0)
[e $ ! > -> _workStep `i -> 0 `i 50  ]
[; ;main.c: 279: {
"279
{
[; ;main.c: 280: ledStep = workStep;
"280
[e = _ledStep _workStep ]
"281
}
[; ;main.c: 281: }
[e $U 51  ]
"282
[e :U 50 ]
[; ;main.c: 282: else if(chrgFlag)
[e $ ! != -> _chrgFlag `i -> -> -> 0 `i `uc `i 52  ]
[; ;main.c: 283: {
"283
{
[; ;main.c: 284: if(count1s % 50 == 0)
"284
[e $ ! == % -> _count1s `i -> 50 `i -> 0 `i 53  ]
[; ;main.c: 285: {
"285
{
[; ;main.c: 286: if(++ledStep > 6)
"286
[e $ ! > -> =+ _ledStep -> -> 1 `i `uc `i -> 6 `i 54  ]
[; ;main.c: 287: {
"287
{
[; ;main.c: 288: ledStep = lockLedStep;
"288
[e = _ledStep _lockLedStep ]
"289
}
[e :U 54 ]
"290
}
[e :U 53 ]
"291
}
[; ;main.c: 289: }
[; ;main.c: 290: }
[; ;main.c: 291: }
[e $U 55  ]
"292
[e :U 52 ]
[; ;main.c: 292: else
[; ;main.c: 293: {
"293
{
[; ;main.c: 294: ledStep = 0;
"294
[e = _ledStep -> -> 0 `i `uc ]
"295
}
[e :U 55 ]
[e :U 51 ]
[e :U 49 ]
[e :U 41 ]
[e :U 37 ]
[; ;main.c: 295: }
[; ;main.c: 296: }
"296
[e :UE 34 ]
}
"300
[v _chrgCtr `(v ~T0 @X0 1 ef ]
"301
{
[; ;main.c: 300: void chrgCtr()
[; ;main.c: 301: {
[e :U _chrgCtr ]
[f ]
[; ;main.c: 302: if(PORTA & 0x02)
"302
[e $ ! != & -> _PORTA `i -> 2 `i -> 0 `i 57  ]
[; ;main.c: 303: {
"303
{
[; ;main.c: 304: if(chrgFlag == 0)
"304
[e $ ! == -> _chrgFlag `i -> 0 `i 58  ]
[; ;main.c: 305: {
"305
{
[; ;main.c: 306: chrgFlag = 1;
"306
[e = _chrgFlag -> -> 1 `i `uc ]
[; ;main.c: 307: ledStep = 0;
"307
[e = _ledStep -> -> 0 `i `uc ]
[; ;main.c: 308: chrgMaxDuty = 0;
"308
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 309: chrgPwmStop();
"309
[e ( _chrgPwmStop ..  ]
"310
}
[e :U 58 ]
[; ;main.c: 310: }
[; ;main.c: 311: workStep = 0;
"311
[e = _workStep -> -> 0 `i `uc ]
[; ;main.c: 312: lowBatFlag = 0;
"312
[e = _lowBatFlag -> -> 0 `i `uc ]
[; ;main.c: 313: if(prePwStep < pwStep)
"313
[e $ ! < -> _prePwStep `i -> _pwStep `i 59  ]
[; ;main.c: 314: {
"314
{
[; ;main.c: 315: if(++count50s > 2000)
"315
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 2000 `i `ui 60  ]
[; ;main.c: 316: {
"316
{
[; ;main.c: 317: count50s = 0;
"317
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 318: prePwStep++;
"318
[e ++ _prePwStep -> -> 1 `i `uc ]
"319
}
[e :U 60 ]
"320
}
[; ;main.c: 319: }
[; ;main.c: 320: }
[e $U 61  ]
"321
[e :U 59 ]
[; ;main.c: 321: else
[; ;main.c: 322: {
"322
{
[; ;main.c: 323: count50s = 0;
"323
[e = _count50s -> -> 0 `i `ui ]
"324
}
[e :U 61 ]
[; ;main.c: 324: }
[; ;main.c: 325: if(protectFlag)
"325
[e $ ! != -> _protectFlag `i -> -> -> 0 `i `uc `i 62  ]
[; ;main.c: 326: {
"326
{
[; ;main.c: 327: chrgPwmStop();
"327
[e ( _chrgPwmStop ..  ]
[; ;main.c: 328: ledStep = 6;
"328
[e = _ledStep -> -> 6 `i `uc ]
[; ;main.c: 329: if(prePwStep < 99 && protectFlag == 1)
"329
[e $ ! && < -> _prePwStep `i -> 99 `i == -> _protectFlag `i -> 1 `i 63  ]
[; ;main.c: 330: {
"330
{
[; ;main.c: 331: if(++reChrgCount > 250)
"331
[e $ ! > -> =+ _reChrgCount -> -> 1 `i `uc `i -> 250 `i 64  ]
[; ;main.c: 332: {
"332
{
[; ;main.c: 333: reChrgCount = 0;
"333
[e = _reChrgCount -> -> 0 `i `uc ]
[; ;main.c: 334: chrgFullFlag = 0;
"334
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 335: protectFlag = 0;
"335
[e = _protectFlag -> -> 0 `i `uc ]
[; ;main.c: 336: if(prePwStep > 14)
"336
[e $ ! > -> _prePwStep `i -> 14 `i 65  ]
[; ;main.c: 337: {
"337
{
[; ;main.c: 338: lockLedStep = (prePwStep/14) - 1;
"338
[e = _lockLedStep -> - / -> _prePwStep `i -> 14 `i -> 1 `i `uc ]
"339
}
[; ;main.c: 339: }
[e $U 66  ]
"340
[e :U 65 ]
[; ;main.c: 340: else
[; ;main.c: 341: {
"341
{
[; ;main.c: 342: lockLedStep = 0;
"342
[e = _lockLedStep -> -> 0 `i `uc ]
"343
}
[e :U 66 ]
"344
}
[e :U 64 ]
"345
}
[; ;main.c: 343: }
[; ;main.c: 344: }
[; ;main.c: 345: }
[e $U 67  ]
"346
[e :U 63 ]
[; ;main.c: 346: else
[; ;main.c: 347: {
"347
{
[; ;main.c: 348: reChrgCount = 0;
"348
[e = _reChrgCount -> -> 0 `i `uc ]
"349
}
[e :U 67 ]
[; ;main.c: 349: }
[; ;main.c: 350: return;
"350
[e $UE 56  ]
"351
}
[e :U 62 ]
[; ;main.c: 351: }
[; ;main.c: 352: if(batADValue < 1118)
"352
[e $ ! < _batADValue -> -> 1118 `i `ui 68  ]
[; ;main.c: 353: {
"353
{
[; ;main.c: 354: chrgMode = 0;
"354
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 355: chrgMaxAD = 15;
"355
[e = _chrgMaxAD -> -> 15 `i `uc ]
"356
}
[; ;main.c: 356: }
[e $U 69  ]
"357
[e :U 68 ]
[; ;main.c: 357: else if(batADValue < 1530)
[e $ ! < _batADValue -> -> 1530 `i `ui 70  ]
[; ;main.c: 358: {
"358
{
[; ;main.c: 359: chrgMode = 1;
"359
[e = _chrgMode -> -> 1 `i `uc ]
[; ;main.c: 360: chrgMaxAD = 40;
"360
[e = _chrgMaxAD -> -> 40 `i `uc ]
[; ;main.c: 361: lockCount = 0;
"361
[e = _lockCount -> -> 0 `i `uc ]
"362
}
[; ;main.c: 362: }
[e $U 71  ]
"363
[e :U 70 ]
[; ;main.c: 363: else if(count1s == 0)
[e $ ! == -> _count1s `i -> 0 `i 72  ]
[; ;main.c: 364: {
"364
{
[; ;main.c: 365: if(++lockCount > 200)
"365
[e $ ! > -> =+ _lockCount -> -> 1 `i `uc `i -> 200 `i 73  ]
[; ;main.c: 366: {
"366
{
[; ;main.c: 367: lockCount = 0;
"367
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 368: chrgMode = 2;
"368
[e = _chrgMode -> -> 2 `i `uc ]
"369
}
[e :U 73 ]
[; ;main.c: 369: }
[; ;main.c: 371: chrgMaxAD = 40;
"371
[e = _chrgMaxAD -> -> 40 `i `uc ]
"372
}
[e :U 72 ]
"373
[e :U 71 ]
[e :U 69 ]
[; ;main.c: 372: }
[; ;main.c: 373: if(chrgMode == 2 && outADValue < 5)
[e $ ! && == -> _chrgMode `i -> 2 `i < _outADValue -> -> 5 `i `ui 74  ]
[; ;main.c: 374: {
"374
{
[; ;main.c: 375: if(++fullCount >= 200)
"375
[e $ ! >= =+ _fullCount -> -> 1 `i `ui -> -> 200 `i `ui 75  ]
[; ;main.c: 376: {
"376
{
[; ;main.c: 377: fullCount = 0;
"377
[e = _fullCount -> -> 0 `i `ui ]
[; ;main.c: 378: chrgFullFlag = 1;
"378
[e = _chrgFullFlag -> -> 1 `i `uc ]
"379
}
[e :U 75 ]
"380
}
[; ;main.c: 379: }
[; ;main.c: 380: }
[e $U 76  ]
"381
[e :U 74 ]
[; ;main.c: 381: else
[; ;main.c: 382: {
"382
{
[; ;main.c: 383: fullCount = 0;
"383
[e = _fullCount -> -> 0 `i `ui ]
"384
}
[e :U 76 ]
[; ;main.c: 384: }
[; ;main.c: 385: if(chrgFullFlag)
"385
[e $ ! != -> _chrgFullFlag `i -> -> -> 0 `i `uc `i 77  ]
[; ;main.c: 386: {
"386
{
[; ;main.c: 387: lockLedStep = 6;
"387
[e = _lockLedStep -> -> 6 `i `uc ]
[; ;main.c: 388: chrgPwmStop();
"388
[e ( _chrgPwmStop ..  ]
"389
}
[; ;main.c: 389: }
[e $U 78  ]
"390
[e :U 77 ]
[; ;main.c: 390: else
[; ;main.c: 391: {
"391
{
[; ;main.c: 392: if(prePwStep < 15)
"392
[e $ ! < -> _prePwStep `i -> 15 `i 79  ]
[; ;main.c: 393: {
"393
{
[; ;main.c: 394: lockLedStep = 0;
"394
[e = _lockLedStep -> -> 0 `i `uc ]
"395
}
[; ;main.c: 395: }
[e $U 80  ]
"396
[e :U 79 ]
[; ;main.c: 396: else
[; ;main.c: 397: {
"397
{
[; ;main.c: 398: lockLedStep = (prePwStep/14) - 1;
"398
[e = _lockLedStep -> - / -> _prePwStep `i -> 14 `i -> 1 `i `uc ]
"399
}
[e :U 80 ]
[; ;main.c: 399: }
[; ;main.c: 400: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
"400
[e $ ! || > _batADValue -> -> 1545 `i `ui > _outADValue -> + -> _chrgMaxAD `i -> 2 `i `ui 81  ]
[; ;main.c: 401: {
"401
{
[; ;main.c: 402: if(++subTime > chrgWaitTime)
"402
[e $ ! > -> =+ _subTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 82  ]
[; ;main.c: 403: {
"403
{
[; ;main.c: 404: if(chrgMaxDuty > 1)
"404
[e $ ! > -> _chrgMaxDuty `i -> 1 `i 83  ]
[; ;main.c: 405: {
"405
{
[; ;main.c: 406: chrgMaxDuty--;
"406
[e -- _chrgMaxDuty -> -> 1 `i `uc ]
"407
}
[e :U 83 ]
[; ;main.c: 407: }
[; ;main.c: 408: subTime = 0;
"408
[e = _subTime -> -> 0 `i `uc ]
[; ;main.c: 409: chrgWaitTime = 50;
"409
[e = _chrgWaitTime -> -> 50 `i `uc ]
"410
}
[e :U 82 ]
[; ;main.c: 410: }
[; ;main.c: 411: addTime = 0;
"411
[e = _addTime -> -> 0 `i `uc ]
"412
}
[; ;main.c: 412: }
[e $U 84  ]
"413
[e :U 81 ]
[; ;main.c: 413: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
[e $ ! && < _batADValue -> -> 1545 `i `ui < _outADValue -> - -> _chrgMaxAD `i -> 4 `i `ui 85  ]
[; ;main.c: 414: {
"414
{
[; ;main.c: 415: if(++addTime > chrgWaitTime)
"415
[e $ ! > -> =+ _addTime -> -> 1 `i `uc `i -> _chrgWaitTime `i 86  ]
[; ;main.c: 416: {
"416
{
[; ;main.c: 417: addTime = 0;
"417
[e = _addTime -> -> 0 `i `uc ]
[; ;main.c: 418: if(chrgMaxDuty < 75)
"418
[e $ ! < -> _chrgMaxDuty `i -> 75 `i 87  ]
[; ;main.c: 419: {
"419
{
[; ;main.c: 420: chrgMaxDuty++;
"420
[e ++ _chrgMaxDuty -> -> 1 `i `uc ]
"421
}
[e :U 87 ]
"422
}
[e :U 86 ]
[; ;main.c: 421: }
[; ;main.c: 422: }
[; ;main.c: 423: subTime = 0;
"423
[e = _subTime -> -> 0 `i `uc ]
"424
}
[e :U 85 ]
"427
[e :U 84 ]
[; ;main.c: 424: }
[; ;main.c: 427: if((PWMCON0 & 0x01) == 0)
[e $ ! == & -> _PWMCON0 `i -> 1 `i -> 0 `i 88  ]
[; ;main.c: 428: {
"428
{
[; ;main.c: 429: chrgPwmInit();
"429
[e ( _chrgPwmInit ..  ]
"430
}
[e :U 88 ]
[; ;main.c: 430: }
[; ;main.c: 431: PWMD01H = 0X00;
"431
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 432: PWMD0L = chrgMaxDuty;
"432
[e = _PWMD0L _chrgMaxDuty ]
"433
}
[e :U 78 ]
"434
}
[; ;main.c: 433: }
[; ;main.c: 434: }
[e $U 89  ]
"435
[e :U 57 ]
[; ;main.c: 435: else
[; ;main.c: 436: {
"436
{
[; ;main.c: 437: startChrgTime = 0;
"437
[e = _startChrgTime -> -> 0 `i `uc ]
[; ;main.c: 438: chrgFlag = 0;
"438
[e = _chrgFlag -> -> 0 `i `uc ]
[; ;main.c: 439: chrgFullFlag = 0;
"439
[e = _chrgFullFlag -> -> 0 `i `uc ]
[; ;main.c: 440: protectFlag = 0;
"440
[e = _protectFlag -> -> 0 `i `uc ]
[; ;main.c: 441: chrgMode = 0;
"441
[e = _chrgMode -> -> 0 `i `uc ]
[; ;main.c: 442: chrgMaxAD = 0;
"442
[e = _chrgMaxAD -> -> 0 `i `uc ]
[; ;main.c: 443: chrgMaxDuty = 0;
"443
[e = _chrgMaxDuty -> -> 0 `i `uc ]
[; ;main.c: 444: lockCount = 0;
"444
[e = _lockCount -> -> 0 `i `uc ]
[; ;main.c: 445: lockLedStep = 0;
"445
[e = _lockLedStep -> -> 0 `i `uc ]
[; ;main.c: 446: chrgWaitTime = 20;
"446
[e = _chrgWaitTime -> -> 20 `i `uc ]
[; ;main.c: 447: chrgPwmStop();
"447
[e ( _chrgPwmStop ..  ]
[; ;main.c: 448: if(prePwStep > 0 && prePwStep > pwStep)
"448
[e $ ! && > -> _prePwStep `i -> 0 `i > -> _prePwStep `i -> _pwStep `i 90  ]
[; ;main.c: 449: {
"449
{
[; ;main.c: 450: if(++count50s > 2000)
"450
[e $ ! > =+ _count50s -> -> 1 `i `ui -> -> 2000 `i `ui 91  ]
[; ;main.c: 451: {
"451
{
[; ;main.c: 452: count50s = 0;
"452
[e = _count50s -> -> 0 `i `ui ]
[; ;main.c: 453: prePwStep--;
"453
[e -- _prePwStep -> -> 1 `i `uc ]
"454
}
[e :U 91 ]
"455
}
[; ;main.c: 454: }
[; ;main.c: 455: }
[e $U 92  ]
"456
[e :U 90 ]
[; ;main.c: 456: else
[; ;main.c: 457: {
"457
{
[; ;main.c: 458: count50s = 0;
"458
[e = _count50s -> -> 0 `i `ui ]
"459
}
[e :U 92 ]
"460
}
[e :U 89 ]
[; ;main.c: 459: }
[; ;main.c: 460: }
[; ;main.c: 461: }
"461
[e :UE 56 ]
}
"465
[v _keyRead `(uc ~T0 @X0 1 ef1`uc ]
"466
{
[; ;main.c: 465: char keyRead(char keyStatus)
[; ;main.c: 466: {
[e :U _keyRead ]
"465
[v _keyStatus `uc ~T0 @X0 1 r1 ]
"466
[f ]
[; ;main.c: 467: if(keyStatus)
"467
[e $ ! != -> _keyStatus `i -> -> -> 0 `i `uc `i 94  ]
[; ;main.c: 468: {
"468
{
[; ;main.c: 469: keyCount++;
"469
[e ++ _keyCount -> -> 1 `i `uc ]
[; ;main.c: 470: if(keyCount >= 100)
"470
[e $ ! >= -> _keyCount `i -> 100 `i 95  ]
[; ;main.c: 471: {
"471
{
[; ;main.c: 472: keyCount = 100;
"472
[e = _keyCount -> -> 100 `i `uc ]
[; ;main.c: 473: if(!longPressFlag)
"473
[e $ ! ! != -> _longPressFlag `i -> -> -> 0 `i `uc `i 96  ]
[; ;main.c: 474: {
"474
{
[; ;main.c: 475: longPressFlag = 1;
"475
[e = _longPressFlag -> -> 1 `i `uc ]
[; ;main.c: 476: return 2;
"476
[e ) -> -> 2 `i `uc ]
[e $UE 93  ]
"477
}
[e :U 96 ]
"478
}
[e :U 95 ]
"479
}
[; ;main.c: 477: }
[; ;main.c: 478: }
[; ;main.c: 479: }
[e $U 97  ]
"480
[e :U 94 ]
[; ;main.c: 480: else
[; ;main.c: 481: {
"481
{
[; ;main.c: 482: if(keyCount >= 100)
"482
[e $ ! >= -> _keyCount `i -> 100 `i 98  ]
[; ;main.c: 483: {
"483
{
[; ;main.c: 484: keyCount = 0;
"484
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 485: longPressFlag = 0;
"485
[e = _longPressFlag -> -> 0 `i `uc ]
[; ;main.c: 486: return 0;
"486
[e ) -> -> 0 `i `uc ]
[e $UE 93  ]
"487
}
[; ;main.c: 487: }
[e $U 99  ]
"488
[e :U 98 ]
[; ;main.c: 488: else if(keyCount >= 6)
[e $ ! >= -> _keyCount `i -> 6 `i 100  ]
[; ;main.c: 489: {
"489
{
[; ;main.c: 490: keyCount = 0;
"490
[e = _keyCount -> -> 0 `i `uc ]
[; ;main.c: 491: return 1;
"491
[e ) -> -> 1 `i `uc ]
[e $UE 93  ]
"492
}
[e :U 100 ]
"493
[e :U 99 ]
[; ;main.c: 492: }
[; ;main.c: 493: keyCount = 0;
[e = _keyCount -> -> 0 `i `uc ]
"494
}
[e :U 97 ]
[; ;main.c: 494: }
[; ;main.c: 495: return 0;
"495
[e ) -> -> 0 `i `uc ]
[e $UE 93  ]
[; ;main.c: 496: }
"496
[e :UE 93 ]
}
"498
[v _keyCtr `(v ~T0 @X0 1 ef ]
"499
{
[; ;main.c: 498: void keyCtr()
[; ;main.c: 499: {
[e :U _keyCtr ]
[f ]
"500
[v _kclick `uc ~T0 @X0 1 a ]
[; ;main.c: 500: char kclick = keyRead(0x04 & (~PORTB));
[e = _kclick ( _keyRead (1 -> & -> 4 `i ~ -> _PORTB `i `uc ]
[; ;main.c: 501: if(kclick == 1)
"501
[e $ ! == -> _kclick `i -> 1 `i 102  ]
[; ;main.c: 502: {
"502
{
[; ;main.c: 503: if(workStep > 0)
"503
[e $ ! > -> _workStep `i -> 0 `i 103  ]
[; ;main.c: 504: {
"504
{
[; ;main.c: 505: if(++workStep > 6)
"505
[e $ ! > -> =+ _workStep -> -> 1 `i `uc `i -> 6 `i 104  ]
[; ;main.c: 506: {
"506
{
[; ;main.c: 507: workStep = 1;
"507
[e = _workStep -> -> 1 `i `uc ]
"508
}
[e :U 104 ]
"509
}
[; ;main.c: 508: }
[; ;main.c: 509: }
[e $U 105  ]
"510
[e :U 103 ]
[; ;main.c: 510: else if(showBatTime > 0)
[e $ ! > -> _showBatTime `i -> 0 `i 106  ]
[; ;main.c: 511: {
"511
{
[; ;main.c: 512: showBatTime = 0;
"512
[e = _showBatTime -> -> 0 `i `uc ]
"513
}
[; ;main.c: 513: }
[e $U 107  ]
"514
[e :U 106 ]
[; ;main.c: 514: else
[; ;main.c: 515: {
"515
{
[; ;main.c: 516: showBatTime = 200;
"516
[e = _showBatTime -> -> 200 `i `uc ]
[; ;main.c: 517: count1s = 0;
"517
[e = _count1s -> -> 0 `i `uc ]
"518
}
[e :U 107 ]
[e :U 105 ]
"519
}
[; ;main.c: 518: }
[; ;main.c: 519: }
[e $U 108  ]
"520
[e :U 102 ]
[; ;main.c: 520: else if(kclick == 2)
[e $ ! == -> _kclick `i -> 2 `i 109  ]
[; ;main.c: 521: {
"521
{
[; ;main.c: 522: if(workStep > 0)
"522
[e $ ! > -> _workStep `i -> 0 `i 110  ]
[; ;main.c: 523: {
"523
{
[; ;main.c: 524: workStep = 0;
"524
[e = _workStep -> -> 0 `i `uc ]
"525
}
[; ;main.c: 525: }
[e $U 111  ]
"526
[e :U 110 ]
[; ;main.c: 526: else
[; ;main.c: 527: {
"527
{
[; ;main.c: 528: workStep = 1;
"528
[e = _workStep -> -> 1 `i `uc ]
[; ;main.c: 529: startTime = 30;
"529
[e = _startTime -> -> 30 `i `uc ]
[; ;main.c: 530: showBatTime = 0;
"530
[e = _showBatTime -> -> 0 `i `uc ]
"531
}
[e :U 111 ]
"532
}
[e :U 109 ]
"533
[e :U 108 ]
[; ;main.c: 531: }
[; ;main.c: 532: }
[; ;main.c: 533: }
[e :UE 101 ]
}
"535
[v _workCtr `(v ~T0 @X0 1 ef ]
"536
{
[; ;main.c: 535: void workCtr()
[; ;main.c: 536: {
[e :U _workCtr ]
[f ]
[; ;main.c: 538: if(startTime > 0)
"538
[e $ ! > -> _startTime `i -> 0 `i 113  ]
[; ;main.c: 539: {
"539
{
[; ;main.c: 540: startTime--;
"540
[e -- _startTime -> -> 1 `i `uc ]
"541
}
[e :U 113 ]
[; ;main.c: 541: }
[; ;main.c: 542: if(workStep > 0)
"542
[e $ ! > -> _workStep `i -> 0 `i 114  ]
[; ;main.c: 543: {
"543
{
[; ;main.c: 544: if((PWMCON0 & 0x02) == 0)
"544
[e $ ! == & -> _PWMCON0 `i -> 2 `i -> 0 `i 115  ]
[; ;main.c: 545: {
"545
{
[; ;main.c: 546: pwmInit();
"546
[e ( _pwmInit ..  ]
"547
}
[e :U 115 ]
[; ;main.c: 547: }
[; ;main.c: 548: maxDuty = 43 + (workStep*2);
"548
[e = _maxDuty -> + -> 43 `i * -> _workStep `i -> 2 `i `uc ]
[; ;main.c: 549: if(overCount >= 5)
"549
[e $ ! >= -> _overCount `i -> 5 `i 116  ]
[; ;main.c: 550: {
"550
{
[; ;main.c: 551: if(++count5s > 500)
"551
[e $ ! > =+ _count5s -> -> 1 `i `ui -> -> 500 `i `ui 117  ]
[; ;main.c: 552: {
"552
{
[; ;main.c: 553: count5s = 0;
"553
[e = _count5s -> -> 0 `i `ui ]
[; ;main.c: 554: overWorkTime = 180;
"554
[e = _overWorkTime -> -> 180 `i `uc ]
[; ;main.c: 555: preLedStep = workStep;
"555
[e = _preLedStep _workStep ]
[; ;main.c: 556: workStep = 0;
"556
[e = _workStep -> -> 0 `i `uc ]
"558
}
[e :U 117 ]
"559
}
[; ;main.c: 558: }
[; ;main.c: 559: }
[e $U 118  ]
"560
[e :U 116 ]
[; ;main.c: 560: else
[; ;main.c: 561: {
"561
{
[; ;main.c: 562: count5s = 0;
"562
[e = _count5s -> -> 0 `i `ui ]
"563
}
[e :U 118 ]
[; ;main.c: 563: }
[; ;main.c: 564: if(count1s == 0 && ++count900s >= 900)
"564
[e $ ! && == -> _count1s `i -> 0 `i >= =+ _count900s -> -> 1 `i `ui -> -> 900 `i `ui 119  ]
[; ;main.c: 565: {
"565
{
[; ;main.c: 566: workStep = 0;
"566
[e = _workStep -> -> 0 `i `uc ]
"567
}
[e :U 119 ]
"568
}
[; ;main.c: 567: }
[; ;main.c: 568: }
[e $U 120  ]
"569
[e :U 114 ]
[; ;main.c: 569: else
[; ;main.c: 570: {
"570
{
[; ;main.c: 571: pwmStop();
"571
[e ( _pwmStop ..  ]
[; ;main.c: 572: count900s = 0;
"572
[e = _count900s -> -> 0 `i `ui ]
"573
}
[e :U 120 ]
[; ;main.c: 573: }
[; ;main.c: 574: }
"574
[e :UE 112 ]
}
"576
[v _checkOutA `(v ~T0 @X0 1 ef ]
"577
{
[; ;main.c: 576: void checkOutA()
[; ;main.c: 577: {
[e :U _checkOutA ]
[f ]
[; ;main.c: 578: if(chrgFlag)
"578
[e $ ! != -> _chrgFlag `i -> -> -> 0 `i `uc `i 122  ]
[; ;main.c: 579: {
"579
{
[; ;main.c: 580: test_adc = ADC_Sample(4, 5);
"580
[e = _test_adc ( _ADC_Sample (2 , -> -> 4 `i `uc -> -> 5 `i `uc ]
"581
}
[; ;main.c: 581: }
[e $U 123  ]
"582
[e :U 122 ]
[; ;main.c: 582: else
[; ;main.c: 583: {
"583
{
[; ;main.c: 584: test_adc = ADC_Sample(0, 5);
"584
[e = _test_adc ( _ADC_Sample (2 , -> -> 0 `i `uc -> -> 5 `i `uc ]
"585
}
[e :U 123 ]
[; ;main.c: 585: }
[; ;main.c: 586: if (0xA5 == test_adc)
"586
[e $ ! == -> 165 `i -> _test_adc `i 124  ]
[; ;main.c: 587: {
"587
{
[; ;main.c: 588: if(chrgFlag && adresult > 210)
"588
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 210 `i `ui 125  ]
[; ;main.c: 589: {
"589
{
[; ;main.c: 590: if(++overChrgTime > 10)
"590
[e $ ! > -> =+ _overChrgTime -> -> 1 `i `uc `i -> 10 `i 126  ]
[; ;main.c: 591: {
"591
{
[; ;main.c: 592: overChrgTime = 0;
"592
[e = _overChrgTime -> -> 0 `i `uc ]
[; ;main.c: 593: protectFlag = 2;
"593
[e = _protectFlag -> -> 2 `i `uc ]
"594
}
[e :U 126 ]
"596
}
[; ;main.c: 594: }
[; ;main.c: 596: }
[e $U 127  ]
"597
[e :U 125 ]
[; ;main.c: 597: else
[; ;main.c: 598: {
"598
{
[; ;main.c: 599: overChrgTime = 0;
"599
[e = _overChrgTime -> -> 0 `i `uc ]
"600
}
[e :U 127 ]
[; ;main.c: 600: }
[; ;main.c: 601: outADValue = adresult;
"601
[e = _outADValue _adresult ]
[; ;main.c: 603: if(workStep && (outADValue > 220))
"603
[e $ ! && != -> _workStep `i -> -> -> 0 `i `uc `i > _outADValue -> -> 220 `i `ui 128  ]
[; ;main.c: 604: {
"604
{
[; ;main.c: 605: if(++workOverOutTime > 50)
"605
[e $ ! > -> =+ _workOverOutTime -> -> 1 `i `uc `i -> 50 `i 129  ]
[; ;main.c: 606: {
"606
{
[; ;main.c: 607: workOverOutTime = 0;
"607
[e = _workOverOutTime -> -> 0 `i `uc ]
[; ;main.c: 608: workStep = 0;
"608
[e = _workStep -> -> 0 `i `uc ]
"609
}
[e :U 129 ]
"610
}
[; ;main.c: 609: }
[; ;main.c: 610: }
[e $U 130  ]
"611
[e :U 128 ]
[; ;main.c: 611: else
[; ;main.c: 612: {
"612
{
[; ;main.c: 613: workOverOutTime = 0;
"613
[e = _workOverOutTime -> -> 0 `i `uc ]
"614
}
[e :U 130 ]
"615
[v _maxtempV `uc ~T0 @X0 1 a ]
[; ;main.c: 614: }
[; ;main.c: 615: unsigned char maxtempV = 40;
[e = _maxtempV -> -> 40 `i `uc ]
[; ;main.c: 616: if(workStep < 6 && outADValue > maxtempV)
"616
[e $ ! && < -> _workStep `i -> 6 `i > _outADValue -> _maxtempV `ui 131  ]
[; ;main.c: 617: {
"617
{
[; ;main.c: 618: if(++overCount > 5)
"618
[e $ ! > -> =+ _overCount -> -> 1 `i `uc `i -> 5 `i 132  ]
[; ;main.c: 619: {
"619
{
[; ;main.c: 620: overCount = 5;
"620
[e = _overCount -> -> 5 `i `uc ]
"621
}
[e :U 132 ]
"622
}
[; ;main.c: 621: }
[; ;main.c: 622: }
[e $U 133  ]
"623
[e :U 131 ]
[; ;main.c: 623: else if(outADValue > (maxtempV+3))
[e $ ! > _outADValue -> + -> _maxtempV `i -> 3 `i `ui 134  ]
[; ;main.c: 624: {
"624
{
[; ;main.c: 625: if(++overCount > 5)
"625
[e $ ! > -> =+ _overCount -> -> 1 `i `uc `i -> 5 `i 135  ]
[; ;main.c: 626: {
"626
{
[; ;main.c: 627: overCount = 5;
"627
[e = _overCount -> -> 5 `i `uc ]
"628
}
[e :U 135 ]
"629
}
[; ;main.c: 628: }
[; ;main.c: 629: }
[e $U 136  ]
"630
[e :U 134 ]
[; ;main.c: 630: else
[; ;main.c: 631: {
"631
{
"632
[v _maxAout `uc ~T0 @X0 1 a ]
[; ;main.c: 632: unsigned char maxAout = 7;
[e = _maxAout -> -> 7 `i `uc ]
[; ;main.c: 633: if(workStep == 1)
"633
[e $ ! == -> _workStep `i -> 1 `i 137  ]
[; ;main.c: 634: {
"634
{
[; ;main.c: 635: maxAout = maxAout + 5;
"635
[e = _maxAout -> + -> _maxAout `i -> 5 `i `uc ]
"636
}
[; ;main.c: 636: }
[e $U 138  ]
"637
[e :U 137 ]
[; ;main.c: 637: else if(workStep == 2)
[e $ ! == -> _workStep `i -> 2 `i 139  ]
[; ;main.c: 638: {
"638
{
[; ;main.c: 639: maxAout = maxAout + 6;
"639
[e = _maxAout -> + -> _maxAout `i -> 6 `i `uc ]
"640
}
[; ;main.c: 640: }
[e $U 140  ]
"641
[e :U 139 ]
[; ;main.c: 641: else if(workStep == 3)
[e $ ! == -> _workStep `i -> 3 `i 141  ]
[; ;main.c: 642: {
"642
{
[; ;main.c: 643: maxAout = maxAout + 7;
"643
[e = _maxAout -> + -> _maxAout `i -> 7 `i `uc ]
"644
}
[; ;main.c: 644: }
[e $U 142  ]
"645
[e :U 141 ]
[; ;main.c: 645: else if(workStep == 4)
[e $ ! == -> _workStep `i -> 4 `i 143  ]
[; ;main.c: 646: {
"646
{
[; ;main.c: 647: maxAout = maxAout + 7;
"647
[e = _maxAout -> + -> _maxAout `i -> 7 `i `uc ]
"648
}
[; ;main.c: 648: }
[e $U 144  ]
"649
[e :U 143 ]
[; ;main.c: 649: else if(workStep == 5)
[e $ ! == -> _workStep `i -> 5 `i 145  ]
[; ;main.c: 650: {
"650
{
[; ;main.c: 651: maxAout = maxAout + 8;
"651
[e = _maxAout -> + -> _maxAout `i -> 8 `i `uc ]
"652
}
[; ;main.c: 652: }
[e $U 146  ]
"653
[e :U 145 ]
[; ;main.c: 653: else if(workStep == 6)
[e $ ! == -> _workStep `i -> 6 `i 147  ]
[; ;main.c: 654: {
"654
{
[; ;main.c: 655: maxAout = maxAout + 8;
"655
[e = _maxAout -> + -> _maxAout `i -> 8 `i `uc ]
"656
}
[e :U 147 ]
"657
[e :U 146 ]
[e :U 144 ]
[e :U 142 ]
[e :U 140 ]
[e :U 138 ]
[; ;main.c: 656: }
[; ;main.c: 657: if(overCount > 0)
[e $ ! > -> _overCount `i -> 0 `i 148  ]
[; ;main.c: 658: {
"658
{
[; ;main.c: 659: overCount--;
"659
[e -- _overCount -> -> 1 `i `uc ]
"660
}
[e :U 148 ]
[; ;main.c: 660: }
[; ;main.c: 661: if(outADValue > maxAout)
"661
[e $ ! > _outADValue -> _maxAout `ui 149  ]
[; ;main.c: 662: {
"662
{
[; ;main.c: 663: if(++addPowerCount > 3)
"663
[e $ ! > -> =+ _addPowerCount -> -> 1 `i `uc `i -> 3 `i 150  ]
[; ;main.c: 664: {
"664
{
[; ;main.c: 665: addPowerCount = 3;
"665
[e = _addPowerCount -> -> 3 `i `uc ]
[; ;main.c: 666: if(startTime == 0)
"666
[e $ ! == -> _startTime `i -> 0 `i 151  ]
[; ;main.c: 667: {
"667
{
[; ;main.c: 668: tempDuty = 72 + (workStep*4);
"668
[e = _tempDuty -> + -> 72 `i * -> _workStep `i -> 4 `i `uc ]
"670
}
[; ;main.c: 670: }
[e $U 152  ]
"671
[e :U 151 ]
[; ;main.c: 671: else
[; ;main.c: 672: {
"672
{
[; ;main.c: 673: tempDuty = maxDuty;
"673
[e = _tempDuty _maxDuty ]
"674
}
[e :U 152 ]
"675
}
[e :U 150 ]
"677
}
[; ;main.c: 674: }
[; ;main.c: 675: }
[; ;main.c: 677: }
[e $U 153  ]
"678
[e :U 149 ]
[; ;main.c: 678: else
[; ;main.c: 679: {
"679
{
[; ;main.c: 680: addPowerCount = 0;
"680
[e = _addPowerCount -> -> 0 `i `uc ]
[; ;main.c: 681: if(tempDuty > maxDuty)
"681
[e $ ! > -> _tempDuty `i -> _maxDuty `i 154  ]
[; ;main.c: 682: {
"682
{
[; ;main.c: 683: tempDuty--;
"683
[e -- _tempDuty -> -> 1 `i `uc ]
"684
}
[; ;main.c: 684: }
[e $U 155  ]
"685
[e :U 154 ]
[; ;main.c: 685: else
[; ;main.c: 686: {
"686
{
[; ;main.c: 687: tempDuty = maxDuty;
"687
[e = _tempDuty _maxDuty ]
"688
}
[e :U 155 ]
"690
}
[e :U 153 ]
"692
}
[e :U 136 ]
[e :U 133 ]
[; ;main.c: 688: }
[; ;main.c: 690: }
[; ;main.c: 692: }
[; ;main.c: 693: PWMD01H = 0X00;
"693
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 694: PWMD1L = tempDuty;
"694
[e = _PWMD1L _tempDuty ]
"695
}
[; ;main.c: 695: }
[e $U 156  ]
"696
[e :U 124 ]
[; ;main.c: 696: else
[; ;main.c: 697: {
"697
{
[; ;main.c: 698: ADCON0 = 0;
"698
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 699: ADCON1 = 0;
"699
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 700: _delay((unsigned long)((100)*(16000000/4000000.0)));
"700
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"701
}
[e :U 156 ]
[; ;main.c: 701: }
[; ;main.c: 702: }
"702
[e :UE 121 ]
}
"704
[v _checkBatAD `(v ~T0 @X0 1 ef ]
"705
{
[; ;main.c: 704: void checkBatAD()
[; ;main.c: 705: {
[e :U _checkBatAD ]
[f ]
[; ;main.c: 706: test_adc = ADC_Sample(2, 5);
"706
[e = _test_adc ( _ADC_Sample (2 , -> -> 2 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 707: if (0xA5 == test_adc)
"707
[e $ ! == -> 165 `i -> _test_adc `i 158  ]
[; ;main.c: 708: {
"708
{
[; ;main.c: 709: batADValue = adresult;
"709
[e = _batADValue _adresult ]
[; ;main.c: 710: if(batADValue < 1117)
"710
[e $ ! < _batADValue -> -> 1117 `i `ui 159  ]
[; ;main.c: 711: {
"711
{
[; ;main.c: 712: pwStep = 0;
"712
[e = _pwStep -> -> 0 `i `uc ]
[; ;main.c: 713: if(++count8s > 800)
"713
[e $ ! > =+ _count8s -> -> 1 `i `ui -> -> 800 `i `ui 160  ]
[; ;main.c: 714: {
"714
{
[; ;main.c: 715: count8s = 0;
"715
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 716: lowBatFlag = 1;
"716
[e = _lowBatFlag -> -> 1 `i `uc ]
[; ;main.c: 717: if(workStep > 0)
"717
[e $ ! > -> _workStep `i -> 0 `i 161  ]
[; ;main.c: 718: {
"718
{
[; ;main.c: 719: overWorkTime = 180;
"719
[e = _overWorkTime -> -> 180 `i `uc ]
[; ;main.c: 720: preLedStep = workStep;
"720
[e = _preLedStep _workStep ]
"721
}
[e :U 161 ]
[; ;main.c: 721: }
[; ;main.c: 722: prePwStep = 0;
"722
[e = _prePwStep -> -> 0 `i `uc ]
[; ;main.c: 723: workStep = 0;
"723
[e = _workStep -> -> 0 `i `uc ]
"724
}
[e :U 160 ]
"725
}
[; ;main.c: 724: }
[; ;main.c: 725: }
[e $U 162  ]
"726
[e :U 159 ]
[; ;main.c: 726: else
[; ;main.c: 727: {
"727
{
[; ;main.c: 728: count8s = 0;
"728
[e = _count8s -> -> 0 `i `ui ]
[; ;main.c: 729: if(batADValue >= 1340)
"729
[e $ ! >= _batADValue -> -> 1340 `i `ui 163  ]
[; ;main.c: 730: {
"730
{
[; ;main.c: 731: pwStep = ((batADValue - 1340) /2) + 13;
"731
[e = _pwStep -> + / - _batADValue -> -> 1340 `i `ui -> -> 2 `i `ui -> -> 13 `i `ui `uc ]
"732
}
[; ;main.c: 732: }
[e $U 164  ]
"733
[e :U 163 ]
[; ;main.c: 733: else
[; ;main.c: 734: {
"734
{
[; ;main.c: 735: pwStep = (batADValue - 1117) / 16;
"735
[e = _pwStep -> / - _batADValue -> -> 1117 `i `ui -> -> 16 `i `ui `uc ]
"736
}
[e :U 164 ]
[; ;main.c: 736: }
[; ;main.c: 737: if(pwStep > 99)
"737
[e $ ! > -> _pwStep `i -> 99 `i 165  ]
[; ;main.c: 738: {
"738
{
[; ;main.c: 739: pwStep = 99;
"739
[e = _pwStep -> -> 99 `i `uc ]
"740
}
[e :U 165 ]
"741
}
[e :U 162 ]
[; ;main.c: 740: }
[; ;main.c: 741: }
[; ;main.c: 742: if(chrgFlag && batADValue > 1861)
"742
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _batADValue -> -> 1861 `i `ui 166  ]
[; ;main.c: 743: {
"743
{
[; ;main.c: 744: protectFlag = 1;
"744
[e = _protectFlag -> -> 1 `i `uc ]
"745
}
[e :U 166 ]
"746
}
[; ;main.c: 745: }
[; ;main.c: 746: }
[e $U 167  ]
"747
[e :U 158 ]
[; ;main.c: 747: else
[; ;main.c: 748: {
"748
{
[; ;main.c: 749: ADCON0 = 0;
"749
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 750: ADCON1 = 0;
"750
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 751: _delay((unsigned long)((100)*(16000000/4000000.0)));
"751
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"752
}
[e :U 167 ]
[; ;main.c: 752: }
[; ;main.c: 753: test_adc = ADC_Sample(3, 5);
"753
[e = _test_adc ( _ADC_Sample (2 , -> -> 3 `i `uc -> -> 5 `i `uc ]
[; ;main.c: 754: if (0xA5 == test_adc)
"754
[e $ ! == -> 165 `i -> _test_adc `i 168  ]
[; ;main.c: 755: {
"755
{
[; ;main.c: 756: if(chrgFlag && adresult > 100)
"756
[e $ ! && != -> _chrgFlag `i -> -> -> 0 `i `uc `i > _adresult -> -> 100 `i `ui 169  ]
[; ;main.c: 757: {
"757
{
[; ;main.c: 759: if(adresult > 810 || (batADValue - adresult) > 810)
"759
[e $ ! || > _adresult -> -> 810 `i `ui > - _batADValue _adresult -> -> 810 `i `ui 170  ]
[; ;main.c: 760: {
"760
{
[; ;main.c: 762: if(++countHalfFull > 250)
"762
[e $ ! > -> =+ _countHalfFull -> -> 1 `i `uc `i -> 250 `i 171  ]
[; ;main.c: 763: {
"763
{
[; ;main.c: 764: countHalfFull = 0;
"764
[e = _countHalfFull -> -> 0 `i `uc ]
[; ;main.c: 765: protectFlag = 2;
"765
[e = _protectFlag -> -> 2 `i `uc ]
"766
}
[e :U 171 ]
"767
}
[; ;main.c: 766: }
[; ;main.c: 767: }
[e $U 172  ]
"768
[e :U 170 ]
[; ;main.c: 768: else
[; ;main.c: 769: {
"769
{
[; ;main.c: 770: countHalfFull = 0;
"770
[e = _countHalfFull -> -> 0 `i `uc ]
"771
}
[e :U 172 ]
"772
}
[e :U 169 ]
"773
}
[; ;main.c: 771: }
[; ;main.c: 772: }
[; ;main.c: 773: }
[e $U 173  ]
"774
[e :U 168 ]
[; ;main.c: 774: else
[; ;main.c: 775: {
"775
{
[; ;main.c: 776: ADCON0 = 0;
"776
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 777: ADCON1 = 0;
"777
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 778: _delay((unsigned long)((100)*(16000000/4000000.0)));
"778
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"779
}
[e :U 173 ]
[; ;main.c: 779: }
[; ;main.c: 780: }
"780
[e :UE 157 ]
}
"791
[v _Init_System `(v ~T0 @X0 1 ef ]
"792
{
[; ;main.c: 791: void Init_System()
[; ;main.c: 792: {
[e :U _Init_System ]
[f ]
[; ;main.c: 793: asm("nop");
"793
[; <" nop ;# ">
[; ;main.c: 794: asm("clrwdt");
"794
[; <" clrwdt ;# ">
[; ;main.c: 795: OPTION_REG = 0;
"795
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 796: asm("clrwdt");
"796
[; <" clrwdt ;# ">
[; ;main.c: 797: OSCCON = 0X72;
"797
[e = _OSCCON -> -> 114 `i `uc ]
[; ;main.c: 799: WPUA = 0B00000000;
"799
[e = _WPUA -> -> 0 `i `uc ]
[; ;main.c: 800: WPDA = 0x02;
"800
[e = _WPDA -> -> 2 `i `uc ]
[; ;main.c: 801: WPUB = 0B00000100;
"801
[e = _WPUB -> -> 4 `i `uc ]
[; ;main.c: 803: TRISA = 0x1F;
"803
[e = _TRISA -> -> 31 `i `uc ]
[; ;main.c: 804: TRISB = 0B00000100;
"804
[e = _TRISB -> -> 4 `i `uc ]
[; ;main.c: 806: PORTA = 0X00;
"806
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 807: PORTB = 0X00;
"807
[e = _PORTB -> -> 0 `i `uc ]
[; ;main.c: 811: PR2 = 249;
"811
[e = _PR2 -> -> 249 `i `uc ]
[; ;main.c: 812: TMR2IF = 0;
"812
[e = _TMR2IF -> -> 0 `i `b ]
[; ;main.c: 813: TMR2IE = 1;
"813
[e = _TMR2IE -> -> 1 `i `b ]
[; ;main.c: 815: T2CON = 0B00000100;
"815
[e = _T2CON -> -> 4 `i `uc ]
[; ;main.c: 816: INTCON = 0XC0;
"816
[e = _INTCON -> -> 192 `i `uc ]
[; ;main.c: 817: }
"817
[e :UE 174 ]
}
"828
[v _AD_Init `(v ~T0 @X0 1 ef ]
"829
{
[; ;main.c: 828: void AD_Init()
[; ;main.c: 829: {
[e :U _AD_Init ]
[f ]
[; ;main.c: 861: ADCON0 = 0X41;
"861
[e = _ADCON0 -> -> 65 `i `uc ]
[; ;main.c: 878: ADCON1 = 0;
"878
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 879: ANSEL0 = 0X1D;
"879
[e = _ANSEL0 -> -> 29 `i `uc ]
[; ;main.c: 880: }
"880
[e :UE 175 ]
}
"883
[v _chrgPwmInit `(v ~T0 @X0 1 ef ]
"884
{
[; ;main.c: 883: void chrgPwmInit()
[; ;main.c: 884: {
[e :U _chrgPwmInit ]
[f ]
[; ;main.c: 885: PWMCON1 = 0B00000000;
"885
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 887: PWMTH = 0X00;
"887
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 888: PWMTL = 100;
"888
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 892: PWMD01H = 0;
"892
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 893: PWMD0L = 1;
"893
[e = _PWMD0L -> -> 1 `i `uc ]
[; ;main.c: 894: PWM01DT = 0X00;
"894
[e = _PWM01DT -> -> 0 `i `uc ]
[; ;main.c: 896: PWMCON0 = 0X01;
"896
[e = _PWMCON0 -> -> 1 `i `uc ]
[; ;main.c: 897: PWMCON2 =0X00;
"897
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 898: }
"898
[e :UE 176 ]
}
"900
[v _chrgPwmStop `(v ~T0 @X0 1 ef ]
"901
{
[; ;main.c: 900: void chrgPwmStop()
[; ;main.c: 901: {
[e :U _chrgPwmStop ]
[f ]
[; ;main.c: 902: PWMCON0 &= 0xFE;
"902
[e =& _PWMCON0 -> -> 254 `i `uc ]
[; ;main.c: 903: RB0 = 0;
"903
[e = _RB0 -> -> 0 `i `b ]
[; ;main.c: 904: }
"904
[e :UE 177 ]
}
"906
[v _pwmInit `(v ~T0 @X0 1 ef ]
"907
{
[; ;main.c: 906: void pwmInit()
[; ;main.c: 907: {
[e :U _pwmInit ]
[f ]
[; ;main.c: 908: PWMCON1 = 0B00000000;
"908
[e = _PWMCON1 -> -> 0 `i `uc ]
[; ;main.c: 909: PWMTH = 0X00;
"909
[e = _PWMTH -> -> 0 `i `uc ]
[; ;main.c: 910: PWMTL = 100;
"910
[e = _PWMTL -> -> 100 `i `uc ]
[; ;main.c: 913: PWMD01H = 0;
"913
[e = _PWMD01H -> -> 0 `i `uc ]
[; ;main.c: 914: PWMD1L = 50;
"914
[e = _PWMD1L -> -> 50 `i `uc ]
[; ;main.c: 915: PWM01DT = 0X00;
"915
[e = _PWM01DT -> -> 0 `i `uc ]
[; ;main.c: 917: PWMCON0 = 0X62;
"917
[e = _PWMCON0 -> -> 98 `i `uc ]
[; ;main.c: 918: PWMCON2 =0X00;
"918
[e = _PWMCON2 -> -> 0 `i `uc ]
[; ;main.c: 919: }
"919
[e :UE 178 ]
}
"921
[v _pwmStop `(v ~T0 @X0 1 ef ]
"922
{
[; ;main.c: 921: void pwmStop()
[; ;main.c: 922: {
[e :U _pwmStop ]
[f ]
[; ;main.c: 923: PWMCON0 &= 0XFD;
"923
[e =& _PWMCON0 -> -> 253 `i `uc ]
[; ;main.c: 924: RB1 = 0;
"924
[e = _RB1 -> -> 0 `i `b ]
[; ;main.c: 925: }
"925
[e :UE 179 ]
}
"935
[v _Sleep_Mode `(v ~T0 @X0 1 ef ]
"936
{
[; ;main.c: 935: void Sleep_Mode()
[; ;main.c: 936: {
[e :U _Sleep_Mode ]
[f ]
[; ;main.c: 937: INTCON = 0;
"937
[e = _INTCON -> -> 0 `i `uc ]
[; ;main.c: 939: OPTION_REG = 0;
"939
[e = _OPTION_REG -> -> 0 `i `uc ]
[; ;main.c: 941: TRISA = 0x1F;
"941
[e = _TRISA -> -> 31 `i `uc ]
[; ;main.c: 942: WPUA = 0B00000000;
"942
[e = _WPUA -> -> 0 `i `uc ]
[; ;main.c: 943: PORTA = 0x00;
"943
[e = _PORTA -> -> 0 `i `uc ]
[; ;main.c: 944: TRISB = 0B00000100;
"944
[e = _TRISB -> -> 4 `i `uc ]
[; ;main.c: 945: PORTB = 0B00000000;
"945
[e = _PORTB -> -> 0 `i `uc ]
[; ;main.c: 946: WPUB = 0B00000100;
"946
[e = _WPUB -> -> 4 `i `uc ]
[; ;main.c: 948: ADCON0 = 0;
"948
[e = _ADCON0 -> -> 0 `i `uc ]
[; ;main.c: 949: ADCON1 = 0;
"949
[e = _ADCON1 -> -> 0 `i `uc ]
[; ;main.c: 951: PWMCON0 = 0;
"951
[e = _PWMCON0 -> -> 0 `i `uc ]
[; ;main.c: 953: OSCCON = 0X70;
"953
[e = _OSCCON -> -> 112 `i `uc ]
[; ;main.c: 955: IOCA = 0B00000010;
"955
[e = _IOCA -> -> 2 `i `uc ]
[; ;main.c: 956: IOCB = 0B00000100;
"956
[e = _IOCB -> -> 4 `i `uc ]
[; ;main.c: 958: RAIE = 1;
"958
[e = _RAIE -> -> 1 `i `b ]
[; ;main.c: 959: PEIE = 1;
"959
[e = _PEIE -> -> 1 `i `b ]
[; ;main.c: 960: RBIE = 1;
"960
[e = _RBIE -> -> 1 `i `b ]
[; ;main.c: 961: GIE = 0;
"961
[e = _GIE -> -> 0 `i `b ]
[; ;main.c: 963: PIE1 &= 0X08;
"963
[e =& _PIE1 -> -> 8 `i `uc ]
[; ;main.c: 964: PIR1 = 0;
"964
[e = _PIR1 -> -> 0 `i `uc ]
[; ;main.c: 965: INTCON &= 0XC8;
"965
[e =& _INTCON -> -> 200 `i `uc ]
[; ;main.c: 967: PORTA;
"967
[e _PORTA ]
[; ;main.c: 968: RAIF = 0;
"968
[e = _RAIF -> -> 0 `i `b ]
[; ;main.c: 969: PORTB;
"969
[e _PORTB ]
[; ;main.c: 970: RBIF = 0;
"970
[e = _RBIF -> -> 0 `i `b ]
[; ;main.c: 971: asm("clrwdt");
"971
[; <" clrwdt ;# ">
[; ;main.c: 973: asm("sleep");
"973
[; <" sleep ;# ">
[; ;main.c: 975: asm("nop");
"975
[; <" nop ;# ">
[; ;main.c: 976: asm("clrwdt");
"976
[; <" clrwdt ;# ">
[; ;main.c: 977: asm("nop");
"977
[; <" nop ;# ">
[; ;main.c: 978: asm("nop");
"978
[; <" nop ;# ">
[; ;main.c: 979: asm("nop");
"979
[; <" nop ;# ">
[; ;main.c: 980: asm("nop");
"980
[; <" nop ;# ">
[; ;main.c: 981: asm("nop");
"981
[; <" nop ;# ">
[; ;main.c: 982: if(RAIF) RAIF = 0;
"982
[e $ ! _RAIF 181  ]
[e = _RAIF -> -> 0 `i `b ]
[e :U 181 ]
[; ;main.c: 983: if(RBIF) RBIF = 0;
"983
[e $ ! _RBIF 182  ]
[e = _RBIF -> -> 0 `i `b ]
[e :U 182 ]
[; ;main.c: 984: if(TMR2IF) TMR2IF = 0;
"984
[e $ ! _TMR2IF 183  ]
[e = _TMR2IF -> -> 0 `i `b ]
[e :U 183 ]
[; ;main.c: 985: IOCA = 0B00000000;
"985
[e = _IOCA -> -> 0 `i `uc ]
[; ;main.c: 986: IOCB = 0B00000000;
"986
[e = _IOCB -> -> 0 `i `uc ]
[; ;main.c: 987: Init_System();
"987
[e ( _Init_System ..  ]
[; ;main.c: 988: AD_Init();
"988
[e ( _AD_Init ..  ]
[; ;main.c: 989: }
"989
[e :UE 180 ]
}
"1011
[v _ADC_Sample `(uc ~T0 @X0 1 ef2`uc`uc ]
"1012
{
[; ;main.c: 1011: unsigned char ADC_Sample(unsigned char adch, unsigned char adldo)
[; ;main.c: 1012: {
[e :U _ADC_Sample ]
"1011
[v _adch `uc ~T0 @X0 1 r1 ]
[v _adldo `uc ~T0 @X0 1 r2 ]
"1012
[f ]
"1013
[v _adsum `Vul ~T0 @X0 1 a ]
[; ;main.c: 1013: volatile unsigned long adsum = 0;
[e = _adsum -> -> -> 0 `i `l `ul ]
"1014
[v _admin `Vui ~T0 @X0 1 a ]
[; ;main.c: 1014: volatile unsigned int admin = 0, admax = 0;
[e = _admin -> -> 0 `i `ui ]
[v _admax `Vui ~T0 @X0 1 a ]
[e = _admax -> -> 0 `i `ui ]
"1015
[v _ad_temp `Vui ~T0 @X0 1 a ]
[; ;main.c: 1015: volatile unsigned int ad_temp = 0;
[e = _ad_temp -> -> 0 `i `ui ]
[; ;main.c: 1017: if ((!LDO_EN) && (adldo & 0x04) )
"1017
[e $ ! && ! _LDO_EN != & -> _adldo `i -> 4 `i -> 0 `i 185  ]
[; ;main.c: 1018: {
"1018
{
[; ;main.c: 1020: ADCON1 = adldo;
"1020
[e = _ADCON1 _adldo ]
[; ;main.c: 1021: _delay((unsigned long)((100)*(16000000/4000000.0)));
"1021
[e ( __delay (1 -> * -> -> 100 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
"1022
}
[; ;main.c: 1022: }
[e $U 186  ]
"1023
[e :U 185 ]
[; ;main.c: 1023: else
[; ;main.c: 1024: ADCON1 = adldo;
"1024
[e = _ADCON1 _adldo ]
[e :U 186 ]
[; ;main.c: 1026: if(adch & 0x10)
"1026
[e $ ! != & -> _adch `i -> 16 `i -> 0 `i 187  ]
[; ;main.c: 1027: {
"1027
{
[; ;main.c: 1028: CHS4 = 1;
"1028
[e = _CHS4 -> -> 1 `i `b ]
[; ;main.c: 1029: adch &= 0x0f;
"1029
[e =& _adch -> -> 15 `i `uc ]
"1030
}
[e :U 187 ]
"1031
[v _i `uc ~T0 @X0 1 a ]
[; ;main.c: 1030: }
[; ;main.c: 1031: unsigned char i = 0;
[e = _i -> -> 0 `i `uc ]
[; ;main.c: 1032: for (i = 0; i < 10; i++)
"1032
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 10 `i 188  ]
[e $U 189  ]
"1033
[e :U 188 ]
[; ;main.c: 1033: {
{
[; ;main.c: 1034: ADCON0 = (unsigned char)(0X41 | (adch << 2));
"1034
[e = _ADCON0 -> | -> 65 `i << -> _adch `i -> 2 `i `uc ]
[; ;main.c: 1035: asm("nop");
"1035
[; <" nop ;# ">
[; ;main.c: 1036: asm("nop");
"1036
[; <" nop ;# ">
[; ;main.c: 1037: asm("nop");
"1037
[; <" nop ;# ">
[; ;main.c: 1038: asm("nop");
"1038
[; <" nop ;# ">
[; ;main.c: 1039: GODONE = 1;
"1039
[e = _GODONE -> -> 1 `i `b ]
"1041
[v _j `uc ~T0 @X0 1 a ]
[; ;main.c: 1041: unsigned char j = 0;
[e = _j -> -> 0 `i `uc ]
[; ;main.c: 1042: while (GODONE)
"1042
[e $U 191  ]
[e :U 192 ]
[; ;main.c: 1043: {
"1043
{
[; ;main.c: 1044: _delay((unsigned long)((2)*(16000000/4000000.0)));
"1044
[e ( __delay (1 -> * -> -> 2 `i `d / -> -> 16000000 `l `d .4000000.0 `ul ]
[; ;main.c: 1046: if (0 == (--j))
"1046
[e $ ! == -> 0 `i -> =- _j -> -> 1 `i `uc `i 194  ]
[; ;main.c: 1047: return 0;
"1047
[e ) -> -> 0 `i `uc ]
[e $UE 184  ]
[e :U 194 ]
"1048
}
[e :U 191 ]
"1042
[e $ _GODONE 192  ]
[e :U 193 ]
[; ;main.c: 1048: }
[; ;main.c: 1050: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
"1050
[e = _ad_temp -> + << -> _ADRESH `i -> 4 `i >> -> _ADRESL `i -> 4 `i `ui ]
[; ;main.c: 1052: if (0 == admax)
"1052
[e $ ! == -> -> 0 `i `ui _admax 195  ]
[; ;main.c: 1053: {
"1053
{
[; ;main.c: 1054: admax = ad_temp;
"1054
[e = _admax _ad_temp ]
[; ;main.c: 1055: admin = ad_temp;
"1055
[e = _admin _ad_temp ]
"1056
}
[; ;main.c: 1056: }
[e $U 196  ]
"1057
[e :U 195 ]
[; ;main.c: 1057: else if (ad_temp > admax)
[e $ ! > _ad_temp _admax 197  ]
[; ;main.c: 1058: admax = ad_temp;
"1058
[e = _admax _ad_temp ]
[e $U 198  ]
"1059
[e :U 197 ]
[; ;main.c: 1059: else if (ad_temp < admin)
[e $ ! < _ad_temp _admin 199  ]
[; ;main.c: 1060: admin = ad_temp;
"1060
[e = _admin _ad_temp ]
[e :U 199 ]
"1062
[e :U 198 ]
[e :U 196 ]
[; ;main.c: 1062: adsum += ad_temp;
[e =+ _adsum -> _ad_temp `ul ]
"1063
}
"1032
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 10 `i 188  ]
[e :U 189 ]
"1063
}
[; ;main.c: 1063: }
[; ;main.c: 1064: adsum -= admax;
"1064
[e =- _adsum -> _admax `ul ]
[; ;main.c: 1065: if (adsum >= admin)
"1065
[e $ ! >= _adsum -> _admin `ul 200  ]
[; ;main.c: 1066: adsum -= admin;
"1066
[e =- _adsum -> _admin `ul ]
[e $U 201  ]
"1067
[e :U 200 ]
[; ;main.c: 1067: else
[; ;main.c: 1068: adsum = 0;
"1068
[e = _adsum -> -> -> 0 `i `l `ul ]
[e :U 201 ]
[; ;main.c: 1070: adresult = adsum >> 3;
"1070
[e = _adresult -> >> _adsum -> 3 `i `ui ]
[; ;main.c: 1072: adsum = 0;
"1072
[e = _adsum -> -> -> 0 `i `l `ul ]
[; ;main.c: 1073: admin = 0;
"1073
[e = _admin -> -> 0 `i `ui ]
[; ;main.c: 1074: admax = 0;
"1074
[e = _admax -> -> 0 `i `ui ]
[; ;main.c: 1075: return 0xA5;
"1075
[e ) -> -> 165 `i `uc ]
[e $UE 184  ]
[; ;main.c: 1077: }
"1077
[e :UE 184 ]
}
