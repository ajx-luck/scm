

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Dec 23 15:19:04 2024

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	swtext1,local,class=CONST,delta=2
    33                           	psect	pa_nodes0,global,class=CODE,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	nvBANK0
    72  0069                     __pnvBANK0:	
    73  0069                     _firstTime:	
    74  0069                     	ds	1
    75  001F                     _PWM01DT	set	31
    76  001E                     _PWMD01H	set	30
    77  001D                     _PWMCON2	set	29
    78  001A                     _PWMD1L	set	26
    79  0019                     _PWMD0L	set	25
    80  0018                     _PWMTH	set	24
    81  0017                     _PWMTL	set	23
    82  0016                     _PWMCON1	set	22
    83  0015                     _PWMCON0	set	21
    84  0014                     _OSCCON	set	20
    85  0013                     _T2CON	set	19
    86  0011                     _PR2	set	17
    87  000E                     _PIE1	set	14
    88  000D                     _PIR1	set	13
    89  000B                     _INTCON	set	11
    90  0009                     _IOCB	set	9
    91  0008                     _WPUB	set	8
    92  0006                     _PORTB	set	6
    93  0005                     _TRISB	set	5
    94  0001                     _OPTION_REG	set	1
    95  0071                     _TMR2IE	set	113
    96  0073                     _RAIE	set	115
    97  0069                     _TMR2IF	set	105
    98  006B                     _RAIF	set	107
    99  0058                     _RBIF	set	88
   100  005B                     _RBIE	set	91
   101  005E                     _PEIE	set	94
   102  005F                     _GIE	set	95
   103  0030                     _RB0	set	48
   104  0031                     _RB1	set	49
   105  0099                     _ADRESH	set	153
   106  0098                     _ADRESL	set	152
   107  0096                     _ADCON1	set	150
   108  0095                     _ADCON0	set	149
   109  0093                     _ANSEL0	set	147
   110  0089                     _IOCA	set	137
   111  0088                     _WPUA	set	136
   112  0087                     _WPDA	set	135
   113  0086                     _PORTA	set	134
   114  0085                     _TRISA	set	133
   115  04B2                     _LDO_EN	set	1202
   116  04B6                     _CHS4	set	1206
   117  04A9                     _GODONE	set	1193
   118                           
   119                           	psect	cinit
   120  000D                     start_initialization:	
   121                           ; #config settings
   122                           
   123  000D                     __initialization:	
   124                           
   125                           ; Clear objects allocated to COMMON
   126  000D  3077               	movlw	low __pbssCOMMON
   127  000E  0084               	movwf	4
   128  000F  307B               	movlw	low (__pbssCOMMON+4)
   129  0010  2576               	fcall	clear_ram0
   130  0011  3020               	movlw	low __pbssBANK0
   131                           
   132                           ; Clear objects allocated to BANK0
   133  0012  1383               	bcf	3,7	;select IRP bank0
   134  0013  0084               	movwf	4
   135  0014  3056               	movlw	low (__pbssBANK0+54)
   136  0015  2576               	fcall	clear_ram0
   137  0016                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  0016                     __end_of__initialization:	
   141  0016  0183               	clrf	3
   142  0017  2C76               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0077                     __pbssCOMMON:	
   146  0077                     _prePwStep:	
   147  0077                     	ds	1
   148  0078                     _ledStep:	
   149  0078                     	ds	1
   150  0079                     _workStep:	
   151  0079                     	ds	1
   152  007A                     _chrgFlag:	
   153  007A                     	ds	1
   154                           
   155                           	psect	bssBANK0
   156  0020                     __pbssBANK0:	
   157  0020                     _count900s:	
   158  0020                     	ds	2
   159  0022                     _count8s:	
   160  0022                     	ds	2
   161  0024                     _count5s:	
   162  0024                     	ds	2
   163  0026                     _fullCount:	
   164  0026                     	ds	2
   165  0028                     _count50s:	
   166  0028                     	ds	2
   167  002A                     _batADValue:	
   168  002A                     	ds	2
   169  002C                     _outADValue:	
   170  002C                     	ds	2
   171  002E                     _power_ad:	
   172  002E                     	ds	2
   173  0030                     _result:	
   174  0030                     	ds	2
   175  0032                     _adresult:	
   176  0032                     	ds	2
   177  0034                     _sleepTime:	
   178  0034                     	ds	1
   179  0035                     _lowBatFlag:	
   180  0035                     	ds	1
   181  0036                     _preLedStep:	
   182  0036                     	ds	1
   183  0037                     _overWorkTime:	
   184  0037                     	ds	1
   185  0038                     _ledCntTime:	
   186  0038                     	ds	1
   187  0039                     _chrgMaxDuty:	
   188  0039                     	ds	1
   189  003A                     _chrgWaitTime:	
   190  003A                     	ds	1
   191  003B                     _subTime:	
   192  003B                     	ds	1
   193  003C                     _addTime:	
   194  003C                     	ds	1
   195  003D                     _lockCount:	
   196  003D                     	ds	1
   197  003E                     _chrgMaxAD:	
   198  003E                     	ds	1
   199  003F                     _chrgMode:	
   200  003F                     	ds	1
   201  0040                     _showBatTime:	
   202  0040                     	ds	1
   203  0041                     _lockLedStep:	
   204  0041                     	ds	1
   205  0042                     _reChrgCount:	
   206  0042                     	ds	1
   207  0043                     _pwStep:	
   208  0043                     	ds	1
   209  0044                     _overChrgTime:	
   210  0044                     	ds	1
   211  0045                     _startTime:	
   212  0045                     	ds	1
   213  0046                     _tempDuty:	
   214  0046                     	ds	1
   215  0047                     _addPowerCount:	
   216  0047                     	ds	1
   217  0048                     _overCount:	
   218  0048                     	ds	1
   219  0049                     _maxDuty:	
   220  0049                     	ds	1
   221  004A                     _longPressFlag:	
   222  004A                     	ds	1
   223  004B                     _keyCount:	
   224  004B                     	ds	1
   225  004C                     _ledCnt:	
   226  004C                     	ds	1
   227  004D                     _workOverOutTime:	
   228  004D                     	ds	1
   229  004E                     _protectFlag:	
   230  004E                     	ds	1
   231  004F                     _countHalfFull:	
   232  004F                     	ds	1
   233  0050                     _intCount10:	
   234  0050                     	ds	1
   235  0051                     _chrgFullFlag:	
   236  0051                     	ds	1
   237  0052                     _IntFlag:	
   238  0052                     	ds	1
   239  0053                     _count1s:	
   240  0053                     	ds	1
   241  0054                     _intCount:	
   242  0054                     	ds	1
   243  0055                     _test_adc:	
   244  0055                     	ds	1
   245                           
   246                           	psect	clrtext
   247  0576                     clear_ram0:	
   248                           ;	Called with FSR containing the base address, and
   249                           ;	W with the last address+1
   250                           
   251  0576  0064               	clrwdt	;clear the watchdog before getting into this loop
   252  0577                     clrloop0:	
   253  0577  0180               	clrf	0	;clear RAM location pointed to by FSR
   254  0578  0A84               	incf	4,f	;increment pointer
   255  0579  0604               	xorwf	4,w	;XOR with final address
   256  057A  1903               	btfsc	3,2	;have we reached the end yet?
   257  057B  3400               	retlw	0	;all done for this memory range, return
   258  057C  0604               	xorwf	4,w	;XOR again to restore value
   259  057D  2D77               	goto	clrloop0	;do the next byte
   260                           
   261                           	psect	cstackCOMMON
   262  0070                     __pcstackCOMMON:	
   263  0070                     ?_ledShow:	
   264  0070                     ??_ledShow:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_Init_System:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_AD_Init:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_checkOutA:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?_chrgCtr:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_checkBatAD:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_keyCtr:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_workCtr:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_ledCtr:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_Sleep_Mode:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_chrgPwmStop:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_chrgPwmInit:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_pwmInit:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_pwmStop:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_Isr_Timer:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ??_Isr_Timer:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_main:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_keyRead:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 1 bytes @ 0x0
   320  0070                     	ds	3
   321  0073                     ??_Init_System:	
   322  0073                     ??_AD_Init:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ??_workCtr:	
   326                           ; 1 bytes @ 0x3
   327                           
   328  0073                     ??_Sleep_Mode:	
   329                           ; 1 bytes @ 0x3
   330                           
   331  0073                     ??_chrgPwmStop:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     ??_chrgPwmInit:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     ??_pwmInit:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ??_pwmStop:	
   341                           ; 1 bytes @ 0x3
   342                           
   343  0073                     ?_ADC_Sample:	
   344                           ; 1 bytes @ 0x3
   345                           
   346  0073                     ??_keyRead:	
   347                           ; 1 bytes @ 0x3
   348                           
   349  0073                     ?___lbdiv:	
   350                           ; 1 bytes @ 0x3
   351                           
   352  0073                     ?___lbmod:	
   353                           ; 1 bytes @ 0x3
   354                           
   355  0073                     keyRead@keyStatus:	
   356                           ; 1 bytes @ 0x3
   357                           
   358  0073                     ADC_Sample@adldo:	
   359                           ; 1 bytes @ 0x3
   360                           
   361  0073                     ___lbdiv@divisor:	
   362                           ; 1 bytes @ 0x3
   363                           
   364  0073                     ___lbmod@divisor:	
   365                           ; 1 bytes @ 0x3
   366                           
   367                           
   368                           ; 1 bytes @ 0x3
   369  0073                     	ds	1
   370  0074                     ??_checkOutA:	
   371  0074                     ??_checkBatAD:	
   372                           ; 1 bytes @ 0x4
   373                           
   374  0074                     ??_keyCtr:	
   375                           ; 1 bytes @ 0x4
   376                           
   377  0074                     ??___lbdiv:	
   378                           ; 1 bytes @ 0x4
   379                           
   380  0074                     ??___lbmod:	
   381                           ; 1 bytes @ 0x4
   382                           
   383  0074                     keyCtr@kclick:	
   384                           ; 1 bytes @ 0x4
   385                           
   386  0074                     ___lbdiv@dividend:	
   387                           ; 1 bytes @ 0x4
   388                           
   389                           
   390                           ; 1 bytes @ 0x4
   391  0074                     	ds	1
   392  0075                     ___lbdiv@counter:	
   393                           
   394                           ; 1 bytes @ 0x5
   395  0075                     	ds	1
   396  0076                     ___lbdiv@quotient:	
   397                           
   398                           ; 1 bytes @ 0x6
   399  0076                     	ds	1
   400  0077                     ??_main:	
   401                           
   402                           	psect	cstackBANK0
   403  0056                     __pcstackBANK0:	
   404                           ; 1 bytes @ 0x7
   405                           
   406  0056                     ??_chrgCtr:	
   407  0056                     ??_ADC_Sample:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0056                     ___lbmod@dividend:	
   411                           ; 1 bytes @ 0x0
   412                           
   413                           
   414                           ; 1 bytes @ 0x0
   415  0056                     	ds	1
   416  0057                     ___lbmod@counter:	
   417                           
   418                           ; 1 bytes @ 0x1
   419  0057                     	ds	1
   420  0058                     ___lbmod@rem:	
   421                           
   422                           ; 1 bytes @ 0x2
   423  0058                     	ds	1
   424  0059                     ??_ledCtr:	
   425                           
   426                           ; 1 bytes @ 0x3
   427  0059                     	ds	1
   428  005A                     ADC_Sample@j:	
   429                           
   430                           ; 1 bytes @ 0x4
   431  005A                     	ds	1
   432  005B                     ADC_Sample@adch:	
   433                           
   434                           ; 1 bytes @ 0x5
   435  005B                     	ds	1
   436  005C                     ADC_Sample@i:	
   437                           
   438                           ; 1 bytes @ 0x6
   439  005C                     	ds	1
   440  005D                     ADC_Sample@adsum:	
   441                           
   442                           ; 4 bytes @ 0x7
   443  005D                     	ds	4
   444  0061                     ADC_Sample@admin:	
   445                           
   446                           ; 2 bytes @ 0xB
   447  0061                     	ds	2
   448  0063                     ADC_Sample@admax:	
   449                           
   450                           ; 2 bytes @ 0xD
   451  0063                     	ds	2
   452  0065                     ADC_Sample@ad_temp:	
   453                           
   454                           ; 2 bytes @ 0xF
   455  0065                     	ds	3
   456  0068                     checkOutA@maxAout:	
   457                           
   458                           ; 1 bytes @ 0x12
   459  0068                     	ds	1
   460                           
   461                           	psect	maintext
   462  0476                     __pmaintext:	
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 124 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, pclath, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : B00/0
   479 ;;		On exit  : 100/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1
   482 ;;      Params:         0       0       0
   483 ;;      Locals:         0       0       0
   484 ;;      Temps:          0       0       0
   485 ;;      Totals:         0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels required when called:    4
   488 ;; This function calls:
   489 ;;		_AD_Init
   490 ;;		_Init_System
   491 ;;		_Sleep_Mode
   492 ;;		_checkBatAD
   493 ;;		_checkOutA
   494 ;;		_chrgCtr
   495 ;;		_keyCtr
   496 ;;		_ledCtr
   497 ;;		_workCtr
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           
   504                           ;psect for function _main
   505  0476                     _main:	
   506                           
   507                           ;main.c: 126: Init_System();
   508                           
   509                           ;incstack = 0
   510                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   511  0476  24D5               	fcall	_Init_System
   512                           
   513                           ;main.c: 127: AD_Init();
   514  0477  2586               	fcall	_AD_Init
   515                           
   516                           ;main.c: 128: firstTime = 100;
   517  0478  3064               	movlw	100
   518  0479  1283               	bcf	3,5	;RP0=0, select bank0
   519  047A  00E9               	movwf	_firstTime
   520  047B                     l661:	
   521                           ;main.c: 129: while (1)
   522                           
   523  047B  0064               	clrwdt	;# 
   524                           
   525                           ;main.c: 132: if(intCount10 > 10)
   526  047C  300B               	movlw	11
   527  047D  1283               	bcf	3,5	;RP0=0, select bank0
   528  047E  0250               	subwf	_intCount10,w
   529  047F  1C03               	skipc
   530  0480  2C83               	goto	l3408
   531                           
   532                           ;main.c: 133: {
   533                           ;main.c: 134: intCount10 = 0;
   534  0481  01D0               	clrf	_intCount10
   535                           
   536                           ;main.c: 135: checkOutA();
   537  0482  2205               	fcall	_checkOutA
   538  0483                     l3408:	
   539                           
   540                           ;main.c: 136: }
   541                           ;main.c: 137: if(!IntFlag)
   542  0483  1283               	bcf	3,5	;RP0=0, select bank0
   543  0484  0852               	movf	_IntFlag,w
   544  0485  1903               	btfsc	3,2
   545  0486  2C7B               	goto	l661
   546                           
   547                           ;main.c: 139: IntFlag = 0;
   548  0487  01D2               	clrf	_IntFlag
   549                           
   550                           ;main.c: 140: chrgCtr();
   551  0488  2018               	fcall	_chrgCtr
   552                           
   553                           ;main.c: 141: checkBatAD();
   554  0489  22B1               	fcall	_checkBatAD
   555                           
   556                           ;main.c: 142: if(chrgFlag == 0 && lowBatFlag == 0)
   557  048A  087A               	movf	_chrgFlag,w
   558  048B  1D03               	btfss	3,2
   559  048C  2C92               	goto	l665
   560  048D  1283               	bcf	3,5	;RP0=0, select bank0
   561  048E  0835               	movf	_lowBatFlag,w
   562  048F  1D03               	btfss	3,2
   563  0490  2C92               	goto	l665
   564                           
   565                           ;main.c: 143: {
   566                           ;main.c: 144: keyCtr();
   567  0491  24AD               	fcall	_keyCtr
   568  0492                     l665:	
   569                           
   570                           ;main.c: 145: }
   571                           ;main.c: 146: workCtr();
   572  0492  243E               	fcall	_workCtr
   573                           
   574                           ;main.c: 147: ledCtr();
   575  0493  23AF               	fcall	_ledCtr
   576                           
   577                           ;main.c: 148: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0)
   578  0494  087A               	movf	_chrgFlag,w
   579  0495  1D03               	btfss	3,2
   580  0496  2CAB               	goto	l3440
   581  0497  0879               	movf	_workStep,w
   582  0498  1D03               	btfss	3,2
   583  0499  2CAB               	goto	l3440
   584  049A  084B               	movf	_keyCount,w
   585  049B  1D03               	btfss	3,2
   586  049C  2CAB               	goto	l3440
   587  049D  0869               	movf	_firstTime,w
   588  049E  1D03               	btfss	3,2
   589  049F  2CAB               	goto	l3440
   590  04A0  0840               	movf	_showBatTime,w
   591  04A1  1D03               	btfss	3,2
   592  04A2  2CAB               	goto	l3440
   593                           
   594                           ;main.c: 149: {
   595                           ;main.c: 150: if(++sleepTime >= 200)
   596  04A3  30C8               	movlw	200
   597  04A4  0AB4               	incf	_sleepTime,f
   598  04A5  0234               	subwf	_sleepTime,w
   599  04A6  1C03               	skipc
   600  04A7  2C7B               	goto	l661
   601                           
   602                           ;main.c: 151: {
   603                           ;main.c: 152: sleepTime = 0;
   604  04A8  01B4               	clrf	_sleepTime
   605                           
   606                           ;main.c: 153: Sleep_Mode();
   607  04A9  2400               	fcall	_Sleep_Mode
   608  04AA  2C7B               	goto	l661
   609  04AB                     l3440:	
   610                           
   611                           ;main.c: 156: else
   612                           ;main.c: 157: {
   613                           ;main.c: 158: sleepTime = 0;
   614  04AB  01B4               	clrf	_sleepTime
   615  04AC  2C7B               	goto	l661
   616  04AD                     __end_of_main:	
   617                           
   618                           	psect	text1
   619  043E                     __ptext1:	
   620 ;; *************** function _workCtr *****************
   621 ;; Defined at:
   622 ;;		line 535 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, status,2, status,0, pclath, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 100/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMMON   BANK0   BANK1
   636 ;;      Params:         0       0       0
   637 ;;      Locals:         0       0       0
   638 ;;      Temps:          0       0       0
   639 ;;      Totals:         0       0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    3
   643 ;; This function calls:
   644 ;;		_pwmInit
   645 ;;		_pwmStop
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _workCtr
   653  043E                     _workCtr:	
   654                           
   655                           ;main.c: 538: if(startTime > 0)
   656                           
   657                           ;incstack = 0
   658                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   659  043E  1283               	bcf	3,5	;RP0=0, select bank0
   660  043F  0845               	movf	_startTime,w
   661  0440  1D03               	btfss	3,2
   662                           
   663                           ;main.c: 539: {
   664                           ;main.c: 540: startTime--;
   665  0441  03C5               	decf	_startTime,f
   666                           
   667                           ;main.c: 541: }
   668                           ;main.c: 542: if(workStep > 0)
   669  0442  0879               	movf	_workStep,w
   670  0443  1903               	btfsc	3,2
   671  0444  2C72               	goto	l2740
   672                           
   673                           ;main.c: 543: {
   674                           ;main.c: 544: if((PWMCON0 & 0x02) == 0)
   675  0445  1895               	btfsc	21,1	;volatile
   676  0446  2C48               	goto	l2720
   677                           
   678                           ;main.c: 545: {
   679                           ;main.c: 546: pwmInit();
   680  0447  257E               	fcall	_pwmInit
   681  0448                     l2720:	
   682                           
   683                           ;main.c: 547: }
   684                           ;main.c: 548: maxDuty = 43 + (workStep*2);
   685  0448  1003               	clrc
   686  0449  0D79               	rlf	_workStep,w
   687  044A  3E2B               	addlw	43
   688  044B  00C9               	movwf	_maxDuty
   689                           
   690                           ;main.c: 549: if(overCount >= 5)
   691  044C  3005               	movlw	5
   692  044D  0248               	subwf	_overCount,w
   693  044E  1C03               	skipc
   694  044F  2C62               	goto	l2732
   695                           
   696                           ;main.c: 550: {
   697                           ;main.c: 551: if(++count5s > 500)
   698  0450  0AA4               	incf	_count5s,f
   699  0451  1903               	skipnz
   700  0452  0AA5               	incf	_count5s+1,f
   701  0453  3001               	movlw	1
   702  0454  0225               	subwf	_count5s+1,w
   703  0455  30F5               	movlw	245
   704  0456  1903               	skipnz
   705  0457  0224               	subwf	_count5s,w
   706  0458  1C03               	skipc
   707  0459  2C64               	goto	l2734
   708  045A  30B4               	movlw	180
   709                           
   710                           ;main.c: 552: {
   711                           ;main.c: 553: count5s = 0;
   712  045B  01A4               	clrf	_count5s
   713  045C  01A5               	clrf	_count5s+1
   714                           
   715                           ;main.c: 554: overWorkTime = 180;
   716  045D  00B7               	movwf	_overWorkTime
   717                           
   718                           ;main.c: 555: preLedStep = workStep;
   719  045E  0879               	movf	_workStep,w
   720  045F  00B6               	movwf	_preLedStep
   721                           
   722                           ;main.c: 556: workStep = 0;
   723  0460  01F9               	clrf	_workStep
   724  0461  2C64               	goto	l2734
   725  0462                     l2732:	
   726                           
   727                           ;main.c: 560: else
   728                           ;main.c: 561: {
   729                           ;main.c: 562: count5s = 0;
   730  0462  01A4               	clrf	_count5s
   731  0463  01A5               	clrf	_count5s+1
   732  0464                     l2734:	
   733                           
   734                           ;main.c: 563: }
   735                           ;main.c: 564: if(count1s == 0 && ++count900s >= 900)
   736  0464  0853               	movf	_count1s,w
   737  0465  1D03               	btfss	3,2
   738  0466  0008               	return
   739  0467  0AA0               	incf	_count900s,f
   740  0468  1903               	skipnz
   741  0469  0AA1               	incf	_count900s+1,f
   742  046A  3003               	movlw	3
   743  046B  0221               	subwf	_count900s+1,w
   744  046C  3084               	movlw	132
   745  046D  1903               	skipnz
   746  046E  0220               	subwf	_count900s,w
   747  046F  1803               	btfsc	3,0
   748                           
   749                           ;main.c: 565: {
   750                           ;main.c: 566: workStep = 0;
   751  0470  01F9               	clrf	_workStep
   752  0471  0008               	return
   753  0472                     l2740:	
   754                           
   755                           ;main.c: 569: else
   756                           ;main.c: 570: {
   757                           ;main.c: 571: pwmStop();
   758  0472  2594               	fcall	_pwmStop
   759                           
   760                           ;main.c: 572: count900s = 0;
   761  0473  01A0               	clrf	_count900s
   762  0474  01A1               	clrf	_count900s+1
   763  0475  0008               	return
   764  0476                     __end_of_workCtr:	
   765                           
   766                           	psect	text2
   767  0594                     __ptext2:	
   768 ;; *************** function _pwmStop *****************
   769 ;; Defined at:
   770 ;;		line 921 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		None
   779 ;; Tracked objects:
   780 ;;		On entry : 100/0
   781 ;;		On exit  : 100/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1
   784 ;;      Params:         0       0       0
   785 ;;      Locals:         0       0       0
   786 ;;      Temps:          0       0       0
   787 ;;      Totals:         0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    2
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_workCtr
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _pwmStop
   800  0594                     _pwmStop:	
   801                           
   802                           ;main.c: 923: PWMCON0 &= 0XFD;
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _pwmStop: []
   806  0594  1095               	bcf	21,1	;volatile
   807                           
   808                           ;main.c: 924: RB1 = 0;
   809  0595  1086               	bcf	6,1	;volatile
   810  0596  0008               	return
   811  0597                     __end_of_pwmStop:	
   812                           
   813                           	psect	text3
   814  057E                     __ptext3:	
   815 ;; *************** function _pwmInit *****************
   816 ;; Defined at:
   817 ;;		line 906 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, status,2
   826 ;; Tracked objects:
   827 ;;		On entry : 100/0
   828 ;;		On exit  : 100/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1
   831 ;;      Params:         0       0       0
   832 ;;      Locals:         0       0       0
   833 ;;      Temps:          0       0       0
   834 ;;      Totals:         0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    2
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_workCtr
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           
   846                           ;psect for function _pwmInit
   847  057E                     _pwmInit:	
   848                           
   849                           ;main.c: 908: PWMCON1 = 0B00000000;
   850                           
   851                           ;incstack = 0
   852                           ; Regs used in _pwmInit: [wreg+status,2]
   853                           
   854                           ;main.c: 909: PWMTH = 0X00;
   855                           
   856                           ;main.c: 910: PWMTL = 100;
   857                           
   858                           ;main.c: 913: PWMD01H = 0;
   859  057E  2570               	fcall	PL8	;call to abstracted procedure
   860                           
   861                           ;main.c: 914: PWMD1L = 50;
   862  057F  3032               	movlw	50
   863  0580  009A               	movwf	26	;volatile
   864                           
   865                           ;main.c: 915: PWM01DT = 0X00;
   866  0581  019F               	clrf	31	;volatile
   867                           
   868                           ;main.c: 917: PWMCON0 = 0X62;
   869  0582  3062               	movlw	98
   870  0583  0095               	movwf	21	;volatile
   871                           
   872                           ;main.c: 918: PWMCON2 =0X00;
   873  0584  019D               	clrf	29	;volatile
   874  0585  0008               	return
   875  0586                     __end_of_pwmInit:	
   876                           
   877                           	psect	text4
   878  03AF                     __ptext4:	
   879 ;; *************** function _ledCtr *****************
   880 ;; Defined at:
   881 ;;		line 232 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      void 
   888 ;; Registers used:
   889 ;;		wreg, status,2, status,0, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 100/0
   892 ;;		On exit  : 100/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1
   895 ;;      Params:         0       0       0
   896 ;;      Locals:         0       0       0
   897 ;;      Temps:          0       1       0
   898 ;;      Totals:         0       1       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    3
   902 ;; This function calls:
   903 ;;		___lbdiv
   904 ;;		___lbmod
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           
   911                           ;psect for function _ledCtr
   912  03AF                     _ledCtr:	
   913                           
   914                           ;main.c: 234: if(firstTime > 0)
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _ledCtr: [wreg+status,2+status,0+pclath+cstack]
   918  03AF  0869               	movf	_firstTime,w
   919  03B0  1903               	btfsc	3,2
   920  03B1  2BBC               	goto	l3356
   921  03B2  3006               	movlw	6
   922                           
   923                           ;main.c: 235: {
   924                           ;main.c: 236: firstTime--;
   925  03B3  03E9               	decf	_firstTime,f
   926                           
   927                           ;main.c: 237: ledStep = 6;
   928  03B4  00F8               	movwf	_ledStep
   929                           
   930                           ;main.c: 238: if(prePwStep < pwStep)
   931  03B5  0843               	movf	_pwStep,w
   932  03B6  0277               	subwf	_prePwStep,w
   933  03B7  1803               	skipnc
   934  03B8  0008               	return
   935                           
   936                           ;main.c: 239: {
   937                           ;main.c: 240: prePwStep = pwStep;
   938  03B9  0843               	movf	_pwStep,w
   939  03BA  00F7               	movwf	_prePwStep
   940  03BB  0008               	return
   941  03BC                     l3356:	
   942                           
   943                           ;main.c: 243: else if(overWorkTime > 0)
   944  03BC  0837               	movf	_overWorkTime,w
   945  03BD  1903               	btfsc	3,2
   946  03BE  2BCE               	goto	l3366
   947  03BF  303C               	movlw	60
   948                           
   949                           ;main.c: 244: {
   950                           ;main.c: 245: overWorkTime--;
   951  03C0  03B7               	decf	_overWorkTime,f
   952                           
   953                           ;main.c: 246: if(overWorkTime % 60 < 30)
   954  03C1  00F3               	movwf	___lbmod@divisor
   955  03C2  0837               	movf	_overWorkTime,w
   956  03C3  2532               	fcall	___lbmod
   957  03C4  00D9               	movwf	??_ledCtr
   958  03C5  301E               	movlw	30
   959  03C6  0259               	subwf	??_ledCtr,w
   960  03C7  1803               	skipnc
   961  03C8  2BCC               	goto	l3364
   962                           
   963                           ;main.c: 247: {
   964                           ;main.c: 248: ledStep = preLedStep;
   965  03C9  0836               	movf	_preLedStep,w
   966  03CA  00F8               	movwf	_ledStep
   967                           
   968                           ;main.c: 249: }
   969  03CB  0008               	return
   970  03CC                     l3364:	
   971                           
   972                           ;main.c: 250: else
   973                           ;main.c: 251: {
   974                           ;main.c: 252: ledStep = 0;
   975  03CC  01F8               	clrf	_ledStep
   976  03CD  0008               	return
   977  03CE                     l3366:	
   978                           
   979                           ;main.c: 255: else if(showBatTime > 0)
   980  03CE  0840               	movf	_showBatTime,w
   981  03CF  1903               	btfsc	3,2
   982  03D0  2BE8               	goto	l3384
   983  03D1  300E               	movlw	14
   984                           
   985                           ;main.c: 256: {
   986                           ;main.c: 257: showBatTime--;
   987  03D2  03C0               	decf	_showBatTime,f
   988                           
   989                           ;main.c: 258: if(prePwStep >= 14)
   990  03D3  0277               	subwf	_prePwStep,w
   991  03D4  1C03               	skipc
   992  03D5  2BDC               	goto	l3374
   993                           
   994                           ;main.c: 259: {
   995                           ;main.c: 260: ledStep = prePwStep/14;
   996  03D6  300E               	movlw	14
   997  03D7  00F3               	movwf	___lbdiv@divisor
   998  03D8  0877               	movf	_prePwStep,w
   999  03D9  254E               	fcall	___lbdiv
  1000  03DA  00F8               	movwf	_ledStep
  1001                           
  1002                           ;main.c: 261: }
  1003  03DB  0008               	return
  1004  03DC                     l3374:	
  1005                           
  1006                           ;main.c: 262: else if(prePwStep > 5)
  1007  03DC  3006               	movlw	6
  1008  03DD  0277               	subwf	_prePwStep,w
  1009  03DE  1C03               	skipc
  1010  03DF  2BE3               	goto	l3378
  1011  03E0                     l3376:	
  1012                           
  1013                           ;main.c: 263: {
  1014                           ;main.c: 264: ledStep = 1;
  1015  03E0  01F8               	clrf	_ledStep
  1016  03E1  0AF8               	incf	_ledStep,f
  1017                           
  1018                           ;main.c: 265: }
  1019  03E2  0008               	return
  1020  03E3                     l3378:	
  1021                           
  1022                           ;main.c: 266: else
  1023                           ;main.c: 267: {
  1024                           ;main.c: 268: if(count1s < 50)
  1025  03E3  3032               	movlw	50
  1026  03E4  0253               	subwf	_count1s,w
  1027  03E5  1C03               	btfss	3,0
  1028  03E6  2BE0               	goto	l3376
  1029  03E7  2BCC               	goto	l3364
  1030  03E8                     l3384:	
  1031                           ;main.c: 275: }
  1032                           ;main.c: 276: }
  1033                           ;main.c: 277: }
  1034                           
  1035                           
  1036                           ;main.c: 278: else if(workStep > 0)
  1037  03E8  0879               	movf	_workStep,w
  1038  03E9  1903               	btfsc	3,2
  1039  03EA  2BEE               	goto	l3388
  1040                           
  1041                           ;main.c: 279: {
  1042                           ;main.c: 280: ledStep = workStep;
  1043  03EB  0879               	movf	_workStep,w
  1044  03EC  00F8               	movwf	_ledStep
  1045                           
  1046                           ;main.c: 281: }
  1047  03ED  0008               	return
  1048  03EE                     l3388:	
  1049                           
  1050                           ;main.c: 282: else if(chrgFlag)
  1051  03EE  087A               	movf	_chrgFlag,w
  1052  03EF  1903               	btfsc	3,2
  1053  03F0  2BCC               	goto	l3364
  1054                           
  1055                           ;main.c: 283: {
  1056                           ;main.c: 284: if(count1s % 50 == 0)
  1057  03F1  3032               	movlw	50
  1058  03F2  00F3               	movwf	___lbmod@divisor
  1059  03F3  0853               	movf	_count1s,w
  1060  03F4  2532               	fcall	___lbmod
  1061  03F5  3A00               	xorlw	0
  1062  03F6  1D03               	skipz
  1063  03F7  0008               	return
  1064                           
  1065                           ;main.c: 285: {
  1066                           ;main.c: 286: if(++ledStep > 6)
  1067  03F8  3007               	movlw	7
  1068  03F9  0AF8               	incf	_ledStep,f
  1069  03FA  0278               	subwf	_ledStep,w
  1070  03FB  1C03               	skipc
  1071  03FC  0008               	return
  1072                           
  1073                           ;main.c: 287: {
  1074                           ;main.c: 288: ledStep = lockLedStep;
  1075  03FD  0841               	movf	_lockLedStep,w
  1076  03FE  00F8               	movwf	_ledStep
  1077  03FF  0008               	return
  1078  0400                     __end_of_ledCtr:	
  1079                           
  1080                           	psect	text5
  1081  0532                     __ptext5:	
  1082 ;; *************** function ___lbmod *****************
  1083 ;; Defined at:
  1084 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  dividend        1    wreg     unsigned char 
  1087 ;;  divisor         1    3[COMMON] unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  dividend        1    0[BANK0 ] unsigned char 
  1090 ;;  rem             1    2[BANK0 ] unsigned char 
  1091 ;;  counter         1    1[BANK0 ] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      unsigned char 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0
  1096 ;; Tracked objects:
  1097 ;;		On entry : 100/0
  1098 ;;		On exit  : 100/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1
  1101 ;;      Params:         1       0       0
  1102 ;;      Locals:         0       3       0
  1103 ;;      Temps:          1       0       0
  1104 ;;      Totals:         2       3       0
  1105 ;;Total ram usage:        5 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    2
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_ledCtr
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function ___lbmod
  1117  0532                     ___lbmod:	
  1118                           
  1119                           ;incstack = 0
  1120                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1121                           ;___lbmod@dividend stored from wreg
  1122  0532  00D6               	movwf	___lbmod@dividend
  1123  0533  3008               	movlw	8
  1124  0534  00D7               	movwf	___lbmod@counter
  1125  0535  01D8               	clrf	___lbmod@rem
  1126  0536                     l3008:	
  1127  0536  0856               	movf	___lbmod@dividend,w
  1128  0537  00F4               	movwf	??___lbmod
  1129  0538  3007               	movlw	7
  1130  0539  1003               	clrc
  1131  053A                     L1:	
  1132  053A  0CF4               	rrf	??___lbmod,f
  1133  053B  3EFF               	addlw	-1
  1134  053C  1003               	clrc
  1135  053D  1D03               	skipz
  1136  053E  2D3A               	goto	L1
  1137  053F  0D58               	rlf	___lbmod@rem,w
  1138  0540  0474               	iorwf	??___lbmod,w
  1139  0541  00D8               	movwf	___lbmod@rem
  1140  0542  1003               	clrc
  1141  0543  0DD6               	rlf	___lbmod@dividend,f
  1142  0544  0873               	movf	___lbmod@divisor,w
  1143  0545  0258               	subwf	___lbmod@rem,w
  1144  0546  1C03               	skipc
  1145  0547  2D4A               	goto	l3016
  1146  0548  0873               	movf	___lbmod@divisor,w
  1147  0549  02D8               	subwf	___lbmod@rem,f
  1148  054A                     l3016:	
  1149  054A  0BD7               	decfsz	___lbmod@counter,f
  1150  054B  2D36               	goto	l3008
  1151  054C  0858               	movf	___lbmod@rem,w
  1152  054D  0008               	return
  1153  054E                     __end_of___lbmod:	
  1154                           
  1155                           	psect	text6
  1156  04AD                     __ptext6:	
  1157 ;; *************** function _keyCtr *****************
  1158 ;; Defined at:
  1159 ;;		line 498 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  kclick          1    4[COMMON] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0, pclath, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 100/0
  1170 ;;		On exit  : 100/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1
  1173 ;;      Params:         0       0       0
  1174 ;;      Locals:         1       0       0
  1175 ;;      Temps:          0       0       0
  1176 ;;      Totals:         1       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    3
  1180 ;; This function calls:
  1181 ;;		_keyRead
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           
  1188                           ;psect for function _keyCtr
  1189  04AD                     _keyCtr:	
  1190                           
  1191                           ;main.c: 500: char kclick = keyRead(0x04 & (~PORTB));
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1195  04AD  0906               	comf	6,w	;volatile
  1196  04AE  3904               	andlw	4
  1197  04AF  24F7               	fcall	_keyRead
  1198  04B0  00F4               	movwf	keyCtr@kclick
  1199                           
  1200                           ;main.c: 501: if(kclick == 1)
  1201  04B1  0B74               	decfsz	keyCtr@kclick,w
  1202  04B2  2CC7               	goto	l2700
  1203                           
  1204                           ;main.c: 502: {
  1205                           ;main.c: 503: if(workStep > 0)
  1206  04B3  0879               	movf	_workStep,w
  1207  04B4  1903               	btfsc	3,2
  1208  04B5  2CBE               	goto	l2692
  1209                           
  1210                           ;main.c: 504: {
  1211                           ;main.c: 505: if(++workStep > 6)
  1212  04B6  3007               	movlw	7
  1213  04B7  0AF9               	incf	_workStep,f
  1214  04B8  0279               	subwf	_workStep,w
  1215  04B9  1C03               	skipc
  1216  04BA  0008               	return
  1217                           
  1218                           ;main.c: 506: {
  1219                           ;main.c: 507: workStep = 1;
  1220  04BB  01F9               	clrf	_workStep
  1221  04BC  0AF9               	incf	_workStep,f
  1222  04BD  0008               	return
  1223  04BE                     l2692:	
  1224                           
  1225                           ;main.c: 510: else if(showBatTime > 0)
  1226  04BE  0840               	movf	_showBatTime,w
  1227  04BF  1903               	btfsc	3,2
  1228  04C0  2CC3               	goto	l2696
  1229  04C1                     l2694:	
  1230                           
  1231                           ;main.c: 511: {
  1232                           ;main.c: 512: showBatTime = 0;
  1233  04C1  01C0               	clrf	_showBatTime
  1234                           
  1235                           ;main.c: 513: }
  1236  04C2  0008               	return
  1237  04C3                     l2696:	
  1238                           
  1239                           ;main.c: 514: else
  1240                           ;main.c: 515: {
  1241                           ;main.c: 516: showBatTime = 200;
  1242  04C3  30C8               	movlw	200
  1243  04C4  00C0               	movwf	_showBatTime
  1244                           
  1245                           ;main.c: 517: count1s = 0;
  1246  04C5  01D3               	clrf	_count1s
  1247  04C6  0008               	return
  1248  04C7                     l2700:	
  1249                           
  1250                           ;main.c: 520: else if(kclick == 2)
  1251  04C7  3002               	movlw	2
  1252  04C8  0674               	xorwf	keyCtr@kclick,w
  1253  04C9  1D03               	btfss	3,2
  1254  04CA  0008               	return
  1255                           
  1256                           ;main.c: 521: {
  1257                           ;main.c: 522: if(workStep > 0)
  1258  04CB  0879               	movf	_workStep,w
  1259  04CC  1903               	btfsc	3,2
  1260  04CD  2CD0               	goto	l777
  1261                           
  1262                           ;main.c: 523: {
  1263                           ;main.c: 524: workStep = 0;
  1264  04CE  01F9               	clrf	_workStep
  1265                           
  1266                           ;main.c: 525: }
  1267  04CF  0008               	return
  1268  04D0                     l777:	
  1269  04D0  301E               	movlw	30
  1270                           
  1271                           ;main.c: 526: else
  1272                           ;main.c: 527: {
  1273                           ;main.c: 528: workStep = 1;
  1274  04D1  01F9               	clrf	_workStep
  1275  04D2  0AF9               	incf	_workStep,f
  1276                           
  1277                           ;main.c: 529: startTime = 30;
  1278  04D3  00C5               	movwf	_startTime
  1279  04D4  2CC1               	goto	l2694
  1280  04D5                     __end_of_keyCtr:	
  1281                           
  1282                           	psect	text7
  1283  04F7                     __ptext7:	
  1284 ;; *************** function _keyRead *****************
  1285 ;; Defined at:
  1286 ;;		line 465 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  keyStatus       1    wreg     unsigned char 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  keyStatus       1    3[COMMON] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0
  1295 ;; Tracked objects:
  1296 ;;		On entry : 100/0
  1297 ;;		On exit  : 100/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1
  1300 ;;      Params:         0       0       0
  1301 ;;      Locals:         1       0       0
  1302 ;;      Temps:          0       0       0
  1303 ;;      Totals:         1       0       0
  1304 ;;Total ram usage:        1 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    2
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_keyCtr
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _keyRead
  1316  04F7                     _keyRead:	
  1317                           
  1318                           ;incstack = 0
  1319                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1320                           ;keyRead@keyStatus stored from wreg
  1321  04F7  00F3               	movwf	keyRead@keyStatus
  1322                           
  1323                           ;main.c: 467: if(keyStatus)
  1324  04F8  0873               	movf	keyRead@keyStatus,w
  1325  04F9  3064               	movlw	100
  1326  04FA  1903               	btfsc	3,2
  1327  04FB  2D09               	goto	L3
  1328                           
  1329                           ;main.c: 468: {
  1330                           ;main.c: 469: keyCount++;
  1331  04FC  0ACB               	incf	_keyCount,f
  1332                           
  1333                           ;main.c: 470: if(keyCount >= 100)
  1334  04FD  024B               	subwf	_keyCount,w
  1335  04FE  1C03               	skipc
  1336  04FF  3400               	retlw	0
  1337                           
  1338                           ;main.c: 471: {
  1339                           ;main.c: 472: keyCount = 100;
  1340  0500  3064               	movlw	100
  1341  0501  00CB               	movwf	_keyCount
  1342                           
  1343                           ;main.c: 473: if(!longPressFlag)
  1344  0502  084A               	movf	_longPressFlag,w
  1345  0503  1D03               	btfss	3,2
  1346  0504  3400               	retlw	0
  1347  0505  3002               	movlw	2
  1348                           
  1349                           ;main.c: 474: {
  1350                           ;main.c: 475: longPressFlag = 1;
  1351  0506  01CA               	clrf	_longPressFlag
  1352  0507  0ACA               	incf	_longPressFlag,f
  1353                           
  1354                           ;main.c: 476: return 2;
  1355  0508  0008               	return
  1356  0509                     L3:	
  1357                           ;main.c: 480: else
  1358                           ;main.c: 481: {
  1359                           ;main.c: 482: if(keyCount >= 100)
  1360                           
  1361  0509  024B               	subwf	_keyCount,w
  1362  050A  1C03               	skipc
  1363  050B  2D0F               	goto	l2162
  1364                           
  1365                           ;main.c: 483: {
  1366                           ;main.c: 484: keyCount = 0;
  1367  050C  01CB               	clrf	_keyCount
  1368                           
  1369                           ;main.c: 485: longPressFlag = 0;
  1370  050D  01CA               	clrf	_longPressFlag
  1371                           
  1372                           ;main.c: 486: return 0;
  1373  050E  3400               	retlw	0
  1374  050F                     l2162:	
  1375                           
  1376                           ;main.c: 488: else if(keyCount >= 6)
  1377  050F  3006               	movlw	6
  1378  0510  024B               	subwf	_keyCount,w
  1379                           
  1380                           ;main.c: 489: {
  1381                           ;main.c: 490: keyCount = 0;
  1382  0511  01CB               	clrf	_keyCount
  1383  0512  1803               	btfsc	3,0
  1384                           
  1385                           ;main.c: 491: return 1;
  1386  0513  3401               	retlw	1
  1387  0514  3400               	retlw	0
  1388  0515                     __end_of_keyRead:	
  1389                           ;main.c: 492: }
  1390                           ;main.c: 493: keyCount = 0;
  1391                           
  1392                           
  1393                           	psect	text8
  1394  0018                     __ptext8:	
  1395 ;; *************** function _chrgCtr *****************
  1396 ;; Defined at:
  1397 ;;		line 300 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0, pclath, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 100/0
  1408 ;;		On exit  : 100/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1
  1411 ;;      Params:         0       0       0
  1412 ;;      Locals:         0       0       0
  1413 ;;      Temps:          0       2       0
  1414 ;;      Totals:         0       2       0
  1415 ;;Total ram usage:        2 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    3
  1418 ;; This function calls:
  1419 ;;		___lbdiv
  1420 ;;		_chrgPwmInit
  1421 ;;		_chrgPwmStop
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _chrgCtr
  1429  0018                     _chrgCtr:	
  1430                           
  1431                           ;main.c: 302: if(PORTA & 0x02)
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1435  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1436  0019  1C86               	btfss	6,1	;volatile
  1437  001A  28F7               	goto	l3260
  1438                           
  1439                           ;main.c: 303: {
  1440                           ;main.c: 304: if(chrgFlag == 0)
  1441  001B  087A               	movf	_chrgFlag,w
  1442  001C  1D03               	btfss	3,2
  1443  001D  2824               	goto	l3136
  1444                           
  1445                           ;main.c: 305: {
  1446                           ;main.c: 306: chrgFlag = 1;
  1447  001E  01FA               	clrf	_chrgFlag
  1448  001F  0AFA               	incf	_chrgFlag,f
  1449                           
  1450                           ;main.c: 307: ledStep = 0;
  1451  0020  01F8               	clrf	_ledStep
  1452                           
  1453                           ;main.c: 308: chrgMaxDuty = 0;
  1454  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0022  01B9               	clrf	_chrgMaxDuty
  1456                           
  1457                           ;main.c: 309: chrgPwmStop();
  1458  0023  2597               	fcall	_chrgPwmStop
  1459  0024                     l3136:	
  1460                           
  1461                           ;main.c: 310: }
  1462                           ;main.c: 311: workStep = 0;
  1463  0024  01F9               	clrf	_workStep
  1464                           
  1465                           ;main.c: 312: lowBatFlag = 0;
  1466  0025  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0026  01B5               	clrf	_lowBatFlag
  1468                           
  1469                           ;main.c: 313: if(prePwStep < pwStep)
  1470  0027  0843               	movf	_pwStep,w
  1471  0028  0277               	subwf	_prePwStep,w
  1472  0029  1803               	skipnc
  1473  002A  2834               	goto	l3148
  1474                           
  1475                           ;main.c: 314: {
  1476                           ;main.c: 315: if(++count50s > 2000)
  1477  002B  2116               	fcall	PL6	;call to abstracted procedure
  1478  002C  1903               	skipnz
  1479  002D  0228               	subwf	_count50s,w
  1480  002E  1C03               	skipc
  1481  002F  2836               	goto	l3150
  1482                           
  1483                           ;main.c: 316: {
  1484                           ;main.c: 317: count50s = 0;
  1485  0030  01A8               	clrf	_count50s
  1486  0031  01A9               	clrf	_count50s+1
  1487                           
  1488                           ;main.c: 318: prePwStep++;
  1489  0032  0AF7               	incf	_prePwStep,f
  1490  0033  2836               	goto	l3150
  1491  0034                     l3148:	
  1492                           
  1493                           ;main.c: 321: else
  1494                           ;main.c: 322: {
  1495                           ;main.c: 323: count50s = 0;
  1496  0034  01A8               	clrf	_count50s
  1497  0035  01A9               	clrf	_count50s+1
  1498  0036                     l3150:	
  1499                           
  1500                           ;main.c: 324: }
  1501                           ;main.c: 325: if(protectFlag)
  1502  0036  084E               	movf	_protectFlag,w
  1503  0037  1903               	btfsc	3,2
  1504  0038  2859               	goto	l3174
  1505                           
  1506                           ;main.c: 326: {
  1507                           ;main.c: 327: chrgPwmStop();
  1508  0039  2597               	fcall	_chrgPwmStop
  1509                           
  1510                           ;main.c: 328: ledStep = 6;
  1511  003A  3006               	movlw	6
  1512  003B  00F8               	movwf	_ledStep
  1513                           
  1514                           ;main.c: 329: if(prePwStep < 99 && protectFlag == 1)
  1515  003C  3063               	movlw	99
  1516  003D  0277               	subwf	_prePwStep,w
  1517  003E  1803               	skipnc
  1518  003F  2857               	goto	l3170
  1519  0040  0B4E               	decfsz	_protectFlag,w
  1520  0041  2857               	goto	l3170
  1521                           
  1522                           ;main.c: 330: {
  1523                           ;main.c: 331: if(++reChrgCount > 250)
  1524  0042  30FB               	movlw	251
  1525  0043  0AC2               	incf	_reChrgCount,f
  1526  0044  0242               	subwf	_reChrgCount,w
  1527  0045  1C03               	skipc
  1528  0046  0008               	return
  1529  0047  300F               	movlw	15
  1530                           
  1531                           ;main.c: 332: {
  1532                           ;main.c: 333: reChrgCount = 0;
  1533  0048  01C2               	clrf	_reChrgCount
  1534                           
  1535                           ;main.c: 334: chrgFullFlag = 0;
  1536  0049  01D1               	clrf	_chrgFullFlag
  1537                           
  1538                           ;main.c: 335: protectFlag = 0;
  1539  004A  01CE               	clrf	_protectFlag
  1540                           
  1541                           ;main.c: 336: if(prePwStep > 14)
  1542  004B  0277               	subwf	_prePwStep,w
  1543  004C  1C03               	skipc
  1544  004D  2855               	goto	l3168
  1545                           
  1546                           ;main.c: 337: {
  1547                           ;main.c: 338: lockLedStep = (prePwStep/14) - 1;
  1548  004E  300E               	movlw	14
  1549  004F  00F3               	movwf	___lbdiv@divisor
  1550  0050  0877               	movf	_prePwStep,w
  1551  0051  254E               	fcall	___lbdiv
  1552  0052  3EFF               	addlw	255
  1553  0053  00C1               	movwf	_lockLedStep
  1554                           
  1555                           ;main.c: 339: }
  1556  0054  0008               	return
  1557  0055                     l3168:	
  1558                           
  1559                           ;main.c: 340: else
  1560                           ;main.c: 341: {
  1561                           ;main.c: 342: lockLedStep = 0;
  1562  0055  01C1               	clrf	_lockLedStep
  1563  0056  0008               	return
  1564  0057                     l3170:	
  1565                           
  1566                           ;main.c: 346: else
  1567                           ;main.c: 347: {
  1568                           ;main.c: 348: reChrgCount = 0;
  1569  0057  01C2               	clrf	_reChrgCount
  1570  0058  0008               	return
  1571  0059                     l3174:	
  1572                           
  1573                           ;main.c: 351: }
  1574                           ;main.c: 352: if(batADValue < 1118)
  1575  0059  3004               	movlw	4
  1576  005A  022B               	subwf	_batADValue+1,w
  1577  005B  305E               	movlw	94
  1578  005C  1903               	skipnz
  1579  005D  022A               	subwf	_batADValue,w
  1580  005E  1803               	skipnc
  1581  005F  2863               	goto	l3180
  1582  0060  300F               	movlw	15
  1583                           
  1584                           ;main.c: 353: {
  1585                           ;main.c: 354: chrgMode = 0;
  1586  0061  01BF               	clrf	_chrgMode
  1587                           
  1588                           ;main.c: 355: chrgMaxAD = 15;
  1589  0062  287C               	goto	L4
  1590  0063                     l3180:	
  1591                           ;main.c: 356: }
  1592                           
  1593                           
  1594                           ;main.c: 357: else if(batADValue < 1530)
  1595  0063  3005               	movlw	5
  1596  0064  022B               	subwf	_batADValue+1,w
  1597  0065  30FA               	movlw	250
  1598  0066  1903               	skipnz
  1599  0067  022A               	subwf	_batADValue,w
  1600  0068  1803               	skipnc
  1601  0069  2870               	goto	l3188
  1602  006A  3028               	movlw	40
  1603                           
  1604                           ;main.c: 358: {
  1605                           ;main.c: 359: chrgMode = 1;
  1606  006B  01BF               	clrf	_chrgMode
  1607  006C  0ABF               	incf	_chrgMode,f
  1608                           
  1609                           ;main.c: 360: chrgMaxAD = 40;
  1610  006D  00BE               	movwf	_chrgMaxAD
  1611                           
  1612                           ;main.c: 361: lockCount = 0;
  1613  006E  01BD               	clrf	_lockCount
  1614                           
  1615                           ;main.c: 362: }
  1616  006F  287D               	goto	l3198
  1617  0070                     l3188:	
  1618                           
  1619                           ;main.c: 363: else if(count1s == 0)
  1620  0070  0853               	movf	_count1s,w
  1621  0071  1D03               	btfss	3,2
  1622  0072  287D               	goto	l3198
  1623                           
  1624                           ;main.c: 364: {
  1625                           ;main.c: 365: if(++lockCount > 200)
  1626  0073  30C9               	movlw	201
  1627  0074  0ABD               	incf	_lockCount,f
  1628  0075  023D               	subwf	_lockCount,w
  1629  0076  1C03               	skipc
  1630  0077  287B               	goto	l3196
  1631  0078  3002               	movlw	2
  1632                           
  1633                           ;main.c: 366: {
  1634                           ;main.c: 367: lockCount = 0;
  1635  0079  01BD               	clrf	_lockCount
  1636                           
  1637                           ;main.c: 368: chrgMode = 2;
  1638  007A  00BF               	movwf	_chrgMode
  1639  007B                     l3196:	
  1640                           
  1641                           ;main.c: 369: }
  1642                           ;main.c: 371: chrgMaxAD = 40;
  1643  007B  3028               	movlw	40
  1644  007C                     L4:	
  1645  007C  00BE               	movwf	_chrgMaxAD
  1646  007D                     l3198:	
  1647                           
  1648                           ;main.c: 372: }
  1649                           ;main.c: 373: if(chrgMode == 2 && outADValue < 5)
  1650  007D  3002               	movlw	2
  1651  007E  063F               	xorwf	_chrgMode,w
  1652  007F  1D03               	btfss	3,2
  1653  0080  2897               	goto	l3208
  1654  0081  3000               	movlw	0
  1655  0082  022D               	subwf	_outADValue+1,w
  1656  0083  3005               	movlw	5
  1657  0084  1903               	skipnz
  1658  0085  022C               	subwf	_outADValue,w
  1659  0086  1803               	skipnc
  1660  0087  2897               	goto	l3208
  1661                           
  1662                           ;main.c: 374: {
  1663                           ;main.c: 375: if(++fullCount >= 200)
  1664  0088  0AA6               	incf	_fullCount,f
  1665  0089  1903               	skipnz
  1666  008A  0AA7               	incf	_fullCount+1,f
  1667  008B  3000               	movlw	0
  1668  008C  0227               	subwf	_fullCount+1,w
  1669  008D  30C8               	movlw	200
  1670  008E  1903               	skipnz
  1671  008F  0226               	subwf	_fullCount,w
  1672  0090  1C03               	skipc
  1673  0091  2899               	goto	l3210
  1674                           
  1675                           ;main.c: 376: {
  1676                           ;main.c: 377: fullCount = 0;
  1677  0092  01A6               	clrf	_fullCount
  1678  0093  01A7               	clrf	_fullCount+1
  1679                           
  1680                           ;main.c: 378: chrgFullFlag = 1;
  1681  0094  01D1               	clrf	_chrgFullFlag
  1682  0095  0AD1               	incf	_chrgFullFlag,f
  1683  0096  2899               	goto	l3210
  1684  0097                     l3208:	
  1685                           
  1686                           ;main.c: 381: else
  1687                           ;main.c: 382: {
  1688                           ;main.c: 383: fullCount = 0;
  1689  0097  01A6               	clrf	_fullCount
  1690  0098  01A7               	clrf	_fullCount+1
  1691  0099                     l3210:	
  1692                           
  1693                           ;main.c: 384: }
  1694                           ;main.c: 385: if(chrgFullFlag)
  1695  0099  0851               	movf	_chrgFullFlag,w
  1696  009A  1903               	btfsc	3,2
  1697  009B  289F               	goto	l3216
  1698                           
  1699                           ;main.c: 386: {
  1700                           ;main.c: 387: lockLedStep = 6;
  1701  009C  3006               	movlw	6
  1702  009D  00C1               	movwf	_lockLedStep
  1703                           
  1704                           ;main.c: 388: chrgPwmStop();
  1705  009E  2D97               	ljmp	l2124
  1706  009F                     l3216:	
  1707                           ;main.c: 389: }
  1708                           
  1709                           
  1710                           ;main.c: 390: else
  1711                           ;main.c: 391: {
  1712                           ;main.c: 392: if(prePwStep < 15)
  1713  009F  300F               	movlw	15
  1714  00A0  0277               	subwf	_prePwStep,w
  1715  00A1  1803               	skipnc
  1716  00A2  28A5               	goto	l3220
  1717                           
  1718                           ;main.c: 393: {
  1719                           ;main.c: 394: lockLedStep = 0;
  1720  00A3  01C1               	clrf	_lockLedStep
  1721                           
  1722                           ;main.c: 395: }
  1723  00A4  28AB               	goto	l3222
  1724  00A5                     l3220:	
  1725                           
  1726                           ;main.c: 396: else
  1727                           ;main.c: 397: {
  1728                           ;main.c: 398: lockLedStep = (prePwStep/14) - 1;
  1729  00A5  300E               	movlw	14
  1730  00A6  00F3               	movwf	___lbdiv@divisor
  1731  00A7  0877               	movf	_prePwStep,w
  1732  00A8  254E               	fcall	___lbdiv
  1733  00A9  3EFF               	addlw	255
  1734  00AA  00C1               	movwf	_lockLedStep
  1735  00AB                     l3222:	
  1736                           
  1737                           ;main.c: 399: }
  1738                           ;main.c: 400: if(batADValue > 1545 || outADValue > (chrgMaxAD + 2))
  1739  00AB  3006               	movlw	6
  1740  00AC  022B               	subwf	_batADValue+1,w
  1741  00AD  300A               	movlw	10
  1742  00AE  1903               	skipnz
  1743  00AF  022A               	subwf	_batADValue,w
  1744  00B0  1803               	skipnc
  1745  00B1  28C1               	goto	l3226
  1746  00B2  083E               	movf	_chrgMaxAD,w
  1747  00B3  3E02               	addlw	2
  1748  00B4  00D6               	movwf	??_chrgCtr
  1749  00B5  3000               	movlw	0
  1750  00B6  1803               	skipnc
  1751  00B7  3001               	movlw	1
  1752  00B8  00D7               	movwf	??_chrgCtr+1
  1753  00B9  082D               	movf	_outADValue+1,w
  1754  00BA  0257               	subwf	??_chrgCtr+1,w
  1755  00BB  1D03               	skipz
  1756  00BC  28BF               	goto	u3555
  1757  00BD  082C               	movf	_outADValue,w
  1758  00BE  0256               	subwf	??_chrgCtr,w
  1759  00BF                     u3555:	
  1760  00BF  1803               	skipnc
  1761  00C0  28D0               	goto	l3238
  1762  00C1                     l3226:	
  1763                           
  1764                           ;main.c: 401: {
  1765                           ;main.c: 402: if(++subTime > chrgWaitTime)
  1766  00C1  0ABB               	incf	_subTime,f
  1767  00C2  083B               	movf	_subTime,w
  1768  00C3  023A               	subwf	_chrgWaitTime,w
  1769  00C4  1803               	skipnc
  1770  00C5  28CE               	goto	l3236
  1771                           
  1772                           ;main.c: 403: {
  1773                           ;main.c: 404: if(chrgMaxDuty > 1)
  1774  00C6  3002               	movlw	2
  1775  00C7  0239               	subwf	_chrgMaxDuty,w
  1776  00C8  1C03               	skipc
  1777  00C9  28CB               	goto	l3232
  1778                           
  1779                           ;main.c: 405: {
  1780                           ;main.c: 406: chrgMaxDuty--;
  1781  00CA  03B9               	decf	_chrgMaxDuty,f
  1782  00CB                     l3232:	
  1783  00CB  3032               	movlw	50
  1784                           
  1785                           ;main.c: 407: }
  1786                           ;main.c: 408: subTime = 0;
  1787  00CC  01BB               	clrf	_subTime
  1788                           
  1789                           ;main.c: 409: chrgWaitTime = 50;
  1790  00CD  00BA               	movwf	_chrgWaitTime
  1791  00CE                     l3236:	
  1792                           
  1793                           ;main.c: 410: }
  1794                           ;main.c: 411: addTime = 0;
  1795  00CE  01BC               	clrf	_addTime
  1796                           
  1797                           ;main.c: 412: }
  1798  00CF  28F0               	goto	l3252
  1799  00D0                     l3238:	
  1800                           
  1801                           ;main.c: 413: else if(batADValue < 1545 && outADValue < (chrgMaxAD - 4))
  1802  00D0  3006               	movlw	6
  1803  00D1  022B               	subwf	_batADValue+1,w
  1804  00D2  3009               	movlw	9
  1805  00D3  1903               	skipnz
  1806  00D4  022A               	subwf	_batADValue,w
  1807  00D5  1803               	skipnc
  1808  00D6  28F0               	goto	l3252
  1809  00D7  083E               	movf	_chrgMaxAD,w
  1810  00D8  3EFC               	addlw	252
  1811  00D9  00D6               	movwf	??_chrgCtr
  1812  00DA  30FF               	movlw	255
  1813  00DB  1803               	skipnc
  1814  00DC  3000               	movlw	0
  1815  00DD  00D7               	movwf	??_chrgCtr+1
  1816  00DE  022D               	subwf	_outADValue+1,w
  1817  00DF  1D03               	skipz
  1818  00E0  28E3               	goto	u3595
  1819  00E1  0856               	movf	??_chrgCtr,w
  1820  00E2  022C               	subwf	_outADValue,w
  1821  00E3                     u3595:	
  1822  00E3  1803               	skipnc
  1823  00E4  28F0               	goto	l3252
  1824                           
  1825                           ;main.c: 414: {
  1826                           ;main.c: 415: if(++addTime > chrgWaitTime)
  1827  00E5  0ABC               	incf	_addTime,f
  1828  00E6  083C               	movf	_addTime,w
  1829  00E7  023A               	subwf	_chrgWaitTime,w
  1830  00E8  1803               	skipnc
  1831  00E9  28EF               	goto	l3250
  1832  00EA  304B               	movlw	75
  1833                           
  1834                           ;main.c: 416: {
  1835                           ;main.c: 417: addTime = 0;
  1836  00EB  01BC               	clrf	_addTime
  1837                           
  1838                           ;main.c: 418: if(chrgMaxDuty < 75)
  1839  00EC  0239               	subwf	_chrgMaxDuty,w
  1840  00ED  1C03               	btfss	3,0
  1841                           
  1842                           ;main.c: 419: {
  1843                           ;main.c: 420: chrgMaxDuty++;
  1844  00EE  0AB9               	incf	_chrgMaxDuty,f
  1845  00EF                     l3250:	
  1846                           
  1847                           ;main.c: 421: }
  1848                           ;main.c: 422: }
  1849                           ;main.c: 423: subTime = 0;
  1850  00EF  01BB               	clrf	_subTime
  1851  00F0                     l3252:	
  1852                           
  1853                           ;main.c: 424: }
  1854                           ;main.c: 427: if((PWMCON0 & 0x01) == 0)
  1855  00F0  1815               	btfsc	21,0	;volatile
  1856  00F1  28F3               	goto	l3256
  1857                           
  1858                           ;main.c: 428: {
  1859                           ;main.c: 429: chrgPwmInit();
  1860  00F2  2569               	fcall	_chrgPwmInit
  1861  00F3                     l3256:	
  1862                           
  1863                           ;main.c: 430: }
  1864                           ;main.c: 431: PWMD01H = 0X00;
  1865  00F3  019E               	clrf	30	;volatile
  1866                           
  1867                           ;main.c: 432: PWMD0L = chrgMaxDuty;
  1868  00F4  0839               	movf	_chrgMaxDuty,w
  1869  00F5  0099               	movwf	25	;volatile
  1870  00F6  0008               	return
  1871  00F7                     l3260:	
  1872  00F7  3014               	movlw	20
  1873                           
  1874                           ;main.c: 438: chrgFlag = 0;
  1875  00F8  01FA               	clrf	_chrgFlag
  1876                           
  1877                           ;main.c: 439: chrgFullFlag = 0;
  1878  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1879  00FA  01D1               	clrf	_chrgFullFlag
  1880                           
  1881                           ;main.c: 440: protectFlag = 0;
  1882  00FB  01CE               	clrf	_protectFlag
  1883                           
  1884                           ;main.c: 441: chrgMode = 0;
  1885  00FC  01BF               	clrf	_chrgMode
  1886                           
  1887                           ;main.c: 442: chrgMaxAD = 0;
  1888  00FD  01BE               	clrf	_chrgMaxAD
  1889                           
  1890                           ;main.c: 443: chrgMaxDuty = 0;
  1891  00FE  01B9               	clrf	_chrgMaxDuty
  1892                           
  1893                           ;main.c: 444: lockCount = 0;
  1894  00FF  01BD               	clrf	_lockCount
  1895                           
  1896                           ;main.c: 445: lockLedStep = 0;
  1897  0100  01C1               	clrf	_lockLedStep
  1898                           
  1899                           ;main.c: 446: chrgWaitTime = 20;
  1900  0101  00BA               	movwf	_chrgWaitTime
  1901                           
  1902                           ;main.c: 447: chrgPwmStop();
  1903  0102  2597               	fcall	_chrgPwmStop
  1904                           
  1905                           ;main.c: 448: if(prePwStep > 0 && prePwStep > pwStep)
  1906  0103  0877               	movf	_prePwStep,w
  1907  0104  1903               	btfsc	3,2
  1908  0105  2913               	goto	l3276
  1909  0106  0877               	movf	_prePwStep,w
  1910  0107  0243               	subwf	_pwStep,w
  1911  0108  1803               	skipnc
  1912  0109  2913               	goto	l3276
  1913                           
  1914                           ;main.c: 449: {
  1915                           ;main.c: 450: if(++count50s > 2000)
  1916  010A  2116               	fcall	PL6	;call to abstracted procedure
  1917  010B  1903               	skipnz
  1918  010C  0228               	subwf	_count50s,w
  1919  010D  1C03               	skipc
  1920  010E  0008               	return
  1921                           
  1922                           ;main.c: 451: {
  1923                           ;main.c: 452: count50s = 0;
  1924  010F  01A8               	clrf	_count50s
  1925  0110  01A9               	clrf	_count50s+1
  1926                           
  1927                           ;main.c: 453: prePwStep--;
  1928  0111  03F7               	decf	_prePwStep,f
  1929  0112  0008               	return
  1930  0113                     l3276:	
  1931                           
  1932                           ;main.c: 456: else
  1933                           ;main.c: 457: {
  1934                           ;main.c: 458: count50s = 0;
  1935  0113  01A8               	clrf	_count50s
  1936  0114  01A9               	clrf	_count50s+1
  1937  0115  0008               	return
  1938  0116                     __end_of_chrgCtr:	
  1939  0116                     PL6:	
  1940  0116  0AA8               	incf	_count50s,f
  1941  0117  1903               	skipnz
  1942  0118  0AA9               	incf	_count50s+1,f
  1943  0119  3007               	movlw	7
  1944  011A  0229               	subwf	_count50s+1,w
  1945  011B  34D1               	retlw	209
  1946  011C                     __end_ofPL6:	
  1947                           
  1948                           	psect	text9
  1949  0597                     __ptext9:	
  1950 ;; *************** function _chrgPwmStop *****************
  1951 ;; Defined at:
  1952 ;;		line 900 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		None
  1961 ;; Tracked objects:
  1962 ;;		On entry : 100/0
  1963 ;;		On exit  : 100/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1
  1966 ;;      Params:         0       0       0
  1967 ;;      Locals:         0       0       0
  1968 ;;      Temps:          0       0       0
  1969 ;;      Totals:         0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    2
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_chrgCtr
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _chrgPwmStop
  1982  0597                     _chrgPwmStop:	
  1983  0597                     l2124:	
  1984                           ;incstack = 0
  1985                           ; Regs used in _chrgPwmStop: []
  1986                           
  1987                           
  1988                           ;main.c: 902: PWMCON0 &= 0xFE;
  1989  0597  1015               	bcf	21,0	;volatile
  1990                           
  1991                           ;main.c: 903: RB0 = 0;
  1992  0598  1006               	bcf	6,0	;volatile
  1993  0599  0008               	return
  1994  059A                     __end_of_chrgPwmStop:	
  1995                           
  1996                           	psect	text10
  1997  0569                     __ptext10:	
  1998 ;; *************** function _chrgPwmInit *****************
  1999 ;; Defined at:
  2000 ;;		line 883 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;		None
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;		None
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2
  2009 ;; Tracked objects:
  2010 ;;		On entry : 100/0
  2011 ;;		On exit  : 100/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1
  2014 ;;      Params:         0       0       0
  2015 ;;      Locals:         0       0       0
  2016 ;;      Temps:          0       0       0
  2017 ;;      Totals:         0       0       0
  2018 ;;Total ram usage:        0 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    2
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_chrgCtr
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _chrgPwmInit
  2030  0569                     _chrgPwmInit:	
  2031                           
  2032                           ;main.c: 885: PWMCON1 = 0B00000000;
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2036                           
  2037                           ;main.c: 887: PWMTH = 0X00;
  2038                           
  2039                           ;main.c: 888: PWMTL = 100;
  2040                           
  2041                           ;main.c: 892: PWMD01H = 0;
  2042  0569  2570               	fcall	PL8	;call to abstracted procedure
  2043                           
  2044                           ;main.c: 893: PWMD0L = 1;
  2045  056A  3001               	movlw	1
  2046  056B  0099               	movwf	25	;volatile
  2047                           
  2048                           ;main.c: 894: PWM01DT = 0X00;
  2049  056C  019F               	clrf	31	;volatile
  2050                           
  2051                           ;main.c: 896: PWMCON0 = 0X01;
  2052  056D  0095               	movwf	21	;volatile
  2053                           
  2054                           ;main.c: 897: PWMCON2 =0X00;
  2055  056E  019D               	clrf	29	;volatile
  2056  056F  0008               	return
  2057  0570                     __end_of_chrgPwmInit:	
  2058  0570                     PL8:	
  2059  0570  0196               	clrf	22	;volatile
  2060  0571  0198               	clrf	24	;volatile
  2061  0572  3064               	movlw	100
  2062  0573  0097               	movwf	23	;volatile
  2063  0574  019E               	clrf	30	;volatile
  2064  0575  0008               	return
  2065  0576                     __end_ofPL8:	
  2066                           
  2067                           	psect	text11
  2068  054E                     __ptext11:	
  2069 ;; *************** function ___lbdiv *****************
  2070 ;; Defined at:
  2071 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  dividend        1    wreg     unsigned char 
  2074 ;;  divisor         1    3[COMMON] unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  dividend        1    4[COMMON] unsigned char 
  2077 ;;  quotient        1    6[COMMON] unsigned char 
  2078 ;;  counter         1    5[COMMON] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      unsigned char 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2, status,0
  2083 ;; Tracked objects:
  2084 ;;		On entry : 100/0
  2085 ;;		On exit  : 100/0
  2086 ;;		Unchanged: 100/0
  2087 ;; Data sizes:     COMMON   BANK0   BANK1
  2088 ;;      Params:         1       0       0
  2089 ;;      Locals:         3       0       0
  2090 ;;      Temps:          0       0       0
  2091 ;;      Totals:         4       0       0
  2092 ;;Total ram usage:        4 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    2
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_ledCtr
  2099 ;;		_chrgCtr
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           
  2104                           ;psect for function ___lbdiv
  2105  054E                     ___lbdiv:	
  2106                           
  2107                           ;incstack = 0
  2108                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2109                           ;___lbdiv@dividend stored from wreg
  2110  054E  00F4               	movwf	___lbdiv@dividend
  2111  054F  01F6               	clrf	___lbdiv@quotient
  2112  0550  0873               	movf	___lbdiv@divisor,w
  2113  0551  1903               	btfsc	3,2
  2114  0552  2D67               	goto	l2280
  2115  0553  01F5               	clrf	___lbdiv@counter
  2116  0554                     l2266:	
  2117  0554  0AF5               	incf	___lbdiv@counter,f
  2118  0555  1BF3               	btfsc	___lbdiv@divisor,7
  2119  0556  2D5A               	goto	l1158
  2120  0557  1003               	clrc
  2121  0558  0DF3               	rlf	___lbdiv@divisor,f
  2122  0559  2D54               	goto	l2266
  2123  055A                     l1158:	
  2124  055A  1003               	clrc
  2125  055B  0DF6               	rlf	___lbdiv@quotient,f
  2126  055C  0873               	movf	___lbdiv@divisor,w
  2127  055D  0274               	subwf	___lbdiv@dividend,w
  2128  055E  1C03               	skipc
  2129  055F  2D64               	goto	L5
  2130  0560  0873               	movf	___lbdiv@divisor,w
  2131  0561  02F4               	subwf	___lbdiv@dividend,f
  2132  0562  1476               	bsf	___lbdiv@quotient,0
  2133  0563  1003               	clrc
  2134  0564                     L5:	
  2135  0564  0CF3               	rrf	___lbdiv@divisor,f
  2136  0565  0BF5               	decfsz	___lbdiv@counter,f
  2137  0566  2D5A               	goto	l1158
  2138  0567                     l2280:	
  2139  0567  0876               	movf	___lbdiv@quotient,w
  2140  0568  0008               	return
  2141  0569                     __end_of___lbdiv:	
  2142                           
  2143                           	psect	text12
  2144  0205                     __ptext12:	
  2145 ;; *************** function _checkOutA *****************
  2146 ;; Defined at:
  2147 ;;		line 576 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2152 ;;  maxtempV        1    0        unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, pclath, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 100/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1
  2162 ;;      Params:         0       0       0
  2163 ;;      Locals:         0       2       0
  2164 ;;      Temps:          2       0       0
  2165 ;;      Totals:         2       2       0
  2166 ;;Total ram usage:        4 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		_ADC_Sample
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _checkOutA
  2178  0205                     _checkOutA:	
  2179                           
  2180                           ;main.c: 578: if(chrgFlag)
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2184  0205  087A               	movf	_chrgFlag,w
  2185                           
  2186                           ;main.c: 579: {
  2187                           ;main.c: 580: test_adc = ADC_Sample(4, 5);
  2188  0206  3005               	movlw	5
  2189  0207  00F3               	movwf	ADC_Sample@adldo
  2190  0208  1903               	btfsc	3,2
  2191  0209  2A0C               	goto	L12
  2192  020A  3004               	movlw	4
  2193  020B  2A0D               	goto	L7
  2194  020C                     L12:	
  2195                           ;main.c: 582: else
  2196                           ;main.c: 583: {
  2197                           ;main.c: 584: test_adc = ADC_Sample(0, 5);
  2198                           
  2199                           ;main.c: 581: }
  2200                           
  2201  020C  3000               	movlw	0
  2202  020D                     L7:	
  2203  020D  211C               	fcall	_ADC_Sample
  2204  020E  00D5               	movwf	_test_adc	;volatile
  2205                           
  2206                           ;main.c: 585: }
  2207                           ;main.c: 586: if (0xA5 == test_adc)
  2208  020F  30A5               	movlw	165
  2209  0210  0655               	xorwf	_test_adc,w	;volatile
  2210  0211  1D03               	btfss	3,2
  2211  0212  2AA9               	goto	l3122
  2212                           
  2213                           ;main.c: 587: {
  2214                           ;main.c: 588: if(chrgFlag && adresult > 210)
  2215  0213  087A               	movf	_chrgFlag,w
  2216  0214  1903               	btfsc	3,2
  2217  0215  2A26               	goto	l3040
  2218  0216  3000               	movlw	0
  2219  0217  0233               	subwf	_adresult+1,w	;volatile
  2220  0218  30D3               	movlw	211
  2221  0219  1903               	skipnz
  2222  021A  0232               	subwf	_adresult,w	;volatile
  2223  021B  1C03               	skipc
  2224  021C  2A26               	goto	l3040
  2225                           
  2226                           ;main.c: 589: {
  2227                           ;main.c: 590: if(++overChrgTime > 10)
  2228  021D  300B               	movlw	11
  2229  021E  0AC4               	incf	_overChrgTime,f
  2230  021F  0244               	subwf	_overChrgTime,w
  2231  0220  1C03               	skipc
  2232  0221  2A27               	goto	l3042
  2233  0222  3002               	movlw	2
  2234                           
  2235                           ;main.c: 591: {
  2236                           ;main.c: 592: overChrgTime = 0;
  2237  0223  01C4               	clrf	_overChrgTime
  2238                           
  2239                           ;main.c: 593: protectFlag = 2;
  2240  0224  00CE               	movwf	_protectFlag
  2241  0225  2A27               	goto	l3042
  2242  0226                     l3040:	
  2243                           
  2244                           ;main.c: 597: else
  2245                           ;main.c: 598: {
  2246                           ;main.c: 599: overChrgTime = 0;
  2247  0226  01C4               	clrf	_overChrgTime
  2248  0227                     l3042:	
  2249                           
  2250                           ;main.c: 600: }
  2251                           ;main.c: 601: outADValue = adresult;
  2252  0227  0833               	movf	_adresult+1,w	;volatile
  2253  0228  00AD               	movwf	_outADValue+1
  2254  0229  0832               	movf	_adresult,w	;volatile
  2255  022A  00AC               	movwf	_outADValue
  2256                           
  2257                           ;main.c: 603: if(workStep && (outADValue > 220))
  2258  022B  0879               	movf	_workStep,w
  2259  022C  1903               	btfsc	3,2
  2260  022D  2A3D               	goto	l3052
  2261  022E  3000               	movlw	0
  2262  022F  022D               	subwf	_outADValue+1,w
  2263  0230  30DD               	movlw	221
  2264  0231  1903               	skipnz
  2265  0232  022C               	subwf	_outADValue,w
  2266  0233  1C03               	skipc
  2267  0234  2A3D               	goto	l3052
  2268                           
  2269                           ;main.c: 604: {
  2270                           ;main.c: 605: if(++workOverOutTime > 50)
  2271  0235  3033               	movlw	51
  2272  0236  0ACD               	incf	_workOverOutTime,f
  2273  0237  024D               	subwf	_workOverOutTime,w
  2274  0238  1C03               	skipc
  2275  0239  2A3E               	goto	l3056
  2276                           
  2277                           ;main.c: 606: {
  2278                           ;main.c: 607: workOverOutTime = 0;
  2279  023A  01CD               	clrf	_workOverOutTime
  2280                           
  2281                           ;main.c: 608: workStep = 0;
  2282  023B  01F9               	clrf	_workStep
  2283  023C  2A3E               	goto	l3056
  2284  023D                     l3052:	
  2285                           
  2286                           ;main.c: 611: else
  2287                           ;main.c: 612: {
  2288                           ;main.c: 613: workOverOutTime = 0;
  2289  023D  01CD               	clrf	_workOverOutTime
  2290  023E                     l3056:	
  2291                           
  2292                           ;main.c: 616: if(workStep < 6 && outADValue > maxtempV)
  2293  023E  3006               	movlw	6
  2294  023F  0279               	subwf	_workStep,w
  2295  0240  3000               	movlw	0
  2296  0241  1803               	skipnc
  2297  0242  2A52               	goto	L13
  2298  0243  022D               	subwf	_outADValue+1,w
  2299  0244  3029               	movlw	41
  2300  0245  1903               	skipnz
  2301  0246  022C               	subwf	_outADValue,w
  2302  0247  1C03               	skipc
  2303  0248  2A51               	goto	l3064
  2304  0249                     l3060:	
  2305                           
  2306                           ;main.c: 617: {
  2307                           ;main.c: 618: if(++overCount > 5)
  2308  0249  3006               	movlw	6
  2309  024A  0AC8               	incf	_overCount,f
  2310  024B  0248               	subwf	_overCount,w
  2311  024C  1C03               	skipc
  2312  024D  2AA5               	goto	l3118
  2313                           
  2314                           ;main.c: 619: {
  2315                           ;main.c: 620: overCount = 5;
  2316  024E  3005               	movlw	5
  2317  024F  00C8               	movwf	_overCount
  2318  0250  2AA5               	goto	l3118
  2319  0251                     l3064:	
  2320                           
  2321                           ;main.c: 623: else if(outADValue > (maxtempV+3))
  2322  0251  3000               	movlw	0
  2323  0252                     L13:	
  2324  0252  022D               	subwf	_outADValue+1,w
  2325  0253  302C               	movlw	44
  2326  0254  1903               	skipnz
  2327  0255  022C               	subwf	_outADValue,w
  2328  0256  1803               	btfsc	3,0
  2329  0257  2A49               	goto	l3060
  2330                           
  2331                           ;main.c: 630: else
  2332                           ;main.c: 631: {
  2333                           ;main.c: 632: unsigned char maxAout = 7;
  2334                           
  2335                           ;main.c: 624: {
  2336                           ;main.c: 625: if(++overCount > 5)
  2337  0258  3007               	movlw	7
  2338  0259  00E8               	movwf	checkOutA@maxAout
  2339                           
  2340                           ;main.c: 633: if(workStep == 1)
  2341  025A  0B79               	decfsz	_workStep,w
  2342  025B  2A5E               	goto	l3076
  2343                           
  2344                           ;main.c: 634: {
  2345                           ;main.c: 635: maxAout = maxAout + 5;
  2346  025C  3005               	movlw	5
  2347  025D  2A77               	goto	L10
  2348  025E                     l3076:	
  2349                           ;main.c: 636: }
  2350                           
  2351                           
  2352                           ;main.c: 637: else if(workStep == 2)
  2353  025E  3002               	movlw	2
  2354  025F  0679               	xorwf	_workStep,w
  2355  0260  1D03               	btfss	3,2
  2356  0261  2A64               	goto	l3080
  2357                           
  2358                           ;main.c: 638: {
  2359                           ;main.c: 639: maxAout = maxAout + 6;
  2360  0262  3006               	movlw	6
  2361  0263  2A77               	goto	L10
  2362  0264                     l3080:	
  2363                           ;main.c: 640: }
  2364                           
  2365                           
  2366                           ;main.c: 641: else if(workStep == 3)
  2367  0264  3003               	movlw	3
  2368  0265  0679               	xorwf	_workStep,w
  2369  0266  1D03               	btfss	3,2
  2370  0267  2A6A               	goto	l3084
  2371  0268                     l3082:	
  2372                           
  2373                           ;main.c: 642: {
  2374                           ;main.c: 643: maxAout = maxAout + 7;
  2375  0268  3007               	movlw	7
  2376  0269  2A77               	goto	L10
  2377  026A                     l3084:	
  2378                           ;main.c: 644: }
  2379                           
  2380                           
  2381                           ;main.c: 645: else if(workStep == 4)
  2382  026A  3004               	movlw	4
  2383  026B  0679               	xorwf	_workStep,w
  2384  026C  1903               	btfsc	3,2
  2385  026D  2A68               	goto	l3082
  2386                           
  2387                           ;main.c: 649: else if(workStep == 5)
  2388  026E  3005               	movlw	5
  2389  026F  0679               	xorwf	_workStep,w
  2390  0270  1903               	btfsc	3,2
  2391  0271  2A76               	goto	l3090
  2392                           
  2393                           ;main.c: 653: else if(workStep == 6)
  2394                           
  2395                           ;main.c: 652: }
  2396  0272  3006               	movlw	6
  2397  0273  0679               	xorwf	_workStep,w
  2398  0274  1D03               	btfss	3,2
  2399  0275  2A78               	goto	l809
  2400  0276                     l3090:	
  2401                           
  2402                           ;main.c: 650: {
  2403                           ;main.c: 651: maxAout = maxAout + 8;
  2404  0276  3008               	movlw	8
  2405  0277                     L10:	
  2406  0277  07E8               	addwf	checkOutA@maxAout,f
  2407  0278                     l809:	
  2408                           
  2409                           ;main.c: 656: }
  2410                           ;main.c: 657: if(overCount > 0)
  2411  0278  0848               	movf	_overCount,w
  2412  0279  1D03               	btfss	3,2
  2413                           
  2414                           ;main.c: 658: {
  2415                           ;main.c: 659: overCount--;
  2416  027A  03C8               	decf	_overCount,f
  2417                           
  2418                           ;main.c: 660: }
  2419                           ;main.c: 661: if(outADValue > maxAout)
  2420  027B  0868               	movf	checkOutA@maxAout,w
  2421  027C  00F4               	movwf	??_checkOutA
  2422  027D  01F5               	clrf	??_checkOutA+1
  2423  027E  082D               	movf	_outADValue+1,w
  2424  027F  0275               	subwf	??_checkOutA+1,w
  2425  0280  1D03               	skipz
  2426  0281  2A84               	goto	u3315
  2427  0282  082C               	movf	_outADValue,w
  2428  0283  0274               	subwf	??_checkOutA,w
  2429  0284                     u3315:	
  2430  0284  1803               	skipnc
  2431  0285  2A9F               	goto	l3110
  2432                           
  2433                           ;main.c: 662: {
  2434                           ;main.c: 663: if(++addPowerCount > 3)
  2435  0286  3004               	movlw	4
  2436  0287  0AC7               	incf	_addPowerCount,f
  2437  0288  0247               	subwf	_addPowerCount,w
  2438  0289  1C03               	skipc
  2439  028A  2AA5               	goto	l3118
  2440                           
  2441                           ;main.c: 664: {
  2442                           ;main.c: 665: addPowerCount = 3;
  2443  028B  3003               	movlw	3
  2444  028C  00C7               	movwf	_addPowerCount
  2445                           
  2446                           ;main.c: 666: if(startTime == 0)
  2447  028D  0845               	movf	_startTime,w
  2448  028E  1D03               	btfss	3,2
  2449  028F  2A9C               	goto	l3108
  2450                           
  2451                           ;main.c: 667: {
  2452                           ;main.c: 668: tempDuty = 72 + (workStep*4);
  2453  0290  0879               	movf	_workStep,w
  2454  0291  00F4               	movwf	??_checkOutA
  2455  0292  3001               	movlw	1
  2456  0293  1003               	clrc
  2457  0294                     L6:	
  2458  0294  0DF4               	rlf	??_checkOutA,f
  2459  0295  3EFF               	addlw	-1
  2460  0296  1003               	clrc
  2461  0297  1D03               	skipz
  2462  0298  2A94               	goto	L6
  2463  0299  0D74               	rlf	??_checkOutA,w
  2464  029A  3E48               	addlw	72
  2465  029B  2A9D               	goto	L11
  2466  029C                     l3108:	
  2467                           ;main.c: 670: }
  2468                           
  2469                           
  2470                           ;main.c: 671: else
  2471                           ;main.c: 672: {
  2472                           ;main.c: 673: tempDuty = maxDuty;
  2473  029C  0849               	movf	_maxDuty,w
  2474  029D                     L11:	
  2475  029D  00C6               	movwf	_tempDuty
  2476  029E  2AA5               	goto	l3118
  2477  029F                     l3110:	
  2478                           
  2479                           ;main.c: 678: else
  2480                           ;main.c: 679: {
  2481                           ;main.c: 680: addPowerCount = 0;
  2482  029F  01C7               	clrf	_addPowerCount
  2483                           
  2484                           ;main.c: 681: if(tempDuty > maxDuty)
  2485  02A0  0846               	movf	_tempDuty,w
  2486  02A1  0249               	subwf	_maxDuty,w
  2487  02A2  1803               	skipnc
  2488  02A3  2A9C               	goto	l3108
  2489                           
  2490                           ;main.c: 682: {
  2491                           ;main.c: 683: tempDuty--;
  2492  02A4  03C6               	decf	_tempDuty,f
  2493  02A5                     l3118:	
  2494                           ;main.c: 684: }
  2495                           
  2496                           
  2497                           ;main.c: 688: }
  2498                           ;main.c: 690: }
  2499                           ;main.c: 692: }
  2500                           ;main.c: 693: PWMD01H = 0X00;
  2501  02A5  019E               	clrf	30	;volatile
  2502                           
  2503                           ;main.c: 694: PWMD1L = tempDuty;
  2504  02A6  0846               	movf	_tempDuty,w
  2505  02A7  009A               	movwf	26	;volatile
  2506                           
  2507                           ;main.c: 695: }
  2508  02A8  0008               	return
  2509  02A9                     l3122:	
  2510                           
  2511                           ;main.c: 696: else
  2512                           ;main.c: 697: {
  2513                           ;main.c: 698: ADCON0 = 0;
  2514  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  2515  02AA  0195               	clrf	21	;volatile
  2516                           
  2517                           ;main.c: 699: ADCON1 = 0;
  2518  02AB  0196               	clrf	22	;volatile
  2519                           
  2520                           ;main.c: 700: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2521  02AC  3085               	movlw	133
  2522  02AD  00F4               	movwf	??_checkOutA
  2523  02AE                     u4037:	
  2524  02AE  0BF4               	decfsz	??_checkOutA,f
  2525  02AF  2AAE               	goto	u4037
  2526  02B0  0008               	return
  2527  02B1                     __end_of_checkOutA:	
  2528                           
  2529                           	psect	text13
  2530  02B1                     __ptext13:	
  2531 ;; *************** function _checkBatAD *****************
  2532 ;; Defined at:
  2533 ;;		line 704 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, status,2, status,0, pclath, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 100/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMMON   BANK0   BANK1
  2547 ;;      Params:         0       0       0
  2548 ;;      Locals:         0       0       0
  2549 ;;      Temps:          2       0       0
  2550 ;;      Totals:         2       0       0
  2551 ;;Total ram usage:        2 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    3
  2554 ;; This function calls:
  2555 ;;		_ADC_Sample
  2556 ;; This function is called by:
  2557 ;;		_main
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           
  2562                           ;psect for function _checkBatAD
  2563  02B1                     _checkBatAD:	
  2564                           
  2565                           ;main.c: 706: test_adc = ADC_Sample(2, 5);
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2569  02B1  3005               	movlw	5
  2570  02B2  00F3               	movwf	ADC_Sample@adldo
  2571  02B3  3002               	movlw	2
  2572  02B4  211C               	fcall	_ADC_Sample
  2573  02B5  00D5               	movwf	_test_adc	;volatile
  2574                           
  2575                           ;main.c: 707: if (0xA5 == test_adc)
  2576  02B6  30A5               	movlw	165
  2577  02B7  0655               	xorwf	_test_adc,w	;volatile
  2578  02B8  1D03               	btfss	3,2
  2579  02B9  2B18               	goto	l3318
  2580                           
  2581                           ;main.c: 708: {
  2582                           ;main.c: 709: batADValue = adresult;
  2583  02BA  0833               	movf	_adresult+1,w	;volatile
  2584  02BB  00AB               	movwf	_batADValue+1
  2585  02BC  0832               	movf	_adresult,w	;volatile
  2586  02BD  00AA               	movwf	_batADValue
  2587                           
  2588                           ;main.c: 710: if(batADValue < 1117)
  2589  02BE  3004               	movlw	4
  2590  02BF  022B               	subwf	_batADValue+1,w
  2591  02C0  305D               	movlw	93
  2592  02C1  1903               	skipnz
  2593  02C2  022A               	subwf	_batADValue,w
  2594  02C3  1803               	skipnc
  2595  02C4  2ADE               	goto	l3300
  2596                           
  2597                           ;main.c: 711: {
  2598                           ;main.c: 712: pwStep = 0;
  2599  02C5  01C3               	clrf	_pwStep
  2600                           
  2601                           ;main.c: 713: if(++count8s > 800)
  2602  02C6  0AA2               	incf	_count8s,f
  2603  02C7  1903               	skipnz
  2604  02C8  0AA3               	incf	_count8s+1,f
  2605  02C9  3003               	movlw	3
  2606  02CA  0223               	subwf	_count8s+1,w
  2607  02CB  3021               	movlw	33
  2608  02CC  1903               	skipnz
  2609  02CD  0222               	subwf	_count8s,w
  2610  02CE  1C03               	skipc
  2611  02CF  2B0B               	goto	l3312
  2612                           
  2613                           ;main.c: 714: {
  2614                           ;main.c: 715: count8s = 0;
  2615  02D0  01A2               	clrf	_count8s
  2616  02D1  01A3               	clrf	_count8s+1
  2617                           
  2618                           ;main.c: 716: lowBatFlag = 1;
  2619  02D2  01B5               	clrf	_lowBatFlag
  2620  02D3  0AB5               	incf	_lowBatFlag,f
  2621                           
  2622                           ;main.c: 717: if(workStep > 0)
  2623  02D4  0879               	movf	_workStep,w
  2624  02D5  1903               	btfsc	3,2
  2625  02D6  2ADB               	goto	l3296
  2626                           
  2627                           ;main.c: 718: {
  2628                           ;main.c: 719: overWorkTime = 180;
  2629  02D7  30B4               	movlw	180
  2630  02D8  00B7               	movwf	_overWorkTime
  2631                           
  2632                           ;main.c: 720: preLedStep = workStep;
  2633  02D9  0879               	movf	_workStep,w
  2634  02DA  00B6               	movwf	_preLedStep
  2635  02DB                     l3296:	
  2636                           
  2637                           ;main.c: 721: }
  2638                           ;main.c: 722: prePwStep = 0;
  2639  02DB  01F7               	clrf	_prePwStep
  2640                           
  2641                           ;main.c: 723: workStep = 0;
  2642  02DC  01F9               	clrf	_workStep
  2643  02DD  2B0B               	goto	l3312
  2644  02DE                     l3300:	
  2645  02DE  3005               	movlw	5
  2646                           
  2647                           ;main.c: 726: else
  2648                           ;main.c: 727: {
  2649                           ;main.c: 728: count8s = 0;
  2650  02DF  01A2               	clrf	_count8s
  2651  02E0  01A3               	clrf	_count8s+1
  2652                           
  2653                           ;main.c: 729: if(batADValue >= 1340)
  2654  02E1  022B               	subwf	_batADValue+1,w
  2655  02E2  303C               	movlw	60
  2656  02E3  1903               	skipnz
  2657  02E4  022A               	subwf	_batADValue,w
  2658                           
  2659                           ;main.c: 730: {
  2660                           ;main.c: 731: pwStep = ((batADValue - 1340) /2) + 13;
  2661  02E5  082A               	movf	_batADValue,w
  2662  02E6  1C03               	skipc
  2663  02E7  2AF5               	goto	L15
  2664  02E8  3EC4               	addlw	196
  2665  02E9  00F4               	movwf	??_checkBatAD
  2666  02EA  082B               	movf	_batADValue+1,w
  2667  02EB  1803               	skipnc
  2668  02EC  3E01               	addlw	1
  2669  02ED  3EFA               	addlw	250
  2670  02EE  00F5               	movwf	??_checkBatAD+1
  2671  02EF  1003               	clrc
  2672  02F0  0CF5               	rrf	??_checkBatAD+1,f
  2673  02F1  0CF4               	rrf	??_checkBatAD,f
  2674  02F2  0874               	movf	??_checkBatAD,w
  2675  02F3  3E0D               	addlw	13
  2676  02F4  2B04               	goto	L14
  2677  02F5                     L15:	
  2678                           ;main.c: 733: else
  2679                           ;main.c: 734: {
  2680                           ;main.c: 735: pwStep = (batADValue - 1117) / 16;
  2681                           
  2682                           ;main.c: 732: }
  2683                           
  2684  02F5  3EA3               	addlw	163
  2685  02F6  00F4               	movwf	??_checkBatAD
  2686  02F7  082B               	movf	_batADValue+1,w
  2687  02F8  1803               	skipnc
  2688  02F9  3E01               	addlw	1
  2689  02FA  3EFB               	addlw	251
  2690  02FB  00F5               	movwf	??_checkBatAD+1
  2691  02FC  3004               	movlw	4
  2692  02FD                     u3715:	
  2693  02FD  1003               	clrc
  2694  02FE  0CF5               	rrf	??_checkBatAD+1,f
  2695  02FF  0CF4               	rrf	??_checkBatAD,f
  2696  0300  3EFF               	addlw	-1
  2697  0301  1D03               	skipz
  2698  0302  2AFD               	goto	u3715
  2699  0303  0874               	movf	??_checkBatAD,w
  2700  0304                     L14:	
  2701  0304  00C3               	movwf	_pwStep
  2702                           
  2703                           ;main.c: 736: }
  2704                           ;main.c: 737: if(pwStep > 99)
  2705  0305  3064               	movlw	100
  2706  0306  0243               	subwf	_pwStep,w
  2707  0307  1C03               	skipc
  2708  0308  2B0B               	goto	l3312
  2709                           
  2710                           ;main.c: 738: {
  2711                           ;main.c: 739: pwStep = 99;
  2712  0309  3063               	movlw	99
  2713  030A  00C3               	movwf	_pwStep
  2714  030B                     l3312:	
  2715                           
  2716                           ;main.c: 740: }
  2717                           ;main.c: 741: }
  2718                           ;main.c: 742: if(chrgFlag && batADValue > 1861)
  2719  030B  087A               	movf	_chrgFlag,w
  2720  030C  1903               	btfsc	3,2
  2721  030D  2B1F               	goto	l3322
  2722  030E  3007               	movlw	7
  2723  030F  022B               	subwf	_batADValue+1,w
  2724  0310  3046               	movlw	70
  2725  0311  1903               	skipnz
  2726  0312  022A               	subwf	_batADValue,w
  2727  0313  1C03               	skipc
  2728  0314  2B1F               	goto	l3322
  2729                           
  2730                           ;main.c: 743: {
  2731                           ;main.c: 744: protectFlag = 1;
  2732  0315  01CE               	clrf	_protectFlag
  2733  0316  0ACE               	incf	_protectFlag,f
  2734  0317  2B1F               	goto	l3322
  2735  0318                     l3318:	
  2736                           
  2737                           ;main.c: 747: else
  2738                           ;main.c: 748: {
  2739                           ;main.c: 749: ADCON0 = 0;
  2740  0318  1683               	bsf	3,5	;RP0=1, select bank1
  2741  0319  0195               	clrf	21	;volatile
  2742                           
  2743                           ;main.c: 750: ADCON1 = 0;
  2744  031A  0196               	clrf	22	;volatile
  2745                           
  2746                           ;main.c: 751: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2747  031B  3085               	movlw	133
  2748  031C  00F4               	movwf	??_checkBatAD
  2749  031D                     u4047:	
  2750  031D  0BF4               	decfsz	??_checkBatAD,f
  2751  031E  2B1D               	goto	u4047
  2752  031F                     l3322:	
  2753                           
  2754                           ;main.c: 752: }
  2755                           ;main.c: 753: test_adc = ADC_Sample(3, 5);
  2756  031F  3005               	movlw	5
  2757  0320  00F3               	movwf	ADC_Sample@adldo
  2758  0321  3003               	movlw	3
  2759  0322  211C               	fcall	_ADC_Sample
  2760  0323  00D5               	movwf	_test_adc	;volatile
  2761                           
  2762                           ;main.c: 754: if (0xA5 == test_adc)
  2763  0324  30A5               	movlw	165
  2764  0325  0655               	xorwf	_test_adc,w	;volatile
  2765  0326  1D03               	btfss	3,2
  2766  0327  2B53               	goto	l3342
  2767                           
  2768                           ;main.c: 755: {
  2769                           ;main.c: 756: if(chrgFlag && adresult > 100)
  2770  0328  087A               	movf	_chrgFlag,w
  2771  0329  1903               	btfsc	3,2
  2772  032A  0008               	return
  2773  032B  3000               	movlw	0
  2774  032C  0233               	subwf	_adresult+1,w	;volatile
  2775  032D  3065               	movlw	101
  2776  032E  1903               	skipnz
  2777  032F  0232               	subwf	_adresult,w	;volatile
  2778  0330  1C03               	skipc
  2779  0331  0008               	return
  2780                           
  2781                           ;main.c: 757: {
  2782                           ;main.c: 759: if(adresult > 810 || (batADValue - adresult) > 810)
  2783  0332  3003               	movlw	3
  2784  0333  0233               	subwf	_adresult+1,w	;volatile
  2785  0334  302B               	movlw	43
  2786  0335  1903               	skipnz
  2787  0336  0232               	subwf	_adresult,w	;volatile
  2788  0337  1803               	skipnc
  2789  0338  2B48               	goto	l3334
  2790  0339  0832               	movf	_adresult,w	;volatile
  2791  033A  022A               	subwf	_batADValue,w
  2792  033B  00F4               	movwf	??_checkBatAD
  2793  033C  0833               	movf	_adresult+1,w	;volatile
  2794  033D  1C03               	skipc
  2795  033E  0A33               	incf	_adresult+1,w	;volatile
  2796  033F  022B               	subwf	_batADValue+1,w
  2797  0340  00F5               	movwf	??_checkBatAD+1
  2798  0341  3003               	movlw	3
  2799  0342  0275               	subwf	??_checkBatAD+1,w
  2800  0343  302B               	movlw	43
  2801  0344  1903               	skipnz
  2802  0345  0274               	subwf	??_checkBatAD,w
  2803  0346  1C03               	skipc
  2804  0347  2B51               	goto	l3340
  2805  0348                     l3334:	
  2806                           
  2807                           ;main.c: 760: {
  2808                           ;main.c: 762: if(++countHalfFull > 250)
  2809  0348  30FB               	movlw	251
  2810  0349  0ACF               	incf	_countHalfFull,f
  2811  034A  024F               	subwf	_countHalfFull,w
  2812  034B  1C03               	skipc
  2813  034C  0008               	return
  2814  034D  3002               	movlw	2
  2815                           
  2816                           ;main.c: 763: {
  2817                           ;main.c: 764: countHalfFull = 0;
  2818  034E  01CF               	clrf	_countHalfFull
  2819                           
  2820                           ;main.c: 765: protectFlag = 2;
  2821  034F  00CE               	movwf	_protectFlag
  2822  0350  0008               	return
  2823  0351                     l3340:	
  2824                           
  2825                           ;main.c: 768: else
  2826                           ;main.c: 769: {
  2827                           ;main.c: 770: countHalfFull = 0;
  2828  0351  01CF               	clrf	_countHalfFull
  2829                           
  2830                           ;main.c: 771: }
  2831                           ;main.c: 772: }
  2832                           ;main.c: 773: }
  2833  0352  0008               	return
  2834  0353                     l3342:	
  2835                           
  2836                           ;main.c: 774: else
  2837                           ;main.c: 775: {
  2838                           ;main.c: 776: ADCON0 = 0;
  2839  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2840  0354  0195               	clrf	21	;volatile
  2841                           
  2842                           ;main.c: 777: ADCON1 = 0;
  2843  0355  0196               	clrf	22	;volatile
  2844                           
  2845                           ;main.c: 778: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2846  0356  3085               	movlw	133
  2847  0357  00F4               	movwf	??_checkBatAD
  2848  0358                     u4057:	
  2849  0358  0BF4               	decfsz	??_checkBatAD,f
  2850  0359  2B58               	goto	u4057
  2851  035A  0008               	return
  2852  035B                     __end_of_checkBatAD:	
  2853                           
  2854                           	psect	text14
  2855  011C                     __ptext14:	
  2856 ;; *************** function _ADC_Sample *****************
  2857 ;; Defined at:
  2858 ;;		line 1011 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  adch            1    wreg     unsigned char 
  2861 ;;  adldo           1    3[COMMON] unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  adch            1    5[BANK0 ] unsigned char 
  2864 ;;  j               1    4[BANK0 ] unsigned char 
  2865 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2866 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2867 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2868 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2869 ;;  i               1    6[BANK0 ] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      unsigned char 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 100/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1
  2879 ;;      Params:         1       0       0
  2880 ;;      Locals:         0      13       0
  2881 ;;      Temps:          0       4       0
  2882 ;;      Totals:         1      17       0
  2883 ;;Total ram usage:       18 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    2
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_checkOutA
  2890 ;;		_checkBatAD
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function _ADC_Sample
  2896  011C                     _ADC_Sample:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2900                           ;ADC_Sample@adch stored from wreg
  2901  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2902  011D  00DB               	movwf	ADC_Sample@adch
  2903                           
  2904                           ;main.c: 1013: volatile unsigned long adsum = 0;
  2905                           
  2906                           ;main.c: 1014: volatile unsigned int admin = 0, admax = 0;
  2907  011E  21F7               	fcall	PL4	;call to abstracted procedure
  2908                           
  2909                           ;main.c: 1015: volatile unsigned int ad_temp = 0;
  2910  011F  01E5               	clrf	ADC_Sample@ad_temp	;volatile
  2911  0120  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  2912                           
  2913                           ;main.c: 1017: if ((!LDO_EN) && (adldo & 0x04) )
  2914  0121  1683               	bsf	3,5	;RP0=1, select bank1
  2915  0122  1D16               	btfss	22,2	;volatile
  2916  0123  1D73               	btfss	ADC_Sample@adldo,2
  2917  0124  292E               	goto	l2942
  2918                           
  2919                           ;main.c: 1018: {
  2920                           ;main.c: 1020: ADCON1 = adldo;
  2921  0125  0873               	movf	ADC_Sample@adldo,w
  2922  0126  0096               	movwf	22	;volatile
  2923                           
  2924                           ;main.c: 1021: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2925  0127  3084               	movlw	132
  2926  0128  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0129  00D6               	movwf	??_ADC_Sample
  2928  012A                     u4067:	
  2929  012A  0BD6               	decfsz	??_ADC_Sample,f
  2930  012B  292A               	goto	u4067
  2931  012C  292D               	nop2
  2932                           
  2933                           ;main.c: 1022: }
  2934  012D  2930               	goto	l2944
  2935  012E                     l2942:	
  2936                           
  2937                           ;main.c: 1023: else
  2938                           ;main.c: 1024: ADCON1 = adldo;
  2939  012E  0873               	movf	ADC_Sample@adldo,w
  2940  012F  0096               	movwf	22	;volatile
  2941  0130                     l2944:	
  2942                           
  2943                           ;main.c: 1026: if(adch & 0x10)
  2944  0130  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0131  1E5B               	btfss	ADC_Sample@adch,4
  2946  0132  2938               	goto	l2952
  2947                           
  2948                           ;main.c: 1027: {
  2949                           ;main.c: 1028: CHS4 = 1;
  2950  0133  1683               	bsf	3,5	;RP0=1, select bank1
  2951  0134  1716               	bsf	22,6	;volatile
  2952                           
  2953                           ;main.c: 1029: adch &= 0x0f;
  2954  0135  300F               	movlw	15
  2955  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2956  0137  05DB               	andwf	ADC_Sample@adch,f
  2957  0138                     l2952:	
  2958                           
  2959                           ;main.c: 1032: for (i = 0; i < 10; i++)
  2960  0138  01DC               	clrf	ADC_Sample@i
  2961  0139                     l2958:	
  2962                           
  2963                           ;main.c: 1033: {
  2964                           ;main.c: 1034: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2965  0139  085B               	movf	ADC_Sample@adch,w
  2966  013A  00D6               	movwf	??_ADC_Sample
  2967  013B  3001               	movlw	1
  2968  013C  1003               	clrc
  2969  013D                     L16:	
  2970  013D  0DD6               	rlf	??_ADC_Sample,f
  2971  013E  3EFF               	addlw	-1
  2972  013F  1003               	clrc
  2973  0140  1D03               	skipz
  2974  0141  293D               	goto	L16
  2975  0142  0D56               	rlf	??_ADC_Sample,w
  2976  0143  3841               	iorlw	65
  2977  0144  1683               	bsf	3,5	;RP0=1, select bank1
  2978  0145  0095               	movwf	21	;volatile
  2979  0146  0000               	nop	;# 
  2980  0147  0000               	nop	;# 
  2981  0148  0000               	nop	;# 
  2982  0149  0000               	nop	;# 
  2983                           
  2984                           ;main.c: 1039: GODONE = 1;
  2985  014A  1683               	bsf	3,5	;RP0=1, select bank1
  2986  014B  1495               	bsf	21,1	;volatile
  2987                           
  2988                           ;main.c: 1041: unsigned char j = 0;
  2989  014C  1283               	bcf	3,5	;RP0=0, select bank0
  2990  014D  01DA               	clrf	ADC_Sample@j
  2991  014E                     l881:	
  2992                           ;main.c: 1042: while (GODONE)
  2993                           
  2994  014E  1683               	bsf	3,5	;RP0=1, select bank1
  2995  014F  1C95               	btfss	21,1	;volatile
  2996  0150  2959               	goto	l2968
  2997                           
  2998                           ;main.c: 1043: {
  2999                           ;main.c: 1044: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3000  0151  2952               	nop2	;2 cycle nop
  3001  0152  2953               	nop2	;2 cycle nop
  3002  0153  2954               	nop2	;2 cycle nop
  3003  0154  2955               	nop2	;2 cycle nop
  3004                           
  3005                           ;main.c: 1046: if (0 == (--j))
  3006  0155  1283               	bcf	3,5	;RP0=0, select bank0
  3007  0156  0BDA               	decfsz	ADC_Sample@j,f
  3008  0157  294E               	goto	l881
  3009                           
  3010                           ;main.c: 1047: return 0;
  3011  0158  3400               	retlw	0
  3012  0159                     l2968:	
  3013                           
  3014                           ;main.c: 1048: }
  3015                           ;main.c: 1050: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3016  0159  0819               	movf	25,w	;volatile
  3017  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3018  015B  00E5               	movwf	ADC_Sample@ad_temp	;volatile
  3019  015C  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3020  015D  0EE5               	swapf	ADC_Sample@ad_temp,f	;volatile
  3021  015E  0EE6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3022  015F  30F0               	movlw	240
  3023  0160  05E6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3024  0161  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3025  0162  390F               	andlw	15
  3026  0163  04E6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3027  0164  30F0               	movlw	240
  3028  0165  05E5               	andwf	ADC_Sample@ad_temp,f	;volatile
  3029  0166  1683               	bsf	3,5	;RP0=1, select bank1
  3030  0167  0E18               	swapf	24,w	;volatile
  3031  0168  390F               	andlw	15
  3032  0169  1283               	bcf	3,5	;RP0=0, select bank0
  3033  016A  07E5               	addwf	ADC_Sample@ad_temp,f	;volatile
  3034  016B  1803               	skipnc
  3035  016C  0AE6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3036                           
  3037                           ;main.c: 1052: if (0 == admax)
  3038  016D  0863               	movf	ADC_Sample@admax,w	;volatile
  3039  016E  0464               	iorwf	ADC_Sample@admax+1,w	;volatile
  3040  016F  1D03               	btfss	3,2
  3041  0170  2973               	goto	l2976
  3042                           
  3043                           ;main.c: 1053: {
  3044                           ;main.c: 1054: admax = ad_temp;
  3045  0171  2200               	fcall	PL10	;call to abstracted procedure
  3046  0172  2985               	goto	l2982
  3047  0173                     l2976:	
  3048                           ;main.c: 1056: }
  3049                           
  3050                           ;main.c: 1055: admin = ad_temp;
  3051                           
  3052                           
  3053                           ;main.c: 1057: else if (ad_temp > admax)
  3054  0173  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3055  0174  0264               	subwf	ADC_Sample@admax+1,w	;volatile
  3056  0175  1D03               	skipz
  3057  0176  2979               	goto	u3005
  3058  0177  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3059  0178  0263               	subwf	ADC_Sample@admax,w	;volatile
  3060  0179                     u3005:	
  3061  0179  1803               	skipnc
  3062  017A  297D               	goto	l2980
  3063                           
  3064                           ;main.c: 1058: admax = ad_temp;
  3065  017B  2200               	fcall	PL10	;call to abstracted procedure
  3066  017C  2989               	goto	l887
  3067  017D                     l2980:	
  3068                           
  3069                           ;main.c: 1059: else if (ad_temp < admin)
  3070  017D  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3071  017E  0266               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3072  017F  1D03               	skipz
  3073  0180  2983               	goto	u3015
  3074  0181  0861               	movf	ADC_Sample@admin,w	;volatile
  3075  0182  0265               	subwf	ADC_Sample@ad_temp,w	;volatile
  3076  0183                     u3015:	
  3077  0183  1803               	skipnc
  3078  0184  2989               	goto	l887
  3079  0185                     l2982:	
  3080                           
  3081                           ;main.c: 1060: admin = ad_temp;
  3082  0185  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3083  0186  00E2               	movwf	ADC_Sample@admin+1	;volatile
  3084  0187  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3085  0188  00E1               	movwf	ADC_Sample@admin	;volatile
  3086  0189                     l887:	
  3087                           
  3088                           ;main.c: 1062: adsum += ad_temp;
  3089  0189  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3090  018A  00D6               	movwf	??_ADC_Sample
  3091  018B  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3092  018C  00D7               	movwf	??_ADC_Sample+1
  3093  018D  01D8               	clrf	??_ADC_Sample+2
  3094  018E  01D9               	clrf	??_ADC_Sample+3
  3095  018F  0856               	movf	??_ADC_Sample,w
  3096  0190  07DD               	addwf	ADC_Sample@adsum,f	;volatile
  3097  0191  0857               	movf	??_ADC_Sample+1,w
  3098  0192  1103               	clrz
  3099  0193  1803               	skipnc
  3100  0194  3E01               	addlw	1
  3101  0195  1D03               	btfss	3,2
  3102  0196  07DE               	addwf	ADC_Sample@adsum+1,f	;volatile
  3103  0197  0858               	movf	??_ADC_Sample+2,w
  3104  0198  1103               	clrz
  3105  0199  1803               	skipnc
  3106  019A  3E01               	addlw	1
  3107  019B  1D03               	btfss	3,2
  3108  019C  07DF               	addwf	ADC_Sample@adsum+2,f	;volatile
  3109  019D  0859               	movf	??_ADC_Sample+3,w
  3110  019E  1103               	clrz
  3111  019F  1803               	skipnc
  3112  01A0  3E01               	addlw	1
  3113  01A1  1D03               	btfss	3,2
  3114  01A2  07E0               	addwf	ADC_Sample@adsum+3,f	;volatile
  3115  01A3  300A               	movlw	10
  3116  01A4  0ADC               	incf	ADC_Sample@i,f
  3117  01A5  025C               	subwf	ADC_Sample@i,w
  3118  01A6  1C03               	skipc
  3119  01A7  2939               	goto	l2958
  3120                           
  3121                           ;main.c: 1063: }
  3122                           ;main.c: 1064: adsum -= admax;
  3123  01A8  0863               	movf	ADC_Sample@admax,w	;volatile
  3124  01A9  00D6               	movwf	??_ADC_Sample
  3125  01AA  0864               	movf	ADC_Sample@admax+1,w	;volatile
  3126  01AB  21E8               	fcall	PL2	;call to abstracted procedure
  3127  01AC  1C03               	skipc
  3128  01AD  0F59               	incfsz	??_ADC_Sample+3,w
  3129  01AE  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3130                           
  3131                           ;main.c: 1065: if (adsum >= admin)
  3132  01AF  0861               	movf	ADC_Sample@admin,w	;volatile
  3133  01B0  00D6               	movwf	??_ADC_Sample
  3134  01B1  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3135  01B2  00D7               	movwf	??_ADC_Sample+1
  3136  01B3  01D8               	clrf	??_ADC_Sample+2
  3137  01B4  01D9               	clrf	??_ADC_Sample+3
  3138  01B5  0859               	movf	??_ADC_Sample+3,w
  3139  01B6  0260               	subwf	ADC_Sample@adsum+3,w	;volatile
  3140  01B7  1D03               	skipz
  3141  01B8  29C3               	goto	u3055
  3142  01B9  0858               	movf	??_ADC_Sample+2,w
  3143  01BA  025F               	subwf	ADC_Sample@adsum+2,w	;volatile
  3144  01BB  1D03               	skipz
  3145  01BC  29C3               	goto	u3055
  3146  01BD  0857               	movf	??_ADC_Sample+1,w
  3147  01BE  025E               	subwf	ADC_Sample@adsum+1,w	;volatile
  3148  01BF  1D03               	skipz
  3149  01C0  29C3               	goto	u3055
  3150  01C1  0856               	movf	??_ADC_Sample,w
  3151  01C2  025D               	subwf	ADC_Sample@adsum,w	;volatile
  3152  01C3                     u3055:	
  3153  01C3  1C03               	skipc
  3154  01C4  29CD               	goto	l891
  3155                           
  3156                           ;main.c: 1066: adsum -= admin;
  3157  01C5  0861               	movf	ADC_Sample@admin,w	;volatile
  3158  01C6  00D6               	movwf	??_ADC_Sample
  3159  01C7  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3160  01C8  21E8               	fcall	PL2	;call to abstracted procedure
  3161  01C9  1C03               	skipc
  3162  01CA  0F59               	incfsz	??_ADC_Sample+3,w
  3163  01CB  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3164  01CC  29D1               	goto	l2992
  3165  01CD                     l891:	
  3166                           
  3167                           ;main.c: 1067: else
  3168                           ;main.c: 1068: adsum = 0;
  3169  01CD  01DD               	clrf	ADC_Sample@adsum	;volatile
  3170  01CE  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3171  01CF  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3172  01D0  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3173  01D1                     l2992:	
  3174                           
  3175                           ;main.c: 1070: adresult = adsum >> 3;
  3176  01D1  085D               	movf	ADC_Sample@adsum,w	;volatile
  3177  01D2  00D6               	movwf	??_ADC_Sample
  3178  01D3  085E               	movf	ADC_Sample@adsum+1,w	;volatile
  3179  01D4  00D7               	movwf	??_ADC_Sample+1
  3180  01D5  085F               	movf	ADC_Sample@adsum+2,w	;volatile
  3181  01D6  00D8               	movwf	??_ADC_Sample+2
  3182  01D7  0860               	movf	ADC_Sample@adsum+3,w	;volatile
  3183  01D8  00D9               	movwf	??_ADC_Sample+3
  3184  01D9  3003               	movlw	3
  3185  01DA                     u3075:	
  3186  01DA  1003               	clrc
  3187  01DB  0CD9               	rrf	??_ADC_Sample+3,f
  3188  01DC  0CD8               	rrf	??_ADC_Sample+2,f
  3189  01DD  0CD7               	rrf	??_ADC_Sample+1,f
  3190  01DE  0CD6               	rrf	??_ADC_Sample,f
  3191  01DF  3EFF               	addlw	-1
  3192  01E0  1D03               	skipz
  3193  01E1  29DA               	goto	u3075
  3194  01E2  0857               	movf	??_ADC_Sample+1,w
  3195  01E3  00B3               	movwf	_adresult+1	;volatile
  3196  01E4  0856               	movf	??_ADC_Sample,w
  3197  01E5  00B2               	movwf	_adresult	;volatile
  3198                           
  3199                           ;main.c: 1072: adsum = 0;
  3200                           
  3201                           ;main.c: 1073: admin = 0;
  3202                           
  3203                           ;main.c: 1074: admax = 0;
  3204  01E6  21F7               	fcall	PL4	;call to abstracted procedure
  3205                           
  3206                           ;main.c: 1075: return 0xA5;
  3207  01E7  34A5               	retlw	165
  3208  01E8                     __end_of_ADC_Sample:	
  3209  01E8                     PL2:	
  3210  01E8  00D7               	movwf	??_ADC_Sample+1
  3211  01E9  01D8               	clrf	??_ADC_Sample+2
  3212  01EA  01D9               	clrf	??_ADC_Sample+3
  3213  01EB  0856               	movf	??_ADC_Sample,w
  3214  01EC  02DD               	subwf	ADC_Sample@adsum,f	;volatile
  3215  01ED  0857               	movf	??_ADC_Sample+1,w
  3216  01EE  1C03               	skipc
  3217  01EF  0F57               	incfsz	??_ADC_Sample+1,w
  3218  01F0  02DE               	subwf	ADC_Sample@adsum+1,f	;volatile
  3219  01F1  0858               	movf	??_ADC_Sample+2,w
  3220  01F2  1C03               	skipc
  3221  01F3  0F58               	incfsz	??_ADC_Sample+2,w
  3222  01F4  02DF               	subwf	ADC_Sample@adsum+2,f	;volatile
  3223  01F5  0859               	movf	??_ADC_Sample+3,w
  3224  01F6  0008               	return
  3225  01F7                     __end_ofPL2:	
  3226  01F7                     PL4:	
  3227  01F7  01DD               	clrf	ADC_Sample@adsum	;volatile
  3228  01F8  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3229  01F9  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3230  01FA  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3231  01FB  01E1               	clrf	ADC_Sample@admin	;volatile
  3232  01FC  01E2               	clrf	ADC_Sample@admin+1	;volatile
  3233  01FD  01E3               	clrf	ADC_Sample@admax	;volatile
  3234  01FE  01E4               	clrf	ADC_Sample@admax+1	;volatile
  3235  01FF  0008               	return
  3236  0200                     __end_ofPL4:	
  3237  0200                     PL10:	
  3238  0200  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3239  0201  00E4               	movwf	ADC_Sample@admax+1	;volatile
  3240  0202  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3241  0203  00E3               	movwf	ADC_Sample@admax	;volatile
  3242  0204  0008               	return
  3243  0205                     __end_ofPL10:	
  3244                           
  3245                           	psect	text15
  3246  0400                     __ptext15:	
  3247 ;; *************** function _Sleep_Mode *****************
  3248 ;; Defined at:
  3249 ;;		line 935 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0, pclath, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 100/0
  3260 ;;		On exit  : 100/100
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMMON   BANK0   BANK1
  3263 ;;      Params:         0       0       0
  3264 ;;      Locals:         0       0       0
  3265 ;;      Temps:          0       0       0
  3266 ;;      Totals:         0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    3
  3270 ;; This function calls:
  3271 ;;		_AD_Init
  3272 ;;		_Init_System
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           
  3279                           ;psect for function _Sleep_Mode
  3280  0400                     _Sleep_Mode:	
  3281                           
  3282                           ;main.c: 937: INTCON = 0;
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3286  0400  018B               	clrf	11	;volatile
  3287                           
  3288                           ;main.c: 939: OPTION_REG = 0;
  3289  0401  0181               	clrf	1	;volatile
  3290                           
  3291                           ;main.c: 941: TRISA = 0x1F;
  3292  0402  301F               	movlw	31
  3293  0403  1683               	bsf	3,5	;RP0=1, select bank1
  3294  0404  0085               	movwf	5	;volatile
  3295                           
  3296                           ;main.c: 942: WPUA = 0B00000000;
  3297  0405  0188               	clrf	8	;volatile
  3298                           
  3299                           ;main.c: 943: PORTA = 0x00;
  3300  0406  0186               	clrf	6	;volatile
  3301                           
  3302                           ;main.c: 944: TRISB = 0B00000100;
  3303  0407  3004               	movlw	4
  3304  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0409  0085               	movwf	5	;volatile
  3306                           
  3307                           ;main.c: 945: PORTB = 0B00000000;
  3308  040A  0186               	clrf	6	;volatile
  3309                           
  3310                           ;main.c: 946: WPUB = 0B00000100;
  3311  040B  0088               	movwf	8	;volatile
  3312                           
  3313                           ;main.c: 948: ADCON0 = 0;
  3314  040C  1683               	bsf	3,5	;RP0=1, select bank1
  3315  040D  0195               	clrf	21	;volatile
  3316                           
  3317                           ;main.c: 949: ADCON1 = 0;
  3318  040E  0196               	clrf	22	;volatile
  3319                           
  3320                           ;main.c: 951: PWMCON0 = 0;
  3321  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3322  0410  0195               	clrf	21	;volatile
  3323                           
  3324                           ;main.c: 953: OSCCON = 0X70;
  3325  0411  3070               	movlw	112
  3326  0412  0094               	movwf	20	;volatile
  3327                           
  3328                           ;main.c: 955: IOCA = 0B00000010;
  3329  0413  3002               	movlw	2
  3330  0414  1683               	bsf	3,5	;RP0=1, select bank1
  3331  0415  0089               	movwf	9	;volatile
  3332                           
  3333                           ;main.c: 956: IOCB = 0B00000100;
  3334  0416  3004               	movlw	4
  3335  0417  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0418  0089               	movwf	9	;volatile
  3337                           
  3338                           ;main.c: 958: RAIE = 1;
  3339  0419  158E               	bsf	14,3	;volatile
  3340                           
  3341                           ;main.c: 959: PEIE = 1;
  3342  041A  170B               	bsf	11,6	;volatile
  3343                           
  3344                           ;main.c: 960: RBIE = 1;
  3345  041B  158B               	bsf	11,3	;volatile
  3346                           
  3347                           ;main.c: 961: GIE = 0;
  3348  041C  138B               	bcf	11,7	;volatile
  3349                           
  3350                           ;main.c: 963: PIE1 &= 0X08;
  3351  041D  3008               	movlw	8
  3352  041E  058E               	andwf	14,f	;volatile
  3353                           
  3354                           ;main.c: 964: PIR1 = 0;
  3355  041F  018D               	clrf	13	;volatile
  3356                           
  3357                           ;main.c: 965: INTCON &= 0XC8;
  3358  0420  30C8               	movlw	200
  3359  0421  058B               	andwf	11,f	;volatile
  3360                           
  3361                           ;main.c: 967: PORTA;
  3362  0422  1683               	bsf	3,5	;RP0=1, select bank1
  3363  0423  0806               	movf	6,w	;volatile
  3364                           
  3365                           ;main.c: 968: RAIF = 0;
  3366  0424  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0425  118D               	bcf	13,3	;volatile
  3368                           
  3369                           ;main.c: 969: PORTB;
  3370  0426  0806               	movf	6,w	;volatile
  3371                           
  3372                           ;main.c: 970: RBIF = 0;
  3373  0427  100B               	bcf	11,0	;volatile
  3374  0428  0064               	clrwdt	;# 
  3375  0429  0063               	sleep	;# 
  3376  042A  0000               	nop	;# 
  3377  042B  0064               	clrwdt	;# 
  3378  042C  0000               	nop	;# 
  3379  042D  0000               	nop	;# 
  3380  042E  0000               	nop	;# 
  3381  042F  0000               	nop	;# 
  3382  0430  0000               	nop	;# 
  3383                           
  3384                           ;main.c: 982: if(RAIF) RAIF = 0;
  3385  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0432  198D               	btfsc	13,3	;volatile
  3387  0433  118D               	bcf	13,3	;volatile
  3388                           
  3389                           ;main.c: 983: if(RBIF) RBIF = 0;
  3390  0434  180B               	btfsc	11,0	;volatile
  3391  0435  100B               	bcf	11,0	;volatile
  3392                           
  3393                           ;main.c: 984: if(TMR2IF) TMR2IF = 0;
  3394  0436  188D               	btfsc	13,1	;volatile
  3395  0437  108D               	bcf	13,1	;volatile
  3396                           
  3397                           ;main.c: 985: IOCA = 0B00000000;
  3398  0438  1683               	bsf	3,5	;RP0=1, select bank1
  3399  0439  0189               	clrf	9	;volatile
  3400                           
  3401                           ;main.c: 986: IOCB = 0B00000000;
  3402  043A  1283               	bcf	3,5	;RP0=0, select bank0
  3403  043B  0189               	clrf	9	;volatile
  3404                           
  3405                           ;main.c: 987: Init_System();
  3406  043C  24D5               	fcall	_Init_System
  3407                           
  3408                           ;main.c: 988: AD_Init();
  3409  043D  2D86               	ljmp	l2118
  3410  043E                     __end_of_Sleep_Mode:	
  3411                           
  3412                           	psect	text16
  3413  04D5                     __ptext16:	
  3414 ;; *************** function _Init_System *****************
  3415 ;; Defined at:
  3416 ;;		line 791 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2
  3425 ;; Tracked objects:
  3426 ;;		On entry : 100/0
  3427 ;;		On exit  : 100/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMMON   BANK0   BANK1
  3430 ;;      Params:         0       0       0
  3431 ;;      Locals:         0       0       0
  3432 ;;      Temps:          0       0       0
  3433 ;;      Totals:         0       0       0
  3434 ;;Total ram usage:        0 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    2
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;;		_Sleep_Mode
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _Init_System
  3447  04D5                     _Init_System:	
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _Init_System: [wreg+status,2]
  3451  04D5  0000               	nop	;# 
  3452  04D6  0064               	clrwdt	;# 
  3453                           
  3454                           ;main.c: 795: OPTION_REG = 0;
  3455  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  3456  04D8  0181               	clrf	1	;volatile
  3457  04D9  0064               	clrwdt	;# 
  3458                           
  3459                           ;main.c: 797: OSCCON = 0X72;
  3460  04DA  3072               	movlw	114
  3461  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3462  04DC  0094               	movwf	20	;volatile
  3463                           
  3464                           ;main.c: 799: WPUA = 0B00000000;
  3465  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3466  04DE  0188               	clrf	8	;volatile
  3467                           
  3468                           ;main.c: 800: WPDA = 0x02;
  3469  04DF  3002               	movlw	2
  3470  04E0  0087               	movwf	7	;volatile
  3471                           
  3472                           ;main.c: 801: WPUB = 0B00000100;
  3473  04E1  3004               	movlw	4
  3474  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3475  04E3  0088               	movwf	8	;volatile
  3476                           
  3477                           ;main.c: 803: TRISA = 0x1F;
  3478  04E4  301F               	movlw	31
  3479  04E5  1683               	bsf	3,5	;RP0=1, select bank1
  3480  04E6  0085               	movwf	5	;volatile
  3481                           
  3482                           ;main.c: 804: TRISB = 0B00000100;
  3483  04E7  3004               	movlw	4
  3484  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  3485  04E9  0085               	movwf	5	;volatile
  3486                           
  3487                           ;main.c: 806: PORTA = 0X00;
  3488  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  3489  04EB  0186               	clrf	6	;volatile
  3490                           
  3491                           ;main.c: 807: PORTB = 0X00;
  3492  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3493  04ED  0186               	clrf	6	;volatile
  3494                           
  3495                           ;main.c: 811: PR2 = 249;
  3496  04EE  30F9               	movlw	249
  3497  04EF  0091               	movwf	17	;volatile
  3498                           
  3499                           ;main.c: 812: TMR2IF = 0;
  3500  04F0  108D               	bcf	13,1	;volatile
  3501                           
  3502                           ;main.c: 813: TMR2IE = 1;
  3503  04F1  148E               	bsf	14,1	;volatile
  3504                           
  3505                           ;main.c: 815: T2CON = 0B00000100;
  3506  04F2  3004               	movlw	4
  3507  04F3  0093               	movwf	19	;volatile
  3508                           
  3509                           ;main.c: 816: INTCON = 0XC0;
  3510  04F4  30C0               	movlw	192
  3511  04F5  008B               	movwf	11	;volatile
  3512  04F6  0008               	return
  3513  04F7                     __end_of_Init_System:	
  3514                           
  3515                           	psect	text17
  3516  0586                     __ptext17:	
  3517 ;; *************** function _AD_Init *****************
  3518 ;; Defined at:
  3519 ;;		line 828 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;		None
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2
  3528 ;; Tracked objects:
  3529 ;;		On entry : 100/0
  3530 ;;		On exit  : 100/100
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMMON   BANK0   BANK1
  3533 ;;      Params:         0       0       0
  3534 ;;      Locals:         0       0       0
  3535 ;;      Temps:          0       0       0
  3536 ;;      Totals:         0       0       0
  3537 ;;Total ram usage:        0 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    2
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_main
  3544 ;;		_Sleep_Mode
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           
  3549                           ;psect for function _AD_Init
  3550  0586                     _AD_Init:	
  3551  0586                     l2118:	
  3552                           ;incstack = 0
  3553                           ; Regs used in _AD_Init: [wreg+status,2]
  3554                           
  3555                           
  3556                           ;main.c: 861: ADCON0 = 0X41;
  3557  0586  3041               	movlw	65
  3558  0587  1683               	bsf	3,5	;RP0=1, select bank1
  3559  0588  0095               	movwf	21	;volatile
  3560                           
  3561                           ;main.c: 878: ADCON1 = 0;
  3562  0589  0196               	clrf	22	;volatile
  3563                           
  3564                           ;main.c: 879: ANSEL0 = 0X1D;
  3565  058A  301D               	movlw	29
  3566  058B  0093               	movwf	19	;volatile
  3567  058C  0008               	return
  3568  058D                     __end_of_AD_Init:	
  3569                           
  3570                           	psect	text18
  3571  0515                     __ptext18:	
  3572 ;; *************** function _Isr_Timer *****************
  3573 ;; Defined at:
  3574 ;;		line 100 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 100/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1
  3588 ;;      Params:         0       0       0
  3589 ;;      Locals:         0       0       0
  3590 ;;      Temps:          3       0       0
  3591 ;;      Totals:         3       0       0
  3592 ;;Total ram usage:        3 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    1
  3595 ;; This function calls:
  3596 ;;		_ledShow
  3597 ;; This function is called by:
  3598 ;;		Interrupt level 1
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           
  3603                           ;psect for function _Isr_Timer
  3604  0515                     _Isr_Timer:	
  3605                           
  3606                           ;main.c: 102: if(TMR2IF)
  3607  0515  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0516  1C8D               	btfss	13,1	;volatile
  3609  0517  2D29               	goto	i1l656
  3610                           
  3611                           ;main.c: 103: {
  3612                           ;main.c: 104: TMR2IF = 0;
  3613  0518  108D               	bcf	13,1	;volatile
  3614                           
  3615                           ;main.c: 105: if(++intCount >= 160)
  3616  0519  30A0               	movlw	160
  3617  051A  0AD4               	incf	_intCount,f
  3618  051B  0254               	subwf	_intCount,w
  3619  051C  1C03               	skipc
  3620  051D  2D26               	goto	i1l2864
  3621  051E  3064               	movlw	100
  3622                           
  3623                           ;main.c: 106: {
  3624                           ;main.c: 107: intCount = 0;
  3625  051F  01D4               	clrf	_intCount
  3626                           
  3627                           ;main.c: 108: IntFlag = 1;
  3628  0520  01D2               	clrf	_IntFlag
  3629  0521  0AD2               	incf	_IntFlag,f
  3630                           
  3631                           ;main.c: 109: if(++count1s >= 100)
  3632  0522  0AD3               	incf	_count1s,f
  3633  0523  0253               	subwf	_count1s,w
  3634  0524  1803               	btfsc	3,0
  3635                           
  3636                           ;main.c: 110: {
  3637                           ;main.c: 111: count1s = 0;
  3638  0525  01D3               	clrf	_count1s
  3639  0526                     i1l2864:	
  3640                           
  3641                           ;main.c: 112: }
  3642                           ;main.c: 113: }
  3643                           ;main.c: 114: ledShow();
  3644  0526  235B               	fcall	_ledShow
  3645                           
  3646                           ;main.c: 115: intCount10++;
  3647  0527  1283               	bcf	3,5	;RP0=0, select bank0
  3648  0528  0AD0               	incf	_intCount10,f
  3649  0529                     i1l656:	
  3650  0529  0872               	movf	??_Isr_Timer+2,w
  3651  052A  008A               	movwf	10
  3652  052B  0871               	movf	??_Isr_Timer+1,w
  3653  052C  0084               	movwf	4
  3654  052D  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3655  052E  0083               	movwf	3
  3656  052F  0EFE               	swapf	126,f
  3657  0530  0E7E               	swapf	126,w
  3658  0531  0009               	retfie
  3659  0532                     __end_of_Isr_Timer:	
  3660                           
  3661                           	psect	intentry
  3662  0004                     __pintentry:	
  3663                           ;incstack = 0
  3664                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3665                           
  3666  0004                     interrupt_function:	
  3667  007E                     saved_w	set	btemp
  3668  0004  00FE               	movwf	btemp
  3669  0005  0E03               	swapf	3,w
  3670  0006  00F0               	movwf	??_Isr_Timer
  3671  0007  0804               	movf	4,w
  3672  0008  00F1               	movwf	??_Isr_Timer+1
  3673  0009  080A               	movf	10,w
  3674  000A  00F2               	movwf	??_Isr_Timer+2
  3675  000B  2D15               	ljmp	_Isr_Timer
  3676                           
  3677                           	psect	text19
  3678  035B                     __ptext19:	
  3679 ;; *************** function _ledShow *****************
  3680 ;; Defined at:
  3681 ;;		line 163 in file "C:\mcuproject\scm\zdt\C212_062B_SOP14\main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3690 ;; Tracked objects:
  3691 ;;		On entry : 100/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1
  3695 ;;      Params:         0       0       0
  3696 ;;      Locals:         0       0       0
  3697 ;;      Temps:          0       0       0
  3698 ;;      Totals:         0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_Isr_Timer
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _ledShow
  3710  035B                     _ledShow:	
  3711                           
  3712                           ;main.c: 165: if(++ledCntTime > 5)
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3716  035B  3006               	movlw	6
  3717  035C  0AB8               	incf	_ledCntTime,f
  3718  035D  0238               	subwf	_ledCntTime,w
  3719  035E  1C03               	skipc
  3720  035F  2BA3               	goto	i1l2352
  3721  0360  3007               	movlw	7
  3722                           
  3723                           ;main.c: 166: {
  3724                           ;main.c: 167: ledCntTime = 0;
  3725  0361  01B8               	clrf	_ledCntTime
  3726                           
  3727                           ;main.c: 168: if(++ledCnt > 6)
  3728  0362  0ACC               	incf	_ledCnt,f
  3729  0363  024C               	subwf	_ledCnt,w
  3730  0364  1803               	btfsc	3,0
  3731                           
  3732                           ;main.c: 169: {
  3733                           ;main.c: 170: ledCnt = 0;
  3734  0365  01CC               	clrf	_ledCnt
  3735                           
  3736                           ;main.c: 171: }
  3737                           ;main.c: 172: PORTA &= 0xDF;
  3738  0366  1683               	bsf	3,5	;RP0=1, select bank1
  3739  0367  1286               	bcf	6,5	;volatile
  3740                           
  3741                           ;main.c: 173: PORTB &= 0xC7;
  3742  0368  30C7               	movlw	199
  3743  0369  1283               	bcf	3,5	;RP0=0, select bank0
  3744  036A  0586               	andwf	6,f	;volatile
  3745                           
  3746                           ;main.c: 174: TRISA |= 0x20;
  3747  036B  1683               	bsf	3,5	;RP0=1, select bank1
  3748  036C  1685               	bsf	5,5	;volatile
  3749                           
  3750                           ;main.c: 175: TRISB |= 0x38;
  3751  036D  3038               	movlw	56
  3752  036E  1283               	bcf	3,5	;RP0=0, select bank0
  3753  036F  0485               	iorwf	5,f	;volatile
  3754  0370  2BA3               	goto	i1l2352
  3755  0371                     i1l2318:	
  3756                           
  3757                           ;main.c: 183: if(ledStep > 0)
  3758  0371  0878               	movf	_ledStep,w
  3759  0372  1903               	btfsc	3,2
  3760  0373  0008               	return
  3761                           
  3762                           ;main.c: 184: {
  3763                           ;main.c: 185: TRISB &= 0xE7;
  3764  0374  30E7               	movlw	231
  3765  0375                     L17:	
  3766  0375  0585               	andwf	5,f	;volatile
  3767                           
  3768                           ;main.c: 186: PORTB |= 0x10;
  3769  0376  1606               	bsf	6,4	;volatile
  3770  0377  0008               	return
  3771  0378                     i1l2324:	
  3772                           
  3773                           ;main.c: 190: if(ledStep > 1)
  3774  0378  3002               	movlw	2
  3775  0379  0278               	subwf	_ledStep,w
  3776  037A  1C03               	skipc
  3777  037B  0008               	return
  3778                           
  3779                           ;main.c: 191: {
  3780                           ;main.c: 192: TRISB &= 0xCF;
  3781  037C  30CF               	movlw	207
  3782  037D  0585               	andwf	5,f	;volatile
  3783                           
  3784                           ;main.c: 193: PORTB |= 0x20;
  3785  037E  1686               	bsf	6,5	;volatile
  3786  037F  0008               	return
  3787  0380                     i1l2330:	
  3788                           
  3789                           ;main.c: 197: if(ledStep > 2)
  3790  0380  3003               	movlw	3
  3791  0381  0278               	subwf	_ledStep,w
  3792  0382  1C03               	skipc
  3793  0383  0008               	return
  3794                           
  3795                           ;main.c: 198: {
  3796                           ;main.c: 199: TRISB &= 0xE7;
  3797  0384  30E7               	movlw	231
  3798  0385  0585               	andwf	5,f	;volatile
  3799                           
  3800                           ;main.c: 200: PORTB |= 0x08;
  3801  0386  1586               	bsf	6,3	;volatile
  3802  0387  0008               	return
  3803  0388                     i1l2336:	
  3804                           
  3805                           ;main.c: 204: if(ledStep > 3)
  3806  0388  3004               	movlw	4
  3807  0389  0278               	subwf	_ledStep,w
  3808  038A  1C03               	skipc
  3809  038B  0008               	return
  3810                           
  3811                           ;main.c: 205: {
  3812                           ;main.c: 206: TRISB &= 0xCF;
  3813  038C  30CF               	movlw	207
  3814  038D  2B75               	goto	L17
  3815  038E                     i1l2342:	
  3816                           
  3817                           ;main.c: 211: if(ledStep > 4)
  3818  038E  3005               	movlw	5
  3819  038F  0278               	subwf	_ledStep,w
  3820  0390  1C03               	skipc
  3821  0391  0008               	return
  3822                           
  3823                           ;main.c: 212: {
  3824                           ;main.c: 213: TRISA &= 0xDF;
  3825  0392  1683               	bsf	3,5	;RP0=1, select bank1
  3826  0393  1285               	bcf	5,5	;volatile
  3827                           
  3828                           ;main.c: 214: TRISB &= 0xDF;
  3829  0394  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0395  1285               	bcf	5,5	;volatile
  3831                           
  3832                           ;main.c: 215: PORTB |= 0x20;
  3833  0396  1686               	bsf	6,5	;volatile
  3834  0397  0008               	return
  3835  0398                     i1l2346:	
  3836                           
  3837                           ;main.c: 219: if(ledStep > 5)
  3838  0398  3006               	movlw	6
  3839  0399  0278               	subwf	_ledStep,w
  3840  039A  1C03               	skipc
  3841  039B  0008               	return
  3842                           
  3843                           ;main.c: 220: {
  3844                           ;main.c: 221: TRISA &= 0xDF;
  3845  039C  1683               	bsf	3,5	;RP0=1, select bank1
  3846  039D  1285               	bcf	5,5	;volatile
  3847                           
  3848                           ;main.c: 222: TRISB &= 0xDF;
  3849  039E  1283               	bcf	3,5	;RP0=0, select bank0
  3850  039F  1285               	bcf	5,5	;volatile
  3851                           
  3852                           ;main.c: 223: PORTA |= 0x20;
  3853  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  3854  03A1  1686               	bsf	6,5	;volatile
  3855  03A2  0008               	return
  3856  03A3                     i1l2352:	
  3857  03A3  084C               	movf	_ledCnt,w
  3858                           
  3859                           ; Switch size 1, requested type "space"
  3860                           ; Number of cases is 7, Range of values is 0 to 6
  3861                           ; switch strategies available:
  3862                           ; Name         Instructions Cycles
  3863                           ; direct_byte           13     6 (fixed)
  3864                           ; simple_byte           22    12 (average)
  3865                           ; jumptable            260     6 (fixed)
  3866                           ;	Chosen strategy is direct_byte
  3867  03A4  0084               	movwf	4
  3868  03A5  3007               	movlw	7
  3869  03A6  0204               	subwf	4,w
  3870  03A7  1803               	skipnc
  3871  03A8  0008               	return
  3872  03A9  3005               	movlw	high i1S3462
  3873  03AA  008A               	movwf	10
  3874  03AB  308D               	movlw	low i1S3462
  3875  03AC  0704               	addwf	4,w
  3876  03AD  0082               	movwf	2
  3877  03AE                     i1l691:	
  3878  03AE  0008               	return
  3879  03AF                     __end_of_ledShow:	
  3880  007E                     btemp	set	126	;btemp
  3881  007E                     wtemp0	set	126
  3882                           
  3883                           	psect	swtext1
  3884  058D                     __pswtext1:	
  3885  058D                     i1S3462:	
  3886  058D  2BAE               	ljmp	i1l691
  3887  058E  2B71               	ljmp	i1l2318
  3888  058F  2B78               	ljmp	i1l2324
  3889  0590  2B80               	ljmp	i1l2330
  3890  0591  2B88               	ljmp	i1l2336
  3891  0592  2B8E               	ljmp	i1l2342
  3892  0593  2B98               	ljmp	i1l2346


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         58
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      74
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _chrgCtr->___lbdiv
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3272
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               1     1      0     683
                                              3 BANK0      1     1      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     362
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0     321
                                              0 BANK0      2     2      0
                            ___lbdiv
                        _chrgPwmInit
                        _chrgPwmStop
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1159
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0    1042
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1    1042
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     ___lbdiv
     _chrgPwmInit
     _chrgPwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4A       4       92.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      55       7        0.0%
DATA                 0      0      55       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Dec 23 15:19:04 2024

            _protectFlag 004E                        pc 0002                       PL2 01E8  
                     PL4 01F7                       PL6 0116                       PL8 0570  
                     fsr 0004                      PL10 0200                      l661 047B  
                    l809 0278                      l665 0492                      l881 014E  
                    l777 04D0                      l891 01CD                      l887 0189  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _PR2 0011      __size_of_ADC_Sample 00CC                      fsr0 0004  
                    indf 0000          __end_of_AD_Init 058D                     l2124 0597  
                   l2118 0586                     l3110 029F                     l1158 055A  
                   l3040 0226                     l3016 054A                     l3008 0536  
                   l3042 0227                     l3122 02A9                     l3210 0099  
                   l2162 050F                     l3300 02DE                     l3108 029C  
                   l3060 0249                     l3052 023D                     l3220 00A5  
                   l3118 02A5                     l3222 00AB                     l3150 0036  
                   l3312 030B                     l3080 0264                     l3064 0251  
                   l3056 023E                     l2280 0567                     l3232 00CB  
                   l3216 009F                     l3208 0097                     l3136 0024  
                   l3322 031F                     l3090 0276                     l3082 0268  
                   l2266 0554                     l3250 00EF                     l3226 00C1  
                   l3170 0057                     l3340 0351                     l3084 026A  
                   l3076 025E                     l3252 00F0                     l3236 00CE  
                   l3180 0063                     l3148 0034                     l3260 00F7  
                   l2700 04C7                     l3334 0348                     l3342 0353  
                   l3318 0318                     l3238 00D0                     l3174 0059  
                   l3256 00F3                     l3168 0055                     l2720 0448  
                   l3440 04AB                     l3408 0483                     l3276 0113  
                   l3196 007B                     l3188 0070                     l3364 03CC  
                   l3356 03BC                     l2732 0462                     l2740 0472  
                   l3198 007D                     l3374 03DC                     l3366 03CE  
                   l2734 0464                     l3296 02DB                     l3376 03E0  
                   l3384 03E8                     l3378 03E3                     l2692 04BE  
                   l3388 03EE                     l2942 012E                     l2694 04C1  
                   l2952 0138                     l2944 0130                     l2696 04C3  
                   l2980 017D                     l2982 0185                     l2958 0139  
                   l2992 01D1                     l2976 0173                     l2968 0159  
                   _CHS4 04B6                     _IOCA 0089                     _IOCB 0009  
                   u3005 0179                     u3015 0183                     u3055 01C3  
                   u3075 01DA                     u3315 0284                     u4037 02AE  
                   u4047 031D                     _PIE1 000E                     u4057 0358  
                   u4067 012A                     u3715 02FD                     u3555 00BF  
                   _PEIE 005E                     _RAIE 0073                     _RAIF 006B  
                   _RBIE 005B                     _RBIF 0058                     u3595 00E3  
                   _PIR1 000D                     _WPDA 0087                     _WPUA 0088  
                   _WPUB 0008                     _main 0476                     btemp 007E  
                   start 000C            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 0569          __end_of___lbmod 054E                    _T2CON 0013  
                  i1l656 0529                    i1l691 03AE            _countHalfFull 004F  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 0116          __end_of_ledShow 03AF          __end_of_keyRead 0515  
                  pclath 000A          __end_of_pwmInit 0586          __end_of_pwmStop 0597  
                  status 0003                    wtemp0 007E          __end_of_workCtr 0476  
        ___lbdiv@divisor 0073            _addPowerCount 0047          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 04AD     __size_of_chrgPwmInit 0007  
   __size_of_chrgPwmStop 0003                   ??_main 0077                ??_AD_Init 0073  
    __end_of_Init_System 04F7                   _ADCON0 0095                   _ADCON1 0096  
                 i1S3462 058D                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _GODONE 04A9                   i1l2330 0380  
                 i1l2324 0378                   i1l2342 038E                   i1l2318 0371  
                 i1l2336 0388                   i1l2352 03A3                   i1l2346 0398  
                 i1l2864 0526                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD0L 0019                   _PWMD1L 001A             ??_ADC_Sample 0056  
           keyCtr@kclick 0074       __size_of_Isr_Timer 001D               _Sleep_Mode 0400  
              ??___lbdiv 0074                ??___lbmod 0074                   _ledCnt 004C  
                 _ledCtr 03AF                   _keyCtr 04AD                ??_chrgCtr 0056  
                 _pwStep 0043                   _result 0030                ??_ledShow 0070  
              ??_keyRead 0073       __end_of_ADC_Sample 01E8                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0073  
       ___lbdiv@dividend 0074               _batADValue 002A          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0057          _workOverOutTime 004D  
         __pcstackCOMMON 0070       __size_of_checkOutA 00AC              _Init_System 04D5  
             __end_ofPL2 01F7               __end_ofPL4 0200               __end_ofPL6 011C  
             __end_ofPL8 0576         ___lbdiv@quotient 0076        __end_of_Isr_Timer 0532  
             _checkBatAD 02B1               __pbssBANK0 0020             _chrgFullFlag 0051  
            ?_Sleep_Mode 0070               __pmaintext 0476               __pintentry 0004  
                ?_ledCtr 0070             _chrgWaitTime 003A                  ?_keyCtr 0070  
             _ledCntTime 0038                  _AD_Init 0586                  _PWM01DT 001F  
                _PWMD01H 001E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D        __end_of_checkOutA 02B1                  _IntFlag 0052  
             _intCount10 0050          ADC_Sample@adldo 0073          ADC_Sample@admax 0063  
        ADC_Sample@admin 0061          ADC_Sample@adsum 005D                  ___lbdiv 054E  
                ___lbmod 0532                  _addTime 003C          __size_of_ledCtr 0051  
        __size_of_keyCtr 0028                  _chrgCtr 0018               _lowBatFlag 0035  
                __ptext1 043E                  __ptext2 0594                  __ptext3 057E  
                __ptext4 03AF                  __ptext5 0532                  __ptext6 04AD  
                __ptext7 04F7                  __ptext8 0018                  __ptext9 0597  
                _ledShow 035B                  _ledStep 0078                  _count1s 0053  
                _count5s 0024                  _count8s 0022                  _maxDuty 0049  
                _keyRead 04F7      __size_of_Sleep_Mode 003E                  _pwmInit 057E  
                _subTime 003B              ?_checkBatAD 0070                  _pwmStop 0594  
             _preLedStep 0036                  clrloop0 0577                  _workCtr 043E  
             _outADValue 002C     end_of_initialization 0016            _longPressFlag 004A  
          ??_chrgPwmInit 0073            ??_chrgPwmStop 0073         ___lbmod@dividend 0056  
            ___lbmod@rem 0058      __size_of_checkBatAD 00AA             ?_Init_System 0070  
         __end_of_ledCtr 0400           __end_of_keyCtr 04D5      __end_of_chrgPwmInit 0570  
    __end_of_chrgPwmStop 059A              __end_ofPL10 0205      start_initialization 000D  
              _Isr_Timer 0515             ??_Sleep_Mode 0073                 ??_ledCtr 0059  
      ADC_Sample@ad_temp 0065                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0056  
     __end_of_Sleep_Mode 043E               ?_Isr_Timer 0070                _checkOutA 0205  
              __pnvBANK0 0069              _chrgMaxDuty 0039                _chrgMaxAD 003E  
            _chrgPwmInit 0569                 ?___lbdiv 0073                 ?___lbmod 0073  
            _chrgPwmStop 0597                 ?_chrgCtr 0070                __pswtext1 058D  
              _count900s 0020                 ?_ledShow 0070                 ?_keyRead 0070  
              _firstTime 0069           ADC_Sample@adch 005B                 ?_pwmInit 0070  
              _fullCount 0026             ??_checkBatAD 0074                 ?_pwmStop 0070  
              _lockCount 003D                 ?_workCtr 0070              ADC_Sample@i 005C  
            ADC_Sample@j 005A        interrupt_function 0004               ?_checkOutA 0070  
              clear_ram0 0576                _prePwStep 0077              _reChrgCount 0042  
              _sleepTime 0034                _overCount 0048       __end_of_checkBatAD 035B  
   __size_of_Init_System 0022                _startTime 0045         __size_of_AD_Init 0007  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 011C  
       __size_of___lbdiv 001B         __size_of___lbmod 001C              _lockLedStep 0041  
       __size_of_chrgCtr 00FE         __size_of_ledShow 0054         __size_of_keyRead 001E  
               _adresult 0032                 _chrgFlag 007A                 _chrgMode 003F  
               __ptext10 0569                 __ptext11 054E                 __ptext12 0205  
               __ptext13 02B1                 __ptext14 011C                 __ptext15 0400  
               __ptext16 04D5                 __ptext17 0586                 __ptext18 0515  
               __ptext19 035B         __size_of_pwmInit 0008         __size_of_pwmStop 0003  
               _count50s 0028         __size_of_workCtr 0038                 _keyCount 004B  
               _intCount 0054            __size_of_main 0037              ??_checkOutA 0074  
       checkOutA@maxAout 0068                 _tempDuty 0046                 _test_adc 0055  
               _power_ad 002E                 _workStep 0079             _overChrgTime 0044  
               intlevel1 0000              ?_ADC_Sample 0073             ?_chrgPwmInit 0070  
           _overWorkTime 0037             ?_chrgPwmStop 0070              _showBatTime 0040  
             _OPTION_REG 0001  
