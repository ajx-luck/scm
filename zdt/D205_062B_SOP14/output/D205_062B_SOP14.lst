

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 14 14:33:26 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	pa_nodes0,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	strings
    73  05C4                     __pstrings:	
    74  05C4                     stringtab:	
    75  05C4                     __stringtab:	
    76  05C4                     stringcode:	
    77                           ;	String table - string pointers are 1 byte each
    78                           
    79  05C4                     stringdir:	
    80  05C4  3005               	movlw	high stringdir
    81  05C5  008A               	movwf	10
    82  05C6  0804               	movf	4,w
    83  05C7  0A84               	incf	4,f
    84  05C8  0782               	addwf	2,f
    85  05C9                     __stringbase:	
    86  05C9  3400               	retlw	0
    87  05CA                     __end_of__stringtab:	
    88  05CA                     _numArray:	
    89  05CA  343F               	retlw	63
    90  05CB  3406               	retlw	6
    91  05CC  345B               	retlw	91
    92  05CD  344F               	retlw	79
    93  05CE  3466               	retlw	102
    94  05CF  346D               	retlw	109
    95  05D0  347D               	retlw	125
    96  05D1  3407               	retlw	7
    97  05D2  347F               	retlw	127
    98  05D3  346F               	retlw	111
    99  05D4  3471               	retlw	113
   100  05D5  3479               	retlw	121
   101  05D6  3450               	retlw	80
   102  05D7  3476               	retlw	118
   103  05D8                     __end_of_numArray:	
   104                           
   105                           	psect	nvBANK0
   106  0068                     __pnvBANK0:	
   107  0068                     _geweiNum:	
   108  0068                     	ds	1
   109  0069                     _shiweiNum:	
   110  0069                     	ds	1
   111  006A                     _firstTime:	
   112  006A                     	ds	1
   113  001D                     _PWMCON2	set	29
   114  0018                     _PWMTH	set	24
   115  0017                     _PWMTL	set	23
   116  0016                     _PWMCON1	set	22
   117  0015                     _PWMCON0	set	21
   118  0014                     _OSCCON	set	20
   119  0013                     _T2CON	set	19
   120  0011                     _PR2	set	17
   121  000E                     _PIE1	set	14
   122  000D                     _PIR1	set	13
   123  000B                     _INTCON	set	11
   124  0009                     _IOCB	set	9
   125  0008                     _WPUB	set	8
   126  0006                     _PORTB	set	6
   127  0005                     _TRISB	set	5
   128  0001                     _OPTION_REG	set	1
   129  0071                     _TMR2IE	set	113
   130  0073                     _RAIE	set	115
   131  0069                     _TMR2IF	set	105
   132  006B                     _RAIF	set	107
   133  0058                     _RBIF	set	88
   134  005B                     _RBIE	set	91
   135  005E                     _PEIE	set	94
   136  005F                     _GIE	set	95
   137  0030                     _RB0	set	48
   138  0031                     _RB1	set	49
   139  0033                     _RB3	set	51
   140  0034                     _RB4	set	52
   141  0035                     _RB5	set	53
   142  009E                     _PWMD23H	set	158
   143  009D                     _PWM23DT	set	157
   144  009C                     _PWMD3L	set	156
   145  009B                     _PWMD2L	set	155
   146  0099                     _ADRESH	set	153
   147  0098                     _ADRESL	set	152
   148  0096                     _ADCON1	set	150
   149  0095                     _ADCON0	set	149
   150  0094                     _ANSEL1	set	148
   151  0093                     _ANSEL0	set	147
   152  0089                     _IOCA	set	137
   153  0088                     _WPUA	set	136
   154  0087                     _WPDA	set	135
   155  0086                     _PORTA	set	134
   156  0085                     _TRISA	set	133
   157  04B2                     _LDO_EN	set	1202
   158  04B6                     _CHS4	set	1206
   159  04A9                     _GODONE	set	1193
   160  0434                     _RA4	set	1076
   161  0435                     _RA5	set	1077
   162                           
   163                           	psect	cinit
   164  000D                     start_initialization:	
   165                           ; #config settings
   166                           
   167  000D                     __initialization:	
   168                           
   169                           ; Clear objects allocated to COMMON
   170  000D  3077               	movlw	low __pbssCOMMON
   171  000E  0084               	movwf	4
   172  000F  307B               	movlw	low (__pbssCOMMON+4)
   173  0010  2606               	fcall	clear_ram0
   174  0011  3020               	movlw	low __pbssBANK0
   175                           
   176                           ; Clear objects allocated to BANK0
   177  0012  1383               	bcf	3,7	;select IRP bank0
   178  0013  0084               	movwf	4
   179  0014  3055               	movlw	low (__pbssBANK0+53)
   180  0015  2606               	fcall	clear_ram0
   181  0016                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184  0016                     __end_of__initialization:	
   185  0016  0183               	clrf	3
   186  0017  2C50               	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMMON
   189  0077                     __pbssCOMMON:	
   190  0077                     _batADValue:	
   191  0077                     	ds	2
   192  0079                     _prePwStep:	
   193  0079                     	ds	1
   194  007A                     _workStep:	
   195  007A                     	ds	1
   196                           
   197                           	psect	bssBANK0
   198  0020                     __pbssBANK0:	
   199  0020                     _count900s:	
   200  0020                     	ds	2
   201  0022                     _count8s:	
   202  0022                     	ds	2
   203  0024                     _overWorkTime:	
   204  0024                     	ds	2
   205  0026                     _count5s:	
   206  0026                     	ds	2
   207  0028                     _fullCount:	
   208  0028                     	ds	2
   209  002A                     _count50s:	
   210  002A                     	ds	2
   211  002C                     _outADValue:	
   212  002C                     	ds	2
   213  002E                     _power_ad:	
   214  002E                     	ds	2
   215  0030                     _result:	
   216  0030                     	ds	2
   217  0032                     _adresult:	
   218  0032                     	ds	2
   219  0034                     _motorPwmFlag:	
   220  0034                     	ds	1
   221  0035                     _chrgPwmFlag:	
   222  0035                     	ds	1
   223  0036                     _sleepTime:	
   224  0036                     	ds	1
   225  0037                     _lowBatFlag:	
   226  0037                     	ds	1
   227  0038                     _ledCntTime:	
   228  0038                     	ds	1
   229  0039                     _chrgMaxDuty:	
   230  0039                     	ds	1
   231  003A                     _chrgWaitTime:	
   232  003A                     	ds	1
   233  003B                     _subTime:	
   234  003B                     	ds	1
   235  003C                     _addTime:	
   236  003C                     	ds	1
   237  003D                     _lockCount:	
   238  003D                     	ds	1
   239  003E                     _chrgMaxAD:	
   240  003E                     	ds	1
   241  003F                     _chrgMode:	
   242  003F                     	ds	1
   243  0040                     _showBatTime:	
   244  0040                     	ds	1
   245  0041                     _reChrgCount:	
   246  0041                     	ds	1
   247  0042                     _pwStep:	
   248  0042                     	ds	1
   249  0043                     _overChrgTime:	
   250  0043                     	ds	1
   251  0044                     _startTime:	
   252  0044                     	ds	1
   253  0045                     _tempDuty:	
   254  0045                     	ds	1
   255  0046                     _overCount:	
   256  0046                     	ds	1
   257  0047                     _maxDuty:	
   258  0047                     	ds	1
   259  0048                     _longPressFlag:	
   260  0048                     	ds	1
   261  0049                     _keyCount:	
   262  0049                     	ds	1
   263  004A                     _ledCnt:	
   264  004A                     	ds	1
   265  004B                     _workOverOutTime:	
   266  004B                     	ds	1
   267  004C                     _protectFlag:	
   268  004C                     	ds	1
   269  004D                     _countHalfFull:	
   270  004D                     	ds	1
   271  004E                     _intCount10:	
   272  004E                     	ds	1
   273  004F                     _chrgFullFlag:	
   274  004F                     	ds	1
   275  0050                     _chrgFlag:	
   276  0050                     	ds	1
   277  0051                     _IntFlag:	
   278  0051                     	ds	1
   279  0052                     _count1s:	
   280  0052                     	ds	1
   281  0053                     _intCount:	
   282  0053                     	ds	1
   283  0054                     _test_adc:	
   284  0054                     	ds	1
   285                           
   286                           	psect	clrtext
   287  0606                     clear_ram0:	
   288                           ;	Called with FSR containing the base address, and
   289                           ;	W with the last address+1
   290                           
   291  0606  0064               	clrwdt	;clear the watchdog before getting into this loop
   292  0607                     clrloop0:	
   293  0607  0180               	clrf	0	;clear RAM location pointed to by FSR
   294  0608  0A84               	incf	4,f	;increment pointer
   295  0609  0604               	xorwf	4,w	;XOR with final address
   296  060A  1903               	btfsc	3,2	;have we reached the end yet?
   297  060B  3400               	retlw	0	;all done for this memory range, return
   298  060C  0604               	xorwf	4,w	;XOR again to restore value
   299  060D  2E07               	goto	clrloop0	;do the next byte
   300                           
   301                           	psect	cstackCOMMON
   302  0070                     __pcstackCOMMON:	
   303  0070                     ?_ledShow:	
   304  0070                     ??_ledShow:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_Init_System:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_AD_Init:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_checkOutA:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_chrgCtr:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_checkBatAD:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_keyCtr:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_workCtr:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_ledCtr:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_Sleep_Mode:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_chrgPwmStop:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_pwmStop:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_chrgPwmInit:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_pwmInit:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_Isr_Timer:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_Isr_Timer:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_main:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_keyRead:	
   356                           ; 1 bytes @ 0x0
   357                           
   358                           
   359                           ; 1 bytes @ 0x0
   360  0070                     	ds	3
   361  0073                     ??_Init_System:	
   362  0073                     ??_AD_Init:	
   363                           ; 1 bytes @ 0x3
   364                           
   365  0073                     ??_chrgCtr:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ??_workCtr:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ??_Sleep_Mode:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     ??_chrgPwmStop:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ??_pwmStop:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ??_chrgPwmInit:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ??_pwmInit:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ?_ADC_Sample:	
   387                           ; 1 bytes @ 0x3
   388                           
   389  0073                     ??_keyRead:	
   390                           ; 1 bytes @ 0x3
   391                           
   392  0073                     ?___lbdiv:	
   393                           ; 1 bytes @ 0x3
   394                           
   395  0073                     ?___lbmod:	
   396                           ; 1 bytes @ 0x3
   397                           
   398  0073                     keyRead@keyStatus:	
   399                           ; 1 bytes @ 0x3
   400                           
   401  0073                     ADC_Sample@adldo:	
   402                           ; 1 bytes @ 0x3
   403                           
   404  0073                     ___lbdiv@divisor:	
   405                           ; 1 bytes @ 0x3
   406                           
   407  0073                     ___lbmod@divisor:	
   408                           ; 1 bytes @ 0x3
   409                           
   410                           
   411                           ; 1 bytes @ 0x3
   412  0073                     	ds	1
   413  0074                     ??_checkOutA:	
   414  0074                     ??_checkBatAD:	
   415                           ; 1 bytes @ 0x4
   416                           
   417  0074                     ??_keyCtr:	
   418                           ; 1 bytes @ 0x4
   419                           
   420  0074                     ??___lbdiv:	
   421                           ; 1 bytes @ 0x4
   422                           
   423  0074                     ??___lbmod:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0074                     keyCtr@kclick:	
   427                           ; 1 bytes @ 0x4
   428                           
   429  0074                     ___lbdiv@dividend:	
   430                           ; 1 bytes @ 0x4
   431                           
   432                           
   433                           ; 1 bytes @ 0x4
   434  0074                     	ds	1
   435  0075                     ___lbdiv@counter:	
   436                           
   437                           ; 1 bytes @ 0x5
   438  0075                     	ds	1
   439  0076                     ___lbdiv@quotient:	
   440                           
   441                           ; 1 bytes @ 0x6
   442  0076                     	ds	1
   443  0077                     ??_ledCtr:	
   444  0077                     ??_main:	
   445                           ; 1 bytes @ 0x7
   446                           
   447                           
   448                           	psect	cstackBANK0
   449  0055                     __pcstackBANK0:	
   450                           ; 1 bytes @ 0x7
   451                           
   452  0055                     ??_ADC_Sample:	
   453  0055                     ___lbmod@dividend:	
   454                           ; 1 bytes @ 0x0
   455                           
   456                           
   457                           ; 1 bytes @ 0x0
   458  0055                     	ds	1
   459  0056                     ___lbmod@counter:	
   460                           
   461                           ; 1 bytes @ 0x1
   462  0056                     	ds	1
   463  0057                     ___lbmod@rem:	
   464                           
   465                           ; 1 bytes @ 0x2
   466  0057                     	ds	2
   467  0059                     ADC_Sample@j:	
   468                           
   469                           ; 1 bytes @ 0x4
   470  0059                     	ds	1
   471  005A                     ADC_Sample@adch:	
   472                           
   473                           ; 1 bytes @ 0x5
   474  005A                     	ds	1
   475  005B                     ADC_Sample@i:	
   476                           
   477                           ; 1 bytes @ 0x6
   478  005B                     	ds	1
   479  005C                     ADC_Sample@adsum:	
   480                           
   481                           ; 4 bytes @ 0x7
   482  005C                     	ds	4
   483  0060                     ADC_Sample@admin:	
   484                           
   485                           ; 2 bytes @ 0xB
   486  0060                     	ds	2
   487  0062                     ADC_Sample@admax:	
   488                           
   489                           ; 2 bytes @ 0xD
   490  0062                     	ds	2
   491  0064                     ADC_Sample@ad_temp:	
   492                           
   493                           ; 2 bytes @ 0xF
   494  0064                     	ds	2
   495  0066                     checkOutA@maxtempV:	
   496                           
   497                           ; 1 bytes @ 0x11
   498  0066                     	ds	1
   499  0067                     checkOutA@maxAout:	
   500                           
   501                           ; 1 bytes @ 0x12
   502  0067                     	ds	1
   503                           
   504                           	psect	maintext
   505  0450                     __pmaintext:	
   506 ;;
   507 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   508 ;;
   509 ;; *************** function _main *****************
   510 ;; Defined at:
   511 ;;		line 155 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : B00/0
   522 ;;		On exit  : 100/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1
   525 ;;      Params:         0       0       0
   526 ;;      Locals:         0       0       0
   527 ;;      Temps:          0       0       0
   528 ;;      Totals:         0       0       0
   529 ;;Total ram usage:        0 bytes
   530 ;; Hardware stack levels required when called:    4
   531 ;; This function calls:
   532 ;;		_AD_Init
   533 ;;		_Init_System
   534 ;;		_Sleep_Mode
   535 ;;		_checkBatAD
   536 ;;		_checkOutA
   537 ;;		_chrgCtr
   538 ;;		_keyCtr
   539 ;;		_ledCtr
   540 ;;		_workCtr
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           
   547                           ;psect for function _main
   548  0450                     _main:	
   549                           
   550                           ;main.c: 157: Init_System();
   551                           
   552                           ;incstack = 0
   553                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   554  0450  25AA               	fcall	_Init_System
   555                           
   556                           ;main.c: 158: AD_Init();
   557  0451  260E               	fcall	_AD_Init
   558                           
   559                           ;main.c: 159: shiweiNum = geweiNum = numArray[8];
   560  0452  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   561  0453  0084               	movwf	4
   562  0454  25C4               	fcall	stringdir
   563  0455  1283               	bcf	3,5	;RP0=0, select bank0
   564  0456  00E8               	movwf	_geweiNum
   565  0457  00E9               	movwf	_shiweiNum
   566                           
   567                           ;main.c: 160: firstTime = 200;
   568  0458  30C8               	movlw	200
   569  0459  00EA               	movwf	_firstTime
   570  045A                     l693:	
   571                           ;main.c: 161: while (1)
   572                           
   573  045A  0064               	clrwdt	;# 
   574                           
   575                           ;main.c: 164: if(intCount10 > 10)
   576  045B  300B               	movlw	11
   577  045C  1283               	bcf	3,5	;RP0=0, select bank0
   578  045D  024E               	subwf	_intCount10,w
   579  045E  1C03               	skipc
   580  045F  2C62               	goto	l3233
   581                           
   582                           ;main.c: 165: {
   583                           ;main.c: 166: intCount10 = 0;
   584  0460  01CE               	clrf	_intCount10
   585                           
   586                           ;main.c: 167: checkOutA();
   587  0461  22A8               	fcall	_checkOutA
   588  0462                     l3233:	
   589                           
   590                           ;main.c: 168: }
   591                           ;main.c: 169: if(!IntFlag)
   592  0462  1283               	bcf	3,5	;RP0=0, select bank0
   593  0463  0851               	movf	_IntFlag,w
   594  0464  1903               	btfsc	3,2
   595  0465  2C5A               	goto	l693
   596                           
   597                           ;main.c: 171: IntFlag = 0;
   598  0466  01D1               	clrf	_IntFlag
   599                           
   600                           ;main.c: 172: chrgCtr();
   601  0467  2018               	fcall	_chrgCtr
   602                           
   603                           ;main.c: 173: checkBatAD();
   604  0468  2350               	fcall	_checkBatAD
   605                           
   606                           ;main.c: 174: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   607  0469  1283               	bcf	3,5	;RP0=0, select bank0
   608  046A  0850               	movf	_chrgFlag,w
   609  046B  1D03               	btfss	3,2
   610  046C  2C74               	goto	l697
   611  046D  0837               	movf	_lowBatFlag,w
   612  046E  1D03               	btfss	3,2
   613  046F  2C74               	goto	l697
   614  0470  086A               	movf	_firstTime,w
   615  0471  1D03               	btfss	3,2
   616  0472  2C74               	goto	l697
   617                           
   618                           ;main.c: 175: {
   619                           ;main.c: 176: keyCtr();
   620  0473  250D               	fcall	_keyCtr
   621  0474                     l697:	
   622                           
   623                           ;main.c: 177: }
   624                           ;main.c: 178: workCtr();
   625  0474  24D7               	fcall	_workCtr
   626                           
   627                           ;main.c: 179: ledCtr();
   628  0475  23F3               	fcall	_ledCtr
   629                           
   630                           ;main.c: 180: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   631  0476  0850               	movf	_chrgFlag,w
   632  0477  1D03               	btfss	3,2
   633  0478  2C93               	goto	l3273
   634  0479  087A               	movf	_workStep,w
   635  047A  1D03               	btfss	3,2
   636  047B  2C93               	goto	l3273
   637  047C  0849               	movf	_keyCount,w
   638  047D  1D03               	btfss	3,2
   639  047E  2C93               	goto	l3273
   640  047F  086A               	movf	_firstTime,w
   641  0480  1D03               	btfss	3,2
   642  0481  2C93               	goto	l3273
   643  0482  0840               	movf	_showBatTime,w
   644  0483  1D03               	btfss	3,2
   645  0484  2C93               	goto	l3273
   646  0485  0824               	movf	_overWorkTime,w
   647  0486  0425               	iorwf	_overWorkTime+1,w
   648  0487  1D03               	btfss	3,2
   649  0488  2C93               	goto	l3273
   650  0489  30C8               	movlw	200
   651                           
   652                           ;main.c: 181: {
   653                           ;main.c: 182: shiweiNum = geweiNum = 0;
   654  048A  01E8               	clrf	_geweiNum
   655  048B  01E9               	clrf	_shiweiNum
   656                           
   657                           ;main.c: 183: if(++sleepTime >= 200)
   658  048C  0AB6               	incf	_sleepTime,f
   659  048D  0236               	subwf	_sleepTime,w
   660  048E  1C03               	skipc
   661  048F  2C5A               	goto	l693
   662                           
   663                           ;main.c: 184: {
   664                           ;main.c: 185: sleepTime = 0;
   665  0490  01B6               	clrf	_sleepTime
   666                           
   667                           ;main.c: 186: Sleep_Mode();
   668  0491  2495               	fcall	_Sleep_Mode
   669  0492  2C5A               	goto	l693
   670  0493                     l3273:	
   671                           
   672                           ;main.c: 189: else
   673                           ;main.c: 190: {
   674                           ;main.c: 191: sleepTime = 0;
   675  0493  01B6               	clrf	_sleepTime
   676  0494  2C5A               	goto	l693
   677  0495                     __end_of_main:	
   678                           
   679                           	psect	text1
   680  04D7                     __ptext1:	
   681 ;; *************** function _workCtr *****************
   682 ;; Defined at:
   683 ;;		line 662 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;		None
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 100/0
   694 ;;		On exit  : 100/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1
   697 ;;      Params:         0       0       0
   698 ;;      Locals:         0       0       0
   699 ;;      Temps:          0       0       0
   700 ;;      Totals:         0       0       0
   701 ;;Total ram usage:        0 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; Hardware stack levels required when called:    3
   704 ;; This function calls:
   705 ;;		_pwmInit
   706 ;;		_pwmStop
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _workCtr
   714  04D7                     _workCtr:	
   715                           
   716                           ;main.c: 665: if(startTime > 0)
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   720  04D7  0844               	movf	_startTime,w
   721  04D8  1D03               	btfss	3,2
   722                           
   723                           ;main.c: 666: {
   724                           ;main.c: 667: startTime--;
   725  04D9  03C4               	decf	_startTime,f
   726                           
   727                           ;main.c: 668: }
   728                           ;main.c: 669: if(workStep > 0)
   729  04DA  087A               	movf	_workStep,w
   730  04DB  1903               	btfsc	3,2
   731  04DC  2D09               	goto	l2763
   732                           
   733                           ;main.c: 670: {
   734                           ;main.c: 671: if(motorPwmFlag == 0)
   735  04DD  0834               	movf	_motorPwmFlag,w
   736  04DE  1D03               	btfss	3,2
   737  04DF  2CE1               	goto	l2747
   738                           
   739                           ;main.c: 672: {
   740                           ;main.c: 673: pwmInit();
   741  04E0  25F9               	fcall	_pwmInit
   742  04E1                     l2747:	
   743                           
   744                           ;main.c: 675: }
   745                           ;main.c: 676: maxDuty = 60 + (workStep/2);
   746  04E1  1003               	clrc
   747  04E2  0C7A               	rrf	_workStep,w
   748  04E3  3E3C               	addlw	60
   749  04E4  00C7               	movwf	_maxDuty
   750                           
   751                           ;main.c: 677: if(overCount >= 5)
   752  04E5  3005               	movlw	5
   753  04E6  0246               	subwf	_overCount,w
   754  04E7  1C03               	skipc
   755  04E8  2CF9               	goto	l2755
   756                           
   757                           ;main.c: 678: {
   758                           ;main.c: 679: if(++count5s > 600)
   759  04E9  0AA6               	incf	_count5s,f
   760  04EA  1903               	skipnz
   761  04EB  0AA7               	incf	_count5s+1,f
   762  04EC  3002               	movlw	2
   763  04ED  0227               	subwf	_count5s+1,w
   764  04EE  3059               	movlw	89
   765  04EF  1903               	skipnz
   766  04F0  0226               	subwf	_count5s,w
   767  04F1  1C03               	skipc
   768  04F2  2CFB               	goto	l2757
   769                           
   770                           ;main.c: 680: {
   771                           ;main.c: 681: count5s = 0;
   772  04F3  01A6               	clrf	_count5s
   773  04F4  01A7               	clrf	_count5s+1
   774                           
   775                           ;main.c: 684: prejrStep = jrStep;
   776  04F5  01A4               	clrf	_overWorkTime
   777  04F6  01A5               	clrf	_overWorkTime+1
   778                           
   779                           ;main.c: 686: jrStep = 0;
   780  04F7  01FA               	clrf	_workStep
   781  04F8  2CFB               	goto	l2757
   782  04F9                     l2755:	
   783                           
   784                           ;main.c: 689: else
   785                           ;main.c: 690: {
   786                           ;main.c: 691: count5s = 0;
   787  04F9  01A6               	clrf	_count5s
   788  04FA  01A7               	clrf	_count5s+1
   789  04FB                     l2757:	
   790                           
   791                           ;main.c: 692: }
   792                           ;main.c: 693: if(count1s == 0 && ++count900s >= 900)
   793  04FB  0852               	movf	_count1s,w
   794  04FC  1D03               	btfss	3,2
   795  04FD  0008               	return
   796  04FE  0AA0               	incf	_count900s,f
   797  04FF  1903               	skipnz
   798  0500  0AA1               	incf	_count900s+1,f
   799  0501  3003               	movlw	3
   800  0502  0221               	subwf	_count900s+1,w
   801  0503  3084               	movlw	132
   802  0504  1903               	skipnz
   803  0505  0220               	subwf	_count900s,w
   804  0506  1803               	btfsc	3,0
   805                           
   806                           ;main.c: 696: jrStep = 0;
   807  0507  01FA               	clrf	_workStep
   808  0508  0008               	return
   809  0509                     l2763:	
   810                           
   811                           ;main.c: 699: else
   812                           ;main.c: 700: {
   813                           ;main.c: 701: pwmStop();
   814  0509  2616               	fcall	_pwmStop
   815                           
   816                           ;main.c: 702: count900s = 0;
   817  050A  01A0               	clrf	_count900s
   818  050B  01A1               	clrf	_count900s+1
   819  050C  0008               	return
   820  050D                     __end_of_workCtr:	
   821                           
   822                           	psect	text2
   823  05F9                     __ptext2:	
   824 ;; *************** function _pwmInit *****************
   825 ;; Defined at:
   826 ;;		line 1023 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, status,2
   835 ;; Tracked objects:
   836 ;;		On entry : 100/0
   837 ;;		On exit  : 100/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1
   840 ;;      Params:         0       0       0
   841 ;;      Locals:         0       0       0
   842 ;;      Temps:          0       0       0
   843 ;;      Totals:         0       0       0
   844 ;;Total ram usage:        0 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    2
   847 ;; This function calls:
   848 ;;		Nothing
   849 ;; This function is called by:
   850 ;;		_workCtr
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           
   855                           ;psect for function _pwmInit
   856  05F9                     _pwmInit:	
   857                           
   858                           ;main.c: 1025: motorPwmFlag = 1;
   859                           
   860                           ;incstack = 0
   861                           ; Regs used in _pwmInit: [wreg+status,2]
   862  05F9  01B4               	clrf	_motorPwmFlag
   863  05FA  0AB4               	incf	_motorPwmFlag,f
   864                           
   865                           ;main.c: 1026: PWMCON1 = 0B00000000;
   866  05FB  0196               	clrf	22	;volatile
   867                           
   868                           ;main.c: 1027: PWMTH = 0X00;
   869  05FC  0198               	clrf	24	;volatile
   870                           
   871                           ;main.c: 1028: PWMTL = 200;
   872  05FD  30C8               	movlw	200
   873  05FE  0097               	movwf	23	;volatile
   874                           
   875                           ;main.c: 1031: PWMD23H = 0;
   876  05FF  1683               	bsf	3,5	;RP0=1, select bank1
   877  0600  019E               	clrf	30	;volatile
   878                           
   879                           ;main.c: 1032: PWMD3L = 80;
   880  0601  3050               	movlw	80
   881  0602  009C               	movwf	28	;volatile
   882                           
   883                           ;main.c: 1033: PWM23DT = 0X00;
   884  0603  019D               	clrf	29	;volatile
   885                           
   886                           ;main.c: 1035: PWMCON0 = 0X48;
   887  0604  3048               	movlw	72
   888                           
   889                           ;main.c: 1036: PWMCON2 =0X00;
   890  0605  2DE5               	ljmp	PL10	;call to abstracted procedure
   891  0606                     __end_of_pwmInit:	
   892                           
   893                           	psect	text3
   894  03F3                     __ptext3:	
   895 ;; *************** function _ledCtr *****************
   896 ;; Defined at:
   897 ;;		line 364 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 100/0
   908 ;;		On exit  : 100/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1
   911 ;;      Params:         0       0       0
   912 ;;      Locals:         0       0       0
   913 ;;      Temps:          0       0       0
   914 ;;      Totals:         0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    3
   918 ;; This function calls:
   919 ;;		___lbdiv
   920 ;;		___lbmod
   921 ;; This function is called by:
   922 ;;		_main
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           
   927                           ;psect for function _ledCtr
   928  03F3                     _ledCtr:	
   929                           
   930                           ;main.c: 366: if(firstTime > 0)
   931                           
   932                           ;incstack = 0
   933                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   934  03F3  086A               	movf	_firstTime,w
   935  03F4  1903               	btfsc	3,2
   936  03F5  2BFE               	goto	l3195
   937                           
   938                           ;main.c: 367: {
   939                           ;main.c: 368: firstTime--;
   940  03F6  03EA               	decf	_firstTime,f
   941                           
   942                           ;main.c: 369: if(prePwStep < pwStep)
   943  03F7  0842               	movf	_pwStep,w
   944  03F8  0279               	subwf	_prePwStep,w
   945  03F9  1803               	skipnc
   946  03FA  0008               	return
   947                           
   948                           ;main.c: 370: {
   949                           ;main.c: 371: prePwStep = pwStep;
   950  03FB  0842               	movf	_pwStep,w
   951  03FC  00F9               	movwf	_prePwStep
   952  03FD  0008               	return
   953  03FE                     l3195:	
   954                           
   955                           ;main.c: 374: else if(overWorkTime > 0)
   956  03FE  0824               	movf	_overWorkTime,w
   957  03FF  0425               	iorwf	_overWorkTime+1,w
   958  0400  1903               	btfsc	3,2
   959  0401  2C11               	goto	l3203
   960                           
   961                           ;main.c: 375: {
   962                           ;main.c: 376: overWorkTime--;
   963  0402  3001               	movlw	1
   964  0403  02A4               	subwf	_overWorkTime,f
   965  0404  3000               	movlw	0
   966  0405  1C03               	skipc
   967  0406  03A5               	decf	_overWorkTime+1,f
   968  0407  02A5               	subwf	_overWorkTime+1,f
   969                           
   970                           ;main.c: 377: shiweiNum = numArray[11];
   971  0408  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
   972  0409  0084               	movwf	4
   973  040A  25C4               	fcall	stringdir
   974  040B  00E9               	movwf	_shiweiNum
   975                           
   976                           ;main.c: 378: geweiNum = numArray[12];
   977  040C  300D               	movlw	low (((_numArray+12)-__stringbase)| (0+32768))
   978  040D  0084               	movwf	4
   979  040E  25C4               	fcall	stringdir
   980  040F  00E8               	movwf	_geweiNum
   981                           
   982                           ;main.c: 379: }
   983  0410  0008               	return
   984  0411                     l3203:	
   985                           
   986                           ;main.c: 380: else if(showBatTime > 0)
   987  0411  0840               	movf	_showBatTime,w
   988  0412  1903               	btfsc	3,2
   989  0413  2C23               	goto	l3211
   990  0414  300A               	movlw	10
   991                           
   992                           ;main.c: 381: {
   993                           ;main.c: 382: showBatTime--;
   994  0415  03C0               	decf	_showBatTime,f
   995                           
   996                           ;main.c: 383: shiweiNum = numArray[prePwStep/10];
   997  0416  00F3               	movwf	___lbdiv@divisor
   998  0417  0879               	movf	_prePwStep,w
   999  0418  258F               	fcall	___lbdiv
  1000  0419  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1001  041A  0084               	movwf	4
  1002  041B  25C4               	fcall	stringdir
  1003                           
  1004                           ;main.c: 384: geweiNum = numArray[prePwStep%10];
  1005  041C  244B               	fcall	PL14	;call to abstracted procedure
  1006  041D  2573               	fcall	___lbmod
  1007  041E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1008  041F  0084               	movwf	4
  1009  0420  25C4               	fcall	stringdir
  1010  0421  00E8               	movwf	_geweiNum
  1011                           
  1012                           ;main.c: 385: }
  1013  0422  0008               	return
  1014  0423                     l3211:	
  1015                           
  1016                           ;main.c: 386: else if(workStep > 0)
  1017  0423  087A               	movf	_workStep,w
  1018  0424  1903               	btfsc	3,2
  1019  0425  2C37               	goto	l3215
  1020                           
  1021                           ;main.c: 387: {
  1022                           ;main.c: 390: shiweiNum = numArray[workStep/10];
  1023  0426  300A               	movlw	10
  1024  0427  00F3               	movwf	___lbdiv@divisor
  1025  0428  087A               	movf	_workStep,w
  1026  0429  258F               	fcall	___lbdiv
  1027  042A  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1028  042B  0084               	movwf	4
  1029  042C  25C4               	fcall	stringdir
  1030  042D  00E9               	movwf	_shiweiNum
  1031                           
  1032                           ;main.c: 391: geweiNum = numArray[workStep%10];
  1033  042E  300A               	movlw	10
  1034  042F  00F3               	movwf	___lbmod@divisor
  1035  0430  087A               	movf	_workStep,w
  1036  0431  2573               	fcall	___lbmod
  1037  0432  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1038  0433  0084               	movwf	4
  1039  0434  25C4               	fcall	stringdir
  1040  0435  00E8               	movwf	_geweiNum
  1041                           
  1042                           ;main.c: 393: }
  1043  0436  0008               	return
  1044  0437                     l3215:	
  1045                           
  1046                           ;main.c: 394: else if(chrgFlag)
  1047  0437  0850               	movf	_chrgFlag,w
  1048  0438  1903               	btfsc	3,2
  1049  0439  2C48               	goto	l3219
  1050                           
  1051                           ;main.c: 395: {
  1052                           ;main.c: 396: shiweiNum = numArray[prePwStep/10];
  1053  043A  300A               	movlw	10
  1054  043B  00F3               	movwf	___lbdiv@divisor
  1055  043C  0879               	movf	_prePwStep,w
  1056  043D  258F               	fcall	___lbdiv
  1057  043E  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1058  043F  0084               	movwf	4
  1059  0440  25C4               	fcall	stringdir
  1060                           
  1061                           ;main.c: 397: geweiNum = numArray[prePwStep%10];
  1062  0441  244B               	fcall	PL14	;call to abstracted procedure
  1063  0442  2573               	fcall	___lbmod
  1064  0443  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1065  0444  0084               	movwf	4
  1066  0445  25C4               	fcall	stringdir
  1067  0446  00E8               	movwf	_geweiNum
  1068                           
  1069                           ;main.c: 398: }
  1070  0447  0008               	return
  1071  0448                     l3219:	
  1072                           
  1073                           ;main.c: 399: else
  1074                           ;main.c: 400: {
  1075                           ;main.c: 401: shiweiNum = 0;
  1076  0448  01E9               	clrf	_shiweiNum
  1077                           
  1078                           ;main.c: 402: geweiNum = 0;
  1079  0449  01E8               	clrf	_geweiNum
  1080  044A  0008               	return
  1081  044B                     __end_of_ledCtr:	
  1082  044B                     PL14:	
  1083  044B  00E9               	movwf	_shiweiNum
  1084  044C  300A               	movlw	10
  1085  044D  00F3               	movwf	___lbmod@divisor
  1086  044E  0879               	movf	_prePwStep,w
  1087  044F  0008               	return
  1088  0450                     __end_ofPL14:	
  1089                           
  1090                           	psect	text4
  1091  0573                     __ptext4:	
  1092 ;; *************** function ___lbmod *****************
  1093 ;; Defined at:
  1094 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  dividend        1    wreg     unsigned char 
  1097 ;;  divisor         1    3[COMMON] unsigned char 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  dividend        1    0[BANK0 ] unsigned char 
  1100 ;;  rem             1    2[BANK0 ] unsigned char 
  1101 ;;  counter         1    1[BANK0 ] unsigned char 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      unsigned char 
  1104 ;; Registers used:
  1105 ;;		wreg, status,2, status,0
  1106 ;; Tracked objects:
  1107 ;;		On entry : 100/0
  1108 ;;		On exit  : 100/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1
  1111 ;;      Params:         1       0       0
  1112 ;;      Locals:         0       3       0
  1113 ;;      Temps:          1       0       0
  1114 ;;      Totals:         2       3       0
  1115 ;;Total ram usage:        5 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:    2
  1118 ;; This function calls:
  1119 ;;		Nothing
  1120 ;; This function is called by:
  1121 ;;		_ledCtr
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           
  1126                           ;psect for function ___lbmod
  1127  0573                     ___lbmod:	
  1128                           
  1129                           ;incstack = 0
  1130                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1131                           ;___lbmod@dividend stored from wreg
  1132  0573  00D5               	movwf	___lbmod@dividend
  1133  0574  3008               	movlw	8
  1134  0575  00D6               	movwf	___lbmod@counter
  1135  0576  01D7               	clrf	___lbmod@rem
  1136  0577                     l3019:	
  1137  0577  0855               	movf	___lbmod@dividend,w
  1138  0578  00F4               	movwf	??___lbmod
  1139  0579  3007               	movlw	7
  1140  057A  1003               	clrc
  1141  057B                     L1:	
  1142  057B  0CF4               	rrf	??___lbmod,f
  1143  057C  3EFF               	addlw	-1
  1144  057D  1003               	clrc
  1145  057E  1D03               	skipz
  1146  057F  2D7B               	goto	L1
  1147  0580  0D57               	rlf	___lbmod@rem,w
  1148  0581  0474               	iorwf	??___lbmod,w
  1149  0582  00D7               	movwf	___lbmod@rem
  1150  0583  1003               	clrc
  1151  0584  0DD5               	rlf	___lbmod@dividend,f
  1152  0585  0873               	movf	___lbmod@divisor,w
  1153  0586  0257               	subwf	___lbmod@rem,w
  1154  0587  1C03               	skipc
  1155  0588  2D8B               	goto	l3027
  1156  0589  0873               	movf	___lbmod@divisor,w
  1157  058A  02D7               	subwf	___lbmod@rem,f
  1158  058B                     l3027:	
  1159  058B  0BD6               	decfsz	___lbmod@counter,f
  1160  058C  2D77               	goto	l3019
  1161  058D  0857               	movf	___lbmod@rem,w
  1162  058E  0008               	return
  1163  058F                     __end_of___lbmod:	
  1164                           
  1165                           	psect	text5
  1166  058F                     __ptext5:	
  1167 ;; *************** function ___lbdiv *****************
  1168 ;; Defined at:
  1169 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  dividend        1    wreg     unsigned char 
  1172 ;;  divisor         1    3[COMMON] unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  dividend        1    4[COMMON] unsigned char 
  1175 ;;  quotient        1    6[COMMON] unsigned char 
  1176 ;;  counter         1    5[COMMON] unsigned char 
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      unsigned char 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0
  1181 ;; Tracked objects:
  1182 ;;		On entry : 100/0
  1183 ;;		On exit  : 100/0
  1184 ;;		Unchanged: 100/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1
  1186 ;;      Params:         1       0       0
  1187 ;;      Locals:         3       0       0
  1188 ;;      Temps:          0       0       0
  1189 ;;      Totals:         4       0       0
  1190 ;;Total ram usage:        4 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    2
  1193 ;; This function calls:
  1194 ;;		Nothing
  1195 ;; This function is called by:
  1196 ;;		_ledCtr
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           
  1201                           ;psect for function ___lbdiv
  1202  058F                     ___lbdiv:	
  1203                           
  1204                           ;incstack = 0
  1205                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1206                           ;___lbdiv@dividend stored from wreg
  1207  058F  00F4               	movwf	___lbdiv@dividend
  1208  0590  01F6               	clrf	___lbdiv@quotient
  1209  0591  0873               	movf	___lbdiv@divisor,w
  1210  0592  1903               	btfsc	3,2
  1211  0593  2DA8               	goto	l2335
  1212  0594  01F5               	clrf	___lbdiv@counter
  1213  0595                     l2321:	
  1214  0595  0AF5               	incf	___lbdiv@counter,f
  1215  0596  1BF3               	btfsc	___lbdiv@divisor,7
  1216  0597  2D9B               	goto	l1203
  1217  0598  1003               	clrc
  1218  0599  0DF3               	rlf	___lbdiv@divisor,f
  1219  059A  2D95               	goto	l2321
  1220  059B                     l1203:	
  1221  059B  1003               	clrc
  1222  059C  0DF6               	rlf	___lbdiv@quotient,f
  1223  059D  0873               	movf	___lbdiv@divisor,w
  1224  059E  0274               	subwf	___lbdiv@dividend,w
  1225  059F  1C03               	skipc
  1226  05A0  2DA5               	goto	L2
  1227  05A1  0873               	movf	___lbdiv@divisor,w
  1228  05A2  02F4               	subwf	___lbdiv@dividend,f
  1229  05A3  1476               	bsf	___lbdiv@quotient,0
  1230  05A4  1003               	clrc
  1231  05A5                     L2:	
  1232  05A5  0CF3               	rrf	___lbdiv@divisor,f
  1233  05A6  0BF5               	decfsz	___lbdiv@counter,f
  1234  05A7  2D9B               	goto	l1203
  1235  05A8                     l2335:	
  1236  05A8  0876               	movf	___lbdiv@quotient,w
  1237  05A9  0008               	return
  1238  05AA                     __end_of___lbdiv:	
  1239                           
  1240                           	psect	text6
  1241  050D                     __ptext6:	
  1242 ;; *************** function _keyCtr *****************
  1243 ;; Defined at:
  1244 ;;		line 624 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  kclick          1    4[COMMON] unsigned char 
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, pclath, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 100/0
  1255 ;;		On exit  : 100/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMMON   BANK0   BANK1
  1258 ;;      Params:         0       0       0
  1259 ;;      Locals:         1       0       0
  1260 ;;      Temps:          0       0       0
  1261 ;;      Totals:         1       0       0
  1262 ;;Total ram usage:        1 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    3
  1265 ;; This function calls:
  1266 ;;		_keyRead
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _keyCtr
  1274  050D                     _keyCtr:	
  1275                           
  1276                           ;main.c: 626: char kclick = keyRead(0x04 & (~PORTB));
  1277                           
  1278                           ;incstack = 0
  1279                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1280  050D  0906               	comf	6,w	;volatile
  1281  050E  3904               	andlw	4
  1282  050F  2538               	fcall	_keyRead
  1283  0510  00F4               	movwf	keyCtr@kclick
  1284                           
  1285                           ;main.c: 627: if(kclick == 1)
  1286  0511  0B74               	decfsz	keyCtr@kclick,w
  1287  0512  2D27               	goto	l2725
  1288                           
  1289                           ;main.c: 628: {
  1290                           ;main.c: 629: if(workStep > 0)
  1291  0513  087A               	movf	_workStep,w
  1292  0514  1903               	btfsc	3,2
  1293  0515  2D1E               	goto	l2717
  1294                           
  1295                           ;main.c: 630: {
  1296                           ;main.c: 631: if(++workStep > 32)
  1297  0516  3021               	movlw	33
  1298  0517  0AFA               	incf	_workStep,f
  1299  0518  027A               	subwf	_workStep,w
  1300  0519  1C03               	skipc
  1301  051A  0008               	return
  1302                           
  1303                           ;main.c: 632: {
  1304                           ;main.c: 633: workStep = 1;
  1305  051B  01FA               	clrf	_workStep
  1306  051C  0AFA               	incf	_workStep,f
  1307  051D  0008               	return
  1308  051E                     l2717:	
  1309                           
  1310                           ;main.c: 636: else if(showBatTime > 0)
  1311  051E  0840               	movf	_showBatTime,w
  1312  051F  1903               	btfsc	3,2
  1313  0520  2D23               	goto	l2721
  1314                           
  1315                           ;main.c: 637: {
  1316                           ;main.c: 638: showBatTime = 0;
  1317  0521  01C0               	clrf	_showBatTime
  1318                           
  1319                           ;main.c: 639: }
  1320  0522  0008               	return
  1321  0523                     l2721:	
  1322                           
  1323                           ;main.c: 640: else
  1324                           ;main.c: 641: {
  1325                           ;main.c: 642: showBatTime = 200;
  1326  0523  30C8               	movlw	200
  1327  0524  00C0               	movwf	_showBatTime
  1328                           
  1329                           ;main.c: 643: count1s = 0;
  1330  0525  01D2               	clrf	_count1s
  1331  0526  0008               	return
  1332  0527                     l2725:	
  1333                           
  1334                           ;main.c: 646: else if(kclick == 2)
  1335  0527  3002               	movlw	2
  1336  0528  0674               	xorwf	keyCtr@kclick,w
  1337  0529  1D03               	btfss	3,2
  1338  052A  0008               	return
  1339                           
  1340                           ;main.c: 647: {
  1341                           ;main.c: 648: if(workStep > 0)
  1342  052B  087A               	movf	_workStep,w
  1343  052C  1903               	btfsc	3,2
  1344  052D  2D30               	goto	l824
  1345                           
  1346                           ;main.c: 649: {
  1347                           ;main.c: 650: workStep = 0;
  1348  052E  01FA               	clrf	_workStep
  1349                           
  1350                           ;main.c: 651: }
  1351  052F  0008               	return
  1352  0530                     l824:	
  1353  0530  301E               	movlw	30
  1354                           
  1355                           ;main.c: 652: else
  1356                           ;main.c: 653: {
  1357                           ;main.c: 654: workStep = 1;
  1358  0531  01FA               	clrf	_workStep
  1359  0532  0AFA               	incf	_workStep,f
  1360                           
  1361                           ;main.c: 655: startTime = 30;
  1362  0533  00C4               	movwf	_startTime
  1363                           
  1364                           ;main.c: 656: showBatTime = 0;
  1365  0534  01C0               	clrf	_showBatTime
  1366                           
  1367                           ;main.c: 657: overWorkTime = 0;
  1368  0535  01A4               	clrf	_overWorkTime
  1369  0536  01A5               	clrf	_overWorkTime+1
  1370  0537  0008               	return
  1371  0538                     __end_of_keyCtr:	
  1372                           
  1373                           	psect	text7
  1374  0538                     __ptext7:	
  1375 ;; *************** function _keyRead *****************
  1376 ;; Defined at:
  1377 ;;		line 556 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  keyStatus       1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  keyStatus       1    3[COMMON] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      unsigned char 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2, status,0
  1386 ;; Tracked objects:
  1387 ;;		On entry : 100/0
  1388 ;;		On exit  : 100/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1
  1391 ;;      Params:         0       0       0
  1392 ;;      Locals:         1       0       0
  1393 ;;      Temps:          0       0       0
  1394 ;;      Totals:         1       0       0
  1395 ;;Total ram usage:        1 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    2
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_keyCtr
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           
  1406                           ;psect for function _keyRead
  1407  0538                     _keyRead:	
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1411                           ;keyRead@keyStatus stored from wreg
  1412  0538  00F3               	movwf	keyRead@keyStatus
  1413                           
  1414                           ;main.c: 558: if(keyStatus)
  1415  0539  0873               	movf	keyRead@keyStatus,w
  1416  053A  3064               	movlw	100
  1417  053B  1903               	btfsc	3,2
  1418  053C  2D4A               	goto	L4
  1419                           
  1420                           ;main.c: 559: {
  1421                           ;main.c: 560: keyCount++;
  1422  053D  0AC9               	incf	_keyCount,f
  1423                           
  1424                           ;main.c: 561: if(keyCount >= 100)
  1425  053E  0249               	subwf	_keyCount,w
  1426  053F  1C03               	skipc
  1427  0540  3400               	retlw	0
  1428                           
  1429                           ;main.c: 562: {
  1430                           ;main.c: 563: keyCount = 100;
  1431  0541  3064               	movlw	100
  1432  0542  00C9               	movwf	_keyCount
  1433                           
  1434                           ;main.c: 564: if(!longPressFlag)
  1435  0543  0848               	movf	_longPressFlag,w
  1436  0544  1D03               	btfss	3,2
  1437  0545  3400               	retlw	0
  1438  0546  3002               	movlw	2
  1439                           
  1440                           ;main.c: 565: {
  1441                           ;main.c: 566: longPressFlag = 1;
  1442  0547  01C8               	clrf	_longPressFlag
  1443  0548  0AC8               	incf	_longPressFlag,f
  1444                           
  1445                           ;main.c: 567: return 2;
  1446  0549  0008               	return
  1447  054A                     L4:	
  1448                           ;main.c: 571: else
  1449                           ;main.c: 572: {
  1450                           ;main.c: 573: if(keyCount >= 100)
  1451                           
  1452  054A  0249               	subwf	_keyCount,w
  1453  054B  1C03               	skipc
  1454  054C  2D50               	goto	l2217
  1455                           
  1456                           ;main.c: 574: {
  1457                           ;main.c: 575: keyCount = 0;
  1458  054D  01C9               	clrf	_keyCount
  1459                           
  1460                           ;main.c: 576: longPressFlag = 0;
  1461  054E  01C8               	clrf	_longPressFlag
  1462                           
  1463                           ;main.c: 577: return 0;
  1464  054F  3400               	retlw	0
  1465  0550                     l2217:	
  1466                           
  1467                           ;main.c: 579: else if(keyCount >= 6)
  1468  0550  3006               	movlw	6
  1469  0551  0249               	subwf	_keyCount,w
  1470                           
  1471                           ;main.c: 580: {
  1472                           ;main.c: 581: keyCount = 0;
  1473  0552  01C9               	clrf	_keyCount
  1474  0553  1803               	btfsc	3,0
  1475                           
  1476                           ;main.c: 582: return 1;
  1477  0554  3401               	retlw	1
  1478  0555  3400               	retlw	0
  1479  0556                     __end_of_keyRead:	
  1480                           ;main.c: 583: }
  1481                           ;main.c: 584: keyCount = 0;
  1482                           
  1483                           
  1484                           	psect	text8
  1485  0018                     __ptext8:	
  1486 ;; *************** function _chrgCtr *****************
  1487 ;; Defined at:
  1488 ;;		line 408 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;		None
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0, pclath, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 100/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1
  1502 ;;      Params:         0       0       0
  1503 ;;      Locals:         0       0       0
  1504 ;;      Temps:          2       0       0
  1505 ;;      Totals:         2       0       0
  1506 ;;Total ram usage:        2 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    3
  1509 ;; This function calls:
  1510 ;;		_chrgPwmInit
  1511 ;;		_chrgPwmStop
  1512 ;;		_pwmStop
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _chrgCtr
  1520  0018                     _chrgCtr:	
  1521                           
  1522                           ;main.c: 410: if(PORTA & 0x02)
  1523                           
  1524                           ;incstack = 0
  1525                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1526  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1527  0019  1C86               	btfss	6,1	;volatile
  1528  001A  28DE               	goto	l2629
  1529                           
  1530                           ;main.c: 411: {
  1531                           ;main.c: 412: if(chrgFlag == 0)
  1532  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1533  001C  0850               	movf	_chrgFlag,w
  1534  001D  1D03               	btfss	3,2
  1535  001E  2823               	goto	l2521
  1536                           
  1537                           ;main.c: 413: {
  1538                           ;main.c: 414: chrgFlag = 1;
  1539  001F  01D0               	clrf	_chrgFlag
  1540  0020  0AD0               	incf	_chrgFlag,f
  1541                           
  1542                           ;main.c: 415: chrgMaxDuty = 0;
  1543  0021  01B9               	clrf	_chrgMaxDuty
  1544                           
  1545                           ;main.c: 416: chrgPwmStop();
  1546  0022  261D               	fcall	_chrgPwmStop
  1547  0023                     l2521:	
  1548                           
  1549                           ;main.c: 419: workStep = 0;
  1550  0023  01FA               	clrf	_workStep
  1551                           
  1552                           ;main.c: 420: pwmStop();
  1553  0024  2616               	fcall	_pwmStop
  1554                           
  1555                           ;main.c: 421: lowBatFlag = 0;
  1556  0025  01B7               	clrf	_lowBatFlag
  1557                           
  1558                           ;main.c: 422: if(prePwStep < pwStep)
  1559  0026  0842               	movf	_pwStep,w
  1560  0027  0279               	subwf	_prePwStep,w
  1561  0028  1803               	skipnc
  1562  0029  2833               	goto	l2533
  1563                           
  1564                           ;main.c: 423: {
  1565                           ;main.c: 424: if(++count50s > 3000)
  1566  002A  20FC               	fcall	PL8	;call to abstracted procedure
  1567  002B  1903               	skipnz
  1568  002C  022A               	subwf	_count50s,w
  1569  002D  1C03               	skipc
  1570  002E  2835               	goto	l2535
  1571                           
  1572                           ;main.c: 425: {
  1573                           ;main.c: 426: count50s = 0;
  1574  002F  01AA               	clrf	_count50s
  1575  0030  01AB               	clrf	_count50s+1
  1576                           
  1577                           ;main.c: 427: prePwStep++;
  1578  0031  0AF9               	incf	_prePwStep,f
  1579  0032  2835               	goto	l2535
  1580  0033                     l2533:	
  1581                           
  1582                           ;main.c: 430: else
  1583                           ;main.c: 431: {
  1584                           ;main.c: 432: count50s = 0;
  1585  0033  01AA               	clrf	_count50s
  1586  0034  01AB               	clrf	_count50s+1
  1587  0035                     l2535:	
  1588                           
  1589                           ;main.c: 433: }
  1590                           ;main.c: 434: if(protectFlag)
  1591  0035  084C               	movf	_protectFlag,w
  1592  0036  1903               	btfsc	3,2
  1593  0037  284A               	goto	l2551
  1594                           
  1595                           ;main.c: 435: {
  1596                           ;main.c: 436: chrgPwmStop();
  1597  0038  261D               	fcall	_chrgPwmStop
  1598                           
  1599                           ;main.c: 437: if(prePwStep < 99 && protectFlag == 1)
  1600  0039  3063               	movlw	99
  1601  003A  0279               	subwf	_prePwStep,w
  1602  003B  1803               	skipnc
  1603  003C  2848               	goto	l2547
  1604  003D  0B4C               	decfsz	_protectFlag,w
  1605  003E  2848               	goto	l2547
  1606                           
  1607                           ;main.c: 438: {
  1608                           ;main.c: 439: if(++reChrgCount > 250)
  1609  003F  30FB               	movlw	251
  1610  0040  0AC1               	incf	_reChrgCount,f
  1611  0041  0241               	subwf	_reChrgCount,w
  1612  0042  1C03               	skipc
  1613  0043  0008               	return
  1614                           
  1615                           ;main.c: 440: {
  1616                           ;main.c: 441: reChrgCount = 0;
  1617  0044  01C1               	clrf	_reChrgCount
  1618                           
  1619                           ;main.c: 442: chrgFullFlag = 0;
  1620  0045  01CF               	clrf	_chrgFullFlag
  1621                           
  1622                           ;main.c: 443: protectFlag = 0;
  1623  0046  01CC               	clrf	_protectFlag
  1624  0047  0008               	return
  1625  0048                     l2547:	
  1626                           
  1627                           ;main.c: 446: else
  1628                           ;main.c: 447: {
  1629                           ;main.c: 448: reChrgCount = 0;
  1630  0048  01C1               	clrf	_reChrgCount
  1631  0049  0008               	return
  1632  004A                     l2551:	
  1633                           
  1634                           ;main.c: 451: }
  1635                           ;main.c: 452: if(batADValue < 1118)
  1636  004A  3004               	movlw	4
  1637  004B  0278               	subwf	_batADValue+1,w
  1638  004C  305E               	movlw	94
  1639  004D  1903               	skipnz
  1640  004E  0277               	subwf	_batADValue,w
  1641  004F  1803               	skipnc
  1642  0050  2854               	goto	l2557
  1643  0051  300F               	movlw	15
  1644                           
  1645                           ;main.c: 453: {
  1646                           ;main.c: 454: chrgMode = 0;
  1647  0052  01BF               	clrf	_chrgMode
  1648                           
  1649                           ;main.c: 455: chrgMaxAD = 15;
  1650  0053  286D               	goto	L5
  1651  0054                     l2557:	
  1652                           ;main.c: 456: }
  1653                           
  1654                           
  1655                           ;main.c: 457: else if(batADValue < 1530)
  1656  0054  3005               	movlw	5
  1657  0055  0278               	subwf	_batADValue+1,w
  1658  0056  30FA               	movlw	250
  1659  0057  1903               	skipnz
  1660  0058  0277               	subwf	_batADValue,w
  1661  0059  1803               	skipnc
  1662  005A  2861               	goto	l2565
  1663  005B  303C               	movlw	60
  1664                           
  1665                           ;main.c: 458: {
  1666                           ;main.c: 459: chrgMode = 1;
  1667  005C  01BF               	clrf	_chrgMode
  1668  005D  0ABF               	incf	_chrgMode,f
  1669                           
  1670                           ;main.c: 460: chrgMaxAD = 60;
  1671  005E  00BE               	movwf	_chrgMaxAD
  1672                           
  1673                           ;main.c: 461: lockCount = 0;
  1674  005F  01BD               	clrf	_lockCount
  1675                           
  1676                           ;main.c: 462: }
  1677  0060  286E               	goto	l2575
  1678  0061                     l2565:	
  1679                           
  1680                           ;main.c: 463: else if(count1s == 0)
  1681  0061  0852               	movf	_count1s,w
  1682  0062  1D03               	btfss	3,2
  1683  0063  286E               	goto	l2575
  1684                           
  1685                           ;main.c: 464: {
  1686                           ;main.c: 465: if(++lockCount > 200)
  1687  0064  30C9               	movlw	201
  1688  0065  0ABD               	incf	_lockCount,f
  1689  0066  023D               	subwf	_lockCount,w
  1690  0067  1C03               	skipc
  1691  0068  286C               	goto	l2573
  1692  0069  3002               	movlw	2
  1693                           
  1694                           ;main.c: 466: {
  1695                           ;main.c: 467: lockCount = 0;
  1696  006A  01BD               	clrf	_lockCount
  1697                           
  1698                           ;main.c: 468: chrgMode = 2;
  1699  006B  00BF               	movwf	_chrgMode
  1700  006C                     l2573:	
  1701                           
  1702                           ;main.c: 469: }
  1703                           ;main.c: 471: chrgMaxAD = 60;
  1704  006C  303C               	movlw	60
  1705  006D                     L5:	
  1706  006D  00BE               	movwf	_chrgMaxAD
  1707  006E                     l2575:	
  1708                           
  1709                           ;main.c: 472: }
  1710                           ;main.c: 473: if(chrgMode == 2 && outADValue < 8)
  1711  006E  3002               	movlw	2
  1712  006F  063F               	xorwf	_chrgMode,w
  1713  0070  1D03               	btfss	3,2
  1714  0071  2888               	goto	l2585
  1715  0072  3000               	movlw	0
  1716  0073  022D               	subwf	_outADValue+1,w
  1717  0074  3008               	movlw	8
  1718  0075  1903               	skipnz
  1719  0076  022C               	subwf	_outADValue,w
  1720  0077  1803               	skipnc
  1721  0078  2888               	goto	l2585
  1722                           
  1723                           ;main.c: 474: {
  1724                           ;main.c: 475: if(++fullCount >= 200)
  1725  0079  0AA8               	incf	_fullCount,f
  1726  007A  1903               	skipnz
  1727  007B  0AA9               	incf	_fullCount+1,f
  1728  007C  3000               	movlw	0
  1729  007D  0229               	subwf	_fullCount+1,w
  1730  007E  30C8               	movlw	200
  1731  007F  1903               	skipnz
  1732  0080  0228               	subwf	_fullCount,w
  1733  0081  1C03               	skipc
  1734  0082  288A               	goto	l2587
  1735                           
  1736                           ;main.c: 476: {
  1737                           ;main.c: 477: fullCount = 0;
  1738  0083  01A8               	clrf	_fullCount
  1739  0084  01A9               	clrf	_fullCount+1
  1740                           
  1741                           ;main.c: 478: chrgFullFlag = 1;
  1742  0085  01CF               	clrf	_chrgFullFlag
  1743  0086  0ACF               	incf	_chrgFullFlag,f
  1744  0087  288A               	goto	l2587
  1745  0088                     l2585:	
  1746                           
  1747                           ;main.c: 481: else
  1748                           ;main.c: 482: {
  1749                           ;main.c: 483: fullCount = 0;
  1750  0088  01A8               	clrf	_fullCount
  1751  0089  01A9               	clrf	_fullCount+1
  1752  008A                     l2587:	
  1753                           
  1754                           ;main.c: 484: }
  1755                           ;main.c: 485: if(chrgFullFlag)
  1756  008A  084F               	movf	_chrgFullFlag,w
  1757  008B  1903               	btfsc	3,2
  1758  008C  288E               	goto	l2591
  1759                           
  1760                           ;main.c: 486: {
  1761                           ;main.c: 487: chrgPwmStop();
  1762  008D  2E1D               	ljmp	l2163
  1763  008E                     l2591:	
  1764                           ;main.c: 488: }
  1765                           
  1766                           
  1767                           ;main.c: 489: else
  1768                           ;main.c: 490: {
  1769                           ;main.c: 491: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  1770  008E  3006               	movlw	6
  1771  008F  0278               	subwf	_batADValue+1,w
  1772  0090  300F               	movlw	15
  1773  0091  1903               	skipnz
  1774  0092  0277               	subwf	_batADValue,w
  1775  0093  1803               	skipnc
  1776  0094  28A4               	goto	l2595
  1777  0095  083E               	movf	_chrgMaxAD,w
  1778  0096  3E02               	addlw	2
  1779  0097  00F3               	movwf	??_chrgCtr
  1780  0098  3000               	movlw	0
  1781  0099  1803               	skipnc
  1782  009A  3001               	movlw	1
  1783  009B  00F4               	movwf	??_chrgCtr+1
  1784  009C  082D               	movf	_outADValue+1,w
  1785  009D  0274               	subwf	??_chrgCtr+1,w
  1786  009E  1D03               	skipz
  1787  009F  28A2               	goto	u2335
  1788  00A0  082C               	movf	_outADValue,w
  1789  00A1  0273               	subwf	??_chrgCtr,w
  1790  00A2                     u2335:	
  1791  00A2  1803               	skipnc
  1792  00A3  28B3               	goto	l2607
  1793  00A4                     l2595:	
  1794                           
  1795                           ;main.c: 492: {
  1796                           ;main.c: 493: if(++subTime > chrgWaitTime)
  1797  00A4  0ABB               	incf	_subTime,f
  1798  00A5  083B               	movf	_subTime,w
  1799  00A6  023A               	subwf	_chrgWaitTime,w
  1800  00A7  1803               	skipnc
  1801  00A8  28B1               	goto	l2605
  1802                           
  1803                           ;main.c: 494: {
  1804                           ;main.c: 495: if(chrgMaxDuty > 1)
  1805  00A9  3002               	movlw	2
  1806  00AA  0239               	subwf	_chrgMaxDuty,w
  1807  00AB  1C03               	skipc
  1808  00AC  28AE               	goto	l2601
  1809                           
  1810                           ;main.c: 496: {
  1811                           ;main.c: 497: chrgMaxDuty--;
  1812  00AD  03B9               	decf	_chrgMaxDuty,f
  1813  00AE                     l2601:	
  1814  00AE  3032               	movlw	50
  1815                           
  1816                           ;main.c: 498: }
  1817                           ;main.c: 499: subTime = 0;
  1818  00AF  01BB               	clrf	_subTime
  1819                           
  1820                           ;main.c: 500: chrgWaitTime = 50;
  1821  00B0  00BA               	movwf	_chrgWaitTime
  1822  00B1                     l2605:	
  1823                           
  1824                           ;main.c: 501: }
  1825                           ;main.c: 502: addTime = 0;
  1826  00B1  01BC               	clrf	_addTime
  1827                           
  1828                           ;main.c: 503: }
  1829  00B2  28D3               	goto	l2621
  1830  00B3                     l2607:	
  1831                           
  1832                           ;main.c: 504: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1833  00B3  3006               	movlw	6
  1834  00B4  0278               	subwf	_batADValue+1,w
  1835  00B5  300E               	movlw	14
  1836  00B6  1903               	skipnz
  1837  00B7  0277               	subwf	_batADValue,w
  1838  00B8  1803               	skipnc
  1839  00B9  28D3               	goto	l2621
  1840  00BA  083E               	movf	_chrgMaxAD,w
  1841  00BB  3EFC               	addlw	252
  1842  00BC  00F3               	movwf	??_chrgCtr
  1843  00BD  30FF               	movlw	255
  1844  00BE  1803               	skipnc
  1845  00BF  3000               	movlw	0
  1846  00C0  00F4               	movwf	??_chrgCtr+1
  1847  00C1  022D               	subwf	_outADValue+1,w
  1848  00C2  1D03               	skipz
  1849  00C3  28C6               	goto	u2375
  1850  00C4  0873               	movf	??_chrgCtr,w
  1851  00C5  022C               	subwf	_outADValue,w
  1852  00C6                     u2375:	
  1853  00C6  1803               	skipnc
  1854  00C7  28D3               	goto	l2621
  1855                           
  1856                           ;main.c: 505: {
  1857                           ;main.c: 506: if(++addTime > chrgWaitTime)
  1858  00C8  0ABC               	incf	_addTime,f
  1859  00C9  083C               	movf	_addTime,w
  1860  00CA  023A               	subwf	_chrgWaitTime,w
  1861  00CB  1803               	skipnc
  1862  00CC  28D2               	goto	l2619
  1863  00CD  304B               	movlw	75
  1864                           
  1865                           ;main.c: 507: {
  1866                           ;main.c: 508: addTime = 0;
  1867  00CE  01BC               	clrf	_addTime
  1868                           
  1869                           ;main.c: 509: if(chrgMaxDuty < 75)
  1870  00CF  0239               	subwf	_chrgMaxDuty,w
  1871  00D0  1C03               	btfss	3,0
  1872                           
  1873                           ;main.c: 510: {
  1874                           ;main.c: 511: chrgMaxDuty++;
  1875  00D1  0AB9               	incf	_chrgMaxDuty,f
  1876  00D2                     l2619:	
  1877                           
  1878                           ;main.c: 512: }
  1879                           ;main.c: 513: }
  1880                           ;main.c: 514: subTime = 0;
  1881  00D2  01BB               	clrf	_subTime
  1882  00D3                     l2621:	
  1883                           
  1884                           ;main.c: 515: }
  1885                           ;main.c: 518: if(chrgPwmFlag == 0)
  1886  00D3  0835               	movf	_chrgPwmFlag,w
  1887  00D4  1D03               	btfss	3,2
  1888  00D5  28D7               	goto	l2625
  1889                           
  1890                           ;main.c: 519: {
  1891                           ;main.c: 520: chrgPwmInit();
  1892  00D6  25D8               	fcall	_chrgPwmInit
  1893  00D7                     l2625:	
  1894                           
  1895                           ;main.c: 521: }
  1896                           ;main.c: 522: PWMD23H = 0X00;
  1897  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  1898  00D8  019E               	clrf	30	;volatile
  1899                           
  1900                           ;main.c: 523: PWMD2L = chrgMaxDuty;
  1901  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1902  00DA  0839               	movf	_chrgMaxDuty,w
  1903  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  1904  00DC  009B               	movwf	27	;volatile
  1905  00DD  0008               	return
  1906  00DE                     l2629:	
  1907  00DE  3014               	movlw	20
  1908                           
  1909                           ;main.c: 529: chrgFlag = 0;
  1910  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1911  00E0  01D0               	clrf	_chrgFlag
  1912                           
  1913                           ;main.c: 530: chrgFullFlag = 0;
  1914  00E1  01CF               	clrf	_chrgFullFlag
  1915                           
  1916                           ;main.c: 531: protectFlag = 0;
  1917  00E2  01CC               	clrf	_protectFlag
  1918                           
  1919                           ;main.c: 532: chrgMode = 0;
  1920  00E3  01BF               	clrf	_chrgMode
  1921                           
  1922                           ;main.c: 533: chrgMaxAD = 0;
  1923  00E4  01BE               	clrf	_chrgMaxAD
  1924                           
  1925                           ;main.c: 534: chrgMaxDuty = 0;
  1926  00E5  01B9               	clrf	_chrgMaxDuty
  1927                           
  1928                           ;main.c: 536: lockLedStep = 0;
  1929  00E6  01BD               	clrf	_lockCount
  1930                           
  1931                           ;main.c: 537: chrgWaitTime = 20;
  1932  00E7  00BA               	movwf	_chrgWaitTime
  1933                           
  1934                           ;main.c: 538: chrgPwmStop();
  1935  00E8  261D               	fcall	_chrgPwmStop
  1936                           
  1937                           ;main.c: 539: if(prePwStep > 0 && prePwStep > pwStep)
  1938  00E9  0879               	movf	_prePwStep,w
  1939  00EA  1903               	btfsc	3,2
  1940  00EB  28F9               	goto	l2645
  1941  00EC  0879               	movf	_prePwStep,w
  1942  00ED  0242               	subwf	_pwStep,w
  1943  00EE  1803               	skipnc
  1944  00EF  28F9               	goto	l2645
  1945                           
  1946                           ;main.c: 540: {
  1947                           ;main.c: 541: if(++count50s > 3000)
  1948  00F0  20FC               	fcall	PL8	;call to abstracted procedure
  1949  00F1  1903               	skipnz
  1950  00F2  022A               	subwf	_count50s,w
  1951  00F3  1C03               	skipc
  1952  00F4  0008               	return
  1953                           
  1954                           ;main.c: 542: {
  1955                           ;main.c: 543: count50s = 0;
  1956  00F5  01AA               	clrf	_count50s
  1957  00F6  01AB               	clrf	_count50s+1
  1958                           
  1959                           ;main.c: 544: prePwStep--;
  1960  00F7  03F9               	decf	_prePwStep,f
  1961  00F8  0008               	return
  1962  00F9                     l2645:	
  1963                           
  1964                           ;main.c: 547: else
  1965                           ;main.c: 548: {
  1966                           ;main.c: 549: count50s = 0;
  1967  00F9  01AA               	clrf	_count50s
  1968  00FA  01AB               	clrf	_count50s+1
  1969  00FB  0008               	return
  1970  00FC                     __end_of_chrgCtr:	
  1971  00FC                     PL8:	
  1972  00FC  0AAA               	incf	_count50s,f
  1973  00FD  1903               	skipnz
  1974  00FE  0AAB               	incf	_count50s+1,f
  1975  00FF  300B               	movlw	11
  1976  0100  022B               	subwf	_count50s+1,w
  1977  0101  34B9               	retlw	185
  1978  0102                     __end_ofPL8:	
  1979                           
  1980                           	psect	text9
  1981  0616                     __ptext9:	
  1982 ;; *************** function _pwmStop *****************
  1983 ;; Defined at:
  1984 ;;		line 1039 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0
  1993 ;; Tracked objects:
  1994 ;;		On entry : 100/0
  1995 ;;		On exit  : 100/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1
  1998 ;;      Params:         0       0       0
  1999 ;;      Locals:         0       0       0
  2000 ;;      Temps:          0       0       0
  2001 ;;      Totals:         0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    2
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_chrgCtr
  2009 ;;		_workCtr
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _pwmStop
  2015  0616                     _pwmStop:	
  2016                           
  2017                           ;main.c: 1041: if(motorPwmFlag)
  2018                           
  2019                           ;incstack = 0
  2020                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2021  0616  0834               	movf	_motorPwmFlag,w
  2022  0617  1903               	btfsc	3,2
  2023  0618  0008               	return
  2024                           
  2025                           ;main.c: 1042: {
  2026                           ;main.c: 1043: motorPwmFlag = 0;
  2027  0619  01B4               	clrf	_motorPwmFlag
  2028                           
  2029                           ;main.c: 1044: PWMCON0 &= 0XF7;
  2030  061A  1195               	bcf	21,3	;volatile
  2031                           
  2032                           ;main.c: 1045: RB4 = 0;
  2033  061B  1206               	bcf	6,4	;volatile
  2034  061C  0008               	return
  2035  061D                     __end_of_pwmStop:	
  2036                           
  2037                           	psect	text10
  2038  061D                     __ptext10:	
  2039 ;; *************** function _chrgPwmStop *****************
  2040 ;; Defined at:
  2041 ;;		line 1013 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, status,2, status,0
  2050 ;; Tracked objects:
  2051 ;;		On entry : 100/0
  2052 ;;		On exit  : 100/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1
  2055 ;;      Params:         0       0       0
  2056 ;;      Locals:         0       0       0
  2057 ;;      Temps:          0       0       0
  2058 ;;      Totals:         0       0       0
  2059 ;;Total ram usage:        0 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    2
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_chrgCtr
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _chrgPwmStop
  2071  061D                     _chrgPwmStop:	
  2072  061D                     l2163:	
  2073                           ;incstack = 0
  2074                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2075                           
  2076                           
  2077                           ;main.c: 1015: if(chrgPwmFlag)
  2078  061D  0835               	movf	_chrgPwmFlag,w
  2079  061E  1903               	btfsc	3,2
  2080  061F  0008               	return
  2081                           
  2082                           ;main.c: 1016: {
  2083                           ;main.c: 1017: chrgPwmFlag = 0;
  2084  0620  01B5               	clrf	_chrgPwmFlag
  2085                           
  2086                           ;main.c: 1018: PWMCON0 &= 0xFB;
  2087  0621  1115               	bcf	21,2	;volatile
  2088                           
  2089                           ;main.c: 1019: RB3 = 0;
  2090  0622  1186               	bcf	6,3	;volatile
  2091  0623  0008               	return
  2092  0624                     __end_of_chrgPwmStop:	
  2093                           
  2094                           	psect	text11
  2095  05D8                     __ptext11:	
  2096 ;; *************** function _chrgPwmInit *****************
  2097 ;; Defined at:
  2098 ;;		line 995 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2
  2107 ;; Tracked objects:
  2108 ;;		On entry : 100/0
  2109 ;;		On exit  : 100/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMMON   BANK0   BANK1
  2112 ;;      Params:         0       0       0
  2113 ;;      Locals:         0       0       0
  2114 ;;      Temps:          0       0       0
  2115 ;;      Totals:         0       0       0
  2116 ;;Total ram usage:        0 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    2
  2119 ;; This function calls:
  2120 ;;		Nothing
  2121 ;; This function is called by:
  2122 ;;		_chrgCtr
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           
  2127                           ;psect for function _chrgPwmInit
  2128  05D8                     _chrgPwmInit:	
  2129                           
  2130                           ;main.c: 997: chrgPwmFlag = 1;
  2131                           
  2132                           ;incstack = 0
  2133                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2134  05D8  01B5               	clrf	_chrgPwmFlag
  2135  05D9  0AB5               	incf	_chrgPwmFlag,f
  2136                           
  2137                           ;main.c: 998: PWMCON1 = 0B00000000;
  2138  05DA  0196               	clrf	22	;volatile
  2139                           
  2140                           ;main.c: 1000: PWMTH = 0X00;
  2141  05DB  0198               	clrf	24	;volatile
  2142                           
  2143                           ;main.c: 1001: PWMTL = 100;
  2144  05DC  3064               	movlw	100
  2145  05DD  0097               	movwf	23	;volatile
  2146                           
  2147                           ;main.c: 1005: PWMD23H = 0;
  2148  05DE  1683               	bsf	3,5	;RP0=1, select bank1
  2149  05DF  019E               	clrf	30	;volatile
  2150                           
  2151                           ;main.c: 1006: PWMD2L = 10;
  2152  05E0  300A               	movlw	10
  2153  05E1  009B               	movwf	27	;volatile
  2154                           
  2155                           ;main.c: 1007: PWM23DT = 0X00;
  2156  05E2  019D               	clrf	29	;volatile
  2157                           
  2158                           ;main.c: 1009: PWMCON0 = 0X04;
  2159  05E3  3004               	movlw	4
  2160                           
  2161                           ;main.c: 1010: PWMCON2 =0X00;
  2162  05E4  2DE5               	ljmp	PL10	;call to abstracted procedure
  2163  05E5                     __end_of_chrgPwmInit:	
  2164  05E5                     PL10:	
  2165  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  2166  05E6  0095               	movwf	21	;volatile
  2167  05E7  019D               	clrf	29	;volatile
  2168  05E8  0008               	return
  2169  05E9                     __end_ofPL10:	
  2170                           
  2171                           	psect	text12
  2172  02A8                     __ptext12:	
  2173 ;; *************** function _checkOutA *****************
  2174 ;; Defined at:
  2175 ;;		line 707 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  maxAout         1   18[BANK0 ] unsigned char 
  2180 ;;  maxtempV        1   17[BANK0 ] unsigned char 
  2181 ;; Return value:  Size  Location     Type
  2182 ;;                  1    wreg      void 
  2183 ;; Registers used:
  2184 ;;		wreg, status,2, status,0, pclath, cstack
  2185 ;; Tracked objects:
  2186 ;;		On entry : 100/0
  2187 ;;		On exit  : 0/0
  2188 ;;		Unchanged: 0/0
  2189 ;; Data sizes:     COMMON   BANK0   BANK1
  2190 ;;      Params:         0       0       0
  2191 ;;      Locals:         0       2       0
  2192 ;;      Temps:          2       0       0
  2193 ;;      Totals:         2       2       0
  2194 ;;Total ram usage:        4 bytes
  2195 ;; Hardware stack levels used:    1
  2196 ;; Hardware stack levels required when called:    3
  2197 ;; This function calls:
  2198 ;;		_ADC_Sample
  2199 ;; This function is called by:
  2200 ;;		_main
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           
  2205                           ;psect for function _checkOutA
  2206  02A8                     _checkOutA:	
  2207                           
  2208                           ;main.c: 709: test_adc = ADC_Sample(0, 5);
  2209                           
  2210                           ;incstack = 0
  2211                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2212  02A8  3005               	movlw	5
  2213  02A9  00F3               	movwf	ADC_Sample@adldo
  2214  02AA  3000               	movlw	0
  2215  02AB  2102               	fcall	_ADC_Sample
  2216  02AC  00D4               	movwf	_test_adc	;volatile
  2217                           
  2218                           ;main.c: 710: if (0xA5 == test_adc)
  2219  02AD  30A5               	movlw	165
  2220  02AE  0654               	xorwf	_test_adc,w	;volatile
  2221  02AF  1D03               	btfss	3,2
  2222  02B0  2B48               	goto	l3123
  2223                           
  2224                           ;main.c: 711: {
  2225                           ;main.c: 712: if(chrgFlag && adresult > 210)
  2226  02B1  0850               	movf	_chrgFlag,w
  2227  02B2  1903               	btfsc	3,2
  2228  02B3  2AC4               	goto	l3047
  2229  02B4  3000               	movlw	0
  2230  02B5  0233               	subwf	_adresult+1,w	;volatile
  2231  02B6  30D3               	movlw	211
  2232  02B7  1903               	skipnz
  2233  02B8  0232               	subwf	_adresult,w	;volatile
  2234  02B9  1C03               	skipc
  2235  02BA  2AC4               	goto	l3047
  2236                           
  2237                           ;main.c: 713: {
  2238                           ;main.c: 714: if(++overChrgTime > 10)
  2239  02BB  300B               	movlw	11
  2240  02BC  0AC3               	incf	_overChrgTime,f
  2241  02BD  0243               	subwf	_overChrgTime,w
  2242  02BE  1C03               	skipc
  2243  02BF  2AC5               	goto	l3049
  2244  02C0  3002               	movlw	2
  2245                           
  2246                           ;main.c: 715: {
  2247                           ;main.c: 716: overChrgTime = 0;
  2248  02C1  01C3               	clrf	_overChrgTime
  2249                           
  2250                           ;main.c: 717: protectFlag = 2;
  2251  02C2  00CC               	movwf	_protectFlag
  2252  02C3  2AC5               	goto	l3049
  2253  02C4                     l3047:	
  2254                           
  2255                           ;main.c: 721: else
  2256                           ;main.c: 722: {
  2257                           ;main.c: 723: overChrgTime = 0;
  2258  02C4  01C3               	clrf	_overChrgTime
  2259  02C5                     l3049:	
  2260                           
  2261                           ;main.c: 724: }
  2262                           ;main.c: 725: outADValue = adresult;
  2263  02C5  0833               	movf	_adresult+1,w	;volatile
  2264  02C6  00AD               	movwf	_outADValue+1
  2265  02C7  0832               	movf	_adresult,w	;volatile
  2266  02C8  00AC               	movwf	_outADValue
  2267                           
  2268                           ;main.c: 727: if(workStep && (outADValue > 600))
  2269  02C9  087A               	movf	_workStep,w
  2270  02CA  1903               	btfsc	3,2
  2271  02CB  2ADB               	goto	l3059
  2272  02CC  3002               	movlw	2
  2273  02CD  022D               	subwf	_outADValue+1,w
  2274  02CE  3059               	movlw	89
  2275  02CF  1903               	skipnz
  2276  02D0  022C               	subwf	_outADValue,w
  2277  02D1  1C03               	skipc
  2278  02D2  2ADB               	goto	l3059
  2279                           
  2280                           ;main.c: 728: {
  2281                           ;main.c: 729: if(++workOverOutTime > 50)
  2282  02D3  3033               	movlw	51
  2283  02D4  0ACB               	incf	_workOverOutTime,f
  2284  02D5  024B               	subwf	_workOverOutTime,w
  2285  02D6  1C03               	skipc
  2286  02D7  2ADD               	goto	L14
  2287                           
  2288                           ;main.c: 730: {
  2289                           ;main.c: 731: workOverOutTime = 0;
  2290  02D8  01CB               	clrf	_workOverOutTime
  2291                           
  2292                           ;main.c: 732: workStep = 0;
  2293  02D9  01FA               	clrf	_workStep
  2294  02DA  2ADC               	goto	l3061
  2295  02DB                     l3059:	
  2296                           
  2297                           ;main.c: 735: else
  2298                           ;main.c: 736: {
  2299                           ;main.c: 737: workOverOutTime = 0;
  2300  02DB  01CB               	clrf	_workOverOutTime
  2301  02DC                     l3061:	
  2302                           
  2303                           ;main.c: 738: }
  2304                           ;main.c: 739: unsigned char maxtempV = 130 + (workStep * 2);
  2305  02DC  1003               	clrc
  2306  02DD                     L14:	
  2307  02DD  0D7A               	rlf	_workStep,w
  2308  02DE  3E82               	addlw	130
  2309  02DF  00E6               	movwf	checkOutA@maxtempV
  2310                           
  2311                           ;main.c: 740: if(outADValue > maxtempV)
  2312  02E0  00F4               	movwf	??_checkOutA
  2313  02E1  01F5               	clrf	??_checkOutA+1
  2314  02E2  082D               	movf	_outADValue+1,w
  2315  02E3  0275               	subwf	??_checkOutA+1,w
  2316  02E4  1D03               	skipz
  2317  02E5  2AE8               	goto	u3205
  2318  02E6  082C               	movf	_outADValue,w
  2319  02E7  0274               	subwf	??_checkOutA,w
  2320  02E8                     u3205:	
  2321  02E8  1803               	skipnc
  2322  02E9  2AF2               	goto	l3069
  2323                           
  2324                           ;main.c: 741: {
  2325                           ;main.c: 742: if(++overCount > 5)
  2326  02EA  3006               	movlw	6
  2327  02EB  0AC6               	incf	_overCount,f
  2328  02EC  0246               	subwf	_overCount,w
  2329  02ED  1C03               	skipc
  2330  02EE  2B41               	goto	l3119
  2331                           
  2332                           ;main.c: 743: {
  2333                           ;main.c: 744: overCount = 5;
  2334  02EF  3005               	movlw	5
  2335  02F0  00C6               	movwf	_overCount
  2336  02F1  2B41               	goto	l3119
  2337  02F2                     l3069:	
  2338                           
  2339                           ;main.c: 747: else
  2340                           ;main.c: 748: {
  2341                           ;main.c: 750: if(overCount > 0)
  2342  02F2  0846               	movf	_overCount,w
  2343  02F3  1903               	btfsc	3,2
  2344  02F4  2AF6               	goto	l3073
  2345                           
  2346                           ;main.c: 751: {
  2347                           ;main.c: 752: overCount--;
  2348  02F5  03C6               	decf	_overCount,f
  2349  02F6                     l3073:	
  2350                           
  2351                           ;main.c: 753: }
  2352                           ;main.c: 754: unsigned char maxAout = 25;
  2353  02F6  3019               	movlw	25
  2354  02F7  00E7               	movwf	checkOutA@maxAout
  2355                           
  2356                           ;main.c: 755: if(pwStep > 30)
  2357  02F8  301F               	movlw	31
  2358  02F9  0242               	subwf	_pwStep,w
  2359  02FA  1C03               	skipc
  2360  02FB  2AFE               	goto	l851
  2361                           
  2362                           ;main.c: 756: maxAout = 27;
  2363  02FC  301B               	movlw	27
  2364  02FD  00E7               	movwf	checkOutA@maxAout
  2365  02FE                     l851:	
  2366                           
  2367                           ;main.c: 757: if(workStep < 5)
  2368  02FE  3005               	movlw	5
  2369  02FF  027A               	subwf	_workStep,w
  2370  0300  1803               	skipnc
  2371  0301  2B04               	goto	l3081
  2372                           
  2373                           ;main.c: 758: {
  2374                           ;main.c: 759: maxAout = maxAout - 1;
  2375  0302  30FF               	movlw	255
  2376  0303  2B2D               	goto	L12
  2377  0304                     l3081:	
  2378                           ;main.c: 760: }
  2379                           
  2380                           
  2381                           ;main.c: 761: else if(workStep < 9)
  2382  0304  3009               	movlw	9
  2383  0305  027A               	subwf	_workStep,w
  2384  0306  1803               	skipnc
  2385  0307  2B0A               	goto	l3085
  2386                           
  2387                           ;main.c: 762: {
  2388                           ;main.c: 763: maxAout = maxAout + 3;
  2389  0308  3003               	movlw	3
  2390  0309  2B2D               	goto	L12
  2391  030A                     l3085:	
  2392                           ;main.c: 764: }
  2393                           
  2394                           
  2395                           ;main.c: 765: else if(workStep < 13)
  2396  030A  300D               	movlw	13
  2397  030B  027A               	subwf	_workStep,w
  2398  030C  1803               	skipnc
  2399  030D  2B10               	goto	l3089
  2400                           
  2401                           ;main.c: 766: {
  2402                           ;main.c: 767: maxAout = maxAout + 4;
  2403  030E  3004               	movlw	4
  2404  030F  2B2D               	goto	L12
  2405  0310                     l3089:	
  2406                           ;main.c: 768: }
  2407                           
  2408                           
  2409                           ;main.c: 769: else if(workStep < 17)
  2410  0310  3011               	movlw	17
  2411  0311  027A               	subwf	_workStep,w
  2412  0312  1803               	skipnc
  2413  0313  2B16               	goto	l3093
  2414                           
  2415                           ;main.c: 770: {
  2416                           ;main.c: 771: maxAout = maxAout + 5;
  2417  0314  3005               	movlw	5
  2418  0315  2B2D               	goto	L12
  2419  0316                     l3093:	
  2420                           ;main.c: 772: }
  2421                           
  2422                           
  2423                           ;main.c: 773: else if(workStep < 21)
  2424  0316  3015               	movlw	21
  2425  0317  027A               	subwf	_workStep,w
  2426  0318  1803               	skipnc
  2427  0319  2B1C               	goto	l3097
  2428                           
  2429                           ;main.c: 774: {
  2430                           ;main.c: 775: maxAout = maxAout + 7;
  2431  031A  3007               	movlw	7
  2432  031B  2B2D               	goto	L12
  2433  031C                     l3097:	
  2434                           ;main.c: 776: }
  2435                           
  2436                           
  2437                           ;main.c: 777: else if(workStep < 25)
  2438  031C  3019               	movlw	25
  2439  031D  027A               	subwf	_workStep,w
  2440  031E  1803               	skipnc
  2441  031F  2B22               	goto	l3101
  2442                           
  2443                           ;main.c: 778: {
  2444                           ;main.c: 779: maxAout = maxAout + 9;
  2445  0320  3009               	movlw	9
  2446  0321  2B2D               	goto	L12
  2447  0322                     l3101:	
  2448                           ;main.c: 780: }
  2449                           
  2450                           
  2451                           ;main.c: 781: else if(workStep < 29)
  2452  0322  301D               	movlw	29
  2453  0323  027A               	subwf	_workStep,w
  2454  0324  1803               	skipnc
  2455  0325  2B28               	goto	l3105
  2456                           
  2457                           ;main.c: 782: {
  2458                           ;main.c: 783: maxAout = maxAout + 10;
  2459  0326  300A               	movlw	10
  2460  0327  2B2D               	goto	L12
  2461  0328                     l3105:	
  2462                           ;main.c: 784: }
  2463                           
  2464                           
  2465                           ;main.c: 785: else if(workStep < 33)
  2466  0328  3021               	movlw	33
  2467  0329  027A               	subwf	_workStep,w
  2468  032A  1803               	skipnc
  2469  032B  2B2E               	goto	l3109
  2470                           
  2471                           ;main.c: 786: {
  2472                           ;main.c: 787: maxAout = maxAout + 11;
  2473  032C  300B               	movlw	11
  2474  032D                     L12:	
  2475  032D  07E7               	addwf	checkOutA@maxAout,f
  2476  032E                     l3109:	
  2477                           
  2478                           ;main.c: 788: }
  2479                           ;main.c: 789: if(outADValue > maxAout)
  2480  032E  0867               	movf	checkOutA@maxAout,w
  2481  032F  00F4               	movwf	??_checkOutA
  2482  0330  01F5               	clrf	??_checkOutA+1
  2483  0331  082D               	movf	_outADValue+1,w
  2484  0332  0275               	subwf	??_checkOutA+1,w
  2485  0333  1D03               	skipz
  2486  0334  2B37               	goto	u3325
  2487  0335  082C               	movf	_outADValue,w
  2488  0336  0274               	subwf	??_checkOutA,w
  2489  0337                     u3325:	
  2490  0337  1803               	skipnc
  2491  0338  2B3F               	goto	l3115
  2492                           
  2493                           ;main.c: 790: {
  2494                           ;main.c: 791: if(startTime == 0)
  2495  0339  0844               	movf	_startTime,w
  2496  033A  1D03               	btfss	3,2
  2497  033B  2B3F               	goto	l3115
  2498                           
  2499                           ;main.c: 792: {
  2500                           ;main.c: 793: tempDuty = 167 + workStep;
  2501  033C  087A               	movf	_workStep,w
  2502  033D  3EA7               	addlw	167
  2503  033E  2B40               	goto	L13
  2504  033F                     l3115:	
  2505                           ;main.c: 794: }
  2506                           
  2507                           
  2508                           ;main.c: 795: else
  2509                           ;main.c: 796: {
  2510                           ;main.c: 797: tempDuty = maxDuty;
  2511  033F  0847               	movf	_maxDuty,w
  2512  0340                     L13:	
  2513  0340  00C5               	movwf	_tempDuty
  2514  0341                     l3119:	
  2515                           
  2516                           ;main.c: 803: }
  2517                           ;main.c: 805: }
  2518                           ;main.c: 806: PWMD23H = 0X00;
  2519  0341  1683               	bsf	3,5	;RP0=1, select bank1
  2520  0342  019E               	clrf	30	;volatile
  2521                           
  2522                           ;main.c: 807: PWMD3L = tempDuty;
  2523  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2524  0344  0845               	movf	_tempDuty,w
  2525  0345  1683               	bsf	3,5	;RP0=1, select bank1
  2526  0346  009C               	movwf	28	;volatile
  2527                           
  2528                           ;main.c: 808: }
  2529  0347  0008               	return
  2530  0348                     l3123:	
  2531                           
  2532                           ;main.c: 809: else
  2533                           ;main.c: 810: {
  2534                           ;main.c: 811: ADCON0 = 0;
  2535  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2536  0349  0195               	clrf	21	;volatile
  2537                           
  2538                           ;main.c: 812: ADCON1 = 0;
  2539  034A  0196               	clrf	22	;volatile
  2540                           
  2541                           ;main.c: 813: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2542  034B  3085               	movlw	133
  2543  034C  00F4               	movwf	??_checkOutA
  2544  034D                     u3667:	
  2545  034D  0BF4               	decfsz	??_checkOutA,f
  2546  034E  2B4D               	goto	u3667
  2547  034F  0008               	return
  2548  0350                     __end_of_checkOutA:	
  2549                           
  2550                           	psect	text13
  2551  0350                     __ptext13:	
  2552 ;; *************** function _checkBatAD *****************
  2553 ;; Defined at:
  2554 ;;		line 817 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;		None
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;		None
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, pclath, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1
  2568 ;;      Params:         0       0       0
  2569 ;;      Locals:         0       0       0
  2570 ;;      Temps:          2       0       0
  2571 ;;      Totals:         2       0       0
  2572 ;;Total ram usage:        2 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    3
  2575 ;; This function calls:
  2576 ;;		_ADC_Sample
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _checkBatAD
  2584  0350                     _checkBatAD:	
  2585                           
  2586                           ;main.c: 819: test_adc = ADC_Sample(2, 5);
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2590  0350  3005               	movlw	5
  2591  0351  00F3               	movwf	ADC_Sample@adldo
  2592  0352  3002               	movlw	2
  2593  0353  2102               	fcall	_ADC_Sample
  2594  0354  00D4               	movwf	_test_adc	;volatile
  2595                           
  2596                           ;main.c: 820: if (0xA5 == test_adc)
  2597  0355  30A5               	movlw	165
  2598  0356  0654               	xorwf	_test_adc,w	;volatile
  2599  0357  1D03               	btfss	3,2
  2600  0358  2BB0               	goto	l3159
  2601                           
  2602                           ;main.c: 821: {
  2603                           ;main.c: 822: batADValue = adresult;
  2604  0359  0833               	movf	_adresult+1,w	;volatile
  2605  035A  00F8               	movwf	_batADValue+1
  2606  035B  0832               	movf	_adresult,w	;volatile
  2607  035C  00F7               	movwf	_batADValue
  2608                           
  2609                           ;main.c: 823: if(batADValue < 1117)
  2610  035D  3004               	movlw	4
  2611  035E  0278               	subwf	_batADValue+1,w
  2612  035F  305D               	movlw	93
  2613  0360  1903               	skipnz
  2614  0361  0277               	subwf	_batADValue,w
  2615  0362  1803               	skipnc
  2616  0363  2B76               	goto	l3141
  2617                           
  2618                           ;main.c: 824: {
  2619                           ;main.c: 825: pwStep = 0;
  2620  0364  01C2               	clrf	_pwStep
  2621                           
  2622                           ;main.c: 826: if(++count8s > 800)
  2623  0365  0AA2               	incf	_count8s,f
  2624  0366  1903               	skipnz
  2625  0367  0AA3               	incf	_count8s+1,f
  2626  0368  3003               	movlw	3
  2627  0369  0223               	subwf	_count8s+1,w
  2628  036A  3021               	movlw	33
  2629  036B  1903               	skipnz
  2630  036C  0222               	subwf	_count8s,w
  2631  036D  1C03               	skipc
  2632  036E  2BA3               	goto	l3153
  2633                           
  2634                           ;main.c: 827: {
  2635                           ;main.c: 828: count8s = 0;
  2636  036F  01A2               	clrf	_count8s
  2637  0370  01A3               	clrf	_count8s+1
  2638                           
  2639                           ;main.c: 829: lowBatFlag = 1;
  2640  0371  01B7               	clrf	_lowBatFlag
  2641  0372  0AB7               	incf	_lowBatFlag,f
  2642                           
  2643                           ;main.c: 830: prePwStep = 0;
  2644  0373  01F9               	clrf	_prePwStep
  2645                           
  2646                           ;main.c: 832: jrStep = 0;
  2647  0374  01FA               	clrf	_workStep
  2648  0375  2BA3               	goto	l3153
  2649  0376                     l3141:	
  2650  0376  3005               	movlw	5
  2651                           
  2652                           ;main.c: 835: else
  2653                           ;main.c: 836: {
  2654                           ;main.c: 837: count8s = 0;
  2655  0377  01A2               	clrf	_count8s
  2656  0378  01A3               	clrf	_count8s+1
  2657                           
  2658                           ;main.c: 838: if(batADValue >= 1340)
  2659  0379  0278               	subwf	_batADValue+1,w
  2660  037A  303C               	movlw	60
  2661  037B  1903               	skipnz
  2662  037C  0277               	subwf	_batADValue,w
  2663                           
  2664                           ;main.c: 839: {
  2665                           ;main.c: 840: pwStep = ((batADValue - 1340) /2) + 13;
  2666  037D  0877               	movf	_batADValue,w
  2667  037E  1C03               	skipc
  2668  037F  2B8D               	goto	L16
  2669  0380  3EC4               	addlw	196
  2670  0381  00F4               	movwf	??_checkBatAD
  2671  0382  0878               	movf	_batADValue+1,w
  2672  0383  1803               	skipnc
  2673  0384  3E01               	addlw	1
  2674  0385  3EFA               	addlw	250
  2675  0386  00F5               	movwf	??_checkBatAD+1
  2676  0387  1003               	clrc
  2677  0388  0CF5               	rrf	??_checkBatAD+1,f
  2678  0389  0CF4               	rrf	??_checkBatAD,f
  2679  038A  0874               	movf	??_checkBatAD,w
  2680  038B  3E0D               	addlw	13
  2681  038C  2B9C               	goto	L15
  2682  038D                     L16:	
  2683                           ;main.c: 842: else
  2684                           ;main.c: 843: {
  2685                           ;main.c: 844: pwStep = (batADValue - 1117) / 16;
  2686                           
  2687                           ;main.c: 841: }
  2688                           
  2689  038D  3EA3               	addlw	163
  2690  038E  00F4               	movwf	??_checkBatAD
  2691  038F  0878               	movf	_batADValue+1,w
  2692  0390  1803               	skipnc
  2693  0391  3E01               	addlw	1
  2694  0392  3EFB               	addlw	251
  2695  0393  00F5               	movwf	??_checkBatAD+1
  2696  0394  3004               	movlw	4
  2697  0395                     u3385:	
  2698  0395  1003               	clrc
  2699  0396  0CF5               	rrf	??_checkBatAD+1,f
  2700  0397  0CF4               	rrf	??_checkBatAD,f
  2701  0398  3EFF               	addlw	-1
  2702  0399  1D03               	skipz
  2703  039A  2B95               	goto	u3385
  2704  039B  0874               	movf	??_checkBatAD,w
  2705  039C                     L15:	
  2706  039C  00C2               	movwf	_pwStep
  2707                           
  2708                           ;main.c: 845: }
  2709                           ;main.c: 846: if(pwStep > 99)
  2710  039D  3064               	movlw	100
  2711  039E  0242               	subwf	_pwStep,w
  2712  039F  1C03               	skipc
  2713  03A0  2BA3               	goto	l3153
  2714                           
  2715                           ;main.c: 847: {
  2716                           ;main.c: 848: pwStep = 99;
  2717  03A1  3063               	movlw	99
  2718  03A2  00C2               	movwf	_pwStep
  2719  03A3                     l3153:	
  2720                           
  2721                           ;main.c: 849: }
  2722                           ;main.c: 850: }
  2723                           ;main.c: 851: if(chrgFlag && batADValue > 1861)
  2724  03A3  0850               	movf	_chrgFlag,w
  2725  03A4  1903               	btfsc	3,2
  2726  03A5  2BB7               	goto	l3163
  2727  03A6  3007               	movlw	7
  2728  03A7  0278               	subwf	_batADValue+1,w
  2729  03A8  3046               	movlw	70
  2730  03A9  1903               	skipnz
  2731  03AA  0277               	subwf	_batADValue,w
  2732  03AB  1C03               	skipc
  2733  03AC  2BB7               	goto	l3163
  2734                           
  2735                           ;main.c: 852: {
  2736                           ;main.c: 853: protectFlag = 1;
  2737  03AD  01CC               	clrf	_protectFlag
  2738  03AE  0ACC               	incf	_protectFlag,f
  2739  03AF  2BB7               	goto	l3163
  2740  03B0                     l3159:	
  2741                           
  2742                           ;main.c: 856: else
  2743                           ;main.c: 857: {
  2744                           ;main.c: 858: ADCON0 = 0;
  2745  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2746  03B1  0195               	clrf	21	;volatile
  2747                           
  2748                           ;main.c: 859: ADCON1 = 0;
  2749  03B2  0196               	clrf	22	;volatile
  2750                           
  2751                           ;main.c: 860: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2752  03B3  3085               	movlw	133
  2753  03B4  00F4               	movwf	??_checkBatAD
  2754  03B5                     u3677:	
  2755  03B5  0BF4               	decfsz	??_checkBatAD,f
  2756  03B6  2BB5               	goto	u3677
  2757  03B7                     l3163:	
  2758                           
  2759                           ;main.c: 861: }
  2760                           ;main.c: 863: test_adc = ADC_Sample(3, 5);
  2761  03B7  3005               	movlw	5
  2762  03B8  00F3               	movwf	ADC_Sample@adldo
  2763  03B9  3003               	movlw	3
  2764  03BA  2102               	fcall	_ADC_Sample
  2765  03BB  00D4               	movwf	_test_adc	;volatile
  2766                           
  2767                           ;main.c: 864: if (0xA5 == test_adc)
  2768  03BC  30A5               	movlw	165
  2769  03BD  0654               	xorwf	_test_adc,w	;volatile
  2770  03BE  1D03               	btfss	3,2
  2771  03BF  2BEB               	goto	l3183
  2772                           
  2773                           ;main.c: 865: {
  2774                           ;main.c: 866: if(chrgFlag && adresult > 100)
  2775  03C0  0850               	movf	_chrgFlag,w
  2776  03C1  1903               	btfsc	3,2
  2777  03C2  0008               	return
  2778  03C3  3000               	movlw	0
  2779  03C4  0233               	subwf	_adresult+1,w	;volatile
  2780  03C5  3065               	movlw	101
  2781  03C6  1903               	skipnz
  2782  03C7  0232               	subwf	_adresult,w	;volatile
  2783  03C8  1C03               	skipc
  2784  03C9  0008               	return
  2785                           
  2786                           ;main.c: 867: {
  2787                           ;main.c: 869: if(adresult > 810 || (batADValue - adresult) > 810)
  2788  03CA  3003               	movlw	3
  2789  03CB  0233               	subwf	_adresult+1,w	;volatile
  2790  03CC  302B               	movlw	43
  2791  03CD  1903               	skipnz
  2792  03CE  0232               	subwf	_adresult,w	;volatile
  2793  03CF  1803               	skipnc
  2794  03D0  2BE0               	goto	l3175
  2795  03D1  0832               	movf	_adresult,w	;volatile
  2796  03D2  0277               	subwf	_batADValue,w
  2797  03D3  00F4               	movwf	??_checkBatAD
  2798  03D4  0833               	movf	_adresult+1,w	;volatile
  2799  03D5  1C03               	skipc
  2800  03D6  0A33               	incf	_adresult+1,w	;volatile
  2801  03D7  0278               	subwf	_batADValue+1,w
  2802  03D8  00F5               	movwf	??_checkBatAD+1
  2803  03D9  3003               	movlw	3
  2804  03DA  0275               	subwf	??_checkBatAD+1,w
  2805  03DB  302B               	movlw	43
  2806  03DC  1903               	skipnz
  2807  03DD  0274               	subwf	??_checkBatAD,w
  2808  03DE  1C03               	skipc
  2809  03DF  2BE9               	goto	l3181
  2810  03E0                     l3175:	
  2811                           
  2812                           ;main.c: 870: {
  2813                           ;main.c: 872: if(++countHalfFull > 250)
  2814  03E0  30FB               	movlw	251
  2815  03E1  0ACD               	incf	_countHalfFull,f
  2816  03E2  024D               	subwf	_countHalfFull,w
  2817  03E3  1C03               	skipc
  2818  03E4  0008               	return
  2819  03E5  3002               	movlw	2
  2820                           
  2821                           ;main.c: 873: {
  2822                           ;main.c: 874: countHalfFull = 0;
  2823  03E6  01CD               	clrf	_countHalfFull
  2824                           
  2825                           ;main.c: 875: protectFlag = 2;
  2826  03E7  00CC               	movwf	_protectFlag
  2827  03E8  0008               	return
  2828  03E9                     l3181:	
  2829                           
  2830                           ;main.c: 878: else
  2831                           ;main.c: 879: {
  2832                           ;main.c: 880: countHalfFull = 0;
  2833  03E9  01CD               	clrf	_countHalfFull
  2834                           
  2835                           ;main.c: 881: }
  2836                           ;main.c: 882: }
  2837                           ;main.c: 883: }
  2838  03EA  0008               	return
  2839  03EB                     l3183:	
  2840                           
  2841                           ;main.c: 884: else
  2842                           ;main.c: 885: {
  2843                           ;main.c: 886: ADCON0 = 0;
  2844  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2845  03EC  0195               	clrf	21	;volatile
  2846                           
  2847                           ;main.c: 887: ADCON1 = 0;
  2848  03ED  0196               	clrf	22	;volatile
  2849                           
  2850                           ;main.c: 888: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2851  03EE  3085               	movlw	133
  2852  03EF  00F4               	movwf	??_checkBatAD
  2853  03F0                     u3687:	
  2854  03F0  0BF4               	decfsz	??_checkBatAD,f
  2855  03F1  2BF0               	goto	u3687
  2856  03F2  0008               	return
  2857  03F3                     __end_of_checkBatAD:	
  2858                           
  2859                           	psect	text14
  2860  0102                     __ptext14:	
  2861 ;; *************** function _ADC_Sample *****************
  2862 ;; Defined at:
  2863 ;;		line 1134 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  adch            1    wreg     unsigned char 
  2866 ;;  adldo           1    3[COMMON] unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  adch            1    5[BANK0 ] unsigned char 
  2869 ;;  j               1    4[BANK0 ] unsigned char 
  2870 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2871 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2872 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2873 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2874 ;;  i               1    6[BANK0 ] unsigned char 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      unsigned char 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2, status,0
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 100/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMMON   BANK0   BANK1
  2884 ;;      Params:         1       0       0
  2885 ;;      Locals:         0      13       0
  2886 ;;      Temps:          0       4       0
  2887 ;;      Totals:         1      17       0
  2888 ;;Total ram usage:       18 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    2
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_checkOutA
  2895 ;;		_checkBatAD
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           
  2900                           ;psect for function _ADC_Sample
  2901  0102                     _ADC_Sample:	
  2902                           
  2903                           ;incstack = 0
  2904                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  2905                           ;ADC_Sample@adch stored from wreg
  2906  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2907  0103  00DA               	movwf	ADC_Sample@adch
  2908                           
  2909                           ;main.c: 1136: volatile unsigned long adsum = 0;
  2910                           
  2911                           ;main.c: 1137: volatile unsigned int admin = 0, admax = 0;
  2912  0104  21DD               	fcall	PL4	;call to abstracted procedure
  2913                           
  2914                           ;main.c: 1138: volatile unsigned int ad_temp = 0;
  2915  0105  01E4               	clrf	ADC_Sample@ad_temp	;volatile
  2916  0106  01E5               	clrf	ADC_Sample@ad_temp+1	;volatile
  2917                           
  2918                           ;main.c: 1140: if ((!LDO_EN) && (adldo & 0x04) )
  2919  0107  1683               	bsf	3,5	;RP0=1, select bank1
  2920  0108  1D16               	btfss	22,2	;volatile
  2921  0109  1D73               	btfss	ADC_Sample@adldo,2
  2922  010A  2914               	goto	l2953
  2923                           
  2924                           ;main.c: 1141: {
  2925                           ;main.c: 1143: ADCON1 = adldo;
  2926  010B  0873               	movf	ADC_Sample@adldo,w
  2927  010C  0096               	movwf	22	;volatile
  2928                           
  2929                           ;main.c: 1144: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2930  010D  3084               	movlw	132
  2931  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2932  010F  00D5               	movwf	??_ADC_Sample
  2933  0110                     u3697:	
  2934  0110  0BD5               	decfsz	??_ADC_Sample,f
  2935  0111  2910               	goto	u3697
  2936  0112  2913               	nop2
  2937                           
  2938                           ;main.c: 1145: }
  2939  0113  2916               	goto	l2955
  2940  0114                     l2953:	
  2941                           
  2942                           ;main.c: 1146: else
  2943                           ;main.c: 1147: ADCON1 = adldo;
  2944  0114  0873               	movf	ADC_Sample@adldo,w
  2945  0115  0096               	movwf	22	;volatile
  2946  0116                     l2955:	
  2947                           
  2948                           ;main.c: 1149: if(adch & 0x10)
  2949  0116  1283               	bcf	3,5	;RP0=0, select bank0
  2950  0117  1E5A               	btfss	ADC_Sample@adch,4
  2951  0118  291E               	goto	l2963
  2952                           
  2953                           ;main.c: 1150: {
  2954                           ;main.c: 1151: CHS4 = 1;
  2955  0119  1683               	bsf	3,5	;RP0=1, select bank1
  2956  011A  1716               	bsf	22,6	;volatile
  2957                           
  2958                           ;main.c: 1152: adch &= 0x0f;
  2959  011B  300F               	movlw	15
  2960  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2961  011D  05DA               	andwf	ADC_Sample@adch,f
  2962  011E                     l2963:	
  2963                           
  2964                           ;main.c: 1155: for (i = 0; i < 10; i++)
  2965  011E  01DB               	clrf	ADC_Sample@i
  2966  011F                     l2969:	
  2967                           
  2968                           ;main.c: 1156: {
  2969                           ;main.c: 1157: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  2970  011F  085A               	movf	ADC_Sample@adch,w
  2971  0120  00D5               	movwf	??_ADC_Sample
  2972  0121  3001               	movlw	1
  2973  0122  1003               	clrc
  2974  0123                     L17:	
  2975  0123  0DD5               	rlf	??_ADC_Sample,f
  2976  0124  3EFF               	addlw	-1
  2977  0125  1003               	clrc
  2978  0126  1D03               	skipz
  2979  0127  2923               	goto	L17
  2980  0128  0D55               	rlf	??_ADC_Sample,w
  2981  0129  3841               	iorlw	65
  2982  012A  1683               	bsf	3,5	;RP0=1, select bank1
  2983  012B  0095               	movwf	21	;volatile
  2984  012C  0000               	nop	;# 
  2985  012D  0000               	nop	;# 
  2986  012E  0000               	nop	;# 
  2987  012F  0000               	nop	;# 
  2988                           
  2989                           ;main.c: 1162: GODONE = 1;
  2990  0130  1683               	bsf	3,5	;RP0=1, select bank1
  2991  0131  1495               	bsf	21,1	;volatile
  2992                           
  2993                           ;main.c: 1164: unsigned char j = 0;
  2994  0132  1283               	bcf	3,5	;RP0=0, select bank0
  2995  0133  01D9               	clrf	ADC_Sample@j
  2996  0134                     l926:	
  2997                           ;main.c: 1165: while (GODONE)
  2998                           
  2999  0134  1683               	bsf	3,5	;RP0=1, select bank1
  3000  0135  1C95               	btfss	21,1	;volatile
  3001  0136  293F               	goto	l2979
  3002                           
  3003                           ;main.c: 1166: {
  3004                           ;main.c: 1167: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3005  0137  2938               	nop2	;2 cycle nop
  3006  0138  2939               	nop2	;2 cycle nop
  3007  0139  293A               	nop2	;2 cycle nop
  3008  013A  293B               	nop2	;2 cycle nop
  3009                           
  3010                           ;main.c: 1169: if (0 == (--j))
  3011  013B  1283               	bcf	3,5	;RP0=0, select bank0
  3012  013C  0BD9               	decfsz	ADC_Sample@j,f
  3013  013D  2934               	goto	l926
  3014                           
  3015                           ;main.c: 1170: return 0;
  3016  013E  3400               	retlw	0
  3017  013F                     l2979:	
  3018                           
  3019                           ;main.c: 1171: }
  3020                           ;main.c: 1173: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3021  013F  0819               	movf	25,w	;volatile
  3022  0140  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0141  00E4               	movwf	ADC_Sample@ad_temp	;volatile
  3024  0142  01E5               	clrf	ADC_Sample@ad_temp+1	;volatile
  3025  0143  0EE4               	swapf	ADC_Sample@ad_temp,f	;volatile
  3026  0144  0EE5               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3027  0145  30F0               	movlw	240
  3028  0146  05E5               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3029  0147  0864               	movf	ADC_Sample@ad_temp,w	;volatile
  3030  0148  390F               	andlw	15
  3031  0149  04E5               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3032  014A  30F0               	movlw	240
  3033  014B  05E4               	andwf	ADC_Sample@ad_temp,f	;volatile
  3034  014C  1683               	bsf	3,5	;RP0=1, select bank1
  3035  014D  0E18               	swapf	24,w	;volatile
  3036  014E  390F               	andlw	15
  3037  014F  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0150  07E4               	addwf	ADC_Sample@ad_temp,f	;volatile
  3039  0151  1803               	skipnc
  3040  0152  0AE5               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3041                           
  3042                           ;main.c: 1175: if (0 == admax)
  3043  0153  0862               	movf	ADC_Sample@admax,w	;volatile
  3044  0154  0463               	iorwf	ADC_Sample@admax+1,w	;volatile
  3045  0155  1D03               	btfss	3,2
  3046  0156  2959               	goto	l2987
  3047                           
  3048                           ;main.c: 1176: {
  3049                           ;main.c: 1177: admax = ad_temp;
  3050  0157  21E6               	fcall	PL12	;call to abstracted procedure
  3051  0158  296B               	goto	l2993
  3052  0159                     l2987:	
  3053                           ;main.c: 1179: }
  3054                           
  3055                           ;main.c: 1178: admin = ad_temp;
  3056                           
  3057                           
  3058                           ;main.c: 1180: else if (ad_temp > admax)
  3059  0159  0865               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3060  015A  0263               	subwf	ADC_Sample@admax+1,w	;volatile
  3061  015B  1D03               	skipz
  3062  015C  295F               	goto	u3025
  3063  015D  0864               	movf	ADC_Sample@ad_temp,w	;volatile
  3064  015E  0262               	subwf	ADC_Sample@admax,w	;volatile
  3065  015F                     u3025:	
  3066  015F  1803               	skipnc
  3067  0160  2963               	goto	l2991
  3068                           
  3069                           ;main.c: 1181: admax = ad_temp;
  3070  0161  21E6               	fcall	PL12	;call to abstracted procedure
  3071  0162  296F               	goto	l932
  3072  0163                     l2991:	
  3073                           
  3074                           ;main.c: 1182: else if (ad_temp < admin)
  3075  0163  0861               	movf	ADC_Sample@admin+1,w	;volatile
  3076  0164  0265               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3077  0165  1D03               	skipz
  3078  0166  2969               	goto	u3035
  3079  0167  0860               	movf	ADC_Sample@admin,w	;volatile
  3080  0168  0264               	subwf	ADC_Sample@ad_temp,w	;volatile
  3081  0169                     u3035:	
  3082  0169  1803               	skipnc
  3083  016A  296F               	goto	l932
  3084  016B                     l2993:	
  3085                           
  3086                           ;main.c: 1183: admin = ad_temp;
  3087  016B  0865               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3088  016C  00E1               	movwf	ADC_Sample@admin+1	;volatile
  3089  016D  0864               	movf	ADC_Sample@ad_temp,w	;volatile
  3090  016E  00E0               	movwf	ADC_Sample@admin	;volatile
  3091  016F                     l932:	
  3092                           
  3093                           ;main.c: 1185: adsum += ad_temp;
  3094  016F  0864               	movf	ADC_Sample@ad_temp,w	;volatile
  3095  0170  00D5               	movwf	??_ADC_Sample
  3096  0171  0865               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3097  0172  00D6               	movwf	??_ADC_Sample+1
  3098  0173  01D7               	clrf	??_ADC_Sample+2
  3099  0174  01D8               	clrf	??_ADC_Sample+3
  3100  0175  0855               	movf	??_ADC_Sample,w
  3101  0176  07DC               	addwf	ADC_Sample@adsum,f	;volatile
  3102  0177  0856               	movf	??_ADC_Sample+1,w
  3103  0178  1103               	clrz
  3104  0179  1803               	skipnc
  3105  017A  3E01               	addlw	1
  3106  017B  1D03               	btfss	3,2
  3107  017C  07DD               	addwf	ADC_Sample@adsum+1,f	;volatile
  3108  017D  0857               	movf	??_ADC_Sample+2,w
  3109  017E  1103               	clrz
  3110  017F  1803               	skipnc
  3111  0180  3E01               	addlw	1
  3112  0181  1D03               	btfss	3,2
  3113  0182  07DE               	addwf	ADC_Sample@adsum+2,f	;volatile
  3114  0183  0858               	movf	??_ADC_Sample+3,w
  3115  0184  1103               	clrz
  3116  0185  1803               	skipnc
  3117  0186  3E01               	addlw	1
  3118  0187  1D03               	btfss	3,2
  3119  0188  07DF               	addwf	ADC_Sample@adsum+3,f	;volatile
  3120  0189  300A               	movlw	10
  3121  018A  0ADB               	incf	ADC_Sample@i,f
  3122  018B  025B               	subwf	ADC_Sample@i,w
  3123  018C  1C03               	skipc
  3124  018D  291F               	goto	l2969
  3125                           
  3126                           ;main.c: 1186: }
  3127                           ;main.c: 1187: adsum -= admax;
  3128  018E  0862               	movf	ADC_Sample@admax,w	;volatile
  3129  018F  00D5               	movwf	??_ADC_Sample
  3130  0190  0863               	movf	ADC_Sample@admax+1,w	;volatile
  3131  0191  21CE               	fcall	PL2	;call to abstracted procedure
  3132  0192  1C03               	skipc
  3133  0193  0F58               	incfsz	??_ADC_Sample+3,w
  3134  0194  02DF               	subwf	ADC_Sample@adsum+3,f	;volatile
  3135                           
  3136                           ;main.c: 1188: if (adsum >= admin)
  3137  0195  0860               	movf	ADC_Sample@admin,w	;volatile
  3138  0196  00D5               	movwf	??_ADC_Sample
  3139  0197  0861               	movf	ADC_Sample@admin+1,w	;volatile
  3140  0198  00D6               	movwf	??_ADC_Sample+1
  3141  0199  01D7               	clrf	??_ADC_Sample+2
  3142  019A  01D8               	clrf	??_ADC_Sample+3
  3143  019B  0858               	movf	??_ADC_Sample+3,w
  3144  019C  025F               	subwf	ADC_Sample@adsum+3,w	;volatile
  3145  019D  1D03               	skipz
  3146  019E  29A9               	goto	u3075
  3147  019F  0857               	movf	??_ADC_Sample+2,w
  3148  01A0  025E               	subwf	ADC_Sample@adsum+2,w	;volatile
  3149  01A1  1D03               	skipz
  3150  01A2  29A9               	goto	u3075
  3151  01A3  0856               	movf	??_ADC_Sample+1,w
  3152  01A4  025D               	subwf	ADC_Sample@adsum+1,w	;volatile
  3153  01A5  1D03               	skipz
  3154  01A6  29A9               	goto	u3075
  3155  01A7  0855               	movf	??_ADC_Sample,w
  3156  01A8  025C               	subwf	ADC_Sample@adsum,w	;volatile
  3157  01A9                     u3075:	
  3158  01A9  1C03               	skipc
  3159  01AA  29B3               	goto	l936
  3160                           
  3161                           ;main.c: 1189: adsum -= admin;
  3162  01AB  0860               	movf	ADC_Sample@admin,w	;volatile
  3163  01AC  00D5               	movwf	??_ADC_Sample
  3164  01AD  0861               	movf	ADC_Sample@admin+1,w	;volatile
  3165  01AE  21CE               	fcall	PL2	;call to abstracted procedure
  3166  01AF  1C03               	skipc
  3167  01B0  0F58               	incfsz	??_ADC_Sample+3,w
  3168  01B1  02DF               	subwf	ADC_Sample@adsum+3,f	;volatile
  3169  01B2  29B7               	goto	l3003
  3170  01B3                     l936:	
  3171                           
  3172                           ;main.c: 1190: else
  3173                           ;main.c: 1191: adsum = 0;
  3174  01B3  01DC               	clrf	ADC_Sample@adsum	;volatile
  3175  01B4  01DD               	clrf	ADC_Sample@adsum+1	;volatile
  3176  01B5  01DE               	clrf	ADC_Sample@adsum+2	;volatile
  3177  01B6  01DF               	clrf	ADC_Sample@adsum+3	;volatile
  3178  01B7                     l3003:	
  3179                           
  3180                           ;main.c: 1193: adresult = adsum >> 3;
  3181  01B7  085C               	movf	ADC_Sample@adsum,w	;volatile
  3182  01B8  00D5               	movwf	??_ADC_Sample
  3183  01B9  085D               	movf	ADC_Sample@adsum+1,w	;volatile
  3184  01BA  00D6               	movwf	??_ADC_Sample+1
  3185  01BB  085E               	movf	ADC_Sample@adsum+2,w	;volatile
  3186  01BC  00D7               	movwf	??_ADC_Sample+2
  3187  01BD  085F               	movf	ADC_Sample@adsum+3,w	;volatile
  3188  01BE  00D8               	movwf	??_ADC_Sample+3
  3189  01BF  3003               	movlw	3
  3190  01C0                     u3095:	
  3191  01C0  1003               	clrc
  3192  01C1  0CD8               	rrf	??_ADC_Sample+3,f
  3193  01C2  0CD7               	rrf	??_ADC_Sample+2,f
  3194  01C3  0CD6               	rrf	??_ADC_Sample+1,f
  3195  01C4  0CD5               	rrf	??_ADC_Sample,f
  3196  01C5  3EFF               	addlw	-1
  3197  01C6  1D03               	skipz
  3198  01C7  29C0               	goto	u3095
  3199  01C8  0856               	movf	??_ADC_Sample+1,w
  3200  01C9  00B3               	movwf	_adresult+1	;volatile
  3201  01CA  0855               	movf	??_ADC_Sample,w
  3202  01CB  00B2               	movwf	_adresult	;volatile
  3203                           
  3204                           ;main.c: 1195: adsum = 0;
  3205                           
  3206                           ;main.c: 1196: admin = 0;
  3207                           
  3208                           ;main.c: 1197: admax = 0;
  3209  01CC  21DD               	fcall	PL4	;call to abstracted procedure
  3210                           
  3211                           ;main.c: 1198: return 0xA5;
  3212  01CD  34A5               	retlw	165
  3213  01CE                     __end_of_ADC_Sample:	
  3214  01CE                     PL2:	
  3215  01CE  00D6               	movwf	??_ADC_Sample+1
  3216  01CF  01D7               	clrf	??_ADC_Sample+2
  3217  01D0  01D8               	clrf	??_ADC_Sample+3
  3218  01D1  0855               	movf	??_ADC_Sample,w
  3219  01D2  02DC               	subwf	ADC_Sample@adsum,f	;volatile
  3220  01D3  0856               	movf	??_ADC_Sample+1,w
  3221  01D4  1C03               	skipc
  3222  01D5  0F56               	incfsz	??_ADC_Sample+1,w
  3223  01D6  02DD               	subwf	ADC_Sample@adsum+1,f	;volatile
  3224  01D7  0857               	movf	??_ADC_Sample+2,w
  3225  01D8  1C03               	skipc
  3226  01D9  0F57               	incfsz	??_ADC_Sample+2,w
  3227  01DA  02DE               	subwf	ADC_Sample@adsum+2,f	;volatile
  3228  01DB  0858               	movf	??_ADC_Sample+3,w
  3229  01DC  0008               	return
  3230  01DD                     __end_ofPL2:	
  3231  01DD                     PL4:	
  3232  01DD  01DC               	clrf	ADC_Sample@adsum	;volatile
  3233  01DE  01DD               	clrf	ADC_Sample@adsum+1	;volatile
  3234  01DF  01DE               	clrf	ADC_Sample@adsum+2	;volatile
  3235  01E0  01DF               	clrf	ADC_Sample@adsum+3	;volatile
  3236  01E1  01E0               	clrf	ADC_Sample@admin	;volatile
  3237  01E2  01E1               	clrf	ADC_Sample@admin+1	;volatile
  3238  01E3  01E2               	clrf	ADC_Sample@admax	;volatile
  3239  01E4  01E3               	clrf	ADC_Sample@admax+1	;volatile
  3240  01E5  0008               	return
  3241  01E6                     __end_ofPL4:	
  3242  01E6                     PL12:	
  3243  01E6  0865               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3244  01E7  00E3               	movwf	ADC_Sample@admax+1	;volatile
  3245  01E8  0864               	movf	ADC_Sample@ad_temp,w	;volatile
  3246  01E9  00E2               	movwf	ADC_Sample@admax	;volatile
  3247  01EA  0008               	return
  3248  01EB                     __end_ofPL12:	
  3249                           
  3250                           	psect	text15
  3251  0495                     __ptext15:	
  3252 ;; *************** function _Sleep_Mode *****************
  3253 ;; Defined at:
  3254 ;;		line 1057 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2, status,0, pclath, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 100/0
  3265 ;;		On exit  : 100/100
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMMON   BANK0   BANK1
  3268 ;;      Params:         0       0       0
  3269 ;;      Locals:         0       0       0
  3270 ;;      Temps:          0       0       0
  3271 ;;      Totals:         0       0       0
  3272 ;;Total ram usage:        0 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    3
  3275 ;; This function calls:
  3276 ;;		_AD_Init
  3277 ;;		_Init_System
  3278 ;; This function is called by:
  3279 ;;		_main
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           
  3284                           ;psect for function _Sleep_Mode
  3285  0495                     _Sleep_Mode:	
  3286                           
  3287                           ;main.c: 1059: INTCON = 0;
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3291  0495  018B               	clrf	11	;volatile
  3292                           
  3293                           ;main.c: 1061: OPTION_REG = 0;
  3294  0496  0181               	clrf	1	;volatile
  3295                           
  3296                           ;main.c: 1063: WPUA = 0B00000000;
  3297  0497  1683               	bsf	3,5	;RP0=1, select bank1
  3298  0498  0188               	clrf	8	;volatile
  3299                           
  3300                           ;main.c: 1064: TRISA = 0x0F;
  3301  0499  300F               	movlw	15
  3302                           
  3303                           ;main.c: 1065: TRISB = 0x04;
  3304                           
  3305                           ;main.c: 1067: PORTA = 0X00;
  3306                           
  3307                           ;main.c: 1068: PORTB = 0X00;
  3308  049A  24CE               	fcall	PL6	;call to abstracted procedure
  3309                           
  3310                           ;main.c: 1069: WPUB = 0x04;
  3311  049B  0088               	movwf	8	;volatile
  3312                           
  3313                           ;main.c: 1071: ADCON0 = 0;
  3314  049C  1683               	bsf	3,5	;RP0=1, select bank1
  3315  049D  0195               	clrf	21	;volatile
  3316                           
  3317                           ;main.c: 1072: ADCON1 = 0;
  3318  049E  0196               	clrf	22	;volatile
  3319                           
  3320                           ;main.c: 1074: PWMCON0 = 0;
  3321  049F  1283               	bcf	3,5	;RP0=0, select bank0
  3322  04A0  0195               	clrf	21	;volatile
  3323                           
  3324                           ;main.c: 1076: OSCCON = 0X70;
  3325  04A1  3070               	movlw	112
  3326  04A2  0094               	movwf	20	;volatile
  3327                           
  3328                           ;main.c: 1078: IOCA = 0x02;
  3329  04A3  3002               	movlw	2
  3330  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  3331  04A5  0089               	movwf	9	;volatile
  3332                           
  3333                           ;main.c: 1079: IOCB = 0x04;
  3334  04A6  3004               	movlw	4
  3335  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  3336  04A8  0089               	movwf	9	;volatile
  3337                           
  3338                           ;main.c: 1081: RAIE = 1;
  3339  04A9  158E               	bsf	14,3	;volatile
  3340                           
  3341                           ;main.c: 1082: PEIE = 1;
  3342  04AA  170B               	bsf	11,6	;volatile
  3343                           
  3344                           ;main.c: 1083: RBIE = 1;
  3345  04AB  158B               	bsf	11,3	;volatile
  3346                           
  3347                           ;main.c: 1084: GIE = 0;
  3348  04AC  138B               	bcf	11,7	;volatile
  3349                           
  3350                           ;main.c: 1086: PIE1 &= 0X08;
  3351  04AD  3008               	movlw	8
  3352  04AE  058E               	andwf	14,f	;volatile
  3353                           
  3354                           ;main.c: 1087: PIR1 = 0;
  3355  04AF  018D               	clrf	13	;volatile
  3356                           
  3357                           ;main.c: 1088: INTCON &= 0XC8;
  3358  04B0  30C8               	movlw	200
  3359  04B1  058B               	andwf	11,f	;volatile
  3360                           
  3361                           ;main.c: 1090: PORTA;
  3362  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  3363  04B3  0806               	movf	6,w	;volatile
  3364                           
  3365                           ;main.c: 1091: RAIF = 0;
  3366  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  3367  04B5  118D               	bcf	13,3	;volatile
  3368                           
  3369                           ;main.c: 1092: PORTB;
  3370  04B6  0806               	movf	6,w	;volatile
  3371                           
  3372                           ;main.c: 1093: RBIF = 0;
  3373  04B7  100B               	bcf	11,0	;volatile
  3374  04B8  0064               	clrwdt	;# 
  3375  04B9  0063               	sleep	;# 
  3376  04BA  0000               	nop	;# 
  3377  04BB  0064               	clrwdt	;# 
  3378  04BC  0000               	nop	;# 
  3379  04BD  0000               	nop	;# 
  3380  04BE  0000               	nop	;# 
  3381  04BF  0000               	nop	;# 
  3382  04C0  0000               	nop	;# 
  3383                           
  3384                           ;main.c: 1105: if(RAIF) RAIF = 0;
  3385  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3386  04C2  198D               	btfsc	13,3	;volatile
  3387  04C3  118D               	bcf	13,3	;volatile
  3388                           
  3389                           ;main.c: 1106: if(RBIF) RBIF = 0;
  3390  04C4  180B               	btfsc	11,0	;volatile
  3391  04C5  100B               	bcf	11,0	;volatile
  3392                           
  3393                           ;main.c: 1107: if(TMR2IF) TMR2IF = 0;
  3394  04C6  188D               	btfsc	13,1	;volatile
  3395  04C7  108D               	bcf	13,1	;volatile
  3396                           
  3397                           ;main.c: 1108: IOCA = 0B00000000;
  3398  04C8  1683               	bsf	3,5	;RP0=1, select bank1
  3399  04C9  0189               	clrf	9	;volatile
  3400                           
  3401                           ;main.c: 1109: IOCB = 0B00000000;
  3402  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3403  04CB  0189               	clrf	9	;volatile
  3404                           
  3405                           ;main.c: 1110: Init_System();
  3406  04CC  25AA               	fcall	_Init_System
  3407                           
  3408                           ;main.c: 1111: AD_Init();
  3409  04CD  2E0E               	ljmp	l2157
  3410  04CE                     __end_of_Sleep_Mode:	
  3411  04CE                     PL6:	
  3412  04CE  0085               	movwf	5	;volatile
  3413  04CF  3004               	movlw	4
  3414  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  3415  04D1  0085               	movwf	5	;volatile
  3416  04D2  1683               	bsf	3,5	;RP0=1, select bank1
  3417  04D3  0186               	clrf	6	;volatile
  3418  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3419  04D5  0186               	clrf	6	;volatile
  3420  04D6  0008               	return
  3421  04D7                     __end_ofPL6:	
  3422                           
  3423                           	psect	text16
  3424  05AA                     __ptext16:	
  3425 ;; *************** function _Init_System *****************
  3426 ;; Defined at:
  3427 ;;		line 902 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2
  3436 ;; Tracked objects:
  3437 ;;		On entry : 100/0
  3438 ;;		On exit  : 100/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1
  3441 ;;      Params:         0       0       0
  3442 ;;      Locals:         0       0       0
  3443 ;;      Temps:          0       0       0
  3444 ;;      Totals:         0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    2
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;;		_Sleep_Mode
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           
  3457                           ;psect for function _Init_System
  3458  05AA                     _Init_System:	
  3459                           
  3460                           ;incstack = 0
  3461                           ; Regs used in _Init_System: [wreg+status,2]
  3462  05AA  0000               	nop	;# 
  3463  05AB  0064               	clrwdt	;# 
  3464                           
  3465                           ;main.c: 906: OPTION_REG = 0;
  3466  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  3467  05AD  0181               	clrf	1	;volatile
  3468  05AE  0064               	clrwdt	;# 
  3469                           
  3470                           ;main.c: 908: OSCCON = 0X72;
  3471  05AF  3072               	movlw	114
  3472  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3473  05B1  0094               	movwf	20	;volatile
  3474                           
  3475                           ;main.c: 910: WPUA = 0B00000000;
  3476  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  3477  05B3  0188               	clrf	8	;volatile
  3478                           
  3479                           ;main.c: 911: WPDA = 0x00;
  3480  05B4  0187               	clrf	7	;volatile
  3481                           
  3482                           ;main.c: 912: WPUB = 0x04;
  3483  05B5  3004               	movlw	4
  3484  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  3485  05B7  0088               	movwf	8	;volatile
  3486                           
  3487                           ;main.c: 914: TRISA = 0x0F;
  3488  05B8  300F               	movlw	15
  3489  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  3490                           
  3491                           ;main.c: 915: TRISB = 0x04;
  3492                           
  3493                           ;main.c: 917: PORTA = 0X00;
  3494                           
  3495                           ;main.c: 918: PORTB = 0X00;
  3496  05BA  24CE               	fcall	PL6	;call to abstracted procedure
  3497                           
  3498                           ;main.c: 922: PR2 = 249;
  3499  05BB  30F9               	movlw	249
  3500  05BC  0091               	movwf	17	;volatile
  3501                           
  3502                           ;main.c: 923: TMR2IF = 0;
  3503  05BD  108D               	bcf	13,1	;volatile
  3504                           
  3505                           ;main.c: 924: TMR2IE = 1;
  3506  05BE  148E               	bsf	14,1	;volatile
  3507                           
  3508                           ;main.c: 926: T2CON = 0B00000100;
  3509  05BF  3004               	movlw	4
  3510  05C0  0093               	movwf	19	;volatile
  3511                           
  3512                           ;main.c: 927: INTCON = 0XC0;
  3513  05C1  30C0               	movlw	192
  3514  05C2  008B               	movwf	11	;volatile
  3515  05C3  0008               	return
  3516  05C4                     __end_of_Init_System:	
  3517                           
  3518                           	psect	text17
  3519  060E                     __ptext17:	
  3520 ;; *************** function _AD_Init *****************
  3521 ;; Defined at:
  3522 ;;		line 939 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2
  3531 ;; Tracked objects:
  3532 ;;		On entry : 100/0
  3533 ;;		On exit  : 100/100
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1
  3536 ;;      Params:         0       0       0
  3537 ;;      Locals:         0       0       0
  3538 ;;      Temps:          0       0       0
  3539 ;;      Totals:         0       0       0
  3540 ;;Total ram usage:        0 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_main
  3547 ;;		_Sleep_Mode
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           
  3552                           ;psect for function _AD_Init
  3553  060E                     _AD_Init:	
  3554  060E                     l2157:	
  3555                           ;incstack = 0
  3556                           ; Regs used in _AD_Init: [wreg+status,2]
  3557                           
  3558                           
  3559                           ;main.c: 972: ADCON0 = 0X41;
  3560  060E  3041               	movlw	65
  3561  060F  1683               	bsf	3,5	;RP0=1, select bank1
  3562  0610  0095               	movwf	21	;volatile
  3563                           
  3564                           ;main.c: 989: ADCON1 = 0;
  3565  0611  0196               	clrf	22	;volatile
  3566                           
  3567                           ;main.c: 990: ANSEL0 = 0X0D;
  3568  0612  300D               	movlw	13
  3569  0613  0093               	movwf	19	;volatile
  3570                           
  3571                           ;main.c: 991: ANSEL1 = 0x00;
  3572  0614  0194               	clrf	20	;volatile
  3573  0615  0008               	return
  3574  0616                     __end_of_AD_Init:	
  3575                           
  3576                           	psect	text18
  3577  0556                     __ptext18:	
  3578 ;; *************** function _Isr_Timer *****************
  3579 ;; Defined at:
  3580 ;;		line 131 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 100/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1
  3594 ;;      Params:         0       0       0
  3595 ;;      Locals:         0       0       0
  3596 ;;      Temps:          3       0       0
  3597 ;;      Totals:         3       0       0
  3598 ;;Total ram usage:        3 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    1
  3601 ;; This function calls:
  3602 ;;		_ledShow
  3603 ;; This function is called by:
  3604 ;;		Interrupt level 1
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _Isr_Timer
  3610  0556                     _Isr_Timer:	
  3611                           
  3612                           ;main.c: 133: if(TMR2IF)
  3613  0556  1283               	bcf	3,5	;RP0=0, select bank0
  3614  0557  1C8D               	btfss	13,1	;volatile
  3615  0558  2D6A               	goto	i1l688
  3616                           
  3617                           ;main.c: 134: {
  3618                           ;main.c: 135: TMR2IF = 0;
  3619  0559  108D               	bcf	13,1	;volatile
  3620                           
  3621                           ;main.c: 136: if(++intCount >= 160)
  3622  055A  30A0               	movlw	160
  3623  055B  0AD3               	incf	_intCount,f
  3624  055C  0253               	subwf	_intCount,w
  3625  055D  1C03               	skipc
  3626  055E  2D67               	goto	i1l2865
  3627  055F  3064               	movlw	100
  3628                           
  3629                           ;main.c: 137: {
  3630                           ;main.c: 138: intCount = 0;
  3631  0560  01D3               	clrf	_intCount
  3632                           
  3633                           ;main.c: 139: IntFlag = 1;
  3634  0561  01D1               	clrf	_IntFlag
  3635  0562  0AD1               	incf	_IntFlag,f
  3636                           
  3637                           ;main.c: 140: if(++count1s >= 100)
  3638  0563  0AD2               	incf	_count1s,f
  3639  0564  0252               	subwf	_count1s,w
  3640  0565  1803               	btfsc	3,0
  3641                           
  3642                           ;main.c: 141: {
  3643                           ;main.c: 142: count1s = 0;
  3644  0566  01D2               	clrf	_count1s
  3645  0567                     i1l2865:	
  3646                           
  3647                           ;main.c: 143: }
  3648                           ;main.c: 144: }
  3649                           ;main.c: 145: ledShow();
  3650  0567  21EB               	fcall	_ledShow
  3651                           
  3652                           ;main.c: 146: intCount10++;
  3653  0568  1283               	bcf	3,5	;RP0=0, select bank0
  3654  0569  0ACE               	incf	_intCount10,f
  3655  056A                     i1l688:	
  3656  056A  0872               	movf	??_Isr_Timer+2,w
  3657  056B  008A               	movwf	10
  3658  056C  0871               	movf	??_Isr_Timer+1,w
  3659  056D  0084               	movwf	4
  3660  056E  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3661  056F  0083               	movwf	3
  3662  0570  0EFE               	swapf	126,f
  3663  0571  0E7E               	swapf	126,w
  3664  0572  0009               	retfie
  3665  0573                     __end_of_Isr_Timer:	
  3666                           
  3667                           	psect	intentry
  3668  0004                     __pintentry:	
  3669                           ;incstack = 0
  3670                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3671                           
  3672  0004                     interrupt_function:	
  3673  007E                     saved_w	set	btemp
  3674  0004  00FE               	movwf	btemp
  3675  0005  0E03               	swapf	3,w
  3676  0006  00F0               	movwf	??_Isr_Timer
  3677  0007  0804               	movf	4,w
  3678  0008  00F1               	movwf	??_Isr_Timer+1
  3679  0009  080A               	movf	10,w
  3680  000A  00F2               	movwf	??_Isr_Timer+2
  3681  000B  2D56               	ljmp	_Isr_Timer
  3682                           
  3683                           	psect	text19
  3684  01EB                     __ptext19:	
  3685 ;; *************** function _ledShow *****************
  3686 ;; Defined at:
  3687 ;;		line 196 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;		None
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  1    wreg      void 
  3694 ;; Registers used:
  3695 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 100/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMMON   BANK0   BANK1
  3701 ;;      Params:         0       0       0
  3702 ;;      Locals:         0       0       0
  3703 ;;      Temps:          0       0       0
  3704 ;;      Totals:         0       0       0
  3705 ;;Total ram usage:        0 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_Isr_Timer
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           
  3715                           ;psect for function _ledShow
  3716  01EB                     _ledShow:	
  3717                           
  3718                           ;main.c: 198: if(++ledCntTime > 5)
  3719                           
  3720                           ;incstack = 0
  3721                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3722  01EB  3006               	movlw	6
  3723  01EC  0AB8               	incf	_ledCntTime,f
  3724  01ED  0238               	subwf	_ledCntTime,w
  3725  01EE  1C03               	skipc
  3726  01EF  0008               	return
  3727  01F0  300F               	movlw	15
  3728                           
  3729                           ;main.c: 199: {
  3730                           ;main.c: 200: ledCntTime = 0;
  3731  01F1  01B8               	clrf	_ledCntTime
  3732                           
  3733                           ;main.c: 201: if(++ledCnt > 14)
  3734  01F2  0ACA               	incf	_ledCnt,f
  3735  01F3  024A               	subwf	_ledCnt,w
  3736  01F4  1803               	btfsc	3,0
  3737                           
  3738                           ;main.c: 202: {
  3739                           ;main.c: 203: ledCnt = 0;
  3740  01F5  01CA               	clrf	_ledCnt
  3741                           
  3742                           ;main.c: 204: }
  3743                           ;main.c: 205: PORTA &= 0x3F;
  3744  01F6  303F               	movlw	63
  3745  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  3746  01F8  0586               	andwf	6,f	;volatile
  3747                           
  3748                           ;main.c: 206: PORTB &= 0xDC;
  3749  01F9  30DC               	movlw	220
  3750  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3751  01FB  0586               	andwf	6,f	;volatile
  3752                           
  3753                           ;main.c: 207: TRISA |= 0x30;
  3754  01FC  3030               	movlw	48
  3755  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  3756  01FE  0485               	iorwf	5,f	;volatile
  3757                           
  3758                           ;main.c: 208: TRISB |= 0x23;
  3759  01FF  3023               	movlw	35
  3760  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3761  0201  0485               	iorwf	5,f	;volatile
  3762                           
  3763                           ;main.c: 209: switch(ledCnt)
  3764  0202  2A9C               	goto	i1l2411
  3765  0203                     i1l708:	
  3766                           ;main.c: 210: {
  3767                           ;main.c: 211: case 1:
  3768                           
  3769                           
  3770                           ;main.c: 212: if(shiweiNum & 0x01)
  3771  0203  1C69               	btfss	_shiweiNum,0
  3772  0204  0008               	return
  3773                           
  3774                           ;main.c: 213: {
  3775                           ;main.c: 214: TRISB &= 0xDF;
  3776  0205  1285               	bcf	5,5	;volatile
  3777                           
  3778                           ;main.c: 215: TRISA &= 0xEF;
  3779  0206  1683               	bsf	3,5	;RP0=1, select bank1
  3780  0207  1205               	bcf	5,4	;volatile
  3781                           
  3782                           ;main.c: 216: RB5 = 1;
  3783  0208  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0209  1686               	bsf	6,5	;volatile
  3785                           
  3786                           ;main.c: 217: RA4 = 0;
  3787  020A  1683               	bsf	3,5	;RP0=1, select bank1
  3788  020B  1206               	bcf	6,4	;volatile
  3789  020C  0008               	return
  3790  020D                     i1l711:	
  3791                           ;main.c: 220: case 2:
  3792                           
  3793                           
  3794                           ;main.c: 221: if(shiweiNum & 0x02)
  3795  020D  1CE9               	btfss	_shiweiNum,1
  3796  020E  0008               	return
  3797                           
  3798                           ;main.c: 222: {
  3799                           ;main.c: 223: TRISB &= 0xDF;
  3800  020F  1285               	bcf	5,5	;volatile
  3801                           
  3802                           ;main.c: 224: TRISA &= 0xEF;
  3803  0210  1683               	bsf	3,5	;RP0=1, select bank1
  3804  0211  1205               	bcf	5,4	;volatile
  3805                           
  3806                           ;main.c: 225: RA4 = 1;
  3807  0212  1606               	bsf	6,4	;volatile
  3808                           
  3809                           ;main.c: 226: RB5 = 0;
  3810  0213  1283               	bcf	3,5	;RP0=0, select bank0
  3811  0214  1286               	bcf	6,5	;volatile
  3812  0215  0008               	return
  3813  0216                     i1l713:	
  3814                           ;main.c: 229: case 3:
  3815                           
  3816                           
  3817                           ;main.c: 230: if(shiweiNum & 0x04)
  3818  0216  1D69               	btfss	_shiweiNum,2
  3819  0217  0008               	return
  3820                           
  3821                           ;main.c: 231: {
  3822                           ;main.c: 232: TRISB &= 0xDF;
  3823  0218  1285               	bcf	5,5	;volatile
  3824                           
  3825                           ;main.c: 233: TRISB &= 0xFD;
  3826  0219  1085               	bcf	5,1	;volatile
  3827                           
  3828                           ;main.c: 234: RB5 = 1;
  3829  021A  1686               	bsf	6,5	;volatile
  3830                           
  3831                           ;main.c: 235: RB1 = 0;
  3832  021B  1086               	bcf	6,1	;volatile
  3833  021C  0008               	return
  3834  021D                     i1l715:	
  3835                           ;main.c: 238: case 4:
  3836                           
  3837                           
  3838                           ;main.c: 239: if(shiweiNum & 0x08)
  3839  021D  1DE9               	btfss	_shiweiNum,3
  3840  021E  0008               	return
  3841                           
  3842                           ;main.c: 240: {
  3843                           ;main.c: 241: TRISA &= 0xEF;
  3844  021F  1683               	bsf	3,5	;RP0=1, select bank1
  3845  0220  1205               	bcf	5,4	;volatile
  3846                           
  3847                           ;main.c: 242: TRISB &= 0xFD;
  3848  0221  1283               	bcf	3,5	;RP0=0, select bank0
  3849  0222  1085               	bcf	5,1	;volatile
  3850                           
  3851                           ;main.c: 243: RA4 = 1;
  3852  0223  1683               	bsf	3,5	;RP0=1, select bank1
  3853  0224  1606               	bsf	6,4	;volatile
  3854                           
  3855                           ;main.c: 244: RB1 = 0;
  3856  0225  1283               	bcf	3,5	;RP0=0, select bank0
  3857  0226  1086               	bcf	6,1	;volatile
  3858  0227  0008               	return
  3859  0228                     i1l717:	
  3860                           ;main.c: 247: case 5:
  3861                           
  3862                           
  3863                           ;main.c: 248: if(shiweiNum & 0x10)
  3864  0228  1E69               	btfss	_shiweiNum,4
  3865  0229  0008               	return
  3866                           
  3867                           ;main.c: 249: {
  3868                           ;main.c: 250: TRISA &= 0xEF;
  3869  022A  1683               	bsf	3,5	;RP0=1, select bank1
  3870  022B  1205               	bcf	5,4	;volatile
  3871                           
  3872                           ;main.c: 251: TRISB &= 0xFE;
  3873  022C  1283               	bcf	3,5	;RP0=0, select bank0
  3874  022D  1005               	bcf	5,0	;volatile
  3875                           
  3876                           ;main.c: 252: RA4 = 1;
  3877  022E  1683               	bsf	3,5	;RP0=1, select bank1
  3878  022F  1606               	bsf	6,4	;volatile
  3879                           
  3880                           ;main.c: 253: RB0 = 0;
  3881  0230  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0231  1006               	bcf	6,0	;volatile
  3883  0232  0008               	return
  3884  0233                     i1l719:	
  3885                           ;main.c: 256: case 6:
  3886                           
  3887                           
  3888                           ;main.c: 257: if(shiweiNum & 0x20)
  3889  0233  1EE9               	btfss	_shiweiNum,5
  3890  0234  0008               	return
  3891                           
  3892                           ;main.c: 258: {
  3893                           ;main.c: 259: TRISB &= 0xDF;
  3894  0235  1285               	bcf	5,5	;volatile
  3895                           
  3896                           ;main.c: 260: TRISB &= 0xFE;
  3897  0236  1005               	bcf	5,0	;volatile
  3898                           
  3899                           ;main.c: 261: RB5 = 1;
  3900  0237  1686               	bsf	6,5	;volatile
  3901                           
  3902                           ;main.c: 262: RB0 = 0;
  3903  0238  1006               	bcf	6,0	;volatile
  3904  0239  0008               	return
  3905  023A                     i1l721:	
  3906                           ;main.c: 265: case 7:
  3907                           
  3908                           
  3909                           ;main.c: 266: if(shiweiNum & 0x40)
  3910  023A  1F69               	btfss	_shiweiNum,6
  3911  023B  0008               	return
  3912                           
  3913                           ;main.c: 267: {
  3914                           ;main.c: 268: TRISB &= 0xFD;
  3915  023C  1085               	bcf	5,1	;volatile
  3916                           
  3917                           ;main.c: 269: TRISB &= 0xFE;
  3918  023D  1005               	bcf	5,0	;volatile
  3919                           
  3920                           ;main.c: 270: RB1 = 1;
  3921  023E  1486               	bsf	6,1	;volatile
  3922                           
  3923                           ;main.c: 271: RB0 = 0;
  3924  023F  1006               	bcf	6,0	;volatile
  3925  0240  0008               	return
  3926  0241                     i1l723:	
  3927                           ;main.c: 274: case 8:
  3928                           
  3929                           
  3930                           ;main.c: 275: if(geweiNum & 0x01)
  3931  0241  1C68               	btfss	_geweiNum,0
  3932  0242  0008               	return
  3933                           
  3934                           ;main.c: 276: {
  3935                           ;main.c: 277: TRISA &= 0xDF;
  3936  0243  1683               	bsf	3,5	;RP0=1, select bank1
  3937  0244  1285               	bcf	5,5	;volatile
  3938                           
  3939                           ;main.c: 278: TRISA &= 0xEF;
  3940  0245  1205               	bcf	5,4	;volatile
  3941                           
  3942                           ;main.c: 279: RA4 = 1;
  3943  0246  1606               	bsf	6,4	;volatile
  3944                           
  3945                           ;main.c: 280: RA5 = 0;
  3946  0247  1286               	bcf	6,5	;volatile
  3947  0248  0008               	return
  3948  0249                     i1l725:	
  3949                           ;main.c: 283: case 9:
  3950                           
  3951                           
  3952                           ;main.c: 284: if(geweiNum & 0x02)
  3953  0249  1CE8               	btfss	_geweiNum,1
  3954  024A  0008               	return
  3955                           
  3956                           ;main.c: 285: {
  3957                           ;main.c: 286: TRISA &= 0xDF;
  3958  024B  1683               	bsf	3,5	;RP0=1, select bank1
  3959  024C  1285               	bcf	5,5	;volatile
  3960                           
  3961                           ;main.c: 287: TRISA &= 0xEF;
  3962  024D  1205               	bcf	5,4	;volatile
  3963                           
  3964                           ;main.c: 288: RA5 = 1;
  3965  024E  1686               	bsf	6,5	;volatile
  3966                           
  3967                           ;main.c: 289: RA4 = 0;
  3968  024F  1206               	bcf	6,4	;volatile
  3969  0250  0008               	return
  3970  0251                     i1l727:	
  3971                           ;main.c: 292: case 10:
  3972                           
  3973                           
  3974                           ;main.c: 293: if(geweiNum & 0x04)
  3975  0251  1D68               	btfss	_geweiNum,2
  3976  0252  0008               	return
  3977                           
  3978                           ;main.c: 294: {
  3979                           ;main.c: 295: TRISA &= 0xDF;
  3980  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3981  0254  1285               	bcf	5,5	;volatile
  3982                           
  3983                           ;main.c: 296: TRISB &= 0xDF;
  3984  0255  1283               	bcf	3,5	;RP0=0, select bank0
  3985  0256  1285               	bcf	5,5	;volatile
  3986                           
  3987                           ;main.c: 297: RB5 = 1;
  3988  0257  1686               	bsf	6,5	;volatile
  3989                           
  3990                           ;main.c: 298: RA5 = 0;
  3991  0258  1683               	bsf	3,5	;RP0=1, select bank1
  3992  0259  1286               	bcf	6,5	;volatile
  3993  025A  0008               	return
  3994  025B                     i1l729:	
  3995                           ;main.c: 301: case 11:
  3996                           
  3997                           
  3998                           ;main.c: 302: if(geweiNum & 0x08)
  3999  025B  1DE8               	btfss	_geweiNum,3
  4000  025C  0008               	return
  4001                           
  4002                           ;main.c: 303: {
  4003                           ;main.c: 304: TRISA &= 0xDF;
  4004  025D  1683               	bsf	3,5	;RP0=1, select bank1
  4005  025E  1285               	bcf	5,5	;volatile
  4006                           
  4007                           ;main.c: 305: TRISB &= 0xDF;
  4008  025F  1283               	bcf	3,5	;RP0=0, select bank0
  4009  0260  1285               	bcf	5,5	;volatile
  4010                           
  4011                           ;main.c: 306: RA5 = 1;
  4012  0261  1683               	bsf	3,5	;RP0=1, select bank1
  4013  0262  1686               	bsf	6,5	;volatile
  4014                           
  4015                           ;main.c: 307: RB5 = 0;
  4016  0263  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0264  1286               	bcf	6,5	;volatile
  4018  0265  0008               	return
  4019  0266                     i1l731:	
  4020                           ;main.c: 310: case 12:
  4021                           
  4022                           
  4023                           ;main.c: 311: if(geweiNum & 0x10)
  4024  0266  1E68               	btfss	_geweiNum,4
  4025  0267  0008               	return
  4026                           
  4027                           ;main.c: 312: {
  4028                           ;main.c: 313: TRISA &= 0xDF;
  4029  0268  1683               	bsf	3,5	;RP0=1, select bank1
  4030  0269  1285               	bcf	5,5	;volatile
  4031                           
  4032                           ;main.c: 314: TRISB &= 0xFD;
  4033  026A  1283               	bcf	3,5	;RP0=0, select bank0
  4034  026B  1085               	bcf	5,1	;volatile
  4035                           
  4036                           ;main.c: 315: RB1 = 1;
  4037  026C  1486               	bsf	6,1	;volatile
  4038                           
  4039                           ;main.c: 316: RA5 = 0;
  4040  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4041  026E  1286               	bcf	6,5	;volatile
  4042  026F  0008               	return
  4043  0270                     i1l733:	
  4044                           ;main.c: 319: case 13:
  4045                           
  4046                           
  4047                           ;main.c: 320: if(geweiNum & 0x20)
  4048  0270  1EE8               	btfss	_geweiNum,5
  4049  0271  0008               	return
  4050                           
  4051                           ;main.c: 321: {
  4052                           ;main.c: 322: TRISA &= 0xDF;
  4053  0272  1683               	bsf	3,5	;RP0=1, select bank1
  4054  0273  1285               	bcf	5,5	;volatile
  4055                           
  4056                           ;main.c: 323: TRISB &= 0xFD;
  4057  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0275  1085               	bcf	5,1	;volatile
  4059                           
  4060                           ;main.c: 324: RA5 = 1;
  4061  0276  1683               	bsf	3,5	;RP0=1, select bank1
  4062  0277  1686               	bsf	6,5	;volatile
  4063                           
  4064                           ;main.c: 325: RB1 = 0;
  4065  0278  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0279  1086               	bcf	6,1	;volatile
  4067  027A  0008               	return
  4068  027B                     i1l735:	
  4069                           ;main.c: 328: case 14:
  4070                           
  4071                           
  4072                           ;main.c: 329: if(geweiNum & 0x40)
  4073  027B  1F68               	btfss	_geweiNum,6
  4074  027C  0008               	return
  4075                           
  4076                           ;main.c: 330: {
  4077                           ;main.c: 331: TRISA &= 0xDF;
  4078  027D  1683               	bsf	3,5	;RP0=1, select bank1
  4079  027E  1285               	bcf	5,5	;volatile
  4080                           
  4081                           ;main.c: 332: TRISB &= 0xFE;
  4082  027F  1283               	bcf	3,5	;RP0=0, select bank0
  4083  0280  1005               	bcf	5,0	;volatile
  4084                           
  4085                           ;main.c: 333: RA5 = 1;
  4086  0281  1683               	bsf	3,5	;RP0=1, select bank1
  4087  0282  1686               	bsf	6,5	;volatile
  4088                           
  4089                           ;main.c: 334: RB0 = 0;
  4090  0283  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0284  1006               	bcf	6,0	;volatile
  4092  0285  0008               	return
  4093  0286                     i1l2401:	
  4094                           
  4095                           ;main.c: 338: if(workStep > 0)
  4096  0286  087A               	movf	_workStep,w
  4097  0287  1903               	btfsc	3,2
  4098  0288  0008               	return
  4099                           
  4100                           ;main.c: 339: {
  4101                           ;main.c: 340: TRISA &= 0xEF;
  4102  0289  1683               	bsf	3,5	;RP0=1, select bank1
  4103  028A  1205               	bcf	5,4	;volatile
  4104                           
  4105                           ;main.c: 341: TRISB &= 0xFE;
  4106  028B  1283               	bcf	3,5	;RP0=0, select bank0
  4107  028C  1005               	bcf	5,0	;volatile
  4108                           
  4109                           ;main.c: 342: RB0 = 1;
  4110  028D  1406               	bsf	6,0	;volatile
  4111                           
  4112                           ;main.c: 343: RA4 = 0;
  4113  028E  1683               	bsf	3,5	;RP0=1, select bank1
  4114  028F  1206               	bcf	6,4	;volatile
  4115  0290  0008               	return
  4116  0291                     i1l2405:	
  4117                           
  4118                           ;main.c: 347: if(workStep > 0)
  4119  0291  087A               	movf	_workStep,w
  4120  0292  1903               	btfsc	3,2
  4121  0293  0008               	return
  4122                           
  4123                           ;main.c: 348: {
  4124                           ;main.c: 349: TRISA &= 0xDF;
  4125  0294  1683               	bsf	3,5	;RP0=1, select bank1
  4126  0295  1285               	bcf	5,5	;volatile
  4127                           
  4128                           ;main.c: 350: TRISB &= 0xFE;
  4129  0296  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0297  1005               	bcf	5,0	;volatile
  4131                           
  4132                           ;main.c: 351: RB0 = 1;
  4133  0298  1406               	bsf	6,0	;volatile
  4134                           
  4135                           ;main.c: 352: RA5 = 0;
  4136  0299  1683               	bsf	3,5	;RP0=1, select bank1
  4137  029A  1286               	bcf	6,5	;volatile
  4138  029B  0008               	return
  4139  029C                     i1l2411:	
  4140  029C  084A               	movf	_ledCnt,w
  4141                           
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 16, Range of values is 0 to 15
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; direct_byte           22     6 (fixed)
  4147                           ; simple_byte           49    25 (average)
  4148                           ; jumptable            260     6 (fixed)
  4149                           ;	Chosen strategy is direct_byte
  4150  029D  0084               	movwf	4
  4151  029E  3010               	movlw	16
  4152  029F  0204               	subwf	4,w
  4153  02A0  1803               	skipnc
  4154  02A1  0008               	return
  4155  02A2  3005               	movlw	high i1S3295
  4156  02A3  008A               	movwf	10
  4157  02A4  30E9               	movlw	low i1S3295
  4158  02A5  0704               	addwf	4,w
  4159  02A6  0082               	movwf	2
  4160  02A7  0008               	return
  4161  02A8                     __end_of_ledShow:	
  4162  007E                     btemp	set	126	;btemp
  4163  007E                     wtemp0	set	126
  4164                           
  4165                           	psect	swtext1
  4166  05E9                     __pswtext1:	
  4167  05E9                     i1S3295:	
  4168  05E9  2A91               	ljmp	i1l2405
  4169  05EA  2A03               	ljmp	i1l708
  4170  05EB  2A0D               	ljmp	i1l711
  4171  05EC  2A16               	ljmp	i1l713
  4172  05ED  2A1D               	ljmp	i1l715
  4173  05EE  2A28               	ljmp	i1l717
  4174  05EF  2A33               	ljmp	i1l719
  4175  05F0  2A3A               	ljmp	i1l721
  4176  05F1  2A41               	ljmp	i1l723
  4177  05F2  2A49               	ljmp	i1l725
  4178  05F3  2A51               	ljmp	i1l727
  4179  05F4  2A5B               	ljmp	i1l729
  4180  05F5  2A66               	ljmp	i1l731
  4181  05F6  2A70               	ljmp	i1l733
  4182  05F7  2A7B               	ljmp	i1l735
  4183  05F8  2A86               	ljmp	i1l2401


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         57
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     19      75
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2864
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     748
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     427
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1072
                                              4 COMMON     2     2      0
                                             17 BANK0      2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     13      4B       4       93.8%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      56       7        0.0%
DATA                 0      0      56       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 14 14:33:26 2025

            _protectFlag 004C                        pc 0002                       PL2 01CE  
                     PL4 01DD                       PL6 04CE                       PL8 00FC  
                     fsr 0004                      PL10 05E5                      PL12 01E6  
                    PL14 044B                      l824 0530                      l851 02FE  
                    l932 016F                      l693 045A                      l926 0134  
                    l936 01B3                      l697 0474                      _GIE 005F  
                    _RB0 0030                      _RB1 0031                      _RA4 0434  
                    _RA5 0435                      _RB3 0033                      _RB4 0034  
                    _RB5 0035                      _PR2 0011      __size_of_ADC_Sample 00CC  
                    fsr0 0004                      indf 0000          __end_of_AD_Init 0616  
                   l1203 059B                     l3003 01B7                     l3101 0322  
                   l3105 0328                     l2217 0550                     l2321 0595  
                   l3115 033F                     l3123 0348                     l2163 061D  
                   l3027 058B                     l3019 0577                     l3211 0423  
                   l3203 0411                     l2157 060E                     l3141 0376  
                   l3109 032E                     l3061 02DC                     l3119 0341  
                   l3047 02C4                     l2335 05A8                     l3215 0437  
                   l3153 03A3                     l3081 0304                     l3073 02F6  
                   l3049 02C5                     l2601 00AE                     l2521 0023  
                   l3233 0462                     l3163 03B7                     l3059 02DB  
                   l3219 0448                     l3181 03E9                     l3093 0316  
                   l3085 030A                     l3069 02F2                     l2621 00D3  
                   l2605 00B1                     l2533 0033                     l3175 03E0  
                   l3183 03EB                     l3159 03B0                     l2607 00B3  
                   l2551 004A                     l2535 0035                     l3097 031C  
                   l3089 0310                     l2625 00D7                     l2721 0523  
                   l3273 0493                     l2619 00D2                     l2547 0048  
                   l3195 03FE                     l2645 00F9                     l2573 006C  
                   l2565 0061                     l2557 0054                     l2629 00DE  
                   l2717 051E                     l2725 0527                     l2591 008E  
                   l2575 006E                     l2585 0088                     l2595 00A4  
                   l2587 008A                     l2755 04F9                     l2747 04E1  
                   l2763 0509                     l2757 04FB                     l2953 0114  
                   l2963 011E                     l2955 0116                     l2991 0163  
                   l2993 016B                     l2969 011F                     l2987 0159  
                   l2979 013F                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3025 015F                     u3035 0169  
                   u3205 02E8                     u2335 00A2                     u3075 01A9  
                   u3325 0337                     u3095 01C0                     u2375 00C6  
                   _PIE1 000E                     u3385 0395                     _PEIE 005E  
                   _RAIE 0073                     _RAIF 006B                     _RBIE 005B  
                   _RBIF 0058                     u3667 034D                     u3677 03B5  
                   u3687 03F0                     u3697 0110                     _PIR1 000D  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0450                     btemp 007E                     start 000C  
          ??_Init_System 0073                    ?_main 0070          __end_of___lbdiv 05AA  
        __end_of___lbmod 058F                    _T2CON 0013                    i1l711 020D  
                  i1l721 023A                    i1l713 0216                    i1l731 0266  
                  i1l723 0241                    i1l715 021D                    i1l708 0203  
                  i1l733 0270                    i1l725 0249                    i1l717 0228  
                  i1l735 027B                    i1l727 0251                    i1l719 0233  
                  i1l729 025B                    i1l688 056A            _countHalfFull 004D  
                  _PORTA 0086                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0005                    _PWMTH 0018                    _PWMTL 0017  
        __end_of_chrgCtr 00FC          __end_of_ledShow 02A8          __end_of_keyRead 0556  
                  pclath 000A          __end_of_pwmInit 0606          __end_of_pwmStop 061D  
                  status 0003                    wtemp0 007E          __end_of_workCtr 050D  
        ___lbdiv@divisor 0073          ___lbdiv@counter 0075          __initialization 000D  
           __end_of_main 0495     __size_of_chrgPwmInit 000D     __size_of_chrgPwmStop 0007  
                 ??_main 0077                ??_AD_Init 0073      __end_of_Init_System 05C4  
                 _ADCON0 0095                   _ADCON1 0096                   i1S3295 05E9  
                 _ADRESH 0099                   _ADRESL 0098                   _ANSEL0 0093  
                 _ANSEL1 0094                   _GODONE 04A9                   i1l2401 0286  
                 i1l2411 029C                   i1l2405 0291                   i1l2865 0567  
                 _LDO_EN 04B2                   _INTCON 000B                   _OSCCON 0014  
                 _TMR2IE 0071                   _TMR2IF 0069                   _PWMD2L 009B  
                 _PWMD3L 009C             ??_ADC_Sample 0055             keyCtr@kclick 0074  
     __size_of_Isr_Timer 001D               _Sleep_Mode 0495                ??___lbdiv 0074  
              ??___lbmod 0074                   _ledCnt 004A                   _ledCtr 03F3  
                 _keyCtr 050D                ??_chrgCtr 0073                   _pwStep 0042  
                 _result 0030                ??_ledShow 0070         __end_of_numArray 05D8  
              ??_keyRead 0073       __end_of_ADC_Sample 01CE                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0073  
       ___lbdiv@dividend 0074               _batADValue 0077          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0056          _workOverOutTime 004B  
         __pcstackCOMMON 0070       __size_of_checkOutA 00A8              _Init_System 05AA  
             __end_ofPL2 01DD               __end_ofPL4 01E6               __end_ofPL6 04D7  
             __end_ofPL8 0102         ___lbdiv@quotient 0076        __end_of_Isr_Timer 0573  
             _checkBatAD 0350               __pbssBANK0 0020             _chrgFullFlag 004F  
            ?_Sleep_Mode 0070               __pmaintext 0450               __pintentry 0004  
                ?_ledCtr 0070             _chrgWaitTime 003A                  ?_keyCtr 0070  
             _ledCntTime 0038                  _AD_Init 060E                  _PWM23DT 009D  
                _PWMD23H 009E                  _PWMCON0 0015                  _PWMCON1 0016  
                _PWMCON2 001D        __end_of_checkOutA 0350               __stringtab 05C4  
                _IntFlag 0051               _intCount10 004E          ADC_Sample@adldo 0073  
        ADC_Sample@admax 0062          ADC_Sample@admin 0060          ADC_Sample@adsum 005C  
                ___lbdiv 058F                  ___lbmod 0573                  _addTime 003C  
        __size_of_ledCtr 0058          __size_of_keyCtr 002B                  _chrgCtr 0018  
             _lowBatFlag 0037                  __ptext1 04D7                  __ptext2 05F9  
                __ptext3 03F3                  __ptext4 0573                  __ptext5 058F  
                __ptext6 050D                  __ptext7 0538                  __ptext8 0018  
                __ptext9 0616                  _ledShow 01EB                  _count1s 0052  
                _count5s 0026                  _count8s 0022                  _maxDuty 0047  
                _keyRead 0538      __size_of_Sleep_Mode 0039                  _pwmInit 05F9  
                _subTime 003B              ?_checkBatAD 0070                  _pwmStop 0616  
                clrloop0 0607                  _workCtr 04D7               _outADValue 002C  
   end_of_initialization 0016            _longPressFlag 0048            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0055              ___lbmod@rem 0057  
    __size_of_checkBatAD 00A3             ?_Init_System 0070           __end_of_ledCtr 044B  
         __end_of_keyCtr 0538      __end_of_chrgPwmInit 05E5      __end_of_chrgPwmStop 0624  
            __end_ofPL10 05E9              __end_ofPL12 01EB              __end_ofPL14 0450  
    start_initialization 000D                _Isr_Timer 0556             ??_Sleep_Mode 0073  
               ??_ledCtr 0077        ADC_Sample@ad_temp 0064                 ??_keyCtr 0074  
               ?_AD_Init 0070              __pbssCOMMON 0077                ___latbits 0000  
          __pcstackBANK0 0055       __end_of_Sleep_Mode 04CE               ?_Isr_Timer 0070  
              _checkOutA 02A8                __pnvBANK0 0068              _chrgMaxDuty 0039  
              _chrgMaxAD 003E              _chrgPwmFlag 0035              _chrgPwmInit 05D8  
               ?___lbdiv 0073                 ?___lbmod 0073              _chrgPwmStop 061D  
               ?_chrgCtr 0070                __pstrings 05C4                __pswtext1 05E9  
              _count900s 0020                 ?_ledShow 0070                 ?_keyRead 0070  
              _firstTime 006A           ADC_Sample@adch 005A                 ?_pwmInit 0070  
              _fullCount 0028             ??_checkBatAD 0074                 ?_pwmStop 0070  
              _lockCount 003D                 ?_workCtr 0070              ADC_Sample@i 005B  
            ADC_Sample@j 0059        interrupt_function 0004               ?_checkOutA 0070  
              clear_ram0 0606                _prePwStep 0079              _reChrgCount 0041  
              _sleepTime 0036                _shiweiNum 0069                _overCount 0046  
      checkOutA@maxtempV 0066       __end_of_checkBatAD 03F3              __stringbase 05C9  
   __size_of_Init_System 001A                _startTime 0044         __size_of_AD_Init 0008  
       keyRead@keyStatus 0073              ??_Isr_Timer 0070               _ADC_Sample 0102  
       __size_of___lbdiv 001B         __size_of___lbmod 001C       __end_of__stringtab 05CA  
       __size_of_chrgCtr 00E4         __size_of_ledShow 00BD         __size_of_keyRead 001E  
               _adresult 0032                 _chrgFlag 0050                 _chrgMode 003F  
               __ptext10 061D                 __ptext11 05D8                 __ptext12 02A8  
               __ptext13 0350                 __ptext14 0102                 __ptext15 0495  
               __ptext16 05AA                 __ptext17 060E                 __ptext18 0556  
               __ptext19 01EB         __size_of_pwmInit 000D         __size_of_pwmStop 0007  
               _geweiNum 0068                 _count50s 002A         __size_of_workCtr 0036  
               _keyCount 0049                 _intCount 0053            __size_of_main 0045  
            ??_checkOutA 0074                 _numArray 05CA         checkOutA@maxAout 0067  
               _tempDuty 0045                 _test_adc 0054                 _power_ad 002E  
               _workStep 007A             _overChrgTime 0043             _motorPwmFlag 0034  
               intlevel1 0000              ?_ADC_Sample 0073                stringcode 05C4  
           ?_chrgPwmInit 0070             _overWorkTime 0024             ?_chrgPwmStop 0070  
            _showBatTime 0040               _OPTION_REG 0001                 stringdir 05C4  
               stringtab 05C4  
