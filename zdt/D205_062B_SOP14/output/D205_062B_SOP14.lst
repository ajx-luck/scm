

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 29 17:52:50 2025

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P062BD
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	strings
    74  05DA                     __pstrings:	
    75  05DA                     stringtab:	
    76  05DA                     __stringtab:	
    77  05DA                     stringcode:	
    78                           ;	String table - string pointers are 1 byte each
    79                           
    80  05DA                     stringdir:	
    81  05DA  3005               	movlw	high stringdir
    82  05DB  008A               	movwf	10
    83  05DC  0804               	movf	4,w
    84  05DD  0A84               	incf	4,f
    85  05DE  0782               	addwf	2,f
    86  05DF                     __stringbase:	
    87  05DF  3400               	retlw	0
    88  05E0                     __end_of__stringtab:	
    89  05E0                     _numArray:	
    90  05E0  343F               	retlw	63
    91  05E1  3406               	retlw	6
    92  05E2  345B               	retlw	91
    93  05E3  344F               	retlw	79
    94  05E4  3466               	retlw	102
    95  05E5  346D               	retlw	109
    96  05E6  347D               	retlw	125
    97  05E7  3407               	retlw	7
    98  05E8  347F               	retlw	127
    99  05E9  346F               	retlw	111
   100  05EA  3471               	retlw	113
   101  05EB  3479               	retlw	121
   102  05EC  3450               	retlw	80
   103  05ED  3476               	retlw	118
   104  05EE                     __end_of_numArray:	
   105                           
   106                           	psect	nvBANK0
   107  006B                     __pnvBANK0:	
   108  006B                     _geweiNum:	
   109  006B                     	ds	1
   110  006C                     _shiweiNum:	
   111  006C                     	ds	1
   112  006D                     _firstTime:	
   113  006D                     	ds	1
   114  001D                     _PWMCON2	set	29
   115  0018                     _PWMTH	set	24
   116  0017                     _PWMTL	set	23
   117  0016                     _PWMCON1	set	22
   118  0015                     _PWMCON0	set	21
   119  0014                     _OSCCON	set	20
   120  0013                     _T2CON	set	19
   121  0011                     _PR2	set	17
   122  000E                     _PIE1	set	14
   123  000D                     _PIR1	set	13
   124  000B                     _INTCON	set	11
   125  0009                     _IOCB	set	9
   126  0008                     _WPUB	set	8
   127  0006                     _PORTB	set	6
   128  0005                     _TRISB	set	5
   129  0001                     _OPTION_REG	set	1
   130  0071                     _TMR2IE	set	113
   131  0073                     _RAIE	set	115
   132  0069                     _TMR2IF	set	105
   133  006B                     _RAIF	set	107
   134  0058                     _RBIF	set	88
   135  005B                     _RBIE	set	91
   136  005E                     _PEIE	set	94
   137  005F                     _GIE	set	95
   138  0030                     _RB0	set	48
   139  0031                     _RB1	set	49
   140  0033                     _RB3	set	51
   141  0034                     _RB4	set	52
   142  0035                     _RB5	set	53
   143  009E                     _PWMD23H	set	158
   144  009D                     _PWM23DT	set	157
   145  009C                     _PWMD3L	set	156
   146  009B                     _PWMD2L	set	155
   147  0099                     _ADRESH	set	153
   148  0098                     _ADRESL	set	152
   149  0096                     _ADCON1	set	150
   150  0095                     _ADCON0	set	149
   151  0094                     _ANSEL1	set	148
   152  0093                     _ANSEL0	set	147
   153  0089                     _IOCA	set	137
   154  0088                     _WPUA	set	136
   155  0087                     _WPDA	set	135
   156  0086                     _PORTA	set	134
   157  0085                     _TRISA	set	133
   158  04B2                     _LDO_EN	set	1202
   159  04B6                     _CHS4	set	1206
   160  04A9                     _GODONE	set	1193
   161  0434                     _RA4	set	1076
   162  0435                     _RA5	set	1077
   163                           
   164                           	psect	cinit
   165  000D                     start_initialization:	
   166                           ; #config settings
   167                           
   168  000D                     __initialization:	
   169                           
   170                           ; Clear objects allocated to COMMON
   171  000D  3077               	movlw	low __pbssCOMMON
   172  000E  0084               	movwf	4
   173  000F  307B               	movlw	low (__pbssCOMMON+4)
   174  0010  262B               	fcall	clear_ram0
   175  0011  3020               	movlw	low __pbssBANK0
   176                           
   177                           ; Clear objects allocated to BANK0
   178  0012  1383               	bcf	3,7	;select IRP bank0
   179  0013  0084               	movwf	4
   180  0014  3056               	movlw	low (__pbssBANK0+54)
   181  0015  262B               	fcall	clear_ram0
   182  0016                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185  0016                     __end_of__initialization:	
   186  0016  0183               	clrf	3
   187  0017  2C62               	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	bssCOMMON
   190  0077                     __pbssCOMMON:	
   191  0077                     _batADValue:	
   192  0077                     	ds	2
   193  0079                     _prePwStep:	
   194  0079                     	ds	1
   195  007A                     _workStep:	
   196  007A                     	ds	1
   197                           
   198                           	psect	bssBANK0
   199  0020                     __pbssBANK0:	
   200  0020                     _count900s:	
   201  0020                     	ds	2
   202  0022                     _count8s:	
   203  0022                     	ds	2
   204  0024                     _overWorkTime:	
   205  0024                     	ds	2
   206  0026                     _count5s:	
   207  0026                     	ds	2
   208  0028                     _fullCount:	
   209  0028                     	ds	2
   210  002A                     _count50s:	
   211  002A                     	ds	2
   212  002C                     _outADValue:	
   213  002C                     	ds	2
   214  002E                     _power_ad:	
   215  002E                     	ds	2
   216  0030                     _result:	
   217  0030                     	ds	2
   218  0032                     _adresult:	
   219  0032                     	ds	2
   220  0034                     _motorPwmFlag:	
   221  0034                     	ds	1
   222  0035                     _chrgPwmFlag:	
   223  0035                     	ds	1
   224  0036                     _jrStep:	
   225  0036                     	ds	1
   226  0037                     _sleepTime:	
   227  0037                     	ds	1
   228  0038                     _lowBatFlag:	
   229  0038                     	ds	1
   230  0039                     _ledCntTime:	
   231  0039                     	ds	1
   232  003A                     _chrgMaxDuty:	
   233  003A                     	ds	1
   234  003B                     _chrgWaitTime:	
   235  003B                     	ds	1
   236  003C                     _subTime:	
   237  003C                     	ds	1
   238  003D                     _addTime:	
   239  003D                     	ds	1
   240  003E                     _lockCount:	
   241  003E                     	ds	1
   242  003F                     _chrgMaxAD:	
   243  003F                     	ds	1
   244  0040                     _chrgMode:	
   245  0040                     	ds	1
   246  0041                     _showBatTime:	
   247  0041                     	ds	1
   248  0042                     _reChrgCount:	
   249  0042                     	ds	1
   250  0043                     _pwStep:	
   251  0043                     	ds	1
   252  0044                     _overChrgTime:	
   253  0044                     	ds	1
   254  0045                     _startTime:	
   255  0045                     	ds	1
   256  0046                     _tempDuty:	
   257  0046                     	ds	1
   258  0047                     _overCount:	
   259  0047                     	ds	1
   260  0048                     _maxDuty:	
   261  0048                     	ds	1
   262  0049                     _longPressFlag:	
   263  0049                     	ds	1
   264  004A                     _keyCount:	
   265  004A                     	ds	1
   266  004B                     _ledCnt:	
   267  004B                     	ds	1
   268  004C                     _workOverOutTime:	
   269  004C                     	ds	1
   270  004D                     _protectFlag:	
   271  004D                     	ds	1
   272  004E                     _countHalfFull:	
   273  004E                     	ds	1
   274  004F                     _intCount10:	
   275  004F                     	ds	1
   276  0050                     _chrgFullFlag:	
   277  0050                     	ds	1
   278  0051                     _chrgFlag:	
   279  0051                     	ds	1
   280  0052                     _IntFlag:	
   281  0052                     	ds	1
   282  0053                     _count1s:	
   283  0053                     	ds	1
   284  0054                     _intCount:	
   285  0054                     	ds	1
   286  0055                     _test_adc:	
   287  0055                     	ds	1
   288                           
   289                           	psect	clrtext
   290  062B                     clear_ram0:	
   291                           ;	Called with FSR containing the base address, and
   292                           ;	W with the last address+1
   293                           
   294  062B  0064               	clrwdt	;clear the watchdog before getting into this loop
   295  062C                     clrloop0:	
   296  062C  0180               	clrf	0	;clear RAM location pointed to by FSR
   297  062D  0A84               	incf	4,f	;increment pointer
   298  062E  0604               	xorwf	4,w	;XOR with final address
   299  062F  1903               	btfsc	3,2	;have we reached the end yet?
   300  0630  3400               	retlw	0	;all done for this memory range, return
   301  0631  0604               	xorwf	4,w	;XOR again to restore value
   302  0632  2E2C               	goto	clrloop0	;do the next byte
   303                           
   304                           	psect	cstackCOMMON
   305  0070                     __pcstackCOMMON:	
   306  0070                     ?_ledShow:	
   307  0070                     ??_ledShow:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_Init_System:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_AD_Init:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_checkOutA:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_chrgCtr:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_checkBatAD:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ?_keyCtr:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_workCtr:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_ledCtr:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_Sleep_Mode:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_chrgPwmStop:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_pwmStop:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_chrgPwmInit:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_pwmInit:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_Isr_Timer:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ??_Isr_Timer:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_main:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_keyRead:	
   359                           ; 1 bytes @ 0x0
   360                           
   361                           
   362                           ; 1 bytes @ 0x0
   363  0070                     	ds	3
   364  0073                     ??_Init_System:	
   365  0073                     ??_AD_Init:	
   366                           ; 1 bytes @ 0x3
   367                           
   368  0073                     ??_chrgCtr:	
   369                           ; 1 bytes @ 0x3
   370                           
   371  0073                     ??_workCtr:	
   372                           ; 1 bytes @ 0x3
   373                           
   374  0073                     ??_Sleep_Mode:	
   375                           ; 1 bytes @ 0x3
   376                           
   377  0073                     ??_chrgPwmStop:	
   378                           ; 1 bytes @ 0x3
   379                           
   380  0073                     ??_pwmStop:	
   381                           ; 1 bytes @ 0x3
   382                           
   383  0073                     ??_chrgPwmInit:	
   384                           ; 1 bytes @ 0x3
   385                           
   386  0073                     ??_pwmInit:	
   387                           ; 1 bytes @ 0x3
   388                           
   389  0073                     ?_ADC_Sample:	
   390                           ; 1 bytes @ 0x3
   391                           
   392  0073                     ??_keyRead:	
   393                           ; 1 bytes @ 0x3
   394                           
   395  0073                     ?___bmul:	
   396                           ; 1 bytes @ 0x3
   397                           
   398  0073                     ?___lbdiv:	
   399                           ; 1 bytes @ 0x3
   400                           
   401  0073                     ?___lbmod:	
   402                           ; 1 bytes @ 0x3
   403                           
   404  0073                     keyRead@keyStatus:	
   405                           ; 1 bytes @ 0x3
   406                           
   407  0073                     ADC_Sample@adldo:	
   408                           ; 1 bytes @ 0x3
   409                           
   410  0073                     ___bmul@multiplicand:	
   411                           ; 1 bytes @ 0x3
   412                           
   413  0073                     ___lbdiv@divisor:	
   414                           ; 1 bytes @ 0x3
   415                           
   416  0073                     ___lbmod@divisor:	
   417                           ; 1 bytes @ 0x3
   418                           
   419                           
   420                           ; 1 bytes @ 0x3
   421  0073                     	ds	1
   422  0074                     ??_checkBatAD:	
   423  0074                     ??_keyCtr:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0074                     ??___bmul:	
   427                           ; 1 bytes @ 0x4
   428                           
   429  0074                     ??___lbdiv:	
   430                           ; 1 bytes @ 0x4
   431                           
   432  0074                     ??___lbmod:	
   433                           ; 1 bytes @ 0x4
   434                           
   435  0074                     keyCtr@kclick:	
   436                           ; 1 bytes @ 0x4
   437                           
   438  0074                     ___bmul@product:	
   439                           ; 1 bytes @ 0x4
   440                           
   441  0074                     ___lbdiv@dividend:	
   442                           ; 1 bytes @ 0x4
   443                           
   444                           
   445                           ; 1 bytes @ 0x4
   446  0074                     	ds	1
   447  0075                     ___bmul@multiplier:	
   448  0075                     ___lbdiv@counter:	
   449                           ; 1 bytes @ 0x5
   450                           
   451                           
   452                           ; 1 bytes @ 0x5
   453  0075                     	ds	1
   454  0076                     ___lbdiv@quotient:	
   455                           
   456                           ; 1 bytes @ 0x6
   457  0076                     	ds	1
   458  0077                     ??_ledCtr:	
   459  0077                     ??_main:	
   460                           ; 1 bytes @ 0x7
   461                           
   462                           
   463                           	psect	cstackBANK0
   464  0056                     __pcstackBANK0:	
   465                           ; 1 bytes @ 0x7
   466                           
   467  0056                     ??_ADC_Sample:	
   468  0056                     ___lbmod@dividend:	
   469                           ; 1 bytes @ 0x0
   470                           
   471                           
   472                           ; 1 bytes @ 0x0
   473  0056                     	ds	1
   474  0057                     ___lbmod@counter:	
   475                           
   476                           ; 1 bytes @ 0x1
   477  0057                     	ds	1
   478  0058                     ___lbmod@rem:	
   479                           
   480                           ; 1 bytes @ 0x2
   481  0058                     	ds	2
   482  005A                     ADC_Sample@j:	
   483                           
   484                           ; 1 bytes @ 0x4
   485  005A                     	ds	1
   486  005B                     ADC_Sample@adch:	
   487                           
   488                           ; 1 bytes @ 0x5
   489  005B                     	ds	1
   490  005C                     ADC_Sample@i:	
   491                           
   492                           ; 1 bytes @ 0x6
   493  005C                     	ds	1
   494  005D                     ADC_Sample@adsum:	
   495                           
   496                           ; 4 bytes @ 0x7
   497  005D                     	ds	4
   498  0061                     ADC_Sample@admin:	
   499                           
   500                           ; 2 bytes @ 0xB
   501  0061                     	ds	2
   502  0063                     ADC_Sample@admax:	
   503                           
   504                           ; 2 bytes @ 0xD
   505  0063                     	ds	2
   506  0065                     ADC_Sample@ad_temp:	
   507                           
   508                           ; 2 bytes @ 0xF
   509  0065                     	ds	2
   510  0067                     ??_checkOutA:	
   511                           
   512                           ; 1 bytes @ 0x11
   513  0067                     	ds	2
   514  0069                     checkOutA@maxtempV:	
   515                           
   516                           ; 1 bytes @ 0x13
   517  0069                     	ds	1
   518  006A                     checkOutA@maxAout:	
   519                           
   520                           ; 1 bytes @ 0x14
   521  006A                     	ds	1
   522                           
   523                           	psect	maintext
   524  0462                     __pmaintext:	
   525 ;;
   526 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   527 ;;
   528 ;; *************** function _main *****************
   529 ;; Defined at:
   530 ;;		line 155 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   531 ;; Parameters:    Size  Location     Type
   532 ;;		None
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : B00/0
   541 ;;		On exit  : 100/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1
   544 ;;      Params:         0       0       0
   545 ;;      Locals:         0       0       0
   546 ;;      Temps:          0       0       0
   547 ;;      Totals:         0       0       0
   548 ;;Total ram usage:        0 bytes
   549 ;; Hardware stack levels required when called:    4
   550 ;; This function calls:
   551 ;;		_AD_Init
   552 ;;		_Init_System
   553 ;;		_Sleep_Mode
   554 ;;		_checkBatAD
   555 ;;		_checkOutA
   556 ;;		_chrgCtr
   557 ;;		_keyCtr
   558 ;;		_ledCtr
   559 ;;		_workCtr
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           
   566                           ;psect for function _main
   567  0462                     _main:	
   568                           
   569                           ;main.c: 157: Init_System();
   570                           
   571                           ;incstack = 0
   572                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   573  0462  25C0               	fcall	_Init_System
   574                           
   575                           ;main.c: 158: AD_Init();
   576  0463  2633               	fcall	_AD_Init
   577                           
   578                           ;main.c: 159: shiweiNum = geweiNum = numArray[8];
   579  0464  3009               	movlw	low (((_numArray+8)-__stringbase)| (0+32768))
   580  0465  0084               	movwf	4
   581  0466  25DA               	fcall	stringdir
   582  0467  1283               	bcf	3,5	;RP0=0, select bank0
   583  0468  00EB               	movwf	_geweiNum
   584  0469  00EC               	movwf	_shiweiNum
   585                           
   586                           ;main.c: 160: firstTime = 200;
   587  046A  30C8               	movlw	200
   588  046B  00ED               	movwf	_firstTime
   589  046C                     l693:	
   590                           ;main.c: 161: while (1)
   591                           
   592  046C  0064               	clrwdt	;# 
   593                           
   594                           ;main.c: 164: if(intCount10 > 10)
   595  046D  300B               	movlw	11
   596  046E  1283               	bcf	3,5	;RP0=0, select bank0
   597  046F  024F               	subwf	_intCount10,w
   598  0470  1C03               	skipc
   599  0471  2C74               	goto	l3303
   600                           
   601                           ;main.c: 165: {
   602                           ;main.c: 166: intCount10 = 0;
   603  0472  01CF               	clrf	_intCount10
   604                           
   605                           ;main.c: 167: checkOutA();
   606  0473  22A9               	fcall	_checkOutA
   607  0474                     l3303:	
   608                           
   609                           ;main.c: 168: }
   610                           ;main.c: 169: if(!IntFlag)
   611  0474  1283               	bcf	3,5	;RP0=0, select bank0
   612  0475  0852               	movf	_IntFlag,w
   613  0476  1903               	btfsc	3,2
   614  0477  2C6C               	goto	l693
   615                           
   616                           ;main.c: 171: IntFlag = 0;
   617  0478  01D2               	clrf	_IntFlag
   618                           
   619                           ;main.c: 172: chrgCtr();
   620  0479  2018               	fcall	_chrgCtr
   621                           
   622                           ;main.c: 173: checkBatAD();
   623  047A  2361               	fcall	_checkBatAD
   624                           
   625                           ;main.c: 174: if(chrgFlag == 0 && lowBatFlag == 0 && firstTime == 0)
   626  047B  1283               	bcf	3,5	;RP0=0, select bank0
   627  047C  0851               	movf	_chrgFlag,w
   628  047D  1D03               	btfss	3,2
   629  047E  2C86               	goto	l697
   630  047F  0838               	movf	_lowBatFlag,w
   631  0480  1D03               	btfss	3,2
   632  0481  2C86               	goto	l697
   633  0482  086D               	movf	_firstTime,w
   634  0483  1D03               	btfss	3,2
   635  0484  2C86               	goto	l697
   636                           
   637                           ;main.c: 175: {
   638                           ;main.c: 176: keyCtr();
   639  0485  2523               	fcall	_keyCtr
   640  0486                     l697:	
   641                           
   642                           ;main.c: 177: }
   643                           ;main.c: 178: workCtr();
   644  0486  24E9               	fcall	_workCtr
   645                           
   646                           ;main.c: 179: ledCtr();
   647  0487  2405               	fcall	_ledCtr
   648                           
   649                           ;main.c: 180: if(chrgFlag == 0 && workStep == 0 && keyCount == 0 && firstTime == 0 && sh
      +                          owBatTime == 0 && overWorkTime == 0)
   650  0488  0851               	movf	_chrgFlag,w
   651  0489  1D03               	btfss	3,2
   652  048A  2CA5               	goto	l3343
   653  048B  087A               	movf	_workStep,w
   654  048C  1D03               	btfss	3,2
   655  048D  2CA5               	goto	l3343
   656  048E  084A               	movf	_keyCount,w
   657  048F  1D03               	btfss	3,2
   658  0490  2CA5               	goto	l3343
   659  0491  086D               	movf	_firstTime,w
   660  0492  1D03               	btfss	3,2
   661  0493  2CA5               	goto	l3343
   662  0494  0841               	movf	_showBatTime,w
   663  0495  1D03               	btfss	3,2
   664  0496  2CA5               	goto	l3343
   665  0497  0824               	movf	_overWorkTime,w
   666  0498  0425               	iorwf	_overWorkTime+1,w
   667  0499  1D03               	btfss	3,2
   668  049A  2CA5               	goto	l3343
   669  049B  30C8               	movlw	200
   670                           
   671                           ;main.c: 181: {
   672                           ;main.c: 182: shiweiNum = geweiNum = 0;
   673  049C  01EB               	clrf	_geweiNum
   674  049D  01EC               	clrf	_shiweiNum
   675                           
   676                           ;main.c: 183: if(++sleepTime >= 200)
   677  049E  0AB7               	incf	_sleepTime,f
   678  049F  0237               	subwf	_sleepTime,w
   679  04A0  1C03               	skipc
   680  04A1  2C6C               	goto	l693
   681                           
   682                           ;main.c: 184: {
   683                           ;main.c: 185: sleepTime = 0;
   684  04A2  01B7               	clrf	_sleepTime
   685                           
   686                           ;main.c: 186: Sleep_Mode();
   687  04A3  24A7               	fcall	_Sleep_Mode
   688  04A4  2C6C               	goto	l693
   689  04A5                     l3343:	
   690                           
   691                           ;main.c: 189: else
   692                           ;main.c: 190: {
   693                           ;main.c: 191: sleepTime = 0;
   694  04A5  01B7               	clrf	_sleepTime
   695  04A6  2C6C               	goto	l693
   696  04A7                     __end_of_main:	
   697                           
   698                           	psect	text1
   699  04E9                     __ptext1:	
   700 ;; *************** function _workCtr *****************
   701 ;; Defined at:
   702 ;;		line 662 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, pclath, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 100/0
   713 ;;		On exit  : 100/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMMON   BANK0   BANK1
   716 ;;      Params:         0       0       0
   717 ;;      Locals:         0       0       0
   718 ;;      Temps:          0       0       0
   719 ;;      Totals:         0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    3
   723 ;; This function calls:
   724 ;;		_pwmInit
   725 ;;		_pwmStop
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           
   732                           ;psect for function _workCtr
   733  04E9                     _workCtr:	
   734                           
   735                           ;main.c: 665: if(startTime > 0)
   736                           
   737                           ;incstack = 0
   738                           ; Regs used in _workCtr: [wreg+status,2+status,0+pclath+cstack]
   739  04E9  0845               	movf	_startTime,w
   740  04EA  1D03               	btfss	3,2
   741                           
   742                           ;main.c: 666: {
   743                           ;main.c: 667: startTime--;
   744  04EB  03C5               	decf	_startTime,f
   745                           
   746                           ;main.c: 668: }
   747                           ;main.c: 669: if(workStep > 0)
   748  04EC  087A               	movf	_workStep,w
   749  04ED  1903               	btfsc	3,2
   750  04EE  2D1F               	goto	l2825
   751                           
   752                           ;main.c: 670: {
   753                           ;main.c: 671: if(motorPwmFlag == 0)
   754  04EF  0834               	movf	_motorPwmFlag,w
   755  04F0  1D03               	btfss	3,2
   756  04F1  2CF3               	goto	l2803
   757                           
   758                           ;main.c: 672: {
   759                           ;main.c: 673: pwmInit();
   760  04F2  261E               	fcall	_pwmInit
   761  04F3                     l2803:	
   762                           
   763                           ;main.c: 675: }
   764                           ;main.c: 676: maxDuty = 99 + workStep;
   765  04F3  087A               	movf	_workStep,w
   766  04F4  3E63               	addlw	99
   767  04F5  00C8               	movwf	_maxDuty
   768                           
   769                           ;main.c: 677: if(overCount >= 5)
   770  04F6  3005               	movlw	5
   771  04F7  0247               	subwf	_overCount,w
   772  04F8  1C03               	skipc
   773  04F9  2D0D               	goto	l2817
   774                           
   775                           ;main.c: 678: {
   776                           ;main.c: 679: if(++count5s > 300)
   777  04FA  0AA6               	incf	_count5s,f
   778  04FB  1903               	skipnz
   779  04FC  0AA7               	incf	_count5s+1,f
   780  04FD  3001               	movlw	1
   781  04FE  0227               	subwf	_count5s+1,w
   782  04FF  302D               	movlw	45
   783  0500  1903               	skipnz
   784  0501  0226               	subwf	_count5s,w
   785  0502  1C03               	skipc
   786  0503  2D0F               	goto	l2819
   787  0504  30E8               	movlw	232
   788                           
   789                           ;main.c: 680: {
   790                           ;main.c: 681: count5s = 0;
   791  0505  01A6               	clrf	_count5s
   792  0506  01A7               	clrf	_count5s+1
   793                           
   794                           ;main.c: 684: prejrStep = jrStep;
   795  0507  00A4               	movwf	_overWorkTime
   796  0508  3003               	movlw	3
   797  0509  00A5               	movwf	_overWorkTime+1
   798                           
   799                           ;main.c: 685: workStep = 0;
   800  050A  01FA               	clrf	_workStep
   801                           
   802                           ;main.c: 686: jrStep = 0;
   803  050B  01B6               	clrf	_jrStep
   804  050C  2D0F               	goto	l2819
   805  050D                     l2817:	
   806                           
   807                           ;main.c: 689: else
   808                           ;main.c: 690: {
   809                           ;main.c: 691: count5s = 0;
   810  050D  01A6               	clrf	_count5s
   811  050E  01A7               	clrf	_count5s+1
   812  050F                     l2819:	
   813                           
   814                           ;main.c: 692: }
   815                           ;main.c: 693: if(count1s == 0 && ++count900s >= 900)
   816  050F  0853               	movf	_count1s,w
   817  0510  1D03               	btfss	3,2
   818  0511  0008               	return
   819  0512  0AA0               	incf	_count900s,f
   820  0513  1903               	skipnz
   821  0514  0AA1               	incf	_count900s+1,f
   822  0515  3003               	movlw	3
   823  0516  0221               	subwf	_count900s+1,w
   824  0517  3084               	movlw	132
   825  0518  1903               	skipnz
   826  0519  0220               	subwf	_count900s,w
   827  051A  1C03               	skipc
   828  051B  0008               	return
   829                           
   830                           ;main.c: 694: {
   831                           ;main.c: 695: workStep = 0;
   832  051C  01FA               	clrf	_workStep
   833                           
   834                           ;main.c: 696: jrStep = 0;
   835  051D  01B6               	clrf	_jrStep
   836  051E  0008               	return
   837  051F                     l2825:	
   838                           
   839                           ;main.c: 699: else
   840                           ;main.c: 700: {
   841                           ;main.c: 701: pwmStop();
   842  051F  263B               	fcall	_pwmStop
   843                           
   844                           ;main.c: 702: count900s = 0;
   845  0520  01A0               	clrf	_count900s
   846  0521  01A1               	clrf	_count900s+1
   847  0522  0008               	return
   848  0523                     __end_of_workCtr:	
   849                           
   850                           	psect	text2
   851  061E                     __ptext2:	
   852 ;; *************** function _pwmInit *****************
   853 ;; Defined at:
   854 ;;		line 1031 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, status,2
   863 ;; Tracked objects:
   864 ;;		On entry : 100/0
   865 ;;		On exit  : 100/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1
   868 ;;      Params:         0       0       0
   869 ;;      Locals:         0       0       0
   870 ;;      Temps:          0       0       0
   871 ;;      Totals:         0       0       0
   872 ;;Total ram usage:        0 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    2
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_workCtr
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _pwmInit
   884  061E                     _pwmInit:	
   885                           
   886                           ;main.c: 1033: motorPwmFlag = 1;
   887                           
   888                           ;incstack = 0
   889                           ; Regs used in _pwmInit: [wreg+status,2]
   890  061E  01B4               	clrf	_motorPwmFlag
   891  061F  0AB4               	incf	_motorPwmFlag,f
   892                           
   893                           ;main.c: 1034: PWMCON1 = 0B00000000;
   894  0620  0196               	clrf	22	;volatile
   895                           
   896                           ;main.c: 1035: PWMTH = 0X00;
   897  0621  0198               	clrf	24	;volatile
   898                           
   899                           ;main.c: 1036: PWMTL = 200;
   900  0622  30C8               	movlw	200
   901  0623  0097               	movwf	23	;volatile
   902                           
   903                           ;main.c: 1039: PWMD23H = 0;
   904  0624  1683               	bsf	3,5	;RP0=1, select bank1
   905  0625  019E               	clrf	30	;volatile
   906                           
   907                           ;main.c: 1040: PWMD3L = 80;
   908  0626  3050               	movlw	80
   909  0627  009C               	movwf	28	;volatile
   910                           
   911                           ;main.c: 1041: PWM23DT = 0X00;
   912  0628  019D               	clrf	29	;volatile
   913                           
   914                           ;main.c: 1043: PWMCON0 = 0X48;
   915  0629  3048               	movlw	72
   916                           
   917                           ;main.c: 1044: PWMCON2 =0X00;
   918  062A  2DFB               	ljmp	PL12	;call to abstracted procedure
   919  062B                     __end_of_pwmInit:	
   920                           
   921                           	psect	text3
   922  0405                     __ptext3:	
   923 ;; *************** function _ledCtr *****************
   924 ;; Defined at:
   925 ;;		line 364 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 100/0
   936 ;;		On exit  : 100/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1
   939 ;;      Params:         0       0       0
   940 ;;      Locals:         0       0       0
   941 ;;      Temps:          0       0       0
   942 ;;      Totals:         0       0       0
   943 ;;Total ram usage:        0 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    3
   946 ;; This function calls:
   947 ;;		___lbdiv
   948 ;;		___lbmod
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           
   955                           ;psect for function _ledCtr
   956  0405                     _ledCtr:	
   957                           
   958                           ;main.c: 366: if(firstTime > 0)
   959                           
   960                           ;incstack = 0
   961                           ; Regs used in _ledCtr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   962  0405  086D               	movf	_firstTime,w
   963  0406  1903               	btfsc	3,2
   964  0407  2C10               	goto	l3265
   965                           
   966                           ;main.c: 367: {
   967                           ;main.c: 368: firstTime--;
   968  0408  03ED               	decf	_firstTime,f
   969                           
   970                           ;main.c: 369: if(prePwStep < pwStep)
   971  0409  0843               	movf	_pwStep,w
   972  040A  0279               	subwf	_prePwStep,w
   973  040B  1803               	skipnc
   974  040C  0008               	return
   975                           
   976                           ;main.c: 370: {
   977                           ;main.c: 371: prePwStep = pwStep;
   978  040D  0843               	movf	_pwStep,w
   979  040E  00F9               	movwf	_prePwStep
   980  040F  0008               	return
   981  0410                     l3265:	
   982                           
   983                           ;main.c: 374: else if(overWorkTime > 0)
   984  0410  0824               	movf	_overWorkTime,w
   985  0411  0425               	iorwf	_overWorkTime+1,w
   986  0412  1903               	btfsc	3,2
   987  0413  2C23               	goto	l3273
   988                           
   989                           ;main.c: 375: {
   990                           ;main.c: 376: overWorkTime--;
   991  0414  3001               	movlw	1
   992  0415  02A4               	subwf	_overWorkTime,f
   993  0416  3000               	movlw	0
   994  0417  1C03               	skipc
   995  0418  03A5               	decf	_overWorkTime+1,f
   996  0419  02A5               	subwf	_overWorkTime+1,f
   997                           
   998                           ;main.c: 377: shiweiNum = numArray[11];
   999  041A  300C               	movlw	low (((_numArray+11)-__stringbase)| (0+32768))
  1000  041B  0084               	movwf	4
  1001  041C  25DA               	fcall	stringdir
  1002  041D  00EC               	movwf	_shiweiNum
  1003                           
  1004                           ;main.c: 378: geweiNum = numArray[12];
  1005  041E  300D               	movlw	low (((_numArray+12)-__stringbase)| (0+32768))
  1006  041F  0084               	movwf	4
  1007  0420  25DA               	fcall	stringdir
  1008  0421  00EB               	movwf	_geweiNum
  1009                           
  1010                           ;main.c: 379: }
  1011  0422  0008               	return
  1012  0423                     l3273:	
  1013                           
  1014                           ;main.c: 380: else if(showBatTime > 0)
  1015  0423  0841               	movf	_showBatTime,w
  1016  0424  1903               	btfsc	3,2
  1017  0425  2C35               	goto	l3281
  1018  0426  300A               	movlw	10
  1019                           
  1020                           ;main.c: 381: {
  1021                           ;main.c: 382: showBatTime--;
  1022  0427  03C1               	decf	_showBatTime,f
  1023                           
  1024                           ;main.c: 383: shiweiNum = numArray[prePwStep/10];
  1025  0428  00F3               	movwf	___lbdiv@divisor
  1026  0429  0879               	movf	_prePwStep,w
  1027  042A  25A5               	fcall	___lbdiv
  1028  042B  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1029  042C  0084               	movwf	4
  1030  042D  25DA               	fcall	stringdir
  1031                           
  1032                           ;main.c: 384: geweiNum = numArray[prePwStep%10];
  1033  042E  245D               	fcall	PL10	;call to abstracted procedure
  1034  042F  2589               	fcall	___lbmod
  1035  0430  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1036  0431  0084               	movwf	4
  1037  0432  25DA               	fcall	stringdir
  1038  0433  00EB               	movwf	_geweiNum
  1039                           
  1040                           ;main.c: 385: }
  1041  0434  0008               	return
  1042  0435                     l3281:	
  1043                           
  1044                           ;main.c: 386: else if(workStep > 0)
  1045  0435  087A               	movf	_workStep,w
  1046  0436  1903               	btfsc	3,2
  1047  0437  2C49               	goto	l3285
  1048                           
  1049                           ;main.c: 387: {
  1050                           ;main.c: 390: shiweiNum = numArray[workStep/10];
  1051  0438  300A               	movlw	10
  1052  0439  00F3               	movwf	___lbdiv@divisor
  1053  043A  087A               	movf	_workStep,w
  1054  043B  25A5               	fcall	___lbdiv
  1055  043C  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1056  043D  0084               	movwf	4
  1057  043E  25DA               	fcall	stringdir
  1058  043F  00EC               	movwf	_shiweiNum
  1059                           
  1060                           ;main.c: 391: geweiNum = numArray[workStep%10];
  1061  0440  300A               	movlw	10
  1062  0441  00F3               	movwf	___lbmod@divisor
  1063  0442  087A               	movf	_workStep,w
  1064  0443  2589               	fcall	___lbmod
  1065  0444  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1066  0445  0084               	movwf	4
  1067  0446  25DA               	fcall	stringdir
  1068  0447  00EB               	movwf	_geweiNum
  1069                           
  1070                           ;main.c: 393: }
  1071  0448  0008               	return
  1072  0449                     l3285:	
  1073                           
  1074                           ;main.c: 394: else if(chrgFlag)
  1075  0449  0851               	movf	_chrgFlag,w
  1076  044A  1903               	btfsc	3,2
  1077  044B  2C5A               	goto	l3289
  1078                           
  1079                           ;main.c: 395: {
  1080                           ;main.c: 396: shiweiNum = numArray[prePwStep/10];
  1081  044C  300A               	movlw	10
  1082  044D  00F3               	movwf	___lbdiv@divisor
  1083  044E  0879               	movf	_prePwStep,w
  1084  044F  25A5               	fcall	___lbdiv
  1085  0450  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1086  0451  0084               	movwf	4
  1087  0452  25DA               	fcall	stringdir
  1088                           
  1089                           ;main.c: 397: geweiNum = numArray[prePwStep%10];
  1090  0453  245D               	fcall	PL10	;call to abstracted procedure
  1091  0454  2589               	fcall	___lbmod
  1092  0455  3E01               	addlw	low ((_numArray-__stringbase)| (0+32768))
  1093  0456  0084               	movwf	4
  1094  0457  25DA               	fcall	stringdir
  1095  0458  00EB               	movwf	_geweiNum
  1096                           
  1097                           ;main.c: 398: }
  1098  0459  0008               	return
  1099  045A                     l3289:	
  1100                           
  1101                           ;main.c: 399: else
  1102                           ;main.c: 400: {
  1103                           ;main.c: 401: shiweiNum = 0;
  1104  045A  01EC               	clrf	_shiweiNum
  1105                           
  1106                           ;main.c: 402: geweiNum = 0;
  1107  045B  01EB               	clrf	_geweiNum
  1108  045C  0008               	return
  1109  045D                     __end_of_ledCtr:	
  1110  045D                     PL10:	
  1111  045D  00EC               	movwf	_shiweiNum
  1112  045E  300A               	movlw	10
  1113  045F  00F3               	movwf	___lbmod@divisor
  1114  0460  0879               	movf	_prePwStep,w
  1115  0461  0008               	return
  1116  0462                     __end_ofPL10:	
  1117                           
  1118                           	psect	text4
  1119  0589                     __ptext4:	
  1120 ;; *************** function ___lbmod *****************
  1121 ;; Defined at:
  1122 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbmod.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  dividend        1    wreg     unsigned char 
  1125 ;;  divisor         1    3[COMMON] unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  dividend        1    0[BANK0 ] unsigned char 
  1128 ;;  rem             1    2[BANK0 ] unsigned char 
  1129 ;;  counter         1    1[BANK0 ] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      unsigned char 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0
  1134 ;; Tracked objects:
  1135 ;;		On entry : 100/0
  1136 ;;		On exit  : 100/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMMON   BANK0   BANK1
  1139 ;;      Params:         1       0       0
  1140 ;;      Locals:         0       3       0
  1141 ;;      Temps:          1       0       0
  1142 ;;      Totals:         2       3       0
  1143 ;;Total ram usage:        5 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    2
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		_ledCtr
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function ___lbmod
  1155  0589                     ___lbmod:	
  1156                           
  1157                           ;incstack = 0
  1158                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  1159                           ;___lbmod@dividend stored from wreg
  1160  0589  00D6               	movwf	___lbmod@dividend
  1161  058A  3008               	movlw	8
  1162  058B  00D7               	movwf	___lbmod@counter
  1163  058C  01D8               	clrf	___lbmod@rem
  1164  058D                     l3081:	
  1165  058D  0856               	movf	___lbmod@dividend,w
  1166  058E  00F4               	movwf	??___lbmod
  1167  058F  3007               	movlw	7
  1168  0590  1003               	clrc
  1169  0591                     L1:	
  1170  0591  0CF4               	rrf	??___lbmod,f
  1171  0592  3EFF               	addlw	-1
  1172  0593  1003               	clrc
  1173  0594  1D03               	skipz
  1174  0595  2D91               	goto	L1
  1175  0596  0D58               	rlf	___lbmod@rem,w
  1176  0597  0474               	iorwf	??___lbmod,w
  1177  0598  00D8               	movwf	___lbmod@rem
  1178  0599  1003               	clrc
  1179  059A  0DD6               	rlf	___lbmod@dividend,f
  1180  059B  0873               	movf	___lbmod@divisor,w
  1181  059C  0258               	subwf	___lbmod@rem,w
  1182  059D  1C03               	skipc
  1183  059E  2DA1               	goto	l3089
  1184  059F  0873               	movf	___lbmod@divisor,w
  1185  05A0  02D8               	subwf	___lbmod@rem,f
  1186  05A1                     l3089:	
  1187  05A1  0BD7               	decfsz	___lbmod@counter,f
  1188  05A2  2D8D               	goto	l3081
  1189  05A3  0858               	movf	___lbmod@rem,w
  1190  05A4  0008               	return
  1191  05A5                     __end_of___lbmod:	
  1192                           
  1193                           	psect	text5
  1194  05A5                     __ptext5:	
  1195 ;; *************** function ___lbdiv *****************
  1196 ;; Defined at:
  1197 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\lbdiv.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  dividend        1    wreg     unsigned char 
  1200 ;;  divisor         1    3[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  dividend        1    4[COMMON] unsigned char 
  1203 ;;  quotient        1    6[COMMON] unsigned char 
  1204 ;;  counter         1    5[COMMON] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      unsigned char 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 100/0
  1211 ;;		On exit  : 100/0
  1212 ;;		Unchanged: 100/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1
  1214 ;;      Params:         1       0       0
  1215 ;;      Locals:         3       0       0
  1216 ;;      Temps:          0       0       0
  1217 ;;      Totals:         4       0       0
  1218 ;;Total ram usage:        4 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_ledCtr
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function ___lbdiv
  1230  05A5                     ___lbdiv:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  1234                           ;___lbdiv@dividend stored from wreg
  1235  05A5  00F4               	movwf	___lbdiv@dividend
  1236  05A6  01F6               	clrf	___lbdiv@quotient
  1237  05A7  0873               	movf	___lbdiv@divisor,w
  1238  05A8  1903               	btfsc	3,2
  1239  05A9  2DBE               	goto	l2381
  1240  05AA  01F5               	clrf	___lbdiv@counter
  1241  05AB                     l2367:	
  1242  05AB  0AF5               	incf	___lbdiv@counter,f
  1243  05AC  1BF3               	btfsc	___lbdiv@divisor,7
  1244  05AD  2DB1               	goto	l1205
  1245  05AE  1003               	clrc
  1246  05AF  0DF3               	rlf	___lbdiv@divisor,f
  1247  05B0  2DAB               	goto	l2367
  1248  05B1                     l1205:	
  1249  05B1  1003               	clrc
  1250  05B2  0DF6               	rlf	___lbdiv@quotient,f
  1251  05B3  0873               	movf	___lbdiv@divisor,w
  1252  05B4  0274               	subwf	___lbdiv@dividend,w
  1253  05B5  1C03               	skipc
  1254  05B6  2DBB               	goto	L2
  1255  05B7  0873               	movf	___lbdiv@divisor,w
  1256  05B8  02F4               	subwf	___lbdiv@dividend,f
  1257  05B9  1476               	bsf	___lbdiv@quotient,0
  1258  05BA  1003               	clrc
  1259  05BB                     L2:	
  1260  05BB  0CF3               	rrf	___lbdiv@divisor,f
  1261  05BC  0BF5               	decfsz	___lbdiv@counter,f
  1262  05BD  2DB1               	goto	l1205
  1263  05BE                     l2381:	
  1264  05BE  0876               	movf	___lbdiv@quotient,w
  1265  05BF  0008               	return
  1266  05C0                     __end_of___lbdiv:	
  1267                           
  1268                           	psect	text6
  1269  0523                     __ptext6:	
  1270 ;; *************** function _keyCtr *****************
  1271 ;; Defined at:
  1272 ;;		line 624 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  kclick          1    4[COMMON] unsigned char 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0, pclath, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 100/0
  1283 ;;		On exit  : 100/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1
  1286 ;;      Params:         0       0       0
  1287 ;;      Locals:         1       0       0
  1288 ;;      Temps:          0       0       0
  1289 ;;      Totals:         1       0       0
  1290 ;;Total ram usage:        1 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    3
  1293 ;; This function calls:
  1294 ;;		_keyRead
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _keyCtr
  1302  0523                     _keyCtr:	
  1303                           
  1304                           ;main.c: 626: char kclick = keyRead(0x04 & (~PORTB));
  1305                           
  1306                           ;incstack = 0
  1307                           ; Regs used in _keyCtr: [wreg+status,2+status,0+pclath+cstack]
  1308  0523  0906               	comf	6,w	;volatile
  1309  0524  3904               	andlw	4
  1310  0525  254E               	fcall	_keyRead
  1311  0526  00F4               	movwf	keyCtr@kclick
  1312                           
  1313                           ;main.c: 627: if(kclick == 1)
  1314  0527  0B74               	decfsz	keyCtr@kclick,w
  1315  0528  2D3D               	goto	l2781
  1316                           
  1317                           ;main.c: 628: {
  1318                           ;main.c: 629: if(workStep > 0)
  1319  0529  087A               	movf	_workStep,w
  1320  052A  1903               	btfsc	3,2
  1321  052B  2D34               	goto	l2773
  1322                           
  1323                           ;main.c: 630: {
  1324                           ;main.c: 631: if(++workStep > 32)
  1325  052C  3021               	movlw	33
  1326  052D  0AFA               	incf	_workStep,f
  1327  052E  027A               	subwf	_workStep,w
  1328  052F  1C03               	skipc
  1329  0530  0008               	return
  1330                           
  1331                           ;main.c: 632: {
  1332                           ;main.c: 633: workStep = 1;
  1333  0531  01FA               	clrf	_workStep
  1334  0532  0AFA               	incf	_workStep,f
  1335  0533  0008               	return
  1336  0534                     l2773:	
  1337                           
  1338                           ;main.c: 636: else if(showBatTime > 0)
  1339  0534  0841               	movf	_showBatTime,w
  1340  0535  1903               	btfsc	3,2
  1341  0536  2D39               	goto	l2777
  1342                           
  1343                           ;main.c: 637: {
  1344                           ;main.c: 638: showBatTime = 0;
  1345  0537  01C1               	clrf	_showBatTime
  1346                           
  1347                           ;main.c: 639: }
  1348  0538  0008               	return
  1349  0539                     l2777:	
  1350                           
  1351                           ;main.c: 640: else
  1352                           ;main.c: 641: {
  1353                           ;main.c: 642: showBatTime = 200;
  1354  0539  30C8               	movlw	200
  1355  053A  00C1               	movwf	_showBatTime
  1356                           
  1357                           ;main.c: 643: count1s = 0;
  1358  053B  01D3               	clrf	_count1s
  1359  053C  0008               	return
  1360  053D                     l2781:	
  1361                           
  1362                           ;main.c: 646: else if(kclick == 2)
  1363  053D  3002               	movlw	2
  1364  053E  0674               	xorwf	keyCtr@kclick,w
  1365  053F  1D03               	btfss	3,2
  1366  0540  0008               	return
  1367                           
  1368                           ;main.c: 647: {
  1369                           ;main.c: 648: if(workStep > 0)
  1370  0541  087A               	movf	_workStep,w
  1371  0542  1903               	btfsc	3,2
  1372  0543  2D46               	goto	l824
  1373                           
  1374                           ;main.c: 649: {
  1375                           ;main.c: 650: workStep = 0;
  1376  0544  01FA               	clrf	_workStep
  1377                           
  1378                           ;main.c: 651: }
  1379  0545  0008               	return
  1380  0546                     l824:	
  1381  0546  301E               	movlw	30
  1382                           
  1383                           ;main.c: 652: else
  1384                           ;main.c: 653: {
  1385                           ;main.c: 654: workStep = 1;
  1386  0547  01FA               	clrf	_workStep
  1387  0548  0AFA               	incf	_workStep,f
  1388                           
  1389                           ;main.c: 655: startTime = 30;
  1390  0549  00C5               	movwf	_startTime
  1391                           
  1392                           ;main.c: 656: showBatTime = 0;
  1393  054A  01C1               	clrf	_showBatTime
  1394                           
  1395                           ;main.c: 657: overWorkTime = 0;
  1396  054B  01A4               	clrf	_overWorkTime
  1397  054C  01A5               	clrf	_overWorkTime+1
  1398  054D  0008               	return
  1399  054E                     __end_of_keyCtr:	
  1400                           
  1401                           	psect	text7
  1402  054E                     __ptext7:	
  1403 ;; *************** function _keyRead *****************
  1404 ;; Defined at:
  1405 ;;		line 556 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  keyStatus       1    wreg     unsigned char 
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;  keyStatus       1    3[COMMON] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0
  1414 ;; Tracked objects:
  1415 ;;		On entry : 100/0
  1416 ;;		On exit  : 100/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1
  1419 ;;      Params:         0       0       0
  1420 ;;      Locals:         1       0       0
  1421 ;;      Temps:          0       0       0
  1422 ;;      Totals:         1       0       0
  1423 ;;Total ram usage:        1 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    2
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_keyCtr
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _keyRead
  1435  054E                     _keyRead:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _keyRead: [wreg+status,2+status,0]
  1439                           ;keyRead@keyStatus stored from wreg
  1440  054E  00F3               	movwf	keyRead@keyStatus
  1441                           
  1442                           ;main.c: 558: if(keyStatus)
  1443  054F  0873               	movf	keyRead@keyStatus,w
  1444  0550  3064               	movlw	100
  1445  0551  1903               	btfsc	3,2
  1446  0552  2D60               	goto	L4
  1447                           
  1448                           ;main.c: 559: {
  1449                           ;main.c: 560: keyCount++;
  1450  0553  0ACA               	incf	_keyCount,f
  1451                           
  1452                           ;main.c: 561: if(keyCount >= 100)
  1453  0554  024A               	subwf	_keyCount,w
  1454  0555  1C03               	skipc
  1455  0556  3400               	retlw	0
  1456                           
  1457                           ;main.c: 562: {
  1458                           ;main.c: 563: keyCount = 100;
  1459  0557  3064               	movlw	100
  1460  0558  00CA               	movwf	_keyCount
  1461                           
  1462                           ;main.c: 564: if(!longPressFlag)
  1463  0559  0849               	movf	_longPressFlag,w
  1464  055A  1D03               	btfss	3,2
  1465  055B  3400               	retlw	0
  1466  055C  3002               	movlw	2
  1467                           
  1468                           ;main.c: 565: {
  1469                           ;main.c: 566: longPressFlag = 1;
  1470  055D  01C9               	clrf	_longPressFlag
  1471  055E  0AC9               	incf	_longPressFlag,f
  1472                           
  1473                           ;main.c: 567: return 2;
  1474  055F  0008               	return
  1475  0560                     L4:	
  1476                           ;main.c: 571: else
  1477                           ;main.c: 572: {
  1478                           ;main.c: 573: if(keyCount >= 100)
  1479                           
  1480  0560  024A               	subwf	_keyCount,w
  1481  0561  1C03               	skipc
  1482  0562  2D66               	goto	l2249
  1483                           
  1484                           ;main.c: 574: {
  1485                           ;main.c: 575: keyCount = 0;
  1486  0563  01CA               	clrf	_keyCount
  1487                           
  1488                           ;main.c: 576: longPressFlag = 0;
  1489  0564  01C9               	clrf	_longPressFlag
  1490                           
  1491                           ;main.c: 577: return 0;
  1492  0565  3400               	retlw	0
  1493  0566                     l2249:	
  1494                           
  1495                           ;main.c: 579: else if(keyCount >= 6)
  1496  0566  3006               	movlw	6
  1497  0567  024A               	subwf	_keyCount,w
  1498                           
  1499                           ;main.c: 580: {
  1500                           ;main.c: 581: keyCount = 0;
  1501  0568  01CA               	clrf	_keyCount
  1502  0569  1803               	btfsc	3,0
  1503                           
  1504                           ;main.c: 582: return 1;
  1505  056A  3401               	retlw	1
  1506  056B  3400               	retlw	0
  1507  056C                     __end_of_keyRead:	
  1508                           ;main.c: 583: }
  1509                           ;main.c: 584: keyCount = 0;
  1510                           
  1511                           
  1512                           	psect	text8
  1513  0018                     __ptext8:	
  1514 ;; *************** function _chrgCtr *****************
  1515 ;; Defined at:
  1516 ;;		line 408 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 100/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1
  1530 ;;      Params:         0       0       0
  1531 ;;      Locals:         0       0       0
  1532 ;;      Temps:          2       0       0
  1533 ;;      Totals:         2       0       0
  1534 ;;Total ram usage:        2 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    3
  1537 ;; This function calls:
  1538 ;;		_chrgPwmInit
  1539 ;;		_chrgPwmStop
  1540 ;;		_pwmStop
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _chrgCtr
  1548  0018                     _chrgCtr:	
  1549                           
  1550                           ;main.c: 410: if(PORTA & 0x02)
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _chrgCtr: [wreg+status,2+status,0+pclath+cstack]
  1554  0018  1683               	bsf	3,5	;RP0=1, select bank1
  1555  0019  1C86               	btfss	6,1	;volatile
  1556  001A  28DF               	goto	l2685
  1557                           
  1558                           ;main.c: 411: {
  1559                           ;main.c: 412: if(chrgFlag == 0)
  1560  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1561  001C  0851               	movf	_chrgFlag,w
  1562  001D  1D03               	btfss	3,2
  1563  001E  2823               	goto	l2575
  1564                           
  1565                           ;main.c: 413: {
  1566                           ;main.c: 414: chrgFlag = 1;
  1567  001F  01D1               	clrf	_chrgFlag
  1568  0020  0AD1               	incf	_chrgFlag,f
  1569                           
  1570                           ;main.c: 415: chrgMaxDuty = 0;
  1571  0021  01BA               	clrf	_chrgMaxDuty
  1572                           
  1573                           ;main.c: 416: chrgPwmStop();
  1574  0022  2642               	fcall	_chrgPwmStop
  1575  0023                     l2575:	
  1576                           
  1577                           ;main.c: 417: }
  1578                           ;main.c: 418: jrStep = 0;
  1579  0023  01B6               	clrf	_jrStep
  1580                           
  1581                           ;main.c: 419: workStep = 0;
  1582  0024  01FA               	clrf	_workStep
  1583                           
  1584                           ;main.c: 420: pwmStop();
  1585  0025  263B               	fcall	_pwmStop
  1586                           
  1587                           ;main.c: 421: lowBatFlag = 0;
  1588  0026  01B8               	clrf	_lowBatFlag
  1589                           
  1590                           ;main.c: 422: if(prePwStep < pwStep)
  1591  0027  0843               	movf	_pwStep,w
  1592  0028  0279               	subwf	_prePwStep,w
  1593  0029  1803               	skipnc
  1594  002A  2834               	goto	l2589
  1595                           
  1596                           ;main.c: 423: {
  1597                           ;main.c: 424: if(++count50s > 3000)
  1598  002B  20FD               	fcall	PL8	;call to abstracted procedure
  1599  002C  1903               	skipnz
  1600  002D  022A               	subwf	_count50s,w
  1601  002E  1C03               	skipc
  1602  002F  2836               	goto	l2591
  1603                           
  1604                           ;main.c: 425: {
  1605                           ;main.c: 426: count50s = 0;
  1606  0030  01AA               	clrf	_count50s
  1607  0031  01AB               	clrf	_count50s+1
  1608                           
  1609                           ;main.c: 427: prePwStep++;
  1610  0032  0AF9               	incf	_prePwStep,f
  1611  0033  2836               	goto	l2591
  1612  0034                     l2589:	
  1613                           
  1614                           ;main.c: 430: else
  1615                           ;main.c: 431: {
  1616                           ;main.c: 432: count50s = 0;
  1617  0034  01AA               	clrf	_count50s
  1618  0035  01AB               	clrf	_count50s+1
  1619  0036                     l2591:	
  1620                           
  1621                           ;main.c: 433: }
  1622                           ;main.c: 434: if(protectFlag)
  1623  0036  084D               	movf	_protectFlag,w
  1624  0037  1903               	btfsc	3,2
  1625  0038  284B               	goto	l2607
  1626                           
  1627                           ;main.c: 435: {
  1628                           ;main.c: 436: chrgPwmStop();
  1629  0039  2642               	fcall	_chrgPwmStop
  1630                           
  1631                           ;main.c: 437: if(prePwStep < 99 && protectFlag == 1)
  1632  003A  3063               	movlw	99
  1633  003B  0279               	subwf	_prePwStep,w
  1634  003C  1803               	skipnc
  1635  003D  2849               	goto	l2603
  1636  003E  0B4D               	decfsz	_protectFlag,w
  1637  003F  2849               	goto	l2603
  1638                           
  1639                           ;main.c: 438: {
  1640                           ;main.c: 439: if(++reChrgCount > 250)
  1641  0040  30FB               	movlw	251
  1642  0041  0AC2               	incf	_reChrgCount,f
  1643  0042  0242               	subwf	_reChrgCount,w
  1644  0043  1C03               	skipc
  1645  0044  0008               	return
  1646                           
  1647                           ;main.c: 440: {
  1648                           ;main.c: 441: reChrgCount = 0;
  1649  0045  01C2               	clrf	_reChrgCount
  1650                           
  1651                           ;main.c: 442: chrgFullFlag = 0;
  1652  0046  01D0               	clrf	_chrgFullFlag
  1653                           
  1654                           ;main.c: 443: protectFlag = 0;
  1655  0047  01CD               	clrf	_protectFlag
  1656  0048  0008               	return
  1657  0049                     l2603:	
  1658                           
  1659                           ;main.c: 446: else
  1660                           ;main.c: 447: {
  1661                           ;main.c: 448: reChrgCount = 0;
  1662  0049  01C2               	clrf	_reChrgCount
  1663  004A  0008               	return
  1664  004B                     l2607:	
  1665                           
  1666                           ;main.c: 451: }
  1667                           ;main.c: 452: if(batADValue < 1118)
  1668  004B  3004               	movlw	4
  1669  004C  0278               	subwf	_batADValue+1,w
  1670  004D  305E               	movlw	94
  1671  004E  1903               	skipnz
  1672  004F  0277               	subwf	_batADValue,w
  1673  0050  1803               	skipnc
  1674  0051  2855               	goto	l2613
  1675  0052  300F               	movlw	15
  1676                           
  1677                           ;main.c: 453: {
  1678                           ;main.c: 454: chrgMode = 0;
  1679  0053  01C0               	clrf	_chrgMode
  1680                           
  1681                           ;main.c: 455: chrgMaxAD = 15;
  1682  0054  286E               	goto	L5
  1683  0055                     l2613:	
  1684                           ;main.c: 456: }
  1685                           
  1686                           
  1687                           ;main.c: 457: else if(batADValue < 1530)
  1688  0055  3005               	movlw	5
  1689  0056  0278               	subwf	_batADValue+1,w
  1690  0057  30FA               	movlw	250
  1691  0058  1903               	skipnz
  1692  0059  0277               	subwf	_batADValue,w
  1693  005A  1803               	skipnc
  1694  005B  2862               	goto	l2621
  1695  005C  303C               	movlw	60
  1696                           
  1697                           ;main.c: 458: {
  1698                           ;main.c: 459: chrgMode = 1;
  1699  005D  01C0               	clrf	_chrgMode
  1700  005E  0AC0               	incf	_chrgMode,f
  1701                           
  1702                           ;main.c: 460: chrgMaxAD = 60;
  1703  005F  00BF               	movwf	_chrgMaxAD
  1704                           
  1705                           ;main.c: 461: lockCount = 0;
  1706  0060  01BE               	clrf	_lockCount
  1707                           
  1708                           ;main.c: 462: }
  1709  0061  286F               	goto	l2631
  1710  0062                     l2621:	
  1711                           
  1712                           ;main.c: 463: else if(count1s == 0)
  1713  0062  0853               	movf	_count1s,w
  1714  0063  1D03               	btfss	3,2
  1715  0064  286F               	goto	l2631
  1716                           
  1717                           ;main.c: 464: {
  1718                           ;main.c: 465: if(++lockCount > 200)
  1719  0065  30C9               	movlw	201
  1720  0066  0ABE               	incf	_lockCount,f
  1721  0067  023E               	subwf	_lockCount,w
  1722  0068  1C03               	skipc
  1723  0069  286D               	goto	l2629
  1724  006A  3002               	movlw	2
  1725                           
  1726                           ;main.c: 466: {
  1727                           ;main.c: 467: lockCount = 0;
  1728  006B  01BE               	clrf	_lockCount
  1729                           
  1730                           ;main.c: 468: chrgMode = 2;
  1731  006C  00C0               	movwf	_chrgMode
  1732  006D                     l2629:	
  1733                           
  1734                           ;main.c: 469: }
  1735                           ;main.c: 471: chrgMaxAD = 60;
  1736  006D  303C               	movlw	60
  1737  006E                     L5:	
  1738  006E  00BF               	movwf	_chrgMaxAD
  1739  006F                     l2631:	
  1740                           
  1741                           ;main.c: 472: }
  1742                           ;main.c: 473: if(chrgMode == 2 && outADValue < 8)
  1743  006F  3002               	movlw	2
  1744  0070  0640               	xorwf	_chrgMode,w
  1745  0071  1D03               	btfss	3,2
  1746  0072  2889               	goto	l2641
  1747  0073  3000               	movlw	0
  1748  0074  022D               	subwf	_outADValue+1,w
  1749  0075  3008               	movlw	8
  1750  0076  1903               	skipnz
  1751  0077  022C               	subwf	_outADValue,w
  1752  0078  1803               	skipnc
  1753  0079  2889               	goto	l2641
  1754                           
  1755                           ;main.c: 474: {
  1756                           ;main.c: 475: if(++fullCount >= 200)
  1757  007A  0AA8               	incf	_fullCount,f
  1758  007B  1903               	skipnz
  1759  007C  0AA9               	incf	_fullCount+1,f
  1760  007D  3000               	movlw	0
  1761  007E  0229               	subwf	_fullCount+1,w
  1762  007F  30C8               	movlw	200
  1763  0080  1903               	skipnz
  1764  0081  0228               	subwf	_fullCount,w
  1765  0082  1C03               	skipc
  1766  0083  288B               	goto	l2643
  1767                           
  1768                           ;main.c: 476: {
  1769                           ;main.c: 477: fullCount = 0;
  1770  0084  01A8               	clrf	_fullCount
  1771  0085  01A9               	clrf	_fullCount+1
  1772                           
  1773                           ;main.c: 478: chrgFullFlag = 1;
  1774  0086  01D0               	clrf	_chrgFullFlag
  1775  0087  0AD0               	incf	_chrgFullFlag,f
  1776  0088  288B               	goto	l2643
  1777  0089                     l2641:	
  1778                           
  1779                           ;main.c: 481: else
  1780                           ;main.c: 482: {
  1781                           ;main.c: 483: fullCount = 0;
  1782  0089  01A8               	clrf	_fullCount
  1783  008A  01A9               	clrf	_fullCount+1
  1784  008B                     l2643:	
  1785                           
  1786                           ;main.c: 484: }
  1787                           ;main.c: 485: if(chrgFullFlag)
  1788  008B  0850               	movf	_chrgFullFlag,w
  1789  008C  1903               	btfsc	3,2
  1790  008D  288F               	goto	l2647
  1791                           
  1792                           ;main.c: 486: {
  1793                           ;main.c: 487: chrgPwmStop();
  1794  008E  2E42               	ljmp	l2195
  1795  008F                     l2647:	
  1796                           ;main.c: 488: }
  1797                           
  1798                           
  1799                           ;main.c: 489: else
  1800                           ;main.c: 490: {
  1801                           ;main.c: 491: if(batADValue > 1550 || outADValue > (chrgMaxAD + 2))
  1802  008F  3006               	movlw	6
  1803  0090  0278               	subwf	_batADValue+1,w
  1804  0091  300F               	movlw	15
  1805  0092  1903               	skipnz
  1806  0093  0277               	subwf	_batADValue,w
  1807  0094  1803               	skipnc
  1808  0095  28A5               	goto	l2651
  1809  0096  083F               	movf	_chrgMaxAD,w
  1810  0097  3E02               	addlw	2
  1811  0098  00F3               	movwf	??_chrgCtr
  1812  0099  3000               	movlw	0
  1813  009A  1803               	skipnc
  1814  009B  3001               	movlw	1
  1815  009C  00F4               	movwf	??_chrgCtr+1
  1816  009D  082D               	movf	_outADValue+1,w
  1817  009E  0274               	subwf	??_chrgCtr+1,w
  1818  009F  1D03               	skipz
  1819  00A0  28A3               	goto	u2415
  1820  00A1  082C               	movf	_outADValue,w
  1821  00A2  0273               	subwf	??_chrgCtr,w
  1822  00A3                     u2415:	
  1823  00A3  1803               	skipnc
  1824  00A4  28B4               	goto	l2663
  1825  00A5                     l2651:	
  1826                           
  1827                           ;main.c: 492: {
  1828                           ;main.c: 493: if(++subTime > chrgWaitTime)
  1829  00A5  0ABC               	incf	_subTime,f
  1830  00A6  083C               	movf	_subTime,w
  1831  00A7  023B               	subwf	_chrgWaitTime,w
  1832  00A8  1803               	skipnc
  1833  00A9  28B2               	goto	l2661
  1834                           
  1835                           ;main.c: 494: {
  1836                           ;main.c: 495: if(chrgMaxDuty > 1)
  1837  00AA  3002               	movlw	2
  1838  00AB  023A               	subwf	_chrgMaxDuty,w
  1839  00AC  1C03               	skipc
  1840  00AD  28AF               	goto	l2657
  1841                           
  1842                           ;main.c: 496: {
  1843                           ;main.c: 497: chrgMaxDuty--;
  1844  00AE  03BA               	decf	_chrgMaxDuty,f
  1845  00AF                     l2657:	
  1846  00AF  3032               	movlw	50
  1847                           
  1848                           ;main.c: 498: }
  1849                           ;main.c: 499: subTime = 0;
  1850  00B0  01BC               	clrf	_subTime
  1851                           
  1852                           ;main.c: 500: chrgWaitTime = 50;
  1853  00B1  00BB               	movwf	_chrgWaitTime
  1854  00B2                     l2661:	
  1855                           
  1856                           ;main.c: 501: }
  1857                           ;main.c: 502: addTime = 0;
  1858  00B2  01BD               	clrf	_addTime
  1859                           
  1860                           ;main.c: 503: }
  1861  00B3  28D4               	goto	l2677
  1862  00B4                     l2663:	
  1863                           
  1864                           ;main.c: 504: else if(batADValue < 1550 && outADValue < (chrgMaxAD - 4))
  1865  00B4  3006               	movlw	6
  1866  00B5  0278               	subwf	_batADValue+1,w
  1867  00B6  300E               	movlw	14
  1868  00B7  1903               	skipnz
  1869  00B8  0277               	subwf	_batADValue,w
  1870  00B9  1803               	skipnc
  1871  00BA  28D4               	goto	l2677
  1872  00BB  083F               	movf	_chrgMaxAD,w
  1873  00BC  3EFC               	addlw	252
  1874  00BD  00F3               	movwf	??_chrgCtr
  1875  00BE  30FF               	movlw	255
  1876  00BF  1803               	skipnc
  1877  00C0  3000               	movlw	0
  1878  00C1  00F4               	movwf	??_chrgCtr+1
  1879  00C2  022D               	subwf	_outADValue+1,w
  1880  00C3  1D03               	skipz
  1881  00C4  28C7               	goto	u2455
  1882  00C5  0873               	movf	??_chrgCtr,w
  1883  00C6  022C               	subwf	_outADValue,w
  1884  00C7                     u2455:	
  1885  00C7  1803               	skipnc
  1886  00C8  28D4               	goto	l2677
  1887                           
  1888                           ;main.c: 505: {
  1889                           ;main.c: 506: if(++addTime > chrgWaitTime)
  1890  00C9  0ABD               	incf	_addTime,f
  1891  00CA  083D               	movf	_addTime,w
  1892  00CB  023B               	subwf	_chrgWaitTime,w
  1893  00CC  1803               	skipnc
  1894  00CD  28D3               	goto	l2675
  1895  00CE  304B               	movlw	75
  1896                           
  1897                           ;main.c: 507: {
  1898                           ;main.c: 508: addTime = 0;
  1899  00CF  01BD               	clrf	_addTime
  1900                           
  1901                           ;main.c: 509: if(chrgMaxDuty < 75)
  1902  00D0  023A               	subwf	_chrgMaxDuty,w
  1903  00D1  1C03               	btfss	3,0
  1904                           
  1905                           ;main.c: 510: {
  1906                           ;main.c: 511: chrgMaxDuty++;
  1907  00D2  0ABA               	incf	_chrgMaxDuty,f
  1908  00D3                     l2675:	
  1909                           
  1910                           ;main.c: 512: }
  1911                           ;main.c: 513: }
  1912                           ;main.c: 514: subTime = 0;
  1913  00D3  01BC               	clrf	_subTime
  1914  00D4                     l2677:	
  1915                           
  1916                           ;main.c: 515: }
  1917                           ;main.c: 518: if(chrgPwmFlag == 0)
  1918  00D4  0835               	movf	_chrgPwmFlag,w
  1919  00D5  1D03               	btfss	3,2
  1920  00D6  28D8               	goto	l2681
  1921                           
  1922                           ;main.c: 519: {
  1923                           ;main.c: 520: chrgPwmInit();
  1924  00D7  25EE               	fcall	_chrgPwmInit
  1925  00D8                     l2681:	
  1926                           
  1927                           ;main.c: 521: }
  1928                           ;main.c: 522: PWMD23H = 0X00;
  1929  00D8  1683               	bsf	3,5	;RP0=1, select bank1
  1930  00D9  019E               	clrf	30	;volatile
  1931                           
  1932                           ;main.c: 523: PWMD2L = chrgMaxDuty;
  1933  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  1934  00DB  083A               	movf	_chrgMaxDuty,w
  1935  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  1936  00DD  009B               	movwf	27	;volatile
  1937  00DE  0008               	return
  1938  00DF                     l2685:	
  1939  00DF  3014               	movlw	20
  1940                           
  1941                           ;main.c: 529: chrgFlag = 0;
  1942  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1943  00E1  01D1               	clrf	_chrgFlag
  1944                           
  1945                           ;main.c: 530: chrgFullFlag = 0;
  1946  00E2  01D0               	clrf	_chrgFullFlag
  1947                           
  1948                           ;main.c: 531: protectFlag = 0;
  1949  00E3  01CD               	clrf	_protectFlag
  1950                           
  1951                           ;main.c: 532: chrgMode = 0;
  1952  00E4  01C0               	clrf	_chrgMode
  1953                           
  1954                           ;main.c: 533: chrgMaxAD = 0;
  1955  00E5  01BF               	clrf	_chrgMaxAD
  1956                           
  1957                           ;main.c: 534: chrgMaxDuty = 0;
  1958  00E6  01BA               	clrf	_chrgMaxDuty
  1959                           
  1960                           ;main.c: 536: lockLedStep = 0;
  1961  00E7  01BE               	clrf	_lockCount
  1962                           
  1963                           ;main.c: 537: chrgWaitTime = 20;
  1964  00E8  00BB               	movwf	_chrgWaitTime
  1965                           
  1966                           ;main.c: 538: chrgPwmStop();
  1967  00E9  2642               	fcall	_chrgPwmStop
  1968                           
  1969                           ;main.c: 539: if(prePwStep > 0 && prePwStep > pwStep)
  1970  00EA  0879               	movf	_prePwStep,w
  1971  00EB  1903               	btfsc	3,2
  1972  00EC  28FA               	goto	l2701
  1973  00ED  0879               	movf	_prePwStep,w
  1974  00EE  0243               	subwf	_pwStep,w
  1975  00EF  1803               	skipnc
  1976  00F0  28FA               	goto	l2701
  1977                           
  1978                           ;main.c: 540: {
  1979                           ;main.c: 541: if(++count50s > 3000)
  1980  00F1  20FD               	fcall	PL8	;call to abstracted procedure
  1981  00F2  1903               	skipnz
  1982  00F3  022A               	subwf	_count50s,w
  1983  00F4  1C03               	skipc
  1984  00F5  0008               	return
  1985                           
  1986                           ;main.c: 542: {
  1987                           ;main.c: 543: count50s = 0;
  1988  00F6  01AA               	clrf	_count50s
  1989  00F7  01AB               	clrf	_count50s+1
  1990                           
  1991                           ;main.c: 544: prePwStep--;
  1992  00F8  03F9               	decf	_prePwStep,f
  1993  00F9  0008               	return
  1994  00FA                     l2701:	
  1995                           
  1996                           ;main.c: 547: else
  1997                           ;main.c: 548: {
  1998                           ;main.c: 549: count50s = 0;
  1999  00FA  01AA               	clrf	_count50s
  2000  00FB  01AB               	clrf	_count50s+1
  2001  00FC  0008               	return
  2002  00FD                     __end_of_chrgCtr:	
  2003  00FD                     PL8:	
  2004  00FD  0AAA               	incf	_count50s,f
  2005  00FE  1903               	skipnz
  2006  00FF  0AAB               	incf	_count50s+1,f
  2007  0100  300B               	movlw	11
  2008  0101  022B               	subwf	_count50s+1,w
  2009  0102  34B9               	retlw	185
  2010  0103                     __end_ofPL8:	
  2011                           
  2012                           	psect	text9
  2013  063B                     __ptext9:	
  2014 ;; *************** function _pwmStop *****************
  2015 ;; Defined at:
  2016 ;;		line 1047 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;		None
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 100/0
  2027 ;;		On exit  : 100/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1
  2030 ;;      Params:         0       0       0
  2031 ;;      Locals:         0       0       0
  2032 ;;      Temps:          0       0       0
  2033 ;;      Totals:         0       0       0
  2034 ;;Total ram usage:        0 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    2
  2037 ;; This function calls:
  2038 ;;		Nothing
  2039 ;; This function is called by:
  2040 ;;		_chrgCtr
  2041 ;;		_workCtr
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           
  2046                           ;psect for function _pwmStop
  2047  063B                     _pwmStop:	
  2048                           
  2049                           ;main.c: 1049: if(motorPwmFlag)
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in _pwmStop: [wreg+status,2+status,0]
  2053  063B  0834               	movf	_motorPwmFlag,w
  2054  063C  1903               	btfsc	3,2
  2055  063D  0008               	return
  2056                           
  2057                           ;main.c: 1050: {
  2058                           ;main.c: 1051: motorPwmFlag = 0;
  2059  063E  01B4               	clrf	_motorPwmFlag
  2060                           
  2061                           ;main.c: 1052: PWMCON0 &= 0XF7;
  2062  063F  1195               	bcf	21,3	;volatile
  2063                           
  2064                           ;main.c: 1053: RB4 = 0;
  2065  0640  1206               	bcf	6,4	;volatile
  2066  0641  0008               	return
  2067  0642                     __end_of_pwmStop:	
  2068                           
  2069                           	psect	text10
  2070  0642                     __ptext10:	
  2071 ;; *************** function _chrgPwmStop *****************
  2072 ;; Defined at:
  2073 ;;		line 1021 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 100/0
  2084 ;;		On exit  : 100/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1
  2087 ;;      Params:         0       0       0
  2088 ;;      Locals:         0       0       0
  2089 ;;      Temps:          0       0       0
  2090 ;;      Totals:         0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    2
  2094 ;; This function calls:
  2095 ;;		Nothing
  2096 ;; This function is called by:
  2097 ;;		_chrgCtr
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           
  2102                           ;psect for function _chrgPwmStop
  2103  0642                     _chrgPwmStop:	
  2104  0642                     l2195:	
  2105                           ;incstack = 0
  2106                           ; Regs used in _chrgPwmStop: [wreg+status,2+status,0]
  2107                           
  2108                           
  2109                           ;main.c: 1023: if(chrgPwmFlag)
  2110  0642  0835               	movf	_chrgPwmFlag,w
  2111  0643  1903               	btfsc	3,2
  2112  0644  0008               	return
  2113                           
  2114                           ;main.c: 1024: {
  2115                           ;main.c: 1025: chrgPwmFlag = 0;
  2116  0645  01B5               	clrf	_chrgPwmFlag
  2117                           
  2118                           ;main.c: 1026: PWMCON0 &= 0xFB;
  2119  0646  1115               	bcf	21,2	;volatile
  2120                           
  2121                           ;main.c: 1027: RB3 = 0;
  2122  0647  1186               	bcf	6,3	;volatile
  2123  0648  0008               	return
  2124  0649                     __end_of_chrgPwmStop:	
  2125                           
  2126                           	psect	text11
  2127  05EE                     __ptext11:	
  2128 ;; *************** function _chrgPwmInit *****************
  2129 ;; Defined at:
  2130 ;;		line 1003 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;		None
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;		None
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2
  2139 ;; Tracked objects:
  2140 ;;		On entry : 100/0
  2141 ;;		On exit  : 100/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1
  2144 ;;      Params:         0       0       0
  2145 ;;      Locals:         0       0       0
  2146 ;;      Temps:          0       0       0
  2147 ;;      Totals:         0       0       0
  2148 ;;Total ram usage:        0 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    2
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_chrgCtr
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _chrgPwmInit
  2160  05EE                     _chrgPwmInit:	
  2161                           
  2162                           ;main.c: 1005: chrgPwmFlag = 1;
  2163                           
  2164                           ;incstack = 0
  2165                           ; Regs used in _chrgPwmInit: [wreg+status,2]
  2166  05EE  01B5               	clrf	_chrgPwmFlag
  2167  05EF  0AB5               	incf	_chrgPwmFlag,f
  2168                           
  2169                           ;main.c: 1006: PWMCON1 = 0B00000000;
  2170  05F0  0196               	clrf	22	;volatile
  2171                           
  2172                           ;main.c: 1008: PWMTH = 0X00;
  2173  05F1  0198               	clrf	24	;volatile
  2174                           
  2175                           ;main.c: 1009: PWMTL = 100;
  2176  05F2  3064               	movlw	100
  2177  05F3  0097               	movwf	23	;volatile
  2178                           
  2179                           ;main.c: 1013: PWMD23H = 0;
  2180  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  2181  05F5  019E               	clrf	30	;volatile
  2182                           
  2183                           ;main.c: 1014: PWMD2L = 10;
  2184  05F6  300A               	movlw	10
  2185  05F7  009B               	movwf	27	;volatile
  2186                           
  2187                           ;main.c: 1015: PWM23DT = 0X00;
  2188  05F8  019D               	clrf	29	;volatile
  2189                           
  2190                           ;main.c: 1017: PWMCON0 = 0X04;
  2191  05F9  3004               	movlw	4
  2192                           
  2193                           ;main.c: 1018: PWMCON2 =0X00;
  2194  05FA  2DFB               	ljmp	PL12	;call to abstracted procedure
  2195  05FB                     __end_of_chrgPwmInit:	
  2196  05FB                     PL12:	
  2197  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2198  05FC  0095               	movwf	21	;volatile
  2199  05FD  019D               	clrf	29	;volatile
  2200  05FE  0008               	return
  2201  05FF                     __end_ofPL12:	
  2202                           
  2203                           	psect	text12
  2204  02A9                     __ptext12:	
  2205 ;; *************** function _checkOutA *****************
  2206 ;; Defined at:
  2207 ;;		line 707 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;		None
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  maxAout         1   20[BANK0 ] unsigned char 
  2212 ;;  maxtempV        1   19[BANK0 ] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  1    wreg      void 
  2215 ;; Registers used:
  2216 ;;		wreg, status,2, status,0, pclath, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 100/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMMON   BANK0   BANK1
  2222 ;;      Params:         0       0       0
  2223 ;;      Locals:         0       2       0
  2224 ;;      Temps:          0       2       0
  2225 ;;      Totals:         0       4       0
  2226 ;;Total ram usage:        4 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    3
  2229 ;; This function calls:
  2230 ;;		_ADC_Sample
  2231 ;;		___bmul
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _checkOutA
  2239  02A9                     _checkOutA:	
  2240                           
  2241                           ;main.c: 709: test_adc = ADC_Sample(0, 5);
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _checkOutA: [wreg+status,2+status,0+pclath+cstack]
  2245  02A9  3005               	movlw	5
  2246  02AA  00F3               	movwf	ADC_Sample@adldo
  2247  02AB  3000               	movlw	0
  2248  02AC  2103               	fcall	_ADC_Sample
  2249  02AD  00D5               	movwf	_test_adc	;volatile
  2250                           
  2251                           ;main.c: 710: if (0xA5 == test_adc)
  2252  02AE  30A5               	movlw	165
  2253  02AF  0655               	xorwf	_test_adc,w	;volatile
  2254  02B0  1D03               	btfss	3,2
  2255  02B1  2B57               	goto	l3193
  2256                           
  2257                           ;main.c: 711: {
  2258                           ;main.c: 712: if(chrgFlag && adresult > 210)
  2259  02B2  0851               	movf	_chrgFlag,w
  2260  02B3  1903               	btfsc	3,2
  2261  02B4  2AC5               	goto	l3109
  2262  02B5  3000               	movlw	0
  2263  02B6  0233               	subwf	_adresult+1,w	;volatile
  2264  02B7  30D3               	movlw	211
  2265  02B8  1903               	skipnz
  2266  02B9  0232               	subwf	_adresult,w	;volatile
  2267  02BA  1C03               	skipc
  2268  02BB  2AC5               	goto	l3109
  2269                           
  2270                           ;main.c: 713: {
  2271                           ;main.c: 714: if(++overChrgTime > 10)
  2272  02BC  300B               	movlw	11
  2273  02BD  0AC4               	incf	_overChrgTime,f
  2274  02BE  0244               	subwf	_overChrgTime,w
  2275  02BF  1C03               	skipc
  2276  02C0  2AC6               	goto	l3111
  2277  02C1  3002               	movlw	2
  2278                           
  2279                           ;main.c: 715: {
  2280                           ;main.c: 716: overChrgTime = 0;
  2281  02C2  01C4               	clrf	_overChrgTime
  2282                           
  2283                           ;main.c: 717: protectFlag = 2;
  2284  02C3  00CD               	movwf	_protectFlag
  2285  02C4  2AC6               	goto	l3111
  2286  02C5                     l3109:	
  2287                           
  2288                           ;main.c: 721: else
  2289                           ;main.c: 722: {
  2290                           ;main.c: 723: overChrgTime = 0;
  2291  02C5  01C4               	clrf	_overChrgTime
  2292  02C6                     l3111:	
  2293                           
  2294                           ;main.c: 724: }
  2295                           ;main.c: 725: outADValue = adresult;
  2296  02C6  0833               	movf	_adresult+1,w	;volatile
  2297  02C7  00AD               	movwf	_outADValue+1
  2298  02C8  0832               	movf	_adresult,w	;volatile
  2299  02C9  00AC               	movwf	_outADValue
  2300                           
  2301                           ;main.c: 727: if(workStep && (outADValue > 600))
  2302  02CA  087A               	movf	_workStep,w
  2303  02CB  1903               	btfsc	3,2
  2304  02CC  2ADC               	goto	l3121
  2305  02CD  3002               	movlw	2
  2306  02CE  022D               	subwf	_outADValue+1,w
  2307  02CF  3059               	movlw	89
  2308  02D0  1903               	skipnz
  2309  02D1  022C               	subwf	_outADValue,w
  2310  02D2  1C03               	skipc
  2311  02D3  2ADC               	goto	l3121
  2312                           
  2313                           ;main.c: 728: {
  2314                           ;main.c: 729: if(++workOverOutTime > 50)
  2315  02D4  3033               	movlw	51
  2316  02D5  0ACC               	incf	_workOverOutTime,f
  2317  02D6  024C               	subwf	_workOverOutTime,w
  2318  02D7  1C03               	skipc
  2319  02D8  2ADD               	goto	l3123
  2320                           
  2321                           ;main.c: 730: {
  2322                           ;main.c: 731: workOverOutTime = 0;
  2323  02D9  01CC               	clrf	_workOverOutTime
  2324                           
  2325                           ;main.c: 732: workStep = 0;
  2326  02DA  01FA               	clrf	_workStep
  2327  02DB  2ADD               	goto	l3123
  2328  02DC                     l3121:	
  2329                           
  2330                           ;main.c: 735: else
  2331                           ;main.c: 736: {
  2332                           ;main.c: 737: workOverOutTime = 0;
  2333  02DC  01CC               	clrf	_workOverOutTime
  2334  02DD                     l3123:	
  2335                           
  2336                           ;main.c: 738: }
  2337                           ;main.c: 739: unsigned char maxtempV = 130 + (workStep * 10);
  2338  02DD  300A               	movlw	10
  2339  02DE  00F3               	movwf	___bmul@multiplicand
  2340  02DF  087A               	movf	_workStep,w
  2341  02E0  2610               	fcall	___bmul
  2342  02E1  3E82               	addlw	130
  2343  02E2  00E9               	movwf	checkOutA@maxtempV
  2344                           
  2345                           ;main.c: 740: if(jrStep > 0)
  2346  02E3  0836               	movf	_jrStep,w
  2347  02E4  1903               	btfsc	3,2
  2348  02E5  2AEE               	goto	l3133
  2349                           
  2350                           ;main.c: 741: {
  2351                           ;main.c: 742: maxtempV = maxtempV - 40;
  2352  02E6  30D8               	movlw	216
  2353  02E7  07E9               	addwf	checkOutA@maxtempV,f
  2354                           
  2355                           ;main.c: 743: if(workStep < 5)
  2356  02E8  3005               	movlw	5
  2357  02E9  027A               	subwf	_workStep,w
  2358  02EA  1803               	skipnc
  2359  02EB  2AEE               	goto	l3133
  2360                           
  2361                           ;main.c: 744: {
  2362                           ;main.c: 745: maxtempV = maxtempV - 30;
  2363  02EC  30E2               	movlw	226
  2364  02ED  07E9               	addwf	checkOutA@maxtempV,f
  2365  02EE                     l3133:	
  2366                           
  2367                           ;main.c: 746: }
  2368                           ;main.c: 747: }
  2369                           ;main.c: 748: if(outADValue > maxtempV)
  2370  02EE  0869               	movf	checkOutA@maxtempV,w
  2371  02EF  00E7               	movwf	??_checkOutA
  2372  02F0  01E8               	clrf	??_checkOutA+1
  2373  02F1  082D               	movf	_outADValue+1,w
  2374  02F2  0268               	subwf	??_checkOutA+1,w
  2375  02F3  1D03               	skipz
  2376  02F4  2AF7               	goto	u3305
  2377  02F5  082C               	movf	_outADValue,w
  2378  02F6  0267               	subwf	??_checkOutA,w
  2379  02F7                     u3305:	
  2380  02F7  1803               	skipnc
  2381  02F8  2B01               	goto	l3139
  2382                           
  2383                           ;main.c: 749: {
  2384                           ;main.c: 750: if(++overCount > 5)
  2385  02F9  3006               	movlw	6
  2386  02FA  0AC7               	incf	_overCount,f
  2387  02FB  0247               	subwf	_overCount,w
  2388  02FC  1C03               	skipc
  2389  02FD  2B50               	goto	l3189
  2390                           
  2391                           ;main.c: 751: {
  2392                           ;main.c: 752: overCount = 5;
  2393  02FE  3005               	movlw	5
  2394  02FF  00C7               	movwf	_overCount
  2395  0300  2B50               	goto	l3189
  2396  0301                     l3139:	
  2397                           
  2398                           ;main.c: 755: else
  2399                           ;main.c: 756: {
  2400                           ;main.c: 758: if(overCount > 0)
  2401  0301  0847               	movf	_overCount,w
  2402  0302  1903               	btfsc	3,2
  2403  0303  2B05               	goto	l3143
  2404                           
  2405                           ;main.c: 759: {
  2406                           ;main.c: 760: overCount--;
  2407  0304  03C7               	decf	_overCount,f
  2408  0305                     l3143:	
  2409                           
  2410                           ;main.c: 761: }
  2411                           ;main.c: 762: unsigned char maxAout = 20;
  2412  0305  3014               	movlw	20
  2413  0306  00EA               	movwf	checkOutA@maxAout
  2414                           
  2415                           ;main.c: 763: if(pwStep > 3)
  2416  0307  3004               	movlw	4
  2417  0308  0243               	subwf	_pwStep,w
  2418  0309  1C03               	skipc
  2419  030A  2B0D               	goto	l853
  2420                           
  2421                           ;main.c: 764: maxAout = 22;
  2422  030B  3016               	movlw	22
  2423  030C  00EA               	movwf	checkOutA@maxAout
  2424  030D                     l853:	
  2425                           
  2426                           ;main.c: 765: if(workStep < 5)
  2427  030D  3005               	movlw	5
  2428  030E  027A               	subwf	_workStep,w
  2429  030F  1803               	skipnc
  2430  0310  2B13               	goto	l3151
  2431                           
  2432                           ;main.c: 766: {
  2433                           ;main.c: 767: maxAout = maxAout - 1;
  2434  0311  30FF               	movlw	255
  2435  0312  2B3C               	goto	L12
  2436  0313                     l3151:	
  2437                           ;main.c: 768: }
  2438                           
  2439                           
  2440                           ;main.c: 769: else if(workStep < 9)
  2441  0313  3009               	movlw	9
  2442  0314  027A               	subwf	_workStep,w
  2443  0315  1803               	skipnc
  2444  0316  2B19               	goto	l3155
  2445                           
  2446                           ;main.c: 770: {
  2447                           ;main.c: 771: maxAout = maxAout + 3;
  2448  0317  3003               	movlw	3
  2449  0318  2B3C               	goto	L12
  2450  0319                     l3155:	
  2451                           ;main.c: 772: }
  2452                           
  2453                           
  2454                           ;main.c: 773: else if(workStep < 13)
  2455  0319  300D               	movlw	13
  2456  031A  027A               	subwf	_workStep,w
  2457  031B  1803               	skipnc
  2458  031C  2B1F               	goto	l3159
  2459                           
  2460                           ;main.c: 774: {
  2461                           ;main.c: 775: maxAout = maxAout + 6;
  2462  031D  3006               	movlw	6
  2463  031E  2B3C               	goto	L12
  2464  031F                     l3159:	
  2465                           ;main.c: 776: }
  2466                           
  2467                           
  2468                           ;main.c: 777: else if(workStep < 17)
  2469  031F  3011               	movlw	17
  2470  0320  027A               	subwf	_workStep,w
  2471  0321  1803               	skipnc
  2472  0322  2B25               	goto	l3163
  2473                           
  2474                           ;main.c: 778: {
  2475                           ;main.c: 779: maxAout = maxAout + 8;
  2476  0323  3008               	movlw	8
  2477  0324  2B3C               	goto	L12
  2478  0325                     l3163:	
  2479                           ;main.c: 780: }
  2480                           
  2481                           
  2482                           ;main.c: 781: else if(workStep < 21)
  2483  0325  3015               	movlw	21
  2484  0326  027A               	subwf	_workStep,w
  2485  0327  1803               	skipnc
  2486  0328  2B2B               	goto	l3167
  2487                           
  2488                           ;main.c: 782: {
  2489                           ;main.c: 783: maxAout = maxAout + 9;
  2490  0329  3009               	movlw	9
  2491  032A  2B3C               	goto	L12
  2492  032B                     l3167:	
  2493                           ;main.c: 784: }
  2494                           
  2495                           
  2496                           ;main.c: 785: else if(workStep < 25)
  2497  032B  3019               	movlw	25
  2498  032C  027A               	subwf	_workStep,w
  2499  032D  1803               	skipnc
  2500  032E  2B31               	goto	l3171
  2501                           
  2502                           ;main.c: 786: {
  2503                           ;main.c: 787: maxAout = maxAout + 10;
  2504  032F  300A               	movlw	10
  2505  0330  2B3C               	goto	L12
  2506  0331                     l3171:	
  2507                           ;main.c: 788: }
  2508                           
  2509                           
  2510                           ;main.c: 789: else if(workStep < 29)
  2511  0331  301D               	movlw	29
  2512  0332  027A               	subwf	_workStep,w
  2513  0333  1803               	skipnc
  2514  0334  2B37               	goto	l3175
  2515                           
  2516                           ;main.c: 790: {
  2517                           ;main.c: 791: maxAout = maxAout + 11;
  2518  0335  300B               	movlw	11
  2519  0336  2B3C               	goto	L12
  2520  0337                     l3175:	
  2521                           ;main.c: 792: }
  2522                           
  2523                           
  2524                           ;main.c: 793: else if(workStep < 33)
  2525  0337  3021               	movlw	33
  2526  0338  027A               	subwf	_workStep,w
  2527  0339  1803               	skipnc
  2528  033A  2B3D               	goto	l3179
  2529                           
  2530                           ;main.c: 794: {
  2531                           ;main.c: 795: maxAout = maxAout + 12;
  2532  033B  300C               	movlw	12
  2533  033C                     L12:	
  2534  033C  07EA               	addwf	checkOutA@maxAout,f
  2535  033D                     l3179:	
  2536                           
  2537                           ;main.c: 796: }
  2538                           ;main.c: 797: if(outADValue > maxAout)
  2539  033D  086A               	movf	checkOutA@maxAout,w
  2540  033E  00E7               	movwf	??_checkOutA
  2541  033F  01E8               	clrf	??_checkOutA+1
  2542  0340  082D               	movf	_outADValue+1,w
  2543  0341  0268               	subwf	??_checkOutA+1,w
  2544  0342  1D03               	skipz
  2545  0343  2B46               	goto	u3425
  2546  0344  082C               	movf	_outADValue,w
  2547  0345  0267               	subwf	??_checkOutA,w
  2548  0346                     u3425:	
  2549  0346  1803               	skipnc
  2550  0347  2B4E               	goto	l3185
  2551                           
  2552                           ;main.c: 798: {
  2553                           ;main.c: 799: if(startTime == 0)
  2554  0348  0845               	movf	_startTime,w
  2555  0349  1D03               	btfss	3,2
  2556  034A  2B4E               	goto	l3185
  2557                           
  2558                           ;main.c: 800: {
  2559                           ;main.c: 801: tempDuty = 167 + workStep;
  2560  034B  087A               	movf	_workStep,w
  2561  034C  3EA7               	addlw	167
  2562  034D  2B4F               	goto	L13
  2563  034E                     l3185:	
  2564                           ;main.c: 802: }
  2565                           
  2566                           
  2567                           ;main.c: 803: else
  2568                           ;main.c: 804: {
  2569                           ;main.c: 805: tempDuty = maxDuty;
  2570  034E  0848               	movf	_maxDuty,w
  2571  034F                     L13:	
  2572  034F  00C6               	movwf	_tempDuty
  2573  0350                     l3189:	
  2574                           
  2575                           ;main.c: 811: }
  2576                           ;main.c: 813: }
  2577                           ;main.c: 814: PWMD23H = 0X00;
  2578  0350  1683               	bsf	3,5	;RP0=1, select bank1
  2579  0351  019E               	clrf	30	;volatile
  2580                           
  2581                           ;main.c: 815: PWMD3L = tempDuty;
  2582  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0353  0846               	movf	_tempDuty,w
  2584  0354  1683               	bsf	3,5	;RP0=1, select bank1
  2585  0355  009C               	movwf	28	;volatile
  2586                           
  2587                           ;main.c: 816: }
  2588  0356  0008               	return
  2589  0357                     l3193:	
  2590                           
  2591                           ;main.c: 817: else
  2592                           ;main.c: 818: {
  2593                           ;main.c: 819: ADCON0 = 0;
  2594  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2595  0358  0195               	clrf	21	;volatile
  2596                           
  2597                           ;main.c: 820: ADCON1 = 0;
  2598  0359  0196               	clrf	22	;volatile
  2599                           
  2600                           ;main.c: 821: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2601  035A  3084               	movlw	132
  2602  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2603  035C  00E7               	movwf	??_checkOutA
  2604  035D                     u3767:	
  2605  035D  0BE7               	decfsz	??_checkOutA,f
  2606  035E  2B5D               	goto	u3767
  2607  035F  2B60               	nop2
  2608  0360  0008               	return
  2609  0361                     __end_of_checkOutA:	
  2610                           
  2611                           	psect	text13
  2612  0610                     __ptext13:	
  2613 ;; *************** function ___bmul *****************
  2614 ;; Defined at:
  2615 ;;		line 4 in file "C:\mcuproject\scm\SCMCU_IDE_V2.00.16_Beta5\SCMCU_IDE_V2.00.16_Beta5\data\sources\common\Umul8.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  multiplier      1    wreg     unsigned char 
  2618 ;;  multiplicand    1    3[COMMON] unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  multiplier      1    5[COMMON] unsigned char 
  2621 ;;  product         1    4[COMMON] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      unsigned char 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0
  2626 ;; Tracked objects:
  2627 ;;		On entry : 100/0
  2628 ;;		On exit  : 100/0
  2629 ;;		Unchanged: 100/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1
  2631 ;;      Params:         1       0       0
  2632 ;;      Locals:         2       0       0
  2633 ;;      Temps:          0       0       0
  2634 ;;      Totals:         3       0       0
  2635 ;;Total ram usage:        3 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    2
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_checkOutA
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function ___bmul
  2647  0610                     ___bmul:	
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2651                           ;___bmul@multiplier stored from wreg
  2652  0610  00F5               	movwf	___bmul@multiplier
  2653  0611  01F4               	clrf	___bmul@product
  2654  0612                     l2349:	
  2655  0612  0873               	movf	___bmul@multiplicand,w
  2656  0613  1875               	btfsc	___bmul@multiplier,0
  2657  0614  07F4               	addwf	___bmul@product,f
  2658  0615  1003               	clrc
  2659  0616  0DF3               	rlf	___bmul@multiplicand,f
  2660  0617  1003               	clrc
  2661  0618  0CF5               	rrf	___bmul@multiplier,f
  2662  0619  0875               	movf	___bmul@multiplier,w
  2663  061A  1D03               	btfss	3,2
  2664  061B  2E12               	goto	l2349
  2665  061C  0874               	movf	___bmul@product,w
  2666  061D  0008               	return
  2667  061E                     __end_of___bmul:	
  2668                           
  2669                           	psect	text14
  2670  0361                     __ptext14:	
  2671 ;; *************** function _checkBatAD *****************
  2672 ;; Defined at:
  2673 ;;		line 825 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1
  2687 ;;      Params:         0       0       0
  2688 ;;      Locals:         0       0       0
  2689 ;;      Temps:          2       0       0
  2690 ;;      Totals:         2       0       0
  2691 ;;Total ram usage:        2 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    3
  2694 ;; This function calls:
  2695 ;;		_ADC_Sample
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _checkBatAD
  2703  0361                     _checkBatAD:	
  2704                           
  2705                           ;main.c: 827: test_adc = ADC_Sample(2, 5);
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _checkBatAD: [wreg+status,2+status,0+pclath+cstack]
  2709  0361  3005               	movlw	5
  2710  0362  00F3               	movwf	ADC_Sample@adldo
  2711  0363  3002               	movlw	2
  2712  0364  2103               	fcall	_ADC_Sample
  2713  0365  00D5               	movwf	_test_adc	;volatile
  2714                           
  2715                           ;main.c: 828: if (0xA5 == test_adc)
  2716  0366  30A5               	movlw	165
  2717  0367  0655               	xorwf	_test_adc,w	;volatile
  2718  0368  1D03               	btfss	3,2
  2719  0369  2BC2               	goto	l3229
  2720                           
  2721                           ;main.c: 829: {
  2722                           ;main.c: 830: batADValue = adresult;
  2723  036A  0833               	movf	_adresult+1,w	;volatile
  2724  036B  00F8               	movwf	_batADValue+1
  2725  036C  0832               	movf	_adresult,w	;volatile
  2726  036D  00F7               	movwf	_batADValue
  2727                           
  2728                           ;main.c: 831: if(batADValue < 1117)
  2729  036E  3004               	movlw	4
  2730  036F  0278               	subwf	_batADValue+1,w
  2731  0370  305D               	movlw	93
  2732  0371  1903               	skipnz
  2733  0372  0277               	subwf	_batADValue,w
  2734  0373  1803               	skipnc
  2735  0374  2B88               	goto	l3211
  2736                           
  2737                           ;main.c: 832: {
  2738                           ;main.c: 833: pwStep = 0;
  2739  0375  01C3               	clrf	_pwStep
  2740                           
  2741                           ;main.c: 834: if(++count8s > 800)
  2742  0376  0AA2               	incf	_count8s,f
  2743  0377  1903               	skipnz
  2744  0378  0AA3               	incf	_count8s+1,f
  2745  0379  3003               	movlw	3
  2746  037A  0223               	subwf	_count8s+1,w
  2747  037B  3021               	movlw	33
  2748  037C  1903               	skipnz
  2749  037D  0222               	subwf	_count8s,w
  2750  037E  1C03               	skipc
  2751  037F  2BB5               	goto	l3223
  2752                           
  2753                           ;main.c: 835: {
  2754                           ;main.c: 836: count8s = 0;
  2755  0380  01A2               	clrf	_count8s
  2756  0381  01A3               	clrf	_count8s+1
  2757                           
  2758                           ;main.c: 837: lowBatFlag = 1;
  2759  0382  01B8               	clrf	_lowBatFlag
  2760  0383  0AB8               	incf	_lowBatFlag,f
  2761                           
  2762                           ;main.c: 838: prePwStep = 0;
  2763  0384  01F9               	clrf	_prePwStep
  2764                           
  2765                           ;main.c: 839: workStep = 0;
  2766  0385  01FA               	clrf	_workStep
  2767                           
  2768                           ;main.c: 840: jrStep = 0;
  2769  0386  01B6               	clrf	_jrStep
  2770  0387  2BB5               	goto	l3223
  2771  0388                     l3211:	
  2772  0388  3005               	movlw	5
  2773                           
  2774                           ;main.c: 843: else
  2775                           ;main.c: 844: {
  2776                           ;main.c: 845: count8s = 0;
  2777  0389  01A2               	clrf	_count8s
  2778  038A  01A3               	clrf	_count8s+1
  2779                           
  2780                           ;main.c: 846: if(batADValue >= 1340)
  2781  038B  0278               	subwf	_batADValue+1,w
  2782  038C  303C               	movlw	60
  2783  038D  1903               	skipnz
  2784  038E  0277               	subwf	_batADValue,w
  2785                           
  2786                           ;main.c: 847: {
  2787                           ;main.c: 848: pwStep = ((batADValue - 1340) /2) + 13;
  2788  038F  0877               	movf	_batADValue,w
  2789  0390  1C03               	skipc
  2790  0391  2B9F               	goto	L15
  2791  0392  3EC4               	addlw	196
  2792  0393  00F4               	movwf	??_checkBatAD
  2793  0394  0878               	movf	_batADValue+1,w
  2794  0395  1803               	skipnc
  2795  0396  3E01               	addlw	1
  2796  0397  3EFA               	addlw	250
  2797  0398  00F5               	movwf	??_checkBatAD+1
  2798  0399  1003               	clrc
  2799  039A  0CF5               	rrf	??_checkBatAD+1,f
  2800  039B  0CF4               	rrf	??_checkBatAD,f
  2801  039C  0874               	movf	??_checkBatAD,w
  2802  039D  3E0D               	addlw	13
  2803  039E  2BAE               	goto	L14
  2804  039F                     L15:	
  2805                           ;main.c: 850: else
  2806                           ;main.c: 851: {
  2807                           ;main.c: 852: pwStep = (batADValue - 1117) / 16;
  2808                           
  2809                           ;main.c: 849: }
  2810                           
  2811  039F  3EA3               	addlw	163
  2812  03A0  00F4               	movwf	??_checkBatAD
  2813  03A1  0878               	movf	_batADValue+1,w
  2814  03A2  1803               	skipnc
  2815  03A3  3E01               	addlw	1
  2816  03A4  3EFB               	addlw	251
  2817  03A5  00F5               	movwf	??_checkBatAD+1
  2818  03A6  3004               	movlw	4
  2819  03A7                     u3485:	
  2820  03A7  1003               	clrc
  2821  03A8  0CF5               	rrf	??_checkBatAD+1,f
  2822  03A9  0CF4               	rrf	??_checkBatAD,f
  2823  03AA  3EFF               	addlw	-1
  2824  03AB  1D03               	skipz
  2825  03AC  2BA7               	goto	u3485
  2826  03AD  0874               	movf	??_checkBatAD,w
  2827  03AE                     L14:	
  2828  03AE  00C3               	movwf	_pwStep
  2829                           
  2830                           ;main.c: 853: }
  2831                           ;main.c: 854: if(pwStep > 99)
  2832  03AF  3064               	movlw	100
  2833  03B0  0243               	subwf	_pwStep,w
  2834  03B1  1C03               	skipc
  2835  03B2  2BB5               	goto	l3223
  2836                           
  2837                           ;main.c: 855: {
  2838                           ;main.c: 856: pwStep = 99;
  2839  03B3  3063               	movlw	99
  2840  03B4  00C3               	movwf	_pwStep
  2841  03B5                     l3223:	
  2842                           
  2843                           ;main.c: 857: }
  2844                           ;main.c: 858: }
  2845                           ;main.c: 859: if(chrgFlag && batADValue > 1861)
  2846  03B5  0851               	movf	_chrgFlag,w
  2847  03B6  1903               	btfsc	3,2
  2848  03B7  2BC9               	goto	l3233
  2849  03B8  3007               	movlw	7
  2850  03B9  0278               	subwf	_batADValue+1,w
  2851  03BA  3046               	movlw	70
  2852  03BB  1903               	skipnz
  2853  03BC  0277               	subwf	_batADValue,w
  2854  03BD  1C03               	skipc
  2855  03BE  2BC9               	goto	l3233
  2856                           
  2857                           ;main.c: 860: {
  2858                           ;main.c: 861: protectFlag = 1;
  2859  03BF  01CD               	clrf	_protectFlag
  2860  03C0  0ACD               	incf	_protectFlag,f
  2861  03C1  2BC9               	goto	l3233
  2862  03C2                     l3229:	
  2863                           
  2864                           ;main.c: 864: else
  2865                           ;main.c: 865: {
  2866                           ;main.c: 866: ADCON0 = 0;
  2867  03C2  1683               	bsf	3,5	;RP0=1, select bank1
  2868  03C3  0195               	clrf	21	;volatile
  2869                           
  2870                           ;main.c: 867: ADCON1 = 0;
  2871  03C4  0196               	clrf	22	;volatile
  2872                           
  2873                           ;main.c: 868: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2874  03C5  3085               	movlw	133
  2875  03C6  00F4               	movwf	??_checkBatAD
  2876  03C7                     u3777:	
  2877  03C7  0BF4               	decfsz	??_checkBatAD,f
  2878  03C8  2BC7               	goto	u3777
  2879  03C9                     l3233:	
  2880                           
  2881                           ;main.c: 869: }
  2882                           ;main.c: 871: test_adc = ADC_Sample(3, 5);
  2883  03C9  3005               	movlw	5
  2884  03CA  00F3               	movwf	ADC_Sample@adldo
  2885  03CB  3003               	movlw	3
  2886  03CC  2103               	fcall	_ADC_Sample
  2887  03CD  00D5               	movwf	_test_adc	;volatile
  2888                           
  2889                           ;main.c: 872: if (0xA5 == test_adc)
  2890  03CE  30A5               	movlw	165
  2891  03CF  0655               	xorwf	_test_adc,w	;volatile
  2892  03D0  1D03               	btfss	3,2
  2893  03D1  2BFD               	goto	l3253
  2894                           
  2895                           ;main.c: 873: {
  2896                           ;main.c: 874: if(chrgFlag && adresult > 100)
  2897  03D2  0851               	movf	_chrgFlag,w
  2898  03D3  1903               	btfsc	3,2
  2899  03D4  0008               	return
  2900  03D5  3000               	movlw	0
  2901  03D6  0233               	subwf	_adresult+1,w	;volatile
  2902  03D7  3065               	movlw	101
  2903  03D8  1903               	skipnz
  2904  03D9  0232               	subwf	_adresult,w	;volatile
  2905  03DA  1C03               	skipc
  2906  03DB  0008               	return
  2907                           
  2908                           ;main.c: 875: {
  2909                           ;main.c: 877: if(adresult > 810 || (batADValue - adresult) > 810)
  2910  03DC  3003               	movlw	3
  2911  03DD  0233               	subwf	_adresult+1,w	;volatile
  2912  03DE  302B               	movlw	43
  2913  03DF  1903               	skipnz
  2914  03E0  0232               	subwf	_adresult,w	;volatile
  2915  03E1  1803               	skipnc
  2916  03E2  2BF2               	goto	l3245
  2917  03E3  0832               	movf	_adresult,w	;volatile
  2918  03E4  0277               	subwf	_batADValue,w
  2919  03E5  00F4               	movwf	??_checkBatAD
  2920  03E6  0833               	movf	_adresult+1,w	;volatile
  2921  03E7  1C03               	skipc
  2922  03E8  0A33               	incf	_adresult+1,w	;volatile
  2923  03E9  0278               	subwf	_batADValue+1,w
  2924  03EA  00F5               	movwf	??_checkBatAD+1
  2925  03EB  3003               	movlw	3
  2926  03EC  0275               	subwf	??_checkBatAD+1,w
  2927  03ED  302B               	movlw	43
  2928  03EE  1903               	skipnz
  2929  03EF  0274               	subwf	??_checkBatAD,w
  2930  03F0  1C03               	skipc
  2931  03F1  2BFB               	goto	l3251
  2932  03F2                     l3245:	
  2933                           
  2934                           ;main.c: 878: {
  2935                           ;main.c: 880: if(++countHalfFull > 250)
  2936  03F2  30FB               	movlw	251
  2937  03F3  0ACE               	incf	_countHalfFull,f
  2938  03F4  024E               	subwf	_countHalfFull,w
  2939  03F5  1C03               	skipc
  2940  03F6  0008               	return
  2941  03F7  3002               	movlw	2
  2942                           
  2943                           ;main.c: 881: {
  2944                           ;main.c: 882: countHalfFull = 0;
  2945  03F8  01CE               	clrf	_countHalfFull
  2946                           
  2947                           ;main.c: 883: protectFlag = 2;
  2948  03F9  00CD               	movwf	_protectFlag
  2949  03FA  0008               	return
  2950  03FB                     l3251:	
  2951                           
  2952                           ;main.c: 886: else
  2953                           ;main.c: 887: {
  2954                           ;main.c: 888: countHalfFull = 0;
  2955  03FB  01CE               	clrf	_countHalfFull
  2956                           
  2957                           ;main.c: 889: }
  2958                           ;main.c: 890: }
  2959                           ;main.c: 891: }
  2960  03FC  0008               	return
  2961  03FD                     l3253:	
  2962                           
  2963                           ;main.c: 892: else
  2964                           ;main.c: 893: {
  2965                           ;main.c: 894: ADCON0 = 0;
  2966  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  2967  03FE  0195               	clrf	21	;volatile
  2968                           
  2969                           ;main.c: 895: ADCON1 = 0;
  2970  03FF  0196               	clrf	22	;volatile
  2971                           
  2972                           ;main.c: 896: _delay((unsigned long)((100)*(16000000/4000000.0)));
  2973  0400  3085               	movlw	133
  2974  0401  00F4               	movwf	??_checkBatAD
  2975  0402                     u3787:	
  2976  0402  0BF4               	decfsz	??_checkBatAD,f
  2977  0403  2C02               	goto	u3787
  2978  0404  0008               	return
  2979  0405                     __end_of_checkBatAD:	
  2980                           
  2981                           	psect	text15
  2982  0103                     __ptext15:	
  2983 ;; *************** function _ADC_Sample *****************
  2984 ;; Defined at:
  2985 ;;		line 1142 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  adch            1    wreg     unsigned char 
  2988 ;;  adldo           1    3[COMMON] unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  adch            1    5[BANK0 ] unsigned char 
  2991 ;;  j               1    4[BANK0 ] unsigned char 
  2992 ;;  adsum           4    7[BANK0 ] volatile unsigned long 
  2993 ;;  ad_temp         2   15[BANK0 ] volatile unsigned int 
  2994 ;;  admax           2   13[BANK0 ] volatile unsigned int 
  2995 ;;  admin           2   11[BANK0 ] volatile unsigned int 
  2996 ;;  i               1    6[BANK0 ] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      unsigned char 
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 100/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1
  3006 ;;      Params:         1       0       0
  3007 ;;      Locals:         0      13       0
  3008 ;;      Temps:          0       4       0
  3009 ;;      Totals:         1      17       0
  3010 ;;Total ram usage:       18 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    2
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_checkOutA
  3017 ;;		_checkBatAD
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _ADC_Sample
  3023  0103                     _ADC_Sample:	
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _ADC_Sample: [wreg+status,2+status,0]
  3027                           ;ADC_Sample@adch stored from wreg
  3028  0103  1283               	bcf	3,5	;RP0=0, select bank0
  3029  0104  00DB               	movwf	ADC_Sample@adch
  3030                           
  3031                           ;main.c: 1144: volatile unsigned long adsum = 0;
  3032                           
  3033                           ;main.c: 1145: volatile unsigned int admin = 0, admax = 0;
  3034  0105  21DE               	fcall	PL6	;call to abstracted procedure
  3035                           
  3036                           ;main.c: 1146: volatile unsigned int ad_temp = 0;
  3037  0106  01E5               	clrf	ADC_Sample@ad_temp	;volatile
  3038  0107  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3039                           
  3040                           ;main.c: 1148: if ((!LDO_EN) && (adldo & 0x04) )
  3041  0108  1683               	bsf	3,5	;RP0=1, select bank1
  3042  0109  1D16               	btfss	22,2	;volatile
  3043  010A  1D73               	btfss	ADC_Sample@adldo,2
  3044  010B  2915               	goto	l3015
  3045                           
  3046                           ;main.c: 1149: {
  3047                           ;main.c: 1151: ADCON1 = adldo;
  3048  010C  0873               	movf	ADC_Sample@adldo,w
  3049  010D  0096               	movwf	22	;volatile
  3050                           
  3051                           ;main.c: 1152: _delay((unsigned long)((100)*(16000000/4000000.0)));
  3052  010E  3084               	movlw	132
  3053  010F  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0110  00D6               	movwf	??_ADC_Sample
  3055  0111                     u3797:	
  3056  0111  0BD6               	decfsz	??_ADC_Sample,f
  3057  0112  2911               	goto	u3797
  3058  0113  2914               	nop2
  3059                           
  3060                           ;main.c: 1153: }
  3061  0114  2917               	goto	l3017
  3062  0115                     l3015:	
  3063                           
  3064                           ;main.c: 1154: else
  3065                           ;main.c: 1155: ADCON1 = adldo;
  3066  0115  0873               	movf	ADC_Sample@adldo,w
  3067  0116  0096               	movwf	22	;volatile
  3068  0117                     l3017:	
  3069                           
  3070                           ;main.c: 1157: if(adch & 0x10)
  3071  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0118  1E5B               	btfss	ADC_Sample@adch,4
  3073  0119  291F               	goto	l3025
  3074                           
  3075                           ;main.c: 1158: {
  3076                           ;main.c: 1159: CHS4 = 1;
  3077  011A  1683               	bsf	3,5	;RP0=1, select bank1
  3078  011B  1716               	bsf	22,6	;volatile
  3079                           
  3080                           ;main.c: 1160: adch &= 0x0f;
  3081  011C  300F               	movlw	15
  3082  011D  1283               	bcf	3,5	;RP0=0, select bank0
  3083  011E  05DB               	andwf	ADC_Sample@adch,f
  3084  011F                     l3025:	
  3085                           
  3086                           ;main.c: 1163: for (i = 0; i < 10; i++)
  3087  011F  01DC               	clrf	ADC_Sample@i
  3088  0120                     l3031:	
  3089                           
  3090                           ;main.c: 1164: {
  3091                           ;main.c: 1165: ADCON0 = (unsigned char)(0X41 | (adch << 2));
  3092  0120  085B               	movf	ADC_Sample@adch,w
  3093  0121  00D6               	movwf	??_ADC_Sample
  3094  0122  3001               	movlw	1
  3095  0123  1003               	clrc
  3096  0124                     L16:	
  3097  0124  0DD6               	rlf	??_ADC_Sample,f
  3098  0125  3EFF               	addlw	-1
  3099  0126  1003               	clrc
  3100  0127  1D03               	skipz
  3101  0128  2924               	goto	L16
  3102  0129  0D56               	rlf	??_ADC_Sample,w
  3103  012A  3841               	iorlw	65
  3104  012B  1683               	bsf	3,5	;RP0=1, select bank1
  3105  012C  0095               	movwf	21	;volatile
  3106  012D  0000               	nop	;# 
  3107  012E  0000               	nop	;# 
  3108  012F  0000               	nop	;# 
  3109  0130  0000               	nop	;# 
  3110                           
  3111                           ;main.c: 1170: GODONE = 1;
  3112  0131  1683               	bsf	3,5	;RP0=1, select bank1
  3113  0132  1495               	bsf	21,1	;volatile
  3114                           
  3115                           ;main.c: 1172: unsigned char j = 0;
  3116  0133  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0134  01DA               	clrf	ADC_Sample@j
  3118  0135                     l928:	
  3119                           ;main.c: 1173: while (GODONE)
  3120                           
  3121  0135  1683               	bsf	3,5	;RP0=1, select bank1
  3122  0136  1C95               	btfss	21,1	;volatile
  3123  0137  2940               	goto	l3041
  3124                           
  3125                           ;main.c: 1174: {
  3126                           ;main.c: 1175: _delay((unsigned long)((2)*(16000000/4000000.0)));
  3127  0138  2939               	nop2	;2 cycle nop
  3128  0139  293A               	nop2	;2 cycle nop
  3129  013A  293B               	nop2	;2 cycle nop
  3130  013B  293C               	nop2	;2 cycle nop
  3131                           
  3132                           ;main.c: 1177: if (0 == (--j))
  3133  013C  1283               	bcf	3,5	;RP0=0, select bank0
  3134  013D  0BDA               	decfsz	ADC_Sample@j,f
  3135  013E  2935               	goto	l928
  3136                           
  3137                           ;main.c: 1178: return 0;
  3138  013F  3400               	retlw	0
  3139  0140                     l3041:	
  3140                           
  3141                           ;main.c: 1179: }
  3142                           ;main.c: 1181: ad_temp = (unsigned int)((ADRESH << 4) + (ADRESL >> 4));
  3143  0140  0819               	movf	25,w	;volatile
  3144  0141  1283               	bcf	3,5	;RP0=0, select bank0
  3145  0142  00E5               	movwf	ADC_Sample@ad_temp	;volatile
  3146  0143  01E6               	clrf	ADC_Sample@ad_temp+1	;volatile
  3147  0144  0EE5               	swapf	ADC_Sample@ad_temp,f	;volatile
  3148  0145  0EE6               	swapf	ADC_Sample@ad_temp+1,f	;volatile
  3149  0146  30F0               	movlw	240
  3150  0147  05E6               	andwf	ADC_Sample@ad_temp+1,f	;volatile
  3151  0148  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3152  0149  390F               	andlw	15
  3153  014A  04E6               	iorwf	ADC_Sample@ad_temp+1,f	;volatile
  3154  014B  30F0               	movlw	240
  3155  014C  05E5               	andwf	ADC_Sample@ad_temp,f	;volatile
  3156  014D  1683               	bsf	3,5	;RP0=1, select bank1
  3157  014E  0E18               	swapf	24,w	;volatile
  3158  014F  390F               	andlw	15
  3159  0150  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0151  07E5               	addwf	ADC_Sample@ad_temp,f	;volatile
  3161  0152  1803               	skipnc
  3162  0153  0AE6               	incf	ADC_Sample@ad_temp+1,f	;volatile
  3163                           
  3164                           ;main.c: 1183: if (0 == admax)
  3165  0154  0863               	movf	ADC_Sample@admax,w	;volatile
  3166  0155  0464               	iorwf	ADC_Sample@admax+1,w	;volatile
  3167  0156  1D03               	btfss	3,2
  3168  0157  295A               	goto	l3049
  3169                           
  3170                           ;main.c: 1184: {
  3171                           ;main.c: 1185: admax = ad_temp;
  3172  0158  21E7               	fcall	PL14	;call to abstracted procedure
  3173  0159  296C               	goto	l3055
  3174  015A                     l3049:	
  3175                           ;main.c: 1187: }
  3176                           
  3177                           ;main.c: 1186: admin = ad_temp;
  3178                           
  3179                           
  3180                           ;main.c: 1188: else if (ad_temp > admax)
  3181  015A  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3182  015B  0264               	subwf	ADC_Sample@admax+1,w	;volatile
  3183  015C  1D03               	skipz
  3184  015D  2960               	goto	u3105
  3185  015E  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3186  015F  0263               	subwf	ADC_Sample@admax,w	;volatile
  3187  0160                     u3105:	
  3188  0160  1803               	skipnc
  3189  0161  2964               	goto	l3053
  3190                           
  3191                           ;main.c: 1189: admax = ad_temp;
  3192  0162  21E7               	fcall	PL14	;call to abstracted procedure
  3193  0163  2970               	goto	l934
  3194  0164                     l3053:	
  3195                           
  3196                           ;main.c: 1190: else if (ad_temp < admin)
  3197  0164  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3198  0165  0266               	subwf	ADC_Sample@ad_temp+1,w	;volatile
  3199  0166  1D03               	skipz
  3200  0167  296A               	goto	u3115
  3201  0168  0861               	movf	ADC_Sample@admin,w	;volatile
  3202  0169  0265               	subwf	ADC_Sample@ad_temp,w	;volatile
  3203  016A                     u3115:	
  3204  016A  1803               	skipnc
  3205  016B  2970               	goto	l934
  3206  016C                     l3055:	
  3207                           
  3208                           ;main.c: 1191: admin = ad_temp;
  3209  016C  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3210  016D  00E2               	movwf	ADC_Sample@admin+1	;volatile
  3211  016E  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3212  016F  00E1               	movwf	ADC_Sample@admin	;volatile
  3213  0170                     l934:	
  3214                           
  3215                           ;main.c: 1193: adsum += ad_temp;
  3216  0170  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3217  0171  00D6               	movwf	??_ADC_Sample
  3218  0172  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3219  0173  00D7               	movwf	??_ADC_Sample+1
  3220  0174  01D8               	clrf	??_ADC_Sample+2
  3221  0175  01D9               	clrf	??_ADC_Sample+3
  3222  0176  0856               	movf	??_ADC_Sample,w
  3223  0177  07DD               	addwf	ADC_Sample@adsum,f	;volatile
  3224  0178  0857               	movf	??_ADC_Sample+1,w
  3225  0179  1103               	clrz
  3226  017A  1803               	skipnc
  3227  017B  3E01               	addlw	1
  3228  017C  1D03               	btfss	3,2
  3229  017D  07DE               	addwf	ADC_Sample@adsum+1,f	;volatile
  3230  017E  0858               	movf	??_ADC_Sample+2,w
  3231  017F  1103               	clrz
  3232  0180  1803               	skipnc
  3233  0181  3E01               	addlw	1
  3234  0182  1D03               	btfss	3,2
  3235  0183  07DF               	addwf	ADC_Sample@adsum+2,f	;volatile
  3236  0184  0859               	movf	??_ADC_Sample+3,w
  3237  0185  1103               	clrz
  3238  0186  1803               	skipnc
  3239  0187  3E01               	addlw	1
  3240  0188  1D03               	btfss	3,2
  3241  0189  07E0               	addwf	ADC_Sample@adsum+3,f	;volatile
  3242  018A  300A               	movlw	10
  3243  018B  0ADC               	incf	ADC_Sample@i,f
  3244  018C  025C               	subwf	ADC_Sample@i,w
  3245  018D  1C03               	skipc
  3246  018E  2920               	goto	l3031
  3247                           
  3248                           ;main.c: 1194: }
  3249                           ;main.c: 1195: adsum -= admax;
  3250  018F  0863               	movf	ADC_Sample@admax,w	;volatile
  3251  0190  00D6               	movwf	??_ADC_Sample
  3252  0191  0864               	movf	ADC_Sample@admax+1,w	;volatile
  3253  0192  21CF               	fcall	PL2	;call to abstracted procedure
  3254  0193  1C03               	skipc
  3255  0194  0F59               	incfsz	??_ADC_Sample+3,w
  3256  0195  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3257                           
  3258                           ;main.c: 1196: if (adsum >= admin)
  3259  0196  0861               	movf	ADC_Sample@admin,w	;volatile
  3260  0197  00D6               	movwf	??_ADC_Sample
  3261  0198  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3262  0199  00D7               	movwf	??_ADC_Sample+1
  3263  019A  01D8               	clrf	??_ADC_Sample+2
  3264  019B  01D9               	clrf	??_ADC_Sample+3
  3265  019C  0859               	movf	??_ADC_Sample+3,w
  3266  019D  0260               	subwf	ADC_Sample@adsum+3,w	;volatile
  3267  019E  1D03               	skipz
  3268  019F  29AA               	goto	u3155
  3269  01A0  0858               	movf	??_ADC_Sample+2,w
  3270  01A1  025F               	subwf	ADC_Sample@adsum+2,w	;volatile
  3271  01A2  1D03               	skipz
  3272  01A3  29AA               	goto	u3155
  3273  01A4  0857               	movf	??_ADC_Sample+1,w
  3274  01A5  025E               	subwf	ADC_Sample@adsum+1,w	;volatile
  3275  01A6  1D03               	skipz
  3276  01A7  29AA               	goto	u3155
  3277  01A8  0856               	movf	??_ADC_Sample,w
  3278  01A9  025D               	subwf	ADC_Sample@adsum,w	;volatile
  3279  01AA                     u3155:	
  3280  01AA  1C03               	skipc
  3281  01AB  29B4               	goto	l938
  3282                           
  3283                           ;main.c: 1197: adsum -= admin;
  3284  01AC  0861               	movf	ADC_Sample@admin,w	;volatile
  3285  01AD  00D6               	movwf	??_ADC_Sample
  3286  01AE  0862               	movf	ADC_Sample@admin+1,w	;volatile
  3287  01AF  21CF               	fcall	PL2	;call to abstracted procedure
  3288  01B0  1C03               	skipc
  3289  01B1  0F59               	incfsz	??_ADC_Sample+3,w
  3290  01B2  02E0               	subwf	ADC_Sample@adsum+3,f	;volatile
  3291  01B3  29B8               	goto	l3065
  3292  01B4                     l938:	
  3293                           
  3294                           ;main.c: 1198: else
  3295                           ;main.c: 1199: adsum = 0;
  3296  01B4  01DD               	clrf	ADC_Sample@adsum	;volatile
  3297  01B5  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3298  01B6  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3299  01B7  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3300  01B8                     l3065:	
  3301                           
  3302                           ;main.c: 1201: adresult = adsum >> 3;
  3303  01B8  085D               	movf	ADC_Sample@adsum,w	;volatile
  3304  01B9  00D6               	movwf	??_ADC_Sample
  3305  01BA  085E               	movf	ADC_Sample@adsum+1,w	;volatile
  3306  01BB  00D7               	movwf	??_ADC_Sample+1
  3307  01BC  085F               	movf	ADC_Sample@adsum+2,w	;volatile
  3308  01BD  00D8               	movwf	??_ADC_Sample+2
  3309  01BE  0860               	movf	ADC_Sample@adsum+3,w	;volatile
  3310  01BF  00D9               	movwf	??_ADC_Sample+3
  3311  01C0  3003               	movlw	3
  3312  01C1                     u3175:	
  3313  01C1  1003               	clrc
  3314  01C2  0CD9               	rrf	??_ADC_Sample+3,f
  3315  01C3  0CD8               	rrf	??_ADC_Sample+2,f
  3316  01C4  0CD7               	rrf	??_ADC_Sample+1,f
  3317  01C5  0CD6               	rrf	??_ADC_Sample,f
  3318  01C6  3EFF               	addlw	-1
  3319  01C7  1D03               	skipz
  3320  01C8  29C1               	goto	u3175
  3321  01C9  0857               	movf	??_ADC_Sample+1,w
  3322  01CA  00B3               	movwf	_adresult+1	;volatile
  3323  01CB  0856               	movf	??_ADC_Sample,w
  3324  01CC  00B2               	movwf	_adresult	;volatile
  3325                           
  3326                           ;main.c: 1203: adsum = 0;
  3327                           
  3328                           ;main.c: 1204: admin = 0;
  3329                           
  3330                           ;main.c: 1205: admax = 0;
  3331  01CD  21DE               	fcall	PL6	;call to abstracted procedure
  3332                           
  3333                           ;main.c: 1206: return 0xA5;
  3334  01CE  34A5               	retlw	165
  3335  01CF                     __end_of_ADC_Sample:	
  3336  01CF                     PL2:	
  3337  01CF  00D7               	movwf	??_ADC_Sample+1
  3338  01D0  01D8               	clrf	??_ADC_Sample+2
  3339  01D1  01D9               	clrf	??_ADC_Sample+3
  3340  01D2  0856               	movf	??_ADC_Sample,w
  3341  01D3  02DD               	subwf	ADC_Sample@adsum,f	;volatile
  3342  01D4  0857               	movf	??_ADC_Sample+1,w
  3343  01D5  1C03               	skipc
  3344  01D6  0F57               	incfsz	??_ADC_Sample+1,w
  3345  01D7  02DE               	subwf	ADC_Sample@adsum+1,f	;volatile
  3346  01D8  0858               	movf	??_ADC_Sample+2,w
  3347  01D9  1C03               	skipc
  3348  01DA  0F58               	incfsz	??_ADC_Sample+2,w
  3349  01DB  02DF               	subwf	ADC_Sample@adsum+2,f	;volatile
  3350  01DC  0859               	movf	??_ADC_Sample+3,w
  3351  01DD  0008               	return
  3352  01DE                     __end_ofPL2:	
  3353  01DE                     PL6:	
  3354  01DE  01DD               	clrf	ADC_Sample@adsum	;volatile
  3355  01DF  01DE               	clrf	ADC_Sample@adsum+1	;volatile
  3356  01E0  01DF               	clrf	ADC_Sample@adsum+2	;volatile
  3357  01E1  01E0               	clrf	ADC_Sample@adsum+3	;volatile
  3358  01E2  01E1               	clrf	ADC_Sample@admin	;volatile
  3359  01E3  01E2               	clrf	ADC_Sample@admin+1	;volatile
  3360  01E4  01E3               	clrf	ADC_Sample@admax	;volatile
  3361  01E5  01E4               	clrf	ADC_Sample@admax+1	;volatile
  3362  01E6  0008               	return
  3363  01E7                     __end_ofPL6:	
  3364  01E7                     PL14:	
  3365  01E7  0866               	movf	ADC_Sample@ad_temp+1,w	;volatile
  3366  01E8  00E4               	movwf	ADC_Sample@admax+1	;volatile
  3367  01E9  0865               	movf	ADC_Sample@ad_temp,w	;volatile
  3368  01EA  00E3               	movwf	ADC_Sample@admax	;volatile
  3369  01EB  0008               	return
  3370  01EC                     __end_ofPL14:	
  3371                           
  3372                           	psect	text16
  3373  04A7                     __ptext16:	
  3374 ;; *************** function _Sleep_Mode *****************
  3375 ;; Defined at:
  3376 ;;		line 1065 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, pclath, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 100/0
  3387 ;;		On exit  : 100/100
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1
  3390 ;;      Params:         0       0       0
  3391 ;;      Locals:         0       0       0
  3392 ;;      Temps:          0       0       0
  3393 ;;      Totals:         0       0       0
  3394 ;;Total ram usage:        0 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    3
  3397 ;; This function calls:
  3398 ;;		_AD_Init
  3399 ;;		_Init_System
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function _Sleep_Mode
  3407  04A7                     _Sleep_Mode:	
  3408                           
  3409                           ;main.c: 1067: INTCON = 0;
  3410                           
  3411                           ;incstack = 0
  3412                           ; Regs used in _Sleep_Mode: [wreg+status,2+status,0+pclath+cstack]
  3413  04A7  018B               	clrf	11	;volatile
  3414                           
  3415                           ;main.c: 1069: OPTION_REG = 0;
  3416  04A8  0181               	clrf	1	;volatile
  3417                           
  3418                           ;main.c: 1071: WPUA = 0B00000000;
  3419  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  3420  04AA  0188               	clrf	8	;volatile
  3421                           
  3422                           ;main.c: 1072: TRISA = 0x0F;
  3423  04AB  300F               	movlw	15
  3424                           
  3425                           ;main.c: 1073: TRISB = 0x04;
  3426                           
  3427                           ;main.c: 1075: PORTA = 0X00;
  3428                           
  3429                           ;main.c: 1076: PORTB = 0X00;
  3430  04AC  24E0               	fcall	PL4	;call to abstracted procedure
  3431                           
  3432                           ;main.c: 1077: WPUB = 0x04;
  3433  04AD  0088               	movwf	8	;volatile
  3434                           
  3435                           ;main.c: 1079: ADCON0 = 0;
  3436  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  3437  04AF  0195               	clrf	21	;volatile
  3438                           
  3439                           ;main.c: 1080: ADCON1 = 0;
  3440  04B0  0196               	clrf	22	;volatile
  3441                           
  3442                           ;main.c: 1082: PWMCON0 = 0;
  3443  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3444  04B2  0195               	clrf	21	;volatile
  3445                           
  3446                           ;main.c: 1084: OSCCON = 0X70;
  3447  04B3  3070               	movlw	112
  3448  04B4  0094               	movwf	20	;volatile
  3449                           
  3450                           ;main.c: 1086: IOCA = 0x02;
  3451  04B5  3002               	movlw	2
  3452  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  3453  04B7  0089               	movwf	9	;volatile
  3454                           
  3455                           ;main.c: 1087: IOCB = 0x04;
  3456  04B8  3004               	movlw	4
  3457  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3458  04BA  0089               	movwf	9	;volatile
  3459                           
  3460                           ;main.c: 1089: RAIE = 1;
  3461  04BB  158E               	bsf	14,3	;volatile
  3462                           
  3463                           ;main.c: 1090: PEIE = 1;
  3464  04BC  170B               	bsf	11,6	;volatile
  3465                           
  3466                           ;main.c: 1091: RBIE = 1;
  3467  04BD  158B               	bsf	11,3	;volatile
  3468                           
  3469                           ;main.c: 1092: GIE = 0;
  3470  04BE  138B               	bcf	11,7	;volatile
  3471                           
  3472                           ;main.c: 1094: PIE1 &= 0X08;
  3473  04BF  3008               	movlw	8
  3474  04C0  058E               	andwf	14,f	;volatile
  3475                           
  3476                           ;main.c: 1095: PIR1 = 0;
  3477  04C1  018D               	clrf	13	;volatile
  3478                           
  3479                           ;main.c: 1096: INTCON &= 0XC8;
  3480  04C2  30C8               	movlw	200
  3481  04C3  058B               	andwf	11,f	;volatile
  3482                           
  3483                           ;main.c: 1098: PORTA;
  3484  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  3485  04C5  0806               	movf	6,w	;volatile
  3486                           
  3487                           ;main.c: 1099: RAIF = 0;
  3488  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3489  04C7  118D               	bcf	13,3	;volatile
  3490                           
  3491                           ;main.c: 1100: PORTB;
  3492  04C8  0806               	movf	6,w	;volatile
  3493                           
  3494                           ;main.c: 1101: RBIF = 0;
  3495  04C9  100B               	bcf	11,0	;volatile
  3496  04CA  0064               	clrwdt	;# 
  3497  04CB  0063               	sleep	;# 
  3498  04CC  0000               	nop	;# 
  3499  04CD  0064               	clrwdt	;# 
  3500  04CE  0000               	nop	;# 
  3501  04CF  0000               	nop	;# 
  3502  04D0  0000               	nop	;# 
  3503  04D1  0000               	nop	;# 
  3504  04D2  0000               	nop	;# 
  3505                           
  3506                           ;main.c: 1113: if(RAIF) RAIF = 0;
  3507  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3508  04D4  198D               	btfsc	13,3	;volatile
  3509  04D5  118D               	bcf	13,3	;volatile
  3510                           
  3511                           ;main.c: 1114: if(RBIF) RBIF = 0;
  3512  04D6  180B               	btfsc	11,0	;volatile
  3513  04D7  100B               	bcf	11,0	;volatile
  3514                           
  3515                           ;main.c: 1115: if(TMR2IF) TMR2IF = 0;
  3516  04D8  188D               	btfsc	13,1	;volatile
  3517  04D9  108D               	bcf	13,1	;volatile
  3518                           
  3519                           ;main.c: 1116: IOCA = 0B00000000;
  3520  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  3521  04DB  0189               	clrf	9	;volatile
  3522                           
  3523                           ;main.c: 1117: IOCB = 0B00000000;
  3524  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3525  04DD  0189               	clrf	9	;volatile
  3526                           
  3527                           ;main.c: 1118: Init_System();
  3528  04DE  25C0               	fcall	_Init_System
  3529                           
  3530                           ;main.c: 1119: AD_Init();
  3531  04DF  2E33               	ljmp	l2189
  3532  04E0                     __end_of_Sleep_Mode:	
  3533  04E0                     PL4:	
  3534  04E0  0085               	movwf	5	;volatile
  3535  04E1  3004               	movlw	4
  3536  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3537  04E3  0085               	movwf	5	;volatile
  3538  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  3539  04E5  0186               	clrf	6	;volatile
  3540  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  3541  04E7  0186               	clrf	6	;volatile
  3542  04E8  0008               	return
  3543  04E9                     __end_ofPL4:	
  3544                           
  3545                           	psect	text17
  3546  05C0                     __ptext17:	
  3547 ;; *************** function _Init_System *****************
  3548 ;; Defined at:
  3549 ;;		line 910 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2
  3558 ;; Tracked objects:
  3559 ;;		On entry : 100/0
  3560 ;;		On exit  : 100/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMMON   BANK0   BANK1
  3563 ;;      Params:         0       0       0
  3564 ;;      Locals:         0       0       0
  3565 ;;      Temps:          0       0       0
  3566 ;;      Totals:         0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    2
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_main
  3574 ;;		_Sleep_Mode
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _Init_System
  3580  05C0                     _Init_System:	
  3581                           
  3582                           ;incstack = 0
  3583                           ; Regs used in _Init_System: [wreg+status,2]
  3584  05C0  0000               	nop	;# 
  3585  05C1  0064               	clrwdt	;# 
  3586                           
  3587                           ;main.c: 914: OPTION_REG = 0;
  3588  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  3589  05C3  0181               	clrf	1	;volatile
  3590  05C4  0064               	clrwdt	;# 
  3591                           
  3592                           ;main.c: 916: OSCCON = 0X72;
  3593  05C5  3072               	movlw	114
  3594  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  3595  05C7  0094               	movwf	20	;volatile
  3596                           
  3597                           ;main.c: 918: WPUA = 0B00000000;
  3598  05C8  1683               	bsf	3,5	;RP0=1, select bank1
  3599  05C9  0188               	clrf	8	;volatile
  3600                           
  3601                           ;main.c: 919: WPDA = 0x00;
  3602  05CA  0187               	clrf	7	;volatile
  3603                           
  3604                           ;main.c: 920: WPUB = 0x04;
  3605  05CB  3004               	movlw	4
  3606  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  3607  05CD  0088               	movwf	8	;volatile
  3608                           
  3609                           ;main.c: 922: TRISA = 0x0F;
  3610  05CE  300F               	movlw	15
  3611  05CF  1683               	bsf	3,5	;RP0=1, select bank1
  3612                           
  3613                           ;main.c: 923: TRISB = 0x04;
  3614                           
  3615                           ;main.c: 925: PORTA = 0X00;
  3616                           
  3617                           ;main.c: 926: PORTB = 0X00;
  3618  05D0  24E0               	fcall	PL4	;call to abstracted procedure
  3619                           
  3620                           ;main.c: 930: PR2 = 249;
  3621  05D1  30F9               	movlw	249
  3622  05D2  0091               	movwf	17	;volatile
  3623                           
  3624                           ;main.c: 931: TMR2IF = 0;
  3625  05D3  108D               	bcf	13,1	;volatile
  3626                           
  3627                           ;main.c: 932: TMR2IE = 1;
  3628  05D4  148E               	bsf	14,1	;volatile
  3629                           
  3630                           ;main.c: 934: T2CON = 0B00000100;
  3631  05D5  3004               	movlw	4
  3632  05D6  0093               	movwf	19	;volatile
  3633                           
  3634                           ;main.c: 935: INTCON = 0XC0;
  3635  05D7  30C0               	movlw	192
  3636  05D8  008B               	movwf	11	;volatile
  3637  05D9  0008               	return
  3638  05DA                     __end_of_Init_System:	
  3639                           
  3640                           	psect	text18
  3641  0633                     __ptext18:	
  3642 ;; *************** function _AD_Init *****************
  3643 ;; Defined at:
  3644 ;;		line 947 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 100/0
  3655 ;;		On exit  : 100/100
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1
  3658 ;;      Params:         0       0       0
  3659 ;;      Locals:         0       0       0
  3660 ;;      Temps:          0       0       0
  3661 ;;      Totals:         0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    2
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_main
  3669 ;;		_Sleep_Mode
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           
  3674                           ;psect for function _AD_Init
  3675  0633                     _AD_Init:	
  3676  0633                     l2189:	
  3677                           ;incstack = 0
  3678                           ; Regs used in _AD_Init: [wreg+status,2]
  3679                           
  3680                           
  3681                           ;main.c: 980: ADCON0 = 0X41;
  3682  0633  3041               	movlw	65
  3683  0634  1683               	bsf	3,5	;RP0=1, select bank1
  3684  0635  0095               	movwf	21	;volatile
  3685                           
  3686                           ;main.c: 997: ADCON1 = 0;
  3687  0636  0196               	clrf	22	;volatile
  3688                           
  3689                           ;main.c: 998: ANSEL0 = 0X0D;
  3690  0637  300D               	movlw	13
  3691  0638  0093               	movwf	19	;volatile
  3692                           
  3693                           ;main.c: 999: ANSEL1 = 0x00;
  3694  0639  0194               	clrf	20	;volatile
  3695  063A  0008               	return
  3696  063B                     __end_of_AD_Init:	
  3697                           
  3698                           	psect	text19
  3699  056C                     __ptext19:	
  3700 ;; *************** function _Isr_Timer *****************
  3701 ;; Defined at:
  3702 ;;		line 131 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  1    wreg      void 
  3709 ;; Registers used:
  3710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 100/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1
  3716 ;;      Params:         0       0       0
  3717 ;;      Locals:         0       0       0
  3718 ;;      Temps:          3       0       0
  3719 ;;      Totals:         3       0       0
  3720 ;;Total ram usage:        3 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    1
  3723 ;; This function calls:
  3724 ;;		_ledShow
  3725 ;; This function is called by:
  3726 ;;		Interrupt level 1
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function _Isr_Timer
  3732  056C                     _Isr_Timer:	
  3733                           
  3734                           ;main.c: 133: if(TMR2IF)
  3735  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3736  056D  1C8D               	btfss	13,1	;volatile
  3737  056E  2D80               	goto	i1l688
  3738                           
  3739                           ;main.c: 134: {
  3740                           ;main.c: 135: TMR2IF = 0;
  3741  056F  108D               	bcf	13,1	;volatile
  3742                           
  3743                           ;main.c: 136: if(++intCount >= 160)
  3744  0570  30A0               	movlw	160
  3745  0571  0AD4               	incf	_intCount,f
  3746  0572  0254               	subwf	_intCount,w
  3747  0573  1C03               	skipc
  3748  0574  2D7D               	goto	i1l2927
  3749  0575  3064               	movlw	100
  3750                           
  3751                           ;main.c: 137: {
  3752                           ;main.c: 138: intCount = 0;
  3753  0576  01D4               	clrf	_intCount
  3754                           
  3755                           ;main.c: 139: IntFlag = 1;
  3756  0577  01D2               	clrf	_IntFlag
  3757  0578  0AD2               	incf	_IntFlag,f
  3758                           
  3759                           ;main.c: 140: if(++count1s >= 100)
  3760  0579  0AD3               	incf	_count1s,f
  3761  057A  0253               	subwf	_count1s,w
  3762  057B  1803               	btfsc	3,0
  3763                           
  3764                           ;main.c: 141: {
  3765                           ;main.c: 142: count1s = 0;
  3766  057C  01D3               	clrf	_count1s
  3767  057D                     i1l2927:	
  3768                           
  3769                           ;main.c: 143: }
  3770                           ;main.c: 144: }
  3771                           ;main.c: 145: ledShow();
  3772  057D  21EC               	fcall	_ledShow
  3773                           
  3774                           ;main.c: 146: intCount10++;
  3775  057E  1283               	bcf	3,5	;RP0=0, select bank0
  3776  057F  0ACF               	incf	_intCount10,f
  3777  0580                     i1l688:	
  3778  0580  0872               	movf	??_Isr_Timer+2,w
  3779  0581  008A               	movwf	10
  3780  0582  0871               	movf	??_Isr_Timer+1,w
  3781  0583  0084               	movwf	4
  3782  0584  0E70               	swapf	??_Isr_Timer^(0+-128),w
  3783  0585  0083               	movwf	3
  3784  0586  0EFE               	swapf	126,f
  3785  0587  0E7E               	swapf	126,w
  3786  0588  0009               	retfie
  3787  0589                     __end_of_Isr_Timer:	
  3788                           
  3789                           	psect	intentry
  3790  0004                     __pintentry:	
  3791                           ;incstack = 0
  3792                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3793                           
  3794  0004                     interrupt_function:	
  3795  007E                     saved_w	set	btemp
  3796  0004  00FE               	movwf	btemp
  3797  0005  0E03               	swapf	3,w
  3798  0006  00F0               	movwf	??_Isr_Timer
  3799  0007  0804               	movf	4,w
  3800  0008  00F1               	movwf	??_Isr_Timer+1
  3801  0009  080A               	movf	10,w
  3802  000A  00F2               	movwf	??_Isr_Timer+2
  3803  000B  2D6C               	ljmp	_Isr_Timer
  3804                           
  3805                           	psect	text20
  3806  01EC                     __ptext20:	
  3807 ;; *************** function _ledShow *****************
  3808 ;; Defined at:
  3809 ;;		line 196 in file "C:\mcuproject\scm\zdt\D205_062B_SOP14\main.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3818 ;; Tracked objects:
  3819 ;;		On entry : 100/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMMON   BANK0   BANK1
  3823 ;;      Params:         0       0       0
  3824 ;;      Locals:         0       0       0
  3825 ;;      Temps:          0       0       0
  3826 ;;      Totals:         0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_Isr_Timer
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function _ledShow
  3838  01EC                     _ledShow:	
  3839                           
  3840                           ;main.c: 198: if(++ledCntTime > 5)
  3841                           
  3842                           ;incstack = 0
  3843                           ; Regs used in _ledShow: [wreg-fsr0h+status,2+status,0]
  3844  01EC  3006               	movlw	6
  3845  01ED  0AB9               	incf	_ledCntTime,f
  3846  01EE  0239               	subwf	_ledCntTime,w
  3847  01EF  1C03               	skipc
  3848  01F0  0008               	return
  3849  01F1  300F               	movlw	15
  3850                           
  3851                           ;main.c: 199: {
  3852                           ;main.c: 200: ledCntTime = 0;
  3853  01F2  01B9               	clrf	_ledCntTime
  3854                           
  3855                           ;main.c: 201: if(++ledCnt > 14)
  3856  01F3  0ACB               	incf	_ledCnt,f
  3857  01F4  024B               	subwf	_ledCnt,w
  3858  01F5  1803               	btfsc	3,0
  3859                           
  3860                           ;main.c: 202: {
  3861                           ;main.c: 203: ledCnt = 0;
  3862  01F6  01CB               	clrf	_ledCnt
  3863                           
  3864                           ;main.c: 204: }
  3865                           ;main.c: 205: PORTA &= 0x3F;
  3866  01F7  303F               	movlw	63
  3867  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  3868  01F9  0586               	andwf	6,f	;volatile
  3869                           
  3870                           ;main.c: 206: PORTB &= 0xDC;
  3871  01FA  30DC               	movlw	220
  3872  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3873  01FC  0586               	andwf	6,f	;volatile
  3874                           
  3875                           ;main.c: 207: TRISA |= 0x30;
  3876  01FD  3030               	movlw	48
  3877  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  3878  01FF  0485               	iorwf	5,f	;volatile
  3879                           
  3880                           ;main.c: 208: TRISB |= 0x23;
  3881  0200  3023               	movlw	35
  3882  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3883  0202  0485               	iorwf	5,f	;volatile
  3884                           
  3885                           ;main.c: 209: switch(ledCnt)
  3886  0203  2A9D               	goto	i1l2457
  3887  0204                     i1l708:	
  3888                           ;main.c: 210: {
  3889                           ;main.c: 211: case 1:
  3890                           
  3891                           
  3892                           ;main.c: 212: if(shiweiNum & 0x01)
  3893  0204  1C6C               	btfss	_shiweiNum,0
  3894  0205  0008               	return
  3895                           
  3896                           ;main.c: 213: {
  3897                           ;main.c: 214: TRISB &= 0xDF;
  3898  0206  1285               	bcf	5,5	;volatile
  3899                           
  3900                           ;main.c: 215: TRISA &= 0xEF;
  3901  0207  1683               	bsf	3,5	;RP0=1, select bank1
  3902  0208  1205               	bcf	5,4	;volatile
  3903                           
  3904                           ;main.c: 216: RB5 = 1;
  3905  0209  1283               	bcf	3,5	;RP0=0, select bank0
  3906  020A  1686               	bsf	6,5	;volatile
  3907                           
  3908                           ;main.c: 217: RA4 = 0;
  3909  020B  1683               	bsf	3,5	;RP0=1, select bank1
  3910  020C  1206               	bcf	6,4	;volatile
  3911  020D  0008               	return
  3912  020E                     i1l711:	
  3913                           ;main.c: 220: case 2:
  3914                           
  3915                           
  3916                           ;main.c: 221: if(shiweiNum & 0x02)
  3917  020E  1CEC               	btfss	_shiweiNum,1
  3918  020F  0008               	return
  3919                           
  3920                           ;main.c: 222: {
  3921                           ;main.c: 223: TRISB &= 0xDF;
  3922  0210  1285               	bcf	5,5	;volatile
  3923                           
  3924                           ;main.c: 224: TRISA &= 0xEF;
  3925  0211  1683               	bsf	3,5	;RP0=1, select bank1
  3926  0212  1205               	bcf	5,4	;volatile
  3927                           
  3928                           ;main.c: 225: RA4 = 1;
  3929  0213  1606               	bsf	6,4	;volatile
  3930                           
  3931                           ;main.c: 226: RB5 = 0;
  3932  0214  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0215  1286               	bcf	6,5	;volatile
  3934  0216  0008               	return
  3935  0217                     i1l713:	
  3936                           ;main.c: 229: case 3:
  3937                           
  3938                           
  3939                           ;main.c: 230: if(shiweiNum & 0x04)
  3940  0217  1D6C               	btfss	_shiweiNum,2
  3941  0218  0008               	return
  3942                           
  3943                           ;main.c: 231: {
  3944                           ;main.c: 232: TRISB &= 0xDF;
  3945  0219  1285               	bcf	5,5	;volatile
  3946                           
  3947                           ;main.c: 233: TRISB &= 0xFD;
  3948  021A  1085               	bcf	5,1	;volatile
  3949                           
  3950                           ;main.c: 234: RB5 = 1;
  3951  021B  1686               	bsf	6,5	;volatile
  3952                           
  3953                           ;main.c: 235: RB1 = 0;
  3954  021C  1086               	bcf	6,1	;volatile
  3955  021D  0008               	return
  3956  021E                     i1l715:	
  3957                           ;main.c: 238: case 4:
  3958                           
  3959                           
  3960                           ;main.c: 239: if(shiweiNum & 0x08)
  3961  021E  1DEC               	btfss	_shiweiNum,3
  3962  021F  0008               	return
  3963                           
  3964                           ;main.c: 240: {
  3965                           ;main.c: 241: TRISA &= 0xEF;
  3966  0220  1683               	bsf	3,5	;RP0=1, select bank1
  3967  0221  1205               	bcf	5,4	;volatile
  3968                           
  3969                           ;main.c: 242: TRISB &= 0xFD;
  3970  0222  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0223  1085               	bcf	5,1	;volatile
  3972                           
  3973                           ;main.c: 243: RA4 = 1;
  3974  0224  1683               	bsf	3,5	;RP0=1, select bank1
  3975  0225  1606               	bsf	6,4	;volatile
  3976                           
  3977                           ;main.c: 244: RB1 = 0;
  3978  0226  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0227  1086               	bcf	6,1	;volatile
  3980  0228  0008               	return
  3981  0229                     i1l717:	
  3982                           ;main.c: 247: case 5:
  3983                           
  3984                           
  3985                           ;main.c: 248: if(shiweiNum & 0x10)
  3986  0229  1E6C               	btfss	_shiweiNum,4
  3987  022A  0008               	return
  3988                           
  3989                           ;main.c: 249: {
  3990                           ;main.c: 250: TRISA &= 0xEF;
  3991  022B  1683               	bsf	3,5	;RP0=1, select bank1
  3992  022C  1205               	bcf	5,4	;volatile
  3993                           
  3994                           ;main.c: 251: TRISB &= 0xFE;
  3995  022D  1283               	bcf	3,5	;RP0=0, select bank0
  3996  022E  1005               	bcf	5,0	;volatile
  3997                           
  3998                           ;main.c: 252: RA4 = 1;
  3999  022F  1683               	bsf	3,5	;RP0=1, select bank1
  4000  0230  1606               	bsf	6,4	;volatile
  4001                           
  4002                           ;main.c: 253: RB0 = 0;
  4003  0231  1283               	bcf	3,5	;RP0=0, select bank0
  4004  0232  1006               	bcf	6,0	;volatile
  4005  0233  0008               	return
  4006  0234                     i1l719:	
  4007                           ;main.c: 256: case 6:
  4008                           
  4009                           
  4010                           ;main.c: 257: if(shiweiNum & 0x20)
  4011  0234  1EEC               	btfss	_shiweiNum,5
  4012  0235  0008               	return
  4013                           
  4014                           ;main.c: 258: {
  4015                           ;main.c: 259: TRISB &= 0xDF;
  4016  0236  1285               	bcf	5,5	;volatile
  4017                           
  4018                           ;main.c: 260: TRISB &= 0xFE;
  4019  0237  1005               	bcf	5,0	;volatile
  4020                           
  4021                           ;main.c: 261: RB5 = 1;
  4022  0238  1686               	bsf	6,5	;volatile
  4023                           
  4024                           ;main.c: 262: RB0 = 0;
  4025  0239  1006               	bcf	6,0	;volatile
  4026  023A  0008               	return
  4027  023B                     i1l721:	
  4028                           ;main.c: 265: case 7:
  4029                           
  4030                           
  4031                           ;main.c: 266: if(shiweiNum & 0x40)
  4032  023B  1F6C               	btfss	_shiweiNum,6
  4033  023C  0008               	return
  4034                           
  4035                           ;main.c: 267: {
  4036                           ;main.c: 268: TRISB &= 0xFD;
  4037  023D  1085               	bcf	5,1	;volatile
  4038                           
  4039                           ;main.c: 269: TRISB &= 0xFE;
  4040  023E  1005               	bcf	5,0	;volatile
  4041                           
  4042                           ;main.c: 270: RB1 = 1;
  4043  023F  1486               	bsf	6,1	;volatile
  4044                           
  4045                           ;main.c: 271: RB0 = 0;
  4046  0240  1006               	bcf	6,0	;volatile
  4047  0241  0008               	return
  4048  0242                     i1l723:	
  4049                           ;main.c: 274: case 8:
  4050                           
  4051                           
  4052                           ;main.c: 275: if(geweiNum & 0x01)
  4053  0242  1C6B               	btfss	_geweiNum,0
  4054  0243  0008               	return
  4055                           
  4056                           ;main.c: 276: {
  4057                           ;main.c: 277: TRISA &= 0xDF;
  4058  0244  1683               	bsf	3,5	;RP0=1, select bank1
  4059  0245  1285               	bcf	5,5	;volatile
  4060                           
  4061                           ;main.c: 278: TRISA &= 0xEF;
  4062  0246  1205               	bcf	5,4	;volatile
  4063                           
  4064                           ;main.c: 279: RA4 = 1;
  4065  0247  1606               	bsf	6,4	;volatile
  4066                           
  4067                           ;main.c: 280: RA5 = 0;
  4068  0248  1286               	bcf	6,5	;volatile
  4069  0249  0008               	return
  4070  024A                     i1l725:	
  4071                           ;main.c: 283: case 9:
  4072                           
  4073                           
  4074                           ;main.c: 284: if(geweiNum & 0x02)
  4075  024A  1CEB               	btfss	_geweiNum,1
  4076  024B  0008               	return
  4077                           
  4078                           ;main.c: 285: {
  4079                           ;main.c: 286: TRISA &= 0xDF;
  4080  024C  1683               	bsf	3,5	;RP0=1, select bank1
  4081  024D  1285               	bcf	5,5	;volatile
  4082                           
  4083                           ;main.c: 287: TRISA &= 0xEF;
  4084  024E  1205               	bcf	5,4	;volatile
  4085                           
  4086                           ;main.c: 288: RA5 = 1;
  4087  024F  1686               	bsf	6,5	;volatile
  4088                           
  4089                           ;main.c: 289: RA4 = 0;
  4090  0250  1206               	bcf	6,4	;volatile
  4091  0251  0008               	return
  4092  0252                     i1l727:	
  4093                           ;main.c: 292: case 10:
  4094                           
  4095                           
  4096                           ;main.c: 293: if(geweiNum & 0x04)
  4097  0252  1D6B               	btfss	_geweiNum,2
  4098  0253  0008               	return
  4099                           
  4100                           ;main.c: 294: {
  4101                           ;main.c: 295: TRISA &= 0xDF;
  4102  0254  1683               	bsf	3,5	;RP0=1, select bank1
  4103  0255  1285               	bcf	5,5	;volatile
  4104                           
  4105                           ;main.c: 296: TRISB &= 0xDF;
  4106  0256  1283               	bcf	3,5	;RP0=0, select bank0
  4107  0257  1285               	bcf	5,5	;volatile
  4108                           
  4109                           ;main.c: 297: RB5 = 1;
  4110  0258  1686               	bsf	6,5	;volatile
  4111                           
  4112                           ;main.c: 298: RA5 = 0;
  4113  0259  1683               	bsf	3,5	;RP0=1, select bank1
  4114  025A  1286               	bcf	6,5	;volatile
  4115  025B  0008               	return
  4116  025C                     i1l729:	
  4117                           ;main.c: 301: case 11:
  4118                           
  4119                           
  4120                           ;main.c: 302: if(geweiNum & 0x08)
  4121  025C  1DEB               	btfss	_geweiNum,3
  4122  025D  0008               	return
  4123                           
  4124                           ;main.c: 303: {
  4125                           ;main.c: 304: TRISA &= 0xDF;
  4126  025E  1683               	bsf	3,5	;RP0=1, select bank1
  4127  025F  1285               	bcf	5,5	;volatile
  4128                           
  4129                           ;main.c: 305: TRISB &= 0xDF;
  4130  0260  1283               	bcf	3,5	;RP0=0, select bank0
  4131  0261  1285               	bcf	5,5	;volatile
  4132                           
  4133                           ;main.c: 306: RA5 = 1;
  4134  0262  1683               	bsf	3,5	;RP0=1, select bank1
  4135  0263  1686               	bsf	6,5	;volatile
  4136                           
  4137                           ;main.c: 307: RB5 = 0;
  4138  0264  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0265  1286               	bcf	6,5	;volatile
  4140  0266  0008               	return
  4141  0267                     i1l731:	
  4142                           ;main.c: 310: case 12:
  4143                           
  4144                           
  4145                           ;main.c: 311: if(geweiNum & 0x10)
  4146  0267  1E6B               	btfss	_geweiNum,4
  4147  0268  0008               	return
  4148                           
  4149                           ;main.c: 312: {
  4150                           ;main.c: 313: TRISA &= 0xDF;
  4151  0269  1683               	bsf	3,5	;RP0=1, select bank1
  4152  026A  1285               	bcf	5,5	;volatile
  4153                           
  4154                           ;main.c: 314: TRISB &= 0xFD;
  4155  026B  1283               	bcf	3,5	;RP0=0, select bank0
  4156  026C  1085               	bcf	5,1	;volatile
  4157                           
  4158                           ;main.c: 315: RB1 = 1;
  4159  026D  1486               	bsf	6,1	;volatile
  4160                           
  4161                           ;main.c: 316: RA5 = 0;
  4162  026E  1683               	bsf	3,5	;RP0=1, select bank1
  4163  026F  1286               	bcf	6,5	;volatile
  4164  0270  0008               	return
  4165  0271                     i1l733:	
  4166                           ;main.c: 319: case 13:
  4167                           
  4168                           
  4169                           ;main.c: 320: if(geweiNum & 0x20)
  4170  0271  1EEB               	btfss	_geweiNum,5
  4171  0272  0008               	return
  4172                           
  4173                           ;main.c: 321: {
  4174                           ;main.c: 322: TRISA &= 0xDF;
  4175  0273  1683               	bsf	3,5	;RP0=1, select bank1
  4176  0274  1285               	bcf	5,5	;volatile
  4177                           
  4178                           ;main.c: 323: TRISB &= 0xFD;
  4179  0275  1283               	bcf	3,5	;RP0=0, select bank0
  4180  0276  1085               	bcf	5,1	;volatile
  4181                           
  4182                           ;main.c: 324: RA5 = 1;
  4183  0277  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0278  1686               	bsf	6,5	;volatile
  4185                           
  4186                           ;main.c: 325: RB1 = 0;
  4187  0279  1283               	bcf	3,5	;RP0=0, select bank0
  4188  027A  1086               	bcf	6,1	;volatile
  4189  027B  0008               	return
  4190  027C                     i1l735:	
  4191                           ;main.c: 328: case 14:
  4192                           
  4193                           
  4194                           ;main.c: 329: if(geweiNum & 0x40)
  4195  027C  1F6B               	btfss	_geweiNum,6
  4196  027D  0008               	return
  4197                           
  4198                           ;main.c: 330: {
  4199                           ;main.c: 331: TRISA &= 0xDF;
  4200  027E  1683               	bsf	3,5	;RP0=1, select bank1
  4201  027F  1285               	bcf	5,5	;volatile
  4202                           
  4203                           ;main.c: 332: TRISB &= 0xFE;
  4204  0280  1283               	bcf	3,5	;RP0=0, select bank0
  4205  0281  1005               	bcf	5,0	;volatile
  4206                           
  4207                           ;main.c: 333: RA5 = 1;
  4208  0282  1683               	bsf	3,5	;RP0=1, select bank1
  4209  0283  1686               	bsf	6,5	;volatile
  4210                           
  4211                           ;main.c: 334: RB0 = 0;
  4212  0284  1283               	bcf	3,5	;RP0=0, select bank0
  4213  0285  1006               	bcf	6,0	;volatile
  4214  0286  0008               	return
  4215  0287                     i1l2447:	
  4216                           
  4217                           ;main.c: 338: if(workStep > 0)
  4218  0287  087A               	movf	_workStep,w
  4219  0288  1903               	btfsc	3,2
  4220  0289  0008               	return
  4221                           
  4222                           ;main.c: 339: {
  4223                           ;main.c: 340: TRISA &= 0xEF;
  4224  028A  1683               	bsf	3,5	;RP0=1, select bank1
  4225  028B  1205               	bcf	5,4	;volatile
  4226                           
  4227                           ;main.c: 341: TRISB &= 0xFE;
  4228  028C  1283               	bcf	3,5	;RP0=0, select bank0
  4229  028D  1005               	bcf	5,0	;volatile
  4230                           
  4231                           ;main.c: 342: RB0 = 1;
  4232  028E  1406               	bsf	6,0	;volatile
  4233                           
  4234                           ;main.c: 343: RA4 = 0;
  4235  028F  1683               	bsf	3,5	;RP0=1, select bank1
  4236  0290  1206               	bcf	6,4	;volatile
  4237  0291  0008               	return
  4238  0292                     i1l2451:	
  4239                           
  4240                           ;main.c: 347: if(workStep > 0)
  4241  0292  087A               	movf	_workStep,w
  4242  0293  1903               	btfsc	3,2
  4243  0294  0008               	return
  4244                           
  4245                           ;main.c: 348: {
  4246                           ;main.c: 349: TRISA &= 0xDF;
  4247  0295  1683               	bsf	3,5	;RP0=1, select bank1
  4248  0296  1285               	bcf	5,5	;volatile
  4249                           
  4250                           ;main.c: 350: TRISB &= 0xFE;
  4251  0297  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0298  1005               	bcf	5,0	;volatile
  4253                           
  4254                           ;main.c: 351: RB0 = 1;
  4255  0299  1406               	bsf	6,0	;volatile
  4256                           
  4257                           ;main.c: 352: RA5 = 0;
  4258  029A  1683               	bsf	3,5	;RP0=1, select bank1
  4259  029B  1286               	bcf	6,5	;volatile
  4260  029C  0008               	return
  4261  029D                     i1l2457:	
  4262  029D  084B               	movf	_ledCnt,w
  4263                           
  4264                           ; Switch size 1, requested type "space"
  4265                           ; Number of cases is 16, Range of values is 0 to 15
  4266                           ; switch strategies available:
  4267                           ; Name         Instructions Cycles
  4268                           ; direct_byte           22     6 (fixed)
  4269                           ; simple_byte           49    25 (average)
  4270                           ; jumptable            260     6 (fixed)
  4271                           ;	Chosen strategy is direct_byte
  4272  029E  0084               	movwf	4
  4273  029F  3010               	movlw	16
  4274  02A0  0204               	subwf	4,w
  4275  02A1  1803               	skipnc
  4276  02A2  0008               	return
  4277  02A3  3006               	movlw	high i1S3365
  4278  02A4  008A               	movwf	10
  4279  02A5  3000               	movlw	low i1S3365
  4280  02A6  0704               	addwf	4,w
  4281  02A7  0082               	movwf	2
  4282  02A8  0008               	return
  4283  02A9                     __end_of_ledShow:	
  4284  007E                     btemp	set	126	;btemp
  4285  007E                     wtemp0	set	126
  4286                           
  4287                           	psect	swtext1
  4288  0600                     __pswtext1:	
  4289  0600                     i1S3365:	
  4290  0600  2A92               	ljmp	i1l2451
  4291  0601  2A04               	ljmp	i1l708
  4292  0602  2A0E               	ljmp	i1l711
  4293  0603  2A17               	ljmp	i1l713
  4294  0604  2A1E               	ljmp	i1l715
  4295  0605  2A29               	ljmp	i1l717
  4296  0606  2A34               	ljmp	i1l719
  4297  0607  2A3B               	ljmp	i1l721
  4298  0608  2A42               	ljmp	i1l723
  4299  0609  2A4A               	ljmp	i1l725
  4300  060A  2A52               	ljmp	i1l727
  4301  060B  2A5C               	ljmp	i1l729
  4302  060C  2A67               	ljmp	i1l731
  4303  060D  2A71               	ljmp	i1l733
  4304  060E  2A7C               	ljmp	i1l735
  4305  060F  2A87               	ljmp	i1l2447


Data Sizes:
    Strings     0
    Constant    14
    Data        0
    BSS         58
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     21      78
    BANK1            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _ledCtr->___lbdiv
    _keyCtr->_keyRead
    _checkOutA->___bmul
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_checkOutA
    _ledCtr->___lbmod
    _checkOutA->_ADC_Sample
    _checkBatAD->_ADC_Sample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3015
                            _AD_Init
                        _Init_System
                         _Sleep_Mode
                         _checkBatAD
                          _checkOutA
                            _chrgCtr
                             _keyCtr
                             _ledCtr
                            _workCtr
 ---------------------------------------------------------------------------------
 (1) _workCtr                                              0     0      0       0
                            _pwmInit
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ledCtr                                               0     0      0     748
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              5     4      1     427
                                              3 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     321
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _keyCtr                                               1     1      0      67
                                              4 COMMON     1     1      0
                            _keyRead
 ---------------------------------------------------------------------------------
 (2) _keyRead                                              1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _chrgCtr                                              2     2      0       0
                                              3 COMMON     2     2      0
                        _chrgPwmInit
                        _chrgPwmStop
                            _pwmStop
 ---------------------------------------------------------------------------------
 (2) _pwmStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmStop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _chrgPwmInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkOutA                                            4     4      0    1223
                                             17 BANK0      4     4      0
                         _ADC_Sample
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     145
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _checkBatAD                                           2     2      0     977
                                              4 COMMON     2     2      0
                         _ADC_Sample
 ---------------------------------------------------------------------------------
 (2) _ADC_Sample                                          18    17      1     977
                                              3 COMMON     1     0      1
                                              0 BANK0     17    17      0
 ---------------------------------------------------------------------------------
 (1) _Sleep_Mode                                           0     0      0       0
                            _AD_Init
                        _Init_System
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AD_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _ledShow
 ---------------------------------------------------------------------------------
 (4) _ledShow                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AD_Init
   _Init_System
   _Sleep_Mode
     _AD_Init
     _Init_System
   _checkBatAD
     _ADC_Sample
   _checkOutA
     _ADC_Sample
     ___bmul
   _chrgCtr
     _chrgPwmInit
     _chrgPwmStop
     _pwmStop
   _keyCtr
     _keyRead
   _ledCtr
     ___lbdiv
     ___lbmod
   _workCtr
     _pwmInit
     _pwmStop

 _Isr_Timer (ROOT)
   _ledShow

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     15      4E       4       97.5%
BITBANK1            50      0       0       5        0.0%
BANK1               50      0       0       6        0.0%
ABS                  0      0      59       7        0.0%
DATA                 0      0      59       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 29 17:52:50 2025

            _protectFlag 004D                        pc 0002           ___bmul@product 0074  
                     PL2 01CF                       PL4 04E0                       PL6 01DE  
                     PL8 00FD                       fsr 0004                      PL10 045D  
                    PL12 05FB                      PL14 01E7                      l824 0546  
                    l853 030D                      l693 046C                      l934 0170  
                    l928 0135                      l697 0486                      l938 01B4  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _RA4 0434                      _RA5 0435                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _PR2 0011  
    __size_of_ADC_Sample 00CC                      fsr0 0004                      indf 0000  
        __end_of_AD_Init 063B                     l1205 05B1                     l3031 0120  
                   l3015 0115                     l3111 02C6                     l3041 0140  
                   l3025 011F                     l3017 0117                     l3121 02DC  
                   l3211 0388                     l3123 02DD                     l3053 0164  
                   l3133 02EE                     l3109 02C5                     l3055 016C  
                   l3223 03B5                     l3151 0313                     l3143 0305  
                   l3303 0474                     l3065 01B8                     l3049 015A  
                   l3233 03C9                     l2249 0566                     l3081 058D  
                   l3251 03FB                     l3171 0331                     l3163 0325  
                   l3155 0319                     l3139 0301                     l2195 0642  
                   l2603 0049                     l2189 0633                     l3245 03F2  
                   l3253 03FD                     l3229 03C2                     l2349 0612  
                   l2701 00FA                     l2621 0062                     l2613 0055  
                   l2381 05BE                     l3175 0337                     l3167 032B  
                   l3159 031F                     l2631 006F                     l2607 004B  
                   l2367 05AB                     l3343 04A5                     l3185 034E  
                   l3193 0357                     l2641 0089                     l3089 05A1  
                   l3281 0435                     l3273 0423                     l3265 0410  
                   l3179 033D                     l2651 00A5                     l2643 008B  
                   l2803 04F3                     l3189 0350                     l2661 00B2  
                   l2629 006D                     l3285 0449                     l2663 00B4  
                   l2647 008F                     l2591 0036                     l2575 0023  
                   l2681 00D8                     l2657 00AF                     l3289 045A  
                   l2817 050D                     l2825 051F                     l2675 00D3  
                   l2819 050F                     l2677 00D4                     l2589 0034  
                   l2685 00DF                     l2773 0534                     l2781 053D  
                   l2777 0539                     _CHS4 04B6                     _IOCA 0089  
                   _IOCB 0009                     u3105 0160                     u3115 016A  
                   u2415 00A3                     u3305 02F7                     u3155 01AA  
                   u3175 01C1                     u2455 00C7                     _PIE1 000E  
                   u3425 0346                     _PEIE 005E                     _RAIE 0073  
                   _RAIF 006B                     u3485 03A7                     _RBIE 005B  
                   _RBIF 0058                     u3767 035D                     u3777 03C7  
                   _PIR1 000D                     u3787 0402                     u3797 0111  
                   _WPDA 0087                     _WPUA 0088                     _WPUB 0008  
                   _main 0462                     btemp 007E                     start 000C  
      ___bmul@multiplier 0075            ??_Init_System 0073                    ?_main 0070  
        __end_of___lbdiv 05C0          __end_of___lbmod 05A5                    _T2CON 0013  
                  i1l711 020E                    i1l721 023B                    i1l713 0217  
                  i1l731 0267                    i1l723 0242                    i1l715 021E  
                  i1l708 0204                    i1l733 0271                    i1l725 024A  
                  i1l717 0229                    i1l735 027C                    i1l727 0252  
                  i1l719 0234                    i1l729 025C                    i1l688 0580  
          _countHalfFull 004E                    _PORTA 0086                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0005                    _PWMTH 0018  
                  _PWMTL 0017          __end_of_chrgCtr 00FD          __end_of_ledShow 02A9  
        __end_of_keyRead 056C                    pclath 000A          __end_of_pwmInit 062B  
        __end_of_pwmStop 0642                    status 0003                    wtemp0 007E  
        __end_of_workCtr 0523          ___lbdiv@divisor 0073          ___lbdiv@counter 0075  
        __initialization 000D             __end_of_main 04A7     __size_of_chrgPwmInit 000D  
   __size_of_chrgPwmStop 0007                   ??_main 0077                ??_AD_Init 0073  
    __end_of_Init_System 05DA                   _ADCON0 0095                   _ADCON1 0096  
                 i1S3365 0600                   _ADRESH 0099                   _ADRESL 0098  
                 _ANSEL0 0093                   _ANSEL1 0094                   _GODONE 04A9  
                 i1l2451 0292                   i1l2447 0287                   i1l2457 029D  
                 i1l2927 057D                   _LDO_EN 04B2                   _INTCON 000B  
                 _OSCCON 0014                   _TMR2IE 0071                   _TMR2IF 0069  
                 _PWMD2L 009B                   _PWMD3L 009C             ??_ADC_Sample 0056  
           keyCtr@kclick 0074       __size_of_Isr_Timer 001D               _Sleep_Mode 04A7  
                 ___bmul 0610                ??___lbdiv 0074                ??___lbmod 0074  
                 _ledCnt 004B                   _ledCtr 0405                   _keyCtr 0523  
                 _jrStep 0036                ??_chrgCtr 0073                   _pwStep 0043  
                 _result 0030                ??_ledShow 0070         __end_of_numArray 05EE  
              ??_keyRead 0073       __end_of_ADC_Sample 01CF                   saved_w 007E  
              ??_pwmInit 0073                ??_pwmStop 0073                ??_workCtr 0073  
       ___lbdiv@dividend 0074               _batADValue 0077          ___lbmod@divisor 0073  
__end_of__initialization 0016          ___lbmod@counter 0057      ___bmul@multiplicand 0073  
        _workOverOutTime 004C           __pcstackCOMMON 0070       __size_of_checkOutA 00B8  
            _Init_System 05C0               __end_ofPL2 01DE               __end_ofPL4 04E9  
             __end_ofPL6 01E7               __end_ofPL8 0103         ___lbdiv@quotient 0076  
      __end_of_Isr_Timer 0589               _checkBatAD 0361               __pbssBANK0 0020  
           _chrgFullFlag 0050              ?_Sleep_Mode 0070               __pmaintext 0462  
                ?___bmul 0073               __pintentry 0004                  ?_ledCtr 0070  
           _chrgWaitTime 003B                  ?_keyCtr 0070               _ledCntTime 0039  
                _AD_Init 0633                  _PWM23DT 009D                  _PWMD23H 009E  
                _PWMCON0 0015                  _PWMCON1 0016                  _PWMCON2 001D  
      __end_of_checkOutA 0361               __stringtab 05DA                  _IntFlag 0052  
             _intCount10 004F          ADC_Sample@adldo 0073          ADC_Sample@admax 0063  
        ADC_Sample@admin 0061          ADC_Sample@adsum 005D          __size_of___bmul 000E  
                ___lbdiv 05A5                  ___lbmod 0589                  _addTime 003D  
        __size_of_ledCtr 0058          __size_of_keyCtr 002B                  _chrgCtr 0018  
             _lowBatFlag 0038                  __ptext1 04E9                  __ptext2 061E  
                __ptext3 0405                  __ptext4 0589                  __ptext5 05A5  
                __ptext6 0523                  __ptext7 054E                  __ptext8 0018  
                __ptext9 063B                  _ledShow 01EC                  _count1s 0053  
                _count5s 0026                  _count8s 0022                  _maxDuty 0048  
                _keyRead 054E      __size_of_Sleep_Mode 0039                  _pwmInit 061E  
                _subTime 003C              ?_checkBatAD 0070                  _pwmStop 063B  
                clrloop0 062C                  _workCtr 04E9               _outADValue 002C  
   end_of_initialization 0016            _longPressFlag 0049            ??_chrgPwmInit 0073  
          ??_chrgPwmStop 0073         ___lbmod@dividend 0056              ___lbmod@rem 0058  
    __size_of_checkBatAD 00A4           __end_of___bmul 061E             ?_Init_System 0070  
         __end_of_ledCtr 045D           __end_of_keyCtr 054E      __end_of_chrgPwmInit 05FB  
    __end_of_chrgPwmStop 0649              __end_ofPL10 0462              __end_ofPL12 05FF  
            __end_ofPL14 01EC      start_initialization 000D                _Isr_Timer 056C  
           ??_Sleep_Mode 0073                 ??___bmul 0074                 ??_ledCtr 0077  
      ADC_Sample@ad_temp 0065                 ??_keyCtr 0074                 ?_AD_Init 0070  
            __pbssCOMMON 0077                ___latbits 0000            __pcstackBANK0 0056  
     __end_of_Sleep_Mode 04E0               ?_Isr_Timer 0070                _checkOutA 02A9  
              __pnvBANK0 006B              _chrgMaxDuty 003A                _chrgMaxAD 003F  
            _chrgPwmFlag 0035              _chrgPwmInit 05EE                 ?___lbdiv 0073  
               ?___lbmod 0073              _chrgPwmStop 0642                 ?_chrgCtr 0070  
              __pstrings 05DA                __pswtext1 0600                _count900s 0020  
               ?_ledShow 0070                 ?_keyRead 0070                _firstTime 006D  
         ADC_Sample@adch 005B                 ?_pwmInit 0070                _fullCount 0028  
           ??_checkBatAD 0074                 ?_pwmStop 0070                _lockCount 003E  
               ?_workCtr 0070              ADC_Sample@i 005C              ADC_Sample@j 005A  
      interrupt_function 0004               ?_checkOutA 0070                clear_ram0 062B  
              _prePwStep 0079              _reChrgCount 0042                _sleepTime 0037  
              _shiweiNum 006C                _overCount 0047        checkOutA@maxtempV 0069  
     __end_of_checkBatAD 0405              __stringbase 05DF     __size_of_Init_System 001A  
              _startTime 0045         __size_of_AD_Init 0008         keyRead@keyStatus 0073  
            ??_Isr_Timer 0070               _ADC_Sample 0103         __size_of___lbdiv 001B  
       __size_of___lbmod 001C       __end_of__stringtab 05E0         __size_of_chrgCtr 00E5  
       __size_of_ledShow 00BD         __size_of_keyRead 001E                 _adresult 0032  
               _chrgFlag 0051                 _chrgMode 0040                 __ptext10 0642  
               __ptext11 05EE                 __ptext20 01EC                 __ptext12 02A9  
               __ptext13 0610                 __ptext14 0361                 __ptext15 0103  
               __ptext16 04A7                 __ptext17 05C0                 __ptext18 0633  
               __ptext19 056C         __size_of_pwmInit 000D         __size_of_pwmStop 0007  
               _geweiNum 006B                 _count50s 002A         __size_of_workCtr 003A  
               _keyCount 004A                 _intCount 0054            __size_of_main 0045  
            ??_checkOutA 0067                 _numArray 05E0         checkOutA@maxAout 006A  
               _tempDuty 0046                 _test_adc 0055                 _power_ad 002E  
               _workStep 007A             _overChrgTime 0044             _motorPwmFlag 0034  
               intlevel1 0000              ?_ADC_Sample 0073                stringcode 05DA  
           ?_chrgPwmInit 0070             _overWorkTime 0024             ?_chrgPwmStop 0070  
            _showBatTime 0041               _OPTION_REG 0001                 stringdir 05DA  
               stringtab 05DA  
